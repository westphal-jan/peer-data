{"id": "1206.4642", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Jun-2012", "title": "Fast Computation of Subpath Kernel for Trees", "abstract": "The kernel method is a potential approach to analyzing structured data such as sequences, trees, and graphs; however, unordered trees have not been investigated extensively. Kimura et al. (2011) proposed a kernel function for unordered trees on the basis of their subpaths, which are vertical substructures of trees responsible for hierarchical information in them. Their kernel exhibits practically good performance in terms of accuracy and speed; however, linear-time computation is not guaranteed theoretically, unlike the case of the other unordered tree kernel proposed by Vishwanathan and Smola (2003). In this paper, we propose a theoretically guaranteed linear-time kernel computation algorithm that is practically fast, and we present an efficient prediction algorithm whose running time depends only on the size of the input tree. Experimental results show that the proposed algorithms are quite efficient in practice.", "histories": [["v1", "Mon, 18 Jun 2012 15:18:51 GMT  (345kb)", "http://arxiv.org/abs/1206.4642v1", "ICML2012"]], "COMMENTS": "ICML2012", "reviews": [], "SUBJECTS": "cs.DS cs.LG stat.ML", "authors": ["daisuke kimura", "hisashi kashima"], "accepted": true, "id": "1206.4642"}, "pdf": {"name": "1206.4642.pdf", "metadata": {"source": "CRF", "title": "Fast Computation of Subpath Kernel for Trees", "authors": ["Daisuke Kimura", "Hisashi Kashima"], "emails": ["kimura@mist.i.u-tokyo.ac.jp", "kashima@mist.i.u-tokyo.ac.jp"], "sections": [{"heading": "1. Introduction", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "1.1. Kernels for structured data", "text": "Numerous studies exploring machine learning deal with real vectors. However, a significant portion of real data is presented not as vectors, but as sequences, trees, and graphs. For example, we can present biological sequences and natural language texts as sequences, analyzed texts, and semistructured data such as HTML and XML as trees, and chemical compounds as graphs. Extensive studies have been conducted to analyze structured data such as sequences, trees, and graphs based on their appearance in the Proceedings of the 29th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012."}, {"heading": "1.2. Tree kernels", "text": "In this paper, we focus on tree kernels in relation to the size of the tree. Collins and Duffy (2001) proposed the first tree kernel for tree paresis 1, and it was then extended to commonly cultivated trees (Kashima & Koyanagi, 2002). However, more recently, several kernels for cultivated trees have been proposed (Moschitti, 2006; Kuboyama et al., 2006; Aiolli et al., 2009; Sun et al., 2011). Among the existing tree kernels, few can handle uncultivated trees (Fig. 1 (a)). In their basic work, Vishwanathan and Smola (2003) propose an efficient kernel for uncultivated trees. Their work is groundbreaking in two respects: Calculation can be made in linear time in relation to the size of two trees by transforming the trees into strings. Furthermore, in the prediction phase, we can make predictions for a new tree in relation to the size of the tree coming."}, {"heading": "1.3. Proposed methods", "text": "By improving the result of Kimura et al. (2011), we want to develop (i) a theoretically guaranteed linear kernel computation algorithm that is practically fast, and (ii) an efficient prediction algorithm whose runtime depends only on the size of the input surface. However, the key to achieving these two goals is an efficient data structure that accesses vertical sub-structures in trees. The suffix tree (ST) of trees (Shibuya, 2003) is a potential candidate. However, despite its theoretical merits performance (in particular its memory usage) is not sufficient for practical use, as shown in literature (e.g. Abouelhoda et al. (2004)). To overcome this challenge, we are using a more space-efficient data structure known as the extended suffix array (ESA) for disordered trees, and we are developing its linear construction algorithm that shifts the ST algorithm to the best of knowledge to the top of the trace algorithm."}, {"heading": "1.4. Contributions", "text": "Our study includes the following three contributions: 1. We propose a linear time algorithm for constructing an extended suffix array for a tree (Section 3); 2. We propose a linear time algorithm for calculating the subpath kernel (Section 4); 3. We present a fast algorithm for predicting the subpath kernel whose time complexity does not depend on the number of support vectors (Section 5)."}, {"heading": "2. Subpath Kernel for Unordered Trees", "text": "Kimura et al. (2011) proposed a tree kernel based on sub-paths to capture vertical sub-structures responsible for hierarchical information in trees. Formally, a sub-path is a sub-chain of a path from the root to one of the leaves (Figure 1 (c)). By using sub-paths, they proposed a core function between two trees T1 and T2, and num (T1p) and num (T2p) are the number of times a sub-path p-P appears in T1 and T2, where P is the set of all sub-paths in T1 and T2, and num (T1p) and num (T2p) are the number of times a sub-path p-P appears in T1 and T2, in T2."}, {"heading": "3. Efficient Data Structure for Unordered Trees", "text": "First we consider the suffix tree and the ESA for a tree. Both are for constructing fast algorithms for the subpath kernel in Section 4. Then we propose a novel algorithm for constructing the ESA in linear time."}, {"heading": "3.1. Suffix Trees and Enhaced Suffix Arrays for a Tree", "text": "Let's say T is a rooted tree consisting of n nodes whose node names are drawn from the alphabet \u03a3 of size \u03c3 = | \u03a3 |. The i-th suffix of T (denoted by Si) is the string that corresponds to the path from the i-th node to the root of T. For a string s, any substring beginning with the first character is denoted as a prefix. The suffix tree (ST) of a tree T is a patricia trie for all suffixes of T (fig. 3 (a)), where a common prefix of suffixes is associated with a transition from the root to an internal node. Although ST provides quick access to any suffix of the tree, it is known to require a large amount of storage space and is therefore inefficient for practical purposes. ESA (Abouelhoda et al., 2004) is a more spatial data structure that enables many of the ST-provided operations, hence it is commonly used in many STX operations."}, {"heading": "3.2. Linear-time construction algorithm of an ESA for a tree", "text": "There is a linear age algorithm that constructs an ESA for a string (Ka \ufffd rkka \ufffd inen & Sanders, 2003). However, to the best of our knowledge there is no algorithm to construct an ESA for a tree in linear time. Therefore, we propose an O (T | T |) algorithm for constructing an ESA for a tree, which is described as Algorithm 1. Our algorithm is designed by carefully combining two algorithms, namely the skew algorithm for constructing strands (Ka \ufffd rkka \ufffd n & Sanders, 2003) and the linear-temporal construction algorithm of an SA for a tree (Ferragina et al., 2005). The following theorem guarantees that this algorithm constructs an ESA in linear time. Theorem 1 Algorithm 1 constructs the ESA for a tree."}, {"heading": "4. Linear-time Algorithm for Computing the Subpath Kernel", "text": "We propose a linear time algorithm for calculating the subpath kernel (2) by using the ESA for the trees featured in Section 3. The proposed algorithm consists of the following three steps. Insert special terminal characters and $2 ($1 < $2) just above the root nodes of T1 and T2 | then the two trees merge. (We assume that $1 and $2 are lexicographically smaller than any letter in \u03a3.) 2. Construct an ESA for the merged tree using algorithms 1. 3. Calculate Eq. (2) by simulating bottom-up traversal in the ST for the merged tree, with ESA.First, the algorithm merges the input trees T1 and T2 in step 1, where the special terminal characters are added to ensure that no suffix can be a prefix of another suffix."}, {"heading": "5. Fast Prediction", "text": "A serious disadvantage when applying core methods to large datasets is that we need to evaluate a core function between an input file T and all support vectors Ti (i = 1,..., m) in the prediction phase. For the kernel subpath, the prediction for a tree T is needsto (S), (3) where PSi and PS are the set of all prefixes of suffixes in Ti and T, respectively. Note: Eq. (3) is identical to that of Teo and Vishwanathan (2006) when {Ti} i and T are strings. We suggested a complex O (T |) time whose runtime does not depend on the number of support vectors."}, {"heading": "6. Experiments", "text": "We demonstrate the performance of the linear time algorithm for the subpath kernel and the fast computation algorithm in the prediction phase. First, we compare the execution time of the proposed linear time algorithm (referred to as \"Proposed\") with that of the existing algorithm of Kimura et al. (2011) (\"Multikey\") for the subpath kernel and compare it with the linear time tree core (Teo & Vishwanathan, 2006) (\"Vishwanathan\"), that of Teo and Vishwanathan2.Next, we investigate the execution time of the algorithm in the prediction phase (referred to as \"Prediction\"), we investigate the effect of the size of an input tree and the number of support vectors, and we also compare the execution time with the direct computation of Eq. (3) (\"Direct\") and the linear time tree core (Teo & Vishwanathan, 2006 \"shwanathan\") with the whole GH2 experiment."}, {"heading": "6.1. Experiment 1: Fast kernel evaluation", "text": "We compare the execution times with three real datasets, including one XML dataset (Zaki & Aggarwal, 2006) and two Glycan datasets (Hashimoto et al., 2003; Doubet & Albersheim, 1992).Table 1 lists the statistics of these datasets. We have measured the average computation time required for a single evaluation of each core function. Figure 5 (a) shows the average times of \"Proposed,\" \"Multikey\" and \"Vishwanathan\" for the three datasets. The2http: / / users.cecs.anu.edu.au / ~ chteo / SASK.htmlresults show that our proposed linear time algorithm is consistently the fastest, showing that our kernel is quite efficient both in practice and in theory.Next, we examine the scalability of the algorithms with artificial datasets. We have set the label size to 5 and the tree size to average time (Figure 5)."}, {"heading": "6.2. Experiment 2: Fast prediction", "text": "We compare the execution times in the prediction phase with the XML dataset. We give all support vectors a uniform weight of \u03b1i = 1. First, we examine the effect of the number of support vectors. We merge the first 100 XML data into an input tree. We use the other XML data as support vectors and vary the number of support vectors. Figure 6 (a) shows the average times of \"prediction,\" \"direct\" and \"Vishwanathan.\" The results show that the execution times of forecast and Vishwanathan are not dependent on the number of support vectors, while those of direct-scale scales are linear. Next, we examine the effects of the size of an input tree on the \"prediction algorithm.\" We set the number of support vectors to 100 and vary the size of an input tree. Figure 6 (b) shows the average times of the pre-quadratic algorithm of the worst error algorithm in terms of the early execution."}, {"heading": "7. Related Work", "text": "The first tree kernel was proposed by Collins and Duffy (Collins & Duffy, 2001) for parse trees (Kashima & Koyanagi, 2002; Kuboyama et al., 2006), syntactic trees (thumb \u0301 III & Marcu, 2004), and position trees (Aiolli et al., 2009), but all of these cores use (explicitly or implicitly) border order information at each node in their definitions or algorithms and therefore cannot be applied directly to disordered trees."}, {"heading": "8. Conclusion", "text": "In this paper, we focused on the subpath kernel for disordered trees proposed by Kimura et al. (2011) and proposed a linear time algorithm for computing with an extended suffix array for trees. In order to achieve the desired temporal complexity, we proposed for the first time a linear time algorithm for constructing an extended suffix array for trees. Furthermore, we presented a fast prediction algorithm that is independent of the number of support vectors because it uses the algorithm of (Teo & Vishwanathan, 2006). Experimental results showed that the proposed algorithm is faster than the existing algorithm and its practical runtime scales are linear in practice. Furthermore, the runtime in the prediction is independent of the number of support vectors. One possible future development is to combine the subpath kernel with a fast SVM training framework with cores."}, {"heading": "Acknowledgments", "text": "This work was supported by MEXT KAKENHI 80545583."}], "references": [{"title": "Replacing suffix trees with enhanced suffix arrays", "author": ["M.I. Abouelhoda", "S. Kurtz", "E. Ohlebusch"], "venue": "J. Discrete Algorithms,", "citeRegEx": "Abouelhoda et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Abouelhoda et al\\.", "year": 2004}, {"title": "Route kernels for trees", "author": ["F. Aiolli", "Martino", "G. Da San", "A. Sperduti"], "venue": "In ICML,", "citeRegEx": "Aiolli et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Aiolli et al\\.", "year": 2009}, {"title": "The level ancestor problem simplified. Theo", "author": ["M.A. Bender", "M. Farach-Colton"], "venue": "Compute. Sci.,", "citeRegEx": "Bender and Farach.Colton,? \\Q2004\\E", "shortCiteRegEx": "Bender and Farach.Colton", "year": 2004}, {"title": "Fast algorithms for sorting and searching strings", "author": ["J.L. Bentley", "R. Sedgewick"], "venue": "In SODA,", "citeRegEx": "Bentley and Sedgewick,? \\Q1997\\E", "shortCiteRegEx": "Bentley and Sedgewick", "year": 1997}, {"title": "LIBSVM: a library for support vector machines", "author": ["Chang", "C.-C", "Lin", "C.-J"], "venue": null, "citeRegEx": "Chang et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Chang et al\\.", "year": 2001}, {"title": "Convolution kernels for natural language", "author": ["M. Collins", "N. Duffy"], "venue": "In NIPS,", "citeRegEx": "Collins and Duffy,? \\Q2001\\E", "shortCiteRegEx": "Collins and Duffy", "year": 2001}, {"title": "A tree-position kernel for document compression", "author": ["H. Daum\u00e9 III", "D. Marcu"], "venue": "In DUC,", "citeRegEx": "III and Marcu,? \\Q2004\\E", "shortCiteRegEx": "III and Marcu", "year": 2004}, {"title": "Structuring labeled trees for optimal succinctness, and beyond", "author": ["P. Ferragina", "F. Luccio", "G. Manzini", "S. Muthukrishnan"], "venue": "In FOCS,", "citeRegEx": "Ferragina et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Ferragina et al\\.", "year": 2005}, {"title": "On graph kernels: Hardness results and efficient alternatives", "author": ["T. G\u00e4rtner", "P. Flach", "S. Wrobel"], "venue": "In COLT,", "citeRegEx": "G\u00e4rtner et al\\.,? \\Q2003\\E", "shortCiteRegEx": "G\u00e4rtner et al\\.", "year": 2003}, {"title": "Glycan: The database of carbohydrate structures", "author": ["K. Hashimoto", "M. Hamajima", "S. Goto", "S. Masumoto", "M. Kawashima", "M. Kanehisa"], "venue": "In GIW,", "citeRegEx": "Hashimoto et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Hashimoto et al\\.", "year": 2003}, {"title": "Convolution kernels on discrete structures", "author": ["D. Haussler"], "venue": "Technical Report UCSC-CRL-99-10, University of Calfornia in Santa Cruz,", "citeRegEx": "Haussler,? \\Q1999\\E", "shortCiteRegEx": "Haussler", "year": 1999}, {"title": "Simple linear work suffix array construction", "author": ["J. K\u00e4rkk\u00e4inen", "P. Sanders"], "venue": "In ICALP,", "citeRegEx": "K\u00e4rkk\u00e4inen and Sanders,? \\Q2003\\E", "shortCiteRegEx": "K\u00e4rkk\u00e4inen and Sanders", "year": 2003}, {"title": "Linear-time longest-common-prefix computation in suffix arrays and its applications", "author": ["T. Kasai", "G. Lee", "H. Arimura", "S. Arikawa", "K. Park"], "venue": "CPM,", "citeRegEx": "Kasai et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Kasai et al\\.", "year": 2001}, {"title": "Machine Learning Approaches for Structureddata", "author": ["H. Kashima"], "venue": "PhD thesis, Kyoto University,", "citeRegEx": "Kashima,? \\Q2007\\E", "shortCiteRegEx": "Kashima", "year": 2007}, {"title": "Kernels for semi-structured data", "author": ["H. Kashima", "T. Koyanagi"], "venue": "In ICML,", "citeRegEx": "Kashima and Koyanagi,? \\Q2002\\E", "shortCiteRegEx": "Kashima and Koyanagi", "year": 2002}, {"title": "Marginalized kernels between labeled graphs", "author": ["H. Kashima", "K. Tsuda", "A. Inokuchi"], "venue": "In ICML,", "citeRegEx": "Kashima et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Kashima et al\\.", "year": 2003}, {"title": "A subpath kernel for rooted unordered trees", "author": ["D. Kimura", "T. Kuboyama", "T. Shibuya", "H. Kashima"], "venue": "In PAKDD,", "citeRegEx": "Kimura et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Kimura et al\\.", "year": 2011}, {"title": "A gram distribution kernel applied to glycan classification and motif extraction", "author": ["T. Kuboyama", "K. Hirata", "K.F. Aoki-Kinoshita", "H. Kashima", "H. Yasuda"], "venue": "In GIW,", "citeRegEx": "Kuboyama et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Kuboyama et al\\.", "year": 2006}, {"title": "The spectrum kernel: a string kernel for SVM protein classification", "author": ["C. Leslie", "E. Eskin", "W.S. Noble"], "venue": "In PSB,", "citeRegEx": "Leslie et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Leslie et al\\.", "year": 2002}, {"title": "Text classification using string kernels", "author": ["H. Lodhi", "C. Saunders", "J. Shawe-Taylor", "N. Cristianini", "C. Watkins"], "venue": "J. Mach. Learn. Res.,", "citeRegEx": "Lodhi et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Lodhi et al\\.", "year": 2002}, {"title": "Efficient convolution kernels for dependency and constituent syntactic trees", "author": ["A. Moschitti"], "venue": "In ECML,", "citeRegEx": "Moschitti,? \\Q2006\\E", "shortCiteRegEx": "Moschitti", "year": 2006}, {"title": "Learning with Kernels", "author": ["B. Sch\u00f6lkopf", "A.J. Smola"], "venue": null, "citeRegEx": "Sch\u00f6lkopf and Smola,? \\Q2002\\E", "shortCiteRegEx": "Sch\u00f6lkopf and Smola", "year": 2002}, {"title": "Fast support vector machines for structural kernels", "author": ["A. Severyn", "A. Moschitti"], "venue": "In ECML PKDD,", "citeRegEx": "Severyn and Moschitti,? \\Q2011\\E", "shortCiteRegEx": "Severyn and Moschitti", "year": 2011}, {"title": "Constructing the suffix tree of a tree with a large alphabet", "author": ["T. Shibuya"], "venue": "IEICE Trans,", "citeRegEx": "Shibuya,? \\Q2003\\E", "shortCiteRegEx": "Shibuya", "year": 2003}, {"title": "Tree sequence kernel for natural language", "author": ["J. Sun", "M. Zhang", "C.L. Tan"], "venue": "In AAAI,", "citeRegEx": "Sun et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Sun et al\\.", "year": 2011}, {"title": "Fast and space efficient string kernels using suffix arrays", "author": ["C.H. Teo", "S.V.N. Vishwanathan"], "venue": "In ICML,", "citeRegEx": "Teo and Vishwanathan,? \\Q2006\\E", "shortCiteRegEx": "Teo and Vishwanathan", "year": 2006}, {"title": "Fast kernels for string and tree matching", "author": ["S.V.N. Vishwanathan", "A. Smola"], "venue": "In NIPS,", "citeRegEx": "Vishwanathan and Smola,? \\Q2003\\E", "shortCiteRegEx": "Vishwanathan and Smola", "year": 2003}, {"title": "Xrules: An effective structural classifier for xml data", "author": ["M.J. Zaki", "C.C. Aggarwal"], "venue": "Mach. Learn.,", "citeRegEx": "Zaki and Aggarwal,? \\Q2006\\E", "shortCiteRegEx": "Zaki and Aggarwal", "year": 2006}], "referenceMentions": [{"referenceID": 16, "context": "Kimura et al. (2011) proposed a kernel function for unordered trees on the basis of their subpaths, which are vertical substructures of trees responsible for hierarchical information in them.", "startOffset": 0, "endOffset": 21}, {"referenceID": 16, "context": "Kimura et al. (2011) proposed a kernel function for unordered trees on the basis of their subpaths, which are vertical substructures of trees responsible for hierarchical information in them. Their kernel exhibits practically good performance in terms of accuracy and speed; however, lineartime computation is not guaranteed theoretically, unlike the case of the other unordered tree kernel proposed by Vishwanathan and Smola (2003). In this paper, we propose a theoretically guaranteed linear-time kernel computation algorithm that is also practically fast, and we present an efficient prediction algorithm whose running time depends only on the size of the input tree.", "startOffset": 0, "endOffset": 433}, {"referenceID": 10, "context": "A framework called the convolution kernel (Haussler, 1999) is widely used for designing kernel functions for structured data, where the structured data are (implicitly) decomposed into substructures, and a kernel function is defined as the sum of kernel functions among the substructures.", "startOffset": 42, "endOffset": 58}, {"referenceID": 19, "context": "In the framework of the convolution kernel, various kernel functions have been proposed for sequences (Lodhi et al., 2002; Leslie et al., 2002), trees (Collins & Duffy, 2001; Kashima & Koyanagi, 2002; Aiolli et al.", "startOffset": 102, "endOffset": 143}, {"referenceID": 18, "context": "In the framework of the convolution kernel, various kernel functions have been proposed for sequences (Lodhi et al., 2002; Leslie et al., 2002), trees (Collins & Duffy, 2001; Kashima & Koyanagi, 2002; Aiolli et al.", "startOffset": 102, "endOffset": 143}, {"referenceID": 1, "context": ", 2002), trees (Collins & Duffy, 2001; Kashima & Koyanagi, 2002; Aiolli et al., 2009), and graphs (Kashima et al.", "startOffset": 15, "endOffset": 85}, {"referenceID": 15, "context": ", 2009), and graphs (Kashima et al., 2003; G\u00e4rtner et al., 2003).", "startOffset": 20, "endOffset": 64}, {"referenceID": 8, "context": ", 2009), and graphs (Kashima et al., 2003; G\u00e4rtner et al., 2003).", "startOffset": 20, "endOffset": 64}, {"referenceID": 20, "context": "More recently, various kernels for ordered trees have been proposed (Moschitti, 2006; Kuboyama et al., 2006; Aiolli et al., 2009; Sun et al., 2011).", "startOffset": 68, "endOffset": 147}, {"referenceID": 17, "context": "More recently, various kernels for ordered trees have been proposed (Moschitti, 2006; Kuboyama et al., 2006; Aiolli et al., 2009; Sun et al., 2011).", "startOffset": 68, "endOffset": 147}, {"referenceID": 1, "context": "More recently, various kernels for ordered trees have been proposed (Moschitti, 2006; Kuboyama et al., 2006; Aiolli et al., 2009; Sun et al., 2011).", "startOffset": 68, "endOffset": 147}, {"referenceID": 24, "context": "More recently, various kernels for ordered trees have been proposed (Moschitti, 2006; Kuboyama et al., 2006; Aiolli et al., 2009; Sun et al., 2011).", "startOffset": 68, "endOffset": 147}, {"referenceID": 4, "context": "The first tree kernel was proposed by Collins and Duffy (2001) for parse trees, and it was then extended to general ordered trees (Kashima & Koyanagi, 2002).", "startOffset": 38, "endOffset": 63}, {"referenceID": 1, "context": ", 2006; Aiolli et al., 2009; Sun et al., 2011). Among the existing tree kernels, only a few kernels can handle unordered trees (Fig. 1(a)). In their seminal work, Vishwanathan and Smola (2003) proposed an efficient kernel for unordered trees.", "startOffset": 8, "endOffset": 193}, {"referenceID": 9, "context": "Figure 2 shows the experimental comparison of the predictive accuracy of their kernel with that of four other tree kernels using three datasets, including one XML dataset (Zaki & Aggarwal, 2006) and two glycan datasets (Hashimoto et al., 2003; Doubet & Albersheim, 1992).", "startOffset": 219, "endOffset": 270}, {"referenceID": 20, "context": "tion using the enhanced suffix array (ESA) for strings was proposed by Teo and Vishwanathan (2006). More recently, Kimura et al.", "startOffset": 71, "endOffset": 99}, {"referenceID": 13, "context": "More recently, Kimura et al. (2011) proposed another tree kernel using vertical substructures called subpaths.", "startOffset": 15, "endOffset": 36}, {"referenceID": 8, "context": "Figure 2 shows the experimental comparison of the predictive accuracy of their kernel with that of four other tree kernels using three datasets, including one XML dataset (Zaki & Aggarwal, 2006) and two glycan datasets (Hashimoto et al., 2003; Doubet & Albersheim, 1992). Note that three kernels were designed by Kashima & Koyanagi (2002), Moschitti (2006) and Aiolli et al.", "startOffset": 220, "endOffset": 339}, {"referenceID": 8, "context": "Figure 2 shows the experimental comparison of the predictive accuracy of their kernel with that of four other tree kernels using three datasets, including one XML dataset (Zaki & Aggarwal, 2006) and two glycan datasets (Hashimoto et al., 2003; Doubet & Albersheim, 1992). Note that three kernels were designed by Kashima & Koyanagi (2002), Moschitti (2006) and Aiolli et al.", "startOffset": 220, "endOffset": 357}, {"referenceID": 1, "context": "Note that three kernels were designed by Kashima & Koyanagi (2002), Moschitti (2006) and Aiolli et al. (2009) for ordered trees; hence, we used the order information appearing in the datasets as it is.", "startOffset": 89, "endOffset": 110}, {"referenceID": 1, "context": "Note that three kernels were designed by Kashima & Koyanagi (2002), Moschitti (2006) and Aiolli et al. (2009) for ordered trees; hence, we used the order information appearing in the datasets as it is. The results show that the subpath kernel proposed by Kimura et al. (2011) is competitive with the other kernels.", "startOffset": 89, "endOffset": 276}, {"referenceID": 1, "context": "Note that three kernels were designed by Kashima & Koyanagi (2002), Moschitti (2006) and Aiolli et al. (2009) for ordered trees; hence, we used the order information appearing in the datasets as it is. The results show that the subpath kernel proposed by Kimura et al. (2011) is competitive with the other kernels. Interestingly, the subpath kernel and the kernel proposed by Vishwanathan and Smola (2003) work complementarily.", "startOffset": 89, "endOffset": 406}, {"referenceID": 16, "context": "(c) Subpath features of Kimura et al. . Kimura et al. (2011) also showed that their subpath kernel is practically fast and that it is competitive with the linear-time kernel (Teo & Vishwanathan, 2006).", "startOffset": 24, "endOffset": 61}, {"referenceID": 16, "context": "(c) Subpath features of Kimura et al. . Kimura et al. (2011) also showed that their subpath kernel is practically fast and that it is competitive with the linear-time kernel (Teo & Vishwanathan, 2006). However, despite its practical usefulness, the time complexity of the subpath kernel is theoretically O(nlogn) on average, and it is O(n) in the worst case, where n is the sum of the sizes of the input trees, because their algorithm for computing the kernel uses the multi-key quick sort (Bentley & Sedgewick, 1997). Moreover, in contrast to the lineartime kernel (Vishwanathan & Smola, 2003; Teo & Vishwanathan, 2006), we need to evaluate the subpath kernel between a given tree and all the support vectors in the prediction phase, which is a We used LIBSVM (Chang & Lin, 2001) as the SVM implementation. The accuracy is measured using 10-fold cross-validation. Kernels by Kimura et al. (2011) and Moschitti (2006) have tunable weight parameters, which were also tuned by cross-validation.", "startOffset": 24, "endOffset": 897}, {"referenceID": 16, "context": "(c) Subpath features of Kimura et al. . Kimura et al. (2011) also showed that their subpath kernel is practically fast and that it is competitive with the linear-time kernel (Teo & Vishwanathan, 2006). However, despite its practical usefulness, the time complexity of the subpath kernel is theoretically O(nlogn) on average, and it is O(n) in the worst case, where n is the sum of the sizes of the input trees, because their algorithm for computing the kernel uses the multi-key quick sort (Bentley & Sedgewick, 1997). Moreover, in contrast to the lineartime kernel (Vishwanathan & Smola, 2003; Teo & Vishwanathan, 2006), we need to evaluate the subpath kernel between a given tree and all the support vectors in the prediction phase, which is a We used LIBSVM (Chang & Lin, 2001) as the SVM implementation. The accuracy is measured using 10-fold cross-validation. Kernels by Kimura et al. (2011) and Moschitti (2006) have tunable weight parameters, which were also tuned by cross-validation.", "startOffset": 24, "endOffset": 918}, {"referenceID": 20, "context": "(2011) is competitive with the three other kernels (Vishwanathan & Smola, 2003; Kashima & Koyanagi, 2002; Moschitti, 2006; Aiolli et al., 2009).", "startOffset": 51, "endOffset": 143}, {"referenceID": 1, "context": "(2011) is competitive with the three other kernels (Vishwanathan & Smola, 2003; Kashima & Koyanagi, 2002; Moschitti, 2006; Aiolli et al., 2009).", "startOffset": 51, "endOffset": 143}, {"referenceID": 14, "context": "The subpath kernel proposed by Kimura et al. (2011) is competitive with the three other kernels (Vishwanathan & Smola, 2003; Kashima & Koyanagi, 2002; Moschitti, 2006; Aiolli et al.", "startOffset": 31, "endOffset": 52}, {"referenceID": 23, "context": "The suffix tree (ST) of trees (Shibuya, 2003) is a potential candidate.", "startOffset": 30, "endOffset": 45}, {"referenceID": 15, "context": "Proposed methods By improving the result of Kimura et al. (2011), we aim to develop (i) a theoretically guaranteed lineartime kernel computation algorithm that is practically fast, and (ii) an efficient prediction algorithm whose running time depends only on the size of the input tree.", "startOffset": 44, "endOffset": 65}, {"referenceID": 0, "context": ", Abouelhoda et al. (2004)).", "startOffset": 2, "endOffset": 27}, {"referenceID": 0, "context": "The ESA (Abouelhoda et al., 2004) is a more spaceefficient data structure that allows many of the operations provided by the ST, and therefore, it is often used in many practical applications instead of the ST.", "startOffset": 8, "endOffset": 33}, {"referenceID": 7, "context": "Our algorithm is designed by carefully combining two algorithms, namely, the skew algorithm for ESA construction of strings (K\u00e4rkk\u00e4inen & Sanders, 2003) and the linear-time construction algorithm of an SA for a tree (Ferragina et al., 2005).", "startOffset": 216, "endOffset": 240}, {"referenceID": 7, "context": "This can be done in O(|T |) time (Ferragina et al., 2005).", "startOffset": 33, "endOffset": 57}, {"referenceID": 7, "context": "This can be done in O(|T |) time (Ferragina et al., 2005). The key to the linear-time construction is in Step 4, which is originated from the algorithm of K\u00e4rkk\u00e4inen and Sanders (2003) for updating the LCP for strings.", "startOffset": 34, "endOffset": 185}, {"referenceID": 12, "context": "Since we constructed an ESA instead of a ST, we use the ESA to simulate bottom-up traversals in the ST (Kasai et al., 2001).", "startOffset": 103, "endOffset": 123}, {"referenceID": 25, "context": "(3) is identical to the one of Teo and Vishwanathan (2006) when {Ti}i and T are strings.", "startOffset": 31, "endOffset": 59}, {"referenceID": 1, "context": "Finally, we point out that the algorithms in Section 4 and this section can also be applied to the route kernel (Aiolli et al., 2009) for ordered trees.", "startOffset": 112, "endOffset": 133}, {"referenceID": 16, "context": "First, we compare the execution time of the proposed linear-time algorithm (denoted by \u2018Proposed\u2019) with that of the existing algorithm of Kimura et al. (2011) (\u2018Multikey\u2019) for the subpath kernel.", "startOffset": 138, "endOffset": 159}, {"referenceID": 9, "context": "Experiment 1: Fast kernel evaluation We compare the execution times using three real data sets, including one XML data set (Zaki & Aggarwal, 2006) and two glycan data sets (Hashimoto et al., 2003; Doubet & Albersheim, 1992).", "startOffset": 172, "endOffset": 223}, {"referenceID": 17, "context": "The first tree kernel was proposed for parse trees by Collins and Duffy (Collins & Duffy, 2001), and then, it was generalized for labeled ordered trees (Kashima & Koyanagi, 2002; Kuboyama et al., 2006), syntactic trees (Daum\u00e9 III & Marcu, 2004), and positional trees (Aiolli et al.", "startOffset": 152, "endOffset": 201}, {"referenceID": 1, "context": ", 2006), syntactic trees (Daum\u00e9 III & Marcu, 2004), and positional trees (Aiolli et al., 2009).", "startOffset": 73, "endOffset": 94}, {"referenceID": 8, "context": "Since Haussler (1999) introduced the framework of the convolution kernel, various kernel functions for trees have been proposed.", "startOffset": 6, "endOffset": 22}, {"referenceID": 1, "context": ", 2006), syntactic trees (Daum\u00e9 III & Marcu, 2004), and positional trees (Aiolli et al., 2009). However, all these kernels (explicitly or implicitly) exploit edge order information at each node in their definitions or algorithms, and therefore, they cannot be directly applied to unordered trees. For unordered trees, a hardness result for tree kernels using general treestructured features was shown by Kashima (2007). Vishwanathan et al.", "startOffset": 74, "endOffset": 419}, {"referenceID": 1, "context": ", 2006), syntactic trees (Daum\u00e9 III & Marcu, 2004), and positional trees (Aiolli et al., 2009). However, all these kernels (explicitly or implicitly) exploit edge order information at each node in their definitions or algorithms, and therefore, they cannot be directly applied to unordered trees. For unordered trees, a hardness result for tree kernels using general treestructured features was shown by Kashima (2007). Vishwanathan et al. (2003) proposed an efficient linear-time kernel based on subtrees.", "startOffset": 74, "endOffset": 447}, {"referenceID": 1, "context": ", 2006), syntactic trees (Daum\u00e9 III & Marcu, 2004), and positional trees (Aiolli et al., 2009). However, all these kernels (explicitly or implicitly) exploit edge order information at each node in their definitions or algorithms, and therefore, they cannot be directly applied to unordered trees. For unordered trees, a hardness result for tree kernels using general treestructured features was shown by Kashima (2007). Vishwanathan et al. (2003) proposed an efficient linear-time kernel based on subtrees. While this kernel can be computed efficiently with the ESA for strings, it is pointed out that its predictive performance is usually worse than that of the other tree kernels in the previous work of Aiolli et al. (2009). Kimura et al.", "startOffset": 74, "endOffset": 727}, {"referenceID": 1, "context": ", 2006), syntactic trees (Daum\u00e9 III & Marcu, 2004), and positional trees (Aiolli et al., 2009). However, all these kernels (explicitly or implicitly) exploit edge order information at each node in their definitions or algorithms, and therefore, they cannot be directly applied to unordered trees. For unordered trees, a hardness result for tree kernels using general treestructured features was shown by Kashima (2007). Vishwanathan et al. (2003) proposed an efficient linear-time kernel based on subtrees. While this kernel can be computed efficiently with the ESA for strings, it is pointed out that its predictive performance is usually worse than that of the other tree kernels in the previous work of Aiolli et al. (2009). Kimura et al. (2011) proposed another tree kernel for unordered trees using vertical substructures called subpaths.", "startOffset": 74, "endOffset": 749}, {"referenceID": 16, "context": "In this paper, we focused on the subpath kernel for unordered trees proposed by Kimura et al. (2011), and we proposed a linear-time algorithm for computing it with an enhanced suffix array for trees.", "startOffset": 80, "endOffset": 101}, {"referenceID": 20, "context": "Recently, Severyn and Moschitti (2011) proposed a fast training algorithm for structured kernels with a cutting plane method, which might be applied for the subpath kernel.", "startOffset": 22, "endOffset": 39}], "year": 2012, "abstractText": "The kernel method is a popular approach to analyzing structured data such as sequences, trees, and graphs; however, unordered trees have not been investigated extensively. Kimura et al. (2011) proposed a kernel function for unordered trees on the basis of their subpaths, which are vertical substructures of trees responsible for hierarchical information in them. Their kernel exhibits practically good performance in terms of accuracy and speed; however, lineartime computation is not guaranteed theoretically, unlike the case of the other unordered tree kernel proposed by Vishwanathan and Smola (2003). In this paper, we propose a theoretically guaranteed linear-time kernel computation algorithm that is also practically fast, and we present an efficient prediction algorithm whose running time depends only on the size of the input tree. Experimental results show that the proposed algorithms are quite efficient in practice.", "creator": " TeX output 2012.05.15:1039"}}}