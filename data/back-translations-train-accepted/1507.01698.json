{"id": "1507.01698", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jul-2015", "title": "Learning Tractable Probabilistic Models for Fault Localization", "abstract": "In recent years, several probabilistic techniques have been applied to various debugging problems. However, most existing probabilistic debugging systems use relatively simple statistical models, and fail to generalize across multiple programs. In this work, we propose Tractable Fault Localization Models (TFLMs) that can be learned from data, and probabilistically infer the location of the bug. While most previous statistical debugging methods generalize over many executions of a single program, TFLMs are trained on a corpus of previously seen buggy programs, and learn to identify recurring patterns of bugs. Widely-used fault localization techniques such as TARANTULA evaluate the suspiciousness of each line in isolation; in contrast, a TFLM defines a joint probability distribution over buggy indicator variables for each line. Joint distributions with rich dependency structure are often computationally intractable; TFLMs avoid this by exploiting recent developments in tractable probabilistic models (specifically, Relational SPNs). Further, TFLMs can incorporate additional sources of information, including coverage-based features such as TARANTULA. We evaluate the fault localization performance of TFLMs that include TARANTULA scores as features in the probabilistic model. Our study shows that the learned TFLMs isolate bugs more effectively than previous statistical methods or using TARANTULA directly.", "histories": [["v1", "Tue, 7 Jul 2015 08:04:56 GMT  (59kb,D)", "http://arxiv.org/abs/1507.01698v1", "Fifth International Workshop on Statistical Relational AI (StaR-AI 2015)"]], "COMMENTS": "Fifth International Workshop on Statistical Relational AI (StaR-AI 2015)", "reviews": [], "SUBJECTS": "cs.SE cs.LG", "authors": ["aniruddh nath", "pedro m domingos"], "accepted": true, "id": "1507.01698"}, "pdf": {"name": "1507.01698.pdf", "metadata": {"source": "CRF", "title": "Learning Tractable Probabilistic Models for Fault Localization", "authors": ["Aniruddh Nath", "Pedro Domingos"], "emails": ["pedrod}@cs.washington.edu"], "sections": [{"heading": "Introduction", "text": "According to a 2002 NIST study (RTI International 2002), the US economy costs an estimated $59.5 billion a year. While some of these costs are inevitable, the report claims that an estimated $22.2 billion could be saved with more effective tools for identifying and eliminating software bugs. The goal of automating debuggies in the software engineering community is that it has only recently begun to take advantage of recent advances in probability computing, and has long recognized its inference and learning of algorithms."}, {"heading": "Background", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Coverage-based Fault Localization", "text": "Coverage-based debugging methods isolate the location of the error by analyzing the scope of coverage of the program based on a series of test entries, starting with: 1. a series of unit tests; 2. a record of whether the program passed each test or not; ar Xiv: 150 7,01 698v 1 [cs.S E] 7J ul2 0153. program traces indicating which components (usually lines) of the program were performed when each unit test was performed; with this information, these methods generate a distrust score for each component in the program. The most well-known method in this class is the TARANTULA system (Jones, Harrold, and Stasko 2002), which uses the following scoring function: STarantula (s) = Failed Passed (s) TotalFailed Passed + Failed (s), TotalFailed (s), TotalFailed (s), 2005 Failed Here, Passed (s) and (s), respectively, which are the number of Failed (s) and (s) of Failed (s) respectively."}, {"heading": "Probabilistic Debugging Methods", "text": "In fact, it is the case that one sees oneself in a position to be in, and that one is in a position to abide by the rules that one has set oneself in order to abide by the rules."}, {"heading": "Tractable Probabilistic Models Sum-Product Networks", "text": "A sum product network (SPN) is a rooted directional acyclic graph with univariate distributions on the sheets; the internal nodes are (weighted) sums and (unweighted) products. Definition 1. (Gens and Domingos 2013) 1. A weighted sum of SPNs with the same circumference is an SPN. 2. A product of SPNs with splintered scopes is an SPN. (The thescope of a SPN is the set of variables that appear in it.) 3. A weighted sum of SPNs with the same circumference is an SPN, provided all weights are positive. 4. Nothing else is an SPN. Intuitively, an SPN (Fig. 1) can be set as an alternative set of mixtures (sums) and decomposition products (products) of the sheet variables. If the values on the sheet nodes are distributed to the partition functions of the respective universal distribution functions, the sum of the probability time is calculated as the sum of the partition time."}, {"heading": "Relational Sum-Product Networks", "text": "Although the i.i.d. assumption is widely used in statistical machine learning, it is often an unrealistic assumption. In practice, objects normally interact with each other; statistical algorithms of relational learning can detect dependencies between objects and make predictions about relationships between them. Relational summary product networks (RSPNs; Nath and Domingos 2015) generalize SPNs by collectively modelling a series of instances that allow them to influence the probability distributions of others as well as modelling the probabilities of relationships between objects. RSPNs can be regarded as templates for the construction of SPNs, much like Markov logic networks (Richardson and Domingos 2006) are templates for Markov networks. RSPNs also require input of a partial decomposition that describes the part of relationships between objects in the mega models SPN- as opposed to the mega-SPNTML and size relations in 2012."}, {"heading": "Tractable Fault Localization", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Tractable Fault Localization Models", "text": "The distribution can also model additional variables of interest that are not part of the program itself; we refer to such variables as attributes for each line. Formally, one considers a language whose grammar L = (V, R, S) consists of the following characteristics: \u2022 V is a set of non-terminal symbols; \u2022 R is a set of terminal symbols; \u2022 R is a set of production rules of the form in which V and \u03b2 is a string of symbols in V; \u2022 S is the symbol of the symbol."}, {"heading": "Experiments", "text": "We conducted an experiment to determine whether the ability of TFLM to combine a coverage-based error localization system with learned error patterns improves the performance of error localization compared to the direct use of the coverage-based system. We used TARANTULA, one of the most widely used approaches in this class, as a representative coverage-based method, and a common comparison system for error localization algorithms. We also compared the state-based version of Liblit et al. \"s Statistical Bug Isolation (SBI) system (Liblit et al. 2005), adapted by Yu et al. (2008). SBI serves as a representative example of a lightweight statistical method for error localization."}, {"heading": "Subjects", "text": "We examined TFLMs using four medium-sized C programs (Table 1) from the software artifact Infrastructure Repository (Khurshid et al. 2004); all four subjects are real programs commonly used to evaluate error localization approaches; the repository contained multiple sequential versions of each program, each with several flawed versions; the repository also contained a series of 124 to 525 TSL tests for each version that we used to calculate the TARANTULA values; the number of executable lines was measured using the gcov tool; we excluded flawed versions where the error occurred in a non-executable line (e.g. lines that were excluded by preprocessor directives) or consisted of line insertions or deletions; unlike most previous error localization studies in which these subjects were used, we do not exclude versions in which the error occurred in a non-executable line (e.g. lines that were excluded by preprocessor directives) or consisted of line insertions or deletions; unlike most earlier error localization studies in which these subjects were used, we exclude versions in which the error occurred in a non-executable line (e.g. lines that were excluded by preprocessor directives) or consisted of line insertions or deletions."}, {"heading": "Methodology", "text": "We implemented TFLMs for a simplified version of C grammar with 23 non-terminal symbols, ranging from compound statements such as if and while to atomic single-line statements such as assignments and break-and-continue statements. Each symbol has an erroneous attribute and a distrust attribute that is the TARANTULA score of the corresponding line. (For AST nodes that correspond to several lines in the original code, we use the highest TARANTULA score of all lines.) As described in the previous section, the attributes are modeled during the EM as independent univariants (buggy as Bernoulli distribution and distrust as Gaussian) and then via a logistical regression model within each subclass. The model predicts the erroneous attribute by using the TARANTULA score and a distorted term as attributes."}, {"heading": "Results", "text": "The results of our experiments are presented in Tables 2 and 3, and in Figure 2. TFLMs perform worse than TARANTULA and SBI in three of the four subjects, isolating the majority of errors more effectively and achieving a higher average FS score. However, if the errors occur in different contexts in the training and test data sets (as in gzip), learning-based methods may perform worse than methods that attempt to locate each program independently, which is particularly high when learning is done from a small corpus of flawed programs. However, in three of the four subjects in our experiment, the training and test distributions are sufficiently similar to allow meaningful generalization, resulting in improved error localization performance. TFLMs benefit derives from their ability to locate errors. FLFLMs can, however, be written in a practical environment where no useful information is available (LA-FLARM tests with useless TARM data)."}, {"heading": "Conclusions", "text": "This paper presented TFLMs, a probabilistic model of error localization that can be learned from a corpus of flawed programs, allowing the model to generalize from previously seen errors to more accurately locate errors in a new context. TFLMs can also incorporate the results of other error localization systems as features in the probabilistic model, with the weight learned depending on the context. TFLMs use recent advances in tractable probability models to ensure that error localization probabilities can be efficiently derived even as the size of the program grows. In our experiments, a TFLM trained with TARANTULA as a feature uses localized errors more effectively than TARANTULA or SBI on three of the four topic programs alone. In this paper, we used TFLMs to generalize sequential versions of a single program."}, {"heading": "Acknowledgments", "text": "This research was partially funded by the ARO grant W911NF-081-0242, the ONR grants N00014-13-1-0720 and N00014-12-10312, and the AFRL contract FA8750-13-2-0019. The views and conclusions contained in this document are those of the authors and should not necessarily be interpreted to represent the official policy of ARO, ONR, AFRL or the United States Government. We thank Michael Ernst and Sai Zhang for helpful discussions."}], "references": [{"title": "A practical evaluation of spectrum-based fault localization", "author": ["Abreu"], "venue": "The Journal of Systems and Software 82(11):1780\u20131792", "citeRegEx": "Abreu,? \\Q2009\\E", "shortCiteRegEx": "Abreu", "year": 2009}, {"title": "and Todorovic", "author": ["M.R. Amer"], "venue": "S.", "citeRegEx": "Amer and Todorovic 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Statistical debugging using latent topic models", "author": ["Andrzejewski"], "venue": "In Proceedings of the European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases (ECML/PKDD)", "citeRegEx": "Andrzejewski,? \\Q2007\\E", "shortCiteRegEx": "Andrzejewski", "year": 2007}, {"title": "A", "author": ["L.C. Ascari", "L.Y. Araki", "Pozo"], "venue": "R. T.; ; and Vergilio, S. R.", "citeRegEx": "Ascari et al. 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "L", "author": ["Briand"], "venue": "C.; Labiche, Y.; and Liu, X.", "citeRegEx": "Briand. Labiche. and Liu 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "and Ernst", "author": ["Y. Brun"], "venue": "M.", "citeRegEx": "Brun and Ernst 2004", "shortCiteRegEx": null, "year": 2004}, {"title": "A", "author": ["T.M. Chilimbi", "B. Liblit", "K. Mehra", "Nori"], "venue": "V.; and Vaswani, K.", "citeRegEx": "Chilimbi et al. 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "and Zeller", "author": ["H. Cleve"], "venue": "A.", "citeRegEx": "Cleve and Zeller 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "and Ventura", "author": ["A. Dennis"], "venue": "D.", "citeRegEx": "Dennis and Ventura 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "and Webb", "author": ["P. Domingos"], "venue": "A.", "citeRegEx": "Domingos and Webb 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "W", "author": ["M.D. Ernst", "J. Cockrell", "Griswold"], "venue": "G.; and Notkin, D.", "citeRegEx": "Ernst et al. 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "and Domingos", "author": ["R. Gens"], "venue": "P.", "citeRegEx": "Gens and Domingos 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "and Domingos", "author": ["R. Gens"], "venue": "P.", "citeRegEx": "Gens and Domingos 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "and Santhanam", "author": ["B. Hailpern"], "venue": "P.", "citeRegEx": "Hailpern and Santhanam 2002", "shortCiteRegEx": null, "year": 2002}, {"title": "M", "author": ["S. Hangal", "Lam"], "venue": "S.", "citeRegEx": "Hangal and Lam 2002", "shortCiteRegEx": null, "year": 2002}, {"title": "M", "author": ["J.A. Jones", "Harrold"], "venue": "J.", "citeRegEx": "Jones and Harrold 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "M", "author": ["Jones, J.A.", "Harrold"], "venue": "J.; and Stasko, J.", "citeRegEx": "Jones. Harrold. and Stasko 2002", "shortCiteRegEx": null, "year": 2002}, {"title": "Software-artifact infrastructure repository (SIR)", "author": ["Khurshid"], "venue": "Retrieved 15 August,", "citeRegEx": "Khurshid,? \\Q2004\\E", "shortCiteRegEx": "Khurshid", "year": 2004}, {"title": "M", "author": ["B. Liblit", "A. Aiken", "A.X. Zheng", "Jordan"], "venue": "I.", "citeRegEx": "Liblit et al. 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "M", "author": ["B. Liblit", "M. Naik", "A.X. Zheng", "A. Aiken", "Jordan"], "venue": "I.", "citeRegEx": "Liblit et al. 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "S", "author": ["C. Liu", "X. Yan", "L. Fei", "J. Han", "Midkiff"], "venue": "P.", "citeRegEx": "Liu et al. 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "S", "author": ["C. Liu", "L. Fei", "X. Yan", "J. Han", "Midkiff"], "venue": "P.", "citeRegEx": "Liu et al. 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "and Domingos", "author": ["A. Nath"], "venue": "P.", "citeRegEx": "Nath and Domingos 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "and Orso", "author": ["C. Parnin"], "venue": "A.", "citeRegEx": "Parnin and Orso 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "Scikit-learn: Machine learning in Python", "author": ["Pedregosa"], "venue": null, "citeRegEx": "Pedregosa,? \\Q2011\\E", "shortCiteRegEx": "Pedregosa", "year": 2011}, {"title": "B", "author": ["Peharz, R.", "Geiger"], "venue": "C.; and Pernkopf, F.", "citeRegEx": "Peharz. Geiger. and Pernkopf 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "and Domingos", "author": ["H. Poon"], "venue": "P.", "citeRegEx": "Poon and Domingos 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "S", "author": ["M. Renieris", "Reiss"], "venue": "P.", "citeRegEx": "Renieris and Reiss 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "and Domingos", "author": ["M. Richardson"], "venue": "P.", "citeRegEx": "Richardson and Domingos 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "and Qi", "author": ["W.E. Wong"], "venue": "Y.", "citeRegEx": "Wong and Qi 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "W", "author": ["Wong"], "venue": "E.; Wei, T.; Qi, Y.; and Zhao, L.", "citeRegEx": "Wong et al. 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "W", "author": ["Wong"], "venue": "E.; Debroy, V.; Golden, R.; Xu, X.; and Thuraisingham, B.", "citeRegEx": "Wong et al. 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "W", "author": ["Wong"], "venue": "E.; Debroy, V.; and Xu, D.", "citeRegEx": "Wong. Debroy. and Xu 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "M", "author": ["Y. Yu", "J.A. Jones", "Harrold"], "venue": "J.", "citeRegEx": "Yu. Jones. and Harrold 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "Non-parametric statistical fault localization", "author": ["Zhang"], "venue": "Journal of Systems and Software 84(6):885\u2013905", "citeRegEx": "Zhang,? \\Q2011\\E", "shortCiteRegEx": "Zhang", "year": 2011}], "referenceMentions": [], "year": 2015, "abstractText": "In recent years, several probabilistic techniques have been applied to various debugging problems. However, most existing probabilistic debugging systems use relatively simple statistical models, and fail to generalize across multiple programs. In this work, we propose Tractable Fault Localization Models (TFLMs) that can be learned from data, and probabilistically infer the location of the bug. While most previous statistical debugging methods generalize over many executions of a single program, TFLMs are trained on a corpus of previously seen buggy programs, and learn to identify recurring patterns of bugs. Widely-used fault localization techniques such as TARANTULA evaluate the suspiciousness of each line in isolation; in contrast, a TFLM defines a joint probability distribution over buggy indicator variables for each line. Joint distributions with rich dependency structure are often computationally intractable; TFLMs avoid this by exploiting recent developments in tractable probabilistic models (specifically, Relational SPNs). Further, TFLMs can incorporate additional sources of information, including coverage-based features such as TARANTULA. We evaluate the fault localization performance of TFLMs that include TARANTULA scores as features in the probabilistic model. Our study shows that the learned TFLMs isolate bugs more effectively than previous statistical methods or using TARANTULA directly.", "creator": "LaTeX with hyperref package"}}}