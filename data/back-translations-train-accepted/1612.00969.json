{"id": "1612.00969", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Dec-2016", "title": "Unit Dependency Graph and Its Application to Arithmetic Word Problem Solving", "abstract": "Math word problems provide a natural abstraction to a range of natural language understanding problems that involve reasoning about quantities, such as interpreting election results, news about casualties, and the financial section of a newspaper. Units associated with the quantities often provide information that is essential to support this reasoning. This paper proposes a principled way to capture and reason about units and shows how it can benefit an arithmetic word problem solver. This paper presents the concept of Unit Dependency Graphs (UDGs), which provides a compact representation of the dependencies between units of numbers mentioned in a given problem. Inducing the UDG alleviates the brittleness of the unit extraction system and allows for a natural way to leverage domain knowledge about unit compatibility, for word problem solving. We introduce a decomposed model for inducing UDGs with minimal additional annotations, and use it to augment the expressions used in the arithmetic word problem solver of (Roy and Roth 2015) via a constrained inference framework. We show that introduction of UDGs reduces the error of the solver by over 10 %, surpassing all existing systems for solving arithmetic word problems. In addition, it also makes the system more robust to adaptation to new vocabulary and equation forms .", "histories": [["v1", "Sat, 3 Dec 2016 14:14:11 GMT  (32kb,D)", "http://arxiv.org/abs/1612.00969v1", "AAAI 2017"]], "COMMENTS": "AAAI 2017", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["subhro roy", "dan roth"], "accepted": true, "id": "1612.00969"}, "pdf": {"name": "1612.00969.pdf", "metadata": {"source": "CRF", "title": "Unit Dependency Graph and its Application to Arithmetic Word Problem Solving", "authors": ["Subhro Roy", "Dan Roth"], "emails": ["danr}@illinois.edu"], "sections": [{"heading": "1 Introduction", "text": "Understanding the election results, sports commentary and financial news, all require an argumentation in terms of quantities. Mathematical word problems provide a natural abstraction of these quantitative argument problems. As a result, there has been a growing interest in developing methods that automatically solve mathematical word problems (Koncel-Kedziorski et al. 2015; Kushman et al. 2014; Roy and Roth 2015; Mitra and Baral 2016). Units that are associated with numbers or the question often provide essential information to support the reasoning required in mathematical word problems. Consider the arithmetic word problem in Example 1. The units of \"66\" and \"10\" are both \"flowers,\" which indicate that they can be added or subtracted. Although unit of \"8\" is also \"flower,\" it is associated with a rate that indicates the number of flowers in each bouquet. As a result, \"8\" effectively has unit \"flowers per bouquet.\""}, {"heading": "2 Unit Dependency Graph", "text": "We first introduce the idea of a generalized rate and its unit representation. We define rate as any quantity corresponding to a unit of another quantity, including explicit rates such as \"40 miles per hour,\" as well as implicit rates such as those in \"Every student has 3 books.\" Consequently, units of rate quantities are referred to as \"A per B,\" with A and B referring to different units. We refer to A as a num unit (short for numerator unit), and B as Denar Xiv: 161 2.00 969v 1 [cs.C L] 3D ec2 016Unit (short for denominator unit). Table 1 shows examples of Num and Den units for different rate quantities.A dependency diagrams (UDG) of a mathematical word problem problem problem problem is a diagram that represents the relationships between quantities-units-quantities-X and quantities-quantities-quantities-question-quantities-quantities."}, {"heading": "3 Learning to Predict UDGs", "text": "The UDG's prediction for a mathematical word problem is essentially a structured prediction problem. However, because we have limited training data, we develop a dissected model to predict portions of the structure independently of each other, and then execute common conclusions to enforce coherent predictions, which has proven to be an effective method for structured predictions in the presence of limited data (Punyakanok et al. 2005; Sutton and McCallum 2007). Empirically, we have found that our dissected model is superior to jointly trained alternatives (see Section 5). Our dissected model for UDG prediction uses the following two classifiers: 1. Vertex classifier: This is a binary classifier that takes a vertex of the UDG as input and decides whether it denotes a rate. 2. Edge classifier: This is a multiclass classifier that uses a pair of UDG sections as input, and the constellation of the two properties of the two edges."}, {"heading": "Vertex Classifier", "text": "Given the problem text P and a vertex v of the UDG, the classifier predicts whether v represents a rate. It predicts one of two terms - RATE or NOT RATE. Vertex v is either a quantity mentioned in P or the question of P. The characteristics used for the classification are as follows: 1. Context characteristics: We add unigrams, bigrams, a portion of speech tags and their conjunctions from the neighborhood of v.2. Rule-based extraction characteristics: We add a characteristic indicating whether a rule-based approach can recognize v as a rate."}, {"heading": "Edge Classifier", "text": "We train a multi-level classifier to predict the properties of the edges of the UDG problem. Faced with the problem text P and a pair of vertices vi and vj (i < j), the classifier predicts one of the six labels: 1. SAME UNIT: Indicates that vi and vj by an undirected edge labeled SAME UNIT.2. NO RELATION: Indicates that no edge exists between vi and vj. 3. RATE \u2192 Num: Indicates that vi is a rate, and the Num Unit of vi corresponds to the unit of vj. 4. RATE \u2190 Num: Indicates that vj is a rate, and the Num Unit of vj corresponds to the unit of vi. 5. We similarly define RATE \u2192 Den and RATE."}, {"heading": "4 Joint Inference With An Arithmetic Solver", "text": "In this section we describe our common inference method for predicting both a UTG and solving an input arithmetic word problem. Our model is based on the Roy and Roth 2015 arithmetic word problem solver and we briefly describe it in the following sections. First we describe the concept of the expression trees and then we describe the solver that effectively uses the expression tree representation of the solutions."}, {"heading": "Monotonic Expression Tree", "text": "An expression tree is a binary tree representation of a mathematical expression in which leaves represent numbers and all other nodes represent operations. Fig. 1 shows an example of an arithmetic word problem and the expression tree of the mathematical expression. A monotonous expression tree is a normalized expression tree representation for mathematical expressions that restricts the order of combination of addition and subtraction, as well as multiplication and division. The expression tree in Fig. 1 is monotonous."}, {"heading": "Arithmetic Word Problem Solver", "text": "Considering a problem with quantities q1, q2,.., qn, the solver uses the following two classifiers. 1. Irrelevance Classifier: As input, problem P and quantity Qi in P, the classifier decides whether Qi is irrelevant to the solution. The evaluation of this classifier is called IRR (q).2. LCA Operation Classifier: As input, problem P and a pair of quantities Qi and Qj (i < j), the classifier predicts the operation at the lowest common ancestor (LCA) node of Qi and Qj, in the solution printout of problem P. The number of possible operations are +, \u2212 r, -, - and - r (the subscript r) indicates the reverse order."}, {"heading": "Consistent Rate Unit Graphs", "text": "Most of these conditions are expressed only in relation to PATH (T, vi, vj), which input a pair of vertices vi, vj of the UDG group, and a monotonous expression tree T, and returns: 1. If both vi and vj are numbers, and their corresponding nodes in T are ni and nj respectively, then it returns the nodes in the path that connects ni and nj in T. 2. If only vi specifies a number (which implies that vj is the question), the function returns the nodes in the path from ni to the root of T, where ni is the corresponding leaf node for vi. For the unit dependence graph and solution tree T is the Fig 1, PATH (T, 66, 8), while PATH (T, 8, question) is."}, {"heading": "5 Experiments", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Dataset", "text": "As a matter of fact, most of them are able to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry, to hurry"}, {"heading": "Data Acquisition", "text": "In this section, we show that vertex labels for a subset of problems, together with annotations for solution expressions, can be sufficient to collect high-quality annotations for vertex and edge labels of UDGs. Considering an arithmetic word problem P commented on with the monotonous expression tree T of the solution expression, we try to acquire annotations for the UDG from P. First, we try to determine the labels for the corners and edges of the chart. We check if T has any multiplication or division nodes. If no such nodes exist, we know that all the numbers in the sheets of T have been combined via addition or subtraction."}, {"heading": "UDG Prediction", "text": "Table 2 shows the performance of the classifiers and the contribution of each characteristic type. Results indicate that rule-based techniques are not sufficient for robust extraction, there is a need to take into account the context. Table 3 shows the performance of our disassembled model (DECOMPOSE) in correctly predicting UDGs and the contribution of constraints in the inference method. By explicitly limiting the diagram structure, the correct prediction of UDGs improves by 3-5%. We also compare it to a jointly trained model (JOINT) that learns to predict all vertibles and edge labels together. Note that JOINT also applies the same constraints as DECOMPOSE in the inference method to ensure that it predicts only valid unit dependency diagrams. We have found that JOINT does not perform better than DECOMPOSE does to make our data perform better than DECOMPOSE does to make it easier to build the common search space (while it takes more time to build the common one)."}, {"heading": "Solving Arithmetic Word Problems", "text": "Here we evaluate the accuracy of our system in correctly solving arithmetic word problems. We refer to our system as UNITDEP. We compare against the following systems: 1. LCA + +: system of (Roy and Roth 2015) with functionality extended by neighborhood characteristics and with only positive response constraints. We found that extending the published functionality to include context characteristics and removing integral response constraints were helpful. Our system UNITDEP also uses the extended functional environment for relevance and LCA operation classifiers and only positive limitations for the final solution value. TEMPLATE: Template based algebra word problem solver of (Kushman et al. 2014).3. SINGLEEQ: Single equation word problem solver of (Koncel-Kedziorski et al. 2015).To quantify the advantages from text and edge information of UDGG GG Gs, we also include two variants of VERVERVERT = VERVERT VERT."}, {"heading": "Discussion", "text": "Most of UNITDEP's gains over LCA + + resulted from problems where LCA + + predicted an operation or expression that did not match the units. A small gain (10%) also comes from problems where UDGs help detect certain irrelevant quantities that LCA + + cannot detect. Table 5 lists some examples where UNITDEP is correct but LCA + + is not. Most of UNITDEP's errors were based on third-party quantity detection (about 50%), followed by errors due to a lack of mathematical understanding (about 23%), including comparative questions such as \"How many pennies does John have?\""}, {"heading": "6 Related Work", "text": "Recently, there has been an interest in the automatic solution of mathematical word problems. (Hosseini et al. 2014; Mitra and Baral 2016) we focus on addition-subtraction problems, (Roy, Vieira, and Roth 2015) we look at individual operation problems, (Roy and Roth 2015) and our work looks at arithmetic problems, with each number used at most once in the answer, (Koncel-Kedziorski et al. 2015) we focus on simple equation problems, and finally (Kushman et al. 2014) at algebra word problems. None of them explicitly models the relationships between rates, units, and the question asked. In contrast, we model these relationships using unit dependence graphs. When we learn to predict these graphs, we gain robustness over rule-based extractions. Unlike those related to mathematical word problems, there has been some work on extracting units and quantity rates (Roy, ViRoth, and 2004b)."}, {"heading": "7 Conclusion", "text": "The dependencies on UDGs help to improve the performance of an existing arithmetic wordsolver while also making it more resilient to low lexical and template overlaps in the dataset. We believe that a similar strategy can be used to include different types of domain knowledge in solving mathematical word problems. Our future instructions will revolve around this topic, in particular to include knowledge of units, transfers and mathematical concepts. Code and dataset are available at http: / / cogcomp.cs.illinois.edu / page / publication view / 804."}, {"heading": "Acknowledgements", "text": "This work is funded by DARPA under contract number FA8750-13-2-0008 and funded by the Allen Institute for Artificial Intelligence (allenai.org)."}], "references": [{"title": "Learning to solve arithmetic word problems with verb categorization", "author": ["Hosseini"], "venue": null, "citeRegEx": "Hosseini,? \\Q2014\\E", "shortCiteRegEx": "Hosseini", "year": 2014}, {"title": "Parsing Algebraic Word Problems into Equations. TACL", "author": ["Koncel-Kedziorski"], "venue": null, "citeRegEx": "Koncel.Kedziorski,? \\Q2015\\E", "shortCiteRegEx": "Koncel.Kedziorski", "year": 2015}, {"title": "Mawps: A math word problem repository", "author": ["Koncel-Kedziorski"], "venue": null, "citeRegEx": "Koncel.Kedziorski,? \\Q2016\\E", "shortCiteRegEx": "Koncel.Kedziorski", "year": 2016}, {"title": "Learning to automatically solve algebra word problems", "author": ["Kushman"], "venue": null, "citeRegEx": "Kushman,? \\Q2014\\E", "shortCiteRegEx": "Kushman", "year": 2014}, {"title": "Learning to use formulas to solve simple arithmetic problems", "author": ["Mitra", "A. Baral 2016] Mitra", "C. Baral"], "venue": null, "citeRegEx": "Mitra et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Mitra et al\\.", "year": 2016}, {"title": "Learning and inference over constrained output", "author": ["Punyakanok"], "venue": "In Proc. of the International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Punyakanok,? \\Q2005\\E", "shortCiteRegEx": "Punyakanok", "year": 2005}, {"title": "Solving general arithmetic word problems", "author": ["Roy", "S. Roth 2015] Roy", "D. Roth"], "venue": "In Proc. of the Conference on Empirical Methods in Natural Language Processing (EMNLP)", "citeRegEx": "Roy et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Roy et al\\.", "year": 2015}, {"title": "Reasoning about quantities in natural language", "author": ["Vieira Roy", "S. Roth 2015] Roy", "T. Vieira", "D. Roth"], "venue": "Transactions of the Association for Computational Linguistics", "citeRegEx": "Roy et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Roy et al\\.", "year": 2015}, {"title": "Piecewise pseudolikelihood for efficient training of conditional random fields", "author": ["Sutton", "C. McCallum 2007] Sutton", "A. McCallum"], "venue": null, "citeRegEx": "Sutton et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Sutton et al\\.", "year": 2007}], "referenceMentions": [], "year": 2016, "abstractText": "Math word problems provide a natural abstraction to a range of natural language understanding problems that involve reasoning about quantities, such as interpreting election results, news about casualties, and the financial section of a newspaper. Units associated with the quantities often provide information that is essential to support this reasoning. This paper proposes a principled way to capture and reason about units and shows how it can benefit an arithmetic word problem solver. This paper presents the concept of Unit Dependency Graphs (UDGs), which provides a compact representation of the dependencies between units of numbers mentioned in a given problem. Inducing the UDG alleviates the brittleness of the unit extraction system and allows for a natural way to leverage domain knowledge about unit compatibility, for word problem solving. We introduce a decomposed model for inducing UDGs with minimal additional annotations, and use it to augment the expressions used in the arithmetic word problem solver of (Roy and Roth 2015) via a constrained inference framework. We show that introduction of UDGs reduces the error of the solver by over 10%, surpassing all existing systems for solving arithmetic word problems. In addition, it also makes the system more robust to adaptation to new vocabulary and equation forms .", "creator": "LaTeX with hyperref package"}}}