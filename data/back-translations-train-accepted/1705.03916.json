{"id": "1705.03916", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-May-2017", "title": "Solving Distributed Constraint Optimization Problems Using Logic Programming", "abstract": "This paper explores the use of Answer Set Programming (ASP) in solving Distributed Constraint Optimization Problems (DCOPs). The paper provides the following novel contributions: (1) It shows how one can formulate DCOPs as logic programs; (2) It introduces ASP-DPOP, the first DCOP algorithm that is based on logic programming; (3) It experimentally shows that ASP-DPOP can be up to two orders of magnitude faster than DPOP (its imperative programming counterpart) as well as solve some problems that DPOP fails to solve, due to memory limitations; and (4) It demonstrates the applicability of ASP in a wide array of multi-agent problems currently modeled as DCOPs. Under consideration in Theory and Practice of Logic Programming (TPLP).", "histories": [["v1", "Wed, 10 May 2017 18:32:01 GMT  (355kb,D)", "http://arxiv.org/abs/1705.03916v1", "Under consideration in Theory and Practice of Logic Programming (TPLP)"]], "COMMENTS": "Under consideration in Theory and Practice of Logic Programming (TPLP)", "reviews": [], "SUBJECTS": "cs.MA cs.AI", "authors": ["tiep le", "tran cao son", "enrico pontelli", "william yeoh 0001"], "accepted": true, "id": "1705.03916"}, "pdf": {"name": "1705.03916.pdf", "metadata": {"source": "CRF", "title": "Solving Distributed Constraint Optimization Problems Using Logic Programming", "authors": ["Tiep Le", "Tran Cao Son", "Enrico Pontelli", "William Yeoh"], "emails": ["wyeoh}@cs.nmsu.edu"], "sections": [{"heading": null, "text": "In theory and practice of logic programming (TPLP) under consideration. KEYWORDS: DCOP; DPOP; logic programming; ASP"}, {"heading": "1 Introduction", "text": "Distributed Optimization Problems (DCOPs) are optimization problems where agents must coordinate the allocation of values to their \"local\" variables (2010) in order to maximize the total sum of resulting constraints (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012).The process is subject to constraints on agents \"ability to communicate; in particular, each agent can only exchange information with adjacent agents within a specific topology. DCOPs are well suited for modeling multi-agent coordination and resource allocation problems where primary interactions occur between local subgroups of agents. Researchers have modeled various problems, such as the allocation of meetings (Maheswaran et al. 2004; Zivan et al. 2014), distributed allocation of targets to sensors in a network (Farinelli et al. 2008), allocation of resources in disaster protection classes (cumulative network)."}, {"heading": "2 Background", "text": "In this section we present an overview of DCOPs, describe DPOP, a complete distributed algorithm for solving DCOPs, and provide some basic definitions of ASP."}, {"heading": "2.1 Distributed Constraint Optimization Problems", "text": "We assume that this will be a finite set of (decision) variables. (Dn) is a set of finite domains, whereas Di is the domain of variable X, for which we have variable X, for which we have variable X, for which we have variable X, for which we have variable X, for which we have variable X, for which we have variable X, for which we have variable X, for which we have variable X, for which we have variable X, for which we have the variable combination of variable values. (fm) is a finite set of constraints in which the kj function is fj: Dj1 \u00b7 Dj2 \u00b7 Djkj 7 \u2192 R, which indicates the usefulness of each combination of variable values in its scope."}, {"heading": "2.2 The Distributed Pseudo-tree Optimization Procedure", "text": "The distribution method Pseudo-tree Optimization Procedure (DPOP) (Petcu and Faltings 2005a) is a complete algorithm to solve DCOPs with the following three phases: 3 Pseudo-tree generation, UTIL propagation and VALUE propagation.2.1 Phase 1: Pseudo-tree generation PhaseDPOP does not require the use of a specific algorithm to construct the pseudo-tree. However, in many implementations of the DCOPolis (Sultanik et al. 2007) and FRODO aute et al. 2009 repositories, greedy approaches such as the Distributed DFS algorithm (Hamadi et al. 1998) the distribution methods DFS algorithms are used as follows."}, {"heading": "2.3 Answer Set Programming", "text": "s provide some general background information on programming (ASP) if it does not contain a simple rule (Baral 2003; Gelfond and Kahl 2014) for further details. One answer to the question is a set of first order rules language L, and does not represent negation-as-failure (naf). For a literal a, not a is called a naf-literal. For a rule of form (7), the left and right sides of the rule are referred to as the language of first order, or the body may be empty. If the head is empty, the rule is referred to as a constraint. If the body is empty, the rule is referred to as a fact."}, {"heading": "3 ASP-DPOP", "text": "ASP-DPOP is a framework that captures the structure of DCOPs using logical programming and emulates the calculation and communication operations of DPOP. Specifically, each agent in a DCOP is represented by a separate ASP program - effectively enabling the infusion of a knowledge representation framework into the DCOP paradigm. The entire communication infrastructure required for the distributed computation of DPOP is expressed in a subset of the SICStus Prolog language (Carlsson, M. et al. 2015), which is extended to include multithreading and the Linda panel facilities. In ASP-DPOP, we use CLASP (Gebser et al. 2007) with its accompanying grounder GRINGO as the state-of-the-art ASP solver. In this section, we will describe the structure of ASP-DPOP and its implementation."}, {"heading": "3.1 The architecture of ASP-DPOP", "text": "ASP-DPOP is an agent architecture that reflects the structure of DCOPs, with multiple agents reflecting the calculation and communication operations of DPOP. The internal structure of each ASP-DPOP agent, represented in Figure 3, consists of two modules. The first module is the Specification Module (SM), which includes an ASP program that captures a corresponding agent as specified in the DCOP - i.e. the name of the agent, the neighbors of the agent, the description of the variables belonging to the agent, the description of the variables belonging to the agent's neighbors, and the description of the constraints whose scope includes each of the variables belonging to the agent. The second module is the Controller Module (CM), encoded as a prolog program. The CM instructs the agent to perform the agent's communication operations, such as working with other agents to create a pseudo-tree, waiting for the messages of the child agents, when the child agents are waiting for the child agents."}, {"heading": "3.2 ASP-DPOP Implementation: Specification Module (SM)", "text": "Let's describe how the structure of a DCOP can be captured in the specification module of an ASP DPOP agent using ASP. Let's show a generic DCOPM = < X, F, A, \u03b1 >. We represent M with a number of ASP DPOP agents whose SMs are ASP programs. Let's show how to generate a different example for each agent. Following, let's say a and a \"in A are neighbors if there are x and x\" in X that the SMs (x) = a, \u03b1 \"(x), and there is an f.\" F, \"how to generate the\" x, x \"} and scp (f). Given a constraint f.\" F \"is owned by the agent ai if the scope of f contains some variables belonging to the agent. 4For each variable xi\" X \"we define a collection of L (xi) of ASP rules that includes."}, {"heading": "3.3 ASP-DPOP Implementation: Encoding UTIL and VALUE Messages", "text": "The ASP-DPOP framework emulates the computation and communication operations of DPOP, where each ASP-DPOP agent generates UTIL and VALUE messages and forwards them to their parent and child agents, as DPOP does. In ASP-DPOP, UTIL and VALUE messages are encoded as ASP facts, as described in this subsection."}, {"heading": "3.3.1 UTIL Messages", "text": "In DPOP, each UTIL message sent by a child agent ai to his parent agent Pi is a matrix. In the encryption of a UTIL message in ASP-DPOP, we represent each cell of the matrix of the UTIL message whose associated utility is not \u2212 \u221e, as an ASP atom of the form: table max ai (u, vi1,., viki) (34), which indicates that the optimal aggregated utility of value assignments 1 = vi1,., xiki = viki is u 6 = \u2212 \u221e, where sepi = {xi1,., xiki} the agent Pi knows that UTILPiai agent (xi1 = vi1, vi1 = vi1,., xiki the agent).ai = viki = viki is, xiki = viki = viki = viki is the table, util if it receives the factual abmax u (viai, 1)."}, {"heading": "3.3.2 VALUE Messages", "text": "In DPOP, each VALUE message sent by a parent Agent Pi to its child Agent ai contains the optimal value mapping for variables belonging to either the parent Agent or the pseudo-parent Agent ai. Therefore, when encoding a VALUE message, we use atoms of the6. For simplicity, we assume that domains Di are integral intervals. Form: Solution (a, x, v) (46) where v is the value mapping of the variable x that belongs to Agent a for an optimal solution. Example 12Consider once again the DCOP in Example 1. The VALUE message sent by Agent a1 to Agent a2 is encoded as ASP atom: Solution (a1, x1, 1) (47) Similarly, the VALUE message sent by Agent a2 to Agent a3 is encoded as solution (48) (ASP-1) (x49) (1) (x49)."}, {"heading": "3.4 ASP-DPOP Implementation: Controller Module (CM)", "text": "The controller module in each ASP-DPOP agent ai, referred to by Cai, consists of a set of prolog rules for communication (sending, receiving, and interpreting messages) and a set of rules for generating an ASP program that is used to calculate a UTIL message and a VALUE message. In this subsection, we would like to discuss some code fragments to show how Cai is structured. 7 First, we show how Cai uses the Linda table library of Prolog to exchange messages. There are three types of messages that are exchanged by the Linda table: They are tree, Utile, and value displays that are used in Phase 1, Phase 2, and Phase 3 of DPOP, respectively. To send (or wait for) a message, we use the built-in prediction / 1 (or / 1) provided by the Linda library of Prolog. Each message is formatted as a message (From To, the message, the message, the message, the arguments, respectively) of the message that is the next message, the POP, the one that is the one that is sent to the message."}, {"heading": "3.4.1 Sending Messages", "text": "The following prolog rule generates a message of type t-tree, util, value, with content d (content), which is sent from an agent ai (From) to an agent ak (To):% send message send _ message (From, To, Type, Content): -out (message (From, To, Type, Content))."}, {"heading": "3.4.2 Waiting for Messages", "text": "The following prolog rule tells the agent ak (a k) to wait for a message:% waits for a message wait _ message (From, a _ k, Type, Data): - in (message (From, a _ k, Type, Data)), where From, Type and Data are merged with the name of the agent who sent the message, the type of message or data contained in the message."}, {"heading": "3.4.3 Creating the Pseudo-Tree: Phase 1", "text}, {"heading": "3.4.4 Computing the UTIL Message: Phase 2", "text": "In this phase, each ASP DPOP agent creates an ASP program to calculate the UTIL message sent to its parent. In detail, each agent executes the following clause:% Phase 2: UTIL propagation Phase 2: UTIL implementation list (ReceivedUTILMessages, Separator), assert (Separator), compute _ related _ constraints (ConstraintList), assert (ConstraintList)), generate _ UTIL _ ASP (Separator, ConstraintList), solve _ answer _ set1 (ReceivedUTILsages), store _ message (Answer), send _ message (a _ i, a _ Waid _ p, Kind)."}, {"heading": "3.4.5 Computing the VALUE Message: Phase 3", "text": "Each ASP DPOP agent calculates the optimal value for its variables and sends an encrypted VALUE message to its children. The process is described by the following prologue rule:% Phase 3: VALUE propagation phase \u00b7 ai \u00b7 ai \u00b7 q solution (ReceivedVALUEMessage, Answer): -separatorlist (Separator), constraintList (ConstraintList), generate _ VALUE _ ASP (Separator, ConstraintList), solve _ answer _ answer _ set2 (ReceivedVALUEMessage, Answer), send _ message _ to _ children (a _ i, value, Answer). Specifically, the agent ai: \u2022 Waits to receive the encoded VALUE message, denoted by M'Pi, from its parent agent ai. If the agent ai does not have a parent agent, i.e."}, {"heading": "3.4.6 ASP-DPOP", "text": "In this section, we show the clause for ASP DPOP agents to perform phase 1, phase 2 and phase 3 successively. (For convenience, we ignore the fragment of code assigned to ASP DPOP agents that allows them to cooperate with each other to select an agent as the root of the pseudo-tree - since it depends on the results assigned to the agents, according to a heuristic function.Remember that if an agent ak is the root of the pseudo-tree, a fact of the form parent (master, a _ i) is added as to whether an agent is selected as the root of the pseudo-tree, each agent will execute the clause start. Considering an agent, clause ai starts as follows:% Perform Phase 1, Phase 2, and Phase 3 _ Start: - (Master, a _ i) - (Master, a _ i) - > generate children."}, {"heading": "4 Theoretical Analysis", "text": "In this section we present some of the theoretical properties of ASP-DPOP, including its solidity, completeness and complexity."}, {"heading": "4.1 Soundness and Completeness", "text": "The solidity and completeness of ASP-DPOP stems from Lemmas (2) - (3) and the solidity and completeness of DPOP.Proposition 1 ASP-DPOP is solid and complete in solving DCOPs.Proof Let's summarize how ASP-DPOP solves a DCOPM: \u2022 In Phase 1, each ASP-DPOP agent runs distributed DFS to generate a pseudotree. At the end of this phase, the information about the parents, pseudo-parents and child agents of each agent ai is added about facts of forms Parents / 1, Pseudo-parents / 1 and Children / 1. \u2022 In Phase 2, each ASP-DPOP agent ai: (i) waits to receive the encoding of UTIL messages from all its child agents (only for non-leaf agents), and (ii) the ASP program Iai generates its encrypted UTIL utility to reply to the message."}, {"heading": "4.2 Complexity", "text": "Since d = max1 \u2264 i-DPOP, Phase 1 = max1 \u2264 i facts, because the message is sent, the number of messages required by ASP-DPOP is of O (n).Proof In ASP-DPOP, the number of messages required by ASP-DPOP is of O (n).Proof In ASP-DPOP, the number of messages required by ASP-DPOP is of O (3) Phase 3 requires (n \u2212 1) VALUE messages. Thus, the number of messages required by ASP-DPOP is of O (n).Property 2 The size of messages required by ASP-DPOP is of O (dw).8 w The number of messages required by ASP-DPOP is known as the induced width of a pseudo-tree (Dechter 2003).Proof In ASP-DPOP produces messages whose size is required by ASP-DPOP."}, {"heading": "5 Experimental Results", "text": "The goal of this section is an experimental evaluation of ASP-DPOP. Specifically, we compare ASP-DPOP with the original DPOP and three other implementations of complete DCOP solvers: Asynchronous Forward-Bounding (AFB), Hard Constraint-DPOP (H-DPOP) and Open-DPOP (ODPOP). AFB (Gershman et al. 2009) is a complete search-based algorithm for solving DCOPs. H-DPOP (Kumar et al. 2008) is a complete DCOP solver that also propagates hard constraints to edit the search space. ODPOP (Petcu and Folding 2006) is an optimization algorithm for DCOPs that combines some advantages of both search-based algorithms and dynamically programmable algorithms."}, {"heading": "5.1 Background on AFB", "text": "The asynchronous predictive algorithm (AFB) (Gershman et al. 2009) is, to the best of our knowledge, the latest complete search-based algorithm for solving DCOPs. AFB uses a branch-and-bounce scheme to determine a complete value allocation that minimizes the total benefit of all constraints. To do this, agents extend a partial value allocation as long as the lower limit of their total service program does not exceed the global limit, which is the total benefit of the best full value allocation ever found. In AFB, the state of the search process is represented by a data structure called Current Partial Assignment (CPA). The CPA starts blank from an initialization agent that records the value allocation of its own variables and passes the CPA to the next agent."}, {"heading": "5.2 Background on H-DPOP", "text": "In H-DPOP (Kumar et al. 2008), the authors consider how to take advantage of the hard constraints that exist in the problem in a dynamic programming framework, so that only feasible subassignments are calculated, transferred, and stored (Kumar et al. 2008). To this end, they encode the combinations of mappings based on DPOP. Basically, CDDs eliminate all inconsistent mappings and include only utilities that match the value combinations that are consistent. The resulting algorithms, H-DPOP, a hybrid algorithm based on DPOP, uses CDDs to exclude unworkable mappings, thus making UTIL messages.A CDD G = < G > encodes the consistent mappings for a set of mappings."}, {"heading": "5.3 Background on ODPOP", "text": "In fact, most people who are able to survive themselves are not able to survive themselves, \"he told the German Press Agency in an interview with\" Welt am Sonntag \":\" I don't think we will be able to save the world. \"He added:\" I don't think we will be able to fix the world. \"He added:\" I don't think we will be able to fix the world. \"He added:\" I don't think we will be able to keep the world in order. \""}, {"heading": "5.4 Discussion on FRODO Platform", "text": "In our experiment, we compare the performance of ASP-DPOP against DPOP, AFB and ODPOP variable for a virtual agent; in particular, we use the implementation of the last three systems publicly available on the FRODO platform. (This assumption is common practice in the DCOP literature (Modi et al. 2005; Petcu and Faltings 2005a; Gershman et al. 2009; Ottens et al. 2012). However, agents in DCOP problems used in our experiments have their own multiple variables. We will discuss in this subsection the preprocessing technology (i.e., decomposition, also known as virtual agents) that FRODO translates a general DCOP with multiple variables per agent into a new DCOP with a variable."}, {"heading": "5.5 Experimental Results", "text": "We implement two versions of the ASP-DPOP algorithm - one that uses soil programs, which we call \"ASP-DPOP (Facts),\" and one that uses soil programs, which we call \"ASP-DPOP (Rules).\" Furthermore, since the observation of H-DPOP occurs in Section 5.2, we also implemented a variant of H-DPOP, called PH-DPOP, which stands for 100% -based H-DPOP, which limits the amount of information that any actor can access to the amount common in most DCOP algorithms, including DPOP and ASP-DPOP, which limits a variant of H-DPOP-10% -10% -10% -10% -10% -10% -10% 10% -10% -10% -% -10% -% -% of their own access."}, {"heading": "5.6 Discussions on ASP-DPOP", "text": "The advantages of using ASP-DPOP are achieved by having ASP as a basis. Here, we will illustrate the two main advantages of using ASP within ASP-DPOP, while using the highly expressive ASP language to encode constraints in DCOPs: 1. the use of this highly expressive ASP language to encode constraints in DCOPs; and 2. the ability to use the highly optimized ASP grounders and solvers to narrow the search space based on hard constraints. In the rest of this section, we will discuss these advantages further and apply them to the observations drawn from the experiments. These considerations will be followed by a discussion on how ASP-DPOP simplifies the simplistic assumption of having a single variable per agent."}, {"heading": "6 Related Work", "text": "The use of declarative programs, especially logic programs, to argue in multi-agent domains is not new. Starting with some pioneering papers (Kowalski and Sadri 1999), several authors have examined the use of several different flavors of logical programming, such as normal logic programs and inductive logic programs, to address collaboration between agents (Kakas et al. 2004; Sadri and Toni 2003; Gelfond and Watson 2007; De Vos et al. 2005). Some proposals have also explored the combination of constraint programming, logic programming, and formalization of multi-agent domains (Dovier et al. 2013; Vlahavas et al. 2010a; Dovier et al. 2010b). Logic programming has been used in modeling multi-agent scenarios that include knowledge of other actors (Baral et al. 2010)."}, {"heading": "7 Conclusions and Future Work", "text": "In this paper we have the advantages of using logical programmers as a platform to offer complete solutions for DCOPs. Our proposed logical programming algorithms, ASP-DPOP, are able to solve more problems and solve them faster than DPOP. Apart from the simplicity of modeling, any agent may be able to find highly efficient ASP solutions that take advantage of the level of search results."}, {"heading": "Acknowledgment", "text": "This research is partially supported by NSF grants HRD-1345232 and DGE-0947465. The views and conclusions contained in this document are those of the authors and should not be interpreted to represent, either explicitly or implicitly, the official policy of the funding organizations, agencies or the U.S. government. We would like to thank Akshat Kumar for informing us of his implementation of H-DPOP."}], "references": [{"title": "Knowledge Representation, reasoning, and declarative problem solving with Answer sets", "author": ["C. BARAL"], "venue": "Cambridge University Press, Cambridge, MA.", "citeRegEx": "BARAL,? 2003", "shortCiteRegEx": "BARAL", "year": 2003}, {"title": "Modeling multi-agent scenarios involving agents knowledge about other\u2019s knowledge using ASP", "author": ["C. BARAL", "G. GELFOND", "E. PONTELLI", "SON", "T.C."], "venue": "Proc. of AAMAS. 259\u2013266.", "citeRegEx": "BARAL et al\\.,? 2010", "shortCiteRegEx": "BARAL et al\\.", "year": 2010}, {"title": "Including soft global constraints in DCOPs", "author": ["C. BESSIERE", "P. GUTIERREZ", "P. MESEGUER"], "venue": "Proc. of CP. 175\u2013190.", "citeRegEx": "BESSIERE et al\\.,? 2012", "shortCiteRegEx": "BESSIERE et al\\.", "year": 2012}, {"title": "SICStus Prolog User\u2019s Manual", "author": ["M CARLSSON"], "venue": "Swedish Institute of Computer Science.", "citeRegEx": "CARLSSON,? 2015", "shortCiteRegEx": "CARLSSON", "year": 2015}, {"title": "The dlv system: Model generator and application frontends", "author": ["S. CITRIGNO", "T. EITER", "W. FABER", "G. GOTTLOB", "C. KOCH", "N. LEONE", "C. MATEIS", "G. PFEIFER", "F. SCARCELLO"], "venue": "Proc. of the Workshop on Logic Programming. 128\u2013137.", "citeRegEx": "CITRIGNO et al\\.,? 1997", "shortCiteRegEx": "CITRIGNO et al\\.", "year": 1997}, {"title": "LAIMA: A multi-agent platform using ordered choice logic programming", "author": ["M. DE VOS", "T. CRICK", "J.A. PADGET", "M. BRAIN", "O. CLIFFE", "J. NEEDHAM"], "venue": "Proc. of DALT.", "citeRegEx": "VOS et al\\.,? 2005", "shortCiteRegEx": "VOS et al\\.", "year": 2005}, {"title": "Constraint processing", "author": ["R. DECHTER"], "venue": "Elsevier Morgan Kaufmann.", "citeRegEx": "DECHTER,? 2003", "shortCiteRegEx": "DECHTER", "year": 2003}, {"title": "An Investigation of Multi-Agent Planning in CLP", "author": ["A. DOVIER", "A. FORMISANO", "E. PONTELLI"], "venue": "Fundamentae Informatica 105, 1-2, 79\u2013103.", "citeRegEx": "DOVIER et al\\.,? 2010a", "shortCiteRegEx": "DOVIER et al\\.", "year": 2010}, {"title": "Multivalued Action Languages with Constraints in CLP(FD)", "author": ["A. DOVIER", "A. FORMISANO", "E. PONTELLI"], "venue": "Theory and Practice of Logic Programming 10, 2, 167\u2013235.", "citeRegEx": "DOVIER et al\\.,? 2010b", "shortCiteRegEx": "DOVIER et al\\.", "year": 2010}, {"title": "Autonomous agents coordination: Action languages meet CLP() and Linda", "author": ["A. DOVIER", "A. FORMISANO", "E. PONTELLI"], "venue": "Theory and Practice of Logic Programming 13, 2, 149\u2013173.", "citeRegEx": "DOVIER et al\\.,? 2013", "shortCiteRegEx": "DOVIER et al\\.", "year": 2013}, {"title": "On random graphs i", "author": ["P. ERD\u00d6S", "A. R\u00c9NYI"], "venue": "Publicationes Mathematicae Debrecen 6, 290.", "citeRegEx": "ERD\u00d6S and R\u00c9NYI,? 1959", "shortCiteRegEx": "ERD\u00d6S and R\u00c9NYI", "year": 1959}, {"title": "Decentralised coordination of low-power embedded devices using the Max-Sum algorithm", "author": ["A. FARINELLI", "A. ROGERS", "A. PETCU", "N. JENNINGS"], "venue": "Proc. of AAMAS. 639\u2013646.", "citeRegEx": "FARINELLI et al\\.,? 2008", "shortCiteRegEx": "FARINELLI et al\\.", "year": 2008}, {"title": "GDGibbs: A GPU-based sampling algorithm for solving distributed constraint optimization problems (Extended Abstract)", "author": ["F. FIORETTO", "F. CAMPEOTTO", "L. DA RIN FIORETTO", "W. YEOH", "E. PONTELLI"], "venue": "Proc. of AAMAS.", "citeRegEx": "FIORETTO et al\\.,? 2014", "shortCiteRegEx": "FIORETTO et al\\.", "year": 2014}, {"title": "Improving DPOP with branch consistency for solving distributed constraint optimization problems", "author": ["F. FIORETTO", "T. LE", "W. YEOH", "E. PONTELLI", "SON", "T.C."], "venue": "Proc. of CP.", "citeRegEx": "FIORETTO et al\\.,? 2014", "shortCiteRegEx": "FIORETTO et al\\.", "year": 2014}, {"title": "Multi-variable agents decomposition for dcops", "author": ["F. FIORETTO", "W. YEOH", "E. PONTELLI"], "venue": "Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence, February 12-17, 2016, Phoenix, Arizona, USA. 2480\u20132486.", "citeRegEx": "FIORETTO et al\\.,? 2016", "shortCiteRegEx": "FIORETTO et al\\.", "year": 2016}, {"title": "Answer Set Solving in Practice", "author": ["M. GEBSER", "R. KAMINSKI", "B. KAUFMANN", "T. SCHAUB"], "venue": "Morgan and Claypool Publishers.", "citeRegEx": "GEBSER et al\\.,? 2012", "shortCiteRegEx": "GEBSER et al\\.", "year": 2012}, {"title": "Potassco: The potsdam answer set solving collection", "author": ["M. GEBSER", "B. KAUFMANN", "R. KAMINSKI", "M. OSTROWSKI", "T. SCHAUB", "M. SCHNEIDER"], "venue": "AI Commun. 24, 2 (Apr.), 107\u2013 124.", "citeRegEx": "GEBSER et al\\.,? 2011", "shortCiteRegEx": "GEBSER et al\\.", "year": 2011}, {"title": "clasp: A conflict-driven answer set solver", "author": ["M. GEBSER", "B. KAUFMANN", "A. NEUMANN", "T. SCHAUB"], "venue": "Proc. of LPNMR. 260\u2013265.", "citeRegEx": "GEBSER et al\\.,? 2007", "shortCiteRegEx": "GEBSER et al\\.", "year": 2007}, {"title": "Modeling cooperative multi-agent systems", "author": ["G. GELFOND", "R. WATSON"], "venue": "Proc. of ASP Workshop.", "citeRegEx": "GELFOND and WATSON,? 2007", "shortCiteRegEx": "GELFOND and WATSON", "year": 2007}, {"title": "Knowledge Representation, Reasoning, and the Design of Intelligent Agents", "author": ["M. GELFOND", "Y. KAHL"], "venue": "Cambridge University Press.", "citeRegEx": "GELFOND and KAHL,? 2014", "shortCiteRegEx": "GELFOND and KAHL", "year": 2014}, {"title": "Logic programs with classical negation", "author": ["M. GELFOND", "V. LIFSCHITZ"], "venue": "Proc. of ICLP. 579\u2013597.", "citeRegEx": "GELFOND and LIFSCHITZ,? 1990", "shortCiteRegEx": "GELFOND and LIFSCHITZ", "year": 1990}, {"title": "Asynchronous Forward-Bounding for distributed COPs", "author": ["A. GERSHMAN", "A. MEISELS", "R. ZIVAN"], "venue": "Journal of Artificial Intelligence Research 34, 61\u201388.", "citeRegEx": "GERSHMAN et al\\.,? 2009", "shortCiteRegEx": "GERSHMAN et al\\.", "year": 2009}, {"title": "Analysis of privacy loss in distributed constraint optimization", "author": ["R. GREENSTADT", "J.P. PEARCE", "M. TAMBE"], "venue": "Proceedings, The Twenty-First National Conference on Artificial Intelligence and the Eighteenth Innovative Applications of Artificial Intelligence Conference, July 16-20, 2006, Boston, Massachusetts, USA. 647\u2013653.", "citeRegEx": "GREENSTADT et al\\.,? 2006", "shortCiteRegEx": "GREENSTADT et al\\.", "year": 2006}, {"title": "Solving customer-driven microgrid optimization problems as DCOPs", "author": ["S. GUPTA", "P. JAIN", "W. YEOH", "S. RANADE", "E. PONTELLI"], "venue": "Proc. of the Distributed Constraint Reasoning Workshop. 45\u201359.", "citeRegEx": "GUPTA et al\\.,? 2013", "shortCiteRegEx": "GUPTA et al\\.", "year": 2013}, {"title": "Maintaining soft arc consistencies in BnB-ADOPT during search", "author": ["GUTIERREZ P.", "LEE J.", "LEI K.M.", "MAK T.", "MESEGUER P."], "venue": "Proc. of CP. 365\u2013380. GUTIERREZ, P. AND MESEGUER, P. 2012a. Improving BnB-ADOPT-AC. In Proc. of AAMAS. 273\u2013280.", "citeRegEx": "P. et al\\.,? 2013", "shortCiteRegEx": "P. et al\\.", "year": 2013}, {"title": "Removing redundant messages in n-ary BnB-ADOPT", "author": ["P. GUTIERREZ", "P. MESEGUER"], "venue": "Journal of Artificial Intelligence Research 45, 287\u2013304.", "citeRegEx": "GUTIERREZ and MESEGUER,? 2012b", "shortCiteRegEx": "GUTIERREZ and MESEGUER", "year": 2012}, {"title": "Generalizing ADOPT and BnB-ADOPT", "author": ["P. GUTIERREZ", "P. MESEGUER", "W. YEOH"], "venue": "Proc. of IJCAI. 554\u2013559.", "citeRegEx": "GUTIERREZ et al\\.,? 2011", "shortCiteRegEx": "GUTIERREZ et al\\.", "year": 2011}, {"title": "Distributed intelligent backtracking", "author": ["Y. HAMADI", "C. BESSI\u00c8RE", "J. QUINQUETON"], "venue": "Proc. of ECAI. 219\u2013223.", "citeRegEx": "HAMADI et al\\.,? 1998", "shortCiteRegEx": "HAMADI et al\\.", "year": 1998}, {"title": "Special issue: Ten years of logic programming constraint logic programming: a survey", "author": ["J. JAFFAR", "M.J. MAHER"], "venue": "The Journal of Logic Programming 19, 503 \u2013 581.", "citeRegEx": "JAFFAR and MAHER,? 1994", "shortCiteRegEx": "JAFFAR and MAHER", "year": 1994}, {"title": "Optimum operation of a customerdriven microgrid: A comprehensive approach", "author": ["P. JAIN", "S. GUPTA", "S. RANADE", "E. PONTELLI"], "venue": "Proc. of PEDES.", "citeRegEx": "JAIN et al\\.,? 2012", "shortCiteRegEx": "JAIN et al\\.", "year": 2012}, {"title": "Agent Planning, negotiation and control of operation", "author": ["A. KAKAS", "P. TORRONI", "N. DEMETRIOU"], "venue": "Proc. of ECAI.", "citeRegEx": "KAKAS et al\\.,? 2004", "shortCiteRegEx": "KAKAS et al\\.", "year": 2004}, {"title": "Grounding and solving in answer set programming", "author": ["B. KAUFMANN", "N. LEONE", "S. PERRI", "T. SCHAUB"], "venue": "AI Magazine 37, 3, 25\u201332.", "citeRegEx": "KAUFMANN et al\\.,? 2016", "shortCiteRegEx": "KAUFMANN et al\\.", "year": 2016}, {"title": "Logic programming towards multi-agent systems", "author": ["R. KOWALSKI", "F. SADRI"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 3-4, 391\u2013419.", "citeRegEx": "KOWALSKI and SADRI,? 1999", "shortCiteRegEx": "KOWALSKI and SADRI", "year": 1999}, {"title": "Distributed constraint optimization with structured resource constraints", "author": ["A. KUMAR", "B. FALTINGS", "A. PETCU"], "venue": "Proc. of AAMAS. 923\u2013930.", "citeRegEx": "KUMAR et al\\.,? 2009", "shortCiteRegEx": "KUMAR et al\\.", "year": 2009}, {"title": "H-DPOP: Using hard constraints for search space pruning in DCOP", "author": ["A. KUMAR", "A. PETCU", "B. FALTINGS"], "venue": "Proc. of AAAI. 325\u2013330.", "citeRegEx": "KUMAR et al\\.,? 2008", "shortCiteRegEx": "KUMAR et al\\.", "year": 2008}, {"title": "Coordination of first responders under communication and resource constraints (Short Paper)", "author": ["R. LASS", "J. KOPENA", "E. SULTANIK", "D. NGUYEN", "C. DUGAN", "P. MODI", "W. REGLI"], "venue": "Proc. of AAMAS. 1409\u20131413.", "citeRegEx": "LASS et al\\.,? 2008", "shortCiteRegEx": "LASS et al\\.", "year": 2008}, {"title": "Logic and constraint logic programming for distributed constraint optimization", "author": ["T. LE", "E. PONTELLI", "T.C. SON", "W. YEOH"], "venue": "CoRR abs/1405.1734.", "citeRegEx": "LE et al\\.,? 2014", "shortCiteRegEx": "LE et al\\.", "year": 2014}, {"title": "Solving distributed constraint optimization problems with logic programming", "author": ["T. LE", "T.C. SON", "E. PONTELLI", "W. YEOH"], "venue": "Proc. of AAAI.", "citeRegEx": "LE et al\\.,? 2015", "shortCiteRegEx": "LE et al\\.", "year": 2015}, {"title": "Coordinating logistics operations with privacy guarantees", "author": ["T. L\u00c9AUT\u00c9", "B. FALTINGS"], "venue": "Proc. of IJCAI. 2482\u20132487.", "citeRegEx": "L\u00c9AUT\u00c9 and FALTINGS,? 2011", "shortCiteRegEx": "L\u00c9AUT\u00c9 and FALTINGS", "year": 2011}, {"title": "FRODO 2.0: An open-source framework for distributed constraint optimization", "author": ["T. L\u00c9AUT\u00c9", "B. OTTENS", "R. SZYMANEK"], "venue": "In Proc. of the Distributed Constraint Reasoning Workshop", "citeRegEx": "L\u00c9AUT\u00c9 et al\\.,? \\Q2009\\E", "shortCiteRegEx": "L\u00c9AUT\u00c9 et al\\.", "year": 2009}, {"title": "Cologne: A declarative distributed constraint optimization platform", "author": ["LIU C.", "REN L.", "LOO B.T.", "MAO Y.", "BASU P."], "venue": "Proc. of the VLDB Endowment 5, 8, 752\u2013763.", "citeRegEx": "C. et al\\.,? 2012", "shortCiteRegEx": "C. et al\\.", "year": 2012}, {"title": "Distributed algorithms for DCOP: A graphical game-based approach", "author": ["R. MAHESWARAN", "J. PEARCE", "M. TAMBE"], "venue": "Proc. of PDCS. 432\u2013439.", "citeRegEx": "MAHESWARAN et al\\.,? 2004", "shortCiteRegEx": "MAHESWARAN et al\\.", "year": 2004}, {"title": "Taking DCOP to the real world: Efficient complete solutions for distributed event scheduling", "author": ["R. MAHESWARAN", "M. TAMBE", "E. BOWRING", "J. PEARCE", "P. VARAKANTHAM"], "venue": "Proc. of AAMAS. 310\u2013317.", "citeRegEx": "MAHESWARAN et al\\.,? 2004", "shortCiteRegEx": "MAHESWARAN et al\\.", "year": 2004}, {"title": "Solving distributed constraint optimization problems using cooperative mediation", "author": ["R. MAILLER", "V. LESSER"], "venue": "Proc. of AAMAS. 438\u2013445.", "citeRegEx": "MAILLER and LESSER,? 2004", "shortCiteRegEx": "MAILLER and LESSER", "year": 2004}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V. MAREK", "M. TRUSZCZY\u0143SKI"], "venue": "The Logic Programming Paradigm: a 25-year Perspective. 375\u2013398.", "citeRegEx": "MAREK and TRUSZCZY\u0143SKI,? 1999", "shortCiteRegEx": "MAREK and TRUSZCZY\u0143SKI", "year": 1999}, {"title": "ADOPT: Asynchronous distributed constraint optimization with quality guarantees", "author": ["P. MODI", "SHEN", "W.-M.", "M. TAMBE", "M. YOKOO"], "venue": "Artificial Intelligence 161, 1\u20132, 149\u2013180.", "citeRegEx": "MODI et al\\.,? 2005", "shortCiteRegEx": "MODI et al\\.", "year": 2005}, {"title": "Distributed Gibbs: A memory-bounded sampling-based DCOP algorithm", "author": ["D.T. NGUYEN", "W. YEOH", "LAU", "H.C."], "venue": "Proc. of AAMAS. 167\u2013174.", "citeRegEx": "NGUYEN et al\\.,? 2013", "shortCiteRegEx": "NGUYEN et al\\.", "year": 2013}, {"title": "Logic programming with stable model semantics as a constraint programming paradigm", "author": ["I. NIEMEL\u00c4"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 3\u20134, 241\u2013273.", "citeRegEx": "NIEMEL\u00c4,? 1999", "shortCiteRegEx": "NIEMEL\u00c4", "year": 1999}, {"title": "DUCT: An upper confidence bound approach to distributed constraint optimization problems", "author": ["B. OTTENS", "C. DIMITRAKAKIS", "B. FALTINGS"], "venue": "Proc. of AAAI. 528\u2013534.", "citeRegEx": "OTTENS et al\\.,? 2012", "shortCiteRegEx": "OTTENS et al\\.", "year": 2012}, {"title": "A Class of Algorithms for Distributed Constraint Optimization", "author": ["A. PETCU"], "venue": "Frontiers in Artificial Intelligence and Applications, vol. 194. IOS Press.", "citeRegEx": "PETCU,? 2009", "shortCiteRegEx": "PETCU", "year": 2009}, {"title": "A scalable method for multiagent constraint optimization", "author": ["A. PETCU", "B. FALTINGS"], "venue": "Proc. of IJCAI. 1413\u20131420.", "citeRegEx": "PETCU and FALTINGS,? 2005a", "shortCiteRegEx": "PETCU and FALTINGS", "year": 2005}, {"title": "Superstabilizing, fault-containing multiagent combinatorial optimization", "author": ["A. PETCU", "B. FALTINGS"], "venue": "Proc. of AAAI. 449\u2013454.", "citeRegEx": "PETCU and FALTINGS,? 2005b", "shortCiteRegEx": "PETCU and FALTINGS", "year": 2005}, {"title": "ODPOP: an algorithm for open/distributed constraint optimization", "author": ["A. PETCU", "B. FALTINGS"], "venue": "Proceedings, The Twenty-First National Conference on Artificial Intelligence and the Eighteenth Innovative Applications of Artificial Intelligence Conference, July 16-20, 2006, Boston, Massachusetts, USA. 703\u2013708.", "citeRegEx": "PETCU and FALTINGS,? 2006", "shortCiteRegEx": "PETCU and FALTINGS", "year": 2006}, {"title": "MB-DPOP: A new memory-bounded algorithm for distributed optimization", "author": ["A. PETCU", "B. FALTINGS"], "venue": "Proc. of IJCAI. 1452\u20131457.", "citeRegEx": "PETCU and FALTINGS,? 2007", "shortCiteRegEx": "PETCU and FALTINGS", "year": 2007}, {"title": "PC-DPOP: A new partial centralization algorithm for distributed optimization", "author": ["A. PETCU", "B. FALTINGS", "R. MAILLER"], "venue": "Proc. of IJCAI. 167\u2013172.", "citeRegEx": "PETCU et al\\.,? 2007", "shortCiteRegEx": "PETCU et al\\.", "year": 2007}, {"title": "M-DPOP: Faithful distributed implementation of efficient social choice problems", "author": ["A. PETCU", "B. FALTINGS", "D. PARKES"], "venue": "Journal of Artificial Intelligence Research 32, 705\u2013755.", "citeRegEx": "PETCU et al\\.,? 2008", "shortCiteRegEx": "PETCU et al\\.", "year": 2008}, {"title": "Logic programming for finding models in the logics of knowledge and its applications: A case study", "author": ["E. PONTELLI", "T.C. SON", "C. BARAL", "G. GELFOND"], "venue": "Theory and Practice of Logic Programming 10, 4-6, 675\u2013690.", "citeRegEx": "PONTELLI et al\\.,? 2010", "shortCiteRegEx": "PONTELLI et al\\.", "year": 2010}, {"title": "Abductive logic programming for communication and negotiation amongst agents", "author": ["F. SADRI", "F. TONI"], "venue": "ALP Newsletter.", "citeRegEx": "SADRI and TONI,? 2003", "shortCiteRegEx": "SADRI and TONI", "year": 2003}, {"title": "A logical formulation for negotiation among dishonest agents", "author": ["C. SAKAMA", "T.C. SON", "E. PONTELLI"], "venue": "Proc. of IJCAI. 1069\u20131074.", "citeRegEx": "SAKAMA et al\\.,? 2011", "shortCiteRegEx": "SAKAMA et al\\.", "year": 2011}, {"title": "Logic programming for multiagent planning with negotiation", "author": ["T.C. SON", "E. PONTELLI", "C. SAKAMA"], "venue": "Proc. of ICLP. 99\u2013114.", "citeRegEx": "SON et al\\.,? 2009", "shortCiteRegEx": "SON et al\\.", "year": 2009}, {"title": "DCOPolis: a framework for simulating and deploying distributed constraint reasoning algorithms", "author": ["E. SULTANIK", "R. LASS", "W. REGLI"], "venue": "Proc. of the Distributed Constraint Reasoning Workshop.", "citeRegEx": "SULTANIK et al\\.,? 2007", "shortCiteRegEx": "SULTANIK et al\\.", "year": 2007}, {"title": "Coalition structure generation based on distributed constraint optimization", "author": ["S. UEDA", "A. IWASAKI", "M. YOKOO"], "venue": "Proc. of AAAI. 197\u2013203.", "citeRegEx": "UEDA et al\\.,? 2010", "shortCiteRegEx": "UEDA et al\\.", "year": 2010}, {"title": "Constructing a unifying theory of dynamic programming DCOP algorithms via the generalized distributive law", "author": ["M. VINYALS", "J. RODR\u00cdGUEZ-AGUILAR", "J. CERQUIDES"], "venue": "Autonomous Agents and Multi-Agent Systems 22, 3, 439\u2013464.", "citeRegEx": "VINYALS et al\\.,? 2011", "shortCiteRegEx": "VINYALS et al\\.", "year": 2011}, {"title": "MACLP: Multi Agent Constraint Logic Programming", "author": ["I. VLAHAVAS"], "venue": "Information Sciences 144, 1-4, 127\u2013142.", "citeRegEx": "VLAHAVAS,? 2002", "shortCiteRegEx": "VLAHAVAS", "year": 2002}, {"title": "BnB-ADOPT: An asynchronous branch-andbound DCOP algorithm", "author": ["W. YEOH", "A. FELNER", "S. KOENIG"], "venue": "Journal of Artificial Intelligence Research 38, 85\u2013133.", "citeRegEx": "YEOH et al\\.,? 2010", "shortCiteRegEx": "YEOH et al\\.", "year": 2010}, {"title": "Caching schemes for DCOP search algorithms", "author": ["W. YEOH", "P. VARAKANTHAM", "S. KOENIG"], "venue": "Proc. of AAMAS. 609\u2013616.", "citeRegEx": "YEOH et al\\.,? 2009", "shortCiteRegEx": "YEOH et al\\.", "year": 2009}, {"title": "Distributed problem solving", "author": ["W. YEOH", "M. YOKOO"], "venue": "AI Magazine 33, 3, 53\u201365.", "citeRegEx": "YEOH and YOKOO,? 2012", "shortCiteRegEx": "YEOH and YOKOO", "year": 2012}, {"title": "Explorative anytime local search for distributed constraint optimization", "author": ["R. ZIVAN", "S. OKAMOTO", "H. PELED"], "venue": "Artificial Intelligence 212, 1\u201326.", "citeRegEx": "ZIVAN et al\\.,? 2014", "shortCiteRegEx": "ZIVAN et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 45, "context": "Distributed Constraint Optimization Problems (DCOPs) are optimization problems where agents need to coordinate the assignment of values to their \u201clocal\u201d variables to maximize the overall sum of resulting constraint utilities (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012).", "startOffset": 225, "endOffset": 315}, {"referenceID": 50, "context": "Distributed Constraint Optimization Problems (DCOPs) are optimization problems where agents need to coordinate the assignment of values to their \u201clocal\u201d variables to maximize the overall sum of resulting constraint utilities (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012).", "startOffset": 225, "endOffset": 315}, {"referenceID": 43, "context": "Distributed Constraint Optimization Problems (DCOPs) are optimization problems where agents need to coordinate the assignment of values to their \u201clocal\u201d variables to maximize the overall sum of resulting constraint utilities (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012).", "startOffset": 225, "endOffset": 315}, {"referenceID": 66, "context": "Distributed Constraint Optimization Problems (DCOPs) are optimization problems where agents need to coordinate the assignment of values to their \u201clocal\u201d variables to maximize the overall sum of resulting constraint utilities (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012).", "startOffset": 225, "endOffset": 315}, {"referenceID": 41, "context": "Researchers have used DCOPs to model various problems, such as the distributed scheduling of meetings (Maheswaran et al. 2004; Zivan et al. 2014), distributed allocation of targets to sensors in a network (Farinelli et al.", "startOffset": 102, "endOffset": 145}, {"referenceID": 67, "context": "Researchers have used DCOPs to model various problems, such as the distributed scheduling of meetings (Maheswaran et al. 2004; Zivan et al. 2014), distributed allocation of targets to sensors in a network (Farinelli et al.", "startOffset": 102, "endOffset": 145}, {"referenceID": 11, "context": "2014), distributed allocation of targets to sensors in a network (Farinelli et al. 2008), distributed allocation of resources in disaster evacuation scenarios (Lass et al.", "startOffset": 65, "endOffset": 88}, {"referenceID": 35, "context": "2008), distributed allocation of resources in disaster evacuation scenarios (Lass et al. 2008), the distributed management of power distribution networks (Kumar et al.", "startOffset": 76, "endOffset": 94}, {"referenceID": 33, "context": "2008), the distributed management of power distribution networks (Kumar et al. 2009; Jain et al. 2012), the distributed generation of coalition structures (Ueda et al.", "startOffset": 65, "endOffset": 102}, {"referenceID": 29, "context": "2008), the distributed management of power distribution networks (Kumar et al. 2009; Jain et al. 2012), the distributed generation of coalition structures (Ueda et al.", "startOffset": 65, "endOffset": 102}, {"referenceID": 61, "context": "2012), the distributed generation of coalition structures (Ueda et al. 2010) and the distributed coordination of logistics operations (L\u00e9aut\u00e9 and Faltings 2011).", "startOffset": 58, "endOffset": 76}, {"referenceID": 37, "context": "1 This article extends our previous conference paper (Le et al. 2015) in the following manner: (1) It provides a more thorough description of the ASP-DPOP algorithm; (2) It elaborates on the algorithm\u2019s theoretical properties with complete proofs; and (3) It includes additional experimental results.", "startOffset": 53, "endOffset": 69}, {"referenceID": 45, "context": "The field has matured considerably over the past decade, since the seminal ADOPT paper (Modi et al. 2005), as researchers continue to develop more sophisticated solving algorithms.", "startOffset": 87, "endOffset": 105}, {"referenceID": 45, "context": "The majority of the DCOP resolution algorithms can be classified in one of three classes: (1) Search-based algorithms, like ADOPT (Modi et al. 2005) and its variants (Yeoh et al.", "startOffset": 130, "endOffset": 148}, {"referenceID": 65, "context": "2005) and its variants (Yeoh et al. 2009; Yeoh et al. 2010; Gutierrez et al. 2011; Gutierrez et al. 2013), AFB (Gershman et al.", "startOffset": 23, "endOffset": 105}, {"referenceID": 64, "context": "2005) and its variants (Yeoh et al. 2009; Yeoh et al. 2010; Gutierrez et al. 2011; Gutierrez et al. 2013), AFB (Gershman et al.", "startOffset": 23, "endOffset": 105}, {"referenceID": 26, "context": "2005) and its variants (Yeoh et al. 2009; Yeoh et al. 2010; Gutierrez et al. 2011; Gutierrez et al. 2013), AFB (Gershman et al.", "startOffset": 23, "endOffset": 105}, {"referenceID": 21, "context": "2013), AFB (Gershman et al. 2009), and MGM (Maheswaran et al.", "startOffset": 11, "endOffset": 33}, {"referenceID": 41, "context": "2009), and MGM (Maheswaran et al. 2004), where the agents enumerate combinations of value assignments in a decentralized manner; (2) Inference-based algorithms, like DPOP (Petcu and Faltings 2005a) and its variants (Petcu and Faltings 2005b; Petcu and Faltings 2007; Petcu et al.", "startOffset": 15, "endOffset": 39}, {"referenceID": 50, "context": "2004), where the agents enumerate combinations of value assignments in a decentralized manner; (2) Inference-based algorithms, like DPOP (Petcu and Faltings 2005a) and its variants (Petcu and Faltings 2005b; Petcu and Faltings 2007; Petcu et al.", "startOffset": 137, "endOffset": 163}, {"referenceID": 51, "context": "2004), where the agents enumerate combinations of value assignments in a decentralized manner; (2) Inference-based algorithms, like DPOP (Petcu and Faltings 2005a) and its variants (Petcu and Faltings 2005b; Petcu and Faltings 2007; Petcu et al. 2007; Petcu et al. 2008), max-sum (Farinelli et al.", "startOffset": 181, "endOffset": 270}, {"referenceID": 53, "context": "2004), where the agents enumerate combinations of value assignments in a decentralized manner; (2) Inference-based algorithms, like DPOP (Petcu and Faltings 2005a) and its variants (Petcu and Faltings 2005b; Petcu and Faltings 2007; Petcu et al. 2007; Petcu et al. 2008), max-sum (Farinelli et al.", "startOffset": 181, "endOffset": 270}, {"referenceID": 54, "context": "2004), where the agents enumerate combinations of value assignments in a decentralized manner; (2) Inference-based algorithms, like DPOP (Petcu and Faltings 2005a) and its variants (Petcu and Faltings 2005b; Petcu and Faltings 2007; Petcu et al. 2007; Petcu et al. 2008), max-sum (Farinelli et al.", "startOffset": 181, "endOffset": 270}, {"referenceID": 55, "context": "2004), where the agents enumerate combinations of value assignments in a decentralized manner; (2) Inference-based algorithms, like DPOP (Petcu and Faltings 2005a) and its variants (Petcu and Faltings 2005b; Petcu and Faltings 2007; Petcu et al. 2007; Petcu et al. 2008), max-sum (Farinelli et al.", "startOffset": 181, "endOffset": 270}, {"referenceID": 11, "context": "2008), max-sum (Farinelli et al. 2008), and Action GDL (Vinyals et al.", "startOffset": 15, "endOffset": 38}, {"referenceID": 62, "context": "2008), and Action GDL (Vinyals et al. 2011), where the agents use dynamic programming techniques to propagate aggregated information to other agents; and (3) Sampling-based algorithms, like DUCT (Ottens et al.", "startOffset": 22, "endOffset": 43}, {"referenceID": 48, "context": "2011), where the agents use dynamic programming techniques to propagate aggregated information to other agents; and (3) Sampling-based algorithms, like DUCT (Ottens et al. 2012) and D-Gibbs (Nguyen et al.", "startOffset": 157, "endOffset": 177}, {"referenceID": 46, "context": "2012) and D-Gibbs (Nguyen et al. 2013; Fioretto et al. 2014), where the agents sample the search space in a decentralized manner.", "startOffset": 18, "endOffset": 60}, {"referenceID": 12, "context": "2012) and D-Gibbs (Nguyen et al. 2013; Fioretto et al. 2014), where the agents sample the search space in a decentralized manner.", "startOffset": 18, "endOffset": 60}, {"referenceID": 50, "context": "Specifically, we propose an integration of Distributed Pseudo-tree Optimization Procedure (DPOP) (Petcu and Faltings 2005a), a popular DCOP algorithm, with Answer Set Programming (ASP) (Niemel\u00e4 1999; Marek and Truszczy\u0144ski 1999) as the local constraint solver of each agent.", "startOffset": 97, "endOffset": 123}, {"referenceID": 45, "context": "A Distributed Constraint Optimization Problem (DCOP) (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012) can be described as a tupleM = \u3008X ,D,F ,A, \u03b1\u3009 where:", "startOffset": 53, "endOffset": 143}, {"referenceID": 50, "context": "A Distributed Constraint Optimization Problem (DCOP) (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012) can be described as a tupleM = \u3008X ,D,F ,A, \u03b1\u3009 where:", "startOffset": 53, "endOffset": 143}, {"referenceID": 43, "context": "A Distributed Constraint Optimization Problem (DCOP) (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012) can be described as a tupleM = \u3008X ,D,F ,A, \u03b1\u3009 where:", "startOffset": 53, "endOffset": 143}, {"referenceID": 66, "context": "A Distributed Constraint Optimization Problem (DCOP) (Modi et al. 2005; Petcu and Faltings 2005a; Mailler and Lesser 2004; Yeoh and Yokoo 2012) can be described as a tupleM = \u3008X ,D,F ,A, \u03b1\u3009 where:", "startOffset": 53, "endOffset": 143}, {"referenceID": 27, "context": "A pseudotree of a DCOP can be constructed using distributed DFS algorithms (Hamadi et al. 1998) applied to the constraint graph of the DCOP.", "startOffset": 75, "endOffset": 95}, {"referenceID": 50, "context": "The Distributed Pseudo-tree Optimization Procedure (DPOP) (Petcu and Faltings 2005a) is a complete algorithm to solve DCOPs with the following three phases: Pseudo-tree generation, UTIL propagation and VALUE propagation.", "startOffset": 58, "endOffset": 84}, {"referenceID": 60, "context": "However, in many implementations of DPOP, including those within the DCOPolis (Sultanik et al. 2007) and FRODO (L\u00e9aut\u00e9 et al.", "startOffset": 78, "endOffset": 100}, {"referenceID": 27, "context": "2009) repositories, greedy approaches such as the Distributed DFS algorithm (Hamadi et al. 1998) are used.", "startOffset": 76, "endOffset": 96}, {"referenceID": 50, "context": "3 Here we detail an extended version of DPOP described in (Petcu and Faltings 2005a) which removes the assumption that each agent owns exactly one variable.", "startOffset": 58, "endOffset": 84}, {"referenceID": 49, "context": "Definition 3 (UTIL Messages (Petcu 2009)) UTIL aj ai , the UTIL message sent by agent ai to agent aj , is a multi-dimensional matrix, with one dimension for each variable in sepi.", "startOffset": 28, "endOffset": 40}, {"referenceID": 0, "context": "Let us provide some general background on Answer Set Programming (ASP) (see, for example, (Baral 2003; Gelfond and Kahl 2014) for more details).", "startOffset": 90, "endOffset": 125}, {"referenceID": 19, "context": "Let us provide some general background on Answer Set Programming (ASP) (see, for example, (Baral 2003; Gelfond and Kahl 2014) for more details).", "startOffset": 90, "endOffset": 125}, {"referenceID": 20, "context": "S is an answer set (or a stable model) of a ground program \u03a0 (Gelfond and Lifschitz 1990) if it satisfies the following conditions: (i) If \u03a0 does not contain any naf-literal (i.", "startOffset": 61, "endOffset": 89}, {"referenceID": 17, "context": "Standard syntax for choice rules has been proposed and adopted in most stateof-the-art ASP solvers, such as CLASP (Gebser et al. 2007) and DLV (Citrigno et al.", "startOffset": 114, "endOffset": 134}, {"referenceID": 4, "context": "2007) and DLV (Citrigno et al. 1997).", "startOffset": 14, "endOffset": 36}, {"referenceID": 16, "context": ", GRINGO (Gebser et al. 2011).", "startOffset": 9, "endOffset": 29}, {"referenceID": 17, "context": ", CLASP (Gebser et al. 2007).", "startOffset": 8, "endOffset": 28}, {"referenceID": 15, "context": "For readers who are interested in how to solve an answer set program, the foundations and algorithms underlying the grounding and solving technology used in GRINGO and CLASP are described in detail in (Gebser et al. 2012; Kaufmann et al. 2016).", "startOffset": 201, "endOffset": 243}, {"referenceID": 31, "context": "For readers who are interested in how to solve an answer set program, the foundations and algorithms underlying the grounding and solving technology used in GRINGO and CLASP are described in detail in (Gebser et al. 2012; Kaufmann et al. 2016).", "startOffset": 201, "endOffset": 243}, {"referenceID": 17, "context": "In ASP-DPOP, we use CLASP (Gebser et al. 2007), with its companion grounder GRINGO, as our ASP solver, being the current state-of-the-art for ASP.", "startOffset": 26, "endOffset": 46}, {"referenceID": 6, "context": "8 w\u2217 is also known as the induced width of a pseudo-tree (Dechter 2003).", "startOffset": 57, "endOffset": 71}, {"referenceID": 50, "context": "Therefore, the size of encoded UTIL messages is bounded by O(dw) as the bounded size of UTIL messages in DPOP (Petcu and Faltings 2005a); and \u2022 Phase 3 produces encoded VALUE messages; each message consists of a fact of the form solution/3 for each value assignment of a variable in the corresponding VALUE message in DPOP.", "startOffset": 110, "endOffset": 136}, {"referenceID": 21, "context": "AFB (Gershman et al. 2009) is a complete search-based algorithm to solve DCOPs.", "startOffset": 4, "endOffset": 26}, {"referenceID": 34, "context": "H-DPOP (Kumar et al. 2008) is a complete DCOP solver that, in addition, propagates hard constraints to prune the search space.", "startOffset": 7, "endOffset": 26}, {"referenceID": 52, "context": "ODPOP (Petcu and Faltings 2006) is an optimization algorithm for DCOPs, which combines some advantages of both search-based algorithms and dynamic-programming-based algorithms.", "startOffset": 6, "endOffset": 31}, {"referenceID": 21, "context": "The asynchronous forward-bounding algorithm (AFB) (Gershman et al. 2009), to the best of our knowledge, is the most recent complete search-based algorithm to solve DCOPs.", "startOffset": 50, "endOffset": 72}, {"referenceID": 34, "context": "In H-DPOP (Kumar et al. 2008), the authors consider how to leverage the hard constraints that may exist in the problem in a dynamic programming framework, so that only feasible partial assignments are computed, transmitted, and stored (Kumar et al.", "startOffset": 10, "endOffset": 29}, {"referenceID": 34, "context": "2008), the authors consider how to leverage the hard constraints that may exist in the problem in a dynamic programming framework, so that only feasible partial assignments are computed, transmitted, and stored (Kumar et al. 2008).", "startOffset": 211, "endOffset": 230}, {"referenceID": 52, "context": "ODPOP (Petcu and Faltings 2006) is an optimization algorithm for DCOP, which combines some advantages of both search-based algorithms and dynamic-programming-based algorithms.", "startOffset": 6, "endOffset": 31}, {"referenceID": 45, "context": "This assumption is common practice in the DCOP literature (Modi et al. 2005; Petcu and Faltings 2005a; Gershman et al. 2009; Ottens et al. 2012).", "startOffset": 58, "endOffset": 144}, {"referenceID": 50, "context": "This assumption is common practice in the DCOP literature (Modi et al. 2005; Petcu and Faltings 2005a; Gershman et al. 2009; Ottens et al. 2012).", "startOffset": 58, "endOffset": 144}, {"referenceID": 21, "context": "This assumption is common practice in the DCOP literature (Modi et al. 2005; Petcu and Faltings 2005a; Gershman et al. 2009; Ottens et al. 2012).", "startOffset": 58, "endOffset": 144}, {"referenceID": 48, "context": "This assumption is common practice in the DCOP literature (Modi et al. 2005; Petcu and Faltings 2005a; Gershman et al. 2009; Ottens et al. 2012).", "startOffset": 58, "endOffset": 144}, {"referenceID": 50, "context": "In our experiments, we compare both versions of ASP-DPOP against DPOP (Petcu and Faltings 2005a), H-DPOP (Kumar et al.", "startOffset": 70, "endOffset": 96}, {"referenceID": 34, "context": "In our experiments, we compare both versions of ASP-DPOP against DPOP (Petcu and Faltings 2005a), H-DPOP (Kumar et al. 2008), PH-DPOP, AFB (Gershman et al.", "startOffset": 105, "endOffset": 124}, {"referenceID": 21, "context": "2008), PH-DPOP, AFB (Gershman et al. 2009), and ODPOP (Petcu and Faltings 2006).", "startOffset": 20, "endOffset": 42}, {"referenceID": 52, "context": "2009), and ODPOP (Petcu and Faltings 2006).", "startOffset": 17, "endOffset": 42}, {"referenceID": 60, "context": "simulated runtime metric (Sultanik et al. 2007).", "startOffset": 25, "endOffset": 47}, {"referenceID": 23, "context": "We conduct our experiments on random graphs (Erd\u00f6s and R\u00e9nyi 1959), where we systematically modify the domain-independent parameters, and on comprehensive optimization problems in power networks (Gupta et al. 2013).", "startOffset": 195, "endOffset": 214}, {"referenceID": 29, "context": ", load shedding, demand response, restoration) (Jain et al. 2012).", "startOffset": 47, "endOffset": 65}, {"referenceID": 15, "context": "Readers who are interested in such algorithms and computations can find further information in (Gebser et al. 2012; Kaufmann et al. 2016).", "startOffset": 95, "endOffset": 137}, {"referenceID": 31, "context": "Readers who are interested in such algorithms and computations can find further information in (Gebser et al. 2012; Kaufmann et al. 2016).", "startOffset": 95, "endOffset": 137}, {"referenceID": 14, "context": "Solving DCOPs with multiple variables per agent without transforming them to problems with a single variable per agent was also investigated in (Fioretto et al. 2016).", "startOffset": 144, "endOffset": 166}, {"referenceID": 22, "context": "A detailed analysis of privacy loss in DCOP for some existing DCOP algorithms, including DPOP, can be found in (Greenstadt et al. 2006).", "startOffset": 111, "endOffset": 135}, {"referenceID": 32, "context": "Starting with some seminal papers (Kowalski and Sadri 1999), various authors have explored the use of several different flavors of logic programming, such as normal logic programs and abductive logic programs, to address cooperation between agents (Kakas et al.", "startOffset": 34, "endOffset": 59}, {"referenceID": 30, "context": "Starting with some seminal papers (Kowalski and Sadri 1999), various authors have explored the use of several different flavors of logic programming, such as normal logic programs and abductive logic programs, to address cooperation between agents (Kakas et al. 2004; Sadri and Toni 2003; Gelfond and Watson 2007; De Vos et al. 2005).", "startOffset": 248, "endOffset": 333}, {"referenceID": 57, "context": "Starting with some seminal papers (Kowalski and Sadri 1999), various authors have explored the use of several different flavors of logic programming, such as normal logic programs and abductive logic programs, to address cooperation between agents (Kakas et al. 2004; Sadri and Toni 2003; Gelfond and Watson 2007; De Vos et al. 2005).", "startOffset": 248, "endOffset": 333}, {"referenceID": 18, "context": "Starting with some seminal papers (Kowalski and Sadri 1999), various authors have explored the use of several different flavors of logic programming, such as normal logic programs and abductive logic programs, to address cooperation between agents (Kakas et al. 2004; Sadri and Toni 2003; Gelfond and Watson 2007; De Vos et al. 2005).", "startOffset": 248, "endOffset": 333}, {"referenceID": 9, "context": "Some proposals have also explored the combination between constraint programming, logic programming, and formalization of multi-agent domains (Dovier et al. 2013; Vlahavas 2002; Dovier et al. 2010a; Dovier et al. 2010b).", "startOffset": 142, "endOffset": 219}, {"referenceID": 63, "context": "Some proposals have also explored the combination between constraint programming, logic programming, and formalization of multi-agent domains (Dovier et al. 2013; Vlahavas 2002; Dovier et al. 2010a; Dovier et al. 2010b).", "startOffset": 142, "endOffset": 219}, {"referenceID": 7, "context": "Some proposals have also explored the combination between constraint programming, logic programming, and formalization of multi-agent domains (Dovier et al. 2013; Vlahavas 2002; Dovier et al. 2010a; Dovier et al. 2010b).", "startOffset": 142, "endOffset": 219}, {"referenceID": 8, "context": "Some proposals have also explored the combination between constraint programming, logic programming, and formalization of multi-agent domains (Dovier et al. 2013; Vlahavas 2002; Dovier et al. 2010a; Dovier et al. 2010b).", "startOffset": 142, "endOffset": 219}, {"referenceID": 1, "context": "Logic programming has been used in modeling multi-agent scenarios involving agents knowledge about other\u2019s knowledge (Baral et al. 2010), computing models in the logics of knowledge (Pontelli et al.", "startOffset": 117, "endOffset": 136}, {"referenceID": 56, "context": "2010), computing models in the logics of knowledge (Pontelli et al. 2010), multi-agent planning (Son et al.", "startOffset": 51, "endOffset": 73}, {"referenceID": 59, "context": "2010), multi-agent planning (Son et al. 2009) and formalizing negotiation (Sakama et al.", "startOffset": 28, "endOffset": 45}, {"referenceID": 58, "context": "2009) and formalizing negotiation (Sakama et al. 2011).", "startOffset": 34, "endOffset": 54}, {"referenceID": 34, "context": "Existing DCOP algorithms that also propagate hard and soft constraints to prune the search space include H-DPOP that propagates exclusively hard constraints (Kumar et al. 2008), BrC-DPOP that propagates branch consistency (Fioretto et al.", "startOffset": 157, "endOffset": 176}, {"referenceID": 12, "context": "2008), BrC-DPOP that propagates branch consistency (Fioretto et al. 2014), and variants of BnB-ADOPT (Yeoh et al.", "startOffset": 51, "endOffset": 73}, {"referenceID": 64, "context": "2014), and variants of BnB-ADOPT (Yeoh et al. 2010; Gutierrez and Meseguer 2012b; Gutierrez et al. 2011) that maintains soft-arc consistency (Bessiere et al.", "startOffset": 33, "endOffset": 104}, {"referenceID": 25, "context": "2014), and variants of BnB-ADOPT (Yeoh et al. 2010; Gutierrez and Meseguer 2012b; Gutierrez et al. 2011) that maintains soft-arc consistency (Bessiere et al.", "startOffset": 33, "endOffset": 104}, {"referenceID": 26, "context": "2014), and variants of BnB-ADOPT (Yeoh et al. 2010; Gutierrez and Meseguer 2012b; Gutierrez et al. 2011) that maintains soft-arc consistency (Bessiere et al.", "startOffset": 33, "endOffset": 104}, {"referenceID": 2, "context": "2011) that maintains soft-arc consistency (Bessiere et al. 2012; Gutierrez and Meseguer 2012a; Gutierrez et al. 2013).", "startOffset": 42, "endOffset": 117}, {"referenceID": 28, "context": "One possibility is to use Constraint Logic Programming (CLP) (Jaffar and Maher 1994) instead of ASP.", "startOffset": 61, "endOffset": 84}, {"referenceID": 36, "context": "A preliminary investigation (Le et al. 2014) has shown that this technique can dramatically decrease run time.", "startOffset": 28, "endOffset": 44}], "year": 2017, "abstractText": "This paper explores the use of Answer Set Programming (ASP) in solving Distributed Constraint Optimization Problems (DCOPs). The paper provides the following novel contributions: (1) It shows how one can formulate DCOPs as logic programs; (2) It introduces ASP-DPOP, the first DCOP algorithm that is based on logic programming; (3) It experimentally shows that ASP-DPOP can be up to two orders of magnitude faster than DPOP (its imperative programming counterpart) as well as solve some problems that DPOP fails to solve, due to memory limitations; and (4) It demonstrates the applicability of ASP in a wide array of multi-agent problems currently modeled as DCOPs. Under consideration in Theory and Practice of Logic Programming (TPLP).", "creator": "LaTeX with hyperref package"}}}