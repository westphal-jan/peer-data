{"id": "0912.0224", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2009", "title": "A Multi-stage Probabilistic Algorithm for Dynamic Path-Planning", "abstract": "Probabilistic sampling methods have become very popular to solve single-shot path planning problems. Rapidly-exploring Random Trees (RRTs) in particular have been shown to be efficient in solving high dimensional problems. Even though several RRT variants have been proposed for dynamic replanning, these methods only perform well in environments with infrequent changes. This paper addresses the dynamic path planning problem by combining simple techniques in a multi-stage probabilistic algorithm. This algorithm uses RRTs for initial planning and informed local search for navigation. We show that this combination of simple techniques provides better responses to highly dynamic environments than the RRT extensions.", "histories": [["v1", "Tue, 1 Dec 2009 20:55:01 GMT  (136kb,D)", "http://arxiv.org/abs/0912.0224v1", "7 pages, 5 figures. Presented in Ingelectra 2009 conference"]], "COMMENTS": "7 pages, 5 figures. Presented in Ingelectra 2009 conference", "reviews": [], "SUBJECTS": "cs.AI cs.RO", "authors": ["nicolas a barriga", "mauricio araya-l\\'opez"], "accepted": false, "id": "0912.0224"}, "pdf": {"name": "0912.0224.pdf", "metadata": {"source": "CRF", "title": "A Multi-stage Probabilistic Algorithm for Dynamic Path-Planning", "authors": ["Nicolas A. Barriga", "Mauricio Araya-L\u00f3pez"], "emails": ["nbarriga@inf.utfsm.cl", "mauricio.araya@loria.fr"], "sections": [{"heading": null, "text": "In fact, the fact is that most of them will be able to be in a position without being able to see themselves in a position to play by the rules."}, {"heading": "II. PREVIOUS AND RELATED WORK", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. Rapidly-Exploring Random Tree", "text": "One of the most successful probabilistic scanning methods for offline path planning currently in use is the rapidlyexploring Random Tree (RRT), a single static environment query scheduler first introduced in [9]. RRRTs work to find a continuous path from a state qinit to a state qgoal in the free configuration space Cfree by building a tree that is rooted in qinit. A new state qrand is randomly scanned from the configuration space C. Then the next Xiv: 091 2.02 24v1 [cs.AI] 1D ec2 009node, qnear, is located in the tree, and if qrand and the shortest path from qrand to qnear lie in Cfree, then qrand is added to the tree. Tree growth is stopped when a node is found near qgoal. To speed up convergence, the border search is switched to a low probability qnear."}, {"heading": "B. ERRT", "text": "The extension of the RRT introduced in [3] introduces two extensions of the RRT to form an online planner: the waypoint cache and the adaptive search for costs, which improves the efficiency of the replanning and the quality of the generated paths. The waypoint cache is implemented by maintaining a constant state arrangement, and when a plan is found, all states of the plan are cached by random substitution. If the tree is then no longer valid, a new tree must be grown, and there are three options for selecting a new target state. With the probability P [target] the target is selected as the target, with the probability P [waypoint] a random waypoint is chosen, and with the remaining probability a uniform state as before. The values used in [3] are P [target] = 0.1 and P [waypoint] = 0.6. In the other extension - the adaptive cost penalty search - the planner dynamically modifies a parameter to help him find shorter paths."}, {"heading": "C. Dynamic RRT", "text": "The Dynamic Rapid-Exploring Random Tree (DRRT) described in [4] is a probabilistic analogy to the widely used D * family of algorithms. It works by allowing a tree to grow from qgoal to qinit. The main advantage is that the root of the tree does not need to be changed during the life of the design and execution. In addition, in some problem classes, the robot has sensors with limited reach, which typically place obstacles (or new ones) near the robot and not near the target. Generally, this strategy attempts to cut smaller branches and farther from the root. When new information arrives about the configuration space, the algorithm removes the newly invalid branches of the tree and lets the remaining tree focus with a certain probability (empirically at 0.4 in [4]), using a structure similar to the waypoint of the ERRT cache."}, {"heading": "D. MP-RRT", "text": "The multipartite RRT introduced in [14] is another RRT variant that supports planning in unknown or dynamic environments. MP-RRT maintains a forest of disconnected sub-trees that are located in Cfree but not connected to the root node qroot of T, the main tree. At the beginning of a given planning iteration, all nodes of T and F that are no longer valid are deleted, and all resulting unconnected sub-trees are placed in F. With given probabilities, the algorithm tries to connect T to a new random state, to the target state, or to the root of a tree in F. In [14], a simple greedy smoothing of heuristics is used, which attempts to shorten paths by skipping intermediate nodes. MP-RRT is compared to an iterated RRT, ERRT, and DRRT, in 2D, 3D, and 4D problems, with and without smoothing, but for most of the RMP-RRT experiments, the larger RMP-RRT concept is the RMP-RRT concept, but for the other RMP-RRT experiments is the RMP-4D concept."}, {"heading": "III. A MULTI-STAGE PROBABILISTIC ALGORITHM", "text": "In highly dynamic environments with many (or few, but fast) relatively small moving obstacles, renewable trees are pruned too quickly, removing important parts of the trees before they can be replaced, drastically reducing the performance of the algorithms and making them unsuitable for these kinds of problems. We believe that better performance could be achieved by slightly modifying an RRT solution by performing simple obstacle avoidance operations at the new collision points through informed local searches, and then greedily optimizing the path once the path has reached the feasibility condition."}, {"heading": "A. Problem Formulation", "text": "In any time step, the proposed problem could be defined as an optimization problem with satisfaction limitations. Formally, our goal is to minimize a sequence of points in which pi-Rn counts an n-dimensional point (p1 = qinit, pn = qgoal), Ot-O the amount of obstacle positions in due time t, and evaluation: Rn \u00b7 O 7 \u2192 R an evaluation function of the path depending on the object positions. Then, our ideal goal is to obtain the optimal p-path that minimizes our evaluation function within a limitation of feasibility, namely in the formality."}, {"heading": "B. A Multi-stage Probabilistic Strategy", "text": "Solving Equation 1 is not an easy task in static environments, solving dynamic versions proves even more difficult. In dynamic route planning, we cannot wait for the optimal solution to be achieved because we need to submit a \"sufficiently good\" plan within some time. Then, a heuristic approach needs to be developed to address the online nature of the problem. heuristic algorithms presented in Sections II-B, II-C and II-D. extend a method designed for static environments that produce a poor response to highly dynamic environments and an unwanted complexity of algorithms. We propose a multi-level combination of three simple heuristic probability techniques to solve each part of the problem."}, {"heading": "C. Algorithm Implementation", "text": "The first step in path planning (see algorithm 2) is to find a first path using an RRT technique, ignoring any intersections that might occur during environmental updates. Thus, the RRT ensures that the path found does not collide with static obstacles, but could collide with dynamic obstacles in the future. If a first path is found, navigation is performed by alternating a simple informed local search with simple greedy heuristics as shown in Figure 1 Algorithm."}, {"heading": "IV. EXPERIMENTS AND RESULTS", "text": "The multi-step strategy proposed here is designed to navigate through highly dynamic environments, and therefore our experiments should be geared to this purpose.Algorithm 4. mut (path, FirstCol) Required: Environment \u2190 some environments1: path [FirstCol] [X] + = random (\u2212 environment, environment) 2: path [FirstCol] [Y] + = random (\u2212 environment, environment) 3: if path segments before and after path [FirstCol] are collision-free then 4: accept new point 5: otherwise 6: reject new point algorithm.PostProcess (path) 1: i \u2190 0 2: while i < path () -2 3: if segment path [i] to path [i + 2] is collision-free then 4: delete path [i + 1] 5: otherwise 6: i \u2190 i + 1Therefore, we tested our algorithm in two highly dynamic MP situations that represent both business environments."}, {"heading": "A. Experimental Setup", "text": "The first environment for our experiments consists of a map with 30 moving obstacles of the same size of the robot, with a random speed between 10% and 55% the speed of the robot. This dynamic environment is shown in Figure 4.The second environment uses the same map, but with six obstacles, three to four times the size of the robot, appears at a predefined time and position. This partially known environment is shown in Figure 5.The three algorithms were executed a hundred times in each environment. The cutoff time was five minutes for the first environment and one minute for the second, after which the robot was deemed not to have reached the target. B. Implementation detailsThe algorithms in which was implemented in C + + +, with a frame 3 developed by the same authorities. There are several variants that can be found in the literature when implementing RRTs. For all of our RRT variants, the following are the details on where we deviate from the basics: \u2022 We always use two trees rooted in the collision function and we do not have TEND when we are EXLIST."}, {"heading": "C. Dynamic Environment Results", "text": "The results in Table I show that our algorithm takes about a third of the time to reach its destination with DRRT and MP-RRT, with far fewer collision controls. It was expected that the search for the nearest neighbor in the multi-stage algorithm would be much less than in the other two, because they are performed only in the RRT phase, not during navigation. However, the multi-stage algorithm seems to be somewhat less reliable, as it has reached its destination 98 out of 100 times, while the other two have always managed to arrive."}, {"heading": "D. Partially Known Environment Results", "text": "The results in Table II show that our multi-level algorithm is very unreliable, albeit faster than the other two, when it actually achieves the goal. Due to the simplicity of our local search, and that it basically circumvents obstacles only by stepping aside or removing the obstacle when the changes in the environment are significant and obstacles are not moving, it is very prone to getting stuck."}, {"heading": "V. CONCLUSIONS", "text": "The new multi-level algorithm proposed here performs very well in very dynamic environments. It performs particularly well when several small obstacles appear to move arbitrarily, and its major drawback is that it can easily get stuck when significant changes are made to the environment, such as large static obstacles appearing near the robot - a situation that is normally considered to be partially known."}, {"heading": "A. Future Work", "text": "There are several areas of improvement for the work presented in this paper. Firstly, the multi-level algorithm must detect a situation in which it is stuck, and restart an RRT from its current location before proceeding with the navigation phase. Recognition could be as simple as recognizing that the robot has not moved out of a particular environment for a certain period of time, or that the next collision on the planned path has encountered the same obstacle for a certain period of time, which means that the local search could not find a way around it. This will produce a much more reliable algorithm in different environments. A second area of improvement is experimentation with various online planners, such as the EP / N presented in [13], a modified version of the EvP ([1] and [2]), to work in a continuous configuration space or a potential field navigator."}], "references": [{"title": "An On-the-fly Evolutionary Algorithm for Robot Motion Planning", "author": ["T. Alfaro", "M. Riff"], "venue": "Lecture Notes in Computer Science,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2005}, {"title": "An Evolutionary Navigator for Autonomous Agents on Unknown Large-Scale Environments", "author": ["T. Alfaro", "M. Riff"], "venue": "INTELLIGENT AUTOMATION AND SOFT COMPUTING,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "Real-time randomized path planning for robot navigation", "author": ["J. Bruce", "M. Veloso"], "venue": "Intelligent Robots and System,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2002}, {"title": "Replanning with rrts", "author": ["D. Ferguson", "N. Kalra", "A. Stentz"], "venue": "Robotics and Automation,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "Gross motion planning\u2014a survey", "author": ["Y.K. Hwang", "N. Ahuja"], "venue": "ACM Comput. Surv.,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1992}, {"title": "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", "author": ["L. Kavraki", "P. Svestka", "J.-C. Latombe", "M. Overmars"], "venue": "Robotics and Automation, IEEE Transactions on,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1996}, {"title": "Rrt-connect: An efficient approach to single-query path planning", "author": ["J.J.J. Kuffner", "S. LaValle"], "venue": "Robotics and Automation,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "Rapidly-exploring random trees: A new tool for path planning", "author": ["S.M. Lavalle"], "venue": "Technical report,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1998}, {"title": "An incremental learning approach to motion planning with roadmap management", "author": ["T.-Y. Li", "Y.-C. Shie"], "venue": "Robotics and Automation,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2002}, {"title": "Optimal and efficient path planning for partiallyknownenvironments", "author": ["A. Stentz"], "venue": "IEEE International Conference on Robotics and Automation,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1994}, {"title": "The Focussed D\u02c6* Algorithm for Real-Time Replanning", "author": ["A. Stentz"], "venue": "In International Joint Conference on Artificial Intelligence,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1995}, {"title": "Adaptive evolutionary planner/navigator for mobile robots", "author": ["J. Xiao", "Z. Michalewicz", "L. Zhang", "K. Trojanowski"], "venue": "Evolutionary Computation, IEEE Transactions on,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1997}, {"title": "Multipartite rrts for rapid replanning in dynamic environments", "author": ["M. Zucker", "J. Kuffner", "M. Branicky"], "venue": "Robotics and Automation,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2007}], "referenceMentions": [{"referenceID": 4, "context": "The dynamic path-planning problem consists in finding a suitable plan for each new configuration of the environment by recomputing a free-collision path using the new information available at each time step [5].", "startOffset": 207, "endOffset": 210}, {"referenceID": 10, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 120, "endOffset": 124}, {"referenceID": 9, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 158, "endOffset": 162}, {"referenceID": 5, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 202, "endOffset": 205}, {"referenceID": 10, "context": "We will focus on continuous space algorithms and won\u2019t consider algorithms that use discretized representations of the configuration space, such as D* [12], because for high dimensional problems, the configuration space becomes intractable in terms of both memory and computation time, and there is the extra difficulty of calculating the discretization size, trading off accuracy versus computational cost.", "startOffset": 151, "endOffset": 155}, {"referenceID": 7, "context": "One of the most successful probabilistic sampling methods for offline path planning currently in use, is the Rapidlyexploring Random Tree (RRT), a single-query planner for static environments, first introduced in [9].", "startOffset": 213, "endOffset": 216}, {"referenceID": 6, "context": "In [7], two new features are added to RRTs.", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "The execution extended RRT presented in [3] introduces two RRTs extensions to build an on-line planner: the waypoint cache and the adaptive cost penalty search, which improves re-planning efficiency and the quality of generated paths.", "startOffset": 40, "endOffset": 43}, {"referenceID": 2, "context": "Values used in [3] are P[goal]= 0.", "startOffset": 15, "endOffset": 18}, {"referenceID": 2, "context": "Unfortunately, the solution presented in [3] lacks of implementation details and experimental results on this extension.", "startOffset": 41, "endOffset": 44}, {"referenceID": 3, "context": "The Dynamic Rapidly-exploring Random Tree (DRRT) described in [4] is a probabilistic analog to the widely used", "startOffset": 62, "endOffset": 65}, {"referenceID": 3, "context": "4 in [4]) to a vicinity", "startOffset": 5, "endOffset": 8}, {"referenceID": 12, "context": "The Multipartite RRT presented in [14] is another RRT variant which supports planning in unknown or dynamic environments.", "startOffset": 34, "endOffset": 38}, {"referenceID": 12, "context": "In [14], a simple greedy smoothing heuristic is used, that tries to shorten paths by skipping intermediate nodes.", "startOffset": 3, "endOffset": 7}, {"referenceID": 8, "context": "Another algorithm that utilizes the concept of forests is the Reconfigurable Random Forests (RRF) presented in [10], but without the success of MP-RRT.", "startOffset": 111, "endOffset": 115}, {"referenceID": 11, "context": "Trying to produce feasible paths from scratch with local search (or even with evolutionary algorithms [13]) is not a good idea due the randomness of the initial solution.", "startOffset": 102, "endOffset": 106}, {"referenceID": 11, "context": "The mutation operator is inspired by the ones used in the Adaptive Evolutionary Planner/Navigator(EP/N) presented in [13], while the arc operator is derived from the arc operator in the Evolutionary Algorithm presented in [1].", "startOffset": 117, "endOffset": 121}, {"referenceID": 0, "context": "The mutation operator is inspired by the ones used in the Adaptive Evolutionary Planner/Navigator(EP/N) presented in [13], while the arc operator is derived from the arc operator in the Evolutionary Algorithm presented in [1].", "startOffset": 222, "endOffset": 225}, {"referenceID": 6, "context": "\u2022 In each iteration, we try to add the new randomly generated point to both trees, and if successful in both, the trees are merged, as proposed in [7].", "startOffset": 147, "endOffset": 150}, {"referenceID": 12, "context": "proposed in [14].", "startOffset": 12, "endOffset": 16}, {"referenceID": 3, "context": "4 as suggested in [4].", "startOffset": 18, "endOffset": 21}, {"referenceID": 12, "context": "1 as suggested in [14].", "startOffset": 18, "endOffset": 22}, {"referenceID": 11, "context": "A second area of improvement is to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 108, "endOffset": 112}, {"referenceID": 0, "context": "A second area of improvement is to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 135, "endOffset": 138}, {"referenceID": 1, "context": "A second area of improvement is to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 143, "endOffset": 146}], "year": 2009, "abstractText": "Probabilistic sampling methods have become very popular to solve single-shot path planning problems. Rapidlyexploring Random Trees (RRTs) in particular have been shown to be efficient in solving high dimensional problems. Even though several RRT variants have been proposed for dynamic replanning, these methods only perform well in environments with infrequent changes. This paper addresses the dynamic path planning problem by combining simple techniques in a multi-stage probabilistic algorithm. This algorithm uses RRTs for initial planning and informed local search for navigation. We show that this combination of simple techniques provides better responses to highly dynamic environments than the RRT extensions. Keywords-artificial intelligence; motion planning; RRT; Multi-stage; local search; greedy heuristics;", "creator": "LaTeX with hyperref package"}}}