{"id": "0912.0266", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2009", "title": "Combining a Probabilistic Sampling Technique and Simple Heuristics to solve the Dynamic Path Planning Problem", "abstract": "Probabilistic sampling methods have become very popular to solve single-shot path planning problems. Rapidly-exploring Random Trees (RRTs) in particular have been shown to be very efficient in solving high dimensional problems. Even though several RRT variants have been proposed to tackle the dynamic replanning problem, these methods only perform well in environments with infrequent changes. This paper addresses the dynamic path planning problem by combining simple techniques in a multi-stage probabilistic algorithm. This algorithm uses RRTs as an initial solution, informed local search to fix unfeasible paths and a simple greedy optimizer. The algorithm is capable of recognizing when the local search is stuck, and subsequently restart the RRT. We show that this combination of simple techniques provides better responses to a highly dynamic environment than the dynamic RRT variants.", "histories": [["v1", "Tue, 1 Dec 2009 21:03:49 GMT  (164kb,D)", "http://arxiv.org/abs/0912.0266v1", "8 pages, 7 figures. Presented at the XXVIII International Conference of the Chilean Computer Society 2009"]], "COMMENTS": "8 pages, 7 figures. Presented at the XXVIII International Conference of the Chilean Computer Society 2009", "reviews": [], "SUBJECTS": "cs.AI cs.RO", "authors": ["nicolas a barriga", "mauricio araya-l\\'opez", "mauricio solar"], "accepted": false, "id": "0912.0266"}, "pdf": {"name": "0912.0266.pdf", "metadata": {"source": "CRF", "title": "Combining a Probabilistic Sampling Technique and Simple Heuristics to solve the Dynamic Path Planning Problem", "authors": ["Nicolas A. Barriga", "Mauricio Solar", "Mauricio Araya-L\u00f3pez"], "emails": ["nbarriga@inf.utfsm.cl", "msolar@inf.utfsm.cl", "mauricio.araya@loria.fr"], "sections": [{"heading": null, "text": "Index Terms artificial intelligence; movement planning; RRT; multilevel; local search; greedy heuristics; probabilistic sampling;"}, {"heading": "1. Introduction", "text": "In this context, it should be noted that both are very complex issues, and it is a very complex issue."}, {"heading": "2. Previous and Related Work", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1. Rapidly-Exploring Random Tree", "text": "One of the most successful probabilistic scanning methods for offline path planning currently used is the Fast Exploring Random Tree (RRT), a single query scheduler for static environments that was first introduced in [9]. RRT work to find a continuous path from a state qinit to a state qgoal in the free configuration space Cfree by building a tree rooted in qinit. A new state qrand is uniformly randomly scanned from the configuration space C. Then, the next node qnear is located in the tree, and if qrand and the shortest path from qrand to qnear lie in Cfree, then qrand is added to the tree. Tree growth is stopped when a node is found near qgoal. To speed up convergence, the search is usually distorted to qgoal with a low probability. In [7], two new features are added to RRTs. First, the EXTEND function is used to try to achieve the most time, rather than the other is to introduce the END."}, {"heading": "2.2. ERRT", "text": "The extension of the RRT introduced in [3] introduces two extensions of the RRT to form an online planner: the waypoint cache and the adaptive search for cost penalties, which improves the efficiency of rescheduling and the quality of the generated paths. The waypoint cache is implemented by maintaining a constant state arrangement, and when a plan is found, all states of the plan are cached by random substitution. If the tree is then no longer valid, a new tree must be grown, and there are three options for selecting a new target state. With the probability P [target] is chosen as the target, with the probability P [waypoint] a random waypoint is chosen, and with the remaining probability a uniform state as before. The values used in [3] are P [target] = 0.1 and P [waypoint] = 0.6. In the other extension - the adaptive cost penalty search - the planner dynamically modifies a parameter to help him find shorter paths."}, {"heading": "2.3. Dynamic RRT", "text": "The Dynamic Rapid-Exploring Random Tree (DRRT) described in [4] is a probabilistic analogy to the widely used D * family of algorithms. It works by allowing a tree to grow from qgoal to qinit. The main advantage is that the root of the tree does not need to be changed during the life of the design and execution. In addition, in some problem classes, the robot has sensors with limited reach, which typically place obstacles (or new ones) near the robot and not near the target. Generally, this strategy attempts to cut smaller branches and farther from the root. When new information enters the configuration space, the algorithm removes the newly invalid branches of the tree and lets the remaining tree focus with some probability (empirically at 0.4 in [4]) using a structure similar to the waypoint of the ERRT cache."}, {"heading": "2.4. MP-RRT", "text": "The multipartite RRT introduced in [14] is another RRT variant that supports planning in unknown or dynamic environments. MP-RRT maintains a forest of disconnected sub-trees that are located in Cfree but not connected to the root node qroot of T, the main tree. At the beginning of a given planning iteration, all nodes of T and F that are no longer valid are deleted, and all resulting unconnected sub-trees are placed in F. With given probabilities, the algorithm tries to connect T to a new random state, to the target state, or to the root of a tree in F. In [14], a simple greedy smoothing of heuristics is used, which attempts to shorten paths by skipping intermediate nodes. MP-RRT is compared to an iterated RRT, ERRT, and DRRT, in 2D, 3D, and 4D problems, with and without smoothing, but for most of the RMP-RRT experiments, the larger RMP-RRT concept is the RMP-RRT concept, but for the other RMP-RRT experiments is the RMP-4D concept."}, {"heading": "3. A Multi-stage Probabilistic Algorithm", "text": "In highly dynamic environments with many (or few, but fast) relatively small moving obstacles, renewable trees are pruned too quickly, removing important parts of the trees before they can be replaced, drastically reducing the performance of the algorithms and making them unsuitable for these kinds of problems. We believe that better performance could be achieved by slightly modifying an RRT solution by performing simple obstacle avoidance operations at the new collision points through informed local searches, and then greedily optimizing the path once the path has reached the feasibility condition."}, {"heading": "3.1. Problem Formulation", "text": "At any time step, the proposed problem could be defined as an optimization problem with satisfaction constraints. Formally, our goal is to minimize a sequence of points (i.e. distance, time or waypoints), with the Cfree constraint. Formally, we leave the path \u03c1 = p1p2... pn a sequence of points where pi-Rn balances an n-dimensional point (p1 = qinit, pn = qgoal), Ot-O the set of obstacle positions in due time t, and rating: Rn \u00b7 O 7 \u2192 R an evaluation function of the path depending on the object positions. Then, our ideal goal is to obtain the optimal p \u2212 path, which minimizes our evaluation function within a feasibility constraint in which formal, formal, administrative, Ot, administrative, [evaluation, Ot] with Feas (\u03c1, Ot) = Cfree (1) as a feasibility (\u00b7 path, a \u00b7 v, which is very suitable for this object)."}, {"heading": "3.2. A Multi-stage Probabilistic Strategy", "text": "Solving Equation 1 is not an easy task in static environments, solving dynamic versions is proving even more difficult. In dynamic route planning, we cannot wait for the optimal solution to be achieved because we need to submit a \"sufficiently good\" plan within a certain time. Then, a heuristic approach needs to be developed to address the online nature of the problem. heuristic algorithms presented in Sections 2.2, 2.3 and 2.4 expand a method designed for static environments that produce a poor response to highly dynamic environments and an unwanted complexity of algorithms. We propose a multi-level combination of three simple heuristic probability techniques to solve each part of the problem."}, {"heading": "3.3. Algorithm Implementation", "text": "The first step in path planning (see algorithm 2) is to find an initial path using an RRT technique, ignoring any intersections that might occur during environmental updates. Thus, the RRT ensures that the path found does not collide with static obstacles, but could collide with dynamic obstacles in the future. If a first path is found, navigation is done by alternating a simple informed local search with simple greedy heuristics as shown in Figure 1. Algorithm."}, {"heading": "4. Experiments and Results", "text": "The multi-level strategy proposed here is designed to navigate through highly dynamic environments, and therefore our experiments should be geared to this purpose. Therefore, in a highly dynamic situation, we tested our algorithm on two maps shown in Figures 4 and 5. For completeness, we tested on the same two maps, but modified to be a partially known environment. In addition, we ran the DRRT and MP-RRT algorithms over the same situations to compare the performance of our proposal."}, {"heading": "4.1. Experimental Setup", "text": "The first environment for our experiments consists of two maps with 30 moving obstacles of the same size of the robot, with a random speed between 10% and 55% of the speed of the robot. These dynamic environments are shown in Figures 4 and 5. The second environment uses the same maps, but with a few obstacles, three to four times the speed of the robot, which are visible when the robot approaches them. These partially known environments are shown in Figures 6 and 7. The three algorithms were performed a hundred times in each environment. Cut-off time was five minutes for all tests after which the robot was deemed not to have reached the target. Results are presented in terms of: \u2022 Success rate: the percentage of times in which the robots reached the target \u2022 Number of closest investigations carried out by each algorithm (N.N.): one of the possible bottlenecks in construction-based algorithms \u2022 Number of collision controls carried out (C.C.), which, in our specific implementation, take a significant percentage of the running time required for the robot to achieve."}, {"heading": "4.2. Implementation Details", "text": "There are several variations that can be found in the literature when implementing RRTs. For all of our RRT3. MoPa homepage: https: / / csrg.inf.utfsm.cl / twiki4 / bin / view / CSRG / MoPavariants, the following are the details of where we deviated from the basics: \u2022 We always use two trees rooted in qinit and qgoal. \u2022 Our EXTEND function, if the point cannot be added to a tree without collisions, adds the center point between the next tree node and the next collision point to it. \u2022 In each iteration we try to add the new randomly generated point to both trees, and if it succeeds in both, the trees are merged as suggested in [7]."}, {"heading": "4.3. Dynamic Environment Results", "text": "The results in Tables 1 and 2 show that our algorithm takes considerably less time than DRRT and MP-RRT to reach its destination, with far fewer collision controls. It was expected that the search for the nearest neighbors in the multi-stage algorithm would be much less than in the other two, because it is performed only in the initial phase and not during navigation."}, {"heading": "4.4. Partially Known Environment Results", "text": "The results in Tables 3 and 4 show that our multi-level algorithm, although designed for dynamic environments, is faster than the other two even in a partially known environment, although not as strong as in previous cases."}, {"heading": "5. Conclusions", "text": "The new multi-level algorithm proposed here works very well in very dynamic environments. It performs particularly well when several small obstacles seem to move randomly. This is explained by the fact that the obstacles, when they are constantly moving, sometimes move out of the way by themselves, which our algorithm exploits, but the obstacles based on the RRT do not, but simply drop branches of the tree, which could be useful again a few moments later. In partially known environments, the multi-level algorithm outperforms the RRT variants, but the difference is not as great as in dynamic environments."}, {"heading": "5.1. Future Work", "text": "The most promising seems to be experimenting with various online planners, such as the EP / N presented in [13], a version of the EvP ([1] and [2]) that has been modified to work in a continuous configuration space or a potential field navigator, and the local search presented here could also benefit from the use of more complex operators. Another area of research that could be tackled is the extension of this algorithm to other types of environments, from fully known and very dynamic environments to static, partially known or unknown environments. Extending it to higher dimensional problems would be a logical way, as RRTs are known to work well in higher dimensions. Finally, since RRTs are suitable for kinodynamic planning, we just need to adjust the online level of the algorithm to have a new multi-level planner for problems with kinodynamic constraints."}], "references": [{"title": "An On-the-fly Evolutionary Algorithm for Robot Motion Planning", "author": ["T. Alfaro", "M. Riff"], "venue": "Lecture Notes in Computer Science,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2005}, {"title": "An Evolutionary Navigator for Autonomous Agents on Unknown Large-Scale Environments", "author": ["T. Alfaro", "M. Riff"], "venue": "INTELLIGENT AUTOMATION AND SOFT COMPUTING,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "Real-time randomized path planning for robot navigation", "author": ["J. Bruce", "M. Veloso"], "venue": "Intelligent Robots and System,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2002}, {"title": "Replanning with rrts", "author": ["D. Ferguson", "N. Kalra", "A. Stentz"], "venue": "Robotics and Automation,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "Gross motion planning\u2014a survey", "author": ["Y.K. Hwang", "N. Ahuja"], "venue": "ACM Comput. Surv.,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1992}, {"title": "Probabilistic roadmaps for path planning in highdimensional configuration spaces", "author": ["L. Kavraki", "P. Svestka", "J.-C. Latombe", "M. Overmars"], "venue": "Robotics and Automation, IEEE Transactions on,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1996}, {"title": "Rrt-connect: An efficient approach to single-query path planning", "author": ["J.J.J. Kuffner", "S. LaValle"], "venue": "Robotics and Automation,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "Rapidly-exploring random trees: A new tool for path planning", "author": ["S.M. Lavalle"], "venue": "Technical report,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1998}, {"title": "An incremental learning approach to motion planning with roadmap management", "author": ["T.-Y. Li", "Y.-C. Shie"], "venue": "Robotics and Automation,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2002}, {"title": "Optimal and efficient path planning for partially-knownenvironments", "author": ["A. Stentz"], "venue": "IEEE International Conference on Robotics and Automation,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1994}, {"title": "The Focussed D\u02c6* Algorithm for Real- Time Replanning", "author": ["A. Stentz"], "venue": "In International Joint Conference on Artificial Intelligence,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1995}, {"title": "Adaptive evolutionary planner/navigator for mobile robots", "author": ["J. Xiao", "Z. Michalewicz", "L. Zhang", "K. Trojanowski"], "venue": "Evolutionary Computation, IEEE Transactions on,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1997}, {"title": "Multipartite rrts for rapid replanning in dynamic environments", "author": ["M. Zucker", "J. Kuffner", "M. Branicky"], "venue": "Robotics and Automation,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2007}], "referenceMentions": [{"referenceID": 4, "context": "The dynamic path-planning problem consists in finding a suitable plan for each new configuration of the environment by recomputing a collision free path using the new information available at each time step [5].", "startOffset": 207, "endOffset": 210}, {"referenceID": 10, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 120, "endOffset": 124}, {"referenceID": 9, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 158, "endOffset": 162}, {"referenceID": 5, "context": "The problem has been addressed widely in its several flavors, such as cellular decomposition of the configuration space [12], partial environmental knowledge [11], high-dimensional configuration spaces [6] or planning with non-holonomic constraints [8].", "startOffset": 202, "endOffset": 205}, {"referenceID": 10, "context": "We will focus on continuous space algorithms and won\u2019t consider algorithms that use discretized representations of the configuration space, such as D* [12], because for high dimensional problems, the configuration space becomes intractable in terms of both memory and computation time, and there is the extra difficulty of calculating the discretization size, trading off accuracy versus computational cost.", "startOffset": 151, "endOffset": 155}, {"referenceID": 7, "context": "One of the most successful probabilistic sampling methods for offline path planning currently in use, is the Rapidly-exploring Random Tree (RRT), a singlequery planner for static environments, first introduced in [9].", "startOffset": 213, "endOffset": 216}, {"referenceID": 6, "context": "In [7], two new features are added to RRTs.", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "The execution extended RRT presented in [3] introduces two RRTs extensions to build an on-line planner: the waypoint cache and the adaptive cost penalty search, which improves re-planning efficiency and the quality of generated paths.", "startOffset": 40, "endOffset": 43}, {"referenceID": 2, "context": "Values used in [3] are P[goal]= 0.", "startOffset": 15, "endOffset": 18}, {"referenceID": 2, "context": "Unfortunately, the solution presented in [3] lacks of implementation details and experimental results on this extension.", "startOffset": 41, "endOffset": 44}, {"referenceID": 3, "context": "The Dynamic Rapidly-exploring Random Tree (DRRT) described in [4] is a probabilistic analog to the widely used D* family of algorithms.", "startOffset": 62, "endOffset": 65}, {"referenceID": 3, "context": "4 in [4]) to a vicinity of the recently trimmed branches, by using the a similar structure to the waypoint cache of the ERRT.", "startOffset": 5, "endOffset": 8}, {"referenceID": 12, "context": "The Multipartite RRT presented in [14] is another RRT variant which supports planning in unknown or dynamic environments.", "startOffset": 34, "endOffset": 38}, {"referenceID": 12, "context": "In [14], a simple greedy smoothing heuristic is used, that tries to shorten paths by skipping intermediate nodes.", "startOffset": 3, "endOffset": 7}, {"referenceID": 8, "context": "Another algorithm that utilizes the concept of forests is the Reconfigurable Random Forests (RRF) presented in [10], but without the success of MP-RRT.", "startOffset": 111, "endOffset": 115}, {"referenceID": 11, "context": "Trying to produce feasible paths from scratch with local search (or even with evolutionary algorithms [13]) is not a good idea due the randomness of the initial solution.", "startOffset": 102, "endOffset": 106}, {"referenceID": 11, "context": "The mutation operator is inspired by the ones used in the Adaptive Evolutionary Planner/Navigator(EP/N) presented in [13], while the arc operator is derived from the arc operator in the Evolutionary Algorithm presented in [1].", "startOffset": 117, "endOffset": 121}, {"referenceID": 0, "context": "The mutation operator is inspired by the ones used in the Adaptive Evolutionary Planner/Navigator(EP/N) presented in [13], while the arc operator is derived from the arc operator in the Evolutionary Algorithm presented in [1].", "startOffset": 222, "endOffset": 225}, {"referenceID": 6, "context": "\u2022 In each iteration, we try to add the new randomly generated point to both trees, and if successful in both, the trees are merged, as proposed in [7].", "startOffset": 147, "endOffset": 150}, {"referenceID": 12, "context": "\u2022 We found that there are significant performance differences with allowing or not the robot to advance towards the node nearest to the goal when the trees are disconnected, as proposed in [14].", "startOffset": 189, "endOffset": 193}, {"referenceID": 3, "context": "4 as suggested in [4].", "startOffset": 18, "endOffset": 21}, {"referenceID": 12, "context": "1 as suggested in [14].", "startOffset": 18, "endOffset": 22}, {"referenceID": 11, "context": "The most promising seems to be to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 107, "endOffset": 111}, {"referenceID": 0, "context": "The most promising seems to be to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 134, "endOffset": 137}, {"referenceID": 1, "context": "The most promising seems to be to experiment with different on-line planners such as the EP/N presented in [13], a version of the EvP([1] and [2]) modified to work in continuous configuration space or a potential field navigator.", "startOffset": 142, "endOffset": 145}], "year": 2009, "abstractText": "Probabilistic sampling methods have become very popular to solve single-shot path planning problems. Rapidly-exploring Random Trees (RRTs) in particular have been shown to be very efficient in solving high dimensional problems. Even though several RRT variants have been proposed to tackle the dynamic replanning problem, these methods only perform well in environments with infrequent changes. This paper addresses the dynamic path planning problem by combining simple techniques in a multi-stage probabilistic algorithm. This algorithm uses RRTs as an initial solution, informed local search to fix unfeasible paths and a simple greedy optimizer. The algorithm is capable of recognizing when the local search is stuck, and subsequently restart the RRT. We show that this combination of simple techniques provides better responses to a highly dynamic environment than the dynamic RRT variants.", "creator": "LaTeX with hyperref package"}}}