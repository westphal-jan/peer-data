{"id": "0912.0270", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2009", "title": "Single-Agent On-line Path Planning in Continuous, Unpredictable and Highly Dynamic Environments", "abstract": "This document is a thesis on the subject of single-agent on-line path planning in continuous,unpredictable and highly dynamic environments. The problem is finding and traversing a collision-free path for a holonomic robot, without kinodynamic restrictions, moving in an environment with several unpredictably moving obstacles or adversaries. The availability of perfect information of the environment at all times is assumed.", "histories": [["v1", "Tue, 1 Dec 2009 21:13:36 GMT  (355kb,D)", "http://arxiv.org/abs/0912.0270v1", "54 pages, Master of Science in Informatics Engineering thesis"]], "COMMENTS": "54 pages, Master of Science in Informatics Engineering thesis", "reviews": [], "SUBJECTS": "cs.AI cs.RO", "authors": ["nicolas a barriga"], "accepted": false, "id": "0912.0270"}, "pdf": {"name": "0912.0270.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Arturo Barriga Richards", "John Atkinson (UdeC", "Terry Pratchett"], "emails": [], "sections": [{"heading": null, "text": "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIso - ChileSINGLE - AGENT ON-LINE PATH PLANNINGIN CONTINUOUS, UNPREDICTABLE ANDHIGHLY DYNAMIC ENVIRONMENTSTesis presentada como requerimiento parcialpara optar al grado acade - mico deMAGI - STER EN CIENCIAS DE LA INGENIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII"}, {"heading": "Acknowledgments", "text": "A mis hermanos, por quienes he tratado de ser una mejor persona, para ser un buen ejemplo para ellos. A mis padres, de quienes herede \"lo que soy,\" tanto en cuerpo como en esp \"\u0131ritu. A mis abuelos y abuelas, especialmente mi Opapa, de quienes aprend\" \u0131 a disfrutar la vida, y mi Tata, quien me ensen \"o\" el valor de la familia.Quiero tambie \"n agradecer a los que hicieron posible esta tesis: Mauricio Araya por ayudarme a escoger el tema y en desarrollo posterior, a Rodrigo Araya por obligarme a Juan Carlos en medio de las vacaciones de verano, a Nicola\" s profaciones por ayudarme a professar el tema y en desarrollo posterior, a Rodrigo Araya por a Juan Carlos de Bono en medio de las vacaciones de verano, a Nicola \"s profaciones por ayudarme a la Viessar vessar el cotema la cotema y en las las las, a la cotema de Rodrigo de de Rodri\u00f1a de de de de de de la Arrancias i, a la Illi, a la Illi, a la Illi, a la Illi, a la Illo de las Vacudarme."}, {"heading": "Resumen", "text": "Este documento es una tesis en el tema de planificacio \u0301 n de caminos uniagente y en l \"\u00ednea, para ambientes continuos, impredecibles y altamente dina\" micos. El problema es encontrar y recorrer un camino sin colisiones para un robot holono \"mico, sin restricciones kinodina\" micas, movie \"ndose en un ambiente con varios obsta\" culos o adversarios movie \"ndose impredeciblemente.\" Se asume la disponibilidad de informacio \"n perfecta del entorno en todo momento.Varias variantes esta\" RT \"ticas y dina\" micas del algoritmo \"Rapately Exploring Random Trees\" se exploran, as \"s componibilidad de tambie un algoritmo evolutivo para planificacio\" n. \""}, {"heading": "Abstract", "text": "This document is a dissertation on the topic of on-line path planning in continuous, unpredictable and highly dynamic environments. The problem is to find and traverse a collision-free path for a holonomic robot without cinodynamic limitations that moves in an environment with several unpredictable moving obstacles or opponents. It assumes the availability of complete information about the environment at all times. It proposes a combination of both types of algorithms to overcome shortcomings in both, and then a combination of an RRT variant for initial planning and informed local search for navigation, as well as an evolutionary algorithm for planning in dynamic environments called the Evolutionary Planner / Navigator. We show that this combination of simple multitechniques provides better answers to highly dynamic search words as RRT Local Search Engines, RRT Local Search Engines, RLocal Search Engines. RRT Local Search Engines"}, {"heading": "Index of Contents", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Acknowledgments iv", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Resumen v", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Abstract vi", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Index of Contents vii", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "List of Tables ix", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "List of Figures x", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "List of Algorithms xi", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "1 Introduction 1", "text": "1.1 Problem formulation................................... 2 1,2 Document structure.............................."}, {"heading": "2 State of the Art 5", "text": "2.1 Rapid Exploration Random Tree........................................................................................................................."}, {"heading": "3 Proposed Techniques 19", "text": "3.1 Combining RRT and EP / N.................................. 193.1.1 Combined Strategy............................... 19. 3.1.2 Implementation of Algorithms..................................................... 203.2.1 Multi-Stage Probabilistic Strategy............. 21. 3.2.2 Implementation of Algorithms...................."}, {"heading": "4 Experimental Setup and Results 27", "text": "4.1. Experimental setup}, {"heading": "5 Conclusions and Future Work 37", "text": "5.1 Future work........................................................................................................................"}, {"heading": "List of Tables", "text": "4.1 Dynamic Environmental Results, Map 1..........................................................................................................................."}, {"heading": "List of Figures", "text": "2.1. RRT during execution}, {"heading": "List of Algorithms", "text": "The death toll rose to 35. The death toll rose to 35. The death toll rose to 35. The death toll rose to 35."}, {"heading": "Introduction", "text": "In this context, it should be noted that the case concerns a case in which the perpetrators were able to kill themselves."}, {"heading": "1.1 Problem Formulation", "text": "At any time step, the problem could be defined as an optimization problem with satisfaction limitations. Therefore, our goal is to minimize a valuation function (i.e. distance, time, or waypoints) with the Cfree constraint in the face of a path. 3The space of possible positions that a physical system could attain 2Formally, let the path \u03c1 = p1p2... pn be a sequence of points where pi-Rn is a ndimensional point (p1 = qgoal), Ot-O the amount of obstacle positions at a given time t, and Rn \u00b7 O 7 \u2192 R an evaluation function of the path depending on the object positions. Our ideal goal is to obtain the optimal path that minimizes our evaluation function within a feasibility constraint and not the free point of the op function as a free collision of \u2212 meta positions, Ot-R an evaluation function of the path depending on the object positions."}, {"heading": "1.2 Document Structure", "text": "In the following sections, we present some methods of route planning that can be applied to the problem described above. In Section 2.1, we present the most popular variants of RRT replanning: Extended RRT (ERRT) in Section 2.3, Dynamic RRT (DRRT) in Section 2.4 and Multipartite RRT (MP-RRT) in Section 2.5. The Evolutionary Planner / Navigator (EP / N) is introduced along with some variants in Section 2.8. In Section 3.1, we then present a mixed approach that uses an RRT to find an initial solution and the EP / N to navigate, and finally, in Section 3.2, we present our new multi-level hybrid algorithm that uses RRT for initial planning and informed local search for navigation, plus simple, greedy heuristics to improve these optimization results and combination techniques that show highly dynamic results in Section 3.2."}, {"heading": "State of the Art", "text": "In this chapter, we will present various methods of route planning that can be applied to the problem described above. First, we will introduce variations on the Rapid Exploring Random Tree (RRT), a probabilistic method that builds a tree along the free configuration space until it reaches the target state. This planner family is quick to find solutions, but the solutions are far from optimal and need to be post-processed to shorten, flatten or otherwise flatten the characteristics desirable for each problem. Moreover, rescheduling RRTs is costly in terms of computation time. Then, we will introduce an evolutionary planner with somewhat opposite qualities: slow in finding workable solutions to difficult maps, but efficient in re-planning when a workable solution has already been found. It can also optimize the solution according to a given fitness function, without requiring any post-processing."}, {"heading": "2.1 Rapidly-Exploring Random Tree", "text": "One of the most successful probabilistic methods for offline path planning currently in use is the Rapid Exploring Random Tree (RRT), a single query planner for static environments, which was first introduced in [Lav98]. RRTs works to find a continuous path from a state qinit to a state qgoal (RRT) in the free configuration space Cfree by building a tree that is rooted in qinit. A new state qrand is uniformly located from the configuration space T. Then the next node, qinit, is located in the tree, and if qrand and the shortest path from qrand to qnear are in Cfree, then qrand is added to the algorithm 1. Tree growth is stopped when a node is found near qgoal. To speed up the conversion quency qgoal, the search in qgoal is not distorted: qgoal with a small probability. [In two new KL00] features are added to RT."}, {"heading": "2.2 Retraction-Based RRT Planner", "text": "The basic idea of the Optimize (qr, qn) function in algorithm 5 is to iteratively retract a randomly generated configuration that is in cobs to the next boundary point in Cfree. So, instead of using the default extension that tries to extend in a straight line from qnear to qrand, it extends from qnear to the next boundary point in Cfree to qrand. This gives more examples in narrow passages. This technique could easily be applied to online RRT planners. Algorithm 5 Retraction-based RRT extension1: qr of a random configuration in Cspace 2: qn \u2190 of the next neighbor of qr in T 3: if CollisionFree (qn, qr) then 4: T. addVertex (qr) 5: qddge (qddge) 2: qn \u2190 the next neighbor of qr in T 3: if CollisionFree (qr) then 4: T. teddge (qr) for everything else (qdqr)."}, {"heading": "2.3 Execution Extended RRT", "text": "The Extended RRT introduced in [BV02] introduces two extensions of the RRT to create an online planner, the waypoint cache and the adaptive cost penalty search, which improve the efficiency of replanning and the quality of the generated paths. ERRT uses a kd tree (see Section 2.7) to speed up the search for the nearest neighbor, and does not use a bidirectional search. The waypoint cache is implemented by maintaining a constant array of states, and when a plan is found, all states in the plan are replaced by random substitutes. If the tree is then no longer valid, a new tree must be 8grown, and there are three ways to select a new target state, as shown in Algorithm 6, which is used instead of RandomConfig () in previous algorithms. With the probability P [destination], the target is selected as the target; with the probability P [waypoint], a random waypoint is chosen, and with < the remaining state is chosen; <"}, {"heading": "2.4 Dynamic RRT", "text": "The Dynamic Rapid-Exploring Random Tree described in [FKS06] is a probable analogy to the widely used D * family of algorithms. It works by allowing a tree to grow from qgoal to qinit, as in Algorithm 7. This has the advantage that the root of the tree does not have to be moved during the life of planning and execution. In some problem classes, the robot has constraint sensors, which means that the newly emerging obstacles are located near the robot, not near the target. In general, this strategy attempts to trim smaller branches that are further away from the root. When new information enters the configuration space, the algorithm removes the newly invalid branches of the tree (algorithms 9 and 10) and grows the remaining tree, focusing, 9 with a certain probability (empirically matched to S4: Vlt4 in [FKS06]) to the proximity of the recently worked robot."}, {"heading": "2.5 Multipartite RRT", "text": "The multipartite RRT presented in [ZKB07] is another RRT variant that supports planning in unknown or dynamic environments. At the beginning of a given planning iteration, all nodes of T and F that are no longer valid are deleted, and all resulting unconnected sub-trees are placed in F. (as seen in algorithms 11 and 12) With given probabilities, the algorithm attempts to connect T to a new random state, to the target state, or to the root of a tree in F (algorithm 13). In [ZKB07], a simple greedy, smoothing heuristics is used that attempts to shorten paths by skipping middle nodes. MP-RRT is compared with an iterated RRT, ERRT, and DRRT, in 2D, 3D, and 4D, with the major problems having the least impact on the algorithms, but the least impact on the algorithms, RD02."}, {"heading": "2.6 Rapidly Exploring Evolutionary Tree", "text": "The changes to the Extend () function are then represented in Algorithm 14. Realignment of a kd tree is costly, and this paper uses a simple threshold for the number of nodes added before realignment. Authors suggest using the method described in [AL02] and11Algorithm. (qinit) 1: T \u2190 the previous search tree, if any 2: F \u2190 the previous forest of separated subtrees 3: qinit the original state 4: if T = source code then 5: Qinit 6: Insert (qroot, T) 7: else 8: PruneAndPrepend (T, qinit) 9: if TreeHasGoal (T) then10: return true 11: while searching for source code 6: qroot (qroot, T) 7: else 8: PruneAndPrepend (T, qinit)."}, {"heading": "2.7 Multidimensional Binary Search Trees", "text": "The kd tree, first introduced in [Ben75], is a binary tree in which each node is a k-dimensional point. Each node outside the leaf generates a splitting hyperplane that divides the space into two sub-spaces. In the RRT algorithm, the number of points gradually grows, causing the tree to get out of balance, slowing down the queries to the nearest neighbor. Realignment of a kd tree is costly, so the authors in [AL02] present a different approach: A vector of trees is constructed, creating a tree for n points, the 2i points for each \"1\" in the 13 algorithm 14 ExtendToTarget (T) 1: static p: population, inc 1: p: temporary population 3: if inc > length (p) then 4: qqqqqqqqFitness (p) then 5: p \u00b2 Fitness (p): zero 6: for all i \u00b2 p do 7: if i is in the top 50%, then 8: \u00b2 (11) Adp: 11."}, {"heading": "2.8 Evolutionary Planner/Navigator", "text": "An evolutionary algorithm [BFM97] is a generic population-based meta-heuristic optimization algorithm in each population group. It is inspired in biological evolution by applying methods such as individual selection, reproduction and mutation. Population consists of candidate solutions and they are evaluated according to a fitness function. A difference to RRT is that it can optimize the path according to a fitness function that is defined (length, smoothness, etc.) without showing the need for a step after processing. Experimental tests have shown that it has good performance for economical maps, but not so much for difficult maps with narrow passages or too crowded with obstacles. However, when a viable path is found, it is very efficient in optimizing and adapting to the dynamic individual population."}, {"heading": "Proposed Techniques", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1 Combining RRT and EP/N", "text": "As mentioned in Section 2, RRT variants produce sub-optimal solutions that need to be reworked later for shortening, smoothing or other desired properties. On the other hand, as shown in Section 2.8, EP / N can optimize a solution according to a given fitness function. However, this algorithm is slower to find an initial workable solution. In this section, we propose a combined approach that uses RRT to find an initial solution that can be used as a starting point for EP / N, taking advantage of the strengths of both algorithms."}, {"heading": "3.1.1 The Combined Strategy", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Initial Solution", "text": "EP / N, as shown in Section 2.8, cannot find usable paths in any but very sparse maps within a reasonable period of time. Therefore, RRT is used to generate an initial solution, ignoring the effects caused by dynamic objects, which will be in the original population of the evolutionary algorithm, along with random solutions."}, {"heading": "Feasibility and Optimization", "text": "EP / N is responsible for regaining feasibility if it is lost due to a moving obstacle or a new obstacle in a partially known or completely unknown environment. If a feasible solution cannot be found within a certain time, the algorithm is restarted, preserving the old population but adding a new person generated by RRT."}, {"heading": "3.1.2 Algorithm Implementation", "text": "Algorithm 16 Main () 1: qrobot \u2190 is the current robot position 2: qgoal \u2190 is the target position 3: while qrobot 6 = qgoal do 4: updateWorld (time) 5: processRRTEPN (time) The combined RRT-EP / N algorithm proposed here works through alternating environment updates and path planning, as can be seen in Algorithm 16. The first stage of path planning (see Algorithm 17) is to find an initial path using an RRT technique, ignoring any incisions that might occur during environment updates. Thus, the RRT ensures that the path found does not collide with static obstacles, but with dynamic obstacles in the future. If a first path is found, navigation is carried out using the standard EP / N, as shown in Algorithm 15."}, {"heading": "3.2 A Simple Multi-stage Probabilistic Algorithm", "text": "In highly dynamic environments with many (or few, but fast) relatively small, moving obstacles, growing trees are pruned too quickly and important parts of the trees removed before they can be replaced. This dramatically reduces the performance of the algorithms and makes them unsuitable for these problem classes. We believe that better performance could be achieved by modifying an RRT solution slightly by performing simple obstacle avoidance operations at the new collision points of the path by an informed local search. We believe that the path could be greedily optimized if the path has reached the feasibility condition.20Algorithm 17 processes RRTEPN (time) 1: qrobot - the current robot position 2: qstart - the starting position 3: qgoal - the target position 4: Tinit - the tree is rooted at the robot position 5: Tgoal - the tree is rooted at the target position 6: path - the path - the path - the path - the path - the path - the merged from the RRTs - the path 7 - the extracted path - qit - the target robot - the target position 7: q4 - the starting position RT4 - the target T3 - the target position: the tree is not found at the rooted at the target position 6:"}, {"heading": "3.2.1 A Multi-stage Probabilistic Strategy", "text": "If solving Equation 1.1 in static environments is not an easy task, solving dynamic versions turns out to be even more difficult. In dynamic path planning, we cannot wait until we have found the optimal solution, because we need to submit a \"sufficiently good\" plan within a certain time limit. Therefore, a heuristic approach needs to be developed to address the online nature of the problem. The heuristic algorithms presented in Sections 2.3, 2.4, and 2.5 extend a methodology designed for static environments, resulting in a poor response to highly dynamic environments and unwanted complexity of algorithms.We propose a multi-level combination of simple heuristic and probabilistic techniques to solve each part of the problem: feasibility, initial solution, and optimization."}, {"heading": "Feasibility", "text": "The key point of this problem is the hard constraint in Equation 1.1 that needs to be met before you even think about optimizing. The problem is that a path in highly dynamic environments changes quickly from feasible to unfeasible - and vice versa - even if our path does not change. We suggest a simple, informed local search to get paths in Cfree. The idea is to randomly search for a Cfree path by changing the closest colliding segment of the path. As we include some knowledge of the problem in the search, the informed term is coined to distinguish it from blind local search. Details of the operators used to modify the path are described in Section 3.2.2. If a feasible solution cannot be found within a given time span, the algorithm is restarted, with a new starting point generated by an RRT variant."}, {"heading": "Initial Solution", "text": "The problem with local search algorithms is that they fix a solution that is assumed to be close to the feasibility condition. Trying to create workable paths from scratch with local search (or even with evolutionary algorithms [XMZT97]) is not a good idea due to the randomness of the original solution. Therefore, we suggest feeding the informed local search with a standard RRT solution at the beginning of planning, as shown in Figure 3.1."}, {"heading": "Optimization", "text": "Therefore, the eval (\u00b7, \u00b7) function must be minimized when a (temporary) viable way is found, using a simple greedy technique: we test each point in the solution to see if it can be removed to maintain feasibility; if so, we remove it and check the following point, which is continued to the last point."}, {"heading": "3.2.2 Algorithm Implementation", "text": "Algorithm 18 Main () 1: qrobot \u2190 the current robot position 2: qgoal \u2190 the target position 4: intoted rooted. (While qrobot 6 = qgoal do 4: updateWorld (time) 5: processMultiStage (time) 22The multi-stage algorithm proposed in this thesis works by alternating environment updates and path planning, as can be seen in algorithm 18. The first stage of path planning (see algorithm 19) is to find an initial path using an RRT technique, ignoring any cuts that might happen during environment updates. Thus, RRT ensures that the path found does not collide with static obstacles, but could collide with dynamic obstacles in the future. If a first path is found, navigation is started by alternating a simple informed local search with a simple greedy heuristic, as shown in Figure 3.1.Algorithm 19 processMultiStage (time) 1: qrooted is the current robot position 2: qstart."}, {"heading": "Experimental Setup and Results", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.1 Experimental Setup", "text": "Although the algorithms developed in this work are aimed at dynamic environments, for the sake of completeness they are also compared in partially known environments and in completely unknown environments, where some or all obstacles become visible to the planner when the robot approaches them and simulates a robot with limited sensor range."}, {"heading": "4.1.1 Dynamic Environment", "text": "The first environment for our experiments consists of two maps with 30 moving obstacles of the same size of the robot, with a random speed between 10% and 55% of the speed of the robot. Good performance in this environment is the focal point of this thesis. These dynamic environments are shown in Figures 4.1 and 4.2."}, {"heading": "4.1.2 Partially Known Environment", "text": "The second environment uses the same maps, but with some obstacles three to four times the size of the robot, which become visible when the robot approaches them. This is the kind of environment for which most dynamic RRT variants have been designed. Partially known environments are shown in Figures 4.3 and 4.4.27."}, {"heading": "4.1.3 Unknown Environment", "text": "For the sake of completeness, we will compare the various techniques in a third environment using one of the previously presented maps, but all obstacles will initially be unknown to the planners and become visible as the robot approaches them, forcing several redesigns. This unknown environment is shown in Figure 4.5."}, {"heading": "4.2 Implementation Details", "text": "The algorithmic selection results that are able to merge are able to merge in the way that they are able to hide in the way."}, {"heading": "4.3 Results", "text": "The three algorithms were executed a hundred times in each environment and map combination, with a cut-off time of five minutes for all tests after which the robot was deemed not to have reached the target. Results are presented in terms of: 31 \u2022 Success rate (S.R.): The percentage of times the robot arrived at the target before reaching the cut-off time of five minutes, which does not take into account collisions or the time the robot waited for a plan. \u2022 Number of closest neighbor lookups performed by each algorithm (N.N.): One of the possible bottlenecks for tree-based algorithms \u2022 Number of Collision Control (C.C.) performed, which in our specific implementation take up a significant percentage of the runtime \u2022 Time it took the robot to reach the target, \u00b1 the standard deviation."}, {"heading": "4.3.1 Dynamic Environment Results", "text": "The results in Tables 4.1 and 4.2 show that the multi-level algorithm takes considerably less time than the DRRT and MP-RRT to reach the target, with much less collision tests. The combined RRT-EP / N is just under a second. It was expected that the nearest investigations in both combined algorithms would be much less than in the RRT variants, because they are performed and restarted only in the initial phase, not during navigation. The combined algorithms provide more consistent results within a map, as their smaller standard deviations show, but also on different maps. Interestingly, DRRT is slightly faster than MP-RRT in Chart 1 and faster than DRRT in Chart 2 MP-RRT. However, the differences are too small to draw any conclusions. Figures 4.6 and 4.7 show the times and success rates of the different algorithms when the number of dynamic obstacles in Chart 1 is changed."}, {"heading": "4.3.2 Partially Known Environment Results", "text": "Taking both maps into account, the results in Tables 4.3 and 4.4 show that both combined algorithms are faster and more consistent than the RRT variants, with the simple multi-level algorithm being faster in both variants. These results were unexpected because the combined algorithms were designed for dynamic environments. However, it should be noted that DRRT-adv is a close second in Map 1, but a close second in Map 2, so its lack of reliability is not a good choice in this scenario. In this environment, as in the dynamic environment, DRRT is faster in Map 1 than MP-RRT, while the opposite is happening in Map 2."}, {"heading": "4.3.3 Unknown Environment Results", "text": "The results in Table 4.5 clearly show the combined RRT-EP / N as a faster algorithm in unknown environments, with the multi-stage algorithm in second place. In contrast to 34 dynamic and partially known environments in the same board, MP-RRT is faster than DRRT.35chapter 5"}, {"heading": "Conclusions and Future Work", "text": "The new multi-stage algorithm proposed here performs well in very dynamic environments. It performs particularly well when several small obstacles move randomly, which is explained by the fact that when the obstacles move constantly, they sometimes go out of their way by themselves, which our algorithm exploits, while RRT-based obstacles do not, they simply drop branches of the tree that could prove useful only a few moments later. Although the combined RRT-EP / N performs more operators and automatic adjustment of the operator probabilities according to their effectiveness, it is still better than the RRT variants, but about 55% slower than the simple multi-stage algorithm. This is explained by the number of collision controls carried out, more than twice as many as the multi-stage algorithm, because collision controls must be carried out for the entire population, not just a single path of the multi-stage algorithm, although the multi-controller is partially larger in the environment."}, {"heading": "5.1 Future Work", "text": "We propose several areas in which the theses presented in this dissertation can be improved."}, {"heading": "5.1.1 Algorithms", "text": "The most promising area of improvement seems to be experimentation with various online planners, such as a version of the EvP ([AR05] and [AR08]), which have been modified to work in the continuous configuration space or a potential field navigator; the local search presented here could also benefit from the use of more sophisticated operators and parameters for the RRT variants (such as forest size for MP-RRT); and the EP / N (such as population size) could benefit from being tailored specifically for this implementation and not simply reusing the parameters found in earlier work. Another area of research that could be addressed is the extension of this algorithm to high-dimensional problems, as RRT variants are known to work well in higher dimensions. Finally, since RRT variants are suitable for kinodynamic planning, we only need to adapt the online level of the algorithm to have a new multi-level planner for problems with kinodynamic constraints."}, {"heading": "5.1.2 Framework", "text": "The MoPa framework could benefit from integrating a third-party logic layer, with support for arbitrary geometric shapes, a spatial scene graph, and hierarchical maps. Some candidates would be OgreODE [Ogr], Spring RTS [Spr], and ORTS [ORT]. Other possible improvements include support for other map formats, including discrimination against static and moving obstacles, simulation of limited sensor areas, and integration with external hardware such as the Lego NXT [Leg] to perform experiments in more realistic scenarios. 39"}], "references": [{"title": "Efficient nearest neighbor searching for motion planning", "author": ["A. Atramentov", "S.M. LaValle"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "Atramentov and LaValle.,? \\Q2002\\E", "shortCiteRegEx": "Atramentov and LaValle.", "year": 2002}, {"title": "Un algoritmo evolutivo para la resoluci\u00f3n del problema de planificaci\u00f3n de rutas de un robot m\u00f3vil", "author": ["T. Alfaro"], "venue": "Master\u2019s thesis, Departamento de Informa\u0301tica, Universidad Te\u0301cnica Federico Santa Mar\u0301\u0131a,", "citeRegEx": "Alfaro.,? \\Q2005\\E", "shortCiteRegEx": "Alfaro.", "year": 2005}, {"title": "An on-the-fly evolutionary algorithm for robot motion planning", "author": ["T. Alfaro", "M. Riff"], "venue": "Lecture Notes in Computer Science,", "citeRegEx": "Alfaro and Riff.,? \\Q2005\\E", "shortCiteRegEx": "Alfaro and Riff.", "year": 2005}, {"title": "An evolutionary navigator for autonomous agents on unknown large-scale environments", "author": ["T. Alfaro", "M. Riff"], "venue": "Intelligent Automation and Soft Computing,", "citeRegEx": "Alfaro and Riff.,? \\Q2008\\E", "shortCiteRegEx": "Alfaro and Riff.", "year": 2008}, {"title": "Combining a probabilistic sampling technique and simple heuristics to solve the dynamic path planning problem", "author": ["N.A. Barriga", "M. Araya-Lopez", "M. Solar"], "venue": "In Proceedings XXVIII International Conference of the Chilean Computing Science Society (SCCC),", "citeRegEx": "Barriga et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Barriga et al\\.", "year": 2009}, {"title": "Multidimensional binary search trees used for associative searching", "author": ["J.L. Bentley"], "venue": "Communications of the ACM,", "citeRegEx": "Bentley.,? \\Q1975\\E", "shortCiteRegEx": "Bentley.", "year": 1975}, {"title": "Real-time randomized path planning for robot navigation", "author": ["J. Bruce", "M. Veloso"], "venue": "In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems,", "citeRegEx": "Bruce and Veloso.,? \\Q2002\\E", "shortCiteRegEx": "Bruce and Veloso.", "year": 2002}, {"title": "Genetic algorithm for dynamic path planning", "author": ["A. Elshamli", "HA Abdullah", "S. Areibi"], "venue": "In Proceedings of the Canadian Conference on Electrical and Computer Engineering,", "citeRegEx": "Elshamli et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Elshamli et al\\.", "year": 2004}, {"title": "Replanning with RRTs", "author": ["D. Ferguson", "N. Kalra", "A. Stentz"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "Ferguson et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Ferguson et al\\.", "year": 2006}, {"title": "Gross motion planning \u2014 a survey", "author": ["Yong K. Hwang", "Narendra Ahuja"], "venue": "ACM Computing Surveys,", "citeRegEx": "Hwang and Ahuja.,? \\Q1992\\E", "shortCiteRegEx": "Hwang and Ahuja.", "year": 1992}, {"title": "RRT-connect: An efficient approach to single-query path planning", "author": ["J.J. Jr. Kuffner", "S.M. LaValle"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "Kuffner and LaValle.,? \\Q2000\\E", "shortCiteRegEx": "Kuffner and LaValle.", "year": 2000}, {"title": "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", "author": ["L.E. Kavraki", "P. Svestka", "J.-C. Latombe", "M.H. Overmars"], "venue": "IEEE Transactions on Robotics and Automation,", "citeRegEx": "Kavraki et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Kavraki et al\\.", "year": 1996}, {"title": "Rapidly-Exploring Random Trees: A new tool for path planning", "author": ["S.M. Lavalle"], "venue": "Technical report,", "citeRegEx": "Lavalle.,? \\Q1998\\E", "shortCiteRegEx": "Lavalle.", "year": 1998}, {"title": "Randomized kinodynamic planning", "author": ["S.M. LaValle", "J.J. Kuffner Jr."], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "LaValle and Jr.,? \\Q1999\\E", "shortCiteRegEx": "LaValle and Jr.", "year": 1999}, {"title": "An incremental learning approach to motion planning with roadmap management", "author": ["Tsai-Yen Li", "Yang-Chuan Shie"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "Li and Shie.,? \\Q2002\\E", "shortCiteRegEx": "Li and Shie.", "year": 2002}, {"title": "Offline and online evolutionary bi-directional RRT algorithms for efficient re-planning in dynamic environments", "author": ["S.R. Martin", "S.E. Wright", "J.W. Sheppard"], "venue": "In Proceedings of the IEEE International Conference on Automation Science and Engineering,", "citeRegEx": "Martin et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Martin et al\\.", "year": 2007}, {"title": "Path planning for a mobile robot using genetic algorithms", "author": ["G. Nagib", "W. Gharieb"], "venue": "In Proceedings of the International Conference on Electrical, Electronic and Computer Engineering,", "citeRegEx": "Nagib and Gharieb.,? \\Q2004\\E", "shortCiteRegEx": "Nagib and Gharieb.", "year": 2004}, {"title": "Evolutionary algorithm based offline/online path planner for UAV navigation", "author": ["I.K. Nikolos", "K.P. Valavanis", "N.C. Tsourveloudis", "A.N. Kostaras"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, Part B,", "citeRegEx": "Nikolos et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Nikolos et al\\.", "year": 2003}, {"title": "Optimal and efficient path planning for partially-known environments", "author": ["A. Stentz"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "Stentz.,? \\Q1994\\E", "shortCiteRegEx": "Stentz.", "year": 1994}, {"title": "The focussed D* algorithm for real-time replanning", "author": ["A. Stentz"], "venue": "In International Joint Conference on Artificial Intelligence,", "citeRegEx": "Stentz.,? \\Q1995\\E", "shortCiteRegEx": "Stentz.", "year": 1995}, {"title": "Adding memory to the Evolutionary Planner/Navigator", "author": ["K.M. Trojanowski", "Z.J. Xiao"], "venue": "In Proceedings of the IEEE International Conference on Evolutionary Computation,", "citeRegEx": "Trojanowski and Xiao.,? \\Q1997\\E", "shortCiteRegEx": "Trojanowski and Xiao.", "year": 1997}, {"title": "Handbook of Evolutionary Computation, chapter G3.6 The Evolutionary Planner/Navigator in a Mobile Robot Environment", "author": ["J. Xiao"], "venue": "IOP Publishing Ltd.,", "citeRegEx": "Xiao.,? \\Q1997\\E", "shortCiteRegEx": "Xiao.", "year": 1997}, {"title": "Evolutionary Planner/Navigator: Operator performance and self-tuning", "author": ["J. Xiao", "Z. Michalewicz", "L. Zhang"], "venue": "In International Conference on Evolutionary Computation,", "citeRegEx": "Xiao et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Xiao et al\\.", "year": 1996}, {"title": "Adaptive Evolutionary Planner/Navigator for mobile robots", "author": ["J. Xiao", "Z. Michalewicz", "L. Zhang", "K. Trojanowski"], "venue": "Proceedings of the IEEE Transactions on Evolutionary Computation,", "citeRegEx": "Xiao et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Xiao et al\\.", "year": 1997}, {"title": "Multipartite RRTs for rapid replanning in dynamic environments", "author": ["M. Zucker", "J. Kuffner", "M. Branicky"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "Zucker et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Zucker et al\\.", "year": 2007}, {"title": "An efficient retraction-based RRT planner", "author": ["Liangjun Zhang", "D. Manocha"], "venue": "In Proceedings of the IEEE International Conference on Robotics and Automation,", "citeRegEx": "Zhang and Manocha.,? \\Q2008\\E", "shortCiteRegEx": "Zhang and Manocha.", "year": 2008}], "referenceMentions": [], "year": 2009, "abstractText": "This document is a thesis on the subject of single-agent on-line path planning in continuous,unpredictable and highly dynamic environments. The problem is finding and traversing a collision-free path for a holonomic robot, without kinodynamic restrictions, moving in an environment with several unpredictably moving obstacles or adversaries. The availability of perfect information of the environment at all times is assumed. Several static and dynamic variants of the Rapidly Exploring Random Trees (RRT) algorithm are explored, as well as an evolutionary algorithm for planning in dynamic environments called the Evolutionary Planner/Navigator. A combination of both kinds of algorithms is proposed to overcome shortcomings in both, and then a combination of a RRT variant for initial planning and informed local search for navigation, plus a simple greedy heuristic for optimization. We show that this combination of simple techniques provides better responses to highly dynamic environments than the RRT extensions.", "creator": "LaTeX with hyperref package"}}}