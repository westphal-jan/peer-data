{"id": "1002.0136", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-Jan-2010", "title": "Dominion -- A constraint solver generator", "abstract": "This paper proposes a design for a system to generate constraint solvers that are specialised for specific problem models. It describes the design in detail and gives preliminary experimental results showing the feasibility and effectiveness of the approach.", "histories": [["v1", "Sun, 31 Jan 2010 15:46:56 GMT  (21kb,D)", "http://arxiv.org/abs/1002.0136v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["lars kotthoff"], "accepted": false, "id": "1002.0136"}, "pdf": {"name": "1002.0136.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["larsko@cs.st-andrews.ac.uk"], "sections": [{"heading": "1 Introduction", "text": "The central objective of this project is to improve the scalability of constraint technology while eliminating its reliance on expert manual tuning. We propose a novel, elegant means to achieve this - a constraint solver synthesizer that generates a constraint solver that specializes in a specific problem. Constraints Research has so far focused mainly on the gradual improvement of general purpose solvers. Currently, the next point of comparison is the G12 project [1], which aims to integrate existing constraint solver solutions and solvers from related fields into a hybrid."}, {"heading": "2 Design of a synthesiser for specialised constraint solvers", "text": "Dominion's design distinguishes between two main parts: The analyzer analyzes the problem model and creates a solver specification that describes which components the specialized solver must have and which algorithms and data structures to use. The generator takes the solver specification and creates a solver that corresponds to it. The flow of information is illustrated in Figure 1.Both the analyzer and the generator optimize the solver. While the analyzer performs high-level optimizations that depend on the structure of the problem model, the generator performs low-level optimizations that depend on the implementation of the solver. These two parts are independent and linked by the solver specification, which is completely agnostic to the format of the problem model and the implementation of the specialized solver. There may be different frontends for both the analyzer and the generator to handle problems that are specified in a variety of formats and to synthesize solvers in different ways, for example, on the basis of the synthesizer."}, {"heading": "2.1 The analyser", "text": "The solution lies in the hands of the EU Commission and the European Central Bank (ECB)."}, {"heading": "2.2 The generator", "text": "The generator reads the solver specification generated by the analyzer and constructs a special constraint solver accordingly. It can modify an existing solver or synthesize it from scratch. The generated solver must comply with the solver specification, but beyond that there are no limitations. In particular, the generator does not guarantee that the generated special solver performs better than a general solver or is actually capable of solving constraint problems at all - these are encoded in the solver specification. In addition to the high-level design decisions specified in the solver specification, the generator can perform low-level optimizations specific to the implementation of the specialized solver. It might, for example, choose to represent domains with a data type that is shorter than the standard solution in order to save space.The scope of the generator is not limited to generating the source code that the solver implements, but also the system implements."}, {"heading": "3 Preliminary implementation and experimental results", "text": "We have started to implement the above design in a system that works on top of Minion [9]. The analyzer reads the Minion input files and writes a solution specification that describes the constraints and variable types required to solve the problem. The generator modifies Minion to support only these constraints and variable types. It also does some additional low optimizations by removing the infrastructure code that is not required for the specialized solver. Dominion's current implementation sits between the existing Tailor and Minion projects - it records the problem files that may be generated by Tailor and generates a specialized Minion solution. The generated solution approach specializes in problem instance models that match those of the instance under investigation and Minion projects."}, {"heading": "4 Conclusion and future work", "text": "We have demonstrated the feasibility and effectiveness of the general approach of generating specialized problem solvers for problem models by experimenting with Minion and Dominion-generated solvers and achieving results that show significant performance improvements. These results do not take into account the overhead of running Dominion, but we are confident that there will be overall performance improvement for large problem models despite the overhead. Based on our experience with Dominion, we propose that the next step should be generating specialized variable types for the model of a problem instance. Dominion will expand Minion and create variable types of the \"Integer Domain from 10 to 22.\" This allows us not only to choose different representations of variables based on the domain, but also to simplify and speed up the services provided by the variable, such as checking the boundaries of the domain or checking whether a particular value is in the problem."}, {"heading": "5 Acknowledgements", "text": "The authors would like to thank Chris Jefferson for his extensive help with the Minion internals and the anonymous reviewers for their feedback. Lars Kotthoff is supported by a SICSA scholarship."}, {"heading": "1. Stuckey, P.J., de la Banda, M.J.G., Maher, M.J., Marriott, K., Slaney, J.K., Somogyi, Z., Wallace, M., Walsh, T.: The G12 project: Mapping solver independent models to efficient solutions. In: ICLP 2005. 9\u201313", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2. Minton, S.: Automatically configuring constraint satisfaction programs: A case", "text": "Study. Constraints 1 (1996) 7-43 3. Katsirelos, G., Bacchus, F.: Generalized nogoods in CSPs. In: AAAI 2005. 390-3964. Prosser, P.: Hybrid algorithms for the constraint satisfaction problem. Computational Intelligence 9 (3) (1993) 268-299 5. Bessie, C., Debruyne, R.: Theoretical Analysis of Singleton Arc Consistency and its Extensions. Artificial Intelligence 172 (1) (2008) 29-41 6. Freuder, E.C., Elfe, C.D.: Neighborhood inverse consistency preprocessing. In: AAI 1996. 202-208 7. Kotthoff, L.: Constraint solvers: An empirical evaluation of design decisions."}], "references": [{"title": "The G12 project: Mapping solver independent models to efficient solutions", "author": ["P.J. Stuckey", "M.J.G. de la Banda", "M.J. Maher", "K. Marriott", "J.K. Slaney", "Z. Somogyi", "M. Wallace", "T. Walsh"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2005}, {"title": "Automatically configuring constraint satisfaction programs: A case study", "author": ["S. Minton"], "venue": "Constraints 1", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1996}, {"title": "Generalized nogoods in CSPs", "author": ["G. Katsirelos", "F. Bacchus"], "venue": "AAAI", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2005}, {"title": "Hybrid algorithms for the constraint satisfaction problem", "author": ["P. Prosser"], "venue": "Computational Intelligence 9(3)", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1993}, {"title": "Theoretical analysis of singleton arc consistency and its extensions", "author": ["C. Bessi\u00e8re", "R. Debruyne"], "venue": "Artificial Intelligence 172(1)", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2008}, {"title": "Neighborhood inverse consistency preprocessing", "author": ["E.C. Freuder", "C.D. Elfe"], "venue": "AAAI", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1996}, {"title": "Constraint solvers: An empirical evaluation of design decisions", "author": ["L. Kotthoff"], "venue": "CIRCA preprint", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2009}, {"title": "Tailoring solver-independent constraint models: A case study with Essence\u2019 and Minion", "author": ["A. Rendl", "I.P. Gent", "I. Miguel"], "venue": "SARA", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2007}, {"title": "MINION: A fast scalable constraint solver", "author": ["I.P. Gent", "C. Jefferson", "I. Miguel"], "venue": "ECAI", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}], "referenceMentions": [{"referenceID": 0, "context": "The closest point of comparison is currently the G12 project [1], which aims to combine existing general constraint solvers and solvers from related fields into a hybrid.", "startOffset": 61, "endOffset": 64}, {"referenceID": 1, "context": "[2]; we aim to use state-of-the-art constraint solver technology employing a broad range of different techniques.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "Among these are for example conflict recording [3], backjumping [4], singleton arc consistency [5], and neighbourhood inverse consistency [6].", "startOffset": 47, "endOffset": 50}, {"referenceID": 3, "context": "Among these are for example conflict recording [3], backjumping [4], singleton arc consistency [5], and neighbourhood inverse consistency [6].", "startOffset": 64, "endOffset": 67}, {"referenceID": 4, "context": "Among these are for example conflict recording [3], backjumping [4], singleton arc consistency [5], and neighbourhood inverse consistency [6].", "startOffset": 95, "endOffset": 98}, {"referenceID": 5, "context": "Among these are for example conflict recording [3], backjumping [4], singleton arc consistency [5], and neighbourhood inverse consistency [6].", "startOffset": 138, "endOffset": 141}, {"referenceID": 6, "context": "Additionally, it can also vary basic design decisions, which can have a significant impact on performance [7].", "startOffset": 106, "endOffset": 109}, {"referenceID": 8, "context": "The design decisions we have made are based on our experience with Minion [9] and other constraint programming systems.", "startOffset": 74, "endOffset": 77}, {"referenceID": 7, "context": "It does not, however, optimise it like for example Tailor [8].", "startOffset": 58, "endOffset": 61}, {"referenceID": 8, "context": "We have started implementing the design proposed above in a system which operates on top of Minion [9].", "startOffset": 99, "endOffset": 102}], "year": 2017, "abstractText": "This paper proposes a design for a system to generate constraint solvers that are specialised for specific problem models. It describes the design in detail and gives preliminary experimental results showing the feasibility and effectiveness of the approach.", "creator": "LaTeX with hyperref package"}}}