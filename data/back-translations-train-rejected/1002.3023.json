{"id": "1002.3023", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Feb-2010", "title": "Rewriting Constraint Models with Metamodels", "abstract": "An important challenge in constraint programming is to rewrite constraint models into executable programs calculat- ing the solutions. This phase of constraint processing may require translations between constraint programming lan- guages, transformations of constraint representations, model optimizations, and tuning of solving strategies. In this paper, we introduce a pivot metamodel describing the common fea- tures of constraint models including different kinds of con- straints, statements like conditionals and loops, and other first-class elements like object classes and predicates. This metamodel is general enough to cope with the constructions of many languages, from object-oriented modeling languages to logic languages, but it is independent from them. The rewriting operations manipulate metamodel instances apart from languages. As a consequence, the rewriting operations apply whatever languages are selected and they are able to manage model semantic information. A bridge is created between the metamodel space and languages using parsing techniques. Tools from the software engineering world can be useful to implement this framework.", "histories": [["v1", "Tue, 16 Feb 2010 07:26:48 GMT  (215kb)", "http://arxiv.org/abs/1002.3023v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["raphael chenouard", "laurent granvilliers", "ricardo soto"], "accepted": false, "id": "1002.3023"}, "pdf": {"name": "1002.3023.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Ricardo Soto"], "emails": ["raphael.chenouard@univ-nantes.fr", "laurent.granvilliers@univ-nantes.fr", "ricardo.soto@univ-nantes.fr"], "sections": [{"heading": null, "text": "ar Xiv: 100 2.30 23v1 [cs.AI] 16 Feb 2010"}, {"heading": "Introduction", "text": "In limited programming (Van Hentenryck, Michel and Deville 1997) and in the real world (Realcote et al.), users describe problem characteristics as constraints that contain variables, and the computer system calls boundary solvers to calculate the solutions. Therefore, the automatic allocation of boundary models to solvers is the key topic of this paper. The aim is to develop medium-sized software tools that are capable of reformulating and rewriting models for a variety of users and problem categories. On the one hand, there are many modeling languages for combinatory languages such as OPL (Van Hentenryck et al. 1999), Essence (Frisch et al. 2007), and Zinc (Nethercote et al. 2007), or numerical constraints and optimization problems such as Numerica (Van Hentenryck, Michel and Deville 1997)."}, {"heading": "Model Engineering Framework", "text": "This means that we are in a situation in which we are able to survive ourselves, in which we are in a situation in which we are not able to survive, in which we are able to survive ourselves, in which we are in a situation in which we are not in a situation in which we are not in a situation in which we are in, in which we are in a situation in which we are in which we are in which we are in which we are in which we are not in which we are not in which we are in which we are in which we are in which we are in which we are in which we are in which we are in which we are in which we are in which we are in which we are in which we are."}, {"heading": "A Motivating Example", "text": "This year it is as far as never before in the history of the Federal Republic of Germany."}, {"heading": "Pivot Model Handling", "text": "Our pivot meta-model has been defined to cover most modeling needs occurring in limited modeling languages. Afterwards, pivot models with multiple refinement transformations are managed, with each transformation identifying a clear refinement process, namely structural changes (e.g. removal of object variables) or model optimizations."}, {"heading": "Pivot Metamodel", "text": "It is a question of whether and to what extent it is actually a \"system\" in which it is a \"system,\" a \"system,\" a \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"system,\" \"\" system, \"\" \"system,\" \"\" system, \"\" \"system,\" \"system,\" \"system,\" \"\" system, \"\" \"system,\" \"\" system, \"\" \"system,\" \"\" \"system,\" \"\" \"system,\" \"\" \"\" system, \"\" \"\" \"\" system, \"\" \"\" \"\" system, \"\" \"\" \"\" system, \"\" \"\" \"\" system, \"\" \"\" \"system,\" \"\" \"\" system, \"\" \"\" \"\" system, \"\" \"\" \"system,\" \"\" \"\" \"system,\" \"\" \"\" \"system,\" \"\" \"\" \"\" \"system,\" \"\" \"\" \"\" \"system,\" \"\" \"\" \"\" \"system,\" \"\" \"\" \"\" \"\" system, \"\" \"\" \"\" \"\" \"\" system, \"\" \"\" \"\" \"\" \"\" \"\" system, \"\" \"\" \"system,\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"system,\" \"\" \"\" \"\" \"\", \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" system, \"\" \"\", \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"system,\" \"\" \"\" \"\" \",\" \"\" \"\" \"\" \"\" \"\" \"\" \"\", \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"system,\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \",\" \"\" \"\" \"\" \"\" \"\", \"\" \"\" \"\" \"\" \"\" \"\" \",\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \",\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\""}, {"heading": "Pivot model refactoring", "text": "For the sake of clarity, we will present a few operations that use an imperative pseudo-code style, while using specific transformation languages in practice. Therefore, the main interest of the concept hierarchy is to provide navigation mechanisms through models. Therefore, it is possible to manipulate models globally, which is very powerful. Object that replaces these refactoring steps replaces object instances, namely variables whose type is a class, with all elements defined in the class definition (variable, constants, and other statements). To prevent naming conflicts, named elements are called by the name of object instances. This refactoring transformation can be expressed in terms of a pseudo-code algorithm as represented in algorithms."}, {"heading": "Experiments", "text": "The idea behind it is that the idea is a project in which it is a project that extends from the idea to the realization in practice. The idea behind it is behind the idea that it is a project that extends from the idea to the realization in practice. The idea to it comes from the pen, and the idea behind it is from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the idea, from the idea to the idea, from the idea to the idea, from the idea to the idea, \"from the idea to the idea,\" from the idea to the idea, \"from the idea to the idea,\" from the idea to the idea, \"from the\" from the idea to the idea, \"from the idea to the idea, from the idea to the idea, from the idea to the idea, from the idea to the idea, from the idea to the idea, from the idea to the idea, from the idea to the idea, from the idea to the idea, from the idea to the idea to the idea, from the idea to the idea to the idea, from the idea to the idea to the practice, from the idea to the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization,\" from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the realization, from the idea to the conception to the idea to the conception to the conception to the conception, from the idea to the conception to the idea to the conception to the conception to the idea, from the conception to the conception to the idea"}, {"heading": "Related Work", "text": "The solution is probably the next framework for our approach, for example, MiniZinc (and Zinc), Essence and s-COMMA.MiniZinc is a high-level model in which multiple MiniZinc constructions are replaced by simplified or solver-supported constructs, making it easier to translate to a solver modeling.Essence is another language that refers to the transformations.The solver-independent process includes an intermediate model in which multiple MiniZinc constructions are replaced by simplified or solver-supported constructions."}, {"heading": "Conclusion and Future Work", "text": "The transformation chain consists of three main steps: from the source to the pivot model, the refinement of the pivot model and from the pivot model to the goal. An important feature of this chain is, among other things, the modularity of the mode transformations and the fact that the hard transformation work (refactoring / optimization) is always done via the pivot. This makes the transformations from / to the pivot model easier, and as a result, the integration of new languages into the architecture requires less effort. In the near future, we intend to increase the number of CP languages that our approach supports. We also want to define more pivot refactoring transformations in order to optimize and reformulate models. Another important blueprint for future work is to improve the management of complex CP models that are not examined in this paper, but in the order in which we apply and reshape them."}], "references": [{"title": "and Wallace", "author": ["K.R. Apt"], "venue": "M.", "citeRegEx": "Apt and Wallace 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "Model-Driven Constraint Programming", "author": ["Granvilliers Chenouard", "R. Soto 2008] Chenouard", "L. Granvilliers", "R. Soto"], "venue": "In ACM SIGPLAN PPDP,", "citeRegEx": "Chenouard et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Chenouard et al\\.", "year": 2008}, {"title": "and Codognet", "author": ["D. Diaz"], "venue": "P.", "citeRegEx": "Diaz and Codognet 2000", "shortCiteRegEx": null, "year": 2000}, {"title": "P", "author": ["Duck, G.J.", "Stuckey"], "venue": "J.; and Brand, S.", "citeRegEx": "Duck. Stuckey. and Brand 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "The Rules of Constraint Modelling", "author": ["Frisch"], "venue": null, "citeRegEx": "Frisch,? \\Q2005\\E", "shortCiteRegEx": "Frisch", "year": 2005}, {"title": "B", "author": ["A.M. Frisch", "M. Grum", "C. Jefferson", "Hern\u00e1ndez"], "venue": "M.; and Miguel., I.", "citeRegEx": "Frisch et al. 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "I", "author": ["Gent"], "venue": "P.; Jefferson, C.; and Miguel, I.", "citeRegEx": "Gent. Jefferson. and Miguel 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "and Benhamou", "author": ["L. Granvilliers"], "venue": "F.", "citeRegEx": "Granvilliers and Benhamou 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "and B\u00e9zivin", "author": ["F. Jouault"], "venue": "J.", "citeRegEx": "Jouault and B\u00e9zivin 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "TCS: a DSL for the Specification of Textual Concrete Syntaxes in Model Engineering", "author": ["B\u00e9zivin Jouault", "F. Kurtev 2006] Jouault", "J. B\u00e9zivin", "I. Kurtev"], "venue": "In ACM GPCE,", "citeRegEx": "Jouault et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Jouault et al\\.", "year": 2006}, {"title": "Rule-based Modularization in Model Transformation Languages Illustrated with ATL", "author": ["van den Berg Kurtev", "I. Jouault 2007] Kurtev", "K. van den Berg", "F. Jouault"], "venue": "Science of Computer Programming,", "citeRegEx": "Kurtev et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Kurtev et al\\.", "year": 2007}, {"title": "Weaving Executability into Object-Oriented Meta-Languages", "author": ["Fleurey Muller", "P.-A. J\u00e9z\u00e9quel 2005] Muller", "F. Fleurey", "J.-M. J\u00e9z\u00e9quel"], "venue": "Proceedings of MODELS/UML,", "citeRegEx": "Muller et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Muller et al\\.", "year": 2005}, {"title": "G", "author": ["N. Nethercote", "P.J. Stuckey", "R. Becket", "S. Brand", "Duck"], "venue": "J.; and Tack, G.", "citeRegEx": "Nethercote et al. 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "and Tack", "author": ["C. Schulte"], "venue": "G.", "citeRegEx": "Schulte and Tack 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "and Granvilliers", "author": ["R. Soto"], "venue": "L.", "citeRegEx": "Soto and Granvilliers 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "Constraint Programming in OPL", "author": ["Van Hentenryck"], "venue": "In PPDP,", "citeRegEx": "Hentenryck,? \\Q1999\\E", "shortCiteRegEx": "Hentenryck", "year": 1999}, {"title": "Numerica: a Modeling Language for Global Optimization", "author": ["Michel Van Hentenryck", "P. Deville 1997] Van Hentenryck", "L. Michel", "Y. Deville"], "venue": null, "citeRegEx": "Hentenryck et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Hentenryck et al\\.", "year": 1997}], "referenceMentions": [], "year": 2010, "abstractText": "An important challenge in constraint programming is to rewrite constraint models into executable programs calculating the solutions. This phase of constraint processing may require translations between constraint programming languages, transformations of constraint representations, model optimizations, and tuning of solving strategies. In this paper, we introduce a pivot metamodel describing the common features of constraint models including different kinds of constraints, statements like conditionals and loops, and other first-class elements like object classes and predicates. This metamodel is general enough to cope with the constructions of many languages, from object-oriented modeling languages to logic languages, but it is independent from them. The rewriting operations manipulate metamodel instances apart from languages. As a consequence, the rewriting operations apply whatever languages are selected and they are able to manage model semantic information. A bridge is created between the metamodel space and languages using parsing techniques. Tools from the software engineering world can be useful to implement this framework.", "creator": "LaTeX with hyperref package"}}}