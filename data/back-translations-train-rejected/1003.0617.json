{"id": "1003.0617", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Mar-2010", "title": "Agent Based Approaches to Engineering Autonomous Space Software", "abstract": "Current approaches to the engineering of space software such as satellite control systems are based around the development of feedback controllers using packages such as MatLab's Simulink toolbox. These provide powerful tools for engineering real time systems that adapt to changes in the environment but are limited when the controller itself needs to be adapted.", "histories": [["v1", "Tue, 2 Mar 2010 15:38:48 GMT  (41kb,D)", "http://arxiv.org/abs/1003.0617v1", "3 pages, 1 Figure, Formal Methods in Aerospace"]], "COMMENTS": "3 pages, 1 Figure, Formal Methods in Aerospace", "reviews": [], "SUBJECTS": "cs.MA cs.AI", "authors": ["louise a dennis", "michael fisher", "nicholas lincoln", "alexei lisitsa", "sandor m veres"], "accepted": false, "id": "1003.0617"}, "pdf": {"name": "1003.0617.pdf", "metadata": {"source": "CRF", "title": "Agent Based Approaches to Engineering Autonomous Space Software\u2217", "authors": ["Louise A. Dennis", "Michael Fisher", "Nicholas Lincoln", "Alexei Lisitsa", "Sandor M. Veres"], "emails": ["L.A.Dennis@liverpool.ac.uk"], "sections": [{"heading": null, "text": "M. Bujorianu and M. Fisher (eds.): Workshop on Formal Methods for Aerospace (FMA) EPTCS 20, 2010, pp. 63-67, doi: 10.4204 / EPTCS.20.6c \u00a9 L. A. Dennis et al. This work is licensed under the Creative Commons Attribution License."}, {"heading": "Agent Based Approaches to Engineering Autonomous Space", "text": "Software: Louise A. Dennis Department of Computer Science, University of Liverpool, UKL.A.Dennis @ liverpool.ac.ukMichael Fisher Department of Computer Science, University of Liverpool, UKNicholas Lincoln Department of Engineering, University of Southampton, UKAlexei Lisitsa Department of Computer Science, University of Liverpool, UKSandor M. Veres Department of Engineering, University of Southampton, UKCurrent approaches to the engineering of space software such as satellite control systems are based on the development of feedback controllers using packages such as MatLab's Simulink Toolbox. These provide powerful tools for engineering real-time systems that adapt to changes in the environment but are limited when the controller itself needs to be adapted. We are exploring ways in which ideas from time logic and agent programming can be integrated with the use of such control systems to provide a more powerful level of autonomous decision-making."}, {"heading": "1 Introduction", "text": "Modern control systems are limited in their ability to react flexibly and autonomously to changing situations, and the limiting factor is the complexity inherent in analysing situations in which many variables exist. There are many complex real-world control systems, but we are primarily interested in (autonomous) control of satellite systems. Consider the problem of a single satellite attempting to maintain a geostationary orbit. Current satellite control systems maintain orbits with feedback controllers, which implicitly assume that errors in orbit are minor and easy to correct. In situations where more significant errors occur, for example caused by a malfunction of the engine, it is desirable to modify or modify the controller. The complexity of the decision-making task poses a challenge to standard approaches and has led, for example, to complex, evolutionary control systems, which are very difficult to understand."}, {"heading": "2 Architecture", "text": "Our prototype system is shown in Fig. 1. We have implemented a simulated environment and real-time satellite control system in MatLab using the Simulink toolkits. The part of the continuous agent is also implemented in MatLab. MatLab does not have a simple provision for the thread execution that forces us to use separate instances for the real-time aspects (i.e. the feedback controller and the simulated environment) and for the part of the continuous agent. The agent also contains a discrete part of the agent that is currently implemented in the programming language of the Gwendolen Agent. 1 Applicants [2] is implemented on top of JAVA. The real-time control system sends information (which may be pre-processed) to the agent part of the system. When it acts, the discrete part of the agent may either cause the continuous agent part to be created to perform a calculation on the controller and wait for its results (the controller) to be shared in its new part."}, {"heading": "3 BDI Programming Aspects", "text": "The architecture allows us to present the high-level aspects of the program's decision-making regarding the beliefs and objectives of the agent and the events he observes. For example, if the agent observes the event that the satellite is in a new position (information transmitted to him by the real-time controller), he can use the continuous part to calculate whether that position is within acceptable limits of the desired orbit (i.e. whether the existing real-time controller is able to maintain the orbit). Consequently, if he becomes convinced that the satellite has deviated from the orbit, he can request the continuous part to calculate a new path for the satellite to follow using the techniques described in [4]. Likewise, the discrete agent part can verify his beliefs about the current status of the rudders and, if necessary, instruct the continuous part to generate a new feedback controller that takes into account any malfunctions or inefficiencies in the rudders."}, {"heading": "3.1 Geostationary Orbit Case Study", "text": "The agent code for the geostationary orbit is represented in code fragments 3.1 and 3.2. Fragment 3.1 shows the code for the abstraction engine. Each time it \"perceives\" the satellite position (stateinfo), it calls MatLab to calculate whether this position is within limits or not (comp _ distance) and then assert and remove common beliefs in an appropriate manner. The code is shown as a series of plans of the form trigger: {guard} \u2190 actions where the trigger is observed by the agent, the guard is a set of facts that must be true before the plan is activated and the actions are a stack of actions that need to be executed. + b is the addition of a belief, b, and -b is the removal of faith, b. In a guard B means that b is a shared code segment 3.1 geostationary orbit control (Abstraction Engine) 1 + 1, L1, L2, L2, L6, L1, L6."}, {"heading": "3.2 Decision and Control", "text": "The important aspect of both the above example and architecture in general is that the (MatLab) control systems take care of the detailed calculation of continuous functions (paths, etc.), while the rational agent takes care of high-level decisions on goals and plans. This separation simplifies both parts and avoids the problems associated with large, opaque, complex, adaptive and evolutionary control systems."}, {"heading": "4 Future Work", "text": "We are currently working on our prototype system and case study, which will allow us to make comparisons between this agent approach to autonomous decision-making in satellite systems and approaches based on finite state machines and standard control. We are also interested in exploring the use of temporal logic and model verification to generate predictive planning capabilities for the agent, as explored by Kloetzer and Belta. [3] Our goal is to explore the possibility of using model verification to verify aspects of the agent's behavior. Given that we already have a formal verification system for Gwendolen agents [1], there is a strong possibility that we can expand this to cope with (abstractions) of the continuous part. As the following diagram shows, we already have model verification tools for the discrete / finite parts. Our interest now is to what extent such party techniques can be extended to other aspects of the agent's behavior in the ATLAB and ARITAL environment. \""}, {"heading": "Abstraction Engine", "text": "Common convictions"}, {"heading": "Reasoning", "text": ""}], "references": [{"title": "Automated verification of multi-agent programs", "author": ["R.H. Bordini", "L.A. Dennis", "B. Farwer", "M. Fisher"], "venue": "In Proceedings of the 23rd IEEE/ACM International Conference on Automated Software Engineering (ASE", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2008}, {"title": "Gwendolen: A BDI Language for Verifiable Agents", "author": ["L.A. Dennis", "B. Farwer"], "venue": "Proc. AISB\u201908 Workshop on Logic and the Simulation of Interaction and Reasoning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "A Fully Automated Framework for Control of Linear Systems From Temporal Logic Specifications", "author": ["M. Kloetzer", "C. Belta"], "venue": "IEEE Transactions on Automatic Control,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Components of a Vision Assisted Constrained Autonomous Satellite Formation", "author": ["N. Lincoln", "S. Veres"], "venue": "Flying Control System. International Journal of Adaptive Control and Signal Processing,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "BDI Agents: From Theory to Practice", "author": ["A.S. Rao", "M. Georgeff"], "venue": "In Proc. 1st International Conference on Multi-Agent Systems (ICMAS),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1995}, {"title": "Foundations of Rational Agency", "author": ["M. Wooldridge", "A. Rao", "editors"], "venue": "Applied Logic Series. Kluwer Academic Publishers,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1999}], "referenceMentions": [{"referenceID": 5, "context": "We approach the problem from the perspective of rational agents [6].", "startOffset": 64, "endOffset": 67}, {"referenceID": 4, "context": "The discrete part uses the Belief-Desire-Intention (BDI) theory of agency [5] and governs high level decisions about when to generate new feedback controllers.", "startOffset": 74, "endOffset": 77}, {"referenceID": 1, "context": "Gwendolen [2] is implemented on top of JAVA.", "startOffset": 10, "endOffset": 13}, {"referenceID": 3, "context": "If, as a result of this, it gains a belief that the satellite has strayed from the orbit it can request the continuous part to calculate a new path for the satellite to follow using techniques described in [4].", "startOffset": 206, "endOffset": 209}, {"referenceID": 0, "context": "This should then reduce the probability of error in the decision-making parts of the program and opens the possibility that existing techniques for model checking such programs [1] can be adapted to verify this part.", "startOffset": 177, "endOffset": 180}, {"referenceID": 2, "context": "We also are interested in investigating the use of temporal logic and model checking to generate forward planning capabilities for the agent along the lines of those investigated by Kloetzer and Belta [3].", "startOffset": 201, "endOffset": 204}, {"referenceID": 0, "context": "Given that we already have a formal verification system for Gwendolen agents [1], there is a strong possibility that we can extend this to cope with (abstractions of) the continuous part.", "startOffset": 77, "endOffset": 80}], "year": 2010, "abstractText": "ion Engine", "creator": "LaTeX with hyperref package"}}}