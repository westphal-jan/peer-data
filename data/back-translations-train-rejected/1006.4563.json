{"id": "1006.4563", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Jun-2010", "title": "The State of the Art: Ontology Web-Based Languages: XML Based", "abstract": "Many formal languages have been proposed to express or represent Ontologies, including RDF, RDFS, DAML+OIL and OWL. Most of these languages are based on XML syntax, but with various terminologies and expressiveness. Therefore, choosing a language for building an Ontology is the main step. The main point of choosing language to represent Ontology is based mainly on what the Ontology will represent or be used for. That language should have a range of quality support features such as ease of use, expressive power, compatibility, sharing and versioning, internationalisation. This is because different kinds of knowledge-based applications need different language features. The main objective of these languages is to add semantics to the existing information on the web. The aims of this paper is to provide a good knowledge of existing language and understanding of these languages and how could be used.", "histories": [["v1", "Wed, 23 Jun 2010 15:18:33 GMT  (147kb)", "http://arxiv.org/abs/1006.4563v1", "IEEE Publication Format,this https URL"]], "COMMENTS": "IEEE Publication Format,this https URL", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["mohammad mustafa taye"], "accepted": false, "id": "1006.4563"}, "pdf": {"name": "1006.4563.pdf", "metadata": {"source": "CRF", "title": "The State of the Art: Ontology Web- Based Languages: XML Based", "authors": ["Mohammad Mustafa Taye"], "emails": [], "sections": [{"heading": null, "text": "Index Terms - Ontology, Ontology Language, RDF, RDFS, DAML + OIL, OWL"}, {"heading": "1 INTRODUCTION", "text": "This year it is more than ever before."}, {"heading": "2 RESOURCE DESCRIPTION FRAMEWORK", "text": "(RDF) Resource Description Framework (RDF) [3, 4, and 5] is a language used to provide standard format data about resources on the Web. It is capable of representing data about web resources and sharing knowledge about the Web. It is designed to be understood by computers, facilitating interoperability between applications. In other words, it is a framework for using and displaying metadata and describing the semantics of information about web resources in a manner accessible to machines. RDF is recommended by the World Wide Web Consortium (W3C). Uniform Resource Identifiers (URIs) are the method used by RDF to identify resources or something. In fact, it is based on XML, but while this is designed for syntax, RDF is intended for semantics. As has already been mentioned, RDF is a framework for describing web resources, which is why it has become a common method of describing properties, web information, and RDF is a method of describing time."}, {"heading": "2.1 RESOURCE DESCRIPTION FRAMEWORK", "text": "(RDF) SCHEMAThe Resource Description Framework / Schema (RDFS) [6, 7] is built on the XML and RDF models and on syntax < RDFS provides additional ways to support development in the individual RDF vocabularies. In other words, the RDF schema is a collection of RDF resources that can be used to define or describe properties of other RDF resources that define application-specific RDF vocabularies."}, {"heading": "2.2 CORE CLASSES", "text": "Elements of this class can be described as basic concepts, as they are used to describe most classes and their properties using examples. This class is defined as part of the vocabulary of the RDF scheme."}, {"heading": "2.2.1 RDF:RESOURCE", "text": "RDF is about the description of resources or objects. Therefore, anything described by RDF expressions is called resources; these are always identified by URIs and treated as instances of the class rdfs: Resource."}, {"heading": "2.2.2 RDF:PROPERTY", "text": "rdf: Property is used to represent the subset of RDF resources called properties."}, {"heading": "2.2.3. RDFS:CLASS", "text": "When a schema defines a new class, the resource that represents that class must have an rdf: type property whose value is the resource rdfs: Class. <? xml version = \"1.0\"? > < rdf: RDF xmlns: rdf = \"http: / / www.w3.org / 1999 / 02 / 22-rdfsyntax-ns #\" xmlns: rdfs = \"http: / / www.w3.org / 2000 / 01 / rdfschema #\" xml: base = \"http: / / www.cars.fake / cars #\" > < rdfs: Class rdf: ID = \"cars\" / > < rdfs: Class rdf = \"Benz\" > < rdfs: subClassOf rdf: resource = \"# cars\" / > < < rdfs: Class rdf = \"Benz\" > <"}, {"heading": "2.3. CORE PROPERTIES", "text": "These properties are actually considered instances of the class rdf: Property. They are used to express a mechanism of relations between classes and superclasses, or between classes and their instances."}, {"heading": "2.3.1. RDF:TYPE", "text": "This element is an instance of the RDFproperties that are used to determine that a resource is an instance of a class. In other words, this shows that a resource is a subset of a class and therefore has all the attributes that can be expected of a member of that class."}, {"heading": "2.3.2. RDFS:SUBCLASSOF", "text": "This property is a transitive relationship used to identify a relationship between classes as sub / supersets. Therefore, classes are structured in a subgroup hierarchy represented by this property (rdfs: subClassOf). In other words, this property is used to determine that a class C2 is a subclass of another class C1, with the logical consequence that each instance of C2 is also an instance of C1."}, {"heading": "2.3.3. RDFS:SUBPROPERTYOF", "text": "This defines each property used to represent a relationship between resources. this type of property is a specialization relation. rdfs: subPropertyOf is applied to properties to indicate that one property is a subset or specialization of another."}, {"heading": "2.3.4. RDFS:SEEALSO", "text": "The rdfs: see property is also used to specify resources that either have resources or could provide alternative information about that resource over the Internet."}, {"heading": "2.3.5. RDFS:ISDEFINEDBY", "text": "The rdfs: isDefinedBy property is a subproperty of rdfs: seeAlso and specifies the resource that defines the subject resource."}, {"heading": "2.4. CORE CONSTRAINTS", "text": "These are used to limit the amount of resources that a property can have (the domain of the property) and the amount of valid values for a property (its range).A property can have as many values for rdfs: domain as necessary, but no more than one value for rdfs: range."}, {"heading": "2.4.1. RDFS:RANGE & RDFS:DOMAIN", "text": "rdfs: range is used to explain that the values of a property are instances of one or more classs. rdfs: domain is used to explain that any resource with a particular property is an instance of one or more classs. in the rest of this report, there are some properties that are used to support easy documentation of the user interface. These properties refer to annotations within RDF schema. This type of concept is not strictly necessary, but could be useful in any application domain. They are defined in external schemes, but when they were commonly used, they were permanently defined in the core scheme."}, {"heading": "2.4.2. RDFS:COMMENT", "text": "This is used to add comments to provide a reader-readable description of a resource."}, {"heading": "2.4.3. RDFS:LABEL", "text": "This is used to add a brand name to provide a human-readable version of a resource name."}, {"heading": "2.4.4. RDFS:CONTAINER", "text": "The container nodes are represented by one of the three subclasses of rdfs: Container: rdf: Bag, an unordered collection; rdf: Seq, an ordered collection; and rdf: Alt, to choose between alternatives. Although RDF is a good basic language for many other languages, it is not very expressive and has limitations on the description of resources, including descriptions of existence, cardinality, localized reach and domain constraints or transitive, inverse or symmetrical properties. Generally, as mentioned in [2], the expressiveness of RDFS is limited; on the other hand, RDF / RDFS provide a modeling that concerns the organization of vocabularies in terms of hierarchies: subclass and sub-ownership relationships, domain and reach constraints and instances of classes. However, some features are missing, such as the definition of the local circumference and the specialization of their characteristics of female existence."}, {"heading": "3. ANNOTATED DAML+OIL ONTOLOGY", "text": "MARK-UPDARPA Agent Markup Language (DAML) + Ontology Inference Layer (OIL), DAML + OIL [8, 9] is a semantic markup language designed for web resources. In fact, it was built on RDF and RDF schema, which means that it has an RDF / XML syntax based on the framework paradigm, and therefore DAML + OIL could be considered a specific type of EDF, and this language was then extended to include richer modeling primitives to address weaknesses in EDF / RFDS. To this end, it uses URI to define resources as EDF. DAML + OIL is actually designed to describe the structure of a domain, since most web-based languages describe structure in terms of classes and properties. DAML + OIL uses a description logic model theory to formalize the meaning of a language."}, {"heading": "3.1. ONTOLOGY INTERCHANGE LANGUAGES", "text": "(OIL) A semantic markup language for web semantics has been built on RDF and RDF / S, the language that provides modeling primitives used in frame-based ontologies oriented to descriptive logic [14]. Below, elements that might appear in DAML + OIL documents are illustrated:"}, {"heading": "3.2. SETTING UP NAMESPACES", "text": "Since DAML + OIL is written in RDF and RDF is written in XML, DAML + OIL uses the existing web standards XML and RDF, so a DAML + OIL document starts with multiple namespace declarations using RDF, XML namespace and URIs. < rdf: RDF xmlns: rdf = \"http: / / www.w3.org / 1999 / 02 / 22-rdfsyntax-ns #\" xmlns: rdfs = \"http: / / www.w3.org / 2000 / 01 / rdfschema #\" xmlns: xsd = \"http: / / www.w3.org / 2000 / 10 / XMLSchema #\" xmlns: daml = \"http: / / www.w3.org / 2001 / Ndamex / 200x / 1damex / 1daml oil: 1200l + oil #\" xkmlns: \"http: / / www.w3.org / 2001 + Ndaml / 200Tdaml / 200x / 1damex = 1daml."}, {"heading": "3.3. HOUSEKEEPING", "text": "The first explanation after the namespace, which is an ontology, is formulaic; the \"about\" attribute is typically blank, indicating that the subject of this statement is this document. For documentation purposes, some features of this ontology are given, such as daml: versionInfo, rdfs: comment, daml: import < daml: Ontology rdf: about = \"\" > < daml: versionInfo > $Id: daml + oil-ex.daml, v 1.8 2001 / 03 / 27 21: 24: 04 vehicle Exp $< / daml: versionInfo > < rdfs: comment > An example of vehicle < rdfs: comment > < daml: imports rdf: resource = \"http: / / www.w3.org / 2001 / 10 / daml + oil\" / > < rdfs: > vehicle < rfs comment: > < dfs label: < < dfs > < dfs label: < < &ltf: < rfs label: &ltf: < &ltf: &ltf: resource = < &ltf: < rfs / rfs / 2001 / 10 / rdaml + oil \"/ > < <"}, {"heading": "3.4. DEFINING CLASSES", "text": "The first step in the ontology definition is the description of objects. It is useful to define some basic types. In DAML + OIL, classes are defined by using a daml: Class element that is a subclass of rdfs: Class.This is done by giving a name to the class that is the subset of the universe that contains all objects of this type. < daml: Class rdf: ID = \"Cars\" > < rdfs: label > Cars < / rdfs: label > < rdfs: comment > This class of cars illustrates a number of ontological idioms. < / rdfs: comment > < / daml: Class >. DAML + OIL divides the word into objects (which are elements of DAML classes) and datatypical values. < Data type values are used to define classes, but they are not DAML objects and cannot be included in a DAML."}, {"heading": "3.5. DEFINING PROPERTIES", "text": "Properties are used to define binary relationships between elements. Properties in this language are of two types: The first, \"daml: ObjectProperty,\" defines relationships between objects, and the second, daml: DatatypeProperty, defines relationships between objects and their data type values. It can be said that domains and ranges are global information about properties. < daml: ObjectProperty rdf: ID = \"hasCar\" > < rdfs: Domain rdf: resource = \"# Person\" / > < rdfs: range rdf: resource = \"# Car\" / > < / daml: ObjectProperty > In general, properties that refer to data type values are members of DatatypeProperty. \"Strings, integers, or decimals are sometimes used when it comes to DatatypeProperty."}, {"heading": "3.6. DEFINING PROPERTY RESTRICTIONS", "text": "The property constraint is used to define an anonymous class that contains all objects or things that meet the constraint. < daml: Class rdf: ID = \"PhD Student\" > < rdfs: subClassOf rdf: resource = \"# UniverstyStudentl\" / > < rdfs: subClassOf > < daml: Restriction > < daml: onProperty rdf: resource = \"# hasCar\" / > < daml: toClass rdf: resource = \"# PhDStudent\" / > < / daml: Restriction > < / rdfs: subClassOf > property rdfs > A requirement of any Web ontology language is that statements about entities: \"subvisdfs\" or supervisdf: subvisors: subvisdfs sublt; \"student: < carlt; D: & lt;"}, {"heading": "3.7. NOTATIONS FOR PROPERTIES", "text": "In fact, this proposal uses several annotations to illustrate different notations for properties: < daml: UniqueProperty rdf: ID = \"hasMother\" > < rdfs: subPropertyOf rdf: resource = \"# hasParent\" / > < rdfs: range rdf: resource = \"# Female\" / > < / daml: UniqueProperty > The (inverseOf) tag. < daml: ObjectProperty rdf: ID = \"hasChild\" > < daml: inverseOf rdf: resource = \"# hasParent\" / > < / daml: ObjectProperty > The transitive tag: < daml: TransitiveProperty rdf: ID = \"hasAncestor\" > < rdfs: label > hasAncestor < / rdfs: label > < / < < Transitive tag: < < > Transivedamty: Mdf: Property: MdD: <"}, {"heading": "3.8. NOTATIONS FOR CLASSES", "text": "The following example represents the class \"car\" by using the supplementOf: < daml: Class rdf: ID = \"car\" > < rdfs: Comment > no car is a person < / rdfs: Comment > < rdfs: Comment > < rdfs: subClassOf > < daml: Class > < daml: Class > < daml: SupplementOf rdf: Resource = \"# Person\" / > < / daml: Class > < / rdfs: subClassOf > < / daml: Class > < Type: Class \"Person\" can be identified in this case with the dissolution of the classes \"man\" and \"woman.\" < daml: Class rdf: approximately: < < < rdf: Class \"< < rdfs: Comment > < female\" woman \"< / dam:\" man \"and\" woman. \""}, {"heading": "3.9. DEFINING INDIVIDUALS", "text": "< < rdfs: label > Adam < / rdfs: label > < rdfs: label > < rdfs: comment > Adam is a person. < / rdfs: comment > < age > < xsd: decimal rdf: value = \"9.5\" / > < age > < xsd: integer rdf: value = \"13\" / > < / age > < shoesize > < xsd: decimal rdf: value = \"9.5\" / > < / shoesize > size > This data type is used to split the lexical representation into an actual value. A person has a property called hasSize that has a size: \".Thimal: value:\" 9.5 \"/ > dltf: Heiltf: ObjectProperty rdf: ID =\" Class \"&ltce &ltce < < df; rf; rlt;"}, {"heading": "4. WEB ONTOLOGY LANGUAGE (OWL)", "text": "Web Ontology Language (OWL) [2, 10, 11, 12, 13], a language for processing web information, became the recommendation of the W3C (World Wide Web Consortium) in February / 2004. It was developed using RDF to address the weaknesses of RDF / S and DAML + OIL. It offers a more comprehensive integration and interoperability of data between communities and domains. It can also be said that there is a similarity between OWL and RDF, but the former is a stronger syntax with more machine interpretability and vocabulary than RDF. Obviously, RDF is generally limited to binary soil predictions, and RDF Schema also has the limitation that it represents a subclass hierarchy and a property hierarchy, with the domain and range definitions of these characteristics being stronger than ODF. In other words, the language of OWL OWL is more expressive than the RDF + scheme as a whole and RDF + WIL to WDF / WIL categories."}, {"heading": "4.1. SETTING UP NAMESPACES", "text": "Since OWL is written in RDF and RDF is written in XML (in other words, OWL takes advantage of the existing Web standards XML and RDF), OWL documents start with multiple namespace declarations that use RDF, XML namespace, and URIs. rdf: RDF is the root element of an OWL ontology and also specifies a number of namespaces. < rdf: RDF xmlns: owl = \"http: / / www.w3.org / 2002 / 07 / owl #\" xmlns: rdf = \"http: / / www.w3.org / 1999 / 02 / 22-rdfsyntax-ns #\" xmlns: rdfs = \"http: / www.w3.org / 2000 / 01 / rdfschema #\" xmlns: \"http: / / www.w3.org / 2001 / XLMSchema #\" Following these declarations, the Rdf01 / rdfDF / rdfschema should be identified."}, {"heading": "4.2. HOUSEKEEPING", "text": "These claims are grouped under an owl: Ontology element that may include comments, version information, imports of other ontologies and labels, for example: < owl: Ontology rdf: about = \"\" > < rdfs: comment > < owl: versionInfo > $Id: http: / / www.daml.ecs.soton.ac.uk / ont / currency.owl, v 1.0 trp 2007 / 06 / 13 10: 35: 25 Exp $< / owl: versionInfo > < owl: imports rdf: resource = \"http: / / www. kkkkkkkkkkkkkkkk.\" rdfs: label > Currency Ontology > < / owl: import rdf: resource atf =. \""}, {"heading": "4.3. DEFINING CLASSES", "text": "In OWL, classes are defined by using an owl: class element that is a subclass of rdfs: class. For example, a class of \"cars\" is as follows: < owl: class rdf: ID = \"cars\" > < rdfs: designation > cars < / rdfs: designation > < rdfs: comment > This class of cars illustrates a series of ontological idioms. < / rdfs: comment > < / owl: class > One of the performance elements of OWL is an \"owl: disjointWith\" that is missing from the RDFS and is used to separate one class from another. < / rdfs: comment > < / owl: class > One of the performance elements of OWL is an \"owl: disjointWith\" that is used to separate one class from another. \"Owl: equivalent class\" is another element that could be used to establish equivalence between classes. Last but not last, there are two predefined classes, owl: Thing (which defines everything) and owl: Nothing, which is empty set."}, {"heading": "4.4. DEFINING PROPERTIES", "text": "In OWL, there are two types of properties: Object properties represent the relationship between two objects, such as the relationship (isOwnBy, own) used to represent the relationship between car and person. Data-typical properties represent related objects with their data-typical values such as person with phone, address, and age. < owl: ObjectProperty rdf: ID = \"isOwnBy\" > < owl: Domain rdf: resource = \"# car\" / > < owl: range rdf: resource = \"# person\" / > < owl: ObjectProperty > In OWL, it is possible to talk about Boolean combinations such as union, intersection, or completion of classes. For example, you can say that people in Jordan are Muslims or Christians. < owl: Class rdf: ID = \"peopleAtJordan\" > < df: univalence. \""}, {"heading": "4.5. DEFINING PROPERTY RESTRICTIONS", "text": "OWL uses some properties to add specifications by restricting some properties to classes. < owl: Class rdf: about = \"# Everycar\" > < rdfs: subClassOf > < owl: Restriction > < owl: onProperty rdf: resource = \"# isDriveBy\" / > < owl: allValuesFrom rdf: resource = \"# professionaldrivers\" / > < / owl: Restriction > < / rdfs: subClassOf > < & ltdfs: subClassOf > < / owl: Class > < & ltdf: Another and similar property is l: Value: the specific person must be specified."}, {"heading": "4.5.1. SPECIAL PROPERTIES", "text": "There are several other properties of property elements that can be defined directly: < < < < < / > Property defines a symmetrical property such as \"is older than,\" which means, among other things: \"the ancestor of,\" owl: SymmetricProperty defines a symmetrical property such as \"is sibling of,\" owl: Functional property, defines a property that has at most one unique value for each object, such as age or National Insurance number, and owl: InverseFunctional Property defines two different objects for which two different objects may not have the same value as the National Insurance Number. < owl: ObjectProperty rdf # ObjectProperty: \"Muslim\" wltf: < Oltty: < rf: Properdf: < Properdf: \"& owl: Resource =\" & owl; Transitive Property: \"Oltf: < Oltf: < Property: < < < < < < < < < / > Property defines a symmetrictional property for which two different objects cannot have the same value as the National Insurance Number. <"}, {"heading": "4.6. ENUMERATIONS", "text": "owl: oneOf is a bullet element used to define a class by listing all the elements. < owl: oneOf: parseType = \"Collection\" > < owl: Thing rdf: about = \"# January\" / > < owl: Thing rdf: about = \"# February\" / >: < owl: Thing rdf: about = \"# Desember\" / > < / owl: oneOf >"}, {"heading": "4.7. INSTANCES", "text": "For example, the national insurance number for a person could be as follows: < rdf: Description rdf: ID = \"9801002839\" > < rdf: Type rdf: Resource = \"# Person\" / > < / rdf: Description > Another format could define this as: < Person rdf: ID = \"9801002839\" / >. In fact, more details can be added, such as: < Person rdf: ID = \"9801002839\" / > < uni: Age rdf: Data type = \"& xsd; Integer\" > 27 < uni: Age > < / Person > < Carplat rdf: about = \"CI123TR\" > < isOwntBy rdf: Resource = \"980100993\"; > Course > < 65ltdf:"}, {"heading": "4.8. THE CORE OF OWL LANGUAGE", "text": "This description language contains three expressive sublanguages. These sublanguages are OWL Lite, OWL DL and OWL Full [1].OWL Lite is the simplest version of OWL and offers a classification hierarchy and simple constraints designed for easy implementation. In this sublanguage, there is a certain restriction of OWL DL to a subset of language constructors, with some constraints such as an absence of explicit negation or association; limited expressivity is the disadvantage of this sublanguage. OWL DL (short for: Description Logic) the name of this sublanguage indicates that it has more description logic to represent the relationship between objects and their properties. In fact, it provides maximum expressiveness while maintaining the completeness of the compatible properties. OWL Lite is a sublanguage of OWL DL.The OWL Full sublanguage provides maximum logic to represent the relationship between the objects and their properties."}, {"heading": "5. CONCLUSION", "text": "The language of ontology is the foundation of ontological knowledge systems, the definition of a system for specifying knowledge representation languages; not only does it have a rich and intuitive ability to express and use it, but the body should be easily understood by the computer, by processing and by applications. Thus, a brief overview of the most advanced ontology languages used to express ontology over the Web is provided; all relevant terms have been shown to provide a basic understanding of ontology and the description logic that form the basis of ontology. Therefore, choosing a language for building an ontology is the most important step. In other words, different types of ontological knowledge-based applications require different language mediators to enable arguing on ontology data. These descriptive languages provide richer constructors for the formation of complex class expressions and axioms."}, {"heading": "6. REFERENCES", "text": "1. J. Bruijn and R. Swick, \"Using Ontologies DescriptionFramework (RDF) Model 5. Syntax Specification,\" http: / / www.http http http: / / www.http http: / / www.http: / / www.http: / / www.http: / / www.http: / / www.http: / / www.http: / / www.http: / / / www.http: / / / www.http: / / / www.http: / / / www.facebook-in-information-systems. \""}], "references": [{"title": "Using Ontologies - enabling knowledge sharing and reuse on the semantic web", "author": ["J. Bruijn"], "venue": "Technical Report DERI-2003-10-29, DERI,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "Web Ontology Language: OWL", "author": ["A. Grigoris", "H.Frank van"], "venue": "Handbook on Ontologies in Information Systems\u201d", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2003}, {"title": "The Resource Description Framework (RDF) and its Vocabulary Description Language RDFS", "author": ["B. McBride"], "venue": "in: The Handbook on Ontologies in Information Systems\u201d,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2003}, {"title": "Resource Description Framework (RDF) model and syntax specification", "author": ["O. Lassila", "R. Swick"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1999}, {"title": "W3c resource description framework (rdf) schema specification", "author": ["Working Group"], "venue": "Journal of Computing,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1998}, {"title": "Resource Description Framework (RDF) Schema Specification 1.0", "author": ["D. Brickley", "R.V. Guha"], "venue": "W3C Candidate Recommendation", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "DAML-ONT: An Ontology Language for the Semantic Web,", "author": ["D.L. McGuinness"], "venue": "The Semantic Web,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2002}, {"title": "DAML+OIL (March 2001) Reference Description", "author": ["D. Connolly"], "venue": "World Wide Web Consortium,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2001}, {"title": "\u201dOWL Web Ontology Language Overview", "author": ["D. McGuinness", "F. van Harmelen"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2003}, {"title": "OWL Web Ontology  Language  Reference \u201chttp://www.w3.org/TR/2003/WD-owl-ref20030331", "author": ["M. Dean", "G. Schreiber (eds"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2003}, {"title": "OWL Web Ontology  Language  Guide", "author": ["M. Smith", "C.Welty", "D. McGuinness"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "OWL Web Ontology Language Semantics and Abstract  Syntax", "author": ["P. Patel-Schneider", "P. Hayes", "I. Horrocks"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2003}, {"title": "The Ontology Interchange Language OIL,", "author": ["I. Horrocks"], "venue": "tech. report, Free Univ. of Amsterdam,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2000}, {"title": "Ontology Learning for the Semantic Web", "author": ["A. Maedche"], "venue": "Kluwer Academic Publishers,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2002}, {"title": "Extensible Markup Language (XML) 1.0 \u201c, W3C Recommendation 10-February-1998, http://www.w3.org/TR/REC-xml  The comparison of these languages", "author": ["T. Bray", "J. Paoli", "C.M"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1998}, {"title": "DAML+OIL is not Enough", "author": ["S. Bechhofer", "C. Goble", "I. Horrocks"], "venue": "SWWS http://www.semanticweb.org/SWWS/progra", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2001}, {"title": "PROMPT: Algorithm and tool for automated Ontology merging and alignment", "author": ["N.F. Noy", "M.A. Musen"], "venue": "In 17th National  Conferences on Artificial Intelligence", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2000}, {"title": "oller. RACER system description", "author": ["V. Haarslev", "R. M"], "venue": "In Proc. of the Int. Joint Conf. on Automated Reasoning (IJCAR-01),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2001}, {"title": "The FaCT system", "author": ["I. Horrocks"], "venue": "Harrie de Swart, editor, Proc. of theInt. Conf. on Automated Reasoning with Analytic Tableaux and Related Methods (TABLEAUX-98),", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1998}, {"title": "OWL-P: A Methodology for Business Process Development", "author": ["N. Desai", "A.U. Mallya", "A.K. Chopra", "M.P. Singh"], "venue": "Agent-Oriented Information Systems III, Lecture Notes in Computer Science (LNCS)", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2006}, {"title": "OilEd Normalised Ontology Tutorial \u2013 Biomedical version (forOilEd version 3.4)", "author": ["A Rector"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2002}], "referenceMentions": [{"referenceID": 0, "context": "Current languages used to express Ontologies fall generally into three categories [1]: vocabularies of Ontology defined using natural language, frame-based languages used to build the structure of Ontologies based on explicit statements of class and slot, and those languages based on logic, such as Description Logics.", "startOffset": 82, "endOffset": 85}, {"referenceID": 5, "context": "RDF/RDFS [7], OIL [14], DAML+OIL [9], and OWL [2] are modelling web languages that have already been developed to represent or express Ontologies.", "startOffset": 9, "endOffset": 12}, {"referenceID": 12, "context": "RDF/RDFS [7], OIL [14], DAML+OIL [9], and OWL [2] are modelling web languages that have already been developed to represent or express Ontologies.", "startOffset": 18, "endOffset": 22}, {"referenceID": 7, "context": "RDF/RDFS [7], OIL [14], DAML+OIL [9], and OWL [2] are modelling web languages that have already been developed to represent or express Ontologies.", "startOffset": 33, "endOffset": 36}, {"referenceID": 1, "context": "RDF/RDFS [7], OIL [14], DAML+OIL [9], and OWL [2] are modelling web languages that have already been developed to represent or express Ontologies.", "startOffset": 46, "endOffset": 49}, {"referenceID": 14, "context": "In general, most of these languages are based on XML [16] syntax, but they have different terminologies and expressions.", "startOffset": 53, "endOffset": 57}, {"referenceID": 16, "context": "So the output Ontology of these tools will be in one of the Web Ontology languages supported by editors Such as Prot\u00e9g\u00e9 [18], OWLP [21] and OilEd [22].", "startOffset": 120, "endOffset": 124}, {"referenceID": 19, "context": "So the output Ontology of these tools will be in one of the Web Ontology languages supported by editors Such as Prot\u00e9g\u00e9 [18], OWLP [21] and OilEd [22].", "startOffset": 131, "endOffset": 135}, {"referenceID": 20, "context": "So the output Ontology of these tools will be in one of the Web Ontology languages supported by editors Such as Prot\u00e9g\u00e9 [18], OWLP [21] and OilEd [22].", "startOffset": 146, "endOffset": 150}, {"referenceID": 17, "context": "Many such systems, including RACER [19] and FaCT [20], have been developed recently.", "startOffset": 35, "endOffset": 39}, {"referenceID": 18, "context": "Many such systems, including RACER [19] and FaCT [20], have been developed recently.", "startOffset": 49, "endOffset": 53}, {"referenceID": 1, "context": "As mentioned in [2], some important requirements for quality support should be taken into account when developing languages for encoding Ontologies.", "startOffset": 16, "endOffset": 19}, {"referenceID": 14, "context": "Extensible Markup Language (XML) [16] is widely known in the WWW community because it is a flexible text format and was designed to describe data and to meet the challenges of largescale e-business and electronic publishing, and it plays an important role in exchanging different type of data on the Web.", "startOffset": 33, "endOffset": 37}, {"referenceID": 4, "context": "The Resource Description Framework / Schema (RDFS) [6, 7] has been built upon the XML and RDF models and upon syntax.", "startOffset": 51, "endOffset": 57}, {"referenceID": 5, "context": "The Resource Description Framework / Schema (RDFS) [6, 7] has been built upon the XML and RDF models and upon syntax.", "startOffset": 51, "endOffset": 57}, {"referenceID": 5, "context": "Figure 1: Elements of RDF and RDFS [7]", "startOffset": 35, "endOffset": 38}, {"referenceID": 1, "context": "In general, as mentioned in [2], RDFS\u2019s expressive power is limited; on other hand, RDF/ RDFS provide modelling that concerns organisation of vocabularies in term of hierarchies: subclass and sub-property relationships, domain and range restrictions, and instances of classes.", "startOffset": 28, "endOffset": 31}, {"referenceID": 6, "context": "ANNOTATED DAML+OIL ONTOLOGY MARK-UP DARPA Agent Markup Language (DAML) + Ontology Inference Layer (OIL), DAML+OIL [8, 9] is a semantic mark-up language designed for use for Web resources.", "startOffset": 114, "endOffset": 120}, {"referenceID": 7, "context": "ANNOTATED DAML+OIL ONTOLOGY MARK-UP DARPA Agent Markup Language (DAML) + Ontology Inference Layer (OIL), DAML+OIL [8, 9] is a semantic mark-up language designed for use for Web resources.", "startOffset": 114, "endOffset": 120}, {"referenceID": 13, "context": "DAML+OIL uses a Description Logic style model theory to formalise the meaning of a language [15].", "startOffset": 92, "endOffset": 96}, {"referenceID": 12, "context": "A semantic mark-up language for Web semantics has been built on RDF and RDF/S, this language providing modelling primitives used in frame based and Description Logic oriented Ontologies [14].", "startOffset": 186, "endOffset": 190}, {"referenceID": 6, "context": "Strings, integers or decimal numbers are sometimes used when dealing with DatatypeProperty, which lead to such references as standard location XML Schema datatype decimal [8].", "startOffset": 171, "endOffset": 174}, {"referenceID": 7, "context": "So for example to create an age property, non-negative integers must be mapped into XML Schema [9].", "startOffset": 95, "endOffset": 98}, {"referenceID": 15, "context": "DAML+OIL has many limitations [17]: property constructors, it has no composition or transitive closure, in property types contain transitive and symmetrical, sets are the only collection type in this language (there are no bags or lists), there is no aggregation or comparison in data value, it has only unary and binary relations, and there are neither defaults value or nor variables.", "startOffset": 30, "endOffset": 34}, {"referenceID": 1, "context": "WEB ONTOLOGY LANGUAGE (OWL) Web Ontology Language (OWL) [2, 10, 11, 12, 13], which is a language for processing web information, became a W3C (World Wide Web Consortium) Recommendation in February / 2004.", "startOffset": 56, "endOffset": 75}, {"referenceID": 8, "context": "WEB ONTOLOGY LANGUAGE (OWL) Web Ontology Language (OWL) [2, 10, 11, 12, 13], which is a language for processing web information, became a W3C (World Wide Web Consortium) Recommendation in February / 2004.", "startOffset": 56, "endOffset": 75}, {"referenceID": 9, "context": "WEB ONTOLOGY LANGUAGE (OWL) Web Ontology Language (OWL) [2, 10, 11, 12, 13], which is a language for processing web information, became a W3C (World Wide Web Consortium) Recommendation in February / 2004.", "startOffset": 56, "endOffset": 75}, {"referenceID": 10, "context": "WEB ONTOLOGY LANGUAGE (OWL) Web Ontology Language (OWL) [2, 10, 11, 12, 13], which is a language for processing web information, became a W3C (World Wide Web Consortium) Recommendation in February / 2004.", "startOffset": 56, "endOffset": 75}, {"referenceID": 11, "context": "WEB ONTOLOGY LANGUAGE (OWL) Web Ontology Language (OWL) [2, 10, 11, 12, 13], which is a language for processing web information, became a W3C (World Wide Web Consortium) Recommendation in February / 2004.", "startOffset": 56, "endOffset": 75}, {"referenceID": 0, "context": "These sublanguages are OWL Lite, OWL DL, and OWL Full [1].", "startOffset": 54, "endOffset": 57}], "year": 2010, "abstractText": "Many formal languages have been proposed to express or represent Ontologies, including RDF, RDFS, DAML+OIL and OWL. Most of these languages are based on XML syntax, but with various terminologies and expressiveness. Therefore, choosing a language for building an Ontology is the main step. The main point of choosing language to represent Ontology is based mainly on what the Ontology will represent or be used for. That language should have a range of quality support features such as ease of use, expressive power, compatibility, sharing and versioning, internationalisation. This is because different kinds of knowledge-based applications need different language features. The main objective of these languages is to add semantics to the existing information on the web. The aims of this paper is to provide a good knowledge of existing language and understanding of these languages and how could be used. Index Terms \u2014 Ontology, Ontology language, RDF, RDFS, DAML+OIL , OWL", "creator": "PScript5.dll Version 5.2.2"}}}