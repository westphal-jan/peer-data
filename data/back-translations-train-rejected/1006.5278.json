{"id": "1006.5278", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "28-Jun-2010", "title": "A Survey Paper on Recommender Systems", "abstract": "Recommender systems apply data mining techniques and prediction algorithms to predict users' interest on information, products and services among the tremendous amount of available items. The vast growth of information on the Internet as well as number of visitors to websites add some key challenges to recommender systems. These are: producing accurate recommendation, handling many recommendations efficiently and coping with the vast growth of number of participants in the system. Therefore, new recommender system technologies are needed that can quickly produce high quality recommendations even for huge data sets.", "histories": [["v1", "Mon, 28 Jun 2010 07:20:28 GMT  (1267kb,D)", "https://arxiv.org/abs/1006.5278v1", "11 pages. 5 figures. project report"], ["v2", "Wed, 30 Jun 2010 07:37:17 GMT  (0kb,I)", "http://arxiv.org/abs/1006.5278v2", "This paper needs completion"], ["v3", "Mon, 13 Sep 2010 04:16:30 GMT  (0kb,I)", "http://arxiv.org/abs/1006.5278v3", "This paper needs completion"], ["v4", "Fri, 24 Dec 2010 07:22:48 GMT  (1267kb,D)", "http://arxiv.org/abs/1006.5278v4", "This paper has some typos in it"]], "COMMENTS": "11 pages. 5 figures. project report", "reviews": [], "SUBJECTS": "cs.IR cs.LG", "authors": ["dhoha almazro", "ghadeer shahatah", "lamia albdulkarim", "mona kherees", "romy martinez", "william nzoukou"], "accepted": false, "id": "1006.5278"}, "pdf": {"name": "1006.5278.pdf", "metadata": {"source": "CRF", "title": "A Survey Paper on Recommender Systems", "authors": ["Dhoha Almazro", "Ghadeer Shahatah", "Lamia Albdulkarim", "Mona Kherees", "Romy Martinez", "William Nzoukou"], "emails": ["d_almaz@encs.concordia.ca", "g_shaha@encs.concordia.ca", "l_alabd@encs.concordia.ca", "m_khere@encs.concordia.ca", "romy.martinez@polymtl.ca", "w_nzouko@encs.concordia.ca"], "sections": [{"heading": null, "text": "To address these issues, we have explored several collaborative filtering techniques, such as the item-based approach, which identifies relationships between articles and indirectly calculates recommendations to users based on those relationships; the user-based approach, which also identifies relationships between users of similar tastes and calculates recommendations based on those relationships; in this article, we introduce the topic of the commender system, which provides ways to evaluate the efficiency, scalability and accuracy of the recommender system; and the paper analyzes various algorithms of user-based and item-based techniques for generating recommendations; and a simple experiment with a data-mining application - Wekato applies data-mining algorithms to recommend the system. We conclude with the suggestion of our approach, which could improve the quality of recommender systems; Categories and Subject Descriptors H.3.3 [Information Storage and Retrieval]: Information and Search Retrieval Cluster Working Algorithms: Create this collaborative keywords based on a collaborative, or hard copy system, to distribute the use of all copied items."}, {"heading": "1. INTRODUCTION", "text": "In 1982, John Naisbitt observed, \"We are drowning in information, but starving for knowledge.\" [13] This \"famine\" is caused by the fact that people have many ways to pump data onto the Internet, but not many techniques to process the data into knowledge. Digital libraries, for example, contain tens of thousands of journals and articles. However, it is difficult for users to select the valuable resources they want. What we really need are new technologies that can help us find resources that are of interest among the overwhelming available articles. One of the most successful such technologies is the Recommender System; as defined by M. Deshpande and G. Karypis: \"a personalized information filtering technology that is used either to predict whether a particular article (prediction problem) is pleasing or to identify a set of N elements that will be of interest to a particular user (Top-N recommendation problem).\" Over the years, different approaches to building these filtering systems [3] have been developed to very successful [and] practice."}, {"heading": "1.1 Background", "text": "In fact, most people who are able to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to"}, {"heading": "1.2 Contribution", "text": "This paper contains three primary research papers: 1. Analysis of user-based and item-based prediction algorithms. So-called rating-based algorithm, in which the system recommends only the most popular articles, rather than randomly recommending articles. 2. It is the users who give ratings for articles. 3. An experiment to show how we can derive rules and make predictions from data mining."}, {"heading": "1.3 Organization", "text": "Our work is primarily based on CF algorithms. First, we will introduce and describe collaborative filtering, and then we will talk about two of the most commonly used collaborative filtering algorithms: user-based and item-based algorithms. We will continue by giving an example of an algorithm used in a commercial referral system: the Amazon.com item-toitem CF algorithm. Then we will discuss some of the privacy and security issues associated with referral systems and also describe the metrics used to evaluate referrals. Then, we will describe our own hybrid method. Finally, we will present the results of the experiments we have conducted."}, {"heading": "2. COLLABORATIVE FILTERING ALGORITHMS", "text": "The term \"collaborative filtering\" was first coined by Goldberg to describe an email filtering system called Tapestry4. Tapestry was an electronic messaging system that enabled users to rate messages (\"good\" or \"bad\") or associate text annotations with those messages. Notes and ratings could then be shared between users. Afterwards, a user could compose some queries (on the annotations and ratings) to filter his messages. Although Tapestry provided good recommendations, it had one major drawback: the user had to write complicated queries [3]. The first system to generate automated recommendations was the GroupLens5 system (Resnick et al. 1994; Konstan et al. 1997). The GroupLens system offered users personalized recommendations on Usenet6 postings. It recommended articles that were of interest to users who were similar to the target user."}, {"heading": "2.1 Similarity", "text": "Similarity is defined by data analysis in terms of a distance7 function, such as the Euclidean (Equation 1) and Manhattan (Equation 2).d (i, j) = \u221a (xi1 \u2212 xj1) 2 +. + (xin \u2212 xjn) 2 (1) d (i, j) = | xi1 \u2212 xj1 | +. + | xin \u2212 xjn | (2) In these distance functions, the difference between the corresponding attributes in tuples i and j taken.4Tapestry was the first recommendation support system to be made. It was built at Xerox R \u00a9 Parc, which is also famous for inventing a graphical operating system [21] 5GroupLens Research is a research laboratory at the University of Minnesota specializing in recommendation systems. (Wikipedia, 2010) 6Usenet is a worldwide Internet discussion system in which users read public messages on one or more categories, known as newsgroups."}, {"heading": "2.2 User-Based algorithms", "text": "The basis for the recommendation are articles that are liked by the users. User-based algorithms are recommended on the basis of user preferences in order to find out which articles are similar to the target user. The second step is to calculate the composition of the articles selected by these users and to associate a weight with each article based on its importance in the set and the last step is to select and recommend articles that have the highest weight and have not already been selected by the active user. The most important step is the first step; creating the union of articles that others like or selecting the most important of them is if the group of similar users is known."}, {"heading": "2.3 Item-Based algorithms", "text": "Item-based (or model-based) referrals have been developed because of the problems with user-based referral systems mentioned above. Item-based referrals are a type of collaboration filters (CF) algorithms that look at the similarity between elements to make a prediction, the idea being that a user is most likely to buy items that are similar to the one he has already purchased in the past; that is, by analyzing the purchase information, we can have an idea of what he might want in the future (Deshpande, Karypis 2004). Historical information can be analyzed explicitly (by looking at the explicit reviews of users made on the items) or implicitly (for example, by rating the categories of items). Item-based algorithms are two-step algorithms; in the first step, the algorithms can scan scan scan the past information of users; the ratings they give to the items during this step."}, {"heading": "2.4 The Amazon.com example", "text": "Amazon.com is an e-commerce website where users can purchase books, music and other goods. It has a database of more than 29 million customers and several million catalogue items. Amazon.com uses an algorithm based on item-based collaborative filtering to make its recommendations, and its algorithm, known as item-to-item collaborative filtering, works by first comparing each user's purchased and rated items with similar items (as in the item-based CF, which is used to create an item-to-item matrix where items are similar to each other). Amazon.com then combines these similar items into a recommendation list [14]. The most similar items are found using the 2.4 algorithm (G. Linden, B.Smith, and J. York, 2003).In order to improve the scalability and performance of the items, Amazon.com has built its recommenders as two components, an offline matrix that generates the item component."}, {"heading": "3. EVALUATION", "text": "User satisfaction is the most important factor for the success of a receiver system, which is an accurate recommendation within a reasonable period of time. In commercial systems, it is measured by the number of recommended items that were purchased (and of course not returned!) [9]. In non-commercial systems, it is measured by user feedback. To properly deploy a receiver system, it is important to examine the area for which it is used [9]. This section focuses on the evaluation of receiver systems for different systems. Afterwards, we will present three key metrics for evaluating the quality of receiver systems. Finally, we will address the challenges of using receiver systems."}, {"heading": "3.1 Different Systems, Different Algorithms", "text": "In other words, some algorithms work well in situations where elements are more than users (e.g., a recommendation system that suggests tens of thousands of research papers to thousands of users), other algorithms are designed for the opposite situation where users are more than users (e.g., MovieLens, a movie recommendation system, has a record of 65,000 users and 5000 movies). [9] In addition, Recommender Systems varies according to the type of data sets. Due to the static nature of the elements, we can pre-calculate and store some of the values of the algorithm. However, in some cases where similarities are much greater than the differences, it is efficient to calculate the differences and then extract the similarity [6]."}, {"heading": "3.2 Recommendation Metrics", "text": "This year it is so far that it will only take a few days until it will be so far again, until it is so far again."}, {"heading": "3.3 Challenges of Recommender Systems", "text": "When recommendation systems rely only on rated articles, many good referral articles are missing, which remain hidden because no one has rated them. This is called coverage metrics, i.e. the percentage of articles for which a referral agent can make predictions [16]. This is one of the problems faced by systems that use referral systems. Another challenge is the problem of rarity, which only a few articles rate [16]. For systems that have just been established, they face the cold start problem, where the referral system is unable to accurately recommend due to the fact that only a few reviews have been made for articles. Noise, data redundancy and overfitting are also other challenges faced by referral agents [23]. To reduce the problem of rarity, some researchers have proposed a remuneration system in which users are rewarded for providing reviews for articles. Others have proposed to capture the reviews by implicit consideration of user behavior [20]. Another approach to the ban is to automatically rely on filtering or evaluating agents [20]."}, {"heading": "4. SECURITY AND PRIVACY ISSUES", "text": "The collaborative filter of CF referrals requires personal information from a user in order to make personalized recommendations. The more users express their preferences on articles, the more accurate becomes the recommendation they receive. As with all data mining systems, users must trust that the referrer adequately protects their information. Furthermore, since the user does not know how the recommendation is executed, he should trust the correctness of the referrer [11]. The referrer should not violate the trust of users."}, {"heading": "4.1 Privacy Risks", "text": "In most systems, users must register before they can benefit from a personalized recommendation, and the registration process often requires them to provide some personal information, such as name, date of birth, zip code and e-mail. Combinations of these required fields (attributes) can be highly identifying (quasi-identification10). Personal Preferences 10 Quasi-identification10: \"Variable values or combinations of variables, as expressed in many recipient systems, can become quasi-identifying characteristics, especially if some users express unusual preferences (S. Lam, D. Frankowski and J. Riedl, 2006). User preferences could then be used to re-identify them in another system. A company such as Netflix could, for example, store the preferences of some users in its system in order to find them on a competing website. Since not every user would like their information to be disclosed or misused, the recipient should also be confronted with problems such as the issuance of the recommended security systems, or the misuse of such information frequently."}, {"heading": "4.2 Shilling Attacks", "text": "A shilling attack is an attack in which the recommendations of the system for a particular item are manipulated by presenting misrepresented opinions to the system (S. Lam, D. Frankowski and J. Riedl, 2006).The attack can have two objectives: to reduce the ratings of all items outside the target (push attack) to make them more recommendable. It can also increase the ratings (nuke attack) of other items to make the target less recommendable. Two simple types of shilling attacks are RandomBot and AverageBot. \u2022 A RandomBot is a filter offering that randomly evaluates items outside the target with either the minimum rating (for nuke attack) or the maximum rating (for push attack). \u2022 An AverageBot is a filter bot in which the rating is based on the average rating of each object that follows a normal distribution, with the average rating for that object corresponding to either the minimum rating (for nuke attack) or the maximum rating (for push attack). \u2022 An AverageBot is a filter offering in which the rating is based on the average rating of each object that randomly evaluates items outside the target, with the average rating for that object corresponds to either the minimum rating (for nuke attack) or the maximum rating (for push attack)."}, {"heading": "5. OUR APPROACH", "text": "After studying collaborative filtering with its two approaches item-based and user-based, we found that each approach has its advantages and disadvantages. Thus, we are areable values within a dataset that are not structural unique, but empirically unambiguous and therefore in principle unambiguously identify a population unit. \"(OECD, Glossary of Statistical Term, 2010) 11\" A CAPTCHA or Captcha is a kind of challenge response test that is used in the calculation to ensure that the answer is not generated by a computer. \"(Wikipedia, 2010) Proposing a new hybrid technique that combines the two approaches and attempts to come up with a new approach that is more precise and efficient. The proposed approach starts with clustering all items and users based on demographic information. In other words, items and users are categorized based on personal attributes and recommendations are made based on demographic categorization."}, {"heading": "6. EXPERIMENTS", "text": "Weka provides an environment for comparing learning algorithms, graphical user interface, comprehensive data preprocessing tools, learning algorithms and evaluation methods. In addition, Weka provides the implementation of regression, clustering, classification, association rules and feature selection12. In our experiment we used the classification algorithm J48, a Java implementation of the C4.513 algorithm in Weka (Wikipedia, 2010). Weka also provides many methods for loading data such as (ARFF) or (CSV), in our experiment we use a file in CSV format."}, {"heading": "6.1 Dataset", "text": "In the first part of our experiment, we entered a. \"csv\" file with the following parameters: UserID, age, gender, student, have children, movie category. The following table (Table 1) contains more details for each parameter. In the second part, the. \"csv\" file contained the following parameters: UserID, movie title, movie categories: action, adventure, animation, children, comedy, crime, documentary, drama, fantasy, film noir, horror, musical, mystery, romance, sci-fi, thriller, war. Table 2 contains more details for each parameter."}, {"heading": "6.2 Data cleaning and preparation", "text": "Both sets of data were populated with the program spawner14. After determining which parameters we wanted to generate, we entered them into the spawner and received some sample data sets. Each set contained 300 data sets. Each data set was manually modified to ensure that the data set was coherent and logical. The movie titles in the article records were identical to titles provided by the MovieLens website. It is important to note that the same movie title can be viewed and evaluated by different users. 12IBM R \u00a9 developoperworks website 13C4.5 is an algorithm used to generate a decision tree developed by Ross Quinlan from his previous ID3 algorithm. (Wikipedia, 2010) 14Spawner is software that can generate patterns based on certain criteria. Once we have generated the data sets, users and article sets, we made sure that some entries were blank to perform some presentations."}, {"heading": "6.3 Results", "text": "The implementation of the recommendation system was based on two different input files. In fact, our goal was to recommend a film title to a user based on his profile and also based on the category of film the film belongs to. With this result (Figure 4), in the first part of the experiment, we are able to predict what type of film a particular user with certain characteristics would like to see. Thus, for example, we can most likely recommend an animated film to an adult who is also a student with children. On the other hand, a male teenager who is a student without children would prefer an action film. Therefore, in the second part of the experiment, we can recommend a specific film category based on a user's profile. We used a user-based algorithm based on demographic data to generate our data.The accuracy for this experiment was 61.43% of the correctly classified elements. With this result (Figure 5), in the second part of the experiment, we are able to recommend a film title based on the user's profile."}, {"heading": "7. CONCLUSION", "text": "Each of these algorithms has its advantages and disadvantages; user-based algorithms are precise but not scalable; item-based algorithms are scalable but not as precise as user-based algorithms. Other approaches using Rough Set Prediction, Slope One Scheme Smoothing and other methods have been developed to build item-based and user-based algorithms. As with all systems that contain user data, recommendation systems have to deal with some privacy and security issues. In summary, recommendation systems are powerful systems that add value to businesses and businesses; they are a relatively new technology and will only improve in the future."}, {"heading": "8. ACKNOWLEDGMENTS", "text": "The authors would like to thank Dr. Benjamin Fung for his insightful help in writing this paper, which was written using the ACM SAC 2010 LATEX2 template."}, {"heading": "9. REFERENCES", "text": "[1] Bigdeli, E., and Bahmani, Z. Comparing accuracy of cosine-based intelligence, A. PruzA, May 13, 2004 Similarities and correlation-based similarity algorithms in tourism recommendation systems. In Management of Innovation and Technology, 2008. ICMIT 2008. 4th IEEE International Conference on (21-24 2008), pp. 469-474. [2] Chirita, P.-A., Konformism, W., and Zamfir, C. Preventing shilling attacks in on (21-24 2008), pp. 469-474. [2] Chirita, P.-A., Conformism, USA, 2005), ACM, 67-74. [3] Deshpande, M., and Karypis, G. Riegel. Item-based top- < i > n < < / i > recommendation algorithms."}], "references": [{"title": "Comparing accuracy of cosine-based similarity and correlation-based similarity algorithms in tourism recommender systems", "author": ["E. Bigdeli", "Z. Bahmani"], "venue": "In Management of Innovation and Technology,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2008}, {"title": "Preventing shilling attacks in online recommender systems", "author": ["Chirita", "P.-A", "W. Nejdl", "C. Zamfir"], "venue": "Proceedings of the 7th annual ACM international workshop on Web information and data management (New York, NY,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Item-based top-<i>n</i> recommendation algorithms", "author": ["M. Deshpande", "G. Karypis"], "venue": "ACM Trans. Inf. Syst. 22,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2004}, {"title": "A scalable, accurate hybrid recommender system", "author": ["M.A. Ghazanfar", "A. Prugel-Bennett"], "venue": "International Workshop on Knowledge Discovery and Data Mining", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2010}, {"title": "An agent-based recommender system to support collaborative web search based on shared user interests", "author": ["D. Godoy", "A. Amandi"], "venue": "CRIWG", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Data Mining: Concepts and Techniques, second ed", "author": ["J. Han", "M. Kamber"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2006}, {"title": "Explaining collaborative filtering recommendations", "author": ["J.L. Herlocker", "J.A. Konstan", "J. Riedl"], "venue": "Proceedings of the 2000 ACM conference on Computer supported cooperative work (New York, NY,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2000}, {"title": "Evaluating collaborative filtering recommender systems", "author": ["J.L. Herlocker", "J.A. Konstan", "L.G. Terveen", "J.T. Riedl"], "venue": "ACM Trans. Inf. Syst. 22,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "Do you trust your recommendations? an exploration of security and privacy issues in recommender systems", "author": ["S.K. Lam", "D. Frankowski", "J. Riedl"], "venue": "ETRICS", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2006}, {"title": "Shilling recommender systems for fun and profit", "author": ["S.K. Lam", "J. Riedl"], "venue": "Proceedings of the 13th international conference on World Wide Web (New York, NY,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2004}, {"title": "Discovering knowledge in Data", "author": ["D. Larose"], "venue": "Wiley Interscience,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2008}, {"title": "Amazon.com recommendations: Item-to-item collaborative filtering", "author": ["G. Linden", "B. Smith", "J. York"], "venue": "IEEE Internet Computing", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2003}, {"title": "Being accurate is not enough: how accuracy metrics  have hurt recommender systems. In CHI \u201906: CHI \u201906 extended abstracts on Human factors in computing systems", "author": ["S.M. McNee", "J. Riedl", "J.A. Konstan"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2006}, {"title": "Qualitative analysis of user-based and item-based prediction algorithms for recommendation agents", "author": ["M. Papagelis", "D. Plexousakis"], "venue": "Engineering Applications of Artificial Intelligence 18,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2005}, {"title": "Alleviating the sparsity problem of collaborative filtering using trust inferences", "author": ["M. Papagelis", "D. Plexousakis", "T. Kutsuras"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Content-based recommendation systems", "author": ["M. Pazzani", "D. Billsus"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2007}, {"title": "Item-based collaborative filtering recommendation algorithms", "author": ["B. Sarwar", "G. Karypis", "J. Konstan", "J. Reidl"], "venue": "Proceedings of the 10th international conference on World Wide Web (New York, NY,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2001}, {"title": "Using semi-intelligent filtering agents to improve prediction quality in collaborative filtering", "author": ["B.M. Sarwar"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1998}, {"title": "Beyond recommender systems: Helping people help", "author": ["L. Terveen", "W. Hill"], "venue": null, "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2001}, {"title": "Instance selection techniques for memory-based collaborative", "author": ["K. Yu", "X. Xu", "J. Tao", "M. Ester", "Kriegel", "H.-P"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2002}], "referenceMentions": [{"referenceID": 10, "context": "\u201d [13].", "startOffset": 2, "endOffset": 6}, {"referenceID": 0, "context": "Karypis: \u201ca personalized information filtering technology used to either predict whether a particular user will like a particular item (prediction problem) or to identify a set of N items that will be of interest to a certain user (top-N recommendation problem)\u201d [1].", "startOffset": 263, "endOffset": 266}, {"referenceID": 2, "context": "Over the years, various approaches for building recommender systems have been created [3]; collaborative filtering has been a very successful approach in both research and practice, and in information filtering and e-commerce applications [22].", "startOffset": 86, "endOffset": 89}, {"referenceID": 13, "context": "quality of the results obtained by the utilization of a more sophisticated algorithm [16].", "startOffset": 85, "endOffset": 89}, {"referenceID": 16, "context": "Each user ui has a list of item Iui on which he has expressed his opinion [19].", "startOffset": 74, "endOffset": 78}, {"referenceID": 11, "context": "For example, whenever a user rated an items, the algorithm constructs a search query to find other popular items by the same author, artist, or director, or with similar keywords or subjects [14].", "startOffset": 191, "endOffset": 195}, {"referenceID": 15, "context": "Content based algorithms analyze item descriptions to identify items that are of particular interest to the user [18].", "startOffset": 113, "endOffset": 117}, {"referenceID": 13, "context": "As stated by Papagelis, collaborative filtering algorithms have \u201c been extensively adopted by both research and e-commerce recommendation systems in order to provide an intelligent mechanism to filter out the excess of information available and to provide customers with the prospect to effortlessly find out items that they will probably like according to their logged history of prior transactions\u201d [16].", "startOffset": 401, "endOffset": 405}, {"referenceID": 6, "context": "CF algorithms do not depend on error-prone machine analysis of content [8].", "startOffset": 71, "endOffset": 74}, {"referenceID": 2, "context": "Although Tapestry provided good recommendations, it had one major drawback; the user was required to write complicated queries [3].", "startOffset": 127, "endOffset": 130}, {"referenceID": 18, "context": "It was build at Xerox R \u00a9Parc which also famous for inventing graphical operating system[21] GroupLens Research is a research lab at the University of Minnesota that specialize in recommender systems.", "startOffset": 88, "endOffset": 92}, {"referenceID": 5, "context": "However if the attribute is categorical such as color, we need more sophisticated methods to differentiate the grading (for example color blue vs black) [7].", "startOffset": 153, "endOffset": 156}, {"referenceID": 2, "context": "The similarity is given by sim(i, j) = P (i|j)\u00d7\u03b1 where \u03b1 is a factor dependent on the problem [3].", "startOffset": 94, "endOffset": 97}, {"referenceID": 2, "context": "Pearson correlation is the most used similarity function in the two approaches of CF based recommender; user-based or memory-based and item-based or model based [3].", "startOffset": 161, "endOffset": 164}, {"referenceID": 3, "context": "The algorithm considers that users who are similar (have similar attributes) will be interested on same items [4].", "startOffset": 110, "endOffset": 113}, {"referenceID": 2, "context": "User based algorithms are three steps algorithm; the first step is to profile every user in order to find which ones are similar to the target user, the second step is to compute the union of the items selected by these users and associate a weight with each item based on its importance in the set and the third and final step is to select and recommend items that have the highest weight and have not been already selected by the active user [3].", "startOffset": 444, "endOffset": 447}, {"referenceID": 2, "context": "the k-Nearest Neighbors algorithm is the most used because of its efficiency [3].", "startOffset": 77, "endOffset": 80}, {"referenceID": 13, "context": "The similarity between ux and uy is given by [16]:", "startOffset": 45, "endOffset": 49}, {"referenceID": 13, "context": "The similarity between ux and uy is given by [16]:", "startOffset": 45, "endOffset": 49}, {"referenceID": 4, "context": "After users have been clustered, the algorithms pursue by finding popular items between those users and recommend them[5].", "startOffset": 118, "endOffset": 121}, {"referenceID": 14, "context": "Because of that it is possible that the similarity between two users cannot be defined thus making the algorithm useless [17].", "startOffset": 121, "endOffset": 125}, {"referenceID": 2, "context": "For example in the k-nearest neighbors algorithm, finding the optimal k requires a large amount of computations the k-nearest neighbors for every users browsing the system, the latency (waiting time) for each recommendation will increase and may it affect real-time performance of the system [3].", "startOffset": 292, "endOffset": 295}, {"referenceID": 13, "context": "both rated item i and item j, the Pearson correlation coefficient of their associated columns in the user-item matrix and is given by the following formula [16].", "startOffset": 156, "endOffset": 160}, {"referenceID": 2, "context": "Despite their slowness, experiments have shown that user-based algorithm produce more accurate recommendation than item-based algorithms [3].", "startOffset": 137, "endOffset": 140}, {"referenceID": 11, "context": "Afterward, it combines those similar items into a recommendation list [14].", "startOffset": 70, "endOffset": 74}, {"referenceID": 11, "context": "The online component is dependent only on how many titles the user has purchased or rated [14].", "startOffset": 90, "endOffset": 94}, {"referenceID": 7, "context": "In commercial systems, it is measured by number of recommended items that has been bought (and of course not returned!)[9].", "startOffset": 119, "endOffset": 122}, {"referenceID": 7, "context": "To properly employ a recommender system, it is important to study the domain for which it is being used [9].", "startOffset": 104, "endOffset": 107}, {"referenceID": 7, "context": "MovieLens, a system for recommending movies, has a data set of 65000 users and 5000 movies) [9].", "startOffset": 92, "endOffset": 95}, {"referenceID": 16, "context": "However, the same technique is not efficient for items with a dynamic nature [19].", "startOffset": 77, "endOffset": 81}, {"referenceID": 19, "context": "To ensure user satisfaction all the time, algorithms must not work on thousands, but millions of item within reasonable time [23].", "startOffset": 125, "endOffset": 129}, {"referenceID": 19, "context": "or what he is looking for precisely to gain the user\u2019s trust [23].", "startOffset": 61, "endOffset": 65}, {"referenceID": 16, "context": "One of the widely used metrics is the Mean Absolute Error (MAE); the lower the value of MAE the more accurate the result is [19].", "startOffset": 124, "endOffset": 128}, {"referenceID": 16, "context": "Receiver Operating Characteristic (ROC) is one of the metrics that help assessing the accuracy of predictions [19].", "startOffset": 110, "endOffset": 114}, {"referenceID": 12, "context": "Yes the recommendation was accurate enough but it was not useful she already visited these places [15].", "startOffset": 98, "endOffset": 102}, {"referenceID": 12, "context": "Moreover, the recommendations that are most accurate according to the standards metrics are sometimes not the recommendations that are useful to users [15].", "startOffset": 151, "endOffset": 155}, {"referenceID": 19, "context": "Efficiency In order for a recommender system to be reliable, not only it must be accurate, but also it must process within a reasonable time, make good use of the available resources, and handle hundred requests per second [23].", "startOffset": 223, "endOffset": 227}, {"referenceID": 16, "context": "Therefore, we will end up with a quick look up table that speeds up the recommendation process; however, an O(n) space is needed for n items [19].", "startOffset": 141, "endOffset": 145}, {"referenceID": 16, "context": "This attempt will reduce the size of the lookup table but we will have a trade-off: smaller model size means a reduced quality [19].", "startOffset": 127, "endOffset": 131}, {"referenceID": 19, "context": "In some situation, the knowledge of customer preferences changes, memory consumption reduces and the time used for computation increases, therefore the efficiency of the recommender system in dynamic datasets depends on the amount of calculation required in an algorithm [23].", "startOffset": 271, "endOffset": 275}, {"referenceID": 19, "context": "Another approach to speed up the calculation is to use data structure or other data mining techniques such as hierarchical clustering since searching for neighbors is faster than scanning the whole tree [23].", "startOffset": 203, "endOffset": 207}, {"referenceID": 13, "context": "This is called the Coverage metrics which is the percentage of items for which a recommender agent can provide predictions [16].", "startOffset": 123, "endOffset": 127}, {"referenceID": 13, "context": "Another challenge is the sparsity issue which is rating few of the total number of items [16].", "startOffset": 89, "endOffset": 93}, {"referenceID": 19, "context": "Noise, data redundancy, and overfitting are also other challenges of recommendation agent [23].", "startOffset": 90, "endOffset": 94}, {"referenceID": 17, "context": "Others have proposed to capture the ratings by implicitly look at the user\u2019s behavior [20].", "startOffset": 86, "endOffset": 90}, {"referenceID": 17, "context": "Another approach to solve the sparsity problem is to rely filtering agent called filterbots or dynamic agents to automatically rate items [20].", "startOffset": 138, "endOffset": 142}, {"referenceID": 8, "context": "Moreover, since the user does not know how the recommendation is performed, he should trust the accuracy of the recommender[11].", "startOffset": 123, "endOffset": 127}, {"referenceID": 1, "context": "Since being recommended is often promise of good selling, recommender are often target of manipulation from producers or malicious users [2].", "startOffset": 137, "endOffset": 140}, {"referenceID": 9, "context": "Recent research by Dellarocas and others have shown that even popular systems such as Amazon and eBay have (and are) being manipulated [12].", "startOffset": 135, "endOffset": 139}], "year": 2016, "abstractText": "Recommender systems apply data mining techniques and prediction algorithms to predict users\u2019 interest on information, products and services among the tremendous amount of available items. The vast growth of information on the Internet as well as number of visitors to websites add some key challenges to recommender systems. These are: producing accurate recommendation, handling many recommendations efficiently and coping with the vast growth of number of participants in the system. Therefore, new recommender system technologies are needed that can quickly produce high quality recommendations even for huge data sets. To address these issues we have explored several collaborative filtering techniques such as the item based approach, which identify relationship between items and indirectly compute recommendations for users based on these relationships. The user based approach was also studied, it identifies relationships between users of similar tastes and computes recommendations based on these relationships. In this paper, we introduce the topic of recommender system. It provides ways to evaluate efficiency, scalability and accuracy of recommender system. The paper also analyzes different algorithms of user based and item based techniques for recommendation generation. Moreover, a simple experiment was conducted using a data mining application -Wekato apply data mining algorithms to recommender system. We conclude by proposing our approach that might enhance the quality of recommender systems.", "creator": "LaTeX with hyperref package"}}}