{"id": "1007.1024", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jul-2010", "title": "Model Counting in Product Configuration", "abstract": "We describe how to use propositional model counting for a quantitative analysis of product configuration data. Our approach computes valuable meta information such as the total number of valid configurations or the relative frequency of components. This information can be used to assess the severity of documentation errors or to measure documentation quality. As an application example we show how we apply these methods to product documentation formulas of the Mercedes-Benz line of vehicles. In order to process these large formulas we developed and implemented a new model counter for non-CNF formulas. Our model counter can process formulas, whose CNF representations could not be processed up till now.", "histories": [["v1", "Wed, 7 Jul 2010 00:13:11 GMT  (18kb)", "http://arxiv.org/abs/1007.1024v1", "In Proceedings LoCoCo 2010,arXiv:1007.0831"]], "COMMENTS": "In Proceedings LoCoCo 2010,arXiv:1007.0831", "reviews": [], "SUBJECTS": "cs.AI cs.LO cs.SC", "authors": ["andreas k\\\"ubler", "christoph zengler", "wolfgang k\\\"uchlin"], "accepted": false, "id": "1007.1024"}, "pdf": {"name": "1007.1024.pdf", "metadata": {"source": "CRF", "title": "Model Counting in Product Configuration", "authors": ["A.J. K\u00fcbler", "C. Zengler", "W. K\u00fcchlin", "Andreas J. K\u00fcbler", "Christoph Zengler", "Wolfgang K\u00fcchlin"], "emails": ["kuebler@informatik.uni-tuebingen.de", "zengler@informatik.uni-tuebingen.de", "kuechlin@informatik.uni-tuebingen.de"], "sections": [{"heading": null, "text": "I. Lynce and R. Treinen (ed.): Workshop on Logics for Component Configuration (LoCoCo 2010) EPTCS 29, 2010, pp. 44-53, doi: 10.4204 / EPTCS.29.5c \u00a9 A.J. Ku \ufffd bler, C. Zengler, W. Ku \ufffd chlinModel Counting in Product ConfigurationAndreas J. Ku \ufffd bler Christoph Zengler Wolfgang Ku \ufffd chlinSymbolic Computation Group, Wilhelm Schickard Institute for Computer Science, Universita \ufffd t Tu \ufffd bingen, Germany http: / / www-sr.informatik.uni-tuebingen.de {kuebler, zengler, kuechlin} @ informatik.uni-tuebingen.deWe describe how to use propositional model counting for a quantitative analysis of product configuration data. Our approach calculates valuable meta information such as the total number of valid configurations or the relative frequency of components. We can now use this information to evaluate the large-scale CNC vehicle error assessments."}, {"heading": "1 Introduction", "text": "This year, it is only a matter of time before that happens, until that happens, until an agreement is reached."}, {"heading": "2 Model Counting", "text": "Let's have a formula in propositional logic, and let's call the finite set of variables that occur in formula 1 problems. (We follow the convention to write that one formula or another must be executed in relation to the model in question in relation to the other. (We follow the convention to write what the other formula is in relation to the other, which in relation to the model in question is the problem of calculating the number of all complete mappings). (We follow the analogy to SAT, which is the canonical NP-complete problem, # SAT is the problem of calculating all complete mappings for which we are the class of all problems p, for which there is a non-deterministic polynomial class. (p) Such an instance exists for each instance I (p) of p there are just as many compilations of M (p) as solutions for which I (p)."}, {"heading": "3 Applications in Product Configuration", "text": "In this section we will show possible application fields for model counting in the product configuration. We will use the definition of a configuration problem as indicated in [11, Definition 1]: A configuration problem is a triple (V, D, E), where V is a set of variables x1, x2,..., xn, D is a set of their finite domains D1, D2,..., Dn and vice versa. A valid configuration is a set of statement formulas about atomic sentences xi = v, where v, conditions are specified that the variable mappings must meet. For each formula we have vars (VP) V. A valid configuration is an association \u03b1 with domain (\u03b1) = V, so that v, c, c, x, x, x, x, x, x, is the configuration. In this paper we will consider the specific case where we only have statement formulas V and hDi = propositions."}, {"heading": "3.1 Number of Valid Configurations", "text": "The first question that naturally arises is the total number of valid product configurations v = # SAT (BA). Obviously, 2 | V | is an upper limit for v, but in most cases, this number v can demonstrate the sheer complexity of a given product. Section 4.2 supports this assertion by calculating some of these numbers for Mercedes-Benz car lines. It is also possible to count valid configurations of a product under certain conditions. For example, we can force P-O options to be selected before performing # SAT (BA).This can be achieved by calculating # SAT (BA).This method can provide important information about the influence of certain options o on the number of valid configurations.This information in turn can be used for specific domain-specific variable heuristics for the SAT solving process of formulas of the present application."}, {"heading": "3.2 Rating Errors", "text": "Observations from formal methods of software validation [3] tell us that the more bugs you report, the less likely they are to eventually be fixed. Developers and product documentation engineers tend to be overwhelmed quite quickly with large-scale bug reports that leave them unsure where to start fixing bugs. Counting models could help classify bugs according to their severity. We consider scenarios in which the satisfaction of the input formula indicates error situations - so any satisfactory matching can be interpreted as a counterexample. In configuration problems, such situations usually occur when the mutually exclusive component inclusion is verified. Let c1, c2, the binary flags for the inclusion of two mutually exclusive components.Any assignment that is satisfactory, c1, c2, can be interpreted as a product that is mutually exclusive."}, {"heading": "3.3 Measuring Documentation Quality", "text": "This product documentation is either created automatically or maintained manually by experts. In complex products with thousands of options, this documentation develops over years. This fact can be seen in the development of the number of valid configurations of different versions of the documentation for the same product. We have made observations where the number of valid configurations for the same product has decreased from a size of 1034 to a size of 1010 due to better and more detailed documentation (see paragraph 4.2). Model counting can also be used interactively by the documentation engineer. It is immediately apparent the effects of adding or changing certain configurations with respect to valid configurations. For example, adding a new configuration does not change the number of valid configurations and can therefore be omitted."}, {"heading": "4 Example: Automotive Product Configuration", "text": "In this section, we give examples of how to apply the statement model counting to formulas used in the design testing of customer orders at Mercedes-Benz. Therefore, we will first give a brief introduction to the terms used in the product documentation and to the configuration system used in the mass production of individually configured, personalized cars."}, {"heading": "4.1 Formula Semantics", "text}, {"heading": "4.2 Model Counting in the Mercedes-Benz Scenario", "text": "In the course of this work, we will present some results gathered in Section 3 based on model counting formulas used by Mercedes-Benz. Since these formulas are not originally CNF compliant, we have developed a new exact statement model counter based directly on the raw formulas without prior normalization. It is based on a re-implementation of the non-CNF SAT solver introduced by Thiffault and others. [23] In order to use a CNF model counter, it is important to use a transformation method that maintains the number of models of model counting with recognition and caching. Note: When converting a non-CNF-compliant formula into a CNF formula, it is important to use a transformation method that maintains the number of models of model counting, i.e., when converting a non-CNF formula into a CNF formula, it is important to find a formula for transformation T."}, {"heading": "4.2.1 Number of Valid Configurations", "text": "Counting pure PO formulas without extensions (i.e. the calculation of # SAT (POF), the number of different valid orders) shows the enormous number of constructible vehicles due to the customer's choice: we were able to calculate results from 5.9 \u00d7 1010 to 9.9 \u00d7 10103 constructible orders for the Mercedes-Benz E-Class line of cars (see Table 1). C212 A, C212 B and C212 C show different body shapes of the same car line. These impressive figures also provide invaluable support in arguing for formal methods used in large configuration settings. Our non-CNF model counter was applied directly to the non-normalized POFs, whereas Cachet and c2d were transformed with Tseitin (T \u2194) CNF versions as input. Our comparison states that maintaining the formula structure pays off by directly thinking about input without prior normalization."}, {"heading": "4.2.2 Rating Errors", "text": "In practice, it is highly desirable to classify the results of an automated verifier. In the real world, nothing is perfect, and every corrective action comes at a price. If we have an error condition represented by a formula that is satisfactory, then # SAT (p1) can give an indication of how many cars are potentially affected by the bug. Take, for example, physically overlapping parts p1, p2: If there is a constructible order based on the POF that includes both p1 and p2, each assignment \u03b1 with \u03b1 | = POF-P (p1) \u0445 P (p2) will describe an incorrectly constructible order. Thus, the calculation of # SAT (POF-P (p1) and P (p1) yields the total number of incorrectly constructible jobs wr. p1 and p2."}, {"heading": "4.2.3 Measuring Documentation Quality", "text": "Accurate model counting also raises questions about the appropriate language and method of product documentation. We are currently implementing symbolic verification methods for detection and help2Environment: Mac OS X (10.5), 2 \u00d7 4 Core Intel Xeon (2.8 GHz each), 32 GB of memory, using 1 core to avoid documentation errors. Knowledge of the exact model counting indicates (at least at management decision level) the complexity of error detection, e.g. to prove that a part is no longer needed in a 2002 model series, it must be verified that none of the 1024 cars needs the part. Our results also suggest that the model counting of POFs could serve as a yardstick for the maturity of product documentation (see Section 3.3): Model counting of an early developer version of C212 A yielded 2.9 \u00d7 1034 models, whereas the version in production use with Mercedes-Benz only yields 5.9 \u00d7 1010."}, {"heading": "5 Conclusion & Future Work", "text": "In this paper, we introduced new methods for quantitative analysis of configuration formulas using model counting. In addition, we described methods for obtaining additional information such as the total number of valid configurations, the relative frequency of options in valid configurations, or the severity of errors. This information can be used to accelerate future SAT-solving processes of similar formulas, to illustrate the complexity of the problem, or to measure the quality of documentation. Using our non-CNF model, we were able to calculate results for formulas whose CNF representations are too large for modern model counters to cope with. Our results demonstrate the applicability of our newly introduced analysis methods to configuration problems on an industrial scale. As our benchmarks show, model counting for large statement formulas is still a fairly time-consuming task. In d-DNNF composition of static hayristics based on hypergraph composition, the composition has been successfully applied to great problems."}, {"heading": "6 Acknowledgement", "text": "We thank Matthias Sauter (formerly STZ OIT) for his helpful advice and support."}], "references": [{"title": "Algorithms and Complexity Results for #SAT and Bayesian Inference", "author": ["Fahiem Bacchus", "Shannon Dalmao", "Toniann Pitassi"], "venue": "Proceedings of the FOCS \u201903,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "Counting Models Using Connected Components", "author": ["Roberto J. Bayardo", "Jr.", "Joseph Daniel Pehoushek"], "venue": "Proceedings of the 17th National Conference on Artificial Intelligence and 12th Conference on Innovative Applications of Artificial Intelligence,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2000}, {"title": "A Few Billion Lines Of Code Later: Using Static Analysis to Find Bugs in the Real World", "author": ["Al Bessey", "Ken Block", "Ben Chelf", "Andy Chou", "Bryan Fulton", "Seth Hallem", "Charles Henri-Gros", "Asya Kamsky", "Scott McPeak", "Dawson Engler"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "The Good Old Davis-Putnam Procedure Helps Counting Models", "author": ["Elazar Birnbaum", "Eliezer L. Lozinskii"], "venue": "Journal of Artificial Intelligence Research", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1999}, {"title": "Graph-Based Algorithms for Boolean Function Manipulation", "author": ["Randal E. Bryant"], "venue": "IEEE Transactions on Computers", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1986}, {"title": "Boolean Satisfiability with Transitivity Constraints", "author": ["Randal E. Bryant", "Miroslav N. Velev"], "venue": "Computer Aided Verification,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2000}, {"title": "On the Tractable Counting of Theory Models and its Application to Truth Maintenance and Belief Revision", "author": ["Adnan Darwiche"], "venue": "Journal of Applied Non-Classical Logics", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2001}, {"title": "New Advances in Compiling CNF to Decomposable Negational Normal Form", "author": ["Adnan Darwiche"], "venue": "Proceedings of the ECAI", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "A Machine Program for Theorem-Proving", "author": ["Martin Davis", "George Logemann", "Donald Loveland"], "venue": "Communications of the ACM", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1962}, {"title": "A Computing Procedure for Quantification Theory", "author": ["Martin Davis", "Hilary Putnam"], "venue": "Journal of the ACM", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1960}, {"title": "Fast Backtrack Free Product Configuration using Precompiled Solution Space Representations", "author": ["Tarik Hadzic", "Subbarayan Sathiamoorthy", "Rune M. Jensen", "Henrik R. Andersen", "Jesper M\u00f8ller", "Henrik Hulgaard"], "venue": "Proceedings of the International Conference on Economic,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2004}, {"title": "A Structure-Based Variable Ordering Heuristic for SAT", "author": ["Jinbo Huang", "Adnan Darwiche"], "venue": "Proceedings of the IJCAI\u201903,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "Proving Consistency Assertions for Automotive Product Data Management", "author": ["Wolfgang K\u00fcchlin", "Carsten Sinz"], "venue": "Journal of Automated Reasoning", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2000}, {"title": "A Model Counting Characterization of Diagnoses", "author": ["T.K. Satish Kumar"], "venue": "Proceedings of the DX-02,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2002}, {"title": "A Rule-Based Configurer of Computer Systems", "author": ["John McDermott"], "venue": "Artificial Intelligence", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1982}, {"title": "Constraint and Variable Ordering Heuristics for Compiling Configuration Problems", "author": ["Nina Narodytska", "Toby Walsh"], "venue": "Proceedings of the IJCAI\u201907,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2007}, {"title": "Pruning Conformant Plans by Counting Models on Compiled D-DNNF Representations", "author": ["H\u00e9ctor Palacios", "Blai Bonet", "Adnan Darwiche", "H\u00e9ctor Geffner"], "venue": "editors: Proceedings of the ICAPS", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Linking Product Variety to Order-Fulfillment Strategies", "author": ["Frits K. Pil", "Matthias Holweg"], "venue": "Interfaces", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2004}, {"title": "Product Configuration Frameworks-A Survey", "author": ["Daniel Sabin", "Rainer Weigel"], "venue": "IEEE Intelligent Systems", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1998}, {"title": "Combining Component Caching and Clause Learning for Effective Model Counting", "author": ["Tian Sang", "Fahiem Bacchus", "Paul Beame", "Henry Kautz", "Toniann Pitassi"], "venue": "Proceedings of the SAT", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2004}, {"title": "Heuristics for Fast Exact Model Counting", "author": ["Tian Sang", "Paul Beame", "Henry Kautz"], "venue": "editors: Theory and Applications of Satisfiability Testing - SAT", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2005}, {"title": "Performing Bayesian Inference by Weighted Model Counting", "author": ["Tian Sang", "Paul Beame", "Henry Kautz"], "venue": "Proceedings of the AAAI\u201905,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2005}, {"title": "sharpSAT \u2014 Counting Models with Advanced Component Caching and Implicit BCP. In: Theory and Applications of Satisfiability Testing - SAT", "author": ["Marc Thurley"], "venue": null, "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2006}, {"title": "The Complexity of Computing the Permanent", "author": ["G. Leslie"], "venue": "Valiant", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1979}], "referenceMentions": [{"referenceID": 14, "context": "Since R1/XCON [15] was used by DEC to support computer system configuration and assembly, product configuration systems have been among the most prominent and successful applications of AI methods in practice [19].", "startOffset": 14, "endOffset": 18}, {"referenceID": 18, "context": "Since R1/XCON [15] was used by DEC to support computer system configuration and assembly, product configuration systems have been among the most prominent and successful applications of AI methods in practice [19].", "startOffset": 209, "endOffset": 213}, {"referenceID": 21, "context": "Up to now model counting has mostly been used within bayesian networks [22, 1] and planning problems [17, 14].", "startOffset": 71, "endOffset": 78}, {"referenceID": 0, "context": "Up to now model counting has mostly been used within bayesian networks [22, 1] and planning problems [17, 14].", "startOffset": 71, "endOffset": 78}, {"referenceID": 16, "context": "Up to now model counting has mostly been used within bayesian networks [22, 1] and planning problems [17, 14].", "startOffset": 101, "endOffset": 109}, {"referenceID": 13, "context": "Up to now model counting has mostly been used within bayesian networks [22, 1] and planning problems [17, 14].", "startOffset": 101, "endOffset": 109}, {"referenceID": 17, "context": "Pil and Holweg [18] have discussed the interconnection of product variety and order-fulfillment strategies.", "startOffset": 15, "endOffset": 19}, {"referenceID": 12, "context": "Since we work with our industrial partner Mercedes-Benz on the symbolic verification of configuration problems [13], such as whether a given configuration is valid or not, or which part is required in which configurations, we were able to investigate how many valid configurations there are for one specific car line.", "startOffset": 111, "endOffset": 115}, {"referenceID": 23, "context": "According to [25] even the counting problems for polynomialtime solvable problems like 2-SAT, Horn-SAT, or DNF-SAT can be #P-complete.", "startOffset": 13, "endOffset": 17}, {"referenceID": 9, "context": "The vast majority of successful SAT solvers uses the DPLL approach [10, 9].", "startOffset": 67, "endOffset": 74}, {"referenceID": 8, "context": "The vast majority of successful SAT solvers uses the DPLL approach [10, 9].", "startOffset": 67, "endOffset": 74}, {"referenceID": 3, "context": "DPLL-style model counters like CDP [4], RelSat [2], or Cachet [20] are extensions to existing SAT solvers and require an input formula in CNF.", "startOffset": 35, "endOffset": 38}, {"referenceID": 1, "context": "DPLL-style model counters like CDP [4], RelSat [2], or Cachet [20] are extensions to existing SAT solvers and require an input formula in CNF.", "startOffset": 47, "endOffset": 50}, {"referenceID": 19, "context": "DPLL-style model counters like CDP [4], RelSat [2], or Cachet [20] are extensions to existing SAT solvers and require an input formula in CNF.", "startOffset": 62, "endOffset": 66}, {"referenceID": 1, "context": "The first one is component analysis [2] where one identifies different components C1, .", "startOffset": 36, "endOffset": 39}, {"referenceID": 19, "context": "The second improvement is the #SAT correspondence to clause learning in SAT: component caching [20, 24].", "startOffset": 95, "endOffset": 103}, {"referenceID": 22, "context": "The second improvement is the #SAT correspondence to clause learning in SAT: component caching [20, 24].", "startOffset": 95, "endOffset": 103}, {"referenceID": 20, "context": "component analysis and caching: While in SAT one tries to narrow down the search to one specific solution by intelligently choosing the branching variables, in #SAT we try to choose variables where the according constraint graph is decomposed in various components [21].", "startOffset": 265, "endOffset": 269}, {"referenceID": 4, "context": "One well known approach for this is the compilation of \u03c6 into a binary decision diagram (BDD) [5].", "startOffset": 94, "endOffset": 97}, {"referenceID": 15, "context": "Narodytska and Walsh discussed this approach for configuration problems [16].", "startOffset": 72, "endOffset": 76}, {"referenceID": 7, "context": "in the system c2d [8], is the deterministic decomposable negation normal form (d-DNNF) [7].", "startOffset": 18, "endOffset": 21}, {"referenceID": 6, "context": "in the system c2d [8], is the deterministic decomposable negation normal form (d-DNNF) [7].", "startOffset": 87, "endOffset": 90}, {"referenceID": 12, "context": "We will also refer to \u03c6 as product overview formula (POF) [13].", "startOffset": 58, "endOffset": 62}, {"referenceID": 5, "context": "Since the domains Di are finite and we only allow atomic propositions of the form x = v, we can use a reduction [6] from equality logic to propositional logic.", "startOffset": 112, "endOffset": 115}, {"referenceID": 2, "context": "Observations from formal methods in software verification [3] tell us that the more bugs you report, the smaller the probability gets that they will eventually be fixed.", "startOffset": 58, "endOffset": 61}, {"referenceID": 12, "context": "Processing of customer orders at Mercedes-Benz is organized as a three-staged process [13]:", "startOffset": 86, "endOffset": 90}, {"referenceID": 12, "context": "Based on the notion of the POF, several consistency tests such as finding necessary codes, detecting redundant parts or intersections may be performed quite naturally using SAT solvers [13].", "startOffset": 185, "endOffset": 189}, {"referenceID": 11, "context": "In d-DNNF compilation static heuristics based upon hypergraph decomposition have been successfully used to generate good variable orders for decomposing large and complex formulas [12].", "startOffset": 180, "endOffset": 184}], "year": 2010, "abstractText": "We describe how to use propositional model counting for a quantitative analysis of product configuration data. Our approach computes valuable meta information such as the total number of valid configurations or the relative frequency of components. This information can be used to assess the severity of documentation errors or to measure documentation quality. As an application example we show how we apply these methods to product documentation formulas of the Mercedes-Benz line of vehicles. In order to process these large formulas we developed and implemented a new model counter for non-CNF formulas. Our model counter can process formulas, whose CNF representations could not be processed up till now.", "creator": "LaTeX with hyperref package"}}}