{"id": "1007.3223", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Jul-2010", "title": "Testing and Debugging Techniques for Answer Set Solver Development", "abstract": "This paper develops automated testing and debugging techniques for answer set solver development. We describe a flexible grammar-based black-box ASP fuzz testing tool which is able to reveal various defects such as unsound and incomplete behavior, i.e. invalid answer sets and inability to find existing solutions, in state-of-the-art answer set solver implementations. Moreover, we develop delta debugging techniques for shrinking failure-inducing inputs on which solvers exhibit defective behavior. In particular, we develop a delta debugging algorithm in the context of answer set solving, and evaluate two different elimination strategies for the algorithm.", "histories": [["v1", "Mon, 19 Jul 2010 17:51:54 GMT  (46kb,S)", "http://arxiv.org/abs/1007.3223v1", "18 pages"]], "COMMENTS": "18 pages", "reviews": [], "SUBJECTS": "cs.AI cs.SE", "authors": ["robert brummayer", "matti j\\\"arvisalo"], "accepted": false, "id": "1007.3223"}, "pdf": {"name": "1007.3223.pdf", "metadata": {"source": "CRF", "title": "Testing and Debugging Techniques for Answer Set Solver Development", "authors": ["ROBERT BRUMMAYER"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 100 7.32 23v1 [cs.AI] 1KEYWORDS: programming of response sets, solutions for response sets, testing, debugging"}, {"heading": "1 Introduction", "text": "The answer to this question is rules-based, declarative programming, which has proven to be an effective approach to the representation and argumentation of knowledge that has failed in various areas of combinatorial behavior, and this success has been made possible by the development of efficient solutions (Simons et al. 2002; Janhunen et al. 2008; Janhunen et al.; Janhunen et al. 2009; Brain and De Vos 2009).Implementing robust, solid, and complete response sets is a challenging task. To achieve high solution performance, error prones and complex data structures and other complex optimizations must be implemented."}, {"heading": "2 Answer Set Programs", "text": "This section checks the stable semantics and classes of responses considered in this work. (r) The Normal Logic Programs and Answer Sets A Normal Logical Program (NLP) consists of a finite set of normal rules of formr:.. a rule r consists of a head, a head (r) = h, and a body, a body (r) = {a1,.. a rule r is a fact if body (r) = an integrity constraint if head (r) = h, and a body, body (r) = {a1,.. a standard letter negation is a rule. A rule r is a fact if body (r) = an integrity constraint if head (r) =."}, {"heading": "3 Fuzz Testing Answer Set Solvers", "text": "In this section, we develop a grammar-based black box fuzzing approach to testing solvers for response sentences."}, {"heading": "3.1 Grammar-Based ASP Fuzzing", "text": "In order to apply grammatical fuzz tests to set solvers, methods of generating different set programs need to be developed. These are just a few studies that address the problem of generating random logic programs in the context of ASP (Zhao and Lin 2003; Namasivayam and Truszczyn \u0301 ski 2009). These studies consider rather limited subclasses of NLPs and focus on theoretical aspects such as studying phase transition behavior. In contrast, our goal here is to create a wide variety of different set programs for random answers to test solvers for set answers."}, {"heading": "3.1.1 Ineffectiveness of CNF-Based ASP Fuzzing", "text": "A simple approach to generating random response programs is to first use generators for random conjunctive normal formats (CNF) for the Boolean satisfaction problem (SAT) and then to translate the generated CNF into response programs. However, this approach seems to be ineffective, as the following evaluation discloses.We obtained CNF instances by generating random statement formulas as as Boolean circuits and translating them into CNF instances using a standard encoding (Tseitin 1983).The NLPs were obtained from the CNF instances by applying the following standard translations: by (i) introducing the rules x x x and x x x in F for each Boolean variable x (forcing classical interpretations); and (ii) for each clause c in F, the rule c, and for each Boolean variable x in F, the rules x."}, {"heading": "3.2 FuzzASP: A Native ASP Fuzzer", "text": "In order to generate a wide range of different response programs, we developed FuzzASP, which is a native fuzzer for creating response programs generated in the syntax of lparse. In addition to normal logic programs, it supports combinations of real and extended rules with choice, cardinality and weight atoms and classic negation. FuzzASP is able to generate different types of random program instances from large classes of programs to provide a wide variety of different combinations of rule constructions. FuzzASP generates programs as follows: a set of normal atoms. 1 A set of f-facts (normal rules with empty bodies) is generated by eachhead being uniformed (among others) by normal rules with non-empty bodies and different lengths."}, {"heading": "3.3 Solver Defect Categories", "text": "We divide defects in the solution approaches into three categories: Errors contains cases in which the solver ends in an unexpected manner without delivering a result, e.g. segmentation errors and assertion errors; Invalid models contain cases in which the solver reports a solution that is not even a classic model of the instance; and Incorrect, in which the solution provided by at least one solver is a correct answer, all solvers that do not provide an answer are treated as wrong. Notice that these categories are resolved in the sense that each solver can only have one defect that belongs to exactly one of the categories. Notice also that in this paper we focus on the problem of the answer, that in particular we consider the defect categories to be invalid and incorrect, for each individual instance that finds a single solution."}, {"heading": "4 Fuzzing Experiments", "text": "We performed fuzz tests with FuzzASP for the following classes of logic programs: NLP (normal programs), WCP (weight limitation programs) and DLP (disjunctive programs). We conducted our experiments under Ubuntu Linux on an Intel Core 2 Quad 2.66 GHz machine with 8 GB RAM. Our fuzzing framework used all four cores for parallel testing. Using the default settings, we tested a wide range of solvers, the first (Gebser et al. 2007) or second (Denecker et al. 2009) ASP Competition in 2007 / 2009. The grounder lparse1 solvers: Clasp 1.2.1, ClaspD 1.1, Cmodels 3.79, DLV precompiled build BEN / Oct 11 2007, GnT2 precompiled v. 2.1 with Smodels 2.33 as backend."}, {"heading": "4.1 Defects Found on NLP", "text": "For the generation of NLPs, we used the standard options of FuzzASP (with deactivated weight and cardinality words). As shown in Table 1, the effectiveness of error detection in NLP is rather modest. Furthermore, we found two instances where error detection is flawed, especially in high numbers for lp2sat, Smodels-ie, and SUP. A few invalid models were reported by Cmodels and lp2diff. In addition, we found two instances where error detection is flawed, which is already in contrast to the ineffective CNF-based fuzzing experiments that confirm our assumption that domain-less fuzz approaches are generally not effective."}, {"heading": "4.2 Defects Found on WCP", "text": "In particular, the effectiveness of FuzzASP is very impressive on WCP and DLP. Fuzz test results on 19840 inputs for WCP are presented in Table 2. The input logic programs were created with the FuzzASP option to introduce additional selection, cardinality and weight rules, each accounting for up to 5% of the normal rules generated. Here, we tested those solvers that accept the class WCP (supported by Lparse) as input. Results for NLP and WCP suggest that many errors are due to the techniques implemented for inference to weight restriction rules. Based on the results, Smodels appear to be the most stable solver for this class of programs, as it is the only solver for which no errors were found. As an example of the difficulty of maintaining correctness while optimizing the solder performance, we observed a high number of defects in each category of models for re-reading the memory models with a better target time."}, {"heading": "4.3 Defects Found on DLP", "text": "The results of the fuzz tests on DLP are shown in Table 2. Here we have used the FuzzASP option to introduce disjunctive rules up to 5% of the generated normal rules. While no errors were found in DLV and GnT2, a variety of defects were found in ClaspD and C models. Due to its robustness, the DLV was used as a trusted solution to verify the validity of reported models in DLP. Based on these results, we conclude that many defects are due to techniques implemented specifically for handling disjunctive rules."}, {"heading": "5 Delta Debugging for Answer Set Solvers", "text": "The overall goal of delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) is to minimize the size of error-triggering input while maintaining the same observable behavior, thereby cutting out large irrelevant portions of input, resulting in small program instances consisting of isolated error-triggering parts."}, {"heading": "5.1 The Delta Debugging Algorithm", "text": "In fact, it is the case that one sees oneself in a position to outwit oneself and to rethink, as was the case in the past. (...) In fact, in the past, one saw oneself in a position to reform and reform in the present. (...) In the past, it was the case that in the past there have been repeated exaggerations. (...) In the present, it is the case that in the past there have been exaggerations. (...) In the present, it is as if it is a new world. (...) In the future, it is as if it is a new world. (...) In the future, it will be a new world, it will be a new world. (...) In the future, it will be a new world. (...) It will be a new world. (...) It will be a new world. (...) It will be a new world. (...) It will be a new world. (...) It will be a new world. (...) It will be a new world."}, {"heading": "5.2 Removal strategies", "text": "In phases 1, 4 and 5, we will consider a set from which we want to eliminate as many elements as possible, e.g. the set of rules in phase 1. Next, we will discuss and evaluate the differences between a simple single approach (OBO) and a more complex strategy based on the DDMin algorithm (Zeller and Hildebrandt 2002).DDMin The original DDMin algorithm (Zeller and Hildebrandt 2002) attempts to divide the current set into k subsets, initializing k (the granularity) to 2. However, if at least one of the subsets is sufficient to reproduce the same observable behavior, the current set is reduced to this subset, granularity is reset to 2, and the algorithm continues. Otherwise, it attempts to remove the complementary sets of each of the subsets. If the use of the set complements is not successful, the granularity k subset is also doubled, i.e. in the next iteration, the current set is divided into smaller subsets."}, {"heading": "6 Delta Debugging Experiments", "text": "This year it is so far that it will be able to erenie.n the mentioned hreeeisrcnlrVo rf\u00fc eid eerwtlcehnlrVo rf\u00fc eid eerwdnei rf\u00fc eid eerwtlrVnree\u00fceerwtlcehnlrc\u00fceerwtlrVnlrhea"}, {"heading": "7 Related work", "text": "Our work differs in the development of ASP-specific fuzzing techniques and, in particular, new delta debugging techniques and strategies in the context of solving response sets. In contrast to our general black box approach, solution-specific white box test solutions are used in the development process of the DLV solver (Calimeri et al. 2009). In the context of inductive logic programming for data mining, a DDMin-based white box trace-based delta debugger has been developed (Tronc, on and Janssens 2006). As a final remark, we would like to stress that this work develops debugging techniques for solving solvers with the aim of developing automated techniques for developing and providing correct solvers. While this work focuses on solver testing and debugging, we note that when considering a problem of ASP application errors, either errors in the solution phase of 2008 or the solution phase are not found correct in the year of the solution."}, {"heading": "8 Conclusions", "text": "We developed novel fuzz tests and delta debugging techniques for developing response solvers. However, our experimental analysis clearly showed that our fuzz test tool is capable of detecting a variety of critical errors, such as segmentation errors, cancellations, infinite loops, incorrect results and invalid response rates in various state-of-the-art response solvers. In addition, we demonstrated that our delta debugging techniques are very effective at reducing erroneous input, enabling efficient debugging of response solutions.As an extension of this work, we are particularly interested in testing and debugging solutions for the unmilled case. As many of the current state-of-the-art solutions depend heavily on the robustness and correctness of the grounders, we find this an interesting and important aspect of future work."}], "references": [{"title": "The nomore++ approach to answer set solving", "author": ["C. Anger", "M. Gebser", "T. Linke", "A. Neumann", "T. Schaub"], "venue": "Proceedings of the 12th International Conference on Logic for Programming, Artificial Intelligence, and Reasoning (LPAR 2005), G. Sutcliffe and A. Voronkov, Eds. Lecture Notes in Computer Science, vol. 3835. Springer, 95\u2013109.", "citeRegEx": "Anger et al\\.,? 2005", "shortCiteRegEx": "Anger et al\\.", "year": 2005}, {"title": "CVC3", "author": ["C. Barrett", "C. Tinelli"], "venue": "Proceedings of the 19th International Conference on Computer Aided Verification (CAV 2007), W. Damm and H. Hermanns, Eds. Lecture Notes in Computer Science, vol. 4590. Springer, 298\u2013302.", "citeRegEx": "Barrett and Tinelli,? 2007", "shortCiteRegEx": "Barrett and Tinelli", "year": 2007}, {"title": "PicoSAT essentials", "author": ["A. Biere"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation 4, 75\u201397.", "citeRegEx": "Biere,? 2008", "shortCiteRegEx": "Biere", "year": 2008}, {"title": "Debugging ASP programs by means of ASP", "author": ["B. Brain", "M. Gebser", "J. P\u00fchrer", "T. Schaub", "H. Tompits", "S. Woltran"], "venue": "Proceedings of the 9th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2007), C. Baral, G. Brewka, and J. S. Schlipf, Eds. Lecture Notes in Computer Science, vol. 4483. Springer, 31\u201343.", "citeRegEx": "Brain et al\\.,? 2007", "shortCiteRegEx": "Brain et al\\.", "year": 2007}, {"title": "Debugging logic programs under the answer set semantics", "author": ["M. Brain", "M. de Vos"], "venue": "Proceedings of the 3rd Workshop on Answer Set Programming: Advances in Theory and Implementation (ASP 2005).", "citeRegEx": "Brain and Vos,? 2005", "shortCiteRegEx": "Brain and Vos", "year": 2005}, {"title": "The significance of memory costs in answer set solver implementation", "author": ["M. Brain", "M. De Vos"], "venue": "Journal of Logic and Computation 19, 4, 615\u2013641.", "citeRegEx": "Brain and Vos,? 2009", "shortCiteRegEx": "Brain and Vos", "year": 2009}, {"title": "Fuzzing and delta-debugging SMT solvers", "author": ["R. Brummayer", "A. Biere"], "venue": "Proceedings of the 7th International Workshop on Satisfiability Modulo Theories (SMT 2009). ACM International Conference Proceedings Series, vol. 375. ACM, 1\u20135.", "citeRegEx": "Brummayer and Biere,? 2009", "shortCiteRegEx": "Brummayer and Biere", "year": 2009}, {"title": "A visual tracer for DLV", "author": ["F. Calimeri", "N. Leone", "F. Ricca", "P. Veltri"], "venue": "Proceedings of the 2nd International Workshop on Software Engineering for Answer Set Programming (SEA 2009), M. De Vos and T. Schaub, Eds. 79\u201393.", "citeRegEx": "Calimeri et al\\.,? 2009", "shortCiteRegEx": "Calimeri et al\\.", "year": 2009}, {"title": "QuickCheck: a lightweight tool for random testing of Haskell programs", "author": ["K. Claessen", "J. Hughes"], "venue": "Proceedings of the 5th ACM SIGPLAN International Conference on Functional Programming (ICFP 2000). SIGPLAN Notices 35(9). ACM, 268\u2013279.", "citeRegEx": "Claessen and Hughes,? 2000", "shortCiteRegEx": "Claessen and Hughes", "year": 2000}, {"title": "Z3: An efficient SMT solver", "author": ["L.M. de Moura", "N. Bj\u00f8rner"], "venue": "In Proceedings of the 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS", "citeRegEx": "Moura and Bj\u00f8rner,? \\Q2008\\E", "shortCiteRegEx": "Moura and Bj\u00f8rner", "year": 2008}, {"title": "The second answer set programming competition", "author": ["M. Denecker", "J. Vennekens", "S. Bond", "M. Gebser", "M. Truszczynski"], "venue": "Proceedings of the 10th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2009), E. Erdem, F. Lin, and T. Schaub, Eds. Lecture Notes in Computer Science, vol. 5753. Springer, 637\u2013654. See also competition results at", "citeRegEx": "Denecker et al\\.,? 2009", "shortCiteRegEx": "Denecker et al\\.", "year": 2009}, {"title": "Conflict-driven disjunctive answer set solving", "author": ["M. Gebser", "T. Grote", "B. Kaufmann", "A. K\u00f6nig", "M. Ostrowski", "T. Schaub"], "venue": "In Proceedings of the 11th International Conference on Principles of Knowledge Representation and Reasoning (KR", "citeRegEx": "Drescher et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Drescher et al\\.", "year": 2008}, {"title": "The Yices SMT solver", "author": ["B. Dutertre", "L. de Moura"], "venue": "http://yices.csl.sri.com/tool-paper.pdf.", "citeRegEx": "Dutertre and Moura,? 2006", "shortCiteRegEx": "Dutertre and Moura", "year": 2006}, {"title": "An extensible SAT-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "6th International Conference on Theory and Applications of Satisfiability Testing (SAT 2003), Selected Revised Papers, E. Giunchiglia and A. Tacchella, Eds. Lecture Notes in Computer Science, vol. 2919. Springer, 502\u2013518.", "citeRegEx": "E\u00e9n and S\u00f6rensson,? 2004", "shortCiteRegEx": "E\u00e9n and S\u00f6rensson", "year": 2004}, {"title": "Conflict-driven answer set solving", "author": ["M. Gebser", "B. Kaufmann", "A. Neumann", "T. Schaub"], "venue": "Proceedings of the 20th International Joint Conference on Articifial Intelligence (IJCAI 2007), M. M. Veloso, Ed. Morgan Kaufmann, 286\u2013392.", "citeRegEx": "Gebser et al\\.,? 2007", "shortCiteRegEx": "Gebser et al\\.", "year": 2007}, {"title": "The first answer set programming system competition", "author": ["M. Gebser", "L. Liu", "G. Namasivayam", "A. Neumann", "T. Schaub", "M. Truszczynski"], "venue": "Proceedings of the 9th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2007), C. Baral, G. Brewka, and J. S. Schlipf, Eds. Lecture Notes in Computer Science, vol. 4483. Springer, 3\u201317. See also competition results", "citeRegEx": "Gebser et al\\.,? 2007", "shortCiteRegEx": "Gebser et al\\.", "year": 2007}, {"title": "A meta-programming technique for debugging answer-set programs", "author": ["M. Gebser", "J. P\u00fchrer", "T. Schaub", "H. Tompits"], "venue": "Proceedings of the Twenty-Third AAAI Conference on Artificial Intelligence (AAAI 2008), D. Fox and C. P. Gomes, Eds. AAAI Press, 448\u2013453.", "citeRegEx": "Gebser et al\\.,? 2008", "shortCiteRegEx": "Gebser et al\\.", "year": 2008}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Proceedings of the 5th International Conference and Symposium on Logic Programming (ICLP/SLP 1988), R. A. Kowalski and K. A. Bowen, Eds. MIT Press, 1070\u20131080.", "citeRegEx": "Gelfond and Lifschitz,? 1988", "shortCiteRegEx": "Gelfond and Lifschitz", "year": 1988}, {"title": "Answer set programming based on propositional satisfiability", "author": ["E. Giunchiglia", "Y. Lierler", "M. Maratea"], "venue": "Journal of Automated Reasoning 36, 4, 345\u2013377.", "citeRegEx": "Giunchiglia et al\\.,? 2006", "shortCiteRegEx": "Giunchiglia et al\\.", "year": 2006}, {"title": "Some (in)translatability results for normal logic programs and propositional theories", "author": ["T. Janhunen"], "venue": "Journal of Applied Non-Classical Logics 16, 1\u20131, 35\u201386.", "citeRegEx": "Janhunen,? 2006", "shortCiteRegEx": "Janhunen", "year": 2006}, {"title": "GnT \u2013 a solver for disjunctive logic programs", "author": ["T. Janhunen", "I. Niemel\u00e4"], "venue": "Proceedings of the 7th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2004), V. Lifschitz and I. Niemel\u00e4, Eds. Lecture Notes in Computer Science, vol. 2923. Springer, 331\u2013335.", "citeRegEx": "Janhunen and Niemel\u00e4,? 2004", "shortCiteRegEx": "Janhunen and Niemel\u00e4", "year": 2004}, {"title": "Computing stable models via reductions to difference logic", "author": ["T. Janhunen", "I. Niemel\u00e4", "M. Sevalnev"], "venue": "10th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2009), E. Erdem, F. Lin, and T. Schaub, Eds. Lecture Notes in Computer Science, vol. 5753. Springer, 142\u2013154.", "citeRegEx": "Janhunen et al\\.,? 2009", "shortCiteRegEx": "Janhunen et al\\.", "year": 2009}, {"title": "The DLV system for knowledge representation and reasoning", "author": ["N. Leone", "G. Pfeifer", "W. Faber", "T. Eiter", "G. Gottlob", "S. Perri", "F. Scarcello"], "venue": "ACM Transactions on Computational Logic 7, 3, 499\u2013562.", "citeRegEx": "Leone et al\\.,? 2006", "shortCiteRegEx": "Leone et al\\.", "year": 2006}, {"title": "ASSAT: Computing answer sets of a logic program by SAT solvers", "author": ["F. Lin", "Y. Zhao"], "venue": "Artificial Intelligence 157, 1\u20132, 115\u2013137.", "citeRegEx": "Lin and Zhao,? 2004", "shortCiteRegEx": "Lin and Zhao", "year": 2004}, {"title": "Pbmodels - software to compute stable models by pseudoboolean solvers", "author": ["L. Liu", "M. Truszczynski"], "venue": "Proceedings of the 8th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2005), C. Baral, G. Greco, N. Leone, and G. Terracina, Eds. Lecture Notes in Computer Science, vol. 3662. Springer, 410\u2013415.", "citeRegEx": "Liu and Truszczynski,? 2005", "shortCiteRegEx": "Liu and Truszczynski", "year": 2005}, {"title": "HDD: hierarchical delta debugging", "author": ["G. Misherghi", "Z. Su"], "venue": "Proceedings of the 28th International Conference on Software Engineering (ICSE 2006), L. J. Osterweil, H. D. Rombach, and M. L. Soffa, Eds. ACM, 142\u2013151.", "citeRegEx": "Misherghi and Su,? 2006", "shortCiteRegEx": "Misherghi and Su", "year": 2006}, {"title": "Simple random logic programs", "author": ["G. Namasivayam", "M. Truszczy\u0144ski"], "venue": "Proceedings of the 10th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2009), E. Erdem, F. Lin, and T. Schaub, Eds. Lecture Notes in Computer Science, vol. 5753. Springer, 223\u2013235.", "citeRegEx": "Namasivayam and Truszczy\u0144ski,? 2009", "shortCiteRegEx": "Namasivayam and Truszczy\u0144ski", "year": 2009}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 3\u20134, 241\u2013273.", "citeRegEx": "Niemel\u00e4,? 1999", "shortCiteRegEx": "Niemel\u00e4", "year": 1999}, {"title": "Extending and implementing the stable model semantics", "author": ["P. Simons", "I. Niemel\u00e4", "T. Soininen"], "venue": "Artificial Intelligence 138, 1\u20132, 181\u2013234.", "citeRegEx": "Simons et al\\.,? 2002", "shortCiteRegEx": "Simons et al\\.", "year": 2002}, {"title": "Fuzzing - Brute Force Vulnerability Discovery", "author": ["M. Sutton", "A. Greene", "P. Amini"], "venue": "Pearson Education.", "citeRegEx": "Sutton et al\\.,? 2007", "shortCiteRegEx": "Sutton et al\\.", "year": 2007}, {"title": "Debugging inconsistent answer set programs", "author": ["T. Syrj\u00e4nen"], "venue": "Proceedings of the 11th International Workshop on Nonmonotonic Reasoning (NMR 2006), J. Dix and A. Hunter, Eds. IfI Technical Report Series, vol. IfI-06-04. TU Clausthal, 77\u201383.", "citeRegEx": "Syrj\u00e4nen,? 2006", "shortCiteRegEx": "Syrj\u00e4nen", "year": 2006}, {"title": "Fuzzing for Software Security Testing and Quality Assurance", "author": ["A. Takanen", "J. Demott", "C. Miller"], "venue": null, "citeRegEx": "Takanen et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Takanen et al\\.", "year": 2008}, {"title": "A delta debugger for ILP query execution", "author": ["R. Tron\u00e7on", "G. Janssens"], "venue": "Proceedings of the 16th Workshop on Logic-Based Methods in Programming Environments (WLPE 2006).", "citeRegEx": "Tron\u00e7on and Janssens,? 2006", "shortCiteRegEx": "Tron\u00e7on and Janssens", "year": 2006}, {"title": "On the complexity of derivation in propositional calculus", "author": ["G.S. Tseitin"], "venue": "Automation of Reasoning 2: Classical Papers on Computational Logic 1967\u20131970, J. Siekmann and G. Wrightson, Eds. Springer, 466\u2013483.", "citeRegEx": "Tseitin,? 1983", "shortCiteRegEx": "Tseitin", "year": 1983}, {"title": "Answer set programming with clause learning", "author": ["J. Ward", "J.S. Schlipf"], "venue": "Proceedings of the 7th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2004), V. Lifschitz and I. Niemel\u00e4, Eds. Lecture Notes in Computer Science, vol. 2923. Springer, 302\u2013313.", "citeRegEx": "Ward and Schlipf,? 2004", "shortCiteRegEx": "Ward and Schlipf", "year": 2004}, {"title": "Why Programs Fail", "author": ["A. Zeller"], "venue": "A Guide to Systematic Debugging. Morgan Kaufmann.", "citeRegEx": "Zeller,? 2005", "shortCiteRegEx": "Zeller", "year": 2005}, {"title": "Simplifying and isolating failure-inducing input", "author": ["A. Zeller", "R. Hildebrandt"], "venue": "IEEE Transactions on Software Engineering 28, 2, 183\u2013200.", "citeRegEx": "Zeller and Hildebrandt,? 2002", "shortCiteRegEx": "Zeller and Hildebrandt", "year": 2002}, {"title": "Answer set programming phase transition: A study on randomly generated programs", "author": ["Y. Zhao", "F. Lin"], "venue": "Proceedings of the 19th International Conference on Logic Programming (ICLP 2003), C. Palamidessi, Ed. Lecture Notes in Computer Science, vol. 2916. Springer, 239\u2013253.", "citeRegEx": "Zhao and Lin,? 2003", "shortCiteRegEx": "Zhao and Lin", "year": 2003}], "referenceMentions": [{"referenceID": 17, "context": "Answer set programming (ASP) (Gelfond and Lifschitz 1988; Niemel\u00e4 1999) is a rule-based declarative programming paradigm that has proven to be an effective approach to knowledge representation and reasoning in various hard combinatorial problem domains.", "startOffset": 29, "endOffset": 71}, {"referenceID": 27, "context": "Answer set programming (ASP) (Gelfond and Lifschitz 1988; Niemel\u00e4 1999) is a rule-based declarative programming paradigm that has proven to be an effective approach to knowledge representation and reasoning in various hard combinatorial problem domains.", "startOffset": 29, "endOffset": 71}, {"referenceID": 28, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 34, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 23, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 20, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 24, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 0, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 22, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 18, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 19, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 14, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 11, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 21, "context": "This success has been enabled by the development of efficient answer set solvers (Simons et al. 2002; Ward and Schlipf 2004; Lin and Zhao 2004; Janhunen and Niemel\u00e4 2004; Liu and Truszczynski 2005; Anger et al. 2005; Leone et al. 2006; Giunchiglia et al. 2006; Janhunen 2006; Gebser et al. 2007; Drescher et al. 2008; Janhunen et al. 2009; Brain and De Vos 2009).", "startOffset": 81, "endOffset": 362}, {"referenceID": 14, "context": "In support of these claims, by examining the detailed results of the first and second ASP programming competitions (Gebser et al. 2007; Denecker et al. 2009) one notices that, on the sets of (typical) benchmarks used in these competition, only very few solvers on very few benchmarks were judged as providing incorrect results.", "startOffset": 115, "endOffset": 157}, {"referenceID": 10, "context": "In support of these claims, by examining the detailed results of the first and second ASP programming competitions (Gebser et al. 2007; Denecker et al. 2009) one notices that, on the sets of (typical) benchmarks used in these competition, only very few solvers on very few benchmarks were judged as providing incorrect results.", "startOffset": 115, "endOffset": 157}, {"referenceID": 29, "context": "Fuzz testing, also called fuzzing (Sutton et al. 2007; Takanen et al. 2008), has its origin in software security and quality assurance.", "startOffset": 34, "endOffset": 75}, {"referenceID": 31, "context": "Fuzz testing, also called fuzzing (Sutton et al. 2007; Takanen et al. 2008), has its origin in software security and quality assurance.", "startOffset": 34, "endOffset": 75}, {"referenceID": 36, "context": "In order to isolate the failure-inducing parts of such failure-inducing inputs, an automatic technique called delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) has been proposed.", "startOffset": 126, "endOffset": 217}, {"referenceID": 35, "context": "In order to isolate the failure-inducing parts of such failure-inducing inputs, an automatic technique called delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) has been proposed.", "startOffset": 126, "endOffset": 217}, {"referenceID": 8, "context": "In order to isolate the failure-inducing parts of such failure-inducing inputs, an automatic technique called delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) has been proposed.", "startOffset": 126, "endOffset": 217}, {"referenceID": 25, "context": "In order to isolate the failure-inducing parts of such failure-inducing inputs, an automatic technique called delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) has been proposed.", "startOffset": 126, "endOffset": 217}, {"referenceID": 25, "context": "Our algorithm uses the hierarchical (Misherghi and Su 2006) structure of answer set programs to shrink failure-inducing instances effectively.", "startOffset": 36, "endOffset": 59}, {"referenceID": 36, "context": "Furthermore, we evaluate two different elimination strategies we have implemented for our delta debugging algorithm: a simple and easy-to-implement \u201cone-by-one\u201d elimination strategy, and another one based on the more intricate DDMin algorithm originally proposed in different context (Zeller and Hildebrandt 2002).", "startOffset": 284, "endOffset": 313}, {"referenceID": 17, "context": "In ASP, we are interested in stable models (Gelfond and Lifschitz 1988) (or answer sets) of a program \u03a0.", "startOffset": 43, "endOffset": 71}, {"referenceID": 37, "context": "are only a few studies that consider the problem of generating random logic programs in the context of ASP (Zhao and Lin 2003; Namasivayam and Truszczy\u0144ski 2009).", "startOffset": 107, "endOffset": 161}, {"referenceID": 26, "context": "are only a few studies that consider the problem of generating random logic programs in the context of ASP (Zhao and Lin 2003; Namasivayam and Truszczy\u0144ski 2009).", "startOffset": 107, "endOffset": 161}, {"referenceID": 33, "context": "We obtained CNF instances by generating random propositional formulas as Boolean circuits and translating them to CNF via a standard encoding (Tseitin 1983).", "startOffset": 142, "endOffset": 156}, {"referenceID": 14, "context": "Using default settings, we tested a wide selection of answer set solvers that participated in the first (Gebser et al. 2007) or second (Denecker et al.", "startOffset": 104, "endOffset": 124}, {"referenceID": 10, "context": "2007) or second (Denecker et al. 2009) ASP Competition in 2007/2009.", "startOffset": 16, "endOffset": 38}, {"referenceID": 2, "context": "12 using Picosat 913 SAT solver (Biere 2008) as backend, noMoRe++ 1.", "startOffset": 32, "endOffset": 44}, {"referenceID": 13, "context": "12b SAT solver (E\u00e9n and S\u00f6rensson 2004).", "startOffset": 15, "endOffset": 39}, {"referenceID": 1, "context": "solvers, CVC3 (Barrett and Tinelli 2007) and Yices (Dutertre and de Moura 2006) were used as back-end solvers.", "startOffset": 14, "endOffset": 40}, {"referenceID": 36, "context": "The overall goal of delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) is to minimize the size of failure-inducing inputs while maintaining the same observable behavior.", "startOffset": 36, "endOffset": 127}, {"referenceID": 35, "context": "The overall goal of delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) is to minimize the size of failure-inducing inputs while maintaining the same observable behavior.", "startOffset": 36, "endOffset": 127}, {"referenceID": 8, "context": "The overall goal of delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) is to minimize the size of failure-inducing inputs while maintaining the same observable behavior.", "startOffset": 36, "endOffset": 127}, {"referenceID": 25, "context": "The overall goal of delta debugging (Zeller and Hildebrandt 2002; Zeller 2005; Claessen and Hughes 2000; Misherghi and Su 2006) is to minimize the size of failure-inducing inputs while maintaining the same observable behavior.", "startOffset": 36, "endOffset": 127}, {"referenceID": 25, "context": "DeltaASP can be seen as a variation of hierarchical delta debugging (Misherghi and Su 2006), since our method proceeds from the top-most elements of the hierarchy (rules) to lower-level elements: first rules, then individual heads and bodies of rules, then individual literals, and, at last, negations.", "startOffset": 68, "endOffset": 91}, {"referenceID": 36, "context": "Next, we discuss and evaluate the differences between a simple one-by-one approach (OBO) and a more intricate strategy based on the DDMin algorithm (Zeller and Hildebrandt 2002).", "startOffset": 148, "endOffset": 177}, {"referenceID": 36, "context": "DDMin The original DDMin algorithm (Zeller and Hildebrandt 2002) attempts to divide the current set into k subsets, where k (the granularity) is initialized to 2.", "startOffset": 35, "endOffset": 64}, {"referenceID": 6, "context": "With this technique we delta debugged incorrect results as already proposed in (Brummayer and Biere 2009), but with exactly one trusted solver.", "startOffset": 79, "endOffset": 105}, {"referenceID": 6, "context": "The most closely related work is the fuzz testing and delta debugging approach developed for SMT (satisfiability modulo theories) solvers in (Brummayer and Biere 2009).", "startOffset": 141, "endOffset": 167}, {"referenceID": 7, "context": "In contrast to our generic black-box approach, solver-specific white-box testing solutions are used in the development process of the DLV solver (Calimeri et al. 2009).", "startOffset": 145, "endOffset": 167}, {"referenceID": 32, "context": "In the context of inductive logic programming for data mining, a DDMin-based white-box trace-based delta debugger was developed (Tron\u00e7on and Janssens 2006).", "startOffset": 128, "endOffset": 155}, {"referenceID": 30, "context": "Various solutions have been recently proposed for debugging answer set programs (Brain and de Vos 2005; Syrj\u00e4nen 2006; Brain et al. 2007; Gebser et al. 2008) where the aim is to find explanations on why a set of program rules does not describe a correct set of answer sets.", "startOffset": 80, "endOffset": 157}, {"referenceID": 3, "context": "Various solutions have been recently proposed for debugging answer set programs (Brain and de Vos 2005; Syrj\u00e4nen 2006; Brain et al. 2007; Gebser et al. 2008) where the aim is to find explanations on why a set of program rules does not describe a correct set of answer sets.", "startOffset": 80, "endOffset": 157}, {"referenceID": 16, "context": "Various solutions have been recently proposed for debugging answer set programs (Brain and de Vos 2005; Syrj\u00e4nen 2006; Brain et al. 2007; Gebser et al. 2008) where the aim is to find explanations on why a set of program rules does not describe a correct set of answer sets.", "startOffset": 80, "endOffset": 157}], "year": 2010, "abstractText": "This paper develops automated testing and debugging techniques for answer set solver development. We describe a flexible grammar-based black-box ASP fuzz testing tool which is able to reveal various defects such as unsound and incomplete behavior, i.e. invalid answer sets and inability to find existing solutions, in state-of-the-art answer set solver implementations. Moreover, we develop delta debugging techniques for shrinking failureinducing inputs on which solvers exhibit defective behavior. In particular, we develop a delta debugging algorithm in the context of answer set solving, and evaluate two different elimination strategies for the algorithm.", "creator": "LaTeX with hyperref package"}}}