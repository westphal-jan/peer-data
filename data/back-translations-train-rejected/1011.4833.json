{"id": "1011.4833", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Nov-2010", "title": "A Logical Charaterisation of Ordered Disjunction", "abstract": "In this paper we consider a logical treatment for the ordered disjunction operator 'x' introduced by Brewka, Niemel\\\"a and Syrj\\\"anen in their Logic Programs with Ordered Disjunctions (LPOD). LPODs are used to represent preferences in logic programming under the answer set semantics. Their semantics is defined by first translating the LPOD into a set of normal programs (called split programs) and then imposing a preference relation among the answer sets of these split programs. We concentrate on the first step and show how a suitable translation of the ordered disjunction as a derived operator into the logic of Here-and-There allows capturing the answer sets of the split programs in a direct way. We use this characterisation not only for providing an alternative implementation for LPODs, but also for checking several properties (under strongly equivalent transformations) of the 'x' operator, like for instance, its distributivity with respect to conjunction or regular disjunction. We also make a comparison to an extension proposed by K\\\"arger, Lopes, Olmedilla and Polleres, that combines 'x' with regular disjunction.", "histories": [["v1", "Mon, 22 Nov 2010 14:57:53 GMT  (31kb)", "http://arxiv.org/abs/1011.4833v1", "ASPOCP 2010"]], "COMMENTS": "ASPOCP 2010", "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["pedro cabalar"], "accepted": false, "id": "1011.4833"}, "pdf": {"name": "1011.4833.pdf", "metadata": {"source": "CRF", "title": "A Logical Characterisation of Ordered Disjunction", "authors": ["Pedro Cabalar"], "emails": ["cabalar@udc.es"], "sections": [{"heading": null, "text": "ar Xiv: 101 1,48 33v1 [cs.LO] 2 2N ov"}, {"heading": "1 Introduction", "text": "In fact, most of them will be able to move to a different world in which they are able to escape than to another world in which they are able to escape."}, {"heading": "2 Preliminaries", "text}, {"heading": "2.1 Logic programs", "text": "Let A be a (possibly empty) list of (possibly repeated) formulas. We write | A | to stand for the length of A [1]."}, {"heading": "2.2 Logic Programs with Ordered Disjunction", "text": "A logical program with an ordered disjunction (LPOD) is a set of rules of the form}, {"heading": "3 The Ordered Disjunction Operator", "text": "Consider the introduction of \"G\" to be equivalent to \"G.\" (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (\"H\") (H \") (H\") (H \") (H\") (H \") (H\" H \") (H\") (H \") (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (H) (\" (H) \"(H)\" (H) \"(H)\" (H) \"(H)\" (\"(H)\" (H) \"(H)\" (H \"(H)\" (\"(H)\" (H) \"(H)\" (\"(H)\" (\"(H)\" (H \"(H)\" (\"(H)\" (H) \"(H)\" (H) \"(\" (H) \"(\" (H) \"(H) (H) (\" (\"(H)\" (H) (H) (\"(H) (H) (H) (\" (H) (\"(H) (\" (H) (\"(\" (H) (H) (\"(H) (H) (H) (\" (H) (H) (\"(H) (\" (\"(H) (H) (\" (H) (H) (\"(H) (H) (H) (H) ("}, {"heading": "F \u00d7 (G \u00d7H) \u2261s F \u2228 \u00acF \u2227 (G \u2228 \u00acG \u2227H) By definition of \u00d7 .", "text": "The third line of evidence suggests that the third line of evidence has the following translation for a sequence of successive uses of formula A. (22) Let A be a sequence of | A | = n more 0 formulas. Then, the formula (A) is strongly equivalent to the definition of \"A.\" The third line of evidence suggests that the third line of evidence cancels the following translation for a sequence of successive uses of formula A. (22) Let A be a sequence of \"A.\" If n = 0, both (A) and (22) correspond to each other. Assume it is for each sequence of length n \u2212 1. Since we are associative, we can write \"A.\" (A) and \"A.\""}, {"heading": "4 Disjunctive LPOD", "text": "An ordered disjunctive term is defined as any combination of atoms and operators. An ordered disjunctive term (DLPOD) is a set of rules of the form F (B) if it has the form F (B) (B), where F is an ordered disjunctive term and B, B is a list of atoms. An ordered disjunctive term is in an ordered disjunctive normal form (ODNF) if it has the form (A1). \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 Rules (A) where the Ai are lists of atoms. \u2212 A DLPOD rule is in ODNF if its head is in ODNF. Similarly, the entire DLPOD is in ODNF if all its rules are in ODNF."}, {"heading": "4.1 Comparison", "text": "Since our characterization of DLPOD P2 applies to any statement theory, especially to ptuitional theory, it also represents a semantic for DLPOD, both arbitrarily and in ODNF. So the immediate question is whether our HT-based characterization and the original DLPOD semantics actually match. Unfortunately, the answer to this question is negative for two reasons. First, as we explained in Section 3 with a counter-example for (19), we saw that (28) is not a strong equivalent transformation. So, under our HT-based characterization, an arbitrary DLPOD is not always reducible to the ODNF rule (although, of course, a semantic for the DLPOD is still defined). Nevertheless, even if we limit ourselves to the study of DLPOD programs, we can find examples where the original DLPOD semantics provide more answers. Example 2: Let's take the programs using the pair of the RulePD semantics, RuleP2."}, {"heading": "T an answer set of P . \u2737", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5 Conclusions", "text": "We have presented a logical characterization of ordered disjunction logic programs (LPOD), which allows a direct study of ordered disjunction \u00b7 as a derived operator in the logic of Here-and-There (HT), known for its application to (highly equivalent) logical program transformations in Answer Set Programming. This characterization represents an alternative implementation of LPODs that does not rely on auxiliary predictions. It has also enabled us to analyze the behavior of the \u00d7 operator with respect to some typical characteristics such as associativity, distributivity, idempotence, etc., since \u00d7 is treated as regular logical connectivity, our characterization covers any arbitrary syntactical extension, in particular the so-called disjunctive LPOD (DLPOD). We have shown that the semantics of DLPODs exhibit some differences in terms of HT characterization and exhibit a formal comparison. Our result can also be viewed as a confirmation of the theory [6]."}], "references": [{"title": "CR-Prolog with ordered disjunction", "author": ["Marcello Balduccini", "Veena S. Mellarkod"], "venue": "In Proceedings of the 2nd Intl. on Answer Set Programming, Advances in Theory and Implementation", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "PDL with preferences", "author": ["Elisa Bertino", "Alessandra Mileo", "Alessandro Provetti"], "venue": "In Proc. of the 6th IEEE International Workshop on Policies for Distributed Systems and Networks (POLICY", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Logic programs with ordered disjunction", "author": ["Gerhard Brewka", "Ilkka Niemel\u00e4", "Tommi Syrj\u00e4nen"], "venue": "Computational Intelligence,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2004}, {"title": "Propositional theories are strongly equivalent to logic programs", "author": ["P. Cabalar", "P. Ferraris"], "venue": "Theory and Practice of Logic Programming,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2007}, {"title": "A classification and survey of preference handling approaches in nonmonotonic reasoning", "author": ["J.P. Delgrande", "T. Schaub", "H. Tompits", "K. Wang"], "venue": "Computational Intelligence,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2004}, {"title": "Notions of strong equivalence for logic programs with ordered disjunction", "author": ["Wolfgang Faber", "Hans Tompits", "Stefan Woltran"], "venue": "Proc. of the 11th Intl. Conf. on Principles of Knowledge Representation and Reasoning", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "A new perspective on stable models", "author": ["P. Ferraris", "J. Lee", "V. Lifschitz"], "venue": "In Proc. of the Intl. Joint Conf. on Artificial Intelligence", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "Answer sets for propositional theories", "author": ["Paolo Ferraris"], "venue": "In Proc. of the 8th Intl. Conf. on Logic Programming and Nonmonotonic Reasoning,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2005}, {"title": "LPOD answer sets and Nash equilibria", "author": ["Norman Y. Foo", "Thomas Meyer", "Gerhard Brewka"], "venue": "In Proc. of 9th Asian Computing Science Conference (ASIAN\u201904),", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "The stable models semantics for logic programming", "author": ["Michael Gelfond", "Vladimir Lifschitz"], "venue": "In Proc. of the 5th Intl. Conf. on Logic Programming,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1988}, {"title": "Die formalen Regeln der intuitionistischen Logik", "author": ["Arend Heyting"], "venue": "Sitzungsberichte der Preussischen Akademie der Wissenschaften, Physikalisch-mathematische Klasse,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1930}, {"title": "Negation as failure in the head", "author": ["Katsumi Inoue", "Chiaki Sakama"], "venue": "Journal of Logic Programming,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1998}, {"title": "On the effect of default negation on the expressiveness of disjunctive rules", "author": ["Tommi Janhunen"], "venue": "In Proc. of the 6th Intl. Conf. on Logic Programming and Nonmonotonic Reasoning", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2001}, {"title": "Towards logic programs with ordered and unordered disjunction", "author": ["Philipp K\u00e4rger", "Nuno Lopes", "Daniel Olmedilla", "Axel Polleres"], "venue": "In Workshop on Answer Set Programming and Other Computing Paradigms (ASPOCP", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2008}, {"title": "Strongly equivalent logic programs", "author": ["Vladimir Lifschitz", "David Pearce", "Agust\u0301\u0131n Valverde"], "venue": "ACM Transactions on Computational Logic,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2001}, {"title": "Declarative policies for web service selection", "author": ["Massimo Marchi", "Alessandra Mileo", "Alessandro Provetti"], "venue": "In Proc. of the 6th IEEE International Workshop on Policies for Distributed Systems and Networks (POLICY", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2005}, {"title": "Stable models and an alternative logic programming paradigm, pages 169\u2013181", "author": ["V. Marek", "M. Truszczy\u0144ski"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1999}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and Artificial Intelligence,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1999}, {"title": "A new logical characterisation of stable models and answer sets. In Non monotonic extensions of logic programming", "author": ["David Pearce"], "venue": "Proc. NMELP\u201996", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1997}, {"title": "The semantics of predicate logic as a programming language", "author": ["M.H. van Emden", "R.A. Kowalski"], "venue": "Journal of the ACM,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1976}, {"title": "Applications of preferences using answer set programming", "author": ["Claudia Zepeda", "Mauricio Osorio", "Juan Carlos Nieves", "Christine Solnon", "David Sol"], "venue": "Proceedings Workshop on Answer Set Programming", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2005}], "referenceMentions": [{"referenceID": 9, "context": "Based on the answer set (or stable model) semantics [10] for logic programs, Answer Set Programming (ASP) [17,18] has become a successful paradigm for declarative problem solving.", "startOffset": 52, "endOffset": 56}, {"referenceID": 16, "context": "Based on the answer set (or stable model) semantics [10] for logic programs, Answer Set Programming (ASP) [17,18] has become a successful paradigm for declarative problem solving.", "startOffset": 106, "endOffset": 113}, {"referenceID": 17, "context": "Based on the answer set (or stable model) semantics [10] for logic programs, Answer Set Programming (ASP) [17,18] has become a successful paradigm for declarative problem solving.", "startOffset": 106, "endOffset": 113}, {"referenceID": 4, "context": "Although different approaches for representing preferences in ASP have been proposed (see [5] for a survey), one that has recently received much attention is the formalism of Logic Programs with Ordered Disjunction (LPOD) [3], probably due to its simplicity and expressiveness.", "startOffset": 90, "endOffset": 93}, {"referenceID": 2, "context": "Although different approaches for representing preferences in ASP have been proposed (see [5] for a survey), one that has recently received much attention is the formalism of Logic Programs with Ordered Disjunction (LPOD) [3], probably due to its simplicity and expressiveness.", "startOffset": 222, "endOffset": 225}, {"referenceID": 8, "context": "LPODs have been applied, for instance, in Game Theory [9], for implementing policy languages with preferences [16,2], or in planning and argumentation scenarios [21], and they have been further investigated in [6] for studying strongly equivalent transformations and in [14] for introducing an extension called disjunctive LPOD (DLPOD) that combines ordered and regular disjunctions.", "startOffset": 54, "endOffset": 57}, {"referenceID": 15, "context": "LPODs have been applied, for instance, in Game Theory [9], for implementing policy languages with preferences [16,2], or in planning and argumentation scenarios [21], and they have been further investigated in [6] for studying strongly equivalent transformations and in [14] for introducing an extension called disjunctive LPOD (DLPOD) that combines ordered and regular disjunctions.", "startOffset": 110, "endOffset": 116}, {"referenceID": 1, "context": "LPODs have been applied, for instance, in Game Theory [9], for implementing policy languages with preferences [16,2], or in planning and argumentation scenarios [21], and they have been further investigated in [6] for studying strongly equivalent transformations and in [14] for introducing an extension called disjunctive LPOD (DLPOD) that combines ordered and regular disjunctions.", "startOffset": 110, "endOffset": 116}, {"referenceID": 20, "context": "LPODs have been applied, for instance, in Game Theory [9], for implementing policy languages with preferences [16,2], or in planning and argumentation scenarios [21], and they have been further investigated in [6] for studying strongly equivalent transformations and in [14] for introducing an extension called disjunctive LPOD (DLPOD) that combines ordered and regular disjunctions.", "startOffset": 161, "endOffset": 165}, {"referenceID": 5, "context": "LPODs have been applied, for instance, in Game Theory [9], for implementing policy languages with preferences [16,2], or in planning and argumentation scenarios [21], and they have been further investigated in [6] for studying strongly equivalent transformations and in [14] for introducing an extension called disjunctive LPOD (DLPOD) that combines ordered and regular disjunctions.", "startOffset": 210, "endOffset": 213}, {"referenceID": 13, "context": "LPODs have been applied, for instance, in Game Theory [9], for implementing policy languages with preferences [16,2], or in planning and argumentation scenarios [21], and they have been further investigated in [6] for studying strongly equivalent transformations and in [14] for introducing an extension called disjunctive LPOD (DLPOD) that combines ordered and regular disjunctions.", "startOffset": 270, "endOffset": 274}, {"referenceID": 0, "context": "Other ASP extensions like CR-Prolog, have also incorporated the use of ordered disjunctions [1].", "startOffset": 92, "endOffset": 95}, {"referenceID": 2, "context": "These answer sets of the split programs can also be captured by reduct transformations, like the originally introduced in [3] or the one later proposed in [6].", "startOffset": 122, "endOffset": 125}, {"referenceID": 5, "context": "These answer sets of the split programs can also be captured by reduct transformations, like the originally introduced in [3] or the one later proposed in [6].", "startOffset": 155, "endOffset": 158}, {"referenceID": 10, "context": "In this paper we concentrate on the first step, that is, in the definition of potential answer sets for LPODs, and show that they can be directly captured by a suitable definition of the ordered disjunction connective \u2018\u00d7\u2019 as a derived operator in the logic of Here-and-There (HT) [11], so that LPODs can be seen as nothing else but regular theories inside the nonmonotonic formalism of Equilibrium Logic [19] (the nonmonotonic version of HT).", "startOffset": 280, "endOffset": 284}, {"referenceID": 18, "context": "In this paper we concentrate on the first step, that is, in the definition of potential answer sets for LPODs, and show that they can be directly captured by a suitable definition of the ordered disjunction connective \u2018\u00d7\u2019 as a derived operator in the logic of Here-and-There (HT) [11], so that LPODs can be seen as nothing else but regular theories inside the nonmonotonic formalism of Equilibrium Logic [19] (the nonmonotonic version of HT).", "startOffset": 404, "endOffset": 408}, {"referenceID": 14, "context": "Equilibrium Logic has been extensively studied in ASP, as it yields a logical characterisation for the answer set semantics, capturing concepts such as the strong equivalence of programs [15] and providing a means to generalise all previous extensions to the the most general syntax of arbitrary propositional [8] and first order [7] theories.", "startOffset": 187, "endOffset": 191}, {"referenceID": 7, "context": "Equilibrium Logic has been extensively studied in ASP, as it yields a logical characterisation for the answer set semantics, capturing concepts such as the strong equivalence of programs [15] and providing a means to generalise all previous extensions to the the most general syntax of arbitrary propositional [8] and first order [7] theories.", "startOffset": 310, "endOffset": 313}, {"referenceID": 6, "context": "Equilibrium Logic has been extensively studied in ASP, as it yields a logical characterisation for the answer set semantics, capturing concepts such as the strong equivalence of programs [15] and providing a means to generalise all previous extensions to the the most general syntax of arbitrary propositional [8] and first order [7] theories.", "startOffset": 330, "endOffset": 333}, {"referenceID": 14, "context": "Theorem 1 (From [15]).", "startOffset": 16, "endOffset": 20}, {"referenceID": 0, "context": "k], the prefix of A of length k, that is, A[1] .", "startOffset": 43, "endOffset": 46}, {"referenceID": 0, "context": "We write \u00acA to stand for the sequence of formulas \u00acA[1] .", "startOffset": 52, "endOffset": 55}, {"referenceID": 9, "context": "Answer sets of a program P are defined in terms of the classical GelfondLifscthiz\u2019s reduct [10], that is extended as follows for the syntactic case we are considering (disjunctive heads with default negation [12]).", "startOffset": 91, "endOffset": 95}, {"referenceID": 11, "context": "Answer sets of a program P are defined in terms of the classical GelfondLifscthiz\u2019s reduct [10], that is extended as follows for the syntactic case we are considering (disjunctive heads with default negation [12]).", "startOffset": 208, "endOffset": 212}, {"referenceID": 14, "context": "Theorem 2 (From [15]).", "startOffset": 16, "endOffset": 20}, {"referenceID": 7, "context": "2 In fact, [8] introduced a different, more general reduct that allows defining answer sets for arbitrary theories, which happen to coincide with equilibrium models.", "startOffset": 11, "endOffset": 14}, {"referenceID": 2, "context": "Example 1 (From [3]).", "startOffset": 16, "endOffset": 19}, {"referenceID": 2, "context": "As explained in [3], answer sets of LPODs can also be described in terms of a program reduct, instead of using split programs.", "startOffset": 16, "endOffset": 19}, {"referenceID": 19, "context": "Notice that P I \u00d7 defined in this way is always a normal positive logic program and so it has a least model [20].", "startOffset": 108, "endOffset": 112}, {"referenceID": 2, "context": "Theorem 3 (From [3]).", "startOffset": 16, "endOffset": 19}, {"referenceID": 0, "context": "Notice that we have \u3008H,T \u3009 |= \u00acA[1], .", "startOffset": 32, "endOffset": 35}, {"referenceID": 0, "context": "For i = 1 there is no j smaller and from (a) we get \u3008H,T \u3009 6|= A[1].", "startOffset": 64, "endOffset": 67}, {"referenceID": 0, "context": "But, with i = 1, the antecedent of (23) becomes empty (\u22a4) and we get \u3008H,T \u3009 |= A[1] \u2228 \u00acA[1] that, as \u3008H,T \u3009 6|= A[1], leads to \u3008H,T \u3009 |= \u00acA[1].", "startOffset": 80, "endOffset": 83}, {"referenceID": 0, "context": "But, with i = 1, the antecedent of (23) becomes empty (\u22a4) and we get \u3008H,T \u3009 |= A[1] \u2228 \u00acA[1] that, as \u3008H,T \u3009 6|= A[1], leads to \u3008H,T \u3009 |= \u00acA[1].", "startOffset": 88, "endOffset": 91}, {"referenceID": 0, "context": "But, with i = 1, the antecedent of (23) becomes empty (\u22a4) and we get \u3008H,T \u3009 |= A[1] \u2228 \u00acA[1] that, as \u3008H,T \u3009 6|= A[1], leads to \u3008H,T \u3009 |= \u00acA[1].", "startOffset": 113, "endOffset": 116}, {"referenceID": 0, "context": "But, with i = 1, the antecedent of (23) becomes empty (\u22a4) and we get \u3008H,T \u3009 |= A[1] \u2228 \u00acA[1] that, as \u3008H,T \u3009 6|= A[1], leads to \u3008H,T \u3009 |= \u00acA[1].", "startOffset": 139, "endOffset": 142}, {"referenceID": 11, "context": "4 Similar techniques for removing head negations were introduced in [12,13].", "startOffset": 68, "endOffset": 75}, {"referenceID": 12, "context": "4 Similar techniques for removing head negations were introduced in [12,13].", "startOffset": 68, "endOffset": 75}, {"referenceID": 13, "context": "In [14] an extension of LPODs for dealing with regular disjunction \u2228 is considered.", "startOffset": 3, "endOffset": 7}, {"referenceID": 13, "context": "For comparison purposes, we concentrate here on the answer sets of DLPODs, leaving apart the selection of their preferred answer sets (see [14] for further details).", "startOffset": 139, "endOffset": 143}, {"referenceID": 5, "context": "our result can also be seen as a confirmation of Theorem 6 in [6].", "startOffset": 62, "endOffset": 65}, {"referenceID": 3, "context": "This result becomes trivial under our current approach, since ordered disjunction is just treated as an HT derived operator and, as proved in [4], HT arbitrary theories are strongly equivalent to logic programs.", "startOffset": 142, "endOffset": 145}], "year": 2014, "abstractText": "In this paper we consider a logical treatment for the ordered disjunction operator \u00d7 introduced by Brewka, Niemel\u00e4 and Syrj\u00e4nen in their Logic Programs with Ordered Disjunctions (LPOD). LPODs are used to represent preferences in logic programming under the answer set semantics. Their semantics is defined by first translating the LPOD into a set of normal programs (called split programs) and then imposing a preference relation among the answer sets of these split programs. We concentrate on the first step and show how a suitable translation of the ordered disjunction as a derived operator into the logic of Here-and-There allows capturing the answer sets of the split programs in a direct way. We use this characterisation not only for providing an alternative implementation for LPODs, but also for checking several properties (under strongly equivalent transformations) of the \u00d7 operator, like for instance, its distributivity with respect to conjunction or regular disjunction. We also make a comparison to an extension proposed by K\u00e4rger, Lopes, Olmedilla and Polleres, that combines \u00d7 with regular disjunction.", "creator": "LaTeX with hyperref package"}}}