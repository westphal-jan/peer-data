{"id": "1101.4101", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Jan-2011", "title": "Context Capture in Software Development", "abstract": "The context of a software developer is something hard to define and capture, as it represents a complex network of elements across different dimensions that are not limited to the work developed on an IDE. We propose the definition of a software developer context model that takes into account all the dimensions that characterize the work environment of the developer. We are especially focused on what the software developer context encompasses at the project level and how it can be captured. The experimental work done so far show that useful context information can be extracted from project management tools. The extraction, analysis and availability of this context information can be used to enrich the work environment of the developer with additional knowledge to support her/his work.", "histories": [["v1", "Fri, 21 Jan 2011 10:07:38 GMT  (285kb,D)", "http://arxiv.org/abs/1101.4101v1", "3d Artificial Intelligence Techniques in Software Engineering Workshop, 7 October, 2010, Larnaca, Cyprus"]], "COMMENTS": "3d Artificial Intelligence Techniques in Software Engineering Workshop, 7 October, 2010, Larnaca, Cyprus", "reviews": [], "SUBJECTS": "cs.SE cs.AI", "authors": ["bruno antunes", "francisco correia", "paulo gomes"], "accepted": false, "id": "1101.4101"}, "pdf": {"name": "1101.4101.pdf", "metadata": {"source": "CRF", "title": "Context Capture in Software Development", "authors": ["Bruno Antunes", "Francisco Correia", "Paulo Gomes", "P. Gomes"], "emails": ["bema@dei.uc.pt", "fcorreia@dei.uc.pt", "pgomes@dei.uc.pt"], "sections": [{"heading": null, "text": "Key words: context, software development, knowledge management."}, {"heading": "1 Introduction", "text": "The term context has an intuitive meaning for humans, but because of this intuitive connotation it remains vague and generalized. Furthermore, the interest in the many roles of context refers to various areas such as literature, philosophy, linguistics and computer science. The context-conscious computer concept was introduced by Schilit and Theimer, where it refers to the context that surrounds the center of interest, providing additional information and increasing understanding. The context-dependent computer concept was introduced by Schilit and Theimer, where it concerns the place of use, the collection of people nearby, and the changes to these objects."}, {"heading": "2 Context Model", "text": "The contextual model for software developers we propose takes into account all the dimensions that make up the working environment for software developers. In this way, we have identified four main dimensions: personal, project, organization, and domain. As shown in Figure 1, these dimensions form a layer model and are described from four different perspectives: context capture, context modeling, context presentation, and context application. The personal level represents the context of the work a developer has at any given time, which can be defined as a set of tasks. In order to accomplish these tasks, the developer must deal simultaneously with various types of resources, such as source code files, specification documents, bug reports, etc. These resources are typically distributed across different locations and systems, although they are connected by a set of explicit and implicit relationships that exist."}, {"heading": "DOMAIN LAYER", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "PROJECT LAYER", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "PERSONAL", "text": "CONTEXT CHAPTER"}, {"heading": "CONTEXT APPLICATION", "text": "At this level, the contextual model represents the resources that are important for the tasks the developer is working on; the project level focuses on the context of the project, or projects in which the developer is somehow involved; a software development project is an aggregation of a team, a set of resources, and a combination of explicit and implicit knowledge that keeps the project running; the team is responsible for performing tasks that ultimately consume and produce resources; the relationships that exist between people and resources are the glue that makes everything work; the project level represents the people and resources and their relationships with the software development projects in which the developer is included; the organizational level takes into account the organizational context to which the developer belongs; likewise, an organization consists of people, resources, and their relationships, but in a much more complex network; while in a project the people and resources are necessarily linked to the needs of their work, these projects easily become separate islands of software development."}, {"heading": "3 Context Capture", "text": "Our current work focuses on the project level of our developer context model, and we will discuss our work at this level from the various perspectives we have presented before.In terms of context capture, the most important sources of contextual information that feed the developer context model at the project level are project management tools. These tools store a large amount of explicit and implicit information about the resources produced during a software development project, about how the people involved relate to those resources and how the resources relate to each other. We focus on two types of tools: version control systems (VCS) and problem tracking systems (ITS). As shown in Figure 2, the former are resources and their changes, the second of tasks. These systems store valuable information about how developers, tasks and resources relate to each other and how these relationships evolve over time. We are particularly interested in revision logs and tasks, and in short, a set of revisions show that a number of resources have been applied to us."}, {"heading": "MANAGES MANAGES", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "DEVELOPER", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "PERFORMS PERFORMS", "text": "The prototype developed uses a database to store both the imported data and the extracted relationships. In the next phase, we intend to present these relationships and connecting elements in an ontology [5] that will gradually evolve into an ontology of the global developer context model. We believe that the representation of the context model in an ontology and its formalization using the technologies of the semantic web [6] promote knowledge sharing and reusability, since these technologies are standards accepted by the scientific community. Context information gained at the project level is used to inform the developer about the network that connects people, resources and tasks within the project, and this information can be prepared to facilitate consultation and make it easily accessible to the developer in his working environment."}, {"heading": "3.1 Relation Extraction", "text": "We have implemented connectors that allow us to gather all the information we want from the Subversion and Bugzilla systems, as they are among the most popular in the application. By collecting information, we have already been able to identify a number of explicit relationships: what resources are created / modified by which developers, what tasks were assigned to which developers (see relationships numbers 1 and 2 in Figure 3); there are also a number of implicit relationships that would be valuable if disclosed; our approach to extracting implicit relationships between resources and tasks (see relationship number 3 in Figure 3) is based on analyzing the text provided by revision elements; it is common to find references to task identifiers in revision elements by denouncing that the revision was made in the context of a specific task; task summaries and comments refer to specific resources, often specific resources, provided by revision elements."}, {"heading": "3.2 Preliminary Results", "text": "The gEclipse framework enables users and developers to access computing grids and cloud computing resources in a consistent manner, regardless of the grid middleware or cloud computing provider. Our analysis was conducted through the work of 19 developers over a timeframe of approximately 3 years and 3 months, which included 3279 revisions and 1508 tasks with 7,765 comments. - Subversive. The subversive project supports the development of an Eclipse plug-in for Subversion integration. Our analysis was conducted through the work of 10 developers over a timeframe of approximately 3 years and 2 months, which included 1120 revisions and 1013 tasks with 3,252 comments. By applying the relationship extraction algorithms to the information related to these two projects, we have compiled the results presented in Table 1. The table shows the number of different relations that were extracted with each of the algorithms, as well as the detailed problems that are identified in the two related tasks."}, {"heading": "3.3 Prototype", "text": "We have developed a prototype in the form of an Eclipse plug-in to show how the context information can be integrated into the IDE and how developers can be helped. In Figure 4, we show a screenshot of the prototype, in which we can see an Eclipse view called \"Context,\" which shows context information related to a particular resource. Each time the developer opens a resource, that view is updated with a list of developers, resources and tasks related to that resource through the relationships described above. In this way, the developer can easily gather information about what resources are likely to be associated with that resource, what other tasks have affected that resource in the past, and what other developers may be helpful when additional information is needed. The availability of this information within the IDE, where developers do most of their work, increases developers \"awareness and reduces their efforts to find information that would otherwise be hidden and scattered."}, {"heading": "4 Related Work", "text": "This means that most people are able to decide for themselves what they want and what they want."}, {"heading": "5 Conclusions", "text": "Our context model is based on a multi-layered structure that takes into account four main dimensions of a software developer's working environment: human resources, project, organization, and domain. Current work focuses on the project level of the software developer's context model. We discussed this level in more detail and presented preliminary experiments on the perspective of context capture, showing that it is possible to relate tasks and revisions / resources to each other using simple relationship extraction algorithms, which were then used in a plug-in for Eclipse to reveal relevant information to the developer. As a future work, we plan to improve the prototype we developed with better visualization, search, and filtering functionality. We also plan to explore the use of ontologies to represent the developer's context model. The remaining layers of the context model will be treated iteratively as a measure of the work already developed. Finally, we intend to work with our developers to test the approach."}], "references": [{"title": "Context-aware computing: A guide for the pervasive computing community", "author": ["G.K. Mostefaoui", "J. Pasquier-Rocha", "P. Brezillon"], "venue": "Proceedings of the IEEE/ACS International Conference on Pervasive Services, ICPS 2004.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2004}, {"title": "Disseminating active map information to mobile hosts", "author": ["B. Schilit", "M. Theimer"], "venue": "IEEE Network", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1994}, {"title": "Context-aware applications: From the laboratory to the marketplace", "author": ["P.J. Brown", "J.D. Bovey", "X. Chen"], "venue": "Personal Communications, IEEE 4", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1997}, {"title": "Towards a better understanding of context and contextawareness", "author": ["A.K. Dey", "G.D. Abowd"], "venue": "CHI 2000 Workshop on the What, Who, Where, When, and How of Context-Awareness, The Hague, The Netherlands", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2000}, {"title": "Ontology: Its transformation from philosophy to information systems", "author": ["G.L. Zuniga"], "venue": "Proceedings of the International Conference on Formal Ontology in Information Systems, ACM Press", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2001}, {"title": "The semantic web", "author": ["T. Berners-Lee", "J. Hendler", "O. Lassila"], "venue": "Scientific American 284", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2001}, {"title": "A context model for personal knowledge management applications", "author": ["S. Schwarz"], "venue": "Modeling and Retrieval of Context, 2nd International Workshop (MRC 2005), Edinburgh, UK", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2005}, {"title": "Rdf vocabulary description language 1.0: Rdf schema (2004) Published: W3C Recommendation", "author": ["D. Brickley", "R.V. Guha"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "Using task context to improve programmer productivity", "author": ["M. Kersten", "G.C. Murphy"], "venue": "Proceedings of the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, Portland, Oregon, USA, ACM", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2006}, {"title": "Building usage contexts during program comprehension", "author": ["C. Parnin", "C. Gorg"], "venue": "Proceedings of the 14th IEEE International Conference on Program Comprehension (ICPC\u201906).", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2006}, {"title": "Supporting collaborative software development by context-aware information retrieval facilities", "author": ["A. Henrich", "K. Morgenroth"], "venue": "DEXA Workshops, IEEE Computer Society", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2003}, {"title": "Rdf primer (2004) Published: W3C Recommendation", "author": ["E. Miller", "F. Manola"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2004}], "referenceMentions": [{"referenceID": 0, "context": "Furthermore, the interest in the many roles of context comes from different fields such as literature, philosophy, linguistics and computer science, with each field proposing its own view of context [1].", "startOffset": 199, "endOffset": 202}, {"referenceID": 1, "context": "The context-aware computing concept was first introduced by Schilit and Theimer [2], where they refer to context as \u201clocation of use, the collection of nearby people and objects, as well as the changes to those objects over time\u201d.", "startOffset": 80, "endOffset": 83}, {"referenceID": 2, "context": "[3] define context as location, identities of the people around the user, the time of day, season, temperature, etc.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "In a more generic definition, Dey and Abowd [4] define context as \u201cany information that can be used to characterize the situation of an entity.", "startOffset": 44, "endOffset": 47}], "year": 2011, "abstractText": "The context of a software developer is something hard to define and capture, as it represents a complex network of elements across different dimensions that are not limited to the work developed on an IDE. We propose the definition of a software developer context model that takes into account all the dimensions that characterize the work environment of the developer. We are especially focused on what the software developer context encompasses at the project level and how it can be captured. The experimental work done so far show that useful context information can be extracted from project management tools. The extraction, analysis and availability of this context information can be used to enrich the work environment of developers with additional knowledge to support their work.", "creator": "LaTeX with hyperref package"}}}