{"id": "1102.2174", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Feb-2011", "title": "Linear Temporal Logic and Propositional Schemata, Back and Forth (extended version)", "abstract": "This paper relates the well-known formalism of Linear Temporal Logic with the logic of propositional schemata introduced by the authors. We prove that LTL is equivalent to a particular class of schemata in the sense that polynomial-time translation algorithms exist from one logic to the other. Not only does this result shed new light on the expressive power of propositional schemata, but it also entails the new result that the satisfiability of the considered class of schemata is PSPACE-complete. We informally compare the resulting proof procedures for each logic (opposing the direct approaches to the translation-based ones). The encoding from schemata to LTL makes the Wolper procedure for LTL very close to the standard tableaux procedure for schemata. The reverse encoding surprisingly makes the latter procedure very close to the one-pass Schwendimann algorithm for LTL.", "histories": [["v1", "Thu, 10 Feb 2011 17:08:41 GMT  (49kb)", "https://arxiv.org/abs/1102.2174v1", "Extended version of a paper submitted at CADE 2011: contains proofs, additional examples and figures; 34 pages, 8 figures"], ["v2", "Tue, 19 Apr 2011 13:15:36 GMT  (47kb)", "http://arxiv.org/abs/1102.2174v2", "Extended version of a paper submitted at TIME 2011: contains proofs, additional examples &amp; figures, additional comparison between classical LTL/schemata algorithms up to the provided translations, and an example of how to do model checking with schemata; 36 pages, 8 figures"]], "COMMENTS": "Extended version of a paper submitted at CADE 2011: contains proofs, additional examples and figures; 34 pages, 8 figures", "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["vincent aravantinos", "ricardo caferra", "nicolas peltier"], "accepted": false, "id": "1102.2174"}, "pdf": {"name": "1102.2174.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Vincent Aravantinos", "Ricardo Caferra", "Nicolas Peltier"], "emails": ["vincent.aravantinos@imag.fr", "ricardo.caferra@imag.fr", "nicolas.peltier@imag.fr"], "sections": [{"heading": null, "text": "ar Xiv: 110 2.21 74v2 [cs.LO] 1 9A pr"}, {"heading": "1 Introduction", "text": "In fact, it is so that it is about a way and a way in which it is about the question, to what extent it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about"}, {"heading": "2 Definitions and notations", "text": "In the following, instead of performing an interpretation as a function, as in classical propositional logic, we will define every meaningful function as wrong. k = define wrong. k = misdefine. k = misdefine. k = misdefine. q = misdefine. q = schemes, \u03c3 = an LTL or statement interpretation, I, M denote scheme interpretations, e, f, g (Presburger) denote arithmetic expressions, n, i denote arithmetic variables (n is used for a free arithmetic variable (\"parameter\") and i for a bound one). Note that n, i are written in sans serif to distinguish them from metavariables denoting natural numbers that n, i. Both LTL and schemes have a statement logic as a common basis. In addition, statement variables in both languages are accompanied by a natural number (a moment in the case of LL, an index for schemata)."}, {"heading": "2.1 LTL", "text": "We now remember the syntax and semantics of the LTL definition 3. The syntax of the LTL formulas over the set of probability variables P is given by the following grammar: \u03c6: = \"U\" for \"bis.\" We will also use the following abbreviations: F\u03c6 def = U\u03c6 and G\u03c6 def = \u00ac F., \"which means that\" ultimately each has the meaning \"and\" that the abbreviations \"hold.\" The abbreviations \"L\" and \"L\" are defined as usual (the naive elimination of \"exponential,\" but it can be made linear by using the renaming of subformulation systems as usual, which preserves reliability. LTL formulations are usually interpreted in a transitional system."}, {"heading": "2.2 Schemata", "text": "We remember the syntax and semantics of the schematics (for simplicity, the definitions considered are somewhat more restrictive than those of [ACP09]. We let E be the set of Presburger arithmetic expressions, i.e. the terms grounded iff it contains no variable over a numerically infinite set of arithmetic variables X and on the signature, the 0, succ, + and possibly all the constant symbols in N1. As usual, a term is grounded iff it contains no variable. Note that each ground expression is regarded as the natural number that it represents. Definition 9: The syntax of the schematics of the number of propository variables P is given by the following grammar: = E-A-A-A-A-A-A-A A-A-A A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-A-"}, {"heading": "3 Translating interpretations", "text": "In the next sections we will offer translations of LTL formulas into PLC and vice versa. These syntactic translations are based on some semantic translations, which we are now making explicit to give preliminary insights."}, {"heading": "3.1 From schemata to LTL", "text": "This is done by using special LTL interpretations (which are also propositional interpretations) known as \"initial segments\": Definition 19. Let's make a propositional interpretation of a number of variables P. This is done by using an initial segment of length k-N for some p-interpretations (which are also propositional interpretations) when t < k < k, and (p, t) 6, and (p) lt.Example 20. Figure 2 provides a graphical representation of an initial segment of length k-N for some p-P iff (p, t) when t < k, and (p, t) ltlt.Example 20. Figure 2 provides a graphical representation of an initial segment of length p.The main feature of the initial segments is that they can be set in correspondence with natural numbers."}, {"heading": "3.2 From LTL to schemata", "text": "The reverse translation is harder: the embedding of LTL in the schema means that we only have to represent the infinite interpretations of LTL using schema interpretations that are finite. Of course, this is generally impossible. However, since we are actually concerned with satisfaction, we can make use of Theorem 7 and limit ourselves to UP interpretations. Since such interpretations can be presented infinitely, we will be able to embed them in schema interpretations. However, the representation of UP interpretations within a schema is achieved by means of certain schema interpretations that are called \"2-initial segments\": Definition 26. A schema interpretation I = (n) is a 2-initial segment for a propositional interpretation."}, {"heading": "4 Embedding SPS in LTL", "text": "We now show how PLC can be translated into LTL: For a PLC, we build an LTL formula that is satisfactory if iff s is satisfactory, then we show that the size of the land use plan is polynomic or exponential, and the size of the land use plan depends on the encoding of natural numbers (in the arithmetic expressions that occur in s), and since the LTL satisfaction is in PSPACE, we can conclude that the satisfaction of the land use plan is also in PSPACE if numbers are encoded in singular."}, {"heading": "4.1 The \u230a.\u230b transformation", "text": "The most important aspect of the LTL formula is that the interpretation TMU (definition 21) is a model of LTL interpretations as they are formally defined. < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p; &ltp; &ltp; &ltp; &ltp; &ltp < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p < p; p &ltp < p; p < p < p < p; p; p &ltp; p &ltp; p; p &ltp; p &ltp; p; p &ltp; p &ltp; p; p &ltp; p; p &ltp; p; p &ltp; p; p &ltp; p; p &ltp; p; p &ltp; p; p &ltp; p; p &ltp; p &ltp; p; p &ltp; p; p; p &ltp; p; p &ltp; p; p &ltp; p; p; p; p &ltp; p; p; p &ltp; p; p &ltp; p; p; p; p &ltp; p; p; p &ltp; p; p; p; p"}, {"heading": "4.2 Soundness and completeness of \u230a.\u230b.", "text": "Theorem 37 is a PLC. Then T.U is a biprojection between the models of s and the models of s. \"The inverse biprojection is T.U \u2212 1 (definition 21). This result is more interesting than just\" s is satisfactory. \"TMU \u2212 1 is well defined because every model of T's is an initial segment of Proposition 24. We have yet to prove that every model M of s, TMU's is a model for every model of s. TMU \u2212 1 is a model of s.In the following, M is a model of s, n is the value of n, supplementation is a model of X."}, {"heading": "4.3 Consequences.", "text": "This year, it has reached the stage where it will be able to take the lead."}, {"heading": "5 Embedding LTL in SPS", "text": "We are now in a position to find a solution where there can be a solution where there can be a solution. (...) We are not in a position to find a solution. \"(...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution. (...) We are not in a position to find a solution."}, {"heading": "6 Implementation", "text": "The implementations of both schemes are available at http: / / membres-liglab.imag.fr / aravantinos / Site / Some preliminary experiments have been achieved on a few benchmarks: standard schemes examples provided with RegStab [ACP10c] may have been translated into LTL (note that the examples have been slightly modified to meet the limitations of PLC) and standard LTL sample formulas [RV07] may have been translated into PLC. RegStab and pltl performance (http: / users.cecs.anu.edu.au / ~ rpg / software.html) have been compared on both benchmarks. In both cases, pltl is clearly better than RegStab. We see two reasons for this: - RegStab deals with regular schemes that are more general than PLC."}, {"heading": "7 Discussion", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "7.1 Pros and cons of each logic", "text": "Since LTL and PLC are equivalent, one may wonder which problem is to be preferred. There are two main differences between LTL and schemes: - LTL standard interpretations are infinite, whereas schemes are finite; - LTL refers to states in an anonymous manner, whereas schemes call them. These differences provide us with clear criteria for selecting one logic or the other in different situations: to specify an infinite behaviour one would of course use LTL, whereas classes of structurally similar finite behaviour are more naturally specified with schemes. It is not surprising that the specification of temporal behaviour naturally falls into the first category. But, for example, the specification of a circuit falls into the second category regardless of the number of its inputs. For example, consider the specification of a ripple carrier Adder: n, which is itself in the second category."}, {"heading": "7.2 Behaviour of \u230a.\u230b w.r.t. LTL decision procedures", "text": "We are now analyzing how the standard multi-pass tableau of [Wol85] (called LTL-tab) (from now on) works. < n = 2) \"We are analyzing how the standard multi-pass tableau of [Wol85] (called LTL-tab) (from now on) works.\" < n) \"We are analyzing how the standard multi-pass tableau of [Wol85] tab, the rule for the U connection, is applied.\" < n \"We are outlining its construction by focusing on the most relevant branches (the following ltL-tab, see [Wol85] otherwise. < n\" The rule for the U-tab applies to the extended < n < n < n \"< n) UG\" (t < n) UG \"(from now < n).\""}, {"heading": "7.3 Behaviour of \u2308.\u2309 w.r.t. SPS decision procedures", "text": "o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. \"o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o. o"}, {"heading": "8 Model checking safety properties with schemata: an example", "text": "With the transition period listed in section 5 and a transition period from satisfaction to satisfaction, it is a normal system in which we orient ourselves on satisfaction. (D) We can only achieve a much easier transition period than there can be a model of the transition period. (D) We can only pass this transition period if we have a purely propositional formula in which we have a purely propositional formula. (D) We have a transition system T (D) and want to check whether it is a model of the transition period. (D) We first remember these terms. (D) A transition system is three times a series of measures A, and a transition period function: S (D) S (D) S (D) S (D) S (S) S (S) S (S) S (S) S S S S S (S) S S S S S (S) S S S S (S) S S S (S) S S S (S) S S S (S) S S (S) S (S) S S (S) S (S S (S) S (S) S S (S) S S (S (S) S S (S) S (S) S S (S) S S (S (S) S S S (S) S S (S) S S S (S (S) S S S (S S S) S S (S S) S (S S S S (S) S S S (D) S (D) S (D) S (D). (D) We can only pass through a transition period if we have a purely propositional formula in which we have a purely propositional formula in which we have a purely propositional formula in which we have a purely propositional formula. (D)."}, {"heading": "9 Conclusion and future work", "text": "In this sense, it is not surprising that the reduction from PLC to LTL is not so surprising, and the reverse reduction takes advantage of the well-known fact that the infinite semantics of LTL can be represented infinitely. This remark illustrates one of the two major differences between LTL and schemes: while the semantics of LTL are endless, the schemes are finite; the other difference is that schemes refer to a time in the future in a symbolic way (using the n parameter) and that they use arithmetic operations to construct time expressions."}], "references": [{"title": "A Schemata Calculus for Propositional Logic, TABLEAUX", "author": ["ACP09. Vincent Aravantinos", "Ricardo Caferra", "Nicolas Peltier"], "venue": "vol. 5607,", "citeRegEx": "Aravantinos et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Aravantinos et al\\.", "year": 2009}, {"title": "A Resolution Calculus for Propositional Schemata", "author": ["AMEP10. Vincent Aravantinos", "Mnacho Echenim", "Nicolas Peltier"], "venue": "Tech. report,", "citeRegEx": "Aravantinos et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Aravantinos et al\\.", "year": 2010}, {"title": "Bounded model checking", "author": ["BCC03. Armin Biere", "Alessandro Cimatti", "Edmund M. Clarke", "Ofer Strichman", "Yunshan Zhu"], "venue": "Advances in Computers", "citeRegEx": "Biere et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Biere et al\\.", "year": 2003}, {"title": "LTL Goal Specifications Revisited, ECAI (Amsterdam)", "author": ["BH10. Andreas Bauer", "Patrik Haslum"], "venue": null, "citeRegEx": "Bauer and Haslum,? \\Q2010\\E", "shortCiteRegEx": "Bauer and Haslum", "year": 2010}, {"title": "The complexity of propositional linear temporal logics", "author": ["SC85. A.P. Sistla", "E.M. Clarke"], "venue": "Journal of the ACM", "citeRegEx": "Sistla and Clarke,? \\Q1985\\E", "shortCiteRegEx": "Sistla and Clarke", "year": 1985}, {"title": "Star-free regular sets of \u03c9-sequences", "author": ["Tho79. Wolfgang Thomas"], "venue": "Information and Control", "citeRegEx": "Thomas,? \\Q1979\\E", "shortCiteRegEx": "Thomas", "year": 1979}, {"title": "Temporal Logics for Specification and Verification, Proceedings of the European Summer School in Logic, Language and Information (ESSLI\u201909)", "author": ["VG09. Valentin Goranko"], "venue": null, "citeRegEx": "Goranko,? \\Q2009\\E", "shortCiteRegEx": "Goranko", "year": 2009}, {"title": "The tableau method for temporal logic: an overview", "author": ["Wol85. Pierre Wolper"], "venue": "Logique et Analyse", "citeRegEx": "Wolper,? \\Q1985\\E", "shortCiteRegEx": "Wolper", "year": 1985}, {"title": "Reasoning about infinite computation paths", "author": ["WVS83. Pierre Wolper", "Moshe Y. Vardi", "A. Prasad Sistla"], "venue": "Foundations of Computer Science, Annual IEEE Symposium on", "citeRegEx": "Wolper et al\\.,? \\Q1983\\E", "shortCiteRegEx": "Wolper et al\\.", "year": 1983}], "referenceMentions": [], "year": 2013, "abstractText": "This paper relates the well-known formalism of Linear Temporal Logic [Pnu77] with the logic of propositional schemata introduced in [ACP09]. We prove that LTL is equivalent to a particular class of schemata in the sense that polynomial-time translation algorithms exist from one logic to the other. Some consequences about complexity are given. We report about first experiments and the consequences about possible improvements in existing implementations are analyzed.", "creator": "LaTeX with hyperref package"}}}