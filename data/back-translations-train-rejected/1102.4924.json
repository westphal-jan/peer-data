{"id": "1102.4924", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Feb-2011", "title": "New Worst-Case Upper Bound for #XSAT", "abstract": "An algorithm running in O(1.1995n) is presented for counting models for exact satisfiability formulae(#XSAT). This is faster than the previously best algorithm which runs in O(1.2190n). In order to improve the efficiency of the algorithm, a new principle, i.e. the common literals principle, is addressed to simplify formulae. This allows us to eliminate more common literals. In addition, we firstly inject the resolution principles into solving #XSAT problem, and therefore this further improves the efficiency of the algorithm.", "histories": [["v1", "Thu, 24 Feb 2011 08:16:59 GMT  (580kb)", "http://arxiv.org/abs/1102.4924v1", "submitted to AAAI-10"]], "COMMENTS": "submitted to AAAI-10", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["junping zhou", "minghao yin"], "accepted": false, "id": "1102.4924"}, "pdf": {"name": "1102.4924.pdf", "metadata": {"source": "CRF", "title": "New Worst-Case Upper Bound for #XSAT", "authors": ["Junping Zhou", "Minghao Yin"], "emails": ["ymh@nenu.edu.cn"], "sections": [{"heading": null, "text": "In order to improve the efficiency of the algorithm, we are turning to a new principle to simplify formulas, the Common Literals principle, which allows us to eliminate more frequent literals. In addition, we are first injecting the resolution principles into the solution of the # XSAT problem, which further improves the efficiency of the algorithm."}, {"heading": "Introduction", "text": "In fact, the fact is that most of them will be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be able to be in a position to be in a position to be able to be able to put themselves in a position to be able to put themselves in a position."}, {"heading": "Problem Definitions", "text": "We describe some of the definitions used in this work. Let V represent a series of statement variables as singleton. Each variable can take the values true or false. A letter is either a variable x or its negation x. Each letter can take the formula formula true or false. If a letter is l, the negation of the letter l. The logical disjunction of a finite number of letters forms a sentence. The logical disjunction C is a unit clause if the length of the letter is 1. And if there is a sentence that contains x1 x2 letters, so that C is a disjunction of one or more letters, we call C is a sub-clause. A formula F in Conjunction Normal Form (CNF) is a logical conjunction of a series of clauses. A variable that occurs once in F is called a singleton."}, {"heading": "Estimating the Running Time", "text": "The branching tree (Hirsch 2000) is a hierarchical tree formula with a series of nodes, each of which is labeled with a formula. Suppose there is a node labeled with a formula F, then its sons labeled with F1, F2,..., Fk are reached by branching on one or more variables in formula F, i.e., mapping values to variables (s) so that formula F is reduced to two or more sub-formulas, F2, Fk with fewer variables. In fact, the construction of a branched tree can be considered an execution of a DPLL-like algorithm. Therefore, we assume the branched tree to estimate the runtime of our algorithm."}, {"heading": "Algorithm for Solving #XSAT", "text": "In this section we present the algorithm # XSAT for counting models of the exact satisfaction problem and prove an upper limit O (1.1995 n)."}, {"heading": "Reduction Principles", "text": "In this subsection, we focus on the introduction of the common letter principle and describe how to resolve the resolution principles in solving the # XSAT problem =. Before introducing the common variable principle, the functional unit (F [l]) in Figure 1 is addressed, which performs the propagation recursively, but the function takes a formula F and a literal l that applies as input (3). The detailed process of the function is presented as follows: (1) Remove all clauses that literally contain l from F; (2) Delete all occurrences from the negation of the literal l of F; (4) Perform the process as far as possible. Finally, the function returns a simplified formula. For simplification in writing, the functional unit (F [l] is called for short in the following sections F [l]. We begin to present the principle of common variables."}, {"heading": "Helpful Functions", "text": "The subsection discusses some functions used to simplify formulas. The first Reduce (F) function in Figure 2 is to simplify formula F by recursively executing the common letter principle, the resolution principles, and some standard formulas used by (Kulikov 2005). It takes formula F as input and returns reduced F and a set of R that records the eliminating sub-clauses. The reason why we use R is that when using the common letter principle, the number of letters in the distant subset C should be kept. Furthermore, if a sentence contains more than one singleton, an XSAT formula F will allow us to reserve a singleton and remove the superfluous paragraphs. However, eliminating sub-clauses that contain only the letters leads to the wrong result in counting the models of F. Therefore, we enter the set of R to record two sub-clauses."}, {"heading": "Algorithm #XSAT", "text": "In fact, most of them will be able to abide by the rules that they have applied in practice."}, {"heading": "Conclusion", "text": "The present algorithm is a DPLL-style algorithm. In order to improve the algorithms, we have introduced a new principle of common literals to simplify the formulas and first introduce the resolution principles into the solution of the # XSAT problem, which further improves the efficiency of the algorithm. After a skillful analysis of these algorithms, we obtain the worst time of the upper limit O (1.1995 n) for # XSAT, where n is the number of variables."}], "references": [{"title": "New algorithms for Exact Satisfiability", "author": ["J. Byskov", "A. Madsen", "B.. Skjernaa"], "venue": "Theoretical Comput. Sci. 332(1-3): 515\u2013541. Dahll\u00f6f V., Jonsson P.. 2002. An algorithm for counting maximum weighted independent sets and its applications. In 13th SODA, 292-298. Dahll\u00f6f V., Jonsson P., and Beigel R.. 2004. Algorithms for four variants of the exact satisfiability problem. Theoretical", "citeRegEx": "Byskov et al\\.,? 2005", "shortCiteRegEx": "Byskov et al\\.", "year": 2005}, {"title": "Using CSP to improve deterministic 3-SAT. arXiv:1007.1166v2", "author": ["Kutzkov K", "Scheder D"], "venue": "Comput. Sci", "citeRegEx": "K. and D..2010.,? \\Q2005\\E", "shortCiteRegEx": "K. and D..2010.", "year": 2005}, {"title": "16254n ) for exact 3-satisfiability: a simpler proof", "author": ["Hirsch E. A"], "venue": "J. Math. Sci", "citeRegEx": "0", "shortCiteRegEx": "0", "year": 2000}, {"title": "MAP complexity results and approximation methods", "author": ["Park J.D.."], "venue": "18th UAI, 388-396. Sang T., Beame P., and Kautz H.A.. 2005. Performing Bayesian inference by weighted model counting. In 20th AAAI, 475482. Porschen S.. 2005. On some weighted satisfiability and graph problems. In 31s SOFSEM, 278-287. Porschen S.. 2006. Counting all solutions of minimum weight exact satisfiability. In 6th CIAC, 50-59.", "citeRegEx": "J.D..,? 2002", "shortCiteRegEx": "J.D..", "year": 2002}, {"title": "The complexity of computing the permanent", "author": ["Valiant G.."], "venue": "Theoretical Comput. Sci. 8(2): 189\u2013201.", "citeRegEx": "G..,? 1979", "shortCiteRegEx": "G..", "year": 1979}], "referenceMentions": [{"referenceID": 2, "context": "2010) ran in O(1.439 n ), which is a meaningful advance over O(2 n ). And the 3-SAT instances with 65 variables can be solved by the algorithm in approximately 10 10 steps, instead of 10 19 (which may not be tractable). Therefore, it is significant to improve the upper bounds on the worst-case running time for problems with high computational complexity. #XSAT is one of hard problems whose computational complexity is further up the polynomial hierarchy. Valiant (1979) has proved that #XSAT is #P-complete.", "startOffset": 1, "endOffset": 473}, {"referenceID": 3, "context": "example, based on an algorithm for counting all maximum weight independent sets in a simple graph, Dahllof and Jonsson (2002) presented an upper time bound for #XSAT (O(1.", "startOffset": 23, "endOffset": 126}, {"referenceID": 2, "context": "example, based on an algorithm for counting all maximum weight independent sets in a simple graph, Dahllof and Jonsson (2002) presented an upper time bound for #XSAT (O(1.7548 n ), where n is the number of the variables). Further improved algorithm in (Porschen 2005) proposed a new upper time bound for the #XSAT (O(1.3248 n )). Instead of only outputting the number of models, Porschen in 2006 presented an algorithm solving #XSAT for enumerating all exact models of the input formula. By addressing a simple reduction, Dahllof et al. (2004) presented a #XSAT algorithm which ran in O(1.", "startOffset": 121, "endOffset": 544}, {"referenceID": 0, "context": "Next we describe how to solve the #XSAT problem using the resolution principles which inspired by (Byskov et al. 2005).", "startOffset": 98, "endOffset": 118}], "year": 2011, "abstractText": "An algorithm running in O(1.1995) is presented for counting models for exact satisfiability formulae(#XSAT). This is faster than the previously best algorithm which runs in O(1.2190). In order to improve the efficiency of the algorithm, a new principle, i.e. the common literals principle, is addressed to simplify formulae. This allows us to eliminate more common literals. In addition, we firstly inject the resolution principles into solving #XSAT problem, and therefore this further improves the efficiency of the algorithm.", "creator": "Microsoft\u00ae Office Word 2007"}}}