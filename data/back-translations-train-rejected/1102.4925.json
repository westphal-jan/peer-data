{"id": "1102.4925", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Feb-2011", "title": "Worst-Case Upper Bound for (1, 2)-QSAT", "abstract": "The rigorous theoretical analysis of the algorithm for a subclass of QSAT, i.e. (1, 2)-QSAT, has been proposed in the literature. (1, 2)-QSAT, first introduced in SAT'08, can be seen as quantified extended 2-CNF formulas. Until now, within our knowledge, there exists no algorithm presenting the worst upper bound for (1, 2)-QSAT. Therefore in this paper, we present an exact algorithm to solve (1, 2)-QSAT. By analyzing the algorithms, we obtain a worst-case upper bound O(1.4142m), where m is the number of clauses.", "histories": [["v1", "Thu, 24 Feb 2011 08:24:04 GMT  (467kb)", "http://arxiv.org/abs/1102.4925v1", "submitted to SAT11"], ["v2", "Sat, 26 Mar 2011 03:20:14 GMT  (467kb)", "http://arxiv.org/abs/1102.4925v2", null]], "COMMENTS": "submitted to SAT11", "reviews": [], "SUBJECTS": "cs.AI cs.CC", "authors": ["minghao yin"], "accepted": false, "id": "1102.4925"}, "pdf": {"name": "1102.4925.pdf", "metadata": {"source": "CRF", "title": "Worst-Case Upper Bound for (1, 2)-QSAT", "authors": ["Minghao Yin"], "emails": ["ymh@nenu.edu.cn"], "sections": [{"heading": null, "text": "QSAT, i.e. (1, 2) -QSAT, has been suggested in the literature. (1, 2) -QSAT, which was first introduced in SAT '08, can be considered as quantified extended 2-CNF formulas. To our knowledge, no algorithm exists that represents the worst upper limit for (1, 2) -QSAT. Therefore, in this paper we present an exact algorithm for solving (1, 2) -QSAT. By analyzing the algorithms, we obtain a worst upper limit O (1,4142 m), where m is the number of records. Keywords: (1, 2) -QSAT; the worst case; upper limit."}, {"heading": "1 Introduction", "text": "In fact, it is as if most of them are able to survive themselves if they are not able to follow the rules. (...) In fact, it is as if they are not able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves."}, {"heading": "2 Basic Concepts", "text": "In this section we will recall some necessary concepts in this essay. We will describe some definitions used in this essay. A variable x can take the values true or false. A letter of a variable is either the non-negated letter word x, which has the same truth value as the variable, or the negated letter word x, which has the opposite truth value as a variable. A clause is a separation of letters, which is called the k clause, if the clause is a separation of k-literals. A k-SAT formula F in the normal form (CNF) is a combination of clauses, each of which contains exactly k-literals. A (1, 2) -QSAT formula F is in the form of (,) X X X Y Y Y Y Y has 1n variables, Y has 2n variables, and (,) X Y is a conjunction of 3 clauses, each of which contains exactly one universal arc and two existential ones."}, {"heading": "3 Estimating the Running Time", "text": "In this section we will explain how to calculate the complexity of our algorithms. We will use a term called the branching tree. [5] is a hierarchical tree structure consisting of a series of nodes, and each node is labeled with a sentence formula. If we look at a node labeled with a formula F, then its sons are labeled with sub-formulas F1, F2,..., Fn, with the formula (1 i n) being assigned a value to one of the variables in F. According to the definition above, we can see that the process of constructing a branching tree is the same as the process of executing DPLL-style algorithms, so we will use the branching tree to estimate the complexity of time. In the branching tree, each node has a branching tuple [4]. Let's say a node labeled with F0 and its children."}, {"heading": "4 Transformation Rules", "text": "This year it is more than ever before."}, {"heading": "6 Complexity Analysis", "text": "In this section we will use the branch tree to estimate the temporal complexity of the algorithm Sm. (Since the function QSAT2 (F) can solve the 2-CNF QSAT in polynomial time, we therefore only need to estimate the runtime taken in the process of transformation from the 3-sentence formula to 2-sentence formulas. This is because the simplified clauses containing only existential literals can be removed by decreasing or branching, but the simplified clauses containing universal literals can only be obtained by branching. Theorem 2. Algorithm Sm runs in O (1.4142 m) time in which m contains the number of clauses containing only existential literals. Proof. Let us analyze the algorithm 1 (line 1) is the course of simplification."}, {"heading": "7 Conclusion", "text": "This paper deals with the least favorable upper limit for the (1, 2) -QSAT problem with the number of clauses as parameters. The basic idea behind the algorithm is to convert 3-CNF clauses into 2-CNF clauses and then solve the 2-CNF-QSAT directly. After a skillful analysis of these algorithms we get the least favorable upper limit O (1.4142 m) for X3SAT."}, {"heading": "Acknowledgments", "text": "This research is fully supported by the National Natural Science Foundation of China under grant number 60803102 and is also funded by the NSFC Major Research Program 60496321: Basic Theory and Core Techniques of Non Canonical Knowledge."}], "references": [{"title": "A linear-time algorithm fortesting thetruth of certain quantified Boolean formulas, Information Processing", "author": ["B. Apswall", "F. Plass M", "E. Tarjan R"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1979}, {"title": "New results on the phase transition for random quantified Boolean formulas", "author": ["N. Creignou", "H. Daud\u00e9", "U. Egly", "R. Rossignol"], "venue": "Proceedings of SAT 2008. LNCS, vol. 4996, pp. 34\u201347. Springer, Heidelberg", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2008}, {"title": "1, 2)-QSAT: A Good Candidate for Understanding Phase Transitions Mechanisms", "author": ["N. Creignou", "H. Daud\u00e9", "U. Egly", "R. Rossignol"], "venue": "Proceedings of SAT\u201909: pp. 363-376.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2009}, {"title": "Improved Algorithms for 3-Coloring, 3-Edge-Coloring, and Constraint Satisfaction", "author": ["D. Eppstein"], "venue": "Proceedings of 12th ACM-SIAM Symposium on Discrete Algorithms,pp.329337", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2001}, {"title": "A", "author": ["E. Hirsch"], "venue": "New worst-case upper bounds for SAT, Journal of Automated Reasoning, 24(4): 397-420.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2000}, {"title": "Using CSP to improve deterministic 3-SAT", "author": ["K. Kutzkov", "D. Scheder"], "venue": "arXiv:1007.1166v2,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2010}, {"title": "Improved bound for the PPSZ/Schoning-algorithm for 3-SAT", "author": ["D. Rolf."], "venue": "Electronic Colloquium on Computational Complexity (ECCC), 159,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2005}, {"title": "Algorithms for quantified Boolean formulas", "author": ["R. Williams"], "venue": "Proc. 13 ACM-SIAM Symp. On Discrete Algorithms (SODA), pp. 299-307.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2002}, {"title": "New Worst-Case Upper Bound for #2-SAT and #3-SAT with the Number of Clauses as the Parameter", "author": ["J. Zhou", "M. Yin", "C. Zhou"], "venue": "Proceedings of AAAI,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 5, "context": "439 n ) achieved by Kutzkov and Scheder [6], and that for local search algorithm is O(1.", "startOffset": 40, "endOffset": 43}, {"referenceID": 6, "context": "32216 n ) achieved by Rolf [7].", "startOffset": 27, "endOffset": 30}, {"referenceID": 7, "context": "619 m ) where m is the number of clauses, as can be seen in ([8].", "startOffset": 61, "endOffset": 64}, {"referenceID": 1, "context": "In this paper, we focus on a subclass of closed quantified Boolean formulas, (1, 2)QSAT, which was first introduced in [2].", "startOffset": 119, "endOffset": 122}, {"referenceID": 1, "context": "But in general case, this problem is co-NP-complete [2].", "startOffset": 52, "endOffset": 55}, {"referenceID": 1, "context": "Creignou have studied the phase transition phenomenon of (1, 2)-QSAT [2, 3].", "startOffset": 69, "endOffset": 75}, {"referenceID": 2, "context": "Creignou have studied the phase transition phenomenon of (1, 2)-QSAT [2, 3].", "startOffset": 69, "endOffset": 75}, {"referenceID": 4, "context": "The branching tree [5] is a hierarchical tree structure consisting of a set of nodes, and each node is labeled with a proposition formula.", "startOffset": 19, "endOffset": 22}, {"referenceID": 3, "context": "In the branching tree, every node has a branching tuple [4].", "startOffset": 56, "endOffset": 59}, {"referenceID": 0, "context": "Note that the function QSAT2(F) can solve the 2-CNF QSAT in polynomial time [1].", "startOffset": 76, "endOffset": 79}], "year": 2011, "abstractText": "The rigorous theoretical analysis of the algorithm for a subclass of QSAT, i.e. (1, 2)-QSAT, has been proposed in the literature. (1, 2)-QSAT, first introduced in SAT\u201908, can be seen as quantified extended 2-CNF formulas. Until now, within our knowledge, there exists no algorithm presenting the worst upper bound for (1, 2)-QSAT. Therefore in this paper, we present an exact algorithm to solve (1, 2)-QSAT. By analyzing the algorithms, we obtain a worst-case upper bound O(1.4142), where m is the number of clauses.", "creator": "Microsoft\u00ae Office Word 2007"}}}