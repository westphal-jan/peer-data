{"id": "1103.0632", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Mar-2011", "title": "An Agent Based Architecture (Using Planning) for Dynamic and Semantic Web Services Composition in an EBXML Context", "abstract": "The process-based semantic composition of Web Services is gaining a considerable momentum as an approach for the effective integration of distributed, heterogeneous, and autonomous applications. To compose Web Services semantically, we need an ontology. There are several ways of inserting semantics in Web Services. One of them consists of using description languages like OWL-S. In this paper, we introduce our work which consists in the proposition of a new model and the use of semantic matching technology for semantic and dynamic composition of ebXML business processes.", "histories": [["v1", "Thu, 3 Mar 2011 09:44:06 GMT  (520kb)", "http://arxiv.org/abs/1103.0632v1", "22 pages, 11 figures, 1 table"]], "COMMENTS": "22 pages, 11 figures, 1 table", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["hioual ouassila", "boufaida zizette"], "accepted": false, "id": "1103.0632"}, "pdf": {"name": "1103.0632.pdf", "metadata": {"source": "CRF", "title": "AN AGENT BASED ARCHITECTURE (USING PLANNING) FOR DYNAMIC", "authors": ["IN AN EBXML"], "emails": ["ouassila.hioual@gmail.com", "zboufaida@gmail.com"], "sections": [{"heading": null, "text": "The process-based semantic composition of web services is gaining considerable momentum as an approach to effectively integrating distributed, heterogeneous and autonomous applications. To write web services semantically, we need an ontology. There are several ways to insert semantics into web services, one of which is to use descriptive languages such as OWL-S. In this article, we present our work, which consists of creating a new model and using semantic matching technologies for the semantic and dynamic composition of ebXML business processes. KEYWORDSWeb Services; Semantic Composition; Dynamic Composition; Multi Agent System and Planning; ebXML"}, {"heading": "1. INTRODUCTION", "text": "In fact, it is a question of pure bickering, a question of a kind of bondage, a question of a kind of bondage, a question of a kind of bondage, a question of a question of bondage, and a question of a question of a question of bondage, a question of a question of a question of bondage, a question of a question of a question of bondage, of a question of a question of a question of bondage, of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of a question of an answer."}, {"heading": "2. RELATED WORK", "text": "Different composition techniques of web services exist in the literature. There are two groups: the static techniques, i.e. those defined by business process (orchestration and choreography); and the dynamic ones, in which the composition of web services takes into account the available services, their properties and the purpose to be achieved. Techniques of dynamic composition can be grouped into two subfamilies: techniques based on workflows (BPs) and those based on artificial intelligence techniques. In our work, we are interested in the second type of composition, which takes into account the preferences and limitations of customers. Several works have proposed different automated planning techniques to address the problem of automated composition (see e.g. [12, 21, 22, 5]. In this paper, we are interested in this type of research that takes into account the preferences and limitations of the customer."}, {"heading": "3. USING A MULTI-AGENT SYSTEM AS A DYNAMIC SERVICE", "text": "COMPOSITION INFRASTRUCTUREA Multi-Agent System (MAS) is a distributed system of autonomous units, the so-called agents. These agents must interact and cooperate in order to perform global tasks. One of the most important characteristics of MAS is that it is based on the distribution of cooperation algorithms and not on centralized processes. We highlight two main features of MAS in terms of dynamic power composition. MAS enables complex interactions between units using high-level semantic languages. This feature appears to be indispensable in environments that deal with different, heterogeneous information from physical sensors, services or user preferences. Integration of such data is only possible at a higher level, where all types of information (about services, context...) are expressed semantically. In MAS coordinate autonomous units with limited capabilities to perform complex tasks. Emergency coordination and flexible organizational patterns allow agent groups to create new configurations depending on the conditions and dynamics of applications."}, {"heading": "4. RESEARCH PROBLEM AND OBJECTIVES", "text": "The composition of the web services aims to create a description that specifies a sequence of calls to services and the way in which these services are connected to each other, with the aim of solving a specific goal. This operation is carried out in three steps: 1- The web services are searched for and selected from an UDDI directory (in our case from the ebXML register), depending on the needs to be realized; 2- The composition is made using the semantic description of the selected services; 3- A description of the composite service, i.e. the sequence of calls to these selected services, is created. Our research problem is part of the semantic and dynamic composition of the web services in the context of ebXML (electronic business eXtensible markup language). The aim is to add to the functional specification of the ebXML a component whose role is: - Look, semantic, for BPs (business processes) that correspond to the customer's requirements."}, {"heading": "4.1. WHERE WE ARE LOCATING THE NEW COMPONENT", "text": "ebXML [26] is a set of specifications that together enable a modular electronic business framework.The vision of ebXML is to create a global electronic marketplace where companies of all sizes and geographical locations can meet and conduct business with each other by exchanging XML-based messags.Figure 1 is an illustration based on the ebXML Technical Architecture Specification [26], which gives an overview of what ebXML means to enterprises. In the context of ebXML, all business processes (BPs) of enterprises (large or small) using ebXML as a tool to participate in global markets.From our point of view, the problem appears to be ebXML BP's composition in two scenarios: 1. If the process seeking with specified parameters does not exist, ebXML becomes based on the scenario of cooperation between two commercial partners."}, {"heading": "5. PROPOSED ARCHITECTURE", "text": "As shown, Figure 2, the architecture that we propose, is an agent that defines multiple levels > accountability. Four types of agents compose it: the request re-constructor agent, the general manager agent, the composer agent and a number of manager agents. Another important component allows to specify semantics of the various web services that exist in the ebXML register. It is a global OWL-S ontology, for the semantic annotation of these services. OWL-S is very rich and imposes very few restrictions on the way this semantic is expressed. As our work is inspired by the [19] and [20], we have a certain number of hypotheses and constraints on this latter, in order to facilitate the passage of a semantic representation towards a plan: - The simple process (SimpleProcess) is not treated. In fact, they correspond to the composite odepositions or compositions of the WS; - the result of allowing the simple process (SimpleProcess)."}, {"heading": "5.1. ROLE OF ONTOLOGIES IN INTERACTION", "text": "As autonomous problem solvers, actors must develop a model of their environment that enables them to think about how their actions affect their environment and how these changes drive them to achieve their goals. [28] Ontologies provide the conceptual framework that allows agents to construct such models: ontologies describe the characteristics of entities that agents encounter and the relationships between them. Therefore, a common vocabulary in the form of ontologies forms the core of intelligent communication between agents."}, {"heading": "5.2. PRELIMINARY DEFINITIONS", "text": "In this section we present some definitions that are necessary for the understanding of the proposed architecture, which function both as a problem and as a result of the proposed composition model}, {"heading": "5.3. AGENTS ROLE AND TASKS", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5.3.1. Manager agent", "text": "The manager-agent ensures that the description of an imported service is significant with regard to the subontology, in particular by controlling its operations, its inputs and outputs, which must be concepts of the corresponding subontology. He stores all OWL-S descriptions of services and the localizations of his suppliers. At the time of composition, the manager-agent corresponds to a web service. He is initialized with the semantic description of the service and with a set of data enabling him to argue. For example, an agent representing a rail transport booking service has the list of existing courses. These data form the knowledge base of the manager-agent. From the semantic description, a manager-agent creates his planning area, which, under the form of methods and operators extracted from the processes of the OWL-S description, includes the practicable actions of the agent, i.e. his competence base."}, {"heading": "5.3.2. Request Re-constructor Agent", "text": "The main task of the Reconstructor Agent is to reconstruct the \"user requirement\" from the descriptions recorded in the global ontology of web services, while also supporting the atomic and composite services. The result of this task is an OWL-S file."}, {"heading": "5.3.3. General Manager Agent", "text": "In this case, the Director-General's Plenipotentiary invokes the composer's Plenipotentiary, who invokes the Plenipotentiary of the composer concerned by the request. If, on the other hand, the user of the request refers to a nuclear service, the Plenipotentiary of the Director-General invokes the Plenipotentiary directly, because he has a global view of the system."}, {"heading": "5.3.4. Composer Agent", "text": "The composer has the task of coordinating and assembling the manager-agents in order to carry out the necessary operations. He also initiates the composition process by communicating to the manager-agents the goal to be achieved in the form of an initial conjecture, which represents the original plan."}, {"heading": "5.4. MAIN TASKS INVOLVED IN THE COMPOSITION PROCESS", "text": "In order to reconstruct a request, the request constructor agent retrieves available OWL-S performance descriptions stored in the global ontology of BPs that support both atomic and compound processes.Once the user's request is semantically described, the general manager agent must be able to determine whether the user's request can be carried out through an atomic service or by assembling multiple services. In the second case, the composer must be called. The composer processes the composite service in the order specified by the user; then he identifies the manager agents that manage the sub-ontologies that publish the required processes. He must be able to perform a synchronization between the input of successive operations and a synchronization between the input of a call and the input of the next call. In this case, we distinguish several types that partially match (we match the matching between the conditions and the match)."}, {"heading": "5.5. INTRODUCTIVE EXAMPLE", "text": "The following scenario illustrates what we mean by automatic and dynamic composition: A person X lives in Lyon and has to go to Tokyo for a conference. He decides to organize his journey over the Internet by using two web services. Each service is represented by a manager-agent: an Airways agent who offers a service for reserving airline tickets and a bank representative (who represents the X-Bank) who takes over the various reservations that X is made to realize. The problem that the user submits to the user of the interface can be summarized as follows: - Starting state: X is in Lyon - End state: X is in Tokyo A possible plan resulting from the composition of these two web services can be expressed as follows: 1. Reserve the flight from Lyon to Paris. 2. Pay for the ticket Lyon - Paris. 3. Reserve the flight from Paris to Tokyo. 4. Pay for the ticket Paris - Tokyo. Now imagine the dialogue that the different agents who put together our architecture can be X, that I can go to Lyon and that I am X in his conference."}, {"heading": "5.6. COMPOSITION MODEL", "text": "At the stage of the composition process [30], each manager-agent represents a reserved service belonging to the subontology he or she manages. At the time of composition, his or her goal is to simulate the execution of the service. This agent is an autonomous entity that contains a planner and is able to interact with the composer-agent in order to jointly create a plan for the execution of web services. The model proposed by us is based on a multi-agent architect, whose manager-agents represent the web services. The manager-agents are initialized with the semantic description of the service and with the knowledge base. The description of OWL-S allows the definition of the planning area of the agent, while the knowledge base brings to reason the knowledge that will be necessary for the agent. Our model is based on the dialectical plan synthesis proposed by [31], whereby the centralization of the decision-agent (component agent-agent) to the final decision-making process (the subset-up of the proposals) of the three proposed agents:"}, {"heading": "5.6.1. Initialization of the manager agents and of the composer agent", "text": "Each manager agent corresponds to a reserved web service. It is initialized with the semantic description of the service and with a set of data that allows the manager agent to reason. For example, an agent representing a rail transport booking service has the list of existing routes at his disposal. These data form the knowledge base of the manager agent. The composer agent is initialized with the semantic description of the user request that the general manager agent has received back, and with a set of data that allows him to reason."}, {"heading": "5.6.2. Competences base Creation", "text": "From the semantic description, the agents generate their planning domain, which, in the form of methods and operators extracted from the processes of the OWL-S description, includes the practicable actions of the agents, i.e. their base of competences. a. the creation of the planning domain from the semantic description of a web serviceThe model of the OWL-S process describes in a declarative way the characteristics and behaviour of a web service. The translation algorithm we use is that of [19].This algorithm has as input an OWL-S description. The property \"DescribedBy,\" which means that a service is described by a process, the \"input point\" from the description, i.e. the first process to be translated."}, {"heading": "5.6.3. Refinement of conjectures", "text": "A manager-agent, based on the presumption he has received from the composer-agent, will argue about his competences (i.e. the actions he can plan) and his knowledge in order to solve the objective contained in this presumption: he will refine it by adding to it a subjectivity, i.e. a sequence of actions, or by adding causal links. A manager-agent can refine a conjecture by sending hypotheses about the characteristics he does not know. These hypotheses form new goals to be solved for the other manager-agent."}, {"heading": "5.7. AGENTS ARCHITECTURE AND FUNCTIONNING", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5.7.1. Request constructor agent", "text": "The first language designed by the W3C consortium in the Web Semantic domain is the RDF (Resource Description Framework) language [33]. RDF is an XML language used to describe metadata and to facilitate its handling by specific application programs. RDFS (RDF Schema) language was developed to give RDF more expressive power. However, many limitations limit the ability to express knowledge. In fact, it is not possible to perform automated reasoning on knowledge modelled using RDFS. To overcome this shortcoming, a new language for Web called OWL (Ontology Web Language) [34] has been developed. OWL is based on the logic description. With OWL, knowledge about a domain can be described in terms of classes and a number of properties."}, {"heading": "A. Request Constructor Agent Functioning", "text": "This handling consists of four phases: traversing the XML file, generating instances, extracting part of the subontology of the agent and creating the description of the web service. Thus, we can say that all successive points form the inference engine of the agent (see Figure 5)."}, {"heading": "B. Tasks Involved in the Construction Request Process", "text": "The function of the Constructor Request Agent is divided into four main tasks (see Figure 5): Crossing the XML file, generating instances, extracting a specific ontology and creating the service description."}, {"heading": "B1. Crossing the XML file and generation of instances", "text": "The Request Constructor Agent traverses the XML file to extract its arborescence (see Figure 6), then sends these last ones to rule base # 1 to know which classes represent and which attributes they represent. Thus, the rule that the agent uses in this case is: \"If a tag has an underground value, then it is considered a class, otherwise it is an attribute. Then, by applying this rule, we obtain the names of classes with their attributes and also their values (instances).\""}, {"heading": "B2. Extraction of a specific ontology", "text": "The Request Constructor Agent has a knowledge base that represents all the ontologies that exist, as well as ontologies that the agent knows during his experience; the knowledge base gives us classes that we get from the XML file to know the relationships and classes that have direct relationships with the classes that were produced in the previous phase, so that we get a file that contains a more complete structure of classes. To create a more readable and appealing OWL / XML file, we have seen that it is recommended to perform a small transformation of OWL / XML to pass in the RDF / XML format. To do this, we have defined two main rules (see Figure 7 and Figure 8) (rule database # 2): \"If we find classes in the XML file to pass in the RDF / XML format, we present the attributes of the service as empty services.\""}, {"heading": "B3. Description Service Production", "text": "Once we have applied Rule Base No. 2 rules, we can decide and understand which type of service is used, i.e. we can create the service description that matches the user request (by influencing the XML file values), so the result is an OWL-S file that we send to the General Manager Agent."}, {"heading": "5.7.2. General Manager Agent", "text": "The fact is that we are in a position to find a solution that we are in a position to find a solution that we are in a position to find. \""}, {"heading": "B. Dialogue administrator module", "text": "The dialog administrator is the module that allows the exchange of messages between the composer or the manager agent."}, {"heading": "5.7.3. Composer agent", "text": "The Composer-Agent must be able to think about the task he has to fulfil, and he must be able to communicate with the other agents (the Manager-Agent). He is initialized with the semantic description of the user target to be realized and the group of Manager-Agent sent in addition to the General Manager-Agent. The Composer-Agent (see Figure 10) consists of three main modules [30]: - The argumentation module. - The memory board, which serves as a support for the assumptions received from the Manager-Agent. - The dialogue administrator, which allows the dialogue with the other agents."}, {"heading": "A. Storage board", "text": "The memory board is used as support for the dialog by storing the sub-assumptions suggested by the different managers."}, {"heading": "B. Dialogue administrator", "text": "The dialog administrator is the module that allows the exchange of sentences between the composer agent and the manager agent."}, {"heading": "C. Reasoning module", "text": "The argumentation module is the main module of the agent. It defines its behavior by controlling its interactions. It relies on i) the memory board to select the conjecture to be refined, and on the subset of manager-agents with whom it continues the process of refinement, and ii) the manager of the dialog to submit the suggestions to the agents. The composition dialog is initiated by the composer-agent, who submits an initial conjecture to all concerned manager-agents. This conjecture represents the goal to be realized. At the reception of this first conjecture, the manager-agents begin to refine it. When a manager-agent computes a partial conjecture, he submits it to the composer-agent. At the reception of a refinement, the composer-agent updates his memory board. Then he tries to send the new partial conjecture back to the manager-agents he considers for the next refinement cycle."}, {"heading": "5.7.4. Manager agent", "text": "A manager agent (see Figure 11) [30] consists of two main modules: - the thought module that contains a planner - the dialog administrator module."}, {"heading": "A. Reasoning module", "text": "The refinement of a presumption can take place in two ways: - By adding causal connections. - First, the manager-agent verifies that there is no action in the presumption that enables the realization of the goal. If this was the case, then a causal link between the effect affected by the first action and the presupposition of the second action is added. - By adding a subsupposition. The manager-agent tries to solve the hypothesis by establishing a subsupposition by means of the planner. The planner gives as a starting point the state of knowledge of the agent, i.e. the goal to be solved, and, if it exists, provides a plan for the solution to that goal. The plan obtained, enriched by constraints of orders and causal connections, forms the subsupposition of the hypothesis and is sent to the agent."}, {"heading": "B. Dialogue administrator module", "text": "It is the module that makes it possible to exchange sentences between the manager and the composer agents."}, {"heading": "6. CONCLUSION", "text": "The problem of the composition of the web service is a challenging research problem due to the growing number of available web services, the dynamic environment and changing user needs. We have presented an agent-based architecture that dynamically composes semantic web services. - This architecture allows to define different levels of responsibility: -semantic construction of the user requirement, which is ensured by the agent of the request constructor according to the ontology of the global BP; - assignment of a task to the component agent or directly to the manager agent, which is guaranteed by the general manager according to his global view of the system; - compilation and coordination of the execution of the composite service assured by the component agent. The proposed composition model is based on distributed planning with the dialectical synthesis of plans under hypotheses. The originality of our model is that the successful solution plan is not fully distributed because a component agent is used to work with different web managers to present the idea of the agent (which is always inserted in the composition process)."}], "references": [{"title": "A Constraint-based Approach to Horizontal Web Service Composition", "author": ["A.Ben Hassine", "Shigeo Matsubara", "Toru Ishida"], "venue": "International Semantic Web Conference (ISWC2006),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "DAML-S: Web Service Description for the Semantic Web", "author": ["A. Ankolekar", "M.Burstein", "J.R.Hobbs", "O.Lassila", "D.L.Martin", "D.McDermott", "S.A. McIlraith", "S.Narayanan", "M.Paolucci", "T.R.Payne"], "venue": "K.Sycara,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2002}, {"title": "Automated discovery, interaction and composition of semantic web services", "author": ["K.Sycara", "M.Paolucci", "A. Ankolekar", "N. Srinivasan"], "venue": "Journal of Web Semantics", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2003}, {"title": "Agents Negotiating with Semantic Web Services", "author": ["M.Pasha", "H. Farouq Ahmad"], "venue": "Proceedings of the World Congress on Engineering and Computer Science 2008WCECS 2008, October", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "Adapting Golog for Composition of Semantic Web Services\u201d, KR", "author": ["S. McIlraith"], "venue": "T.C.Son", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "J.Xie, H.Guo & H.Wang,(2005) \u201cSolving Qos-driven Web Service Dynamic Composition as Fuzzy Constraint Satisfaction", "author": ["M. Lin"], "venue": "In proc. IEEE Int. Conf. on e-Technology, e-Commerce and e-service,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2005}, {"title": "Planning and MonitoringWeb Service Composition", "author": ["M. Pistore", "F. Barbon", "P. Bertoli", "D. Shaparau", "P. Traverso"], "venue": "Proceedings of the International Conference on Artificial Intelligence, Methodology,Systems, and Applications,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2004}, {"title": "Automated Composition of Web Services by Planning at the Knowledge Level", "author": ["M. Pistore", "A. Marconi", "P. Bertoli", "P. Traverso"], "venue": "Proceedings of the International Joint Conference on Artificial Intelligence,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Automated Composition of Web Services by Planning in Asynchronous Domains", "author": ["M. Pistore", "P. Traverso", "P. Bertoli"], "venue": "Proceedings of the International Conference on Planning and Scheduling,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2005}, {"title": "Un mod\u00e8le de composition automatique et distribu\u00e9 de services Web par planification\u201c, RSTI - RIA - 23/2009", "author": ["D. Pellier", "H. Fiorino"], "venue": "Intelligence artificielle et web intelligence,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2009}, {"title": "Semantic Web Services", "author": ["S. McIlraith", "S.Son", "H. Zeng"], "venue": "IEEE Intelligent Systems,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2001}, {"title": "A Planner for Composing Services Described in DAML-S", "author": ["M. Sheshagiri", "M. desJardins", "T. Finin"], "venue": "In Proc. Of Workshop on Web Services and Agent-based Engineering - AAMAS\u201903", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2003}, {"title": "Computation Orchestration: A Basis for Wide-area Computing", "author": ["M. Jayadev", "C. William"], "venue": "Journal of Software and Systems Modeling,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2007}, {"title": "Semi-automatic composition of web services using semantic descriptions\u201d, In Proceedings Web Services: Modeling, Architecture and Infrastructure. Workshop in Conjunction with ICEIS2003", "author": ["E.Sirin J. Hendler", "B. Parsia"], "venue": "(Angers, France,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2003}, {"title": "Towards a Semantic Composition of ebXML Business Processes", "author": ["Z.O. Hioual"], "venue": "Boufaida", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2008}, {"title": "Ontologies in Agent Infrastructure", "author": ["K. Sycara"], "venue": "M.Paolucci", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2001}, {"title": "A coordination algorithm for multi-agent planning", "author": ["A. El-Fallah-Seghrouchni", "S. Haddad"], "venue": "In Lecture Notes in Computer Science,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1996}, {"title": "Vers une architecture \u00e0 base d\u2019agents pour une composition s\u00e9mantique et dynamique des services web dans un contexte d\u2019ebXML", "author": ["Z.O. Hioual"], "venue": "Boufaida", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2010}, {"title": "Multi-data source fusion approach in Peer-to-Peer systems", "author": ["M.P.G. Nachouki"], "venue": "Chastang", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2010}, {"title": "OWL Web Ontology Language Overview", "author": ["D.L. McGuinness", "F. Van Harmelen"], "venue": "in: W3C Recommendation,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2004}], "referenceMentions": [{"referenceID": 0, "context": "These features can be divided into two main groups [1]: - Features related to the user, including the user\u2019s constraints and preferences.", "startOffset": 51, "endOffset": 54}, {"referenceID": 1, "context": "In the field of Web services, the Semantic Web Services (SWS) approach [3] is a step toward dynamic service discovery and composition [4, 5] where intelligent systems try to build service compositions from abstract user requirements without a manual selection of services.", "startOffset": 71, "endOffset": 74}, {"referenceID": 2, "context": "In the field of Web services, the Semantic Web Services (SWS) approach [3] is a step toward dynamic service discovery and composition [4, 5] where intelligent systems try to build service compositions from abstract user requirements without a manual selection of services.", "startOffset": 134, "endOffset": 140}, {"referenceID": 3, "context": "knowledge representation, agents are a necessary complement to web services to realize the vision of semantic web [6].", "startOffset": 114, "endOffset": 117}, {"referenceID": 4, "context": "The combination of Web services has attracted the interest of many researchers [12, 13, 14, 15].", "startOffset": 79, "endOffset": 95}, {"referenceID": 5, "context": "The combination of Web services has attracted the interest of many researchers [12, 13, 14, 15].", "startOffset": 79, "endOffset": 95}, {"referenceID": 6, "context": "The literature [16, 17, 18] demonstrates that automatic planning is an interesting tool for dynamic and automatic web services composition.", "startOffset": 15, "endOffset": 27}, {"referenceID": 7, "context": "The literature [16, 17, 18] demonstrates that automatic planning is an interesting tool for dynamic and automatic web services composition.", "startOffset": 15, "endOffset": 27}, {"referenceID": 8, "context": "The literature [16, 17, 18] demonstrates that automatic planning is an interesting tool for dynamic and automatic web services composition.", "startOffset": 15, "endOffset": 27}, {"referenceID": 9, "context": "The proposed composition mode is based on multiagent planning [19, 20].", "startOffset": 62, "endOffset": 70}, {"referenceID": 9, "context": "According to [20], Web service characteristics are very close to those of an agent  within the framework of the multi-agent planning: it\u2019s autonomous and can communicate with the other Web services.", "startOffset": 13, "endOffset": 17}, {"referenceID": 4, "context": ", [12, 21, 22, 5]).", "startOffset": 2, "endOffset": 17}, {"referenceID": 10, "context": ", [12, 21, 22, 5]).", "startOffset": 2, "endOffset": 17}, {"referenceID": 11, "context": ", [12, 21, 22, 5]).", "startOffset": 2, "endOffset": 17}, {"referenceID": 11, "context": "These works lean essentially on the classic planning [22, 23, 24], the planning was based on rules [25] and the hierarchical planning [5].", "startOffset": 53, "endOffset": 65}, {"referenceID": 12, "context": "These works lean essentially on the classic planning [22, 23, 24], the planning was based on rules [25] and the hierarchical planning [5].", "startOffset": 53, "endOffset": 65}, {"referenceID": 13, "context": "These works lean essentially on the classic planning [22, 23, 24], the planning was based on rules [25] and the hierarchical planning [5].", "startOffset": 53, "endOffset": 65}, {"referenceID": 9, "context": "Because our work is inspired from that of [19] and [20], we made certain number of hypotheses and limitations on this last one to facilitate the passage of a semantic representation towards a plan: - The simple process (SimpleProcess) is not treated.", "startOffset": 51, "endOffset": 55}, {"referenceID": 14, "context": "Multi-agent architecture for the Web services composition in the context of ebXML[27]", "startOffset": 81, "endOffset": 85}, {"referenceID": 15, "context": "As autonomous problem solvers, agents need to develop model of their environment that allows them to reason on how their actions affect their environment and how those changes lead them to achieve their goals [28].", "startOffset": 209, "endOffset": 213}, {"referenceID": 16, "context": "In this case, we distinguish several types of compatibility [29] between the parameters.", "startOffset": 60, "endOffset": 64}, {"referenceID": 17, "context": "At the stage of the composition process [30], each manager agent represents a reserved service belonging to the sub-ontology that it manages.", "startOffset": 40, "endOffset": 44}, {"referenceID": 18, "context": "These pages were designated to be read only by a human user [32].", "startOffset": 60, "endOffset": 64}, {"referenceID": 19, "context": "To overcome this lack, a new language for Web called OWL was developed (Ontology Web Language) [34].", "startOffset": 95, "endOffset": 99}, {"referenceID": 17, "context": "figure 10) consists of t2hree main modules [30]:", "startOffset": 43, "endOffset": 47}, {"referenceID": 17, "context": "Composer Agent Architecture [30]", "startOffset": 28, "endOffset": 32}, {"referenceID": 17, "context": "Figure 11)[30] consists of two main modules: - The reasoning module which contains a planner.", "startOffset": 10, "endOffset": 14}, {"referenceID": 17, "context": "Manager Agent Architecture [30]", "startOffset": 27, "endOffset": 31}], "year": 2011, "abstractText": "The process-based semantic composition of Web Services is gaining a considerable momentum as an approach for the effective integration of distributed, heterogeneous, and autonomous applications. To compose Web Services semantically, we need an ontology. There are several ways of inserting semantics in Web Services. One of them consists of using description languages like OWL-S. In this paper, we introduce our work which consists in the proposition of a new model and the use of semantic matching technology for semantic and dynamic composition of ebXML business processes.", "creator": "PScript5.dll Version 5.2.2"}}}