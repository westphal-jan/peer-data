{"id": "1105.5451", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-May-2011", "title": "The Automatic Inference of State Invariants in TIM", "abstract": "As planning is applied to larger and richer domains the effort involved in constructing domain descriptions increases and becomes a significant burden on the human application designer. If general planners are to be applied successfully to large and complex domains it is necessary to provide the domain designer with some assistance in building correctly encoded domains. One way of doing this is to provide domain-independent techniques for extracting, from a domain description, knowledge that is implicit in that description and that can assist domain designers in debugging domain descriptions. This knowledge can also be exploited to improve the performance of planners: several researchers have explored the potential of state invariants in speeding up the performance of domain-independent planners. In this paper we describe a process by which state invariants can be extracted from the automatically inferred type structure of a domain. These techniques are being developed for exploitation by STAN, a Graphplan based planner that employs state analysis techniques to enhance its performance.", "histories": [["v1", "Fri, 27 May 2011 01:49:44 GMT  (127kb)", "http://arxiv.org/abs/1105.5451v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["m fox", "d long"], "accepted": false, "id": "1105.5451"}, "pdf": {"name": "1105.5451.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Maria Fox", "Derek Long"], "emails": ["maria.fox@dur.ac.uk", "d.p.long@dur.ac.uk"], "sections": [{"heading": null, "text": "This year it is more than ever before."}], "references": [{"title": "Fast Planning through Plan-graph Analysis", "author": ["A. Blum", "M. Furst"], "venue": "In IJCAI", "citeRegEx": "Blum and Furst,? \\Q1995\\E", "shortCiteRegEx": "Blum and Furst", "year": 1995}, {"title": "STRIPS: A New Approach to the Application of Theorem", "author": ["R. Fikes", "N. Nilsson"], "venue": null, "citeRegEx": "Fikes and Nilsson,? \\Q1971\\E", "shortCiteRegEx": "Fikes and Nilsson", "year": 1971}, {"title": "Accelerating Partial Order Planners", "author": ["A. Gerevini", "L. Schubert"], "venue": null, "citeRegEx": "Gerevini and Schubert,? \\Q1996\\E", "shortCiteRegEx": "Gerevini and Schubert", "year": 1996}, {"title": "Computing Parameter Domains as an Aid to Planning", "author": ["A. Gerevini", "L. Schubert"], "venue": null, "citeRegEx": "Gerevini and Schubert,? \\Q1996\\E", "shortCiteRegEx": "Gerevini and Schubert", "year": 1996}, {"title": "Inferring State Constraints for Domain-Independent", "author": ["A. Gerevini", "L. Schubert"], "venue": null, "citeRegEx": "Gerevini and Schubert,? \\Q1998\\E", "shortCiteRegEx": "Gerevini and Schubert", "year": 1998}, {"title": "Inductive Learning of Knowledge-based Planning Operators", "author": ["T.J. Grant"], "venue": null, "citeRegEx": "Grant,? \\Q1996\\E", "shortCiteRegEx": "Grant", "year": 1996}, {"title": "The Role of Domain Speci c Knowledge in the Planning", "author": ["H. Kautz", "B. Selman"], "venue": null, "citeRegEx": "Kautz and Selman,? \\Q1998\\E", "shortCiteRegEx": "Kautz and Selman", "year": 1998}, {"title": "Automatically Synthesising Domain Constraints", "author": ["G. Kelleher", "A. Cohn"], "venue": null, "citeRegEx": "Kelleher and Cohn,? \\Q1992\\E", "shortCiteRegEx": "Kelleher and Cohn", "year": 1992}, {"title": "Extending Planning Graphs to an ADL", "author": ["J. Koehler", "B. Nebel", "Y. Dimopoulos"], "venue": null, "citeRegEx": "Koehler et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Koehler et al\\.", "year": 1997}, {"title": "Least Commitment: An Optimal Planning Strategy", "author": ["V. Liatsos", "B. Richards"], "venue": null, "citeRegEx": "Liatsos and Richards,? \\Q1997\\E", "shortCiteRegEx": "Liatsos and Richards", "year": 1997}, {"title": "Engineering and Compiling Planning Domain", "author": ["T.L. McCluskey", "J. Porteous"], "venue": null, "citeRegEx": "McCluskey and Porteous,? \\Q1997\\E", "shortCiteRegEx": "McCluskey and Porteous", "year": 1997}, {"title": "Automatically Derived Heuristics for Planning Search", "author": ["P. Morris", "R. Feldman"], "venue": null, "citeRegEx": "Morris and Feldman,? \\Q1989\\E", "shortCiteRegEx": "Morris and Feldman", "year": 1989}], "referenceMentions": [{"referenceID": 2, "context": "Gerevini and Schubert (1996a, 1996b) have considered the automatic inference of some state constraints and demonstrated that a signi cant empirical advantage can be obtained from their use. Kautz and Selman (1998) have handcoded invariants and provided them as part of the domain description used by Blackbox.", "startOffset": 0, "endOffset": 214}, {"referenceID": 2, "context": "Gerevini and Schubert (1996a, 1996b) have considered the automatic inference of some state constraints and demonstrated that a signi cant empirical advantage can be obtained from their use. Kautz and Selman (1998) have handcoded invariants and provided them as part of the domain description used by Blackbox. They demonstrate the performance advantages obtained and acknowledge the importance of inferring such invariants automatically. McCluskey and Porteous (1997) have also demonstrated the important role that hand-coded state invariants can play in domain compilation for e cient planning.", "startOffset": 0, "endOffset": 468}, {"referenceID": 2, "context": "Gerevini and Schubert (1996a, 1996b) have considered the automatic inference of some state constraints and demonstrated that a signi cant empirical advantage can be obtained from their use. Kautz and Selman (1998) have handcoded invariants and provided them as part of the domain description used by Blackbox. They demonstrate the performance advantages obtained and acknowledge the importance of inferring such invariants automatically. McCluskey and Porteous (1997) have also demonstrated the important role that hand-coded state invariants can play in domain compilation for e cient planning. Earlier work by Kelleher and Cohn (1992) and Morris and Feldman (1989) explores the automatic generation of some restricted invariant forms.", "startOffset": 0, "endOffset": 637}, {"referenceID": 2, "context": "Gerevini and Schubert (1996a, 1996b) have considered the automatic inference of some state constraints and demonstrated that a signi cant empirical advantage can be obtained from their use. Kautz and Selman (1998) have handcoded invariants and provided them as part of the domain description used by Blackbox. They demonstrate the performance advantages obtained and acknowledge the importance of inferring such invariants automatically. McCluskey and Porteous (1997) have also demonstrated the important role that hand-coded state invariants can play in domain compilation for e cient planning. Earlier work by Kelleher and Cohn (1992) and Morris and Feldman (1989) explores the automatic generation of some restricted invariant forms.", "startOffset": 0, "endOffset": 667}, {"referenceID": 5, "context": "STRIPS domains have been seen in this way in earlier work (McCluskey & Porteous, 1997; Grant, 1996), as discussed in Section 5.", "startOffset": 58, "endOffset": 99}, {"referenceID": 5, "context": "STRIPS domains have been seen in this way in earlier work (McCluskey & Porteous, 1997; Grant, 1996), as discussed in Section 5. 2.1 Types in TIM When two objects participate in identical FSMs they are functionally equivalent and can be seen to be of the same type. The notion of type here is similar to that of sorts in the work of McCluskey and Porteous (1997). A primary objective of the tim module is to automatically identify the equivalence classes that form the primitive types in a domain description and to infer the hierarchical type structure of a domain on the basis of the primitive types.", "startOffset": 87, "endOffset": 362}, {"referenceID": 5, "context": "Grant (1996) identi es this version of the move operator as awed, because of the need to maintain state correctness by the addition of the invariant clear(table) to the add list.", "startOffset": 0, "endOffset": 13}, {"referenceID": 6, "context": "For example, Kautz and Selman (1998) identify optimality conditions and simplifying assumptions amongst the di erent kinds of axioms that might be inferred from a domain.", "startOffset": 13, "endOffset": 37}, {"referenceID": 2, "context": "Gerevini and Schubert (1998) and Kautz and Selman (1998) provide convincing evidence supporting the powerful role of state invariants in enhancing the performance of SAT-based planning.", "startOffset": 0, "endOffset": 29}, {"referenceID": 2, "context": "Gerevini and Schubert (1998) and Kautz and Selman (1998) provide convincing evidence supporting the powerful role of state invariants in enhancing the performance of SAT-based planning.", "startOffset": 0, "endOffset": 57}, {"referenceID": 2, "context": "The published work that most closely resembles the research described in this paper is the state constraint inference system discoplan, of Gerevini and Schubert (1998). Discoplan enables the inference of sv-constraints that correspond to a subset of our identity invariants.", "startOffset": 139, "endOffset": 168}, {"referenceID": 2, "context": "The published work that most closely resembles the research described in this paper is the state constraint inference system discoplan, of Gerevini and Schubert (1998). Discoplan enables the inference of sv-constraints that correspond to a subset of our identity invariants. The reason that discoplan is restricted to a subset is that it generates sv-constraints only for pairs of literals (one on the addlist of a schema and the other on the delete list) in which the arguments vary in only one place. Tim can infer identity invariants in which vectors of arguments vary, as shown in Section 2.7. Discoplan cannot currently infer all singly varying constraints (although the techniques described by Gerevini and Schubert (1996a) are not yet fully implemented in discoplan).", "startOffset": 139, "endOffset": 730}, {"referenceID": 2, "context": "Gerevini and Schubert (1996a, 1996b) have also examined the potential for inferring parameter domains that are similar to the operator parameter types inferred by tim. Their domains are inferred by an iterative process of accretion which is similar to the attribute space extension process of tim. However, the accretion process they describe is synthetic, in that the parameter domains are synthesised directly from the operator descriptions and initial state. Tim is an analytic system that constructs its types from an analysis of the functional properties of the domain objects. This analytic approach provides a rich information source from which other structures, including the domain invariants, can be derived. Some of the implicative constraints inferred by discoplan correspond to an implicit type assignment and would arise in the type structure built by tim. A further implicative constraint generated by discoplan refers to the separation of functional roles of objects. In particular, the irre exivity of on, as in: 8x 8y (on(x; y)! :(x = y)) can be captured using this kind of constraint. Tim cannot currently infer these invariants. Because tim uses an analysis based on the state view of objects in the domain it is able to generate a broader collection of invariants, including state membership and unique state invariants currently not produced by discoplan. Although discoplan can deal with negative preconditions and tim cannot yet manage them, the invariants they produce overall are currently less powerful than those inferred by tim. Apart from the work of Gerevini and Schubert, there is some older work on the inference of invariants which also relies on the generation of candidate invariants which are then con rmed by an inductive process against the domain operators. Two examples are the work of Kelleher and Cohn (1992) and Morris and Feldman (1989).", "startOffset": 0, "endOffset": 1852}, {"referenceID": 2, "context": "Gerevini and Schubert (1996a, 1996b) have also examined the potential for inferring parameter domains that are similar to the operator parameter types inferred by tim. Their domains are inferred by an iterative process of accretion which is similar to the attribute space extension process of tim. However, the accretion process they describe is synthetic, in that the parameter domains are synthesised directly from the operator descriptions and initial state. Tim is an analytic system that constructs its types from an analysis of the functional properties of the domain objects. This analytic approach provides a rich information source from which other structures, including the domain invariants, can be derived. Some of the implicative constraints inferred by discoplan correspond to an implicit type assignment and would arise in the type structure built by tim. A further implicative constraint generated by discoplan refers to the separation of functional roles of objects. In particular, the irre exivity of on, as in: 8x 8y (on(x; y)! :(x = y)) can be captured using this kind of constraint. Tim cannot currently infer these invariants. Because tim uses an analysis based on the state view of objects in the domain it is able to generate a broader collection of invariants, including state membership and unique state invariants currently not produced by discoplan. Although discoplan can deal with negative preconditions and tim cannot yet manage them, the invariants they produce overall are currently less powerful than those inferred by tim. Apart from the work of Gerevini and Schubert, there is some older work on the inference of invariants which also relies on the generation of candidate invariants which are then con rmed by an inductive process against the domain operators. Two examples are the work of Kelleher and Cohn (1992) and Morris and Feldman (1989). The former work concentrates on identifying directed mutual persistence relations, which hold between pairs of facts in a domain when, once both are established, the second continues to hold while the rst does.", "startOffset": 0, "endOffset": 1882}, {"referenceID": 6, "context": "Automatic Inference of State Invariants domain objects would allow the techniques described by McCluskey and Porteous (1997) to be automated.", "startOffset": 95, "endOffset": 125}, {"referenceID": 6, "context": "Automatic Inference of State Invariants domain objects would allow the techniques described by McCluskey and Porteous (1997) to be automated. McCluskey and Porteous (1997) have proposed and explored an object-centred approach to planning.", "startOffset": 95, "endOffset": 172}, {"referenceID": 2, "context": "Grant (1996) generates state invariants from state descriptions, provided by hand, and then uses these invariants to build operator schemas.", "startOffset": 0, "endOffset": 13}, {"referenceID": 2, "context": "The results presented by Gerevini and Schubert (1998) suggest that a marked improvement can be obtained from the use of invariants in the performance of planners based on SAT-solving techniques.", "startOffset": 25, "endOffset": 54}], "year": 2011, "abstractText": null, "creator": "dvips 5.58 Copyright 1986, 1994 Radical Eye Software"}}}