{"id": "1105.5463", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-May-2011", "title": "Extensible Knowledge Representation: the Case of Description Reasoners", "abstract": "This paper offers an approach to extensible knowledge representation and reasoning for a family of formalisms known as Description Logics. The approach is based on the notion of adding new concept constructors, and includes a heuristic methodology for specifying the desired extensions, as well as a modularized software architecture that supports implementing extensions. The architecture detailed here falls in the normalize-compared paradigm, and supports both intentional reasoning (subsumption) involving concepts, and extensional reasoning involving individuals after incremental updates to the knowledge base. The resulting approach can be used to extend the reasoner with specialized notions that are motivated by specific problems or application areas, such as reasoning about dates, plans, etc. In addition, it provides an opportunity to implement constructors that are not currently yet sufficiently well understood theoretically, but are needed in practice. Also, for constructors that are provably hard to reason with (e.g., ones whose presence would lead to undecidability), it allows the implementation of incomplete reasoners where the incompleteness is tailored to be acceptable for the application at hand.", "histories": [["v1", "Fri, 27 May 2011 01:53:50 GMT  (565kb)", "http://arxiv.org/abs/1105.5463v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["a borgida"], "accepted": false, "id": "1105.5463"}, "pdf": {"name": "1105.5463.pdf", "metadata": {"source": "CRF", "title": "Extensible Knowledge Representation: the Case of Description Reasoners", "authors": ["Alex Borgida"], "emails": ["borgida@cs.rutgers.edu"], "sections": [{"heading": null, "text": "The resulting approach can be used to broaden rationalists \"concepts to include specific ideas motivated by specific problems or areas of application, such as thinking about data, plans, etc. Furthermore, it offers the possibility of implementing designers who are not yet sufficiently understood in theory, but are needed in practice. Also, for designers who are demonstrably difficult to argue (e.g. those whose presence would lead to indecisiveness), it enables the implementation of incomplete reasons where the incompleteness is tailored to be acceptable for the respective application."}, {"heading": "1. Introduction and Motivation", "text": "In fact, it is the case that most people who are able to determine themselves and understand what they want and what they want, do not allow themselves to be led astray. (...) It is not the case that they are led astray. (...) It is not the case that they are led astray. (...) It is the case that they are led astray. (...) It is the case that they are led astray. (...) It is the case that they are led astray. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (...) It is the case. (... It is the case. (...) It is the case. (... It is the case. (... It is the case.) It is the case. (... It is the case. (... It is the case.) It is the case. (... It is the case."}, {"heading": "2. Description Logics: An Introduction", "text": "DLs are used to describe situations with different types of individuals that are interconnected by roles and grouped into concepts. Roles that are limited to (partial) functions are distinguished and referred to as attributes. In this section, we present the syntax and semantics of DLs, outline the interaction with a typical DL-based KBMS and some implementation strategies."}, {"heading": "2.1 Syntax and Semantics", "text": "As illustrated in Figure 1, DLs provide a compositional and structured language to talk about these kinds of things. (Composite concepts are obtained according to the syntax presented in Table 1, which includes the concept constructors mentioned in this work. Metasymbols have the following references: CN is a concept name, p is an atomic role (including an attribute), f is an attribute, C and D are general concepts, b is an individual, while n is an integer; subscriptions can be added occasionally to the above. To give meaning to the above syntactic terms, descriptions can be given a denotational semantics using an interpretation by authors, where I, \u00b7 I). I begin by assigning each concept name a subset of domain I, a subset of interpretation, I \u00d7 \u00b2 I, to each attribute x."}, {"heading": "2.2 Subsumption Reasoning with Concepts", "text": "Traditionally, the standard question to ask is whether one description is more general than (summed up) another. For example, we would expect the description in Figure 1 to include the following description, which additionally requires that the books be published in at most the four enumerated countries, and that there be at least three (instead of two) authors who are to be married to terrestrial citizens: and (BOOK all (published))) one (USA, France, Germany, Italy) at least (3, AuthorityBy) all (AuthorityBy, and (VENUSIAN, all (marriedTo, TERRESTRIAL)))) one (Formally, the subsumption between the terms C and D, written as C = \u21d2 D, is responsible for all interpretations of iff CI DI I. In addition, we say that a description C is disjointed iff of its denotation CI."}, {"heading": "2.3 DL Concept KBMS", "text": "A concept knowledge base CKB (also known as a T-Box) records constraints on concept names, including definitions (such as the concept VENUSIANO mentioned in our examples) and necessary conditions for primitive concepts (e.g. a BOOK would be required to have at least one author). In some DLs it is possible to specify general barriers to submission between arbitrary descriptions, but this will not be allowed in this paper. Formally, CKB is a tuple (R, F, C, O, N, D) where R, F, O, respectively the sets of roles, attributes, concepts and individual object identifiers are named. Concept names are either primitive / atomic concept names that have a necessary condition associated with PN."}, {"heading": "2.4 Reasoning Strategies", "text": "There are two general approaches to answering the basic subsumption question underlying DL-KBMS operations: one is based on theorem evidence techniques specifically tailored to descriptions, in particular variants of tableau techniques that determine the subsumption A = \u21d2 B by checking the inadequacy of A-Z B. Systems such as Kris (Baader et al., 1994), Crack (Bresciani, Franconi, & Tessaris, 1995), FaCT (Horrocks, 1998) and DLP (Patel-Schneider, 1998) have the advantage of being demonstrably complete. Although the worst cases are more complex, where the subsumption problems are sometimes quite high, recent empirical evidence shows that their performance for large realistic submissions is limited to large realistic CBs."}, {"heading": "3.1 The Modularized Implementation Architecture", "text": "rE \"s rf\u00fc ide rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the ru the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the rf\u00fc the"}, {"heading": "3.2 An Overview of the Process of Extension.", "text": "Suppose we want to expand the system at a certain stage with a new concept constructor built in a direct class. The following is a proposed methodology for achieving this goal, illustrated with a familiar concept constructor, all of them. (1) Let's determine a syntax for the extension. If concepts have a LISP-like syntax (as in classics and the weblog), the constructor could all get the syntax (: all role terms). The terms that follow the constructor are called its arguments, and a version of them will eventually be stored in the internal representation of our standardized concepts. You can now implement the function that in this case would call Role:::: parse and Concept: parse. (2) Determine a semantics for the new concept constructor. First, this requires colonization on a domain of values from which its denotation will come."}, {"heading": "3.3 Dates: An Example Concept-Level Extension", "text": "rf\u00fc the green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-green-"}, {"heading": "3.4 Experience with Extensions", "text": "The fact is that most of us are able to behave in the way that they do, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, in the way that they do it, but they don't do it."}, {"heading": "3.5 Relationship to \u201cConcrete Domain\u201d Extensions", "text": "Although we need to address the general work on extensible KR & R in the conclusion, there is a specific approach that merits closer examination at this stage, while the details of the current work are still fresh. Baader and Hanschke's proposal (Baader & Hanschke, 1991) for extending DLs with \"concrete domains\" allows concepts to consist of arbitrary domains. As if we define predicates such as BEFORE, other than the elements of.I), so long as these values are filler of attributes of common objects, the concrete domain is that we have dictated predicates such as BEFORE, correspondingly, when we define two date-weighted attributes of.I) we define the concept prior to arrival, departure from which we assume is the concrete domain of data that is dictated."}, {"heading": "4. Processing of Individuals in DLs: An Introduction", "text": "Concept descriptions such as those presented above are intensive objects that are capable of capturing generic information about a domain, such as the ontology of terms. DL-KBMSs must also manage extensional / factual information about individual objects - the so-called A-box5."}, {"heading": "4.1 Inferences Involving Individuals", "text": "In fact, it can be said that it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way in which it is about a way and in which it is about a way in which it is about a way in which it is about and in which it is about a way in which it is about a way in which it is about a way and in which it is about a way in which it is about a way in which it is about a way in which it is about a way and in which it is about a way in which it is about a way in which it is about a way and a way in which it is about a way in which it is about a way in which it is about a way and a way in which it is about which it is about a way in which it is about a way in which it is about a way and in which it is about which it is about a way in which it is about a way in which it is about a way and in which it is about a way in which it is about a way and a way it is about which it is about which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way in which it is about a way and in which it is about a way in which it is about a way and in which it is about a way and a way it is about which it is about which it is about which it is about which it is about a way in which it is about a way in which it is about a way and in which it is"}, {"heading": "4.2 DL-KBMS Operations on Individuals", "text": "The point at which one has to live with the assumption of the open world is that the information is accumulated gradually, as in the case of the design of some artifacts (one of the most successful applications of the classical).From a functional point of view, therefore, DL-KBMS supports the following update operations for incremental addition of information about individuals: Operation Effectassert Member (b, C) b: C is added to A Asert Fills (b, p, b1): p is added to A Asset-Closed-Closed (b, p) b: allFillersKnown (p, S) is added to A Asset-Fills (b, p, b1)."}, {"heading": "5.1 The Basic Architecture of Individual Reasoning", "text": "This year it has come to the point that it has never come as far as this year."}, {"heading": "5.2 Reasoning with Incremental Updates", "text": "(< < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < <, \"< < < <,\" < <, \"< < <,\" < < <, \"< <,\" < < <, \"< < < <,\" < < <, \"< <,\" < < <, \"< <,\" < < < <, \"<,\" <, \"<,\" < <, \"<,\" < < <, \"<,\" < <, \"< <,\" <, \"<,\" <, \"<,\" < <, \"< <,\" <"}, {"heading": "5.3 Dependency Links", "text": "In fact, most people who are able are able to determine for themselves what they want and what they want to do."}, {"heading": "5.4 Coordinating the Components", "text": "This year it has come to the point that it has never come as far as this year."}, {"heading": "5.5 Extending Individual Reasoning \u2013 An Example", "text": "It is indeed the case that we see ourselves in a position to move to another world in which we are in a position in which we are in."}, {"heading": "6. Conclusions", "text": "We started from the hypothesis that due to the need for application-specific arguments and the potential incompleteness of the reasoning due to the trade-off between meaningfulness (tractability / decidability), a \"perfect\" DL can never be built. We argued that some of these problems can best be addressed in an application-specific way. To solve this problem, we proposed the use of an extensive DL-KBMS, in which one tries to go as far as possible with an initial set of well-understood conceptual constructors, and then, when one encounters insoluble expression problems (Doyle & Patil, 1991), to add new conceptual constructors to overcome them. We also pointed out the limitations of this approach, which include the inclusion of new forms of reasoning such as abduction, contexts, etc., as difficulties with full conclusions for useful conceptual constructors who require an argument through contradiction and are best addressed in the alternative-tableaux-argument-saving-DL."}, {"heading": "6.1 Implementation Status", "text": "Prototypical implementations of aspects of both concept and individual thinking in Protodl were carried out at Rutgers. Therefore, our goal is to add the results of Protodl research to an existing DL argumentator. Indeed, with the participation of Charles Isbell, several ideas were transferred to the latest version of the classic system published by AT & T Research. Specifically, the classic supports test-defined concepts - those that allow the recognition of individuals by using an arbitrary LISP function. (This function can be considered a combination of the Recognizes? and ConsistentW? functions discussed in this paper.) In the latest version of the classic, one can simulate the addition of new concept constructors by using them according to the keyword test-c. For example, although the concept all (holiday, dateRange (1996 / 6 / 1996 date indication) is not presented as significant (holiday)."}, {"heading": "6.2 Related Work", "text": "One approach would be to offer some form of \"declarative description\" of the inferences to be performed, and then have a meta-interpreter to execute them. Indeed, such approaches have been tried in the past for other types of representational formalisms (Greiner & Lenat, 1980; Genesereth, 1983). Apart from cycles such as Lenat & Guha, 1990), which provide for the addition of new forms of inferencing schemes in the first order, we see little evidence that such a meta-interpreter has a chance of being almost as efficient as the implemented implementations, so we have opted for a different approach."}, {"heading": "6.3 Summary", "text": "We have advocated an approach to extensible reasoning and implementation of DL, because the paradigm of normini comparisons typically includes smaller functions that consist of two components: a declarative specification and a modularized implementation framework. The specification is offered using \"natural semantics\" style follow-up rules, and a heuristic methodology suggests different categories of rules to look for. These rules often correlate well with the implementations of the various functions, but protodl gives the implementer the opportunity to use a very different implementation, the latter being required in the case of constructors whose argument is, for example, a regular expression - as in the case of plans or strings, when the implementation requires some kind of finite automaton representation, since regular expressions do not have a \"normal form.\" We have modularized the software architecture of protocol argumentators, so that for any new concept constructors, the set of well-implemented language must be added to the set of well-defined ones."}, {"heading": "Acknowledgements", "text": "I am Ron Brachman, who helped me with the initial explorations of the prototype idea, Daniel Kudenko, who implemented a substantial part of the individual reasoning, Charles Isbell, who implemented the extension features of the classic 2.3, and Peter Patel-Schneider, very grateful for years of discussions about the intricacies of classical language and implementation. Extremely useful comments on presentation and organization came from Peter Clark and the anonymous reviewers. This work was supported in part by NSF grants IRI-91-19310 and IRI-9619979."}, {"heading": "Appendix A. A Generic Conjunction Function.", "text": "It is indeed the case that most people who are able to keep to the rules that they have imposed on themselves have to keep to the rules. (...) It is not the case that they have to keep to the rules. (...) It is not the case that they have to keep to the rules. \"(...) It is not the case that they have to keep to the rules.\" (...) It is not the case that they have to keep to the rules. \"(...) It is as if they have to.\" (...) It is not the case that they have to keep to the rules. \"(...) It is as if they have to.\" (...) It is not as if they have to keep to the rules. \"(...) It is.\" (...) It is. \"(...) It is.\" (...) It is. (...) It is. (...) It is. \"It is. (...) It is. (...) It is.\" It is. \"It is.\" It is. \"It is. (...) It is.\" It is. \"It is.\" It is. \"It is. (...) It is.\" It is. \"It is.\" It is. (... It is. \"It is.\" It is. \"It is.\" It is. \"It is. (...). It is. It is. (...). It is. It is. It is. (). It is. It is. (... It is. It is. It is. It is. It is. It is. It is. It is.\" (). It is. (). It is. It is. It is. (). It is. It is. It is. (). It is. It is. It is. It is. It is. (). It is. It is. It is."}], "references": [{"title": "A formal definition for the expressive power of terminological knowledge representation languages", "author": ["F. Baader"], "venue": "J. of Logic and Computation,", "citeRegEx": "Baader,? \\Q1996\\E", "shortCiteRegEx": "Baader", "year": 1996}, {"title": "A scheme for integrating concrete domains into concept languages", "author": ["F. Baader", "P. Hanschke"], "venue": "In Proceedings of IJCAI\u201991", "citeRegEx": "Baader and Hanschke,? \\Q1991\\E", "shortCiteRegEx": "Baader and Hanschke", "year": 1991}, {"title": "An empirical analysis of optimization techniques for terminological representation systems - or making kris get a move on", "author": ["F. Baader", "B. Hollunder", "B. Nebel", "Profitlich", "H.-J", "E. Franconi"], "venue": "Applied Intelligence,", "citeRegEx": "Baader et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Baader et al\\.", "year": 1994}, {"title": "From type systems to knowledge representation: Natural semantics specifications for description logics", "author": ["A. Borgida"], "venue": "Int. J. of Intelligent and Cooperative Information Systems,", "citeRegEx": "Borgida,? \\Q1992\\E", "shortCiteRegEx": "Borgida", "year": 1992}, {"title": "Towards the systematic development of terminological reasoners: clasp reconstructed", "author": ["A. Borgida"], "venue": "In Proceedings of KR\u201992", "citeRegEx": "Borgida,? \\Q1992\\E", "shortCiteRegEx": "Borgida", "year": 1992}, {"title": "Description logics in data management", "author": ["A. Borgida"], "venue": "IEEE Trans. on Knowledge and Data Engineering,", "citeRegEx": "Borgida,? \\Q1995\\E", "shortCiteRegEx": "Borgida", "year": 1995}, {"title": "On the relative expressiveness of description logics and predicate logics", "author": ["A. Borgida"], "venue": "Artificial Intelligence,", "citeRegEx": "Borgida,? \\Q1996\\E", "shortCiteRegEx": "Borgida", "year": 1996}, {"title": "classic: A structural data model for objects", "author": ["A. Borgida", "R.J. Brachman", "D.L. McGuinness", "L.A. Resnick"], "venue": "In Proceedings of SIGMOD\u201989", "citeRegEx": "Borgida et al\\.,? \\Q1989\\E", "shortCiteRegEx": "Borgida et al\\.", "year": 1989}, {"title": "Reasoning with black boxes: Handling test concepts in Classic", "author": ["A. Borgida", "C. Isbell", "D. McGuinness"], "venue": "In Proceedings of Intern. Workshop on Description Logics (DL\u201996)", "citeRegEx": "Borgida et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Borgida et al\\.", "year": 1996}, {"title": "Asking queries about frames", "author": ["A. Borgida", "D.L. McGuinness"], "venue": "In Proceedings of KR\u201996", "citeRegEx": "Borgida and McGuinness,? \\Q1996\\E", "shortCiteRegEx": "Borgida and McGuinness", "year": 1996}, {"title": "A semantics and complete algorithm for subsumption in the classic description logic", "author": ["A. Borgida", "P.F. Patel-Schneider"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Borgida and Patel.Schneider,? \\Q1994\\E", "shortCiteRegEx": "Borgida and Patel.Schneider", "year": 1994}, {"title": "Uniqueness constraints in description logics", "author": ["A. Borgida", "G. Weddell"], "venue": "In Proceedings of Conf. on Deductive and Object-Oriented Databases", "citeRegEx": "Borgida and Weddell,? \\Q1997\\E", "shortCiteRegEx": "Borgida and Weddell", "year": 1997}, {"title": "Implementing and testing expressive description logics: a preliminary report", "author": ["P. Bresciani", "E. Franconi", "S. Tessaris"], "venue": "In Proceedings of KRUSE\u201995 Symposium", "citeRegEx": "Bresciani et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Bresciani et al\\.", "year": 1995}, {"title": "Computing least common subsumers in description logics", "author": ["W. Cohen", "A. Borgida", "H. Hirsh"], "venue": "In Proceedings of AAAI\u201992", "citeRegEx": "Cohen et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Cohen et al\\.", "year": 1992}, {"title": "Software Information Systems", "author": ["P. Devanbu"], "venue": "Ph.D. thesis,", "citeRegEx": "Devanbu,? \\Q1994\\E", "shortCiteRegEx": "Devanbu", "year": 1994}, {"title": "The use of description logics in kbse systems", "author": ["P. Devanbu", "M. Jones"], "venue": "ACM Transactions on Software Engineering and Methodology,", "citeRegEx": "Devanbu and Jones,? \\Q1997\\E", "shortCiteRegEx": "Devanbu and Jones", "year": 1997}, {"title": "Taxonomic plan reasoning", "author": ["P. Devanbu", "D. Litman"], "venue": "Artificial Intelligence,", "citeRegEx": "Devanbu and Litman,? \\Q1996\\E", "shortCiteRegEx": "Devanbu and Litman", "year": 1996}, {"title": "An epistemic operator for description logics", "author": ["F. Donini", "M. Lenzerini", "D. Nardi", "W. Nutt", "A. Schaerf"], "venue": "Artificial Intelligence,", "citeRegEx": "Donini et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Donini et al\\.", "year": 1998}, {"title": "Two theses of knowledge representation: language restrictions, taxonomic classification, and the utility of representation services", "author": ["J. Doyle", "R. Patil"], "venue": "Artificial Intelligence,", "citeRegEx": "Doyle and Patil,? \\Q1991\\E", "shortCiteRegEx": "Doyle and Patil", "year": 1991}, {"title": "A class library implementation of a principled open architecture", "author": ["B. Borgida Gaines"], "venue": null, "citeRegEx": "Gaines,? \\Q1993\\E", "shortCiteRegEx": "Gaines", "year": 1993}, {"title": "Building Large Knowledge-Based Systems", "author": ["D. DL\u201998. Lenat", "R. Guha"], "venue": "In Proceedings of AAAI\u201986", "citeRegEx": "Lenat and Guha,? \\Q1990\\E", "shortCiteRegEx": "Lenat and Guha", "year": 1990}, {"title": "The Complexity of Decision Problems in Automata Theory and", "author": ["L. KR\u201989. Stockmeyer"], "venue": null, "citeRegEx": "Stockmeyer,? \\Q1974\\E", "shortCiteRegEx": "Stockmeyer", "year": 1974}, {"title": "The anatomy of the back", "author": ["K. von Luck", "B. Nebel", "C. Peltason", "A. Schmiedel"], "venue": null, "citeRegEx": "Luck et al\\.,? \\Q1987\\E", "shortCiteRegEx": "Luck et al\\.", "year": 1987}], "referenceMentions": [{"referenceID": 5, "context": "DLs have found a variety of applications in areas such as data management (Borgida, 1995), software engineering (Devanbu & Jones, 1997), configuration management (Wright et al.", "startOffset": 74, "endOffset": 89}, {"referenceID": 2, "context": "Interesting previous work in this area has been reported by Baader et al (Baader et al., 1994).", "startOffset": 73, "endOffset": 94}, {"referenceID": 2, "context": "One approach is based on theorem proving techniques specially adapted for descriptions, particularly variants of tableau techniques that determine the subsumption A =\u21d2 B by checking for the unsatisfiability of A\u2227\u00acB; systems such as kris (Baader et al., 1994),crack (Bresciani, Franconi, & Tessaris, 1995), FaCT (Horrocks, 1998) and DLP (Patel-Schneider, 1998) follow this approach.", "startOffset": 237, "endOffset": 258}, {"referenceID": 7, "context": ", 1987), classic (Borgida et al., 1989), and loom (MacGregor, 1986), follow a so-called \u201cnormalize-compare\u201d paradigm, where most of the reasoning work is performed in an initial \u201cnormalization\u201d phase, whose goal is to find a normal form for concepts which explicates implicit facts, eliminates redundancies and detects incoherencies.", "startOffset": 17, "endOffset": 39}, {"referenceID": 12, "context": "The promise of provably complete and effective reasoners for expressive languages is very enticing, and therefore the study of extensibility in tableaux approaches (Baader & Hanschke, 1991; Bresciani et al., 1995) is of great interest.", "startOffset": 164, "endOffset": 213}, {"referenceID": 21, "context": "Also, there is some advantage to being able to deal with non-admissible domains in cases when negation is not absolutely needed, but its addition would cause an increase in computational complexity; for example, adding negation/complement to regular expressions makes the containment problem non-elementary (Stockmeyer, 1974).", "startOffset": 307, "endOffset": 325}, {"referenceID": 17, "context": "We note that an elegant formalization of these notions has been obtained by adding an epistemic modal constructor K to DLs (Donini et al., 1998).", "startOffset": 123, "endOffset": 144}, {"referenceID": 14, "context": "The utility of such queries has been shown, among others, in applications involving information discovery in software development (Devanbu, 1994).", "startOffset": 130, "endOffset": 145}, {"referenceID": 17, "context": ", sum([departments budget], totalBudget) can be used to model that totalBudget is the sum of the values for budget fillers for all department fillers); and epistemic constructors that allow one to query the state of knowledge (Donini et al., 1998) (e.", "startOffset": 226, "endOffset": 247}, {"referenceID": 8, "context": "Although not all aspects of the protodl system have been implemented, the current extensions (Borgida et al., 1996) allow significant subsumption reasoning to be done for test extensions, and thus provide classic with the bases for extensible reasoning.", "startOffset": 93, "endOffset": 115}, {"referenceID": 19, "context": "Gaines has also advocated the utility of a declarative specification and of a clean, extensible modularization for a DL-reasoner (Gaines, 1993).", "startOffset": 129, "endOffset": 143}, {"referenceID": 12, "context": "Finally, it has been suggested that the tableau-based approach, such as that of crack, is essentially extensible through the addition of new \u201ccompletion\u201d rules (Bresciani et al., 1995), which are traditionally used to build a model of a certain knowledge base, or prove its inconsistency.", "startOffset": 160, "endOffset": 184}, {"referenceID": 17, "context": "The major open areas involve adding to this framework role constructors, epistemic rules (like those in classic, characterized by Donini et al (Donini et al., 1998)), the ability to express at least simple recursive declarations for primitive concepts (e.", "startOffset": 143, "endOffset": 164}], "year": 2011, "abstractText": "This paper offers an approach to extensible knowledge representation and reasoning for the Description Logic family of formalisms. The approach is based on the notion of adding new concept constructors, and includes a heuristic methodology for specifying the desired extensions, as well as a modularized software architecture that supports implementing extensions. The architecture detailed here falls in the normalize-compared paradigm, and supports both intentional reasoning (subsumption) involving concepts, and extensional reasoning involving individuals after incremental updates to the knowledge base. The resulting approach can be used to extend the reasoner with specialized notions that are motivated by specific problems or application areas, such as reasoning about dates, plans, etc. In addition, it provides an opportunity to implement constructors that are not currently yet sufficiently well understood theoretically, but are needed in practice. Also, for constructors that are provably hard to reason with (e.g., ones whose presence would lead to undecidability), it allows the implementation of incomplete reasoners where the incompleteness is tailored to be acceptable for the application at hand.", "creator": "dvips 5.528 Copyright 1986, 1994 Radical Eye Software"}}}