{"id": "1107.0040", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Jun-2011", "title": "Generalizing Boolean Satisfiability I: Background and Survey of Existing Work", "abstract": "This is the first of three planned papers describing ZAP, a satisfiability engine that substantially generalizes existing tools while retaining the performance characteristics of modern high-performance solvers. The fundamental idea underlying ZAP is that many problems passed to such engines contain rich internal structure that is obscured by the Boolean representation used; our goal is to define a representation in which this structure is apparent and can easily be exploited to improve computational performance. This paper is a survey of the work underlying ZAP, and discusses previous attempts to improve the performance of the Davis-Putnam-Logemann-Loveland algorithm by exploiting the structure of the problem being solved. We examine existing ideas including extensions of the Boolean language to allow cardinality constraints, pseudo-Boolean representations, symmetry, and a limited form of quantification. While this paper is intended as a survey, our research results are contained in the two subsequent articles, with the theoretical structure of ZAP described in the second paper in this series, and ZAP's implementation described in the third.", "histories": [["v1", "Thu, 30 Jun 2011 20:38:04 GMT  (177kb)", "http://arxiv.org/abs/1107.0040v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["h e dixon", "m l ginsberg", "a j parkes"], "accepted": false, "id": "1107.0040"}, "pdf": {"name": "1107.0040.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Heidi E. Dixon"], "emails": [], "sections": [{"heading": null, "text": "The generalization of the Boolean Satis capability I: Ba kground andSurvey of Existing WorkHeidi E. Dixon dixon irl.uoregon.edu CIRL Computer and Information S ien e 1269 University of Oregon Eugene, OR 97403 USAMatthew L. Ginsberg ginsberg otsys. om On Time Systems, In. 1850 Millra e, Suite 1 Eugene, OR 97403 USAAndrew J. Parkes parkes irl.uoregon.edu CIRL 1269 University of Oregon Eugene, OR 97403 USAAbstra tThis is the first of three planned papers of the ribing zap, a satis capability engine that essentially generalizes existing tools while maintaining the performan e hara teristi s modern high-performan e-solvent. The basic idea underlying zap is that many problems passed on to su h-motors attempt to improve our internal structure by using the putu-structure to the boolean task easily."}, {"heading": "1. Introdu tion", "text": "This is the first episode of a planned series of three papers of the ribing zap, a satis ability engine, which essentially generalizes the existing tools, while it focuses on editing the various ways that relate to the various types of work \u3002 The second episode of the series is that it spreads to the way that it spreads to the way that it spreads to the way that it spreads to the way that it spreads to the way that it spreads to the people, the way that it spreads to the people, the way that it spreads to the people, the way that it spreads to the people, the way that it spreads to the people, the way that it spans to the people, the people to the people, the way that it spans to the people, the people to the people, the people to the people, the people to the people, the people to the people, the people to the people, the people to the people, the people to the people to the people, the people to the people to the people, the people to the people to the people, the people to the people to the people, the way that spans to the way that it spans to the way that it spans to the way that it spans to the way that it spans to the way that it spans to the way that it spans to the way that it spans to the way that it spans to the way that it spans to the way that it spans to the way that it spans to the people, the people to the people to the people to the way that spans to the people to the people to the people, the people to the people to the people to the people to the people to the people to the people to the people, the people to the people to the people to the people to the people to the people to the people to the people to the people, the people to the people to the people to the people to the people to the people to the people to the people to the people to the people, the people to the people to the people to the people to the people to the people to the people to the people to the people to the people, the people to the people to the people to the people to the people to the people to the people to the people to the people to the people to the people, the people to the people to the people to the people to the people"}, {"heading": "2. Boolean Satis ability", "text": "It is simply a letter (e.g. a) that is either true or false. A letter is either a variable or the negation of a variable. A solution to a satellite problem is an assignment of values, which are the letters of the letters-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg-egg"}, {"heading": "2.1 Unit Propagation: The Inner Loop", "text": "When the dpll algorithm 2.2 is implemented and executed, most of the time we spend is spent in the spread. As an example, he cites the number of times we have spent on the spread of the disease. (http: / / www.e. e. e.) As an example, he cites the speed at which the spread of the disease is accelerated. (4) The examples that are used to generate the graph are those that are executed within 100 se with an IntelPentium 4M running at 1.6 GHz. For those that are not executed within 100 se ond, an average of 89.4% of the time consumed is executed."}, {"heading": "2.2 Learning and Relevan e", "text": "This year, it has reached the point where it will be able to retaliate until it is able to retaliate."}, {"heading": "2.3 Bran hing Heuristi s", "text": "It is about the question of whether and how such a development can occur, and about the question of whether and how such a development can occur. \"It is about how such a development can occur,\" he says. \"It is about how such a development can occur.\" \"It is about how such a development can occur.\" \"It is about how it must occur.\" \"It is about how such a development can occur.\" \"It is about how it can occur.\" \"It is about how it can occur.\" It is about how it can occur. \"It is about\" It is about. \"It is about.\" It is about. \"It is about.\" It is about. \"It is about.\" It is about. \"It is about.\" It is about. \"It is about.\""}, {"heading": "2.4 Proof Complexity", "text": "We have already found a solution based on the evidence based on detectable limits, always based on the evidence of new formulas, or on the development of ambiguous transformations from proofs in one system to proofs in other countries. Regarding the rst metri, there are at least three types of problems known to be based exponentially on conventional solutions (alluding to any dpll implementations): 101. Pigeonhole problems (Haken, 1985) 2. Parity problems (Tseitin, 1970) 3. Clique oloring problems (Bonet, Pitassi, 1997); Pudlak, 1997). Before proceeding to a dissertation of these problems, however, let us point out that there are many evidence systems that are more powerful than those we know in this paper."}, {"heading": "2.4.1 Pigeonhole problems", "text": "The pigeon hole problem is to show that it is impossible to put n + 1 pigeons in n holes if every h of pigeon has to be in a hole. If we write pijfor the fa t that pigeon is in hole j, then a simple axiomatization means that each pigeon must be in at least one hole: pi1 _ pi2 _ _ _ pinfor i = 1;:::; n + 1 (9) and that no two pigeons must be in the same hole:: pik _: pjkfor 1 i < j n + 1 and k = 1;::; n (10) Note that there are axioms of form in all (n3) (10). It is well known that there is no polynomial proof of the unsaturating ability of axioms (9) {(10) {(Hook, 1985). The proof for this is hni al, but the essential reason is that the pigeon hole problem is not to put this problem in a reasonable hole."}, {"heading": "2.4.2 Parity problems", "text": "With a parity problem we mean that an odd number of xiare is true; a right side of zero would mean that an even number would be true. The numbers presented here are exemplary for an odd number of boolean axiome. The parity condition x y z = 1 corresponds tox _ y _ zx _: y _: z: x _ y _ zIn general, the number of boolean axiome that are needed exponentially in the length of the paritylause (11), but for breaks of a fixed length is the number of noges of boolean axiome not measurable. For the proof that omplexity is the result of interest, let us assume that la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la la"}, {"heading": "2.4.3 Clique oloring problems", "text": "These are derivatives of pigeon hole problems where the exa t nature of the pigeon hole problem is obsolete. Moreover, the problems show that a graph is in fact a lique of n + 1 node (where every node in the liquor is embedded in the graph), and that the graph must be colored in n olors. If the graph itself is known as lique, the problem corresponds to the pigeon hole problem. But if we only know that the lique an is embedded in the graph, the problem is didier ul.In axiomatization, we use eijto des ribe the edges of the graph, ijto of the ribe theoloring of the graph, and qijto of the ribe: qijto of the ribe of the ribe of the graph, the lique is: 1 of the lique of the graph in the graph."}, {"heading": "2.5 Boolean Summary", "text": "We summarize the results of this analysis by describing the first line of our table as follows: p-simulation unit, e. hierar hy inferen e propagation learningSAT 1 EEE resolution wat hed literals relevvan eardinalityPBsymmetryQPROPThe entries are actually only an informal abbreviation: Representative eE ien y: Boolean saturation ability is the ben hmark against that against which other languages are measured; we give the relative savings to be achieved by hanging representation. p-simulation shierar hy: We provide proof of the omnipotence of the three problem classes, which are not used in Se tion 2.4. For Boolean saturation ability, all problems require evidence of exponential length.Inferen e: The basi inferen e me hanism used by dpll is resolution.Propagation: Wat hed literals are most likely to be implemented."}, {"heading": "3. Pseudo-Boolean and Cardinality Constraints", "text": "The entries in the previous table summarize that the Boolean statute is a weak method that allows for simplification of implementations, the representation is relatively inconsistent, and none of our anonymous problems is solved in such a way that there is at least one such problem that we now understand as a variable with a value of 0 (false) or 1 (true) or 1 (true) that we have written the shift for 1 z or 2 (true). If we are a variable, we will refer to v as a negation of the v.All of the known logi al operations that are evident in this notation. If we, for example, want to resolve: b _ withb _ d: d, we will simply refer to the negation of v.All the known logi al operations, we have an obvious analogy in this notation."}, {"heading": "3.1 Unit Propagation", "text": "This year, it has reached the point where it will be able to retaliate."}, {"heading": "3.2 Inferen e and Resolution", "text": "As with unit propagation, resolution is relatively simple to a pseudo-Boolean setting. The general omutation is as follows: Proposition 3.12 Suppose we have two Lauses + 0, with given by Xiwili + wl k (23) and0given by Xiw0 i l 0 i + w 0 l k 0 (24) Then it is legitimate to write on ludeXiw0wili + Xiww0 l 0 iw0k + wk0ww0 (25) Proof. However, this is immediate. Multiply (23) by w0, multiply (24) by w, add and simplify usingl + l = 1. If all weights, k and k0are 1, this generalizes conventional resolution that the sets of non-dissolving letters in and0are disjoint. To deal with the base, where there is overlap between the set of liand the set of l0 i i, we need: Lemma 3.13, which is lukewarm."}, {"heading": "3.3 Learning and Relevan e Bounds", "text": "This year it is more than ever before."}, {"heading": "3.4 Proof Complexity", "text": "This year it is more than ever before."}, {"heading": "3.5 Summary", "text": "p-simulation unit. e. Hierar hy inferen e propagation learningSAT 1 EEE resolution wat hed literals relevvan eardinality exp P? E not unique wat hed literals relevvan ePB exp P? E unique de ned wat hed literals + reinforeningsymmetryQPROPAs before, a few notes are in order: While both ardinality and pseudo-boolean representations are exponentially more e\u0445 ient than their boolean ounterpart, it is not clear how often omissions of this magnitude will occur in pra ti. The entries in p-simulation olumn indi ate that the drawer problem is simple, lique oloring remains hard and the ubiquity of parity problems is unknown unless ew variables introdu ed.The ardinality entry for\\ inferen e \"is intended to re e the difa that natural solvent."}, {"heading": "4. Symmetry", "text": "Considering that the pigeon hole problem and the liquidity problems involve a large degree of symmetry in their arguments, it is a multitude of authors who have proposed to extend or extend the Boolean representation, in a way that allows to exploit this symmetry. We will break up the multiplicity of approaches that have been proposed to separate it in a way that allows to break the basic principles of the basic principles or not. In any case, we will exploit the following way of appropriating axioms. By a symmetry of T, we will mean any possible permutation of the variables in T that T itself hangs over, if T onsists the individual axiom x _ y, then T is learly symmetri under the ex hange of x and y. If T ontains is the two axiomsa _ yths T, it is again symmetri under the ex hange of x and yy."}, {"heading": "5. Quanti ation and QPROP", "text": "We conclude our investigation with an examination of ideas used in the attempt to extend Boolean work to theories most naturally assumed to be quantification of some kind. As Boolean satis capabilities are applied to ever greater problems, many of the theories in question are produced in large part by taking the set of quanti ed axioms su h as8xyz: [a (x; y) ^ b (y; z)! (x; z) (42) If d is the size of the domain from which h x, y and z are taken, this single axiom quantity has d3ground instans."}, {"heading": "14. There appears to be no e e tive alternative but to treat existentially quanti ed lauses as simple dis-", "text": "jun tions, as in (9)."}, {"heading": "5.1 Unit Propagation", "text": "Our primary goal here is to work with the quanti ed formulation, which unlike their larger ground-based translation dire. Unfortunately, there are signi ant onstant-fa tor osts that do this, sin e ea h inferen e step will have to deal with problems relating to the ties of the variables in question. Simply loosening the value assigned to a (2; 3) may well take several times longer than the value assigned to the equivalent v24. Findingall o urren it of a given literal problem will be a hived in the soil by simple indexing s hemes, whereas in the quant ed ase this will probably require a uni ation step carried out linearly in time in the length of the terms that are uni ed, it is obviously not as a simple equality that it can be."}, {"heading": "5.1.1 Subsear h", "text": "It is a question of whether there is at all a solution to the problem, which in most cases we can judge to be insufficient. It is also a question of the number of lauses that will be dissatisfied if some of these tasks are rewritten.: De nition 5.1 Suppose C is a set of lauses ed lauses, and P is a partial assignment of values to the atoms. We will describe from S-S (C) the following tasks: De nition 5.1 Suppose C is a set of lauses ed lauses, and P is a partial assignment of values to the atoms in these lauses."}, {"heading": "5.1.2 Subsear h and quantifi ation", "text": "Since we are in se ontains quanti ed lauses, then we will also be found in clan, in which we use the subset of lauses in C, which in ludeterms of whi h, is an instan e, if we are in se ontains lauses, then Clwe will mean that the subset of lauses in C, which in ludeterms of whi h is an instan e. If we are in se ontains lauses, then Clwe will use the subset of lauses in C, which in ludeterms of whi h, is an instan e."}, {"heading": "5.2 Inferen e and Learning", "text": "As in Se tion 3 (48) whi h is more general than (45).For a general learning procedure that we need for new goods and goods, we assume that we will find a solution: a (A; B) _: b (B) _ (C) _ (C) with: (C) _ d (C; D) except for one (A; B) _: b (B; C) _ d (C; D) (45) where the capital letters remain indi ate ground elements of the domain and the resolvents are a grounded instance of: a (x; y) _ d (C) _ (46) _ d (z) _ d (z).w) It is obviously possible to find a solution (46) and (47) dire tly to get: a (x; y) _ d (C) _ d (C)."}, {"heading": "5.3 Summary", "text": "It is only a matter of time until there will be a solution, which it has in itself. (It is only a matter of time until there will be a solution.) (It is only a matter of time until there will be a solution.) It is only a matter of time until there will be a solution. (It is only a matter of time until there will be a solution.) It is a matter of time until there will be a solution. \"(It is only a matter of time until there will be a solution.) It is a matter of time until there will be a solution. (It is a matter of time until there will be a solution.) While the exponential savings in previous versions made.There were mathematic possibilities that will be made available in pra ti e, the savings from a to exponential savings in the exponential savings in the exponential versions made.There were mathematic possibilities that will be made available in pra ti, the savings from a to exponential savings in the exponential savings in the exponential ones."}, {"heading": "6. Con lusion", "text": "The algorithms themselves have therefore tended to ignore problem features that dominate the omputational requirements when applied to real problems. On the other hand, it is possible to improve both the speed of the internal loops of the algorithms (via qprop and subsear h) and the number of times in which the inner loops have to be executed (via learning and a move up the p-simulation hierar hy), both of which improvements arise because the problems in question have stru ture. Structure is learned as nogoods, or used to solve the problem using pseudoBoolean or quanti ed expressions.It is true that the table in the previous subse and be seen as a survey of reent work on satis problem, we be nogoods, or be re-represent the using pseudoBoolean or quanti ed expressions."}, {"heading": "A knowledgments", "text": "We would like to thank the members of irl, the te hni al sta of On Time Systems, and Eugene Luks and David Hofer from the CIS department at the University of Oregon for their assistan e. \"We would also like to thank the anonymous reviewers for their suggestions and suggestions, which we found very appreciative. This work was supported partly by aerial grants, partly by the reviewers of S ienti Resear h (afosr) number F49620-92-J Resear h, Laboratory (afrl) number F30602-97-0294, Small Business Te, Resear h, Advan ed Te (sttr-ati) number 20000766, O.E Laboratory (onr) number N00014-00-C0233."}], "references": [], "referenceMentions": [], "year": 2014, "abstractText": "This is the rst of three planned papers des ribing zap, a satis ability engine that substantially generalizes existing tools while retaining the performan e hara teristi s of modern high-performan e solvers. The fundamental idea underlying zap is that many problems passed to su h engines ontain ri h internal stru ture that is obs ured by the Boolean representation used; our goal is to de ne a representation in whi h this stru ture is apparent and an easily be exploited to improve omputational performan e. This paper is a survey of the work underlying zap, and dis usses previous attempts to improve the performan e of the Davis-Putnam-Logemann-Loveland algorithm by exploiting the stru ture of the problem being solved. We examine existing ideas in luding extensions of the Boolean language to allow ardinality onstraints, pseudo-Boolean representations, symmetry, and a limited form of quanti ation. While this paper is intended as a survey, our resear h results are ontained in the two subsequent arti les, with the theoreti al stru ture of zap des ribed in the se ond paper in this series, and zap's implementation des ribed in the third.", "creator": "dvips(k) 5.86 Copyright 1999 Radical Eye Software"}}}