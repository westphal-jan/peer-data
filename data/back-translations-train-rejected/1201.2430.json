{"id": "1201.2430", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jan-2012", "title": "A Well-typed Lightweight Situation Calculus", "abstract": "Situation calculus has been widely applied in Artificial Intelligence related fields. This formalism is considered as a dialect of logic programming language and mostly used in dynamic domain modeling. However, type systems are hardly deployed in situation calculus in the literature. To achieve a correct and sound typed program written in situation calculus, adding typing elements into the current situation calculus will be quite helpful. In this paper, we propose to add more typing mechanisms to the current version of situation calculus, especially for three basic elements in situation calculus: situations, actions and objects, and then perform rigid type checking for existing situation calculus programs to find out the well-typed and ill-typed ones. In this way, type correctness and soundness in situation calculus programs can be guaranteed by type checking based on our type system. This modified version of a lightweight situation calculus is proved to be a robust and well-typed system.", "histories": [["v1", "Wed, 11 Jan 2012 21:44:18 GMT  (18kb,D)", "https://arxiv.org/abs/1201.2430v1", "In Proceedings of the 21st Workshop on Logic-based methods in Programming Environments (WLPE'11), ICLP 2011 Workshop, pp. 62-73, Lexington, Kentucky, USA, July 2011"], ["v2", "Fri, 15 Jun 2012 23:18:40 GMT  (18kb,D)", "http://arxiv.org/abs/1201.2430v2", "In Proceedings of the 21st Workshop on Logic-based methods in Programming Environments (WLPE'11), ICLP 2011 Workshop, pp. 62-73, Lexington, Kentucky, USA, July 2011"]], "COMMENTS": "In Proceedings of the 21st Workshop on Logic-based methods in Programming Environments (WLPE'11), ICLP 2011 Workshop, pp. 62-73, Lexington, Kentucky, USA, July 2011", "reviews": [], "SUBJECTS": "cs.PL cs.AI", "authors": ["li tan"], "accepted": false, "id": "1201.2430"}, "pdf": {"name": "1201.2430.pdf", "metadata": {"source": "CRF", "title": "A Well-typed Lightweight Situation Calculus\u2217", "authors": ["Li Tan"], "emails": ["ltan003@cs.ucr.edu"], "sections": [{"heading": null, "text": "Submitted under: The 21st Workshop on Logic-based Methods in Programming Environments (WLPE 2011) c \u00a9 Li Tan This work is licensed under the Creative Commons Attribution License.A Well-typed Lightweight Situation Calculus. Li Tan Department of Computer Science and EngineeringUniversity of California, Riverside Riverside, CA, USA 92507 ltan003 @ cs.ucr.eduSituation Calculus is widely used in areas of artificial intelligence. This formalism is considered a dialect of logical programming language and is predominantly used in dynamic domain modeling. However, type systems are rarely used in situation calculation in literature. In order to achieve a correct and solid program written in situation calculation, the addition of typing elements to the current situation calculation is very helpful. In this essay we propose to add further typing mechanisms to the current version of situation calculation, to verify existing situations, especially for basic and modified situations, and then to find the basis for modifying the three types in a given situation."}, {"heading": "1 Introduction", "text": "In fact, this formalism is to be regarded as a dialect of the logical programming language, namely in the form of dynamic elements such as actions and flows. Fundamental concepts of situation critique are the foundations of logic and the theory of mathematical logic, which favour the process of orienting action in the situation."}, {"heading": "2 Related Work", "text": "Due to its strong action-based reasoning capability, situational calculation is often chosen as a formalism to express other models and programming languages that are either too complex to understand and use, such as artificial intelligence in games [5] and Planning Domain Definition Language (PDDL) [6], or a little powerless to represent a complete complex system of different types, such as Action Description Language (ADL) [11]. In the literature that uses situational calculation as a formal method to express semantics in PDDL [3] and ADL [4], the authors have attempted to introduce some typing mechanisms that are limited to adding typing elements in the syntax, and applying them only to variables. Other significant terms, such as flows and predicates, are still typeless. Moreover, in semantics and papermaking the situation, the typing mechanism is not discussed as a modification in these situations, but as a calculation mechanism in these situations."}, {"heading": "3 Background Knowledge", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1 Type Systems", "text": "In the discipline of computer science, modern type systems are seen as a formal mechanism derived from the \u03bb calculation proposed by Alonzo Church in 1940. [2] One possible definition of a type system is \"a tractable syntactic framework for classifying phrases by the types of values they compute.\" [12] By linking types to each calculated value, a compiler can detect meaningless or invalid codes written in a particular programming language. For example, the expression \"mix = 29 +\" Tan \"cannot pass type testing because a character string cannot be added to a number. There are many branches in type systems, such as inferred typing and obvious typing (implicit and explicit) and strong typing and weak typing. In terms of type testing, people can use dynamic type testing and static type testing because a combination of things cannot be added."}, {"heading": "3.2 Situation Calculus", "text": "Situation Calculus [10] is a formal method based on First Order Logic and Set Theory in Mathematical Logic, with a strong ability to act-based reasoning. This formalism is considered a dialect of logic programming language and is mainly used in dynamic domain modeling. In the Calculus situation, the world consists of situations, actions and objects. The semantics of these three key components in the Calculus situation is presented informally. A situation represents a possible world history, simply a sequence of actions designated by a First Order term. The constant s0 is used to denote the initial situation, namely the empty sequence of actions. An action represents a possible change in the world designated by a function (A), clean (B) and check in (ID).An object represents a unit defined in the domain, universe a specific application designated by a First Order term."}, {"heading": "4 A Well-typed Mechanism in Situation Calculus", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.1 A Lightweight Situation Calculus", "text": "Similar to Featherweight Java (FJ), we use only a few central features in the situation calculation and skip derivative forms to keep our ideas short and efficient. In accordance with the language of the situation calculation, we retain all static domain elements: situations, actions and objects and the majority of functional elements such as fluids do and throw and all the predicates. The components that we ignore are those that can either come from other elements or be expressed similarly by others. For example, the order predicate v, which defines an order relationship to situations, can be expressed implicitly by the return value of other fluents and predicates. Like the expression s \"v,\" which indicates that s is \"a correct sequence of s, s\" could be replaced by a fluent or predicate that leads to s, say (findajob (person: object: object: s) situation: \"could be a subdicate.\""}, {"heading": "4.2 Handy Typing Mechanism", "text": "In the original situation calculation, several elements are entered such as quantifiers [13]. The handy typed elements are formally described as follows: A typed term is used to denote x, which is associated with a finite set of all possible types: \u03c4 (x) def = x: T1 and x: T2...... x: Tn, where T1, T2,..., Tn are terms. In addition, typed quantifiers are derived from: (x: \u03c4) \u03c6 (x) def = (HQ x).\u03c4 (x), (HQ x: \u03c4 (HQ x) \u03c6 (HQ x), (HQ), (HQ), (HQ), (HQ), (HQ). Therefore, expressions containing such typed quantifiers could be rewritten as sequences of conjunctions and disjunctions: (HQ x: \u03c6)."}, {"heading": "4.3 A New Type System in the Lightweight Situation Calculus", "text": "t \"s\" s \"t\" s. \"t\" s \"s\" t \"s.\" t \"s\" s \"t\" s. \"t\" s \"t\" s \"t\" s. \"t\" t \"s\" t \"s.\" t \"t\" s \"t\" s. \"t\" t \"s\" t \"s.\" t \"t\" t \"s.\" t \"t\" t \"s\" t \"t.\" t \"t\" t \"t\" s \"t.\" t \"t\" t \"s\" t. \"t\" t \"t\" s \"t.\" t \"t\" t. \"t\" t \"t.\" t \"t.\" t. \"t\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"\" t. \"t.\" t. \"t.\" t. \"t.\" \"t.\" t. \"t.\" t. \"t.\" \"t.\" t. \"t.\" \"t.\" t. \"t.\" t. \"t.\" \"t.\" t. \"\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" t. \"t.\" \"t.\" t. \"\" t. \"t.\" \"t.\" t. \"\" t. \"t.\" t. \"\" t. \"t.\""}, {"heading": "5 Evaluation", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5.1 Case Description", "text": "Consider the following scenario: In view of an object x on the ground, say, a vase, there is a robot r who wants to pick up this vase and paint it with some color, namely C. In the situation calculation, we can describe this scenario with three statements: In a given situation s, for example, that there is a robot r and a vase x, which are later ready for situations, when the robot r then picks up the vase x and drops it without holding it, causing the vase to break, then the vase must be a fragile object: f ragile (x, s), broken (x, do (paint (x, c), s)) (1) If the robot picks up the vase x successfully and tries to paint it with a color c by holding it, the vase would turn out to be in color c: color (x, do (paint (x, c), s)) = c (2)."}, {"heading": "5.2 Results and Analysis of Type Checking", "text": "Now let us check the type of check on the above three statements, which represent a scenario in which a robot r wants to take a vase x and paint it with a fancy color. (Ob j) Whether we compute the program written in the situation as well typed.First, we have to add predefined types for programs written in the original situation, based on our new type system. (So we have: f ragile (x: Ob object, s: Situation). (x: object, do: Ob object, s: Ob object, s: Ob object, s: Ob object, s: Ob object, s: Ob object, s: Situation), c: Ob object: Situation (s: Situation), s: Ob object: Ob object: Ob object: Ob object, s: Ob object: Ob object: Ob object: Ob object: Ob object: Ob object: Ob object: Ob object: Ob object: Ob object: Ob object: Ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object: ob object object: ob object object object: ob object: ob object object: ob object: ob object object: ob object: ob object: ob object object: ob object object object: ob object: ob object: ob object object object object: ob object object object: ob object: ob object object: ob object object object object: ob object: ob object object: ob object object object: ob object object object: ob object object object: ob object object: ob object object object: ob object object object object: ob object object: ob object object object object: ob object object object object: ob object object object object: ob object object object object object object"}, {"heading": "5.3 Implementation in OCaml", "text": "In the last section, where every term and behavior is realized in a modified lightweight situation, we are looking for consistency. Now, we plan to implement a kind of checker in OCaml that does the same job as we do, that is, all types are performed by one type checker."}, {"heading": "6 Conclusions", "text": "Type systems have been proposed to ensure the soundness of program types through rigid typing mechanisms. As a popular formal language widely used in areas of artificial intelligence, situational calculation itself has insufficient methods to support a complete and robust typing system with a rudimentary typing mechanism: only typed quantifiers for variables. Obviously, it is not enough to verify the current situation calculation programs. Due to our newly introduced type verification system for lightweight situational calculation, which maintains the core of the current one, we can easily perform basic type verifications for existing situational calculation programs, which are frequently used in various studies for situational calculation."}, {"heading": "Acknowledgements", "text": "The author thanks all anonymous reviewers for their generous and constructive instructions and comments on this essay."}], "references": [{"title": "An introduction to first-order logic. In: Handbook of Mathematical Logic, Studies in Logic and the Foundations of Mathematics", "author": ["Jon Barwise"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1977}, {"title": "A Formulation of the Simple Theory of Types", "author": ["Alonzo Church"], "venue": "Journal of Symbolic Logic, Volume", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1940}, {"title": "A Situation-Calculus Semantics for an Expressive Fragment of PDDL", "author": ["Jens Cla\u00dfen", "Yuxiao Hu", "Gerhard Lakemeyer"], "venue": "Proceedings of the 22nd National Conference on Artificial Intelligence,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2007}, {"title": "A Semantics for ADL as Progression in the Situation Calculus", "author": ["Jens Cla\u00dfen", "Gerhard Lakemeyer"], "venue": "Proceedings of the 11th Workshop on Non-Monotonic Reasoning,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "Representing Knowledge within the Situation Calculus using Interval-valued Epistemic Fluents", "author": ["John Funge"], "venue": "Reliable Computing,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1999}, {"title": "PDDL\u2014the planning domain definition language. In: Yale Center for Computational Vision and Control Technical Report CVC TR-98-003/DCS TR-1165", "author": ["Malik Ghallab", "Adele Howe", "Craig Knoblock", "Drew McDermott", "Ashwin Ram", "Manuela Veloso", "Daniel Weld", "David Wilkins"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1998}, {"title": "Decidable Reasoning in a Modified Situation Calculus", "author": ["Yilan Gu", "Mikhail Soutchanski"], "venue": "Proceedings of the International Joint Conference on Artificial Intelligence,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "Semantics for a useful fragment of the situation calculus", "author": ["Gerhard Lakemeyer", "Hector J. Levesque"], "venue": "Proceedings of the International Joint Conference on Artificial Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2005}, {"title": "Situations, actions and causal laws", "author": ["John McCarthy"], "venue": "In: Stanford Artificial Intelligence Project,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1963}, {"title": "ADL: Exploring the middle ground between STRIPS and the Situation Calculus", "author": ["Edwin P.D. Pednault"], "venue": "Proceedings of the International Conference on the Principles of Knowledge Representation and Reasoning,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1989}, {"title": "Types and Programming Languages", "author": ["Benjamin C. Pierce"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "Knowledge in Action: Logical Foundations for Specifying and Implementing Dynamical Systems", "author": ["Raymond Reiter"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2001}], "referenceMentions": [{"referenceID": 8, "context": "Introduced by John McCarthy in 1963 [10], situation calculus has been widely applied in Artificial Intelligence related research areas and other fields.", "startOffset": 36, "endOffset": 40}, {"referenceID": 0, "context": "Based on First Order Logic (FOL) [1] and Basic Action Theory [9], situation calculus can be used for reasoning efficiently by virtue of dynamic elements, such as actions and fluents.", "startOffset": 33, "endOffset": 36}, {"referenceID": 10, "context": "In order to make programs sound and correct in semantics, people have proposed type systems [12] to ensure such significant properties.", "startOffset": 92, "endOffset": 96}, {"referenceID": 4, "context": "Due to its powerful action-based reasoning ability, situation calculus is often chosen as the formalism to express other models and programming languages which are either too complex to understand and use, like Artificial Intelligence in games [5] and Planning Domain Definition Language (PDDL) [6], or a little powerless to represent an entire complicated systems of different types, like Action Description Language (ADL) [11].", "startOffset": 244, "endOffset": 247}, {"referenceID": 5, "context": "Due to its powerful action-based reasoning ability, situation calculus is often chosen as the formalism to express other models and programming languages which are either too complex to understand and use, like Artificial Intelligence in games [5] and Planning Domain Definition Language (PDDL) [6], or a little powerless to represent an entire complicated systems of different types, like Action Description Language (ADL) [11].", "startOffset": 295, "endOffset": 298}, {"referenceID": 9, "context": "Due to its powerful action-based reasoning ability, situation calculus is often chosen as the formalism to express other models and programming languages which are either too complex to understand and use, like Artificial Intelligence in games [5] and Planning Domain Definition Language (PDDL) [6], or a little powerless to represent an entire complicated systems of different types, like Action Description Language (ADL) [11].", "startOffset": 424, "endOffset": 428}, {"referenceID": 2, "context": "In the literature employing situation calculus as a formal method to express the semantics in PDDL [3] and ADL [4], the authors have tried to introduce some typing mechanisms, which is only limited to add type element in syntax, and only applied to variables.", "startOffset": 99, "endOffset": 102}, {"referenceID": 3, "context": "In the literature employing situation calculus as a formal method to express the semantics in PDDL [3] and ADL [4], the authors have tried to introduce some typing mechanisms, which is only limited to add type element in syntax, and only applied to variables.", "startOffset": 111, "endOffset": 114}, {"referenceID": 6, "context": "[7] proposed a modified version of the situation calculus built using a two-variable fragment of the first-order logic extended with counting quantifiers.", "startOffset": 0, "endOffset": 3}, {"referenceID": 11, "context": "By introducing several additional groups of axiom to capture taxonomic reasoning and using similar regression operator in Raymond Reiter\u2019s work [13], the projection and executability problems are proved decidable although an initial knowledge base is incomplete and open.", "startOffset": 144, "endOffset": 148}, {"referenceID": 7, "context": "[8] proposed a new logic dialect of situation calculus with the situation terms suppressed, namely, .", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "In the discipline of computer science, modern type systems are regarded as a formal mechanism originated from Alonzo Church\u2019s \u03bb calculus proposed in 1940 [2].", "startOffset": 154, "endOffset": 157}, {"referenceID": 10, "context": "One possible definition of a type system is \u201ca tractable syntactic framework for classifying phrases according to the kinds of values they compute\u201d [12].", "startOffset": 148, "endOffset": 152}, {"referenceID": 8, "context": "Situation Calculus [10] is a formal method based on First Order Logic and Set Theory in Mathematical Logic, with a strong ability of action-based reasoning.", "startOffset": 19, "endOffset": 23}, {"referenceID": 11, "context": "In the original situation calculus, several elements such as quantifiers are typed [13].", "startOffset": 83, "endOffset": 87}], "year": 2014, "abstractText": "Situation calculus has been widely applied in Artificial Intelligence related fields. This formalism is considered as a dialect of logic programming language and mostly used in dynamic domain modeling. However, type systems are hardly deployed in situation calculus in the literature. To achieve a correct and sound typed program written in situation calculus, adding typing elements into the current situation calculus will be quite helpful. In this paper, we propose to add more typing mechanisms to the current version of situation calculus, especially for three basic elements in situation calculus: situations, actions and objects, and then perform rigid type checking for existing situation calculus programs to find out the well-typed and ill-typed ones. In this way, type correctness and soundness in situation calculus programs can be guaranteed by type checking based on our type system. This modified version of a lightweight situation calculus is proved to be a robust and well-typed system.", "creator": "LaTeX with hyperref package"}}}