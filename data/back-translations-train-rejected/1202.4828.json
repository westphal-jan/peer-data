{"id": "1202.4828", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Feb-2012", "title": "Towards an Intelligent Tutor for Mathematical Proofs", "abstract": "Computer-supported learning is an increasingly important form of study since it allows for independent learning and individualized instruction. In this paper, we discuss a novel approach to developing an intelligent tutoring system for teaching textbook-style mathematical proofs. We characterize the particularities of the domain and discuss common ITS design models. Our approach is motivated by phenomena found in a corpus of tutorial dialogs that were collected in a Wizard-of-Oz experiment. We show how an intelligent tutor for textbook-style mathematical proofs can be built on top of an adapted assertion-level proof assistant by reusing representations and proof search strategies originally developed for automated and interactive theorem proving. The resulting prototype was successfully evaluated on a corpus of tutorial dialogs and yields good results.", "histories": [["v1", "Wed, 22 Feb 2012 06:41:20 GMT  (67kb)", "http://arxiv.org/abs/1202.4828v1", "In Proceedings THedu'11,arXiv:1202.4535"]], "COMMENTS": "In Proceedings THedu'11,arXiv:1202.4535", "reviews": [], "SUBJECTS": "cs.AI cs.LO cs.MS cs.SC", "authors": ["serge autexier", "bremen", "germany)", "dominik dietrich", "bremen", "germany)", "marvin schiller"], "accepted": false, "id": "1202.4828"}, "pdf": {"name": "1202.4828.pdf", "metadata": {"source": "CRF", "title": "Towards an Intelligent Tutor for Mathematical Proofs", "authors": ["Serge Autexier", "Dominik Dietrich", "Marvin Schiller"], "emails": ["Serge.Autexier@dfki.de", "Dominik.Dietrich@dfki.de", "Marvin.Schiller@brunel.ac.uk"], "sections": [{"heading": null, "text": "P. Quaresma and R.-J. Back (ed.); THedu '11 EPTCS 79, 2012, pp. 1-28, doi: 10.4204 / EPTCS.79.1c \u00a9 Autexier, Dietrich, Schiller This work is licensed under the Creative Commons Attribution License.Towards an Intelligent Tutor for Mathematical ProofsSerge Autexier Dominik Deutsches Forschungszentrum f\u00fcr Artificial Intelligence (DFKI), Bremen, DeutschSerge.Autexier @ dfki.de Dominik.Dietrich @ dfki.deMarvin Schiller Brunel University, London, UKMarvin.Schiller @ brunel.ac.ukComputer-aided learning is an increasingly important form of study, as it enables independent learning and individualized instruction. In this paper we discuss a novel approach to developing an intelligent tutor system for communicating textbook-like mathematical evidence. We characterize the specifics of the domain and discuss common ITS design models based on an interdisciplinary approach."}, {"heading": "1 Introduction", "text": "This year is the highest in the history of the country."}, {"heading": "2 Requirements Analysis and Functional Specification", "text": "This year it is more than ever before."}, {"heading": "2.1 Wizard-of-Oz Experiment", "text": "In fact, it is such that most of them will be able to move to another world, in which they are able to move to another world, in which they are able to move to another world, in which they are able to move, in which they move, in which they move, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they live, in which they, in which they, in which they, in which they live, in which they, in which they, in which they, in which they, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they, in which they, in which they, in which they, in which they, in which they, live, in which they, in which they, in which they live, in which they, in which they, in which they, in which they, live, in which they, in which they"}, {"heading": "2.2 Domain Modelling & Teaching Strategies", "text": "This year it is more than ever before."}, {"heading": "2.3 Functional Specification for the Proof Tutoring System", "text": "This year it is more than ever before."}, {"heading": "3 Step Analysis", "text": "It has been found that the use of step-by-step feedback in an ITS leads to significant learning gains (cf. [25]). A recent meta-analysis [70] finds that tutor systems with step-by-step feedback are almost as effective as human tutor systems and more effective than systems that work on the basis of answers (i.e. they provide feedback at the solution level). Interestingly, systems that use even finer levels of feedback (so-called sub-step feedback) prove to be (only) as effective as conventional step-based systems. Implementing the concept of step-by-step tutoring requires that when the student performs a proof step, the step in the current context is evaluated by step feedback. In our approach, a three-dimensional feedback vector with an entry for the solidity of a step is calculated."}, {"heading": "3.1 Proof Step Reconstruction", "text": "In fact, most of them are able to determine for themselves what they want and what they want."}, {"heading": "3.2 Granularity Analysis", "text": "This year, it is only a matter of time before an agreement is reached."}, {"heading": "4 Next Step Generation for Hinting", "text": "In fact, most people who are able to move are able to move, to move and to move, to move, to move, to move, to move, to move, to move, to move, to move, to move and to move, to move, to move and to move, to move, to move and to move, to move and to move, to move, to move and to move, to move and to move, to move, to move and to move, to move and to move, to move and to move, to move and to move, to move, to move and to move."}, {"heading": "4.1 Authoring of Proof Strategies", "text": "A proof strategy represents a mathematical technique typical of a given problem. For example, there are strategies that provide proof by induction, proof by contradiction, solving equations, or unfolding definitions. To achieve a (strategic) goal, a strategy performs a heuristic search, whereby a simple proof strategy proposed in [62] encodes knowledge in the underlying programming language of the system, encoding evidence strategies in a separate strategy language (see [31, 8] for an overview. A simple proof strategy proposed in [62] is the \"forward-backward method\" that combines the two well-known problem-solving strategies: concatenating forward and concatenating backwards by aligning the current evidence objective with the conclusions of the theorems and definitions."}, {"heading": "4.2 Hinting", "text": "Once a solution to the current state of evidence has been provided in the form of hierarchical evidence, the evidence hierarchies can be used to synthesize clues to increasing specificity, as follows: (i) the selection of a particular level of hierarchy in the reconstruction, (ii) the selection of a successor state in the selected hierarchy, (iii) to extract information from the selected state and turn it into a concrete clue. A given clue can be refined either by moving to a more detailed level in the hierarchy, or by increasing the amount of information extracted from the selected successor state. How should the next step of evidence be communicated to the user? A general question in the ITS design is how much scaffolding should be provided to the learner, known as the \"assistance dilemma\" - both too much and too little help hamper in learning [41]."}, {"heading": "5 Evaluation", "text": "In fact, it is such that most of us are in a position to reform ourselves, both in terms of the way in which they move, and also in terms of the way in which they move, as well as in terms of the way in which they move, as well as in terms of the way in which they move, as well as in terms of the way in which they move, as they behave, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, as they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it, they do it,"}, {"heading": "6 Outlook", "text": "eSi rf\u00fc ide nlrsEe\u00fceegnr rf\u00fc ide nlrsrsrf\u00fc eid eeirlrsrteeoiiiiiiiiuiueeegtlrsrsrsgteeVnlrrrrsrteeegnrsrrrteeoiuiuiuiueteeteeteeteeteersrrrrrsrrrsrrrrsrrrrteeeeeeeeeteersrrrrrrsrrrrrrrrsrrrrrrrrrsrrrrrrrrsrrrrrrrrrsrrrrrteeteeteeteeteersrrrsrsrrrrrrrrrrrrrrrsrsrrrrrrrrrrrrrrreteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeteeterrsrrrrrsrrsrsrrrrrrrrrsrrrrrrrsrrrrrsrrrrsrsrrrrrrrrrrrsrrrrrrrrrrrrsrrrrrrrrrrrrrrrrrrrrrrrreteeteeteeteeteeteeteeteeeteeteeteeeteeteeteeeteeeeteeeeeeeeeeteeeeeeteeeeeeeeeeteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"}, {"heading": "7 Related Work", "text": "This year it is so far that it will only be a matter of time before it is so far, until it is so far, until it is so far."}, {"heading": "8 Conclusion", "text": "In this paper we have a coherent overview of the design and methods for an ITS to teach students to write mathematical proofs in the style of a textbook. Based on a detailed analysis of the teaching area, the paper argues for the adoption of the model entered by the tutor in the form of a vector consisting of the criteria solidity, relevance and granularity. Clues are provided with increasing degree of explicitness to realize the system."}], "references": [{"title": "Human-Readable Machine-Verifiable Proofs for Teaching Constructive Logic", "author": ["Andreas Abel", "Bor-Yuh Evan Chang", "Frank Pfenning"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2001}, {"title": "Limitations of Student Control: Do Students Know when They Need Help", "author": ["Vincent Aleven", "Kenneth Koedinger"], "venue": "editors: Intelligent Tutoring Systems, Lecture Notes in Computer Science", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2000}, {"title": "Transforming matings into natural deduction proofs", "author": ["Peter B. Andrews"], "venue": "Proceedings of the 5th Conference on Automated Deduction (CADE),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1980}, {"title": "Teaching Case-Based Argumentation Concepts using Dialectic Arguments vs. Didactic Explanations", "author": ["Kevin D. Ashley", "Ravi Desai", "John M. Levine"], "venue": "Proceedings of the Intelligent Tutoring Systems Conference,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}, {"title": "Tactics for Hierarchical Proofs", "author": ["David Aspinall", "Ewen Denney", "Christoph L\u00fcth"], "venue": "Journal Mathematics in Computer Science", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "A Generic Modular Data Structure for Proof Attempts Alternating on Ideas and Granularity", "author": ["Serge Autexier", "Christoph Benzm\u00fcller", "Dominik Dietrich", "Andreas Meier", "Claus-Peter Wirth"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2006}, {"title": "A Tactic Language for Declarative Proofs", "author": ["Serge Autexier", "Dominik Dietrich"], "venue": "First International Conference,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "Textbook Proofs Meet Formal Logic - The Problem of Underspecification and Granularity", "author": ["Serge Autexier", "Armin Fiedler"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}, {"title": "Structured derivations: a unified proof style for teaching mathematics", "author": ["Ralph-Johan Back"], "venue": "Formal Asp. Comput", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "Toward Automatic Hint Generation for Logic Proof Tutoring Using Historical Student Data", "author": ["Tiffany Barnes", "John C. Stamper"], "venue": "editors: Intelligent Tutoring Systems, 9th International Conference,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2008}, {"title": "Automatic Hint Generation for Logic Proof Tutoring Using Historical Data", "author": ["Tiffany Barnes", "John C. Stamper"], "venue": "Educational Technology & Society", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2010}, {"title": "Mathpert: Computer Support for Learning Algebra, Trig, and Calculus. In Andrei Voronkov, editor:  LPAR, Lecture Notes in Computer Science 624", "author": ["Michael Beeson"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1992}, {"title": "Deep Inference for Automated Proof Tutoring", "author": ["Christoph Benzm\u00fcller", "Dominik Dietrich", "Marvin Schiller", "Serge Autexier"], "venue": "editors: KI 2007: Advances in Artificial Intelligence. 30th Annual German Conference on AI, LNAI 4667,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2007}, {"title": "A corpus of tutorial dialogs on theorem proving; the influence of the presentation of the study-material", "author": ["Christoph Benzm\u00fcller", "Helmut Horacek", "Henri Lesourd", "Ivana Kruijff-Korbayov\u00e1", "Marvin Schiller", "Magdalena Wolska"], "venue": "Proceedings of International Conference on Language Resources and Evaluation (LREC", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2006}, {"title": "DiaWOz-II - A tool for wizard-of-oz experiments in mathematics", "author": ["Christoph Benzm\u00fcller", "Helmut Horacek", "Henri Lesourd", "Ivana Kruijff-Korbayov\u00e1", "Marvin Schiller", "Magdalena Wolska"], "venue": "KI", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2006}, {"title": "Student Proof Exercises Using MathsTiles and Isabelle/HOL in an Intelligent Book", "author": ["William Billingsley", "Peter Robinson"], "venue": "J. Autom. Reasoning", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2007}, {"title": "Repair theory: A generative theory of bugs in procedural skills", "author": ["John Seely Brown", "Kurt VanLehn"], "venue": "Cognitive Science,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1980}, {"title": "PDS \u2013 A Three-Dimensional Data Structure for Proof Plans", "author": ["Lassaad Cheikhrouhou", "Volker Sorge"], "venue": "Proceedings of the International Conference on Artificial and Computational Intelligence For Decision, Control and Automation In Engineering and Industrial Applications (ACIDCA)", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2000}, {"title": "Cognitive Computer Tutors: Solving the Two-Sigma Problem", "author": ["Albert Corbett"], "venue": "editors: User Modeling", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2001}, {"title": "A Declarative Language for the Coq Proof Assistant", "author": ["Pierre Corbineau"], "venue": "Cividale del Friuli,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2007}, {"title": "Hiproofs: A Hierarchical Notion of Proof Tree", "author": ["Ewen Denney", "John Power", "Konstantinos Tourlas"], "venue": "Proc. of the 21st Annual Conference on Mathematical Foundations of Programming Semantics (MFPS XXI),", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2006}, {"title": "On the Comparison of Proof Planning Systems: lambdaCLAM, OMEGA and IsaPlanner", "author": ["Louise A. Dennis", "Mateja Jamnik", "Martin Pollet"], "venue": "Electr. Notes Theor. Comput. Sci", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2006}, {"title": "Assertion Level Proof Planning with Compiled Strategies", "author": ["Dominik Dietrich"], "venue": "Ph.D. thesis,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2010}, {"title": "Verification of Human-level Proof Steps in Mathematics Education", "author": ["Dominik Dietrich", "Mark Buckley"], "venue": "Teaching Mathematics and Computer Science", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2008}, {"title": "Integrating Structured Queries into a Tactic Language. JAL - Special issue on Programming Languages and Mechanized Mathematics Systems Available at http://dx. doi.org/10.1007/s10817-009-9138-5", "author": ["Dominik Dietrich", "Ewaryst Schulz"], "venue": null, "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2009}, {"title": "Recording HOL Proofs in a Structured Browsable Format. In Michael Johnson, editor:  Algebraic Methodology and Software Technology, 6th International Conference, AMAST \u201997, Sydney, Australia", "author": ["Jim Grundy", "Thomas L\u00e5ngbacka"], "venue": "December 13-17,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 1997}, {"title": "Web-Based Evaluations Showing Differential Learning for Tutorial Strategies Employed by the Ms", "author": ["Neil T. Heffernan", "Ethan A. Croteau"], "venue": "editors: Intelligent Tutoring Systems, Lecture Notes in Computer Science", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2004}, {"title": "Reconstructing Proofs at the Assertion Level", "author": ["Xiaorong Huang"], "venue": "In Alan Bundy, editor: Proc. 12th CADE,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 1994}, {"title": "Human Oriented Proof Presentation: A Reconstructive Approach", "author": ["Xiaorong Huang"], "venue": "DISKI", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 1996}, {"title": "Teaching logic using a state-of-the-art proof assistant", "author": ["Cezary Kaliszyk", "Freek Wiedijk", "Maxim Hendriks", "Femke van Raamsdonk"], "venue": "editors: Proc. of the International Workshop on Proof Assistants and Types in Education,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2007}, {"title": "An iterative design methodology for user-friendly natural language office information applications", "author": ["John F. Kelley"], "venue": "ACM Trans. Inf. Syst", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 1984}, {"title": "Exploring the Assistance Dilemma in Experiments with Cognitive Tutors", "author": ["Kenneth R. Koedinger", "Vincent Aleven"], "venue": "Educational Psychology Review", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2007}, {"title": "Reifying implicit planning in geometry: Guidelines for model-based intelligent tutoring system design", "author": ["Kenneth R. Koedinger", "John R. Anderson"], "venue": "editors: Computers as cognitive tools,", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 1993}, {"title": "How to write a proof", "author": ["Leslie Lamport"], "venue": "American Mathematical Monthly", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 1995}, {"title": "Artificial Intelligence in Education - Supporting Learning through Intelligent and Socially Informed Technology", "author": ["Chee-Kit Looi", "Gordon I. McCalla", "Bert Bredeweg", "Joost Breuker"], "venue": "Proceedings of the 12th International Conference on Artificial Intelligence in Education,", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2005}, {"title": "Advanced Geometry Tutor: An intelligent tutor that teaches proofwriting with construction", "author": ["Noboru Matsuda", "Kurt VanLehn"], "venue": "In Looi et al", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 2005}, {"title": "When and how often should worked examples be given to students? New results and a summary of the current state of research", "author": ["Bruce M. McLaren", "Sung-Joo Lim", "Kenneth R. Koedinger"], "venue": "Proceedings of the 30th Annual Conference of the Cognitive Science Society,", "citeRegEx": "48", "shortCiteRegEx": "48", "year": 2008}, {"title": "Effective Tutoring Techniques: A Comparison of Human Tutors and Intelligent Tutoring Systems", "author": ["Douglas C. Merrill", "Brian J. Reiser", "Michael Ranney", "J. Gregory Trafton"], "venue": "The Journal of the Learning Sciences", "citeRegEx": "50", "shortCiteRegEx": "50", "year": 1992}, {"title": "Expansion Tree Proofs and Their Conversion to Natural Deduction Proofs", "author": ["Dale A. Miller"], "venue": "editor:  7th International Conference on Automated Deduction, Napa, California,", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 1984}, {"title": "Human Problem Solving", "author": ["Allen. Newell", "Herbert A. Simon"], "venue": null, "citeRegEx": "52", "shortCiteRegEx": "52", "year": 1972}, {"title": "The Aplusix-Editor: A New Kind of Software for the Learning of Algebra", "author": ["Jean-Franois Nicaud", "Denis Bouhineau", "Thomas Huguet"], "venue": "In Cerri et al", "citeRegEx": "53", "shortCiteRegEx": "53", "year": 2002}, {"title": "Learning from performance errors", "author": ["Stellan Ohlsson"], "venue": "Psychological Review", "citeRegEx": "54", "shortCiteRegEx": "54", "year": 1996}, {"title": "The New Book of Prime Number Records", "author": ["Paulo Ribenboim"], "venue": null, "citeRegEx": "55", "shortCiteRegEx": "55", "year": 1996}, {"title": "Formalizing a Hierarchical Structure of Practical Mathematical Reasoning", "author": ["Peter J. Robinson", "John Staples"], "venue": "J. Log. Comput", "citeRegEx": "56", "shortCiteRegEx": "56", "year": 1993}, {"title": "A comparative evaluation of socratic versus didactic tutoring", "author": ["Carolyn Penstein Ros\u00e9", "Johanna D. Moore", "Kurt Vanlehn", "David Allbritton"], "venue": null, "citeRegEx": "57", "shortCiteRegEx": "57", "year": 2001}, {"title": "Granularity Analysis for Tutoring Mathematical Proofs", "author": ["Marvin Schiller"], "venue": "AKA Verlag,", "citeRegEx": "58", "shortCiteRegEx": "58", "year": 2011}, {"title": "The AProS Project: Strategic Thinking & Computational Logic", "author": ["Wilfried Sieg"], "venue": "Logic Journal of the IGPL", "citeRegEx": "60", "shortCiteRegEx": "60", "year": 2007}, {"title": "Computer Environments for Proof Construction", "author": ["Wilfried Sieg", "Richard Scheines"], "venue": "Interactive Learning Environments", "citeRegEx": "61", "shortCiteRegEx": "61", "year": 1994}, {"title": "How to read and do proofs", "author": ["Daniel Solow"], "venue": null, "citeRegEx": "62", "shortCiteRegEx": "62", "year": 2005}, {"title": "A Proof Environment for Teaching Mathematics", "author": ["Richard Sommer", "Gregory Nuckols"], "venue": "Journal of Automated Reasoning", "citeRegEx": "63", "shortCiteRegEx": "63", "year": 2004}, {"title": "KERMIT: A Constraint-Based Tutor for Database Modeling", "author": ["Pramuditha Suraweera", "Antonija Mitrovic"], "venue": "In Cerri et al", "citeRegEx": "64", "shortCiteRegEx": "64", "year": 2002}, {"title": "Three Tactic Theorem Proving", "author": ["Don Syme"], "venue": "In Bertot et al", "citeRegEx": "65", "shortCiteRegEx": "65", "year": 1999}, {"title": "DECLARE: a prototype declarative proof system for higher order logic", "author": ["Donald Syme"], "venue": "Technical Report UCAM-CL-TR-416,", "citeRegEx": "66", "shortCiteRegEx": "66", "year": 1997}, {"title": "Automatic analysis of proof in a computer-based environment", "author": ["Jana Trgalova", "Hamid"], "venue": "Chaachoua", "citeRegEx": "67", "shortCiteRegEx": "67", "year": 2009}, {"title": "MENON - Automating a Socratic Teaching Model for Mathematical Proofs", "author": ["Dimitra Tsovaltzi"], "venue": "Phd thesis, Universita\u0308t des Saarlandes, Saarbru\u0308cken, Germany", "citeRegEx": "68", "shortCiteRegEx": "68", "year": 2010}, {"title": "The Behavior of Tutoring Systems. I", "author": ["Kurt VanLehn"], "venue": "J. Artificial Intelligence in Education", "citeRegEx": "69", "shortCiteRegEx": "69", "year": 2006}, {"title": "The Relative Effectiveness of Human Tutoring, Intelligent Tutoring Systems, and Other Tutoring Systems", "author": ["Kurt VanLehn"], "venue": "Educational Psychologist", "citeRegEx": "70", "shortCiteRegEx": "70", "year": 2011}, {"title": "Isar - A Generic Interpretative Approach to Readable Formal Proof Documents", "author": ["Markus Wenzel"], "venue": "In Bertot et al", "citeRegEx": "72", "shortCiteRegEx": "72", "year": 1999}, {"title": "Formal Proof Sketches", "author": ["Freek Wiedijk"], "venue": "editors: Types for Proofs and Programs: Third International Workshop TYPES", "citeRegEx": "73", "shortCiteRegEx": "73", "year": 2004}, {"title": "Linguistic Processing in a Mathematics Tutoring System: Cooperative Input Interpretation and Dialogue Modelling", "author": ["Magdalena Wolska", "Mark Buckley", "Helmut Horacek", "Ivana Kruijff-Korbayov", "Manfred Pinkal"], "venue": null, "citeRegEx": "74", "shortCiteRegEx": "74", "year": 2010}, {"title": "Building intelligent interactive tutors: Student-centered strategies for revolutionizing e-learning", "author": ["Beverly Park Woolf"], "venue": null, "citeRegEx": "75", "shortCiteRegEx": "75", "year": 2008}], "referenceMentions": [{"referenceID": 31, "context": "Mathematics is a key discipline in education and today, there exist strong systems to teach and tutor specific mathematical skills, such as mathematical computations, problem solving and geometry (see for instance, [49, 41, 46, 36, 14, 53, 33, 19] to name a few).", "startOffset": 215, "endOffset": 247}, {"referenceID": 35, "context": "Mathematics is a key discipline in education and today, there exist strong systems to teach and tutor specific mathematical skills, such as mathematical computations, problem solving and geometry (see for instance, [49, 41, 46, 36, 14, 53, 33, 19] to name a few).", "startOffset": 215, "endOffset": 247}, {"referenceID": 26, "context": "Mathematics is a key discipline in education and today, there exist strong systems to teach and tutor specific mathematical skills, such as mathematical computations, problem solving and geometry (see for instance, [49, 41, 46, 36, 14, 53, 33, 19] to name a few).", "startOffset": 215, "endOffset": 247}, {"referenceID": 11, "context": "Mathematics is a key discipline in education and today, there exist strong systems to teach and tutor specific mathematical skills, such as mathematical computations, problem solving and geometry (see for instance, [49, 41, 46, 36, 14, 53, 33, 19] to name a few).", "startOffset": 215, "endOffset": 247}, {"referenceID": 40, "context": "Mathematics is a key discipline in education and today, there exist strong systems to teach and tutor specific mathematical skills, such as mathematical computations, problem solving and geometry (see for instance, [49, 41, 46, 36, 14, 53, 33, 19] to name a few).", "startOffset": 215, "endOffset": 247}, {"referenceID": 15, "context": "Mathematics is a key discipline in education and today, there exist strong systems to teach and tutor specific mathematical skills, such as mathematical computations, problem solving and geometry (see for instance, [49, 41, 46, 36, 14, 53, 33, 19] to name a few).", "startOffset": 215, "endOffset": 247}, {"referenceID": 34, "context": "Notable exceptions are the tutoring systems for geometrical proofs [45, 42, 67], as well as for pure formal logic proofs (such as the CMU proof tutor [61], the NovaNet Proof Tutorial [13] or Proofweb [39]).", "startOffset": 67, "endOffset": 79}, {"referenceID": 32, "context": "Notable exceptions are the tutoring systems for geometrical proofs [45, 42, 67], as well as for pure formal logic proofs (such as the CMU proof tutor [61], the NovaNet Proof Tutorial [13] or Proofweb [39]).", "startOffset": 67, "endOffset": 79}, {"referenceID": 53, "context": "Notable exceptions are the tutoring systems for geometrical proofs [45, 42, 67], as well as for pure formal logic proofs (such as the CMU proof tutor [61], the NovaNet Proof Tutorial [13] or Proofweb [39]).", "startOffset": 67, "endOffset": 79}, {"referenceID": 47, "context": "Notable exceptions are the tutoring systems for geometrical proofs [45, 42, 67], as well as for pure formal logic proofs (such as the CMU proof tutor [61], the NovaNet Proof Tutorial [13] or Proofweb [39]).", "startOffset": 150, "endOffset": 154}, {"referenceID": 10, "context": "Notable exceptions are the tutoring systems for geometrical proofs [45, 42, 67], as well as for pure formal logic proofs (such as the CMU proof tutor [61], the NovaNet Proof Tutorial [13] or Proofweb [39]).", "startOffset": 183, "endOffset": 187}, {"referenceID": 29, "context": "Notable exceptions are the tutoring systems for geometrical proofs [45, 42, 67], as well as for pure formal logic proofs (such as the CMU proof tutor [61], the NovaNet Proof Tutorial [13] or Proofweb [39]).", "startOffset": 200, "endOffset": 204}, {"referenceID": 55, "context": "Following Van Lehn (see [69]), intelligent tutoring systems (ITSs) can be characterized as having both an outer loop and an inner loop.", "startOffset": 24, "endOffset": 28}, {"referenceID": 45, "context": "For instance, parts of the step analyser described in [58] have never", "startOffset": 54, "endOffset": 58}, {"referenceID": 22, "context": "been described in connection with the other parts of the final step analyzer or the final hint generation module [29].", "startOffset": 113, "endOffset": 117}, {"referenceID": 42, "context": "For example, Ribenboim gives eleven proofs that there are infinitely many primes (see [55] for details).", "startOffset": 86, "endOffset": 90}, {"referenceID": 48, "context": "However, proof search often happens in backward-style, and the proofs are reformulated in forward-style afterwards (see [62] p.", "startOffset": 120, "endOffset": 124}, {"referenceID": 14, "context": "The system was simulated via a specific software environment [17] and the help of four experienced human tutors.", "startOffset": 61, "endOffset": 65}, {"referenceID": 13, "context": "We obtained a corpus of tutorial dialogs [16] that allowed us to study the actions of students and tutors related to proof exercises illustrating the properties of binary relations.", "startOffset": 41, "endOffset": 45}, {"referenceID": 30, "context": "1Wizard-of-Oz experiments [40] simulate a complex system via a partial/prototype implementation that is assisted by a human expert (the \u201cwizard\u201d).", "startOffset": 26, "endOffset": 30}, {"referenceID": 12, "context": "[15]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "To be able to also trace common student errors, a MTT typically provides a set of buggy rules (see [20]) that model incorrect reasoning.", "startOffset": 99, "endOffset": 103}, {"referenceID": 50, "context": "Constraint Based Tutors (CBTs), such as the SQL tutor (see [64]), are based on Ohlsson\u2019s theory of learning from performance errors (see [54]) and use constraints to describe abstract features of correct solutions.", "startOffset": 59, "endOffset": 63}, {"referenceID": 41, "context": "Constraint Based Tutors (CBTs), such as the SQL tutor (see [64]), are based on Ohlsson\u2019s theory of learning from performance errors (see [54]) and use constraints to describe abstract features of correct solutions.", "startOffset": 137, "endOffset": 141}, {"referenceID": 36, "context": "Example Tracing Tutors (ETTs), such as the stoichiometry tutor (see [48]), interpret a student\u2019s solution step with respect to a predefined solution graph that represents a generalized solution, which is often also called behavior graph (cf.", "startOffset": 68, "endOffset": 72}, {"referenceID": 39, "context": "[52]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 59, "context": "In order to have a clear separation of concern, we devised a clear, formal interface language for the kernel module, which serves as target for the natural language analysis component(s) that still need to be developed (see [74] for recent work on that topic).", "startOffset": 224, "endOffset": 228}, {"referenceID": 51, "context": "Our interface language for the kernel module is a declarative proof language (see for example [65, 72, 9, 26, 66]) that has been modified to support the elision of information that is typically required to facilitate the verification process.", "startOffset": 94, "endOffset": 113}, {"referenceID": 57, "context": "Our interface language for the kernel module is a declarative proof language (see for example [65, 72, 9, 26, 66]) that has been modified to support the elision of information that is typically required to facilitate the verification process.", "startOffset": 94, "endOffset": 113}, {"referenceID": 7, "context": "Our interface language for the kernel module is a declarative proof language (see for example [65, 72, 9, 26, 66]) that has been modified to support the elision of information that is typically required to facilitate the verification process.", "startOffset": 94, "endOffset": 113}, {"referenceID": 19, "context": "Our interface language for the kernel module is a declarative proof language (see for example [65, 72, 9, 26, 66]) that has been modified to support the elision of information that is typically required to facilitate the verification process.", "startOffset": 94, "endOffset": 113}, {"referenceID": 52, "context": "Our interface language for the kernel module is a declarative proof language (see for example [65, 72, 9, 26, 66]) that has been modified to support the elision of information that is typically required to facilitate the verification process.", "startOffset": 94, "endOffset": 113}, {"referenceID": 21, "context": "By allowing arbitrarily large gaps between the commands, one arrives at the notion of a proof plan [28] or proof sketch [73].", "startOffset": 99, "endOffset": 103}, {"referenceID": 58, "context": "By allowing arbitrarily large gaps between the commands, one arrives at the notion of a proof plan [28] or proof sketch [73].", "startOffset": 120, "endOffset": 124}, {"referenceID": 6, "context": "We use \u03a9mega\u2019s declarative proof script language presented in Figure 3 (see also [8]) as input language and allow underspecified proof scripts that are obtained by omitting \u201cby\u201d and \u201cfrom\u201d as well as the \u201cthus form\u201d in assume-proof steps.", "startOffset": 81, "endOffset": 84}, {"referenceID": 37, "context": "Human one-on-one tutoring is thought to be effective due to its very interactive nature and frequent (stepby-step) feedback [50].", "startOffset": 124, "endOffset": 128}, {"referenceID": 18, "context": "[25]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 56, "context": "A recent meta-analysis [70] determines that tutoring systems with step-based feedback are almost as effective as human tutoring, and more effective than systems that are answerbased (i.", "startOffset": 23, "endOffset": 27}, {"referenceID": 2, "context": "While there exist techniques to convert (completed) resolution proofs or matrix proofs into natural deduction proofs, (see for example [4, 51]), it turns out that performing the proof search directly at a more abstract level is beneficial for the runtime of the reconstruction.", "startOffset": 135, "endOffset": 142}, {"referenceID": 38, "context": "While there exist techniques to convert (completed) resolution proofs or matrix proofs into natural deduction proofs, (see for example [4, 51]), it turns out that performing the proof search directly at a more abstract level is beneficial for the runtime of the reconstruction.", "startOffset": 135, "endOffset": 142}, {"referenceID": 27, "context": "To come close to the style of proofs as done by humans, Huang [37, 38] introduced the assertion-level, where individual proof steps are justified by axioms, definitions, or theorems, or even above at the so-called proof level, such as \u201cby analogy\u201d.", "startOffset": 62, "endOffset": 70}, {"referenceID": 28, "context": "To come close to the style of proofs as done by humans, Huang [37, 38] introduced the assertion-level, where individual proof steps are justified by axioms, definitions, or theorems, or even above at the so-called proof level, such as \u201cby analogy\u201d.", "startOffset": 62, "endOffset": 70}, {"referenceID": 22, "context": "The technique to obtain such inferences automatically from assertions follows the introduction and elimination rules of a natural deduction (ND) calculus [32] and can be found in [29].", "startOffset": 179, "endOffset": 183}, {"referenceID": 23, "context": "The proof step reconstruction algorithm is based on two main ideas (see [30] for details): (i) Represent the possible states the student might be in as so-called mental proof state (MPS).", "startOffset": 72, "endOffset": 76}, {"referenceID": 45, "context": "We have devised a framework to analyze the step size of proof steps [58], where a proof step can refer to either the single application of an inference rule, or consist of several (tacit) intermediate inference applications provided by the reconstruction algorithm.", "startOffset": 68, "endOffset": 72}, {"referenceID": 45, "context": "[58]) that are thought to be indicative of granularity, and classified as appropriate, too small, or to big according to a classifier.", "startOffset": 0, "endOffset": 4}, {"referenceID": 1, "context": "As discussed in [2], this might not be optimal, as students might abuse this functionality or refuse to ask the system for a hint; nevertheless it is the strategy that is used in most tutoring systems.", "startOffset": 16, "endOffset": 19}, {"referenceID": 46, "context": "The principle of progressively providing more concrete hints if required has been applied to a number of tutoring systems, including the Carnegie Proof Lab [60].", "startOffset": 156, "endOffset": 160}, {"referenceID": 5, "context": "In our approach, the provision of increasingly concrete hints is supported by a problem solver that generates a hierarchical solution (see [7] for details) based on proof strategies, where each (sub)invocation of a strategy introduces a new hierarchy in the computed solution.", "startOffset": 139, "endOffset": 142}, {"referenceID": 24, "context": "In contrast to other approaches that require to encode the knowledge in the underlying programming language of the system, we encode proof strategies in a separate strategy language (see [31, 8] for an overview).", "startOffset": 187, "endOffset": 194}, {"referenceID": 6, "context": "In contrast to other approaches that require to encode the knowledge in the underlying programming language of the system, we encode proof strategies in a separate strategy language (see [31, 8] for an overview).", "startOffset": 187, "endOffset": 194}, {"referenceID": 48, "context": "A simple proof strategy that is proposed in [62] is the \u201cForward-Backward Method\u201d, which combines the two well-known problem solving strategies: forward chaining and backward chaining: The method starts with backward chaining by matching the current proof goal with the conclusions of theorems and definitions and adding their premises as new goals to be proved.", "startOffset": 44, "endOffset": 48}, {"referenceID": 31, "context": "How should the next proof step be communicated to the user? A general issue in ITS design is how much scaffolding is to be provided to the learner, which is known as the \u201cassistance dilemma\u201d \u2013 both too much and too little assistance hamper learning [41].", "startOffset": 249, "endOffset": 253}, {"referenceID": 44, "context": "[57]) have been demonstrated to be superior to didactic teaching strategies, i.", "startOffset": 0, "endOffset": 4}, {"referenceID": 44, "context": "hinting based on direct instruction, especially regarding their long-term effects [57, 23, 5].", "startOffset": 82, "endOffset": 93}, {"referenceID": 3, "context": "hinting based on direct instruction, especially regarding their long-term effects [57, 23, 5].", "startOffset": 82, "endOffset": 93}, {"referenceID": 60, "context": "[75]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 54, "context": "Such a teaching strategy for the domain of mathematical proofs has been developed and automated by Tsovaltzi [68] and provides the background for our work.", "startOffset": 109, "endOffset": 113}, {"referenceID": 45, "context": "2) within a framework for judging granularity (presented in [58]).", "startOffset": 60, "endOffset": 64}, {"referenceID": 45, "context": "detail in [58]).", "startOffset": 10, "endOffset": 14}, {"referenceID": 45, "context": "[58]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "Following ideas from [12] the tutor system itself could record the hints given away in specific proof situations and try to assess how useful they were.", "startOffset": 21, "endOffset": 25}, {"referenceID": 46, "context": "We discuss our work in connection with related approaches that (i) focus on domain reasoning techniques for tutoring proofs in logics and mathematics (AProS and the Carnegie Proof Lab [60], the EPGY Proving Environment [63], Tutch [1] and approaches using hierarchical proofs), and (ii) hint generation (Carnegie Proof Lab, Andes [34] and the NovaNet Proof Tutorial [13]).", "startOffset": 184, "endOffset": 188}, {"referenceID": 49, "context": "We discuss our work in connection with related approaches that (i) focus on domain reasoning techniques for tutoring proofs in logics and mathematics (AProS and the Carnegie Proof Lab [60], the EPGY Proving Environment [63], Tutch [1] and approaches using hierarchical proofs), and (ii) hint generation (Carnegie Proof Lab, Andes [34] and the NovaNet Proof Tutorial [13]).", "startOffset": 219, "endOffset": 223}, {"referenceID": 0, "context": "We discuss our work in connection with related approaches that (i) focus on domain reasoning techniques for tutoring proofs in logics and mathematics (AProS and the Carnegie Proof Lab [60], the EPGY Proving Environment [63], Tutch [1] and approaches using hierarchical proofs), and (ii) hint generation (Carnegie Proof Lab, Andes [34] and the NovaNet Proof Tutorial [13]).", "startOffset": 231, "endOffset": 234}, {"referenceID": 10, "context": "We discuss our work in connection with related approaches that (i) focus on domain reasoning techniques for tutoring proofs in logics and mathematics (AProS and the Carnegie Proof Lab [60], the EPGY Proving Environment [63], Tutch [1] and approaches using hierarchical proofs), and (ii) hint generation (Carnegie Proof Lab, Andes [34] and the NovaNet Proof Tutorial [13]).", "startOffset": 366, "endOffset": 370}, {"referenceID": 46, "context": "The AProS project (see [60] for an overview) provides an integrated environment for strategic proof search and tutoring in natural deduction calculi for predicate logic.", "startOffset": 23, "endOffset": 27}, {"referenceID": 49, "context": "The Epgy theorem proving environment aims to support \u201cstandard mathematical practice\u201d both in how the final proofs look as well as the techniques students use to produce them (see [63] p.", "startOffset": 180, "endOffset": 184}, {"referenceID": 49, "context": "The authors acknowledge that the use of a classical ATP to verify proof steps has the following drawbacks ([63] p.", "startOffset": 107, "endOffset": 111}, {"referenceID": 0, "context": "Tutch (see [1]) is a proof checker that was originally designed for natural deduction proofs in propositional logic.", "startOffset": 11, "endOffset": 14}, {"referenceID": 33, "context": "Hierarchical proofs have been advocated by several people, such as Lamport [44] in the context of informal proofs.", "startOffset": 75, "endOffset": 79}, {"referenceID": 8, "context": "A similar idea is proposed by Back and colleagues for calculational proofs [11, 10].", "startOffset": 75, "endOffset": 83}, {"referenceID": 25, "context": "In the context of HOL, Grundy and Langbacka [35] developed an algorithm to present hierarchical proofs in a browsable format.", "startOffset": 44, "endOffset": 48}, {"referenceID": 43, "context": "Another possibility for hierarchical proof construction is provided by a method called window inference [56].", "startOffset": 104, "endOffset": 108}, {"referenceID": 17, "context": "Our approach is based on previous work by Cheikhrouhou and Sorge who developed the hierarchical proof data structure PDS in an earlier version of the \u03a9mega system, intended to support hierarchical proof presentation and proof search [22].", "startOffset": 233, "endOffset": 237}, {"referenceID": 20, "context": "The same idea has been picked up by Denney, who developed the notion of hiproof [27].", "startOffset": 80, "endOffset": 84}, {"referenceID": 4, "context": "Most recently, a tactic language for hiproofs has been proposed in [6].", "startOffset": 67, "endOffset": 70}, {"referenceID": 15, "context": "MathsTiles [19] are a flexible language to be used as an interface for an intelligent book on mathematics.", "startOffset": 11, "endOffset": 15}, {"referenceID": 15, "context": "However, the approach in [19] checks proofs linearly.", "startOffset": 25, "endOffset": 29}, {"referenceID": 10, "context": "The NovaNet Proof Tutorial [13] is a learning tool for logic proofs.", "startOffset": 27, "endOffset": 31}], "year": 2012, "abstractText": "Reasoning: The Assertion Level. To come close to the style of proofs as done by humans, Huang [37, 38] introduced the assertion-level, where individual proof steps are justified by axioms, definitions, or theorems, or even above at the so-called proof level, such as \u201cby analogy\u201d. The idea of the assertion-level is, for instance, that given the facts U \u2282V and V \u2282W we can prove U \u2282W directly using the assertion: \u2282Trans: \u2200U.\u2200V.\u2200W.U \u2282V \u2227V \u2282W \u21d2U \u2282W An assertion level step usually subsumes several deduction steps in a standard calculus, say the classical sequent calculus [32]. Therefore, traditional theorem provers can only achieve such conclusions after a number of proof steps. To use an assertion in the classical sequent calculus, it must be present in the antecedent of the sequent and be processed by means of decomposition rules, usually leading to new branches in the derivation tree. Some of these branches are subsequently closed by means of the axiom rule which correspond to \u201cusing\u201d that assertion on known facts or goals. The technique to obtain such inferences automatically from assertions follows the introduction and elimination rules of a natural deduction (ND) calculus [32] and can be found in [29]. The Reconstruction Algorithm. The proof step reconstruction algorithm is based on two main ideas (see [30] for details): (i) Represent the possible states the student might be in as so-called mental proof state (MPS). (ii) Given a new proof step and a MPS, perform a depth-limited BFS at the assertion level, trying to derive one/several successor states that are consistent with the student\u2019s utterance, where the consistency is proof command specific. The depth limiter imposes an upper bound on the number of assertion level inferences that are assumed to be contained implicitly in the student\u2019s input.2 Whether this limit is sufficient depends on (i) the step size of the available proof mechanism and (ii) the experience of the student, as we discuss in Section 3.2. We have determined such a bound empirically for the corpus of students\u2019 proof steps from the Wizard-of-Oz experiments, as discussed in Section 5. The bound is needed to guarantee termination of the reconstruction algorithm, which might otherwise not terminate. Figure 5 shows an example reconstruction of a complete dialog taken from the corpus. In the figure, the shaded formulas correspond to the steps entered by the student. The white formulas correspond to assertions the student has left out and which were filled in by the reconstruction module. A MPS is represented as a set of sequents that are the subproblems to be solved, together with a global substitution which instantiates meta-variables. One of these sequents is always marked and represents the sequent the student is working on. Always keeping track of the student\u2019s subgoals facilitates task sensitive feedback. 2Note that the correspondence of student steps to calculus steps may vary for each calculus. Autexier, Dietrich, Schiller 11 (x,y) \u2208 S \u25e6R \u22a2 \u201d\u2014\u201d Ax (z,y) \u2208 R\u22121 \u2227 (x,z) \u2208 S\u22121 \u22a2 \u201d\u2014\u201d Def\u25e6 (y,z) \u2208 R\u2227 (x,z) \u2208 S\u22121 \u22a2 \u201d\u2014\u201d Def\u22121 (y,z) \u2208 R\u2227 (z,x) \u2208 S \u22a2 \u201d\u2014\u201d Def\u22121 (y,x) \u2208 (R\u25e6S) \u22a2 \u201d\u2014\u201d Def\u25e6 (x,y) \u2208 (R\u25e6S) \u22a2 (x,y) \u2208 S \u25e6R Def\u22121 (R\u25e6S) \u2282 S \u25e6R Def \u2282 (x,y) \u2208 (R\u25e6S) \u22a2 \u201d\u2014\u201d Ax (y,x) \u2208 (R\u25e6S) \u22a2 \u201d\u2014\u201d Def\u22121 (z,x) \u2208 S\u2227 (y,z) \u2208 R \u22a2 \u201d\u2014\u201d Def\u25e6 (x,z) \u2208 S\u22121 \u2227 (y,z) \u2208 R \u22a2 \u201d\u2014\u201d Def (x,z) \u2208 S\u22121 \u2227 (z,y) \u2208 R\u22121 \u22a2 \u201d\u2014\u201d Def (x,y) \u2208 S \u25e6R \u22a2 (x,y) \u2208 (R\u25e6S) Def\u25e6 S \u25e6R \u2282 (R\u25e6S) Def \u2282 \u22a2 (R\u25e6S)\u22121 = S\u22121 \u25e6R\u22121 Def = Figure 5: Annotated \u03a9mega assertion level proof Initially, the MPS is unique and consists of the exercise given to the student as single sequent, together with the empty substitution. During the search, an invariant is that a MPS always represents a valid proof state. By expanding a given proof state only by valid actions, it is guaranteed that only reachable and consistent proof states are generated. Let us stress again that due to ambiguity and underspecification several consistent successor states are possible (as in the case of statement S8b shown in Figure 1 where the next subgoal the student will work on is underspecified). There can also be several reconstructions for a given proof step. Therefore, the verification algorithm works on a list of MPS rather than on a single one. While the reconstruction algorithm might look similar to the processing model of proof commands in a pure verification setting, there are the following subtle differences: \u2022 In a pure verification setting, it is sufficient to find some verification for a proof command. The verification itself is usually not of interest and needs not to be further processed. In contrast, in a tutorial setting we need to consider several, if not all, possible verifications of the given proof command and need to relate them to the student\u2019s knowledge to avoid the student to rely on the power of the underlying theorem prover to solve the exercise. \u2022 In a pure verification setting, we can assume the user to be an expert in the problem domain as well as in the field of formal reasoning. This has several implications on the processing model: (i) inputs can be expected to be correct and just need to be checked, (ii) proof commands can lazily be verified until a (sub)proof is completed, (iii) justification hints are given that indicate how to verify a given proof command, (iv) feedback is limited to \u201ccheckable\u201d or \u201cnot checkable\u201d. In contrast, in a tutorial setting, we must assume the user to be neither a domain expert nor an expert in formal reasoning. The underlying mechanisms need to be hidden from the user, direct and comprehensive feedback has to be provided at each step. Therefore, it is for example a requirement to anticipate why an assumption is made, in contrast to a lazy checking once the conclusion has been obtained. \u2022 In a pure verification setting, we can assume the user to indicate when the proof of a subgoal is finished (as usually done by so-called proof step markers in the proof language). However, in the tutorial setting this information is implicit. Similarly, we must be able to perform backward steps where some of the new proof obligations have not yet been shown. In order to illustrate how the verification algorithm works, we will step through the verification of utterance S8 from Figure 1, beginning with the initial MPS and finishing with the MPS extended by the proof step. The initial MPS is {\u3008\u22a2 (R\u25e6S)\u22121 = S\u22121 \u25e6R\u22121; / 0\u3009} and the proof step to be verified is let (x,y) \u2208 (R\u25e6S)\u22121. 12 Towards an Intelligent Tutor for Mathematical Proofs Having expanded the current proof state (step (i), shown in Figure 6), we apply a let-proof step specific filter to find the set of newly-created sequents which are consistent with the given proof step. Of the sequents in the tree, only the node containing the sequent Tk passes, since the formula in the proof step appears on the left-hand side of the sequent. Now that we have found the consistent successor sequents, we must complete these sequents to MPSs. Because the decomposition of the sequent T0 introduced a subgoal split, the sequent Tj must be proved in addition to Tk. The resulting MPS is therefore {\u3008Tk,Tj; / 0\u3009}, that is, Tk is now the current sequent, and Tj is still to be proved. Finally, we prune the nodes which were rejected by the filter. Relevance Checking. Using the proof step reconstruction mechanism for each proof step allows our approach to perform a form of relevance checking when a hypothesis is introduced. A hypothesis introduced by the student is matched against a proof search in \u03a9mega, and considered relevant only if it can be unified with a step that is part of one of the partial solutions that are discovered via strategic proof search. In practice, it turns out that it is very important for a tutoring system to enable a broad range of people to create content for the system in form of exercises and domain expertise. One of the main advantages of our approach is to use existing mature representation and search technology that has been developed over the last decades in the context of ITP/ATP. New domains can easily be added by users either by relying on already existing specifications of formalized mathematics, or by writing new specifications from scratch. That is, the only information the author has to provide is a problem description and the knowledge needed to solve the problem. As inferences are automatically synthesized from theorems and definitions, it is sufficient to provide this knowledge in a declarative form. For simple domains, this is already sufficient and there is a high chance that modifications of existing proofs or even new proofs are recognized by the tutor. For more complex domains in which the reasoning is more complicated, the author also has to provide strategic information on how to solve a problem. 3.2 Granularity Analysis In addition to verifying the correctness of proof steps generated by the student, and to detect steps that are logically incorrect, we use proof reconstructions to judge about another qualitative aspect of proof steps: granularity. By assessing the step size (in the context of the ongoing proof and a student model), a tutoring system for proofs can react if the student\u2019s solution lacks necessary detail, or, to the contrary, the student is progressing at smaller steps than expected, and adapt feedback and hints accordingly. Having a metric for step size also allows the system to generate and present hierarchical proofs (or steps to be used as hints) at specific levels of granularity. T0 : \u22a2 (R\u25e6S)\u22121 = S\u22121 \u25e6R\u22121 Ti : \u22a2 (R\u25e6S)\u22121 \u2286 S\u22121 \u25e6R\u22121 Tk : (x,y) \u2208 (R\u25e6S)\u22121 \u22a2 (x,y) \u2208 S\u22121 \u25e6R\u22121 . . . Tl Tj : \u22a2 (R\u25e6S)\u22121 \u2287 S\u22121 \u25e6R\u22121", "creator": "LaTeX with hyperref package"}}}