{"id": "1202.5284", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Feb-2012", "title": "Elitism Levels Traverse Mechanism For The Derivation of Upper Bounds on Unimodal Functions", "abstract": "In this article we present an elitism levels traverse mechanism that we designed to find bounds on population-based Evolutionary algorithms solving unimodal functions. We prove its efficiency theoretically and test it on OneMax function deriving bounds c{\\mu}n log n - O({\\mu} n). This analysis can be generalized to any similar algorithm using variants of tournament selection and genetic operators that flip or swap only 1 bit in each string.", "histories": [["v1", "Thu, 23 Feb 2012 20:21:57 GMT  (16kb)", "https://arxiv.org/abs/1202.5284v1", "accepted to Congress on Evolutionary Computation (WCCI/CEC) 2012"], ["v2", "Fri, 16 Mar 2012 04:55:09 GMT  (16kb)", "http://arxiv.org/abs/1202.5284v2", "accepted to Congress on Evolutionary Computation (WCCI/CEC) 2012"], ["v3", "Mon, 2 Apr 2012 04:27:11 GMT  (16kb)", "http://arxiv.org/abs/1202.5284v3", "accepted to Congress on Evolutionary Computation (WCCI/CEC) 2012"]], "COMMENTS": "accepted to Congress on Evolutionary Computation (WCCI/CEC) 2012", "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["aram ter-sarkisov"], "accepted": false, "id": "1202.5284"}, "pdf": {"name": "1202.5284.pdf", "metadata": {"source": "CRF", "title": "Elitism Levels Traverse Mechanism For The Derivation of Upper Bounds on Unimodal Functions", "authors": ["Aram Ter-Sarkisov"], "emails": ["a.ter-sarkisov@massey.ac.nz"], "sections": [{"heading": null, "text": "ar Xiv: 120 2.52 84v3 [cs.NE] 2 Apr 201 2Index Terms - Evolutionary Computation, Genetic algorithms, Computational ComplexityI. INTRODUCTIONWe analyze an elite population-based Evolutionary Algorithm with population size \u00b5 and recombination pool size \u03bb, (\u00b5 + \u03bb) EA with a genetic operator 1-bit swap that recombines information between parents (see [1]).Most research in the theoretical EA community focuses on mutation-based algorithms of individual species such as (1 + 1) 1\u00b5 EA (see e.g. [2] - [4]) with some sharp limits to runtime preserved OneMax function such as logging 0.982n in [4].Results on population-based algorithms are less frequent (1 + 1) and are limited to mostly (\u00b5 + 1) 1EA (see EEA [5]) [see Eilin]."}, {"heading": "II. ALGORITHMS AND PROBLEMS", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. Algorithm", "text": "Although the mechanism described in this paper is quite universal, we are testing it on (\u00b5 + \u03bb) EA1BS to solve the OneMax problem. This problem is well known in the EA community, recent achievements include [4], [11] with some sharp limits. We chose this problem for its simplicity and ability to compare our results with those that are already available."}, {"heading": "B. Selection function", "text": "Throughout the article, we analyze an elite recombination-driven EA (\u00b5 + \u03bb) using a variant of tournament selection. It is both easy to implement and analyze. As we recombine information between parents, we are interested in creating species pairs in the recombination pool, and the properties of the algorithm are derived from the construction of these pairs. Thus, it is obvious that better-fitting species have a higher chance of getting into the pool, so we can expect that the proportion of \u03b1 species in the pool is higher than in the population.1-bit swap genetic operatorWe apply the 1-bit swap operator, which has proven useful in solving a large number of test problems in [1] and which has been extensively analyzed in [12], [13] to surpass the established RLS algorithm both theoretically and numerically. Another advantage of the current search point is that we cannot directly compare it with 1BS, as both search points are too local."}, {"heading": "III. DEFINITIONS", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. Fitness levels partition", "text": "The basic approach to analyzing elite EA with a simple 1-bit mutation to solve unimodal binary-encoded EAs was introduced by Wegener in [14], which is based on fitness partitioning: on a series of binary strings {0, 1} n size 2n of a partition into a finite number of nonempty subsets A1, A2, \u00b7 \u00b7 \u00b7, Am is defined by the arrangement of A1 - A2 - \u00b7 - Am s.t., with all a-Am being the global optimum. This approach allows the definition and derivation of the lower success limit of the transition between states, si (a) = P (Ai + 1 | Ai) and the upper limit of the expected convergence time of the algorithm, the expected first meeting time of the best fitness level E (Xf) \u2264 s \u2212 11 + s \u2212 12. + s \u2212 1m \u2212 1. This idea can be extended to the situation if we do not apply negative weights w (f) (see function [2], and we derive from it [) the upper limit (and] function [14] (to determine)."}, {"heading": "B. Elitism Levels Partition", "text": "In this article, we extend this approach to a population-based elite algorithm, but instead of tracing the excess of fitness levels, we do the same to the levels of elitism, i.e. the number of elite species in the population.We focus on species that can either evolve into the current best within one iteration or are already best. Therefore, the population is divided into three disjunct subgroups: \u03b1: currently best species 1: species with the next-best fitness\u03b2 \u2212 1: the rest of the population that does not interact over 1 generationsSince 1BS exchanges exactly 1 bit between two parents, this division, combined with the assumptions made above, allows the construction of a very precise model, since the value of \u03b1 cannot \"jump\" more than 1 fitness level and only \u03b1 species can produce a better population, but only \u03b21 species can evolve into \u03b1 and alter the probability of evolution."}, {"heading": "C. \u03b1-levels subpartition", "text": "This additional subdivision is necessary for functions with plateaus, for which we use the potential functions mentioned above, and the need for this becomes clear in the next section when comparing the probabilities of the development of elite species on two types of functions. In addition to the subdivision of elite levels, we must subdivide the alpha level for functions with plateaus. In slight notation abuse throughout the rest of this article, we call A the set of chromosomes in the population with the highest fitness. In addition, we assign to each elite species an additional auxiliary function, Vm, which tracks progress to the next level by counting the number of 1-bits in the fitness level: A0 - A1 -.... - To distinguish between elite species with the same fitness, we assign to each elite species an additional auxiliary function, Vm, which tracks progress to the next level by counting the number of 1-bits in the fitness level: A0 - A1 -."}, {"heading": "IV. ELITISM LEVELS TRAVERSE MECHANISM FOR UPPER BOUNDS", "text": "In this section we present the main result of the article on a general function, which is later confirmed by further application of the OneMax test function. We are interested in the upper limits of the optimization time (to explain the Landau notation see e.g. Chapter 9 in [16]).The functioning of the elitism level traverse mechanism can be illustrated by an example from immunology. There is a population of species size N, which is susceptible to M types of infections that are mutually exclusive, i.e. a species cannot be infected by more than one infection. The size of each group of infected species cannot be larger than mj. We note that there is an event that there is 1 \u2264 r of infected species of type j, of which produces exactly one infected progeny that destroys a healthy member of the population. As the groups of infected species are mutually exclusive, we get the probability that any of the infected species will add exactly one infected offspring: M)."}, {"heading": "A. Functions without plateaus", "text": "For these types of unimodal functions (e.g. OneMax) it is intuitively easier to add an elite offspring and thus reduce the optimization time, but we must rigorously show them. The likelihood of selecting a couple with an alpha parent can be limited by P f1 \u2265 \u03bc1, where \"1\" is the likelihood of selecting a non-elite species paired with the elite parent. Likewise, the likelihood of rotating bits is limited by P f1. Thus, the likelihood of an event involving pairs with elite-specific (Ef1j) (Ef1j) \u2265 (\u03bb 21) = Ef1j = Ef1j = Ef1j = Ef1j = Ef1j = Ef1j = Ef1j = Ef1j = Ef1j = Ef1j = Ef1j = Ef1j = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1b = Ef1 = Ef1b = Ef1b = En = Ef1b = Ef1b = Ef1b = En = Ef1b = Ef1b = En = Ef1b = Ef1b = En = En = Ef1b = En = Ef1b = En = Ef1b = En = En = Ef1b = E1"}, {"heading": "B. Functions with plateaus", "text": "As noted in this analysis, algorithms with well-chosen population size are more similar to, and the best individuals develop along the same path as (1 + 1) EA. The difference between (1 + 1) and (1 + 1) lies in the cost of the traversing plateau. < (1) For this type of function, the length of the plateau begins with an equal number of 1's and 0's evenly distributed, so the fitness of the best species is the same at the beginning of the run. To track progress between jumps in fitness values, we use OneMax as an auxiliary function (roughly along the lines of utilizing potential or remote functions), see e.g. [7] that the sum of bits in the plateau. The tricky part in this analysis is that the selection is based on the fitness of the string rather than on the auxiliary function, but on the progress toward fitness."}, {"heading": "A. Simple upper bound", "text": "Of these four cases, we begin the analysis with the first two, the main reason being that the other two cases contain a cubic function that is rather complicated to solve (see next subsection). In cases E1, E2, we obtain the following probabilities of success: P (E1) = 2 (E1) 2 (k) (\u03b21\u00b5 (1 \u2212 \u00b5) \u00b7 \u03b21 (1 \u2212 \u00b5) = \u03b1\u03b21\u03bb (\u00b5) 1 (k) \u00b53P (E2) = (\u03bb 2 1) 2 (k) (\u03b21\u00b5 (1 \u2212 \u00b5))) 2 = 2 (k) 2 (k) 2 (k) 2 (k) 2 (k) The probability of at least 1 of these events is P (S\u03b1, k) + P (E2) = 21 (k) (k) \u03b1\u03b21\u03bb (\u00b5) 3 + 2 (k) 2 (k) 2 (k) 2 \u2212 p) and, since P (S) is the upper (\u00b5k) -1 (k), the upper (k) -1 (k) is the upper (k) -1 (4) \u00b5k + 2 k (k) \u2212 p (2) \u2212 p) \u2212 p (2 k) \u2212 p (2 k) \u2212 p (\u00b5) \u2212 p (2) \u2212 p \u2212 p \u2212 p)."}, {"heading": "B. Refined upper bound", "text": "If we add the other two cases to obtain a sharper upper limit for the optimisation time, we set \u03b21 = 1: P (E3) = 2 (\u03bb 2 1) \u03b1 \u00b5 \u00b7 (1 \u2212 \u03b1 + \u03b21 \u00b5) 2 3 (k) \u2248 \u03bb\u03b1 \u00b5 (1 \u2212 \u03b1) 23 (k) P (E4) = 2 (\u03bb 2 1) \u03b21\u00b5 (1 \u2212 \u03b1) (1 \u2212 \u03b1 + \u03b21 \u00b5) 24 (k) \u03b24 (k) \u03b24 (k) 34 (k) The probability of developing another elite species is (P (E1), P (E2) the same as in the previous derivative): P (S\u03b1, k) = P (E1) + P (E2) + P (E3) + P (E4) + P (E4) and the expected time until an elite species (E4) occurs is the expected time until an elite string in the whole is formed: ET (E2), k \u00b2 + 2k = \u00b5k = \u00b5b = 4112b = \u00b5b = 4113p."}, {"heading": "C. Generations vs Function evaluations", "text": "Tournament selection has the property that you do not have to evaluate every type, but we have to do 2\u03bb evaluations (since two types compete for 1 place in the recombination pool, i.e. the number of evaluations per generation is O (\u03bb). In relation to the number of function evaluations, the rough limit is O (\u00b5\u03bbn log n) and the refined O (\u00b5n log n). If \u00b5 = \u03bb = O (1), this is reduced to the known result O (n log n) for the OneMax function. The \u03bb term in the denominator means that for the parallel running algorithm, the increase in the recombination size improves performance."}, {"heading": "D. Comparison to earlier results", "text": "The closest comparison we can make is to (N + N) EA with mutation and tournament selection function in [10], O (nN logN + n log n) if we specify the number of function evaluations (Proposition 4). By setting N = O (1) = c \u2265 1, this limit becomes n log n + O (n), which is greater than only O (n log n). If we set \u00b5 = N = O (\u221a log n) or O (log nlog n) instead, the result in [10] is sharper than in this paper. For basic totalities (\u221a nlog n), the limit in this article gets sharper again, e.g. for \u00b5 = N = O (\u221a n) it is cn 32 log n \u2212 n 3 2, and in [10] it is n 32 log n 2 + O (n log n)."}, {"heading": "VI. DISCUSSION", "text": "We introduced a new tool for analyzing population-based elite EAs, elitism-level traverse mechanism, which we use to derive a new upper limit for (\u00b5 + \u03bb) EAs with a recombination operator and a variant of tournament selection that solves the OneMax problem. We determined and proved the lower limit in terms of the probability that exactly 1 new, currently elite species will evolve, which helped us to reach the upper limit for the expected optimization time.We showed that for a function with fitness plates, it is more difficult to add a super elite offspring to the population than an elite offspring for a function without plateaus. This means that the very large number of super elite species in the population in the previous case is more important than the number of elite species in the latter. It may seem from the derived equations that the population generally deteriorates performance (since \u00b5 is included in the numerator), but the small size of the population is not essential for the cost of the radio rating."}, {"heading": "VII. CONCLUSIONS AND FUTURE WORK", "text": "There are many reasons to use the population in the evolutionary calculation, rather than just (1 + 1) or (1, 1) algorithms that include a higher diversity and a shorter evolutionary path (see [10]). We intend to expand the results in this article by considering the following extensions of the top boundary tool: 1) Analysis of functions with fitness plateaus. Obviously, both large populations and a large number of elite parents are crucial for functions with fitness plateaus (e.g. Royal roads) compared to functions without one, so we will extend our findings to these functions as well. 2) Typical runtime analysis. It is fairly obvious that the actual number of elite types is growing at a certain rate that realistically lies between the upper and lower boundaries. We need to find an approximation of the expected number of species added to the population per generation and thus estimate the typical runtime. 3) Elite analysis. In this article we never really consider the number of elite types stored at the rate of the elitism, i.e. the number of species created in the population only consists of the actual number of the elitism."}, {"heading": "APPENDIX A PROOF OF EQUATIONS 1-2", "text": "The main idea and logic of the lower limit on the probability of the addition of an elite descendant and the resulting upper limit on the runtime is in Section IV. At this point we will introduce the derivation of this limit. \u2212 sel \u2212 sel \u2212 sel = Addition of an elite descendant and the resulting upper limit on the runtime. \u2212 sel \u2212 sel \u2212 sel \u2212 sel = Addition of any subset (i.e. it is not to be confused with a trivial (uppermost) limit of the form k (k) pk (1 \u2212 p) k \u2212 p (e) p r (n \u2212 p) n \u2212 r (1 \u2212 p) n \u2212 r \u2212 r = (1) Pselective P r = (r1) Pselective P r = (1 \u2212 p) selective P (1 \u2212 p), (1 \u2212 p) selective P (1 \u2212 p), (1 \u2212 p) selective P (1 \u2212 n), (1 \u2212 p) selective Pr (1 \u2212 p), (1 \u2212 p) selective P (1 \u2212 n) select Pr (1 \u2212 p), (1 \u2212 p) selective P (1 \u2212 n) select Pr (1 \u2212 p (1 \u2212 p), p (1 \u2212 p) selective P (1 \u2212 p), p (1) selective P (1 \u2212 p (1 \u2212 n) select p (1 \u2212 p (1 \u2212 p)."}, {"heading": "APPENDIX B SOLUTION OF EQUATION 5", "text": "We have a quadratic equation (p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p = p p = p = p p p p = p = p p p p = p = p = p = p"}, {"heading": "APPENDIX C SOLUTION TO EQUATION 9", "text": "We need a solution for the cubic equation of the formS (\u00b5, k) = \u03b2 \u03b2 P3 (\u03b1) = \u03b4\u00b5 \u2211 \u03b1 = 11\u03b13 + b \u2032 2\u03b12 + b \u2032 1\u03b1 + b0whereb \u2032 2 = 2 (k) \u2212 4\u00b523 (k) \u2212 2\u00b51 (k) \u2212 6\u00b54 (k) 2 (k) \u2212 3 (k) \u2212 4 (k) \u2212 2 (k) \u2212 1 (k) 2 (k) \u2212 3 (k) \u2212 3 (k) \u2212 3 (k) 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 2 (k) 2 (k)) (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) (k) (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) (k) \u2212 4 (k) (k) \u2212 4 (k) (k) \u2212 2 (k) \u2212 4 (k) \u2212 4 (k) \u2212 2 (k) \u2212 2 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k) \u2212 4 (k (k) \u2212 4 (k) \u2212 4 ("}, {"heading": "APPENDIX D MATHEMATICAL EXPRESSIONS", "text": "Throughout the article, a number of important mathematical expressions are used, some of which we present here: H (n) = n \u2212 1 \u2211 k = 01 n \u2212 k = n \u2212 1 \u2211 k = 01 k \u2012 n \u2212 10dxn \u2212 x = log n < log n + 1Digamma function: 0 (n) = log n + O (1n) For 0 (n) with n \u2192 \u2212 \u221e, we use the largest term of the Taylor series for asymptotic expansion: 0 (n) \u2248 cot (\u03c0n) + O (1n) The values for cot (\u03c0n) for integer n, as in this article, are infinite. Therefore, we have selected some constants for expressions for S1 (n, k) and S2 (n, k), e.g. \u2212 (1 \u2212 \u221a 2), 2 \u2212 \u221a 2, s.t. The resulting values are constants. Since n is arbitrarily large, we can find n that the difference between them is negative, so we get the term (O)."}], "references": [], "referenceMentions": [], "year": 2013, "abstractText": "In this article we present an Elitism Levels Traverse Mech-<lb>anism that we designed to find bounds on population-based Evolutionary<lb>Algorithms solving unimodal functions. We prove its efficiency theoreti-<lb>cally and test it on OneMax function deriving bounds c\u03bcn logn\u2212O(\u03bcn).<lb>This analysis can be generalized to any similar algorithm using variants<lb>of elitist selection and genetic operators that flip or swap only 1 bit in<lb>each string.<lb>", "creator": "LaTeX with hyperref package"}}}