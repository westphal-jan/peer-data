{"id": "1203.1095", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Mar-2012", "title": "Search Combinators", "abstract": "The ability to model search in a constraint solver can be an essential asset for solving combinatorial problems. However, existing infrastructure for defining search heuristics is often inadequate. Either modeling capabilities are extremely limited or users are faced with a general-purpose programming language whose features are not tailored towards writing search heuristics. As a result, major improvements in performance may remain unexplored.", "histories": [["v1", "Tue, 6 Mar 2012 03:59:34 GMT  (287kb,D)", "http://arxiv.org/abs/1203.1095v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["tom schrijvers", "guido tack", "pieter wuille", "horst samulowitz", "peter j stuckey"], "accepted": false, "id": "1203.1095"}, "pdf": {"name": "1203.1095.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["tom.schrijvers@ugent.be", "pieter.wuille@ugent.be", "guido.tack@monash.edu", "pieter.wuille@cs.kuleuven.be", "samulowitz@us.ibm.com", "pjs@cs.mu.oz.au"], "sections": [{"heading": null, "text": "This article introduces search combinators, a lightweight and solution-independent method that builds a bridge between a conceptually simple modeling language for search (at a high level, functional and, of course, compositional) and an efficient implementation (at a low level, mandatory and highly non-modular). By enabling the user to define application-related search strategies from a small group of primitives, search combinators effectively provide the user with a rich domain-specific language (DSL) for modeling the search. It is noteworthy that this DSL incurs low implementation costs for the developer of a limitation solution. The article discusses two modular implementation approaches and shows by empirical evaluation that search combinators can implement a number number without overhead in comparison with a domestic, direct implementation in a limitation solution. The number is number number E-mail number, number E-mail number Gmail number, number Gmail number E-mail number, number E-mail number E-mail number, number E-mail number."}, {"heading": "1 Introduction", "text": "This year, more than ever before in the history of a country in which it is a country in which it is a country in which it is a country in which it is a country, a country in which it is a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country and a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country and a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a country, a"}, {"heading": "2 High-Level Search Language", "text": "This year, as never before in the history of the country in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is not a country, but in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country and in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country and in which it is a country, in which it is a country, a country, in which is a country, in which it is a country, in which it is a country, in which it is a country, in which is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country, in which it is a country and country, in which it is a country, in which it is a country, in which is a country, a country, in which is a country, a country"}, {"heading": "3 Modular Combinator Design", "text": "This year is the highest in the history of the country."}, {"heading": "4 Modular Combinator Implementation", "text": "This year, it is as far as ever in the history of the city, where it is as far as never before."}, {"heading": "5 Experiments", "text": "This year it is more than ever before."}, {"heading": "6 Related Work", "text": "This section examines and discusses previous work closely related to search combinators as presented in this article."}, {"heading": "6.1 MCP", "text": "In fact, most people are able to identify themselves and understand how they have behaved. (...) Most people in the world do not know what they should do. (...) They do not know what they should do. (...) They do not know what they should do. (...) They do not know what they should do. (...) They do not know what they should do. (...) They do not know what they should do. (...) They do not know what they should do. (...) \"(...)\" (...) \"(...)\" (... \")\" (... \")\" (... \")\" (... \")\" (... \")\" (... \")\" (... \")\" (... \")\" (... \")\" (... \")\" (... \") (\") (... \"(\") (\") (\") (... \"(\") (... \") (\") (\") (\") () () () () () ()."}, {"heading": "7 Conclusion", "text": "In order to make this approach useful in practice, we have designed an architecture where the modularity of the language matches the modularity of the implementation, which relieves system developers of high implementation costs and, as our experiments show, does not result in a runtime penalty. For future work, the parallel search on multi-core hardware fits perfectly into our combinator framework. We have already conducted a number of preliminary experiments and will continue to explore the benefits of search combinators in a parallel environment. In addition, we will explore potential optimizations (such as the short circuit of exh _ once from Section 5) and different compilation strategies (e.g. the combination of the static and dynamic approaches from Section 4), as well as the use of search combinators in other problem areas such as Mixed Integrated Programming (MIP) and A \u00b2, where search strategies have a major impact on performance and no dominant standard search exists."}], "references": [{"title": "CP and IP approaches to cancer radiotherapy delivery optimization", "author": ["D. Baatar", "N. Boland", "S. Brand", "P.J. Stuckey"], "venue": "Constraints 16(2), 173\u2013194", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2011}, {"title": "Boosting systematic search by weighting constraints", "author": ["F. Boussemart", "F. Hemery", "C. Lecoutre", "L. Sais"], "venue": "ECAI\u201904, pp. 146\u2013150", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2004}, {"title": "Boosting systematic search by weighting constraints", "author": ["F. Boussemart", "F. Hemery", "C. Lecoutre", "L. Sais"], "venue": "R.L. de M\u00e1ntaras, L. Saitta (eds.) ECAI, pp. 146\u2013150. IOS Press", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2004}, {"title": "A denotational semantics of inheritance", "author": ["W.R. Cook"], "venue": "Ph.D. thesis, Brown University", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1989}, {"title": "A core calculus for Scala type checking", "author": ["V. Cremet", "F. Garillot", "S. Lenglet", "M. Odersky"], "venue": "R. Kralovic, P. Urzyczyn (eds.) MFCS, LNCS, vol. 4162, pp. 1\u201323. Springer, Heidelberg", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2006}, {"title": "Autonomous Search", "author": ["Y. Hamadi", "E. Monfroy", "Saubion", "F. (eds."], "venue": "Springer-Verlag", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2012}, {"title": "Limited discrepancy search", "author": ["W.D. Harvey", "M.L. Ginsberg"], "venue": "IJCAI, pp. 607\u2013613", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1995}, {"title": "Aspect-oriented programming", "author": ["G. Kiczales", "J. Lamping", "A. Menhdhekar", "C. Maeda", "C. Lopes", "J. Loingtier", "J. Irwin"], "venue": "ECOOP\u201997, pp. 220\u2013242", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1997}, {"title": "Depth-first iterative-deepening: an optimal admissible tree search", "author": ["R.E. Korf"], "venue": "Artif. Intell. 27, 97\u2013109", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1985}, {"title": "SALSA: A language for search algorithms", "author": ["F. Laburthe", "Y. Caseau"], "venue": "Constraints 7(3), 255\u2013288", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2002}, {"title": "The design of the Zinc modelling language", "author": ["K. Marriott", "N. Nethercote", "R. Rafeh", "P. Stuckey", "M. Garcia de la Banda", "M. Wallace"], "venue": "Constraints 13(3), 229\u2013267", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2008}, {"title": "MiniZinc: Towards a standard CP modelling language", "author": ["N. Nethercote", "P.J. Stuckey", "R. Becket", "S. Brand", "G.J. Duck", "G. Tack"], "venue": "C. Bessiere (ed.) CP, LNCS, vol. 4741, pp. 529\u2013543. Springer, Heidelberg", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2007}, {"title": "Search procedures and parallelism in constraint programming", "author": ["L. Perron"], "venue": "J. Jaffar (ed.) CP, LNCS, vol. 1713, pp. 346\u2013360. Springer, Heidelberg", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1999}, {"title": "A C++ implementation of CLP", "author": ["J.F. Puget"], "venue": "Proceedings of the Second Singapore International Conference on Intelligent Systems (SPICIS), pp. B256\u2013B261", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1994}, {"title": "Adding search to zinc", "author": ["R. Rafeh", "K. Marriott", "M.G. de la Banda", "N. Nethercote", "M. Wallace"], "venue": "P.J. Stuckey (ed.) CP, LNCS, vol. 5202, pp. 624\u2013629. Springer", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2008}, {"title": "Impact-based search strategies for constraint programming", "author": ["P. Refalo"], "venue": "M. Wallace (ed.) CP, LNCS, vol. 3258, pp. 557\u2013571. Springer, Heidelberg", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2004}, {"title": "Towards a lightweight standard search language", "author": ["H. Samulowitz", "G. Tack", "J. Fischer", "M. Wallace", "P. Stuckey"], "venue": "ModRef", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2010}, {"title": "Monadic constraint programming", "author": ["T. Schrijvers", "P.J. Stuckey", "P. Wadler"], "venue": "Journal of Functional Programming 19(6), 663\u2013697", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2009}, {"title": "Search combinators", "author": ["T. Schrijvers", "G. Tack", "P. Wuille", "H. Samulowitz", "P.J. Stuckey"], "venue": "J.H. Lee (ed.) CP\u201911, LNCS, vol. 6876, pp. 774\u2013788. Springer", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2011}, {"title": "Programming constraint inference engines", "author": ["C. Schulte"], "venue": "G. Smolka (ed.) CP, LNCS, vol. 1330, pp. 519\u2013533. Springer, Heidelberg", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1997}, {"title": "Gecode, the generic constraint development environment", "author": ["C Schulte"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2009}, {"title": "Dichotomic search protocols for constrained optimization", "author": ["M. Sellmann", "S. Kadioglu"], "venue": "P.J. Stuckey (ed.) CP, LNCS, vol. 5202, pp. 251\u2013265. Springer, Heidelberg", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2008}, {"title": "The Oz programming model", "author": ["G. Smolka"], "venue": "J. van Leeuwen (ed.) Computer Science Today, LNCS, vol. 1000, pp. 324\u2013343. Springer, Heidelberg", "citeRegEx": "26", "shortCiteRegEx": null, "year": 1995}, {"title": "Constraint-Based Local Search", "author": ["P. Van Hentenryck", "L. Michel"], "venue": "MIT Press", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2005}, {"title": "Nondeterministic control for hybrid search", "author": ["P. Van Hentenryck", "L. Michel"], "venue": "Constraints 11(4), 353\u2013373", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2006}, {"title": "Search and strategies in OPL", "author": ["P. Van Hentenryck", "L. Perron", "J.F. Puget"], "venue": "ACM TOCL 1(2), 285\u2013315", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2000}], "referenceMentions": [{"referenceID": 10, "context": "A range of high-level modeling languages, such as Zinc [13], OPL [29] or Comet [27], enable quick development and exploration of problem models.", "startOffset": 55, "endOffset": 59}, {"referenceID": 25, "context": "A range of high-level modeling languages, such as Zinc [13], OPL [29] or Comet [27], enable quick development and exploration of problem models.", "startOffset": 65, "endOffset": 69}, {"referenceID": 23, "context": "A range of high-level modeling languages, such as Zinc [13], OPL [29] or Comet [27], enable quick development and exploration of problem models.", "startOffset": 79, "endOffset": 83}, {"referenceID": 11, "context": "MiniZinc [14], Comet [27], Gecode [23], or ECLiPSe [7] provide a small set of predefined heuristics \u201coff the shelf\u201d.", "startOffset": 9, "endOffset": 13}, {"referenceID": 23, "context": "MiniZinc [14], Comet [27], Gecode [23], or ECLiPSe [7] provide a small set of predefined heuristics \u201coff the shelf\u201d.", "startOffset": 21, "endOffset": 25}, {"referenceID": 20, "context": "MiniZinc [14], Comet [27], Gecode [23], or ECLiPSe [7] provide a small set of predefined heuristics \u201coff the shelf\u201d.", "startOffset": 34, "endOffset": 38}, {"referenceID": 3, "context": "We overcome the modularity challenge by implementing the primitives of our search language as mixin components [4].", "startOffset": 111, "endOffset": 114}, {"referenceID": 7, "context": "As in Aspect-Oriented Programming [10], mixin components neatly encapsulate the cross-cutting behavior of primitive search concepts, which are highly entangled in conventional approaches.", "startOffset": 34, "endOffset": 38}, {"referenceID": 18, "context": "This article is an extended version of a paper [21] that appeared in the proceedings of the 17th International Conference on Principles and Practice of Constraint Programming (CP) 2011.", "startOffset": 47, "endOffset": 51}, {"referenceID": 16, "context": "That paper further developed the ideas laid out in our earlier paper [19], which was presented at ModRef 2010.", "startOffset": 69, "endOffset": 73}, {"referenceID": 11, "context": "The concrete syntax we chose for presentation uses simple nested terms, which makes it compatible with the annotation language of MiniZinc [14].", "startOffset": 139, "endOffset": 143}, {"referenceID": 1, "context": "\u2013 firstfail: select the variable with the smallest current domain, \u2013 smallest: select the variable which can take the smallest possible value, \u2013 domwdeg [2]: select the variable with smallest ratio of size of current domain and number of failures the variable has been involved in, and \u2013 impact [18]: select the variable that will (based on past experience) reduce the raw search space of the problem the most.", "startOffset": 153, "endOffset": 156}, {"referenceID": 15, "context": "\u2013 firstfail: select the variable with the smallest current domain, \u2013 smallest: select the variable which can take the smallest possible value, \u2013 domwdeg [2]: select the variable with smallest ratio of size of current domain and number of failures the variable has been involved in, and \u2013 impact [18]: select the variable that will (based on past experience) reduce the raw search space of the problem the most.", "startOffset": 295, "endOffset": 299}, {"referenceID": 15, "context": "This heuristic can for example be used to initialize the widely applied Impact heuristic [18].", "startOffset": 89, "endOffset": 93}, {"referenceID": 0, "context": "Radiotherapy treatment planning: The following search heuristic can be used to solve radiotherapy treatment planning problems [1].", "startOffset": 126, "endOffset": 129}, {"referenceID": 6, "context": "Limited discrepancy search [9] with an upper limit of l discrepancies for an underlying search s.", "startOffset": 27, "endOffset": 30}, {"referenceID": 6, "context": "The original LDS [9] visits the nodes in a specific order.", "startOffset": 17, "endOffset": 20}, {"referenceID": 6, "context": "The following is a combination of branch-and-bound and limited discrepancy search for solving job shop scheduling problems, as described in [9].", "startOffset": 140, "endOffset": 143}, {"referenceID": 8, "context": "Iterative deepening [11] for an underlying search s is a particular instance of the more general pattern of restarting with an updated bound, which we have already seen in the geom_restart example.", "startOffset": 20, "endOffset": 24}, {"referenceID": 21, "context": "Dichotomic search [24] solves an optimization problem by repeatedly partitioning the interval in which the possible optimal solution can lie.", "startOffset": 18, "endOffset": 22}, {"referenceID": 12, "context": ", for solvers based on trailing, recomputation techniques [15] can be used.", "startOffset": 58, "endOffset": 62}, {"referenceID": 3, "context": "For the delegation mechanism from one object to another, we explicitly encode a form of dynamic inheritance called open recursion or mixin inheritance [4].", "startOffset": 151, "endOffset": 154}, {"referenceID": 20, "context": "The C++ library currently builds on top of the Gecode constraint solver [23].", "startOffset": 72, "endOffset": 76}, {"referenceID": 4, "context": "A compromise between the above two approaches, itself static, is to employ the built-in mixin mechanism (also called traits) available in object-oriented languages such as Scala [6] to compose combinators.", "startOffset": 178, "endOffset": 181}, {"referenceID": 17, "context": "This work directly extends our earlier work on Monadic Constraint Programming (MCP) [20].", "startOffset": 84, "endOffset": 88}, {"referenceID": 13, "context": "IBM ILOG CP Optimizer [5] supports Prolog-style goals in C++ [16], and like Prolog goals, these do not support cross-cutting.", "startOffset": 61, "endOffset": 65}, {"referenceID": 23, "context": "The Comet [27] system features fully programmable search [28], built upon the basic concept of continuations, which make it easy to capture the state of the solver and write nondeterministic code.", "startOffset": 10, "endOffset": 14}, {"referenceID": 24, "context": "The Comet [27] system features fully programmable search [28], built upon the basic concept of continuations, which make it easy to capture the state of the solver and write nondeterministic code.", "startOffset": 57, "endOffset": 61}, {"referenceID": 9, "context": "The Salsa [12] language is an imperative domain-specific language for implementing search algorithms on top of constraint solvers.", "startOffset": 10, "endOffset": 14}, {"referenceID": 22, "context": "Oz [26] was the first language to truly separate the definition of the constraint model from the exploration strategy [22].", "startOffset": 3, "endOffset": 7}, {"referenceID": 19, "context": "Oz [26] was the first language to truly separate the definition of the constraint model from the exploration strategy [22].", "startOffset": 118, "endOffset": 122}, {"referenceID": 10, "context": "Zinc/MiniZinc [13,14] lets the user specify search in its annotation language.", "startOffset": 14, "endOffset": 21}, {"referenceID": 11, "context": "Zinc/MiniZinc [13,14] lets the user specify search in its annotation language.", "startOffset": 14, "endOffset": 21}, {"referenceID": 16, "context": "There is a proposal for a more expressive search language for MiniZinc [19], but it is limited to basic variable ordering and domain splitting strategies.", "startOffset": 71, "endOffset": 75}, {"referenceID": 14, "context": "For Zinc, a language extension is available for implementing variable selection and domain splitting [17] but again it does not address more than basic search.", "startOffset": 101, "endOffset": 105}, {"referenceID": 5, "context": "Autonomous search (AS) [8] addresses the challenge of providing complex applicationtailored search heuristics in a different way.", "startOffset": 23, "endOffset": 26}, {"referenceID": 15, "context": "Wellknown instances of this approach are Impact Based Search [18] or the weighted degree heuristic [3].", "startOffset": 61, "endOffset": 65}, {"referenceID": 2, "context": "Wellknown instances of this approach are Impact Based Search [18] or the weighted degree heuristic [3].", "startOffset": 99, "endOffset": 102}], "year": 2012, "abstractText": "The ability to model search in a constraint solver can be an essential asset for solving combinatorial problems. However, existing infrastructure for defining search heuristics is often inadequate. Either modeling capabilities are extremely limited or users are faced with a general-purpose programming language whose features are not tailored towards writing search heuristics. As a result, major improvements in performance may remain unexplored. This article introduces search combinators, a lightweight and solver-independent method that bridges the gap between a conceptually simple modeling language for search (highlevel, functional and naturally compositional) and an efficient implementation (low-level, imperative and highly non-modular). By allowing the user to define application-tailored search strategies from a small set of primitives, search combinators effectively provide a rich domain-specific language (DSL) for modeling search to the user. Remarkably, this DSL comes at a low implementation cost to the developer of a constraint solver. The article discusses two modular implementation approaches and shows, by empirical evaluation, that search combinators can be implemented without overhead compared to a native, direct implementation in a constraint solver. Tom Schrijvers \u00b7 Pieter Wuille Universiteit Gent, Belgium E-mail: {tom.schrijvers,pieter.wuille}@ugent.be Guido Tack Monash University, Victoria, Australia E-mail: guido.tack@monash.edu Pieter Wuille Katholieke Universiteit Leuven, Belgium E-mail: pieter.wuille@cs.kuleuven.be Horst Samulowitz IBM Research, New York, USA E-mail: samulowitz@us.ibm.com Peter J. Stuckey National ICT Australia (NICTA) and University of Melbourne, Victoria, Australia E-mail: pjs@cs.mu.oz.au ar X iv :1 20 3. 10 95 v1 [ cs .A I] 6 M ar 2 01 2 2 Tom Schrijvers et al.", "creator": "LaTeX with hyperref package"}}}