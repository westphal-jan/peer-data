{"id": "1204.0140", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-Mar-2012", "title": "Roget's Thesaurus as a Lexical Resource for Natural Language Processing", "abstract": "WordNet proved that it is possible to construct a large-scale electronic lexical database on the principles of lexical semantics. It has been accepted and used extensively by computational linguists ever since it was released. Inspired by WordNet's success, we propose as an alternative a similar resource, based on the 1987 Penguin edition of Roget's Thesaurus of English Words and Phrases.", "histories": [["v1", "Sat, 31 Mar 2012 21:53:56 GMT  (1512kb)", "http://arxiv.org/abs/1204.0140v1", "Thesis submitted to the Faculty of Graduate and Postdoctoral Studies in partial fulfillment of the requirements for the degree of Master of Computer Science July, 2003. Ottawa-Carleton Institute for Computer Science, School of Information Technology and Engineering, University of Ottawa, Ottawa, Ontario, Canada"]], "COMMENTS": "Thesis submitted to the Faculty of Graduate and Postdoctoral Studies in partial fulfillment of the requirements for the degree of Master of Computer Science July, 2003. Ottawa-Carleton Institute for Computer Science, School of Information Technology and Engineering, University of Ottawa, Ottawa, Ontario, Canada", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["mario jarmasz"], "accepted": false, "id": "1204.0140"}, "pdf": {"name": "1204.0140.pdf", "metadata": {"source": "CRF", "title": "ROGET\u2019S THESAURUS AS A LEXICAL RESOURCE FOR NATURAL LANGUAGE PROCESSING", "authors": ["Mario Jarmasz"], "emails": [], "sections": [{"heading": null, "text": "WordNet has proven that it is possible to construct a large-scale electronic lexical database on the principles of lexical semantics, which has been accepted and widely used by computer linguists since its publication. Some of its applications include retrieval of information, language generation, questioning, text categorization, word processing, and word ambiguities. Inspired by the success of WordNet, we propose as an alternative a similar resource based on the 1987 Penguin edition of English words and phrases. Peter Mark Roget published his first thesaurus over 150 years ago, and countless authors, speakers, and students of the English language have used it. Computational Linguists have used Roget's for almost 50 years in natural language processing."}, {"heading": "1 INTRODUCTION..............................................................................................................................................1", "text": "1.1 LEXICATION RESERVATIONS FOR NATURAL KNOWLEDGE BASE REQUIREMENTS FOR LEXTRONIC LEXICTRONIC KNOWLEDGE BASE REQUIREMENTS......"}, {"heading": "2 THE USE OF THESAURI IN NATURAL LANGUAGE PROCESSING ...................................................7", "text": "In recent years, it has become clear that there are problems that cannot be solved, not only in Europe, but also in the United States and around the world. In recent years, the situation in the United States has deteriorated dramatically, and it has become clear that the global economy is capable of dealing with global imbalances, \"he said in an interview with The New York Times.\" I do not believe that we will be able to deal with global imbalances, \"he said in an interview with The New York Times, adding,\" I do not believe that we will be able to deal with global imbalances. \""}, {"heading": "5 AUTOMATING THE CONSTRUCTION OF LEXICAL CHAINS USING ROGET\u2019S ...........................54", "text}, {"heading": "7 SUMMARY, DISCUSSION, AND FUTURE WORK ..................................................................................78", "textnown origins in the ELAI experiments. 80 7.2.3 Use of the ELAI for NLP experiments."}, {"heading": "8 REFERENCES.................................................................................................................................................84", "text": "In fact, the crisis is a crisis that will affect not only the euro area, but also the world economy and the world economy. (...) Indeed, the euro zone is capable of stabilising the world economy. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis. (...) The European Union is capable of stabilising the world economic crisis (... (...) The European Union is capable of stabilising the world economic crisis (...). (... (...) The European Union is capable of stabilising the European Union is able to stabilising the world economic crisis (... (...). (...) (...) The European Union is capable of stabilising the European Union is capable of stabilising the world economic crisis (... (...). (...) (...) (...) (...) (...) (...) (...) (...) \"(...) (...) (...) (...)"}, {"heading": "1 Introduction", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "1.1 Lexical Resources for Natural Language Processing", "text": "Natural Language Processing (NLP) applications require access to a large number of words and phrases. Today, there are many ways to obtain large-format dictionaries: search terms on the Internet (Turney, 2001), use large corporations such as the Wall Street Journal or the British National Corpus, as well as information from machine-readable dictionaries (Wilks et al., 1996), or use electronic lexical databases such as WordNet (Fellbaum, 1998). Which of these methods is the best? Our intuition presented in this dissertation is that computational linguists should expand and computerize the work of lexicographers, professionals who take concrete decisions about words, their senses and how they should be arranged. Computer programmers have unimaginable ideas that they can do without linguists. To investigate this conjecture, I have implemented an alarming electronic lexical knowledge base based on the 1987 Penguin issue of Roesauget."}, {"heading": "1.2 Electronic Lexical Knowledge Bases", "text": "In fact, most people are able to decide for themselves what they want and what they want."}, {"heading": "1.4 Goals of this Thesis", "text": "I expect it to be an effective alternative to WordNet. To achieve this goal, Roget's thesaurus must first be computerized, evaluated, and applied to some interesting tasks; the quantitative and qualitative chapter 1. Introduction4evaluation is constantly using WordNet 1.7.1 as a benchmark; other, more cursory comparisons are made with other lexical resources; this treasure trove of the English language is used to create a new resource for computer linguists; the goal is to computerize the thesaurus: to create a machine-readable lexical knowledge base and to present the explicit and some of the implicit relationships between words. I have conducted experiments that use the system to measure the semantic similarity between words and the construction of lexical chains."}, {"heading": "1.5 Organization of the Thesis", "text": "The different versions of Roget's Thesaurus and WordNet require and receive special attention. Chapter 3 presents the details of the design and implementation of the ELKB. It explains all necessary steps to transform the Roget text files into a machine-readable format. The steps discuss the necessary functionality of such a system. The construction of the ELKB fulfills the first goal of this theory.Chapter 4 presents a measure of the semantic similarity between words and phrases using Roget's ELKB. It presents a semantic distance measurement and evaluates it with a few typical tests.I perform a comparison with WordNet-based measures and other statistical techniques. Chapter 5 presents an implementation of lexical chain construction with the Roget's ELKB's ELKB's. It discusses in detail each design decision and includes a comparison with lexical chains."}, {"heading": "1.5.1 Paper Map", "text": "Parts of the dissertation have already been the subject of essays: The use of thesauri in NLP 2.1-2.3.2, 2.4 Jarmasz and Szpakowicz (2001a), Jarmasz and Szpakowicz (2001b), Jarmasz and Szpakowicz (2001c) The Design of the ELKB 2.5, 3.1-3.4 Jarmasz and Szpakowicz (2001a), Jarmasz and Szpakowicz (2001b), Jarmasz and Szpakowicz (2001c) The Implementation of theELKB3.5, 7.2 Jarmasz and Szpakowicz (2001b), Jarmasz and Szpakowicz (2001b) Using Roget's to MeasureSemantic Similarity4 Jarmasz and Szpakowicz's and Szpakowicz (2001c), Jarmasz and Szpakowicz and Szpakowicz (2001c) and Szpakowicz (2001c)."}, {"heading": "2 The Use of Thesauri in Natural Language Processing", "text": "This chapter describes the way in which this field of research has used the two most famous thesaurs in NLP, Roget's and WordNet. It illustrates the history of both lexical resources, explains their conception and original purpose. I analyze some of the different versions of Roget's and explain the decision to use Penguin's Thesaurus of English Words and Phrases as the source for my ELAI. This chapter also shows how researchers have used Thesaurus and WordNet in NLP and discusses the trend towards merging lexical resources. Finally, I present the desideratum for an ELAI based on Rogets and outline its evaluation process."}, {"heading": "2.1 The Role of Thesauri in NLP", "text": "Ide and V\u00e9ronis (1998) explain that machine-readable dictionaries (MRDs) became a popular source of knowledge for language processing in the 1980s. Much research has focused on automatic knowledge extraction from MRDs to build large knowledge bases. Thesauri that use controlled vocabulary, such as the Medical Subject Headings Thesaurus (Medical Subject Headings, 1983), the Educational Resources Information Centre Thesaurus (Houston, 1984), and the IEE Inspec Thesaurus, which contains specialist literature in engineering related fields (Inspec Thesaurus, 1985), have proved effective in gathering information (Lesk, 1995). George Miller and his team have developed manually structured thesaurus Wordaurus, the only freely available lexical resource of its kind."}, {"heading": "2.2.1 The Many Versions of Roget\u2019s", "text": "In fact, it is the case that one is able to go in search of a solution that is able to find a solution, that is able to find a solution that is able to find a solution, that is able to find a solution, and that is able to find a solution that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution."}, {"heading": "2.4.1 Why Have People Used Roget\u2019s for NLP?", "text": "This chapter presents examples of NLP applications that used Roget's Thesaurus. What were the incentives? The structure based on the hierarchy of categories is very simple to compute and use, as demonstrated by Masterman (1957) and Sparck Jones (1964). No \"reverse engineering\" is required to access this grid of concepts, as it would need to be built from a dictionary. Rogets has a long tradition and is considered the best thesaurus. However, it is not mechanically traceable like WordNet. To quote McHale (1998): \"Rogets remains an attractive lexical resource for those who have access to it. Its vast, flat hierarchy is densely populated with nearly 200,000 words and phrases. The linkages between the words are also much richer than the theories of WordNet IS-A or HAS-PART."}, {"heading": "2.4.2 Why Do People Not Use Roget\u2019s More for NLP?", "text": "It is difficult to use a resource that is necessary for people. WordNet is simply easier than it is in other countries. (...) It is not the case that it is the case in other countries. (...) It is the case that it is the case in other countries. (...) It is not the case that it is the case in other countries. (...) It is the case that it is the case in other countries. (...) It is the case that it is the case in other countries. (...) It is the case that it is the case in other countries. (...) It is the case that it is the case in other countries. (...) It is the case that it is the case in other countries. (...) It is the case. (...) It is. (...) It is. (...) It is. (...) It is. (...) It is. (...) It is. (...) It is. (It is. (...) It is. (...) It is. It is. (... It is. It is. (...) It is. It is. It is. () It is. It is. (... It is. It is. () It is. It is. It is. It is. () It is. It is. () It is. It is. It is. (... It is. It is. It is. It is. It is. () It is. It is. It is. It is. It is. It is. (... It is. It is. It is. It is. It is. It is. It is. (... It is. It is. It is. It is."}, {"heading": "2.5 The Evaluation of a Thesaurus Designed for NLP", "text": "This year, the time has come for us to be able to live in a country where most people are able to flourish, and where most of them are able to flourish in order to flourish, and where they are able to flourish in order to flourish."}, {"heading": "3.5 The preparation of the Lexical Material", "text": "We have licensed the source of the 1987 Roget's from Pearson Education. It is divided into files with the text of the thesaurus and files with its index. The text file and index file, both about 4Chapter 3. The design and implementation of the ELKB30MB large, are marked with codes developed by the owners of the resource. Appendix E presents the steps to convert the codes into HTML-like tags. Appendix D lists the Perl scripts used to convert the lexical material into a format suitable for the ELKB together with the accompanying documentation. The ELKB is created only with the text file; the index is constructed with the words and phrases loaded into the knowledge base. This is a necessary step, since the included index file does not contain entries for all the words contained in the ELKB, along with the associated documentation."}, {"heading": "3.5.1 Errors and Exceptions in the Source Files", "text": "This year, it is as far as ever in the history of the city, where it is as far as never before."}, {"heading": "3.6.5 Morphological Transformations", "text": "This year, more than ever before in the history of the city, where it is so far that it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year, a year"}, {"heading": "4.1 The notions of synonymy and semantic similarity", "text": "People identify synonyms - strictly speaking synonyms (Edmonds and Hirst, 2002) - such as angels - cherub, without being able to define synonyms correctly; the term tends to be used loosely, even in the synonymically oriented form normally attributed to Leibniz (Fellbaum, 1998, p. 23). Miller and Charles have a formal, and linguistically rather imprecise, definition of synonyms that are normally synonymous: \"Two words that can be synonymous if they can be used in a statement without changing the meaning of the statement.\" There are no perfect synonyms that are related in themselves (Edmonyms attributed to Leibniz)."}, {"heading": "4.2 Edge counting as a metric for calculating synonymy", "text": "Roget's structure provides a simple mechanism for calculating the semantic distance using the edge counting. For two words, the system searches for the corresponding references in the index and then calculates all paths between the references using the taxonomy. The distance value corresponds to the number of edges in the shortest path, as indicated in Table 4.1. The distance between cat and lynx, for example, is 2. It can be calculated as follows: The word cat has the following references in rogets: 1) animal 365 ADJ. 2) cat 365 N. 3) cunning 698 ADJ. The word lynx has the following references in rogets: 1. cat 365 N. 2. eye 438 N. These six paths get: path between cat 365 N.) and lynx (cat 365 N.) [length = 465 feline S4x 465.]"}, {"heading": "366] \u2190 365. Animality. Animal \u2190 N. \u2190 cat \u2190 lynx", "text": "Path between cat (cunning 698 ADJ.) and lynx (eye 438 N.) [Length = 16] Cat \u2192 cunning \u2192 ADJ. \u2192 698. Cunning \u2192 [698, 699] \u2192 Complex \u2192 Section three: Volunteering \u2192 Class six: Will: Individual Will \u2192 T \u2190 Class three: Matter \u2190 Section three: Organic Matter \u2190 Sensation \u2190 [438,"}, {"heading": "439, 440] \u2190 438. Vision \u2190 N. \u2190 eye \u2190 lynx", "text": "The question as to why and why, as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why, as to why and as to why and as to why."}, {"heading": "4.3 An Evaluation Based on Human Judgments", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.3.1 The Experiment", "text": "Rubenstein and Goodenough (1965) established synonymous judgments for 65 pairs of terms. They invited 51 judges, who assigned each pair a score between 4.0 and 0.0, indicating semantic similarity, and chose words from everyday non-technical English. Since the phenomenon studied was a common characteristic of the language, it was not necessary to study technical vocabulary. Miller and Charles (1991) repeated the experiment by limiting themselves to 30 pairs of terms selected from Rubentein and Goodenough's list, evenly divided between words with high, medium and low similarity. More recently, Finkelstein et al. (2002) have the Word Simility - 353 Test Collection (Gabrilovich, 2002), which contains 353 English word pairs along with similarity judgments executed by humans."}, {"heading": "4.3.2 The Results", "text": "This year it has come to the point where it will be able to retaliate, \"he said in an interview with the\" Welt am Sonntag. \""}, {"heading": "4.4 An Evaluation Based on Synonymy Problems", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.4.1 The Experiment", "text": "This year it is more than ever before."}, {"heading": "4.4.2 The Results", "text": "The ELAI answers 78.75% of the TOEFL questions (Table 4.7). The next two best systems are Hirst St-Onge and PMI-IR, which answer 77.91% and 73.75% of the questions, respectively. LSA is not too far behind with 64.38%. Terra and Clarke (2003) achieved a score similar to Turneys with astatic methods of 81.25%. The discrepancies in results are most likely due to differences in the companies used to measure probabilities. By combining the results of fourth statistical methods, including LSA and PMI-IR, Bigham et al. (2003) achieve a score of 97.50%. They also declare that the problem of this TOEFL question should be \"solved.\" All other WordNet-based measures perform poorly, with accuracy not exceeding Rovetic's."}, {"heading": "4.4.3 The Impact of Nouns on Semantic Similarity Measures", "text": "This is the case for Roget's, Hirst and St-Onge, and the statistical metrics. To do justice to the other WordNet-based systems, the experiments that contain only mentions must be repeated. Results are presented in Tables 4.10 to 4.12. WordNet metrics are much more consistent and profitable, but the Roget system is still best. ELKB performance has improved for the TOEFL questions."}, {"heading": "4.5 Summary of results", "text": "This chapter has shown that the electronic version of the ELKB is as good, if not better, than WordNet at measuring semantic similarity. The distance measurement used, often called edge counting, can be calculated quickly and performs extremely well in a series of standardized synonym tests. Table 4.14 summarizes the results for the Rogets and WordNet-based measures. Of eight experiments, the ELKB is the first one each time, with the exception of the Rubenstein and Goodenough lists of 65 nounepairs. Combined statistical methods using the Internet as a corpus are more powerful, but they use many more words than are contained in both lexical resources.Chapter 4. The use of Rogets Thesaurus to measure semantic similarity 53 Most of the WordNet-based systems perform poorly in the task of answering systemic questions."}, {"heading": "5 Automating the Construction of Lexical Chains using Roget\u2019s", "text": "Morris and Hirst (1991) present a method for linking meaningful words that relate to roughly the same topic; the resulting lexical chains are a means of identifying contiguous regions in a text, with applications in many tasks of processing natural language, including text summarization. Morrisand Hirst constructed the first lexical chains manually using Roget's international thesaurus. They wrote that automation would be straightforward in the face of an electronic thesaurus. In most applications, WordNet has previously been used to create lexical chains, perhaps because adequate electronic versions of Roget were not available until recently. This chapter discusses the construction of lexical chains using the electronic version of Roget's Thesaurus, the second application of the ELKB. We implement a variant of the original algorithm. We explain the necessary design decisions and include a comparison with other implementations. Computer allinguists have proposed several evaluation methods, in particular to compare them with the multiplicity of validation constructs, where they have to xicals."}, {"heading": "5.1 Previous Work on Lexical Chains", "text": "Lexical chains (Morris and Hirst, ibid.) are sequences of words in a text that represents the sametopic. Initial implementation was inspired by the concept of cohesion in discourse (Hallidayand Hasan, 1976). An electronic system requires a sufficiently rich and subtle lexical resource to decide on the semantic proximity of words. Computer linguists have used lexical chains in a variety of tasks, from text segmentation (Morris and Hirst, 1991; Okumura and Honda, 1994) to a summary (Barzilay, 1997; Barzilay and Elhadad, 1997), the exploitation of words and Pinchak, 2001; Silber and McCoy, 2002), the recognition of malapropisms (Hirst and St-Onge, 1998), the establishment of hypertext connections within texts (Green, 1999), the analysis of textual structures to compile their similarity."}, {"heading": "5.2 Lexical Chain Building Algorithms", "text": "Algorithms that form lexical chains take into account one by one for inclusion in the chains constructed so far. Important parameters are the lexical resource used to determine the lexicon and the possible relationships between the words referred to by Morris and Hirst (1991) as thesaural relations, the thesaural relationships themselves, the transitivity of the word relations, and the distance - measured in sentences - between words in a chain (Morris and Hirst, ibid.).Our lexical chain building process forms proto-chains, a series of words linked via thesaural relations. Our implementation refines the proto-chains to obtain the last lexical chains. Wesummarising the lexical chain forming process with these five high levels: 1. Choose a set of thesaural relationships; 2. Choose a set of candidate words; 3. Choose the best proto-word for each candidate."}, {"heading": "5.2.1 Step 1: Choose a Set of Thesaural Relations", "text": "In fact, it is the case that most of them are able to outdo themselves, and that they are able to outdo themselves, \"he said.\" But it is not the case that they are able to outdo themselves. \"In fact,\" it is not that they are able to outdo themselves, but that they are able to outdo themselves. \"In the second half of the last decade, in the second half of the 19th century, in the second half of the 20th century, in the second half of the 20th century, in the second half of the 20th century, in the second half of the 20th century, in the second half of the 20th century, in the second half of the 20th century, in the second half of the 20th century, in the second half of the 20th century, in the second half of the 20th century, in the second half of the 20th century.\""}, {"heading": "5.2.2 Step 2: Select a Set of Candidate Words", "text": "Our system removes words that should not appear in lexical chains using a 980-element stop list, an association of five publicly available lists: Oracle 8ConText, SMART, Hyperwave, and lists from the University of Kansas and Ohio State University. The stop list is presented in Appendix H. After eliminating these high-frequency words, it would be beneficial to identify nominal combinations and self-terms. Most of the known WordNet-based implementations of lexical chains consider only nouns. This may be due to limitations in WordNet, in particular the fact that the IS-A hierarchy, which is indispensable for must systems, is only comprehensively developed for nouns and self-concepts. Rogets allows to form lexical chains that use only nouns, adjectives, adjectives, and interjectives. Our implementation considers the five parts of a pendulum chain to be indispensable in crystal compositions."}, {"heading": "5.2.3 Step 3: Build all Proto-chains for Each Candidate Word", "text": "This is an essential step, open to interpretation. Should every word in the proto-chain be related via an athesaural relationship, or is it enough to link adjacent words in the chain? This would mean that cow and snow should not appear in the same chain. Should only specific senses of a word be included in a chain? Should a chain be built on an entire text, or only on segments thereof? Barzilay (1997) performs wordChapter 5. Automating the construction of lexical chains with Roget's s59sense disambiguation as well as segmentation before building lexical chains."}, {"heading": "5.2.4 Step 4: Select the Best Proto-chains for Each Candidate Word", "text": "Morris and Hirst (1991) identify three factors to evaluate the strength of a lexical chain: repetition, density, defined by the nature of the aural relationships and length contained in the chain. The more repetitive, dense and longer the chain, the stronger it is. This notion has been widely accepted by the other implementations of lexical chains, with the added consideration of the type of relationships used in the chain, during Chapter 5. Automating the construction of lexical chains using Roget 60Scoring their strength. The values in Table 5.1 are used to evaluate the meta chains, similar to the Silver and McCoy scoring system (2002). The rationale for these scores is that the repetition of the same term throughout a text represents a strong relationship."}, {"heading": "5.2.5 Step 5: Select the Lexical Chains", "text": "In Sibler and McCoy'simplementation (2002), a word belongs to only one lexical chain. Most implementations have adopted this strategy. We also have it to compare our lexical chains with those of other systems. A word belongs in the chain to which it contributes the most, i.e. the proto chain with the highest score. The word is removed from all other proto chains and its ratings adjusted accordingly. As soon as the best proto chain is selected for each word, the lexical chain formation process stops."}, {"heading": "5.3 Step-by-Step Example of Lexical Chain Construction", "text": "As a result, the number of people staying in the city continues to increase, while the number of people staying in the city continues to increase."}, {"heading": "5.4 A Comparison to the Original Implementation", "text": "It was a time when, in the city, in which the public and the public were not so preoccupied with themselves, we had to deal with ourselves, \"he said in an interview with the New York Times, in which it was a question of whether the city's future was at all at stake.\" It was a time when it was about the future, \"he said.\" It was a time when it was about the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the past, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the past, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future, the future,"}, {"heading": "5.5 Complexity of the Lexical Chain Building Algorithm", "text": "The arithmetically most expensive part of the lexical chaining process is the construction of all possible meta chains, as described in Step 3: Build All Proto-chains for Each CandidateWord. The complexity of the other components of the implementation is negligible compared to this. Step 3 can be described with the following pseudo-code: Given that there are n candidate words in a text and each word has an average of 2.14 senses in the ELKB, and that in the worst case there are as many unique candidate words as there are total candidate words in a text, the complexity of Step 3 is n * 2.14 * n, which is O (n2). We are eager to improve performance, for example a sense identified by the triple head number, paragraph key and part of the speech, only considered once during the meta meta chaining process."}, {"heading": "5.6 Evaluating Lexical Chains", "text": "This evaluation is appropriate if the aim of the lexical chains is to move a text to the individual regions, not only to the individual regions, but also to the individual regions."}, {"heading": "5.7 About the Straightforwardness of Implementing Lexical Chains", "text": "In fact, it is such that the majority of them are able to survive themselves without a process occurring in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process occurs in which a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process, to a process,"}, {"heading": "7 Summary, Discussion, and Future Work", "text": "This chapter summarizes the contributions of the dissertation and presents known shortcomings of the ELAIs, aspects that should be improved and ideas for future applications."}, {"heading": "7.1 Summary", "text": "The aim of this thesis was to determine whether Roget's thesaurus can be a realistic alternative to WordNet. To achieve this, several sub-goals had to be achieved: the first is the design and implementation of the ELKB; the second is the conduct of NLP experiments, the results of which are compared with those of WordNet-based systems; the third is the quantitative comparison of bothlexical knowledge bases.Chapter 1 presents the context, objectives and organization of these theories. Chapter 2 describes a brief history of how computer-based linguists have used Thesauri in NLP; discusses the different versions of Rogets and explains the reasons for selecting the 1987 editionof Penguin's Thesaurus of English words and phrases as the source for the ELKB. Thischapter discusses several applications of Rogets Thesaurus and WordNet."}, {"heading": "7.2 Conclusions", "text": "This dissertation has shown that it is possible to computerize Roget's Thesaurus 7.0 so that it maintains all the functionality of the printed version and allows manipulations that are suitable for NLP applications. I have used the ELKB in a few experiments, but these are not enough to determine whether it is a credible alternative to WordNet. I offer a few ideas for those who intend to use the ELKB or want to build a similar knowledge base. 7.2.1 Building an ELKB from an existing Lexical ResourceBuilding at ELKB is a very attractive alternative to WordNet. Computerlinguist can save a lot of time by using the structure and lexical material tasks contained in existing dictionaries and thesauri. I have encountered two major problems that are not known about the implementation of the ELKB systems. The lexicographer guidelines are not known and it is very tedious to understand the organization of paragraphs and semicolon decisions without explanations for the semicolon decisions."}, {"heading": "7.2.5.1 Retrieval of Phrases", "text": "The ELCTB does not perform morphological transformations when searching for a phrase. If, however, it does not provide the exact string contained in the index, no result will be returned. For example, the phrase \"sixty-four thousand dollar question\" will not be found because Chapter 7 Summary, Discussion, and Future Work contains 81 precise strings in the ELCTB \"the sixty-four thousand dollar question.\" Giving access to all of Roget's phrases is a difficult problem to solve, but one that deserves attention. The thesaurus contains many phrases, some of which are very strange, such as \"Cheshire Catgrin,\" \"Homeric Laughter,\" or \"the smartest fool in Christianity.\" It may be an area where the ELCTB is superior to WordNet. I have not examined this. An ideal solution would be to incorporate into the index a method that filters out all phrases that contain certain words."}, {"heading": "7.2.5.2 Displaying the Semicolon Group Which Contains a Variant of the Search Word", "text": "As described in Chapter 3, when searching for a word, morphological transformations are performed to find all the matching entries included in the index. For example, when a user types in the word tire, the ELKB finds the words tire and tire in the index. The reference fortyre is wheel 250 N. The system finds the Head 250 Circularity: Simple Circularity: Simple Circularity and finds the paragraph of the wheel name. The ELKB searches the paragraph sequentially until the word tire is found. Since tire is the word in the paragraph, the correct semicolon group is not returned. This causes a slight problem in calculating the semantic distance. For example, the system determines the distance between the words hub and tire to 2 instead of 0, since the words do not appear in the semicolon group; hub, felly, felly, tire;. This is not difficult to correct, but awkward, so I have left it as one of several future adjustments."}, {"heading": "7.2.5.3 Original vs. New Index", "text": "The ELKB uses an index that is generated from all the words and phrases it contains. Pearson Education provides an index that is about half the size of the one automatically generated, and the system stores both in separate files that cannot be used at the same time. I would have reproduced Roget's thesaurus more faithfully if the entries in the index had been marked as original and new. Chapter 7. Summary, Discussion, and Future Working 82."}, {"heading": "7.2.5.4 Optimization of the ELKB", "text": "Future versions will need to improve memory usage and speed if this resource is to be a viable alternative to WordNet. Performance can be improved by loading the text of the 990 heads into memory and storing absolute references to paragraphs and semicolon groups as described in Chapter 3. The current implementation loads in 3 seconds on a Pentium 4, 2.40 GHz with 256 MB of RAM and requires about 40 MB of RAM."}, {"heading": "7.3 Future Work", "text": "Apart from the fact that the lexical material needs to be licensed, future system maintainers should thoroughly evaluate the ELKB and use it in a variety of applications to pique the interest of the NLP community, and it should also be improved to make it more competitive with respect to WordNet.7.3.1 More complete evaluation of the ELKB In this dissertation, a partial evaluation of the ELKB was made by comparing it to WordNet-based systems and statistical techniques. A comparison with other versions of Roget's Thesaurus, namely the 1911 edition, FACTOTUM and Roget's International Thesaurus, should be avoided. Until this is done, I cannot say how good this version of Roget is compared to all the others. Future research should conduct further benchmark experiments with the ELKB, namely WordSense Disambiguation. This problem is a problem that has been used for a long time in the history of L\u00e9P (Lrones)."}, {"heading": "7.3.2 Extending the Applications Presented in the Thesis", "text": "Turney (2002) has used his semantic similarity metric to classify automotive and film reviews. Bigham et al. (2003) use their similarity metric to solve analogy problems. In an analogy problem, the correct word pair must be selected from four pairs, for example: cat: miow:: (a) mouse: scamper, (b) bird: peck, (c) dog: bark, (d) horse: groom, (e) lion: scratch. To answer correctly dog: bark, a system must know that meowing is the sound a cat makes, and bark the sound a dog makes. Both of these applications can be implemented with the ELK. As discussed in Chapter 5, several researchers have used lexical chains to summarize text, notably Barzilay and Elhadad (1997) and Silber and McCoy (2000)."}, {"heading": "8 References", "text": "1. Barzilay, R. (1997). Lexical Chains for Summarization. Master Thesis 2001 - Ben-GurionUniversity.2. Barzilay, R., and Elhadad, M. (1987). Using lexical chains for text summarization. In: ACL / EACL-97 summarization workshop, 10 - 18.3. Beckwith, R., Fellbaum, C. and Miller, G. (1991). WordNet: A Lexical Database Organized on Psycholinguistic Principles. In Zernik, ed., Lexical Acquisition. Resources to Build a Lexicon. Hillsdale, NJ: Lawrence Erlbaum Associates, 211 - 232.4. Berrey, L. and Carruth G. (eds.) (1962). Roget's International Thesaurus, Third Edition."}, {"heading": "Appendix A: The Basic Functions and Use Cases of the ELKB", "text": "A - 1 Appendix A: The basic functions and use cases of the ELCBThese are the basic functions of the ELCBThese are: 1. Look up a word or phrase. 2. Search the taxonomy. 3. Look up all words and phrases in one head. 4. Calculate the distance between two words or phrases. 5. Determine the thesaural relationship between two words or phrases. These functions can be described by the accompanying use cases."}, {"heading": "1 Look up a Word or Phrase", "text": "1. The user enters a word or phrase. 2. The system performs morphological transformations of the word or phrase. 3. The system searches the index for all entries containing the transformed search term. 4. The system returns all references to the index entries found. 5. The user selects a reference from the result list. 6. The system returns the paragraph containing the reference. 7. The semicolon group containing the reference is located. Alternative: The search term is not in the index. At step 3, the system does not find the search term in the index. Allow the user to re-enter a word or phrase. Return to the primary scenario at step 2. Alternative: The user cancels the search. At step 1 or 5, the user cancels the search."}, {"heading": "2 Browse the Taxonomy", "text": "1. The system displays the names of the classes. 2. The user selects a class to expand. 3. The system displays the sections belonging to the selected class. 4. The user selects a section to expand. 5. The system displays the subsections belonging to the selected section. 6. The user selects a subsection to expand. 7. The system displays the header groups belonging to the selected subsection. 8. The user selects a header group to expand. 9. The system displays the heads belonging to the selected header group. 10. The user selects a header to expand. 11. The system displays the text of the selected header."}, {"heading": "Appendix A: The Basic Functions and Use Cases of the ELKB", "text": "A - 2Alternative: The user selects another class, a section, a subsection, a header group or a header. In steps 2, 4, 6, 8 or 10, the user can decide to expand another class, a section, a subsection, a header group or a header. In steps 3, 5, 7, 9 or 11, the user can decide to collapse a class, a section, a subsection, a header group or a header. In steps 3, 5, 7, 9 or 11, the user can decide to collapse a class, a section, a subsection, a header group or a header."}, {"heading": "3 Look up all Words and Phrases in a Head", "text": "1. The user dials or enters a head number. 2. The system displays the text of the selected head."}, {"heading": "4 Calculate the Distance between Two Words or Phrases", "text": "1. The user enters two words or phrases. 2. The system performs morphological transformations for each word or phrase. 3. The system searches for each transformed word or phrase in the index. 4. The system finds all paths between the individual references of the words or phrases. 5. The system assigns a score to each path: 0 if the two references point to the same semicolon group, 2 if they point to the same paragraph, 4 if the point points to the same part of the word in the same header, 6 if they point to the same header, 8 if they point to the same header group, 10 if they point to the same subsection, 12 if they point to the same section, 14 if they point to the same class and 16 if the references point to two different classes of the ELKB.6. The distance is indicated by the smallest score."}, {"heading": "5 Identify the Thesaural Relation between Two Words or Phrases", "text": "1. The user enters two words or phrases 2. If the same lexicographic string is entered, the thesaural relationship is \"T0: Repeat.\" Finish the procedure 3. Otherwise, the system performs morphological transformations for each word or phrase."}, {"heading": "Appendix A: The Basic Functions and Use Cases of the ELKB", "text": "A - 34. The system searches for every transformed word or phrase in the index. 5. The system compares the references of the index entries in pairs. 6. If two references refer to the same paragraph, then the thesaural relationship is \"T1.\" Finish the procedure. 7. Otherwise, there are no thesaural relationships between these two words or phrases."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 1Appendix B: The ELKB Java DocumentationThis appendix presents a summary of the Java documentation for all the classes of the ELKB.Package ca.site.elkbClass Summary Category Represents the Roget's Thesaurus Tabular Synopsis of Categories.Group Represents a Rogets Thesaurus Head group.Head Represents a Roget's Thesaurus Head.HeadInfo Object used to store the information that defines a Head but not its words and phrases.Index Represents the computer index of the words and phrases of Roget's Thesaurus Head group.Morphy Performs morphological transformations using the same rules as WordNet.Paragraph Represents a Roget's Thesaurus Paragraph.Path Represents a path in Rogets Thesaurus's Thesaurus's Thesaurus's Thesaurus Theslerus between two or sessional phrases as a set of Thesrus Paragraphrus Paragraph.Path Represents a path in Rogets Thesaurus's Thesaurus's Thesaurus's Thesaurus's Theslerus between two Theslerus Theslerus Theslerus Thesus between two ses.Set of seesrus Thesrus Thesrus Thesrus Thesrus Thesrus Thesrus Thesrus Thesrus and Thesrus Thesrus Thesrus Thesrus Thesrus Theses a set of at least two minimum two phrases that contain the minimum two paths."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 2ca.site.elkb Class Categoryjava.lang.Object | + --ca.site.elkb.Categorypublic class Categoryextends java.lang.ObjectRepresentates the Roget's Thesaurus Tabular Synopsis of Categories. The top level of this ontology divides the thesaurus into eight classes: 1. abstract relations2. space3. matter4. Intellect: the exercise of the mind (formation of ideas) 5. intellect: the exercise of the mind (communication of ideas) 6. volition: the exercise of the will (individual volition) 7. volition: the exercise of the will (social volition) 8. emotion, religion and moralityClasses are further divited Headlines of the Sections, Sub-sections, Head groups, Heads.Constructor Summary Category.Heurn.CategoryReturn.Category (Return.Category CategoryClasses) 8. Emotion, religion and moralityClasses are further divited Head of the Sections, Sub-sections, Headgroups, Heads.Constructor Summary Categorygroups (Individual volition) 7. volition: the exercise of the will (Social volition) 8. volition."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 3Classes.int getSectionCount () Returns the number of sections in this ontology.int getSubSectionCount () Returns the number of subsections in this ontology.void printHeadInfo () Returns the array of HeadInfo objects to the default output.void printRogetClass (int index) Returns the class of the root at the specified position in the array of classes to the default output.java.lang.String toString () Converts to a string representing the category object."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 4ca.site.elkb Class Groupjava.lang.Object | + --ca.site.elkb.Grouppublic class Group extends java.lang.ObjectRepresentates a Roget's Thesaurus Head Group. For example: 79 Generality 80 Speciality A Group can contain 1,2 or 3 HeadInfo Objects.Constructor Summary Group () Default constructor.Group (int start) Constructor that takes an integer to give first Head number of the Group.Method Summary void addHead (ca.site.elkb.HeadInfo head) Add a HeadInfo object to this Group.int getHeadCount () Returns the number of Heads in this Group.java.util.ArrayList getHeadList () Returns the array of HeadInfo objects.int getHeadStart () Returns the number of the first Head in this Group.void HeadCount ()"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 5ca.site.elkb Class Head java.lang.Object | + --ca.site.elkb.Headpublic class Head extends java.lang.ObjectRepresentates a Roget's Thesaurus Head. A Head is defined by the following attributes: \u2022 Head number \u2022 Head name \u2022 Class number \u2022 Section num \u2022 list of paragraphs \u2022 number of paragraphs \u2022 number of semicolon groups \u2022 number of words and phrases \u2022 number of cross-references \u2022 number of see referencesThe relative postions of the noun, adjective verb, adverb and interjection paragraphs in the array of paragarphs is kept by nStart, adjbStart, advStart, and intStart attributes.Constructor Summary Head () Summary Head () Summary Head () Summary Head () Summary Head () Summary Head () and Adjective Head () Addresses (Reference lector.num, advStart, and intStart attributes.Constructor Head, Summary Head () Constructor Head () Constructor Head ()."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 6int getAdjSGCount () Returns the number of adjective semicolon groups of this head.int getAdjStart () Returns the index of the first adjective in the array of pragraph objects of this head.int getAdvCount () Returns the number of adverb words and sentences of this head.int getAdvCRefCount () Returns the number of adverb references of this head.int getAdvParaCount () Returns the number of adverb paragraphs of this head.int getAdvParaCount () Returns the number of adverb paragraphs of this head.int getAdvSeeCount () Returns the number of adverb references of this head.int getAdvParaCount () Returns the number of adverb paragraphs of this head.int getParaCount () Returns the index of the first adverb paragraph of this head.int getHeadsNum ()."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 7int getNParaCount () Returns the number of noun paragraphs of this head.int getNSeeCount () Returns the number of noun references of this head.int getNSGCount () Returns the number of noun semicolon groups of this head.int getNStart () Returns the index of the first noun paragraph in the array of the pragraph objects of this head.ca.site.elkb.Paragraph getPara (java.lang.String paraKey, java.lang.String pos) Returns the paragraph object of the count paragraph number and part-of-of-language content.elkb.Paragraph getParurna (java.lang.String paraKey, java.Sstring paraKey) Returns the paragraph number of the paragraph number and the return number of the (the paragraph number of the paragraph)."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 8void printAllWords () Returns all the words and phrases of this header separately in a separate line to the standard output.void setClassNum (int num) Sets the class number of this head.void setHeadName (java.lang.String name) Sets the name of this head.void setHeadNum (int num) Sets the number of this head.void setSectionNum (int num) Sets the section number of this head.java.lang.String toString () Converts to a string representing the header object."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 9ca.site.elkb Class HeadInfo java.lang.Object | + --ca.site.elkb.HeadInfopublic class HeadInfo extends java.lang.ObjectObject used to storage the information that definates a Head but not its words and phrases. It contains the following attributes: \u2022 Head number \u2022 Head name \u2022 Class number \u2022 Section number \u2022 Sub-section name \u2022 Head group, defined as a list of HeadInfo objectsConstructor Summary HeadInfo () Default constructor.HeadInfo (int number, java.lang.String name, int cn, int sn, java.lang.String subName, java.util.ArrayList groupList) Constructor which sets the Head number and name, as the Class and Section number, Sub-section and Head group list.Headget.String sInfo, int cn, java.Headettettettett.lang.Return.Constructor subName, java.nr, Settr, Settettettettr, Settettettettettettettettr, Settettettettettettlr, Settlr, Settlr, Settlr, Settltr, Settltr, Settlr, Settltr, Settltr, Settltr, Settltr, Settlr, Settltr, Settltr, Settltr, Settltr, Settlr, Settltr, Settltr, Settltr, Settltr, Settlr, Settltr, Settlr, Settltr, Settltr, Settlr, Settltr, Settlr, Settlr, Settlr, Settltr, Settltr, Settlr, Settlr, Settltr, Settltr, Settlr, Settlr, Settltr, Settlr, Settltr, Settltr, Settltr"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 10Specifies the subsection name of this Head.void setClassNum (int num) Sets the number of this Head.void setHeadGroup (java.util.ArrayList group) Sets the array of the HeadGroup objects of this Head.void setHeadName (java.lang.String name) Sets the name of this Head.void setHeadNum (int num) Sets the number of this Head.void setSectNum (int num) Sets the section number of this Head.void setSubSectName (java.lang.String name) Sets the section name of this Head.java.lang.String to String () Converts to a string representation of the HeadInfo object."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "Index - 11ca.site.elkb class Indexjava.lang.Object | + --ca.site.elkb.IndexAll Implemented Interfaces: java.io.Serializablepublic class Index extends java.lang.Object implements java.io.SerializableRepresentates the computer index of the words and phrases of Roget's Thesaurus. According to Kirkpatrick (1998) \"The index consists of a list of elements, each followed by one or more references to the text. These references consist of a header, a keyword in italics, and a part of the language name (n. for nouns, adj. for adjectives, vb. for adverbs, and for interjections.) The keyword is undefined to identify the paragraph containing the word you are looking for."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 12java.util.ArrayList getEntryList (java.lang.String key, int itemNo) Returns the reference list for a given word or phrase in the index preceded by a number to identify the reference list. java.util.TreeSet getHeadNumbers (java.lang.String key, int itemNo) Returns a number of header numbers in which a word or phrase can be found. int getItemCount () Returns the number of entries in this index."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 13ca.site.elkb Class Morphyjava.lang.Object | + --ca.site.elkb.MorphyAll Implemented Interfaces: java.io.Serializablepublic class Morphy extends java.lang.Object implements java.io.SerializablePerforms morphological transformations using the same rules as WordNet. The following suffix substitutions are made for: \u2022 nouns: 1. \"s\" - > \"2.\" ses \"- >\" s \"3.\" xes \"- >\" x \"4.\" zes \"- >\" z \"5.\" ches \"- >\" ch \"6.\" shes \"- >\" sh \"7.\" men \"- >\" man \"\u2022 adjectives: 1.\" er \"- >\" s. \""}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 14Field Summary static java.lang.String ADJ _ EXCLocation of the adj.exc file.static java.lang.String ADV _ EXC Location of the adv.exc file.static java.lang.String ELKB _ PATH Location of the ELKB data directory.static java.lang.String NOUN _ EXC Location of the noun.exc file.static java.lang.String USER _ HOME Location of the user's Home directory.static java.lang.String VERB _ EXC Location of the verb.exc file.Constructor Summary Morphy () Default constructor.Method Summary java.util.HashSet getBaseForm (java.lang.String words) Returns all basic forms for a predefined word.static void main (java.lang.String]."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 15ca.site.elkb Class Paragraph java.lang.Object | + --ca.site.elkb.Paragraphpublic class Paragraph extends java.lang.ObjectRepresentates a Roget's Thesaurus Paragraph. A paragraph is defined by the following attributes: \u2022 Head number \u2022 Paragraphname \u2022 Paragraphkeyword \u2022 Part-of-speech \u2022 list of Semicolon Groups \u2022 number of Semicolon Groups \u2022 number of words and phrases \u2022 number of cross-references \u2022 number of See referencesConstructor Summary Paragraph () Default constructor.Paragraph (int head, int para, java.lang.String p) Constructor which sets the Head number, Paragraph number and part-of-speech. Paragraph (int head, int para, java.lang.String p) constructor which sets the Head number, Paragraphnumber and part-of speech-speech-number."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 16Returns the header number of this paragraph.java.lang.String getParaKey () Returns the keyword of this paragraph.int getParaNum () Returns the number of references in this paragraph.ca.site.SG getSG (int index) Returns the semicolon group at the specified position in the array of semicolon groups.ca.site.elkb.SG getSG getSG (java.lang.String word) Returns the first semicolon group in this paragraph that returns the specified word getSGCount () Returns the number of semicolon groups in this paragraph.jav.Print the number of semicolon groups."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 17ca.site.elkb Class Pathjava.lang.Object | + --ca.site.elkb.PathAll Implemented Interfaces: java.lang.Comparablepublic class Path extends java.lang.Object implements java.lang.ComparableRepresentatives a path in Rogets Thesaurus between two words or phrases.Constructor Summary Path () Default constructor.Path (java.util.ArrayList path) Constructor that initialized this Path Object with a Path.Method Summary eTo (java.lang.Object other) Compares two paths.java.lang.String get.String getKeyWord1 () Returns the keyword of the first word or phrase in this Patha.langs the Patha.lang.String get.Return.Path.Path.Return.Path.Return.Path.Return.Path.Return.Path.Return.Path.Return.Path.Return.Path.Return.Path.Return.Path.1 () Return.Path.Location Return.Path.Return.Path.Return.Path.Path.Return.Path.1 (.Path.Return.Path.Return.Path.Path.Path.1) Return.Path.Path.Path.Path.Path.Return.Path.Path.Path.1."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 18int length () Returns the number of elements in this Path.int size () Returns the length in this Path.java.lang.String toString () Converts the path object to a string representation."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 19ca.site.elkb Class PathSetjava.lang.Object | + --ca.site.elkb.PathSetAll Implemented Interfaces: java.lang.Comparablepublic class PathSet extends java.lang.Object implements java.lang.ComparableA set, which contains all paths between two words and phrases as well as the number of minimum length paths. This class is used to measure semantic distances. PathSet also contains the original strings before any morphological transformations of phrases These are in origWord1 and origWord2.Constructor Summary PathSet () Default constructor.PathSet (java.util.TreeSet pathSet pathSet) Constructor, which includes this PathSet with a PathSet.Method Summary Pathget.Method Summary of origWordget.Methgetincompart, the first Pathset.Pathset.PathSet (), the first Pathset.Pathset.Pathset.the second, the second set, the second set of this second, the second set path.parathget.Pathget.Object, the second, the second set of this second one)."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 20java.lang.String getWord1 () Returns the first word or phrase after the morphological transformations have been applied in this PathSet.java.lang.String getWord2 () Returns the second word or phrase after the morphological transformations in this PathSet.java.lang.String getWordPair () have been converted into a string representation of the PathSet object. Void setOrigWord1 (java.lang.String word) Sets the original form of the first word or phrase in this PathSet.void setOrigWord2 (java.lang.String word) Sets the original form of the second word or phrase in this PathSet.java.lang.String () Converts to a string representation of the PathSet object."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 21ca.site.elkb Class Referencejava.lang.Object | + --ca.site.elkb.ReferenceAll Implemented Interfaces: java.io.Serializable Direct Known Subclasses: SemRelpublic class Reference extends java.lang.Object implements java.io.SerializableRepresents a symbolic pointer to a location where a specific word or phrase can find in Roget's Thesaurus. A reference is identified by a keyword, header number and part of the language sequence. An example of a reference is: obstetrics 167 n. This instance of a reference is represented as: \u2022 Reference Name: obstetrics \u2022 Head number: 167 \u2022 Part-of-speech: N.A Reference is always liked to an index entry, example: stork. See also: Serialized FormConstructor Summary Reference stor() constructor.lang.lang.f part of speech N.A Reference is always liked to the index."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 22java.lang.String getPos () Returns the speech part of this reference.java.lang.String getRefName () Returns the name of this reference.void print () Returns this reference to the standard output.void setHeadNum (int head) Sets the head number of this reference.void setIndexEntry (java.lang.String entry) Sets the index entry of this reference.void setPos (java.lang.String p) Sets the speech part of this reference.void setRefName (java.lang.String) Sets the name of this reference.java.lang.String toString () Sets the speech part of this reference object in a string."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 23ca.site.elkb Class RogetClassjava.lang.Object Class | + --ca.site.elkb.RogetClasspublic class RogetClass extends java.lang.ObjectRepresents the uppermost element in Rogets Thesaurus Tabular Synopsis of Categories. It is represented by its number, name, subclass name, if it is a subclass of an original Roget Class, and the area of the sections contained therein. For example, class 4. Intellect: the exercise of the mind (formation of ideas) is represented as: \u2022 Class number: 4 \u2022 Class number in string format: class four \u2022 Class name: Intellect: the exercise of the mind \u2022 First section: 22Constructor Summary RogetClass () Default constructor.RogetClass (), snsnsnsnsnsnsnsnsClass (int num, java.lang.String) num, nlangum, num, Constructor, which is the class, nlangum, nlangum, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num, num"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 24void addSettettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettySettyS"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 25ca.site.elkb Class RogetELKBjava.lang.Object | + --ca.site.elkb.RogetELKBpublic class RogetELKB extends java.lang.ObjectMain class of the Roget's Thesaurus Electronic Lexical KnowledgeBase. It consists of three main components: \u2022 the Index \u2022 the Tabular Synopsis of Categories \u2022 the TextRequired files: \u2022 elkbIndex.dat: The Index in binary file format. \u2022 rogetMap.rt: The Tabular Synopsis of Categories. \u2022. / heads / head *: The 990 heads \u2022 AmBr.lst: The American to British orelling word list. \u2022 noun.exc, adj.exc, verb.exc, adv.exc: The Tabular Synopsis of Categories. \u2022. / heads / head *: The 990 heads \u2022 AmBr.lst: The American to British Synopr."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 26Constructor Summary RogetELKB () Default constructor.Method Summary java.util.TreeSet getAllPaths (java.lang.String strWord1, java.lang.String strWord2) Returns all paths between two words or phrases.java.util.TreeSet getAllPaths (java.lang.String strWord1, java.lang.String strWord2, java.lang.String POS) Returns all paths between two words or phrases of a given subword. Static Empty main (java.lang.String [] args) Allows the use of the ELKB via the command line ca.site.elkb.Path path (java.lang.String strord1, java.String str.str.str.str.str.str.string), which consists of a connection between two words (java.Word.Word.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.string.str.string.string.string.string.string.str.string.string.string.string.str.string.str.string.string.str.string.string.string.string.string.string.str.string.str.string.string.string.string.string.str.string.string.str"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 27ca.site.elkb class RogetTextjava.lang.Object | + --ca.site.elkb.RogetTextAll Implemented Interfaces: java.io.Serializablepublic class RogetText extends java.lang.Object implements java.io.SerializableRepresentates the Text of Roget's Thesaurus. The following information is retained for the text: \u2022 Number of Heads \u2022 Number of Paragraphs \u2022 Number of Words and Phrases \u2022 Number of Semicolon Groups \u2022 Number of Cross References \u2022 Number of References. This information is also retained for all nouns, adjectives, verbs, adverbs and interjections. See also: Serialized FormConstructor Summary RogetText () Default constructor.RogetText (int capacity) Constructor, which specifies the number of Heget.HegetText (int capacity, jav.Text RogetText) contained in this RogetText."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 28Method Summary void addHead (ca.site.elkb.Head headObj) Adds a head object to this RogetText.void addHead (java.lang.String fileName) Adds a head contained in the specified file to this RogetText.int getAdjCount () Returns the number of adjectives in this RogetText.int getAdjCRefCount () Count the number of adjective references in this RogetText.int getAdjParaCount () Count the number of adjective paragraphs in this RogetText.int getAdjCRefCount () Count the number of adjective references in this RogetText.int get.int get.int gettCount gettCount the number of adjective references in this RogetText.int gettText.int getgetgetgetgetgetgetgetgetgetgetgetgetgets"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 29Returns the number of nouns in this RogetText.int getNCRefCount () Returns the number of noun cross-references in this RogetText.int getNParaCount () Returns the number of noun groups in this RogetText.int getNSeeCount () Returns the number of noun cross-references in this RogetText.int getNSGCount () Returns the number of noun semicolon groups in this RogetText.int getParaCount () Returns the number of paragraphs in this RogetText.int getText.int getSGCount () Returns the number of semicolon groups in this RogetText.RogetTextCount ()."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 30ca.site.elkb Class Sectionjava.lang.Object | + --ca.site.elkb.Sectionpublic class Section extends java.lang.ObjectRepresents a Roget's Thesaurus Section. A section is defined by the following attributes: \u2022 Section number \u2022 Section number in string format \u2022 Section name \u2022 number of the first head \u2022 number of the last head \u2022 array of HeadsA Section may contain Head- or HeadInfo objects, depending on which one is used. Constructor Summary Section () Default constructor.Section (int number, java.lang.String name) Constructor which sets the Section number and name () and the number of the first and last Headurnget.Section (Meint number, java.lang.String name, Stav.Section) Constructor which sets the Section number and name of the Section () and the number of the first and last Headurngetings Section (Meint number, javint, String, Stav.Settings) Section (Settings)."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 31int getSectionNum () Returns the number of this section.java.lang.String getStrSectionNum () Returns the number of this section in string format.int headCount () Returns the number of heads in this section.void print () Returns the content of this section to the default output.void printHeadInfo () Returns the information relating to the heads contained in this section to the default output.void setHeadEnd (int end) Returns the number of the last header of this section.void setHeadStart (int start) Returns the number of the first header of this section.void setSectionName (java.lang.String name) Sets the number of this section in string format.void setSectionNum (int num) Returns the number of this section."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 32ca.site.elkb class SemRel java.lang.Object | + --ca.site.elkb.Reference | + --ca.site.elkb.SemRelAll Implemented interfaces: java.io.Serializablepublic class SemRel extends ReferenceRepresentates a Roget's Thesaurus Relation between a word or phrase. This can be a cross reference or a see reference. For example: \u2022 See drug taking \u2022 646 perfectRelation types currently used by the ELKB are cref and see. See also: Serialized FormConstructor Summary SemRel () Default constructor.SemRel (java.lang.String t, int headNum, java.lang.String refName) Constructor which sets the relation type, Head number and Reference name.Method Summary java.lang.String getType () Returns the relation typevoid (Print Reprint NAMget.String) Summary.Sumget.Stava.Sstruthring"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 33setPos, setRefName"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 34ca.site.elkb Class SGjava.lang.Object | + --ca.site.elkb.SGpublic class SG extends java.lang.ObjectRepresentates a Roget's Thesaurus Semicolon Group. For example: \u2022 Zeal, Passion, Ernestness, Seriousness; A Semicolon Group is defined by the following attributes: \u2022 Head number \u2022 Paragraph number \u2022 Paragraph keyword \u2022 Part-of-speech \u2022 Semicolon Group number \u2022 number of cross-references \u2022 number of lake references \u2022 number of lake references \u2022 list of word and phrases \u2022 list of special tags for the words and phrases \u2022 list of referencesConstructor Summary SG () Default constructor.SG (int numSG, int numP, int numH, java.lang.String phrase) Constructor that sets the Semicolon Group, Paragraph number, j.j.ring, part and insword colint numint, numint, nump.P, Stava.H"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 35java.lang.String format () Returns this semicolon group formatted in a string, including references, stiltags and punctuation.java.util.ArrayList getAllWordList () Returns the list of words and phrases contained in this semicolon group.java.lang.String getGroup () Returns the number of cross references contained in this semicolon group.java.lang.String getGroupSett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.Sett.S"}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 36Sets the paragraph keyword of this semicolon group. Void setParaNum (int num) Sets the paragraph number of this semicolon group. Void setPOS (java.lang.String p) Sets the spoken part of this semicolon group. Void setSGNum (int num) Sets the number of this semicolon group. Void setText (java.lang.String text) Sets the words and phrases used in this semicolon group. java.lang.String toString () Converts the SG object into a string."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 37ca.site.elkb Class SubSectionjava.lang.Object | + --ca.site.elkb.SubSectionpublic class SubSection extensions java.lang.ObjectRepresentates a Roget's Thesaurus Sub-section. A subsection may or may not exist. Here's an example: \u2022 Class one: Abstract Relations \u2022 Section one: Existence \u2022 Sub-section title: Abstract \u2022 Head group: 1 Existence - 2 NonexistenceSub-section may contain multiple Head-groups.Constructor Summary SubSection () Default constructor.SubSection (int start) Constructor that defines the number of the first Head.SubSection (int start, java.lang.String sInfo) Constructor that specifies the number of the first Head and the name of the section that is called String-get.SubSection (java.lang.String sInfo) Constructor that defines this Sub-Section-Section-Subb-Sb-Section (b-Sb)."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 38Tabular Synopisis of Categories to the standard output.void setHeadStart (int start) Sets the number of the first header in this subsection. java.lang.String toString () Converts the subsection object to a string representation."}, {"heading": "Appendix B: The ELKB Java Documentation", "text": "B - 39ca.site.elkb Class Variantjava.lang.Object | + --ca.site.elkb.Variant All Implemented Interfaces: java.io.Serializablepublic class Variant extends java.lang.Object implements java.io.SerializableAllows to obtain a variant of an English spelling. A British spelling variant can be in the form of an American spelling and vice-versa.String AMBR _ FILELocation of the default American and British orb word.liststatic java.lang.String ELKB _ PATH Location of the ELKB data directory.static java.lang.String _ HOME Location of the default American and British orb word list.static java.lang.langjring), static java.langjring (static java.lang.string), stava.string, stava.string, stava.string, stava.string, va.string, va.string, a.string, a.string."}, {"heading": "Appendix C: The ELKB Graphical and Command Line Interfaces", "text": "C - 1Appendix C: The graphical and command line interfacesThis appendix presents the graphical and command line interfaces to the ELKB together with the associated documentation."}, {"heading": "1 The Graphical User Interface", "text": "The graphical user interface (GUI) is a configurable mechanism for querying the ELKB. The GUI is as versatile, intuitive and informative as the printed version of the thesaurus. To use it, a user returns a word or phrase that is looked up in the ELKB index. The user interface provides a list of references when the specified word or phrase is found. The user must select one to display the paragraph in which the word or phrase is contained. An example in which the word is used please is Figure C1. Figure C1: Screenshot of the GUI"}, {"heading": "Appendix C: The ELKB Graphical and Command Line Interfaces", "text": "C - 2 Figure C1 shows the following parts of the GUI: \u2022 Index Word: the word or phrase is selected during the search. By pressing Enter or clicking the Search Results button. A history of queried words and phrases is maintained by the GUI. \u2022 The user clicks on the desired paragraph to view the corresponding paragraph. \u2022 A paragraph is displayed in this text box when the user clicks on a result in the search results list, also as an index list. The user clicks on the desired paragraph to view the corresponding paragraph."}, {"heading": "Appendix C: The ELKB Graphical and Command Line Interfaces", "text": ""}, {"heading": "2 The Command Line Interface", "text": "The command line interface allows you to search for a word or phrase or calculate the distance between two words or phrases. Figure C2 shows the possible options of the user interface, Figure C3 and C4 show the steps to look up the word, and Figure C5 shows the distance between words God and Year.Figure C2: Command line interface screenshot Figure C3: Please refer to the word references"}, {"heading": "Appendix C: The ELKB Graphical and Command Line Interfaces", "text": "C - 4Figure C4: The paragraph of reference 7. please 826 V. Figure C5: The distance between the words God and Yahweh"}, {"heading": "Appendix D: The Programs Developed for the Thesis", "text": ""}, {"heading": "Appendix D: The Programs Developed for the Thesis", "text": "This appendix lists the programs developed for the thesis, which can be divided into three categories: preparation of the lexical material for the ELKB, testing and use of the ELKB and experiments. The programs implemented for this work are: \u2022 Preparation of the lexical material: o-format: Perl program, which converts Pearson source files into a format recognizable to ELKB.o: getHeads.pl: Perl program, which converts the Pearson text file through the format program and splits it into 990 files, one for each heading. o ELKBWords: Java program, which lists all words and phrases found in the ELKB, as well as their paragraph keyword, header number and part-of-Java-Jav.o createIndex.pl: Perl program, which takes over the output of ELKBWords and converts it into an index kb file used by the ELKB.K."}, {"heading": "Appendix D: The Programs Developed for the Thesis", "text": "D - 2The Preparation of the Lexical Material for use by the ELKB.The format, getHeads.pl, ELKBWords, createIndex.pl, index2.pl and MakeBinIndex programs must be used in the same way to convert the Pearson source files. This procedure generates the text and index files used by the ELKB.1. Concatenate all the rogetXXX.txt files supplies by Pearson Education. 2. Run the format script. Usage: format -t input _ file output _ file. The format program can be used to convert the format of the Pearson index files with the -i flag. 3. Run the getHeads.pl script on the resulting file. This will create a head directory containing the 990 heads.4. Copy the heads directory into the user's home directory. 5. Run ELKBWords and re-direct the output to file 6. Sort the file by hand with the 7. Run duplicate the entries."}, {"heading": "Appendix E: Converting the Pearson Codes into HTML-like Tags", "text": ""}, {"heading": "Appendix E: Converting the Pearson Codes into HTML-like Tags", "text": "The text files supplied by Pearsons Education are not easy to read, and they use their own > > > codes. Although these codes are explained in their documentation, it is preferable to use HTML-like tags. Here are the first few lines of the text file: # t # 6Class one # L # 6Abstract Relations # U # 5Section one # V # 1Existence # 3 [001] 1 Existence # S # 1N. # H # 3 [001] 1 Existence # S # 1N. # D # 10 / / /.................. /.... /.. /.S # 6Existence # # # # # 6 Existence # 5being, entity; Absolute being, the absolute 965 # 6divineness # 5; aseity, self-existence; monad, a being, an entity, ens, essence, # 1 $."}, {"heading": "Appendix E: Converting the Pearson Codes into HTML-like Tags", "text": "E-2 [4] Replace the # U # 5 codes that close a section number and a > > > > b > > < Section number >.A < / Section number > Tag is added.example: # U # 5Section one < Section number > # Section number > # Section number > [5] Replace the # V # 1 codes that indicate a section title and are small bold with < Section number > # < Size = -1 >. Seal < / Size > # < / Section number > [5] are added.example: # V # 1Existence > # < Section title > # Size = -1 > # < b > # Existence # < / b > # < / Size > # < / Size > # < / Size > # < < / Size > < < / Size > < < / Size > < < < / Size > < < < / < / < / Size > < < < < / < < < / Size > < < < < < > < < < / Size > < < < < < > / Size < < < < < < > / Size < < < < < < < / Size > < < < < < < / / / / Size: < < < < < / / / / / Size > < < < < < < / / / / / / Size > / / / / 1) < < < < < < < < < / / / / / / / / / /"}, {"heading": "Appendix E: Converting the Pearson Codes into HTML-like Tags", "text}, {"heading": "Appendix F: Some Errors in the Pearson Source Files", "text": ""}, {"heading": "Appendix F: Some Errors in the Pearson Source Files", "text": "This appendix lists errors I have identified in the Pearson source files. 179 phrases missing a whitespace and 26 words truncated by a whitespace have been found and corrected."}, {"heading": "Appendix F: Some Errors in the Pearson Source Files", "text": "F - 2File Name Original string Corrected string roget002.txt havemercy havemercy roget03.txt headfor head for roget04.txt hedgepriest hedgepriest roget013.txt icecream ice cream roget011.txt inkdrop ink drop roget024.txt inkslinger ink slinger roget030.txt inkslinger ink slinger roget020.txt interlocutorydecree interlocutorydecree interlocutorydecree roget03.txt unwishful in wishful roget09.txt inrwge roget04.txt ladykiller lady roget03.txt tgetgetrogetgetone killer roget06.txt lawhusband law roget07.txt lettroget013.tget013.tget013.tget0xt getroget0xt get0xt get013.tget0xt getroget013.get0xt leget0xt 7.txt leget0xt"}, {"heading": "Appendix F: Some Errors in the Pearson Source Files", "text": "Q - 3File Name Corrected string roget025.txt one's lot roget03.txt one'smind one's mind roget016.txt one' snose one's nose roget030.txt one'spockets one's pockets roget024.txt onehander roget020.txt onesidedness one side roget021.txt onesyllable one syllable roget023.txt onesyllable one roget03.txt onlyoneself oneself roget016.txt onthe roget016.txt outout of roget012.txt paddle wheel roget016.txt painfulaftermath painful after roget03.txt pamperedappetite pamperget016.txt"}, {"heading": "Appendix F: Some Errors in the Pearson Source Files", "text": "F - 4File Name Original string Corrected string roget018.txt take offense roget011.txt talkdown talk down roget024.txt talknineteen talk nineteen roget018.txt thatman that you roget016.txt theagony roget030.txt theascendant roget021.txt thlifting the bend roget018.txt theclappers the flap roget022.txt theeducationally roget018.txt theeget015.txt thefallen the fallen roget019.txt thehaus roget012.txt thelaw the law roget015.txt throget015.txt theLongKnives the Long Knives roget020.txt throget030.txt the matter roget030.txt throget02.tgetgetgetgetgetgetgetgetgetr throxt the house roget015.txt the law roget022.tget013.0get0get030.txt the law throget030.t030.txt the matter"}, {"heading": "Appendix F: Some Errors in the Pearson Source Files", "text": "F - 5filename Original string Corrected string roget022.txt tyre marking roget023.txt andDrang roget034.txt underone's under one's under's roget007.txt vicelike vice like roget020.txt voxpopuli vox populi roget015.txt wastepipe wastepipe waste pipe roget026.txt wastepipe wastepipe waget040.txt watchnight watch night roget007.txt Weakness as weak as roget029.txt wholehogging whole hogging roget031.txt revocation right roget009.txt withinside with inside roget014.txt withrain with rainTable F1: 179 phrases missing a space in Pearson source files"}, {"heading": "Appendix F: Some Errors in the Pearson Source Files", "text": "F - 6File Name Original string Fix string roget030.txt decentralizatio n decentralization roget007.txt destruct ion destruct ion roget024.txt editio n edition roget009.txt extraterritoriali ty extraterritoriality roget006.txt fatherf. roget013.txt featherwei ght featherweight roget06.txt glorificatio n glorification roget019.txt unracticabilit y unracticabilit y unracticabilit y unracticabilit roget07.txt inappropriate roget003.txt overfulfil roget06.txt overfulfillment roget013.txt geographical roget040.txt a rchdeacon archdeacon roget010.txt disequilibrium disequiliroget07.txt roget07.txt"}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": ""}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": "This appendix shows the 646 American and British spelling variants used by the ELKB. It is an association of three publicly available word lists: The American British - British American Dictionary (Smith, 2003), Delphion's American / British Patent Term (Derwent, 2001), and XPNDC - American and British Spelling Variations (XPNDC, 2003).American British British British Dictionary Abbreviation Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact Artifact"}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": "G - 2American British Bookkeeper-Check Cheque boracic checker chequer break dance chili arch chiliarch brier brier chili chilli buncombe bunkum choir stall choirstall burden burthen cigaret clangour caf\u00e9 clarinetist calibre claw back clawback caliper clerestory calliper clamor clamour cachexia cachexy clangor clangour caf\u00e9 clarinetist clawback clawback calliper clerestory calliper clerestory callipers calliscillepncehncsrcsrcehcn csrcsreh rfnd csreeaitcehncsdcsrcsrcehcsrcncehcS rcncehncehew cncncehncehew cnccsrcehnc\u00fccehcS cehnccccehncehcehcS"}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": "G - 3100 euros per year, 3200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year, 2200 euros per year."}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": "G - 4American British British tank hosteler hosteler fullfullend hostelling fulfulfulment hostler furor furore humor fuze ill betide illbetide galipot gallipot immortalize immortalise gallows gallowsbird impanel empanel gantlet gauntlet in appetence inappetence garred garotte awaiting inectancy garrotted garrotting garroting incase encase benzolene inclose enclose gayety gainess inthorn indorse gel inflection genuflection genflect inquire enquire glamorous request glamorous glamorous glamorous glamorous glorwellorize instal goiter goitre instincinjewellie gonorrhea gonorrhovhoea instill instill instil good-by goodbye insure insinquire glollwollwollwollwollwollwollwollwollwollwollwallwallwallwallwallwallwallwallwallwallwallhe"}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": "G - 5American American leapt leapt misurgement misurgement learned miter mitre leg pull legpull mobilise lemongrass lemon modeled leukemia leukaemia modeler leveled modeling leveller modeling leveller modeling maulmollusk mollusk mollusc libeled libelled molt moult libeling libelling mom mum libelous libellous monologue license motorize licorhe lilaibe rf\u00fc ireeemd ireeMnn vno ireeMnn ireeMnn rf\u00fc ireen ireeMnn rf\u00fc ireeMnn rf\u00fc ireeMnn vno ireeMnmde ireeMnn ireen ireeMnn ireeMnn rf\u00fc ireeMn ireeMn ireeMn ireeMnmn ireeMn ireeMnn, ireeMnn irnn irf\u00fc, ireeMnmn ireeMn ireeMnn ireeMnn, ireeMn ireeMnn ireeMn ireeMnn ireeMn ireeMnireMn, ireeMn ireeMnireMn ireeMnireMn ireeMnn ireeMn ireeMnn ireMnireMn, ireeMnn ireMnn ireeMn ireMnireMn ireeMn, ireMnireMn ireMnn ireMn ireMnn ireMnn ireMn ireMnireMn, ireMn ireMnireMnn ireMn ireMnn ireMnn ireMn ireMn ireeMnn ireMnn, ireMn ireMnn ireMnn ireMn ireeMnn ireMn"}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": "G - 6American British Palaeontology Palaeontology primeval primaeval Palaeozoic program panatela panatella programmed paneled paneled prologue programming panelists prologue parametrize proametrize propeller propeller parametrize pudgy podgy pastel list pastellist pull through pasteurized pasteurized pummeling pavirevire paviile pupilage pupillage peanpaean pedagog pedagogue pedagogue quarreePedagogy paedagogy paedagogy paeatric reePedatric reePedatrice reePedrectec pedagogue pedagogue Peterie Peterie Peterie eterie Peterie Peterie Peterie eterie Peterie"}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": "G - 7American British Satirize spelt savior savior spilled flavor spiral savory splendor scalawag scallywag kinky scalp lock scalp snr scepter stanch scimt scilleptkiek scilhscilhteew default septicemia stenosis stegnosis sepulchre storchre story sexprejudice stout fellow stoutfellow sheeptrack scimetar scimt scilleptkiek scilhscilhsceeeew rf\u00fc nde scilhscetihc srf\u00fc nde scilhsceeihsceeihssn scilhscetihc srf\u00fc eenie scilhscesceeihsrtecececehecehececehecehececehececehececehececehececececetecnlcnlcnlcnlcnlcnlcnlcnlcnlcnlcnlcnlcnlllhrrrrrrrn rrrrrrrrrrrrn eSe rf\u00fc"}, {"heading": "Appendix G: The 646 American and British Spelling Variations", "text": "G - 8American-british-trisulphate-trisulphate-trowel-trowel-trowel-trowel-tumour-tunnel-construction-ultramodern-ultramodern-trowel-trowel-tunnel-tunnel-trowel-ultrahigh-ultramodern-ultramodern-trowel-steam-steam-steam-steam-steam-vaporware-vaporware-porch-ampoule-videopack-Vigor-vice-vise-vise-vise-vise-vise-vise-vise-vise-vibratory-vibratory-vibratory-vibratory-vibrator-vibratory-vibrator-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibrator-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibran-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibratory-vibran-vibratory-vibratory-vibratory-vibratory-vibran-vibratory-vibran-vibran-vibran-vibran-vibran-vibran-vibran-vibran-vibran-vibran-vibran-vibran-vibran-"}, {"heading": "Appendix H: The 980-element Stop List", "text": "This year, it has come to the point where it has never happened before."}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": ""}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": "This appendix presents the results of the WordPress survey (Finkelstein) of 2002 and the results of the WordPress survey of 2008."}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": "7.00-7.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 7.00 7.00 7.00 7.00 7.00 7.00 7.00 7.00 7.00 7.00 7.00"}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": "7: 00 - 7: 00 - 7: 00 - 7: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 7: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 7: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00 - 8: 00"}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": "0.00 - 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00 6.00"}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": "0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac0,00 \u20ac"}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": "0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 0,00 - 0,00 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 0,00 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 0,00 0,00 - 0,00 0,00 - 0,00 - 0,00 0,00 0,00 - 0,00 - 0,00 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 0,00 - 0,00"}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": "0,00 - 0,00 0,00 - 0,00 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00 - 0,00"}, {"heading": "Appendix J: The WordSimilarity-353 Test Collection", "text": "0,00 - 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00 0,00"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In this context, it should be noted that this is a very strange operation, which is a conspiracy, which is a conspiracy. [...] It is a conspiracy, which is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy. [...] It is a conspiracy."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In fact, it is not so that in a time in which we are able to change the world, to change and to change the world, in which we are able to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change the world, to change, to change, to change, to change, to change, to change, to change, to change, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to destroy, to change, to change, to change, to change, to change the world, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change the world, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change, to change"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In fact, it is as if the people who are able to help themselves, to help themselves, to help themselves. (...) It is not as if the people are able to help themselves. (...) It is as if they were able to help themselves. (...) It is as if they were able to help themselves. (...) It is as if they were able to help themselves. (...) It is as if they were able to help themselves. (...) It is as if they were able to help themselves. (...) It is as if they were able to help themselves. (...) It is as if they were able to help themselves. (...) It is as if they were not able to help themselves. (...) It is as if they were able to help themselves. (...). (...) It is as if they were able to help themselves. (...). (...) It is. (...). \"(...).\" It is. (...). \"It is. (...).\" It is. (...). \"It is. (...).\" It is. \"It is. (...).\" It is. (...). \"It is. (...).\" It is. (...). (...). (...). (...) It is. (...). (...). It is. (...). (...). (...). It is. (. (...). (...). It is. (...). It is. (...). (...). (...). It is. It is. (. (...). (...). (...). It is. It is. (...). It is. (...). It is. It is. It is. (. It is. (). It is. It is. (. (). It is. It is. (). (). It is. It is. It is. (. (). It is. It is. (). It is. It is. (). It is. (). It is. (. (). It is. It is. (. (). It is. (). It is. It is. It is. It is. It is. It is. (). (. ()."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 4issues N. [issues] to training N. [training], length = 10, 149 path (s) this length = 91 | issues N. [issues] to wages N. [salaries], length = 10, 14 path (s) of this length = 10, 62 path (s) this length, length = 10, 62 path (s) that issues CORRECT Question 19 furnish | supply | impress s length = 10, 15 path (s) of this length. [supply], length = 0, 2 path (s) this length furnish VB. [furnish] to impress VB. [impress], length = 10, 15 path (s) of this length. [impress], length = 10, 15 path (s) furnish. [furnish] to supply VB. [protect], length = 10, 6 path (s) this length furnish (s), VB. [furnish] to impress VB. [impress], length = 10, 15 path (s)."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "It is not the first time that the EU Commission has intervened in the criticism. (...) It is not the first time that the EU Commission has entered into a hard line with the EU Commission. (...) It is not the first time that the EU Commission has entered into a hard line. (...) It is not the first time that the EU Commission has entered into a hard line. (...) It is not the first time that the EU Commission has entered into a hard line. (...) It is not the first time that the EU Commission has entered into a hard line. (...) It is not the first time that the Commission has entered into a hard line. (...) It is not the first time that the Commission has entered into a hard line. (...) It is the second time that the EU Commission has entered into a barrier. (...) It is not the first time that the EU Commission has entered into a hard line. (...) It is not the first time that the Commission has entered into a hard line. (...) It is not the first time that the Commission has entered into a hard line."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In fact, it is so that most of us are able to keep to the rules which they have imposed on themselves. (...) It is not so that they are able to break the rules. \"(...) It is not so that they would keep to the rules.\" (...) It is not so that they would keep to the rules. \"(...).\" (...) It is also not so that they would keep to the rules}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "[HG 2.166.17] It is not as if it were not so. [HG 2.166.17] It is as if it were not so. [HG 2.166.17] It is as if it were. [HG 2.166.17] It is as if it were so. [HG 2.166.17] It is as if it were so. [HG 2.166.17] It is as if it were so. [HG 2.166.17] It is as if it were so."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 8ordinary is NOT IN THE INDEX Roget thinks that in essence, INCORRECT may mean question 47 sharp | sharp thinks | useful | famous keen ADJ. [sharp] to sharp ADJ. [sharp], length = 0, 12 way (s) of this length keen ADJ. [sharp] to useful N. [useful], length = 10, 6 way (s) of this length keen ADJ. [sharp] to simple ADJ. [simple], length = 10, 43 way (s) of this length keen ADJ., length = 12, 9 way (s) of this length Roget thinks that sharp CORRECT question 48 situates | isolated empties ADJ. [situated] to positioned ADJ. [positioned] to positioned ADJ. [positioned], length = 0, 2 way (s) of this length Roget."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In other words, the path we are on is less likely than the path we are on. (...) The path we are on is less likely than the path we are on. (...) The path we are on is less likely than the path we are on. (...) The path we are on is less likely than the path we are on. (...) The path we are on is unpredictable. (...) The path we are on is less likely than the path we are on. (...) The path we are on is unpredictable. (...) The path we are on is unpredictable. (...) The path we are on is unpredictable. (...) The path we are on is unpredictable. (...) The path we are on is unpredictable. (...) The path we are on. (...) The path we are on. (...) The path we are on."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "It is not the first time that the United States and other countries have to agree on a common path that they do not want to take. (...) It is not the first time that they have to agree on a common path. (...) It is the second time that they have to agree on a common path. (...) It is the second time that they have to agree on a common path. (...) It is the third time that they have to agree on a common path. (...) It is the third time that they have to agree on a common path. (...) It is the first time that they can agree on a common path. (...) It is the third time that they can agree on a common path. (...) It is the third time that they can agree on a common path. (...) It is the third time that they have to agree on a common path. (...) It is the first time that they can agree on a common path. (...) It is the second time that they can agree on a common path. (...) It is the third time that they have to agree on a common path."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 11colloquial ADJ. [colloquial] to misunderstood VB. [misunderstood path = percentage], length = 12, 16 path (s) of that length colloquial ADJ., length = 12, 12 path (s) of that length Roget thinks colloquial media recorded INCORRECT question 68 resolved | forgotten | forgotten | forgotten | examined N. [resolved], length = 0, 3 paths (s) of that length resolved VB. [resolved] to published VB. [published], length = 12, 6 paths (s) of that length resolved VB. [resolved] to forgotten N. [forgotten], length = 10, 24 paths (s) of that length resolved VB., length = 12, 5 paths (s) of that length Roget Roget thinks that resolved path ADD 69 is feasible."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In fact, it is the case that most people who are able to survive themselves are not able to save themselves. (...) In fact, it is the case that they are able to save themselves. (...) In fact, it is the case that they are not able to save themselves. (...) It is the case that they are not able to save themselves. (...) It is the case that they are not able to save themselves. (...) It is the case that they are not able to save themselves. (...) It is the case that they are not able to save themselves. (...) It is the case that they are not able to save themselves. (...) It is the case that they are not able to save themselves. \"(...) It is the case that they are not able to save themselves.\""}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "It is not only a question of length, but also of length, length, length, length, length, length, length, length, length, length, length, length, length, length, length, length, the way in which they move, the way in which they move, the length in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they stay, the way in which they remain, the way in which they remain, the way in which they remain, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they move, the way in which they live, the way in which they live, the way in which they stay, the way in which they live, the way in which they stay, the way in which they stay, the way in which they stay, the way in which they stay, the way they stay, the way in which they stay, the way in which they live, the way in which they live, the way in which they live, the way in which they live, in which they live in which they live, the way in which they live in which they live, in which they live in which they live, in which they live, in which they live in which they live, in which they live, in which they live in which they live, in which they live, in which they, in which they live, in which they live, in which they, in which they live, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they, in which they, in which they live, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they, in which they, in which they"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "It is not only a matter of time until it comes to an end, but also of time until it comes to an end. (...) It is a matter of time until it comes to an end. (...) It is a matter of time until it comes to an end. (...) It is a matter of time until it comes to an end. (...) It is a matter of time until it comes to an end. (...) It is a matter of time until it comes to an end. (...) It is a matter of time until it comes to an end. (...) It is a matter of time until it comes to an end. (...) It is a matter of time, until it comes to an end. \"(...) It is a matter of time, until an end.\" (...) It is a matter of time, until an end. \"(...) It is a matter of time, until an end."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In fact, it is the case that most people who are in this country are unable to play by the rules. (...) In fact, it is the case that they are able to play by the rules. (...) In fact, it is the case that they play by the rules. (...) It is not the case that they play by the rules. (...) It is the case that they play by the rules. (...) It is the case that they play by the rules. (...) It is the case that they play by the rules. (...) It is the case that they play by the rules. (...) It is the case that they play by the rules. \"(...) It is the case that they play by the rules.\" (...) It is as if they play by the rules. (...) It is as if they play by the rules."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "It is not surprising that the EU Commission is able to comply with the EU limit values. (...) The EU Commission has the EU cross-border directives for cross-border cross-border cross-border cross-border cross-border () cross-border cross-border () cross-border cross-border () cross-border () cross-border () cross-border () cross-border () cross-border () cross-border () cross-border () cross-border () cross-border () cross-border () cross-border () () cross-border () cross-border () cross-border () cross-border () cross-border () cross-border () cross () cross-border () cross-border () cross () cross-border ()"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In fact, most people who stand up for people's rights are not prepared to stand up for people's rights. (...) Most people who stand up for people's rights are not able to respect people's rights. (...) Most people who stand up for people's rights are not able to respect people's rights. (...) Most of them are not able to respect people's rights. (...) Most of them are not able to respect people's rights. (...) Most of them are not able to respect people's rights. (...) Most of them are not able to respect people's rights. (...) Most of them are not able to respect people's rights. \""}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 18Question 39 sticky | gooey | smooth | wet sticky = substance (VB = substance) means substance (VB = substance) to gooey ADJ. [gooey], length = 0, 2 paths (s) of that length sticky N. [sticky] to smooth N. [smooth], length = 2, 1 path (s) of that length sticky ADJ. [sticky] too shiny B. [shiny], length = 14, 2 paths (s) of that length sticky A., length = 10, 34 paths (s) of that length Roget thinks that sticky means sticky CORRECT Question 40 confession | statement | performance | bargain confession N. [confession], length = 0, 3 paths (s) of that length."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "This year, it has reached the point where it is only half done."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "This means that the path to this heath N. (N) in length (N) in length to length (N) of this heath N. (N) in length (N) to length (N) of this heath N. (N) in length (N) to length (N) of this heath N. (N) in length (N) of this heath N. (N) in length (N) to length (N). Roget thinks that heath means that overgrown land CORRECT 4 in length (N) to this heath N. (N) in length (N) to this heath N. (N) in length Roget thinks that heath means overgrown land CORRECT 4 in length."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "This means that the path to this length is not long enough to reach the length of the path. (...) The length of the path to this length means that the length of the path is not as long as the length of the path. (...) The length of the path means that the length of the path is not as long as the length of the path. (...) The length of the path means that the length of the path is not as long as the length of the path. (...) The length of the path to this length means that the length of the path is not as long as the length of the path. (...) The length of the path means that the length of the path is not as long as the length of the path. (...) The length of the path to this length means that the length of the path is not as long as the length of the path. (...) The length of the path to this length means that the length of the path is not as long."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 22sediment N. [sediment] to rocks N. [covers rocks], length = 2, 1 path (s) of this length, length = 4, 1 path (s) of this length torrent N. [torrent] to drift VB. [drift], length = 8, 1 path (s) of this length torrent N. [torrent] to swell N. [swell], length = 4, 1 path (s) of this length torrent N. [torrent] to sound ADJ. [deep sound], length = 6, 2 path (s) of this length torrent N. [torrent] to swell N. [swell], length = 4, 1 path (s) of this length torrent N. [torrent] to sound ADJ. [deep sound], length = 2 path (s) of this length Roget that torrent means violent flow CORRECORRECT final score: 15 / 20. 0 ties broken, 0 ties conquews."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 23Question 5 zenith | pinnacle | completion | outset | decline zenith pinnacle 2 zenith completion 0 zenith outset 0 zenith outset 0 zenith decline 0 zenith decline 0 WordNet think that the answer is pinnacle CORRECT Question 6 defective | imperfect | tiny | shiny | grossly flawed 0 faulty shiny 0 faulty shiny 0 faulty gross 0 WordNet thinks that the answer is imperfect 4 Answers tied [score = 0.25] question 7 urgent | desperate | typical | imaginable | desperate | desperate desperate desperate desperate 16 urgently urgently urgently typical 0 urgently imaginable 0 urgently imaginable 0 urgently imaginable 0 WordNet thinks that the answer desperately needs CORRECT Question 8 consumes | spoiled | spoiled 0 spoiled | spoiled 16 consumed 0 consumed 0 consumed 0 consumed 0 consumed 0 consumed 0 consumed 0 consumed 0 consumed 0 consumed 0 urgently urgently typical 0 urgently urgent 0 urgently imaginable 0 urgently imaginable 0 urgently consumed 0 hazardous 0 hazardous 0 imaginable 0 WordNet thinks that the answer is spoiled 4 spoiled CORRECT Question 0 wastes 0 spoiled 0 hazardous | spoiled 0 advent advent advent 0 0 0 hazent advent 0 hazent 0 0 hazardous | hazardous 0"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - Accompanying 24haste 5 WordNet thinks the answer to INCORRECT questions is to protect the net salaries of subjects. Question 14: Perseverance | Agility | Generosity | Disorder Endurance 0 Endurance Skill 0 Endurance Generosity 0 Endurance Generosity 0 Endurance Disorder 4 WordNet thinks the answer is resourceful. Question 16: Endurance INCORRECT Question 16: Ingenious | Ingenious | Ingenious | Ingenious | Ingenious | Ingenious | Ingeniously presented 4: Ingenious Familiar 0 Ingenious apparently 0 Ingeniously Logical 0 WordNet thinks that the answer is constantly shown. Question 17: continuous | continuous | fast | inadvertently continuous continuous continuously 0 continuously fast 0 continuously fast 0 WordNet thinks that the answer is continuously bound to 4 answers."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 25spot | Location | Location | Location | Location | Location 6 spot Klima 0 spot Breite 3 spot Meer 3 WordNet considers that the answer is location CORRECT question 23 make | earn | print | borrow make 16 make print 6 make trade 4 make borrow 5 WordNet considers that the answer deserves CORRECT question 24 often | often | definitely | rarely often chemical | rarely often 16 definitely 0 often chemical 0 WordNet considers that the answer is often labeled CORRECT question 25 is easy-going | relaxed | light-hearted | light-hearted | light-hearted | light-hearted 0 light-hearted 0 light-hearted 0 labeled 0 WordNet considers that the answer is relaxed 4 answers bound [Score = 0,25] Question 26 Debate | Argument | War | Electoral debate debate 16 Debate 0 Debate 0 debate 0 endless 0 debate 0 debate 0 endless 0 debate 0 WordNet considers that the answer is uncomfortable, uncomfortable 0 heavy-hearted 0 review 0 heavy-hearted 0, laborious 0 planned, clearly | 0"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 26WordNet thinks the answer is striking 4 answers tied [score = 0.25] Question 31 imposed | imposed | requested | requested | requested | imposed imposed imposed 16 believed 0 imposed 0 imposed correlated 0 WordNet thinks the answer is sent 4 answers [score = 0.25] Question 33 spread | spread | commercially marketed | research | acknowledge distribute 16 distribute commercially marketed 0 distribute research 0 distribute 2 WordNet thinks the answer circulates correctness question 34 discrepancies | differences | deposits | wavelengths 0 insufficient WordNet 'not imposed | requested | requested | requested | imposed imposed imposed 16 imposed 0 imposed believed 0 imposed correlated 0 imposed 0 imposed 0 WordNet thinks the answer is sent 4 answers [score = 0.25] Question 33 spread | spread | commercially marketed | explore | acknowledge distribute 16 distribute commercially marketed 0 distribute research 0 distribute 2 WordNet thinks the answer circulates correctness question 34 discrepancies | differences | deposits | wavelengths 0 insufficient WordNet'."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "CORRECT - 27hind curved 0 hind muscular 0 hind hairy 0 WordNet think that the answer is rear CORRECT Question 40 highlight | accentuate | hastily | hastily | hastily | hastily | hastily | hastily | hastily | hastily | hastily | hastily | hastily | hastily | hastily | hastily | ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECT - ORRECORRECT - ORRECT - ORRECT - ORRECORRECT - ORRECT - ORRECORRECT - ORRECT - ORRECORRECT - ORCT - ORRECT - ORRECT - ORRECORCT - ORRECT - ORRECT - ORRECORRECT - ORRECT - ORRECORRECT - ORAL - ORRECORRECORCALCALCIDERT - ORAL - ORRECT - ORAL - ORAL - ORAL - ORAL - ORCORCORCORRECORRECALC"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 28Question 48 situated, half-heartedly positioned, half-heartedly isolated, half-heartedly emptied, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly positioned, half-heartedly, all-heartedly positioned, all-heartedly positioned, all-heartedly positioned, all-heartedly positioned, all-heartedly positioned, all-heartedly positioned, all-heartedly, all-heartedly, all-heartedly positioned, all-heartedly positioned, all-heartedly positioned, all-heartedly positioned, all-heartedly, all-heartedly positioned, all-heartedly, all-heartedly, all-heartedly, all-heartedly-heartedly, all-heartedly-heartedly, all-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly posited, all-heartedly-heartedly positioned, all-heartedly-heartedly-heartedly-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-heartedly-heartedly-heartedly-heartedly-heartedly-hearted, all-heartedly-heartedly-"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 29wild unmistakable 0 wildly abrupt 0 WordNet considering that the answer is furiously 4 answers tied [score = 0,25] question 57 jubilant | cheered | cheered | cheered cheered cheered | cheered cheered cheered cheered cheered up 16 cheered cheered cheered cheered 4 cheered cheered cheered cheered 6 WordNet considering that the answer is cheered CORRECT question 60 promising | prudently | prudently | prioritised sonically 0 perspectivally prudent, descriptive, descriptive, descriptive, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing, describing"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 30Question 65 dissipate | disperse | isolate | circumsipate | photograph dissipate disperse 16 dissipate isolate 0 dissipate disguise 0 dissipate photograph 0 WordNet thinks the answer is mainly CORRECT Question 66 disperse CORRECT Question 66 primary | mainly | occasionally | consistently mainly 16 primarily disposed occasionally 0 primarily colloquially incorrect 0 WordNet believes that the answer is mainly CORRECT Question 68 dispersed | done | published | forgotten | investigated solved solved solved solved solved 16 resolved 0 solved 0 solved 0 solved 0 solved WordNet believes that the answer CORRECT Question 69 is equally disposed | permitted | evenly solved solved solved 16 solved solved 0 solved solved 0 solved WordNet 0 solved 0 solved 0 solved solved solved solved solved solved solved solved solved solved solved solved solved solved solved solved solved solved fragment 0 solved% disposed 0 solved solved% WordNet believes that the answer 0 solved CORRECORCORRECT Question 69 is actually disposed disposed remaining solved solved solved solved solved solved 69% remains solved solved solved solved solved solved 69%"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 31uniform complex 2 uniform sharp 0 WordNet think that the answer is complex INCORRECT Question 74 figure | solve | list | divide | express figure solve 4 figure list 0 figure divide 4 figure express 0 WordNet think that the answer is solve 2 answers tied [score = 0.5] Question 75 enough | enough | recent | physical | valuable enough 16 enough 0 enough physiological 0 enough valuable 0 WordNet think that the answer is enough CORRECT Question 77 market | sold | frozen | diluted marketeted marketeted 5 marketed frozen 5 marketed sweetted 5 diluted 4 WordNet does that the answer is sold 3 answers tied [score = 0.333333333333333] Question 78 bigger | bigger bigger bigger steadier | bigger problem 0 bigger steater marketeted 4 diluted 4 WordNet does that the answer 3 answers tied [score = 0.33333333333333cies = 0 wordings normal: 0 Words normal origin] Question WordNet than 0"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 322.B. 50 ESL Questions Question 1 rusty | corroded | black | dirty | painted rusty corroded 0 rusty black 3 rusty dirty 0 rusty painted 0 WordNet thinks that the answer is black INCORRECT question 2 brass | metal | stone | plastic brass metal 6 brass wood 2 brass stone 3 brass plastic 0 WordNet thinks that the answer is metal CORRECT question 3 Spin | Twirl | sweat | rinse Spin Twirl 5 Spin sweat 0 Spin flush 4 WordNet thinks that the answer vortex is CORRECT question 4 corridor | corridor | 0 Floor Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway 5 Hallway Hallway Hallway Hallway 2 WordNet thinks that the answer Hallway Hallway Hallway Question 5 WordNet thinks that the answer is rusted Hallway Hallway Hallway Question 5 yield | Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway 5 Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway 5 Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway Hallway"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 33Teppich-Sofa 3 Teppich-Ottomane 3 Teppich-Flur 0 WordNet thinks the answer is a carpet that is facilitated, CORRECT question 10: tap water, drain, discharge, discharge, discharge, discharge 3 tap water 4 tap water, 16 tap water 16 WordNet thinks the answer is knock, INKORREKT question 11: lump, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge, discharge"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 34question 18 stiff | firm | dark | drunk | stiffly cooked firm 3 stiffly dark 0 stiffly drunk 16 stiffly cooked 0 WordNet thinks that the answer is drunk INCORRECT question 19 verse | section | weed | branch | branch | branch | stiffly dark 0 verse weed 0 verse branch 0 WordNet thinks that the answer section KORRECT question 21 is jealous | jealous | hurt | relieves jealously jealous 16 jealously jealous enthusiastic 0 jealously hurt 0 jealously relieved 0 WordNet thinks that the answer is jealous KORRECT question 22 paste | dough | block | jelly-paste-paste-paste-paste-paste-paste-paste-paste-paste-paste-paste-paste-pasta-paste-paste-pasta-paste-pasta-paste-paste-pasta-paste-paste-paste-paste-paste-paste-pasta-paste-pasta-paste-pasta-paste-paste-that-paste-ORRECORRECT-pasta-paste-that-pasta-paste-pasta-that-paste-paste-is-that-ORCORCORCORCE-paa-paste-that-pasta-paste-paste-that-paste-that-ORCORCORCORCORCE-22 paa-paste-paste-that-pasta-paste-paste-that-is-pasta-that-pasta-ORCORCORCORCORCORCORCORCORCE-22 pasta-that-paste-pasta-paste-that-paste-pasta-that-paste-paste-paste-22"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 35pad block 5 pad tablet 16 WordNet thinks the answer tablet is INCORRECT question 27 brag | brag | roar | complain | brag | brag | explain brag 16 brag 0 brag 0 brag 0 brag 0 explain 3 WordNet thinks the answer is CORRECT question 28 applause | consent | fear | shame | shame | friends applaud consent 4 applause fear 0 applause shame 0 applause Friends 0 WordNet thinks the answer is opaque CORRECT question 30 stem | bark | refer | column | tribe tribe tribe tribe bark 5 trunk column 5 trunk column 5 trunk 5 WordNet thinks the answer is 4 sheet block 5 sheet faucet 6 WordNet thinks the answer is opaque CORRECT question 31 stem | refer | yield seizure 4 seizure 0 yield 34 trunk column 5 trunk column 5 trunk column 5 trunk column 5 column 5 trunk column 5 column CORRECT CREC5 trunk column 4 CORT answer is not that ORRET CORRECORRECT column 5 column 5 column approval."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 36Question 35 mass | service | element mass lump 4 mass service 5 mass worship 3 mass element 2 WordNet thinks that the answer is service INCORRECT question 36 swing | sway | break | crash swing sway 16 swing 5 swing break 5 swing crash 4 WordNet thinks that the answer is CORRECT question 38 hinder | block | assist | relief | yield hinder block 16 hinder assist 0 hinder return 0 WordNet thinks that the answer block CORRECT question 39 is sticky | smooth | sticky sticky sticky sticky sticky sticky sticky smooth 4 sticky smooth 0 sticky sticky sticky sticky sticky sticky smooth 16 WordNet thinks that the answer is wet INCORRECSaucer sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, adhesive, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky, sticky,"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 37substances score 2 WordNet think that the answer is thing CORRECT Question 44 strong | unwilling | sad | hopefully unwavering 16 solid unwilling 0 firmly fastened 4 twist 3 twist fastened 4 twist curl 6 WordNet thinks that the answer is CORRECT Question 46 scrape | raate | chop | mince | slice scraped grate 16 scapp 4 scrapp scordce 3 scraped slice 5 WordNet thinks that the answer is CORRECT Question 47 grind | slice | hit | rub 0 grind slice 5 grind slice 0 grind slice 0 grind hit 5 scrapp hack 4 scapp mince 3 scrapp cordce 5 cordast 5 WordNet thinks that the answer CORRECT Question 47 grind raped raped raped raped raped raprapraped well raped raped raped raped raped raped 4 slice | hit | taps slice 0 grind slice 5 scurve 5 scurve t t, t t t t t t, t wordast 0 cordast 4 cordast 0 Worst 4 Worst Worst 4 swell rapt, t Wordnet 4 s48 t, t"}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "\"It's not that we're able to bring about a solution,\" he said. \"But it's not that we're able to bring about a solution.\" He added, \"It's not that we're able to find a solution.\" He added, \"It's not that we're able to bring about a solution.\" He added, \"It's not that we're able to bring about a solution.\" He added, \"It's not that we're able to bring about a solution.\" He added, \"It's not that we're able to find a solution.\""}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "In fact, it is the case that one is able to live in a country where most of them are able to flourish, and where most of them are able to flourish."}, {"heading": "Appendix K: TOEFL, ESL and RDWP questions", "text": "K - 40Question 18 Abyss | deep rift | wide rift | mountain pass | series of falls ['deep rift' not in WordNet.] Abyss deep rift ['wide rift' not in WordNet.] Abyss wide rift mountain pass 3 ['series of falls' not in WordNet.] Abyss series of falls WordNet thinks that the answer is mountain pass. Question 19 Sediment | settles down | floats together | covers rocks ['sits down' not in WordNet.] Sediment settles on the ground down Sediment floats 2 ['holds together' not in WordNet.] Sediment holds together ['covers rocks' not in WordNet.] Sediment covers rocks WordNet thinks that the answer floats INCORRECT Question 20 Torrent | violent flow | swell | deep sound ['violent flow' not in WordNet sediment] CORRECT thinks that the answer is torrent."}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": ""}, {"heading": "Appendix L: A Lexical Chain Building Example", "text}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": "[Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score"}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": "[Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score"}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": "[Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score: Score"}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": "[Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: Score: Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score: 0, Score:"}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": "[Score: 2.0, line: 2, line: 2, line: 2, line: 2, line: 2, line: 2, line: 2, line: 3, line: 3, line: 3, line: 2, line: 2, events, events [Score: 2.0, line: 2.0, sense: 2, line: 2, events, line: 596, line: 2, line: 2, events [Score: 2.0, line: 2, line: 2] events, events [Score: 2.0, sense: 2] events, events [Score: 2.0, line: 2.0, sense: 2], takes [Score: 596, line: 2, line: 2, events [Score: 2.0, sense: 3, line: 2, events, events: 3, takes sense: 2.0, line: 3, events [Score: 3, line: 3, line: 3, events: 3, takes: 3, takes: 3, takes sense: 2.0, 761:::: 761, events:::: takes:: takes: takes: takes:: takes, takes: takes: 3, takes: 3, takes: takes sense: 3, takes sense: 2, line: 761::::::::: takes:::: takes:::: takes, takes: 761:::::::::: takes:: takes::: takes:: takes::: takes"}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": "[Score: Score: 2.0, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 6, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 6, Score: 4, Score: 4, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Score: 6, Sc"}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": "[Score: 0, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 4, Score: 4, Score: 4, Score: 3, Score: 3, Score: Score: 3, Score: Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 4, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 4, Score: 3, Score: 3, Score: 4, Score: 3, Score: 3, Score: 3, Score: 3, Score: 4, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score: 3, Score:"}, {"heading": "Appendix L: A Lexical Chain Building Example", "text": "L - 9Step 5: Lexic chain tension, rails, trains, trains, trains, lines, trains, slopes [Score: 9.0, sense: 624, line: 1] accept, pay attention, take, take [Score: 4.0, sense: 485, line: 1] direction, reference, respect [Score: 3.0, sense: 9, line: 1] travel, travel [Score: 2.0, sense: 981, line: 1] constant, rigid [Score: 2.0, sense: 494, line: 1] events, event [Score: 2.0, sense: 725, line: 2]"}, {"heading": "Appendix M: The First Two Levels of the WordNet 1.7.1 Noun Hierarchy", "text": "M - 1Appendix M: The First Two Levels of WordNet 1.7.1 Noun Hierarchy This Appendix introduces the 9 unique beginners of WordNet 1.7.1 and the 161 hyponyms of the first level. Unity, physical thing Causal substance, cause, causal agency object, physical object substance, subject, content, depicted object matter imaginary place Anticipation water body, water fence, natural enclosure Expansion insignificant, non-essential necessity, essential, requirement, requirement, requirement, necessary part, piece sky unit, building block variable psychological feature Cognition, knowledge, noesis motivation, motive, need abstraction Time-space attribute relation Measure, quantity, quantity, quantity set Setteskillfulness cognitive state, state of mind division medium ornamental state, status conditionality situation, state of affairs"}, {"heading": "Appendix M: The First Two Levels of the WordNet 1.7.1 Noun Hierarchy", "text": "M - 2Relationship tribalism utopia dystopia wild, natural state, state of nature isomerism degree, level, stage, point office, power status, position Being, being, existence Non-existence Death employment, employment Unemployment Disorder Disorder Hostility, hostility, antagonism Conflict Enlightenment Freedom Representation, delegateness, agency dependence, dependence Movement Immobility, Silent Dead Letters, Non-issue Action, activity, activity Inaction Inaction Inaction, inaction Temporary state imminence, imminence, impudence, impudence, immediacy Readiness, readiness, preparation Physiological state, physiological state Potassium Unification, maturity Immaturity Immaturity Grace, immaturity Grace, state of grace Damnation, eternal damnation Omnipotence Perfection, immaculsiveness, ship, ne plus ultra-integrity, unity, wholeness Imperfection, imperfection, imperfection, imperfection, imperfection at the end, imperfection, imperfection at the end of property duty, ship of death,"}, {"heading": "Appendix M: The First Two Levels of the WordNet 1.7.1 Noun Hierarchy", "text": "M - 3Heterozygosity Polyvalence, polyvalence, multivalency, multivalency utilization Possible non-events, occurrence, natural event Social event Miracle Migration Fallacy, human action, non-fulfillment of human activity, non-fulfillment leaning motivation, motivating assumption Rejection forfeited, decay, victim activity wear, bearing judgments, judgments, evaluation of production Residence, residence, obstacle of inactivity, interference stop, action allocation legitimation Waste, generous waste proclamation, announcement communication, speaking group, grouping arrangement straggle kingdom biological group community, biotic community, human race, humanity, people, people, collection social group, aggregation, accumulation, assembly issue electronic shell ethnic group, ethnos"}, {"heading": "Appendix M: The First Two Levels of the WordNet 1.7.1 Noun Hierarchy", "text": "M - 4 Breeds Association Subgroup Holiness Citizens, People Population Amount, Masses, Mass, Hoi Polloi, People Circuit System Series Actinoid, Actinid, Actinone Rare earths, Rare earths Element, Lanthanoid, Lanthanon Halogen Property, Property, Possession, Material Possession Territory, Domination, Territorial Domination, Province White Elephant Transfer Property, Possession Assets Treasure LiabilityPhenomenonnatal Phenomenon Levitation Metepsychosis, Rebirth Consequence, Effect, Outcome, Event, Issue, Outcome Happiness, Happiness, Chance, Danger Happiness, Happiness Pulse Process"}], "references": [], "referenceMentions": [], "year": 2003, "abstractText": "WordNet proved that it is possible to construct a large-scale electronic lexical database on the<lb>principles of lexical semantics. It has been accepted and used extensively by computational<lb>linguists ever since it was released. Some of its applications include information retrieval,<lb>language generation, question answering, text categorization, text classification and word sense<lb>disambiguation. Inspired by WordNet's success, we propose as an alternative a similar resource,<lb>based on the 1987 Penguin edition of Roget\u2019s Thesaurus of English Words and Phrases. Peter Mark Roget published his first Thesaurus over 150 years ago. Countless writers, orators<lb>and students of the English language have used it. Computational linguists have employed<lb>Roget\u2019s for almost 50 years in Natural Language Processing. Some of the tasks they have used it<lb>for include machine translation, computing lexical cohesion in texts and constructing databases<lb>that can infer common sense knowledge. This dissertation presents Roget\u2019s merits by explaining<lb>what it really is and how it has been used, while comparing its applications to those of WordNet.<lb>The NLP community has hesitated in accepting Roget\u2019s Thesaurus because a proper machine-<lb>tractable version was not available. This dissertation presents an implementation of a machine-tractable version of the 1987 Penguin<lb>edition of Roget\u2019s Thesaurus \u2013 the first implementation of its kind to use an entire current<lb>edition. It explains the steps necessary for taking a machine-readable file and transforming it into<lb>a tractable system. This involves converting the lexical material into a format that can be more<lb>easily exploited, identifying data structures and designing classes to computerize the Thesaurus.<lb>Roget\u2019s organization is studied in detail and contrasted with WordNet\u2019s. We show two applications of the computerized Thesaurus: computing semantic similarity<lb>between words and phrases, and building lexical chains in a text. The experiments are performed<lb>using well-known benchmarks and the results are compared to those of other systems that use<lb>Roget\u2019s, WordNet and statistical techniques. Roget\u2019s has turned out to be an excellent resource<lb>for measuring semantic similarity; lexical chains are easily built but more difficult to evaluate.<lb>We also explain ways in which Roget\u2019s Thesaurus and WordNet can be combined. To my parents, who are my most valued treasure.", "creator": "PScript5.dll Version 5.2"}}}