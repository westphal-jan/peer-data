{"id": "1204.1581", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Apr-2012", "title": "A new approach of designing Multi-Agent Systems", "abstract": "Agent technology is a software paradigm that permits to implement large and complex distributed applications. In order to assist analyzing, conception and development or implementation phases of multi-agent systems, we've tried to present a practical application of a generic and scalable method of a MAS with a component-oriented architecture and agent-based approach that allows MDA to generate source code from a given model. We've designed on AUML the class diagrams as a class meta-model of different agents of a MAS. Then we generated the source code of the models developed using an open source tool called AndroMDA. This agent-based and evolutive approach enhances the modularity and genericity developments and promotes their reusability in future developments. This property distinguishes our design methodology of existing methodologies in that it is constrained by any particular agent-based model while providing a library of generic models", "histories": [["v1", "Sat, 7 Apr 2012 00:10:33 GMT  (655kb)", "http://arxiv.org/abs/1204.1581v1", "10 pages, 12 figures, A practical application of a method of designing multi-agent systems based on the AUML language and the MDA approach at \"the 4th IEEE Workshop on Information Technologies and Communication (WOTIC'11)\", Casablanca, 13 - 15 October 2011, International Journal of Advanced Computer Science and Applications(IJACSA) Volume 2 No. 11 November 2011"]], "COMMENTS": "10 pages, 12 figures, A practical application of a method of designing multi-agent systems based on the AUML language and the MDA approach at \"the 4th IEEE Workshop on Information Technologies and Communication (WOTIC'11)\", Casablanca, 13 - 15 October 2011, International Journal of Advanced Computer Science and Applications(IJACSA) Volume 2 No. 11 November 2011", "reviews": [], "SUBJECTS": "cs.MA cs.AI", "authors": ["sara maalal", "malika addou"], "accepted": false, "id": "1204.1581"}, "pdf": {"name": "1204.1581.pdf", "metadata": {"source": "META", "title": "A new approach of designing Multi-Agent Systems", "authors": ["Sara Maalal", "Malika Addou"], "emails": [], "sections": [{"heading": null, "text": "148 | P a g e www.ijacsa.thesai.orgto implement large and complex distributed applications [1]. In order to support the analysis, design and development or implementation of multi-agent systems, we attempted to present a practical application of a generic and scalable method of an MAS with a component-oriented architecture and an agent-based approach that allows MDA to generate source code from a particular model. On AUML, we designed class diagrams as a class metmodel of various agents of an MAS. Then, we generated the source code of the models developed using an open source tool called AndroMDA. This agent-based and evolutionary approach improves modularity and generation developments and promotes their reusability in future developments. This property distinguishes our design methodology of existing methods in that it is constrained by a particular agent-based model and simultaneously generates a library [2]."}, {"heading": "A. Definitions", "text": "- An agent is a computer system within an environment with autonomous behavior to achieve the goals set during its design [3].- A multi-agent system is a system that includes a set of agents who interact with communication protocols and are able to interact with their environment. Different agents have different spheres of influence, in the sense that they have control over (or at least can influence) different parts of the environment. In some cases, these spheres of influence may overlap; the fact that they coincide can cause dependency reports between agents [4].The MAS can be used in various fields of application such as e-commerce, economic systems, distributed information systems, organizations, etc."}, {"heading": "B. Types of agent", "text": "In fact, it is so that most of them are able to survive themselves by blaming themselves and others. (...) Most of them are able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are unable to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are able to survive themselves."}, {"heading": "A. Description of the AUML generic Class Diagram", "text": "The first part, which represents a relationship between the agent and his environment, consists of two important classes: - Environment, - Agent Environment is an important class on the diagram because it affects the whole system. Data of the agent is represented by two sections, attributes and perceptions. Attributes can be all the information that an environment should have, plus the following general information: Deterministic Environment is an important class on the diagram when the next state of the environment is determined in a unique way by the current state and action of the agent. If the result is uncertain, as a result of the agent's action, the environment can develop in different ways."}, {"heading": "B. The generic UML Class Diagram", "text": "This generic AUML class diagram was then converted into a generic class diagram based on UML notation. This transformation enables the designer to easily use AndroMDA to generate the source code that corresponds to his UML diagram [1]. The transition from AUML to UML was accomplished by following the following steps: 1. Maintain the same titles of classes and associations that make up the AUML diagram. 2. Assign roles, perceptions, intentions, beliefs and representations of each individual agent and any additional attributes in the attribute parts of the UML class. 3. Combine all methods or functions in the operational part of the UML class. In the end, we obtain the following result, which is shown in Fig. 6: 154 | P a g e www.ijacsa.thesai.orgOur approach can be a disadvantage. It is the complexity of generating a code source without having to build it into a good MDA application."}, {"heading": "A. Description", "text": "Our proposed AUML class diagram was used to design a multi-agent system for a chat application. This example is structured as follows [5]: Three reactive agents: These agents will be the chatters, and the interest that they are reactive agents depends on the fact that an agent does not respond before the user specifies the name of the recipient to the application. Therefore, an agent reacts to prepare to capture the name and message and send it to the person concerned, and also reacts to delete the message sent and received from its range in its interface. We can obtain the following AUML and UML diagrams corresponding to this example in Figures 7 and 8:"}, {"heading": "B. Realization", "text": "This year, it has reached the point where it will be able to retaliate."}], "references": [{"title": "D.Sanchez, A.Moreno, \u201cOrganizational structures supported by agent-oriented methodologies", "author": ["D. Isern"], "venue": "The journal of Systems and Software,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "A Model Design of Multi-Agent Systems", "author": ["S. Maalal", "M. Addou"], "venue": "Proceedings of the 2nd Edition of the IEEE International Conference on Multimedia Computing and Systems ICMCS\u201f11, Ouarzazate Morocco,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Intelligent Agents, Multi agent systems, In The MIT Press, \u201cA modern Approach to Distributed Artificial Intelligence", "author": ["M. Wooldridge"], "venue": "(England Massachutts London: MIT Press Cambridge,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1995}, {"title": "An Introduction to Multi-Agent", "author": ["M. Wooldridge"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2000}, {"title": "A practical application of a method of designing multi-agent systems based on the AUML language and the MDA approach", "author": ["S. Maalal", "M. Addou"], "venue": "Proceedings of the Fourth Workshop on Information Technologies and Communication WOTIC\u201f11, Casablanca, Morocco,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Evaluation of modeling techniques for agentbases systems", "author": ["O. Shehory", "A. Sturm"], "venue": "Proceedings of the 5th International Conference on Autonomous Agents,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2001}, {"title": "On agent-based software engineering", "author": ["N.R. Jennings"], "venue": "Artificial Intelligence,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "Intelligent agent: Theory and practice", "author": ["M. Wooldridge", "N.R. Jennings"], "venue": "The Knowledge Engineering Review,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1995}, {"title": "Segrounichi, Intelligents agents, Agents Intelligents", "author": ["A.M. Florea", "D. Kayser", "S. Pentiuc", "A. El Fallah"], "venue": "Politechnica University of Bucharest,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2002}, {"title": "The Gaia methodology: basic concepts and extensions", "author": ["L. Cernuzzi", "T. Juan", "L.Sterling", "F. Zambonelli"], "venue": "Methodologies and Software Engeneering for Agent Systems, US: Springer,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2004}, {"title": "The INGENIAS methodology and tools", "author": ["J. Pav\u00f3n", "J.J. G\u00f3mez-Sanz", "R. Fuentes"], "venue": "Idea Group,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2005}, {"title": "Multi-agent system development based on organizations", "author": ["E. Argente", "V. Julian", "V. Botti"], "venue": "Electronic Notes in Theoretical Computer Science, vol.150,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2006}, {"title": "The MaSE methodology", "author": ["S.A. DeLoach"], "venue": "Methodologies and Software Engineering for Agent Systems,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2004}, {"title": "Design Diagrams for Multi-agents Systems", "author": ["S. Lynch", "K. Rajendran"], "venue": "Proceedings of the 16th Annual Workshop of the Psychology of Programming Interest Group PPIG\u201f04,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2004}, {"title": "Trencansky, \u201cAgent Modeling Language (AML): A Comprehensive Approach to Modeling MAS", "author": ["I.R. Cervenka"], "venue": "Informatica, vol. 29,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2005}, {"title": "ASPECS: An Agent-oriented Software Process for Engineering Complex Systems: How to design agent societies under a holonic perspective", "author": ["M. Cossentino", "N. Gaud", "V. Hilaire", "S.Galland", "A. Koukam"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}, {"title": "Methodological development of a multi-agent system in the healthcare domain", "author": ["D. Isern", "C. G\u00f3mez-Alonso", "A. Moreno"], "venue": "Commun, SIWN", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2008}, {"title": "MAS methodology for HMS", "author": ["A. Giret", "V. Botti", "S. Valero"], "venue": "In the Second International Conference on Industrial Applications of Holonic and Multi-Agent Systems HoloMAS,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2005}, {"title": "From agents to organizations: an organizational view of multi-agent systems", "author": ["J. Ferber", "O. Gutknecht", "F. Michel"], "venue": "Eds 2003, in the 4th International Workshop on Agent-oriented Software Engineering IV (AOSE),", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2003}, {"title": "Re-use of interaction protocols and Career-oriented models for multi-agents development, R\u00e9utilisation des protocoles d\u201finteraction et D\u00e9marche orient\u00e9e mod\u00e8les pour le d\u00e9veloppement multi-agents", "author": ["T. Jarraya"], "venue": "Ph.D. Thesis,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2006}, {"title": "Getting Started with AndroMDA for Java", "author": ["N. Bhatia"], "venue": "(www.andromda.org,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2010}, {"title": "A Model Design of Multi-Agents Systems\u201d, in the International Conference on Models of Information and Communication Systems MICS\u201f10", "author": ["S. Maalal", "M. Addou"], "venue": "Rabat, Morocco,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "Abstract\u2014Agent technology is a software paradigm that permits to implement large and complex distributed applications [1].", "startOffset": 118, "endOffset": 121}, {"referenceID": 1, "context": "This property distinguishes our design methodology of existing methodologies in that it is constrained by any particular agentbased model while providing a library of generic models [2].", "startOffset": 182, "endOffset": 185}, {"referenceID": 1, "context": "This is the software engineering and well justifies the use of a method of analysis, design and development of multi-agents systems [2].", "startOffset": 132, "endOffset": 135}, {"referenceID": 2, "context": "- An agent is a computer system within an environment and with an autonomous behavior made for achieving the objectives that were set during its design [3].", "startOffset": 152, "endOffset": 155}, {"referenceID": 3, "context": "These spheres of influence may overlap in some cases; the fact that they coincide may cause dependencies reports between agents [4].", "startOffset": 128, "endOffset": 131}, {"referenceID": 4, "context": "Starting from the definitions cited above, we can identify the following agent types [5]:", "startOffset": 85, "endOffset": 88}, {"referenceID": 5, "context": "Some are technical guides; others are managing the project [6].", "startOffset": 59, "endOffset": 62}, {"referenceID": 6, "context": "These paradigms fail especially when it concerns the development of complex distributed systems for two reasons: the interactions between the various entities are defined in a too rigid way and there is no mechanism complex enough to represent the organizational structure system [7].", "startOffset": 280, "endOffset": 283}, {"referenceID": 7, "context": "The paradigm of agents and multi-agent systems can be a good answer to these problems, because the agent-oriented approaches significantly increase our ability to model, design and build complex distributed systems [8].", "startOffset": 215, "endOffset": 218}, {"referenceID": 1, "context": "We cite below some examples of existing methodologies [2]: \uf0b7 The AAII methodology was developed based on the experience accumulated during the construction of BDI systems.", "startOffset": 54, "endOffset": 57}, {"referenceID": 8, "context": "In this methodology, we have a set of templates that, when they have been fully elaborated, define the specifications of agents such as desires, beliefs and intentions [9].", "startOffset": 168, "endOffset": 171}, {"referenceID": 9, "context": "\uf0b7 The first version of Gaia methodology, which modeled agents from the object-oriented point of view, was revisited 3 years later by the same authors in order to represent a MAS as an organized society of individuals [10].", "startOffset": 217, "endOffset": 221}, {"referenceID": 0, "context": "The environment abstraction specifies all the entities and resources a multi-agent system may interact with, restricting the interactions by means of the permitted actions [1].", "startOffset": 172, "endOffset": 175}, {"referenceID": 8, "context": "The Gaia methodology gives the possibility to design MAS using an organizational paradigm and to traverse systematically the path that begins by setting out the demands of the problem and to lead to a fairly detailed and immediate implementation [9].", "startOffset": 246, "endOffset": 249}, {"referenceID": 0, "context": "If inter-organization communication is omitted, coalitions and congregations may also be modeled [1].", "startOffset": 97, "endOffset": 100}, {"referenceID": 8, "context": "However, this methodology is somewhat limited since we can describe MAS with different architectures of agents [9].", "startOffset": 111, "endOffset": 114}, {"referenceID": 10, "context": "\uf0b7 INGENIAS starts from the results of MESSAGE and provides a notation to guide the development process of a MAS from analysis to implementation [12] [13].", "startOffset": 149, "endOffset": 153}, {"referenceID": 11, "context": ", how agents can join or leave the system, how they can form groups dynamically, what their life-cycle is, etc [14].", "startOffset": 111, "endOffset": 115}, {"referenceID": 0, "context": "It allows to edit consistent models (according to INGENIAS specification) and to generate documented code in different languages such as JADE [16], Robocode, Servlets or Gracias Agents [1].", "startOffset": 185, "endOffset": 188}, {"referenceID": 12, "context": "\uf0b7 Multi-agent systems Software Engineering (MaSE) is a start-to-end methodology that covers from the analysis to the implementation of a MAS [17].", "startOffset": 141, "endOffset": 145}, {"referenceID": 13, "context": "This notation was proposed to adapt the UML\u201fs one in order to describe the agentoriented modeling [18].", "startOffset": 98, "endOffset": 102}, {"referenceID": 1, "context": "\uf0d8\uf020Specification protocol of interaction between agents, \uf0d8\uf020Representation of the internal behaviour of an agent, \uf0d8\uf020Specification of roles, package interface agent, mobility, etc [2].", "startOffset": 177, "endOffset": 180}, {"referenceID": 14, "context": "\uf0b7 The Agent Modeling Language (AML) is a semiformal visual modeling language for specifying, modeling and documenting systems that incorporate concepts drawn from multi-agents systems (MAS) theory [19].", "startOffset": 197, "endOffset": 201}, {"referenceID": 15, "context": "\uf0b7 ASPECS (Agent-oriented Software Process for Engineering Complex Systems) provides a holonic perspective to design MAS [20].", "startOffset": 120, "endOffset": 124}, {"referenceID": 0, "context": "The goal of the proposed meta-model of ASPECS is to gather the advantages of organizational approaches as well as of those of the holonic vision in the modeling of complex system [1].", "startOffset": 179, "endOffset": 182}, {"referenceID": 11, "context": "Therefore, there is still a gap between analysis and design, which must be specified clearly, correctly and completely [14].", "startOffset": 119, "endOffset": 123}, {"referenceID": 16, "context": "These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23].", "startOffset": 86, "endOffset": 90}, {"referenceID": 15, "context": "These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23].", "startOffset": 106, "endOffset": 110}, {"referenceID": 17, "context": "These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23].", "startOffset": 111, "endOffset": 115}, {"referenceID": 18, "context": "These methodologies have been applied in different fields such as medical informatics [21], manufacturing [20] [22], and e-commerce [23].", "startOffset": 132, "endOffset": 136}, {"referenceID": 0, "context": "Unfortunately, the number of real world applications that use agent-oriented methodologies is still low [1].", "startOffset": 104, "endOffset": 107}, {"referenceID": 19, "context": "[24]", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "It is this model that is based on code generation [5].", "startOffset": 50, "endOffset": 53}, {"referenceID": 20, "context": "One of the main tools of MDA, we have AndroMDA who takes as its input a business model specified in the Unified Modeling Language (UML) and generates significant portions of the layers needed to build, for example, a Java application [25].", "startOffset": 234, "endOffset": 238}, {"referenceID": 4, "context": "The diagram below maps various application layers to, for examples, Java technologies supported by AndroMDA [5].", "startOffset": 108, "endOffset": 111}, {"referenceID": 4, "context": "The generation process of AndroMDA is as follows [5] :", "startOffset": 49, "endOffset": 52}, {"referenceID": 2, "context": "Our idea is to offer a design methodology based on agents AUML notation for establishing a generic class diagram that the designer can use to design his system [3].", "startOffset": 160, "endOffset": 163}, {"referenceID": 2, "context": "The diagram is conceived in three layers, each one is represented by a relationship between classes: A first part which is a relation between agent and its environment, a second part of specialisation of the agent class, and at the last part, a specialisation of the cognitive agent class [3].", "startOffset": 289, "endOffset": 292}, {"referenceID": 0, "context": "This transformation will allow the designer to easily use AndroMDA to generate the source code equivalent to its UML diagram [1].", "startOffset": 125, "endOffset": 128}, {"referenceID": 4, "context": "The model developed at the design phase, should be reliable in order to build the application and realize its implementation without errors [5].", "startOffset": 140, "endOffset": 143}, {"referenceID": 4, "context": "This example is designed as follows [5]:", "startOffset": 36, "endOffset": 39}, {"referenceID": 4, "context": "In fact, the ChatAgents directory contains a hierarchy of Maven projects as shown below [5].", "startOffset": 88, "endOffset": 91}, {"referenceID": 4, "context": "10 as follows [5]:", "startOffset": 14, "endOffset": 17}, {"referenceID": 4, "context": "Following the definition of our model, the generation of application code is achieved by executing the command \"mvn install\", the result appears as in the figure [5].", "startOffset": 162, "endOffset": 165}, {"referenceID": 21, "context": "Which leads us to obtain a generic design based on SOA more or less reusable components using one of the most MDA tools used in development is AndroMDA [27].", "startOffset": 152, "endOffset": 156}], "year": 2011, "abstractText": "Agent technology is a software paradigm that permits to implement large and complex distributed applications [1]. In order to assist analyzing, conception and development or implementation phases of multi-agent systems, we\u2019ve tried to present a practical application of a generic and scalable method of a MAS with a component-oriented architecture and agentbased approach that allows MDA to generate source code from a given model. We\u2019ve designed on AUML the class diagrams as a class meta-model of different agents of a MAS. Then we generated the source code of the models developed using an open source tool called AndroMDA. This agent-based and evolutive approach enhances the modularity and genericity developments and promotes their reusability in future developments. This property distinguishes our design methodology of existing methodologies in that it is constrained by any particular agentbased model while providing a library of generic models [2]. KeywordSoftware agents; Multi-agents Systems (MAS); Analysis; Software design; Modeling; Models; Diagrams; Architecture; Model Driven Architecture (MDA); Agent Unified Modeling Language (AUML); Agent Modeling Language (AML).", "creator": "Microsoft Word 2010"}}}