{"id": "1204.4991", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Apr-2012", "title": "Knowledge revision in systems based on an informed tree search strategy : application to cartographic generalisation", "abstract": "Many real world problems can be expressed as optimisation problems. Solving this kind of problems means to find, among all possible solutions, the one that maximises an evaluation function. One approach to solve this kind of problem is to use an informed search strategy. The principle of this kind of strategy is to use problem-specific knowledge beyond the definition of the problem itself to find solutions more efficiently than with an uninformed strategy. This kind of strategy demands to define problem-specific knowledge (heuristics). The efficiency and the effectiveness of systems based on it directly depend on the used knowledge quality. Unfortunately, acquiring and maintaining such knowledge can be fastidious. The objective of the work presented in this paper is to propose an automatic knowledge revision approach for systems based on an informed tree search strategy. Our approach consists in analysing the system execution logs and revising knowledge based on these logs by modelling the revision problem as a knowledge space exploration problem. We present an experiment we carried out in an application domain where informed search strategies are often used: cartographic generalisation.", "histories": [["v1", "Mon, 23 Apr 2012 08:03:06 GMT  (408kb)", "http://arxiv.org/abs/1204.4991v1", "Knowledge Revision; Problem Solving; Informed Tree Search Strategy; Cartographic Generalisation., Paris : France (2008)"]], "COMMENTS": "Knowledge Revision; Problem Solving; Informed Tree Search Strategy; Cartographic Generalisation., Paris : France (2008)", "reviews": [], "SUBJECTS": "cs.AI cs.LG", "authors": ["patrick taillandier", "c\\'ecile duch\\^ene", "alexis drogoul"], "accepted": false, "id": "1204.4991"}, "pdf": {"name": "1204.4991.pdf", "metadata": {"source": "CRF", "title": "Knowledge revision in systems based on an informed tree search strategy: application to cartographic generalisation", "authors": ["Patrick Taillandier", "C\u00e9cile Duch\u00eane", "Alexis Drogoul"], "emails": ["Patrick.taillandier@gmail.com", "cecile.duchene@ign.fr", "alexis.drogoul@gmail.com"], "sections": [{"heading": null, "text": "One approach to solving these kinds of problems is the use of an informed search strategy. The principle of this type of strategy is to use problem-specific knowledge beyond the definition of the problem itself to find solutions more efficiently than with an uninformed strategy. This strategy requires the definition of problem-specific knowledge (heuristics).The efficiency and effectiveness of the systems based on it depend directly on the quality of knowledge used. Unfortunately, acquiring and maintaining this knowledge can be challenging. The aim of the work presented in this paper is to propose an automatic knowledge revision approach for systems based on an informed tree search strategy. Our approach consists of analyzing the system execution protocols and revising the knowledge based on these protocols by modeling the revision problem as a problem of exploring the knowledge space. We present an experiment that we have conducted in an application area where informed search strategies are commonly applied: general search strategies and problem solving strategies: general search intelligence and subject.z"}, {"heading": "1. INTRODUCTION", "text": "Solving problems is one of the central themes of artificial intelligence. Among the approaches, some are based on an informed search strategy. The principle of such a strategy is to use problem-specific knowledge (heuristics) beyond the definition of the problem itself, in order to find more efficient solutions than with an uninformed strategy. The efficiency of systems based on this type of strategy depends directly on the quality of knowledge used. Unfortunately, it is usually very difficult to acquire expert knowledge. Eward Feigenbaum formulated this problem in 1977 as a bottleneck problem in acquiring knowledge. In fact, expert knowledge is rarely formalized and its translation into a formalism that can be used by computers is very complexity.The work presented in this paper deals with the problem of knowledge revision in systems based on a specific informed search strategy. We propose an approach of automatic knowledge revision for such systems.In the second part, we introduce the general context in which our work takes place, and the difficulties that we must address in part of our presentation 3."}, {"heading": "2. CONTEXT", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Context and formalisation of the revision problem", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1.1 Description of the considered optimisation problems", "text": "Many real-world problems can be expressed as optimization problems, and the goal of these kinds of problems is to find, among all possible solutions, the one that maximizes an evaluation function. In this essay, we are interested in a family of optimization problems that consist in finding, by applying the action, the state of a unit that maximizes an evaluation function. Let P be an optimization problem class that is characterized by: A class EP {action} P unit: a series of actions that can be applied to a unit that belongs to the EP. The result of the application of an action is supposedly unpredictable. QP: a function that defines the state quality of a unit that belongs to EPAn class P optimization problems is defined by a class EP unit that is characterized by its current state. The solution p is to find the state of the EP that optimizes the EP by projecting actions from the initial state."}, {"heading": "2.1.2 Description of the considered systems", "text": "The transition from one state to another corresponds to the application of an action. Figure 1 represents the action cycle. It begins with the characterization of the current state of the entity and its evaluation using the QP function. Then, the system checks whether the current state is good enough or whether it is necessary to continue exploring other states. If the system decides to continue exploration, it checks whether the current state is valid or not. If not, the entity returns to its previous state, otherwise, the system constructs a list of measures to be applied. If the action list is empty, the entity returns to its previous state, otherwise, the system selects the best action and applies it. Then it goes back to the first step. The action cycle ends when the stop criterion is reviewed or when all measures have been applied to all valid states. In this paper, we are interested in the pieces of procedural knowledge used to compile the action list."}, {"heading": "2.1.3 Formalisation of the knowledge revision", "text": "We define a function perf (S, p) that evaluates the performance of a system S to solve a problem p. The function is linked to the effectiveness and efficiency of S to solve p and depends on the domain and the needs of the user. Likewise, we define a function Perf (S, P) that evaluates the performance of a system S to solve all problems of class P. The calculation of the function requires the calculation of the function perf (S, P) for each p that belongs to P. The problem of knowledge revision then consists in using the initial knowledge base of all possible knowledge bases for P to find one that optimizes Perf (S, P). In practice, most of the time it is impossible to calculate Perf (S, P). In fact, it is rarely possible to calculate perf (S, p) for each p that belongs to P."}, {"heading": "2.2 Related works", "text": "As we mention in Part 2.1.2, we are interested in knowledge represented by production rules. If many learning algorithms propose to produce production rules from examples given by experts, very few of them allow initial rules to be taken into account. However, some work already deals with this problem. Among them, a few are interested in refining the inductive knowledge base. The aim of this work is to improve knowledge of the expert system. Most of them assume that the knowledge base is almost valid and that only small improvements are needed [6]. Therefore, some approaches propose to improve rule databases only by refining or deleting existing rules, without giving the opportunity to add new rules [9]. Others do not aim to refine rule bases directly, but aim to support the user during the refinement process [1]. Many of these works are based on logical operators and therefore rarely deal with loud data [13]. Another disadvantage of many works is the increase in the number of rules that can lead to."}, {"heading": "3. PROPOSED APPROACH", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1 General approach", "text": "Our audit approach is based on the analysis of the execution protocols. We do not seek an online audit of knowledge. Our approach requires the termination of the \"normal\" functioning of the system in order to activate the process with minimum intersection and thus obtain the most complete and accurate information on the successes / failures that each piece of knowledge corresponds to (Figure 2).Our approach consists of two phases (Figure 3): Exploration phase: consists in logging the process while the system solves a large number of problems with minimum intersection. This phase consists of two sub-phases: \u2022 Selection of the problem sample \u2022 Solving the selected problems and logging the analysis phase: consists of analysing the protocols obtained during the previous phase and using this phase for the revision of knowledge. This phase consists of four sub-phases: \u2022 Solving the selected problems \u2022 Resolving the selected problems and logging the analysis phase: consists of analysing the protocols received during the previous phase and the revision of knowledge."}, {"heading": "3.2 Exploration stage", "text": "During this phase, the system solves a series of problems with a minimum intersection. The intersection is defined in such a way that the system constructs all possible states for each problem according to the defined actions and the initial state of the problem, while ensuring that the action cycle converges. In this way, it is possible to simulate any possible knowledge base by rearranging the states without having to run the system again with this knowledge set. This minimal intersection is chosen so that the results achieved with it are independent of the initial knowledge: regardless of which are the initial knowledge pieces, the state tree obtained with the minimum intersection is composed of the same states (which could be set in a different order)."}, {"heading": "3.3 Analysis stage", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.3.1 Proposed approach", "text": "During the analysis phase, the system revises the knowledge base thanks to the problems solved during the exploration phase. Therefore, we propose to formulate the revision problem itself as a search problem. We will then look for the knowledge base that optimizes the function Perf (S, Pn) defined in Part 2.1.3, with Pn, the sample of the problems solved during the exploration phase. Let's remember that we are dealing with the revision of Action Application Knowledge. Each action has a rule base that defines the weight of the action for each value of its unit of measurement (see Part 2.1.2). The difficulty arises from the distributed nature of this knowledge. In fact, if the application rule bases of each action are not interdependent in their expression (each action has a rule base that depends only on its own unit of measurement), the results (weight) can only be analyzed if it is compared with the weight of the other actions."}, {"heading": "3.3.2 Construction of the example sets", "text": "A \"decision\" is either a \"success\" or a \"failure.\" We define the concept of the best path: A best path is a sequence of at least two states that have the root of atree (or a partial tree) for the initial state and the best state of that tree (or partial tree) for the final state. As a first step, the construction of our example for a state tree consists in extracting the best paths from the tree. The next step is to analyze each state of the respective best path. If one of the proposed actions leads from one of these states to another state of the same best path, the action is considered a success. Otherwise, it is determined to be a failure. Figure 4 gives a simplified example of a problem of the two proposed measures with a resolution of Ap 2."}, {"heading": "3.3.3 Partitioning of the measure set space", "text": "Our general revision approach requires, as a first step, the division of the measure into unrelated areas. The areas are defined by production rules. A condition of this division is to take into account the rules of application of the initial measures. To this end, we stipulate that any rule defining a division of the specified measure must be either one of the initial rules or a specialization of one of the initial rules. The interest of this condition is to be able to obtain rules similar to the initial rules after the revision process. To solve this problem, several approaches can be used based on the use of the example sets. The partitioning approach we propose is to discard each measure and reassemble the rules, while taking into account the initial rules (the measures applied and their reduction). For example, consider an action A linked to two measures M1 and M2. Let us leave the initial rules: if < < < if they are applied < < 2 = if they are (when weight) < < 2 if they are (when weight) < < 5 = when they are applied."}, {"heading": "3.3.4 Exploring stage", "text": "We defined our revision problem as an optimization problem where we are looking for a certain problem class P and a certain System S, the solution Sol among the possible solutions Sol, which maximizes the quality function Perf (Ssol, Pn). According to the fact that we have to assign a weight value between 0 and WEIGHT _ MAX for each area, the size of the solution space (Size Sol) corresponds to the number of surfaces (1 + WEIGHT _ MAX). To help with this search, we have an initial solution (the initial knowledge base), which will often be good. There are numerous methods to solve a problem of this kind. Due to the size of the solution space, it is impossible to use a complete approach. Therefore, we use an incomplete approach. To solve this problem, we propose to use a reactive local search algorithm [3]. Other algorithms such as mountaineering, taboo search [10], simulated problem man approach [11] can solve this problem with very high weight."}, {"heading": "3.3.5 Rule base simplification", "text": "The last step of the analysis phase is to simplify the obtained (revised) rules by aggregating the rules. If, for example, the resulting weight allocation for an action follows the following: if (M1 < 5) then weight = 1 if (M1 \u2265 5) and (M2 < 3) then weight = 3 if (M1 \u2265 5) and (M2 \u2265 3) then weight = 3, the last two rules are aggregated and the final rule basis is: if (M1 < 5) then weight = 1 if (M1 \u2265 5) then weight = 3."}, {"heading": "4.1 Automatic cartographic generalisation", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4. APPLICATION TO CARTOGRAPHIC GENERALISATION", "text": "Cartographic generalization is a process that aims to reduce the depth of detail of geographical data in order to generate a map on a given scale. Figure 5 gives an example of cartographic generalization. As illustrated in the figure, cartographic generalization is not a simple reduction. The application of numerous operations such as local scaling, displacement or elimination of objects are necessary to ensure the legibility of the map while retaining the essential information of the original map. Then, the difficulty of this process consists in selecting the best sequence of generalization operations applied to the various geographical objects. An approach to solving this problem is the use of an informed search. Nowadays, the procedural knowledge used to guide the search is entered manually."}, {"heading": "4.2 The generalisation system", "text": "The generalization system we use for our experiment is based on the AGENT model [2, 14] and follows the specification we have defined in Part 2.2.2. It generalizes a geographic object or group of geographical objects based on an informed tree search strategy. Each state represents the geometric state of the geographical objects under consideration and is evaluated by a satisfaction function that translates the respect of the cartographic constraints by the geographical objects. A cartographic constraint may be that a building is large enough to be readable, the satisfaction of a state is between 1 and 10 (10 represents a perfect state and a value below 5, an unacceptable state).The action cycle applied is the one shown in Figure 1. The braking criterion is the following: The action cycle ends when the system has reached a perfect state (or if all possible states have been visited). The validity criterion depends on the improvement of the boundaries."}, {"heading": "4.3 Application of our revision approach", "text": "For the breakdown of the set of measures, we used the algorithm proposed by [8] to discredit the metrics. For our search problem, we chose the reactive local search algorithm [3]. The defined function Perf (SK, Pn) is as follows: + \u00d7 = StatesMean Nb offactionMean Satis), PPerf (S nK110 3 41) The average satisfaction represents the effectiveness of the system. The higher the average satisfaction, the more effective the system. The average number of states represents the efficiency of the system. The higher the average number of states, the less efficient the system. The function Perf (SK, Pn) is between 0 (very bad results) and 1 (perfect results). We can explain this formula by the fact that the satisfaction varies between 1 and 10 and the number of states between 1 and 3."}, {"heading": "4.4 Case study", "text": "The real case study we carried out concerned the generalisation of the geographical object of the type \"assembly.\" The assembly generalisation is an interesting case study because it is not yet well mastered and because it is very time consuming. We have defined five measures for the generalisation of the assembly as well as two knowledge bases: the first is defined by a generalisation expert (Kexpert), the second corresponds to the case in which no measures are proposed for each state (KnoAction). The revision of the knowledge base \"experts\" corresponds to the classic scenario of knowledge revision in which we have a good initial rule base that we want to refine. The revision of the knowledge base \"No Action\" corresponds to the scenario in which the initial knowledge base is worst and in which we want to acquire good knowledge in order to replace it."}, {"heading": "4.5 Results", "text": "The results of this experiment (Figure 6) show that our audit approach has improved system knowledge. In fact, the results obtained with revised knowledge are better than those obtained with the original knowledge base. These results confirm our general approach. An interesting point concerns the way in which the original knowledge base is taken into account. The revised knowledge gained from Kexpert's revision achieved better results than that obtained from the revision of KnoAction. One explanation for this is that the expert has incorporated into his knowledge base information that was not present in the learning sample and that was retained through the revision process. These results show the interest in taking into account the initial knowledge base for the revision processes. Figure 7 gives examples of how to build groups that were generalised with the different knowledge bases. These examples show that the generalisations achieved with both revised knowledge bases are better than those achieved with both initial knowledge bases."}, {"heading": "5. CONCLUSION", "text": "In this work, we have proposed an approach to knowledge revision based on the exploration of the knowledge space. We have shown the effectiveness and efficiency of our approach based on a real case study. If we revise the knowledge about the application of measures, we have not tried to revise other parts of knowledge such as the validity criterion or the criterion of ending the action cycle. An adaptation of our approach could be proposed to revise this type of knowledge as well. Likewise, adjustments that are expressed in formalities other than production rules could be proposed. A point that merits more investigation is the selection of the problem sample. In fact, the audit results that can be obtained can vary greatly in quality depending on the choice. Another point that merits more investigation is the division of the knowledge space. A poor distribution does not allow an improvement of the original knowledge."}, {"heading": "6. REFERENCES", "text": "[1] Atzm\u00fcller M., Baumeister J. and Puppe F. 2006.Introspective Subgroup Analysis for Interactive Knowledge Refinement. FLAIRS. 402-407 [2] Barrault M., Regnauld N., Duch\u00eane C., Haire K., Baejis C., Demazeau Y., Hardy P., Mackaness W., Ruas A. and WeibelR. 2001. Integrating Multi-Agent, Object Oriented, and Algorithmic Techniques to Improve Automated Generalization, 'ICC, 3, 2100-2116. [3] Battiti Y. and Protasi M. 2001. Reactive local search for the maximum clique problem, Algorithmica, 610-637. [4] Brassel K. and Weibel R. 1988. A Review and Conceptual Framework of Automated Map', IJGIS."}], "references": [{"title": "Introspective Subgroup Analysis for Interactive Knowledge Refinement", "author": ["M. Atzm\u00fcller", "J. Baumeister", "F. Puppe"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2006}, {"title": "Integrating multi-agent, object-oriented, and algorithmic techniques for improved automated map generalisation", "author": ["M. Barrault", "N. Regnauld", "C. Duch\u00eane", "K. Haire", "C. Baejis", "Y. Demazeau", "P. Hardy", "W. Mackaness", "A. Ruas", "R. Weibel"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2001}, {"title": "Reactive local search for the maximum clique problem, Algorithmica", "author": ["Y. Battiti", "M. Protasi"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2001}, {"title": "A review and conceptual framework of automated map generalization\u2019, IJGIS", "author": ["K. Brassel", "R. Weibel"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1988}, {"title": "Automated sequencing of generalization services based on collaborative filtering, GIScience", "author": ["D. Burghardt", "M. Neun"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2006}, {"title": "Effective and Efficient Knowledge Base Refinement", "author": ["L. Carbonara", "D. Sleeman"], "venue": "Machine Learning", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1999}, {"title": "Maximum likelihood from incomplete data via the em algorithm (with discussion)", "author": ["P. Dempster A", "Laird N. M", "B. Rubin D"], "venue": "Journal of the Royal Statistical Society, B", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1977}, {"title": "On the Handling of Continuous-Valued Attributed in Decision Tree Generation", "author": ["U.M. Fayyad", "K.B. Irani"], "venue": "Machine learning,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1992}, {"title": "Automatic knowledge base refinement for classification systems", "author": ["A. Ginsberg", "M. Weiss S", "P. Politakis"], "venue": "Artificial Intelligence,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1988}, {"title": "Optimization by Simulated Annealing, Science", "author": ["S. Kirkpatrick", "C.D. Gelatt", "M.P. Vecchi"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1983}, {"title": "Cartographic generalization of roads in a local and adaptive approach : A knowledge acquisition problem", "author": ["S. Musti\u00e8re"], "venue": "ISGIS, vol. 19,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2005}, {"title": "Changing the rules: A comprehensive approach to theory refinement. AAAJ-90", "author": ["D. Ourston", "J. Mooney R"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1990}, {"title": "Mod\u00e8le de g\u00e9n\u00e9ralisation de donn\u00e9es g\u00e9ographiques \u00e0 base de contraintes et d\u2019autonomie, Th\u00e8se de l\u2019UMLV", "author": ["A. Ruas"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1999}, {"title": "Methods for improving and updating the knowledge of a generalization system, Autocarto", "author": ["A. Ruas", "A. Dy\u00e8vre", "C. Duch\u00eane", "P. Taillandier"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2006}, {"title": "A Prototype Generalisation System Based on the Multi-Agent Paradigm\u2019, Generalisation of Geographic Information: Cartographic Modelling and Applications", "author": ["A. Ruas", "C. Duch\u00eane"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2007}, {"title": "DLGref2: Techniques for Inductive Rule Refinement. IJCAI Workshop W16: Machine Learning and Knowledge Acquisition", "author": ["G.I. Webb"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1993}, {"title": "Overcoming the Knowledge Acquisition Bottleneck in Map Generalization : the Role of Interactive Systems and Computational Intelligence", "author": ["R. Weibel", "S. Keller", "T. Reichenbacher"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1995}], "referenceMentions": [{"referenceID": 5, "context": "Most of them make the assumption that the knowledge base is almost valid and that only small improvements are needed [6].", "startOffset": 117, "endOffset": 120}, {"referenceID": 8, "context": "Thus, some approaches propose to improve rule bases only by refining or deleting existing rules without giving the possibility to add new rules [9].", "startOffset": 144, "endOffset": 147}, {"referenceID": 0, "context": "Others do not aim at refining rule bases directly, but aim at supporting the user during the refining process [1].", "startOffset": 110, "endOffset": 113}, {"referenceID": 11, "context": "Many of these works are based on logical operators and thus rarely deal with noisy data [13].", "startOffset": 88, "endOffset": 92}, {"referenceID": 15, "context": "Another drawback of many of these works is the increase of the number of rules [17] that can lead to readability problems.", "startOffset": 79, "endOffset": 83}, {"referenceID": 2, "context": "Indeed, in order to solve this problem, we propose to use a reactive local search algorithm [3].", "startOffset": 92, "endOffset": 95}, {"referenceID": 9, "context": "Others algorithms such as hill climbing, tabu search [10], simulated annealing [11], can also be used to solve this problem.", "startOffset": 79, "endOffset": 83}, {"referenceID": 3, "context": "Some of these works try to solve it by a local, step-by-step and knowledge-based approach [4, 18].", "startOffset": 90, "endOffset": 97}, {"referenceID": 16, "context": "Some of these works try to solve it by a local, step-by-step and knowledge-based approach [4, 18].", "startOffset": 90, "endOffset": 97}, {"referenceID": 16, "context": "Its tuning is often long and fastidious because it demands to face the problem of knowledge collecting and formalizing [18].", "startOffset": 119, "endOffset": 123}, {"referenceID": 10, "context": "Several works have already used machine learning to learn the relevant procedural knowledge [12, 18] but few among them propose to automatically revise existing knowledge.", "startOffset": 92, "endOffset": 100}, {"referenceID": 16, "context": "Several works have already used machine learning to learn the relevant procedural knowledge [12, 18] but few among them propose to automatically revise existing knowledge.", "startOffset": 92, "endOffset": 100}, {"referenceID": 4, "context": "One of them is [5] that proposes to use previously generalised objects to build a case base.", "startOffset": 15, "endOffset": 18}, {"referenceID": 13, "context": "Concerning the rule base revision, the only work existing is [15].", "startOffset": 61, "endOffset": 65}, {"referenceID": 1, "context": "The generalisation system that we use for our experiment is based on the AGENT model [2, 14] and follows the specification that we defined in part 2.", "startOffset": 85, "endOffset": 92}, {"referenceID": 12, "context": "The generalisation system that we use for our experiment is based on the AGENT model [2, 14] and follows the specification that we defined in part 2.", "startOffset": 85, "endOffset": 92}, {"referenceID": 7, "context": "Concerning the partitioning of the measure sets, we used the algorithm proposed by [8] to discretise the measures.", "startOffset": 83, "endOffset": 86}, {"referenceID": 2, "context": "We chose the reactive local search algorithm [3] for our search problem.", "startOffset": 45, "endOffset": 48}], "year": 2008, "abstractText": "Many real world problems can be expressed as optimisation problems. Solving this kind of problems means to find, among all possible solutions, the one that maximises an evaluation function. One approach to solve this kind of problem is to use an informed search strategy. The principle of this kind of strategy is to use problem-specific knowledge beyond the definition of the problem itself to find solutions more efficiently than with an uninformed strategy. This kind of strategy demands to define problem-specific knowledge (heuristics). The efficiency and the effectiveness of systems based on it directly depend on the used knowledge quality. Unfortunately, acquiring and maintaining such knowledge can be fastidious. The objective of the work presented in this paper is to propose an automatic knowledge revision approach for systems based on an informed tree search strategy. Our approach consists in analysing the system execution logs and revising knowledge based on these logs by modelling the revision problem as a knowledge space exploration problem. We present an experiment we carried out in an application domain where informed search strategies are often used: cartographic generalisation.", "creator": "PScript5.dll Version 5.2.2"}}}