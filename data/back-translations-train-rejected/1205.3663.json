{"id": "1205.3663", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Feb-2012", "title": "The Good, the Bad, and the Odd: Cycles in Answer-Set Programs", "abstract": "Backdoors of answer-set programs are sets of atoms that represent clever reasoning shortcuts through the search space. Assignments to backdoor atoms reduce the given program to several programs that belong to a tractable target class. Previous research has considered target classes based on notions of acyclicity where various types of cycles (good and bad cycles) are excluded from graph representations of programs. We generalize the target classes by taking the parity of the number of negative edges on bad cycles into account and consider backdoors for such classes. We establish new hardness results and non-uniform polynomial-time tractability relative to directed or undirected cycles.", "histories": [["v1", "Wed, 15 Feb 2012 20:19:57 GMT  (15kb)", "http://arxiv.org/abs/1205.3663v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["johannes klaus fichte"], "accepted": false, "id": "1205.3663"}, "pdf": {"name": "1205.3663.pdf", "metadata": {"source": "CRF", "title": "The Good, the Bad, and the Odd: Cycles in Answer-Set Programs", "authors": ["Johannes Klaus Fichte"], "emails": ["fichte@kr.tuwien.ac.at"], "sections": [{"heading": null, "text": "ar Xiv: 120 5.36 63v1 [cs.AI] 1"}, {"heading": "1 Introduction", "text": "This year, it has come to the point where it can only take one year to find a solution that is capable of finding a solution."}, {"heading": "2 Formal Background", "text": "\u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7"}, {"heading": "2.1 Strong Backdoors", "text": "Backdoors are small sets of atoms that can be used to simplify the computational problems considered in ASP. (b) They were originally introduced by Williams, Gomes and Selman (20, 21) as a concept for analyzing decision-making. (6) In the following, we refer to C as the target class of backdoors.Definition 1. Let us leave P as the program, X as the set of atoms, and T as the response (X).The truth assignment of P under Proposition is the logic program. We refer to C as the target class of backdoors.Definition 1. Let us leave P as the program, X as the set of atoms, and T as the response (X)."}, {"heading": "2.2 Deletion Backdoors", "text": "For a program P and a group X of atoms, we define P \u2212 X as the program obtained from P by deleting all atoms contained in X from the heads and bodies of all rules of P and their negations. Definition leads to deletion backdoors and the problem of finding deletion backdoors, which in some cases is easier to solve than the problem of finding strong backdoors. Definition 5 (deletion C backdoor): Let C be a class of programs. A group X of atoms is a deletion C backdoor of a program P when P \u2212 X-C. We define the problem k-deletion C backdoor detection as follows: In a program P, we find a deletion C backdoor X of maximum k size or report that such an X does not exist."}, {"heading": "2.3 Target Classes", "text": "As explained above, we must consider target classes of programs that have only a small number of response sets. There are two reasons for a program to have a large number of response sets: (i) linkages in the rule heads and (ii) certain cyclic dependencies between rules. Prohibiting both leads to so-called directed BC cycles [9]. Following, we need normality and consider different types of cyclicity to describe target classes. To define cyclicity, we associate with any normal program P its directed dependency graph DP [1], and its undirected dependency graph UP [11]. DP has as vertices the atoms of P and a directed edge (x, y) between two atoms x, y for which there is a rule r-P with x-H (r) and y-B (r)."}, {"heading": "3 Parity Cycles", "text": "In this section we generalize the acyclicity-based target classes by taking into account the parity of the number of negative edges (corners) and considering backdoors for such classes. We say that an (un) directed cycle in a given program is P even if the cycle has an even number of negative edges (corners).The definition leads to the new target classes of all normal programs without directed odd cycles (no-DBEC), without undirected odd cycles (no-BEC), without directed even cycles (no-DEC) and without even cycles (no-EC)."}, {"heading": "3.1 Computing Answer-Sets", "text": "First, we discuss the link between the problem of finding bad even cycles in signed graphs and even cycles in graphs. (D) A signed (D) graph is a graph whose edges are either positive or negative. (D) Then we remove the labels from the negative edges. (D) We construct the unmarked edges where we ignore the direction of the edges. The following link has already been observed by Aracena, Gajardo, and Montalva [15].Lemma 2 ([15]) A signed (un) directed graph G even has a cycle and only if its unmarked graph (un) a cycle of even lang.Pro.Let G = (V) a direct graph (G) and a direct graph (G)."}, {"heading": "3.2 Backdoor Detection for Directed Target Classes", "text": "In this section we consider the problems k-PS- (V, E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PSK - (S) (S) (S) (SK) -S (S) (S) (SK) -S (S) (S) (S) (SK) -S (S) (S) (S) (SK - (E) -S (S) (S) (S) (S) (S) (SK - (S) (S) (SK) -S (S) (S) (SK - (S) (S) (S) (S (S) (S) (SK (E) -S (E) -PSK (E) -PS- (E) -PS- (E) -PS- (E (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E (E) -PS- (E) -PS- (E) -PS- (E - (E) -PS- (E) -PS- (E) -PS- (E - (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E - (E - (E) -PS- (E) -PS- (E) -PS- (E - (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E) -PS- (E - (E"}, {"heading": "3.3 Backdoor Detection for Undirected Target Classes", "text": "The results of Theorem 1 suggest that the backdoor detection is based on the weaker target classes, based on undirected even acyclicity.EC Let P be a program, P-no-EC can be decided in polynomial time.Proof. Let P be a program and G its dependency graph UP. Lemma 2 allows to consider the problem of finding a straight cycle in the blank version of UP. Let P-no-BEC cannot be solved in polynomial time. Let P-no-BEC can be solved in polynomial time.Proof. Let P be a program and G its dependency graph UP. For a negative edge of G we define Ge to the unlabeled graph of G \u2212 e."}, {"heading": "4 Relationship between Target Classes", "text": "In this section, we compare ASP parameters in terms of their generality. We have already observed that each Deletion C backdoor is a strong C backdoor for a target class C-EC, no-DEC, no-BEC, no-DBEC, no-DBEC. For the target classes considered, it is easy to see that if C-C is then each C backdoor of Program P is also a C backdoor, but there may be smaller C-EC backdoors. Thus, we compare the target classes with each other instead of the backdoors. By definition, we have no DBC (no-DBEC, no-EC, no-BEC, no-DC (no-DEC). The diagram in Fig. 3 shows the relationship between the different classes, an arrow from C to C. \""}, {"heading": "5 Conclusion", "text": "We have expanded the backdoor approach of [5] by taking into account the parity of the number of negative edges on bad cycles, allowing us in particular to consider target classes that contain non-stratified programs. We have established new hardness results and a non-uniform polynomial time tractability, depending on whether we consider directed or undirected even cycles. We have shown that the backdoor approach with parity target classes generalizes a result of Lin and Zhao [13]. Since Theorem 1 states that target classes are insoluble based on directed even cycles, we think that these target classes are of limited practical interest. The results of this work give rise to research questions of theoretical interest. For example, it would be stimulating to find out whether the k-Strong C-Backdoor Detection problem is a uniform polynomial time solvable (fixed parameters tractable to the BC and the oppancy angles)."}, {"heading": "Acknowledgement", "text": "The author thanks Stefan Szeider for proposing a new target class that takes into account the parity of the number of negative edges, for many helpful comments and his valuable advice. Serge Gaspers for pointing out the result of Arikati and Peled in finding strange paths in the polynomial period and many helpful comments, as well as the anonymous speakers for their helpful comments. The author was supported by the European Research Council (ERC), Grant COMPLEX REASON 239962."}], "references": [{"title": "Towards a theory of declarative knowledge, 89\u2013148", "author": ["K.R. Apt", "H.A. Blair", "A. Walker"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1988}, {"title": "U.N.: A polynomial algorithm for the parity path problem on perfectly orientable graphs", "author": ["S.R. Arikati", "Peled"], "venue": "Discrete Applied Mathematics 65(1-", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1996}, {"title": "Parameterized Complexity", "author": ["R.G. Downey", "M.R. Fellows"], "venue": "Monographs in Computer Science,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1999}, {"title": "On the computational cost of disjunctive logic programming: Propositional case", "author": ["T. Eiter", "G. Gottlob"], "venue": "Annals of Mathematics and AI 15(3-4),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1995}, {"title": "Backdoors to tractable answer-set programming", "author": ["J.K. Fichte", "S. Szeider"], "venue": "Twenty-Second International Joint Conference on AI (IJCAI)", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Backdoors to Satisfaction", "author": ["S. Gaspers", "S. Szeider"], "venue": "CoRR abs/1110.6387,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "The alternating fixpoint of logic programs with negation", "author": ["A. Van Gelder"], "venue": "Proceedings of the Ninth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1989}, {"title": "The well-founded semantics for general logic programs", "author": ["A. Van Gelder", "K.A. Ross", "J.S. Schlipf"], "venue": "J. ACM 38(3),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1991}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Proceedings of the Fifth International Conference and Symposium (ICLP/SLP)", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1988}, {"title": "Classical negation in logic programs and disjunctive databases", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "New Generation Comput. 9(3/4),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1991}, {"title": "Fixed-parameter complexity in AI and nonmonotonic reasoning", "author": ["G. Gottlob", "F. Scarcello", "M. Sideri"], "venue": "AI 138(1-2),", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2002}, {"title": "The even-path problem for graphs and digraphs", "author": ["A.S. Lapaugh", "C.H. Papadimitriou"], "venue": "Networks 14(4),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1984}, {"title": "On odd and even cycles in normal logic programs", "author": ["F. Lin", "X. Zhao"], "venue": "Proceedings of the 19th national conference on AI (AAAI). 80\u201385", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2004}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V.W. Marek", "M. Truszczynski"], "venue": "The Logic Programming Paradigm", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1999}, {"title": "On the complexity of feedback set problems in signed digraphs", "author": ["M. Montalva", "J. Aracena", "A. Gajardo"], "venue": "Electronic Notes in Discrete Mathematics", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2008}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and AI 25(3),", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1999}, {"title": "Permanents, Pfaffian orientations, and even directed circuits", "author": ["N. Robertson", "P. Seymour", "R. Thomas"], "venue": "Annals of Mathematics 150(3),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1999}, {"title": "Collection on answer set programming (ASP) and more", "author": ["T. Schaub"], "venue": "Tech. rep.,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2008}, {"title": "Pfaffian orientations, 0/1 permanents, and even cycles in directed graphs", "author": ["V. Vazirani", "M. Yannakakis"], "venue": "Automata, Languages and Programming, LNCS", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1988}, {"title": "Backdoors to typical case complexity", "author": ["R. Williams", "C. Gomes", "B. Selman"], "venue": "Proceedings of the Eighteenth International Joint Conference on AI (IJCAI)", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2003}, {"title": "On the connections between backdoors, restarts, and heavy-tailedness in combinatorial search", "author": ["R. Williams", "C. Gomes", "B. Selman"], "venue": "Proceedings of the Sixth International Conference on Theory and Applications of Satisfiability Testing (SAT)", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2003}, {"title": "Finding even cycles even faster", "author": ["R. Yuster", "U. Zwick"], "venue": "Automata, Languages and Programming, LNCS", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1994}, {"title": "A Study of Answer set Programming", "author": ["J. Zhao"], "venue": "Mphil thesis, The Hong Kong University of Science and Technology, Dept. of Computer Science", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2002}], "referenceMentions": [{"referenceID": 13, "context": "Answer-set programming (ASP) is a popular framework to describe concisely search and combinatorial problems [14, 16].", "startOffset": 108, "endOffset": 116}, {"referenceID": 15, "context": "Answer-set programming (ASP) is a popular framework to describe concisely search and combinatorial problems [14, 16].", "startOffset": 108, "endOffset": 116}, {"referenceID": 17, "context": "It has been successfully applied in crypto-analysis, code optimization, the semantic web, and several other fields [18].", "startOffset": 115, "endOffset": 119}, {"referenceID": 3, "context": "The complexity of finding an answer-set for a disjunctive logic program is \u03a32 -complete [4].", "startOffset": 88, "endOffset": 91}, {"referenceID": 4, "context": "Recently, Fichte and Szeider [5] have established a new approach to ASP based on the idea of backdoors, a concept that originates from the area of satisfiability [20].", "startOffset": 29, "endOffset": 32}, {"referenceID": 19, "context": "Recently, Fichte and Szeider [5] have established a new approach to ASP based on the idea of backdoors, a concept that originates from the area of satisfiability [20].", "startOffset": 162, "endOffset": 166}, {"referenceID": 8, "context": ", stratified programs [9]).", "startOffset": 22, "endOffset": 25}, {"referenceID": 4, "context": "Contribution In this paper, we extend the backdoor approach of [5] using ideas from Zhao [23].", "startOffset": 63, "endOffset": 66}, {"referenceID": 22, "context": "Contribution In this paper, we extend the backdoor approach of [5] using ideas from Zhao [23].", "startOffset": 89, "endOffset": 93}, {"referenceID": 2, "context": "Uniform polynomial-time tractable problems are also known as fixed-parameter tractable problems [3].", "startOffset": 96, "endOffset": 99}, {"referenceID": 12, "context": "Further, we establish that result (2) generalizes a result of Lin and Zhao [13].", "startOffset": 75, "endOffset": 79}, {"referenceID": 9, "context": "The Gelfond-Lifschitz (GL) reduct of a program P under a set M of atoms is the program P obtained from P by first removing all rules r with B(r) \u2229M 6= \u2205 and second removing all \u00acz where z \u2208 B(r) from the remaining rules r [10].", "startOffset": 222, "endOffset": 226}, {"referenceID": 19, "context": "They have originally been introduced by Williams, Gomes, and Selman [20, 21] as a concept to the analysis of decision heuristics in propositional satisfiability [6].", "startOffset": 68, "endOffset": 76}, {"referenceID": 20, "context": "They have originally been introduced by Williams, Gomes, and Selman [20, 21] as a concept to the analysis of decision heuristics in propositional satisfiability [6].", "startOffset": 68, "endOffset": 76}, {"referenceID": 5, "context": "They have originally been introduced by Williams, Gomes, and Selman [20, 21] as a concept to the analysis of decision heuristics in propositional satisfiability [6].", "startOffset": 161, "endOffset": 164}, {"referenceID": 4, "context": "Fichte and Szeider [5] have recently adapted backdoors to the field of ASP.", "startOffset": 19, "endOffset": 22}, {"referenceID": 4, "context": "Lemma 1 ([5]).", "startOffset": 9, "endOffset": 12}, {"referenceID": 8, "context": "Disallowing both causes yields socalled stratified programs [9].", "startOffset": 60, "endOffset": 63}, {"referenceID": 0, "context": "In order to define acyclicity we associate with each normal program P its directed dependency graph DP [1], and its undirected dependency graph UP [11].", "startOffset": 103, "endOffset": 106}, {"referenceID": 10, "context": "In order to define acyclicity we associate with each normal program P its directed dependency graph DP [1], and its undirected dependency graph UP [11].", "startOffset": 147, "endOffset": 151}, {"referenceID": 4, "context": "In recent research, Fichte and Szeider [5] have considered target classes that consist of normal programs without directed bad cycles (no-DBC), without undirected bad cycles (no-BC), without directed cycles (no-DC), and without undirected cycles (no-C).", "startOffset": 39, "endOffset": 42}, {"referenceID": 0, "context": "no-DBC is exactly the class that contains all stratified programs [1].", "startOffset": 66, "endOffset": 69}, {"referenceID": 14, "context": "The following connection was already observed by Aracena, Gajardo, and Montalva [15].", "startOffset": 80, "endOffset": 84}, {"referenceID": 14, "context": "Lemma 2 ([15]).", "startOffset": 9, "endOffset": 13}, {"referenceID": 22, "context": "Zhao [23] has shown that a program without a bad even cycle has either no answer-set or the well-founded model is its answer-set.", "startOffset": 5, "endOffset": 9}, {"referenceID": 6, "context": "is monotone for a normal program, there is a least fixed point and it can be computed in polynomial time [7, 8].", "startOffset": 105, "endOffset": 111}, {"referenceID": 7, "context": "is monotone for a normal program, there is a least fixed point and it can be computed in polynomial time [7, 8].", "startOffset": 105, "endOffset": 111}, {"referenceID": 11, "context": "It was shown by Lapaugh and Papadimitriou [12] that deciding whether G contains a simple path from s to t via m is NP-complete.", "startOffset": 42, "endOffset": 46}, {"referenceID": 18, "context": "Vazirani and Yannakakis [19] have shown that finding a cycle of even length in a directed graph is equivalent to finding a Pfaffian orientation of a graph.", "startOffset": 24, "endOffset": 28}, {"referenceID": 16, "context": "Since Robertson, Seymour, and Thomas [17] have shown that a Pfaffian orientation can be found in polynomial time.", "startOffset": 37, "endOffset": 41}, {"referenceID": 2, "context": "Note that there is strong theoretical evidence that the problem Hitting Set does not admit uniform polynomial-time tractability [3].", "startOffset": 128, "endOffset": 131}, {"referenceID": 4, "context": "The proof is very similar to the proof for target classes without respecting the parity by Fichte and Szeider [5].", "startOffset": 110, "endOffset": 113}, {"referenceID": 21, "context": "Since Yuster and Zwick [22] have shown that finding an even cycle in an undirected graph is polynomial-time solvable, the lemma holds.", "startOffset": 23, "endOffset": 27}, {"referenceID": 1, "context": "Since Arikati and Peled [2] have shown that finding an odd path in an undirected graph is polynomial-time solvable, the lemma follows.", "startOffset": 24, "endOffset": 27}, {"referenceID": 4, "context": "If k is considered as part of the input we can show that for each class C \u2208 {no-EC,no-BEC} the problem k-Strong C-Backdoor Detection is polynomial-time equivalent to Hitting Set [5].", "startOffset": 178, "endOffset": 181}, {"referenceID": 12, "context": "Lin and Zhao [13] have studied even cycles as a parameter to ASP.", "startOffset": 13, "endOffset": 17}, {"referenceID": 4, "context": "We have extended the backdoor approach of [5] by taking the parity of the number of negative edges on bad cycles into account.", "startOffset": 42, "endOffset": 45}, {"referenceID": 12, "context": "We have shown that the backdoor approach with parity target classes generalize a result of Lin and Zhao [13].", "startOffset": 104, "endOffset": 108}], "year": 2012, "abstractText": "Backdoors of answer-set programs are sets of atoms that represent \u201cclever reasoning shortcuts\u201d through the search space. Assignments to backdoor atoms reduce the given program to several programs that belong to a tractable target class. Previous research has considered target classes based on notions of acyclicity where various types of cycles (good and bad cycles) are excluded from graph representations of programs. We generalize the target classes by taking the parity of the number of negative edges on bad cycles into account and consider backdoors for such classes. We establish new hardness results and non-uniform polynomialtime tractability relative to directed or undirected cycles.", "creator": "LaTeX with hyperref package"}}}