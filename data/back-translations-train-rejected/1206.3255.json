{"id": "1206.3255", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Jun-2012", "title": "Church: a language for generative models", "abstract": "We introduce Church, a universal language for describing stochastic generative processes. Church is based on the Lisp model of lambda calculus, containing a pure Lisp as its deterministic subset. The semantics of Church is defined in terms of evaluation histories and conditional distributions on such histories. Church also includes a novel language construct, the stochastic memoizer, which enables simple description of many complex non-parametric models. We illustrate language features through several examples, including: a generalized Bayes net in which parameters cluster over trials, infinite PCFGs, planning by inference, and various non-parametric clustering models. Finally, we show how to implement query on any Church program, exactly and approximately, using Monte Carlo techniques.", "histories": [["v1", "Wed, 13 Jun 2012 15:30:30 GMT  (277kb)", "http://arxiv.org/abs/1206.3255v1", "Appears in Proceedings of the Twenty-Fourth Conference on Uncertainty in Artificial Intelligence (UAI2008)"], ["v2", "Tue, 15 Jul 2014 08:32:38 GMT  (110kb,D)", "http://arxiv.org/abs/1206.3255v2", "Minor revisions. Fixed errors in author list"]], "COMMENTS": "Appears in Proceedings of the Twenty-Fourth Conference on Uncertainty in Artificial Intelligence (UAI2008)", "reviews": [], "SUBJECTS": "cs.PL cs.AI cs.LO", "authors": ["noah goodman", "vikash mansinghka", "daniel m roy", "keith bonawitz", "joshua b tenenbaum"], "accepted": false, "id": "1206.3255"}, "pdf": {"name": "1206.3255.pdf", "metadata": {"source": "CRF", "title": "Church: a language for generative models", "authors": ["\u201cThe Pope", "Noah D. Goodman", "Vikash K. Mansinghka", "\u201cAltar Boy", "Daniel Roy", "Keith Bonawitz", "Joshua B. Tenenbaum"], "emails": [], "sections": [{"heading": null, "text": "Formal languages for probabilistic modeling allow for reuse, modularity and descriptive clarity, and promote generic sequencing techniques. We introduce Church, a universal language for describing stochastic generational processes. Church is based on the Lisp model of lambda calculation, which contains a pure Lisp as a deterministic subset. Church's semantics are defined by evaluation histories and conditional distributions of such histories. Church also includes a novel linguistic construct, the stochastic memoizer, which enables a simple description of many complex non-parametric models. We illustrate linguistic features using several examples, including: a generalized Bayes network that gathers parameters through studies, infinite PCFGs, planning through consequence, and various non-parametric cluster models. Finally, we show how to implement queries accurately and roughly using Monte Carlo techniques in each ecclesiastical program."}, {"heading": "1 INTRODUCTION", "text": "Probabilistic models have proved to be an enormously useful tool in the fields of artificial intelligence, machine learning and cognitive science. Mostly, these models are specified in a combination of natural and mathematical language, and conclusions for each new model are implemented by hand. Stochastic programming languages [e.g. 12, 14, 10] aim to tame the modelling process by giving a formal language that provides simple, uniform and reusable descriptions of a broad class of models and supports general inference techniques. In this essay, we introduce the stochastic church. The first two authors have equally contributed to this work. Programming language (named after the computation pioneer Alonzo Church), a universal language for describing generative processes and conditional queries about it, we consider the terms as a condition, and the expressions that represent generative models, arbitrarily compose and abstract as a condition, as the characteristic features of the most important contributions of this church and the following models:"}, {"heading": "2 THE CHURCH LANGUAGE", "text": "In fact, most people will be able to move to another world, in which they will be able to move to another world, in which they will be able to move, in which they will be able to move, in which they will be able to move, in which they will be able to move, in which they will be able to move, in which they will be able to move, in which they will be able to move, in which they will be able to live."}, {"heading": "2.1 Stochastic Memoization", "text": "In deterministic calculation, we imagine that memorization is a technique for efficient implementation that does not affect language semantics (the first time that a (purely functional) procedure is evaluated with given arguments, the return value of which is recorded; after that, evaluations of this procedure with these arguments will directly return this value without re-evaluating the procedural body. Memorization of a stochastic program can radically change semantics: if the flip is a common random procedure (flip)), but if the flip of this expression is true, a collection of memorized functions has random semantics, as discussed in [10]. In Section 3, we use memorization together with lex-query to describe generative processes involving an unknown number of objects with persistent features, similar to the BLOG language [12].To formally define the memorization in a church, we will allow us to expand the scope of the environment in which we have limited."}, {"heading": "2.2 Semantic Correctness", "text": "In this section we give formal statements of the above assertions, which are necessary to specify the semantics of the church, and then outline its proofs. Let church \u2212 denote the set of ecclesiastical expressions that do not include mem.Lemma 2.1. If e-Church \u2212 then the weight of e in a given environment is well defined and \u2264 1.Proof sketch. Arrange the recursive calls for evaluation in a tree with an evaluation at each node and edges, which combine successive applications of evaluation - if a node indicates the evaluation of an elementary random procedure, there will be several edges descending from that node (one for each possible return value), and these edges are labeled with their probability. A story is a path from root to leaf in that tree and its probability is the product of the labels along the path. Let Wn show the sum of probabilities of lengths n or less. The assertion is now that mn classes."}, {"heading": "3 EXAMPLE PROGRAMS", "text": "This year it has come to the point that it has never come as far as this year."}, {"heading": "4 CHURCH IMPLEMENTATION", "text": "The implementing measures to tackle the debt crisis in the eurozone are being taken by the EU Commission and the European Central Bank (ECB)."}, {"heading": "4.1 A Metropolis-Hastings Algorithm", "text": "This year it is more than ever before."}, {"heading": "5 DISCUSSION", "text": "In fact, most of them are able to survive on their own."}, {"heading": "Acknowledgements", "text": "The authors thank Gerry Sussman, Hal Abelson, Tom Knight, Brian Milch, David McAllester and Alexey Radul for the helpful discussions. This work was partly funded by a grant from the NTT Communication Sciences Laboratory."}], "references": [{"title": "Structure and Interpretation of Computer Programs", "author": ["H. Abelson", "G. Sussman"], "venue": "MIT Press,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1996}, {"title": "The infinite hidden Markov model", "author": ["M.J. Beal", "Z. Ghahramani", "C.E. Rasmussen"], "venue": "NIPS 14,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2002}, {"title": "Composable Probabilistic Inference with Blaise", "author": ["K.A. Bonawitz"], "venue": "PhD thesis, MIT,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2008}, {"title": "A Set of Postulates for the Foundation of Logic", "author": ["A. Church"], "venue": "The Annals of Mathematics, 33(2):346\u2013366,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1932}, {"title": "Adaptor grammars: A framework for specifying compositional nonparametric Bayesian models", "author": ["M. Johnson", "T. Griffiths", "S. Goldwater"], "venue": "NIPS 19,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2007}, {"title": "Learning systems of concepts with an infinite relational model", "author": ["C. Kemp", "J.B. Tenenbaum", "T.L. Griffiths", "T. Yamada", "N. Ueda"], "venue": "Proc. 21st Natl Conf. Artif. Intell., AAAI Press,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2006}, {"title": "The Infinite PCFG using Hierarchical Dirichlet Processes", "author": ["P. Liang", "S. Petrov", "M.I. Jordan", "D. Klein"], "venue": "Proc. EMNLP-CoNLL,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2007}, {"title": "WinBUGS-A Bayesian modelling framework: Concepts, structure, and extensibility", "author": ["D.J. Lunn", "A. Thomas", "N. Best", "D. Spiegelhalter"], "venue": "Statistics and Computing, 10(4):325\u2013337,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2000}, {"title": "Random-world semantics and syntactic independence for expressive languages", "author": ["D. McAllester", "B. Milch", "N.D. Goodman"], "venue": "Technical Report MIT-CSAIL-TR-2008-025, Massachusetts Institute of Technology,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2008}, {"title": "A Basis for a Mathematical Theory of Computation", "author": ["J. McCarthy"], "venue": "Computer Programming and Formal Systems, pages 33\u201370,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1963}, {"title": "BLOG: Probabilistic models with unknown objects", "author": ["B. Milch", "B. Marthi", "S. Russell", "D. Sontag", "D.L. Ong", "A. Kolobov"], "venue": "Proc. IJCAI,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2005}, {"title": "Stochastic logic programs", "author": ["S. Muggleton"], "venue": "L. de Raedt, editor, Advances in Inductive Logic Programming, pages 254\u2013264. IOS Press,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1996}, {"title": "IBAL: A probabilistic rational programming language", "author": ["A. Pfeffer"], "venue": "Proc. IJCAI,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2001}, {"title": "Combinatorial stochastic processes, 2002. Notes for Saint Flour Summer School", "author": ["J. Pitman"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2002}, {"title": "Report on the probabilistic language scheme", "author": ["A. Radul"], "venue": "Technical Report MIT-CSAIL-TR-2007-059, Massachusetts Institute of Technology,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2007}, {"title": "Definitional interpreters for higherorder programming", "author": ["J.C. Reynolds"], "venue": "ACM Annual Conference, pages 717\u2013740,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1972}, {"title": "Markov logic networks", "author": ["M. Richardson", "P. Domingos"], "venue": "Machine Learning, 62(1):107\u2013136,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2006}, {"title": "PRISM: A symbolicstatistical modeling language", "author": ["T. Sato", "Y. Kameya"], "venue": "International Joint Conference on Artificial Intelligence,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1997}, {"title": "A Constructive definition of Dirichlet priors", "author": ["J. Sethuraman"], "venue": "Statistica Sinica, 4,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1994}, {"title": "Probabilistic inference for solving (PO)MDPs", "author": ["M. Toussaint", "S. Harmeling", "A. Storkey"], "venue": "Technical Report EDI-INF-RR-0934, University of Edinburgh,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2006}], "referenceMentions": [{"referenceID": 3, "context": "This primitive procedure takes an expression and an environment and returns a value\u2014it is an environment model, shared with Scheme, of Church\u2019s lambda calculus [4, 6].", "startOffset": 160, "endOffset": 166}, {"referenceID": 8, "context": "More generally, a collection of memoized functions has a random-world semantics as discussed in [10].", "startOffset": 96, "endOffset": 100}, {"referenceID": 10, "context": "In Section 3 we use memoization together with lex-query to describe generative processes involving an unknown number of objects with persistent features, similar to the BLOG language [12].", "startOffset": 183, "endOffset": 187}, {"referenceID": 18, "context": "We define such a stochastic memoizer DPmem by using the Dirichlet process (DP) [20]\u2014a distribution on discrete distributions", "startOffset": 79, "endOffset": 83}, {"referenceID": 4, "context": "[5], in the context of grammar learning.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "The infinite relational model [7] with continuous data is similar, but means depend on classes of two objects:", "startOffset": 30, "endOffset": 33}, {"referenceID": 1, "context": "The HDP-HMM [2] uses memoized symbols for states and memoizes transitions:", "startOffset": 12, "endOffset": 15}, {"referenceID": 6, "context": "The HDP-PCFG [8] is also straightforward:", "startOffset": 13, "endOffset": 16}, {"referenceID": 4, "context": "Making adapted versions of any of these models [5] only requires stochastically memoizing unfold:", "startOffset": 47, "endOffset": 50}, {"referenceID": 5, "context": "This basic structure may be used to easily describe more complicated mixture models, such as the continuous-data infinite relational model (IRM) from [7].", "startOffset": 150, "endOffset": 153}, {"referenceID": 6, "context": "Writing the HDP-PCFG [8] and HDP-HMM [2] in Church provides a compact and clear specification to these complicated non-parametric models.", "startOffset": 21, "endOffset": 24}, {"referenceID": 1, "context": "Writing the HDP-PCFG [8] and HDP-HMM [2] in Church provides a compact and clear specification to these complicated non-parametric models.", "startOffset": 37, "endOffset": 40}, {"referenceID": 4, "context": "If we memoize unfold and use this adapted-unfold on PCFG transitions we recover the Adaptor Grammar model of [5]; if we similarly \u201cadapt\u201d the HDP-PCFG or HDP-HMMwe get interesting new models that have not been considered in the literature.", "startOffset": 109, "endOffset": 112}, {"referenceID": 19, "context": "[21], in which rewards are transformed into the probability of getting a single \u201cultimate reward\u201d.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "Figure 5: Top: The skeleton of planning-as-inference in Church (inspired by [21]).", "startOffset": 76, "endOffset": 80}, {"referenceID": 0, "context": "The ability to write query as a Church program\u2014 a metacircular [1] implementation\u2014provides a compelling argument for Church\u2019s modeling power.", "startOffset": 63, "endOffset": 66}, {"referenceID": 13, "context": "A further optimization implements DPmem via the Chinese restaurant process representation of the DP [15].", "startOffset": 100, "endOffset": 104}, {"referenceID": 2, "context": "We implemented our MCMC algorithm atop the Blaise system [3], which simplifies these recursively triggered kernel compositions.", "startOffset": 57, "endOffset": 60}, {"referenceID": 7, "context": "BUGS [9]) and first-order logic (e.", "startOffset": 5, "endOffset": 8}, {"referenceID": 11, "context": "the logic programming approaches of [13, 19], BLOG [12], and Markov logic [18]), generative processes in Church are first-class objects that can be arbitrarily composed and abstracted.", "startOffset": 36, "endOffset": 44}, {"referenceID": 17, "context": "the logic programming approaches of [13, 19], BLOG [12], and Markov logic [18]), generative processes in Church are first-class objects that can be arbitrarily composed and abstracted.", "startOffset": 36, "endOffset": 44}, {"referenceID": 10, "context": "the logic programming approaches of [13, 19], BLOG [12], and Markov logic [18]), generative processes in Church are first-class objects that can be arbitrarily composed and abstracted.", "startOffset": 51, "endOffset": 55}, {"referenceID": 16, "context": "the logic programming approaches of [13, 19], BLOG [12], and Markov logic [18]), generative processes in Church are first-class objects that can be arbitrarily composed and abstracted.", "startOffset": 74, "endOffset": 78}, {"referenceID": 12, "context": "The stochastic functional language IBAL [14], based on the functional language ML, is quite similar to Church, but the two languages emphasize different aspects of functional programming.", "startOffset": 40, "endOffset": 44}, {"referenceID": 9, "context": "Other related work includes non-determistic [11] and weighted nondeterministic [16] extensions to Lisp.", "startOffset": 44, "endOffset": 48}, {"referenceID": 14, "context": "Other related work includes non-determistic [11] and weighted nondeterministic [16] extensions to Lisp.", "startOffset": 79, "endOffset": 83}, {"referenceID": 15, "context": "Since query and eval are the basic constructs defining the meaning of Church expressions, we have a metacircular [17] description of Church within Church.", "startOffset": 113, "endOffset": 117}], "year": 2008, "abstractText": "Formal languages for probabilistic modeling enable re-use, modularity, and descriptive clarity, and can foster generic inference techniques. We introduce Church, a universal language for describing stochastic generative processes. Church is based on the Lisp model of lambda calculus, containing a pure Lisp as its deterministic subset. The semantics of Church is defined in terms of evaluation histories and conditional distributions on such histories. Church also includes a novel language construct, the stochastic memoizer, which enables simple description of many complex non-parametric models. We illustrate language features through several examples, including: a generalized Bayes net in which parameters cluster over trials, infinite PCFGs, planning by inference, and various non-parametric clustering models. Finally, we show how to implement query on any Church program, exactly and approximately, using Monte Carlo techniques.", "creator": "TeX"}}}