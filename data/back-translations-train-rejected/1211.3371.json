{"id": "1211.3371", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Nov-2012", "title": "A Comparison of Meta-heuristic Search for Interactive Software Design", "abstract": "Advances in processing capacity, coupled with the desire to tackle problems where a human subjective judgment plays an important role in determining the value of a proposed solution, has led to a dramatic rise in the number of applications of Interactive Artificial Intelligence. Of particular note is the coupling of meta-heuristic search engines with user-provided evaluation and rating of solutions, usually in the form of Interactive Evolutionary Algorithms (IEAs). These have a well-documented history of successes, but arguably the preponderance of IEAs stems from this history, rather than as a conscious design choice of meta-heuristic based on the characteristics of the problem at hand. This paper sets out to examine the basis for that assumption, taking as a case study the domain of interactive software design. We consider a range of factors that should affect the design choice including ease of use, scalability, and of course, performance, i.e. that ability to generate good solutions within the limited number of evaluations available in interactive work before humans lose focus. We then evaluate three methods, namely greedy local search, an evolutionary algorithm and ant colony optimization, with a variety of representations for candidate solutions. Results show that after suitable parameter tuning, ant colony optimization is highly effective within interactive search and out-performs evolutionary algorithms with respect to increasing numbers of attributes and methods in the software design problem. However, when larger numbers of classes are present in the software design, an evolutionary algorithm using a naive grouping integer-based representation appears more scalable.", "histories": [["v1", "Wed, 14 Nov 2012 18:11:17 GMT  (1363kb)", "http://arxiv.org/abs/1211.3371v1", "31 pages, 4 figures, 6 tables"]], "COMMENTS": "31 pages, 4 figures, 6 tables", "reviews": [], "SUBJECTS": "cs.AI cs.NE", "authors": ["c l simons", "j e smith"], "accepted": false, "id": "1211.3371"}, "pdf": {"name": "1211.3371.pdf", "metadata": {"source": "CRF", "title": "A Comparison of Meta-heuristic Search for Interactive Software Design", "authors": ["C.L. Simons"], "emails": ["james.smith}@uwe.ac.uk"], "sections": [{"heading": null, "text": "Human subjective judgment plays an important role in determining the value of a proposed solution, which has led to a dramatic increase in the number of applications of interactive artificial intelligence. Noteworthy is the coupling of meta-heuristic search engines with user-provided evaluation and evaluation of solutions, usually in the form of interactive evolutionary algorithms (IEAs), which have a well-documented track record, but the preponderance of IEAs probably stems from this history rather than from a conscious design choice of meta-heuristic solutions based on the characteristics of the problem at hand. This paper examines the basis for this assumption, considering the domain of interactive software design as a case study. We consider a number of factors that should influence design choice, including ease of use, scalability and, of course, that is, the ability to generate good solutions within the limited number of available assessments before humans lose focus."}, {"heading": "1 Introduction", "text": "Indeed, Search-Based Software Engineering (SBSE) (Harman 2007, Harman 2011) focuses on an established discipline. SBSE historically focuses on software testing, where solutions are relatively natural and metrics such as structural and functional test covers can automatically be considered quality functions. However, in the upstream stages of software design, such as object-oriented modeling of design classes, the choice of assessment functions is much less well defined - for example, Bowman et al. (2010) we cite 6 different possible metrics relating to structural integrity of design and cohesion. Here, the exact balance of factors influencing the subjective judgments of the human software developer is less well understood - hence the references to the \"art\" of software design."}, {"heading": "2 Background", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Search-Based Software Engineering", "text": "From its early roots with genetic algorithms for developing software test sequences (e.g. Xanthakis et al. 1992, Smith and Fogerty 1996, Jones et al. 1996) and tests for verifying microprocessor design (Smith et al. 1997), the notion that parts of the software development process are essentially optimization problems, and as such are accessible for automated search, has rapidly gained traction. In most cases, search suffers from a combinatorial explosion, and the \"fitness\" landscapes are shaped by Harman and Jones around the turn of the millennium (2001). In the last decade, applications of SBSE can be found across the spectrum of the software development lifecycle, including requirements analysis and scheduling (Ren et al. 2011), design and tools (Bowman et al. 2010, Simet.), software testing (McWein.)."}, {"heading": "2.2 Object-Oriented Software Design", "text": "The first step in software design is to identify and evaluate the concepts and information that are relevant to the design problem. \"Using the object-oriented paradigm, such concepts and information are expressed from the design problem domain by the\" class construct, \"in which individual examples of classes are known as objects. However, these classes and objects are of crucial relevance to subsequent software implementations and tests. The Unified Modeling Language (UML) approaches are the standard modeling language of the object-oriented paradigm and are often used by software designers to visualize and specify classes and other aspects of software design. The use of the UML classes are placeholders or groupings of attributes (i.e., data that must be stored, compiled and accessed), and methods (i.e. units of execution that communicate with other objects or actually communicate with human users, or programs that we refer to in the design of the first piece of software, etc.)."}, {"heading": "2.3 Interactive Meta-Heuristic Search", "text": "This year, it has come to the point where it only takes one year to get to the next round."}, {"heading": "3 Meta-heuristic Search Algorithms", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1 Representations", "text": "In the first representation, which we will call \"naive grouping\" (NG), the genotype is a sequence of d integers from the set {1,..., c} (where c is the maximum number of allowed classes), where the allele value of the grouping gi = j is interpreted in such a way that the element i is placed in the class J. The search space is of the size c d, but there is considerable redundancy in the genotype phenotype mapping since it concerns the class model; the designation applied to a class is irrelevant; the second representation is an extended permutation (XP) inspired by the Travelling Salesman Problem (TSP) and the Vehicle Routing Problem (VRP) (Dead and Vigo 2001). Candidate solutions are presented as permutations of a group of (e + c) elements, where e the attribute and method elements and the additional elements are \"interpreted as an end of the class in a deker.\""}, {"heading": "3.2 Fitness Measures", "text": "To reflect the interactive nature of the meta-heuristic search, a combination of fitness measures is used (to ensure that the design is robust but flexible to change).Therefore, firstly, the measure for achieving structural integrity is inspired by the measure \"Coupling Between Objects\" (Harrison et al. 1998).Regardless of the representation chosen, each candidate solution is decoded into a series of classes, and the CBO is calculated as a proportion of all applications of attributes by methods that occur across class boundaries, expressed as a maximization function fCBO = (1.0 -CBO) x 100, so that fCBO = 100.0 for a fully decoupled design (all applications occur within classes) and 0.0 for a fully coupled design."}, {"heading": "3.3 Evolutionary Algorithm", "text": "The EA selected for comparison uses deterministic binary tournaments for parent selection, and a generational replacement model ensures that the search is comparable to ACO. Random uniform mutations with either a dot or a uniform crossover are applied to the NG representation. For XP representation, we used order-based crossovers (Davis 1991) and \"edge recombination\" (Mathias and Whitley 1992), the former preserving the relative order of the elements (as with planning problems) and the latter preserving adjacence information (as with TSP or VRP). We have already shown that for many permutation problems, the choice of the mutation operator depends on both the problem instance and the state of the search (e.g. Krasnogor and Smith 2001, Serpell and Smith 2010 for adjacence cy- and VRP). Smith et al. 2009 for order-based problems. Therefore, fixed mutation rates for the EA are interpreted either as a location-dependent probability of a mutation or as a single mutation rate of a mutation (an allergy G)."}, {"heading": "3.4 Ant Colony Optimization", "text": "ACOs have been successfully used for permutation problems (Toth and Vigo 2001, Dorigo et al. 2006) where the pheromone pathways naturally map pathological problems such as TSP and VRP. Therefore, it was natural to use the XP representation described above. ACO was implemented as described in Dorigo and Stutzle (2004). Each ant creates a solution by visiting elements (attributes, methods or \"end of class\") one by one and selecting each element probably based on a combination of attractiveness (\u03b1) of pheromone pathways (determined by previous ants) and heuristics. After the full population (colony) has created tours, all pheromone pathways are subject to a constant evaporation (\u03c3). Finally, for each connection made in each of the paths, a small amount (\u00b5) of additional pheromones is determined proportional to the fitness of the path in which they occurred."}, {"heading": "3.5 Greedy Local Search", "text": "In line with the focus on the reuse of shelf components, Greedy Local Search (GLS) is implemented as a (1 + 1) version of the EA code, replacing the mutation with a systematic (and not random) search for the NG values or the 2-opt neighborhood for XP representation."}, {"heading": "4 Factors Affecting Choice of Meta-heuristic Search", "text": "We identify a number of factors that we believe should be taken into account when selecting meta-heuristics when creating an interactive tool, some of which make them easy to quantify, others less so. Without questioning the purposes of interactive optimization, we do not attempt to classify them by importance, but present them with examples of software development problems to illustrate the problems involved."}, {"heading": "4.1 Scalability", "text": "When we look at scalability, we mean not only how well the algorithms scale to solve major problems, but also how well they can help humans develop large software solutions. Typically, this process involves participating in some way in the problem in order to reduce its dimensionality. Therefore, key factors are how well the algorithms help the user to first identify good partial solutions and then \"freeze\" those partial solutions. For a software design, it is fairly easy to imagine an interactive box in which a user can select a class to \"freeze.\" For an EA or local search method, this requires a method to permanently capture the information that certain genes should not be affected by mutations / disturbances and be transmitted under the recombination."}, {"heading": "4.2 Robustness", "text": "Meta-heuristic robustness refers to a number of factors, e.g. appropriateness of representation: How sensitive and appropriate is representation? Could a permutation representation cause problems of degeneration force? Search support: How well do algorithms support single and multiple search? Parameter selection: Is the performance of the algorithm effective in a number of parameters? Parameter tuning / self-adjustment: Can parameters be automatically matched and / or controlled? 4.3 \"Off-the-shelf\" availability \"A number of frameworks and toolkits for implementing EAs are easily and freely available in all major programming languages and environments. Most of these parameters can be customized to run with a parent population of size one to implement local search. Well-known toolkits such as Evolving Objects (Keijzer et al. 2002) and ECJ (Luke et al. 2012) are a set of different data types and provide sufficient flexibility of operators (O)."}, {"heading": "4.4 Constraint Handling", "text": "A key factor in the choice of meta-heuristics is the ease (or difficulty) with which the algorithm can handle all domain-specific constraints. As described above, there is a major limitation to the software design problem: Each class must contain at least one method and attribute. This constraint has a significant impact on grouping elements (attributes and methods) into classes, and the ease (or difficulty) meta-heuristics has with it is a key factor in its choice."}, {"heading": "5 Methodology", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5.2 Strategy", "text": "A key factor in the comparison of meta-heurigen algorithms is the availability of early-life plausibility problems. Unfortunately, benchmark software problems do not readily appear in research literature or industrial repositories. Therefore, three real-life software problems were selected for deployment, which clearly differ in size and complexity. Details of the three design problems are not covered in the following sections."}, {"heading": "5.2 Software Design Problems", "text": "Three problem areas of software design are used as subjects of investigation: The first is a generalized abstraction of a Cinema Booking System (CBS), which, for example, deals with pre-booking for a screening of a movie in a cinema and paying for tickets to visit the cinema. A specification of use cases of the Cinema Booking System design problem is available at Simons (2012a). This problem has 16 attributes, 15 methods and 39 methods / attributes applications. The second problem domain of software design is an extension of a student management system carried out by the in-house department of information systems at the University of the West of England, UK. The university sought to capture and manage the results related to the Graduate Development Program (GDP) of students during their studies. The extension was implemented and used in 2008. A specification of use cases used in development is available at Simons (2012b) The Select Development Program (GDP) of students during their studies."}, {"heading": "6 Single Objective Results", "text": "We begin this section with an assessment of the sensitivity of the two population-based methods to their parameters. In general, constraints can be handled directly (i.e. via repair mechanisms, specialized operators or decoders) or indirectly via tightening functions (Yews and Smith 2003). The former may be more efficient, but require problem-specific algorithm modifications. Therefore, restrictions were initially handled indirectly by setting the suitability for all solutions containing classes with zero methods or zero attributes to zero. This is followed by an analysis of a relatively small change in the individual methods, so that new candidate solutions were regenerated (by following pheromone experiments or by recombination and mutation) when they contained invalid classes - effectively a very rough direct method. Finally, we compare the results directly with the \"best\" parameter sets of three meta-heuristics. For clarity, we have summarized the results, but full details, statistical code and problem protocols can be found in the 2012 Smith and the Smith reports."}, {"heading": "6.1 Greedy Local Search", "text": "Table 3 shows the results obtained with GLS within the framework of the two encodings. For all problems with XP and for the SC problem with NG representation, some runs are not suitable for finding valid solutions, and the second column of suitability and the AES column reflect only those runs that finance valid solutions. Whether one considers all or only successful runs, the quality of the solutions found by the GLS algorithm is significantly higher on the NG landscape than on the XP landscape. It is also worth commenting that the comparative values of AES on the two landscapes - from a random starting point to the local optimum - are usually an order of magnitude longer than the manual design - but this only emphasizes the multi-objective nature of human design."}, {"heading": "6.2 Evolutionary Algorithms", "text": "Analysis of the results from the EAs with both presentations confirms that the fixed mutation rate, which gave the highest fCBO values, depended on both the problem (i.e. the length of representation) and the number of factors influencing the exploration and exploitation balance (population size, crossover operator and probability), and that the results also clearly showed that for each problem and compensatory measure, the use of self-adaptation leads to the discovery of solutions with significantly higher mutation rates without imposing a significant penalty in relation to the number of evaluations performed. Furthermore, the use of self-adaptation does not result in the choice of tournament size or crossover probability leading to the discovery of solutions (within the range of 0.2-0.8)."}, {"heading": "6.3 Ant Colony Optimization (ACO)", "text": "An illustration of the sensitivity of the mean fCBO values achieved for each design problem is shown in Figure 3, at a value \u03c1 of 0.1 and a colony of 25 ants. To sum up the effects: \u03b1: The power increases when \u03b1 rises from 0 to 1.0 - 1.5, but then disappears; \u00b5: the power increases when \u00b5 rises from zero to 3.0; \u03c1: little effect for CBS and GDP, but for SC performance increases when \u03c1increases from 0 to 1.0; the number of ants appears to have little discernible effect on CBS and GDP, but some effect on SC. Figure 3 shows averages, but the complexity of the response area has been confirmed by multiple linear regression analysis, where the fit accuracy has been greatly improved by incorporating square and bilateral interactions between these three design problems."}, {"heading": "6.4 Comparative Analysis", "text": "Table 4 shows a comparison of the performance of the \"best\" version of the three above search algorithms. Standard deviations are all in the range [0,5,5], with the exception of GLS-XP (35-36) and GLS-NG on SC (27). Bold values indicate the order of precedence per problem according to the groups in which the results are statistically significantly different. Given the budget of one million reviews, this should be seen as an indication of the ability of algorithms to search landscapes caused by different representations of this problem. As we have shown elsewhere that the coupling is correlated to the assessment of human designs, it makes little sense if algorithms do not perform well here, subjecting people to interact with them. In most cases, metaheuristics creates solutions with lower coupling than manual designs. Although GLS-NG performs well on CBS and BIP, its low reliability on the ACSC seems to make the solution less suitable than the GEA (although the second-level NG is not the most suitable)."}, {"heading": "6.5 Constraint Handling", "text": "To investigate the worse behavior of the SC problem, we used ACO and EA-NG to produce designs with 5 classes instead of 16. In each case, the best fCBO values of over 90 were observed - showing that the difficulty is one of the portions of the search space that is unfeasible, not its size. As described above, after a progeny solution (EA) or a new solution path (ACO) a check is performed to ensure that it contains at least one method and attribute. In the indirect approach used so far, unfeasible solutions are assigned a suitability of 0.0. Although direct methods for handling limitations have been reported as more effective (Yews and Smith, 2003), they would normally require highly specialized operators, sophisticated repair mechanisms that would mitigate against the use of these meta-heuristics as general purpose machines for interactive search. We therefore implemented the simplest form of the \"direct approach\" to the ACO being created as a \"significant solution\" in EA-BO and a \"re-feasible result in EA-BO."}, {"heading": "7. Interactive Search Simulation", "text": "The results in Section 6 concerned the ability of meta-heuristics to reliably find good solutions to the software development problem in the face of a large number of assessments. While this is useful to exclude some methods (e.g. GLS), the overall ranking of the algorithms is only really relevant if a replacement fitness model is available, since people in practice can only evaluate a few dozen solutions against fatigue and lack of commitment. Thus, we compare performance in a time-limited scenario by using our previous work to calculate fitness as the stochastic sum of the coupling, and two elegance metrics to simulate the effects of user evaluation. As we do not ask users to evaluate impracticable solutions, and initial experiments showed that the effect of redundancy is much lower than the smaller population sizes appropriate for visual representation, we used direct coercive action, i.e. unworkable solutions are created until they are valid."}, {"heading": "8. Analysis", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "8.1 Scalability", "text": "Unlike Stochastic Local Search, both population-based search algorithms (EAs and ACO) offer a good level of scalability in terms of the number of elements (attributes and methods) present in the interactive software design problem. In terms of CBS and BIP design problems, both EAs and ACO detect design solutions of superior suitability compared to handmade manual design, both for objective search and multi-objective interactive search simulation. In fact, ACO performs better on a large number of elements than the EAs. However, the ACO struggled with the scalability of the SC design problem. Further analysis revealed that the decisive factor affecting scalability is the proportion of unworkable solutions in the search space, reflecting the limitation that each class must have at least one method and attribute. In the above results, we examined SC with 16 classes to enable comparison with the manual design problem."}, {"heading": "8.2 Robustness", "text": "In line with previous findings (Stone and Smith 2002, Serpell and Smith 2010), the results of the EAs show that self-matching mutations allow a high degree of robustness, making the algorithm insensitive to crossover probabilities or selection pressure. Conversely, it is evident that ACO is sensitive to parameter values even once set, but the same parameter values (\u03b1 = 1.0-1.5, \u00b5 = 3.0, \u03c3 = 0.1) provide good results across all three software design problems. While the ACO graph representation appears more productive for different number of elements in the software design solutions, the EA with integer-based naive grouping appears more robust than different class numbers."}, {"heading": "8.3 \u2018Off-the-Shelf\u2019 Availability", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "As described in section 4.3, key factors affecting the application of \u2018off-the-shelf\u2019", "text": "Frameworks and toolkits for EAs and ACO seem to be (i) their ability to easily adapt the specifics of the search problem in question, and (ii) available documentation and support. In the case of the software design problem, the specific limitation of \"at least one attribute and one method\" in the EA or ACO frameworks is not sufficiently taken into account. In a sense, this is not entirely surprising, since frameworks for software development are necessarily generic. Furthermore, the available documentation, especially for ACO, is not comprehensive enough. An additional, though perhaps less important factor may be the choice of the programming language provided by the framework. Thus, ACO frameworks such as ACO (2012) focus on the C and C + + programming language that meet the portability and interoperability requirements of a GUI-driven interactive meta-heuristic search engine or not."}, {"heading": "8.4 Constraint Handling", "text": "Dealing with the coercion of each class that contains at least one attribute and at least one method seems to confirm our hypothesis. Firstly, coercion can simply be ignored in the search, but invalid design solutions result in zero fitness. Secondly, the search algorithm can be customized and specialized to prevent the construction of invalid design solutions. Thirdly, the search algorithm can also be adapted to the repetition of a design solution until a valid solution appears. Much of the research in this paper focuses on the use of the first tactic that appears to be effective. Indeed, the results of Section 6.1.5 surprisingly suggest that the introduction of coercive action into the ACO algorithm provides inferior results from the point of view of an interactive design simulation."}, {"heading": "9 Conclusions", "text": "This paper attempts to challenge the largely historical introduction of evolutionary computing technology as the basis of an engine for interactive search in early-life software design. Greedy local search, evolutionary algorithms, and ant colony optimization have been compared, and the performance of population-based algorithms has been considered superior to single-parent stochastic local search. Indeed, experimental results show that population-based search produces software solutions for fitness scores that are superior to those of handmade design solutions. Given a large computing budget - for example, if a replacement fitness model were available, requiring only occasional user evaluations - the EA proves to be a clear favorite in terms of optimization performance with the holistic NG representation. It is much more robust compared to parameter settings and the methods used to handle limitations. However, when a fully interactive search is needed, a smaller computational budget can result, with a more visualized side, and a much more limited number of populations."}], "references": [{"title": "An object-oriented high-level design-based class cohesion metric", "author": ["J May 2012 Al Dallal", "LC Briand"], "venue": null, "citeRegEx": "Dallal and Briand,? \\Q2010\\E", "shortCiteRegEx": "Dallal and Briand", "year": 2010}, {"title": "Interactive concept-based search using MOEA", "author": ["G Avigad", "A Moshaiov", "N Brauner"], "venue": "Info Softw Tech", "citeRegEx": "Avigad et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Avigad et al\\.", "year": 2005}, {"title": "On the invariance of ant colony", "author": ["M Birattari", "P Pellegrini", "M Dorigo"], "venue": "J Comput Intell", "citeRegEx": "Birattari et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Birattari et al\\.", "year": 2007}, {"title": "Visual interactive evolutionary algorithm for high dimensional data", "author": ["L Boudjeloud", "F Poulet"], "venue": null, "citeRegEx": "Boudjeloud and Poulet,? \\Q2005\\E", "shortCiteRegEx": "Boudjeloud and Poulet", "year": 2005}, {"title": "Solving the class responsibility assignment problem", "author": ["M Bowman", "LC Briand", "Labiche Y"], "venue": null, "citeRegEx": "Bowman et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Bowman et al\\.", "year": 2010}, {"title": "A unified framework for coupling measurement", "author": ["LC Briand", "JW Daly", "JK Wust"], "venue": null, "citeRegEx": "Briand et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Briand et al\\.", "year": 1999}, {"title": "Ergonomic chair design by fusing qualitative", "author": ["A Brintrup", "J Ramsden", "H Takagi", "Tiwari A"], "venue": "IEEE Trans Softw Eng", "citeRegEx": "Brintrup et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Brintrup et al\\.", "year": 2008}, {"title": "Adaptive surface inspection via interactive evolution", "author": ["P Caleb-Solly", "J Smith"], "venue": "Evolutionary Computation (CEC", "citeRegEx": "Caleb.Solly and Smith,? \\Q2007\\E", "shortCiteRegEx": "Caleb.Solly and Smith", "year": 2007}, {"title": "The Blind Watchmaker", "author": ["L Davis"], "venue": "Handbook of genetic algorithms. Van Nostrand Reinhold. Dawkins R", "citeRegEx": "Davis,? \\Q1991\\E", "shortCiteRegEx": "Davis", "year": 1991}, {"title": "Ant Colony Optimisation", "author": ["M Dorigo", "T Stutzle"], "venue": "Springer Falkenauer E", "citeRegEx": "Dorigo and Stutzle,? \\Q2004\\E", "shortCiteRegEx": "Dorigo and Stutzle", "year": 2004}, {"title": "Automatic structural testing using genetic algorithms", "author": ["http://arXiv.org Jones BF", "Sthamer H-H", "DE Eyres"], "venue": null, "citeRegEx": "BF et al\\.,? \\Q2008\\E", "shortCiteRegEx": "BF et al\\.", "year": 2008}, {"title": "Evolving objects: a general purpose evolutionary computation library", "author": ["M Keijzer", "JJ Merelo", "G Romero", "GM Schoenauer"], "venue": "Artif Evol", "citeRegEx": "Keijzer et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Keijzer et al\\.", "year": 2002}, {"title": "Interactive solving of vehicle routing and scheduling problems: basic concepts and qualification of tabu search approaches", "author": ["H Kopfer", "J Schonberger"], "venue": "Proceedings of the 35th Annual Hawaii International Conference on System Sciences (HICSS", "citeRegEx": "Kopfer and Schonberger,? \\Q2002\\E", "shortCiteRegEx": "Kopfer and Schonberger", "year": 2002}, {"title": "ECJ 20: A java-based evolutionary computation research system", "author": ["S Luke"], "venue": "http://cs.gmu.edu/~eclab/projects/ecj/ Accessed", "citeRegEx": "Luke,? \\Q2012\\E", "shortCiteRegEx": "Luke", "year": 2012}, {"title": "An investigation into the applicability and validity of object-oriented design metrics", "author": ["R Harrison", "S Councell", "R Nithi"], "venue": "Emp Softw Eng", "citeRegEx": "Harrison et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Harrison et al\\.", "year": 1998}, {"title": "The current state and future of search based software engineering", "author": ["M. Harman"], "venue": "Proceedings of Future of Software Engineering", "citeRegEx": "Harman,? \\Q2007\\E", "shortCiteRegEx": "Harman", "year": 2007}, {"title": "Software engineering meets evolutionary computation", "author": ["M. Harman"], "venue": null, "citeRegEx": "Harman,? \\Q2011\\E", "shortCiteRegEx": "Harman", "year": 2011}, {"title": "Search-based software engineering", "author": ["M Harman", "BJ Jones"], "venue": "Info and Softw Tech", "citeRegEx": "Harman and Jones,? \\Q2001\\E", "shortCiteRegEx": "Harman and Jones", "year": 2001}, {"title": "Pareto optimal search-based refactoring at the design level", "author": ["M Harman", "L Tratt"], "venue": "Proceedings of the Genetic and Evolutionary Computation Conference (GECCO", "citeRegEx": "Harman and Tratt,? \\Q2007\\E", "shortCiteRegEx": "Harman and Tratt", "year": 2007}, {"title": "Emergence of profitable search strategies based on a simple inheritance mechanism", "author": ["N Krasnogor", "JE Smith"], "venue": "In Proceedings of the Genetic and Evolutionary Computation Conference ( GECCO", "citeRegEx": "Krasnogor and Smith,? \\Q2001\\E", "shortCiteRegEx": "Krasnogor and Smith", "year": 2001}, {"title": "Multiple fuzzy state-value functions for human evaluation through interactive trajectory planning of a partner robot", "author": ["N Kubota", "Y Nojima", "F Kojima", "T Fukuda"], "venue": "Soft Comput", "citeRegEx": "Kubota et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Kubota et al\\.", "year": 2006}, {"title": "Interactive genetic algorithm with wavelet coefficients for emotional image retrieval", "author": ["Lee J-Y", "Cho S-B"], "venue": "In Proceedings of the 5th International Conference on Soft Computing and Information /Intelligent Systems,", "citeRegEx": "J.Y and S.B,? \\Q1999\\E", "shortCiteRegEx": "J.Y and S.B", "year": 1999}, {"title": "Interactive evolution for cochlear implants", "author": ["P Legrand", "C Bourgeois-Republique", "V Pean", "E Harboun-Cohen", "J Levy-Vehel", "B Frachet", "E Lutton", "P Collet"], "venue": "fitting. Gen Prog Evol Mach", "citeRegEx": "Legrand et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Legrand et al\\.", "year": 2007}, {"title": "Revisiting the Restricted Growth Function Genetic Algorithm for Grouping Problems", "author": ["R Lewis", "E Pullin"], "venue": "Evol Comput", "citeRegEx": "Lewis and Pullin,? \\Q2011\\E", "shortCiteRegEx": "Lewis and Pullin", "year": 2011}, {"title": "Towards a new evolutionary computation: advances in estimation of distribution", "author": ["P Lozano", "P Larranga", "I Inz", "E Bengoetxea"], "venue": null, "citeRegEx": "Lozano et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Lozano et al\\.", "year": 2006}, {"title": "Interactive particle swarm optimisation", "author": ["J Madar", "J Abonyi", "F Szeifert"], "venue": null, "citeRegEx": "Madar et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Madar et al\\.", "year": 2005}, {"title": "Genetic operators, the fitness landscape and the traveling salesman problem", "author": ["K. Mathias", "D Whitley"], "venue": "th International Conference on Intelligent Systems Design and Applications (ISDA", "citeRegEx": "Mathias and Whitley,? \\Q1992\\E", "shortCiteRegEx": "Mathias and Whitley", "year": 1992}, {"title": "Search-based software test data generation: a survey", "author": ["P McMinn"], "venue": "Softw Test Verif Reliab", "citeRegEx": "McMinn,? \\Q2004\\E", "shortCiteRegEx": "McMinn", "year": 2004}, {"title": "The magical number seven, plus or minus two: some limits on our capacity for processing information", "author": ["G Miller"], "venue": "Psych Rev", "citeRegEx": "Miller,? \\Q1956\\E", "shortCiteRegEx": "Miller", "year": 1956}, {"title": "An input method using discrete fitness values for interactive GA", "author": ["M Ohsaki", "H Takagi", "K Ohya"], "venue": "J Intel Fuzzy Sys", "citeRegEx": "Ohsaki et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Ohsaki et al\\.", "year": 1998}, {"title": "Search-based refactoring for software maintenance", "author": ["M O\u2019Keeffe", "MO Cinneide"], "venue": "J Sys Softw", "citeRegEx": "O.Keeffe and Cinneide,? \\Q2008\\E", "shortCiteRegEx": "O.Keeffe and Cinneide", "year": 2008}, {"title": "User-centric image segmentation using an interactive parameter adaptation tool", "author": ["O Pauplin", "J. Caleb-Solly P Smith"], "venue": "Pattern Recognition", "citeRegEx": "Pauplin and Smith,? \\Q2010\\E", "shortCiteRegEx": "Pauplin and Smith", "year": 2010}, {"title": "Cooperative co-evolutionary optimisation of software project assignments and job scheduling", "author": ["J Ren", "M Harman", "M Di Penta"], "venue": "Proceedings of the Third International Symposium of Search Based Software Engineering (SSBSE", "citeRegEx": "Ren et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Ren et al\\.", "year": 2011}, {"title": "Self-adaption of mutation operator and probability for permutation representations in genetic algorithms", "author": ["M Serpell", "JE Smith"], "venue": "Evol Comput", "citeRegEx": "Serpell and Smith,? \\Q2010\\E", "shortCiteRegEx": "Serpell and Smith", "year": 2010}, {"title": "Interactive evolutionary computing in early lifecycle software engineering design", "author": ["CL Simons"], "venue": "PhD Thesis,", "citeRegEx": "Simons,? \\Q2011\\E", "shortCiteRegEx": "Simons", "year": 2011}, {"title": "Use Case Specifications for Cinema Booking System", "author": ["CL Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/CinemaBookingSystem.htm Accessed", "citeRegEx": "Simons,? \\Q2012\\E", "shortCiteRegEx": "Simons", "year": 2012}, {"title": "Use Case Specifications for Graduate Development Program", "author": ["CL Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/GraduateDevelopmentProgram.htm Accessed", "citeRegEx": "Simons,? \\Q2012\\E", "shortCiteRegEx": "Simons", "year": 2012}, {"title": "Use Case Specifications for Select Cruises", "author": ["CL Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/SelectCruises.htm Accessed", "citeRegEx": "Simons,? \\Q2012\\E", "shortCiteRegEx": "Simons", "year": 2012}, {"title": "2012d) Manual Software Designs for Problem Domains", "author": ["C.L. Simons"], "venue": "http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/ManualDesigns.pdf Accessed", "citeRegEx": "Simons,? \\Q2012\\E", "shortCiteRegEx": "Simons", "year": 2012}, {"title": "Interactive, evolutionary search in upstream objectoriented class design", "author": ["CL Simons", "IC Parmee", "Gwynllyw R"], "venue": "IEEE Trans Softw Eng", "citeRegEx": "Simons et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Simons et al\\.", "year": 2010}, {"title": "Dynamic parameter control of interactive local search in UML software design", "author": ["CL Simons", "IC Parmee"], "venue": "Proceedings of the 2010 International Conference on Systems, Man and Cybernetics (SMC", "citeRegEx": "Simons and Parmee,? \\Q2010\\E", "shortCiteRegEx": "Simons and Parmee", "year": 2010}, {"title": "Elegant object-oriented software design via interactive evolutionary computation", "author": ["CL Simons", "IC Parmee"], "venue": "Technical Report UWE-AIG 2012-13,", "citeRegEx": "Simons and Parmee,? \\Q2012\\E", "shortCiteRegEx": "Simons and Parmee", "year": 2012}, {"title": "Source code, Extended Results and Analysis for this paper. http://www.cems.uwe.ac.uk/~clsimons/CaseStudies/Appendix.htm Accessed", "author": ["Simons CL", "JE Smith"], "venue": null, "citeRegEx": "CL and Smith,? \\Q2012\\E", "shortCiteRegEx": "CL and Smith", "year": 2012}, {"title": "Interactive evolution of dynamical systems", "author": ["K Sims"], "venue": "First European Conference on Artificial Life,", "citeRegEx": "Sims,? \\Q1991\\E", "shortCiteRegEx": "Sims", "year": 1991}, {"title": "Artificial evolution for computer graphics", "author": ["K Sims"], "venue": "Comp Graph", "citeRegEx": "Sims,? \\Q1991\\E", "shortCiteRegEx": "Sims", "year": 1991}, {"title": "Modelling GAs with self-adaptive mutation rates", "author": ["JE Smith"], "venue": "Proceedings of the Genetic and Evolutionary Computation Conference (GECCO", "citeRegEx": "Smith,? \\Q2001\\E", "shortCiteRegEx": "Smith", "year": 2001}, {"title": "Microprocessor design verification by two-phase evolution of variable length tests", "author": ["JE Smith", "M Bartley", "TC Fogarty"], "venue": "In Proceedings of the 1997 IEEE Conference on Evolutionary Computation,", "citeRegEx": "Smith et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Smith et al\\.", "year": 1997}, {"title": "Staggemeir A (2009) A genetic approach to statistical disclosure control", "author": ["JE Smith", "A Clark"], "venue": "Proceedings of the", "citeRegEx": "Smith and Clark,? \\Q2009\\E", "shortCiteRegEx": "Smith and Clark", "year": 2009}, {"title": "Evolving software test data - GAs learn self- expression", "author": ["JE Smith", "TC Fogarty"], "venue": null, "citeRegEx": "Smith and Fogarty,? \\Q1996\\E", "shortCiteRegEx": "Smith and Fogarty", "year": 1996}, {"title": "Strategy parameter variety in self-adaptation of mutation rates", "author": ["C Stone", "JE Smith"], "venue": "Proceedings of the Genetic and Evolutionary Computation Conference (GECCO", "citeRegEx": "Stone and Smith,? \\Q2002\\E", "shortCiteRegEx": "Stone and Smith", "year": 2002}, {"title": "Interactive evolutionary computation: fusion of the capabilities of EC optimization and human evaluation", "author": ["H Takagi"], "venue": "Proc IEEE", "citeRegEx": "Takagi,? \\Q2001\\E", "shortCiteRegEx": "Takagi", "year": 2001}, {"title": "Interactive evolutionary computation-based hearing-aid fitting", "author": ["H Takagi", "M Ohsaki"], "venue": "IEEE Trans Evol Comput", "citeRegEx": "Takagi and Ohsaki,? \\Q2007\\E", "shortCiteRegEx": "Takagi and Ohsaki", "year": 2007}, {"title": "The Vehicle Routing Problem", "author": ["P Toth", "D Vigo"], "venue": null, "citeRegEx": "Toth and Vigo,? \\Q2001\\E", "shortCiteRegEx": "Toth and Vigo", "year": 2001}, {"title": "RGFGA: An efficient representation and crossover for grouping genetic algorithms", "author": ["A Tucker", "J Crampton", "Swift S"], "venue": "Evol Comput", "citeRegEx": "Tucker et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Tucker et al\\.", "year": 2006}, {"title": "An interactive simulation and analysis software for solving TSP using ant colony optimization algorithms", "author": ["A U\u011fur", "D Aydin"], "venue": "Adv Eng Softw", "citeRegEx": "U\u011fur and Aydin,? \\Q2009\\E", "shortCiteRegEx": "U\u011fur and Aydin", "year": 2009}, {"title": "Automatic program repair with evolutionary computing", "author": ["W Weimer", "S Forrest", "C Le Goues", "Nguyen T"], "venue": "Comms of the ACM", "citeRegEx": "Weimer et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Weimer et al\\.", "year": 2010}, {"title": "Application of genetic algorithms to software testing", "author": ["S Xanthakis"], "venue": "Proceedings of the 5th Int\u2019l Conf Softw Eng (ICSE", "citeRegEx": "Xanthakis,? \\Q1992\\E", "shortCiteRegEx": "Xanthakis", "year": 1992}, {"title": "Repository of publications on search-based software engineering", "author": ["Y Zhang"], "venue": "http://crestweb.cs.ucl.ac.uk/resources/sbse_repository/ Accessed", "citeRegEx": "Zhang,? \\Q2012\\E", "shortCiteRegEx": "Zhang", "year": 2012}], "referenceMentions": [{"referenceID": 39, "context": "Our earlier work demonstrates that we can indeed successfully use meta-heuristics to provide computational support for an interactive software design process, evolving object-oriented class models that met designers\u2019 criteria \u2013both subjective (Simons et al. 2010) and aesthetic (Simons and Parmee (2012).", "startOffset": 243, "endOffset": 263}, {"referenceID": 16, "context": "\u201d (Harman 2011).", "startOffset": 2, "endOffset": 15}, {"referenceID": 4, "context": "However, in the upstream stages of the software design, such as the object-oriented modeling of design classes, the choice of evaluation functions is much less well defined \u2013 for example, Bowman et al. (2010) cite 6 different possible metrics relating to the structural integrity of the design with respect to design coupling and cohesion.", "startOffset": 188, "endOffset": 209}, {"referenceID": 4, "context": "However, in the upstream stages of the software design, such as the object-oriented modeling of design classes, the choice of evaluation functions is much less well defined \u2013 for example, Bowman et al. (2010) cite 6 different possible metrics relating to the structural integrity of the design with respect to design coupling and cohesion. Here the precise balance of factors affecting the subjective judgments of the human software engineer is less well understood \u2013 hence the oftheard references to the \u201cart\u201d of software design. Indeed, this is precisely the sort of scenario in which Interactive Evolutionary Algorithms (IEAs) have been shown to perform well (see e.g. the survey in Takagi (2001), and more recent work such as Tagaki and Ohsaki (2007), Celeb-Solly and Smith (2007), Brintrup et al.", "startOffset": 188, "endOffset": 700}, {"referenceID": 4, "context": "However, in the upstream stages of the software design, such as the object-oriented modeling of design classes, the choice of evaluation functions is much less well defined \u2013 for example, Bowman et al. (2010) cite 6 different possible metrics relating to the structural integrity of the design with respect to design coupling and cohesion. Here the precise balance of factors affecting the subjective judgments of the human software engineer is less well understood \u2013 hence the oftheard references to the \u201cart\u201d of software design. Indeed, this is precisely the sort of scenario in which Interactive Evolutionary Algorithms (IEAs) have been shown to perform well (see e.g. the survey in Takagi (2001), and more recent work such as Tagaki and Ohsaki (2007), Celeb-Solly and Smith (2007), Brintrup et al.", "startOffset": 188, "endOffset": 755}, {"referenceID": 4, "context": "However, in the upstream stages of the software design, such as the object-oriented modeling of design classes, the choice of evaluation functions is much less well defined \u2013 for example, Bowman et al. (2010) cite 6 different possible metrics relating to the structural integrity of the design with respect to design coupling and cohesion. Here the precise balance of factors affecting the subjective judgments of the human software engineer is less well understood \u2013 hence the oftheard references to the \u201cart\u201d of software design. Indeed, this is precisely the sort of scenario in which Interactive Evolutionary Algorithms (IEAs) have been shown to perform well (see e.g. the survey in Takagi (2001), and more recent work such as Tagaki and Ohsaki (2007), Celeb-Solly and Smith (2007), Brintrup et al.", "startOffset": 188, "endOffset": 785}, {"referenceID": 4, "context": "However, in the upstream stages of the software design, such as the object-oriented modeling of design classes, the choice of evaluation functions is much less well defined \u2013 for example, Bowman et al. (2010) cite 6 different possible metrics relating to the structural integrity of the design with respect to design coupling and cohesion. Here the precise balance of factors affecting the subjective judgments of the human software engineer is less well understood \u2013 hence the oftheard references to the \u201cart\u201d of software design. Indeed, this is precisely the sort of scenario in which Interactive Evolutionary Algorithms (IEAs) have been shown to perform well (see e.g. the survey in Takagi (2001), and more recent work such as Tagaki and Ohsaki (2007), Celeb-Solly and Smith (2007), Brintrup et al. (2008) and Pauplin et al.", "startOffset": 188, "endOffset": 809}, {"referenceID": 4, "context": "However, in the upstream stages of the software design, such as the object-oriented modeling of design classes, the choice of evaluation functions is much less well defined \u2013 for example, Bowman et al. (2010) cite 6 different possible metrics relating to the structural integrity of the design with respect to design coupling and cohesion. Here the precise balance of factors affecting the subjective judgments of the human software engineer is less well understood \u2013 hence the oftheard references to the \u201cart\u201d of software design. Indeed, this is precisely the sort of scenario in which Interactive Evolutionary Algorithms (IEAs) have been shown to perform well (see e.g. the survey in Takagi (2001), and more recent work such as Tagaki and Ohsaki (2007), Celeb-Solly and Smith (2007), Brintrup et al. (2008) and Pauplin et al. (2010) ).", "startOffset": 188, "endOffset": 835}, {"referenceID": 4, "context": "However, in the upstream stages of the software design, such as the object-oriented modeling of design classes, the choice of evaluation functions is much less well defined \u2013 for example, Bowman et al. (2010) cite 6 different possible metrics relating to the structural integrity of the design with respect to design coupling and cohesion. Here the precise balance of factors affecting the subjective judgments of the human software engineer is less well understood \u2013 hence the oftheard references to the \u201cart\u201d of software design. Indeed, this is precisely the sort of scenario in which Interactive Evolutionary Algorithms (IEAs) have been shown to perform well (see e.g. the survey in Takagi (2001), and more recent work such as Tagaki and Ohsaki (2007), Celeb-Solly and Smith (2007), Brintrup et al. (2008) and Pauplin et al. (2010) ). Our earlier work demonstrates that we can indeed successfully use meta-heuristics to provide computational support for an interactive software design process, evolving object-oriented class models that met designers\u2019 criteria \u2013both subjective (Simons et al. 2010) and aesthetic (Simons and Parmee (2012). As with most papers in the field, such interactive design search uses an Evolutionary Algorithm (EA) (Eiben and Smith, 2003) because of their long history of successful applications.", "startOffset": 188, "endOffset": 1142}, {"referenceID": 46, "context": "1996) and microprocessor design verification tests (Smith et al. 1997), the idea that parts of the software development process are essentially optimization problems, and as such are amenable to automated search, has rapidly gained currency.", "startOffset": 51, "endOffset": 70}, {"referenceID": 32, "context": "In the last decade applications of SBSE can be found across the spectrum of the software engineering lifecycle, including requirements analysis and scheduling (Ren et al. 2011), design tools and techniques (Bowman et al.", "startOffset": 159, "endOffset": 176}, {"referenceID": 27, "context": "2010), software testing (McMinn 2004) and automated bug fixing (Weimer et al.", "startOffset": 24, "endOffset": 37}, {"referenceID": 55, "context": "2010), software testing (McMinn 2004) and automated bug fixing (Weimer et al. 2010), and software maintenance (O\u2019Keefe and Cinneide 2008).", "startOffset": 63, "endOffset": 83}, {"referenceID": 14, "context": "The term \u201cSearch Based Software Engineering\u201d (SBSE) was coined around the turn of the millennium by Harman and Jones (2001). In the last decade applications of SBSE can be found across the spectrum of the software engineering lifecycle, including requirements analysis and scheduling (Ren et al.", "startOffset": 100, "endOffset": 124}, {"referenceID": 4, "context": "2011), design tools and techniques (Bowman et al. 2010, Simons et al. 2010), software testing (McMinn 2004) and automated bug fixing (Weimer et al. 2010), and software maintenance (O\u2019Keefe and Cinneide 2008). Harman (2011) overviews how software engineering and evolutionary computing have come together, while a comprehensive repository of publications in SBSE is maintained by Zhang (2012).", "startOffset": 36, "endOffset": 223}, {"referenceID": 4, "context": "2011), design tools and techniques (Bowman et al. 2010, Simons et al. 2010), software testing (McMinn 2004) and automated bug fixing (Weimer et al. 2010), and software maintenance (O\u2019Keefe and Cinneide 2008). Harman (2011) overviews how software engineering and evolutionary computing have come together, while a comprehensive repository of publications in SBSE is maintained by Zhang (2012).", "startOffset": 36, "endOffset": 392}, {"referenceID": 23, "context": "2006), but there is still considerable debate over the best choice of representation to avoid massive redundancy in the phenotype / genotype mapping, and this remains a major unsolved problem (Lewis and Pullin 2011).", "startOffset": 192, "endOffset": 215}, {"referenceID": 24, "context": "Given that the evolving population represents a probability distribution function of the assignment of elements to classes, a further possibility might be to use an Estimation of Distribution Algorithm (EDA) (Lozano et al. 2006).", "startOffset": 208, "endOffset": 228}, {"referenceID": 9, "context": "Furthermore, in contrast, Ant Colony Algorithms (ACOs) (Dorigo and Stutzle 2004) have been used very successfully for problems with an inherent grouping component such as the Vehicle Routing Problem (VRP) (Toth and Vigo 2011) since the pheromone trail (broadly equivalent to the probabilistic graphical model in an EDA) can effectively contain a set of partial paths to be selected and traversed by ants without need for class labels, hence avoiding the whole issue of redundancy.", "startOffset": 55, "endOffset": 80}, {"referenceID": 22, "context": "Well known early applications include facerecognition (Caldwell and Johnson1991), the evolution of computer graphics (Sims 1991a, 1991b), fitting Cochlear Implants (Legrand et al. 2007) and hearing aids (Ohsaki et al.", "startOffset": 164, "endOffset": 185}, {"referenceID": 29, "context": "2007) and hearing aids (Ohsaki et al. 1998).", "startOffset": 23, "endOffset": 43}, {"referenceID": 29, "context": "Discretizing continuous values to using five or seven levels was shown to facilitate decision making when allocating fitness values, without the quantization noise significantly compromising convergence (Ohsaki et al. 1998), and this limit on capacity for processing information has been comprehensively discussed in Millar (1956) where he suggests organizing the information into several dimensions and successively into a sequence of \u201cchunks\u201d could help stretch this limit on bandwidth.", "startOffset": 203, "endOffset": 223}, {"referenceID": 22, "context": "Well known early applications include facerecognition (Caldwell and Johnson1991), the evolution of computer graphics (Sims 1991a, 1991b), fitting Cochlear Implants (Legrand et al. 2007) and hearing aids (Ohsaki et al. 1998). A common feature of IEAs is their reliance on human guidance and judgment to direct and control the search which creates both potential weaknesses and strengths. On one hand, human assessment tends to have a component of subjectivity and non-linearity of focus over time. Thus including a human in-theloop introduces a need for rapid convergence to prevent the interactive process from becoming tedious for the human participant. At the same time the ability to manoeuvre the search interactively can potentially be exploited as a powerful strategy for adapting an otherwise naive EA. There have been a number of studies addressing the issues related to minimizing fatigue both, physical and psychological, that can result from prolonged interaction times and the possible stress of the evaluation process. Discretizing continuous values to using five or seven levels was shown to facilitate decision making when allocating fitness values, without the quantization noise significantly compromising convergence (Ohsaki et al. 1998), and this limit on capacity for processing information has been comprehensively discussed in Millar (1956) where he suggests organizing the information into several dimensions and successively into a sequence of \u201cchunks\u201d could help stretch this limit on bandwidth.", "startOffset": 165, "endOffset": 1363}, {"referenceID": 41, "context": "Within SBSE, design elegance has been exploited as a model and surrogate fitness function that then is dynamically combined with quantitative objectives to produce elegant software designs (Simons and Parmee, 2012).", "startOffset": 189, "endOffset": 214}, {"referenceID": 12, "context": "Examples of the former include multiobjective Iterated Local Search (Geiger 2008) and Tabu Search (Kopfer and Schonberger 2002) and of the latter include Ant Colony Optimization (Ugur and Aydin 2009).", "startOffset": 98, "endOffset": 127}, {"referenceID": 25, "context": "Interestingly, however, there is one report of interactive search with Particle Swarm Optimization used to design temperature profiles for a batch beer fermenter (Madar et al. 2005).", "startOffset": 162, "endOffset": 181}, {"referenceID": 3, "context": "7 individuals (Lee and Cho 1999, Boudjeloud and Poulet 2005) or using multiple fuzzy state-value functions to approximate the trajectory of human scoring (Kubota et al. 2005). An interactive concept-based search using a multi-objective evolutionary algorithm was proposed by Avigad at al. (2005) which combined a model-based fitness of sub-concept solutions (using a sorting and ranking procedure) with human evaluation.", "startOffset": 33, "endOffset": 296}, {"referenceID": 3, "context": "7 individuals (Lee and Cho 1999, Boudjeloud and Poulet 2005) or using multiple fuzzy state-value functions to approximate the trajectory of human scoring (Kubota et al. 2005). An interactive concept-based search using a multi-objective evolutionary algorithm was proposed by Avigad at al. (2005) which combined a model-based fitness of sub-concept solutions (using a sorting and ranking procedure) with human evaluation. The efficacy of combining qualitative (userprovided) and quantitative (computer-generated) objectives was also demonstrated in Brintrup et al. (2008). Within SBSE, design elegance has been exploited as a model and surrogate fitness function that then is dynamically combined with quantitative objectives to produce elegant software designs (Simons and Parmee, 2012).", "startOffset": 33, "endOffset": 571}, {"referenceID": 14, "context": "Therefore, firstly, the measure of the structural integrity chosen is inspired by the \u201cCoupling Between Objects\u201d (CBO) measure (Harrison et al. 1998).", "startOffset": 127, "endOffset": 149}, {"referenceID": 41, "context": "We have previously found that the elegance of the software design has proven to be a useful interactive measure (Simons and Parmee 2012), and proposed a number of quantitative elegance metrics relating to the evenness of distribution of attributes and methods among classes within the design.", "startOffset": 112, "endOffset": 136}, {"referenceID": 8, "context": "For the XP representation, we used Order-based crossover (Davis 1991) and \u201cEdge Recombination\u201d (Mathias and Whitley 1992).", "startOffset": 57, "endOffset": 69}, {"referenceID": 26, "context": "For the XP representation, we used Order-based crossover (Davis 1991) and \u201cEdge Recombination\u201d (Mathias and Whitley 1992).", "startOffset": 95, "endOffset": 121}, {"referenceID": 9, "context": "The ACO has been implemented as described in Dorigo and Stutzle (2004). Each ant creates a solution by visiting elements (attributes, methods or \u201cend of class\u201d) in turn, choosing each element probabilistically according to a combination of the attractiveness (\u03b1) of pheromone trails (laid down by previous ants) and heuristics.", "startOffset": 45, "endOffset": 71}, {"referenceID": 2, "context": "It is probably pointless to attempt to draw any firm conclusions about the relative scalability of different methods, as this is of course entirely problem and parameter dependent, although recent theoretical results (Birattari et al. 2007) suggest how to avoid poor scalability in ACO which was previously thought to be a problem.", "startOffset": 217, "endOffset": 240}, {"referenceID": 11, "context": "Well known toolkits such as Evolving Objects (Keijzer et al. 2002) and ECJ (Luke et al.", "startOffset": 45, "endOffset": 66}, {"referenceID": 11, "context": "Well known toolkits such as Evolving Objects (Keijzer et al. 2002) and ECJ (Luke et al. 2012) implement a range of different data types and provide sufficient different mutation and recombination operators to give the user considerable flexibility in their choice of problem representation. Similarly, a number of implementations of the ACO meta-heuristics for optimization (rather than data mining) are available in C and C++ programming languages via the ACO website (2012). Although a range of different algorithm variants are supported and versions for different problems are available, all assume the use of a permutation representation for solutions.", "startOffset": 46, "endOffset": 476}, {"referenceID": 34, "context": "A specification of the use cases of Cinema Booking System design problem is available at Simons (2012a). This problem has 16 attributes, 15 methods and 39 method/attribute uses.", "startOffset": 89, "endOffset": 104}, {"referenceID": 34, "context": "A specification of the use cases of Cinema Booking System design problem is available at Simons (2012a). This problem has 16 attributes, 15 methods and 39 method/attribute uses. The second software design problem domain is an extension to a student administration system performed by the in-house information systems department at the University of the West of England, UK. The university sought to record and manage outcomes relating to the Graduate Development Program (GDP) of students during their studies. The extension was implemented and deployed in 2008. A specification of the use cases used in the development is available from Simons (2012b). The GDP problem has 43 attributes, 12 methods and 121 method/attribute uses.", "startOffset": 89, "endOffset": 653}, {"referenceID": 34, "context": "A specification of the use cases of Cinema Booking System design problem is available at Simons (2012a). This problem has 16 attributes, 15 methods and 39 method/attribute uses. The second software design problem domain is an extension to a student administration system performed by the in-house information systems department at the University of the West of England, UK. The university sought to record and manage outcomes relating to the Graduate Development Program (GDP) of students during their studies. The extension was implemented and deployed in 2008. A specification of the use cases used in the development is available from Simons (2012b). The GDP problem has 43 attributes, 12 methods and 121 method/attribute uses. The third software design problem domain is based on an industrial case study \u2013 Select Cruises (SC) relating to a cruise company selling nautical adventure holidays on tall ships where passengers are members of the crew. The resulting computerized system handles quotation requests, cruise reservations, payment and confirmation via paper letter mailing. A specification of the use cases of Select Cruises design problem is available at Simons (2012c) The SC problem has 52 attributes, 30 methods and 126 method/attribute uses.", "startOffset": 89, "endOffset": 1183}, {"referenceID": 34, "context": "A specification of the use cases of Cinema Booking System design problem is available at Simons (2012a). This problem has 16 attributes, 15 methods and 39 method/attribute uses. The second software design problem domain is an extension to a student administration system performed by the in-house information systems department at the University of the West of England, UK. The university sought to record and manage outcomes relating to the Graduate Development Program (GDP) of students during their studies. The extension was implemented and deployed in 2008. A specification of the use cases used in the development is available from Simons (2012b). The GDP problem has 43 attributes, 12 methods and 121 method/attribute uses. The third software design problem domain is based on an industrial case study \u2013 Select Cruises (SC) relating to a cruise company selling nautical adventure holidays on tall ships where passengers are members of the crew. The resulting computerized system handles quotation requests, cruise reservations, payment and confirmation via paper letter mailing. A specification of the use cases of Select Cruises design problem is available at Simons (2012c) The SC problem has 52 attributes, 30 methods and 126 method/attribute uses. Manual designs created by the appropriate software engineers for the three problems are available at Simons (2012d). Numbers of classes and fCBO, fNAC and fATMR (R=6.", "startOffset": 89, "endOffset": 1375}], "year": 2012, "abstractText": "Advances in processing capacity, coupled with the desire to tackle problems where a human subjective judgment plays an important role in determining the value of a proposed solution, has led to a dramatic rise in the number of applications of Interactive Artificial Intelligence. Of particular note is the coupling of meta-heuristic search engines with user-provided evaluation and rating of solutions, usually in the form of Interactive Evolutionary Algorithms (IEAs). These have a well-documented history of successes, but arguably the preponderance of IEAs stems from this history, rather than as a conscious design choice of meta-heuristic based on the characteristics of the problem at hand. This paper sets out to examine the basis for that assumption, taking as a case study the domain of interactive software design. We consider a range of factors that should affect the design choice including ease of use, scalability, and of course, performance, i.e. that ability to generate good solutions within the limited number of evaluations available in interactive work before humans lose focus. We then evaluate three methods, namely greedy local search, an evolutionary algorithm and ant colony optimization, with a variety of representations for candidate solutions. Results show that after suitable parameter tuning, ant colony optimization is highly effective within interactive search and out-performs evolutionary algorithms with respect to increasing numbers of attributes and methods in the software design problem. However, when larger numbers of classes are present in the software design, an evolutionary algorithm using a na\u00efve grouping integer-based representation appears more scalable.", "creator": "Microsoft\u00ae Word 2010"}}}