{"id": "1212.2056", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Dec-2012", "title": "Soft Constraint Logic Programming for Electric Vehicle Travel Optimization", "abstract": "Soft Constraint Logic Programming is a natural and flexible declarative programming formalism, which allows to model and solve real-life problems involving constraints of different types.", "histories": [["v1", "Mon, 10 Dec 2012 13:30:23 GMT  (20kb)", "http://arxiv.org/abs/1212.2056v1", "17 pages; 26th Workshop on Logic Programming - 2012"]], "COMMENTS": "17 pages; 26th Workshop on Logic Programming - 2012", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["giacoma valentina monreale", "ugo montanari", "nicklas hoch"], "accepted": false, "id": "1212.2056"}, "pdf": {"name": "1212.2056.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Giacoma Valentina Monreale", "Ugo Montanari", "Nicklas Hoch"], "emails": ["vale@di.unipi.it,", "ugo@di.unipi.it", "nicklas.hoch@volkswagen.de"], "sections": [{"heading": null, "text": "ar Xiv: 121 2.20 56v1 [cs.AI] 10 After a slightly more general and elegant presentation of the framework, in this paper we show how we can apply it to the e-mobility problem of coordinating electric vehicles to overcome both energy and time constraints and thus reduce their operating costs. In particular, we focus on the sub-issue of travel optimization, taking into account the sequence of journeys from one user's appointment to the next. Solutions offer the best alternatives in terms of time and energy consumption, including itineraries and possible charging events."}, {"heading": "1 Introduction", "text": "It is one of the greatest challenges we have ever faced in order to travel the world we are concerned about."}, {"heading": "2 Soft Constraints by means of Named Semirings", "text": "This section presents the soft CSP framework based on semiring [2,3] as an instance of the more general framework based on semiring [7], the term semiring based on c-semiring (c stands for constraint) and permutation algebra."}, {"heading": "2.1 C-Semiring", "text": "Definition 1 (c-Halbring): A c-Halbring is a tuple < A, +, \u00d7, 0, 1 > so that: - A is a quantity and 0, 1 \u0445 A; - +: A \u00b7 A \u2192 A is a commutative, associative and idempotent operation, so that 0 is its unit element and 1 its absorbing element; - \u00b7: A \u00b7 A \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 A is a commutative and associative operation, so that it spreads over +, 1 is its unit element and 0 is its absorbing element. Thanks to the idea impotence of the + operator, the relationship is < A, \u2264 >, defined as a \u2264 b, if a + b = b, a partial order. Intuitively, a \u2264 b means that b is better than a or that a is implied b. It is possible to prove that (i) the two operations + and \u00d7 monotonous on \u2264; (ii) 0 are their minimum and 1 maximum is more complete than a < < >)."}, {"heading": "2.2 Permutation Algebra", "text": "In the following, we refer the reader to [8] for a detailed introduction. (In the following, we fix a selected infinite, countable, fully ordered set of names N, which we define with x, y, z,.... Definition 2 (permutations).Definition 3 (kernel).Definition 3 (kernel).Definition 3 (kernel).Definition 3 (kernel).Definition P (N) is a permutation on n. The core of permutation is the set of names changed by the permutation, formally, K (0) = (x).Definition 3 (kernel) is a permutation on n. The core of permutation is the set of names changed by the permutation, formally, K (x) 6 = x).A permutation is an element that does not consist of a permutation."}, {"heading": "2.3 Named c-Semiring.", "text": "The permutation algebra allows the characterization of the finite number of free names of each element c of the named semiring (represented by the support of c), while the permutation algebra applied to c produces the name x locally in c.Definition 7 (Fusion). A (Name) Fusion is a total equivalence relationship to N with only a finite number of non-singular equivalence classes. We call x = y the fusion with a unique non-singular equivalence class consisting of x and y.Definition 8 (Named c-Semiring). A named c-Semiring C = < C, +, xi, x., {C}, 0, 1 > is the fusion with a unique non-singular equivalence class consisting of x and y.Definition 8 (Named c-Semiring)."}, {"heading": "2.4 The Named SCSP Framework", "text": "As briefly illustrated in [7], called c-semiring < S = < A, +, 0, 1 > is a c-semiring, N is a set of fully ordered names, and D is a finite domain of interpretation for N, D, and A.Definition is a function (N \u2192 D) that has a value of A for each assignment: N \u2192 D of the name. We define C as a set of all soft constraints over N, D, and A.Definition is a function (N \u2192 D) that has a value of A for each assignment, and D is a finite domain of interpretation for N. In addition, we leave C to set all soft constraints over N, D, and A. We define the CSCSP as the named c-semiring & lt.C, +, a finite domain of interpretation for N."}, {"heading": "3 Soft Constraint Logic Programming", "text": "This year, the time has come for it to be able to govern the country."}, {"heading": "4 The Electric Vehicle Travel Optimization Problem", "text": "This year, it has come to the point that there will only be one such process, in which there will be such a process, in which the question is to what extent there will be such a process."}, {"heading": "5 Conclusion", "text": "This year, the time has come for us to find a solution that is capable, that we are able, that we are able to find a solution, that we are able to find a solution, that we are able to find a solution, that we are able to find a solution, that we are able to find a solution, that we are able to find a solution, that we are able to find a solution, that we are able to find a solution, that we are able to find a solution, that we are able to find a solution. \""}], "references": [{"title": "Constraint logic programming using Eclipse", "author": ["K.R. Apt", "M. Wallace"], "venue": "Cambridge University Press", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2007}, {"title": "Constraint solving over semirings", "author": ["S. Bistarelli", "U. Montanari", "F. Rossi"], "venue": "IJCAI (1). pp. 624\u2013630", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1995}, {"title": "Semiring-based constraint satisfaction and optimization", "author": ["S. Bistarelli", "U. Montanari", "F. Rossi"], "venue": "J. ACM 44(2), 201\u2013236", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1997}, {"title": "Semiring-based contstraint logic programming: syntax and semantics", "author": ["S. Bistarelli", "U. Montanari", "F. Rossi"], "venue": "ACM TOPLAS 23(1), 1\u201329", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2001}, {"title": "Unicast and multicast QoS routing with soft-constraint logic programming", "author": ["S. Bistarelli", "U. Montanari", "F. Rossi", "F. Santini"], "venue": "ACM TOCL 12(1), 5", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2010}, {"title": "The ciao prolog system", "author": ["F. Bueno", "D. Cabeza", "M. Carro", "M. Hermenegildo", "P. L\u00f3pez-Gar\u0107\u0131a", "G. Puebla"], "venue": "Reference manual. Tech. Rep. CLIP3/97.1, School of Computer Science, Technical University of Madrid (UPM)", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1997}, {"title": "Cc-pi: A constraint-based language for specifying service level agreements", "author": ["M. Buscemi", "U. Montanari"], "venue": "ESOP. LNCS, vol. 4421, pp. 18\u201332. Springer", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2007}, {"title": "About permutation algebras, (pre)sheaves and named sets", "author": ["F. Gadducci", "M. Miculan", "U. Montanari"], "venue": "HOSC 19(2-3), 283\u2013304", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2006}, {"title": "Electric vehicle travel optimization - customer satisfaction despite resource constraints", "author": ["N. Hoch", "K. Zemmer", "B. Werther", "R.Y. Siegwarty"], "venue": "IEEE IVS", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2012}, {"title": "Constraint logic programming", "author": ["J. Jaffar", "J.L. Lassez"], "venue": "POPL. pp. 111\u2013119. ACM Press", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1987}, {"title": "Perfect relaxation in constraint logic programming", "author": ["U. Montanari", "F. Rossi"], "venue": "ICLP. pp. 223\u2013237", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1991}, {"title": "Foundations of constraint satisfaction", "author": ["E. Tsang"], "venue": "Computation in cognitive science, Academic Press", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1993}], "referenceMentions": [{"referenceID": 11, "context": "Classical constraint satisfaction problems (CSPs) [12] represent an expressive and natural formalism useful to specify different types of real-life problems.", "startOffset": 50, "endOffset": 54}, {"referenceID": 1, "context": "For this reason, in [2,3], the soft CSP framework has been proposed.", "startOffset": 20, "endOffset": 25}, {"referenceID": 2, "context": "For this reason, in [2,3], the soft CSP framework has been proposed.", "startOffset": 20, "endOffset": 25}, {"referenceID": 9, "context": "Constraint logic programming (CLP) [10] extends logic programming (LP) by embedding constraints in it: term equalities is replaced with constraints and the basic operation of LP languages, the unification, is replaced by constraint handling in a constraint system.", "startOffset": 35, "endOffset": 39}, {"referenceID": 3, "context": "So, in [4], it has been extended to also handle soft constraints.", "startOffset": 7, "endOffset": 10}, {"referenceID": 6, "context": "In this paper, before presenting an application of the SCLP framework to the e-mobility, we provide a slightly more general and elegant presentation of the SCSP framework based on the notion of named semiring, as briefly presented in [7].", "startOffset": 234, "endOffset": 237}, {"referenceID": 8, "context": "We consider the EV travel optimization problem described in [9].", "startOffset": 60, "endOffset": 63}, {"referenceID": 8, "context": "In [9], the authors propose a hierarchical presentation of the mobility framework, which they exploit to decompose the optimization problem in sub-problems, and in particular, they study the journey level one.", "startOffset": 3, "endOffset": 6}, {"referenceID": 4, "context": "The trip level problem substantially coincides with the multicriteria version of the shortest path problem modelled in [5] as an SCLP program.", "startOffset": 119, "endOffset": 122}, {"referenceID": 5, "context": "In order to also actually execute both the SCLP programs, we propose CIAO Prolog [6], a system supporting constraint logic programming.", "startOffset": 81, "endOffset": 84}, {"referenceID": 1, "context": "This section presents the soft CSP framework based on semiring [2,3] as an instantiation of the more general framework based on named semiring [7].", "startOffset": 63, "endOffset": 68}, {"referenceID": 2, "context": "This section presents the soft CSP framework based on semiring [2,3] as an instantiation of the more general framework based on named semiring [7].", "startOffset": 63, "endOffset": 68}, {"referenceID": 6, "context": "This section presents the soft CSP framework based on semiring [2,3] as an instantiation of the more general framework based on named semiring [7].", "startOffset": 143, "endOffset": 146}, {"referenceID": 7, "context": "We refer the reader to [8] for a detailed introduction.", "startOffset": 23, "endOffset": 26}, {"referenceID": 6, "context": "A named semiring [7] is a c-semiring plus a finitely-supported permutation algebraA and a hiding operator (\u03bdx.", "startOffset": 17, "endOffset": 20}, {"referenceID": 6, "context": "As briefly shown in [7], named c-semirings can be suitably instantiated to model SCSPs.", "startOffset": 20, "endOffset": 23}, {"referenceID": 0, "context": "Varying the semiring S, on which the named semiring CSCSP is based, several kinds of problems can be represented: we consider the semiring SCSP = \u3008{true, false},\u2228,\u2227, false, true\u3009 for classical CSPs; SFCSP = \u3008{x|x \u2208 [0, 1]},max,min, 0, 1\u3009 for fuzzy CSPs; and SWCSP = \u3008N\u222a{+\u221e},min,+,+\u221e, 0\u3009 for optimization CSPs.", "startOffset": 215, "endOffset": 221}, {"referenceID": 3, "context": "For a more detailed and complete introduction, we refer the reader to [4].", "startOffset": 70, "endOffset": 73}, {"referenceID": 3, "context": "2, previously proposed in [4].", "startOffset": 26, "endOffset": 29}, {"referenceID": 3, "context": "Three equivalent semantics for the SCLP languages have been defined in [4]: the model-theoretic, the fix-point, and the operational one.", "startOffset": 71, "endOffset": 74}, {"referenceID": 3, "context": "As in [4], we start the computing of the semantics from the bottom of the partial order of interpretations, I0, which maps each semiring element into itself and each ground atom into +\u221e.", "startOffset": 6, "endOffset": 9}, {"referenceID": 8, "context": "This section presents the EV travel optimization problem, introduced in [9], and shows how it can be naturally modelled and solved in the SCLP framework.", "startOffset": 72, "endOffset": 75}, {"referenceID": 8, "context": "In [9], the authors propose a hierarchical presentation of the e-mobility framework, which they exploit to decompose the optimization problem in suboptimization problems.", "startOffset": 3, "endOffset": 6}, {"referenceID": 8, "context": "As far as the journey level optimization problem is concerned, we use the formalization presented in [9].", "startOffset": 101, "endOffset": 104}, {"referenceID": 4, "context": "As far as the trip level optimization problem, we propose a slightly different version of the model proposed in [5] for the multi-criteria shortest path problem.", "startOffset": 112, "endOffset": 115}, {"referenceID": 8, "context": "4 This is the typical behaviour of EVs, however, as explained in [9], in particular cases it might also increase during driving and decreases during charging.", "startOffset": 65, "endOffset": 68}, {"referenceID": 1, "context": "edge(p,q,[2,4]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 3, "context": "edge(p,q,[2,4]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 1, "context": "edge(q,t,[2,4]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 3, "context": "edge(q,t,[2,4]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 1, "context": "edge(p,r,[2,7]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 6, "context": "edge(p,r,[2,7]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 2, "context": "edge(r,s,[3,3]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 2, "context": "edge(r,s,[3,3]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 2, "context": "edge(p,t,[3,9]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 8, "context": "edge(p,t,[3,9]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 0, "context": "edge(r,q,[1,1]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 0, "context": "edge(r,q,[1,1]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 0, "context": "edge(q,r,[1,1]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 0, "context": "edge(q,r,[1,1]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 0, "context": "edge(s,t,[1,1]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 0, "context": "edge(s,t,[1,1]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 3, "context": "edge(q,s,[4,8]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 7, "context": "edge(q,s,[4,8]).", "startOffset": 9, "endOffset": 14}, {"referenceID": 4, "context": "Following [5], in order to also really execute the SCLP program, we model the problem with a program in CIAO Prolog [6], a system supporting CLP, by explicitly implementing the soft framework.", "startOffset": 10, "endOffset": 13}, {"referenceID": 5, "context": "Following [5], in order to also really execute the SCLP program, we model the problem with a program in CIAO Prolog [6], a system supporting CLP, by explicitly implementing the soft framework.", "startOffset": 116, "endOffset": 119}, {"referenceID": 8, "context": "In this paper we proposed the SCLP framework as a high-level declarative, executable specification notation to model in a natural way some aspects of the e-mobility optimization problem [9], consisting in coordinating electric vehicles in order to overcome both energetic and temporal constraints.", "startOffset": 186, "endOffset": 189}, {"referenceID": 4, "context": "With respect to the program proposed there, here we implemented a different semiring, (also proposed in [5]), i.", "startOffset": 104, "endOffset": 107}, {"referenceID": 8, "context": "Differently from our solution, which allows us to obtain the set of all the optimal journeys, in the mathematical model proposed in [9] a form of approximation is introduced, by considering an aggregated cost function to be optimized.", "startOffset": 132, "endOffset": 135}, {"referenceID": 0, "context": "In [5, Section 8], the authors show some possible solutions that could be used towards this end, such as tabling and branch-and-bound techniques (implementable for example in ECLiPSe [1]).", "startOffset": 183, "endOffset": 186}, {"referenceID": 10, "context": "We however would also like to study how our programs can take advantage of the use of dynamic programming techniques based, for example, on the perfect relaxation algorithm for CSPs [11].", "startOffset": 182, "endOffset": 186}], "year": 2012, "abstractText": "Soft Constraint Logic Programming is a natural and flexible declarative programming formalism, which allows to model and solve real-life problems involving constraints of different types. In this paper, after providing a slightly more general and elegant presentation of the framework, we show how we can apply it to the e-mobility problem of coordinating electric vehicles in order to overcome both energetic and temporal constraints and so to reduce their running cost. In particular, we focus on the journey optimization sub-problem, considering sequences of trips from a user\u2019s appointment to another one. Solutions provide the best alternatives in terms of time and energy consumption, including route sequences and possible charging events.", "creator": "LaTeX with hyperref package"}}}