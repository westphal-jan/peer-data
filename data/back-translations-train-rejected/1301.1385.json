{"id": "1301.1385", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jan-2013", "title": "Translating NP-SPEC into ASP", "abstract": "NP-SPEC is a language for specifying problems in NP in a declarative way. Despite the fact that the semantics of the language was given by referring to Datalog with circumscription, which is very close to ASP, so far the only existing implementations are by means of ECLiPSe Prolog and via Boolean satisfiability solvers. In this paper, we present translations from NP-SPEC into various forms of ASP and analyze them. We also argue that it might be useful to incorporate certain language constructs of NP-SPEC into mainstream ASP.", "histories": [["v1", "Tue, 8 Jan 2013 02:28:49 GMT  (34kb,D)", "http://arxiv.org/abs/1301.1385v1", "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2012), 5th International Workshop, September 4, 2012, Budapest, Hungary"]], "COMMENTS": "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2012), 5th International Workshop, September 4, 2012, Budapest, Hungary", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["mario alviano", "wolfgang faber"], "accepted": false, "id": "1301.1385"}, "pdf": {"name": "1301.1385.pdf", "metadata": {"source": "CRF", "title": "Translating NP-SPEC into ASP", "authors": ["Mario Alviano", "Wolfgang Faber"], "emails": ["mario@alviano.com,", "wf@wfaber.com"], "sections": [{"heading": "1 Introduction", "text": "The language is based on the transcription database, in which some predicates are described while others are based on prologue. A second software system is introduced in this area, that is, it is introduced in the transposition phase. A third is proposed in the transposition phase, namely in the transposition phase. It is introduced in the transposition phase, in the transposition phase, in the transposition phase and in the transposition phase, in the transposition phase and in the transposition phase, in the transposition phase and in the transposition phase, in the transposition phase, in the transposition phase, in the transposition phase, in the transposition phase and in the transposition phase, in the transposition phase, in the transposition phase and in the transposition phase."}, {"heading": "2 Preliminaries: NP-SPEC and ASP", "text": "In fact, it is a matter of a way in which people are able to determine themselves how they want to live, and in which they want to live. (...) It is as if they were able to determine themselves. (...) It is as if they were able to determine themselves. (...) It is as if they were able to determine themselves. (...) It is as if they were able to determine themselves. (...) It is as if they were able to determine themselves. (...) It is as if they were able to determine themselves. (...) It is as if they were able to determine themselves. (...) It is as if they were able to determine themselves. (...)"}, {"heading": "L1 \u2228 \u00b7 \u00b7 \u00b7 \u2228 Lk : \u2212 Body", "text": "Where the Li are, which contain variables and constants (possibly containing strong negation) and body, which is a conjunction of literals that also contain built-in, aggregated and default negation.3 Headless rules act like integrity limitations. The semantics are based on the Gelfond-Lifschitz reduction [11] and also guarantee the minimality of the response sets.Practical ASP systems differ in several details, for example, several do not support disjunctions in rule heads, built-in predictors and arithmetic expressions may differ, and aggregates are sometimes written in slightly different ways. In this paper, we will include the syntax of Gringo (http: / / potassco.sourceforge.net /) and DLV (www.dlvsystem.com). Both systems assume that the input programs are safe, which means that each variable in a rule must occur in a positive body."}, {"heading": "3 Translation from NP-SPEC to ASP", "text": "We assume that it is an extended predicate of identity. We report on how the various constructs of NP-SPEC programs can be translated into ASP. We start with the DATABASE section constructs. An extended declaration of the form p = {n.. m} is translated into facts p (n). Constant declarations such as c = i, instead become in-memory.Now for the main task, the translation of the SPECIFICATION p = {n.. m}. We first look at the metafacts p (d, p). The exact translation of this metafact (and all others) depends on how d is specified. We assume that it is an extended predicate of identity d, then we can use it directly (X1,.Xn)."}, {"heading": "4 Experiments", "text": "In fact, it is not the case that one can go in search of a solution. (...) It is not the case that one can agree on a solution. (...) It is not the case that one can agree on a solution. (...) It is not the case that one can agree on a solution. (...) It is not the case that one can agree on a solution. (...) It is not the case that one can agree on a solution. (...) It is the case that one can agree on a solution. (...) It is not the case that one can agree on a solution. (...) It is not the case that one can agree on a solution. (...) It is not the case that one can agree on a solution. (...). (...). (...). (...). (...). (...). (...). (...). (...). (...). (...). (...). (). (...). (). (...). (...). (...). (...). (...). (...). (...). (...). (...). (...). (It is. (...). (...). (it is.). (...). (...). (it is. (...). (...). (it is. (...). (...). (...). (...). (it is. (...). (...). (it is. (it is.). (it is. (...). (...). (it is. (...). (it is. (it is.). (it is. (...). (...). (it is. (...). (it is.). (it is. (...). (it is. (...). (it is. (it is.). (it is. (it is. (). (it is. (). (it is. (it is. (). (it is. (). (it is. (it is.). (it is. (it is. (it is. (). (). (it is. (). (it is. (). (it is. (). (it is."}, {"heading": "5 Conclusion", "text": "In this paper, we have presented a transformation of NP-SPEC programs into ASP. Translation is modular and not complex at all, allowing for very efficient transformations. Compared to the previously available transformation into Boolean satisfaction, there are a number of crucial differences: while our transformation from a formalism with variables to another formalism with variables takes place, Boolean satisfaction is of course not compatible with object variables. Therefore, any transformation into this language is an implicit instantiation. It is obvious that instantiation can be very expensive and therefore the use of complex instantiation methods is often crucial. However, optimization methods for instantiation are often very involved and not easy to implement, and therefore the adoption into transformation is harmful. Finally, the attractiveness of transformations is usually their simplicity and the ability to reuse existing software after transformation."}], "references": [{"title": "Knowledge Representation, Reasoning and Declarative Problem Solving", "author": ["C. Baral"], "venue": "Cambridge University Press", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2003}, {"title": "An Executable Specification Language for Solving all the Problems in NP", "author": ["M. Cadoli", "G. Ianni", "L. Palopoli", "A. Schaerf", "D. Vasile"], "venue": "Computer Languages 26(2/4), 165\u2013195", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2000}, {"title": "SAT as an effective solving technology for constraint problems", "author": ["M. Cadoli", "T. Mancini", "F. Patrizi"], "venue": "pp. 39\u201347. No. CS-2005-03 in Computer Science Group Technical Reports, Dipartimento di Ingegneria,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2005}, {"title": "NP-SPEC: An executable specification language for solving all problems in NP", "author": ["M. Cadoli", "L. Palopoli", "A. Schaerf", "D. Vasile"], "venue": "Proceedings of the First International Workshop on Practical Aspects of Declarative Languages. Lecture Notes in Computer Science, vol. 1551, pp. 16\u201330. Springer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1999}, {"title": "Compiling problem specifications into SAT", "author": ["M. Cadoli", "A. Schaerf"], "venue": "Artificial Intelligence 162(1\u20132), 89\u2013120", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "Symmetry-breaking answer set solving", "author": ["C. Drescher", "O. Tifrea", "T. Walsh"], "venue": "AI Communications 24(2), 177\u2013194", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "An extensible SAT-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "SAT. pp. 502\u2013518", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2003}, {"title": "Potassco: The potsdam answer set solving collection", "author": ["M. Gebser", "B. Kaufmann", "R. Kaminski", "M. Ostrowski", "T. Schaub", "M.T. Schneider"], "venue": "AI Communications 24(2), 107\u2013124", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2011}, {"title": "Conflict-driven answer set solving", "author": ["M. Gebser", "B. Kaufmann", "A. Neumann", "T. Schaub"], "venue": "Twentieth International Joint Conference on Artificial Intelligence (IJCAI-07). pp. 386\u2013392. Morgan Kaufmann Publishers", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2007}, {"title": "Gringo : A new grounder for answer set programming", "author": ["M. Gebser", "T. Schaub", "S. Thiele"], "venue": "Baral, C., Brewka, G., Schlipf, J. (eds.) Logic Programming and Nonmonotonic Reasoning \u2014 9th International Conference, LPNMR\u201907. Lecture Notes in Computer Science, vol. 4483, pp. 266\u2013271. Springer Verlag, Tempe, Arizona", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2007}, {"title": "Classical Negation in Logic Programs and Disjunctive Databases", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "New Generation Computing 9, 365\u2013385", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1991}, {"title": "The DLV System", "author": ["N. Leone", "G. Pfeifer", "W. Faber", "F. Calimeri", "T. Dell\u2019Armi", "T. Eiter", "G. Gottlob", "G. Ianni", "G. Ielpa", "C. Koch", "S. Perri", "A. Polleres"], "venue": "Proceedings of the 8th European Conference on Logics in Artificial Intelligence (JELIA). Lecture Notes in Computer Science,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "The DLV System for Knowledge Representation and Reasoning", "author": ["N. Leone", "G. Pfeifer", "W. Faber", "T. Eiter", "G. Gottlob", "S. Perri", "F. Scarcello"], "venue": "ACM Transactions on Computational Logic 7(3), 499\u2013562", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2006}, {"title": "A constraint-based approach to narrow search trees for satisfiability", "author": ["C.M. Li"], "venue": "Information Processing Letters 71(2), 75\u201380", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1999}], "referenceMentions": [{"referenceID": 3, "context": "NP-SPEC is a language that was proposed in [4,2] in order to specify problems in the complexity class NP in a simple, clear, and declarative way.", "startOffset": 43, "endOffset": 48}, {"referenceID": 1, "context": "NP-SPEC is a language that was proposed in [4,2] in order to specify problems in the complexity class NP in a simple, clear, and declarative way.", "startOffset": 43, "endOffset": 48}, {"referenceID": 1, "context": "The original software system supporting NP-SPEC was described in [2] and was written in the ECLPS Constraint Programming System, based on Prolog.", "startOffset": 65, "endOffset": 68}, {"referenceID": 2, "context": "A second software system, SPEC2SAT1, was proposed in [3], which rewrites NP-SPEC into propositional formulas for testing satisfiability.", "startOffset": 53, "endOffset": 56}, {"referenceID": 4, "context": "The system has also been tested quite extensively in [5], also for several problems taken from CSPLIB, with promising results.", "startOffset": 53, "endOffset": 56}, {"referenceID": 1, "context": "For details, we refer to [2].", "startOffset": 25, "endOffset": 28}, {"referenceID": 1, "context": "We also note that a few minor details in the input language of SPEC2SAT (in which the publicly available examples are written) are different to what is described in [2].", "startOffset": 165, "endOffset": 168}, {"referenceID": 1, "context": "This is the basic construct to which all following search space declaration constructs are reduced in the semantic definition in [2].", "startOffset": 129, "endOffset": 132}, {"referenceID": 1, "context": "For further details of the semantics, we refer to [2].", "startOffset": 50, "endOffset": 53}, {"referenceID": 0, "context": "Concerning ASP, we only give a very brief overview, details may be found in works such as [1,13,8].", "startOffset": 90, "endOffset": 98}, {"referenceID": 12, "context": "Concerning ASP, we only give a very brief overview, details may be found in works such as [1,13,8].", "startOffset": 90, "endOffset": 98}, {"referenceID": 7, "context": "Concerning ASP, we only give a very brief overview, details may be found in works such as [1,13,8].", "startOffset": 90, "endOffset": 98}, {"referenceID": 10, "context": "The semantics is based on the Gelfond-Lifschitz reduct [11] and also guarantees minimality of the answer sets.", "startOffset": 55, "endOffset": 59}, {"referenceID": 4, "context": "(See [5] for details.", "startOffset": 5, "endOffset": 8}, {"referenceID": 13, "context": "2 [14], minisat 1.", "startOffset": 2, "endOffset": 6}, {"referenceID": 6, "context": "14 [7], gringo 3.", "startOffset": 3, "endOffset": 6}, {"referenceID": 9, "context": "4 [10], clasp 2.", "startOffset": 2, "endOffset": 6}, {"referenceID": 8, "context": "6 [9], and DLV 2011-12-21 [12].", "startOffset": 2, "endOffset": 5}, {"referenceID": 11, "context": "6 [9], and DLV 2011-12-21 [12].", "startOffset": 26, "endOffset": 30}, {"referenceID": 5, "context": "[6]), but they typically employ automorphism detection.", "startOffset": 0, "endOffset": 3}], "year": 2013, "abstractText": "NP-SPEC is a language for specifying problems in NP in a declarative way. Despite the fact that the semantics of the language was given by referring to Datalog with circumscription, which is very close to ASP, so far the only existing implementations are by means of ECLPS Prolog and via Boolean satisfiability solvers. In this paper, we present translations from NP-SPEC into various forms of ASP and analyze them. We also argue that it might be useful to incorporate certain language constructs of NP-SPEC into mainstream ASP.", "creator": "LaTeX with hyperref package"}}}