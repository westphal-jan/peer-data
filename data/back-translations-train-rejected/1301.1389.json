{"id": "1301.1389", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jan-2013", "title": "Planning and Scheduling in Hybrid Domains Using Answer Set Programming", "abstract": "In this paper we present an Action Language-Answer Set Programming based approach to solving planning and scheduling problems in hybrid domains - domains that exhibit both discrete and continuous behavior. We use action language H to represent the domain and then translate the resulting theory into an A-Prolog program. In this way, we reduce the problem of finding solutions to planning and scheduling problems to computing answer sets of A-Prolog programs. We cite a planning and scheduling example from the literature and show how to model it in H. We show how to translate the resulting H theory into an equivalent A-Prolog program. We compute the answer sets of the resulting program using a hybrid solver called EZCSP which loosely integrates a constraint solver with an answer set solver. The solver allows us reason about constraints over reals and compute solutions to complex planning and scheduling problems. Results have shown that our approach can be applied to any planning and scheduling problem in hybrid domains.", "histories": [["v1", "Tue, 8 Jan 2013 02:29:17 GMT  (29kb,D)", "http://arxiv.org/abs/1301.1389v1", "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2012), 5th International Workshop, September 4, 2012, Budapest, Hungary"]], "COMMENTS": "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2012), 5th International Workshop, September 4, 2012, Budapest, Hungary", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["sandeep chintabathina"], "accepted": false, "id": "1301.1389"}, "pdf": {"name": "1301.1389.pdf", "metadata": {"source": "CRF", "title": "Planning and Scheduling in Hybrid Domains Using Answer Set Programming", "authors": ["Sandeep Chintabathina"], "emails": ["chintabathinas@uapb.edu"], "sections": [{"heading": "1 Introduction", "text": "In this work, we are interested in modeling intelligent agents that are able to plan, act and argue such domains in a dynamic environment. However, we are primarily interested in hybrid domains - domains that exhibit both discrete and continuous behavior. However, many real-life situations such as a robot in a production plant, a decision control system of a spaceship, etc., deal with both discrete changes and continuous changes. A decision control system in a spaceship is able to open and close the valves of fuel tanks, the actions open and close valve positions, etc. The valves will remain in a certain position as long as no open or closed actions take place. Therefore, the change in the position of valves is discreet. The fuel level in the tank can change continuously when the valve is open or there is an incoming supply of fuel in the tank."}, {"heading": "2 Preliminaries", "text": "In this section we will return to the syntax and semantics of H as described in [4]."}, {"heading": "2.1 Syntax", "text": "A sorted signature \u03a3 is a collection of sorts and function symbols. A process signature is a sorted signature with special sorts of time, action, and process. If time is discrete, elements of time\\ {\u03c9} can normally be regarded as non-negative integers, otherwise they can be interpreted as rational numbers, constructive real numbers, and so on. Sorting process contains strings of the form.f (T), where T is a variable that varies over time, and f (T) is (possibly) a mathematical expression that contains T. A string of characters that T (T) represents a function that is defined over time. If the expression f (T) does not contain variables, we are the same."}, {"heading": "2.2 Semantics", "text": "The semantics of language H is based on a slightly modified McCain-Turner equation. An action description, AD = = all functions not used, describes a transition diagram, T D (AD), whose nodes correspond to possible physical states of a system and whose arcs are characterized by actions. A transition < s, s \u00b2 of the diagram indicates that action a in s and as a result of the execution of a system is possible. It is important to note that an action description of H can be either deterministic (i.e. for each state action pair there is at most one successor state [2]) or non-deterministic (i.e. there is a state action pair with more than one successor state). In this section we will give a formal definition of a state and a transition from T D (AD). We will begin with the interpretation of symbols of the definition 2."}, {"heading": "3 A planning and scheduling example", "text": "In this section we will visit an example of planning and planning from [12] and show how to model it in H. Consider a toy world in which a single airplane moves passengers between cities. Slow flying travels at 400 miles per hour and consumes an average of 1 gallon of fuel every 3 miles. Fast flying travels at 600 miles per hour and consumes 1 gallon of fuel every 2 miles. Passengers can board in 30 minutes and be leveled in 20 minutes. Fueling gradually increases fuel levels to a maximum of 750 gallons, with one hour consumed by an empty tank. Boarding, rescheduling and refueling must all happen while the plane is on the ground. The distance between city-a and city-b is 600 miles, the distance between city-a and city-c is 1000 miles, the distance between city-b and city-c is 800 miles, and the distance between city-c is 800 miles, and the distance between city-c is 800 miles, and the distance between city-b is c-1000 miles."}, {"heading": "3.1 Representation in H", "text": "We will begin by describing the approach by riders [13] to model actions. We will assume that embarking persons scott, ernie, and dan and locations a, b, c, and d. We will use another location called enroute to indicate that the aircraft is in the air. We will use (possibly indexed) variables P and L to name persons and locations. We can use this information in the form of constants f c (400) and f (600), which indicate fuel consumption rates for different speeds. For example, if flying at 400 km per gallon is 3 miles per gallon. We can give this information in the form of constants f (400) and f (600), which per gallon are 3 miles per gallon. For model purposes, we will use minutes as our unit of time. We know that there are several permanent actions in the domain, for example, embarkation, which takes 30 minutes."}, {"heading": "4 Translation into logic program", "text": "This year, it is more than ever before in the history of the city."}, {"heading": "5 Conclusions and Future Work", "text": "We used the action language H to model a planning and scheduling example and translated the resulting theory into an A-prologue program. We used a hybrid solver called EZCSP to calculate the response rates of the resulting program. Our approach overcomes the limitations of existing formalities such as PDDL +. We believe that our approach can be applied to all planning and scheduling problems in hybrid areas. In the future, we would like to model several benchmark examples and compare the performance of EZCSP with existing planners. Some of the planners used for industrialized problems are domain specific [3]. It will be useful to investigate why some of these planners work really well. There are areas for improvement, including the efficiency of solvers, the meaningfulness of the input language, and so on."}], "references": [{"title": "Representing constraint satisfaction problems in answer set programming", "author": ["M. Balduccini"], "venue": "In ICLP\u201909 Workshop on Answer Set Programming and Other Computing Paradigms", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2009}, {"title": "Reasoning agents in dynamic domains", "author": ["C. Baral", "M. Gelfond"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2000}, {"title": "Integrated planning and scheduling for petroleum refinery operations", "author": ["M. Boddy", "D. Johnson"], "venue": "In Proc. of ICAPS Workshop on Integrating Planning into Scheduling (WIPIS),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2004}, {"title": "A New Incarnation of Action Language H", "author": ["S. Chintabathina", "R. Watson"], "venue": "In Correct Reasoning - Essays on Logic-Based AI in Honor of Vladimir Lifschitz,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Towards Answer Set Programming Based Architectures for Intelligent Agents", "author": ["Sandeep Chintabathina"], "venue": "PhD Dissertation. Texas Tech University,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "Modeling mixed discrete-continuous domains for planning", "author": ["Maria Fox", "Derek Long"], "venue": "Journal of Artifical Intelligence Research,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2006}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Proc. of ICLP-88,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1988}, {"title": "Classical negation in logic programs and disjunctive databases", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "New Generation Computing,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1991}, {"title": "A causal theory of ramifications and qualifications", "author": ["N. McCain", "H. Turner"], "venue": "Proc. of IJCAI-95,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1995}, {"title": "Integrating Answer Set Programming and Constraint Logic Programming", "author": ["V. Mellarkod", "M. Gelfond", "Y. Zhang"], "venue": "In Proc. of ISAIM\u201908,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2008}, {"title": "Improving Efficiency of Solving Computational Problems with ASP", "author": ["A. Ricardo Morales"], "venue": "PhD Dissertation. Texas Tech University,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2010}, {"title": "Temporal planning with continuous change", "author": ["Scott Penberthy", "Daniel Weld"], "venue": "In Proc. of AAAI-94,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1994}, {"title": "Knowledge in Action: Logical Foundations for Specifying and Implementing Dynamical Systems", "author": ["R. Reiter"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2001}, {"title": "Solving the frame problem", "author": ["M. Shanahan"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1997}], "referenceMentions": [{"referenceID": 3, "context": "Language H [4] was developed by extending the signature of action language A L [2] with a collection of numbers for representing time, a collection of functions of time, and fluents 1 with non-boolean values including fluents defined by functions of time (process fluents).", "startOffset": 11, "endOffset": 14}, {"referenceID": 1, "context": "Language H [4] was developed by extending the signature of action language A L [2] with a collection of numbers for representing time, a collection of functions of time, and fluents 1 with non-boolean values including fluents defined by functions of time (process fluents).", "startOffset": 79, "endOffset": 82}, {"referenceID": 8, "context": "The semantics of A L is based on the McCain-Turner equation [9].", "startOffset": 60, "endOffset": 63}, {"referenceID": 12, "context": "Prior to H, logic-based formalisms such as Situation Calculus [13] and Event Calculus [14] were extended to reason about process fluents.", "startOffset": 62, "endOffset": 66}, {"referenceID": 13, "context": "Prior to H, logic-based formalisms such as Situation Calculus [13] and Event Calculus [14] were extended to reason about process fluents.", "startOffset": 86, "endOffset": 90}, {"referenceID": 6, "context": "We implement this theory by translating it into an Answer Set Prolog (A-Prolog) program, a class of logic programs under answer set semantics [7,8], and computing answer sets (models) of the resulting program.", "startOffset": 142, "endOffset": 147}, {"referenceID": 7, "context": "We implement this theory by translating it into an Answer Set Prolog (A-Prolog) program, a class of logic programs under answer set semantics [7,8], and computing answer sets (models) of the resulting program.", "startOffset": 142, "endOffset": 147}, {"referenceID": 4, "context": "In [5] we show that there is a one-to-one correspondence between models of A-Prolog programs and models of our specification.", "startOffset": 3, "endOffset": 6}, {"referenceID": 3, "context": "In section 2, we revisit the syntax and semantics of H as described in [4].", "startOffset": 71, "endOffset": 74}, {"referenceID": 11, "context": "In section 3, we cite a planning and scheduling example from [12] and come up with a theory of H to model it.", "startOffset": 61, "endOffset": 65}, {"referenceID": 11, "context": "The example from [12] was run using ZENO, a least commitment planner that supports continuous change.", "startOffset": 17, "endOffset": 21}, {"referenceID": 5, "context": "A variant of this language, PDDL+ [6] is capable of modeling continuous change through the use of processes and events.", "startOffset": 34, "endOffset": 37}, {"referenceID": 3, "context": "In this section we revisit the syntax and semantics of H as described in [4].", "startOffset": 73, "endOffset": 76}, {"referenceID": 8, "context": "The semantics of language H is based on a slightly modified McCain-Turner equation [9].", "startOffset": 83, "endOffset": 86}, {"referenceID": 1, "context": "for any state-action pair there is at most one successor state [2]) or non-deterministic (i.", "startOffset": 63, "endOffset": 66}, {"referenceID": 11, "context": "In this section we will visit a planning and scheduling example from [12] and demonstrate how to model it in H.", "startOffset": 69, "endOffset": 73}, {"referenceID": 11, "context": "If the plane only has 500 gallons of fuel, how can we ensure that Scott and Ernie get to city-d in less than five and a half hours? [12] A solution to this problem requires reasoning about effects of (concurrent) actions in the presence of continuous time.", "startOffset": 132, "endOffset": 136}, {"referenceID": 12, "context": "We will use the approach used by Reiter [13] to model durative actions.", "startOffset": 40, "endOffset": 44}, {"referenceID": 4, "context": "The translation that was provided in [5] is a theoretical translation from statements of H into rules of A-Prolog.", "startOffset": 37, "endOffset": 40}, {"referenceID": 0, "context": "In the past few years researchers [1,10] have focused on integrating Answer Set Programming(ASP) and Constraint logic programming(CLP).", "startOffset": 34, "endOffset": 40}, {"referenceID": 9, "context": "In the past few years researchers [1,10] have focused on integrating Answer Set Programming(ASP) and Constraint logic programming(CLP).", "startOffset": 34, "endOffset": 40}, {"referenceID": 9, "context": "The following such systems are available: ACsolver[10] (and it\u2019s successor Luna[11]); EZCSP 2; and Clingcon3.", "startOffset": 50, "endOffset": 54}, {"referenceID": 10, "context": "The following such systems are available: ACsolver[10] (and it\u2019s successor Luna[11]); EZCSP 2; and Clingcon3.", "startOffset": 79, "endOffset": 83}, {"referenceID": 2, "context": "Some of the planners used for industrysized problems are domain-specific [3].", "startOffset": 73, "endOffset": 76}], "year": 2013, "abstractText": "In this paper we present an Action Language-Answer Set Programming based approach to solving planning and scheduling problems in hybrid domains domains that exhibit both discrete and continuous behavior. We use action language H to represent the domain and then translate the resulting theory into an A-Prolog program. In this way, we reduce the problem of finding solutions to planning and scheduling problems to computing answer sets of A-Prolog programs. We cite a planning and scheduling example from the literature and show how to model it in H. We show how to translate the resulting H theory into an equivalent A-Prolog program. We compute the answer sets of the resulting program using a hybrid solver called EZCSP which loosely integrates a constraint solver with an answer set solver. The solver allows us reason about constraints over reals and compute solutions to complex planning and scheduling problems. Results have shown that our approach can be applied to any planning and scheduling problem in hybrid domains.", "creator": "LaTeX with hyperref package"}}}