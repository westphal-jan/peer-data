{"id": "1301.2683", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Jan-2013", "title": "BliStr: The Blind Strategymaker", "abstract": "BliStr is a system that automatically develops strategies for E prover on a large set of problems. The main idea is to interleave (i) iterated low-timelimit local search for new strategies on small sets of similar easy problems with (ii) higher-timelimit evaluation of the new strategies on all problems. The accumulated results of the global higher-timelimit runs are used to define and evolve the notion of \"similar easy problems\", and to control the selection of the next strategy to be improved. The technique was used to significantly strengthen the set of E strategies used by the MaLARea, PS-E, E-MaLeS, and E systems in the CASC@Turing 2012 competition, particularly in the Mizar division. Similar improvement was obtained on the problems created from the Flyspeck corpus.", "histories": [["v1", "Sat, 12 Jan 2013 13:02:21 GMT  (9kb)", "http://arxiv.org/abs/1301.2683v1", null], ["v2", "Wed, 28 May 2014 12:54:41 GMT  (17kb)", "http://arxiv.org/abs/1301.2683v2", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LG cs.LO", "authors": ["josef urban"], "accepted": false, "id": "1301.2683"}, "pdf": {"name": "1301.2683.pdf", "metadata": {"source": "META", "title": "BliStr: The Blind Strategymaker pdfauthor=Josef Urban pdfkeywords=automated theorem proving, interactive theorem proving, machine learning, proof analysis, formal mathematics, mizar", "authors": [], "emails": ["CASC@Turing", "Mizar@Turing", "Mizar@Turing,"], "sections": [{"heading": null, "text": "ar Xiv: 130 1.26 83v1 [cs.AI] 12 Jan 2013"}, {"heading": "1 Introduction and Motivation", "text": "Since 2006, the author has been experimenting with the selection of the best predefined e-strategies for the Mizar / MPTP problems [7], and since 2011 the E-MaLeS1 system has been developed, which uses state-of-the-art learning methods to select the best timetable for strategies for a problem. However, an early evaluation of E-MaLeS in CASC 2011 was counterproductive: E-MaLeS solved only one more FOF problem than E. However, under reasonable assumptions (imperfect knowledge, reasonably orthogonal strategies) it is easy to prove that for (super) exponentially behaved systems like E even simple policy planning should be better on average (and with sufficiently high time limits) than implementing a single strategy. One plausible conclusion was that the set of e-strategies is not sufficiently promising."}, {"heading": "2 Blind Strategymaking", "text": "For the rest of this paper, the task is set to (Max:) develop a set of e-strategies that together solve as many of the 1000 small Mizar @ Turing pre-competition problems as possible. A secondary criterion is that (Gen:) the strategies should be reasonably general, i.e., similarly target the unknown problems that would later be used in the competition, and that (Size:) the set of such strategies should not be too large, so that strategy-selection systems like E-MaLeS have a chance. This attitude is very concrete, but nothing specific is assumed about the Mizar @ Turing problems. Even if the author has some knowledge about E (see, for example, [6]), the strategy-enhancing methods have been intentionally developed in a data-driven manner, i.e., assuming as little knowledge of the importance of E's strategies is as possible."}, {"heading": "2.1 Choosing a Starting Set of Strategies", "text": "As mentioned above, the E-Auto mode in 300s solves 518 of the 1000 problems -- an obvious selection of a number of startup strategies for further improvements would2 For the exact set of used parameters and values see the file e-params.txt in the BliStr distribution. The E-interpretation of the parameters can be found in the file e wrapper1.rb.be to take those used by the Auto mode to solve the 518 problems. Auto mode is typically constructed from an evaluation of about 280 predefined E-strategies for TPTP. However, it has been observed several times that while Auto mode generally selects good strategies for TPTP, it does not select the (still predefined) strategies for MPTP problems so well. In other words, although some MPTP problems are included in TPTP _ better _ S _, Auto mode _ SF1 _ S5 _ is not trustworthy to know the best predefined strategies for TP."}, {"heading": "2.2 Growing Better Strategies", "text": "How can new strategies be found that would solve some of the unsolved 403 problems? The space of possible strategies is so vast that random research seems unlikely to find good new strategies.4 The guiding principle again is to use a data-driven approach. Problems in a given mathematical field often share many structural and solving methods. Mathematicians are getting better and better by solving the problems, they will be able to take larger and larger steps with confidence, and as a result, they can gradually tackle problems that were previously too difficult for them. The reason for translating the Mizar library for ATPs and competitions like Mizar @ Turing is precisely to enable the development and evaluation of systems that attempt to imitate such self-stimulation. By using this analogy, it is plausible to think that when the solvable problems for an ATP system become much easier, the system will be able to improve some more (harder, but more related, methods) than if it can solve a number of problems."}, {"heading": "2.3 The ParamILS Setting and Algorithm", "text": "Let A be an algorithm whose parameters come from a configuration space (product of the possible values). A parameter configuration is an element. A parameter configuration is an element. A parameter configuration denotes the algorithm A with the parameter configuration. ParamILS is an implementation of an iterated local search algorithm (ILS) for the configuration problem of the algorithm. In short, starting with an initial configuration, ParamILS is switched between two steps: (i) to disrupt the configuration in order to escape a local optimum, and (ii) iterative first improvement of the malfunctioning configuration problem. The result of step (ii) is accepted if it improves the previous best configuration.To fully determine how to use parameters in a particular case, a problem can be solved better."}, {"heading": "2.4 Guiding ParamILS", "text": "It seems unlikely that there is a best e-strategy for all Mizar @ Turing problems. In principle, this could be possible especially if the strategy language is allowed to indicate variable behavior for different problem characterizations, but this is not yet the case. Therefore, it seems counterproductive to use all 597 solvable training problems unless the paramILS would not develop such a strategy further. However, this already indicates a data-driven way in which one can direct paramILS to a subset of all problems, then the set of all solvable strategies on another subset is balanced by poorer strategies on which the respective strategies work best. In detail, this \"behavioral strategy\" could be even finer, and the vector of the relative performance of all strategies on one problem could be used as a basis for different application strategies."}, {"heading": "3 Evaluation", "text": "In fact, the fact is that most of them will be able to assert themselves, and that they will be able to assert themselves, \"he said in an interview with the\" Welt am Sonntag \":\" I don't think they will be able to put the world in order. \""}, {"heading": "4 Conclusion and Future Work", "text": "Running BliStr for 30 hours seems to be a good investment in time for ATP systems that address thousands of problems. It is also a good investment in terms of the research time of ATP developers. It is likely that the system can be made faster and used online in meta systems such as MaLARea. The current selection euristics could be modified in various ways, as well as the stop criterion. The parameter set and its values could be extended, allowing for broader and more precise coordination. Expansion to other ATPs should be straightforward."}, {"heading": "1. Krystof Hoder and Andrei Voronkov. Sine qua non for large theory reasoning. In", "text": "CADE, pages 299-314, 2011. 2. Frank Hutter, Holger H. Hoos, Kevin Leyton-Brown and Thomas Stu \ufffd tzle. ParamILS: an automatic algorithm configuration framework. Journal of Artificial Intelligence Research, 36: 267-306, October 2009. 3. Cezary Kaliszyk and Josef Urban. Learning-assisted automated reasoning with Flyspeck. CoRR, abs / 1211.7012, 2012. 4. Alexandre Riazanov and Andrei Woronkov. the design and implementation of VAMPIRE. AI Commun., 15 (2-3): 91-110, 2002. 5. Stephan Schulz. E - A Brainiac Theorem Prover. AI Comm., 15 (2-3): 111-126, 2002. 6. Josef Urban. MoMM - fast interreduction and retrieval in large libraries of formalizedmathematics. International J. on Artificial Tools Comm., 15 (2-3): 111-2002, 126."}], "references": [{"title": "Sine qua non for large theory reasoning", "author": ["Krystof Hoder", "Andrei Voronkov"], "venue": "In CADE,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "ParamILS: an automatic algorithm configuration framework", "author": ["Frank Hutter", "Holger H. Hoos", "Kevin Leyton-Brown", "Thomas St\u00fctzle"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Learning-assisted automated reasoning with Flyspeck", "author": ["Cezary Kaliszyk", "Josef Urban"], "venue": "CoRR, abs/1211.7012,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "The design and implementation of VAMPIRE", "author": ["Alexandre Riazanov", "Andrei Voronkov"], "venue": "AI Commun.,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2002}, {"title": "E - A Brainiac Theorem Prover", "author": ["Stephan Schulz"], "venue": "AI Comm.,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}, {"title": "MoMM - fast interreduction and retrieval in large libraries of formalized mathematics", "author": ["Josef Urban"], "venue": "International J. on Artificial Intelligence Tools,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2006}, {"title": "Evaluation of automated theorem proving on the Mizar Mathematical Library", "author": ["Josef Urban", "Krystof Hoder", "Andrei Voronkov"], "venue": "In ICMS,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2010}], "referenceMentions": [{"referenceID": 4, "context": "The E [5] automated theorem prover (ATP) contains a number of points where learning and tuning methods can be used to improve its performance.", "startOffset": 6, "endOffset": 9}, {"referenceID": 6, "context": "Since 2006, the author has experimented with selecting the best predefined E strategies for the Mizar/MPTP problems [7], and since 2011 the E-MaLeS system has been developed.", "startOffset": 116, "endOffset": 119}, {"referenceID": 3, "context": "For the 2012 Mizar@Turing competition, 1000 large-theory MPTP2078 problems (that would not be used in the competition) were released for pre-competition training and tuning, together with their Mizar and Vampire [4] proofs.", "startOffset": 212, "endOffset": 215}, {"referenceID": 6, "context": "8 (tuned well for Mizar in 2010 [7]) could in 300s prove 691 of these problems.", "startOffset": 32, "endOffset": 35}, {"referenceID": 0, "context": "But the SInE premise-selection heuristic [1] has been also tuned for several years, and with the great difference of the base ATPs on small version of the problems, the result of competition between SInE/Vampire and MaLARea/E would be hard to predict.", "startOffset": 41, "endOffset": 44}, {"referenceID": 5, "context": ", [6]), the strategy-improving methods were intentionally developed in a data-driven way, i.", "startOffset": 2, "endOffset": 5}, {"referenceID": 1, "context": "Capturing this expressive power seemed tedious, and also looked like a hurdle to a straightforward use of the established ParamILS [2] system which searches for good parameters by iterative local search.", "startOffset": 131, "endOffset": 134}, {"referenceID": 2, "context": "6 were also tested on the newly available Flyspeck problems [3].", "startOffset": 60, "endOffset": 63}], "year": 2017, "abstractText": "BliStr is a system that automatically develops strategies for E prover on a large set of problems. The main idea is to interleave (i) iterated low-timelimit local search for new strategies on small sets of similar easy problems with (ii) higher-timelimit evaluation of the new strategies on all problems. The accummulated results of the global higher-timelimit runs are used to define and evolve the notion of \u201csimilar easy problems\u201d, and to control the selection of the next strategy to be improved. The technique was used to significantly strengthen the set of E strategies used by the MaLARea, PS-E, E-MaLeS, and E systems in the CASC@Turing 2012 competition, particularly in the Mizar division. Similar improvement was obtained on the problems created from the Flyspeck corpus.", "creator": "LaTeX with hyperref package"}}}