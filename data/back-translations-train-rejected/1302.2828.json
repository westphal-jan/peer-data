{"id": "1302.2828", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Feb-2013", "title": "Multi-agent RRT*: Sampling-based Cooperative Pathfinding (Extended Abstract)", "abstract": "Cooperative pathfinding is a problem of finding a set of non-conflicting trajectories for a number of mobile agents. Its applications include planning for teams of mobile robots, such as autonomous aircrafts, cars, or underwater vehicles. The state-of-the-art algorithms for cooperative pathfinding typically rely on some heuristic forward-search pathfinding technique, where A* is often the algorithm of choice. Here, we propose MA-RRT*, a novel algorithm for multi-agent path planning that builds upon a recently proposed asymptotically-optimal sampling-based algorithm for finding single-agent shortest path called RRT*. We experimentally evaluate the performance of the algorithm and show that the sampling-based approach offers better scalability than the classical forward-search approach in relatively large, but sparse environments, which are typical in real-world applications such as multi-aircraft collision avoidance.", "histories": [["v1", "Tue, 12 Feb 2013 15:47:43 GMT  (83kb,D)", "http://arxiv.org/abs/1302.2828v1", "To appear at AAMAS 2013"]], "COMMENTS": "To appear at AAMAS 2013", "reviews": [], "SUBJECTS": "cs.RO cs.AI cs.MA", "authors": ["michal \\v{c}\\'ap", "peter nov\\'ak", "ji\\v{r}\\'i vok\\v{r}\\'inek", "michal p\\v{e}chou\\v{c}ek"], "accepted": false, "id": "1302.2828"}, "pdf": {"name": "1302.2828.pdf", "metadata": {"source": "CRF", "title": "Multi-agent RRT*: Sampling-based Cooperative Pathfinding", "authors": ["Michal \u010c\u00e1p", "Peter Nov\u00e1k", "Ji\u0159\u00ed Vok\u0159\u00ednek", "Michal P\u011bchou\u010dek"], "emails": [], "sections": [{"heading": "Categories and Subject Descriptors", "text": "I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence - Coherence and Coordination, Multiagent Systems; I.2.8 [Artificial Intelligence]: Problem Solving, Control Methods and Search - Execution, Formation and Generation of Plans, Diagram and Tree Search Strategies"}, {"heading": "General Terms", "text": "Algorithms, Experiments, Power"}, {"heading": "Keywords", "text": "Cooperative route finding, multi-agent movement planning."}, {"heading": "1. INTRODUCTION", "text": "The problem of collision avoidance in mobile robots, such as airplanes, can be modeled as an example of cooperative pathway finding, a relatively well-studied problem in the search for a number of non-conflicting trajectories for a number of mobile agents. The research was supported by ARTEMIS Joint Undertaking number 269336-2 and by the Czech Ministry of Education, Youth and Sports, does not grant 7H11102 (D3CoS).Appears in: Proceedings of the 12th International Conference on Autonomous Agents and Multiagent Systems (AAMAS 2013), Ito, Jonker, Gini, and Shehory (eds.), May, 6-10, 2013, Minnesota, USA. Copyright c \u00a9 2013, International Foundation for Autonomous Agents and Multiagent Systems (www.ifaamas.org) All Rights Reserved."}, {"heading": "2. PROBLEM FORMULATION", "text": "To allow a fair comparison with the open access algorithm, which is defined only for agents moving on graphs, we use the following definition of a cooperative pathfinding problem: Consider n agents operating in a Euclidean space.The agent's motion model i is described by a corresponding motion graph called GMi = (Wi, Mi).The starting positions of all agents are given as a ninefold (s1,.., sn), where si-Wi is the agent's starting point i.Similarly, (d1,., dn) an n-fold of destination waypoints di-Wi of each agent. The task is to find a sequence of motion primitives, i.e. a path pi in the motion graph GMi for each agent i, so that start (pi) = si and end (pi) = di and the paths are separated, i.e. the paths are separated by a sequence of motion primitives, i.e. we spend a path pi in the motion graph GMi for each agent i, so that start (pi) = si and end (pi) = di, and the paths are [pi] separated, i.e., the paths are separated from the path di-Wi of each agent's moving primitives, i.e. the path is used as a sequence of motion primitives, i.e. a path pi in the motion graph GMi for each agent i, so that start (pi) and end (pi) = di, and end (pi) = di, and the paths are separated, i.e. the paths are separated, i.e. the paths 6 dik = pt [pj = the respective point [pi] where the [pi] point [pt] is needed for [pt]."}, {"heading": "3. THE ALGORITHM", "text": "The RRT * algorithm is designed for continuous state spaces where it can efficiently find a path from a given start state to a givenous Xiv: 130 2,28 28v1 [cs.RO] 1 2Fe b20 13target region by gradually building a tree that is rooted in the start state and extends to randomly sampled states from a given state space. Once the tree first reaches the target region, the algorithm can follow its edges backwards to obtain the first passable path from the start state to the target region. However, even after the return of the first solution, the algorithm does not stop, but continues to expand the tree by taking new random samples, leading to the gradual discovery of new more cost-effective paths. We use the identical approach to find the shortest path in a motion graph. The key difference is that in the continuous version two samples can be connected together if they can find mutually visible sampling between two samples in the RT * valid version of the graph."}, {"heading": "4. EVALUATION", "text": "We compared the performance of the unbiased version of MARRT * (MA-RRT *) and informed-sampling MA-RRT * (isMA-RRT *) with A * search in joint-state space (JA) and optimal anytime algorithm (OA) in terms of scalability and solution quality. All three algorithms were implemented in a common framework in Java. We evaluated the performance of the algorithms on the following set of synthetic problem instances. The agents move on a square-shaped grid-like motion graph, where the waypoints were placed on the grid with a step of 1 meter and the motion primitives were rectilinear movements with a constant speed of 1 m / s connecting the nodes in the 4 neighborhood. In addition, a 1-second waiting motion primitive was available at each waypoint. We randomly removed 10 percent of the vertices of the motion graph to represent obstacles. A unique starting point was selected and a unique destination for each waypoint."}, {"heading": "4.1 Results", "text": "To show how well the algorithms work on the problem instance assessment set, we record the performance curves for each algorithm (proposed in [2]), and the results are recorded in Figure 1 to find the first valid solution for the problem instance for each algorithm, and then sort the instances independently by runtime for each algorithm. It should be noted that the order of instances varies from algorithm to algorithm, and the x position of the last point in the power curve can be interpreted as the number of instances of the total 6000 instances that the algorithm needs to find the first solution for this problem instance, and it should be noted that the order of instances is different for each algorithm, and the x position of the last point in the power curve can be interpreted as the number of instances of the total 6000 instances that the algorithm solved in the run-time limit of 5 seconds."}, {"heading": "5. CONCLUSION", "text": "Our experiments show the limits of forward-looking approaches to cooperative pathfinding in large but sparse environments. Our results show that these cases can be efficiently solved with one of our sample-based algorithms at the price of a slight reduction in solution quality. 0 1000 2000 3000 5000 60000 2000 4000instancesru ntim e (m s) YES OA MA \u2212 RRT * isMA \u2212 RRT * Figure 1: First Solution Performance Curve \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf."}, {"heading": "6. REFERENCES", "text": "[1] Karaman and Frazzoli. Sampling-based algorithms for optimal motion planning. International Journal of Robotics Research, 30 (7): 846-894, June 2011. [2] Trevor Scott Standley and Richard E. Korf. Complete algorithms for cooperative pathfinding problems. In: Toby Walsh, editor, IJCAI, pp. 668-673. IJCAI / AAAI, 2011."}], "references": [{"title": "Sampling-based algorithms for optimal motion planning", "author": ["Karaman", "Frazzoli"], "venue": "International Journal of Robotics Research,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "Complete algorithms for cooperative pathfinding problems", "author": ["Trevor Scott Standley", "Richard E. Korf"], "venue": "In Toby Walsh, editor,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "Recently, Karaman and Frazzoli [1] introduced a novel any-time sampling-based motion planning algorithm that offers good scalability to high-dimensional environments, while at the same time it guarantees convergence to an optimal solution.", "startOffset": 31, "endOffset": 34}, {"referenceID": 1, "context": "We extensively evaluate the performance and solution quality produced by the algorithm and show that for sparsely populated large environments the sampling algorithm outperforms Standley and Korf\u2019s optimal anytime algorithm (OA) [2] in terms of runtime and success rate, while still maintaining reasonable quality of the solution.", "startOffset": 229, "endOffset": 232}, {"referenceID": 1, "context": "1 Results To convey how well the algorithms performed on the evaluation set of problem instances, we plot the performance curves (proposed in [2]) for each algorithm.", "startOffset": 142, "endOffset": 145}], "year": 2013, "abstractText": "Cooperative pathfinding is a problem of finding a set of non-conflicting trajectories for a number of mobile agents. Its applications include planning for teams of mobile robots, such as autonomous aircrafts, cars, or underwater vehicles. The state-of-the-art algorithms for cooperative pathfinding typically rely on some heuristic forward-search pathfinding technique, where A* is often the algorithm of choice. Here, we propose MA-RRT*, a novel algorithm for multi-agent path planning that builds upon a recently proposed asymptotically-optimal sampling-based algorithm for finding single-agent shortest path called RRT*. We experimentally evaluate the performance of the algorithm and show that the sampling-based approach offers better scalability than the classical forward-search approach in relatively large, but sparse environments, which are typical in real-world applications such as multi-aircraft collision avoidance.", "creator": "LaTeX with hyperref package"}}}