{"id": "1302.5215", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Feb-2013", "title": "Development Of Ontology-Based Intelligent System For Software Testing", "abstract": "Software testing is a prime factor in software industry. Besides knowing the importance of testing, only limited time is allocated for teaching it. It will be more efficient if testing is taught simultaneously with programming foundations. This integrated learning of testing techniques and programming allows the programmers to perform in a better way and this leads to the improvement of the performance of the industry progress. In this paper, a technique named ontology is introduced, it first defines the various testing process in hierarchy and define relationships among them, to share and reuse the knowledge that is captured, secondly metadata is created by natural language processing and finally, the application use ontologies to support test management, it act as knowledge base for multiple environment with the integrated teaching of programming foundation and testing concepts. Keywords: Meta Data, Ontology, Software Testing, Integration, Programming Foundations.", "histories": [["v1", "Thu, 21 Feb 2013 08:45:49 GMT  (110kb)", "http://arxiv.org/abs/1302.5215v1", "International Journal of Communication, Computation and Innovation. / Volume 2, Issue 2, 2011"]], "COMMENTS": "International Journal of Communication, Computation and Innovation. / Volume 2, Issue 2, 2011", "reviews": [], "SUBJECTS": "cs.AI cs.SE", "authors": ["a anandaraj", "p kalaivani", "v rameshkumar"], "accepted": false, "id": "1302.5215"}, "pdf": {"name": "1302.5215.pdf", "metadata": {"source": "CRF", "title": "DEVELOPMENT OF ONTOLOGY-BASED INTELLIGENT SYSTEM FOR SOFTWARE TESTING", "authors": ["A. Anandaraj P. Kalaivani", "V. Rameshkumar", "A. Anandaraj", "P. Kalaivani"], "emails": ["anandarajme@gmail.com,", "kalaipadman@gmail.com,", "vrameshbtech@gmail.com"], "sections": [{"heading": null, "text": "This integrated learning of test techniques and programming allows programmers to perform better, leading to an improvement in the performance of industrial progress. In this paper, a technique called ontology is introduced that first defines the different test processes in hierarchy and defines relationships between them to share and reuse the acquired knowledge; secondly, metadata is generated by natural language processing; and finally, application ontology is used to support test management; it functions as a knowledge base for multiple environments with integrated teaching of programming basics and test concepts. Keywords: metadata, ontology, software testing, integration, programming basics."}, {"heading": "1. INTRODUCTION", "text": "Software defects exist in almost all types of software of moderate size. To overcome these defects, software tests are carried out. Software tests are one of the most important goods of a software developer to protect software from errors, but it is difficult to learn or teach them without adequate guidance. During the learning process, tests are taught only in the last part, and this does not allow software experts to perform tests in a better way. Earlier mastering of test concepts and techniques would: (1) improve the argumentation about the program (and its solution), leading to better quality products; and (2) induce and facilitate the use of tests throughout the software development process, resulting in a higher quality process, as opposed to current practices [1].One way to improve the efficiency of testing among programmers is to introduce an ontological concept that integrates the teaching of testing and industry testing in a combined way during training time."}, {"heading": "2. DEVELOPMENT OF ONTOLOGIES USING PROT\u00c9G\u00c9", "text": "OWL ontology is described as a network of classes, properties and individuals. Classes define the names of the relevant domain concepts and their logical properties. Properties (also called roles, attributes or slots) that define relationships between classes and assign instances to primitive values. Individuals are instances of classes with specific values for properties [4]. The semantic web can be considered a network of ontologies and other web resources [4]. OWL ontology concepts can have references to concepts in other ontologies. The basic mechanism for this capability is the import of ontology (i.e. ontology can import resources from existing ontologies and create instances or specializations of its classes)."}, {"heading": "2.1 Design of Ontology", "text": "The steps to establish ontology are explained in the following:"}, {"heading": "2.1.1 Determine Domain and Scope of Ontology", "text": "The main goal of this work is to provide a framework for programming basics and simultaneous testing. The goal is to use this ontology for integrated teaching of programming basics and testing in the software industry."}, {"heading": "2.1.2 Defining Concepts in the Ontology", "text": "The terminologies that refer to objectivity are listed to create ontology. Important related terms are, for example, test phase, test techniques, oop paradigm, control flow instructions, etc. Figure 5 explains the test and programming concepts."}, {"heading": "2.1.3 Create a Class Hierarchy", "text": "The terminologies form the classes in ontology. For example, encapsulation, fault-based technology, unit tests and integration tests form classes in OWL ontology and are shown in Figure 2."}, {"heading": "2.1.4 Defining Properties and Constraints", "text": "There are two types of properties, object properties and data type properties. Object properties associate object with object. Data type properties associate objects with the XML schema and are shown in Figure 3."}, {"heading": "3. DEVELOPMENT OF ONTOLOGIES FOR SOFTWARE TESTING", "text": "The development of an intelligent ontology-based learning system for software tests is briefly explained in the following steps."}, {"heading": "3.1 Description of Classes", "text": "The important view in the Prot\u00e9g\u00e9 OWL plugin is the OWL class. Classes describe concepts in the domain. This tab shows the tree of ontology classes on the left. The upper region of the class is represented in a form in the middle. This form allows the user to edit class metadata such as names, comments and annotations in several languages. The widget in the right area of the form allows the user to assign values for properties and descriptions to a class. Unlike other properties, annotation properties have no formal meaning for external OWL components such as rationists, but they are an extremely important vehicle for maintaining project information. In this paper, many classes and subclasses are created as mutation classes, but due to the lack of space, only the technology classes are divided."}, {"heading": "3.2 Creation of Properties", "text": "The properties of a property are edited by the form shown in Figure 4. This form provides a metadata area at the top that displays the name of the property, annotations, and so on, similar to the representation in the class form. There are two main types of properties, namely object properties and data type properties. Object properties are relationships between two individuals. Object properties associate a person with a person, while data type properties associate a person with an XML Schema data type value or an RDF literal (i.e. they describe relationship between a person and data values). OWL also has another property called annotation property, which is used to add information (i.e. metadata - data about data) to classes, individuals, and object / data type properties (i.e. they describe relationship between a person and data values)."}, {"heading": "3.3 Open World Assumption", "text": "As a result, if two classes of test phases and testing techniques are not defined as disjunctive, they can have the individuals in common. Disjunctivity in the classes plays a crucial role in any class description; creating a class and complementing it with another class is done here; the possibilities of reasoning are used to detect logical inconsistencies within ontology; the error occurred while defining characteristics asymmetrically and reflexively on the same property; consistency checks can adequately help the developer while constructing the ontologies; the important problem with arguments is that OWL is unable to handle full expressivity; the specification distinguishes between OWL Full and OWL DL to indicate traceable language elements to argumentators; and ontologies that use metastases that are an OWL full element cannot be classified."}, {"heading": "3.4 OWL/XML Rendering", "text": "The structure of any expression in RDF consists of triples, each consisting of a subject, a predicate, and an object. A set of each triple is called an RDF graph. This can be illustrated by the node and arc diagram, in which each triple is represented as a node-arc-node connection. To avoid conversion between different description languages, ontology needs to express a common language. XML was used for this purpose, as there are standards for data exchange. OWL ontology is most commonly serialized with OWL / XML syntax. OWL / XML schemas are represented in Figure 4."}, {"heading": "4. CONCLUSION AND FUTURE WORK", "text": "This paper describes a framework of ontology construction for the integrated teaching of programming basics with tests. Under this construction of an ontology framework, programmers gain in-depth knowledge of the application of test concepts in addition to programming. This helps the software industry to train their freshmen in perfect manners.The future work of this paper is to merge different ontologies with the same technology."}], "references": [{"title": "Construction of Tridimensional Software testing Practice teaching Platform", "author": ["Maojun Huang", "Jiali Xia", "Bizhou Xiong", "Xifa Liu"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "A study of the difficulties of novice programmers", "author": ["E.lahtinen", "K.Ala-Mutka", "H.Jarvinen"], "venue": "In ITiCSE \u201905: Proceedings of the 10th annual SIGCSE conference on Innovation and technology in computer science education,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Architecture Centric Approach to Enhance Software Testing Management", "author": ["Fu-Shiau Li", "Wei-Ming Ma", "Architect Chao"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "Automated ontology construction for unstructured text documents", "author": ["C Lee", "Y Kao", "Y Kuo", "M Wang"], "venue": "Data & Knowledge Engineering", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "H.E.Thomsen, Content-based text querying with ontological descriptors", "author": ["T. Andreasen", "P.A. Jensen", "J.F. Nilsson", "P. Paggio", "B.S. Pedersen"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "Metais, Building and maintaining ontologies: a set of algorithm, Data and Knowledge Engineering", "author": ["E.N. Lammari"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "Dictionary of Philosophy of Mind - Ontology", "author": ["G. Witmer"], "venue": "[cited May 11,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2004}, {"title": "Research on Ontology Based Information Retrieval Model", "author": ["J. Song", "W. Zhang", "W. Xiao", "J. Tan"], "venue": "Journal of Nanjing University (Natural Sciences),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2005}, {"title": "Ontology-based text clustering, in:Proceedings of the IJCAI-2001 Workshop Text Learning: Beyond Supervision", "author": ["A. Hotho", "A. Madche", "S. Staab"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2001}, {"title": "Bridging Multi Agent Systems and Web Services: towards interoperability between Software Agents and Semantic Web Services", "author": ["M. Omair Shafiq", "Ying Ding", "Dieter Fensel"], "venue": "10th IEEE International Enterprise Distributed Object Computing Conference, pp. 85-96, 2006.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2006}, {"title": "OWL Web Ontology Language Reference", "author": ["M. Dean", "G. Schreiber"], "venue": "W3C Recommendation,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}], "referenceMentions": [{"referenceID": 0, "context": "Earlier mastering of testing concepts and techniques would: (1) improve the reasoning about the program (and its solution), leading to better high quality products; and (2) induce and facilitate the use of testing throughout the software development process, leading to a better high quality process, in contrast to the current practices [1].", "startOffset": 338, "endOffset": 341}, {"referenceID": 1, "context": "Programming foundations is not an easy subject to be taught - many students have difficulties in understanding the concepts of programming [2] and have a wrong view about the programming activity [3].", "startOffset": 139, "endOffset": 142}], "year": 2012, "abstractText": "Software testing is a prime factor in software industry. Besides knowing the importance of testing, only limited time is allocated for teaching it. It will be more efficient if testing is taught simultaneously with programming foundations. This integrated learning of testing techniques and programming allows the programmers to perform in a better way and this leads to the improvement of the performance of the industry progress. In this paper, a technique named ontology is introduced, it first defines the various testing process in hierarchy and define relationships among them, to share and reuse the knowledge that is captured, secondly metadata is created by natural language processing and finally, the application use ontologies to support test management, it act as knowledge base for multiple environment with the integrated teaching of programming foundation and testing concepts.", "creator": "PageMaker 7.0"}}}