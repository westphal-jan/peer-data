{"id": "1303.0213", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Mar-2013", "title": "The Semantic Web takes Wing: Programming Ontologies with Tawny-OWL", "abstract": "The Tawny-OWL library provides a fully-programmatic environment for ontology building; it enables the use of a rich set of tools for ontology development, by recasting development as a form of programming. It is built in Clojure - a modern Lisp dialect, and is backed by the OWL API. Used simply, it has a similar syntax to OWL Manchester syntax, but it provides arbitrary extensibility and abstraction. It builds on existing facilities for Clojure, which provides a rich and modern programming tool chain, for versioning, distributed development, build, testing and continuous integration. In this paper, we describe the library, this environment and the its potential implications for the ontology development process.", "histories": [["v1", "Fri, 1 Mar 2013 16:35:19 GMT  (14kb,D)", "http://arxiv.org/abs/1303.0213v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.DL", "authors": ["phillip lord"], "accepted": false, "id": "1303.0213"}, "pdf": {"name": "1303.0213.pdf", "metadata": {"source": "CRF", "title": "The Semantic Web takes Wing: Programming Ontologies with Tawny-OWL", "authors": ["Phillip Lord"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Ontology creation remains a difficult and challenging task, partly intrinsic, but partly derived from toolmaking. Ontology editors such as Prote \"ge\" [1] allow manual ontology development, but are not ideal for automation or template-driven development; for these reasons, languages such as OPPL [2] have been developed that allow a slightly higher level of abstraction via the base OWL axiomatization. However, they involve a shift away from OWL syntax, which in turn requires integration into the environment in which the developers use it. There is also considerable interest in the collaborative development of ontologies, either using collaborative development tools such as Web Protege [3] or by copy-modify-merge versioning [4].In this work, we are taking an alternative approach. Instead of developing tools for ontology development, many of which we are trying to redesign as ontology or software tools."}, {"heading": "2 Requirements", "text": "In fact, it is a pure fabric that is able to change and change the world, and that it is able to change the world, to change it, to change it, to change it, to change the world, to change it, to change the world, to change the world, to change the world, to change the world, to change the world, to change it, to change the world, to change it, to change it, to change the world, to change it, to change it, to change the world, to change the world, to change the world, to change the world, to change and to change the world."}, {"heading": "2.1 Lisp Terminology", "text": "Here we give a brief introduction to Clojure and its terminology. Like all lisps, it has a regular syntax consisting of parentheses (lists) that define an expression. The first element is usually a function that gives lisps a prefix notation. Elements can be literals, such as strings e.g. \"pizza,\" symbols e.g. defclass or keywords e.g.: equivalent. Symbols dissolve from their values, keywords dissolve by themselves, and literals are, well, literals. Unlike many languages, these constructs can be manipulated directly in the language itself, which, in combination with macros, allow an extension of the language."}, {"heading": "3 A Rich Development Environment", "text": "There are a dizzying number of ontology development tools available [12]. Probably the most popular criticism of OME is that while it provides a very rich environment for viewing and interacting with an ontology, it lacks many of the things that are present in most IDEs. For example, it lacks support for version control or adding to ChangeLogs; it is not possible to edit documentation along the ontology; nor does it lack code in other languages, for example, when running a build process or using an ontology in an application. However, we have already tried to work around this problem by providing support for the Manchester syntax - OMN - within Emacs through omn mode [13]; while this provides a richer all-purpose development environment, the ontology environment is comparatively poor. Specifically, only syntactical completion is available, there is no support for the Manchester syntax within the OMN syntax]."}, {"heading": "4 Supporting Higher Levels of Abstraction", "text": "Most ontologies encompass a certain amount of \"boilerplate\" codes, where many classes follow a similar pattern. \"There,\" according to the author, \"are in many areas of Tawny.\" \"There,\" according to the author, \"is only one way.\" \"There,\" according to the author, \"is in many areas of Tawny.\" \"There,\" according to the author, \"is only one way.\" \"There,\" according to the author, \"is only one way.\" \"There,\" according to the author, \"is only one way.\" \"There,\" according to the author, \"is\" according to the author, \"is only one way.\" \"There is only one way.\" It is a way. \"It is a way.\" It is a way. \"It is a way.\" It is a way. \"It is a way.\" It is a way. \"It is a way.\" It is a way. \"It is a way.\" It is a way. \"It is a way.\""}, {"heading": "5 Separating Concerns for Different Developer Groups", "text": "A common requirement in ontology development is a separation of concerns; different contributors to ontology may require different processing environments, such as RightField or Populous [18]. Tawny also enables this approach; here we describe how this enables internationalization. Originally, pizza ontology had identifiers in English and Portuguese, but ironically not in Italian. Although it would be possible to have a translator work directly on a palatable source file, this is not ideal as they would have to embed their translations in the OWL entity definitions as shown in Listing 3; this may be particularly problematic if machine-assisted translation is required due to the non-standard format. We therefore have additional support for the polyglot library. Labels are stored in a Java property file (Listing 8) and loaded with a single Lisp form (Listing 9). Tawny will generate a sketch file, not on demand, and not on demand."}, {"heading": "6 Collaborative and Distributed Development", "text": "Collaborative development is not a new problem; many software development projects involve many developers who are geographically separated, in different time zones, with teams changing over time. Tools to enable this form of collaboration are well developed and well supported; some of these tools are also available for ontology development; for example, the ContentCVS system supports simultaneous online editing; however, using this tool requires the installation of a customized Tomcat-based server, nor does it support a number of axioms [3]. Alternatively, the ContentCVS system also supports simultaneous online editing, using the notion of structural equivalence to compare and resolve conflicts [4]; the authors argue that ontology is a set of axioms. However, its versioning system reflects the capabilities of CVS - a client-server-based system that is archaic."}, {"heading": "7 Enabling Modularity", "text": "Tawny provides explicit support for name spacing and does so by building on Clowny's namespace support. It is possible to create a set of ontologies spread over a number of different files. Normally, each file contains a single namespace; Tawny reflects this, with each namespace containing a single ontology, where a defined IRI.OWL itself does not provide a distribution mechanism for ontologies; the IRI of an ontology does not need to be resolved. In practice, this is often a distribution mechanism; by default, Prote \u0301 ge checks for resolution when other mechanisms fail; for example, OBO ontologies are all from their IRI. By contrast, Tawny itself builds on the clojure environment; most projects are created using the Leininger tool, which in turn uses the Maven repository and dependency management. When building the pizza ontology in Tawny, Tawny itself will build the MamiT build tool, which can be supported by different AWL-API and Mamiven dependencies."}, {"heading": "8 Coping With Semantics Free Identifiers", "text": "However, it is not only a matter of time, but also of time, in which the library reads the OWL file, creates symbols for all entities, then associates the relevant Java object with that symbol. This approach is reasonably scalable; tawny can import the genes ontology within a minute on a desktop machine. Clojure is a highly dynamic language and allows this form of programmatic variable creation as a first-class part of the language. So an ontology that works in every way like a tawny native ontology. Ontology classes can be used for their documentation, auto-completion and so on. However, there is a significant problem with this import mechanism. Tawny needs to create an icon that works in every sense like a tawny native ontology."}, {"heading": "9 Enabling Unit Testing and Continuous Integration", "text": "To add this capability to tawny, we have built-in reasoning; at the time of writing, only ELK [25] is available as a Maven resource in the Maven Central Repository, so we have developed a secondary Maven building for HermiT that also allows the use of this argument [26] 6, so both of these reasoners are available for use; others can be added trivially as they are mavenized. A number of test frameworks exist in Clojure; here we use clojure.test. As shown in Listing 10, we verify that various inferences have occurred (or not as appropriate), with the isuperclass? We have also added support for the \"probe\" class."}, {"heading": "10 Discussion", "text": "In fact, it is the case that most of them will be able to abide by the rules they have imposed on themselves, and that they will be able to abide by the rules they have imposed on themselves. (...) It is also the case that they are able to abide by the rules. (...) It is not the case that they are able to abide by the rules. (...) It is as if they are able to abide by the rules. (...) It is as if they are able to abide by the rules. \"(...)"}], "references": [{"title": "Transforming the axiomisation of ontologies: The ontology pre-processor language", "author": ["M. Egana Aranguren", "R. Stevens", "E. Antezana"], "venue": "Nature Precedings", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "Supporting concurrent ontology development: Framework, algorithms and tool", "author": ["E. Jiminez Ruiz", "B.C. Grau", "I. Horrocks", "R. Berlanga"], "venue": "Data & Knowledge Engineering 70(1)", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2011}, {"title": "Why the pizza ontology tutorial? http://robertdavidstevens", "author": ["R. Stevens"], "venue": "wordpress.com/2010/01/22/why-the-pizza-ontology-tutorial/ [Online. lastaccessed: 2012-11-09 22:37:14]", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2010}, {"title": "Owl2perl: creating perl modules from owl class definitions", "author": ["E. Kawas", "M.D. Wilkinson"], "venue": "Bioinformatics 26(18)", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2010}, {"title": "Cooking the semantic web with the OWL API", "author": ["S. Bechhofer", "R. Volz", "P. Lord"], "venue": "Internaional Semantic Web Conference.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2003}, {"title": "Brain: Biomedical knowledge manipulation", "author": ["S. Croset", "J. Overington", "D. Rebholz-Schuhman"], "venue": "Bioinformatics", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2013}, {"title": "Owl 2 web ontology language manchester syntax", "author": ["M. Horridge", "P. Patel-Schneider"], "venue": "http://www.w3.org/TR/owl2-manchester-syntax/", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Owl concepts as lisp atoms", "author": ["P. Lord"], "venue": "http://www.russet.org.uk/blog/2254 [Online. last-accessed: 2012-10-25 01:36:03]", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2012}, {"title": "The sweet compendium of ontology building tools", "author": ["M. Bergman"], "venue": "http://www. mkbergman.com/862/the-sweet-compendium-of-ontology-building-tools/", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2010}, {"title": "Ontology building with emacs", "author": ["P. Lord"], "venue": "http://www.russet.org.uk/blog/2161 [Online. last-accessed: 2012-07-26 09:28:46]", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "Disjoints in clojure-owl", "author": ["P. Lord"], "venue": "http://www.russet.org.uk/blog/2275 [Online. last-accessed: 2013-02-11 09:34:50]", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2012}, {"title": "Closing down the open world: Covering axioms and closure axioms", "author": ["R. Stevens"], "venue": "http://ontogenesis.knowledgeblog.org/1001 [Online. last-accessed: 2012-06-19 16:13:39]", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2011}, {"title": "Representing specified values in owl: \u201cvalue partitions\u201d and \u201cvalue sets", "author": ["A. Rector"], "venue": "W3C Working Group Note", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2005}, {"title": "Populous: a tool for building owl ontologies from templates", "author": ["S. Jupp", "M. Horridge", "L. Iannone", "J. Klein", "S. Owen", "J. Schanstra", "K. Wolstencroft", "R. Stevens"], "venue": "BMC Bioinformatics 13(Suppl 1)", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2011}, {"title": "Obo format and manchester syntax", "author": ["P. Lord"], "venue": "http://www.russet.org.uk/blog/ 1470 [Online. last-accessed: 2012-06-19 16:32:49]", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2009}, {"title": "Semantics-free ontologies", "author": ["P. Lord"], "venue": "http://www.russet.org.uk/blog/2040 [Online. last-accessed: 2012-06-19 16:32:22]", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Clojure owl 0.2. http://www.russet.org.uk/blog/2303 [Online", "author": ["P. Lord"], "venue": "lastaccessed: 2012-12-03", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2012}, {"title": "Remembering the world as it used to be", "author": ["P. Lord"], "venue": "http://www.russet.org.uk/ blog/2316 [Online. last-accessed: 2013-01-11 23:00:11]", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2013}, {"title": "Co-ode & downloads & the owl unit test framework", "author": ["N. Drummond"], "venue": "http://www. co-ode.org/downloads/owlunittest/ [Online. last-accessed:", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2013}, {"title": "Elk reasoner: Architecture and evaluation", "author": ["Y. Kazakov", "M. Krtzsch", "F. Simancik"], "venue": "Proceedings of the 1st International Workshop on OWL Reasoner Evaluation (ORE-2012).", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2012}, {"title": "Continuous integration of open biological ontology libraries", "author": ["C. Mungall", "H. Dietze", "S. Carbon", "A. Ireland", "S. Bauer", "S. Lewis"], "venue": "http://bio-ontologies. knowledgeblog.org/405", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2012}, {"title": "OWL pizzas: Practical experience of teaching OWL-DL: common errors & common patterns", "author": ["A. Rector", "N. Drummond", "M. Horridge", "J. Rogers", "H. Knublauch", "R. Stevens", "H. Wang", "C. Wroe"], "venue": "Engineering Knowledge in the Age of the Semantic Web", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2004}, {"title": "Adding a little reality to building ontologies for biology", "author": ["P. Lord", "R. Stevens"], "venue": "PLoS One", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "For example, while ontology editors like Prot\u00e9g\u00e9 [1] do allow manual ontology development, they are not ideal for automation or template-driven development; for these reasons languages such as OPPL[2] have been developed; these allow a slightly higher-level of abstraction over the base OWL axiomatisation.", "startOffset": 197, "endOffset": 200}, {"referenceID": 1, "context": "There has also been significant interest in collaborative development of ontologies, either using collaborative development tools such as Web-Protege[3], or through copy-modify-merge versioning[4].", "startOffset": 193, "endOffset": 196}, {"referenceID": 2, "context": "We demonstrate the application of this library to a standard exemplar - namely the Pizza Ontology[5], as well as several other scenarios.", "startOffset": 97, "endOffset": 100}, {"referenceID": 3, "context": "For example, OWL2Perl[6] allows generation of Perl classes from an OWL Ontology, while the OWL API allows OWL ontology development in Java[7].", "startOffset": 21, "endOffset": 24}, {"referenceID": 4, "context": "For example, OWL2Perl[6] allows generation of Perl classes from an OWL Ontology, while the OWL API allows OWL ontology development in Java[7].", "startOffset": 138, "endOffset": 141}, {"referenceID": 5, "context": "One response to this is Brain[8,9], which is a much lighter weight facade over the OWL API also implemented in Java.", "startOffset": 29, "endOffset": 34}, {"referenceID": 6, "context": "The syntax has been designed after Manchester syntax[10].", "startOffset": 52, "endOffset": 56}, {"referenceID": 7, "context": "Strictly, this binding is not necessary (and can be avoided if the user wishes), however this provides the same semantics as Brain\u2019s addClass and getClass \u2013 classes, properties, etc must be created before use; this is a valuable feature protecting against typing errors[11].", "startOffset": 269, "endOffset": 273}, {"referenceID": 8, "context": "There are a dizzying array of ontology development tools available[12].", "startOffset": 66, "endOffset": 70}, {"referenceID": 9, "context": "We have previously attempted to work around this problem by providing support for Manchester syntax \u2013 OMN \u2013 within Emacs through omn-mode[13]; while this provides a richer general-purpose environment, the ontology environment is comparatively poor.", "startOffset": 137, "endOffset": 141}, {"referenceID": 10, "context": "As shown here, disjoint axioms can also be added[15]; and, not used here, covering axioms[16].", "startOffset": 48, "endOffset": 52}, {"referenceID": 11, "context": "As shown here, disjoint axioms can also be added[15]; and, not used here, covering axioms[16].", "startOffset": 89, "endOffset": 93}, {"referenceID": 12, "context": "Tawny also includes initial support for ontology design patterns; in particular, we have added explicit support for the value partition[17].", "startOffset": 135, "endOffset": 139}, {"referenceID": 13, "context": "One common requirement in ontology development is a separation of concerns; different contributors to the ontology may need different editing environments, as for instance with RightField or Populous[18].", "startOffset": 199, "endOffset": 203}, {"referenceID": 1, "context": "It uses the notion of structural equivalence for comparison and resolution of conflicts[4]; the authors argue that an ontology is a set of axioms.", "startOffset": 87, "endOffset": 90}, {"referenceID": 14, "context": "We have previously suggested a number of solutions to this problem either through the use of comments or specialised denormalisations[19], or through the addition of an Alias directive providing a mapping between numeric and readable identifier[20].", "startOffset": 133, "endOffset": 137}, {"referenceID": 15, "context": "We have previously suggested a number of solutions to this problem either through the use of comments or specialised denormalisations[19], or through the addition of an Alias directive providing a mapping between numeric and readable identifier[20].", "startOffset": 244, "endOffset": 248}, {"referenceID": 16, "context": "For tawny, we have worked around this problem by enabling an arbitrary mapping between the OWL entity and symbol name [21].", "startOffset": 118, "endOffset": 122}, {"referenceID": 17, "context": "Tawny provides a solution to this; it is possible to memorise mappings between symbols and IRIs at one point in time[22].", "startOffset": 116, "endOffset": 120}, {"referenceID": 18, "context": "Adapting this process for ontology development has previously been suggested[23], and implemented as a plugin to Prot\u00e9g\u00e9 [24].", "startOffset": 121, "endOffset": 125}, {"referenceID": 19, "context": "To add this capability to tawny, we have integrated reasoning; at the time of writing, only ELK[25] is available as a maven resource in the Maven Central repository, therefore we have developed a secondary maven build for HermiT which allows use of this reasoner also[26], so both these reasoners are available for use; others can be added trivially as they are mavenised.", "startOffset": 95, "endOffset": 99}, {"referenceID": 20, "context": "Unlike, other ontology CI systems[27], this requires no installation, integrates directly with the DVCS in use.", "startOffset": 33, "endOffset": 37}, {"referenceID": 21, "context": "It can clearly delineate disjoint classes protecting against future additions; this helps to address a common ontological error[28].", "startOffset": 127, "endOffset": 131}, {"referenceID": 0, "context": "Bespoke templates can be built for a specific ontology; this mirrors functionality of tools like OPPL[2], but uses the power of a full programming language and environment.", "startOffset": 101, "endOffset": 104}, {"referenceID": 22, "context": "In short, tawny provides the tools for a more pragmatic and agile form of ontology development which is more suited to fulfilling the changing and varied requirements found in the real world[32].", "startOffset": 190, "endOffset": 194}], "year": 2013, "abstractText": "The Tawny-OWL library provides a fully-programmatic environment for ontology building; it enables the use of a rich set of tools for ontology development, by recasting development as a form of programming. It is built in Clojure \u2013 a modern Lisp dialect, and is backed by the OWL API. Used simply, it has a similar syntax to OWL Manchester syntax, but it provides arbitrary extensibility and abstraction. It builds on existing facilities for Clojure, which provides a rich and modern programming tool chain, for versioning, distributed development, build, testing and continuous integration. In this paper, we describe the library, this environment and the its potential implications for the ontology development process.", "creator": "LaTeX with hyperref package"}}}