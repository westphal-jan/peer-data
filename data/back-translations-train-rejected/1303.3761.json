{"id": "1303.3761", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Mar-2013", "title": "Update report: LEO-II version 1.5", "abstract": "Recent improvements of the LEO-II theorem prover are presented. These improvements include a revised ATP interface, new translations into first-order logic, rule support for the axiom of choice, detection of defined equality, and more flexible strategy scheduling.", "histories": [["v1", "Fri, 15 Mar 2013 13:03:40 GMT  (37kb)", "https://arxiv.org/abs/1303.3761v1", "7 pages"], ["v2", "Tue, 14 May 2013 07:51:31 GMT  (37kb)", "http://arxiv.org/abs/1303.3761v2", "7 pages"]], "COMMENTS": "7 pages", "reviews": [], "SUBJECTS": "cs.LO cs.AI cs.MS", "authors": ["christoph benzm\\\"uller", "nik sultana"], "accepted": false, "id": "1303.3761"}, "pdf": {"name": "1303.3761.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Nik Sultana"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 130 3.37 61v2 [cs.LO] 1 4M ay2 01Keywords: automated theorem proof, classical logic of higher order"}, {"heading": "1 Introduction", "text": "Five years have passed since the last Leo-II system description [6], and several improvements have been made to the system in recent months. In this article, we outline the current system and describe recent improvements."}, {"heading": "2 System overview", "text": "Leo-II is written in OCaml and implements a RUE calculation [12] based on a \"Boolean conscious\" (or, more generally, \"theoretically conscious\" [3]) extending pre-unification engine. Leo-II accepts problems encoded in the languages CNF (clausal first-order form) and FOF (first-order form) from the TPTP [15], but its main input language is THF0, core-typed higher-order form [16]. The logical organization of the tester is illustrated in Figure 1, and this roughly corresponds to the modular organization of the code. It is structured in four layers, as the figure shows: operating mode. The tester can be operated in two ways: (i) Leo-II can be used as an evidence wizard when executed in interactive mode. It provides a command interface through which the tester can manipulate and manipulate the state."}, {"heading": "3 Improvements", "text": "We accompany the description of the improvements in this section with TPTP problem names whose solution is influenced by the feature. These problems consist of THF problems from TPTP 5.4.0. We used E version 1.6 as backend ATP. Our tests were performed on a 2GHz AMD Opteron with 4GB RAM and provided with 60-second timeout. LEO-II was compiled with OCaml 3.11.2."}, {"heading": "3.1 ATP interface", "text": "Leo-II works with other auditors to maximize its potential. We improved Leo-II's translation into FOL in recognition of this. Version 1.5 includes a better translation into FOF, an experimental translation into TFF [14], and supports additional backend ATPs.Translation into FOL. In addition to the old translations previously implemented in Leo-II, version 1.5 has a new translation module that has been rewritten from scratch. This module includes an intermediate language into which problems are first translated before being further transformed and printed into a specific target syntax. HOL-to-FOL translations consist of a pipeline of functions that bring HOL formulas into this intermediate language, applying analysis and translation along the way. We are also experimenting with easier encoding of type information. We have closely followed Claessen et al [7] to implement their monotonicity analysis by creating a defective SAT encoding, which we will send to Leo a miniaturized interface."}, {"heading": "3.2 Support for Axiom of Choice", "text": "The default semantics for THF0 is Henkin semantics with choice. Up to version 1.5, Leo-II did not support choice reasoning, unless its own scolemization was applied - that is, a first choice was made without introducing further limitations (as explored by Miller [8]). This allows limited thinking with choice and is successful in some example cases, but fails in many other cases. [5, Section 3.2] To expand Leo-II to support the axiom of choice (AC), instances of AC could be automatically added to the input problem. An example is the following instance of AC for type (A)."}, {"heading": "3.3 Detection of defined equality", "text": "The primitive equality in HOL refers to the use of the interpreted constant \"=.\" The equality can also be defined in HOL - for example as \u03bbX\u03b1\u03bbY\u03b1-P\u03b1 \u2192 o P X-P Y or \u03bbX\u03b1\u03bbY\u03b1-Q\u03b1 \u2192 o-Z\u03b1 (Q Z) \u21d2 Q X Y. The former is known as Leibniz equality and the latter we call \"Andrew equality\" (cf. [1], Exercise X5303). Both Leibniz and Andrews equality, due to their unpredictable nature, support the sectional simulation [4] and should therefore be avoided in evidence automation. Indeed, the use of primitive instead of defined equality can save many primitive substitution steps in proofs. Such steps involve the instantiation of fixed variables, and this generally involves blind guessing. Examples of the use of primitive instead of defined primitive P-P-equality, 5.2 and P-equality in literature [5.1]."}, {"heading": "3.4 Strategy scheduling", "text": "In version 1.5, we have rewritten the strategy planning to facilitate the coding of new strategies, improve the reuse of the code with other parts of Leo-II, and have greater flexibility in coding strategies. We are also interested in the spontaneous calculation of strategies based on problem characteristics, and version 1.5 performs some small initial checks (e.g. the size of the problem and whether it contains instances of alternating current) and plans strategies based on this limited analysis."}, {"heading": "3.5 Other improvements", "text": "Previously, Leo-II focused entirely on refutation: that is, until version 1.5, Leo-II would classify a problem related to the SDR classification as a theorem (if there is a refutation), unsatisfactory (if the axioms of the problem itself can be refuted), or divergent (by extending the depth of pre-unification and attempting to refutate again).It can now classify satisfactory problems and identify unsatisfactory problems, thereby improving both Leo-II's precision and its terminationality.The additional support for the choice was very relevant to achieve this. Leo-II's unification algorithm has been revised and can be adjusted (from the command line) to disregard Boolean and functional extensionality, which has strengthened Leo-II's behavior in non-extensive problems as the deactivation of the extended behavior shrinks the search space. Numerous other improvements and corrections have been made: these ranges from avoiding the selection to avoiding, etc."}, {"heading": "4 Future work", "text": "We have started experimenting with the use of termurals to influence literal selection. We also plan to revise the internals of Leo II to fully exploit the potential benefits they offer. For example, the common term diagram is currently not being exploited. More work is needed to calculate better schedules, coupled with better problem analyses. Such analyses can determine the planning of specific strategies that can be better tailored to the problem. The ATP interface can be further improved to run multiple backend ATPs in parallel. Experiments that compare 30-second calls of Leo II to all THF problems, supported by testers E (version 1.6), SPASS (version 3.5) [17] and Vampire (version 2.6) [10] showed us that there were 37, 5 and 20 theorems that can only be amplified by Leo II (E), Leo II (SPASS) and Leo II (SPASS) and Leo SPASS II (Leo VASS) and Leo II (Leo VASS) for transmission), and Leo II (Leo VASS)."}, {"heading": "5 Conclusion", "text": "To get a more complete picture, we compared the results of the use of Leo II version 1.5 with previous versions, and the results are presented in Table 2. In this experiment, we counted the matches between the SDR output of Leo II and the SDR status of the TPTP problem (included in the header).3 All net gains are positive, but a more thorough evaluation (taking into account various parameters) remains as future work. Over a period of 30 years, Leo II version 1.5 can classify 196 more problems than its predecessor. The main thrust in this version is the detection of non-theorems (125196).3 This also means that \"unknown\" problems that Leo II now classifies as \"theorems\" against us, but this experiment was only intended to provide a rough idea of progress."}], "references": [{"title": "An Introduction to Mathematical Logic and Type Theory: To Truth", "author": ["P.B. Andrews"], "venue": "Through Proof. Applied Logic Series. Springer,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2002}, {"title": "Analytic tableaux for higher-order logic with choice", "author": ["J. Backes", "C.E. Brown"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Comparing approaches to resolution based higher-order theorem", "author": ["C. Benzm\u00fcller"], "venue": "proving. Synthese,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2002}, {"title": "Cut-simulation and impredicativity", "author": ["C. Benzm\u00fcller", "C.E. Brown", "M. Kohlhase"], "venue": "Logical Methods in Computer Science,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2009}, {"title": "A Structured Set of Higher-Order Problems", "author": ["C. Benzm\u00fcller", "C.E. Brown"], "venue": "Proc. of TPHOLs 2005,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2005}, {"title": "LEO-II - a cooperative automatic theorem prover for higher-order logic", "author": ["C. Benzm\u00fcller", "F. Theiss", "L. Paulson", "A. Fietzke"], "venue": "Proc. of IJCAR 2008,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "Sort it out with monotonicity: translating between many-sorted and unsorted first-order logic", "author": ["K. Claessen", "A. Lilliestr\u00f6m", "N. Smallbone"], "venue": "Proc. of CADE 2011,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Proofs in Higher-Order Logic", "author": ["D.A. Miller"], "venue": "PhD thesis, Carnegie Mellon U.,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1983}, {"title": "Cut-elimination for simple type theory with an axiom of choice", "author": ["G. Mints"], "venue": "Journal of Symbolic Logic,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1999}, {"title": "The design and implementation of VAMPIRE", "author": ["A. Riazanow", "A. Voronkov"], "venue": "AI Commun", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2002}, {"title": "Understanding LEO-II\u2019s proofs. The 9th International Workshop on the Implementation of Logics (IWIL-2012, affiliated with LPAR-2012)", "author": ["N. Sultana", "C. Benzm\u00fcller"], "venue": "Merida, Venezuela,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2012}, {"title": "The SZS ontologies for automated reasoning software. Proc. of the LPAR Workshops: Knowledge Exchange: Automated Provers and Proof Assistants, and The 7th International", "author": ["G. Sutcliffe"], "venue": "Workshop on the Implementation of Logics,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2008}, {"title": "The TPTP typed firstorder form with arithmetic", "author": ["G. Sutcliffe", "S. Schulz", "K. Claessen", "P. Baumgartner"], "venue": "Proc. of LPAR 2012,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "The TPTP problem library and associated infrastructure", "author": ["G. Sutcliffe"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "Automated Reasoning in Higher-Order Logic using the TPTP THF Infrastructure", "author": ["G. Sutcliffe", "C. Benzm\u00fcller"], "venue": "Journal of Formalized Reasoning,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "SPASS Version 3.5", "author": ["C. Weidenbach", "D. Dimova", "A. Fietzke", "R. Kumar", "M. Suda", "P. Wischnewski"], "venue": "Proc. of CADE 2009, vol. 5663 of LNCS,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2009}], "referenceMentions": [{"referenceID": 5, "context": "It has been five years since the last system description of Leo-II [6], and during the last months various improvements have been made to the system.", "startOffset": 67, "endOffset": 70}, {"referenceID": 10, "context": "Leo-II is written in OCaml and implements a RUE calculus [12] which relies on a \u2018Boolean aware\u2019 (or, more generally, \u2018theory aware\u2019 [3]) extensional preunification engine.", "startOffset": 57, "endOffset": 61}, {"referenceID": 2, "context": "Leo-II is written in OCaml and implements a RUE calculus [12] which relies on a \u2018Boolean aware\u2019 (or, more generally, \u2018theory aware\u2019 [3]) extensional preunification engine.", "startOffset": 132, "endOffset": 135}, {"referenceID": 13, "context": "Leo-II accepts problems encoded in the CNF (clausal first-order form) and FOF (first-order form) languages from the TPTP [15], but its principal input language is THF0, core typed higher-order form [16].", "startOffset": 121, "endOffset": 125}, {"referenceID": 14, "context": "Leo-II accepts problems encoded in the CNF (clausal first-order form) and FOF (first-order form) languages from the TPTP [15], but its principal input language is THF0, core typed higher-order form [16].", "startOffset": 198, "endOffset": 202}, {"referenceID": 12, "context": "5 includes a better translation into FOF, an experimental translation into TFF [14], and supports additional backend ATPs.", "startOffset": 79, "endOffset": 83}, {"referenceID": 6, "context": "We have closely followed Claessen et al [7] to implement their monotonicity analysis by producing a SAT encoding, which we send to MiniSat using an interface adapted from Satallax [2].", "startOffset": 40, "endOffset": 43}, {"referenceID": 1, "context": "We have closely followed Claessen et al [7] to implement their monotonicity analysis by producing a SAT encoding, which we send to MiniSat using an interface adapted from Satallax [2].", "startOffset": 180, "endOffset": 183}, {"referenceID": 13, "context": "5 we improved Leo-II\u2019s ATP interface and added support for various other backend ATPs, including remote provers on SystemOnTPTP [15].", "startOffset": 128, "endOffset": 132}, {"referenceID": 7, "context": "5, Leo-II did not support reasoning with choice, unless n\u00e4\u0131ve Skolemization was used\u2014that is, first-order Skolemization without employing further restrictions (as investigated by Miller [8]).", "startOffset": 186, "endOffset": 189}, {"referenceID": 3, "context": "However, such kinds of impredicative axioms should generally be avoided in automated proof search since they allow for simulation of the cut rule in any Henkin-complete THF prover [4].", "startOffset": 180, "endOffset": 183}, {"referenceID": 8, "context": "Our choice rule is more closely related to that of Mints [9].", "startOffset": 57, "endOffset": 60}, {"referenceID": 0, "context": "[1], Exercise X5303).", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "Both Leibniz and Andrews equality support cut-simulation due to their impredicative nature [4], and should thus be avoided in proof automation.", "startOffset": 91, "endOffset": 94}, {"referenceID": 11, "context": "1) several TPTP problems whose previous SZS [13] status was \u2018Unknown\u2019 can now be solved by Leo-II.", "startOffset": 44, "endOffset": 48}, {"referenceID": 15, "context": "5) [17] and Vampire (version 2.", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "6) [10] showed us that there were 37, 5 and 20 theorems that were proved exclusively by Leo-II(E), Leo-II(SPASS) and Leo-II(Vampire), respectively.", "startOffset": 3, "endOffset": 7}], "year": 2013, "abstractText": "Recent improvements of the LEO-II theorem prover are presented. These improvements include a revised ATP interface, new translations into first-order logic, rule support for the axiom of choice, detection of defined equality, and more flexible strategy scheduling.", "creator": "LaTeX with hyperref package"}}}