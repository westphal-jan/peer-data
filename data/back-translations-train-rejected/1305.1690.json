{"id": "1305.1690", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-May-2013", "title": "Unsatisfiable Cores for Constraint Programming", "abstract": "Constraint Programming (CP) solvers typically tackle optimization problems by repeatedly finding solutions to a problem while placing tighter and tighter bounds on the solution cost. This approach is somewhat naive, especially for soft-constraint optimization problems in which the soft constraints are mostly satisfied. Unsatisfiable-core approaches to solving soft constraint problems in Boolean Satisfiability (e.g. MAXSAT) force all soft constraints to hold initially. When solving fails they return an unsatisfiable core, as a set of soft constraints that cannot hold simultaneously. Using this information the problem is relaxed to allow certain soft constraint(s) to be violated and solving continues. Since Lazy Clause Generation (LCG) solvers can also return unsatisfiable cores we can adapt the MAXSAT unsatisfiable core approach to CP. We implement the original MAXSAT unsatisfiable core solving algorithms WPM1, MSU3 in a state-of-the-art LCG solver and show that there exist problems which benefit from this hybrid approach.", "histories": [["v1", "Wed, 8 May 2013 01:50:05 GMT  (39kb,D)", "http://arxiv.org/abs/1305.1690v1", "Submitted to CP2013"]], "COMMENTS": "Submitted to CP2013", "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["nicholas downing", "thibaut feydy", "peter j stuckey"], "accepted": false, "id": "1305.1690"}, "pdf": {"name": "1305.1690.pdf", "metadata": {"source": "CRF", "title": "Unsatisfiable Cores for Constraint Programming", "authors": ["Nicholas Downing", "Peter J. Stuckey"], "emails": ["ndowning@csse.unimelb.edu.au", "tfeydy@csse.unimelb.edu.au", "pjs@csse.unimelb.edu.au"], "sections": [{"heading": "1 Introduction", "text": "In this paper, we look at how to make constraint programming (CP) solutions better at tackling soft constraint problems. CP solvers typically solve optimization problems with branch-and-bound, and while soft constraint problems can easily be placed within a CP optimization framework, one distinguishing feature is that we expect most soft constraints to hold, at least with typical problems. CP solvers rely heavily on propagation to reduce the search space, but soft constraints have little propagation capability (because although the limitations are likely, we don't know for sure if they can hold), and overcoming the search. Therefore, existing CP solvers are almost always terrible at soft constraint problems, a deficiency exacerbated by the fact that typical search strategies don't know where the good solutions are, so in some cases thousands of solutions need to be proven before solving."}, {"heading": "2 Lazy Clause Generation (LCG)", "text": "We look at problems that consist of constraints C versus integer variables x1,.., xn, each with a specific finite domain Dorig (xi). A workable solution is an evaluation of the variable that meets all constraints C and is in the domain Dorig = Dorig (x1)... \u00d7 Dorig (xn), i.e. a failure of the variable (xi). A propagation solver maintains a domain constraint D (xi) for each variable and only considers solutions that lie within D = D (x1). \u00b7 D (xn), i.e. a failure of the variable (xi). A propagation solver keeps a domain constraint D (xi) Dorig (xi) for each variable and only considers solutions that lie within D = D (x1). \u00b7 D (xn), i.e. a true clause that leaves multiplication that repeats propagators apply to remove unsupported values, and a search that pulls some letters into the spreadable."}, {"heading": "3 MAXSAT solving algorithms", "text": "s consider the Boolean variables x1, x2, x3 and the clauses constraints C1 \u2261 x1, C2 \u2261 x2, C3 \u2261 x3, C4 \u2261 x1 \u0445 \u00ac x2, C5 \u2261 \u00ac x1 \u0445 \u00ac x3 = true violates C5. As a Boolean satisfaction problem (SAT), this is an unsatisfactory core because x1 = x2 = true violates C4. Likewise, {C1, C3, C5} is an unsatisfactory core because x1 = x3 = true violates C5. As a Boolean satisfaction problem (SAT), this is unworkable because a maximum satisfaction problem (MAXSAT, C5} is an unsatisfactory core because x3 violates C5."}, {"heading": "3.1 Branch-and-bound algorithm", "text": "For branch-and-bound, we first convert the soft constraint problem to a hard constraint problem using violator variables vj. We rewrite Cj to Cj-and-bound, which means that the original clause Cj is now enforced only if its violator vj is wrong. Example 2. Adding violator variables v1,.., v5 to the soft clauses C1,.., C5 of example 1 results in the hardconstraint optimization problematimize z = v1 + v2 + v3 + v4 + v5, so that the C1 solution v1, C2-x2-V2-V2-V3-V3-V3-V3-Vasiint-V3-Vasiint variables that are wrong disappear, while violator variables that are true automatically fulfill their clause, which therefore plays no further role."}, {"heading": "3.2 Fu and Malik (Msu1 or Wpm1) algorithm", "text": "The first solution we have found is guaranteed to minimize the number of clauses in the sentence, or the sum of clauses in the series of unfulfillable variables, which in most cases are so limited that they are true (atmost1), and the first solution is continued to minimize the number of clauses, or the sum of clauses in the series of unfulfillable variables, which are considered true in most cases (atmost1), and the second Wpm1 for weighted partial MAXSAT (Msu1) is a special case: clauses C1, Cn with weights w1,."}, {"heading": "3.3 Marques-Silva & Planes (Msu3) algorithm", "text": "The difficulty with Wpm1 is that it is extremely aggressive, in the sense that the only problem with soft constraints that are allowed are those that are already known to exist. On many issues, the aggressive approach pays off, but on other issues either leads to many unsatisfactory cores that need to be enumerated before feasibility is achieved, or else the problems become increasingly difficult to solve (the increasing number of atmost1 constraints leads to an exponential number of relaxation variable assignments, some of which can be symmetrical). Marques-Silva & Planes [10] suggests Msu3 to solve problems that Wpm1 does not handle efficiently for the above reasons. Msu3 is defined in Algorithm 3. It is an unsatisfactory core and branch-and-and-and-approach that takes advantage of some of an unsatisfactory core solution without being so aggressive."}, {"heading": "4 Unsatisfiable cores for LCG", "text": "We can easily adapt the Soft-Constraint optimization approaches described above to CP = Now we can effectively use a Soft-Intenonal Constraint Ij as a semi-mature constraint [4] of the form ij \u2192 Ij, where ij is the indicator variable for the Constraint Ij. If ij is true, then the constraint applies, and if ij is false, then the constraint has no effect. Note that a CP solver that has a distributor for the Constraint Ij can easily be expanded to provide a semi-mature version of the Constraint Ij. In addition, the explanatory algorithm for Ij in an LCG solver can be slightly expanded to include the semi-mature version. By adding indicator variables, we can effectively map the Soft-Constraint problem to a MAXSAT problem. If the Soft-Intensive Constraint-Constraint Constraint Ij has a constraint, we can then easily adapt the Soft-Constraint Constraint to CP."}, {"heading": "5 Experimental evaluation", "text": "In fact, it is the case that most people are able to decide for themselves what they want and what they do not want. (...) In fact, most people are able to decide whether they want to or not. (...) In fact, it is the case that most people are able to decide whether they want to or not. (...) In fact, it is the case that most people are able to decide whether they want to or not. (...) In fact, most people are able to decide whether they want to or not. (...)"}, {"heading": "6 Related work and conclusion", "text": "These approaches are similar to Wpm1 in that they both effectively shift part of the cost function when inconsistencies are detected, but many problems (such as the scheduling problem we are investigating) cannot be encoded solely with extensional constraints. We know of no other approaches to soft, intentionally defined constraints other than PBO / WBO [3,9], which support consciously defined linear constraints.In this paper, we show how to use unsatisfactory core methods developed for MAXSAT to solve CP optimization problems with soft constraints by leveraging the capabilities of LCG solvers to generate unsatisfactory kernel optimization algorithms, as they can be dramatically superior to the corresponding problems."}], "references": [{"title": "Solving (Weighted) Partial MaxSAT through Satisfiability Testing", "author": ["C. Anstegui", "M. Bonet", "J. Levy"], "venue": "Kullmann, O. (ed.) Theory and Applications of Satisfiability Testing - SAT 2009, Lecture Notes in Computer Science, vol. 5584, pp. 427\u2013440. Springer Berlin Heidelberg", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "Scheduling project networks with resource constraints and time windows", "author": ["M. Bartusch", "R. M\u00f6hring", "F. Radermacher"], "venue": "Annals of Operations Research 16(1), 199\u2013 240", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1988}, {"title": "Translating Pseudo-Boolean Constraints into SAT", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "JSAT 2(1-4), 1\u201326", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2006}, {"title": "Half Reification and Flattening", "author": ["T. Feydy", "Z. Somogyi", "P. Stuckey"], "venue": "Lee, J. (ed.) Principles and Practice of Constraint Programming CP 2011, Lecture Notes in Computer Science, vol. 6876, pp. 286\u2013301. Springer Berlin / Heidelberg", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2011}, {"title": "On Solving the Partial MAX-SAT Problem", "author": ["Z. Fu", "S. Malik"], "venue": "Biere, A., Gomes, C.P. (eds.) Theory and Applications of Satisfiability Testing - SAT 2006, Lecture Notes in Computer Science, vol. 4121, pp. 252\u2013265. Springer Berlin Heidelberg", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2006}, {"title": "Existential arc consistency: Getting closer to full arc consistency in weighted CSPs", "author": ["S. de Givry", "F. Heras", "M. Zytnicki", "J. Larrosa"], "venue": "International Joint Conference on AI - IJCAI05. pp. 193\u2013198. AAAI Press", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2005}, {"title": "PSPLIB} - A project scheduling problem library: {OR} Software - {ORSEP} Operations Research Software Exchange Program", "author": ["R. Kolisch", "A. Sprecher"], "venue": "European Journal of Operational Research 96(1), 205\u2013216", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1997}, {"title": "In the quest of the best form of local consistency for Weighted CSP", "author": ["J. Larrosa", "T. Schiex"], "venue": "International Joint Conference on AI - IJCAI03. pp. 239\u2013244. AAAI Press", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2003}, {"title": "Algorithms for Weighted Boolean Optimization", "author": ["V. Manquinho", "J. Marques-Silva", "J. Planes"], "venue": "Kullmann, O. (ed.) Theory and Applications of Satisfiability Testing - SAT 2009, Lecture Notes in Computer Science, vol. 5584, pp. 495\u2013508. Springer Berlin Heidelberg", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2009}, {"title": "Algorithms for Maximum Satisfiability Using Unsatisfiable Cores", "author": ["J. Marques-Sila", "J. Planes"], "venue": "Gulati, K. (ed.) Advanced Techniques in Logic Synthesis, Optimizations and Applications, pp. 171\u2013182. Springer New York", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2011}, {"title": "Chaff: engineering an efficient SAT solver", "author": ["M.W. Moskewicz", "C.F. Madigan", "Y. Zhao", "L. Zhang", "S. Malik"], "venue": "Proceedings of the 38th annual Design Automation Conference. pp. 530\u2013535. DAC \u201901, ACM, New York, NY, USA", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2001}, {"title": "Propagation via lazy clause generation", "author": ["O. Ohrimenko", "P.J. Stuckey", "M. Codish"], "venue": "Constraints 14, 357\u2013391", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2009}, {"title": "ProGen/max: A New Problem Generator for Different ResourceConstrained Project Scheduling Problems with Minimal and Maximal Time Lags", "author": ["C. Schwindt"], "venue": "Tech. Rep. WIOR 449, Universit\u00e4t Karlsruhe", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1995}], "referenceMentions": [{"referenceID": 11, "context": "We give a brief description of propagation-based solving and LCG, for more details see [12].", "startOffset": 87, "endOffset": 91}, {"referenceID": 10, "context": "Then L is used for conflict analysis [11] to generate a nogood that explains the failure.", "startOffset": 37, "endOffset": 41}, {"referenceID": 4, "context": "Fu and Malik [5] proposed the Msu1 algorithm for MAXSAT solving, later generalized by Ans\u00f3tegui et al.", "startOffset": 13, "endOffset": 16}, {"referenceID": 0, "context": "[1] to Wpm1 for the weighted case.", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "Marques-Silva & Planes [10] proposed Msu3 for solving problems which Wpm1 does not handle efficiently for the above reasons.", "startOffset": 23, "endOffset": 27}, {"referenceID": 3, "context": "A soft intensional constraint Ij is represented as a half-reified constraint [4] of the form ij \u2192 Ij where ij is the indicator variable for the constraint Ij .", "startOffset": 77, "endOffset": 80}, {"referenceID": 1, "context": "To create instances we take each RCPSP/max [2] instance Mi from the sets ubo20, sm j30, ubo50 in PSPLib [7], which are systematically generated by ProGen/max [13], and a proven lower bound li on its minimum makespan, usually the optimal makespan.", "startOffset": 43, "endOffset": 46}, {"referenceID": 6, "context": "To create instances we take each RCPSP/max [2] instance Mi from the sets ubo20, sm j30, ubo50 in PSPLib [7], which are systematically generated by ProGen/max [13], and a proven lower bound li on its minimum makespan, usually the optimal makespan.", "startOffset": 104, "endOffset": 107}, {"referenceID": 12, "context": "To create instances we take each RCPSP/max [2] instance Mi from the sets ubo20, sm j30, ubo50 in PSPLib [7], which are systematically generated by ProGen/max [13], and a proven lower bound li on its minimum makespan, usually the optimal makespan.", "startOffset": 158, "endOffset": 162}, {"referenceID": 2, "context": "A secondary aim is to show that LCG-based unsatisfiable core approaches can be superior to other solving technologies, so we provide best known decompositions to pseudo-Boolean (PB), MAXSAT and MIP, and evaluate them on (i) SAT-based PB solver MiniSAT+ 19/11/2012 [3], (ii) unsatisfiability-based MAXSAT solver MSUnCore 6/6/2011 [10], and (iii) MIP solvers CPLEX 12.", "startOffset": 264, "endOffset": 267}, {"referenceID": 9, "context": "A secondary aim is to show that LCG-based unsatisfiable core approaches can be superior to other solving technologies, so we provide best known decompositions to pseudo-Boolean (PB), MAXSAT and MIP, and evaluate them on (i) SAT-based PB solver MiniSAT+ 19/11/2012 [3], (ii) unsatisfiability-based MAXSAT solver MSUnCore 6/6/2011 [10], and (iii) MIP solvers CPLEX 12.", "startOffset": 329, "endOffset": 333}, {"referenceID": 5, "context": "Specialized solvers [6,8] have been highly successful for soft-constraint CSPs in extensional form.", "startOffset": 20, "endOffset": 25}, {"referenceID": 7, "context": "Specialized solvers [6,8] have been highly successful for soft-constraint CSPs in extensional form.", "startOffset": 20, "endOffset": 25}, {"referenceID": 2, "context": "We are unaware of any other approaches to soft intensionally defined constraint problems beyond branch-and-bound, apart from PBO/WBO [3,9] which support intensionally-defined linear constraints only.", "startOffset": 133, "endOffset": 138}, {"referenceID": 8, "context": "We are unaware of any other approaches to soft intensionally defined constraint problems beyond branch-and-bound, apart from PBO/WBO [3,9] which support intensionally-defined linear constraints only.", "startOffset": 133, "endOffset": 138}], "year": 2013, "abstractText": "Constraint Programming (CP) solvers typically tackle optimization problems by repeatedly finding solutions to a problem while placing tighter and tighter bounds on the solution cost. This approach is somewhat naive, especially for soft-constraint optimization problems in which the soft constraints are mostly satisfied. Unsatisfiable-core approaches to solving soft constraint problems in Boolean Satisfiability (e.g. MAXSAT) force all soft constraints to hold initially. When solving fails they return an unsatisfiable core, as a set of soft constraints that cannot hold simultaneously. Using this information the problem is relaxed to allow certain soft constraint(s) to be violated and solving continues. Since Lazy Clause Generation (LCG) solvers can also return unsatisfiable cores we can adapt the MAXSAT unsatisfiable core approach to CP. We implement the original MAXSAT unsatisfiable core solving algorithms Wpm1, Msu3 in a state-of-the-art LCG solver and show that there exist problems which benefit from this hybrid approach.", "creator": "LaTeX with hyperref package"}}}