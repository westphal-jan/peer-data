{"id": "1306.0095", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Jun-2013", "title": "Universal Induction with Varying Sets of Combinators", "abstract": "Universal induction is a crucial issue in AGI. Its practical applicability can be achieved by the choice of the reference machine or representation of algorithms agreed with the environment. This machine should be updatable for solving subsequent tasks more efficiently. We study this problem on an example of combinatory logic as the very simple Turing-complete reference machine, which enables modifying program representations by introducing different sets of primitive combinators. Genetic programming system is used to search for combinator expressions, which are easily decomposed into sub-expressions being recombined in crossover. Our experiments show that low-complexity induction or prediction tasks can be solved by the developed system (much more efficiently than using brute force); useful combinators can be revealed and included into the representation simplifying more difficult tasks. However, optimal sets of combinators depend on the specific task, so the reference machine should be adaptively chosen in coordination with the search engine.", "histories": [["v1", "Sat, 1 Jun 2013 10:47:23 GMT  (218kb)", "http://arxiv.org/abs/1306.0095v1", "To appear in the proceedings of AGI 2013, Lecture Notes in Artificial Intelligence, Vol. 7999, pp. 88-97, Springer-Verlag, 2013. The final publication is available at link.springer.com"]], "COMMENTS": "To appear in the proceedings of AGI 2013, Lecture Notes in Artificial Intelligence, Vol. 7999, pp. 88-97, Springer-Verlag, 2013. The final publication is available at link.springer.com", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["alexey potapov", "sergey rodionov"], "accepted": false, "id": "1306.0095"}, "pdf": {"name": "1306.0095.pdf", "metadata": {"source": "CRF", "title": "Universal Induction with Varying Sets of Combinators", "authors": ["Alexey Potapov", "Sergey Rodionov"], "emails": ["potapov@aideus.com", "rodionov@aideus.com"], "sections": [{"heading": null, "text": "Universal induction with varying groups of combinators Alexey Potapov1,2, Sergey Rodionov1,31AIDEUS, Russia 2National Research University of Information Technology, Mechanics and Optics, St. Petersburg, Russia 3Aix Marseille Universit\u00e9, CNRS, LAM (Laboratoire d'Astrophysique de Marseille) UMR7326, 13388, Marseille, France {potapov, rodionov} @ aideus.com. Universal induction is a crucial topic in AGI. Its practical applicability can be achieved by selecting the reference machine or displaying algorithms agreed with the environment. This machine should be upgradeable to solve follow-up tasks more efficiently. We examine this problem using the example of combinatorial logic as the very simple Turing-complete Reference Engine, which allows the modification of program representations by introducing different sets of primitive combinators. Genetic programming is used to search for combination expressions that can be easily integrated into the system by decompressing them."}, {"heading": "1 Introduction", "text": "Universal algorithmic induction or prediction based on Kolmogorov's complexity or Solomonoff probability is, however, one of the key components of mathematical models of AGI [1]. Of course, the direct application of pure universal induction is generally impractical. Indeed, some strong biases and biases should be introduced to transform them into efficient pragmatic AGI [2]. At the same time, some cases for which there is no bias can always be applied as such. True AGI should be able to deal with these cases. Universal induction can nevertheless be an essential component of pragmatic AGI. It can even be assumed that it is the basic building block of intelligence. For example, Cortex columns can perform universal induction with low complexity models that are presented even in complex but generally intelligent systems with numerous priors."}, {"heading": "2 Combinatory Logic as the Family of Reference Machines", "text": "In fact, it is such that most of them are able to move to another world, in which they are able to integrate themselves, in which they are able to live, in which they are able to live, in which they are able to live, in which they are able to live, in which they are able to live, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they are living, in which they live in which they are living, in which they are living, in which they live in which they live, in which they live in which they live, in which they live, in which they live in which they live, in which they live in which they live, in which they live, in which they live in which they live, in which they live in which they live in which they live, in which they live, in which they live in which they live, in which they live in which they live"}, {"heading": "3 Genetic Programming with CL", "text": "The common structure of genetic algorithms is well known. It involves creating the initial population, which is usually composed of random candidate solutions, and generating consistent populations using crossover, mutations, and selection.In our implementation of GP with CL, crossover is performed by replacing randomly selected subtrees in the parent candidate solutions (combiner expressions).For example, these expressions can replace S (SSS) S (S (K (SK))))))) (S (SI) (S (SS))) (S (SS))) (S (KK)) (S (KK))) (S (S (S (SS)))))) (underlined subexpressions that S (SSS) S (SSS) (S (K)))) (S (Implementation)) (S (KK)))))) (.The first type of mutations was implemented with a random subset of symbols, the second type being the random substitution of a component."}, {"heading": "4 Experiments", "text": "Let us now describe some of the specific settings used in our experiments. Strings with simple regularities were used, and the shortest combination expressions that produced these strings were searched for. We looked at selecting a best model per data string, but similar results can be achieved within the Solomonoff prediction frame. Population and tournament sizes were equivalent to 2000 and 4000 (other sizes were also tested, but smaller sizes were only suitable for simpler problems). Typically, 500 iterations were sufficient for the convergence of the basic consensus. GP system was executed many times for each task to estimate the likelihood of an optimal solution and variety of end solutions. The main set of terminal symbols included S, K, 0, 1 and combination symbols were not removed from the output strings (results of expression reduction). Results for this set were compared with results for extended sets, including I, C, B, W, or combination symbols without rotators, and others were also tested with 0 and 1."}, {"heading": "Constant strings", "text": "This year it has come to the point where it will be able to put itself at the top of the list, \"he said in an interview with the Deutsche Presse-Agentur.\" We have never made as many mistakes as this year, \"he said.\" We have never made as many mistakes as this year, \"he said.\" We have never made as many mistakes as this year. \""}, {"heading": "Periodic strings", "text": "In fact, most of them will be able to move to another world, in which they are able, in which they are able to integrate, and in which they are able, in which they are able to change the world, and in which they are able to change the world, \"he said in an interview with the New York Times."}, {"heading": "More complex regularities", "text": "In fact, we will be able to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution that will enable us to find a solution."}, {"heading": "Conclusion", "text": "The genetic programming system has been implemented to search for the shortest combinator expressions that generate required binary strings. GP's performance with CL has been evaluated for minimal and extended combinator sets for different induction tasks. Experiments showed that extending the combinator library allows GP to solve more difficult induction tasks, while at the same time reducing performance for some tasks. This reduction is usually much less significant than the benefit for other tasks, but selecting the best combinator set as the top search level can be useful, especially when the basic search for combinator expressions is not exhaustive.Since CL can be treated as different reference machines with different primitive combinators, one can perform the expansion of the combinator library to implement adaptive universal induction. Automation of this process is the main topic for further investigation."}, {"heading": "Acknowledgements", "text": "This work was supported by the Scholarship Council of the President of the Russian Federation (MD1072.2013.9) and the Ministry of Education and Science of the Russian Federation."}], "references": [{"title": "Algorithmic Probability, Heuristic Programming and AGI", "author": ["R. Solomonoff"], "venue": "Baum, E., Hutter, M., Kitzelmann, E. (eds). Advances in Intelligent Systems Research, vol. 10 (proc. 3 Conf. on Artificial General Intelligence), pp. 151\u2013157", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2010}, {"title": "Cognitive Bias for Universal Algorithmic Intelligence", "author": ["A. Potapov", "Rodionov S.", "A. Myasnikov", "B. Galymzhan"], "venue": "SarXiv:1209.4290v1 [cs.AI]", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2012}, {"title": "Binary Space Partitioning as Intrinsic Reward", "author": ["W. Skaba"], "venue": "Proc. of the 5 International Conf. on Artificial General Intelligence, Berlin: Springer-Verlag, pp. 282\u2013291", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Program Representation for General Intelligence", "author": ["M. Looks", "B. Goertzel"], "venue": "B. Goertzel, P. Hitzler, M. Hutter (Eds), Advances in Intelligent Systems Research, vol. 8 (Proc. 2 Conf. on AGI, Arlington, Virginia, USA, March 6-9, 2009), pp. 114\u2013119", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2009}, {"title": "LIDA and a Theory of Mind", "author": ["D. Friedlander", "S. Franklin"], "venue": "Frontiers in Artificial Intelligence and Applications (Proc. 1 AGI Conference), vol. 171, pp. 137\u2013148", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2008}, {"title": "A Computational Approximation to the AIXI Model", "author": ["S. Pankov"], "venue": "Frontiers in Artificial Intelligence and Applications (Proc. 1 AGI Conference), vol. 171, pp. 256\u2013267", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2008}, {"title": "Binary Lambda Calculus and Combinatory Logic", "author": ["J. Tromp"], "venue": "Kolmogorov Complexity and Applications (2006). A Revised Version is available at http://homepages.cwi.nl/ tromp/cl/LC.pdf", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Large Populations are not always the best choice in Genetic Programming", "author": ["M. Fuchs"], "venue": "Proc. of the Genetic and Evolutionary Computation Conference GECCO 1999", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1999}, {"title": "Functional Genetic Programming with Combinators", "author": ["F. Briggs", "M. O\u2019Neill"], "venue": "Proc. of the Third Asian-Pacific workshop on Genetic Programming, pp. 110\u2013127", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2006}, {"title": "Progress in Incremental Machine Learning", "author": ["R. Solomonoff"], "venue": "Technical Report IDSIA-1603,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2003}, {"title": "The New AI: General & Sound & Relevant for Physics", "author": ["J. Schmidhuber"], "venue": "Artificial General Intelligence. Cognitive Technologies, B. Goertzel and C. Pennachin (Eds.). Springer, pp. 175\u2013198", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2007}], "referenceMentions": [{"referenceID": 0, "context": "Universal algorithmic induction or prediction based on Kolmogorov complexity or Solomonoff probability is one of key components of mathematical models of AGI [1].", "startOffset": 158, "endOffset": 161}, {"referenceID": 1, "context": "One should introduce some strong bias and priors to turn it into efficient pragmatic AGI [2].", "startOffset": 89, "endOffset": 92}, {"referenceID": 2, "context": "[3\u20135]).", "startOffset": 0, "endOffset": 5}, {"referenceID": 3, "context": "[3\u20135]).", "startOffset": 0, "endOffset": 5}, {"referenceID": 4, "context": "[3\u20135]).", "startOffset": 0, "endOffset": 5}, {"referenceID": 3, "context": "Choice of the reference machine greatly influences efficiency of universal induction [4], [6].", "startOffset": 85, "endOffset": 88}, {"referenceID": 5, "context": "Choice of the reference machine greatly influences efficiency of universal induction [4], [6].", "startOffset": 90, "endOffset": 93}, {"referenceID": 6, "context": "Additionally, some special programs such as self-interpreters have considerably different lengths within different formalisms [7].", "startOffset": 126, "endOffset": 129}, {"referenceID": 0, "context": "[1], [6]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[1], [6]).", "startOffset": 5, "endOffset": 8}, {"referenceID": 7, "context": "[8]; as far as we know, there are no solutions for induction on binary strings using CL.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "At the same time, some authors claim that \u201ccombinator expressions are an ideal representation for functional genetic programming\u201d, \u201cbecause they are simple in structure, but can represent arbitrary functional programs\u201d, and that \u201cgenetic programming with combinator expressions compares favorably to prior approaches, namely the works of Yu [37], Kirshenbaum [18], Agapitos and Lucas [1], Wong and Leung [35], Koza [20], Langdon [21], and Katayama [17]\u201d (see [9] and references ibid).", "startOffset": 384, "endOffset": 387}, {"referenceID": 8, "context": "At the same time, some authors claim that \u201ccombinator expressions are an ideal representation for functional genetic programming\u201d, \u201cbecause they are simple in structure, but can represent arbitrary functional programs\u201d, and that \u201cgenetic programming with combinator expressions compares favorably to prior approaches, namely the works of Yu [37], Kirshenbaum [18], Agapitos and Lucas [1], Wong and Leung [35], Koza [20], Langdon [21], and Katayama [17]\u201d (see [9] and references ibid).", "startOffset": 459, "endOffset": 462}, {"referenceID": 9, "context": "[10], [11]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[10], [11]).", "startOffset": 6, "endOffset": 10}, {"referenceID": 7, "context": "[8]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "in [8]).", "startOffset": 3, "endOffset": 6}], "year": 2013, "abstractText": "Universal induction is a crucial issue in AGI. Its practical applicability can be achieved by the choice of the reference machine or representation of algorithms agreed with the environment. This machine should be updatable for solving subsequent tasks more efficiently. We study this problem on an example of combinatory logic as the very simple Turing-complete reference machine, which enables modifying program representations by introducing different sets of primitive combinators. Genetic programming system is used to search for combinator expressions, which are easily decomposed into sub-expressions being recombined in crossover. Our experiments show that low-complexity induction or prediction tasks can be solved by the developed system (much more efficiently than using brute force); useful combinators can be revealed and included into the representation simplifying more difficult tasks. However, optimal sets of combinators depend on the specific task, so the reference machine should be adaptively chosen in coordination with the search engine.", "creator": "PScript5.dll Version 5.2"}}}