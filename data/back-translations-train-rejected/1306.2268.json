{"id": "1306.2268", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jun-2013", "title": "Accomplishable Tasks in Knowledge Representation", "abstract": "Knowledge Representation (KR) is traditionally based on the logic of facts, expressed in boolean logic. However, facts about an agent can also be seen as a set of accomplished tasks by the agent. This paper proposes a new approach to KR: the notion of task logical KR based on Computability Logic. This notion allows the user to represent both accomplished tasks and accomplishable tasks by the agent. This notion allows us to build sophisticated KRs about many interesting agents, which have not been supported by previous logical languages.", "histories": [["v1", "Fri, 7 Jun 2013 04:42:02 GMT  (8kb)", "http://arxiv.org/abs/1306.2268v1", "arXiv admin note: substantial text overlap witharXiv:1305.2004"]], "COMMENTS": "arXiv admin note: substantial text overlap witharXiv:1305.2004", "reviews": [], "SUBJECTS": "cs.AI cs.CL", "authors": ["keehang kwon", "mi-young park"], "accepted": false, "id": "1306.2268"}, "pdf": {"name": "1306.2268.pdf", "metadata": {"source": "CRF", "title": "Accomplishable Tasks in Knowledge Representation", "authors": ["Keehang Kwon", "Mi-Young Park"], "emails": ["}@dau.ac.kr"], "sections": [{"heading": null, "text": "ar Xiv: 130 6.22 68v1 [cs.AI] 7J unThis paper proposes a new approach for KR: the concept of logical task KR based on Computability Logic. This notion allows the user to represent both completed tasks and achievable tasks by the agent. This notion allows us to create complex KRs about many interesting agents that were not supported by previous logical languages.Keywords: tasks, knowledge representation, agents, arithmetic logic."}, {"heading": "1 Introduction", "text": "Traditional acquaintance with knowledge representation (KR) refers to Boolean logic, including classical logic, modal logic and linear logic [3, 4]. Within this framework, knowledge is expressed as the logic of facts. Many KRs in textbooks and essays on artificial intelligence [8] have been written in Boolean logic. However, Boolean logic is too simple to represent an important aspect of knowledge, i.e. tasks that can be performed by the agent. In particular, Boolean logic is cumbersome way of representing achievable tasks of many interesting agents. It is possible to expand knowledge about an agent by presenting a task / game logic called compatibility logic (CL) [6, 7], a powerful logic built around the concept of success / failure. CL is a logic of the task in which solvable tasks can be easily presented."}, {"heading": "2 Task Logical KR", "text": "A task of logical knowledge representation and reasoning (KRR) is formc: T \u2212 \u2192 T1where c: T is an agent that can perform task T and T1 is a query. In traditional developments of KR, T is limited to facts or tasks performed. To define the class of tasks accomplishable, we need a specification language. An ideal language would support an optimal translation of the tasks. We argue that a reasonable, high-level translation of the tasks can be achieved via compatibility logic (CL) [5, 6]. An advantage of CL over other formalisms such as sequential pseudocode, linear logic [3], is that it can optimally encode a number of essential tasks."}, {"heading": "3 Examples", "text": "The idea of CL makes KR versatile compared to traditional approaches. As an example, we present an agent who can calculate the factor function. (1) This task can be defined as follows: (1) c can either claim that fac (0, 1) or (2) fac (X, Y) can be replaced by fac (X + 1, XY + Y). (2) It is shown that the above description can be translated into CL formulas. (2) The following is a CL translation of the above knowledge, in which the reusable action is preceded by the comment that our version is used to dynamically create / destroy facts. (2) It is shown that the above description can be translated into CL formulas. (2) The following is a CL translation of the above knowledge, where the reusable action is preceded by the reusable action. (3) Note that our version is used to create facts / destroy facts (2) that produces facts / dynamically."}, {"heading": "4 Conclusion", "text": "Knowledge representation is traditionally based on the logic of facts, expressed in Boolean logic. In this paper, a new, task-logical approach to KR was proposed, which allows us to create complex KRs using many interesting agents that were not supported by previous Boolean logical languages. Our ultimate interest is in a procedure for performing calculations of the kind described above. Therefore, it is important to implement this CL interpreter efficiently, using some techniques described in [1, 2, 4]."}, {"heading": "5 Acknowledgements", "text": "This work was supported by the Dong-A University Research Fund."}], "references": [{"title": "Design and implementation of linear logic programming languages", "author": ["M. Banbara"], "venue": "Ph.D. Dissertation, Kobe University,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2002}, {"title": "Efficient resource management for linear logic proof search", "author": ["Iliano Cervesato", "Joshua S. Hodas", "Frank Pfenning"], "venue": "In Proceedings of the 1996 Workshop on Extensions of Logic Programming,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1996}, {"title": "Logic programming in a fragment of intuitionistic linear logic", "author": ["Joshus Hodas", "Dale Miller"], "venue": "Journal of Information and Computation,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1994}, {"title": "The logic of tasks", "author": ["G. Japaridze"], "venue": "Annals of Pure and Applied Logic,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}, {"title": "Introduction to computability logic", "author": ["G. Japaridze"], "venue": "Annals of Pure and Applied Logic,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2003}, {"title": "Sequential operators in computability logic", "author": ["G. Japaridze"], "venue": "Information and Computation,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2008}, {"title": "Extending Logicweb via Hereditary Harrop Formulas", "author": ["K. Kwon", "D. Kang"], "venue": "IEICE Transactions on Information and Systems, vol.E91-D, No.6,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2008}, {"title": "A logic programming approach to manipulating formulas and programs", "author": ["D. Miller", "G. Nadathur"], "venue": "In IEEE Symposium on Logic Programming,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1987}, {"title": "\u03bbProlog version 2.7. Distributed in C-Prolog and Quintus Prolog source code", "author": ["D. Miller", "G. Nadathur"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1988}, {"title": "Programming with higher-order logic", "author": ["D. Miller", "G. Nadathur"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}], "referenceMentions": [{"referenceID": 2, "context": "Traditional acquaintance with knowledge representation (KR) relates to the boolean logic including classical logic, modal logic and linear logic [3, 4].", "startOffset": 145, "endOffset": 151}, {"referenceID": 6, "context": "Many KRs in AI textbooks and papers [8] have been written in boolean logic.", "startOffset": 36, "endOffset": 39}, {"referenceID": 4, "context": "It is possible to expand knowledge about an agent by employing a task/game logic called computability logic (CL) [6, 7], a powerful logic which is built around the notion of success/failure.", "startOffset": 113, "endOffset": 119}, {"referenceID": 5, "context": "It is possible to expand knowledge about an agent by employing a task/game logic called computability logic (CL) [6, 7], a powerful logic which is built around the notion of success/failure.", "startOffset": 113, "endOffset": 119}, {"referenceID": 3, "context": "We argue that a reasonable, high-level translation of the tasks can be achieved via computability logic(CL)[5, 6].", "startOffset": 107, "endOffset": 113}, {"referenceID": 4, "context": "We argue that a reasonable, high-level translation of the tasks can be achieved via computability logic(CL)[5, 6].", "startOffset": 107, "endOffset": 113}, {"referenceID": 4, "context": "We point the reader to [6, 7] to find out more about the whole calculus of CL.", "startOffset": 23, "endOffset": 29}, {"referenceID": 5, "context": "We point the reader to [6, 7] to find out more about the whole calculus of CL.", "startOffset": 23, "endOffset": 29}, {"referenceID": 9, "context": "We will present an operational semantics for this language based on [11].", "startOffset": 68, "endOffset": 72}, {"referenceID": 7, "context": "We point the reader to [9, 10, 11] for more examples.", "startOffset": 23, "endOffset": 34}, {"referenceID": 8, "context": "We point the reader to [9, 10, 11] for more examples.", "startOffset": 23, "endOffset": 34}, {"referenceID": 9, "context": "We point the reader to [9, 10, 11] for more examples.", "startOffset": 23, "endOffset": 34}, {"referenceID": 0, "context": "Hence it is important to realize this CL interpreter in an efficient way, taking advantages of some techniques discussed in [1, 2, 4].", "startOffset": 124, "endOffset": 133}, {"referenceID": 1, "context": "Hence it is important to realize this CL interpreter in an efficient way, taking advantages of some techniques discussed in [1, 2, 4].", "startOffset": 124, "endOffset": 133}, {"referenceID": 2, "context": "Hence it is important to realize this CL interpreter in an efficient way, taking advantages of some techniques discussed in [1, 2, 4].", "startOffset": 124, "endOffset": 133}], "year": 2013, "abstractText": "Knowledge Representation (KR) is traditionally based on the logic of facts, expressed in boolean logic. However, facts about an agent can also be seen as a set of accomplished tasks by the agent. This paper proposes a new approach to KR: the notion of task logical KR based on Computability Logic. This notion allows the user to represent both accomplished tasks and accomplishable tasks by the agent. This notion allows us to build sophisticated KRs about many interesting agents, which have not been supported by previous logical languages.", "creator": "LaTeX with hyperref package"}}}