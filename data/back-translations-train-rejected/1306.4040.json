{"id": "1306.4040", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Jun-2013", "title": "An Algorithm to Find Optimal Attack Paths in Nondeterministic Scenarios", "abstract": "As penetration testing frameworks have evolved and have become more complex, the problem of controlling automatically the pentesting tool has become an important question. This can be naturally addressed as an attack planning problem. Previous approaches to this problem were based on modeling the actions and assets in the PDDL language, and using off-the-shelf AI tools to generate attack plans. These approaches however are limited. In particular, the planning is classical (the actions are deterministic) and thus not able to handle the uncertainty involved in this form of attack planning.", "histories": [["v1", "Mon, 17 Jun 2013 23:26:23 GMT  (91kb,D)", "http://arxiv.org/abs/1306.4040v1", "ACM Workshop on Artificial Intelligence and Security (AISec 2011), at ACM CCS Conference 2011"]], "COMMENTS": "ACM Workshop on Artificial Intelligence and Security (AISec 2011), at ACM CCS Conference 2011", "reviews": [], "SUBJECTS": "cs.CR cs.AI", "authors": ["carlos sarraute", "gerardo richarte", "jorge lucangeli obes core security technologies", "itba", "uba )"], "accepted": false, "id": "1306.4040"}, "pdf": {"name": "1306.4040.pdf", "metadata": {"source": "CRF", "title": "An Algorithm to Find Optimal Attack Paths in Nondeterministic Scenarios", "authors": ["Carlos Sarraute", "Gerardo Richarte", "Jorge Luc\u00e1ngeli Obes"], "emails": ["carlos@corest.com", "gera@corest.com", "jlucangeli@dc.uba.ar"], "sections": [{"heading": "Categories and Subject Descriptors", "text": "C.2.0 [Computer Communication Networks]: General - Security and Protection; I.2.8 [Artificial Intelligence]: Problem Solving, Control Methods and Search - Execution, Formation and Generation of Plans; K.6.5 [Management of Computing and Information Systems]: Security and Protection - Unauthorized Access; K.6.m [Management of Computing and Information Systems]: Miscellaneous - SecurityPermission to make digital or printed copies of all or part of this work for personal or classroom use is granted without charge, provided that copies are not made or distributed for profit or commercial purposes and that copies bear this notice and full quotation on the first page. Otherwise copying, republishing, publishing on servers or redistributing to lists requires prior express permission and / or a fee. AISec '11, October 21, 2011, Chicago, Illinois, USA. Copyright 2011 ACM 978-1-4503-03-1 / 10... $10.00."}, {"heading": "General Terms", "text": ""}, {"heading": "Keywords", "text": "Network security, exploit, automated pentesting, attack planning"}, {"heading": "1. INTRODUCTION", "text": "This year, it has reached the stage where it will be able to take the lead."}, {"heading": "2. THE ATTACK MODEL", "text": "We provide below some background information on the conceptual model of computer attacks that we use, for further details refer to [4, 11, 22, 24]. This model is based on the concepts of assets, targets, agents and actions. In this description, an attack includes a series of agents that perform actions, obtain assets (which may be information or actual changes in the real network and systems) to achieve a number of objectives. An asset can represent everything an attacker needs to receive in the course of an attack, including the actual target. Examples of assets: information about the operating system (OS) of a host H; TCP connectivity with host H on port P; an agent installed on a particular host H. To install an agent means breaking into a host, taking control of its resources, and finally using it as a hub to continue the attack by performing new actions on that host. The basic steps are the actions that form the attack."}, {"heading": "Deterministic Actions with Numerical Effects", "text": "In the deterministic case, the actions and assets that constitute a specific planning problem can be successfully represented in the PDDL language, an idea proposed in [26] and further analyzed in [16]; the assets are presented as PDDL predicates, and the actions are translated as PDDL operators; the authors show how this PDDL representation allowed them to integrate a penetration testing tool with an external planner and generate attack plans in realistic scenarios; the planners used - Metric-FF [13] and SGPlan [7] - are state-of-the-art planners capable of handling numerical effects.Figure 1 shows an example of a PDDL action: an exploit for the IBM-Tivoli vulnerability that will attempt to install an agent on the target host from an agent (s) previously installed on the source host."}, {"heading": "Actions\u2019 Costs", "text": "The execution of an action has multi-dimensional costs. Below are some values that can be measured (and optimized in the event of an attack): Execution time: Average runtime of the action. Network traffic: The amount of traffic sent over the network increases the level of noise produced. IDS detection: protocol lines and warnings triggered by the execution of the action increase the noise produced. Host resources: Execution of actions consumes resources of both the local and the remote host in terms of CPU, RAM, disk usage, etc. Attack traceability: Depends on the number of incidents and topological factors. Zero-day exploits: exploits for vulnerabilities that are not publicly known, are a valuable resource that should only be used when other exploits have failed (the attacker usually wants to minimize the use of \"0 days\"). In our experiments, we have decided to optimize the expected execution time that can be used to minimize the execution time associated with a puncture test that is normally performed."}, {"heading": "Probabilistic Actions", "text": "This year it is more than ever before in the history of the city."}, {"heading": "Predefined Strategies", "text": "s expertise into the planning system (see the opening moves in chess), an idea that has been used in the automation of pentesting tools, see [26]. Consider, for example, an attacker who has installed an agent with low privileges on a host running Windows XP and whose goal is to gain system privileges on that host. An attacker has a set of n predefined strategies to perform this privilege escalation (see fig. 3). An example of a strategy is: refine knowledge of the OS version; verify that the output is at home or professional, installed with SP2; get users and groups; then start the local Microsoft NMesserCall exploit, which executes the MesserCall actions."}, {"heading": "Multiple Groups of Actions", "text": "The difference with problem 2 is that we now need to specify the order of execution within each group. Figure 4 shows an example of this situation. A system agent can be installed by executing a remote exploit, client-side exploit, or SQL injection in a web application. Each of these actions has requirements that can be met by the actions displayed on the second level. For example, before executing the remote exploit, the attacker must execute a host sample (to verify connectivity with the target host), port probe (to verify that the target port of the exploit is open), and an OS detection module (to verify the OS host host host host host host host host host host host host host)."}, {"heading": "5. USING THE PRIMITIVES IN AN ATTACK TREE", "text": "We apply the primitives below the select and combine to a probabilistic attack tree in which the nodes are limited by AND relations and OR relations. The tree consists of two types of nodes distributed in alternating layers of asset nodes and action nodes (see figure 5)."}, {"heading": "Asset", "text": "An asset node is connected by an OR relationship to all actions that provide this asset: For example, an agent asset is connected to the exploit actions that can install an agent on the target host. An action node is connected to its requirements by an AND relationship: The local exploit Microsoft NtUserMessageCall Kernel Privilege Escalation requires an agent asset (with low privileges) on the target host H and a Windows XP OS asset for H.The proposed solution is obtained by combining the primitives from previous sections. In the AND-OR tree, the leaves that are limited by an AND relationship can be considered as a single node. In effect, this group G can be considered as a single action using the Combine Primitive with compound probability of success PG and execution time TG. The leaves that are limited by an AND-OR relationship can also (temporarily) be considered as a single node."}, {"heading": "Constructing the Tree", "text": "To ensure that the result is a tree and not a DAG, we assume an additional assumption of independence: the assets required for each action are considered independent (i.e., if an asset is required by two different actions, it appears twice in the tree).This gives us an AND-OR tree with alternating levels of asset nodes and action nodes (like the one in Fig. 5).The only actions added are exploits, TCP / UDP connectivity checks, and OS detection modules. These actions do not have requirements values that have already appeared in the tree, in particular, the tree has only one agent asset (the root node of the tree).Thus, by constructing it we can be sure that no loops will appear, and that agent, the depth of the tree that we consider to be very difficult to execute."}, {"heading": "6. THE GRAPH OF DISTINGUISHED ASSETS", "text": "In this section, we use the previous primitives to create an algorithm for attack planning in arbitrary networks, which increases the likelihood that we will make an additional assumption of independence between machines. First, we distinguish a class of assets, namely the assets associated with agents. We refer to them as distinct assets. At the PDDL level, the predicates associated with the agents become a separate class.Planning occurs at two different levels of abstraction: in the first level, we evaluate the cost of compromising a target of distinguishable assets from a fixed source. More specifically, we calculate the costs and probabilities of obtaining a target agent of given source agents.At this level, the attack plan does not need to include a third agent. At the first level, the algorithm is designed to construct the attack tree and calculate an attack plan, as described in Section 5.On the second level, we build a directed graph G = (V, E) in which the nodes of distinguishable assets are preserved (we will use in the scenario in which the agents)."}, {"heading": "7. OUR IMPLEMENTATION", "text": "Our main goal was to build a probability planner capable of solving scenarios with 500 machines, which was the limit reached with classical (deterministic) planning solutions in [16]. We also wanted to tame the memory complexity that was the limiting factor. The planner was integrated into the pentesting framework Core Impact, using the procedures previously developed for the work. [16] The architecture of this solution is in Figure 6.This planner solves the planning problem by dividing it into two levels, as in Section 6. At a higher level, a graph representation of target objects is created using the previously developed procedures [16]. More specifically, the architecture of this solution is in Figure 6.This planner solves the planning problem by dividing it into two levels, as in Section 6. At a higher level, a graph representation of target objects is created."}, {"heading": "Testing and Performance", "text": "The experiments were conducted on a machine with an Intel Core2 Duo CPU at 2.4 GHz and 8 GB of RAM. We focused on the number of machines M on the attacked network. We created a network consisting of five subnets with different numbers of machines, all connected to a main network to which the attacker initially has access. Figure 7 shows the memory usage of this planning solution, which clearly grows with M. Our current implementation manages to shift the network size limit to 1000 machines, and brings memory usage under control. For M = 1000 we use less than 1 GB of6In contrast, the hard limit was memory: in scenarios with 500 machines we ran out of memory with 8 GB of RAM. Memory growth was clearly RAM, with a scheduler written entirely in Python (not optimized in terms of memory usage).Figure."}, {"heading": "8. RELATED WORK", "text": "Early work to solve attack curves relied on model verification techniques [15, 27] with their inherent scalability limitations; or on monotonicity assumptions [2, 18, 19] that were unable to express situations where compromised resources were lost due to crashes, detection, or other unforeseen circumstances. [5] The first application of planning techniques and PDDL security solutions was [5], but this application did not focus on finding actual attack paths or conducting penetration tests. [12] Attack paths are generated from the PDDL description of networks, hosts, and exploits, although the scenarios examined do not cover realistic yardsticks. Previous work by the authors [16] addresses this limitation by solving scenarios with up to 500 machines and feeding the generated attack plans into a penetration test tool, in order not to introduce a penetration tool into this probability work [9]."}, {"heading": "9. SUMMARY AND FUTURE WORK", "text": "We have shown in this paper an extension of the established attack graph models, which contain probabilistic effects, and numerical effects (e.g. the expected duration of the actions).This model is more realistic than the deterministic setting, but it leads to additional difficulties in planning. We have shown that under certain assumptions an efficient algorithm exists, which calculates the number of attack plans with the computing power O (n logn), where n is the number of actions and assets in case of an attack (between two fixed hosts), and where M is the number of machines in case of a network."}, {"heading": "Acknowledgments", "text": "Thanks to Ariel Futoransky and Ariel Waissbein for their contributions and insightful discussions."}, {"heading": "10. REFERENCES", "text": "[1] D. Aitel. An introduction to MOSDEF. In Black HatBriefings, USA, 2004. [2] P. Ammann, D. Wijesekera, and S. Kaushik. Scalable, graph-based network vulnerability analysis. In Proceedings of the 9th ACM Conference on Computer and Communications Security, pp. 217-224. ACM New York, NY, USA, 2002. [3] I. Arce and G. McGraw. Attack systems is a good idea. IEEE Computer Society - Security & Privacy Magazine, 2 (4), 2004. [4] I. Arce and G. Richarte. State of the art security from an attacker's viewpoint. In PacSec Conference, Tokyo, Japan, 2003.7The OpenSSL keys generated in vulnerable Debians only depends on the PID. Since Secure Shell usually generates the key in a new installation, PIDs between 2,000 and 5,000 are more probable than the others. [5] M. Boddy, J. Gohde, T. Jaigh, A."}], "references": [{"title": "An introduction to MOSDEF", "author": ["D. Aitel"], "venue": "Black Hat Briefings, USA", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2004}, {"title": "Scalable", "author": ["P. Ammann", "D. Wijesekera", "S. Kaushik"], "venue": "graph-based network vulnerability analysis. In Proceedings of the 9th ACM Conference on Computer and Communications Security, pages 217\u2013224. ACM New York, NY, USA", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2002}, {"title": "Why attacking systems is a good idea", "author": ["I. Arce", "G. McGraw"], "venue": "IEEE Computer Society - Security & Privacy Magazine, 2(4)", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2004}, {"title": "State of the art security from an attacker\u2019s viewpoint", "author": ["I. Arce", "G. Richarte"], "venue": "PacSec Conference, Tokyo, Japan", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2003}, {"title": "Course of action generation for cyber security using classical planning", "author": ["M.S. Boddy", "J. Gohde", "T. Haigh", "S.A. Harp"], "venue": "Proc. of ICAPS\u201905", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "Security Power Tools", "author": ["B. Burns", "D. Killion", "N. Beauchesne", "E. Moret", "J. Sobrier", "M. Lynn", "E. Markham", "C. Iezzoni", "P. Biondi", "J.S. Granick", "S. Manzuik", "P. Guersch"], "venue": "O\u2019Reilly Media", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2007}, {"title": "Temporal planning using subgoal partitioning and resolution in SGPlan", "author": ["Y. Chen", "B.W. Wah", "C. Hsu"], "venue": "J. of Artificial Intelligence Research, 26:369", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2006}, {"title": "Probabilistic planning via heuristic forward search and weighted model counting", "author": ["C. Domshlak", "J. Hoffmann"], "venue": "Journal of Artificial Intelligence Research, 30(1):565\u2013620", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2007}, {"title": "Fidius: Intelligent support for vulnerability testing", "author": ["D. Elsbroek", "D. Kohlsdorf", "D. Menke", "L. Meyer"], "venue": "Working Notes for the 2011 IJCAI Workshop on Intelligent Security (SecArt), page 58", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "PDDL2", "author": ["M. Fox", "D. Long"], "venue": "1: An extension to PDDL for expressing temporal planning domains. Journal of Artificial Intelligence Research, 20", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2003}, {"title": "Building computer network attacks", "author": ["A. Futoransky", "L. Notarfrancesco", "G. Richarte", "C. Sarraute"], "venue": "Technical report, CoreLabs", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2003}, {"title": "An intelligent technique for generating minimal attack graph", "author": ["N. Ghosh", "S.K. Ghosh"], "venue": "First Workshop on Intelligent Security (Security and Artificial Intelligence) (SecArt \u201909)", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2009}, {"title": "Extending FF to numerical state variables", "author": ["J. Hoffmann"], "venue": "Proceedings of the 15th European Conference on Artificial Intelligence (ECAI-02), pages 571\u2013575", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2002}, {"title": "and B", "author": ["S. Jajodia", "S. Noel"], "venue": "O\u2019Berry. Topological analysis of network attack vulnerability. Managing Cyber Threats: Issues, Approaches and Challenges, pages 248\u2013266", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2005}, {"title": "Two formal analyses of attack graphs", "author": ["S. Jha", "O. Sheyner", "J. Wing"], "venue": "15th IEEE Computer Security Foundations Workshop, 2002. Proceedings, pages 49\u201363", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2002}, {"title": "Attack Planning in the Real World", "author": ["J. Lucangeli", "C. Sarraute", "G. Richarte"], "venue": "Workshop on Intelligent Security ", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2010}, {"title": "Penetration testing automation", "author": ["H.D. Moore"], "venue": "SANS Penetration Testing Summit", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2010}, {"title": "Advances in Topological Vulnerability Analysis", "author": ["S. Noel", "M. Elder", "S. Jajodia", "P. Kalapa", "S. O\u0160Hare", "K. Prole"], "venue": "Proceedings of the 2009 Cybersecurity Applications & Technology Conference for Homeland Security, pages 124\u2013129. IEEE Computer Society", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2009}, {"title": "Understanding complex network attack graphs through clustered adjacency matrices", "author": ["S. Noel", "S. Jajodia"], "venue": "Proceedings of the 21st Annual Computer Security Applications Conference, pages 160\u2013169", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2005}, {"title": "A graph-based system for network-vulnerability analysis", "author": ["C.A. Phillips", "L.P. Swiler"], "venue": "Workshop on New Security Paradigms, pages 71\u201379", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1998}, {"title": "Virtualization in software development and QA", "author": ["M. Picorelli"], "venue": "WMWorld", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2006}, {"title": "Modern intrusion practices", "author": ["G. Richarte"], "venue": "Black Hat Briefings", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2003}, {"title": "Using model checking to analyze network vulnerabilities", "author": ["R. Ritchey", "P. Ammann"], "venue": "IEEE Symposium on Security and Privacy, pages 156\u2013165. IEEE Computer Society", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2000}, {"title": "Zombie 2.0", "author": ["F. Russ", "D. Tiscornia"], "venue": "In Hack.lu Conference,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2007}, {"title": "and J", "author": ["C. Sarraute", "O. Buffet"], "venue": "Hoffmann. Penetration testing == POMDP planning? In SecArt\u201911", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2011}, {"title": "Advances in automated attack planning", "author": ["C. Sarraute", "A. Weil"], "venue": "PacSec Conference, Tokyo, Japan", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2008}, {"title": "Automated generation and analysis of attack graphs", "author": ["O. Sheyner", "J. Haines", "S. Jha", "R. Lippmann", "J. Wing"], "venue": "IEEE Symposium on Security and Privacy, pages 273\u2013284. IEEE Computer Society", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2002}, {"title": "PPDDL 1.0: The language for the probabilistic part of IPC-4", "author": ["H. Younes", "M. Littman"], "venue": "In Proc. International Planning Competition,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2004}], "referenceMentions": [{"referenceID": 5, "context": "Penetration testing frameworks have been developed to facilitate the work of penetration testers and make the assessment of network security more accessible to nonexpert users [6].", "startOffset": 176, "endOffset": 179}, {"referenceID": 2, "context": "These tools have the ability to launch actual exploits for vulnerabilities, contributing to expose risk by conducting an attack in the same way an external attacker would [3].", "startOffset": 171, "endOffset": 174}, {"referenceID": 4, "context": "as the \u201cCyber Security\u201d domain [5].", "startOffset": 31, "endOffset": 34}, {"referenceID": 15, "context": "proposed a solution based on modeling the actions and assets in the PDDL language, and using off-the-shelf planners to generate attack plans [16].", "startOffset": 141, "endOffset": 145}, {"referenceID": 9, "context": "Refer to [10] for a specification of PDDL 2.", "startOffset": 9, "endOffset": 13}, {"referenceID": 24, "context": "Recently, a model based on partially observable Markov decision processes (POMDP) was proposed, in part by one of the authors [25].", "startOffset": 126, "endOffset": 130}, {"referenceID": 24, "context": "In this paper, we take a different direction: the uncertainty about the results of the actions is modeled as a probability of success of each action, whereas in [25] the uncertainty is modeled as a distribution of probabilities over the states.", "startOffset": 161, "endOffset": 165}, {"referenceID": 3, "context": "We provide below some background on the conceptual model of computer attacks that we use, for more details refer to [4, 11, 22, 24].", "startOffset": 116, "endOffset": 131}, {"referenceID": 10, "context": "We provide below some background on the conceptual model of computer attacks that we use, for more details refer to [4, 11, 22, 24].", "startOffset": 116, "endOffset": 131}, {"referenceID": 21, "context": "We provide below some background on the conceptual model of computer attacks that we use, for more details refer to [4, 11, 22, 24].", "startOffset": 116, "endOffset": 131}, {"referenceID": 23, "context": "We provide below some background on the conceptual model of computer attacks that we use, for more details refer to [4, 11, 22, 24].", "startOffset": 116, "endOffset": 131}, {"referenceID": 1, "context": "The major differences between the attack model used in this work and the attack graphs used in [2, 14, 15, 20, 23, 27] are twofold: to improve the realism of the model, we consider that the actions can produce numerical effects (for example, the expected running time of each action); and that the actions have a probability of success (which models the uncertainty about the results of the action).", "startOffset": 95, "endOffset": 118}, {"referenceID": 13, "context": "The major differences between the attack model used in this work and the attack graphs used in [2, 14, 15, 20, 23, 27] are twofold: to improve the realism of the model, we consider that the actions can produce numerical effects (for example, the expected running time of each action); and that the actions have a probability of success (which models the uncertainty about the results of the action).", "startOffset": 95, "endOffset": 118}, {"referenceID": 14, "context": "The major differences between the attack model used in this work and the attack graphs used in [2, 14, 15, 20, 23, 27] are twofold: to improve the realism of the model, we consider that the actions can produce numerical effects (for example, the expected running time of each action); and that the actions have a probability of success (which models the uncertainty about the results of the action).", "startOffset": 95, "endOffset": 118}, {"referenceID": 19, "context": "The major differences between the attack model used in this work and the attack graphs used in [2, 14, 15, 20, 23, 27] are twofold: to improve the realism of the model, we consider that the actions can produce numerical effects (for example, the expected running time of each action); and that the actions have a probability of success (which models the uncertainty about the results of the action).", "startOffset": 95, "endOffset": 118}, {"referenceID": 22, "context": "The major differences between the attack model used in this work and the attack graphs used in [2, 14, 15, 20, 23, 27] are twofold: to improve the realism of the model, we consider that the actions can produce numerical effects (for example, the expected running time of each action); and that the actions have a probability of success (which models the uncertainty about the results of the action).", "startOffset": 95, "endOffset": 118}, {"referenceID": 26, "context": "The major differences between the attack model used in this work and the attack graphs used in [2, 14, 15, 20, 23, 27] are twofold: to improve the realism of the model, we consider that the actions can produce numerical effects (for example, the expected running time of each action); and that the actions have a probability of success (which models the uncertainty about the results of the action).", "startOffset": 95, "endOffset": 118}, {"referenceID": 25, "context": "This idea was proposed in [26] and further analyzed in [16].", "startOffset": 26, "endOffset": 30}, {"referenceID": 15, "context": "This idea was proposed in [26] and further analyzed in [16].", "startOffset": 55, "endOffset": 59}, {"referenceID": 12, "context": "The planners used \u2013 Metric-FF [13] and SGPlan [7] \u2013 are state-of-the-art planners able to handle numerical effects.", "startOffset": 30, "endOffset": 34}, {"referenceID": 6, "context": "The planners used \u2013 Metric-FF [13] and SGPlan [7] \u2013 are state-of-the-art planners able to handle numerical effects.", "startOffset": 46, "endOffset": 49}, {"referenceID": 20, "context": "More specifically, in Core\u2019s testing lab there are more than 748 virtual machines with different OS and installed applications, where all the exploits of Core Impact are executed every night [21].", "startOffset": 191, "endOffset": 195}, {"referenceID": 7, "context": "Using general purpose probabilistic planners did not work as in the deterministic case; for instance, we experimented with Probabilistic-FF [8] with poor results, since it was able to find plans in only very small cases.", "startOffset": 140, "endOffset": 143}, {"referenceID": 0, "context": "As of July 2011, Immunity Canvas [1] doesn\u2019t provide automated execution of exploits; Metasploit [17] has a feature called \u201cautopwn\u201d that launches all the exploits available for the target ports in arbitrary order; Core Impact Pro launches first a set of \u201cfast\u201d exploits and then \u201cbrute-force\u201d exploits [26], but arbitrary order is used within each set; Core Insight Enterprise uses planning techniques based on a PDDL description [16] that takes into account the execution time but not the probability of success of the exploits.", "startOffset": 33, "endOffset": 36}, {"referenceID": 16, "context": "As of July 2011, Immunity Canvas [1] doesn\u2019t provide automated execution of exploits; Metasploit [17] has a feature called \u201cautopwn\u201d that launches all the exploits available for the target ports in arbitrary order; Core Impact Pro launches first a set of \u201cfast\u201d exploits and then \u201cbrute-force\u201d exploits [26], but arbitrary order is used within each set; Core Insight Enterprise uses planning techniques based on a PDDL description [16] that takes into account the execution time but not the probability of success of the exploits.", "startOffset": 97, "endOffset": 101}, {"referenceID": 25, "context": "As of July 2011, Immunity Canvas [1] doesn\u2019t provide automated execution of exploits; Metasploit [17] has a feature called \u201cautopwn\u201d that launches all the exploits available for the target ports in arbitrary order; Core Impact Pro launches first a set of \u201cfast\u201d exploits and then \u201cbrute-force\u201d exploits [26], but arbitrary order is used within each set; Core Insight Enterprise uses planning techniques based on a PDDL description [16] that takes into account the execution time but not the probability of success of the exploits.", "startOffset": 303, "endOffset": 307}, {"referenceID": 15, "context": "As of July 2011, Immunity Canvas [1] doesn\u2019t provide automated execution of exploits; Metasploit [17] has a feature called \u201cautopwn\u201d that launches all the exploits available for the target ports in arbitrary order; Core Impact Pro launches first a set of \u201cfast\u201d exploits and then \u201cbrute-force\u201d exploits [26], but arbitrary order is used within each set; Core Insight Enterprise uses planning techniques based on a PDDL description [16] that takes into account the execution time but not the probability of success of the exploits.", "startOffset": 431, "endOffset": 435}, {"referenceID": 25, "context": "This idea has been used in the automation of pentesting tools, see [26].", "startOffset": 67, "endOffset": 71}, {"referenceID": 27, "context": "This planner takes as input a description of the scenario in the PPDDL language, an extension of PDDL for expressing probabilistic effects [28].", "startOffset": 139, "endOffset": 143}, {"referenceID": 15, "context": "Our main objective was to build a probabilistic planner able to solve scenarios with 500 machines, which was the limit reached with classical (deterministic) planning solutions in [16].", "startOffset": 180, "endOffset": 184}, {"referenceID": 15, "context": "The planner was integrated with the pentesting framework Core Impact, using the procedures previously developed for the work [16].", "startOffset": 125, "endOffset": 129}, {"referenceID": 15, "context": "By contrast, in [16] the hard limit was memory: in scenarios with 500 machines we ran out of memory in a computer with 8 GB of RAM.", "startOffset": 16, "endOffset": 20}, {"referenceID": 15, "context": "8 shows the growth of solver running time, which seems clearly quadratic, whereas in [16] the growth was exponential.", "startOffset": 85, "endOffset": 89}, {"referenceID": 24, "context": "As a comparison, in another approach that accounts for the uncertainty about the attacker\u2019s actions [25], the authors use off-the-shelf solvers, managing to solve scenarios with up to 7 machines \u2013 and are thus still far from the network sizes reached here.", "startOffset": 100, "endOffset": 104}, {"referenceID": 14, "context": "Early work on attack graph solving relied on model checking techniques [15, 27], with their inherent scalability restrictions; or on monotonicity assumptions [2, 18, 19] that are not able to express situations in which compromised resources are lost due to crashes, detection or other unforeseen circumstances.", "startOffset": 71, "endOffset": 79}, {"referenceID": 26, "context": "Early work on attack graph solving relied on model checking techniques [15, 27], with their inherent scalability restrictions; or on monotonicity assumptions [2, 18, 19] that are not able to express situations in which compromised resources are lost due to crashes, detection or other unforeseen circumstances.", "startOffset": 71, "endOffset": 79}, {"referenceID": 1, "context": "Early work on attack graph solving relied on model checking techniques [15, 27], with their inherent scalability restrictions; or on monotonicity assumptions [2, 18, 19] that are not able to express situations in which compromised resources are lost due to crashes, detection or other unforeseen circumstances.", "startOffset": 158, "endOffset": 169}, {"referenceID": 17, "context": "Early work on attack graph solving relied on model checking techniques [15, 27], with their inherent scalability restrictions; or on monotonicity assumptions [2, 18, 19] that are not able to express situations in which compromised resources are lost due to crashes, detection or other unforeseen circumstances.", "startOffset": 158, "endOffset": 169}, {"referenceID": 18, "context": "Early work on attack graph solving relied on model checking techniques [15, 27], with their inherent scalability restrictions; or on monotonicity assumptions [2, 18, 19] that are not able to express situations in which compromised resources are lost due to crashes, detection or other unforeseen circumstances.", "startOffset": 158, "endOffset": 169}, {"referenceID": 4, "context": "The first application of planning techniques and PDDL solving for the security realm was [5], however this application was not focused on finding actual attack paths or driving penetration testing tools.", "startOffset": 89, "endOffset": 92}, {"referenceID": 11, "context": "In [12] attack paths are generated from PDDL description of networks, hosts and exploits, although the scenarios studied do not cover realistic scales.", "startOffset": 3, "endOffset": 7}, {"referenceID": 15, "context": "Previous work by the authors [16] addresses this limitation by solving scenarios with up 500 machines, and feeding the generated attack plans to guide a penetration testing tool.", "startOffset": 29, "endOffset": 33}, {"referenceID": 8, "context": "Recent work [9] also manages to provide attack paths to a penetration testing tool, in this case the Metasploit Framework, but again does not include probabilistic considerations.", "startOffset": 12, "endOffset": 15}, {"referenceID": 24, "context": "Previous work by one of the authors [25] takes into account the uncertainty about the result of the attacker\u2019s actions.", "startOffset": 36, "endOffset": 40}], "year": 2013, "abstractText": "As penetration testing frameworks have evolved and have become more complex, the problem of controlling automatically the pentesting tool has become an important question. This can be naturally addressed as an attack planning problem. Previous approaches to this problem were based on modeling the actions and assets in the PDDL language, and using off-the-shelf AI tools to generate attack plans. These approaches however are limited. In particular, the planning is classical (the actions are deterministic) and thus not able to handle the uncertainty involved in this form of attack planning. We herein contribute a planning model that does capture the uncertainty about the results of the actions, which is modeled as a probability of success of each action. We present efficient planning algorithms, specifically designed for this problem, that achieve industrial-scale runtime performance (able to solve scenarios with several hundred hosts and exploits). These algorithms take into account the probability of success of the actions and their expected cost (for example in terms of execution time, or network traffic generated). We thus show that probabilistic attack planning can be solved efficiently for the scenarios that arise when assessing the security of large networks. Two \u201cprimitives\u201d are presented, which are used as building blocks in a framework separating the overall problem into two levels of abstraction. We also present the experimental results obtained with our implementation, and conclude with some ideas for further work.", "creator": "LaTeX with hyperref package"}}}