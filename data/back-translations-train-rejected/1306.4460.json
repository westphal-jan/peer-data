{"id": "1306.4460", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Jun-2013", "title": "Implementing a Wall-In Building Placement in StarCraft with Declarative Programming", "abstract": "In real-time strategy games like StarCraft, skilled players often block the entrance to their base with buildings to prevent the opponent's units from getting inside. This technique, called \"walling-in\", is a vital part of player's skill set, allowing him to survive early aggression. However, current artificial players (bots) do not possess this skill, due to numerous inconveniences surfacing during its implementation in imperative languages like C++ or Java. In this text, written as a guide for bot programmers, we address the problem of finding an appropriate building placement that would block the entrance to player's base, and present a ready to use declarative solution employing the paradigm of answer set programming (ASP). We also encourage the readers to experiment with different declarative approaches to this problem.", "histories": [["v1", "Wed, 19 Jun 2013 09:08:48 GMT  (522kb,D)", "http://arxiv.org/abs/1306.4460v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["michal certicky"], "accepted": false, "id": "1306.4460"}, "pdf": {"name": "1306.4460.pdf", "metadata": {"source": "CRF", "title": "Implementing a Wall-In Building Placement in StarCraft with Declarative Programming", "authors": ["Michal \u010certick\u00fd"], "emails": ["michal.certicky@agents.fel.cvut.cz"], "sections": [{"heading": null, "text": "Implementation of a wall-in building placement in StarCraft with declarative programming Michal C'erticky \"Agent Technology Center, Czech Technical University Prague michal.certicky @ agents.fel.cvut.czJune 2013"}, {"heading": "In real-time strategy games like StarCraft, skilled players often block the en-", "text": "This technique, known as \"wall-in,\" is an essential part of the player's abilities and enables him to survive early aggression. However, current artificial players (bots) do not have this skill, as numerous inconveniences arise when implemented in mandatory languages such as C + + or Java. In this text, written as a guide for bot programmers, we address the problem of finding a suitable building placement that would block access to the player's base, and present a ready-to-use, declarative solution using the paradigm of response programming (ASP). We also encourage readers to experiment with various declarative approaches to this problems.Keywords: StarCraft, Real-Time Strategy, Response Programming, Wall-In, BWAPIar Xiv: 130 6.44 60v1 [cs.AI] Jun 19, 2013"}, {"heading": "1 Introduction", "text": "StarCraft1 is a popular computer game that represents a real-time strategy (RTS). In a typical RTS setting, players (either human or artificial) have control over various structures (buildings) and units they need to collect resources, build additional units and structures, or attack the enemy. RTS games, however, are generally a very interesting domain for the programming language (AI), as they represent well-defined complex enemy systems and can be divided into many interesting sub-problems."}, {"heading": "2 The Problem Description", "text": "In fact, most of them will be able to move to another world, where they will be able to move to another world, where they will be able to move to another world, where they will be able to move to where they are."}, {"heading": "3 Answer Set Programming", "text": "Answer Set Programming [11, 12, 1] has lately become a popular declarative problem-solving paradigm with increasing number of applications. The original language associated with ASP allows us to formalize various types of common sense knowledge and reasoning, including satisfaction with limitations and optimization. Language is a product of research aimed at defining formal semantics for logical programs with standard negation [11], and has been expanded to include a classical (or explicit) negation in 1991. An ASP logic program is a set of rules of the following form: h \u2190 l1,., lm, not lm + 1,. not lm, not lm, where h and l1,. ln are classic logic letters and do not denote standard negation. Informally, such a rule means that \"if you believe l1."}, {"heading": "4 Encoding the Problem in ASP", "text": "For our implementation, we used a modern ASP solver called clingo4. It supports an advanced modeling language described in [9] and [10]. In addition to the basic ASP constructs (rules, facts, constraints), it has support for generator rules, optimization instructions, and has a number of built-in arithmetic functions and aggregates, making problem definition more convenient for us. Our bot had to prepare a logic program that describes the current problem instance (find a wall-in placement with a given set of buildings at a certain point), pass it on to the solver, read and analyze the results from standard output to get the resulting tile positions. The solver either accepts this logic program from standard input, or it can be read from a text file (command to execute is then: \"clingo findWallPlacement.txt\" 5)."}, {"heading": "4.1 Buildings to Use", "text": "The first part of our logical program in findWallPlacement.txt file contains an encoding of the buildings we want to use. First, we use BWAPI to generate the following facts that define the building types, their size, and the gaps around them (note the fake \"zealot\" building type).% Specify building types, their size, and gaps. Type (forgeType, 3). Type (pylonType). Type (zealotsType). Width (gatewayType, 4). Height (gatewayType, 3). Height (forgeType, 3). Height (forgeType, 2). Height (pylonType, 2). Height (pylonType, 2). We (pylonType, 2). Height (zealotsType, 1). Height (zealotsType, 1). Height (zewayType, 1)."}, {"heading": "4.2 Terrain Encoding", "text": "Specifically, we need a set of facts describing which tile positions are walkable and where there is enough space to build individual building types. Information is easy to find on BWAPI. Walkable tile (87.11). Buildable tile (pylonType, 86.8). Buildable tile (gatewayType, 90.8). Buildable tile (pylonType, 88.19). Buildable tile (pylonType, 88.13). Walkable tile (94.21). Buildable tile (zealotsType, 93.10). Buildable tile (pylonType, 88.19). Buildable tile (94.9). Buildable tile (gatewayType, 85.11). Walkable tile (gatewayType, 88.9). Buildable tile (pylonType, 89.11). Walkable tile (walkable tile). Walkable tile (94.18)."}, {"heading": "4.3 Reachability", "text": "In fact, in fact, in fact, in fact: in fact, in the past, in the present, in the present, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future, in the future"}, {"heading": "4.4 Generate and Test Method", "text": "Our logic program uses the \"generator-and-test\" organization, which is very often used in ASP-based problem solving, and the idea is simple: we use so-called generator rules (or selection rules if generators are not supported by our solver) to describe a large number of \"potential solutions\" to our problem. In our case, each building placement is a potential solution, and each of them is then tested - we check to see if all the limitations in it are met. If there are some limitations that are not met, the solution is thrown away. Otherwise, it is returned as an answer. The generator rules for our wall placement problem are shown below (there is a rule for each building instance7). For example, the first rule states that \"for each X and Y, so that forgeType is buildable on (X, Y), we want to create and verify potential solutions with exactly one literal location (forge1, X, Y)."}, {"heading": "4.5 Optimization", "text": "As we have already mentioned, there may be more valid solutions to our problem, some of which are better than others. We look at the wall-in better when there are fewer gaps in it. # minimize [vertical gap (X1, Y1, X2, Y2, G) = G]. # minimize [horizontalGap (X1, Y1, X2, G) = G]. Note that we can omit the optimization instructions if we do not necessarily need the best possible solution. In this way, we can save some computing time, since calculating any response set is faster than calculating the best one.Logic programs, such as the one described in this section, can easily be generated by any Bot programmed in BWAPI and used to find a wall placement for most of the points included in this game."}, {"heading": "5 Summary", "text": "We have shown how to easily generate wall placements in StarCraft (and possibly other RTS games) using a declarative programming approach. This text, written as a guide for bot programmers, covers all relevant sub-issues such as terrain and building encoding, path finding / accessibility, and optimization, and provides a declarative solution to each of these issues. ASP encoding presented here and used in our implementation can be adopted directly by other bot programmers. However, we encourage readers to experiment with various declarative paradigms and technologies."}], "references": [{"title": "Knowledge Representation, Reasoning and Declarative Problem Solving", "author": ["C. Baral"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "Call for AI research in RTS games", "author": ["Buro", "Michael"], "venue": "Proceedings of the AAAI-04 Workshop on Challenges in Game AI", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2004}, {"title": "Case-Based Reasoning for Army Compositions in Real-Time Strategy Games", "author": ["\u010certick\u00fd", "Martin", "\u010certick\u00fd Michal"], "venue": "Proceedings of SCYR", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Build order optimization in starcraft", "author": ["Churchill", "David", "Michael Buro"], "venue": "Proceedings of AIIDE", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Belief maintenance in dynamic constraint networks", "author": ["Dechter", "Rina", "Avi Dechter"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1988}, {"title": "Learning probabilistic behavior models in real-time strategy games", "author": ["Dereszynski", "Ethan"], "venue": "Seventh Artificial Intelligence and Interactive Digital Entertainment Conference", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Opponent Modeling and Strategic Reasoning in the Real-time Strategy Game Starcraft", "author": ["Fjell", "Magnus Sellereite", "Stian Veum Mllersen"], "venue": "Diss. Norwegian University of Science and Technology,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2012}, {"title": "A users guide to gringo, clasp, clingo, and iclingo", "author": ["Gebser", "Martin"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2008}, {"title": "On the input language of ASP grounder gringo. Logic Programming and Nonmonotonic Reasoning", "author": ["Gebser", "Martin"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "In Proceedings of ICLP-88:", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1988}, {"title": "Classical negation in logic programs and disjunctive databases", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "New Generation Computing:", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1991}, {"title": "Micromanagement in StarCraft using Potential Fields tuned with a Multi-Objective Genetic Algorithm", "author": ["Rathe", "Espen Auran", "Jrgen Be Svendsen"], "venue": "Diss. Norwegian University of Science and Technology,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2012}, {"title": "A Dataset for StarCraft AI and an Example of Armies Clustering. Artificial Intelligence in Adversarial Real-Time Games: Papers from the 2012 AIIDE", "author": ["Synnaeve", "Gabriel", "Pierre Bessiere"], "venue": "Workshop AAAI Technical Report WS-12-15", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "Applying reinforcement learning to small scale combat in the real-time strategy game StarCraft: Broodwar", "author": ["Wender", "Stefan", "Ian Watson"], "venue": "Computational Intelligence and Games (CIG),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2012}], "referenceMentions": [{"referenceID": 1, "context": "RTS games are in general a very interesting domain for Artificial Intelligence (AI) research, since they represent well-defined complex adversarial systems and can be divided into many interesting sub-problems [2].", "startOffset": 210, "endOffset": 213}, {"referenceID": 13, "context": "Many of relevant publications deal with various machine learning approaches, either for micro-management in combat [15, 13] or for macro-economic or strategic tasks [7, 14, 4].", "startOffset": 115, "endOffset": 123}, {"referenceID": 11, "context": "Many of relevant publications deal with various machine learning approaches, either for micro-management in combat [15, 13] or for macro-economic or strategic tasks [7, 14, 4].", "startOffset": 115, "endOffset": 123}, {"referenceID": 5, "context": "Many of relevant publications deal with various machine learning approaches, either for micro-management in combat [15, 13] or for macro-economic or strategic tasks [7, 14, 4].", "startOffset": 165, "endOffset": 175}, {"referenceID": 12, "context": "Many of relevant publications deal with various machine learning approaches, either for micro-management in combat [15, 13] or for macro-economic or strategic tasks [7, 14, 4].", "startOffset": 165, "endOffset": 175}, {"referenceID": 2, "context": "Many of relevant publications deal with various machine learning approaches, either for micro-management in combat [15, 13] or for macro-economic or strategic tasks [7, 14, 4].", "startOffset": 165, "endOffset": 175}, {"referenceID": 6, "context": "Others solve the opponent modelling [8] or optimization problems over possible build orders [5].", "startOffset": 36, "endOffset": 39}, {"referenceID": 3, "context": "Others solve the opponent modelling [8] or optimization problems over possible build orders [5].", "startOffset": 92, "endOffset": 95}, {"referenceID": 4, "context": "The problem of wall-in building placement can be seen as a constraint satisfaction problem (CSP) [6].", "startOffset": 97, "endOffset": 100}, {"referenceID": 7, "context": "The search over a solution space, constraint testing and optimization is taken care of by the solver (in our case, an ASP solver clingo [9]).", "startOffset": 136, "endOffset": 139}, {"referenceID": 9, "context": "Answer Set Programming [11, 12, 1] has lately become a popular declarative problem solving paradigm with growing number of applications.", "startOffset": 23, "endOffset": 34}, {"referenceID": 10, "context": "Answer Set Programming [11, 12, 1] has lately become a popular declarative problem solving paradigm with growing number of applications.", "startOffset": 23, "endOffset": 34}, {"referenceID": 0, "context": "Answer Set Programming [11, 12, 1] has lately become a popular declarative problem solving paradigm with growing number of applications.", "startOffset": 23, "endOffset": 34}, {"referenceID": 9, "context": "The language is a product of a research aimed at defining a formal semantics for logic programs with default negation [11], and was extended to allow also a classical (or explicit) negation in 1991 [12].", "startOffset": 118, "endOffset": 122}, {"referenceID": 10, "context": "The language is a product of a research aimed at defining a formal semantics for logic programs with default negation [11], and was extended to allow also a classical (or explicit) negation in 1991 [12].", "startOffset": 198, "endOffset": 202}, {"referenceID": 7, "context": "It supports an extended modelling language, described in [9] and [10].", "startOffset": 57, "endOffset": 60}, {"referenceID": 8, "context": "It supports an extended modelling language, described in [9] and [10].", "startOffset": 65, "endOffset": 69}], "year": 2013, "abstractText": "In real-time strategy games like StarCraft, skilled players often block the entrance to their base with buildings to prevent the opponent\u2019s units from getting inside. This technique, called \u201cwalling-in\u201d, is a vital part of player\u2019s skill set, allowing him to survive early aggression. However, current artificial players (bots) do not possess this skill, due to numerous inconveniences surfacing during its implementation in imperative languages like C++ or Java. In this text, written as a guide for bot programmers, we address the problem of finding an appropriate building placement that would block the entrance to player\u2019s base, and present a ready to use declarative solution employing the paradigm of answer set programming (ASP). We also encourage the readers to experiment with different declarative approaches to this problem.", "creator": "LaTeX with hyperref package"}}}