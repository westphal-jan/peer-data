{"id": "1307.3195", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jul-2013", "title": "Action-based Character AI in Video-games with CogBots Architecture: A Preliminary Report", "abstract": "In this paper we propose an architecture for specifying the interaction of non-player characters (NPCs) in the game-world in a way that abstracts common tasks in four main conceptual components, namely perception, deliberation, control, action. We argue that this architecture, inspired by AI research on autonomous agents and robots, can offer a number of benefits in the form of abstraction, modularity, re-usability and higher degrees of personalization for the behavior of each NPC. We also show how this architecture can be used to tackle a simple scenario related to the navigation of NPCs under incomplete information about the obstacles that may obstruct the various way-points in the game, in a simple and effective way.", "histories": [["v1", "Thu, 11 Jul 2013 17:38:24 GMT  (609kb,D)", "http://arxiv.org/abs/1307.3195v1", "7 pages, for associated code repositories seethis https URLandthis https URL"]], "COMMENTS": "7 pages, for associated code repositories seethis https URLandthis https URL", "reviews": [], "SUBJECTS": "cs.AI cs.SE", "authors": ["davide aversa", "stavros vassos"], "accepted": false, "id": "1307.3195"}, "pdf": {"name": "1307.3195.pdf", "metadata": {"source": "CRF", "title": "Action-based Character AI in Video-games with CogBots Architecture: A Preliminary Report", "authors": ["Davide Aversa", "Stavros Vassos"], "emails": ["davide.aversa@gmx.com", "vassos@dis.uniroma1.it"], "sections": [{"heading": "Introduction", "text": "This year, it is only a matter of time before there is an agreement, until there is an agreement."}, {"heading": "The CogBot NPC AI architecture", "text": "The proposed architecture formalizes the behavior of NPCs with respect to their actions in the game world with respect to four basic components: \u2022 The perception component (CogBotPerception) is responsible for identifying objects and characteristics of the game world in the NPC's field of vision, including the conditions or events that occur, which can be useful to the perception component. \u2022 The perception component (CogBotDeliberation) is responsible for deciding on the immediate actions that should be taken by the NPC, taking into account the inputs from the perception component as well as internal representations. This component can be used to abstract the logic or strategy that the NPC should follow, which could be expressed, for example, in terms of reactive or proactive behavior following any of the existing approaches."}, {"heading": "Perception", "text": "The perception component is the most important source of information for the NPC control component. Typically, it is tied to a mesh object surrounding the NPC, and it provides immediate information about all game objects located in the area of the mesh object, such as a viewing cone positioned on the head of the NPC. In addition, the perception component can monitor the field of vision for conditions or events that are also passed to the control component. Communication with the control component is asynchronous, as the perception component passes information to the control component by calling appropriate recall functions as follows. \u2022 A \"Notify Event\" callback function is called when an object enters or leaves the field of vision of the NPC. \u2022 A \"Notify Object Status\" is called when the internal state of an object in the field of vision is changed. \u2022 A \"Notification Event\" callback function is called whenever an object enters or leaves the field of vision of the NPC."}, {"heading": "Deliberation", "text": "The Consideration Component is the bridge between the low-level space of perception and action in the game world and the high-level space of conceptual representation of the facts as far as the NPC is concerned. The Consideration Component sets up an interface for the Control Component to invoke asynchronous communication as follows. \u2022 A \"Get Next Action\" function abstracts the decision by considering component with respect to the next immediate action that can be performed by the NPC. \u2022 A \"Notify Object\" function notifies the Consideration Component of relevant objects that become visible or have changed their state. \u2022 A \"Notify Event\" function notifies the Consideration Component of relevant conditions that may affect the internal representation of the state or knowledge of the NPC. The Consideration Component is responsible for modeling the decision-making of the NPC with respect to the plot world that is executed in the game world, using the information obtained by the Control Component and other internal representations that are appropriate."}, {"heading": "Control", "text": "As we have already mentioned, the control component acts as an intermediary that distributes information between the other components, including notifications about the condition of objects, notifications about conditions in the game world, and feedback about the performance of actions. To do this, it propagates a call back from one component to another (as we discussed earlier in this section, for example, the perception and reflection component), and the way this is executed depends on the case and the execution options. For example, different types of information can be passed to different instances of the same component, as we discussed earlier in this section. In addition, the controller component passes through a loop that completes the execution of actions. In its simplest form, this could simply be to repeat the corresponding function of the reflection component that informs about the next action to be performed, and then pass this information on to the action component so that the action is actually performed in the game world."}, {"heading": "Action", "text": "The action component abstracts the actions of the NPC in the game world and allows the rest of the architecture to work at the symbolic level, and the other components become agnostic as per the implementation details for each action. Note that the architectural view we adopt does not specify the detail depth to which these actions should be abstracted. In some cases, an action could be an atomic low-level task in the game world, such as the task of turning the face of the NPC toward a specific goal, while in other cases a high-level view would be appropriate, essentially the structuring of the NPC's action behavior in terms of strategies or macro actions. In the latter case, the action component can be used to connect a conceptual high-level implementation of behaviors, such as are typically performed when a finite state machine is used for reactive behavior. In terms of communication with the action component, the simple interaction is again adopted for a control component."}, {"heading": "A motivating example", "text": "As a motivating running example, we consider a simple case of a spatial game world in which the human player and some NPCs can move between rooms, and use some of them to block paths or set traps. Suppose that the characters have to take a different path to get close to the human player. This is an important piece of information that serves as a shortcut to a particular room by creating an obstacle. Suppose that the characters have to complete a round to get close to the human player."}, {"heading": "CogBots in GridWorld", "text": "GridWorld is a grid-based environment developed in the Unity game engine, modeled after the motivational example we presented in the previous section. It is specifically designed to perform automated tests on NPC action-based behavior, so all game world components are generated procedurally from an input text file that specifies the topology and available objects and their state. For example, we can design a map consisting of rooms connected by doors, and use it to observe the behavior of one (or more) NPCs navigating the environment as the user opens or closes the doors."}, {"heading": "GridWorld", "text": "The main component of GridWorld is the map generated from an ASCII file that is used as input. Each element in the grid, including wall sections, floor tiles and doors, is a low-threshold game object from Unity with a component that contains some basic information about the object, such as: a flag that indicates whether the object is static or not and its type. Non-static objects, i.e. objects that can be in more than one state, have an additional component for handling the internal state representation and the way it changes through interactions in the game world. A simple A * heuristic search method is implemented based on grid representation to provide a low-level navigation system. In addition, during the initialization phase, processing of the card takes place that splits the map into interconnected areas, with the standard method of linked labeling of the top-level elements (the top-level label of the 1992 world is represented by the tamminology)."}, {"heading": "CogBots", "text": "A prototype NPC in GridWorld is implemented in accordance with the CogBot architecture described in the previous section. CogBot NPC consists of a standard game character object with a net, accelerators and animations. In addition, the NPC has the following components: \u2022 A conical accelerator that represents the field of vision of the NPC. This accelerator is attached to the main body of the NPC to simulate its viewing cone. \u2022 A CogBotPerception component that simply acts as a bridge between perception, reflection and action. \u2022 A PlayerAction component is a collection of actions by the human ambassador / viewer in GridWorld that instruct the NPC to perform an activity based solely on the movement of the NPC component."}, {"heading": "A simple example", "text": "In fact, it is such that it is a purely mental game, in which it is about putting people in a position to put themselves in, to put themselves in a position to put themselves in, in which they are, in which they are, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they, in which they, in which they live, in which they live, in which they, in which they, in which they, in which they, in which they, in which they live, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which, in which they, in which, in which, in which they, in which, in which they, in which they, in which, in which they, in which they, in which they, in which, in which, in which, in which, in fact, in fact, in fact, in which it is a purely, in a purely"}, {"heading": "Challenges and related work", "text": "There is a lot of work that is aimed at a share-based AI for the NPCs."}, {"heading": "Conclusions", "text": "In this paper, we have introduced a robotic-inspired architecture for dealing with artificial intelligence from non-players to specify actions in the game world. We have shown that there can be certain advantages to the principled approach of dismantling artificial intelligence efforts into components, especially in terms of separating the low level truth for the state of the game world and a personalized conceptual representation of the world for each NPC. Our proposed architecture offers modularity that allows each of the four main components of the architecture, namely perception, reflection, control and action, to encapsulate a self-contained independent functionality through a clear interface. We expect this type of character development to allow for better reusability of the code and to accelerate prototyping, testing and debugging. In addition, our proposed architecture provides the ground for repetition of problems and techniques that have been extensively investigated, such as pipe finding, and to arrive at practical methods for developing more credible characters with their own view of the top worlds and connectivity."}], "references": [{"title": "Near optimal hierarchical path-finding", "author": ["Mueller Botea", "A. Schaeffer 2004] Botea", "M. Mueller", "J. Schaeffer"], "venue": "In Journal of Game Development,", "citeRegEx": "Botea et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Botea et al\\.", "year": 2004}, {"title": "A general approach to connected-component labeling for arbitrary image representations", "author": ["Samet Dillencourt", "M.B. Tamminen 1992] Dillencourt", "H. Samet", "M. Tamminen"], "venue": "J. ACM 39(2):253\u2013280", "citeRegEx": "Dillencourt et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Dillencourt et al\\.", "year": 1992}, {"title": "High-level robotic control: Beyond planning. a position paper", "author": ["Levesque", "H. Reiter 1998] Levesque", "R. Reiter"], "venue": "AIII", "citeRegEx": "Levesque et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Levesque et al\\.", "year": 1998}, {"title": "Scriptease: Generative design patterns for computer role-playing games", "author": ["Mcnaughton"], "venue": "In in 19 th International Conference on Automated Software Engineering,", "citeRegEx": "Mcnaughton,? \\Q2004\\E", "shortCiteRegEx": "Mcnaughton", "year": 2004}, {"title": "High-Level robot control through logic", "author": ["Shanahan", "M. Witkowski 2001] Shanahan", "M. Witkowski"], "venue": "Intelligent Agents VII Agent Theories Architectures and Languages,", "citeRegEx": "Shanahan et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Shanahan et al\\.", "year": 2001}], "referenceMentions": [], "year": 2013, "abstractText": "In this paper we propose an architecture for specifying the interaction of non-player characters (NPCs) in the game-world in a way that abstracts common tasks in four main conceptual components, namely perception, deliberation, control, action. We argue that this architecture, inspired by AI research on autonomous agents and robots, can offer a number of benefits in the form of abstraction, modularity, re-usability and higher degreesion, modularity, re-usability and higher degrees of personalization for the behavior of each NPC. We also show how this architecture can be used to tackle a simple scenario related to the navigation of NPCs under incomplete information about the obstacles that may obstruct the various way-points in the game, in a simple", "creator": "LaTeX with hyperref package"}}}