{"id": "1312.1003", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Dec-2013", "title": "High Throughput Virtual Screening with Data Level Parallelism in Multi-core Processors", "abstract": "Improving the throughput of molecular docking, a computationally intensive phase of the virtual screening process, is a highly sought area of research since it has a significant weight in the drug designing process. With such improvements, the world might find cures for incurable diseases like HIV disease and Cancer sooner. Our approach presented in this paper is to utilize a multi-core environment to introduce Data Level Parallelism (DLP) to the Autodock Vina software, which is a widely used for molecular docking software. Autodock Vina already exploits Instruction Level Parallelism (ILP) in multi-core environments and therefore optimized for such environments. However, with the results we have obtained, it can be clearly seen that our approach has enhanced the throughput of the already optimized software by more than six times. This will dramatically reduce the time consumed for the lead identification phase in drug designing along with the shift in the processor technology from multi-core to many-core of the current era. Therefore, we believe that the contribution of this project will effectively make it possible to expand the number of small molecules docked against a drug target and improving the chances to design drugs for incurable diseases.", "histories": [["v1", "Wed, 4 Dec 2013 01:53:33 GMT  (638kb)", "http://arxiv.org/abs/1312.1003v1", "Information and Automation for Sustainability (ICIAfS), 2012 IEEE 6th International Conference on"]], "COMMENTS": "Information and Automation for Sustainability (ICIAfS), 2012 IEEE 6th International Conference on", "reviews": [], "SUBJECTS": "cs.AI cs.PF", "authors": ["upul senanayake", "rahal prabuddha", "roshan ragel"], "accepted": false, "id": "1312.1003"}, "pdf": {"name": "1312.1003.pdf", "metadata": {"source": "CRF", "title": "High Throughput Virtual Screening with Data Level Parallelism in Multi-core Processors", "authors": ["Upul Senanayake", "Roshan Ragel"], "emails": [], "sections": [{"heading": null, "text": "This year it is more than ever before."}, {"heading": "A. Receptor Preparation", "text": "The receptor we have identified and will use is the 2BPW receptor from the Protein Data Bank, which has the structure as shown in Figure 1 [9]. The ligand contained in the receptor has been removed to prepare it for docking. We also removed the water molecules and added non-polar hydrogen atoms to the receptor using MGLTools v1.5.4 [10]. We identified the binding site and set the grid parameters accordingly, minimizing the search space that the docking algorithm had to explore. The grid parameters define the search space that the software will use for docking, and we must ensure that the binding sites of the receptor are included."}, {"heading": "B. Ligand Database Preparation", "text": "Since it was a control test, we only looked at the first 5000 ligands from the ChemBridge library ligand set. They were already prepared and available in PDBQT format [21] (both the ligands and the receptor should be in PDBQT format to be used with Autodock Vina), which was an added advantage. As it was a random ligand set, we consider it ideal to make a comparison between the generic Vina, which is enabled by parallelism at the teaching level, and the parallelism at the data level that we are introducing with Vina."}, {"heading": "C. Docking", "text": "This is the main phase of the entire virtual docking process. So far, we have prepared the receptor and ligands to facilitate the docking process. As previously stated, docking is the computationally intensive process that consumes more than 80% of the computing time. It is better understood by looking at the following figure from Wikimedia [11]. Only one of the orientations is illustrated here, although there may be several other practicable orientations. We use the binding energy to determine the best conformation among those identified by autodock. Molecular docking is similar to the problem with lock and key, identifying the correct orientation of the key with which to unlock the lock. We can imagine orientation as the key parameter in which direction the key should be rotated, etc. In our context, the receptor can be thought of as the key, while ligands are the keys. Molecular docking is an optimization problem where we would need to identify the best orientation of the ligand to match a particular receptor."}, {"heading": "D. Docking Mechanisms", "text": "Docking depends on two things: the search algorithms and the scoring functions. The search algorithms search for all possible orientations of the ligand to be bound to the receptor, and it is a comprehensive search problem. The energy values of the binding of protein ligands are calculated using scoring functions that play a major role in the docking process. If the energy values are low, especially negative, this indicates a high stability bond. In docking programs, different types of scoring functions are implemented, as shown in Table I [12]. As shown in Table I, the scoring functions can be divided into three groups: one, force field-based scoring, two, empirical scoring, and three, knowledge-based scoring."}, {"heading": "E. High Throughput Virtual Screening (HTVS)", "text": "HTVS refers to the docking process that is applied multiple times to a large number of ligands (possibly millions and growing), either sequentially or in parallel. It is more like trying to find a needle in a large haystack where some haystacks may resemble the characteristics of the needle, which makes them an exhaustive search problem, since you cannot rationally verify that you have found the optimal matrix. Virtual screening was initially carried out as an experiment in laboratories that took several years to produce a result and to effect the rapid development of computational biology. HTVS is now a very important part of the drug development process, especially in the lead optimization phase."}, {"heading": "A. WISDOM-I", "text": "WISDOM-I is associated with the development of a drug against malaria. Its main objective is to advance research and development on neglected diseases by promoting the use of open source information technology for drug discovery, as mentioned on its website [14]. They focused on the High Throughput Virtual Screening process against malaria in 2005 and successfully completed the docking of 42 million substances. It is mentioned that this took 80 CPU years. B. Virtual Screening against Influenza a a Neuraminidases This was also carried out by the same group (the group worked on WISDOM-I), inspired by the success they had with HTVS against malaria. This was carried out in 2006 and confirmed their inspiration and confidence that HTVS was imposed in the drug development process. The results of both experiments were processed and drugs are being developed as we speak [15].Virtual Screening against SARS Severity Syndrome is a highly infectious disease."}, {"heading": "D. Comparison", "text": "The main difference between what was done in WISDOM-I and what we are proposing is that the system we are proposing will work on a multi-core, hyper-threaded environment, while WISDOMI will focus on executing this process in a distributed network environment [17], which will entail overhead costs in maintaining the environment nodes, which we are trying to reduce, thus improving the process with a gain in time. Furthermore, the initial process would be the same, so that our framework and the distributed framework can be easily replaced (or even integrated, if necessary, to take advantage of both). IV. DATA LEVEL PARALLELISM IN VINAWe were familiar with Autodock Vina software, which has already demonstrated parallelism at the teaching level."}, {"heading": "A. Proposed Architecture", "text": "We decided to consider Vina as a black box and continue to implement the parallelism of the data layer around it. We investigated the possibility of a shared memory in case there are dependencies; however, since the execution unit we were looking at was an instance of Vina and the input was only the receptor and a ligand, we were able to exceed the dependency problems. We understood that the best way to implement parallelism at the data level is to provide an abstract layer that handles the number of jobs (threads / instances) it executes at a given time. We can define the number of jobs and the layer would create a new instance of Vina until the layer has a defined number of jobs. Immediately after completion of a job, the layer generates another instance of Vina and so on. The diagram in Figure 3 illustrates the architecture. It is worth noting that wherever the number of CU-instances is the number of Vina, and the number of instances of PU-instances is used, we would execute the number of Vina-instances."}, {"heading": "B. Dry Run of Data Level Parallelism", "text": "Since Vina was already optimized to work in a multi-core environment, we had to explore whether we could make further improvements by introducing parallelism at the data level. Dry-run, we developed a simple shell script with job control functions to support our hypothesis. We used a set of 16 ligands tested with Vina and the script we invented. Repeated experiments were conducted to get an average of the elapsed time to compensate for the possibility of CPU cycles used for other system functions. Hypothesis: Data-level parallelism can provide more throughput improvement than parallelism.The shell script we used was inspired by the work of Jure Varlec on prll [18], which acts as a wrapper to perform jobs in parallel with a shell."}, {"heading": "C. Data Level Parallelism in Python", "text": "We chose to use Python [19] for this research because it was easy to use and had a variety of libraries that we could use to do our job. We examined symmetrical multiprocessor libraries in Python, and the Joblib planning library [20] was identified as the best choice for our cause."}, {"heading": "D. Joblib Library", "text": "As mentioned in the vision of creating Joblib libraries, it provides tools that achieve better performance and reproducibility when working with long-term jobs. We have the advantage that we do not have to change our code, as joblib only introduces job pipelines, because we need a controlled environment. Furthermore, since joblib has no dependencies other than Python, it is convenient to use on a remote machine. Implementing the configurations we have considered in Table II is necessary to make a thorough comparison, as joblib has no dependencies other than Python. Implementation is convenient. The configurations we are considering are listed in Table II."}, {"heading": "64 1 12554 0.11", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "64 2 12541 0.07", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "64 4 12622 0.24", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "32 1 15273 0.45", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "32 2 12652 0.07", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "32 4 12501 0.13", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "16 1 26915 0.08", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "16 2 15464 0.25", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "16 4 12909 0.05", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "8 1 53584 0.07", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "8 2 27767 0.10", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "8 4 16743 0.18", "text": "It is indeed the case that we will be able to find a solution with which we can identify."}], "references": [{"title": "Virtual Screening \u2013 An Overview", "author": ["W. Patrick Walters", "Matthew T. Stahl", "Mark A. Murcko"], "venue": "Drug Discovery Today,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1998}, {"title": "Virtual Screeening in Drug Discovery \u2013 A Computational Perspective", "author": ["A. Sriniwas Reddy", "S. Priyadarshani Pati", "P. Praveen Kumar", "H.N. Pradeep", "G. Narahari Sastry"], "venue": "Current Protein and Peptide Science,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2007}, {"title": "AutoDock Vina: improving the speed and accuracy of docking with a new scoring function, efficient optimization and multithreading", "author": ["O. Trott", "A.J. Olson"], "venue": "Journal of Computational Chemistry", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Against the Odds: The Story of AIDS Drug Development", "author": ["S. Peter Arno", "L. Feiden Karyn"], "venue": "HarperCollins,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1992}, {"title": "Python: A Programming Language for Software Integration and Development", "author": ["Michel F. Sanner"], "venue": "J. Mol. Graphics Mod.,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1999}, {"title": "WISDOM-II: screening against multiple targets implicated in malaria using computational grid infrastructures.", "author": ["V. Kasam", "J. Salzemann", "M. Botha", "A. Dacosta", "G. Degliesposti", "R. Isea", "D. Kim", "A. Maass", "C. Kenyon", "G. Rastelli", "M. Hofmann-Apitius", "V. Breton"], "venue": "Malaria journal,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2009}], "referenceMentions": [{"referenceID": 0, "context": "It mainly concentrates on performing actual experiments on each of many candidates of molecular compounds to identify the optimal set of candidates and then further carries out experiments to find out the best binding compound to be further modified to become a drug [1].", "startOffset": 267, "endOffset": 270}, {"referenceID": 1, "context": "The method we are concentrating on in our research is the molecular docking phase of a virtual screening process, which dramatically reduces the size of the ligand database (the search space for docking) from 10 to few thousands of ligands [2].", "startOffset": 240, "endOffset": 243}, {"referenceID": 2, "context": "Since Autodock Vina [3] has introduced instruction level parallelism for a multi-core environment, we will compare the results obtained using that and the data level parallelism we are trying to introduce into the picture for the same tool.", "startOffset": 20, "endOffset": 23}, {"referenceID": 3, "context": "We decided to choose our protein receptor as a protease of Human Immunodeficiency Virus (HIV) [4].", "startOffset": 94, "endOffset": 97}, {"referenceID": 4, "context": "4 [10].", "startOffset": 2, "endOffset": 6}, {"referenceID": 5, "context": "processor environment with hyper threading while WISDOMI concentrate on performing that operation on a distributed grid environment [17] which involves overhead costs in maintaining the nodes of the environment which we try to reduce and thus enhance the process with a time gain.", "startOffset": 132, "endOffset": 136}], "year": 2012, "abstractText": "Improving the throughput of molecular docking, a computationally intensive phase of the virtual screening process, is a highly sought area of research since it has a significant weight in the drug designing process. With such improvements, the world might find cures for incurable diseases like HIV disease and Cancer sooner. Our approach presented in this paper is to utilize a multi-core environment to introduce Data Level Parallelism (DLP) to the Autodock Vina software, which is a widely used for molecular docking software. Autodock Vina already exploits Instruction Level Parallelism (ILP) in multi-core environments and therefore optimized for such environments. However, with the results we have obtained, it can be clearly seen that our approach has enhanced the throughput of the already optimized software by more than six times. This will dramatically reduce the time consumed for the lead identification phase in drug designing along with the shift in the processor technology from multi-core to many-core of the current era. Therefore, we believe that the contribution of this project will effectively make it possible to expand the number of small molecules docked against a drug target and improving the chances to design drugs for incurable diseases.", "creator": "Microsoft\u00ae Word 2010"}}}