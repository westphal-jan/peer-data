{"id": "1312.6113", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Dec-2013", "title": "Aspartame: Solving Constraint Satisfaction Problems with Answer Set Programming", "abstract": "Encoding finite linear CSPs as Boolean formulas and solving them by using modern SAT solvers has proven to be highly effective, as exemplified by the award-winning sugar system. We here develop an alternative approach based on ASP. This allows us to use first-order encodings providing us with a high degree of flexibility for easy experimentation with different implementations. The resulting system aspartame re-uses parts of sugar for parsing and normalizing CSPs. The obtained set of facts is then combined with an ASP encoding that can be grounded and solved by off-the-shelf ASP systems. We establish the competitiveness of our approach by empirically contrasting aspartame and sugar.", "histories": [["v1", "Fri, 20 Dec 2013 20:57:28 GMT  (25kb,D)", "http://arxiv.org/abs/1312.6113v1", "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey"]], "COMMENTS": "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["mutsunori banbara", "martin gebser", "katsumi inoue", "torsten schaub", "takehide soh", "naoyuki tamura", "matthias weise"], "accepted": false, "id": "1312.6113"}, "pdf": {"name": "1312.6113.pdf", "metadata": {"source": "CRF", "title": "Aspartame: Solving Constraint Satisfaction Problems with Answer Set Programming", "authors": ["M. Banbara"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "In fact, most of them are able to survive on their own without having to move to another world."}, {"heading": "2 Background", "text": "A satisfaction constraint (CSP) is given by a pair (V, C) consisting of a set of V variables and a set of C constraint clauses. Each variable x-V has an associated finite domain D (x) so that either D (x) = {>,} or the set of integer variables in V (V) so that it is a Boolean variable, if D (x) = {{{} and an integer variable in V (V) and the set of integer variables in V of I (V) so. A constraint of C variables is a set of literals about Boolean variables in B (V) so as are linear inequalities or global constraints on integer variables in I (V). Each literal variable in C is of the form e or e, where e is either a linear variable in B (V), a linear inequality or global constraints on integer variables in I (V)."}, {"heading": "3 Approach", "text": "The aspartame tool adds a starting component to the SAT-based solvent sugar to represent a CSP in relation to ASP facts. As usual, the generated facts can then be combined with a first-class encoding that can be processed with commercially available ASP systems. In the following, we describe the format of the facts generated by aspartame and present a special ASP encoding that uses functional terms to capture substructures in CSP instances."}, {"heading": "3.1 Fact Format", "text": "The range of terms of each is listed in the 1. While the facts of the predicate var / 21 var (bool, b). var (int, x; y; z, range (1,3).3 constraint (1, alldifferent, arg (x, arg (z, nil)))).4 constraint (2, b).5 constraint (2, op, op (op, op, op, op, op, op, op, x), op (mul, -3, y), op (mul, 1, z), 0), 6 constraint (3, op (neg, b).7 constraint (3, rel, arg).7 constraint (x, arg)."}, {"heading": "3.2 First-Order Encoding", "text": "In addition to an output component that expands sugar for the generation of ASP facts, aspartame comes along with alternative first-order ASP encodings (ASP solutions for CSP instances).In the following, we outline a dedicated encoding that relies on functional terms for one side to capture recurrences of similar structures, and repeal the coding approach for structural subjects for the other side. While the derived facts in line 1 merely provide a projection of the predicate var / 3 without associated domains, the listing 2 expresses (relevant) instances of similar structures evaluated at grounding for the other side of the CSP: ax 1. While the derived facts in line 1 merely represent a projection of the predicate var / 3 without associated domains, the instances of Look / 2 in line 2 express that all values in the common domain {1, y}, y, and y are relevant."}, {"heading": "5 Related Work", "text": "In contrast to approaches to solving constraints, e.g. [10, 16-18], which aim at the integration of CSP and ASP solutions (motors), the focus of aspartame is purely on solving constraints. Indeed, aspartame's approach can be seen as a first-order alternative to SAT-based systems such as sugar [5], where the performance of the underlying SAT solver is crucial. However, it is now recognised that SAT coding also plays an important role [26]. There have been several proposals for coding constraints for SAT: direct coding [20, 21], support for coding [22, 23], protocol coding [24, 25], protocol coding, regular coding [27], order coding [4, 5] and compact coding of constraints for coding [28]. The order of coding in which boolean variables represent the stability of CSI, the computing capacity of CLOS-11, is a good computational consistency of CLOS-11."}, {"heading": "6 Conclusion", "text": "The resulting aspartame system relies on high-grade ASP coding and delegates both grounding and task-solving to universal ASP systems. Although aspartame does not fully correspond to sugar performance from a global perspective, the picture is fragmented and leaves room for further improvement, meaning that different performance levels are observed at different classes of CSPs that include different types of constraints. Therefore, it is an interesting topic for future research to develop more appropriate ASP coding for such constellations. Nevertheless, Aspartame shows that the general purpose technology of JSPs enables it to compete with government constraints."}], "references": [{"title": "Constraint Processing", "author": ["R. Dechter"], "venue": "Morgan Kaufmann Publishers", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2003}, {"title": "Handbook of Constraint Programming", "author": ["F. Rossi", "P. van Beek", "T. Walsh", "eds."], "venue": "Elsevier Science", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2006}, {"title": "Handbook of Satisfiability", "author": ["A. Biere", "M. Heule", "H. van Maaren", "T. Walsh", "eds."], "venue": "IOS Press", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2009}, {"title": "Experimental results on the application of satisfiability algorithms to scheduling problems", "author": ["J. Crawford", "A. Baker"], "venue": "In Hayes-Roth, B., and Korf, R., eds.: Proceedings of the Twelfth National Conference on Artificial Intelligence (AAAI\u201994), AAAI Press", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1994}, {"title": "Compiling finite linear CSP into SAT", "author": ["N. Tamura", "A. Taga", "S. Kitagawa", "M. Banbara"], "venue": "Constraints 14(2)", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2009}, {"title": "Knowledge Representation, Reasoning and Declarative Problem Solving", "author": ["C. Baral"], "venue": "Cambridge University Press", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2003}, {"title": "Answer Set Solving in Practice", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub"], "venue": "Morgan and Claypool Publishers", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2012}, {"title": "A constraint seeker: Finding and ranking global constraints from examples", "author": ["N. Beldiceanu", "H. Simonis"], "venue": "In Lee, J., ed.: Proceedings of the Seventeenth International Conference on Principles and Practice of Constraint Programming (CP\u201911), Springer-Verlag", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "A translational approach to constraint answer set solving", "author": ["C. Drescher", "T. Walsh"], "venue": "Theory and Practice of Logic Programming 10(4-6)", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2010}, {"title": "Boolean equi-propagation for concise and efficient SAT encodings of combinatorial problems", "author": ["A. Metodi", "M. Codish", "P. Stuckey"], "venue": "Journal of Artificial Intelligence Research 46", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2013}, {"title": "Towards an optimal CNF encoding of Boolean cardinality constraints", "author": ["C. Sinz"], "venue": "In van Beek, P., ed.: Proceedings of the Eleventh International Conference on Principles and Practice of Constraint Programming (CP\u201905), Springer-Verlag", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2005}, {"title": "Extending and implementing the stable model semantics", "author": ["P. Simons", "I. Niemel\u00e4", "T. Soininen"], "venue": "Artificial Intelligence 138(1-2)", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2002}, {"title": "Effective preprocessing in SAT through variable and clause elimination", "author": ["N. E\u00e9n", "A. Biere"], "venue": "In Bacchus, F., Walsh, T., eds.: Proceedings of the Eighth International Conference on Theory and Applications of Satisfiability Testing (SAT\u201905), Springer-Verlag", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2005}, {"title": "Representing constraint satisfaction problems in answer set programming", "author": ["M. Balduccini"], "venue": "In Faber, W., Lee, J., eds.: Proceedings of the Second Workshop on Answer Set Programming and Other Computing Paradigms (ASPOCP\u201909),", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2009}, {"title": "ASP modulo CSP: The clingcon system", "author": ["M. Ostrowski", "T. Schaub"], "venue": "Theory and Practice of Logic Programming 12(4-5)", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2012}, {"title": "A comparison of ATMS and CSP techniques", "author": ["J. de Kleer"], "venue": "In Sridharan, N., ed.: Proceedings of the Eleventh International Joint Conference on Artificial Intelligence (IJCAI\u201989), Morgan Kaufmann Publishers", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1989}, {"title": "SAT v CSP", "author": ["T. Walsh"], "venue": "In Dechter, R., ed.: Proceedings of the Sixth International Conference on Principles and Practice of Constraint Programming (CP\u201900), Springer-Verlag", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2000}, {"title": "On the parallel complexity of discrete relaxation in constraint satisfaction networks", "author": ["S. Kasif"], "venue": "Artificial Intelligence 45(3)", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1990}, {"title": "Arc consistency in SAT", "author": ["I. Gent"], "venue": "In van Harmelen, F., ed.: Proceedings of the Fifteenth European Conference on Artificial Intelligence (ECAI\u201902), IOS Press", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2002}, {"title": "SAT-variable complexity of hard combinatorial problems", "author": ["K. Iwama", "S. Miyazaki"], "venue": "In Pehrson, B., Simon, I., eds.: Proceedings of the Thirteenth IFIP World Computer Congress (WCC\u201994), North-Holland", "citeRegEx": "24", "shortCiteRegEx": null, "year": 1994}, {"title": "Another look at graph coloring via propositional satisfiability", "author": ["A. Van Gelder"], "venue": "Discrete Applied Mathematics 156(2)", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2008}, {"title": "The log-support encoding of CSP into SAT", "author": ["M. Gavanelli"], "venue": "In Bessiere, C., ed.: Proceedings of the Thirteenth International Conference on Principles and Practice of Constraint Programming (CP\u201907), Springer-Verlag", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2007}, {"title": "Mapping problems with finite-domain variables into problems with Boolean variables", "author": ["C. Ans\u00f3tegui", "F. Many\u00e0"], "venue": "In Hoos, H., Mitchell, D., eds.: Proceedings of the Seventh International Conference on Theory and Applications of Satisfiability Testing (SAT\u201904), SpringerVerlag", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2004}, {"title": "Azucar: A SAT-based CSP solver using compact order encoding (tool presentation)", "author": ["T. Tanjo", "N. Tamura", "M. Banbara"], "venue": "In Cimatti, A., Sebastiani, R., eds.: Proceedings of the Fifteenth International Conference on Theory and Applications of Satisfiability Testing (SAT\u201912), Springer-Verlag", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2012}, {"title": "Efficient CNF encoding of Boolean cardinality constraints", "author": ["O. Bailleux", "Y. Boufkhad"], "venue": "In Rossi, F., ed.: Proceedings of the Ninth International Conference on Principles and Practice of Constraint Programming (CP\u201903), Springer-Verlag", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2003}, {"title": "A new encoding of AllDifferent into SAT", "author": ["I. Gent", "P. Nightingale"], "venue": "In Frisch, A., Miguel, I., eds.: Proceedings of the Third International Workshop on Modelling and Reformulating Constraint Satisfaction Problems (ModRef\u201904),", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2004}, {"title": "A competitive and cooperative approach to propositional satisfiability", "author": ["K. Inoue", "T. Soh", "S. Ueda", "Y. Sasaura", "M. Banbara", "N. Tamura"], "venue": "Discrete Applied Mathematics 154(16)", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2006}, {"title": "A SAT-based method for solving the two-dimensional strip packing problem", "author": ["T. Soh", "K. Inoue", "N. Tamura", "M. Banbara", "H. Nabeshima"], "venue": "Fundamenta Informaticae 102(3-4)", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2010}, {"title": "Propagation via lazy clause generation", "author": ["O. Ohrimenko", "P. Stuckey", "M. Codish"], "venue": "Constraints 14(3)", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2009}, {"title": "Generating combinatorial test cases by efficient SAT encodings suitable for CDCL SAT solvers", "author": ["M. Banbara", "H. Matsunaka", "N. Tamura", "K. Inoue"], "venue": "In Ferm\u00fcller, C., Voronkov, A., eds.: Proceedings of the Seventeenth International Conference on Logic for Programming, Artificial Intelligence, and Reasoning (LPAR\u201910), Springer-Verlag", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2010}, {"title": "Promoting robust black-box solvers through competitions", "author": ["C. Lecoutre", "O. Roussel", "M. van Dongen"], "venue": "Constraints 15(3)", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2010}, {"title": "Compiling finite domain constraints to SAT with BEE", "author": ["A. Metodi", "M. Codish"], "venue": "Theory and Practice of Logic Programming 12(4-5)", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2012}, {"title": "The SAT compiler in B-prolog", "author": ["N. Zhou"], "venue": "The Association for Logic Programming Newsletter, March 2013", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2013}, {"title": "The order encoding: From tractable CSP to tractable SAT", "author": ["J. Petke", "P. Jeavons"], "venue": "In Sakallah, K., Simon, L., eds.: Proceedings of the Fourteenth International Conference on Theory and Applications of Satisfiability Testing (SAT\u201911), Springer-Verlag", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "Encoding finite linear Constraint Satisfaction Problems (CSPs; [1, 2]) as propositional formulas and solving them by using modern solvers for Satisfiability Testing (SAT; [3]) has proven to be a highly effective approach, as demonstrated by the award-winning sugar4 system.", "startOffset": 63, "endOffset": 69}, {"referenceID": 1, "context": "Encoding finite linear Constraint Satisfaction Problems (CSPs; [1, 2]) as propositional formulas and solving them by using modern solvers for Satisfiability Testing (SAT; [3]) has proven to be a highly effective approach, as demonstrated by the award-winning sugar4 system.", "startOffset": 63, "endOffset": 69}, {"referenceID": 2, "context": "Encoding finite linear Constraint Satisfaction Problems (CSPs; [1, 2]) as propositional formulas and solving them by using modern solvers for Satisfiability Testing (SAT; [3]) has proven to be a highly effective approach, as demonstrated by the award-winning sugar4 system.", "startOffset": 171, "endOffset": 174}, {"referenceID": 3, "context": "The translation relies on the order encoding [4, 5], and the resulting CNF formula can be solved by an off-theshelf SAT solver.", "startOffset": 45, "endOffset": 51}, {"referenceID": 4, "context": "The translation relies on the order encoding [4, 5], and the resulting CNF formula can be solved by an off-theshelf SAT solver.", "startOffset": 45, "endOffset": 51}, {"referenceID": 5, "context": "In what follows, we elaborate upon an alternative approach based on Answer Set Programming (ASP; [6]) and present the resulting CSP solver aspartame5.", "startOffset": 97, "endOffset": 100}, {"referenceID": 5, "context": "A comprehensive treatment of ASP can be found in [6], one oriented towards ASP solving is given in [7].", "startOffset": 49, "endOffset": 52}, {"referenceID": 6, "context": "A comprehensive treatment of ASP can be found in [6], one oriented towards ASP solving is given in [7].", "startOffset": 99, "endOffset": 102}, {"referenceID": 0, "context": "Although we provide essential definitions of CSPs in the next section, we refer the reader to the literature [1, 2] for a broader perspective.", "startOffset": 109, "endOffset": 115}, {"referenceID": 1, "context": "Although we provide essential definitions of CSPs in the next section, we refer the reader to the literature [1, 2] for a broader perspective.", "startOffset": 109, "endOffset": 115}, {"referenceID": 7, "context": "[9]) is an arbitrary relation over Integer variables in I(V); we here restrict ourselves to table and alldifferent constraints over subsets {x1, .", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "7 Linear inequalities relying on further comparison operators, such as <, >, \u2265, =, and 6=, can be converted into the considered format via appropriate replacements [5].", "startOffset": 164, "endOffset": 167}, {"referenceID": 3, "context": "For 4x\u2212 3y+ z \u2264 0 from C2 in (2), we get I(4x) = {[4, 12]}, I(\u22123y) = {[\u22129,\u22123]}, and I(1z) = {[1, 3]}.", "startOffset": 50, "endOffset": 57}, {"referenceID": 10, "context": "For 4x\u2212 3y+ z \u2264 0 from C2 in (2), we get I(4x) = {[4, 12]}, I(\u22123y) = {[\u22129,\u22123]}, and I(1z) = {[1, 3]}.", "startOffset": 50, "endOffset": 57}, {"referenceID": 0, "context": "For 4x\u2212 3y+ z \u2264 0 from C2 in (2), we get I(4x) = {[4, 12]}, I(\u22123y) = {[\u22129,\u22123]}, and I(1z) = {[1, 3]}.", "startOffset": 93, "endOffset": 99}, {"referenceID": 2, "context": "For 4x\u2212 3y+ z \u2264 0 from C2 in (2), we get I(4x) = {[4, 12]}, I(\u22123y) = {[\u22129,\u22123]}, and I(1z) = {[1, 3]}.", "startOffset": 93, "endOffset": 99}, {"referenceID": 3, "context": "Following the idea of order encodings in SAT [4, 5], the choice rule in Line 3 permits guessing less(V,E) for all but the smallest (relevant) value E in the domain of an Integer variable V, thus indicating that V is assigned to some smaller value than E.", "startOffset": 45, "endOffset": 51}, {"referenceID": 4, "context": "Following the idea of order encodings in SAT [4, 5], the choice rule in Line 3 permits guessing less(V,E) for all but the smallest (relevant) value E in the domain of an Integer variable V, thus indicating that V is assigned to some smaller value than E.", "startOffset": 45, "endOffset": 51}, {"referenceID": 8, "context": "[10, 11]) to check that the smallest or greatest 1, .", "startOffset": 0, "endOffset": 8}, {"referenceID": 9, "context": "[10, 11]) to check that the smallest or greatest 1, .", "startOffset": 0, "endOffset": 8}, {"referenceID": 10, "context": "[12]) as well as aggregate-based (cf.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "[13]) implementations are applicable in view of the native support of aggregates by ASP solvers like clasp (cf.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "2 as well as a more direct encoding inspired by the original CNF construction of sugar [5], and additionally consider the SAT-based reference solver sugar (2.", "startOffset": 87, "endOffset": 90}, {"referenceID": 12, "context": "[15]) is performed by default on CNF inputs, we optionally enabled it for (ground) ASP instances, leading to four combinations of clasp settings for ASP-based approaches and two for SAT-based sugar.", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": ", [10, 16\u201318], which aim at integrating CSP and ASP solving (engines), the focus of aspartame lies on pure CSP solving.", "startOffset": 2, "endOffset": 13}, {"referenceID": 13, "context": ", [10, 16\u201318], which aim at integrating CSP and ASP solving (engines), the focus of aspartame lies on pure CSP solving.", "startOffset": 2, "endOffset": 13}, {"referenceID": 14, "context": ", [10, 16\u201318], which aim at integrating CSP and ASP solving (engines), the focus of aspartame lies on pure CSP solving.", "startOffset": 2, "endOffset": 13}, {"referenceID": 4, "context": "In fact, aspartame\u2019s approach can be regarded as a first-order alternative to SAT-based systems like sugar [5], where the performance of the underlying SAT solver is crucial.", "startOffset": 107, "endOffset": 110}, {"referenceID": 15, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 82, "endOffset": 90}, {"referenceID": 16, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 82, "endOffset": 90}, {"referenceID": 17, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 109, "endOffset": 117}, {"referenceID": 18, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 109, "endOffset": 117}, {"referenceID": 19, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 132, "endOffset": 140}, {"referenceID": 20, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 132, "endOffset": 140}, {"referenceID": 21, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 163, "endOffset": 167}, {"referenceID": 22, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 186, "endOffset": 190}, {"referenceID": 3, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 207, "endOffset": 213}, {"referenceID": 4, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 207, "endOffset": 213}, {"referenceID": 23, "context": "There have been several proposals of encoding constraints to SAT: direct encoding [20, 21], support encoding [22, 23], log encoding [24, 25], log support encoding [26], regular encoding [27], order encoding [4, 5], and compact order encoding [28].", "startOffset": 242, "endOffset": 246}, {"referenceID": 3, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 9, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 22, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 24, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 25, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 26, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 27, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 28, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 29, "context": "The order encoding, where Boolean variables represent whether x \u2264 i holds for variables x and values i, showed good performance for a wide range of CSPs [4, 11, 27, 29\u201334].", "startOffset": 153, "endOffset": 171}, {"referenceID": 30, "context": "Especially, the SAT-based constraint solver sugar became a winner in global constraint categories at the 2008 and 2009 CSP solver competitions [35].", "startOffset": 143, "endOffset": 147}, {"referenceID": 31, "context": "Moreover, the SAT-based CSP solver BEE [36] and the CLP system B-Prolog [37] utilize the order encoding.", "startOffset": 39, "endOffset": 43}, {"referenceID": 32, "context": "Moreover, the SAT-based CSP solver BEE [36] and the CLP system B-Prolog [37] utilize the order encoding.", "startOffset": 72, "endOffset": 76}, {"referenceID": 33, "context": "Interestingly, it has been shown that the order encoding is the only existing SAT encoding that can reduce tractable CSP to tractable SAT [38].", "startOffset": 138, "endOffset": 142}], "year": 2013, "abstractText": "Encoding finite linear CSPs as Boolean formulas and solving them by using modern SAT solvers has proven to be highly effective, as exemplified by the award-winning sugar system. We here develop an alternative approach based on ASP. This allows us to use first-order encodings providing us with a high degree of flexibility for easy experimentation with different implementations. The resulting system aspartame re-uses parts of sugar for parsing and normalizing CSPs. The obtained set of facts is then combined with an ASP encoding that can be grounded and solved by off-the-shelf ASP systems. We establish the competitiveness of our approach by empirically contrasting aspartame and sugar.", "creator": "TeX"}}}