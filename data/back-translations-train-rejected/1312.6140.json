{"id": "1312.6140", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Dec-2013", "title": "The DIAMOND System for Argumentation: Preliminary Report", "abstract": "Abstract dialectical frameworks (ADFs) are a powerful generalisation of Dung's abstract argumentation frameworks. In this paper we present an answer set programming based software system, called DIAMOND (DIAlectical MOdels eNcoDing). It translates ADFs into answer set programs whose stable models correspond to models of the ADF with respect to several semantics (i.e. admissible, complete, stable, grounded).", "histories": [["v1", "Fri, 20 Dec 2013 21:17:03 GMT  (19kb,D)", "http://arxiv.org/abs/1312.6140v1", "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey"]], "COMMENTS": "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["stefan ellmauthaler", "hannes strass"], "accepted": false, "id": "1312.6140"}, "pdf": {"name": "1312.6140.pdf", "metadata": {"source": "CRF", "title": "The DIAMOND System for Argumentation: Preliminary Report", "authors": ["Stefan Ellmauthaler", "Hannes Strass"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "In this model, arguments are treated as abstract atomic entities, and the only information that is given about them is that these entities are attacked in other ways. [3] A criticism that is often directed at these entities is their limited ability to allow only attacks between arguments, leading to a whole series of extensions of dung AFs, for example with attacks from the ranks of arguments. [4] The linking of these entities with other entities leads to a series of extensions of entities."}, {"heading": "2 Background", "text": "An abstract dialectic frame (ADF) [5] is a directed graph whose nodes represent statements or positions that can be accepted or not accepted. < v) The nodes represent dependencies: the status of a node s depends only on the status of its parents, i.e., the nodes with a direct link to s. In addition, each node has an associated acceptance condition Cs (R) = t, then s is accepted if the nodes in R are accepted and these are not accepted in Par (s). Definition 1. An abstract dialectical frame is a tuple D = (S, L) where - S is a set of statements (positions, nodes)."}, {"heading": "2.1 Answer Set Programming", "text": "A rule r is of the form \u03b1 (r) = {\u03b21,.., \u03b2m, not \u03b2m + 1., not \u03b2n, where \u03b1-A, \u03b2i-A are ground atoms and m \u2264 n \u2264 0. Each rule consists of a body B (r) = {\u03b21,.., \u03b2m, not \u03b2m + 1.,.., and a head H (r) = {\u03b1}, divided by the \u2190 symbol. We will divide the body into two parts, B (r) = B + (r), where B + (r), not \u03b21,., and B \u2212 (r), where potints H (r) = {not \u03b2m + 1., no., \"no.,\" no., \"no.\""}, {"heading": "3 DIAMOND", "text": "Our software system DIAMOND is a collection of response set programming encodings and tools to calculate the different models related to the semantics of a given ADF. The different encodings are designed around the Potsdam Answer Set Solving Collection (Potassco) [9] and the additional tools provided also use Clasp as a solver. Note that the encodings for DIAMOND are built in a modular way. To calculate the models of an ADF in terms of semantics, different modules must be grounded together to obtain the desired behavior. DIAMOND is available for download and experimentation on the website http: / / www.informatik.uni-leipzig.de / ~ ellmau / diamond. There we also provide further documentation on their use. In short, DIAMOND is a python script, 3 which can be accessed from the command line."}, {"heading": "3.1 Instance Representation", "text": "To represent an ADF for DIAMOND, the acceptance conditions must be in the functional representation as given in definition 1. (The statements of an ADF are declared by the predicate s, and the links are represented by the binary predicate l, so that l (b, a) reflects that there is a connection from b to a. The acceptance condition is modeled by the unary and tertiary predicates of ci and co. To achieve a flat representation of each set of parent statements, we use an arbitrary third formula to identify them. To express what happens to a statement if none of the parents is accepted, we use the unary versions of ci and co. Here is the DIAMOND representation of Example 1: s (b) s (c)."}, {"heading": "3.2 Implementation of \u0393D", "text": "Since all semantics are discussed about the operator, we will now explain how the operator was implemented in DIAMOND. (The resulting interpretation can be read from the predicates valid and unsat.) The interpretation for the operator is not represented by the predicates in and out. (Firstly, DIAMOND decides which of the mappings are still of interest (cii) (i.e. which of the predicates can still be fulfilled under the given interpretation): ciui, J, I."}, {"heading": "3.3 Semantics", "text": "The last two lines remove all guesses that violate the definition of the permissible model (i.e. check which guesses are correct): Step (0). {in (S, 0): s (S, 0)}. {out (S, 0): s (S, 0).: - in (S), not valid (S, 0).: - out (S), not unsat (S, 0). The complete encryption of the model uses the same concept as for the permissible model. The only difference is that the assumed model must have a fixed point (S)."}, {"heading": "4 Discussion and Future Work", "text": "This year, it is only a matter of time before an agreement is reached."}], "references": [{"title": "On the Acceptability of Arguments and its Fundamental Role in Nonmonotonic Reasoning, Logic Programming and n-Person Games", "author": ["P.M. Dung"], "venue": "Artificial Intelligence 77", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1995}, {"title": "A generalization of Dung\u2019s abstract framework for argumentation: Arguing with sets of attacking arguments", "author": ["S.H. Nielsen", "S. Parsons"], "venue": "Argumentation in Multi-Agent Systems. Volume 4766 of LNCS., Springer", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2006}, {"title": "Reasoning about preferences in argumentation frameworks", "author": ["S. Modgil"], "venue": "Artif. Intell. 173(9-10)", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2009}, {"title": "Meta-argumentation modelling I: Methodology and techniques", "author": ["G. Boella", "D.M. Gabbay", "L. van der Torre", "S. Villata"], "venue": "Studia Logica 93(2\u20133)", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2009}, {"title": "Abstract Dialectical Frameworks", "author": ["G. Brewka", "S. Woltran"], "venue": "KR.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2010}, {"title": "Abstract Dialectical Frameworks Revisited", "author": ["G. Brewka", "S. Ellmauthaler", "H. Strass", "J.P. Wallner", "S. Woltran"], "venue": "IJCAI, AAAI Press", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "On the acceptability of arguments in preference-based argumentation", "author": ["L. Amgoud", "C. Cayrol"], "venue": "UAI, Morgan Kaufmann", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1998}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "ICLP/SLP.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1988}, {"title": "Potassco: The Potsdam answer set solving collection", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "M. Ostrowski", "T. Schaub", "M. Schneider"], "venue": "AI Communications 24(2)", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "Answer Set Solving in Practice", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub"], "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning. Morgan and Claypool Publishers", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "ECLiPSe \u2013 from LP to CLP", "author": ["J. Schimpf", "K. Shen"], "venue": "CoRR abs/1012.4240", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2010}, {"title": "On the computational cost of disjunctive logic programming: Propositional case", "author": ["T. Eiter", "G. Gottlob"], "venue": "Annals of Mathematics and Artificial Intelligence 15(3\u20134)", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1995}, {"title": "Complex optimization in answer set programming", "author": ["M. Gebser", "R. Kaminski", "T. Schaub"], "venue": "Theory and Practice of Logic Programming 11(4\u20135)", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2011}, {"title": "Answer-set programming encodings for argumentation frameworks", "author": ["U. Egly", "S.A. Gaggl", "S. Woltran"], "venue": "Argument and Computation 1(2)", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2010}, {"title": "Bottom-up argumentation", "author": ["F. Toni", "P. Torroni"], "venue": "In Modgil, S., Oren, N., Toni, F., eds.: TAFA. Volume 7132 of Lecture Notes in Computer Science., Springer", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2011}, {"title": "An abstract, argumentation-theoretic approach to default reasoning", "author": ["A. Bondarenko", "P.M. Dung", "R.A. Kowalski", "F. Toni"], "venue": "Artificial Intelligence 93", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1997}, {"title": "The Argument Interchange Format", "author": ["I. Rahwan", "C. Reed"], "venue": "Argumentation in Artificial Intelligence. Springer", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2009}, {"title": "Computational Models of Argument Proceedings of COMMA 2012, Vienna, Austria, September 10-12, 2012", "author": ["B. Verheij", "S. Szeider", "S. Woltran", "eds."], "venue": "In Verheij, B., Szeider, S., Woltran, S., eds.: COMMA. Volume 245 of Frontiers in Artificial Intelligence and Applications., IOS Press", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 0, "context": "A particular, well-known formalism to model argumentation scenarios are Dung\u2019s abstract argumentation frameworks [1].", "startOffset": 113, "endOffset": 116}, {"referenceID": 1, "context": "This leads to quite a number of extensions of Dung AFs, for example with attacks from sets of arguments [2], attacks on attacks [3] and meta-argumentation [4].", "startOffset": 104, "endOffset": 107}, {"referenceID": 2, "context": "This leads to quite a number of extensions of Dung AFs, for example with attacks from sets of arguments [2], attacks on attacks [3] and meta-argumentation [4].", "startOffset": 128, "endOffset": 131}, {"referenceID": 3, "context": "This leads to quite a number of extensions of Dung AFs, for example with attacks from sets of arguments [2], attacks on attacks [3] and meta-argumentation [4].", "startOffset": 155, "endOffset": 158}, {"referenceID": 4, "context": "Unifying these and other extensions to AFs, Brewka and Woltran [5] proposed a general model, abstract dialectical frameworks (ADFs).", "startOffset": 63, "endOffset": 66}, {"referenceID": 4, "context": "An abstract dialectical framework (ADF) [5] is a directed graph whose nodes represent statements or positions that can be accepted or not.", "startOffset": 40, "endOffset": 43}, {"referenceID": 5, "context": "In recent work [6], we redefined several standard ADF semantics and defined additional ones.", "startOffset": 15, "endOffset": 18}, {"referenceID": 5, "context": "[6].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "Brewka and Woltran [5] defined an operator \u0393D over three-valued interpretations.", "startOffset": 19, "endOffset": 22}, {"referenceID": 5, "context": "[6] also defined an approach to handle preferences in ADFs.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "The approach generalises the one for AFs from Amgoud and Cayrol [7].", "startOffset": 64, "endOffset": 67}, {"referenceID": 7, "context": "To allow rules with negative body atoms, Gelfond and Lifschitz [8] proposed the stable model semantics (also called answer set semantics).", "startOffset": 63, "endOffset": 66}, {"referenceID": 8, "context": "We use clasp from the Potsdam Answer Set Solving Collection Potassco [9] as the back-end answer set solver for our software system.", "startOffset": 69, "endOffset": 72}, {"referenceID": 9, "context": "[10].", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "The different encodings are designed around the Potsdam Answer Set Solving Collection (Potassco) [9] and the additional provided tools utilise clasp as solver, too.", "startOffset": 97, "endOffset": 100}, {"referenceID": 10, "context": "As a part of the DIAMOND software bundle, we also provide an ECLPS Prolog [11] program that transforms acceptance functions given as formulas into the functional representation used by DIAMOND.", "startOffset": 74, "endOffset": 78}, {"referenceID": 11, "context": "solve these is the use of saturation [12], which however causes undesired sideeffects when employed together with meta-ASP [13].", "startOffset": 37, "endOffset": 41}, {"referenceID": 12, "context": "solve these is the use of saturation [12], which however causes undesired sideeffects when employed together with meta-ASP [13].", "startOffset": 123, "endOffset": 127}, {"referenceID": 13, "context": "The most important existing tool in this line of work is the ASPARTIX system [14] for computing extensions of Dung argumentation frameworks.", "startOffset": 77, "endOffset": 81}, {"referenceID": 5, "context": "[6] proposed revised and generalised versions of these semantics.", "startOffset": 0, "endOffset": 3}, {"referenceID": 14, "context": "Such an approach was proposed by Toni and Torroni [16] as a possible application of assumption-based argumentation frameworks [17].", "startOffset": 50, "endOffset": 54}, {"referenceID": 15, "context": "Such an approach was proposed by Toni and Torroni [16] as a possible application of assumption-based argumentation frameworks [17].", "startOffset": 126, "endOffset": 130}, {"referenceID": 16, "context": "They utilise their database for arguments in the Argument Interchange Format [19] to capture discussions via different bloggingsites and use their tool TOAST [20] to compute an acceptable consensus about the issues under discussion.", "startOffset": 77, "endOffset": 81}], "year": 2013, "abstractText": "Abstract dialectical frameworks (ADFs) are a powerful generalisation of Dung\u2019s abstract argumentation frameworks. In this paper we present an answer set programming based software system, called DIAMOND (DIAlectical MOdels eNcoDing). It translates ADFs into answer set programs whose stable models correspond to models of the ADF with respect to several semantics (i.e. admissible, complete, stable, grounded).", "creator": "LaTeX with hyperref package"}}}