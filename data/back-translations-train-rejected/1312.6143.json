{"id": "1312.6143", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Dec-2013", "title": "A System for Interactive Query Answering with Answer Set Programming", "abstract": "Reactive answer set programming has paved the way for incorporating online information into operative solving processes. Although this technology was originally devised for dealing with data streams in dynamic environments, like assisted living and cognitive robotics, it can likewise be used to incorporate facts, rules, or queries provided by a user. As a result, we present the design and implementation of a system for interactive query answering with reactive answer set programming. Our system quontroller is based on the reactive solver oclingo and implemented as a dedicated front-end. We describe its functionality and implementation, and we illustrate its features by some selected use cases.", "histories": [["v1", "Fri, 20 Dec 2013 21:24:30 GMT  (10kb,D)", "http://arxiv.org/abs/1312.6143v1", "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey"]], "COMMENTS": "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["martin gebser", "philipp obermeier", "torsten schaub"], "accepted": false, "id": "1312.6143"}, "pdf": {"name": "1312.6143.pdf", "metadata": {"source": "CRF", "title": "A System for Interactive Query Answering with Answer Set Programming", "authors": ["Martin Gebser", "Philipp Obermeier", "Torsten Schaub"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "In contrast, logic programs within the framework of stable model semantics [3] are implemented by model-based systems, namely by responses to approaches to solutions [4]. Although the latter also allows checking whether a query is conditioned by a stable model, there is so far no possibility to explore an area in which such queries are carried out without restarting the solution approach. The same applies to the interactive addition and / or deletion of temporary program parts that are useful during theory research, for example when dealing with hypotheses. An exemplary area in which such exploration capacities would be of great use is bioinformatics (cf."}, {"heading": "2 Approach", "text": "In fact, it is a matter of a way in which people are able to determine for themselves how they want to behave, and in which people are able to behave. (...) In fact, it is a matter of people being able to obey the rules. (...) In fact, it is a matter of people being able to break the rules. (...) In fact, it is a matter of people being able to determine for themselves. (...) It is as if they are able to determine for themselves what they want. (...) It is a matter of people being able to determine for themselves. (...)"}, {"heading": "3 Discussion", "text": "We have presented a simple but effective extension of the reactive ASP that enables interactive response to queries and theoretical exploration with ASP. This has been achieved through a mapping scheme between queries and reactive ASP rules, along with Oclingo's adoption-based solution capabilities, allowing programs to be temporarily added to the solution process, either for an initially limited number of interactions or until they are interactively withdrawn. A typical use case of limited program parts is integrity constraints, which represent queries that automatically disappear after they are made. By contrast, an assertion allows, for example, the exploration of the underlying area under user-defined hypotheses. All subsequent solution processes then include the claimed information until it is withdrawn by the user. The possibility of reusing basic rules and recorded conflict information via a sequence of queries distinguishes reactive ASP from ordinary one-off arguments."}], "references": [{"title": "Programming in Prolog", "author": ["W. Clocksin", "C. Mellish"], "venue": "Springer", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1981}, {"title": "Foundations of Logic Programming", "author": ["J. Lloyd"], "venue": "Springer", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1987}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Proc. ICLP, MIT", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1988}, {"title": "Answer Set Solving in Practice", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub"], "venue": "Morgan and Claypool", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "A knowledge based approach for representing and reasoning about signaling networks", "author": ["C. Baral", "K. Chancellor", "N. Tran", "N. Tran", "A. Joy", "M. Berens"], "venue": "Proc. ISMB,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2004}, {"title": "Efficient haplotype inference with answer set programming", "author": ["E. Erdem", "F. T\u00fcre"], "venue": "Proc. AAAI, AAAI", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2008}, {"title": "Detecting inconsistencies in large biological networks with answer set programming", "author": ["M. Gebser", "T. Schaub", "S. Thiele", "P. Veber"], "venue": "TPLP Journal 11(2-3)", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Repair and prediction (under inconsistency) in large biological networks with answer set programming", "author": ["M. Gebser", "C. Guziolowski", "M. Ivanchev", "T. Schaub", "A. Siegel", "S. Thiele", "P. Veber"], "venue": "Proc. KR, AAAI", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "Logic-based steady-state analysis and revision of metabolic networks with inhibition", "author": ["O. Ray", "K. Whelan", "R. King"], "venue": "Proc. CISIS, IEEE", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2010}, {"title": "Revisiting the training of logic models of protein signaling networks with ASP", "author": ["S. Videla", "C. Guziolowski", "F. Eduati", "S. Thiele", "N. Grabe", "J. Saez-Rodriguez", "A. Siegel"], "venue": "Proc. CMSB, Springer", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Reactive answer set programming", "author": ["M. Gebser", "T. Grote", "R. Kaminski", "T. Schaub"], "venue": "Proc. LPNMR, Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2011}, {"title": "Stream reasoning with answer set programming: Preliminary report", "author": ["M. Gebser", "T. Grote", "R. Kaminski", "P. Obermeier", "O. Sabuncu", "T. Schaub"], "venue": "Proc. KR, AAAI", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 0, "context": "Traditional logic programming [1,2] is based upon query answering.", "startOffset": 30, "endOffset": 35}, {"referenceID": 1, "context": "Traditional logic programming [1,2] is based upon query answering.", "startOffset": 30, "endOffset": 35}, {"referenceID": 2, "context": "Unlike this, logic programs under the stable model semantics [3] are implemented by model generation based systems, viz.", "startOffset": 61, "endOffset": 64}, {"referenceID": 3, "context": "answer set solvers [4].", "startOffset": 19, "endOffset": 22}, {"referenceID": 4, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 5, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 6, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 7, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 8, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 9, "context": "[5,6,7,8,9,10]).", "startOffset": 0, "endOffset": 14}, {"referenceID": 10, "context": "We address this shortcoming and show how recently developed systems for reactive answer set programming (ASP) [11,12] can be harnessed to provide query answering", "startOffset": 110, "endOffset": 117}, {"referenceID": 11, "context": "We address this shortcoming and show how recently developed systems for reactive answer set programming (ASP) [11,12] can be harnessed to provide query answering", "startOffset": 110, "endOffset": 117}, {"referenceID": 10, "context": "[11,12]) and enabling repeated assertions of an atom in a series of queries, the quontroller associates query programs with sequence numbers and exploits oclingo\u2019s step counter to automatically map their contents.", "startOffset": 0, "endOffset": 7}, {"referenceID": 11, "context": "[11,12]) and enabling repeated assertions of an atom in a series of queries, the quontroller associates query programs with sequence numbers and exploits oclingo\u2019s step counter to automatically map their contents.", "startOffset": 0, "endOffset": 7}], "year": 2017, "abstractText": "Reactive answer set programming has paved the way for incorporating online information into operative solving processes. Although this technology was originally devised for dealing with data streams in dynamic environments, like assisted living and cognitive robotics, it can likewise be used to incorporate facts, rules, or queries provided by a user. As a result, we present the design and implementation of a system for interactive query answering with reactive answer set programming. Our system quontroller is based on the reactive solver oclingo and implemented as a dedicated front-end. We describe its functionality and implementation, and we illustrate its features by some selected use cases.", "creator": "LaTeX with hyperref package"}}}