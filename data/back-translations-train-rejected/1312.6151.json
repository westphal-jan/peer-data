{"id": "1312.6151", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Dec-2013", "title": "Abstract Modular Systems and Solvers", "abstract": "Integrating diverse formalisms into modular knowledge representation systems offers increased expressivity, modeling convenience and computational benefits. We introduce concepts of abstract modules and abstract modular systems to study general principles behind the design and analysis of model-finding programs, or solvers, for integrated heterogeneous multi-logic systems. We show how abstract modules and abstract modular systems give rise to transition systems, which are a natural and convenient representation of solvers pioneered by the SAT community. We illustrate our approach by showing how it applies to answer set programming and propositional logic, and to multi-logic systems based on these two formalisms.", "histories": [["v1", "Fri, 20 Dec 2013 21:37:56 GMT  (41kb,D)", "http://arxiv.org/abs/1312.6151v1", "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey"]], "COMMENTS": "Proceedings of Answer Set Programming and Other Computing Paradigms (ASPOCP 2013), 6th International Workshop, August 25, 2013, Istanbul, Turkey", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["yuliya lierler", "miroslaw truszczynski"], "accepted": false, "id": "1312.6151"}, "pdf": {"name": "1312.6151.pdf", "metadata": {"source": "CRF", "title": "Abstract Modular Systems and Solvers", "authors": ["Yuliya Lierler", "Miroslaw Truszczynski", "M. Truszczynski"], "emails": ["ylierler@unomaha.edu", "mirek@cs.uky.edu"], "sections": [{"heading": null, "text": "Abstract Modular Systems and SolversYuliya Lierler1 and Miroslaw Truszczynski21 University of Nebraska at Omaha ylierler @ unomaha.edu2 University of Kentucky mirek @ cs.uky.eduAbstract. Integrating different formalities into modular knowledge representation systems offers increased expressivity, modeling convenience and computational advantages. We introduce concepts of abstract modules and abstract modular systems to study general principles behind the design and analysis of model finding programs or solutions for integrated heterogeneous multilogic systems. We show how abstract modules and abstract modular systems produce transition systems that are a natural and convenient representation of solutions advanced by the SAT community. We illustrate our approach by demonstrating how it is applicable to the response of set programming and propositional logic and based on these two formulas."}, {"heading": "1 Introduction", "text": "This year it is so far that it will only be a matter of time before it is so far, until it is so far."}, {"heading": "2 Abstract Modules", "text": "It is a vocabulary module, which is an abbreviation for M and Ml, which is an abbreviation for M. Intuitively, an edge (M, Ml) in a module indicates that the module supports all letters in M if they have a signature. An edge (M 6 =) indicates that there is a derivative of their double l (and hence, a derivative of a contradiction). An edge (M 6 =) indicates that there is a derivative of their letters."}, {"heading": "5 Learning in Solvers for AMSs.", "text": "The approach of SAT, Oliveras and Tinelli extends to our abstract attitude. Specifically, the graphics of AMSA can be expanded with \"learning transitions\" to represent approaches to solutions for AMSs that integrate learning. The intuition behind SAT is to enable new expansions by expanding the original clause database as a compilation. These \"learned\" clauses provide new \"direct derivatives\" to a SAT solution by incorporating additional applications from UnitPropagate. Within the framework of abstract modules, direct derivatives are represented by edges. Adding edges to modules captures the idea of learning by supporting new propagates that the transition rule Propagate may take an advantage of the state of abstract modules."}, {"heading": "6 Related Work", "text": "This year, the time has come for it to be able to seek a solution, to find a solution that is capable, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution."}, {"heading": "7 Conclusions", "text": "We have introduced abstract modules and abstract modular systems, demonstrating that they form a framework capable of understanding different logic and inference mechanisms that are integrated into modular knowledge presentation systems. In particular, we have shown that transition graphs, which are determined by modules and modular systems, can provide a unified representation of model-generating algorithms or solvers and simplify arguments about issues such as correctness or termination. We believe that they can be useful for theoretical comparisons of the effectiveness of solvers and for the development of new solvers. Learning, a basic technique in solver design, presents itself in two very different forms, local and global. The former corresponds to learning previously investigated in SAT and SMT and is both theoretically and practically crucial for good performance. Global learning is a new concept that we have identified in the context of modular systems. It concerns learning across modules and promises to lead to local performance enhancements."}], "references": [{"title": "The dmcs solver for distributed nonmonotonic multi-context systems", "author": ["S.E.D. Bairakdar", "M. Dao-Tran", "T. Eiter", "M. Fink", "T. Krennwallner"], "venue": "12th European Conference on Logics in Artificial Intelligence (JELIA). pp. 352\u2013355", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2010}, {"title": "Satisfiability modulo theories", "author": ["C. Barrett", "R. Sebastiani", "S. Seshia", "C. Tinelli"], "venue": "Biere, A., Heule, M., van Maaren, H., Walsch, T. (eds.) Handbook of Satisfiability, pp. 737\u2013797. IOS Press", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2008}, {"title": "Equilibria in heterogeneous nonmonotonic multi-context systems", "author": ["G. Brewka", "T. Eiter"], "venue": "Proceedings of National conference on Artificial Intelligence (AAAI). pp. 385\u2013390", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2007}, {"title": "A Tarskian informal semantics for answer set programming", "author": ["M. Denecker", "Y. Lierler", "M. Truszczynski", "J. Vennekens"], "venue": "Dovier, A., Costa, V.S. (eds.) International Conference on Logic Programming (ICLP). LIPIcs, vol. 17. Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "A uniform integration of higher-order reasoning and external evaluations in answer set programming", "author": ["T. Eiter", "G. Ianni", "R. Schindlauer", "H. Tompits"], "venue": "Proceedings of International Joint Conference on Artificial Intelligence (IJCAI). pp. 90\u201396", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Kowalski, R., Bowen, K. (eds.) Proceedings of International Logic Programming Conference and Symposium. pp. 1070\u20131080. MIT Press", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1988}, {"title": "Contextual reasoning", "author": ["F. Giunchiglia"], "venue": "Epistemologia XVI, 345\u2013364", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1993}, {"title": "Constraint logic programming: A survey", "author": ["J. Jaffar", "M. Maher"], "venue": "Journal of Logic Programming 19(20), 503\u2013581", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1994}, {"title": "A module-based framework for multilanguage constraint modeling", "author": ["M. J\u00e4rvisalo", "E. Oikarinen", "T. Janhunen", "I. Niemel\u00e4"], "venue": "Proceedings of the 10th International Conference on Logic Programming and Nonmonotonic Reasoning", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2009}, {"title": "A model-theoretic counterpart of loop formulas", "author": ["J. Lee"], "venue": "Proceedings of International Joint Conference on Artificial Intelligence (IJCAI). pp. 503\u2013508. Professional Book Center", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2005}, {"title": "Abstract answer set solvers", "author": ["Y. Lierler"], "venue": "Proceedings of International Conference on Logic Programming (ICLP). pp. 377\u2013391. Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2008}, {"title": "Abstract answer set solvers with backjumping and learning", "author": ["Y. Lierler"], "venue": "Theory and Practice of Logic Programming 11, 135\u2013169", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2011}, {"title": "On the relation of constraint answer set programming languages and algorithms", "author": ["Y. Lierler"], "venue": "Proceedings of the AAAI Conference on Artificial Intelligence. MIT Press", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "Transition systems for model generators \u2014 a unifying approach", "author": ["Y. Lierler", "M. Truszczynski"], "venue": "Theory and Practice of Logic Programming, 27th Int\u2019l. Conference on Logic Programming (ICLP\u201911) Special Issue 11, issue 4-5", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2011}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V. Marek", "M. Truszczy\u0144ski"], "venue": "The Logic Programming Paradigm: a 25-Year Perspective, pp. 375\u2013398. Springer Verlag", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1999}, {"title": "SAT(ID): Satisfiability of propositional logic extended with inductive definitions", "author": ["M. Mari\u00ebn", "J. Wittocx", "M. Denecker", "M. Bruynooghe"], "venue": "SAT. pp. 211\u2013224", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2008}, {"title": "Generality in Artificial Intelligence", "author": ["J. McCarthy"], "venue": "Communications of the ACM 30(12),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1987}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 241\u2013273", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1999}, {"title": "Extending the Smodels system with cardinality and weight constraints", "author": ["I. Niemel\u00e4", "P. Simons"], "venue": "Minker, J. (ed.) Logic-Based Artificial Intelligence, pp. 491\u2013521. Kluwer", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2000}, {"title": "Solving SAT and SAT modulo theories: From an abstract Davis-Putnam-Logemann-Loveland procedure to DPLL(T)", "author": ["R. Nieuwenhuis", "A. Oliveras", "C. Tinelli"], "venue": "Journal of the ACM 53(6), 937\u2013977", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2006}, {"title": "Modular equivalence for normal logic programs", "author": ["E. Oikarinen", "T. Janhunen"], "venue": "17th European Conference on Artificial Intelligence(ECAI). pp. 412\u2013416", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2006}, {"title": "Constraint programming", "author": ["F. Rossi", "P. van Beek", "T. Walsh"], "venue": "van Harmelen, F., Lifschitz, V., Porter, B. (eds.) Handbook of Knowledge Representation, pp. 181\u2013212. Elsevier", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2008}, {"title": "Extending and implementing the stable model semantics", "author": ["P. Simons", "I. Niemel\u00e4", "T. Soininen"], "venue": "Artificial Intelligence 138, 181\u2013234", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2002}, {"title": "A semantic account for modularity in multi-language modelling of search problems", "author": ["S. Tasharrofi", "E. Ternovska"], "venue": "Frontiers of Combining Systems, 8th International Symposium (FroCoS). pp. 259\u2013274", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}, {"title": "Solving modular model expansion tasks", "author": ["S. Tasharrofi", "X.N. Wu", "E. Ternovska"], "venue": "CoRR abs/1109.0583", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2011}, {"title": "The well-founded semantics for general logic programs", "author": ["A. Van Gelder", "K. Ross", "J. Schlipf"], "venue": "Journal of ACM 38(3), 620\u2013650", "citeRegEx": "26", "shortCiteRegEx": null, "year": 1991}], "referenceMentions": [{"referenceID": 16, "context": "Similar issues arise in research on multi-context systems where the major task is to model contextual information and the flow of information among contexts [17,7].", "startOffset": 157, "endOffset": 163}, {"referenceID": 6, "context": "Similar issues arise in research on multi-context systems where the major task is to model contextual information and the flow of information among contexts [17,7].", "startOffset": 157, "endOffset": 163}, {"referenceID": 7, "context": "Constraint logic programming [8] and satisfiability modulo theories (SMT) [20,2] are well-known examples of formalisms stemming directly from such considerations.", "startOffset": 29, "endOffset": 32}, {"referenceID": 19, "context": "Constraint logic programming [8] and satisfiability modulo theories (SMT) [20,2] are well-known examples of formalisms stemming directly from such considerations.", "startOffset": 74, "endOffset": 80}, {"referenceID": 1, "context": "Constraint logic programming [8] and satisfiability modulo theories (SMT) [20,2] are well-known examples of formalisms stemming directly from such considerations.", "startOffset": 74, "endOffset": 80}, {"referenceID": 12, "context": "More recent examples include constraint answer set programming (CASP) [13], which integrates answer set programming (ASP) [6,15,18]) with constraint modeling languages [22], and \u201cmultilogic\u201d formalisms PC(ID) [16], SM(ASP) [14] and ASP-FO [4] that combine modules ar X iv :1 31 2.", "startOffset": 70, "endOffset": 74}, {"referenceID": 5, "context": "More recent examples include constraint answer set programming (CASP) [13], which integrates answer set programming (ASP) [6,15,18]) with constraint modeling languages [22], and \u201cmultilogic\u201d formalisms PC(ID) [16], SM(ASP) [14] and ASP-FO [4] that combine modules ar X iv :1 31 2.", "startOffset": 122, "endOffset": 131}, {"referenceID": 14, "context": "More recent examples include constraint answer set programming (CASP) [13], which integrates answer set programming (ASP) [6,15,18]) with constraint modeling languages [22], and \u201cmultilogic\u201d formalisms PC(ID) [16], SM(ASP) [14] and ASP-FO [4] that combine modules ar X iv :1 31 2.", "startOffset": 122, "endOffset": 131}, {"referenceID": 17, "context": "More recent examples include constraint answer set programming (CASP) [13], which integrates answer set programming (ASP) [6,15,18]) with constraint modeling languages [22], and \u201cmultilogic\u201d formalisms PC(ID) [16], SM(ASP) [14] and ASP-FO [4] that combine modules ar X iv :1 31 2.", "startOffset": 122, "endOffset": 131}, {"referenceID": 21, "context": "More recent examples include constraint answer set programming (CASP) [13], which integrates answer set programming (ASP) [6,15,18]) with constraint modeling languages [22], and \u201cmultilogic\u201d formalisms PC(ID) [16], SM(ASP) [14] and ASP-FO [4] that combine modules ar X iv :1 31 2.", "startOffset": 168, "endOffset": 172}, {"referenceID": 15, "context": "More recent examples include constraint answer set programming (CASP) [13], which integrates answer set programming (ASP) [6,15,18]) with constraint modeling languages [22], and \u201cmultilogic\u201d formalisms PC(ID) [16], SM(ASP) [14] and ASP-FO [4] that combine modules ar X iv :1 31 2.", "startOffset": 209, "endOffset": 213}, {"referenceID": 13, "context": "More recent examples include constraint answer set programming (CASP) [13], which integrates answer set programming (ASP) [6,15,18]) with constraint modeling languages [22], and \u201cmultilogic\u201d formalisms PC(ID) [16], SM(ASP) [14] and ASP-FO [4] that combine modules ar X iv :1 31 2.", "startOffset": 223, "endOffset": 227}, {"referenceID": 3, "context": "More recent examples include constraint answer set programming (CASP) [13], which integrates answer set programming (ASP) [6,15,18]) with constraint modeling languages [22], and \u201cmultilogic\u201d formalisms PC(ID) [16], SM(ASP) [14] and ASP-FO [4] that combine modules ar X iv :1 31 2.", "startOffset": 239, "endOffset": 242}, {"referenceID": 19, "context": "Importantly, abstract modules and abstract modular systems give rise to transition systems of the type introduced by Nieuwenhuis, Oliveras, and Tinelli [20] in their study of SAT and SMT solvers.", "startOffset": 152, "endOffset": 156}, {"referenceID": 19, "context": "[20] for this purpose.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "where {a} represents the so-called choice rule [23].", "startOffset": 47, "endOffset": 51}, {"referenceID": 19, "context": "[20] proposed to use transition systems to describe search procedures involved in model-finding programs commonly called solvers, and developed that approach for the case of SAT.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "Lierler [12] proposed a similar framework for specifying an answer set solver SMODELS.", "startOffset": 8, "endOffset": 12}, {"referenceID": 13, "context": "Lierler and Truszczynski [14] extended that framework to capture such modern ASP solvers as CMODELS and CLASP, as well as a PC(ID) solver MINISAT(ID).", "startOffset": 25, "endOffset": 29}, {"referenceID": 19, "context": "[20] to the case of abstract modules.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20], adjusting the presentation to the form convenient for our purposes.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20] stated for the graph DPF :", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "We assume the reader to be familiar with the concept of unfounded sets [26,10].", "startOffset": 71, "endOffset": 78}, {"referenceID": 9, "context": "We assume the reader to be familiar with the concept of unfounded sets [26,10].", "startOffset": 71, "endOffset": 78}, {"referenceID": 10, "context": "The graph AS\u03a0 is inspired by the graph SM\u03a0 introduced by Lierler [11] for specifying an answer set solver SMODELS [19].", "startOffset": 65, "endOffset": 69}, {"referenceID": 18, "context": "The graph AS\u03a0 is inspired by the graph SM\u03a0 introduced by Lierler [11] for specifying an answer set solver SMODELS [19].", "startOffset": 114, "endOffset": 118}, {"referenceID": 10, "context": "Corollary 2 in this form was one of the main results stated in [11]4.", "startOffset": 63, "endOffset": 67}, {"referenceID": 10, "context": "4 In [11], Lierler presented the SM\u03a0 graph in a slightly different from: the states of that graph permitted inconsistent states of literals, which in turn allowed to unify the Fail and Backtrack transition rules for different propagators.", "startOffset": 5, "endOffset": 9}, {"referenceID": 13, "context": "The results presented above imply, as special cases, earlier results on the logics PC(ID) and SM(ASP), and their solvers [14].", "startOffset": 121, "endOffset": 125}, {"referenceID": 2, "context": "In an important development, Brewka and Eiter [3] introduced an abstract notion of a heterogeneous nonmonotonic multi-context system (MCS).", "startOffset": 46, "endOffset": 49}, {"referenceID": 4, "context": "Since their inception, multi-context systems have received substantial attention and inspired implementations of hybrid reasoning systems including DLVHEX [5] and DMCS [1].", "startOffset": 155, "endOffset": 158}, {"referenceID": 0, "context": "Since their inception, multi-context systems have received substantial attention and inspired implementations of hybrid reasoning systems including DLVHEX [5] and DMCS [1].", "startOffset": 168, "endOffset": 171}, {"referenceID": 20, "context": "Oikarinen and Janhunen [21] proposed a modular version of answer set programs called lp-modules.", "startOffset": 23, "endOffset": 27}, {"referenceID": 8, "context": "J\u00e4rvisalo, Oikarinen, Janhunen, and Niemel\u00e4 [9], and Tasharrofi and Ternovska [24] studied the generalizations of lp-modules.", "startOffset": 44, "endOffset": 47}, {"referenceID": 23, "context": "J\u00e4rvisalo, Oikarinen, Janhunen, and Niemel\u00e4 [9], and Tasharrofi and Ternovska [24] studied the generalizations of lp-modules.", "startOffset": 78, "endOffset": 82}, {"referenceID": 8, "context": "[9] and Tasharrofi and Ternovska [24], we define such conjunction for any modules disregarding their internal structure and interdepencies between each other.", "startOffset": 0, "endOffset": 3}, {"referenceID": 23, "context": "[9] and Tasharrofi and Ternovska [24], we define such conjunction for any modules disregarding their internal structure and interdepencies between each other.", "startOffset": 33, "endOffset": 37}, {"referenceID": 24, "context": "Tasharrofi, Wu, and Ternovska [25] developed and studied an algorithm for processing modular model expansion tasks in the abstract multi-logic system concept developed by Tasharrofi and Ternovska [24].", "startOffset": 30, "endOffset": 34}, {"referenceID": 23, "context": "Tasharrofi, Wu, and Ternovska [25] developed and studied an algorithm for processing modular model expansion tasks in the abstract multi-logic system concept developed by Tasharrofi and Ternovska [24].", "startOffset": 196, "endOffset": 200}, {"referenceID": 19, "context": "[20], Lierler [11], and Lierler and Truszczynski [14].", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[20], Lierler [11], and Lierler and Truszczynski [14].", "startOffset": 14, "endOffset": 18}, {"referenceID": 13, "context": "[20], Lierler [11], and Lierler and Truszczynski [14].", "startOffset": 49, "endOffset": 53}], "year": 2013, "abstractText": "Modular Systems and Solvers Yuliya Lierler and Miroslaw Truszczynski 1 University of Nebraska at Omaha ylierler@unomaha.edu 2 University of Kentucky", "creator": "LaTeX with hyperref package"}}}