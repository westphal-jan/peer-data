{"id": "1401.3459", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Jan-2014", "title": "Generic Preferences over Subsets of Structured Objects", "abstract": "Various tasks in decision making and decision support systems require selecting a preferred subset of a given set of items. Here we focus on problems where the individual items are described using a set of characterizing attributes, and a generic preference specification is required, that is, a specification that can work with an arbitrary set of items. For example, preferences over the content of an online newspaper should have this form: At each viewing, the newspaper contains a subset of the set of articles currently available. Our preference specification over this subset should be provided offline, but we should be able to use it to select a subset of any currently available set of articles, e.g., based on their tags. We present a general approach for lifting formalisms for specifying preferences over objects with multiple attributes into ones that specify preferences over subsets of such objects. We also show how we can compute an optimal subset given such a specification in a relatively efficient manner. We provide an empirical evaluation of the approach as well as some worst-case complexity results.", "histories": [["v1", "Wed, 15 Jan 2014 05:18:50 GMT  (333kb)", "http://arxiv.org/abs/1401.3459v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["maxim binshtok", "ronen i brafman", "carmel domshlak", "solomon eyal shimony"], "accepted": false, "id": "1401.3459"}, "pdf": {"name": "1401.3459.pdf", "metadata": {"source": "CRF", "title": "Generic Preferences over Subsets of Structured Objects", "authors": ["Maxim Binshtok", "Ronen I. Brafman", "Carmel Domshlak", "Solomon E. Shimony"], "emails": ["MAXIMBI@CS.BGU.AC.IL", "BRAFMAN@CS.BGU.AC.IL", "DCARMEL@IE.TECHNION.AC.IL", "SHIMONY@CS.BGU.AC.IL"], "sections": [{"heading": null, "text": "Subset of a given set of articles. Here, we focus on problems where the individual articles are described by a set of characteristic attributes and a general preference specification is required, i.e. a specification that can work with any set of articles. For example, preferences over the content of an online newspaper should take this form: each time you look at the newspaper, the newspaper contains a subset of the currently available article. Our preference specification over this subset should be made available offline, but we should be able to use it to select a subset of a currently available set of articles, e.g. based on their tags. We present a general approach to eliminating formalities for defining preferences over objects with multiple attributes in those that indicate preferences over subsets of such objects. We also show how we can calculate an optimal subset in a relatively efficient way, taking such a specification into account. We offer an empirical assessment of the approach and some results in the worst case of complexity."}, {"heading": "1. Introduction", "text": "Another problem of interest, however, is that the selection of a particular group of elements that appear on the user's screen is not as pronounced as the selection of articles that appear on the screen, but rather the selection of the best articles for a newspaper or the best members of a committee, etc. Previous work on this problem has largely focused on the question of how to construct an arrangement of elements that are given over the elements of the system (Barbera, Bossert, Pattanaik, 2004). Ultimately, the main distinction made between the individual elements that are mutually exclusive is only one."}, {"heading": "2. Specifying Set Preferences", "text": "The formalism we use to determine preferences is based on a basic assumption: the elements that make up interest groups are described by some attributes, and the values of these attributes are what distinguish different elements. We will use S to denote the set of individual elements, and X to denote the set of attributes that describe these elements. Let's imagine, for example, that the \"points\" in question are members of the US Senate, and the attributes and their values are: party affiliation (Republican, Democrat), views (liberal, conservative, ultra-conservative), and experience (experienced, inexperienced)."}, {"heading": "2.1 From Properties of Items to Properties of Item Sets", "text": "In view of the fact that the number of positions we have in a row is very high, we can already talk about more complex positions, for example the way in which the individual positions are defined. < < / p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p"}, {"heading": "2.2 Reasoning with Set Preferences", "text": "\"Once we have established the defined properties of interest, we can define preferences over the values of these properties.\" \"This prefers any preference specification formalism. Here we discuss two specific formalisms, namely TCP networks (Brafman et al., 2006a), an extension of the CP networks (Boutilier et al., 2004), and Generalized Additively Independent (GAI) -value functions (Bacchus & Grove, 1995; Fishburn, 1969). The former is a formalism for purely qualitative properties, which result in a partial preference order over the objects of interest. The latter is a quantitative specification that can represent any value of functionality.\" Let P = {P1, Pk} be some collection of defined properties. A TCP-net over the P statements of the following two types: (1) Conditional Value Preference Statements Statues. \"\" If \"Piditional\" 1 = 1. \"If\" If \"Piditional\" 1 = 1."}, {"heading": "3. Finding an Optimal Subset", "text": "In general, given a preference specification and a set of S available elements, our goal is to find an optimal subset of Sopt S in relation to the preference specification. That is, for any other group of S'S, we have found that the properties that satisfy Sopt are no less desirable than the properties that satisfy S. We will now consider two classes of algorithms to find such an optimal subset. These two classes of algorithms differ in the space in which they seek. In the next section, we will describe a comparative empirical evaluation of these algorithms. For our ongoing example, we will use the following set of available elements S: o1 Republican conservative experience o2 Republican experience o3 Republican experience o4 Democrat experience"}, {"heading": "3.1 Searching in Sets Space", "text": "The most obvious approach to generating an optimal subset is to search directly in the space of the subsets. A priori, this approach is not too attractive, and indeed we will see later that our implementation of this approach cannot be extended any further. However, since we are often interested in small-size sets and heuristics can be used to improve the quality of the search, we thought it would be worth exploring this approach. (S) Comments on the maximum value of a superset of S. The algorithm maintains a Q queue of sets, and this queue is initialized only to access an upper-bound UB (S) and a lower-bound LB (S) estimate of the maximum value of a superset of S. The Q queue of sets is initialized to contain only the empty set. At each step, the algorithm selects a highest upper-bound set of S from the queue."}, {"heading": "3.2 Searching over CSPs", "text": "The attractiveness of the individual subsets is made possible in relation to a specified set of set properties P = 2, and thus different sets that provide all identical property values are equivalent from our perspective. The immediate conclusion is that looking separately at such preferably equivalent subsets of available objects S is redundant. To remove this redundancy, we propose an alternative method in which we search directly via set property value combinations, if and only if there is a subset of set property values under consideration, it is not obvious whether we can find such a combination of properties. To answer this question, we generate a CSP that is satisfactory if and only if there is a subset of S with the considered set property values. The general search procedure works schematically as follows. We generate combinations of sets of set property values. For each such combination, we look for a subset of sets of available property values, the combination of these sets 3."}, {"heading": "3.3 Solving the underlying CSPs", "text": "Our algorithm for solving the intermediate CSPs is based on the well-known backtrack search algorithm, first introduced by Prosser (1993) in a simple iterative form. At the same time, we can adapt both the algorithm and some known improvements in the CSP solution (such as NoGood Recording and Forward Checking (FC)) to the specifics of the CSPs in our environment. First, we can statically discuss variables and their values from the least restricted (although we also conduct a few experiments with dynamic variables / orders of values). Our motivation for static ordering is twofold: firstly, because the restrictions are very global, we can perform the order in a pre-processing phase; secondly, as discussed in the previous section, static ordering allows us to make better use of CSPs in solving the ascendant CSPs."}, {"heading": "3.3.1 NOGOOD RECORDING", "text": "In fact, most of them are able to determine for themselves what they want to do and what they want to do."}, {"heading": "3.3.2 SEARCH ALGORITHM", "text": "The procedure described in Figure 4 extends the basic backtrack algorithm with a subroutine CANIMPROVE, which can be modified to include any combination of the previously discussed in-depth checks to use techniques for detecting conflicts early, including the NoGoods check. Also added is a call to the ADDNOGOOD subroutine to capture NoGoods during traceability. P and n, the generated instance of a CSP problem with variables indexed from 1 to | S |, and the node in the tree-space search4. Without losing generality, we assume that each element in the set of available items affects at least one constraint set C constraint constraint constraint constraint constraint constraint constraint constraint constraint constraint constraint constraint constraint constraint constraint can be safely eliminated."}, {"heading": "4. Experimental Results", "text": "We evaluated the various algorithms using a subset of the film database, which is publicly available on imdb.com. We simulated a scenario of film selection for a three-day film festival according to the preferences of the organizers. Three models of increasing complexity were developed to reflect the preferences of the organizers; these models are defined in the form of 5, 9 and 14 set properties, respectively. Furthermore, the total number of films is limited to 5 (which we have actually modelled with a very strong preference). Figure 5 shows the list of 14 properties and their modifications; P5 and P9 consist of the corresponding prefixes (SP1 to SP5 and SP1 to SP9, respectively) of P14. To produce even more complex problems that cause many setbacks in the area of set property assignments, we slightly modified the 14 property model and created two additional models, which are henceforth referred to as P \u2032 14 and P \u2032 14."}, {"heading": "4.1 Preference Specification", "text": "This year it is more than ever before."}, {"heading": "5. Complexity Analysis", "text": "Although we have reached empirically reasonable runtimes when searching through CSPs, both classes of algorithms described above have exponential worst-case runtime, which raises the question of whether the problem itself is mathematically difficult. Obviously, optimizing the subset of external constraints is NP-hard. Below, we show that even without external constraints, the problem typically remains NP-hard, even with significant limitations on the problem. Of course, the complexity of subset selection depends on the exact nature of the preference formalism used. Most of the results presented here assume a TCP net-based specification; the hardness results for this model are directly applicable to the GAI model based on an existing reduction (Brafman & Domshlak, 2008). In some cases, problems traceable under the TCPnet model become NP-hard if a GAI model is used instead. Unless otherwise specified, CP assumes that the preference is based on the P model."}, {"heading": "5.1 NP-Hard Classes", "text": "The question of the value of the property is therefore a question of the value of the property. (This means that we have ownership of the property of G = 2 and K = 0). The proof is by a polynomial reduction of the known NP-Hard Vertex Cover (VC) problem. In view of a diagram G = (V, E), a vertex cover of G is a vertex cover of G = 2 and K = 0. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V.\" V. \"V."}, {"heading": "5.2 Tractable Classes", "text": "In both trivially tractable (Section 5.2.1) and non-trivially tractable (Section 5.2.2) cases, we assume that the relational symbols are either equality or inequality, that the specification of a property uses only equality (\"attribute = value\"), and that we also do not allow an empty specified property to be specified, the latter restriction being based on the fact that the empty specified property is special in that it enriches the descriptive power by allowing an additional attribute to be simulated in certain cases, and the limitation of the individual attribute is critical to our tractability. Before proceeding with the actual results, we note that a specified subline with a single attribute cannot specify specified properties. & < < <"}, {"heading": "5.2.1 TRIVIALLY TRACTABLE CLASS", "text": "Theorem 3. Finding an optimal subset of a given set of items (POS) in relation to a TCP net preference specification is in P, if the items are described in relation to a single attribute and all the properties set are atomic (i.e. we have a = 1 and k = 0).An algorithm for the problem class in Theorem 3 is in Figure 9. The algorithm runs in time O (m2n), where m is the number of properties set and n is the number of items available. The for loop in line 4 of the algorithm iterates over all properties set, checking compatibility with the properties considered previously each time, which takes time.The procedures GETSATISFYINGSET (\u00b7) and HASSATISFYINGSET (\u00b7) and HASSATISFYINGSET (\u00b7) must be processed each time in S only once, which is the total algorithm of the 2P. Therefore, this is the 2P algorithm."}, {"heading": "5.2.2 NON-TRIVIALLY TRACTABLE CLASS", "text": "This year, it has reached the stage where it will be able to take the lead."}, {"heading": "6. Related Work", "text": "In the introduction, we mentioned the closely related work of desJardins and Wagstaff (2005). In this approach, the motivation is to provide the user with a diverse set of values, either to better reflect the range of possible choices for applications in which the user ultimately needs to select a single element, or if the variety of the set selected is a separate goal. Price and Messinger (2005) work explicitly addresses this issue. Specifically, they look at the problem of recommending articles to a user and consider it a kind of partial selection problem. For example, we assume that we want to recommend a digital camera to a user, and we are able to recommend cameras, and Messinger considers the question of how to select this set, with the candidate maximizing the expected value of the user's choice. They propose a concrete algorithmic approach to dealing with this problem."}, {"heading": "7. Conclusion", "text": "We proposed a simple but general approach to eliminating all attribute-based preference formalisms in order to see which areas best fit a scheme; we then focused on instantiating this idea through a specific language for defining specified properties, and proposed two methods for calculating an optimal subset in the face of such a specification, one based on the search for the space of explicit subsets, while the other search queries are presented as CSPs using implicit subsets. Both search spaces are significant regardless of the specific underlying preference specification algorithm, although the exact search and boundary generation method will vary. We focused on two concrete and popular specification formalisms, a qualitative and a quantitative one on which we experiment and provide complexity outcomes. Although the problem is generally NP-hard, as expected, the experimental results are quite encouraging. We would like to reiterate that other choices, both for the specification language and the specific formality language, are better suited to the specific formality of both cases."}, {"heading": "Acknowledgments", "text": "Preliminary versions of this work appeared in (Brafman, Domshlak, Shimony, & Silver, 2006b; Binshtok, Brafman, Shimony, Mani, & Boutilier, 2007).The authors thank our anonymous reviewers for their useful comments and suggestions. Brafman was partially supported by NSF funding IIS-0534662, Brafman and Domshlak were supported by COST action IC0602, Binshtok, Brafman and Shimony were supported by Deutsche Telekom Laboratories at Ben-Gurion University, the Paul Ivanier Center for Robotics Research and Production Management and the Lynn and William Frankel Center for Computer Science."}], "references": [], "referenceMentions": [], "year": 2009, "abstractText": "Various tasks in decision making and decision support systems require selecting a preferred subset of a given set of items. Here we focus on problems where the individual items are described using a set of characterizing attributes, and a generic preference specification is required, that is, a specification that can work with an arbitrary set of items. For example, preferences over the content of an online newspaper should have this form: At each viewing, the newspaper contains a subset of the set of articles currently available. Our preference specification over this subset should be provided offline, but we should be able to use it to select a subset of any currently available set of articles, e.g., based on their tags. We present a general approach for lifting formalisms for specifying preferences over objects with multiple attributes into ones that specify preferences over subsets of such objects. We also show how we can compute an optimal subset given such a specification in a relatively efficient manner. We provide an empirical evaluation of the approach as well as some worst-case complexity results.", "creator": "TeX"}}}