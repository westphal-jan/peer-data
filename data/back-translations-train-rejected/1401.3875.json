{"id": "1401.3875", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jan-2014", "title": "On-line Planning and Scheduling: An Application to Controlling Modular Printers", "abstract": "We present a case study of artificial intelligence techniques applied to the control of production printing equipment. Like many other real-world applications, this complex domain requires high-speed autonomous decision-making and robust continual operation. To our knowledge, this work represents the first successful industrial application of embedded domain-independent temporal planning. Our system handles execution failures and multi-objective preferences. At its heart is an on-line algorithm that combines techniques from state-space planning and partial-order scheduling. We suggest that this general architecture may prove useful in other applications as more intelligent systems operate in continual, on-line settings. Our system has been used to drive several commercial prototypes and has enabled a new product architecture for our industrial partner. When compared with state-of-the-art off-line planners, our system is hundreds of times faster and often finds better plans. Our experience demonstrates that domain-independent AI planning based on heuristic search can flexibly handle time, resources, replanning, and multiple objectives in a high-speed practical application without requiring hand-coded control knowledge.", "histories": [["v1", "Thu, 16 Jan 2014 05:10:17 GMT  (1176kb)", "http://arxiv.org/abs/1401.3875v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["wheeler ruml", "minh binh do", "rong zhou", "markus p j fromherz"], "accepted": false, "id": "1401.3875"}, "pdf": {"name": "1401.3875.pdf", "metadata": {"source": "CRF", "title": "On-line Planning and Scheduling: An Application to Controlling Modular Printers", "authors": ["Wheeler Ruml", "Rong Zhou", "Markus P. J. Fromherz"], "emails": [], "sections": [{"heading": "1. Introduction", "text": "In fact, it is the case that one is able to put oneself at the top of society."}, {"heading": "2. Application Context", "text": "In fact, most of us will be able to retaliate without being able to retaliate."}, {"heading": "3. System Overview", "text": "A complete printing system includes many components, including print job submission, print job management and planning, sheet management and planning, image reproduction and distribution, low-threshold module control, hardware media handling, and exception management. This paper focuses on sheet level planning issues, including exception management. Before discussing a topic in detail, this section provides an overview of those issues that most directly affect sheet planning, including hardware control and exception management. 1. For operator safety, the system should no longer use a module that has an access lid opened, even if it were hypothetically possible to repair one part of the module while another is in use. Figure 3 shows the basic architecture of the planning system and how it communicates with the machine controller. The overall goal is to minimize the makespan to the combined global plan for all sheets to optimize system throughput."}, {"heading": "3.1 Planning", "text": "This year, it is more than ever in the history of the city, where it is so far that it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place."}, {"heading": "3.2 Control", "text": "As shown in Figure 2, our system consists of two feeders on the left, two finishing rails on the right, and four printing presses each with one of the four \"quadrants\" of the printer. There are three high-speed rails that connect the feeders to the finisher rails, but there are only two types of modules: \"straight through\" and \"three-way.\" Each module has its own processor and \"off-ramps.\" All modules run the same distributed algorithms for government assessment and control and communicate with each other."}, {"heading": "3.3 Previous Work", "text": "In fact, most of them are able to survive on their own, without being able to survive on their own."}, {"heading": "4. Nominal Sheet Planning", "text": "The Sheet Scheduler creates a plan for each sheet of an order using a combination of regression planning and part-order planning. It plans by adding one modulation action at a time, starting with a finisher, until the sequence of actions reaches an investor. Adding an action to the route of a sheet (i.e. plan) results in resource allocation for all resources required to perform this action. Given the redundancy of the media path in the RMP, the planner usually faces multiple decisions about which action to add at each planning step. To organize this search, the planner uses the best first A * search with a plan chart heuristically adjusted to resource conflicts, which estimates how promising each plan is. Unlike conventional regression planners, in order to maintain maximum flexibility, all action times such as the beginning and end of each action and each resource allocation are presented as flexible time points and not absolute times."}, {"heading": "4.1 Domain Language", "text": "In fact, most of them will be able to play by the rules they have imposed on themselves."}, {"heading": "4.2 Temporal Reasoning", "text": "This year it is more than ever before."}, {"heading": "4.3 Planning a Sheet", "text": "Once the optimal plan for a leaf has been found, the resource allocations and STN used for the plan are returned to the plan manager and become the basis for planning the next leaf. An unusual feature of our planning approach is that we seamlessly integrate planning and planning. Action start times are not fixed, but limited only by time constraints in the STN. We insist that any possible overlaps in allocations for the same resource are resolved immediately, potentially resulting in multiple children for a single action choice. This allows the timing to update the limits of action time and the search for a guideline. While the plan for a single leaf is a fully ordered sequence of actions, there are sub-orders between actions that belong to plans of different leaves to represent resource conflict solutions."}, {"heading": "4.3.1 State Representation", "text": "Since the plan must be feasible in the context of previous plans, the state contains information about both the current sheet and previous plans. Specifically, the state is a triple < Literals, Tdb, Rsrcs > in which: Letters describes the regressive logical state of the current sheet. We distinguish between words whose status is true, false or unknown (Le, Baral, Zhang, & Tran, 2004). Distinguishing between false and unknown letters is important in our area because there can be fine-grained limitations on acceptable values for non-specific attributes of the sheet. For example, if a sheet S is the first of a given print task, then the finisher representing the final position of the sheet that cannot be assigned to another finisher that is not assigned to another print job when the plan for this sheet S is executed."}, {"heading": "4.3.2 Branching on Applicable Actions", "text": "In fact, it is in such a way that it is a way in which people are able to live in it, to live, to live, to live, to live, to live, to live, to live, to live, to work, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live, to live,"}, {"heading": "4.3.3 Branching on Resource Allocation Orderings", "text": "While the first step in creating regressive states is to branch out over the actions applicable in L, the application of each candidate action a may actually lead to multiple child nodes due to resource disputes. Some planning algorithms use complex disjunctive constraints considerations to avoid premature branching to ordering decisions that could well be resolved by propagation (Baptiste & Pape, 1995). We take a different approach by insisting that potential overlaps in the assignments to the same resource can be resolved immediately. Temporary constraints are posted to extend potentially overlapping assignments and these changes to the action times. As many action durations are relatively rigid in typical printers, this aggressive engagement can cause changes in the potential end times of a plan, which directly contributes to directing the search process. As multiple arrangements may be possible, there may be many resulting child search terms that do not refer to."}, {"heading": "4.3.4 Heuristic Estimation", "text": "For each potential plan suffix, a lower limit is calculated on the remaining Makespan to guide the planner's planning. (Figure 11 illustrates how this heuristic estimate is used.) In the figure, the Planning Start Time (t1) refers to the time in which the planning process can be started and the earliest start time can be started. (Figure 11 illustrates how the current Planning Time (t2) is the estimated time in which we will find a plan for the current sheet, and thus the earliest time in which any action can be planned. Note that in practice the communication of the machine controller and the negotiation time is also added to the predicted planning time. The hypothetical start time of the plan when it is found (t3) is limited to happen after this earliest possible execution time of the plan (t2). A plan is limited to the end after this for previous sheets in the same print job (t5), but is not necessarily necessary."}, {"heading": "4.4 Evaluation of Nominal Planning", "text": "In fact, it is such that most of them will be able to move into another world, in which they are in a position, in which they are able to integrate themselves, in which they are able to live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they live, in which they live, in which they, in which they are able to move, in which they are able to change the world, in which they live, in which they are able to live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live in which they live, in which they live, in which they live, in which they live in which they live, in which they live, in which they live in which they live, in which they live, in which they live in which they live, in which they live, in which they live in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they, in which they live, in which they live, in which they, in which they, in which they live, in which they, in which they live, in which they, in"}, {"heading": "4.4.1 Scaling Against Generic Planners", "text": "Although our planner has certain features, such as controllable action times that go beyond the capabilities of existing planners, we have already tested them on two models, it is still interesting to compare with offline systems to validate our new approach. If existing generic systems could solve basic pressure control problems well, it would be possible to extend them rather than develop the more specialized planner architecture described above. Therefore, we have built a tool to automatically convert our custom domain language to the planning language PDDL2.1, allowing us to test state-of-the-art planners. While our domain needs to be simplified to meet the limitations of the PDDL, we find that even these simplified problems are not easily solved by state-of-the-art academic planners such as SGPlan (Chen, Hsu, & Wah, 2006) and LPG (Gerevini, Saetti, & Serina, 2003), the planner time for GPG-GPG-GPG-GPG-GPG is not a better machine for both LPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-Planner is-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-Planner is-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-Planner has-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-GPG-Planner-Planner-Planner-"}, {"heading": "4.4.2 The 2008 International Planning Competition", "text": "In fact, it is a way in which people are able to determine for themselves how they want to behave and how they want to behave."}, {"heading": "5. Exception Handling", "text": "While maintaining high productivity and thus high return on investment, this is the most common and important goal, it is by no means the only thing that interests device owners. To reduce the need for operator oversight and expertise and allow the use of very complex mechanisms, the system needs to be as autonomous as possible. Because operators make mistakes and even sophisticated system modules can fail, the system needs to cope with execution errors. This is a crucial part of the RMP value system. Imagine a printer or copier that never seems to block, but is a little slower than the month."}, {"heading": "5.1 Related Work", "text": "Markov decision-making processes (Boutilier, Dean, & Hanks, 1999) and contingency planning (Pryor & Collins, 1996) are usually slow, especially in a dynamic environment with complex time constraints like ours, and are not suitable for our area where exceptions are not common but need to be responded to very quickly. Fox, Gerevini, Long and Serina (2006) discuss the trade-off between rescheduling and plan-repair strategies for dealing with execution errors. Their algorithms work offline and not in an online real-time environment like ours and aim at another objective function (in their case plan stability). CASPER system at JPL (Chien, Knight, Stechert, Sherwood, & Rabideau, 1999) uses iterative repairs to continuously adjust plans and adapt them to the dynamic environment (in their case plan stability)."}, {"heading": "5.2 Basic Exception Handling", "text": "In fact, when an exception occurs, the machine controller sends the planner a real-time message detailing the exception, and the planner then cancels plans that have been created but have not been sent to the printer controller to execute them, and the corresponding targets are rolled back into the unplanned queue. At the same time, the planner tries to find the new plans for the sheets that move in the printer to avoid further exceptions, and the new plans, when they are found, are sent to the machine controller to replace those that are being executed. Further, we discuss each of the different exemptions. Plan Rejection: When a plan is sent to the machine controller to execute the plan, the controller can reject the plan if one of the relevant modules is unable to execute."}, {"heading": "5.3 In-flight Sheet Replanning", "text": "In this section, we discuss the problem of finding a new set of plans for leaflets when a leaf is jammed or a module to be used by some plans is broken. Limitations that make rescheduling more difficult than nominal planning are: \u2022 Leaves cannot be stopped or slowed while the planner searches for new plans for all leaflets. Thus, if the planner takes too much time to find new plans, there will be congestion and / or module errors. \u2022 All newly found plans do not have flexible start times as in the nominal planning case, but should all start at the place where the leaves are to be found when the plans are found. The new locations depend on the actual rescheduling time of the planner. \u2022 All leaflets that occur later in the same print job as a jammed sheet should be redirected to a cleaning table."}, {"heading": "5.3.1 Example", "text": "Figures 17 & 18 show a scenario in which there are three in-flight sheets: S1.1 and S1.2 belong to the same print job and should go to Finisher 2 (in the middle); sheet S2.1 belongs to another print job and should go to Finisher 1. The third finisher is the Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finisher Finishes Finisher Finisher Finisher Finisher Finisher Finisher Finishes Finishes Finisher Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes Finishes F"}, {"heading": "5.3.2 Chained BFS", "text": "This year, the situation is such that there will be no significant change in the first half of the year, which will come into force in the first half of the year in the second half of the year."}, {"heading": "5.4 Evaluation", "text": "So far, the exemption has worked well in the current production processes: (1) stopping production and asking the operator to remove all sheets, (2) using machine-specific local rules to clean sheets in the system. (3) The planner can handle the two simplest types of compensation measures. (3) The planner reject and the module update themselves without any difficulty. (4) The break-in future and the broken exceptions can be traced back to up to five sheets in the machine. (4) This number seems to be too low, but the realignment is more difficult than the nominal planning. (4)"}, {"heading": "6. Handling Multiple Objectives", "text": "Our second major expansion of nominal planning aims to better meet the needs of the shopkeeper in nominal terms. Up until now, the planner's goal was to operate multi-motor, reconfigurable printers at full productivity, thereby optimizing machine throughput. While productivity is very important, it is just one of the many real-world optimization criteria that naturally exist when designing and planning applications such as printer control. In this section, we will describe several additional objective features that have been highlighted as important by our industry partner, and discuss how to expand our planning framework to handle them. In a modular system with multiple presses, you could want to optimize the cost of printing by printing only pages with monochrome motors and avoiding the use of more expensive color motors."}, {"heading": "6.1 Optimizing for Printing Cost", "text": "For systems with heterogeneous printing machines, the cost of printing a particular page depends on which of the motors is used. For example, it is usually more expensive to print a black-and-white page on an ink machine than a monochrome one. Thus, to minimize the total printing cost, one should use the motors with the lowest printing costs, which still meet the image type and quality requirements of a given print job. Thus, only a subset of all available motors will be used for printing a job, thus reducing overall productivity. In order to achieve a balance between machine productivity and printing costs, we have implemented a goal that can balance productivity for the cost and vice versa. We show that by combining different performance criteria into a single goal, the same optimization framework that works so well for individual objectives planning."}, {"heading": "6.2 Planning for Image Quality Consistency", "text": "It's not just the way it's about whether it's about a way it's about, a certain way it's about the way it's about, a certain way it's about the way it's about, but also the way it's about the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about, the way it's about the way it's about the way it's about, the way it's about the way it's about the way it's about the way it's about, the way it's about the way it's about the way it's about the way it's about, the way it's about the way it's about the way it's about, the way it's about the way it's about the way it's about the way it's about, the way it's about the way it's about the way it's about the way it's about, the way it's about the way it's about the way it's about it's about, the way it's about the way it's about the way it's about the way it's about the way it's about the way it's about, the way it's about it's about it's about it's about it's about it's about it's about it's about it's about"}, {"heading": "6.2.1 Planning with a Constrained Action Set", "text": "From a heuristic point of view, our planning approach to image quality consistency corresponds to solving a limited planning problem with a reduced number of actions (compared to its unlimited version).In the face of a planning problem with k actions, you can create O (2k) different versions of the limited problem. Thus, the pre-calculation of the time planning graph heuristically for all possible subsets of actions can quickly become unfeasible. Here, we describe a general solution that creates a balance between heuristic accuracy and the space required to store multiple reference tables, one for each subset of actions. The idea is to limit the maximum number of actions removed from the unrestricted problem, and to calculate heuristic reference tables only for these limited problems. For example, it is normally feasible to list these limited problems where only one or two actions are removed from the action set."}, {"heading": "6.3 Evaluation", "text": "In order to reduce costs, it is necessary for individual countries to take the same measures as they have taken in the past."}, {"heading": "7. Deployment", "text": "In designing, expanding and integrating the planner, we have used many traditional techniques from academic research to form a fast online planner / planner. In this section, we list the most important lessons we have learned and describe the auxiliary tools needed to develop and deploy the planner. We hope that they can be useful for both application developers and academic researchers in planning."}, {"heading": "7.1 Lessons Learned", "text": "This year, it is as far as ever in the history of the city, where it is as far as never before in the history of the city."}, {"heading": "7.2 Ancillary Tools", "text": "As we build our system, we have developed a number of application tools around our core planning and planning software. Among these tools, the most notable piece is the visualizer, which simulates the movement of each single sheet within the printer in real time. Like the planner, the visualizer adopts the same model-based principle to make it independent as a machine. Because an itinerary is given as a discrete sequence of actions, each has a single timestamp, which sets the start time of the action, linear interpolation is used to calculate the position of a sheet when the current simulation time is somewhere between the start times of two consecutive actions. The visualizer works in one of the following two modes, the live itineraries sent by the planners."}, {"heading": "8. Conclusion", "text": "We have described a real domain that requires a novel on-line integration of planning and planning, and we formalized it with a time extension of STRIPS that falls between part-order planning and time PDDL. We introduced a hybrid planner that uses state-of-the-art regression per sheet, while using a temporary constraint network to maintain flexibility through sub-orders that represent resource conflicts between plans for different sheets. Our system has successfully controlled three hardware prototypes and outperforms state-of-the-art manufacturing techniques in this area. No domain-dependent search control heuristics are required to control a printer consisting of 170 modules in real-time. We have described extensions to address two critical problems: (1) real-time execution failures and (2) objective functions that go beyond productivity. We have successfully demonstrated that our fast configuration and multiple manual work of a printer requires only one physical space in many printer environments.We have described a real domain that requires a real-world configuration and multiple manageable work of a printer in many printer environments.We have described a real domain that requires a real domain that requires a new kind of online integration of planning and planning and planning, and we formalized it with a time extension of STRIPS that falls between part-job scheduling and time PDDL."}, {"heading": "Acknowledgments", "text": "Preliminary results of this project were published by Ruml, Do and Fromherz (2005), Do and Ruml (2006) and Do, Ruml and Zhou (2008) and summarized by Do, Ruml and Zhou (2008).The authors would like to thank the members of the Embedded Reasoning Area at PARC, in particular Lara Crawford, Haitham Hindi, Johan de Kleer and Lukas Kuhn, as well as Danny Bobrow, David Biegelsen, Craig Eldershaw and Dave Duff for their help and contributions to the project. Our industrial staff not only provided expertise, but also helped us to simplify and design the application in a useful way. We would especially like to thank Bob Lofthus and Ron Root for their enthusiasm and perseverance, and Steve Hoover for supporting the project."}, {"heading": "Appendix A: Video", "text": "The online appendix on the JAIR website contains four films of the system in action: 1. nominal-simulation.mp4: shows a simple job of 200 sheets executed in a simulation of the PARC prototype printer in Figure 1. The planner keeps all four presses on their toes and thus achieves the full productivity of the line; 2. nominal-hardware.wmv: shows two simple jobs executed simultaneously with all four motors of the PARC hardware prototype, with the two feeders on the left and two simple production rails on the right. Red lights on the machine modules indicate the position of the sheets. (Background time synchronization is indicated by periodic flashing.) In the lower left corner, a schematic visualization shows how the sheets move through the machine, with one job colored blue and the other rot.mp4: shows a simple failure scenario in the simulation."}], "references": [], "referenceMentions": [], "year": 2011, "abstractText": "We present a case study of artificial intelligence techniques applied to the control of production printing equipment. Like many other real-world applications, this complex domain requires high-speed autonomous decision-making and robust continual operation. To our knowledge, this work represents the first successful industrial application of embedded domain-independent temporal planning. Our system handles execution failures and multiobjective preferences. At its heart is an on-line algorithm that combines techniques from state-space planning and partial-order scheduling. We suggest that this general architecture may prove useful in other applications as more intelligent systems operate in continual, on-line settings. Our system has been used to drive several commercial prototypes and has enabled a new product architecture for our industrial partner. When compared with state-of-the-art off-line planners, our system is hundreds of times faster and often finds better plans. Our experience demonstrates that domain-independent AI planning based on heuristic search can flexibly handle time, resources, replanning, and multiple objectives in a high-speed practical application without requiring hand-coded control knowledge.", "creator": "dvips(k) 5.98 Copyright 2009 Radical Eye Software"}}}