{"id": "1401.4605", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Jan-2014", "title": "Consistency Techniques for Flow-Based Projection-Safe Global Cost Functions in Weighted Constraint Satisfaction", "abstract": "Many combinatorial problems deal with preferences and violations, the goal of which is to find solutions with the minimum cost. Weighted constraint satisfaction is a framework for modeling such problems, which consists of a set of cost functions to measure the degree of violation or preferences of different combinations of variable assignments. Typical solution methods for weighted constraint satisfaction problems (WCSPs) are based on branch-and-bound search, which are made practical through the use of powerful consistency techniques such as AC*, FDAC*, EDAC* to deduce hidden cost information and value pruning during search. These techniques, however, are designed to be efficient only on binary and ternary cost functions which are represented in table form. In tackling many real-life problems, high arity (or global) cost functions are required. We investigate efficient representation scheme and algorithms to bring the benefits of the consistency techniques to also high arity cost functions, which are often derived from hard global constraints from classical constraint satisfaction. The literature suggests some global cost functions can be represented as flow networks, and the minimum cost flow algorithm can be used to compute the minimum costs of such networks in polynomial time. We show that naive adoption of this flow-based algorithmic method for global cost functions can result in a stronger form of null-inverse consistency. We further show how the method can be modified to handle cost projections and extensions to maintain generalized versions of AC* and FDAC* for cost functions with more than two variables. Similar generalization for the stronger EDAC* is less straightforward. We reveal the oscillation problem when enforcing EDAC* on cost functions sharing more than one variable. To avoid oscillation, we propose a weak version of EDAC* and generalize it to weak EDGAC* for non-binary cost functions. Using various benchmarks involving the soft variants of hard global constraints ALLDIFFERENT, GCC, SAME, and REGULAR, empirical results demonstrate that our proposal gives improvements of up to an order of magnitude when compared with the traditional constraint optimization approach, both in terms of time and pruning.", "histories": [["v1", "Sat, 18 Jan 2014 21:10:22 GMT  (302kb)", "http://arxiv.org/abs/1401.4605v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.DS", "authors": ["j h m lee", "ka lun leung"], "accepted": false, "id": "1401.4605"}, "pdf": {"name": "1401.4605.pdf", "metadata": {"source": "CRF", "title": "Consistency Techniques for Flow-Based Projection-Safe Global Cost Functions in Weighted Constraint Satisfaction", "authors": ["J.H.M. Lee", "K.L. Leung"], "emails": ["JLEE@CSE.CUHK.EDU.HK", "KLLEUNG@CSE.CUHK.EDU.HK"], "sections": [{"heading": null, "text": "* Weighted constraint satisfaction is a framework for modeling such problems, which consists of a set of cost functions to measure the degree of injury or preferences of different combinations of variable assignments. Typical solutions to weighted constraint satisfaction problems (WCSPs) are based on cross-industry and cross-border search using powerful consistency techniques such as AC *, FDAC *, EDAC * to derive hidden cost information and value appreciation during the search. However, these techniques are designed to be efficient only on binary and ternary cost functions, which are presented in tabular form. In addressing many real problems, high consistency (or global) cost functions are required. We study efficient representation schemes and algorithms to bring the benefits of consistency techniques to the same high consistency cost efficiency as high consistency costs are derived from the EDL hard consistency functions commonly used."}, {"heading": "1. Introduction", "text": "In fact, most of them will be able to play by the rules they have shown in the past, and they will be able to play by the rules they have shown in the past."}, {"heading": "2. Background", "text": "We give the preliminary results on satisfaction issues with weighted constraints, global cost functions and network flows."}, {"heading": "2.1 Weighted Constraint Satisfaction", "text": "The WCSP is only a value of which we have a set of variables (x1, x2, x2, x2). (WCSP) The WCSP is a set of integers from 0 to 3 euros per year. (WCSP) The WCSP is a tuple (X, C, S) in which the WCSP is a tuple (X, C). (WCSP) The WCSP is a tuple (X, C) in which a set of variables (x1, x2, x2). (WCSP) The WCSP is a tuple (X, C) in which a set of variables (x1, x2, x2). (WCSP) D is a set of domains D (xi, X)."}, {"heading": "2.2 Global Constraints and Global Cost Functions", "text": "With their special semantics, special propagation algorithms can be designed to achieve efficiency.A global cost function is the soft variant of a hard global constraint; the cost of each tuple indicates how much the tuple violates the corresponding global constraint.A global constraint can lead to different global cost functions by using different infringement measures.A global cost function yields 0 if the tuple meets the corresponding global constrainment.The SOFT GC\u00b5 notation refers to the global cost function derived from a global constraint by measuring a violation.For example, the ALLDIFFERENT constraint has two soft variants. Definition 4 (Petit, Re-Gin, & Bessie-re, 2001) The SOFT ALLDIFFERENTvar cost function returns the distinctive minimum number of variables that can only be assigned if the variables contain the required number of values assigned to them (Petit, Re-Definition, 2001, Petit)."}, {"heading": "2.3 Flow Theory", "text": "The definition 5 A-Flow Network G = (V, E, c, d) is a problem with different costs. (V, E) Definition 5 A-Flow Network G = (V, E, E) Definition 5 A-Flow Network G = (V, E) Definition 5 A-Flow Network G = (V, E) Definition 5 A-Flow Network G = (V, E) Definition 5 A-Flow Network is a problem. (V) Definition 5 A-Flow Network is a problem. (V) Definition 5 A-Flow Network is a problem. (V, E) Definition 5 A-Flow Network is a problem. (V) Definition 5 A-Flow Network is a problem. (V) Definition 5 A-Flow Network is a problem. (V) Definition 5 A-Flow Network is a problem. (V) Definition 5 A-Flow Network is a problem."}, {"heading": "3. Related Work", "text": "Global cost functions can be handled by means of constraint optimization, which focuses on the efficient calculation of min {WS () | L (S)} and the enforcement of GAC on its hard constraint forms WS () \u2264 zS, with zS being variable storage costs (Petit et al., 2001). Van Hoeve et al. (2006) develop a framework for global cost functions, which can be represented by flow networks, the calculation of which is polynomial in the size of networks. Beldiceanu (2000) and Beldiceanu, Carlsson and Petit (2004) develop a representation scheme for global cost functions using a graph-based approach and an automation approach. Within this framework, the calculation of all global cost functions can be reduced to only taking into account a fixed set of global cost functions, e.g. the SOFT REGULAR functions (Dronity), the Dronity, the Cost of CRESPely, the Consistency of CSPely, and the Consistency of WSPs only."}, {"heading": "4. Consistency Notions for Global Cost Functions", "text": "This section discusses four consistency terms for high biodiversity cost functions: (1) strong \u2205 - inverse consistency (strong \u2205 IC), (2) generalized arc consistency (GAC *), (3) fully directional generalized arc consistency (FDGAC *), and (4) generalized EDAC *. These consistency terms require exponential time to generally prevail, but flow-based global cost functions (van Hoeve et al., 2006) enjoy polynomial time enforcement."}, {"heading": "4.1 Strong \u2205-Inverse Consistency", "text": "The WCSP is able to perform all cost functions if the procedure requires a cost reduction. () The procedure forces an inverse cost reduction. () Every cost function requires a cost reduction. () Every cost function requires a cost reduction. () Every cost function requires a cost reduction. () Every cost function requires a cost reduction. () Every cost function requires a cost reduction. () Every cost function requires a cost reduction. () Every cost reduction requires a cost reduction. () The reduction of the costs from TS to W () is a cost reduction. () () The reduction of the costs from TS to W ()."}, {"heading": "4.2 Generalized Arc Consistency", "text": "(Definition) 13 (Cooper & Schiex, 2004) Facing a WCSP P = (X, D, C,) for costs (WS, C,). (Definition) 13 (Cooper & Schiex, 2004) Facing a WCSP P P = (X, D, C,) for costs (WS, C). (Definition) 13 (Cooper & Schiex, 2004) Facing a WCSP P P = (X, D, C) for costs (Definition). (Definition). (Definition). (Definition). (Definition) 13 (WCSP). (Definition). (Definition). (Definition). (Definition). (Definition). (Definition). (Definition). (Definition). (). (). (). (). (. (). (). (). (. (). (). ()."}, {"heading": "4.3 Full Directional Generalized Arc Consistency", "text": "The VCSP is in VCSP (VCSP) in VCSP (VCSP) in VCSP (VCSP) in VCSP (VCSP) in VCSP (VCSP) in VCSP (VGAC) in VCSP (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGK) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VGAC) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VS (VS) in VCSP (VCSP) in VCSP (VCSP) in VCSP (VCSP) in VCSP (VCSP) in VCSP (VCSP (VCSP) in VCSP (VCSP) in VCSP (VCSP (VGAC) in VCSP (VCSP (VGAC) in VCSP (VCSP (VGAC)) in VS (VS (VGAC) in VS (VS (VGAC)) in VS (VS (VGAC) in VS (VS (VGAC)) in VS (VS (VGAC) in VS (VS (VGAC) in VS (VS (VGAC) in VS (VS (VGAC) in)) in VS (VS (VS (VS (VGAC) in) in) in VS (VS (VS) in VS (VS (VS) in) in VS (V"}, {"heading": "4.4 Generalizing Existential Directional Arc Consistency", "text": "EDAC * (de Givry et al., 2005) can be generalized to EDGAC * by applying the full support definition as in FDGAC *. However, we note that a naive generalization of EDAC * is not always enforceable due to the limitation of EDAC *. Below we explain this limitation and offer a solution."}, {"heading": "4.4.1 AN INHERENT LIMITATION OF EDAC*", "text": "Definition 17 (de Givry et al., 2005) Consider a binary WCSP P = (X, D, C,) increased functionality (X, D, C). A variable xi-X is existentially arc-consistent (EAC *) if it is NC *, and there is a value v-D (xi) with zero uniform cost, so there is full support for all binary cost functions. (1) Forcing EAC * on a variable xi requires two major operations: (1) compute\u03b1 = min a-D (xi) {Wi (a), j-Cmin b-D (xj) {Wi, we) {Wi, j-W) {Wi, j-Wj) {Wi, j (a, b) Wj-W (b) (b)}}, which determines whether the full support of the NC * requirement is, and (2) if > 0, full support for all functions."}, {"heading": "4.4.2 COST-PROVIDING PARTITIONS AND WEAK EDGAC*", "text": "In fact, it is the case that most of us are able to abide by the rules that they have imposed on themselves. (...) In fact, it is the case that they are able to abide by the rules. (...) In fact, it is the case that they are able to abide by the rules. (...) In fact, it is the case that they are able to abide by the rules. (...) In fact, it is the case that they are able to abide by the rules. (...) In fact, it is the case that they are able to break the rules. \"(...)"}, {"heading": "5. Towards a Library of Efficient Global Cost Functions", "text": "In the previous section, we only show that SOFT ALLDIFFERENTdec is flow-based projection-safe. In the following, we also show that a number of common global cost functions are flow-based projection-safe. We give experimental results on different benchmarks with different concepts of consistency and different global cost functions."}, {"heading": "5.1 A List of Flow-Based Projection-Safe Global Cost Functions", "text": "In this section, we show that a number of common global cost functions are flow-based projection-safe, including the soft variants of ALL DIFFERENCES, GCC, SEED and REGULAR constraints."}, {"heading": "5.1.1 THE SOFT VARIANTS OF ALLDIFFERENT", "text": "There are two possible soft variants, SOFT ALLDIFFERENTdec () and ALLDIFFERENTvar (); the former returns the number of pairs of variables that share the same value, while the latter returns the least number of variables that need to be changed to make all variables take different values; the cost function SOFT ALLDIFFERENTvar () proves to be flow-safe in Section 4.2; in fact, this also implies that another cost function, SOFT ALLDIFFERENTvar (), is flow-safe; the SOFT ALLDIFFERENTvar () function also corresponds to a flow network with a structure similar to SOFT ALLDIFFERENTdec (), but different in the weights at the edges connected to t."}, {"heading": "5.1.2 THE SOFT VARIANTS OF GCC", "text": "Given a set of values \u03a3 = xi S D (xi) and functions lb and ub that represent a map from p to non-negative integers, each value v-V is associated with an upper limit and a lower limit lbv. GCC (S, ub, lb) constraint is met by a tuple of L (S) if the number of occurrences of a value v-V in (denoted by # (, v)) is at most ubv times and at least lbv times (Re-in, 1996). There are two soft variants of GCC constraints, namely SOFT GCCvar () and SOFT GCCval () () (van Hoeve et al., 2006).Definition 21 (van Hoeve et al., 2006) Definition two functions s (, v) and e (, v): s (, v) there is GFT \u2212 V \u2212 #."}, {"heading": "5.1.3 THE SOFT VARIANTS OF SAME", "text": "The SAME (S1, S2) restriction is met by the SAME (S1, S2) restriction to the global cost function SOFT Evar () (van Hoeve et al., 2006). (Definition 22 (van Hoeve et al., 2006) The SAME () restriction can be met by the global cost function SOFT Evar () (van Hoeve et al., 2006): Definition 22 (van Hoeve et al., 2006) The SAME restriction is softened by the symmetrical difference between two multi-sets SAMEvar () 1 and 2, i.e.2 The SAME restriction is met by Definition 22 (van Hoeve et al., 2006) restriction to the SAME restriction."}, {"heading": "5.1.4 THE SOFT VARIANTS OF REGULAR", "text": "The REGULAR constraints are defined on the basis of regular languages. A regular language L (M) can be represented by a finite state. (F) The transition function is defined as: Q (S, M) layer is represented graphically, as shown in Figure 6, where the finite states are represented by double circuits. (D) The transition function is defined as: Q (S, M) layer accepts the tuple. (S) layer is represented graphically, as shown in Figure 6, where the finite states are represented by double circuits. (xi) The transition layer is defined for each xi layer. The REGULAR (S, M) layer accepts the tuple. (S) layer is represented graphically, if the associated string L (M) is represented by a finite state. (Q, q0, F) layer (Pesant, 2004).Two soft variants are defined for the SOGULAR constraints."}, {"heading": "5.2 Experimental Results", "text": "In this section, we will conduct a series of experiments with different benchmarks to demonstrate the efficiency and practicality of different consistencies with different global cost functions. We have implemented the strong \u2205 IC, GAC *, FDGAC * and weak EDGAC * enforcement algorithms for these global cost functions in ToulBar2 version 0.51. We will compare their performance against five benchmarks of different nature. In the case of the reified COP models, the instances will be implemented with ILOG Solver 6.All benchmarks are crisp in nature and will be softened as follows: For each variable xi introduced, each value in D (xi) will be assigned random uniform cost from 0 to 9. Soft variants of global constraints will be implemented as proposed. The goal of all benchmarks is to find the optimal value within 1 hour."}, {"heading": "5.2.1 BENCHMARKS BASED ON SOFT ALLDIFFERENT", "text": "This year, it is only a matter of time before there is a result in which there is a result."}, {"heading": "5.2.2 BENCHMARKS BASED ON SOFT GCC", "text": "The GCC () restriction has various applications. Below, we focus on the Latin Square problem and Round Robin tournament problems.LATIN SQUARESWe first focus on the Latin Square problem, which is described in Section 5.2.1. We use the same soft version, but we replace SOFT ALLDIFFERENT with either SOFT GCCvar () or SOFT GCCval () cost functions, which measure the breach differently. Results are shown in Table 5, which shows a similar result as Table 3. Weak EDGAC * always performs the best in terms of time and reduction of search space. ROBIN TOURNAMENTThe Round Robin problem (probably in CSPLib) of the order n is a tournament of n \u2212 1 week. Each week is divided into n / 2 period period, and each period is divided into two slots."}, {"heading": "5.2.3 BENCHMARKS BASED ON SOFT SAME", "text": "The SAME () constraint can be used to model the following two problems: (1) fair planning and (2) human mission planning. (3) The problem does not do justice in Figure 8 (a). (3) The person is mapped in the sequence of sequences. (3) Figure 8 (b) shows a schedule that is fair. (3) Figure 8 (a) is not fair. (4) The person is mapped in the sequence of variations. (4)"}, {"heading": "5.2.4 BENCHMARKS BASED ON SOFT REGULAR", "text": "Subsequently, we focus on two things: (1) the hospital staff and (2) the hospital staff. (2) The hospital staff is able to plan a group of nurses in four shifts that have at least two PM shifts, at least for one day. (2) The nurses must be planned in four days in such a way that each nurse must have at least three AM shifts. (3) The nurses must be packed together, and the same preferences are also distributed throughout the day."}, {"heading": "5.2.5 DISCUSSIONS", "text": "A control comparison should have been carried out to examine the efficiency of ToulBar2 on the global cost functions, which are explicitly encoded as tables. This cannot be done in a meaningful way, as the tables will be prohibitively large. Let's consider a simple cost function for 10 variables, each with a domain size of 10. The table already requires storage in the order of 1010 integers or dozens of gigabytes. Based on our experiments, two conclusions can be drawn. First, the experiments show that the reified approach and the strong \u2205 IC are too weak in terms of both search space constraint and runtime reduction compared to GAC *, FDGAC * and weak EDGAC *. Second, the stronger consistency concepts, weak EDGAC *, FDGAC * and GAC * are worthwhile, although they are more costly to enforce."}, {"heading": "6. Conclusion and Remarks", "text": "In this section, we summarize our contributions and highlight possible future directions of research. Our contributions are fivefold *. First, we introduce strong \u2205 IC based on \u2205 IC (Zytnicki et al., 2009) and provide an algorithm for enforcing strong \u2205 IC. Furthermore, we prove that strong \u2205 IC converge. We also show that enforcing strong \u2205 IC on a WCSP is stronger than GAC in the reified approach. Second, we provide an algorithm for enforcing GAC * for a WCSP, but enforcement is exponential. For efficient enforcement, we introduce a fluid predictive security that preserves the basic structure of global cost functions. We provide sufficient conditions for a global cost function to be secure. We also show, as part of the evidence, how projection and expansion can be done to maintain flow characteristics. Third, we generalize FDAC * (Larrosa & Schiex, 2003) to FDAC *."}, {"heading": "Acknowledgments", "text": "The work described in this paper was generously supported by grants CUHK413808 and CUHK413710 from the Research Grants Council of Hong Kong SAR."}], "references": [{"title": "Global Constraints as Graph Properties on a Structured Network of Elementary Constraints of the Same Type", "author": ["N. Beldiceanu"], "venue": "Proceedings of CP\u201900, pp. 52\u201367.", "citeRegEx": "Beldiceanu,? 2000", "shortCiteRegEx": "Beldiceanu", "year": 2000}, {"title": "Deriving Filtering Algorithms from Constraint Checkers", "author": ["N. Beldiceanu", "M. Carlsson", "T. Petit"], "venue": "In Proceedings of CP\u201904,", "citeRegEx": "Beldiceanu et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Beldiceanu et al\\.", "year": 2004}, {"title": "Filtering Algorithms for the Same Constraints", "author": ["N. Beldiceanu", "I. Katriel", "S. Thiel"], "venue": "In Proceedings of CPAIOR\u201904,", "citeRegEx": "Beldiceanu et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Beldiceanu et al\\.", "year": 2004}, {"title": "A Nurse Rostering System Using Constraint Programming and Redundant Modeling", "author": ["B. Cheng", "J.H.M. Lee", "J. Wu"], "venue": "IEEE Transactions on Information Technology in Biomedicine,", "citeRegEx": "Cheng et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Cheng et al\\.", "year": 1997}, {"title": "Soft Arc Consistency Revisited", "author": ["M. Cooper", "S. de Givry", "M. Sanchez", "T. Schiex", "M. Zytnicki", "T. Werner"], "venue": "Artificial Intelligence,", "citeRegEx": "Cooper et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Cooper et al\\.", "year": 2010}, {"title": "Arc Consistency for Soft Constraints", "author": ["M. Cooper", "T. Schiex"], "venue": "Artifical Intelligence,", "citeRegEx": "Cooper and Schiex,? \\Q2004\\E", "shortCiteRegEx": "Cooper and Schiex", "year": 2004}, {"title": "High-Order Consistency in Valued Constraint Satisfaction", "author": ["M.C. Cooper"], "venue": "Constraints, 10(3), 283\u2013305.", "citeRegEx": "Cooper,? 2005", "shortCiteRegEx": "Cooper", "year": 2005}, {"title": "Existential Arc Consistency: Getting Closer to Full Arc Consistency in Weighted CSPs", "author": ["S. de Givry", "F. Heras", "M. Zytnicki", "J. Larrosa"], "venue": "In Proceedings of IJCAI\u201905,", "citeRegEx": "Givry et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Givry et al\\.", "year": 2005}, {"title": "A Cost-Regular Based Hybrid Column", "author": ["S. Demassey", "G. Pesant", "Rousseau", "L.-M"], "venue": "Generation Approach. Constraints,", "citeRegEx": "Demassey et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Demassey et al\\.", "year": 2006}, {"title": "A Note on Two Problems in Connexion with Graphs", "author": ["E.W. Dijkstra"], "venue": "Numerische Mathematik, 1, 269\u2013271.", "citeRegEx": "Dijkstra,? 1959", "shortCiteRegEx": "Dijkstra", "year": 1959}, {"title": "Efficient Algorithms for Shortest Paths in Sparse Networks", "author": ["D. Johnson"], "venue": "Journal of the ACM, 24(1), 1\u201313.", "citeRegEx": "Johnson,? 1977", "shortCiteRegEx": "Johnson", "year": 1977}, {"title": "In the Quest of the Best Form of Local Consistency for Weighted CSP", "author": ["J. Larrosa", "T. Schiex"], "venue": "In Proceedings of IJCAI\u201903,", "citeRegEx": "Larrosa and Schiex,? \\Q2003\\E", "shortCiteRegEx": "Larrosa and Schiex", "year": 2003}, {"title": "Solving Weighted CSP by Maintaining Arc Consistency", "author": ["J. Larrosa", "T. Schiex"], "venue": "Artificial Intelligence,", "citeRegEx": "Larrosa and Schiex,? \\Q2004\\E", "shortCiteRegEx": "Larrosa and Schiex", "year": 2004}, {"title": "A Language and a Program for Stating and Solving Combinatorial Problems", "author": ["Lauri\u00e8re", "J.-L."], "venue": "Artificial Intelligence, 10, 29\u2013127.", "citeRegEx": "Lauri\u00e8re and J..L.,? 1978", "shortCiteRegEx": "Lauri\u00e8re and J..L.", "year": 1978}, {"title": "Combinatorial Optimization: Networks and Matroids", "author": ["E. Lawler"], "venue": "Holt, Rinehart and Winston.", "citeRegEx": "Lawler,? 1976", "shortCiteRegEx": "Lawler", "year": 1976}, {"title": "Soft Global Constraints in Constraint Optimization and Weighted Constraint Satisfaction", "author": ["K.L. Leung"], "venue": "Master\u2019s thesis, The Chinese University of Hong Kong.", "citeRegEx": "Leung,? 2009", "shortCiteRegEx": "Leung", "year": 2009}, {"title": "Flow-Based Propagators for the SEQUENCE and Related Global Constraints", "author": ["M. Maher", "N. Narodytska", "Quimper", "C.-G", "T. Walsh"], "venue": "In Proceedings of CP\u201908,", "citeRegEx": "Maher et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Maher et al\\.", "year": 2008}, {"title": "A Filtering Algorithm for the Stretch Constraint", "author": ["G. Pesant"], "venue": "Proceedings of CP\u201901, pp. 183\u2013195.", "citeRegEx": "Pesant,? 2001", "shortCiteRegEx": "Pesant", "year": 2001}, {"title": "A Regular Language Membership Constraint for Finite Sequences of Variables", "author": ["G. Pesant"], "venue": "Proceedings of CP\u201904, pp. 482\u2013495.", "citeRegEx": "Pesant,? 2004", "shortCiteRegEx": "Pesant", "year": 2004}, {"title": "Meta-constraints on Violations for Over Constrained Problems", "author": ["T. Petit", "R\u00e9gin", "J.-C", "C. Bessi\u00e8re"], "venue": "In Proceedings of ICTAI\u201900,", "citeRegEx": "Petit et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Petit et al\\.", "year": 2000}, {"title": "Specific Filtering Algorithm for Over-Constrained Problems", "author": ["T. Petit", "R\u00e9gin", "J.-C", "C. Bessi\u00e8re"], "venue": "In Proceedings of CP\u201901,", "citeRegEx": "Petit et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Petit et al\\.", "year": 2001}, {"title": "Generalized Arc Consistency for Global Cardinality Constraints", "author": ["R\u00e9gin", "J.-C."], "venue": "Proceedings of AAAI\u201996, pp. 209\u2013215.", "citeRegEx": "R\u00e9gin and J..C.,? 1996", "shortCiteRegEx": "R\u00e9gin and J..C.", "year": 1996}, {"title": "Cost-Based Arc Consistency for Global Cardinality Constraints", "author": ["R\u00e9gin", "J.-C."], "venue": "Constraints, 7, 387\u2013405.", "citeRegEx": "R\u00e9gin and J..C.,? 2002", "shortCiteRegEx": "R\u00e9gin and J..C.", "year": 2002}, {"title": "Mendelian Error Detection in Complex Pedigrees using Weighted Constraint Satisfaction", "author": ["M. Sanchez", "S. de Givry", "T. Schiex"], "venue": "Techniques. Constraints,", "citeRegEx": "Sanchez et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Sanchez et al\\.", "year": 2008}, {"title": "Valued Constraint Satisfaction Problems: Hard and Easy Problems", "author": ["T. Schiex", "H. Fargier", "G. Verfaillie"], "venue": "In Proceedings of IJCAI\u201995,", "citeRegEx": "Schiex et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Schiex et al\\.", "year": 1995}, {"title": "Constraint Programming in OPL", "author": ["P. Van Hentenryck", "L. Michel", "L. Perron", "R\u00e9gin", "J.-C"], "venue": "In Proceedings of the International Conference on the Principles and Practice of Declarative Programming,", "citeRegEx": "Hentenryck et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Hentenryck et al\\.", "year": 1999}, {"title": "On Global Warming: Flow-based Soft Global Constraints", "author": ["van Hoeve", "W.-J", "G. Pesant", "Rousseau", "L.-M"], "venue": "J. Heuristics,", "citeRegEx": "Hoeve et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Hoeve et al\\.", "year": 2006}, {"title": "Bounds Arc Consistency for Weighted CSPs", "author": ["M. Zytnicki", "C. Gaspin", "T. Schiex"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Zytnicki et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Zytnicki et al\\.", "year": 2009}], "referenceMentions": [{"referenceID": 15, "context": "To overcome the difficulty, we incorporate van Hoeve, Pesant, and Rousseau\u2019s (2006) flow-based algorithmic method into WCSPs, which amounts to representing global cost functions as flow networks and computing the minimum costs of such networks using the minimum cost flow algorithm.", "startOffset": 54, "endOffset": 84}, {"referenceID": 6, "context": "A natural next step is to generalize also the stronger consistency EDAC* (de Givry et al., 2005) to EDGAC*, but this turns out to be non-trivial. We identify and analyze an inherent limitation of EDAC* similar to the case of Full AC* (de Givry et al., 2005). ED(G)AC* enforcement will go into oscillation if two cost functions share more than one variable, which is common when a problem involves high arity cost functions. Sanchez, de Givry, and Schiex (2008) did not mention the oscillation problem but their method for enforcing EDAC* for the special case of ternary cost functions would avoid the oscillation problem.", "startOffset": 77, "endOffset": 461}, {"referenceID": 24, "context": "Formally, Definition 1 (Schiex et al., 1995) A WCSP is a tuple (X ,D, C,\u22a4), where: \u2022 X is a set of variables {x1, x2, .", "startOffset": 23, "endOffset": 44}, {"referenceID": 23, "context": "Based on NC*, AC* and FDAC* have been developed for binary (Larrosa & Schiex, 2004, 2003) and ternary cost functions (Sanchez et al., 2008).", "startOffset": 117, "endOffset": 139}, {"referenceID": 14, "context": "Two of those are the successive shortest path and cycle-cancelling algorithms (Lawler, 1976).", "startOffset": 78, "endOffset": 92}, {"referenceID": 20, "context": "Related Work Global cost functions can be handled using constraint optimization, which focuses on efficient computation of min{WS(l) | l \u2208 L(S)} and enforcing GAC on their hard constraint forms WS(l) \u2264 zS , where zS is the variable storing costs (Petit et al., 2001).", "startOffset": 246, "endOffset": 266}, {"referenceID": 19, "context": "Related Work Global cost functions can be handled using constraint optimization, which focuses on efficient computation of min{WS(l) | l \u2208 L(S)} and enforcing GAC on their hard constraint forms WS(l) \u2264 zS , where zS is the variable storing costs (Petit et al., 2001). Van Hoeve et al. (2006)", "startOffset": 247, "endOffset": 292}, {"referenceID": 27, "context": "Examples are NC* (Larrosa & Schiex, 2004), BAC (Zytnicki et al., 2009), AC* (Larrosa & Schiex, 2004), FDAC* (Larrosa & Schiex, 2003), and EDAC* (de Givry et al.", "startOffset": 47, "endOffset": 70}, {"referenceID": 4, "context": "Stronger consistency notions, namely OSAC and VAC (Cooper et al., 2010), are also defined, but enforcement requires a relaxation of the cost valuation structure V (\u22a4) to rational numbers, and current implementations are efficient only on binary WCSPs.", "startOffset": 50, "endOffset": 71}, {"referenceID": 23, "context": "For ternary cost functions, AC, FDAC and EDAC are introduced (Sanchez et al., 2008).", "startOffset": 61, "endOffset": 83}, {"referenceID": 0, "context": "Beldiceanu (2000) and Beldiceanu, Carlsson and Petit (2004) further develop a representation scheme for global cost functions using a graph-based approach and an automaton approach.", "startOffset": 0, "endOffset": 18}, {"referenceID": 0, "context": "Beldiceanu (2000) and Beldiceanu, Carlsson and Petit (2004) further develop a representation scheme for global cost functions using a graph-based approach and an automaton approach.", "startOffset": 0, "endOffset": 60}, {"referenceID": 0, "context": "Beldiceanu (2000) and Beldiceanu, Carlsson and Petit (2004) further develop a representation scheme for global cost functions using a graph-based approach and an automaton approach. Under their framework, the computation of all global cost functions can be reduced to only considering a fixed set of global cost functions, e.g. the SOFT REGULAR functions. On the other hand, to efficiently remove more search space during WCSPs solving, various consistency notions have been developed. Examples are NC* (Larrosa & Schiex, 2004), BAC (Zytnicki et al., 2009), AC* (Larrosa & Schiex, 2004), FDAC* (Larrosa & Schiex, 2003), and EDAC* (de Givry et al., 2005). Stronger consistency notions, namely OSAC and VAC (Cooper et al., 2010), are also defined, but enforcement requires a relaxation of the cost valuation structure V (\u22a4) to rational numbers, and current implementations are efficient only on binary WCSPs. For ternary cost functions, AC, FDAC and EDAC are introduced (Sanchez et al., 2008). Cooper (2005) incorporates the concept of k-consistency into WCSPs to form complete k-consistency.", "startOffset": 0, "endOffset": 1006}, {"referenceID": 27, "context": "1 Strong \u2205-Inverse Consistency Strong \u2205-inverse consistency is based on \u2205-inverse consistency (\u2205IC) (Zytnicki et al., 2009).", "startOffset": 100, "endOffset": 123}, {"referenceID": 27, "context": "Definition 8 (Zytnicki et al., 2009) Given a WCSP P = (X ,D, C,\u22a4).", "startOffset": 13, "endOffset": 36}, {"referenceID": 27, "context": "The second operation can be reduced to constant time using the \u2206S data structure suggested by Zytnicki et al. (2009). Instead of deducting the projected value \u03b1 from each tuple in WS , we simply store the projected value in \u2206S .", "startOffset": 94, "endOffset": 117}, {"referenceID": 27, "context": "Although its definition is similar to BAC (Zytnicki et al., 2009), their strengths are incomparable.", "startOffset": 42, "endOffset": 65}, {"referenceID": 11, "context": "Using an augment similar to the proof of Larrosa and Schiex\u2019s (2004) Theorems 12 and 21, the complexity can be stated as follows.", "startOffset": 41, "endOffset": 69}, {"referenceID": 27, "context": "BAC is confluent (Zytnicki et al., 2009).", "startOffset": 17, "endOffset": 40}, {"referenceID": 19, "context": "Following Petit et al. (2000), we define the reified form of a WCSP as follows:", "startOffset": 10, "endOffset": 30}, {"referenceID": 19, "context": "Definition 11 (Petit et al., 2000) Given a WCSP P = (X ,D, C,\u22a4).", "startOffset": 14, "endOffset": 34}, {"referenceID": 15, "context": "For a detailed comparison between strong \u2205IC of WCSPs and GAC of the reified approach, readers can refer to the work of Leung (2009). When the cost functions are binary, strong \u2205IC cannot be stronger than AC*.", "startOffset": 120, "endOffset": 133}, {"referenceID": 4, "context": "2 in the work of Cooper et al. (2010), which also requires WS(l) = \u22a4 if W\u2205 \u2295 \u2295", "startOffset": 17, "endOffset": 38}, {"referenceID": 23, "context": "GAC* collapses to AC* for binary cost functions (Larrosa & Schiex, 2004) and AC for ternary cost functions (Sanchez et al., 2008).", "startOffset": 107, "endOffset": 129}, {"referenceID": 24, "context": "The method introduced by van Hoeve et al. (2006) can be applied to the first operation as discussed in Section 4.", "startOffset": 29, "endOffset": 49}, {"referenceID": 5, "context": "Cooper and Schiex (2004) use a similar technique as the one by Zytnicki et al.", "startOffset": 0, "endOffset": 25}, {"referenceID": 5, "context": "Cooper and Schiex (2004) use a similar technique as the one by Zytnicki et al. (2009) (similar to the technique described in Section 4.", "startOffset": 0, "endOffset": 86}, {"referenceID": 26, "context": "By using Theorem 7, we can apply the results by van Hoeve et al. (2006) to compute the value min{WS(l) | l[xi] = v \u2227 l \u2208 L(S)} in polynomial time throughout GAC* enforcement.", "startOffset": 52, "endOffset": 72}, {"referenceID": 26, "context": "By using Theorem 7, we can apply the results by van Hoeve et al. (2006) to compute the value min{WS(l) | l[xi] = v \u2227 l \u2208 L(S)} in polynomial time throughout GAC* enforcement. Besides, the proof gives an efficient algorithm to perform projection in polynomial time by simply modifying the weights of the corresponding edges. Again, we use SOFT ALLDIFFERENT as an example. Van Hoeve et al. (2006) have shown that SOFT ALLDIFFERENT (S) satisfies conditions 1 and 2 in Definition 15.", "startOffset": 52, "endOffset": 395}, {"referenceID": 9, "context": "However, it can be reduced by applying a potential value on each vertices, as in Johnson\u2019s (1977) algorithm.", "startOffset": 81, "endOffset": 98}, {"referenceID": 9, "context": "Dijkstra\u2019s (1959) algorithm can thus be applied, reducing the time complexity to O(|E| + |V |log(|V |)).", "startOffset": 0, "endOffset": 18}, {"referenceID": 23, "context": "However, FDGAC* is incomparable to FDAC for ternary cost functions (Sanchez et al., 2008).", "startOffset": 67, "endOffset": 89}, {"referenceID": 11, "context": "The procedure enforceFDGAC*() in Algorithm 5 is correct and must terminate, the proof of which is similar to those of Theorems 3 and 4 by Larrosa and Schiex (2003). The worst-case time complexity of enforceFDGAC*() can be stated in terms of that of findFullSupport() (fDGAC) and findSupport() (fGAC) as follows.", "startOffset": 138, "endOffset": 164}, {"referenceID": 7, "context": "The situation is similar to Example 3 by de Givry et al. (2005). We demonstrate by the example in Figure 4(a), which shows a WCSP with two cost functions W 1 1,2 and W 2 1,2.", "startOffset": 44, "endOffset": 64}, {"referenceID": 23, "context": "In the case of ternary cost functions, Sanchez et al. (2008) cleverly avoid the oscillation problem by re-defining full supports to include not just unary but also binary cost functions.", "startOffset": 39, "endOffset": 61}, {"referenceID": 6, "context": "However, weak EDGAC* is incomparable to complete k-consistency (Cooper, 2005), where k > 2, for any cost-providing partition.", "startOffset": 63, "endOffset": 77}, {"referenceID": 23, "context": "It is because EDAC* is already incomparable to complete kconsistency (Sanchez et al., 2008).", "startOffset": 69, "endOffset": 91}, {"referenceID": 4, "context": "3 by Cooper et al. (2010). On another hand, Cooper et al.", "startOffset": 5, "endOffset": 26}, {"referenceID": 4, "context": "3 by Cooper et al. (2010). On another hand, Cooper et al. (2010) give an example which is EDAC* but not VAC.", "startOffset": 5, "endOffset": 65}, {"referenceID": 26, "context": "Van Hoeve et al. (2006) show that both SOFT GCC and SOFT GCC are flow-based, and the flow networks have structures similar to the SOFT ALLDIFFERENT cost functions.", "startOffset": 4, "endOffset": 24}, {"referenceID": 26, "context": "Proof: Van Hoeve et al. (2006) have shown that SOFT SAME satisfies conditions 1 and 2 in Definition 15.", "startOffset": 11, "endOffset": 31}, {"referenceID": 18, "context": "The REGULAR(S, M ) constraint accepts the tuple l \u2208 L(S) if the corresponding string belongs to a regular language L(M) represented by a finite state automaton M = (Q,\u03a3, \u03b4, q0, F ) (Pesant, 2004).", "startOffset": 181, "endOffset": 195}, {"referenceID": 24, "context": "Proof: Van Hoeve et al. (2006) show that conditions 1 and 2 are satisfied.", "startOffset": 11, "endOffset": 31}, {"referenceID": 0, "context": "PEOPLE-MISSION SCHEDULING This problem extends the doctor-nurse rostering problem described by Beldiceanu, Katriel and Thiel (2004). Given three groups of n persons, m missions must be assigned to a team containing exactly one person in each group.", "startOffset": 95, "endOffset": 132}, {"referenceID": 17, "context": "Definition 24 (Pesant, 2001) Given a value v and a tuple l \u2208 L(S).", "startOffset": 14, "endOffset": 28}, {"referenceID": 18, "context": "However, it can be handled by variable duplication (Pesant, 2004).", "startOffset": 51, "endOffset": 65}, {"referenceID": 18, "context": "The STRETCH() constraint can be described by an automaton and thus modelled using the REGULAR() constraint (Pesant, 2004).", "startOffset": 107, "endOffset": 121}, {"referenceID": 27, "context": "First, we introduce strong \u2205IC based on \u2205IC (Zytnicki et al., 2009) and give an algorithm to enforce strong \u2205IC.", "startOffset": 44, "endOffset": 67}, {"referenceID": 4, "context": "The first one is to investigate if other even stronger consistency notions, such as VAC (Cooper et al., 2010), can also benefit from projection-safety to make their enforcement practical for global cost functions.", "startOffset": 88, "endOffset": 109}], "year": 2012, "abstractText": "Many combinatorial problems deal with preferences and violations, the goal of which is to find solutions with the minimum cost. Weighted constraint satisfaction is a framework for modeling such problems, which consists of a set of cost functions to measure the degree of violation or preferences of different combinations of variable assignments. Typical solution methods for weighted constraint satisfaction problems (WCSPs) are based on branch-and-bound search, which are made practical through the use of powerful consistency techniques such as AC*, FDAC*, EDAC* to deduce hidden cost information and value pruning during search. These techniques, however, are designed to be efficient only on binary and ternary cost functions which are represented in table form. In tackling many real-life problems, high arity (or global) cost functions are required. We investigate efficient representation scheme and algorithms to bring the benefits of the consistency techniques to also high arity cost functions, which are often derived from hard global constraints from classical constraint satisfaction. The literature suggests some global cost functions can be represented as flow networks, and the minimum cost flow algorithm can be used to compute the minimum costs of such networks in polynomial time. We show that naive adoption of this flow-based algorithmic method for global cost functions can result in a stronger form of \u2205-inverse consistency. We further show how the method can be modified to handle cost projections and extensions to maintain generalized versions of AC* and FDAC* for cost functions with more than two variables. Similar generalization for the stronger EDAC* is less straightforward. We reveal the oscillation problem when enforcing EDAC* on cost functions sharing more than one variable. To avoid oscillation, we propose a weak version of EDAC* and generalize it to weak EDGAC* for non-binary cost functions. Using various benchmarks involving the soft variants of hard global constraints ALLDIFFERENT, GCC, SAME, and REGULAR, empirical results demonstrate that our proposal gives improvements of up to an order of magnitude when compared with the traditional constraint optimization approach, both in terms of time and pruning.", "creator": "dvips(k) 5.98 Copyright 2009 Radical Eye Software"}}}