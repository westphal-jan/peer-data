{"id": "1401.5852", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Jan-2014", "title": "Algorithms for Generating Ordered Solutions for Explicit AND/OR Structures", "abstract": "We present algorithms for generating alternative solutions for explicit acyclic AND/OR structures in non-decreasing order of cost. The proposed algorithms use a best first search technique and report the solutions using an implicit representation ordered by cost. In this paper, we present two versions of the search algorithm -- (a) an initial version of the best first search algorithm, ASG, which may present one solution more than once while generating the ordered solutions, and (b) another version, LASG, which avoids the construction of the duplicate solutions. The actual solutions can be reconstructed quickly from the implicit compact representation used. We have applied the methods on a few test domains, some of them are synthetic while the others are based on well known problems including the search space of the 5-peg Tower of Hanoi problem, the matrix-chain multiplication problem and the problem of finding secondary structure of RNA. Experimental results show the efficacy of the proposed algorithms over the existing approach. Our proposed algorithms have potential use in various domains ranging from knowledge based frameworks to service composition, where the AND/OR structure is widely used for representing problems.", "histories": [["v1", "Thu, 23 Jan 2014 02:44:07 GMT  (536kb)", "http://arxiv.org/abs/1401.5852v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.DS", "authors": ["priyankar ghosh", "amit sharma", "p p chakrabarti", "pallab dasgupta"], "accepted": false, "id": "1401.5852"}, "pdf": {"name": "1401.5852.pdf", "metadata": {"source": "CRF", "title": "Algorithms for Generating Ordered Solutions for Explicit AND/OR Structures", "authors": ["Priyankar Ghosh", "Amit Sharma", "P. P. Chakrabarti", "Pallab Dasgupta"], "emails": ["priyankar@cse.iitkgp.ernet.in", "amit.ontop@gmail.com", "ppchak@cse.iitkgp.ernet.in", "pallab@cse.iitkgp.ernet.in"], "sections": [{"heading": "1. Introduction", "text": "The use of AND / OR structures for modeling and solving complex problems has been used for various research efforts in 2001 and 2001. (AND / OR search spaces were most used in problem reduction search for solving complex problems, logical reasoning and theorem proving, etc., where the general problem can be hierarchically decomposed into conjunction and disjunction of subproblems (Pearl, 1984; Nilsson, 1980) Subsequently, AND / OR structures have also been used in a variety of domains, e.g. for the representation of assembly plans (Homem de Mello & Sanderson, 1990), the generation of VLSI floor-plans (Dasgupta, Sur-Kolay, & Bhattacharya, 1995), Puzzle Solving (Fuxi, Ming, & Yanxiang, 2003), etc. Traditionally, the algorithms AO * (Pearl, 1984; Nilsson, 1980; Martelli & Montanari, 1973; Chang Slagle 1971)."}, {"heading": "2. Definitions", "text": "In this section we describe the terminology of AND / OR trees and DAGs followed by q q q q q \u03b2 solutions used in this essay. G\u03b1\u03b2 = \u03b2; V, E > is an AND / OR directed acyclic graph, where V is the set of nodes and E is the set of edges. G\u03b1\u03b2 and \u03b2 nodes in G\u03b1\u03b2 refer to the AND nodes and OR nodes in the DAG and OR nodes respectively. The non-terminal nodes of G\u03b1\u03b2 are referred to as terminal nodes."}, {"heading": "3. Generating Ordered Solutions for AND/OR Trees", "text": "In this section, we will discuss the problem of generating ordered solutions for trees. We will use the concept of alternative AND / OR trees defined in Section 2 to represent our algorithms. An alternative AND / OR tree represents a concise representation and therefore the proofs of correctness for alternating AND / OR trees are much easier. In Appendix C, we will show that any AND / OR tree can be converted to an equivalent AND / OR tree structure in relation to the solution space. It is worth noting that the search space of some problems (e.g. the search space of the Multipeg Tower of Hanoi problem) has the alternating AND / OR tree structure. Furthermore, the algorithms presented for alternating AND / OR trees function without any modification for general AND / OR trees. In this section, we will first present the existing algorithm (Elliott, 2007) shortly before and then detail our proposed algorithms."}, {"heading": "3.1 Existing Bottom-Up Evaluation Based Method for Computing Alternative Solutions", "text": "ieD rf\u00fc ide eeisrVnlrtee\u00fcgn rf\u00fc ide eeisrVnlrtee\u00fcgn ni rde eeisrdteeVrlrrrrrteeegnln rf\u00fc ide eeisrdteeu ni rde eeisrdteeu ni red eeisrlrrrteeu ni red eeisrrrrrteeVnlrrteeeirln rf\u00fc ide eeirf\u00fc ide eeisrrteeeirteeVnlrrrrteeu ni red eeisrlrrteeVrrrrrrteeeirteeVnlrrlrrteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"}, {"heading": "3.2 Top-Down Evaluation Algorithms for Generating Ordered Solutions", "text": "In the initial phase of the ASG algorithm, we calculate the optimal solution for a given alternating AND / OR tree T and perform an initial marking of all OR edges. The following terms and terms are used to describe the ASG algorithms. In the context of the AND / OR trees, we use the optimal solution for a given alternative AND / OR tree T and perform an initial marking of all OR edges. We will use the following definitions to describe the ASG algorithms."}, {"heading": "3.2.1 ASG Algorithm", "text": "We present ASG, a best initial search algorithm, for generating solutions for an alternating AND / OR tree in no decreasing order of cost. The overall idea of this algorithm is as follows. We maintain a list that initially contains only the optimal solution Sopt. At each point in the time, Open contains a series of candidate solutions from which the next best possible solution is selected in the non decreasing order of cost. At each point, the Minimum Cost Solution (Smin) in Open is removed and added to another list, named, closed. The closed list contains a series of ordered solutions that have been generated so far. Then, the successor of Smin is built up and any successor solution that is not currently available in Open as well as non-existent is added to Open. However, for further optimization, we use a sublist of the closed, called TList, to store the relevant part of the closed."}, {"heading": "3.2.2 Working of ASG Algorithm", "text": "We illustrate the workings of the ASG algorithm using the AND / OR tree example shown in Figure 4. < < < The contents of the various lists created after the first few iterations of the outermost loop are shown in Table 1. < < < The solutions that are already in Open and also constructed solutions are highlighted by extending the current Smin list. (Before entering the outermost loop (line 5), ASG calculates the optimal solution Sopt, and inserts Sopt to Open.) Therefore, Open contains only the optimal solution Sopt; Sopt and TList are empty. In the first Sopt iteration, the signature is selected from Sopt and removed from Open. Then, the Sopt, L (Sopt), L (Sopt) swap list is calculated."}, {"heading": "3.3.1 Lazy ASG Algorithm", "text": "The intuition behind the other version of the ASG algorithm is as follows: For a newly constructed Sm solution, we need to check if Sm already exists in Open, because Sm can be constructed as part of the calculation of the successor set of multiple solutions. Instead of using the entire swap list of a solution to construct all successors at once, we can then add these solutions to Open by using the native swap options to construct a subset of the successor set. The subset constructed using native swap options only consists of solutions that currently do not exist in Open, and can therefore be added to Open without being compared with the existing entries in Open. The construction of any remaining successor solution S \u2032 m and then insertion to Open is delayed until any other previous solution by S \u2032 m. Algorithm 5: Lazy ASG (LASG) Algorithm input: An alternative AND / OR tree. \""}, {"heading": "3.3.2 Working of LASG Algorithm (on AND/OR tree in Figure 4)", "text": "Before entering the outermost loop (algorithm 5, line 10), LASG calculates the optimal solution (Sopt) and constructs Succ (Sopt). Subsequently, the solutions in Succ (Sopt) are added to Open, and the content of the open ones becomes {\u03c3 (2,3)} (as a result of a rotten expansion). The content of the various lists when a solution is added to Closed is shown in Table 2. The solutions are presented by their signatures. The solutions that are added to Open after a rotten expansion are generated using Underbrace.While the first four solutions are generated, the contents of the various lists for LASG are identical to the contents of the corresponding lists of ASG (shown in Table 1). For each of these solutions, the native swap list is equal to the actual swap list of that solution."}, {"heading": "3.4 Complexity Analysis and Comparison among ASG, LASG and BU", "text": "In this section we present a complexity analysis of ASG and LASG and compare it with BU. We will use the following parameters in the analyse. n\u03b1\u03b2 and n\u03b2 denote the total number of nodes and the number of OR nodes in an alternating AND / OR tree. b. d denotes the out-degree of the OR node with the maximum number of children. c. m denotes the maximum number of OR edges in a solution. d. o denotes the maximum size of Open. We present the complexity analysis for generating c solutions. Therefore, the size of Closed is O (c)."}, {"heading": "3.4.1 Complexity of ASG", "text": "The number of swap options available for a solution can be at most the same as the number of OR edges in this solution. Therefore, the swap list for each solution can be sorted in the non-decreasing order of aggregated costs. O (n\u03b2.d. log d) = O (n\u03b1\u03b2).b. The number of swap options available for a solution can be at most the same. Thus, the swap list can be built for each solution in O (m) time. For c solutions that create swap options, take O (c.m).c. Since the size of the successor set of a solution is at most the same, the size of the swap list for each solution can be built in O (m) time."}, {"heading": "3.4.2 Complexity of LASG", "text": "Time complexity: Compared to algorithm 4, algorithm 5 does not check for duplicates and only adds the solution to Open when it is needed. Therefore, the other terms remain the same in complexity, except for the term corresponding to the duplicate check. However, here, over the course of algorithm 5 T s is created and maintained. The size of the swap list of a solution is O (m), where m is the maximum number of OR edges in a solution. There may also be at most O (m) sibling solutions for the solution. Therefore, the complexity of the lazy extension is O (c.m2). Since O (c.m2) is the dominant factor, the time complexity of LASG O (c.m2) = O (.n.\u03b2) is the complexity of the lazy expansion O (c.m2)."}, {"heading": "3.4.3 Comparison with BU", "text": "The time complexity in generating the c best solutions for an AND / OR tree is O (n\u03b1\u03b2.c. log c) and the space complexity is O (n\u03b1\u03b2.c). The detailed analysis can be found in the work of Elliott (2007). Since the space complexity of both the ASG and the LASG algorithm is reduced to O (n\u03b1\u03b2.c) and the time complexity of the LASG is better than the BU, while the time complexity of the ASG is square with respect to c compared to the (c. log c) factor of the BU. If an additional hash map is used to reduce the time required for double checking, ASG beats both LASG and BU in terms of time complexity, since both O (n\u03b1\u03b2) and O (c. lg + c. lg n\u03b1\u03b2)) are symptotically lower than O (\u03b2n)."}, {"heading": "4. Ordered Solution Generation for AND/OR DAGs", "text": "In this section, we present the problem of creating solutions in no decreasing order of cost for a given AND / OR DAG. We present the functionality of the existing algorithm for creating solutions for both tree-based semantics and standard semantics. Next, we present the changes in ASG and LASG for dealing with DAG."}, {"heading": "4.1 Existing Bottom-Up Algorithm", "text": "< 1 > < 2 > < 1 > 4 > 4 > 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}, {"heading": "4.2 Top-Down Method for DAGs", "text": "The proposed top-down approaches (ASG and LASG) are also applicable to AND / OR DAGs to generate an alternative DAG solution under standard semantics. Only the method for calculating the cost increase after the application of a swap option needs to be changed to take into account the fact that an OR node can be included in a DAG solution by several paths from the root node. We use the term participation count to calculate the cost increase. Participation Count: The term participation count refers to the intermediate nodes of a DAG solution as follows: In a DAG solution, the participation count of a intermediate node, vq, is the total number of different paths linking the root node, vR and vq. For example, Figure 14 shows the optimal solution DAG using thick dashed lines with arrow heads, and the participation for each intermediate node count, vvi, vq, the total number, the root node, and vq."}, {"heading": "4.2.1 Modification in the Proposed Top-Down Approach", "text": "The calculation of the successor solution in line 14 of algorithm 4 is modified to take into account the number of participations of the OR node to which the applied swap option belongs; the general method is represented in algorithm 6 (on the next page); in order to apply the solution to AND / OR DAGs, in addition to the use of the above modification for calculating the cost of a newly generated solution, another modification is required for calculating the native swap options for a given solution; the modification is explained using an example. Consider the solution, S1, shown in Figure 15. S1 is highlighted with thick dashed lines with arrow headed. the pair, cv (vq), C (S1, vq), is shown within the rectangles next to each node vq; rectangles with rounded corners are used when C (S1, vq)."}, {"heading": "4.2.2 Working of ASG and LASG Algorithm on AND/OR DAG", "text": "We describe the functioning of the ASG algorithm using the example DAG shown in Figure 2. Before entering the outermost loop, TList and Closed are empty, and Open contains the optimal solution Sopt. The content of the various lists obtained after the first cycles of the outermost loop is in Table 3. Each solution is represented by its signature. Solutions that already exist in Open and are also constructed by extending the current Smin are highlighted with subbrackets. For example, the solution {\u03c3 (2,5,4), \u03c3 (3,5,6)} that is added in Iteration 2 (while the successor solutions of the ones newly constructed in Iteration 5 (2,5,4) while the solution is expanded (3,5,6). Now, we illustrate the functioning of the LASG algorithm using the example DAG that is shown in Figure 2. The content of the different lists when a solution is added in Iteration is shown in Table 4 as the solution is expanded."}, {"heading": "4.2.3 Generating Solutions under Tree Based Semantics", "text": "In contrast to standard semantics, ASG or LASG does not have a direct extension for generating solutions under tree semantics. In Figure 13, we show an example solution that is valid under tree semantics but is invalid under standard semantics because both OR edges that form the OR node v7, namely e (7,9) and e (7,10), are present in this solution. These two OR edges are contained in the solution by two different paths that form the root node v1. Since the existing bottom-up approach stores the alternative solutions at each node in relation to the solutions of the children of this node, this representation explicitly allows these different paths to be stored, making BU affordable for creating alternative solutions under tree semantics. On the contrary, our approach works from top to bottom with a compact representation (signature) for storing the solutions."}, {"heading": "5. Experimental Results and Observations", "text": "To get an idea of the performance of the proposed algorithms and to compare them with the existing approach, we have implemented the ASG, LASG and BU (existing bottom-up approach) and tested them on the following test areas: a. A series of synthetically generated AND / OR trees; b. Tower of Hanoi (TOH) problem; c. A series of synthetically generated AND / OR DAGs; d. Matrix chain multiplication problem; and e. The problem of determining the secondary structure of the RNA sequences. It should be noted that in our implementation of the ASG algorithm we have implemented the more space-efficient version of the ASG algorithm (without a separate hash map for storing the solutions in Open and Closed, creating an additional expense for duplication testing). Another important point is that for each test case the specified runtime of ASG and the number of solutions required for the solution generation of the optimal LASG for the number of solutions."}, {"heading": "5.1 Complete Trees", "text": "We have created a set of complete, alternating AND / OR trees by varying them - (a) the degree of non-terminal nodes (denoted by d) and (b) the height (denoted by h). These trees can be considered a search area for a gift wrapping problem, with (a) the terminal nodes representing the cost of the elementary elements, (b) the OR nodes representing a choice between the elements (elementary or composed in nature) represented by the children, and (c) the AND nodes modelling the repackaging of the items returned by the children. Each packaging incurs costs modelled by the cost of the intermediate AND nodes. Here, the goal is to find the alternative gifts in the order of non-decreasing costs. Table 5 shows the time required to generate 100, 300 and 500 solutions for various complete alternating AND / OR trees."}, {"heading": "5.1.1 Experimentation with Queue with Bounded Length", "text": "Because the Open List can grow very quickly, both the ASG and the LASG cause significant time and space expenditure to maintain the Open List if the number of solutions to be created is not known from the outset. In fact, for the ASG, checking for duplicates in Open is the primary source of time complexity, and storing the solutions in Open is a major factor in spatial complexity. If the number of solutions to be created is known from the outset, the proposed top-down approach can effectively exploit the fact by using a limited queue for implementing Open. If a limited queue is used, the time required along with the space required is significantly reduced. We show the effect of using the limited queue for implementing Open in Table 7 (time reporting) and in Table 8 (memory usage reporting) for generating 100, 300 and 500 solutions where the number of solutions to be generated is known beforehand."}, {"heading": "5.1.2 Experimentation to Compare the Incremental Nature", "text": "The proposed top-down algorithms are incremental in nature, while the existing bottom-up approach is not incremental. After generating a certain number of ordered solutions, our methods can gradually generate the next solution without having to restart itself, while the existing approach needs to be restarted. For example, after generating the first 10 ordered solutions, ASG and LASG generate the eleventh solution directly from the data structures previously maintained by these algorithms, and perform necessary updates to these data structures. While the BU needs to be restarted with input parameters 11 to generate the eleventh solution, in Table 9 we compare the time it takes to generate the subsequent eleventh solution and the twelfth solution step by step after generating the first 10 solutions. In order to have more clarity in comparison between the runtimes of the respective algorithms, we have used a higher precision (up to the sixth decimal place) while reporting the runtime in Table 9."}, {"heading": "5.2 Multipeg Tower of Hanoi Problem", "text": "Consider the problem of the Hanoi Multipeg Tower (Majumdar, 1996; Gupta, Chakrabarti, & Ghose, 1992), in which \u03c1 plates are attached to a stand. Initially \u03b3 plates rest on the source peg A with a small plate on a large plate. The goal is to transfer all \u03b3 plates from A to the target peg B with minimal legal steps. In a legal step, the top plate can be transferred from any tower to another plate with a larger plate than the top plate. Hanoi's multipeg tower problem can be solved recursively as a consequence."}, {"heading": "5.3 Randomly Constructed AND/OR DAGs", "text": "We have constructed a series of randomly generated AND / OR-DAGs and evaluated the ASG, LASG and BU algorithm for generating solutions under standard semantics. We have used the proposed extension of the BU algorithm to generate solutions under standard semantics.Table 12 and Table 13 compare the time and space required to operate ASG, LASG and BU to generate 100, 300 and 500 solutions for each test case. It should be noted that the first and second columns of each line provide both the size (n\u03b1\u03b2) and the average out-degree (d) of the DAG. The results for this test range are similar to the results for randomly constructed AND / OR trees. It should be noted that LASG performs better than BU in both time and space. Between ASG and BU, BU performs better than ASG for most test cases in terms of the time required to generate a certain number of solutions."}, {"heading": "5.4 Matrix-Chain Multiplication Problem", "text": "We also have the well-known matrix chain multiplication (Cormen, Stein, Rivest, & Leiserson, 2001) problem for the experiment. The search space of the popular dynamic programming formulation of this problem corresponds to AND / OR DAG.Given a sequence of matrices, A1, A2, \u00b7 \u00b7, An, of n matrices in which matrix Ai has dimension pi \u2212 1 \u00b7 pi, in this problem the goal is to find the most efficient way to multiply these matrices. The classical dynamic programming approach works as follows. Ask A [i, j] designates the matrix resulting from the evaluation of the product, AiAi + \u00b7 \u00b7 Aj, and m [i, j] is the minimum number of scalar multiplications that is necessary for calculating the matrix A [i, j] and the cost of the optimal solution."}, {"heading": "5.5 Generating Secondary Structure for RNA", "text": "Another relevant problem in which the alternative solutions play an important role is the calculation of the secondary structure of RNA. < B = > U molecules can be considered strands of bases, where each base to the set {adenine, cytocine, guanine, uracil} (also referred to as {A, C, G, U}). RNA molecules tend to loop back and perform a form of base pairs with themselves and the resulting form is referred to as a secondary structure (Mathews & Zuker, 2004). Stability of the secondary structure largely depends on the number of base pairings (in general, greater number of base pairings implies a more stable secondary structure).Although there are other factors influencing the secondary structure, it is often not possible to express these other factors with a cost function and they are typically evaluated empirically. Therefore, it is useful to generate a possible number of base pairings arranged by secondary pairing them."}, {"heading": "5.6 Observations", "text": "The results of the study show that the share of those who are able to remain in the total population is approximately the same as the share of those who are in the total population."}, {"heading": "6. Ramifications on Implicitly Specified AND/OR Structures", "text": "In this section, we briefly discuss the use of our proposed algorithms to generate alternative solutions in the non-decreasing order of the cost of implicit AND / OR search spaces. One possible option is to expand the standard AO * to generate a certain number of solutions, say k, as follows. Instead of maintaining just one potential solution graph (psg), k-PSGs can be recalculated at each stage on the explicitly constructed search space, and instead of expanding a node, k-nodes (that is, one node from each PSG) must be expanded at once. After the nodes are expanded, k-PSGs are recalculated. Since the cost of the nodes is often recalculated after the expansion of the node pool, the swap options associated with such a node must be updated after each such recalculation. Another possible approach could be to run AO-PSGs until the optimal solution can be generated with the expenditure options at that time."}, {"heading": "7. Conclusion", "text": "In our work, we have presented a top-down algorithm for generating solutions of a given weighted AND / OR structure (DAG) in no decreasing order of cost. AND / OR-DAGs contract solutions are useful in a number of areas, including model-based programming, development of new variants of AO *, service composition based on user preferences, real problems with dynamic programming, etc. Our proposed algorithm has two advantages - (a) it works incrementally, i.e. after generating a certain number of solutions, the next solution is generated quickly, (b) if the number of solutions to be generated is a priori known, our algorithm can use them to generate solutions faster. Experimental results show the effectiveness of our algorithm vis-\u00e0-vis the state of the art. This also opens up some interesting research problems and the development of applications."}, {"heading": "8. Acknowledgments", "text": "We thank the anonymous reviewers and the editor, Prof. Hector Geffner, for their valuable comments, which greatly enriched the presentation of the paper; we also thank Prof. Abhijit Mitra of the International Institute of Information Technology, Hyderabad, India, for his valuable contributions to the test domain with secondary structure of RNA; we thank Aritra Hazra and Srobona Mitra, Research Scholar, Department of Comp. Sc. & Engg., Indian Institute of Technology Kharagpur, India, for correcting the paper."}, {"heading": "Appendix A. Proof of Correctness of Algorithm 4", "text": "Lemma A.1 Any solution other than the optimal solution Sopt can be constructed by Sopt by selecting a sequence of swap options according to the order of the swap nodes."}, {"heading": "Appendix B. Proof of Correctness of Algorithm 5", "text": "Definition B.q [Revergent Paths in Solution Space DAG] Two paths, (i) p1 = S1i1 \u2192 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7"}, {"heading": "Appendix C. Conversion between AND/OR Tree and Alternating", "text": "The generalization of AND / OR tree is a generalization of the alternating AND / OR tree, where the restriction of the strict switching between AND / OR nodes is relaxed. In other words, an intermediate OR node may be a child of another intermediate OR node and the similar parent-child relationship also allowed for AND nodes. We present an algorithm to convert an AND / OR tree into an equivalent alternating AND / OR node line. We use two operations, folding and unfolding for the conversions. Corresponding to each edge, an update list, is used for the conversions. In an AND / OR tree, we consider two nodes, vq and vr, of a similar nature (AND / OR) and they are joined by an edge. Edges, e1, ek emanate from it. [Folding OR Node: Suppose and Ovr node] are nodes."}], "references": [{"title": "An algorithm better than AO", "author": ["B. Bonet", "H. Geffner"], "venue": "In Proceedings of the 20th national conference on Artificial intelligence - Volume", "citeRegEx": "Bonet and Geffner,? \\Q2005\\E", "shortCiteRegEx": "Bonet and Geffner", "year": 2005}, {"title": "Algorithms for searching explicit AND/OR graphs and their applications to problem reduction search", "author": ["P.P. Chakrabarti"], "venue": "Artif. Intell.,", "citeRegEx": "Chakrabarti,? \\Q1994\\E", "shortCiteRegEx": "Chakrabarti", "year": 1994}, {"title": "Increasing search efficiency using multiple heuristics", "author": ["P.P. Chakrabarti", "S. Ghose", "A. Pandey", "S.C. DeSarkar"], "venue": "Inf. Process. Lett.,", "citeRegEx": "Chakrabarti et al\\.,? \\Q1989\\E", "shortCiteRegEx": "Chakrabarti et al\\.", "year": 1989}, {"title": "An admissible and optimal algorithm for searching AND/OR graphs", "author": ["C.L. Chang", "J.R. Slagle"], "venue": "Artif. Intell.,", "citeRegEx": "Chang and Slagle,? \\Q1971\\E", "shortCiteRegEx": "Chang and Slagle", "year": 1971}, {"title": "Algorithms for finding k-best perfect matchings", "author": ["C.R. Chegireddy", "H.W. Hamacher"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "Chegireddy and Hamacher,? \\Q1987\\E", "shortCiteRegEx": "Chegireddy and Hamacher", "year": 1987}, {"title": "Composite templates for cloth modeling and sketching", "author": ["H. Chen", "Z.J. Xu", "Z.Q. Liu", "S.C. Zhu"], "venue": "In Proceedings of the 2006 IEEE Computer Society Conference on Computer Vision and Pattern Recognition - Volume", "citeRegEx": "Chen et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2006}, {"title": "Introduction to Algorithms (2nd edition). McGraw-Hill Higher Education", "author": ["T.H. Cormen", "C. Stein", "R.L. Rivest", "C.E. Leiserson"], "venue": null, "citeRegEx": "Cormen et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Cormen et al\\.", "year": 2001}, {"title": "Compiling knowledge into decomposable negation normal form", "author": ["A. Darwiche"], "venue": "In Proceedings of the 16th international joint conference on Artifical intelligence - Volume", "citeRegEx": "Darwiche,? \\Q1999\\E", "shortCiteRegEx": "Darwiche", "year": 1999}, {"title": "Decomposable negation normal form", "author": ["A. Darwiche"], "venue": "J. ACM,", "citeRegEx": "Darwiche,? \\Q2001\\E", "shortCiteRegEx": "Darwiche", "year": 2001}, {"title": "VLSI floorplan generation and area optimization using and-or graph search", "author": ["P. Dasgupta", "S. Sur-Kolay", "B. Bhattacharya"], "venue": "In VLSI Design,", "citeRegEx": "Dasgupta et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Dasgupta et al\\.", "year": 1995}, {"title": "AND/OR search spaces for graphical models", "author": ["R. Dechter", "R. Mateescu"], "venue": "Artif. Intell.,", "citeRegEx": "Dechter and Mateescu,? \\Q2007\\E", "shortCiteRegEx": "Dechter and Mateescu", "year": 2007}, {"title": "Extracting the k best solutions from a valued And-Or acyclic graph", "author": ["P. Elliott"], "venue": null, "citeRegEx": "Elliott,? \\Q2007\\E", "shortCiteRegEx": "Elliott", "year": 2007}, {"title": "DNNF-based belief state estimation", "author": ["P. Elliott", "B. Williams"], "venue": "In Proceedings of the 21st national conference on Artificial intelligence - Volume", "citeRegEx": "Elliott and Williams,? \\Q2006\\E", "shortCiteRegEx": "Elliott and Williams", "year": 2006}, {"title": "Finding the k smallest spanning trees", "author": ["D. Eppstein"], "venue": "In Proc. 2nd Scandinavian Worksh. Algorithm Theory, No. 447 in Lecture Notes in Computer Science,", "citeRegEx": "Eppstein,? \\Q1990\\E", "shortCiteRegEx": "Eppstein", "year": 1990}, {"title": "Finding the k shortest paths", "author": ["D. Eppstein"], "venue": "SIAM J. Comput.,", "citeRegEx": "Eppstein,? \\Q1998\\E", "shortCiteRegEx": "Eppstein", "year": 1998}, {"title": "M best solutions over graphical models", "author": ["N. Flerova", "R. Dechter"], "venue": "In 1st Workshop on Constraint Reasoning and Graphical Structures", "citeRegEx": "Flerova and Dechter,? \\Q2010\\E", "shortCiteRegEx": "Flerova and Dechter", "year": 2010}, {"title": "Bucket and mini-bucket schemes for m best solutions over graphical models", "author": ["N. Flerova", "R. Dechter"], "venue": "In GKR 2011(a workshop of IJCAI", "citeRegEx": "Flerova and Dechter,? \\Q2011\\E", "shortCiteRegEx": "Flerova and Dechter", "year": 2011}, {"title": "An LP view of the m-best MAP problem", "author": ["M. Fromer", "A. Globerson"], "venue": "In Advances in Neural Information Processing Systems (NIPS)", "citeRegEx": "Fromer and Globerson,? \\Q2009\\E", "shortCiteRegEx": "Fromer and Globerson", "year": 2009}, {"title": "A solution to billiard balls puzzle using ao algorithm and its application to product development", "author": ["Z. Fuxi", "T. Ming", "H. Yanxiang"], "venue": "Knowledge-Based Intelligent Information and Engineering Systems,", "citeRegEx": "Fuxi et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Fuxi et al\\.", "year": 2003}, {"title": "Approximate solution sampling (and counting) on AND/OR spaces", "author": ["V. Gogate", "R. Dechter"], "venue": "In CP,", "citeRegEx": "Gogate and Dechter,? \\Q2008\\E", "shortCiteRegEx": "Gogate and Dechter", "year": 2008}, {"title": "Automatic service composition based on enhanced service dependency graph", "author": ["Z. Gu", "J. Li", "B. Xu"], "venue": "In Web Services,", "citeRegEx": "Gu et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Gu et al\\.", "year": 2008}, {"title": "Service data correlation modeling and its application in data-driven service composition", "author": ["Z. Gu", "B. Xu", "J. Li"], "venue": "Services Computing, IEEE Transactions on,", "citeRegEx": "Gu et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Gu et al\\.", "year": 2010}, {"title": "The Towers of Hanoi: generalizations, specializations and algorithms", "author": ["P. Gupta", "P.P. Chakrabarti", "S. Ghose"], "venue": "International Journal of Computer Mathematics,", "citeRegEx": "Gupta et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Gupta et al\\.", "year": 1992}, {"title": "K best solutions to combinatorial optimization problems", "author": ["H.W. Hamacher", "M. Queyranne"], "venue": "Annals of Operations Research,", "citeRegEx": "Hamacher and Queyranne,? \\Q1985\\E", "shortCiteRegEx": "Hamacher and Queyranne", "year": 1985}, {"title": "Anytime heuristic search", "author": ["E.A. Hansen", "R. Zhou"], "venue": "J. Artif. Intell. Res. (JAIR),", "citeRegEx": "Hansen and Zhou,? \\Q2007\\E", "shortCiteRegEx": "Hansen and Zhou", "year": 2007}, {"title": "AND/OR graph representation of assembly plans", "author": ["L. Homem de Mello", "A. Sanderson"], "venue": "Robotics and Automation, IEEE Transactions on,", "citeRegEx": "Mello and Sanderson,? \\Q1990\\E", "shortCiteRegEx": "Mello and Sanderson", "year": 1990}, {"title": "An efficient algorithm for searching implicit AND/OR graphs with cycles", "author": ["P. Jim\u00e9nez", "C. Torras"], "venue": "Artif. Intell.,", "citeRegEx": "Jim\u00e9nez and Torras,? \\Q2000\\E", "shortCiteRegEx": "Jim\u00e9nez and Torras", "year": 2000}, {"title": "AND/OR graph and search algorithm for discovering composite web services", "author": ["Q.A. Lang", "Y. Su"], "venue": "International Journal of Web Services Research,", "citeRegEx": "Lang and Su,? \\Q2005\\E", "shortCiteRegEx": "Lang and Su", "year": 2005}, {"title": "A procedure for computing the k best solutions to discrete optimization problems and its application to the shortest path problem", "author": ["E.L. Lawler"], "venue": "Management Science,", "citeRegEx": "Lawler,? \\Q1972\\E", "shortCiteRegEx": "Lawler", "year": 1972}, {"title": "AND/OR tree search algorithm in web service composition", "author": ["X. Ma", "B. Dong", "M. He"], "venue": "PACIIA", "citeRegEx": "Ma et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Ma et al\\.", "year": 2008}, {"title": "Generalized multi-peg Tower of Hanoi problem", "author": ["A.A.K. Majumdar"], "venue": "The Journal of the Australian Mathematical Society. Series B. Applied Mathematics,", "citeRegEx": "Majumdar,? \\Q1996\\E", "shortCiteRegEx": "Majumdar", "year": 1996}, {"title": "AND/OR branch-and-bound for solving mixed integer linear programming problems", "author": ["R. Marinescu", "R. Dechter"], "venue": "In CP,", "citeRegEx": "Marinescu and Dechter,? \\Q2005\\E", "shortCiteRegEx": "Marinescu and Dechter", "year": 2005}, {"title": "Memory intensive branch-and-bound search for graphical models", "author": ["R. Marinescu", "R. Dechter"], "venue": "In AAAI", "citeRegEx": "Marinescu and Dechter,? \\Q2006\\E", "shortCiteRegEx": "Marinescu and Dechter", "year": 2006}, {"title": "Best-first AND/OR search for 0/1 integer programming", "author": ["R. Marinescu", "R. Dechter"], "venue": "In CPAIOR,", "citeRegEx": "Marinescu and Dechter,? \\Q2007\\E", "shortCiteRegEx": "Marinescu and Dechter", "year": 2007}, {"title": "Best-first AND/OR search for graphical models", "author": ["R. Marinescu", "R. Dechter"], "venue": "In AAAI,", "citeRegEx": "Marinescu and Dechter,? \\Q2007\\E", "shortCiteRegEx": "Marinescu and Dechter", "year": 2007}, {"title": "AND/OR branch-and-bound search for combinatorial optimization in graphical models", "author": ["R. Marinescu", "R. Dechter"], "venue": "Artif. Intell.,", "citeRegEx": "Marinescu and Dechter,? \\Q2009\\E", "shortCiteRegEx": "Marinescu and Dechter", "year": 2009}, {"title": "Memory intensive AND/OR search for combinatorial optimization in graphical models", "author": ["R. Marinescu", "R. Dechter"], "venue": "Artif. Intell.,", "citeRegEx": "Marinescu and Dechter,? \\Q2009\\E", "shortCiteRegEx": "Marinescu and Dechter", "year": 2009}, {"title": "Additive AND/OR graphs", "author": ["A. Martelli", "U. Montanari"], "venue": "In Proceedings of the 3rd international joint conference on Artificial intelligence,", "citeRegEx": "Martelli and Montanari,? \\Q1973\\E", "shortCiteRegEx": "Martelli and Montanari", "year": 1973}, {"title": "Optimizing decision trees through heuristically guided search", "author": ["A. Martelli", "U. Montanari"], "venue": "Commun. ACM,", "citeRegEx": "Martelli and Montanari,? \\Q1978\\E", "shortCiteRegEx": "Martelli and Montanari", "year": 1978}, {"title": "AND/OR multi-valued decision diagrams for constraint networks", "author": ["R. Mateescu", "R. Dechter"], "venue": "In Concurrency, Graphs and Models,", "citeRegEx": "Mateescu and Dechter,? \\Q2008\\E", "shortCiteRegEx": "Mateescu and Dechter", "year": 2008}, {"title": "AND/OR multi-valued decision diagrams (AOMDDs) for graphical models", "author": ["R. Mateescu", "R. Dechter", "R. Marinescu"], "venue": "J. Artif. Intell. Res. (JAIR),", "citeRegEx": "Mateescu et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Mateescu et al\\.", "year": 2008}, {"title": "RNA secondary structure prediction. In Encyclopedia of Genetics, Genomics, Proteomics and Bioinformatics", "author": ["D.H. Mathews", "M. Zuker"], "venue": null, "citeRegEx": "Mathews and Zuker,? \\Q2004\\E", "shortCiteRegEx": "Mathews and Zuker", "year": 2004}, {"title": "An efficient algorithm for finding the m most probable configurations in probabilistic expert systems", "author": ["D. Nilsson"], "venue": "Statistics and Computing,", "citeRegEx": "Nilsson,? \\Q1998\\E", "shortCiteRegEx": "Nilsson", "year": 1998}, {"title": "Principles of artificial intelligence", "author": ["N.J. Nilsson"], "venue": "Tioga Publishing Co", "citeRegEx": "Nilsson,? \\Q1980\\E", "shortCiteRegEx": "Nilsson", "year": 1980}, {"title": "Anytime AND/OR depth-first search for combinatorial optimization. In SoCS", "author": ["L. Otten", "R. Dechter"], "venue": null, "citeRegEx": "Otten and Dechter,? \\Q2011\\E", "shortCiteRegEx": "Otten and Dechter", "year": 2011}, {"title": "Heuristics: intelligent search strategies for computer problem solving", "author": ["J. Pearl"], "venue": null, "citeRegEx": "Pearl,? \\Q1984\\E", "shortCiteRegEx": "Pearl", "year": 1984}, {"title": "Artificial Intelligence: A Modern Approach (2nd edition edition)", "author": ["S. Russell", "P. Norvig"], "venue": "chap. Planning,", "citeRegEx": "Russell and Norvig,? \\Q2003\\E", "shortCiteRegEx": "Russell and Norvig", "year": 2003}, {"title": "An incremental graph-based approach to automatic service composition", "author": ["M.M. Shiaa", "J.O. Fladmark", "B. Thiell"], "venue": "IEEE International Conference on Services Computing,", "citeRegEx": "Shiaa et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Shiaa et al\\.", "year": 2008}, {"title": "A sophisticated approach to composing services based on action dominance relation", "author": ["D.H. Shin", "H.B. Jeon", "K.H. Lee"], "venue": "In Services Computing Conference (APSCC),", "citeRegEx": "Shin et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Shin et al\\.", "year": 2010}, {"title": "Routing algorithms for dynamic, intelligent transportation networks. Master\u2019s thesis, Virginia", "author": ["S. Subramanian"], "venue": "Technical Univ., Dept. of Civil Engineering", "citeRegEx": "Subramanian,? \\Q1997\\E", "shortCiteRegEx": "Subramanian", "year": 1997}, {"title": "An algorithm for finding k shortest loopless paths in a directed network", "author": ["K. Sugimoto", "N. Katoh"], "venue": "Trans. Information Processing Soc. Japan,", "citeRegEx": "Sugimoto and Katoh,? \\Q1985\\E", "shortCiteRegEx": "Sugimoto and Katoh", "year": 1985}, {"title": "Dealing with additional constraints in the k-shortest path problem", "author": ["T. Takkala", "R. Bornd\u00f6rfer", "A. L\u00f6bel"], "venue": "In Proc. WM", "citeRegEx": "Takkala et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Takkala et al\\.", "year": 2000}, {"title": "A k-shortest path algorithm for adaptive routing in communications", "author": ["D.M. Topkis"], "venue": "networks. Trans. Communications,", "citeRegEx": "Topkis,? \\Q1988\\E", "shortCiteRegEx": "Topkis", "year": 1988}, {"title": "Automatic service composition using AND/OR graph", "author": ["Y. Yan", "B. Xu", "Z. Gu"], "venue": "In E-Commerce Technology and the Fifth IEEE Conference on Enterprise Computing, E-Commerce and E-Services,", "citeRegEx": "Yan et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Yan et al\\.", "year": 2008}], "referenceMentions": [{"referenceID": 45, "context": ", where the overall problem can be hierarchically decomposed into conjunction and disjunction of subproblems (Pearl, 1984; Nilsson, 1980).", "startOffset": 109, "endOffset": 137}, {"referenceID": 43, "context": ", where the overall problem can be hierarchically decomposed into conjunction and disjunction of subproblems (Pearl, 1984; Nilsson, 1980).", "startOffset": 109, "endOffset": 137}, {"referenceID": 45, "context": "Traditionally the algorithm AO* (Pearl, 1984; Nilsson, 1980; Martelli & Montanari, 1978, 1973; Chang & Slagle, 1971) has been used for searching implicitly defined AND/OR structures.", "startOffset": 32, "endOffset": 116}, {"referenceID": 43, "context": "Traditionally the algorithm AO* (Pearl, 1984; Nilsson, 1980; Martelli & Montanari, 1978, 1973; Chang & Slagle, 1971) has been used for searching implicitly defined AND/OR structures.", "startOffset": 32, "endOffset": 116}, {"referenceID": 0, "context": "An empirical study of AO* can be found in Bonet and Geffner\u2019s (2005) work.", "startOffset": 42, "endOffset": 69}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994).", "startOffset": 90, "endOffset": 161}, {"referenceID": 8, "context": "Smooth Deterministic Decomposable Negative Normal Forms (sd-DNNF) (Darwiche, 2001) exhibit explicit AND/OR DAG structure and have been used for various applications including compiling knowledge (Darwiche, 1999), estimating belief states (Elliott & Williams, 2006), etc.", "startOffset": 66, "endOffset": 82}, {"referenceID": 7, "context": "Smooth Deterministic Decomposable Negative Normal Forms (sd-DNNF) (Darwiche, 2001) exhibit explicit AND/OR DAG structure and have been used for various applications including compiling knowledge (Darwiche, 1999), estimating belief states (Elliott & Williams, 2006), etc.", "startOffset": 195, "endOffset": 211}, {"referenceID": 43, "context": "This is particularly the case for AO* (Nilsson, 1980) where the potential solution graph (psg) is recomputed every time from the current explicit graph after a node is expanded.", "startOffset": 38, "endOffset": 53}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994). Dechter and Mateescu (2007) have presented the explicit AND/OR search space perspective for graphical models.", "startOffset": 143, "endOffset": 191}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994). Dechter and Mateescu (2007) have presented the explicit AND/OR search space perspective for graphical models. Different search strategies (best first, branch and bound, etc.) over the AND/OR search spaces in graphical models are discussed by Marinescu and Dechter (2007b, 2006). AND/OR search spaces are also used for solving mixed integer linear programming (Marinescu & Dechter, 2005), 0/1 integer Programming (Marinescu & Dechter, 2007a), combinatorial optimization in graphical models (Marinescu & Dechter, 2009a, 2009b). AND/OR Multivalued Decision Diagrams (AOMDD), which combine the idea of Multi-Valued Decision Diagrams(MDD) and AND/OR structures, is presented by Mateescu, Dechter, and Marinescu (2008) and further research along this direction can be found in the work of Mateescu and Dechter (2008).", "startOffset": 143, "endOffset": 876}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994). Dechter and Mateescu (2007) have presented the explicit AND/OR search space perspective for graphical models. Different search strategies (best first, branch and bound, etc.) over the AND/OR search spaces in graphical models are discussed by Marinescu and Dechter (2007b, 2006). AND/OR search spaces are also used for solving mixed integer linear programming (Marinescu & Dechter, 2005), 0/1 integer Programming (Marinescu & Dechter, 2007a), combinatorial optimization in graphical models (Marinescu & Dechter, 2009a, 2009b). AND/OR Multivalued Decision Diagrams (AOMDD), which combine the idea of Multi-Valued Decision Diagrams(MDD) and AND/OR structures, is presented by Mateescu, Dechter, and Marinescu (2008) and further research along this direction can be found in the work of Mateescu and Dechter (2008). AND/OR search spaces are also applied for solution sampling and counting (Gogate & Dechter, 2008).", "startOffset": 143, "endOffset": 974}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994). Dechter and Mateescu (2007) have presented the explicit AND/OR search space perspective for graphical models. Different search strategies (best first, branch and bound, etc.) over the AND/OR search spaces in graphical models are discussed by Marinescu and Dechter (2007b, 2006). AND/OR search spaces are also used for solving mixed integer linear programming (Marinescu & Dechter, 2005), 0/1 integer Programming (Marinescu & Dechter, 2007a), combinatorial optimization in graphical models (Marinescu & Dechter, 2009a, 2009b). AND/OR Multivalued Decision Diagrams (AOMDD), which combine the idea of Multi-Valued Decision Diagrams(MDD) and AND/OR structures, is presented by Mateescu, Dechter, and Marinescu (2008) and further research along this direction can be found in the work of Mateescu and Dechter (2008). AND/OR search spaces are also applied for solution sampling and counting (Gogate & Dechter, 2008). Smooth Deterministic Decomposable Negative Normal Forms (sd-DNNF) (Darwiche, 2001) exhibit explicit AND/OR DAG structure and have been used for various applications including compiling knowledge (Darwiche, 1999), estimating belief states (Elliott & Williams, 2006), etc. Apart from the domains of planning, constraint satisfaction, knowledge based reasoning, etc., AND/OR structure based techniques are also widely used for various application based domains, e.g., web service composition (Gu, Xu, & Li, 2010; Shin, Jeon, & Lee, 2010; Gu, Li, & Xu, 2008; Ma, Dong, & He, 2008; Yan, Xu, & Gu, 2008; Lang & Su, 2005), vision and graphics tasks (Chen, Xu, Liu, & Zhu, 2006), etc. Lang and Su (2005) have described an AND/OR graph search algorithm for composing web services for user requirements.", "startOffset": 143, "endOffset": 1770}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994). Dechter and Mateescu (2007) have presented the explicit AND/OR search space perspective for graphical models. Different search strategies (best first, branch and bound, etc.) over the AND/OR search spaces in graphical models are discussed by Marinescu and Dechter (2007b, 2006). AND/OR search spaces are also used for solving mixed integer linear programming (Marinescu & Dechter, 2005), 0/1 integer Programming (Marinescu & Dechter, 2007a), combinatorial optimization in graphical models (Marinescu & Dechter, 2009a, 2009b). AND/OR Multivalued Decision Diagrams (AOMDD), which combine the idea of Multi-Valued Decision Diagrams(MDD) and AND/OR structures, is presented by Mateescu, Dechter, and Marinescu (2008) and further research along this direction can be found in the work of Mateescu and Dechter (2008). AND/OR search spaces are also applied for solution sampling and counting (Gogate & Dechter, 2008). Smooth Deterministic Decomposable Negative Normal Forms (sd-DNNF) (Darwiche, 2001) exhibit explicit AND/OR DAG structure and have been used for various applications including compiling knowledge (Darwiche, 1999), estimating belief states (Elliott & Williams, 2006), etc. Apart from the domains of planning, constraint satisfaction, knowledge based reasoning, etc., AND/OR structure based techniques are also widely used for various application based domains, e.g., web service composition (Gu, Xu, & Li, 2010; Shin, Jeon, & Lee, 2010; Gu, Li, & Xu, 2008; Ma, Dong, & He, 2008; Yan, Xu, & Gu, 2008; Lang & Su, 2005), vision and graphics tasks (Chen, Xu, Liu, & Zhu, 2006), etc. Lang and Su (2005) have described an AND/OR graph search algorithm for composing web services for user requirements. Ma et al. (2008) have advocated the use of AND/OR trees to capture dependencies between the inputs and outputs of the component web services and propose a top-down search algorithm to generate solutions of the AND/OR tree.", "startOffset": 143, "endOffset": 1885}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994). Dechter and Mateescu (2007) have presented the explicit AND/OR search space perspective for graphical models. Different search strategies (best first, branch and bound, etc.) over the AND/OR search spaces in graphical models are discussed by Marinescu and Dechter (2007b, 2006). AND/OR search spaces are also used for solving mixed integer linear programming (Marinescu & Dechter, 2005), 0/1 integer Programming (Marinescu & Dechter, 2007a), combinatorial optimization in graphical models (Marinescu & Dechter, 2009a, 2009b). AND/OR Multivalued Decision Diagrams (AOMDD), which combine the idea of Multi-Valued Decision Diagrams(MDD) and AND/OR structures, is presented by Mateescu, Dechter, and Marinescu (2008) and further research along this direction can be found in the work of Mateescu and Dechter (2008). AND/OR search spaces are also applied for solution sampling and counting (Gogate & Dechter, 2008). Smooth Deterministic Decomposable Negative Normal Forms (sd-DNNF) (Darwiche, 2001) exhibit explicit AND/OR DAG structure and have been used for various applications including compiling knowledge (Darwiche, 1999), estimating belief states (Elliott & Williams, 2006), etc. Apart from the domains of planning, constraint satisfaction, knowledge based reasoning, etc., AND/OR structure based techniques are also widely used for various application based domains, e.g., web service composition (Gu, Xu, & Li, 2010; Shin, Jeon, & Lee, 2010; Gu, Li, & Xu, 2008; Ma, Dong, & He, 2008; Yan, Xu, & Gu, 2008; Lang & Su, 2005), vision and graphics tasks (Chen, Xu, Liu, & Zhu, 2006), etc. Lang and Su (2005) have described an AND/OR graph search algorithm for composing web services for user requirements. Ma et al. (2008) have advocated the use of AND/OR trees to capture dependencies between the inputs and outputs of the component web services and propose a top-down search algorithm to generate solutions of the AND/OR tree. Further research that uses AND/OR structures in the context of web service composition can be found in the works of Gu et al. (2010, 2008), Shin et al. (2010) and Yan et al.", "startOffset": 143, "endOffset": 2250}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994). Dechter and Mateescu (2007) have presented the explicit AND/OR search space perspective for graphical models. Different search strategies (best first, branch and bound, etc.) over the AND/OR search spaces in graphical models are discussed by Marinescu and Dechter (2007b, 2006). AND/OR search spaces are also used for solving mixed integer linear programming (Marinescu & Dechter, 2005), 0/1 integer Programming (Marinescu & Dechter, 2007a), combinatorial optimization in graphical models (Marinescu & Dechter, 2009a, 2009b). AND/OR Multivalued Decision Diagrams (AOMDD), which combine the idea of Multi-Valued Decision Diagrams(MDD) and AND/OR structures, is presented by Mateescu, Dechter, and Marinescu (2008) and further research along this direction can be found in the work of Mateescu and Dechter (2008). AND/OR search spaces are also applied for solution sampling and counting (Gogate & Dechter, 2008). Smooth Deterministic Decomposable Negative Normal Forms (sd-DNNF) (Darwiche, 2001) exhibit explicit AND/OR DAG structure and have been used for various applications including compiling knowledge (Darwiche, 1999), estimating belief states (Elliott & Williams, 2006), etc. Apart from the domains of planning, constraint satisfaction, knowledge based reasoning, etc., AND/OR structure based techniques are also widely used for various application based domains, e.g., web service composition (Gu, Xu, & Li, 2010; Shin, Jeon, & Lee, 2010; Gu, Li, & Xu, 2008; Ma, Dong, & He, 2008; Yan, Xu, & Gu, 2008; Lang & Su, 2005), vision and graphics tasks (Chen, Xu, Liu, & Zhu, 2006), etc. Lang and Su (2005) have described an AND/OR graph search algorithm for composing web services for user requirements. Ma et al. (2008) have advocated the use of AND/OR trees to capture dependencies between the inputs and outputs of the component web services and propose a top-down search algorithm to generate solutions of the AND/OR tree. Further research that uses AND/OR structures in the context of web service composition can be found in the works of Gu et al. (2010, 2008), Shin et al. (2010) and Yan et al. (2008). Chen et al.", "startOffset": 143, "endOffset": 2272}, {"referenceID": 1, "context": "The problem of generating solutions for such representations has been studied extensively (Hansen & Zilberstein, 2001; Jim\u00e9nez & Torras, 2000; Chakrabarti, 1994). Dechter and Mateescu (2007) have presented the explicit AND/OR search space perspective for graphical models. Different search strategies (best first, branch and bound, etc.) over the AND/OR search spaces in graphical models are discussed by Marinescu and Dechter (2007b, 2006). AND/OR search spaces are also used for solving mixed integer linear programming (Marinescu & Dechter, 2005), 0/1 integer Programming (Marinescu & Dechter, 2007a), combinatorial optimization in graphical models (Marinescu & Dechter, 2009a, 2009b). AND/OR Multivalued Decision Diagrams (AOMDD), which combine the idea of Multi-Valued Decision Diagrams(MDD) and AND/OR structures, is presented by Mateescu, Dechter, and Marinescu (2008) and further research along this direction can be found in the work of Mateescu and Dechter (2008). AND/OR search spaces are also applied for solution sampling and counting (Gogate & Dechter, 2008). Smooth Deterministic Decomposable Negative Normal Forms (sd-DNNF) (Darwiche, 2001) exhibit explicit AND/OR DAG structure and have been used for various applications including compiling knowledge (Darwiche, 1999), estimating belief states (Elliott & Williams, 2006), etc. Apart from the domains of planning, constraint satisfaction, knowledge based reasoning, etc., AND/OR structure based techniques are also widely used for various application based domains, e.g., web service composition (Gu, Xu, & Li, 2010; Shin, Jeon, & Lee, 2010; Gu, Li, & Xu, 2008; Ma, Dong, & He, 2008; Yan, Xu, & Gu, 2008; Lang & Su, 2005), vision and graphics tasks (Chen, Xu, Liu, & Zhu, 2006), etc. Lang and Su (2005) have described an AND/OR graph search algorithm for composing web services for user requirements. Ma et al. (2008) have advocated the use of AND/OR trees to capture dependencies between the inputs and outputs of the component web services and propose a top-down search algorithm to generate solutions of the AND/OR tree. Further research that uses AND/OR structures in the context of web service composition can be found in the works of Gu et al. (2010, 2008), Shin et al. (2010) and Yan et al. (2008). Chen et al. (2006) have applied explicit AND/OR structures for cloth modeling and recognition which is an important problem in vision and graphics tasks.", "startOffset": 143, "endOffset": 2292}, {"referenceID": 45, "context": "These approaches (Ebendt & Drechsler, 2009; Pearl, 1984) were developed to adapt the A* algorithm for using inadmissible heuristics, leveraging multiple heuristics (Chakrabarti, Ghose, Pandey, & DeSarkar, 1989), generating solutions quickly within bounded sub-optimality, etc.", "startOffset": 17, "endOffset": 56}, {"referenceID": 1, "context": "These approaches (Ebendt & Drechsler, 2009; Pearl, 1984) were developed to adapt the A* algorithm for using inadmissible heuristics, leveraging multiple heuristics (Chakrabarti, Ghose, Pandey, & DeSarkar, 1989), generating solutions quickly within bounded sub-optimality, etc. Typically these techniques order the Open list using one evaluation function, and the next element for expansion is selected from an ordered subset of Open using some other criterion. Similar techniques can be developed for AO* search if ordered set of potential solutions are made available. That set can be used for node selection and expansion instead of expanding nodes only from the current best psg. This opens up an interesting area with significant research potential where the existing variations of the A* algorithm can be extended for AND/OR search spaces. In the context of model based programming, the problem of finding ordered set of solutions has significant importance. Elliott (2007) has used valued sd-DNNFs to represent the problem and proposed an approach to generate k-best solutions.", "startOffset": 165, "endOffset": 979}, {"referenceID": 1, "context": "These approaches (Ebendt & Drechsler, 2009; Pearl, 1984) were developed to adapt the A* algorithm for using inadmissible heuristics, leveraging multiple heuristics (Chakrabarti, Ghose, Pandey, & DeSarkar, 1989), generating solutions quickly within bounded sub-optimality, etc. Typically these techniques order the Open list using one evaluation function, and the next element for expansion is selected from an ordered subset of Open using some other criterion. Similar techniques can be developed for AO* search if ordered set of potential solutions are made available. That set can be used for node selection and expansion instead of expanding nodes only from the current best psg. This opens up an interesting area with significant research potential where the existing variations of the A* algorithm can be extended for AND/OR search spaces. In the context of model based programming, the problem of finding ordered set of solutions has significant importance. Elliott (2007) has used valued sd-DNNFs to represent the problem and proposed an approach to generate k-best solutions. Since valued sd-DNNFs have an AND/OR structure, the proposed approach is possibly the earliest algorithm for generating ordered set of solutions of an AND/OR structure. The problem of finding ordered set of solutions for graphical models is studied by Flerova and Dechter (2011, 2010). However these techniques use alternative representations for the algorithm, where AND/OR search spaces can be constructed (Dechter & Mateescu, 2007) for graphical models. Recent research involving AOMDD based representation on weighted structures suggested future extensions towards generalizing Algebraic Decision Diagrams and introduces the notion of cost in AOMDDs. We envisage that ordered set of solutions finds useful applications in the context of research around AND/OR decision diagram based representation. In the domain of service composition, the primary motivation behind providing a set of alternative solutions ordered by cost is to offer more choices, while trading off the specified cost criterion (to a limited extent) in favor of other \u2018unspecified\u2019 criteria (primarily from the standpoint of quality). Shiaa, Fladmark, and Thiell (2008) have presented an approach for generating a ranked set of solutions for the service composition problem.", "startOffset": 165, "endOffset": 2227}, {"referenceID": 49, "context": "Other researchers applied the k-shortest path problem to practical scenarios, such as, routing and transportation, and developed specific solutions (Takkala, Bornd\u00f6rfer, & L\u00f6bel, 2000; Subramanian, 1997; Topkis, 1988; Sugimoto & Katoh, 1985).", "startOffset": 148, "endOffset": 241}, {"referenceID": 52, "context": "Other researchers applied the k-shortest path problem to practical scenarios, such as, routing and transportation, and developed specific solutions (Takkala, Bornd\u00f6rfer, & L\u00f6bel, 2000; Subramanian, 1997; Topkis, 1988; Sugimoto & Katoh, 1985).", "startOffset": 148, "endOffset": 241}, {"referenceID": 22, "context": "For discrete optimization problems, Lawler (1972) had proposed a general procedure for generating k-best solutions.", "startOffset": 36, "endOffset": 50}, {"referenceID": 22, "context": "For discrete optimization problems, Lawler (1972) had proposed a general procedure for generating k-best solutions. A similar problem of finding k most probable configurations in probabilistic expert systems is addressed by Nilsson (1998). Fromer and Globerson (2009) have addressed the problem of finding k maximum probability assignments for probabilistic modeling using LP relaxation.", "startOffset": 36, "endOffset": 239}, {"referenceID": 13, "context": "Fromer and Globerson (2009) have addressed the problem of finding k maximum probability assignments for probabilistic modeling using LP relaxation.", "startOffset": 0, "endOffset": 28}, {"referenceID": 11, "context": "In the context of ordinary graphs, Eppstein (1990) has studied the problem of finding k-smallest spanning trees.", "startOffset": 35, "endOffset": 51}, {"referenceID": 11, "context": "In the context of ordinary graphs, Eppstein (1990) has studied the problem of finding k-smallest spanning trees. Subsequently, an algorithm for finding k-best shortest paths has been proposed in Eppstein\u2019s (1998) work.", "startOffset": 35, "endOffset": 213}, {"referenceID": 11, "context": "In the context of ordinary graphs, Eppstein (1990) has studied the problem of finding k-smallest spanning trees. Subsequently, an algorithm for finding k-best shortest paths has been proposed in Eppstein\u2019s (1998) work. Hamacher and Queyranne (1985) have suggested an algorithm for k-best solutions to combinatorial optimization problems.", "startOffset": 35, "endOffset": 249}, {"referenceID": 4, "context": "Algorithms for generating k-best perfect matching are presented by Chegireddy and Hamacher (1987). Other researchers applied the k-shortest path problem to practical scenarios, such as, routing and transportation, and developed specific solutions (Takkala, Bornd\u00f6rfer, & L\u00f6bel, 2000; Subramanian, 1997; Topkis, 1988; Sugimoto & Katoh, 1985).", "startOffset": 67, "endOffset": 98}, {"referenceID": 4, "context": "Algorithms for generating k-best perfect matching are presented by Chegireddy and Hamacher (1987). Other researchers applied the k-shortest path problem to practical scenarios, such as, routing and transportation, and developed specific solutions (Takkala, Bornd\u00f6rfer, & L\u00f6bel, 2000; Subramanian, 1997; Topkis, 1988; Sugimoto & Katoh, 1985). However none of the approaches seems to be directly applicable for AND/OR structures. Recently some schemes related to ordered solutions to graphical models (Flerova & Dechter, 2011, 2010) and anytime AND/OR graph search (Otten & Dechter, 2011) have been proposed. Anytime algorithms for traditional OR search space (Hansen & Zhou, 2007) are well addressed by the research community. In this paper, we address the problem of generating ordered set of solutions for explicit AND/OR DAG structure and present new algorithms. The existing method, proposed by Elliott (2007), works bottom-up by computing k-best solutions for the current node from the k-best solutions of its children nodes.", "startOffset": 67, "endOffset": 913}, {"referenceID": 11, "context": "Detailed experimental results, including the comparison of the performance of the proposed algorithms with the existing algorithm (Elliott, 2007), are presented in Section 5.", "startOffset": 130, "endOffset": 145}, {"referenceID": 11, "context": "In this section, first we present the existing algorithm (Elliott, 2007) briefly, and then we present our proposed algorithms in detail.", "startOffset": 57, "endOffset": 72}, {"referenceID": 11, "context": "1 Existing Bottom-Up Evaluation Based Method for Computing Alternative Solutions We illustrate the working of the existing method that is proposed by Elliott (2007) for computing alternative solutions for trees using an example of an alternating AND/OR tree.", "startOffset": 150, "endOffset": 165}, {"referenceID": 11, "context": "The detailed analysis can be found in the work of Elliott (2007). Since, n\u03b2.", "startOffset": 50, "endOffset": 65}, {"referenceID": 30, "context": "2 Multipeg Tower of Hanoi Problem Consider the problem of Multipeg Tower of Hanoi (Majumdar, 1996; Gupta, Chakrabarti, & Ghose, 1992).", "startOffset": 82, "endOffset": 133}], "year": 2012, "abstractText": "We present algorithms for generating alternative solutions for explicit acyclic AND/OR structures in non-decreasing order of cost. The proposed algorithms use a best first search technique and report the solutions using an implicit representation ordered by cost. In this paper, we present two versions of the search algorithm \u2013 (a) an initial version of the best first search algorithm, ASG, which may present one solution more than once while generating the ordered solutions, and (b) another version, LASG, which avoids the construction of the duplicate solutions. The actual solutions can be reconstructed quickly from the implicit compact representation used. We have applied the methods on a few test domains, some of them are synthetic while the others are based on well known problems including the search space of the 5-peg Tower of Hanoi problem, the matrix-chain multiplication problem and the problem of finding secondary structure of RNA. Experimental results show the efficacy of the proposed algorithms over the existing approach. Our proposed algorithms have potential use in various domains ranging from knowledge based frameworks to service composition, where the AND/OR structure is widely used for representing problems.", "creator": "dvips(k) 5.98 Copyright 2009 Radical Eye Software"}}}