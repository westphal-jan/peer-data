{"id": "1402.0559", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Feb-2014", "title": "Short and Long Supports for Constraint Propagation", "abstract": "Special-purpose constraint propagation algorithms frequently make implicit use of short supports -- by examining a subset of the variables, they can infer support (a justification that a variable-value pair may still form part of an assignment that satisfies the constraint) for all other variables and values and save substantial work -- but short supports have not been studied in their own right. The two main contributions of this paper are the identification of short supports as important for constraint propagation, and the introduction of HaggisGAC, an efficient and effective general purpose propagation algorithm for exploiting short supports. Given the complexity of HaggisGAC, we present it as an optimised version of a simpler algorithm ShortGAC. Although experiments demonstrate the efficiency of ShortGAC compared with other general-purpose propagation algorithms where a compact set of short supports is available, we show theoretically and experimentally that HaggisGAC is even better. We also find that HaggisGAC performs better than GAC-Schema on full-length supports. We also introduce a variant algorithm HaggisGAC-Stable, which is adapted to avoid work on backtracking and in some cases can be faster and have significant reductions in memory use. All the proposed algorithms are excellent for propagating disjunctions of constraints. In all experiments with disjunctions we found our algorithms to be faster than Constructive Or and GAC-Schema by at least an order of magnitude, and up to three orders of magnitude.", "histories": [["v1", "Tue, 4 Feb 2014 01:34:04 GMT  (488kb)", "http://arxiv.org/abs/1402.0559v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["peter nightingale", "ian philip gent", "christopher jefferson", "ian miguel"], "accepted": false, "id": "1402.0559"}, "pdf": {"name": "1402.0559.pdf", "metadata": {"source": "CRF", "title": "Short and Long Supports for Constraint Propagation", "authors": ["Peter Nightingale", "Ian P. Gent", "Christopher Jefferson", "Ian Miguel"], "emails": ["pwn1@st-andrews.ac.uk", "ian.gent@st-andrews.ac.uk", "caj21@st-andrews.ac.uk", "ijm@st-andrews.ac.uk"], "sections": [{"heading": "1. Introduction", "text": "In fact, it is the case that most of them are able to outdo themselves and that they are able to outdo themselves}, {"heading": "2. Supports, GAC, Triggers", "text": "In fact, it is so that most of us are able to abide by the rules that they have imposed on themselves. (...) Indeed, it is so that they are able to understand the rules. (...) It is so that they are able to understand the rules. (...) It is as if they are able to change the rules. (...) It is as if they are able to change the rules. (...) It is so that they are able to change the rules. (...) It is as if they are able to change the rules. (...) It is as if they are able to change the rules. (...) It is as if they are able to change the rules}, {"heading": "3. Short Supports", "text": "In fact, most people are able to humiliate themselves when they go to another world, when they go to another world, when they go to another world, when they go to another world, when they go to another world, when they go to another world, when they go to another world, when they go back to another world, when they go to another world, in which they go to another world, in which they go to live themselves, in which they go to live in another world, in which they go to live in them, in which they live in them, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they live, in which they live, in which they, in which they, in which they live, in which they, in which they, in which they, in fact, in which they, in fact, in fact, in fact, in fact, it is such a fact that most people are able to humiliate themselves are able to humiliate themselves, when they go into another world, when they go to put themselves, when they go to put themselves, in which they go to another world, in which they go to put themselves, in which they go to another world, in which they go to another world, in which they go to another world,"}, {"heading": "3.1 Short Supports and Disjunction", "text": "Assuming we have the following restriction: A = {x1, x2, x3, x4) is a valid assignment, the c1, x2, x3, c3, c3, c3, c3, c3, c3, c3, c4, c.6, c.6, c.7, c.7, c.7, c.7, c.c.7, c.c.7, c.c.7, c.7, 7, 7, 7,.7,.7,.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7,.7,.7,.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7,.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c.7, c."}, {"heading": "3.2 Backtrack Stability of Short Supports", "text": "In fact, it is the case that most of us are able to abide by the rules that they have imposed on themselves. (...) It is not that they are able to understand the rules. (...) It is not that they are able to understand the rules. (...) It is not that they are able to understand the rules. (...) It is not that they are able to understand the rules. (...) It is not that they are able to understand the rules. (...) It is that they are not able to understand the rules. (...) It is that they are able to understand themselves. (...) It is not that they are able to understand the rules. (...) It is that they are able to understand the rules. (...)"}, {"heading": "5.2 Adding and Deleting Supports", "text": "When support is added or deleted, all data structures described above must be updated using procedures 1 (addSupport) and 2 (deleteSupport)."}, {"heading": "5.3 The Propagation Algorithm", "text": "This year, it is more than ever before in the history of the city, in which it has come as far as never before in the history of the city."}, {"heading": "5.4.1 A Second Complexity Analysis", "text": "rE \"s tis rf\u00fc ide rf\u00fc ide rf\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die for the R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die for the R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc die R\u00fc for the R\u00fc die R\u00fc die R\u00fc"}, {"heading": "5.5 Instantiation of findNewSupport", "text": "Similar to the GAC scheme (Bessie re & Re gin, 1997), ShortGAC must be instantiated with a findNewSupport function, which takes a valid dictionary and returns support if one exists, otherwise it returns zero. One way to do this is to write a specific findNewSupport function for each limitation, which we do in each of the empirical case studies below. In any case, the findNewSupport function is much easier than a propagator for the same limitation. We use Lemma 3.4 to build the findNewSupport functions, which sets the task to finding satisfactory tuples of simple limitations such as x < y and x = y.The alternative is to write a generic version of findNewSupport for the case where all short supports are listed as a list. We now list two generic instances of findNewSupport for lists, and in our case studies below we compare them with the special functions."}, {"heading": "5.5.1 findNewSupport-List", "text": "We provide a generic instance called findNewSupport List (Procedure 5), which takes a list of short support for each dictionary (supportList), including both the explicit and implicit short support for that dictionary, analogous to the Positive Instance of GACSchema (Bessie re & Re gin, 1997).FindNewSupport List has a persistent state: listPos, an array of integers indexed by variable and value, initially 0, indicating the current position in the supportList. The algorithm simply iterates through the list of support by looking for one in which all literals are valid. ListPos is not traced, with the result that when the end of the list is reached, we cannot fail immediately and need to search again from start back to listPos."}, {"heading": "5.5.2 findNewSupport-NDList", "text": "The instantiation of the list has two major disadvantages: First, it can be inefficient because it is not able to skip sets of invalid tuples; second, the literature contains many solutions to this problem related to full support, e.g. binary search (Lecoutre & Szymanek, 2006) or attempts (Ghent, Jefferson, Miguel, & Nightingale, 2007); second, it may require a large amount of memory; for each short support list S there is potentially nd-pointer to S, since there is a pointer to it for every single word implicitly supported by S. In this section, we list a second generic list based on NextDifference lists (Gent et al., 2007); we have a single list (called SupportList) that contains all short-term support (indexed by an integer), and a second list called NDLis where for each support s = SupportList [j], for each dictionary in the sense of the word [DLL] is not supported [DLL]."}, {"heading": "5.6 Literals of Assigned Variables", "text": "Suppose ShortGAC discovers a new support S that contains a literal x 7 \u2192 v, and x is assigned to v. Since x cannot take any value other than v, it is reasonable to remove x 7 \u2192 v from S and save the overhead of the addition. We apply this minor optimization in all cases when using ShortGAC, and also in all cases when using HaggisGAC (described in Section 6) How-Require: x, v, supportList, NDList 1: j Pos [x, v] 2: while j < supportList.size do 3: sup \u2190 supportList [j] 4: nextDiff \u2190 NDList [j] 5: for k."}, {"heading": "6.1 Introduction and Motivating Example", "text": "ShortGAC is supposed to exploit the concept of implicit support, but has some inefficiencies in dealing with explicit support and, above all, full-length support. Consider, for example, the AllDifferentExceptZero constraint, in which the constraint is found that all non-zero values in the array must be different, but that zero can occur freely. For example, this constraint could be used to solve a time problem in which classes taking place in different rooms must be different, but we use zero to represent a space that can occur multiple times. We are supported by AllDifferentExceptZero ([w, x, y, z]), any variable with initial domain {0, 2, 3}."}, {"heading": "6.2 Finding Literals With No Support Efficiently", "text": "The two types of support that have not lost any explicit support for a letter are the easier task. If we delete a support, Procedure 2 is iterated by the letters in a short support. An implicit list of letters that have lost their last explicit support is now added for each letter: We describe below how we process the scratch list. The additional cost is O (1) when we detect an empty list. Because we are within an existing test, there is zero additional cost if the letter has not lost its last explicit support, which is contrary to ShortGAC, which supports any variable without implicit support."}, {"heading": "6.4 Dealing Efficiently With Full-length Supports", "text": "In fact, most people are able to decide for themselves what they want and what they don't want."}, {"heading": "7.1 Case Study 1: Element", "text": "This year, it has reached the point where it will be able to retaliate until it is able to retaliate."}, {"heading": "7.2 Case Study 2: Lex-ordering", "text}, {"heading": "7.3 Case Study 3: Rectangle Packing", "text": "In fact, it is so that it is a fashion in which the Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-Belt-B"}, {"heading": "7.5 Results Summary", "text": "To summarize the three case studies, HaggisGAC does indeed outperform ShortGAC in many cases, sometimes by more than two times and often by more than 25%. ShortGAC is rarely faster, but only in one case by up to 10%. Overall, HaggisGAC is clearly a better algorithm than ShortGAC in our experiments. In addition, HaggisGAC and ShortGAC perform very well compared to Constructive Or and GAC Schema, a result that confirms the idea of strict short support. Finally, we have experimentally shown that HaggisGAC can outperform GAC in problems that only contain full support."}, {"heading": "8. Backtrack Stability and Short Supports", "text": "This year it is more than ever before."}, {"heading": "10. Related Work", "text": "There are a number of approaches which differ in the manner and manner, how they differ in the manner and manner, how they differ in the manner and manner, how they differ in the manner and manner, how they differ in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language, in the language of the language, in the language, in the language, in the language of the language, in the language, in the language of the language, in the language, in the language of the language, in the language, in the language of the language, in the language of the language, in the language, in the language of the language, in the language of the language, in the language, in the language of the language, in the language of the language, in the language of the language, in the language of the language, in the language of the language, in the language of the language, in the language of the language, in the language of the language of the language, in the language of the language, in the language of the language of the language, in the language of the language, in the language of the language of the language, in the language of the language of the language, in the language of the language of the language, in the language of the language of the language, in the language of the language, in the language of the language of the language, in the language of the language of the language, in the language of the language, in the language of the language, in the language of the language of the language, in the language of the language, in the language of the language of the language, in the"}, {"heading": "11. Conclusions", "text": "You can either get a specialized function to find new support for each limitation, or a function that accepts an explicit list of backers. The first algorithm we examined was ShortGAC, for which we described improvements over our previous report on this algorithm (Nightingale et al., 2011). We identified a significant inefficiency in dealing with explicit backers. We introduced a new algorithm that corrects this error."}, {"heading": "Acknowledgments", "text": "We would like to thank anonymous reviewers and Bilal Syed Hussain for their comments, and EPSRC for funding this work through grants EP / H004092 / 1 and EP / E030394 / 1. Appendix A. Comparison of ShortGAC and ShortGAC-IJCAIIn Section 4, we found that we have optimized data structures and algorithms for ShortGAC compared to our previous presentation (Nightingale et al., 2011). To show that these are indeed improvements, we have compared the two implementations of ShortGAC to the three case studies used in this paper. We use the name ShortGAC-IJCAI for the previous version. We do not cite results from our previous work (Nightingale et al., 2011), but have repeated all experiments using the environments described in Section 7."}, {"heading": "Appendix B. Median Absolute Deviation of our Experiments", "text": "In our experiments, we reported the median of 11 or 5 runs above the median and no large 2%. To gauge how robust the median was as a measure, we looked, for each combination of instances and algorithms, at the median absolute deviation (MAD), i.e. the median of the absolute difference of data points from the median. Figure 6 shows the MAD for all algorithm / instance combinations that we found as a fraction of the median for that case. This shows that 511 algorithm / instance combinations that we tested (including some combinations that are not reported in detail in this paper), the maximum MAD for all algorithms / instance combinations that we found is still less than 15% of the median, with a worst case of 14.5%. This was HaggisGAC-Long for n = 9 in Table 1. There were only four other cases with MAD above 8% of the serial numbers that we found, with only 2% memory usage, and no consistent with 2%."}], "references": [{"title": "The complexity of reasoning with global", "author": ["C. Bessi\u00e8re", "E. Hebrard", "B. Hnich", "T. Walsh"], "venue": "constraints. Constraints,", "citeRegEx": "Bessi\u00e8re et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Bessi\u00e8re et al\\.", "year": 2007}, {"title": "Arc consistency for general constraint networks: Preliminary results", "author": ["C. Bessi\u00e8re", "R\u00e9gin", "J.-C"], "venue": "In Proceedings IJCAI", "citeRegEx": "Bessi\u00e8re et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Bessi\u00e8re et al\\.", "year": 1997}, {"title": "An optimal coarse-grained arc consistency algorithm", "author": ["C. Bessi\u00e8re", "R\u00e9gin", "J.-C", "R.H.C. Yap", "Y. Zhang"], "venue": "Artificial Intelligence,", "citeRegEx": "Bessi\u00e8re et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Bessi\u00e8re et al\\.", "year": 2005}, {"title": "An MDD-based generalized arc consistency algorithm for positive and negative table constraints and some global", "author": ["K.C.K. Cheng", "R.H.C. Yap"], "venue": "constraints. Constraints,", "citeRegEx": "Cheng and Yap,? \\Q2010\\E", "shortCiteRegEx": "Cheng and Yap", "year": 2010}, {"title": "Constraint generation via automated theory formation", "author": ["S. Colton", "I. Miguel"], "venue": "In Proceedings CP", "citeRegEx": "Colton and Miguel,? \\Q2001\\E", "shortCiteRegEx": "Colton and Miguel", "year": 2001}, {"title": "Breaking row and column symmetries in matrix models", "author": ["P. Flener", "A.M. Frisch", "B. Hnich", "Z. Kiziltan", "I. Miguel", "J. Pearson", "T. Walsh"], "venue": "In Proceedings CP", "citeRegEx": "Flener et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Flener et al\\.", "year": 2002}, {"title": "Global constraints for lexicographic orderings", "author": ["A.M. Frisch", "B. Hnich", "Z. Kiziltan", "I. Miguel", "T. Walsh"], "venue": "In Proceedings CP", "citeRegEx": "Frisch et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Frisch et al\\.", "year": 2002}, {"title": "Propagation algorithms for lexicographic ordering constraints", "author": ["A.M. Frisch", "B. Hnich", "Z. Kiziltan", "I. Miguel", "T. Walsh"], "venue": "Artificial Intelligence,", "citeRegEx": "Frisch et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Frisch et al\\.", "year": 2006}, {"title": "An optimality result on maintaining list pointers during backtracking search", "author": ["I.P. Gent"], "venue": "Tech. rep. CIRCA preprint 2012/1, University of St Andrews.", "citeRegEx": "Gent,? 2012", "shortCiteRegEx": "Gent", "year": 2012}, {"title": "Minion: A fast scalable constraint solver", "author": ["I.P. Gent", "C. Jefferson", "I. Miguel"], "venue": "In Proceedings ECAI", "citeRegEx": "Gent et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Gent et al\\.", "year": 2006}, {"title": "Watched literals for constraint propagation in Minion", "author": ["I.P. Gent", "C. Jefferson", "I. Miguel"], "venue": "In Proceedings CP", "citeRegEx": "Gent et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Gent et al\\.", "year": 2006}, {"title": "Data structures for generalised arc consistency for extensional constraints", "author": ["I.P. Gent", "C. Jefferson", "I. Miguel", "P. Nightingale"], "venue": "In Proceedings AAAI", "citeRegEx": "Gent et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Gent et al\\.", "year": 2007}, {"title": "Handbook of Constraint Programming (Foundations of Artificial Intelligence), chap. Symmetry in Constraint Programming, pp. 329\u2013376", "author": ["I.P. Gent", "K. Petrie", "Puget", "J.-F"], "venue": null, "citeRegEx": "Gent et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Gent et al\\.", "year": 2006}, {"title": "Implementing logical connectives in constraint programming", "author": ["C. Jefferson", "N.C.A. Moore", "P. Nightingale", "K.E. Petrie"], "venue": "Artificial Intelligence,", "citeRegEx": "Jefferson et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Jefferson et al\\.", "year": 2010}, {"title": "A compression algorithm for large arity extensional constraints", "author": ["G. Katsirelos", "T. Walsh"], "venue": "In Proceedings CP", "citeRegEx": "Katsirelos and Walsh,? \\Q2007\\E", "shortCiteRegEx": "Katsirelos and Walsh", "year": 2007}, {"title": "Applications of ultrasonography in the reproductive management of dux magnus gentis venteris saginati", "author": ["A. King", "L. Cromarty", "C. Paterson", "J. Boyd"], "venue": "Veterinary record,", "citeRegEx": "King et al\\.,? \\Q2007\\E", "shortCiteRegEx": "King et al\\.", "year": 2007}, {"title": "STR2: optimized simple tabular reduction for table constraints", "author": ["C. Lecoutre"], "venue": "Constraints, 16 (4), 341\u2013371.", "citeRegEx": "Lecoutre,? 2011", "shortCiteRegEx": "Lecoutre", "year": 2011}, {"title": "Generalized arc consistency for positive table constraints", "author": ["C. Lecoutre", "R. Szymanek"], "venue": "In Proceedings CP", "citeRegEx": "Lecoutre and Szymanek,? \\Q2006\\E", "shortCiteRegEx": "Lecoutre and Szymanek", "year": 2006}, {"title": "A fast arc consistency algorithm for n-ary constraints", "author": ["O. Lhomme", "R\u00e9gin", "J.-C"], "venue": "In Proceedings AAAI", "citeRegEx": "Lhomme et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Lhomme et al\\.", "year": 2005}, {"title": "An efficient filtering algorithm for disjunction of constraints", "author": ["O. Lhomme"], "venue": "Proceedings CP 2003, pp. 904\u2013908.", "citeRegEx": "Lhomme,? 2003", "shortCiteRegEx": "Lhomme", "year": 2003}, {"title": "Arc-consistency filtering algorithms for logical combinations of constraints", "author": ["O. Lhomme"], "venue": "Integration of AI and OR Techniques in Constraint Programming for Combinatorial Optimization Problems (CP-AI-OR\u201904), pp. 209\u2013224.", "citeRegEx": "Lhomme,? 2004", "shortCiteRegEx": "Lhomme", "year": 2004}, {"title": "On reading sketch maps", "author": ["A.K. Mackworth"], "venue": "Reddy, R. (Ed.), IJCAI, pp. 598\u2013606. William Kaufmann.", "citeRegEx": "Mackworth,? 1977", "shortCiteRegEx": "Mackworth", "year": 1977}, {"title": "Automatic Symmetry Detection and Dynamic Symmetry Breaking for Constraint Programming", "author": ["C.D. Mears"], "venue": "Ph.D. thesis, Clayton School of Information Technology, Monash University.", "citeRegEx": "Mears,? 2009", "shortCiteRegEx": "Mears", "year": 2009}, {"title": "Arc and path consistency revisited", "author": ["R. Mohr", "T.C. Henderson"], "venue": "Artificial Intelligence,", "citeRegEx": "Mohr and Henderson,? \\Q1986\\E", "shortCiteRegEx": "Mohr and Henderson", "year": 1986}, {"title": "The extended global cardinality constraint: An empirical survey", "author": ["P. Nightingale"], "venue": "Artificial Intelligence, 175 (2), 586\u2013614.", "citeRegEx": "Nightingale,? 2011", "shortCiteRegEx": "Nightingale", "year": 2011}, {"title": "Exploiting short supports for generalised arc consistency for arbitrary constraints", "author": ["P. Nightingale", "I.P. Gent", "C. Jefferson", "I. Miguel"], "venue": "In Proceedings IJCAI", "citeRegEx": "Nightingale et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Nightingale et al\\.", "year": 2011}, {"title": "Automatic detection of variable and value symmetries", "author": ["Puget", "J.-F."], "venue": "Proceedings CP 2005, pp. 475\u2013489.", "citeRegEx": "Puget and J..F.,? 2005", "shortCiteRegEx": "Puget and J..F.", "year": 2005}, {"title": "Generalized arc consistency for global cardinality constraint", "author": ["R\u00e9gin", "J.-C."], "venue": "Proceedings AAAI 1996, pp. 209\u2013215.", "citeRegEx": "R\u00e9gin and J..C.,? 1996", "shortCiteRegEx": "R\u00e9gin and J..C.", "year": 1996}, {"title": "Maintaining arc consistency algorithms during the search without additional space cost", "author": ["R\u00e9gin", "J.-C."], "venue": "Proceedings CP 2005, pp. 520\u2013533.", "citeRegEx": "R\u00e9gin and J..C.,? 2005", "shortCiteRegEx": "R\u00e9gin and J..C.", "year": 2005}, {"title": "Implementing efficient propagation control. In Proceedings of TRICS: Techniques foR Implementing Constraint programming Systems, a conference workshop of CP", "author": ["C. Schulte", "G. Tack"], "venue": null, "citeRegEx": "Schulte and Tack,? \\Q2010\\E", "shortCiteRegEx": "Schulte and Tack", "year": 2010}, {"title": "Search strategies for rectangle packing", "author": ["H. Simonis", "B. O\u2019Sullivan"], "venue": "In Proceedings CP", "citeRegEx": "Simonis and O.Sullivan,? \\Q2008\\E", "shortCiteRegEx": "Simonis and O.Sullivan", "year": 2008}, {"title": "Constructive disjunction revisited", "author": ["J. W\u00fcrtz", "T. M\u00fcller"], "venue": "In Proceedings of the 20th Annual German Conference on Artificial Intelligence: Advances in Artificial Intelligence, KI", "citeRegEx": "W\u00fcrtz and M\u00fcller,? \\Q1996\\E", "shortCiteRegEx": "W\u00fcrtz and M\u00fcller", "year": 1996}], "referenceMentions": [{"referenceID": 16, "context": "1 (Bessi\u00e8re, R\u00e9gin, Yap, & Zhang, 2005), STR2 (Lecoutre, 2011) or MDDC (Cheng & Yap, 2010) are used.", "startOffset": 46, "endOffset": 62}, {"referenceID": 21, "context": "A property commonly established by constraint propagation algorithms is generalised arc consistency (GAC) (Mackworth, 1977).", "startOffset": 106, "endOffset": 123}, {"referenceID": 22, "context": "This has not inhibited research in exploiting symmetry, within which the automated detection of symmetry has become an important subarea (Mears, 2009; Puget, 2005): however we leave the automated construction of compact short support sets to future research.", "startOffset": 137, "endOffset": 163}, {"referenceID": 19, "context": "Many papers have been published in this area (W\u00fcrtz & M\u00fcller, 1996; Lhomme, 2003; Lagerkvist & Schulte, 2009; Jefferson, Moore, Nightingale, & Petrie, 2010).", "startOffset": 45, "endOffset": 156}, {"referenceID": 25, "context": "The details we present here are different from those we presented previously (Nightingale et al., 2011), as we have optimised the data structures and algorithms compared with our previous work.", "startOffset": 77, "endOffset": 103}, {"referenceID": 8, "context": "However, this algorithm is optimal in both time and space across the search tree (Gent, 2012).", "startOffset": 81, "endOffset": 93}, {"referenceID": 11, "context": "In this section we give a second generic list instantiation based on NextDifference lists (Gent et al., 2007).", "startOffset": 90, "endOffset": 109}, {"referenceID": 8, "context": "8 We do not compare with table constraints, as described by (for example) Gent et al. (2007), because the constraints are too large.", "startOffset": 74, "endOffset": 93}, {"referenceID": 25, "context": "This is in contrast to our results reported previously (Nightingale et al., 2011), where ShortGAC was about half the speed of GAC-Schema.", "startOffset": 55, "endOffset": 81}, {"referenceID": 5, "context": "The lex constraint is placed on both the rows and columns, to perform the \u2018Double Lex\u2019 symmetry breaking method (Flener et al., 2002).", "startOffset": 112, "endOffset": 133}, {"referenceID": 5, "context": "The lex constraint is placed on both the rows and columns, to perform the \u2018Double Lex\u2019 symmetry breaking method (Flener et al., 2002). We use the BIBD model given by Frisch, Hnich, Kiziltan, Miguel, and Walsh (2002), and the GACLex propagator given by Frisch, Hnich, Kiziltan, Miguel, and Walsh (2006).", "startOffset": 113, "endOffset": 216}, {"referenceID": 5, "context": "The lex constraint is placed on both the rows and columns, to perform the \u2018Double Lex\u2019 symmetry breaking method (Flener et al., 2002). We use the BIBD model given by Frisch, Hnich, Kiziltan, Miguel, and Walsh (2002), and the GACLex propagator given by Frisch, Hnich, Kiziltan, Miguel, and Walsh (2006). We use BIBDs with the parameter values (4n+ 3, 4n+ 3, 2n+ 1, 2n+ 1, n).", "startOffset": 113, "endOffset": 302}, {"referenceID": 30, "context": "The domains of xn and yn are reduced to break flip symmetries as described by Simonis and O\u2019Sullivan (2008). Our focus is performance of the non-overlap constraint, and so we did not implement the commonly-used implied constraints.", "startOffset": 78, "endOffset": 108}, {"referenceID": 25, "context": "Also ShortGAC-Long is faster than GAC-Schema on all instances except 27-47-148 (this contradicts the result we previously reported (Nightingale et al., 2011), and some explanation of this is given in the first case study).", "startOffset": 131, "endOffset": 157}, {"referenceID": 16, "context": "In contrast to GAC-Schema, other table constraint propagators such as STR2 (Lecoutre, 2011) and MDDC (Cheng & Yap, 2010) are entirely different to HaggisGAC, and it would be difficult to create truly comparable implementations of them.", "startOffset": 75, "endOffset": 91}, {"referenceID": 8, "context": ") We used the structured instances from Gent et al. (2007), except the Semigroup class.", "startOffset": 40, "endOffset": 59}, {"referenceID": 8, "context": ") We used the structured instances from Gent et al. (2007), except the Semigroup class. In addition, we used Car Sequencing instances from Nightingale (2011), specifically model B instances numbered 60-79.", "startOffset": 40, "endOffset": 158}, {"referenceID": 11, "context": "Approaches include binary search (Lecoutre & Szymanek, 2006), trie search (Gent et al., 2007), and approaches similar to skip lists such as NDLists (Gent et al.", "startOffset": 74, "endOffset": 93}, {"referenceID": 11, "context": ", 2007), and approaches similar to skip lists such as NDLists (Gent et al., 2007) and hologram-tuples (Lhomme, 2004; Lhomme & R\u00e9gin, 2005).", "startOffset": 62, "endOffset": 81}, {"referenceID": 20, "context": ", 2007) and hologram-tuples (Lhomme, 2004; Lhomme & R\u00e9gin, 2005).", "startOffset": 28, "endOffset": 64}, {"referenceID": 7, "context": "For example, Gent et al. (2007) used tries, and Cheng and Yap (2010) applied MDDs.", "startOffset": 13, "endOffset": 32}, {"referenceID": 3, "context": "(2007) used tries, and Cheng and Yap (2010) applied MDDs.", "startOffset": 23, "endOffset": 44}, {"referenceID": 16, "context": "STR2 maintains a sparse set of all valid satisfying tuples of the constraint (Lecoutre, 2011).", "startOffset": 77, "endOffset": 93}, {"referenceID": 19, "context": "In the context of Constructive Or, Lhomme (2003) observed that a support for one disjunct A will support all values of any variable not contained in A.", "startOffset": 35, "endOffset": 49}, {"referenceID": 2, "context": "1 (Bessi\u00e8re et al., 2005) and it would be interesting to compare these to our algorithms.", "startOffset": 2, "endOffset": 25}, {"referenceID": 25, "context": "The first algorithm we studied was ShortGAC, for which we described improvements compared to our earlier report on this algorithm (Nightingale et al., 2011).", "startOffset": 130, "endOffset": 156}, {"referenceID": 25, "context": "In Section 4, we noted that we have optimised data structures and algorithms for ShortGAC, compared with our previous presentation (Nightingale et al., 2011).", "startOffset": 131, "endOffset": 157}, {"referenceID": 25, "context": "We are not quoting results from our previous work (Nightingale et al., 2011), but have rerun all experiments using the environment described in Section 7.", "startOffset": 50, "endOffset": 76}, {"referenceID": 25, "context": "We conclude that the algorithms and data structures used in this paper are indeed superior to those we used previously (Nightingale et al., 2011).", "startOffset": 119, "endOffset": 145}], "year": 2013, "abstractText": "Special-purpose constraint propagation algorithms frequently make implicit use of short supports \u2014 by examining a subset of the variables, they can infer support (a justification that a variable-value pair may still form part of an assignment that satisfies the constraint) for all other variables and values and save substantial work \u2013 but short supports have not been studied in their own right. The two main contributions of this paper are the identification of short supports as important for constraint propagation, and the introduction of HaggisGAC, an efficient and effective general purpose propagation algorithm for exploiting short supports. Given the complexity of HaggisGAC, we present it as an optimised version of a simpler algorithm ShortGAC. Although experiments demonstrate the efficiency of ShortGAC compared with other general-purpose propagation algorithms where a compact set of short supports is available, we show theoretically and experimentally that HaggisGAC is even better. We also find that HaggisGAC performs better than GAC-Schema on full-length supports. We also introduce a variant algorithm HaggisGACStable, which is adapted to avoid work on backtracking and in some cases can be faster and have significant reductions in memory use. All the proposed algorithms are excellent for propagating disjunctions of constraints. In all experiments with disjunctions we found our algorithms to be faster than Constructive Or and GAC-Schema by at least an order of magnitude, and up to three orders of magnitude.", "creator": "TeX"}}}