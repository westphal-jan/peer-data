{"id": "1402.1361", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Feb-2014", "title": "Combining finite and continuous solvers", "abstract": "Combining efficiency with reliability within CP systems is one of the main concerns of CP developers. This paper presents a simple and efficient way to connect Choco and Ibex, two CP solvers respectively specialised on finite and continuous domains. This enables to take advantage of the most recent advances of the continuous community within Choco while saving development and maintenance resources, hence ensuring a better software quality.", "histories": [["v1", "Thu, 6 Feb 2014 14:21:26 GMT  (24kb)", "http://arxiv.org/abs/1402.1361v1", "Presented at Workshop TRICS in conference CP'13"]], "COMMENTS": "Presented at Workshop TRICS in conference CP'13", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["jean-guillaume fages", "gilles chabert", "charles prud'homme"], "accepted": false, "id": "1402.1361"}, "pdf": {"name": "1402.1361.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["Charles.Prudhomme}@mines-nantes.fr"], "sections": [{"heading": null, "text": "ar Xiv: 140 2.13 61v1 [cs.AI] 6"}, {"heading": "1 Introduction", "text": "The Constraint Programming (CP) community is witnessing the emergence of numerous new approaches, most of which come with new features. In this competitive context, integrating the latest advances and ensuring software quality is a challenge. More broadly, spending on developing something that is already well handled by other libraries can be considered a waste of resources. Choco [9] and Ibex [2] are two such approaches, each specializing in finite domains (FD) and continuous domains (CD). Although they already have some history, they have recently been completely redesigned to achieve brand-new, improved versions. This paper provides a bridge that Choco Ibex can use as a global constraint. The interval arithmetic provided by Ibex greatly improves Choco's modeling capabilities, enabling the broad family of statistical constraints [6] to naturally express most of the community's resources, but also not many of the physical constraints that Choco provides."}, {"heading": "2 Solver overviews", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Choco 3.0", "text": "Choco is a Java library for constraint satisfaction problems and constraint optimization problems. This solver has a long history and was completely revised to version 3.0 this year [4, 9]. It contains approximately 60,000 lines of code.The Choco library contains numerous variables, constraints and search procedures to provide broad modeling perspectives. Most common variables are integral variables (including binary variables and views [8]), but the distribution also includes set variables, chart variables and real variables. Choco's constraint library contains many global constraints that provide a very expressive modeling language. In addition, the search process can be supported by various built-in search strategies (such as DomWDeg, ABS, IBS, First-Fail, etc.) and some optimization procedures (LNS, Fast Reboot, etc.). In addition, Choco supports native Last, some useful features such as First Flash."}, {"heading": "2.2 Ibex 2.0", "text": "Capricorn (Interval-based Explorer) is also a library for the satisfaction and optimization of constraints, but written in C + + and dedicated to continuous areas. This solver was revised this year to version 2.0 [2]. Capricorn consists of approximately 40,000 lines of code. From the perspective of working with solvers, two features of Capricorn are of interest: the modeling language and the contractors. Compared to Choco, the modeling language is much simpler in the sense that constraints are either numerical equations or inequalities. However, the mathematical expression accompanying a constraint can be of any complexity. The expression is achieved by the composition of standard mathematical operators such as +, \u00d7, \u221a, sin, etc. (see \u00a7 3.2) The modeling language also allows vector and matrix operations; it shares some similarities with Matlab on purpose.A contractor [3] is the equivalent for global optimization, where a pure domain and an interference level is used."}, {"heading": "3 Embedding Ibex into a Choco constraint", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1 Motivation", "text": "It is worth noting that combining FD with CD in a CP solver is not new. Furthermore, the Choco solver supports real variables, so it has always been able to solve hybrid discrete continuous problems. However, these older versions included their own interval arithmetic implementation. Another example is the Gecode 4.0.0 solver [1], which added recently floating variables to its distribution using the same approach. Interestingly, it seemed that most Choco users and contributors were affected by FD problems. Thus, the Choco module has not evolved much over the last few years via Reals. Meanwhile, people working on continuous problems have proposed new solutions, such as Ibex, which are able to deal efficiently with non-linear equation systems. As a counterpart, such solutions are not competitive when they affect finite domains."}, {"heading": "3.2 A simple but yet expressive interface", "text": "In fact, most of them are able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are able to save themselves. (...) Most of them are able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are able to save themselves. (...) Most of them are not able to save themselves. (...)"}, {"heading": "4 Practical example: using CD to express balancing", "text": "In fact, the fact is that most of them will be able to move to a different world in which they are able than to another world in which they are able to escape and in which they are able to integrate."}, {"heading": "5 Conclusion", "text": "We have shown that this framework provides comprehensive modeling opportunities, while being simple and general. This work allows the FD and the CD communities to benefit from each other and focus on their respective fields of expertise, providing a rich and reliable approach to solving problems while saving development and maintenance resources. The authors thank the anonymous speakers for their work and interesting comments."}], "references": [{"title": "Choco3: an open source java constraint programming library", "author": ["Jean-Guillaume Fages", "Narendra Jussien", "Xavier Lorca", "Charles Prud\u2019homme"], "venue": "Research report 13/1/INFO, Ecole des Mines de Nantes,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Minizinc: Towards a standard cp modelling language", "author": ["Nicholas Nethercote", "Peter J. Stuckey", "Ralph Becket", "Sebastian Brand", "Gregory J. Duck", "Guido Tack"], "venue": "In CP,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Spread: A balancing constraint based on statistics", "author": ["Gilles Pesant", "Jean-Charles R\u00e9gin"], "venue": "In CP,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2005}, {"title": "The deviation constraint", "author": ["Pierre Schaus", "Yves Deville", "Pierre Dupont", "Jean-Charles R\u00e9gin"], "venue": "In CPAIOR,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "Views and iterators for generic constraint implementations", "author": ["Christian Schulte", "Guido Tack"], "venue": "In CP,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2005}], "referenceMentions": [{"referenceID": 2, "context": "It enables to express naturally the wide family of statistical constraints [6, 7], but also non-linear physics constraints as well as many continuous objective functions.", "startOffset": 75, "endOffset": 81}, {"referenceID": 3, "context": "It enables to express naturally the wide family of statistical constraints [6, 7], but also non-linear physics constraints as well as many continuous objective functions.", "startOffset": 75, "endOffset": 81}, {"referenceID": 0, "context": "0 version [4, 9].", "startOffset": 10, "endOffset": 16}, {"referenceID": 4, "context": "Most common variables are integer variables (including binary variables and views [8]) but the distribution also includes set variables, graph variables and real variables.", "startOffset": 82, "endOffset": 85}, {"referenceID": 1, "context": "Last, several useful extra features, such as a FlatZinc (the target language of MiniZinc [5]) parser and some viewing tools, are provided as well.", "startOffset": 89, "endOffset": 92}, {"referenceID": 2, "context": "In particular, the family of statistical constraints, such as Spread [6] and Deviation [7], can be expressed naturally and extended by using neither monolithic ad hoc algorithms nor reformulations.", "startOffset": 69, "endOffset": 72}, {"referenceID": 3, "context": "In particular, the family of statistical constraints, such as Spread [6] and Deviation [7], can be expressed naturally and extended by using neither monolithic ad hoc algorithms nor reformulations.", "startOffset": 87, "endOffset": 90}], "year": 2014, "abstractText": "Combining efficiency with reliability within CP systems is one of the main concerns of CP developers. This paper presents a simple and efficient way to connect Choco and Ibex, two CP solvers respectively specialised on finite and continuous domains. This enables to take advantage of the most recent advances of the continuous community within Choco while saving development and maintenance resources, hence ensuring a better software quality.", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}