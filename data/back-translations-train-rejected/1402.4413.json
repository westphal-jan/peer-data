{"id": "1402.4413", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Feb-2014", "title": "Towards Ultra Rapid Restarts", "abstract": "We observe a trend regarding restart strategies used in SAT solvers. A few years ago, most state-of-the-art solvers restarted on average after a few thousands of backtracks. Currently, restarting after a dozen backtracks results in much better performance. The main reason for this trend is that heuristics and data structures have become more restart-friendly. We expect further continuation of this trend, so future SAT solvers will restart even more rapidly. Additionally, we present experimental results to support our observations.", "histories": [["v1", "Tue, 18 Feb 2014 17:39:39 GMT  (23kb)", "http://arxiv.org/abs/1402.4413v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["shai haim", "marijn heule"], "accepted": false, "id": "1402.4413"}, "pdf": {"name": "1402.4413.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Marijn Heule"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 140 2.44 13v1 [cs.AI] 18 Feb 20"}, {"heading": "1 Introduction", "text": "Initially, branching heuristics were randomized to ensure that the search tree would be different after each reboot, and restarts should not be used too often to guarantee that a solver can examine the entire search tree between two reboots if a problem does not have a solution. [2] This is no longer required for modern conflict-driven clause-learning solutions [3]. Decision euristics are dynamic and updated after each conflict [4-11.] By including conflict clauses, CDCL solvers can demonstrate their unsatisfaction even during ultra-fast reboots. Rebooting has become an essential feature of CDCL solvers today. Many different strategies have been studied and used [4-11.] State-of-the-art SAT solvers tend to restart more frequently, and one explanation for this trend is that heuristics and data structures are being restarted."}, {"heading": "2 Restarts", "text": "Reboot strategies have been used in SAT solvers for over a decade. Firstly, we will give an overview of their use in state-of-the-art solvers. Secondly, we will discuss two aspects of CDCL solvers, heuristics and data structures that have influenced these strategies. Recent developments in these areas facilitate frequent reboots. Thirdly, we argue that CDCL solvers - due to rapid reboots - have become full local search solutions."}, {"heading": "2.1 A history of restart strategies", "text": "Following the work of Gomes et al. [1], which demonstrated the effectiveness of restarting to solve problems arising from cumbersome distribution, developers began to equip their solvers with fixed-size reboot strategies. zChaff [3], BerkMin [13] solvers use fairly frequent reboots with restart sizes of 700 and 550, while Siege [14] solvers use a larger fixed restart size of 16,000 conflicts. \u2212 MiniSAT 1.13 [15] was the first to demonstrate the effectiveness of the geometric restart strategy proposed by Walsh [5]."}, {"heading": "2.2 Direction heuristics", "text": "In theory, these heuristics can be very powerful, but then P = NP. CDCL solvers use a variety of directional hazards. For example, zChaff maintains two counter values for each variable, one for true and one for false. These counter values refer to the activity in recent conflicts. The sign of the highest counter is preferred. Directional euristics in MiniSAT are very minimalistic: it uses negative branching: i.e. the decision variable is always assigned incorrectly. Although it may seem somewhat arbitrary, it is not. Two characteristics of this heuristics contribute to fast performance. First, it chooses the same sign: it uses negative branching: i.e. the decision variable is always called wrong."}, {"heading": "2.3 Boolean constraint propagation", "text": "Moskewicz et al. [3] state that in most cases it is more than 90% of the total cost. This observation has consequences for fast restart strategies: if a solver would restart very frequently, say after a few conflicts, then he often has to search the search tree to the root. Consequently, much more time is spent on BCP, which slows down the solver. An important breakthrough in the acceleration of BCP is the introduction of the data structure in zChaff [3], which is now used in all state-of-the-art CDCL solvers and has been implemented very efficiently in MiniSAT [15]. Recent improvements to this data structure have been used in picoSAT [7]. Additionally, the relative burden of BCP start can be reduced by spending more time on rationalization techniques."}, {"heading": "2.4 Complete local search", "text": "Although several of these challenges have been met, little progress has been reported on Challenge 5: Developing a competitive full local search engine. Obviously, it is difficult to effectively add completeness to local search engines. On the other hand, CDCL solvers have slowly begun to mimic local search engines, which may explain why the performance of current CDCL solvers depends heavily on seed, even for unsatisfactory benchmarks. An important step toward local search is the introduction of phase-saving in CDCL solvers in 2007 [16]. Essentially, the same technique has been used in local search SAT solvers UnitWalk [22] since 2001. The UnitWalk algorithm begins with the initialization of full assignment to arandom. In each iteration, this mapping is improved by the following procedure: First, a random order of variables is created; second, the most important (based on this random order) of the full assignment of the full assignment of the task to the full variable is assigned."}, {"heading": "3 Results", "text": "Since we observed several signs of ultra-fast restarts, we decided to experiment with strategies that were radically faster than current CDCL solvers, and the dataset we used for this experiment includes all the industrial instances used in the 2009 SAT competition. All the experiments presented in this paper were performed on a cluster of 14 dual Intel Xeon CPUs with EM64T (64-bit) extensions running at 3.2 GHz with 4 GB of RAM under Debian GNU / Linux 4.0. The solver we used for the experiments is the award-winning MiniSAT 2.0, which we have heuristically equipped with a phase-saving direction. We experimented with 12 different units for the Luby sequence and used a span of 900-second time span. To provide more stable numbers, we conducted all experiments with three different sets using 100 different sets. The original version of MiniSAT, which uses a Luby strategy, uses a Luby strategy, uses a Luby-2-44, a Luby-2-2-2-2-1."}, {"heading": "4 Conclusions", "text": "We have shown that the award-winning MiniSAT 2.0 Solver can be significantly improved by phase-saving and fast restarts, and the optimal strategy for the industrial benchmarks of the competition SAT 2009 restarts significantly more frequently than the strategies of the current state-of-the-art solvers. This result confirms our observation that SAT solvers are prone to ultra-fast restarts and become complete local search solutions."}], "references": [{"title": "Boosting combinatorial search through randomization", "author": ["C. Gomes", "B. Selman", "H.A. Kautz"], "venue": "AAAI/IAAI.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1998}, {"title": "Chapter 4", "author": ["J.P. Marques-Silva", "I. Lynce", "S. Malik"], "venue": "Conflict-Driven Clause Learning SAT Solvers. In Handbook of Satisfiability. IOS Press", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "Chaff: engineering an efficient SAT solver", "author": ["M. Moskewicz", "C. Madigan", "Y. Zhao", "L. Zhang", "S. Malik"], "venue": "Proceedings of the 38th conference on Design automation", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2001}, {"title": "Optimal speedup of Las Vegas algorithms", "author": ["M. Luby", "A. Sinclair", "D. Zuckerman"], "venue": "Inf. Process. Lett. 47(4)", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1993}, {"title": "Search in a small world", "author": ["T. Walsh"], "venue": "In Dean, T., ed.: IJCAI 99: Proceedings of the Sixteenth International Joint Conference on Artificial Intelligence, Morgan Kaufmann", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1999}, {"title": "PicoSAT essentials", "author": ["A. Biere"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation 4", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2008}, {"title": "Rsat description for SAT competition", "author": ["K. Pipatsrisawat", "A. Darwiche"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "GRASP - a new search algorithm for satisfiability", "author": ["J. Marques-Silva", "K.A. Sakallah"], "venue": "ICCAD.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1996}, {"title": "BerkMin: a fast and robust sat-solver", "author": ["E. Goldberg", "Y. Novikov"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2002}, {"title": "Efficient algorithms for clause learning SAT solvers", "author": ["L. Ryan"], "venue": "PhD thesis, Simon Fraser University, School of Computing Science", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2004}, {"title": "An extensible SAT-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "In Giunchiglia, E., Tacchella, A., eds.: Theory and Applications of Satisfiability Testing, 6th International Conference, SAT 2003. LNCS 2919, Springer", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2003}, {"title": "A lightweight component caching scheme for satisfiability solvers", "author": ["K. Pipatsrisawat", "A. Darwiche"], "venue": "In Marques-Silva, J., Sakallah, K.A., eds.: SAT 2007: Theory and Applications of Satisfiability Testing, 10th International Conference. LNCS 4501, Springer", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2007}, {"title": "A case for simple SAT solvers", "author": ["J. Huang"], "venue": "In Bessiere, C., ed.: CP. LNCS 4741, Springer", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2007}, {"title": "Minisat 2.1 and minisat++ 1.0 sat race 2008 editions", "author": ["N. S\u00f6rensson", "N. E\u00e9n"], "venue": "Technical report", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2008}, {"title": "Minisat v1.13 a sat solver with conflict-clause minimization", "author": ["N. S\u00f6rensson", "N. E\u00e9n"], "venue": "Technical report", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2005}, {"title": "On-the-fly clause improvement", "author": ["H. Han", "F. Somenzi"], "venue": "Theory and Applications of Satisfiability Testing - SAT 2009. LNCS 5584, Springer", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2009}, {"title": "Ten challenges in propositional reasoning and search", "author": ["B. Selman", "H. Kautz", "D. McAllester"], "venue": "IJCAI\u201997, San Francisco, CA, USA, Morgan Kaufmann Publishers Inc.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1997}, {"title": "Solving boolean satisfiability using local search guided by unit clause elimination", "author": ["E. Hirsch", "A. Kojevnikov"], "venue": "Principles and Practice of Constraint Programming", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2001}, {"title": "Theory and Applications of Satisfiability Testing - SAT 2008, 11th International Conference, SAT 2008, Guangzhou, China, May 12-15, 2008", "author": ["H.K. B\u00fcning", "X. Zhao", "eds."], "venue": "Proceedings. In B\u00fcning, H.K., Zhao, X., eds.: SAT. LNCS 4996, Springer", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [{"referenceID": 0, "context": "Restarts have been proposed for satisfiability (SAT) solvers to counter heavy-tail behavior [1].", "startOffset": 92, "endOffset": 95}, {"referenceID": 1, "context": "For modern conflict-driven clause learning (CDCL) solvers [2] this is no longer required.", "startOffset": 58, "endOffset": 61}, {"referenceID": 2, "context": "Decision heuristics are dynamic and updated after every conflict [3].", "startOffset": 65, "endOffset": 68}, {"referenceID": 3, "context": "Many different strategies have been studied and used [4\u201311].", "startOffset": 53, "endOffset": 59}, {"referenceID": 4, "context": "Many different strategies have been studied and used [4\u201311].", "startOffset": 53, "endOffset": 59}, {"referenceID": 5, "context": "Many different strategies have been studied and used [4\u201311].", "startOffset": 53, "endOffset": 59}, {"referenceID": 6, "context": "Many different strategies have been studied and used [4\u201311].", "startOffset": 53, "endOffset": 59}, {"referenceID": 7, "context": "The solver grasp [12], which first introduced clause learning in the context of satisfiability testing, did not use restarts in its original version.", "startOffset": 17, "endOffset": 21}, {"referenceID": 0, "context": "[1], which demonstrated the effectiveness of restart for addressing issues arising from the heavy-tailed distribution, developers started equipping their solvers with fixed-size restart strategies.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "The solvers zChaff [3], BerkMin [13] use rather frequent fixed restarts with restart sizes of 700 and 550 respectively, while the solver Siege [14] uses a larger fixed restart size of 16,000 conflicts.", "startOffset": 19, "endOffset": 22}, {"referenceID": 8, "context": "The solvers zChaff [3], BerkMin [13] use rather frequent fixed restarts with restart sizes of 700 and 550 respectively, while the solver Siege [14] uses a larger fixed restart size of 16,000 conflicts.", "startOffset": 32, "endOffset": 36}, {"referenceID": 9, "context": "The solvers zChaff [3], BerkMin [13] use rather frequent fixed restarts with restart sizes of 700 and 550 respectively, while the solver Siege [14] uses a larger fixed restart size of 16,000 conflicts.", "startOffset": 143, "endOffset": 147}, {"referenceID": 10, "context": "13 [15] was the first to demonstrate the effectiveness of the geometric restart strategy suggested by Walsh [5].", "startOffset": 3, "endOffset": 7}, {"referenceID": 4, "context": "13 [15] was the first to demonstrate the effectiveness of the geometric restart strategy suggested by Walsh [5].", "startOffset": 108, "endOffset": 111}, {"referenceID": 3, "context": "[4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 11, "context": "0 [16] and TiniSat [17] use a unit run of 512 conflicts, while MiniSAT 2.", "startOffset": 2, "endOffset": 6}, {"referenceID": 12, "context": "0 [16] and TiniSat [17] use a unit run of 512 conflicts, while MiniSAT 2.", "startOffset": 19, "endOffset": 23}, {"referenceID": 13, "context": "1 [18] and precoSAT [8] use a shorter unit run of 100 conflicts.", "startOffset": 2, "endOffset": 6}, {"referenceID": 5, "context": "The solver picoSAT [7] introduced a frequent restart strategy in which the restart length grows geometrically until it reaches a bound.", "startOffset": 19, "endOffset": 22}, {"referenceID": 5, "context": "The dynamic decision can be made according to variable agility [6\u20138], variety of decision levels in learnt clauses and backtrack sizes [9, 10], or using local search techniques [11].", "startOffset": 63, "endOffset": 68}, {"referenceID": 6, "context": "The dynamic decision can be made according to variable agility [6\u20138], variety of decision levels in learnt clauses and backtrack sizes [9, 10], or using local search techniques [11].", "startOffset": 135, "endOffset": 142}, {"referenceID": 2, "context": "[3] state that in most cases it is greater than 90% of the total cost.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "An important breakthrough in speeding up BCP is the introduction of the watch literal data structure in zChaff [3].", "startOffset": 111, "endOffset": 114}, {"referenceID": 10, "context": "It has been implemented very efficiently in MiniSAT [15].", "startOffset": 52, "endOffset": 56}, {"referenceID": 5, "context": "Recent improvements of this data structure were used in picoSAT [7].", "startOffset": 64, "endOffset": 67}, {"referenceID": 14, "context": "Two recent improvements in this direction are conflict clause minimization [19] and conflict clause (self-) subsumption [20].", "startOffset": 75, "endOffset": 79}, {"referenceID": 15, "context": "Two recent improvements in this direction are conflict clause minimization [19] and conflict clause (self-) subsumption [20].", "startOffset": 120, "endOffset": 124}, {"referenceID": 16, "context": "[21] in 1997.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "An important step towards local search is the introduction of phase-saving in CDCL solvers in 2007 [16].", "startOffset": 99, "endOffset": 103}, {"referenceID": 17, "context": "Essentially the same technique is used in the local search SAT solver UnitWalk [22] since 2001.", "startOffset": 79, "endOffset": 83}], "year": 2014, "abstractText": "We observe a trend regarding restart strategies used in SAT solvers. A few years ago, most state-of-the-art solvers restarted on average after a few thousands of backtracks. Currently, restarting after a dozen backtracks results in much better performance. The main reason for this trend is that heuristics and data structures have become more restart-friendly. We expect further continuation of this trend, so future SAT solvers will restart even more rapidly. Additionally, we present experimental results to support our observations.", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}