{"id": "1402.4465", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Feb-2014", "title": "Concurrent Cube-and-Conquer", "abstract": "Recent work introduced the cube-and-conquer technique to solve hard SAT instances. It partitions the search space into cubes using a lookahead solver. Each cube is tackled by a conflict-driven clause learning (CDCL) solver. Crucial for strong performance is the cutoff heuristic that decides when to switch from lookahead to CDCL. Yet, this offline heuristic is far from ideal. In this paper, we present a novel hybrid solver that applies the cube and conquer steps simultaneously. A lookahead and a CDCL solver work together on each cube, while communication is restricted to synchronization. Our concurrent cube-and-conquer solver can solve many instances faster than pure lookahead, pure CDCL and offline cube-and-conquer, and can abort early in favor of a pure CDCL search if an instance is not suitable for cube-and-conquer techniques.", "histories": [["v1", "Tue, 18 Feb 2014 20:39:30 GMT  (48kb)", "http://arxiv.org/abs/1402.4465v1", "Third International Workshop on Pragmatics of SAT (PoS 2012)"]], "COMMENTS": "Third International Workshop on Pragmatics of SAT (PoS 2012)", "reviews": [], "SUBJECTS": "cs.DS cs.AI", "authors": ["peter van der tak", "marijn j h heule", "armin biere"], "accepted": false, "id": "1402.4465"}, "pdf": {"name": "1402.4465.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Peter van der Tak", "Marijn J.H. Heule", "Armin Biere"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 140 2.44 65v1 [cs.DS] 18 Feb 20"}, {"heading": "1 Introduction", "text": "Current satisfaction usually resolves itself by making decisions and acquiring additional information, which then leads to better performance. [3] The key findings are that the approaches to solutions in the individual areas are reactionary. [4] They have shown that the two techniques can be successfully combined, especially in relation to the very hard instances. [5] The key findings are that the solutions can be used to partition search results."}, {"heading": "2 Preliminaries", "text": "For a Boolean variable x, there are two literals, the positive literal, which is denoted by x, and the negative literal, which is denoted by \u00ac x. A sentence is a disjunction of literals, and a CNF formula is a conjunction of clauses. A sentence can be regarded as a finite set of literals, and a CNF formula as a finite set of clauses. A unit sentence contains exactly one literal. A truth assignment for a CNF formula F is a function that maps variables in F to {t, f}. If it meets each clause in F, then it is the other way around (\u00ac x) = \u00ac v, where \u00ac t = f and \u00ac f = t. A sentence C is fulfilled if it meets F for some l \u00b2 C. An assignment fulfils F if it meets each clause in F. A cube is a conjunction of literals, and a DNF formula is a disjunction of cubes."}, {"heading": "2.1 Cube-and-conquer", "text": "The technique proposed in this paper is based on Cube-and-Conquer (CC) [4]. CC was designed to solve very hard cases by dividing the search space into cubes with a lookahead solver (March cc) and then solving each cube with an incremental CDCL solver (iLingeling). The main observation of the authors is that CDCL solvers often solve these cubes very quickly, and as a result, the twophase solver is faster than each solver on its own. Furthermore, it is natural to solve several cubes in parallel. In this work we mainly use MiniSAT 2.2 [2] as CDCL solver instead of Lingeling, as it is easier to expand. Cube-and-Conquer modifies the lookahead solver to cut off its search based on a cutoff heuristic solution."}, {"heading": "3 Motivation", "text": "Cube-and-Conquer performs strongly on several tough application benchmarks [4], beating both the predictive and CDCL solvers used for the Cube. However, in many other cases, predictive heuristics outperform CC. We observed that for benchmarks for which CC performs relatively poorly, two important assumptions about the fundamentals of CC generally do not apply. First, predictive heuristics must be able to divide the search space into cubes, which together take less time to solve. Otherwise, cube-and-conquer techniques are ineffective and CDCL would be the preferred solution technology. Second, predictive heuristics must be able to refute cubes that are easy to solve for CDCL, and it should not refute the cubes that are still difficult for CDCL."}, {"heading": "3.1 Lookahead heuristics", "text": "To compare the performance of CDCL and CC, we applied both types of solution 4 to all the application benchmarks of SAT 2009. CDCL was able to solve 57 more benchmarks than CC within the span of 900 seconds (171 vs. 114). In some cases, the performance gap was huge (in favor of CDCL), especially to satisfactory ones. This can be explained by the following: After a decision, the reduced formula might be more difficult (or at least not simpler) than the original one. This could be caused by ineffective lookahead heuristics. If a decision barely reduces the search space, the conquer solver might have to solve two similar problems instead of one, increasing the calculation costs. If satisfactory formulas, this negative effect is likely to be greater, as a single wrong decision could bring the solver into a part of the search space that is without proposed solutions."}, {"heading": "3.2 The cutoff heuristic", "text": "Cutoff heuristics are critical to the performance of Cube-and-Conquer. Cutting too early wastes potential performance gains, but cutting too low can lead to a large number of cases that increase overall runtime. However, with current heuristics, it is often the case that thousands or millions of cubes are solved almost immediately, while one or two remain and take up most of the runtime. This suggests that heuristics are unable to correctly identify which branches are simple and should be cut. If this behavior is observed, two complementary measures would be preferred. On the one hand, the cutoff for the many cubes that are solved almost immediately should have taken place earlier (with a smaller cube) to reduce the cost of CC's cube phase. On the other hand, for cubes that require Lots4 MiniSAT 2.2 for CDCL, MiniSAT 2.2 for processing LCL March case and March cc Phase (Erobe Phase 2 and MiniSAT) should be used."}, {"heading": "3.3 Predicting when to apply cube-and-conquer", "text": "To predict for which benchmarks CC is competitive, we propose simultaneous cubeand-conquer (CCC) as follows: During the cube phase of CC, a CDCL solver runs in parallel, following the decisions of the cube solver (details are described in Sec. 4). By running both solvers simultaneously, the cutoff heuristics become obsolete because the CDCL solver naturally determines whether a cube is easy for CDCL5. With cutoff heuristics, we only need to predict when the loop-ahead technique is ineffective. The following two metrics can be used to predict when this is the case. First, look-ahead techniques appear effective if they can solve some cubes faster than CDCL. While the loop-ahead CDCL solver runs in parallel, we count the number of times that are predictive faster than CDCL discs."}, {"heading": "4 Concurrent cube-and-conquer", "text": "This section describes the simultaneous Cube-and-Conquer (CCC) technique. We first describe CCC \u221e and later extend it with a cutoff heuristics like in CC for better use of resources. CCC \u221e constructs a decision tree about the viewing angle forward."}, {"heading": "5 Still, cutoff heuristics can lead to reduced resource usage and better performance,", "text": "It is about the question of to what extent it is actually about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way, in which it is about a way and a way and a way, in which it is about a way and a way, in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way in which it is about a way and a way and a way it is about a way and a way in which it is about a way and a way and a way it is about a way and a way and a way and a way it is about a way and a way and a way and a way it is about a way and a way and a way it is about a way and a way and a way in which it is about a way and a way and a way and a way it is about a way and a way and a way it is about a way and a way and a way and a way and a way and a way it is about a way and a way and a way and a way in which it is about a way"}, {"heading": "4.1 Example", "text": "Consider the decision tree in Figure 1. The decisions made by the lookahead solver are displayed at the edges, and each node contains the cid of the cube that matches the literals on the path from the root of the tree to that node. Cid's are incremented based on the initial in-depth search. Suppose c4 has been refuted previously and both solvers are currently solving c6. Now, if the CDCL solver finds a conflict in assigning acceptance \u00ac x3, he knows c3 is unsatisfactory and pushes c3 on Qsolved. He then removes the assumptions \u00ac x4, \u00ac x7 and \u00ac x3, continues with c2 and propagates x3 because he has analyzed the conflict and learned something (\u00ac x2-x3). If the lookahead solver reads c3 from Qsolved, he will abort his search in c6 and also abort c5."}, {"heading": "4.2 Implementation", "text": "In fact, it is so that it will be able to put itself at the top, in the way that it has pushed itself to the top. \"It is as it is,\" he says. \"It is as it is,\" he says. \"But it is as it is,\" he says, \"it is as it is.\" \"It is,\" he says, \"it is as it is.\" \"It is,\" he says, \"it is as it is,\" he says, \"it is as it is,\" he says, \"it is.\""}, {"heading": "4.3 Reintroducing the cutoff heuristic", "text": "In fact, we will be able to move to another world, we will move to another world, we will move to another world, we will move to another world, \"he said."}, {"heading": "5 Empirical results", "text": "In this section we will discuss the performance of CCC solutions and effectiveness prediction. We have passed the first phase of the CCC search for 5 seconds at all levels, the second phase of the CCCL search in the areas of SAT 2009 and 2011 is still ongoing, the second phase of the CCCL search in the areas of SAT 2009 and the second phase of the CCCL search in the areas of SAT 2012 and the third phase of the CCCL search in the areas of SAT 2012 and the third phase of the CCC search in the areas of SAT 2012 and the third phase of the CCC search in the areas of SAT 2012 and the third phase of the CCC search in the areas of SAT 2012 and the third phase of the CCC search in the areas of SAT 2012 and the third phase of the CCC search in the areas of SAT 2012 and the second phase of the CCC search in the areas of SAT 2012."}, {"heading": "6 Conclusion", "text": "In this paper, we have proposed an online cube-and-conquer solver that solves the two main limitations of offline cube-and-conquer. First, it is able to efficiently predict in which cases it will work well, and abandons the search for a few seconds in favor of a pure CDCL solver if not. Second, it does not simply estimate the performance of CDCL on a cube by assuming that it resembles the performance of the lookahead solver on that cube. Generally, this is not true, so that offline cubeand conquer is often unable to determine when to stop partitioning and start solving. We suggest the cube-and-conquer solver runs parallel to the partitioning of the search space. We have seen that this not only implicitly improves the runtime of the cube-and-conquer phase, but also enables better cutoff heuristics, so that the generated cubes are easier to replace a CDL solver."}], "references": [{"title": "Temporal induction by incremental SAT", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "solving. ENTCS,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "An extensible SAT-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "In SAT\u201903,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2004}, {"title": "SmArT Solving: Tools and techniques for satisfiability solvers", "author": ["M.J.H. Heule"], "venue": "PhD thesis, Delft University of Technology,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Cube and conquer: Guiding CDCL SAT solvers by lookaheads", "author": ["M.J.H. Heule", "O. Kullmann", "S. Wieringa", "A. Biere"], "venue": "In Proc. HVC\u201911,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "March eq: Implementing additional reasoning into an efficient lookahead sat solver", "author": ["M.J.H. Heule", "J.E. van Zwieten", "M. Dufour", "H. van Maaren"], "venue": "SAT 2004,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2005}, {"title": "Algorithm selection and scheduling", "author": ["S. Kadioglu", "Y. Malitsky", "A. Sabharwal", "H. Samulowitz", "M. Sellmann"], "venue": "CP, volume 6876 of LNCS,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "Conflict-Driven Clause Learning SAT Solvers, volume 185 of FAIA, chapter 4, pages 131\u2013153", "author": ["J.P. Marques-Silva", "I. Lynce", "S. Malik"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2009}, {"title": "Symbiosis of search and heuristics for random 3-sat", "author": ["S. Mijnders", "B. de Wilde", "M.J.H. Heule"], "venue": "Proceedings of the Third International Workshop on Logic and Search (LaSh", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "Instance-based selection of policies for sat solvers", "author": ["M. Nikolic", "F. Maric", "P. Janicic"], "venue": "In O. Kullmann, editor, SAT,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2009}, {"title": "Satzilla: Portfolio-based algorithm selection for sat", "author": ["L. Xu", "F. Hutter", "H.H. Hoos", "K. Leyton-Brown"], "venue": "J. Artif. Intell. Res. (JAIR),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2008}], "referenceMentions": [{"referenceID": 6, "context": "1 Introduction Current satisfiability solvers that target industrial instances are almost always based on the conflict-driven clause learning (CDCL) [7] technique.", "startOffset": 149, "endOffset": 152}, {"referenceID": 2, "context": "Yet on small, hard problems lookahead solvers [3] perform better by applying much more reasoning in each search node and then recursively splitting the search space until a solution is found.", "startOffset": 46, "endOffset": 49}, {"referenceID": 3, "context": "Recent work [4] has shown that the two techniques can be combined successfully, resulting in better performance particularly for very hard instances.", "startOffset": 12, "endOffset": 15}, {"referenceID": 9, "context": "The authors of SATzilla specifically mention in their conclusion that identifying solvers that are only competitive for certain kinds of instances still has the potential to further improve SATzilla\u2019s performance substantially [10].", "startOffset": 227, "endOffset": 231}, {"referenceID": 3, "context": "1 Cube-and-conquer The technique proposed in this work is based on cube-and-conquer (CC) [4].", "startOffset": 89, "endOffset": 92}, {"referenceID": 1, "context": "2 [2] as CDCL solver instead of Lingeling, since it is easier to extend.", "startOffset": 2, "endOffset": 5}, {"referenceID": 0, "context": "When finished, all cubes are solved incrementally by a CDCL solver, by adding a cube\u2019s literals as assumptions [1] to the original formula and running the search.", "startOffset": 111, "endOffset": 114}, {"referenceID": 3, "context": "Cube-and-conquer shows strong performance on several hard application benchmarks [4], beating both the lookahead and CDCL solvers that were used for the cube and conquer steps.", "startOffset": 81, "endOffset": 84}, {"referenceID": 9, "context": "In related work on portfolio SAT solving [10,9,6] machine learning techniques are used for selection (including parameters) and scheduling of SAT solvers.", "startOffset": 41, "endOffset": 49}, {"referenceID": 8, "context": "In related work on portfolio SAT solving [10,9,6] machine learning techniques are used for selection (including parameters) and scheduling of SAT solvers.", "startOffset": 41, "endOffset": 49}, {"referenceID": 5, "context": "In related work on portfolio SAT solving [10,9,6] machine learning techniques are used for selection (including parameters) and scheduling of SAT solvers.", "startOffset": 41, "endOffset": 49}, {"referenceID": 9, "context": "These techniques are based on measuring several features of instances, which can be characterized as either being static, such as number of variables and clauses, or dynamic, such as the number of propagated assignments at certain decision depths (local search or DPLL probing [10]).", "startOffset": 277, "endOffset": 281}, {"referenceID": 3, "context": "It was shown that for several benchmarks this assumption holds [4].", "startOffset": 63, "endOffset": 66}, {"referenceID": 3, "context": "All benchmarks were first preprocessed using Lingeling as suggested for CC in [4].", "startOffset": 78, "endOffset": 81}, {"referenceID": 3, "context": "We used the same version of Lingeling as in [4].", "startOffset": 44, "endOffset": 47}, {"referenceID": 4, "context": "For instance tree-based lookahead [5] requires access to all binary clauses at all decision levels, which can only be accessed in a fast manner by either using full occurrence lists or three watches for non-binary clauses.", "startOffset": 34, "endOffset": 37}, {"referenceID": 3, "context": "Cubes are solved in the same order as they were generated, and two threads of a parallel solver never solve the same cube (the multijob strategy [4]).", "startOffset": 145, "endOffset": 148}, {"referenceID": 3, "context": "The contrary goes for when the lookahead solver solves a cube: it then seems 7 CC\u2019s heuristic has been improved slightly since it was initially published [4]; it now uses |\u03c6dec| 2 instead of |\u03c6dec|.", "startOffset": 154, "endOffset": 157}, {"referenceID": 7, "context": "2, March rw [8], and Lingeling, and parallel solver Plingeling4 (Plingeling with four threads).", "startOffset": 12, "endOffset": 15}], "year": 2012, "abstractText": "Recent work introduced the cube-and-conquer technique to solve hard SAT instances. It partitions the search space into cubes using a lookahead solver. Each cube is tackled by a conflict-driven clause learning (CDCL) solver. Crucial for strong performance is the cutoff heuristic that decides when to switch from lookahead to CDCL. Yet, this offline heuristic is far from ideal. In this paper, we present a novel hybrid solver that applies the cube and conquer steps simultaneously. A lookahead and a CDCL solver work together on each cube, while communication is restricted to synchronization. Our concurrent cube-and-conquer solver can solve many instances faster than pure lookahead, pure CDCL and offline cube-and-conquer, and can abort early in favor of a pure CDCL search if an instance is not suitable for cube-and-conquer techniques.", "creator": "gnuplot 4.4 patchlevel 4"}}}