{"id": "1402.6560", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Feb-2014", "title": "Even more generic solution construction in Valuation-Based Systems", "abstract": "Valuation algebras abstract a large number of formalisms for automated reasoning and enable the definition of generic inference procedures. Many of these formalisms provide some notions of solutions. Typical examples are satisfying assignments in constraint systems, models in logics or solutions to linear equation systems.", "histories": [["v1", "Wed, 26 Feb 2014 14:51:57 GMT  (17kb)", "http://arxiv.org/abs/1402.6560v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["jordi roca-lacostena", "jesus cerquides"], "accepted": false, "id": "1402.6560"}, "pdf": {"name": "1402.6560.pdf", "metadata": {"source": "CRF", "title": "Even more generic solution construction in Valuation-Based Systems", "authors": ["Jordi Roca-Lacostena", "Jesus Cerquides"], "emails": ["cerquide}@iiia.csic.es"], "sections": [{"heading": null, "text": "ar Xiv: 140 2.65 60v1 [cs.AI] 26 FeRecently, formal requirements for the existence of solutions and a generic algorithm for solution construction based on the results of a previously performed inference scheme [9, 8] have been proposed. Unfortunately, the formalization of Pouly and Kohlas is based on a theorem for which we provide a counter-example. Nevertheless, the main line of the theory described is correct, although some of the necessary conditions for the application of some of the algorithms need to be revised. To correct the theory, we generalize some of its definitions and provide correct sufficient conditions for the algorithms. As a result, we obtain a more general and corrected version of the theory presented under [9, 8]."}, {"heading": "1 Introduction", "text": "Solving discrete optimization problems is an important and well-studied task in computer science. A particular approach to addressing them is known as dynamic programming [2] and can be found in almost every manual on algorithms and programming techniques. Bellman's [1], Nemhauser's [7], and Bertel\u00e8 and Brioschi's [2] work presents non-serial dynamic programming as an algorithm for optimization problems for functions that assume values in real numbers. A more general approach was taken by Mitten [6] and further generalized by Shenoy in 1996 [10], for functions that have values in each ordered theorem. Shenoy introduces a series of axioms that will later become known as valuation algebras. In these terms, Shenoy is the first to bring the solution concept with the marginalization operation of valuation algebras. In 2011, Pouly and Kohlas [9], the assumption that valuations fall into a tuples."}, {"heading": "2 Background", "text": "In this section we will start with the definition of rating algebras, then we will introduce the marginalization problem and finally we will review the Collect algorithm to solve this problem. The basic elements of a rating algebra are so-called ratings, which we will then call lowercase Greek letters such as \"L\" or \"L.\" Let us have D as lattice [4] with partial order of \"L,\" hit and connect two operations \"L,\" an upper element \"L\" and a lower element \"L.\" In the face of a series of ratings \"L\" and a grid of domains \"D,\" a rating algebra has three operations: 1. Labeling: \"L\" D, \"7\" L \"D,\" 2. Combination: L \"and\" L \". 7\" L. \""}, {"heading": "2.1 Finding the marginal of a factorized valuation", "text": "A relevant problem in many valuation algebras in the problem of finding the marginality of a factorized value tree is any function. Problem 1: Let's be a valuation algebra in the way that we find the marginality of a factorized value tree. Problem 1: If our valuations are probability potentials, this is the well-investigated problem of finding the marginality of a factorized distribution, also known as Markov Random Field.The fusion algorithm [10] (a.k.a. variable elimination) or the collection tree algorithm (a.k.a. crossing tree or cluster tree algorithm) can be used to find marginals. Since our results are based on the top of the collection algorithm, we offer a more detailed description of the collection tree. A necessary condition to apply the collection algorithms is that we can organize the valuations."}, {"heading": "3 Generic solutions in valuation algebras with", "text": "In the previous section, we have shown that the Collect algorithm can be used to find marginal areas. In this section, we focus on the problem of finding a solution (SFP). The problem is of primary importance because it forms the basis of dynamic programming [10, 2]. In addition, problems such as satisfaction, solving maximum a posteriori queries in probable graphical models, or the maximum decoding of particular cases of the SFP. We start with the formal definition of the problem and then review the results of Pouly [8] and Pouly and Kohlas [9], which provide algorithms for solving these problems and define the conditions under which these algorithms are guaranteed to work. Unfortunately, the inspiring ideas underlying Pouly and Kohlas' work are correct, but their formal development is not."}, {"heading": "3.1 The SFP for valuation algebras with variable system", "text": "So far, the most general formalization of the SFP is that envisaged by [10] and adapted by Pouly and Kohlas to the formal framework of evaluation algebras in Chapter 8 of [9]. They proceed from an evaluation algebra < \u03a6, D > equipped with a variable system < V >. As in the marginal evaluation problem, we are led in the SFP to a series of evaluation aluation algebras so that x is a solution for \u03c6. For the previous proposition to make sense, we must correctly define our solution concept. The most general way we can do this is to define a family c = {c2} of solution sets, so that the solution for each evaluation makes sense."}, {"heading": "3.2 Solving the solution finding problem by composing partial solutions", "text": "As described in the introduction, several authors have attempted to create a formal basis for dynamic programming, which we can now identify as a specific case of the SFP. In their work from 2011, Pouly and Kohlas [9, 8] have dropped the assumption that assessments cannot be applied to previously detected cases. Essentially, the sufficient conditions for the correctness of the Pouly and Kohlas' algorithms apply the operations in the assessment algorithm with the concept of solution by means of a family of configuration extensions."}, {"heading": "4 Even more generic solutions in valuation alge-", "text": "brasDuring our efforts to identify the necessary conditions for the application of the algorithms presented by Pouly and Kohlas we realized that nothing in the theory we were required that the evaluation algebra was equipped with a variable system. So, as a by-product of the correction effort, the resulting theory is the first to suggest a generic algorithm, the so-called Collect + Extend algorithm, to solve the SFP for evaluation algebras that are not necessarily equipped with a variable system. The generality of the Collect + Extend algorithm allows it to be applied to evaluation algebras such as the algebra of sparse potentials, an example that has not previously been covered by any previous formalization. We begin this section by generalizing the definition of the SFP problem so that it does not force the evalgebra to be equipped with a variable system. Then we introduce the concept of piecemeal extensibility, and we prove that it is a conditional of the object for the adequacy of the set."}, {"heading": "4.1 A more general solution finding problem", "text": "We begin by introducing the concept of the configuration system, a generalization of the concept of the variable system that does not force you to be a member of a Cartesian product. Then, we generalize the SFP to configuration systems. Configuration systems, compatibility and mergeability. We begin by relating each element of the configuration system to a series of configurations and then impose a minimum configuration between these configuration systems, leading to the concept of the configuration system. Definition 4 (Configuration system) We begin by relating each element of the configuration system to a series of configuration systems. <"}, {"heading": "5 Conclusions", "text": "We have corrected and generalized the theory and algorithms for the generic construction of solutions in valuation-based systems. To the best of our knowledge, these results provide the most general, up-to-date theory for dynamic programming and cover commonly used examples, such as finding the maximum of a combination of sparse functions that the current theory does not cover."}], "references": [{"title": "Dynamic Programming", "author": ["R.E. Bellman"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1957}, {"title": "Nonserial Dynamic Programming, volume 91 of Mathematics in Science and Engineering", "author": ["Umberto Bertel\u00e8", "Francesco Brioschi"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1972}, {"title": "Introduction to lattices and order", "author": ["B.A. Davey", "H.A. Priestley"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Lattice Theory: Foundation", "author": ["George Gr\u00e4tzer"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Semiring induced valuation algebras: Exact and approximate local computation algorithms", "author": ["J Kohlas", "N Wilson"], "venue": "Artificial Intelligence,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Composition Principles for Synthesis of Optimal Multistage Processes", "author": ["L.G. Mitten"], "venue": "Operations Research,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1964}, {"title": "Introduction to Dynamic Programming", "author": ["George L. Nemhauser"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1966}, {"title": "Generic solution construction in valuation-based systems", "author": ["Marc Pouly"], "venue": "Advances in Artificial Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "Generic Inference", "author": ["Marc Pouly", "J\u00fcrg Kohlas"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2011}, {"title": "Axioms for Dynamic Programming", "author": ["Prakash P Shenoy"], "venue": "Computational Learning and Probabilistic Reasoning,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1996}], "referenceMentions": [{"referenceID": 8, "context": "Recently, formal requirements for the presence of solutions and a generic algorithm for solution construction based on the results of a previously executed inference scheme have been proposed [9, 8].", "startOffset": 192, "endOffset": 198}, {"referenceID": 7, "context": "Recently, formal requirements for the presence of solutions and a generic algorithm for solution construction based on the results of a previously executed inference scheme have been proposed [9, 8].", "startOffset": 192, "endOffset": 198}, {"referenceID": 8, "context": "As a result, we get a more general and corrected version of the theory presented at [9, 8].", "startOffset": 84, "endOffset": 90}, {"referenceID": 7, "context": "As a result, we get a more general and corrected version of the theory presented at [9, 8].", "startOffset": 84, "endOffset": 90}, {"referenceID": 1, "context": "One particular approach to tackle them is known as dynamic programming [2] and can be found in almost every handbook about algorithms and programming techniques.", "startOffset": 71, "endOffset": 74}, {"referenceID": 0, "context": "The works of Bellman [1], Nemhauser [7] and Bertel\u00e8 and Brioschi [2] present non-serial dynamic programming as an algorithm for optimization problems for functions taking values in the real numbers.", "startOffset": 21, "endOffset": 24}, {"referenceID": 6, "context": "The works of Bellman [1], Nemhauser [7] and Bertel\u00e8 and Brioschi [2] present non-serial dynamic programming as an algorithm for optimization problems for functions taking values in the real numbers.", "startOffset": 36, "endOffset": 39}, {"referenceID": 1, "context": "The works of Bellman [1], Nemhauser [7] and Bertel\u00e8 and Brioschi [2] present non-serial dynamic programming as an algorithm for optimization problems for functions taking values in the real numbers.", "startOffset": 65, "endOffset": 68}, {"referenceID": 5, "context": "A more general approach was taken by Mitten [6] and further generalized by Shenoy in 1996 [10], for functions taking values in any ordered set \u2206.", "startOffset": 44, "endOffset": 47}, {"referenceID": 9, "context": "A more general approach was taken by Mitten [6] and further generalized by Shenoy in 1996 [10], for functions taking values in any ordered set \u2206.", "startOffset": 90, "endOffset": 94}, {"referenceID": 8, "context": "In 2011, Pouly and Kohlas [9, 8] drop the assumption that valuations are functions that map tuples into a value set \u2206.", "startOffset": 26, "endOffset": 32}, {"referenceID": 7, "context": "In 2011, Pouly and Kohlas [9, 8] drop the assumption that valuations are functions that map tuples into a value set \u2206.", "startOffset": 26, "endOffset": 32}, {"referenceID": 3, "context": "Let D be a lattice[4] with a partial order\u2264, two operations meet \u2227 and join \u2228, a top element \u22a4, and a bottom element \u22a5.", "startOffset": 18, "endOffset": 21}, {"referenceID": 8, "context": "As proven in [9], any valuation algebra that does not have and identity valuation can easily be extended to have one.", "startOffset": 13, "endOffset": 16}, {"referenceID": 2, "context": "[3] page 36) that for any set V, the ordered set \u3008P(V ),\u2286\u3009 is a complete lattice, referred to as the power set lattice.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "As proven in [9] the valuation algebra of Boolean functions satisfies axioms A1-A6.", "startOffset": 13, "endOffset": 16}, {"referenceID": 4, "context": "Some other relevant examples of valuation algebras are relational algebra, which is fundamental to databases, or the algebra of probability potentials, which underlies many results in probabilistic graphical models and the more abstract class of semiring induced valuation algebras [5].", "startOffset": 282, "endOffset": 285}, {"referenceID": 9, "context": "The Fusion algorithm [10] (a.", "startOffset": 21, "endOffset": 25}, {"referenceID": 8, "context": "junction tree or cluster tree algorithm)[9, 8] can be used to find marginals.", "startOffset": 40, "endOffset": 46}, {"referenceID": 7, "context": "junction tree or cluster tree algorithm)[9, 8] can be used to find marginals.", "startOffset": 40, "endOffset": 46}, {"referenceID": 8, "context": "6 in [9].", "startOffset": 5, "endOffset": 8}, {"referenceID": 9, "context": "The problem is of foremost importance, since it lies at the foundation of dynamic programming [10, 2].", "startOffset": 94, "endOffset": 101}, {"referenceID": 1, "context": "The problem is of foremost importance, since it lies at the foundation of dynamic programming [10, 2].", "startOffset": 94, "endOffset": 101}, {"referenceID": 7, "context": "We start by formally defining the problem and then we review the results of Pouly [8] and Pouly and Kohlas [9], who give algorithms for solving those problems and establish the conditions under which those algorithms are guaranteed to work.", "startOffset": 82, "endOffset": 85}, {"referenceID": 8, "context": "We start by formally defining the problem and then we review the results of Pouly [8] and Pouly and Kohlas [9], who give algorithms for solving those problems and establish the conditions under which those algorithms are guaranteed to work.", "startOffset": 107, "endOffset": 110}, {"referenceID": 9, "context": "Up to know, the most general formalization of the SFP is the one provided by [10] and adapted by Pouly and Kohlas to the formal framework of valuation algebras in Chapter 8 of [9].", "startOffset": 77, "endOffset": 81}, {"referenceID": 8, "context": "Up to know, the most general formalization of the SFP is the one provided by [10] and adapted by Pouly and Kohlas to the formal framework of valuation algebras in Chapter 8 of [9].", "startOffset": 176, "endOffset": 179}, {"referenceID": 8, "context": "In their works in 2011, Pouly and Kohlas [9, 8] drop the assumption that valuations are functions that map tuples into a value set \u2206.", "startOffset": 41, "endOffset": 47}, {"referenceID": 7, "context": "In their works in 2011, Pouly and Kohlas [9, 8] drop the assumption that valuations are functions that map tuples into a value set \u2206.", "startOffset": 41, "endOffset": 47}, {"referenceID": 8, "context": "1 in [9]).", "startOffset": 5, "endOffset": 8}, {"referenceID": 7, "context": "Summarizing, in their works [8, 9] in 2011, Pouly and Kohlas make an attempt to generalize the results of Shenoy to valuation algebras equipped with a variable system, not restricting the valuations to be functions into a value set \u2206.", "startOffset": 28, "endOffset": 34}, {"referenceID": 8, "context": "Summarizing, in their works [8, 9] in 2011, Pouly and Kohlas make an attempt to generalize the results of Shenoy to valuation algebras equipped with a variable system, not restricting the valuations to be functions into a value set \u2206.", "startOffset": 28, "endOffset": 34}], "year": 2014, "abstractText": "Valuation algebras abstract a large number of formalisms for automated reasoning and enable the definition of generic inference procedures. Many of these formalisms provide some notions of solutions. Typical examples are satisfying assignments in constraint systems, models in logics or solutions to linear equation systems. Recently, formal requirements for the presence of solutions and a generic algorithm for solution construction based on the results of a previously executed inference scheme have been proposed [9, 8]. Unfortunately, the formalization of Pouly and Kohlas relies on a theorem for which we provide a counter example. In spite of that, the mainline of the theory described is correct, although some of the necessary conditions to apply some of the algorithms have to be revised. To fix the theory, we generalize some of their definitions and provide correct sufficient conditions for the algorithms. As a result, we get a more general and corrected version of the theory presented at [9, 8].", "creator": "LaTeX with hyperref package"}}}