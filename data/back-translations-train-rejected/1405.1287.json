{"id": "1405.1287", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-May-2014", "title": "Semantics and Compilation of Answer Set Programming with Generalized Atoms", "abstract": "Answer Set Programming (ASP) is logic programming under the stable model or answer set semantics. During the last decade, this paradigm has seen several extensions by generalizing the notion of atom used in these programs. Among these, there are aggregate atoms, HEX atoms, generalized quantifiers, and abstract constraints. In this paper we refer to these constructs collectively as generalized atoms. The idea common to all of these constructs is that their satisfaction depends on the truth values of a set of (non-generalized) atoms, rather than the truth value of a single (non-generalized) atom. Motivated by several examples, we argue that for some of the more intricate generalized atoms, the previously suggested semantics provide unintuitive results and provide an alternative semantics, which we call supportedly stable or SFLP answer sets. We show that it is equivalent to the major previously proposed semantics for programs with convex generalized atoms, and that it in general admits more intended models than other semantics in the presence of non-convex generalized atoms. We show that the complexity of supportedly stable models is on the second level of the polynomial hierarchy, similar to previous proposals and to stable models of disjunctive logic programs. Given these complexity results, we provide a compilation method that compactly transforms programs with generalized atoms in disjunctive normal form to programs without generalized atoms. Variants are given for the new supportedly stable and the existing FLP semantics, for which a similar compilation technique has not been known so far.", "histories": [["v1", "Tue, 6 May 2014 14:44:40 GMT  (26kb)", "http://arxiv.org/abs/1405.1287v1", "The paper appears in the Proceedings of the 15th International Workshop on Non-Monotonic Reasoning (NMR 2014)"]], "COMMENTS": "The paper appears in the Proceedings of the 15th International Workshop on Non-Monotonic Reasoning (NMR 2014)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["mario alviano", "wolfgang faber"], "accepted": false, "id": "1405.1287"}, "pdf": {"name": "1405.1287.pdf", "metadata": {"source": "CRF", "title": "Semantics and Compilation of Answer Set Programming with Generalized Atoms", "authors": ["Mario Alviano", "Wolfgang Faber"], "emails": ["mario@alviano.com", "wf@wfaber.com"], "sections": [{"heading": null, "text": "ar Xiv: 140 5.12 87v1 [cs.AI] 6M ay2 01"}, {"heading": "Introduction", "text": "This year, it has reached the point where it will be able to retaliate."}, {"heading": "Syntax and FLP Semantics", "text": "In this section we will introduce the syntax used in this essay and present the FLP semantics (Faber, Leone and Pfeifer 2004; Faber, Leone and Pfeifer 2011).To simplify the presentation, we will directly describe a statement language that can easily be extended to the more common ASP notations of programs with variables representing their basic versions (which correspond to a statement program)."}, {"heading": "Syntax", "text": "A generalized atom A to B is a mapping of 2B to Boolean truth values. Each generalized atom A has an associated finite1 domain DA B, which denotes those proposition atoms relevant to the generalized atom. Example 1. A generalized atom A1 is a generalized conjunction a1,.., a (n \u2265 0) of proposition atoms is such that DA1 = {a1,.., a} and for each I B, A1 maps I to true if and only if DA1 I.A a generalized A2 is a conjunction a1,."}, {"heading": "FLP Semantics", "text": "An interpretation I is a subset of B. I is a model for a generalized atom A, referred to as \"A\" (b), if \"A\" refers to true. Otherwise, if \"A\" is incorrect, I am not a model of \"A,\" referred to as \"A.\" I am a model of a rule r of form (1), referred to as \"I,\" if \"H\" (r), \"I,\" \"I\" and \"P\" is incorrect. I is a model of a program, referred to as \"I,\" if I \"R\" for each rule r \"P.\" Generalized atoms can be divided into two classes, according to the following definition. 1In principle, we could also consider infinite domains, but refractory to the so-called \"P.\" Definition 3 (generalized atom)."}, {"heading": "SFLP Semantics", "text": "The problem is that P1 has no FLP sentences, but rather that they are supported by both sides. (...) We assume that both A and B are wrong (...), and then apply a generalization of the known one-step derivatives. (...) The application of this method of operation leads to a generalization that is also a supported model, that is, for all true atoms there is a rule in which the atom is the only true atom, and in which the body is instructive in investigating why this seemingly robust model is not a FLP response. (...) Its answer is the same as the original program, b) There is a rule in which there are two models of P1. (...) There are two models of P1. \""}, {"heading": "Properties", "text": "Theorem 1. Let P be a generic program. FLP (P) SFLP (P).Proof. Let me be a FLP response set of P. Therefore, each J-I answer is such that J 6 | = P I. From this we can conclude that J 6 | = s P I for each J-I. Therefore, I am an SFLP response set of P. The inclusion is generally strict. In fact, P1 is a simple program where the two semantics disagree (see Examples 2-5 and Table 1). On the other hand, the two semantics are equivalent to a large class of programs, as shown below. Theorem 2. If P is a convex program, then FLP (P) ="}, {"heading": "SFLP (P ).", "text": "We also assume that J is a subset minimal model of P I, that is, there is no K minimal model of P I, so that K-P I can be checked. To this end, we assume that for each r minimal model of P I there is either J 6 | = B (r) or J-H (r) 6 = {a}. Let us consider J- {a) and a rule r-P I can be checked so that J- {a) gives an answer. Since r-P I, I | = B (r) and thus J-H (r) is a difference."}, {"heading": "Compilation", "text": "The introduction of generalized atoms in logical programs does not increase the computational complexity of checking FLP as well as the SFLP response set existence as long as one is allowed to use disjunctive control heads. However, so far there is no compilation method that transforms general programs compactly into logical programs without generalized atoms. We point out that such compilations are not necessarily intended to provide efficient methods for the computation of general programs. Instead, their purpose is to provide insights that may lead to such methods in the future. In this section, we will only consider generalized atoms in disjunctive normal form, i.e. a generalized atom is associated with an equivalent formula of the following form."}, {"heading": "Conclusion", "text": "In this book, we have first of all defined a new semantics for programs with generalized atoms, which are referred to as supporting models, both in terms of their definition and in terms of the way they exist in each country, as well as in terms of the way they exist in each country. (...) We have a new definition that overcomes this anomaly and provides robust semantics for programs with generalized atoms. We show several properties of this new semantics, for example, that it coincides with the semantics of FLP (and thus also the semantics of PSP). The new definition overcomes this anomaly and provides robust semantics for programs with generalized atoms. We show several properties of these new semantics that it coincides with the semantics of FLP, for example, that it coincides with the semantics of PSP semantics (and with it the semantics of PSP)."}], "references": [{"title": "and Faber", "author": ["M. Alviano"], "venue": "W.", "citeRegEx": "Alviano and Faber 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "External sources of knowledge and value invention in logic programming", "author": ["Cozza Calimeri", "F. Ianni 2007] Calimeri", "S. Cozza", "G. Ianni"], "venue": "Annals of Mathematics and Artificial Intelligence", "citeRegEx": "Calimeri et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Calimeri et al\\.", "year": 2007}, {"title": "K", "author": ["Clark"], "venue": "L.", "citeRegEx": "Clark 1978", "shortCiteRegEx": null, "year": 1978}, {"title": "Aggregate Functions in Disjunctive Logic Programming: Semantics, Complexity, and Implementation in DLV", "author": ["Dell\u2019Armi"], "venue": null, "citeRegEx": "Dell.Armi,? \\Q2003\\E", "shortCiteRegEx": "Dell.Armi", "year": 2003}, {"title": "Combining Answer Set Programming with Description Logics for the Semantic Web", "author": ["Eiter"], "venue": "In Principles of Knowledge Representation and Reasoning: Proceedings of the Ninth International Conference", "citeRegEx": "Eiter,? \\Q2004\\E", "shortCiteRegEx": "Eiter", "year": 2004}, {"title": "A Uniform Integration of Higher-Order Reasoning and External Evaluations in Answer Set Programming", "author": ["Eiter"], "venue": "In International Joint Conference on Artificial Intelligence (IJCAI)", "citeRegEx": "Eiter,? \\Q2005\\E", "shortCiteRegEx": "Eiter", "year": 2005}, {"title": "Design and implementation of aggregate functions in the dlv system. Theory and Practice of Logic Programming 8(5\u20136):545\u2013580", "author": ["Faber"], "venue": null, "citeRegEx": "Faber,? \\Q2008\\E", "shortCiteRegEx": "Faber", "year": 2008}, {"title": "Recursive aggregates in disjunctive logic programs: Semantics and complexity", "author": ["Leone Faber", "W. Pfeifer 2004] Faber", "N. Leone", "G. Pfeifer"], "venue": "Proceedings of the 9th European Conference on Artificial Intelligence (JELIA 2004),", "citeRegEx": "Faber et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Faber et al\\.", "year": 2004}, {"title": "Semantics and complexity of recursive aggregates in answer set programming. Artificial Intelligence 175(1):278\u2013298", "author": ["Leone Faber", "W. Pfeifer 2011] Faber", "N. Leone", "G. Pfeifer"], "venue": "Special Issue: John McCarthy\u2019s Legacy", "citeRegEx": "Faber et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Faber et al\\.", "year": 2011}, {"title": "Answer Sets for Propositional Theories", "author": ["P. Ferraris"], "venue": "Logic Programming and Nonmonotonic Reasoning \u2014 8th International Conference,", "citeRegEx": "Ferraris,? \\Q2005\\E", "shortCiteRegEx": "Ferraris", "year": 2005}, {"title": "and Truszczy\u0144ski", "author": ["L. Liu"], "venue": "M.", "citeRegEx": "Liu and Truszczy\u0144ski 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "and Simons", "author": ["I. Niemel\u00e4"], "venue": "P.", "citeRegEx": "Niemel\u00e4 and Simons 2000", "shortCiteRegEx": null, "year": 2000}, {"title": "Stable Model Semantics of Weight Constraint Rules", "author": ["Simons Niemel\u00e4", "I. Soininen 1999] Niemel\u00e4", "P. Simons", "T. Soininen"], "venue": "Proceedings of the 5th International Conference on Logic Programming and Nonmonotonic Rea-", "citeRegEx": "Niemel\u00e4 et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Niemel\u00e4 et al\\.", "year": 1999}, {"title": "Well-founded and Stable Semantics of Logic Programs with Aggregates", "author": ["Denecker Pelov", "N. Bruynooghe 2007] Pelov", "M. Denecker", "M. Bruynooghe"], "venue": "Theory and Practice of Logic Programming", "citeRegEx": "Pelov et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Pelov et al\\.", "year": 2007}, {"title": "and Pontelli", "author": ["T.C. Son"], "venue": "E.", "citeRegEx": "Son and Pontelli 2007", "shortCiteRegEx": null, "year": 2007}], "referenceMentions": [], "year": 2014, "abstractText": "Answer Set Programming (ASP) is logic programming under the stable model or answer set semantics. During the last decade, this paradigm has seen several extensions by generalizing the notion of atom used in these programs. Among these, there are aggregate atoms, HEX atoms, generalized quantifiers, and abstract constraints. In this paper we refer to these constructs collectively as generalized atoms. The idea common to all of these constructs is that their satisfaction depends on the truth values of a set of (non-generalized) atoms, rather than the truth value of a single (non-generalized) atom. Motivated by several examples, we argue that for some of the more intricate generalized atoms, the previously suggested semantics provide unintuitive results and provide an alternative semantics, which we call supportedly stable or SFLP answer sets. We show that it is equivalent to the major previously proposed semantics for programs with convex generalized atoms, and that it in general admits more intended models than other semantics in the presence of non-convex generalized atoms. We show that the complexity of supportedly stable models is on the second level of the polynomial hierarchy, similar to previous proposals and to stable models of disjunctive logic programs. Given these complexity results, we provide a compilation method that compactly transforms programs with generalized atoms in disjunctive normal form to programs without generalized atoms. Variants are given for the new supportedly stable and the existing FLP semantics, for which a similar compilation technique has not been known so far.", "creator": "LaTeX with hyperref package"}}}