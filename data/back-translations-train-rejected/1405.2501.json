{"id": "1405.2501", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-May-2014", "title": "Using Tabled Logic Programming to Solve the Petrobras Planning Problem", "abstract": "Tabling has been used for some time to improve efficiency of Prolog programs by memorizing answered queries. The same idea can be naturally used to memorize visited states during search for planning. In this paper we present a planner developed in the Picat language to solve the Petrobras planning problem. Picat is a novel Prolog-like language that provides pattern matching, deterministic and non-deterministic rules, and tabling as its core modelling and solving features. We demonstrate these capabilities using the Petrobras problem, where the goal is to plan transport of cargo items from ports to platforms using vessels with limited capacity. Monte Carlo Tree Search has been so far the best technique to tackle this problem and we will show that by using tabling we can achieve much better runtime efficiency and better plan quality.", "histories": [["v1", "Sun, 11 May 2014 06:38:25 GMT  (465kb,D)", "http://arxiv.org/abs/1405.2501v1", "To appear in Theory and Practice of Logic Programming (TPLP)"]], "COMMENTS": "To appear in Theory and Practice of Logic Programming (TPLP)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["roman bart\\'ak", "neng-fa zhou"], "accepted": false, "id": "1405.2501"}, "pdf": {"name": "1405.2501.pdf", "metadata": {"source": "CRF", "title": "Using Tabled Logic Programming to Solve the Petrobras Planning Problem", "authors": ["ROMAN BART\u00c1K", "NENG-FA ZHOU"], "emails": ["bartak@ktiml.mff.cuni.cz)", "nzhou@acm.org)"], "sections": [{"heading": null, "text": "Key concepts: submission, resource limited search, symmetry break, planning, logistics"}, {"heading": "1 Introduction", "text": "Prolog and other logical programming languages are not normally accepted as the programming language of first choice for the development of real planning applications. In this paper we will show that Picat, a novel prolog-like language, provides strong support in solving hard and realistic planning problems. In particular, we will propose a method for solving the logistical problem of Petrobras, which was introduced in the Fourth International Competition for Knowledge Technology for Planning and Planning (ICKEPS 2012). Picat enabled us to develop a declarative model of the problem. We will use Picat as a mechanism to support the classical depth search for solving non-deterministic decisions. We will experimentally demonstrate that the proposed model outperforms existing techniques both in terms of runtime and in the creation of plans with lower fuel consumption. The paper is organized as follows. First, we will describe the Petrobras planning problem and examine existing techniques applied to this problem. Afterwards, we will present our solution based on the breakdown of the problem and the presentation of the problem."}, {"heading": "2 Petrobras Problem", "text": "The Petrobras problem was introduced at the Fourth International Knowledge Technology Planning and Planning Competition (ICKEPS 2012) as one of the challenges of real life. The main task of the competition was to formally model and solve the problems. In this section we will first present some details of the Petrobras problem and then examine the techniques used to solve the problem."}, {"heading": "2.1 Problem Specification", "text": "This problem is motivated by a real problem of the Brazilian oil company Petrobras. A complete description of the problem, including sample data, can be found in (Vaquero et al. 2012). The problem can be described as follows: There are several identical ships with limited cargo capacity and initial fuel levels. Initially, each ship is in one of two waiting areas (marked A1 and A2 in Figure 1). A number of cargo is prepared in two ports (marked P1 and P2 in Figure 1). Each cargo has a specific weight and a destination where the object should be delivered. Ships navigate to ports where they can load cargo while respecting the capacity limits of the ships. Then, the ships will navigate to platforms where they will be unloaded."}, {"heading": "2.2 Existing Solving Approaches", "text": "The first three approaches, namely classical planning, timing and Monte Carlo tree search, were introduced in (Toropila et al. 2012), while the fourth approach, based on finite state automation and macro actions, is described in (Barta \u0301 k and Zhou 2013).The classical planning approach modelled the problem in PDDL 3.0 (Gerevini and Long 2005) using numerical approaches that describe the limited resource capacity (fuel tank, cargo capacity).This model used measures specified in the problem formulation, namely: Navigate-empty-vessel, navigate-nonempty-vessel, load-cargo, unloaded-vessel platform, fuel-vessel-port, dock-vessel, undock-vessel-undock-vessel. SGPlan 6.0 (Hsu and Wah 2008) was used to solve the problem while the solution was added in post-processing."}, {"heading": "3 Motivation for Tabling in Planning", "text": "Although the first steps in the right direction are going in the right direction, the question of how to proceed and how to proceed is still not decided. (...) The question is only whether and how to proceed. (...) The question is only whether there will be a solution. (...) The question is whether there will be a solution. (...) The question is whether there will be a solution at all. (...) The question is whether there will be a solution at all. (...) The question is only how it will come to a solution. (...) The question is only whether there will be a solution. (...) The question is whether there will be a solution at all. (...) The question is whether there will really be a solution. (...) The question is how it will come to a solution. (...)"}, {"heading": "4 A Solving Approach", "text": "The plan describes the causal correlations between the measures we can take to increase the efficiency of the solution approach, since the partial problems can be solved independently of each other. On the other hand, the use of decomposition decisions can affect the quality of the solution. We first break down the problem into the planning and planning of parts. The planning task is to decide which measures are necessary to deal with all issues, and we discuss how our decomposition decisions affect the feasibility and optimisability of the solutions."}, {"heading": "4.1 Symmetries and Representation of States", "text": "There are many symmetries in the Petrobras problem. First, all ships in this problem are identical, which means that they have exactly the same weight capacity and fuel capacity, and the same speed and fuel consumption, which only depends on whether a cargo is loaded or not. If two ships with identical fuel levels are in the same place, then these ships are indistinguishable in the plan. Therefore, we identify ships by location and fuel level (see below), so that we can easily detect such symmetries and deterministically select the first ship in the series of identical ships during the planning process. There is a similar symmetry of the cargo elements. Two cargo elements located in the same port with identical weights and targets are not distinguishable. Although this situation is rare, we treat it in the procedure for selecting the cargo for transport (see below). Based on the above observations, we present the most important search states as the positions of cargo elements and targets."}, {"heading": "4.2 Representation of Transitions", "text": "In fact, it is such that most people will be able to go to another world, in which they are able to go to another world, in which they are able to go to another world, in which they are able to move, in which they move, in which they move, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they, in which they, in which they live, in which they live, in which they, in which they live, in which they live, in which they, in which they, in which they, in which they live, in which they, in which they live, in which they, in which they live, in which they, in which they, in which they, in which they live, in which they, in which they are able to move, in which they are able to move, in which they are able to move, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live in which they are able to"}, {"heading": "4.3 Branch and Bound", "text": "One of the disadvantages of the table-only approach to optimization problems is that it is notoriously difficult to find solutions that are inferior to those found to date. If the cost of solutions does not decrease as you continue to search, you can use some form of resource-intensive search to remedy this shortcoming, for example, in finding a path with non-negative cost sheets. Fuel consumption is another example of non-decreasing costs, since providing more freight will never use less fuel.In our approach, we propose to use the path _ plan method, which applies to a relaxed problem. We loosen the weight limit of ships and assume that an empty ship is ready in each port. With path _ plan, we calculate the optimal way to deliver the remaining cargo. We loosen the weight limit of the container, but we assume that the amount of fuel is bound, and assume that the fuel search is bound to a limit."}, {"heading": "5 Experimental Results", "text": "In fact, most of them are able to survive if they do not play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...) Most of them are not able to play by the rules. (...)"}, {"heading": "6 Conclusions", "text": "In this paper, we proposed using tables as a core technique for solving a real-life Petrobras planning problem (Vaquero et al. 2012). Correct representation of search states and the definition of search space are important for the submission, so we discussed possible limitations of the plans to be examined during the search to enable the submission of a workable approach. We also implemented a form of resource-limited search by adding ideas from industries and boundaries, with an easy view of the submission. We experimentally demonstrated that the proposed method achieves the best results to date in terms of the quality of plans measured by total fuel consumption. In addition, the runtime of the proposed planner is the lowest of all the methods used so far. The planner was implemented in Picat, but similar results can be achieved if other prolog-like languages are used with tables such as B-Prolog. We applied the ideas presented in this paper to other host problems (namely, the Hoffmann domain problems for 2013 and the Hoffmann domain)."}, {"heading": "7 Acknowledgements", "text": "Roman Barta \u0301 k is supported by the Czech Science Foundation as part of the PlanEx project (P103-10-1287)."}], "references": [{"title": "On Modeling Planning Problems: Experience From The Petrobras Challenge", "author": ["R. Bart\u00e1k", "N.F. Zhou"], "venue": "Proceedings of MICAI 2013, Part II,", "citeRegEx": "Bart\u00e1k and Zhou,? \\Q2013\\E", "shortCiteRegEx": "Bart\u00e1k and Zhou", "year": 2013}, {"title": "Integrating time and resources into planning", "author": ["Dvo\u0159\u00e1k F", "R. Bart\u00e1k"], "venue": "Proceedings of ICTAI 2010,", "citeRegEx": "F. and Bart\u00e1k,? \\Q2010\\E", "shortCiteRegEx": "F. and Bart\u00e1k", "year": 2010}, {"title": "BNF description of PDDL 3.0, http://cs-www.cs.yale.edu/ homes/dvm/papers/pddl-bnf.pdf", "author": ["A. Gerevini", "D. Long"], "venue": null, "citeRegEx": "Gerevini and Long,? \\Q2005\\E", "shortCiteRegEx": "Gerevini and Long", "year": 2005}, {"title": "Planner: A language for proving theorems in robots", "author": ["C. Hewitt"], "venue": "In IJCAI,", "citeRegEx": "Hewitt,? \\Q1969\\E", "shortCiteRegEx": "Hewitt", "year": 1969}, {"title": "The SGPlan planning system in IPC-6, http://wah.cse.cuhk. edu.hk/wah/Wah/papers/C168/C168.pdf", "author": ["C. Hsu", "B.W. Wah"], "venue": null, "citeRegEx": "Hsu and Wah,? \\Q2008\\E", "shortCiteRegEx": "Hsu and Wah", "year": 2008}, {"title": "BNF definition of PDDL 3.1, http://www.plg.inf.uc3m.es/ ipc2011-deterministic/OtherContributions?action=AttachFile&do=view&target= kovacs-pddl-3.1-2011.pdf", "author": ["D.L. Kovacs"], "venue": null, "citeRegEx": "Kovacs,? \\Q2011\\E", "shortCiteRegEx": "Kovacs", "year": 2011}, {"title": "Nomystery. https://www.mat.unical.it/aspcomp2013/ Nomystery", "author": ["H. Nakhost", "J. Hoffmann"], "venue": null, "citeRegEx": "Nakhost and Hoffmann,? \\Q2013\\E", "shortCiteRegEx": "Nakhost and Hoffmann", "year": 2013}, {"title": "Three Approaches to Solve the Petrobras Challenge: Exploiting Planning Techniques for Solving Real-Life Logistics Problems", "author": ["D. Toropila", "F. Dvo\u0159\u00e1k", "O. Trunda", "M. Hanes", "R. Bart\u00e1k"], "venue": "Proceedings of ICTAI", "citeRegEx": "Toropila et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Toropila et al\\.", "year": 2012}, {"title": "Planning and scheduling ship operations on petroleum ports and platform", "author": ["T.S. Vaquero", "G. Costa", "F. Tonidandel", "H. Igreja", "Silva J. R", "C. Beck"], "venue": "Proceedings of the Scheduling and Planning Applications Workshop,", "citeRegEx": "Vaquero et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Vaquero et al\\.", "year": 2012}, {"title": "WARPLAN: A system for generating plans", "author": ["D. Warren D. H"], "venue": "Technical Report DCL Memo 76,", "citeRegEx": "H.,? \\Q1974\\E", "shortCiteRegEx": "H.", "year": 1974}, {"title": "Memoing for Logic", "author": ["D.S. Warren"], "venue": "Programs, CACM,", "citeRegEx": "Warren.,? \\Q1992\\E", "shortCiteRegEx": "Warren.", "year": 1992}, {"title": "A Tabled Prolog Program for Solving Sokoban", "author": ["Zhou", "N.-F", "A. Dovier"], "venue": "Proceedings of the 26th Italian Conference on Computational Logic (CILC", "citeRegEx": "Zhou et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Zhou et al\\.", "year": 2011}], "referenceMentions": [{"referenceID": 8, "context": "A complete description of the problem including example data can be found in (Vaquero et al. 2012).", "startOffset": 77, "endOffset": 98}, {"referenceID": 8, "context": "Position of ports and waiting areas in the Petrobras problem (Vaquero et al. 2012).", "startOffset": 61, "endOffset": 82}, {"referenceID": 7, "context": "The first three approaches, namely classical planning, temporal planning, and Monte Carlo Tree Search were introduced in (Toropila et al. 2012), while the forth approach based on finite state automata and macro actions is described in (Bart\u00e1k and Zhou 2013).", "startOffset": 121, "endOffset": 143}, {"referenceID": 0, "context": "2012), while the forth approach based on finite state automata and macro actions is described in (Bart\u00e1k and Zhou 2013).", "startOffset": 97, "endOffset": 119}, {"referenceID": 2, "context": "0 (Gerevini and Long 2005) with numerical fluents describing the restricted resource capacities (fuel tank, cargo capacity).", "startOffset": 2, "endOffset": 26}, {"referenceID": 4, "context": "0 (Hsu and Wah 2008) was used to solve the problem while optimizing fuel consumption.", "startOffset": 2, "endOffset": 20}, {"referenceID": 5, "context": "1 (Kovacs 2011) with fluents and durative actions.", "startOffset": 2, "endOffset": 15}, {"referenceID": 0, "context": "The allowed sequences of macro-actions were described by a finite state automaton (Bart\u00e1k and Zhou 2013) which guides the planner.", "startOffset": 82, "endOffset": 104}, {"referenceID": 3, "context": "Though the first logic programming language PLANNER (Hewitt 1969) was designed as \u201ca language for proving theorems and manipulating models in a robot\u201d and planning has been an important problem domain for Prolog (Warren 1974), there has been little success in applying Prolog to planning.", "startOffset": 52, "endOffset": 65}, {"referenceID": 6, "context": "However, the direct motivation for our research of exploiting tabling in the Petrobras domain was the famous Nomystery domain used in IPC 2011 and ASP 2013 (Nakhost and Hoffmann 2013).", "startOffset": 156, "endOffset": 183}, {"referenceID": 0, "context": "The previous attempt using B-Prolog (Bart\u00e1k and Zhou 2013) was promising but the results regarding total fuel consumption were not as good as those from the MCTS approach.", "startOffset": 36, "endOffset": 58}, {"referenceID": 7, "context": "Splitting the Petrobras problem to planning and scheduling stages has already been applied in the classical planning approach that we described above (Toropila et al. 2012).", "startOffset": 150, "endOffset": 172}, {"referenceID": 8, "context": "For example, the initial state of the Petrobras problem (Vaquero et al. 2012) is represented as follows:", "startOffset": 56, "endOffset": 77}, {"referenceID": 7, "context": "We first experimentally compare our system with the Filuta planner and the MCTS solver from (Toropila et al. 2012) and with the B-Prolog system from (Bart\u00e1k and Zhou 2013).", "startOffset": 92, "endOffset": 114}, {"referenceID": 0, "context": "2012) and with the B-Prolog system from (Bart\u00e1k and Zhou 2013).", "startOffset": 40, "endOffset": 62}, {"referenceID": 7, "context": "We re-use here the results reported in (Toropila et al. 2012), where the experiments were run on the Ubuntu Linux machine equipped with Intel Core i7-2600 CPU @ 3.", "startOffset": 39, "endOffset": 61}, {"referenceID": 8, "context": "The results for the Petrobras problem (Vaquero et al. 2012).", "startOffset": 38, "endOffset": 59}, {"referenceID": 0, "context": "implementation we re-use the results reported in (Bart\u00e1k and Zhou 2013), where the experiments run on the MacOS X 10.", "startOffset": 49, "endOffset": 71}, {"referenceID": 8, "context": "The original specification of the Petrobras problem (Vaquero et al. 2012) contains just one set of real-life motivated data.", "startOffset": 52, "endOffset": 73}, {"referenceID": 7, "context": "To understand better the behavior of the planners, we re-used the benchmark problems suggested in (Toropila et al. 2012).", "startOffset": 98, "endOffset": 120}, {"referenceID": 7, "context": "Two scenarios were proposed in (Toropila et al. 2012), one with 3 vessels (Group A) and one with 10 vessels (Group B).", "startOffset": 31, "endOffset": 53}, {"referenceID": 8, "context": "In this paper we proposed to use tabling as the core technique for solving a real-life motivated Petrobras planning problem (Vaquero et al. 2012).", "startOffset": 124, "endOffset": 145}, {"referenceID": 6, "context": "We applied the ideas presented in this paper to other planning problems namely the Nomystery domain (Nakhost and Hoffmann 2013) and Sokoban (Zhou and Dovier 2011).", "startOffset": 100, "endOffset": 127}, {"referenceID": 0, "context": "hampers performance as the B-Prolog planner showed (Bart\u00e1k and Zhou 2013) and so the open question is how to handle such multi-criteria optimization.", "startOffset": 51, "endOffset": 73}], "year": 2014, "abstractText": "Tabling has been used for some time to improve efficiency of Prolog programs by memorizing answered queries. The same idea can be naturally used to memorize visited states during search for planning. In this paper we present a planner developed in the Picat language to solve the Petrobras planning problem. Picat is a novel Prolog-like language that provides pattern matching, deterministic and non-deterministic rules, and tabling as its core modelling and solving features. We demonstrate these capabilities using the Petrobras problem, where the goal is to plan transport of cargo items from ports to platforms using vessels with limited capacity. Monte Carlo Tree Search has been so far the best technique to tackle this problem and we will show that by using tabling we can achieve much better runtime efficiency and better plan quality.", "creator": "LaTeX with hyperref package"}}}