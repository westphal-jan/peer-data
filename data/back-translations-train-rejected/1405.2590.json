{"id": "1405.2590", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-May-2014", "title": "Efficient Computation of the Well-Founded Semantics over Big Data", "abstract": "Data originating from the Web, sensor readings and social media result in increasingly huge datasets. The so called Big Data comes with new scientific and technological challenges while creating new opportunities, hence the increasing interest in academia and industry. Traditionally, logic programming has focused on complex knowledge structures/programs, so the question arises whether and how it can work in the face of Big Data. In this paper, we examine how the well-founded semantics can process huge amounts of data through mass parallelization. More specifically, we propose and evaluate a parallel approach using the MapReduce framework. Our experimental results indicate that our approach is scalable and that well-founded semantics can be applied to billions of facts. To the best of our knowledge, this is the first work that addresses large scale nonmonotonic reasoning without the restriction of stratification for predicates of arbitrary arity. To appear in Theory and Practice of Logic Programming (TPLP).", "histories": [["v1", "Sun, 11 May 2014 21:57:50 GMT  (77kb,D)", "http://arxiv.org/abs/1405.2590v1", "16 pages, 4 figures, ICLP 2014, 30th International Conference on Logic Programming July 19-22, Vienna, Austria"]], "COMMENTS": "16 pages, 4 figures, ICLP 2014, 30th International Conference on Logic Programming July 19-22, Vienna, Austria", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ilias tachmazidis", "grigoris antoniou", "wolfgang faber"], "accepted": false, "id": "1405.2590"}, "pdf": {"name": "1405.2590.pdf", "metadata": {"source": "CRF", "title": "Efficient Computation of the Well-Founded Semantics over Big Data", "authors": ["Ilias Tachmazidis", "Grigoris Antoniou", "Wolfgang Faber"], "emails": ["ilias.tachmazidis@hud.ac.uk)", "g.antoniou@hud.ac.uk)", "w.faber@hud.ac.uk)"], "sections": [{"heading": null, "text": "Key concepts: Sound semantics, Big Data, MapReduce Framework"}, {"heading": "1 Introduction", "text": "This year, the time has come for us to be able to live in a country where people are able to move, and where people are able to unfold in order to unfold."}, {"heading": "2 Preliminaries", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 MapReduce Framework", "text": "< & apReduce is a framework for processing huge data sets in parallel (Dean and Ghemawat > > Mapello (2004). Processing takes place in a map and a reduction phase. For each phase, a series of custom mapping and reduction functions are performed in parallel. The former performs a custom operation on any part of the data entry and partitioning, while the latter performs a custom operation on each partition.MapReduce is designed to work via key / value pairs. Specifically, each map function receives a key / value pair and sends out a series of key / value pairs. Subsequently, all key / value pairs generated during the map phase are grouped according to their keys and passed to the reduction phase.During the reduction phase, a reduction function is called for each unique key, processing the corresponding value pair."}, {"heading": "2.2 Well-Founded Semantics", "text": "In this case, it is so that it is a pure formation that is able to outdo itself. (...) In this case, it is so that it is able to outdo itself. (...) It is as if it is able to outdo itself. (...) It is as if it is able to outdo itself. (...) It is as if it is able to outdo itself. (...) It is as if it is able to outdo itself. (...) \"(...)\" (...) (...) (...) \"(...)\" (... (...) \"(... (...)\" (... (...) \"(...)\" (...) (...) (...) (...) (...) (...) (...) (...) (...) () (...) (...) () (...) () (...) () (...) (...) () () (...) (...) () () (...) () (...) () (...) () (...) () (...) () (...) () (...) () (...) (...) () () (...) () (...) () () (...) () () () ().) (...) () (...) () ()."}, {"heading": "2.3 Alternating Fixpoint Procedure", "text": "In this section, we provide the definition of the alternating fixed point method as defined in (Brass et al. (2001). (2001) Definition 2.4 (Brass et al. (2001) Definition 2.4 (Brass et al.) For a set of S words, we define the following objectives: pos (S): = {A = S | A is a positive letter (S), neg (S), neg (S), neg (S), neg (S), neg (S), neg (S), neg (S), neg (S), neg (S), neg (S), neg (S), neg (S), neg (S). Definition 2.5 (KP and J is defined as follows: TP (I): = {A | B) with pos (B) I and neg (B) J = / 0}.If P is the direct sequences of I w.r.t. P and J is defined as follows: TP (I) (2001)."}, {"heading": "3.1 Positive goal calculation", "text": "Consider the following program: p (X, Y) \u2190 a (X, Z) > b (Z, Y) > pairs (Z, Y), not c (X, Z), not d (Z, Y).whereI = {a (1,2), a (1,3), b (2,4), b (3,5)} J = {c (1,2), d (2,3)} A single connection (Cluet and Moerkotte (1994), calculating the positive target from (X, Z, Y), can be done as described below. The pseudo code for the card and reduction functions is provided in scope A. Note that we only use letters from I. The card function becomes pairs of the form < Z, (a, X) > for predicates a and < Z, (b, Y) > for predicates b, namely the following pairs: < 2, (a, 1) > < < < < < <"}, {"heading": "3.2 Final goal calculation", "text": "Consider the program mentioned at the beginning of Section 3.1. By calculating the positive target pairs ab (X, Z, Y), we obtain the following knowledge: ab (1,2,4) ab (1,3,5) To calculate the final target (p (X, Y), we need to perform an anti-join (cluet and carrot (1994) between ab (X, Z, Y) and any negative subtarget (c (X, Z) and d (Z, Y). Note that to perform an anti-join join, we only use the previously calculated positive target (ab (X, Z, Y) and the literals of J.We start with an anti-join between ab (X, Z, Y) and c (X, Z) using their common arguments (say, abc (X, Y), which contains all the results of ltab (X, Z, Y), while ltab (ltab) cannot be found in c (X, Z)."}, {"heading": "4 Computing the Well-Founded Semantics", "text": "In this section we describe an optimized implementation for the calculation of sound semantics. A naive implementation is considered as one according to definition 2.6 and ignores the monotonicity properties of sound semantics (see Lemma 2.1)."}, {"heading": "4.1 Optimized implementation", "text": "A naive implementation procedure would be unnecessary to determine the overall size () (): J \u2212 J \u2212 1 \u2212 J (1): 1 \u2212 J (1).A (1).A (1).A (1).A (1).A (1).A (1).A (1).A (1).A (1).A (1).A (1).A).A (1).A (1).A (1).A (1).A (1).A (1).A).A (1).A (1).A).A (1).A).A (1).A).A (1).A) (1) (1).A) (1) (1) (1) (1) (1).A) (1) (1) (1).A) (1) (1) (1) (1).A) (1) (1) (1).A) (1) (1) (1) (1).A) (1) (1) (1).A) (1) (1) (1) (1).A) (1) (1).A) (1) (1) (1) (1).A) (1) (1).A) (1) (1) (1) (1).A) (1) (1) (1) (1).A) (1) (1).A) (1) (1) (1) (1) (1).A) (1) (1).A) (1) (1) (1).A) (1 (1).A) (1) (1 (1).A) (1 (1).A) (1 (1) (1).A) (1 (1).A) (1 (1 (1).A) (1).A) (1 (1 (1) (1 (1).A) (1) (1 (1).A) (1 (1).A) (1 (1).A) (1 (1).A) (1 (1 (1 (1 (1).A) (1"}, {"heading": "4.2 Computational Impact of Safety", "text": "In this essay, we follow the alternating fixed-point procedure on secure WFS programs in order to avoid complete materialization or argumentation on the Herbrand basis for each predicate. Storing or conducting arguments on the entire Herbrand base can easily become a prohibition even for small data sets and therefore not applicable to large datasets. Apart from the semantic motivation of the security requirement outlined in Section 2.2, it also has considerable implications for the calculation method used in this essay. Let us remember that security requires that each variable must occur in a rule (also) in a positive subtarget. If this safety condition is not met, an Anti-Join is no longer a single reference between the positive target and a negative sub-target, but a comparison between a subset of the Herbrand base and a given set of words J. Efficient implementation for such a calculation is not yet defined and problematic, as shown in the following program, Y (the following program contains a Y), a rule (the following X, a final brand).p."}, {"heading": "5 Experimental results", "text": "In (Liang et al. (2009), the authors evaluate the performance of multiple controllers on data that fit into the main memory. However, our approach is aimed at data that exceeds the capacity of the main memory. Therefore, we follow the proposed methodology in (Liang et al. (2009) while adjusting several parameters. In (Liang et al. (2009))), loading and follow-up time are separated, focusing on follow-up time. However, such a separation is difficult for our approach, as loading and follow-up time can be overlapped. We evaluate our approach taking into account the standard negation, applying the win-not-win test and conducting large (anti-) connection tests with data recursion and standard negation, whereby we conduct a new test called transitive closure with negation. Other metrics in (Liang et al. (2009), such as indexing, are not supported by the mapping framework, while all analyses and optimizations have been carried out."}, {"heading": "6 Conclusion and Future Work", "text": "In this paper, we examined the feasibility of calculating well-founded semantics while allowing recursion by negation over large amounts of data. In particular, we proposed a parallel approach based on the MapReduce framework, conducted experiments for different rule sets and data quantities, and demonstrated the performance acceleration resulting from optimized implementation compared to naive implementation. Our experimental results suggest that this method can be applied to billions of facts. In future work, we plan to investigate more complex methods of knowledge representation, including Answer Set Programming (Gelfond (2008) and RDF / S Ontology Evolution (Konstantinidis et al. (2008)) and Repair (Roussakis et al. (2011). We believe that these complex forms of reasoning do not fall into the category of \"embarrassingly parallel\" problems for which MapReduce is being developed, and therefore a more complex computational model is needed."}, {"heading": "Appendix A MapReduce algorithms", "text": "The appendix contains the algorithms used in the running examples."}], "references": [{"title": "Foundations of Databases", "author": ["S. ABITEBOUL", "R. HULL", "V. VIANU"], "venue": "Addison-Wesley. AFRATI, F. N. AND ULLMAN, J. D. 2010. Optimizing joins in a map-reduce environment. In", "citeRegEx": "ABITEBOUL et al\\.,? 1995", "shortCiteRegEx": "ABITEBOUL et al\\.", "year": 1995}, {"title": "Transformation-based bottom-up computation of the well-founded model", "author": ["S. BRASS", "J. DIX", "B. FREITAG", "U. ZUKOWSKI"], "venue": "Theory and Practice of Logic Programming 1, 5, 497\u2013538.", "citeRegEx": "BRASS et al\\.,? 2001", "shortCiteRegEx": "BRASS et al\\.", "year": 2001}, {"title": "Classification and optimization of nested queries in object bases", "author": ["S. CLUET", "G. MOERKOTTE"], "venue": "Tech. rep.", "citeRegEx": "CLUET and MOERKOTTE,? 1994", "shortCiteRegEx": "CLUET and MOERKOTTE", "year": 1994}, {"title": "MapReduce: simplified data processing on large clusters", "author": ["J. DEAN", "S. GHEMAWAT"], "venue": "Proceedings of the 6th conference on Symposium on Opearting Systems Design & Implementation - Volume 6. USENIX Association, Berkeley, CA, USA, 10\u201310.", "citeRegEx": "DEAN and GHEMAWAT,? 2004", "shortCiteRegEx": "DEAN and GHEMAWAT", "year": 2004}, {"title": "Towards LarKC: A Platform for Web-Scale Reasoning", "author": ["D. FENSEL", "F. VAN HARMELEN", "B. ANDERSSON", "P. BRENNAN", "H. CUNNINGHAM", "E.D. VALLE", "F. FISCHER", "Z. HUANG", "A. KIRYAKOV", "T.K. IL LEE", "L. SCHOOLER", "V. TRESP", "S. WESNER", "M. WITBROCK", "N. ZHONG"], "venue": "ICSC. 524\u2013529.", "citeRegEx": "FENSEL et al\\.,? 2008", "shortCiteRegEx": "FENSEL et al\\.", "year": 2008}, {"title": "Clusterbased asp solving with claspar", "author": ["M. GEBSER", "R. KAMINSKI", "B. KAUFMANN", "T. SCHAUB", "B. SCHNOR"], "venue": "Logic Programming and Nonmonotonic Reasoning - 11th International Conference, LPNMR 2011, Vancouver, Canada, May 16-19, 2011. Proceedings, J. P. Delgrande and W. Faber, Eds. Lecture Notes in Computer Science, vol. 6645. 364\u2013369.", "citeRegEx": "GEBSER et al\\.,? 2011", "shortCiteRegEx": "GEBSER et al\\.", "year": 2011}, {"title": "The well-founded semantics for general logic programs", "author": ["A.V. GELDER", "K.A. ROSS", "J.S. SCHLIPF"], "venue": "J. ACM 38, 3, 620\u2013650.", "citeRegEx": "GELDER et al\\.,? 1991", "shortCiteRegEx": "GELDER et al\\.", "year": 1991}, {"title": "Chapter 7 answer sets", "author": ["M. GELFOND"], "venue": "Handbook of Knowledge Representation, V. L. F. van Harmelen and B. Porter, Eds. Foundations of Artificial Intelligence, vol. 3. Elsevier, 285\u2013316.", "citeRegEx": "GELFOND,? 2008", "shortCiteRegEx": "GELFOND", "year": 2008}, {"title": "High-performance computing applied to semantic databases", "author": ["E.L. GOODMAN", "E. JIMENEZ", "D. MIZELL", "S. AL-SAFFAR", "B. ADOLF", "D.J. HAGLIN"], "venue": "ESWC (2), G. Antoniou, M. Grobelnik, E. P. B. Simperl, B. Parsia, D. Plexousakis, P. D. Leenheer, and J. Z. Pan, Eds. Lecture Notes in Computer Science, vol. 6644. Springer, 31\u201345.", "citeRegEx": "GOODMAN et al\\.,? 2011", "shortCiteRegEx": "GOODMAN et al\\.", "year": 2011}, {"title": "A Formal Approach for RDF/S Ontology Evolution", "author": ["G. KONSTANTINIDIS", "G. FLOURIS", "G. ANTONIOU", "V. CHRISTOPHIDES"], "venue": "ECAI, M. Ghallab, C. D. Spyropoulos, N. Fakotakis, and N. M. Avouris, Eds. Frontiers in Artificial Intelligence and Applications, vol. 178. IOS Press, 70\u201374.", "citeRegEx": "KONSTANTINIDIS et al\\.,? 2008", "shortCiteRegEx": "KONSTANTINIDIS et al\\.", "year": 2008}, {"title": "Mind the data skew: distributed inferencing by speeddating in elastic regions", "author": ["S. KOTOULAS", "E. OREN", "F. VAN HARMELEN"], "venue": "WWW, M. Rappa, P. Jones, J. Freire, and S. Chakrabarti, Eds. ACM, 531\u2013540.", "citeRegEx": "KOTOULAS et al\\.,? 2010", "shortCiteRegEx": "KOTOULAS et al\\.", "year": 2010}, {"title": "Openrulebench: an analysis of the performance of rule engines", "author": ["S. LIANG", "P. FODOR", "H. WAN", "M. KIFER"], "venue": "Proceedings of the 18th international conference on World wide web. WWW \u201909. ACM, New York, NY, USA, 601\u2013610.", "citeRegEx": "LIANG et al\\.,? 2009", "shortCiteRegEx": "LIANG et al\\.", "year": 2009}, {"title": "Large scale fuzzy pD* reasoning using mapreduce", "author": ["LIU C.", "QI G.", "WANG H.", "YU", "Y."], "venue": "Proceedings of the 10th international conference on The semantic web - Volume Part I. ISWC\u201911. Springer-Verlag, Berlin, Heidelberg, 405\u2013420.", "citeRegEx": "C. et al\\.,? 2011", "shortCiteRegEx": "C. et al\\.", "year": 2011}, {"title": "Reasoning with Large Scale Ontologies in fuzzy pD* Using MapReduce", "author": ["LIU C.", "QI G.", "WANG H.", "YU", "Y."], "venue": "IEEE Comp. Int. Mag. 7, 2, 54\u201366.", "citeRegEx": "C. et al\\.,? 2012", "shortCiteRegEx": "C. et al\\.", "year": 2012}, {"title": "A MapReduce Algorithm for EL+", "author": ["R. MUTHARAJU", "F. MAIER", "P. HITZLER"], "venue": "Description Logics.", "citeRegEx": "MUTHARAJU et al\\.,? 2010", "shortCiteRegEx": "MUTHARAJU et al\\.", "year": 2010}, {"title": "Logic for improving integrity checking in relational data bases", "author": ["NICOLAS", "J.-M."], "venue": "Acta Informatica 18, 227\u2013253.", "citeRegEx": "NICOLAS and J..M.,? 1982", "shortCiteRegEx": "NICOLAS and J..M.", "year": 1982}, {"title": "Marvin: Distributed reasoning over large-scale Semantic Web data", "author": ["E. OREN", "S. KOTOULAS", "G. ANADIOTIS", "R. SIEBES", "A. TEN TEIJE", "F. VAN HARMELEN"], "venue": "J. Web Sem. 7, 4, 305\u2013316.", "citeRegEx": "OREN et al\\.,? 2009", "shortCiteRegEx": "OREN et al\\.", "year": 2009}, {"title": "Parallel instantiation of asp programs: techniques and experiments", "author": ["S. PERRI", "F. RICCA", "M. SIRIANNI"], "venue": "Theory and Practice of Logic Programming 13, 2, 253\u2013278.", "citeRegEx": "PERRI et al\\.,? 2013", "shortCiteRegEx": "PERRI et al\\.", "year": 2013}, {"title": "Declarative Repairing Policies for Curated KBs", "author": ["Y. ROUSSAKIS", "G. FLOURIS", "V. CHRISTOPHIDES"], "venue": "HDMS.", "citeRegEx": "ROUSSAKIS et al\\.,? 2011", "shortCiteRegEx": "ROUSSAKIS et al\\.", "year": 2011}, {"title": "Parallel Inferencing for OWL Knowledge Bases", "author": ["R. SOMA", "V.K. PRASANNA"], "venue": "ICPP. IEEE Computer Society, 75\u201382.", "citeRegEx": "SOMA and PRASANNA,? 2008", "shortCiteRegEx": "SOMA and PRASANNA", "year": 2008}, {"title": "Computing the Stratified Semantics of Logic Programs over Big Data through Mass Parallelization", "author": ["I. TACHMAZIDIS", "G. ANTONIOU"], "venue": "RuleML, L. Morgenstern, P. S. Stefaneas, F. L\u00e9vy, A. Wyner, and A. Paschke, Eds. Lecture Notes in Computer Science, vol. 8035. Springer, 188\u2013202.", "citeRegEx": "TACHMAZIDIS and ANTONIOU,? 2013", "shortCiteRegEx": "TACHMAZIDIS and ANTONIOU", "year": 2013}, {"title": "Towards Parallel Nonmonotonic Reasoning with Billions of Facts", "author": ["I. TACHMAZIDIS", "G. ANTONIOU", "G. FLOURIS", "S. KOTOULAS"], "venue": "KR, G. Brewka, T. Eiter, and S. A. McIlraith, Eds. AAAI Press.", "citeRegEx": "TACHMAZIDIS et al\\.,? 2012", "shortCiteRegEx": "TACHMAZIDIS et al\\.", "year": 2012}, {"title": "Large-scale Parallel Stratified Defeasible Reasoning", "author": ["I. TACHMAZIDIS", "G. ANTONIOU", "G. FLOURIS", "S. KOTOULAS", "L. MCCLUSKEY"], "venue": "ECAI, L. D. Raedt, C. Bessi\u00e8re, D. Dubois, P. Doherty, P. Frasconi, F. Heintz, and P. J. F. Lucas, Eds. Frontiers in Artificial Intelligence and Applications, vol. 242. IOS Press, 738\u2013743.", "citeRegEx": "TACHMAZIDIS et al\\.,? 2012", "shortCiteRegEx": "TACHMAZIDIS et al\\.", "year": 2012}, {"title": "Webpie: A Web-scale parallel inference engine using MapReduce", "author": ["J. URBANI", "S. KOTOULAS", "J. MASSEN", "F. VAN HARMELEN", "BAL", "H."], "venue": "Web Semantics: Science, Services and Agents on the World Wide Web 10, 0.", "citeRegEx": "URBANI et al\\.,? 2012", "shortCiteRegEx": "URBANI et al\\.", "year": 2012}], "referenceMentions": [{"referenceID": 4, "context": "by the LarKC project (Fensel et al. (2008)).", "startOffset": 22, "endOffset": 43}, {"referenceID": 4, "context": "by the LarKC project (Fensel et al. (2008)). As discussed in (Fensel et al. (2008)), reasoning on the large scale can be achieved through parallelization by distributing the computation among nodes.", "startOffset": 22, "endOffset": 83}, {"referenceID": 4, "context": "by the LarKC project (Fensel et al. (2008)). As discussed in (Fensel et al. (2008)), reasoning on the large scale can be achieved through parallelization by distributing the computation among nodes. There are mainly two proposed approaches in the literature, namely rule partitioning and data partitioning (Soma and Prasanna (2008)).", "startOffset": 22, "endOffset": 332}, {"referenceID": 12, "context": "In particular, MARVIN (Oren et al. (2009)), follows the divide-conquer-swap strategy in which triples are being swapped between nodes in the cluster in order to achieve balanced workload.", "startOffset": 23, "endOffset": 42}, {"referenceID": 8, "context": "MARVIN implements the SpeedDate method, presented in (Kotoulas et al. (2010)), where authors pointed out and addressed the scalability challenge posed by the highly uneven distribution of Semantic Web data.", "startOffset": 54, "endOffset": 77}, {"referenceID": 8, "context": "MARVIN implements the SpeedDate method, presented in (Kotoulas et al. (2010)), where authors pointed out and addressed the scalability challenge posed by the highly uneven distribution of Semantic Web data. WebPIE (Urbani et al. (2012)) implements forward reasoning under RDFS and OWL ter Horst semantics over the MapReduce framework (Dean and Ghemawat (2004)) scaling up to 100 billion triples.", "startOffset": 54, "endOffset": 236}, {"referenceID": 3, "context": "(2012)) implements forward reasoning under RDFS and OWL ter Horst semantics over the MapReduce framework (Dean and Ghemawat (2004)) scaling up to 100 billion triples.", "startOffset": 106, "endOffset": 131}, {"referenceID": 3, "context": "(2012)) implements forward reasoning under RDFS and OWL ter Horst semantics over the MapReduce framework (Dean and Ghemawat (2004)) scaling up to 100 billion triples. In (Goodman et al. (2011)) authors present RDFS inference scaling up to 512 processors with the ability to process, entirely in-memory, 20 billion triples.", "startOffset": 106, "endOffset": 193}, {"referenceID": 3, "context": "(2012)) implements forward reasoning under RDFS and OWL ter Horst semantics over the MapReduce framework (Dean and Ghemawat (2004)) scaling up to 100 billion triples. In (Goodman et al. (2011)) authors present RDFS inference scaling up to 512 processors with the ability to process, entirely in-memory, 20 billion triples. FuzzyPD (Liu et al. (2011, 2012)) is a MapReduce based prototype system allowing fuzzy reasoning in OWL pD\u2217 with scalability of up to 128 process units and over 1 billion triples. Description logic in the form of E L+ have been studied in (Mutharaju et al. (2010)).", "startOffset": 106, "endOffset": 587}, {"referenceID": 3, "context": "(2012)) implements forward reasoning under RDFS and OWL ter Horst semantics over the MapReduce framework (Dean and Ghemawat (2004)) scaling up to 100 billion triples. In (Goodman et al. (2011)) authors present RDFS inference scaling up to 512 processors with the ability to process, entirely in-memory, 20 billion triples. FuzzyPD (Liu et al. (2011, 2012)) is a MapReduce based prototype system allowing fuzzy reasoning in OWL pD\u2217 with scalability of up to 128 process units and over 1 billion triples. Description logic in the form of E L+ have been studied in (Mutharaju et al. (2010)). The authors parallelize an existing algorithm for E L+ classification by converting it into MapReduce algorithms, while experimental evaluation was deferred to future work. (Tachmazidis et al. (2012)) deals with defeasible logic for unary predicates scaling up to billions of facts, while authors extend their approach in (Tachmazidis et al.", "startOffset": 106, "endOffset": 789}, {"referenceID": 3, "context": "(2012)) implements forward reasoning under RDFS and OWL ter Horst semantics over the MapReduce framework (Dean and Ghemawat (2004)) scaling up to 100 billion triples. In (Goodman et al. (2011)) authors present RDFS inference scaling up to 512 processors with the ability to process, entirely in-memory, 20 billion triples. FuzzyPD (Liu et al. (2011, 2012)) is a MapReduce based prototype system allowing fuzzy reasoning in OWL pD\u2217 with scalability of up to 128 process units and over 1 billion triples. Description logic in the form of E L+ have been studied in (Mutharaju et al. (2010)). The authors parallelize an existing algorithm for E L+ classification by converting it into MapReduce algorithms, while experimental evaluation was deferred to future work. (Tachmazidis et al. (2012)) deals with defeasible logic for unary predicates scaling up to billions of facts, while authors extend their approach in (Tachmazidis et al. (2012)) for predicates of arbitrary arity, under the assumption of stratification, scaling up to millions of facts.", "startOffset": 106, "endOffset": 938}, {"referenceID": 3, "context": "(2012)) implements forward reasoning under RDFS and OWL ter Horst semantics over the MapReduce framework (Dean and Ghemawat (2004)) scaling up to 100 billion triples. In (Goodman et al. (2011)) authors present RDFS inference scaling up to 512 processors with the ability to process, entirely in-memory, 20 billion triples. FuzzyPD (Liu et al. (2011, 2012)) is a MapReduce based prototype system allowing fuzzy reasoning in OWL pD\u2217 with scalability of up to 128 process units and over 1 billion triples. Description logic in the form of E L+ have been studied in (Mutharaju et al. (2010)). The authors parallelize an existing algorithm for E L+ classification by converting it into MapReduce algorithms, while experimental evaluation was deferred to future work. (Tachmazidis et al. (2012)) deals with defeasible logic for unary predicates scaling up to billions of facts, while authors extend their approach in (Tachmazidis et al. (2012)) for predicates of arbitrary arity, under the assumption of stratification, scaling up to millions of facts. Finally, the computation of stratified semantics of logic programming that can be applied to billions of facts is reported in (Tachmazidis and Antoniou (2013)).", "startOffset": 106, "endOffset": 1206}, {"referenceID": 3, "context": "(2012)) implements forward reasoning under RDFS and OWL ter Horst semantics over the MapReduce framework (Dean and Ghemawat (2004)) scaling up to 100 billion triples. In (Goodman et al. (2011)) authors present RDFS inference scaling up to 512 processors with the ability to process, entirely in-memory, 20 billion triples. FuzzyPD (Liu et al. (2011, 2012)) is a MapReduce based prototype system allowing fuzzy reasoning in OWL pD\u2217 with scalability of up to 128 process units and over 1 billion triples. Description logic in the form of E L+ have been studied in (Mutharaju et al. (2010)). The authors parallelize an existing algorithm for E L+ classification by converting it into MapReduce algorithms, while experimental evaluation was deferred to future work. (Tachmazidis et al. (2012)) deals with defeasible logic for unary predicates scaling up to billions of facts, while authors extend their approach in (Tachmazidis et al. (2012)) for predicates of arbitrary arity, under the assumption of stratification, scaling up to millions of facts. Finally, the computation of stratified semantics of logic programming that can be applied to billions of facts is reported in (Tachmazidis and Antoniou (2013)). In this paper, we propose a parallel approach for the well-founded semantics computation using the MapReduce framework. Specifically, we adapt and incorporate the computation of joins and anti-joins, initially described in (Tachmazidis and Antoniou (2013)).", "startOffset": 106, "endOffset": 1464}, {"referenceID": 3, "context": "MapReduce is a framework for parallel processing over huge datasets (Dean and Ghemawat (2004)).", "startOffset": 69, "endOffset": 94}, {"referenceID": 6, "context": "In this section we provide the definition of the well-founded semantics (WFS) as it was defined in (Gelder et al. (1991)).", "startOffset": 100, "endOffset": 121}, {"referenceID": 6, "context": "1 (Gelder et al. (1991)) A general logic program is a finite set of general rules, which may have both positive and negative subgoals.", "startOffset": 3, "endOffset": 24}, {"referenceID": 6, "context": "2 (Gelder et al. (1991)) Given a program P, a partial interpretation I is a consistent set of literals whose atoms are in the Herbrand base of P.", "startOffset": 3, "endOffset": 24}, {"referenceID": 6, "context": "3 (Gelder et al. (1991)) Let a program P, its associated Herbrand base H and a partial interpretation I be given.", "startOffset": 3, "endOffset": 24}, {"referenceID": 6, "context": "1 (Gelder et al. (1991)) The data complexity of the well-founded semantics for function-free programs is polynomial time.", "startOffset": 3, "endOffset": 24}, {"referenceID": 0, "context": "This safety criterion is an adaptation of range restriction (Nicolas (1982)), which guarantees the important concept of domain independence, originally studied in deductive databases (see for example (Abiteboul et al. (1995))).", "startOffset": 201, "endOffset": 225}, {"referenceID": 1, "context": "In this section, we provide the definition of the alternating fixpoint procedure as it was defined in (Brass et al. (2001)).", "startOffset": 103, "endOffset": 123}, {"referenceID": 1, "context": "4 (Brass et al. (2001)) For a set S of literals we define the following sets:", "startOffset": 3, "endOffset": 23}, {"referenceID": 1, "context": "5 (Brass et al. (2001)) (Extended Immediate Consequence Operator) Let P be a normal logic program.", "startOffset": 3, "endOffset": 23}, {"referenceID": 1, "context": "6 (Brass et al. (2001)) (Alternating Fixpoint Procedure) Let P be a normal logic program.", "startOffset": 3, "endOffset": 23}, {"referenceID": 6, "context": "We rely on the definition of the well-founded partial model Wp of P as given in (Gelder et al. (1991)).", "startOffset": 81, "endOffset": 102}, {"referenceID": 1, "context": "2 (Brass et al. (2001)) (Correctness of AFP) Let the sequence (Ki,Ui)i\u22650 be defined as above.", "startOffset": 3, "endOffset": 23}, {"referenceID": 1, "context": "1 (Brass et al. (2001)) (Monotonicity) Let the sequence (Ki,Ui)i\u22650 be defined as above.", "startOffset": 3, "endOffset": 23}, {"referenceID": 2, "context": "A single join (Cluet and Moerkotte (1994)), calculating the positive goal ab(X,Z,Y), can be performed as described below.", "startOffset": 15, "endOffset": 42}, {"referenceID": 2, "context": "In order to calculate the final goal (p(X,Y)) we need to perform an anti-join (Cluet and Moerkotte (1994)) between ab(X,Z,Y) and each negative subgoal (c(X,Z) and d(Z,Y)).", "startOffset": 79, "endOffset": 106}, {"referenceID": 11, "context": "In (Liang et al. (2009)), the authors evaluate the performance of several rule engines on data that fit in main memory.", "startOffset": 4, "endOffset": 24}, {"referenceID": 11, "context": "In (Liang et al. (2009)), the authors evaluate the performance of several rule engines on data that fit in main memory. However, our approach is targeted on data that exceed the capacity of the main memory. Thus, we follow the proposed methodology in (Liang et al. (2009)) while adjusting several parameters.", "startOffset": 4, "endOffset": 272}, {"referenceID": 11, "context": "In (Liang et al. (2009)), the authors evaluate the performance of several rule engines on data that fit in main memory. However, our approach is targeted on data that exceed the capacity of the main memory. Thus, we follow the proposed methodology in (Liang et al. (2009)) while adjusting several parameters. In (Liang et al. (2009)) loading and inference time are separated, focusing on inference time.", "startOffset": 4, "endOffset": 333}, {"referenceID": 11, "context": "In (Liang et al. (2009)), the authors evaluate the performance of several rule engines on data that fit in main memory. However, our approach is targeted on data that exceed the capacity of the main memory. Thus, we follow the proposed methodology in (Liang et al. (2009)) while adjusting several parameters. In (Liang et al. (2009)) loading and inference time are separated, focusing on inference time. However, for our approach such a separation is difficult as loading and inference time may overlap. We evaluate our approach considering default negation by applying the win-not-win test and merge large (anti-)join tests with datalog recursion and default negation, creating a new test called transitive closure with negation. Other metrics in (Liang et al. (2009)), such as indexing, are not supported by the MapReduce framework, while all optimizations and cost-based analysis were performed manually.", "startOffset": 4, "endOffset": 769}, {"referenceID": 11, "context": "In (Liang et al. (2009)), the authors evaluate the performance of several rule engines on data that fit in main memory. However, our approach is targeted on data that exceed the capacity of the main memory. Thus, we follow the proposed methodology in (Liang et al. (2009)) while adjusting several parameters. In (Liang et al. (2009)) loading and inference time are separated, focusing on inference time. However, for our approach such a separation is difficult as loading and inference time may overlap. We evaluate our approach considering default negation by applying the win-not-win test and merge large (anti-)join tests with datalog recursion and default negation, creating a new test called transitive closure with negation. Other metrics in (Liang et al. (2009)), such as indexing, are not supported by the MapReduce framework, while all optimizations and cost-based analysis were performed manually. Platform. We have implemented our experiments using the Hadoop MapReduce framework1, version 1.2.1. We have performed experiments on a cluster of the University of Huddersfield. The cluster consists of 8 nodes (one node was allocated as \u201cmaster\u201d node), using a Gigabit Ethernet interconnect. Each node was equipped with 4 cores running at 2.5GHz, 8GB RAM and 250GB of storage space. Evaluation tests. The win-not-win test (Liang et al. (2009)) consists of a single rule, where move is the base relation:", "startOffset": 4, "endOffset": 1351}, {"referenceID": 6, "context": "In future work, we plan to study more complex knowledge representation methods including Answer-Set programming (Gelfond (2008)), and RDF/S ontology evolution (Konstantinidis et al.", "startOffset": 113, "endOffset": 128}, {"referenceID": 6, "context": "In future work, we plan to study more complex knowledge representation methods including Answer-Set programming (Gelfond (2008)), and RDF/S ontology evolution (Konstantinidis et al. (2008)) and repair (Roussakis et al.", "startOffset": 113, "endOffset": 189}, {"referenceID": 6, "context": "In future work, we plan to study more complex knowledge representation methods including Answer-Set programming (Gelfond (2008)), and RDF/S ontology evolution (Konstantinidis et al. (2008)) and repair (Roussakis et al. (2011)).", "startOffset": 113, "endOffset": 226}, {"referenceID": 5, "context": "In fact, in Answer-Set programming, the system claspar (Gebser et al. (2011)) uses MPI, but it needs a preliminary grounding step, as it accepts only ground or propositional programs.", "startOffset": 56, "endOffset": 77}, {"referenceID": 5, "context": "In fact, in Answer-Set programming, the system claspar (Gebser et al. (2011)) uses MPI, but it needs a preliminary grounding step, as it accepts only ground or propositional programs. (Perri et al. (2013)) uses POSIX threads on shared memory for parallelized grounding.", "startOffset": 56, "endOffset": 205}], "year": 2014, "abstractText": "Data originating from the Web, sensor readings and social media result in increasingly huge datasets. The so called Big Data comes with new scientific and technological challenges while creating new opportunities, hence the increasing interest in academia and industry. Traditionally, logic programming has focused on complex knowledge structures/programs, so the question arises whether and how it can work in the face of Big Data. In this paper, we examine how the well-founded semantics can process huge amounts of data through mass parallelization. More specifically, we propose and evaluate a parallel approach using the MapReduce framework. Our experimental results indicate that our approach is scalable and that wellfounded semantics can be applied to billions of facts. To the best of our knowledge, this is the first work that addresses large scale nonmonotonic reasoning without the restriction of stratification for predicates of arbitrary arity.", "creator": "LaTeX with hyperref package"}}}