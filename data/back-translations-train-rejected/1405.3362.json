{"id": "1405.3362", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-May-2014", "title": "Grounding Bound Founded Answer Set Programs", "abstract": "To appear in Theory and Practice of Logic Programming (TPLP)", "histories": [["v1", "Wed, 14 May 2014 05:06:55 GMT  (38kb)", "http://arxiv.org/abs/1405.3362v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["rehan abdul aziz", "geoffrey chu", "peter james stuckey"], "accepted": false, "id": "1405.3362"}, "pdf": {"name": "1405.3362.pdf", "metadata": {"source": "CRF", "title": "Grounding Bound Founded Answer Set Programs", "authors": ["Rehan Abdul Aziz", "Geoffrey Chu", "Peter J. Stuckey"], "emails": ["raziz@student.unimelb.edu.au,", "gchu@csse.unimelb.edu.au,", "pjs@csse.unimelb.edu.au"], "sections": [{"heading": null, "text": "ar Xiv: 140 5.33 62v1 [cs.AI] 1Bound Founded Answer Set Programming (BFASP) is an extension of Answer Set Programming (ASP), which extends stable model semantics to numerical variables. While the theory of BFASP is based on basic rules, BFASP programs are written in practice as complex, ungrounded expressions. Flattening of BFASP is a technique used to simplify arbitrary expressions of the language to a small and well-defined number of primitive expressions. In this essay, we will first show how we can flatten arbitrary BFASP rule expressions to give equivalent BFASP programs. Next, we will expand the bottom-up grounding method and magic set transformation applied by ASP to BFASP programs. Our implementation shows that these techniques can significantly improve the basic size and subsequent solutions to BFASP."}, {"heading": "1 Introduction", "text": "The answer to the question of what we need to do to solve the problem is as follows: There are only rules that require a solution within the framework of the logical semantics normally used by Boolean Satisfiability (SAT) (Mitchell 2005) (Marriott and Stuckey 1998), but it would not be a solution under the stable model used by ASP. (Aziz et al) is an extension of the ASP to allow an extension of the ASP. (This makes it possible to formulate and efficiently solve problems related to the productive variables where we want to solve the problem. (Aziz et al al) is an extension of the ASP to allow an extension of the ASP and allow real variables."}, {"heading": "2 Preliminaries", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Constraints and Answer Set Programming", "text": "Let V be a set of variables. A domain D maps each variable x x x to a set of constant values D (x). A valuation (or mapping) \u03b8 via variables vars (\u03b8) V maps each variable x vars (\u03b8) to a value \u03b8 (x). A limitation of mapping to variables vars (c), which represent the solutions of constraint V, is the mapping error c via V vars (\u03b8), where this minimum number (v) = positive. A constraint c is a series of mappings vars (c), which represent the solutions of constraint V. A constraint c is monotonically increasing (or decreasing) w.r.t. a variable y vars (c) readable (c), if for all solutions vars (c), increasing (or decreasing)."}, {"heading": "2.2 Bound Founded Answer Set Programs (BFASP)", "text": "BFASP is an extension of ASP that extends its semantics beyond integers and real variables. In BFASP, the set of variables is a union of two different sets: standard S and reasoned variables F 1 A rule r is a pair (c, y) where c is a constraint, y) F is the header of the rule and it rises to c. A bound response is a tuple (S, F, C, R) where C and R are a set of constraints and rules (also called constraints (P) and rules (P) resp.) In the face of a variable y rule F, y rules (y) is the set of rules with y as their heads. Each default variable s is associated with a lower and an upper limit, written lb (s) and ub (s)."}, {"heading": "2.3 Non-ground BFASPs", "text": "The fact is that we will be able to be in a position, and that we will be able to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position, to put ourselves in a position."}, {"heading": "3 Flattening", "text": "A reason BFASP may contain constraints and constraints whose expressions are not flat, i.e. they are expression trees with a height of more than one. Such expressions are not supported by constraint solvers and we must keep these expressions flat to primitive shapes. We omit consideration of flattening constraints as this is the same as in standard CP (Stuckey and Tack 2013). Consider the expression tree in Example 2, if it were a constraint, we would introduce variables i1. to break the given function into the following series of qualities: f = x1 + i2, i1 = min (x2, i3 = x3)."}, {"heading": "4 Grounding", "text": "The idea is that for every variable we have created, which we can only track to see if it is justified, it can be justified. For example, if the variables b and c have been created, then the rule we have created is useless. (If the justification of all positive letters in a rule possibly justifies their head, then the rule is useless, i.e. if any positive variable in its body has no rule to support it, then this rule can surely be ignored until a justification for that variable has been found. In the case that a justification for that variable is never found, then the rule is useless, i.e., excluding the rule from the program does not change its stable solutions. We propose a simple grounding of the algorithms for ungrounded BFASPs that can be implemented by simply maintaining a set of ground rules and variables that are done in ASP grounds but that can generate the rules in addition to all the useless ones."}, {"heading": "5 Magic set transformation", "text": "First, let's define the query of a BFASP. To create the query Q for a BFASP, we need all its limitations and objective function, and place all the variables that appear in them in Q.3 Note that our query has no free variables and contains only basic variables. Therefore, we do not need any magic rules to simulate a top-down calculation by a bottom-up calculation. For each variable in the original program, we create a magic variable m a that shows whether we care about a magic rule that determines when a magic variable should be created. We will consider a simple rule (a) in which all variables are equal."}, {"heading": "100 5 4.25 3.34 1.37 .64 .27 .04", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "300 15 39.02 \u2014 4.19 1.25 .41 .07", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "600 20 237.97 \u2014 19.70 22.56 .83 .96", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "900 30 \u2014 \u2014 30.44 127.90 1.17 4.74", "text": "Instance Bottom-up Magic C P Cr Pr Flat Solve Flat Solve50 100 5 5 2.02 1.90.48.01 100 300 10 30 16.62 91.66 2.97.07 100 500 10 30 24.78 - 4.39.09 250 350 105 83.45 - 35.16 18.40 250 400 110 88.61 - 39.32 452.17 300 400 125 150 140.36 - 57.09 - Table 3. UtilPolInstance Bottom-up Magic C Cr Flat Solve Flat Solve1000 15 24.27 5.20.79.70 1500 25 53.66 17.52 1.39 2.07 2000 35 94.38 66.81 2.31 8.75 3000 50 209.70 86.35 1.71 17.87 3500 60 - - 5.58 19.18 5000 80 - - 9.63 51.45 Table 4. CompanyCongressional's | vars (M) is a stable solution of M, and if there is a stable solution of M, then there is an uncompromising solution of G and vars (M)."}, {"heading": "6 Experiments", "text": "We show the benefits of bottom-up grounding and magic sets for calculating with BFASPs on a number of benchmarks: RoadCon, UtilPol and CompanyCon.4 In utilitarian strategies (UtilPol), a government decides to take a series of measures while minimizing costs. In addition, there are different citizens and the happiness of each individual citizen depends on the policies issued and the happiness of other citizens. There is a citizen whose happiness should be higher than a certain value. Companies control (CompanyCon), with the parameters of the problem being the number of companies that own shares in other companies, and a source company that wants to exercise control over the shares. The decision parameters are the shares that are bought in each other company."}, {"heading": "7 Conclusion", "text": "While the semantics of BFASP are a simple generalization of the semantics of ASP, we need to be able to model non-grounded BFASP at a high level to be useful in practice. In this paper, we show how we can smooth and ground a non-grounded BFASP while maintaining its semantics, thus creating an executable specification of the BFASP problem. We show that by bottom-up grounding and magic set transformation, we can greatly improve the efficiency of calculating BFASP. Existing magical set techniques are defined only for the normal rule form, using only well-grounded Boolean variables. We have extended magic sets to BFASP, a formalism that has much more complex rule forms and has both standard and well-grounded variables, which can also be boolean or numeric."}], "references": [{"title": "Stable model semantics for founded bounds", "author": ["R.A. AZIZ", "G. CHU", "P.J. STUCKEY"], "venue": "Theory and Practice of Logic Programming 13, 4\u20135, 517\u2013532. Proceedings of the 29th International Conference on Logic Programming.", "citeRegEx": "AZIZ et al\\.,? 2013", "shortCiteRegEx": "AZIZ et al\\.", "year": 2013}, {"title": "Inductive definitions in constraint programming", "author": ["R.A. AZIZ", "P.J. STUCKEY", "Z. SOMOGYI"], "venue": "Proceedings of the Thirty-Sixth Australasian Computer Science Conference, B. Thomas, Ed. CRPIT, vol. 135. ACS, 41\u201350.", "citeRegEx": "AZIZ et al\\.,? 2013a", "shortCiteRegEx": "AZIZ et al\\.", "year": 2013}, {"title": "Representing constraint satisfaction problems in answer set programming", "author": ["M. BALDUCCINI"], "venue": "In ICLP09 Workshop on Answer Set Programming and Other Computing Paradigms (ASPOCP09).", "citeRegEx": "BALDUCCINI,? 2009", "shortCiteRegEx": "BALDUCCINI", "year": 2009}, {"title": "Magic sets and other strange ways to implement logic programs", "author": ["F. BANCILHON", "D. MAIER", "Y. SAGIV", "J.D. ULLMAN"], "venue": "Proceedings of the fifth ACM SIGACT-SIGMOD symposium on Principles of database systems. ACM, 1\u201315.", "citeRegEx": "BANCILHON et al\\.,? 1985", "shortCiteRegEx": "BANCILHON et al\\.", "year": 1985}, {"title": "Knowledge representation, reasoning and declarative problem solving", "author": ["C. BARAL"], "venue": "Cambridge University Press.", "citeRegEx": "BARAL,? 2003", "shortCiteRegEx": "BARAL", "year": 2003}, {"title": "On the power of magic", "author": ["C. BEERI", "R. RAMAKRISHNAN"], "venue": "The Journal of Logic Programming 10, 255 \u2013 299.", "citeRegEx": "BEERI and RAMAKRISHNAN,? 1991", "shortCiteRegEx": "BEERI and RAMAKRISHNAN", "year": 1991}, {"title": "Fuzzy answer set programming: An introduction", "author": ["M. BLONDEEL", "S. SCHOCKAERT", "D. VERMEIR", "M. DE COCK"], "venue": "Soft Computing: State of the Art Theory and Novel Applications. Springer, 209\u2013222.", "citeRegEx": "BLONDEEL et al\\.,? 2013", "shortCiteRegEx": "BLONDEEL et al\\.", "year": 2013}, {"title": "Answer set solving with lazy nogood generation", "author": ["C. DRESCHER", "T. WALSH"], "venue": "Technical Communications of the 28th International Conference on Logic Programming. 188\u2013200.", "citeRegEx": "DRESCHER and WALSH,? 2012", "shortCiteRegEx": "DRESCHER and WALSH", "year": 2012}, {"title": "Magic sets and their application to data integration", "author": ["W. FABER", "G. GRECO", "N. LEONE"], "venue": "Journal of Computer and System Sciences 73, 4, 584\u2013609.", "citeRegEx": "FABER et al\\.,? 2007", "shortCiteRegEx": "FABER et al\\.", "year": 2007}, {"title": "Constraint answer set solving", "author": ["M. GEBSER", "M. OSTROWSKI", "T. SCHAUB"], "venue": "Proceedings of the 25th International Conference on Logic Programming. Springer, 235\u2013249.", "citeRegEx": "GEBSER et al\\.,? 2009", "shortCiteRegEx": "GEBSER et al\\.", "year": 2009}, {"title": "Gringo : A new grounder for answer set programming", "author": ["M. GEBSER", "T. SCHAUB", "S. THIELE"], "venue": "LPNMR. 266\u2013271.", "citeRegEx": "GEBSER et al\\.,? 2007", "shortCiteRegEx": "GEBSER et al\\.", "year": 2007}, {"title": "The stable model semantics for logic programming", "author": ["M. GELFOND", "V. LIFSCHITZ"], "venue": "Proceedings of the Fifth International Conference on Logic Programming. MIT Press, 1070\u20131080.", "citeRegEx": "GELFOND and LIFSCHITZ,? 1988", "shortCiteRegEx": "GELFOND and LIFSCHITZ", "year": 1988}, {"title": "Answer set programming via mixed integer programming", "author": ["G. LIU", "T. JANHUNEN", "I. NIEMELA"], "venue": "Proceedings of the 13th International Conference on Principles of Knowledge Representation and Reasoning. AAAI Press, 32\u201342.", "citeRegEx": "LIU et al\\.,? 2012", "shortCiteRegEx": "LIU et al\\.", "year": 2012}, {"title": "Programming with Constraints: an Introduction", "author": ["K. MARRIOTT", "P. STUCKEY"], "venue": "MIT Press.", "citeRegEx": "MARRIOTT and STUCKEY,? 1998", "shortCiteRegEx": "MARRIOTT and STUCKEY", "year": 1998}, {"title": "Integrating answer set programming and constraint logic programming", "author": ["V.S. MELLARKOD", "M. GELFOND", "Y. ZHANG"], "venue": "Annals of Mathematics and Artificial Intelligence 53, 1-4, 251\u2013287.", "citeRegEx": "MELLARKOD et al\\.,? 2008", "shortCiteRegEx": "MELLARKOD et al\\.", "year": 2008}, {"title": "A SAT solver primer", "author": ["D.G. MITCHELL"], "venue": "Bulletin of the EATCS 85, 112\u2013132.", "citeRegEx": "MITCHELL,? 2005", "shortCiteRegEx": "MITCHELL", "year": 2005}, {"title": "Fuzzy answer set programming", "author": ["D.V. NIEUWENBORGH", "M.D. COCK", "D. VERMEIR"], "venue": "Proceedings of Logics in Artificial Intelligence, 10th European Conference, JELIA 2006. Springer Berlin Heidelberg, 359\u2013372.", "citeRegEx": "NIEUWENBORGH et al\\.,? 2006", "shortCiteRegEx": "NIEUWENBORGH et al\\.", "year": 2006}, {"title": "Enhancing DLV instantiator by backjumping techniques", "author": ["S. PERRI", "F. SCARCELLO", "G. CATALANO", "N. LEONE"], "venue": "Annals of Mathematics and Artificial Intelligence 51, 2-4, 195\u2013228.", "citeRegEx": "PERRI et al\\.,? 2007", "shortCiteRegEx": "PERRI et al\\.", "year": 2007}, {"title": "Minizinc with functions", "author": ["P.J. STUCKEY", "G. TACK"], "venue": "Proceedings of the 10th International Conference on Integration of Artificial Intelligence (AI) and Operations Research (OR) techniques in Constraint Programming. Number 7874 in LNCS. Springer, 268\u2013283.", "citeRegEx": "STUCKEY and TACK,? 2013", "shortCiteRegEx": "STUCKEY and TACK", "year": 2013}, {"title": "Logic programs and cardinality constraints \u2013 theory and practice", "author": ["T. SYRJANEN"], "venue": "Ph.D. thesis, Faculty of Information and Natural Sciences, Aalto University.", "citeRegEx": "SYRJANEN,? 2009", "shortCiteRegEx": "SYRJANEN", "year": 2009}, {"title": "Unfounded sets and well-founded semantics for general logic programs", "author": ["A. VAN GELDER", "K.A. ROSS", "J.S. SCHLIPF"], "venue": "Proceedings of the ACM Symposium on Principles of Database Systems. ACM, 221\u2013230.", "citeRegEx": "GELDER et al\\.,? 1988", "shortCiteRegEx": "GELDER et al\\.", "year": 1988}], "referenceMentions": [{"referenceID": 4, "context": "Many problems in the areas of planning or reasoning can be efficiently expressed using Answer Set Programming (ASP) (Baral 2003).", "startOffset": 116, "endOffset": 128}, {"referenceID": 11, "context": "ASP enforces stable model semantics (Gelfond and Lifschitz 1988) on the program, which disallows solutions representing circular reasoning.", "startOffset": 36, "endOffset": 64}, {"referenceID": 15, "context": "For example, given only rules b \u2190 a and a \u2190 b, the assignment a = true, b = true would be a solution under the logical semantics normally used by Boolean Satisfiability (SAT) (Mitchell 2005) solvers or Constraint Programming (CP) (Marriott and Stuckey 1998) solvers, but would not be a solution under the stable model semantics used by ASP solvers.", "startOffset": 175, "endOffset": 190}, {"referenceID": 13, "context": "For example, given only rules b \u2190 a and a \u2190 b, the assignment a = true, b = true would be a solution under the logical semantics normally used by Boolean Satisfiability (SAT) (Mitchell 2005) solvers or Constraint Programming (CP) (Marriott and Stuckey 1998) solvers, but would not be a solution under the stable model semantics used by ASP solvers.", "startOffset": 230, "endOffset": 257}, {"referenceID": 0, "context": "Bound Founded Answer Set Programming (BFASP) (Aziz et al. 2013) is an extension of ASP to allow founded integer and real variables.", "startOffset": 45, "endOffset": 63}, {"referenceID": 14, "context": "Note that Constraint ASP (CASP) and hybrid systems such as those given by (Mellarkod et al. 2008; Gebser et al. 2009; Drescher and Walsh 2012; Liu et al. 2012; Balduccini 2009; Aziz et al. 2013a) cannot solve the above problem without grounding the numeric domain to propositional variables and running into the grounding bottleneck.", "startOffset": 74, "endOffset": 195}, {"referenceID": 9, "context": "Note that Constraint ASP (CASP) and hybrid systems such as those given by (Mellarkod et al. 2008; Gebser et al. 2009; Drescher and Walsh 2012; Liu et al. 2012; Balduccini 2009; Aziz et al. 2013a) cannot solve the above problem without grounding the numeric domain to propositional variables and running into the grounding bottleneck.", "startOffset": 74, "endOffset": 195}, {"referenceID": 7, "context": "Note that Constraint ASP (CASP) and hybrid systems such as those given by (Mellarkod et al. 2008; Gebser et al. 2009; Drescher and Walsh 2012; Liu et al. 2012; Balduccini 2009; Aziz et al. 2013a) cannot solve the above problem without grounding the numeric domain to propositional variables and running into the grounding bottleneck.", "startOffset": 74, "endOffset": 195}, {"referenceID": 12, "context": "Note that Constraint ASP (CASP) and hybrid systems such as those given by (Mellarkod et al. 2008; Gebser et al. 2009; Drescher and Walsh 2012; Liu et al. 2012; Balduccini 2009; Aziz et al. 2013a) cannot solve the above problem without grounding the numeric domain to propositional variables and running into the grounding bottleneck.", "startOffset": 74, "endOffset": 195}, {"referenceID": 2, "context": "Note that Constraint ASP (CASP) and hybrid systems such as those given by (Mellarkod et al. 2008; Gebser et al. 2009; Drescher and Walsh 2012; Liu et al. 2012; Balduccini 2009; Aziz et al. 2013a) cannot solve the above problem without grounding the numeric domain to propositional variables and running into the grounding bottleneck.", "startOffset": 74, "endOffset": 195}, {"referenceID": 1, "context": "Note that Constraint ASP (CASP) and hybrid systems such as those given by (Mellarkod et al. 2008; Gebser et al. 2009; Drescher and Walsh 2012; Liu et al. 2012; Balduccini 2009; Aziz et al. 2013a) cannot solve the above problem without grounding the numeric domain to propositional variables and running into the grounding bottleneck.", "startOffset": 74, "endOffset": 195}, {"referenceID": 16, "context": "BFASP has been shown to subsume CP, ASP, CASP and Fuzzy ASP (Nieuwenborgh et al. 2006; Blondeel et al. 2013), see (Aziz et al.", "startOffset": 60, "endOffset": 108}, {"referenceID": 6, "context": "BFASP has been shown to subsume CP, ASP, CASP and Fuzzy ASP (Nieuwenborgh et al. 2006; Blondeel et al. 2013), see (Aziz et al.", "startOffset": 60, "endOffset": 108}, {"referenceID": 0, "context": "2013), see (Aziz et al. 2013) for details.", "startOffset": 11, "endOffset": 29}, {"referenceID": 18, "context": "This is analogous to flattening (Stuckey and Tack 2013) of constraint models and grounding (Syrjanen 2009; Gebser et al.", "startOffset": 32, "endOffset": 55}, {"referenceID": 19, "context": "This is analogous to flattening (Stuckey and Tack 2013) of constraint models and grounding (Syrjanen 2009; Gebser et al. 2007; Perri et al. 2007) of ASP programs.", "startOffset": 91, "endOffset": 145}, {"referenceID": 10, "context": "This is analogous to flattening (Stuckey and Tack 2013) of constraint models and grounding (Syrjanen 2009; Gebser et al. 2007; Perri et al. 2007) of ASP programs.", "startOffset": 91, "endOffset": 145}, {"referenceID": 17, "context": "This is analogous to flattening (Stuckey and Tack 2013) of constraint models and grounding (Syrjanen 2009; Gebser et al. 2007; Perri et al. 2007) of ASP programs.", "startOffset": 91, "endOffset": 145}, {"referenceID": 3, "context": "The contributions of this paper are: a flattening algorithm that transforms complex expressions to primitive forms while preserving the stable model semantics, a generalization of bottom-up grounding for normal logic programs to BFASPs and a generalization of the magic set transformation (Bancilhon et al. 1985; Beeri and Ramakrishnan 1991) for normal logic programs to BFASPs.", "startOffset": 289, "endOffset": 341}, {"referenceID": 5, "context": "The contributions of this paper are: a flattening algorithm that transforms complex expressions to primitive forms while preserving the stable model semantics, a generalization of bottom-up grounding for normal logic programs to BFASPs and a generalization of the magic set transformation (Bancilhon et al. 1985; Beeri and Ramakrishnan 1991) for normal logic programs to BFASPs.", "startOffset": 289, "endOffset": 341}, {"referenceID": 18, "context": "We omit consideration of flattening constraints since this is the same as in standard CP (Stuckey and Tack 2013).", "startOffset": 89, "endOffset": 112}, {"referenceID": 18, "context": "Finally, we flatten all the constraints in T using the standard CP flattening algorithm cp flat as described in (Stuckey and Tack 2013).", "startOffset": 112, "endOffset": 135}, {"referenceID": 8, "context": "We refer the reader to (Faber et al. 2007) for further details.", "startOffset": 23, "endOffset": 42}, {"referenceID": 0, "context": "0 (LIBMZN) and uses the solver CHUFFED extended with founded variables and rules as described in our previous work (Aziz et al. 2013).", "startOffset": 115, "endOffset": 133}], "year": 2014, "abstractText": "Bound Founded Answer Set Programming (BFASP) is an extension of Answer Set Programming (ASP) that extends stable model semantics to numeric variables. While the theory of BFASP is defined on ground rules, in practice BFASP programs are written as complex non-ground expressions. Flattening of BFASP is a technique used to simplify arbitrary expressions of the language to a small and well defined set of primitive expressions. In this paper, we first show how we can flatten arbitrary BFASP rule expressions, to give equivalent BFASP programs. Next, we extend the bottom-up grounding technique and magic set transformation used by ASP to BFASP programs. Our implementation shows that for BFASP problems, these techniques can significantly reduce the ground program size, and improve subsequent solving.", "creator": "LaTeX with hyperref package"}}}