{"id": "1405.3826", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-May-2014", "title": "Application of Methods for Syntax Analysis of Context-Free Languages to Query Evaluation of Logic Programs", "abstract": "My research goal is to employ a parser generation algorithm based on the Earley parsing algorithm to the evaluation and compilation of queries to logic programs, especially to deductive databases. By means of partial deduction, from a query to a logic program a parameterized automaton is to be generated that models the evaluation of this query. This automaton can be compiled to executable code; thus we expect a speedup in runtime of query evaluation. An extended abstract/ full version of a paper accepted to be presented at the Doctoral Consortium of the 30th International Conference on Logic Programming (ICLP 2014), July 19-22, Vienna, Austria", "histories": [["v1", "Thu, 15 May 2014 12:56:03 GMT  (25kb)", "http://arxiv.org/abs/1405.3826v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["heike stephan"], "accepted": false, "id": "1405.3826"}, "pdf": {"name": "1405.3826.pdf", "metadata": {"source": "CRF", "title": "Application of Methods for Syntax Analysis of Context-Free Languages to Query Evaluation of Logic Programs", "authors": ["Heike Stephan"], "emails": ["heike.stephan@informatik.uni-halle.de"], "sections": [{"heading": null, "text": "ar Xiv: 140 5.38 26v1 [cs.AI] 1An extended summary / full version of a paper to be presented at the Doctoral Consortium of the 30th International Conference on Logic Programming (ICLP 2014) from July 19-22 in Vienna, Austria KEYWORDS: Deductive Databases, Earley Deduction, Partial Deduction"}, {"heading": "1 Introduction and problem description", "text": "Deductive databases and related rule-based systems are of increasing interest nowadays (ontologies / semantic web, artificial intelligence, business rules), especially when large amounts of data need to be processed, optimal runtime performance is of crucial importance. This can be achieved by pre-compiling the intensive database, ideally combined with a partial evaluation of queries to the deductive database, also known as partial derivation. A lot of work has already been done in this area (see e.g. Komorowski 1992). Runtime performance can also be improved by tabulating methods also known as memoir or memoir engineering techniques (e.g. the OLDT method (Tamaki and Sato 1986), which reuses responses to equivalent subtargets and their recomputation. One approach that has not been fully exploited in the past is the use of the structural similarity of horn clauses that form classical logical programs, and their contextual relationship to the database (see below for a good description)."}, {"heading": "2 Background and overview of the existing literature", "text": "The adaptation of parsing algorithms to sentences of horn clauses in 1970 was carried out primarily for certain sentence grammars (DCGs) - and thus remained in the community of computer linguistics - but the ideas can in principle be transferred to logical programs in general. One option is to use algorithms related to the LR (k) algorithm developed by Knuth (Knuth 1965). The LR (k) algorithm is well known and widely used in the compiler construction (for a detailed description see a textbook on compiler construction as e. g. (Aho et al. 2007))). An adaptation to the DCGs is presented by Nilsson in (Nilsson 1986), for example, a logic program is initially reduced to its underlying context-free grammar, for which an LR (k) pargorithm can be generated in the traditional way. Predicate arguments are added to the parsing algorithm (which is related to the parsing stack)."}, {"heading": "3 Goal of the research", "text": "In fact, it is so that it is a matter of a pure structure, which is capable of uniting itself in a position, without it being a matter of an structure, in which it is a matter of an structure, in which it is a matter of an structure, in which it is a matter of an structure, in which it is a matter of an structure, in which it is a matter of an structure, of an structure, of an structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, of a structure, a structure, a structure, a structure, a structure, a structure, a structure, a structure, a structure, a structure, a structure, a structure, a structure, a structure, a, a structure, a, a structure, a, a structure, a, a, a, a, a, a, a, a, a, a, a, a, a"}, {"heading": "4 Preliminary results accomplished", "text": "First results have already been published together with my consultant Prof. S. Brass in (Stephan and Brass 2012) and (Brass and Stephan 2013).The method of Earley deduction is extended by state transitions and a generator for a parameterized finite automaton. It can be applied to a non-recursive or left-recursive datalog.The execution of the generated automaton performs query evaluation on the given extensive database.The states of this automaton can also be considered as new datalogist predicates and the state transitions as data rules, so that we have a rewritten datalog.A bottom-up evaluation of this generated program corresponds to the execution of the parameterized automation."}, {"heading": "5 Current status of the research", "text": "Currently I am preparing a new version of the method, which is able to deal with Datalog programs of the type of the seed generation program. I also have almost finished thoughts about a version of the method that is applicable to general logic programs, including negation as finite failure / layered negation."}, {"heading": "6 Open issues and expected achievements", "text": "There are several ideas on how to implement versions of the Earley-based compilation methods; there must be comparisons between these implementations and other established implementations of Datalog and Prolog, especially with Tabling and Magic Sets; the expected improvement in runtime performance must be demonstrated; and I am particularly interested in applying my compilation method back to parser generation and investigating how the logic programs that can be processed with the current version are associated with grammars for deterministic context-free languages. If these connections are sufficient, I intend to use the method as a parser generator for associated grammars."}], "references": [{"title": "Compilers: Principles, Techniques, and Tools, 2", "author": ["A.V. Aho", "M.S. Lam", "R. Sethi", "J.D. Ullman"], "venue": "ed. Pearson, Addison Wesley, Boston et al.", "citeRegEx": "Aho et al\\.,? 2007", "shortCiteRegEx": "Aho et al\\.", "year": 2007}, {"title": "Magic sets and other strange ways to implement logic programs (extended abstract)", "author": ["F. Bancilhon", "D. Maier", "Y. Sagiv", "J.D. Ullman"], "venue": "Proceedings of the Fifth ACM SIGACT-SIGMOD Symposium on Principles of Database Systems. PODS \u201986. ACM, New York, NY, USA, 1\u201315.", "citeRegEx": "Bancilhon et al\\.,? 1986", "shortCiteRegEx": "Bancilhon et al\\.", "year": 1986}, {"title": "A variant of earley deduction with partial evaluation", "author": ["S. Brass", "H. Stephan"], "venue": "Web Reasoning and Rule Systems. Springer, 35\u201349.", "citeRegEx": "Brass and Stephan,? 2013", "shortCiteRegEx": "Brass and Stephan", "year": 2013}, {"title": "An efficient context-free parsing algorithm", "author": ["J. Earley"], "venue": "Communications of the ACM 13, 2 (Feb.), 94\u2013102.", "citeRegEx": "Earley,? 1970", "shortCiteRegEx": "Earley", "year": 1970}, {"title": "On the translation of languages from left to right", "author": ["D.E. Knuth"], "venue": "Information and Control 8, 6 (Dezember), 607\u2013639.", "citeRegEx": "Knuth,? 1965", "shortCiteRegEx": "Knuth", "year": 1965}, {"title": "An introduction to partial deduction", "author": ["J. Komorowski"], "venue": "Meta-Programming in Logic, A. Pettorossi, Ed. Lecture Notes in Computer Science, vol. 649. Springer Berlin Heidelberg, 49\u201369.", "citeRegEx": "Komorowski,? 1992", "shortCiteRegEx": "Komorowski", "year": 1992}, {"title": "AID: An alternative implementation of DCGs", "author": ["U. Nilsson"], "venue": "New Generation Computing 4, 383\u2013399.", "citeRegEx": "Nilsson,? 1986", "shortCiteRegEx": "Nilsson", "year": 1986}, {"title": "Parsing as deduction", "author": ["F.C.N. Pereira", "D.H.D. Warren"], "venue": "Proceedings of the 21st annual meeting on Association for Computational Linguistics. ACL \u201983. Association for Computational Linguistics, Stroudsburg, PA, USA, 137\u2013144.", "citeRegEx": "Pereira and Warren,? 1983", "shortCiteRegEx": "Pereira and Warren", "year": 1983}, {"title": "1985/2009b. Optimizations to earley deduction for datalog programs", "author": ["III H.H. Porter"], "venue": "www.cs.pdx.edu/~harry/earley/datalog.pdf", "citeRegEx": "Porter,? \\Q2012\\E", "shortCiteRegEx": "Porter", "year": 2012}, {"title": "A variant of earley deduction with partial evaluation", "author": ["H. Stephan", "S. Brass"], "venue": "Proceedings of the 26th Workshop on Logic Programming. 21\u201331.", "citeRegEx": "Stephan and Brass,? 2012", "shortCiteRegEx": "Stephan and Brass", "year": 2012}, {"title": "Old resolution with tabulation", "author": ["H. Tamaki", "T. Sato"], "venue": "Third International Conference on Logic Programming, E. Shapiro, Ed. Lecture Notes in Computer Science, vol. 225. Springer Berlin Heidelberg, 84\u201398.", "citeRegEx": "Tamaki and Sato,? 1986", "shortCiteRegEx": "Tamaki and Sato", "year": 1986}, {"title": "The interface between language theory and database theory", "author": ["J.D. Ullman"], "venue": "Theoretical studies in computer science, J. D. Ullman, Ed. Academic Press Professional, Inc., San Diego, CA, USA, 133\u2013151.", "citeRegEx": "Ullman,? 1992", "shortCiteRegEx": "Ullman", "year": 1992}], "referenceMentions": [{"referenceID": 5, "context": "(Komorowski 1992)).", "startOffset": 0, "endOffset": 17}, {"referenceID": 10, "context": "the OLDT method (Tamaki and Sato 1986)), which reuse answers to equivalent subgoals and avoid their recomputation.", "startOffset": 16, "endOffset": 38}, {"referenceID": 11, "context": "One approach that has not yet been taken full advantage of in the past is to make use of the structural similarity of sets of horn clauses, which form classic logic programs, and context-free grammars (see (Ullman 1992) for a good description of this connection).", "startOffset": 206, "endOffset": 219}, {"referenceID": 4, "context": "One option is to use algorithms related to the LR(k) algorithm developed by Knuth (Knuth 1965).", "startOffset": 82, "endOffset": 94}, {"referenceID": 0, "context": "(Aho et al. 2007)).", "startOffset": 0, "endOffset": 17}, {"referenceID": 6, "context": "byNilsson in (Nilsson 1986).", "startOffset": 13, "endOffset": 27}, {"referenceID": 7, "context": "Another useful parsing algorithm for evaluating a logic program is Earley Deduction by Pereira and Warren (Pereira and Warren 1983).", "startOffset": 106, "endOffset": 131}, {"referenceID": 3, "context": "This method is inspired by the Earley Algorithm (Earley 1970), a LR parsing algorithm derived from Knuth\u2019s LR(k) parser generation algorithm and suitable for all context-free grammars.", "startOffset": 48, "endOffset": 61}, {"referenceID": 1, "context": "The execution of a program compiled in this way is expected to be faster than execution with Prolog, the Magic Set method (Bancilhon et al. 1986) or tabling methods, at least in the general case.", "startOffset": 122, "endOffset": 145}, {"referenceID": 9, "context": "Brass in (Stephan and Brass 2012) and (Brass and Stephan 2013).", "startOffset": 9, "endOffset": 33}, {"referenceID": 2, "context": "Brass in (Stephan and Brass 2012) and (Brass and Stephan 2013).", "startOffset": 38, "endOffset": 62}], "year": 2014, "abstractText": "My research goal is to employ a parser generation algorithm based on the Earley parsing algorithm to the evaluation and compilation of queries to logic programs, especially to deductive databases. By means of partial deduction, from a query to a logic program a parameterized automaton is to be generated that models the evaluation of this query. This automaton can be compiled to executable code; thus we expect a speedup in runtime of query evaluation. An extended abstract/ full version of a paper accepted to be presented at the Doctoral Consortium of the 30th International Conference on Logic Programming (ICLP 2014), July 19-22, Vienna, Austria", "creator": "LaTeX with hyperref package"}}}