{"id": "1405.5646", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-May-2014", "title": "Mathematical Programming Strategies for Solving the Minimum Common String Partition Problem", "abstract": "The minimum common string partition problem is an NP-hard combinatorial optimization problem with applications in computational biology. In this work we propose the first integer linear programming model for solving this problem. Moreover, on the basis of the integer linear programming model we develop a deterministic 2-phase heuristic which is applicable to larger problem instances. The results show that provenly optimal solutions can be obtained for problem instances of small and medium size from the literature by solving the proposed integer linear programming model with CPLEX. Furthermore, new best-known solutions are obtained for all considered problem instances from the literature. Concerning the heuristic, we were able to show that it outperforms heuristic competitors from the related literature.", "histories": [["v1", "Thu, 22 May 2014 07:37:56 GMT  (46kb,D)", "http://arxiv.org/abs/1405.5646v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.DS", "authors": ["christian blum", "jos\\'e a lozano", "pedro pinacho davidson"], "accepted": false, "id": "1405.5646"}, "pdf": {"name": "1405.5646.pdf", "metadata": {"source": "CRF", "title": "Mathematical Programming Strategies for Solving the Minimum Common String Partition Problem", "authors": ["Christian Blum", "Jos\u00e9 A. Lozano", "Pedro Pinacho Davidson"], "emails": ["christian.blum@ehu.es", "ja.lozano@ehu.es", "ppinacho@santotomas.cl"], "sections": [{"heading": "1 Introduction", "text": "Optimization problems related to strings - such as protein or DNA sequences - are very common in bioinformatics. Examples are string consensus problems such as the string problem [20, 19], the longest common subsequence problem and its variants [14, 22], and alignment problems [12], which are often mathematically very difficult, if not NP -hard [9]. In this paper, we deal with the problem of the minimal common string partition (MCSP), which can be described as follows. We are given two related input strings, each of which must be divided into the same collection of substrates. The size of the collection is subject to minimization. A formal description of the problem is provided in Section 1.1. The MCSP problem has applications, for example in the field of bioinformatics. Chen et al. [2] point out that the MCSP problem is closely related to the problem of sorting by reversals combined methods."}, {"heading": "1.1 Problem Description", "text": "The MCSP problem can technically be described as follows: Given are two input strings s1 and s2, both of length n over a finite alphabet. These two strings must be related to each other, which means that each letter occurs equally often in each of them. Note that this definition implies that s1 and s2 have the same length. In addition, we are interested in finding a valid solution to the MCSP problem by splitting s1 into a sentence P1 with non-overlapping substrings and s2 into a sentence P2 with non-overlapping substrings, so that P1 = P2. Furthermore, we are interested in finding a valid solution so that | P1 | = | P2 | is minimal. Consider the following example. Given are the DNA sequences s1 = AGACTG and s2 = ACTAGG. Obviously, s1 and s2 are connected, because A and G occur twice in both input strings, while C and T can occur once each by a function trivial, where both areas are valid."}, {"heading": "1.2 Related Work", "text": "The MCSP problem was introduced by Chen et al. [2] due to its relationship to genome rearrangements. Specifically, it has applications in biological questions such as: Can a given DNA string possibly be achieved by rearrangements of another DNA string? The general problem has proven to be NP-hard even in very restrictive cases [10]. Consider other work on problem hardness, for example, the k-MCSP problem, which is the version of the MCSP problem in which each letter occurs at most k times in each input string. The 2-MCSP problem has been shown to be APX-hard in [10]. If the input labels have an alphabet size c, the corresponding problem is denounced as MCSPc. Jiang et al. proved that the decision version of the MCSPc problem NP is complete when the MCSP ratio is completed."}, {"heading": "1.3 Organization of the Paper", "text": "The remaining part of the paper is structured as follows: In Section 2, the ILP model for solving the MCSP is outlined; in addition, an experimental evaluation is offered; deterministic heuristics is combined with an experimental evaluation in Section 3; and finally, in Section 4, conclusions and prospects for future work are given."}, {"heading": "2 An Integer Linear Program to Solve the MCSP", "text": "In the following, we present the first ILP model for the solution of the MCSP. For this purpose, the following definitions are required."}, {"heading": "2.1 Preliminaries", "text": "Henceforth, a common block of the input strings s1 and s2 is called a block of three (ti, k1i, k2i), where ti is a string that can be found from position 1 \u2264 k1i \u2264 n in string s1 and from position 1 \u2264 k2i \u2264 n in string s2. Furthermore, B = {b1,..., bm} is the (ordered) set of all possible common blocks of s1 and s2.1 Given the definition of B, any valid solution S to the MCSP problem is a subset of B - that is, S-B - such that: 1. Note: bi-S-ti | = n, that is, the sum of the strings corresponding to the common blocks in S is equal to the length of the input strings. 2. For two common blocks bi, bj-S, their respective strings do not overlap either in s1 or s2."}, {"heading": "2.2 The Integer Linear Program", "text": "First, two binary m \u00b7 n matrices M1 and M2 are defined as follows: In both matrices, line 1 \u2264 i \u2264 m corresponds to the common block bi-B. In addition, a column 1 \u2264 j \u2264 n corresponds to position j on the input line s1 and s2, respectively. Generally, the entries of the matrix M1 are set to zero, except that in each line i the positions occupied by the string ti (of the common block bi) on the input line s1 are set to one. Henceforth, the position (i, j) of a matrix M with Mi, j is set. Finally, for each common block bi-B, we introduce a binary variable xi. With these definitions, we can express the MCSP in the form of the following linear program, which is overlaid by Ilporigi on the common string Mi \u00b7 j = 1 = 1 = 1."}, {"heading": "2.3 Example", "text": "As an example, consider the small problem instance from section 1.1. The full set of common blocks (B) induced by input strings s1 = AGACTG and s2 = ACTAGG is as follows: B = b1 = (ACT, 3, 1) b2 = (AG, 1, 4) b3 = (AC, 3, 1) b4 = (CT, 4, 2) b5 = (A, 1, 1) b6 = (A, 1, 4) b7 = (A, 3, 1) b8 = (A, 3, 4) b9 = (C, 4, 2) b10 = (T, 5, 3) b11 = (G, 2, 5) b12 = (G, 2, 6) b14 b14 = (G, 6, 6 b11 = G, 0) b14 = (G) b9 = (C, 4, 4, 4) b9 = (C, 0) b9 = (C, 4, 2) b11 = (G, 0, 0) b10 = (G, 2, 5) b12 = (G, 2, 6) b14 b14 = (G, 5 b11 b11 = (G, 2, 11) b11 = G, 0 (G = 11, 0) b9 = (C, 4, 4, 4, 4, 4), 2) b10 = (G, 0, 0 b10 = (G, 0, 0, 0, 0, 0 b10 = T, 5, 5 b11 b11 b11 b11 = 11, 0 b11 (G, 0, 0), 0 b11 b11 = 11, 0, 0, 0 (G = 11, 0, 0, 0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (G, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), 0 (G, 0, 0, 0, 0, 0, 0, 0, 0"}, {"heading": "2.4 Experimental Evaluation", "text": "In the following we offer an experimental evaluation of the model Ilporig. The model was implemented in ANSI C + +, using GCC 4.7.3 for the compilation of the software. Furthermore, the model was solved with IBM ILOG CPLEX V12.1. The experimental results, which we outline below, were obtained on a PC cluster with \"Intel (R) Xeon (R) CPU 5130\" CPUs with 4 cores of 2000 MHz and 4 gigabytes of RAM."}, {"heading": "2.4.1 Problem Instances", "text": "For the Ilporig test model, we chose the same set of benchmark instances used by Ferdous and Sohel in [6] for the experimental evaluation of their approach to optimizing the ant colony. This set contains a total of 30 artificial instances and 15 real instances consisting of DNA sequences. Remember, in this context, each problem instance consists of two interconnected input strings. Furthermore, the benchmark set consists of four substances; the first substance (henceforth referred to as Group1) consists of 10 artificial instances in which the input strings have a maximum length of 200; the second group (Group2) consists of 10 artificial instances with input string lengths between 201 and 400; and in the third group (Group3), the input strings of the 10 artificial instances have lengths between 401 and 600; and finally, the fourth group (Real) consists of 15 real instances of different lengths."}, {"heading": "2.4.2 Results", "text": "The structure of these tables is as follows: The first column contains the instance identifiers; the second column contains the results of the Ferry and Sohnemann algorithm; the fourth column contains the value of the best solution per problem instance (with a time limit of 7200 seconds per sequence); the third column contains the value of the best solution per problem instance (with a time limit of 1000 seconds per sequence); and the third column contains the value of the first column."}, {"heading": "3 A MIP-Based Heuristic", "text": "As shown at the end of the previous section, the application of CPLEX to Ilporg, starting from an input string size of about 1200, reaches its limits. However, if it were possible to considerably reduce the size of the set of common blocks (B), mathematical programming could still be an option to obtain good (heuristic) solutions. With this idea in mind, we examined the distribution of the strings of common blocks in B for all 45 problem cases. This distribution is shown - averaged over the instances of each of the four instance sets - in Figure 1. Analyzing these distributions, it can first be observed that the distribution does not seem to be dependent on the instance size. [3] However, the important aspect to observe is that approximately 75% of all common blocks contain strings of length 1. Moreover, only a very small portion of these common blocks will form part of an optimal solution. In comparison, it is reasonable to assume that a much larger percentage of the blocks corresponding to the large strings will form the optimal part of the solution outlined in this optimal solution."}, {"heading": "3.1 Heuristic", "text": "The proposed heuristic work would change in two phases. In the first phase, a subset of B (the complete set of common blocks) must be selected. To this end, B \u2265 l (where l \u2265 1) should include the subset of B containing all common blocks of B. \u00b7 In addition, all blocks whose corresponding string is longer or equal to l must be selected. Noteworthy in this context is that B \u2265 1 = B. In addition, it should be noted that B \u2265 1 | B \u2265 3 | \u2265. Ilmax will be the smallest value for l, so that B \u2265 lmax | > 0. Note that B \u2265 lmax contains only the common blocks with the longest strings. A specific value for l of [2, lmax], the following ILP, which reminds Ilmax, is referred to as Ilpph1."}, {"heading": "3.2 Experimental Evaluation", "text": "The two ILP models were solved with IBM ILOG CPLEX V12.1, and the same machines as for the experimental evaluation of Ilporg were used to perform the experiments. As already mentioned, heuristics can be applied to any value of l from the interval [2, lmax]. In fact, we have heuristics for each of the 45 problem instances from the sets Group1, Group2, and Real, with all possible values for l."}, {"heading": "3.3 Gaining Insight into the Behavior of the Heuristic", "text": "In order to gain more insight into the behaviour of heuristics in relation to the choice of a value for parameter l, the following information is presented graphically in Figure 2. Two graphs are shown for each of the four selected problem cases. Specifically, we have decided to set information for the major problem cases from each of the fourth5 See Section 2.1 for the definition of B (\u00b7). Instance sets (see Figures (a) to (d) of Figure 2). The left graph of each sub-figure must be read as follows. The x-axis extends over the possible values for l, while the y-axis indicates the size of the amount of common blocks used to solve the models Ilpph1 and Ilpph2. The graph shows two curves, one with a black line concerning the solution of the model Ilpph1 in phase 1 of heuristics, while the other (shown using a grey line) indicates the solution of the model Ilpph2 in phase two of the hayristic."}, {"heading": "3.4 Results of Heuristic for Larger Instances", "text": "Based on the results of the previous subsection, heuristics with an intermediate value of l = 5 were applied to all problem instances from the set of larger instances described at the end of Section 2.4.2. The results are in Table 7. The first column indicates the length of the input lines of the corresponding random instance. The second column indicates the result of applying CPLEX with a computation time of 3600 CPU seconds to Ilporous. 6 The remaining five columns contain the results of heuristics. The first of these columns returns the value of the solution generated by heuristics, while the second column indicates the corresponding computation time. The next two columns return the size of the sets of common blocks used in Phase 1 and Phase 2 of heuristics, respectively. Finally, the last column provides information on the number of common blocks considered by heuristics compared to the size of the complete set of common blocks (which can be found in Table 5)."}, {"heading": "4 Conclusions and Future Work", "text": "In this paper, we considered a problem with applications in bioinformatics, known as the Minimum Common String Partition Problem. Firstly, we introduced an integer linear programming model for this problem. By applying the IBM ILOG CPLEX Solver to this model, we were able to improve all the best known solutions in the literature for a set of problem instance consisting of 45 instances of different sizes, the smallest of which could be optimally solved in even a very short computational time.Secondly, the paper focused on a two-phase heuristics, which relies heavily on the developed integer linear programming model. Results showed that heuristics firstly outperform competing algorithms from the literature and secondly can be applied to larger problem instances. In terms of future work, we aim to investigate the inclusion of mathematical programming strategies based on the introduced integer linear programming model in metric techniques such as Carlos BASP and GRP."}], "references": [{"title": "Iterative probabilistic tree search for the minimum common string partition problem", "author": ["C. Blum", "J.A. Lozano", "P. Pinacho Davidson"], "venue": "Proceedings of HM 20104\u2013 9th International Workshop on Hybrid Metaheuristics,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "Computing the assignment of orthologous genes via genome rearrangement", "author": ["X. Chen", "J. Zheng", "Z. Fu", "P. Nan", "Y. Zhong", "S. Lonardi", "T. Jiang"], "venue": "In Proceedings of the Asia Pacific Bioinformatics Conference", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "The greedy algorithm for the minimum common string partition problem", "author": ["M. Chrobak", "P. Kolman", "J. Sgall"], "venue": "Proceedings of APPROX 2004 \u2013 7th International Workshop on Approximation Algorithms for Combinatorial Optimization Problems,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2004}, {"title": "The string edit distance matching problem with moves", "author": ["G. Cormode", "S. Muthukrishnan"], "venue": "ACM Transactions on Algorithms,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2007}, {"title": "Minimum common string partition parameterized", "author": ["P. Damaschke"], "venue": "Proceedings of WABI 2008 \u2013 8th International Workshop on Algorithms in Bioinformatics,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Solving the minimum common string partition problem with the help of ants", "author": ["S.M. Ferdous", "M.S. Rahman"], "venue": "Proceedings of ICSI 2013 \u2013 4th International Conference on Advances in Swarm Intelligence,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "A MAX-MIN ant colony system for minimum common string partition problem", "author": ["S.M. Ferdous", "M.S. Rahman"], "venue": "CoRR, abs/1401.4539,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Exponential and polynomial time algorithms for the minimum common string partition problem", "author": ["B. Fu", "H. Jiang", "B. Yang", "B. Zhu"], "venue": "Proceedings of COCOA 2011 \u2013 5th International Conference on Combinatorial Optimization and Applications,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "Computers and intractability; a guide to the theory of NP-completeness", "author": ["M.R. Garey", "D.S. Johnson"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1979}, {"title": "Minimum common string partition problem: Hardness and approximations", "author": ["A. Goldstein", "P. Kolman", "J. Zheng"], "venue": "Proceedings of ISAAC 2004 \u2013 15th International Symposium on Algorithms and Computation,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2005}, {"title": "Quick greedy computation for minimum common string partitions", "author": ["I. Goldstein", "M. Lewenstein"], "venue": "Proceedings of CPM 2011 \u2013 22nd Annual Symposium on Combinatorial Pattern Matching,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "Algorithms on Strings, Trees, and Sequences. Computer Science and Computational Biology", "author": ["D. Gusfield"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1997}, {"title": "A novel greedy algorithm for the minimum common string partition problem", "author": ["D. He"], "venue": "Proceedings of ISBRA 2007 \u2013 Third International Symposium on Bioinformatics Research and Applications,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2007}, {"title": "Computing a longest common subsequence for a set of strings", "author": ["W.J. Hsu", "M.W. Du"], "venue": "BIT Numerical Mathematics,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1984}, {"title": "Minimum common string partition revisited", "author": ["H. Jiang", "B. Zhu", "D. Zhu", "H. Zhu"], "venue": "Journal of Combinatorial Optimization,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2012}, {"title": "The greedy algorithm for edit distance with moves", "author": ["H. Kaplan", "N. Shafrir"], "venue": "Information Processing Letters,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2006}, {"title": "Approximating reversal distance for strings with bounded number of duplicates", "author": ["P. Kolman"], "venue": "Proceedings of MFCS 2005 \u2013 30th International Symposium on Mathematical Foundations of Computer Science,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2005}, {"title": "Wale\u0144. Reversal distance for strings with duplicates: Linear time approximation using hitting set", "author": ["T.P. Kolman"], "venue": "Proceedings of WAOA 2007 \u2013 4th International Workshop on Approximation and Online Algorithms,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2007}, {"title": "Optimization techniques for string selection and comparison problems in genomics", "author": ["C.N. Meneses", "C.A.S. Oliveira", "P.M. Pardalos"], "venue": "IEEE Engineering in Medicine and Biology Magazine,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2005}, {"title": "An improved heuristic for the far from most strings problem", "author": ["S.R. Mousavi", "M. Babaie", "M. Montazerian"], "venue": "Journal of Heuristics,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2012}, {"title": "Edit distance with move operations", "author": ["D. Shapira", "J.A. Storer"], "venue": "Proceedings of CPM 2002 \u2013 13th Annual Symposium on Combinatorial Pattern Matching,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2002}, {"title": "Identification of common molecular subsequences", "author": ["T. Smith", "M. Waterman"], "venue": "Journal of Molecular Biology,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1981}], "referenceMentions": [{"referenceID": 19, "context": "Examples include string consensus problems such as the far-from most string problem [20, 19], the longest common subsequence problem and its variants [14, 22], and alignment problems [12].", "startOffset": 84, "endOffset": 92}, {"referenceID": 18, "context": "Examples include string consensus problems such as the far-from most string problem [20, 19], the longest common subsequence problem and its variants [14, 22], and alignment problems [12].", "startOffset": 84, "endOffset": 92}, {"referenceID": 13, "context": "Examples include string consensus problems such as the far-from most string problem [20, 19], the longest common subsequence problem and its variants [14, 22], and alignment problems [12].", "startOffset": 150, "endOffset": 158}, {"referenceID": 21, "context": "Examples include string consensus problems such as the far-from most string problem [20, 19], the longest common subsequence problem and its variants [14, 22], and alignment problems [12].", "startOffset": 150, "endOffset": 158}, {"referenceID": 11, "context": "Examples include string consensus problems such as the far-from most string problem [20, 19], the longest common subsequence problem and its variants [14, 22], and alignment problems [12].", "startOffset": 183, "endOffset": 187}, {"referenceID": 8, "context": "These problems are often computationally very hard, if not even NP -hard [9].", "startOffset": 73, "endOffset": 76}, {"referenceID": 1, "context": "[2] point out that the MCSP problem is closely related to the problem of sorting by reversals with duplicates, a key problem in genome rearrangement.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[2] due to its relation to genome rearrangement.", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "More specifically, it has applications in biological questions such as: May a given DNA string possibly be obtained by rearrangements of another DNA string? The general problem has been shown to be NP -hard even in very restrictive cases [10].", "startOffset": 238, "endOffset": 242}, {"referenceID": 9, "context": "The 2-MCSP problem was shown to be APX-hard in [10].", "startOffset": 47, "endOffset": 51}, {"referenceID": 14, "context": "proved that the decision version of the MCSPc problem is NP -complete when c \u2265 2 [15].", "startOffset": 81, "endOffset": 85}, {"referenceID": 3, "context": "Cormode and Muthukrishnan [4], for example, proposed an O(lognlog\u2217n)-approximation for the edit distance with moves problem, which is a more general case of the MCSP problem.", "startOffset": 26, "endOffset": 29}, {"referenceID": 20, "context": "Shapira and Storer [21] extended on this result.", "startOffset": 19, "endOffset": 23}, {"referenceID": 17, "context": "Other approximation approaches for the MCSP problem have been proposed in [18].", "startOffset": 74, "endOffset": 78}, {"referenceID": 2, "context": "[3] studied a simple greedy approach for the MCSP problem, showing that the approximation ratio concerning the 2-MCSP problem is 3, and for the 4-MCSP problem the approximation ratio is \u03a9(log(n)).", "startOffset": 0, "endOffset": 3}, {"referenceID": 15, "context": "Later Kaplan and Shafir [16] raised the lower bound to \u03a9(n0.", "startOffset": 24, "endOffset": 28}, {"referenceID": 16, "context": "Kolman proposed a modified version of the simple greedy algorithm with an approximation ratio of O(k2) for the k-MCSP [17].", "startOffset": 118, "endOffset": 122}, {"referenceID": 10, "context": "Recently, Goldstein and Lewenstein proposed a greedy algorithm for the MCSP problem that runs in O(n) time (see [11]).", "startOffset": 112, "endOffset": 116}, {"referenceID": 12, "context": "He [13] introduced a greedy algorithm with the aim of obtaining better average results.", "startOffset": 3, "endOffset": 7}, {"referenceID": 4, "context": "Damaschke [5] was the first one to study the fixed-parameter tractability (FPT) of the problem.", "startOffset": 10, "endOffset": 13}, {"referenceID": 14, "context": "[15] showed that both the k-MCSP and MCSPc problems admit FPT algorithms when k and c are constant parameters.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "[8] proposed a O(2nnO(1)) time algorithm for the general case and an O(n(logn)2) time algorithm applicable under some constraints.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "To our knowledge, the only metaheuristic approaches that have been proposed in the related literature for the MCSP problem are (1) the MAX -MIN Ant System by Ferdous and Sohel [6, 7] and (2) the probabilistic tree search algorithm by Blum et al.", "startOffset": 176, "endOffset": 182}, {"referenceID": 6, "context": "To our knowledge, the only metaheuristic approaches that have been proposed in the related literature for the MCSP problem are (1) the MAX -MIN Ant System by Ferdous and Sohel [6, 7] and (2) the probabilistic tree search algorithm by Blum et al.", "startOffset": 176, "endOffset": 182}, {"referenceID": 0, "context": "[1].", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "Both works applied their algorithm to a range of artificial and real DNA instances from [6].", "startOffset": 88, "endOffset": 91}, {"referenceID": 5, "context": "For testing model Ilporig we chose the same set of benchmark instances that was used by Ferdous and Sohel in [6] for the experimental evaluation of their ant colony optimization approach.", "startOffset": 109, "endOffset": 112}, {"referenceID": 2, "context": "The second column contains the results of the greedy algorithm from [3] (results were taken from [6]).", "startOffset": 68, "endOffset": 71}, {"referenceID": 5, "context": "The second column contains the results of the greedy algorithm from [3] (results were taken from [6]).", "startOffset": 97, "endOffset": 100}, {"referenceID": 5, "context": "The third column provides the value of the best solution found in four independent runs per problem instance (with a CPU time limit of 7200 seconds per run) by the Aco approach by Ferdous and Sohel [6, 7].", "startOffset": 198, "endOffset": 204}, {"referenceID": 6, "context": "The third column provides the value of the best solution found in four independent runs per problem instance (with a CPU time limit of 7200 seconds per run) by the Aco approach by Ferdous and Sohel [6, 7].", "startOffset": 198, "endOffset": 204}, {"referenceID": 0, "context": "[1].", "startOffset": 0, "endOffset": 3}], "year": 2014, "abstractText": "The minimum common string partition problem is an NP-hard combinatorial optimization problem with applications in computational biology. In this work we propose the first integer linear programming model for solving this problem. Moreover, on the basis of the integer linear programming model we develop a deterministic 2-phase heuristic which is applicable to larger problem instances. The results show that provenly optimal solutions can be obtained for problem instances of small and medium size from the literature by solving the proposed integer linear programming model with CPLEX. Furthermore, new best-known solutions are obtained for all considered problem instances from the literature. Concerning the heuristic, we were able to show that it outperforms heuristic competitors from the related literature.", "creator": "LaTeX with hyperref package"}}}