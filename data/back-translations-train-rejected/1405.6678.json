{"id": "1405.6678", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-May-2014", "title": "Hybrid Type-Logical Grammars, First-Order Linear Logic and the Descriptive Inadequacy of Lambda Grammars", "abstract": "In this article we show that hybrid type-logical grammars are a fragment of first-order linear logic. This embedding result has several important consequences: it not only provides a simple new proof theory for the calculus, thereby clarifying the proof-theoretic foundations of hybrid type-logical grammars, but, since the translation is simple and direct, it also provides several new parsing strategies for hybrid type-logical grammars. Second, NP-completeness of hybrid type-logical grammars follows immediately. The main embedding result also sheds new light on problems with lambda grammars/abstract categorial grammars and shows lambda grammars/abstract categorial grammars suffer from problems of over-generation and from problems at the syntax-semantics interface unlike any other categorial grammar.", "histories": [["v1", "Mon, 26 May 2014 18:48:15 GMT  (80kb)", "http://arxiv.org/abs/1405.6678v1", null]], "reviews": [], "SUBJECTS": "cs.LO cs.CL", "authors": ["richard moot"], "accepted": false, "id": "1405.6678"}, "pdf": {"name": "1405.6678.pdf", "metadata": {"source": "CRF", "title": "Hybrid Type-Logical Grammars, First-Order Linear Logic and the Descriptive Inadequacy of Lambda Grammars", "authors": ["Richard Moot"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 140 5.66 78v1 [cs.LO] 2 6M ay2 014"}, {"heading": "Hybrid Type-Logical Grammars,", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "First-Order Linear Logic and the Descriptive", "text": "Inadequacy of Lambda Grammar"}, {"heading": "Richard Moot", "text": "27 May 2014"}, {"heading": "1 Introduction", "text": "In fact, most people are able to understand themselves and understand what they are doing. (...) Most people in the world do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...) They do not know what they are doing. (...). (...). (...). (...). (...). (...) \"(...). (\") \"(\"). \"(\") \"(\"). \")\" (\").\" (\")\" (\").\") \"(\"). \"(\"). \"(\") \")\" (\").\") \"(\"). \"(\") \").\" (\")\" (\").\") \"(\"). \"(\"). \").\" (\").\" (\").\"). \"(\"). \"(\"). \").\" (\").\"). \"(\"). \")."}, {"heading": "2 First-order Linear Logic", "text": "In fact, most of them are able to play by the rules that they have set themselves in order to play by the rules."}, {"heading": "2.1 MILL1", "text": "After this informal introduction to first-order linear logic, it is time to be a little more precise. Functional symbols are not needed in the current work, so terms are either variables with the designation x, y, z,... (an uncountable infinite number) or constants, for which I normally use integers 0, 1,..., creating a m-word string m + 1 string positions from 0 to m. The atomic formulas are of the form a (t1,..., tm) with ti-terms, a predicate symbol (we only need a limited, typically small number of predicate symbols, often only the following four: n for noun, np for noun phrase, s for sentence, pp for predicate phrase) and m for its activity. Our language does not contain an identity reference symbol \"=.\" Given this set of atomic formulas A and variable V, the set of formulas follows is defined."}, {"heading": "F ::= A | F \u22b8 V | \u2200V .F", "text": "In fact, it is the case that we will be able to manoeuvre ourselves into a situation in which we are in a position in which we are in."}, {"heading": "2.2 MILL1 with focusing and unification", "text": "The question we have to ask ourselves is whether we really want it or not. (...) The question we have to ask ourselves is whether we want it or not. (...) The question we have to ask ourselves is whether we want it or not. (...) The question we have to ask ourselves is whether we want it or not. (...) The question we have to ask ourselves is whether we want it or not. (...) The question we have to ask ourselves is whether we want it or not. (...) The question is whether we want it or not. (...) The question is whether we want it. (...) The question is whether we want it. (...) The question is whether we want it. (...) The question is whether we want it. (...) The question is whether we want it. (...) The question is whether we want it. (...) The question is whether we want it. (...) The question is whether we want it. (...)"}, {"heading": "Lexicon", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Axiom/Hypothesis", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Shift Focus", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Logical Rules", "text": "eSi rf\u00fc ide eeisrrrlleeeteeteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteerteeteerteerteerteerteerteeteerteerteeteerteerteeteeteerteeu rteeteee"}, {"heading": "2.3 Proof Nets", "text": "This year, it has come to the point where there is only one occasion when there is a scandal, and that is when there is a scandal."}, {"heading": "3 Basic Properties of the Simply Typed Lambda", "text": "Before introducing hybrid typlogic grammars, we will first review some basic properties of the single-typed lambda calculation that will prove useful for the following. This section is not meant to be a general introduction to the single-typed lambda calculation: We assume that the reader has at least some basic knowledge, as can be found in Chapter 3 of (Girard et al. 1988) or other textbooks and some knowledge of substitution and most generic unifiers. For further details and evidence of the lemmats and propositions of this section, the reader is referred to it (Hindley 2008). A note on notation: We are used exclusively as a type constructor (even if we know we are using it to type a linear Lambda term) and exclusively as a logical connective.Definition 3.1 A Lambda term M is a linear variable: a linear Lambda variable."}, {"heading": "3.1 Principal types", "text": "The main terms from Chapter 3 of (Hindley 2008) are as follows: Definition 3.6 (main type) A main type of a term M is a type \u03b1 of such that1. For a certain context, we have such a definition that we have one. Definition 3.7 (main type) A main type for a term M is a pair < p > in such a way that any other derivative with the term M: \u03b1 and for all \u03b2 is such that there is a substitution s with s (\u03b1) = \u03b2Definition 3.8 (main type). A main deduction for a term M is a derivative from a statement that any other derivative with the term M is an instance of the technique (i.e., obtained by applying a global substitution s to all types in evidence). It is clear from the above definitions that if it is a main deduction for the term M, any other derivative with the term M is an instance (i.e. we obtain by applying a substitution to all types in evidence)."}, {"heading": "3.2 The principal type algorithm", "text": "It is somewhat more general and calculates principal deductions. < p > p > p > p > p > p > p and p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p"}, {"heading": "3.3 Examples", "text": "To illustrate the main type algorithm, we give two examples in this section: As a first example, we calculate the main evidence for the C-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) x-shaped (f y) c-shaped (f y) x-shaped (f y) c-shaped (f y) c-shaped (c) c-shaped (c: c-y (f y) x-shaped (f y) x-shaped (f) x-shaped) f (f y) x-shaped."}, {"heading": "4 Hybrid Type-Logical Grammars", "text": "It's not as if it's a logical grammar. < < < / p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p > p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \".\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"p\" p \"\" p \"p\" p \"p\" \"p\" p \"\" p \"p\" \"p\" \"\" p \"\" p \"p\" \"p\" \"\" \"p\" \"p\" \"p\" \"p\" \"\" p \"\" \"p\" \"p\" \"\" \"p\" \"\" \"p\" \"\" \"\" p \"\" \"\" \"p\" \"p\" \"\" \"\" p \"\" \"\" \"p\" \"\" \"\" p \"\" \"\" \"\" \"\" p \"\" \"\" \"\" p \"\" \"\" \"\" p \"\" \"\" \"\" p \"\" \"\" \"\" \"\" p \"\" \"\" \"\" p \"\" \"\" \"\" p \"\" \"\" \"\" p \"\" \"\" \"\" \"\" p \"\" \"\" \"p\" \"\" \"\" \"\" \"p\" \"\" \"\" \"\" p \"\" \"\" \"p\" \"\" \"\" p \"\" \"\" \"\" \""}, {"heading": "Lexicon", "text": "xn \u2192 n \u2212 1: A M\u03b1: A"}, {"heading": "Axiom/Hypothesis", "text": "x\u03b1: A M\u03b1: A"}, {"heading": "Logical rules \u2013 Lambek", "text": "The terms presented are: A / B (MF), MF (A), MF (A), MF (A), MF (B), MD (B), S (A), S (E), S (E), M (N), S (E), S (A), S (B), S (B), S (B), S (D), S (S), S (F), S (E), S (E), S (E), A / B / IB (D), D: B (MD), E: As (B), S (D), S (D), S (D), S (F), Z), S (E), S (A), S (B), D: B (D), D (D), S (D), M), M (F), S (F), S (B)."}, {"heading": "4.1 Justification of the principal types for the new rules", "text": "For / E and / E, their main types are as follows: s1 (G), s1 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), s2 (G), 2 (G), 2 (G), s2 (G), s2 (G), G (G), s2 (G), G (G), s2 (G), G (G), 2 (G), 2 (G), 2 (G), 2 (G), 2 (G), 2 (G, 2 (G), 2 (G), 2 (G, 2 (G), 2 (G), s2 (G, 2 (G), s2 (G), s2 (G, s2 (G), s2 (G), s2 (G (G), s2 (G), s2 (G (G), s2 (G (G), s2 (G, s2 (G), s2 (G), s2 (G (G), s2 (G, s2 (G), s2 (G, s2 (G), s2 (G, s2 (G), s2 (G), s2 (G, s2 (G), s2 (G (G), s2 (G, s2 (G), s2 (G, s2 (G), s2 (G, s2 (G), s2 (G, s2 (G), s2 (G, s2 (G), s2 (G), s2 (G, s2 (G), s2 (G, s2 (G, s2),"}, {"heading": "4.2 Example", "text": "As an example for the calculation of the principle derivative, which corresponds to a hybrid derivative, we consider the following hybrid derivative: [x: np] [y: np\\ s] \u03bbz (x (y) z (e (y) v): s\\ E\u03bbx\u03bbz. (x (y) z): s / (np\\ s) / I25The corresponding principle derivative looks (for reasons of vertical space) as follows: the lexical derivative for e1 \u2192 0 is not eta-expanded to P\u03bbw. (P e) w, as it should achieve the given principle type instead of (1): (G) C, although both types will ultimately lead to the same result type, the eta-extended principle derivative (1) is not (P e) w. (P e) w, as it should achieve the given principle type instead of (1)) (G) \u2192 yy yyyy; although both types can be extended to the same principle derivative (eta) at the end of the same result (eta) (1)."}, {"heading": "4.3 Semantics", "text": "One of the attractive points of categorical grammars is that we have a very simple and elegant syntax-semantics interface (using the Curry-Howard isomorphism between intuitionistic proofs and lambda terms (or, in our case, between linear intuitionistic proofs and linear lambda terms).By interpreting the logical connectives for the implications of \"/,\" \"\" and \"\" as type constructor \"\u2192\" - formulas type interpretation - our derivatives in the Lambek calculation, in lambda grammars, in hybrid typological grammars, and in first order linear logic (where we treat the quantifier as semantically inert, that is, quantifier rules are \"invisible\" for meaning) correspond to the terms of precedence - the proofs of the terms x."}, {"heading": "5 Equivalence", "text": "For the main result, we only have to show that a hybrid principal type proof corresponds to a MILL1 proof, since we can reconstruct the lambda term from the main type. The basic idea that makes the correspondence work is that there is a 1-1 mapping between the atomic terms of a predicate in MILL1 and the main type associated with the corresponding term in a hybrid derivative. So, from the term assigned to a hybrid derivative, we calculate the main type using the Principal Type Algorithm (PTA), and this gives us the first-order variables, and from the first-order variables of a MILL1 derivative, we obtain the main type and a hybrid Lambda term thanks to the coherence theorem as shown below."}, {"heading": "5.1 String positions, types and formulas", "text": "Following Kanazawa (2011), we calculate this list by first taking the yield of the tree type and then inverting this list, which is handy for induction since it contains f (\u03b2).27Definition 5.1 Let us have a list f (\u03b1), the list f (\u03b1), the list f (\u03b1) is defined as follows.f (A) = [A] the single list containing the elements A and [A1). [An] the n-element list with the element Ai).27Definition 5.1 Let us define the list f (\u03b1) as identical."}, {"heading": "5.2 Proof-theoretic properties of the translation into MILL1", "text": "Before defining the main rule (possibly zero, like all other parts associated by the parent figure), a linear proof of its translation is necessary. (...) There is only one proof of the translation (...), which shows the translation of the parent rules of translation (...) that the translation of the parent rules of translation (...) is always only the translation of the parent rules of translation. \"(...) The figure shows the main track of a proof that begins either with a hypothesis or an axiom, followed by a focus shift that ends at the conclusion of the proof - this is only the definition of a main track (definition 2.3). The definition of formulas guarantees that the elimination part of the rules begins with any number of rules (...), like all other parts that end with the definition of the proof - this is only the definition of a main track (definition 2.3)."}, {"heading": "5.3 Hybrid proof to MILL1 proof", "text": "We show that under the given translation, the proofs correspond in hybrid typlogical grammars. Indeed, the proof is stronger: we show that proofs generate the same semantics in the two systems, which is easy to verify since, as discussed in Section 4.3, the elimination (or introduction) of the rules for elimination (or introduction) of the rule for elimination (or introduction) corresponds to the abstraction."}, {"heading": "5.4 MILL1 proof to hybrid proof", "text": "Lemma 5.10 Let us be the MILL1 derivative of the transmission of a hybrid sequence, that is, of A-A rule (0.1),., A-A-A-A-Type (0.1), A-Type (0.1), A-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.1), B-Type (0.2), B-Type (0.0.0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"}, {"heading": "5.5 Main Theorem", "text": "In fact, it is so that most of them are able to survive themselves, and that they are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...)"}, {"heading": "6 Comparison", "text": "The networks of evidence discussed in Section 2.3 provide a revealing opportunity to compare the various calculations discussed in this article with regard to their basic \"building blocks\" from the point of view of first-order linear logic. We must be careful, because this comparison only provides the conditions necessary to be in a particular fragment of first-order linear logic, and as such we can only use it as a diagnostic tool to show that possibilities are missing in a logic. We can directly use the various translation functions to provide sufficient conditions, and the conditions of the variables in the various fragments are also missing from the visual representation. Nevertheless, we will see that this comparison is instructive."}, {"heading": "6.1 A visual comparison of the different calculi", "text": "In fact, it is a political project that is about putting people's interests at the centre, not about putting people's interests at the centre, it is about putting people's interests at the centre, it is not about putting people's interests at the centre, it is about putting people's interests at the centre, it is about putting people's interests at the centre."}, {"heading": "7 Descriptive Inadequacy of Lambda Grammars", "text": "In fact, it is not that it is a way in which people are able to determine for themselves how they have behaved. (...) It is not that people are able to identify themselves as they do. (...) It is not that they do it. (...) It is that they do it. (...) It is not that they do it. (...) It is not that they do it. (...) It is that they do it. (...) It is that they do it. (...) It is that they do it. (...) It is not that they do it. \"(...) It is not that they do it. (...) It is that they do it, as if they do it. (...) It is not that they do it, as if they do it. (...) It is not that they do it, as if they do it. (...) It is not that they do it, as if they do it. (...) It is not that they do it, if they do it."}, {"heading": "7.1 Inhabitation machines", "text": "In order to show the main results, we need some additional terms of the typed lambda calculation. An inhabitation machine (see (Barendregt, Dekkers & Statman 2013) is a type of grammar that lists all possible terms of this type when specifying a type. Its use for categorical grammars was promoted by van Benthem (1995). Starting on page 33 of the (Barendregt et al. 2013) the following two-level grammar (defined by type-context pairs) lists all closed inhabitants in beta-normal eta-long form of a given font."}, {"heading": "7.2 Problems for lambda grammars", "text": "In this next section, we will show some problematic cases for lambda grammars, using residential machines to exploit all possible solutions and consider all of them to be insufficient."}, {"heading": "Adverbs", "text": "The first problem for lambda grammars | np is translating the Lambek formula of an adverb (as \"intentional,\" as it occurs in a sentence like \"Eduardo intentionally fell\" is (np\\ s) / (np\\ s) - it modifies a verb that has all the arguments except its subject and this verb sentence is on the immediate right of the adverb. If we translate this formula into a formula of first order and (where possible) adapt the quantifiers to the prefix and eliminate them, we get the formula (c, 2) s (c, D) s (c) s (c) s (E, 1) s (E, but we cannot use the quantifiers of the principle (2 \u2192 c). (1 \u2192 E) \u2192 D \u2192 E (with a fresh type constant), as it is unhabited.47The lambda grammar syntactic type (s)."}, {"heading": "Coordination", "text": "As noted by Kubota & Levine, the object we are discussing with TVTV2 is not. \"We can play a similar game for\" John catch and ate a fish, \"which looks like shown in Figure 14; therefore, for reasons of space, we cannot show the prefix\" Mary. \"(However, TV2 is the transitive verb to the right of\" and \"(\" ate \"in the current example), TV1 is the transitive verb to the left of it (\" trapped \"), NP1 is the object, NP2 is the object and z is the end of the complete verb to the right of\" and. \"(Remark that\" and \"takes all constituents as an argument: the two transitive verbs, the subject noun phrase and the object noun phrase, so it would seem that we have the right string.TV2 TVs TV2 we have previously split the nodes for readability; the actual diagram merges all.\""}, {"heading": "Gapping", "text": "As a final problem, the standard (multimodal) categorical grammar analysis of gapping (Hendriks 1995), of which we have seen the hybrid version in Section 5.1, is no better when we try to translate it into lambda grammar. Analyzing a sentence like (22) John studies logic and Charles Phonetics.would assign \"and\" the formula. \"(s | np) The idea behind Hendriks\" analysis (1995) is that \"and takes the first two sentences a transitive verb as the basis for argument, then a transitive verb to produce a sentence by putting the transitive verb back into its normal place in the first argument (which are the judgments to his left that miss a transitive verb) and the use of the empty string instead of the transitive verb in the second sentence.\""}, {"heading": "7.3 Solutions for lambda grammars", "text": "Given the descriptive challenges to lambda grammar, it seems natural to wonder how lambda grammar might evolve to meet these challenges. 1. Stasis. Keeping formalism and analysis as they are is a possible, if not very attractive, solution, since we would have to significantly reduce the ambitions of syntax semantics (the interface of formalism) (thereby losing one of the attractive aspects of categorical grammar). We can also opt for a descriptive inadequacy and use the result from (Buszkowski 1996), which, as discussed in Section 5.5, translates Lambek grammars into AB grammars while maintaining semantics, although at the cost of an explosion in lexicon size (as Pentus' original evidence from 1995) - to preserve at least most of the coverage of hybrid grammar."}, {"heading": "8 Conclusions", "text": "In this paper we have shown that Hybrid Type-Logical Grammars (Kubota & Levine 2013a) (and thus Lambda grammars / abstract categorical grammars) can be embedded in a first-order linear logic by means of a simple translation, formula for formula, and proof, which provides cleaner proof-theoretical foundations for Hybrid Type-Logical Grammars, but also suggests new ways of analyzing these grammars. As a direct consequence, we have also shown that Hybrid Type-Logical Grammars NP are complete (such as Lambda grammars and the Lambek calculation). We have also seen how this translation provides a new perspective on the known (but often ignored) problems of Lambda grammars with coordination, and demonstrated that the lack of left-right symmetry (or at least the lack of a way to imitate the Lambda grammar-logic introduction rules) can override the symmetry of the right-to the first-grammar coordination (or at least the possibility of a grammar coordination of a grammar)."}, {"heading": "Acknowledgments", "text": "This work is deeply indebted to Yusuke Kubota and Robert Levine, whose ESSLLI course in 2013 aroused my curiosity about both the evidence-theoretical aspects of hybrid typological grammar and the descriptive inadequacies of lambda grammars / abstract categorical grammars - the two main topics of the current paper. Early versions of these ideas were presented at the LIX Colloquium on Theory and Application of Formal Evidence (Palaiseau, November 2013), Computer Linguistics in the Netherlands (Leiden, January 2014) and the Polymnia Workshop (Toulouse, March 2014). I would like to thank everyone present for their questions and constructive comments, especially Crit Cremers, Philippe de Groote, Dominic Hughes and Dale Miller.Last but certainly not least, I would like to thank Michael Moortgat, Carl Pollard and Christian Retore for their discussion of the topics of this paper."}], "references": [], "referenceMentions": [], "year": 2014, "abstractText": "Hybrid type-logical grammars (Kubota & Levine 2012, Kubota & Levine 2013c, Kubota & Levine 2013a) are a relatively new framework in computational linguistics, which combines insights from the Lambek calculus (Lambek 1958) and lambda grammars (Oehrle 1994, Muskens 2001, Muskens 2003)\u2014 lambda grammars are also called, depending on the authors, abstract categorial grammars (de Groote 2001) and linear grammars (Pollard 2011), though with somewhat different notational conventions. The resulting combined system solves some know problems of both the Lambek calculus and of lambda grammars and the additional expressiveness of hybrid type-logical grammars permits the treatment of linguistic phenomena such as gapping which have no satisfactory solution in either subsystem. The goal of this paper is to prove that hybrid type-logical grammars are a fragment of first-order linear logic. This embedding result has several important consequences: it not only provides a simple new proof theory for the calculus, thereby clarifying the proof-theoretic foundations of hybrid type-logical grammars, but, since the translation is simple and direct, it also provides several new parsing strategies for hybrid type-logical grammars. Second, NP-completeness of hybrid type-logical grammars follows immediately. The main embedding result also sheds new light on problems with lambda grammars, which are a subsystem of hybrid type-logical grammars and hence a special case of the translation into first-order linear logic. Abstract categorial grammars are attractive both because of their simplicity \u2014 they use the simply", "creator": "LaTeX with hyperref package"}}}