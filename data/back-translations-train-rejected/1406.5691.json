{"id": "1406.5691", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Jun-2014", "title": "A CNL for Contract-Oriented Diagrams", "abstract": "We present a first step towards a framework for defining and manipulating normative documents or contracts described as Contract-Oriented (C-O) Diagrams. These diagrams provide a visual representation for such texts, giving the possibility to express a signatory's obligations, permissions and prohibitions, with or without timing constraints, as well as the penalties resulting from the non-fulfilment of a contract. This work presents a CNL for verbalising C-O Diagrams, a web-based tool allowing editing in this CNL, and another for visualising and manipulating the diagrams interactively. We then show how these proof-of-concept tools can be used by applying them to a small example.", "histories": [["v1", "Sun, 22 Jun 2014 09:41:24 GMT  (1380kb,D)", "http://arxiv.org/abs/1406.5691v1", null]], "reviews": [], "SUBJECTS": "cs.CL cs.FL", "authors": ["john j camilleri", "gabriele paganelli", "gerardo schneider"], "accepted": false, "id": "1406.5691"}, "pdf": {"name": "1406.5691.pdf", "metadata": {"source": "CRF", "title": "A CNL for Contract-Oriented Diagrams", "authors": ["John J. Camilleri", "Gabriele Paganelli", "Gerardo Schneider"], "emails": ["{john.j.camilleri@cse.gu.se,", "gabpag@chalmers.se,", "gerardo@cse.gu.se}"], "sections": [{"heading": null, "text": "Keywords: normative texts, electronic contracts, c-o diagrams, controlled natural language, grammatical framework"}, {"heading": "1 Introduction and background", "text": "But the separation between logical representations and the original texts of natural language is still great. CNLs can be particularly useful for specific areas where full language coverage is not required, or at least, if it is possible, to abstract from some irrelevant aspects. This allows the model to be reviewed on the modeled contracts. Our concern here is to simplify the process of writing and working with such models, which we do by defining a visual representation and logical syntax for formalism, along with a translation into time-controlled automata. This allows the model to be reviewed on the modeled contracts. Our concern is to simplify the process of writing and working with such models, which we do by defining a CNL that can uniquely translate into a C-O diagram. Specifically, the contributions of our paper are the following: 1. Syntactical extensions to C-O diagrams 3."}, {"heading": "1.2 Grammatical Framework", "text": "GF [3] is both a language for multilingual grammar development and a typetheoretical logical framework that provides a mechanism for mapping abstract logical expressions to a specific language. GF encodes the language-independent structure of an area in abstract syntax, while language-specific features can be defined in potentially multiple concrete languages. As GF provides both a parser and a lineariser between concrete and abstract languages, multilingual translation can be achieved using abstract syntax as interlinguality. GF also has a standard library called the Resource Grammar Library (RGL) [4]. This library shares a common abstract syntax and contains implementations of over 30 natural languages. Each resource grammar deals with language-specific details at a low level, such as word order and concordance. The general linguistic descriptions in the RL can be accessed by using a common language-independent API."}, {"heading": "2 Implementation", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Architecture", "text": "There is a front-end that deals with modeling contracts in a formal representation, and a back-end that uses formal methods to detect conflicts, verify properties, and process queries about the modeled contract. The back-end of our system is still under development and includes automatic translation of contracts into timed automata that can be processed using the UPPAAL [5] tool. The front-end that is at the center of this paper is a collection of web tools that communicate with our XML format called COML.1, which is very similar to the syntax of the C-O chart (fig. 1). The tools in our system allow us to express a contract as CNL text, spreadsheet, and C-O diagram. Every change in the diagram is automatically verbalized into CNL and vice versa. An orderly formatted spreadsheet can be converted into a COML file that is readable by the other editors."}, {"heading": "2.2 Editing tools", "text": "The Visual Editor allows the user to visually construct and edit C-O diagrams of the type shown in Section 4. It uses the mxGraph JavaScript library, which includes the components of the visual language, and multiple facilities such as the conversion and submission of the diagram to the CNL editor, the validation of the diagram, the conversion to PDF and PNG formats. The CNL text editor uses the ACE JavaScript library to provide a text editing interface within the browser. The user can verify that his CNL input is valid in terms of grammar by calling the GF web service. Errors in the CNL library are highlighted to the user. A valid text can then be translated by pressing a button in COML. 2.3 Syntactical extensions to C-O diagrams have a handler added to the diagrams 1. this includes two extensions to the C-O part of the diagram, another one to the C-O part of the handler."}, {"heading": "3 CNL", "text": "This section describes some of the remarkable design features of our CNL. Examples of CNL can be found in the example in Section 4."}, {"heading": "3.1 Grammar", "text": "The abstract syntax of GF closely matches the data type of Haskell designed for C-O diagrams, with changes made only to accommodate the specific constraints of GF. Optional arguments such as Guard are modeled with a category of MaybeGuard using two constructors noGuard and justGuard, the latter being a function that includes a list of Guard [Guard]. The same solution applies to time constraints. Since GF does not have type polymorphism, it is not possible to have a generalized perhaps type as in Haskell. To avoid ambiguities, lists themselves cannot be empty; the base constructor is for a single list. In addition to this abstract core syntax, which covers the syntax of the C-O diagram, GF grammar also imports phrasing build functions from the RGL as well as the extensive English dictionary DictEng with over 64,000 entries."}, {"heading": "3.2 Language features", "text": "In fact, most of them will be able to orient themselves in a different direction than in a different direction, namely the direction in which they are moving."}, {"heading": "4 Coffee machine example", "text": "It will do this interactively by switching between processing the CNL and the visual representation. To order a drink, the customer enters money and selects a drink. If the order is cancelled or nothing happens after 30 seconds, the money is returned. The machine only accepts euro coins. Eva must first identify when more money is needed; she can then add more coins or cancel the order. If the order is cancelled, the money is returned. The machine only accepts euro coins."}, {"heading": "5 Evaluation", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5.1 Metrics", "text": "The abstract GF syntax for basic C-O diagrams contains 48 rules, although the inclusion of large parts of the RGL for phrase building increases this number to 251. Including the extensive English dictionary, the grammar increases to 65,174 rules. By comparison, a previous similar work on a CNL for contract logic CL [7] had a GF grammar of 27 rules, or 2,987 if you include a small verb dictionary."}, {"heading": "5.2 Classification", "text": "Kuhn proposes the PENS scheme for the classification of CNLs [8]. We would classify the CNL presented in the current work as P5E1N2-3S4, F W D A. P (precision) is high because we implement a formal grammar; E (expressivity) is low because the CNL is limited to the expressivity of formalism; N (naturalness) is low because the overall structure is dominated by clause labels and balls; S (simplicity) is high because the language can be tersely described as GF grammar. In terms of CNL properties, this is a written (W) language for formal representation (F), which comes from the academic world (A) for use in a particular area (D). The P, E and S values correspond to the problem of verbalizing a formal system. The low N-number of 2-3 is, of course, the largest clause structure of CNL, but this may not be due to this very large CNL structure."}, {"heading": "6 Related work", "text": "C-O diagrams can be seen as a generalization of CL [9,10,11] in terms of expressiveness. 2 In a previous paper, Angelov et al. introduced a CNL for CL within the framework of AnaCon [7]. AnaCon allows for the verification of conflicts (conflicting obligations, permits and prohibitions) in normative texts using the CLAN tool [12]. Besides the underlying logical formalism, the biggest difference between AnaCon and current work is that we treat agents and actions as linguistic categories and not as simple strings. This allows for better consistency in the CNL, which lends itself to more natural verbalizations, as well as making it easier to translate the CNL into other natural languages. We also introduce the special treatment of two-point coordination and have a more general handling of lists as from our more expressive target language."}, {"heading": "7 Conclusion", "text": "This paper describes the first version of a CNL for C-O diagram formalism, along with web-based tools for building real-world models. The spreadsheet format mentioned in Figure 2 was not covered in this paper, but we strive to make it another entry point into our system. This format shows the mapping between the original text and the formal model by separating the relevant information about modality, agent, object and constraints into separate columns. As a first step, the input text can be split into one sentence per line, and for each line, the remaining cells can be semi-mechanically filled in. This will help the first part of the modeling process by generating a skeleton contract that the user can start with. We plan to expand the CNL and C chart editors with better user interfaces to facilitate the task of learning to use the respective representations, the help of debating."}, {"heading": "Acknowledgements", "text": "The authors would like to thank the Swedish Research Council for their financial support under funding number 2012-5746 and the anonymous reviewers for their suggestions, especially with regard to the CNL evaluation and classification according to the PENS scheme."}], "references": [{"title": "Specification and Verification of Normative texts using C-O Diagrams", "author": ["G. D\u0131\u0301az", "M.E. Cambronero", "E. Mart\u0301\u0131nez", "G. Schneider"], "venue": "IEEE Transactions on Software Engineering", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "A Model for Visual Specification of e-Contracts", "author": ["E. Mart\u0301\u0131nez", "E. Cambronero", "G. Diaz", "G. Schneider"], "venue": "IEEE SCC\u201910,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Grammatical Framework: Programming with Multilingual Grammars", "author": ["A. Ranta"], "venue": "CSLI Publications,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "The GF Resource Grammar Library", "author": ["A. Ranta"], "venue": "Linguistic Issues in Language Technology", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2009}, {"title": "Uppaal in a nutshell", "author": ["K.G. Larsen", "P. Pettersson", "W. Yi"], "venue": "International Journal on Software Tools for Technology Transfer", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "A Framework for Conflict Analysis of Normative Texts Written in Controlled Natural Language", "author": ["K. Angelov", "J.J. Camilleri", "G. Schneider"], "venue": "Journal of Logic and Algebraic Programming", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2013}, {"title": "A Survey and Classification of Controlled Natural Languages", "author": ["T. Kuhn"], "venue": "Computational Linguistics", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "A Formal Language for Electronic Contracts", "author": ["C. Prisacariu", "G. Schneider"], "venue": "FMOODS. Volume 4468 of LNCS.,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2007}, {"title": "An Action-based Logic for Reasoning about Contracts. In: WOLLIC\u201909", "author": ["C. Prisacariu", "Schneider", "G.: CL"], "venue": "Volume 5514 of LNCS.,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "A dynamic deontic logic for complex contracts", "author": ["C. Prisacariu", "G. Schneider"], "venue": "Journal of Logic and Algebraic Programming", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "CLAN: A Tool for Contract Analysis and Conflict Discovery. In: ATVA\u201909", "author": ["S. Fenech", "G.J. Pace", "G. Schneider"], "venue": "Volume 5799 of LNCS.,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2009}, {"title": "Attempto Controlled English (ACE) Language Manual, Version 3.0", "author": ["N.E. Fuchs", "U. Schwertel", "R. Schwitter"], "venue": "Technical Report 99.03,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1999}, {"title": "First-Order Reasoning for Attempto Controlled English", "author": ["N.E. Fuchs"], "venue": "CNL", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2010}, {"title": "Controlled English for Knowledge Representation", "author": ["T. Kuhn"], "venue": "Doctoral thesis, University of Zurich", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "In this work we take the C-O Diagram formalism for normative documents [1], which specifies a visual representation and logical syntax for the formalism, together with a translation into timed automata.", "startOffset": 71, "endOffset": 74}, {"referenceID": 0, "context": "1: Formal syntax of C-O Diagrams [1]", "startOffset": 33, "endOffset": 36}, {"referenceID": 1, "context": "[2], C-O Diagrams provide a means for visualising normative texts containing the modalities of obligation, permission and prohibition.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "GF [3] is both a language for multilingual grammar development and a typetheoretical logical framework, which provides a mechanism for mapping abstract logical expressions to a concrete language.", "startOffset": 3, "endOffset": 6}, {"referenceID": 3, "context": "GF also comes with a standard library called the Resource Grammar Library (RGL) [4].", "startOffset": 80, "endOffset": 83}, {"referenceID": 4, "context": "The back-end of our system is still under development, and involves the automatic translation of contracts into timed automata which can be processed using the UPPAAL tool [5].", "startOffset": 172, "endOffset": 175}, {"referenceID": 5, "context": "As a comparison, a previous similar work on a CNL for the contract logic CL [7] had a GF grammar of 27 rules, or 2,987 when including a small verb lexicon.", "startOffset": 76, "endOffset": 79}, {"referenceID": 6, "context": "Kuhn suggests the PENS scheme for the classification of CNLs [8].", "startOffset": 61, "endOffset": 64}, {"referenceID": 7, "context": "C-O Diagrams may be seen as a generalisation of CL [9,10,11] in terms of expressivity.", "startOffset": 51, "endOffset": 60}, {"referenceID": 8, "context": "C-O Diagrams may be seen as a generalisation of CL [9,10,11] in terms of expressivity.", "startOffset": 51, "endOffset": 60}, {"referenceID": 9, "context": "C-O Diagrams may be seen as a generalisation of CL [9,10,11] in terms of expressivity.", "startOffset": 51, "endOffset": 60}, {"referenceID": 5, "context": "introduced a CNL for CL in the framework AnaCon [7].", "startOffset": 48, "endOffset": 51}, {"referenceID": 10, "context": "AnaCon allows for the verification of conflicts (contradictory obligations, permissions and prohibitions) in normative texts using the CLAN tool [12].", "startOffset": 145, "endOffset": 149}, {"referenceID": 11, "context": "Attempto Controlled English (ACE) [13] is a controlled natural language for universal domain-independent use.", "startOffset": 34, "endOffset": 38}, {"referenceID": 12, "context": "It comes with a parser to discourse representation structures and a first-order reasoner RACE [14].", "startOffset": 94, "endOffset": 98}, {"referenceID": 13, "context": "While our initial prototypes have only limited features in this regard, we point to the ACE Editor, AceRules and AceWiki tools described in [15] as excellent examples of how UI design can help towards solving the problems of writability with CNLs.", "startOffset": 140, "endOffset": 144}], "year": 2014, "abstractText": "We present a first step towards a framework for defining and manipulating normative documents or contracts described as ContractOriented (C-O) Diagrams. These diagrams provide a visual representation for such texts, giving the possibility to express a signatory\u2019s obligations, permissions and prohibitions, with or without timing constraints, as well as the penalties resulting from the non-fulfilment of a contract. This work presents a CNL for verbalising C-O Diagrams, a web-based tool allowing editing in this CNL, and another for visualising and manipulating the diagrams interactively. We then show how these proof-ofconcept tools can be used by applying them to a small example.", "creator": "LaTeX with hyperref package"}}}