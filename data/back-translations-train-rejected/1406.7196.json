{"id": "1406.7196", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Jun-2014", "title": "Set Constraint Model and Automated Encoding into SAT: Application to the Social Golfer Problem", "abstract": "On the one hand, Constraint Satisfaction Problems allow one to declaratively model problems. On the other hand, propositional satisfiability problem (SAT) solvers can handle huge SAT instances. We thus present a technique to declaratively model set constraint problems and to encode them automatically into SAT instances. We apply our technique to the Social Golfer Problem and we also use it to break symmetries of the problem. Our technique is simpler, more declarative, and less error-prone than direct and improved hand modeling. The SAT instances that we automatically generate contain less clauses than improved hand-written instances such as in [20], and with unit propagation they also contain less variables. Moreover, they are well-suited for SAT solvers and they are solved faster as shown when solving difficult instances of the Social Golfer Problem.", "histories": [["v1", "Fri, 27 Jun 2014 14:37:12 GMT  (26kb)", "https://arxiv.org/abs/1406.7196v1", "Submitted to Annals of Operations research"], ["v2", "Mon, 30 Jun 2014 19:23:45 GMT  (23kb)", "http://arxiv.org/abs/1406.7196v2", "Submitted to Annals of Operations research"]], "COMMENTS": "Submitted to Annals of Operations research", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["fr\\'ed\\'eric lardeux", "eric monfroy", "broderick crawford", "ricardo soto"], "accepted": false, "id": "1406.7196"}, "pdf": {"name": "1406.7196.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Ricardo Soto"], "emails": ["Frederic.Lardeux@univ-angers.fr", "Eric.Monfroy@univ-nantes.fr", "broderick.crawford@ucv.cl", "ricardo.soto@ucv.cl"], "sections": [{"heading": null, "text": "ar Xiv: 140 6.71 96v2 [cs.AI] 30 Jun 20Our technique is simpler, more declarative and less error-prone than direct and improved hand modeling. The SAT instances that we automatically generate contain fewer clauses than improved handwritten instances as in [20], and with uniform propagation they also contain fewer variables. In addition, they are well suited for SAT solvers and they are solved more quickly, as has been shown in solving difficult instances of the social golfer problem. Keyword restriction programming \u00b7 CSP \u00b7 Setting restrictions \u00b7 SAT coding \u00b7 Social golfer problemsF. Lardeux Universite \u0301 d'Angers, France E-Mail: Frederic.Lardeux @ univ-angers.frE. Monfroy LINA, UMR CNRS 6241, Universite \u0301 de Nantes, France E-Mail: Eric.Monfroy @ univ-nesant.ford B. Crawdeux de Ponti\u00f1a de Chile Universidad de Catalundad 700dad Chile E-Mail: 700dad E-Vicidad Chile E-Mail: 0000"}, {"heading": "1 Introduction", "text": "Most of them are able to outwit themselves and others. (...) Most of them are able to outwit themselves. \"(p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p"}, {"heading": "2 Set Constraint Encoding", "text": "We present here the encoding of usual}, {"heading": "3 Models for the Social Golfer Problem", "text": "In this section, we describe various SAT-related models for the social golfer problem. 3.1 Direct EncodingIn order to present (and then compare) a SAT model for the social golfer problem that does not use any set constraints, we each give a model similar to the model of [20] (which was already a revision of [13]), without additional variables. The Boolean variables to be considered are each referred to as \"p,\" \"p,\" \"w\" (if gq, \"p,\" w \"applies) that the player is\" q \"the player\" -th player of group g \"of group g\" of week w \"with: - p\" the number of players in each group; - g \"the number of groups per week is from 1 to g,\" g \"the number of groups per week is true\"; - g \"the number of groups per week is\"; - q \"g\" that is from 1 to g. \""}, {"heading": "3.2.1 The Ladder matrix structure", "text": "In [13] a ladder matrix is used: The ladder matrix, introduced for the first time in [14], introduces a series of auxiliary variables g \"i, k, l\" i, p \"p\" = 1 g \"i, p,\" k. \"Intuitively, these new variables abstract the positions of players in the group. These new variables, together with the characteristics of the ladder matrix, are then used to model the socialization condition. The resulting constraints are somewhat less complex than the above socialization condition, but the ladder matrix introduces a\" middle level \"in the model that is not so easy to handle and not explicable. Moreover, it also derives from this model of more variables and more clauses."}, {"heading": "3.2.2 Intermediate variables", "text": "In [20], q.g.w intermediate variables g \"i,\" k \"l\" i \"i, l\" i, k \"l\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \"i\" i \""}, {"heading": "3.3.1 Set constraints model", "text": "The universe for this model is the number of players P = {p1,..., pq}, where q = g.p is the total number of players. We need the following variables to group G1,1,.., Gw, g. The set Gi, j is the group number j of week i and is above the support Gi, j = P. Each Gi, j contains p players from P. Note that the supports are minimal and cannot be reduced without losing solutions (or symmetrical solutions). We now specify the limitations of the social golfer problem.p player per group each week: wint i, j = wint player per group: wint i wint [1.. wint], wint j wint player from P [1.. g], gi wint player per week: wint i wint player per group, wint wg], wint wint wint player per week: wint i, wint wint wint wint, gp, wint wint wint player (1.. wint], wint wint winp, wint wint, wint wint winp, wint player per week: wint player from G1, wint G1, wint wint player, wint wint player, wint wint."}, {"heading": "3.3.2 SCE: Set Constraint Encoding", "text": "iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii"}, {"heading": "4 Symmetry Breaking for the Social Golfer Problem", "text": "In fact, it is a way in which most people are able to survive themselves, and in which most of them are able to survive themselves. (...) In fact, it is a way in which they are able to survive themselves. (...) In fact, it is a way in which they are able to survive themselves. (...) In fact, it is a way in which they are able to survive themselves. (...) It is a way in which they are able to survive themselves. (...) It is as if they are able to survive themselves. (...) It is as if they are able to survive themselves. (...) It is as if they are able to survive themselves."}, {"heading": "4.2.1 Symmetry breaking for the set constraint model by adding constraints", "text": "In this section, constraints are added to the original model to break symmetries. For SB1, we just need to add the following simple constraints to the model of the SCE."}, {"heading": "4.2.2 Symmetry breaking for the set constraint model by modifying the model", "text": "Modifying the model is more tedious."}, {"heading": "5 Comparisons of Models", "text": "It is one of the largest nodes in the history of the EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-EWS-E"}, {"heading": "6 Experimental Analysis", "text": "In the previous section, we showed that SCE enables us to reach the smallest instances with the propagation. The use of symmetry breakers also reduces the size of the SAT instances. It may happen that symmetry breakers complicate the resolution. In this section, we will compare the efficiency of encryption in terms of runtime. Compared to our used solutions (such as local search), we can divide the search space and find a way to find a solution. In this section, we will compare the efficiency of encryption in terms of runtime."}, {"heading": "7 Discussion", "text": "This year, the time has come for the EU Commission to find a solution that will enable the EU member states to overcome the EU accession hurdle, to overcome the EU accession hurdle and to overcome the EU accession hurdle."}, {"heading": "8 Conclusion", "text": "We have presented a technique for encoding settings in SAT: the problem of modeling is achieved by means of some very declarative set constraints, which are then automatically converted into SAT variables and clauses that use our respective encoding rules. This technique has been successfully applied to encode the social golfer problem and examine some symmetries that point to this problem. The advantages of our technique are the following: - the modeling process is simple, declarative and readable; furthermore, it is independent and independent of CSP or SAT; - the technique is less error-prone than the handwritten SAT encodings; - the breaking of symmetries can be achieved simply by adding new constraints or refining the model (this cannot be done with direct encodings such as DE or TME); - the SAT instances that are automatically generated are smaller than those of the [20] that are written and improved."}], "references": [{"title": "An attempt to dynamically break symmetries in the social golfers problem", "author": ["F. Azevedo"], "venue": "F. Azevedo, P. Barahona, F. Fages, F. Rossi (eds.) CSCLP, Lecture Notes in Computer Science, vol. 4651, pp. 33\u201347. Springer", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2006}, {"title": "Gac via unit propagation", "author": ["F. Bacchus"], "venue": "Proc. of CP 2007, LNCS, vol. 4741, pp. 133\u2013147. Springer", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2007}, {"title": "Efficient cnf encoding of boolean cardinality constraints", "author": ["O. Bailleux", "Y. Boufkhad"], "venue": "Proc. of CP 2003, vol. 2833, pp. 108\u2013122. Springer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2003}, {"title": "Local consistencies in sat", "author": ["C. Bessi\u00e8re", "E. Hebrard", "T. Walsh"], "venue": "Selected Revised Papers of SAT 2003., LNCS, vol. 2919, pp. 299\u2013314. Springer", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2004}, {"title": "Scheduling social golfers with memetic evolutionary programming", "author": ["C. Cotta", "I. Dot\u00fa", "A.J. Fern\u00e1ndez", "P.V. Hentenryck"], "venue": "Proc. of HM 2006, LNCS, vol. 4030, pp. 150\u2013 161. Springer", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2006}, {"title": "Symmetry-breaking predicates for search problems", "author": ["J.M. Crawford", "M.L. Ginsberg", "E.M. Luks", "A. Roy"], "venue": "Proc. of KR\u201996, pp. 148\u2013159. Morgan Kaufmann", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1996}, {"title": "Effective preprocessing in sat through variable and clause elimination", "author": ["N. E\u00e9n", "A. Biere"], "venue": "Proc. of SAT 2005, vol. 3569, pp. 61\u201375", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2005}, {"title": "An extensible sat-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "Proc. of SAT 2003, vol. 2919, pp. 502\u2013518", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2003}, {"title": "Breaking row and column symmetries in matrix models", "author": ["P. Flener", "A.M. Frisch", "B. Hnich", "Z. Kiziltan", "I. Miguel", "J. Pearson", "T. Walsh"], "venue": "Proc. of CP 2002, vol. 2470, pp. 462\u2013476. Springer", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2002}, {"title": "Global constraints for lexicographic orderings", "author": ["A.M. Frisch", "B. Hnich", "Z. Kiziltan", "I. Miguel", "T. Walsh"], "venue": "Proc. of CP 2002, vol. 2470, pp. 93\u2013108. Springer", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2002}, {"title": "Computers and Intractability, A Guide to the Theory of NP-Completeness", "author": ["M.R. Garey", "D.S. Johnson"], "venue": "W.H. Freeman & Company", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1979}, {"title": "A sat encoding for the social golfer problem", "author": ["I. Gent", "I. Lynce"], "venue": "IJCAI\u201905 workshop on modelling and solving problems with constraints", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2005}, {"title": "An empirical study of the stable marriage problem with ties and incomplete lists", "author": ["I.P. Gent", "P. Prosser"], "venue": "Proc. of ECAI\u20192002, pp. 141\u2013145. IOS Press", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2002}, {"title": "CSPLib: A benchmark library for constraints", "author": ["I.P. Gent", "T. Walsh"], "venue": "Proc. of CP 1999, LNCS, vol. 1713, pp. 480\u2013481. Springer", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1999}, {"title": "Conjunto: Constraint propagation over set constraints with finite set domain variables", "author": ["C. Gervet"], "venue": "Proc. of ICLP\u201994, p. 733. MIT Press", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1994}, {"title": "Sat encoding and csp reduction for interconnected alldiff constraints", "author": ["F. Lardeux", "E. Monfroy", "F. Saubion", "B. Crawford", "C. Castro"], "venue": "Proc. of MICAI 2009, pp. 360\u2013371", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2009}, {"title": "Short overview of the clps system", "author": ["B. Legeard", "E. Legros"], "venue": "Proc. of PLILP\u201991, vol. 528, pp. 431\u2013433. Springer", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1991}, {"title": "Handbook of Constraint Programming", "author": ["F. Rossi", "P. van Beek", "Walsh", "T. (eds."], "venue": "Elsevier", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2006}, {"title": "An improved sat formulation for the social golfer problem", "author": ["M. Triska", "N. Musliu"], "venue": "Annals of Operations Research 194(1), 427\u2013438", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 18, "context": "The SAT instances that we automatically generate contain less clauses than improved hand-written instances such as in [20], and with unit propagation they also contain less variables.", "startOffset": 118, "endOffset": 122}, {"referenceID": 17, "context": "1 Introduction Most of combinatorial problems can be formulated as Constraint Satisfaction Problems (CSP) [19].", "startOffset": 106, "endOffset": 110}, {"referenceID": 10, "context": "On the other hand, the propositional satisfiability problem (SAT) [12] is restricted (in terms of declarativity) to Boolean variables and propositional formulae.", "startOffset": 66, "endOffset": 70}, {"referenceID": 1, "context": ", [3,5]) in order to benefit from the declarativity of CSP and the power of SAT, or 2) introduce more declarativity into SAT, for example with global constraints (e.", "startOffset": 2, "endOffset": 7}, {"referenceID": 3, "context": ", [3,5]) in order to benefit from the declarativity of CSP and the power of SAT, or 2) introduce more declarativity into SAT, for example with global constraints (e.", "startOffset": 2, "endOffset": 7}, {"referenceID": 15, "context": ", alldifferent [17], cardinality [4]).", "startOffset": 15, "endOffset": 19}, {"referenceID": 2, "context": ", alldifferent [17], cardinality [4]).", "startOffset": 33, "endOffset": 36}, {"referenceID": 16, "context": "Various systems of set constraints (either specialized systems [18], libraries for constraint programming systems such as [16], or the set constraint library of CHOCO [1]) have been designed for solving problems such as prototyping combinatorial problems, axiomatization of set theory, analysis of programs,.", "startOffset": 63, "endOffset": 67}, {"referenceID": 14, "context": "Various systems of set constraints (either specialized systems [18], libraries for constraint programming systems such as [16], or the set constraint library of CHOCO [1]) have been designed for solving problems such as prototyping combinatorial problems, axiomatization of set theory, analysis of programs,.", "startOffset": 122, "endOffset": 126}, {"referenceID": 18, "context": "Coding set constraints directly into SAT is a tedious tasks (see for example [20] or [13]).", "startOffset": 77, "endOffset": 81}, {"referenceID": 11, "context": "Coding set constraints directly into SAT is a tedious tasks (see for example [20] or [13]).", "startOffset": 85, "endOffset": 89}, {"referenceID": 13, "context": "We illustrate our approach with the Social Golfer Problem (problem number 10 of the CSPLib [15]).", "startOffset": 91, "endOffset": 95}, {"referenceID": 18, "context": "Compared to direct encodings (such as the one of [20]), the instances we generate are smaller (less clauses), and also contain less variables using unit propagation.", "startOffset": 49, "endOffset": 53}, {"referenceID": 7, "context": "Using Minisat [9], our automatically generated instances (with or without symmetry breaking) are solved faster than the ones of [20].", "startOffset": 14, "endOffset": 17}, {"referenceID": 18, "context": "Using Minisat [9], our automatically generated instances (with or without symmetry breaking) are solved faster than the ones of [20].", "startOffset": 128, "endOffset": 132}, {"referenceID": 1, "context": "We can compare our work with works of different types, first of all with SAT encoding techniques such as [3] and [5].", "startOffset": 105, "endOffset": 108}, {"referenceID": 3, "context": "We can compare our work with works of different types, first of all with SAT encoding techniques such as [3] and [5].", "startOffset": 113, "endOffset": 116}, {"referenceID": 18, "context": ", the Social Golfer Problem, the closest work is [20] which is a revision and improvement of [13].", "startOffset": 49, "endOffset": 53}, {"referenceID": 11, "context": ", the Social Golfer Problem, the closest work is [20] which is a revision and improvement of [13].", "startOffset": 93, "endOffset": 97}, {"referenceID": 18, "context": "[20] also proposes various symmetry breaking techniques to improve the model; some of these symmetries naturally disappear using our set constraint model (for example, we do not have the permutations due to numbering of groups within a week).", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "In [6], the Social Golfer Problem is modeled with a combination of set constraints and arithmetic constraints.", "startOffset": 3, "endOffset": 6}, {"referenceID": 15, "context": "Finally, our approach is similar to [17] in which alldifferent global constraints and overlapping alldifferent constraints are handled declaratively before being encoded automatically in SAT using rewrite rules.", "startOffset": 36, "endOffset": 40}, {"referenceID": 2, "context": "Note also that we use the work of [4] about the cardinality global constraint in order to perform the encoding of set cardinality.", "startOffset": 34, "endOffset": 37}, {"referenceID": 2, "context": "This constraint has been studied for the encoding of global constraints, see for example [4].", "startOffset": 89, "endOffset": 92}, {"referenceID": 2, "context": "This encoding is presented in [4] with two main components: the totalizer and the comparator.", "startOffset": 30, "endOffset": 33}, {"referenceID": 18, "context": "1 Direct Encoding In order to present (and then compare) a SAT model for the Social Golfer Problem which does not use set constraints, we give here a model, similar to the one of [20] (which was already a revision of [13]) without auxiliary variables.", "startOffset": 179, "endOffset": 183}, {"referenceID": 11, "context": "1 Direct Encoding In order to present (and then compare) a SAT model for the Social Golfer Problem which does not use set constraints, we give here a model, similar to the one of [20] (which was already a revision of [13]) without auxiliary variables.", "startOffset": 217, "endOffset": 221}, {"referenceID": 11, "context": "1 The Ladder matrix structure In [13] a ladder matrix is used: the ladder matrix, which was first presented in [14], introduces a set of auxiliary variables g i,k,l \u2194 \u2228p p\u2032=1 g \u2032 i,p\u2032,k,l.", "startOffset": 33, "endOffset": 37}, {"referenceID": 12, "context": "1 The Ladder matrix structure In [13] a ladder matrix is used: the ladder matrix, which was first presented in [14], introduces a set of auxiliary variables g i,k,l \u2194 \u2228p p\u2032=1 g \u2032 i,p\u2032,k,l.", "startOffset": 111, "endOffset": 115}, {"referenceID": 18, "context": "2 Intermediate variables In [20], q.", "startOffset": 28, "endOffset": 32}, {"referenceID": 18, "context": "The complexity of the Triska-Musliu encoding [20] (Formulae (1)\u2013(5), (7), and (8)) is thus O(w.", "startOffset": 45, "endOffset": 49}, {"referenceID": 11, "context": "[13] proposes some clauses to remove symmetries among players, to order groups within a week with respect to their first player, to order lexicographically the weeks with respect to the second player in the first group of each week, .", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "Indeed, [20] revised the clauses for symmetry breaking of [13] in order to correct the ranges of the various \u2228", "startOffset": 8, "endOffset": 12}, {"referenceID": 11, "context": "Indeed, [20] revised the clauses for symmetry breaking of [13] in order to correct the ranges of the various \u2228", "startOffset": 58, "endOffset": 62}, {"referenceID": 9, "context": "More symmetries can be broken, such as in [11] or [10].", "startOffset": 42, "endOffset": 46}, {"referenceID": 8, "context": "More symmetries can be broken, such as in [11] or [10].", "startOffset": 50, "endOffset": 54}, {"referenceID": 5, "context": "All symmetries can be broken, such as shown in [7], but this is often at the cost of a super exponential number of constraints.", "startOffset": 47, "endOffset": 50}, {"referenceID": 18, "context": "1 Symmetry Breaking for TME In [20], three types of symmetry breaking are added to the TME encoding.", "startOffset": 31, "endOffset": 35}, {"referenceID": 11, "context": "Since our model is different from the one of [13,20], we do not obtain the same symmetries.", "startOffset": 45, "endOffset": 52}, {"referenceID": 18, "context": "Since our model is different from the one of [13,20], we do not obtain the same symmetries.", "startOffset": 45, "endOffset": 52}, {"referenceID": 11, "context": "However, we try to break similar symmetries as in [13,20].", "startOffset": 50, "endOffset": 57}, {"referenceID": 18, "context": "However, we try to break similar symmetries as in [13,20].", "startOffset": 50, "endOffset": 57}, {"referenceID": 18, "context": "This approximately corresponds to group (23) of constraints of [20].", "startOffset": 63, "endOffset": 67}, {"referenceID": 18, "context": "Table 2 Size of instances generated using the direct encoding (DE), the Triska and Musliu encoding (TME) [20], the set constraints encoding (with unit propagation post-process (SCEUP) and without (SCE)).", "startOffset": 105, "endOffset": 109}, {"referenceID": 18, "context": "2 Model Structure In order to compare our set constraint encoding, we generate a set of social golfer instances with: the direct encoding DE, the Triska-Musliu encoding (TME) proposed in [20], and our set constraint encoding with unit propagation post-treatment (SCEUP) and without (SCE).", "startOffset": 187, "endOffset": 191}, {"referenceID": 18, "context": "To compare our set constraints encoding with Triska-Musliu [20] encoding, we use the well known solver Minisat [9].", "startOffset": 59, "endOffset": 63}, {"referenceID": 7, "context": "To compare our set constraints encoding with Triska-Musliu [20] encoding, we use the well known solver Minisat [9].", "startOffset": 111, "endOffset": 114}, {"referenceID": 6, "context": "Since some few years, a pre-treatment named SatELite [8] has been added to Minisat in order to drastically reduce the number of clauses (e.", "startOffset": 53, "endOffset": 56}, {"referenceID": 14, "context": "Set constraints in constraint programming The declarativity of set constraints in constraint programming (such as in [16] or in [18]) is more or less the same as the one of our set constraints in terms of sets: that was our goal.", "startOffset": 117, "endOffset": 121}, {"referenceID": 16, "context": "Set constraints in constraint programming The declarativity of set constraints in constraint programming (such as in [16] or in [18]) is more or less the same as the one of our set constraints in terms of sets: that was our goal.", "startOffset": 128, "endOffset": 132}, {"referenceID": 14, "context": "However, our approach is different: in systems such as [16] or [1], sets constraints are not the only constraints, but a special set solver has to be designed to solve these models.", "startOffset": 55, "endOffset": 59}, {"referenceID": 14, "context": "For example, the mechanism of [16] consists in reducing the domain of the sets by working on lower and upper bounds of the sets and to combine this process with search.", "startOffset": 30, "endOffset": 34}, {"referenceID": 14, "context": "Such a process could be similar to one application of the first phase of the mechanism of [16] without search.", "startOffset": 90, "endOffset": 94}, {"referenceID": 0, "context": "Note also that in [2] some comparisons of set constraint solvers in constraint programming are given for the social golfer problem.", "startOffset": 18, "endOffset": 21}], "year": 2014, "abstractText": "On the one hand, Constraint Satisfaction Problems allow one to declaratively model problems. On the other hand, propositional satisfiability problem (SAT) solvers can handle huge SAT instances. We thus present a technique to declaratively model set constraint problems and to encode them automatically into SAT instances. We apply our technique to the Social Golfer Problem and we also use it to break symmetries of the problem. Our technique is simpler, more declarative, and less error-prone than direct and improved hand modeling. The SAT instances that we automatically generate contain less clauses than improved hand-written instances such as in [20], and with unit propagation they also contain less variables. Moreover, they are well-suited for SAT solvers and they are solved faster as shown when solving difficult instances of the Social Golfer Problem.", "creator": "LaTeX with hyperref package"}}}