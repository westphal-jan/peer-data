{"id": "1408.6520", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Aug-2014", "title": "Knowledge Engineering for Planning-Based Hypothesis Generation", "abstract": "In this paper, we address the knowledge engineering problems for hypothesis generation motivated by applications that require timely exploration of hypotheses under unreliable observations. We looked at two applications: malware detection and intensive care delivery. In intensive care, the goal is to generate plausible hypotheses about the condition of the patient from clinical observations and further refine these hypotheses to create a recovery plan for the patient. Similarly, preventing malware spread within a corporate network involves generating hypotheses from network traffic data and selecting preventive actions. To this end, building on the already established characterization and use of AI planning for similar problems, we propose use of planning for the hypothesis generation problem. However, to deal with uncertainty, incomplete model description and unreliable observations, we need to use a planner capable of generating multiple high-quality plans. To capture the model description we propose a language called LTS++ and a web-based tool that enables the specification of the LTS++ model and a set of observations. We also proposed a 9-step process that helps provide guidance to the domain expert in specifying the LTS++ model. The hypotheses are then generated by running a planner on the translated LTS++ model and the provided trace. The hypotheses can be visualized and shown to the analyst or can be further investigated automatically.", "histories": [["v1", "Wed, 27 Aug 2014 15:14:11 GMT  (1105kb,D)", "http://arxiv.org/abs/1408.6520v1", "This paper appears in the Proceedings of the Automated Planning and Scheduling (ICAPS) Workshop on Knowledge Engineering for Planning and Scheduling (KEPS)"]], "COMMENTS": "This paper appears in the Proceedings of the Automated Planning and Scheduling (ICAPS) Workshop on Knowledge Engineering for Planning and Scheduling (KEPS)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["shirin sohrabi", "octavian udrea", "anton v riabov"], "accepted": false, "id": "1408.6520"}, "pdf": {"name": "1408.6520.pdf", "metadata": {"source": "CRF", "title": "Knowledge Engineering for Planning-Based Hypothesis Generation", "authors": ["Shirin Sohrabi", "Octavian Udrea", "Anton V. Riabov"], "emails": ["riabov}@us.ibm.com"], "sections": [{"heading": "Introduction", "text": "Several application scenarios require the construction of hypotheses that provide an alternative explanation for a sequence of potentially unreliable observations. (For example, the evolution of the patient's condition over time in an intensive care unit (ICU) of a hospital can then be derived from a variety of measurements. Similarly, network traffic observations can point to possible malware. The hypotheses, which are presented as a sequence of changes in patient status, aim to provide an explanation for these observations while providing deeper insights into the actual underlying problems for these observations and help make decisions about further tests, treatments or other actions. Expert assessment is the primary method used for generating hypotheses and evaluating their plausibility. Automated methods have been proposed to help the expert improve accuracy and scalability. Remarkable diagnostic methods can help us determine whether observations can be explained by a 1999 model (e.g. Cass et)."}, {"heading": "Application Description", "text": "This year it is so far that it is only a matter of time before it will be so far, until it will be so far."}, {"heading": "Architecture", "text": "Our work on automated hypotheses research focuses on the generation of hypotheses, which is part of a larger automated data analysis system comprising sensors, actuators, multiple analytical platforms and a tactical planner. For the purpose of this paper, the tactical planner should be considered a component responsible for executing certain strategic actions, and it can be implemented, for example, using a classical planner to compile analyses (Bouillet et al. 2009). A high-level overview of the entire system architecture is shown in Figure 2. All components of the architecture, with the exception of application-specific analyses, sensors and actuators, are designed to be reused without modification in a variety of application areas. The system receives input from sensors, and analytics translates sensor data into observations. The hypotheses generator interprets the observations from analytics and generates hypotheses about the state of entities in different application areas."}, {"heading": "Strategic Planner", "text": "The Strategic Planner evaluates these hypotheses and, in response, initiates preventive or testing measures. Some of the testing measures can be implemented as additional data processing and set new goals for the Tactical Planner, which compiles and deploys analyses across multiple analysis platforms. A Hadoop cluster, for example, can be used as an analytical platform for offline analysis of historical data collected in one or more data stores. Alternatively, a stream computing cluster can be used to quickly analyze online new data received by the sensors. Preventive measures, as well as some of the test actions, are sent to actors. There is no expectation that each actuation request will be successful or always happens immediately."}, {"heading": "Hypothesis Generation via Planning", "text": "In this section, we define the generational problem hypothesis and describe its relationship to planning. We also offer experimental evaluation that supports the premise of using planning to generate multiple plausible hypotheses. In the next section, we will describe how the planning model can be captured using the LTS + + language, which we translate into a planning problem. Our tool, LTS + + Hypothesis Generator, then uses planning to calculate plausible hypotheses and present them to the user. According to our recent work (Sohrabi, Udrea and Riabov 2013), a dynamic system is defined as \u03a3 = (F, A, I), where F is a finite set of flowing symbols, A is a set of measures with preconditions and effects that describe measures that take into account possible transitions of the state of the entity (e.g. patient or host), as well as the disard action that deals with unreliable observations by not explaining observations."}, {"heading": "Computing Plausible Hypotheses", "text": "To address the uncertainty, unreliability of the observations, and incomplete model description, we need to create several high-quality (or low-cost) plans that correspond to a number of plausible hypotheses. To this end, we adapt our implementation to the hypothesis creation of (Sohrabi, Udrea, and Riabov 2013). We encode the notion of plausibility as the cost of action. In particular, we assign high costs to the fault action to encourage more observations. Furthermore, we assign higher costs to all cases of actions that represent \"bad\" behavior than those that represent \"good\" behavior. Furthermore, we assume that shorter / simpler plans are more plausible. To respond to the observations, we compile them in a similar way in our coding using a technique proposed in (Haslum and Grastien 2011). The planning problem is described in PDDL."}, {"heading": "Experimental Evaluation", "text": "The experiments we describe in this section help to assess the response time and accuracy of our approach. Specifically, these experiments show that our approach to the use of planning is promising, and these experiments were reported in (Sohrabi, Udrea, and Riabov 2013). We evaluated performance by providing both a hand-picked description of the malware detection problem and a set of automatically generated state transitional systems with 60% bad and 40% good states.To evaluate performance, we introduce the concept of basic truth. In all experiments, the problem cases are generated by traversing the lifecycle diagram (similar to Figure 1 (a) in a random gear, adding missing and inconsistent observations with low probability. We then measure performance by comparing the hypotheses produced with the truth and looking at it by solving the problem for our purposes."}, {"heading": "LTS++ Model", "text": "To help new users, we have developed a web-based tool for generating hypotheses and developing state transition models that we use in our experiments and applications. In particular, we have developed a language called LTS + +, derived from LTS (Labeled Transition System) (Magee and Kramer 2006), for defining models for generating hypotheses and linking observation types with states. In this section, we describe a process that the user or domain expert could go through to define an LTS + + model, and we will also describe the LTS + + IDE and LTS + + syntax."}, {"heading": "Steps in Creating an LTS++ Model", "text": "In fact, it is such that most of them will be able to move into a different world, in which they are able to live, in which they are able to move, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they live, in which they, in which they live, in which they, in which they live, in which they live, in which they live, in which they live, in which they live."}, {"heading": "Generating Hypotheses via LTS++ IDE", "text": "In this section, we will first explain how to enter observations into the LTS + + IDE and then go through a series of examples for our two applications and explain how to interpret the generated results. This is the last step of LTS + + model creation (i.e. step 9, test).Observations can be entered by clicking on the \"Next: edit trace\" from the LTS + + IDE main page in Figure 4. Figure 7 (a) shows an example where the first observation is selected to download an executable program, and the second observation is now selected from the drop-down menu. Once the trace selection is complete, the hypotheses can be generated by clicking on \"Generate hypotheses.\" The hypotheses are presented to the user per page 10, and the user can navigate through these pages. The next 10 hypotheses are created as soon as the user clicks on the \"Next.\" Note: The trace editor test is mainly for malware."}, {"heading": "27 IBM and Customer Confidential", "text": "Figure 7 (c): Malware Example 2 Figure 7 (d): Intensive Care Example 132 IBM and Customer Confidential30 IBM and Customer ConfidentialFigure 7 (e): Intensive Care Example 2 Figure 7 (f): Intensive Care Example 3 and Intensive Care Examples; these results are automatically generated by our tool. Each hypothesis is presented as a sequence of states corresponding to the observed sequence of events (dashed green lines). Observations explained by a state are presented in green ovals, and unexplained observations are displayed in violet. The arrows between the observations show the sequence of observations in the track. The states shown in red are the bad states and the good states shown in blue. Each hypothesis is associated with costs. The lower the costs, the more plausible the hypothesis. Figure 7 (b) shows the top 3 hypotheses generated for the hypotheses shown in Figure 7 (both our first observations explained)."}, {"heading": "Summary and Discussion", "text": "To this end, we have proposed a modeling language called LTS + + and a web-based tool that allows a model to be specified using the LTS + + language. We have also proposed a 9-step process to help the domain expert define the LTS + + model. Our tool, LTS + + IDE, features syntax highlighting, error detection, and visualization of the state transition diagram; hypotheses are generated by executing a planner capable of creating multiple high-quality plans for the translated LTS + + model and the track provided; hypotheses can be visualized and shown to the analyst (physician or network administrator), or can be further examined automatically by the Strategic Planner (see Architecture section) to perform tests or preventive actions."}], "references": [{"title": "Alarm processing with model-based diagnosis of discrete event systems", "author": ["Bauer"], "venue": "In Proceedings of the 22nd International Workshop on Principles of Diagnosis (DX),", "citeRegEx": "Bauer,? \\Q2011\\E", "shortCiteRegEx": "Bauer", "year": 2011}, {"title": "Mario: middleware for assembly and deployment of multi-platform flowbased applications", "author": ["Bouillet"], "venue": "In Proceedings of the 10th ACM/IFIP/USENIX International Conference on Middleware (Middleware),", "citeRegEx": "Bouillet,? \\Q2009\\E", "shortCiteRegEx": "Bouillet", "year": 2009}, {"title": "and Lafortune", "author": ["C. Cassandras"], "venue": "S.", "citeRegEx": "Cassandras and Lafortune 1999", "shortCiteRegEx": null, "year": 1999}, {"title": "Deterministic planning in the 5th international planning competition: PDDL3 and experimental evaluation of the planners", "author": ["Gerevini"], "venue": "Artificial Intelligence", "citeRegEx": "Gerevini,? \\Q2009\\E", "shortCiteRegEx": "Gerevini", "year": 2009}, {"title": "Coming up with good excuses: What to do when no plan can be found", "author": ["G\u00f6belbecker"], "venue": "In Proceedings of the 20th International Conference on Automated Planning and Scheduling (ICAPS),", "citeRegEx": "G\u00f6belbecker,? \\Q2010\\E", "shortCiteRegEx": "G\u00f6belbecker", "year": 2010}, {"title": "Diagnosis of discrete-event systems using satisfiability algorithms", "author": ["Grastien"], "venue": "In Proceedings of the 22nd National Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Grastien,? \\Q2007\\E", "shortCiteRegEx": "Grastien", "year": 2007}, {"title": "and Grastien", "author": ["P. Haslum"], "venue": "A.", "citeRegEx": "Haslum and Grastien 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "and Geffner", "author": ["E. Keyder"], "venue": "H.", "citeRegEx": "Keyder and Geffner 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "and Kramer", "author": ["J. Magee"], "venue": "J.", "citeRegEx": "Magee and Kramer 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "D", "author": ["McDermott"], "venue": "V.", "citeRegEx": "McDermott 1998", "shortCiteRegEx": null, "year": 1998}, {"title": "Plan recognition as planning", "author": ["Ram\u0131\u0301rez", "M. Geffner 2009] Ram\u0131\u0301rez", "H. Geffner"], "venue": "In Proceedings of the 21st International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Ram\u0131\u0301rez et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Ram\u0131\u0301rez et al\\.", "year": 2009}, {"title": "and Westphal", "author": ["S. Richter"], "venue": "M.", "citeRegEx": "Richter and Westphal 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "Diagnosability of discrete-event systems", "author": ["Sampath"], "venue": "IEEE Transactions on Automatic Control", "citeRegEx": "Sampath,? \\Q1995\\E", "shortCiteRegEx": "Sampath", "year": 1995}, {"title": "Diagnosis as planning revisited", "author": ["Baier Sohrabi", "S. McIlraith 2010] Sohrabi", "J. Baier", "S. McIlraith"], "venue": "In Proceedings of the 12th International Conference on the Principles of Knowledge Representation and Reasoning (KR),", "citeRegEx": "Sohrabi et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Sohrabi et al\\.", "year": 2010}, {"title": "Preferred explanations: Theory and generation via planning", "author": ["Baier Sohrabi", "S. McIlraith 2011] Sohrabi", "J. Baier", "S. McIlraith"], "venue": "In Proceedings of the 25th National Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Sohrabi et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Sohrabi et al\\.", "year": 2011}, {"title": "Hypothesis exploration for malware detection using planning", "author": ["Udrea Sohrabi", "S. Riabov 2013] Sohrabi", "O. Udrea", "A. Riabov"], "venue": "In Proceedings of the 27th National Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Sohrabi et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Sohrabi et al\\.", "year": 2013}], "referenceMentions": [], "year": 2014, "abstractText": "In this paper, we address the knowledge engineering problems for hypothesis generation motivated by applications that require timely exploration of hypotheses under unreliable observations. We looked at two applications: malware detection and intensive care delivery. In intensive care, the goal is to generate plausible hypotheses about the condition of the patient from clinical observations and further refine these hypotheses to create a recovery plan for the patient. Similarly, preventing malware spread within a corporate network involves generating hypotheses from network traffic data and selecting preventive actions. To this end, building on the already established characterization and use of AI planning for similar problems, we propose use of planning for the hypothesis generation problem. However, to deal with uncertainty, incomplete model description and unreliable observations, we need to use a planner capable of generating multiple highquality plans. To capture the model description we propose a language called LTS++ and a web-based tool that enables the specification of the LTS++ model and a set of observations. We also proposed a 9-step process that helps provide guidance to the domain expert in specifying the LTS++ model. The hypotheses are then generated by running a planner on the translated LTS++ model and the provided trace. The hypotheses can be visualized and shown to the analyst or can be further investigated automatically.", "creator": "LaTeX with hyperref package"}}}