{"id": "1409.0703", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Aug-2014", "title": "On computable abstractions (a conceptual introduction)", "abstract": "Abstractions are essential when a person performs intellectual tasks. In this case, however, abstractions are either ideas or depend on ideas in the mind of the person, making them unsuitable for mechanical manipulation. In spite of this, it is possible to define abstractions that can be processed entirely through a mechanical process. In this paper, I introduce these computable abstractions and the mechanical abstractional process that deals with them, opening the possibility for machines to perform intellectual tasks with results that are intuitively comparable to humans results.", "histories": [["v1", "Fri, 29 Aug 2014 18:29:53 GMT  (12kb)", "http://arxiv.org/abs/1409.0703v1", "10 pages, submitted to Innovations in Theoretical Computer Science (ITCS) 2015"], ["v2", "Tue, 9 Dec 2014 14:50:58 GMT  (13kb)", "http://arxiv.org/abs/1409.0703v2", "16 pages, submitted to Theory and Applications of Models of Computation (TAMC); more detailed and straightforward presentation, added 2 examples"], ["v3", "Thu, 22 Jan 2015 13:21:52 GMT  (13kb)", "http://arxiv.org/abs/1409.0703v3", "16 pages; more detailed and straightforward presentation, added 2 examples"], ["v4", "Sun, 29 Mar 2015 14:27:16 GMT  (16kb)", "http://arxiv.org/abs/1409.0703v4", "17 pages; clearer and more precise motivation; clearer concepts presented; review on related works added"]], "COMMENTS": "10 pages, submitted to Innovations in Theoretical Computer Science (ITCS) 2015", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["alejandro sanchez guinea"], "accepted": false, "id": "1409.0703"}, "pdf": {"name": "1409.0703.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["ale.sanchez.guiena@gmail.com", "azsanche@cs.helsinki.fi"], "sections": [{"heading": null, "text": "ar Xiv: 140 9.07 03v1 [cs.AI] 29 Aug 201 4Abstractions are indispensable when a person performs intellectual tasks (both when he does it alone and when he uses a machine as a tool), but in this case abstractions are either ideas or depend on ideas in the person's mind, making them unsuitable for mechanical manipulation. Nevertheless, it is possible to define abstractions that can be fully processed by a mechanical process. In this essay, I introduce these \"calculable abstractions\" and the mechanical abstraction process that handles them, allowing machines to perform intellectual tasks with results intuitively comparable to those of humans."}, {"heading": "1 Introduction", "text": "Machines aim to perform intellectual tasks in which they are expected to perform a performance that is intuitively comparable to that of humans. By \"intuitively comparable,\" one should understand that if we (humans) perform the comparison, it would generally be impossible for us to distinguish between the results of humans and the results of machines. \"Imitation Game,\" as proposed by A. M. Turing, can be seen as an example of this criterion of comparison. As examples of intellectual tasks, one can consider common tasks such as processing natural language and visual recognition of objects, as well as specialized tasks such as deriving the whole of mathematics from first principles. Machines that are operationally equivalent to a Turing machine have fundamental limitations that hinder them in achieving results that are intuitively comparable to humans."}, {"heading": "Abstractions", "text": "In this case, an abstraction can exist either as an idea in people's minds that is both exposable and adaptable; this system of abstractions is necessary to find meaning in the things that are embedded in people's minds."}, {"heading": "2 Preliminaries", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Abstractional Models", "text": "A model is to be regarded as a construction of interest consisting of a collection of objects and relationships that follow certain criteria of validity, whereby no object or relationship within the construction can be contradicted by any other object or relationship within the same construction. This is achieved by first creating an initial collection of objects and relationships that are considered fundamental and not contradictory to each other; I will call this initial collection the foundation of the model. Then, in order to build new objects or relationships within the model, only objects and relationships can be used for its foundation or that have been derived from its foundation. It should therefore be clear that a criterion of validity that is imposed on objects at the bottom of a model extends to all derived objects, making the entire model consistent under such criteria. An abstract model is a model in which its objects and relationships are all abstractions and abstractions. It should be clear that no distinction between objects and objects is necessary at the level of the model, since the relationship between the objects and the abstract is a nature of the model."}, {"heading": "Operating Machines", "text": "In fact, most of them are able to survive themselves, and most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are not able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves}, {"heading": "3 Computable Abstractions", "text": "From what one says about the machine, one should realize that it is an object that is able to operate itself."}, {"heading": "Concepts", "text": "The \"operabilities\" mentioned above serve as the main building blocks of our calculable abstractions, and I refer to them as calculable concepts or simply concepts. Concepts are referred to by C. So (for type 1), if we have satisfaction, a concept Ca is used that refers to \"operable\" within the specification of \"\u03b1,\" where it can be referred to as Ca: \"satisfaction\" (for type 1), \"satisfaction\" (for type 2), if we have a composition sequence < \"satisfaction\" (for type 2), \"satisfaction\" (for some operations), a concept Cb that refers to \"operable\" in the first position of a two-element sequence, where the second element can be described, can be referred to as Cb: < x, 2 > concepts can be defined based on other concepts."}, {"heading": "Mechanical abstracting process", "text": "A general mechanical abstraction process can be easily outlined when abstraction (i.e., concepts and concrete representations based on concepts) has been introduced. In view of some executable operations in an M operating machine, it is possible to describe a predictable abstraction by taking into account concepts defined on the basis of operations in M. The operations taken into account in the derivation of concepts are decided on the basis of predefined criteria (not part of the general process, but of the respective implementation). Thus, for example, we want to perform an abstraction (through a mechanical process) carried out in an M1 operating machine."}, {"heading": "4 Abstractional Machines", "text": "In fact, it is the case that most people who are able to understand and understand the things they need to understand what they are doing. [...] It is not as if they are able to do the things they are doing. [...] It is as if they are able to do the things they are doing. [...] It is as if they are able to do the things they are doing. [...] It is as if they are doing it. [...] It is as if they are doing it. [...] It is as if they are doing it. [...] It is as if they are doing it. [...] It is as if they are doing it, as if they are doing it. [...] \""}, {"heading": "5 Conclusions", "text": "Computer-assisted abstractions and abstract machines offer a completely different perspective on how machines can deal with their tasks and the objects involved, a view in which objects are not calculated but abstracted, in which it is possible to develop an understanding of each object or idea, including any number of them. This means overcoming the limitations that machines currently have in performing intellectual tasks. The solution proposed in this paper needs to be further developed, with more examples and applications to be taken into account in future work. Regardless of the solution offered here, particular attention needs to be paid to recognizing the limitations of operating machines and to the fact that without overcoming them there is no way that operating machines can perform intellectual tasks with results comparable to human results, since such limitations have nothing to do with the efficiency or speed of calculations or with the storage capacity of machines."}], "references": [{"title": "MMIXware: a RISC computer for the third millennium", "author": ["Donald E Knuth"], "venue": "volume 1750. Springer,", "citeRegEx": "Knuth.1999.", "shortCiteRegEx": null, "year": 1999}, {"title": "with an application to the entscheidungsproblem", "author": ["Alan M Turing. On computable numbers"], "venue": "J. of Math, 58:345\u2013363,", "citeRegEx": "Turing.1936.", "shortCiteRegEx": null, "year": 1936}, {"title": "Proceedings of the London Mathematical Society", "author": ["Alan M Turing. Systems of logic based on ordinals"], "venue": "2(1):161\u2013228,", "citeRegEx": "Turing.1939.", "shortCiteRegEx": null, "year": 1939}, {"title": "Mind", "author": ["Alan M Turing. Computing machinery", "intelligence"], "venue": "pages 433\u2013460,", "citeRegEx": "Turing.1950.", "shortCiteRegEx": null, "year": 1950}, {"title": "fr", "author": ["Alan M Turing. Solvable", "unsolvable problems. Science News-ens"], "venue": "39,", "citeRegEx": "Turing.1954.", "shortCiteRegEx": null, "year": 1954}, {"title": "To the definition of algorithms", "author": ["VA Uspenski"], "venue": "Selected Works of AN Kolmogorov, pages 62\u201385. Springer", "citeRegEx": "Uspenski.1993.", "shortCiteRegEx": null, "year": 1993}], "referenceMentions": [{"referenceID": 3, "context": "Turing [Turing(1950)], can be seen as an instance of this criterion of comparison.", "startOffset": 7, "endOffset": 21}, {"referenceID": 1, "context": "It has been proved that a large class of numbers can be computed by a general mechanical process [Turing(1936)] (i.", "startOffset": 97, "endOffset": 111}, {"referenceID": 2, "context": "Turing referred to this \u2018something\u2019 missing as intuition [Turing(1939)] or common sense [Turing(1954)], in both cases being pictured as a part of human thinking not apt for precise description and, more importantly, unsuitable for mechanical manipulation.", "startOffset": 57, "endOffset": 71}, {"referenceID": 4, "context": "Turing referred to this \u2018something\u2019 missing as intuition [Turing(1939)] or common sense [Turing(1954)], in both cases being pictured as a part of human thinking not apt for precise description and, more importantly, unsuitable for mechanical manipulation.", "startOffset": 88, "endOffset": 102}, {"referenceID": 0, "context": "Examples of operating machines are, among others, Knuth\u2019s model (MMIX) [Knuth(1999)], Kolmogorov machines [Uspenski(1993)], programming languages (e.", "startOffset": 71, "endOffset": 84}, {"referenceID": 5, "context": "Examples of operating machines are, among others, Knuth\u2019s model (MMIX) [Knuth(1999)], Kolmogorov machines [Uspenski(1993)], programming languages (e.", "startOffset": 106, "endOffset": 122}, {"referenceID": 1, "context": "As examples of operations in the most elementary operational level of a machine, one may consider the operations \u2018scan a symbol from the tape\u2019 and \u2018print a symbol on the tape\u2019 of a Turing machine [Turing(1936)].", "startOffset": 196, "endOffset": 210}], "year": 2017, "abstractText": "Machines operationally equivalent to a Turing machine have fundamental limitations that prevent them from yielding results that are comparable to the results produced by humans when performing intellectual tasks (e.g., processing of natural language, visual object recognition, derivation of the whole of mathematics from first principles). For instance, while these machines can cover only a subset of the whole extent of real numbers, humans are able to work with the entire set of real numbers (e.g., building other sets on top, selecting any element from the set). Abstractions are essential when a person performs intellectual tasks (both when theions are essential when a person performs intellectual tasks (both when the person does it alone or using a machine as a support tool). In this case, however, abstractions are either ideas or depend on ideas in the mind of the person, makingions are either ideas or depend on ideas in the mind of the person, making them unsuitable for mechanical manipulation. In spite of this, it is possible to define abstractions that can be processed entirely through a mechanical process. In this paper,ions that can be processed entirely through a mechanical process. In this paper, I introduce these \u201ccomputable abstractions\u201d and the mechanical abstractional process that deals with them, opening the possibility for machines to perform intellectual tasks with results that are intuitively comparable to humans\u2019 results.", "creator": "LaTeX with hyperref package"}}}