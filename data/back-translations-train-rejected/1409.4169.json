{"id": "1409.4169", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Sep-2014", "title": "An Algorithm Based on Empirical Methods, for Text-to-Tuneful-Speech Synthesis of Sanskrit Verse", "abstract": "The rendering of Sanskrit poetry from text to speech is a problem that has not been solved before. One reason may be the complications in the language itself. We present unique algorithms based on extensive empirical analysis, to synthesize speech from a given text input of Sanskrit verses. Using a pre-recorded audio units database which is itself tremendously reduced in size compared to the colossal size that would otherwise be required, the algorithms work on producing the best possible, tunefully rendered chanting of the given verse. His would enable the visually impaired and those with reading disabilities to easily access the contents of Sanskrit verses otherwise available only in writing.", "histories": [["v1", "Mon, 15 Sep 2014 08:05:36 GMT  (227kb)", "http://arxiv.org/abs/1409.4169v1", "International Journal of Computer Science and Network Security, Vol.10, No. 1, January 2010"]], "COMMENTS": "International Journal of Computer Science and Network Security, Vol.10, No. 1, January 2010", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["rama n", "meenakshi lakshmanan"], "accepted": false, "id": "1409.4169"}, "pdf": {"name": "1409.4169.pdf", "metadata": {"source": "CRF", "title": "An Algorithm Based on Empirical Methods, for Text-to-Tuneful- Speech Synthesis of Sanskrit Verse", "authors": ["Rama N", "Meenakshi Lakshmanan"], "emails": [], "sections": [{"heading": null, "text": "Manuscript Receive January 5, 2010 Manuscript revised January 20, 2010 An algorithm based on empirical methods, for Text-to-TunefulSpeech Synthesis of Sanskrit VerseRama N. and Meenakshi Lakshmanan \u2020 \u2020 \u2020 Department of Computer Science, Presidency College, Chennai, India \u2020 Department of Computer Science, Meenakshi College for Women, Chennai, India andResearch Scholar, Mother Teresa Women's University, Kodaikanal, IndiaSummary The reproduction of Sanskrit poems from text to speech is a problem that has not yet been solved. One reason for this may be the complications in the language itself. We present unique algorithms based on extensive empirical analysis to synthesize language from a given text input of Sanskrit verses."}, {"heading": "1. Introduction", "text": "Language synthesis systems have proven to be extremely useful in improving the lives of visually impaired people and people with reading disabilities around the world. However, such systems, which do justice to the Western language, are not applicable in the Indian context because there are great differences in the structure and pronunciation of Indian languages. A cursory glance at randomly selected works in Sanskrit literature would show that poetry dominates literature enormously. The volume of available literature is vast and the content profound, with topics ranging from grammar to spirituality, from medicine to geography. Listening to verses that are recited and their attachment to memory is a traditional practice. Similarly, singing poetry. Obviously, a good familiarity with the sanscript is required to read the verses that attune to time and the abilities that tune themselves too quickly and unchangeably to internalize them."}, {"heading": "2. The Problem", "text": "The most important qualities of a speech synthesis system are naturalness and intelligibility, which are conditioned by complicated procedures. Naturalness describes how narrow the output sounds like human speech, while intelligibility is the ease with which the output is understood. [7] The most popular and simplest method of speech synthesis is the concatenated method, the other great method of speech synthesis, which would inevitably compromise the naturalness of speech synthesis. [7] We are dealing only with the concatenated method of speech synthesis in this work. Sanskrit is a highly phonetic language that adapts fully to what one sees is what one hears \"rule, it is highly structured with stringent rules in its phonemic and morphological levels, but lends itself to extreme versatility at the higher syntactic, semantic and pragmatic levels. As such a limit to the design of new compound words in Sanskrit is only fantasy and linguistic skill."}, {"heading": "3. The Precursor to this Work", "text": "Euphonic conjunctions or sandhi-s in Sanskrit are dots between adjacent words or subwords where the letters merge and transform; the use of sandhi-s in Sanskrit verse is mandatory, although the rules in prose are not so strict; a novel computational approach to Sandhi processing, based on the construction of sandhi-s rather than dividing them, was developed by the authors [10] in accordance with the grammatical rules laid down by the ancient Sanskrit genius P\u0101\u1e47ini in his magnum opus, the A\u1e63\u0101dhy\u0101y\u012b, and constitutes a comprehensive Sandhi construction machine. An example of Sandhi is: nama\u043e + \u015biv\u0101ya = nama\u015biv\u0101ya = Authors of the letter. The visarga letter (\") is transformed into the presence by the preaction of the letter (\"), the letter will act by the following letter of the precursor in the \u015bhi rule."}, {"heading": "4. Text Pre-processing", "text": "In fact, most of us are able to outdo ourselves, \"he told the\" Welt am Sonntag \"in an interview with the\" New York Times \":\" It is not the first time that we are able to change the world, but that we are able to change and change the world. \""}, {"heading": "5. The Audio Units Database", "text": "Determining the units to be recorded as audio files and stored in a database is a non-trivial task, as can be seen from the discussions in sections 2 and 4. The possible number of such recordable units is huge; there are a total of 34 letters in the consonants, half-vowels, sibilants and aspirate categories, as well as 13 vowels. As such, for units with one consonant and one vowel 34 * 34 = 510, 952 recordable units would be possible! Obviously, the number of cases with more than two consonants in close sequence would be much greater, but for units with two consonants, one vowel and one consonant there are theoretically 34 * 34 = 510, 952 recordable units possible."}, {"heading": "6. The Musical Component of the Speech", "text": "SynthesizerIndian music is similar to its Western counterpart in the context of the theory of notes and octaves. There are a total of 12 notes in each octave, with notes separated by a few frequencies; the basic notes are named sa, ri (soft), ri, ga (soft), ga, ma, ma (sharp), pa, dha (soft), dha, ni (soft), ni. These 12 notes repeat at higher and higher frequency levels and are therefore formed octaves. In order to make the singing of the verse tuneable, it is necessary to introduce these notes. The basic idea is that slight changes in the frequency of the recorded audio unit file lead to a change in the musical note at which the unit is heard when it is played. The changes must necessarily be minor, otherwise it is found that the texture of the voice changes with huge changes in the frequency-tuning-p."}, {"heading": "7. The Algorithm for Text-to-Tuneful-Speech", "text": "We have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do, we have a lot of work to do."}, {"heading": "8. The Overall Synthesis Algorithm", "text": "Algorithm VerseTextToTunefulSpeechSynthesizer Step 1: Parse the verse and identify its meter, caesura and retrieve the storage pitch array values; Step 2: Apply sandhi rules to correct the specific cases where the pronunciation would change; Step 3: Call Algorithm SplitVerseIntoUnits, to identify the note (pitch) variations to make the chanting tuneful; Step 4: Play the concatened file; end algorithmThe audio unit files were stored as.wav files and the concatenateUnits, to adjust the beat of the chanting and also to make the chanting tuneful; Step 6: Play the concatened file; end algorithmThe audio unit files were stored as free wav files and the concatence during audio."}, {"heading": "9. Conclusions", "text": "Text-to-speech synthesis of Sanskrit verses is a previously unsolved problem. The fact is that such synthesis is problematic due to the numerous complexities inherent in Sanskrit language in general and diversification in particular. This work presents a beguilingly simple but comprehensive and effective solution based on the linking method of text-to-speech synthesis. The novel method presented here does not suffer from performance bottlenecks. This work utilizes earlier work by the authors on the metric classification of Sanskrit verses and the P\u0101\u1e47an method of Sandhi processing and builds a text-to-speech synthesizer for Sanskrit verses. Empirical analysis methods have been used to create algorithms for splitting verses into bits of pronounceable text and to significantly reduce the audio corpora required for the algorithm in order to function reasonably well."}], "references": [{"title": "Preselection of candidate units in a unit selectionbased text-to-speech synthesis system", "author": ["Alistair Conkie", "Mark Beutnagel", "Ann Syrdal", "Philip Brown"], "venue": "Proceedings of ICSLP,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2000}, {"title": "Unit selection in a concatenative speech synthesis system", "author": ["Andrew Hunt", "Alan Black"], "venue": "Proceedings of ICASSP'96,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1996}, {"title": "Sparsha: A Comprehensive Indian Language Toolset for the Blind", "author": ["Anirban Lahiri", "Satya Jyoti Chattopadhyay", "Anupam Basu"], "venue": "Proceedings of the 7th international ACM SIGACCESS conference on Computers and accessibility,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2005}, {"title": "Statistical modeling for unit selection in speech synthesis", "author": ["Cyril Allauzen", "Mehryar Mohri", "Michael Riley"], "venue": "Proceedings of the 42nd Annual Meeting on Association for Computational Linguistics,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2004}, {"title": "Unit selection using k-nearest neighbor search for concatenative speech synthesis", "author": ["Hideyuki Mizuno", "Satoshi Takahashi"], "venue": "Proceedings of the 3rd International Universal Communication Symposium,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "From Text to Speech: The MITalk", "author": ["Jonathan Allen", "M. Sharon Hunnicutt", "Dennis Klatt"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1987}, {"title": "Rapid unit selection from a large speech corpus for concatenative speech synthesis", "author": ["Mark Beutnagel", "Mehryar Mohri", "Michael Riley"], "venue": "Proceedings of Eurospeech,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1999}, {"title": "Speech synthesis for phonetic and phonological models, Thomas A", "author": ["Mattingly", "Ignatius G"], "venue": "Sebeok (Ed.), Current Trends in Linguistics,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1974}, {"title": "A New Computational Schema for Euphonic Conjunctions in Sanskrit Processing", "author": ["Rama N", "Meenakshi Lakshmanan"], "venue": "IJCSI International Journal of Computer Science Issues,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "A Computational Algorithm for Metrical Classification of Verse, submitted to IJCSI International", "author": ["Rama N", "Meenakshi Lakshmanan"], "venue": "Journal of Computer Science Issues,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2009}, {"title": "An articulatory synthesizer for perceptual research", "author": ["P. Rubin", "T. Baer", "Mermelstein P"], "venue": "Journal of the Acoustical Society of America,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1981}, {"title": "Practical Sanskrit-English Dictionary, Motilal Banarsidass Publishers Pvt", "author": ["Vaman Shivram Apte"], "venue": "Ltd., Delhi,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1998}], "referenceMentions": [{"referenceID": 2, "context": "Work has been done to bring Indian vernaculars to the people through speech synthesis [3, 16, 18], but there is a dearth of such work in the context of Sanskrit.", "startOffset": 86, "endOffset": 97}, {"referenceID": 5, "context": "Naturalness describes how closely the output sounds like human speech, while intelligibility is the ease with which the output is understood [7].", "startOffset": 141, "endOffset": 144}, {"referenceID": 7, "context": "Formant synthesis, the other major speech synthesis method, would inevitably compromise on naturalness of the voice output [5, 9, 12, 14].", "startOffset": 123, "endOffset": 137}, {"referenceID": 10, "context": "Formant synthesis, the other major speech synthesis method, would inevitably compromise on naturalness of the voice output [5, 9, 12, 14].", "startOffset": 123, "endOffset": 137}, {"referenceID": 8, "context": "A novel computational approach to sandhi processing based on building sandhi-s rather than splitting them, was developed by the authors [10].", "startOffset": 136, "endOffset": 140}, {"referenceID": 8, "context": "This is an example of consecutive application of a visarga sandhi rule and the \u015bcutva sandhi rule [10].", "startOffset": 98, "endOffset": 102}, {"referenceID": 9, "context": "Algorithms to efficiently parse and classify verses into more than 700 metres and to gather information about the caesura or points in the verse where a pause must be introduced while reading the verse, were developed by the authors [11].", "startOffset": 233, "endOffset": 237}, {"referenceID": 9, "context": "Unicode Sanskrit font is also accepted as input, but is converted to the Latin character form before processing begins, as already presented by the authors in [11].", "startOffset": 159, "endOffset": 163}, {"referenceID": 8, "context": "The algorithm in [10] serves to effect these corrections on the given verse.", "startOffset": 17, "endOffset": 21}, {"referenceID": 0, "context": "This is riddled with problems and cannot be handled like European languages [1, 2, 4, 6, 8], as already discussed in Section 2 above.", "startOffset": 76, "endOffset": 91}, {"referenceID": 1, "context": "This is riddled with problems and cannot be handled like European languages [1, 2, 4, 6, 8], as already discussed in Section 2 above.", "startOffset": 76, "endOffset": 91}, {"referenceID": 3, "context": "This is riddled with problems and cannot be handled like European languages [1, 2, 4, 6, 8], as already discussed in Section 2 above.", "startOffset": 76, "endOffset": 91}, {"referenceID": 4, "context": "This is riddled with problems and cannot be handled like European languages [1, 2, 4, 6, 8], as already discussed in Section 2 above.", "startOffset": 76, "endOffset": 91}, {"referenceID": 6, "context": "This is riddled with problems and cannot be handled like European languages [1, 2, 4, 6, 8], as already discussed in Section 2 above.", "startOffset": 76, "endOffset": 91}, {"referenceID": 11, "context": "This problem was surmounted by extensively analyzing the words present in a comprehensive Sanskrit dictionary [13].", "startOffset": 110, "endOffset": 114}, {"referenceID": 9, "context": "The beat to be followed for a verse would vary according to the metre and associated caesura of the verse [11].", "startOffset": 106, "endOffset": 110}, {"referenceID": 9, "context": "pn for the n syllables of a verse\u2019s quarter, were fixed for the categories of metres enumerated and stored in the database created for the earlier work on metre classification outlined in Section 3 [11].", "startOffset": 198, "endOffset": 202}, {"referenceID": 9, "context": "Initially, the verse is parsed by the metre classification algorithm and converted to its binary representation with laghu syllables taking the value 0 and guru syllables taking the value 1 [11].", "startOffset": 190, "endOffset": 194}], "year": 2010, "abstractText": "The rendering of Sanskrit poetry from text to speech is a problem that has not been solved before. One reason may be the complications in the language itself. We present unique algorithms based on extensive empirical analysis, to synthesize speech from a given text input of Sanskrit verses. Using a prerecorded audio units database which is itself tremendously reduced in size compared to the colossal size that would otherwise be required, the algorithms work on producing the best possible, tunefully rendered chanting of the given verse. His would enable the visually impaired and those with reading disabilities to easily access the contents of Sanskrit verses otherwise available only in writing.", "creator": "PScript5.dll Version 5.2.2"}}}