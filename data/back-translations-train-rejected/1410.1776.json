{"id": "1410.1776", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Oct-2014", "title": "Ontology-based Representation and Reasoning on Process Models: A Logic Programming Approach", "abstract": "We propose a framework grounded in Logic Programming for representing and reasoning about business processes from both the procedural and ontological point of views. In particular, our goal is threefold: (1) define a logical language and a formal semantics for process models enriched with ontology-based annotations; (2) provide an effective inference mechanism that supports the combination of reasoning services dealing with the structural definition of a process model, its behavior, and the domain knowledge related to the participating business entities; (3) implement such a theoretical framework into a process modeling and reasoning platform. To this end we define a process ontology coping with a relevant fragment of the popular BPMN modeling notation. The behavioral semantics of a process is defined as a state transition system by following an approach similar to the Fluent Calculus, and allows us to specify state change in terms of preconditions and effects of the enactment of activities. Then we show how the procedural process knowledge can be seamlessly integrated with the domain knowledge specified by using the OWL 2 RL rule-based ontology language. Our framework provides a wide range of reasoning services, including CTL model checking, which can be performed by using standard Logic Programming inference engines through a goal-oriented, efficient, sound and complete evaluation procedure. We also present a software environment implementing the proposed framework, and we report on an experimental evaluation of the system, whose results are encouraging and show the viability of the approach.", "histories": [["v1", "Tue, 7 Oct 2014 15:39:03 GMT  (928kb,D)", "http://arxiv.org/abs/1410.1776v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["fabrizio smith", "maurizio proietti"], "accepted": false, "id": "1410.1776"}, "pdf": {"name": "1410.1776.pdf", "metadata": {"source": "CRF", "title": "Ontology-based Representation and Reasoning on Process Models: A Logic Programming Approach", "authors": ["Fabrizio Smith"], "emails": ["maurizio.proietti}@iasi.cnr.it"], "sections": [{"heading": null, "text": "Keywords: business processes, ontologies, logic programming, knowledge representation, verification."}, {"heading": "1 Introduction", "text": "This year, it has reached the point where it will be able to leave the country without being able to leave it."}, {"heading": "2 Preliminaries", "text": "In order to clarify the terminology and notation used in this paper, we will recall in this section some basic terms related to the BPMN notation [46], the description logic [4], as well as the principles of the OWL standard [43] and logic programming [38]."}, {"heading": "2.1 BPMN", "text": "The primary objective of BPMN is to provide a standard notation that is easy for all stakeholders to understand, which includes the business analysts responsible for its implementation, and the business managers who monitor and manage it. A BPMN model is defined by a business process diagram that includes a type of flow chart that includes constructs for controlling the flow of data, resource allocation (i.e., how the work is assigned to the participants), and we will briefly review the core BPMN constructions that refer to the example in the figure. BPMN constructions are classified as flow objects."}, {"heading": "2.2 Description Logics and Rule-based OWL Ontologies", "text": "In fact, the most important terms of the domain are described by concept descriptions, i.e., expressions deriving from atomic concepts, i.e., they are generally intended as groups of people, e.g. people working for a company. On the other hand, the DLs correspond with decideable fragments of classical logic (FOL) and are therefore equipped with the specific characteristics of the individual DL (e.g. people working for a company), and thus we are equipped with a formal, logical semantics that makes such languages suitable for automated reasoning."}, {"heading": "2.3 Logic programming", "text": "Let us briefly recall the basic concepts of logic programming. In particular, let us consider the class of locally stratified logic programs, or stratified programs, in short, and their standard semantics, which is defined by the perfect model. (Remember that all major declarative semantics of logic programs agree on stratified programs.) This class of logic programs is expresiv enough to represent several complementary parts of knowledge in relation to business processes, such as the syntactic structure of the control flow, the operational semantic properties and the temporal properties of execution. For more details about LP, we refer to [38, 2].A term is either a constant or a variable, or an expression of the form f (t1,., tm), where f is a function symbol and t1,."}, {"heading": "3 Rule-based Representation of BP Schemas", "text": "In this section we will introduce a formal representation of business processes using the term Business Process Scheme (BPS). A BPS, its meta-model and its procedural (or behavioral) semantics are all specified by sets of rules for which we adopt the standard notation and semantics of LP (see Section 2.3)."}, {"heading": "3.1 Introducing BPAL", "text": "The Business Process Abstract Language (BPAL) introduces a language that is designed to represent a declarative modeling method that is capable of fully capturing procedural knowledge in a business process. BPAL constructs are common to the most commonly used and widely accepted BP modeling languages (e.g. BPMN [46], UML activity diagrams [47], EPC [33] and, in particular, are based on the BPMN 2.0 specification [46]. Formally, a (series of) BPS (s) B is specified by a set of basic facts of the form p (c1,..., cn), where cn are constants that dense flow elements (e.g. activities, events, and gateways) and p is a predicate symbol. In Table 3 we list some of the BPAL predicates, and in Table 4 we illustrate their use by presenting their use as a handwriting process (the translation for a short file) in nho."}, {"heading": "3.2 Behavioral Semantics", "text": "In fact, it is not the case that this is a real case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is a case in which it is"}, {"heading": "3.2.1 Activity and Event Execution", "text": "The execution of a process P begins with the execution of the associated start event E in a state in which the flowing cf (start, E, P) is a reserved constant. After the execution of the start event, its unambiguous successor waits for execution (rule E1). The execution of a final event leads to the final state of a process execution in which the flowing cf (E, end, P) is valid, where E is the end event associated with the process P and the end a reserved constant (rule E2). According to the informal semantics of BPMN, intermediate events are intended as immediate behavioral patterns registered at a given time. Therefore, we formally model the execution of an intermediate event as a single state transition, as defined in rule E3. Intermediate events in BPMN can also be linked to activity boundaries in order to model exceptional flows. After the occurrence of an exception, the execution of the activity A is interrupted by the beginning of a merge (or the beginning of a control flow) of the activity (after the beginning of a rule A)."}, {"heading": "3.2.2 Branching Behaviors", "text": "When a branch gateway is executed, a subset of its successors is selected to execute it. Here, we are looking at exclusive, inclusive, and parallel branch gateways. An exclusive branch leads to the execution of exactly one successor (rule B1), while an inclusive branch leads to the simultaneous execution of a non-empty subset of its successors (rule B2). The number of successors to exclusive or inclusive decision points may depend on guardians, i.e. conditions that usually take the form of tests on the value of the items passed between activities. While rules B1-B2 formalize a non-deterministic choice among successors to a decision point, Section 4.3 includes waking expressions in the framework in the form of flowing expressions, whose true value is checked in relation to the current state. Finally, a parallel branch leads to the simultaneous execution of all its successors (rule B3)."}, {"heading": "3.2.3 Merging Behaviors", "text": "An exclusive merge can be executed if at least one of its predecessors has been executed (rule X1). For the inclusive merge, several operational semantics have been proposed due to the complexity of its non-local semantics (see e.g. [33, 65]). An inclusive merge should be able to synchronize a different number of threads, i.e. it will only be executed if n (\u2265 1) predecessors have been executed and no other one else will ultimately be executed. At this point, we refer to the semantics described in [65] by BPMN, which states that (rule O1) an inclusive merge M can be executed if the following two conditions apply (rules O2, O3): (1) at least one of its predecessors has been executed, (2) for each unexecuted predecessor X, there is no flow element U waiting for its execution and which is executed upstream (rule O1) X. The notion of an upstream merge that is captured by at least one of its predecessors has been executed, (2) for each unexecuted predecessor X, there is no flow element U waiting for it to be executed and which is executed upstream (rule O1) X. The notion of an upstream merge that is executed by M, which is a fact that U is executed in parallel to the SSU, and is not executed by a SSU (rule X5), and is executed by SSU."}, {"heading": "3.2.4 Item Flow", "text": "BP modeling must be able to represent the physical and informational items that are generated and consumed by the various activities. (\u20ac) (\u20ac) The items are essentially considered variables, and therefore there is a single instance of a particular item at any time during the execution that can be (overwritten) by an activity. We will consider two main types of relationships between activities and items. First, an activity can use a specific item (input relationship) (input relationship), which implies that the item should hold a value before the activity is executed. Second, an activity can create a certain value (output relationship), which gives the item a new value. If it does not yet have a value, it is created, it is overwritten."}, {"heading": "4 Semantic Annotation", "text": "In the previous section, we have shown how a procedural representation of a BPS can be modelled as an activity workflow in our rules-based framework. However, not all the relevant knowledge relating to the execution of processes is captured by a workflow model that defines the planned sequence of operations, but does not provide an explicit representation of domain knowledge relating to the entities involved in such a process, i.e. the business environment in which processes are conducted. Similar to proposals such as Semantic BPM [32] and Semantic Web Services [22], we will use semantic annotations to enrich the procedural knowledge specified by a BPS with domain knowledge expressed in relation to a given business reference ontology. Annotations provide two types of ontology-based information: (i) formal definitions of the fundamental entities involved in a process (e.g. activities, actors, items) in order to clearly specify their meaning (terminological annotations, elements) and (ii) specifications."}, {"heading": "4.1 Reference Ontology", "text": "A business reference ontology is designed to grasp the semantics of a business scenario on the basis of the relevant vocabulary plus a set of axioms (TBox) defining the intended meaning of the vocabulary terms. In order to present the semantic annotations of a BPAL BPS in a consistent manner, we consider ontologies falling within the OWL 2 RL profile (see Section 2.2) and therefore printable as rule sets. An OWL 2 RL ontology is presented as a rule set consisting of a set of facts of the form t (s, p, o), called triples, encoding the specific OWL TBox, along with the rules common to all OWL 2 RL ontologies, such as those of Table 2.In Table 6 we show an example of a business reference ontology for the annotation of the handle order process, shown in Figure 1. For the sake of conciseness and clarity, the trixiology can be presented automatically instead of the axiology."}, {"heading": "4.2 Terminological Annotation", "text": "A terminological note associates elements of a BPS with concepts of a reference ontology to describe the former in terms of a suitable conceptualization of the underlying business domain provided by the latter. This association is defined by a series of OWL affirmations of the form BpsEl: termRef.Konzept, where: BpsEl is an element of a BPS; \u2022 Concept is either i) a designated concept defined in ontology, e.g. ordering, orii) a complex concept defined by a class expression, e.g. rejection of u content purchase order; \u2022 termRef is an OWL real estate name. We do not assume that each BPS element is associated with a BPS element, orii) a complex concept defined by a class expression, e.g. rejection of u content purchase order."}, {"heading": "4.3 Functional Annotation", "text": "In fact, it is such that most of them are able to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move,"}, {"heading": "4.3.1 Formal Semantics of Functional Annotations", "text": "In fact, it is as if it were a matter of a way, in which it is a matter of a way, in which it is a matter of a way, in which it is a matter of a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, in which it is about a way, and in which it is about a way, and in which it is about a way, in which it is about a way, in which it is about a way, and in which it is about a way, and in which it is about a way, and in which it is about a way it is about a way, and in which it is about which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way it is about a way and in which it is about a way and in which it is about a way and in which it is about a way and in which it is about a way it is about a way and in which it is about a way and in which it is about a way it is about a way and in which it is about a"}, {"heading": "4.3.2 Change, Ramification and Consistency", "text": "The logical formalization of activity outlined above can be seen as a problem associated with various solutions to the framework and ramification problems proposed by the various AI formalisms to represent actions and alterations.The frame problem was formulated in [40] as a problem that relates to the effort to actually calculate these non-effects without explicitly specifying which conditions are not influenced by an action. Basically, it is about the representative aspects of the frame problem that result from the difference between two states that result in a limited number of direct (positive and negative) effects. Fluent calculations address both the representative and consequential aspects of the frame problem that we are in. The rules that define the result can be summed up in a limited number of direct (positive and negative) effects that are defined by state updates."}, {"heading": "5 Temporal Reasoning", "text": "In order to provide a general verification mechanism for behavioral properties, we propose in this section a model verification method based on a formalization of temporal logic. (1) The formal verification method for the formal verification of BP schemes, as the execution of which semantics is usually defined in relation to states and state transitions, and thus the use of temporal logics for specifying and verifying properties is a very natural choice [24, 37]. CTL is a propositional temporal logic introduced to justify the behavior of reactive systems. Behavior is presented as a tree of states that the path of that tree is referred to as the computation path. CTL formulas are: the constants true and false; a given set of elements of elementary properties; the connecting lines: \"not.\""}, {"heading": "6 Reasoning Services", "text": "Our rules-based framework supports multiple reasoning services that can combine complex knowledge of business processes from different perspectives, such as workflow structure, ontological description, and behavioral semantics. In this section, we will illustrate three such services: verification, query, and compliance verification. Consider the following sets of rules: (1) B, which represent a set of BP schemas and the BP metamodel defined in Section 3.1, (2) T, which defines the behavioral semantics presented in Section 3.2, (3) O, and (5) CTL, which represents the business reference ontology defined in Section 4.1, (4) A, which encodes the annotations defined in Section 4.2 and 4.3, and (5) CTL, which defines the semantics of CTL presented in Section 5.Let KB."}, {"heading": "6.1 Verification", "text": "In the following, we present some examples of properties that can be specified and verified within our framework. (1) A very relevant behavior-related property of a BP is that it is possible to complete the process, i.e., reach the final state, from any attainable state. This property, also known as the option to complete [64], can be specified by the following rule, which states that the property will hold opt com if CTL property AG (EF (final (p)))) holds the original state p: opt com (final (p)). (2) Temporal queries allow us to verify the consistency of the effects introduced in Section 4.3."}, {"heading": "6.2 Retrieval", "text": "The follow-up mechanism based on the SLG resolution can be used to calculate Boolean responses to ground queries, but also to calculate by standardizing, replacing variables occurring in non-ground queries. By using this query response mechanism, in addition to the verification service described in the previous section, we can easily provide justification services for finding process fragments. The following queries show how process fragments can be retrieved based on different criteria. For reasons of legibility, we introduce the relation between (A, C) as an abbreviation for the OWL expression A: termRef.C for coding terminological annotations.Query q1 calculates each activity A carried out by a carrier and the realization of a transport (e.g. delivery); q2 calculates each decision point (exclusive branch) G that occurs along a path of a BPS, limited by two activities A, and B, for example, the creation of an order (and the first order)."}, {"heading": "6.3 Trace Compliance", "text": "The execution of a process is modeled as an execution trace (according to a plan in the Floating Calculation), i.e., a sequence of actions of the form [act (a1),.., act (an) in which the action either begins or is completed. The predicate trace (S1, T, S2), defined below, applies if T is a sequence of actions leading from the state S1 to the state S2: trace (S1, [], S2) \u2190 S1 = S2 trace (S1, [A | T], S2) \u2190 result (S1, A, U) \u0445 trace (U, T, S2) A correct execution T of a BPS P is a track leading from the initial state to the final state of P, i.e.: ctrace (T, P) is a property (T) that holds the initial (I, P) and the contragruents (I, T) form of a final (Z) of an executing PM."}, {"heading": "7 Computational Properties", "text": "In this section, we will demonstrate the solidity, completeness and completeness of the SLG resolution. We will also provide an upper limit on the temporal complexity of the SLG rating. As mentioned in Section 2.3, the solidity and completeness of the SLG resolution in relation to the perfect model of semantics is based on the fact that each variable also occurs in one of its positive word spaces. Similarly, a rule is allowed if each variable in its body also occurs in a positive dictionary. Unfortunately, not all rules in KB are permitted in the sense of [38]. For example, the variables that occur in the rulebook are not permitted in variables F and S."}, {"heading": "8 Implementation", "text": "In the following, we describe the BPAL platform, a prototype implementation of the framework discussed so far (Section 8.1), and then discuss an experimental evaluation of reasonable performance (Section 8.2)."}, {"heading": "8.1 Tool Description", "text": "The BPAL platform 3 is implemented as Eclipse Plug-in4, the main components of which are shown in the functional view in Figure 2. It offers the user the BPKB editor, which supports the definition of a BPKB through a graphical user interface, and the BPAL Reasoner, based on an LP engine, which is able to operate the BPKB via the query language QuBPAL, which is designed to query a repository of semantically enriched BPs."}, {"heading": "8.1.1 Query Language", "text": "There is no need for the user to understand the techniques of the underlying LP platform, 3A videos are automatically translated into logic programs, and then evaluated by using standard LP engines. The SELECT statement defines the output of the query evaluation, which can be a Boolean value, variables that occur in the WHERE statement, and a process selector that represents either a BPS or a BPS fragment. The WHERE statement specifies an expression that limits the amount of data returned by the query evaluation."}, {"heading": "8.1.2 BPKB Editor", "text": "This component provides a graphical user interface to define a BPKB and interact with the BPAL Reasoner. A screenshot of the main components of the GUI is shown in Figure 3. \u2022 The left panel (Figure 3.a) is the Package Explorer, which provides a tree view of the resources available in the workspace, including BP schemas and ontologies. \u2022 The central panel (Figure 3.b) is the BP Modeling View, based on the STP BPMN Modeler5, which consists of an editor and a set of tools for modeling business process diagrams using the BPMN notation. \u2022 On the left (Figure 3.c), the Ontology View allows visualization of OWL ontologies published on the Internet or stored locally. 5http: / / www.eclipse.org / soa \u2022 The bottom panel (Figure 3.d) is the annotation, an editor for the anesthesis of the result of the PAL, which can be called in reference to the result of the PPAL."}, {"heading": "8.1.3 BPAL Reasoner", "text": "This component implements the reasoning methods described in Section 6 by using the XSB Prolog6 system [58], which is a logic programming system based on the SLGresolution inference strategy described in Section 2.3. As demonstrated in Section 7, the table mechanism guarantees the abort of query evaluation and the polynomial time (equivalent to the size of the state) of verifying CTL properties. To facilitate the transfer and reuse of semantic metadata, semantic information used and produced during the annotation process (i.e. reference ontologies and semantic annotations) can be exported and imported from OWL / RPAL interfaces."}, {"heading": "8.2 Experimentation", "text": "Most of them are able to save themselves, most of them are not able to save themselves, most of them are able to save themselves, most of them are able to save themselves, most of them are able to save themselves, most of them are able to save themselves, most of them are not able to save themselves, most of them are able to save themselves, most of them are able to save themselves, most of them are able to save themselves, most of them are able to save themselves, most of them are able to save themselves, most of them are not able to save themselves, most of them are able to save themselves, most of them are able to save themselves, most of them are able to save themselves."}, {"heading": "9 Related Work", "text": "This year it has come to the point that it will only be a matter of time before it will happen, until it does."}, {"heading": "10 Conclusions", "text": "This year, it is closer than ever before in the history of the country."}], "references": [{"title": "From Logic Programming to Prolog", "author": ["K.R. Apt"], "venue": "Prentice Hall, London, UK", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1997}, {"title": "Logic Programming and Negation: A Survey", "author": ["K.R. Apt", "R.N. Bol"], "venue": "Journal of Logic Programming, 19/20:9\u201371", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1994}, {"title": "Finite transition systems: semantics of communicating systems", "author": ["A. Arnold"], "venue": "chapter Transition System Logics. Prentice Hall International (UK) Ltd., Hertfordshire, UK, UK", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1994}, {"title": "editors", "author": ["F. Baader", "D. Calvanese", "D.L. McGuinness", "D. Nardi", "P.F. Patel-Schneider"], "venue": "The Description Logic Handbook: Theory, Implementation, and Applications. Cambridge University Press", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2003}, {"title": "WSSL: A Fluent Calculus-Based Language for Web Service Specifications", "author": ["G. Baryannis", "D. Plexousakis"], "venue": "CAiSE 2013, volume 7908 of LNCS, pages 256\u2013271. Springer", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Semantic Web Services Ontology", "author": ["S. Battle"], "venue": "www.daml.org/services/swsf/1. 0/swso/,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2005}, {"title": "The semantic web", "author": ["T. Berners-Lee", "J. Hendler", "O. Lassila"], "venue": "Scientific American,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2001}, {"title": "Applying Fluent Calculus for Automated and Dynamic Semantic Web Service Composition", "author": ["A. Bhuvaneswari", "G.R. Karpagam"], "venue": "Proc. of the 1st Int. Conf. on Intelligent Semantic Web-Services and Applications, pages 16:1\u201316:6. ACM", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "PSL: A Semantic Domain for Flow Models", "author": ["C. Bock", "M. Gruninger"], "venue": "Software and Systems Modeling Journal, 4:209\u2013231", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2004}, {"title": "RDF Vocabulary Description Language 1.0: RDF Schema", "author": ["D. Brickley", "R.V. Guha"], "venue": "W3C Recommendation,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2004}, {"title": "Semantic Alignment Of Business Processes", "author": ["S. Brockmans", "M. Ehrig", "A. Koschmider", "A. Oberweis", "R. Studer"], "venue": "8th Int. Conf. on Enterprise Information Systems, pages 191\u2013196. INSTICC Press", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2006}, {"title": "OWL-S: Semantic Markup for Web Services", "author": ["M. Burstein"], "venue": "W3C Member Submission,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2004}, {"title": "Foundations of data-aware process analysis: A database theory perspective", "author": ["D. Calvanese", "G. De Giacomo", "M. Montali"], "venue": "Proceedings of the 32nd Symposium on Principles of Database Systems, PODS \u201913, pages 1\u201312. ACM", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2013}, {"title": "Tabled Evaluation with Delaying for General Logic Programs", "author": ["W. Chen", "D.S. Warren"], "venue": "J. ACM,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1996}, {"title": "Model Checking", "author": ["E.M. Clarke", "O. Grumberg", "D.A. Peled"], "venue": "The MIT Press", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1999}, {"title": "An Open Platform for Business Process Modeling and Verification", "author": ["A. De Nicola", "M. Missikoff", "M. Proietti", "F. Smith"], "venue": "Database and Expert Systems Applications, 21st International Conference, volume 6261 of LNCS, pages 76\u201390. Springer", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2010}, {"title": "Semantically-Aided Business Process Modeling", "author": ["C. Di Francescomarino", "C. Ghidini", "M. Rospocher", "L. Serafini", "P. Tonella"], "venue": "International Semantic Web Conference, LNCS 5823, pages 114\u2013129. Springer", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2009}, {"title": "Supporting Ontology-Based Semantic Annotation of Business Processes with Automated Suggestions", "author": ["C. Di Francescomarino", "P. Tonella"], "venue": "IJISMD, 1(2):59\u201384", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2010}, {"title": "Model Checking Semantically Annotated Services", "author": ["I. Di Pietro", "F. Pagliarecci", "L. Spalazzi"], "venue": "IEEE Trans. Software Eng., 38(3):592\u2013608", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2012}, {"title": "Semantics and Analysis of Business Process Models in BPMN", "author": ["R.M. Dijkman", "M. Dumas", "C. Ouyang"], "venue": "Inf. Softw. Technol.,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2008}, {"title": "A BPMO Based Semantic Business Process Modelling Environment", "author": ["M. Dimitrov", "A. Simov", "S. Stein", "M. Konstantinov"], "venue": "Semantic Business Process Modeling, volume 251 of CEUR-WS Proceedings. CEUR-WS.org", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2007}, {"title": "Enabling Semantic Web Services: The Web Service Modeling Ontology", "author": ["D. Fensel"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2006}, {"title": "Generalization strategies for the verification of infinite state systems", "author": ["F. Fioravanti", "A. Pettorossi", "M. Proietti", "V. Senni"], "venue": "Theory and Practice of Logic Programming, 13(2):175\u2013199", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2013}, {"title": "Analysis of Interacting BPEL Web Services", "author": ["X. Fu", "T. Bultan", "J. Su"], "venue": "Proc. of the Int. Conf. on World Wide Web, pages 621\u2013630. ACM", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2004}, {"title": "Auditing Business Process Compliance", "author": ["A. Ghose", "G. Koliadis"], "venue": "Proc. of Int. Conf. on Service-Oriented Computing, volume 4749 of LNCS, pages 169\u2013180. Springer", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2007}, {"title": "Reasoning about action II: The qualification problem", "author": ["M.L. Ginsberg", "D.E. Smith"], "venue": "Artificial Intelligence, 35(3):311\u2013342", "citeRegEx": "26", "shortCiteRegEx": null, "year": 1988}, {"title": "Business process verification with constraint temporal answer set programming", "author": ["L. Giordano", "A. Martelli", "M. Spiotta", "D.T. Dupr\u00e9"], "venue": "TPLP, 13(4-5):641\u2013655", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2013}, {"title": "Description Logic Programs: Combining Logic Programs with Description Logic", "author": ["B.N. Grosof", "I. Horrocks", "R. Volz", "S. Decker"], "venue": "Proc. of the 12th Int. Conf. on World Wide Web, WWW \u201903, pages 48\u201357. ACM", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2003}, {"title": "Towards an XPDL Compliant Process Ontology", "author": ["A. Haller", "W. Gaaloul", "M. Marmolowski"], "venue": "Proc. of the IEEE Congress on Services, pages 83\u201386. IEEE Computer Society", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2008}, {"title": "Description logic knowledge and action bases", "author": ["B.B. Hariri", "D. Calvanese", "M. Montali", "G.D. Giacomo", "R.D. Masellis", "P. Felli"], "venue": "J. Artif. Intell. Res. (JAIR), 46:651\u2013 686", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2013}, {"title": "Products and Services Ontologies: A Methodology for Deriving OWL Ontologies from Industrial Categorization Standards", "author": ["M. Hepp"], "venue": "Int. J. Semantic Web Inf. Syst., 2(1):72\u201399", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2006}, {"title": "Semantic Business Process Management: A Vision Towards Using Semantic Web Services for Business Process Management", "author": ["M. Hepp"], "venue": "In Proc. of Int. Conf. on e-Business Engineering. IEEE Computer Society,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2005}, {"title": "On the Semantics of EPCs: Resolving the Vicious Circle", "author": ["E. Kindler"], "venue": "Data Knowl. Eng., 56(1):23\u201340", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2006}, {"title": "Resource Description Framework (RDF): Concepts and Abstract Syntax", "author": ["G. Klyne", "J.J. Carroll"], "venue": "W3C Recommendation,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2004}, {"title": "Applying Inductive Logic Programming to Process Mining", "author": ["E. Lamma", "P. Mello", "F. Riguzzi", "S. Storari"], "venue": "Inductive Logic Programming, volume 4894 of LNCS, pages 132\u2013146. Springer", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2007}, {"title": "Semantic Annotation for Process Models: Facilitating Process Knowledge Management via Semantic Interoperability", "author": ["Y. Lin"], "venue": "PhD thesis, Norwegian University of Science and Technology", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2008}, {"title": "A Static Compliance-Checking Framework for Business Process Models", "author": ["Y. Liu", "S. M\u00fcller", "K. Xu"], "venue": "IBM Syst. J.,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2007}, {"title": "Foundations of logic programming", "author": ["J.W. Lloyd"], "venue": "Springer-Verlag New York, Inc.", "citeRegEx": "38", "shortCiteRegEx": null, "year": 1987}, {"title": "Collaborative Ontology Building in Virtual Innovation Factories", "author": ["V. Ludovici", "F. Smith", "F. Taglino"], "venue": "2013 Int. Conf. on Collaboration Technologies and Systems, pages 443\u2013450. IEEE", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2013}, {"title": "Some Philosophical Problems from the Standpoint of Artificial Intelligence", "author": ["J. McCarthy", "P.J. Hayes"], "venue": "Machine Intelligence, volume 4, pages 463\u2013502", "citeRegEx": "40", "shortCiteRegEx": null, "year": 1969}, {"title": "On the Semantics of Service Compositions", "author": ["H. Meyer"], "venue": "Proc. of the 1st Int. Conf. on Web Reasoning and Rule Systems, volume 4524 of LNCS, pages 31\u201342. Springer", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2007}, {"title": "Declarative specification and verification of service choreographies", "author": ["M. Montali", "M. Pesic", "W.M.P. van der Aalst", "F. Chesani", "P. Mello", "S. Storari"], "venue": "ACM Trans. Web,", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2010}, {"title": "OWL 2 Web Ontology Language Profiles (Second Edition)", "author": ["B. Motik"], "venue": "W3C Recommendation,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2012}, {"title": "Analysis and Simulation of Web Services", "author": ["S. Narayanan", "S. McIlraith"], "venue": "Comp. Networks,", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2003}, {"title": "Constraint Logic Programming for Local and Symbolic Model-checking", "author": ["U. Nilsson", "J. L\u00fcbcke"], "venue": "Computational Logic, LNAI 1861. Springer", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2000}, {"title": "Business Modeling With UML: Business Patterns at Work", "author": ["M. Penker", "H.-E. Eriksson"], "venue": null, "citeRegEx": "47", "shortCiteRegEx": "47", "year": 2000}, {"title": "Transformation of logic programs: Foundations and techniques", "author": ["A. Pettorossi", "M. Proietti"], "venue": "J. Log. Program., 19/20:261\u2013320", "citeRegEx": "48", "shortCiteRegEx": null, "year": 1994}, {"title": "SPARQL Query Language for RDF", "author": ["E. Prud\u2019hommeaux", "A. Seaborne"], "venue": "W3C Recommendation,", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 2008}, {"title": "On the Declarative Semantics of Deductive Databases and Logic Programs", "author": ["T.C. Przymusinski"], "venue": "Foundations of Deductive Databases and Logic Programming. Morgan Kaufmann Publishers", "citeRegEx": "50", "shortCiteRegEx": null, "year": 1988}, {"title": "Knowledge in Action: Logical Foundations for Specifying and Implementing Dynamical Systems", "author": ["R. Reiter"], "venue": null, "citeRegEx": "51", "shortCiteRegEx": "51", "year": 2001}, {"title": "J", "author": ["D. Roman", "U. Keller", "H. Lausen"], "venue": "de Bruijn, R. Lara, M. Stollberg, Polleres, C. Feier, C. Bussler, and D. Fensel. Web Service Modeling Ontology. Applied Ontology, 1(1):77\u2013 106", "citeRegEx": "52", "shortCiteRegEx": null, "year": 2005}, {"title": "Semantic Web Service Choreography: Contracting and Enactment", "author": ["D. Roman", "M. Kifer"], "venue": "Proc. of International Semantic Web Conference, LNCS 5318, pages 550\u2013566", "citeRegEx": "53", "shortCiteRegEx": null, "year": 2008}, {"title": "Semi-Automatic Process Composition via Semantics- Enabled Sub-Process Selection and Ranking", "author": ["F. Smith", "D. Bianchini"], "venue": "Enterprise Interoperability V, Shaping Enterprise Interoperability in the Future Internet, Proc. of I-ESA 2012, pages 177\u2013187. Springer", "citeRegEx": "54", "shortCiteRegEx": null, "year": 2012}, {"title": "Ontology-Based Querying of Composite Services", "author": ["F. Smith", "M. Missikoff", "M. Proietti"], "venue": "Business System Management and Engineering, volume 7350 of LNCS, pages 159\u2013180. Springer", "citeRegEx": "55", "shortCiteRegEx": null, "year": 2010}, {"title": "Rule-based Behavioral Reasoning on Semantic Business Processes", "author": ["F. Smith", "M. Proietti"], "venue": "ICAART (2), pages 130\u2013143. SciTePress", "citeRegEx": "56", "shortCiteRegEx": null, "year": 2013}, {"title": "Web Service Composition via the Customization of Golog Programs with User Preferences", "author": ["S. Sohrabi", "N. Prokoshyna", "S.A. McIlraith"], "venue": "Conceptual Modeling: Foundations and Applications, pages 319\u2013334. Springer", "citeRegEx": "57", "shortCiteRegEx": null, "year": 2009}, {"title": "XSB: Extending the power of Prolog using tabling", "author": ["T. Swift", "D. Warren"], "venue": "12(1- 2):157\u2013187", "citeRegEx": "58", "shortCiteRegEx": null, "year": 2012}, {"title": "Extending the RDFS Entailment Lemma", "author": ["H. ter Horst"], "venue": "Proc. of the 3rd Int. Semantic Web Conf., LNCS. Springer,", "citeRegEx": "59", "shortCiteRegEx": "59", "year": 2004}, {"title": "Ramification and Causality", "author": ["M. Thielscher"], "venue": "Artificial Intelligence, 89:317\u2013364", "citeRegEx": "60", "shortCiteRegEx": null, "year": 1997}, {"title": "Introduction to the Fluent Calculus", "author": ["M. Thielscher"], "venue": "Electron. Trans. Artif. Intell., 2:179\u2013192", "citeRegEx": "61", "shortCiteRegEx": null, "year": 1998}, {"title": "From Situation Calculus to Fluent Calculus: State Update Axioms as a Solution to the Inferential Frame Problem", "author": ["M. Thielscher"], "venue": "Artificial Intelligence,", "citeRegEx": "62", "shortCiteRegEx": "62", "year": 1999}, {"title": "Semantic EPC: Enhancing Process Modeling Using Ontology Languages", "author": ["O. Thomas", "M. Fellmann"], "venue": "Semantic Business Process Modeling, volume 251 of CEUR- WS Proceedings. CEUR-WS.org", "citeRegEx": "63", "shortCiteRegEx": null, "year": 2007}, {"title": "The Application of Petri Nets to Workflow Management", "author": ["W.M.P. van der Aalst"], "venue": "Journal of Circuits, Systems, and Computers,", "citeRegEx": "64", "shortCiteRegEx": "64", "year": 1998}, {"title": "A New Semantics for the Inclusive Converging Gateway in Safe Processes", "author": ["H. V\u00f6lzer"], "venue": "Proc. of Int. Conf. on Business Process Management, LNCS 6336, pages 294\u2013309. Springer", "citeRegEx": "65", "shortCiteRegEx": null, "year": 2010}, {"title": "Beyond Soundness: on the Verification of Semantic Business", "author": ["I. Weber", "J. Hoffmann", "J. Mendling"], "venue": "Process Models. Distrib. Parallel Databases,", "citeRegEx": "66", "shortCiteRegEx": "66", "year": 2010}, {"title": "Reasoning about Action Using a Possible Models Approach", "author": ["M. Winslett"], "venue": "AAAI, pages 89\u201393. The MIT Press", "citeRegEx": "67", "shortCiteRegEx": null, "year": 1988}], "referenceMentions": [{"referenceID": 62, "context": "from a control flow perspective, with the aim of verifying whether the behavior of the modeled system presents logical errors (see, for instance, the notion of soundness [64]).", "startOffset": 170, "endOffset": 174}, {"referenceID": 31, "context": "The lack of a formal representation of the domain knowledge within process models is widely recognized as an obstacle for the further automation of BPM tools and methodologies that effectively support process analysis, retrieval, and reuse [32].", "startOffset": 240, "endOffset": 244}, {"referenceID": 31, "context": "In order to overcome this limitation, the application of well-established techniques stemming from the area of Knowledge Representation in the domains of BP modeling [32, 17, 36, 66] and Web Services [12, 22] has been shown to be a promising approach.", "startOffset": 166, "endOffset": 182}, {"referenceID": 16, "context": "In order to overcome this limitation, the application of well-established techniques stemming from the area of Knowledge Representation in the domains of BP modeling [32, 17, 36, 66] and Web Services [12, 22] has been shown to be a promising approach.", "startOffset": 166, "endOffset": 182}, {"referenceID": 35, "context": "In order to overcome this limitation, the application of well-established techniques stemming from the area of Knowledge Representation in the domains of BP modeling [32, 17, 36, 66] and Web Services [12, 22] has been shown to be a promising approach.", "startOffset": 166, "endOffset": 182}, {"referenceID": 64, "context": "In order to overcome this limitation, the application of well-established techniques stemming from the area of Knowledge Representation in the domains of BP modeling [32, 17, 36, 66] and Web Services [12, 22] has been shown to be a promising approach.", "startOffset": 166, "endOffset": 182}, {"referenceID": 11, "context": "In order to overcome this limitation, the application of well-established techniques stemming from the area of Knowledge Representation in the domains of BP modeling [32, 17, 36, 66] and Web Services [12, 22] has been shown to be a promising approach.", "startOffset": 200, "endOffset": 208}, {"referenceID": 21, "context": "In order to overcome this limitation, the application of well-established techniques stemming from the area of Knowledge Representation in the domains of BP modeling [32, 17, 36, 66] and Web Services [12, 22] has been shown to be a promising approach.", "startOffset": 200, "endOffset": 208}, {"referenceID": 55, "context": ", [57, 6, 44]) are very expressive formalisms that can be used to simultaneously capture the process and the domain knowledge, but they are too general to be applied to BP modeling, and must be suitably restricted not only towards decidability of reasoning but also to reflect the peculiarities of processes.", "startOffset": 2, "endOffset": 13}, {"referenceID": 5, "context": ", [57, 6, 44]) are very expressive formalisms that can be used to simultaneously capture the process and the domain knowledge, but they are too general to be applied to BP modeling, and must be suitably restricted not only towards decidability of reasoning but also to reflect the peculiarities of processes.", "startOffset": 2, "endOffset": 13}, {"referenceID": 43, "context": ", [57, 6, 44]) are very expressive formalisms that can be used to simultaneously capture the process and the domain knowledge, but they are too general to be applied to BP modeling, and must be suitably restricted not only towards decidability of reasoning but also to reflect the peculiarities of processes.", "startOffset": 2, "endOffset": 13}, {"referenceID": 37, "context": "To achieve this goal, we do not propose yet another business process modeling language, but we provide a framework based on Logic Programming (LP) [38] for reasoning about process-related knowledge expressed by means of de-facto standards for BP", "startOffset": 147, "endOffset": 151}, {"referenceID": 42, "context": "modeling, like BPMN [46], and ontology definition, like OWL [43].", "startOffset": 60, "endOffset": 64}, {"referenceID": 59, "context": "We define a rule-based procedural semantics for a relevant fragment of BPMN, by following an approach inspired by the Fluent Calculus [61], and we extend it in order to take into account OWL annotations that describe preconditions and effects of activities and events occurring within a BP.", "startOffset": 134, "endOffset": 138}, {"referenceID": 15, "context": "extended version of the Business Process Abstract Language (BPAL) [16, 56], a process ontology for modeling the procedural semantics of a BP regarded as a workflow.", "startOffset": 66, "endOffset": 74}, {"referenceID": 54, "context": "extended version of the Business Process Abstract Language (BPAL) [16, 56], a process ontology for modeling the procedural semantics of a BP regarded as a workflow.", "startOffset": 66, "endOffset": 74}, {"referenceID": 14, "context": "In Section 5 we provide a general verification mechanism by integrating the temporal logic CTL [15] within our framework, in order to analyze properties of the states that the system can reach, by taking into account both the control-flow and the semantic annotation.", "startOffset": 95, "endOffset": 99}, {"referenceID": 13, "context": "In Section 7 we provide the computational characterization of the reasoning services that can be performed on top of a BPKB, showing in particular that, for a large class of them, advanced resolution strategies (such as SLG-Resolution [14]) guarantee an efficient, sound and complete procedure.", "startOffset": 235, "endOffset": 239}, {"referenceID": 56, "context": "In Section 8 we describe the implemented tool, which provides a graphical user interface to support the semantic BP design, and a reasoner, developed in XSB Prolog [58], able to operate on the BPKB.", "startOffset": 164, "endOffset": 168}, {"referenceID": 3, "context": "In order to clarify the terminology and the notation used throughout this paper, in this section we recall some basic notions related to the BPMN notation [46], Description Logics [4] as well as foundations of the OWL [43] standard, and Logic Programming [38].", "startOffset": 180, "endOffset": 183}, {"referenceID": 42, "context": "In order to clarify the terminology and the notation used throughout this paper, in this section we recall some basic notions related to the BPMN notation [46], Description Logics [4] as well as foundations of the OWL [43] standard, and Logic Programming [38].", "startOffset": 218, "endOffset": 222}, {"referenceID": 37, "context": "In order to clarify the terminology and the notation used throughout this paper, in this section we recall some basic notions related to the BPMN notation [46], Description Logics [4] as well as foundations of the OWL [43] standard, and Logic Programming [38].", "startOffset": 255, "endOffset": 259}, {"referenceID": 3, "context": "Description Logics (DLs) [4] are a family of knowledge representation languages that can be used to represent the knowledge of an application domain in a structured and formally well-understood way.", "startOffset": 25, "endOffset": 28}, {"referenceID": 6, "context": "The growing interest in the Semantic Web vision [7], where Knowledge Representation techniques are adopted to make resources machine-interpretable by \u201cintelligent agents\u201d, has pushed the standardization of languages for ontology and meta-data sharing over the (semantic) web.", "startOffset": 48, "endOffset": 51}, {"referenceID": 42, "context": "Among these, one of the most promising standards is the Ontology Web Language (OWL) [43], formally grounded in DLs, proposed by the Web Ontology Working Group of W3C.", "startOffset": 84, "endOffset": 88}, {"referenceID": 33, "context": "OWL is syntactically layered on RDF [34] and RDFS [10], and can be considered as an extension of RDFS in terms of modeling capabilities and reasoning facilities.", "startOffset": 36, "endOffset": 40}, {"referenceID": 9, "context": "OWL is syntactically layered on RDF [34] and RDFS [10], and can be considered as an extension of RDFS in terms of modeling capabilities and reasoning facilities.", "startOffset": 50, "endOffset": 54}, {"referenceID": 27, "context": "In particular, we consider OWL 2 RL, closely related to the Horn fragment of FOL, which is based on Description Logic Programs [28] and pD* [59].", "startOffset": 127, "endOffset": 131}, {"referenceID": 57, "context": "In particular, we consider OWL 2 RL, closely related to the Horn fragment of FOL, which is based on Description Logic Programs [28] and pD* [59].", "startOffset": 140, "endOffset": 144}, {"referenceID": 37, "context": "For more details about LP we refer to [38, 2].", "startOffset": 38, "endOffset": 45}, {"referenceID": 1, "context": "For more details about LP we refer to [38, 2].", "startOffset": 38, "endOffset": 45}, {"referenceID": 1, "context": "A (local) stratification is a function \u03c3 from the Herbrand base BP to the set of all countable ordinals [2, 50].", "startOffset": 104, "endOffset": 111}, {"referenceID": 48, "context": "A (local) stratification is a function \u03c3 from the Herbrand base BP to the set of all countable ordinals [2, 50].", "startOffset": 104, "endOffset": 111}, {"referenceID": 37, "context": "is constructed by SLD-resolution augmented with the Negation as Failure rule [38].", "startOffset": 77, "endOffset": 81}, {"referenceID": 37, "context": "\u2227Km (m \u2265 0) is a rule in P such that A is unifiable with H via a most general unifier \u03b8 [38].", "startOffset": 88, "endOffset": 92}, {"referenceID": 48, "context": "Indeed, it can be shown that (see, for instance, [50, 2]), given a program P and an atom A0 that does not flounder with respect to P , then: (1) if A0 succeeds with answer \u03b8, then every ground instance of A0\u03b8 belongs to Perf(P ), and (2) if A0\u03b8 belongs to Perf(P ) for some substitution \u03b8, then A0 succeeds with an answer which is more general than \u03b8.", "startOffset": 49, "endOffset": 56}, {"referenceID": 1, "context": "Indeed, it can be shown that (see, for instance, [50, 2]), given a program P and an atom A0 that does not flounder with respect to P , then: (1) if A0 succeeds with answer \u03b8, then every ground instance of A0\u03b8 belongs to Perf(P ), and (2) if A0\u03b8 belongs to Perf(P ) for some substitution \u03b8, then A0 succeeds with an answer which is more general than \u03b8.", "startOffset": 49, "endOffset": 56}, {"referenceID": 13, "context": "In order to avoid this difficulty, in this paper we adopt SLG-resolution, a query evaluation mechanism that implements SLD resolution with Negation as Failure by means of tabling [14].", "startOffset": 179, "endOffset": 183}, {"referenceID": 45, "context": ", BPMN [46], UML activity diagrams [47], EPC [33]) and, in particular, it is based on the BPMN 2.", "startOffset": 35, "endOffset": 39}, {"referenceID": 32, "context": ", BPMN [46], UML activity diagrams [47], EPC [33]) and, in particular, it is based on the BPMN 2.", "startOffset": 45, "endOffset": 49}, {"referenceID": 15, "context": "An extended discussion can be found in [16, 55].", "startOffset": 39, "endOffset": 47}, {"referenceID": 53, "context": "An extended discussion can be found in [16, 55].", "startOffset": 39, "endOffset": 47}, {"referenceID": 15, "context": "With respect to the framework introduced in [16, 55], here we consider unstructured cyclic workflows whose behavioral semantics will be introduced in the following.", "startOffset": 44, "endOffset": 52}, {"referenceID": 53, "context": "With respect to the framework introduced in [16, 55], here we consider unstructured cyclic workflows whose behavioral semantics will be introduced in the following.", "startOffset": 44, "endOffset": 52}, {"referenceID": 59, "context": "Now we present a formal definition of the behavioral semantics, or enactment, of a BPS, by following an approach inspired by the Fluent Calculus, a well-known calculus for action and change (see [61] for an introduction), which is formalized in Logic Programming.", "startOffset": 195, "endOffset": 199}, {"referenceID": 59, "context": "For states we use set notation (here we depart from [61], where an associative-commutative operator is used for representing collections of fluents).", "startOffset": 52, "endOffset": 56}, {"referenceID": 62, "context": "Our set-based representation of states relies on the assumption that the BPS is safe, that is, during its enactment there are no concurrent executions of the same flow element [64].", "startOffset": 176, "endOffset": 180}, {"referenceID": 32, "context": ", [33, 65]).", "startOffset": 2, "endOffset": 10}, {"referenceID": 63, "context": ", [33, 65]).", "startOffset": 2, "endOffset": 10}, {"referenceID": 63, "context": "Here we refer to the semantics described in [65] adopted by BPMN, stating that (Rule O1) an inclusive merge M can be executed if the following two conditions hold (Rules O2, O3):", "startOffset": 44, "endOffset": 48}, {"referenceID": 31, "context": "Similarly to proposals like Semantic BPM [32] and Semantic Web Services [22], we will make use of semantic annotations to enrich the procedural knowledge specified by a BPS with domain knowledge expressed in terms of a given business reference ontology.", "startOffset": 41, "endOffset": 45}, {"referenceID": 21, "context": "Similarly to proposals like Semantic BPM [32] and Semantic Web Services [22], we will make use of semantic annotations to enrich the procedural knowledge specified by a BPS with domain knowledge expressed in terms of a given business reference ontology.", "startOffset": 72, "endOffset": 76}, {"referenceID": 27, "context": "The translation into triple form can be done automatically as shown in [28, 59].", "startOffset": 71, "endOffset": 79}, {"referenceID": 57, "context": "The translation into triple form can be done automatically as shown in [28, 59].", "startOffset": 71, "endOffset": 79}, {"referenceID": 42, "context": "We refer the reader to [43] for the", "startOffset": 23, "endOffset": 27}, {"referenceID": 42, "context": "Without loss of generality, unlike [43], we encode binary intersection instead of a general n-ary operator.", "startOffset": 35, "endOffset": 39}, {"referenceID": 39, "context": "The Frame Problem was formulated in [40] as the problem of \u201cexpressing a dynamical domain in logic without explicitly specifying which conditions are not affected by an action\u201d.", "startOffset": 36, "endOffset": 40}, {"referenceID": 60, "context": "The Fluent Calculus addresses both the representational and inferential aspects of the Frame Problem [62] by modeling change as the difference between two states, caused by actions that deterministically result in a bounded number of direct (positive and negative) effects.", "startOffset": 101, "endOffset": 105}, {"referenceID": 25, "context": "The Ramification Problem [26] is the problem of representing and inferring informa-", "startOffset": 25, "endOffset": 29}, {"referenceID": 65, "context": ", the Possible Model Approach - PMA [67]).", "startOffset": 36, "endOffset": 40}, {"referenceID": 58, "context": "Another solution proposed in the context of the Fluent Calculus, is based on causal propagations regulated by causal relationships [60], which specify how indirect effects are derived from direct effects and domain axioms.", "startOffset": 131, "endOffset": 135}, {"referenceID": 14, "context": "section we propose a model checking methodology based on a formalization of the temporal logic CTL (Computation Tree Logic, see [15] for a comprehensive overview) as a set of rules.", "startOffset": 128, "endOffset": 132}, {"referenceID": 23, "context": "a very natural choice [24, 37].", "startOffset": 22, "endOffset": 30}, {"referenceID": 36, "context": "a very natural choice [24, 37].", "startOffset": 22, "endOffset": 30}, {"referenceID": 14, "context": ", EF(F ) \u2261 EU(true, F ) and AG(F ) \u2261 \u00acEF(\u00acF ) [15].", "startOffset": 46, "endOffset": 50}, {"referenceID": 14, "context": "Usually, the semantics of CTL formulas is defined by introducing a Kripke structure K, which represents the state space and the state transition relation, and by defining the satisfaction relation K, s |= F , which denotes that a formula F holds in a state s of K [15].", "startOffset": 264, "endOffset": 268}, {"referenceID": 14, "context": "In the definition of Kripke structure given in [15], the transition relation R is assumed to be total, that is, every state S1 has at least one successor state S2 for which R(S1, S2) holds.", "startOffset": 47, "endOffset": 51}, {"referenceID": 14, "context": "For this reason the semantics of the temporal operators given in [15], which refers to infinite paths of the Kripke structure, is suitably changed here, according to [3], by taking into consideration maximal paths, i.", "startOffset": 65, "endOffset": 69}, {"referenceID": 2, "context": "For this reason the semantics of the temporal operators given in [15], which refers to infinite paths of the Kripke structure, is suitably changed here, according to [3], by taking into consideration maximal paths, i.", "startOffset": 166, "endOffset": 169}, {"referenceID": 44, "context": "The rules defining the semantics of the operator EG are similar to the constraint logic programming definition proposed in [45].", "startOffset": 123, "endOffset": 127}, {"referenceID": 44, "context": "Similarly to [45], our definition of the semantics of EG avoids the introduction of greatest fixed points of operators on sets of states which are often required by the approach described in [15].", "startOffset": 13, "endOffset": 17}, {"referenceID": 14, "context": "Similarly to [45], our definition of the semantics of EG avoids the introduction of greatest fixed points of operators on sets of states which are often required by the approach described in [15].", "startOffset": 191, "endOffset": 195}, {"referenceID": 37, "context": ", the least Herbrand model [38]).", "startOffset": 27, "endOffset": 31}, {"referenceID": 14, "context": "g, EF and AG, follows from the equivalences defining them [15].", "startOffset": 58, "endOffset": 62}, {"referenceID": 2, "context": "It is worth noting that in some special cases the assumption that paths are maximal, but not necessarily infinite, matters [3].", "startOffset": 123, "endOffset": 126}, {"referenceID": 14, "context": "Finally, we would like to note that the definition of the CTL semantics given here is equivalent to the one in [15] in the presence of infinite computation paths only.", "startOffset": 111, "endOffset": 115}, {"referenceID": 62, "context": "This property, also known as option to complete [64], can be specified by the following rule, stating that the property opt com holds if the CTL property AG(EF(final(p))) holds in the initial state of p:", "startOffset": 48, "endOffset": 52}, {"referenceID": 64, "context": "(3) Another relevant property of a BPS is executability [66], according to which no activity reached by the control flow should be unable to execute due to some unsatisfied enabling condition.", "startOffset": 56, "endOffset": 60}, {"referenceID": 37, "context": "In [38] a sufficient condition ensuring that a query does not flounder is based on the notion of allowed query and rule.", "startOffset": 3, "endOffset": 7}, {"referenceID": 37, "context": "Unfortunately, not all rules in KB are allowed in the sense of [38].", "startOffset": 63, "endOffset": 67}, {"referenceID": 0, "context": "This classification is often called a mode [1].", "startOffset": 43, "endOffset": 46}, {"referenceID": 0, "context": "The following notion is adapted from [1].", "startOffset": 37, "endOffset": 40}, {"referenceID": 13, "context": "This property is equivalent to the bounded-term-size property that in [14] has been shown to be a sufficient condition for termination of SLG-resolution [14].", "startOffset": 70, "endOffset": 74}, {"referenceID": 13, "context": "This property is equivalent to the bounded-term-size property that in [14] has been shown to be a sufficient condition for termination of SLG-resolution [14].", "startOffset": 153, "endOffset": 157}, {"referenceID": 13, "context": "3 in [14].", "startOffset": 5, "endOffset": 9}, {"referenceID": 14, "context": "However, it is sufficient for showing that, in line with the complexity of the CTL verification problem [15], our verification method has polynomial running time with respect to the number of states that are potentially reachable during process enactment.", "startOffset": 104, "endOffset": 108}, {"referenceID": 13, "context": "A tighter complexity analysis could be done by directly analyzing the evaluation of queries with respect to KB, instead of relying, as done above, on the general results provided by [14].", "startOffset": 182, "endOffset": 186}, {"referenceID": 53, "context": "QuBPAL is an expressive query language for a BPKB based on the theoretical framework presented in this paper (a preliminary specification has been discussed in [55]).", "startOffset": 160, "endOffset": 164}, {"referenceID": 47, "context": "It is worth noting that the representation of OWL/RDFS resources as sets of triples, which directly encode the underlining RDF graph, allows us to pose queries over the ontology in a form very close to the SPARQL (SPARQL Protocol and RDF Query Language) standard [49], defined by the World Wide Web Consortium and widely accepted in the Semantic Web community.", "startOffset": 263, "endOffset": 267}, {"referenceID": 56, "context": "This component implements the reasoning methods described in Section 6 by using the XSB Prolog6 system [58], which is a Logic Programming system based on the SLGresolution inference strategy recalled in Section 2.", "startOffset": 103, "endOffset": 107}, {"referenceID": 62, "context": "defining a formal semantics of BP models, Petri nets [64] are the most used paradigm to capture the execution semantics of graph-based procedural languages (the BPMN case is discussed in [20]).", "startOffset": 53, "endOffset": 57}, {"referenceID": 19, "context": "defining a formal semantics of BP models, Petri nets [64] are the most used paradigm to capture the execution semantics of graph-based procedural languages (the BPMN case is discussed in [20]).", "startOffset": 187, "endOffset": 191}, {"referenceID": 23, "context": ", [24, 37].", "startOffset": 2, "endOffset": 10}, {"referenceID": 36, "context": ", [24, 37].", "startOffset": 2, "endOffset": 10}, {"referenceID": 14, "context": "state models through model checking techniques [15], where queries, formulated in some temporal logics, specify properties of process executions.", "startOffset": 47, "endOffset": 51}, {"referenceID": 26, "context": "Other approaches based on Logic Programming that are worth mentioning are [27, 53, 42].", "startOffset": 74, "endOffset": 86}, {"referenceID": 51, "context": "Other approaches based on Logic Programming that are worth mentioning are [27, 53, 42].", "startOffset": 74, "endOffset": 86}, {"referenceID": 41, "context": "Other approaches based on Logic Programming that are worth mentioning are [27, 53, 42].", "startOffset": 74, "endOffset": 86}, {"referenceID": 26, "context": "[27] presents an approach to BP verification based on an extension of answer set programming with temporal logic and constraints, where the compliance of business rules is checked by bounded model checking techniques extended with constraint solving for dealing with conditions on numeric data.", "startOffset": 0, "endOffset": 4}, {"referenceID": 51, "context": "[53, 42] mainly focus on the analysis and on the enactment of flow models representing service choreographies, while we are not aware of specific extensions that deal with the semantic annotation of procedural process models with respect to domain ontologies.", "startOffset": 0, "endOffset": 8}, {"referenceID": 41, "context": "[53, 42] mainly focus on the analysis and on the enactment of flow models representing service choreographies, while we are not aware of specific extensions that deal with the semantic annotation of procedural process models with respect to domain ontologies.", "startOffset": 0, "endOffset": 8}, {"referenceID": 64, "context": "There is a growing body of contributions beyond pure control flow verification [66, 25, 41, 19].", "startOffset": 79, "endOffset": 95}, {"referenceID": 24, "context": "There is a growing body of contributions beyond pure control flow verification [66, 25, 41, 19].", "startOffset": 79, "endOffset": 95}, {"referenceID": 40, "context": "There is a growing body of contributions beyond pure control flow verification [66, 25, 41, 19].", "startOffset": 79, "endOffset": 95}, {"referenceID": 18, "context": "There is a growing body of contributions beyond pure control flow verification [66, 25, 41, 19].", "startOffset": 79, "endOffset": 95}, {"referenceID": 64, "context": "In [66] the authors introduce the notion of Semantic Business Process Validation, which aims at verifying properties related to the absence of logical errors which extend the notion of workflow soundness [64].", "startOffset": 3, "endOffset": 7}, {"referenceID": 62, "context": "In [66] the authors introduce the notion of Semantic Business Process Validation, which aims at verifying properties related to the absence of logical errors which extend the notion of workflow soundness [64].", "startOffset": 204, "endOffset": 208}, {"referenceID": 24, "context": "BP analysis techniques based on logical descriptions of effects of task execution are also proposed in [25, 41], but they introduce algorithms in an informal way, since a formal execution semantics is not provided, and a background ontology is not considered.", "startOffset": 103, "endOffset": 111}, {"referenceID": 40, "context": "BP analysis techniques based on logical descriptions of effects of task execution are also proposed in [25, 41], but they introduce algorithms in an informal way, since a formal execution semantics is not provided, and a background ontology is not considered.", "startOffset": 103, "endOffset": 111}, {"referenceID": 18, "context": "In [19] the authors discuss a CTL model checking method for annotated state transition systems, encoding the procedural behavior of Web Services interactions.", "startOffset": 3, "endOffset": 7}, {"referenceID": 12, "context": "Finally, we would like to mention a related research area, dealing with the verification of temporal properties in databases that evolve over time due to execution of actions operating on data (see [13] for a survey).", "startOffset": 198, "endOffset": 202}, {"referenceID": 29, "context": "Recently, [30] proposed Knowledge and Action", "startOffset": 10, "endOffset": 14}, {"referenceID": 29, "context": "While the main goal of [30] is to provide theoretical results that characterize the decidability and (very high) complexity of KAB reasoning, our objective is more pragmatic and our formalization enables the implementation, through standard LP engines, of a wider set of (polynomial time) reasoning services, besides the verification of temporal properties.", "startOffset": 23, "endOffset": 27}, {"referenceID": 8, "context": "The Process Specification Language (PSL) [9] is an ontology designed to formalize reasoning about processes in first-order logic.", "startOffset": 41, "endOffset": 44}, {"referenceID": 49, "context": "The basic structure that characterizes the behavior of a process in PSL is the occurrence tree (whose model is inspired by the Situation Calculus [51]), which contains all (infinite) sequences of occurrences of atomic activities starting from an initial state.", "startOffset": 146, "endOffset": 150}, {"referenceID": 16, "context": ", BPMN [17]), EPC [63], XPDL [29], Petri nets [11], while others have been designed in the context of interoperability, to overcome heterogeneities deriving from the adoption of different languages by mapping them to one common process ontology (e.", "startOffset": 7, "endOffset": 11}, {"referenceID": 61, "context": ", BPMN [17]), EPC [63], XPDL [29], Petri nets [11], while others have been designed in the context of interoperability, to overcome heterogeneities deriving from the adoption of different languages by mapping them to one common process ontology (e.", "startOffset": 18, "endOffset": 22}, {"referenceID": 28, "context": ", BPMN [17]), EPC [63], XPDL [29], Petri nets [11], while others have been designed in the context of interoperability, to overcome heterogeneities deriving from the adoption of different languages by mapping them to one common process ontology (e.", "startOffset": 29, "endOffset": 33}, {"referenceID": 10, "context": ", BPMN [17]), EPC [63], XPDL [29], Petri nets [11], while others have been designed in the context of interoperability, to overcome heterogeneities deriving from the adoption of different languages by mapping them to one common process ontology (e.", "startOffset": 46, "endOffset": 50}, {"referenceID": 35, "context": ", GPO [36], BPMO [21]).", "startOffset": 6, "endOffset": 10}, {"referenceID": 20, "context": ", GPO [36], BPMO [21]).", "startOffset": 17, "endOffset": 21}, {"referenceID": 11, "context": "Another stream of related papers regards the semantic enrichment of Web Services, where relevant work has been done within the OWL-S [12] and WSMO [52] initiatives.", "startOffset": 133, "endOffset": 137}, {"referenceID": 50, "context": "Another stream of related papers regards the semantic enrichment of Web Services, where relevant work has been done within the OWL-S [12] and WSMO [52] initiatives.", "startOffset": 147, "endOffset": 151}, {"referenceID": 55, "context": "Among them, [57] adopts the high-level agent programming language Golog [51], [6, 44] rely on Situation Calculus variants, while [8, 5] are based on a direct translation of OWL-based service description into a Fluent Calculus theory.", "startOffset": 12, "endOffset": 16}, {"referenceID": 49, "context": "Among them, [57] adopts the high-level agent programming language Golog [51], [6, 44] rely on Situation Calculus variants, while [8, 5] are based on a direct translation of OWL-based service description into a Fluent Calculus theory.", "startOffset": 72, "endOffset": 76}, {"referenceID": 5, "context": "Among them, [57] adopts the high-level agent programming language Golog [51], [6, 44] rely on Situation Calculus variants, while [8, 5] are based on a direct translation of OWL-based service description into a Fluent Calculus theory.", "startOffset": 78, "endOffset": 85}, {"referenceID": 43, "context": "Among them, [57] adopts the high-level agent programming language Golog [51], [6, 44] rely on Situation Calculus variants, while [8, 5] are based on a direct translation of OWL-based service description into a Fluent Calculus theory.", "startOffset": 78, "endOffset": 85}, {"referenceID": 7, "context": "Among them, [57] adopts the high-level agent programming language Golog [51], [6, 44] rely on Situation Calculus variants, while [8, 5] are based on a direct translation of OWL-based service description into a Fluent Calculus theory.", "startOffset": 129, "endOffset": 135}, {"referenceID": 4, "context": "Among them, [57] adopts the high-level agent programming language Golog [51], [6, 44] rely on Situation Calculus variants, while [8, 5] are based on a direct translation of OWL-based service description into a Fluent Calculus theory.", "startOffset": 129, "endOffset": 135}, {"referenceID": 30, "context": "gree of community consensus, and can thus be valuable input for creating business domain ontologies [31].", "startOffset": 100, "endOffset": 104}, {"referenceID": 38, "context": "zational and data models) into formal theories [39].", "startOffset": 47, "endOffset": 51}, {"referenceID": 17, "context": "Finally, approaches based on information retrieval and linguistic analysis can also be applied to support the annotation, suggesting correspondences between activity labels and terms defined in an ontology [18].", "startOffset": 206, "endOffset": 210}, {"referenceID": 46, "context": "We are confident that the query evaluation process can be strongly improved through more sophisticated query rewriting and program transformation techniques [48], which have been largely investigated in the area of Logic Programming.", "startOffset": 157, "endOffset": 161}, {"referenceID": 34, "context": "in [35]; (iii) verification techniques for BPs in the presence of data constraints, by following approaches based on Constraint Logic Programming such as, for instance, the one proposed in [23].", "startOffset": 3, "endOffset": 7}, {"referenceID": 22, "context": "in [35]; (iii) verification techniques for BPs in the presence of data constraints, by following approaches based on Constraint Logic Programming such as, for instance, the one proposed in [23].", "startOffset": 189, "endOffset": 193}, {"referenceID": 52, "context": "The query-based support to process composition discussed in [54] represents a first contribution in that direction.", "startOffset": 60, "endOffset": 64}], "year": 2014, "abstractText": "We propose a framework grounded in Logic Programming for representing and reasoning about business processes from both the procedural and ontological point of views. In particular, our goal is threefold: (1) define a logical language and a formal semantics for process models enriched with ontology-based annotations; (2) provide an effective inference mechanism that supports the combination of reasoning services dealing with the structural definition of a process model, its behavior, and the domain knowledge related to the participating business entities; (3) implement such a theoretical framework into a process modeling and reasoning platform. To this end we define a process ontology coping with a relevant fragment of the popular BPMN modeling notation. The behavioral semantics of a process is defined as a state transition system by following an approach similar to the Fluent Calculus, and allows us to specify state change in terms of preconditions and effects of the enactment of activities. Then we show how the procedural process knowledge can be seamlessly integrated with the domain knowledge specified by using the OWL 2 RL rule-based ontology language. Our framework provides a wide range of reasoning services, including CTL model checking, which can be performed by using standard Logic Programming inference engines through a goal-oriented, efficient, sound and complete evaluation procedure. We also present a software environment implementing the proposed framework, and we report on an experimental evaluation of the system, whose results are encouraging and show the viability of the approach.", "creator": "LaTeX with hyperref package"}}}