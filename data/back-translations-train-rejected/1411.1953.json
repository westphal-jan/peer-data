{"id": "1411.1953", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Nov-2014", "title": "Hardware and Software manual for Evolution of Oil Droplets in a Chemo-Robotic Platform", "abstract": "This manual outlines a fully automated liquid handling robot to enable physically-embodied evolution within a chemical oil-droplet system. The robot is based upon the REPRAP3D printer system and makes the droplets by mixing chemicals and then placing them in a petri dish after which they are recorded using a camera and the behaviour of the droplets analysed using image recognition software. This manual accompanies the open access publication published in Nature Communications DOI: 10.1038/ncomms6571.", "histories": [["v1", "Fri, 7 Nov 2014 15:41:34 GMT  (2725kb)", "http://arxiv.org/abs/1411.1953v1", "42 pages, 25 figures, list of printed parts"]], "COMMENTS": "42 pages, 25 figures, list of printed parts", "reviews": [], "SUBJECTS": "cs.RO cs.AI", "authors": ["juan manuel parrilla gutierrez", "trevor hinkley", "james taylor", "kliment yanev", "leroy cronin"], "accepted": false, "id": "1411.1953"}, "pdf": {"name": "1411.1953.pdf", "metadata": {"source": "CRF", "title": "Hardware and Software manual for Evolution of Oil Droplets in a Chemo\u2010Robotic Platform", "authors": ["Juan Manuel Parrilla Gutierrez", "Trevor Hinkley", "James Taylor", "Kliment Yanev", "Leroy Cronin"], "emails": ["lee.cronin@glasgow.ac.uk"], "sections": [{"heading": "Hardware and Software manual for Evolution of Oil Droplets in a Chemo\u2010Robotic Platform", "text": "Juan Manuel Parrilla Gutierrez1, Trevor Hinkley1, James Taylor1, Kliment Yanev2 and Leroy Cronin * 1 1WestCHEM, School of Chemistry, University of Glasgow, Glasgow, G12 8QQ UK2Future Bits OpenTech UG, Cologne, 51103, Germany * Corresponding Author: lee.cronin @ glasgow.ac.uk"}, {"heading": "S.1 Hardware", "text": "The robotic system specified in this document, DropBot, was built on the foundations of the RepRap 3D Printer Project [1], which was chosen as a starting point for its open source philosophy, extensive documentation, and large community. These reasons were considered advantageous because they were intended to contribute to the easy replication and adoption of the DropBot paradise, and to its implementation in other laboratories, as opposed to a proprietary product. Early DropBot designs (data not shown) aimed to use a RepRap 3D printer directly by replacing the thermoplastic extruder with a liquid handling system. After early prototyping phases, it was decided that this platform was unsuitable, and so a new design was formulated that used modular components from the RepRap project, rather than its monolithic design. This section provides an overview of the methodology applied to the design and implementation of DropBot Handling System, which is included in this subsection of S.Rap."}, {"heading": "S.1.1 Robot Frame", "text": "The primary constraints encountered in early prototyping phases, when attempts were made to transform a RepRap 3D printer directly into a liquid handling robot, were the limited working area and transposition of the target platform in the Y axis, rather than the manipulation apparatus. The most common design for a RepRap 3D printer has a working area of 20x20cm that was unsuitable for the target experiments.The constraints imposed by the size of the experimental apparatus rendered a target platform of about 50x40cm unusable; no existing printer design was discovered that met the other requirements that would meet this criterion at the time of the project initiation.The second factor, the movement of the stage along the Y axis, rendered the design unsuitable for a liquid handling robot because it introduced extreme turbulence into the liquid phase target chemistry; essentially, the stage behaved similarly to the axle physics of the Y axis, where a majority of the axle plate was located below the Y axis physics."}, {"heading": "S.1.1.1 Mechanical design", "text": "Figure 1 shows the final design used for all methods in this publication. Primary modules of the design are: 1. The staging area on which the experimental device is placed; 2. The X-axis, which actuates the motion along the long edge of the robot; 3. The Y-axis, which actuates the motion along the short edge of the robot; 4. The manipulator (the mobile slide), which actuates the recipe mixture, aqueous phase handling, droplet placement and cleaning; 5. The fluid handling platform, which takes over the introduction of liquids into the main stage of the robot for further manipulation."}, {"heading": "S.1.1.2 Staging area", "text": "The stage area consisted of a large glass plate attached to the robot frame, which was defined by the space over which the X-Y trolley could move, so all the equipment that had to be manipulated by the trolley was placed on the stage. At the center of the stage was a 96-well plate in which liquids for mixing recipes were placed in front of the drop placement. There was a magnetic stirrer under the well plate to actuate miniature magnetic stirrers inside each well. Also on the stage were two petri dishes, one used to perform the experiments and the other to collect waste after the experiments were completed. After a series of 48 or 96 experiments, manual intervention was required (depending on whether the experiments ran overnight) to clean the well plate and the waste petri dish."}, {"heading": "S.1.1.5 Mobile carriage", "text": "Figure 4 shows a 3D representation of the X-Y carriage. This component runs along the Y-axis over the belt, the rod and the linear bearing system. The \"comb,\" which runs from left to right along the Y-axis, served as the mounting point for the circuit (subsection p.1.3)."}, {"heading": "S.1.1.6 Fluid platform", "text": "The Liquid Conveying Platform is a simple frame constructed from aluminum strut profiles and the three-dimensional printed mounting parts of the main robot frame. To support the weight of the pumps, a polycarbonate sheet has been fastened to the strut; the frame has been designed to accommodate reagents under the pumps, a design chosen to minimize the impact of any chemical contamination by preventing contact with the electronics.The design of the pumps themselves is described in detail in Section p.1.2.1."}, {"heading": "S.1.2 Liquid Handling", "text": "The servo syringes were used to mix the liquid in the well plates and to transport small quantities of liquid through droplets into the petri dish. Syringe pumps were used to transport liquids from the source reagent bottles to the components on the experimental stage. S.1.2.1 Pumps In the course of external and preliminary research, the authors had accumulated a number of defective commercial syringe pumps that were put out of service by faults in their logic boards. The original electronics were removed and the motors were connected to custom components (see subsection p. 1.3). A total of seven such pumps were used by the robot, which was mounted on a single platform (see subsection p. 1.1.6). Each pump was equipped with a triple valve: the syringe was approved for connection to one phase or another."}, {"heading": "S.1.2.2 Mixing stage", "text": "The robot used a standard 96-well plate (see Figure 6); each well had its own mini magnetic stirrer and the entire plate was mounted on a stirrer plate. This design was chosen so that several experiments could be carried out before manual intervention was required to clean the mixing area."}, {"heading": "S.1.2.3 Carriage\u2010mounted syringes", "text": "As shown in Figure 7, an automatic syringe was designed to be used with the X-Y carriage. Cover and structure were printed in three-dimensional PLA. Independent crank mechanisms were used to actuate the piston of the syringe and to lower and lift the syringe, which consisted of the standard servo motor arm and a three-dimensional printed piece connected by steel pins. The crank was aligned with the center of the syringe itself to avoid unwanted lateral torques. Smaller steel rods and Teflon linear bearings were also used in this illustration to rotate to and from the servo. The syringes were equipped with a metal needle tip, as shown in Figure 8. The mechanism for lifting and lowering the syringe via a crank is also shown in this illustration. On the right side of Figure 8, the same mechanism that actuates a syringe can be seen as shown in Figure 8."}, {"heading": "S.1.3 Electronics", "text": "The electronics can be divided into three groups: one group controls the movement of the robot along the X and Y axes, another group controls the servo motors that actuate the syringes, and a third group controls the pumps."}, {"heading": "S.1.3.1 Axis control", "text": "The motion along the X and Y axes was carried out using a stripped-down version of the electronics used by a RepRap 3D printer, where only the parts required for the X and Y movements were stored: an Arduino Mega [2] board and \"A4988 Stepper Motor Driver Carrier.\" A PCB shield was designed (see Figure 9) that connected the Arduino board to the motor drivers and provided connections for the motors to the drivers. In addition, for homing purposes, connections were provided for two end stops, each assigned to a specific axis. Each step driver had 16 pins, but only 3 of these were needed to control the motor: activation, step and direction, with the other pins connected to high (5V), low (GND), 12V or to the motor itself."}, {"heading": "S.1.3.2 Carriage control", "text": "The header input to the servo subsidiary board (Figure 11) consisted of twenty pins connected to the bypass on the XY driver board via a ribbon cable; the servo board itself was mounted on the X-Y slide to provide both power and control for the syringe actuation servo motors; each servo motor took power from a common power supply and was connected to a common ground, the only individual connection being a single PWM data pin to the Arduino. Thus, the servo subsidiary board was able to maintain 20 unique servo motors, of which a maximum of four were used in practice."}, {"heading": "S.1.3.3 Pump control", "text": "The pumps mentioned in Section S.1.2.1 were defective only in the functioning of their logic boards; the mechanical components and motors were fully operational. Therefore, since movement was provided by two NEMA family stepper motors, they were compatible with the shield developed for the X-Y axis control (Section S.1.3.1). Therefore, it was possible to reuse the mechanical components of these syringe pumps by replacing their electronics with custom printed circuit boards (Figure 12). Since each board controlled two stepper motors, each pump was assigned a single board (Figure 13). A second Arduino was entirely assigned to the pump control, in addition to a second power supply assigned only to the pump motors."}, {"heading": "S.1.4 Bill of Materials", "text": "The frame was made using Bosch \u2010 Wrexroth 20x20mm aluminum struts profile \u2022 Hamilton specific fastening \u2022 7d printed PLA1 pieces. \u2022 The motors used were NEMA2 14 for the Y axis and two NEMA 17s for the X axis. \u2022 The linear motion mechanics were derived from the RepRap printer, using a belt (timing belt T2.5x6mm) and a pulley (T2.5 pulley, 5mm bore) connected to the motors. \u2022 Round profile hardened steel rod (8h7, chrome-plated) and round profile linear bearing (LME8UU) were used to achieve smooth linear movement. \u2022 The modified and used syringe pumps were \"TriContinent C \u2010 Series\" \u2022 \"IDEX Health Science PEEEK 1 / 8\" hoses were used to connect these pumps."}, {"heading": "S.2 Software", "text": "The software is divided into three conceptual modules: planning, acting and scanning. Figure 14 represents the structure of this hierarchy; the flow of data takes place in an iterative loop (shown).The artificial intelligence (AI) component is responsible for coordinating the higher-level experimental plan, selecting droplet formulations based on previous (if any) data, and passing these formulas to the next component. The artificial intelligence (AI) component is responsible for coordinating the higher-level experimental plan, selecting droplet formulations based on previous (if any) data, and passing these formulas to the next component. The artificial intelligence component behaves as global, with an overview of an entire experimental series, and the components of the RC, FW and CV merely have an overview of individual experiments."}, {"heading": "S.2.1 Robot Controller", "text": "The functions of the robot controller for translating experimental procedures form a high-level description into a G-code representation. The G-code can be considered as an intermediate layer between the description of a recipe and the digital actuation by the electronics. By using this translation pipeline, a number of expertly written modules could be used, which considerably reduces development costs and time. Core component of the RC is the library PrintRun [4], which was developed for controlling RepRap printers (via G-code) and is the most popular selection of libraries for this purpose. As this central library is written in the Python programming language [5], this language was used for the entire development of this layer. PrintRun communicates with the firmware based on Arduino (via G-code) and establishes the arbitrary serial connection made possible by the pySerial library on the host computer [6]."}, {"heading": "S.2.2 Firmware", "text": "The firmware layer is directly responsible for actuating mechanical parts. The firmware was written specifically for the Arduino target boards, so the Arduino development environment was used for this layer. The native language of this environment is C + +; therefore, this language was used to develop the firmware layer. There were two separate Arduino boards, one to control the X-Y trolley (subsection p.1.1.5) and one to control the Fluid Platform (subsection p.1.1.6) As with the RC layer, the trolley firmware was built on existing 3D printer modules. In this case, the firmware core used was the Sprinter package [7] commonly used in Reprap 3D printers. Functionality related to Z-axis motion, temperature control and extrusion of thermoplastic printers was added to control the thermoplastic from the code and motor capacity.In place of its functionality, see section 1.for thermoplastic printers."}, {"heading": "S.2.3 Computer Vision", "text": "The robot used a \"PS3 EyeToy\" as the base sensor to record video data from the bottom of the experimental field. To facilitate visual analysis, a white background panel was used to cover the petri dish to block visual ambient noise. 640x480 pixel resolution and a frame rate of 30 FPS were used for video recording. Core component of the computer image component was the OpenCV library (version 2.4.7) [11], with SciPy [12] used for some additional analysis. All analyses were performed using the Python bindings for OpenCV."}, {"heading": "S.2.3.1 Common Image Processing", "text": "The CV component consisted of several image processing pipelines, one for each behavior that needed to be evaluated. Through this pipeline, droplets were identified in raw image data (Figure 18, top left) and analyzed for their position, size, shape, and color. Raw frame data was presented to the image processing pipelines in the form of RGB images as received by the camera. No prior information was used to inform the image analysis pipelines. Figure 17 outlines the complete processing pipeline. The first step for all pipelines began with a Hough transformation [13] that was used to detect the petri dish. Once detected, an analytical arena, slightly smaller than the petri dish, was defined. The goal of this reduction was to remove those droplets that had gotten caught at the edge of the shell; these droplets were considered \"dead.\" After the Hough transformation, the pipeline was split into two long-term tracks, one for this analysis."}, {"heading": "S.2.3.2 Tracking", "text": "A common method of tracking objects is the use of a filter such as the Kalman filter [9] or a particle filter [10]. Since the camera generated 30 FPS, it was enough to overlap consecutive images to track droplets over time, considering how large a droplet is and how much it could move between images. A droplet dt in image t and a droplet set Dt \u2212 1 in image t \u2212 1 formed a group of candidates Ct \u2212 1 as droplets in Dt \u2212 1, whose center was within a range defined as a circle with 30 pixels of radius around dt. The best candidate in Ct \u2212 1 was selected because it was the closest droplet to dt using euclidean distance. If there were no droplets in this range or all droplets were already assigned to another droplet, this droplet was considered new."}, {"heading": "S.2.3.3 Experimental Data Generation", "text": "For each experiment, a data structure was created in which the positions of the droplets were described over time. These data were used to evaluate an experiment based on various factors. In the course of this investigation, the behaviors \"division,\" \"movement\" and \"direction\" were analyzed."}, {"heading": "S.2.3.4 Division", "text": "Each experiment started with the robot putting droplets into the aqueous medium. Depending on the chemistry, the droplets could split as soon as they came into contact with the aqueous phase, but the robot made exactly four injections. The division was defined as the number of droplets that were alive at the end of the experiment. We considered each droplet with an area of more than 15 pixels as viable."}, {"heading": "S.2.3.5 Movement", "text": "For a droplet d, its motion was defined as the Euclidean distance, which is described by its translation between images t and t + 1. This translation was described in pixels as basic distance units. Since several droplets can move between two images, the sum of the distances described by all the droplets was divided by the number of droplets, thus calculating the average distance per droplet. Each experiment lasted 1 minute and contained a few thousand images. The average distance per droplet was calculated for each pair of images, its quantity was added and then divided by the total number of images to obtain the average translation described per droplet per image. Thereafter, the resulting fitness is derived from (1), with N being the total number of images in the video sequence, M the total number of droplets observed and where (xi, t, yi, t) the euclidean coordinate of the droplets on the image is i."}, {"heading": "S.2.3.6 Directionality", "text": "For a droplet d in Figure t, t + 1, and t + 2, its position for each image in the XY plane is defined by the points A, B, and C. Two vectors have been defined: and. Directional droplets are the angle between v and w, which represents the change in direction on a droplet pattern. Low values represent droplets that move in straight lines, mean values for droplets that describe curves, and high values represent droplets that vibrate or wobble. Reverse of the Dot product formula: (2) The angle results in: (3) For each experiment, the angle rotation per droplet, per image, was given as directional suitability, as indicated in (4)."}, {"heading": "S.2.4 Artificial Intelligence", "text": "For each behavior to be tested, three genetic algorithms (GA) were used, with each GA run conducted for 21 generations, using a fixed population size of 25 individuals and 15 individuals from the previous generation for a total of 225 recipes. Each recipe was repeated three times, and the minimum between the mean and the average of these 3 experiments was returned. Each experiment generated four droplets, for a total of 8100 droplets. A complete test performed the GA three times, for a total of 675 recipes. Each recipe was repeated three times, for a total of 2025 experiments. Each experiment generated 4 droplets, for a total of 8100 droplets. Individuals were given fixed-length genomes with 4 floating-point numbers (i.e. Quantitative Trait Lois). GA used one probability per location for mutation (which resulted in one poisoning - distributed number of mutations per individual). For each location selected for the mutation, a normal-distributed noise function was used, with one remedy from each parent and one SD being distributed differently."}, {"heading": "S.3 Chemistry", "text": "All experiments were carried out at 22 degrees Celsius. S.3.1 The preparation of aqueous phase tetradecyl trimethylammonium bromide (TTAB) (6.73 g, 20.0 mmol) was dissolved in distilled water (approx. 600 ml), adjusted to pH 13.00 with 5 M NaOH solution and amounted to up to 1 L to produce a 20 mM solution at pH 13.00."}, {"heading": "S.3.2 Preparation of oils", "text": "The oils (1-octanol, octanic acid, dodecane, 1-pentanol and diethyl phthalate) were produced in 200 ml aliquotas in test bottles. Each oil was dyed and swirled at 0.25 mg / ml Sudan III."}, {"heading": "S.3.3 Cleaning cycle", "text": "After each experiment, acetone (approx. 3 ml) was pumped into the petri dish to dissolve remaining oil droplets, and the mixture was sucked from the bowl into the waste container. Subsequently, the bowl was washed with acetone (2 x 3 ml) and aqueous phase (2 x 3 ml), often leaving traces that hindered subsequent experiments."}, {"heading": "S.4 Methods", "text": "The robot was based on a RepRap 3D printer architecture with a webcam for video recording / image analysis, and the droplet formulations are then produced in well-chosen plates (96 well format), in which each is well stirred with a magnetic stirrer. The droplet formulations are based on the following reagents (1 octanol, 1 pentanol, diethyl phthalate (DEP), dodecanes and dilutions of octanic acid in one of the other oils (typically 20The formulations were delivered from the computer control in the form of four numbers representing the proportion of each oil; therefore the total volume of the oils adds up to \"1.0.\" The total volume of the oils in a well was 360 \u03bcL. The specific quantity for each oil multiplied by its relative proportion."}, {"heading": "S.5 Analysis", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "S.5.1 Processing of Fitness Landscapes", "text": "The fitness landscapes shown in Figure 6 of the main text were generated through a multi-level analytical pipeline. GA results were first aggregated and fed through a radial core spine regression base function to build a model, which was then queried by a grid search along each side of the parameter space simplex to assess fitness at any location."}, {"heading": "S.5.1.1 Kernel Ridge Regression", "text": "The general linear regression (GLR) performs a model fit by minimizing the sum of square errors over a space of linear coefficients, in an equation of form (5) with the sum of square errors specified for points such as. (6) Ridge regression, also known as Tikhonov regression [24], is a commonly used method of regulating poorly posed problems. This form of regression increases the minimization by a weighted penalty for the magnitude of the coefficient vector: (7) Kernel regression is a reformulation of the ridge regression used in situations where the number of dimensions exceeds the number of data points. Equation 5 is replaced by (8), with Equation 7 taking the equivalent substitution: (9) An important property of this reformulation is that it requires the calculation of a point product between each entered vector and each other point-point point."}, {"heading": "S.5.1.2 Radial Basis Function", "text": "The core function that we use to extend the detected points into a smooth fitness landscape is the Gaussian kernel. This core function falls into the broader category of radial basic functions (RBFs), whose members are defined by being real functions that depend only on the distance, in the input space, between the input vectors. Here, the distance is defined between points i and j like. (14) Gaussian RBF then defines the core function between two points i and j like. (15) Where it concerns a problem-specific parameter, which roughly corresponds to the standard deviation of the Gaussian probability distribution. A special property of the Gaussian core function, which is not shared by other RBFs, is its implicit mapping of the input vectors into an infinitely dimensioned feature space. This property results from the extension of the exponential input vector: (16) (17) As a result of the Gaussian core function, each of the training can be derived for an input vector."}, {"heading": "S.5.1.3 Complete Landscapes", "text": "Each of these subfigures shows a three-dimensional \"facet\" of the four-dimensional space of the oil composition. Each facet has been chosen to represent the global maximum for each environment in each case. However, since each facet is derived by holding one of the oil fractions at zero, there are three additional facets per environment. Therefore, all facets for the three environments are shown below. Small fitness peaks are not shown. The scale corresponds to the fitness functions for each environment and is not comparable between the environments. Figure 22 shows four fitness landscapes per environment and shows a greater proportion of the analysis than the one in the main text. As the \"true\" representation of the data consists of a solid four-dimensional simplicity, the graphical representation is inherently difficult. Therefore, the authors opted for the representation on the faces of this simplicity. This was considered a reasonable approximation, since for every fourth environment the larger faces can be found on a two-dimensional simplicity and a two-dimensional simplicity (the two-dimensional division between one and one environment is not recognizable)."}, {"heading": "S.5.1.4 Catchment", "text": "In an evolutionary fitness landscape, multimodality corresponds to the concept of fitness islands [27]. Such a feature is defined as the volume surrounding a local (or global) maximum, so that for each point within that volume a consistent upward trend converges along the slope at that specific maximum. To analyze the number and limitations of the fitness landscapes underlying the experimental evolutionary component of this manuscript, a discovery algorithm was executed on the fitness hyper-levels derived from the core modeling, and the hyperlevels were presented as 4 301 x 301 quantified grids, as shown in Figure 4 of the main text. For each unique maximum, an active set was maintained, starting with a single location at that maximum. For each location in the active group, all eight surrounding quantified locations were tested, so that for each tested location, the 8 sites were tested around that specific location were tested."}, {"heading": "S.5.2 Evolutionary Trajectories", "text": "The raw fitness distributions as a function of the generation are shown in Figure 24. It is stated in the introduction that in all cases, the final population of the droplets exhibits an enriched fitness compared to the original populations. Therefore, this analysis was carried out by comparing only the upper half (fitness greater than the median) of each generation, resulting in 38 individuals per generation (all three repetitions were amalgamated).The analysis of the variance was then performed with fitness as a function of the generation (21 or 1) and is summarized in Table 4. From the results presented in Figure 24, a visual summary of the population shows whether fitness improved in the second half of each run. To determine whether this was the case or not, the same analysis was considered significant and the results summarized in Table 4."}, {"heading": "S.5.3 Lattice search", "text": "In order to better visualize the behavior space shown during the grid search, a self-organizing map analysis was applied to the resulting data. Readers unfamiliar with the technique are referred to [25] and [26] fitness landscapes that showed a highly significant improvement in fitness from the beginning to the end of the experiment - as introductory texts. Behaviors were assigned manually, based on a visual assessment by one of the researchers. Each circle in Figure 25 represents a \"node\": the basic performance unit of SOM. The chemical composition varies between both the X and Y axes in a spatially significant, but not visually apparent pattern. Each behavior is assigned to an individual color and it is evident that behavior in space and thus in composition is grouped."}, {"heading": "S.6 Printed Parts", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "S.6.1 Main frame", "text": "S.6.1.1 3DPP1, truss base3DPP1 truss base for solid corner connection on the robotic frameS.6.1.2 3DPP2, truss foot3DPP2 truss base and integrated foot for bottom half S.6.2 X-Y axisS.6.2.1 3DPP3, truss rod3DPP3 truss base and integrated rod holder for round steel barS.6.2.2 3DPP4, truss motor3DPP4 truss base and integrated motor holder for riley drivers S.6.2.3 3DPP5, Y idler3DPP5 X axis rail run with attachment sockets for Y \u2010 axis rodsS.6.2.4 3DPP6, Y idler with motor3DPP6 X axis rail runner with attachments for Y \u2010 axis rods and attachpoint for Y \u2010 pampersonalized D.DP3 X \u2010 Y carriageS.6.3.1 3DPPPP7, carriage for main components with attachments for Y \u2010 axis Pattachments P6."}, {"heading": "S.6.4 Fluid handling", "text": "S.6.4.1 3DPP11, Hose holder 3DPP11 component to accommodate hoses from the liquid platform attached to 3DPP7.S.6.4.2 3DPP12, Syringe holder 3DPP12 main component to accommodate syringes attached to 3DPP7.S.6.4.3 3DPP13, Syringe holder Cap3DPP13 Auxiliary component to accommodate syringes attached to 3DP11.S.6.4.4 3DPP14, Piston sleeve 3DPP14 component to hold and operate the syringe divers. S.6.4.5 3DPP15, Syringe tip 3DP15 component to operate the syringe up and down. S.6.4.6 3DPP16, Crankshaft to operate the syringe."}], "references": [{"title": "RepRap \u2010 The Replicating Rapid Prototyper", "author": ["R. Jones", "P. Haufe", "E. Sells", "P. Iravani", "V. Olliver", "C. Palmer", "A. Bowyer"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "A New Approach to Linear Filtering and Prediction Problems", "author": ["R.E. Kalman"], "venue": "Journal of Basic Engineering", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1960}, {"title": "Filtering Via Simulation: Auxiliary Particle Filters", "author": ["M.K. Pitt", "N. Shephard"], "venue": "Journal of the American Statistical Association", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1999}, {"title": "SciPy: Open source scientific tools for Python.http://www.scipy.org", "author": ["E. Jones", "T. Oliphant", "P Peterson"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2001}, {"title": "Use of the Hough Transformation to Detect Lines and Curves in Pictures", "author": ["R.O. Duda", "P.E. Hart"], "venue": "Comm. ACM,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1972}, {"title": "A Computational Approach To Edge Detection", "author": ["J. Canny"], "venue": "IEEE Trans. Pattern Analysis and Machine Intelligence,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1986}, {"title": "Robust text\u2010independent speaker identification using Gaussian mixture speaker models", "author": ["D.A. Reynolds", "R.C. Rose"], "venue": "IEEE Transactions on Speech and Audio Processing", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1995}, {"title": "CRC Handbook of Chemistry and Physics, 94th Edition", "author": ["W.M. Haynes"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2013}, {"title": "Solubilities and Surface Activities of Phthalates Investigated by Surface Tension Measurements", "author": ["M. Thomsen", "L. Carlsen", "S. Hvidt"], "venue": "Experimental Toxicology and Chemistry,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2001}, {"title": "The Isobaric Surface Tensions and Thermodynamic Properties of the Surfaces of a Series of n\u2010Alkanes, C5 to C18, 1\u2010Alkenes, C6 to C16, and of n\u2010 Decylcyclopentane, nDecylcyclohexane and  n\u2010Dcylbenzene", "author": ["J.J. Jasper", "E.V. Kring"], "venue": "Journal of Physical Chemistry,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1955}, {"title": "Thermodynamic prop + vinyl acetate, diethyl phthalate + vinyl acetate or bromocyclohexane, and dibutyl phthalate + vinyl acetate", "author": ["A.M. Rostamkolahi", "A.A. Rostami", "F. Koohyar", "F. Kiani"], "venue": "K. Chemical Papers,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2013}, {"title": "Solution of incorrectly formulated problems and the regularization method", "author": ["A.N. Tikhonov"], "venue": "Doklady Akademii Nauk SSSR", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1963}, {"title": "Self\u2010Organized Formation of Topologically Correct Feature Maps", "author": ["T. Kohonen"], "venue": "Biological Cybernetics", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1982}, {"title": "Deterministic and Stochastic Regimes of Asexual Evolution on Rugged Fitness Landscapes", "author": ["K. Jain", "J. Krug"], "venue": "Genetics", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2007}, {"title": "A simple sequentially rejective multiple test procedure", "author": ["S. Holm"], "venue": "Scandinavian Journal of Statistics", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1979}, {"title": "Self\u2010propelled oil droplets consuming \u201cfuel\u201d surfactant", "author": ["T. Toyota", "N. Maru", "M.M. Hanczyc", "T. Ikegami", "T. Sugawara"], "venue": "J. Am. Chem", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2009}, {"title": "Specific and reversible DNA\u2010directed self\u2010assembly of oil\u2010in\u2010water emulsion droplets", "author": ["M Hadorn"], "venue": "Proc. Natl. Acad. Sci. U. S. A", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2012}], "referenceMentions": [{"referenceID": 0, "context": "1 Hardware The robotic system specified in this document, DropBot, was built on the foundations laid by the RepRap 3D printer project[1].", "startOffset": 133, "endOffset": 136}, {"referenceID": 3, "context": "7)[11], with SciPy[12] used for some additional analysis.", "startOffset": 18, "endOffset": 22}, {"referenceID": 4, "context": "The initial step for all pipelines began with a Hough transform [13], used to detect the petri dish.", "startOffset": 64, "endOffset": 68}, {"referenceID": 5, "context": "This was followed by the application of the Canny edge detection algorithm[14], resulting in an edge map (Figure 18, top right).", "startOffset": 74, "endOffset": 78}, {"referenceID": 6, "context": "The foreground reduction algorithm used a mixture of Gaussians[16].", "startOffset": 62, "endOffset": 66}, {"referenceID": 1, "context": "A common way to track objects is to use a filter, like the Kalman filter[9] or a particle filter[10].", "startOffset": 72, "endOffset": 75}, {"referenceID": 2, "context": "A common way to track objects is to use a filter, like the Kalman filter[9] or a particle filter[10].", "startOffset": 96, "endOffset": 100}, {"referenceID": 15, "context": "Movement of 1\u2010pentanol droplets is described in the literature [30], and a range of other mid\u2010to\u2010long chain alcohols were tested using automation to explore a range of solubilities.", "startOffset": 63, "endOffset": 67}, {"referenceID": 16, "context": "Diethyl phthalate is known to form stable droplets[31].", "startOffset": 50, "endOffset": 54}, {"referenceID": 11, "context": "Ridge\u2010regression, also known as Tikhonov regularisation[24], is a commonly used method of regularization of ill\u2010posed problems.", "startOffset": 55, "endOffset": 59}, {"referenceID": 13, "context": "In an evolutionary fitness landscape, multi\u2010modality corresponds to the concept of fitness islands [27].", "startOffset": 99, "endOffset": 103}, {"referenceID": 12, "context": "Readers unfamiliar with the technique are referred to [25] and [26]", "startOffset": 54, "endOffset": 58}, {"referenceID": 14, "context": "Division and vibration both show significant improvement in fitness during the latter half of the experiment (Under the Holm\u2013Bonferroni multiple testing correction[28]).", "startOffset": 163, "endOffset": 167}], "year": 2014, "abstractText": null, "creator": "PScript5.dll Version 5.2.2"}}}