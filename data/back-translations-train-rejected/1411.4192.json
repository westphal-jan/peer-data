{"id": "1411.4192", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Nov-2014", "title": "Introduction to ROSS: A New Representational Scheme", "abstract": "ROSS (\"Representation, Ontology, Structure, Star\") is introduced as a new method for knowledge representation that emphasizes representational constructs for physical structure. The ROSS representational scheme includes a language called \"Star\" for the specification of ontology classes. The ROSS method also includes a formal scheme called the \"instance model\". Instance models are used in the area of natural language meaning representation to represent situations. This paper provides both the rationale and the philosophical background for the ROSS method.", "histories": [["v1", "Sat, 15 Nov 2014 22:31:05 GMT  (1085kb)", "http://arxiv.org/abs/1411.4192v1", "32 pages"]], "COMMENTS": "32 pages", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["glenn r hofford"], "accepted": false, "id": "1411.4192"}, "pdf": {"name": "1411.4192.pdf", "metadata": {"source": "META", "title": "Introduction to ROSS", "authors": ["Glenn R. Hofford"], "emails": [], "sections": [{"heading": null, "text": "Copyright \u00a9 2014 Glenn R. Hofford.Representation is a cross-disciplinary topic that encompasses representation of knowledge from the field of artificial intelligence, i.e. representation from the field of understanding natural language and structured information from information processing. The field of logic is full of methods of representation and reasoning. Leading approaches in the field of representation and reasoning of AI knowledge include first-order logic, descriptive logic, lambda calculus, semantic networks, frame-based approaches and many others. Significant representation techniques from the field of understanding natural language include the above in addition to approaches such as conceptual dependence. ROSS (\"Representation, Ontology, Structure, Star\") is introduced as a new method of representation that emphasizes representational constructs for physical structure. The ROSS approach begins with a normal form that is self-consciously less expressive than logic, and builds on formal forms that are constructed from the bottom up to the structure, emphasizing representation constructs for physical structure. The ROSS approach starts with a normal form that is less expressive than logic, and builds on formal forms that are constructed from the bottom up to the domain that are required to achieve the representation force of a representation of the facts that are within a framework that is a brief for the representation of the facts."}, {"heading": "1 Introduction", "text": "ROSS is an acronym composed of the initial letters of the words \"representation,\" \"ontology,\" \"structure,\" and \"star language.\" The star language is also introduced in this essay. ROSS provides an infrastructure and a set of implicit guidelines that help with the following tasks: creating knowledge databases with well-organized units and codes of conduct; creating representational artifacts (containing class instances) that are fully structured and based on the use of a normal form for spatial / temporal location attributes. ROSS performs two things that relate to the use of the term \"structure\"; the distinction between these two aspects is as follows: it represents the physical structure of a problem domain or domain of discouragement in a way that is rich and deep; how this is done concretely is explained; the representational knowledge base or fact fact fact itself is highly structured."}, {"heading": "1.1 Context Within Information Processing,", "text": "The DBMS field has well-established conventions and methods for these tasks. ROSS is useful for creating structured information artifacts that go beyond DBMS in the complexity of the topic or problem domain. Knowledge representation artifacts can be classified in terms of the types of information they represent: artifacts that include abstract definitions, such as classes, and rule constructs are referred to as knowledge bases or rule bases. Artifacts that include fact-like constructions are necessary to facilitate reasoning. Knowledge representation artifacts can be classified in terms of the types of information they represent: artifacts that include abstract definitions, and rule constructs are referred to as knowledge bases."}, {"heading": "1.2 Ontological Basis", "text": "The ontology of ROSS is an \"operational ontology\" elaborated for the purpose of representation. ROSS begins with a seemingly simple ontological concept and consistently elaborates on the implications and details, addressing the question \"for the purpose of constructing structured representative knowledge bases and artifacts, what exists in the physical or external world, that is, the world (whether real or hypothetical) that is represented?\" The answer is: unit-sized locational units 3 that do not move; these units exist within a four-dimensional (4D) world that consists of Euclidean space with the additional dimension of time. Cartesian coordinates are used with the important limitation that dimensions are represented only by integrers, not by real numbers (this limitation is required by the requirement of indivisibility and is explained in the section on ontology of ROSS)."}, {"heading": "1.3 Epistemology", "text": "ROSS in its current form does not deal directly with the epistemological (i.e. faith-related) aspects of representation. This is primarily due to the emphasis on the structural aspects of representation, an implicit assumption in which a ROSS fact repository is an artifact that represents a set of true facts about a situation (the degree of belief implies complete certainty).When a situation involves agents who themselves represent and communicate information, the mental states of the agents and the communicative aspects are presented using the same basic approach used for the representation of units and aspects of common sense. (However, ROSS has representational features that involve a high degree of abstraction; these features are well suited for representations of representation, information, mental states, communication, etc.)."}, {"heading": "1.4 Is ROSS a Logic?", "text": "ROSS is a method that fits the definition of the \"representation scheme\" (Hayes, 1974). ROSS has a set of syntactic rules and semantics based on a set of ontological assumptions and an ontological framework based on these assumptions. ROSS has many features with representation schemes referred to as \"logic,\" such as first-order logic and descriptive logic. ROSS provides a basis for reasoning or conclusion; however, unlike most logic, the argumentation techniques that ROSS uses are loosely coupled with the ROSS representation system. This loose coupling allows ROSS to support a wide range of methods for conclusions. However, some of the normally expected elements for logic are currently absent from ROSS, such as a set of axioms; therefore, the term \"representation scheme\" instead of logic \"is considered suitable for ROSS. Practitioners familiar with the use of logic for tasks that ROSS may find additional difficulties to resolve through ROSS."}, {"heading": "1.5 Comprehensiveness of Representation", "text": "A prerequisite for any structured representation approach is intelligibility or completeness - the meaning of the representation language or logic must be able to fully cover the information for a problem area or for an area of discourse (for the NLU, this is the area of information represented by the input text in natural language).ROSS provides a framework that enables comprehensive representation both in knowledge bases and in fact-related artifacts.One sometimes overlooked or misunderstood goal for representation is that of the organization. It is often mistakenly assumed that the path to highly structured representation artifacts requires the use of highly refined, elegant, and concise techniques (e.g. FOL, Lambda Calculus).These approaches are suitable for some areas, such as the task of representing numerical concepts and computational processes. However, what has been overlooked is that while a method can be highly formalized and mathematically precise, it may not be sufficiently available for practical use in structural areas and outside of structure5."}, {"heading": "1.6 A Non-Objective: Conciseness of Expression", "text": "ROSS knowledge bases and representational artifacts may be less concise than those of other 5 expressions, such as FOL, because what includes universal quantification, negation, disjunction, and nested assertions is not considered identical to intelligibility here, and is dealt with separately in this paper. ROSS definition constructs (attribute sets, attribute types, classes, etc.) are somewhat sophisticated, and the goal of representation with ROSS is a high degree of organization, not necessarily conciseness of their definitions and expressions, and the task of modeling to create a set of classes and instances that are adequately comprehensive and complex - even for seemingly simple assertions - requires a rich, complex, and sophisticated representational approach. 6"}, {"heading": "1.7 Background", "text": "Throughout the 60 \"s of their respective histories, the fields of AI knowledge transfer and reasoning, and NLP understanding, have been covered by the search for representative methods capable of representing problem areas or the substance of discourses in a way that may be rich and deep. Deep representation would be one that adequately captures the structure of the represented domain. AI tasks of knowledge transfer and sound thinking were addressed by practitioners as early as the 1960\" s and 1970 \"s. This work flourished in the 1980\" s and covered the difficulties and did not achieve the successes anticipated."}, {"heading": "1.8 Comparisons", "text": "Unlike FOL, ROSS is based on a set of explicit assumptions about the nature of the depicted reality (the depicted world) in order to achieve a greater degree of organization than is normally achieved with FOL. ROSS also includes important modeling constraints that limit the task of creating definitions that model the world or domain. Contrary to the description logic, ROSS is not based on a syllogistic categorical approach. ROSS classes are not representations of sentences, an ROSS class is a mechanism for storing information about instances that are instantiated. Inheritance is optional in ROSS.ROSS. ROSS shares some similarities with Frame 7, but has a much more sophisticated infrastructure than frames for depicting physical structure. For readers used to frame terminology, a ROSS attribute type is the rough equivalent of a frame and a rough value of a frame."}, {"heading": "2 Core Concepts", "text": "The following sections describe the core concepts of the ROSS approach."}, {"heading": "2.1 The Physical Structure of the Domain is Richly Represented", "text": "In 1986, can traditional logic represent the complex physical structure of a person? The answer in theory is yes; in practice, however, traditional logic offers few guidelines for accomplishing representative tasks such as this. For example, in a hypothetical \"person\" class, how is the amount of spatial relations between the total person and the parts (components) such as the head and the body of the person represented? How is the physical quantity represented? The representation of partial to partial relationships (\"PartOf\") is a fundamental and well-studied task within the AI knowledge representation 8. A number of AI representation programs, including Frame and KL-ONE, represent physical structure and the part of relationship. However, these techniques are limited 9. To facilitate the completeness of representation, firstly, a representation project should support the following features; these go far beyond the prediction of the existence of a \"PartOf\" relationship: attributes that can define the location of a part in relation to the sky, a component to a celestial component, a component to a celestial component, a component to a celestial component, a celestial component, a component to a celestial component, a component, a celestial component, a component, a celestial component, a component, a celestial component, a component, a celestial component, a component, a celestial component, a celestial component, a component, a celestial component, a component, a celestial component, a component, a component, a celestial component, a component, a component, a celestial component, a celestial component, a celestial component, a component, a component, a celestial component, a component, a component, a component, a celestial component, a celestial component, a component, a component, a component, a component, a celestial component, a celestial component, a component, a component, a component, a component, a component, a celestial component, a component, a component, a component, a"}, {"heading": "2.1.1 Object Frame Class", "text": "ROSS introduces two important representative constructs that handle structure: The first of which is called an object frame class. 10 An object frame class represents a specific physical place within a four-dimensional space-time reference frame. The object frame class is a class used to create object frame instances: An object frame class is simply a place defined in space and time. (Note: An object frame class is sometimes referred to as a \"location entity\" class - these terms are synonymous) An object frame class or instance can be (spatially) \"uniform\" or \"aggregated.\" An aggregated object frame instance is somewhat analogous to a rectangular wire frame. (The forthcoming section Ontology describes the background of these concepts in more detail)."}, {"heading": "2.1.2 Dimension System", "text": "A dimension system is a group of closely related dimensions. A dimension or a dimensional attribute is like a single coordinate within a coordinate system such as the Cartesian coordinate system (e.g. the value of an x-coordinate is a dimension).A dimension system includes a set of such attributes that must be used together in expressions that indicate the location of a physical object. Dimension systems are used within object classes to find a way to specify location attributes."}, {"heading": "2.2 Definitions of classes", "text": "In addition to class definition statements that define object frame classes (also known as \"entity classes\"), ROSS contains other definition constructs such as attribute types, attribute value sets, dimension systems, and behavioral classes. Consequently, the instances instantiated from the object frame classes have a variety of structural, attributive, relational, and behavioral attributes. ROSS classes can be compared with those of the description logic, where Concept 12 can represent a class. Description logic provides a way to define a uniform predicate (concept) in terms of constituent attributes. Like Description logic classes, ROSS classes can contain attributes and relational information (e.g., the class of gold coins has the attribute that they have a gold material composition). However, ROSS classes also represent \"typical\" information that includes dimension systems (i.e., \"object type types\" of an attribute class)."}, {"heading": "2.3 Inheritance", "text": "The most basic form of ROSS does not prescribe any form of inheritance; the process of instantiating an instance of a stationary entity (either by a person using the ROSS approach, or in an automated system) may involve the use of a class, but it is not necessary for that class to exist within a hierarchical inheritance structure; the minimum requirement for such a class to be used to instantiate instances is that it contain dimensional system information and a reference to a universal structural parent 13."}, {"heading": "2.4 Grounding", "text": "The definition classes of ROSS provide an important part of an answer to the symbol tolerance problem 14. In the field of understanding natural language, a related perspective was provided by Fillmore (1982). In his introduction to semantic frames, he states: \"With the term\" frame, \"I have in mind any system of concepts connected in such a way that in order to understand one of them, one must understand the entire structure into which it fits; when one of the things in such a structure is introduced into a text or into a con-13A structural parent class, an object frame class is used to place other smaller embedded object frame classes. Embedded object frame classes are not usually actual structural parts. The structural parent serves as a frame of reference. 14Harnad (1990) described the symbol tolerance problem as the task of mapping symbols to aspects of the external world."}, {"heading": "2.6 Primary Versus Secondary Information", "text": "ROSS distinguishes between \"primary information\" and \"secondary information.\" Primary information is information specified in a way that is normalized with respect to a spatial / temporal reference frame. It can be called \"canonical\" 15. It is entity centricity, not relationship centricity. There are many types of secondary information, and ROSS subdivides them by a stratification scheme. An example of secondary information is the relationship between two locating units within a reference frame. A specific example of a relationship within a transcript of past facts would be an expression that the15Woods (1975) (II.B The canonical form myth) argues that canonical forms are probably not possible (and not necessarily desirable). The author's view is as follows: 1) Knowledge Base Definitional Information: ROSS class representations are partially analogous primary form classes; primary form classes may use primary form factors, in particular through the use of class-specific attributes."}, {"heading": "2.7 Normal Form", "text": "When presenting factual information (without laws, rules, etc.), for the sake of certainty, logical approaches can easily represent any assertion that can be presented in a different system of representation. 16 However, when used to create factual artifacts, this meaningfulness can easily lead to inconsistencies and redundancies. For example, a group of FOL expressions about a situation in a block world is an attribute about the internal structure or composition. y: OnTopOf (x, y) predicate is a relational attribute. In contrast, the ROSS approach treats each of these cases differently. A ROSS artifact containing such facts would correspond to the normal form. In the examples shown here, ROSS uses a class that has been fully and precisely defined in a definition section of a knowledge base."}, {"heading": "2.8 Truth Theory Not Applicable to Primary Information", "text": "Brachman and Levesque (1985) discuss the spectrum of KR formalisms in terms of the degree of meaningfulness (from the simpler database schemas to the fully expressive FOL).In fact, the primary form of information in ROSS is closer to the database because it lacks universal quantification, negation, and disjunction. Primary information assertions are described as simple assertions that are true by default."}, {"heading": "2.9 Simple Assertions", "text": "Simple assertions can be understood as fact-like constructions. By definition, a simple assertion of ROSS sets a value for a location unit. It can refer to a class of things (e.g., as an attribute for a class), or it can be applied to real past situations. Other uses of simple assertions serve to describe hypothetical facts in a hypothetical world. A distinction is made between simple assertions that represent closed states (or events) (whether real or hypothetical) and those that represent predictions 17 (predicted states) or goals (e.g., in the context of AI planning)."}, {"heading": "2.10 Stratification: Layers of Secondary Information", "text": "The first layer of secondary information contains disjunction: it consists of disjunctive expressions and their variants (the variants contain subsets and ranges of attribute values), for example: an object frame class for \"human parents\" that contains a gender attribute that contains values of male or female genders; a domestic cat class that contains a structural section with an \"animal head,\" where the spatial relational aspects are defined by a value range that indicates that the cat head is at least d1 inch but not more than d2 inches from the body; 17 \"prediction\" refers here to a predicted state, a kind of \"future fact.\" This definition differs from the use of \"prediction\" in the context of machine learning. (In an NLU instance model) A domestic cat instance where it is known from textual information sitting on a mat: the exact position of a mat is not specified; it is located somewhere within (the area of) a negative (the second part of the house)."}, {"heading": "2.11 Incomplete Information", "text": "Brachman and Levesque (1985) (quote previous research) have linked the validity of the FOL to its ability to deal with incomplete knowledge. Disjunctive and negated expressions exemplify such information. The aim of ROSS is not to undermine basic epistemic teachings; rather, it involves making full use of the information available in a situation or domain. This exploitation of primary information is best illustrated by the use of object frame classes with their capacity for rich specificity."}, {"heading": "2.12 Axioms and Rules", "text": "The question of whether axioms in a KR scheme or logic are actually rules or something more fundamental and intrinsic is not addressed here. Suffice it to say that ROSS may differentiate between the following categories of axiomatic or \"rule-like\" concepts and constructs: definition axioms (including set-theoretical axioms) (e.g. transitivity of TeilOf: 18This view is possible on the basis of the use of attribute value theorems that are finite sets. \"TeilOf (\u03b1, \u03b2) TeilOf (\u03b2, \u03b3) \u2192 TeilOf (\u03b1, \u03b3)\") Dimensional system axioms / postulates (cf. Geometric axioms, e.g. the Pythagorean theorem) Computer axioms / postulates (e.g. the axiom \"2 + 2 = 4,\" andaxioms about primes) Correlative rules: These include rules that relativize causal phenomena (probabile or otherwise), statistical relationships, and correlation."}, {"heading": "2.13 Correlative Rules", "text": "A ROSS correlation rule is a representative construct that represents a correlation in a problem domain. Correlation may or may not involve causality (i.e. the laws governing a domain). There is no restriction on the types of correlative rules that can be constructed based on the ROSS-KR scheme - this is because the reasoning is a diverse set of tasks that should not be excessively constrained by predefined approaches. Rules are not part of ROSS fact repository artifacts: since rules are treated separately from facts and other fact-like constructs, a variety of rule-based approaches are possible."}, {"heading": "2.14 The ROSS Perspective on Implication and Entailment", "text": "The tradition in the field of AI KR & R usually involves a model of entanglement that includes a single knowledge base (\"KB\") containing a mixture of definitions / classes, facts and rules. ROSS treats this somewhat differently, as explained here. Where a ROSS class or instance is limited - with a simple assertion (primary information in normal form) or a separation of simple assertions, and the negation operator does not exist - the concept of negation is limited to a form of meta-information logic that uses definition axioms or dimension system axioms. (This is a type of \"static\" reasoning that can be executed offline if necessary in a given implementation.) Where it is the negation layer, the negation logic is relevant (((\u03b1 \u2192 \u03b2) \u2194 (\u00ac \u03b1 V \u03b2)))), and a ROSS processor can use it to draw conclusions."}, {"heading": "2.15 Relating Antecedent to Consequent in a Correlative Rule", "text": "In the field of logic, connective logic (e.g. relevance logic) addresses the need to correlate information with information in sequence in the run-up to a rule. ROSS formalizes the concept of linking the provisional with the following by using a representative construct that is part of all correlative rules called the binder. A binder is an abstraction that is implemented in such a way that the place characteristics of units in the run-up to a rule are related to the place characteristics of units in the sequence of the same rule. Otherwise, ROSS does not place unnecessary constraints on the structure of correlative rules; the resulting elaborate rule structures serve as a basis for automated thinking that exhibits a corresponding degree of complexity and sophistication."}, {"heading": "2.16 Instantiation", "text": "In the context of automation, instantiation is the process of creating an instance of a class within a factual repository, such as an NLU instance model. The instance is based on the class. Figure 3 illustrates the general concept of instantiation by showing how it operates within an NLU system. (In an NLU system, the task of instantiation is performed by a \"semantic engine.\")"}, {"heading": "2.17 Organizational Advantages of a Physical Symbol-based Approach", "text": "ROSS is the basis for a symbolic AI approach for both abstract definitions of the knowledge base and for transcripts and instance models. Knowledge base definitions are written in the Star language. Instance models are XML documents. An icon-based approach has value in that it is very effective in organizing information, while being flexible in allowing references to or the inclusion of non-symbolic representations. For example, the use of the XML standard allows the specification of unified resource identifiers (URIs) that specify abstract resources that lie outside the XML document. (Example resources would be binary data objects, such as a file containing a bitmap, and web-based services.)"}, {"heading": "2.18 Representation of Human Agents", "text": "One premise of ROSS is that aspects of human action can be represented by the same approach that is used for any other situation in the physical world. There are no specific \"meta-representative\" constructs in ROSS that would handle the realm of cognitive processes of human agents differently from anything else in the physical world. Subjects of this type of representation include representative units and processes themselves - wherever the problem situation or the object of natural language consists of human thoughts (e.g. plans or intentions), and these include cases or artifacts of human communication (e.g. spoken sentences). Mental computational processes executed by humans are similarly represented; automated computational processes are also represented. Representations of human or automated representations or computational processes in ROSS are typically those that use more abstract physical spatial coordinates or spatial location dimensions. To illustrate, for example, the fact that an intelligent agent has a cognitive representational concept in order to represent this spatial situation (where it is sufficient to describe itself as a \"spatial location\")."}, {"heading": "2.19 Application to Abstract Areas", "text": "ROSS can handle representations of abstractions that affect entities that have physical attributes that are not relevant to a particular domain. A more comprehensive discussion is given in the section describing the attributes of ROSS."}, {"heading": "2.20 Star Language", "text": "ROSS comprises a language called star language (\"star\" is derived from the word \"structure\"), which is used as a means of encoding definitions and as an alternative form (versus XML) of encoding instance models. Originally developed by the author as a specification language for computer software, its role within ROSS has been expanded to allow for representation at the broadest level, i.e. to cover all areas of problem or discourse."}, {"heading": "2.21 Knowledge Bases", "text": "A ROSS Knowledge Base contains class definitions, behavior definitions, and other supporting definitions that use the Star Language. For convenience, the term \"Infopedia\" is used to refer to such a Knowledge Base. (A Knowledge Base used for automated inferences also includes rules.) Examples of classes in the NLU area include an object frame class called \"PersonClass\" and a behavior class called \"PersonHitsPerson.\""}, {"heading": "2.22 Fact Transcripts and Instance Models", "text": "A ROSS fact repository is a representative artefact that contains fact-like constructs. Here, two important categories of fact repositories are listed: a specification protocol or transcript contains a collection of related fact-like constructs that exist for a specific storage or computational purpose. It can be used, for example, in the context of automated reasoning (an example from AI planning is the specification protocol that contains specifications of predicted states, conditions, and goals); instance models contain fact-like constructs that are used in the NLU for the meaning of representation; and in the field of automated thinking in the AI field, various types of transcripts have been developed by the author, including target formulation protocols for computer software requirements and design specifications (this transcript looks a bit like a computer program) and transcripts of past facts for a diagnostic expert system."}, {"heading": "2.23 Foundations for Correlative Inference", "text": "Correlative reasoning rules include correlations between attribute values of at least two different localized units (including the binder concept), which include: reasoning that uses rules that represent causality for a problem domain; search rules can be \"if / when\" rules that include descriptions of causes and effects that are propositional; or the rules can express a functional relationship; reasoning that uses probabilistic rules that describe correlations derived from a problem domain."}, {"heading": "2.24 Applications Within Implemented Systems", "text": "ROSS has been successfully used in three different systems: a computer program generator for experts (Hofford, 2001 and 2010), an expert system for diagnosing network errors (Hofford, 2013), and a representation technique that exists in a system for understanding natural language (called \"ModelBuilder\"). The NLU system ModelBuilder uses ROSS star language definitions and generates instance models that use XML as encoding format."}, {"heading": "3 Ontology", "text": "The ontological obligations of ROSS include several conventions; these include a number of constraints and an important requirement. These modeling constraints and requirements are essential for the production of knowledge bases and facts artifact representations that are structured. Ontology is restrictive for one purpose: traditional upper ontologies, which describe a taxonomic tree of objects with \"thing,\" \"substance,\" (or a variation thereof) at the root not considered relevant to the purpose of organizing the depicted world, as represented by ROSS. The study of \"categories\" has a long tradition in philosophy - based on Aristotle's description. Aristotle described an upper ontology in his categories. Tree-like ontologies have been prevalent.Russell (1945) was a critic of Aristotle's tax-onomy; he offers an interesting perspective: \"I do not believe that the term\" category \"is in any way useful in philosophy, as a representation of a clear idea."}, {"heading": "3.1 Fundamental Ontological Constraint", "text": "The first and most basic ontological convention is a limitation: a unit of size is the most basic - and only - thing that exists in a represented world. It is a unique place within a dimensional system (it is temporary). Such units of size do not move - the intuitive concept of moving object is not a first-class object of this ontology. Moving objects must be represented as aggregations of units of size. Likewise, everything else - units, motion, state changes, etc. - represented by ROSS must be based on the fundamental building block of the unit of size."}, {"heading": "3.2 Second Ontological Constraint", "text": "The second convention is also a caveat: a unit the size of a place does not contain an \"object\"; rather, the value of a locating object is represented as a numerical value consisting of a set of natural numbers. Star language provides the infrastructure for describing value sets by means of the attribute value statement. As you will see, other representations can be used instead of integers, such as enumerated values or string values. An example of a fixed place with a certain value at a certain time concerns the digits of the national debt clock (a certain digit) in New York City. The concept of a fixed place with a certain value at a certain point in time in ROSS can be seen as a generalization of this and many other cases. However, as a generalization, it even extends to moving objects such as a falling apple or a jumping ball."}, {"heading": "3.3 An Ontological Requirement", "text": "The third convention is a requirement and is related to the first limitation of ontology: the universe or the discourse area is considered to consist of at least one dimensional system, so that an entity-sized object referred to as \"object A\" has at least one location that differs from the location of one, some or all other objects. This requirement leads to representations that contain an infrastructure that allows all units within a central reference frame to be correlated with each other. A dimensional system can be very abstract, as is the case when the specifics of a place do not need to be represented. Or a dimensional system can be very specific, such as the implementation of a four-dimensional coordinate system with x-, y-, z- and t-coordinates.Why is the dimensional system required for ROSS? The requirement for the existence of a dimensional system is the basis for a whole series of representative constructs that represent structure.20 A dimensional framework represents an entity system for one entity to another (an entity)."}, {"heading": "3.4 Implicit Existential Quantification", "text": "An implication of the above ontological requirement for dimension systems is as follows: The act of creating a structural parent object instance within a factual repository (e.g. an NLU instance model) results in the existence of a dimension system located within the structural parent instance (e.g. a Cartesian coordinate system), which can be visualized as a rectangular region (a cube or rectangular prism (a cube). It is a collection or aggregation of units of larger localization units. Since this reference frame exists, there is no need for the use of the existential quantifier - as would be the case with FOL - for propositional ROSS expressions. Once this reference frame has been created, the most important subsequent representative task is to fill or fill the individual cells (such as the cells in a matrix) with values."}, {"heading": "3.5 Atomism", "text": "The earliest known proponents of atomic theory seem to have been the Greek philosophers Leucippus and Democritus (Guthrie, 1950), whose concept of atoms contained the idea of indivisibility. (It is noteworthy that Aristotle rejected the atom and that the concept remained dormant until the 19th century.) The Greek word atom means \"indivisible\" and was used to describe the smallest existing particles - these particles were hypothesized as solid, hard and indestructible. The modern physical concept of the atom is more specific due to better detection devices (not to mention the body of analytical and empirical methods of modern science) - an atom is precisely defined in terms of its attributes, such as size and mass. The ROSS approach borrows an aspect of Greek atomy: the unity of the unity of the unity of atoms is indivisible."}, {"heading": "3.6 Root size spatial unit is a black box", "text": "Tarski (1927) described a theory that a primitive - the smallest indivisible \"thing\" that exists - is a sphere. ROSS proceeds from the ontological assumption that the shape of the primitive (smallest) existing entity does not really matter for a given area. To create representations, it is only important to distinguish the value of the smallest localized entity from the values of other localized entities. Thus, essentially, the inner composition of the smallest spatial entity (whatever that may be) is unimportant - it is a \"black field.\" (However, it should be noted that when using a cartesian coordinate system the inevitable conclusion is the shape of a cube.) 3.7 Treatment of \"space\" As described above, a transient unit-large locating entity can only be described in terms of its locating properties and in terms of its inner values."}, {"heading": "3.8 Substance", "text": "Substance is not specifically treated: substance is modelled in a similar way to movement - it is described in the form of attribute \"value.\" From the ROSS perspective, substance does not necessarily \"exist\" at all. Rather, substance as a representative concept is a result of the modelling of location units and their values and the associated causal phenomena."}, {"heading": "3.9 Time as Interval with Duration", "text": "Ontologies and representations of time are a much studied area, and detailed background information is outside the scope of this essay 22. ROSS is based on a particular point of view in which time consists of a sequence of intervals in which there is no movement, in other words, objects are \"frozen.\" After each interval and instantaneously, the objects then \"jump\" to the next place (or they remain in the same spatial place if they are not moving). This is not an ontological requirement - it is the principle of a representative approach. The question of whether the physical world actually behaves this way or not is left to the field of physics."}, {"heading": "3.10 Motion and Process", "text": "The following example is a pseudo code that illustrates this concept, where t1 and t2 are the labels for two intervals along a timeline, and x, y, and z values are integer coordinate values (note that the two position units are side by side), representing something that \"moves\" from x1 to x2. Entity-1-t1 at x1, y1, z1 @ t1 / / value = solid entity-2-t1 at x2, y1, z1 @ t1 / / value = space entity-1-t2 at x1, y1, z1 @ t2 / / value = space entity-2-t2 at x2, y1, z1 @ t2 / / value = solid"}, {"heading": "3.11 Digital View", "text": "The ROSS approach can also be understood by comparing it with approaches that include a digital view of a particular area. For example, acoustic digital sampling produces data that represents a sound pattern at discrete time intervals. ROSS is similar in its representation of real objects and events: it abstracts from the problem area to create representative constructs that are applicable to discrete space and time intervals. 22 Some references for this area are Allen (1983), Hayes (1996), Shanahan (1997), Sowa (2000), Russell and Norvig (2003)."}, {"heading": "3.12 Representation of Shape and \u201cTelescopic\u201d Dimension Systems", "text": "Shape is not a primitive concept in ROSS. However, shape is addressed as part of two areas: classes can be defined in terms of shape. For example, a class that represents containers, such as cups that hold liquids, must be defined in terms of their shape. Rules that include ROSS as their underlying representation include specifications of form. The use of form within a class definition is as follows: A dimension system and a specification system that uses it are defined. (This discussion will include a dimension system that includes a 3D Cartesian coordinate system) The specification system inner content section must include a qualitative attribute type that contains an attribute-value set that is inherited from the space-value category and at least one value that is inherited from the space-value category. An aggregated object class with a type of range-frame class is defined that is not defined."}, {"heading": "3.13 The Diorama Analogy", "text": "The diorama provides a useful analogy for the structure that occurs when a ROSS NLU instance model (or KRR Fact Protocol) is created. Typically, the diorama has a physical frame - a ROSS instance model has a single structural parent object category that provides a frame, and in particular a dimensional system within which things can be \"placed.\" The difference concerns the aspect of time: an NLU instance model Context 23 contains a timeline, and changes can take place, while the diorama is a way to represent a static visual scene."}, {"heading": "3.13.1 The Cartoon Analogy", "text": "The modern cartoon provides the second analogy for ROSS representation examples. Cartoons achieve the appearance of movement by using fixed-location images, so the continuous aspect of movement is not actually involved. ROSS as a representation technology follows the same basic approach."}, {"heading": "3.14 Convenience Assumptions", "text": "ROSS encompasses several concepts that can be used to present facts - assumptions the use of which eliminates the need for excessive use of explicit assertions.23One context contains a structural parent at the highest level (see the section on instance models for a full definition of context)."}, {"heading": "3.15 The Empty Space Assumption", "text": "The assumption of empty space has a specific relevance to fact repositories. This is the assumption that an instantiated instance has a value (if it is an object instance of unit size) or consists of values that are members of the category of space value, unless otherwise specified, as happens with the infusion. (Similarly, this is like placing a wire frame model in a diorama - it is initially empty until it is filled with something)."}, {"heading": "3.16 Perpetuation", "text": "The assumption of perpetuation involves the perpetuation of values along a timeline; it can be used in a similar way to the assumption of space: it is assumed that for any place with a unit size that has a value at a time t = n, it can be assumed that the subsequent place with a unit size in the same spatial place (at a time t = (n + 1)) has the same value, unless it is openly stated that it has a different value. This assumption is useful for stationary objects, but does not address the representation of objects in motion."}, {"heading": "3.17 The Frame Problem", "text": "On a deeper level, the framework problem for ROSS is not the same as for FOL-based systems due to the existence (in ROSS fact repositories) of a structural parent instance: implicitly, this implies the existence of all their unified location units (cells). Global assumptions such as the space assumption and perpetuum assumption are used to conveniently determine most values. Values that change over time (as part of state changes or state movements) are explicitly defined as indicated by the inference process."}, {"heading": "3.18 Dimension System Concepts", "text": "ROSS uses the term \"dimension system\" instead of the term \"coordinate system\" to mean that a dimension system is a flexible concept: it does not need to be bound to a predefined method of displaying space and time (e.g. a cartesian coordinate system). The concept of a dimension system is based on a cognitive process called segmentation here. Segmentation is defined as a cognitive process of distinguishing places from each other. However, multipart segmentation has the following implications: 1) Once three units exist, two localization units result: Each unit can be represented with a symbol, but little else is required; for example, there is no \"directionality\" without a third reference point. However, multipart segmentation has the following implications: 1) Once three units exist, general directionality arises; 2) numerical representation of places using natural numbers (or integers) is useful; 3) one origin each dimension is required; 4) one coordinate system may be transformed into another (e.g., one coordination system can be transformed into another)."}, {"heading": "3.19 What are the ROSS Primitives?", "text": "The discussion of the ontological ROSS foundation is not complete without addressing the issue of primitives. From one perspective, there is only one primitive element in ROSS: the unit-sized position object; all other primitives are constructed as aggregations of this primitive. Nevertheless, it is conceptually useful to describe some of the aggregations that can be built and to relate other primitives that are abstractions to ROSS. There are two categories of ROSS aggregation primitives: static primitives and dynamic primitives. The static primitive classes are as follows: The unit-sized position unit as discussed above The area object frame class (it can be understood as a 3D array) The aggregate object frame class (which contains named structural components / parts) The dynamic primitive classes are: The state-sized position unit as discussed above The area object frame class (which can be understood as a 3D array) The aggregate object frame class (which contains named structural components / parts) The dynamic primitive classes are: The state-sized position unit as discussed The state-changing class The 4D structural parent entity (which contains several common-point effects), which appear to be motion effects, which cause the following time-related events:"}, {"heading": "3.20 Comparisons", "text": "The work of Hayes (1985) in the field of qualitative physics uses a four-dimensional approach. He says the following: A physical object is a three-dimensional entity that has a related history that represents the lifespan of the object: A section of this history (which we will call the life of the object) is the object at a given time. Hayes \"model of the physical world (for the purpose of describing liquids) is similar to that of ROSS. An important distinction is that Hayes seems to preserve the concept of objects that exist over time, while ROSS does not allow it. Johnston (2011) provides an overview of the goals and architecture of the Comirit Objects Projects Project, a system that represents and establishes things in the physical world. The knowledge representation approach centers around the voxel that is defined as\" the three-dimensional equivalent of a voxel \": it refers to a small cubic region in the 3D space of an epraxel, or the voxel equivalent of a voxel."}, {"heading": "3.21 Summary of Ontology", "text": "The ontology of ROSS is rigid for one purpose: Consistent adherence to these conventions and the above-mentioned requirement serve as guidelines for modeling with respect to the creation of definitions. The task of knowledge engineering to create definitions can be performed or automated by humans (automated approaches are briefly described in the later section on the acquisition of knowledge)."}, {"heading": "4 Summary of ROSS Features", "text": "The ROSS features include the features of the star language used for definitions and features relevant to repository artifacts, such as instance models. The star language features are partly based on object-oriented programming languages such as C + +."}, {"heading": "4.1 Specification with Natural Numbers and Integers", "text": "Numerical attribute values are either natural numbers or integers. Numerical attribute value sets used for spatial attribute types must be members of the set of integers. Numerical attribute value sets used for qualitative attribute types must be finite subsets of the set of natural numbers. In the primary information area of a fact archive, where data or text in natural language represent real numbers, or where values are calculated (e.g. by division) to obtain a real number, a rounding or abbreviation of numerical values must occur. (Note: The use of real numbers as secondary information is not excluded in the ROSS model)."}, {"heading": "4.2 Feature: Attribute Value Ranges", "text": "Attribute value ranges have important uses within the definition of object frame classes - they allow a component to be roughly within the parent structure. For example, a class called \"FrontEngineAutomobile\" would specify that the engine compartment is within a certain section of the parent class (the automobile). Class definition does not specify the exact location - it is determined by a value range (e.g., within 5 cm to 100 cm from the front end of the car). Class-based instincts can specify the exact location if this information is relevant."}, {"heading": "4.3 Feature: Star Language Definitions", "text": "Star-language definition constructs allow the definition of attribute types, attribute value sets, and other definitive representation constructs used by a human or automated machine to construct meaning representations. An example of the star-language definitions is the dimension system, a unique feature of ROSS: it is a set of built-in definition constructs that provide one or more local attribute type definitions that must be used together in expressions that indicate the location of a location object (i.e. an object box class)."}, {"heading": "4.4 Feature: Inheritance", "text": "One distinguishes between entity classes that are used to directly instantiate instance units and parent entity classes in an inheritance hierarchy. As already mentioned, higher classes and inheritance are important but optional features of ROSS and the star language. However, instantiating an instance requires the use of at least one class. For use in creating an instance model, the typical case involves using an object frame class (an entity class), such as CarObjectFrameClass, whose class can either contain all information or rely on higher classes to provide some of its characteristics. The other case involves using a more abstract object frame class called ObjectObjectObjectFrameClass. This class is abstract, with the exception of dimension system information and a reference to a universal structural parent. For example, an NLU instance model may contain object frame class information called ObjectObjectFrameClass. This class is derived from structural system information and a reference to a universal structural parent."}, {"heading": "4.5 Feature: Dimension System", "text": "The next set of attributes is based on the ontological requirement that at least one dimension system must be selected; the asterisk feature is called a DimensionSystem and consists of a set of related attribute types for the position (e.g. x-coordinate, y-coordinate, z-coordinate, time), which describe the attributes for the position where an entity is located in space and time. If these definitions are used in creating or creating an instance model, type checking can and should be performed to ensure that each attribute type is used (in a model or fact transcript construct called a \"dimension expression\") - this allows representation expressions that meet the ROSS requirements for specifying the structure."}, {"heading": "4.6 Feature: Mapping Between Dimension Systems", "text": "Star encompasses a concept that allows for mapping between dimensional systems. For example, everyday relationship attributes can be used where greater precision is not required - for example, \"Arizona is located in the southwest of the United States.\" The enumerated value, which represents the \"southwest region,\" can be mapped to more precise location coordinates such as latitude and longitude. This trait is particularly important for understanding natural language histories, because human dialogue with respect to place and time is often inaccurate. The ability to translate or map things between different dimensional systems is considered a key feature of ROSS; it is a reflection of how human memory and cognition function. Humans seem to have a universal three-dimensional frame of reference underlying (perhaps all) representations. The ability to represent the location of things in the physical world often includes smaller \"tailor-made\" frames of reference. An example would be a mental representation of a particular house located in a city on State 1000 Street."}, {"heading": "4.7 Feature: Specification System", "text": "The definition construct of the specification system contains definitions in two sections each: the section on the dimensioning system and the section on the inner content. The dimensioning system has already been described: The section on the inner content either defines a series of attribute types that describe the value of an entity (e.g. the car is blue), or it is a specification of the component structure. The expression specification set uses a specification system similar to how the expression Dimension Set uses a dimensioning system."}, {"heading": "4.8 Feature: Aggregate Representational Constructs", "text": "The star language construct ObjectFrameClass allows the representation of a spatially adjacent aggregation of objects of the unit size. An object frame class can represent a single object frame of the unit size or an aggregation of such units, in which case it has the shape of a 3D cuboid."}, {"heading": "4.9 Feature: Structure", "text": "There are two ways to represent mereological structures in ROSS: First, a group of representative constructs allows the representation of structures that contain components: these include the structural parent company, a set of \"relationships to superordinate\" place attributes, and a structural section for aggregated units that models compositional (\"PartOf\") attributes. Infrastructure for representing this type of structure is complex; these attributes will be explained in detail in the next section on star language definitions; and second, the next described area of the object frame class."}, {"heading": "4.10 Feature: Object Frame Class Range", "text": "The object frame class is a special type of aggregated object frame class (consisting of several spatially adjacent units the size of a unit comprising one, two or all three dimensions).This construct does not have an internal structure consisting of structural components; rather, it is a type of drawing surface on which an image can be drawn. A simple example would be a cube-shaped object frame class area in which a sphere can be drawn; the objective construct used for drawing is referred to as a template class (described in the following section on the characteristics of stellar language)."}, {"heading": "4.11 Feature: Multiple Parallel Structures to Support Drill-Down Analysis", "text": "The human cognitive ability to analyze the structure of a physical object in a \"drill-down\" manner is the basis for a ROSS feature that enables multiple representations of the same spatial structural area (cuboid region). An example concerns a part of a lawnmower: a mower blade is modeled as a structural component that contains individual parts such as the blade edge, but a parallel structural section consists of a single object frame class (e.g. using a millimeter grain size).The object frame class range is modeled using a ROSS template, which is in turn infused either with a set of drawing instructions or a 3D bitmap."}, {"heading": "4.12 Feature: Higher Classes", "text": "Class inheritance is seen exclusively as a way to aggregate or consolidate groups of attributes and structural features - it is a convenience mechanism, nothing more - higher classes (parent classes) provide additional representative information about a particular class. ROSS also allows multiple inheritance (multiple parent classes per class).ROSS also allows several similar or parallel classes, based on the view that some classes, such as a \"person class,\" are not necessarily a single class, but so complex that the use of several such classes may be required to model a variety of feature collections. Different domains would use different such classes. An example could include several classes, such as PersonAsCountryCitizenClass, PersonAsBiologicalLivingEntityClass, and PersonAsTravellerClass. Each of these classes would be useful in different areas."}, {"heading": "4.13 Feature: The Attribute", "text": "The star attribute is an expression that closely matches an FOL atomic set that contains a predicate and a term that is a single constant. An attribute is a strongly typed two-part construct. It consists of a predefined attribute type name and an attribute value that is a member of a predefined attribute value set. An example attribute is: < attribute ref = VehicleExteriorColorval = \"Silver\" / > The attribute is composed of the keyword \"attribute,\" then the keyword \"ref\" (\"reference\") followed by a same character and a defined attribute type attribute name that is indexed as an attribute (\")."}, {"heading": "4.14 Feature: The Two-part Attribute Cluster", "text": "The two-part attribute cluster is a conceptual attribute that can take a variety of forms. < The two-part attribute cluster fulfills the intuitive concept of a fully specified fact: it represents both the location and value of an entity that exists in a 4D-represented world. < A two-part attribute cluster can exist within a class definition (the attribute attribute attribute attribute attribute types \"and at least one attribute attribute attribute attribute attribute types\") and it can exist within a fact article called an attribute supertypes. \"[24] The rationality behind this requirement is that it produces ROSS expressions that fully describe entities from the represented world. (The XML implementation of a two-part attribute cluster, e.g. in an NLU model, is represented here as a two-part object, not a two-part one]."}, {"heading": "4.15 Feature: The Collection", "text": "The collection is an abstraction representing a number of object frame instances, and the collection concept addresses the need for an implementation mechanism corresponding to the universal quantifier of FOL."}, {"heading": "4.16 Feature: Separation of Simple Assertions from Implicative Assertions", "text": "ROSS distinguishes claims into two main groups: those that include implicit assertions (implicit assertions) and those that do not: These assertions are called simple assertions. Simple assertions correspond to a variety of \"fact-like\" representations, depending on the scope of the problem, and implicit assertions correspond to rules."}, {"heading": "4.17 Feature: Rule Binder Construct", "text": "ROSS has a feature that is used as a \"binder\" in implicit assertions (rules). 25 A binder is a representative construct that explicitly specifies the spatial relationship between all spatial units in the prehistory and sequence of a rule."}, {"heading": "4.18 Feature: Representation of Abstract Entities", "text": "This year is the highest in the history of the country."}, {"heading": "5 Star Language Definitions", "text": "This is an overview of the syntactic characteristics of the star language used to create definitions. In this section, some of the most important representational constructs are illustrated by examples; other constructs are described only briefly 26. (Note that comments are preceded by \"/ /\")."}, {"heading": "5.1 Constant Set Name Keywords", "text": "Star contains the following keywords, which are names for \"built-in\" constants: IntegerConstant FloatingPointConstant (although ROSS value sets are integer, this is included for completeness) StringConstant"}, {"heading": "5.2 Built-in Attribute Super Types", "text": "There are two predefined attribute types \"supertypes,\" they are superordinate categories of attribute types: Local attribute types Qualitative attribute types"}, {"heading": "5.3 Built-in Attribute Value Set Super Types", "text": "There are also two predefined attribute value sets \"usage\" super types, which correspond to the attribute type super types and are: Local attribute value sets Qualitative attribute value sets"}, {"heading": "5.4 Built-in Attribute Value Types", "text": "These are not \"set types\" - they are special categories for certain attribute values. They are: There is a 26A star language parser and processor that implements most of the features described here."}, {"heading": "5.5 The Dictionary Element", "text": "The version of Star used for NLU applications contains an element called \"Dictionary\" that can be used in a variety of contexts. It associates a set of words with a single concept. It has the ability to support multiple languages. In the following example, a dictionary construct is used within an AttributeType statement to create a set of English words for each outer color value of a vehicle. AttributeType \"VehicleExteriorColor\" (< SuperType val = \"QualityAttributeType\" / > \"Values\" ({\"Black\": Dictionary (English (\"black,\" charcoal \");););\" Blue \": Dictionary (English ({\" blue \"}););\" Silver \": Dictionary\" (English (\"silver,\" grey \"););\" White \": Dictionary (English (\" white, \"opal\");); \"Silver:\" silver \"Dictionary (\"): (silver); \"other Dictionary (\") is within a white Dictionary (\"),\" other Dictionary (\")."}, {"heading": "5.6 Attribute Value Sets", "text": "An attribute value set is defined with the keyword \"ValueSet,\" followed by a value set name and then a value set expression. This example defines two value sets, \"millimeters\" and \"VehiclePhysicalDimension,\" that use millimeters. A declaration is also included here to define a constant value (the maximum length of a vehicle dimension): ValueSet \"millimeters\" (IntegerConstant); Integer lenMaxVehiclePhysicalDimension = 12000; ValueSet \"VehiclePhysicalDimension\" (< BaseValueSet ref = millimeters / > / / UnitOfMeasure < SuperTypeUsage val = \"Locational\" / > {1,.. lenMaxVehiclePhysicalDimension}); The attribute value sets defined here can then be used in other statements and expressions as required."}, {"heading": "5.7 Mappings", "text": "Mapping statements are useful for mapping members of one value set to members of another set. (In this example, the value sets named \"Meter\" and \"Foot\" have already been defined.) Mapping \"MeterToFoot\" (< Source ref = Meter / > < Dest ref = Foot / > < Function expr = (x $* 3.2808) / >); This can now be used by system components that need to convert between members of the value sets."}, {"heading": "5.8 Attribute Types", "text": "The attribute type statement defines an attribute type. An example is the following: AttributeType \"VehicleExteriorColor\" (< SuperType val = \"Qualitative\" / > \"Values\" ({\"Black\": Dictionary (English (\"Black,\" \"Charcoal\");); \"Blue\": Dictionary (English ({\"Blue\");); \"Silver\": Dictionary (English ({\"Silver,\" Grey \"););\" White \": Dictionary (English ({\" White, \"Opal\"););););); Once the attribute type is defined, the defined attribute type name can be used in other statements and expressions as required. Where the attribute type is used, type checking can be performed for values derived from the attribute value set."}, {"heading": "5.9 Dimension System Types", "text": "The Dimensional System Definition (sometimes referred to as the \"Dimensional System\") generates a dimension system (e.g. a coordinate system) used by object frame classes and instances. A dimension system is a means of aggregating attribute types intended for collective use in a group to fully describe the location attributes of an object frame instance. (The expression that uses the attribute types to specify a certain set of attributes is referred to as \"dimension expression.\") A dimension system type used to describe geographical positions, for example, would include attribute type definitions for any latitude and longitude. An example dimension system that represents cartesian coordinates that use the millimeter as a grain size is as follows: Dimension System \"Millimeter Coordinates\" (\"Attribute Type\") (\"Attribute Type\" >) (\"Attrivalal UlltTypeType; < Type = (X)"}, {"heading": "5.10 Specification System Type", "text": "The type of specification includes a dimension system and an inner scope of contents to create a system that can be used to fully specify the location and qualitative value of individual or total frame instances. The term that uses a specification system is referred to as a \"specification set expression.\" An exemplary specification system that is useful for determining the material composition of vehicle parts at the millimetre level of granularity is as follows: Specification system \"VehiclePartPhysicalComposition\" (DimensionSystem \"VehiclePartCoordinates\" (MillimeterCoordinates); InnerContent (QualityAttributeTypes (\"EssentialValueAttributeType\" (MaterialCompositionAttributeType););););); Note that the attribute type \"MaterialCompositionAttributeType\" is not displayed - this would consist of values such as \"Aluminium,\" Plawc, \"\" Fabric \"etc."}, {"heading": "5.11 The Attribute", "text": "Attributes have already been described; attributes can exist within object frame classes that are described next, and they can exist within object frame instances within fact transcripts and instance models. An example of an attribute belonging to a class would exist within a class for gold coins: all instances of this class can have the attribute of the composition of gold material."}, {"heading": "5.12 Object Frame Class", "text": "In fact, most of them will be able to play by the rules."}, {"heading": "5.13 Explanatory Note: How an Object Frame Class Implements Structure", "text": "For example, to model a vehicle class, an object frame class \"vehicle\" would be created; it has a number of dimension systems (using the DimensionSystems list), and one or more such dimension systems provide a basis for specifying the location of the component frame classes of the vehicle class. An engine class is created and included as an element in the structure list of the vehicle class. Unless its relative place within the vehicle class is specified, the engine class can \"float\" somewhere within the limits of the vehicle class. The RelationshipToParent structure of the engine class either specifies specific location characteristics of that component in relation to the parent engine class, or it can be used to declare placeholders used for such a specification, indeed repository artifacts, if such information is available."}, {"heading": "5.14 Template Class", "text": "The class of templates can be understood by the metaphor of drawing: A class of templates describes a method used to draw an image within an object frame area instance. A simple example would be a class of templates that includes a function to draw an oval with a rectangular shape within an object frame area instance. A more complex example would be a set of drawing instructions that can be used to draw a face, or for 3D representation of a person's head within a rectangular object frame area. The process of drawing / rendering is called an \"infusion.\""}, {"heading": "5.15 Populated Object Class", "text": "The populated object class is a representative construct that allows the application of a coordinated set of values to a combined object class. Applying a populated object class to an object class is called a \"population.\" Populated object classes are used within behavioral classes that are next described."}, {"heading": "5.16 Behavior Class", "text": "A behavioral class associates a set of \"previous\" states with a set of \"subordinate\" states. Examples of behavioral classes for the PersonObjectFrameClass class are \"PersonWalks\" and \"PersonCommunicates.\" Behavioral classes have the following structure: A bridge-structural parent class - a reference to an object-frame class that contains a dimension system that must be shared by all object-frame classes of the behavioral class so that location relations within the binder construct can be specified that binds objects of the earlier state section to objects of the post-state section. A PriorStates section consisting of a list of populated object classes. This is similar to the precursor (the \"if part\") within a rule. A PostStates section consisting of a list of populated object classes. This is the consequence (the \"then part\") within a rule."}, {"heading": "5.17 Explanatory Note: How Behaviors are Related To Object Frame Classes and Instances", "text": "The object frame class and the behavior class have both been described, but the question of how they relate to each other has not been answered. It should be noted that an object frame class actually has no behaviors - it only has a list of potential behaviors. An object frame instance has no behaviors at all: it only implements states of behavior at a given time along a timeline. For example, within an NLU instance model, each single point object frame instance participates in behaviors through attributes that indicate its state. An aggregated object frame instance (at a single time) can therefore participate in multiple behaviors simultaneously because it has multiple attributes, each of which represents an aspect of its state."}, {"heading": "6 Knowledge Base Concepts", "text": "This section discusses concepts related to ROSS knowledge bases."}, {"heading": "6.1 Knowledge Bases", "text": "A ROSS Knowledge Base, or Infopedia, contains star language definitions (and optional rules), a mix of definitions that cover the spectrum from universal to generic to domain-specific. There are generic object frame classes for high-level abstract objects, and other medium object frame classes such as PersonClass and VehicleClass. Infopedia also includes a variety of supportive definitions for attribute value sets, attribute types, value set mappings, and dimension system types."}, {"heading": "6.2 Knowledge Acquisition/Ontology Derivation", "text": "The use of learning techniques is not an absolute necessity, as both generic and domain-specific ROSS definitions can be created by a human knowledge engineer or ontologist. (For some ROSS definitions at the higher levels of abstraction, it is better to be created by hand in advance than to learn them - for example, attribute value sets, attribute types, and dimension systems.) Since knowledge engineering has long been recognized as a bottleneck in AI, automated approaches are considered to be extremely valuable. Below, several broad categories of automated knowledge acquisition are described to learn classes and class characteristics from the text of natural language: medium-depth approaches that learn characteristics based on associations. For example, (non-performed) learning that cars can be blue, based on phrases that associate \"blue\" with \"car.\" Learning new subclasses and their behaviors is based on simple phrases of \"form,\" an approach that \"is not electric,\" but \"a structure that moves.\""}, {"heading": "7 Fact Repository Concepts", "text": "This section discusses concepts related to ROSS Fact Repositories and the processes such as the instance that generate the information that is actually repositories."}, {"heading": "7.1 Fact Repositories: Transcripts and Instance Models", "text": "The term \"factual\" includes representations that are true \"facts\" about past situations, and it includes other assertions such as target goals and predictions. \"Fact repository\" is defined to include any representative artifact that contains such constructs. A fact repository has a top-level structure: the data repository can represent multiple situations, such as situations that are a mixture of situations from the past (from different places and times), others that are present, and some that are hypothetical."}, {"heading": "7.2 Transcript Types", "text": "A transcript is a document that contains fact-like representation constructs that can be used in automated artificial intelligence reasoning applications. There are a number of transcript types that use ROSS, including the following: Transcripts of past facts that are useful for automated thinking about past facts (such as error diagnosis) Specification logs for automated inferences for design or planning problems; these transcripts contain fact-like constructs that contain predicted states and goals."}, {"heading": "7.3 Instance Model", "text": "An instance model is a kind of fact store for NLU: It is a representational instance that represents factual information about past and / or present situations and events. It is an artifact that represents a structured representation of the subject of a text fragment of natural language as well as a story. An instance model contains a list of contexts. The order of the contexts in the list usually corresponds to the order of occurrence of sentences in the input context. (The appendix contains a partial-instance model)."}, {"heading": "7.4 NLU Instance Model Context", "text": "The discourse of a story can have many such contexts. Thus, a story can contain the following two sentences in succession: \"A house in Seattle was broken into recently. John Smith is the owner of the house.\" The first sentence stands in the past and is the basis for a context. The second sentence is in the present tense and thus forms the basis for a second and separate context. An instance model contains at least one context. The context concept can also be used to represent the content of spoken or written communication. In this case, it denotes a separate frame of reference that represents information communicated by a human actor. An instance model context represents an individual situation that is described next."}, {"heading": "7.5 The Fact Repository Situation", "text": "A repository of facts can contain one or more situations; a situation is a collection of coherent facts, each of which includes entities that all share a common structural parent instance."}, {"heading": "7.6 The Structural Parent Class", "text": "Structural parent object frame classes exist in knowledge databases as definitions; structural parent object instances actually exist in repositories, e.g. in instance models."}, {"heading": "7.7 The Structural Parent Instance", "text": "A situation contains a single uppermost object frame instance that performs a special function as a \"structural parent frame instance.\" The structural parent frame instance has an Instance Structure section that specifies all object frame instances that are immediate children located within the spatial and temporal range of the structural parent frame instance."}, {"heading": "7.8 Object Instances", "text": "The structure of an object frame instance is specified here.ObjectInstance - > ObjectFrameClassName ObjectInstanceUniqueIdentifier CausalityRole PersonOrPlaceIndicator RelationshipToParent structure Attributes list InstanceStructure Object instances are instantiated using object frame classes - that is, the first field of an object frame instance is the object frame class from which it was instantiated.The next field is a unique identifier that refers to the instance as it exists or exists in the space-time reference frame of the structural parent of the context.The next field, CausalityRole, refers to whether the object frame instance is part of a cause or part of an effect. (NLU-specific: The PersonOrPlace indicator represents information determined by a specific subinstance of the object that is specified by the machine at the summary instance of the subobject)."}, {"heading": "7.9 Instantiation", "text": "Instantiation is the process of creating an object frame instance within a fact store from an object frame class; it includes the subtasks of attachment and infusion or population. (For illustration, each of these concepts is described in terms executed by a semantic NLU engine, such as when the engine creates an object instance within an instance model.)"}, {"heading": "7.10 Attachment", "text": "Attachment is the process of creating an object frame instance. When a structural parent frame instance is created within a situation, it simply receives a unique identification or name. However, when an object frame instance is created that is the child of a structural parent instance or another object frame instance, attachment includes creating the instance, giving an identification or name, and then setting its RelationshipToParent attributes. It also includes specifying a reference to the child instance within the InstanceStructure section of the parent instance.The effect of performing a group of attachments can be visualized as analogous to a process of creating a diorama frame into which various empty smaller wire frame structures (some nested in others) are inserted."}, {"heading": "7.11 Infusion and Population", "text": "The infusion process works with empty object frame instances: it sets actual values for them. The infusion, as applied to an object frame instance with a unit size, only involves specifying its value. The infusion of a value into an object frame range instance uses a template class. Population is similar to the infusion and involves using a populated object class to specify the values of an overall frame instance."}, {"heading": "7.12 Permanence and Perpetuation", "text": "Practical considerations regarding the creation and maintenance of representations in a fact store artifact may require the use of convenience assumptions (described in the Ontology section above), the first of which is the assumption of empty space: within a structural parent (similar to a diorama), at the first time and for all subsequent times, it is assumed that a place that is not specifically and openly infused or populated has a value inherited from the category of space value; the assumption of perpetuation involves perpetuation along a time line; it can be used in a similar manner to the assumption of empty space: it is assumed that for any place with a unit size infused with a value at the time t = n, it can be assumed that the subsequent place with a unit size at the same spatial place (at the time t = (n + 1)) has the same value, unless it is exaggerated in order to have a different value, but this stationary assumption is not resorted to the objects in addressable motion."}, {"heading": "8 Automation of Inference", "text": "The representative characteristics of ROSS form the basis for automated thinking, which is open and unlimited due to the loose coupling between representation and argumentation. The following are some examples of broad categories of reasoning tasks that can be mastered using the ROSS method: Reasoning about situations and events that happened in the past to perform pastfact derivation. This category includes the diagnosis of errors / failures. Reasoning from requirements specifications to generate design artifacts. Reasoning from plan goals to generate plans.For detailed information on the structure of rules and the argumentation algorithms of the expert diagnostic system developed by the author, see Hofford (2013)."}, {"heading": "9 NLU: Semantic Processing", "text": "ROSS has capabilities that are important for the semantic analysis and processing of NLU. Briefly described is a semantic engine that is part of a modular NLU system (one that separates the syntactic processing phase from the semantic processing phase).The field of historical understanding - a limited subset of the very wide range of NLU tasks - is used to demonstrate the functionality of such a system as it uses and produces ROSS-based information."}, {"heading": "9.1 Data Flow", "text": "The semantic engine of such a system requires a set of star language definitions as input. These definitions include supporting definitions, object frame classes, and behavior classes. The star language definitions are stored in text files and read at the time of system initialization and used to build an in-memory knowledge base (the Infopedia). The second main input to the engine is a list of syntax trees containing semantic roles and other information.Each syntax tree in the list represents a single sentence; sentences can be nested within sentences. The main output of the engine is an instance model."}, {"heading": "9.2 Class Selection Algorithm", "text": "For example, the input can describe a \"car.\" ROSS is not limited to a single \"car class\" - there may be one of several classes that represent \"car,\" each one highlighting a number of aspects of a car. For example, employees at an automobile factory would have a concept of a car that is different in many ways from the one used by consumers as a driver. Each car class would associate the word \"car\" with itself by using the star dictionary element. The task of selecting the most appropriate class is potentially limitless; a variety of heuristics and inference techniques can be used."}, {"heading": "9.3 Integration of the Syntactic and Semantic Phases", "text": "Automated reasoning by the NLU engine to give feedback to the natural language parser for the purpose of disambiguation is an area of ongoing research."}, {"heading": "10 Conclusion", "text": "Compared to logic and other AI representation schemes, the essence of the ROSS approach focuses on its ontological limitations or constraints on modeling. This ontological framework is rooted in a naive view based on the discretion of space and time. ROSS ontological constraints and obligations provide a set of guidelines for the creation and refinement of knowledge bases. Furthermore, these constraints facilitate the creation of fact representations that are highly structured and non-redundant. The ROSS framework for the representation of physical structures that are structural characteristics of the object class and the structural characteristics of the parent instance - a structural concept for providing a reference framework that provides an orderly infrastructure for the representation of relative attributes."}, {"heading": "10.1 Ongoing Research", "text": "A number of challenges have provided motivation for further research; they include: Coordination of the ROSS discrete Intelligence with representations of continuous phenom-ena. Ontology derivation / knowledge acquisition. Integration of probabilistic information, e.classes with fuzzy boundaries. Integration of procedural \"sub-symbolic\" connectionist approaches (e.g. Morgan River Inc.) with ROSS.ReferenceJames F. Allen. 1983. Maintaining KnowledgeAbout Temporal Intervals, Communications of the ACM, 26 (11): 832-843.Franz Baader, Diego Calvanese, Deborah L.McGuinness, Daniele Nardi, and Peter F. HobelSchneider. 2007. The Description Logic Handbook: Theory, Implementation and Applications, Second Edition, Cambridge University Press, Cambridge.Ronald J. Brachman and Hector J. Levesque Charles. 1985.A Fundamental Tradeoff in Knowledge Representation and Reasoning."}], "references": [{"title": "Maintaining Knowledge About Temporal Intervals, Communications of the ACM", "author": ["James F. Allen"], "venue": null, "citeRegEx": "Allen.,? \\Q1983\\E", "shortCiteRegEx": "Allen.", "year": 1983}, {"title": "The Description Logic Handbook: Theory, Implementation and Applications, Second Edition", "author": ["Franz Baader", "Diego Calvanese", "Deborah L. McGuinness", "Daniele Nardi", "Peter F. PatelSchneider"], "venue": null, "citeRegEx": "Baader et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Baader et al\\.", "year": 2007}, {"title": "A Fundamental Tradeoff in Knowledge Representation and Reasoning (Revised Version), Proc", "author": ["Ronald J. Brachman", "Hector J. Levesque."], "venue": "CSCSI-84, London, Ontario, 141-152.", "citeRegEx": "Brachman and Levesque.,? 1985", "shortCiteRegEx": "Brachman and Levesque.", "year": 1985}, {"title": "An Overview of the KL-ONE Knowledge Representation System, Cognitive Science 9:171-216", "author": ["Ronald J. Brachman", "James G. Schmolze"], "venue": null, "citeRegEx": "Brachman and Schmolze.,? \\Q1985\\E", "shortCiteRegEx": "Brachman and Schmolze.", "year": 1985}, {"title": "Frame semantics, in Linguistics in the Morning Calm", "author": ["Charles J. Fillmore."], "venue": "Hanshin Publishing Co., Seoul, 111-137.", "citeRegEx": "Fillmore.,? 1982", "shortCiteRegEx": "Fillmore.", "year": 1982}, {"title": "The Greek Philosophers: From Thales to Aristotle", "author": ["W.K.C. Guthrie"], "venue": "Methuen & Company Limited,", "citeRegEx": "Guthrie.,? \\Q1950\\E", "shortCiteRegEx": "Guthrie.", "year": 1950}, {"title": "Some Problems and NonProblems in Representation Theory, Proc", "author": ["Patrick J. Hayes."], "venue": "AISB Summer Conference, University of Sussex, 63-79.", "citeRegEx": "Hayes.,? 1974", "shortCiteRegEx": "Hayes.", "year": 1974}, {"title": "Naive physics I: Ontology for liquids, in: J", "author": ["Patrick J. Hayes."], "venue": "Hobbs and R. Moore (eds.), Formal Theories of the Commonsense World, Ablex, Norwood, NJ, 71-108.", "citeRegEx": "Hayes.,? 1985", "shortCiteRegEx": "Hayes.", "year": 1985}, {"title": "A Catalog of Temporal Theories, Technical Report, UIUC-BI-AI-96-01, University of Illinois", "author": ["Patrick J. Hayes"], "venue": null, "citeRegEx": "Hayes.,? \\Q1996\\E", "shortCiteRegEx": "Hayes.", "year": 1996}, {"title": "Expertise through Rules Based Representation: Why Can\u2019t a Computer Program Write Computer Programs?, in: PC AI, September/October 2001, Knowledge Technology, Inc", "author": ["Glenn Hofford."], "venue": "Phoenix.", "citeRegEx": "Hofford.,? 2001", "shortCiteRegEx": "Hofford.", "year": 2001}, {"title": "Star: An Executable Software System Specification Language, Ip.com: http://ip.com/IPCOM/000202126, (04-Dec-2010), Available at http://www.softwareengineeringconcepts.com/Star", "author": ["Glenn Hofford"], "venue": null, "citeRegEx": "Hofford.,? \\Q2010\\E", "shortCiteRegEx": "Hofford.", "year": 2010}, {"title": "Patent 8,407,169 Expert system and method", "author": ["U.S. Glenn Hofford"], "venue": "(issued March", "citeRegEx": "Hofford,? \\Q2013\\E", "shortCiteRegEx": "Hofford", "year": 2013}, {"title": "The Collection of Physical Knowledge and its Application in Intelligent", "author": ["Benjamin Johnston"], "venue": null, "citeRegEx": "Johnston.,? \\Q2011\\E", "shortCiteRegEx": "Johnston.", "year": 2011}, {"title": "Speech and Language Processing, An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition (Second Edition", "author": ["Daniel Jurafsky", "James H. Martin"], "venue": null, "citeRegEx": "Jurafsky and Martin.,? \\Q2009\\E", "shortCiteRegEx": "Jurafsky and Martin.", "year": 2009}, {"title": "A Framework for Representing Knowledge, Mind Design, ed", "author": ["Marvin Minsky."], "venue": "J. Haugeland, The MIT Press, Cambridge, MA, 95-128.", "citeRegEx": "Minsky.,? 1981", "shortCiteRegEx": "Minsky.", "year": 1981}, {"title": "The Society of Mind, Simon", "author": ["Marvin Minsky"], "venue": null, "citeRegEx": "Minsky.,? \\Q1986\\E", "shortCiteRegEx": "Minsky.", "year": 1986}, {"title": "Make Things As Simple As Possible, But Not Simpler", "author": ["Adam Nash"], "venue": "Available at http://blog.adamnash.com/2013/09/25/makethings-as-simple-as-possible-but-not-simpler/ Last accessed April", "citeRegEx": "Nash.,? \\Q2013\\E", "shortCiteRegEx": "Nash.", "year": 2013}, {"title": "Artificial Intelligence, A Modern Approach, (Prentice", "author": ["Stuart J. Russell", "Peter Norvig"], "venue": null, "citeRegEx": "Russell and Norvig.,? \\Q2003\\E", "shortCiteRegEx": "Russell and Norvig.", "year": 2003}, {"title": "Solving the Frame Problem, A Mathematical Investigation of the Common Sense Law of Inertia", "author": ["Murray Shanahan"], "venue": null, "citeRegEx": "Shanahan.,? \\Q1997\\E", "shortCiteRegEx": "Shanahan.", "year": 1997}, {"title": "Computer science as empirical inquiry: Symbols and search", "author": ["Allen Newell", "Herbert A. Simon"], "venue": "Communications of the ACM,", "citeRegEx": "Newell and Simon.,? \\Q1976\\E", "shortCiteRegEx": "Newell and Simon.", "year": 1976}, {"title": "On What There Is, Review of Metaphysics, 1, 21-38", "author": ["Willard Van Orman Quine."], "venue": "Reprinted in Willard Van Orman Quine. From a Logical Point of View: Logico-philosophical essays, Harvard University Press, 1953. Revised and reprinted later.", "citeRegEx": "Quine.,? 1948", "shortCiteRegEx": "Quine.", "year": 1948}, {"title": "A History of Western Philosophy, Simon", "author": ["Bertrand Russell"], "venue": null, "citeRegEx": "Russell.,? \\Q1945\\E", "shortCiteRegEx": "Russell.", "year": 1945}, {"title": "Procedural Reflection in Programming Languages (vol", "author": ["Brian Cantwell Smith."], "venue": "1), Massachusetts Institute of Technology, Cambridge, MA.", "citeRegEx": "Smith.,? 1982", "shortCiteRegEx": "Smith.", "year": 1982}, {"title": "Knowledge Representation, Logical, Philosophical, and Computational Foundations, Brooks/Cole, Pacific", "author": ["John F. Sowa"], "venue": null, "citeRegEx": "Sowa.,? \\Q2000\\E", "shortCiteRegEx": "Sowa.", "year": 2000}, {"title": "The Challenge of Knowledge Soup, in Research Trends in Science, Technology and Mathematics Education, ed", "author": ["John F. Sowa."], "venue": "J. Ramadas & S. Chunawala, Homi Bhabha Centre, Mumbai.", "citeRegEx": "Sowa.,? 2006", "shortCiteRegEx": "Sowa.", "year": 2006}, {"title": "Foundations of the Geometry of Solids, transl", "author": ["Alfred Tarski."], "venue": "J. Woodger, in: Logic, Semantics, Metamathematics, Papers from 1923 to 1938, Copyright 1983, Hackett Publishing Company, Inc., Indianapolis, Indiana, 24-29.", "citeRegEx": "Tarski.,? 1927", "shortCiteRegEx": "Tarski.", "year": 1927}, {"title": "Procedures as a Representation for Data in a Computer Program for Understanding Natural Language\", MIT AI", "author": ["Terry Winograd"], "venue": "Technical Report", "citeRegEx": "Winograd,? \\Q1971\\E", "shortCiteRegEx": "Winograd", "year": 1971}, {"title": "What\u2019s in a Link: Foundations for Semantic Networks, in: Representation and Understanding: Studies in Cognitive Science, ed", "author": ["William A. Woods."], "venue": "D. Bobrow and A. Collins, Academic Press, New York, 35-82. Reprinted in R.Brachman and H.", "citeRegEx": "Woods.,? 1975", "shortCiteRegEx": "Woods.", "year": 1975}, {"title": "Readings in Knowledge Representation", "author": ["Levesque (eds"], "venue": null, "citeRegEx": ".eds.,? \\Q1985\\E", "shortCiteRegEx": ".eds.", "year": 1985}], "referenceMentions": [{"referenceID": 13, "context": "Existing meaning representation approaches include first order logics, semantic networks, and frame-based approaches (Jurafsky and Martin, 2009).", "startOffset": 117, "endOffset": 144}, {"referenceID": 19, "context": "Newell and Simon (1976) for a general definition of a physical symbol system.", "startOffset": 0, "endOffset": 24}, {"referenceID": 22, "context": "scribed in Smith (1982). 3 The term \u201centity\u201d is used somewhat imprecisely", "startOffset": 11, "endOffset": 24}, {"referenceID": 6, "context": "ROSS is a method that fits the definition of \u201crepresentational scheme\u201d (Hayes, 1974).", "startOffset": 71, "endOffset": 84}, {"referenceID": 26, "context": "An example is the SHRDLU system of Terry Winograd, which focused on commonsense reasoning about simple domains and questionanswering (Winograd, 1971).", "startOffset": 133, "endOffset": 149}, {"referenceID": 24, "context": "Within the field of natural language understanding, (Sowa, 2006) describes the shift that took place during the 1980\u2019s on the part of Terry Winograd and others:", "startOffset": 52, "endOffset": 64}, {"referenceID": 16, "context": "6 Nash (2013): a blog post entitled \u201cMake Things As", "startOffset": 2, "endOffset": 14}, {"referenceID": 26, "context": "Terry Winograd, for example, called his first book Understanding Natural Language (1972) and his second book Language as a Cognitive Process: Volume I, Syntax (1983).", "startOffset": 6, "endOffset": 89}, {"referenceID": 26, "context": "Terry Winograd, for example, called his first book Understanding Natural Language (1972) and his second book Language as a Cognitive Process: Volume I, Syntax (1983). But he abandoned the projected second volume on semantics when he realized that no existing semantic theory could explain how anyone, human or computer, could understand language.", "startOffset": 6, "endOffset": 166}, {"referenceID": 26, "context": "Terry Winograd, for example, called his first book Understanding Natural Language (1972) and his second book Language as a Cognitive Process: Volume I, Syntax (1983). But he abandoned the projected second volume on semantics when he realized that no existing semantic theory could explain how anyone, human or computer, could understand language. With his third book, coauthored with the philosopher Fernando Flores, Winograd (1986) switched to his later work on the design of human-computer interfaces.", "startOffset": 6, "endOffset": 433}, {"referenceID": 14, "context": "7 Minsky (1981) originated the frame concept;", "startOffset": 2, "endOffset": 16}, {"referenceID": 3, "context": "9 Minsky (1981), Brachman and Schmolze (1985) Secondly, this should be done in a way that is flexible, so that when instances get instantiated based on an entity class, they are created with a basic structure, but only the specifics that are known are specified.", "startOffset": 17, "endOffset": 46}, {"referenceID": 4, "context": "In the field of natural language understanding, a related perspective was provided by Fillmore (1982). In his introduction to semantic frames, he states \u201cBy the term \u2018frame\u2019 I have in mind any system of concepts related in such a way that to understand any one of them you have to understand the whole structure in which it fits; when one of the things in such a structure is introduced into a text, or into a con-", "startOffset": 86, "endOffset": 102}, {"referenceID": 27, "context": "15 Woods (1975) (III.", "startOffset": 3, "endOffset": 16}, {"referenceID": 2, "context": "Brachman and Levesque (1985) discuss the spectrum of KR formalisms with respect to the level of expressiveness (from the simpler database schemes to the fully expressive FOL).", "startOffset": 0, "endOffset": 29}, {"referenceID": 11, "context": "ROSS has been successfully applied in three separate systems: an expert system computer program generator (Hofford, 2001 and 2010), an expert system for diagnosis of network faults (Hofford, 2013), and a representational technique that exists in a natural language understanding system (referred to as \u201cModelBuilder\u201d).", "startOffset": 181, "endOffset": 196}, {"referenceID": 21, "context": "Russell (1945) was a critic of Aristotle\u2019s taxonomy; he provides an interesting perspective:", "startOffset": 0, "endOffset": 15}, {"referenceID": 20, "context": "The influential work of Quine (1948) acknowledges two kinds of existence: physical things, like the continent of Australia, and abstract things \u2013 e.", "startOffset": 24, "endOffset": 37}, {"referenceID": 5, "context": "The earliest known proponents of an atomic theory appear to have been the Greek philosophers Leucippus and Democritus (Guthrie, 1950).", "startOffset": 118, "endOffset": 133}, {"referenceID": 23, "context": "Sowa (2000) - Aristotle\u2019s concept of monads", "startOffset": 0, "endOffset": 12}, {"referenceID": 0, "context": "22 Some references for this area include Allen (1983),", "startOffset": 41, "endOffset": 54}, {"referenceID": 6, "context": "The work of Hayes (1985) in the area of qualitative physics uses a four-dimensional approach.", "startOffset": 12, "endOffset": 25}, {"referenceID": 9, "context": "Detailed information on the structure of rules and about the reasoning algorithms of the expert system for diagnosis that was developed by the author is available in Hofford (2013).", "startOffset": 166, "endOffset": 181}], "year": 2014, "abstractText": "Representation is a cross-discipline topic that includes knowledge representation from the field of artificial intelligence, meaning representation from the field of natural language understanding, and structured information from information processing. The field of logic is replete with methods for representation and reasoning. In the areas of AI knowledge representation and reasoning, leading approaches include first order logic, description logic, lambda calculus, semantic networks, framebased approaches and many others. Meaning representation techniques from the field of natural language understanding include the above in addition to approaches like conceptual dependency. ROSS (\u201cRepresentation, Ontology, Structure, Star\u201d) is introduced as a new method for representation that emphasizes representational constructs for physical structure. The ROSS approach starts with a normal form that is self-consciously less-expressive than logic, and builds from the bottom-up to achieve the expressiveness that is needed for a domain. Information that uses the normal form exists within an analogical frame of reference. What is achieved is a greater degree of structure in the representations that use ROSS when compared with representations that are typically created using formal approaches such as FOL. The ROSS normal form involves a set of modeling guidelines and underlying ontological commitments that involve naive or intuitionistic", "creator": "Microsoft\u00ae Office Word 2007"}}}