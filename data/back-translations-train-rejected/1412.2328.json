{"id": "1412.2328", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Dec-2014", "title": "On the Behavioural Formalization of the Cognitive Middleware AWDRAT", "abstract": "We present our ongoing work and initial results towards the (behavioral) correctness analysis of the cognitive middleware AWDRAT. Since, the (provable) behavioral correctness of a software system is a fundamental pre-requisite of the system's security. Therefore, the goal of the work is to first formalize the behavioral semantics of the middleware as a pre-requisite for our proof of the behavioral correctness. However, in this paper, we focus only on the core and critical component of the middleware, i.e. Execution Monitor which is a part of the module \"Architectural Differencer\" of AWDRAT. The role of the execution monitor is to identify inconsistencies between runtime observations of the target system and predictions of the specification System Architectural Model of the system. As a starting point we have defined the formal (denotational) semantics of the observations (runtime events) and predictions (executable specifications as of System Architectural Model); then based on the aforementioned formal semantices, we have formalized the behavior of the \"Execution Monitor\" of the middleware.", "histories": [["v1", "Sun, 7 Dec 2014 07:50:25 GMT  (14kb)", "http://arxiv.org/abs/1412.2328v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.SE", "authors": ["muhammad taimoor khan", "dimitrios serpanos", "howard shrobe"], "accepted": false, "id": "1412.2328"}, "pdf": {"name": "1412.2328.pdf", "metadata": {"source": "CRF", "title": "On the Behavioral Formalization of the Cognitive Middleware AWDRAT", "authors": ["Muhammad Taimoor Khan", "Dimitrios Serpanos", "Howard Shrobe"], "emails": ["dserpanos}@qf.org.qa", "hes@csail.mit.edu"], "sections": [{"heading": null, "text": "ar Xiv: 141 2.23 28v1 [cs.AI] 7D ec2 014"}, {"heading": "On the Behavioral Formalization of the Cognitive", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Middleware AWDRAT", "text": "In fact, most of them are able to determine for themselves what they want and what they don't want."}], "references": [{"title": "Abstract State Machines: A Method for High-Level System Design and Analysis", "author": ["E. Borger", "Robert F. Stark"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "DKAL*: Constructing Executable Specifications of Authorization Protocols", "author": ["Jean-Baptiste Jeannin", "Guido de Caso", "Juan Chen", "Yuri Gurevich", "Prasad Naldurg", "Nikhil Swamy"], "venue": "Technical Report MSR-TR-2013-19,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Towards the Formal Specification and Verification of Maple Programs", "author": ["Muhammad Taimoor Khan", "Wolfgang Schreiner"], "venue": "Intelligent Computer Mathematics,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "On the Formal Semantics of the Cognitive Middleware AWDRAT", "author": ["Muhammad Taimoor Khan", "Dimitrios Serpanos", "Howard Shrobe"], "venue": "Technical Report CSAIL, MIT (to appear),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "The Temporal Logic of Actions", "author": ["Leslie Lamport"], "venue": "ACM Trans. Program. Lang. Syst.,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1994}, {"title": "Dependency Directed Reasoning for Complex Program Understanding", "author": ["Shrobe", "Howard E"], "venue": "Technical report, Massachusetts Institute of Technology,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1979}, {"title": "The Formal Semantics of Programming Languages: An Introduction", "author": ["Glynn Winskel"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1993}], "referenceMentions": [{"referenceID": 3, "context": "The material of the parts of this paper is based on [4].", "startOffset": 52, "endOffset": 55}, {"referenceID": 5, "context": "The task of regeneration is based on the dependency-directed reasoning [7] engine of the system that contributes to the self-organization and self-awareness of the system by recording execution steps intrinsically states of the system and their corresponding justification (reason).", "startOffset": 71, "endOffset": 74}, {"referenceID": 5, "context": "A Specification Language of AWDRAT: A specification language \u201cSystem Architectural Model\u201d of AWDRAT supports to specify the target system behavior based on a fairly high-level description written in a language of \u201cPlan Calculus\u201d [7] which is a decomposition of pre- and post- and invariant conditions for each computing component (module) of the target system.", "startOffset": 229, "endOffset": 232}, {"referenceID": 3, "context": "For syntactic details, please see [4].", "startOffset": 34, "endOffset": 37}, {"referenceID": 4, "context": "Based on the core idea of Lamport [5], we have defined the semantics of the specification as a state relationship to achieve the desired insight of the program\u2019s behavior by relating pre- and post-states [3].", "startOffset": 34, "endOffset": 37}, {"referenceID": 2, "context": "Based on the core idea of Lamport [5], we have defined the semantics of the specification as a state relationship to achieve the desired insight of the program\u2019s behavior by relating pre- and post-states [3].", "startOffset": 204, "endOffset": 207}, {"referenceID": 3, "context": "For further details on the semantics, please see [4].", "startOffset": 49, "endOffset": 52}, {"referenceID": 3, "context": "The corresponding \u201cmonitors\u201d predicate formalizes the aforementioned semantics as discussed in [4].", "startOffset": 95, "endOffset": 98}, {"referenceID": 6, "context": "The proof is essentially a structural induction proof, however, the non-trivial part is the recursive definition of the semantics of the monitor that is to be proved by the principle of rule induction [8].", "startOffset": 201, "endOffset": 204}, {"referenceID": 0, "context": "We also plan to extend AWDRAT such that a target system\u2019s behavior is specified using Abstract State Machine [1] based formalism which then will automatically translate into a semantically equivalent System Architectural Model allowing to already check the inconsistencies in the intra system behavior with various ASM automated tools, e.", "startOffset": 109, "endOffset": 112}, {"referenceID": 1, "context": "DKAL [2].", "startOffset": 5, "endOffset": 8}], "year": 2014, "abstractText": "We present our ongoing work and initial results towards the (behavioral) correctness analysis of the cognitive middleware AWDRAT [6]. Since, the (provable) behavioral correctness of a software system is a fundamental pre-requisite of the system\u2019s security. Therefore, the goal of the work is to first formalize the behavioral semantics of the middleware as a prerequisite for our proof of the behavioral correctness. However, in this paper, we focus only on the core and critical component of the middleware, i.e. Execution Monitor which is a part of the module \u201cArchitectural Differencer\u201d of AWDRAT. The role of the execution monitor is to identify inconsistencies between runtime observations of the target system and predictions of the specification System Architectural Model of the system. As a starting point we have defined the formal (denotational) semantics of the observations (runtime events) and predictions (executable specifications as of System Architectural Model); then based on the aforementioned formal semantices, we have formalized the behavior of the \u201cExecution Monitor\u201d of the middleware. The material of the parts of this paper is based on [4]. AWDRAT is a general purpose middleware system that provides survivability to any kind of new and legacy software system. In detail, the middleware checks for consistency between the target system\u2019s actual (runtime) behavior and the expected (system specification) behavior of the system, if there is the one then the diagnostic engine identifies an attack (illegal behavioral pattern) and the corresponding set of resources which were compromised during the attack. After identifying an attack, AWDRAT attempts to repair respectively regenerate the compromised system into a safer state, if possible. The task of regeneration is based on the dependency-directed reasoning [7] engine of the system that contributes to the self-organization and self-awareness of the system by recording execution steps intrinsically states of the system and their corresponding justification (reason). Based on the Execution Monitor and the reasoning engine of AWDRAT not only the detection of known attacks is possible but also detection (resp. recovery from) the unknown attacks is also possible. A Specification Language of AWDRAT: A specification language \u201cSystem Architectural Model\u201d of AWDRAT supports to specify the target system behavior based on a fairly high-level description written in a language of \u201cPlan Calculus\u201d [7] which is a decomposition of preand postand invariant conditions for each computing component (module) of the target system. The description can be considered as an executable specification of the system. The specification is a hierarchical nesting of system\u2019s components such that input and output ports of each component are connected by data and control flow links respective specifications. Furthermore, each component is specified with corresponding preand post-conditions. However, the specification also includes a variety of event specifications. In detail, the specification (System Architectural Model) of target system is described at the following two logical levels:", "creator": "easychair.cls-3.4"}}}