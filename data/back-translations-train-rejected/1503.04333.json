{"id": "1503.04333", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Mar-2015", "title": "Dynamic Move Tables and Long Branches with Backtracking in Computer Chess", "abstract": "The idea of dynamic move chains has been described in a preceding paper [6]. It allows the search tree to be forward-pruned, which is known to be dangerous, because that can remove important moves which would only be evaluated through a more exhaustive search process. This paper has added to the forward-pruning technique, through the use of 'Move Tables' that can act in the same way as Transposition Tables, but for moves not positions. They use an efficient memory structure and have put the design into the context of short or long-term memories. These can allow the search to be broadened, making it more reliable and are relatively independent, allowing some configuration as to how much to use. It has advanced some of the future work theory of the earlier paper and made more explicit where logical plans or more knowledge-based approaches might be applied.", "histories": [["v1", "Sat, 14 Mar 2015 18:47:07 GMT  (449kb)", "http://arxiv.org/abs/1503.04333v1", null], ["v2", "Sun, 28 Jun 2015 14:23:20 GMT  (480kb)", "http://arxiv.org/abs/1503.04333v2", null], ["v3", "Tue, 16 May 2017 12:11:10 GMT  (760kb)", "http://arxiv.org/abs/1503.04333v3", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["kieran greer"], "accepted": false, "id": "1503.04333"}, "pdf": {"name": "1503.04333.pdf", "metadata": {"source": "CRF", "title": "Dynamic Move Chains and Move Tables in Computer Chess", "authors": ["Kieran Greer"], "emails": [], "sections": [{"heading": null, "text": "The search tree needs to be pruned forward, which is notoriously dangerous because it can remove important moves that would only be evaluated by a more comprehensive search process. This paper supplemented the forward pruning technique with the use of \"move tables,\" which can act in the same way as transposition tables, but not for trains. They use an efficient memory structure and have put the design in the context of short- or long-term memory, which can extend the search, making it more reliable and relatively independent, allowing for some configuration of the scope to be used. It has further developed and made more explicit some of the future working theories of the previous paper, where logical plans or more knowledge-based approaches could be applied. Index terms - Move Table, Dynamic Movement Sequence, Tree Search, Memory Structure, Knowledge."}, {"heading": "1 Introduction", "text": "The idea of dynamic pull chains was described in a previous paper [6]. It contains the idea of pushing forward the search tree, which is notoriously dangerous because it can remove important moves that would only be evaluated by a more comprehensive search process. [5] The amount of knowledge contained in the chess program is still limited, and therefore it still needs to evaluate many more positions in order to achieve reliable results. Thus, even if evolutionary methods or machine learning are used to generate the evaluation function [5], the understanding level is still very flat, perhaps no more than a set of weights. Therefore, the computer program could still be supported by a friendlier framework for generating knowledge. The intention of dynamic pull chains is to store sequences of moves, rather than positions with ratings, and the sequences can then be tried out in any relevant position where positions vary only slightly."}, {"heading": "2 Dynamic Move Chains", "text": "Dynamic pull chains [6] can be generated from the truncated pull sequences of the search process. A cut-off is generated when a pull sequence is found to disprove a particular position, meaning that a further search of the position is not required. This sequence can then be saved, retrieved and used to replace a full search the next time it is valid. However, even very small changes in a position can cause very different ratings, and so it is not possible to make definitive statements based on this type of pull sequence alone. The pull sequence must be played and re-evaluated in each position it is applied to, but the fact that positions vary only slightly from one position to the next helps ensure that the pull sequence can still be relevant. If it proves unreliable, it can simply be ignored, and the next cut-off could produce a completely different pull sequence that is played back."}, {"heading": "3 Related Work", "text": "This paper is a continuation of the earlier paper [6], which described the new forward section method in detail. It therefore has no new theory outside of the earlier work, in which related research would still be the original Chessmaps heuristics [7], the killer heuristics [1], the History Heuristic or Transposition Tables [8] [9]. As described in Section 6.1, Botwinnik's knowledge-based approaches [2] [3] may now be relevant."}, {"heading": "4 Move Tables", "text": "They have been given this name so as not to confuse the immediate effect of the current pull chains. [6] They have some advantages and some disadvantages over transposition tables. Firstly, they can be grouped together in an arrangement the size of a board. They can also be stored for each move, for both colors, which require a total of 12 tables, but this is still a relatively small amount of space compared to transposition tables. The improvement of the table is that the moves are grouped in an arrangement that is the size of a board."}, {"heading": "4.1 Best Squares and Important Squares", "text": "This could be very useful, as this type of view could provide a basis for some level of knowledge-based thinking. It is also useful that this type of information can be viewed individually. It could even be used without square control, while the tables are very quick to calculate. Since they are always part of the shaft table, square control will always be used as part of this research project, but not as a position. It could even be used without square control, while the tables are very fast."}, {"heading": "5 Testing", "text": "The chess game program itself and the test program are both written in the C #.Net language. Two types of tests were performed to reduce the results. The first is simply some 5-minute games against the standard chess card heuristic, so you show that the use of draw tables with dynamic draw chains does not have any adverse effects in the real game. Therefore, the number of tables that are first searched for was set to a maximum of 4. A random opening for each game would be selected and there was also an iterative recess with a minimum window. The new dynamic draw chains with move tables have prevailed well enough against the standard chess cards heuristic with transposition tables. In ten 5-minute games, it won 7-3. To see how the addition of the move tables changes the search size, tests are added that are performed well enough to start the search for movement chains. The paper [7] shows how the forward approach of the dynamic search alone can reduce the search by the search branches of the search."}, {"heading": "6 Discussion", "text": "The relocation tables are similar to transposition tables except that they store sequences of moves and do not provide position evaluations; they could be considered complementary to the solution for the use of relocation chains proposed in [6]. They can be used at any position where they are relevant, and complement any immediate section situation represented by a single relocation chain. This new process does not specifically solve this problem, but it does provide some more information that can realistically be used to help the knowledge-based approach. As it has been extracted from the search process, it must be considered reliable, so the only problem is interpreting it. A nice thing is that it would be possible to retrieve any number of moves from the tables and use them in a relatively independent manner; the number of retrieved tables could even be modified by the program, or the pattern that can be used as a basis for each table to add two important pieces of information."}, {"heading": "6.1 Botvinnik\u2019s Computer Chess Theory", "text": "The former world champion Botwinnik wrote a computer chess book [3] and programmed (pioneered) when chess programs were based on the theories of logic and knowledge. As the speed of the computer improved, the statistical brute force approaches took over and are standard today. In his book, the experienced logic suggested measuring how many moves it might take for a piece to move from its place to the place where it should be. This requires specific knowledge of the position, but is a bit like narrow sequences that need to be included in a main search process. This more specific knowledge represents a certain plan in the position, but if it cannot be built from a rich knowledge base, then an experience-based approach could help generate some knowledge at a low level to start with it. If you look at the patterns in each move table, the squares that the search process has rated as important for each piece are shown. Therefore, any count of how to move between them, can be considered logical and in a logical way."}, {"heading": "7 Conclusions", "text": "This paper has supplemented the forward-section technique of Dynamic Chains of Motion by using motion tables that can act in the same way as transposition tables, but not for moves, but for positions. They use an efficient memory structure and have put the design in the context of short or long-term memories. Dynamic chains have an immediate effect, while the train tables are built more slowly and can be used at any time. They store a more permanent type of knowledge that can represent the entire chess game and can be compared to long-term memory, which can expand the search, making them more reliable and relatively independent, allowing some configurations in terms of usage. It has further developed some of the future working theory of the previous essay [6] and made it more explicit where logical plans or more knowledge-based approaches could be tried."}, {"heading": "8 References", "text": "[1] Birmingham, J. and Kent, P. (1977). Tree Search and Pruning Techniques, Advances in Computer Chess, Edinburgh University Press, Ed. Clarke, M.R.B., pp. 89-107. [2] Botvinnik, M.M. (1981). Selected Games 1967-1970, Pergamon Russian Chess Series, PergamonPress, translated by K.P.Neat. [3] Botvinnik, M.M. (1970). Computer, Chess and Forward Planning, New York: Springer Publishers. [4] F\u00fcrnkranz, J., (1995), Machine Learning in Computer Chess: The Next Generation, ICCA Journal, Vol. 19, No. 3, pp. 147-161. [5] F\u00fcrnkranz, J. (2007). Recent Advances in Machine Learning and Playing. (OGAI Journal, V.26, No. 2."}], "references": [{"title": "Tree searching and tree pruning techniques, Advances in Computer", "author": ["J. Birmingham", "P. Kent"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1977}, {"title": "Pergamon Russian Chess Series, Pergamon Press, translated by K.P.Neat", "author": ["M.M. Botvinnik"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1981}, {"title": "Computers, Chess, and long range planning, New York: Springer-Verlag", "author": ["M.M. Botvinnik"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1970}, {"title": "Machine Learning in Computer Chess: The Next Generation", "author": ["J. F\u00fcrnkranz"], "venue": "ICCA Journal,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1995}, {"title": "Recent advances in machine learning and game playing", "author": ["J. F\u00fcrnkranz"], "venue": "OGAI Journal,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Tree Pruning for New Search Techniques in Computer Games", "author": ["K. Greer"], "venue": "Advances in Artificial Intelligence,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Computer Chess Move Ordering Schemes Using Move Influence", "author": ["K. Greer"], "venue": "Artificial Intelligence Journal,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "The History Heuristic and other Alpha-Beta Search enhancements in Practice", "author": ["J. Schaeffer"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1989}, {"title": "New Advances in Alpha-Beta Searching", "author": ["J. Schaeffer", "A. Plaat"], "venue": "Proceedings of the 25th Computer Science Conference", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1996}], "referenceMentions": [{"referenceID": 5, "context": "Abstract\u2014The idea of dynamic move chains has been described in a preceding paper [6].", "startOffset": 81, "endOffset": 84}, {"referenceID": 5, "context": "The idea of dynamic move chains has been described in a preceding paper [6].", "startOffset": 72, "endOffset": 75}, {"referenceID": 4, "context": "Even if evolutionary methods or machine learning is used to generate the evaluation function [5], the understanding level is still very shallow, maybe not more than a set of weight values.", "startOffset": 93, "endOffset": 96}, {"referenceID": 5, "context": "Dynamic move chains [6] can be created from the cut-off move sequences of the search process.", "startOffset": 20, "endOffset": 23}, {"referenceID": 5, "context": "The algorithm for the dynamic move chains is also provided in the paper [6], where the new Move Tables search part would be placed at the top.", "startOffset": 72, "endOffset": 75}, {"referenceID": 5, "context": "Addition to the algorithm of [6], for where the Move Tables can be used.", "startOffset": 29, "endOffset": 32}, {"referenceID": 5, "context": "This paper is a follow on from the earlier paper [6] that describes the new forward-pruning method in detail.", "startOffset": 49, "endOffset": 52}, {"referenceID": 6, "context": "It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example.", "startOffset": 148, "endOffset": 151}, {"referenceID": 0, "context": "It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example.", "startOffset": 174, "endOffset": 177}, {"referenceID": 7, "context": "It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example.", "startOffset": 225, "endOffset": 228}, {"referenceID": 8, "context": "It therefore does not have any new theory outside of the earlier work, where related research would still be the original Chessmaps Heuristic paper [7], the Killer Heuristic [1], the History Heuristic or Transposition Tables [8][9] for example.", "startOffset": 228, "endOffset": 231}, {"referenceID": 1, "context": "1 however, Botvinnik\u2019s knowledge-based approaches [2][3] might now be relevant.", "startOffset": 50, "endOffset": 53}, {"referenceID": 2, "context": "1 however, Botvinnik\u2019s knowledge-based approaches [2][3] might now be relevant.", "startOffset": 53, "endOffset": 56}, {"referenceID": 5, "context": "This is to complement the immediate effect of the current move chains [6] produced from the cut-offs.", "startOffset": 70, "endOffset": 73}, {"referenceID": 6, "context": "The Chessmaps program was built from the idea of square control [7], which is central to generating the move ordering for the computer program.", "startOffset": 64, "endOffset": 67}, {"referenceID": 6, "context": "The paper [7] shows how the", "startOffset": 10, "endOffset": 13}, {"referenceID": 5, "context": "They might be thought of as completing the solution to using Move Chains, suggested in [6].", "startOffset": 87, "endOffset": 90}, {"referenceID": 5, "context": "The earlier paper [6] also suggested future work that might be tried, along the lines of adding more knowledge and some form of narrow evolutionary search.", "startOffset": 18, "endOffset": 21}, {"referenceID": 3, "context": "The earlier paper also wrote about tactical chunks, instead of the more common knowledge-based ones [4].", "startOffset": 100, "endOffset": 103}, {"referenceID": 2, "context": "The former World Champion Botvinnik wrote a computer chess book [3] and program (Pioneer) when the chess programs were built on the theories of logic and knowledge.", "startOffset": 64, "endOffset": 67}, {"referenceID": 1, "context": "The chess program is also described in [2], where the following quote from \u2018The Tale of a Small Tree\u2019 chapter sums up some of the relevant philosophy:", "startOffset": 39, "endOffset": 42}, {"referenceID": 5, "context": "It has advanced some of the future work theory of the earlier paper [6] and made more explicit where logical plans or more knowledge-based approaches might be tried.", "startOffset": 68, "endOffset": 71}], "year": 2015, "abstractText": "The idea of dynamic move chains has been described in a preceding paper [6]. It allows the search tree to be forward-pruned, which is known to be dangerous, because that can remove important moves which would only be evaluated through a more exhaustive search process. This paper has added to the forward-pruning technique, through the use of \u2018Move Tables\u2019 that can act in the same way as Transposition Tables, but for moves not positions. They use an efficient memory structure and have put the design into the context of short or long-term memories. These can allow the search to be broadened, making it more reliable and are relatively independent, allowing some configuration as to how much to use. It has advanced some of the future work theory of the earlier paper and made more explicit where logical plans or more knowledge-based approaches might be applied.", "creator": "Microsoft\u00ae Word 2010"}}}