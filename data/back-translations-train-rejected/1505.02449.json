{"id": "1505.02449", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-May-2015", "title": "Automating change of representation for proofs in discrete mathematics", "abstract": "Representation determines how we can reason about a specific problem. Sometimes one representation helps us find a proof more easily than others. Most current automated reasoning tools focus on reasoning within one representation. There is, therefore, a need for the development of better tools to mechanise and automate formal and logically sound changes of representation.", "histories": [["v1", "Sun, 10 May 2015 22:14:55 GMT  (17kb)", "http://arxiv.org/abs/1505.02449v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["daniel raggi", "alan bundy", "gudmund grov", "alison pease"], "accepted": false, "id": "1505.02449"}, "pdf": {"name": "1505.02449.pdf", "metadata": {"source": "CRF", "title": "Automating change of representation for proofs in discrete mathematics.\u22c6", "authors": ["Daniel Raggi", "Alan Bundy", "Gudmund Grov", "Alison Pease"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 150 5.02 449v 1 [cs.A I] 1 0M ay2 01Keywords: change of presentation, transformation, automated thinking, Isabelle correction wizard"}, {"heading": "1 Introduction", "text": "In fact, most people who are able to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to dance, to"}, {"heading": "2 Background", "text": "Isabelle / HOL is a theorem proof framework based on a simple type-theoretical logic of higher order [9]. It is one of the most widely used evidence wizards for the mechanization of evidence. Apart from ensuring the accuracy of evidence written in its formal language, Isabelle has powerful automatic tactics such as simp and auto, and over time it has been enriched with some internally verified theorem proofs such as metis [7] and smt [11], along with a link from the internal evidence to some very powerful external proofs such as E, SPASS, Vampires, CVC3 and Z3 through the Sledgehammer tool [10]. The transfer package was first published for Isabelle 2013-1 as a general mechanism for defining quotic types and for transferring knowledge from the old \"type of representation\" to the new \"abstract\" type. \""}, {"heading": "3 Overall vision", "text": "Numbers can be represented as sets, pairs of sets, numerical lists, primes, etc. Some representations are only basic and the sensible person often finds it more useful to discard the representation for practical use (e.g. the natural number 3 is represented by {\u2205, {\u2205,}} in typical IF foundations, but this representation is rarely used in practice), and others emerge; they arise only after a considerable amount of accumulated knowledge about the objects themselves, but are more helpful than thought tools (e.g. natural numbers as bags full of prime numbers). Overall, we think that there is no obvious idea of a \"better representation\" and it is up to the reasonable person to decide according to the task. Thus, we imagine a system in which the representation of units can be fluently transformed."}, {"heading": "Numbers as bags of primes", "text": "Consider the following problem: Let's be a positive integer. Suppose that for each prime, if p separates n then p2 separates n. Let's prove that n is the product of a square and a cube. A standard solution to this problem is that n = pa11 p a2, y2 ak k. Then we note that the condition \"if p separates n\" means that ai 6 = 1, for each ai, we have to find a set of primates pi."}, {"heading": "Numbers as sets", "text": "Many numerical problems have combinatorial proofs. Theses are proofs where numbers are interpreted as cardinalities of sets and the whole problem can be transformed into a problem about sets. Enumerative combinatorics examines how sets relate to their cardinalities. As such, their theorems represent the connection that enables us to translate numerical problems into finite fixed theoretical problems.Table 2 shows examples of arithmetic problems with their corresponding finite set theory problems.While the proofs of numerical versions are not at all obvious (some of which are important results in basic combinatories), the proofs of their finite versions can be considered routine."}, {"heading": "Interconnectedness", "text": "We would like to emphasize the importance of fluid representations. For example, we talked about the ease with which we might think that the transformation of number-bag primates is actually a transformation of numbers into a theory of lists, in which elements of the list are the exponents of ordered primes. Inspired by this, we mechanized many other simple transformations, but the composition of which allows us to fluently translate from one representation to another. Our global vision of transformations useful in discrete mathematics, which we mechanized, is presented in Figure 1. It is worth noting that the diagram is not mutative and that it abstracts logical relationships (information can get lost so that some paths can only be traversed in one direction). In the next section, we will show how an idea of transformation that explains this type of correspondence between structures can be applied in formal proofs with Isabelle's transfer tool."}, {"heading": "4 On Transformations and the Transfer tool", "text": "In this section, we give a brief overview of a very general theory of transformations. We do not claim the originality of the essence of this theory, but we believe that the presentation we give brings clarity to the problem. We explain how Isabelle's transformation tool relates to it. Consider the following definitions: A domain is a class of entities and a series of types in which each entity of domain Y corresponds exactly to a typology, which can be found in http: / / homepages.inf.ed.ac.uk / s1052074 / AutoTransfer /. They are updated when each entity of domain X belongs to a domain Y."}, {"heading": "4.1 Transforming sentences with the Transfer tool", "text": "When we try to prove a proposition \u03b2, we want to find another proposition \u03b1 such that \u03b1 \u2212 \u2192 \u03b2, together with a proof of q q. In particular, if \u03b2 speaks of a domain B and we know a structural transformation from a domain A \u2212 B, we might be able to find an \u03b1 over A, so \u03b1 \u2212 \u2192 \u03b2.Isabelle's transmission tool provides a method to search for such a \u03b1. The user must provide theorems of the forms R1 a \u2011 b or (R1 Z \u21d2 R2) f g. (and their proofs), i.e. instances of structural transformation, and tactical transmission and transmission will automatically try to close a proposition such that \u03b1 \u2012 \u03b2 (in the case of transmission) or a weaker proposition such that \u03b1 \u2212 \u03b2 (in the case of transmission \u2032)."}, {"heading": "5 Mechanising transformations in Isabelle\u2019s HOL", "text": "In Section 3, we introduced some problems in discrete mathematics that involve structural transformations. We mechanized the transformations by proving the necessary transmission rules. The transmission tool allows us to proofs the transformations. In this section, we present a few examples from a larger catalog of transformations that we have mechanized in Isabelle.The transformations that we have formalized are, as proposed in Figure 1, the following: 1. Numbers-as-bags-of-prime-numbers, where each natural number is related to the multiset of their primary factorization. 2. Numbers-as-sets, where numbers are related to sets by the cardinality function. 3. Sets-as-B functions, where sets are considered as boolean-rated functions. 4. Multisets-as-N functions, where multisets are considered as naturally-rated functionstions6. 5. sets-as-lists, where sets-as-units are considered as, where sets-as-lists-as, where-lists-as, where-as-as-units from their sets."}, {"heading": "5.1 Numbers as bags of primes", "text": "The relationship at the center of this transformation is F: N \u00b2 N \u00b2 N \u00b2 M \u00b2 B, which relates each positive number to the multiset of its prime factors. It is defined as follows: F nM applies if and only if theorems such as F 6 {2, 3}, the proof of which is trivial calculations. Furthermore, we know from the Unique Prime Factorisation Theorem that F \u00b2 is unique. Therefore, we know that (F \u00b2 F \u00b2 eq) eq eqi.e. that equality is preserved by transformation. From the fact that every positive number has a factorisation that we have (F Z \u00b2 -Revimp) Z \u21d2 Revimp) Z \u00b2 > 0 \u00b2 -Revimp (F \u00b2 -Revimp) Z \u00b2 -Revimp (F \u00b2 -Revimp) Z \u00b2 -Provimp (F \u00b2 eq) Z \u00b2 -Provix) -Part we have (F > eq \u00b2 -Revival) Z \u00b2 elements that are already implied for all these elements."}, {"heading": "Application in proofs", "text": "We formalized the proof for problem 1: Let n be a positive integer. Let's assume that for each prime p = = prime number p is divided, then p2 divides it as well. Prove that n is the product of a square and a cube. Formally, we specify this as a quantifier of n p, a and b (greater than 0). This is not necessary (e.g. p is prime number, so it is redundant to say that it is positive), but it is practical for the proof. If we want proof for the unlimited version (which is also a theorem), we can divide in cases when n = 0 and when n > 0. The case for n = 0 is trivial, because then a = 0 and b = 0 are solutions."}, {"heading": "5.2 Numbers as sets", "text": "At the center of this transformation is the relationship C, in which C An is valid if and only if finitude A-cardA = n.We first prove trivial cardinality properties such as C {1 \u00b7 \u00b7 \u00b7 \u00b7 n} n, which allow us to consider standard representatives of numbers. This relationship is right-total, but not left-total, so we have the following two rules: (C Z \u21d2 imp), (C Z \u21d2 eq), (C Z \u21d2 eq), (C Z \u21d2 eq), where the fin is the universal quantifier, which is limited to finite quantities. Furthermore, the relationship is left-unambiguous, but not legally unambiguous, so we have (C Z \u21d2 C \u21d2 imp), eq (C \u21d2 C \u21d2 eq), eqp eqp eqp, where eqp is the relation of equilibrium or bijectable quantifier. Then we have the following rules for the structural equivalent: (C Z \u21d2 C), Pow \u21d2 Z \u21d2 C, the link eq \u21d2 Z, \u21d2 C (\u21d2 c), \u21d2 c (\u21d2 c), \u21d2-\u21d2 c (c), \u21d2-\u21d2 n (c)."}, {"heading": "6 Automated change of representation", "text": "We have developed a tactic that seeks a series of transformations within the framework of representations, and then tries to think about each representation. Our goal is for it to embody our vision set forth in Section 3. This is still in the works, but we address some simple requirements that we have already implemented and present our observations."}, {"heading": "6.1 Transformations as sets of transfer rules", "text": "As described in Section 4, we consider a transformation to be a series of \"basic relationships\" and a structural extension of them. Then, knowing a transformation means knowing cases in which the relationships and their extensions (in relation to relators such as Z \u21d2) persist. These knowledge cases are called transfer rules. They are theorems that the user must prove, and if enough of them are made available, the transfer method will attempt to transform the target into an equivalent or stronger set in another area. In the traditional application of the transfer method, there is a single attribute that encompasses all transfer rules. In the face of a goal, the transfer method will attempt to derive an equivalent or stronger sub-target by using all rules with such an attribute, with a simple inference mechanism (briefly described in Section 4.1 and in more detail in [6]). We have described each of the transformations described in Figure 1 as a set of transfer rules."}, {"heading": "6.2 Reversing transformations", "text": "We have implemented a tool to automatically reverse transformations. Let's explain this. If we want to transform a sentence p a into an equivalent, the transmission method will look for transfer rules (R Z \u21d2 eq) q p and R b a for some R, q and b. If found, it can transform the sentence in the same direction q b. The fact that the sentences are equivalent means that if we had started with q as the goal, it would have been valid to transform it into p a. This means that theoretically the same rules of transmission can be used to draw conclusions in one direction or the other, at least when the rules concern equivalence. The transmission method does not: if you want to use a transformation in both directions, you have to define two different sets of transmission rules, i.e., two different sets of transmission rules (in our example, over one you have to apply transmission rules (R \u00b2 eq, q) p) and inverse R \u00b2 p, where R \u00b2 a wap is."}, {"heading": "6.3 Search between representations", "text": "Our tactics seek the space of representations by applying each transformation, then argue within theory where it has arrived, and if there are still open subgoals, it will iteratively repeat the process. Let's remember that transformations are relative. As such, the process for each transformation is not deterministic, so there will be many branches per transformation. Apart from the fact that the transfer method is not deterministic, it will allow transformations of a sentence where some agreements are open, i.e., instead of a constant, we will get a schematic variable that the user can manually instantiate, and prove its validity with the new instantiation. This may be practical, but our tactics prefer branches with the least number of open substances, favoring complete matches; e.g. matches that leave no evidentiary obligations behind. We have also noticed that the order in which the transformations are sought is crucial, and that we continue to apply the wrong order, but the transformations deserve a more interesting one, which is the ad-hosting order."}, {"heading": "6.4 Overview", "text": "In a single step of the search, our tactics perform the following: 1. Normalization to transformation-specific language; 2. Application of transformation; 3. When working with a transformation that generates a stronger sub-target, we look for counter-examples and discard them when they are found. 4. Application of auto-tactics to transformed sentences. 3. The tactic can be applied recursively to search for a transformation into an area that is more than a step away. In the search, the obvious holding condition is that the theorem has been proven, although there may be other good reasons to pause in an area to allow the user an interactive reason. Each of the four steps mentioned can have many branches, so that a search is involved. Branches with the fewest number of sub-targets are preferred, and the order in which the transformations are applied plays a role, but there are no smart heuristics involved. Even if our observations of the search have led us to the current conception and implementation of the tactic (although the design is still very dependent)."}, {"heading": "7 Related Work", "text": "Although representation is widely recognized as a crucial aspect of thinking, to our knowledge there has been no attempt to include the automatic search for representation in thinking tools."}, {"heading": "Institutions and HETS", "text": "The concept of the institution was introduced as a general concept of the logical system [5]. The Heterogeneous Toolset (HETS) [8] was mainly developed to manage and integrate heterogeneous specifications, and based on institutional theory, it links and provides a way to translate between different logics, including Isabelle's HOL and FOL. Using HETS was to merge different aspects of complex systems using different programming languages and thought tools for different parts of the system. We are not aware of any application of HETS where heterogeneity is used to find evidence in representations where other representations fail."}, {"heading": "Little Theories and IMPS", "text": "The \"small theories\" are an interactive system of proof based on the principles of the small theories [4]. The modules or \"small theories\" of the IMPS are small axiomatic theories linked by theory interpretation. Thus, they are different levels of abstraction of a theory and not a direct representation of the units of theory."}, {"heading": "Uses of the Transfer package", "text": "The use of the transfer package has changed the way new quotient types and subtypes are defined, as does the lift package [6]. Within the framework of the lift package, there is a possibility to automatically transfer definitions from an old type to a new type (e.g., multisets are defined as an abstract type of the type of N-rated functions).The lift package was the main application of the transfer package, although the developers acknowledge the universality of their approach. Embodying this generality, they have developed an Isabelle theory of transferring integers to natural numbers, in the spirit of the various transformations we have developed ourselves."}, {"heading": "8 Evaluation, Future Work and Conclusion", "text": "The most important contributions presented in this book are: - We mechanize various useful transformations that are observed in the proofs of discrete mathematics. - We have exemplary theories that apply these transformations. - We have identified some requirements for the search in the space of represen-ments, and we both have a tool that meets the requirements. - Our tactics have yet to be properly evaluated. - In the following we will examine some of the difficulties associated with this task. - There is no definitive answer to this question. - Simple measures, such as the length, are, however, insufficient."}], "references": [{"title": "Nitpick: A counterexample generator for higher-order logic based on a relational model finder", "author": ["Jasmin Christian Blanchette", "Tobias Nipkow"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "Gr\u00f6bner bases and applications, volume 251", "author": ["Bruno Buchberger", "Franz Winkler"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1998}, {"title": "IMPS} : an Interactive Mathematical Proof System", "author": ["William M Farmer", "Joshua D Guttman", "F Javier Thayer"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1993}, {"title": "Institutions: Abstract model theory for specification and programming", "author": ["Joseph A Goguen", "Rod M Burstall"], "venue": "Journal of the ACM (JACM),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1992}, {"title": "Kun\u010dar. Lifting and Transfer: a modular design for quotients in Isabelle/HOL", "author": ["Brian Huffman", "Ond\u0159ej"], "venue": "In Certified Programs and Proofs,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "System description: The Metis proof tactic", "author": ["Joe Hurd"], "venue": "ESHOC, pages 103\u2013104,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2005}, {"title": "The heterogeneous tool set, HETS. Tools and Algorithms for the Construction and Analysis of Systems, pages", "author": ["Till Mossakowski", "Christian Maeder", "Klaus L\u00fcttich"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2007}, {"title": "Isabelle/HOL: a proof assistant for higher-order logic", "author": ["Tobias Nipkow", "Lawrence C Paulson", "Makarius Wenzel"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2013}, {"title": "Three Years of Experience with Sledgehammer, a Practical Link between Automatic and Interactive Theorem Provers", "author": ["Lawrence C Paulson", "Jasmin Christian Blanchette"], "venue": "PAAR@IJACR,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "SMT solvers: New oracles for the HOL theorem prover", "author": ["Tjark Weber"], "venue": "International Journal on Software Tools for Technology Transfer", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}], "referenceMentions": [{"referenceID": 4, "context": "We see that the operation of Isabelle\u2019s transfer methods [6] fit into this notion of transformation.", "startOffset": 57, "endOffset": 60}, {"referenceID": 7, "context": "Isabelle/HOL is a theorem proving framework based on a simple type-theoretical higher-order logic [9].", "startOffset": 98, "endOffset": 101}, {"referenceID": 5, "context": "Apart from ensuring the correctness of proofs written in its formal language, Isabelle has powerful automatic tactics like simp and auto, and through time it has been enriched with some internally-verified theorem provers like metis [7] and smt [11], along with a connection from the internal provers to some very powerful external provers like E, SPASS, Vampire, CVC3 and Z3 through the Sledgehammer tool [10].", "startOffset": 233, "endOffset": 236}, {"referenceID": 9, "context": "Apart from ensuring the correctness of proofs written in its formal language, Isabelle has powerful automatic tactics like simp and auto, and through time it has been enriched with some internally-verified theorem provers like metis [7] and smt [11], along with a connection from the internal provers to some very powerful external provers like E, SPASS, Vampire, CVC3 and Z3 through the Sledgehammer tool [10].", "startOffset": 245, "endOffset": 249}, {"referenceID": 8, "context": "Apart from ensuring the correctness of proofs written in its formal language, Isabelle has powerful automatic tactics like simp and auto, and through time it has been enriched with some internally-verified theorem provers like metis [7] and smt [11], along with a connection from the internal provers to some very powerful external provers like E, SPASS, Vampire, CVC3 and Z3 through the Sledgehammer tool [10].", "startOffset": 406, "endOffset": 410}, {"referenceID": 4, "context": "The Transfer package was first released for Isabelle 2013-1 as a general mechanism for defining quotient types and transferring knowledge from the old \u2018representation\u2019 type into the new \u2018abstract\u2019 type [6].", "startOffset": 202, "endOffset": 205}, {"referenceID": 4, "context": "For more details of the actual implementation of the algorithm see [6].", "startOffset": 67, "endOffset": 70}, {"referenceID": 4, "context": "1 and more detailed in [6]).", "startOffset": 23, "endOffset": 26}, {"referenceID": 0, "context": "Thus, our tactic calls the counterexample checker nitpick [1] and discards branches where a counterexample is found for one of its goals.", "startOffset": 58, "endOffset": 61}, {"referenceID": 3, "context": "The concept of Institution was introduced to as a general notion of logical system [5].", "startOffset": 83, "endOffset": 86}, {"referenceID": 6, "context": "The Heterogeneous Tool Set (HETS) [8] was developed mainly to manage and integrate heterogeneous specifications.", "startOffset": 34, "endOffset": 37}, {"referenceID": 2, "context": "IMPS is a an interactive proof system implemented based on the principles of Little Theories [4].", "startOffset": 93, "endOffset": 96}, {"referenceID": 4, "context": "This is what the Lifting package does [6].", "startOffset": 38, "endOffset": 41}, {"referenceID": 1, "context": ", Gr\u00f6bner bases [2], where there has been plenty of success in automated reasoning, or into SAT/SMT, which also have been an area of success in automation.", "startOffset": 16, "endOffset": 19}], "year": 2015, "abstractText": "Representation determines how we can reason about a specific problem. Sometimes one representation helps us find a proof more easily than others. Most current automated reasoning tools focus on reasoning within one representation. There is, therefore, a need for the development of better tools to mechanise and automate formal and logically sound changes of representation. In this paper we look at examples of representational transformations in discrete mathematics, and show how we have used Isabelle\u2019s Transfer tool to automate the use of these transformations in proofs. We give a brief overview of a general theory of transformations that we consider appropriate for thinking about the matter, and we explain how it relates to the Transfer package. We show our progress towards developing a general tactic that incorporates the automatic search for representation within the proving process.", "creator": "LaTeX with hyperref package"}}}