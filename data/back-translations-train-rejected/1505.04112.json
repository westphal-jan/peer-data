{"id": "1505.04112", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-May-2015", "title": "How, What and Why to test an ontology", "abstract": "Ontology development relates to software development in that they both involve the production of formal computational knowledge. It is possible, therefore, that some of the techniques used in software engineering could also be used for ontologies; for example, in software engineering testing is a well-established process, and part of many different methodologies.", "histories": [["v1", "Fri, 15 May 2015 16:30:17 GMT  (23kb)", "http://arxiv.org/abs/1505.04112v1", "4 pages, accepted at Bio-Ontologies 2015"]], "COMMENTS": "4 pages, accepted at Bio-Ontologies 2015", "reviews": [], "SUBJECTS": "cs.AI cs.CE", "authors": ["jennifer d warrender", "phillip lord"], "accepted": false, "id": "1505.04112"}, "pdf": {"name": "1505.04112.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Jennifer D. Warrender", "Phillip Lord"], "emails": ["phillip.lord@newcastle.ac.uk"], "sections": [{"heading": null, "text": "ar Xiv: 150 5.04 112v 1 [cs.A I] 1 5M ay2 015both include the production of formal computer knowledge. It is therefore possible that some of the techniques used in software development could also be used for ontologies; for example, testing in software development is an established process and part of many different methods.The application of testing on ontologies therefore appears attractive. Karyotype ontology is developed using the novel Tawny OWL library, which provides a fully programmatic environment for ontology development that includes a complete test cable.In this paper we describe how we used this harness to build an extensive test series, and use a continuous integration system to integrate tests deep into our development process; this environment is applicable to any OWL ontology, whether it was written with Tawny OWL or not. In addition, we present a novel analysis of our tests by introducing a new classification of what our different tests are."}, {"heading": "1 INTRODUCTION", "text": "The use of cytogenetic analysis is cheap, non-invasive and simple, so the representation of karyotypes remains useful but is not simple. In humans, the specification is a 100-page book using tests without a computational definition (Shaffer et al., 2012). Representation is a string without formal grammar that is difficult to computationally solve. To solve this problem, we have developed Karyotype Ontology, which offers a fully computational representation in the form of an OWL ontology (Warrender and Lord, 2013b).Ontology development bears many similarities to software development; both involve the incorporation of complex knowledge and the production of a computational representation of that knowledge. For the karyotype ontology classes, we have further developed this similarity."}, {"heading": "2 THE KARYOTYPE ONTOLOGY", "text": "A karyotype describes the number of chromosomes and any deviations from the normal value. These are visible under the light microscope and, when stained, exhibit a characteristic stripe pattern that can be used to distinguish between different chromosomes and the positions on these chromosomes."}, {"heading": "1 http://www.ebi.ac.uk/fgpt/sw/efovalidator/index.html", "text": "2 https: / / github.com / owlcollab / owltools / tree / master / OWLTools-"}, {"heading": "J. D. Warrender and P. Lord", "text": "Changes are described by their type, such as inversions, deletions or duplications, and by their location, which is specified by a chromosome number and band number. Thus, 46, XY, t (1; 3) (p22; q13.1) describes a male with a translocation from chromosome 1p22 to chromosome 3q13.1. In order to adequately describe a karyotype, a unique class must be defined for each band, of which there are 1224. Karyotype ontology is developed by specifying the bands in a literal clojure data structure and then using these to generate the corresponding classes. For example, the following data structure describes: [\"p10\" [\"p11\" \"\" \"p11\" \"p11.\" 1 \"p11\"]] a part of chromosome 1, which has bands p10, and p11 again two subbands p11.1 and p11.2. The representation was chosen to facilitate legibility / ionization."}, {"heading": "3 THE KARYOTYPE TEST HARNESS", "text": "Of course, programmers have always tested their code, but test-driven development methods emphasize the importance of writing large numbers of tests. A key feature has been the development of a test cable. This provides a method of defining tests separate from the main body of the code and a mechanism for running all tests on a regular basis in the batch. This allows for a more agile form of development, since tests can be run after each change to determine whether unexpected changes have occurred. Clojure provides a test cable that can be used directly with karyotype ontology. (For example, the following statements define two tests3 that will succeed if human ontology is both consistent and coherent, depending on the concept of reason. That is, we claim that (r / c / h e e r? human) returns a value that is true 4. (d e f t t t t t B a s i c (i s / c s s s s e? n? c) (h? h) (e) (h? n)."}, {"heading": "4 THE ONTOLOGY OF ONTOLOGY TESTS", "text": "This year, it has come to the point where it will be able to put itself at the top, \"he said in an interview with the\" Welt am Sonntag. \""}, {"heading": "5 SPECIFYING REASONER-BOUND TESTS WITH FACETS", "text": "While Tawny-OWL and Clojure provide a reasonably convenient syntax for specifying most of our tests, it is not ideal for all of them. A large number of tests for karyotype ontology test the behavior of a number of classes that effectively represent competence questions for our ontology (Ren et al., 2014).The International System for Human Cytogenetic Nomenclature (ISCN) contains a large number of examples that frequently describe known conditions or syndromes, which have been encoded as ontology as part of the tawny karyotype. The informal nature of ISCN as a specification means that these examples are the best mechanism to ensure that karyotype ontology meets the ISCN specification. (d e f c l a s s s s s s k45: s u p e r ISCNExampleKaryotype (owl \u2212 some b / de ivedyotype) classes."}, {"heading": "6 CONTINUOUS INTEGRATION", "text": "Continuous Integration (CI) is a software development process in which code is regularly tested for dependencies (and code that depends on them); in most cases, developers test their code to their version control system after each commit. CI provides two key features in addition to \"normal\" testing. First, it responds to dependency changes, which allows problems to be detected very early. Second, it is normally performed in a \"clean\" environment, which supports reproducibility. Since tawny-karyotype uses a standard testing environment, it is very easy to set up CI. In our case, we use TravisCI9. In design, karyotype ontology has no dependencies; in this case, the CI tests against changes in software dependencies (Tawny-OWL, the OWL API, HermiT (Shearer et al., 2008) and Clojure)."}, {"heading": "7 DISCUSSION", "text": "The four different types of tests we describe all have different purposes. The first of these software tests is strictly speaking not a form of ontology testing, but unit testing for the software involved in ontology development. However, it is an essential part of our test series as it helps to isolate errors that occur purely as a result of our ontology development software. Ontology-related tests directly test our ontology and ensure that it describes the world correctly - essentially, they are the ontological equivalent of Unit tests. The last two forms of tests are equivalent to functional tests, thereby ensuring ontology as we expect it to be. Our taxonomy and test usage are different from previous work by Garca-Ramos et al. (2009), as we only perform T-Box (class) tests while testing the A-Box. In addition, we perform tests for parts of the infrastructure outside of the base sontology. The use of cell tests, which include Tawny tests, is also included in the development environment."}, {"heading": "J. D. Warrender and P. Lord", "text": "We also briefly described our use of TravisCI, which performs integration testing. We believe that karyotype ontology itself does not have ontological dependencies, but we have generated an example ontology that is dependent on karyotype ontology and contributes to building a test suite for it. We believe that karyotype ontology is rather unusual because it does not have ontological dependencies. Integration testing is likely to bear even more fruit for ontologies with large or complex dependency graphics. To continue the metaphor for software development, there are currently several forms of testing that we do not perform on karyotype ontology. A common problem with ontology development is understanding the time of reason, especially the use of Tawny-OWL."}, {"heading": "10 https://github.com/jaydchan/tawny-karyotype-scaling", "text": "provide these capabilities for any ontology, regardless of the development environment. Although the work reported here is specific to karyotype ontology, we believe that the classification of ontology tests and tools is general, and we look forward to applying these forms of testing to many other ontologies."}, {"heading": "ACKNOWLEDGEMENTS", "text": "This work was supported by the University of Newcastle."}], "references": [{"title": "Gene ontology: tool for the unification of biology", "author": ["M Ashburner"], "venue": "The Gene Ontology Consortium. Nature Genetics,", "citeRegEx": "Ashburner,? \\Q2000\\E", "shortCiteRegEx": "Ashburner", "year": 2000}, {"title": "Ontologytest: A tool to evaluate ontologies through tests defined by the user", "author": ["S. Garca-Ramos", "A. Otero", "M. Fernndez-Lpez"], "venue": "In S. Omatu et al., editors,", "citeRegEx": "Garca.Ramos et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Garca.Ramos et al\\.", "year": 2009}, {"title": "The OWL API: A Java API for OWL ontologies", "author": ["M. Horridge", "S. Bechhofer"], "venue": "Semant. web,", "citeRegEx": "Horridge and Bechhofer,? \\Q2011\\E", "shortCiteRegEx": "Horridge and Bechhofer", "year": 2011}, {"title": "The human phenotype ontology project: linking molecular biology and disease through phenotype data", "author": ["S K\u00f6hler"], "venue": "Nucleic Acids Research,", "citeRegEx": "K\u00f6hler,? \\Q2014\\E", "shortCiteRegEx": "K\u00f6hler", "year": 2014}, {"title": "The Semantic Web takes Wing: Programming Ontologies with Tawny-OWL", "author": ["P. Lord"], "venue": null, "citeRegEx": "Lord,? \\Q2013\\E", "shortCiteRegEx": "Lord", "year": 2013}, {"title": "Modeling Sample Variables with an Experimental Factor Ontology", "author": ["J. Malone", "E. Holloway", "T. Adamusiak", "M. Kapushesky", "J. Zheng", "N. Kolesnikov", "A. Zhukova", "A. Brazma", "H. Parkinson"], "venue": "Bioinformatics (Oxford,", "citeRegEx": "Malone et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Malone et al\\.", "year": 2010}, {"title": "Continuous integration of open biological ontology libraries. http://bio-ontologies.knowledgeblog.org/405", "author": ["C. Mungall", "H. Dietze", "S. Carbon", "A. Ireland", "S. Bauer", "S. Lewis"], "venue": null, "citeRegEx": "Mungall et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Mungall et al\\.", "year": 2012}, {"title": "Towards competency question-driven ontology authoring", "author": ["Y. Ren", "A. Parvizi", "C. Mellish", "J. Pan", "K. van Deemter", "R. Stevens"], "venue": "The Semantic Web: Trends and Challenges,", "citeRegEx": "Ren et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Ren et al\\.", "year": 2014}, {"title": "HermiT: A HighlyEfficient OWL Reasoner", "author": ["R. Shearer", "B. Motik", "I. Horrocks"], "venue": "Proc. of the 5th Int. Workshop on OWL: Experiences and Directions (OWLED", "citeRegEx": "Shearer et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Shearer et al\\.", "year": 2008}, {"title": "A pattern-driven approach to biomedical ontology engineering", "author": ["J.D. Warrender", "P. Lord"], "venue": null, "citeRegEx": "Warrender and Lord,? \\Q2013\\E", "shortCiteRegEx": "Warrender and Lord", "year": 2013}, {"title": "The Karyotype Ontology: a computational representation for human cytogenetic patterns", "author": ["J.D. Warrender", "P. Lord"], "venue": "Bio-Ontologies", "citeRegEx": "Warrender and Lord,? \\Q2013\\E", "shortCiteRegEx": "Warrender and Lord", "year": 2013}], "referenceMentions": [{"referenceID": 4, "context": "It has been developed using Tawny-OWL (Lord, 2013), a fully programmatic ontology development environment.", "startOffset": 38, "endOffset": 50}, {"referenceID": 2, "context": "It uses the OWL API (Horridge and Bechhofer, 2011), which is the same library underlying Prot\u00e9g\u00e9 4 and upward.", "startOffset": 20, "endOffset": 50}, {"referenceID": 5, "context": "These have been encapsulated in bespoke tools such as the efovalidator that can only be used for the validation and unit testing of EFO (Malone et al., 2010).", "startOffset": 136, "endOffset": 157}, {"referenceID": 6, "context": "More recently, ontology testing has evolved by incorporating the use of continuous integration systems, as it enables tests to be run frequently and in a clean environment (Mungall et al., 2012).", "startOffset": 172, "endOffset": 194}, {"referenceID": 7, "context": "A large number of tests for the Karyotype Ontology test the behaviour of a set of classes which are, effectively, competency questions for our ontology (Ren et al., 2014).", "startOffset": 152, "endOffset": 170}, {"referenceID": 8, "context": "By design the Karyotype Ontology has no dependencies; the CI in this case, tests against changes in the software dependencies (Tawny-OWL, the OWL API, HermiT (Shearer et al., 2008), and Clojure).", "startOffset": 158, "endOffset": 180}, {"referenceID": 1, "context": "Our taxonomy and test usage differs from previous work by Garca-Ramos et al. (2009), as we test only T-Box (class) reasoning while they test the A-Box.", "startOffset": 58, "endOffset": 84}], "year": 2015, "abstractText": "Ontology development relates to software development in that they both involve the production of formal computational knowledge. It is possible, therefore, that some of the techniques used in software engineering could also be used for ontologies; for example, in software engineering testing is a well-established process, and part of many different methodologies. The application of testing to ontologies, therefore, seems attractive. The Karyotype Ontology is developed using the novel Tawny-OWL library. This provides a fully programmatic environment for ontology development, which includes a complete test harness. In this paper, we describe how we have used this harness to build an extensive series of tests as well as used a commodity continuous integration system to link testing deeply into our development process; this environment, is applicable to any OWL ontology whether written using Tawny-OWL or not. Moreover, we present a novel analysis of our tests, introducing a new classification of what our different tests are. For each class of test, we describe why we use these tests, also by comparison to software tests. We believe that this systematic comparison between ontology and software development will help us move to a more agile form of ontology development.", "creator": "LaTeX with hyperref package"}}}