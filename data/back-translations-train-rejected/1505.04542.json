{"id": "1505.04542", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-May-2015", "title": "Scalable Parallel Numerical Constraint Solver Using Global Load Balancing", "abstract": "We present a scalable parallel solver for numerical constraint satisfaction problems (NCSPs). Our parallelization scheme consists of homogeneous worker solvers, each of which runs on an available core and communicates with others via the global load balancing (GLB) method. The parallel solver is implemented with X10 that provides an implementation of GLB as a library. In experiments, several NCSPs from the literature were solved and attained up to 516-fold speedup using 600 cores of the TSUBAME2.5 supercomputer.", "histories": [["v1", "Mon, 18 May 2015 08:04:45 GMT  (2489kb,D)", "http://arxiv.org/abs/1505.04542v1", "To be presented at X10'15 Workshop"]], "COMMENTS": "To be presented at X10'15 Workshop", "reviews": [], "SUBJECTS": "cs.DC cs.AI", "authors": ["daisuke ishii", "kazuki yoshizoe", "toyotaro suzumura"], "accepted": false, "id": "1505.04542"}, "pdf": {"name": "1505.04542.pdf", "metadata": {"source": "CRF", "title": "Scalable Parallel Numerical Constraint Solver Using Global Load Balancing", "authors": ["Daisuke Ishii", "Kazuki Yoshizoe", "Toyotaro Suzumura"], "emails": ["dsksh@acm.org", "yoshizoe@acm.org", "suzumura@acm.org"], "sections": [{"heading": null, "text": "Categories and Theme Descriptions D.1.3 [Concurrent Programming]: Parallel Programming General Terms Algorithms, Artificial Intelligence Keywords Interval Analysis, Constraint Programming, Parallel Programming, Global Load Balancing, X10"}, {"heading": "1. INTRODUCTION", "text": "Numerical constraints Satisfaction problems (NCSPs, section 3) and their dedicated solvers LB have been successfully applied to real number problems [22, 6, 5]. Faced with an NCSP with a search space represented by a box (i.e. interval vectors), the branch and prune algorithm branches the box or repeats an inconsistent part of the box until finally a paving is achieved (i.e. a series of boxes that precisely encompass the solution approaches). However, the exponential computational complexity of the NCSPs limits the number of tractable instances; therefore, parallelization of NCSP solvers that can scale to a number of cores is a promising approach for the further development of numerical constraints in programming [7]."}, {"heading": "2. RELATED WORK", "text": "A study by Ghent et al. [8] describes existing parallel CSP solvers by dividing LB into three categories: search space splitting methods, cooperative methods for heterogeneous workers (e.g. portfolios and parallel local search) [4], and parallelization of the dissemination process of constraints [9]. Our work focuses on the first approach. The main difficulty of the search space splitting approach lies in the balanced distribution of sub-trees, whereby worker-solvers remain active. If the search tree is highly unbalanced, it becomes difficult to predict the appropriate distribution of the search tree, hence the need for a dynamic load balancing scheme. Typically, for this purpose, a work theft scheme is used: when a worker starves, he sends a request to other workers, and the workloads are communicated in response. Most existing plants experiment with a limited number (e.g. 40 [64], [14, [7] or 256] limiting the space between the two central tenants, limiting the ability of the two."}, {"heading": "3. NUMERICAL CONSTRAINT PROGRAMMING", "text": "Numerical constraint programming is an extension of discrete constraint programming [19] and uses techniques inherited from interval analysis [16]. Its variable domains are continuous subsets of R: (machine-representable) intervals [a, b]: = {r-R | a \u2264 r \u2264 b}, where a and b floating-point numbers and boxes (or vectors of intervals) ar Xiv: 150 5.04 542v 1 [cs.D] May 18, 201 5 ([a1, b1],.., [an, bn]). In the following, bold letters (e.g. v) are referred to as intervals and boxes."}, {"heading": "3.1 Branch and Prune Algorithm", "text": "The Branch and Prune Algorithm [22] is the standard solution method for NCSPs. It takes an NCSP line and a precision as input and output of a series of boxes (or patches) S that approaches the solution specified with precision. Figure 1 represents the algorithm. In the main loop in lines 2-11, the algorithm first takes the first element of the L queue of boxes and applies the Prune procedure that shaves the boundary portions of the field under consideration (line 3). In this thesis, we use a basic implementation HC4Revise [1] for well-defined problems; for pressurized problems, we use an implementation proposed in [6] that provides a verification process based on an interval Newton method combined with HC4Revise. As a result of Prune, a box becomes either empty, precise enough (its width is smaller than), verified as an inner box."}, {"heading": "4. PARALLELIZATION USING GLOBAL LOAD BALANCING", "text": "Balancing distribution is not easy; a naive method is to create a limit of a sufficient number of nodes in the search tree and distribute them evenly among the workers; however, calculating such a limit is not efficient when searching for the first width due to the time-consuming Prune process. The proposed method is simply implemented with X10 and Global Load Balancing (GLB), which is an efficient scheme for load balancing of irregular tasks. Input: Environment E, TaskQueue instance Q Output: Task result Parameters: i-R \u2265 0, w, l, z-N 1: LL: = InitLifelineE (l, z) 2: Repeat 3: while Q.process (i) performs the active phase 4: DistributeToThievesE (LL: = InitLifelineE: = InitLifelineE (l, z) 2: Repeat 3: while Q.process (i) passes through the active phase."}, {"heading": "4.1 X10 GLB Library", "text": "GLB is suitable for parallelizing irregular tasks where the workload for each sub-task is unpredictable, such as search algorithms for AI applications. GLB calculation is performed by multiple cooperative workers. Each worker runs on an X10 slot and handles a homogeneously divided workload. The workload is executed between workers in two phases: First, the work is sent to randomly selected other workers by a worker. Then, work is stolen and terminated, and detection by a hyper-cube network of workers called a lifeline. GLB is easily implemented with configurable parameters and scales up to 16K locations when applied to multiple benchmarks. For each GLB application, a sequential calculation is processed that processes a workload."}, {"heading": "4.2 Implementation of NCSP Solver with GLB", "text": "We implement TaskQueue to encapsulate the branch calculation and trim the algorithm. TaskQueue holds the queue L of undecided boxes and the solution set S. Initially, a worker owns the initial domain v0 in L and the queues of other workers remain empty. TaskQueue methods are implemented as follows: \u2022 Process (i) computes the main loop of the branch and trims the algorithm until the time elapses. For Prune, the C + + implementation of Realpaver is used. \u2022 Divide () splits L evenly into two parts and returns a part. \u2022 Merge (L) receives a series of boxes and adds the boxes to L. \u2022 getResult () returns | S |. Our implementation does not collect S in one place and thus avoids unnecessary overhead. In fact, S may be better distributed in the post-process of many applications.The implementation consists of about 1,000 lines of CS10 + 2.400 lines of solution code to try out in this process."}, {"heading": "5. PERFORMANCE EVALUATION", "text": "The experiments were conducted on the TSUBAME2.5 supercomputer, a supercomputer at the Tokyo Institute of Technology. [2] Each node of the TSUBAME2.5 has two Intel Westmere EP 2.93GHz processors (12 cores in total) and 54 GB of local memory. We used 50 nodes, so each experiment was performed with up to 600 X10 slots on 600 cores. We used the native X10 version 2.4.3.2 and its MPI backend (based on Open MPI 1.6.5)."}, {"heading": "5.1 Experimental Results", "text": "For each of the first three problems, we have prepared two cases by varying the number of variables and constraints; for the UC problems, we have solved with two different specifications; each instance has been solved with the following seven GLB parameter configurations: (1) i = 0.001 s, l = 2, and w = 2, and w = 1, and w = 1, with the following seven GLB parameter configurations: (2) i = 0.001 s, l = 2, and w = 0. (2) i = 0.001 s, l = 2, and w = 1, and w = 1. (3) i = 0.001 s, l = 2, and w = e.g."}, {"heading": "6. CONCLUSIONS", "text": "In this paper, we demonstrate that parallelization of branch and pruning is a good application of the X10 GLB framework. In the experiments, we have achieved near-linear velocities up to 600 X10 digits / cores and are expected to be able to scale further. In future work, we plan further experiments on realistic problems, including optimization problems, with a larger number of cores. Recognition. This work was partially funded by the JSPS project (KAKENHI 25880008, 15K15968, 25700038, 26280024 and 23240005) and the JST ERATO project."}, {"heading": "7. REFERENCES", "text": "[1] F. Benhamou, L. Granvilliers, F. Goualard, and J.-F.Puget. Revising Hull and Box Consistency. In ICLP, pp. 230-244, 1999. [2] D. Bergman, A. Cire, A. Sabharwal, H. Samulowitz, V. Saraswat, and W.-J. Hoeve. Parallel Combinatorial Optimization with Decision Diagrams. In CPAIOR, LNCS 8451, pp. 351-367, 2014. [3] B. Bloom, D. Grove, B. Sabharwal, H. Samulowitz, and V. Saraswat. SatX10: A Scalable Plug & Play Parallel SAT Framework. In SAT, LNCS 7317, pp. 463-468, 2012. [4] L. Bordeaux, Y."}], "references": [{"title": "Revising Hull and Box Consistency", "author": ["F. Benhamou", "L. Granvilliers", "F. Goualard", "J.-F. Puget"], "venue": "ICLP, pages 230\u2013244", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1999}, {"title": "Parallel Combinatorial Optimization with Decision Diagrams", "author": ["D. Bergman", "A.A. Cire", "A. Sabharwal", "H. Samulowitz", "V. Saraswat", "W.-J.V. Hoeve"], "venue": "CPAIOR, LNCS 8451, pages 351\u2013367", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2014}, {"title": "SatX10: A Scalable Plug & Play Parallel SAT Framework", "author": ["B. Bloom", "D. Grove", "B. Herta", "A. Sabharwal", "H. Samulowitz", "V. Saraswat"], "venue": "SAT, LNCS 7317, pages 463\u2013468", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Experiments with Massively Parallel Constraint Solving", "author": ["L. Bordeaux", "Y. Hamadi", "H. Samulowitz"], "venue": "IJCAI, pages 443\u2013448", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2006}, {"title": "A branch and prune algorithm for the computation of generalized aspects of parallel robots", "author": ["S. Caro", "D. Chablat", "A. Goldsztejn", "D. Ishii", "C. Jermann"], "venue": "Artificial Intelligence, 211:34\u201350", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2014}, {"title": "Interval-based projection method for under-constrained numerical systems", "author": ["D. Ishii", "A. Goldsztejn", "C. Jermann"], "venue": "Constraints Journal, 17(4):432\u2013460", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "Scalable Parallel Numerical CSP Solver", "author": ["D. Ishii", "K. Yoshizoe", "T. Suzumura"], "venue": "CP, LNCS 8656, pages 398\u2013406", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "A Preliminary Review of Literature on Parallel Constraint Solving", "author": ["I.P. Gent", "C. Jefferson", "I. Miguel", "N.C.A. Moore", "P. Nightingale", "P. Prosser", "C. Unsworth"], "venue": "Workshop on Parallel Methods for Constraint Solving", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2011}, {"title": "Box consistency through adaptive shaving", "author": ["A. Goldsztejn", "F. Goualard"], "venue": "SAC, pages 2049\u20132054", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2010}, {"title": "Constraint Based Computation of Periodic Orbits of Chaotic Dynamical Systems", "author": ["A. Goldsztejn", "L. Granvilliers", "C. Jermann", "L. Umr"], "venue": "CP, pages 774\u2013789", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Introduction to Parallel Computing", "author": ["A. Grama", "A. Gupta", "G. Karypis", "V. Kumar"], "venue": "Addison Wesley", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2003}, {"title": "Algorithm 852: RealPaver: An Interval Solver using Constraint Satisfaction Techniques", "author": ["L. Granvilliers", "F. Benhamou"], "venue": "ACM Transactions on Mathematical Software, 32(1):138\u2013156", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2006}, {"title": "Newton: Constraint Programming over Nonlinear Constraints", "author": ["P.V. Hentenryck", "L. Michel", "F. Benhamou"], "venue": "Science of Computer Programming, 30(1-2):83\u2013118", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1998}, {"title": "Scalable distributed depth-first search with greedy work stealing", "author": ["J. Jaffar", "A. Santosa", "R. Yap", "K. Zhu"], "venue": "ICTAI, pages 98\u2013103. IEEE", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2004}, {"title": "Mapping Tree-Structured Combinatorial Optimization Problems onto Parallel Computers", "author": ["R. L\u00fcling", "B. Monien", "A. Reinefeld", "S. Tsch\u00f6ke"], "venue": "Solving Combinatorial Optimization Problems in Parallel, volume 7141, pages 115\u2013144", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1996}, {"title": "Interval Analysis", "author": ["R.E. Moore"], "venue": "Prentice-Hall", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1966}, {"title": "A Parametric Framework for Cooperative Parallel Local Search", "author": ["D. Munera", "D. Diaz", "S. Abreu", "P. Codognet"], "venue": "14th European Conference on Evolutionary Computation in Combinatorial Optimisation (EvoCOP), LNCS 8600, pages 13\u201324", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "Towards Parallel Search for Optimization in Graphical Models", "author": ["L. Otten", "R. Dechter"], "venue": "ISAIM", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2010}, {"title": "Handbook of Constraint Programming", "author": ["F. Rossi", "P.V. Beek", "T. Walsh"], "venue": "volume 2 of Foundations of Artificial Intelligence. Elsevier", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2006}, {"title": "Lifeline-based global load balancing", "author": ["V. Saraswat", "P. Kambadur", "S. Kodali", "D. Grove", "S. Krishnamoorthy"], "venue": "PPoPP, pages 201\u2013212", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2011}, {"title": "Parallel search made simple", "author": ["C. Schulte"], "venue": "TRICS (Techniques foR Implementing Constraint programming Systems), pages 41\u201357", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2000}, {"title": "Solving Polynomial Systems Using a Branch and Prune Approach", "author": ["P. Van Hentenryck", "D. McAllester", "D. Kapur"], "venue": "SIAM Journal on Numerical Analysis, 34(2):797\u2013827", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1997}, {"title": "Massively Parallel Constraint Programming for Supercomputers : Challenges and Initial Results", "author": ["F. Xie", "A. Davenport"], "venue": "CPAIOR, LNCS 6140, pages 334\u2013338", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2010}, {"title": "GLB : Lifeline-based Global Load Balancing Library in X10", "author": ["W. Zhang", "O. Tardieu", "D. Grove", "B. Herta", "T. Kamada", "V. Saraswat"], "venue": "PPAA, pages 31\u201340", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2014}], "referenceMentions": [{"referenceID": 21, "context": "Numerical constraint satisfaction problems (NCSPs, Section 3) and their dedicated solvers have been successfully applied to problems in the domain of real numbers [22, 6, 5].", "startOffset": 163, "endOffset": 173}, {"referenceID": 5, "context": "Numerical constraint satisfaction problems (NCSPs, Section 3) and their dedicated solvers have been successfully applied to problems in the domain of real numbers [22, 6, 5].", "startOffset": 163, "endOffset": 173}, {"referenceID": 4, "context": "Numerical constraint satisfaction problems (NCSPs, Section 3) and their dedicated solvers have been successfully applied to problems in the domain of real numbers [22, 6, 5].", "startOffset": 163, "endOffset": 173}, {"referenceID": 6, "context": "However, the exponential computational complexity of NCSPs limits the number of tractable instances; therefore, parallelization of NCSP solvers that can scale on a number of cores is a promising approach for the further development of numerical constraint programming [7].", "startOffset": 268, "endOffset": 271}, {"referenceID": 19, "context": "[20] have proposed a global load balancing framework: a scalable scheme for the global workload distribution and termination detection of irregular parallel computation, which typically applies to the CSP solving process (Section 4.", "startOffset": 0, "endOffset": 4}, {"referenceID": 23, "context": "That framework is implemented with X10 and is available in the official distribution of X10 as the GLB library [24].", "startOffset": 111, "endOffset": 115}, {"referenceID": 7, "context": "[8] describes existing parallel CSP solvers by classifying them into three categories: searchspace splitting methods, cooperative methods for heterogeneous workers (e.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "portfolios and parallel local search)[4], and parallelization of the constraint propagation process [9].", "startOffset": 37, "endOffset": 40}, {"referenceID": 8, "context": "portfolios and parallel local search)[4], and parallelization of the constraint propagation process [9].", "startOffset": 100, "endOffset": 103}, {"referenceID": 20, "context": ", 40[21], 64[14, 4], or 256 [7, 2]) of processors, and the load balancing tends to assume a central master process, which may limit scalability [23, 2].", "startOffset": 4, "endOffset": 8}, {"referenceID": 13, "context": ", 40[21], 64[14, 4], or 256 [7, 2]) of processors, and the load balancing tends to assume a central master process, which may limit scalability [23, 2].", "startOffset": 12, "endOffset": 19}, {"referenceID": 3, "context": ", 40[21], 64[14, 4], or 256 [7, 2]) of processors, and the load balancing tends to assume a central master process, which may limit scalability [23, 2].", "startOffset": 12, "endOffset": 19}, {"referenceID": 6, "context": ", 40[21], 64[14, 4], or 256 [7, 2]) of processors, and the load balancing tends to assume a central master process, which may limit scalability [23, 2].", "startOffset": 28, "endOffset": 34}, {"referenceID": 1, "context": ", 40[21], 64[14, 4], or 256 [7, 2]) of processors, and the load balancing tends to assume a central master process, which may limit scalability [23, 2].", "startOffset": 28, "endOffset": 34}, {"referenceID": 22, "context": ", 40[21], 64[14, 4], or 256 [7, 2]) of processors, and the load balancing tends to assume a central master process, which may limit scalability [23, 2].", "startOffset": 144, "endOffset": 151}, {"referenceID": 1, "context": ", 40[21], 64[14, 4], or 256 [7, 2]) of processors, and the load balancing tends to assume a central master process, which may limit scalability [23, 2].", "startOffset": 144, "endOffset": 151}, {"referenceID": 10, "context": "A substantial amount of work exists regarding the parallelization of the branch and bound algorithm with both search-space splitting and work stealing [11, 15, 18].", "startOffset": 151, "endOffset": 163}, {"referenceID": 14, "context": "A substantial amount of work exists regarding the parallelization of the branch and bound algorithm with both search-space splitting and work stealing [11, 15, 18].", "startOffset": 151, "endOffset": 163}, {"referenceID": 17, "context": "A substantial amount of work exists regarding the parallelization of the branch and bound algorithm with both search-space splitting and work stealing [11, 15, 18].", "startOffset": 151, "endOffset": 163}, {"referenceID": 2, "context": "There exist parallel CSP/SAT solvers implemented with X10 [3, 2, 7, 17].", "startOffset": 58, "endOffset": 71}, {"referenceID": 1, "context": "There exist parallel CSP/SAT solvers implemented with X10 [3, 2, 7, 17].", "startOffset": 58, "endOffset": 71}, {"referenceID": 6, "context": "There exist parallel CSP/SAT solvers implemented with X10 [3, 2, 7, 17].", "startOffset": 58, "endOffset": 71}, {"referenceID": 16, "context": "There exist parallel CSP/SAT solvers implemented with X10 [3, 2, 7, 17].", "startOffset": 58, "endOffset": 71}, {"referenceID": 18, "context": "Numerical constraint programming is an extension of discrete constraint programming [19] and uses techniques that are inherited from interval analysis [16].", "startOffset": 84, "endOffset": 88}, {"referenceID": 15, "context": "Numerical constraint programming is an extension of discrete constraint programming [19] and uses techniques that are inherited from interval analysis [16].", "startOffset": 151, "endOffset": 155}, {"referenceID": 0, "context": ", v4), v0 = ([\u22121, 1], [\u22121, 1], [0, 1], [0, 1]), and c \u2261 (v 1 + v 2 \u2212 v3, (v1 \u2212 1) + v 2 \u2212 v4) = 0.", "startOffset": 31, "endOffset": 37}, {"referenceID": 0, "context": ", v4), v0 = ([\u22121, 1], [\u22121, 1], [0, 1], [0, 1]), and c \u2261 (v 1 + v 2 \u2212 v3, (v1 \u2212 1) + v 2 \u2212 v4) = 0.", "startOffset": 39, "endOffset": 45}, {"referenceID": 21, "context": "The branch and prune algorithm [22] is the standard solving method for NCSPs.", "startOffset": 31, "endOffset": 35}, {"referenceID": 0, "context": "In this work, we use a basic implementation HC4Revise [1] for well-constrained problems; for under-constrained problems, we use an implementation proposed in [6] that provides a verification process based on an interval Newton method combined with HC4Revise.", "startOffset": 54, "endOffset": 57}, {"referenceID": 5, "context": "In this work, we use a basic implementation HC4Revise [1] for well-constrained problems; for under-constrained problems, we use an implementation proposed in [6] that provides a verification process based on an interval Newton method combined with HC4Revise.", "startOffset": 158, "endOffset": 161}, {"referenceID": 11, "context": "Realpaver[12] has been developed as a (sequential) implementation of a NCSP solver.", "startOffset": 9, "endOffset": 13}, {"referenceID": 23, "context": "GLB is a global load balancing library [24] in the X10 standard library that implements the lifeline graph workstealing algorithm [20].", "startOffset": 39, "endOffset": 43}, {"referenceID": 19, "context": "GLB is a global load balancing library [24] in the X10 standard library that implements the lifeline graph workstealing algorithm [20].", "startOffset": 130, "endOffset": 134}, {"referenceID": 12, "context": "We solved four instances of two well-constrained (WC) problems taken from [13, 10] and six instances of two underconstrained (UC) problems taken from [6, 5].", "startOffset": 74, "endOffset": 82}, {"referenceID": 9, "context": "We solved four instances of two well-constrained (WC) problems taken from [13, 10] and six instances of two underconstrained (UC) problems taken from [6, 5].", "startOffset": 74, "endOffset": 82}, {"referenceID": 5, "context": "We solved four instances of two well-constrained (WC) problems taken from [13, 10] and six instances of two underconstrained (UC) problems taken from [6, 5].", "startOffset": 150, "endOffset": 156}, {"referenceID": 4, "context": "We solved four instances of two well-constrained (WC) problems taken from [13, 10] and six instances of two underconstrained (UC) problems taken from [6, 5].", "startOffset": 150, "endOffset": 156}], "year": 2015, "abstractText": "We present a scalable parallel solver for numerical constraint satisfaction problems (NCSPs). Our parallelization scheme consists of homogeneous worker solvers, each of which runs on an available core and communicates with others via the global load balancing (GLB) method. The parallel solver is implemented with X10 that provides an implementation of GLB as a library. In experiments, several NCSPs from the literature were solved and attained up to 516-fold speedup using 600 cores of the TSUBAME2.5 supercomputer.", "creator": "LaTeX with hyperref package"}}}