{"id": "1506.01864", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Jun-2015", "title": "Grid-based angle-constrained path planning", "abstract": "Square grids are commonly used in robotics and game development to model an agent's environment, and well known in Artificial Intelligence heuristic search algorithms (A*, JPS, Theta* etc.) are utilized for grid path planning. A lot of research in this area has been focused so far on finding the shortest paths while in many applications producing smooth paths is preferable. In our work, we study the problem of generating smooth grid paths and concentrate on angle constrained path planning. We put angle constrained path planning problem formally and present a new algorithm of solving it - LIAN. We examine LIAN both theoretically and empirically. On the theoretical side, we prove that LIAN is sound and complete (under well-defined restrictions). On the experimental side, we show that LIAN significantly outperforms competitors in ability to find solutions under tough resource constraints and in computational efficiency.", "histories": [["v1", "Fri, 5 Jun 2015 11:09:23 GMT  (694kb)", "http://arxiv.org/abs/1506.01864v1", "13 pages (12 pages: main text, 1 page: references), 7 figures, 19 references, submitted 2015-May-20 to \"The 38 German Conference on Artificial Intelligence\" (KI-2015)"], ["v2", "Tue, 25 Aug 2015 15:59:28 GMT  (414kb)", "http://arxiv.org/abs/1506.01864v2", "13 pages (12 pages: main text, 1 page: references), 7 figures, 20 references, submitted 2015-June-22 to \"The 38 German Conference on Artificial Intelligence\" (KI-2015)"]], "COMMENTS": "13 pages (12 pages: main text, 1 page: references), 7 figures, 19 references, submitted 2015-May-20 to \"The 38 German Conference on Artificial Intelligence\" (KI-2015)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["konstantin yakovlev", "egor baskin", "ivan hramoin"], "accepted": false, "id": "1506.01864"}, "pdf": {"name": "1506.01864.pdf", "metadata": {"source": "CRF", "title": "Grid-based angle-constrained path planning", "authors": ["Konstantin Yakovlev", "Egor Baskin", "Ivan Hramoin"], "emails": ["hramoin}@isa.ru"], "sections": [{"heading": null, "text": "adfa, p. 1, 2011. \u00a9 Springer-Verlag Berlin Heidelberg 2011 Model the environment of an agent and are known for heuristic search algorithms of artificial intelligence (A *, JPS, Theta * etc.), which are used for network path planning. In this area, the research so far focuses on finding the shortest paths, while in many applications smooth paths are preferred. In our work we investigate the problem of creating smooth network paths and focus on angle-restricted path planning. We formally raise the problem of angle-restricted path planning and present a new solution algorithm - LIAN. We investigate LIAN both theoretically and empirically. Theoretically, we prove that LIAN is solid and complete (with clearly defined limitations). Experimentally, we show that LIAN significantly outperforms its competitors in the ability to find solutions under hard resource constraints and in computer-aided efficiency."}, {"heading": "1 Introduction", "text": "In fact, it is so that most of them are able to abide by the rules which they have imposed on themselves. (...) It is so that they are able to understand the rules which they have given themselves. (...) It is so that they are able to break the rules. (...) \"It is so as if.\" (...) \"It is so.\" (...) \"It is so.\" (...) \"It is so.\" (...) \"It is so.\" (...) \"It is so as if.\" (...) \"It is so.\" (...) \"It is.\" (...) \"It is so.\" (...) \"It is.\" (...) \"(It is.\" (...). \"(It is.\" (...). \"(It is.\" (...). \"(It is.\" (It is.) \"(It is.\" (...). \"(It is.\" (It is. \"(...).\" (It is. \"(It is.\" It is. \"(...).\" (It is. \"(It is.\" It is. \").\" (It is. \"(It is.\" It is. \"(...).\" (It is. \")\" (It is. \"(It is.\" It is. \"(It is.\"). \"(It is.\" (It is. \").\" (It is. (It is. \"It is.\"). \"(It is.\" (It is. (It is. \").\" (It is. \"(It is.\"). \"(It is. (It is. (It is.\"). (It is. (It is. \"). (It is.\"). \"(It is. (It is. (It is.\"). (It is. (It is. \"). (It is. (It is.\"). (It is. (It is. \"). (It is. (It is.\"). (It is. \"(It is.\"). (It is. (It is. (It is. \"). (It is. (It is.\"). (It is. \"). (It is. (it."}, {"heading": "2 Angle constrained path planning problem on square grid", "text": "Two alternative types of square notations are widely used nowadays: center-based, when the positions of our agents are bound to the centers of grid cells, and corner-based, when the positions of the agents are bound to the corners (see Figure 1). In our work, we assume the center-based notation and consider a grid as a finite series of cells A, which can be represented as a matrix AMxN, where i, j - are cell position indicators (coordinates), and M, N - are grid dimensions. Each cell is either traversable or non-traversable, and the set of all traversable cells is called A +. In the case of cell coordinates, lowercase Latin characters cannot be used: a, b, c etc.A line of vision function, los: A + \u2192 true, false} is given, and an agent is allowed to move from one traversable cell to another if it is true (or, in other words, if there is an existing line between them)."}, {"heading": "3 Algorithms for the angle constrained path planning", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1 wTheta*-LA", "text": "The only difference is that you try to connect a cell to its grandfather (in order to skip the intermediate element). Kim et al. do not present a modification of the Basic Theta * [12] algorithm, which is tailored to solve the problem of network planning for an agent with angular zone constraints. Authors do not directly look at the maximum angle of the processing constraint - as described above. Instead, they investigate the case when the speed and turning circle of an agent are given and calculate angular constraints online, taking into account the length of the paths involved. However, if you replace the original method of angular constraint with the one that comes back again and again, the algorithm will apply to the angle range we are interested in, we call such an algorithm. We call such an algorithm Theta * LA stands for a \"limited angle.\" Theta * -LA is a fairly simple modification of eta *. The only difference is that Zeta * tries to connect a grandfather with a Theta *."}, {"heading": "3.2 LIAN", "text": "So LIAN (from \"limited angle\") is a new heuristic search algorithm tailored to solve angle-limited path planning problems on square cells. LIAN (from \"limited angle\") is a new heuristic search algorithm tailored to solve angle-limited path planning problems on square cells. LIAN (from \"limited angle\") relies on A * [8] state cells and calculates so-called g-values, where the g-value of a cell a, g (a), the length of the path (angle-limited path in our case) from start cells to a found cell. Besides the g-value, each cell is obligatorily characterized by the parent pointer (like Theta *, but unlike A *, where grid-limited paths are often used by parents, but not by any of them)."}, {"heading": "3.3 D-LIAN", "text": "LIAN algorithm as described above guarantees its solidity and completeness only with respect to its input parameters - \u0394. Therefore, in general, there is the possibility that some valid solutions can be overlooked if \u0394 is initialized \"in the wrong way.\" The need to initialize LIAN with fixed \u0394 also leads to another obvious problem: What exact value to choose? In crowded rooms, which specify too high a value, LIAN report will fail because visual restrictions are continuously violated, which leads to an exhaustion of the OPEN list (there will simply be no candidates to fill it). At the same time, setting a too low value leads to failure of potential successors for each cell being processed (obviously - the lower value of the cells form the discrete perimeter of the radius defining the SUCC) and thus the OPEN list will probably be exhausted again. In order to solve the problems mentioned above and to make LIAN behavior more flexible and adaptable, we propose dynamic changes."}, {"heading": "4 Experimental analysis", "text": "In fact, it is as if most of them are able to play by the rules that they have imposed on themselves. (...) In fact, it is as if they are able to outdo themselves. (...) In fact, it is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves. (...) It is as if they are able to outdo themselves."}, {"heading": "5 Conclusions and future work", "text": "In this thesis, we investigated the angle-restricted planning problem for square networks and presented a new parameterized algorithm - LIAN (and its variant D-LIAN) - to solve this problem. We have proven that LIAN is solid and complete (in terms of its input parameter - \u0394). We have investigated LIAN experimentally in various modelled outdoor navigation scenarios and have shown that it significantly exceeds existing analogies: it solves more angle-restricted route planning tasks than its competitors and thereby consumes less storage and processing time. In the future, we intend to develop more advanced techniques of dynamic adjustment aimed at further improving the LIAN performance. Another appealing research direction is the evaluation of LIAN in real environments, e.g. the implementation of LIAN as part of the intelligent control system that supports the navigation of a mobile robot or unmanned aerial work in the FBR 0715, which was partially automated by this research group."}], "references": [{"title": "An algorithm for planning collision-free paths among polyhedral obstacles", "author": ["T. Lozano-P\u00e9rez", "M.A. Wesley"], "venue": "Communications of the ACM,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1979}, {"title": "Roadmap-based path planning-Using the Voronoi diagram for a clearance-based shortest path", "author": ["P. Bhattacharya", "M.L. Gavrilova"], "venue": "Robotics & Automation Magazine,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "Navigation queries from triangular meshes", "author": ["M. Kallmann"], "venue": "In Motion in Games (pp", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Grid-based path-finding", "author": ["P. Yap"], "venue": "Proceedings of 15th Conference of the Canadian Society for Computational Studies of Intelligence,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2002}, {"title": "Benchmarks for grid-based pathfinding", "author": ["N.R. Sturtevant"], "venue": "Computational Intelligence and AI in Games, IEEE Transactions on,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Using occupancy grids for mobile robot perception and navigation", "author": ["A. Elfes"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1989}, {"title": "A note on two problems in connexion with graphs", "author": ["E.W. Dijkstra"], "venue": "Numerische mathematik,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1959}, {"title": "A formal basis for the heuristic determination of minimum cost paths", "author": ["P.E. Hart", "N.J. Nilsson", "B. Raphael"], "venue": "IEEE Transactions on Systems Science and Cybernetics,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1968}, {"title": "ARA*: Anytime A* with Provable Bounds on Sub-Optimality, Advances in Neural Information Processing Systems 16 (NIPS)", "author": ["M. Likhachev", "G. Gordon", "S. Thrun"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "Near optimal hierarchical path finding", "author": ["A. Botea", "M. Muller", "J. Schaeffer"], "venue": "Journal of game development,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2004}, {"title": "Any-Angle Path Planning on Grids", "author": ["A. Nash", "K. Daniel", "S. Koenig", "Felner", "A. 2007. Theta"], "venue": "In Proceedings of the National Conference on Artificial Intelligence", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1177}, {"title": "Online graph pruning for pathfinding on grid maps", "author": ["D. Harabor", "A. Grastien"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "Real-time motion planning with applications to autonomous urban driving", "author": ["Y. Kuwata", "S. Karaman", "J. Teo", "E. Frazzoli", "J.P. How", "G. Fiore"], "venue": "Control Systems Technology, IEEE Transactions on,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2009}, {"title": "Improving efficiency in any-angle path-planning algorithms", "author": ["P. Munoz", "M. Rodriguez-Moreno"], "venue": "In Intelligent Systems (IS),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2012}, {"title": "Angular rate-constrained path planning algorithm for unmanned surface vehicles", "author": ["H. Kim", "D. Kim", "J.U. Shin", "H. Myung"], "venue": "Ocean Engineering,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2014}, {"title": "Algorithm for computer control of a digital plotter", "author": ["J.E. Bresenham"], "venue": "IBM Systems journal,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1965}, {"title": "Algorithms of conic generation", "author": ["M.L.V. Pitteway"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1985}], "referenceMentions": [{"referenceID": 0, "context": "Among the most commonly used (for 2D path planning) graph models one can name visibility graphs [1], Voronoi diagrams [2], navigation meshes [3], regular grids [4].", "startOffset": 96, "endOffset": 99}, {"referenceID": 1, "context": "Among the most commonly used (for 2D path planning) graph models one can name visibility graphs [1], Voronoi diagrams [2], navigation meshes [3], regular grids [4].", "startOffset": 118, "endOffset": 121}, {"referenceID": 2, "context": "Among the most commonly used (for 2D path planning) graph models one can name visibility graphs [1], Voronoi diagrams [2], navigation meshes [3], regular grids [4].", "startOffset": 141, "endOffset": 144}, {"referenceID": 3, "context": "Among the most commonly used (for 2D path planning) graph models one can name visibility graphs [1], Voronoi diagrams [2], navigation meshes [3], regular grids [4].", "startOffset": 160, "endOffset": 163}, {"referenceID": 4, "context": "First, they appear naturally in many virtual environments (computer games are the most obvious example [5]), e.", "startOffset": 103, "endOffset": 106}, {"referenceID": 5, "context": "Even in real world scenarios, say in robotics, it is the grids that are commonly used as spatial models [6].", "startOffset": 104, "endOffset": 107}, {"referenceID": 6, "context": "After the graph is constructed the search for a path on it can be carried out by the well known Dijkstra\u2019s algorithm [7] or A* algorithm [8] (which is the heuristic modification of Dijkstra) or many of their derivatives: ARA* [9], HPA* [10], R* [11], Theta* [12], JPS [13] to name a few.", "startOffset": 117, "endOffset": 120}, {"referenceID": 7, "context": "After the graph is constructed the search for a path on it can be carried out by the well known Dijkstra\u2019s algorithm [7] or A* algorithm [8] (which is the heuristic modification of Dijkstra) or many of their derivatives: ARA* [9], HPA* [10], R* [11], Theta* [12], JPS [13] to name a few.", "startOffset": 137, "endOffset": 140}, {"referenceID": 8, "context": "After the graph is constructed the search for a path on it can be carried out by the well known Dijkstra\u2019s algorithm [7] or A* algorithm [8] (which is the heuristic modification of Dijkstra) or many of their derivatives: ARA* [9], HPA* [10], R* [11], Theta* [12], JPS [13] to name a few.", "startOffset": 226, "endOffset": 229}, {"referenceID": 9, "context": "After the graph is constructed the search for a path on it can be carried out by the well known Dijkstra\u2019s algorithm [7] or A* algorithm [8] (which is the heuristic modification of Dijkstra) or many of their derivatives: ARA* [9], HPA* [10], R* [11], Theta* [12], JPS [13] to name a few.", "startOffset": 236, "endOffset": 240}, {"referenceID": 10, "context": "After the graph is constructed the search for a path on it can be carried out by the well known Dijkstra\u2019s algorithm [7] or A* algorithm [8] (which is the heuristic modification of Dijkstra) or many of their derivatives: ARA* [9], HPA* [10], R* [11], Theta* [12], JPS [13] to name a few.", "startOffset": 258, "endOffset": 262}, {"referenceID": 11, "context": "After the graph is constructed the search for a path on it can be carried out by the well known Dijkstra\u2019s algorithm [7] or A* algorithm [8] (which is the heuristic modification of Dijkstra) or many of their derivatives: ARA* [9], HPA* [10], R* [11], Theta* [12], JPS [13] to name a few.", "startOffset": 268, "endOffset": 272}, {"referenceID": 12, "context": "The most common way to incorporate agent\u2019s dynamic constraints into path planning process is to extend the graph model \u2013 see [14] for example \u2013 but this leads to tremendous growth of the search space (which now contains not only the spatial information) and thus finding a path becomes burdensome and computationally ineffective.", "startOffset": 125, "endOffset": 129}, {"referenceID": 9, "context": "For example A*-PS [10] runs A*-search on a grid and after it is finished performs a preprocessing step to eliminate intermediate path elements.", "startOffset": 18, "endOffset": 22}, {"referenceID": 10, "context": "Theta* (or more precise \u2013 Basic Theta*) [12] uses the same idea \u2013 intermediate grid elements skipping \u2013 but it performs the smoothing procedure online, e.", "startOffset": 40, "endOffset": 44}, {"referenceID": 13, "context": "In [15] a modification of Basic Theta* (also applicable to A*-PS) algorithm is presented which uses special angle-based heuristic to focus the search in order to construct more straightforward paths to the goal.", "startOffset": 3, "endOffset": 7}, {"referenceID": 14, "context": "In [16] another modification of Basic Theta* \u2013 weighted angular rate constrained Theta* (wARC-Theta*) - is described.", "startOffset": 3, "endOffset": 7}, {"referenceID": 15, "context": "In our work, as in many others, we use well-known in computer graphics Bresenham algorithm [17] to detect if lineof-sight between two cells exist or not.", "startOffset": 91, "endOffset": 95}, {"referenceID": 16, "context": "\u0394-section is such section e=\uf0e1aij, alk\uf0f1 that it\u2019s endpoint, alk, belongs to CIRCLE(aij, \u0394), where CIRCLE is the set of cells identified by the well-known in computer graphics Midpoint algorithm [18] (which is a modification of the abovementioned Brezenham\u2019s algorithm intended for drawing \u201cdiscrete circumferences\u201d) \u2013 see figure 2.", "startOffset": 193, "endOffset": 197}, {"referenceID": 14, "context": "In [16] H.", "startOffset": 3, "endOffset": 7}, {"referenceID": 10, "context": "present a modification of Basic Theta* [12] algorithm tailored to solve grid path planning problem for an agent with angular rate constraints.", "startOffset": 39, "endOffset": 43}, {"referenceID": 14, "context": "In the original work [16] H.", "startOffset": 21, "endOffset": 25}, {"referenceID": 7, "context": "LIAN relies on A* [8] state-space search strategy, uses line-of-sight checks as Theta* [12] and exploits the idea of multiple parents as R* [11].", "startOffset": 18, "endOffset": 21}, {"referenceID": 10, "context": "LIAN relies on A* [8] state-space search strategy, uses line-of-sight checks as Theta* [12] and exploits the idea of multiple parents as R* [11].", "startOffset": 87, "endOffset": 91}], "year": 2015, "abstractText": "Square grids are commonly used in robotics and game development to model an agent\u2019s environment, and well known in Artificial Intelligence heuristic search algorithms (A*, JPS, Theta* etc.) are utilized for grid path planning. A lot of research in this area has been focused so far on finding the shortest paths while in many applications producing smooth paths is preferable. In our work, we study the problem of generating smooth grid paths and concentrate on angle constrained path planning. We put angle constrained path planning problem formally and present a new algorithm of solving it \u2013 LIAN. We examine LIAN both theoretically and empirically. On the theoretical side, we prove that LIAN is sound and complete (under well-defined restrictions). On the experimental side, we show that LIAN significantly outperforms competitors in ability to find solutions under tough resource constraints and in computational efficiency.", "creator": "Microsoft\u00ae Word 2013"}}}