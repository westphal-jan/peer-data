{"id": "1506.05198", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Jun-2015", "title": "SAT-based Analysis of Large Real-world Feature Models is Easy", "abstract": "Modern conflict-driven clause-learning (CDCL) Boolean SAT solvers provide efficient automatic analysis of real-world feature models (FM) of systems ranging from cars to operating systems. It is well-known that solver-based analysis of real-world FMs scale very well even though SAT instances obtained from such FMs are large, and the corresponding analysis problems are known to be NP-complete. To better understand why SAT solvers are so effective, we systematically studied many syntactic and semantic characteristics of a representative set of large real-world FMs. We discovered that a key reason why large real-world FMs are easy-to-analyze is that the vast majority of the variables in these models are unrestricted, i.e., the models are satisfiable for both true and false assignments to such variables under the current partial assignment. Given this discovery and our understanding of CDCL SAT solvers, we show that solvers can easily find satisfying assignments for such models without too many backtracks relative to the model size, explaining why solvers scale so well. Further analysis showed that the presence of unrestricted variables in these real-world models can be attributed to their high-degree of variability. Additionally, we experimented with a series of well-known non-backtracking simplifications that are particularly effective in solving FMs. The remaining variables/clauses after simplifications, called the core, are so few that they are easily solved even with backtracking, further strengthening our conclusions.", "histories": [["v1", "Wed, 17 Jun 2015 04:25:39 GMT  (176kb)", "http://arxiv.org/abs/1506.05198v1", null], ["v2", "Thu, 18 Jun 2015 02:57:03 GMT  (223kb)", "http://arxiv.org/abs/1506.05198v2", null], ["v3", "Wed, 29 Jul 2015 02:54:29 GMT  (276kb)", "http://arxiv.org/abs/1506.05198v3", null]], "reviews": [], "SUBJECTS": "cs.SE cs.AI", "authors": ["jia hui liang", "vijay ganesh", "venkatesh raman", "krzysztof czarnecki"], "accepted": false, "id": "1506.05198"}, "pdf": {"name": "1506.05198.pdf", "metadata": {"source": "CRF", "title": "SAT-based Analysis of Large Real-world Feature Models is Easy", "authors": ["Jia Hui Liang", "Vijay Ganesh", "Krzysztof Czarnecki", "Venkatesh Raman"], "emails": ["permissions@acm.org."], "sections": [{"heading": null, "text": "ar Xiv: 150 6.05 198v 1 [cs.S E] 17 June 20Permission to make digital or printed copies of all or part of this work for personal or commercial use is granted free of charge, provided that copies are not made or distributed for profit or commercial purposes and that copies bear this notice and the complete quotation on the first page. Copyrights for components of this work owned by others than the ACM must be acknowledged. Credit abstraction is permitted. Copying by other means or republication on servers or redistribution on lists requires prior express permission and / or a fee. Permissions at permissions @ acm.org.SPLC 2015, July 20-24, Nashville, TN, USA c \u00a9 2015 ACM. ISBN 978-1-4503-3613-0 / 15 / 07..... $15.00DOI: http: / / www.acm.org.SPLC 2015, July 20-24, Nashville, TN, USA c \u00a9 2015 ACM. ISBN 978-1-4503-3613-0 / 15 / 07..... $15.00DOI: http: / www.acm.org.SPLC 2015, July 20-24, 2015, July 20-24, Nashville, 2015, Nashville, TN, TN, USA c \u00a9 2015."}, {"heading": "1. INTRODUCTION", "text": "This is a real problem, which in fact contributes to the automatic analysis of relevant features to determine whether the relevant features are reusable, and unused features are removed to reduce the complexity of the system under design [9]. Promoting the reuse of features shortens the time it takes to deploy new products and reduces production costs. Such models can be automatically analyzed to determine whether the use of conflict-driven clause-learning (CDCL) Boolean SAT solutions is necessary to detect inconsistencies or flaws in the design process of a product. Modern CDCL Boolean SAT solutions are known to solve many major real-world problems derived from a variety of domains such as software testing, program analysis, and hardware verification."}, {"heading": "2. BACKGROUND", "text": "This section provides the necessary background on FMs and the use of SAT solvers in their analysis."}, {"heading": "2.1 Feature Models (FM)", "text": "The terms node and attribute are used interchangeably. Child nodes have two variants: mandatory (the child attribute is present if and only if the parent attribute is present) and optional (if the parent attribute is present, then the child attribute is optional, otherwise it is missing). Parent nodes can also restrict their children with attribute groups: or (if the parent attribute is present, then at least one of its child attribute is present) and alternatively (if the parent attribute is present, then exactly one of its child characteristics is present). These are the structural constraints between the child and the parents. Structural constraints are often not sufficient to enforce the integrity of the model; in this case cross-tree constraints are necessary. Cross-tree constraints have no constraints like structural constraints and can be applied to any attribute, regardless of its position in the tree part of the model. In this paper, cross-tree constraints are used in cases A and B (the usual points)."}, {"heading": "2.2 SAT-based Analysis of Feature Models", "text": "The objective of SAT-based analysis of FMs is to find an assignment to the characteristics, so that the structural and cross-tree constraints are met. It turns out that there is a natural reduction of characteristic models to SAT [2]. Each characteristic is assigned to a Boolean variable, the variable is true / false when the characteristic is selected / deselected. Structural and cross-border constraints are encoded as propositional logic formulas. The SAT solver can answer questions such as whether the characteristic model does not encode products. The solver can also be adapted to the product configuration: Given a number of characteristics that must be present and another set of characteristics that must be missing, the solver will find a product that meets the requirement or answer that no such product does not exist. Optimization is also possible, such as finding the product with the highest performance, although we need optimization models, may not include multiple attributes, solver calls to a SAT or blasting the attributes may not be included in the formula."}, {"heading": "3. EXPERIMENTS AND RESULTS", "text": "In this section, we describe the experiments we have conducted to better understand the effectiveness of SAT-based analysis of FMs. We assume that the reader is familiar with the translation of FMs into Boolean formulas in the subjunctive normal form (CNF), which is explained in many papers [6, 7]."}, {"heading": "3.1 Experimental Setup and Benchmarks", "text": "All experiments were carried out on 3 different comparable systems, whose specifications are as follows: Linux 64-bit machines with 2.8 GHz processors and 32 GB RAM. Table 1 lists 15 real feature models translated from an essay by Berger et al. [8] into CNF. The number of variables in these models ranges from 544 to 62470, and the number of clauses ranges from 1020 to 343944. Three of the models, the aforementioned 2.6. *, represent the x86 architecture as abstracted in the Linux kernel. A clause is binary if it contains exactly 2 letters. If each clause is binary, then the satisfaction problem is called 2-SAT and it is solvable in polynomial time. A clause is horn / anti-horn if it contains at most a positive / negative letter combination. If each clause is horn, then the satisfaction problem is called impulse model."}, {"heading": "3.2 Experiment: How easy are real-world FMs", "text": "Figure 1 shows the solving times of the real feature models with the Sat4j solver [16] (version 2.3.4). With the default settings, solving the most difficult feature model took a little more than a second. The size of these feature models is clearly not a problem for Sat4j. Modern SAT solvers have (at least) 4 main features that contribute to their performance: conflict-driven clause learning with backjumping, random restarts of the search, Boolean Constraint Propagation (BCP) with rotten data structures and conflict-based adaptive branching called VSIDS [15]. Many modern solvers also implement simplification techniques before processing. Sat4j implements all of these features with the exception of simplifications before processing. Figure 1 shows the runtime after disabling 3 of these features, but the runtimes have not suffered significantly. BCP is surprisingly effective for real feature models."}, {"heading": "3.3 Experiment: Hard artificial FMs", "text": "The question we asked in this experiment was whether it is possible to construct hard artificial FMs, and if so, what their structural characteristics would be. In fact, we were able to construct small feature models that are very difficult for SAT solvers. The procedure we used to create such models is as follows: 1. First, we randomly create a small and hard CNF formula. One such method is the generation of random 3-SAT with a sentence density of 4.25. It is well known that such random instances for a CDCL-SAT solver are difficult to solve [1]. We then used such generated problems as the cross-tree constraints for our hard FMs.2. Second, we create a small tree with only optional characteristics. The variables that occur in the cross-tree constraints of the first step are the leaves of the tree. The key idea in generating such FMs is that for each pair of variable constraints, we do not create a large tree boundary between the two constraints, because the large tree boundary is relatively small."}, {"heading": "3.4 Experiment: Variability in real-world FMs", "text": "We have hypothesized that it is easy to find a solution when the solver has a variety of solutions to choose from. We have run the feature models with sharpSAT [28], a tool for counting the exact number of solutions. The results are in Table 2. We have found that real FMs have a very high variability, i.e. that there are many solutions.Variability is the reason for the existence of feature models. Feature groups and optional features increase variability in the model, and the results in Table 2 suggest that variability grows exponentially with the size of the model measured in the number of variables. High variability in real FMSs should have structural properties that make them easy to solve."}, {"heading": "3.5 Experiment: Why solvers perform very few backtracks for real-world FMs", "text": "The aim of this experiment was to determine why there is so little feedback in the real world. First, when a solver has to make a new decision, he must guess the correct allocation to such a variable. Second, he must make an unrestricted allocation to such a variable."}, {"heading": "3.6 Experiment: Simplifications", "text": "In fact, it is the case that most people are able to abide by the rules that they have imposed on themselves. (...) In fact, it is the case that they are able to abide by the rules. (...) In fact, it is the case that they are able to abide by the rules. (...) It is not the case that they abide by the rules. (...) It is the case that they abide by the rules. (...) It is the case that they abide by the rules. (...) It is the case that they abide by the rules. (...) It is the case that they abide by the rules. (...) It is the case that they abide by the rules. (...) (...) (...) ((...) (...) () (...) () ((...) () (()) (()) (()) (()) (()) () () () () () ()) () () () () () () ()) () () () () () () () () () () () ()) () () () () () () () () () ()) () () ()) () () () () ()) () () () () ()) () () () () ()) () () () () () () () () ()) () () () () () () () () () () () () () () () () () () () () () () () () () () () (() () () () () () () (() () () (() () () () (() (() (() (() () ((() () () (() () () (() () () () (() () (((() () (() () () ((() () () ((() () (() ((() () () ((("}, {"heading": "3.7 Experiment: Treewidth of real-world FMs", "text": "Experiments by Pohl et al. [22] show that the tree width of the CNF representation of randomly generated FMs is strongly correlated with their respective solution times. We repeat the experiment on the real FMs to see if the correlation exists. In our experiments, the tree width is calculated by finding a lower and upper limit because the exact tree width calculation is too expensive to calculate. The longer the calculation goes on, the tighter the limits. We used the same algorithm and the same package as Pohl et al. We gave the algorithm a time span of 3600 seconds and 24 GB heap storage, up to 1000 seconds and 12 GB in the original experiment by Pohl et al. The calculation missed any upper limit of 9 FMs, and we ignore these results because we do not know how close the correlation between the two is."}, {"heading": "3.8 Interpretation of Results", "text": "From our experiments it is clear that the vast majority of variables in real FMs are unlimited and can be solved / analyzed by corresponding simplification or BCP in the time polynomial in the number of variables of the correlated SAT instance. What remains after BCP or simplification is a very small set of clauses (small in relation to the number of variables in the input SAT formula), which we call the core that can be solved with a CDCL solver with very few traces."}, {"heading": "4. FINDING RESTRICTED VARIABLES AND CONNECTIONS TO BACKDOORS", "text": "As defined in the introduction, we call a variable v of a satisfactory formula CNF \u03c6 unlimited in relation to a partial assignment S, if S leads to a satisfactory assignment to \u03c6 with v = 0 and a satisfactory assignment with v = 1. We call a variable unlimited (without reference to a partial assignment) if there is a partial assignment S for which the variable is unlimited and we call it restricted otherwise. Note that if a CDCL algorithm correctly selects the partial assignment S, then it will not resort to an unlimited variable, and we believe that this is what happens in the solvers when there are many unlimited variables, as there are overwhelmingly many. Here, we find interesting connections between this parameter (the number of constrained variables) and the well-studied parameters of the number of variables. Let (C) be a class of CNF formulas."}, {"heading": "5. THREATS TO VALIDITY OF EXPERIMENTAL METHODOLOGY AND RESULTS", "text": "In this section, we address threats to the validity of our experimental methodology and results. Validity of FMs for experiments: The FMs studied are large real configuration models [8] based primarily on software product lines. This collection includes all large real-world models capable of producing some of the most complex configuration conditions. [5] Having taken into account the complexity of these models, we believe that these results are likely to be held for many large real-world models."}, {"heading": "6. RELATED WORK", "text": "This year it is so far that it is only a matter of time before it will be so far, until it is so far, until it is so far."}, {"heading": "7. CONCLUSIONS", "text": "In this paper, with strong experimental support, we have provided an explanation for the scalability of SAT solvers on large real FMs. The explanation for this is that the overwhelming majority of variables in real FMs are unlimited and solvers tend not to recede with the presence of such variables. We argue that the reason for the presence of a large number of unlimited variables in real FMs has to do with the high variability in such models. Furthermore, we have found that if we turn off all heuristics in modern SAT solvers, except Boolean constant propagation (BCP) and backjumping (no clause learning), the solver does not suffer any deterioration in performance while solving FMs. Furthermore, we have performed a number of simplifications with a significant reduction in the size of instances. In fact, a majority of the models have been solved with these polynomial time simplifications, so that most variables in real FMs can be solved by real visions."}, {"heading": "8. ACKNOWLEDGEMENT", "text": "We thank Saket Saurabh for pointing out the connection to the dual strong backdoors in Theorem 4.0.1."}, {"heading": "9. REFERENCES", "text": "[1] A. Balint, A. Belov, M. Ja \ufffd rvisalo, and C. Sinz.H. Rubley. Overview and Analysis of the SAT Challenge 2012 Solver competition. Artificial Intelligence, 223: 120-155, 2015. [2] D. Batory. Feature models, grammars, and propositional formulas. In Proceedings of the 9th International Conference on Software Product Lines, SPLC '05, pp. 7-20, Berlin, 2010. [4] D. Benavides, S. Segura, and A. Ruiz-Corte \"s. Automated analysis of feature models 20 years later: A literature review. Information Systems, 35 (6): 615 - 636, 2010. D. Benavides, S. Segura, P. Trinidad, and A. Ruiz-Corte."}], "references": [{"title": "Overview and analysis of the SAT Challenge 2012 solver competition", "author": ["A. Balint", "A. Belov", "M. J\u00e4rvisalo", "C. Sinz"], "venue": "Artificial Intelligence,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Feature models, grammars, and propositional formulas", "author": ["D. Batory"], "venue": "In Proceedings of the 9th International Conference on Software Product Lines,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Automated analysis of feature models 20 years later: A literature review", "author": ["D. Benavides", "S. Segura", "A. Ruiz-Cort\u00e9s"], "venue": "Information Systems,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Ruiz-Cort\u00e9s. A first step towards a framework for  the automated analysis of feature models", "author": ["D. Benavides", "S. Segura", "P. Trinidad"], "venue": "In Managing Variability for Software Product Lines: Working With Variability Mechanisms,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "Variability mechanisms in software ecosystems", "author": ["T. Berger", "R.-H. Pfeiffer", "R. Tartler", "S. Dienst", "K. Czarnecki", "A. Wasowski", "S. She"], "venue": "Information and Software Technology,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "A survey of variability modeling in industrial practice", "author": ["T. Berger", "R. Rublack", "D. Nair", "J.M. Atlee", "M. Becker", "K. Czarnecki", "A. Wasowski"], "venue": "In Proceedings of the Seventh International Workshop on Variability Modelling of Software-intensive Systems, VaMoS", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Variability modeling in the real: A perspective from the operating systems domain", "author": ["T. Berger", "S. She", "R. Lotufo", "A. Wasowski", "K. Czarnecki"], "venue": "In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2010}, {"title": "A study of variability models and languages in the systems software domain", "author": ["T. Berger", "S. She", "R. Lotufo", "A. Wasowski", "K. Czarnecki"], "venue": "IEEE Trans. Softw. Eng.,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Generative Programming: Methods, Tools, and Applications", "author": ["K. Czarnecki", "U.W. Eisenecker"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2000}, {"title": "Backdoors in the context of learning", "author": ["B. Dilkina", "C. Gomes", "A. Sabharwal"], "venue": "Theory and Applications of Satisfiability Testing - SAT 2009,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "Backdoors to satisfaction. In The Multivariate Algorithmic Revolution and Beyond, pages 287\u2013317", "author": ["S. Gaspers", "S. Szeider"], "venue": "springer,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "A theory for feature models in alloy", "author": ["R. Gheyi", "T. Massoni", "P. Borba"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2006}, {"title": "Feature-oriented domain analysis (FODA) feasibility study", "author": ["K.C. Kang", "S.G. Cohen", "J.A. Hess", "W.E. Novak", "A.S. Peterson"], "venue": "Technical report,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1990}, {"title": "Empirical study of the anatomy of modern SAT solvers", "author": ["H. Katebi", "K.A. Sakallah", "J. a. P. Marques-Silva"], "venue": "In Proceedings of the 14th International Conference on Theory and Application of Satisfiability Testing,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2011}, {"title": "Sat4j-a satisfiability library for java", "author": ["D. Le Berre", "A. Parrain", "M. Baron", "J. Bourgeois", "Y. Irrilo", "F. Fontaine", "F. Laihem", "O. Roussel", "L. Sais"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2006}, {"title": "Treewidth in industrial SAT benchmarks", "author": ["R. Mateescu"], "venue": "Technical report, Microsoft Research,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2011}, {"title": "SAT-based analysis of feature models is easy", "author": ["M. Mendonca", "A. Wasowski", "K. Czarnecki"], "venue": "In Proceedings of the 13th International Software Product  Line Conference,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2009}, {"title": "Efficient compilation techniques for large scale feature models", "author": ["M. Mendonca", "A. Wasowski", "K. Czarnecki", "D. Cowan"], "venue": "In Proceedings of the 7th International Conference on Generative Programming and Component Engineering,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2008}, {"title": "Upper and lower bounds for weak backdoor set detection", "author": ["N. Misra", "S. Ordyniak", "V. Raman", "S. Szeider"], "venue": "In Theory and Applications of Satisfiability Testing\u2013SAT", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2013}, {"title": "A performance comparison of contemporary algorithmic approaches for automated analysis operations on feature models", "author": ["R. Pohl", "K. Lauenroth", "K. Pohl"], "venue": "In Proceedings of the 2011 26th IEEE/ACM International Conference on Automated Software Engineering,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2011}, {"title": "Measuring the structural complexity of feature models", "author": ["R. Pohl", "V. Stricker", "K. Pohl"], "venue": "In Automated Software Engineering (ASE),", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2013}, {"title": "Automated generation of computationally hard feature models using evolutionary algorithms", "author": ["S. Segura", "J.A. Parejo", "R.M. Hierons", "D. Benavides", "A.R. Cort\u00e9s"], "venue": "Expert Syst. Appl.,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}, {"title": "Is the linux kernel a software product line", "author": ["J. Sincero", "H. Schirmeier", "W. Schr\u00f6der-Preikschat", "O. Spinczyk"], "venue": "In Proc. SPLC Workshop on Open Source Software and Product Lines,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2007}, {"title": "Backdoor sets for DLL subsolvers", "author": ["S. Szeider"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2005}, {"title": "Feature consistency in compile-time-configurable system software: Facing the linux 10,000 feature problem", "author": ["R. Tartler", "D. Lohmann", "J. Sincero", "W. Schr\u00f6der-Preikschat"], "venue": "In Proceedings of the Sixth Conference on Computer Systems,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2011}, {"title": "Reasoning about edits to feature models", "author": ["T. Thum", "D. Batory", "C. Kastner"], "venue": "In Proceedings of the 31st International Conference on Software Engineering,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2009}, {"title": "sharpsat: Counting models with advanced component caching and implicit bcp", "author": ["M. Thurley"], "venue": "In Proceedings of the 9th International Conference on Theory and Applications of Satisfiability Testing,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2006}, {"title": "Backdoors to typical case complexity", "author": ["R. Williams", "C.P. Gomes", "B. Selman"], "venue": "In Proceedings of the 18th International Joint Conference on Artificial Intelligence,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2003}], "referenceMentions": [{"referenceID": 12, "context": "Feature models (FM) are widely used to represent the variablility and commonality in product lines and reusable software, first introduced in 1990 [14].", "startOffset": 147, "endOffset": 151}, {"referenceID": 8, "context": "The process of feature modeling helps to ensure that relevant features are reusable, and unused features are removed to lower the complexity of the system under design [9].", "startOffset": 168, "endOffset": 171}, {"referenceID": 1, "context": "More recently, inspired by the success of SAT solvers in other domains, many researchers proposed the use of solvers to analyze feature models [2, 3, 4].", "startOffset": 143, "endOffset": 152}, {"referenceID": 2, "context": "More recently, inspired by the success of SAT solvers in other domains, many researchers proposed the use of solvers to analyze feature models [2, 3, 4].", "startOffset": 143, "endOffset": 152}, {"referenceID": 3, "context": "More recently, inspired by the success of SAT solvers in other domains, many researchers proposed the use of solvers to analyze feature models [2, 3, 4].", "startOffset": 143, "endOffset": 152}, {"referenceID": 9, "context": "Our findings are consistent with the idea of backdoors posited by theorists to explain the power of SAT solvers [10, 29, 25, 20] on real-world SAT instances.", "startOffset": 112, "endOffset": 128}, {"referenceID": 27, "context": "Our findings are consistent with the idea of backdoors posited by theorists to explain the power of SAT solvers [10, 29, 25, 20] on real-world SAT instances.", "startOffset": 112, "endOffset": 128}, {"referenceID": 23, "context": "Our findings are consistent with the idea of backdoors posited by theorists to explain the power of SAT solvers [10, 29, 25, 20] on real-world SAT instances.", "startOffset": 112, "endOffset": 128}, {"referenceID": 18, "context": "Our findings are consistent with the idea of backdoors posited by theorists to explain the power of SAT solvers [10, 29, 25, 20] on real-world SAT instances.", "startOffset": 112, "endOffset": 128}, {"referenceID": 20, "context": "[22], we performed experiments to see if the treewidth of graphs of the formulas correlates with solver running time.", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "Additionally, we want to emphasize that all the FMs in our experiments are obtained from a diverse set of large real-world applications [6, 7], including a large FM based off the Linux kernel configuration model.", "startOffset": 136, "endOffset": 142}, {"referenceID": 6, "context": "Additionally, we want to emphasize that all the FMs in our experiments are obtained from a diverse set of large real-world applications [6, 7], including a large FM based off the Linux kernel configuration model.", "startOffset": 136, "endOffset": 142}, {"referenceID": 1, "context": "reduction from feature models to SAT [2].", "startOffset": 37, "endOffset": 40}, {"referenceID": 11, "context": "Many specialized solvers [12, 13, 27] for FM analysis have been built that use SAT solvers as a backend.", "startOffset": 25, "endOffset": 37}, {"referenceID": 25, "context": "Many specialized solvers [12, 13, 27] for FM analysis have been built that use SAT solvers as a backend.", "startOffset": 25, "endOffset": 37}, {"referenceID": 5, "context": "We assume the reader is familiar with the translation of FMs to Boolean formulas in conjunctive normal form (CNF), which is explained in many papers [6, 7].", "startOffset": 149, "endOffset": 155}, {"referenceID": 6, "context": "We assume the reader is familiar with the translation of FMs to Boolean formulas in conjunctive normal form (CNF), which is explained in many papers [6, 7].", "startOffset": 149, "endOffset": 155}, {"referenceID": 7, "context": "[8].", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[8], these real-world feature models have significantly different characteristics than those of the randomly gener-", "startOffset": 0, "endOffset": 3}, {"referenceID": 16, "context": "ated models used in previous studies [18, 22].", "startOffset": 37, "endOffset": 45}, {"referenceID": 20, "context": "ated models used in previous studies [18, 22].", "startOffset": 37, "endOffset": 45}, {"referenceID": 16, "context": "[18] generated models with cross-tree constraint ratio (CTCR) of maximum 30%, i.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "higher CTCR, ranging from 46% to 96% [8].", "startOffset": 37, "endOffset": 40}, {"referenceID": 14, "context": "Figure 1 shows the solving times of the real-world feature models with the Sat4j solver [16] (version 2.", "startOffset": 88, "endOffset": 92}, {"referenceID": 13, "context": "ing lazy data structures, and conflict-based adaptive branching called VSIDS [15].", "startOffset": 77, "endOffset": 81}, {"referenceID": 0, "context": "It is well-known that such random instances are hard for a CDCL SAT solver to solve [1].", "startOffset": 84, "endOffset": 87}, {"referenceID": 26, "context": "We ran the feature models with sharpSAT [28], a tool for counting the exact number of solutions.", "startOffset": 40, "endOffset": 44}, {"referenceID": 20, "context": "[22] show treewidth of the CNF representation of randomly-generated FMs to be strongly correlated with their corresponding solving times.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": ", that treewidth of input Boolean formulas is not strongly correlated with running time of solvers and is not indicative of an instance\u2019s hardness [17].", "startOffset": 147, "endOffset": 151}, {"referenceID": 27, "context": "Recall [29, 11] that a strong (C) backdoor of a Boolean formula F is a set B of variables such that every assignment to the set B of variables (and simplification of F with the assignment) results in a formula in (C).", "startOffset": 7, "endOffset": 15}, {"referenceID": 10, "context": "Recall [29, 11] that a strong (C) backdoor of a Boolean formula F is a set B of variables such that every assignment to the set B of variables (and simplification of F with the assignment) results in a formula in (C).", "startOffset": 7, "endOffset": 15}, {"referenceID": 1, "context": "By a reduction from the Hitting Set problem, it can be shown that finding weak E backdoor of size at most k is not only NP -complete, but complete for the parameterized complexity class W [2] for general CNF formulas.", "startOffset": 188, "endOffset": 191}, {"referenceID": 10, "context": "As we could not find a theorem for this in the backdoor literature [11, 20, 25] we give a theorem for completeness.", "startOffset": 67, "endOffset": 79}, {"referenceID": 18, "context": "As we could not find a theorem for this in the backdoor literature [11, 20, 25] we give a theorem for completeness.", "startOffset": 67, "endOffset": 79}, {"referenceID": 23, "context": "As we could not find a theorem for this in the backdoor literature [11, 20, 25] we give a theorem for completeness.", "startOffset": 67, "endOffset": 79}, {"referenceID": 1, "context": "Determining if a given formula on n variables has a weak E backdoor of size at most k is W [2]complete for general formulas, and is fixed-parameter tractable with an O(d) algorithm for d-CNF formulas.", "startOffset": 91, "endOffset": 94}, {"referenceID": 1, "context": "Determining if a given formula on n variables, has at most k restricted variables or at least n\u2212 k strong S backdoor set is W [2]-complete for general formulas, and is fixed-parameter tractable with an O(d) algorithm for d-CNF formulas.", "startOffset": 126, "endOffset": 129}, {"referenceID": 7, "context": "Validity of FMs used for the Experiments: The studied collection of FMs are large real-world feature models [8], primarily based on software product lines.", "startOffset": 108, "endOffset": 111}, {"referenceID": 4, "context": "is known to produce some of the most complex configuration constraints [5].", "startOffset": 71, "endOffset": 74}, {"referenceID": 6, "context": "We rely on existing work that reverse engineered the semantics of these languages from documentation and configuration tools and specified the semantics formally [7, 8].", "startOffset": 162, "endOffset": 168}, {"referenceID": 7, "context": "We rely on existing work that reverse engineered the semantics of these languages from documentation and configuration tools and specified the semantics formally [7, 8].", "startOffset": 162, "endOffset": 168}, {"referenceID": 14, "context": "Validity of Choice of Solvers: All our experiments were performed using the Sat4j solver [16].", "startOffset": 89, "endOffset": 93}, {"referenceID": 2, "context": "[3] give a comprehensive survey of techniques for analyzing feature models, such as checking consistency and detecting dead features, and for supporting configuration, such as propagating feature selections.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "Batory [2] was first to suggest the use of SAT solvers to support feature model analyses.", "startOffset": 7, "endOffset": 10}, {"referenceID": 3, "context": "[4] compare the performance of SAT, CSP, and BDD solvers on two sample analyses on randomly generate feature models with up to 300 features.", "startOffset": 0, "endOffset": 3}, {"referenceID": 19, "context": "[21] run similar comparison on feature models from the SPLOT collection,", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[19] achieve", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[18] show that SAT-based analyses scale to randomly generated feature models with up to 10000 features.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "Although SAT solvers have been successfully applied to analyze the feature model of the Linux kernel [26], we are unaware of prior work systematically studying the performance of SAT solvers on large (1000+ features) real-world feature models, which is", "startOffset": 101, "endOffset": 105}, {"referenceID": 16, "context": "[18] have studied the SAT solving behavior of randomly generated 3-SAT feature models.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[23] treat finding hard feature models as an optimization problem.", "startOffset": 0, "endOffset": 4}, {"referenceID": 20, "context": "[22] propose graph width measures, such as treewidth, applied to graph representations of the CNF derived from a feature model as a upper bound of the complexity of analyses on the model.", "startOffset": 0, "endOffset": 4}, {"referenceID": 5, "context": "While some papers hint at the existence of very large models in industry [6], these models are typically highly confidential.", "startOffset": 73, "endOffset": 76}, {"referenceID": 22, "context": "Sincero [24] was first to observe that the definition of the Linux kernel build configuration, ex-", "startOffset": 8, "endOffset": 12}, {"referenceID": 6, "context": "[7] identify the Component Configuration Language (CDL) in eCos, an open-source real-time operating system, as additional feature modeling language and subsequently [8] create and analyze a collection of large real-world feature models from twelve open-source projects in the software systems domain.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[7] identify the Component Configuration Language (CDL) in eCos, an open-source real-time operating system, as additional feature modeling language and subsequently [8] create and analyze a collection of large real-world feature models from twelve open-source projects in the software systems domain.", "startOffset": 165, "endOffset": 168}], "year": 2017, "abstractText": "Modern conflict-driven clause-learning (CDCL) Boolean SAT solvers provide efficient automatic analysis of real-world feature models (FM) of systems ranging from cars to operating systems. It is well-known that solver-based analysis of real-world FMs scale very well even though SAT instances obtained from such FMs are large, and the corresponding analysis problems are known to be NP-complete. To better understand why SAT solvers are so effective, we systematically studied many syntactic and semantic characteristics of a representative set of large real-world FMs. We discovered that a key reason why large real-world FMs are easy-toanalyze is that the vast majority of the variables in these models are unrestricted, i.e., the models are satisfiable for both true and false assignments to such variables under the current partial assignment. Given this discovery and our understanding of CDCL SAT solvers, we show that solvers can easily find satisfying assignments for such models without too many backtracks relative to the model size, explaining why solvers scale so well. Further analysis showed that the presence of unrestricted variables in these real-world models can be attributed to their high-degree of variability. Additionally, we experimented with a series of well-known nonbacktracking simplifications that are particularly effective in solving FMs. The remaining variables/clauses after simplifications, called the core, are so few that they are easily solved even with backtracking, further strengthening our conclusions. We explain the connection between our findings and backdoors, an idea posited by theorists to explain the power of SAT solvers. This connection strengthens our hypothesis that SAT-based analysis of FMs is easy. In contrast to our findings, previous research characterizes the difficulty of analyzing randomly-generated FMs in terms of treewidth. Our experiments suggest that the difficulty of analyzing realworld FMs cannot be explained in terms of treewidth. Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org. SPLC 2015, July 20 24, 2015, Nashville, TN, USA c \u00a9 2015 ACM. ISBN 978-1-4503-3613-0/15/07. . . $15.00 DOI: http://dx.doi.org/10.1145/2791060.2791070 CCS Concepts \u2022Software and its engineering \u2192 Software product lines;", "creator": "LaTeX with hyperref package"}}}