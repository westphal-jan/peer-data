{"id": "1508.04522", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Aug-2015", "title": "Fishing out Winners from Vote Streams", "abstract": "We investigate the problem of winner determination from computational social choice theory in the data stream model. Specifically, we consider the task of summarizing an arbitrarily ordered stream of $n$ votes on $m$ candidates into a small space data structure so as to be able to obtain the winner determined by popular voting rules. As we show, finding the exact winner requires storing essentially all the votes. So, we focus on the problem of finding an {\\em $\\eps$-winner}, a candidate who could win by a change of at most $\\eps$ fraction of the votes. We show non-trivial upper and lower bounds on the space complexity of $\\eps$-winner determination for several voting rules, including $k$-approval, $k$-veto, scoring rules, approval, maximin, Bucklin, Copeland, and plurality with run off.", "histories": [["v1", "Wed, 19 Aug 2015 04:09:03 GMT  (29kb)", "https://arxiv.org/abs/1508.04522v1", null], ["v2", "Mon, 7 Sep 2015 04:27:41 GMT  (29kb)", "http://arxiv.org/abs/1508.04522v2", "Adding Acknowledgement"]], "reviews": [], "SUBJECTS": "cs.CC cs.AI cs.DM cs.DS cs.MA", "authors": ["arnab bhattacharyya", "palash dey"], "accepted": false, "id": "1508.04522"}, "pdf": {"name": "1508.04522.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["arnabb@csa.iisc.ernet.in", "palash@csa.iisc.ernet.in"], "sections": [{"heading": null, "text": "ar Xiv: 150 8.04 522v 2 [cs.C] 7S ep2 015We examine the problem of determining the winner from the theory of computational social choice in the data stream model. Specifically, we consider the task of summarizing an arbitrary stream of n votes to m candidates in a small spatial data structure to determine the winner determined by popular voting rules. As we show, finding the exact winner essentially requires the storage of all votes. Therefore, we focus on the problem of finding an \u03b5 winner, a candidate who could win by changing at most \u03b5 fractions of the votes. We highlight non-trivial upper and lower limits of the spatial complexity of \u03b5-winning determination for several voting rules, including k-approval, k-veto, evaluation rules, approval, maximin, bucklin, copeland and plurality with runoff."}, {"heading": "1 Introduction", "text": "In a typical election, we have a set of m candidates and a set of n voters, and each voter reports their ranking of candidates in the form of a vote. An election rule selects a candidate as the winner once all voters provide their votes. Determining the winner of an election is one of the most fundamental problems in social election theory. We look at elections that are held in an online setting, where voters vote in any order, and we want to find the winner at any time. A very natural scenario in which this happens is an election that is conducted over the Internet. For example, websites often ask for rankings of restaurants in a city and want to keep track of the \"best\" restaurant according to a fixed voting rule. Traditionally, the theory of social choice deals with settings where the number of candidates is much smaller than the number of voters. However, we now often have situations where both the candidate and the electorate are very large. For example, the votes may be the result of a high-frequency measurement]."}, {"heading": "1.1 Our Contributions", "text": "We start with the investigation of streaming algorithms for the (\u03b5, \u03b4) -winning-DETERMINATION problem in relation to various voting rules. The results for the (\u03b5, \u03b4) -winner-DETERMINATION problem, if both \u03b5 and \u03b4 are positive, are summarized in Table 1. (If \u03b5 or \u03b4 is equal to 0, we prove that the space requirement is much greater.) We also show algorithms that have almost the same spatial complexity as Table 1, for the more general sliding window model introduced by Datar et. al. in [13]. In this environment, we want to find a winner for some parameters N in relation to the recent N votes in the stream, clearly a very well motivated scenario in online elections."}, {"heading": "1.2 Related Work", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "1.2.1 Social Choice", "text": "A conceptually related work is that of Conitzer and Sandholm [10], who investigate the communication complexity of common voting rules. They look at parties, each of which knows only its own vote, but wants to use a communication protocol to immediately calculate the winner according to a certain voting rule. Note that a streaming algorithm for accurately determining the winner using s bits of memory immediately implies a one-way communication protocol in which each party transfers s bits. However, it turns out that their results imply only weak lower limits on the spatial complexity of streaming algorithms. Moreover, [10] does not investigate the identification of e-winners. The communication complexity of voting rules was also highlighted by Caragiannis and Procaccia in [7]. In a recent paper, we [15] investigated the problem of determining election winners from a random sample of the distribution of votes."}, {"heading": "1.2.2 Streaming", "text": "The field of streaming algorithms has been the subject of intensive research over the last two decades, both in the algorithms and in the database communities, and the theoretical foundations for the area have been laid by [3, 20]. A stream is a sequence of data positions \u03c31, \u03c32,.., \u03c3n, drawn from the universe [m], so that on each passage through the stream the items are read once in this order. The frequency vector associated with the current f = (f1,, fm) is defined as the number of times in which j occurs as an element in the stream. In this definition, the stream is read only once in this order; more generally speaking, in the turnstile model items can be inserted as well as deleted from the stream, in which case the frequency vector maintains the cumulative count of each element in [m]. General surveys of the area can be detected in [32, 33] before formulating the model."}, {"heading": "1.3 Technical Overview", "text": "The number of samples required to determine the election winners for the various election rules has previously been analyzed in Bob Bob Bob. Our main technical novelty is in the evidence of the lower limits of the election winner identification problems. Usually, the task is to roughly determine the number of items with the frequency prior to the election. Since there may be 1 / 2 such items, a lower limit of the protocol (m 1 / 2) must be determined as the winner identification problem. (1 / 2) The protocol (1 / 2) follows immediately after m. (1 / 2) In contrast, we want to determine only one election winner, so that only logm bits are needed to achieve stronger lower values that depend on development. (1 / 2) The protocol follows immediately after m. (1 / 3) In contrast, we wish to determine only one election winner, so that only one bit is required for the output of the result."}, {"heading": "2 Preliminaries", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Voting and Voting Rules", "text": "Let's say V = {v1,.., vn} the composition of all voters and C = {c1,.., cm} the composition of all candidates. Unless otherwise mentioned, V, C, n and m is the composition of voters, the composition of candidates, the number of voters and the number of candidates. Each voter vi's vote is a complete order of the results of all candidates. For example, if two candidates a and b, a and b are elected, this means that the voter vi indicates the composition of all candidates versus C (C) n. Therefore, L (C) n denotes the composition of all n voters \"preference profiles\" of candidates., \"b). A map r: n, C + L (C) n (C) n is referred to as an election rule. Given a voting profile, the candidate is referred to in r (C) n."}, {"heading": "2.2 Model of Input Data", "text": "In the basic model, the input data is a pure insertion stream of elements from any U universe. We note that in the context of voting in an online scenario, the natural insertion model of the input data is the insertion model of the only streaming model across the universe of all possible voices L (C). The basic model can be generalized to the more complex sliding window model, where the only active items are the last n items for a parameter n. In this thesis, we focus on algorithms for determining the winner for the insertion of only one stream of voices in both basic and sliding window models. The basic input model can also be generalized to another input model, the turnstile model, where the input data is a sequence of U \u00d7 {1, \u2212 1}; each element in the stream corresponds to either an increment or a decrease in the frequency of an element from U. We will use the turnstile model to efficiently (only) use another winning algorithm over the universe."}, {"heading": "2.3 Communication Complexity", "text": "The communication complexity of a function measures the number of bits that need to be exchanged between two players in order to calculate a function whose input is divided between these two players [37]. In a more restrictive one-way communication model, the first player sends only one message to the second player and the second player returns the result. A protocol is a method that players follow to calculate certain functions of their input; the protocols can also be randomized; in this case, the protocol must be correctly output with a probability of at least 1 \u2212 3, for some parameters \u03b4 [0,1] (the probability is taken over the random coin flips of the protocol)."}, {"heading": "2.4 Chernoff Bound", "text": "We will use the following concentration inequality: Theorem 1. Let us allow X1,.., X to be a sequence of independent random variables in [0,1] (not necessarily identical). Let us allow S = \u2211 iXi and let us allow \u00b5 = E [S]. Then for each 0 \u2264 \u03b4 \u2264 1: Pr [\u0435S \u2212 \u00b5 \u0432\u0430\u043d\u0438\u0435] < 2exp (\u2212 2\u0441\u0441\u0441\u0441\u0441\u0441\u0441\u0441\u04412) and Pr [\u0432 S \u2212 \u00b5 \u0432\u0438\u043d\u0438\u043c] < 2exp (\u2212 \u04412\u00b5 / 3) the first inequality is referred to as an additive limit and the second as a multiplicative one."}, {"heading": "2.5 Problem Definition", "text": "The basic winner determination problem is defined as follows: Definition 1. (COMMON DETERMINATION) In view of a voting profile for a number of candidates C and a voting rule r, we determine the winners r (B). We show a strong spatial complexity below the limit for the COMMON DETERMINATION problem for the majority voting rule in Theorem 12. To overcome this theoretical bottleneck, we focus on determining the approximate winner of an election. In the following, we define the term of the \u03b5-approximate winner, which we also call \u03b5-Winner. Definition 2. (\u03b5-Winner) In view of an n voter profile for a number of candidates C and an election rule r, a candidate w is designated as the winner if w can be made the winner by changing at most n votes in the group Winners. Note that there is always a winner in each election, since a winner is also a constant winner. We show that the problem MEMY problem, even if a large number of votes requires MY, is a large number of votes."}, {"heading": "3 Upper Bounds", "text": "In this section we present the algorithms for the number of times we have tossed the coin so far). If we choose the item x, we must assume that the item x is the only source of randomness. We assume that for simplicity we assume that n is a power of 2. We toss a fair coin log2 n and choose the item x, say x, when the coin comes every time. The probability that the item x is chosen is 1 n. We need O (log logn) space to hold the fair coin log2 n (to track the number of times we have tossed the coin so far)."}, {"heading": "3.1 Unknown stream length", "text": "The idea is to use data retention ([35]) together with the approximate count ([18, 31]) to select an element from the stream almost uniformly at random, and the following result shows that we can do this in a space more efficiently. (Theorem 7 of [19]) Given an insertion of only one stream of length n (n is not previously known to the algorithm) over a universe of sizem, there is a randomized one-pass algorithm that, with a probability of at least 1 \u2212 \u03b4, selects the element at a random position X [n] in such a way that for each random position X [n], a Pr {X = i} - 1n we output with O (log 1 + log logn + logn) bits of the memory. (0.1) Bits of the memory, for each random position X [n] so that random position X is passed for each [n] bit."}, {"heading": "3.2 Sliding Window Model", "text": "The following result shows that there is an algorithm with the same spatial complexity as theorem 9 to test a voice from the last n voices in a stream. Theorem 11. ([6]) Since the insertion occurs only over a universe of size, there is a randomized one-pass algorithm that, with a probability of at least 1 \u2212 \u03b4, prints the element at a random position X from the last n positions in such a way that for each i [n], each i [n], each i [X = i] \u2212 1 n [n], using O (log + log + log + log + log + log + logn + logm) memory bits are output for each E (0.1] and each E > 0. Theorem 11 immediately returns results such as inference 1 and 2, where n is the window size."}, {"heading": "4 Lower Bounds", "text": "In this section we will demonstrate the lower complexity of the space for the (\u03b5, \u03b4) -MUNICIPAL DETERMINATION problem for different coordination rules. We will reduce certain communication problems to the (\u03b5, \u03b4) -MUNICIPAL DETERMINATION problem for the proof of the lower complexity of the space. Let us first present these communication problems with the necessary results."}, {"heading": "4.1 Communication Complexity", "text": "Definition 4. (AUGMENTED-INDEXINGm, t) Let t and m be positive integers. (Alice is a string x = (x1,, xt). (Bob is a string (x1,, xi \u2212 1). (Bob is a string.). (Bob is a string.). (Bob is a string.). (Bob is a string.). (Bob is a string.). (Bob is a string.). (Bob is a string.). (1 \u2212 j is a string.). (1 \u2212 2) t logm. (Any string.). (1 \u2212 32 m.) We also remember the multi-party version of the Set Disjointness problem. (DISJ) Definition."}, {"heading": "4.2 Reductions", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.2.1 The cases \u03b5 = 0 and \u03b4 = 0", "text": "We start with the problem of where to find the winner (i.e., the 0-winner) for a majority election. Note that we can find the winner by calculating exactly the plurality score of each candidate. This requires a similar result, which is reflected in Karp et al. [22] Only for a candidate much larger than m, this space is complex almost optimal, even if we are allowed to use random selection by distinguishing it from the majority election and the generalized plurality problem. [22] Only for a candidate who is much larger than m, this space will be complex. (0, 3) Each candidate will use his random selection by using the majority election and the generalized plurality problem. (m log (n / m) bits only for a deterministic algorithm selection. (0, 14) Similar evidence appears in [23], but it gives a weaker proof.We prove the result for the majority election."}, {"heading": "4.2.2 Lower Bounds for Approximate and Randomized algorithms", "text": "The following observation follows directly from the fact that the algorithm returns a candidate as the winner. Next, we show a lower complexity limit of the election outcome. (1) Observation 2. (2) Bits for the (2) -Bob DETERMINATION algorithm, for all election rules considered in this paper. (1) Bits for the (2) -Bob DETER-MINATION problems for different election rules. (1) Theorem 15. Let us assume the number of candidates. (1) Bits for the candidates. (1) Bits for the candidates. (1) Bits for the candidates. (1) Bits for the candidates. (1) Bits for the candidates. (1) Bits for the different election rules. (1) Theorem 15. Let us assume the number of candidates. (1) Bits for the candidates. (1) - Bits for the candidates. (1) - Bits for the approval. (1)"}, {"heading": "5 Conclusions and Future Work", "text": "In this paper, we investigated the spatial complexity of determining approximate winners in the environment in which voices are continuously inserted into a data stream. We showed that allowing randomization and approximation actually allows for much more space-efficient algorithms. Furthermore, our boundaries are narrow in certain parameter ranges. The most immediate open question is how to close the gaps between the upper and lower boundaries. In particular, the dependence on m and \u03b5 is not narrow even for plurality when m is large. Are there more complex algorithms in the other voting rules that improve our upper boundaries? On another level, it might be interesting to put these streaming algorithms into practice (for example, for experiments with participatory democracy or for online social networks) and to study how they work."}], "references": [{"title": "The space complexity of approximating the frequency moments", "author": ["N. Alon", "Y. Matias", "M. Szegedy"], "venue": "Journal of Computer and System Sciences,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1999}, {"title": "An information statistics approach to data stream and communication complexity", "author": ["Z. Bar-Yossef", "T. Jayram", "R. Kumar", "D. Sivakumar"], "venue": "In Foundations of Computer Science,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2002}, {"title": "MJRTY- a fast majority vote algorithm", "author": ["R.S. Boyer", "J.S. Moore"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1991}, {"title": "Optimal sampling from sliding windows", "author": ["V. Braverman", "R. Ostrovsky", "C. Zaniolo"], "venue": "In Proceedings of the Twenty-eighth ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "Voting almost maximizes social welfare despite limited communication", "author": ["I. Caragiannis", "A.D. Procaccia"], "venue": "Artificial Intelligence,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Near-optimal lower bounds on the multiparty communication complexity of set disjointness", "author": ["A. Chakrabarti", "S. Khot", "X. Sun"], "venue": "In Computational Complexity,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2003}, {"title": "Finding frequent items in data streams", "author": ["M. Charikar", "K. Chen", "M. Farach-Colton"], "venue": "Theoretical Computer Science,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "Communication complexity of common voting rules", "author": ["V. Conitzer", "T. Sandholm"], "venue": "In Proceedings of the 6th ACM conference on Electronic commerce,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2005}, {"title": "Finding frequent items in data streams", "author": ["G. Cormode", "M. Hadjieleftheriou"], "venue": "Proceedings of the VLDB Endowment,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2008}, {"title": "An improved data stream summary: the count-min sketch and its applications", "author": ["G. Cormode", "S. Muthukrishnan"], "venue": "Journal of Algorithms,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2005}, {"title": "Maintaining stream statistics over sliding windows", "author": ["M. Datar", "A. Gionis", "P. Indyk", "R. Motwani"], "venue": "SIAM Journal on Computing,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2002}, {"title": "Frequency estimation of internet packet streams with limited space", "author": ["E.D. Demaine", "A. L\u00f3pez-Ortiz", "J.I. Munro"], "venue": "In ESA,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2002}, {"title": "Sample complexity for winner prediction in elections", "author": ["P. Dey", "A. Bhattacharyya"], "venue": "In Proceeding of the 14th International Conference on Autonomous Systems and Multiagent Systems (AAMAS-15)", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2015}, {"title": "Periodicity in streams", "author": ["F. Erg\u00fcn", "H. Jowhari", "M. Sa\u011flam"], "venue": "In APPROX and RANDOM,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "Finding a majority among n votes: Solution to problem 81-5", "author": ["M.J. Fischer", "S.L. Salzburg"], "venue": "Journal of Algorithms,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1982}, {"title": "Approximate counting: a detailed analysis", "author": ["P. Flajolet"], "venue": "BIT Numerical Mathematics,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1985}, {"title": "Applying approximate counting for computing the frequency moments of long data streams", "author": ["A. Gronemeier", "M. Sauerhoff"], "venue": "Theory Comput. Syst.,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2009}, {"title": "External memory algorithms. chapter Computing on Data Streams, pages 107\u2013118", "author": ["M.R. Henzinger", "P. Raghavan", "S. Rajagopalan"], "venue": "American Mathematical Society,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1999}, {"title": "Tight bounds for lp samplers, finding duplicates in streams, and related problems", "author": ["H. Jowhari", "M. Sa\u011flam", "G. Tardos"], "venue": "In Proceedings of the Thirtieth ACM SIGMODSIGACT-SIGART Symposium on Principles of Database Systems,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2011}, {"title": "A simple algorithm for finding frequent elements in streams and bags", "author": ["R.M. Karp", "S. Shenker", "C.H. Papadimitriou"], "venue": "ACM Transactions on Database Systems (TODS),", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2003}, {"title": "On randomized one-round communication complexity", "author": ["I. Kremer", "N. Nisan", "D. Ron"], "venue": "Computational Complexity,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1999}, {"title": "Communication Complexity", "author": ["E. Kushilevitz", "N. Nisan"], "venue": null, "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1997}, {"title": "Crowdsourcing for participatory democracies: Efficient elicitation of social choice functions", "author": ["D.T. Lee", "A. Goel", "T. Aitamurto", "H. Landemore"], "venue": "In Proceedings of the Seconf AAAI Conference on Human Computation and Crowdsourcing,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}, {"title": "Distributed sensor networks: A multiagent perspective, volume 9", "author": ["V. Lesser", "C.L. Ortiz Jr.", "M. Tambe"], "venue": null, "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2012}, {"title": "Approximate frequency counts over data streams", "author": ["G.S. Manku", "R. Motwani"], "venue": "In Proceedings of the 28th international conference on Very Large Data Bases,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2002}, {"title": "Efficient computation of frequent and top-k elements in data streams", "author": ["A. Metwally", "D. Agrawal", "A. El Abbadi"], "venue": "In Database Theory-ICDT", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2005}, {"title": "On data structures and asymmetric communication complexity", "author": ["P.B. Miltersen", "N. Nisan", "S. Safra", "A. Wigderson"], "venue": "J. Comput. Syst. Sci.,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1998}, {"title": "Counting large numbers of events in small registers", "author": ["R. Morris"], "venue": "Commun. ACM,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 1978}, {"title": "Data streams: Algorithms and applications", "author": ["S. Muthukrishnan"], "venue": null, "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2005}, {"title": "Sketching and streaming algorithms for processing massive data. XRDS: Crossroads, The ACM Magazine for Students, 19(1):14\u201319", "author": ["J. Nelson"], "venue": null, "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2012}, {"title": "Shannon\u2019s information methods for lower bounds for probabilistic communication", "author": ["D. Smirnov"], "venue": null, "citeRegEx": "34", "shortCiteRegEx": "34", "year": 1988}, {"title": "Random sampling with a reservoir", "author": ["J.S. Vitter"], "venue": "ACM Trans. Math. Softw.,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 1985}, {"title": "Computing the margin of victory for various voting rules", "author": ["L. Xia"], "venue": "In Proceedings of the 13th ACM Conference on Electronic Commerce,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2012}, {"title": "Some complexity questions related to distributive computing (preliminary report)", "author": ["Yao", "A.C.-C"], "venue": "In Proceedings of the eleventh annual ACM symposium on Theory of computing,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 1979}], "referenceMentions": [], "year": 2015, "abstractText": "We investigate the problem of winner determination from computational social choice theory in the data stream model. Specifically, we consider the task of summarizing an arbitrarily ordered stream of n votes on m candidates into a small space data structure so as to be able to obtain the winner determined by popular voting rules. As we show, finding the exact winner requires storing essentially all the votes. So, we focus on the problem of finding an \u03b5-winner, a candidate who could win by a change of at most \u03b5 fraction of the votes. We show non-trivial upper and lower bounds on the space complexity of \u03b5-winner determination for several voting rules, including k-approval, k-veto, scoring rules, approval, maximin, Bucklin, Copeland, and plurality with run off.", "creator": "LaTeX with hyperref package"}}}