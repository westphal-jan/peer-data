{"id": "1508.04872", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Aug-2015", "title": "Warehouse Layout Method Based on Ant Colony and Backtracking Algorithm", "abstract": "Warehouse is one of the important aspects of a company. Therefore, it is necessary to improve Warehouse Management System (WMS) to have a simple function that can determine the layout of the storage goods. In this paper we propose an improved warehouse layout method based on ant colony algorithm and backtracking algorithm. The method works on two steps. First, it generates a solutions parameter tree from backtracking algorithm. Then second, it deducts the solutions parameter by using a combination of ant colony algorithm and backtracking algorithm. This method was tested by measuring the time needed to build the tree and to fill up the space using two scenarios. The method needs 0.294 to 33.15 seconds to construct the tree and 3.23 seconds (best case) to 61.41 minutes (worst case) to fill up the warehouse. This method is proved to be an attractive alternative solution for warehouse layout system.", "histories": [["v1", "Thu, 20 Aug 2015 04:12:54 GMT  (304kb)", "http://arxiv.org/abs/1508.04872v1", "5 pages, published in proceeding of the 14th IAPR International Conference on Quality in Research (QIR)"]], "COMMENTS": "5 pages, published in proceeding of the 14th IAPR International Conference on Quality in Research (QIR)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ardy wibowo haryanto", "adhi kusnadi", "yustinus eko soelistio"], "accepted": false, "id": "1508.04872"}, "pdf": {"name": "1508.04872.pdf", "metadata": {"source": "CRF", "title": "Warehouse Layout Method Based on Ant Colony and Backtracking Algorithm", "authors": ["Ardy Wibowo Haryanto", "Adhi Kusnadi", "Yustinus Eko Soelistio"], "emails": ["www.awh.tb1@gmail.com,", "adhikusnadi@yahoo.com,", "yustinus.eko@umn.ac.id"], "sections": [{"heading": null, "text": "Company. Therefore, it is necessary to improve the Warehouse Management System (WMS) to have a simple function that can determine the layout of the warehouse goods. In this paper, we propose an improved warehouse layout method based on ant colony algorithm and backtracking algorithm. The method works in two steps. Firstly, it generates a solution parameter tree from backtracking algorithm. Secondly, it subtracts the solution parameter by using a combination of ant colony algorithm and backtracking algorithm. This method has been tested by measuring the time required to build the tree and filling the space with two scenarios. Secondly, it takes 0.294 to 33.15 seconds to construct the tree and 3.23 seconds (at best) to61.41 minutes (worst) to fill the warehouse. This method proves to be an attractive alternative solution for the warehouse layout system (keywords - warehouse layout; block stacking algorithm; Antcolony algorithm)."}, {"heading": "A. Ant Colony Algorithm", "text": "ACA is a parameter search method that mimics the behaviour of the ant colony in foraging. ACA works in two steps. In the first step, the search begins with a gradual search in each state until a solution is found. The selection is based on the most likely value of the pheromone track and heuristic information contained in each state, which is calculated according to the formula: Where is the probability of choosing a state, the intensity of the pheromone track for the intermediate state, is the visibility of a solution that would be selected by the ant, \u03b1 is a parameter that controls the intensity of the pheromone track, where \u03b1 0, \u03b2 is a parameter that controls the visibility where \u03b2 \u2265 0. Pheromone track corresponds to the quality of the solutions generated by the ant from its previous movement, while heuristic information corresponds to the data input of a problem. This search is carried out gradually by all the ant pheromone track (> the colony is measured in another step at the best solution)."}, {"heading": "B. Backtracking Algorithm", "text": "BA can be used as an alternative solution to solve the problem of product layout in a parameter space (Liliana: 2010). The final version will be published at the 14th International Conference on Quality in Research (QIR) on 18-22 May 2015 (http: / / qir.eng.ui.ac.id / front /). All quotations should be aligned to the final version. If goods are not placed at this early stage, the next stage will be called recursively. Backtracking is used when the solution needs to be traced back to its previous steps. BA has the advantage of being able to obtain the best results from a series of combinations by searching exhaustively in all possible solution spaces. However, this algorithm is not efficient as the search process can take a long time when the search space is large. III. PROPOTHSED proposes the best method to find the second solution."}, {"heading": "A. TreeConstructionStep", "text": "The tree consists of five levels. The first level is the category of goods in the storage layout (e.g. food, glassware, electronics) The second level is the storage space, which is measured in the form of blocks. The block is a three-dimensional storage space (in the euclidean sense), which has length x (third level), height y (fourth level) and width z (fifth level). The size of all levels can be predefined. It is customary for a binary tree structure to be used as a detachment tree, however, the binary structure presents a complexity problem if the solutions form an unbalanced tree. Therefore, we propose to use the structure of a tree in which each node has exactly five child nodes. Each node in the tree stores the (1) name of the node, (2) the binary status (0 = empty, 1 = full), (3) the intensity of the pheromone path for the interstate (), (4) the visibility of a solution, which would be selected by (5), (and (5), and (3) the intensity of the pheromone path for the interstate (), (5), and (5) the value."}, {"heading": "B. Solution Searching Step", "text": "In fact, the fact is that most of us are able to go in search of a solution that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution."}, {"heading": "C. Backtracking Algorithm Flowchart", "text": "In fact, most people who are able to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to"}], "references": [{"title": "Septiandri., \u201cImplementasi Algoritma BFS dan DFS dalam Penyelesaian Toke Flip Puzzle,", "author": ["A. Akbar"], "venue": "Makalah IF3051 Strategi Algoritma,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Pembangunan Aplikasi Penyusunan Jadwal Kuliah Menggunakan Algoritma Semut\u201d, Jurusan Teknik Elektro", "author": ["A. Fernandez", "S.T.E. Handoyo", "M.T", "S.T.M. Somantri"], "venue": "Fakultas Teknik, Universitas Diponegoro,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Y", "author": ["A. Hambali", "I. Prasetyaningrum"], "venue": "Yuliana,\u201cSistem Alokasi Penyimpanan Barang pada Gudang,\u201d EEPIS Final Project", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "S", "author": ["A. Leksono"], "venue": "Sarwadi\u201cAlgoritma Ant Colony Optimization (ACO) untuk menyelesaikan Traveling Salesman Problem (TSP),\u201dUniversitas Diponegoro, Semarang", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2009}, {"title": "Wiryadinata, \u201cPemanfaatan Metode Heuristik Dalam Pencarian Jalur Terpendek Dengan Algoritma Semut dan Algoritma Genetik,", "author": ["I. Muthakiroh", "F. Saptono", "R.N. Hasanah"], "venue": "Seminar Nasional Aplikasi Teknologi Informasi (SNATI),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Sistem Inventori dan Pengaturan Tata Letak Barang serta Visualisasinya,", "author": ["Liliana", "G. Satia Budhi", "A. Abadi"], "venue": "Jurusan Teknik Informatika, Fakultas Teknologi Industri,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "T.Stu \u0308tzle, Ant Colony Optimization. A Bradford book.Massachusetts", "author": ["M. Dorigo"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2004}, {"title": "Artificial Intelligent A Modern Approach", "author": ["S. Russel", "P. Norvig"], "venue": "Prentice Hall", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2009}, {"title": "Penerapan Algoritma Backtracking pada", "author": ["Teneng", "J. Purwadi", "E. Kurniawan"], "venue": "Permainan Math Maze,\u201dJurnal Informatika, vol.6,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2010}, {"title": "Ant Clustering Algorithm", "author": ["U. Boryczka"], "venue": "Poland: Institute of Computer Science University of Silesia", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [], "year": 2015, "abstractText": "Warehouse is one of the important aspects of a company. Therefore, it is necessary to improve Warehouse Management System (WMS) to have a simple function that can determine the layout of the storage goods. In this paper we propose an improved warehouse layout method based on ant colony algorithm and backtracking algorithm. The method works on two steps. First, it generates a solutions parameter tree from backtracking algorithm. Then second, it deducts the solutions parameter by using a combination of ant colony algorithm and backtracking algorithm. This method was tested by measuring the time needed to build the tree and to fill up the space using two scenarios. The method needs 0.294 to 33.15 seconds to construct the tree and 3.23 seconds (best case) to61.41 minutes (worst case) to fill up the warehouse. This method is proved to be an attractive alternative solution for warehouse layout system. Keywords\u2014warehouse layout; block stacking method; ant colony algorithm; backtracking algorithm.", "creator": "Microsoft\u00ae Office Word 2007"}}}