{"id": "1509.02459", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Sep-2015", "title": "Evolving TSP heuristics using Multi Expression Programming", "abstract": "Multi Expression Programming (MEP) is an evolutionary technique that may be used for solving computationally difficult problems. MEP uses a linear solution representation. Each MEP individual is a string encoding complex expressions (computer programs). A MEP individual may encode multiple solutions of the current problem. In this paper MEP is used for evolving a Traveling Salesman Problem (TSP) heuristic for graphs satisfying triangle inequality. Evolved MEP heuristic is compared with Nearest Neighbor Heuristic (NN) and Minimum Spanning Tree Heuristic (MST) on some difficult problems in TSPLIB. For most of the considered problems the evolved MEP heuristic outperforms NN and MST. The obtained algorithm was tested against some problems in TSPLIB. The results emphasizes that evolved MEP heuristic is a powerful tool for solving difficult TSP instances.", "histories": [["v1", "Tue, 8 Sep 2015 17:37:01 GMT  (73kb)", "http://arxiv.org/abs/1509.02459v1", "International Conference on Computational Sciences, ICCS'04, 6-9 June, Krakow, Poland, Edited by M. Bubak, G.van Albada, P. Sloot, and J. Dongarra, Vol II, pp. 670-673, Springer-Verlag, Berlin, 2004. Source code available for download at:this http URL"]], "COMMENTS": "International Conference on Computational Sciences, ICCS'04, 6-9 June, Krakow, Poland, Edited by M. Bubak, G.van Albada, P. Sloot, and J. Dongarra, Vol II, pp. 670-673, Springer-Verlag, Berlin, 2004. Source code available for download at:this http URL", "reviews": [], "SUBJECTS": "cs.AI cs.NE", "authors": ["mihai oltean", "d dumitrescu"], "accepted": false, "id": "1509.02459"}, "pdf": {"name": "1509.02459.pdf", "metadata": {"source": "CRF", "title": "Evolving TSP heuristics using Multi Expression Programming", "authors": ["Mihai Oltean", "D. Dumitrescu"], "emails": ["ddumitr}@nessie.cs.ubbcluj.ro"], "sections": [{"heading": "1. Introduction", "text": "In [12, 13, 14] a new evolutionary paradigm called Multi-Expression Programming (MEP) 1 has been proposed. MEP individuals can be considered as an alternative to the standard method of genetic programming. MEP uses a linear solution representation. Each MEP individual is a string encoding complex expressions (computer programs). An MEP individual can encode several solutions to the current problem. Usually, the best solution for fitness mapping purposes is chosen. One of the most important uses of MEP is the discovery of heuristics to solve computer difficult (mainly NP-complete) problems. Instead of seeking the solution of a particular problem, the MEP goal is to discover a heuristics that solves the entire class of instances for a particular problem. In this paper, MEP technique is used to discover TSP heuristics for diagrams that satisfy the inequality of diagrams (TI)."}, {"heading": "2. MEP Technique", "text": "MEP uses a linear solution representation and a special phenotypic transcription model. An MEP chromosome normally encodes several expressions (computer programs), and the ability of the MEP chromosome to encode several syntactically correct expressions is referred to as strong implicit parallelism."}, {"heading": "2.1. MEP Algorithm", "text": "The standard MEP algorithm starts with a randomly generated population of individuals; a fixed number of fit individuals enter the next generation (elitism); the mating pool is filled by binary tournament selection; individuals from the mating pool are randomly paired and recombined; and by recombining two parents, two offspring are created; and the offspring are mutated and transferred to the next generation."}, {"heading": "2.2. MEP Representation", "text": "MEP genes are substrings of variable length. The number of genes in a chromosome is constant and represents the length of the chromosome. Each gene encodes a terminal or a function symbol. A gene encoding a function contains pointers to genes containing the function arguments. Function parameters always have indices of lower values than the position of this function symbol itself in the chromosome. A proposed representation ensures that no cycle occurs when the chromosome is decrypted (phenotypically transcribed). In accordance with the proposed representation scheme, the first symbol of the chromosome must be a terminal symbol. In this way, only syntactically correct programs are generated by MEP technology. Let T = {a, b, c, d} the set of terminal symbols and F = {+, *} the set of function symbols. Consider as an address MEP-C: 5: 1, but actually the explanation: MEP: 1: 6 *."}, {"heading": "2.3. MEP phenotypic transcription", "text": "MEP chromosomes are read downstream, starting with the first position. A terminal symbol specifies a simple expression. A function symbol specifies a complex expression (formed by linking the operands specified by the argument positions with the current function symbol). Let's take the chromosome C given above. Chromosome C is not able to encode a unique expression that includes all genes, but C encodes the expressions: E1 = a, E2 = b, E3 = a + b, E4 = c, E5 = d, E6 = c + d.Each MEP chromosome may encode a number of expressions corresponding to the chromosome length (number of genes)."}, {"heading": "2.4. Selection and search operators", "text": "Within the MEP technique binary tournament [Goldberg] selection is used. Search operators are recombination and mutation. These possible operators are defined to maintain the chromosome structure. All offspring describe syntactically correct expressions."}, {"heading": "2.4.1. Recombination", "text": "Three variants of recombination operators have been considered and tested in our MEP implementation: single-point crossover, two-point crossover and uniform crossover. These operators are simple versions of standard binary crossover operators (see [4], [6]). Two-point crossover seems to work best with MEP ([12]) and is used in all experiments considered in this work."}, {"heading": "2.4.2. Mutation", "text": "When using the mutation operator, a mutation probability (pm) is taken into account. Mutation changes some symbols in the chromosome. In order to maintain the chromosome structure, the first gene must encode a terminal symbol, even after the mutation. For other genes, there are no restrictions on the symbol change. If the gene selected for the mutation encodes a terminal symbol, this symbol can be converted into another terminal symbol or into a function symbol. In the latter case, the positions (addresses) indicating the function arguments are generated randomly. If the mutant gene encodes a function, the gene can be mutated into a terminal symbol or into another function (i.e. function symbol and references to arguments)."}, {"heading": "3. TSP problem with triangle inequality", "text": "The TSP problem for TI diagrams (i.e. satisfactory triangular inequality) is described as follows: Consider a set C = {c0, c1,..., cN-1} of cities and a distance d (ci, cj) and Z + for each pair ci, cj, cj, c, d (ci, cj) = d (cj, ci) and for each three cities ci, cj, ck, c (ci, cj) \u2264 d (ci, ck) + d (ck, cj).The tour < c\u03c0 (0), c\u03c0 (1),..., c\u03c0 (N-1) > of all minimum-length cities in C is required ([1], [3]) The TSP problem with triangular inequality is a NP-complete problem [7]. No polynomial time algorithm for solving the TSP problem is known."}, {"heading": "4. Evolving Heuristics for TSP", "text": "In this section we deal with the problem of discovering heuristics that can solve TSP instead of solving a specific instance of the problem. MEP technique is used to develop a path function f, which provides the ability to select graph vertices to achieve a Hamiltonian cycle.Fitness is assigned to a function f in the current population by applying f to several randomly selected graphs (training set) and evaluating the results.The developed path function can be used to solve certain instances of the TSP. For each problem, the graph nodes are evaluated with the path function f and added successively to the path already created. The algorithm for TSP with the developed path function f can be described as follows: S1. Let c\u03c0 (0) = c0 {the path begins with the node c0} S2. k = 1; S3. while k < N - 1 select the path of S4."}, {"heading": "4.1. Terminal and Function Symbols for Evolving Heuristic Function f", "text": "To avoid this difficulty, let us consider a special terminal set that is independent of the number of graphs. Let us use y1 to consider the last visited node (currently) as y1. We must select the next node to be added to the path. To avoid this difficulty, let us consider a special terminal set that is independent of the number of graph nodes. Let us use y1 to consider the last visited node (currently) as y1. We must select the next node to be added to the path."}, {"heading": "4.2. Fitness assignment", "text": "To obtain good heuristics, the path function f must be trained using multiple diagrams. At the beginning of the search process, the training graphs are randomly generated and remain unchanged during the search process. To avoid overfitting (see [15]), another set of randomly generated diagrams (validation set) is taken into consideration. After each generation, the quality of the previously best individual is calculated using the validation set to check his generalization ability during the training. At the end of the search process, the highest quality function is provided as program output. The fitness (quality) of a recognized path function f is defined as the sum of the TSP path length of the diagrams in the training set, in order to minimize fitness."}, {"heading": "4.3. A Numerical Experiment", "text": "In this experiment, we develop a heuristics to solve the TSP problem. The development of the best individual fitness and the average fitness of the best individuals over 30 runs is shown in Figure 1.A. The path function developed by the MEP algorithm is: f = (sum _ g (y2)) * (d _ y1 _ y2 max (d _ y1 _ y2, max _ g (y1)) + d _ y1 _ y2).Heuristic function f, developed by the MEP technique, is used directly to build the optimal path. The corresponding learning process has a remarkable quality: the developed (learned) heuristics works very well on datasets that are substantially larger than the training set. In our example, the training set G50 is significantly smaller than the set G1000, which was used for testing."}, {"heading": "5. Assessing the Performance of the Evolved MEP Heuristic", "text": "In this section, the performance of the developed MEP heuristics, NN and MST are compared. In the first experiment, we compare the observed algorithms on some randomly generated graphs. In the second experiment, the heuristics are compared with some difficult problems in TSPLIB [16]."}, {"heading": "5.1. Experiment 1", "text": "In this experiment, we offer a direct comparison of the developed MEP heuristics, NN and MST. Heuristics considered are tested for randomly generated diagrams to satisfy triangular inequality. Evolved Heuristic was tested for various diagrams of classes G200, G500 and G1000. For each diagram class, 1000 diagrams were randomly generated to satisfy triangular inequality. These diagrams were tested for experiments with developed MEP heuristics, NN and MST. The performance of developed MEP heuristics, NN and MST are presented in Table 2. Evolved MEP heuristics vs. NN, MST. For each diagram class, we present the number of diagrams for which developed MEP heuristics generate a shorter cycle than the cycle developed by the MST and NN.Graphs types MST algorithm MST and MST NNG200 800 G974 9G990, highlighting the MEP-91000 results developed by the MEP Heuristics and MST-48T algorithms."}, {"heading": "5.2. Experiment 2", "text": "The results are shown in Table 3.ts225 136069 7.44 140485 10.92994 187246 47.85 u574 43095.6 16.77 44605.1 20.86465 50066 35.66 u724 46545.7 11.06 50731.4 21.04844 60098.9 43.39Table 3 shows that developed MEP heuristics perform better than NN and MST on most of the problems considered. Only on five problems (bier127, ch150, d198, d493, fl417) does NN perform better than developed MEP heuristics. The highest error rate achieved by developed MEP heuristics is 23.05 (the problem d493), while the highest error rate is achieved by NN (the problem dlind61) and the lowest error rate is achieved by MEP heuristics (1,372)."}, {"heading": "6. Conclusions and Further Work", "text": "MEP technology is used to develop heuristics to solve TSP problems. Experimental results stress that the heuristics developed exceed some known specific heuristics. Furthermore, an improvement in MEP results could be achieved by increasing the number of function symbols in the MEP chromosome. Further research will focus on the use of MEP to discover better heuristics to solve TSP. Further improvement could be achieved by increasing the chromosome length. In this case, the complexity of the developed formula could increase, but the performance of the obtained heuristics could be greatly improved. Of great practical interest would be to develop functions that exceed other dedicated heuristics. In this way, difficult-to-implement computer programs could be simulated by simple functions."}], "references": [{"title": "Cost versus Distance in the Traveling Salesman Problem", "author": ["K. Boese"], "venue": "Tech. Rep. TR-950018, UCLA CS Department", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1995}, {"title": "Introduction to Algorithms", "author": ["T.H. Cormen", "C.E. Leiserson", "R.R. Rivest"], "venue": "MIT Press", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1990}, {"title": "Evolutionary Computation", "author": ["D. Dumitrescu", "B. Lazzerini", "L. Jain", "A. Dumitrescu"], "venue": "CRC Press, Boca Raton, FL", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2000}, {"title": "A Genetic Local Search Algorithm for Solving Symmetric and Asymmetric Traveling Salesman Problems", "author": ["B. Freisleben", "P. Merz"], "venue": "Proceedings of the 1996 IEEE International Conference on Evolutionary Computation, pp. 616-621", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1996}, {"title": "Genetic Algorithms in Search", "author": ["D.E. Goldberg"], "venue": "Optimization, and Machine Learning, Addison-Wesley, Reading, MA", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1989}, {"title": "Computers and Intractability: A Guide to NP\u2013 Completeness", "author": ["M.R. Garey", "D.S. Johnson"], "venue": "Freeman & Co, San Francisco, CA", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1979}, {"title": "Genetic Programming: On the Programming of Computers by Means of Natural Selection", "author": ["J.R. Koza"], "venue": "MIT Press, Cambridge", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1992}, {"title": "Studies on the Theory and Design Space of Memetic Algorithms", "author": ["N. Krasnogor"], "venue": "PhD Thesis, University of the West of England, Bristol", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2002}, {"title": "A Memetic Algorithm with self-adaptive local search: TSP a case study", "author": ["N. Krasnogor", "J.E. Smith"], "venue": "Proceedings of 2000 Genetic and Evolutionary Computation Conference, Morgan Kaufmann", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2000}, {"title": "Genetic Local Search for the TSP: New Results", "author": ["P. Merz", "B. Freisleben"], "venue": "Proceedings of the 1997 IEEE International Conference on Evolutionary Computation, pp. 616-621", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1997}, {"title": "Solving Even-Parity Problems using Multi Expression Programming", "author": ["M. Oltean"], "venue": "Proceedings of the the 7 Joint Conference on Information Sciences, September 26-30, 2003, Research Triangle Park, North Carolina, Edited by Ken Chen (et. al), pp. 315-318", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2003}, {"title": "Evolving Evolutionary Algorithms using Multi Expression Programming, The 7", "author": ["M. C Oltean"], "venue": "European Conference on Artificial Life, September 14-17,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2003}, {"title": "PROBEN1 \u2013 A set of neural network problems and benchmarking rules, technical report", "author": ["L. Prechelt"], "venue": "University of Karlsruhe,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1994}], "referenceMentions": [{"referenceID": 10, "context": "In [12, 13, 14] a new evolutionary paradigm called Multi Expression Programming (MEP) has been proposed.", "startOffset": 3, "endOffset": 15}, {"referenceID": 11, "context": "In [12, 13, 14] a new evolutionary paradigm called Multi Expression Programming (MEP) has been proposed.", "startOffset": 3, "endOffset": 15}, {"referenceID": 6, "context": "MEP may be considered as an alternative to standard Genetic Programming technique [8].", "startOffset": 82, "endOffset": 85}, {"referenceID": 2, "context": "These operators are simple versions of standard binary crossover operators (see [4], [6]).", "startOffset": 80, "endOffset": 83}, {"referenceID": 4, "context": "These operators are simple versions of standard binary crossover operators (see [4], [6]).", "startOffset": 85, "endOffset": 88}, {"referenceID": 1, "context": ", c\u03c0(N\u20131)> of all cities in C having minimum length is needed ([1], [3]) TSP problem with triangle inequality is an NP\u2013complete problem [7].", "startOffset": 68, "endOffset": 71}, {"referenceID": 5, "context": ", c\u03c0(N\u20131)> of all cities in C having minimum length is needed ([1], [3]) TSP problem with triangle inequality is an NP\u2013complete problem [7].", "startOffset": 136, "endOffset": 139}, {"referenceID": 1, "context": "The most important are Nearest Neighbor ([3], [7]) and the Minimum Spanning Tree ([3]).", "startOffset": 41, "endOffset": 44}, {"referenceID": 5, "context": "The most important are Nearest Neighbor ([3], [7]) and the Minimum Spanning Tree ([3]).", "startOffset": 46, "endOffset": 49}, {"referenceID": 1, "context": "The most important are Nearest Neighbor ([3], [7]) and the Minimum Spanning Tree ([3]).", "startOffset": 82, "endOffset": 85}, {"referenceID": 12, "context": "To avoid overfitting (see [15]), another set of randomly generated graphs (validation set) is considered.", "startOffset": 26, "endOffset": 30}], "year": 2003, "abstractText": "Multi Expression Programming (MEP) is an evolutionary technique that may be used for solving computationally difficult problems. MEP uses a linear solution representation. Each MEP individual is a string encoding complex expressions (computer programs). A MEP individual may encode multiple solutions of the current problem. In this paper MEP is used for evolving a Traveling Salesman Problem (TSP) heuristic for graphs satisfying triangle inequality. Evolved MEP heuristic is compared with Nearest Neighbor Heuristic (NN) and Minimum Spanning Tree Heuristic (MST) on some difficult problems in TSPLIB. For most of the considered problems the evolved MEP heuristic outperforms NN and MST. The obtained algorithm was tested against some problems in TSPLIB. The results emphasizes that evolved MEP heuristic is a powerful tool for solving difficult TSP instances.", "creator": "PSCRIPT.DRV Version 4.0"}}}