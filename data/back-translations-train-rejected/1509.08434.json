{"id": "1509.08434", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "28-Sep-2015", "title": "Ensemble UCT Needs High Exploitation", "abstract": "Recent results have shown that the MCTS algorithm (a new, adaptive, randomized optimization algorithm) is effective in a remarkably diverse set of applications in Artificial Intelligence, Operations Research, and High Energy Physics. MCTS can find good solutions without domain dependent heuristics, using the UCT formula to balance exploitation and exploration. It has been suggested that the optimum in the exploitation- exploration balance differs for different search tree sizes: small search trees needs more exploitation; large search trees need more exploration. Small search trees occur in variations of MCTS, such as parallel and ensemble approaches. This paper investigates the possibility of improving the performance of Ensemble UCT by increasing the level of exploitation. As the search trees becomes smaller we achieve an improved performance. The results are important for improving the performance of large scale parallelism of MCTS.", "histories": [["v1", "Mon, 28 Sep 2015 19:14:43 GMT  (84kb)", "http://arxiv.org/abs/1509.08434v1", "7 pages, 7 figures"]], "COMMENTS": "7 pages, 7 figures", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["s ali mirsoleimani", "aske plaat", "jaap van den herik"], "accepted": false, "id": "1509.08434"}, "pdf": {"name": "1509.08434.pdf", "metadata": {"source": "CRF", "title": "Ensemble UCT Needs High Exploitation", "authors": ["S. Ali Mirsoleimani", "Aske Plaat", "Jaap van den Herik"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 150 9.08 434v 1 [cs.A I] 2 8Se p20 15"}, {"heading": "1 INTRODUCTION", "text": "Since its inception in 2006 (Coulom, 2006), the Monte Carlo Tree Search (MCTS) algorithm has attracted much interest among optimization researchers. MCTS is a sampling algorithm that uses search results to guide itself through the search space, eliminating the need for domain-dependent heuristics. Starting with the game Go, an oriental board game, MCTS has achieved performance breakthroughs in areas ranging from planning and planning to high-energy physics (Chaslot et al., 2008a; Kuipers et al., 2013; Ruijl et al., 2014). The success of MCTS depends on exploitation in areas that appear promising) and exploration (look in areas that have not yet been well sampled). The most popular algorithms in the MCTS family addressing this dilemma is the Upper Confidence and Tread (UCT)."}, {"heading": "2 BACKGROUND", "text": "Below is some background information on MCTS (Section 2.1), Ensemble UCT (Section 2.2) and the game Hex (Section 2.3)."}, {"heading": "2.1 Monte Carlo Tree Search", "text": "The main building block of the MCTS algorithm is the search tree, in which each node of the tree represents a game position. The algorithm constructs the search tree step by step and expands one node in each iteration. Each iteration has four steps (Chaslot et al., 2008b). (1) In the selection step, starting at the root of the tree, child nodes are selected one by one according to a selection criterion until a leaf node is reached. (2) In the expansion step, unless the selected leaf node completes the game, a random unexplored child of the leaf node is added to the tree. (3) In the simulation step (also called the playout step) the rest of the path is completed to a final state by random movements. At the end, a score is achieved, which means the number of points of the selected path through the state space. (4) In the backup step (also referred to as the step-up value is transferred back by the random movements)."}, {"heading": "2.1.1 The UCT Algorithm", "text": "The UCT algorithm, in the selection phase of the MCTS algorithm (Kocsis and Szepesva \u0301 ri, 2006), provides a solution to the problem of exploitation (looking into promising areas) and exploration (looking for promising areas): a child is selected to maximize: UCT (j) = X j + Cp \u221a ln (n) n j (1), where X j = w j n j, w j is the number of victories in the child j, n j the number of visits of the child j, n the number of visits to the parent node, and Cp \u2265 0 is a constant. The first term in the UCT equation is for exploitation and the second is for exploration. The degree of exploration of the UCT algorithm can be adjusted by the Cp constant. (High Cp means more exploration.)"}, {"heading": "2.1.2 Root Parallelism", "text": "Originally, root parallelism was a UCT algorithm, namely UCT parallel. In root parallelism (Chaslot et al., 2008a), each thread simultaneously forms a private and independent MCTS search tree with a unique random seed. If root parallelism wants to select the next move, one of the threads records the number of visits and wins to the top node of all trees and then calculates the total sum for each child (Chaslot et al., 2008a). Then it selects a move based on one of the possible guidelines. Figure 2 shows root parallelism. Nowadays, however, we have found that UCT with root parallelism does not algorithmically correspond to the pure UCT, but to the ensemble UCT (Browne et al., 2012)."}, {"heading": "2.2 Ensemble UCT", "text": "The total number of playouts is t and the size of the ensemble (number of trees within the ensemble) is n. It is assumed that n processors are available that are equivalent to the ensemble size.The first row of the table shows the situation in which the ensemble UCT overall has n \u00b7 t playouts, while the UCT only has t playouts. In this case, there would be no acceleration with a parallel execution of the ensemble approach on n cores, but the greater search effort would probably result in a better search result. We call this use of parallelism strength acceleration. The second row of Table 1 shows another possible configuration for the ensemble UCT. In this case, the total number of playouts is equal for both UCT and the ensemble UCT. Thus, each core seeks a smaller tree of size tn. However, the search for this configuration will be faster than this question is answered."}, {"heading": "2.3 The Game of Hex", "text": "Hex is a game with a board of hexagonal cells (Arneson et al., 2010). Each player is represented by a color (white or black). Players alternate by placing a tile of their color on a square of the board. The goal for each player is to create a contiguous chain of tiles between the opposite sides of the board, marked by their colors. The first player to finish this path wins the game. In our implementation of the Hex game, a fast data structure is used to determine the connected tiles. Using this data structure, we have an efficient representation of the board position (Galil and Italiano, 1991)."}, {"heading": "3 RELATED WORK", "text": "Chaslot et al. provided evidence that for Go the parallelism of the roots with n cases of tn iterations exceeds the simple parallelism of the roots with t-iterations for the same total number of iterations (Chaslot et al., 2008a). However, in other areas, Fern and Lewis do not find this result (Fern and Lewis, 2011). (Soejima et al., 2010) also analyzed the performance of the parallelism of the roots in detail. They found that a majority voting scheme provides a better performance than the traditional approach of playing the move with the largest total number of visits across all trees. They suggested that the results in (Chaslot et al., 2008a) are explained by the fact that the parallelism of the roots performs a flatter search, making it easier for the UCT to escape the local optima than the deeper search carried out by the simple UCT."}, {"heading": "4 EMPIRICAL STUDY", "text": "This section describes the setup of the experiment and then presents the results."}, {"heading": "4.1 Experimental Setup", "text": "The value of \u03b1 (n) is less than 5 for all the distant practical values of n (Galil and Italiano, 1991). In the ensemble UCT, each tree performs a completely independent UCT search with a different random seed. To determine the next move, the number of wins and visits of the children of all trees are collected and the total sum of wins and visits for each child is calculated. The child with the largest number of wins / visits is selected. The simple UCT algorithm and the ensemble UCT are implemented in C + +, to make our experiments as realistic as possible, we use a custom game program for the game of Hex (Mirsoleimani et al., 2014; Mirsolmaneii et al.)."}, {"heading": "4.2 Experimental Results", "text": "Below we present our experimental results, which we distinguish between hidden exploration in Ensemble UCT (4.2.1) and exploitation-exploration conflict in Ensemble UCT (4.2.2)."}, {"heading": "4.2.1 Hidden Exploration in Ensemble UCT", "text": "It is important to understand that the UCT ensemble inherently has a hidden exploration factor, due to (1) the fact that each tree in the UCT ensemble is independent, and (2) that an ensemble of trees contains more explorations than a single UCT search of comparable size would have. Figures 4 and 5 show how this hidden exploration factor influences the performance of both the UCT ensemble and the simple UCT in making decisions at the level of individual moves. In the diagrams, a board position of the game is used by Hex, where moves around the number 60 are the best. Therefore, the number of visits for children of the bell-shaped root around the number 60 is the desirable number. In Figure 4, the graph shows the number of visits for the root children when using the UCT ensemble. The number of trees in the ensemble is 8 and the number of visits per tree is 10,000. Figure 5 shows the performance of the UCT palin with 80,000 exploits. Both algorithms have the same total number of visits to the UCT."}, {"heading": "4.2.2 Exploitation-Exploration trade-off for Ensemble UCT", "text": "In Figures 6 and 7, the ensemble size (number of search trees per ensemble) increases by a factor of two from the left to the right side of a diagram, and the number of plays per tree (tree size) decreases by the same factor. Thus, on the right side of the diagram, we have the largest ensemble with the smallest trees. During an experiment, the total number of plays always remains the same for both the ensemble UCT and the pure UCT. The value of Cp for the pure UCT is always 1.0, which means high exploration. Figure 6 shows the relationships between the value of Cp and the ensemble size when both the pure UCT and the ensemble UCT have the same number of total plays. Furthermore, Figure 6 shows the performance of the ensemble UCT for different values of Cp. It shows that if Cp = 1.0 (highly explorative), the ensemble UCT is as good or mostly worse than the pure UCT."}, {"heading": "5 CONCLUSION", "text": "This paper describes an empirical study of the ensemble UCT with different configurations for ensemble size, tree size and exploitation exploration. Previous studies on the parallelism of the ensemble UCT / Root did not provide conclusive evidence for the effectiveness of the ensemble UCT (Chaslot et al., 2008a; Fern and Lewis, 2011; Browne et al., 2012). Our results suggest that the reason lies in the exploration exploitation of trade in relation to the size of the subtrees. Our results provide clear evidence that the performance of the ensemble UCT is improved by increasing the exploitation of smaller search trees in the face of a specified period of time or number of simulations. This work is found in part by observing (Chaslot et al., 2008a) the superlinear speedup in root parallelisms."}, {"heading": "ACKNOWLEDGEMENTS", "text": "This work is partially supported by ERC Advanced Grant No. 320651, \"HEPGAME.\""}], "references": [{"title": "Monte Carlo Tree Search in Hex", "author": ["B. Arneson", "R.B. Hayward", "P. Henderson"], "venue": "IEEE Transactions on Computational Intelligence and AI in Games,", "citeRegEx": "Arneson et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Arneson et al\\.", "year": 2010}, {"title": "A Survey of Monte Carlo Tree Search Methods", "author": ["C.B. Browne", "E. Powley", "D. Whitehouse", "S.M. Lucas", "P.I. Cowling", "P. Rohlfshagen", "S. Tavener", "D. Perez", "S. Samothrakis", "S. Colton"], "venue": "Computational Intelligence and AI in Games, IEEE Transactions on,", "citeRegEx": "Browne et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Browne et al\\.", "year": 2012}, {"title": "Parallel Monte-Carlo Tree Search", "author": ["G. Chaslot", "M. Winands", "J. van den Herik"], "venue": "Computers and Games,", "citeRegEx": "Chaslot et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Chaslot et al\\.", "year": 2008}, {"title": "Progressive strategies for Monte-Carlo tree search", "author": ["Chaslot", "G.M.J. B", "M.H.M. Winands", "J. van den Herik", "Uiterwijk", "J.W.H. M", "B. Bouzy"], "venue": "New Mathematics and Natural Computation,", "citeRegEx": "Chaslot et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Chaslot et al\\.", "year": 2008}, {"title": "Efficient Selectivity and Backup Operators in Monte-Carlo Tree Search", "author": ["R. Coulom"], "venue": "In Proceedings of the 5th International Conference on Computers and Games,", "citeRegEx": "Coulom,? \\Q2006\\E", "shortCiteRegEx": "Coulom", "year": 2006}, {"title": "Ensemble Monte-Carlo Planning: An Empirical Study", "author": ["A. Fern", "P. Lewis"], "venue": "In ICAPS,", "citeRegEx": "Fern and Lewis,? \\Q2011\\E", "shortCiteRegEx": "Fern and Lewis", "year": 2011}, {"title": "Data Structures and Algorithms for Disjoint Set Union Problems", "author": ["Z. Galil", "G.F. Italiano"], "venue": "ACM Comput. Surv.,", "citeRegEx": "Galil and Italiano,? \\Q1991\\E", "shortCiteRegEx": "Galil and Italiano", "year": 1991}, {"title": "Machine Learning: ECML 2006, volume 4212 of Lecture Notes in Computer Science", "author": ["L. Kocsis", "C. Szepesv\u00e1ri"], "venue": null, "citeRegEx": "Kocsis and Szepesv\u00e1ri,? \\Q2006\\E", "shortCiteRegEx": "Kocsis and Szepesv\u00e1ri", "year": 2006}, {"title": "Improving Multivariate Horner Schemes with Monte Carlo Tree Search", "author": ["J. Kuipers", "A. Plaat", "J. Vermaseren", "J. van den Herik"], "venue": "Computer Physics Communications,", "citeRegEx": "Kuipers et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Kuipers et al\\.", "year": 2013}, {"title": "Parallel Monte Carlo Tree Search", "author": ["S.A. Mirsoleimani", "A. Plaat", "J. van den Herik", "J. Vermaseren"], "venue": null, "citeRegEx": "Mirsoleimani et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mirsoleimani et al\\.", "year": 2015}, {"title": "Performance analysis of a 240 thread tournament level MCTS Go program on the Intel Xeon Phi", "author": ["S.A. Mirsoleimani", "A. Plaat", "J. Vermaseren", "J. van den Herik"], "venue": "In The 2014 European Simulation and Modeling Conference", "citeRegEx": "Mirsoleimani et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Mirsoleimani et al\\.", "year": 2014}, {"title": "Multigame \u2013 An Environment for Distributed Game-Tree Search", "author": ["J.W. Romein"], "venue": "PhD thesis, Vrije Universiteit", "citeRegEx": "Romein,? \\Q2001\\E", "shortCiteRegEx": "Romein", "year": 2001}, {"title": "Combining Simulated Annealing and Monte Carlo Tree Search for Expression Simplification", "author": ["B. Ruijl", "J. Vermaseren", "A. Plaat", "J. van den Herik"], "venue": "Proceedings of ICAART Conference", "citeRegEx": "Ruijl et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Ruijl et al\\.", "year": 2014}, {"title": "Evaluating Root Parallelization in Go", "author": ["Y. Soejima", "A. Kishimoto", "O. Watanabe"], "venue": "IEEE Transactions on Computational Intelligence and AI in Games,", "citeRegEx": "Soejima et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Soejima et al\\.", "year": 2010}], "referenceMentions": [{"referenceID": 4, "context": "Since its inception in 2006 (Coulom, 2006), the Monte Carlo Tree Search (MCTS) algorithm has gained much interest among optimization researchers.", "startOffset": 28, "endOffset": 42}, {"referenceID": 8, "context": "Starting with the game of Go, an oriental board game, MCTS has achieved performance breakthroughs in domains ranging from planning and scheduling to high energy physics (Chaslot et al., 2008a; Kuipers et al., 2013; Ruijl et al., 2014).", "startOffset": 169, "endOffset": 234}, {"referenceID": 12, "context": "Starting with the game of Go, an oriental board game, MCTS has achieved performance breakthroughs in domains ranging from planning and scheduling to high energy physics (Chaslot et al., 2008a; Kuipers et al., 2013; Ruijl et al., 2014).", "startOffset": 169, "endOffset": 234}, {"referenceID": 7, "context": "The most popular algorithm in the MCTS family which addresses this dilemma is the Upper Confidence Bound for Trees (UCT) (Kocsis and Szepesv\u00e1ri, 2006).", "startOffset": 121, "endOffset": 150}, {"referenceID": 5, "context": ", 2008a) and in Ensemble UCT (Fern and Lewis, 2011).", "startOffset": 29, "endOffset": 51}, {"referenceID": 1, "context": "At the end of the search process, the statistics of all trees are combined to yield the final result (Browne et al., 2012).", "startOffset": 101, "endOffset": 122}, {"referenceID": 1, "context": "However, there is contradictory evidence on the success of Ensemble UCT (Browne et al., 2012).", "startOffset": 72, "endOffset": 93}, {"referenceID": 5, "context": "However, Fern and Lewis are not able to reproduce this result in other domains (Fern and Lewis, 2011), finding situations where a plain UCT outperforms Ensemble UCT given the same total number of playouts.", "startOffset": 79, "endOffset": 101}, {"referenceID": 8, "context": "has argued that when the tree size is small, more exploitation should be chosen, and with larger tree sizes, high exploration is suitable (Kuipers et al., 2013).", "startOffset": 138, "endOffset": 160}, {"referenceID": 7, "context": "In many MCTS implementations the UCT algorithm is chosen as the selection criterion (Kocsis and Szepesv\u00e1ri, 2006).", "startOffset": 84, "endOffset": 113}, {"referenceID": 7, "context": "The UCT algorithm provides a solution for the problem of exploitation (look into promising areas) and exploration (look for promising areas) in the selection phase of the MCTS algorithm (Kocsis and Szepesv\u00e1ri, 2006).", "startOffset": 186, "endOffset": 215}, {"referenceID": 1, "context": "However, nowadays we have noted that UCT with root parallelism is not algorithmically equivalent to plain UCT, but is equivalent to Ensemble UCT (Browne et al., 2012).", "startOffset": 145, "endOffset": 166}, {"referenceID": 1, "context": "Ensemble UCT is given its place in the overview article by (Browne et al., 2012).", "startOffset": 59, "endOffset": 80}, {"referenceID": 0, "context": "Hex is a game with a board of hexagonal cells (Arneson et al., 2010).", "startOffset": 46, "endOffset": 68}, {"referenceID": 6, "context": "Using this data structure we have an efficient representation of the board position (Galil and Italiano, 1991).", "startOffset": 84, "endOffset": 110}, {"referenceID": 5, "context": "However, in other domains, Fern and Lewis do not find this result (Fern and Lewis, 2011).", "startOffset": 66, "endOffset": 88}, {"referenceID": 13, "context": "(Soejima et al., 2010) also analyzed the performance of root parallelism in detail.", "startOffset": 0, "endOffset": 22}, {"referenceID": 5, "context": "Fern and Lewis thoroughly investigated an Ensemble UCT approach in which multiple instances of UCT were run independently and their root statistics were combined to yield the final result (Fern and Lewis, 2011).", "startOffset": 188, "endOffset": 210}, {"referenceID": 6, "context": "The value of \u03b1(n) is less than 5 for all remotely practical values of n (Galil and Italiano, 1991).", "startOffset": 72, "endOffset": 98}, {"referenceID": 10, "context": "In order to make our experiments as realistic as possible, we use a custom developed game playing program for the game of Hex (Mirsoleimani et al., 2014; Mirsoleimani et al., 2015).", "startOffset": 126, "endOffset": 180}, {"referenceID": 9, "context": "In order to make our experiments as realistic as possible, we use a custom developed game playing program for the game of Hex (Mirsoleimani et al., 2014; Mirsoleimani et al., 2015).", "startOffset": 126, "endOffset": 180}, {"referenceID": 5, "context": "Previous studies on Ensemble UCT/root parallelism provided inconclusive evidence on the effectiveness of Ensemble UCT (Chaslot et al., 2008a; Fern and Lewis, 2011; Browne et al., 2012).", "startOffset": 118, "endOffset": 184}, {"referenceID": 1, "context": "Previous studies on Ensemble UCT/root parallelism provided inconclusive evidence on the effectiveness of Ensemble UCT (Chaslot et al., 2008a; Fern and Lewis, 2011; Browne et al., 2012).", "startOffset": 118, "endOffset": 184}, {"referenceID": 11, "context": ", (Romein, 2001).", "startOffset": 2, "endOffset": 16}], "year": 2015, "abstractText": "Recent results have shown that the MCTS algorithm (a new, adaptive, randomized optimization algorithm) is effective in a remarkably diverse set of applications in Artificial Intelligence, Operations Research, and High Energy Physics. MCTS can find good solutions without domain dependent heuristics, using the UCT formula to balance exploitation and exploration. It has been suggested that the optimum in the exploitationexploration balance differs for different search tree sizes: small search trees needs more exploitation; large search trees need more exploration. Small search trees occur in variations of MCTS, such as parallel and ensemble approaches. This paper investigates the possibility of improving the performance of Ensemble UCT by increasing the level of exploitation. As the search trees becomes smaller we achieve an improved performance. The results are important for improving the performance of large scale parallelism of MCTS.", "creator": "LaTeX with hyperref package"}}}