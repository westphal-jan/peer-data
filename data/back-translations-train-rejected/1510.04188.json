{"id": "1510.04188", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Oct-2015", "title": "Universal and Determined Constructors of Multisets of Objects", "abstract": "This paper contains analysis of creation of sets and multisets as an approach for modeling of some aspects of human thinking. The creation of sets is considered within constructive object-oriented version of set theory (COOST), from different sides, in particular classical set theory, object-oriented programming (OOP) and development of intelligent information systems (IIS). The main feature of COOST in contrast to other versions of set theory is an opportunity to describe essences of objects more precisely, using their properties and methods, which can be applied to them. That is why this version of set theory is object-oriented and close to OOP. Within COOST, the author proposes universal constructor of multisets of objects that gives us a possibility to create arbitrary multisets of objects. In addition, a few determined constructors of multisets of objects, which allow creating multisets, using strictly defined schemas, also are proposed in the paper. Such constructors are very useful in cases of very big cardinalities of multisets, because they give us an opportunity to calculate a multiplicity of each object and cardinality of multiset before its creation. The proposed constructors of multisets of objects allow us to model in a sense corresponding processes of human thought, that in turn give us an opportunity to develop IIS, using these tools.", "histories": [["v1", "Wed, 14 Oct 2015 16:27:26 GMT  (356kb)", "http://arxiv.org/abs/1510.04188v1", "arXiv admin note: text overlap witharXiv:1510.04183"]], "COMMENTS": "arXiv admin note: text overlap witharXiv:1510.04183", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["dmytro terletskyi"], "accepted": false, "id": "1510.04188"}, "pdf": {"name": "1510.04188.pdf", "metadata": {"source": "CRF", "title": "UNIVERSAL AND DETERMINED CONSTRUCTORS OF MULTISETS OF OBJECTS", "authors": ["Dmytro Terletskyi"], "emails": [], "sections": [{"heading": null, "text": "The creation of sets is considered within a constructive object-oriented version of set theory (COOST) from different sides, in particular from classical set theory, object-oriented programming (OOP) and the development of intelligent information systems (IIS). The main feature of COOST, in contrast to other versions of set theory, is the ability to describe the essences of objects more precisely by applying their properties and methods that can be applied to them. Therefore, this version of set theory is object-oriented and close to OOP. Within COOST, the author proposes universal constructors of multisets of objects that give us the possibility to create arbitrary multisets of objects. Furthermore, some certain constructors of multisets of objects that allow the creation of multisets using strictly defined schemes are also proposed in the work. Such constructors are very useful in cases of very large cardinalities of multiplications of objects, because they give us the possibility of carding and a multiplicity of objects."}, {"heading": "Introduction", "text": "In fact, most of them are able to determine for themselves what they want and what they want."}, {"heading": "Objects and Classes", "text": "We know that every proposition consists of elements that form it. Everything that constitutes our imagination or our world can be the elements of the proposition (Cantor, 1915). Seen from other points of view, it is clear that every natural number must be integral and positive. It is obvious that these two properties are a natural number, but we are not able to regard such an object as a natural number. We know that every natural number must be a whole. It is obvious that it is a natural number."}, {"heading": "Sets and Multisets of Objects", "text": "According to Naive Theory of Set, a proposition is a collection in a set of certain, different objects of our perception or thought, called elements of the proposition [Cantor, 1915]. As we can see, this definition merely describes the concept of the proposition and does not explain how to collect these objects together (). Therefore, we will define the Union properties on objects () as a method of set creation."}, {"heading": "Universal Constructor of Multisets of Objects", "text": "As we can see, a variety of objects can be similarly related to groups of objects. However, sometimes we need to recognize or identify certain copies of some elements that have multiplicity. Therefore, we will consider universal constructors of multisets of objects presented in [Terletskyi, 2014]. After that, we will consider their universality (Vol. 21, Number 4, 2014 348Definition, i.e. we can create any multiset of objects, defining first the case of object cloning. (Vol. 21, Number 4, 2014 348Definition 24. Clone of arbitrary object A is the object () k i Clone A P A A, where () P A is a specification of object A, i is a number of its copies and k is a clone of the class of i A. If object A is not clones, then 0i."}, {"heading": "CP Constructor", "text": "This constructor of multisets of objects based on the idea of Cartesian product of two arbitrary sets, is {S} (therefore we call it CP constructor. We use the idea of the Cartesian product of sets. Contrary to the classical definition of CP, however, we define pairs of CP as sets of objects. {S} {S} (Example 12. Let us consider the situation we need to construct an electric garland, and we have green, orange, purple and pink light bulbs for it. Before creating our garland, we must decide what colors and how many light bulbs of each color we want to use. It is convenient for us to name each type of light bulb after the first letter of its color. Suppose that we want to use all the colors we have, and each of them can be used more than once."}, {"heading": "RCL Constructor", "text": "S \"i,\" he says, \"we have seen ourselves able to put ourselves at the top of the world.\" (\"We have to put ourselves at the top of the world.\") D \"i\" n, \"he says,\" we have to put ourselves at the top of the world. \"(\" We have to put ourselves at the top of the world. \") D\" i \"n,\" he says, \"we have to put ourselves at the top of the world.\" (\"We have to put ourselves at the top of the world.\")"}, {"heading": "PS Constructor", "text": "In fact, it is not as if people were able to behave as if they were able to survive themselves. (...) It is not as if they were able to survive themselves. (...) It is not as if they were able to survive themselves. (...) It is not as if they were able to survive themselves. (...) It is not as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves."}, {"heading": "The element", "text": "2 5, i yes the matrix can be calculated this way2 51 1 11 13,,,,,,,.i j i j i jj i aa a j i \u00b0 \u00ae \u00b0 \u0442 or with the following formulas 42 51 4 1,,,,,,,!! ()! ii jj i ja aa a a."}, {"heading": "D2 Constructor", "text": "Similarly, the first version of this constructor was also presented in [Terletskyi, 2014] (and now we introduce its extension, which gives us new capabilities of its application. This constructor of multisets of objects is based on the decomposition of basic objects to two subgroups, so that as a result of their unification we will obtain a series of objects. This is the reason why we call this constructor D2 constructor. Example 15 We look at ourselves as an example 12 and imagine that we have bulbs of green, yellow and blue colors, it means that we have a series of colors that {S-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X"}, {"heading": "Conclusions", "text": "This paper presents a specific approach to modeling some aspects of human thinking, in particular the creation of sets and multisets of objects within a constructive, object-oriented version of set theory proposed in [Terletskyi, 2014]. The creation of sets and multisets of objects is considered from different sides, in particular from the classical set theory, object-oriented programming and development of intelligent information systems. The paper also presents universal constructors of multisets of objects that allow us to create arbitrary multisets of objects and to recognize (identify) each copy of a particular object having a multiplicity of 2 m. In addition, some specific constructors of multisets are presented that allow the creation of multisets using strictly defined schemes. The author proposed methods for calculating the multiplication of each object and the cardinality of multisets prior to its creation for each constructor. This makes them very useful in cases of creating systems of very large objects, developing only the possibility of classification of objects proposed to us."}], "references": [{"title": "Contributions to the Founding of the Theory of Transfinite Numbers", "author": ["G. Cantor"], "venue": "New York: Dover Publications, Inc.", "citeRegEx": "Cantor. 1915", "shortCiteRegEx": null, "year": 1915}, {"title": "Thinking in Java: 4-th Edition", "author": ["B. Eckel"], "venue": "Prentice Hall", "citeRegEx": "Eckel. 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "Ye", "author": ["A.A. Fraenkel"], "venue": "Bar-Hillel. Foundations of set theory. North-Holland Publishing Company", "citeRegEx": "Fraenkel. Bar.Hillel. 1958", "shortCiteRegEx": null, "year": 1958}, {"title": "Constructible Sets with Applications", "author": ["A. Mostowski"], "venue": "North-Holland Publishing Company", "citeRegEx": "Mostowski. 1969", "shortCiteRegEx": null, "year": 1969}, {"title": "STL Tutorial and Reference Guide: 2-nd edition", "author": ["D.R. Musser", "G.J. Derge", "A. Saini"], "venue": "C++ Programming with the Standard Template Library, Addison-Wesley Professional", "citeRegEx": "Musser. Derge. Saini. 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "OOP \u2013 Learn Object Oriented Thinking and Programming", "author": ["R. Pecinovsky"], "venue": "Tomas Bruckner, RepinZivonin", "citeRegEx": "Pecinovsky. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Programming in Python 3", "author": ["M. Summerfield"], "venue": "A Complete Introduction to the Python Language: 2-nd edition. Pearson Education, Inc.", "citeRegEx": "Summerfield. 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "Mathematics of multisets. In Proceedings of the \u201cWorkshop on Multiset Processing: Multiset Processing, Mathematical, Computer Science, and Molecular Computing Points of View", "author": ["A. Syropoulos"], "venue": "[Syropoulos,", "citeRegEx": "Syropoulos.,? \\Q2001\\E", "shortCiteRegEx": "Syropoulos.", "year": 2001}, {"title": "Mathematics in the alternative set theory", "author": ["P. Vopenka"], "venue": "Leipzig: BSB B.G. Teubner", "citeRegEx": "Vopenka. 1979", "shortCiteRegEx": null, "year": 1979}, {"title": "Les Systemes Axiomatiques de la Theorie des Ensembles", "author": ["H. Wang", "R. Mc Naughton"], "venue": "Paris: Gauthier-Villars", "citeRegEx": "Wang. Mc Naughton. 1953", "shortCiteRegEx": null, "year": 1953}, {"title": "The Object-Oriented Thought Process", "author": ["M. Weisfeld"], "venue": "Third Edition. Addison-Wesley Professional", "citeRegEx": "Weisfeld. 2008", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [{"referenceID": 0, "context": "Introduction Nowadays there are different versions of set theory, such as naive set theory of Cantor [Cantor, 1915], type theory of Russell [Wang, Mc Naughton, 1953], Zermelo-Fraenkel set theory [Fraenkel, Bar-Hillel, 1958; Wang, Mc Naughton, 1953], Von Neumann-Bernays-Gedel set theory [Wang, Mc Naughton, 1953], systems of Quine's set theory [Wang, Mc Naughton, 1953], constructible sets of Mostowski [Mostowski, 1969], alternative set theory of Vopenka [Vopenka, 1979], etc.", "startOffset": 101, "endOffset": 115}, {"referenceID": 9, "context": "Introduction Nowadays there are different versions of set theory, such as naive set theory of Cantor [Cantor, 1915], type theory of Russell [Wang, Mc Naughton, 1953], Zermelo-Fraenkel set theory [Fraenkel, Bar-Hillel, 1958; Wang, Mc Naughton, 1953], Von Neumann-Bernays-Gedel set theory [Wang, Mc Naughton, 1953], systems of Quine's set theory [Wang, Mc Naughton, 1953], constructible sets of Mostowski [Mostowski, 1969], alternative set theory of Vopenka [Vopenka, 1979], etc.", "startOffset": 140, "endOffset": 165}, {"referenceID": 2, "context": "Introduction Nowadays there are different versions of set theory, such as naive set theory of Cantor [Cantor, 1915], type theory of Russell [Wang, Mc Naughton, 1953], Zermelo-Fraenkel set theory [Fraenkel, Bar-Hillel, 1958; Wang, Mc Naughton, 1953], Von Neumann-Bernays-Gedel set theory [Wang, Mc Naughton, 1953], systems of Quine's set theory [Wang, Mc Naughton, 1953], constructible sets of Mostowski [Mostowski, 1969], alternative set theory of Vopenka [Vopenka, 1979], etc.", "startOffset": 195, "endOffset": 248}, {"referenceID": 9, "context": "Introduction Nowadays there are different versions of set theory, such as naive set theory of Cantor [Cantor, 1915], type theory of Russell [Wang, Mc Naughton, 1953], Zermelo-Fraenkel set theory [Fraenkel, Bar-Hillel, 1958; Wang, Mc Naughton, 1953], Von Neumann-Bernays-Gedel set theory [Wang, Mc Naughton, 1953], systems of Quine's set theory [Wang, Mc Naughton, 1953], constructible sets of Mostowski [Mostowski, 1969], alternative set theory of Vopenka [Vopenka, 1979], etc.", "startOffset": 195, "endOffset": 248}, {"referenceID": 9, "context": "Introduction Nowadays there are different versions of set theory, such as naive set theory of Cantor [Cantor, 1915], type theory of Russell [Wang, Mc Naughton, 1953], Zermelo-Fraenkel set theory [Fraenkel, Bar-Hillel, 1958; Wang, Mc Naughton, 1953], Von Neumann-Bernays-Gedel set theory [Wang, Mc Naughton, 1953], systems of Quine's set theory [Wang, Mc Naughton, 1953], constructible sets of Mostowski [Mostowski, 1969], alternative set theory of Vopenka [Vopenka, 1979], etc.", "startOffset": 287, "endOffset": 312}, {"referenceID": 9, "context": "Introduction Nowadays there are different versions of set theory, such as naive set theory of Cantor [Cantor, 1915], type theory of Russell [Wang, Mc Naughton, 1953], Zermelo-Fraenkel set theory [Fraenkel, Bar-Hillel, 1958; Wang, Mc Naughton, 1953], Von Neumann-Bernays-Gedel set theory [Wang, Mc Naughton, 1953], systems of Quine's set theory [Wang, Mc Naughton, 1953], constructible sets of Mostowski [Mostowski, 1969], alternative set theory of Vopenka [Vopenka, 1979], etc.", "startOffset": 344, "endOffset": 369}, {"referenceID": 3, "context": "Introduction Nowadays there are different versions of set theory, such as naive set theory of Cantor [Cantor, 1915], type theory of Russell [Wang, Mc Naughton, 1953], Zermelo-Fraenkel set theory [Fraenkel, Bar-Hillel, 1958; Wang, Mc Naughton, 1953], Von Neumann-Bernays-Gedel set theory [Wang, Mc Naughton, 1953], systems of Quine's set theory [Wang, Mc Naughton, 1953], constructible sets of Mostowski [Mostowski, 1969], alternative set theory of Vopenka [Vopenka, 1979], etc.", "startOffset": 403, "endOffset": 420}, {"referenceID": 8, "context": "Introduction Nowadays there are different versions of set theory, such as naive set theory of Cantor [Cantor, 1915], type theory of Russell [Wang, Mc Naughton, 1953], Zermelo-Fraenkel set theory [Fraenkel, Bar-Hillel, 1958; Wang, Mc Naughton, 1953], Von Neumann-Bernays-Gedel set theory [Wang, Mc Naughton, 1953], systems of Quine's set theory [Wang, Mc Naughton, 1953], constructible sets of Mostowski [Mostowski, 1969], alternative set theory of Vopenka [Vopenka, 1979], etc.", "startOffset": 456, "endOffset": 471}, {"referenceID": 4, "context": "As a proof, there are appropriate tools within some OOP-languages for working with such data structure, in particular set in STL for C++ [Musser, Derge, Saini, 2001], HashSet, SortedSet and ISet in C# [Mukherjee, 2012], HashSet in Java [Eckel, 2006], set and frozenset in Python [Summerfield, 2010].", "startOffset": 137, "endOffset": 165}, {"referenceID": 1, "context": "As a proof, there are appropriate tools within some OOP-languages for working with such data structure, in particular set in STL for C++ [Musser, Derge, Saini, 2001], HashSet, SortedSet and ISet in C# [Mukherjee, 2012], HashSet in Java [Eckel, 2006], set and frozenset in Python [Summerfield, 2010].", "startOffset": 236, "endOffset": 249}, {"referenceID": 6, "context": "As a proof, there are appropriate tools within some OOP-languages for working with such data structure, in particular set in STL for C++ [Musser, Derge, Saini, 2001], HashSet, SortedSet and ISet in C# [Mukherjee, 2012], HashSet in Java [Eckel, 2006], set and frozenset in Python [Summerfield, 2010].", "startOffset": 279, "endOffset": 298}, {"referenceID": 0, "context": "Everything, phenomena of our imagination or of our world can be the elements of the set [Cantor, 1915].", "startOffset": 88, "endOffset": 102}, {"referenceID": 5, "context": "From other hand, one of the main postulates of OOP is that real world is created by objects [Pecinovsky, 2013].", "startOffset": 92, "endOffset": 110}, {"referenceID": 10, "context": "\u0084 In OOP, programmers consider specifications and methods of objects without objects, and they call it a type or a class of objects, which consists of fields and methods [Weisfeld, 2008; Pecinovsky, 2013].", "startOffset": 170, "endOffset": 204}, {"referenceID": 5, "context": "\u0084 In OOP, programmers consider specifications and methods of objects without objects, and they call it a type or a class of objects, which consists of fields and methods [Weisfeld, 2008; Pecinovsky, 2013].", "startOffset": 170, "endOffset": 204}, {"referenceID": 0, "context": "Sets and Multisets of Objects According to Naive set theory, a set is a gathering together into a whole of definite, distinct objects of our perception or of our thought, which are called elements of the set [Cantor, 1915].", "startOffset": 208, "endOffset": 222}, {"referenceID": 7, "context": "As we know, multiset is a generalization of the notion of set in which members are allowed to appear more than once [Syropoulos, 2001].", "startOffset": 116, "endOffset": 134}], "year": 2015, "abstractText": "This paper contains analysis of creation of sets and multisets as an approach for modeling of some aspects of human thinking. The creation of sets is considered within constructive object-oriented version of set theory (COOST), from different sides, in particular classical set theory, object-oriented programming (OOP) and development of intelligent information systems (IIS). The main feature of COOST in contrast to other versions of set theory is an opportunity to describe essences of objects more precisely, using their properties and methods, which can be applied to them. That is why this version of set theory is object-oriented and close to OOP. Within COOST, the author proposes universal constructor of multisets of objects that gives us a possibility to create arbitrary multisets of objects. In addition, a few determined constructors of multisets of objects, which allow creating multisets, using strictly defined schemas, also are proposed in the paper. Such constructors are very useful in cases of very big cardinalities of multisets, because they give us an opportunity to calculate a multiplicity of each object and cardinality of multiset before its creation. The proposed constructors of multisets of objects allow us to model in a sense corresponding processes of human thought, that in turn give us an opportunity to develop IIS, using these tools.", "creator": "PScript5.dll Version 5.2.2"}}}