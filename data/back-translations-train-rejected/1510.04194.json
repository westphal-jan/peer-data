{"id": "1510.04194", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Oct-2015", "title": "Object-Oriented Dynamic Networks", "abstract": "This paper contains description of such knowledge representation model as Object-Oriented Dynamic Network (OODN), which gives us an opportunity to represent knowledge, which can be modified in time, to build new relations between objects and classes of objects and to represent results of their modifications. The model is based on representation of objects via their properties and methods. It gives us a possibility to classify the objects and, in a sense, to build hierarchy of their types. Furthermore, it enables to represent relation of modification between concepts, to build new classes of objects based on existing classes and to create sets and multisets of concepts. OODN can be represented as a connected and directed graph, where nodes are concepts and edges are relations between them. Using such model of knowledge representation, we can consider modifications of knowledge and movement through the graph of network as a process of logical reasoning or finding the right solutions or creativity, etc. The proposed approach gives us an opportunity to model some aspects of human knowledge system and main mechanisms of human thought, in particular getting a new experience and knowledge.", "histories": [["v1", "Wed, 14 Oct 2015 16:39:30 GMT  (664kb)", "http://arxiv.org/abs/1510.04194v1", "arXiv admin note: text overlap witharXiv:1510.04183"]], "COMMENTS": "arXiv admin note: text overlap witharXiv:1510.04183", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["dmytro terletskyi", "alexandr provotar"], "accepted": false, "id": "1510.04194"}, "pdf": {"name": "1510.04194.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Dmytro Terletskyi", "Alexandr Provotar"], "emails": [], "sections": [{"heading": null, "text": "Dynamic Network (OODN), which gives us the ability to represent knowledge that can be modified over time, to establish new relationships between objects and object classes, and to represent the results of their modifications; the model is based on the representation of objects on their properties and methods; it gives us the ability to classify the objects and, in a certain sense, build hierarchy of their types; furthermore, it allows to represent the relationship of modification between concepts, to form new classes of objects on the basis of existing classes, and to create sets and multisets of concepts. OODN can be represented as a coherent and directed graph in which nodes are concepts and edges relations between them. With such a model of knowledge representation, we can view modifications of knowledge and movement through the graph of the network as a process of logical thinking or finding the right solutions or creativity."}, {"heading": "Introduction", "text": "Modern AI encompasses many directions that differ from each other, but at the same time they have something in common. One of the main objectives for researchers of all these directions is to develop intelligent information systems (IIS) to solve certain practical problems in relevant areas. Nowadays, the development of IIS is often reduced to heuristic programming. Nevertheless, there are a variety of IIS that are based on knowledge representation models (KRM). The most famous and common are semantic networks, concept dependence, frameworks, scripts, logical and production models, ontologies, etc. Each of these models has its own specifications and is useful in that area. However, we must implement an RRM while developing certain IIS. Therefore, our IIS will have at least two levels: the level of the KR model and the level of its practical implementation."}, {"heading": "Object-Oriented Knowledge Representation Models", "text": "There are many different types of KR models. However, as in the case of Prolog, if we want to use an OOP language as a tool for implementing IIS, we need to use certain object-oriented KR models as a basis for them. However, most object-oriented KR models are frames and scripts, so we should consider some of their basic and important aspects. Generally, the frame consists of a series of slots in which the corresponding value for each slot is assigned. Each slot has a filler for itself and in this way it provides information about one of the attributes of the frame. In addition, some of the fillers can be used as frames. There are two types of frames: There are two types of frames that are used for individual frames: individual frames that are used for individual objects, and generic types that are used for representing objects."}, {"heading": "Objects and Classes", "text": "The difference between them is that they represent different types of objects and classes. Frames represent relationships between some objects and classes that create a hierarchy in such a way. Scripts represent actions and relationships between them, which also creates some properties of their objects and classes. (This is why we look at some features of their objects and classes and try to find out what constitutes an object and a class.) In OOP object and class are the most important concepts. Objects are the building blocks for the objects and classes in which they are located. We associate these blocks with the real world during the development of programs: attributes and behaviors are properties of objects that describe them."}, {"heading": "Operations on Objects and Classes of Objects", "text": "As mentioned above, OOP objects have methods, but most of them are local in terms of objects and cannot be applied to objects of different types (i.e. they are not polymorphic. Of course, there are some methods that we can apply to objects of different types, but normally we have to use (Stroustrup, 2013) overload operators (T). Nevertheless, the union, the difference, the symmetric difference and cloning operations can be applied to objects and classes of objects in [Terletskyi, Provotar, 2014]. These operations have a set theory nature and they are universal in this sense, as they can be applied to all objects and classes of objects regardless of their properties. We will not focus much attention on these operations and consider only some examples of their use. Example 8. Let us consider such geometric objects as triangles, squares and trapezoids. It is obvious that these objects belong to different classes of convex polygons."}, {"heading": "Object-Oriented Dynamic Networks", "text": "Taking into account the advantages and disadvantages of previously object-oriented KR models, we have tried to propose new object-oriented KRM ({} ({}) (Object-oriented dynamic network is a 5-tuple (,,) ODN O R E M, where: O - a set of objects; C - a set of objects describing objects from sentence O; R - a set of relations defined on sentence O and C; E - a set of exploiters defined on sentence O and C; M - a set of modifiers defined on sentence O and C. As you can see, this model uses concepts of objects, object class, and operations on them that were previously formulated."}, {"heading": "Conclusions", "text": "This thesis contains analyses of such common object-oriented RRM as frames and scripts, which were considered advantages and disadvantages. Furthermore, concepts of object and class were considered from different sides, especially from the side of the OOP. The concepts of object and class of objects, which differ from the version of the OOP, and operations on them, which give us the possibility to create new object-oriented objects and new classes of objects, especially inhomogeneous, were proposed. Operations have a definition-theoretical character and are quite general, which gives us the possibility to apply them to any object and class of objects. The main result of this work is new object-oriented RRM - object-oriented dynamic network. It gives us the possibility to represent knowledge, which can be modified over time, to establish new relationships between objects and classes of objects and to represent the results of their modifications. OODN is based on the representation of objects and classes about their properties and methods."}], "references": [{"title": "Knowledge Representation: Logical", "author": ["J.F. Sowa"], "venue": "Philosophical and Computational Foundations. \u2013 Brooks/Cole", "citeRegEx": "Sowa. 2000", "shortCiteRegEx": null, "year": 2000}, {"title": "Knowledge Representation and Reasoning", "author": ["R.J. Brachman", "H.J. Levesque"], "venue": "\u2013 Morgan Kaufmann Publishers", "citeRegEx": "Brachman. Levesque. 2004", "shortCiteRegEx": null, "year": 2004}, {"title": "An Introduction to Knowledge Engineering", "author": ["S.L. Kendal", "M. Creen"], "venue": "\u2013 Springer Verlag", "citeRegEx": "Kendal. Creen. 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "Artificial Intelligence", "author": ["G.F. Luger"], "venue": "Structures and Strategies for Complex Problem Solving: 6-th edition. \u2013 Addison-Wesley", "citeRegEx": "Luger. 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "Jones and Bartlett Publishers", "author": ["B. Coppin. Artificial intelligence illuminated"], "venue": "Inc.", "citeRegEx": "Coppin. 2004", "shortCiteRegEx": null, "year": 2004}, {"title": "Knowledge Representation and Metaphor", "author": ["E.C. Way"], "venue": "\u2013 Springer Science + Business Media, B.V.", "citeRegEx": "Way. 1991", "shortCiteRegEx": null, "year": 1991}, {"title": "Knowledge-Based Image Processing Systems", "author": ["D. Graham", "A. Barrett"], "venue": "\u2013 SpringerVerlag", "citeRegEx": "Graham. Barrett. 1997", "shortCiteRegEx": null, "year": 1997}, {"title": "The Object-Oriented Thought Process", "author": ["M. Weisfeld"], "venue": "Third Edition. \u2013 Addison-Wesley Professional", "citeRegEx": "Weisfeld. 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "OOP \u2013 Learn Object Oriented Thinking and Programming", "author": ["R. Pecinovsk\u00fd"], "venue": "\u2013 Tom\u00e1\u0161 Bruckner, \u0158ep\u00edn-\u017divon\u00edn", "citeRegEx": "Pecinovsk\u00fd. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "The C+ + Programming Language: Fourth Edition", "author": ["B. Stroustrup"], "venue": "\u2013 Addison-Wesley Professional", "citeRegEx": "Stroustrup. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Mathematical Foundations for Designing and Development of Intelligent Systems of Information Analysis", "author": ["Terletskyi", "Provotar", "2014] D.O. Terletskyi", "A.I. Provotar"], "venue": "Scientific Journal \u201cProblems in Programing\u201d,", "citeRegEx": "Terletskyi et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Terletskyi et al\\.", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "programming languages have been extended to object-oriented languages: C to C++; Prolog to Object Prolog; COBOL to Object COBOL; SQL to OQL; and LISP to COOL [Sowa, 2000].", "startOffset": 158, "endOffset": 170}, {"referenceID": 1, "context": "According to [Brachman, Levesque, 2004], there are two types of frames: individual frames, which are used for representation of single objects, and generic frames, which are used for representation of classes of objects.", "startOffset": 13, "endOffset": 39}, {"referenceID": 2, "context": "Analyzing structure of the frames, we can conclude about such their advantages as ability to be represented in the form of a table; to store and use default values in the reasoning process; ability to be structured hierarchically and thus allow easy classification of knowledge; to combine procedural and declarative knowledge using one knowledge representation scheme; to constrain allowed values, or make values be entered within a specific range [Kendal, Creen, 2007].", "startOffset": 449, "endOffset": 470}, {"referenceID": 3, "context": "It also provides a common way to represent stereotypic entities, classes, inheritance, and default values [Luger, 2008].", "startOffset": 106, "endOffset": 119}, {"referenceID": 1, "context": "Frame systems tend to have a centralized, conventional control regime, whereas OOP systems have objects acting as small, independent agents sending each other messages, that is why, there can be some applications for which a frame-based system can provide some advantages over a more generic OOP system [Brachman, Levesque, 2004].", "startOffset": 303, "endOffset": 329}, {"referenceID": 4, "context": "Likewise, frames can be used as a data structure for Expert Systems [Coppin, 2004].", "startOffset": 68, "endOffset": 82}, {"referenceID": 2, "context": "They do not provide the most efficient method to store data for a computer; can lead to \u201cprocedural fever\u201d; require care in the design stage to ensure that suitable taxonomies [Kendal, Creen, 2007].", "startOffset": 176, "endOffset": 197}, {"referenceID": 5, "context": "particular subtype may have more than one supertype from which it can inherit properties, which may conflict [Way, 1991; Coppin, 2004].", "startOffset": 109, "endOffset": 134}, {"referenceID": 4, "context": "particular subtype may have more than one supertype from which it can inherit properties, which may conflict [Way, 1991; Coppin, 2004].", "startOffset": 109, "endOffset": 134}, {"referenceID": 5, "context": "Therefore, instead of analyzing and building descriptions of each new situation as it occurs, people draw on a large collection of structures, which represents their previous experience with objects, people, and situations, and use these past expectations to guide them in analyzing and representing new experiences [Way, 1991].", "startOffset": 316, "endOffset": 327}, {"referenceID": 6, "context": "These problems are not unique to script technology but are inherent in the problem of modelling semantic meaning [Graham, Barrett, 1997].", "startOffset": 113, "endOffset": 136}, {"referenceID": 7, "context": "Attributes are properties of object, which describe it, and behaviors are procedures, functions (methods) which we can apply to this object and change its state, form and so on [Weisfeld, 2008].", "startOffset": 177, "endOffset": 193}, {"referenceID": 8, "context": "Real world consists of objects, and OOP is the approach for description and simulation of this world or some its particular parts [Pecinovsk\u00fd, 2013].", "startOffset": 130, "endOffset": 148}, {"referenceID": 7, "context": "In other words, classes are blueprints, which we use as the basis for objects building [Weisfeld, 2008].", "startOffset": 87, "endOffset": 103}, {"referenceID": 9, "context": "Of course, there are some methods, which we can apply to objects of different types, but usually we need to use overloading operators for it [Stroustrup, 2013].", "startOffset": 141, "endOffset": 159}, {"referenceID": 9, "context": "Furthermore, some of the OOP languages provide multiple inheritance, in particular C++ [Stroustrup, 2013].", "startOffset": 87, "endOffset": 105}], "year": 2014, "abstractText": "This paper contains description of such knowledge representation model as Object-Oriented Dynamic Network (OODN), which gives us an opportunity to represent knowledge, which can be modified in time, to build new relations between objects and classes of objects and to represent results of their modifications. The model is based on representation of objects via their properties and methods. It gives us a possibility to classify the objects and, in a sense, to build hierarchy of their types. Furthermore, it enables to represent relation of modification between concepts, to build new classes of objects based on existing classes and to create sets and multisets of concepts. OODN can be represented as a connected and directed graph, where nodes are concepts and edges are relations between them. Using such model of knowledge representation, we can consider modifications of knowledge and movement through the graph of network as a process of logical reasoning or finding the right solutions or creativity, etc. The proposed approach gives us an opportunity to model some aspects of human knowledge system and main mechanisms of human thought, in particular getting a new experience and knowledge.", "creator": "Microsoft\u00ae Office Word 2007"}}}