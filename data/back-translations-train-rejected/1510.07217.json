{"id": "1510.07217", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Oct-2015", "title": "An Efficient Implementation for WalkSAT", "abstract": "Stochastic local search (SLS) algorithms have exhibited great effectiveness in finding models of random instances of the Boolean satisfiability problem (SAT). As one of the most widely known and used SLS algorithm,WalkSAT plays a key role in the evolutions of SLS for SAT, and also hold state-ofthe- art performance on random instances. This work proposes a novel implementation forWalkSAT which decreases the redundant calculations leading to a dramatically speeding up, thus dominates the latest version of WalkSAT including its advanced variants.", "histories": [["v1", "Sun, 25 Oct 2015 08:11:32 GMT  (26kb,D)", "https://arxiv.org/abs/1510.07217v1", "5 pages, 1 figure"], ["v2", "Wed, 2 Dec 2015 03:54:23 GMT  (6kb)", "http://arxiv.org/abs/1510.07217v2", "5 pages"], ["v3", "Fri, 4 Dec 2015 09:47:18 GMT  (6kb)", "http://arxiv.org/abs/1510.07217v3", "5 pages"]], "COMMENTS": "5 pages, 1 figure", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["sixue liu"], "accepted": false, "id": "1510.07217"}, "pdf": {"name": "1510.07217.pdf", "metadata": {"source": "CRF", "title": "An Efficient Implementation for WalkSAT", "authors": ["Sixue Liu"], "emails": ["sixueliu@gmail.com"], "sections": [{"heading": null, "text": "ar Xiv: 151 0.07 217v 3 [cs.A I] 4 D"}, {"heading": "1 Introduction", "text": "This paper is dedicated to the more efficient implementation of the SLS algorithm based on a focused random walk framework. We propose a new scheme called Separated-Non-Caching to calculate the fraction value, which reduces some unnecessary calculations and improves efficiency. By combining all of these factors, we are designing a new SAT solver called WalkSNC (WalkSAT with Separated-Non-Caching).The experimental results show that WalkSNC significantly outperforms the latest version of WalkSAT including its state-of-the-art variants, especially on large-scale benchmarks. The SAT competition has been held for more than 10 years to evaluate modern SAT solvers. Our benchmark includes random k-SAT instances at the phase transition point of the SAT contest in 2013 and 2014, and many larger instances generated by the uniform random-SAT generator generator and then presented separately. The rest of this paper is as follows: Some of the necessary results will be presented in the Notes section and some will be presented below."}, {"heading": "2 Preliminaries", "text": "Considering a conjunctive normal form (CNF) formula F = c1 \u0445... \u0445 cm on a variable set V = {v1, v2,..., vn}, where ci is a sentence and consists of literals: Boolean variables or their negations. A k-SAT formula is a CNF in which each sentence contains at most k literals. The ratio of a CNF is defined as the ratio of the number of clauses and the number of variables. An assignment \u03b1 is called complete if it corresponds to any variable with TRUE or FALSE. We say a literal is a true alphabet if it evaluates the variables with TRUE under \u03b1. The task of the SAT problem is to answer whether there is a complete assignment so that all clauses are satisfied. SLS algorithms under focused random frame F first choose a dissatisfied clause c, then choose a flip variable of c according to some rules (1)."}, {"heading": "2.1 Separated-non-caching Technology", "text": "In this section, we propose a more efficient implementation that includes all variables that are not caching capable to avoid unnecessary calculations. In this section, the caching system updates all information including the break value of each variable. However, if there is one variable with the break value of the other variable, the other variable is useless. We try to reduce the wasteful calculations and compensate only what we need. In our new implementation, we only update the dissatisfied clauses \"set\" and the true letters of the individual clauses. \""}, {"heading": "3 Experimental Evaluations", "text": "We conduct large-scale experiments to evaluate WalkSNC at random k-SAT instances at the phase transition point."}, {"heading": "3.1 The Benchmarks", "text": "The experiments for k-SAT (k > 3) are not reported here, but shown in the full version. \u2022 SC13: 50 different variables Instances with ratio = 4.267. \u2022 SC14: 30 different variables Instances with ratio = 4.267. \u2022 SC13: 50 different variables Instances with ratio = 4.267. \u2022 V-105: Generated by the SAT Challenge 2012 Generator with 50 instances for 100,000 variables, ratio = 4.2. \u2022 V-106: Generated by the SAT Challenge 2012 Generator with 50 instances for 1,000,000 variables, ratio = 4.2."}, {"heading": "3.2 The Competitors", "text": "We compare WalkSNC with the latest version of WalkSAT, which has been downloaded from the WalkSAT homepage 3, and a modern implementation based on non-cache WalkSATlm and its variant probSAT, which is the championship of the 2013 SAT competition."}, {"heading": "3.3 Evaluation Methodology", "text": "The cutoff time is 5000 seconds as in SAT Competition 2013 and 2014, which is enough to test the performance of the SAT solvers. Each run ends with a satisfactory run within the cutoff time. We run each solver ten times for each instance of SAT Competition 2013 and 2014, giving 500 runs for each class. We report \"suc\" as the ratio of successful runs to total runs, as well as \"par10\" as the punished average run time (an unsuccessful run is punished with 10 x cutoff time). The result in bold indicates the best performance for a class. All experiments are performed on our machine with Intel Core Xeon E5-2650 2.60GHz CPU and 32 GB of memory under Linux."}, {"heading": "3.4 Experimental Results", "text": "Table 1 shows the comparative results of WalkSNC and its state-of-the-art competitors at the 3-SAT threshold. WalkSNC performs best, while the others perform relatively poorly. Given the constant acceleration, the average time over all successful runs of WalkSATv51 is almost 1.5 times that of WalkSNC, and WalkSATlm is also 25% slower than us. Comparing the data we report in paragraph 10 is even clearer."}, {"heading": "4 Conclusions and Future Work", "text": "This work opens up a whole new avenue of research into improving SLS for SAT: instead of calculating and using additional and accurate information from variables to decide which to reverse, there are many more things that need to be unearthed from the simple information. Most importantly, there is a balance between the cost of their calculation and the benefits they bring. Furthermore, this new technology can easily be adapted to new algorithms based on WalkSAT and probSAT."}], "references": [{"title": "Improving walksat by effective tie-breaking and efficient implementation", "author": ["Shaowei Cai", "Chuan Luo", "Kaile Su"], "venue": "The Computer Journal, page bxu135,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Configuration checking with aspiration in local search for sat", "author": ["Shaowei Cai", "Kaile Su"], "venue": "In AAAI,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "Ubcsat: An implementation and experimentation environment for sls algorithms for sat and max-sat", "author": ["Dave AD Tompkins", "Holger H Hoos"], "venue": "In Theory and Applications of Satisfiability Testing,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2005}], "referenceMentions": [{"referenceID": 1, "context": "Some recent SLS algorithms also utilize some other information of variables to obtain more complex rules [3]: the neighborhood of a variable v are all the variables that occur in at least one same clause with v.", "startOffset": 105, "endOffset": 108}, {"referenceID": 2, "context": "The latest version of probSAT uses caching scheme with XOR technology [1], while WalkSAT in UBCSAT framework [4] and the latest version of WalkSATlm [2] are under non-caching implementation.", "startOffset": 109, "endOffset": 112}, {"referenceID": 0, "context": "The latest version of probSAT uses caching scheme with XOR technology [1], while WalkSAT in UBCSAT framework [4] and the latest version of WalkSATlm [2] are under non-caching implementation.", "startOffset": 149, "endOffset": 152}], "year": 2015, "abstractText": "Stochastic local search (SLS) algorithms have exhibited great effectiveness in finding models of random instances of the Boolean satisfiability problem (SAT). As one of the most widely known and used SLS algorithm, WalkSAT plays a key role in the evolutions of SLS for SAT, and also hold stateof-the-art performance on random instances. This work proposes a novel implementation for WalkSAT which decreases the redundant calculations leading to a dramatically speeding up, thus dominates the latest version of WalkSAT including its advanced variants.", "creator": "LaTeX with hyperref package"}}}