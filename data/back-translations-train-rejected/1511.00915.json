{"id": "1511.00915", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Nov-2015", "title": "SWISH: SWI-Prolog for Sharing", "abstract": "Recently, we see a new type of interfaces for programmers based on web technology. For example, JSFiddle, IPython Notebook and R-studio. Web technology enables cloud-based solutions, embedding in tutorial web pages, atractive rendering of results, web-scale cooperative development, etc. This article describes SWISH, a web front-end for Prolog. A public website exposes SWI-Prolog using SWISH, which is used to run small Prolog programs for demonstration, experimentation and education. We connected SWISH to the ClioPatria semantic web toolkit, where it allows for collaborative development of programs and queries related to a dataset as well as performing maintenance tasks on the running server and we embedded SWISH in the Learn Prolog Now! online Prolog book.", "histories": [["v1", "Tue, 3 Nov 2015 14:16:31 GMT  (751kb,D)", "http://arxiv.org/abs/1511.00915v1", "International Workshop on User-Oriented Logic Programming (IULP 2015), co-located with the 31st International Conference on Logic Programming (ICLP 2015), Proceedings of the International Workshop on User-Oriented Logic Programming (IULP 2015), Editors: Stefan Ellmauthaler and Claudia Schulz, pages 99-113, August 2015"]], "COMMENTS": "International Workshop on User-Oriented Logic Programming (IULP 2015), co-located with the 31st International Conference on Logic Programming (ICLP 2015), Proceedings of the International Workshop on User-Oriented Logic Programming (IULP 2015), Editors: Stefan Ellmauthaler and Claudia Schulz, pages 99-113, August 2015", "reviews": [], "SUBJECTS": "cs.PL cs.AI", "authors": ["jan wielemaker", "torbj\\\"orn lager", "fabrizio riguzzi"], "accepted": false, "id": "1511.00915"}, "pdf": {"name": "1511.00915.pdf", "metadata": {"source": "CRF", "title": "SWISH: SWI-Prolog for Sharing", "authors": ["Jan Wielemaker", "Fabrizio Riguzzi"], "emails": ["J.Wielemaker@vu.nl", "Torbjorn.Lager@ling.gu.se", "Fabrizio.Riguzzi@unife.it"], "sections": [{"heading": "1 Introduction", "text": "All major modern browsers now implement HTML5 and JavaScript, and mature components are available, such as the CodeMirror4 and ACE5 code editors, the Bootstrap6 framework for styling and UI widgets, and visualization libraries such as D3.js.7. Using web technology instead of traditional GUI-based technologies such as Eclipse, 8 Microsoft Visual Studio, 9 XEmacs, 10, etc., has several advantages. Being network transparent, it allows you to control cloud-hosted applications as well as prolog processes running on headless devices. Web technology provides a great infrastructure for mashups, pages that integrate material from multiple sources. For example, embedding prolog in tutorial pages or embedding prolog queries that can be changed and re-evaluated."}, {"heading": "2 Related work", "text": "We are not comparing SWISH to traditional editor or GUI-based development environments for Prolog because web-based environments offer new possibilities and new challenges. Instead, we are discussing three applications that inspired SWISH: JSFiddle, 12 R-Studio13 and IPython Notebook.14- As mentioned earlier, the original inspiration for SWISH was JSFiddle. Unlike JSFiddle, however, Prolog is run on the server and not in the browser. - R-Studio [2] is an interface to the R Statistics Package. Although it is not a web application, it is based on the Qt Webkit Framework and uses web-based technology in the background. R-Studio came to the fore when the COMMIT / project provided a subsidy for the development of SWISH as a toolkit for the analysis of relational (SQL) data."}, {"heading": "3 The SWISH application", "text": "SWISH consists of two parts: the client side running in a browser is implemented as a series of jQuery plugins, using bootstrap for styling and RequireJS15 for package management; the server side is fully implemented in SWI-Prolog [7]; it builds on the SWI-Prolog HTTP server libraries, the Pengines library, and the IDE support libraries, which provide data for automatic completion, documentation, and highlighting. In the following sections, we describe SWISH in terms of interface components, where we discuss the requirements, user aspects, client code, and supporting server functionality for each component."}, {"heading": "3.1 The code editor", "text": "This year, the time has come for a reactionary U-turn, capable of changing the world and changing it in order to change the world."}, {"heading": "3.2 Source code and query management", "text": "The current version of SWISH explicitly targets the cooperative development of prolog programs and queries related to a data set (see Section 5.2), which triggered the implementation of a more organized storage setup. The server-side storage module is implemented in Prolog and inspired by GIT. Each file is versioned independently, rather than maintaining the version of a file hierarchy. Files can be referenced by contents using their GIT-compatible SHA1 hash or name. The name can be viewed as a version header and refers to the newest version with that name. The file saving and loading interface provides the following operations: - anonymously saving a file that generates a randomly generated JSFiddle-like URL. - Saving a file by name. - Saving a new version indicates the available versions and modifications. & appery?"}, {"heading": "3.3 The query editor", "text": "The query editor is based on the same jQuery plugin that implements the code editor, benefiting from syntax highlighting, template insertion, and floating plugins. In addition, there are three pop-up menus available: Examples This menu is filled from the structured comments described above, and the example menu is presented in Figure 6. History This menu provides queries executed earlier. Solutions This menu embeds an existing query in a meta call to modify the result. Frequently provided operations are aggregates (count all), order by, distinct, limit, time, and debug (trace). Figure 3 shows how the menu is used to count the solutions of a target."}, {"heading": "3.4 Running a query: runners in the answer pane", "text": "The answer is a runner placeholder, where each runner represents a query, and the answer pane provides a menu for operations on all runners in it. Provided the actions are all, Expand all, Stop all and Clear. The query can be completed, runs or waits for user input. SWISH can manage multiple active queries simultaneously, up to an application that is maximum defined (default 3). Each runner provides its own set of commands to control the specific query. During execution, a runner provides an abort button. After the query, an answer and further answers will be available to query the next 1, 10, 100 or 1,000 results. In addition, the runner displays a text input field when the application wants to read input and can display debugger interaction buttons when the tracer is used (see Section 3.4).A runner can provide answers in two modes, classic prolog mode or as a table, similar to many interfaces."}, {"heading": "4 Portability", "text": "The SWISH client libraries are based on mature and well maintained JavaScript libraries. The client runs all major browsers with HTML5, CSS and JavaScript support. It is frequently tested on FireFox, Chrome, Safari and Internet Explorer. The server code is essentially non-portable. Many of the libraries and features required are shared with at least one other prolog implementation, but none is capable of supporting the full bandwidth. Below, we summarize the most important issues. The scope of the prolog libraries involved requires a tightly compatible prolog module system."}, {"heading": "5 Applications", "text": "In this section we describe and evaluate four publicly available SWISH applications. All of these services are regularly updated to run the latest version of SWISH and SWIProlog."}, {"heading": "5.1 SWISH", "text": "SWISH21 operates a simple publicly available version of SWISH that allows sandboxed programs to operate (see Section 3.4). Between September 29, 2014 and June 2, 2015, the server collected 10,800 programs and executed 258,809 prolog queries during the month of May 2015. The site is regularly used by users of the # # prolog IRC channel to discuss programming solutions and is actively used for education.2221 http: / / swish.swi-prolog.org 22 Steve Matuszek, UMBC (via email: \"Thank you for this fantastic resource! I used prolog during the prolog lesson this semester and it really helped my students streamline the loop. We spent zero time installing tools and other overheads and all the time understanding the concepts. I even got them to do their tasks through SWISH, with their test queries in the sample block.\""}, {"heading": "5.2 ClioPatria", "text": "ClioPatria is a semantic web (RDF) framework for SWI prolog. It consists of a triple RDF memory, a SPARQL server and a web front-end to manage the server and explore the data in the RDF memory. ClioPatria can be extended by cpacks (ClioPatria pack or plugin). SWISH is available as ClioPatria cpack23 and makes the prolog shell available for both queries and maintenance tasks. Without login, the user can perform side-effect-free queries on the data stored in ClioPatria's RDF database. Once logged in with administrative rights, the sandbox restrictions are lifted and the prolog shell can be used for maintenance tasks on the RDF data such as data transformation, cleanup, etc., as well as for program maintenance tasks such as reloading modified source files. SWISH was used within the framework of Europe Talk Creative to explore European data in the Camp 24."}, {"heading": "5.3 Learn Prolog Now!", "text": "The proxy identifies and classifies the code fragments in terms of \"source code\" queries and dependencies. Next, it adds a button to the source fragments that, when pressed, add < pre > element to the HTML element in < iframe > running SWISH filled with the source, while the example queries are added to the Examples menu (figure 6). The queries are executed from http: / swish.swi-prolog.org."}, {"heading": "5.5 TRILL on SWISH", "text": "TRILL on SWISH29 is a probabilistic OWL argumentator that reuses SWISH. Like SWISH on ClioPatria, described in Section 5.2, it is a ClioPatria CPack. The prolog source window is replaced by an RDF / XML editor window that can be used to upload an OWL ontology, while the query editor can be used to suggest prolog queries against OWL 29 http: / / trill.lamping.unife.it / ontology. The probability of queries is calculated using TRILL [8], an argumentator in Prolog that applies the distribution semantics to probable description logics. Also, for TRILL on SWISH, we only had to modify the JavaScript code for the runner. The source code sent to the pengine is executed by adding prolog code to parse a DF / RMS parsing string, by invoking the parsing XL and the prescript tactic."}, {"heading": "6 Future work", "text": "We are confident that the basic component selection and organization of the server and client code are stable. More work is needed to improve the current system. In particular, the semantic highlighting is not yet perfect and is often not gradually degraded if the server-side annotations do not perfectly match the client tokens. The current server often suffers from memory leaks and stability issues, while several vulnerabilities have already been reported and fixed. It is, and is always likely to be, advised to run public SWISH-enabled services in an operating system sandbox. The current server suffers from memory leaks and stability issues. Although the situation has improved significantly, the main demo server needs to be restarted about once a week.30We are seeing several enhancements to SWISH that improve current applications and new possibilities for using SWISH ClioPatria's authorized use of SWISH showing some of the ways to control servers or embedded prolog engines."}, {"heading": "7 Conclusion", "text": "SWISH provides a web-enabled interface to Prolog, based on ideas from JSFiddle, R-Studio and IPython Notebook. SWISH consists of a JavaScript client page, while the server page is based on SWIProlog's HTTP and Pengines libraries (prolog engines). SWISH can be used in many areas, such as education, data analysis and server development and maintenance. SWISH as a whole is bound to SWI Prolog, but other languages, not even prolog-only, can be controlled by SWI Prolog. SWISH is provided as open source and can be downloaded from github.31."}, {"heading": "Acknowledgements", "text": "The development of SWISH was supported by the Dutch national programme COMMIT /."}], "references": [{"title": "Reproducible Research with R and R Studio", "author": ["Christopher Gandrud"], "venue": "CRC Press,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Pengines: Web logic programming made easy", "author": ["Torbj\u00f6rn Lager", "Jan Wielemaker"], "venue": "TPLP, 14(4-5):539\u2013552,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Well-definedness and efficient inference for probabilistic logic programming under the distribution semantics", "author": ["Fabrizio Riguzzi", "Terrance Swift"], "venue": "Theory Pract. Log. Program.,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Learning IPython for interactive computing and data visualization", "author": ["Cyrille Rossant"], "venue": "Packt Publishing Ltd,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "PlDoc: Wiki style literate programming for Prolog", "author": ["Jan Wielemaker", "Anjo Anjewierden"], "venue": "Proceedings of the 17th Workshop on Logic-Based methods in Programming Environments,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2007}, {"title": "Semantics and inference for probabilistic description logics. In Uncertainty Reasoning for the Semantic Web III, volume 8816 of LNCS, pages 79\u201399", "author": ["Riccardo Zese", "Elena Bellodi", "Evelina Lamma", "Fabrizio Riguzzi", "Fabiano Aguiari"], "venue": "https://github.com/SWI-Prolog/swish", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}], "referenceMentions": [{"referenceID": 1, "context": "For executing Prolog queries, SWISH relies on Pengines (Prolog engines, [3]).", "startOffset": 72, "endOffset": 75}, {"referenceID": 0, "context": "\u2013 R-Studio [2] is an interface to the R statistical package.", "startOffset": 11, "endOffset": 14}, {"referenceID": 3, "context": "\u2013 IPython Notebook [5] allows mixing markdown or HTML text with Python sources.", "startOffset": 19, "endOffset": 22}, {"referenceID": 4, "context": "The libraries that implement this analysis have been decoupled from the built-in editor, both to support source colouring for the SWI-Prolog documentation system PlDoc [6] and ProDT16", "startOffset": 168, "endOffset": 171}, {"referenceID": 1, "context": "Server side execution of the query Server-side execution of a query is supported by the Pengines [3] library.", "startOffset": 97, "endOffset": 100}, {"referenceID": 0, "context": "?- maplist(plus(1), [1,2,3])", "startOffset": 20, "endOffset": 27}, {"referenceID": 1, "context": "?- maplist(plus(1), [1,2,3])", "startOffset": 20, "endOffset": 27}, {"referenceID": 2, "context": "The computation of the probability is done with the cplint system [4] in the server using", "startOffset": 66, "endOffset": 69}, {"referenceID": 5, "context": "The probability of queries is computed using TRILL [8], a reasoner in Prolog that adopts the distribution semantics for probabilistic description logics.", "startOffset": 51, "endOffset": 54}], "year": 2016, "abstractText": "Recently, we see a new type of interfaces for programmers based on web technology. For example, JSFiddle, IPython Notebook and R-studio. Web technology enables cloud-based solutions, embedding in tutorial web pages, attractive rendering of results, web-scale cooperative development, etc. This article describes SWISH, a web front-end for Prolog. A public website exposes SWIProlog using SWISH, which is used to run small Prolog programs for demonstration, experimentation and education. We connected SWISH to the ClioPatria semantic web toolkit, where it allows for collaborative development of programs and queries related to a dataset as well as performing maintenance tasks on the running server and we embedded SWISH in the Learn Prolog Now! online Prolog book.", "creator": "LaTeX with hyperref package"}}}