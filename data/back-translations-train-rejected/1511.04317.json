{"id": "1511.04317", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Nov-2015", "title": "Novel Feature Extraction, Selection and Fusion for Effective Malware Family Classification", "abstract": "Modern malware is designed with mutation characteristics, namely polymorphism and metamorphism, which causes an enormous growth in the number of variants of malware samples. Categorization of malware samples on the basis of their behaviors is essential for the computer security community in order to group samples belonging to same family. Microsoft released a malware classification challenge in 2015 with a huge dataset of near 0.5 terabytes of data, containing more than 20K malware samples. The analysis of this dataset inspired the development of a novel paradigm that is effective in categorizing malware variants into their actual family groups. This paradigm is presented and discussed in the present paper, where emphasis has been given to the phases related to the extraction, and selection of a set of novel features for the effective representation of malware samples. Features can be grouped according to different characteristics of malware behavior, and their fusion is performed according to a per-class weighting paradigm. The proposed method achieved a very high accuracy ($\\approx$ 0.998) on the Microsoft Malware Challenge dataset.", "histories": [["v1", "Fri, 13 Nov 2015 15:33:02 GMT  (6463kb,D)", "http://arxiv.org/abs/1511.04317v1", null], ["v2", "Thu, 10 Mar 2016 10:21:15 GMT  (6794kb,D)", "http://arxiv.org/abs/1511.04317v2", null]], "reviews": [], "SUBJECTS": "cs.CR cs.AI", "authors": ["mansour ahmadi", "dmitry ulyanov", "stanislav semenov", "mikhail trofimov", "giorgio giacinto"], "accepted": false, "id": "1511.04317"}, "pdf": {"name": "1511.04317.pdf", "metadata": {"source": "CRF", "title": "Novel feature extraction, selection and fusion for effective malware family classification", "authors": ["Mansour Ahmadi", "Giorgio Giacinto", "Dmitry Ulyanov", "Stanislav Semenov", "Mikhail Trofimov"], "emails": ["mansour.ahmadi@unica.diee.it", "giacinto@diee.unica.it", "dmitry.ulyanov@skolkovotech.ru", "stasg7@gmail.com", "mikhail.trofimov@phystech.edu"], "sections": [{"heading": null, "text": "Tags Windows Malware, Machine Learning, Malware Family, Computer Security, Classification, Microsoft Malware Classification Challenge"}, {"heading": "1. INTRODUCTION", "text": "In fact, most people will be able to move to another world in which they are able to live, in which they want to live."}, {"heading": "2. RELATED WORK", "text": "In fact, most of them are able to survive on their own."}, {"heading": "3. SYSTEM ARCHITECTURE", "text": "Since this paper focuses on the classification of malware, the most relevant problem is related to the selection of characteristics that are used to represent each malware sample for the classification task. Our approach was guided by the consideration that in order to achieve precise and fast classification results, we should integrate different types of characteristics, such as content-based characteristics as well as structural characteristics."}, {"heading": "3.1 Malware representation", "text": "Before going into the details of the features we have extracted for the classification task, we will briefly discuss the various ways in which a malware sample can be represented. Two common representations of a malware sample are the hex view and the assembly view. The hex view represents the machine code as a sequence of hexadecimal digits, i.e. the accumulation of consecutive 16 byte words, as shown in the following representation: 004010D0 8D 15 A8 80 63 00 BF 55 70 00 52 FF 72 7C 53The first value represents the starting address of these machine codes in memory, and each value (byte) carries a significant element for the PE, such as command codes or data. The task of splitting a binary executable code into its sequence of assembly instructions can be executed by two main techniques, namely by the linear sweep algorithm and the recursive sweep algorithm of the montage set, which is less precise than any of these [Although none of these are precise]."}, {"heading": "3.2 Features", "text": "It is. (It is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it is.) It is. (it.) It is. (it.) It is. (it.) It is. (it.) It is. (it.) It is. (it.) It is. (it.) It is. (it.) It is. (it.) It. (it. (it.) It. (it.) It. (it. (it.) It. (it.) It is. (it. (it.) It. (it. (it.) It. (it. (it.) It. (it. (it.) It. (it. (it.) It. (it. (it.) It. (it. (it.) It. (it. (it.) It. (it. (it.) It. (it.) It. (it. (it.) is. (it. (it. (it.) It. (it. (it. (it.) It. (it.) is. (it. (it.) It. (it. (it. (it.) It. (it. (it. (it.) It. (it.) It. (it. (it. (it. It.) It. (it.) It. (it. (it.) It. (it. (it.) It. (it.) It. (it. (it. (it. (it.) It. (it.) It. It. (it. (it.) It. (it. (it. (it.) It. It. It. (it. It. It. (it.) It. (it.) It. It. (it. (it. (it. It. It.) is. It. It. (it. It. It. (it. It."}, {"heading": "3.3 Feature fusion", "text": "The easiest way to combine feature categories is to stack all the feature categories into a single, long feature vector and then run a classifier on it. However, it is often in the feature selection process that some of the features turn out to be irrelevant to class discrimination, and the inclusion of such irrelevant features leads not only to unnecessary computational complexity, but also to the potential reduction in the accuracy of the resulting model. Within the extensive literature on feature selection, we focused on two approaches. One approach is the best subset selection technique [25], which can be summarized as follows. Starting with subsets containing only one feature, a classifier is trained, and the subsets with the highest value of the objective function used to evaluate performance (e.g. accuracy, loss functions, etc.) are retained all the subset selection techniques [25], which are summarized as follows. Then, the process is repeated for each sub-set, with each feature being increased by, for example, the number of possible features being increased by two."}, {"heading": "3.4 Classification", "text": "Regarding the task of feature selection, a large number of classification techniques have been proposed by the scientific community over the years, and the selection of the most suitable classifier for a given task is often guided by previous experience in various fields and by trial and error procedures. However, recently, some researchers have evaluated the performance of about 180 classifiers from different families using different data sets and concluded that random forests and SVM are the two classification mechanisms most likely to produce good results [19]. On the other hand, most of the winners of the recent Kaggle competitions have used the XGBoost technique [8], which is a parallel implementation of the gradient-enhancing tree classifier, which in most cases performs better than that of random forests. XGBoost technology is available as a library supplemented as a parallel algorithm that is fast and efficient, and its parameters are fully changeable."}, {"heading": "3.5 Evaluation measures", "text": "The accuracy was measured as a fraction of the correct predictions. Since the classification accuracy alone is usually not sufficient to assess the robustness of the prediction, we also measured the logarithmic loss (logarithm), a soft measurement of the accuracy contained in the concept of probabilistic certainty. It is the cross entropy 3 between the distribution of the true labels and the predicted probabilities. As shown in Eq.2, it is the negative logarithm probability of the model, logloss = \u2212 1 N \u2211 i = 1 Yij log (Pij) (2), where N is the number of observations, M is the number of class labels, logarithm is the natural logarithm, Yij is 1 if observation is i in class j and otherwise 0, and Pij is the predicted probability that observation is in class i."}, {"heading": "4. EXPERIMENTS AND RESULTS", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.1 Data", "text": "Microsoft has released nearly half a terabyte of data related to 21741 malware samples, with 10,868 samples used for training, the rest for testing. The ID of each malware sample is a 20-character hash value. The files come from nine different malware families, namely Ramnit (R), Lollipop (L), Kelihos _ ver3 (K3), Vundo (V), Simda (S), Tracur (T), Kelihos _ ver1 (K1), Obfuscator.ACY (O), Gatak (G).The class name of each file is represented by an integer of 1 to 9, with \"1\" being the first malware family in the list above and \"9\" the last. There are two files for each malware sample, one containing the hex code, and the other containing the disassembled code (see Section 3.1).Microsoft removed PE to ensure the header of the 9 files is displayed in order to ensure the sterility of the files."}, {"heading": "4.2 Feature importance", "text": "Although there is no strict consensus on the importance of importance, we refer to two common methods for measuring the importance of features when using classifiers for decision trees, i.e. the mean decrease in accuracy and the mean decrease in impurity [16]. These two metrics measure the decrease in accuracy or the decrease in impurity associated with each feature. In both cases, the importance of a particular feature is proportional to the amount of the decrease 3https: / / en.wikipedia.org / wiki / Cross-Entropy 4Gini impurity is a standard decision tree allocation metric with respect to that feature. While in Section 4 we discuss the relationship between each feature category and the classification accuracy based on the feature fusion algorithm, in this section we report on the importance of features based on the mean decrease in impurity to give a better insight into the relevance of each feature category to a particular malware family."}, {"heading": "4.3 Results", "text": "Table 4 and Table 5 each show the classification performance related to each trait category, and the performance related to the combination of trait categories. In particular, Table 5 provides useful information for data analysts to evaluate the trade-off between the number of traits used and the importance of increasing the classification performance. We proceeded by using the trait algorithm by adding one after the other the trait category that achieves the lowest luster of the training data. Results obtained indicate that combining all trait categories except the IMG2 category leads to the lowest luster of all training data, while combining all trait categories leads to the lowest luster of the training data by applying cross-validation. In accordance with these results, we have refined the parameters of the XGBoost algorithm on these two trait configurations, as well as for the Bagging technique (see Table 6). Specifically, by adding the external alpine categories, we have pre-processed the training techniques with only 1,008 training.7"}, {"heading": "4.4 Comparison and Discussion", "text": "Subsequently, the effectiveness of the proposed approach can be evaluated by comparing the results with those of the winner of the Malware Challenge 5. The winner of the contest achieves 0.9983 accuracy and 0.0031 Logical, whereby the differences between the method proposed in this paper and 0.0028 Logical are due to the test data. The proposed method confirms the effectiveness of the proposed method, as the significance of this small difference is neglected in the statistics. While the achievements are quite close, it is worth pointing out the differences between the method proposed in this paper and the one pursued by the winning team."}, {"heading": "5. CONCLUSION AND FUTURE WORK", "text": "In order to achieve this goal, we have proposed a number of new features that present some discriminatory features between different families in a compact way. In particular, we focused on extracting novel structural features that are easier to calculate compared to content-based features and allow the classification of blurred and packaged malware without the need for uncovering and unpacking processes. Reporting results made it possible to assess the effectiveness of these features both in terms of classification accuracy and impregnability. The main motivation behind choosing a light system is its suitability for industrial use, where the exchange between complexity and performance can be a key problem. Very often, the performance gains of complex systems based on validation data are negligible compared to the performance of less complex systems. In addition, a complex system makes it difficult for an analyst to understand the results of malarization from the characteristics of this sample, while we believe that we are not collecting this information in relation to a particular issue."}, {"heading": "6. REFERENCES", "text": "[1] Disassembler and debugger.https: / / hex-rays.com / products / ida /, 2013. [2] Novel active learning methods for enhanced {PC} malware detection in windows {OS}. Expert Systems with Applications, 41 (13): 5843 - 5857, 2014. [3] Duqu is back. http: / / www.kaspersky.com / about / news / virus / 2015 / Duqu-is-back, 2015. [4] Mahotas featured ures. http: / / mahotas.readthedocs.org / latest / features.html, 2015. [5] Mcafee labs threats report, february."}], "references": [{"title": "Malware detection by behavioural sequential patterns", "author": ["M. Ahmadi", "A. Sami", "H. Rahimi", "B. Yadegari"], "venue": "Computer Fraud & Security, 2013(8):11 \u2013 19,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Structural entropy and metamorphic malware", "author": ["D. Baysa", "R. Low", "M. Stamp"], "venue": "Journal of Computer Virology and Hacking Techniques, 9(4):179\u2013192,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Evasion attacks against machine learning at test time", "author": ["B. Biggio", "I. Corona", "D. Maiorca", "B. Nelson", "N. \u00c5\u0103rndi\u00c4\u011e", "P. Laskov", "G. Giacinto", "F. Roli"], "venue": "H. Blockeel, K. Kersting, S. Nijssen, and F. \u00c5\u00a1elezn\u00c3\u00a1, editors, Machine Learning and Knowledge Discovery in Databases, volume 8190 of Lecture Notes in Computer Science, pages 387\u2013402. Springer Berlin Heidelberg,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2013}, {"title": "Poisoning attacks against support vector machines", "author": ["B. Biggio", "B. Nelson", "P. Laskov"], "venue": "29th Int\u2019l Conf. on Machine Learning (ICML). Omnipress, Omnipress,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2012}, {"title": "Poisoning behavioral malware clustering", "author": ["B. Biggio", "K. Rieck", "D. Ariu", "C. Wressnegger", "I. Corona", "G. Giacinto", "F. Roli"], "venue": "Proceedings of the 2014 Workshop on Artificial Intelligent and Security Workshop, AISec \u201914, pages 27\u201336, New York, NY, USA,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2014}, {"title": "Statistical structures: Fingerprinting malware for classification and analysis", "author": ["D. Bilar"], "venue": "Blackhat,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2006}, {"title": "Bagging predictors", "author": ["L. Breiman"], "venue": "Mach. Learn., 24(2):123\u2013140, Aug.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1996}, {"title": "Classification and Regression Trees", "author": ["L. Breiman", "J. Friedman", "R. Olshen", "C. Stone"], "venue": "Wadsworth and Brooks, Monterey, CA,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1984}, {"title": "Static analysis of executables to detect malicious patterns", "author": ["M. Christodorescu", "S. Jha"], "venue": "Proceedings of the 12th Conference on USENIX Security Symposium - Volume 12, SSYM\u201903, pages 12\u201312, Berkeley, CA, USA,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2003}, {"title": "Semantics-aware malware detection", "author": ["M. Christodorescu", "S. Jha", "S. Seshia", "D. Song", "R. Bryant"], "venue": "Security and Privacy, 2005 IEEE Symposium on, pages 32\u201346, May", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2005}, {"title": "Do we need hundreds of classifiers to solve real world classification problems", "author": ["M. Fern\u00e1ndez-Delgado", "E. Cernadas", "S. Barro", "D. Amorim"], "venue": "J. Mach. Learn. Res.,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2014}, {"title": "Synthesizing near-optimal malware specifications from suspicious behaviors", "author": ["M. Fredrikson", "S. Jha", "M. Christodorescu", "R. Sailer", "X. Yan"], "venue": "Proceedings of the 2010 IEEE Symposium on Security and Privacy, SP \u201910, pages 45\u201360, Washington, DC, USA,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2010}, {"title": "Dynamic vsa: a framework for malware detection based on register contents", "author": ["M. Ghiasi", "A. Sami", "Z. Salehi"], "venue": "Engineering Applications of Artificial Intelligence, 44:111 \u2013 122,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2015}, {"title": "Automatic generation of string signatures for malware detection", "author": ["K. Griffin", "S. Schneider", "X. Hu", "T.-C. Chiueh"], "venue": "Proceedings of the 12th International Symposium on Recent Advances in Intrusion Detection, RAID \u201909, pages 101\u2013120, Berlin, Heidelberg,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2009}, {"title": "Large-scale malware indexing using function-call graphs", "author": ["X. Hu", "T.-c. Chiueh", "K.G. Shin"], "venue": "In Proceedings of the 16th ACM Conference on Computer and Communications Security,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2009}, {"title": "A static, packer-agnostic filter to detect similar malware samples", "author": ["G. Jacob", "P.M. Comparetti", "M. Neugschwandtner", "C. Kruegel", "G. Vigna"], "venue": "Proceedings of the 9th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, DIMVA\u201912, pages 102\u2013122, Berlin, Heidelberg,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2013}, {"title": "An Introduction to Statistical Learning: With Applications in R", "author": ["G. James", "D. Witten", "T. Hastie", "R. Tibshirani"], "venue": "Springer Publishing Company, Incorporated,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2014}, {"title": "Semantic malware detection by deploying graph mining", "author": ["F. Karbalaie", "A. Sami", "M. Ahmadi"], "venue": "International Journal of Computer Science Issues, 9(1),", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2012}, {"title": "Effective and efficient malware detection at the end host", "author": ["C. Kolbitsch", "P.M. Comparetti", "C. Kruegel", "E. Kirda", "X. Zhou", "X. Wang"], "venue": "Proceedings of the 18th Conference on USENIX Security Symposium, SSYM\u201909, pages 351\u2013366, Berkeley, CA, USA,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2009}, {"title": "Automating mimicry attacks using static binary analysis", "author": ["C. Kruegel", "E. Kirda", "D. Mutz", "W. Robertson", "G. Vigna"], "venue": "Proceedings of the 14th Conference on USENIX Security Symposium - Volume 14, SSYM\u201905, pages 11\u201311, Berkeley, CA, USA,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2005}, {"title": "Ensemble Methods, pages 186\u2013229", "author": ["L.I. Kuncheva"], "venue": "John Wiley & Sons, Inc.,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2014}, {"title": "Accessminer: Using system-centric models for malware protection", "author": ["A. Lanzi", "D. Balzarotti", "C. Kruegel", "M. Christodorescu", "E. Kirda"], "venue": "Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS \u201910, pages 399\u2013412, New York, NY, USA,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2010}, {"title": "Using entropy analysis to find encrypted and packed malware", "author": ["R. Lyda", "J. Hamrock"], "venue": "IEEE Security and Privacy, 5(2):40\u201345, Mar.", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2007}, {"title": "Exploring multiple execution paths for malware analysis", "author": ["A. Moser", "C. Kruegel", "E. Kirda"], "venue": "Proceedings of the 2007 IEEE Symposium on Security and Privacy, SP \u201907, pages 231\u2013245, Washington, DC, USA,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2007}, {"title": "Limits of static analysis for malware detection", "author": ["A. Moser", "C. Kruegel", "E. Kirda"], "venue": "Computer Security Applications Conference, 2007. ACSAC 2007. Twenty-Third Annual, pages 421\u2013430, Dec", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2007}, {"title": "Dllminer: Structural mining for malware detection", "author": ["M. Narouei", "MansourAhmadi", "G. Giacinto", "H. Takabi", "A. Sami"], "venue": "Security and Communication Networks,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2015}, {"title": "Malware images: Visualization and automatic classification", "author": ["L. Nataraj", "S. Karthikeyan", "G. Jacob", "B.S. Manjunath"], "venue": "Proceedings of the 8th International Symposium on Visualization for Cyber Security, VizSec \u201911, pages 4:1\u20134:7, New York, NY, USA,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2011}, {"title": "A framework for understanding dynamic anti-analysis defenses", "author": ["J. Qiu", "B. Yadegari", "B. Johannesmeyer", "S. Debray", "X. Su"], "venue": "Proceedings of the 4th Program Protection and Reverse Engineering Workshop, PPREW-4, pages 2:1\u20132:9, New York, NY, USA,", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2014}, {"title": "Learning and classification of malware behavior", "author": ["K. Rieck", "T. Holz", "C. Willems", "P. Dussel", "P. Laskov"], "venue": "Proceedings of the 5th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, DIMVA \u201908, pages 108\u2013125, Berlin, Heidelberg,", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2008}, {"title": "Prudent practices for designing malware experiments: Status quo and outlook", "author": ["C. Rossow", "C. Dietrich", "C. Grier", "C. Kreibich", "V. Paxson", "N. Pohlmann", "H. Bos", "M. van Steen"], "venue": "In Security and Privacy (SP),", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2012}, {"title": "Malware detection based on mining api calls", "author": ["A. Sami", "B. Yadegari", "H. Rahimi", "N. Peiravian", "S. Hashemi", "A. Hamze"], "venue": "Proceedings of the 2010 ACM Symposium on Applied Computing, SAC \u201910, pages 1020\u20131025, New York, NY, USA,", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2010}, {"title": "Opcode sequences as representation of executables for data-mining-based unknown malware detection", "author": ["I. Santos", "F. Brezo", "X. Ugarte-Pedrero", "P.G. Bringas"], "venue": "Information Sciences, 231(0):64 \u2013 82,", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2013}, {"title": "Disassembly of executable code revisited", "author": ["B. Schwarz", "S. Debray", "G. Andrews"], "venue": "Proceedings of the Ninth Working Conference on Reverse Engineering (WCRE\u201902), WCRE \u201902, pages 45\u2013, Washington, DC, USA,", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2002}, {"title": "Pe-miner: Mining structural information to detect malicious executables in realtime", "author": ["M. Shafiq", "S. Tabish", "F. Mirza", "M. Farooq"], "venue": "E. Kirda, S. Jha, and D. Balzarotti, editors, Recent Advances in Intrusion Detection, volume 5758 of Lecture Notes in Computer Science, pages 121\u2013141. Springer Berlin Heidelberg,", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2009}, {"title": "Static analyzer of vicious executables (save)", "author": ["A.H. Sung", "J. Xu", "P. Chavez", "S. Mukkamala"], "venue": "Proceedings of the 20th Annual Computer Security Applications Conference, ACSAC \u201904, pages 326\u2013334,  Washington, DC, USA,", "citeRegEx": "43", "shortCiteRegEx": null, "year": 2004}, {"title": "Malware detection using statistical analysis of byte-level file content", "author": ["S.M. Tabish", "M.Z. Shafiq", "M. Farooq"], "venue": "Proceedings of the ACM SIGKDD Workshop on CyberSecurity and Intelligence Informatics, CSI-KDD \u201909, pages 23\u201331, New York, NY, USA,", "citeRegEx": "44", "shortCiteRegEx": null, "year": 2009}, {"title": "Toward automated dynamic malware analysis using cwsandbox", "author": ["C. Willems", "T. Holz", "F. Freiling"], "venue": "Security Privacy, IEEE, 5(2):32\u201339, March", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2007}, {"title": "Malware detection with quantitative data flow graphs", "author": ["T. W\u00fcchner", "M. Ochoa", "A. Pretschner"], "venue": "Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security, ASIA CCS \u201914, pages 271\u2013282, New York, NY, USA,", "citeRegEx": "46", "shortCiteRegEx": null, "year": 2014}, {"title": "A generic approach to automatic deobfuscation of executable code", "author": ["B. Yadegari", "B. Johannesmeyer", "B. Whitely", "S. Debray"], "venue": "IEEE Security and Privacy. IEEE,", "citeRegEx": "47", "shortCiteRegEx": null, "year": 2015}, {"title": "An intelligent pe-malware detection system based on association mining", "author": ["Y. Ye", "D. Wang", "T. Li", "D. Ye", "Q. Jiang"], "venue": "Journal in Computer Virology, 4(4):323\u2013334,", "citeRegEx": "48", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [{"referenceID": 30, "context": "The analysis of malicious programs is usually carried out by static techniques [39, 48, 34] and dynamic techniques [45, 37, 9, 46].", "startOffset": 79, "endOffset": 91}, {"referenceID": 39, "context": "The analysis of malicious programs is usually carried out by static techniques [39, 48, 34] and dynamic techniques [45, 37, 9, 46].", "startOffset": 79, "endOffset": 91}, {"referenceID": 25, "context": "The analysis of malicious programs is usually carried out by static techniques [39, 48, 34] and dynamic techniques [45, 37, 9, 46].", "startOffset": 79, "endOffset": 91}, {"referenceID": 36, "context": "The analysis of malicious programs is usually carried out by static techniques [39, 48, 34] and dynamic techniques [45, 37, 9, 46].", "startOffset": 115, "endOffset": 130}, {"referenceID": 28, "context": "The analysis of malicious programs is usually carried out by static techniques [39, 48, 34] and dynamic techniques [45, 37, 9, 46].", "startOffset": 115, "endOffset": 130}, {"referenceID": 0, "context": "The analysis of malicious programs is usually carried out by static techniques [39, 48, 34] and dynamic techniques [45, 37, 9, 46].", "startOffset": 115, "endOffset": 130}, {"referenceID": 37, "context": "The analysis of malicious programs is usually carried out by static techniques [39, 48, 34] and dynamic techniques [45, 37, 9, 46].", "startOffset": 115, "endOffset": 130}, {"referenceID": 31, "context": "Analyzers extract various characteristics from the programs\u2019 syntax and semantic such as operation codes [40] and function call graph [23] from the disassembled code, or string signatures [22] and byte code n-grams ar X iv :1 51 1.", "startOffset": 105, "endOffset": 109}, {"referenceID": 14, "context": "Analyzers extract various characteristics from the programs\u2019 syntax and semantic such as operation codes [40] and function call graph [23] from the disassembled code, or string signatures [22] and byte code n-grams ar X iv :1 51 1.", "startOffset": 134, "endOffset": 138}, {"referenceID": 13, "context": "Analyzers extract various characteristics from the programs\u2019 syntax and semantic such as operation codes [40] and function call graph [23] from the disassembled code, or string signatures [22] and byte code n-grams ar X iv :1 51 1.", "startOffset": 188, "endOffset": 192}, {"referenceID": 35, "context": "[44, 2] from the hex code, or extracting different structural characteristics from the PE header, such as dependencies between APIs [48] and DLLs [34].", "startOffset": 0, "endOffset": 7}, {"referenceID": 39, "context": "[44, 2] from the hex code, or extracting different structural characteristics from the PE header, such as dependencies between APIs [48] and DLLs [34].", "startOffset": 132, "endOffset": 136}, {"referenceID": 25, "context": "[44, 2] from the hex code, or extracting different structural characteristics from the PE header, such as dependencies between APIs [48] and DLLs [34].", "startOffset": 146, "endOffset": 150}, {"referenceID": 33, "context": "Some other works [42] also explored the analysis of metadata such as the number of bitmaps, the size of import and export address table besides PE header\u2019s content.", "startOffset": 17, "endOffset": 21}, {"referenceID": 16, "context": "Moreover, we implemented an algorithm, inspired by the forward stepwise feature selection algorithm [25], to combine the most relevant feature categories to feed the classifier, and show the trade-off between the number of features and accuracy.", "startOffset": 100, "endOffset": 104}, {"referenceID": 20, "context": "To better exploit both the richness of the available information, in the number of the malware samples for training the classifier, and the number of features used to represent the samples, we resorted to ensemble techniques such as bagging [29].", "startOffset": 241, "endOffset": 245}, {"referenceID": 36, "context": "One way to observe the behavior of a program is to monitor the interactions of the program with the operating system through the analysis of the system calls [45, 37].", "startOffset": 158, "endOffset": 166}, {"referenceID": 28, "context": "One way to observe the behavior of a program is to monitor the interactions of the program with the operating system through the analysis of the system calls [45, 37].", "startOffset": 158, "endOffset": 166}, {"referenceID": 0, "context": "In order to devise an effective and more robust system, some approaches considered additional semantic information like the sequence of the system calls [9], and the use of graph representations [27, 20, 26].", "startOffset": 153, "endOffset": 156}, {"referenceID": 18, "context": "In order to devise an effective and more robust system, some approaches considered additional semantic information like the sequence of the system calls [9], and the use of graph representations [27, 20, 26].", "startOffset": 195, "endOffset": 207}, {"referenceID": 11, "context": "In order to devise an effective and more robust system, some approaches considered additional semantic information like the sequence of the system calls [9], and the use of graph representations [27, 20, 26].", "startOffset": 195, "endOffset": 207}, {"referenceID": 17, "context": "In order to devise an effective and more robust system, some approaches considered additional semantic information like the sequence of the system calls [9], and the use of graph representations [27, 20, 26].", "startOffset": 195, "endOffset": 207}, {"referenceID": 12, "context": "These approaches monitor the program\u2019s behaviour by analyzing the temporal order of the API calls, and the effect of API calls on registers [21], or by extracting a behavioural graph based on the dependency between API call parameters.", "startOffset": 140, "endOffset": 144}, {"referenceID": 21, "context": "[30] proposed an access activity model that captures the generalized interactions of benign applications with operating system resources, such as files and the registry, and then detects the malware with very a very low false positive rate.", "startOffset": 0, "endOffset": 4}, {"referenceID": 29, "context": "A recent survey on 36 research papers on dynamic analysis techniques [38] pointed out that the common shortcomings of dynamic analysis techniques are the problematic and somewhat obscure assumptions regarding the use of execution-driven datasets, and the lack of details and motivation on the security precautions that have been taken during the experimental phase.", "startOffset": 69, "endOffset": 73}, {"referenceID": 27, "context": "Moreover, recent malware is shipped with dynamic anti-analysis defenses that hide the malicious behaviour in the case a dynamic analysis environment is detected [36] and the lack of code coverage, as dynamic analysis is not designed to explore all or, at least, multiple execution paths of an executable [32].", "startOffset": 161, "endOffset": 165}, {"referenceID": 23, "context": "Moreover, recent malware is shipped with dynamic anti-analysis defenses that hide the malicious behaviour in the case a dynamic analysis environment is detected [36] and the lack of code coverage, as dynamic analysis is not designed to explore all or, at least, multiple execution paths of an executable [32].", "startOffset": 304, "endOffset": 308}, {"referenceID": 8, "context": "SAFE [17] and SAVE [43] have been among the most influential approaches in heuristic static malware detection, as these works inspired many researchers in this", "startOffset": 5, "endOffset": 9}, {"referenceID": 34, "context": "SAFE [17] and SAVE [43] have been among the most influential approaches in heuristic static malware detection, as these works inspired many researchers in this", "startOffset": 19, "endOffset": 23}, {"referenceID": 39, "context": "[48] X API \u2212 Itemset 2009 PE-Miner [42] X STC STC \u2212 2009 Tabish et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 33, "context": "[48] X API \u2212 Itemset 2009 PE-Miner [42] X STC STC \u2212 2009 Tabish et al.", "startOffset": 35, "endOffset": 39}, {"referenceID": 35, "context": "[44] X BYT BYT N-gram 2009 Griffin et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[22] X BYT BYT Sequence 2009 Hu et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[23] X \u2212 FC Graph 2010 Sami et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "[39] X API \u2212 Itemset", "startOffset": 0, "endOffset": 4}, {"referenceID": 26, "context": "[35] X BYT BYT \u2212 2012 Jacob et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "[24] X STC BYT N-gram 2013 Santos et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 31, "context": "[40] X \u2212 OP Sequence 2014 Nissim et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "[2] X BYT BYT N-gram 2015 DLLMiner [34] X X DLL \u2212 Tree", "startOffset": 35, "endOffset": 39}, {"referenceID": 35, "context": "Analysis is further carried out either directly on the bytecode [44, 2], or by disassembling the code and extracting opcodes and other relevant detailed information on the content of the program [40].", "startOffset": 64, "endOffset": 71}, {"referenceID": 31, "context": "Analysis is further carried out either directly on the bytecode [44, 2], or by disassembling the code and extracting opcodes and other relevant detailed information on the content of the program [40].", "startOffset": 195, "endOffset": 199}, {"referenceID": 38, "context": "[47].", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "Static techniques have been also employed to assess if a malware detected in the wild is similar to a previously-seen variant, without actually performing the costly task of unpacking [24, 34].", "startOffset": 184, "endOffset": 192}, {"referenceID": 25, "context": "Static techniques have been also employed to assess if a malware detected in the wild is similar to a previously-seen variant, without actually performing the costly task of unpacking [24, 34].", "startOffset": 184, "endOffset": 192}, {"referenceID": 32, "context": "The task of disassembling a binary executable into its sequence of assembly instructions can be performed by two main techniques, namely by the linear sweep algorithm, and the recursive traversal algorithm [41].", "startOffset": 206, "endOffset": 210}, {"referenceID": 22, "context": "Entropy: Entropy (ENT) is a measure of the amount of disorder, and can be used to detect the possible presence of obfuscation [31, 10].", "startOffset": 126, "endOffset": 134}, {"referenceID": 1, "context": "Entropy: Entropy (ENT) is a measure of the amount of disorder, and can be used to detect the possible presence of obfuscation [31, 10].", "startOffset": 126, "endOffset": 134}, {"referenceID": 26, "context": "Image representation: An original way to represent a malware sample is to visualize the byte code by interpreting each byte as the gray-level of one pixel in an image [35].", "startOffset": 167, "endOffset": 171}, {"referenceID": 24, "context": "Although the implementation of calls depends both on the architecture, and on the optimal decision of compiler, indirect calls may reveal some information on data location obfuscation [33].", "startOffset": 184, "endOffset": 188}, {"referenceID": 5, "context": "frequent use in malicious applications [14], and measure the frequency of them in each malware sample.", "startOffset": 39, "endOffset": 43}, {"referenceID": 9, "context": "While instruction replacement techniques can be used to evade detection [18], their effects on malware classification tasks is limited, both for its rare use, and, consequently, for its negligible contribution to the computation of the statistics.", "startOffset": 72, "endOffset": 76}, {"referenceID": 9, "context": "Register: Most of the processor registers in x86 architecture are used for dedicated tasks, but in some cases register renaming is used to make the analysis harder [18].", "startOffset": 164, "endOffset": 168}, {"referenceID": 16, "context": "One approach is the best subset selection technique [25] that can be summarized as follows.", "startOffset": 52, "endOffset": 56}, {"referenceID": 10, "context": "However, recently some researchers evaluated the performances of about 180 classifiers arising from different families, using various datasets, and they concluded that random forests and SVM are the two classification mechanisms that have the highest likelihood to produce good performances [19].", "startOffset": 291, "endOffset": 295}, {"referenceID": 6, "context": "In addition, we also use bagging [15] to boost our single model, which is simple, classifier independent, and yet an efficient method to improve the classification quality.", "startOffset": 33, "endOffset": 37}, {"referenceID": 7, "context": ", the mean decrease accuracy, and the mean decrease impurity [16].", "startOffset": 61, "endOffset": 65}, {"referenceID": 2, "context": "The proposed method has not yet been tested for robustness against evasion attacks [11, 28] or poisoning attacks [13, 12] because these kinds of attacks are more frequent against malware detectors rather than against malware classifiers.", "startOffset": 83, "endOffset": 91}, {"referenceID": 19, "context": "The proposed method has not yet been tested for robustness against evasion attacks [11, 28] or poisoning attacks [13, 12] because these kinds of attacks are more frequent against malware detectors rather than against malware classifiers.", "startOffset": 83, "endOffset": 91}, {"referenceID": 4, "context": "The proposed method has not yet been tested for robustness against evasion attacks [11, 28] or poisoning attacks [13, 12] because these kinds of attacks are more frequent against malware detectors rather than against malware classifiers.", "startOffset": 113, "endOffset": 121}, {"referenceID": 3, "context": "The proposed method has not yet been tested for robustness against evasion attacks [11, 28] or poisoning attacks [13, 12] because these kinds of attacks are more frequent against malware detectors rather than against malware classifiers.", "startOffset": 113, "endOffset": 121}], "year": 2017, "abstractText": "Modern malware is designed with mutation characteristics, namely polymorphism and metamorphism, which causes an enormous growth in the number of variants of malware samples. Categorization of malware samples on the basis of their behaviors is essential for the computer security community in order to group samples belonging to same family. Microsoft released a malware classification challenge in 2015 with a huge dataset of near 0.5 terabytes of data, containing more than 20K malware samples. The analysis of this dataset inspired the development of a novel paradigm that is effective in categorizing malware variants into their actual family groups. This paradigm is presented and discussed in the present paper, where emphasis has been given to the phases related to the extraction, and selection of a set of novel features for the effective representation of malware samples. Features can be grouped according to different characteristics of malware behavior, and their fusion is performed according to a per-class weighting paradigm. The proposed method achieved a very high accuracy (\u2248 0.998) on the Microsoft Malware Challenge dataset.", "creator": "LaTeX with hyperref package"}}}