{"id": "1601.02433", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jan-2016", "title": "Git4Voc: Git-based Versioning for Collaborative Vocabulary Development", "abstract": "Collaborative vocabulary development in the context of data integration is the process of finding consensus between the experts of the different systems and domains. The complexity of this process is increased with the number of involved people, the variety of the systems to be integrated and the dynamics of their domain. In this paper we advocate that the realization of a powerful version control system is the heart of the problem. Driven by this idea and the success of Git in the context of software development, we investigate the applicability of Git for collaborative vocabulary development. Even though vocabulary development and software development have much more similarities than differences there are still important differences. These need to be considered within the development of a successful versioning and collaboration system for vocabulary development. Therefore, this paper starts by presenting the challenges we were faced with during the creation of vocabularies collaboratively and discusses its distinction to software development. Based on these insights we propose Git4Voc which comprises guidelines how Git can be adopted to vocabulary development. Finally, we demonstrate how Git hooks can be implemented to go beyond the plain functionality of Git by realizing vocabulary-specific features like syntactic validation and semantic diffs.", "histories": [["v1", "Mon, 11 Jan 2016 13:11:51 GMT  (452kb,D)", "http://arxiv.org/abs/1601.02433v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.DB cs.HC", "authors": ["lavdim halilaj", "irl\\'an grangel-gonz\\'alez", "g\\\"okhan coskun", "s\\\"oren auer"], "accepted": false, "id": "1601.02433"}, "pdf": {"name": "1601.02433.pdf", "metadata": {"source": "CRF", "title": "Git4Voc: Git-based Versioning for Collaborative Vocabulary Development", "authors": ["Lavdim Halilaj", "G\u00f6khan Coskun", "S\u00f6ren Auer"], "emails": ["halilaj@cs.uni-bonn.de", "grangel@cs.uni-bonn.de", "coskun@cs.uni-bonn.de", "auer@cs.uni-bonn.de"], "sections": [{"heading": null, "text": "This year it is more than ever before."}, {"heading": "II. REQUIREMENTS OF COLLABORATIVE VOCABULARY DEVELOPMENT", "text": "This year it is more than ever before."}, {"heading": "III. GIT4VOC", "text": "In this section, we present Git4Voc. On the one hand, we propose guidelines on how to use Git for collaborative vocabulary development projects; on the other, we present how to technically implement the requirements of Section II through Git hooks. Additionally, we analyzed best practices from collaborative software development within the framework of guidelines and identified the following aspects as critical to the quality of the vocabulary: (1) managing generated information; (2) rights management; (3) branching and merging; (4) automated development and deployment tasks by hooks; (5) tool independence; (6) vocabulary structure; and (7) release version labeling. In the next sections, we detail how our approach responds to the above requirements."}, {"heading": "A. Management of Generated Information", "text": "In fact, value-added services like GitHub, GitLab, or BitBucket add powerful information management features to Git functionality, such as a great way to track communications, report problems, fix bug fixes, and announce releases. Communities like schema.org manage their discussions with GitHub, which means support request (R1) above. Based on this fact, we suggest that the activities gathered in Table II should be documented. If possible, the name of the problems should match the name of the activities. Another important requirement in collaborative vocabulary development is the ability to look at the history of changes (called traceability in software development), which addresses the request (R2). Using the git log and git diff commands, a user can explore the history of the commits and the differences between them. Each commit should be immaterable based on Best Commit Practicesabspra.13 in development practice: http: / importear.com / immater.com."}, {"heading": "B. Rights Management", "text": "Standalone solutions such as GitLab14 and Gitolite15, as well as third-party services such as Bitbucket16 and GitHub17, offer basic options for managing user rights, such as reading, writing, posting, adding new team members, and adding tags. However, even with these solutions, a high level of user management, i.e. limiting the processing of a certain number or type of classes, properties, or instances, cannot be achieved with Git. To meet requirements (R3), we examine a combination of branching and ticking. By combining branching and ticking with role definition for users, fine-grained access management can be achieved. Specifically, the use of server-side ticking enables the realization of rights management via user roles. For example, implementing a pre-push tick can verify and deny the role and permissions of the user when the required rights are not specified according to the activity and branch. Table I shows shared roles and their privileges can be realized in relation to the user's activities, even in a familiar environment."}, {"heading": "C. Branching and Merging", "text": "Git is a very flexible tool that addresses the requirement (R4). With Git, teams are able to organize their work in different types of workflows. (18) Branching strategies influence the quality of collaborative software development. Well-known projects like schema.org use industries to organize their work. In order to design a branching model, it's important to understand the possible activities that a team can do. In this regard, we've collected collaborative vocabulary development activities listed in Table II. When creating a good-quality vocabulary, the entire team should be aware of these activities and how to confront them in the development process. (14https: / / gitlab.com / gitlab-org / gitlab / blob / master / doc / permissions / missions.we-be-categories are: categories that can deal with these activities."}, {"heading": "D. Automate Development and Deployment Tasks by Hooks", "text": "This is a mechanism that makes it possible to execute scripts before or after certain Git events."}, {"heading": "E. Tool Independence", "text": "This year it is as far as it has ever been, but it is not so long before it goes to the next round."}, {"heading": "G. Labeling of Release Versions", "text": "In fact, it is as if it is a matter of a way in which people are able, in which they are able to survive themselves, and in which they are able, in which they are able to survive themselves. (...) In fact, it is as if they are able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they were able to survive themselves. (...) It is as if they are able to survive themselves. (...) It is as if they are able to survive themselves. (...) It is as if they are able to survive themselves. (...)"}, {"heading": "V. RELATED WORK", "text": "Collaborative vocabulary development is an active area of research in the semantic web community [19]. Existing approaches such as WebProte \u0301 ge \u2039 [20] provide a collaborative web frontend for a subset of the functionality of the Prote \u0301 ge \u2039 OWL Editor. However, the goal of WebProte \u0301 ge \u2039 is to lower the threshold for collaborative ontology development. Neologism [21] is an open source web application for editing thesauri, with an emphasis on ease of use and compatibility with the principles of linked data. Neologism focuses more on vocabulary publishing and less on collaboration. VocBench [22] is an open source web application for editing thesauri, which is compatible with the SKOS and SKOS-XL standards. VocBench focuses on collaboration, supported by workflow management for validation and publication XL, the vocabulary conversion, and the most important limitation of the above mentioned tools is the conversion of SKOS, the vocabulary conversion, the conversion of SKOS focuses on the vocabulary."}, {"heading": "VI. CONCLUSION AND FUTURE WORK", "text": "In this paper, we explored the applicability of Git to collaborative vocabulary development. We defined collaborative vocabulary development as the process of identifying key terms across heterogeneous data sources by finding consensus among developers. In this regard, the biggest challenge is creating a powerful collaborative environment. Distributed version control systems allow developers around the world to collaborate on complex software systems. Since software and vocabulary are not the same, we analyzed their differences in detail by identifying requirements for a version control system that supports collaborative vocabulary development. Our approach expands simple Git functionality by using the hook mechanism in combination with external tools to meet these requirements. The presented approach is easily expandable and can accommodate additional external tools. In terms of future work, we will expand our approach to include the full implementation of serpage vocabulary."}, {"heading": "ACKNOWLEDGMENTS", "text": "This work is supported by the LUCID project funded by the German Federal Ministry of Education and Research and the European Commission under the Seventh Framework Programme FP7 for funding 601043 (http: / / diachron-fp7.eu)."}], "references": [{"title": "Towards vocabulary development by convention", "author": ["I. Grangel-Gonz\u00e1lez", "L. Halilaj", "G. Coskun", "S. Auer"], "venue": "7th International Joint Conference on Knowledge Discovery, Knowledge Engineering and Knowledge Management, Vol 2, 2015, pp. 334\u2013343. 31http://www.rdaregistry.info 32http://www.semver.org", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Open source-style collaborative development practices in commercial projects using github", "author": ["E. Kalliamvakou", "D. Damian", "K. Blincoe", "L. Singer", "D. German"], "venue": "37th International Conference on Software Engineering (ICSE15), 2015.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "A framework for ontology evolution in collaborative environments", "author": ["N.F. Noy", "A. Chugh", "W. Liu", "M.A. Musen"], "venue": "ISWC. Springer, 2006, pp. 544\u2013558.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2006}, {"title": "Collaborative ontology development on the (semantic) web.", "author": ["N.F. Noy", "T. Tudorache"], "venue": "AAAI Spring Symposium: Symbiotic Relationships between Semantic Web and Knowledge Engineering,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2008}, {"title": "The state of multi-user ontology engineering.", "author": ["J. Seidenberg", "A.L. Rector"], "venue": "in WoMO. Citeseer,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "A knowledge base driven user interface for collaborative ontology development", "author": ["T. Tudorache", "N.F. Noy", "S.M. Falconer", "M.A. Musen"], "venue": "16th International Conference on Intelligent User Interfaces. ACM, 2011, pp. 411\u2013414.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "Collaborative ontology engineering: a survey", "author": ["E. Simperl", "M. Luczak-R\u00f6sch"], "venue": "The Knowledge Engineering Review, vol. 29, no. 01, pp. 101\u2013 131, 2014.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "The neon methodology for ontology engineering", "author": ["M.C. Suarez-Figueroa", "A. G\u00f3mez-P\u00e9rez", "M. Fernandez-Lopez"], "venue": "Ontology engineering in a networked world. Springer, 2012, pp. 9\u201334.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2012}, {"title": "Ontology modularization for knowledge selection: Experiments and evaluations", "author": ["M. d\u2019Aquin", "A. Schlicht", "H. Stuckenschmidt", "M. Sabou"], "venue": "Database and Expert Systems Applications. Springer, 2007, pp. 874\u2013883.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2007}, {"title": "Towards structural criteria for ontology modularization", "author": ["A. Schlicht", "H. Stuckenschmidt"], "venue": "ISWC 2006 Workshop on Modular Ontologies. Citeseer, 2006.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2006}, {"title": "Challenges for the multilingual web of data", "author": ["J. Gracia", "E. Montiel-Ponsoda", "P. Cimiano", "A. G\u00f3mez-P\u00e9rez", "P. Buitelaar", "J. McCrae"], "venue": "Journal of Web Semantics, vol. 11, pp. 63\u201371, 2012.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2012}, {"title": "Branching and merging: an investigation into current version control practices", "author": ["S. Phillips", "J. Sillito", "R. Walker"], "venue": "4th International Workshop on Cooperative and Human Aspects of Software Engineering. ACM, 2011, pp. 9\u201315.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2011}, {"title": "The effect of branching strategies on software quality", "author": ["E. Shihab", "C. Bird", "T. Zimmermann"], "venue": "ACM-IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). IEEE, 2012, pp. 301\u2013310.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "Ecco: A hybrid diff tool for owl 2 ontologies.", "author": ["R.S. Gon\u00e7alves", "B. Parsia", "U. Sattler"], "venue": "OWLED,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "Characterizing modular ontologies", "author": ["S.B. Abbes", "A. Scheuermann", "T. Meilender", "M. d\u2019Aquin"], "venue": "7th International Conference on Formal Ontologies in Information Systems (FOIS), 2012, pp. 13\u201325.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2012}, {"title": "Versioning owl ontologies using temporal tags", "author": ["P. Bedi", "S. Marwaha"], "venue": "International Journal of Computer, Control, Quantum and Information Engineering, 2007.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2007}, {"title": "Versioning vocabularies in a linked data world", "author": ["J.P. Diane I. Hillmann", "Gordon Dunsire"], "venue": "IFLA Lion, 2014.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "A holistic approach to collaborative ontology development based on change management", "author": ["R. Palma", "O. Corcho", "A. G\u00f3mez-P\u00e9rez", "P. Haase"], "venue": "Journal of Web Semantics, vol. 9, no. 3, pp. 299\u2013314, 2011.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2011}, {"title": "Webprot\u00e9g\u00e9: A collaborative ontology editor and knowledge acquisition tool for the web", "author": ["T. Tudorache", "C. Nyulas", "N.F. Noy", "M.A. Musen"], "venue": "Semantic Web, vol. 4, no. 1, 2013.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2013}, {"title": "Neologism: Easy vocabulary publishing", "author": ["C. Basca", "S. Corlosquet", "R. Cyganiak", "S. Fern\u00e1ndez", "T. Schandl"], "venue": "2008.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2008}, {"title": "Vocbench: A web application for collaborative development of multilingual thesauri", "author": ["A. Stellato", "S. Rajbhandari", "A. Turbati", "M. Fiorelli", "C. Caracciolo", "T. Lorenzetti", "J. Keizer", "M.T. Pazienza"], "venue": "The Semantic Web. Latest Advances and New Domains. Springer, 2015, pp. 38\u201353.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2015}, {"title": "Svont-version control of owl ontologies on the concept level.", "author": ["M. Luczak-R\u00f6sch", "G. Coskun", "A. Paschke", "M. Rothe", "R. Tolksdorf"], "venue": "GI Jahrestagung (2),", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2010}, {"title": "Contentcvs: A cvs-based collaborative ontology engineering tool.", "author": ["E. Jim\u00e9nez-Ruiz", "B.C. Grau", "I. Horrocks", "R.B. Llavori"], "venue": "in SWAT4LS. Citeseer,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2009}], "referenceMentions": [{"referenceID": 0, "context": "In [1], we identified and elaborated important aspects for vocabulary development such as: reuse, vocabulary structure, naming conventions, multilinguality, documentation, validation and authoring.", "startOffset": 3, "endOffset": 6}, {"referenceID": 1, "context": "More than 10 million repositories2 are hosted on GitHub for open source and commercial projects [2].", "startOffset": 96, "endOffset": 99}, {"referenceID": 2, "context": "In order to share ideas and finding agreements, communication among the contributors is essential [3].", "startOffset": 98, "endOffset": 101}, {"referenceID": 3, "context": "During the whole life cycle, especially in agile development, supporting and recording discussions, changes and their reasons are crucial [4].", "startOffset": 138, "endOffset": 141}, {"referenceID": 4, "context": "Some critical examples to be communicated within a team are introducing new elements, extending or modifying the subsumption hierarchy, integration of external resources and changing the underlying semantic expressivity [5].", "startOffset": 220, "endOffset": 223}, {"referenceID": 3, "context": "Provenance of information (R2) In collaborative development the capability to track the changes made by contributors is an important feature [4].", "startOffset": 141, "endOffset": 144}, {"referenceID": 4, "context": "For that reason, there is a need for the definition of roles along with the permissions [5], [4], [6], [7].", "startOffset": 88, "endOffset": 91}, {"referenceID": 3, "context": "For that reason, there is a need for the definition of roles along with the permissions [5], [4], [6], [7].", "startOffset": 93, "endOffset": 96}, {"referenceID": 5, "context": "For that reason, there is a need for the definition of roles along with the permissions [5], [4], [6], [7].", "startOffset": 98, "endOffset": 101}, {"referenceID": 6, "context": "For that reason, there is a need for the definition of roles along with the permissions [5], [4], [6], [7].", "startOffset": 103, "endOffset": 106}, {"referenceID": 3, "context": "Workflow independence (R4) The overall field of methodologies and workflows for collaborative vocabulary development is changing continuously [4].", "startOffset": 142, "endOffset": 145}, {"referenceID": 6, "context": "Deltas among versions (R7) Collaborative development of vocabularies should respond to the evolution of the knowledge domain [7].", "startOffset": 125, "endOffset": 128}, {"referenceID": 7, "context": "Modularity (R9) Modularization is recognized as an important step in collaborative vocabulary building [8].", "startOffset": 103, "endOffset": 106}, {"referenceID": 8, "context": "Some studies report that there is no universal way to perform this process and that the choice of a particular technique should be guided by application specific requirements [9].", "startOffset": 175, "endOffset": 178}, {"referenceID": 9, "context": "In contrast, other reports show that a module in a mid-sized vocabulary should contain between 200 and 300 lines of code [10].", "startOffset": 121, "endOffset": 125}, {"referenceID": 10, "context": "Multilinguality (R10) In order to have a wide range of applicability to different cultures and communities, vocabulary terms must be translated into various languages [11].", "startOffset": 167, "endOffset": 171}, {"referenceID": 11, "context": "Branching strategies affect the quality in collaborative software development [12], [13].", "startOffset": 78, "endOffset": 82}, {"referenceID": 12, "context": "Branching strategies affect the quality in collaborative software development [12], [13].", "startOffset": 84, "endOffset": 88}, {"referenceID": 13, "context": "Owl2VCS [14] shows deltas among different versions.", "startOffset": 8, "endOffset": 12}, {"referenceID": 9, "context": "Considering the fact that each line should represent a triple and based on the insights on [10], we propose that files should not contain more than 300 triples.", "startOffset": 91, "endOffset": 95}, {"referenceID": 14, "context": "There exists patterns for vocabulary modularization [15].", "startOffset": 52, "endOffset": 56}, {"referenceID": 15, "context": "However, this could lead to following problems as identified in [16]: (1) the number of files could increase rapidly, (2) choosing versions creates confusion, (3) maintenance needs additional resources and (4) synchronizing with latest version from dependent applications requires additional effort.", "startOffset": 64, "endOffset": 68}, {"referenceID": 16, "context": "Based on the scheme from [17] and the mentioned categories of activities in Table II, we propose tagging different versions according to the following pattern: v[StI.", "startOffset": 25, "endOffset": 29}, {"referenceID": 17, "context": "Collaborative vocabulary development is an active research area in the Semantic Web community [19].", "startOffset": 94, "endOffset": 98}, {"referenceID": 18, "context": "Existing approaches like WebProt\u00e9g\u00e9 [20] provides a collaborative web frontend for a subset of the functionality of the Prot\u00e9g\u00e9 OWL editor.", "startOffset": 36, "endOffset": 40}, {"referenceID": 19, "context": "Neologism [21] is a vocabulary publishing platform, with a focus on ease of use and compatibility with Linked Data principles.", "startOffset": 10, "endOffset": 14}, {"referenceID": 20, "context": "VocBench [22], is an open source web application for editing thesauri complying with the SKOS and SKOS-XL standards.", "startOffset": 9, "endOffset": 13}, {"referenceID": 21, "context": "SVoNt [23] extends the functionality of Apache SubVersion (SVN) by providing a possibility for versioning OWL conform lightweight description logic.", "startOffset": 6, "endOffset": 10}, {"referenceID": 22, "context": "ContentCVS [24] is a Prot\u00e9g\u00e9 plugin.", "startOffset": 11, "endOffset": 15}, {"referenceID": 16, "context": "In [17] is described", "startOffset": 3, "endOffset": 7}, {"referenceID": 13, "context": "It can be integrated as an external tool with Git, Mercurial and Subversion and provide algorithms for structural diff [14].", "startOffset": 119, "endOffset": 123}, {"referenceID": 0, "context": "We also plan to develop and integrate a tool that validates vocabularies against conventions [1] and provides recommendations for solving possible issues.", "startOffset": 93, "endOffset": 96}], "year": 2016, "abstractText": "Collaborative vocabulary development in the context of data integration is the process of finding consensus between the experts of the different systems and domains. The complexity of this process is increased with the number of involved people, the variety of the systems to be integrated and the dynamics of their domain. In this paper we advocate that the realization of a powerful version control system is the heart of the problem. Driven by this idea and the success of Git in the context of software development, we investigate the applicability of Git for collaborative vocabulary development. Even though vocabulary development and software development have much more similarities than differences there are still important differences. These need to be considered within the development of a successful versioning and collaboration system for vocabulary development. Therefore, this paper starts by presenting the challenges we were faced with during the creation of vocabularies collaboratively and discusses its distinction to software development. Based on these insights we propose Git4Voc which comprises guidelines how Git can be adopted to vocabulary development. Finally, we demonstrate how Git hooks can be implemented to go beyond the plain functionality of Git by realizing vocabulary-specific features like syntactic validation and semantic diffs.", "creator": "LaTeX with hyperref package"}}}