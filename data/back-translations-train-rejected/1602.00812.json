{"id": "1602.00812", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Feb-2016", "title": "The Grail theorem prover: Type theory for syntax and semantics", "abstract": "As the name suggests, type-logical grammars are a grammar formalism based on logic and type theory. From the prespective of grammar design, type-logical grammars develop the syntactic and semantic aspects of linguistic phenomena hand-in-hand, letting the desired semantics of an expression inform the syntactic type and vice versa. Prototypical examples of the successful application of type-logical grammars to the syntax-semantics interface include coordination, quantifier scope and extraction.This chapter describes the Grail theorem prover, a series of tools for designing and testing grammars in various modern type-logical grammars which functions as a tool . All tools described in this chapter are freely available.", "histories": [["v1", "Tue, 2 Feb 2016 07:35:02 GMT  (69kb,D)", "http://arxiv.org/abs/1602.00812v1", "Modern Perspectives in Type Theoretical Semantics, Springer, 2016"], ["v2", "Fri, 26 Aug 2016 07:04:29 GMT  (82kb,D)", "http://arxiv.org/abs/1602.00812v2", null]], "COMMENTS": "Modern Perspectives in Type Theoretical Semantics, Springer, 2016", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["richard moot"], "accepted": false, "id": "1602.00812"}, "pdf": {"name": "1602.00812.pdf", "metadata": {"source": "CRF", "title": "The Grail theorem prover: Type theory for syntax and semantics", "authors": ["Richard Moot"], "emails": [], "sections": [{"heading": null, "text": "The Grail Theory Proof: Type Theory for Syntax and Semantics Richard MootLaBRI (CNRS), University of Bordeaux"}, {"heading": "1 Introduction", "text": "This chapter describes a number of tools for developing and testing typelogic grammars. The Grail family of theory testers is designed to work with a variety of modern typlogic frameworks, including multimodal typlogic grammars (Moortgat 2011), NLcl (Barker & Shan 2014), displacement calculations (Morrill, Valent \u0301 \u0131n & Fadda 2011), and hybrid typlogic grammars (Kubota & Levine 2012). The tools provide a transparent way to implement grammars and test their consequences by providing a natural derivative in the specific typlogic grammar for each reading of a sentence. None of these tools replaces careful reflection by the grammar writer, of course, but in many cases computer-based tests of handwritten grammars and their consequences will reveal the unintended consequences of our grammar and such unintended proofs."}, {"heading": "2 Type-logical grammars", "text": "Although Lambek built on the work of Ajdukiewicz (1935), BarHillel (1953) and others, Lambek's main innovation was to occupy the calculus as a logic that has a following calculus and demonstrates decidability by eliminating sections. This combination of linguistic and computational applications has proven to be very influential. In its general form, a typical grammar consists of the following components: 1. a logic that plays the role of the \"Universal Grammar\" mainstream linguistics1,2. a homomorphic theory ranging from this logic to intuitionist logic (linear) logic, this interface is the interface syntax interface, with intuitionistics that represents an intuitionistic theory of linguistics."}, {"heading": "2.1 The Lambek calculus", "text": "In fact, it is so that it is a way in which people are able to determine for themselves what they want and what they want. (...) It is not so that they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...) It is as if they do it. (...). (...) It is. (...). (...) It. (...). (...). (...). (. (.). (.). (. (.) It. (.). (.). (.). (.). (. (.). (.). (.). (.). (.). (.). (.). (.). (.). (.). (.). (.). (.). (. (.). (.). (.). (.). (.). (.). (. (.). (.). (.). (.). (.). (.). (.). (. (.). (.).). (. (.). (.). (.). (. (.). (.). (. (.). (.). (. (.). (.).). (.). (. (. (.). (.).). (.). (.). (. (.).). (.). (. (.). (.). (.). (.). (.). (.). (.). (.). (.). (.). (.). (.).). (.). ("}, {"heading": "2.2 The syntax-semantics interface", "text": "For the Lambek calculation, which declares homomorphism to be a multiplicative intuitionist practice, the linear logic is simple: we replace the two implications \"and\" / \"with the linear implication\" (\"and the product\"). For the proof of Figure 2 of the previous section, this figure provides the proof as shown in Figure 3. We have retained the order of the premises of the rules as shown in Figure 2 to allow for a simpler comparison. This deep structure still uses the same atomic formulas the Lambek calculation, it only forgets the order of the formulas and therefore can no longer distinguish between the leftward-looking implication."}, {"heading": "2.3 Going further", "text": "In fact, most people are able to move to another world in which they are in the position in which they find themselves."}, {"heading": "3 Modern type-logical grammars", "text": "We ended the last section with some problems in using the Lambek calculation as a theory of the syntax-semantic interface. These are two different types of problems. 1. The problems of the syntax-semantic interface and, in a certain sense, of formal language theory are problems where the deep structure is correct, but our syntactic calculation cannot produce an analysis of the desired deep structure. We will present two solutions to these problems in sections 3.1 and 3.2.2. The problems of lexical semantics, on the other hand, require a more complex type system than Montagne's simply typical one with the basic types and t and mechanisms such as constraints that allow us to conditionally \"repair\" certain type differences in this system. A solution to this problem will be discussed in section 3.3."}, {"heading": "3.1 Multimodal grammars", "text": "In the multimodal Lambek calculation, the basic objects are the non-associative Lambek calculation as a basis, but allow multimodal families of connections. Logical rules are \"A / i}, {"heading": "3.2 First-order linear logic", "text": "In fact, the majority of people who are able to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move"}, {"heading": "3.3 The Montagovian Generative Lexicon", "text": "In the previous sections, we have discussed two general solutions to the problems of the syntax semantics interface of the Lambek calculus 2011. Both solutions have suggested a more flexible syntactic logic. In this section, we will discuss another type of additional flexibility, namely in the syntax semantics interface itself. Basic motivational examples of a more flexible composition have been discussed extensively in the literature (Pustejovsky 1995, Asher 2011). Our solution is essentially the solution proposed by Bassac, Mery & Retore (2010), called Montagovian Generative Lexicon. I will give only a brief description of this framework. Further details can be found in Chapter XYZ. Editor's note: The first step, like many other solutions, consists of splitting the Montague type for entities: physical objects, informational objects, contingencies, etc. Although there are different opinions regarding the correct types (Pujovsky 1995)."}, {"heading": "4 Theorem proving", "text": "This question becomes particularly urgent when our grammars become more complex and the consequences of our lexical entries are hard to ignore in the face of our logic. This is where the automated theorems test subjects are useful: they allow for a more comprehensive and intensive examination of your grammars, resulting in faster results with fewer errors. Although the natural deduction calculations we have seen so far can be used for the automated theorems, they are useful."}, {"heading": "4.1 Multimodal proof nets", "text": "In fact, it is so that most of them are able to survive themselves, and that they are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...)"}, {"heading": "4.2 First-order proof nets", "text": "In fact, most of them will be able to play by the rules they have set themselves, and they will be able to play by the rules they have set themselves."}, {"heading": "4.3 Tools", "text": "Grail 0 (Moot, Schrijen, Verhoog & Moortgat 2015) and Gral 3 (Moot 2015a) use the multimodal proof-net computation of Section 4.1, while LinearOne (Moot 2015c) uses the world-class proof networks of Section 4.2. GrailLight (Moot 2015b) is a special diagram parser that is designed for use with an automatically extracted French8As discussed in Section 4.1, the multimodal theorem prover allows the grammarist to specify first-class approximations of specific formulas. So, under the surface of the Grail, there is some first-order reasoning that also continues. Grammar for far-reaching analysis and semantics (Moot 2010, Moot 2012, Moot 2012), all provers are available under the GNU Lesser General Public License."}], "references": [{"title": "Die syntaktische Konnexit\u00e4t\u2019, Studies in Philosophy", "author": ["K. Ajdukiewicz"], "venue": null, "citeRegEx": "Ajdukiewicz,? \\Q1935\\E", "shortCiteRegEx": "Ajdukiewicz", "year": 1935}, {"title": "A quasi-arithmetical notation for syntactic description", "author": ["Y. Press. Bar-Hillel"], "venue": null, "citeRegEx": "Bar.Hillel,? \\Q1953\\E", "shortCiteRegEx": "Bar.Hillel", "year": 1953}, {"title": "Continuations and Natural Language, Oxford Studies in Theoretical Linguistics", "author": ["C. Barker", "C. Shan"], "venue": null, "citeRegEx": "Barker and Shan,? \\Q2014\\E", "shortCiteRegEx": "Barker and Shan", "year": 2014}, {"title": "Towards a type-theoretical account of lexical semantics", "author": ["C. Bassac", "B. Mery", "C. Retor\u00e9"], "venue": "Journal of Logic, Language and Information", "citeRegEx": "Bassac et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Bassac et al\\.", "year": 2010}, {"title": "A natural deduction theorem prover for type-theoretic categorial grammars", "author": ["B. Carpenter"], "venue": "Technical report,", "citeRegEx": "Carpenter,? \\Q1994\\E", "shortCiteRegEx": "Carpenter", "year": 1994}, {"title": "Natural language reasoning using Coq: Interaction and automation, in \u2018Proceedings of Traitement Automatique des Langues Naturelles (TALN 2015)", "author": ["S. Chatzikyriakidis"], "venue": null, "citeRegEx": "Chatzikyriakidis,? \\Q2015\\E", "shortCiteRegEx": "Chatzikyriakidis", "year": 2015}, {"title": "The structure of multiplicatives", "author": ["V. Danos", "L. Regnier"], "venue": "Archive for Mathematical Logic", "citeRegEx": "Danos and Regnier,? \\Q1989\\E", "shortCiteRegEx": "Danos and Regnier", "year": 1989}, {"title": "Linear logic", "author": ["Girard", "J.-Y"], "venue": "Theoretical Computer Science", "citeRegEx": "Girard and J..Y.,? \\Q1987\\E", "shortCiteRegEx": "Girard and J..Y.", "year": 1987}, {"title": "Quantifiers in linear logic II", "author": ["Girard", "J.-Y"], "venue": "Proceedings of the conference with the same name, Viareggio,", "citeRegEx": "Girard and J..Y.,? \\Q1991\\E", "shortCiteRegEx": "Girard and J..Y.", "year": 1991}, {"title": "Correctness of multiplicative proof nets is linear, in \u2018Fourteenth", "author": ["S. Guerrini"], "venue": "Annual IEEE Symposium on Logic in Computer Science\u2019,", "citeRegEx": "Guerrini,? \\Q1999\\E", "shortCiteRegEx": "Guerrini", "year": 1999}, {"title": "The weak inadequacy of context-free phrase structure grammars", "author": ["R. Huijbregts"], "venue": null, "citeRegEx": "Huijbregts,? \\Q1984\\E", "shortCiteRegEx": "Huijbregts", "year": 1984}, {"title": "Dancing links\u2019, arXiv preprint cs/0011047", "author": ["D.E. Knuth"], "venue": null, "citeRegEx": "Knuth,? \\Q2000\\E", "shortCiteRegEx": "Knuth", "year": 2000}, {"title": "Gapping as like-category coordination", "author": ["Y. Kubota", "R. Levine"], "venue": "\u2018Logical Aspects of Computational Linguistics\u2019,", "citeRegEx": "Kubota and Levine,? \\Q2012\\E", "shortCiteRegEx": "Kubota and Levine", "year": 2012}, {"title": "The mathematics of sentence structure", "author": ["J. Lambek"], "venue": "American Mathematical Monthly", "citeRegEx": "Lambek,? \\Q1958\\E", "shortCiteRegEx": "Lambek", "year": 1958}, {"title": "Common nouns as types, in \u2018Logical aspects of computational linguistics (LACL2012)", "author": ["Z. Luo"], "venue": null, "citeRegEx": "Luo,? \\Q2012\\E", "shortCiteRegEx": "Luo", "year": 2012}, {"title": "Formal semantics in modern type theories with coercive subtyping", "author": ["Z. Luo"], "venue": "Linguistics and Philosophy", "citeRegEx": "Luo,? \\Q2012\\E", "shortCiteRegEx": "Luo", "year": 2012}, {"title": "A Lambek calculus with dependent types, in \u2018Types for Proofs and Programs (TYPES 2015)\u2019, Tallinn", "author": ["Z. Luo"], "venue": null, "citeRegEx": "Luo,? \\Q2015\\E", "shortCiteRegEx": "Luo", "year": 2015}, {"title": "Plurals: individuals and sets in a richly typed semantics, in \u2018The Tenth International Workshop of Logic and Engineering of Natural Language Semantics 10 (LENLS10)", "author": ["B. Mery", "R. Moot", "C. Retor\u00e9"], "venue": null, "citeRegEx": "Mery et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mery et al\\.", "year": 2013}, {"title": "Higherorder logical inference with compositional semantics, in \u2018Proceedings of Empirical Method for Natural Language Processing (EMNLP 2015)", "author": ["K. Mineshima", "P. Mart\u0301\u0131nez-G\u00f3mez", "Y. Miyao", "D. Bekki"], "venue": null, "citeRegEx": "Mineshima et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mineshima et al\\.", "year": 2015}, {"title": "The proper treatment of quantification in ordinary English, in R. Thomason, ed., \u2018Formal Philosophy", "author": ["R. Montague"], "venue": null, "citeRegEx": "Montague,? \\Q1974\\E", "shortCiteRegEx": "Montague", "year": 1974}, {"title": "Categorial type logics", "author": ["M. Moortgat"], "venue": "North-Holland Elsevier, Amsterdam,", "citeRegEx": "Moortgat,? \\Q2011\\E", "shortCiteRegEx": "Moortgat", "year": 2011}, {"title": "Adjacency, dependency and order, in \u2018Proceedings 9th Amsterdam Colloquium", "author": ["M. Moortgat", "R.T. Oehrle"], "venue": null, "citeRegEx": "Moortgat and Oehrle,? \\Q1994\\E", "shortCiteRegEx": "Moortgat and Oehrle", "year": 1994}, {"title": "Filtering axiom links for proof nets", "author": ["R. Moot"], "venue": "Technical report,", "citeRegEx": "Moot,? \\Q2008\\E", "shortCiteRegEx": "Moot", "year": 2008}, {"title": "Wide-coverage French syntax and semantics using Grail, in \u2018Proceedings of Traitement Automatique des Langues Naturelles (TALN)", "author": ["R. Moot"], "venue": null, "citeRegEx": "Moot,? \\Q2010\\E", "shortCiteRegEx": "Moot", "year": 2010}, {"title": "Wide-coverage semantics for spatio-temporal reasoning", "author": ["R. Moot"], "venue": "Traitement Automatique des Languages", "citeRegEx": "Moot,? \\Q2012\\E", "shortCiteRegEx": "Moot", "year": 2012}, {"title": "Grail\u2019, http://www.labri.fr/perso/moot/grail3.html. Mature and flexible parser for multimodal grammars", "author": ["R. Moot"], "venue": null, "citeRegEx": "Moot,? \\Q2015\\E", "shortCiteRegEx": "Moot", "year": 2015}, {"title": "Grail light\u2019, https://github.com/RichardMoot/GrailLight. Fast, lightweight version of the Grail parser", "author": ["R. Moot"], "venue": null, "citeRegEx": "Moot,? \\Q2015\\E", "shortCiteRegEx": "Moot", "year": 2015}, {"title": "Linear one: A theorem prover for first-order linear logic\u2019, https://github.com/RichardMoot/LinearOne", "author": ["R. Moot"], "venue": null, "citeRegEx": "Moot,? \\Q2015\\E", "shortCiteRegEx": "Moot", "year": 2015}, {"title": "Linguistic applications of first order multiplicative linear logic", "author": ["R. Moot", "M. Piazza"], "venue": "Journal of Logic, Language and Information", "citeRegEx": "Moot and Piazza,? \\Q2001\\E", "shortCiteRegEx": "Moot and Piazza", "year": 2001}, {"title": "Proof nets for the multimodal Lambek calculus", "author": ["R. Moot", "Q. Puite"], "venue": "Studia Logica", "citeRegEx": "Moot and Puite,? \\Q2002\\E", "shortCiteRegEx": "Moot and Puite", "year": 2002}, {"title": "Second order lambda calculus for meaning assembly: on the logical syntax of plurals, in \u2018Computing Natural Reasoning (COCONAT)", "author": ["R. Moot", "C. Retor\u00e9"], "venue": null, "citeRegEx": "Moot and Retor\u00e9,? \\Q2011\\E", "shortCiteRegEx": "Moot and Retor\u00e9", "year": 2011}, {"title": "The Logic of Categorial Grammars: A Deductive Account of Natural Language Syntax and Semantics, number 6850 in \u2018Lecture Notes in Artificial Intelligence", "author": ["R. Moot", "C. Retor\u00e9"], "venue": null, "citeRegEx": "Moot and Retor\u00e9,? \\Q2012\\E", "shortCiteRegEx": "Moot and Retor\u00e9", "year": 2012}, {"title": "Grail0: A theorem prover for multimodal categorial grammars\u2019, https://github.com/RichardMoot/Grail0", "author": ["R. Moot", "X. Schrijen", "G.J. Verhoog", "M. Moortgat"], "venue": null, "citeRegEx": "Moot et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Moot et al\\.", "year": 2015}, {"title": "The displacement calculus", "author": ["G. Morrill", "O. Valent\u0301\u0131n", "M. Fadda"], "venue": "Journal of Logic, Language and Information", "citeRegEx": "Morrill et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Morrill et al\\.", "year": 2011}, {"title": "Dominator trees and fast verification of proof nets, in \u2018Logic in Computer Science", "author": ["A.S. Murawski", "Ong", "C.-H. L"], "venue": null, "citeRegEx": "Murawski et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Murawski et al\\.", "year": 2000}, {"title": "Term-labeled categorial type systems", "author": ["R.T. Oehrle"], "venue": "Linguistics & Philosophy", "citeRegEx": "Oehrle,? \\Q1994\\E", "shortCiteRegEx": "Oehrle", "year": 1994}, {"title": "Product-free Lambek calculus and context-free grammars", "author": ["M. Pentus"], "venue": "Journal of Symbolic Logic", "citeRegEx": "Pentus,? \\Q1997\\E", "shortCiteRegEx": "Pentus", "year": 1997}, {"title": "Controlling extraction in abstract categorial grammars", "author": ["S. Pogodalla", "F. Pompigne"], "venue": "\u2018Proceedings of Formal Grammar 2010\u20132011\u2019,", "citeRegEx": "Pogodalla and Pompigne,? \\Q2012\\E", "shortCiteRegEx": "Pogodalla and Pompigne", "year": 2012}, {"title": "The generative lexicon", "author": ["J. Pustejovsky"], "venue": null, "citeRegEx": "Pustejovsky,? \\Q1995\\E", "shortCiteRegEx": "Pustejovsky", "year": 1995}, {"title": "Intuitionistic categorial grammar", "author": ["A. Ranta"], "venue": "Linguistics and Philosophy", "citeRegEx": "Ranta,? \\Q1991\\E", "shortCiteRegEx": "Ranta", "year": 1991}, {"title": "Evidence against the context-freeness of natural language", "author": ["S. Shieber"], "venue": "Linguistics & Philosophy", "citeRegEx": "Shieber,? \\Q1985\\E", "shortCiteRegEx": "Shieber", "year": 1985}, {"title": "The hidden structural rules of the discontinuous Lambek calculus", "author": ["O. Valent\u0301\u0131n"], "venue": "Artificial Intelligence\u2019,", "citeRegEx": "Valent\u0301\u0131n,? \\Q2014\\E", "shortCiteRegEx": "Valent\u0301\u0131n", "year": 2014}, {"title": "Language in Action: Categories, Lambdas and Dynamic Logic", "author": ["J. van Benthem"], "venue": null, "citeRegEx": "Benthem,? \\Q1995\\E", "shortCiteRegEx": "Benthem", "year": 1995}], "referenceMentions": [{"referenceID": 20, "context": "The Grail family of theorem provers have been designed to work with a variety of modern type-logical frameworks, including multimodal type-logical grammars (Moortgat 2011), NLcl (Barker & Shan 2014), the Displacement calculus (Morrill, Valent\u0301\u0131n & Fadda 2011) and hybrid type-logical grammars (Kubota & Levine 2012).", "startOffset": 156, "endOffset": 171}, {"referenceID": 12, "context": "Type-logical grammars originated when Lambek (1958) introduced his Syntactic Calculus (called the Lambek calculus, L, by later authors).", "startOffset": 38, "endOffset": 52}, {"referenceID": 0, "context": "Though Lambek built on the work of Ajdukiewicz (1935), BarHillel (1953) and others, Lambek\u2019s main innovation was to cast the calculus as a logic, giving a sequent calculus and showing decidability by means of cut elimination.", "startOffset": 35, "endOffset": 54}, {"referenceID": 0, "context": "Though Lambek built on the work of Ajdukiewicz (1935), BarHillel (1953) and others, Lambek\u2019s main innovation was to cast the calculus as a logic, giving a sequent calculus and showing decidability by means of cut elimination.", "startOffset": 35, "endOffset": 72}, {"referenceID": 13, "context": "To make things more concrete, I will start by presenting the Lambek calculus (Lambek 1958).", "startOffset": 77, "endOffset": 90}, {"referenceID": 13, "context": "For the Lambek calculus, specifying the homomorphism to multiplicative intuitionistic linear logic is easy: we replace the two implications \u2018\\\u2019 and \u2018/\u2019 by the linear implication \u2018(\u2019 and the product \u2018\u2022\u2019 by the tensor \u2018\u2297\u2019. In a statement \u0393 ` C, \u0393 is now a multiset of formulas instead of a sequence. In other words, the sequent comma \u2018,\u2019 is now associative, commutative instead of associative noncommutative. For the proof of Figure 2 of the previous section, this mapping gives the proof shown in Figure 3. We have kept the order of the premisses of the rules as they were in Figure 2 to allow for an easier comparison. This deep structure still uses the same atomic formulas as the Lambek calculus, it just forgets about the order of the formulas and therefore can no longer distinguish between the leftward looking implication \u2018\\\u2019 and the rightward looking implication \u2018/\u2019. To obtain a semantics in the tradition of Montague (1974), we use the following mapping from syntactic types to semantic types, using Montague\u2019s atomic types e (for entity) and t (for truth value).", "startOffset": 8, "endOffset": 933}, {"referenceID": 13, "context": "Proofs in the Lambek calculus, and in type-logical grammars are subsets of the proofs in intuitionistic (linear) logic and these proofs are compatible with formal semantics in the tradition initiated by Montague (1974). The example in this section presented the calculation of the semantics of a simple example in \u201cslow motion\u201d: many authors assign a lambda term directly to a proof in their type-logical grammar, leaving the translation to intuitionistic linear logic implicit.", "startOffset": 14, "endOffset": 219}, {"referenceID": 36, "context": "Formal language theory The Lambek calculus generates only context-free languages (Pentus 1997).", "startOffset": 81, "endOffset": 94}, {"referenceID": 20, "context": "Multimodal type-logical grammars (Moortgat 2011) take the non-associative Lambek calculus as its base, but allow multiple families of connectives.", "startOffset": 33, "endOffset": 48}, {"referenceID": 21, "context": "We can systematize this translation, following Moot & Piazza (2001), and obtain the following translation from Lambek calculus formulas to first-order linear logic formulas.", "startOffset": 47, "endOffset": 68}, {"referenceID": 35, "context": "Examples include lambda grammars (Oehrle 1994), the Displacement calculus (Morrill et al.", "startOffset": 33, "endOffset": 46}, {"referenceID": 33, "context": "Examples include lambda grammars (Oehrle 1994), the Displacement calculus (Morrill et al. 2011) and hybrid typelogical grammars (Kubota & Levine 2012).", "startOffset": 74, "endOffset": 95}, {"referenceID": 13, "context": "In the previous sections, we have discussed two general solutions to the problems of the syntax-semantics interface of the Lambek calculus. Both solutions proposed a more flexible syntactic logic. In this section, we will discuss a different type of added flexibility, namely in the syntax-semantics interface itself. The basic motivating examples for a more flexible composition have been amply debated in the literature (Pustejovsky 1995, Asher 2011). Our solution is essentially the one proposed by Bassac, Mery & Retor\u00e9 (2010), called the Montagovian Generative Lexicon.", "startOffset": 123, "endOffset": 531}, {"referenceID": 22, "context": "As an example from Moot & Retor\u00e9 (2011) and Mery, Moot & Retor\u00e9 (2013), one of the classic puzzles in semantics are plurals and collective and distributive readings.", "startOffset": 19, "endOffset": 40}, {"referenceID": 22, "context": "As an example from Moot & Retor\u00e9 (2011) and Mery, Moot & Retor\u00e9 (2013), one of the classic puzzles in semantics are plurals and collective and distributive readings.", "startOffset": 19, "endOffset": 71}, {"referenceID": 22, "context": "Moot & Puite (2002) present the full details.", "startOffset": 0, "endOffset": 20}, {"referenceID": 21, "context": "A proof structure is a proof net iff it contracts to a tree containing only tensor links using the contractions of Table 6 and any structural rewrites, discussed below \u2014 Moot & Puite (2002) present full proofs.", "startOffset": 170, "endOffset": 190}, {"referenceID": 23, "context": "7Lexical ambiguity is a major problem for automatically extracted wide-coverage grammars as well, though standard statistical methods can help alleviate this problem (Moot 2010).", "startOffset": 166, "endOffset": 177}, {"referenceID": 11, "context": "As to the proof search strategy used by Grail, it is an instance of the \u201cdancing links\u201d algortihm (Knuth 2000): when connecting atomic formulas, we always link a formula which has the least possibilities and we rewrite the abstract proof structures only once a fully linked proof structure has been produced.", "startOffset": 98, "endOffset": 110}, {"referenceID": 22, "context": "Though the parser is not extremely fast, evaluation both on randomly generated statements and on multimodal statements extracted from corpora show that the resulting algorithm performs more than well enough (Moot 2008).", "startOffset": 207, "endOffset": 218}, {"referenceID": 9, "context": "Though there are efficient ways of testing acyclicity and connectedness for multiplicative proof nets (Guerrini 1999, Murawski & Ong 2000) and it seems these can be adapted to the first-order case (though some care needs to be taken when we allow complex terms), the theorem prover for first-order linear logic uses a extension of the contraction criterion of Danos (1990). Given a proof structure we erase all formulas from the vertices and keep only a set of the free variables at this vertex.", "startOffset": 103, "endOffset": 373}], "year": 2017, "abstractText": "This chapter will describe a series of tools for developing and testing typelogical grammars. The Grail family of theorem provers have been designed to work with a variety of modern type-logical frameworks, including multimodal type-logical grammars (Moortgat 2011), NLcl (Barker & Shan 2014), the Displacement calculus (Morrill, Valent\u0301\u0131n & Fadda 2011) and hybrid type-logical grammars (Kubota & Levine 2012). The tools give a transparent way of implementing grammars and testing their consequences, providing a natural deduction proof in the specific type-logical grammar for each of the readings of a sentence. None of this replaces careful reflection by the grammar writer, of course, but in many cases, computational testing of hand-written grammars will reveal surprises, showing unintended consequences of our grammar and such unintended proofs (or unintended absences of proofs) help us improve the grammar. Computational tools also help us speed up grammar development, for example by allowing us to compare several alternative solutions to a problem and investigate their differences. This paper will describe the underlying formalism of the theorem provers, as it is visible during an interactive proof trace, and present the general strategy followed by the theorem provers. The presentation in this paper will be somewhat informal, referring the reader elsewhere for full proofs. The rest of this paper is structured as follows. Section 2 will present a general introduction to type-logical grammars and illustrate its basic concepts using the Lambek calculus, ending the section with some problems at the syntaxsemantics interface for the Lambek calculus. Section 3 will look at recent developments in type-logical grammars and how they solve some of the problems at the syntax-semantics interface. Section 4 will look at two general frameworks for automated theorem proving for type-logical grammars, describing the internal representation of partial proofs and giving a high-level overview of the proof search mechanism.", "creator": "LaTeX with hyperref package"}}}