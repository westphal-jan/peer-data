{"id": "1602.07064", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Feb-2016", "title": "SIFT: An Algorithm for Extracting Structural Information From Taxonomies", "abstract": "In this work we present SIFT, a 3-step algorithm for the analysis of the structural information represented by means of a taxonomy. The major advantage of this algorithm is the capability to leverage the information inherent to the hierarchical structures of taxonomies to infer correspondences which can allow to merge them in a later step. This method is particular relevant in scenarios where taxonomy alignment techniques exploiting textual information from taxonomy nodes cannot operate successfully.", "histories": [["v1", "Tue, 23 Feb 2016 07:33:02 GMT  (9kb)", "http://arxiv.org/abs/1602.07064v1", "12 pages"]], "COMMENTS": "12 pages", "reviews": [], "SUBJECTS": "cs.DB cs.AI", "authors": ["jorge martinez-gil"], "accepted": false, "id": "1602.07064"}, "pdf": {"name": "1602.07064.pdf", "metadata": {"source": "CRF", "title": "SIFT: An Algorithm for Extracting Structural Information From Taxonomies", "authors": ["Jorge Martinez-Gil"], "emails": ["jorgemar@acm.org"], "sections": [{"heading": null, "text": "ar Xiv: 160 2.07 064v 1 [cs.D B] February 23, 2016In this paper, we present SIFT, a three-step algorithm for analyzing the structural information represented by a taxonomy. A major advantage of this algorithm is the ability to use the information inherent in the hierarchical structures of taxonomy to derive agreements that allow them to merge in a later step. This method is particularly relevant in scenarios where taxonomy alignment techniques that exploit textual information from taxonomy nodes cannot work successfully."}, {"heading": "1 Introduction", "text": "The problem of alignment of taxonomies is one of the most interesting and relevant problems for knowledge engineers, as it affects a wide range of computer problems, including file system merging, operating system creation, catalog integration, distributed taxonomy, and so on. The non-deterministic nature of the problem is given by the fact that not even humans are able to find optimal alignments in this area, so the process is highly subjective. This means that its limitations often go beyond the category of a technical problem, which makes it difficult to find coherent solutions in this area."}, {"heading": "2 Related Work", "text": "The problem of alignment of taxonomies has been taken much more into account by the research community in the areas of cluster algorithms, Internet browsing and recommendation systems than is the case in describing taxonomies. Moreover, this problem is of great interest to a number of fields of application, especially in science. If we only use the text label to represent the concepts, we can find many alignment techniques that are capable of recognizing taxonomy concepts that are equivalent, but when can we say that two concepts are equivalent?"}, {"heading": "3 Contribution", "text": "We approach the problem from the classical perspective, which is that a taxonomy can be defined as a series of concepts organized hierarchically to control the terms that belong to a vocabulary, with the aim of facilitating a number of operations on elements from a repository. However, a problem occurs when two elementary positions need to be merged, as it is also necessary to merge the two taxonomies that describe this problem. Our contribution to this problem is the suggestion of an efficient 3-step algorithm for analyzing such repositories. This analysis could be helpful in solving the problem of heterogeneity between the given taxonomies."}, {"heading": "3.1 Converting a knowledge model into a taxonomy", "text": "This is the first step, which consists of converting the model into a taxonomy, which allows us to calculate the data associated with the neighborhood of each concept more easily into the knowledge model. This step is optional and only necessary if the input is not a perfect hierarchy, but contains some cycles. This is the usual case, for example, when we work with graph models or ontologies. The procedure is inspired by a procedure proposed in [12] to examine all concepts in an ontology. Algorithm 1 shows the related portion of the pseudocodes. algorithm 1 ont2tax: Procedure for converting a generic knowledge model into a taxonomy Required: cls: class, occurs: List, Depth: Integer1: StoringInTax (cls, Depth); Step 2: if (cls.canAs (model.class) AND (NOT occurs.contains (cls)))) then 3: during Iterclator = Classes: (Depth)."}, {"heading": "3.2 Storing the taxonomy in the data structure", "text": "In this second step we only know the depth (number of indentations for the taxon) and the name of each concept, so we can only partially fill the data structure, so we can only call the procedure with the arguments depth and concept name.Algorithm 2 StoringInTax: Saving the taxonomy in the data structure Required: cls: ontology, depth: integer1: Element e: = new Element (depth, 0, 0, 0, cls.getName) 2: DS.add (e) 3: return true"}, {"heading": "3.3 Ordering and filling the data structure", "text": "With the data stored in the DS, we can now determine the changes in the depth of the entries in the taxonomy to calculate the number of children, brothers and so on. The following rules must be taken into account: 1. All taxons with the same depth are level taxons. 2. A chain of brothers is a chain of taxons on the same level. 3. A change to an outer taxon breaks a chain of brothers. 4. All brothers with a previous position are on the left. 5. In a taxon, if the following concept has an inner depth, it is a child. 6. A chain of children can only be broken by a change to an outer taxon. 7. An inner taxon (grandson taxon) does not break a chain of children. Algorithm 3 shows us the procedural implementation of this set of rules. The computational complexity of this procedure is low, even in the worst cases we would have O (n2), because the most complex part of the code program can be implemented by two simple means."}, {"heading": "3.4 Calling to the algorithm", "text": "Now it is necessary to call the algorithm. At this point it is necessary to define the taxonomiemodell and locate the concepts without ancestors to visit all concepts. This is especially relevant in forest models. Note that the ArrayList is then necessary to store the visited concepts. (Algorithm 4 shows the related part of the pseudocode.1Forest model is this type of graph model, in which there is no connection between any graph components. (Algorithm 3 finalStep: Brothers: Order and fill the data structure required: Children, Brothers, Brothers left: Integer Required: same level, i, j, k, t: Integer Required: ag: Boolean1: for i: = 0 to DS.size do 2: Brothers, Brothers left: = for j: = for children: = for j: for children: = 0 to DS.size: for children: = for DS.4:: for children: (if for: if for NO.i:: if for NO.i:: if for children: if for:....: if for: for:)"}, {"heading": "4 Case studies", "text": "The purpose of this section is to show the relative ease with which a taxonomy analysis can be performed or a new taxonomy matcher can be developed based on the data of the algorithm. In the next sections we will show three use cases: how to use the algorithm to calculate the sheets in a taxonomy, how to use it to obtain the structural index of a taxonomy, and finally how to use it to automatically align taxonomies."}, {"heading": "4.1 Computing the number of leaves in a taxonomy", "text": "Algorithm 5 shows us how to calculate the leaves (i.e. terminal nodes) of a given taxonomy. Algorithm 5 leaves: Calculation of the leaves of a taxonomy Required: var max, Leaves: integer1: max: = Leaves: = 0 2: do for i: = 0 to DS.Size 3: if (DS [i].Depth > max) then 4: max: = DS [i].Depth 5: end if 6: end for 7: do for j: = 0 to DS.Size 8: if (DS [j].Depth = then do leaves for max: 10: end for 12: end for 11: end"}, {"heading": "4.2 Comparing structural similarities", "text": "The structure index of a taxonomy is a kind of hash function that provides global information about the total number of children, brothers, etc. As we show on the state of the art, some techniques use statistical methods to obtain the structural similarity. Algorithm 6 shows how to automatically calculate a possible structure index from a taxonomy. Algorithm 6 Structural Index: Extracting a structural index of ontology Required: var acum: integer1: acum: = 0: for i: = 0 to DS.size do 3: acum: = acum + DS [i].depth 4: acum + DS [i].children 5: acum: integer1: acum: for i: = 0 to DS.do size 3: acum: = acum + DS [i]."}, {"heading": "4.3 Real alignment situations", "text": "Our algorithm also allows information from the analysis phase to be helpful in making decisions in taxonomic alignment scenarios. Output data from SIFT allows us to easily create custom rule-based matchers to obtain more accurate alignments of taxonomy. Similarities between two taxonomy concepts or taxons could, for example, be given by certain rules relating to ancestors, brothers, etc. In addition, it is possible to combine our proposal with other basic matching algorithms. This can be done by designing a formula that allows us to align taxonomies from the element point of view and from the taxonomy structure. This is possible because one of the attributes (name) contains information at the element level, so it is possible to exploit this type of information by using a type of calculation method such as the Levenshtein algorithm, which is able to calculate similarities between two strands of text."}, {"heading": "5 Conclusions & Future Work", "text": "In this thesis, we have designed and implemented SIFT, a three-step algorithm that allows us to analyze the structural information inherent in the hierarchical structures of taxonomy, which can be useful when solving problems related to heterogeneity between taxonomies that describe the same domain but are developed separately. Therefore, the algorithm we propose is valid for the alignment of taxonomy, but also for the alignment of ontologies, directories, file systems, operating system distributions, and in general for any type of model that can be transformed into a taxonomy. Our algorithm attempts to use the inherent properties of taxonomies to derive concordances that allow us to merge them at a later stage, even without text markers that describe each of the nodes of taxonomy."}], "references": [{"title": "Schema - an algorithm for automated product taxonomy mapping in e-commerce", "author": ["S.S. Aanen", "L.J. Nederstigt", "D. Vandic", "F. Frasincar"], "venue": "In ESWC,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "A large scale taxonomy mapping evaluation", "author": ["P. Avesani", "F. Giunchiglia", "M. Yatskevich"], "venue": "In International Semantic Web Conference,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Structure- and extension-informed taxonomy alignment", "author": ["K.S. Candan", "M. Cataldi", "M.L. Sapino", "C. Schifanella"], "venue": "In ODBIS, pages", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Semantic heterogeneity issues on the web", "author": ["J. Gracia", "E. Mena"], "venue": "IEEE Internet Computing,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Taxomap alignment and refinement modules: results for oaei", "author": ["F. Hamdi", "B. Safar", "N.B. Niraula", "C. Reynaud"], "venue": "In OM,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "Taxonomy alignment for interoperability between heterogeneous digital libraries", "author": ["J.J. Jung"], "venue": "In ICADL,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2006}, {"title": "Binary codes capable of correcting deletions, insertions and reversals", "author": ["V.I. Levenshtein"], "venue": "Soviet Physics Doklady,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1966}, {"title": "Generic schema matching with cupid", "author": ["J. Madhavan", "P.A. Bernstein", "E. Rahm"], "venue": "In VLDB,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2001}, {"title": "An overview of textual semantic similarity measures based on web intelligence", "author": ["J. Martinez-Gil"], "venue": "Artif. Intell. Rev.,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "Reverse ontology matching", "author": ["J. Martinez-Gil", "J.F. Aldana-Montes"], "venue": "SIGMOD Record,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2010}, {"title": "Semantic similarity measurement using historical google search patterns", "author": ["J. Martinez-Gil", "J.F. Aldana-Montes"], "venue": "Information Systems Frontiers,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "Jena: A semantic web toolkit", "author": ["B. McBride"], "venue": "IEEE Internet Computing,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2002}, {"title": "Similarity flooding: A versatile graph matching algorithm and its application to schema matching", "author": ["S. Melnik", "H. Garcia-Molina", "E. Rahm"], "venue": "In ICDE,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2002}, {"title": "Hamster: Using search clicklogs for schema and taxonomy", "author": ["A. Nandi", "P.A. Bernstein"], "venue": "matching. PVLDB,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2009}, {"title": "Large-scale taxonomy mapping for restructuring and integrating wikipedia", "author": ["S.P. Ponzetto", "R. Navigli"], "venue": "In IJCAI,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "A survey of approaches to automatic schema matching", "author": ["E. Rahm", "P.A. Bernstein"], "venue": "VLDB J.,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2001}, {"title": "When usual structural alignment techniques don\u2019t apply", "author": ["C. Reynaud", "B. Safar"], "venue": "In Ontology Matching,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2006}, {"title": "Ontology matching: State of the art and future challenges", "author": ["P. Shvaiko", "J. Euzenat"], "venue": "IEEE Trans. Knowl. Data Eng.,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2013}, {"title": "The application of a hierarchical tree method to ontology knowledge engineering", "author": ["S. Sun", "D. Liu", "G. Li"], "venue": "International Journal of Software Engineering and Knowledge Engineering,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2012}], "referenceMentions": [{"referenceID": 5, "context": "The non-deterministic nature of the problem is given by the fact that not even humans are able to identify optimal alignments [6], so the process is highly subjective.", "startOffset": 126, "endOffset": 129}, {"referenceID": 15, "context": "Note that the need for aligning taxonomies comes from the old field of database schema integration [16].", "startOffset": 99, "endOffset": 103}, {"referenceID": 17, "context": "Therefore, the problem we are facing consists of providing a set of correspondences between the nodes of two taxonomies about the same domain but which have been developed separately [18].", "startOffset": 183, "endOffset": 187}, {"referenceID": 2, "context": "The problem of aligning taxonomies have received much attention by the research community since various knowledge based applications, including clustering algorithms, browsing support interfaces, and recommendation systems, perform more effectively when they are supported with domain describing taxonomies, which help to resolve ambiguities and provide context [3].", "startOffset": 362, "endOffset": 365}, {"referenceID": 5, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 106, "endOffset": 109}, {"referenceID": 0, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 120, "endOffset": 123}, {"referenceID": 13, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 124, "endOffset": 128}, {"referenceID": 3, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 155, "endOffset": 158}, {"referenceID": 14, "context": "Furthermore, this problem is of great interest on a number of application areas, especially in scientific [6], business [1] [14], and web data integration [4] [15].", "startOffset": 159, "endOffset": 163}, {"referenceID": 2, "context": "However, it is well known that when taxonomies are used as knowledge sources, the way users perceive the degree of likeness between pairs of concepts is highly dependent on the domain being explored [3].", "startOffset": 199, "endOffset": 202}, {"referenceID": 9, "context": "Existing taxonomy alignment techniques focus on different dimensions of the problem, including whether data instances are used for matching [10], whether linguistic information and other auxiliary information are available [11], and whether the match is performed for complex structures [13].", "startOffset": 140, "endOffset": 144}, {"referenceID": 10, "context": "Existing taxonomy alignment techniques focus on different dimensions of the problem, including whether data instances are used for matching [10], whether linguistic information and other auxiliary information are available [11], and whether the match is performed for complex structures [13].", "startOffset": 223, "endOffset": 227}, {"referenceID": 12, "context": "Existing taxonomy alignment techniques focus on different dimensions of the problem, including whether data instances are used for matching [10], whether linguistic information and other auxiliary information are available [11], and whether the match is performed for complex structures [13].", "startOffset": 287, "endOffset": 291}, {"referenceID": 16, "context": "Heuristics consider, for example, that elements of two distinct taxonomies are similar if their direct sub-concepts, and/or their direct super-concepts and/or their brother concepts are similar [17].", "startOffset": 194, "endOffset": 198}, {"referenceID": 7, "context": "These structural techniques can be based on a fixed point like that proposed in [8], or can be viewed as a satisfiability problem of a set of propositional formulas [2].", "startOffset": 80, "endOffset": 83}, {"referenceID": 1, "context": "These structural techniques can be based on a fixed point like that proposed in [8], or can be viewed as a satisfiability problem of a set of propositional formulas [2].", "startOffset": 165, "endOffset": 168}, {"referenceID": 4, "context": "There are also some proposals to align taxonomies supposed to be asymmetric from a structural point of view [5], or to create matching functions by means of a composition of various techniques designed to make best use of the characteristics of the taxonomies [17].", "startOffset": 108, "endOffset": 111}, {"referenceID": 16, "context": "There are also some proposals to align taxonomies supposed to be asymmetric from a structural point of view [5], or to create matching functions by means of a composition of various techniques designed to make best use of the characteristics of the taxonomies [17].", "startOffset": 260, "endOffset": 264}, {"referenceID": 8, "context": "Despite such advances in matching technologies, taxonomy alignments using linguistic information and other auxiliary information are rarely perfect [9].", "startOffset": 148, "endOffset": 151}, {"referenceID": 18, "context": "The first step is optional since it is only necessary when the given knowledge model is not a taxonomy yet, but another kind of more general model like an graph or an ontology [19].", "startOffset": 176, "endOffset": 180}, {"referenceID": 11, "context": "procedure is inspired by one proposed in [12] to visit all the concepts in an ontology.", "startOffset": 41, "endOffset": 45}, {"referenceID": 6, "context": "using some kind of computational method like the Levenshtein algorithm [7] which is able to calculate similarity between two text strings.", "startOffset": 71, "endOffset": 74}], "year": 2016, "abstractText": "In this work we present SIFT, a 3-step algorithm for the analysis of the structural information represented by means of a taxonomy. The major advantage of this algorithm is the capability to leverage the information inherent to the hierarchical structures of taxonomies to infer correspondences which can allow to merge them in a later step. This method is particular relevant in scenarios where taxonomy alignment techniques exploiting textual information from taxonomy nodes cannot operate successfully.", "creator": "LaTeX with hyperref package"}}}