{"id": "1602.07721", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Feb-2016", "title": "Toward Game Level Generation from Gameplay Videos", "abstract": "Algorithms that generate computer game content require game design knowledge. We present an approach to automatically learn game design knowledge for level design from gameplay videos. We further demonstrate how the acquired design knowledge can be used to generate sections of game levels. Our approach involves parsing video of people playing a game to detect the appearance of patterns of sprites and utilizing machine learning to build a probabilistic model of sprite placement. We show how rich game design information can be automatically parsed from gameplay videos and represented as a set of generative probabilistic models. We use Super Mario Bros. as a proof of concept. We evaluate our approach on a measure of playability and stylistic similarity to the original levels as represented in the gameplay videos.", "histories": [["v1", "Tue, 23 Feb 2016 02:38:16 GMT  (3902kb)", "http://arxiv.org/abs/1602.07721v1", "8 pages, 10 figures, Procedural Content Generation Workshop 2015"]], "COMMENTS": "8 pages, 10 figures, Procedural Content Generation Workshop 2015", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["matthew guzdial", "mark riedl"], "accepted": false, "id": "1602.07721"}, "pdf": {"name": "1602.07721.pdf", "metadata": {"source": "CRF", "title": "Toward Game Level Generation from Gameplay Videos", "authors": ["Matthew Guzdial", "Mark O. Riedl"], "emails": ["riedl}@gatech.edu"], "sections": [{"heading": null, "text": "Keywords Procedural content generation, probabilistic models, machine learning"}, {"heading": "1. INTRODUCTION", "text": "In fact, it is the case that one is able to find a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution and that is able to find a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution that is able to find a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution."}, {"heading": "2. RELATED WORK", "text": "PCG systems absorb design knowledge, use that design knowledge to create assets or mechanics, and spend game content. Approaches include evolutionary search, rules-based systems, and instantiating content from probability tables [12]. Acquisition of knowledge about automated game design is a process to derive understanding of any facet of a computer game for the purposes of analysis or procedural generation. Dahlskog and Togelius [3]; and Snodgrass and Onta\u00f1\u00f3n [10] use both levels directly from the original Super Mario Bros. game. The former generate new levels through evolutionary compilation with the original levels as part of the evaluation criteria. The latter use hierarchical levels of Markov chains that represent both low and high patterns on the original levels. Both approaches have shown that good results can be achieved, but require that the source code for the original levels is available as part of the evaluation criteria. \"In addition, we avoid using both low and high patterns on the original levels."}, {"heading": "3. LEARNING DESIGN KNOWLEDGE", "text": "In this section, we present an approach to learning and modeling game-level design knowledge from gameplay video. Beyond asset patterns, gameplay video shows how these asset patterns affect player behavior. We highlight the potential of using gameplay video as a source of design knowledge by automatically extracting areas of Super Mario Bros. where the player spends an above-average amount of time. We learn a generative model of these high-level interaction areas that acts like a template and allows us to generate new level sections that would take the player longer to traverse. This evidence-based approach is significant in that it relies only on how the player's behavior changes observably, which may differ from the original game designer's intentions. Our specific technique for using gameplay video design knowledge consists of the following steps. First, we collect gameplay video location data from the interactive video layer that is likely to be in those areas."}, {"heading": "3.1 Level Section Categorization", "text": "This year, the time has come for an agreement to be reached, and it will only take a few days."}, {"heading": "3.2 Probabilistic Model Construction", "text": "This year is the highest in the history of the country."}, {"heading": "3.3 Generating Level Sections", "text": "In fact, most of them will be able to play by the rules that they play by the rules."}, {"heading": "4. EVALUATION", "text": "We undertook an initial evaluation of our system to measure the impact of the pE and pC variables on playability and a metric for \"Super Mario\" style. We used the same \"treetop\" cluster used in this paper. We decided to use this specific type of level sections because it poses a challenge to playability and style. If we use any level without the large amount of gaps used in the \"treetop\" level sections that demonstrate playability, this would be trivial given that our approach is to use entire sprite sections from the original (like an entire floor section). In addition, the \"treetop\" level sections of Super Mario Bros. show more stylistic variation than the typical level sections where objects such as pipes are placed on a level.We consider a level section playable if it meets three conditions: 1) there is a sprite on the left level section that Mario could jump to."}, {"heading": "5. FUTURE WORK", "text": "The clear next step in this process is full generation. We believe that our process can be expanded to learn the order of the level section categories it outputs, as described in Section 3.1. If we insert our self-created level sections into this order, we can assess whether our generated sections cause the same slowdown in players as they can see in the original gameplay videos. Beyond the level generation, we will try to learn game mechanics from gameplay videos by watching how sprites move or disappear in relation to each other. We have conducted an initial test in a simplified platform domain using colored blocks that produce promising results. We will build this process on a true, more complex game like Super Mario Bros. Learning game mechanics is an essential part of learning game design knowledge and represents a much more complex problem than creating the rule structure that we hope will result in a more general game structure and, as it ultimately includes many effects for platforms."}, {"heading": "6. CONCLUSIONS", "text": "Process algorithms for content generation require design knowledge that captures the intuition of human designers about good content. Human writing of design knowledge remains a major obstacle to content generation and, in general, video game design for the layman. We have introduced a novel approach to automated learning of computer game design knowledge from gameplay videos, with a particular focus on level design knowledge. An initial assessment of our approach points to the ability to produce level sections that are both playable and close to the original Super Mario Bros. without manually coding design criteria. Initial experiments suggest that our approach goes beyond the platformer game Super Mario Bros. and that additional design knowledge, such as avatar mechanics, can also be acquired from gameplay video."}, {"heading": "7. ACKNOWLEDGEMENTS", "text": "We thank the NSF for its support of this research within the scope of the NSF Prize 1350339."}, {"heading": "8. REFERENCES", "text": "[1] Arthur, D., and Vassilvitskii, S. 2007. k-means 61 + +: Theadvantage of careful seeding S. In Proceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms, 1027-1035. [2] Cook, M., Colton, S., Raad, A., and Gow, J. 2013. Mechanic miner: reflection-driven game mechanic discovery and level design. In EvoGAMES, 284-293. [3] Dahlskog, S., & Togelius, S., J. 2014. Procedural Content Generation Using Patterns as Objectives. In Applications of Evolutionary Computation 325-336. [4] Hartsook, K., Zook, A., and Riedl, S., and M. O. 2011."}], "references": [{"title": "k-means++: The advantages of careful seeding", "author": ["D. Arthur", "S. Vassilvitskii"], "venue": "In Proceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "Mechanic miner: reflection-driven game mechanic discovery and level design", "author": ["M. Cook", "S. Colton", "A. Raad", "J. Gow"], "venue": "EvoGAMES,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Procedural Content Generation Using Patterns as Objectives", "author": ["S. Dahlskog", "J. Togelius"], "venue": "In Applications of Evolutionary Computation", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Toward supporting stories with procedurally generated game worlds", "author": ["K. Hartsook", "A. Zook", "S. Das", "M.O. Riedl"], "venue": "In Computational Intelligence and Games (CIG),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Procedural Content Generation for Games: A Survey", "author": ["M. Hendrikx", "S. Meijer", "J. Van der Velden", "A. Iosup"], "venue": "ACM Transcripts on Multimedia Computing, Communications and Applications", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "A probabilistic model for component-based shape synthesis", "author": ["E. Kalogerakis", "S. Chaudhuri", "D. Koller", "V. Koltun"], "venue": "ACM Transactions on Graphics (TOG),", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "D. Hassabis"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "Selection of K in K-means clustering", "author": ["D.T. Pham", "S.S. Dimov", "C.D. Nguyen"], "venue": "Proceedings of the Institution of Mechanical Engineers, Part C: Journal of Mechanical Engineering Science,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2005}, {"title": "Real-time computer vision with OpenCV", "author": ["K. Pulli", "A. Baksheev", "K. Kornyakov", "V. Eruhimov"], "venue": "In Communications of the ACM,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Experiments in map generation using markov chains", "author": ["S. Snodgrass", "S. Onta\u00f1\u00f3n"], "venue": "In Proceedings of the 9th International Conference on Foundations of Digital Games", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "An experiment in automatic game design", "author": ["J. Togelius", "J. Schmidhuber"], "venue": "In Computational Intelligence and Games,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2008}, {"title": "Search-based procedural content generation: A taxonomy and survey", "author": ["J. Togelius", "G.N. Yannakakis", "K.O. Stanley", "C. Browne"], "venue": "Computational Intelligence and AI in Games, IEEE Transactions on,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2011}], "referenceMentions": [{"referenceID": 4, "context": "automatically create levels, maps, weapons, background scenery, and music for computer games [5, 12].", "startOffset": 93, "endOffset": 100}, {"referenceID": 11, "context": "automatically create levels, maps, weapons, background scenery, and music for computer games [5, 12].", "startOffset": 93, "endOffset": 100}, {"referenceID": 3, "context": "Often this design knowledge is provided in the form of hand-coded heuristics [4] or evaluation functions [12].", "startOffset": 77, "endOffset": 80}, {"referenceID": 11, "context": "Often this design knowledge is provided in the form of hand-coded heuristics [4] or evaluation functions [12].", "startOffset": 105, "endOffset": 109}, {"referenceID": 3, "context": "For example, a system can parse game level files to extract level design patterns [4, 10].", "startOffset": 82, "endOffset": 89}, {"referenceID": 9, "context": "For example, a system can parse game level files to extract level design patterns [4, 10].", "startOffset": 82, "endOffset": 89}, {"referenceID": 8, "context": "To process gameplay videos, we use OpenCV [9], a freely-available, open source computer vision toolkit, to process each frame of each video.", "startOffset": 42, "endOffset": 45}, {"referenceID": 5, "context": "Our technique extends the work of Kalogerakis et al [6], which was originally developed to procedurally generate variations of 3D graphical models.", "startOffset": 52, "endOffset": 55}, {"referenceID": 11, "context": "Approaches include evolutionary search, rule-based systems and instantiating content from probability tables [12].", "startOffset": 109, "endOffset": 113}, {"referenceID": 2, "context": "Dahlskog and Togelius [3]; and Snodgrass and Onta\u00f1\u00f3n [10] both make use of levels directly from the original Super Mario Bros.", "startOffset": 22, "endOffset": 25}, {"referenceID": 9, "context": "Dahlskog and Togelius [3]; and Snodgrass and Onta\u00f1\u00f3n [10] both make use of levels directly from the original Super Mario Bros.", "startOffset": 53, "endOffset": 57}, {"referenceID": 6, "context": "[7] used deep convolutional networks to learn how to the play Atari games from pixel input.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] describes work on learning probabilistic grammars from which hundreds of new 3D graphical models can be produced from a small training set.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "Using the OpenCV [9] machine vision toolkit, we scan each frame of each video, recording the sprites and their locations.", "startOffset": 17, "endOffset": 20}, {"referenceID": 5, "context": "[6], we search each frame for identical and adjacent sprites to build shapes of tiled sprites and then search for probabilistic relationships between these sprite shapes.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": ", [1, 8]).", "startOffset": 2, "endOffset": 8}, {"referenceID": 7, "context": ", [1, 8]).", "startOffset": 2, "endOffset": 8}], "year": 2015, "abstractText": "Algorithms that generate computer game content require game design knowledge. We present an approach to automatically learn game design knowledge for level design from gameplay videos. We further demonstrate how the acquired design knowledge can be used to generate sections of game levels. Our approach involves parsing video of people playing a game to detect the appearance of patterns of sprites and utilizing machine learning to build a probabilistic model of sprite placement. We show how rich game design information can be automatically parsed from gameplay videos and represented as a set of generative probabilistic models. We use Super Mario Bros. as a proof of concept. We evaluate our approach on a measure of playability and stylistic similarity to the original levels as represented in the gameplay videos.", "creator": "Word"}}}