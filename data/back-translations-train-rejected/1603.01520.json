{"id": "1603.01520", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Mar-2016", "title": "Optimized Polynomial Evaluation with Semantic Annotations", "abstract": "In this paper we discuss how semantic annotations can be used to introduce mathematical algorithmic information of the underlying imperative code to enable compilers to produce code transformations that will enable better performance. By using this approaches not only good performance is achieved, but also better programmability, maintainability and portability across different hardware architectures. To exemplify this we will use polynomial equations of different degrees.", "histories": [["v1", "Fri, 4 Mar 2016 16:13:24 GMT  (101kb,D)", "https://arxiv.org/abs/1603.01520v1", null], ["v2", "Thu, 10 Mar 2016 14:17:38 GMT  (102kb,D)", "http://arxiv.org/abs/1603.01520v2", null], ["v3", "Fri, 11 Mar 2016 11:31:59 GMT  (102kb,D)", "http://arxiv.org/abs/1603.01520v3", "Part of the Program Transformation for Programmability in Heterogeneous Architectures (PROHA) workshop, Barcelona, Spain, 12th March 2016, 7 pages, LaTeX, 4 PNG figures"]], "reviews": [], "SUBJECTS": "cs.PL cs.CL", "authors": ["daniel rubio bonilla", "colin w glass", "jan kuper"], "accepted": false, "id": "1603.01520"}, "pdf": {"name": "1603.01520.pdf", "metadata": {"source": "CRF", "title": "Optimized Polynomial Evaluation with Semantic Annotations", "authors": ["Daniel Rubio Bonilla", "Colin W. Glass", "Jan Kuper"], "emails": ["rubio@hlrs.de", "glass@hlrs.de", "j.kuper@utwente.nl"], "sections": [{"heading": null, "text": "Categories and topic descriptions B.1.4 [Microprogramming tools]: Languages and compilationsGeneral terms programming, polynomial, optimization, performance keywords Programming models, polynomial functions, code optimization"}, {"heading": "1. Introduction", "text": "The process of optimization is the process that tries to improve code by using less resources such as CPU cycles, memory or communication in distributed systems. Optimization comes from the root \"optimal\" (this comes from the Latin word optimus), which means that it cannot be better. However, it is very rare that this process can produce truly optimal code. In most cases, the optimized code can be optimal for a particular use in a particular hardware system. It can often reduce execution time by consuming more memory, but in systems where the memory space is scanned, it might be advantageous to program a slower algorithm that reduces memory consumption."}, {"heading": "2. Polynomial Representations", "text": "In fact, in fact, it is such that the greater part of them are able to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to fight, to move, to fight, to fight, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to move, to fight, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to fight, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to"}, {"heading": "3. Code Analysis", "text": "This year it has come to the point that it has never come as far as this year."}, {"heading": "3.1 LLVM Optimizations", "text": "According to tables 1 and 3, the LLVM compiler is able to reduce the number of operations on the original implementation of both the polynomial functions f0 (x) and g0 (x) and the modified versions f1 (x) and g1 (x). In this chapter, we analyze the code generated by LLVM and compare it with the code generated for f2 (x) and g2 (x)."}, {"heading": "3.1.1 Polynomial Function Degree 4", "text": "LLVM ASM for f0 (x) p o l y C a l c:... i m u l% edi,% r8d; i 1 movl% edi,% eax; i 2 i m u l% eax,% eax; i 3 i m u l% eax,% eax; i 4i m u l% r9d,% eax; i 5 a d l% ecx,% r8d; i 6 m u l l% edi,% r8d; i 7 a d l% edx,% r8d; i 8 m u l% edi,% r8d; i 9 l e a l (% rax,% r s i),% eax; i 1 0 a d l% r8d,% eax; i 1."}, {"heading": "3.1.2 Polynomial Function Degree 10", "text": "16, March 12, 2016, Barcelona, Spain 4 2016 / 3 / 14Listing 5. LLVM ASM for g0 (x) p o l y C a l c: i m u l% edi,% r8d movl% edi,% eax i m u l% eax,% eax movl% eax,% r11d i m l% r11d,% r9d movl% edi,% rsp),% r10d i l l l l l l l l,% rax i m l% eax% edi,% eax i l l l l l l l l l% eax,% eax,% eax,% eax,% eax,%% eax,% eax,% eax,% eax,% eax,% r11d l l l l l l, (% sp),% ebp,% rp sp."}, {"heading": "4. Benchmarks", "text": "This year it has come to the point that it has never come as far as this year."}, {"heading": "5. Semantic Annotations", "text": "In fact, most of us are able to survive on our own, and are able to survive on our own. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) Most of us have outlived ourselves. (...) I have not outlived myself. \"(...) I have outlived myself.\" (...) I have outlived myself. \"(...) I have outlived myself.\" (...) I have outlived myself. \""}, {"heading": "6. Conclusions and Future Work", "text": "In this paper, using polynomial equations, we have shown that mathematical expressions can have different but equivalent formulations and that we can write code that is similar to each of these formulations; the different versions of the code will run differently depending on the compiler used to generate the binary code and the hardware that will execute it; we have also discussed that it is possible to manually search for a good combination of specific and optimized code, for a particular algorithm and the hardware on which it is to be executed; but if the hardware is changed later, the performance of the code may be worse, that the original code can no longer be optimized due to specific hardware optimizations for the old platform that are now ruining performance; for example, it has been shown that the g1 (x) code looks better (and more complex) from a theoretical point of view than the original g0 (x) code, and behaves better if it is compiled with CC when compiled with mathematical compiling performance, but when the optimization options are proposed to decrease the use of it with GCC."}, {"heading": "Acknowledgments", "text": "This project was funded by the Seventh Framework Programme of the European Union in the framework of the POLCA project with grant number 610686."}], "references": [{"title": "Algebra, Chapter 8", "author": ["Nicolas Bourbaki"], "venue": "Springer-Verlag", "citeRegEx": "Bourbaki,? 1970", "shortCiteRegEx": "Bourbaki", "year": 1970}, {"title": "Algebra", "author": ["Saunders MacLane", "Garrett Birkhoff"], "venue": "AMS Chelsea. p. 85", "citeRegEx": "MacLane and Birkhoff,? 1967", "shortCiteRegEx": "MacLane and Birkhoff", "year": 1967}], "referenceMentions": [{"referenceID": 0, "context": "In summary, a ring is a set R equipped with binary operations + and \u00b7 satisfying the following three sets of axioms, called the ring axioms (Bourbaki 1970) (MacLane & Birkhoff 1967) (Lang 2002):", "startOffset": 140, "endOffset": 155}], "year": 2016, "abstractText": "In this paper we discuss how semantic annotations can be used to introduce mathematical algorithmic information of the underlying imperative code to enable compilers to produce code transformations that will enable better performance. By using this approaches not only good performance is achieved, but also better programmability, maintainability and portability across different hardware architectures. To exemplify this we will use polynomial equations of different degrees.", "creator": "LaTeX with hyperref package"}}}