{"id": "1603.03814", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Mar-2016", "title": "Solving MaxSAT by Successive Calls to a SAT Solver", "abstract": "The Maximum Satisfiability (MaxSAT) problem is the problem of finding a truth assignment that maximizes the number of satisfied clauses of a given Boolean formula in Conjunctive Normal Form (CNF). Many exact solvers for MaxSAT have been developed during recent years, and many of them were presented in the well-known SAT conference. Algorithms for MaxSAT generally fall into two categories: (1) branch and bound algorithms and (2) algorithms that use successive calls to a SAT solver (SAT- based), which this paper in on. In practical problems, SAT-based algorithms have been shown to be more efficient. This paper provides an experimental investigation to compare the performance of recent SAT-based and branch and bound algorithms on the benchmarks of the MaxSAT Evaluations.", "histories": [["v1", "Fri, 11 Mar 2016 22:54:28 GMT  (198kb,D)", "http://arxiv.org/abs/1603.03814v1", "Survey, 46 pages"]], "COMMENTS": "Survey, 46 pages", "reviews": [], "SUBJECTS": "cs.AI cs.CC cs.LO", "authors": ["mohamed el halaby"], "accepted": false, "id": "1603.03814"}, "pdf": {"name": "1603.03814.pdf", "metadata": {"source": "CRF", "title": "Solving MaxSAT by Successive Calls to a SAT Solver", "authors": ["Mohamed El Halaby"], "emails": ["halaby@sci.cu.edu.eg"], "sections": [{"heading": null, "text": "ar Xiv: 160 3.03 814v 1 [cs.A I] 1 1M ar2 01Table of Contents"}, {"heading": "1 Introduction and Preliminaries 4", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2 Linear Search Algorithms 5", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3 Binary Search-based Algorithms 7", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4 Core-guided Algorithms 12", "text": "4.1 Fu and Malik's algorithm...................................................................................................................................................."}, {"heading": "5 Core-guided Binary Search Algorithms 26", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "6 Portfolio MaxSAT Techniques 31", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "7 Translating Pseudo-Boolean Constraints into CNF 31", "text": "7.1 Introduction..........................................................................................................................................................................................."}, {"heading": "8 Experimental Investigation 35", "text": "The answer is: \"I have no idea.\" The answer is: \"I have no idea.\" - \"I have no idea.\" - \"I do not know.\" - \"I do not know.\" - \"I do not know.\" - \"I do not know.\" - \"I do not know.\" - \"I do not know.\" - \".\" - \"I do not know}, {"heading": "1 Introduction and Preliminaries", "text": "The question of how it could come to this, that it could come to such a situation, is in this paper a set of clauses [C1, C2, C3, C6, C6, C6, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C7, C"}, {"heading": "2 Linear Search Algorithms", "text": "An easy way to solve the WPMaxSAT is to add a new variable cost variable LB (called a blocking variable) bi to each soft clause Ci, then add a restriction (specified in CNF) stating that the sum of weights of the adulterated soft clauses must be less than a predetermined value. Next, the formula (without the weights) is sent along with the restriction to a SAT solver to verify whether it is satisfactory or not. If so, then the cost of the optimal solution is found and the algorithm is terminated. Otherwise, k is reduced and the process continues until the SAT solver returns True. The algorithm can start searching for the optimal cost of a lower bound LB (i.e. LB =)."}, {"heading": "3 Binary Search-based Algorithms", "text": "It is important to note that this is not the first time that this has happened in the past."}, {"heading": "4 Core-guided Algorithms", "text": "As in the previous method, UNSAT methods use SAT solvers iteratively to solve MaxSAT. Here, the purpose of iterative SAT calls is to identify and relax unsatisfactory formulas (unsatisfactory nuclei) in a MaxSAT instance, a method first proposed in 2006 by Fu and Malik in [18] (see Algorithm 6). The algorithms described in this section are: 1. Fu and Malik's algorithm [18] 2. WPM1 [4] 3. Improved WPM1 [5] 4. CNPM2 [7] 5. WMSU1-ROR [21] 6. WMSU3 [37] 7. WMSU4 [38] Definition 4.1. An unsatisfactory core of a CNF formula is a subset of this formula defined by itself.Definition 4.2 (minimum unsatisfactory core)."}, {"heading": "4.1 Fu and Malik\u2019s algorithm", "text": "Fu and Malik implemented two PMaxSAT solutions, ChaffBS (used binary search to find the optimal cost) and ChaffLS (used linear search to find the optimal cost) on a SAT solver named zChaff [44]. Their PMaxSAT solvers participated in the first and second MaxSAT evaluations [10]. Their method (algorithm 6 is the basis for many WPMaxSAT solvers that came later. Note that input to the algorithm 6 is a PMaxSAT instance, since all weights of the soft clauses are the same. Algorithm 6: Fu & Malik (algorithm 6) Fu and Malik's algorithm to solve the PMaxSAT.Input: \u03c6 = (C1, 1). (Cs, 1), (Cs + 1,), (Cs + 1,), (Cs + 1,), (Cs + 1,), (Cs + 1,), (CS + 1, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS), CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS, CS"}, {"heading": "4.2 WPM1", "text": "The resulting algorithm is called WPM1 and is described in algorithm 7: WPM1 (\u03c6). (Ss, w1) The WPM1 algorithm for WPMaxSAT. Input: The minimum cost of the WPMaxSAT solution is minimal, however, if the minimum cost of the WPMaxSAT solution 1 ({Hi | 1), if SAT ({Hi | 1), then the maximum cost of the WPMaxSAT solution 1, if SAT ({Hi | 1), then 2 (h), then 2 (0), while True do 5 (state, qualitative), qualitative), SAT ({Ci, wi), the optimal cost of the WPMaxSAT solution 1 (WPMaxSAT), if the optimal cost of the WPMaxSAT solution 1 ({Hi | 1)."}, {"heading": "If the SAT solver returns a different unsatisfiable core in the first iteration, a different execution sequence is going to take place.", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.3 Improved WPM1", "text": "The authors provided the following example to illustrate this problem: Consider the numbers as examples: (x1, 1), (x2, w), (x2, w), (x2, w), (x2, w), (x2, w). If the SAT solution always includes the first clause in the identified nucleus, the working formula becomes after the first iteration (x1, 1), (x2), (x1), (x2), (x1), (x2), (x2)."}, {"heading": "4.4 WPM2", "text": "In 2007, Marques-Silva and Planes, this is due to the fact that a portion of the participants can participate in a larger participation than is the case in other areas. [18] If m is the number of clauses in the input formula, they have proven that the algorithm O (m) blocks iterations and the number of relaxation variables used in the worst case is O (m2). Marques-Silva and Planes have also tried to improve the work of Fu and Malik in the real world. Instead, Marques-Silva and Planes have proposed several other codes, all of which are linear in the number of variables in the confrontation [57, 53, 19].Another disadvantage of Fu & Malik is that there may be several blocking variables in the given clause."}, {"heading": "4.5 WMSU1-ROR", "text": "The following definition extends the resolution rule from SAT to SAT."}, {"heading": "4.6 WMSU3", "text": "WMSU3 is a WPMaxSAT algorithm that adds a single blocking variable per soft clause, limiting the number of variables in the formula to the SAT solver in each iteration. (WMSU3) The WMSU3 algorithm for WPMaxSAT.Input: A WPMaxSAT instance. (WPMaxSAT input: The cost of the optimal WPMaxSAT solution is indeed blocked when SAT (C,)) is blocked. (WPMaxSAT.Input: A WPMaxSAT instance. (WPMaxSAT instance). (WPMaxSAT instance). (WPMaxSAT instance). (WPMaxSAT.Input: The cost of the optimal WPMaxSAT solution is indeed blocked when SAT (C,). (WPMaxSAT.Input: A). Max.Input: A. (WPMaxSAT.Input: A). (WPMax.Input: Max.WAT.Input: WAT.A). (Max.WAT.WAT.Input: Max.WAT. (WAT.W.W.W.). (Max.WAT.). (W.WAT.W.1). (WAT.WAT.Input: The cost of the optimal WP.1). (WAT.WAT.SAT solution is in fact blocked when SAT (C,)."}, {"heading": "4.7 WMSU4", "text": "The following example illustrates how the WMSU4 algorithms for the WMSU4 algorithms update the lower limit (line 17) and the lower limit (line 17), and the following example illustrates how the WMSU4 algorithms update the lower limit (line 17) and the lower limit (line 17)."}, {"heading": "5 Core-guided Binary Search Algorithms", "text": "Core-guided binary search algorithms are similar to binary search algorithms described in the first section, except that they do not extend all the soft clauses with blocking variables before the beginning of the main loop. Heras, Morgado and Marques-Silva proposed this technique in [22] (see Algorithm 16). Algorithm 16: CoreGuided-BS (\u03c6) Core-guided binary search algorithm for solving WPMaxSAT.Input: A WPMaxSAT instance \u03c6 = S prehH Output: The cost of the optimal WPMaxSAT solution to \u03c61 state \u2190 SAT ({Ci,)."}, {"heading": "6 Portfolio MaxSAT Techniques", "text": "The results of the MaxSAT evaluations indicate that there is no absolutely best algorithm for solving MaxSAT. This is because the most efficient solver often depends on the type of instance. In other words, different approaches work well on different instance families [40]. Having an oracle that is able to predict the most suitable MaxSAT solver for a given instance would lead to the most robust solver. SATzilla's success [59] for SAT is based on a regression function that was trained to predict the performance of each solver in the given group of solvers based on the properties of an instance. If this approach is extended to a new instance, the solver with the best predicted runtime is executed on the given instance. The resulting SAT portfolios stood out at the SAT competitions in 2007 and 2009 and pushed the state of the art in SAT solving."}, {"heading": "7 Translating Pseudo-Boolean Constraints into CNF", "text": "This section covers the translation of pseudo-Boolean (PB) constraints into CNF. The method is required in almost every SAT-based WPMaxSAT algorithm and its efficiency certainly affects the overall performance of the solver."}, {"heading": "7.1 Introduction", "text": "A PB constraint is a linear constraint on Boolean variables. PB constraints are widely used to express NP-hard problems. Although there are dedicated solvers (such as Sat4j) to solve PB constraints, there are good reasons to be interested in converting the constraints into SAT (CNF formulas), and a number of methods for doing so have been reported [53, 12, 36, 2, 55, 33, 1, 13]. Definition 7.1 (PB constraint). A PB constraint is an inequality (equality) on a linear combination of Boolean literals lin \u2211 i = 1 aili {<, \u2265, =, \u2264, >} Kwhere a1,... one and K (referred to as constraint) are constant integers and l1,... ln are literal. There are at least two clear advantages of solving PB constraints by encoding them in CNF."}, {"heading": "7.2 Encoding method", "text": "We present the method of Bailleux, Boufkhad and Roussel, a new variable that Li Li presents as satisfactory. < b > In their work, they consider (without loss of generality) PB constraints of the form \u2211 n = 1 aili \u2264 K, where a1 \u2264 a2 \u2264 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7. This type of constraint is denoted by the threefold < An, Ln, K >, where An = (a1,. \u2212 n) and Ln = (l1,., ln) are bound for some b, the threefold < Ai, Li, b >, for 1 \u2264 i \u2264 n, represents the PB constraint aili + \u00b7 l2 + \u00b7 aili b. When the tuples An and Ln are fixed, a threefold < Ai, Li, b >, which represents a PB constraint, is represented by the integrators i and the bound b. & lt."}, {"heading": "7.3 Complexity of the encoding", "text": "The complexity of the encoding is measured by the number of variables. The number of generated records depends by a constant factor on the number of variables. There are cases where the previous procedure creates a polynomial and others that generate an exponential number of variables."}, {"heading": "7.3.1 Polynomial cases", "text": "The encoding seems to generate an exponential number of variables: at each step, a non-terminal variable creates two variables, which in turn create two more variables, and so on. However, this does not apply to terminal variables and variables that have already been taken into account by the procedure. If a terminal variable is met, it is said to be an intersection in the procedure, and if a variable is already met in the set of variables, it should be merged in the procedure. By the intersections and merges, the size of the encodings can be polynomic in some cases. In this case, there are two limitations to the PB constraint that it must have a polynomial size encoding: 1. The integers of ai's are limited in n, P (n) by a polynomial. In this case, the potential number of di, b variables for some i variables is 2n \u2212 i, but due to the merges, this number is reduced to a polynomial."}, {"heading": "7.3.2 Exponential cases", "text": "There are possible sequences of ai's that result in a tree with branches of length \u0432 (n) and without possible merging of nodes (which implies a tree of size \u0432 (2n). The idea here is simply to combine a constant sequence with a geometric sequence. Let n be the length of the PB constraint Q and let ai = \u03b1 + bi so that \u03b1 = bn + 2. The key point is that the geometric term must be negligible compared to the constant term, that is, i = 0 bi < \u03b1. For simplicity we choose b = 2. Note that in this case ai = 2n + 2 + 2i, which is not limited by a polynomial in n. Fix K = \u03b1 \u00d7 n2 n + 1.A terminal node is reached when we get a term Di, k so that k \u2264 0 or k \u00b2 i j = 1 aj."}, {"heading": "7.4 Other encoding techniques", "text": "Incremental approaches [42, 39, 47] allow the constraint solver to retain knowledge from previous iterations that can be used in future iterations. The goal is to preserve the inner state of the constraint solver as well as learned clauses discovered during the solving process of previous iterations. At each iteration, most MaxSAT algorithms create a new instance of the constraint solver and reconstruct the formula by losing most, if not all, of the knowledge that could be derived from previous iterations."}, {"heading": "8 Experimental Investigation", "text": "We conducted an experimental study to compare the performance of different WPMaxSAT solvers with industry and bound solvers using a number of benchmark instances. Experimental evaluations of MaxSAT solvers gained great interest among SAT and MaxSAT researchers. This is due to the fact that solvers are becoming increasingly efficient and more adequate to handle WPMaxSAT instances from real-world applications. Therefore, conducting such an investigation and comparing the efficiency of different solvers is critical to knowing which solution techniques are suitable for which input category. In fact, an annual event called MaxSAT Evaluations is planned for exactly this purpose. The first MaxSAT evaluation was held in 2006. The goal of the MaxSAT evaluation is to compare the performance of modern (weighted) (partial) MaxSAT solvers on a number of benchmarks and the explanation of a winner for each benchmark category of SolOS, which we will use during the 2013 and 2014 solvers of the three."}, {"heading": "8.1 Solvers descriptions", "text": "The solutions are based on the technique of Fu and Malik [18] and on the algorithm of Manquinho, Marques-Silva and Planes [32], which is made available online by the GNU General Public License. The SAT solver is called MiniSAT [54]. Author: Mikola \"s\" Janota.2 \"QWMaxSAT is a weighted version of QMaxSAT developed by Koshimura, Zhang, Fujita and Hasegawa. This solver is a satisfactory solver based on version 2.0 of the SAT MiniSAT."}, {"heading": "8.2 Benchmarks descriptions", "text": "The benchmarks we use are the WPMaxSAT instances of the MaxSAT Evaluation 2013 and are divided into three categories: 1. Random: This category consists of WPMax-2-SAT and WPMax-3-SAT instances that are generated evenly at random. WPMax-2-SAT instances are divided into formulas with low (lo), medium (me) and high (hi) number of variables and clauses. WPMax-3-SAT instances contain three literals per clause and have a high number of variables and clauses. 2. Crafted: These instances are specifically designed to give the solver a hard time. There is an award for the smallest instance that cannot be solved by any solution. 3. Industry: Consists of instances that come from various applications of practical interest, such as model verification, planning, encryption, bioinformatics, etc., which are encoded in MaxSAT. This category is intended to provide a snapshot of the current strengths of each of the SAT engine."}, {"heading": "8.3 Results", "text": "In this section, we present and discuss the results we have achieved. For each category, we present the constituent instance sets and their size, the number of instances solved by each solver, and the time it took each solver to work on each instance set."}, {"heading": "8.3.1 Random category", "text": "The three sets of instances in the random category are: Name abbreviation # of the instances wpmax2sat-lo 30 wpmax2sat-me 30 wpmax2sat-hi 30 wpmax3sat-hi 3hi 30The industry-bound and bound solvers MaxSatz2013f, WMaxSatz-2009 and WMaxSatz + performed significantly better in the random category than the SAT-based solvers. In particular, MaxSatz2013f finished the four benchmarks under 16 minutes, while WMiFuMax, MSUnCore and Sat4j did timedout in most cases. MaxSatz2013f took first place in the random category in the MaxSAT 2013 evaluation, see http: / / www.maxsat.udl.cat / 13 / results / index.html # wpms-random-pc. The leading non-industry and bound solver is ISAC +, which came third in the random category in 2014 (see: http: / / www.wdlx.html / www.satx.html /.pc-results)."}, {"heading": "8.3.2 Crafted category", "text": "As the results show, ISAC + is the winner of the Crafted category. In fact, the winner of this category is ISAC + in the MaxSAT 2014 evaluation (see http: / / www.maxsat.udl.cat / 14 / results / index.html # wpms-crafted), and in the 2013 evaluation it came second (see http: / / www.maxsat.udl.cat / 13 / results / index.html # wpms-crafted-pc)."}, {"heading": "8.3.3 Industrial category", "text": "The seven example sentences in the Industry category are: Name abbreviation # of instances wcsp / spot5 / dir wcsp-dir 21 wcsp / spot5 / log wcsp-log 21 haplotyping pedigrees HT 100 upgradeability-problem UP 100 preference planning PP 29 packup-wpms PWPMS 99 timetabling TT 26It is clear that SAT-based solvers outperform industries and tied solvers on industrial instances, and the winner of this category in the MaxSAT 2013 rating is ISAC + (see http: / / www.maxsat.udl.cat / 13 / results / index.html # wpms-industrial) and the same solver that came in second place in the 2014 rating (see http: / / www.maxsat.udl.cat / 14 / results / index.html # wpms-industrial-PC). Generally, we can find that on industrial instances SAT-based solvers perform significantly better than on industry replacements, and poorly on industry-based SAT-solvers."}, {"heading": "9 Acknowledgments", "text": "This paper is made possible with the help and support of Dr. Hassan Aly (Faculty of Mathematics, University of Cairo, Egypt) and Dr. Rasha Shaheen (Faculty of Mathematics, University of Cairo, Egypt). I would also like to thank Dr. Carlos Anso'tegui (University of Lleida, Spain) for his advice to include a section on the translation of pseudo-Boolean restrictions and his encouraging review of this work."}], "references": [{"title": "Translating pseudo-boolean constraints into cnf", "author": ["Amir Aavani"], "venue": "Theory and Applications of Satisfiability Testing-SAT", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "New encoding for translating pseudo-boolean constraints into sat", "author": ["Amir Aavani", "David G Mitchell", "Eugenia Ternovska"], "venue": "In SARA,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Qmaxsat version", "author": ["Xuanye An", "Miyuki Koshimura", "Hiroshi Fujita", "Ryuzo Hasegawa"], "venue": "Proceedings of the International Workshop on First-Order Theorem Proving,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "Solving (weighted) partial maxsat through satisfiability testing", "author": ["Carlos Ans\u00f3tegui", "Ma\u0155\u0131a Bonet", "Jordi Levy"], "venue": "Theory and Applications of Satisfiability Testing-SAT", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2009}, {"title": "Improving satbased weighted maxsat solvers", "author": ["Carlos Ans\u00f3tegui", "Maria Luisa Bonet", "Joel Gab\u00e0s", "Jordi Levy"], "venue": "In Principles and Practice of Constraint Programming,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Improving wpm2 for (weighted) partial maxsat", "author": ["Carlos Ans\u00f3tegui", "Maria Luisa Bonet", "Joel Gab\u00e0s", "Jordi Levy"], "venue": "In Principles and Practice of Constraint Programming,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "A new algorithm for weighted partial maxsat", "author": ["Carlos Ans\u00f3tegui", "Maria Luisa Bonet", "Jordi Levy"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2010}, {"title": "Sat-based maxsat algorithms", "author": ["Carlos Ans\u00f3tegui", "Maria Luisa Bonet", "Jordi Levy"], "venue": "Artificial Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Maxsat by improved instance-specific algorithm configuration", "author": ["Carlos Ans\u00f3tegui", "Yuri Malitsky", "Meinolf Sellmann"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "The first and second max-sat evaluations", "author": ["Josep Argelich", "Chu Min Li", "Felip Manya", "Jordi Planes"], "venue": "JSAT, 4(2-4):251\u2013278,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2008}, {"title": "Curriculum-based course timetabling with sat and maxsat", "author": ["Roberto A\u015b\u0131n Ach\u00e1", "Robert Nieuwenhuis"], "venue": "Annals of Operations Research,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "Efficient cnf encoding of boolean cardinality constraints", "author": ["Olivier Bailleux", "Yacine Boufkhad"], "venue": "In Principles and Practice of Constraint Programming\u2013CP", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "A translation of pseudoboolean constraints to sat", "author": ["Olivier Bailleux", "Yacine Boufkhad", "Olivier Roussel"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2006}, {"title": "Postponing optimization to speed up maxsat solving", "author": ["Jessica Davies", "Fahiem Bacchus"], "venue": "In Principles and Practice of Constraint Programming,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2013}, {"title": "Minisat: A sat solver with conflict-clause", "author": ["Niklas Een", "Niklas S\u00f6rensson"], "venue": "minimization. Sat,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2005}, {"title": "Translating pseudo-boolean constraints into sat", "author": ["Niklas E\u00e9n", "Niklas S\u00f6rensson"], "venue": "JSAT, 2(1-4):1\u201326,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2006}, {"title": "On solving the partial max-sat problem", "author": ["Zhaohui Fu", "Sharad Malik"], "venue": "Theory and Applications of Satisfiability Testing-SAT", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2006}, {"title": "Arc consistency in sat", "author": ["Ian P Gent"], "venue": "In ECAI,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2002}, {"title": "A new encoding of alldifferent into sat", "author": ["Ian P Gent", "Peter Nightingale"], "venue": "In Proc. 3rd International Workshop on Modelling and Reformulating Constraint Satisfaction Problems,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2004}, {"title": "Read-once resolution for unsatisfiabilitybased max-sat algorithms", "author": ["Federico Heras", "Joao Marques-Silva"], "venue": "In Proceedings of the Twenty-Second international joint conference on Artificial Intelligence-Volume Volume One,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2011}, {"title": "Core-guided binary search algorithms for maximum satisfiability", "author": ["Federico Heras", "Antonio Morgado", "Joao Marques-Silva"], "venue": "In Proceedings of the AAAI National Conference (AAAI),", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2011}, {"title": "Intractability of read-once resolution", "author": ["Kazuo Iwama", "Eiji Miyano"], "venue": "In Structure in Complexity Theory Conference,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1995}, {"title": "Packup: Tools for package upgradability solving system description", "author": ["Mikol\u00e1\u0161 Janota", "In\u00eas Lynce", "Vasco Manquinho", "Joao Marques-Silva"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2012}, {"title": "Qmaxsat: A partial max-sat solver system description", "author": ["Miyuki Koshimura", "Tong Zhang", "Hiroshi Fujita", "Ryuzo Hasegawa"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2012}, {"title": "A logical approach to efficient max-sat solving", "author": ["Javier Larrosa", "Federico Heras", "Simon de Givry"], "venue": "Artificial Intelligence,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2008}, {"title": "The sat4j library, release 2.2 system description", "author": ["Daniel Le Berre", "Anne Parrain"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2010}, {"title": "Exploiting cycle structures in max-sat", "author": ["Chu Li", "Felip Many\u00e0", "Nouredine Mohamedou", "Jordi Planes"], "venue": "Theory and Applications of Satisfiability Testing-SAT", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2009}, {"title": "Heuristics based on unit propagation for satisfiability problems", "author": ["Chu Min Li", "Anbulagan Anbulagan"], "venue": "In Proceedings of the 15th international joint conference on Artifical intelligence-Volume", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1997}, {"title": "Resolutionbased lower bounds in maxsat", "author": ["Chu Min Li", "Felip Many\u00e0", "Nouredine Ould Mohamedou", "Jordi Planes"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2010}, {"title": "New inference rules for max-sat", "author": ["Chu Min Li", "Felip Many\u00e0", "Jordi Planes"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2007}, {"title": "Algorithms for weighted boolean optimization", "author": ["Vasco Manquinho", "Joao Marques-Silva", "Jordi Planes"], "venue": "Theory and Applications of Satisfiability Testing-SAT", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2009}, {"title": "A more compact translation of pseudo-boolean constraints into cnf such that generalized arc consistency is maintained", "author": ["Norbert Manthey", "Tobias Philipp", "Peter Steinke"], "venue": "In KI 2014: Advances in Artificial Intelligence,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2014}, {"title": "Timetabling based on sat encoding: a case study", "author": ["Filip Maric"], "venue": null, "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2008}, {"title": "The msuncore maxsat solver. SAT 2009 competitive events booklet: preliminary version, page", "author": ["Joao Marques-Silva"], "venue": null, "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2009}, {"title": "Towards robust cnf encodings of cardinality constraints. Principles and Practice of Constraint Programming\u2013CP", "author": ["Joao Marques-Silva", "In\u00eas Lynce"], "venue": null, "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2007}, {"title": "On using unsatisfiability for solving maximum satisfiability", "author": ["Joao Marques-Silva", "Jordi Planes"], "venue": "arXiv preprint arXiv:0712.1097,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2007}, {"title": "Algorithms for maximum satisfiability using unsatisfiable cores", "author": ["Joao Marques-Silva", "Jordi Planes"], "venue": "In Proceedings of the conference on Design, automation and test in Europe,", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2008}, {"title": "Incremental cardinality constraints for maxsat", "author": ["Ruben Martins", "Saurabh Joshi", "Vasco Manquinho", "In\u00eas Lynce"], "venue": "In Principles and Practice of Constraint Programming,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2014}, {"title": "A max-sat algorithm portfolio1", "author": ["Paulo Matos", "Jordi Planes", "Florian Letombe", "Joao Marques-Silva"], "venue": null, "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2008}, {"title": "A pso algorithm to solve a real course+ exam timetabling problem", "author": ["Elizabeth Montero", "Ma\u0155\u0131a-Cristina Riff", "Leopoldo Altamirano"], "venue": "In International Conference on Swarm Intelligence,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2001}, {"title": "Core-guided maxsat with soft cardinality constraints", "author": ["Antonio Morgado", "Carmine Dodaro", "Joao Marques-Silva"], "venue": "In Principles and Practice of Constraint Programming,", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2014}, {"title": "Iterative and core-guided maxsat solving: A survey and assessment", "author": ["Antonio Morgado", "Federico Heras", "Mark Liffiton", "Jordi Planes", "Joao Marques- Silva"], "venue": null, "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2013}, {"title": "Chaff: Engineering an efficient sat solver", "author": ["Matthew W Moskewicz", "Conor F Madigan", "Ying Zhao", "Lintao Zhang", "Sharad Malik"], "venue": "In Proceedings of the 38th annual Design Automation Conference,", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 2001}, {"title": "Application of satisfiability algorithms to timetable problems", "author": ["Fahima NADER", "Mouloud KOUDIL", "Karima BENATCHBA", "Lotfi ADMANE", "Said GHAROUT", "Nacer HAMANI"], "venue": "Rapport Interne LMCS, INI,", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2004}, {"title": "A comparative study of two boolean formulations of fpga detailed routing", "author": ["G-J Nam", "Fadi Aloul", "Karem A. Sakallah", "Rob A. Rutenbar"], "venue": "IEEE Transactions on,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 2004}, {"title": "Maximum satisfiability using core-guided maxsat resolution", "author": ["Nina Narodytska", "Fahiem Bacchus"], "venue": "In AAAI,", "citeRegEx": "47", "shortCiteRegEx": "47", "year": 2014}, {"title": "Variable dependency in local search: Prevention is better than cure", "author": ["Steven Prestwich"], "venue": "In Theory and Applications of Satisfiability Testing\u2013SAT", "citeRegEx": "48", "shortCiteRegEx": "48", "year": 2007}, {"title": "Protein structure alignment using maximum cliques and local search", "author": ["Wayne Pullan"], "venue": "In AI 2007: Advances in Artificial Intelligence,", "citeRegEx": "50", "shortCiteRegEx": "50", "year": 2007}, {"title": "Improved design debugging using maximum satisfiability", "author": ["Sean Safarpour", "Hratch Mangassarian", "Andreas Veneris", "Mark H Liffiton", "Karem Sakallah"], "venue": "In Formal Methods in Computer Aided Design, 2007", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 2007}, {"title": "A dynamic approach to mpe and weighted max-sat", "author": ["Tian Sang", "Paul Beame", "Henry Kautz"], "venue": "In Proceedings of the 20th international joint conference on Artifical intelligence,", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 2007}, {"title": "Towards an optimal cnf encoding of boolean cardinality constraints. Principles and Practice of Constraint Programming-CP", "author": ["Carsten Sinz"], "venue": null, "citeRegEx": "53", "shortCiteRegEx": "53", "year": 2005}, {"title": "Pbliba c++ toolkit for encoding pseudo\u2013boolean constraints into cnf", "author": ["Peter Steinke", "Norbert Manthey"], "venue": null, "citeRegEx": "55", "shortCiteRegEx": "55", "year": 2014}, {"title": "A \u201clogic-constrained\u201d knapsack formulation and a tabu algorithm for the daily photograph scheduling of an earth observation satellite", "author": ["Michel Vasquez", "Jin-Kao Hao"], "venue": "Computational Optimization and Applications,", "citeRegEx": "56", "shortCiteRegEx": "56", "year": 2001}, {"title": "A linear-time transformation of linear inequalities into conjunctive normal form", "author": ["Joost P Warners"], "venue": "Information Processing Letters,", "citeRegEx": "57", "shortCiteRegEx": "57", "year": 1998}, {"title": "sub-sat: A formulation for relaxed boolean satisfiability with applications in routing", "author": ["Hui Xu", "Rob A Rutenbar", "Karem Sakallah"], "venue": "Computer-Aided Design of Integrated Circuits and Systems, IEEE Transactions on,", "citeRegEx": "58", "shortCiteRegEx": "58", "year": 2003}, {"title": "Satzilla: portfoliobased algorithm selection for sat", "author": ["Lin Xu", "Frank Hutter", "Holger H Hoos", "Kevin Leyton-Brown"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "59", "shortCiteRegEx": "59", "year": 2008}], "referenceMentions": [{"referenceID": 48, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 93, "endOffset": 97}, {"referenceID": 52, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 187, "endOffset": 191}, {"referenceID": 10, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 212, "endOffset": 228}, {"referenceID": 43, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 212, "endOffset": 228}, {"referenceID": 39, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 212, "endOffset": 228}, {"referenceID": 32, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 212, "endOffset": 228}, {"referenceID": 22, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 256, "endOffset": 260}, {"referenceID": 54, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 270, "endOffset": 278}, {"referenceID": 44, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 270, "endOffset": 278}, {"referenceID": 49, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 290, "endOffset": 294}, {"referenceID": 47, "context": "Many theoretical and practical problems can be encoded into SAT and MaxSAT such as debugging [51], circuits design and scheduling of how an observation satellite captures photos of Earth [56], course timetabling [11, 45, 41, 34], software package upgrades [24], routing [58, 46], reasoning [52] and protein structure alignment in bioinformatics [50].", "startOffset": 345, "endOffset": 349}, {"referenceID": 41, "context": "Recent comprehensive surveys on SAT-based algorithms can be found in[43, 8].", "startOffset": 68, "endOffset": 75}, {"referenceID": 7, "context": "Recent comprehensive surveys on SAT-based algorithms can be found in[43, 8].", "startOffset": 68, "endOffset": 75}, {"referenceID": 2, "context": "[3] developed a PMaxSAT algorithm called QMaxSAT (version 0.", "startOffset": 0, "endOffset": 3}, {"referenceID": 16, "context": "This method was first proposed in 2006 by Fu and Malik in[18] (see algorithm 6).", "startOffset": 57, "endOffset": 61}, {"referenceID": 16, "context": "Fu and Malik\u2019s algorithm[18]", "startOffset": 24, "endOffset": 28}, {"referenceID": 3, "context": "WPM1[4]", "startOffset": 4, "endOffset": 7}, {"referenceID": 4, "context": "Improved WPM1[5]", "startOffset": 13, "endOffset": 16}, {"referenceID": 6, "context": "WPM2[7]", "startOffset": 4, "endOffset": 7}, {"referenceID": 19, "context": "WMSU1-ROR[21]", "startOffset": 9, "endOffset": 13}, {"referenceID": 35, "context": "WMSU3[37]", "startOffset": 5, "endOffset": 9}, {"referenceID": 36, "context": "WMSU4[38]", "startOffset": 5, "endOffset": 9}, {"referenceID": 13, "context": "A minimal unsatisfiable core is an unsatisfiable core such that any proper subset of it is not a core[15].", "startOffset": 101, "endOffset": 105}, {"referenceID": 42, "context": "Fu and Malik implemented two PMaxSAT solvers, ChaffBS (uses binary search to find the optimal cost) and ChaffLS (uses linear search to find the optimal cost) on top of a SAT solver called zChaff[44].", "startOffset": 194, "endOffset": 198}, {"referenceID": 9, "context": "Their PMaxSAT solvers participated in the first and second MaxSAT Evaluations[10].", "startOffset": 77, "endOffset": 81}, {"referenceID": 3, "context": "Ans\u00f3tegui, Bonet and Levy[4] extended Fu& Malik to WPMaxSAT.", "startOffset": 25, "endOffset": 28}, {"referenceID": 4, "context": "In 2012, Ans\u00f3tegui, Bonet and Levy presented a modification to WPM1 (algorithm 7)[5].", "startOffset": 81, "endOffset": 84}, {"referenceID": 35, "context": "In 2007, Marques-Silva and Planes[37] discussed important properties of Fu&Malik that were not mentioned in[18].", "startOffset": 33, "endOffset": 37}, {"referenceID": 16, "context": "In 2007, Marques-Silva and Planes[37] discussed important properties of Fu&Malik that were not mentioned in[18].", "startOffset": 107, "endOffset": 111}, {"referenceID": 17, "context": "Fu&Malik use the pairwise encoding[19] for the constraints on the relaxation variables, which use a quadratic number of clauses.", "startOffset": 34, "endOffset": 38}, {"referenceID": 53, "context": "Instead, Marques-Silva and Planes suggested several other encodings all of which are linear in the number of variables in the constraint[57, 53, 17, 19].", "startOffset": 136, "endOffset": 152}, {"referenceID": 50, "context": "Instead, Marques-Silva and Planes suggested several other encodings all of which are linear in the number of variables in the constraint[57, 53, 17, 19].", "startOffset": 136, "endOffset": 152}, {"referenceID": 15, "context": "Instead, Marques-Silva and Planes suggested several other encodings all of which are linear in the number of variables in the constraint[57, 53, 17, 19].", "startOffset": 136, "endOffset": 152}, {"referenceID": 17, "context": "Instead, Marques-Silva and Planes suggested several other encodings all of which are linear in the number of variables in the constraint[57, 53, 17, 19].", "startOffset": 136, "endOffset": 152}, {"referenceID": 6, "context": "Ans\u00f3tegui, Bonet and Levy also developed an algorithm for WPMaxSAT in 2010, called WPM2[7], where every soft clause Ci is extended with a unique fresh blocking variable bi.", "startOffset": 87, "endOffset": 90}, {"referenceID": 5, "context": "In[6], Ans\u00f3tegui et at.", "startOffset": 2, "endOffset": 5}, {"referenceID": 4, "context": "First, they applied the stratification technique[5].", "startOffset": 48, "endOffset": 51}, {"referenceID": 19, "context": "WMSU1-ROR[21] is a modification of WPM1.", "startOffset": 9, "endOffset": 13}, {"referenceID": 24, "context": "The MaxSAT resolution rule used in WMSU1-ROR is called Max-RES and is described in[26].", "startOffset": 82, "endOffset": 86}, {"referenceID": 24, "context": "De Morgan\u2019s laws can not be applied on MaxSAT instance for not preserving the equivalence among instances[26].", "startOffset": 105, "endOffset": 109}, {"referenceID": 3, "context": "WMSU1-ROR handles WPMaxSAT formulae the same way as[4].", "startOffset": 51, "endOffset": 54}, {"referenceID": 21, "context": "Unfortunately, ROR can not generate resolution proofs for some unsatisfiable clauses[23].", "startOffset": 84, "endOffset": 88}, {"referenceID": 6, "context": "The function UpdateBound in line 14 updates the lower bound LB, either by simply incrementing it or by the subset sum problem as in[7].", "startOffset": 131, "endOffset": 134}, {"referenceID": 36, "context": "Like WMSU3, WMSU4[38] (algorithm 15) adds at most one blocking variable to each soft clause.", "startOffset": 17, "endOffset": 21}, {"referenceID": 20, "context": "Heras, Morgado and Marques-Silva proposed this technique in[22] (see algorithm 16).", "startOffset": 59, "endOffset": 63}, {"referenceID": 20, "context": "The core-guided binary search approach was improved by Heras[22] et al.", "startOffset": 60, "endOffset": 64}, {"referenceID": 38, "context": "In other words, different solution approaches work well on different families of instances[40].", "startOffset": 90, "endOffset": 94}, {"referenceID": 55, "context": "The success of SATzilla[59] for SAT was due to a regression function which was trained to predict the performance of every solver in the given set of solvers based on the features of an instance.", "startOffset": 23, "endOffset": 27}, {"referenceID": 8, "context": "ISAC[9] (Instance-Specific Algorithm Configuration) is one of the most successful WPMaxSAT portfolio algorithms.", "startOffset": 4, "endOffset": 7}, {"referenceID": 50, "context": "While there are dedicated solvers (such as Sat4j) for solving PB constraints, there are good reasons to be interested in transforming the constraints into SAT (CNF formulae), and a number of methods for doing this have been reported[53, 12, 36, 2, 55, 33, 1, 13].", "startOffset": 232, "endOffset": 262}, {"referenceID": 11, "context": "While there are dedicated solvers (such as Sat4j) for solving PB constraints, there are good reasons to be interested in transforming the constraints into SAT (CNF formulae), and a number of methods for doing this have been reported[53, 12, 36, 2, 55, 33, 1, 13].", "startOffset": 232, "endOffset": 262}, {"referenceID": 34, "context": "While there are dedicated solvers (such as Sat4j) for solving PB constraints, there are good reasons to be interested in transforming the constraints into SAT (CNF formulae), and a number of methods for doing this have been reported[53, 12, 36, 2, 55, 33, 1, 13].", "startOffset": 232, "endOffset": 262}, {"referenceID": 1, "context": "While there are dedicated solvers (such as Sat4j) for solving PB constraints, there are good reasons to be interested in transforming the constraints into SAT (CNF formulae), and a number of methods for doing this have been reported[53, 12, 36, 2, 55, 33, 1, 13].", "startOffset": 232, "endOffset": 262}, {"referenceID": 51, "context": "While there are dedicated solvers (such as Sat4j) for solving PB constraints, there are good reasons to be interested in transforming the constraints into SAT (CNF formulae), and a number of methods for doing this have been reported[53, 12, 36, 2, 55, 33, 1, 13].", "startOffset": 232, "endOffset": 262}, {"referenceID": 31, "context": "While there are dedicated solvers (such as Sat4j) for solving PB constraints, there are good reasons to be interested in transforming the constraints into SAT (CNF formulae), and a number of methods for doing this have been reported[53, 12, 36, 2, 55, 33, 1, 13].", "startOffset": 232, "endOffset": 262}, {"referenceID": 0, "context": "While there are dedicated solvers (such as Sat4j) for solving PB constraints, there are good reasons to be interested in transforming the constraints into SAT (CNF formulae), and a number of methods for doing this have been reported[53, 12, 36, 2, 55, 33, 1, 13].", "startOffset": 232, "endOffset": 262}, {"referenceID": 12, "context": "While there are dedicated solvers (such as Sat4j) for solving PB constraints, there are good reasons to be interested in transforming the constraints into SAT (CNF formulae), and a number of methods for doing this have been reported[53, 12, 36, 2, 55, 33, 1, 13].", "startOffset": 232, "endOffset": 262}, {"referenceID": 12, "context": "We present the method of Bailleux, Boufkhad and Roussel[13].", "startOffset": 55, "endOffset": 59}, {"referenceID": 12, "context": "The correctness and the complexity of the encoding are discussed in the same paper[13].", "startOffset": 82, "endOffset": 86}, {"referenceID": 40, "context": "Incremental approaches[42, 39, 47] allow the constraint solver to retain knowledge from previous iterations that may be used in the upcoming iterations.", "startOffset": 22, "endOffset": 34}, {"referenceID": 37, "context": "Incremental approaches[42, 39, 47] allow the constraint solver to retain knowledge from previous iterations that may be used in the upcoming iterations.", "startOffset": 22, "endOffset": 34}, {"referenceID": 45, "context": "Incremental approaches[42, 39, 47] allow the constraint solver to retain knowledge from previous iterations that may be used in the upcoming iterations.", "startOffset": 22, "endOffset": 34}, {"referenceID": 16, "context": "WMiFuMax is an unsatisfiability-based WPMaxSAT solver based on the technique of Fu and Malik[18] and on the algorithm by Manquinho, Marques-Silva, and Planes[32], which is works by identifying unsatisfiable sub-formulae.", "startOffset": 92, "endOffset": 96}, {"referenceID": 30, "context": "WMiFuMax is an unsatisfiability-based WPMaxSAT solver based on the technique of Fu and Malik[18] and on the algorithm by Manquinho, Marques-Silva, and Planes[32], which is works by identifying unsatisfiable sub-formulae.", "startOffset": 157, "endOffset": 161}, {"referenceID": 23, "context": "QWMaxSAT is a weighted version of QMaxSAT developed by Koshimura, Zhang, Fujita and Hasegawa[25] and is available freely online.", "startOffset": 92, "endOffset": 96}, {"referenceID": 14, "context": "0 of the SAT solver MiniSAT[16].", "startOffset": 27, "endOffset": 31}, {"referenceID": 25, "context": "Sat4j[27] is a satisfiability-based WPMaxSAT solver developed by Le Berre and Parrain.", "startOffset": 5, "endOffset": 9}, {"referenceID": 33, "context": "MSUnCore[35] is an unsatisfiability-based WPMaxSAT solver built on top the SAT solver PicoSAT[14].", "startOffset": 8, "endOffset": 12}, {"referenceID": 46, "context": "Cardinality constraints are encoded using several encodings, such as the pairwise and bitwise encodings[49, 48], the ladder encoding[20], sequential counters[53], sorting networks[17], and binary decision diagrams (BDDs)[17].", "startOffset": 103, "endOffset": 111}, {"referenceID": 18, "context": "Cardinality constraints are encoded using several encodings, such as the pairwise and bitwise encodings[49, 48], the ladder encoding[20], sequential counters[53], sorting networks[17], and binary decision diagrams (BDDs)[17].", "startOffset": 132, "endOffset": 136}, {"referenceID": 50, "context": "Cardinality constraints are encoded using several encodings, such as the pairwise and bitwise encodings[49, 48], the ladder encoding[20], sequential counters[53], sorting networks[17], and binary decision diagrams (BDDs)[17].", "startOffset": 157, "endOffset": 161}, {"referenceID": 15, "context": "Cardinality constraints are encoded using several encodings, such as the pairwise and bitwise encodings[49, 48], the ladder encoding[20], sequential counters[53], sorting networks[17], and binary decision diagrams (BDDs)[17].", "startOffset": 179, "endOffset": 183}, {"referenceID": 15, "context": "Cardinality constraints are encoded using several encodings, such as the pairwise and bitwise encodings[49, 48], the ladder encoding[20], sequential counters[53], sorting networks[17], and binary decision diagrams (BDDs)[17].", "startOffset": 220, "endOffset": 224}, {"referenceID": 26, "context": "It is based on an earlier solver called Maxsatz[28], which incorporates the technique developed for the famous SAT solver, Satz[29].", "startOffset": 47, "endOffset": 51}, {"referenceID": 27, "context": "It is based on an earlier solver called Maxsatz[28], which incorporates the technique developed for the famous SAT solver, Satz[29].", "startOffset": 127, "endOffset": 131}, {"referenceID": 29, "context": "WMaxSatz-2009 and WMaxSatz+[31, 30] are branch and bound solvers that use transformation rules[28] which can be implemented efficiently as a by-product of unit propagation or failed literal detection.", "startOffset": 27, "endOffset": 35}, {"referenceID": 28, "context": "WMaxSatz-2009 and WMaxSatz+[31, 30] are branch and bound solvers that use transformation rules[28] which can be implemented efficiently as a by-product of unit propagation or failed literal detection.", "startOffset": 27, "endOffset": 35}, {"referenceID": 26, "context": "WMaxSatz-2009 and WMaxSatz+[31, 30] are branch and bound solvers that use transformation rules[28] which can be implemented efficiently as a by-product of unit propagation or failed literal detection.", "startOffset": 94, "endOffset": 98}, {"referenceID": 8, "context": "ISAC+[9] (Instance-Specific Algorithm Configuration) is a portfolio of algorithm which, given a WPMaxSAT instance, selects the solver better suited for that instance.", "startOffset": 5, "endOffset": 8}], "year": 2016, "abstractText": "The Maximum Satisfiability (MaxSAT) problem is the problem of finding a truth assignment that maximizes the number of satisfied clauses of a given Boolean formula in Conjunctive Normal Form (CNF). Many exact solvers for MaxSAT have been developed during recent years, and many of them were presented in the well-known SAT conference. Algorithms for MaxSAT generally fall into two categories: (1) branch and bound algorithms and (2) algorithms that use successive calls to a SAT solver (SATbased), which this paper in on. In practical problems, SAT-based algorithms have been shown to be more efficient. This paper provides an experimental investigation to compare the performance of recent SAT-based and branch and bound algorithms on the benchmarks of the MaxSAT Evaluations. 1 ar X iv :1 60 3. 03 81 4v 1 [ cs .A I] 1 1 M ar 2 01 6", "creator": "LaTeX with hyperref package"}}}