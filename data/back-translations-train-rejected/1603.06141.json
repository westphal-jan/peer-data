{"id": "1603.06141", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Mar-2016", "title": "Evolving Shepherding Behavior with Genetic Programming Algorithms", "abstract": "We apply genetic programming techniques to the `shepherding' problem, in which a group of one type of animal (sheep dogs) attempts to control the movements of a second group of animals (sheep) obeying flocking behavior. Our genetic programming algorithm evolves an expression tree that governs the movements of each dog. The operands of the tree are hand-selected features of the simulation environment that may allow the dogs to herd the sheep effectively. The algorithm uses tournament-style selection, crossover reproduction, and a point mutation. We find that the evolved solutions generalize well and outperform a (naive) human-designed algorithm.", "histories": [["v1", "Sat, 19 Mar 2016 20:36:44 GMT  (321kb,D)", "http://arxiv.org/abs/1603.06141v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.NE", "authors": ["joshua brul\\'e", "kevin engel", "nick fung", "isaac julien"], "accepted": false, "id": "1603.06141"}, "pdf": {"name": "1603.06141.pdf", "metadata": {"source": "CRF", "title": "Evolving Shepherding Behavior with Genetic Programming Algorithms", "authors": ["Joshua Brul\u00e9", "Kevin Engel"], "emails": ["jtcbrule@gmail.com", "kevin.t.engel@gmail.com", "nfung13@gmail.com", "ijulien6@gmail.com"], "sections": [{"heading": "1 Introduction", "text": "While grazing is a popular topic, pastoral algorithms are less well researched. Existing pastoral approaches typically train a predictive model as in [1] or use predefined strategies that can be combined to achieve a goal [2]. Typically, the goal of pastoral work is to drive the herd to a place we will call \"Pen.\" In our approach, the pastoral system has no predefined strategies or predictive modeling. Using common genetic programming techniques, we develop the expressive Xiv: 160 3.06 14tree for a pure (stateless) function that functions as a \"force update\" for each simulated sheepdog at each step of the flock. Parameters of this function may include a combination of the position of the dog's dog, the position of the other dogs (in cooperative herding), the position of the nearest \"free\" (unattached \"point\") of the sheep, the dog's steering position in the two, and the position of the sheep in the two of the sheep."}, {"heading": "2 Related Work", "text": "(Lien et. al, 2005) examines shepherd behavior in an environment where several shepherds work together to control a flock [4]. The shepherds who exert a repulsive force on the flock must find steering points to influence the direction of the flock at will. (Sumpter et. al, 1998) presents a machine vision system that models the position and speed of a flock [1]. A point distribution mode is used to generate a steering point based on one of several proposed heuristics. (Sumpter et. al, 1998) These features are then used to estimate a probability distribution of the movement of the flock over time, depending on its previous locations and speeds. This probability distribution is based on the input of a camera mounted on a \"robotic dog shepherd,\" and these features are then used to estimate a probability distribution of the movement of the flock over time (Liet.)"}, {"heading": "3 Simulation", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1 Environment", "text": "The simulation environment takes place within a closed, square area called a field. Field boundaries can be thought of as fences that act as barriers for both sheep and dogs. If an agent tries to break through a fence, the penetrating coordinate is reset to the fence coordinate and the corresponding speed is set to zero. The goal of the shepherds is to get the sheep into the barn in the upper left corner of the field. Only the lower side of the barn is open to the field, with the fence on the right side of the barn to increase the difficulty of the task and prevent sheep from drifting arbitrarily."}, {"heading": "3.2 Agents", "text": "The simulation agents consist of sheep and dogs. The sheep all follow the same fixed rules and update their position based on a series of force vectors: Grouping force of sheep: Sheep that are near a dog are attracted / repelled in the order: Fa \u2212 Fr (d2s | ~ xs1 \u2212 ~ xs2 | 2 \u2212 1). (1) Immunity: sheep that are near a fence are repelled in the order: Ff \u2212 d2d | ~ xs \u2212 ~ xd | 2 \u2212 1). (2) Immunity: sheep that are near a fence are repelled in the order: Ff df \u2212 d \u00b2 df, (3) where d \u00b2 is the vertical distance between the sheep and the fence. (2) Immunity: Sheep that are near a fence are repelled in the order: Ff df \u2212 d \u00b2 df, (3) where d \u00b2 is the vertical distance between the sheep and the fence."}, {"heading": "3.3 Initial conditions and simulation parameters", "text": "In order to promote the development of general solutions to the pathogen problem, random initial conditions for the pathogens were applied: dogs spawn randomly in the stable without guidance by the dogs and sheep spawn randomly in the right half of the field with random initial velocities. The right half of the field was selected to minimize the possibility of sheep migrating into the stable without guidance by the dogs. Each simulation was performed in 500 time steps with \u03b4t = 1, with the number of trapped sheep returned at the end. Field and stable were selected as squares in the sizes 100 x 100 and 25 x 25, respectively. (4) For the majority of the results discussed in this paper, the following parameters were used: Fa = 1, Fr =.05, Fd = 5, Ff = 1, ds = 20, dd = 30, df = 5, vs = 1, vd = 3. (4) The last two parameters are maximum permissible velocities - when a force is exceeded the limit, it is increased or reproduced for dogs."}, {"heading": "4 Genetic Program", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.1 Expression Trees", "text": "A \"canine AI\" is a pair of pure (memorless) functions that act on a set of parameters inherited from the simulation. We experimented with several different sets of parameters, which are stored as s expressions (i.e. trees) whose leaves are either one of the parameters of the function or a random number (drawn from a normal distribution). Since updating the dog's position requires two values (Fx and Fy), the root node of the tree is always a \"pair,\" with two subtrees representing the logic for the x or y forces, respectively. Instead, the internal nodes of a \"canine AI\" expression tree are one of the following operators: \u2212 (unary), \u2212 (binary), +, \u0445, div (where div is protected by a protected division; attempting to divide by zero results in 1).In addition to these basic mathematical operations, we have qif (a, b, c, query, which \"otherwise includes a\" aterial \"function."}, {"heading": "4.2 Genetic Operators and Initialization", "text": "The design of the genetic programming system largely followed the standard practice described in [5]. We used generation GP with a fixed population size P initialized by the raised half-and-half method; half of the initial population had grown up to a certain \"ramp depth\" Dramp (set to 5 in our evaluations), and half of the initial population randomly grew from the root, with each node being either a leaf (terminal) node or an inner (functional) node with equal probability. Trees were limited to Dmax, which was set to 10 for all runs due to JVM limitations. Parent selection was done by binary tournament selection. Offspring were generated either by point mutation (with probability pm) or crossover. Point mutation occurred by replacing a (uniformly) randomly selected subtree of the parent with a new, randomly grown tree, with the next generation being replaced by a new, randomly grown tree."}, {"heading": "4.3 Fitness", "text": "The main drawback of this fitness measurement was the difficulty of achieving a fitness level greater than zero for an initial random population. Another fitness measurement considered was the average distance of each sheep from the enclosure. However, this fitness measurement was often misleading, as sheep on the opposite side of the enclosure fence showed a very high level of fitness, although additional complex influences were required to force them around the fence into the enclosure. Average distance fitness was ultimately discarded in favor of the original fitness function. An additional problem for both fitness functions was the large discrepancy in the results of a simulation run due to the random initial conditions. In some simple test cases, the genetic algorithm was unable to make significant progress due to the misleading fluctuations in fitness. These problems were partially mitigated by redefining fitness as average fitness over 10 simulations."}, {"heading": "5 Experimentation", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5.1 One Dog", "text": "The first experiment took place under the conditions of a single dog trying to herd 20 sheep into the barn. \"Dog AI\" was granted access to a limited set of only 4 parameters: their position (X and Y coordinates) and those of the next free-roaming sheep. This simplified scenario was considered an early goal because it limits the complexity of the problem and provides good conditions for developed behavior. The experiment took place with a population size of 250 over 220 generations, with the mutation rate pm being kept at 0.05."}, {"heading": "5.2 Multiple Dogs", "text": "After having achieved reasonable success in the single-dog scenario, we extended the simulation to several dogs to determine whether the dogs could develop team-like behavior or whether the genetic algorithm would simply rediscover its successful single-dog algorithm. Simulations were conducted for 3 dogs trying to herd the same 20 sheep. To foster teamwork, the \"dog AI\" was given an extended set of parameters: dog position, other dog positions, nearest free sheep, average sheep position, and a steering point. The steering point was defined as having a constant distance (10) behind the nearest free-sheep position, in line with this and the enclosure. Note that many of these parameters will be unique for each dog, allowing for divergent behavior. The other simulation parameters were largely transferred from the single-dog scenario. In this case, a population size of 250 was used and the algorithms were developed for 100 generations."}, {"heading": "6 Results", "text": "The basic prerequisite for receiving refugees into the EU is that they will be able to establish themselves in the EU."}, {"heading": "6.1 Adaptability to Other Environmental Conditions", "text": "To this end, the genetic algorithms were measured using tasks modified from the training task. A small sample is shown in Figure 4, including runs with fewer sheep (5), more sheep (100), faster sheep (vs = 3) and weaker accumulation forces (ds = 5) and other starting conditions (sheep spawn in the lower half of the field). Comparing the human-written single-dog algorithm with our developed three-dog algorithm, we find that both remain reasonably effective despite changes in the environment. In these simple tests, the developed algorithm appears as adaptable and general as the human-written one."}, {"heading": "7 Discussion", "text": "The experimental results show the potential of complex behaviors through genetic programming. Although the operators and parameters provided to the genetic algorithms were quite limited, the successful skills developed within 50 generations. \"Split-dog\" serves as an interesting demonstration of both the ability of genetic programming to find new solutions and its tendency to produce drastically exaggerated solutions. However, given sufficient generations, the random starting positions of the sheep seemed to successfully force the genetic program to develop generally good solutions; the solutions developed still work very well, even under environmental conditions for which the genetic program was not trained. Unfortunately, the genetic programs developed are generally very difficult, if not impossible, for humans to comprehend. There is much room for further study based on the framework presented. An interesting adaptation would be to increase the complexity of the problem by shifting the stable out of the corner or limiting the vision of the dogs. Furthermore, one could allow the sheep to evolve and adapt to the dog population."}, {"heading": "8 Implementation", "text": "The entire genetic programming system and simulation environment for this project were implemented in Clojure (a dialect of Lisp) using only the standard library functions available in the language, and the simulation visualizations were implemented in Java.The full code repository (with links to simulation videos) is available online: https: / / github.com / jtcb / flock"}], "references": [{"title": "Boylel. Learning Models of Animal Behaviour for a Robotic Sheepdog", "author": ["N. Sumpter", "A.J. Rulpitt", "R. Vaughan", "R.D. Tillett", "R.D"], "venue": "IAPR Wotkrhop on Machine Vision Applications. Nov 17-t9", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1998}, {"title": "A Comparative Investigation of Herding Algorithms", "author": ["Brandon Bennett", "Matthew Trafankowski"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2012}, {"title": "Gmeinwieser. AI for Herding Sheep", "author": ["Peter Cowling", "Christian"], "venue": "Proceedings of the Sixth AAAI Conference on Artificial Intelligence and Interactive Digital Entertainment", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Shepherding Behaviors with Multiple Shepherds", "author": ["Jyh-Ming Lien", "Samuel Rodriguez", "Jean- Phillipe Malric", "Nancy M. Amato"], "venue": "Proceedings of the 2005 IEEE International Conference on Robotics and Automation", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2005}, {"title": "Introduction to Evolutionary Computing", "author": ["A.E. Eiben", "J.E. Smith"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}], "referenceMentions": [{"referenceID": 0, "context": "ing approaches to shepherding typically train a predictive model as in [1], or employ predefined strategies which may be combined to achieve a goal [2].", "startOffset": 71, "endOffset": 74}, {"referenceID": 1, "context": "ing approaches to shepherding typically train a predictive model as in [1], or employ predefined strategies which may be combined to achieve a goal [2].", "startOffset": 148, "endOffset": 151}, {"referenceID": 3, "context": "The parameters of this function can include some combination of the dog\u2019s position, the position of the other dogs (in cooperative herding), the position of the nearest \u2018free\u2019 (uncaptured) sheep, the center of mass of the flock, and a \u2018steering point,\u2019 a position such that the line between the steering point and entrance to the pen crosses some sheep [4].", "startOffset": 353, "endOffset": 356}, {"referenceID": 3, "context": "al, 2005) studies shepherding behavior in an environment with multiple shepherds cooperating to control a flock [4].", "startOffset": 112, "endOffset": 115}, {"referenceID": 0, "context": "al, 1998) presents a machine vision system that models the position and velocity of a flock of animals [1].", "startOffset": 103, "endOffset": 106}, {"referenceID": 1, "context": "(Bennet and Trafankowski, 2012) provides an analysis of flocking and herding algorithms, and also introduces a herding algorithm based on specific strategies inspired by real sheepdogs[2].", "startOffset": 184, "endOffset": 187}, {"referenceID": 1, "context": "[2] also considers using one of several flocking strategies for the animals being herded, and finds that the success of different a herding algorithm is often dependent on the flocking behavior.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "A finite state machine associated with each sheepdog represents possible herding strategies, such as circling, and the state of the FSM is controlled at the top level by an AI \u201dshepherd\u201d [3].", "startOffset": 187, "endOffset": 190}, {"referenceID": 4, "context": "scribed in [5].", "startOffset": 11, "endOffset": 14}], "year": 2016, "abstractText": "We apply genetic programming techniques to the \u2018shepherding\u2019 problem, in which a group of one type of animal (sheep dogs) attempts to control the movements of a second group of animals (sheep) obeying flocking behavior. Our genetic programming algorithm evolves an expression tree that governs the movements of each dog. The operands of the tree are hand-selected features of the simulation environment that may allow the dogs to herd the sheep effectively. The algorithm uses tournament-style selection, crossover reproduction, and a point mutation. We find that the evolved solutions generalize well and outperform a (naive) human-designed algorithm.", "creator": "TeX"}}}