{"id": "1603.09051", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Mar-2016", "title": "Phoenix: A Self-Optimizing Chess Engine", "abstract": "Since the advent of computers, many tasks which required humans to spend a lot of time and energy have been trivialized by the computers' ability to perform repetitive tasks extremely quickly. However there are still many areas in which humans excel in comparison with the machines. One such area is chess. Even with great advances in the speed and computational power of modern machines, Grandmasters often beat the best chess programs in the world with relative ease. This may be due to the fact that a game of chess cannot be won by pure calculation. There is more to the goodness of a chess position than some numerical value which apparently can be seen only by the human brain. Here an effort has been made to improve current chess engines by letting themselves evolve over a period of time. Firstly, the problem of learning is reduced into an optimization problem by defining Position Evaluation in terms of Positional Value Tables (PVTs). Next, the PVTs are optimized using Multi-Niche Crowding which successfully identifies the optima in a multimodal function, thereby arriving at distinctly different solutions which are close to the global optimum.", "histories": [["v1", "Wed, 30 Mar 2016 06:41:04 GMT  (332kb,D)", "http://arxiv.org/abs/1603.09051v1", null], ["v2", "Fri, 2 Sep 2016 04:53:19 GMT  (331kb,D)", "http://arxiv.org/abs/1603.09051v2", null], ["v3", "Wed, 16 Aug 2017 14:32:55 GMT  (332kb,D)", "http://arxiv.org/abs/1603.09051v3", "Accepted in CICN 2015. Preprint"], ["v4", "Sun, 20 Aug 2017 11:25:43 GMT  (332kb,D)", "http://arxiv.org/abs/1603.09051v4", "Accepted in CICN 2015. Preprint"]], "reviews": [], "SUBJECTS": "cs.AI cs.NE", "authors": ["rahul aralikatte", "g srinivasaraghavan"], "accepted": false, "id": "1603.09051"}, "pdf": {"name": "1603.09051.pdf", "metadata": {"source": "CRF", "title": "Phoenix: A Self-Optimizing Chess Engine", "authors": ["Rahul A R", "G Srinivasaraghavan"], "emails": ["rahular1@in.ibm.com", "gsr@iiitb.ac.in"], "sections": [{"heading": null, "text": "Keywords - Multi-Niche Crowding; Genetic Optimization; Machine Learning; Computer ChessI. INTRODUCTIONThe most important genetic factor influencing the strength of a chess engine is the way it evaluates moves. Experienced chess players have mastered the game over years of learning, and when they play the game, their mental processes involve a complex synergy of possible board moves, memories from past games, heuristic thumb rules, observing established game patterns, etc. Inevitably, when people play the game, the evaluation of a board position or move occurs through a complex hierarchy of abstractions that they often cannot accurately describe. Trying to imitate or mimic these processes on a computer is pointless, given our current lack of understanding of these processes and abstractions that humans use. Today, most computer chess machines resort to a series of hayrists to somehow reduce the representation of a board position / move."}, {"heading": "II. EVALUATION ROUTINE", "text": "In the simplest case, a rating function of a chess position provides the material difference between the players. However, it is generally not possible to claim equality of two positions taking into account only the material balance. In several opening lines, one side is willing to deliberately sacrifice a pawn, for example, for the king's gambit (1. e4 e5 2. f4 exf4). Sometimes a player can sacrifice pieces (e.g. an inactive tower for an active bishop or knight) in order to gain an intangible advantage that is considered worthwhile. Furthermore, highly skilled chess players often agree to call the game a draw, even if there is a material imbalance. Thus, in all of these situations, factors other than the material balance must be taken into account when evaluating the position. These factors are known as strategic or position parameters. In general, the rating function is a multivariate, linear function that measures the quality of a chess position. There are various characteristics that can be extracted from a chess position."}, {"heading": "A. Positional Parameters", "text": "This year, it has reached the point where it will be able to retaliate."}, {"heading": "III. GENETIC OPTIMIZATION", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. Genetic Scheme", "text": "Genetic algorithms are mainly used for optimization, and their learning is loosely based on several features of biological evolution. In general, they require 5 components [3]: \u2022 A way to encode the solutions to a problem on chromosomes 6. \u2022 A fitness function that provides an evaluation for each chromosome. \u2022 Operators that are applied to parent solutions when they reproduce to change their genetic composition. Crossover and mutation are the most common operators. Domain-specific operators can also be constructed and used (as happened in this paper).5A position is considered closed when there are 6 or more pawns occupying the 16 central squares. 6Chromosomes can be considered the basic building blocks of potential solutions consisting of the parameters of the solutions.Rahul A R et al. \u2022 Parameter settings for the algorithm such as population size, number of generations and so on.When a genetic algorithm is better suited to a game algorithm, using an optimum algorithm of the solving algorithm, it is better to execute and the solution algorithm of the individual is better."}, {"heading": "B. Niching", "text": "This year, it is only a matter of time before agreement is reached."}, {"heading": "C. Problem Formulation", "text": "This year, the time has come for an agreement to be reached, and it will only take a few days."}, {"heading": "IV. RESULTS", "text": "This can be scary and painfully slow when there is no common language through which the engines can communicate. In chess programming there are 2 protocols that are used as standards while chess engines are being built. They are: \u2022 Universal Chess Interface (UCI) \u2022 Chess Engine Communication Protocol (used inXBoard and WinBoard) UCI is more robust and is supported by most of the leading engines today. Therefore, UCI is used as a communication protocol in this implementation. More information about this protocol can be found in [10]. Many chess genres are also UCI compatible and therefore it is easy to put the machine into an arena [11] and actually watch the games being played instead of reading the PGN. The machine was tested against the original CuckooChess machine, as it is a clear benchmark for all improvements achieved."}], "references": [{"title": "Analysis of the alphabeta pruning algorithm", "author": ["S.H. Fuller", "J.G. Gaschnig", "J.J. Gillogly"], "venue": "1973.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1973}, {"title": "Depth-first iterative-deepening: An optimal admissible tree search", "author": ["R.E. Korf"], "venue": "Artificial Intelligence, vol. 27, pp. 97\u2013109, 1985.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1985}, {"title": "Training feedforward neural networks using genetic algorithms", "author": ["D.J. Montana", "L. Davis"], "venue": "BBN Systems and Technologies Corp, Tech. Rep., 1989.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1989}, {"title": "Genetic drift in genetic algorithm selection schemes", "author": ["A. Rogers", "A. Prugel-Bennett"], "venue": "IEEE Transactions on Evolutionary Computation, 1999.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1999}, {"title": "An analysis of the behavior of a class of genetic adaptive systems", "author": ["K. DeJong"], "venue": "University of Michigan, Tech. Rep., 1975.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1975}, {"title": "Multi-niche crowding in genetic algorithms and its application to the assembly of dna restrictionfragments", "author": ["W. Cedeno", "V. Rao", "T. Slezak"], "venue": "University of California, Davis, Tech. Rep., 1994.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1994}, {"title": "The principal continuation and the killer heuristic", "author": ["S. Akl", "M. Newborn"], "venue": "vol. ACM77: Proceedings of the 1977 annual conference, p. 466473, 1977.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1977}, {"title": "cuckoochess", "author": ["P. Osterlund"], "venue": "https://code.google.com/p/cuckoochess/, 2010.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "The uci protocol", "author": ["S.-M. Kahlen"], "venue": "http://wbec-ridderkerk.nl/html/ UCIProtocol.html, 2004.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2004}, {"title": "Arena chess", "author": ["M. Bloom"], "venue": "http://www.playwitharena.com/, 2002.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2002}, {"title": "Elo rating system", "author": ["A. Elo"], "venue": "http://en.wikipedia.org/wiki/Elo rating system, 1960. Rahul A R et al.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1960}], "referenceMentions": [{"referenceID": 0, "context": "With the amount of computing resources available today, these parameters when combined with fast pruning [1] and deepening [2] techniques can easily achieve IM3 if not the GM4 level.", "startOffset": 105, "endOffset": 108}, {"referenceID": 1, "context": "With the amount of computing resources available today, these parameters when combined with fast pruning [1] and deepening [2] techniques can easily achieve IM3 if not the GM4 level.", "startOffset": 123, "endOffset": 126}, {"referenceID": 2, "context": "Generally they require 5 components [3]:", "startOffset": 36, "endOffset": 39}, {"referenceID": 3, "context": "The problem with simple genetic algorithms is that it will eventually converge to one of the many global optima (if they do not get trapped in local optima) which depend on the initial population and the random genetic drift [4] occurring throughout the run.", "startOffset": 225, "endOffset": 228}, {"referenceID": 4, "context": "1) Multi-Niche Crowding: Crowding [5] is a generalization of pre-selection.", "startOffset": 34, "endOffset": 37}, {"referenceID": 4, "context": "C is called the crowding factor and a value 2 or 3 appears to work well in [5].", "startOffset": 75, "endOffset": 78}, {"referenceID": 5, "context": "The offspring could possibly have a lower fitness than the individual being replaced [6].", "startOffset": 85, "endOffset": 88}, {"referenceID": 6, "context": "ordering [7] by arranging moves in descending order of the PVT values for the destination squares.", "startOffset": 9, "endOffset": 12}, {"referenceID": 7, "context": "CuckooChess [8] is an advanced free open source chess program under the GNU General Public License written in Java by Peter Osterlund.", "startOffset": 12, "endOffset": 15}, {"referenceID": 8, "context": "More information about this protocol can be found in [10].", "startOffset": 53, "endOffset": 57}, {"referenceID": 9, "context": "Many chess GUIs also are UCI compatible and hence it is easy to plug the engine into a GUI such as Arena [11] and actually see the games being played, rather than read the PGN.", "startOffset": 105, "endOffset": 109}, {"referenceID": 10, "context": "This algorithm calculates the Elo rating [12] of a player provided the rating of the opponent is known.", "startOffset": 41, "endOffset": 45}], "year": 2017, "abstractText": "Since the advent of computers, many tasks which required humans to spend a lot of time and energy have been trivialized by the computers\u2019 ability to perform repetitive tasks extremely quickly. However there are still many areas in which humans excel in comparison with the machines. One such area is chess. Even with great advances in the speed and computational power of modern machines, Grandmasters often beat the best chess programs in the world with relative ease. This may be due to the fact that a game of chess cannot be won by pure calculation. There is more to the goodness of a chess position than some numerical value which apparently can be seen only by the human brain. Here an effort has been made to improve current chess engines by letting themselves evolve over a period of time. Firstly, the problem of learning is reduced into an optimization problem by defining Position Evaluation in terms of Positional Value Tables (PVTs). Next, the PVTs are optimized using Multi-Niche Crowding which successfully identifies the optima in a multimodal function, thereby arriving at distinctly different solutions which are close to the global optimum. Keywords\u2014Multi-Niche Crowding; Genetic Optimization; Machine Learning; Computer Chess", "creator": "LaTeX with hyperref package"}}}