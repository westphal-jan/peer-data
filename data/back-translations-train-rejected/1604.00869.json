{"id": "1604.00869", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Apr-2016", "title": "Automatic Knowledge Base Evolution by Learning Instances", "abstract": "Knowledge base is the way to store structured and unstructured data throughout the web. Since the size of the web is increasing rapidly, there are huge needs to structure the knowledge in a fully automated way. However fully-automated knowledge-base evolution on the Semantic Web is a major challenges, although there are many ontology evolution techniques available. Therefore learning ontology automatically can contribute to the semantic web society significantly. In this paper, we propose full-automated ontology learning algorithm to generate refined knowledge base from incomplete knowledge base and rdf-triples. Our algorithm is data-driven approach which is based on the property of each instance. Ontology class is being elaborated by generalizing frequent property of its instances. By using that developed class information, each instance can find its most relatively matching class. By repeating these two steps, we achieve fully-automated ontology evolution from incomplete basic knowledge base.", "histories": [["v1", "Mon, 4 Apr 2016 14:23:25 GMT  (829kb,D)", "http://arxiv.org/abs/1604.00869v1", "11 pages, submitted to International Semantic Web Conference 2014 (Rejected), Revising(2016-04-04~)"]], "COMMENTS": "11 pages, submitted to International Semantic Web Conference 2014 (Rejected), Revising(2016-04-04~)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["sundong kim"], "accepted": false, "id": "1604.00869"}, "pdf": {"name": "1604.00869.pdf", "metadata": {"source": "CRF", "title": "Automatic Knowledge Base Evolution by Learning Instances", "authors": ["Sundong Kim"], "emails": ["sundong.kim@kaist.ac.kr"], "sections": [{"heading": null, "text": "Keywords: Knowledge Base Evolution, Ontology Learning, Instance-based Learning, Property Generalization, Instance Type Matching, DBpedia, Cosine Similarity, TF-IDF"}, {"heading": "1 Introduction", "text": "Most of them are able to play by the rules they have imposed on themselves."}, {"heading": "2 Related Works", "text": "The traditional ontology evolution method can be categorized as three different types [2]: data-driven evolution, structure-driven evolution, usage-driven evolution. Structure-driven evolution is the evolution method by analyzing the structure of ontology. For example, by using structure-driven evolution, we can make the hierarchy more comprehensible. If certain classes have many subclasses, we can form another sub-level for controlling the number of subclasses. Data-driven approach is largely based on instance learning. For example, if all instances of class A are members of class B, class A becomes a sub-class B. Stojanovic emphasizes in particular that data-driven approach should be done through direct instances. External data sources are used by various research groups to complete the data-driven approach. Evolva [3] used RSS feeds, term lists to initiate ontology evolution from ontology, and many textology-based tools such as RAT [2]."}, {"heading": "3 Evolution Algorithm", "text": "Alternatively, the property generalization algorithm and the type correction algorithm work for automatic schema development. We propose three different methods of instance finding and a probability-based method of property generalization."}, {"heading": "3.1 Finding Instance Type", "text": "In fact, most of them are able to survive themselves, and they are able to survive themselves, \"he told the German Press Agency.\" I don't think they're able to survive me, \"he said.\" I don't think they're going to be able to survive me. \"He added,\" I don't think they're going to be able to survive me. \"He added,\" I don't think they're going to be able to survive me. \"He added,\" I don't think they're going to be able to survive me. \""}, {"heading": "3.2 Property Generalization", "text": "To correctly derive the instance type, we need solid ontology that provides tremendous property information. Property generalization is the path of the data-driven approach, reinforcing ontology by generalizing and deleting the property through instance-based learning. In detail, the famous property shared by most instances of a particular type becomes domain information after generalization. In addition, the property may lose its domain information if a larger portion of the instances of that class do not update it as a characteristic. Property generalization works under two different conditions. First, when new triples are added to the current knowledge base and detailed information of the instance becomes larger, we take the property generalization to update the ontology for new information. Second, after customizing the instance type, we need to take into account the effects on the knowledge base. For example, new instances are added, and ontologies that we want to delete existing instances based on that particular knowledge and the recent ones we want to delete."}, {"heading": "4 Experiment Setup", "text": "To validate our algorithm, we set up the ontology of DBpedia using the Prote \u0301 ge \u0301 [15] environment and gradually added instances to check how many unclassified instances are classified by the effect of our algorithm. English-Korean mapping information [16] is used in the implementation of the system. Algorithm 3 Automatic Knowledge-Base Evolving System1: Procedure Automatic Knowledge-Base Evolving System 2: Loading existing Knowledge-Base 3: While there are instance triples to add do 4: Add Instance Triple Sets 5: Do for all classes from the sheet 6: Property Generalization () 7: Property Deletion () 8: end for 9: for all classes from the sheet do10: Find Instance Type () 11: end for 12: end while 13: Save evolved Knowledge-Base 14: end procedure"}, {"heading": "4.1 Find the type of unclassified instances", "text": "In the first experiment, we added available instance information from the first experiment, adding 50,000 lines of new triples each time, and updated the knowledge base using our algorithm. Since not every instance has rdf: type information, it remained unclassified after it was added to the knowledge base. For example, some instances missed their instance type, and others are created by the value of object properties; the latter instances have no property if they did not exist before, and it takes time for the property to fill up. Finally, using the property type of ontology, these unclassified instances can find their own type."}, {"heading": "5 Results and Discussion", "text": "Figure 3 illustrates that 82.4% of unclassified instances that have properties find their own domain type. We can interpret that the range between green and black lines is the number of instances that have been reclassified by our evolutionary algorithm. The range between green and red lines is not yet classified because the property does not have much information, and some instances between red and blue lines have no property because they are newly generated from the value of the object property. Figure 4 illustrates the number of properties whose domain increases during iteration, and the ratio also increases from 76.9% to 91%. For each iteration, the ontology information overall increases through the property generalization algorithm."}, {"heading": "6 Conclusions and Future Work", "text": "In this paper, we have introduced a new fully automated knowledge data evolution method, which works in two steps - property generalization and instance finding. With this method, we can gradually generate evolutionary knowledge databases from incomplete ontology. According to this method, property plays an important role in the refinement of ontology. The great advantage of this approach is that the knowledge base can be easily adapted to new information based on a probabilistic model. A weakness of the method is not only the link between new information and existing ontology, but also the refinement of ontology and instance information, which allows our methods to serve as a starting point for the generation of time-evolving knowledge databases. We validated our algorithm through DBpedia datasets and proved the effectiveness of our algorithm. One weakness of the method is that ontology itself depends heavily on the information we receive."}], "references": [{"title": "DBpedia - A Large-scale, Multilingual Knowledge Base Extracted from Wikipedia", "author": ["J. Lehmann", "R. Isele", "M. Jakob", "A. Jentasch", "D. Kontokostas", "P.N. Mendes", "Hellmann. S.", "M. Morsey", "P. Kleef", "S. Auer", "C. Bizer"], "venue": "Semantic Web 1. 1-5", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Methods and Tools for Ontology Evolution", "author": ["L. Stojanovic"], "venue": "Ph.D. dissertation. Vrije Universiteit in Amsterdam, Netherlands", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2004}, {"title": "Evolva: A Comprehensive Approach to Ontology Evolution", "author": ["F. Zablith"], "venue": "Proceedings of the 6th European Semantic Web Conference, pp.944948,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2009}, {"title": "Text2Onto - A Framework for Ontology Learning and Data-driven Change Discovery", "author": ["P. Cimiano", "J. V\u00f6lker"], "venue": "In Proceedings of the 10th International Conference on Applications of Natural Language to Information Systems (NLDB), volume 3513 of Lecture Notes in Computer Science, pp.227-238,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2005}, {"title": "SPRAT: A Tool for Automatic Semantic Pattern-based Ontology Population", "author": ["D. Maynard", "A. Funk", "W. Peters"], "venue": "In Tutorial on Semantic Digital Libraries at ICSD\u201909,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2009}, {"title": "Towards an Automatic Creation of Localized Versions of DBpedia", "author": ["A.P. Aprosio", "C. Giuliano", "A. Lavelli"], "venue": "Proceedings of the 13th International Semantic Web Conference, pp.12-23,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "Extending the Coverage of DBpedia Properties using Distant Supervision over Wikipedia", "author": ["A.P. Aprosio", "C. Giuliano", "A. Lavelli"], "venue": "Proceedings of the 10th European Semantic Web Conference, pp.397-411,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2013}, {"title": "Pattern Based Knowledge Base Enrichment", "author": ["L. B\u00fchmann", "Lehmann", "Jens."], "venue": "Proceedings of the 13th International Semantic Web Conference, pp.33-48,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2013}, {"title": "Web Usage Mining: Discovery and Applications of Usage Patterns from Web Data", "author": ["J. Srivastava", "R. Cooley", "M. Deshpande", "Tan", "P. -N."], "venue": "ACM SIGKDD Explorations Newsletter, Vol.1 Issue.2, pp.12-23", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2000}, {"title": "Towards a Korean DBpedia and an Approach for Complementing the Korean Wikipedia based on DBpedia", "author": ["E.K. Kim", "M. Weidi", "K.S. Choi", "S. Auer"], "venue": "Proceedings of the 5th Open Knowledge Conference", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2010}, {"title": "Yago - A Core of Semantic Knowledge", "author": ["F.M. Suchanek", "G. Kasneci", "G. Weikum"], "venue": "16th International World Wide Web Conference", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2007}, {"title": "The Prot\u00e9g\u00e9 OWL Plugin: An Open Development Environment for Semantic Web Applications", "author": ["Knublauch H.", "R.W. Fergerson", "N.F. Noy", "M.A. Musen"], "venue": "Proceedings of the 3rd International Semantic Web Conference, pp.229-243,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2004}, {"title": "Ontology Evolution: A Process Centric Survey", "author": ["F. Zablith", "G. Antoniou", "M. d\u2019Aquin", "G. Flouris", "H. Kondylakis", "E. Motta"], "venue": "The Knowledge Engineering Review", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "In addition to that, by looking through the existing knowledge base such as DBpedia[1], you can find many missing information which can be inferred from its internal information.", "startOffset": 83, "endOffset": 86}, {"referenceID": 9, "context": "For example, instance \u2018Play station\u2019 in DBpedia Korea[10] has multiple properties explaining itself, however its type is still \u2018Thing\u2019 which means unclassified.", "startOffset": 53, "endOffset": 57}, {"referenceID": 1, "context": "Traditional ontology evolution method can be categorized as three different types[2]: data-driven evolution, structure-driven evolution, usage-driven evolution.", "startOffset": 81, "endOffset": 84}, {"referenceID": 2, "context": "Evolva[3] used RSS feeds, terms list to initiate ontology evolution.", "startOffset": 6, "endOffset": 9}, {"referenceID": 3, "context": "And many ontology learning tools such as Text2Onto[4], SPRAT[5] shows ontology changes from text corpus.", "startOffset": 50, "endOffset": 53}, {"referenceID": 4, "context": "And many ontology learning tools such as Text2Onto[4], SPRAT[5] shows ontology changes from text corpus.", "startOffset": 60, "endOffset": 63}, {"referenceID": 5, "context": "For extending the coverage of the localized version of DBpedia, Airpedia [6, 7] did mapping between Wikipedia infobox to 14 different languages.", "startOffset": 73, "endOffset": 79}, {"referenceID": 6, "context": "For extending the coverage of the localized version of DBpedia, Airpedia [6, 7] did mapping between Wikipedia infobox to 14 different languages.", "startOffset": 73, "endOffset": 79}, {"referenceID": 7, "context": "And [8] proposed semi-automatic schemata construction by extracting axiom patterns in existing knowledge base and converted into", "startOffset": 4, "endOffset": 7}, {"referenceID": 8, "context": "Web usage mining[9] is the famous method of usage-driven evolution.", "startOffset": 16, "endOffset": 19}, {"referenceID": 10, "context": "To clarify it, DBpedia just simply put Arnold\u2019s matching Yago[12] type information on the list though it can\u2019t be exactly match to another DBpedia type that describes Arnold Schwarzenegger better.", "startOffset": 61, "endOffset": 65}, {"referenceID": 11, "context": "To validate our algorithm, we setuped DBpedia ontology by using Prot\u00e9g\u00e9[15] environment, and added instances incrementally to check how many unclassified instances are classified by the effect of our algorithm.", "startOffset": 71, "endOffset": 75}], "year": 2016, "abstractText": "Knowledge base is the way to store structured and unstructured data throughout the web. Since the size of the web is increasing rapidly, there are huge needs to structure the knowledge in a fully automated way. However fully-automated knowledge-base evolution on the Semantic Web is a major challenges, although there are many ontology evolution techniques available. Therefore learning ontology automatically can contribute to the semantic web society significantly. In this paper, we propose full-automated ontology learning algorithm to generate refined knowledge base from incomplete knowledge base and rdf-triples. Our algorithm is data-driven approach which is based on the property of each instance. Ontology class is being elaborated by generalizing frequent property of its instances. By using that developed class information, each instance can find its most relatively matching class. By repeating these two steps, we achieve fully-automated ontology evolution from incomplete basic knowledge base.", "creator": "LaTeX with hyperref package"}}}