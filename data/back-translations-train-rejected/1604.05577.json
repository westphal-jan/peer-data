{"id": "1604.05577", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Oct-2015", "title": "Contribution to the Formal Specification and Verification of a Multi-Agent Robotic System", "abstract": "It is important to have multi-agent robotic system specifications that ensure correctness properties of safety and liveness. As these systems have concurrency, and often have dynamic environment, the formal specification and verification of these systems along with step-wise refinement from abstract to concrete concepts play a major role in system correctness. Formal verification is used for exhaustive investigation of the system space thus ensuring that undetected failures in the behavior are excluded. We construct the system incrementally from subcomponents, based on software architecture. The challenge is to develop a safe multi-agent robotic system, more specifically to ensure the correctness properties of safety and liveness. Formal specifications based on model-checking are flexible, have a concrete syntax, and play vital role in correctness of a multi-agent robotic system. To formally verify safety and liveness of such systems is important because they have high concurrency and in most of the cases have dynamic environment. We have considered a case-study of a multi-agent robotic system for the transport of stock between storehouses to exemplify our formal approach. Our proposed development approach allows for formal verification during specification definition. The development process has been classified in to four major phases of requirement specifications, verification specifications, architecture specifications and implementation.", "histories": [["v1", "Fri, 2 Oct 2015 13:53:35 GMT  (1020kb)", "http://arxiv.org/abs/1604.05577v1", "arXiv admin note: text overlap witharXiv:1501.05120"]], "COMMENTS": "arXiv admin note: text overlap witharXiv:1501.05120", "reviews": [], "SUBJECTS": "cs.SE cs.AI cs.MA", "authors": ["nadeem akhtar", "malik m saad missen"], "accepted": false, "id": "1604.05577"}, "pdf": {"name": "1604.05577.pdf", "metadata": {"source": "CRF", "title": "Contribution to the Formal Specification and Verification of a Multi-Agent Robotic System", "authors": ["Nadeem Akhtar"], "emails": ["nadeem.akhtar@iub.edu.pk", "saad.missen@gmail.com"], "sections": [{"heading": null, "text": "Since these systems are simultaneous and often have a dynamic environment, the formal specification and verification of these systems, together with the gradual refinement of abstract to concrete concepts, play an important role in system correctness. The challenge is to develop a secure multi-agent robot system, or more precisely, to ensure the correctness characteristics of safety and service life. Formal specifications based on model verification are flexible, have a concrete syntax and play a crucial role in the correctness of a multi-agent robot system. Formal specifications based on model verification play a crucial role in the correctness of a multi-agent robot system. To formally verify the safety and service life of such systems, it is important because they have a high degree of parallelism and in most cases have a dynamic environment."}, {"heading": "1. Introduction", "text": "Today, multi-agent systems are no longer safe. Lives can be lost due to failures in these systems, so it is important to have multi-agent robot systems that are safe. Here, the focus is on correctness properties on the behavior of multi-agent robot systems that can be described by a combination of security and liquidity. How can security and liquidity properties be imposed in the analysis, design and implementation of multi-agent robot systems? These properties can be met by a multi-agent robotics approach based on formal methods and languages, by implementing important phases of requirements specification of specifications, architecture specifications and specifications. Our research area is formal methods for specifying and verifying a multi-agent robotics system based on formal methods based on formal methods and languages."}, {"heading": "2. The Problem Statement, Objectives, and Contributions", "text": "Our problem is: How can a secure multi-agent system be developed? Here the focus is on correctness characteristics, which can be described by a combination of safety and liveliness. So the key question is, how can safety and life characteristics be enforced during the development of a multi-agent system? The most difficult task in the definition of robots is to ensure the correctness. Safety and life characteristics are crucial for the correctness of the system. Since these systems often have dynamic environments, the formal specification and verification of these systems. The gradual refinement of concepts plays an important role in system correctness."}, {"heading": "3. Background Studies", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1. Formal Methods", "text": "Formal methods are based on a solid mathematical foundation. Formal specification has precise mathematical semantics, which in turn supports formal verification. Formal verification allows mathematical rigorous evidence that specifications meet the objectives, code is according to the specification, and code produces only the results required. These methods can achieve complete coverage of the system, thereby ensuring that undetected errors in behavior are eliminated. The core goal of a solid formal approach is to provide unique and precise specifications [George and Vaughn, 2003]. The requirement model based on mathematics creates an accurate specification of the software, and ensures that the formal representation of software requirements provides a path for logical considerations about the construct created and this allows for a more accurate description and stronger design that satisfies the required characteristics. As formal specification and verification techniques become more complete and mature, our systems become more sophisticated, our ability to design and rapidly develop complex systems."}, {"heading": "3.2. Correctness Properties: Safety and Liveness", "text": "The security property is an invariant that claims that \"something bad never happens,\" meaning that an acceptable level of system working condition is maintained. [Magee and Kramer, 2006] have defined the security property S = {a1, a2,..., an} as a deterministic process that states that any track that has actions in the alphabet of S is accepted by S. ERROR conditions, such as exceptions that specify what is not required, as in complex systems, we set security properties by directly specifying what is required. The security property asserts that \"something good happens,\" which describes the states of a system that an agent can cause under certain conditions. Progress property P = {a1, a2,..., an} defines a property P that asserts that in an infinite execution of the system at least one of the actions a1, a2,... of actions that an agent can perform under certain conditions."}, {"heading": "3.3. Gaia Multi-Agent Method", "text": "The Gaia [Zambonelli, Jennings, and Wooldridge, 2003] requirements specifications recognize the organizational structure as the core concept for the development of an agent system. An appropriate choice of this organizational structure is required to meet the functional requirements. It is based on organizational abstractions to advance the analysis and design of a multi-agent system, and it considers a multi-agent system to be a computational organization consisting of interacting roles. These organizational abstractions play an important role in the analysis, design and implementation of a multi-agent system in a complex environment. Gaia uses the word method instead of the methodology, as we use the term methodology for the study of methods. It has a concrete syntax that can be expanded to address the formal specification aspects of a multi-agent system, and it generates a number of models and specifications that can be used by different software development methods for implementing them."}, {"heading": "3.4. Labelled Transition System (LTS)", "text": "Transition systems described [Magee and Kramer, 2006] are mathematical objects for formal verification and evaluation of concurrent systems. They are based on model testing for the verification of concurrent properties; they represent the system as a series of interacting finite state machines along with their properties; they comprehensively explore the system state space to prove the correctness properties of safety and vitality; and they perform compositional accessibility analyses to exhaustively search for violations of these properties. [Magee and Kramer, 2006] proposed an analysis tool LTSA [LTSA, 2006] that generates a labeled transition system consisting of a parallel composition of asynchronous processes sharing interaction with each other. In parallel, there are synchronizations between different processes. LTSA also provides specification animations for interactive exploration of system states. FSP is a process algebra state analysis with actual state processes used for the description of current systems."}, {"heading": "3.5. \u03c0-ADL", "text": "\u03c0-ADL [Oquendo, 2004] provides the software engineer with the basic structural and behavioral constructions for describing static and dynamic software architectures. It is an executable formal specification language and supports automated analysis as well as the refinement of dynamic architectures. \u03c0-ADL has as its mathematical basis the higher order \u03c0 calculation [Sangiorgi, 1992] [Milner, Parrow and Walker, 1992]. It is a well-formed higher calculation for defining dynamic and mobile architectural elements, which has its basis in the work related to the use of \u03c0 calculation as a semantic basis for architectural description languages [Chaudet and Oquendo, 2000]. According to [Milner, 1999] a natural solution for specifying dynamic behavior is \u03c0 calculation, as it provides a calculation model that is turing-complete. It is an ideal choice for describing simultaneous processes that communicate messages."}, {"heading": "4. The Proposed Approach", "text": "An approach has been proposed for the formal specification and verification of Multi-Agent Robotic Systems. Requirements are specified, formally verified on the basis of safety and life characteristics, the architecture is specified and the system implemented. Our proposed approach is a combination of multi-agent methods, languages and techniques that take into account safety and life characteristics at each stage of development. This approach is illustrated by a case study of a Multi-Agent Robot System [Akhtar, 2010].Our approach begins with the identification of components and sub-components of the system, i.e. each and every part of the system that can be formally defined. Each component is formally verified and validated, especially the critical components. The approach consists of four main development phases of the requirements specification, requirements verification, architecture specification and system implementation, as shown in Fig.4.It is presented as a Multi-Agent Verification System-Agent."}, {"heading": "4.1. Requirement Specification", "text": "The requirements phase begins with the identification of the early requirements, followed by the specification of a multi-agent system as an organization. In this organization, there are several levels of abstraction; organizational rules are defined that set out the characteristics of the global system; global relationships between roles; global relationships between roles and protocols; global relationships between roles and protocols; and constraints within which the system must function; the environmental model that examines the environment and the associated entities is defined; the role model has responsibilities and entitlements, the responsibilities are expressed in terms of security and life characteristics; agent roles are also defined; a single agent may have one or more roles, but a single role cannot be performed by more than one agent; security and life characteristics are defined in this initial phase along with the definition of agent roles. In this phase, these characteristics can be defined by regular expressions or by the logic of the first order. Protocols are defined between agent roles that define the interaction between the service model, where each one is defined."}, {"heading": "4.2. Requirement Verification", "text": "The system is divided into sub-components. Each component is verified by a formal model verification exhaustive method, which includes a complete verification of all states, processes and actions of each component along with its sub-component. Afterwards, all sub-components are assembled and the system as a whole is verified [Akhtar, Guyadec, and Oquendo, 2009]. Final State Process is a process algebra notation used for the concise description of component behavior, especially for the concurrent systems. It has strong artifacts for building concurrent processes and is therefore ideal for concurrent systems. It provides the constructs for formalizing the specification of software components, each component consists of processes and each process has a limited number of states and is composed of one or more actions. Processes are modelled as a sequence of actions."}, {"heading": "4.3. Architecture Specification", "text": "A formal architecture [Akhtar, Guyadec and Oquendo, 2012] has been proposed that defines both the static and the dynamic aspects of the system, in which the architectural elements are identified, and all these architectural elements are specified separately and then linked together to present the system as one entity, based on \u03c0-ADL point network, which is a point network extension of \u03c0-ADL [Oquendo, 2004]. We have an architecture that consists of abstractions and behaviors that are formal, consisting of components and connectors that are executed during execution and can change dynamically. 1. These architectural specifications provide a formal system with a mathematical basis that can be used to describe both static and dynamic software architecture. 2. They have as a formal basis the superordinate, typed computer calculation [Sangiorgi, 1992]. It is a well-structured overarching and communicative definition of the architectural elements."}, {"heading": "4.3.1. Moving from Requirement Specification to Architecture Verification", "text": "The architectural specifications are based on requirement specifications. If we move from requirement to architecture, then the safety and life characteristics should be preserved. The entire system is represented in the form of a \u03c0 ADL point network with emphasis on safety and life characteristics."}, {"heading": "4.3.2. Moving from Architecture Specifications to Simulation Implementation", "text": "The system is implemented as a simulation that reflects architectural specifications, from the \u03c0 ADL-based system to the Service Oriented Architecture (SOA) -based robot simulation system. There should be similarities between the characteristics of the architecture specification and the simulation implementation."}, {"heading": "4.4. System Implementation", "text": "The system is based on SOA with each component as a service, whereby components are equipped with one or more sub-components, each sub-component being implemented by a service. These services are loosely integrated and are jointly orchestrated by an orchestration service. As a result, we have a system with reusable components. This service-based simulation is implemented by programming C # -based services of Microsoft Robotics Developer Studio (MRDS). A refinement relationship between the architectural specifications and these C # -based services has been defined. It is a implementation of the LTS specifications in a simulation environment. In our system, each individual application is a service. An application is a composition of loosely coupled simultaneous performing components. For example: The carrier robot consists of a series of jointly orchestrated services. It has two wheels with a motor, sensors consisting of two laser collision absorbers for the collision detection service, each one for the detection and the infrared detection service, and each for the detection of this."}, {"heading": "4.4.1. Moving from Implementation to Verification Specification", "text": "The specifications for the implementation of the robot simulation must correspond to the finite automatic LTS system. Both the implementation and the verification specifications should preserve the safety and life characteristics. These LTS characteristics should also correspond during the simulation implementation.The simulation is continuous with a continuous flow of actions. Each part of the simulation is a maintenance along with the orchestration of services. On the other hand, the LTS-based system is a much lower abstraction level; has simultaneous processes; each process has its own actions. There are discrete states and the system moves from one state to another. The simulation, which is continuous, must satisfy the discrete LTS system.Relationship between the two systems.The simulation specifications are able to satisfy the verification specifications. In our simulation model, we create a track of actions that corresponds to the track of actions created by the LTS, which provides a track of actions through the architecture specifications."}, {"heading": "5. Case Study: Multi-Agent Robotics Transport System", "text": "In this section we present a case study of the multi-agent robotics system. It is a system consisting of robotic transport agents. The aim is to specify our system and then verify the correctness of its safety and life characteristics. The mission is to transport the material from one warehouse to another. It moves in its environment, which in this case is static, i.e. the topology of the system does not evolve during runtime. There is the possibility of collision between the agents during transport. Collision resolution techniques are used to avoid system stoppages. We have specified each individual part of the system, i.e. the agents together with the environment, in the form of LTS."}, {"heading": "5.1. Types of Agents", "text": "There are three types of agent: 1. Carrier: he transports material from one warehouse to another; he can load or unload and; he can drive both forwards and backwards. Each section of road is marked with a signal number and the carrier can read this number. 2. Loading / unloading agent: he receives / delivers the material from the warehouse, can detect whether a carrier is waiting (for loading or unloading) by reading the presence sensor, he ensures that the carrier waiting for loading is loaded and the carrier waiting for unloading is unloading.3. Freight carrier: manages the number of warehouses and he also transports the material between warehouse and loading / unloading device."}, {"heading": "5.2. Environment", "text": "There is a road between warehouse A and warehouse B. It consists of a sequence of interconnected sections of fixed length. Each section of the road has a numbered sign that can be read by beams. There are three types of road sections depending on the topology of the road as shown in Fig.9. Each of the three types of road sections has a unique numbered sign. The road is one lane and there is a possibility of collision between beams. There is a roundabout at warehouse A and warehouse B."}, {"heading": "5.3. Scenario", "text": "In this case study, we have used a road topology consisting of nine partition walls to represent all the conditions and processes as shown in Fig.9. It is the smallest circuit (i.e. a combination of partitions) that allows us to examine all plots that would be in a much larger circuit. We have looked at the case in which warehouse A is full and warehouse B. The task of the carrier is to transport warehouse A to warehouse B until warehouse A. The loader in warehouse A loads, and the unloader in warehouse B unloads the carrier. The store manager performs a inventory count in each warehouse. In this case, the environment is static. In the central section (3, 4, 5) there is the possibility of a collision between carriers coming from the opposite directions. Priority is given to the loaded carriers, i.e. if there is a collision between a loaded and an empty carrier, during which the carrier returns to the adjacent areas, the carrier consists of 9 and the carrier in the adjacent areas."}, {"heading": "6. Gaia Based Requirement Specifications", "text": "The main part of the work is to take the Gaia specifications and then use them so that they can be verified by using the FSP language. Gaia Method, as described in Section-4, consists of a number of models; we may only deal with the role model and interaction model that constitute the analytical phase of Gaia."}, {"heading": "6.1. Agent Roles", "text": "The role of an agent defines what he has to do in the organization, both in consultation with other agents and in relation to the organization itself. Often, the role of an agent is simply defined in terms of the specific task he has to perform in the context of the overall organization. Organizational role models accurately describe all the roles that make up the computational organization. They do so in terms of their functionalities, activities, responsibilities, and in terms of their interaction protocols and patterns. In the role model, the liveliness and safety expressions play an important role in system verification. In our system for the carrier, there are move _ full and move _ empty roles. These roles are better adapted to this type of route where priority is given to the loaded carriers. In this paper, we present the Move _ full sign of our system, i.e. the role of a loaded carrier is the role of the loaded carrier that moves from warehouse-A to warehouse-B.ReadUnloadSign. And there are two loading and unloading protocols, Waitloading and unloading."}, {"heading": "6.2. Interaction Model", "text": "There are dependencies and relationships between the different roles in a multi-agent organization that represent the set of protocol definitions, one for each type of interaction between roles. Here, Table-1 shows the protocol definitions associated with Move _ full and Move _ empty role.Table: Move _ full role protocolswaitForUnloadingMove _ full Unload sign _ numberThe full carrier agent waits for the un-loader agent positionUnloadingMove _ full Unload sign _ number The full carrier agent waits for the position of the un-loader agent positionTable: Move _ empty role protocolswaitforLoadingMove _ empty load sign _ numberThe empty carrier agent waits for the loader agent positionloadCarrierMove _ empty load sign _ number The empty carrier agent is loaded by the position of the Loader agent."}, {"heading": "7. LTS Verification", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "7.1. Road \u2013 System Environment", "text": "In our case study, the road is the environment and each freight forwarder has his or her own itinerary, which is the route taken by freight forwarders on the road to transport material from one warehouse to another. Freight forwarders travel the route clockwise. Following are the FSP specifications for the route: 13 14 15 16 17 18 19 21 22 | when (v = = 8) movetonext - > EMPTY _ ROUTE [5] | when (v = = 5) movetonext - > EMPTY _ ROUTE [v-1] movetonext - > EMPTY _ ROUTE [v-1] revietonext - > EMPTROUTE-v-1 > EMPTROUTE-MPT1 > EMPT1 > EMPT1-MPT1 > EMPT1 > EMPT1-MPT1 > EMPT1-1"}, {"heading": "7.2. Carrier Agent", "text": "The next step is the specification of carrier agents, i.e. the specification of empty carriers and full carrier agents. Here, only one carrier agent is used to represent all possible states of the system that can occur."}, {"heading": "7.3. Loader & Un-loader Agents", "text": "Loading and unloading agents load or unload the freight forwarders"}, {"heading": "7.4. Stock Management", "text": "Warehouse management ensures that the inventory at the beginning of the case study in Camp A corresponds to the inventory at the end of the case study in Camp B."}, {"heading": "7.5. NOLOSS Property", "text": "The security feature NOLOSS of the freight forwarder indicates that there is no loss of storage during loading, unloading and movement between warehouses. To represent the LTS here with all its conditions, we have chosen a mini route with only three partitions. The freight forwarder is loaded and then the carrier is full, there is no loss of storage during the trajectory of the freight forwarder between warehouse A and B. The security feature specifies each track that the object fulfils for a certain action alphabet. If the system produces tracks that are not accepted by the object automats, a breach is detected during the accessibility analysis."}, {"heading": "8. Future Objectives", "text": "The work we will do in the future is divided into three axes, as shown below in Fig.16.1. Automated transformations from one model to another. Development of constructs and tools for automatic code generation from models. 2. Inclusion of new versions of the proposed approach. Improvements to the current approach and suggestions for new versions that have improved better constructs."}, {"heading": "9. Concluding Notes", "text": "The most important contribution is the development of an approach for a multi-agent robot system that meets the qualities of correctness, i.e. safety and life characteristics. An approach based on a combination of methods, formal languages and techniques is proposed to support efficient formal description; collect requirements; define formal specifications; transform; refine abstract to concrete concepts; and verify multi-agent robot systems. This approach is exemplified by a case study of a multi-agent robot system. The proposed formal phases of approach have key phases such as: organizational abstractions, organizational rules, requirements specifications, role model specifications, protocol definitions, formal requirements verification based on correctness properties, LTS creation, formal static architectural specifications, formal dynamic architectural specifications and service-oriented architectural requirements based approach to the implementation of each early stage, and the implementation based on the model."}, {"heading": "Acknowledgement", "text": "We thank Prof. Dr. Muhammad Mukhtar, Vice-Chancellor of Islaa University of Bahawalpur for the motivation to carry out research projects and for his support and encouragement for applied research made possible by the support of the Department of Computer Science & IT of Islamia University of Bahawalpur, Pakistan."}], "references": [{"title": "Contribution to the formal specification and verification of multi-agent robotic systems", "author": ["N Akhtar"], "venue": "PhD thesis, Ecole Doctorale, Lab. VALORIA,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "FORMAL SPECIFICATION AND VERIFICATION OF MULTI-AGENT ROBOTICS SOFTWARE SYSTEMS: A Case Study", "author": ["N Akhtar", "Guyadec", "Y. L", "F Oquendo"], "venue": "Proceedings of the International Conference on Agents and Artificial Intelligence (ICAART 09)", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Formal requirement and architecture specifications of a multi-agent robotic system", "author": ["N Akhtar", "L. Guyadec. Y", "F Oquendo"], "venue": "Journal of computing,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "A Formal Architecture Description Language Based on Process Algebra for Evolving Software Systems", "author": ["C Chaudet", "F Oquendo"], "venue": "Proceedings of the 15th IEEE International Conference on Automated Software Engineering (ASE\u201900). IEEE Computer Society, Grenoble,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2000}, {"title": "Architecture-Driven Software Engineering: Specifying, Generating, and Evolving Component-Based Software Systems", "author": ["C Chaudet", "M. Greenwood", "F. Oquendo", "B. Warboys"], "venue": "IEEE Journal: Software Engineering,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2000}, {"title": "Social conceptions of knowledge and action: DAI foundations and open systems semantics", "author": ["L Gasser"], "venue": "Artificial Intelligence,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1991}, {"title": "Fairness and priority in progress property analysis\u201d, Technical report, Department of Computing, Imperial College of Science, Technology and Medicine, 180", "author": ["D. Giannakopoulou", "J. Magee", "Kramer. J"], "venue": "Queens Gate, London SW7 2BZ, UK,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1999}, {"title": "Open information systems semantics for distributed artificial intelligence", "author": ["C Hewitt"], "venue": "Artificial Intelligence,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1991}, {"title": "A roadmap of agent research and development", "author": ["N Jennings", "K. Sycara", "M. Wooldridge"], "venue": "Int. Journal of Autonomous Agents and Multi-Agent Systems,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1998}, {"title": "Concurrency: State Models and Java Programs", "author": ["J. Magee", "J Kramer"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2006}, {"title": "Communicating and Mobile Systems: The \u03c0-Calculus", "author": ["R Milner"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1999}, {"title": "A Calculus of Mobile Processes", "author": ["R Milner", "J. Parrow", "D Walker"], "venue": "Information and Computation", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1992}, {"title": "On the Development of S-algol", "author": ["R Morrison"], "venue": "Ph.D Thesis, University of St Andrews,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1979}, {"title": "Tutorial on ArchWare ADL \u2013 Version 2", "author": ["F Oquendo"], "venue": "ArchWare European RTD Project IST- 2001-32360,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2005}, {"title": "\u03c0-ADL: An Architecture Description Language based on the Higher Order Typed \u03c0-Calculus for Specifying Dynamic and Mobile Software Architectures", "author": ["F Oquendo"], "venue": "ACM Software Engineering Notes,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2004}, {"title": "Expressing Mobility in Process Algebras: First-Order and Higher-Order Paradigms", "author": ["D Sangiorgi"], "venue": "PhD Thesis, University of Edinburgh,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1992}, {"title": "Fundamental Concepts in Programming Languages", "author": ["C Strachey"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1967}, {"title": "Language Design Methods based on Semantic Principles", "author": ["Tennent", "R.D"], "venue": "Acta Informatica", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1977}, {"title": "Intelligent agents: Theory and Practice", "author": ["M. Wooldridge", "N.R. Jennings"], "venue": "Knowledge Engineering Review,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1995}, {"title": "Developing Multiagent Systems: The Gaia Methodology", "author": ["F Zambonelli", "N.R. Jennings", "M. Wooldridge"], "venue": "ACM Transactions on Software Engineering and Methodology,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2003}, {"title": "Formal Methods: Problems and Promises", "author": ["Luqi", "J. Goguen"], "venue": "IEEE Software, Volume", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1997}, {"title": "Application of Lightweight Formal Methods in Requirement Engineering", "author": ["V George", "R. Vaughn"], "venue": "CROSSTALK: The Journal of Defence Software Engineering,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2003}, {"title": "Systems and Software Verification: Model-Checking Techniques and Tools", "author": ["B Berard", "Bidoit", "A M Finkel", "F Laroussinie", "A. Petit", "L. Petrucci", "P Schnoebelen", "P. McKenzie"], "venue": null, "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2001}, {"title": "Model Checking", "author": ["E Clarke", "O Grumberg", "D. Peled"], "venue": null, "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2000}, {"title": "Communicating sequential processes", "author": ["C.A.R. Hoare"], "venue": "Communications of the ACM, v.21 n.8,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 1978}, {"title": "A Calculus of Communicating Systems", "author": ["R. Milner"], "venue": null, "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1980}, {"title": "ACP\u03c4: A Universal Axiom System for Process Specification", "author": ["J.A. Bergstra", "J.W. Klop"], "venue": "CWI Quarterly 15,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 1987}, {"title": "The Formal Description Technique LOTOS", "author": ["Van Eijk", "P.H.J"], "venue": null, "citeRegEx": "29", "shortCiteRegEx": "29", "year": 1989}], "referenceMentions": [{"referenceID": 8, "context": "9 ROUTE = EMPTY_ROUTE[9], FULL_ROUTE[v:R]=( when (v==7) readunloadSign -> FULL_ROUTE[v] | when (v!=7) readSign[v] -> FULL_ROUTE[v]", "startOffset": 21, "endOffset": 24}, {"referenceID": 6, "context": "| when (v>=1&v<=6)movetonext -> FULL_ROUTE[v+1] | when (v==7) waitforunloading -> EMPTY_ROUTE[7] ), EMPTY_ROUTE[v:R]=( when (v==1) readloadSign -> EMPTY_ROUTE[1]", "startOffset": 93, "endOffset": 96}, {"referenceID": 0, "context": "| when (v>=1&v<=6)movetonext -> FULL_ROUTE[v+1] | when (v==7) waitforunloading -> EMPTY_ROUTE[7] ), EMPTY_ROUTE[v:R]=( when (v==1) readloadSign -> EMPTY_ROUTE[1]", "startOffset": 158, "endOffset": 161}, {"referenceID": 4, "context": "22 | when (v==8) movetonext -> EMPTY_ROUTE[5]", "startOffset": 42, "endOffset": 45}, {"referenceID": 8, "context": "| when (v==5) movetonext -> EMPTY_ROUTE[v-1] | when (v==4) movetonext -> EMPTY_ROUTE[v-1] | when (v==3) movetonext -> EMPTY_ROUTE[9] | when (v==9) movetonext -> EMPTY_ROUTE[1] | when (v==3) movetoprevious -> EMPTY_ROUTE[v+1]", "startOffset": 129, "endOffset": 132}, {"referenceID": 0, "context": "| when (v==5) movetonext -> EMPTY_ROUTE[v-1] | when (v==4) movetonext -> EMPTY_ROUTE[v-1] | when (v==3) movetonext -> EMPTY_ROUTE[9] | when (v==9) movetonext -> EMPTY_ROUTE[1] | when (v==3) movetoprevious -> EMPTY_ROUTE[v+1]", "startOffset": 172, "endOffset": 175}, {"referenceID": 7, "context": "| when (v==4) movetoprevious -> EMPTY_ROUTE[v+1] | when (v==5) movetoprevious -> EMPTY_ROUTE[8] | when (v==1) waitforloading -> FULL_ROUTE[1] ).", "startOffset": 92, "endOffset": 95}, {"referenceID": 0, "context": "| when (v==4) movetoprevious -> EMPTY_ROUTE[v+1] | when (v==5) movetoprevious -> EMPTY_ROUTE[8] | when (v==1) waitforloading -> FULL_ROUTE[1] ).", "startOffset": 138, "endOffset": 141}, {"referenceID": 0, "context": "loaded -> ONTHEWAY[1]),", "startOffset": 18, "endOffset": 21}], "year": 2014, "abstractText": "It is important to have multi-agent robotic system specifications that ensure correctness properties of safety and liveness. As these systems have concurrency, and often have dynamic environment, the formal specification and verification of these systems along with step-wise refinement from abstract to concrete concepts play a major role in system correctness. Formal verification is used for exhaustive investigation of the system space thus ensuring that undetected failures in the behavior are excluded. We construct the system incrementally from subcomponents, based on software architecture. The challenge is to develop a safe multi-agent robotic system, more specifically to ensure the correctness properties of safety and liveness. Formal specifications based on model-checking are flexible, have a concrete syntax, and play vital role in correctness of a multi-agent robotic system. To formally verify safety and liveness of such systems is important because they have high concurrency and in most of the cases have dynamic environment. We have considered a case-study of a multi-agent robotic system for the transport of stock between storehouses to exemplify our formal approach. Our proposed development approach allows for formal verification during specification definition. The development process has been classified in to four major phases of requirement specifications, verification specifications, architecture specifications and implementation.", "creator": "PScript5.dll Version 5.2.2"}}}