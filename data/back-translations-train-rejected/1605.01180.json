{"id": "1605.01180", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-May-2016", "title": "A Step from Probabilistic Programming to Cognitive Architectures", "abstract": "Probabilistic programming is considered as a framework, in which basic components of cognitive architectures can be represented in unified and elegant fashion. At the same time, necessity of adopting some component of cognitive architectures for extending capabilities of probabilistic programming languages is pointed out. In particular, implicit specification of generative models via declaration of concepts and links between them is proposed, and usefulness of declarative knowledge for achieving efficient inference is briefly discussed.", "histories": [["v1", "Wed, 4 May 2016 08:34:17 GMT  (115kb)", "http://arxiv.org/abs/1605.01180v1", "4 pages"]], "COMMENTS": "4 pages", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["alexey potapov"], "accepted": false, "id": "1605.01180"}, "pdf": {"name": "1605.01180.pdf", "metadata": {"source": "CRF", "title": "A Step from Probabilistic Programming to Cognitive Architectures", "authors": ["Alexey Potapov"], "emails": ["potapov@aideus.com"], "sections": [{"heading": null, "text": "Keywords: probabilistic programming, cognitive architectures, generative models, declarative knowledge"}, {"heading": "1 Introduction", "text": "Although these components are not necessarily explicit and some systems may be more syncretic than others, we can characterize approaches to AGI through them. Basic models of universal algorithmic intelligence such as AIXI, for example, implicitly represent knowledge in the form of programs and use Solomonoff predictions and an exhaustive search for action selection. Cognitive Architectures (CA) typically use more restrictive representations and learning methods for the sake of computational efficiency. Some architectures use a unified representation and learning method that lead to \"great unification and functional elegance,\" e.g. [1], but lose expressiveness. Others use more general knowledge representations and many consequential strategies [2] that lead to higher expressiveness, but cause difficulties with integrating different components of CA.Achieving \"grand unification and functional elegance\" for more general representations."}, {"heading": "2 Basic Components of CAs in PPLs", "text": "The reason for this is the fact that this model is an attempt to solve deductive reasoning problems (see also: an example with the subset sum problem); you can also do some kind of knowledge-based reasoning by freeing it up (see, for example, [4]); PPLs generally do not support a clear representation of the knowledge that is separated from the rest code."}, {"heading": "3 Extending PPLs with Declarative Knowledge", "text": "In fact, it is such that most of them will be able to move into another world, in which they are able to move, in which they are able to live, in which they are able to live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they live, in which they, in which they, in which they live, in which they, in which they, in which they, in which they, in which they, in which they live, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they live, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they live, in which they, in which they, in which they, in which they, in which they, in which they, in which they, in which they, live, in which they, in which they, in fact, live, in which they, in which they, in which they, in which they, live, in which they, in which they, in fact, in which they, in which they, in fact, live, in which they, in which they, in fact, in which they, in fact, are able to move, in which they, in which most of them, are able to move, in a different world, in which they, in which they, in which they, in which they are able to live, in which they, in which they are able to live in which they are able"}], "references": [{"title": "Extending Mental Imagery in Sigma", "author": ["P.S. Rosenbloom"], "venue": "J. Bach, B. Goertzel, and M. Ikl\u00e9 (Eds.): AGI 2012, LNAI 7716, pp. 272\u2013281", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Engineering General Intelligence, Part 1, 2", "author": ["B. Goertzel", "C. Pennachin", "N. Geisweiller"], "venue": "Atlantis Press", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2014}, {"title": "Genetic Programming on Program Traces as an Inference Engine for Probabilistic Languages", "author": ["V. 110. Batishcheva", "A. Potapov"], "venue": "AGI\u201915, LNAI 9205, pp. 14\u201324", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2015}, {"title": "Metacomputations and Program-based Knowledge Representation", "author": ["V. Khudobakhshov"], "venue": "In:K.-U. K\u00fchnberger, S. Rudolph, P. Wang (Eds.): AGI\u201913, LNAI 7999, pp. 70\u201377", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Efficiently sampling probabilistic programs via program analysis", "author": ["A. Chaganty", "Nori A.V.", "S.K. Rajamani"], "venue": "Proc. Artificial Intelligence and Statistics, pp. 153\u2013160", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "A dynamic programming algorithm for inference in recursive probabilistic programs", "author": ["A. Stuhlm\u00fcller", "N.D. Goodman"], "venue": "arXiv:1206.3555 [cs.AI]", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 0, "context": "[1], but loosing expressiveness.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "Others utilize quite general knowledge representations and many inference strategies [2] that result in higher expressiveness, but causes difficulties with integrations of different components of the CA.", "startOffset": 85, "endOffset": 88}, {"referenceID": 2, "context": "The same inference engine can be used to solve deductive reasoning tasks (see an example with the subset sum problem in [3]).", "startOffset": 120, "endOffset": 123}, {"referenceID": 3, "context": "One possible way to try to achieve both efficiency and universality is program specialization [5].", "startOffset": 94, "endOffset": 97}, {"referenceID": 4, "context": "For example, in [6] program analysis is performed to propagate observations backward through the program.", "startOffset": 16, "endOffset": 19}, {"referenceID": 5, "context": "In [7] something similar to specialization of PPL inference engine w.", "startOffset": 3, "endOffset": 6}, {"referenceID": 1, "context": "One can think of this concept as ConceptNode and is-a link as InheritanceLink stored in Atomspace in OpenCog [2].", "startOffset": 109, "endOffset": 112}], "year": 2016, "abstractText": "Probabilistic programming is considered as a framework, in which basic components of cognitive architectures can be represented in unified and elegant fashion. At the same time, necessity of adopting some component of cognitive architectures for extending capabilities of probabilistic programming languages is pointed out. In particular, implicit specification of generative models via declaration of concepts and links between them is proposed, and usefulness of declarative knowledge for achieving efficient inference is briefly dis-", "creator": "Word"}}}