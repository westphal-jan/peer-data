{"id": "1605.01622", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-May-2016", "title": "Improving abcdSAT by At-Least-One Recently Used Clause Management Strategy", "abstract": "We improve further the 2015 version of abcdSAT by various heuristics such as at-least-one recently used strategy, learnt clause database approximation reduction etc. Based on the requirement of different tracks at the SAT Competition 2016, we develop three versions of abcdSAT: drup, inc and lim, which participate in the competition of main (agile), incremental library and no-limit track, respectively.", "histories": [["v1", "Thu, 5 May 2016 15:20:33 GMT  (55kb)", "http://arxiv.org/abs/1605.01622v1", "2 pages"]], "COMMENTS": "2 pages", "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["jingchao chen"], "accepted": false, "id": "1605.01622"}, "pdf": {"name": "1605.01622.pdf", "metadata": {"source": "CRF", "title": "Improving abcdSAT by At-Least-One Recently Used Clause Management Strategy", "authors": ["Jingchao Chen"], "emails": ["chen-jc@dhu.edu.cn"], "sections": [{"heading": null, "text": "ar Xiv: 160 5.01 622v 1 [cs.L O] 5M ay2 01I. INTRODUCTIONThe abcdSAT solver submitted to the 2016 SAT contest is the improved version of abcdSAT 2015 [1], which is based on the top of Glucose 2.3 [6], [7]. Here we provide three versions of abcdSAT: drup, inc and lim, which are presented on main track (agile), incremental library track or unlimited track. Among the most important techniques used by the three versions are at least one recently applied strategy, the reduction of the approximation of the learned clause in the database, recursive split solution, decision variables selection based on blocked clause decomposition [2], [3], bit encoding phase selection [4], simplifications such as hypersimplification, the existing probing, elimination, etc."}, {"heading": "II. AT-LEAST-ONE RECENTLY USED STRATEGY", "text": "In the search process of the CDCL (Conflict Driven, Clause Learning) solver, however, the learned clause database must be maintained. Based on our experimental observation, the maintenance of the clause is actually similar to the cache replacement in CPU cache management or the page replacement in a computer operating system. There are many cache (page) replacement algorithms. For example, Least Recently Used (LRU), Most Recently Used (MRU), Pseudo-LRU (PLRU), Least-Frequently Used (LFU), Second Chance FIFO, Random Replacement (RR), Not Recently Used (NRU) [9], etc. Our At-Least-One Recently Used (ALORU), Least-Frequently Used (LFU), Second Chance FIFO, Random Replacement (RR), Not Recently Used (NRU), etc."}, {"heading": "III. LEARNT CLAUSE DATABASE APPROXIMATION REDUCTION", "text": "The goal of reducing the learned clause in the database is twofold: Eliminate useless clauses and avoid expanding the database. Almost all existing reduction algorithms in CDCL solvers sort learned clauses by the score (e.g. LBD) of the clauses and then remove a given number of clauses in sorted order. This can be considered an exact reduction. Our approach differs from the exact reduction. It has no sorting and replaces sorting by selection. In detail, our approach first finds the clause with the k-th smallest (or largest) score, where k is the number of clauses to remove. Second, it removes k clauses with the score smaller than or equal to the k-th smallest score. Note that clauses with the score equal to the k-th (or largest) score are not often unique."}, {"heading": "IV. DYNAMIC CORE AND LOCAL LEARNT CLAUSE MANAGEMENT", "text": "Like SWDiA5BY [11], Adhesive Old classifies learned clauses into two categories: core clauses and local clauses. However, the classification of SWDiA5BY is static, while our classification is dynamic. In SWDiA5BY, the maximum LBD of the learned core clauses is set to a constant 5. However, in abcdSAT, the maximum LBD of the learned core clauses is not set. AbcdSAT divides the entire search process into two stages. If the number of learned core clauses is less than 2 \u00d7 106, it is considered the first stage. Otherwise, it is considered the second stage. In the first stage, the maximum LBD of the learned core clauses is limited to 2. In this stage, core clauses are kept indefinitely unless they are removed when they are met. In the second stage, the maximum LBD of the learned core clauses is limited to 5."}, {"heading": "V. RECURSIVE SPLITTING SOLVING", "text": "Dre rf\u00fc r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the r\u00fc the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the cu the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the cu the ru the ru the ru the ru the ru the cu the ru the ru the ru the ru the ru the ru the ru the cu the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the ru the cu the ru the ru the ru the ru the ru the ru the ru the ru the cu the ru the ru the ru the ru the ru the cu the ru the ru the ru the r"}], "references": [{"title": "MiniSAT BCD and abcdSAT: solvers based on blocked clause decomposition, in Proceedings of the SAT Competition", "author": ["J.C. Chen"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Fast Blocked Clause Decomposition with High Quality, 2015", "author": ["J.C. Chen"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Improving SAT Solvers via Blocked Clause Decomposition, 2016", "author": ["J.C. Chen"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}, {"title": "bit-encoding phase selection strategy for satisfiability solvers,in Proceedings of Theory and Applications of Models of Computation (TAMC\u201914)", "author": ["J.C. Chen:A"], "venue": "ser. LNCS 8402,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Glue lgl split and GlueSplit clasp with a Split and Merging Strategy, in Proceedings of the SAT Competition", "author": ["J.C. Chen"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "Glucose 2.3 in the sat 2013 competition,in", "author": ["G. Audemard", "L. Simon"], "venue": "Proceedings of the SAT Competition", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Simon:Predicting learnt clauses quality in modern sat solvers", "author": ["L.G. Audemard"], "venue": "in proceedings of IJCAI,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2009}, {"title": "Sa\u0131\u0308s:On freezing and reactivating learnt clauses", "author": ["G. Audemard", "J.M. Lagniez", "L.B. Mazure"], "venue": "Proceedings of SAT 2011, ser. LNCS,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "Chawan: A comparison of page replacement algorithms", "author": ["Amit S. Chavan", "Kartik R. Nayak", "Keval D. Vora", "Manish D. Purohit", "Pramila M"], "venue": "IACSIT, vol.3,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2011}, {"title": "Algorithm 63 (PARTITION), Algorithm 64 (QUICKSORT) and Algorithm 65 (FIND)", "author": ["C. Hoare"], "venue": "Communications of the ACM", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1961}, {"title": "MiniSat HACK 999ED, MiniSat HACK 1430ED, and SWDiA5BY", "author": ["Oh"], "venue": "Proceedings of the SAT Competition", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Building a hybrid sat solver via conflict-driven, look-ahead and xor reasoning techniques,in", "author": ["J.C. Chen"], "venue": "Proceedings of SAT 2009, ser. LNCS,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2009}], "referenceMentions": [{"referenceID": 0, "context": "The abcdSAT solver submitted to the SAT Competition 2016 is the improved version of abcdSAT 2015 [1], which are built on the top of Glucose 2.", "startOffset": 97, "endOffset": 100}, {"referenceID": 5, "context": "3 [6], [7].", "startOffset": 2, "endOffset": 5}, {"referenceID": 6, "context": "3 [6], [7].", "startOffset": 7, "endOffset": 10}, {"referenceID": 1, "context": "The main techniques use by the three versions include at-least-one recently used strategy, learnt clause database approximation reduction, recursive splitting solving, decision variable selection based on blocked clause decomposition [2], [3], bit-encoding phase selection [4], simplification such as lifting, probing, distillation, elimination, hyper binary resolution etc.", "startOffset": 234, "endOffset": 237}, {"referenceID": 2, "context": "The main techniques use by the three versions include at-least-one recently used strategy, learnt clause database approximation reduction, recursive splitting solving, decision variable selection based on blocked clause decomposition [2], [3], bit-encoding phase selection [4], simplification such as lifting, probing, distillation, elimination, hyper binary resolution etc.", "startOffset": 239, "endOffset": 242}, {"referenceID": 3, "context": "The main techniques use by the three versions include at-least-one recently used strategy, learnt clause database approximation reduction, recursive splitting solving, decision variable selection based on blocked clause decomposition [2], [3], bit-encoding phase selection [4], simplification such as lifting, probing, distillation, elimination, hyper binary resolution etc.", "startOffset": 273, "endOffset": 276}, {"referenceID": 8, "context": "For example, Least Recently Used (LRU), Most Recently Used (MRU), Pseudo-LRU (PLRU), Least-Frequently Used (LFU), Second Chance FIFO, Random Replacement (RR), Not Recently Used (NRU) [9] etc.", "startOffset": 183, "endOffset": 186}, {"referenceID": 7, "context": "Our At-Least-One Recently Used (ALORU) algorithm is similar to NRU page replacement algorithm, but different from the clause freezing mechanism proposed by Audemard et al [8].", "startOffset": 171, "endOffset": 174}, {"referenceID": 6, "context": "When a conflict clause (called also learnt clause) is generated, its LBD (Literal Block Distance, for its definition, see [7]) is usually set to the number of different decision levels involved in it.", "startOffset": 122, "endOffset": 125}, {"referenceID": 9, "context": "Here we choose QUICKSELECT or Hoare\u2019s FIND algorithm [10] to find the k-th item.", "startOffset": 53, "endOffset": 57}, {"referenceID": 10, "context": "Like SWDiA5BY [11], glue alt classifies also learnt clauses into two categories: core and local.", "startOffset": 14, "endOffset": 18}, {"referenceID": 11, "context": "Procedure GetBranchVariable selects a branch variable according to the rule given in [12].", "startOffset": 85, "endOffset": 89}, {"referenceID": 4, "context": "When the average LBD score of an instance to be solved is small, say less than 16, this version uses splitting and merging (reconstructing) strategy described in [5], rather than recursive splitting solving strategy mentioned above.", "startOffset": 162, "endOffset": 165}], "year": 2016, "abstractText": "We improve further the 2015 version of abcdSAT by various heuristics such as at-least-one recently used strategy, learnt clause database approximation reduction etc. Based on the requirement of different tracks at the SAT Competition 2016, we develop three versions of abcdSAT: drup, inc and lim, which participate in the competition of main (agile), incremental library and no-limit track, respectively.", "creator": "LaTeX with hyperref package"}}}