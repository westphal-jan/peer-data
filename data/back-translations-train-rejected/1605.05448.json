{"id": "1605.05448", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-May-2016", "title": "The Bees Algorithm for the Vehicle Routing Problem", "abstract": "In this thesis we present a new algorithm for the Vehicle Routing Problem called the Enhanced Bees Algorithm. It is adapted from a fairly recent algorithm, the Bees Algorithm, which was developed for continuous optimisation problems. We show that the results obtained by the Enhanced Bees Algorithm are competitive with the best meta-heuristics available for the Vehicle Routing Problem (within 0.5% of the optimal solution for common benchmark problems). We show that the algorithm has good runtime performance, producing results within 2% of the optimal solution within 60 seconds, making it suitable for use within real world dispatch scenarios.", "histories": [["v1", "Wed, 18 May 2016 05:53:44 GMT  (1214kb,D)", "http://arxiv.org/abs/1605.05448v1", null]], "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["aish fenton"], "accepted": false, "id": "1605.05448"}, "pdf": {"name": "1605.05448.pdf", "metadata": {"source": "META", "title": "The Bees Algorithm for the Vehicle Routing Problem", "authors": ["Aish Fenton"], "emails": [], "sections": [{"heading": null, "text": "The Bees Algorithm for the Vehicle Routing ProbleAish FentonDepartment of Computer Science University of AucklandAuckland, New Zealandar Xiv: 160 5.05 448v 1 [cs.N E] 18 May 201 6Colophon: Typeset in LATEX using typefaces Computer Modern. The cover image was kindly provided by [1].PrefaceThis MSc. dissertation was written by Aish Fenton at the University of Auckland, Department of Computer Science, and supervised by Dr. Michael Dinneen. The work in this dissertation is the result of a research project sponsored by New Zealand Trade and Enterprise (NZTE) for vWorkApp Inc. to explore route optimization of vehicles for use within their software product."}, {"heading": "Acknowledgements", "text": "I would like to thank my partner in crime, Anna Jobsis, for her encouragement, persuasion, threat, bribery, dishwashing, evidence reading, recrimination, grammar police, consolation.... I would also like to thank my mother and father for their encouragement and for always making me feel that higher education was within reach. I would like to thank Steve Taylor and Steve Harding for maintaining the fortress at work despite my absence while I was away to do this work. I would also like to thank my team, Jono, Rash, Elena, Bob, Marcus, Yuri and Robin for being on the ball (as always) despite my absence. I would like to thank Brendon Petrich and vWorkApp Inc. for giving me time away from work and helping me do this work. Finally, I owe Dr. Michael Dinneen, my supervisor, a big thank you for sticking with me, even though he must have doubted that I ever had a solution."}, {"heading": "1 Introduction 5", "text": "1.1 Table of contents....................................."}, {"heading": "2 Background 7", "text}, {"heading": "3 Problem Definition 35", "text": "3.1 Capacity problem with vehicle guidance.............. 353.2 Variants............................... 373.2.1 Multiple depot vehicle routing problem............ 373.2.2 Vehicle routing problem with time windows........................... 373.2.3 Pick-up and delivery problem..........................."}, {"heading": "4 Algorithm 39", "text": "..........................................................................................................................."}, {"heading": "5 Results 49", "text": "......................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................"}, {"heading": "6 CHAPTER 1. INTRODUCTION", "text": "Due to its belonging to the family of NP hard problems, it is very unlikely that there is an algorithm with adequate runtime that can solve the problem accurately. Therefore, heuristic approaches must be developed to solve all problems except the smallest size.Many methods have been proposed to solve the Vehicle Routing Problem. In this thesis, we are developing a new meta-heuristic algorithm, which we call the Enhanced Bees Algorithm. We are adapting this algorithm from another relatively young algorithm called the Bees Algorithm, which has been developed to solve continuous optimization problems.We show that the results obtained with the Enhanced Bees Algorithm compete with the best modern meta heuristics available for the Vehicle Routing Problem. In addition, the algorithm has a good runtime performance and delivers results within 2% of the optimal solution within 60 seconds. This makes the Enhanced Bees Algorithm suitable for use in real shipping scenarios, which often has an optimal waiting time of only a few hours or a few minutes."}, {"heading": "1.1 Content Outline", "text": "We begin by providing a summary of the problem, as well as providing the material necessary for understanding the Enhanced Bees algorithm. In particular, we will briefly describe the problems that have occurred in the literature. In Chapter 4, we will find a detailed description of the Enhanced Bees algorithm and its effects."}, {"heading": "8 CHAPTER 2. BACKGROUND", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Overview", "text": "The Vehicle Routing Problem (commonly abbreviated as VRP) describes the problem of allocating and ordering work for a limited number of resources, so that the costs of performing this work are minimized. Often, the context used is that of a fleet of vehicles delivering goods to a number of customers, although the problem can equally be applied in many different industries and scenarios (including non-logistical scenarios, such as microchip layout). The aim is to divide deliveries between vehicles and define a sequence in which each vehicle will take over its work, so that the distance covered by the vehicles is minimized and all pre-defined restrictions are met. In the classic version of the VRP, the restrictions to be met are: 1. Each vehicle must start and finish its route at the depot. 2. All goods must be delivered. 3. Goods can only be dropped for a single time and by a single vehicle."}, {"heading": "2.1. OVERVIEW 9", "text": "A solution for a given VRP instance can be presented as a family of routes designated by S. Each route itself is a sequence of customer visits carried out by a single vehicle, designated by R = [v1, v2,.., vk] so that vi-V and v1, vk = vd. Each customer has a demand di, i-C, and q is the maximum demand permitted for each route (i.e. its maximum capacity).The cost of the solution and the value we want to minimize are given by the following formula: \"R-S-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V\" (Ri \u2212 vd), \"Ri-S-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V-V"}, {"heading": "10 CHAPTER 2. BACKGROUND", "text": "A number of related problems emerge from the VRP. These problems model other constraints that occur in real-world applications of the VRP. Classical problems include: VRP with time windows (VRPTW), which introduces a time window restriction for each customer within which the vehicle must arrive; VRP with multiple depots (MDVRP), where the vehicles are delivered from multiple points of departure; and the Pick-up and Delivery problem (PDP), where the goods are both picked up and delivered along the route (as a courier would do)."}, {"heading": "2.1.1 TSP Introduction and History", "text": "The VRP is a combination of two problems, which in themselves are already combinatingly difficult: the problem of the moving salesman (more precisely the problem of the moving salesman) and the problem of waste packaging. The problem of the moving salesman (TSP) can be informally defined as follows: if you specify n points on a map, you specify a path through the n points, so that each point is used only once and the total distance covered is minimized. The name of the problem, the moving salesman, comes from the classic example of the problem from the real world. A salesman is sent on a journey to visit n cities. He must select the order in which he visits the cities, so that he travels the smallest distance. Although the problem sounds easily solvable, in reality it is NP-hard. The most well-known exact algorithms for solving the TSP still require a running time of O (2n). Karp's famous paper, reducibility under comatorial problems, the whole explanation of the 1972 NP problem, is a Hamilton theory."}, {"heading": "2.1. OVERVIEW 11", "text": "One formulation is to find the shortest route for a vendor starting from Washington, visiting all state capitals, and then returning to Washington. More generally, to find the shortest closed curve that contains n predetermined points in the plan. An early result was provided by Dantzig, Fulkerson, and Johnson [13]. Their paper provided an exact method of solving a problem of 49 cities, for the time a large number of cities. Their algorithm used the cutting plane method to provide an exact solution.This approach inspired many subsequent approaches, and is still the foundation of algorithms that attempt to provide an exact solution.A generalization of the TSP is the Multiple Traveling Salesman Problem (MTSP), in which multiple tours are constructed (i.e. multiple vendors can be used to visit the cities).The pure MTSP can be trivially turned into a TSP, by directly connecting an additional problem with an additional P."}, {"heading": "12 CHAPTER 2. BACKGROUND", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.2 Exact Methods", "text": "Following Laporte and Nobert's study [29], we classify exact methods for the VRP into three families: Direct Tree Search Methods, Dynamic Programming and Integer Linear Programming. The first classic Direct Tree Search results date back to Christolds and Ellison. Their 1969 paper provided the first branch and bound algorithm for accurately solving the problems of the VRP [10]. Unfortunately, its time and storage requirements were large enough to solve problems of up to 13 customers; this result was later improved by Christolds in 1976 by using another branch model, which enabled him to solve the problems of the VRP [10] accurately. Unfortunately, its time and storage requirements were large enough to solve problems of up to 13 customers. Christolds improved this result in 1976 by using another branch model, which enabled him to solve the problems of the VRP for up to 31 customers. Christofides, Mingozzi and Toth [11] provide a lower time-bound method to the RP, which is sufficient to provide the speed of the search tree."}, {"heading": "2.3. CLASSIC HEURISTICS 13", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.3 Classic Heuristics", "text": "In this section we will discuss the classical heuristic methods developed for the VRP. These methods are not a guarantee of finding the best answer in the world, but are aimed at achieving approximately optimal solutions using algorithms with fast runtimes that are able to scale to large problem cases. Classical heuristics for the VRP can be divided into three families: constructive heuristics; two-phase heuristics, which in turn can be divided into two subfamilies, clusters first and then route and route first and then cluster; and finally improvement methods."}, {"heading": "2.3.1 Constructive Heuristics", "text": "Constructive heuristics builds a solution from the ground up. They typically offer a recipe for building each route so as to minimize the total cost of all routes. A trivial but intuitive constructive heuristics is the closest method, in which routes are built sequentially and at each step the customer who comes closest to the last routed customer is selected, which continues until the route reaches its maximum capacity, at which point a new route is started. In practice, the closest algorithm tends to produce poor results and is rarely used. An early and influential result was given by Clarke and Wright in their 1964 paper. In their paper, they present a heuristic extension of Dantzig and Ramser's earlier work, which has since become known as Clarke Wright Savings heuristically."}, {"heading": "2.3. CLASSIC HEURISTICS 15", "text": "If merging is permissible, we merge the routes Ri, Rj in such a way that R \u2032 = [v0,.., i, j,.., vk]. In the parallel version, the solution for the loop is repeated until no more feasible savings are merged. Clark Write Savings heuristic method was used to solve problems of up to 1000 customers with results that often lie within 10% of the optimal solution, using only 180 seconds of runtime. [52] The parallel version of the Clark Write Savings algorithm exceeds the sequential version in most cases [30] and is typically the only one method. The heuristic method has proven to be surprisingly adaptable and has been extended to deal with more specific vehicle routing problems where additional goals and limitations have to be taken into account."}, {"heading": "2.3.2 Two-phase Heuristics", "text": "s start with the cluster, the second subfamily of the route. One of the basic algorithms for this method is given to us by Gillett and Miller, who in 1974, in their paper [22], provided a new approach called the sweep algorithm, which popularized the two-phase approach, although a similar method was proposed by Wren in 1971 and then by Wren and Holliday in 1972. [54] This approach uses an initial cluster phase to group customers into a series of base routes, from where the routes are treated as separate TSP instances and optimized accordingly. Typically, the two-phase approach does not prescribe a method for solving the TSP and assumes that already developed TSP methods can be used."}, {"heading": "16 CHAPTER 2. BACKGROUND", "text": "The sweep method is surprisingly effective and has shown that it solves several benchmark VRP problems within 2% to 9% of the most common solutions [52].Fisher and Jaikumars \"1981 paper [17] builds on the two-phase approach by providing a more complex cluster method, instead solving a general assignment problem to form the clusters. One limitation of their method is that the amount of vehicle routes must be determined in advance. Their method often results in results that are 1% to 2% better than the results produced by the classic sweep algorithm [52].Christofides, Mingozzi and Toth expanded this approach in [11] and proposed a method that uses a truncated and bound technique (similar to the Exact Method of Christofides).At each step, it builds up a collection of candidate routes for a specific customer, i.e."}, {"heading": "2.3. CLASSIC HEURISTICS 17", "text": "is asymptotically optimal [23]."}, {"heading": "2.3.3 Iterative Improvement Heuristics", "text": "Iterative improvement methods follow an approach in which an initial candidate solution is iteratively improved by applying an operation that improves the candidate solution, typically in a small way, many thousands of times. The operations used are usually simple and change only a small part of the candidate solution, such as the position of an individual customer or an edge within the solution. The solution approach, which can be reached by the current candidate solution, S, using an operator op, is known as S's neighborhood. Typically, Iterative improvement heuristics can be used to select a new solution S by scanning the entire neighborhood of S for the best possible improvement. If no improvement can be found, the heuristic solution ends. The initial candidate solution (i.e. the starting point of the algorithm) can be randomly selected or selected using another heuristic solution S. Constructive heuristics are typically used to bring about an improvement."}, {"heading": "18 CHAPTER 2. BACKGROUND", "text": "There are a number of other operations suggested in the literature. Christofides and Eilon state in their work one of the earliest iterative improvement methods. [10] In the paper, they simply change to 2-opt to increase the number of edges removed from two to three - the operation is aptly called 3-opt. They found that their heuristic results are better than the 2-opt. In general, operations such as 3-opt remove the edges and then look for a more optimal recombination of the components O (ny), where the number of edges is removed. A profitable burden of research focuses on operations that reduce the amount of recombinations to be searched. Or-opt presents an operation that has become known as Or-opt [35]. Or-opt is a limited 3-opt. It seeks to shift all sets of 3 consecutive corners (the Or calls chains) so that an improvement is made."}, {"heading": "2.4 Meta-heuristics", "text": "Meta-heuristics is a broad collection of methods that make few or no assumptions about the nature of the problem to be solved. They provide a framework that makes it possible to model individual problems and \"integrate\" them into meta-heuristics. Typically, meta-heuristics takes an approach that first produces a candidate solution (or solutions) and then refines it iteratively towards the optimal solution. Intuitively, one can imagine that meta-heuristics searches the search space of a problem. Each iteration searches the neighborhood of the current candidate solution (s) in search of new candidate solutions that approach global optimism. One limitation of meta-heuristics is that it does not find an optimal (or even a good!) solution. Moreover, the theoretical foundations of what makes one meta-heuristics more effective than another are still badly underestimated in the coming years."}, {"heading": "2.4.1 Simulated Annealing", "text": "Simulated annealing is inspired by the annealing process used in metallurgy. The algorithm starts with a candidate solution (which can be randomly selected) and then moves to obvious solutions with a probability depending on the quality of the solution, and a global parameter T, which is reduced over the course of the algorithm. In classic implementations, the following formula is used to control the probability of a move: e \u2212 f (s \u00b2) \u2212 f (s) TWhere f (s) and f (s \u00b2) represent the solution quality of the current solution or the new solution. Similar to the metallurgy process, T represents the current temperature of the solution. Initially, T is set to a high value, freeing the algorithm from any local optima in which it might be trapped. It is then cooled down over the course of the algorithm, forcing the search to approach a solution."}, {"heading": "20 CHAPTER 2. BACKGROUND", "text": "One of the first simulated annealing results for the VRP was given by Robust, Daganzo and Souleyrette [44]. They defined the search neighborhood as all the solutions that can be gained from the current solution by applying one of two operations: moving part of a route to another location within the same route or exchanging customers between routes. They tested their solution on some large real-world cases with up to 500 customers. They reported some successes with their approach, but since their test cases were unique, no direct comparison is possible. Osman has given the most well-known simulated annealing results for the VRP [36]. His algorithm expands many areas of the basic Simulated Annealing approach. The method starts with the Clark and Wright algorithms to generate a starting point. It defines his neighborhood as all candidate solutions that can be achieved by an operator using such an exchange, which he calls heat exchange."}, {"heading": "2.4. META-HEURISTICS 21", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.4.2 Genetic Algorithms", "text": "In fact, they were the first evolutionarily inspired algorithm to be applied to combinatorial problems [39]. The basic operation of a genetic algorithm is as follows: Algorithm 2: Simple genetic algorithms generate the initial population while the termination condition is not met. Evaluate the fitness of each individual pair and produce the next generation. Mutates (optional) endIn a classical genetic algorithm, each candidate is encoded as a binary string (i.e., the candidate solution is not fulfilled."}, {"heading": "22 CHAPTER 2. BACKGROUND", "text": "The crossover operators are then designed to take into account the limitations of the VRP. Two crossover operators commonly used with combinatorial problems are the Order Crossover (OX) and the Edge Assembly Crossover (EAX). OX [34] works by selecting two intersections within each route; the sub-string between the two intersections is copied directly from the second parent to the offspring; likewise, the string outside the intersections is copied from the first parent to the offspring, but all duplicates are removed, potentially leaving a partial solution where not all customers have been routed; the partial solution is then repaired by inserting all unrouted customers into the child in the same order in which they appeared in the second section. Another common crossover operator is EAX. EAX was originally designed for the TSP, but was adapted by converting the cycles to the VRP by [32]."}, {"heading": "2.4. META-HEURISTICS 23", "text": "A well-known example of this approach was proposed in [7], where a customer order was encoded, and this order is then fed into an insertion euristics to create the actual candidate solutions.An influential result using genetic algorithms to solve the VRPTW is set out in [50] with its GIDEON algorithm. GIDEON uses an approach inspired by the sweep method (an overview of the sweep method is included in Section 2.3.2). It builds routes by moving a clockwise beam centered in the depot around the geographical space surrounding the customer's locations. Customers are collected into candidate routes based on a set of parameters refined by the Genetic Algorithm. GIDEON uses the Genetic Algorithm to develop the parameters used by the algorithm, rather than working directly on the problem."}, {"heading": "24 CHAPTER 2. BACKGROUND", "text": "More recently, however, there have been two promising applications of genetic algorithms to solve the VRP. Nagata [32] has adapted the EAX operator for use in the VRP. And Berger and Barkaoui have introduced a hybrid genetic algorithm called HGA-VRP in [6]. HGA-VRP adapts a design euristics for use as a crossover operator, the basic requirement being the selection of a set of routes from each parent that are close to each other. Customers are then removed from one parent and inserted into the second, using an operation inspired by Solomon's design euristics for VRPTW [48]. Both methods have achieved the best-known solution for a series of classic VRP benchmark instances by Christofides, Mingozzi and Toth [11] and are competitive with the best taboo search methods."}, {"heading": "2.4.3 Tabu Search", "text": "Tabu Search follows the general approach shared by many meta-heuristics; it iteratively improves a candidate solution by looking for improvements in the neighborhood of the current solution. Tabu Search starts with a candidate solution that can be generated randomly or using another heuristics. Unlike simulated annealing, the best improvement within the current neighborhood is always taken as the next step. This introduces the problem of cycling between candidate solutions. To overcome this taboo search introduces a list of solutions that are already investigated and prohibited as the next step (hence the name). The first instance in which Tabu Search is used for VRP is Willard [53]. Willard's approach took advantage of the fact that VRP instances can be converted into MTSP instances and solved. The algorithm uses a combination of simple vortex exchange and resettlement operations. Although opening the door for further research is not competitive, its results are not competitive with the best classical hayritics."}, {"heading": "2.4. META-HEURISTICS 25", "text": "The Toth and Vigo method has yielded many competitive results. Taillard has provided one of the most successful methods for solving the VRP in its taboo search method in [49]. Talliard's taboo search uses Or's \u03bb-Interchange as a neighborhood structure, borrowing two novel concepts from [20]: the use of a more complex taboo mechanism in which the duration (or number of iterations) for which a point is taboo is randomly selected; and a diversification strategy that penalizes key points that are frequently shifted without bringing about improvement. A new aspect of Taillard's algorithm is its breakdown of the problem into sub-problems. Each problem is divided into regions, with a simple segmentation of the region centered around the depot (Taillard also offers an alternative approach to problems where customers are not evenly distributed around the depot."}, {"heading": "2.4.4 Large Neighbourhood Search", "text": "Large Neighbourhood Search (commonly known as LNS) was recently proposed by Shaw as heuristics [47]. Large Neighbourhood Search is a form of heuristics known as Very Large Scale Neighbourhood Search (VLSN) 2. Very Large Scale Neighbourhood Search is based on a simple premise; rather than looking within a neighborhood for solutions that can be achieved through a single (and typically quite grainy) process like 2-opt, it may be worth considering a much broader neighborhood - a neighborhood of candidate solutions that can be achieved by applying many simultaneous changes to a candidate solution. What sets this heuristics apart from others is that the neighborhoods under consideration are typically exponentially large, making them often unfeasible for search. Therefore, much attention is paid to providing methods that can successfully traverse these neighborhoods. 2LNS is somewhat confusing the name, as it is not a competing species and it is a VN."}, {"heading": "26 CHAPTER 2. BACKGROUND", "text": "The basic procedure is as follows: Algorithm 3: Large Neighborhood Search = an initial solution while the termination condition is not met doxt = x destroy (xt) repair (xt) if it is better than the current solution thenx = xt ending Result: xIt starts by selecting a starting position. This can be done randomly or by using another heuristic one. Then, for each iteration of the algorithm, a new position is generated by destroying part of the candidate solution and then repairing it. If the new solution is better than the current solution, then it is selected as a new position. This continues until the termination conditions are met. Large Neighbourhood Search can be considered as a type of very large scale solution that is Neighbourhood Search because in each iteration the number of adjacent solutions is exponentially large based on the number of items removed."}, {"heading": "2.5. SWARM INTELLIGENCE 27", "text": "His results were immediately impressive and reached many of the best-known solutions to the problems of Christofides, Mingozzi and Toth [11]. Recently, Ropke proposed an extension of the basic process of searching for large neighborhoods in [45]. His method adds the concept of a collection of destruction and repair functions rather than using a single pair. Which function to use is selected for each iteration based on their previous performance. In this way, the algorithm adapts to use the most effective function for searching in the neighborhood. Ropke uses several destruction functions, using a simple random removal heuristic, Shaw's removal heuristic, and a worst removal heuristic, which removes the most expensive customers (in terms of this customer's contribution to the total cost of the route). Ropke uses several destructive functions to destroy the neighborhood."}, {"heading": "2.5 Swarm Intelligence", "text": "A more recent field of research is the production of heuristics that mimic certain aspects of swarm behavior; the most well-known heuristics in this family are particle swarm optimization (PSO) and ant colony optimization (ACO). Swarm intelligence in real life is of interest to combinatorial optimization researchers because it demonstrates a form of emerging intelligence in which individuals with limited thinking and simple behavior are still able to find optimal solutions to complex resource allocation problems."}, {"heading": "28 CHAPTER 2. BACKGROUND", "text": "In the context of combinatorial optimization, these behaviors can be imitated and exploited. Algorithms that make use of this approach produce their solutions by simulating the behavior of multiple actors, who themselves typically perform only rudimentary operations. A feature of this class of algorithms is the ease with which they can be parallelized, making them easier to adapt to major problems. Swarm intelligence algorithms have been used to solve a number of problems. Here, we look at two examples, ant colony optimization and the bee algorithm on which this thesis is based."}, {"heading": "2.5.1 Ant Colony Optimisation", "text": "The optimization of the ant colony is inspired by the way ants look for food and communicate promising locations back into their colony. In real life, ants first look for food, and once they have found a food source, they return to the colony, returning a pheromone trail. Other ants who then encounter the pheromone trail follow it with a probability depending on how strong (and therefore how old) the pheromone trail is. If they follow it and find food, they then return to the colony, strengthening the pheromone trail as well. The strength of the pheromone trail decreases over time, meaning that younger and shorter pheromone tracks, which do not take so long to traverse, attract more ants. Ant colony optimization mimics this behavior on a graph by simulating ants marching along a graph representing the problem to be solved."}, {"heading": "2.5. SWARM INTELLIGENCE 29", "text": "The algorithm is as follows: Algorithm 4: Ant Colony Optimization Data: A graph representing the problem while the termination condition is not met dopositionAnts () while the solution being built is domarchAnts () endupdatePheromones () endAt each iteration of the algorithm, the ants are randomly positioned within the graph. The ants are then stochastically marched through the graph until they have completed a candidate solution (in the case of a TSP this would be a tour of all vertices). At each stage of the march, each ant selects its next edge based on the following probability formula: pkij = [zepij] [zepij] [zeptij] [zeptij] [zeptij] [zeptij] [pkij] [pkij] is the probability that the ant will cross the edge (i, j < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < < the set of < < <"}, {"heading": "30 CHAPTER 2. BACKGROUND", "text": "This ensures that shorter distances will result in more pheromones being deposited. As an example of the use of Ant Colony Optimization in combinatorial problems, we will show how it can be applied to the TSP. We will build a weighted chart representing each city to visit and (i, j) the cost of travel between each city. Then, at each step of the iteration, we will ensure that the following limitations are met: \u2022 Each city is visited at most once. \u2022 We specify that every place must be the same as we are. When the Ant Colony Optimiser starts, it will position each Ant Colony Optimiser on a randomly selected vertex (i.e. city) within the diagram. Each step of an ant's march will then build a tour of the cities that an ant has completed a tour that serves as a candidate for the TSP solution. Initially, the solutions will be of low quality, so that we will use the length of the tours to ensure that the ants are applied on a tour."}, {"heading": "2.5.2 Bees Algorithm", "text": "Over the past decade, and inspired by the success of ant colony optimization, a number of algorithms have been proposed aimed at exploiting the collective behavior of bees, including: colony optimization, which has been applied to many combinatorial problems; marriage in honey bee optimization (MBO), which has been used to solve meaningful satisfaction problems; the hive, which has been used for scheduling problems; the Virtual Bee Algorithm (VBA), which has been used for functional optimization problems; the honey bee pair optimization (HBMO), which has been used for cluster analysis; and finally, the bee algorithm at the center of this thesis. See [31] for a bibliography and a high-level overview of many of these algorithms. The bee algorithm was first proposed in the year [38] and is inspired by the forestypical behavior of honey bees."}, {"heading": "32 CHAPTER 2. BACKGROUND", "text": "Informally, the algorithm can be described as follows: bees are first sent to random locations, and the suitability of each site is then calculated. A part of the bees is assigned to the sites with the highest fitness scores, where each bee searches for the local neighborhood of the site to improve the suitability of the site. The rest of the bees are sent on scouting for new sites, or in other words, they are set to a new random location. This process repeats until one of the sites reaches a satisfactory fitness level - or a predetermined termination condition met.More formally, the algorithm works as follows: Algorithm 5: Bee Algorithms Algorithms Algorithms B = {b1, b2,.., bn} setToRandomPosition (B), while the termination condition is not met dosortByFitness (B) E = {b1, b2,."}, {"heading": "2.5. SWARM INTELLIGENCE 33", "text": "In practice, this means that nep and nsp will examine number of positions within the neighborhood of E and N. These steps are typically done stochastically, but it is possible that a deterministic approach can also be used. The advantage that the bee algorithm promises over other meta-heuristics is its ability to escape local optimism and its ability to navigate addiction topologies in rough terrain (as in Figure 2.14), which is achieved by scanning the search space for the most promising sites and then, by allocating more resources for exploring these sites, using the VVP as a holistic literature (as in Figure 2.14)."}, {"heading": "3.1 Capacitated Vehicle Routing Problem", "text": "We formulate the CVRP here as an integer linear programming problem. Although it is possible to solve the CVRP with the help of an integer programmer, this is unusual in practice, since the best solvers are only able to solve small problem sizes. We provide this formulation because it has become the lingua franca of combinatorial problems. We start the formation by specifying the variables used in it. We present the CVRP on a weighted diagram, G = (V, E). The vertices of the diagram V represent all locations that can be visited, including each customer location and the location of the depot. For simplicity, we let vd denote the vertex that represents the depot, and we denote the amount of customers with C = {1, 2,.., n}. Thus, the quantity of vertices is given by V = vd, C. We now leave the edge set to correspond to the E connections between the customer and the depot."}, {"heading": "36 CHAPTER 3. PROBLEM DEFINITION", "text": "We use K to denote the number of vehicles used to visit customers, so that the maximum number of vehicles is allowed. We define q and t as the maximum capacity and working time allowed for a vehicle. Demand (i.e. the required capacity) for each customer is denoted by the vehicle K, in other words, k travels between customers i, j and C. Where this applies, we let Xkij = 1 and X k ij = 0 specify where it is not applicable. We use ui, i and C as a sequence indicating the position of the customer i within the route of the vehicle it is visiting. Xkij is now able to define the problem as follows: Minimize k and K = 0 where it is not applicable."}, {"heading": "3.2. VARIANTS 37", "text": "The restrictions (3,5) and (3,6) ensure that each vehicle starts at the depot and ends at the depot, and that they do so exactly once. Restrictions (3,7) and restrictions (3,8) are flow restrictions that ensure that the number of vehicles entering a customer corresponds to the number of vehicles leaving the depot, and that sections are eliminated. Finally, restrictions (3,9) ensure the integrity conditions.Restrictions (3,4) that force a maximum working time of the vehicle, t, are often not included in the traditional CVRP formation, but here as they are in the problem cases we use as benchmarks in Chapter 5."}, {"heading": "3.2 Variants", "text": "In this section we give an overview of the common variations of the VRP used. These variations have emerged from real vehicle guidance scenarios in which the restrictions are often more involved than modelled in the CVRP."}, {"heading": "3.2.1 Multiple Depot Vehicle Routing Problem", "text": "A simple extension of the CVRP is to allow each vehicle to start from a different depot. Part of the problem is now the allocation of customers to the depot, which in itself is a difficult combinatorial problem. To make this possible, the CVRP formation can be loosened slightly. There are two variants of the problem: one forces each vehicle to end at the same depot from which it originates, and the other allows the vehicles to start and end at each depot as long as the same number of vehicles returns to the depot that it left."}, {"heading": "3.2.2 Vehicle Routing with Time Windows", "text": "The Vehicle Routing Problem with Time Windows (VRPTW) adds to the classic VRP the additional restriction that each customer must be visited within a time frame specified by the customer. Formally, with the VRPTW, each customer also has a corresponding time window [ai, bi] in which the goods must be delivered. The vehicle may arrive before the start time, ai. In this case, however, the vehicle must wait until the time ai is added that is required to complete the route. However, it is not permitted that work after the start time bi. An additional restriction is added in the formation of the CVRP to ensure that the time window restrictions are respected: ai \u2264 Ski \u2264 bi, where the decision variable Ski indicates the time in which each vehicle k-K arrives at the customer i-V."}, {"heading": "38 CHAPTER 3. PROBLEM DEFINITION", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.2.3 Pickup and Delivery Problem", "text": "The Pick-up and Delivery Problem (PDP) generalizes the VRP. In this problem, goods are both picked up and delivered by the vehicle along its route. Work of the vehicle now comes in two flavors: Pick-up jobs, P = {p1, p2,.., and Delivery jobs, D = {d1, d2,.., dl}, so the CVRP formation is supplemented by additional restrictions to ensure that: 1. Pick-up and Delivery jobs are completed by the same vehicle, which is pi-Rk, where Rk represents a sequence of jobs that are k.2. The Pick Job, pi, appears before its corresponding delivery job, di, in the sequence of jobs executed by a vehicle. 3. Vehicle capacity is not exceeded as goods are loaded and unloaded."}, {"heading": "4.1 Objectives", "text": "The Enhanced Bees Algorithm was designed for use in a commercial environment and was developed as part of a scholarship for vWorkApp Inc. \"s scheduling and shipping software. Accordingly, its design pursued different goals (e.g. runtime performance) than those normally sought in the VRP literature. The goals of the algorithm in the order of priority are as follows: 1. Ensure that all limitations are met, in particular that the maximum runtime of the route is adhered.2. Have good runtime performance. It is more desirable that the algorithm delivers a reasonable quality result quickly (within 60 seconds) than that it delivers a better one but requires a longer turnaround time. In particular, if the algorithm could achieve 5% of the optimum value within 60 seconds, this would be sufficient. 3. Achieve good quality results. Regardless of Goal 2, the results produced must be close to the global optimum 39."}, {"heading": "40 CHAPTER 4. ALGORITHM", "text": "4. to have a design that is suitable for parallelization and able to use the additional processing cores available within modern hardware."}, {"heading": "4.2 Problem Representation", "text": "The Enhanced Bees Algorithm presents the problem in a direct and straightforward way. It directly manipulates a candidate solution S, where S is a series of routes R-S, and each route contains an ordered sequence of customers starting and ending at the vertex of the depot. More general representations are sometimes used for meta-heuristics, as is commonly seen with genetic algorithms, as they allow the algorithm to be easily adapted to other combinatorial problems, but this often comes with additional costs of complexity and poorer outcomes1. This algorithm is specifically designed for solving instances of the VRP, so that a direct representation has been chosen. The algorithm uses a fitness concept common in many meta-heuristics to describe the cost of the solution.The fitness function f () contains terms for the distance (i.e. cost) of the solution and penalties for breaking capacity and maximum route constraints."}, {"heading": "4.3. ENHANCED BEES ALGORITHM 41", "text": "Specifically, f () is defined as follows: c (R) = \u2211 i-R ci, i + 1 (4.1) d (R) = max (\u2211 i-R di-q, 0) (4.2) t (R) = max (\u2211 i-R ti + c (R) \u2212 t, 0) (4.3) f (S) = \u2211 R-S (\u03b1c (R) + \u03b2d (R) + \u03b3c (R))) (4.4) Function c (R) calculates the cost (i.e. the distance) of a given route, and Function d (R) calculates the overcapacity of the given route. Overcapacity is how much greater the sum of the requirements of the route is, di, i-R, than the specified maximum allowable capacity q. Likewise, Function t (R) calculates the overtime of a given route. The duration of a route is calculated as the sum of the service times of its customer, ti, i-R, and its travel time."}, {"heading": "4.3 Enhanced Bees Algorithm", "text": "Our algorithm is based on the bee algorithm (see Section 2.5.2 for an overview of the standard bee algorithm).The Enhanced Bees algorithm makes some changes to adapt the bee algorithm to the VRP range. An interesting aspect of the bee algorithm is that it covers a wide search area, minimizing the risk of getting stuck in a local optimum. It achieves this by examining many areas of the search area randomly (or in bee algorithm linguistic usage, \"scouting\") during its entire run. However, this approach is not suitable for hard combinatorial problems where a newly constructed 2-Specific is used: cij = \u221a (xj \u2212 xi) 2 + (yj \u2212 yi) 2 3Specifically we use: cij = (xj \u2212 xi) + (yj \u2212 yi)"}, {"heading": "42 CHAPTER 4. ALGORITHM", "text": "The solution, let alone a randomly generated one, is often far from optimal (for example, Clark Wright Savings heuristics still produces solutions that are up to 15% away from the global optimum and would require many operations to approach the optimum).We have customized the Bees algorithm in such a way that many of its unique properties, such as its relative robustness, are maintained while it works well with hard combinatorial problems such as the VRP. The advanced Bees algorithm can be summarized at a high level as follows: Algorithm 6: Advanced Bees AlgorithmS = seedSites (), while the termination condition is not fulfilled dofor si \u0441S do (si, d) when i < thenremoveWorstSite ends The algorithm maintains a collection of sites S, and each site si \u0441S maintains a collection of bees, bi. Each bee is a proxy for the problem we are trying to solve, in this case the Site will represent each Si."}, {"heading": "4.3. ENHANCED BEES ALGORITHM 43", "text": "The general fitness is returned as the answer. In the next section, we will take a closer look at every aspect of the algorithm."}, {"heading": "4.3.1 Bee Movement", "text": "Each bee represents a candidate solution, S, so a valid beekeeping solution is any new candidate solution S that can be achieved within the neighborhood of S. The algorithm keeps a register of the current positions occupied by each bee. We use the current fitness, f (S), as a quick and easy representation of the current position of a bee 4. If a bee tries to occupy the same position as another bee (i.e. they share the same candidate solution), then the bee trying to occupy that position is forced to re-explore the neighborhood and find another position.4This obviously does not work in circumstances where there is a reasonable probability that two candidate solutions, Si and Sj, f (Sj)."}, {"heading": "44 CHAPTER 4. ALGORITHM", "text": "The enforcement of the requirement that each bee must occupy a unique position has two advantages: it forces diversification between bees and sites, thereby promoting a larger share of the search space to be explored; and it increases the likelihood of escaping a local optimum, since a bee trapped in the local optimum now forces the rest of the hive to explore alternative positions, a feature that has a similar intent and effect to the Taboo lists provided by Taboo Search.Another feature of the Enhanced Bees algorithm is the role that websites play in concentrating exploration on specific areas of the search space. Each page keeps a list of M = [S1,..., S] of the last best positions. Each Si-M is then used as a starting point for the bees of a site to explore them."}, {"heading": "4.3.2 Search Space Coverage", "text": "As already mentioned, one of the unique aspects of the bee algorithm is its ability to achieve robust results by probing a large area of the search area. However, this does not work well for hard combinatorial problems where it is not possible to quickly determine whether an area in the search area is promising or not. To overcome this limitation, we instead use an approach inspired by the use of a cooling plan through simulated annealing. Bees are initially evenly distributed among each si-S site, ensuring that each site is explored equally. Then, in each \u03bb period, we reduce the number of sites maintained so that S = S \u2212 sw, where sw is the site with the least fitness. We measure the fitness of each site based on the fitness of its best found position. This process continues until a single site is left. We demonstrate experimentally in Chapter 5 that this process improves the robustness of the algorithm and yields overall better results than the standard bee algorithm."}, {"heading": "4.4. SEARCH NEIGHBOURHOOD 45", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.4 Search Neighbourhood", "text": "The Enhanced Bees Algorithm does this by applying a Large Neighbourhood Search (LNS) operator to its candidate solution S. The LNS operator differs from the more common VRP operators in that it applies many changes to the candidate solution S in a single operation, thereby extending the neighborhood of S to exponentially many candidate solutions. In the destruction phase of the LNS, when used for the VRP, typically a portion of the customers is removed from the solution by selecting only those changes that are most likely to improve the solution. The destruction phase of the Enhanced Bees algorithm consists of two phases: a destruction phase and a repair phase. In the destruction phase of the LNS, typically a portion of the customers is removed from the solution. The destruction phase of the Enhanced Bees Algorithm uses two heuristics along these lines: a reasonably intelligent heuristics, which attempts to remove those customers who are less able to recombine in a particular situation."}, {"heading": "4.4.1 Destroy Heuristic", "text": "The Enhanced Bees algorithm uses two destructive heuristics: the first simply randomly selects l customers from a solution S and removes them from their routes; the second algorithm is slightly more complicated and is based on Shaw [47]. Shaw's removal euristics selects customers in such a way that there is a higher probability that customers who are related to each other will be removed. For our purposes, we define in context that for any two customers vi, vj, vj, V, then either vi, vj are geographically close to each other (i.e. cij is small), or they share an adjacent position within the same route, R = [..., vi, vj,...].The rationale for removing related customers is that they are most likely to be exchanged profitably with each other. Conversely, it is more likely that unrelated customers will be put back into the same positions from which they were removed."}, {"heading": "4.4.2 Repair Heuristic", "text": "The repair heuristics used by the Enhanced Bees algorithm randomly selects one of the remote customers vj and calculates the cost of re-inserting vj between each pair"}, {"heading": "46 CHAPTER 4. ALGORITHM", "text": "The reintroduction costs are calculated as follows: c \u0445 = cij + cjk \u2212 cik (4,6) Costs = c \u0445 + d (R) \u2212 d (R) + t (R) \u2212 t (R) (4,7) Where c \u0445 calculates the cost difference in terms of travel distance. R and R \u00b2 are defined as the route before or after insertion of the customer. And functions d (R) and t (R) are all defined as defined in section 4.2. The final costs are the sum of the additional travel distance and the two additional penalties if the route is now overcapacity or over its maximum duration. The algorithm selects the position with the lowest insertion costs for the customer, which is repeated until all customers are reinserted into the solution.The reason that the customers are reinserted in a random order that ensures the diversity of today's solutions."}, {"heading": "4.4.3 Neighbourhood Extent", "text": "The first technique we use allows the algorithm a certain flexibility in the choice of unfeasible solutions. As is evident from our formulation of candidates \"fitness values (see section 4.2), violations of the capacity and duration limitations of the problem are punished and not prohibited, allowing the bees to navigate through unfeasible solutions where other aspects of this solution are sufficiently attractive to offset the penalties. However, only feasible solutions may be counted as definitive solutions sent back by the algorithm. The second technique we use is the adjustment of the number of insertion positions considered as part of the repair heuristics. The number of insertion positions considered on both sides of the three closest customers increases with the age of the website. Formally, we let vi-V be the customer to be inserted."}, {"heading": "4.4. SEARCH NEIGHBOURHOOD 47", "text": "The age of a site is increased for each iteration, so that a site does not improve its currently best solution (as defined by the fitness of the solution, f (S)). Whenever a site improves its best known solution, the counter is reset so that ai = 0.We then use the following formula to increase how much of Lvi is considered the site ages.\u00b5 = | Lvi | min (ai k, 1) Where k is a constant that controls the rate at which the search area is expanded. As this process expands the number of insert positions that are considered heuristic by the repair, it also serves to expand the neighborhood of solutions surrounding a candidate solution. In this way, the algorithm also dynamically expands the size of a neighborhood surrounding a site, si S, when it gets stuck in a local optimization.48 CHAPTER Chapter 5results In this chapter we provide detailed results that we compare with the results of the site 11."}, {"heading": "5.1 Enhanced Bees Algorithm", "text": "The results shown in Figures 5.1, 5.2, 5.3 and 5.4 show the performance of the algorithm in two configurations = | The first configuration is optimized to achieve the best overall results, i.e. the minimum travel distance that meets all capacity and duration constraints. In this configuration, no consideration is given to the runtime performance of the algorithm, which is described as best in the following diagrams and tables; the results shown in Figures 5.1, 5.2, 5.3 and 5.4 are for the standard 14 VRP problem instances based on Christofides, Mingozzi and Toth [11] and have been referred to as Fast in the following diagrams and tables; the results shown in Figures 5.1, 5.2, 5.3 and 5.4 are referred to as Fast for the standard 14 VRP problem cases due to Christofides, Mingozzi and Toth [11]."}, {"heading": "5.2 Experiments", "text": "In this section we review the results obtained by implementing the standard bee algorithm and a local search for bees. The aim of these experiments is to prove that the algorithmic improvements proposed in this work actually produce better results than if we had used a standard bee algorithm. We also show that combining the bee algorithm with the local search for bees yields better results than if one of the two algorithms were used separately."}, {"heading": "5.2.1 Bees Algorithm versus Enhanced Bees Algorithm", "text": "We begin in Figures 5,5 and 5,6 by showing the results obtained by using the standard bee algorithm described by Pham et al. in [38], using the same problem cases as in Section 5.1, so that the results can be compared directly; the results shown in Figures 5,5 and 5,6 were obtained on a MacBook Pro 2.8 GHz Intel Core 2 Duo; the best result for each instance was selected from 10 runs of the algorithm; the algorithm was configured with the following parameters: 25 sites were used and the best 6 sites were selected as elite; each elite site had 3 bees recruited for the search; a further 6 sites were selected as non-elite and 2 bees were recruited for the search; the bees from the remaining 13 sites were randomly searched; the algorithm was left on each site for 60 seconds before it was terminated; infectious solutions (i.e. solutions over their duration or quantum) were searched."}, {"heading": "5.2.2 Large Neighbourhood Search", "text": "The LNS search used in this section is the same as that used by the Enhanced Bees Algorithm. It should be noted that there are more complex LNS algorithms than those used here, and that they would most likely yield better results than the LNS results presented here. However, we believe that one of the attractive features of the Enhanced Bees Algorithm is that it uses a relatively simple local search method. Furthermore, our goal in this experiment was to show that the limitations of our simple local method are offset by being embedded in a Bees algorithm. The results shown in Figures 5.7 and 5.8 were obtained on a MacBook Pro 2.8 GHz Intel Core 2 Duo. The best result for each problem area was selected from 10 runs."}, {"heading": "54 CHAPTER 5. RESULTS", "text": "The algorithm was initialized to an initial position generated by a simple insertion euristics. LNS heuristics were to destroy at each step between 0% and 80% (with an average of 40%) of the solution. Repair listed all customers when deciding on the best insertion point. Infectious solutions (i.e. solutions that exceed their capacity or duration constraints) could be traversed, but were rated at 0% of the most common solution."}, {"heading": "5.2.3 Summary", "text": "Table 5.2 provides a summary of the results of the bee algorithm and the LNS experiments, along with the results of our Enhanced Bees algorithm. The Bees algorithm is the worst of the three. This is not surprising since the Bees algorithm is designed to solve ongoing problems rather than solve discrete problems.5.2. EXPERIENCE 55Where the Bees algorithm has been used for discrete problems in literature, it has been adapted to integrate more complex local search techniques, just as the Enhanced Bees algorithm was here. It is also noteworthy that two of the problem cases have not produced workable solutions at all within the 60-second runtime threshold. We believe that the algorithm would most likely have found a workable solution given its longer runtime. However, one of the objectives of the Enhanced Bees algorithm is to reliably produce robust results."}, {"heading": "5.3 Comparison", "text": "Finally, in Table 5.3 and Figure 5.9, we offer a comparison of the Enhanced Bees algorithm with other known results from the literature. As can be seen in Table 5.3 and Figure 5.9, some of the best known results are due to Taillard's Tabu Search heuristics. It achieves 12 of the best known solutions from the set of 14 problems. By comparison, the Enhanced Bees algorithm finds 8 of the 14 best known solutions. However, the Enhanced Bees algorithm is still very competitive, and the runtime required to find one of the best known solutions is smaller than with many other meta-heuristics (although direct comparison is difficult, as many of the reported results were executed on significantly older hardware). Furthermore, the solutions of the Enhanced Bees algorithm are within 0.5% of the best known solutions 5.3. COMPARISON 57solutions, which means that the algorithm is very competitive with the best meta-heuristics available for the VRPCHER SUCHER 5."}, {"heading": "5.3. COMPARISON 59", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "60 CHAPTER 5. RESULTS", "text": "G iven is a 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"}, {"heading": "64 CHAPTER 6. CONCLUSION", "text": "In this case, we have a number of areas where research could be continued in this direction, including: \u2022 The introduction of a matrix process for generating new websites. An interesting extension of the Enhanced Bees algorithm would be to generate new websites. In our version of the Enhanced Bees algorithm, these websites are simply separated off. An alternative approach to a concept of genetic algorithms and taboo search would be to generate new websites."}, {"heading": "66 BIBLIOGRAPHY", "text": "[13] Dantzig, Fulkerson, and Johnson. Solution of a large-scale traveling salesman vehicle intelligence problem. Operations Research, (2): 393410, 1954. [14] G. B. Dantzig and J. H. Ramser. The truck dispatching problem. Management Science, 6 (1): 80-91, Oct, 1959. [15] Martin Desrochers, Jacques Desrosiers, and Marius Solomon. A new optimization algorithm for the vehicle routing problem with time windows. Operations Research, 40: 342-354, March 1992. [16] S. Eilon, C.D. Watson-Gandy, and N. Christofides. Distribution management: Mathematical modelling and practical analysis. Griffin (London), 1971. [17] M.L. Fisher and R. Jaikumar. A generalized assignment heuristic for solving the vrp. Networks, 11: 109-124, 1981."}, {"heading": "68 BIBLIOGRAPHY", "text": "[45] Stefan Ropke. Heuristic and Exact Algorithms for Vehicle Routing Problems. Doctoral Thesis, Department of Computer Science, University of Copenhagen (DIKU), 2005. [46] Alexander Schrijver. On the History of Combinatorial Optimization (until 1960). In Operations Research and Management. Elsevier, 2005. [47] P. Shaw. Using Constraint Programming and Local Search Methods to Solve Vehicle Routing Problems. Pages 417-431. 1998. [48] M. Solomon. Algorithms for Vehicle Routing and Planning Time Window Problems. Opera. Res., 35 (2): 254-265, 1987. [49] E. D. Taillard. Parallel iterative Search Methods for Vehicle Routing Problems. Networks, 23: 661-673, 1993. [50] S. R. Thangiah, K.E. Nygard, and P.L. Juell. Danielu."}], "references": [{"title": "Classical heuristics for the vehicle routing problem", "author": ["G. Laporte", "F. Semet"], "venue": "Technical report, Les Cahiers du Gerad,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 1999}, {"title": "Innovations in Swarm Intelligence, volume 248 of Studies in Computational Intelligence", "author": ["Chee Peng Lim", "Lakhmi C. Jain", "Satchidananda Dehuri", "editors"], "venue": null, "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2009}, {"title": "Edge assembly crossover for the capacitated vehicle routing problem", "author": ["Y. Nagata"], "venue": "EvoCOP, LNCS,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2007}, {"title": "A study of permutation crossover operators on the traveling salesman problem", "author": ["I.M Oliver", "D.J. Smith", "J.R.C Holland"], "venue": "Grefenstette\u2014Proceedings of the Second International Conference on Genetic Algorithms and Their Applications,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 1987}, {"title": "Traveling salesman-type combinatorial problems and their relation to the logistics of regional blood banking", "author": ["I Or"], "venue": "PhD thesis, Evanston, IL: Northwestern University,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 1976}, {"title": "Metastrategy simulated annealing and tabu search algorithm for the vehicle routing problem", "author": ["I.H. Osman"], "venue": "Annals of Operations Research,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 1993}, {"title": "The savings algorithm for the vehicle routing problem", "author": ["H. Paessens"], "venue": "European Journal of Operational Research,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 1988}, {"title": "The bees algorithm", "author": ["Pham", "Ghanbarzadeh", "Koc", "S. Otri", "S. Rahim", "M. Zaidi"], "venue": "Technical report,", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2005}, {"title": "A review of bio-inspired algorithms for vehicle routing. In Bio-inspired Algorithms for the Vehicle Routing Problem, pages", "author": ["Jean-Yves Potvin"], "venue": null, "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2009}, {"title": "Allocation of transportation units to alternative tripsa column generation scheme with out-of-kilter subproblems", "author": ["M.R. Rao", "S. Zionts"], "venue": "Operations Research,", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 1968}, {"title": "A savings-based ant system for the vehicle routing problem", "author": ["M. Reimann", "M. Stummer", "K. Doerner"], "venue": "Proceedings of the Genetic and Evolutionary Computation Conference,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2002}, {"title": "A fast composite heuristic for the symmetric traveling salesman problem", "author": ["J Renaud", "F F Boctor", "G Laporte"], "venue": "INFORMS Journal on Computing,", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 1996}, {"title": "On the hamiltonian game (a traveling salesman problem)", "author": ["J. Robinson"], "venue": "Research Memorandum RM-303,", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 1949}, {"title": "Implementing vehicle routing models", "author": ["F. Robuste", "C.F. Daganzo", "R. Souleyrette II"], "venue": "Transportation Research,", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 1990}, {"title": "Heuristic and exact algorithms for vehicle routing problems", "author": ["Stefan Ropke"], "venue": "PhD thesis, Department of Computer Science, University of Copenhagen (DIKU),", "citeRegEx": "45", "shortCiteRegEx": "45", "year": 2005}, {"title": "On the history of combinatorial optimization (till 1960)", "author": ["Alexander Schrijver"], "venue": "In Operations Research and Management. Elsevier,", "citeRegEx": "46", "shortCiteRegEx": "46", "year": 2005}, {"title": "Using constraint programming and local search methods to solve vehicle routing problems", "author": ["P. Shaw"], "venue": null, "citeRegEx": "47", "shortCiteRegEx": "47", "year": 1998}, {"title": "Algorithms for the vehicle routing and scheduling problems with time window constraints", "author": ["M.M. Solomon"], "venue": "Oper. Res.,", "citeRegEx": "48", "shortCiteRegEx": "48", "year": 1987}, {"title": "Parallel iterative search methods for vehicle routing problems", "author": ["E.D. Taillard"], "venue": "Networks, 23:661\u2013673,", "citeRegEx": "49", "shortCiteRegEx": "49", "year": 1993}, {"title": "Gideon: A genetic algorithm system for vehicle routing with time windows", "author": ["S.R. Thangiah", "K.E. Nygard", "P.L. Juell"], "venue": "Proceedings of 7th IEEE Conference on Artificial Intelligence Applications,", "citeRegEx": "50", "shortCiteRegEx": "50", "year": 1991}, {"title": "The granular tabu search (and its application to the vehicle routing problem)", "author": ["P. Toth", "D. Vigo"], "venue": "Technical report,", "citeRegEx": "51", "shortCiteRegEx": "51", "year": 1998}, {"title": "The vehicle routing problem", "author": ["Paolo Toth", "Daniele Vigo", "editors"], "venue": "Society for Industrial and Applied Mathematics,", "citeRegEx": "52", "shortCiteRegEx": "52", "year": 2001}, {"title": "Vehicle routing using r-optimal tabu search", "author": ["J.A.G. Willard"], "venue": "Master\u2019s thesis,", "citeRegEx": "53", "shortCiteRegEx": "53", "year": 1989}, {"title": "Computer scheduling of vehicles from one or more depots to a number of delivery points", "author": ["A. Wren", "A. Holliday"], "venue": "Operations Research Quarterly,", "citeRegEx": "54", "shortCiteRegEx": "54", "year": 1972}, {"title": "A computational modification to the savings method of vehicle scheduling", "author": ["P. Yellow"], "venue": "Operational Research Quarterly,", "citeRegEx": "55", "shortCiteRegEx": "55", "year": 1970}], "referenceMentions": [], "year": 2016, "abstractText": "In this thesis we present a new algorithm for the Vehicle Routing Problem called the Enhanced Bees Algorithm. It is adapted from a fairly recent algorithm, the Bees Algorithm, which was developed for continuous optimisation problems. We show that the results obtained by the Enhanced Bees Algorithm are competitive with the best meta-heuristics available for the Vehicle Routing Problem\u2014it is able to achieve results that are within 0.5% of the optimal solution on a commonly used set of test instances. We show that the algorithm has good runtime performance, producing results within 2% of the optimal solution within 60 seconds, making it suitable for use within real world dispatch scenarios. Additionally, we provide a short history of well known results from the literature along with a detailed description of the foundational methods developed to solve the Vehicle Routing Problem.", "creator": "LaTeX with hyperref package"}}}