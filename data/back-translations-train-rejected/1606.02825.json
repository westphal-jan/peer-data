{"id": "1606.02825", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Jun-2016", "title": "Arbitrage-Free Combinatorial Market Making via Integer Programming", "abstract": "We present a new combinatorial market maker that operates arbitrage-free combinatorial prediction markets specified by integer programs. Although the problem of arbitrage-free pricing, while maintaining a bound on the subsidy provided by the market maker, is #P-hard in the worst case, we posit that the typical case might be amenable to modern integer programming (IP) solvers. At the crux of our method is the Frank-Wolfe (conditional gradient) algorithm which is used to implement a Bregman projection aligned with the market maker's cost function, using an IP solver as an oracle. We demonstrate the tractability and improved accuracy of our approach on real-world prediction market data from combinatorial bets placed on the 2010 NCAA Men's Division I Basketball Tournament, where the outcome space is of size $2^{63}$. To our knowledge, this is the first implementation and empirical evaluation of an arbitrage-free combinatorial prediction market on this scale.", "histories": [["v1", "Thu, 9 Jun 2016 04:59:50 GMT  (86kb,D)", "https://arxiv.org/abs/1606.02825v1", null], ["v2", "Fri, 10 Jun 2016 13:48:30 GMT  (86kb,D)", "http://arxiv.org/abs/1606.02825v2", null]], "reviews": [], "SUBJECTS": "cs.GT cs.AI", "authors": ["christian kroer", "miroslav dud\\'ik", "s\\'ebastien lahaie", "sivaraman balakrishnan"], "accepted": false, "id": "1606.02825"}, "pdf": {"name": "1606.02825.pdf", "metadata": {"source": "CRF", "title": "Arbitrage-Free Combinatorial Market Making via Integer Programming", "authors": ["CHRISTIAN KROER", "SIVARAMAN BALAKRISHNAN"], "emails": ["ckroer@cs.cmu.edu;", "mdudik@microsoft.com;", "slahaie@microsoft.com;", "siva@stat."], "sections": [{"heading": null, "text": "Arbitrage-Free Combinatorial Market Making via Integer ProgramingCHRISTIAN KROER, Carnegie Mellon University MIROSLAV DUDI \"K, Microsoft Research SE\" BASTIEN LAHAIE, Microsoft Research SIVARAMAN BALAKRISHNAN, Carnegie Mellon University We present a new combinatorial market maker that operates arbitrage-free combinatorial prediction markets specified by integer programs. Although the problem of arbitrage-free pricing while tying to the subsidies provided by the market maker is at worst # P-hard, we assume that the typical case for modern Integer Programming (IP) solvers may be accessible. At the core of our method is the Frank Wolfe (conditional gradient) algorithm used to implement a Bregman projection aligned with the cost function of the market maker, using an IP solver as the oracle."}, {"heading": "1. INTRODUCTION", "text": "The market price can be interpreted as an aggregate belief and used as forecasting markets implemented by a centralized algorithm as a paid market maker [Abernan 2007; Spann and Skiera 2003], politics [Berg et al. 2008], and entertainment [Pennock et al. 2002]. In a forecasting market, dealers buy and sell securities with values that depend on some unknown future outcome. Thus, if the price of security is higher than the probability of winning Duke's Division I Basketball Tournament of 2010, a security that must be paid out 1 point to win the championship and 0 points otherwise. Thus, if the price of security is higher than 0.15, dealers who believed that Duke's probability of winning was greater than 0.15 pull incentives to purchase securities of security, and those who believed that there were lower incentives to sell. The market price can be interpreted as an aggregate belief and used as a forecasted market."}, {"heading": "2. PRELIMINARIES", "text": "We start with an overview of cost-based market making [Abernethy et al. 2011; Chen and Pennock 2007] and then give a high-level overview of our approach. As a running example, we take the NCAA 2010 Tournament: a single elimination tournament with 64 teams playing over 6 rounds, meaning that in each round half of the remaining teams are eliminated."}, {"heading": "2.1. Cost-based market making", "text": "Let us define a finite set of results that correspond to mutually exclusive and exhaustive world market prices. We are interested in eliciting expectations of random binary variables. (Thus, random variables are associated with a securities trade that is a contract that pays out a dollar when the result occurs. Therefore, the random variable number is also called a payout function. Binary securities pay out $1 when the event occurs and $0 otherwise. The vector (so the vector (i) i I buy is a bundle of securities issued by a central market maker; negative entries in short sales are permitted and correspond to short sales. A trader holding a bundle receives a (possibly negative) payout variant."}, {"heading": "2.2. Arbitrage, marginal polytope and Bregman projection", "text": "We look at two standard desiderates for cost-based markets. The first is limited loss ownership: There should be a constant that limits the final loss of the market maker once the result is determined, regardless of how many shares of each security are sold. The second is no-arbitrage ownership: there should be no trade that guarantees a positive gain, regardless of the outcome. Following Abernethy et al. [2011], we will next trace the limited losses back to the characteristics of the convex conjugate of C, and the verification equivalence between optimal arbitrage removal and Bregman projection. Given a cost function C, R denote its convex conjugation, R (\u00b5): Sup conjugation between the properties of the convex conjugate of RI [...], which is itself a convex function on RI, allows to take the value of the market. If the market is in a state that we believe is, and then believe in, and the trader [E] that [E] is..."}, {"heading": "2.3. The outline of Frank-Wolfe market maker (FWMM)", "text": "The mechanism proposed in this paper, called Frank-Wolfe Market Maker, alternates between processing transactions according to Cost C and eliminating arbitrage. In the step of eliminating arbitrage, our goal is to find the state \u03b8? from Proposition 2.4. We do this by solving the Bregman projection problem with the Frank Wolfe (FW) algorithm, which reduces the Bregman projection problem to a sequence of linear programs of the shape Mc \u00b7 \u00b5, for appropriately selected vectors c. Since the optimum of a linear program occurs at a vertex, reducing the Bregman projection problem to a sequence of linear programs results in an important simplification. Instead of specifying the marginal polytopes M, whose description can be exponentially large in the number of securities, it is sufficient to describe its vertebrae Z, which we can make via a compact set of linear inequalities together with integrations constraints."}, {"heading": "2.4. Linearly-constrained market maker (LCMM)", "text": "The FW algorithm is based on the ability to solve integer programs (IPs) that can take exponential time in the worst case. Therefore, our mechanism also includes a rapid (poly-time) partial arbitrage elimination, similar to Dud\u0131k et al.'s [2012] Linear-Confined Market Maker (LCMM). In LCMM, arbitrage is partially eliminated by taking into account a series of linear constraints that must be met by coherent prices. Namely, an LCMM takes as input a relaxation M, which is input by linear constraints called LCMM constraints."}, {"heading": "3. MARKET DESIGN", "text": "Next, we will show how the market design elements of Sec. 2 are to be established in real combinatorial markets, including the NCAA 2010 tournament, which is evaluated in Sec. 5, because we need to define: (i) the payout functionality, (ii) the cost functionC, (iii) the initial market condition \u03b8, (iv) the IP constraints that describe Z, and (v) the LCMM constraints that describe M-1. We also need to consider how the costs and market condition should be updated when the true outcome is gradually revealed over time. For example, the NCAA tournament has 63 games over a period of several weeks, and we want to set the prices of securities that have already been paid out."}, {"heading": "3.1. Compositional market design", "text": "We use a compositional market design along the lines of Dud\u0131 \u0301 k et al. [2013], which is a generalization of the sum of the LMSR structure of example 2.2. The market construction begins with a collection of random variables Xj: \"Xj,\" indexed by j \"J, whose marginal distributions we want to find out how the number of victories of Duke and Cornell in Example 2.2. The cost function is the sum of the LMSRs over the random variables Xj and Xj, and corresponds to the indicators of events Xj = x, i.e., empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirically, empirical, empirical, empirically, empirically, empirical, empirical, empirical, empirical, empirical, empirical, empirical, empirically, empirical, empirically, empirically, empirical, empirically, empirically, empirically, empirically, empirically,"}, {"heading": "3.2. Partial outcomes", "text": "In a typical combinatorial market, the results are revealed gradually over time. For example, in the NCAA tournament, 63 games are played over a period of several weeks. Thus, the market develops through a sequence of partial outcomes defined as: Definition 3.1. A subset \u03c3 I \u00b7 {0, 1} is referred to as a partial result if there is a valid payout vector z \u00b2, which is defined as zi = b for all (i, b). This is not possible by simply updating the state, but instead we must switch to another cost function while maintaining the information state of the market. We adapt the construction of Dud\u00ed \u00b2 k et al. [2014] to our mindset. First, we say that a vector \u00b2 RI is compatible with another cost function while maintaining the information state of the market."}, {"heading": "4. FRANK-WOLFE MARKET MAKER", "text": "In this section, we describe and analyze the Frank Wolfe Market Maker (FWMM), which interlinks FWMM at a high level with the arbitrage elimination, while simultaneously updating the partial result - see mechanism 1. There are two types of arbitrage elimination: fast, but only partial elimination of arbitrage constraints defined by an LCMMMECHANISM 1: Frank Wolfe Market Maker (FWMM). There are two types of arbitrage elimination: fast, but only partial elimination of constraints based on A, b, IP constraints defined by an A, b, FW algorithm parameter. \u2212 Projected profit steps: Input: cost function C, initial state: interruption of securities, initial partial result \u03c30, LCMM constraints defined by a projector, a constraint defined by an A, b, by an algorithm, a constraint \u2212 MIP, a constraint defined by an algorithm."}, {"heading": "4.1. Fully-corrective Frank-Wolfe algorithm", "text": "Remember that the FW algorithm reduces the minimization effects of the Z-plane projection, i.e., a convex minimization via the setM, into a sequence of linear optimization problems via the set Z-plane. Our version, presented as Algorithm 2, is based on the fully corrective variant of the Frank Wolfe algorithm [Jaggi 2013], also known as the simplified decomposition method [Bertsekas 2015], which we use over the course of iterations. The FW algorithm solves problems of formmin-MF (\u00b5), (6) where M is a compact convex structure (in our case a polytopic), and F is a convex function. In the course of iterations t = 1, 2,., the algorithm maintains an active set of polytopeM, which has been discovered so far, and repeats: (1) the minimization efficiency of the Z-plane to the ZT-plane get an active set."}, {"heading": "4.2. Stopping condition for the FW algorithm", "text": "11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,"}, {"heading": "4.3. Finding the interior point", "text": "The goal is to find a point u-M where the coordinates of unclarified securities lie strictly between 0 and 1. In this process, we also obtain the initial set of active vertices and an extended partial result. To construct u, algorithm 3 iterates through the coordinates i, which were not evaluated in the provided partial result \u03c3, and calls the IP solver to find a valid vector z, which is in agreement with \u03c3, but also the i-th coordinate equal to b = 0 or b = 1. If the IP solver does not find such a z-value for b, this means that the i-th coordinate can be evaluated to 1 \u2212 b. Otherwise, the z-coordinate found is added to the group of active vertices. This guarantees that each coordinate i is either present in \u043c, or that the active record contains some valid vertices, which are in agreement with both the value 0 and the i-th coordinate."}, {"heading": "5. EXPERIMENTS", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5.1. Data description", "text": "Our data consists of bets made in Predictalot, a combinatorial prediction market operated by Yahoo, and singles we made in 2010 for the NCAA Division I Basketball Tournament, commonly known as March Madness.1 The tournament lasted from March 18 to April 5, 2010. It consisted of 64 teams playing a 6-round individual elimination tournament, with half of the remaining teams eliminated in each round. Dealers were allowed to purchase securities at any time of the tournament; the first bets were placed four days before the tournament started and the last bets were placed toward the end of the last game. Many bets related to groups of teams known as conferences, brackets or seeds (e.g. there are sixteen betting levels and four betting levels). There were 93,036 bets placed in total on many different securities in Predictalot. Our experiments focus on a large subset of these that we briefly describe."}, {"heading": "5.2. Evaluation", "text": "We compare three market treatments: Independent Markets (IND), Linear Contracted Market Makers (LCMM), and a Market Maker with both Linear Restraints and Bregman Projections for Arbitrage Elimination (FWMM). Each Market Maker builds on random variables and extends the previous one. Remember, in IND we use LMSR to value securities with each random variable, but the prices of individual variables vary independently, even if the underlying events are related to each other. LCMM forces price relationships through linear constraints, and FWMM adds projection steps to the marginal polytopes. Market Makers were implemented in Java using Gurobi Optimizer 5.53 to solve the integer programs in the FW algorithms. We refer to our implementation as Market Engineering Repair, which we evaluate the market by contracting the three market makers."}, {"heading": "6. DISCUSSION AND CONCLUSION", "text": "In our experiments, FWMM performed better than LCMM once the earnings space over fixed securities was sufficiently reduced to allow Bregman projections to be calculated on a standard computer within 30 minutes, resulting in a manageable experimental turnaround of about 5 hours to execute the initial 22-day trades. In practice, a market designer can allow longer calculation times, use more powerful hardware, and expect improvements for larger problem sizes. Multiple approaches could further accelerate our framework. For example, FW can be used to construct separating hyperplanes to streamline the outer LCMM approximation, contributing to arbitrage removal even when there is no time left to calculate the projection."}, {"heading": "A. PROOF OF PROPOSITION 2.4", "text": "We first calculate the maximum guaranteed profit: Sup. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller. \u2212 Soller."}, {"heading": "B. BOUNDED LOSS PROPERTY UNDER GRADUAL REVELATION OF OUTCOME", "text": "We show that dependence on the worst case of loss of cost C is maintained by updating the cost function by using a sequence of partial results that gradually show the final result. We start with the worst case, which is tied to loss-under-cost. \u2212 If you reveal the final state before the result, the worst possible loss of a market maker is calculated using C. \u2212 If you reveal the final state before the result, the market maker has recorded the loss in C. \u2212 Solls (set point) is calculated as turnover for the shares sold and must pay out (set point). \u2212 Solls (set point) is paid out to traders. \u2212 The worst case is the loss before the result is disclosed. \u2212 Solls (set point). \u2212 Solls (set point)."}, {"heading": "C. DIFFERENTIABILITY AND CONTROLLED GROWTH OF R", "text": "The algorithm used by our marketer requires a differentiable target whose gradient does not grow too fast as it approaches the boundary of M. Note that the Bregman divergence is not formally differentiable even in its first argument (it is subdifferentiable), so in addition to the controlled growth of the gradient, we must also assume that R can be extended into a differentiable function. Specifically, we say that R: RI \u2192 (-) n is a convex extension of R if R instance is convex and coincides with R wherever R < \u221e. We demand the existence of an extension with the controlled growth property in the following sense: Definition C.1. Let S [0, 1] n be a compact convex set. We say that a convex function F has controlled growth if it is distinguishable on S-II (0, 1) and if there is a fixed convex function F and 0-L-0."}, {"heading": "D. PROOF OF PROPOSITION 4.1", "text": "Guaranteed profit from a transition from the EGF to the EGF follows from the definition of R. Finally, the EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) \u00b7 EGF (EGF) \u00b7 EGF (EGF) \u00b7 EGF (EGF) \u00b7 EGF (EGF) = EGF (EGF) = EGF (EGF) \u00b7 EGF (EGF) = EGF (EGF) (EGF) (EGF) () (EGF) () (EGF) () (EGF) (EGF) = EGF (EGF) (EGF) (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = EGF (EGF) = (EGF) = EGF (EGF) = (EGF) = EGF (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF = (EGF) = (EGF) = (EGF) = (EGF = (EGF) = (EGF) = (EGF) = (EGF = () = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF) = (EGF = (EGF) = (EGF ="}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "We present a new combinatorial market maker that operates arbitrage-free combinatorial prediction markets specified by integer programs. Although the problem of arbitrage-free pricing, while maintaining a bound on the subsidy provided by the market maker, is #P-hard in the worst case, we posit that the typical case might be amenable to modern integer programming (IP) solvers. At the crux of our method is the Frank-Wolfe (conditional gradient) algorithm which is used to implement a Bregman projection aligned with the market maker\u2019s cost function, using an IP solver as an oracle. We demonstrate the tractability and improved accuracy of our approach on real-world prediction market data from combinatorial bets placed on the 2010 NCAA Men\u2019s Division I Basketball Tournament, where the outcome space is of size 263. To our knowledge, this is the first implementation and empirical evaluation of an arbitrage-free combinatorial prediction market on this scale.", "creator": "LaTeX with hyperref package"}}}