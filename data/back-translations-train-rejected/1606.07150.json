{"id": "1606.07150", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Jun-2016", "title": "Adaptive and Scalable Android Malware Detection through Online Learning", "abstract": "It is well-known that malware constantly evolves so as to evade detection and this causes the entire malware population to be non-stationary. Contrary to this fact, prior works on machine learning based Android malware detection have assumed that the distribution of the observed malware characteristics (i.e., features) do not change over time. In this work, we address the problem of malware population drift and propose a novel online machine learning based framework, named DroidOL to handle it and effectively detect malware. In order to perform accurate detection, security-sensitive behaviors are captured from apps in the form of inter-procedural control-flow sub-graph features using a state-of-the-art graph kernel. In order to perform scalable detection and to adapt to the drift and evolution in malware population, an online passive-aggressive classifier is used.", "histories": [["v1", "Thu, 23 Jun 2016 01:08:10 GMT  (264kb,D)", "https://arxiv.org/abs/1606.07150v1", null], ["v2", "Mon, 26 Sep 2016 10:07:11 GMT  (264kb,D)", "http://arxiv.org/abs/1606.07150v2", null]], "reviews": [], "SUBJECTS": "cs.CR cs.LG", "authors": ["annamalai narayanan", "liu yang", "lihui chen", "liu jinliang"], "accepted": false, "id": "1606.07150"}, "pdf": {"name": "1606.07150.pdf", "metadata": {"source": "CRF", "title": "Adaptive and Scalable Android Malware Detection through Online Learning", "authors": ["Annamalai Narayanan", "Liu Yang", "Lihui Chen"], "emails": ["annamala002@e.ntu.edu.sg,", "elhchen}@ntu.edu.sg,", "liuj0081@e.ntu.edu.sg"], "sections": [{"heading": null, "text": "This year it has come to the point that it will only be a matter of time before it will happen, until it will happen."}, {"heading": "II. RELATED WORK & MOTIVATION", "text": "ML-based approaches have become very popular in the detection of malware over the last decade. Many existing works have successfully applied ML techniques to detect malware on various platforms such as Windows, Android and the Web."}, {"heading": "A. Related Work - Android Malware Detection", "text": "These methods are designed to detect malware based on the first versions of Android, and perform simpler attacks, such as creating premium ratings / SMS. Therefore, they are used by primitive features such as system calls, Android APIs and permissions. These techniques detect malware by identifying suspicious usage patterns of aforesaid functions. Crowdroid in particular uses sequences of Linux systems as features. Drebin uses APIs, permission components, access to URLs and intent filters as features. DroidAPIMiner considers sensitive APIs along with parameters and packet information as features good enough to detect simpler malware."}, {"heading": "B. Motivation", "text": "While all of the above work focuses on developing robust features that can effectively detect malware, it does not address a central practical aspect of malware detection - malware evolution. As discussed in Section I, many analytical studies such as [17, 21] have clearly shown that malware evolves in terms of its characteristics for various reasons. (C2) The detection model inevitably leads to profound changes in malware features over time, i.e. concept drift. This presents two challenges: (C1) The detection model must automatically adapt to the explanationSignificant Featuresconcept drift. (C2) The detection model must take into account new features that emerge over time. Detection of malware as a data stream classification problem."}, {"heading": "III. DROIDOL - FRAMEWORK OVERVIEW", "text": "The overview of the DroidOL system, which provides accurate, adaptable and scalable malware detection, is presented in Figure 1. [2] We start with static analysis of a given set of apps to obtain their ICFG representations. [3] Each of the phases is described in detail. [4] Abstraction of our malware detection is presented with the WL kernel and the apps as features. [5] To extract these characteristics, we first perform Android-specific static analysis to transform all apps into their respective ICFG algorithms. [5] Abstraction of our malware detection is referred to as feature ICFG sub-graphics as features."}, {"heading": "13, 2014", "text": "A random forest classifier is then trained with these signatures to detect malware."}, {"heading": "V. DATA COLLECTION", "text": "These apps are collected from seven different Android markets4, namely Google Play, Anzhi, AppChina, SlideMe, HiApk, FDroid and Angeeks, in 2014. We conclude that the data set contained 44,347 harmless and 42,910 malware apps. The composition of the data set is shown in Table I. It is noted that this is a subset of a large collection of apps used in [23]. The date of creation of these apps falls within a span of 224 days, starting from January 1, '14 to August 13,' 14. We intend to sort these apps by their date of origin and emulate a live feed of malware to the malware that is included in this data set to split them into two periods."}, {"heading": "VI. EVALUATION", "text": "In this section, we evaluate the accuracy and adaptability of DroidOL using the emulated live feed of apps. To this end, we use 4Google Play: https: / / play.google.com / store, Anzhi: www.anzhi.com, AppChina: www.appchina.com, SlideMe: www.SlideME.org, HiApk: www.hiapk.com, FDroid: www.fdroid.org and Angeeks: http: / / apk.angeeks.com5https: / / www.virustotal.com / answer the following questions: (1) Does DroidOL's online learning offer any benefit over batch learning to detect malware? (2) How does DroidOL's accuracy compare to the most advanced malware detection techniques? (3) Is there a specific training program that fully exploits the potential of the online classifier?"}, {"heading": "A. Advantages of Online Learning", "text": "We begin by evaluating the benefits of batch learning in terms of error detection - in particular, whether DroidOL's efficiency comes at the expense of accuracy. It is noted that evaluations using other batch algorithms produce similar results. Batch Learning Configurations: We are experimenting with the following variants: SVM-Once, SVM-Daily, and SVM-Multidaily, and SVM-Daily, and the Batch-Rate. \""}, {"heading": "B. Comparison with state-of-the-art Malware Detectors", "text": "The SVM variants mentioned above use the same features as DroidOL, so it is sufficient to compare the paradigms of online and batch learning. However, this does not reflect the importance of DroidOL as a practical malware detector in the context of current modern malware detection techniques. To investigate this, we compare DroidOL with two state-of-the-art malware detectors, namely Drebin [4] and CSBD [5]. For this comparison, we follow the same batch learning configurations described in Section VI-A to arrive at the four variants of these techniques: Drebin / CSBD-Once, Drebin / CSBD-Daily, Drebin / CSBD-MultiOnce and Drebin / CSBD-MultiDaily.The results of this comparison are presented in Figure 3 (b) and (c) as the best representations of the multiplication forms. From these figures, we draw the following conclusions: \u2022 For both methods, the trends in the SVM detection rates are most common in the major malware models of the SVM."}, {"heading": "C. Training Regimen", "text": "Since DroidOL's feature extraction with WL kernel is based on BoF model, our number of features grows with the samples. Fig. 4 shows the cumulative number of features for each day of reviews in our dataset that represent the feature Space Growth. Dimensionality is growing rapidly as we extract new subgraph features from the previous days and simultaneously reach the final day. (13 Aug '14) We have accumulated 1,653,496 features that occur on Day 1. (1 Jan' 14) This dimensionality is growing rapidly as we encounter new subgraph features every day. (13 Aug'n) We have accumulated."}, {"heading": "VII. UNDERSTANDING THE PERFORMANCE", "text": "In fact, most of us are able to play by the rules that we ourselves believe are necessary."}, {"heading": "VIII. CONCLUSIONS", "text": "In this article we introduce DroidOL, a precise, adaptable and scalable Android malware detection system. The unique feature of DroidOL is its ability to deal with population drift in Android malware through the use of online learning. DroidOL is highly accurate because it extracts effective structural features from apps that use a state-of-the-art graphene kernel. Furthermore, DroidOL automatically adapts to the development of malware features over time and exhibits high scalability, making it suitable for real-world malware detection. Our large-scale evaluations on a real-world dataset show that DroidOL outperforms state-of-the-art malware detection systems. DroidOL achieves an accuracy of 84.29%, exceeding existing techniques by more than 20% in its typical batch learning environment. This superior performance makes OidOL, especially on-line malware, and in general, a better candidate for large-scale learning."}, {"heading": "ACKNOWLEDGMENT", "text": "We thank the authors of [4] and [5] for their suggestions and discussions, which helped us to reimplement their methods, and Kevin Allix for passing on the data set used in [23]."}], "references": [{"title": "Appcontext: Differentiating malicious and benign mobile app behaviors using context.", "author": ["Yang", "Wei"], "venue": "Proc. of the International Conference on Software Engineering (ICSE)", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Structural detection of android malware using embedded call graphs.", "author": ["Gascon", "Hugo"], "venue": "Proceedings of the 2013 ACM workshop on Artificial intelligence and security. ACM,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "Drebin: Effective and explainable detection of android malware in your pocket.", "author": ["Arp", "Daniel"], "venue": "Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS)", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Empirical assessment of machine learning-based malware detectors for Android.", "author": ["Allix", "Kevin"], "venue": "Empirical Software Engineering", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "A machine learning approach to android malware detection.", "author": ["Sahs", "Justin", "Latifur Khan"], "venue": "Intelligence and Security Informatics Conference (EISIC), 2012 European", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Semantics-aware Android malware classification using weighted contextual API dependency graphs.", "author": ["Zhang", "Mu"], "venue": "Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "DroidAPIMiner: Mining API-level features for robust malware detection in android.", "author": ["Aafer", "Yousra", "Wenliang Du", "Heng Yin"], "venue": "Security and Privacy in Communication Networks. Springer International Publishing,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Droidminer: Automated mining and characterization of fine-grained malicious behaviors in android applications.", "author": ["Yang", "Chao"], "venue": "Security-ESORICS", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "Mining apps for abnormal usage of sensitive data.", "author": ["Avdiienko", "Vitalii"], "venue": "Software Engineering (ICSE),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "Crowdroid: behavior-based malware detection system for android.", "author": ["Burguera", "Iker", "Urko Zurutuza", "Simin Nadjm-Tehrani"], "venue": "Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices. ACM,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "Synthesizing near-optimal malware specifications from suspicious behaviors.", "author": ["Fredrikson", "Matt"], "venue": "Security and Privacy (SP),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "Weisfeiler-lehman graph kernels.", "author": ["Shervashidze", "Nino"], "venue": "The Journal of Machine Learning Research", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "Online passive-aggressive algorithms.", "author": ["Crammer", "Koby"], "venue": "The Journal of Machine Learning Research", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2006}, {"title": "On-line algorithms in machine learning", "author": ["Blum", "Avrim"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1998}, {"title": "Tracking concept drift in malware families.", "author": ["Singh", "Anshuman", "Andrew Walenstein", "Arun Lakhotia"], "venue": "Proceedings of the 5th ACM workshop on Security and artificial intelligence. ACM,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2012}, {"title": "Identifying suspicious URLs: an application of largescale online learning.", "author": ["Ma", "Justin"], "venue": "Proceedings of the 26th Annual International Conference on Machine Learning", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2009}, {"title": "Pscout: analyzing the android permission specification.", "author": ["Au", "Kathy Wain Yee"], "venue": "Proceedings of the 2012 ACM conference on Computer and communications security. ACM,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2012}, {"title": "Cloud-based malware detection for evolving data streams.", "author": ["Masud", "Mohammad M"], "venue": "ACM Transactions on Management Information Systems (TMIS)", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2011}, {"title": "Dissecting android malware: Characterization and evolution.", "author": ["Zhou", "Yajin", "Xuxian Jiang"], "venue": "Security and Privacy (SP),", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2012}, {"title": "pClass: an effective classifier for streaming examples.", "author": ["Pratama", "Mahardhika"], "venue": "Fuzzy Systems, IEEE Transactions on 23.2", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2015}, {"title": "Challenges and Outlook in Machine Learningbased Malware Detection for Android.", "author": ["Allix", "Kevin"], "venue": "(Doctoral dissertation). Retrieved from URL", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "rate of Android malware highlights an imperative need for developing sound and scalable automated malware detection process [2]\u2013[7, 12].", "startOffset": 124, "endOffset": 127}, {"referenceID": 5, "context": "rate of Android malware highlights an imperative need for developing sound and scalable automated malware detection process [2]\u2013[7, 12].", "startOffset": 128, "endOffset": 135}, {"referenceID": 10, "context": "rate of Android malware highlights an imperative need for developing sound and scalable automated malware detection process [2]\u2013[7, 12].", "startOffset": 128, "endOffset": 135}, {"referenceID": 0, "context": "Malware detection using Machine Learning (ML) techniques is predominant in various platforms (such as Windows, Android and the web) for more than a decade [2]\u2013[7, 12].", "startOffset": 155, "endOffset": 158}, {"referenceID": 5, "context": "Malware detection using Machine Learning (ML) techniques is predominant in various platforms (such as Windows, Android and the web) for more than a decade [2]\u2013[7, 12].", "startOffset": 159, "endOffset": 166}, {"referenceID": 10, "context": "Malware detection using Machine Learning (ML) techniques is predominant in various platforms (such as Windows, Android and the web) for more than a decade [2]\u2013[7, 12].", "startOffset": 159, "endOffset": 166}, {"referenceID": 0, "context": "These approaches typically use semantic features such as system calls/Application Programming Interfaces (APIs) invoked, resources and privileges used, control- and data-flows inside apps\u2019 execution to detect malicious behavior patterns [2]\u2013[7, 12].", "startOffset": 237, "endOffset": 240}, {"referenceID": 5, "context": "These approaches typically use semantic features such as system calls/Application Programming Interfaces (APIs) invoked, resources and privileges used, control- and data-flows inside apps\u2019 execution to detect malicious behavior patterns [2]\u2013[7, 12].", "startOffset": 241, "endOffset": 248}, {"referenceID": 10, "context": "These approaches typically use semantic features such as system calls/Application Programming Interfaces (APIs) invoked, resources and privileges used, control- and data-flows inside apps\u2019 execution to detect malicious behavior patterns [2]\u2013[7, 12].", "startOffset": 241, "endOffset": 248}, {"referenceID": 14, "context": "This phenomenon is an epitome of population drift [17].", "startOffset": 50, "endOffset": 54}, {"referenceID": 14, "context": "Since new malware features emerge and importances of features change over time, this population drift leads to concept drift [17, 18].", "startOffset": 125, "endOffset": 133}, {"referenceID": 15, "context": "Since new malware features emerge and importances of features change over time, this population drift leads to concept drift [17, 18].", "startOffset": 125, "endOffset": 133}, {"referenceID": 0, "context": "and obfuscation techniques adopted by malware [2, 5].", "startOffset": 46, "endOffset": 52}, {"referenceID": 3, "context": "and obfuscation techniques adopted by malware [2, 5].", "startOffset": 46, "endOffset": 52}, {"referenceID": 11, "context": "To this end, we use the Weisfeiler-Lehman (WL) graph kernel [13] that supports explicit feature vector representation of graphs to extract semantic features from ICFGs.", "startOffset": 60, "endOffset": 64}, {"referenceID": 9, "context": "1) Primitive Approaches: In the case of Android, Crowdroid [11], Drebin [4] and DroidAPIMiner [8] are noticeable among the early approaches on ML based malware detection.", "startOffset": 59, "endOffset": 63}, {"referenceID": 2, "context": "1) Primitive Approaches: In the case of Android, Crowdroid [11], Drebin [4] and DroidAPIMiner [8] are noticeable among the early approaches on ML based malware detection.", "startOffset": 72, "endOffset": 75}, {"referenceID": 6, "context": "1) Primitive Approaches: In the case of Android, Crowdroid [11], Drebin [4] and DroidAPIMiner [8] are noticeable among the early approaches on ML based malware detection.", "startOffset": 94, "endOffset": 97}, {"referenceID": 9, "context": "In particular, Crowdroid [11] uses Linux system call sequences", "startOffset": 25, "endOffset": 29}, {"referenceID": 2, "context": "Drebin [4] uses APIs, permissions, components, accessed URLs and Intent filters as features.", "startOffset": 7, "endOffset": 10}, {"referenceID": 6, "context": "DroidAPIMiner [8] considers sensitive APIs along with parameters and package level information as features.", "startOffset": 14, "endOffset": 17}, {"referenceID": 5, "context": "Even though these features are good enough for detecting simpler malware, they are easily evaded by modern malware that perform sophisticated attacks [7, 9].", "startOffset": 150, "endOffset": 156}, {"referenceID": 7, "context": "Even though these features are good enough for detecting simpler malware, they are easily evaded by modern malware that perform sophisticated attacks [7, 9].", "startOffset": 150, "endOffset": 156}, {"referenceID": 1, "context": "Hence such methods are not suitable for practical large-scale malware detection [3, 4].", "startOffset": 80, "endOffset": 86}, {"referenceID": 2, "context": "Hence such methods are not suitable for practical large-scale malware detection [3, 4].", "startOffset": 80, "endOffset": 86}, {"referenceID": 8, "context": "Mudflow [10], is a prototypical example of these types of detection methods.", "startOffset": 8, "endOffset": 12}, {"referenceID": 0, "context": "For this reason, graph representations such as callgraphs, control- and data-flow graphs, control-, data- and program-dependency graphs have been widely used for malware detection in conjunction with graph mining techniques [2, 3, 5, 7, 9, 12].", "startOffset": 224, "endOffset": 243}, {"referenceID": 1, "context": "For this reason, graph representations such as callgraphs, control- and data-flow graphs, control-, data- and program-dependency graphs have been widely used for malware detection in conjunction with graph mining techniques [2, 3, 5, 7, 9, 12].", "startOffset": 224, "endOffset": 243}, {"referenceID": 3, "context": "For this reason, graph representations such as callgraphs, control- and data-flow graphs, control-, data- and program-dependency graphs have been widely used for malware detection in conjunction with graph mining techniques [2, 3, 5, 7, 9, 12].", "startOffset": 224, "endOffset": 243}, {"referenceID": 5, "context": "For this reason, graph representations such as callgraphs, control- and data-flow graphs, control-, data- and program-dependency graphs have been widely used for malware detection in conjunction with graph mining techniques [2, 3, 5, 7, 9, 12].", "startOffset": 224, "endOffset": 243}, {"referenceID": 7, "context": "For this reason, graph representations such as callgraphs, control- and data-flow graphs, control-, data- and program-dependency graphs have been widely used for malware detection in conjunction with graph mining techniques [2, 3, 5, 7, 9, 12].", "startOffset": 224, "endOffset": 243}, {"referenceID": 10, "context": "For this reason, graph representations such as callgraphs, control- and data-flow graphs, control-, data- and program-dependency graphs have been widely used for malware detection in conjunction with graph mining techniques [2, 3, 5, 7, 9, 12].", "startOffset": 224, "endOffset": 243}, {"referenceID": 7, "context": "In the case of Android, DroidMiner [9] and Allix et al.", "startOffset": 35, "endOffset": 38}, {"referenceID": 3, "context": "[5] proposed to use control-flow graph based features to perform structural malware detection.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "DroidSIFT [7] and AppContext [2] proposed a more robust approach by including the contextual information of security-sensitive activities (i.", "startOffset": 10, "endOffset": 13}, {"referenceID": 0, "context": "DroidSIFT [7] and AppContext [2] proposed a more robust approach by including the contextual information of security-sensitive activities (i.", "startOffset": 29, "endOffset": 32}, {"referenceID": 10, "context": ", [12]) are NP hard and have severe scalability issues, making them impractical for real-world malware detection [3].", "startOffset": 2, "endOffset": 6}, {"referenceID": 1, "context": ", [12]) are NP hard and have severe scalability issues, making them impractical for real-world malware detection [3].", "startOffset": 113, "endOffset": 116}, {"referenceID": 11, "context": "and expressive graph kernels such as WL kernel [13] have been proposed and widely adopted in many application areas (e.", "startOffset": 47, "endOffset": 51}, {"referenceID": 1, "context": "Taking notice of such a development, two approaches, Adagio [3] and Sahs et al.", "startOffset": 60, "endOffset": 63}, {"referenceID": 4, "context": "[6] used graph kernels to perform structural detection of Android malware.", "startOffset": 0, "endOffset": 3}, {"referenceID": 14, "context": "As discussed in \u00a7I, many analytical studies such as [17, 21] have clearly highlighted that malware", "startOffset": 52, "endOffset": 60}, {"referenceID": 18, "context": "As discussed in \u00a7I, many analytical studies such as [17, 21] have clearly highlighted that malware", "startOffset": 52, "endOffset": 60}, {"referenceID": 17, "context": "While we note that there a few approaches in the past that have adopted online learning to tackle concept drift in malware for other platforms such as Windows [20], we are the first to do so for Android.", "startOffset": 159, "endOffset": 163}, {"referenceID": 11, "context": "Since WL graph kernel [13] is the current state-of-the-art graph kernel, known for its expressiveness and efficiency, we use it to extract semantic features from ICFGs.", "startOffset": 22, "endOffset": 26}, {"referenceID": 11, "context": "Once the ICFGs are constructed, (rooted) sub-graphs in these ICFGs that represent the security-sensitive behaviors in every app are extracted using the WL graph kernel [13].", "startOffset": 168, "endOffset": 172}, {"referenceID": 16, "context": "1PScout [19], an existing research work identifies and lists the securitysensitive Android APIs.", "startOffset": 8, "endOffset": 12}, {"referenceID": 11, "context": "This procedure falls under the well-known Bagof-Features (BoF) representation model [13], where every ICFG is considered as a bag of sub-graphs.", "startOffset": 84, "endOffset": 88}, {"referenceID": 12, "context": "where \u03b1t = max{ 1\u2212yt(wt\u00b7xt) ||xt|| , 0} (we refer the reader to the original work at [15] for this derivation and further details on PA algorithm).", "startOffset": 85, "endOffset": 89}, {"referenceID": 19, "context": "While we note that evolving classifiers such as pClass [22] could be used for handling concept drift, we prefer PA over such methods, as it offers better efficiency.", "startOffset": 55, "endOffset": 59}, {"referenceID": 2, "context": "We compare our online learning based detection against two state-of-the-art Android malware detection solutions, namely Drebin [4] and Allix et.", "startOffset": 127, "endOffset": 130}, {"referenceID": 3, "context": "\u2019s [5].", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "Drebin [4] is well-known for its scalable and explainable detection.", "startOffset": 7, "endOffset": 10}, {"referenceID": 3, "context": "[5] recently proposed another scalable approach", "startOffset": 0, "endOffset": 3}, {"referenceID": 20, "context": "It is noted that this is a subset of a large collection of apps used in [23].", "startOffset": 72, "endOffset": 76}, {"referenceID": 2, "context": "In order to study this, we compare DroidOL with two state-of-the-art malware detectors, namely, Drebin [4] and CSBD [5].", "startOffset": 103, "endOffset": 106}, {"referenceID": 3, "context": "In order to study this, we compare DroidOL with two state-of-the-art malware detectors, namely, Drebin [4] and CSBD [5].", "startOffset": 116, "endOffset": 119}, {"referenceID": 0, "context": "using newly introduced Android functionalities and adapting to changes in Android framework APIs [2, 7].", "startOffset": 97, "endOffset": 103}, {"referenceID": 5, "context": "using newly introduced Android functionalities and adapting to changes in Android framework APIs [2, 7].", "startOffset": 97, "endOffset": 103}, {"referenceID": 0, "context": "is currently a manual process [2, 4].", "startOffset": 30, "endOffset": 36}, {"referenceID": 2, "context": "is currently a manual process [2, 4].", "startOffset": 30, "endOffset": 36}, {"referenceID": 2, "context": "has malware readily grouped according to their family, namely, Drebin5k [4].", "startOffset": 72, "endOffset": 75}, {"referenceID": 2, "context": "We thank the authors of [4] and [5], for their suggestions and discussions that helped us re-implement their methods.", "startOffset": 24, "endOffset": 27}, {"referenceID": 3, "context": "We thank the authors of [4] and [5], for their suggestions and discussions that helped us re-implement their methods.", "startOffset": 32, "endOffset": 35}, {"referenceID": 20, "context": "We thank Kevin Allix for sharing the dataset used in [23].", "startOffset": 53, "endOffset": 57}], "year": 2016, "abstractText": "It is well-known that malware constantly evolves so as to evade detection and this causes the entire malware population to be non-stationary. Contrary to this fact, prior works on machine learning based Android malware detection have assumed that the distribution of the observed malware characteristics (i.e., features) do not change over time. In this work, we address the problem of malware population drift and propose a novel online machine learning based framework, named DroidOL to handle it and effectively detect malware. In order to perform accurate detection, the security-sensitive behaviors are captured from apps in the form of inter-procedural control-flow sub-graph features using a state-of-the-art graph kernel. In order to perform scalable detection and to adapt to the drift and evolution in malware population, an online passiveaggressive classifier is used. In a large-scale comparative analysis with more than 87,000 apps, DroidOL achieves 84.29% accuracy outperforming two state-of-the-art malware techniques by more than 20% in their typical batch learning setting and more than 3% when they are continuously re-trained. Our experimental findings strongly indicate that online learning based approaches are highly suitable for real-world malware detection. keywords \u2014 Online Learning, Graph Kernels, Malware Detection", "creator": "LaTeX with hyperref package"}}}