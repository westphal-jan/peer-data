{"id": "1608.07879", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Aug-2016", "title": "Causality and Responsibility for Formal Verification and Beyond", "abstract": "The theory of actual causality, defined by Halpern and Pearl, and its quantitative measure - the degree of responsibility - was shown to be extremely useful in various areas of computer science due to a good match between the results it produces and our intuition. In this paper, I describe the applications of causality to formal verification, namely, explanation of counterexamples, refinement of coverage metrics, and symbolic trajectory evaluation. I also briefly discuss recent applications of causality to legal reasoning.", "histories": [["v1", "Mon, 29 Aug 2016 01:35:46 GMT  (19kb,D)", "http://arxiv.org/abs/1608.07879v1", "In Proceedings CREST 2016,arXiv:1608.07398. Invited paper"]], "COMMENTS": "In Proceedings CREST 2016,arXiv:1608.07398. Invited paper", "reviews": [], "SUBJECTS": "cs.SE cs.AI", "authors": ["hana chockler"], "accepted": false, "id": "1608.07879"}, "pdf": {"name": "1608.07879.pdf", "metadata": {"source": "CRF", "title": "Causality and Responsibility for Formal Verification and Beyond", "authors": ["Hana Chockler"], "emails": ["hana.chockler@kcl.ac.uk"], "sections": [{"heading": null, "text": "G. Go \ufffd ssler and O. Sokolsky (ed.): 1st Workshop on Causal Reasoning for Embedded and Safety-Critical Systems Technologies (CREST '16) EPTCS 224, 2016, pp. 1-8, doi: 10.4204 / EPTCS.224.1c \u00a9 Hana Chockler This work is licensed under the Creative Commons Attribution License.Causality and Responsibility for Formal Verification and BeyondHana Chockler Department of InformaticsKing's College London hana.chockler @ kcl.ac.ukThe theory of actual causality, defined by Halpern and Pearl, and its quantitative metric - the degree of responsibility - has proven to be extremely useful in various areas of computer science due to a good agreement between the results it produces and our intuition. In this essay I describe the application of causality to formal verification, namely the explanation of counter-examples of metricity, the application of symbolic examples, and the application of rationality as well as the application of causality theories."}, {"heading": "1 Introduction", "text": "In fact, most of them are able to determine for themselves what they want to do and what they want to do."}, {"heading": "2 Causality and Responsibility \u2013 Definitions", "text": "In this section, I will briefly discuss the details of Halpern and Pearl's definition of causal models and causalities [15] and the definitions of responsibility and guilt [5] in causal models."}, {"heading": "2.1 Causal models", "text": "A signature is a tuple S = < U, V, R >, where U is a finite set of exogenous variables (V is a finite set of endogenous variables, and R associates with each variable Y \u00b2 U \u00b2 V a finite nonempty set R (Y) of possible values for Y. Intuitively, the exogenous variables are those whose values are determined by factors outside the model, while the endogenous variables are those whose values are ultimately determined by the exogenous variables. A (recursive) causal model over signature S is a tuple M = < S, F >, where F is causal variables with each endogenous variable X \u00b2 V a function that reads FX: (\u00d7 U) \u00b7 UR (U) \u00b7 Y \u00b2 V\\ {X} R (Y))), and functions have no causal dependence. That is, FX describes how the value of the endogenous variable X is determined by all other values."}, {"heading": "2.2 Responsibility and Blame", "text": "In the second half of the last decade, the number of people eligible to vote has increased significantly. (...) In the second half of the last decade, the number of eligible voters has doubled. (...) In the third half of the last decade, the number of non-voters has increased. (...) In the second half of the last decade, the number of non-voters has increased. (...) In the second half of the last decade, the number of non-voters has increased. (...) The number of non-voters has increased. (...) The number of non-voters has increased. (...) The number of non-voters has increased. (...) The number of non-voters is on the increase. (...) The number of non-voters is on the increase. (...) The number of non-voters is on the increase. (...) The number of non-voters is on the increase. (...) The number of non-voters is on the increase. (...) The number of non-voters is on the increase. (...)."}, {"heading": "3 Coverage in the framework of causality", "text": "The following definition of coverage is based on the study of mutated coverage in simulation-based verification [23, 24, 1] and is the one used in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]. For a Kripke structure K, an atomic proposal q, and a state w, which we call by K, the Kripke structure is obtained by reversing the value of K into w. Definition 3.1 (coverage) Consider a Kripke structure K, a specification satisfied in K, and an atomic approach q."}, {"heading": "4 Explanation of Counterexamples Using Causality", "text": "The explanation of the counter-examples deals with a fundamental aspect of understanding a counter-example: the task of finding the failure in the track itself. To motivate this approach, consider a verification engineer who formally checks a hardware design written by a logic designer. The verification engineer writes a specification - a temporal logic formula - and performs a model checker to check the formula on the Design Under Test (DUT). The verification engineer does not attempt to debunk the DUT implementation (because this is the responsibility of the logic designer who wrote it), and their goal is to search for some basic information about the way in which the formula fails on the specific track. If the formula is a complex combination of several conditions, they must know which of these conditions has failed. These basic questions are prerequisites for deeper investigations of failure. Ben-David et al. present a method and the tool that represents only an explanation of the track."}, {"heading": "5 Responsibility in Symbolic Trajectory Evaluation", "text": "Symbolic Trajectory Evaluation (STE) [27] is a powerful model verification technique for hardware verification that combines symbolic simulation with 3-value abstraction. Consider a circuit M, which is described as a Directed Acyclic Graph of nodes representing gates and latches. For such a circuit, a STE statement is of the form A \u2192 C. Nodes that are not limited by A are initialized by STE to the value X (\"unknown\"), thus achieving an abstraction of the verified model. STE is successfully used in the hardware industry to verify very large models with wide data paths. The common method of performing STE is the representation of the values of each node.STE is successfully used in the hardware industry to verify very large models with wide data paths."}, {"heading": "6 . . . and Beyond", "text": "In formal verification, there is no natural application of the concept of guilt (paragraph 2.3), since the model and property are assumed to be known. On the other hand, it is quite natural in legal application to speak of an epistemic state of an agent representing what the agent knew or should have known. As [15] is pointed out, the legal system does not agree with the structural definitions of causality, responsibility and guilt. Indeed, it is still possible to apply our methodology of presenting a problem using causal models to improve our understanding and analysis of certain situations. [10] We use the framework of actual causality to guide the legal investigation. In fact, the concepts of responsibility and guilt fit very well with the process of legal investigation, since we can grasp both the limited knowledge of those involved in the case and the unknown factors in the case."}], "references": [{"title": "A specification-based coverage metric to evaluate test", "author": ["P.E.P. Ammann"], "venue": "Black", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2001}, {"title": "Explaining counterexamples using causality", "author": ["I. Beer", "S. Ben-David", "H. Chockler", "A. Orni", "R.J. Trefler"], "venue": "Formal Methods in System Design", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2012}, {"title": "Efficient detection of vacuity in ACTL formulas", "author": ["I. Beer", "S. Ben-David", "C. Eisner", "Y. Rodeh"], "venue": "Formal Methods in System Design", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2001}, {"title": "Efficient automatic STE refinement using responsibility", "author": ["H. Chockler", "O. Grumberg", "A. Yadgar"], "venue": "Proc. 14th Conference on Tools and Algorithms for the Construction and Analysis of Systems,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2008}, {"title": "Responsibility and blame: a structural-model approach", "author": ["J.Y.H. Chockler"], "venue": "Journal of Artificial Intelligence Research (JAIR)", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2004}, {"title": "Coverage of Implementations by Simulating Specifications", "author": ["H. Chockler", "O. Kupferman"], "venue": "editors: Proceedings of 2nd IFIP International Conference on Theoretical Computer Science, IFIP Conference Proceedings", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2002}, {"title": "A Practical Approach to Coverage in Model Checking", "author": ["H. Chockler", "O. Kupferman", "M.Y.R.P. Kurshan"], "venue": "Computer Aided Verification, Proc. 13th International Conference, Lecture Notes in Computer Science 2102,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2001}, {"title": "Coverage Metrics for Temporal Logic Model Checking. In: Tools and algorithms for the construction and analysis of systems, Lecture Notes in Computer Science 2031", "author": ["H. Chockler", "M.Y.O. Kupferman"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2001}, {"title": "Coverage Metrics for Formal Verification. In: Correct Hardware Design and Verification Methods (CHARME), Lecture Notes in Computer Science 2860", "author": ["H. Chockler", "M.Y.O. Kupferman"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2003}, {"title": "Causal analysis for attributing responsibility in legal cases", "author": ["Hana Chockler", "Norman E. Fenton", "Jeroen Keppens", "David A. Lagnado"], "venue": "Proceedings of the 15th International Conference on Artificial Intelligence and Law, ICAIL, ACM,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "What causes a system to satisfy a specification", "author": ["Hana Chockler", "Joseph Y. Halpern", "Orna Kupferman"], "venue": "ACM Trans. Comput. Log", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2008}, {"title": "Efficient generation of counterexamples and witnesses in symbolic model checking", "author": ["E.M. Clarke", "O. Grumberg", "K.L. McMillan", "X. Zhao"], "venue": "Proc. 32nd Design Automation Conference, IEEE Computer Society,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1995}, {"title": "Two concepts of causation", "author": ["N. Hall"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2004}, {"title": "Causes and explanations: A structural-model approach. Part I: Causes", "author": ["J.Y. Halpern", "J. Pearl"], "venue": "British Journal for Philosophy of Science", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2005}, {"title": "A Modification of the Halpern-Pearl Definition of Causality", "author": ["Joseph Y. Halpern"], "venue": "Proceedings of the Twenty-Fourth International Joint Conference on Artificial Intelligence,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2015}, {"title": "Coverage estimation for symbolic model checking", "author": ["Y. Hoskote", "T. Kam", "P.-H Ho", "X. Zhao"], "venue": "Proc. 36th Design automation conference,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1999}, {"title": "A treatise of human nature", "author": ["D. Hume"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1939}, {"title": "Sanity Checks in Formal Verification", "author": ["O. Kupferman"], "venue": "Proc. 17th International Conference on Concurrency Theory, Lecture Notes in Computer Science 4137,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2006}, {"title": "Vacuity detection in temporal model checking", "author": ["M.Y.O. Kupferman"], "venue": "Journal on Software Tools For Technology Transfer", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2003}, {"title": "Causal responsibility and counterfactuals", "author": ["D.A. Lagnado", "R.T. Gerstenberg"], "venue": "Zultan", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2013}, {"title": "Hints on test data selection: Help for the practicing programmer", "author": ["R.A. De Millo", "F.G.R.J. Lipton"], "venue": "Sayward", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 1978}, {"title": "Constraint-based automatic test data generation", "author": ["A.J.R.A. De Millo"], "venue": "Offutt", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 1991}, {"title": "An Industrially Effective Environment for Formal Hardware Verification", "author": ["C.-J.H. Seger", "R.B. Jones", "J.W. O\u2019Leary", "T.F. Melham", "M. Aagaard", "C. Barrett", "D. Syme"], "venue": "IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2005}, {"title": "Coverage Metrics for Functional Validation of Hardware Designs", "author": ["S. Tasiran", "K. Keutzer"], "venue": "IEEE Design and Test of Computers", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2001}], "referenceMentions": [{"referenceID": 13, "context": "The definition of causality given by Halpern and Pearl [15], like other definitions of causality in the philosophy literature going back to Hume [19], is based on counterfactual dependence.", "startOffset": 55, "endOffset": 59}, {"referenceID": 16, "context": "The definition of causality given by Halpern and Pearl [15], like other definitions of causality in the philosophy literature going back to Hume [19], is based on counterfactual dependence.", "startOffset": 145, "endOffset": 149}, {"referenceID": 12, "context": "For example, suppose that Suzy and Billy both pick up rocks and throw them at a bottle ( the example is due to Hall [14]).", "startOffset": 116, "endOffset": 120}, {"referenceID": 12, "context": "(This story is taken from [14].", "startOffset": 26, "endOffset": 30}, {"referenceID": 13, "context": "This problem is dealt with in [15] by, roughly speaking, taking A to be a cause of B if B counterfactually depends on A under some contingency.", "startOffset": 30, "endOffset": 34}, {"referenceID": 4, "context": "The concept of responsibility, introduced in [5], presents a way to quantify causality and hence the ability to measure the degree of influence (aka \u201cthe degree of responsibility\u201d) of different causes on the outcome.", "startOffset": 45, "endOffset": 48}, {"referenceID": 11, "context": "These counterexamples are used for debugging the system, as they demonstrate an example of an erroneous behaviour [13].", "startOffset": 114, "endOffset": 118}, {"referenceID": 1, "context": "As I describe in more details in the following sections, the causal analysis of counterexamples, described in [2], is an integral part of an industrial hardware verification platform RuleBase of IBM [25].", "startOffset": 110, "endOffset": 113}, {"referenceID": 17, "context": "On the other hand, if the answer is positive, the tools usually perform some type of a sanity check, to verify that the positive result was not caused by an error or underspecification (see [20] for a survey).", "startOffset": 190, "endOffset": 194}, {"referenceID": 2, "context": "[3] as a situation, where the property passes in a \u201cnon-interesting way\u201d, that is, a part of a property does not affect the model checking procedure in the system.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "state that vacuity was a serious problem in verification of hardware designs at IBM: \u201cour experience has shown that typically 20% of specifications pass vacuously during the first formal-verification runs of a new hardware design, and that vacuous passes always point to a real problem in either the design or its specification or environment\u201d [3].", "startOffset": 344, "endOffset": 347}, {"referenceID": 18, "context": "The general vacuity problem was formalised by Kupferman and Vardi, who defined a vacuous pass as a pass, where some subformula of the original property can be replaced by its\u22a5 value without affecting the satisfaction of the property in the system [21], and there is a plethora of subsequent papers and definitions addressing different aspects and nuances of vacuous satisfaction.", "startOffset": 247, "endOffset": 251}, {"referenceID": 23, "context": "Coverage check is a concept \u201cborrowed\u201d from testing and simulation-based verification, where various coverage metrics are traditionally used as heuristic measures of exhaustiveness of the verification procedure [29].", "startOffset": 211, "endOffset": 215}, {"referenceID": 15, "context": "[18], and formalized in [8, 7, 6, 9].", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "[18], and formalized in [8, 7, 6, 9].", "startOffset": 24, "endOffset": 36}, {"referenceID": 6, "context": "[18], and formalized in [8, 7, 6, 9].", "startOffset": 24, "endOffset": 36}, {"referenceID": 5, "context": "[18], and formalized in [8, 7, 6, 9].", "startOffset": 24, "endOffset": 36}, {"referenceID": 8, "context": "[18], and formalized in [8, 7, 6, 9].", "startOffset": 24, "endOffset": 36}, {"referenceID": 10, "context": "All these requests will be considered not covered by the mutation coverage metric, as changing each one of them separately to false does not falsify the property; and yet, each of these requests plays a role in the satisfaction of the specification (or, using the notions from causality, for each request there exists a contingency that creates a counterfactual dependence between this request and the satisfaction of the specification) [11].", "startOffset": 437, "endOffset": 441}, {"referenceID": 10, "context": "While, as I discuss in more detail below, the full-blown responsibility computation is intractable for all but very small systems, introducing a threshold on the value of responsibility, in order to detect only the most influential causes, reduces the complexity and makes the computation manageable for real systems [11].", "startOffset": 317, "endOffset": 321}, {"referenceID": 3, "context": "The quantification provided by the notion of responsibility and the distinction between influential and non-influential causes have been applied to the symbolic trajectory evaluation, where ordering the causes by their degree of responsibility was demonstrated to be a good heuristic for instantiating a minimal number of variables that is sufficient to determine the output value of the circuit [4].", "startOffset": 396, "endOffset": 399}, {"referenceID": 13, "context": "In this section, I briefly review the details of Halpern and Pearl\u2019s definition (HP) of causal models and causality [15] and the definitions of responsibility and blame [5] in causal models.", "startOffset": 116, "endOffset": 120}, {"referenceID": 4, "context": "In this section, I briefly review the details of Halpern and Pearl\u2019s definition (HP) of causal models and causality [15] and the definitions of responsibility and blame [5] in causal models.", "startOffset": 169, "endOffset": 172}, {"referenceID": 13, "context": "1 (Cause [15]) ~X =~x is a cause of \u03c6 in (M,~u) if the following three conditions hold:", "startOffset": 9, "endOffset": 13}, {"referenceID": 14, "context": "We note that Halpern recently updated the definition of causality, changing the concept to focus on the variables that are frozen in their original values, rather than considering contingencies [16].", "startOffset": 194, "endOffset": 198}, {"referenceID": 4, "context": "The notion of degree of responsibility, introduced by Chockler and Halpern [5], extends the notion of causality to capture the differences in the degree of criticality of causes.", "startOffset": 75, "endOffset": 78}, {"referenceID": 19, "context": "This notion of degree of responsibility has been shown to capture (at a qualitative level) the way people allocate responsibility [22].", "startOffset": 130, "endOffset": 134}, {"referenceID": 4, "context": "2 (Degree of Responsibility [5]) The degree of responsibility of ~X = ~x for \u03c6 in (M,~u), denoted dr((M,~u),(~X \u2190~x),\u03c6), is 0 if ~X =~x is not a cause of \u03c6 in (M,~u); it is 1/(k+ 1) if ~X =~x is a cause of \u03c6 in (M,~u) according to Definition 2.", "startOffset": 28, "endOffset": 31}, {"referenceID": 4, "context": "responsibility [5].", "startOffset": 15, "endOffset": 18}, {"referenceID": 4, "context": "3 (Blame [5]) The degree of blame of setting ~X to~x for \u03c6 relative to epistemic state (K,Pr), denoted db(K,Pr,~X \u2190 ~x,\u03c6), is defined as an expected value of the degree of responsibility over the probability space (K,Pr).", "startOffset": 9, "endOffset": 12}, {"referenceID": 20, "context": "The following definition of coverage is based on the study of mutant coverage in simulation-based verification [23, 24, 1], and is the one that is adopted in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]).", "startOffset": 111, "endOffset": 122}, {"referenceID": 21, "context": "The following definition of coverage is based on the study of mutant coverage in simulation-based verification [23, 24, 1], and is the one that is adopted in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]).", "startOffset": 111, "endOffset": 122}, {"referenceID": 0, "context": "The following definition of coverage is based on the study of mutant coverage in simulation-based verification [23, 24, 1], and is the one that is adopted in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]).", "startOffset": 111, "endOffset": 122}, {"referenceID": 15, "context": "The following definition of coverage is based on the study of mutant coverage in simulation-based verification [23, 24, 1], and is the one that is adopted in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]).", "startOffset": 253, "endOffset": 269}, {"referenceID": 7, "context": "The following definition of coverage is based on the study of mutant coverage in simulation-based verification [23, 24, 1], and is the one that is adopted in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]).", "startOffset": 253, "endOffset": 269}, {"referenceID": 6, "context": "The following definition of coverage is based on the study of mutant coverage in simulation-based verification [23, 24, 1], and is the one that is adopted in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]).", "startOffset": 253, "endOffset": 269}, {"referenceID": 5, "context": "The following definition of coverage is based on the study of mutant coverage in simulation-based verification [23, 24, 1], and is the one that is adopted in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]).", "startOffset": 253, "endOffset": 269}, {"referenceID": 8, "context": "The following definition of coverage is based on the study of mutant coverage in simulation-based verification [23, 24, 1], and is the one that is adopted in all (or almost all) papers on coverage metrics in formal verification today (see, for example, [18, 8, 7, 6, 9]).", "startOffset": 253, "endOffset": 269}, {"referenceID": 10, "context": "On the other hand, representing the model checking procedure as a causal model with a context corresponding to the actual values of atomic propositions in states (see [11] for a formal description of this representation), demonstrates that for each state there exists a contingency where the result counterfactually depends on the value of grant in this state; the contingency is removing grants in the two other states.", "startOffset": 167, "endOffset": 171}, {"referenceID": 1, "context": "present a method and a tool for explaining the trace, without involving the model from which it was extracted [2].", "startOffset": 110, "endOffset": 113}, {"referenceID": 1, "context": "The reader is referred to [2] for more details of the implementation.", "startOffset": 26, "endOffset": 29}, {"referenceID": 22, "context": "STE is successfully used in the hardware industry for verifying very large models with wide data paths [28, 26, 30].", "startOffset": 103, "endOffset": 115}, {"referenceID": 3, "context": "To avoid the need for manual refinement (which requires a close familiarity with the structure of the circuit), [4] suggest to compute an approximation of the degree of responsibility of each node in the value of the output circuit.", "startOffset": 112, "endOffset": 115}, {"referenceID": 3, "context": "The algorithm was implemented in Intel STE framework for hardware verification and demonstrated better results than manual refinement [4].", "startOffset": 134, "endOffset": 137}, {"referenceID": 13, "context": "As [15] points out, the legal system does not agree with the structural definitions of causality, responsibility, and blame.", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "In [10], we make the case of using the framework of actual causality in order to guide legal inquiry.", "startOffset": 3, "endOffset": 7}], "year": 2016, "abstractText": "The theory of actual causality, defined by Halpern and Pearl, and its quantitative measure \u2013 the degree of responsibility \u2013 was shown to be extremely useful in various areas of computer science due to a good match between the results it produces and our intuition. In this paper, I describe the applications of causality to formal verification, namely, explanation of counter-examples, refinement of coverage metrics, and symbolic trajectory evaluation. I also briefly discuss recent applications of causality to legal reasoning.", "creator": "LaTeX with hyperref package"}}}