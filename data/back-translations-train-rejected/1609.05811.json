{"id": "1609.05811", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Sep-2016", "title": "Temporal Logic Programs with Variables", "abstract": "In this note we consider the problem of introducing variables in temporal logic programs under the formalism of \"Temporal Equilibrium Logic\" (TEL), an extension of Answer Set Programming (ASP) for dealing with linear-time modal operators. To this aim, we provide a definition of a first-order version of TEL that shares the syntax of first-order Linear-time Temporal Logic (LTL) but has a different semantics, selecting some LTL models we call \"temporal stable models\". Then, we consider a subclass of theories (called \"splittable temporal logic programs\") that are close to usual logic programs but allowing a restricted use of temporal operators. In this setting, we provide a syntactic definition of \"safe variables\" that suffices to show the property of \"domain independence\" -- that is, addition of arbitrary elements in the universe does not vary the set of temporal stable models. Finally, we present a method for computing the derivable facts by constructing a non-temporal logic program with variables that is fed to a standard ASP grounder. The information provided by the grounder is then used to generate a subset of ground temporal rules which is equivalent to (and generally smaller than) the full program instantiation.", "histories": [["v1", "Mon, 19 Sep 2016 16:11:49 GMT  (40kb)", "http://arxiv.org/abs/1609.05811v1", "Under consideration in Theory and Practice of Logic Programming (TPLP)"]], "COMMENTS": "Under consideration in Theory and Practice of Logic Programming (TPLP)", "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["felicidad aguado", "pedro cabalar", "mart\\'in di\\'eguez", "gilberto p\\'erez", "concepci\\'on vidal"], "accepted": false, "id": "1609.05811"}, "pdf": {"name": "1609.05811.pdf", "metadata": {"source": "CRF", "title": "Temporal Logic Programs with Variables", "authors": ["Felicidad Aguado", "Pedro Cabalar", "Mart\u0301\u0131n Di\u00e9guez", "Gilberto P\u00e9rez", "Concepci\u00f3n Vidal", "F. Aguado", "P. Cabalar", "M. Di\u00e9guez", "G. P\u00e9rez", "C. Vidal"], "emails": ["aguado@udc.es", "cabalar@udc.es", "gperez@udc.es", "eicovima@udc.es", "martin.dieguez@irit.fr"], "sections": [{"heading": null, "text": "ar Xiv: 160 9.05 811v 1"}, {"heading": "Under consideration in Theory and Practice of Logic Programming (TPLP)", "text": "Key concepts: Artificial intelligence; knowledge representation; time logic; grounding; logic programming; response set programming"}, {"heading": "1 Introduction", "text": "In fact, most of them are able to determine for themselves what they want and what they want."}, {"heading": "3 Temporal Quantified Equilibrium Logic", "text": "Syntactically, we look at function-free first order formulas L = < C, P > using a series of constant symbols, C, and a series of predicate symbols, P. < C, P > formula F is defined according to the following grammar: F: = p | F, F, F2, F2, F2, F2, F, F, F, F, xF (x), where p, P, P, is an atom, x is a variable and \u00a9, and we each stand for \"next,\" always, \"and\" last. \"A theory is a finite formula. We use the following derivative operators: \u00ac F def = F, the def = F, the def = (F, G, G) def = (G, G, F) for any formula."}, {"heading": "4 Safe Variables and Domain Independence", "text": "In this section we will consider a definition of safe variables for temporal programs that contain references to static predicates.Definition 5 A divisible time formula of type (1), (2) or (3) is considered safe if the divisible time formula (8) - (12) is secure.A simple example of an uncertain rule is the divisible time formula (1), if the divisible time formula (13) is secure.Although an uncertain rule does not always lead to a lack of domain independence (see examples in (Cabalar et al. 2009), it is often the case. A simple example of an uncertain rule is the divisible time formula: p (x) (13), where x does not occur in the positive body. Although an uncertain rule does not always lead to a lack of domain independence (see examples in (Gralar et al. 2009), it is often the case."}, {"heading": "5 Derivable ground facts", "text": "In this section, we present a technique for grounding secure temporal programs based on the construction of a positive normal ASP program with variables. (...) The method is based on the idea of derivable temporal facts for an STL program. (...) The ideal situation would, of course, be that the whole set of possible temporal facts (...), but the setting of CredFacts (...) requires the temporal stable models of (...) and these (apart from the fact that infinite sequences will not be available). (...) In the worst case, we could opt for the whole set of possible temporal facts, but this would not provide any relevant information to improve the grounding. (...) We will try to obtain some supersets of CredFacts (...) as small as possible, or if we prefer to obtain the largest non-derivable facts."}, {"heading": "6 Conclusions", "text": "We have improved the grounding method for temporal logic programs with variables in different ways. First, we have provided a safety condition that directly corresponds to the extrapolation of the usual concept of safe variables in ASP. Thus, any variable that occurs in a rule is considered safe, even if it occurs in the positive body of the rule, regardless of the possible extent of the time operators and the removal of the previous dependence on the use of static predicates. We have also designed a method of grounding the temporal logic program, which consists in constructing a non-time normal positive program with variables fed to an ASP solver in order to obtain the possible new arbitrary constants to the universe.We have also designed a method of grounding the temporal logic program, which consists of creating a non-time normal positive program with variables fed to an ASP solver in order to directly obtain the set of variable substitutions that are to be performed for each rule."}, {"heading": "Appendix. Proofs", "text": "The proof for Proposition 3: Consider the extended program. This is an infinitely positive (non-temporal) logic program. Using the known results of (van Emden and Kowalski 1976), we know that it has a Herbrand model LM that can contain an infinite set of atoms in the signature of ground-time facts. Furthermore, its unique stable model due to its positive signature is exactly I. In the face of any set of ground-time facts, we can have a one-to-one correspondence to an LTL interpretation I with facts (I) = I. Through Theorem 1, J is a stable model of facts (J) = J, with facts (J) = J is a time-stable model of ground-time facts. Finally, since I have the unique stable model of ground-time facts (I) = I. Through Theorem 1, J is a stable model of ground-time facts (J = facts) with facts (J = J) is a ground-time model of facts (J = J)."}, {"heading": "Proof", "text": "First, let's take the following formula: < T > | C, T > | C, T > 6 | = H\u00b5. Since < T, T > | 6 | = H\u00b5, there is an atomic formula q in H, so < T > | = q\u00b5 but < T | C, T > 6 | = q\u00b5. So we have a variable x in q with \u00b5 (x) 6 \u00b2 (C). As a certainty, we know that x in an atomic formula p in B. Then < T | C, T > 6 | = p\u00b5 and < T | C, T > 6 | = lt;"}, {"heading": "Proof", "text": "If n = 0, we can take any \u00b5 assignment of variables and apply Lemma 1 to n = \u00b5. If < (D, \u03c3), T, T > | = 1..................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................."}, {"heading": "Proof", "text": "First of all, let's assume that the x-formula is of type (1): B-N-Hand takes d-D-\u03c3 (C) and w-H-T such that < (D-H), w-6 | = H (d). This means that < (D-H), w-N (d), but < (D-H), w-6 | = H (d) is safe, so that there must be an atom p in B so that x has an occurrence in p. Since T0 At (C), P), it is clear that < (D-H), w-T > 6 | = p (d), that is < (D-H), w-H, T > 6 | = B-B (d), which results in a contradiction, it is clear that < (D-H), w-H, T > 6 | = p (d), that is < (D-H-H), so < (D-H) that we do not have such a formula."}, {"heading": "Proof", "text}, {"heading": "Proof", "text": "From left to right we assume that M | = \u00b2. By the 6th proposition we know that M | = GrD (\u00b2). The result follows since \u03c3 (C) D and GrC (\u00b2) = Gr\u03c3 (C) (\u00b2). Now we can proceed from right to left by induction into n. If n = 0, then the quantifier is free, so that GrC (\u00b2) =... Let us assume the result applies to any safe divisible proposition with a length up to n \u2212 1 and set it to \u03b1 (x1) = x2. Let us suppose that the result applies to any safe proposition with a length up to n \u2212 1. Let us suppose that \u03b1 (x1) is a safe time formula that does not have freer variables than x < < so if we apply Lemma 3, then it is sufficient that this proposition (x1, x2,)."}, {"heading": "Proof", "text": "Let's assume that < (D, \u03c3), T, T > is a temporal equilibrium model of \"and\" and \"and < (D, \u03c3), H, T > | = GrC.\" Since \"s is certain, according to Theorem 2, we know that\" T \"and\" C \"is also a temporal equilibrium model of\" GrC. \"The other implication is directly derived from the fact that < (D, \u03c3),\" H, \"D\" and \"H\" implies < (D, \u03c3), \"H,\" T > | = GrC. \"Proof\" Theorem 3. \"Let's show that the following assertions are equivalent: 1. < (D, < T > a temporal equilibrium model of\" and \"D.\""}, {"heading": "Proof", "text": "We're going to prove that < T > > and so < T > and so, T > and so, T > and so, T > and so, T > and so, that we know that < T > and so, T > and so, that < T > and so, that < T > and so, that we know that < T > and so, that < T > and so. < T > and so, that < T > and so. < T > and so. < T > and so. < T > and so. < T > and so. < T > and so."}], "references": [{"title": "Strongly equivalent temporal logic programs", "author": ["F. Aguado", "P. Cabalar", "G. P\u00e9rez", "C. Vidal"], "venue": "JELIA\u201908. Lecture Notes in Computer Science, vol. 5293. Springer, 8\u201320.", "citeRegEx": "Aguado et al\\.,? 2008", "shortCiteRegEx": "Aguado et al\\.", "year": 2008}, {"title": "Loop formulas for splitable temporal logic programs", "author": ["F. Aguado", "P. Cabalar", "G. P\u00e9rez", "C. Vidal"], "venue": "LPNMR\u201911, J. P. Delgrande and W. Faber, Eds. Lecture Notes in Computer Science, vol. 6645. Springer, 80\u201392.", "citeRegEx": "Aguado et al\\.,? 2011", "shortCiteRegEx": "Aguado et al\\.", "year": 2011}, {"title": "On the complexity of temporal equilibrium logic", "author": ["L. Bozzelli", "D. Pearce"], "venue": "Proc. of the 30th Annual ACM/IEEE Symp. on Logic in Computer Science, (LICS\u201915). IEEE Computer Society, 645\u2013656.", "citeRegEx": "Bozzelli and Pearce,? 2015", "shortCiteRegEx": "Bozzelli and Pearce", "year": 2015}, {"title": "Normal form nested programs", "author": ["A. Bria", "W. Faber", "N. Leone"], "venue": "Proc. of the 11th European Conference on Logics in Artificial Intelligence (JELIA\u201908), S. H. et al, Ed. Lecture Notes in Artificial Intelligence. Springer, 76\u201388.", "citeRegEx": "Bria et al\\.,? 2008", "shortCiteRegEx": "Bria et al\\.", "year": 2008}, {"title": "STELP - a tool for temporal answer set programming", "author": ["P. Cabalar", "M. Di\u00e9guez"], "venue": "LPNMR\u201911. Lecture Notes in Computer Science, vol. 6645. Springer, 370\u2013375.", "citeRegEx": "Cabalar and Di\u00e9guez,? 2011", "shortCiteRegEx": "Cabalar and Di\u00e9guez", "year": 2011}, {"title": "A revised concept of safety for general answer set programs", "author": ["P. Cabalar", "D. Pearce", "A. Valverde"], "venue": "Proc. of the 10th Int. Conf. Logic Programming and Nonmonotonic Reasoning (LPNMR\u201909). Lecture Notes in Computer Science, vol. 5753. Springer, 58\u201370.", "citeRegEx": "Cabalar et al\\.,? 2009", "shortCiteRegEx": "Cabalar et al\\.", "year": 2009}, {"title": "ASP-core-2 input language format", "author": ["F. Calimeri", "W. Faber", "M. Gebser", "G. Ianni", "R. Kaminski", "T. Krennwallner", "N. Leone", "F. Ricca", "T. Schaub"], "venue": "https://www.mat.unical.it/aspcomp2013/files/ASP-CORE-2.03c.pdf.", "citeRegEx": "Calimeri et al\\.,? 2015", "shortCiteRegEx": "Calimeri et al\\.", "year": 2015}, {"title": "Advances in gringo series", "author": ["M. Gebser", "R. Kaminski", "A. K\u00f6nig", "T. Schaub"], "venue": null, "citeRegEx": "Gebser et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Gebser et al\\.", "year": 2011}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Logic Programming: Proc. of the Fifth International Conference and Symposium (Volume 2), R. A. Kowalski and K. A. Bowen, Eds. MIT Press, Cambridge, MA, 1070\u20131080.", "citeRegEx": "Gelfond and Lifschitz,? 1988", "shortCiteRegEx": "Gelfond and Lifschitz", "year": 1988}, {"title": "The dlv system for knowledge representation and reasoning", "author": ["N. Leone", "G. Pfeifer", "W. Faber", "T. Eiter", "G. Gottlob", "S. Perri", "F. Scarcello"], "venue": "ACM Transactions on Computational Logic 7, 499\u2013562.", "citeRegEx": "Leone et al\\.,? 2006", "shortCiteRegEx": "Leone et al\\.", "year": 2006}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V. Marek", "M. Truszczy\u0144ski"], "venue": "Springer-Verlag, 169\u2013181.", "citeRegEx": "Marek and Truszczy\u0144ski,? 1999", "shortCiteRegEx": "Marek and Truszczy\u0144ski", "year": 1999}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 241\u2013273.", "citeRegEx": "Niemel\u00e4,? 1999", "shortCiteRegEx": "Niemel\u00e4", "year": 1999}, {"title": "A new logical characterisation of stable models and answer sets", "author": ["D. Pearce"], "venue": "Non monotonic extensions of logic programming. Proc. NMELP\u201996. (LNAI 1216). SpringerVerlag.", "citeRegEx": "Pearce,? 1996", "shortCiteRegEx": "Pearce", "year": 1996}, {"title": "Equilibrium logic", "author": ["D. Pearce"], "venue": "Annals of Mathematics and Artificial Intelligence 47, 1-2, 3\u201341.", "citeRegEx": "Pearce,? 2006", "shortCiteRegEx": "Pearce", "year": 2006}, {"title": "The temporal logic of programs", "author": ["A. Pnueli"], "venue": "18th Annual Symposium on Foundations of Computer Science. IEEE Computer Society Press, 46\u201357.", "citeRegEx": "Pnueli,? 1977", "shortCiteRegEx": "Pnueli", "year": 1977}, {"title": "The semantics of predicate logic as a programming language", "author": ["M.H. van Emden", "R.A. Kowalski"], "venue": "Journal of the ACM", "citeRegEx": "Emden and Kowalski,? \\Q1976\\E", "shortCiteRegEx": "Emden and Kowalski", "year": 1976}, {"title": "Theorem 7 (Theorem 3 in (Aguado et al. 2011)) Let \u3008T,T\u3009 be a model of a splittable TLP \u03a0. \u3008T,T\u3009 is a temporal equilibrium model of \u03a0", "author": ["F. Aguado", "P. Cabalar", "M. Di\u00e9guez", "G. P\u00e9rez", "C. Vidal"], "venue": null, "citeRegEx": "Aguado et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Aguado et al\\.", "year": 2011}], "referenceMentions": [{"referenceID": 11, "context": "Many application domains and example scenarios from Answer Set Programming (ASP) (Niemel\u00e4 1999; Marek and Truszczy\u0144ski 1999) contain a dynamic component, frequently representing transition systems over discrete time.", "startOffset": 81, "endOffset": 124}, {"referenceID": 10, "context": "Many application domains and example scenarios from Answer Set Programming (ASP) (Niemel\u00e4 1999; Marek and Truszczy\u0144ski 1999) contain a dynamic component, frequently representing transition systems over discrete time.", "startOffset": 81, "endOffset": 124}, {"referenceID": 0, "context": "In an attempt to provide a full logical framework for temporal reasoning in ASP, (Aguado et al. 2008) proposed a formalism called Temporal Equilibrium Logic (TEL), syntactically identical to propositional Linear-time Temporal Logic (LTL) (Pnueli 1977), but semantically relying on a temporal extension of Equilibrium Logic (Pearce 1996), the most", "startOffset": 81, "endOffset": 101}, {"referenceID": 14, "context": "2008) proposed a formalism called Temporal Equilibrium Logic (TEL), syntactically identical to propositional Linear-time Temporal Logic (LTL) (Pnueli 1977), but semantically relying on a temporal extension of Equilibrium Logic (Pearce 1996), the most", "startOffset": 142, "endOffset": 155}, {"referenceID": 12, "context": "2008) proposed a formalism called Temporal Equilibrium Logic (TEL), syntactically identical to propositional Linear-time Temporal Logic (LTL) (Pnueli 1977), but semantically relying on a temporal extension of Equilibrium Logic (Pearce 1996), the most", "startOffset": 227, "endOffset": 240}, {"referenceID": 8, "context": "general and best studied logical characterisation of stable models (Gelfond and Lifschitz 1988).", "startOffset": 67, "endOffset": 95}, {"referenceID": 1, "context": "In (Aguado et al. 2011) a reduction of (propositional) TEL into regular LTL was presented, but applicable to a subclass of temporal theories called splittable Temporal Logic Programs.", "startOffset": 3, "endOffset": 23}, {"referenceID": 4, "context": "The reduction was implemented in a tool, STeLP (Cabalar and Di\u00e9guez 2011), that computes the temporal stable models of a given program, that are shown as a B\u00fcchi automaton.", "startOffset": 47, "endOffset": 73}, {"referenceID": 1, "context": "Although the approach in (Aguado et al. 2011) was exclusively propositional, the input language of STeLP was extended with variables.", "startOffset": 25, "endOffset": 45}, {"referenceID": 3, "context": "Last, but not least, the treatment of variables had no formal background and had not been proved to be sound with respect to the important property of domain independence (Bria et al. 2008) \u2013 essentially, a program is domain independent when its stable models do not vary under the arbitrary addition of new constants.", "startOffset": 171, "endOffset": 189}, {"referenceID": 9, "context": "org/stelp_online 2 This definition of safety, initially introduced in DLV (Leone et al. 2006) has been adopted in the standard ASP-Core-2 (Calimeri et al.", "startOffset": 74, "endOffset": 93}, {"referenceID": 6, "context": "2006) has been adopted in the standard ASP-Core-2 (Calimeri et al. 2015) and also followed by Gringo (Gebser et al.", "startOffset": 50, "endOffset": 72}, {"referenceID": 7, "context": "2015) and also followed by Gringo (Gebser et al. 2011).", "startOffset": 34, "endOffset": 54}, {"referenceID": 13, "context": "A property of TEL directly inherited from Equilibrium Logic (see Proposition 5 in (Pearce 2006)) is the following:", "startOffset": 82, "endOffset": 95}, {"referenceID": 1, "context": "Theorem 1 (Theorem 1 in (Aguado et al. 2011)) \u3008T,T\u3009 is a temporal equilibrium model of \u03a0 iff {\u00a9p | p \u2208 Ti, i \u2265 0} is a stable model of \u03a0 under the (infinite) signature {\u00a9p | p \u2208 At}.", "startOffset": 24, "endOffset": 44}, {"referenceID": 5, "context": "Although an unsafe rule does not always lead to lack of domain independence (see examples in (Cabalar et al. 2009)) it is frequently the case.", "startOffset": 93, "endOffset": 114}], "year": 2016, "abstractText": "In this note we consider the problem of introducing variables in temporal logic programs under the formalism of Temporal Equilibrium Logic (TEL), an extension of Answer Set Programming (ASP) for dealing with linear-time modal operators. To this aim, we provide a definition of a first-order version of TEL that shares the syntax of first-order Linear-time Temporal Logic (LTL) but has a different semantics, selecting some LTL models we call temporal stable models. Then, we consider a subclass of theories (called splittable temporal logic programs) that are close to usual logic programs but allowing a restricted use of temporal operators. In this setting, we provide a syntactic definition of safe variables that suffices to show the property of domain independence \u2013 that is, addition of arbitrary elements in the universe does not vary the set of temporal stable models. Finally, we present a method for computing the derivable facts by constructing a non-temporal logic program with variables that is fed to a standard ASP grounder. The information provided by the grounder is then used to generate a subset of ground temporal rules which is equivalent to (and generally smaller than) the full program instantiation. Under consideration in Theory and Practice of Logic Programming (TPLP)", "creator": "LaTeX with hyperref package"}}}