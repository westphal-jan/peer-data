{"id": "1610.04964", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Oct-2016", "title": "Improvements in Sub-optimal Solving of the $(N^2-1)$-Puzzle via Joint Relocation of Pebbles and its Applications to Rule-based Cooperative Path-Finding", "abstract": "The problem of solving $(n^2-1)$-puzzle and cooperative path-finding (CPF) sub-optimally by rule based algorithms is addressed in this manuscript. The task in the puzzle is to rearrange $n^2-1$ pebbles on the square grid of the size of n x n using one vacant position to a desired goal configuration. An improvement to the existent polynomial-time algorithm is proposed and experimentally analyzed. The improved algorithm is trying to move pebbles in a more efficient way than the original algorithm by grouping them into so-called snakes and moving them jointly within the snake. An experimental evaluation showed that the algorithm using snakes produces solutions that are 8% to 9% shorter than solutions generated by the original algorithm.", "histories": [["v1", "Mon, 17 Oct 2016 03:29:42 GMT  (1833kb)", "http://arxiv.org/abs/1610.04964v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["pavel surynek", "petr michal\\'ik"], "accepted": false, "id": "1610.04964"}, "pdf": {"name": "1610.04964.pdf", "metadata": {"source": "CRF", "title": "Improvements in Sub-optimal Solving of the (N \u2212 1)-Puzzle via Joint Relocation of Pebbles and its Applications to Rule-based Cooperative Path-Finding", "authors": ["Pavel Surynek", "Petr Michal\u00edk"], "emails": ["pavel.surynek@mff.cuni.cz,", "petr.michalik@accenture.com"], "sections": [{"heading": null, "text": "The improved algorithm attempts to move pebbles in a more efficient way than the original algorithm by grouping them into so-called snakes and moving them together within the snake. An experimental evaluation has shown that the algorithm that uses snakes produces solutions that are 8 to 9 percent shorter than solutions generated by the original algorithm. Snake-based displacement has also been integrated into rule-based algorithms for suboptimal resolution of the CPF problem, which is a closely related task. In the CPF, the task is to create a group of abstract robots that move across an undirected graph to predetermined target vertebrae points. Robots can move into unoccupied adjacent vertebrae points and at most one robot can be placed in each node."}, {"heading": "1. Introduction and Motivation", "text": "In fact, most of them are able to determine for themselves what they want and what they want."}, {"heading": "2. Problem Statement", "text": "The (2 \u2212 1) definition 1 (grid configuration) consists of a series of pebbles moved over a square grid of size (1, 13, 16, 17, 44). (1) The task is to move pebbles on the grid to a desired target. (2) Formal definition sets of pebbles are referred to as cipheres for the respective position. () It is assumed that pebbles are arranged from a square grid of size in which each pebble is placed in one of the cells of the grid. There is at most one pebble in each cell of the grid; a cell in the grid always remains empty (Figure 1).Definition 1 (grid configuration), where each pebble is placed in one of the cells of the grid."}, {"heading": "3. The Original Solving Algorithm and Related Works", "text": "A special sub-optimal solution algorithm is represented in pseudo-code as algorithm 1, and the two high functions of the algorithm are then proposed by Parberry (13). Since our new solution algorithm is based on the framework of the original algorithm, we must retrieve it at least briefly in this section, which reduces the instance to the same type but is smaller - that is, we obtain an instance of the (1) puzzle in rows and columns. (1) This process of placing the Pebble is repeated until an 8 puzzle of size 3 x 3 is repeated, and the final case of the 8 puzzle is then optimally solved by the A * algorithm."}, {"heading": "4. A New Solving Approach Based on \u2018Snakes\u2019", "text": "In this section, we are about to define a new concept of a so-called snake. [...] A snake is a sequence of pebbles that follow each other. [...] Moving and placing a snake as a whole is much more efficient than moving and placing individual pebbles. [...] In such a case, it is necessary for the empty position to be moved along with the pebbles, and then it is inefficient for two or more pebbles that need to be placed together in one place to be placed at some distance from their destination. [...] It is necessary for the empty position to be placed together with the pebbles and then moved back to the distant location to allow movement of the next pebble. If we manage to move all pebbles from their distant location to their destination positions, it is necessary to eliminate multiple movements of the position between the distant place and the destination."}, {"heading": "5. Application of \u2018Snakes\u2019 in Cooperative Path-Finding", "text": "In fact, most of them are able to survive on their own, while others are able to survive on their own."}, {"heading": "6. Experimental Evaluation", "text": "This year, it has reached the point where it will be able to retaliate."}, {"heading": "7. Conclusions and Future Work", "text": "This year, it is as far as ever in the history of the city, where it is as far as never before."}, {"heading": "Acknowledgments", "text": "This is supported by Charles University in Prague within the framework of the PRVOUK and UNCE projects. We thank the reviewers for their comments, which have significantly helped us to improve our work and provided us with valuable advice."}, {"heading": "Appendix A \u2013 Analysis of the Average Case", "text": "In fact, the fact is that most of them will be able to move to another world, in which they are able, in which they are able to integrate, and in which they are able, in which they are able to change the world."}, {"heading": "Appendix B \u2013 BIBOX Algorithm with Snakes", "text": "In fact, it is the case that one sees oneself in a position to go to another world, in which one must go to another world, in which one must go to another world, in which one must go to another world, in which one must go to another world, in which one must go to another world, in which one goes to another world, in which one goes to another world, in which one feels oneself to be transported back to another world, in which one feels oneself to be transported back to another world."}], "references": [{"title": "Centralized path planning for multiple robots: Optimal decoupling into sequential plans", "author": ["J. van den Berg", "J. Snoeyink", "M.C. Lin", "D. Manocha"], "venue": "Proceedings of Robotics: Science and Systems V, University of Washington,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2009}, {"title": "Multi-Robot Path Finding on Bi-connected Directed Graphs", "author": ["A. Botea", "P. Surynek"], "venue": "Proceedings of the 29th AAAI Conference on Artificial Intelligence (AAAI", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "ICBS: Improved Conflict-Based Search Algorithm for Multi-Agent Pathfinding", "author": ["E. Boyarski", "A. Felner", "R. Stern", "G. Sharon", "D. Tolpin", "O. Betzalel", "S.E. Shimony"], "venue": "Proceedings of the 24th International Joint Conference on Artificial Intelligence (IJCAI", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Don't Split, Try To Work It Out: Bypassing Conflicts in Multi-Agent Pathfinding", "author": ["E. Boyarski", "A. Felner", "G. Sharon", "R. Stern"], "venue": "Proceedings of the Twenty-Fifth International Conference on Automated Planning and Scheduling (ICAPS", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "On Multiple Moving Objects", "author": ["M.A. Erdmann", "T. Lozano-P\u00e9rez"], "venue": "Algorithmica, Volume", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1987}, {"title": "A General Formal Framework for Pathfinding Problems with Multiple Agents", "author": ["E. Erdem", "D.G. Kisa", "U. \u00d6ztok", "P. Sch\u00fcller"], "venue": "Proceedings of the 27th AAAI Conference on Artificial Intelligence (AAAI", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Toward efficient trajectory planning: The path-velocity decomposition", "author": ["K. Kant", "S.W. Zucker"], "venue": "The International Journal of Robotics Research,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1986}, {"title": "A Polynomial-Time Algorithm for NonOptimal Multi-Agent Pathfinding", "author": ["M.M. Khorshid", "R.C. Holte", "N.R. Sturtevant"], "venue": "Proceedings of the 4th Annual Symposium on Combinatorial Search (SOCS", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "Finding Optimal Solutions to the 24-Puzzle", "author": ["R.E. Korf", "L.A. Taylor"], "venue": "Proceedings of the 13th National Conference on Artificial Intelligence (AAAI", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1996}, {"title": "Coordinating Pebble Motion on Graphs, the Diameter of Permutation Groups, and Applications", "author": ["D. Kornhauser", "G.L. Miller", "P.G. Spirakis"], "venue": "Proceedings of the 25th Annual Symposium on Foundations of Computer Science (FOCS", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1984}, {"title": "Push and Swap: Fast Cooperative Path-Finding with Completeness Guarantees", "author": ["R. Luna", "K.E. Bekris"], "venue": "Proceedings of the 22nd International Joint Conference on Artificial Intelligence (IJCAI", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "Sub-optimal Algorithms for Solving Sliding Puzzles", "author": ["P. Michal\u00edk"], "venue": "Master thesis, Charles University in Prague, Czech Republic,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2011}, {"title": "Solving the (n^2 - 1)-Puzzle with 8/3", "author": ["I. Parberry"], "venue": "Expected Moves. Algorithms,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Memory-Efficient Method for Fast Computation of Short 15-Puzzle Solutions", "author": ["I. Parberry"], "venue": "IEEE Transaction on Computational Intelligence and AI in Games, Volume", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2015}, {"title": "Finding a Shortest Solution for the N\u00d7N Extension of the 15-PUZZLE Is Intractable", "author": ["D. Ratner", "M.K. Warmuth"], "venue": "Proceedings of the 5th National Conference on Artificial Intelligence (AAAI", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1986}, {"title": "Artificial Intelligence \u2013 A modern approach", "author": ["S. Russel", "P. Norvig"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2003}, {"title": "Graph Decomposition for Efficient Multi-Robot Path Planning", "author": ["M.R.K. Ryan"], "venue": "Proceedings of the 20th International Joint Conference on Artificial Intelligence (IJCAI", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2007}, {"title": "Exploiting Subgraph Structure in Multi-Robot Path Planning", "author": ["M.R.K. Ryan"], "venue": "Journal of Artificial Intelligence Research (JAIR), Volume", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2008}, {"title": "The increasing cost tree search for optimal multi-agent pathfinding", "author": ["G. Sharon", "R. Stern", "M. Goldenberg", "A. Felner"], "venue": "Artificial Intelligence,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2013}, {"title": "Conflict-based search for optimal multiagent pathfinding", "author": ["G. Sharon", "R. Stern", "A. Felner", "N.R. Sturtevant"], "venue": "Artificial Intelligence,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2015}, {"title": "Cooperative Pathfinding", "author": ["D. Silver"], "venue": "Proceedings of the 1st Artificial Intelligence and Interactive Digital Entertainment Conference (AIIDE", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2005}, {"title": "Finding a Needle in an Exponential Haystack: Discrete RRT for Exploration of Implicit Roadmaps in Multi-robot Motion Planning. Algorithmic Foundations of Robotics XI - Selected Contributions of the 11th International Workshop on the  Improvements in Sub-optimal Solving of the (N^2-1)-Puzzle via Joint Relocation of Pebbles", "author": ["K. Solovey", "O. Salzman", "D. Halperin"], "venue": "Algorithmic Foundations of Robotics, Springer Tracts in Advanced Robotics", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}, {"title": "Finding Optimal Solutions to Cooperative Pathfinding Problems", "author": ["T. Standley"], "venue": "Proceedings of the 24th AAAI Conference on Artificial Intelligence", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2010}, {"title": "A Novel Approach to Path Planning for Multiple Robots in Bi-connected Graphs", "author": ["P. Surynek"], "venue": "Proceedings of the 2009 IEEE International Conference on Robotics and Automation (ICRA", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2009}, {"title": "Towards Shorter Solutions for Problems of Path Planning for Multiple Robots in \u03b8-like Environments", "author": ["P. Surynek"], "venue": "Proceedings of the 22nd International Florida Artificial Intelligence Research Society Conference (FLAIRS", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2009}, {"title": "Making Solutions of Multi-robot Path Planning Problems Shorter Using Weak Transpositions and Critical Path Parallelism", "author": ["P. Surynek"], "venue": "Proceedings of the 2009 International Symposium on Combinatorial Search (SoCS", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2009}, {"title": "An Application of Pebble Motion on Graphs to Abstract Multi-robot Path Planning", "author": ["P. Surynek"], "venue": "Proceedings of the 21st International Conference on Tools with Artificial Intelligence (ICTAI", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2009}, {"title": "An Optimization Variant of Multi-Robot Path Planning is Intractable", "author": ["P. Surynek"], "venue": "Pro-ceedings of the 24th AAAI Conference on Artificial Intelligence (AAAI", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2010}, {"title": "Redundancy Elimination in Highly Parallel Solutions of Motion Coordination Problems", "author": ["P. Surynek"], "venue": "Proceedings of the 23rd IEEE International Conference on Tools with Artificial Intelligence (ICTAI", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2011}, {"title": "Compact Representations of Cooperative Path-Finding as SAT Based on Matchings in Bipartite Graphs", "author": ["P. Surynek"], "venue": "Proceedings of the 26th IEEE International Conference on Tools with Artificial Intelligence (ICTAI", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2014}, {"title": "The Impact of a Bi-connected Graph Decomposition on Solving Cooperative Path-finding Problems", "author": ["P. Surynek", "P. Surynkov\u00e1", "M. Chrom\u00fd"], "venue": "Fundamenta Informaticae, Volume 135,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2014}, {"title": "Subdimensional expansion for multirobot path planning", "author": ["G. Wagner", "H. Choset"], "venue": "Artificial Intelligence,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2015}, {"title": "Scalable Multi-Robot Pathfinding on Grid Maps with Tractability and Completeness Guarantees", "author": ["K.C. Wang", "A. Botea"], "venue": "Proceedings of ECAI 2010 - 19th European Conference on Artificial Intelligence (ECAI", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2010}, {"title": "Solution Quality Improvements for Massively Multi-Robot Pathfinding", "author": ["K.C. Wang", "A. Botea", "P. Kilby"], "venue": "Proceedings of the 25th AAAI Conference on Artificial Intelligence (AAAI", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2011}, {"title": "Introduction to Graph Theory", "author": ["D.B. West"], "venue": null, "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2000}, {"title": "Maintaining bridge-connected and bi-connected components online", "author": ["J. Westbrook", "R.E. Tarjan"], "venue": "Algorithmica, Volume 7, Number", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 1992}, {"title": "Push and rotate: cooperative multi-agent path planning", "author": ["B. de Wilde", "A. ter Mors", "C. Witteveen"], "venue": "Proceedings of the International conference on Autonomous Agents and Multi-Agent Systems (AAMAS", "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2013}, {"title": "Push and Rotate: a Complete Multi-robot Pathfinding Algorithm", "author": ["B. de Wilde", "A. ter Mors", "C. Witteveen"], "venue": "Journal of Artificial Intelligence Research (JAIR), Volume", "citeRegEx": "43", "shortCiteRegEx": "43", "year": 2014}, {"title": "Graph Puzzles, Homotopy, and the Alternating Group", "author": ["R.M. Wilson"], "venue": "Journal of Combinatorial Theory, Ser. B", "citeRegEx": "44", "shortCiteRegEx": "44", "year": 1974}], "referenceMentions": [{"referenceID": 8, "context": "The (n \u2212 1)-puzzle [9, 10, 12, 13] represents one of the best-known examples of a socalled cooperative path-finding (CPF) [23, 33, 38, 42] problem.", "startOffset": 19, "endOffset": 34}, {"referenceID": 9, "context": "The (n \u2212 1)-puzzle [9, 10, 12, 13] represents one of the best-known examples of a socalled cooperative path-finding (CPF) [23, 33, 38, 42] problem.", "startOffset": 19, "endOffset": 34}, {"referenceID": 11, "context": "The (n \u2212 1)-puzzle [9, 10, 12, 13] represents one of the best-known examples of a socalled cooperative path-finding (CPF) [23, 33, 38, 42] problem.", "startOffset": 19, "endOffset": 34}, {"referenceID": 20, "context": "The (n \u2212 1)-puzzle [9, 10, 12, 13] represents one of the best-known examples of a socalled cooperative path-finding (CPF) [23, 33, 38, 42] problem.", "startOffset": 122, "endOffset": 138}, {"referenceID": 32, "context": "The (n \u2212 1)-puzzle [9, 10, 12, 13] represents one of the best-known examples of a socalled cooperative path-finding (CPF) [23, 33, 38, 42] problem.", "startOffset": 122, "endOffset": 138}, {"referenceID": 36, "context": "The (n \u2212 1)-puzzle [9, 10, 12, 13] represents one of the best-known examples of a socalled cooperative path-finding (CPF) [23, 33, 38, 42] problem.", "startOffset": 122, "endOffset": 138}, {"referenceID": 14, "context": "From the theoretical point of view it is interesting for the hardness of its optimization variant which is known to be NP-hard [16, 17].", "startOffset": 127, "endOffset": 135}, {"referenceID": 0, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 7, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 16, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 17, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 23, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 26, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 22, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 33, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 36, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 7, "endOffset": 41}, {"referenceID": 4, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 63, "endOffset": 69}, {"referenceID": 6, "context": "robots [1, 8, 19, 20, 26, 29, 25, 39, 42], trajectory planning [5, 7], rearranging of shipping containers in warehouses, or coordination of vehicles in dense traffic.", "startOffset": 63, "endOffset": 69}, {"referenceID": 23, "context": "There are two rule-based algorithms for CPF \u2013 BIBOX [26, 33] and PUSH-and-SWAP (PUSH-and-ROTATE) [12, 42, 43] similar to the Parberry\u2019s algorithm.", "startOffset": 52, "endOffset": 60}, {"referenceID": 11, "context": "There are two rule-based algorithms for CPF \u2013 BIBOX [26, 33] and PUSH-and-SWAP (PUSH-and-ROTATE) [12, 42, 43] similar to the Parberry\u2019s algorithm.", "startOffset": 97, "endOffset": 109}, {"referenceID": 36, "context": "There are two rule-based algorithms for CPF \u2013 BIBOX [26, 33] and PUSH-and-SWAP (PUSH-and-ROTATE) [12, 42, 43] similar to the Parberry\u2019s algorithm.", "startOffset": 97, "endOffset": 109}, {"referenceID": 37, "context": "There are two rule-based algorithms for CPF \u2013 BIBOX [26, 33] and PUSH-and-SWAP (PUSH-and-ROTATE) [12, 42, 43] similar to the Parberry\u2019s algorithm.", "startOffset": 97, "endOffset": 109}, {"referenceID": 18, "context": "In this context, we need to mention a great progress that has been done in solving the CPF problem as well as the (n \u2212 1)-puzzle optimally with respect to various objectives such as the total number of moves [21], parallel makespan [34], and derivations of these.", "startOffset": 208, "endOffset": 212}, {"referenceID": 29, "context": "In this context, we need to mention a great progress that has been done in solving the CPF problem as well as the (n \u2212 1)-puzzle optimally with respect to various objectives such as the total number of moves [21], parallel makespan [34], and derivations of these.", "startOffset": 232, "endOffset": 236}, {"referenceID": 22, "context": "There exist great variety of search-based optimal algorithms such as ID+OD (Independence Detection + Operator Decomposition) [25], ICTS (Increasing Cost Tree Search) [21], and CBS (Conflict-based Search) [22] to name few.", "startOffset": 125, "endOffset": 129}, {"referenceID": 18, "context": "There exist great variety of search-based optimal algorithms such as ID+OD (Independence Detection + Operator Decomposition) [25], ICTS (Increasing Cost Tree Search) [21], and CBS (Conflict-based Search) [22] to name few.", "startOffset": 166, "endOffset": 170}, {"referenceID": 19, "context": "There exist great variety of search-based optimal algorithms such as ID+OD (Independence Detection + Operator Decomposition) [25], ICTS (Increasing Cost Tree Search) [21], and CBS (Conflict-based Search) [22] to name few.", "startOffset": 204, "endOffset": 208}, {"referenceID": 29, "context": "Reductions of optimal CPF solving to other formalisms such as SAT (Propositional Satisfiability) [34] or ASP (Answer Set Programming) [6] allow using external solvers for a given formalism.", "startOffset": 97, "endOffset": 101}, {"referenceID": 5, "context": "Reductions of optimal CPF solving to other formalisms such as SAT (Propositional Satisfiability) [34] or ASP (Answer Set Programming) [6] allow using external solvers for a given formalism.", "startOffset": 134, "endOffset": 137}, {"referenceID": 0, "context": "The (n \u2212 1)-puzzle consists of a set of pebbles that are moved over a square grid of size n\u00d7n [1, 13, 16, 17, 44].", "startOffset": 94, "endOffset": 113}, {"referenceID": 14, "context": "The (n \u2212 1)-puzzle consists of a set of pebbles that are moved over a square grid of size n\u00d7n [1, 13, 16, 17, 44].", "startOffset": 94, "endOffset": 113}, {"referenceID": 38, "context": "The (n \u2212 1)-puzzle consists of a set of pebbles that are moved over a square grid of size n\u00d7n [1, 13, 16, 17, 44].", "startOffset": 94, "endOffset": 113}, {"referenceID": 0, "context": "It is known that the decision variant of the (n \u2212 1)-puzzle (that is, the yes/no question whether there exists a solution to the given instance) is in P [1, 13, 44].", "startOffset": 153, "endOffset": 164}, {"referenceID": 38, "context": "It is known that the decision variant of the (n \u2212 1)-puzzle (that is, the yes/no question whether there exists a solution to the given instance) is in P [1, 13, 44].", "startOffset": 153, "endOffset": 164}, {"referenceID": 0, "context": "Using techniques for rearranging pebbles over graphs [1] a solution of length O(n) can be constructed in the worst-case time of O(n) if there exists any.", "startOffset": 53, "endOffset": 56}, {"referenceID": 15, "context": "The final case of the 8-puzzle is then solved optimally by the A* algorithm [18].", "startOffset": 76, "endOffset": 80}, {"referenceID": 9, "context": "The (n \u2212 1)-puzzle represents a special variant of a more general problem of cooperative path-finding - CPF (also known as pebble motion problem on a graph) [10, 11, 19, 20, 23, 29, 44].", "startOffset": 157, "endOffset": 185}, {"referenceID": 10, "context": "The (n \u2212 1)-puzzle represents a special variant of a more general problem of cooperative path-finding - CPF (also known as pebble motion problem on a graph) [10, 11, 19, 20, 23, 29, 44].", "startOffset": 157, "endOffset": 185}, {"referenceID": 16, "context": "The (n \u2212 1)-puzzle represents a special variant of a more general problem of cooperative path-finding - CPF (also known as pebble motion problem on a graph) [10, 11, 19, 20, 23, 29, 44].", "startOffset": 157, "endOffset": 185}, {"referenceID": 17, "context": "The (n \u2212 1)-puzzle represents a special variant of a more general problem of cooperative path-finding - CPF (also known as pebble motion problem on a graph) [10, 11, 19, 20, 23, 29, 44].", "startOffset": 157, "endOffset": 185}, {"referenceID": 20, "context": "The (n \u2212 1)-puzzle represents a special variant of a more general problem of cooperative path-finding - CPF (also known as pebble motion problem on a graph) [10, 11, 19, 20, 23, 29, 44].", "startOffset": 157, "endOffset": 185}, {"referenceID": 26, "context": "The (n \u2212 1)-puzzle represents a special variant of a more general problem of cooperative path-finding - CPF (also known as pebble motion problem on a graph) [10, 11, 19, 20, 23, 29, 44].", "startOffset": 157, "endOffset": 185}, {"referenceID": 38, "context": "The (n \u2212 1)-puzzle represents a special variant of a more general problem of cooperative path-finding - CPF (also known as pebble motion problem on a graph) [10, 11, 19, 20, 23, 29, 44].", "startOffset": 157, "endOffset": 185}, {"referenceID": 9, "context": "Although the problem has been already studied [10, 44], new results appeared recently.", "startOffset": 46, "endOffset": 54}, {"referenceID": 38, "context": "Although the problem has been already studied [10, 44], new results appeared recently.", "startOffset": 46, "endOffset": 54}, {"referenceID": 34, "context": "One of recent works shows solvability of every instance of pebble motion problem consisting of bi-connected graph [36, 40, 41] containing at least two vacant positions [26].", "startOffset": 114, "endOffset": 126}, {"referenceID": 35, "context": "One of recent works shows solvability of every instance of pebble motion problem consisting of bi-connected graph [36, 40, 41] containing at least two vacant positions [26].", "startOffset": 114, "endOffset": 126}, {"referenceID": 23, "context": "One of recent works shows solvability of every instance of pebble motion problem consisting of bi-connected graph [36, 40, 41] containing at least two vacant positions [26].", "startOffset": 168, "endOffset": 172}, {"referenceID": 23, "context": "The related solving algorithm called BIBOX [26] can produce solution of length at most O(|V|) in the worst-case time of O(|V|) (V is the set of vertices of the input graph).", "startOffset": 43, "endOffset": 47}, {"referenceID": 9, "context": "The BIBOX algorithm also generates solutions that are significantly shorter than those generated by algorithms from previous works [10, 44].", "startOffset": 131, "endOffset": 139}, {"referenceID": 38, "context": "The BIBOX algorithm also generates solutions that are significantly shorter than those generated by algorithms from previous works [10, 44].", "startOffset": 131, "endOffset": 139}, {"referenceID": 26, "context": "A generalization of BIBOX algorithm called BIBOX-\u03b8 is described in [29].", "startOffset": 67, "endOffset": 71}, {"referenceID": 10, "context": "A more general algorithm called PUSH-and-SWAP has been published in [11] \u2013 it shows that for every solvable instance on an arbitrary graph containing at least two vacant positions a solution of length O(|V|) can be generated.", "startOffset": 68, "endOffset": 72}, {"referenceID": 36, "context": "The algorithm omits few cases that make it incomplete; however a corrected version of PUSH-and-SWAP called PUSHand-ROTATE has been appeared in [42, 43].", "startOffset": 143, "endOffset": 151}, {"referenceID": 37, "context": "The algorithm omits few cases that make it incomplete; however a corrected version of PUSH-and-SWAP called PUSHand-ROTATE has been appeared in [42, 43].", "startOffset": 143, "endOffset": 151}, {"referenceID": 22, "context": "A new technique that can optimally solve a special case consisting of a grid with obstacles and relatively small number of pebbles is described in [25] as ID+OD algorithm (Independence Detection + Operator Decomposition).", "startOffset": 147, "endOffset": 151}, {"referenceID": 2, "context": "A more recent progress in searchbased techniques for optimal CPF solving is represented by [3, 4, 21, 22].", "startOffset": 91, "endOffset": 105}, {"referenceID": 3, "context": "A more recent progress in searchbased techniques for optimal CPF solving is represented by [3, 4, 21, 22].", "startOffset": 91, "endOffset": 105}, {"referenceID": 18, "context": "A more recent progress in searchbased techniques for optimal CPF solving is represented by [3, 4, 21, 22].", "startOffset": 91, "endOffset": 105}, {"referenceID": 19, "context": "A more recent progress in searchbased techniques for optimal CPF solving is represented by [3, 4, 21, 22].", "startOffset": 91, "endOffset": 105}, {"referenceID": 32, "context": "Special cases of the problem with large graphs and relatively sparsely arranged pebbles are studied in [38, 39].", "startOffset": 103, "endOffset": 111}, {"referenceID": 33, "context": "Special cases of the problem with large graphs and relatively sparsely arranged pebbles are studied in [38, 39].", "startOffset": 103, "endOffset": 111}, {"referenceID": 16, "context": "Another specialized technique for relatively large graphs and small number of pebbles has been developed within [19, 20].", "startOffset": 112, "endOffset": 120}, {"referenceID": 17, "context": "Another specialized technique for relatively large graphs and small number of pebbles has been developed within [19, 20].", "startOffset": 112, "endOffset": 120}, {"referenceID": 15, "context": "The trivial case of the 8puzzle on a grid of the size 3\u00d73 is again solved by the A* algorithm [18].", "startOffset": 94, "endOffset": 98}, {"referenceID": 20, "context": "The task in cooperative path-finding is to relocate a set of abstract robots over a given undirected graph in a non-colliding way so that each robot eventually reaches its goal vertex [23].", "startOffset": 184, "endOffset": 188}, {"referenceID": 23, "context": "A possible application of snakes in CPF is further supported by the fact that several polynomial-time rule-based algorithms that address CPF such as BIBOX [26], PUSH-and-SWAP [11], and PUSH-and-ROTATE [42] relocate robots one by one over the graph towards their goal locations.", "startOffset": 155, "endOffset": 159}, {"referenceID": 10, "context": "A possible application of snakes in CPF is further supported by the fact that several polynomial-time rule-based algorithms that address CPF such as BIBOX [26], PUSH-and-SWAP [11], and PUSH-and-ROTATE [42] relocate robots one by one over the graph towards their goal locations.", "startOffset": 175, "endOffset": 179}, {"referenceID": 36, "context": "A possible application of snakes in CPF is further supported by the fact that several polynomial-time rule-based algorithms that address CPF such as BIBOX [26], PUSH-and-SWAP [11], and PUSH-and-ROTATE [42] relocate robots one by one over the graph towards their goal locations.", "startOffset": 201, "endOffset": 205}, {"referenceID": 27, "context": "It is known that deciding whether there exists a solution of CPF of a given makespan is NP-complete [17, 30].", "startOffset": 100, "endOffset": 108}, {"referenceID": 26, "context": "The algorithm is designed for CPFs over bi-connected graphs with at least two unoccupied vertices (modifications for single unoccupied vertex exist as well [29]).", "startOffset": 156, "endOffset": 160}, {"referenceID": 34, "context": "An algorithmically important property of bi-connected graphs is that every bi-connected graph can be constructed from a cycle by adding sequence of ears to the currently constructed graph [36, 40, 41].", "startOffset": 188, "endOffset": 200}, {"referenceID": 35, "context": "An algorithmically important property of bi-connected graphs is that every bi-connected graph can be constructed from a cycle by adding sequence of ears to the currently constructed graph [36, 40, 41].", "startOffset": 188, "endOffset": 200}, {"referenceID": 34, "context": "Lemma 1 (ear decomposition) [36, 40, 41].", "startOffset": 28, "endOffset": 40}, {"referenceID": 35, "context": "Lemma 1 (ear decomposition) [36, 40, 41].", "startOffset": 28, "endOffset": 40}, {"referenceID": 10, "context": "The PUSH-and-SWAP algorithm [11] and its later corrected version PUSH-and-ROTATE [42, 43] are more general than BIBOX as they are complete for CPFs over arbitrary graphs with at least two unoccupied vertices.", "startOffset": 28, "endOffset": 32}, {"referenceID": 36, "context": "The PUSH-and-SWAP algorithm [11] and its later corrected version PUSH-and-ROTATE [42, 43] are more general than BIBOX as they are complete for CPFs over arbitrary graphs with at least two unoccupied vertices.", "startOffset": 81, "endOffset": 89}, {"referenceID": 37, "context": "The PUSH-and-SWAP algorithm [11] and its later corrected version PUSH-and-ROTATE [42, 43] are more general than BIBOX as they are complete for CPFs over arbitrary graphs with at least two unoccupied vertices.", "startOffset": 81, "endOffset": 89}, {"referenceID": 37, "context": "We will concentrate here on the original version of PUSH-and-SWAP though it is not complete since certain cases are not treated by the algorithm [43] \u2013 these cases causing incompleteness however do not affect our study.", "startOffset": 145, "endOffset": 149}, {"referenceID": 37, "context": "The proof of the first statement is given in [43]; the illustration of the second statement is shown in Figure 11.", "startOffset": 45, "endOffset": 49}, {"referenceID": 23, "context": "The snake-based reasoning within the BIBOX algorithm has been integrated into its original C++ implementation [26] where only minor changes to the code needed to be made.", "startOffset": 110, "endOffset": 114}, {"referenceID": 25, "context": "Further solution improvements that increases parallelism [28, 39, 43] (multiple independent moves can be performed in a single time-step) and removes redundancies [27, 32, 39, 43] were not applied as it is out of scope of this study.", "startOffset": 57, "endOffset": 69}, {"referenceID": 33, "context": "Further solution improvements that increases parallelism [28, 39, 43] (multiple independent moves can be performed in a single time-step) and removes redundancies [27, 32, 39, 43] were not applied as it is out of scope of this study.", "startOffset": 57, "endOffset": 69}, {"referenceID": 37, "context": "Further solution improvements that increases parallelism [28, 39, 43] (multiple independent moves can be performed in a single time-step) and removes redundancies [27, 32, 39, 43] were not applied as it is out of scope of this study.", "startOffset": 57, "endOffset": 69}, {"referenceID": 24, "context": "Further solution improvements that increases parallelism [28, 39, 43] (multiple independent moves can be performed in a single time-step) and removes redundancies [27, 32, 39, 43] were not applied as it is out of scope of this study.", "startOffset": 163, "endOffset": 179}, {"referenceID": 33, "context": "Further solution improvements that increases parallelism [28, 39, 43] (multiple independent moves can be performed in a single time-step) and removes redundancies [27, 32, 39, 43] were not applied as it is out of scope of this study.", "startOffset": 163, "endOffset": 179}, {"referenceID": 37, "context": "Further solution improvements that increases parallelism [28, 39, 43] (multiple independent moves can be performed in a single time-step) and removes redundancies [27, 32, 39, 43] were not applied as it is out of scope of this study.", "startOffset": 163, "endOffset": 179}, {"referenceID": 8, "context": "Regarding the choice of testing puzzles, we followed the benchmark generation already used in the literature by Korf and Taylor [9] where random instances of the (5 \u2212 1)-puzzle were used.", "startOffset": 128, "endOffset": 131}, {"referenceID": 8, "context": "There is experimental evidence that solving random instances of the (5 \u2212 1)-puzzle optimally is difficult [9].", "startOffset": 106, "endOffset": 109}, {"referenceID": 23, "context": "Let us recall that the original BIBOX algorithm as presented in [26] requires two unoccupied vertices so it not immediately applicable to (n \u2212 1)-puzzle.", "startOffset": 64, "endOffset": 68}, {"referenceID": 24, "context": "There exists a variant of the algorithm called BIBOX-\u03b8 [27, 33] that suffices with just one unoccupied vertex that uses special transposition rules to arrange pebbles in the initial cycle.", "startOffset": 55, "endOffset": 63}, {"referenceID": 30, "context": "As it is shown in [35] various ear decompositions can affect the number of generated moves by the algorithm greatly.", "startOffset": 18, "endOffset": 22}, {"referenceID": 36, "context": "The known problematic behavior of the PUSH-and-SWAP algorithm described in [42, 43] due to which the Rotate operation has been introduced does not occur in our testing scenarios.", "startOffset": 75, "endOffset": 83}, {"referenceID": 37, "context": "The known problematic behavior of the PUSH-and-SWAP algorithm described in [42, 43] due to which the Rotate operation has been introduced does not occur in our testing scenarios.", "startOffset": 75, "endOffset": 83}, {"referenceID": 26, "context": "These variants are known as the (n \u2212 k)-puzzle with k > 1 [29].", "startOffset": 58, "endOffset": 62}, {"referenceID": 0, "context": "Another open question is how the snake-based approach could perform in the directed version of CPF [1, 45].", "startOffset": 99, "endOffset": 106}, {"referenceID": 22, "context": "This is quite open area as today\u2019s optimal solving techniques [25] can manage only small number of pebbles compared to the size of the unoccupied space.", "startOffset": 62, "endOffset": 66}], "year": 2016, "abstractText": "The problem of solving (n \u2212 1)-puzzle and cooperative path-finding (CPF) sub-optimally by rule based algorithms is addressed in this manuscript. The task in the puzzle is to rearrange n \u2212 1 pebbles on the square grid of the size of n\u00d7n using one vacant position to a desired goal configuration. An improvement to the existent polynomial-time algorithm is proposed and experimentally analyzed. The improved algorithm is trying to move pebbles in a more efficient way than the original algorithm by grouping them into so-called snakes and moving them jointly within the snake. An experimental evaluation showed that the algorithm using snakes produces solutions that are 8% to 9% shorter than solutions generated by the original algorithm. The snake-based relocation has been also integrated into rule-based algorithms for solving the CPF problem sub-optimally, which is a closely related task. The task in CPF is to relocate a group of abstract robots that move over an undirected graph to given goal vertices. Robots can move to unoccupied neighboring vertices and at most one robot can be placed in each vertex. The (n \u2212 1)-puzzle is a special case of CPF where the underlying graph is represented by a 4-connected grid and there is only one vacant vertex. Two major rule-based algorithms for CPF were included in our study \u2013 BIBOX and PUSH-and-SWAP (PUSH-and-ROTATE). Improvements gained by using snakes in the BIBOX algorithm were stable around 30% in (n \u2212 1)-puzzle solving and up to 50% in CPFs over bi-connected graphs with various ear decompositions and multiple vacant vertices. In the case of the PUSHand-SWAP algorithm the improvement achieved by snakes was around 5% to 8%. However, the improvement was unstable and hardly predictable in the case of PUSH-and-SWAP.", "creator": "Microsoft\u00ae Word 2016"}}}