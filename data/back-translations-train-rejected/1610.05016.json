{"id": "1610.05016", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Oct-2016", "title": "Weekly maintenance scheduling using exact and genetic methods", "abstract": "The weekly maintenance schedule specifies when maintenance activities should be performed on the equipment, taking into account the availability of workers and maintenance bays, and other operational constraints. The current approach to generating this schedule is labour intensive and requires coordination between the maintenance schedulers and operations staff to minimise its impact on the operation of the mine. This paper presents methods for automatically generating this schedule from the list of maintenance tasks to be performed, the availability roster of the maintenance staff, and time windows in which each piece of equipment is available for maintenance. Both Mixed-Integer Linear Programming (MILP) and genetic algorithms are evaluated, with the genetic algorithm shown to significantly outperform the MILP. Two fitness functions for the genetic algorithm are also examined, with a linear fitness function outperforming an inverse fitness function by up to 5% for the same calculation time. The genetic algorithm approach is computationally fast, allowing the schedule to be rapidly recalculated in response to unexpected delays and breakdowns.", "histories": [["v1", "Mon, 17 Oct 2016 08:54:47 GMT  (350kb,D)", "http://arxiv.org/abs/1610.05016v1", null]], "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["andrew w palmer", "robin vujanic", "rew j hill", "steven j scheding"], "accepted": false, "id": "1610.05016"}, "pdf": {"name": "1610.05016.pdf", "metadata": {"source": "CRF", "title": "Weekly maintenance scheduling using exact and genetic methods", "authors": ["Andrew W. Palmer", "Robin Vujanic", "Andrew J. Hill", "Steven J. Scheding"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "In fact, most of them are able to assert themselves in public as if they were able to trump themselves. (...) Most of them are able to trump themselves. (...) Most of them are able to trump themselves. (...) Most of them are able to trump themselves. (...) Most of them are able to trump themselves. (...) Most of them have trumped themselves. (...) Most of them are able to trump themselves. (...) Most of them are able to trump themselves. (...) Most of them are able to trump themselves. (...) Most of them have trumped themselves. (...) Most of them have trumped themselves. (...) Most of them are able to trump themselves. (...)"}, {"heading": "2 MILP Formulation", "text": "The weekly maintenance problem consists of scheduling a given number of tasks (equipment) with associated sub-tasks (work orders). Each task has a preset time in which a task can begin at the earliest and a deadline in which it is determined when to complete it. Some tasks require a maintenance room, and sub-tasks have a preset duration and work requirement. Sub-tasks can have a priority requirement if they require other sub-tasks of the task before they can be performed. An example task with 7 sub-tasks is shown in Figure 1. The sub-tasks \"work requirements in the example are indicated by the colors and numbers in the sub-tasks, and the sub-tasks have been arranged in such a way that the priority of the sub-tasks is respected. The schedule is divided into discrete, equally large timeframes. the goal of the problem is to schedule the sub-tasks in such a way that the sum of the makeovers and the delay of the tasks are minimized. Makespan is simply the length of the task, and the latency is created after the task has been completed."}, {"heading": "2.1 Indices and Sets", "text": "There are no periods in which T = {0,.., tmax} i \"I\" tasks J \"J\" subtasks p \"P\" worker types The set of tasks that require a maintenance space is M \"I,\" the set of subtasks that make up task i \"Ji\" J, and the set of subtasks that must be performed before J \"J\" is Kj \"J. Subtasks can only belong to one task, i.e. Ji\" Jk \"=\" i \"I,\" k \"I\" {i. \""}, {"heading": "2.2 Parameters", "text": "dj the duration of the submission j \u0445J in time periods rj, p, s, t the number of workers of type p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p"}, {"heading": "2.3 Optimisation Variables", "text": "xstartj, t-0, 1) 1 iff Sub-task j-J starts in the time period t-T xi, t-0, 1) 1 iff Task i-I is finished in the time period t-T xstarti, t-0, 1) 1 iff Task i-I starts in the time period t-T xfinishi, t-0, 1) 1 iff Task i-I finishes in the time period t-T ymakespani-R Makespan of Task i-I ylatenessi-R Delay of Task i-I"}, {"heading": "2.4 Objective function", "text": "The objective function is the sum of the weighted Makespan and the delay of each task: J = \u2211 i \u0445 I fiy makespan i + giy lateness i (1)"}, {"heading": "2.5 Constraints", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.5.1 Subtasks", "text": "The first set of constraints determines when a subtask can begin. First, (2) forces each subtask to start exactly once, and (3) specifies that it must be completed before the end of the plan. Constraint (4) encodes the number of constraints specified in Kj."}, {"heading": "2.5.2 Tasks", "text": "The next set of constraints covers the tasks. Constraint (5), similar to (2), specifies that a task may only begin once; the period in which the task begins is defined in (6) as the earliest initial period of its subtasks; the span of the task is calculated in (7) by specifying that the task may not be completed earlier than one of its subtasks; constraint (8) requires that the task can only be completed once; and (9) specifies that the period in which the task is completed is no earlier than its initial period plus its stress span; the delay of the task is calculated in (10). Constraint (11) calculates whether or not a task is performed in a period of time based on whether it was performed in the previous span of time and the period in which the task begins and ends; and to work for (11), if t = 0, a dummy variable is executed for each task in the span of time."}, {"heading": "2.5.3 Resources", "text": "There are two resource limitations, namely a limited number of maintenance bays and a limited number of workers. Restriction (13) forces a limitation on the number of maintenance bays used in each period. Note that only a subset of tasks requires a maintenance bay. Restriction (14) encodes the limitation of the number of individual types of workers in each period."}, {"heading": "2.6 Optimisation Problem", "text": "The problem of maintenance planning is therefore presented as an optimization model P: P = {minimize (1) under the condition of (2) \u2212 (14). Two solutions to this optimization problem are proposed - an industry-bound and bound approach with the commercial software package Gurobi Gur (n.d.) and a GA, which will be developed in the next section. As will be shown later in the results, this optimization problem is difficult for Gurobi and motivates the development of the genetic algorithm."}, {"heading": "3 Genetic Algorithm", "text": "Genetic algorithms are a class of meta-heuristics that aim to mimic the process of natural selection. In order to create a new generation of chromosomes, current generation chromosomes are randomly combined depending on their fitness. In this way, the characteristics of the strongest chromosomes are most likely to be transferred to the next generation (Mitchell, 1998).The genes are also randomly mutated so as not to be trapped in local optimises.This process is outlined in Figure 2. A frequent addition to GAs is elitism, in which the best chromosomes of the current generation are passed on to the next generation without modification. Elitism guarantees that the quality of the solution does not decrease (Baluja & Caruana, 1995).The set of chromosomes in a given population is determined by preserving the N step prior to creating a first step of possible castomal representations in individual chromosomes."}, {"heading": "3.1 Chromosome representation and schedule generation", "text": "An obvious representation to choose from is a direct representation where genes are made up of binary variables that correspond to the optimization variables introduced in Section 2. However, most of the values that this chromosome representation can take lead to unfeasible schedules due to the limitations on labor and maintenance space availability. Therefore, it was desirable to develop a representation that would provide reliably feasible times.The chromosome representation proposed for this application is an orderly to-do list. Tasks are then classified using a greedy heuristics in the order specified by the chromosome to determine the values of the optimization variables outlined in Section 2.3. Greedy heuristics sets out the subtasks of each task as early as possible, while satisfying the constraints in Section 2.5 requires greedy heuristics. Provided there is always at least one maintenance bay and the minimum number of manpower required for each subtask available period."}, {"heading": "3.2 Initial population", "text": "The characteristics of the original chromosome population can have a major impact on the performance of the algorithm (Diaz-Gomez & Hougen, 2007).There is a trade-off between an initial population that contains good initial solutions, which increases the likelihood of finding a good final solution (Burke et al., 2004), and a diverse initial population that helps prevent premature convergence (Leung et al., 1997).In order to strike a balance between diversity and quality, two of the chromosomes in the original population are selected using heuristics, while the remaining ones are randomly generated.The first of the heuristics generates a chromosome by sorting the tasks according to their readiness time.The logic behind this heuristics is that it should avoid situations such as Figure 3b, in which the task is performed with the later readiness time between the subtasks of the other task, which leads to a large macromosome time for the first task.The second heuristics primarily aim to create scenarios in which many of the tasks are likely to be performed in a timetable manner by mosomes that can be performed in a timetable."}, {"heading": "3.3 Calculating the fitness of a chromosome", "text": "Two fitness functions have been studied: the first fitness function calculates the fitness of the n-th chromosome, \u03c61n, as follows: \u03c61n = max {J\u03bd \u03bd \u0445 N} \u2212 Jn (15), with Jn being calculated on the basis of the objective function of equivalent (1). Note that the maximum term only takes into account the chromosomes that lead to a feasible schedule; the second function calculates the fitness, \u03c62n, as follows: \u03c62n = 1 Jn \u2212 \u2211 i \u0445 I fimin-makespani (16) In this formula, the minimal macespan costs are subtracted from the value of the objective function. A perfect schedule in which all tasks take the minimum possible time and are completed before their deadlines would therefore result in a denominator value of 0 and a corresponding infinite fitness value. Note that if a perfect schedule is found, it can simply be returned as the best schedule without having to run the GA until completion."}, {"heading": "3.4 Parent selection", "text": "The roulette wheel selection method (Davis, 1991) randomly selects one parent pair for each next-generation chromosome. Chromosomes that do not lead to workable schedules have no fitness and are not considered valid parents."}, {"heading": "3.5 Crossover", "text": "Two-point crossover is used to create a new chromosome from the two parents, as shown in Figure 4. First, a parent is randomly selected as the dominant parent and two crossover points in the chromosome are randomly selected. If the number of tasks between the crossover points is greater than the number of tasks outside the crossover points, the tasks of the dominant parent are copied between the crossover points to the child chromosome. Otherwise, the tasks of the dominant parent outside the crossover points are copied to the child chromosome."}, {"heading": "3.6 Mutation", "text": "The final step in each round of GA is the mutation of the children. For each gene in the chromosome, a probabilistic test against the mutation rate is performed. If the test succeeds, the gene is swapped with another randomly selected gene in the chromosome. Figure 4d shows the result."}, {"heading": "4 Computational Study", "text": "Two weekly maintenance plans from a sample mine were used to generate the input datasets used in this work. Each weekly plan had just under 100 devices, and each device had between 1 and 50 subtasks, making a total of about 800 subtasks. 25 different types of people were required to perform the work, each with varying availability levels. Some types of people were only available during the day shift, while others were available both during the day shift and the night shift, but in varying numbers. About 1 / 3 of the devices required a maintenance bay, while the remaining ones were serviced in the field. The mine site studied had 5 bays in the maintenance shed that were available for the equipment to maintain. This section evaluates first the performance of the commercial solver and GA approaches as the number of tasks is varied, followed by a comprehensive comparison of the methods to the randomly generated datasets with the task and time."}, {"heading": "4.1 Varying the number of tasks", "text": "The number of tasks was varied to match about 1, 2, 3, 4, 5, 6 and 7 days of tasks in the original schedule. Figure 5 shows the optimum gap for each method, with the optimum gap calculated based on the best lower limit calculated by Gurobi. In the first two cases, Gurobi found the optimal solution, but was unable to improve the heuristically generated initial solution in the remaining cases. Figure 6 shows the calculation times of each method. As can be seen, Gurobi reached the time limit of 600 s very quickly, while the maximum calculation time for the GA approaches was about 230. To highlight the impracticability of the commercial solution to realistic problem quantities, Gurobi was able to reduce the original time limit from 600 s to 600 hours, while the maximum calculation time for the GA approaches was about 230 hours."}, {"heading": "4.2 Random scenarios", "text": "A set of random scenarios was generated by the input planners to test the performance of each individual person. Two aspects of the problem were varied - the tightness of the labor force and the tightness of the labor force - while the objective value of the labor process was generated by random scanning. The definition of the labor force was made by the workers themselves."}, {"heading": "5 Conclusion", "text": "This paper developed and compared several methods for automatically creating a maintenance plan for a typical fleet of mining equipment. Current approaches to planning maintenance are manual and time consuming, and a mixed-integer linear programming model of the problem has been developed. Commercial optimization software has not been able to sufficiently solve the model even when delivered with a heuristically generated start-up schedule, which requires the development of alternative strategies. To this end, a genetic algorithm approach has been developed that significantly exceeds commercial optimization software. In addition, two fitness functions have been compared, with a linear fitness function generally outperforming an inverse fitness function. There are several possibilities for future work. Further improvements in the performance of the genetic algorithm without increasing compilation time can be achieved by switching from Python to a compiled language such as C + +. Genetic algorithms are also embarrassingly parallelisable, so that further reductions can be achieved without increasing compilation time."}, {"heading": "Acknowledgements", "text": "This work was supported by the Rio Tinto Centre for Mine Automation and the Australian Centre for Field Robotics, University of Sydney, Australia."}], "references": [{"title": "Dynamic scheduling of maintenance tasks in the petroleum industry: A reinforcement approach", "author": ["N. Aissani", "B. Beldjilali", "D. Trentesaux"], "venue": "Engineering Applications of Artificial Intelligence,", "citeRegEx": "Aissani et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Aissani et al\\.", "year": 2009}, {"title": "Removing the genetics from the standard genetic algorithm", "author": ["Baluja", "Shumeet", "Caruana", "Rich"], "venue": "Icml,", "citeRegEx": "Baluja et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Baluja et al\\.", "year": 1995}, {"title": "Simultaneous scheduling of production and maintenance tasks in the job shop", "author": ["M. Ben Ali", "M. Sassi", "M. Gossa", "Y. Harrath"], "venue": "International Journal of Production Research,", "citeRegEx": "Ali et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Ali et al\\.", "year": 2011}, {"title": "Diversity in Genetic Programming: An Analysis of Measures and Correlation with Fitness", "author": ["Burke", "Edmund K", "Gustafson", "Steven", "Kendall", "Graham"], "venue": "IEEE Transactions on Evolutionary Computation,", "citeRegEx": "Burke et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Burke et al\\.", "year": 2004}, {"title": "Handbook of genetic algorithms", "author": ["Davis", "Lawrence."], "venue": "Van Nostrand Reinhold.", "citeRegEx": "Davis and Lawrence.,? 1991", "shortCiteRegEx": "Davis and Lawrence.", "year": 1991}, {"title": "Ship maintenance scheduling by genetic algorithm and constraint-based reasoning", "author": ["Deris", "Safaai", "Omatu", "Sigeru", "Ohta", "Hiroshi", "Shaharudin Kutar", "Lt.Cdr", "Abd Samat", "Pathiah"], "venue": "European Journal of Operational Research,", "citeRegEx": "Deris et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Deris et al\\.", "year": 1999}, {"title": "Mining equipment reliability, maintainability, and safety", "author": ["Dhillon", "Balbir S."], "venue": "Springer Science & Business Media.", "citeRegEx": "Dhillon and S.,? 2008", "shortCiteRegEx": "Dhillon and S.", "year": 2008}, {"title": "Initial Population for Genetic Algorithms: A Metric Approach", "author": ["Diaz-Gomez", "Pa", "Hougen", "Df"], "venue": "Proceedings of the 2007 International Conference on Genetic and Evolutionary Methods,", "citeRegEx": "Diaz.Gomez et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Diaz.Gomez et al\\.", "year": 2007}, {"title": "A tabu search heuristic for preventive maintenance scheduling", "author": ["M Gopalakrishnan", "S Mohan", "Z. He"], "venue": "Computers & Industrial Engineering,", "citeRegEx": "Gopalakrishnan et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Gopalakrishnan et al\\.", "year": 2001}, {"title": "Option model for joint production and preventive maintenance system", "author": ["Jin", "Xiaoning", "Li", "Lin", "Ni", "Jun"], "venue": "International Journal of Production Economics,", "citeRegEx": "Jin et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Jin et al\\.", "year": 2009}, {"title": "The equipment maintenance scheduling problem in a coal production system", "author": ["Jiu", "Song", "Zhou", "Zhili", "Liu", "Jiyin"], "venue": "International Journal of Production Research,", "citeRegEx": "Jiu et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Jiu et al\\.", "year": 2013}, {"title": "Degree of population diversity A perspective on premature convergence in genetic algorithms and its Markov chain analysis", "author": ["Leung", "Yee", "Gao", "Yong", "Xu", "Zong Ben"], "venue": "IEEE Transactions on Neural Networks,", "citeRegEx": "Leung et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Leung et al\\.", "year": 1997}, {"title": "Maintenance of mobile mine equipment in the information age", "author": ["Lewis", "Michael W", "Steinberg", "Luiz"], "venue": "Journal of Quality in Maintenance Engineering,", "citeRegEx": "Lewis et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Lewis et al\\.", "year": 2001}, {"title": "An Introduction to Genetic Algorithms", "author": ["Mitchell", "Melanie."], "venue": "MIT press.", "citeRegEx": "Mitchell and Melanie.,? 1998", "shortCiteRegEx": "Mitchell and Melanie.", "year": 1998}, {"title": "An integrated production and maintenance planning model with time windows and shortage cost", "author": ["Najid", "Najib M", "Alaoui-Selsouli", "Marouane", "Mohafid", "Abdelmoula"], "venue": "International Journal of Production Research,", "citeRegEx": "Najid et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Najid et al\\.", "year": 2011}, {"title": "A methodology for joint optimization for maintenance planning, process quality and production scheduling", "author": ["Pandey", "Divya", "Kulkarni", "Makarand S", "Vrat", "Prem"], "venue": "Computers & Industrial Engineering,", "citeRegEx": "Pandey et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Pandey et al\\.", "year": 2011}, {"title": "Mine maintenance - the cost of operation", "author": ["T Singleton", "O. Krellis"], "venue": "Coal Operators Conference,", "citeRegEx": "Singleton and Krellis,? \\Q1998\\E", "shortCiteRegEx": "Singleton and Krellis", "year": 1998}, {"title": "Reliability modelling for maintenance scheduling of mobile mining equipment. Pages 526\u2013540", "author": ["Summit", "Raymond", "Halomoan", "David"], "venue": "of: Proceedings of the 11th Biennial Engineering Mathematics and Applications Conference,", "citeRegEx": "Summit et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Summit et al\\.", "year": 2015}, {"title": "Mine Maintenance Management Reader", "author": ["Tomlingson", "Paul D."], "venue": "Society for Mining, Metallurgy, and Exploration.", "citeRegEx": "Tomlingson and D.,? 2007", "shortCiteRegEx": "Tomlingson and D.", "year": 2007}, {"title": "A new MIP model for mine equipment scheduling by minimizing maintenance cost", "author": ["Topal", "Erkan", "Ramazan", "Salih"], "venue": "European Journal of Operational Research,", "citeRegEx": "Topal et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Topal et al\\.", "year": 2010}], "referenceMentions": [{"referenceID": 5, "context": "Some related maintenance scheduling problems are examined by Gopalakrishnan et al. (2001); Deris et al.", "startOffset": 61, "endOffset": 90}, {"referenceID": 3, "context": "(2001); Deris et al. (1999); Ben Ali et al.", "startOffset": 8, "endOffset": 28}, {"referenceID": 1, "context": "(1999); Ben Ali et al. (2011); Jiu et al.", "startOffset": 12, "endOffset": 30}, {"referenceID": 1, "context": "(1999); Ben Ali et al. (2011); Jiu et al. (2013); Jin et al.", "startOffset": 12, "endOffset": 49}, {"referenceID": 1, "context": "(1999); Ben Ali et al. (2011); Jiu et al. (2013); Jin et al. (2009); Aissani et al.", "startOffset": 12, "endOffset": 68}, {"referenceID": 0, "context": "(2009); Aissani et al. (2009); Pandey et al.", "startOffset": 8, "endOffset": 30}, {"referenceID": 0, "context": "(2009); Aissani et al. (2009); Pandey et al. (2011); Najid et al.", "startOffset": 8, "endOffset": 52}, {"referenceID": 0, "context": "(2009); Aissani et al. (2009); Pandey et al. (2011); Najid et al. (2011). Many of these authors used meta-heuristics such as tabu-search (Gopalakrishnan et al.", "startOffset": 8, "endOffset": 73}, {"referenceID": 0, "context": "(2009); Aissani et al. (2009); Pandey et al. (2011); Najid et al. (2011). Many of these authors used meta-heuristics such as tabu-search (Gopalakrishnan et al. , 2001) and Genetic Algorithms (GAs) (Deris et al. , 1999; Ben Ali et al. , 2011; Jiu et al. , 2013) to generate a schedule. These meta-heuristic approaches were shown to produce near-optimal solutions in reasonable calculation times. An option-based cost model was used by Jin et al. (2009), while a novel reinforcement learning approach was utilised by Aissani et al.", "startOffset": 8, "endOffset": 452}, {"referenceID": 0, "context": "(2009); Aissani et al. (2009); Pandey et al. (2011); Najid et al. (2011). Many of these authors used meta-heuristics such as tabu-search (Gopalakrishnan et al. , 2001) and Genetic Algorithms (GAs) (Deris et al. , 1999; Ben Ali et al. , 2011; Jiu et al. , 2013) to generate a schedule. These meta-heuristic approaches were shown to produce near-optimal solutions in reasonable calculation times. An option-based cost model was used by Jin et al. (2009), while a novel reinforcement learning approach was utilised by Aissani et al. (2009). Methods for jointly optimising maintenance and production were developed by Pandey et al.", "startOffset": 8, "endOffset": 537}, {"referenceID": 0, "context": "(2009); Aissani et al. (2009); Pandey et al. (2011); Najid et al. (2011). Many of these authors used meta-heuristics such as tabu-search (Gopalakrishnan et al. , 2001) and Genetic Algorithms (GAs) (Deris et al. , 1999; Ben Ali et al. , 2011; Jiu et al. , 2013) to generate a schedule. These meta-heuristic approaches were shown to produce near-optimal solutions in reasonable calculation times. An option-based cost model was used by Jin et al. (2009), while a novel reinforcement learning approach was utilised by Aissani et al. (2009). Methods for jointly optimising maintenance and production were developed by Pandey et al. (2011); Najid et al.", "startOffset": 8, "endOffset": 635}, {"referenceID": 0, "context": "(2009); Aissani et al. (2009); Pandey et al. (2011); Najid et al. (2011). Many of these authors used meta-heuristics such as tabu-search (Gopalakrishnan et al. , 2001) and Genetic Algorithms (GAs) (Deris et al. , 1999; Ben Ali et al. , 2011; Jiu et al. , 2013) to generate a schedule. These meta-heuristic approaches were shown to produce near-optimal solutions in reasonable calculation times. An option-based cost model was used by Jin et al. (2009), while a novel reinforcement learning approach was utilised by Aissani et al. (2009). Methods for jointly optimising maintenance and production were developed by Pandey et al. (2011); Najid et al. (2011). Najid et al.", "startOffset": 8, "endOffset": 656}, {"referenceID": 0, "context": "(2009); Aissani et al. (2009); Pandey et al. (2011); Najid et al. (2011). Many of these authors used meta-heuristics such as tabu-search (Gopalakrishnan et al. , 2001) and Genetic Algorithms (GAs) (Deris et al. , 1999; Ben Ali et al. , 2011; Jiu et al. , 2013) to generate a schedule. These meta-heuristic approaches were shown to produce near-optimal solutions in reasonable calculation times. An option-based cost model was used by Jin et al. (2009), while a novel reinforcement learning approach was utilised by Aissani et al. (2009). Methods for jointly optimising maintenance and production were developed by Pandey et al. (2011); Najid et al. (2011). Najid et al. (2011) formulated this as a Mixed-Integer Linear Program (MILP) and solved it using commercial optimisation software.", "startOffset": 8, "endOffset": 677}], "year": 2016, "abstractText": "The weekly maintenance schedule specifies when maintenance activities should be performed on the equipment, taking into account the availability of workers and maintenance bays, and other operational constraints. The current approach to generating this schedule is labour intensive and requires coordination between the maintenance schedulers and operations staff to minimise its impact on the operation of the mine. This paper presents methods for automatically generating this schedule from the list of maintenance tasks to be performed, the availability roster of the maintenance staff, and time windows in which each piece of equipment is available for maintenance. Both Mixed-Integer Linear Programming (MILP) and genetic algorithms are evaluated, with the genetic algorithm shown to significantly outperform the MILP. Two fitness functions for the genetic algorithm are also examined, with a linear fitness function outperforming an inverse fitness function by up to 5% for the same calculation time. The genetic algorithm approach is computationally fast, allowing the schedule to be rapidly recalculated in response to unexpected delays and breakdowns.", "creator": "LaTeX with hyperref package"}}}