{"id": "1610.07989", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Oct-2016", "title": "Process Discovery using Inductive Miner and Decomposition", "abstract": "This report presents a submission to the Process Discovery Contest. The contest is dedicated to the assessment of tools and techniques that discover business process models from event logs. The objective is to compare the efficiency of techniques to discover process models that provide a proper balance between \"overfitting\" and \"underfitting\". In the context of the Process Discovery Contest, process discovery is turned into a classification task with a training set and a test set; where a process model needs to decide whether traces are fitting or not. In this report, we first show how we use two discovery techniques, namely: Inductive Miner and Decomposition, to discover process models from the training set using ProM tool. Second, we show how we use replay results to 1) check the rediscoverability of models, and to 2) classify unseen traces (in test logs) as fitting or not. Then, we discuss the classification results of validation logs, the complexity of discovered models, and their impact on the selection of models for submission. The report ends with the pictures of the submitted process models.", "histories": [["v1", "Tue, 25 Oct 2016 17:58:54 GMT  (9082kb,D)", "http://arxiv.org/abs/1610.07989v1", "A Submission to the Process Discovery Contest @ BPM2016"]], "COMMENTS": "A Submission to the Process Discovery Contest @ BPM2016", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["raji ghawi"], "accepted": false, "id": "1610.07989"}, "pdf": {"name": "1610.07989.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Raji Ghawi"], "emails": [], "sections": [{"heading": null, "text": "In this report, we first show how we apply two discovery techniques: inductive miner and decomposition to detect process models from the training set using the ProM tool. Second, we show how we use replay results to 1) verify the recoverability of models and 2) classify invisible traces (in test protocols) as appropriate or non-compliant. Then, we discuss the classification results of validation protocols and the complexity of detected models and their impact on the selection of models to submit. The report ends with images of the submitted process models."}, {"heading": "1 Introduction", "text": "In fact, most people who are able to survive themselves are not able to survive themselves. Most people who are able to survive themselves are not able to survive themselves. Most people who are able to survive themselves are not able to survive themselves. Most people who are able to survive themselves are not able to survive themselves. Most people who are able to survive themselves are not able to survive themselves. Most people who are able to survive themselves are not able to survive themselves. Most people who are able to survive themselves are not able to survive themselves. Most people who are able to survive themselves are not able to survive themselves."}, {"heading": "2 Process Discovery", "text": "We used two well-known discovery techniques: Inductive Miner [3] and Decomposed Process Mining [4, 5, 6]. We used these techniques to find process models for each of the 10 training logs. However, since only one process model was to be submitted for each event log, we decided to include a mixture of these models in our template. Rationally, we chose these techniques because they guarantee a level of recoverability, namely the ability to rediscover the models used to generate the traces of the event log. We believe that recoverability is indispensable to fulfill the task of correctly classifying new invisible traces. Models for processes 1, 2, 4, 8 and 9 are discovered with Inductive Miner. We used ProM Lite 2 for this group of models. Other models - for processes 3, 5, 6, 7 and 10 - are discovered with deposition techniques from Group M 6.1."}, {"heading": "2.1 Discovery using Inductive Miner", "text": "The inductive miner [3] is a discovery approach to constructing a process tree for a particular protocol. The main advantages of this approach are: \u2022 All found models correspond to solid, block-structured workflow (WF) mesh systems. \u2022 The model always fits, i.e. the model can generate the tracks in the logbook. The approach works recursively with divide-and-cross strategy: split log, construct part of the process tree and proceed with the handling of split parts of the protocol separately. A process tree can be transformed directly into a Petri mesh. However, ProM has a plug-in that can break down a Petri mesh directly using the inductive miner technique. To determine a model (Petri mesh) from an event protocol with inductive miner technique, we used ProM Lite4 and followed the following steps: 1. First, the protocol (in XES format) ProM is loaded onto Miner with Minaphine and then the Petri activation window is selected. \""}, {"heading": "2.2 Discovery using Decomposition", "text": "First, the protocol is divided into a number of sublogs. Second, a Subnet4The Inductive Miner plugin is also available in ProM 6.5.1. Therefore, we would like to emphasize that we have used ProM Lite for the submitted models that are discovered using Inductive Miner (as mentioned above: Models 1, 2, 4, 8 and 9).5The adoption of Petri nets is a labeled Petri net with an initial marker and a collection of definitive markers are discovered (using the specified detection algorithm) for each sublog. Third, these subnets are merged into a single accepted Petri net."}, {"heading": "3 Replaying Semantics", "text": "To reproduce an event log on a process model, we used the ProM plugin Replay a Log on Petri Net for Conformance Analysis (available in both ProM Lite and ProM 6.5.1, with identical results). We need a repetition for two tasks: 1. Check whether the discovered model can generate its original event log (retrievability); 2. Classify new invisible tracks (in validation and test records) as matching or not matching the detected models; 3. To reproduce a log on a process model: 1. On the workspace page, both the protocol and the model (Petri Net) are selected and used; 2. On the actions page, the Replay a Log on Petri Net for Conformance Analysis plugin is selected (Figure 6); 3. Then a dialog appears that allows restoration between the transitions of the Petri Net and the event classes of the log (Figure 7)."}, {"heading": "3.1 Rediscoverability Checking", "text": "Our choice of discovery techniques is mainly based on the property of recoverability. That is, we chose inductive mining and decomposition techniques because both guarantee this property. So, when we discover a model with one of these techniques, as discussed in Section 2, we repeat the protocol of the creation / training event of the discovered model to ensure that all traces in the protocol fit properly into the model. To do this, we follow the above mentioned repetition steps based on the training protocol and the detected model. The result of the repetition can be visualized in different ways. For example, the model can be visualized using the choice of Model Projected with Alignments with orientations about how in Figure 10. In this visualization, we can take a look at the Global Property within the inspector window. Among the displayed statistics, we are mainly interested in three statistics: Trace Fitness, MoveModel Fitness and Move-Log Fitness so that all of these statistics correspond to the global event. If these statistics correspond to the one in the Indicator, then the one of these statistics is perfect."}, {"heading": "3.2 Classification of Unseen Traces", "text": "During the Process Discovery Contest, process identification is transformed into a classification task with a training set and a test set. In addition, participants are provided with two validation sets so that they can customize their found models. A process model must decide whether the tracks fit or not. For this classification task, a test or validation protocol is repeated on the found model. Again, we use the ProM plug-in Replay a Log on Petri Net for Conformance Analysis according to the steps above. If the results of the reproduction are available, we visualize them using Project Alignment to Log choice. This displays log model alignments for each case / trace, as shown in Figure 11. For each track, a table of statistics is shown on the left; and a color image of track alignment is displayed on the right. The meaning of colors is displayed in a legend displayed on the right-hand side of the screen (Figure 12)."}, {"heading": "4 Discussion", "text": "This year it has come to the point where it will be able to put itself at the top, \"he said.\" We have to put ourselves at the top, \"he said.\" We have to put ourselves at the top, \"he said.\" We have to put ourselves at the top, \"he said."}, {"heading": "A Process Models", "text": "It is not the first time that the EU Commission has taken such a step."}], "references": [{"title": "Process Discovery Contest @ BPM 2016, https://www.win.tue.nl/ieeetfpm/doku.php?id=shared:process_discovery_contest", "author": ["J. Carmona", "M. de Leoni", "B. Depair", "T. Jouck"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2016}, {"title": "Process Mining: Discovery, Conformance and Enhancement of Business Processes", "author": ["Van der Aalst", "W.M.P"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Discovering Block-Structured Process Models from Event Logs - a Constructive Approach", "author": ["S. Leemans", "D. Fahland", "W. van der Aalst"], "venue": "Petri Nets 2013. LNCS,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "W.M.P.: Decomposed Process Mining: The ILP case", "author": ["H.M.W. Verbeek", "Van der Aalst"], "venue": "BPI", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "Decomposed Process Mining with DivideAndConquer", "author": ["H.M.W. Verbeek"], "venue": "Proceedings of the BPM Demo Sessions 2014,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "W.M.P.: Complexity Metrics for Workflow Nets", "author": ["K.B. Lassen", "Van der Aalst"], "venue": "Information and Software Technology,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2009}, {"title": "Metrics in Process Discovery", "author": ["Blum", "F. Rojas"], "venue": "Technical Report TR/DCC-2015-6,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "Abstract This report presents a submission to the Process Discovery Contest [1].", "startOffset": 76, "endOffset": 79}, {"referenceID": 1, "context": "One of the central tasks of Process Mining is Process Discovery, where knowledge is extracted from event logs (readily available in today\u2019s information systems) in order to discover real processes [2].", "startOffset": 197, "endOffset": 200}, {"referenceID": 2, "context": "In our submission to the contest, we discovered process models using two techniques: Inductive Miner [3] and Decomposition based discovery [4, 5, 6].", "startOffset": 101, "endOffset": 104}, {"referenceID": 3, "context": "In our submission to the contest, we discovered process models using two techniques: Inductive Miner [3] and Decomposition based discovery [4, 5, 6].", "startOffset": 139, "endOffset": 148}, {"referenceID": 4, "context": "In our submission to the contest, we discovered process models using two techniques: Inductive Miner [3] and Decomposition based discovery [4, 5, 6].", "startOffset": 139, "endOffset": 148}, {"referenceID": 2, "context": "We used two well known discovery techniques: Inductive Miner [3] and Decomposed Process Mining [4, 5, 6].", "startOffset": 61, "endOffset": 64}, {"referenceID": 3, "context": "We used two well known discovery techniques: Inductive Miner [3] and Decomposed Process Mining [4, 5, 6].", "startOffset": 95, "endOffset": 104}, {"referenceID": 4, "context": "We used two well known discovery techniques: Inductive Miner [3] and Decomposed Process Mining [4, 5, 6].", "startOffset": 95, "endOffset": 104}, {"referenceID": 2, "context": "1 Discovery using Inductive Miner Inductive Miner [3] is a discovery approach to construct a Process Tree for a given log.", "startOffset": 50, "endOffset": 53}, {"referenceID": 3, "context": "2 Discovery using Decomposition Decomposition [4, 5, 6] is a process mining technique that discovers an accepting Petri net5 from a log using decomposition.", "startOffset": 46, "endOffset": 55}, {"referenceID": 4, "context": "2 Discovery using Decomposition Decomposition [4, 5, 6] is a process mining technique that discovers an accepting Petri net5 from a log using decomposition.", "startOffset": 46, "endOffset": 55}, {"referenceID": 3, "context": "We used the batch plugin, hence default settings are used; for instance, the underlying discovery algorithm is ILP Miner [7][5].", "startOffset": 124, "endOffset": 127}, {"referenceID": 5, "context": "However, in order to prove this claim we computed different complexity metrics of process models [8, 9].", "startOffset": 97, "endOffset": 103}, {"referenceID": 6, "context": "However, in order to prove this claim we computed different complexity metrics of process models [8, 9].", "startOffset": 97, "endOffset": 103}], "year": 2016, "abstractText": "This report presents a submission to the Process Discovery Contest [1]. The contest is dedicated to the assessment of tools and techniques that discover business process models from event logs. The objective is to compare the efficiency of techniques to discover process models that provide a proper balance between \u201coverfitting\u201d and \u201cunderfitting\u201d. In the context of the Process Discovery Contest, process discovery is turned into a classification task with a training set and a test set; where a process model needs to decide whether traces are fitting or not. In this report, we first show how we use two discovery techniques, namely: Inductive Miner and Decomposition, to discover process models from the training set using ProM tool. Second, we show how we use replay results to 1) check the rediscoverability of models, and to 2) classify unseen traces (in test logs) as fitting or not. Then, we discuss the classification results of validation logs, and the complexity of discovered models, and their impact on the selection of models for submission. The report ends with the pictures of the submitted process models.", "creator": "LaTeX with hyperref package"}}}