{"id": "1611.01553", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Nov-2016", "title": "QBF Solving by Counterexample-guided Expansion", "abstract": "We introduce a novel generalization of Counterexample-Guided Inductive Synthesis (CEGIS) and instantiate it to yield a novel, competitive algorithm for solving Quantified Boolean Formulas (QBF). Current QBF solvers based on counterexample-guided expansion use a recursive approach which scales poorly with the number of quantifier alternations. Our generalization of CEGIS removes the need for this recursive approach, and we instantiate it to yield a simple and efficient algorithm for QBF solving. Lastly, this research is supported by a competitive, though straightforward, implementation of the algorithm, making it possible to study the practical impact of our algorithm design decisions, along with various optimizations.", "histories": [["v1", "Fri, 4 Nov 2016 22:08:40 GMT  (68kb,D)", "https://arxiv.org/abs/1611.01553v1", "pre-print, submitted at TACAS 2017"], ["v2", "Tue, 8 Nov 2016 15:26:12 GMT  (68kb,D)", "http://arxiv.org/abs/1611.01553v2", "pre-print, submitted at TACAS 2017, source code available atthis https URL"], ["v3", "Fri, 25 Nov 2016 17:48:36 GMT  (74kb,D)", "http://arxiv.org/abs/1611.01553v3", "pre-print, submitted at TACAS 2017, source code available atthis https URL"]], "COMMENTS": "pre-print, submitted at TACAS 2017", "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["roderick bloem", "nicolas braud-santoni", "vedad hadzic"], "accepted": false, "id": "1611.01553"}, "pdf": {"name": "1611.01553.pdf", "metadata": {"source": "CRF", "title": "QBF Solving by Counterexample-guided Expansion", "authors": ["Roderick Bloem", "Nicolas Braud-Santoni", "Vedad Hadzic"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "This year, it is closer than ever before in the history of the country."}, {"heading": "2 Counterexample-Guided Inductive Synthesis (CEGIS)", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Concepts", "text": "This year, there is less than a year to go before an agreement is reached."}, {"heading": "2.2 Contribution", "text": "We take a slightly different but related approach: a candidate is a set E of witnesses, i.e. assignments to existentially quantified variables; the learner's contention is that for each counter-example (i.e. each assignment of universally quantified variables) the formula can be made true by instantiating the existentially quantified variables. Conversely, the database of counter-examples is a set A of assignments to all universally quantified variables. This means that the algorithm is symmetrical between the universal and the existential variables: to find a new set of counter-examples (i.e. candidate solution), we expand the formula with the candidate (i.e. set of counter-examples) and call a SAT solver to find an assignment to the universal (or existential) variables."}, {"heading": "3 A novel algorithm for QBF solving", "text": "We indifferently refer to our algorithm and its prototypical implementation as alejtehad, after the concept of the same name in Islamic philosophy: it refers both to the argumentation process by which jurisprudence is produced, and to the state of knowledge that one knows nothing. This points to the minimalist nature of the algorithm: alejtehad is simple in the sense that it is concise to describe and has few prerequisites, both in theory and in its implementation. It relies on an iterative process in which arguments and counter-arguments are produced until a solution is found. Apart from the novelty and simplicity of its solution algorithm, alejtehad is unusual in that it is efficient, as described, without relying on complex formula optimizations or implementation strategies that are not described in Section 3.3."}, {"heading": "3.1 Notation", "text": "In the entirety of this essay, the examples QBF and Q are defined for the matrix (i.e. the proposition bodies) of a QBF formula. We consider, without loss of generality, a formula in which each quantifier has a single bit vector: \"There are no other examples than those that are able to verify their values.\" From this point of view, we can precisely define witnesses and counter-examples: - Witnesses are tuples X: = (x0)., xn + 1) of the concrete values for the existential variables. X is said to be a witness for a counter-model."}, {"heading": "3.3 Implementation concerns", "text": "Obviously, algorithm 1 only gives a high-level description of the solution algorithm, which is not necessarily the description of a quick implementation. Here are noteworthy aspects of our implementation that make it powerful: - With each iteration, new statement conjunctions are introduced in land use plans and land use plans: We systematically use incremental SAT solutions. - Existing clauses are not duplicated in land use plans or land use plans. - Likewise, when converting land use plans to land use plans, Tseitin results are naively converted into large (albeit linear) bubbles: Instead, we maintain a cache that assigns a Tseitin variable to each clause; if a clause has already been edited, no new clauses are added to land use plans and the existing Tseitin variable is restored. While RAReQS, with which we compare our implementation in section 5 pure optimizations, does not include the same as the formula used in its implementation prior to Qlicite."}, {"heading": "4 Formal arguments", "text": "As already mentioned, algorithm 1 is very simple, as are its dismissal and soundness arguments. We do not offer any guarantees of complexity beyond the immediate limit arising from the dismissal argument (Theorem 1): counter-example-based methods work well in practice, but at the expense of worst-case limits. However, we do have certain classes of problems that alejtehad can solve within 3 SAT queries, while existing CEGIS-based methods represented by RAReQS require exponentially many."}, {"heading": "4.1 Termination", "text": "Lemma 1. With each iteration of algorithm 1, A increases strictly (with regard to the specified inclusion). Evidence. The only operation that affects A is the addition of A, so A increases. Therefore, it is sufficient to prove that at least one new counterexample is produced with each iteration. For a specific A, if: = \"Y-AQ\" (XY, Y) is satisfactory, Q (XY, Y) applies in the resulting model to each counterexample Y-A. Therefore, one cannot rely only on existing counter-examples (concrete values that already exist in A): either it is unsatisfactory (and the algorithm ends), or the produced model contains new values that A is added, which thus (strictly) become larger. Q.e.d.Theorem 1. Algorithm 1 ends after at most 21 + \"n i\" = 0 | SAT queries.Evidence. The specified examples of all possible examples are \"at least two\" and \"ultimately.\""}, {"heading": "4.2 Soundness", "text": "If the original formula is true, there is a scolem model [31] for it: fx0 (), fx1 (\u00b7),.. fxn + 1 (\u00b7) so that the value of x0.... yn. Q (fx0), y0, fx1 (y0),.. yn \u2212 1, fxn (y0,... yn) Then there is such a model. (........) Then there is an example}, {"heading": "4.3 Distinguishability from RAReQS", "text": "This makes it difficult to explore these methods through the lens of complexity theory. However, here we can give a family of examples that take into account the algorithmic differences between our approach and the \"traditional\" CEGIS-based solvers, such as RAReQS terms, which we compare against the algorithmic description of RAReQS terms, without taking into account additional optimizations not described in the RAReQS papers. Theorem 3: There is an infinite family of QBF terms such as this ijtihad O (1) SAT descriptions that solve them, while RAReQS performs (2n) queries. We define these formulas to have the following structure, with QXn satisfactory and QYn falsifiable."}, {"heading": "5 Experimental results", "text": "In this section, we look at alejtehad's performance against RAReQS, which has recently won several QBF contests. We also highlight different problem families where we are doing better and those where we are doing very poorly. Furthermore, we highlight the impact of different formula parameters on our solution time."}, {"heading": "5.1 Experimental setting", "text": "The optimized alejtehad algorithm is implemented in C + + and uses MiniSat [12 - 14] as the supporting SAT solver. The code is based on RAReQS 'to minimize the differences (data structures, cache optimizations,...) that could explain the performance differences in addition to the implemented algorithm. It is available under a free software license (GPLv3) in the source code repository4.The input QBF is given in the standard QDIMACS format. All experiments were executed on a dedicated Nehalem machine with 192GB RAM and 24 CPU threads with 2.8GHz each. Each execution was assigned a single virtual core and 10 minutes per problem, while the machine was otherwise unused.RAReQS was executed in its standard configuration, while our solver has no intermediate parameters."}, {"heading": "5.2 Performance on Application Benchmarks", "text": "We also examined the effects of the Bloqqer preprocessor [6,19], which results in a general performance improvement for both solvers, but is more helpful for RAReQS, as shown in Table 1. We then analyzed how the number of quantifiers affects solver performance, as shown in Figure 2. It becomes clear that alejtehad tends4 https: / / extgit.iaik.tugraz.at / scos / ijtihad 5 Available at http: / / www.qbflib.org / eval16.html at the time of writing has an advantage over RAReQS tends4 https: / / extgit.tugraz.at / scos / ijtihad 5 Available at http: / / www.qbflib.org / eval16.html at the time of writing. Saktehad tends4 https: / / extgit.iaik.tugraz.at / scos / ijtihad 5 Available at http: / / www.qbflib.org / eval16.html at the time of writing."}, {"heading": "5.3 Performance on Random QBFs with a fixed structure", "text": "There is a crossover point in the size of random QBF problems, where the formula is equally likely to be SAT and UNSAT, and where verifying or falsifying it becomes as difficult as possible. We use this approach to argue that alejtehad and RAReQS are different from quantifying depth increases. To further support the claim that alejtehad outperforms RAReQS on QBFs with many quantifying alternatives, we have run both approaches without external preprocessing7 on hard random QBFs. All the QBFs studied were generated by BlocksQBF [8] and had a fixed structure in which each clause of the quantified CNF vectored a variable variable. We produced benchmarks with increasing numbers of variables under each quantifier, and then compared the overall results."}, {"heading": "Acknowledgements", "text": "We would like to thank Armin Biere, Florian Lonsing and Martina Seidl, with whom we work through the LogiCS doctoral college and the RiSE project, for their patient support and willingness to share their expertise in QBFsolving. In addition, Martina Seidl and Uwe Egly deserve special thanks for their expert and thorough review of the paper. Our understanding of our relaxation from CEGIS also benefited from fruitful discussions at CAV '16 with Armando Solar-Lezama, the original discoverer of CEGIS."}], "references": [{"title": "Syntax-guided synthesis", "author": ["R. Alur", "R. Bod\u0301\u0131k", "E. Dallal", "D. Fisman", "P. Garg", "G. Juniwal", "H. KressGazit", "P. Madhusudan", "M.M.K. Martin", "M. Raghothaman", "S. Saha", "S.A. Seshia", "R. Singh", "A. Solar-Lezama", "E. Torlak", "A. Udupa"], "venue": "In Dependable Software Systems Engineering,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Qubos: Deciding Quantified Boolean Logic Using Propositional Satisfiability Solvers", "author": ["A. Ayari", "D. Basin"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2002}, {"title": "2QBF: Challenges and Solutions", "author": ["V. Balabanov", "Jiang", "J.-H. R", "C. Scholl", "A. Mishchenko", "R.K. Brayton"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}, {"title": "Resolve and expand", "author": ["A. Biere"], "venue": "In Theory and Applications of Satisfiability Testing, 7th International Conference,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2004}, {"title": "Blocked Clause Elimination for QBF", "author": ["A. Biere", "F. Lonsing", "M. Seidl"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "Satbased methods for circuit synthesis", "author": ["R. Bloem", "U. Egly", "P. Klampfl", "R. K\u00f6nighofer", "F. Lonsing"], "venue": "In Formal Methods in Computer-Aided Design,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Automated testing and debugging of sat and qbf solvers", "author": ["R. Brummayer", "F. Lonsing", "A. Biere"], "venue": "In In Proc. of SAT 2010,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "Experimental analysis of the computational cost of evaluating quantified boolean formulae", "author": ["M. Cadoli", "A. Giovanardi", "M. Schaerf"], "venue": "In In: AI*IA", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1997}, {"title": "An algorithm to evaluate quantified boolean formulae", "author": ["M. Cadoli", "A. Giovanardi", "M. Schaerf"], "venue": "AAAI/IAAI", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1998}, {"title": "An algorithm to evaluate quantified boolean formulae and its experimental evaluation", "author": ["M. Cadoli", "M. Schaerf", "A. Giovanardi", "M. Giovanardi"], "venue": "J. Autom. Reasoning 28,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2002}, {"title": "Effective preprocessing in sat through variable and clause elimination", "author": ["N. E\u00e9n", "A. Biere"], "venue": "In Proceedings of the 8th International Conference on Theory and Applications of Satisfiability Testing (Berlin, Heidelberg,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2005}, {"title": "Applying logic synthesis for speeding up SAT", "author": ["N. E\u00e9n", "A. Mishchenko", "N. S\u00f6rensson"], "venue": "In Theory and Applications of Satisfiability Testing - SAT 2007,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2007}, {"title": "An Extensible SAT-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2004}, {"title": "Detecting unrealizability of distributed faulttolerant systems", "author": ["B. Finkbeiner", "L. Tentrup"], "venue": "Logical Methods in Computer Science 11,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2015}, {"title": "A synthesized algorithm for interactive consistency", "author": ["A. Gasc\u00f3n", "A. Tiwari"], "venue": "In NASA Formal Methods Symposium", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2014}, {"title": "Learning for quantified boolean logic satisfiability", "author": ["E. Giunchiglia", "M. Narizzano", "A Tacchella"], "venue": "AAAI/IAAI", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2002}, {"title": "Investigations in proof theory: The properties of true propositions. in van heijenoort", "author": ["J. Herbrand"], "venue": "j., editor. From Frege to Go\u0308del", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1967}, {"title": "Clause elimination for sat and qsat", "author": ["M. Heule", "M. J\u00e4rvisalo", "F. Lonsing", "M. Seidl", "A Biere"], "venue": "JAIR", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "Solving QBF with counterexample guided refinement", "author": ["M. Janota", "W. Klieber", "J. Marques-Silva", "E.M. Clarke"], "venue": "Artif. Intell", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2016}, {"title": "Compressing BMC encodings with QBF", "author": ["T. Jussila", "A. Biere"], "venue": "Electr. Notes Theor. Comput. Sci. 174,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2007}, {"title": "Resolution for quantified boolean formulas", "author": ["H. Kleine B\u00fcning", "M. Karpinski", "A. Fl\u00f6gel"], "venue": "Inf. Comput. 117,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1995}, {"title": "Lemma and model caching in decision procedures for quantified boolean formulas", "author": ["R. Letz"], "venue": "In Proceedings of the International Conference on Automated Reasoning with Analytic Tableaux and Related Methods (London, UK, UK,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2002}, {"title": "Incrementally computing minimal unsatisfiable cores of qbfs via a clause group solver API", "author": ["F. Lonsing", "U. Egly"], "venue": "In Theory and Applications of Satisfiability Testing - SAT 2015 - 18th International Conference,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}, {"title": "Robust qbf encodings for sequential circuits with applications to verification, debug, and test", "author": ["H. Mangassarian", "A. Veneris", "M. Benedetti"], "venue": "IEEE Transactions on Computers 59,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2010}, {"title": "Computing vertex eccentricity in exponentially large graphs: Qbf formulation and solution", "author": ["M. Mneimneh", "K. Sakallah"], "venue": "Proc. 6th Intl. Conf. on Theory and Applications of Satisfiability Testing (SAT03),", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2003}, {"title": "Optimizing a bdd-based modal solver", "author": ["G. Pan", "M.Y. Vardi"], "venue": "Proceedings of the 19th International Conference on Automated Deduction", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2003}, {"title": "Incremental Determinization", "author": ["M.N. Rabe", "S.A. Seshia"], "venue": null, "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2016}, {"title": "Caqe: A certifying qbf solver", "author": ["M.N. Rabe", "L. Tentrup"], "venue": "In Proceedings of the 15th Conference on Formal Methods in Computer-Aided Design (Austin, TX,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2015}, {"title": "Constructing conditional plans by a theorem-prover", "author": ["J. Rintanen"], "venue": "J. Artif. Intell. Res. (JAIR)", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 1999}, {"title": "Logico-combinatorial investigations in the satisfiability or provability of mathematical propositions: a simplified proof of a theorem by l. l\u00f6wenheim and generalizations of the theorem. From Frege to G\u00f6del", "author": ["T. Skolem"], "venue": "A Source Book in Mathematical Logic", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 1931}, {"title": "Program sketching", "author": ["A. Solar-Lezama"], "venue": "STTT 15,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2013}, {"title": "Towards a Symmetric Treatment of Satisfaction and Conflicts in Quantified Boolean Formula Evaluation", "author": ["L. Zhang", "S. Malik"], "venue": null, "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2002}], "referenceMentions": [{"referenceID": 28, "context": "Improvements in QBF solving will thus have a strong impact in many application domains with problems that can be translated to QBF, including planning [30], model checking [21], circuit design [25] and synthesis [7,32], in particular synthesis of distributed systems [15,16].", "startOffset": 151, "endOffset": 155}, {"referenceID": 19, "context": "Improvements in QBF solving will thus have a strong impact in many application domains with problems that can be translated to QBF, including planning [30], model checking [21], circuit design [25] and synthesis [7,32], in particular synthesis of distributed systems [15,16].", "startOffset": 172, "endOffset": 176}, {"referenceID": 23, "context": "Improvements in QBF solving will thus have a strong impact in many application domains with problems that can be translated to QBF, including planning [30], model checking [21], circuit design [25] and synthesis [7,32], in particular synthesis of distributed systems [15,16].", "startOffset": 193, "endOffset": 197}, {"referenceID": 5, "context": "Improvements in QBF solving will thus have a strong impact in many application domains with problems that can be translated to QBF, including planning [30], model checking [21], circuit design [25] and synthesis [7,32], in particular synthesis of distributed systems [15,16].", "startOffset": 212, "endOffset": 218}, {"referenceID": 30, "context": "Improvements in QBF solving will thus have a strong impact in many application domains with problems that can be translated to QBF, including planning [30], model checking [21], circuit design [25] and synthesis [7,32], in particular synthesis of distributed systems [15,16].", "startOffset": 212, "endOffset": 218}, {"referenceID": 13, "context": "Improvements in QBF solving will thus have a strong impact in many application domains with problems that can be translated to QBF, including planning [30], model checking [21], circuit design [25] and synthesis [7,32], in particular synthesis of distributed systems [15,16].", "startOffset": 267, "endOffset": 274}, {"referenceID": 14, "context": "Improvements in QBF solving will thus have a strong impact in many application domains with problems that can be translated to QBF, including planning [30], model checking [21], circuit design [25] and synthesis [7,32], in particular synthesis of distributed systems [15,16].", "startOffset": 267, "endOffset": 274}, {"referenceID": 8, "context": "Research into engineering QBF solvers has seen considerable progress since initial work in the mid-nineties [10,22], with most solvers either implementing a quantified version of CDCL (e.", "startOffset": 108, "endOffset": 115}, {"referenceID": 20, "context": "Research into engineering QBF solvers has seen considerable progress since initial work in the mid-nineties [10,22], with most solvers either implementing a quantified version of CDCL (e.", "startOffset": 108, "endOffset": 115}, {"referenceID": 9, "context": ", [11,24,33]) or an expansion-based approach (e.", "startOffset": 2, "endOffset": 12}, {"referenceID": 22, "context": ", [11,24,33]) or an expansion-based approach (e.", "startOffset": 2, "endOffset": 12}, {"referenceID": 31, "context": ", [11,24,33]) or an expansion-based approach (e.", "startOffset": 2, "endOffset": 12}, {"referenceID": 3, "context": "[4]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "Since the first complete solver in 1998, based on DPLL [10], an incredible amount of work has gone into QBF: an analogue of propositional CDCL was discovered in 2002 [17, 23], the very same year as expansion-based solving [2] was discovered.", "startOffset": 55, "endOffset": 59}, {"referenceID": 15, "context": "Since the first complete solver in 1998, based on DPLL [10], an incredible amount of work has gone into QBF: an analogue of propositional CDCL was discovered in 2002 [17, 23], the very same year as expansion-based solving [2] was discovered.", "startOffset": 166, "endOffset": 174}, {"referenceID": 21, "context": "Since the first complete solver in 1998, based on DPLL [10], an incredible amount of work has gone into QBF: an analogue of propositional CDCL was discovered in 2002 [17, 23], the very same year as expansion-based solving [2] was discovered.", "startOffset": 166, "endOffset": 174}, {"referenceID": 1, "context": "Since the first complete solver in 1998, based on DPLL [10], an incredible amount of work has gone into QBF: an analogue of propositional CDCL was discovered in 2002 [17, 23], the very same year as expansion-based solving [2] was discovered.", "startOffset": 222, "endOffset": 225}, {"referenceID": 18, "context": "Expansion-based solving has known tremendous success, and is the basis for counterexample-guided methods such as RAReQS [20], a state-of-the-art expansionbased solver.", "startOffset": 120, "endOffset": 124}, {"referenceID": 26, "context": "function computation, was introduced [28].", "startOffset": 37, "endOffset": 41}, {"referenceID": 0, "context": "In this paper, we follow an expansion-based approach to solving QBFs that is inspired by counterexample-guided inductive synthesis (CEGIS) [1, 32].", "startOffset": 139, "endOffset": 146}, {"referenceID": 30, "context": "In this paper, we follow an expansion-based approach to solving QBFs that is inspired by counterexample-guided inductive synthesis (CEGIS) [1, 32].", "startOffset": 139, "endOffset": 146}, {"referenceID": 18, "context": "Our approach is similar to the one implemented in the very successful solver RAReQS [20], which instantiates the outer existential quantifiers using a counterexampleguided approach.", "startOffset": 84, "endOffset": 88}, {"referenceID": 0, "context": "Counterexample-guided inductive synthesis (CEGIS) is a generic framework, initially devised in the context of syntax-guided synthesis [1], involving iterations between two components:", "startOffset": 134, "endOffset": 137}, {"referenceID": 18, "context": "Although the worst-case complexity guarantees usually devolve to the size of the set of counterexamples or of candidate solution, this approach has been wildly successful in practice [20,29,32].", "startOffset": 183, "endOffset": 193}, {"referenceID": 27, "context": "Although the worst-case complexity guarantees usually devolve to the size of the set of counterexamples or of candidate solution, this approach has been wildly successful in practice [20,29,32].", "startOffset": 183, "endOffset": 193}, {"referenceID": 30, "context": "Although the worst-case complexity guarantees usually devolve to the size of the set of counterexamples or of candidate solution, this approach has been wildly successful in practice [20,29,32].", "startOffset": 183, "endOffset": 193}, {"referenceID": 18, "context": "One of the earliest applications of CEGIS to QBF solving, RAReQS [20], introduced a recursive approach where the whole solver is used as a verifier, each nested solver dealing with one block of quantifiers.", "startOffset": 65, "endOffset": 69}, {"referenceID": 2, "context": "There has been many refinements of this technique since RAReQS, from RAReQS\u2019 recent reimplementation from scratch for 2-QBF [3] to the clause abstraction performed by CAQE [29].", "startOffset": 124, "endOffset": 127}, {"referenceID": 27, "context": "There has been many refinements of this technique since RAReQS, from RAReQS\u2019 recent reimplementation from scratch for 2-QBF [3] to the clause abstraction performed by CAQE [29].", "startOffset": 172, "endOffset": 176}, {"referenceID": 29, "context": "If a prenex QBF formula as defined above is true, it has an associated Skolem model [31]: functions fxi+1(y0 .", "startOffset": 84, "endOffset": 88}, {"referenceID": 16, "context": "Conversely, false formulas have Herbrand models [18]: functions fyi(x0 .", "startOffset": 48, "endOffset": 52}, {"referenceID": 29, "context": "If the original formula is true, there is a Skolem model [31] for it:", "startOffset": 57, "endOffset": 61}, {"referenceID": 16, "context": "If the original QBF is false, it has a Herbrand model [18]: fy0(\u00b7) .", "startOffset": 54, "endOffset": 58}, {"referenceID": 18, "context": "xi,yi) n goes as follows [20]:", "startOffset": 25, "endOffset": 29}, {"referenceID": 12, "context": "The optimised alejtehad algorithm is implemented in C++ and uses MiniSat [12\u2013 14] as its backing SAT solver.", "startOffset": 73, "endOffset": 81}, {"referenceID": 4, "context": "We also evaluated the impact of the preprocessor Bloqqer [6,19], which yields an overall performance increase for both solvers but is more helpful to RAReQS, as seen in Table 1.", "startOffset": 57, "endOffset": 63}, {"referenceID": 17, "context": "We also evaluated the impact of the preprocessor Bloqqer [6,19], which yields an overall performance increase for both solvers but is more helpful to RAReQS, as seen in Table 1.", "startOffset": 57, "endOffset": 63}, {"referenceID": 4, "context": "Using Bloqqer, however, generally decreases the number of quantifiers [6], which explains why preprocessing helps RAReQS more.", "startOffset": 70, "endOffset": 73}, {"referenceID": 25, "context": "The biggest difference in performance can be seen on the benchmark families described by Pan and Vardi [27], and those described by Mneimneh and Sakallah [26].", "startOffset": 103, "endOffset": 107}, {"referenceID": 24, "context": "The biggest difference in performance can be seen on the benchmark families described by Pan and Vardi [27], and those described by Mneimneh and Sakallah [26].", "startOffset": 154, "endOffset": 158}, {"referenceID": 7, "context": "Experimental evidence shown in [9] suggests that there is a crossover point in the size of random QBF problems, where the formula is equally likely to be SAT and UNSAT, and where verifying or falsifying it becomes as hard as possible.", "startOffset": 31, "endOffset": 34}, {"referenceID": 6, "context": "All examined QBFs were generated by BlocksQBF [8] and had a fixed structure in which each clause of the quantified CNF had one variable from every quantified variable vector.", "startOffset": 46, "endOffset": 49}, {"referenceID": 26, "context": "y = x take 2 steps to enumerate the (x, y) pairs [28], with x and y being vectors of n Boolean variables.", "startOffset": 49, "endOffset": 53}, {"referenceID": 26, "context": "have been investigating synthesising directly Skolem functions [28,29], which can efficiently deal with this kind of QBF instances.", "startOffset": 63, "endOffset": 70}, {"referenceID": 27, "context": "have been investigating synthesising directly Skolem functions [28,29], which can efficiently deal with this kind of QBF instances.", "startOffset": 63, "endOffset": 70}, {"referenceID": 26, "context": "3, current preprocessors do not benefit alejtehad as much as other solver: can Bloqqer be tuned or improved to better support our approach? \u2013 Can our approach be combined with Skolem function synthesis [28] so as to handle problems where the Skolem or Herbrand models contain many concrete values? \u2013 Outputting small certificates is a known challenge for counterexample-guided methods.", "startOffset": 202, "endOffset": 206}], "year": 2016, "abstractText": "We introduce a novel generalization of Counterexample-Guided Inductive Synthesis (CEGIS) and instantiate it to yield a novel, competitive algorithm for solving Quantified Boolean Formulas (QBF). Current QBF solvers based on counterexample-guided expansion use a recursive approach which scales poorly with the number of quantifier alternations. Our generalization of CEGIS removes the need for this recursive approach, and we instantiate it to yield a simple and efficient algorithm for QBF solving. Lastly, this research is supported by a competitive, though straightforward, implementation of the algorithm, making it possible to study the practical impact of our algorithm design decisions.", "creator": "LaTeX with hyperref package"}}}