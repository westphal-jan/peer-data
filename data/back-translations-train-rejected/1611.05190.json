{"id": "1611.05190", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Nov-2016", "title": "Driving CDCL Search", "abstract": "The CDCL algorithm is the leading solution adopted by state-of-the-art solvers for SAT, SMT, ASP, and others. Experiments show that the performance of CDCL solvers can be significantly boosted by embedding domain-specific heuristics, especially on large real-world problems. However, a proper integration of such criteria in off-the-shelf CDCL implementations is not obvious. In this paper, we distill the key ingredients that drive the search of CDCL solvers, and propose a general framework for designing and implementing new heuristics. We implemented our strategy in an ASP solver, and we experimented on two industrial domains. On hard problem instances, state-of-the-art implementations fail to find any solution in acceptable time, whereas our implementation is very successful and finds all solutions.", "histories": [["v1", "Wed, 16 Nov 2016 09:13:26 GMT  (39kb)", "http://arxiv.org/abs/1611.05190v1", "Paper presented at the 1st Workshop on Trends and Applications of Answer Set Programming (TAASP 2016), Klagenfurt, Austria, 26 September 2016, 15 pages, LaTeX, 5 figures"]], "COMMENTS": "Paper presented at the 1st Workshop on Trends and Applications of Answer Set Programming (TAASP 2016), Klagenfurt, Austria, 26 September 2016, 15 pages, LaTeX, 5 figures", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["carmine dodaro", "philip gasteiger", "nicola leone", "benjamin musitsch", "francesco ricca", "konstantin schekotihin"], "accepted": false, "id": "1611.05190"}, "pdf": {"name": "1611.05190.pdf", "metadata": {"source": "CRF", "title": "Driving CDCL Search", "authors": ["Carmine Dodaro", "Philip Gasteiger", "Nicola Leone", "Benjamin Musitsch", "Francesco Ricca", "Konstantin Schekotihin"], "emails": ["lastname@mat.unical.it", "firstname.lastname@aau.at"], "sections": [{"heading": null, "text": "ar Xiv: 161 1,05 190v 1 [cs.A I] 1 6N ov"}, {"heading": "1 Introduction", "text": "This year, it has come to the point where there is only one occasion when there is a scandal, and that is when there is a scandal."}, {"heading": "2 An overview of the CDCL algorithm", "text": "It is one of the greatest sighs in the world that has ever existed. It is one of the greatest sighs in the world that has ever existed to explore and explore the world."}, {"heading": "3 Driving CDCL Search", "text": "This year, it is more than ever in the history of the city, where it is so far that it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place."}, {"heading": "4 Case study: Answer Set Programming", "text": "In this section, we report on a case study that provides pragmatic evidence for the applicability of our framework, which is being developed in the context of Answer Set Programming (ASP) [9]. ASP is an explanatory problem-solving paradigm proposed in the field of logical programming and non-monotonous thinking. ASP is an ideal test bed for our framework for two main reasons: (i) ASP solvers are efficient CDCL implementations today; (ii) ASP has been applied to a variety of complex problems, including hard industrial problems. Below, we first describe the implementation of our framework in a well-known ASP solver, and then report on the resolution of two real configuration problems that occur in Siemens practice: the Partner Units Problem (PUP) and the Combined Configuration Problem (CCP). These seemed to be among the toughest industrial benchmarks from the ASP 2015 competition, and may be considered to be more specific problems in the ASP."}, {"heading": "4.1 Implementation of the framework", "text": "The heuristic framework has been implemented in C + + and provides an infrastructure for easy specification and testing of heuristic strategies. The user can adopt multiple languages for implementing external heuristics, ranging from imperative to declarative. In particular, the framework for defining heuristics in Perl and Python can be implemented to obtain fast prototypes and achieve better performance in C + +. (In our tests, we found that C + + implementations are often faster than comparable perl and Python counterparts, which are usually easier to develop)."}, {"heading": "4.2 Partner Units Problem", "text": "In fact, most of them will be able to move to another world, where they can move to another world, where they can find their way to another world."}, {"heading": "4.3 Combined Configuration Problem", "text": "In fact, it is the case that most of them are able to abide by the rules that they have imposed on themselves. (...) Most of them are able to abide by the rules. (...) Most of them are able to abide by the rules. (...) Most of them are able to abide by the rules. (...) Most of them are not able to abide by the rules. (...) Most of them are able to abide by the rules. (...) Most of them are able to recognize themselves. (...) Most of them are not. (...) Most of them are able to recognize themselves. (...) Most of them are able to recognize themselves. (...) Most of them are able to recognize themselves. (...) Most of them are not able to recognize themselves. (...)"}, {"heading": "5 Conclusion", "text": "Branched heuristics are a key component of the CDCL algorithm. Despite several effective heuristics proposed in the literature, their integration into existing solvers is generally not trivial. The paper proposed a novel framework that simplifies the design of new heuristics for CDCL solvers by distilling the key ingredients that are useful for the search. It was validated in a case study using our framework for effectively solving two hard industrial problems. Results are positive: Hard cases that were not solvable with previous approaches are efficiently solved through our implementation."}, {"heading": "Acknowledgements", "text": "This work was partially supported by the KWF Contract KWF-3520 / 26767 / 38701, FWF Contract I 2144 N-15, the Italian Ministry of Universities, Research within the PON project \"Ba2Know (Business Analytics to Know) Service Innovation - LAB,\" No. PON03PE 00001 1 1, and by the Italian Ministry of Economic Development within the project \"PIUCultura (Paradigmi Innovativi per l'Utilizzo della Cultura)\" No. F / 020016 / 01-02 / X27."}], "references": [{"title": "Advances in WASP", "author": ["M. Alviano", "C. Dodaro", "N. Leone", "F Ricca"], "venue": "In LPNMR 2015. pp. 40\u201354.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Optimization Methods for the Partner Units Problem", "author": ["M. Aschinger", "C. Drescher", "G. Friedrich", "G. Gottlob", "P. Jeavons", "A. Ryabokon", "E. Thorstensen"], "venue": "CPAIOR 2011. pp. 4\u201319.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2011}, {"title": "Tackling the Partner Units Configuration Problem", "author": ["M. Aschinger", "C. Drescher", "G. Gottlob", "P. Jeavons", "E. Thorstensen"], "venue": "IJCAI 2011. pp. 497\u2013503.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "Predicting Learnt Clauses Quality in Modern SAT Solvers", "author": ["G. Audemard", "L. Simon"], "venue": "IJCAI 2009. pp. 399\u2013404.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2009}, {"title": "Towards Understanding and Harnessing the Potential of Clause Learning", "author": ["P. Beame", "H.A. Kautz", "A. Sabharwal"], "venue": "J. Artif. Intell. Res. (JAIR) 22, 319\u2013351", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2004}, {"title": "Evaluating CDCL Variable Scoring Schemes", "author": ["A. Biere", "A. Fr\u00f6hlich"], "venue": "SAT 2015. pp. 405\u2013 422.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Handbook of Satisfiability, Frontiers in Artificial Intelligence and Applications, vol", "author": ["A. Biere", "M. Heule", "H. van Maaren", "Walsh", "T. (eds."], "venue": "185. IOS Press", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2009}, {"title": "asprin: Customizing Answer Set Preferences without a Headache", "author": ["G. Brewka", "J.P. Delgrande", "J. Romero", "T. Schaub"], "venue": "AAAI 2015. pp. 1467\u20131474.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Answer set programming at a glance", "author": ["G. Brewka", "T. Eiter", "M. Truszczynski"], "venue": "Commun. ACM 54(12), 92\u2013103", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "The Partner Units Problem a Constraint Programming Case Study", "author": ["C. Drescher"], "venue": "ICTAI 2012. pp. 170\u2013177.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Effective Preprocessing in SAT Through Variable and Clause Elimination", "author": ["N. E\u00e9n", "A. Biere"], "venue": "SAT 2005. pp. 61\u201375.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2005}, {"title": "An Extensible SAT-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "SAT 2003. pp. 502\u2013518.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2003}, {"title": "Modeling Technical Product Configuration Problems", "author": ["A. Falkner", "A. Haselb\u00f6ck", "G. Schenner"], "venue": "Workshop on Configuration, ECAI 2010. pp. 40\u201346.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2010}, {"title": "Industrial success stories of ASP and CP: What\u2019s still open? (2015), joint invited talk at ICLP and CP", "author": ["G. Friedrich"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Domain-Specific Heuristics in Answer Set Programming", "author": ["M. Gebser", "B. Kaufmann", "J. Romero", "R. Otero", "T. Schaub", "P. Wanko"], "venue": "AAAI 2013.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2013}, {"title": "Conflict-driven answer set solving: From theory to practice", "author": ["M. Gebser", "B. Kaufmann", "T. Schaub"], "venue": "Artif. Intell. 187, 52\u201389", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2012}, {"title": "The design of the sixth answer set programming competition report", "author": ["M. Gebser", "M. Maratea", "F. Ricca"], "venue": "LPNMR 2015. pp. 531\u2013544.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2015}, {"title": "The sixth answer set programming competition web site", "author": ["M. Gebser", "M. Maratea", "F. Ricca"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2015}, {"title": "Constraint Answer Set Solving", "author": ["M. Gebser", "M. Ostrowski", "T. Schaub"], "venue": "ICLP 2009. pp. 235\u2013249.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2009}, {"title": "Combining Heuristics for Configuration Problems Using Answer Set Programming", "author": ["M. Gebser", "A. Ryabokon", "G. Schenner"], "venue": "LPNMR 2015. pp. 384\u2013397.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2015}, {"title": "Algorithm runtime prediction: Methods & evaluation", "author": ["F. Hutter", "L. Xu", "H.H. Hoos", "K. Leyton-Brown"], "venue": "Artif. Intell. 206, 79\u2013111", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2014}, {"title": "Chaff: Engineering an Efficient SAT Solver", "author": ["M.W. Moskewicz", "C.F. Madigan", "Y. Zhao", "L. Zhang", "S. Malik"], "venue": "DAC 2001. pp. 530\u2013535.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2001}, {"title": "Solving SAT and SAT Modulo Theories: From an abstract Davis\u2013Putnam\u2013Logemann\u2013Loveland procedure to DPLL(T)", "author": ["R. Nieuwenhuis", "A. Oliveras", "C. Tinelli"], "venue": "J. ACM 53(6), 937\u2013 977", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2006}, {"title": "Planning as satisfiability: Heuristics", "author": ["J. Rintanen"], "venue": "Artif. Intell. 193, 45\u201386", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2012}, {"title": "GRASP: A Search Algorithm for Propositional Satisfiability", "author": ["J.P.M. Silva", "K.A. Sakallah"], "venue": "IEEE Trans. Computers 48(5), 506\u2013521", "citeRegEx": "25", "shortCiteRegEx": null, "year": 1999}, {"title": "QuickPup: A Heuristic Backtracking Algorithm for the Partner Units Configuration Problem", "author": ["E.C. Teppan", "G. Friedrich", "A.A. Falkner"], "venue": "IAAI 2012.", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2012}, {"title": "Efficient Conflict Driven Learning in Boolean Satisfiability Solver", "author": ["L. Zhang", "C.F. Madigan", "M.W. Moskewicz", "S. Malik"], "venue": "ICCAD 2001. pp. 279\u2013285.", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2001}], "referenceMentions": [{"referenceID": 24, "context": "The Conflict Driven Clause Learning (CDCL) algorithm [25] is the leading solution adopted by state-of-the-art solvers for Boolean Satisfiability (SAT) [7], Satisfiability Modulo Theories (SMT) [23], and Answer Set Programming (ASP) [9] to mention a few.", "startOffset": 53, "endOffset": 57}, {"referenceID": 6, "context": "The Conflict Driven Clause Learning (CDCL) algorithm [25] is the leading solution adopted by state-of-the-art solvers for Boolean Satisfiability (SAT) [7], Satisfiability Modulo Theories (SMT) [23], and Answer Set Programming (ASP) [9] to mention a few.", "startOffset": 151, "endOffset": 154}, {"referenceID": 22, "context": "The Conflict Driven Clause Learning (CDCL) algorithm [25] is the leading solution adopted by state-of-the-art solvers for Boolean Satisfiability (SAT) [7], Satisfiability Modulo Theories (SMT) [23], and Answer Set Programming (ASP) [9] to mention a few.", "startOffset": 193, "endOffset": 197}, {"referenceID": 8, "context": "The Conflict Driven Clause Learning (CDCL) algorithm [25] is the leading solution adopted by state-of-the-art solvers for Boolean Satisfiability (SAT) [7], Satisfiability Modulo Theories (SMT) [23], and Answer Set Programming (ASP) [9] to mention a few.", "startOffset": 232, "endOffset": 235}, {"referenceID": 6, "context": "Notably, CDCL solvers have been applied with success for solving several realworld problems ranging from hardware and software model checking, planning, equivalence checking, bioinformatics, configuration problems, hardware and software test, software package dependencies, cryptography and more [7].", "startOffset": 296, "endOffset": 299}, {"referenceID": 6, "context": ", the criterion determining the literal to be assumed true at a given stage of the computation) can dramatically affect the overall performance of an implementation [7].", "startOffset": 165, "endOffset": 168}, {"referenceID": 5, "context": "State-of-the-art CDCL implementations feature very good general purpose heuristics belonging to the family of VSIDS [6,12,22].", "startOffset": 116, "endOffset": 125}, {"referenceID": 11, "context": "State-of-the-art CDCL implementations feature very good general purpose heuristics belonging to the family of VSIDS [6,12,22].", "startOffset": 116, "endOffset": 125}, {"referenceID": 21, "context": "State-of-the-art CDCL implementations feature very good general purpose heuristics belonging to the family of VSIDS [6,12,22].", "startOffset": 116, "endOffset": 125}, {"referenceID": 5, "context": "Since their introduction, VSIDS heuristics proved to be a key ingredient for solving many relevant problems [6].", "startOffset": 108, "endOffset": 111}, {"referenceID": 20, "context": "Nonetheless, no general heuristic is known to be the best possible choice for all problems [21].", "startOffset": 91, "endOffset": 95}, {"referenceID": 4, "context": "demonstrated the utility of a domain-specific branching heuristic for solving the pebbling formulas with a CDCL solver [5]; and Rintanen proposed to replace the standard VSIDS by a domain-heuristics for efficiently solving planning as satisfiability [24].", "startOffset": 119, "endOffset": 122}, {"referenceID": 23, "context": "demonstrated the utility of a domain-specific branching heuristic for solving the pebbling formulas with a CDCL solver [5]; and Rintanen proposed to replace the standard VSIDS by a domain-heuristics for efficiently solving planning as satisfiability [24].", "startOffset": 250, "endOffset": 254}, {"referenceID": 13, "context": "joint invited talk at CP-ICLP 2015 described a number of experiences in which \u201cdomainspecific heuristics turned out to be the key component in several industrial applications of problem solvers\u201d [14].", "startOffset": 195, "endOffset": 199}, {"referenceID": 23, "context": "However, as argued in [24]: \u201cthe main challenge in defining a variable selection scheme is its integration in the CDCL algorithm in a productive way\u201d.", "startOffset": 22, "endOffset": 26}, {"referenceID": 5, "context": "A number of examples are provided to demonstrate the applicability of the proposed framework for defining a variety of known heuristic criteria from the literature [6,24].", "startOffset": 164, "endOffset": 170}, {"referenceID": 23, "context": "A number of examples are provided to demonstrate the applicability of the proposed framework for defining a variety of known heuristic criteria from the literature [6,24].", "startOffset": 164, "endOffset": 170}, {"referenceID": 25, "context": "Pragmatic evidence of the benefits of our framework in devising problem-specific heuristics is provided by reporting on a use case where two hard industrial domains defined by Siemens, the Partner Units Problem (PUP) [26] and Combined Configuration Problem (CCP) [20], are solved efficiently.", "startOffset": 217, "endOffset": 221}, {"referenceID": 19, "context": "Pragmatic evidence of the benefits of our framework in devising problem-specific heuristics is provided by reporting on a use case where two hard industrial domains defined by Siemens, the Partner Units Problem (PUP) [26] and Combined Configuration Problem (CCP) [20], are solved efficiently.", "startOffset": 263, "endOffset": 267}, {"referenceID": 0, "context": "In our use case, the framework has been implemented by extending the ASP solver WASP [1].", "startOffset": 85, "endOffset": 88}, {"referenceID": 24, "context": "In this section we provide some basic knowledge about the Conflict-Driven Clause Learning (CDCL) algorithm [25] for solving the satisfiability problem (SAT) [6].", "startOffset": 107, "endOffset": 111}, {"referenceID": 5, "context": "In this section we provide some basic knowledge about the Conflict-Driven Clause Learning (CDCL) algorithm [25] for solving the satisfiability problem (SAT) [6].", "startOffset": 157, "endOffset": 160}, {"referenceID": 24, "context": "The Conflict-Driven Clause Learning (CDCL) [25] backtracking search algorithm is a de facto standard for the satisfiability problem (SAT) [4,6].", "startOffset": 43, "endOffset": 47}, {"referenceID": 3, "context": "The Conflict-Driven Clause Learning (CDCL) [25] backtracking search algorithm is a de facto standard for the satisfiability problem (SAT) [4,6].", "startOffset": 138, "endOffset": 143}, {"referenceID": 5, "context": "The Conflict-Driven Clause Learning (CDCL) [25] backtracking search algorithm is a de facto standard for the satisfiability problem (SAT) [4,6].", "startOffset": 138, "endOffset": 143}, {"referenceID": 10, "context": "Polynomial algorithms for clause rewriting and variable elimination are applied on \u0393 , which strengthen and/or remove redundant clauses [11].", "startOffset": 136, "endOffset": 140}, {"referenceID": 26, "context": "by applying the first Unique Implication Point (UIP) technique [28].", "startOffset": 63, "endOffset": 67}, {"referenceID": 5, "context": "Nowadays, state-of-the-art solvers, such as LINGELING [6] and GLUCOSE [4], implement branching criteria belonging to the VSIDS [22] family that are a variant of the MINISAT [12] heuristic.", "startOffset": 54, "endOffset": 57}, {"referenceID": 3, "context": "Nowadays, state-of-the-art solvers, such as LINGELING [6] and GLUCOSE [4], implement branching criteria belonging to the VSIDS [22] family that are a variant of the MINISAT [12] heuristic.", "startOffset": 70, "endOffset": 73}, {"referenceID": 21, "context": "Nowadays, state-of-the-art solvers, such as LINGELING [6] and GLUCOSE [4], implement branching criteria belonging to the VSIDS [22] family that are a variant of the MINISAT [12] heuristic.", "startOffset": 127, "endOffset": 131}, {"referenceID": 11, "context": "Nowadays, state-of-the-art solvers, such as LINGELING [6] and GLUCOSE [4], implement branching criteria belonging to the VSIDS [22] family that are a variant of the MINISAT [12] heuristic.", "startOffset": 173, "endOffset": 177}, {"referenceID": 11, "context": "Thus, in the following, the MINISAT [12] heuristic is referred to as the default branching heuristic of a CDCL solver.", "startOffset": 36, "endOffset": 40}, {"referenceID": 6, "context": "For the sake of completeness, we mention that the CDCL is usually complemented with heuristics that control the number of learned clauses, and restart the computation to explore different branches of the search tree [7].", "startOffset": 216, "endOffset": 219}, {"referenceID": 11, "context": "We first consider the MINISAT heuristic as described in [12].", "startOffset": 56, "endOffset": 60}, {"referenceID": 23, "context": "In [24], a heuristic for solving the planning problem modeled as SAT problem is proposed that intuitively forces the solver to prefer short and simple plans.", "startOffset": 3, "endOffset": 7}, {"referenceID": 23, "context": ") is computed by running the algorithm in Figure 3 of [24].", "startOffset": 54, "endOffset": 58}, {"referenceID": 5, "context": "We mention that, one can easily obtain all the VSIDS-like heuristics described in [6] by applying small modifications to the solution presented in Example 3.", "startOffset": 82, "endOffset": 85}, {"referenceID": 8, "context": "The case study is developed in the context of Answer Set Programming (ASP) [9].", "startOffset": 75, "endOffset": 78}, {"referenceID": 16, "context": "These appeared to be among the hardest industrial benchmarks from the ASP Competition 2015 [17,18]; indeed, on hard problem instances state-of-the-art ASP solvers were not effective.", "startOffset": 91, "endOffset": 98}, {"referenceID": 17, "context": "These appeared to be among the hardest industrial benchmarks from the ASP Competition 2015 [17,18]; indeed, on hard problem instances state-of-the-art ASP solvers were not effective.", "startOffset": 91, "endOffset": 98}, {"referenceID": 12, "context": "Given the practical importance of these two problems, many researchers studied them in detail [13,2,3,26,10,20].", "startOffset": 94, "endOffset": 111}, {"referenceID": 1, "context": "Given the practical importance of these two problems, many researchers studied them in detail [13,2,3,26,10,20].", "startOffset": 94, "endOffset": 111}, {"referenceID": 2, "context": "Given the practical importance of these two problems, many researchers studied them in detail [13,2,3,26,10,20].", "startOffset": 94, "endOffset": 111}, {"referenceID": 25, "context": "Given the practical importance of these two problems, many researchers studied them in detail [13,2,3,26,10,20].", "startOffset": 94, "endOffset": 111}, {"referenceID": 9, "context": "Given the practical importance of these two problems, many researchers studied them in detail [13,2,3,26,10,20].", "startOffset": 94, "endOffset": 111}, {"referenceID": 19, "context": "Given the practical importance of these two problems, many researchers studied them in detail [13,2,3,26,10,20].", "startOffset": 94, "endOffset": 111}, {"referenceID": 15, "context": "WASP implements a variant of CDCL devised for evaluating ASP programs, thus featuring additional inference rules required for the evaluation of ASP programs, such as unfoundedbased and aggregate-based inferences [16].", "startOffset": 212, "endOffset": 216}, {"referenceID": 14, "context": "In case the user would like to use a declarative language to implement a heuristic, our implementation provides a predicates-based interface extending the one proposed in [15].", "startOffset": 171, "endOffset": 175}, {"referenceID": 14, "context": "We next sketch the idea by assuming that (on the lines of in [15]) one encodes the heuristic strategy in ASP by providing a logic program \u03a0 .", "startOffset": 61, "endOffset": 65}, {"referenceID": 7, "context": ", with preferences [8], CASP [19], etc.", "startOffset": 19, "endOffset": 22}, {"referenceID": 18, "context": ", with preferences [8], CASP [19], etc.", "startOffset": 29, "endOffset": 33}, {"referenceID": 12, "context": "The PUP comes from the railway safety domain [13], but has a variety of other applications including security monitoring systems, peer-to-peer networks, etc.", "startOffset": 45, "endOffset": 49}, {"referenceID": 25, "context": "[26].", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "\u2013 QUICKPUP [26] generates an order of zones and sensors in the first step by selecting some zone as a root and traversing the input zone-sensor relations breadth-first.", "startOffset": 11, "endOffset": 15}, {"referenceID": 9, "context": "\u2013 PRED [10] tries first to connect an unassigned zone or sensor to one of the units that already have connections to neighbour zones or sensors, i.", "startOffset": 7, "endOffset": 11}, {"referenceID": 1, "context": "The first three types are instances representing topologies occurring frequently in practice, whereas grids are parts of real railway systems (see [2] for details).", "startOffset": 147, "endOffset": 150}, {"referenceID": 1, "context": "The instances were tested with two encodings: PUP-E1 \u2013 the original straightforward encoding published in [2] (Section 3.", "startOffset": 106, "endOffset": 109}, {"referenceID": 14, "context": "The results of CLASP [15], which was used as a reference system, show that it was able to solve at most 23 instances using the tested encodings.", "startOffset": 21, "endOffset": 25}, {"referenceID": 25, "context": "The main reason for this discrepancy between our results and the ones obtained by [26] is due to inability of the underlying ASP solver to generate new units on-the-fly.", "startOffset": 82, "endOffset": 86}, {"referenceID": 25, "context": "[26], instead, try to quickly build a solution by using new units whenever possible.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "The CCP is an abstract problem that demonstrates an important case occurring in practice of Siemens when a complex problem can be represented as a set of subproblems [20].", "startOffset": 166, "endOffset": 170}, {"referenceID": 19, "context": "The CCP has a number of heuristics suggested in [20] which can be used to obtain a partial solution of a problem instance.", "startOffset": 48, "endOffset": 52}, {"referenceID": 19, "context": "The heuristics suggested in [20] were designed to be used with the heuristic interface of CLASP.", "startOffset": 28, "endOffset": 32}, {"referenceID": 19, "context": "[20] use three heuristics:", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "5: Evaluation results for 36 CCP instances with [20] encoding", "startOffset": 48, "endOffset": 52}, {"referenceID": 19, "context": "The package contains a set of realworld instances used in the evaluation of [20] as well as a number of new instances.", "startOffset": 76, "endOffset": 80}, {"referenceID": 19, "context": "The evaluation was done in the same settings as the PUP and similar to [20].", "startOffset": 71, "endOffset": 75}, {"referenceID": 19, "context": "Our approach shows also better results in comparison with [20], which solved 6 out of 16 real-world instances.", "startOffset": 58, "endOffset": 62}], "year": 2016, "abstractText": "The CDCL algorithm is the leading solution adopted by state-of-theart solvers for SAT, SMT, ASP, and others. Experiments show that the performance of CDCL solvers can be significantly boosted by embedding domainspecific heuristics, especially on large real-world problems. However, a proper integration of such criteria in off-the-shelf CDCL implementations is not obvious. In this paper, we distill the key ingredients that drive the search of CDCL solvers, and propose a general framework for designing and implementing new heuristics. We implemented our strategy in an ASP solver, and we experimented on two industrial domains. On hard problem instances, state-of-the-art implementations fail to find any solution in acceptable time, whereas our implementation is very successful and finds all solutions.", "creator": "LaTeX with hyperref package"}}}