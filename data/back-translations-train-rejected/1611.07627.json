{"id": "1611.07627", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Nov-2016", "title": "SyGuS-Comp 2016: Results and Analysis", "abstract": "Syntax-Guided Synthesis (SyGuS) is the computational problem of finding an implementation f that meets both a semantic constraint given by a logical formula $\\varphi$ in a background theory T, and a syntactic constraint given by a grammar G, which specifies the allowed set of candidate implementations. Such a synthesis problem can be formally defined in SyGuS-IF, a language that is built on top of SMT-LIB.", "histories": [["v1", "Wed, 23 Nov 2016 03:17:40 GMT  (1336kb,D)", "http://arxiv.org/abs/1611.07627v1", "In Proceedings SYNT 2016,arXiv:1611.07178. arXiv admin note: text overlap witharXiv:1602.01170"]], "COMMENTS": "In Proceedings SYNT 2016,arXiv:1611.07178. arXiv admin note: text overlap witharXiv:1602.01170", "reviews": [], "SUBJECTS": "cs.SE cs.LG cs.LO", "authors": ["rajeev alur", "dana fisman", "rishabh singh", "armando solar-lezama"], "accepted": false, "id": "1611.07627"}, "pdf": {"name": "1611.07627.pdf", "metadata": {"source": "CRF", "title": "SyGuS-Comp 2016: Results and Analysis", "authors": ["Rajeev Alur", "Dana Fisman", "Rishabh Singh", "Armando Solar-Lezama"], "emails": [], "sections": [{"heading": null, "text": "Dimitrova, Piskac (ed.): Fifth Workshop on Synthesis (SYNT 2016) EPTCS 229, 2016, pp. 178-202, doi: 10.4204 / EPTCS.229.13c \u00a9 R. Alur, D. Fisman, R. Singh & A. Solar-Lezama This work is licensed under the Creative Commons Attribution License.SyGuS-Comp 2016: Results and AnalysisRajeev Alur University of PennsylvaniaDana Fisman Ben-Gurion UniversityRishabh Singh Microsoft Research, RedmondArmando Solar-Lezama Massachusetts Institute of TechnologySyntax-Guided Synthesis (SyGuS) is the arithmetic problem of finding an implementation that corresponds to both a semantic constraint given by a logical formula in a background theory T, and a syntactical constraint given by a grammar G that allows the specified candidates to implement it."}, {"heading": "1 Introduction", "text": "In fact, most of them will be able to feel as if they are able to move, as if they are able to move."}, {"heading": "1.1 The General Track", "text": "We illustrate the key ideas behind the main formalism and extensions that have been added over the past two years through a series of illustrative examples. < The example we illustrate the general SyGuS Comp formalism with this simple example from one of the competition benchmarks. This example comes from an implementation of a quantum control computer (QCC). (The QCC uses expressions from the following grammar: g: = c | g | g? gwhere c is an integer constant, + is addition, \u2212 is subtraction, and a? b stands for \"when \u2265 0 is then another b.\" This minimal set of statements is used to enable rapid implementation. High-level commands should be translated into this grammar with a minimum number of operations, as these operations participate in a pipeline, so any unnecessary delay is multiplied. The goal in the following benchmark is to find two functions qm-inner loop and qm-outer loop, and deform an inner loop."}, {"heading": "1.2 Conditional Linear Integer Arithmetic Track", "text": "For problems where grammar consists of the set of all possible integer linear arithmetic, it is sometimes possible to apply specialized solving techniques that use the information that decision-making procedures for integer linear arithmetic can produce. SyGuS 2015 included a separate track in which grammar for all unknown functions was adopted as the whole theory of integer linear arithmetic with ITE conditions. Let's take as a simple example the problem of synthesizing a function abs that generates the absolute value of an integer. The problem can be specified with the following limitation: (Quantity logic LIA) (synthetic fun abs ((((x Int))) Int) (declare-var x Int) (constraint (> = (abs x) 0))))) (constraint (or (= x (abs x (mmers x) (abs x)))))))) (check synthesis) Note that the definition of the unknown function does not include linear grammatics (the grammar is only given in the theory)."}, {"heading": "1.3 Invariant Synthesis Track", "text": "In fact, most of them are able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are able to save themselves. (...) Most of them are able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves. (...) Most of them are not able to save themselves."}, {"heading": "1.4 Programming By Example Track", "text": "Example programming (PBE) systems have been developed for many domains, including string transformations [13, 14, 28], data structure manipulation [29, 30], interactive parser synthesis [17], higher order functional programs using recursive data types (21, 10], and program refactorings [23]. The 2016 competition included a new separate path for example programming. The grammar for benchmarks in this track is specified using a context-free grammar (NTT) similar to the general SyGuS track, but the specification constraints can only be specified using input-output examples."}, {"heading": "1.5 SyGuS-Comp\u201914 summary", "text": "The first SyGuS competition, SyGuS-Comp '14, consisted of a single track - the general track - in which the benchmark provided the grammar describing the desired syntactical restrictions for this benchmark. Background theory could be either linear interger arithmetic or bit vectors. In SyGuS-Comp' 14, five solvers competed against each other. First place went to the ENUMERATIVE solver, which solved 126 out of 241 benchmarks."}, {"heading": "1.6 SyGuS-Comp\u201915 summary", "text": "The SyGuS Comp instance of 2015 was the second iteration of the competition and the first iteration to include the separate conditional linear integer arithmetic and invariant synthesis tracks. A total of eight solvers were submitted, representing a series of solution strategies: the CVC4-1.5 solver won the general track and conditional linear integer arithmetic tracks, while the ICE-DT solver won the invariant synthesis track."}, {"heading": "1.7 SyGuS-Comp\u201916 summary", "text": "The instance of SyGuS-Comp in 2016 was the third iteration of the competition and included an additional track on Programming By Examples (PBE). In addition to the previous solvers, two new solvers were submitted this year: CVC4-1.5.1 and EUSolver. In the rest of the work we describe the details of the benchmarks, new solver strategies and the results of the competition in various benchmark categories."}, {"heading": "2 Competition Settings", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Participating Benchmarks", "text": "In the eeisrrcehncS nvo edn nlrrcehncS rf\u00fc ide eeirlrcehncnlhsrc\u00fc\u00fc\u00fceSrteh ni rde eeirsrteeBnlhsrcehncehncS ni nde nlrgne\u00fceeBnln ni nde nlrf\u00fc-eaeaeJnlrgneaeaeBnlrrrrrrrnlllrllrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrf\u00fc ide ide nlrlrlrlrlrlrlrlrlrlrf\u00fc ide-eaeaeaeaeaeaeaeaeJnlrlrlrlrlrlrlrlrlrlrlrlrlrgneaeaeaeaeaeaeaeaeBnlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrlrrlrlrlrrlrlrlrrlrlrrlrlrlrlrrlrlrr"}, {"heading": "2.2 Participating Solvers", "text": "In addition to 7 solvers from last year's competition, we had two new approaches for the 2016 competition: i) CVC4 1.5.1 and ii) EUSolver. Table 2 summarizes which solver participated in which track. Figure 2 lists the submitted solutions together with their authorities. A total of 6 solvers participated in the general track (64 in the invariant synthesis track), and 5 in the conditional linear arithmetic track. Figure 2 lists the submitted solutions together with their authorities. The CVC4-1.5.1 solver employs a refutation-based synthesis approach (64 in the invariant synthesis approach [24]. Instead of solving an existing synthesis formula, it first negates the formula to obtain a persistent problem and tries to show that it is unsatisfactory. It eliminates the continuous quantification via unknown function in two ways: the formula is invoked always with the parameters i)."}, {"heading": "2.3 Experimental Setup", "text": "The solvers were running on the StarExec platform [34] with a dedicated cluster of 12 nodes, each node consisting of two 4-core 2.4 GHz Intel processors with 256 GB of RAM and a 1 TB hard disk drive, and the memory usage of each solver was set to 128 GB. The wall clock time was set to 3600 seconds (a solver using all cores could consume a maximum of 14400 seconds of CPU time), and the solution the solvers produce is checked for both syntactical and semantic correctness, that is, a first post-processor checks that the generated expression matches the grammar specified in the given benchmark, and if this check passes, a second post-processor checks that the solution complies with the semantic constraints specified in the benchmark (by calling an SMT solver)."}, {"heading": "3 Competition Results and Analysis", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "3.1 Results Overview", "text": "In this context, it should be noted that this is a very complex matter."}, {"heading": "3.2 Detailed Results", "text": "In the following section, we show the results of the competition from the benchmark perspective to the next second. For a given benchmark, we would like to know how many solvers solve it, what is the minimum and highest time to solve what produced the fastest and fastest number of expressions that solve the benchmark, and which solvers produced the smallest expression. We present the results per benchmark in the categories in which they seem to resolve fastest and fastest. Black bars show the range of time to solve the various solvers in the pseudo-logarithmic scale (as indicated on the upper part of the y axis). Inspect, for example, shows benchmark qm _ select _ 01.sl. The black bar indicates that the fastest solution is used to solve it, and the slowest number between 100 and 300 seconds. The black number above the black bar indicates the exact number of seconds."}, {"heading": "3.3 Observations", "text": "Analyzing the results of the general track per category (see Figure 13), along the number of benchmarks solved, the number of benchmarks clearly solved and the number of benchmarks among the fastest, we can see that each category of the general track has a clear winner: \u2022 CVC4-1.5.1 won 4 categories: Arrays, Let & Motion Planning, Hackers' Delight and Integers. \u2022 ENUMERATIVE won 3 categories: Compiler Optimizations, Invariant Generation and Invariant Integers. \u2022 EUSOLVER won 3 categories: Multiple Functions and ICFP."}, {"heading": "4 Discussion", "text": "We present some interesting dimensions in which the SyGuS competition has evolved over the last three years. The timeline for the tracks and solvers submitted for each competition is shown in Figure 14. The first competition in 2014 had a single general track, and 5 solvers entered the competition, which included numerical, stochastic, symbolic and machine learning synthesis algorithms. In the second competition, two new tracks were introduced: conditional linear integer arithmetic and invariant synthesis track. In the 2016 competition, we introduced another new track, the SMT-based instantiation of quantifiers, adaptive concretization of unknowns, BDD-based symbolic algorithms and geometric optimization algorithms. In the 2016 competition, we introduced another new track, the PBE track, and two new solvers EUSOLVER and C4-1.5.1, which are successful in the competition as solvers."}, {"heading": "Acknowledgments", "text": "We would like to thank the following people for various interesting discussions related to the competition, its tracks, the SyGuS format, and various other topics related to syntax-driven synthesis: Viktor Kuncak, Arjun Radhakrishna, and Andrew Reynolds. We would like to thank the StarExec [34] team, and in particular Aaron Stump, for allowing us to use their platform and for their remarkable support for the special needs of SyGuS-Comp. This research was supported by the US NSF grant CCF-1138996 (ExCAPE)."}], "references": [{"title": "Calibrating Research in Program Synthesis Using 72,000 Hours of Programmer Time", "author": ["Takuya Akiba", "Kentaro Imajo", "Hiroaki Iwami", "Yoichi Iwata", "Toshiki Kataoka", "Naohiro Takahashi", "Micha Moskal", "Nikhil Swamy"], "venue": "SyGuS-Comp", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "Syntax-guided synthesis. In: Formal Methods in Computer-Aided Design, FMCAD", "author": ["Rajeev Alur", "Rastislav Bod\u0131\u0301k", "Garvit Juniwal", "Milo M.K. Martin", "Mukund Raghothaman", "Sanjit A. Seshia", "Rishabh Singh", "Armando Solar-Lezama", "Emina Torlak", "Abhishek Udupa"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "Synthesis Through Unification", "author": ["Rajeev Alur", "Pavol Cern\u00fd", "Arjun Radhakrishna"], "venue": "Computer Aided Verification - 27th International Conference,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Results and Analysis of SyGuS- Comp\u201915", "author": ["Rajeev Alur", "Dana Fisman", "Rishabh Singh", "Armando Solar-Lezama"], "venue": "SYNT, EPTCS,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "Using SyGuS to Synthesize Reactive Motion Plans", "author": ["Sarah Chasins", "Julie Newcomb"], "venue": "Workshop on Synthesis, SYNT 2016,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2016}, {"title": "Synthesis of Fault-Attack Countermeasures for Cryptographic Circuits", "author": ["Hassan Eldib", "Meng Wu", "Chao Wang"], "venue": "Computer Aided Verification - 28th International Conference,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2016}, {"title": "Synthesizing data structure transformations from input-output examples", "author": ["John K. Feser", "Swarat Chaudhuri", "Isil Dillig"], "venue": "In: PLDI,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "ICE: A Robust Framework for Learning Invariants", "author": ["Pranav Garg", "Christof L\u00f6ding", "P. Madhusudan", "Daniel Neider"], "venue": "Computer Aided Verification - 26th International Conference,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Learning invariants using decision trees and implication counterexamples", "author": ["Pranav Garg", "Daniel Neider", "P. Madhusudan", "Dan Roth"], "venue": "Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "Automating string processing in spreadsheets using input-output examples", "author": ["Sumit Gulwani"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "Spreadsheet data manipulation using examples", "author": ["Sumit Gulwani", "William R. Harris", "Rishabh Singh"], "venue": "Commun. ACM 55(8),", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "Oracle-guided Component-based Program Synthesis", "author": ["Susmit Jha", "Sumit Gulwani", "Sanjit A. Seshia", "Ashish Tiwari"], "venue": "Proceedings of the 32Nd ACM/IEEE International Conference on Software Engineering - Volume 1,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "Interactive parser synthesis by example", "author": ["Alan Leung", "John Sarracino", "Sorin Lerner"], "venue": "In: PLDI,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2015}, {"title": "Alloy*: A General-Purpose Higher-Order Relational Constraint Solver", "author": ["Aleksandar Milicevic", "Joseph P. Near", "Eunsuk Kang", "Daniel Jackson"], "venue": "IEEE/ACM International Conference on Software Engineering, ICSE 2015, Florence,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2015}, {"title": "ICE DT: Learning Invariants using Decision Trees and Implication Counterexamples", "author": ["Daniel Neider", "P. Madhusudan", "Pranav Garg"], "venue": "Private Communication", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "Alchemist CS: An SMT-based synthesizer for Functions in Linear Integer Arithmetic", "author": ["Daniel Neider", "Shambwaditya Saha", "P. Madhusudan"], "venue": "Private Communication", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2015}, {"title": "Type-and-example-directed program synthesis", "author": ["Peter-Michael Osera", "Steve Zdancewic"], "venue": "PLDI, pp. 619\u2013630,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}, {"title": "Language to Specify Syntax-Guided Synthesis Problems", "author": ["Mukund Raghothaman", "Abhishek Udupa"], "venue": "CoRR abs/1405.5590", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2014}, {"title": "Refactoring with synthesis", "author": ["Veselin Raychev", "Max Sch\u00e4fer", "Manu Sridharan", "Martin T. Vechev"], "venue": "In: OOPSLA,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2013}, {"title": "Counterexample-Guided Quantifier Instantiation for Synthesis in SMT", "author": ["Andrew Reynolds", "Morgan Deters", "Viktor Kuncak", "Cesare Tinelli", "Clark W. Barrett"], "venue": "Computer Aided Verification - 27th International Conference,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}, {"title": "absTract sOlution Analyzing Synthesis Tool (System Description)", "author": ["Heinz Riener", "Rudiger Ehlers"], "venue": "Private Communication", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2015}, {"title": "Alchemist: Learning Guarded Affine Functions", "author": ["Shambwaditya Saha", "Pranav Garg", "P. Madhusudan"], "venue": "Computer Aided Verification - 27th International Conference,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2015}, {"title": "Alchemist CS DT: Synthesizing Guarded Affine Functions using Constraint Solving and Decision-tree Learning", "author": ["Shambwaditya Saha", "Daniel Neider", "P. Madhusudan"], "venue": "Private Communication", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2015}, {"title": "BlinkFill: Semi-supervised Programming By Example for Syntactic String Transformations", "author": ["Rishabh Singh"], "venue": "PVLDB 9(10),", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2016}, {"title": "Synthesizing data structure manipulations from storyboards", "author": ["Rishabh Singh", "Armando Solar-Lezama"], "venue": "FSE, pp. 289\u2013299,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2011}, {"title": "SPT: Storyboard Programming Tool", "author": ["Rishabh Singh", "Armando Solar-Lezama"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2012}, {"title": "Programming by sketching for bit-streaming programs", "author": ["Armando Solar-Lezama", "Rodric M. Rabbah", "Rastislav Bod\u0131\u0301k", "Kemal Ebcioglu"], "venue": "Proceedings of the ACM SIGPLAN 2005 Conference on Programming Language Design and Implementation,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2005}, {"title": "Combinatorial sketching for finite programs", "author": ["Armando Solar-Lezama", "Liviu Tancau", "Rastislav Bod\u0131\u0301k", "Sanjit A. Seshia", "Vijay A. Saraswat"], "venue": "Proceedings of the 12th International Conference on Architectural Support for Programming Languages and Operating Systems,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2006}, {"title": "StarExec: A Cross-Community Infrastructure for Logic Solving", "author": ["Aaron Stump", "Geoff Sutcliffe", "Cesare Tinelli"], "venue": "Proceedings, pp. 367\u2013373,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2014}, {"title": "A lightweight symbolic virtual machine for solver-aided host", "author": ["Emina Torlak", "Rastislav"], "venue": "Bod\u0131\u0301k", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2014}], "referenceMentions": [{"referenceID": 3, "context": "The SyGuS format is detailed in other publications [7, 2],[22, 5, 6], but at a high-level, the SyGuS format is based on the popular SMT-LIB format for defining SMT problems and is extended to support the description of function grammars.", "startOffset": 51, "endOffset": 57}, {"referenceID": 17, "context": "The SyGuS format is detailed in other publications [7, 2],[22, 5, 6], but at a high-level, the SyGuS format is based on the popular SMT-LIB format for defining SMT problems and is extended to support the description of function grammars.", "startOffset": 58, "endOffset": 68}, {"referenceID": 1, "context": "For example, the competition has provided important insights into the relative merits of different algorithms [3, 2, 7] which have been exploited to help develop and evaluate new algorithms [11, 15, 24, 26, 18, 4, 12].", "startOffset": 110, "endOffset": 119}, {"referenceID": 3, "context": "For example, the competition has provided important insights into the relative merits of different algorithms [3, 2, 7] which have been exploited to help develop and evaluate new algorithms [11, 15, 24, 26, 18, 4, 12].", "startOffset": 110, "endOffset": 119}, {"referenceID": 7, "context": "For example, the competition has provided important insights into the relative merits of different algorithms [3, 2, 7] which have been exploited to help develop and evaluate new algorithms [11, 15, 24, 26, 18, 4, 12].", "startOffset": 190, "endOffset": 217}, {"referenceID": 19, "context": "For example, the competition has provided important insights into the relative merits of different algorithms [3, 2, 7] which have been exploited to help develop and evaluate new algorithms [11, 15, 24, 26, 18, 4, 12].", "startOffset": 190, "endOffset": 217}, {"referenceID": 21, "context": "For example, the competition has provided important insights into the relative merits of different algorithms [3, 2, 7] which have been exploited to help develop and evaluate new algorithms [11, 15, 24, 26, 18, 4, 12].", "startOffset": 190, "endOffset": 217}, {"referenceID": 13, "context": "For example, the competition has provided important insights into the relative merits of different algorithms [3, 2, 7] which have been exploited to help develop and evaluate new algorithms [11, 15, 24, 26, 18, 4, 12].", "startOffset": 190, "endOffset": 217}, {"referenceID": 2, "context": "For example, the competition has provided important insights into the relative merits of different algorithms [3, 2, 7] which have been exploited to help develop and evaluate new algorithms [11, 15, 24, 26, 18, 4, 12].", "startOffset": 190, "endOffset": 217}, {"referenceID": 8, "context": "For example, the competition has provided important insights into the relative merits of different algorithms [3, 2, 7] which have been exploited to help develop and evaluate new algorithms [11, 15, 24, 26, 18, 4, 12].", "startOffset": 190, "endOffset": 217}, {"referenceID": 4, "context": "SyGuS has found various interesting applications among which are motion planning [8], compiler optimizations, and cybersecurity [9].", "startOffset": 81, "endOffset": 84}, {"referenceID": 5, "context": "SyGuS has found various interesting applications among which are motion planning [8], compiler optimizations, and cybersecurity [9].", "startOffset": 128, "endOffset": 131}, {"referenceID": 3, "context": "We illustrate this format with an example from last year\u2019s report [7].", "startOffset": 66, "endOffset": 69}, {"referenceID": 9, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 108, "endOffset": 120}, {"referenceID": 10, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 108, "endOffset": 120}, {"referenceID": 23, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 108, "endOffset": 120}, {"referenceID": 24, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 151, "endOffset": 159}, {"referenceID": 25, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 151, "endOffset": 159}, {"referenceID": 12, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 190, "endOffset": 194}, {"referenceID": 16, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 255, "endOffset": 263}, {"referenceID": 6, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 255, "endOffset": 263}, {"referenceID": 18, "context": "Programming By Examples (PBE) systems have been developed for many domains including string transformations [13, 14, 28], data structure manipulations [29, 30], interactive parser synthesis [17], higher-order functional programs over recursive data types [21, 10], and program refactorings [23].", "startOffset": 290, "endOffset": 294}, {"referenceID": 9, "context": "Example Consider the following task taken from FlashFill [13, 14] that requires learning a string transformation program that constructs the initials of the first and last names.", "startOffset": 57, "endOffset": 65}, {"referenceID": 10, "context": "Example Consider the following task taken from FlashFill [13, 14] that requires learning a string transformation program that constructs the initials of the first and last names.", "startOffset": 57, "endOffset": 65}, {"referenceID": 9, "context": "The benchmarks in the PBE track can be classified into two categories: \u2022 String Transformations: The 108 string transformation tasks are taken from public benchmarks of FlashFill [13, 14] and BlinkFill [28].", "startOffset": 179, "endOffset": 187}, {"referenceID": 10, "context": "The benchmarks in the PBE track can be classified into two categories: \u2022 String Transformations: The 108 string transformation tasks are taken from public benchmarks of FlashFill [13, 14] and BlinkFill [28].", "startOffset": 179, "endOffset": 187}, {"referenceID": 23, "context": "The benchmarks in the PBE track can be classified into two categories: \u2022 String Transformations: The 108 string transformation tasks are taken from public benchmarks of FlashFill [13, 14] and BlinkFill [28].", "startOffset": 202, "endOffset": 206}, {"referenceID": 0, "context": "\u2022 Bitvector Transformations: The 450 bitvector transformation benchmarks were obtained from the 2013 ICFP Programming Competition2 [1].", "startOffset": 131, "endOffset": 134}, {"referenceID": 19, "context": "1 solver employs a refutation-based synthesis approach [24].", "startOffset": 55, "endOffset": 59}, {"referenceID": 28, "context": "3 Experimental Setup The solvers were run on the StarExec platform [34] with a dedicated cluster of 12 nodes, where each node consisted of two 4-core 2.", "startOffset": 67, "endOffset": 71}], "year": 2016, "abstractText": "Syntax-Guided Synthesis (SyGuS) is the computational problem of finding an implementation f that meets both a semantic constraint given by a logical formula \u03c6 in a background theory T , and a syntactic constraint given by a grammar G, which specifies the allowed set of candidate implementations. Such a synthesis problem can be formally defined in SyGuS-IF, a language that is built on top of SMT-LIB. The Syntax-Guided Synthesis Competition (SyGuS-Comp) is an effort to facilitate, bring together and accelerate research and development of efficient solvers for SyGuS by providing a platform for evaluating different synthesis techniques on a comprehensive set of benchmarks. In this year\u2019s competition we added a new track devoted to programming by examples. This track consisted of two categories, one using the theory of bit-vectors and one using the theory of strings. This paper presents and analyses the results of SyGuS-Comp\u201916.", "creator": "LaTeX with hyperref package"}}}