{"id": "1612.01078", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Dec-2016", "title": "Enhancing Use Case Points Estimation Method Using Soft Computing Techniques", "abstract": "Software estimation is a crucial task in software engineering. Software estimation encompasses cost, effort, schedule, and size. The importance of software estimation becomes critical in the early stages of the software life cycle when the details of software have not been revealed yet. Several commercial and non-commercial tools exist to estimate software in the early stages. Most software effort estimation methods require software size as one of the important metric inputs and consequently, software size estimation in the early stages becomes essential. One of the approaches that has been used for about two decades in the early size and effort estimation is called use case points. Use case points method relies on the use case diagram to estimate the size and effort of software projects. Although the use case points method has been widely used, it has some limitations that might adversely affect the accuracy of estimation. This paper presents some techniques using fuzzy logic and neural networks to improve the accuracy of the use case points method. Results showed that an improvement up to 22% can be obtained using the proposed approach.", "histories": [["v1", "Sun, 4 Dec 2016 06:59:14 GMT  (799kb)", "http://arxiv.org/abs/1612.01078v1", null]], "reviews": [], "SUBJECTS": "cs.SE cs.AI cs.LG", "authors": ["ali bou nassif", "luiz fernando capretz", "danny ho"], "accepted": false, "id": "1612.01078"}, "pdf": {"name": "1612.01078.pdf", "metadata": {"source": "CRF", "title": "Enhancing Use Case Points Estimation Method Using Soft Computing Techniques", "authors": ["Ali Bou Nassif", "Luiz Fernando Capretz", "Danny Ho"], "emails": ["abounass@uwo.ca", "lcapretz@uwo.ca", "danny@nfa-estimation.com"], "sections": [{"heading": null, "text": "Most methods of estimating software effort require software size as one of the most important parameters, and therefore estimating software size in the early stages is critical. One of the approaches that has been used for about two decades in early size and effort estimation is called use case points. Application case point method relies on the use case diagram to estimate the size and effort of software projects. Although the use case point method is widely used, it has some limitations that could negatively affect the accuracy of the estimate. In this paper, some techniques that use blurred logic and neural networks to improve the accuracy of the application case point method are presented. Results showed that the proposed approach can achieve an improvement of up to 22%. Keywords: use case points, early software size estimation, early software effectiveness assessment, applied software calculation"}, {"heading": "INTRODUCTION AND PROBLEM DEFINITION", "text": "That is why it has come to this point, that it has come to this point, that it has never come to this point before."}, {"heading": "Use Case Points", "text": "The application model was first developed by Jacobson et al. [8] An application case diagram shows how users interact with the system. An application diagram consists of use cases and actors. Use cases represent the functional requirements for which an actor plays a role. In the application diagram, a use diagram may extend or cover another use case. Figure 1 is an example of a use case diagram [9]. The application case point method mainly depends on four factors. These include the number and complexity of application points, the number and complexity of actors, some non-functional requirements such as ease of use and portability, and some environmental factors for which the software is being developed. The complexity of an application case scenario is determined by the number of transactions of application points, the number and complexity of actors, and some non-functional requirements such as usability and portability, and some environmental factors for which the software is being developed. The complexity of an application case scenario is determined by the number of application points of the application arios, some of which are part of several application scenarios."}, {"heading": "Main Success Scenario:", "text": "1. Verify that the student has permission to enroll in a course 2. The student selects the course he wants to enrol for 3. System checks for the deadline for enrolment 4. System checks for the requirement of the course 5. System checks whether the student has enrolled for another course scheduled at the same time6. System checks for the maximum number of courses the student can enrol 7. System checks when the course is full"}, {"heading": "Extensions", "text": "This year, it is more than ever before in the history of the city."}, {"heading": "Fi Factors Contributing to Complexity Wi", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "Fi Factors contributing to efficiency Wi", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "F1 Familiar with Objectory 1.5", "text": "The Adjustment Use Case Points (UCP) can be expressed as follows: UCP = UUCP * TF * EF (2), where TF is the technical factor and EF is the environmental factor. TF is calculated as follows: 1 + 2 13 = 1 (3), where 1 = 0.6, 2 = 0.01 and is a factor that takes values 0 or 1 or 2 or 3 or 4 or 5. The value 0 means irrelevant, while the value 5 means important. 3 means that the factor is not very important or irrelevant. For example, if all factors have a value of 3, the environmental factor EF is calculated as 1 or 3 or 4 or 5. The value 0 means: 1 + 2 8 = 1 (4), where 1 = 1.4, 2 = \u2212 0.03 and a factor is equivalent to the environmental factor EF (i.e. between 0 and 2, the effort of 5 hours is calculated) until the effort of 1 (4) is calculated."}, {"heading": "Fuzzy Logic", "text": "In fact, most of them are able to go to another world, in which they are able to go to another world, in which they are able to go to another world, in which they are able to go to where they are."}, {"heading": "Evaluation Criteria", "text": "In fact, most of them are able to determine for themselves what they want to do and what they want to do."}, {"heading": "PROPOSED MODEL USING FUZZY LOGIC", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "APPROACH", "text": "As explained in section 1, the main problem of the application case model is that there is no graduation in classifying the complexity factors of use cases. In this section of the thesis, Fuzzy Logic Rules became: If Input = 2 Transactions then Output = 5 If Input = 6 Transactions then Output = 10 If Input = 10 Transactions then Output = 15 Instead of classifying the use cases into three classes (simple, average and complex) as in Karner's work, the use cases are divided into ten categories according to the number of transactions per use case. As the main objective of our approach is to improve the current model proposed by Karner and not to modify it completely, we assume that the largest application case contains ten transactions. We also assume that the complexity factor of the largest application case is fifteen. Table 3 represents a comparison between the original work (Karner's abrupt method) and the proposed fuzzy method, with the proposed increase in force of the proposed method."}, {"heading": "PROPOSED MODEL USING NEURAL NETWORK APPROACH", "text": "At this stage, a neural network approach is used to map the input vectors (use cases and actors) to an output vector (UUCP), as shown in Figure 4. Since the problem is not linear, a multi-layer perceptron with a hidden layer was used to simulate the problem. There are thirteen input vectors, including ten vectors representing the use cases, and three vectors representing the actors. The training algorithm used was Levenberg-Marquardt Backpropagation (Trainlm). Several experiments were conducted to determine the number of neurons in the hidden layer. As a rule of thumb, the number of neurons in the hidden layer must be greater than the number of neurons in the input layer. However, there are no standard rules to determine the number of neurons in the hidden layer, except trial and error [21]."}, {"heading": "EVALUATION", "text": "Since some information about the complexity of the projects and the team experience of each project is known, the Technical Factor (TF) and the Environmental Factor (EF) have been calculated. Karner suggested that the effort required to develop an UCP is twenty person hours, a method that has been criticized by many researchers. Schneider et al. [22] refined Karner's method for determining the effort from the UCP. Schneider suggested counting the number of factor classifications of F1-F6 in Table 2 (Technical Factors) that are less than three, and the number of factor classifications of F7-F8 that are more than three. If the sum is three or less, then twenty person hours should be used per UCP. If the total number is three or four, twenty-eight person hours per UCP should be used. If the total number of experiments carried out is five or more, then the project team should be constructed so that this risk per UCP is reduced to at least five significant approaches, so that the value of the UCP applied per project is estimated to two hours."}, {"heading": "Evaluation of the Fuzzy Logic Approach", "text": "In applying the UCP model, Karner ignored the use cases \"expand\" and \"include.\" However, we believe that the use cases of the use case model should be taken into account when estimating the software size. Assessment of the blurred logic approach was carried out in three different phases. Firstly, the evaluation was carried out in seven projects. Use case models of these projects contain no or very few \"extend\" and \"include\" use cases in each project. In the second phase, the evaluation was carried out in five projects. Use case models of these projects include an appropriate number of \"extend\" and \"include\" use cases in each project between 15% and 25% of the total number of use cases. Finally, in the third phase, eight projects were selected for evaluation. In these projects, the number of \"extend\" and \"include\" use cases in each project is more than 25% of the proposed use cases."}, {"heading": "Evaluation of the Neural Network Approach", "text": "Seven random projects were selected to train the neural network presented in Section 4. The neural model was tested and evaluated over thirteen projects. Good results were obtained in the training process: the mean error was 0.0215 and the standard deviation 0.0616. Table 5 presents the results of the neural network approach. Results show that a 20% improvement in MMER was achieved. Table 5 also shows that the neural network approach had negative results in MMR and in the mean error with standard deviation. Section 6 will discuss the results of the neural network approach."}, {"heading": "Effect of the Extension Part in the Use Case Scenario on Size Estimation", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "According to Karner\u2019s model, the transactions in the", "text": "Two experiments were conducted on two projects (Project 3 and Project 4) to learn the effects of the extension part on the size estimation. There were two reasons for selecting these projects. First, the number of \"extended\" and \"include\" use cases in these two projects is about 5% of the number of total use cases in the use case diagram. This is important to set aside the problem of counting the \"extended\" and \"include\" use cases while we are working with extensions. Second, we are very familiar with these projects. Surprisingly, both the MMRE and the MMER had improved in Karner and the blurred logic approach when the extension part of the scenario was ignored. It was concluded that in the first phase of projects (Project 1 to Project 7) where the number of \"extended\" and \"include\" use cases was very low, one of the reasons for overestimating both the cardboard and the blurred approach."}, {"heading": "DISCUSSION", "text": "This year, it has come to the point where we have been able to integrate in a country where most people have been able to integrate, \"he said.\" We have been able to, \"he said.\" We have been able to, \"he said.\" We have been able to, we have been able to, we have been able to, we have been able to go to another world, \"he said.\" We have been able to, we have been able to go to another world, we have been able to go to another world, we have been able to go to another world. \""}, {"heading": "CONCLUSION AND FUTURE WORK", "text": "The Application Case Model is one of the most widely used cost estimation models because it is simple, fast, accurate and automatable to a certain degree. The Application Case Model is based on the number and complexity of use cases and actors. The original model suggested three degrees of complexity of use cases and there is no graduation between the complexity weights of use cases. This approach presents the disadvantages of the current model and proposed an extension of this model using fuzzy logic and neural network. The Fuzzy Logic approach presents ten degrees of complexity of use cases. In addition, this approach provides a graduation between complexity weights. The neural network approach was used as a black box to map the input vectors of the application model to software size. Results showed that in some projects the UCP software estimation can be improved by up to 22%."}], "references": [{"title": "Parametric estimating handbook", "author": ["D. Eck", "B. Brundick", "T. Fettig", "J. Dechoretz", "J. Ugljesa"], "venue": "The International Society of Parametric Analysis (ISPA), Fourth Edition. 2009.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "Oct.). Chaos manifesto", "author": ["J. Lynch"], "venue": "The Standish Group. Boston. [Online]. Available: http://www.standishgroup.com/newsroom/chaos_manifesto. php", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Measuring application development productivity", "author": ["A. Albrecht"], "venue": "IBM Application Development Symp. 1979, pp. 83-92.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1979}, {"title": "Function Point Analysis: Difficulties and Improvements", "author": ["C.R. Symons"], "venue": "IEEE Trans. Software Eng., vol. 14, pp. 2- 11, 1988.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1988}, {"title": "UML specification version 1.1", "author": ["G. Booch"], "venue": "OMG, Aug. 1997.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1997}, {"title": "UML version 2.0", "author": ["G. Booch", "I. Jacobson", "J. Rumbaugh"], "venue": "Jul. 2005.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2005}, {"title": "Resource Estimation for Objectory Projects", "author": ["G. Karner"], "venue": "Objective Systems, 1993.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1993}, {"title": "Object-Oriented Software Engineering: A use Case Driven Approach", "author": ["I. Jacobson", "M. Christerson", "P. Jonsson", "G. Overgaard"], "venue": "Addison Wesley,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1992}, {"title": "Use cases", "author": ["J. Rumbaugh", "I. Jacobson", "G. Booch"], "venue": "UML Distilled, 3rd ed., M. Fowler, Ed. Pearson Higher Education, 2004, pp. 103.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2004}, {"title": "Fuzzy sets", "author": ["L.A. Zadeh"], "venue": "Information and Control, vol. 8, pp. 338-353, 6, 1965.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1965}, {"title": "An Introduction to Computing with Neural Nets", "author": ["R.P. Lippman"], "venue": "IEEE ASSP Magasine, vol. 3, pp. 4-22, 1987.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1987}, {"title": "An assessment and comparison of common software cost estimation modeling techniques", "author": ["L.C. Briand", "K.E. Emam", "D. Surmann", "I. Wieczorek", "K.D. Maxwell"], "venue": "ICSE'99, vol. 0, pp. 313-322, 1999.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1999}, {"title": "What Accuracy Statistics Really Measure", "author": ["B.A. Kitchenham", "L.M. Pickard", "S.G. MacDonell", "M.J. Shepperd"], "venue": "IEE Proc. -Softw, vol. 148, pp. 81-85, 2001.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2001}, {"title": "A Simulation Study of the Model Evaluation Criterion MMRE", "author": ["T. Foss", "E. Stensrud", "B. Kitchenham", "I. Myrtveit"], "venue": "IEEE Transactions on Software Engineering, vol. 29, pp. 985-995, 2003.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2003}, {"title": "On the dissection of asymmetrical frequency curves", "author": ["P. Karl"], "venue": "Philosophical Transaction of Royal Society, vol. 185, pp. 71, 1894.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1894}, {"title": "Mapping the OO-jacobson approach into function point analysis", "author": ["T. Fetcke", "A. Abran", "N. Tho-Hau"], "venue": "Technology of Object-Oriented Languages and Systems, 1997. TOOLS 23. Proceedings, 1997, pp. 192-202.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1997}, {"title": "Software cost estimation using use-case models: A critical evaluation", "author": ["A. Issa", "M. Odeh", "D. Coward"], "venue": "Information and Communication Technologies, 2006. 2006, pp. 2766-2771.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2006}, {"title": "Software cost estimation using fuzzy logic", "author": ["A. Mittal", "K. Parkash", "H. Mittal"], "venue": "SIGSOFT Softw. Eng. Notes, vol. 35, pp. 1-7, 2010.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2010}, {"title": "Improving the COCOMO model using a neuro-fuzzy approach", "author": ["X. Huang", "D. Ho", "J. Ren", "L.F. Capretz"], "venue": "Appl. Soft Comput., vol. 7, pp. 29-40, 2007.  Ali Bou Nassif et al, Journal of Global Research in Computer Science, 1 (4), November 2010, 12-21", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2007}, {"title": "Neural network studies. 1. Comparison of overfitting and overtraining", "author": ["I.V. Tetko", "D.J. Livingstone", "A.I. Luik"], "venue": "J. Chem. Inf. Comput. Sci., vol. 35, pp. 826- 833, 09/01, 1995.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1995}], "referenceMentions": [{"referenceID": 0, "context": "The International Society of Parametric Analysis (ISPA) [1] and the Standish Group International [2] identified poor estimation as one of the main culprits behind software failure.", "startOffset": 56, "endOffset": 59}, {"referenceID": 1, "context": "The International Society of Parametric Analysis (ISPA) [1] and the Standish Group International [2] identified poor estimation as one of the main culprits behind software failure.", "startOffset": 97, "endOffset": 100}, {"referenceID": 2, "context": "The FPA model was proposed by Albrecht in 1979 [3] and it measures the size of software based on its functionalities.", "startOffset": 47, "endOffset": 50}, {"referenceID": 3, "context": "cannot be computed automatically and the decisions made in counting function points are subjective [4].", "startOffset": 99, "endOffset": 102}, {"referenceID": 4, "context": "1 in 1997 [5], but OOM has become more popular since the release of UML 2.", "startOffset": 10, "endOffset": 13}, {"referenceID": 5, "context": "0 in 2005 [6].", "startOffset": 10, "endOffset": 13}, {"referenceID": 6, "context": "The UCP model was proposed by Gustav Karner in 1993 [7].", "startOffset": 52, "endOffset": 55}, {"referenceID": 0, "context": "First, rather than classifying a use case as simple, average, or complex, the use case will be classified as ux, such as x \u2208 [1,10] where x represents the number of transactions.", "startOffset": 125, "endOffset": 131}, {"referenceID": 9, "context": "First, rather than classifying a use case as simple, average, or complex, the use case will be classified as ux, such as x \u2208 [1,10] where x represents the number of transactions.", "startOffset": 125, "endOffset": 131}, {"referenceID": 7, "context": "[8] A use case diagram shows how users interact with the system.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "Figure 1 is an example of a use case diagram [9].", "startOffset": 45, "endOffset": 48}, {"referenceID": 8, "context": "Figure 1: Use Case Diagram [9]", "startOffset": 27, "endOffset": 30}, {"referenceID": 6, "context": "These rules include [7]", "startOffset": 20, "endOffset": 23}, {"referenceID": 6, "context": "Karner [7] proposed an effort estimation method based on the Adjusted Use Case Points (UCP).", "startOffset": 7, "endOffset": 10}, {"referenceID": 6, "context": "Table 1: Technical Factors [7]", "startOffset": 27, "endOffset": 30}, {"referenceID": 6, "context": "F12 Provide direct access for third parties 1 F13 Special user training facilities 1 Table 2: Environmental Factors [7]", "startOffset": 116, "endOffset": 119}, {"referenceID": 9, "context": "Fuzzy logic is derived from the fuzzy set theory that was proposed by Lotfi Zadeh in 1965 [10].", "startOffset": 90, "endOffset": 94}, {"referenceID": 0, "context": "Fz[x \u2208 A] = \u03bcA(x): R \u2192 [0, 1] (5)", "startOffset": 23, "endOffset": 29}, {"referenceID": 10, "context": "Artificial Neural Network (ANN) is a network composed of artificial neurons or nodes which emulate the biological neurons [11].", "startOffset": 122, "endOffset": 126}, {"referenceID": 11, "context": "MMRE: This is a very common criterion used to evaluate software cost estimation models [12].", "startOffset": 87, "endOffset": 91}, {"referenceID": 12, "context": "MMER: MMER is another method for cost estimation models evaluation [13].", "startOffset": 67, "endOffset": 71}, {"referenceID": 13, "context": "argued that MMRE should not be used when comparing cost estimation models and using the standard deviation would be better [14].", "startOffset": 123, "endOffset": 127}, {"referenceID": 14, "context": "The standard deviation method was first proposed by Karl Pearson in 1894 [15].", "startOffset": 73, "endOffset": 77}, {"referenceID": 15, "context": "[16] mapped UML use case diagrams to the software size metric Function Points.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[18], used the use case diagram of software to determine the effort of the software based on three steps.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[19], used fuzzy logic to tune the parameters of COCOMO cost estimation model.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[20], proposed a new model using neuro-fuzzy technique to improve the estimation of the COCOMO model.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "than trial and error [21].", "startOffset": 21, "endOffset": 25}], "year": 2016, "abstractText": "Software estimation is a crucial task in software engineering. Software estimation encompasses cost, effort, schedule, and size. The importance of software estimation becomes critical in the early stages of the software life cycle when the details of software have not been revealed yet. Several commercial and non-commercial tools exist to estimate software in the early stages. Most software effort estimation methods require software size as one of the important metric inputs and consequently, software size estimation in the early stages becomes essential. One of the approaches that has been used for about two decades in the early size and effort estimation is called use case points. Use case points method relies on the use case diagram to estimate the size and effort of software projects. Although the use case points method has been widely used, it has some limitations that might adversely affect the accuracy of estimation. This paper presents some techniques using fuzzy logic and neural networks to improve the accuracy of the use case points method. Results showed that an improvement up to 22% can be obtained using the proposed approach.", "creator": "Microsoft\u00ae Word 2010"}}}