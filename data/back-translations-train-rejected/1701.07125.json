{"id": "1701.07125", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Jan-2017", "title": "jsCoq: Towards Hybrid Theorem Proving Interfaces", "abstract": "We describe jsCcoq, a new platform and user environment for the Coq interactive proof assistant. The jsCoq system targets the HTML5-ECMAScript 2015 specification, and it is typically run inside a standards-compliant browser, without the need of external servers or services. Targeting educational use, jsCoq allows the user to start interaction with proof scripts right away, thanks to its self-contained nature. Indeed, a full Coq environment is packed along the proof scripts, easing distribution and installation. Starting to use jsCoq is as easy as clicking on a link. The current release ships more than 10 popular Coq libraries, and supports popular books such as Software Foundations or Certified Programming with Dependent Types. The new target platform has opened up new interaction and display possibilities. It has also fostered the development of some new Coq-related technology. In particular, we have implemented a new serialization-based protocol for interaction with the proof assistant, as well as a new package format for library distribution.", "histories": [["v1", "Wed, 25 Jan 2017 01:21:14 GMT  (163kb,D)", "http://arxiv.org/abs/1701.07125v1", "In Proceedings UITP 2016,arXiv:1701.06745"]], "COMMENTS": "In Proceedings UITP 2016,arXiv:1701.06745", "reviews": [], "SUBJECTS": "cs.PL cs.HC cs.LG cs.LO", "authors": ["emilio jes\\'us gallego arias", "beno\\^it pin", "pierre jouvelot"], "accepted": false, "id": "1701.07125"}, "pdf": {"name": "1701.07125.pdf", "metadata": {"source": "CRF", "title": "jsCoq: Towards Hybrid Theorem Proving Interfaces", "authors": ["Emilio Jes\u00fas Gallego Arias", "Beno\u00eet Pin", "Pierre Jouvelot"], "emails": ["e@x80.org", "benoit.pin@mines-paristech.fr", "pierre.jouvelot@mines-paristech.fr"], "sections": [{"heading": null, "text": "Autexier, S. and Quaresma, P. (Eds.): Proceedings of 12th International Workshop on User Interfaces for Theorem Provers (UITP 2016) EPTCS 239, 2017, pp. 15-27, doi: 10.4204 / EPTCS.239.2jsCoq: Towards Hybrid Theorem Proving InterfacesEmilio Jes\u00fas Gallego Arias MINES ParisTechPSL Research University, France e @ x80.orgBeno\u00eet Pin MINES ParisTechPSL Research University, France benoit.pin @ mines-paristechech.frPierre Jouvelot MINES ParisTechPSL Research University, France e @ x80.orgBeno\u00eet Pin ParisTechPSL Research University, France benoit.pin @ mines-paristechechechechechech.frWe describe jsCoq, a new platform and user environment for the Coq interactive assistant."}, {"heading": "1 Introduction", "text": "This year it is so far that it will only be a matter of time before it is so far, until it is so far."}, {"heading": "2 The Web-Based Hybrid Document Model", "text": "In fact, it is so that it is a matter of a way in which people are able to determine for themselves how they have behaved. (...) It is not as if people were able to behave as if they would. (...) \"It is as if they would.\" (...) \"It is not as if they would.\" (...) \"It is as if it were.\" (...) \"It is as if it were\" it. \"(...)\" (...) \"(...)\" (...) \"(...)\" (...) \"(...\") \"(It is as if it were}, {"heading": "3 System Overview", "text": "The high-level architecture of jsCoq is typical of IDEs: the Coq Proof Wizard runs in its own separate process, while the user interface runs in the browser thread, and the two communicate with messages that follow the Web Worker standard. [16] In addition, a library manager takes care of downloading Coq packages and registering with the browser file system. Coq Employee provides an XML-based communication protocol - used by CoqIDE and others - that allows incremental creation of proof scripts. It relies on Unix features that are not available in a browser environment, and does not provide direct access to the Coq-based API, which we consider valuable."}, {"heading": "3.1 Coq Protocol", "text": "In fact, it is the case that it is a form and manner in which one finds oneself in a position to comply with the rules that one has imposed on oneself and in which one adheres to the rules. (...) It is also the case that one finds oneself in a position to change the rules. (...) It is not the case that one sees oneself in a position to change the rules. \"(S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S. S."}, {"heading": "3.2 Serialization", "text": "The previous command and response definitions are specified as OCaml data types and implemented by a relatively simple OCaml interpreter. However, the browser side, and in particular the Web Worker API, requires messages to be JSON objects. So how do our OCaml data types best relate to their JSON representation? We think that direct manipulation of JSON objects in OCaml would have consumed most of our available development time. Therefore, the core of our design is the use of the new PPX system for OCaml metaproprogramming, which supports auto-generation of serialize. In particular, we use the ppx _ yojson [32] package, which automatically provides serialization features for the definitions of our small DSL and, more importantly, for core coq data types. In fact, this has been shown to be a great choice, resulting in a very low overhead export of just experimenting with upstream structures, or simply completing changes."}, {"heading": "3.3 Document Manager", "text": "The document manager sets the HTML document model shown to the user in relation to the internal document maintained by the Coq Proof Engine. Thanks to careful API design, the UI state is minimized and the relation can be implemented largely stateless and reactively. Currently, the manager has three different components: \u2022 a CoqPanel object that provides the user interface for target and query buffers; \u2022 a CoqProvider object that encapsulates the management of Coq statements and takes particular care of selecting the next statement, highlighting, change notifications, etc.; \u2022 a CoqManager object that queries and coordinates with the panel and Coq itself, disseminates errors and protocols, and keeps track of the correct Coq states.A key feature of our approach is the use of CodeMirror [15] as an example of the CoqProvider components. CodeMirror is an open source software that is more versatile than the specific code editor implemented for the browser."}, {"heading": "3.4 Package Manager", "text": "The package manager takes care of loading the required packages and Coq.vo files into the Coq instance. Packages are described as JSON files that specify their dependencies and the set of Coq logical paths that the package provides. Unqualified modules are considered deprecated by jsCoq. The basic unit of the jsCoq package format is the logical path pkg _ id, which consists of the module identifier, a list of strings. We assume that logical and physical paths are the same to match A / B / C. For each logical path, the package format requires a list of.vo files (the vo _ files field) and.cma files."}, {"heading": "3.5 Document Generation", "text": "Manually writing HTML documents with Coq proofs can be tedious in some cases. To facilitate this task, we offer udoc, an offshoot of the CoqDoc tool for generating jsCoq documents. Currently, the tool aims to achieve maximum compatibility with existing developments using CoqDoc, and mapping Coq files to jsCoq documents is relatively straightforward. udoc was used to generate the jsCoq versions of Software Foundations [21], Certified Programming with Dependent Types [7], the MTAC tutorial [37], and so on."}, {"heading": "4 Practical Validation", "text": "So far, our jsCoq system has remained stable, filling a niche for casual Coq users, tutorials and people willing to try out Coq add-ons in a simple way. In fact, jsCoq has already been used to support some Coq courses and a tutorial, including: \u2022 \"Winter School Advanced Software Verification and Computer Proof,\" Sophia Antipolis, January 18-22, 2016; \u2022 \"Mathematical Components, an Introduction\" and ITP Tutorial, Nancy, August 27, 2016; and \u2022 the \"Mathematical Components.\" These two courses total about a hundred jsCoq users. The tool worked well for everyone and allowed them to experience Coq; the main complaints are caused by the immaturity of the user interface, in particular by the fact that our choice of UI panels has not been well adapted to different screen pages."}, {"heading": "5 Related Work", "text": "There is a great deal of work in the domain of hybrid document systems, starting with the WEq system [18], mathematical software [19, 34] and web-based solutions [20, 14, 24, 33].In the field of theorem testing, we can highlight Proof General [1] as a popular tool for Emacs users that offers a very comprehensive set of features and greatly simplifies script editing for multiple interactive proof wizards. Along with CoqIDE [28], this is the default choice for Coq users. Proof General communicates with Coq using an unstructured, text-based protocol, but it has recently been updated to support the more modern XML protocol [26]. Advanced coding functions such as completion and improved visualization are provided by Coq [22] Proof General add-on, whose use cases are provided by Coq, are very useful in shaping the direction of our own system."}, {"heading": "6 Future Work", "text": "This year, it is only a matter of time before there is an agreement, until there is an agreement."}, {"heading": "7 Conclusion", "text": "We introduced and detailed jsCoq, a new web-based execution platform and user environment for the Coq interactive proof wizard. jsCoq is just a set of static HTML / JavaScript files, so it can be easily hosted by anyone and used locally or offline. Although jsCoq is still in the works, we believe the possibilities are exciting, and we don't think it presumptuous to say that this experiment has brought a breath of fresh air to the area of Coq user interfaces."}, {"heading": "Acknowledgments", "text": "We thank Cl\u00e9ment Pit-Claudel and Enrico Tassi for discussing this work, the developers of js _ of _ ocaml for their support and the anonymous reviewers for their insightful comments and careful reading of our work. This research was funded by the ANR FEEVER project."}], "references": [{"title": "Proof General: A Generic Tool for Proof Development", "author": ["David Aspinall"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2000}, {"title": "Asynchronous Processing of Coq Documents: From the Kernel up to the User Interface", "author": ["Bruno Barras", "Carst Tankink", "Enrico Tassi"], "venue": "Interactive Theorem Proving - 6th International Conference,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Kopitiam\u2013a unified IDE for developing formally verified Java programs. Technical Report, IT University of Copenhagen. 5https://x80.org/collacoq/ 6http://opendreamkit.org  26  jsCoq: Towards a Hybrid Theorem Proving Interface for Coq", "author": ["Jesper Bengtson", "Hannes Mehnert"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "The CtCoq System: Design and Architecture", "author": ["Yves Bertot"], "venue": "Formal Asp. Comput", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1999}, {"title": "Proof by Pointing", "author": ["Yves Bertot", "Gilles Kahn", "Laurent Th\u00e9ry"], "venue": "Theoretical Aspects of Computer Software, International Conference TACS \u201994,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1994}, {"title": "Certified Programming with Dependent Types", "author": ["Adam Chlipala"], "venue": "MIT Press. Available at http: //adam.chlipala.net/cpdt/", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "SerAPI: Machine-Friendly, Data-Centric Serialization for COQ. Available at https://hal-mines-paristech.archives-ouvertes.fr/hal-01384408", "author": ["Emilio Jes\u00fas Gallego Arias"], "venue": "Working paper or preprint", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "A Small Scale Reflection Extension for the Coq system", "author": ["Georges Gonthier", "Assia Mahboubi", "Enrico Tassi"], "venue": "Research Report RR-6455", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2008}, {"title": "Eloquent Javascript, 1st edition", "author": ["Marijn Haverbeke"], "venue": "No Starch Press. Available at http: //eloquentjavascript.net/", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2011}, {"title": "Web Interfaces for Proof Assistants", "author": ["Cezary Kaliszyk"], "venue": "Electronic Notes in Theoretical Computer Science 174(2),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2007}, {"title": "Company-Coq: Taking Proof General one step closer to a real IDE. In: CoqPL\u201916", "author": ["Cl\u00e9ment Pit-Claudel", "Pierre Courtieu"], "venue": "The Second International Workshop on Coq for PL,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2016}, {"title": "Mathematics of the Discrete Fourier Transform (DFT): with Audio Applications, 2nd edition", "author": ["III Julius Orion Smith"], "venue": null, "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2007}, {"title": "Proviola: A Tool for Proof Re-animation", "author": ["Carst Tankink", "Herman Geuvers", "James McKinna", "Freek Wiedijk"], "venue": "Lecture Notes in Computer Science, Springer Science + Business Media,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2010}, {"title": "From bytecode to JavaScript: the Js_of_ocaml compiler", "author": ["J\u00e9r\u00f4me Vouillon", "Vincent Balat"], "venue": "Softw., Pract. Exper", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2014}, {"title": "PIDE as front-end technology for Coq. CoRR abs/1304.6626", "author": ["Makarius Wenzel"], "venue": "Available at http: //arxiv.org/abs/1304.6626", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2013}, {"title": "Asynchronous User Interaction and Tool Integration in Isabelle/PIDE", "author": ["Makarius Wenzel"], "venue": "editors: Interactive Theorem Proving - 5th International Conference,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2014}, {"title": "Mtac: a monad for typed tactic programming in Coq", "author": ["Beta Ziliani", "Derek Dreyer", "Neelakantan R. Krishnaswami", "Aleksandar Nanevski", "Viktor Vafeiadis"], "venue": "editors: ACM SIGPLAN International Conference on Functional Programming, ICFP\u201913,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2013}], "referenceMentions": [{"referenceID": 5, "context": "Popular ITP teaching material, such as [21, 7], is written in a literate programming style, pioneered by Donald Knuth.", "startOffset": 39, "endOffset": 46}, {"referenceID": 0, "context": "Popular options are CoqIde or ProofGeneral [1, 22], but alternatives exist.", "startOffset": 43, "endOffset": 50}, {"referenceID": 10, "context": "Popular options are CoqIde or ProofGeneral [1, 22], but alternatives exist.", "startOffset": 43, "endOffset": 50}, {"referenceID": 8, "context": "Jupyter4 allows to create and share documents that contain live code, equations, visualizations, and explanatory text; Eloquent JavaScript [14] is an interactive book where all the examples can be run and edited online.", "startOffset": 139, "endOffset": 143}, {"referenceID": 11, "context": "\u2022 DFT, a small development of the theory of the Fourier Transform, following [25];", "startOffset": 77, "endOffset": 81}, {"referenceID": 16, "context": "\u2022 Mtac, the Mtac [37] tutorial;", "startOffset": 17, "endOffset": 21}, {"referenceID": 5, "context": "\u2022 StackMachine, the first chapter of [7].", "startOffset": 37, "endOffset": 40}, {"referenceID": 13, "context": "The worker is then linked with Coq and compiled by js_of_ocaml [29] to a monolithic JavaScript file.", "startOffset": 63, "endOffset": 67}, {"referenceID": 1, "context": "Our message-based API is based on the State Transaction Machine (STM) API for Coq [2].", "startOffset": 82, "endOffset": 85}, {"referenceID": 7, "context": "We currently support 16 popular Coq packages, including the full Mathematical Components library [13].", "startOffset": 97, "endOffset": 101}, {"referenceID": 5, "context": "The udoc tool has been used to generate the jsCoq versions of Software Foundations [21], Certified Programming with Dependent Types [7], the MTAC tutorial [37], etc.", "startOffset": 132, "endOffset": 135}, {"referenceID": 16, "context": "The udoc tool has been used to generate the jsCoq versions of Software Foundations [21], Certified Programming with Dependent Types [7], the MTAC tutorial [37], etc.", "startOffset": 155, "endOffset": 159}, {"referenceID": 8, "context": "There exist a large amount of work in the domain of hybrid document systems, starting with the WEB system [18], mathematical software [19, 34], and web-based solutions [20, 14, 24, 33].", "startOffset": 168, "endOffset": 184}, {"referenceID": 0, "context": "In the realm of theorem proving, we can highlight Proof General [1] as a popular tool for Emacs users, providing a very comprehensive feature set and significantly easing script editing for several interactive proof assistants.", "startOffset": 64, "endOffset": 67}, {"referenceID": 10, "context": "Advanced coding features such as completion and improved display are provided by the Company Coq [22] Proof General add-on.", "startOffset": 97, "endOffset": 101}, {"referenceID": 3, "context": "The idea of proof-by-pointing [4, 5] \u2014 which allows the user to develop proofs by interacting with logical connectives \u2014 also provided guidance and motivation for the development of our tool.", "startOffset": 30, "endOffset": 36}, {"referenceID": 4, "context": "The idea of proof-by-pointing [4, 5] \u2014 which allows the user to develop proofs by interacting with logical connectives \u2014 also provided guidance and motivation for the development of our tool.", "startOffset": 30, "endOffset": 36}, {"referenceID": 1, "context": "We are obviously indebted to the work of Barras et al [2], which introduced most of the Coq-level technology allowing the development of jsCoq, work which is itself inspired by developments in the Isabelle/jEdit editing technology [31, 30].", "startOffset": 54, "endOffset": 57}, {"referenceID": 15, "context": "We are obviously indebted to the work of Barras et al [2], which introduced most of the Coq-level technology allowing the development of jsCoq, work which is itself inspired by developments in the Isabelle/jEdit editing technology [31, 30].", "startOffset": 231, "endOffset": 239}, {"referenceID": 14, "context": "We are obviously indebted to the work of Barras et al [2], which introduced most of the Coq-level technology allowing the development of jsCoq, work which is itself inspired by developments in the Isabelle/jEdit editing technology [31, 30].", "startOffset": 231, "endOffset": 239}, {"referenceID": 14, "context": "Other interesting IDE efforts for the Coq system are [10, 30, 3].", "startOffset": 53, "endOffset": 64}, {"referenceID": 2, "context": "Other interesting IDE efforts for the Coq system are [10, 30, 3].", "startOffset": 53, "endOffset": 64}, {"referenceID": 9, "context": "A prominent web-based system that depends on a server is ProofWeb [17], which provides a web interface to a Coq server and many other theorem provers.", "startOffset": 66, "endOffset": 70}, {"referenceID": 6, "context": "This situation has recently changed, as the PeaCoq development version is based on SerAPI [12].", "startOffset": 90, "endOffset": 94}, {"referenceID": 12, "context": "We are also very close to providing Proviola-like [27] functionality, that is to say, a system where the user can interactively perform proof replay.", "startOffset": 50, "endOffset": 54}, {"referenceID": 6, "context": "Dubbed SerAPI [12], for \u201cSeralization-based API\u201d, this protocol provides a more data-centric view of the Coq system and will be at the core of future jsCoq versions.", "startOffset": 14, "endOffset": 18}], "year": 2017, "abstractText": "We describe jsCoq, a new platform and user environment for the Coq interactive proof assistant. The jsCoq system targets the HTML5\u2013ECMAScript 2015 specification, and it is typically run inside a standards-compliant browser, without the need of external servers or services. Targeting educational use, jsCoq allows the user to start interaction with proof scripts right away, thanks to its self-contained nature. Indeed, a full Coq environment is packed along the proof scripts, easing distribution and installation. Starting to use jsCoq is as easy as clicking on a link. The current release ships more than 10 popular Coq libraries, and supports popular books such as Software Foundations or Certified Programming with Dependent Types. The new target platform has opened up new interaction and display possibilities. It has also fostered the development of some new Coq-related technology. In particular, we have implemented a new serialization-based protocol for interaction with the proof assistant, as well as a new package format for library distribution.", "creator": "LaTeX with hyperref package"}}}