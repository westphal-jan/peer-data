{"id": "1701.09000", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-Jan-2017", "title": "On the Semantics and Complexity of Probabilistic Logic Programs", "abstract": "We examine the meaning and the complexity of probabilistic logic programs that consist of a set of rules and a set of independent probabilistic facts (that is, programs based on Sato's distribution semantics). We focus on two semantics, respectively based on stable and on well-founded models. We show that the semantics based on stable models (referred to as the \"credal semantics\") produces sets of probability models that dominate infinitely monotone Choquet capacities, we describe several useful consequences of this result. We then examine the complexity of inference with probabilistic logic programs. We distinguish between the complexity of inference when a probabilistic program and a query are given (the inferential complexity), and the complexity of inference when the probabilistic program is fixed and the query is given (the query complexity, akin to data complexity as used in database theory). We obtain results on the inferential and query complexity for acyclic, stratified, and cyclic propositional and relational programs, complexity reaches various levels of the counting hierarchy and even exponential levels.", "histories": [["v1", "Tue, 31 Jan 2017 11:54:15 GMT  (61kb)", "http://arxiv.org/abs/1701.09000v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["fabio gagliardi cozman", "denis deratani mau\\'a"], "accepted": false, "id": "1701.09000"}, "pdf": {"name": "1701.09000.pdf", "metadata": {"source": "CRF", "title": "On the Semantics and Complexity of Probabilistic Logic Programs", "authors": ["Fabio Gagliardi Cozman"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 170 1.09 000v 1 [cs.A I]"}, {"heading": "1 Introduction", "text": "The combination of deterministic and uncertain thinking has led to many mixtures of logic and probability (Halpern, 2003; Hansen & Jaumard, 1996; Nilsson, 1986), in particular the combination of logical programming constructs and probabilistic assessments tracked in multiple versions (Fuhr, 1995; Lukasiewicz, 1998; Ng & Subrahmanian, 1992; Poole, 1993; Sato, 1995), and the topic has produced significant literature (Raedt, Kersting, & Muggleton, 2010; Raedt, 2008). Among the likely logical programming languages, the approach of Poole's probabilistic horn abduction (Poole, 1993) and Sato's distribution semantics (Sato, 1995) is very popular."}, {"heading": "2 Background", "text": "Before delving into these topics, we briefly specify the notation of Bayesian networks as we will need them later. A Bayesian network is a pair consisting of a directed acyclic graph G, whose nodes are random variables, and a common probability distribution P across all variables in the graph, so that G and P meet the \"Markov condition\" (i.e., a random variable is independent of its parents, since its nondescendants make it) (Koller & Friedman, 2009; Neapolitan, 2003; Pearl, 1988). If all random variables are discrete, then one can specify \"local\" conditional probabilities P (Xi = xi | pa (Xi) = \u03c0i), and the common probability distribution is necessarily the product of these local probabilities: P (X1 = x1,..., Xn = xn = i = 1P (Xi = Xi) (pa) = \u03c0i (pa), and the common probability distribution is necessarily the product of this local probability (Xi)."}, {"heading": "2.1 Normal logic programs: syntax and semantics", "text": "In fact, it is the case that one is able to find a solution that is capable of finding a solution that is capable of finding a solution and that is able to find a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution, that is capable of finding a solution that is capable of finding a solution that is capable of finding a solution."}, {"heading": "2.2 Complexity theory: the counting hierarchy", "text": "We adopt basic terminology and notation from computational complexity (Papadimitriou, 1994). A language is a set of strings. A language defines a decision problem, that is, the problem of deciding whether an input formula is contained in the language. A complexity class is a set of languages, whether we use known complexity classes such as P, NP, EXP, NEXP. Complexity class PP consists of these languages L, which fulfill the following property: There is a polynomial time non-deterministic turning machine M, which accepts more than half of the calculations of M on input languages. Analogously, we accept these languages L with the following property: There is an exponential time without deterministic turning machine M, which is such that L iff accepts half of the calculations of M on input."}, {"heading": "3 Probabilistic normal logic programs", "text": "In this paper, we focus on a particularly simple combination of logical programming and probabilities (Poole, 1993; Sato, 1995).A probabilistic logic program, plp for short, is a pair < P, PF > that consists of a normal logic program P and a set of probabilistic facts PF. A probabilistic fact is a pair that consists of an atom A and a probability value \u03b1; we use the notation \u03b1:: A. borrowed from the ProbLog package 1 (Fierens et al., 2014).We assume that each probability value is a rational number.1At https: / dtai.cs.kuleuven.be / problog / index.html.Example 5. Here is a syntactically correct ProbLog program: 0.7:::: burglary. 0.2:: earthquake. Alarm: < earthquake, a 1st alarm: \u2212 logical, no earthquake, a 2nd alarm: \u2212 stabilizable."}, {"heading": "3.1 The semantics of probabilistic facts", "text": "The interpretation of probability factors requires a pause. Suppose we have a plp < P, PF > with n probability facts (which can be the basis of probability factors containing logical variables). From < P, PF > we can generate 2n normal logical programs: for any probable fact \u03b1:: A., we can either choose to keep the fact A. or choose to delete the fact A. These decisions are assumed independently: this is Sato's assumption of independence. Consider, for example, the plp: 0.5:: r. 0,5:: s. v: \u2212 r, s. (4) We have four ways to write a normal logical program from this plp; that is, r can be cancelled or removed, and likewise for s. All of these normal logical programs we will get with the same probability, and in one of them v is true; consequently, the probability P (v = true) is."}, {"heading": "3.2 The semantics of definite/acyclic/stratified probabilistic logic programs", "text": "We can semantics of a plp < P, PF > Firstly, we take the grounding of this plp. (For each complete choice that we receive, we receive the normal logical program P-PF-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-D-"}, {"heading": "3.3 The semantics of general probabilistic logic programs", "text": "If a normal logic program is not stratified, then its reasoned semantics may be a partial interpretation, and some atoms may be left undefined; it may have several stable models or no stable model at all. Therefore, we must take these cases into account when considering non-stratified plps."}, {"heading": "3.3.1 The credal semantics", "text": "A first possible semantics for a general probabilistic logic program can be taken from the work of Lukasiewicz = Q = Q (2005, 2007) on probabilistic description of logical programs. To describe this proposal, a few definitions are required. A plp < P, PF > is consistent if there is at least one stable model for each complete choice of PF. (A probability model for a consistent plp < P, PF > is a probability measurement P on interpretations of P, so: (i) any interpretation I with P (I) > 0 is a stable model for the complete choice of PF."}, {"heading": "3.3.2 The well-founded semantics", "text": "The approach of Hadjichristodoulou and Warren (2012) is to allow probabilities directly via well-founded models, thus allowing probabilities over atoms that are not defined; that is, in a plp < P, PF >, one associates with each complete choice the unique, well-founded model of P-PF \u2193 to \u03b8; the unique distribution over the complete selection results in a unique distribution over well-founded models. Note that probabilities in this kind of semantics can be associated with undefined values. As we discuss in Section 4, this is a bold proposal whose interpretation is anything but simple. Notwithstanding its importance, the approach deserves attention as it is the only one in the literature that combines truly well-founded semantics with probabilities. Accordingly, we call it the well-founded semantics of probable logical programs (the combination of language and semantics is called WF-PRISM by Hadjichristodoulou and Warren)."}, {"heading": "3.3.3 Other semantics", "text": "In fact, most of them are able to orient themselves in a certain direction in which they are able to."}, {"heading": "4 The semantics of the credal and the well-founded semantics", "text": "It does not seem that any comparison in the literature between the credal and the well-founded semantics for non-stratified plots = does not occur. In fact, the credal semantics has not been adopted since its occurrence, a turn of events that we find unfortunate, since it is a perfectly reasonable semantics for general plots. In this section, we present some examples highlighting differences between these semantics, and we consider their interpretation.Example 9. Let us consider a probable version of Example 2: \u2212 not q, not r. q: \u2212 not P. \u03b1:: r.This is essentially identical to the plots in expression (1). To interpret the plot, note that we are likely to get the normal logical version of Example 2: \u2212 not r. q: \u2212 not P. r.The unique stable / well-founded model of this program assign true to r and q, and false to p. That is, we have the stable model s1 = {\u00ac q, q}."}, {"heading": "5 The structure of credal semantics", "text": "Considering the generality of plps (\u2212 1), one might think that the propositions generated by credal semantics could have several functions that have an arbitrarily complex structure. (>) Surprisingly, the structure of credal semantics of a plp is a relatively simple object: Theorem 14. Considering a consistent plp, its credal semantics is a set of probability yardsticks that dominate an infinitely monotonous selection option. (Before we present any proof for this theory, let us pause and define a few terms.) An infinitely monotonous selection capacity is a set of probability yardsticks that dominate a set of probability yardsticks that include a real interval of all possible choices. (0, 1) So that we present a proof for these theorems, 2014, definition 4.2): P (1 \u2212 P) = 1, and for any possible abuse."}, {"heading": "6 The complexity of inferences: acyclic and stratified proba-", "text": "In this section, we focus on the calculation of conclusions for acyclic and stratified plots; in these cases, both the credal and the well-founded semantics are identical; we focus on the following problem of decision: Input: A plp < P, PF > whose probabilities are rational numbers; a pair (Q, E) called the query in which both Q and E have complex sets of truth assignments to atoms in the Herbrand base of program P and all facts in PF; and a rational \u03b3 [0, 1].Output: Whether it is the question or not P (Q | E) > \u03b3; by convention, output is NO (that is, input is rejected) when we refer to this complexity; one may also be interested in the question of whether it is the complexity of ports or not. Output: Whether the complexity of ports or not."}, {"heading": "6.1 Acyclic probabilistic logic programs", "text": "We start with acyclic plps. In this case, the credal and well-grounded semantics are defined by a network given by a Bayesian network whose structure is the invented dependency curve of the program, and whose parameters are derived from the Clark completion of the program (Poole, 1993, 2008). Example 16. Let us take a simplified version of plp in Example 5, without predicates, calls, and neighbors: 0,7::: intrusions. 0,1::: a3.We can understand this plp as the specification of the Bayesian network in Figure 4. Note that the structure of the network is only the grounded dependency graph, and the logical theorem comes directly from the Clark Completion.Conversely, any propositional Bayesian network can be specified by us."}, {"heading": "6.2 Stratified probabilistic logic programs", "text": "A stratified normal logic program has the useful property that its universally applied semantics can indeed be variable (and is equal to its stable and well-founded semantics). Since each total selection of a stratified plp produces a stratified normal logic program, the complexity class remains the same as in Section 6.1: Theorem 24. For locally stratified plps, inferential complexity, one might fear that if we switch from acyclic to stratified programs, we will have to pay a heavy penalty. It is not the case that the complexity classes remain the same as in Section 6.1: Theorem 24. For locally stratified plps, the inferential complexity is PEXP-complete; it is PPNP-complete for plot complexity; it is PP-complete for propositional plps. For locally stratified plps, query complexity is PP-complexity-Proof PP."}, {"heading": "7 The complexity of inferences: credal semantics", "text": "We need to consider the definitions of inferential Q > Q > Q > R complexity to take into account the fact that we now have lower and higher probabilities. First, we focus on lower probabilities; the lower version of inferential complexity for a class of plots is the complexity of the following decision problem: Input: A plp < P, PF > whose probabilities are rational numbers, a pair (Q, E), called the question of whether both Q and E are sets of truth assignments to atoms in the Herbrand base of program P and all facts in PF and all facts in PF, and a rational solution [0, 1].Output: Whether the probability is P (Q, E) > by convention or not; Output is NO (that is, input is rejected) if P (E) is the lower probability version of the query complexity, correspondingly: Fixed: A plp & lt.PF, whose probabilities are likely > PF."}, {"heading": "8 The complexity of inference under the well-founded seman-", "text": "This year, it has reached the stage where it will be able to take the lead."}, {"heading": "9 Conclusion", "text": "We can summarize our contributions as follows: First, we have identified and compared the main ideas between credal and solid semantics for plps based on probable facts and normal logical programs; second, we have shown that credal semantics is closely related to the infinitely monotonous complexity of acyclic, stratified and general plps under both credal and well-founded semantics; third, we have derived the inferential and query complexity of acyclic classes; these results on complexity are summarized in Table 2; note that plps do not reach trivial classes in the hierarchy."}, {"heading": "Acknowledgements", "text": "The first author is partially supported by CNPq, grant amount 308433 / 2014-9. The second author received financial support from the S\u00e3o Paulo Research Foundation (FAPESP), grant amount 2016 / 01055-1."}], "references": [], "referenceMentions": [], "year": 2017, "abstractText": "We examine the meaning and the complexity of probabilistic logic programs that consist of a set of rules and a set of independent probabilistic facts (that is, programs based on Sato\u2019s distribution semantics). We focus on two semantics, respectively based on stable and on well-founded models. We show that the semantics based on stable models (referred to as the \u201ccredal semantics\u201d) produces sets of probability models that dominate infinitely monotone Choquet capacities; we describe several useful consequences of this result. We then examine the complexity of inference with probabilistic logic programs. We distinguish between the complexity of inference when a probabilistic program and a query are given (the inferential complexity), and the complexity of inference when the probabilistic program is fixed and the query is given (the query complexity, akin to data complexity as used in database theory). We obtain results on the inferential and query complexity for acyclic, stratified, and cyclic propositional and relational programs; complexity reaches various levels of the counting hierarchy and even exponential levels.", "creator": "dvips(k) 5.991 Copyright 2011 Radical Eye Software"}}}