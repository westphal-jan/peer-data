{"id": "1702.00318", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Feb-2017", "title": "A Hybrid Evolutionary Algorithm Based on Solution Merging for the Longest Arc-Preserving Common Subsequence Problem", "abstract": "The longest arc-preserving common subsequence problem is an NP-hard combinatorial optimization problem from the field of computational biology. This problem finds applications, in particular, in the comparison of arc-annotated Ribonucleic acid (RNA) sequences. In this work we propose a simple, hybrid evolutionary algorithm to tackle this problem. The most important feature of this algorithm concerns a crossover operator based on solution merging. In solution merging, two or more solutions to the problem are merged, and an exact technique is used to find the best solution within this union. It is experimentally shown that the proposed algorithm outperforms a heuristic from the literature.", "histories": [["v1", "Wed, 1 Feb 2017 15:34:27 GMT  (157kb,D)", "http://arxiv.org/abs/1702.00318v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["christian blum", "maria j blesa"], "accepted": false, "id": "1702.00318"}, "pdf": {"name": "1702.00318.pdf", "metadata": {"source": "CRF", "title": "A Hybrid Evolutionary Algorithm Based on Solution Merging for the Longest Arc-Preserving Common Subsequence Problem", "authors": ["Christian Blum", "Maria J. Blesa"], "emails": ["christian.blum@iiia.csic.es", "mjblesa@cs.upc.es"], "sections": [{"heading": "1 Introduction", "text": "In computer science, a string (or sequence) x of the length lx is a finite sequence of characters from a finite alphabet \u03a3. A string is a type of data that is used to represent and store information. Words in a particular language, for example, are stored in a computer with respect to strings. Even whole texts can be stored using strings. Apart from fields such as information and word processing, strings emerge, especially in the field of computer biology. This is because most of the genetic instructions involved in growth, functioning and reproduction of living organisms are stored in deoxyribonucleic acid x. Apart from the areas where the sequences of DNA and ribonucleic acid molecules (RNA) molecules are double-stranded (in the case of DNA) or single-stranded (in the case of RNA) sequences of nucleotides."}, {"heading": "1.1 Contribution of this Work", "text": "The longest common subsequence problem associated with arc-annotated sequences - the longest arc-preserving problem of the common subsequence (LAPCS) - was first introduced in [6, 5]. Specifically, the same work showed that the most common case of the problem (without arc limitations) is NP-hard. In the meantime, five different variants of the problem - i.e. limitations of the general problem - have been studied in related literature, and efficient algorithms have been developed for three of these variations.1 As far as we know, however, only one algorithm has been proposed that is applicable to the most common case (see [9]). In this work, we first formulate the LAPCS problem in the form of an integral linear program (ILP) [12], and then we use this ILP in the context of a simple evolutionary algorithm based on the merging of two or more solutions, and the best solution in this comparison is proposed by exact derivation of paragraph S1."}, {"heading": "1.2 Outline of the Paper", "text": "The rest of this paper is structured as follows: In Section 2, a technical description of the problem addressed is given; in the following sections - see Section 3 and Section 4 - we describe a heuristics from the literature and formulate an ILP model for the problem addressed; next, the proposed algorithm is outlined in Section 5; finally, in Section 6, a comprehensive experimental evaluation of artificial and real problem cases is given; and in Section 7, a preview of future work is given."}, {"heading": "2 The LAPCS Problem", "text": "Since two input sequences x and y, we define the set of possible mappings A as the set of all letters. < This is A where i,.., lx and j,..., so the problem is that x [i] = y [j] consists of all ai, j that the letter at position i of x is equal to the letter at position j of y. A valid default sequence of the two input sequences x and y can then be represented by a subset S A that meets the following conditions: \u2022 Common subsequence of the letters i of x is equal to the letter of y. (J, ak, l = ak, l) it must hold that either i < k and j < l or i > k and j > l.To translate such a subsequence into the corresponding general subsequences, the mappings must be ordered in S."}, {"heading": "3 Existing Heuristic for LAPCS", "text": "As far as we know, the only heuristic from the literature applicable to the most general version of the LAPCS problem is described in [9] and works as follows: First, the Smith and Waterman dynamic programming algorithm is applied to the input strings x and y, without taking into account the arc annotations, resulting in Figure S A, which most likely violates some of the arc conservation constraints. To fix this invalid solution, the following is done: First, a diagram G is constructed as follows. For each assignment, a vertex v is introduced: Two vertex v (corresponding to an assignment ai, j, j, S) and v \u00b2 (corresponding to an assignment ak, l, l < k) are connected by an edge, if either (i, k), (Px), (j, l), Py, but not both. In other words, two vertex are connected by an edge, if they represent a problem, all of the assignments in the S order can be solved."}, {"heading": "4 An ILP Model for LAPCS", "text": "The LAPCS problem can be defined in relation to an integer linear program (ILP) as follows: For each ai, j \u0445A becomes a binary variable zi, j. The set of all binary variables is denoted by Z. We say that two variables zi, j 6 = zk, l (where i \u2264 k) conflict if setting both variables violates (1) the common subsequence condition, (2) is the conservation condition, or both. Technically, two variables zi, j 6 = zk, l (where i \u2264 k) conflict if at least one of the following applies: 1. j \u2265 l2. Either (i, k), (j, l), Py, but not both at the same time. The LAPCS problem can then be reformulated as the problem of selecting a maximum number of non-contradictory variables from Z. Considering these notations, the ILP is indicated as a conflict, but not both at the same time."}, {"heading": "5 The Hybrid EA with Solution Merging", "text": "The proposed hybrid solution contained in these solutions is applied in the GenerateRandomSolution (drate, lsize) function in line 6 of algorithm 1. The proposed hybrid solution is applied in line 1 of algorithm 1. The proposed hybrid solution is applied in line 1 of algorithm 1. The proposed hybrid solution is applied in line 6 of algorithm 1. The proposed hybrid solution is applied in line 1 of algorithm 1."}, {"heading": "6 Experimental Evaluation", "text": "In summary, the following techniques are included in the experimental evaluation: (1) the heuristics described in Section 3 (Heuristic), (2) the hybrid EA (Hyb-Ea) and (3) Hyb-Ea without the application of Solution Merging. This last algorithm - henceforth referred to by MsHeur - is essentially a multi-start heuristics that constructs randomized solutions (and applies the repair procedure to them) until the computation time has expired. Comparing Hyb-Ea with Ms-Heur, we can measure the contribution of the Solution Merging. The three above-mentioned algorithms were implemented in ANSI C + +, using GCC 4.7.3 for the use of external libraries. Furthermore, the ILP models within Hyb-Ea were performed with the ILP solver IBM ILOG CPLEX v12.6 in a single-strand mode."}, {"heading": "6.1 Benchmark Instances", "text": "Two groups of benchmark instances were generated: The first set, called Set1, consists of artificial problem cases. Each of these instances consists of two artificially generated RNA strands of length n {100, 200,..., 900, 1000}. The probability of each letter and each position was set at 1 / 4. In addition, we randomly generated a number of anesthesia strands for each input string, n / 10, n / 5, n / 2. Here, care was taken to ensure that all anesthesia arcs were different. For each combination of n and anesthesia, we randomly generated 30 problem cases, resulting in a total of 900 problem cases. For the second benchmark set, called Set2, we downloaded arc-annotated RNA sequences from the RNase P database [3]. In total, we compiled 10 problem cases, the characteristics of which are described in Table 1. Furthermore, the secondary structures of the RNA sequences, which are represented in real instances 1 and 8, are exemplary in Figure 3."}, {"heading": "6.2 Algorithm Tuning", "text": "The automatic configuration tool irace [10] was used for tuning the parameters of HybEa. \u2022 The following parameters of Hyb-Ea were taken into account for tuning: (nsols) the number of solution constructions per iteration (drate) the determinism rate, (lsize) the size of the candidate list and (tmax) the maximum time in seconds allowed for the solution merge (at each call of the solution merge procedure). Specifically, Hyb-Ea was tuned separately for each input string length, which - after initial experiments - seemed to have a greater influence on the behavior of the algorithm than the number of slurs. For each n-row {100, 200,.., 1000} we randomly generated two tuning instances for each of the three values of Narcs, giving a total of six tuning instances for each n."}, {"heading": "6.3 Numercial Results", "text": "The results in relation to the artificial problem cases from Set1 are presented in Table 3. Each row provides the results of heuristics, Ms-Heur and Hyb-Ea in relation to the average solution quality achieved for the 30 problem cases of the corresponding combination of n and narcs. All techniques were applied exactly once to each problem instance. The best calculation time used for Ms-Heur and Hyb-Ea was n / 10 CPU seconds. The column with the heading Time shows the average calculation time for the 30 problem cases in the case of Heuristic and the average time in which the best solution of a run was found, in the case of Ms-Heur and Hyb-Ea. The best result of each line is characterized by a light grey background. The following observations can be made very quickly. Its application to all problem instances requires less than one CPU second."}, {"heading": "7 Conclusion", "text": "In this thesis, we proposed a simple hybrid evolutionary algorithm for solving the so-called longest arc-preserving common sub-sequence problem. The most important feature of this algorithm is a crossover component based on the solution merge. In each iteration, the best solution found to date is fused with randomly generated solutions, and a universal integer programmer is used to find the best solution within the resulting task complexity. Results show that the algorithm is superior to the only existing heuristics from the literature. Furthermore, we have shown that the component of the solution merger is an essential part of the algorithm. In future work, we will try to replace the probabilistic nature of the solution construction with a probable version of the Smith and Waterman algorithms. In this way, situations such as those for the real instance Real 4 could be avoided where our algorithm was not able to surpass the existing heuristics."}, {"heading": "Acknowledgment", "text": "This work was financed by the project TIN2012-37930-C02-02 (Spanish Ministry of Economy and Competitiveness, FEDER funds of the European Union) and the project SGR 2014-1034 (AGAUR, Generalitat de Catalunya) Our experiments were carried out in the supercomputer environment managed by the rdlab of the Technical University of Barcelona (http: / / rdlab.cs.upc.edu) and we would like to thank them for their support."}], "references": [{"title": "Optimized crossover for the independent set problem", "author": ["C. Aggarwal", "J. Orlin", "R. Tai"], "venue": "Operations Research, 45:226\u2013234", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1997}, {"title": "Beam search for the longest common subsequence problem", "author": ["C. Blum", "M.J. Blesa", "M. L\u00f3pez-Ib\u00e1\u00f1ez"], "venue": "Computers & Operations Research, 36(12):3178\u20133186", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "The ribonuclease P database", "author": ["J.W. Brown"], "venue": "Nucleic Acids Research, 27(1):314\u2013314", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1999}, {"title": "A comprehensive study of RNA secondary structure alignment algorithms", "author": ["Jimmy Ka Ho Chiu", "Yi-Ping Phoebe Chen"], "venue": "Briefings in Bioinformatics,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2016}, {"title": "Finding common subsequences with arcs and pseudoknots", "author": ["Patricia A. Evans"], "venue": "Proceedings of CPM 1999 \u2013 10th Annual Symposium on Combinatorial Pattern Matching,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1999}, {"title": "Algorithms and Complexity for Annotated Sequence Analysis", "author": ["Patricia Anne Evans"], "venue": "PhD thesis, University of Victoria,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1999}, {"title": "Subsequences and supersequences of strings", "author": ["C.B. Fraser"], "venue": "PhD thesis, University of Glasgow", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1995}, {"title": "Fast algorithms for finding the common subsequences of multiple sequences", "author": ["K. Huang", "C. Yang", "K. Tseng"], "venue": "Proceedings of the 2004 International Computer Symposium, pages 1006\u20131011. IEEE press", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2004}, {"title": "The longest common subsequence problem for arc-annotated sequences", "author": ["Tao Jiang", "Guohui Lin", "Bin Ma", "Kaizhong Zhang"], "venue": "Journal of Discrete Algorithms,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "The irace package: Iterated racing for automatic algorithm configuration", "author": ["M. L\u00f3pez-Ib\u00e1\u00f1ez", "J. Dubois-Lacoste", "L. P\u00e9rez C\u00e1ceres", "M. Birattari", "T. St\u00fctzle"], "venue": "Operations Research Perspectives, 3:43 \u2013 58", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2016}, {"title": "The complexity of some problems on subsequences and supersequences", "author": ["D. Maier"], "venue": "Journal of the ACM, 25:322\u2013336", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1978}, {"title": "Integer and Combinatorial Optimization", "author": ["G.L. Nemhauser", "L.A. Wolsey"], "venue": "Wiley & Sons", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1988}, {"title": "Identification of common molecular subsequences", "author": ["T.F. Smith", "M.S. Waterman"], "venue": "Journal of Molecular Biology, 147", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1981}], "referenceMentions": [{"referenceID": 8, "context": "The example is reproduced from [9].", "startOffset": 31, "endOffset": 34}, {"referenceID": 4, "context": "A pair (x, Px) is called an arc-annotated sequence [5].", "startOffset": 51, "endOffset": 54}, {"referenceID": 3, "context": "In fact, arc-annotated sequences have been widely used for this purpose (see, for example, [4]).", "startOffset": 91, "endOffset": 94}, {"referenceID": 10, "context": ", sn}, the problem of finding the longest commons subsequence of all input strings is, in general, NP-hard [11].", "startOffset": 107, "endOffset": 111}, {"referenceID": 1, "context": "The best techniques available nowadays for solving this problem are based on beam search [2].", "startOffset": 89, "endOffset": 92}, {"referenceID": 5, "context": "The longest common subsequence problem in the context of arc-annotated sequences\u2014the longest arc-preserving common subsequence (LAPCS) problem\u2014has first been introduced in [6, 5].", "startOffset": 172, "endOffset": 178}, {"referenceID": 4, "context": "The longest common subsequence problem in the context of arc-annotated sequences\u2014the longest arc-preserving common subsequence (LAPCS) problem\u2014has first been introduced in [6, 5].", "startOffset": 172, "endOffset": 178}, {"referenceID": 8, "context": "1 However, as far as we know, only one algorithm that is applicable to the most general case has been proposed so far (see [9]).", "startOffset": 123, "endOffset": 126}, {"referenceID": 11, "context": "In this work, we first phrase the LAPCS problem in the form of an integer linear program (ILP) [12].", "startOffset": 95, "endOffset": 99}, {"referenceID": 0, "context": "[1] originally suggested such an approach, labeled optimized crossover, for the independent set problem.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "In [5, 6] it was shown that this problem is, in general, NP-hard.", "startOffset": 3, "endOffset": 9}, {"referenceID": 5, "context": "In [5, 6] it was shown that this problem is, in general, NP-hard.", "startOffset": 3, "endOffset": 9}, {"referenceID": 12, "context": "It is well known that LAPCS(plain,plain), for example, can be solved in polynomial time with the dynamic programming algorithm by Smith and Waterman [13].", "startOffset": 149, "endOffset": 153}, {"referenceID": 8, "context": "As far as we know, the only heuristic from the literature that is applicable to the most general version of the LAPCS problem was described in [9], and works as follows.", "startOffset": 143, "endOffset": 146}, {"referenceID": 6, "context": "Moreover, options zi,j \u2208 C are given a weight value w(zi,j) := i lx + j ly , which is a known greedy function for longest common subsequence problems (see, for example, [7, 8]).", "startOffset": 169, "endOffset": 175}, {"referenceID": 7, "context": "Moreover, options zi,j \u2208 C are given a weight value w(zi,j) := i lx + j ly , which is a known greedy function for longest common subsequence problems (see, for example, [7, 8]).", "startOffset": 169, "endOffset": 175}, {"referenceID": 0, "context": "For doing so, first, a value r is chosen uniformly at random from [0, 1].", "startOffset": 66, "endOffset": 72}, {"referenceID": 2, "context": "All 20 RNA sequences, together with their secondary structure, were downloaded from the RNase P Database [3].", "startOffset": 105, "endOffset": 108}, {"referenceID": 2, "context": "For the second benchmark set, labelled Set2, we downloaded arc-annotated RNA sequences from the RNase P Database [3].", "startOffset": 113, "endOffset": 116}, {"referenceID": 9, "context": "The automatic configuration tool irace [10] was used for tuning the parameters of HybEa.", "startOffset": 39, "endOffset": 43}], "year": 2017, "abstractText": "The longest arc-preserving common subsequence problem is an NP-hard combinatorial optimization problem from the field of computational biology. This problem finds applications, in particular, in the comparison of arc-annotated Ribonucleic acid (RNA) sequences. In this work we propose a simple, hybrid evolutionary algorithm to tackle this problem. The most important feature of this algorithm concerns a crossover operator based on solution merging. In solution merging, two or more solutions to the problem are merged, and an exact technique is used to find the best solution within this union. It is experimentally shown that the proposed algorithm outperforms a heuristic from the literature.", "creator": "LaTeX with hyperref package"}}}