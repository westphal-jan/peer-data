{"id": "1702.01886", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Feb-2017", "title": "Extracting Lifted Mutual Exclusion Invariants from Temporal Planning Domains", "abstract": "We present a technique for automatically extracting mutual exclusion invariants from temporal planning instances. It first identifies a set of invariant templates by inspecting the lifted representation of the domain and then checks these templates against properties that assure invariance. Our technique builds on other approaches to invariant synthesis presented in the literature, but departs from their limited focus on instantaneous actions by addressing temporal domains. To deal with time, we formulate invariance conditions that account for the entire structure of the actions and the possible concurrent interactions between them. As a result, we construct a significantly more comprehensive technique than previous methods, which is able to find not only invariants for temporal domains, but also a broader set of invariants for non-temporal domains. The experimental results reported in this paper provide evidence that identifying a broader set of invariants results in the generation of fewer multi-valued state variables with larger domains. We show that, in turn, this reduction in the number of variables reflects positively on the performance of a number of temporal planners that use a variable/value representation by significantly reducing their running time.", "histories": [["v1", "Tue, 7 Feb 2017 06:02:50 GMT  (347kb,D)", "http://arxiv.org/abs/1702.01886v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["sara bernardini", "fabio fagnani", "david e smith"], "accepted": false, "id": "1702.01886"}, "pdf": {"name": "1702.01886.pdf", "metadata": {"source": "CRF", "title": "Extracting Lifted Mutual Exclusion Invariants from Temporal Planning Domains", "authors": ["Sara Bernardinia", "Fabio Fagnanib", "David E. Smithc"], "emails": ["sara.bernardini@kcl.ac.uk", "fabio.fagnani@polito.it", "david.smith@nasa.gov"], "sections": [{"heading": null, "text": "We present a technique for automatically extracting invariants of mutual exclusion from temporal planning instances. It first identifies a number of invariant templates by verifying the increased representation of the domain and then examines these templates for properties that ensure invariance. Our technique builds on other approaches to invariant synthesis presented in the literature, but deviates from its limited focus on immediate actions by addressing temporal domains. To deal with time, we formulate inventory conditions that take into account the entire structure of actions and the possible simultaneous interactions between them. As a result, we construct a much more comprehensive technique than previous methods that is capable of finding not only inventors for temporal domains, but also a broader group of inventors for non-temporal domains. The experimental results reported in this paper provide evidence that identifying a broader group of inventors to generate less-value state variables with greater domain reductance leads to the use of significant domains."}, {"heading": "1. Introduction", "text": "In fact, most of them are able to go to another world, to go to another world, to find themselves in another world, to find themselves in another world."}, {"heading": "2. Canonical Form of Planning Tasks", "text": "In this work, we look at planning instances expressed in PDDL2.1 (Fox and Long, 2003), but before using our algorithm to find invariants, we manipulate the domain to impose a regular structure in the specification of action schemes. In what follows, we first give an overview of this canonical form of reasoning that we use and then describe how such a form can be achieved starting from a domain expressed in PDDL2.1.1. PDDL Planinstanz is a tuple I = (D) where D is a planning domain and P is a planning problem. DomainD = (R, Ad, Artigkeit) is a tuple consisting of finite relationship symbols, instantaneous actions, and a functionality that maps all these symbols to their respective arrangements. P = (O, Init, G) is a triple composition of objects in the domain, the state of logic, and logical."}, {"heading": "3. Mutual Exclusion Invariants and Templates", "text": "In fact, it is the case that most of us are able to go to another world, in which they go to another world, in which they do not go to another world, in which they do not go to another world, in which they do not find themselves in another world, in which they move, but in which they find themselves in another world, in which they find themselves in another world, in which they find themselves in another world, in which they find themselves in another world, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live."}, {"heading": "4. Safe Instantaneous Ground Actions", "text": "In this and in the following sections we begin with the following definition: Definition 14 (Strongly safe actions). Definition A = (D, P) and a template definition T = (D, A). Definition A = (D, A). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). Definition A = (D). A = (D). D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. (D). D. D. D. (D). D. D. D. D. D. D. (D). D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. (D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. D. (D. D. D. D. D. D. D. D. D. D. D. (D. D. D. D.). D. D. D. D. D. D. (D. D. D. (D. D. D.). D. D. D. D. D. D. (D. D. D. D. D. D. D. D."}, {"heading": "5. Safe action sequences and safe durative actions", "text": "This is done for two reasons: on the one hand, since the number of states that can be reached is smaller than S overall, it may be that all states that are responsible for the lack of a strong security are unreachable, i.e. they are not in Sr. On the other hand, in areas with permanent actions that could prove helpful to determine that such an action is invariable. While we will not analyze the first case in this paper, as it would require an analysis of the reachable states Sr, which is practically impracticable, we are now working out suitable simple concepts of security for permanent measures that are weaker than strong security. This extension is of great importance to apply our technology to real planning domains."}, {"heading": "6. Conditions for the invariance of a template", "text": "The difficulty is, however, that permanent actions in principle cannot begin or end together and can be intertwined with other short-term or long-term measures. In this way, we can establish sufficient conditions for the invariance of a template, which will be useful in the analysis of concrete examples. In this section, we present two results that provide sufficient conditions for the invariance of a template. The first deals with the special case when all instantaneous measures are strongly secure and all permanent measures are strongly secure."}, {"heading": "7. Safety of Action Schemas for a Template", "text": "In section 6, we have established two results that guarantee the invariability of a template. (The results in this case are two) In order to be applied, both must verify that all short-term and permanent ground actions meet a safety condition and that other additional characteristics that prevent potentially dangerous simultaneous events or entanglements between actions are also applicable. As we aim to find invariants outside the line quickly and efficiently, our algorithm does not work at the level of ground actions. Instead, it is based at the raised level and uses the structure of action schemes, i.e. their conditions and effects, to decide whether the soil instances of these schemes are safe or not. Our main objective in this section is to satisfy raised versions of theories 49 and 51 and Corollary 57. Generally, we call liftable a property P of the soil actions when we give a plot when an instantiation (an instantiation) satisfies."}, {"heading": "8. Durative action schemas", "text": "We start with the analysis of the first type of characteristics that we envisage, in particular with an explicit characterization of security for permanent actions at the elevated level. We always use the following notation. In view of a permanent action scheme D\u03b1 = (\u03b1st, \u03b1st, \u03b1p, \u03b1p, \u03b1p) and a grounding function gr for D\u03b1, we place Da = gr (\u03b1p), where Da (ast, ainv) with ast = gr (\u03b1st), ainv = gr (\u03b1st), and aend = gr (\u03b1p). We also define the auxiliary action scheme DH = (ast, aend) with ast = gr (\u03b1p), ainv = gr (\u03b1p), and aend = gr (\u03b1p). We define the auxiliary action scheme DH = (\u03b1p)."}, {"heading": "9. Guess, Check and Repair Algorithm", "text": "This year is the highest in the history of the country."}, {"heading": "10. Experimental Results", "text": "Dre rf\u00fc ide eeisrrrteeGsrteeeeuirrrrrrrrrrrrrrrrrrrrr rf\u00fc ide rf\u00fc ide rf\u00fc the rf\u00fc ide eeisrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrsrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrsrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"}, {"heading": "11. Related Work", "text": "This year, it has come to the point that it will only be once before there is such a process, in which there is such a process."}, {"heading": "11.3. DISCOPLAN", "text": "In fact, most people who live in the United States also live in Germany, not only in the United States, but also in other countries where they live."}, {"heading": "12. Conclusions and Future Work", "text": "In fact, it is such that most of them will be able to move into another world, in which they are able to move, in which they move, in which they move, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they, in which they live, in which they live, in which they live."}, {"heading": "Appendix C: Proofs", "text": "The proof of Proposition 1 (ii) is applicable in s0 by definition = immediate (ii). Suppose a j is applicable in s j = 1 for j = 1,.. k, we now show that ak + 1 is applicable in s0. Note: It is not excluded from the definition of the transition function for individual actions sk = (s\\ k j = 1 E f \u2212 a j \u00b2 s. Note: From the definition of the transition function sk = (s) and ak + 1 it is applicable to a1, a2, a2 and a \u00b2 s. ak, we have that Pre + ak- and Pre \u2212 ak + 1 is applicable. Note: sn = (s\\ n) j = 1 E f \u2212 a f \u2212 n is applicable."}, {"heading": "Acknowledgements", "text": "We thank Malte Helmert, Gabriele Roger and Jussi Rintanen for providing their code for the synthesis of invariants, William Cushing for helpful discussions on the configuration of temporal actions, and Maria Fox and Derek Long for insightful discussions on the semantics of PDDL2.1. This work was supported by the Royal Holloway University of London, the Politecnico di Torino and the NASA Exploration Systems Program."}], "references": [], "referenceMentions": [], "year": 2017, "abstractText": "We present a technique for automatically extracting mutual exclusion invariants from temporal planning instances. It first identifies a set of invariant templates by inspecting the lifted representation of the domain and then checks these templates against properties that assure invariance. Our technique builds on other approaches to invariant synthesis presented in the literature, but departs from their limited focus on instantaneous actions by addressing temporal domains. To deal with time, we formulate invariance conditions that account for the entire structure of the actions and the possible concurrent interactions between them. As a result, we construct a significantly more comprehensive technique than previous methods, which is able to find not only invariants for temporal domains, but also a broader set of invariants for non-temporal domains. The experimental results reported in this paper provide evidence that identifying a broader set of invariants results in the generation of fewer multi-valued state variables with larger domains. We show that, in turn, this reduction in the number of variables reflects positively on the performance of a number of temporal planners that use a variable/value representation by significantly reducing their running time.", "creator": "LaTeX with hyperref package"}}}