{"id": "1702.04047", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Feb-2017", "title": "Constraint Answer Set Solver EZCSP and Why Integration Schemas Matter", "abstract": "Researchers in answer set programming and constraint programming have spent significant efforts in the development of hybrid languages and solving algorithms combining the strengths of these traditionally separate fields. These efforts resulted in a new research area: constraint answer set programming. Constraint answer set programming languages and systems proved to be successful at providing declarative, yet efficient solutions to problems involving hybrid reasoning tasks. One of the main contributions of this paper is the first comprehensive account of the constraint answer set language and solver EZCSP, a mainstream representative of this research area that has been used in various successful applications. We also develop an extension of the transition systems proposed by Nieuwenhuis et al. in 2006 to capture Boolean satisfiability solvers. We use this extension to describe the EZCSP algorithm and prove formal claims about it. The design and algorithmic details behind EZCSP clearly demonstrate that the development of the hybrid systems of this kind is challenging. Many questions arise when one faces various design choices in an attempt to maximize system's benefits. One of the key decisions that a developer of a hybrid solver makes is settling on a particular integration schema within its implementation. Thus, another important contribution of this paper is a thorough case study based on EZCSP, focused on the various integration schemas that it provides.", "histories": [["v1", "Tue, 14 Feb 2017 02:29:29 GMT  (3880kb,D)", "https://arxiv.org/abs/1702.04047v1", "Under consideration in Theory and Practice of Logic Programming (TPLP)"], ["v2", "Mon, 15 May 2017 22:43:03 GMT  (3880kb,D)", "http://arxiv.org/abs/1702.04047v2", "Under consideration in Theory and Practice of Logic Programming (TPLP)"]], "COMMENTS": "Under consideration in Theory and Practice of Logic Programming (TPLP)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["marcello balduccini", "yuliya lierler"], "accepted": false, "id": "1702.04047"}, "pdf": {"name": "1702.04047.pdf", "metadata": {"source": "CRF", "title": "Constraint Answer Set Solver EZCSP and Why Integration Schemas Matter", "authors": ["MARCELLO BALDUCCINI", "YULIYA LIERLER"], "emails": ["marcello.balduccini@gmail.com)", "ylierler@unomaha.edu)"], "sections": [{"heading": "1 Introduction", "text": "In recent years, it has become clear that people in the USA, in Europe, in Europe, in Europe and throughout the world have the same problems as in Europe. (...) In the USA, in Europe, in Europe, in Europe, in the EU and in the USA, in the USA, in Europe and in the USA, in the EU and in the USA, in the EU and in the USA, in the EU and in the USA, in the EU and in the USA, in the EU and in the USA, in the USA, in the EU and in the USA, in the EU and in the USA, in the EU and in the USA, in the EU and in the USA, in the EU and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA, in the USA and in the USA and in the USA, in the USA and in the USA, in the USA and in the USA and in the USA, in the USA and in the USA, in the USA and in the USA and in the USA, in the USA, in the USA and in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA and in the USA, in the USA, in the USA and in the USA and in the USA, in the USA and in the USA, in the USA and in"}, {"heading": "2 Preliminaries", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "2.1 Regular Programs", "text": "A regular (logical) program is a finite set of rules that is empty, we call such a rule and ignore the fact. We call such rules denials. We call the right side of the arrow in (1) the body. If a set of rules is empty, we call such a rule."}, {"heading": "2.2 Logic Programs with Constraint Atoms", "text": "A satisfaction constraint (CSP) is defined as a triple < X, D, C >, where X is a set of variables, D is a domain - a (possibly infinite) set of values - and C is a set of constraints. Each constraint is a pair < T, R >, where t is an n-tuple of variables and R is an n-tuple relationship to D. When looking at arithmetic constraints, it is common to replace explicit representations of relationships with arithmetic expressions. For example, for a domain of three values {1, 2} and binary relationship to R, consisting of ordered pairs (1, 2), and (3, 3) we can shorten the constraint < x, y, R > by the expression x = y."}, {"heading": "2.3 CA Programs and Weak Answer Sets", "text": "In the previous section, we introduced CA programs that capture programs that a CASP solver specifies, such as CLINGCON processes, and the EZCSP solver interprets similar programs slightly differently. To illustrate the difference, we introduce the term weak response for a CA program and discuss the differences with earlier definitions. Let P = < E, C, \u03b3, D > be a CA program and X be a series of atoms above At. < We say that X is a weak response to P when (w1) X is an answer to a set of [C] and (w2) the constraint problem < VP, D, [c) | C-sets above (C) >, (8) is an answer to a set of P when (w1) X is an evaluation of variables to group D of values. We say that a pair < X > is an extended weak response to group P when X is a response to group D of values."}, {"heading": "3 The EZCSP Language", "text": "The origins of the constraint response to the question of constraint EZCSP and its language go back to the development of an approach to integrating ASP and constraint programming, in which ASP is seen as the specification language for constraint problems (Balduccini, 2009). In this approach, (i) ASP programs are written in such a way that some of their rules and corresponding atoms found in their answers encode the desired constraint satisfaction problems; (ii) both the answers and the solutions to the constraint problems are calculated using arbitrary programs out of the box, achieved by an architecture that treats the underlying solvers as black boxes and relies on translation procedures for linking the ASP solution to constraint solvers."}, {"heading": "4 Satisfiability Modulo Theories and its Integration Schemas", "text": "It is only a matter of time before an agreement is reached."}, {"heading": "5 The EZCSP Solver", "text": "In this section we describe an algorithm for calculating response rates of CA programs. Specializing in ez programs is used in the EZCSP system. Therefore, we will first give an overview of the architecture of the EZCSP system and then describe the solution algorithm. 5.1 Architecture"}, {"heading": "Pre-processor Grounder EZCSP Solver", "text": "Figure 2 shows the architecture of the system, while the following diagram provides the essential details, both focusing on the functioning of the EZCSP system using the black box integration scheme. The first step in executing EZCSP (according to the pre-processor component in the diagram) is to start a preprocessor that translates an input EZ program into a syntactically legal ASP program by replacing the occurrence of arithmetic functions and operators in required (\u03b2) atoms with auxiliary function symbols. For example, a required atom (v > 2) is replaced by a required one (gt (v, 2). A similar process is also performed on the occurrence of arithmetic functions and operators in required (\u03b2) atoms by auxiliary function symbols. An atom that is needed (v > 2) is replaced by a required response (gt (v, 2)."}, {"heading": "5.2 Solving Algorithm", "text": "We are now ready to present our algorithms for replying to CA programs, while another part of the CASP language AC of ACSOLVER (Mellarkod et al., 2008) is covered by the CASP programs. The fact that the EZCSP system follows an all-solvers-in-one philosophy that can be combined with a variety of integration schemes makes it difficult to describe it in this way. Thus, for example, one can set up a configuration of the EZCSP response to the CLASP solution."}, {"heading": "Proof", "text": "Condition (ii) follows from (i) and the fact that KP, M = KP [B], M for each set of responses M from A [C] (and consequently for (A) [C]). Sentence 2 For a CA program P = < B, C, \u03b3, D > and a series of refusals according to At (A), if P cp results in each refusal, CA programs P and P [C] have the same set of responses."}, {"heading": "Proof", "text": "It is easy to see that (a), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), (c), c, c, c, c, c, c, c, c, c, c, c, (c), (c), c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, c, (c, c, c, c, c, c, c, c, c, c, c, c, (c, c, c, c, c, c, c, c, c, c, c, (c, c, c, c, c, c, c, c, c, c, c, c, (c, c, c, c, c, c, c, c, c, (c, c, c, c, c, c, c, c, c, c, c, c, c, (c, c, c, c, c, c, c, c, c, c,"}, {"heading": "Proof", "text": "The condition (i) results from theorem 1 and the fact that the condition (i) [2] [3] [4] [5] [5] and (6]] [6] [6] and (7]] [7] and [7]]] (7); the condition (i) follows from theorem 1 and the fact that (7) [7] and (8) [7] (8) [7] and (8) (8) (8); the condition (9) follows from theorem 1 and (8) (8); the condition (9) follows from theorem 1 and (8); the condition (8) is the condition (8); the condition (8) is the condition (8), (8) is the condition (8) and the condition (8); the condition (9) follows from theorem 1 and (8)."}, {"heading": "5.2.2 Informal account on transition rules", "text": "In fact, it is a reactionary party, but not a reactionary party, but a reactionary party that is able to establish itself."}, {"heading": "M ||\u0393||\u039b \u21d2 M ||\u0393 \u222a {R}||\u039b if P[\u0393 \u222a \u039b] entails denial R and R 6\u2208 \u0393 \u222a \u039b", "text": "Applying this rule to a state is similar to Learn's, but the learned rules are not meant by this rule. \"Applying this rule to a state is not equivalent.\" Applying this rule to a state is not equivalent to a state whose nuclear and temporal parts remain unchanged. \"The permanent part is extended by a refusal. Intuitively, the effect of this rule is such that from this point of calculation, the\" permanent \"refusal effectively becomes part of the program to be solved. This is indispensable for two reasons: first, if the learned refusal is applicable to another state, and second, if it is not applicable to another state. Similarly, due to the fact that only\" syntactic \"instances of ASP propagates are implemented in solvers, the previous statement also applies to the case where R asp-entailed.Learnt The role of the transitional rule is similar to that of Learn."}, {"heading": "Proof of Theorem 3", "text": "(a) Let's be a CA program < p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p"}, {"heading": "Proof", "text": "In fact, it is the case that we see ourselves in a position to be in, and that we are in a position to be in a position to be in, to be in a position to be. (...) In fact, it is the case that we are in a position to put ourselves in, to put ourselves in a position to be in. (...) We will be in a position to put ourselves in, to put ourselves in a position. (...) We will be in a position to be able to act on our own. (...) We will be in a position to act on our own. (...) We will be in a position to act on our own. (...) We will be in a position to take control of the world. (...) We will be in a position to save the world. (...) We will be in a position to save the world. (...) We will be in a position to save the world. (...) We will be in a position to save the world. (...) We will be in a position to save the world. (...) We will be in a position to save the world."}, {"heading": "Proof", "text": "In fact, it is such that it is an imperfect state in which most people are able to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to move, to struggle, to fight, to fight, to fight, to fight, to struggle, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to fight, to move, to move, to move"}, {"heading": "6 Application Domains", "text": "This year, it is as far as ever in the history of the city, where it is as far as never before in the history of the city."}, {"heading": "7 Experimental Results", "text": "This year it is more than ever before in the history of the city."}, {"heading": "8 A Brief Account on Related Systems", "text": "The introduction presents the approaches that are capable of solving the problems, both in terms of the way in which they occur and in terms of the way in which they occur, and in terms of the way in which they occur, as well as in terms of the way in which they occur, and in terms of the way in which they occur."}, {"heading": "9 Conclusions", "text": "This year, the time has come for us to be able to try to find a solution that is capable of finding a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution, that is able to find a solution."}, {"heading": "CALIMERI, F., IANNI, G., RICCA, F., ALVIANO, M., BRIA, A., CATALANO, G., COZZA,", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "S., FABER, W., FEBBRARO, O., LEONE, N., MANNA, M., MARTELLO, A., PANETTA, C., PERRI, S., REALE, K., SANTORO, M. C., SIRIANNI, M., TERRACINA, G., AND", "text": "VELTRI, P. 2011. The third set of solutions programming contest: Preliminary report of the system competition Track. In Proceedings of the International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR). Springer-Verlag, Berlin, Heidelberg, 388-403.CARLSSON, M. AND MILDNER, P. 2012. SICStus Prolog-the first 25 years. Theory Pract. Log. Program. 12, 1-2 (Jan.), 35-66.CAT, B. D., BOGAERTS, B., AND DENECKER, M. 2014. MiniSAT (ID) for satisfiability check and constraint solving. In ALP newsletter feautured article.DAVIS, M., LOGEMANN, G., AND LOVELAND, D. 1962. A machine program for theory testing. Communications of the ACM 5 (7), 394-397.DE MOURA, L. AND BJR\u00f8NER, N. 2008."}, {"heading": "DENECKER, M., VENNEKENS, J., BOND, S., GEBSER, M., AND TRUSZCZYN\u0301SKI, M.", "text": "The second answer was programming system competition. In Proceedings of the International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR), E. Erdem, F. Lin, and T. Schaub, Eds. Lecture Notes in Artificial Intelligence (LNCS), vol. 5753. Springer Berlin Heidelberg, Berlin, Heidelberg.DOVIER, A., FORMISANO, A., AND PONTELLI, E. 2011. Logic Programming, Knowledge Representation, and Nonmonotonic Reasoning: Essays Dedicated to Michael Gelfond on the Occasion of His 65th Birthday. Lecture Notes in Artificial Intelligence (LNCS) B. H. Chapter Perspectives on Logic-based Approaches for Reasoning, 259-279.DRESCHER SIS, C. AND WALSH, T. 2011."}, {"heading": "GEBSER, M., LIU, L., NAMASIVAYAM, G., NEUMANN, A., SCHAUB, T., AND", "text": "The first answer to this question is: \"I do not believe that we will make it.\" The second question is: \"Why?\" The second question is: \"Why?\" The third question is: \"Why?\" The third question is: \"Why?\" The third question is: \"Why?\" The third question is: \"Why?\" The third question is: \"Why?\" The third question is: \"Why?\" The third question is \"Why?\" The third question is \"Why?\" The third question is \"Why?\"? \"The third question is\" Why? \"The third question is\" Why? \"The third question is\"? \"The third question is\" Why? \"The third question is\" Why? \"The third question is\" The third question \"Why?\" The third question is \"The third question\" Why? \"The third question is\" The third question \"The third question\" Why? \"The third question? The third question is:\" The third question? The third question? The third question? The third question is: \"The third question? The third question? The third question? The third question? The third question? The third question? The third question? The third question? The third question? The third question? The third question? The third question? The third question? The third question?"}, {"heading": "MARRIOTT, K., NETHERCOTE, N., RAFEH, R., STUCKEY, P. J., GARCIA DE", "text": "In fact, it's not the first time we've found ourselves in a situation where we're able to change the world, in which we're able to change the world, and in which we're able to change the world, \"he said."}, {"heading": "Appendix A EZ \u2013 The Language of EZCSP", "text": "The EZ language aims at a common convention in logical programming. < E, A, C, E, E, D >. To achieve this, the EZ language must have a specific specification of EZ programs and programs. < EZ, FEZ, REZ > be a signature in the CEZ, VEZ, FEZ, and REZ, in which the syntax of EZ programs to constant symbols is non-constant symbols, function symbols, and relation symbols, where they are a signature, where CEZ, VEZ, FEZ, and REZ constants are symbols that are not constant symbols, and relationship symbols. Set CEZ includes symbols for integers and given constants (fd, q, r), denote CSP domains."}, {"heading": "A.1 Global Constraints in Language EZ", "text": "The global constraints supported by the EZ language include: all different (V), where V > 1 > arcs; < 1) This constraint, which exists only in the fd domain, ensures that all variables in V are assigned unique values. \u2022 Mapping (X, Y), where X and Y are lists of n variables, whose domain is 1 \u00b7 \u00b7 n. The constraint is met if for each i, j, Xi = j, if and only if Yj = i. Circuit (V), where V is a list of n variables whose domain is 1 \u00b7 n. The constraint is met. V1 = v1, V2 = v2, if the steered graph."}], "references": [{"title": "What\u2019s a head without a body? In Proceedings of the European Conference on Artificial Intelligence (ECAI\u201906)", "author": ["C. ANGER", "M. GEBSER", "T. JANHUNEN", "T. SCHAUB"], "venue": "769\u2013770.", "citeRegEx": "ANGER et al\\.,? 2006", "shortCiteRegEx": "ANGER et al\\.", "year": 2006}, {"title": "Representing constraint satisfaction problems in answer set programming", "author": ["M. BALDUCCINI"], "venue": "ICLP09 Workshop on Answer Set Programming and Other Computing Paradigms (ASPOCP09).", "citeRegEx": "BALDUCCINI,? 2009", "shortCiteRegEx": "BALDUCCINI", "year": 2009}, {"title": "Industrial-size scheduling with ASP+CP", "author": ["M. BALDUCCINI"], "venue": "11th International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR11), J. P. Delgrande and W. Faber, Eds. Lecture Notes in Artificial Intelligence (LNCS), vol. 6645. Springer Verlag, Berlin, 284\u2013296.", "citeRegEx": "BALDUCCINI,? 2011", "shortCiteRegEx": "BALDUCCINI", "year": 2011}, {"title": "Practical and methodological aspects of the use of cutting-edge ASP tools", "author": ["M. BALDUCCINI", "Y. LIERLER"], "venue": "Fourteenth International Symposium on Practical Aspects of Declarative Languages (PADL 2012), C. Russo and N.-F. Zhou, Eds. Number 7149 in Lecture Notes in Artificial Intelligence (LNCS). Springer Verlag, Berlin, 78\u201392.", "citeRegEx": "BALDUCCINI and LIERLER,? 2012", "shortCiteRegEx": "BALDUCCINI and LIERLER", "year": 2012}, {"title": "System aspmt2smt: Computing ASPMT theories by SMT solvers", "author": ["M. BARTHOLOMEW", "J. LEE"], "venue": "European Conference on Logics in Artificial Intelligence, JELIA. Springer, 529\u2013542.", "citeRegEx": "BARTHOLOMEW and LEE,? 2014", "shortCiteRegEx": "BARTHOLOMEW and LEE", "year": 2014}, {"title": "Answer set programming at a glance", "author": ["G. BREWKA", "T. EITER", "M. TRUSZCZY\u0143SKI"], "venue": "Communications of the ACM 54(12), 92\u2013103.", "citeRegEx": "BREWKA et al\\.,? 2011", "shortCiteRegEx": "BREWKA et al\\.", "year": 2011}, {"title": "External sources of knowledge and value invention in logic programming", "author": ["F. CALIMERI", "S. COZZA", "G. IANNI"], "venue": "Annals of Mathematics and Artificial Intelligence 50, 3-4, 333\u2013361.", "citeRegEx": "CALIMERI et al\\.,? 2007", "shortCiteRegEx": "CALIMERI et al\\.", "year": 2007}, {"title": "Computable functions in ASP: theory and implementation", "author": ["F. CALIMERI", "S. COZZA", "G. IANNI", "N. LEONE"], "venue": "Proceedings of International Conference on Logic Programming (ICLP). 407\u2013424.", "citeRegEx": "CALIMERI et al\\.,? 2008", "shortCiteRegEx": "CALIMERI et al\\.", "year": 2008}, {"title": "The third answer set programming competition: Preliminary report of the system competition track", "author": ["F. CALIMERI", "G. IANNI", "F. RICCA", "M. ALVIANO", "A. BRIA", "G. CATALANO", "S. COZZA", "W. FABER", "O. FEBBRARO", "N. LEONE", "M. MANNA", "A. MARTELLO", "C. PANETTA", "S. PERRI", "K. REALE", "M.C. SANTORO", "M. SIRIANNI", "G. TERRACINA", "P. VELTRI"], "venue": "Proceedings of the International Conference on", "citeRegEx": "CALIMERI et al\\.,? 2011", "shortCiteRegEx": "CALIMERI et al\\.", "year": 2011}, {"title": "SICStus Prolog-the first 25 years", "author": ["M. CARLSSON", "P. MILDNER"], "venue": "Theory Pract. Log. Program. 12, 1-2 (Jan.), 35\u201366.", "citeRegEx": "CARLSSON and MILDNER,? 2012", "shortCiteRegEx": "CARLSSON and MILDNER", "year": 2012}, {"title": "MiniSAT(ID) for satisfiability checking and constraint solving", "author": ["B.D. CAT", "B. BOGAERTS", "M. DENECKER"], "venue": "ALP newsletter feautured article.", "citeRegEx": "CAT et al\\.,? 2014", "shortCiteRegEx": "CAT et al\\.", "year": 2014}, {"title": "A machine program for theorem proving", "author": ["M. DAVIS", "G. LOGEMANN", "D. LOVELAND"], "venue": "Communications of the ACM 5(7), 394\u2013397.", "citeRegEx": "DAVIS et al\\.,? 1962", "shortCiteRegEx": "DAVIS et al\\.", "year": 1962}, {"title": "Z3: An efficient SMT solver", "author": ["L. DE MOURA", "N. BJ\u00d8RNER"], "venue": "Proceedings of the Theory and Practice of Software, 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems. 337\u2013340.", "citeRegEx": "MOURA and BJ\u00d8RNER,? 2008", "shortCiteRegEx": "MOURA and BJ\u00d8RNER", "year": 2008}, {"title": "The second answer set programming system competition", "author": ["M. DENECKER", "J. VENNEKENS", "S. BOND", "M. GEBSER", "M. TRUSZCZY\u0143SKI"], "venue": "Proceedings of the International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR), E. Erdem, F. Lin, and T. Schaub, Eds. Lecture Notes in Artificial Intelligence (LNCS), vol. 5753. Springer Berlin Heidelberg, Berlin, Heidelberg.", "citeRegEx": "DENECKER et al\\.,? 2009", "shortCiteRegEx": "DENECKER et al\\.", "year": 2009}, {"title": "Logic Programming, Knowledge Representation, and Nonmonotonic Reasoning: Essays Dedicated to Michael Gelfond on the Occasion of His 65th Birthday", "author": ["A. DOVIER", "A. FORMISANO", "E. PONTELLI"], "venue": "Lecture Notes in Artificial Intelligence (LNCS). Springer Verlag, Berlin, Chapter Perspectives on Logic-based Approaches for Reasoning, 259\u2013279.", "citeRegEx": "DOVIER et al\\.,? 2011", "shortCiteRegEx": "DOVIER et al\\.", "year": 2011}, {"title": "A translational approach to constraint answer set solving", "author": ["C. DRESCHER", "T. WALSH"], "venue": "Theory and Practice of Logic programming (TPLP) 10, 4-6, 465\u2013480.", "citeRegEx": "DRESCHER and WALSH,? 2011", "shortCiteRegEx": "DRESCHER and WALSH", "year": 2011}, {"title": "Effective preprocessing in SAT through variable and clause elimination", "author": ["N. E\u00c9N", "A. BIERE"], "venue": "SAT.", "citeRegEx": "E\u00c9N and BIERE,? 2005", "shortCiteRegEx": "E\u00c9N and BIERE", "year": 2005}, {"title": "An extensible SAT-solver", "author": ["N. E\u00c9N", "N. S\u00d6RENSSON"], "venue": "SAT.", "citeRegEx": "E\u00c9N and S\u00d6RENSSON,? 2003", "shortCiteRegEx": "E\u00c9N and S\u00d6RENSSON", "year": 2003}, {"title": "A uniform integration of higher-order reasoning and external evaluations in answer set programming", "author": ["T. EITER", "G. IANNI", "R. SCHINDLAUER", "H. TOMPITS"], "venue": "Proceedings of International Joint Conference on Artificial Intelligence (IJCAI). Professional Book Center, 90\u201396.", "citeRegEx": "EITER et al\\.,? 2005", "shortCiteRegEx": "EITER et al\\.", "year": 2005}, {"title": "Smodels with CLP and its applications: A simple and effective approach to aggregates in ASP", "author": ["I. ELKABANI", "E. PONTELLI", "SON", "T.C."], "venue": "ICLP, B. Demoen and V. Lifschitz, Eds. Lecture Notes in Computer Science, vol. 3132. Springer, 73\u201389.", "citeRegEx": "ELKABANI et al\\.,? 2004", "shortCiteRegEx": "ELKABANI et al\\.", "year": 2004}, {"title": "Weight constraints as nested expressions", "author": ["P. FERRARIS", "V. LIFSCHITZ"], "venue": "Theory and Practice of Logic Programming 5, 45\u201374.", "citeRegEx": "FERRARIS and LIFSCHITZ,? 2005", "shortCiteRegEx": "FERRARIS and LIFSCHITZ", "year": 2005}, {"title": "Conflict-driven answer set solving", "author": ["M. GEBSER", "B. KAUFMANN", "A. NEUMANN", "T. SCHAUB"], "venue": "Proceedings of 20th International Joint Conference on Artificial Intelligence (IJCAI\u201907). MIT Press, 386\u2013392.", "citeRegEx": "GEBSER et al\\.,? 2007", "shortCiteRegEx": "GEBSER et al\\.", "year": 2007}, {"title": "The first answer set programming system competition", "author": ["M. GEBSER", "L. LIU", "G. NAMASIVAYAM", "A. NEUMANN", "T. SCHAUB", "M. TRUSZCZY\u0143SKI"], "venue": "Proceedings of the International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR), C. Baral, G. Brewka, and J. Schlipf, Eds. Lecture Notes in Artificial Intelligence (LNCS), vol. 4483. Springer Berlin Heidelberg, Berlin, Heidelberg,", "citeRegEx": "GEBSER et al\\.,? 2007", "shortCiteRegEx": "GEBSER et al\\.", "year": 2007}, {"title": "Constraint answer set solving", "author": ["M. GEBSER", "M. OSTROWSKI", "T. SCHAUB"], "venue": "Proceedings of 25th International Conference on Logic Programming (ICLP), P. M. Hill and D. S. Warren, Eds. Lecture Notes in Artificial Intelligence (LNCS), vol. 5649. Springer Berlin Heidelberg, Berlin, Heidelberg, 235\u2013249.", "citeRegEx": "GEBSER et al\\.,? 2009", "shortCiteRegEx": "GEBSER et al\\.", "year": 2009}, {"title": "Gringo: A new grounder for answer set programming", "author": ["M. GEBSER", "T. SCHAUB", "S. THIELE"], "venue": "Logic Programming and Nonmonotonic Reasoning, C. Baral, G. Brewka, and J. Schlipf, Eds. Lecture Notes in Computer Science, vol. 4483. Springer Berlin Heidelberg, 266\u2013271.", "citeRegEx": "GEBSER et al\\.,? 2007", "shortCiteRegEx": "GEBSER et al\\.", "year": 2007}, {"title": "Action languages", "author": ["M. GELFOND", "V. LIFSCHITZ"], "venue": "Electronic Transactions on Artificial Intelligence 3, 195\u2013210.", "citeRegEx": "GELFOND and LIFSCHITZ,? 1998", "shortCiteRegEx": "GELFOND and LIFSCHITZ", "year": 1998}, {"title": "On the relation among answer set solvers", "author": ["E. GIUNCHIGLIA", "N. LEONE", "M. MARATEA"], "venue": "Ann. Math. Artif. Intell. 53, 1-4, 169\u2013204.", "citeRegEx": "GIUNCHIGLIA et al\\.,? 2008", "shortCiteRegEx": "GIUNCHIGLIA et al\\.", "year": 2008}, {"title": "Answer set programming based on propositional satisfiability", "author": ["E. GIUNCHIGLIA", "Y. LIERLER", "M. MARATEA"], "venue": "Journal of Automated Reasoning 36, 345\u2013377.", "citeRegEx": "GIUNCHIGLIA et al\\.,? 2006", "shortCiteRegEx": "GIUNCHIGLIA et al\\.", "year": 2006}, {"title": "Satisfiability solvers", "author": ["C.P. GOMES", "H. KAUTZ", "A. SABHARWAL", "B. SELMAN"], "venue": "Handbook of Knowledge Representation, F. van Harmelen, V. Lifschitz, and B. Porter, Eds. Elsevier, 89\u2013134.", "citeRegEx": "GOMES et al\\.,? 2008", "shortCiteRegEx": "GOMES et al\\.", "year": 2008}, {"title": "Constraint logic programming: a survey", "author": ["J. JAFFAR", "M.J. MAHER"], "venue": "The Journal of Logic Programming 1920, Supplement 1, 0, 503 \u2013 581. Special Issue: Ten Years of Logic Programming.", "citeRegEx": "JAFFAR and MAHER,? 1994", "shortCiteRegEx": "JAFFAR and MAHER", "year": 1994}, {"title": "Tight integration of non-ground answer set programming and satisfiability modulo theories", "author": ["T. JANHUNEN", "G. LIU", "I. NIEMEL"], "venue": "Working notes of the 1st Workshop on Grounding and Transformations for Theories with Variables.", "citeRegEx": "JANHUNEN et al\\.,? 2011", "shortCiteRegEx": "JANHUNEN et al\\.", "year": 2011}, {"title": "A model-theoretic counterpart of loop formulas", "author": ["LEE J."], "venue": "Proceedings of International Joint Conference on Artificial Intelligence (IJCAI). Professional Book Center, 503\u2013508.", "citeRegEx": "J.,? 2005", "shortCiteRegEx": "J.", "year": 2005}, {"title": "Relating constraint answer set programming languages and algorithms", "author": ["Y. LIERLER"], "venue": "Artificial Intelligence 207C, 1\u201322.", "citeRegEx": "LIERLER,? 2014", "shortCiteRegEx": "LIERLER", "year": 2014}, {"title": "Weightedsequence problem: ASP vs CASP and declarative vs problem oriented solving", "author": ["Y. LIERLER", "S. SMITH", "M. TRUSZCZY\u0143SKI", "A. WESTLUND"], "venue": "Proceedings of the 14th International Symposium on Practical Aspects of Declarative Languages (PADL), C. V. Russo and N.-F. Zhou, Eds. Lecture Notes in Computer Science, vol. 7149. Springer Verlag, Berlin.", "citeRegEx": "LIERLER et al\\.,? 2012", "shortCiteRegEx": "LIERLER et al\\.", "year": 2012}, {"title": "Transition systems for model generators \u2014 a unifying approach", "author": ["Y. LIERLER", "M. TRUSZCZY\u0143SKI"], "venue": "Theory and Practice of Logic Programming, 27th Int\u2019l. Conference on Logic Programming (ICLP\u201911) Special Issue 11, 4-5, 629\u2013646.", "citeRegEx": "LIERLER and TRUSZCZY\u0143SKI,? 2011", "shortCiteRegEx": "LIERLER and TRUSZCZY\u0143SKI", "year": 2011}, {"title": "Nested expressions in logic programs", "author": ["V. LIFSCHITZ", "L.R. TANG", "H. TURNER"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 369\u2013389.", "citeRegEx": "LIFSCHITZ et al\\.,? 1999", "shortCiteRegEx": "LIFSCHITZ et al\\.", "year": 1999}, {"title": "Answer set programming via mixed integer programming", "author": ["G. LIU", "T. JANHUNEN", "I. NIEMEL\u00c4"], "venue": "Principles of Knowledge Representation and Reasoning: Proceedings of the 13th International Conference. AAAI Press, 32\u201342.", "citeRegEx": "LIU et al\\.,? 2012", "shortCiteRegEx": "LIU et al\\.", "year": 2012}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V. MAREK", "M. TRUSZCZY\u0143SKI"], "venue": "The Logic Programming Paradigm: a 25-Year Perspective. Springer Verlag, 375\u2013398.", "citeRegEx": "MAREK and TRUSZCZY\u0143SKI,? 1999", "shortCiteRegEx": "MAREK and TRUSZCZY\u0143SKI", "year": 1999}, {"title": "The design of the Zinc modelling language", "author": ["K. MARRIOTT", "N. NETHERCOTE", "R. RAFEH", "P.J. STUCKEY", "M. GARCIA DE LA BANDA", "M. WALLACE"], "venue": "Constraints 13, 3 (Sept.), 229\u2013267.", "citeRegEx": "MARRIOTT et al\\.,? 2008", "shortCiteRegEx": "MARRIOTT et al\\.", "year": 2008}, {"title": "Integrating answer set programming and constraint logic programming", "author": ["V.S. MELLARKOD", "M. GELFOND", "Y. ZHANG"], "venue": "Annals of Mathematics and Artificial Intelligence 53, 1-4, 251\u2013287.", "citeRegEx": "MELLARKOD et al\\.,? 2008", "shortCiteRegEx": "MELLARKOD et al\\.", "year": 2008}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. NIEMEL\u00c4"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 241\u2013273.", "citeRegEx": "NIEMEL\u00c4,? 1999", "shortCiteRegEx": "NIEMEL\u00c4", "year": 1999}, {"title": "Extending the Smodels system with cardinality and weight constraints", "author": ["I. NIEMEL\u00c4", "P. SIMONS"], "venue": "Logic-Based Artificial Intelligence, J. Minker, Ed. Kluwer, 491\u2013521.", "citeRegEx": "NIEMEL\u00c4 and SIMONS,? 2000", "shortCiteRegEx": "NIEMEL\u00c4 and SIMONS", "year": 2000}, {"title": "Solving SAT and SAT modulo theories: From an abstract Davis-Putnam-Logemann-Loveland procedure to DPLL(T)", "author": ["R. NIEUWENHUIS", "A. OLIVERAS", "C. TINELLI"], "venue": "Journal of the ACM 53(6), 937\u2013977.", "citeRegEx": "NIEUWENHUIS et al\\.,? 2006", "shortCiteRegEx": "NIEUWENHUIS et al\\.", "year": 2006}, {"title": "Constraint programming", "author": ["F. ROSSI", "P. VAN BEEK", "T. WALSH"], "venue": "Handbook of Knowledge Representation, F. van Harmelen, V. Lifschitz, and B. Porter, Eds. Elsevier, 181\u2013212.", "citeRegEx": "ROSSI et al\\.,? 2008", "shortCiteRegEx": "ROSSI et al\\.", "year": 2008}, {"title": "Efficient constraint propagation engines", "author": ["C. SCHULTE", "P.J. STUCKEY"], "venue": "Transactions on Programming Languages and Systems .", "citeRegEx": "SCHULTE and STUCKEY,? 2008", "shortCiteRegEx": "SCHULTE and STUCKEY", "year": 2008}, {"title": "Extending and implementing the stable model semantics", "author": ["P. SIMONS", "I. NIEMEL\u00c4", "T. SOININEN"], "venue": "Artificial Intelligence 138, 181\u2013234.", "citeRegEx": "SIMONS et al\\.,? 2002", "shortCiteRegEx": "SIMONS et al\\.", "year": 2002}, {"title": "SMT-based constraint answer set solver EZSMT (system description)", "author": ["B. SUSMAN", "Y. LIERLER"], "venue": "International Conference on Logic Programming (ICLP).", "citeRegEx": "SUSMAN and LIERLER,? 2016", "shortCiteRegEx": "SUSMAN and LIERLER", "year": 2016}, {"title": "The well-founded semantics for general logic programs", "author": ["A. VAN GELDER", "K. ROSS", "J. SCHLIPF"], "venue": "Journal of ACM 38, 3, 620\u2013650.", "citeRegEx": "GELDER et al\\.,? 1991", "shortCiteRegEx": "GELDER et al\\.", "year": 1991}, {"title": "The IDP system: a model expansion system for an extension of classical logic", "author": ["J. WITTOCX", "M. MARI\u00cbN", "M. DENECKER"], "venue": "Proceedings of Workshop on Logic and Search, Computation of Structures from Declarative Descriptions (LaSh). electronic, 153\u2013165. available at https://lirias.kuleuven.be/bitstream/ 123456789/229814/1/lash08.pdf.", "citeRegEx": "WITTOCX et al\\.,? 2008", "shortCiteRegEx": "WITTOCX et al\\.", "year": 2008}, {"title": "Efficient conflict driven learning in a Boolean satisfiability solver", "author": ["L. ZHANG", "C.F. MADIGAN", "M.W. MOSKEWICZ", "S. MALIK"], "venue": "Proceedings ICCAD-01. 279\u2013285.", "citeRegEx": "ZHANG et al\\.,? 2001", "shortCiteRegEx": "ZHANG et al\\.", "year": 2001}, {"title": "The language features and architecture of B-Prolog", "author": ["ZHOU", "N.-F."], "venue": "Journal of Theory and Practice of Logic Programming (TPLP) 12, 1\u20132 (Jan), 189\u2013218. Appendix A EZ \u2013 The Language of EZCSP", "citeRegEx": "ZHOU and N..F.,? 2012", "shortCiteRegEx": "ZHOU and N..F.", "year": 2012}], "referenceMentions": [{"referenceID": 5, "context": "Such traditionally separate fields of AI as answer set programming (ASP) (Niemel\u00e4, 1999; Marek and Truszczy\u0144ski, 1999; Brewka et al., 2011), propositional satisfiability (SAT) (Gomes et al.", "startOffset": 73, "endOffset": 139}, {"referenceID": 28, "context": ", 2011), propositional satisfiability (SAT) (Gomes et al., 2008), constraint (logic) programming (CSP/CLP) (Rossi et al.", "startOffset": 44, "endOffset": 64}, {"referenceID": 43, "context": ", 2008), constraint (logic) programming (CSP/CLP) (Rossi et al., 2008; Jaffar and Maher, 1994) are all representatives of distinct directions of research in automated reasoning.", "startOffset": 50, "endOffset": 94}, {"referenceID": 29, "context": ", 2008), constraint (logic) programming (CSP/CLP) (Rossi et al., 2008; Jaffar and Maher, 1994) are all representatives of distinct directions of research in automated reasoning.", "startOffset": 50, "endOffset": 94}, {"referenceID": 29, "context": "Constraint logic programming (Jaffar and Maher, 1994), satisfiability modulo theories (SMT) (Nieuwenhuis et al.", "startOffset": 29, "endOffset": 53}, {"referenceID": 42, "context": "Constraint logic programming (Jaffar and Maher, 1994), satisfiability modulo theories (SMT) (Nieuwenhuis et al., 2006), HEX-programs (Eiter et al.", "startOffset": 92, "endOffset": 118}, {"referenceID": 18, "context": ", 2006), HEX-programs (Eiter et al., 2005), and VI-programs (Calimeri et al.", "startOffset": 22, "endOffset": 42}, {"referenceID": 6, "context": ", 2005), and VI-programs (Calimeri et al., 2007) are all examples of this current.", "startOffset": 25, "endOffset": 48}, {"referenceID": 19, "context": "Various projects have focused on the intersection of ASP and CSP/CLP, which resulted in the development of a new field of study, often called constraint answer set programming (CASP) (Elkabani et al., 2004; Mellarkod et al., 2008; Gebser et al., 2009; Balduccini, 2009; Drescher and Walsh, 2011; Lierler, 2014).", "startOffset": 183, "endOffset": 310}, {"referenceID": 39, "context": "Various projects have focused on the intersection of ASP and CSP/CLP, which resulted in the development of a new field of study, often called constraint answer set programming (CASP) (Elkabani et al., 2004; Mellarkod et al., 2008; Gebser et al., 2009; Balduccini, 2009; Drescher and Walsh, 2011; Lierler, 2014).", "startOffset": 183, "endOffset": 310}, {"referenceID": 23, "context": "Various projects have focused on the intersection of ASP and CSP/CLP, which resulted in the development of a new field of study, often called constraint answer set programming (CASP) (Elkabani et al., 2004; Mellarkod et al., 2008; Gebser et al., 2009; Balduccini, 2009; Drescher and Walsh, 2011; Lierler, 2014).", "startOffset": 183, "endOffset": 310}, {"referenceID": 1, "context": "Various projects have focused on the intersection of ASP and CSP/CLP, which resulted in the development of a new field of study, often called constraint answer set programming (CASP) (Elkabani et al., 2004; Mellarkod et al., 2008; Gebser et al., 2009; Balduccini, 2009; Drescher and Walsh, 2011; Lierler, 2014).", "startOffset": 183, "endOffset": 310}, {"referenceID": 15, "context": "Various projects have focused on the intersection of ASP and CSP/CLP, which resulted in the development of a new field of study, often called constraint answer set programming (CASP) (Elkabani et al., 2004; Mellarkod et al., 2008; Gebser et al., 2009; Balduccini, 2009; Drescher and Walsh, 2011; Lierler, 2014).", "startOffset": 183, "endOffset": 310}, {"referenceID": 32, "context": "Various projects have focused on the intersection of ASP and CSP/CLP, which resulted in the development of a new field of study, often called constraint answer set programming (CASP) (Elkabani et al., 2004; Mellarkod et al., 2008; Gebser et al., 2009; Balduccini, 2009; Drescher and Walsh, 2011; Lierler, 2014).", "startOffset": 183, "endOffset": 310}, {"referenceID": 39, "context": "This new area has already demonstrated promising results, including the development of CASP solvers ACSOLVER (Mellarkod et al., 2008), CLINGCON (Gebser et al.", "startOffset": 109, "endOffset": 133}, {"referenceID": 23, "context": ", 2008), CLINGCON (Gebser et al., 2009), EZCSP (Balduccini, 2009), IDP (Wittocx et al.", "startOffset": 18, "endOffset": 39}, {"referenceID": 1, "context": ", 2009), EZCSP (Balduccini, 2009), IDP (Wittocx et al.", "startOffset": 15, "endOffset": 33}, {"referenceID": 48, "context": ", 2009), EZCSP (Balduccini, 2009), IDP (Wittocx et al., 2008), INCA (Drescher and Walsh, 2011), DINGO (Janhunen et al.", "startOffset": 39, "endOffset": 61}, {"referenceID": 15, "context": ", 2008), INCA (Drescher and Walsh, 2011), DINGO (Janhunen et al.", "startOffset": 14, "endOffset": 40}, {"referenceID": 30, "context": ", 2008), INCA (Drescher and Walsh, 2011), DINGO (Janhunen et al., 2011), MINGO (Liu et al.", "startOffset": 48, "endOffset": 71}, {"referenceID": 36, "context": ", 2011), MINGO (Liu et al., 2012), ASPMT2SMT (Bartholomew and Lee, 2014), and EZSMT (Susman and Lierler, 2016).", "startOffset": 15, "endOffset": 33}, {"referenceID": 4, "context": ", 2012), ASPMT2SMT (Bartholomew and Lee, 2014), and EZSMT (Susman and Lierler, 2016).", "startOffset": 19, "endOffset": 46}, {"referenceID": 46, "context": ", 2012), ASPMT2SMT (Bartholomew and Lee, 2014), and EZSMT (Susman and Lierler, 2016).", "startOffset": 58, "endOffset": 84}, {"referenceID": 1, "context": ", 2009; Balduccini, 2009; Drescher and Walsh, 2011; Lierler, 2014). Constraint answer set programming allows one to combine the best of two different automated reasoning worlds: (1) the non-monotonic modeling capabilities and SAT-like solving technology of ASP and (2) constraint processing techniques for effective reasoning over non-Boolean constructs. This new area has already demonstrated promising results, including the development of CASP solvers ACSOLVER (Mellarkod et al., 2008), CLINGCON (Gebser et al., 2009), EZCSP (Balduccini, 2009), IDP (Wittocx et al., 2008), INCA (Drescher and Walsh, 2011), DINGO (Janhunen et al., 2011), MINGO (Liu et al., 2012), ASPMT2SMT (Bartholomew and Lee, 2014), and EZSMT (Susman and Lierler, 2016). CASP opens new horizons for declarative programming applications. For instance, research by Balduccini (2011) on the design of CASP language EZCSP and on the corresponding solver, which is nowadays one of the mainstream representatives of CASP systems, yielded an elegant, declarative solution to a complex industrial scheduling problem.", "startOffset": 8, "endOffset": 853}, {"referenceID": 1, "context": "The paper provides the first comprehensive account of the constraint answer set solver EZCSP (Balduccini, 2009), a long-time representative of the CASP subfield.", "startOffset": 93, "endOffset": 111}, {"referenceID": 1, "context": "The paper provides the first comprehensive account of the constraint answer set solver EZCSP (Balduccini, 2009), a long-time representative of the CASP subfield. We define the language of EZCSP and illustrate its use on several examples. We also account for algorithmic and implementation details behind EZCSP. 2. To present the EZCSP algorithm and prove formal claims about the system, we develop an extension of the transition systems proposed by Nieuwenhuis et al. (2006) for capturing SAT/SMT algorithms.", "startOffset": 94, "endOffset": 475}, {"referenceID": 1, "context": "Parts of this paper have been earlier presented at ASPOCP 2009 (Balduccini, 2009) and at PADL 2012 (Balduccini and Lierler, 2012).", "startOffset": 63, "endOffset": 81}, {"referenceID": 3, "context": "Parts of this paper have been earlier presented at ASPOCP 2009 (Balduccini, 2009) and at PADL 2012 (Balduccini and Lierler, 2012).", "startOffset": 99, "endOffset": 129}, {"referenceID": 35, "context": "This is a special case of programs with nested expressions (Lifschitz et al., 1999).", "startOffset": 59, "endOffset": 83}, {"referenceID": 35, "context": "We now restate the definition of an answer set due to Lifschitz et al. (1999) in a form convenient for our purposes.", "startOffset": 54, "endOffset": 78}, {"referenceID": 20, "context": "A choice rule construct {a} \u2190 B (Niemel\u00e4 and Simons, 2000) of the LPARSE language can be seen as an abbreviation for a rule a \u2190 not not a,B (Ferraris and Lifschitz, 2005).", "startOffset": 140, "endOffset": 170}, {"referenceID": 35, "context": "Theorem 1 (Proposition 2 from (Lifschitz et al., 1999)) For a program \u03a0, a set \u0393 of denials, and a consistent and complete set M of literals over At(\u03a0), M + is an answer set of \u03a0 \u222a \u0393 if and only if M + is an answer set of \u03a0 and M is a model of \u0393 .", "startOffset": 30, "endOffset": 54}, {"referenceID": 1, "context": "The origins of the constraint answer set solver EZCSP and of its language go back to the development of an approach for integrating ASP and constraint programming, in which ASP is viewed as a specification language for constraint satisfaction problems (Balduccini, 2009).", "startOffset": 252, "endOffset": 270}, {"referenceID": 38, "context": "The MiniZinc language (Marriott et al., 2008) is another remarkable effort toward a declarative modeling framework supported by the constraint satisfaction technology.", "startOffset": 22, "endOffset": 45}, {"referenceID": 45, "context": "SMODELS (Simons et al., 2002) SICSTUS PROLOG (Carlsson and Mildner, 2012) CLASP (Gebser et al.", "startOffset": 8, "endOffset": 29}, {"referenceID": 9, "context": ", 2002) SICSTUS PROLOG (Carlsson and Mildner, 2012) CLASP (Gebser et al.", "startOffset": 23, "endOffset": 51}, {"referenceID": 21, "context": ", 2002) SICSTUS PROLOG (Carlsson and Mildner, 2012) CLASP (Gebser et al., 2007) BPROLOG (Zhou, 2012) CMODELS (Giunchiglia et al.", "startOffset": 58, "endOffset": 79}, {"referenceID": 27, "context": ", 2007) BPROLOG (Zhou, 2012) CMODELS (Giunchiglia et al., 2006)", "startOffset": 37, "endOffset": 63}, {"referenceID": 1, "context": "2 (Balduccini, 2009) refers to black-box integration of EZCSP as lightweight integration of ASP and constraint programming.", "startOffset": 2, "endOffset": 20}, {"referenceID": 11, "context": "The Davis-Putnam-Logemann-Loveland (DPLL) procedure (Davis et al., 1962) is a backtracking-based search algorithm for deciding the satisfiability of a propositional CNF formula.", "startOffset": 52, "endOffset": 72}, {"referenceID": 44, "context": "It utilizes answer set solver CLASP as the base solver and constraint processing system GECODE (Schulte and Stuckey, 2008) as the theory solver.", "startOffset": 95, "endOffset": 122}, {"referenceID": 49, "context": "To make these integration schemas perform efficiently, learning \u2013 a sophisticated solving technique stemming from SAT (Zhang et al., 2001) \u2013 is used to capture the information (explanation)", "startOffset": 118, "endOffset": 138}, {"referenceID": 11, "context": "The Davis-Putnam-Logemann-Loveland (DPLL) procedure (Davis et al., 1962) is a backtracking-based search algorithm for deciding the satisfiability of a propositional CNF formula. DPLL-like procedures form the basis for most modern SAT solvers as well as answer set solvers. If a DPLL-like procedure underlies a base solver in the SMT and CASP tasks then it opens a door to several refinements of black-box integration. We now describe these refinements. In the black-box integration approach a base solver is invoked iteratively. Consider the SMT task: a CNF formula Fi+1 of the i + 1th iteration to a SAT solver consists of a CNF formula Fi of the i th iteration and an additional clause (or a set of clauses). Modern DPLLlike solvers commonly implement such technique as incremental solving. For instance, incremental SAT-solving allows the user to solve several SAT problems F1, . . . ,Fn one after another (using a single invocation of the solver), if Fi+1 results from Fi by adding clauses. In turn, the solution to Fi+1 may benefit from the knowledge obtained during solving F1, . . . ,Fi . Various modern SAT-solvers, including MINISAT (E\u00e9n and Biere, 2005; E\u00e9n and S\u00f6rensson, 2003), implement interfaces for incremental SAT solving. Similarly, the answer set solver CMODELS implements an interface that allows the user to solve several ASP problems \u03a01, . . . ,\u03a0n one after another, if \u03a0i+1 results from \u03a0i by adding a set of denials. It is natural to utilize incremental DPLL-like procedures for enhancing the black-box integration protocol: we call this refinement grey-box integration. In this approach, rather than invoking a base solver from scratch, an incremental interface provided by a solver is used to implement the iterative process. CASP solver EZCSP implements grey-box integration using the above mentioned incremental interface by CMODELS. Nieuwenhuis et al. (2006) also review such integration techniques used in SMT as online SAT solver and theory propagation.", "startOffset": 53, "endOffset": 1888}, {"referenceID": 21, "context": "The Grounder component of the architecture transforms the resulting program into its propositional equivalent, a regular program, using an off-the-shelf grounder such as GRINGO (Gebser et al., 2007).", "startOffset": 177, "endOffset": 198}, {"referenceID": 1, "context": "The interested reader can refer to (Balduccini, 2009) for a complete description of the translation process.", "startOffset": 35, "endOffset": 53}, {"referenceID": 23, "context": "In earlier work, Lierler (2014) demonstrated how the CASP language CLINGCON (Gebser et al., 2009) as well as the essential subset of the CASP language AC of ACSOLVER (Mellarkod et al.", "startOffset": 76, "endOffset": 97}, {"referenceID": 39, "context": ", 2009) as well as the essential subset of the CASP language AC of ACSOLVER (Mellarkod et al., 2008) are captured by CA programs.", "startOffset": 76, "endOffset": 100}, {"referenceID": 28, "context": "In earlier work, Lierler (2014) demonstrated how the CASP language CLINGCON (Gebser et al.", "startOffset": 17, "endOffset": 32}, {"referenceID": 21, "context": "In earlier work, Lierler (2014) demonstrated how the CASP language CLINGCON (Gebser et al., 2009) as well as the essential subset of the CASP language AC of ACSOLVER (Mellarkod et al., 2008) are captured by CA programs. Based on those results, the algorithm described in this section can be immediately used as an alternative to the procedures implemented in systems CLINGCON and ACSOLVER. Usually, software systems are described by means of pseudocode. The fact that EZCSP system follows an \u201call-solvers-in-one\u201d philosophy combined with a variety of integration schemas complicates the task of describing it in this way. For example, one configuration of EZCSP may invoke answer set solver CLASP via black-box integration for enumerating answer sets of an asp-abstraction of CA program, whereas another may invoke CMODELS via grey-box integration for the same task. Thus, rather than committing ourselves to a pseudocode description, we follow a path pioneered by Nieuwenhuis et al. (2006). In", "startOffset": 77, "endOffset": 991}, {"referenceID": 0, "context": "This is not an issue, however: stand alone answer set solvers have been analyzed and compared theoretically in the literature (Anger et al., 2006), (Giunchiglia et al.", "startOffset": 126, "endOffset": 146}, {"referenceID": 26, "context": ", 2006), (Giunchiglia et al., 2008) (Lierler and Truszczy\u0144ski, 2011) as well as empirically in biennial answer set programming competitions (Gebser et al.", "startOffset": 9, "endOffset": 35}, {"referenceID": 21, "context": ", 2008) (Lierler and Truszczy\u0144ski, 2011) as well as empirically in biennial answer set programming competitions (Gebser et al., 2007), (Denecker et al.", "startOffset": 112, "endOffset": 133}, {"referenceID": 13, "context": ", 2007), (Denecker et al., 2009), (Calimeri et al.", "startOffset": 9, "endOffset": 32}, {"referenceID": 8, "context": ", 2009), (Calimeri et al., 2011).", "startOffset": 9, "endOffset": 32}, {"referenceID": 21, "context": "Lierler (2014) designed a similar abstract framework that captures the EZCSP algorithm in two cases: (a) when EZCSP invokes answer set solver SMODELS via black-box integration for enumerating answer sets of aspabstraction program, and (b) when EZCSP invokes answer set solver CLASP via black-box integration.", "startOffset": 0, "endOffset": 15}, {"referenceID": 33, "context": "In this work we compare and contrast different integration schemas of hybrid solvers on three application domains that stem from various subareas of computer science: weightedsequence (Lierler et al., 2012), incremental scheduling (Balduccini, 2011), reverse folding.", "startOffset": 184, "endOffset": 206}, {"referenceID": 2, "context": ", 2012), incremental scheduling (Balduccini, 2011), reverse folding.", "startOffset": 32, "endOffset": 50}, {"referenceID": 33, "context": "The problem is not only practically relevant but proved to be hard for current ASP and CASP technology as illustrated in (Lierler et al., 2012).", "startOffset": 121, "endOffset": 143}, {"referenceID": 8, "context": "All benchmark domains are from the Third Answer Set Programming Competition \u2013 2011 (ASPCOMP) (Calimeri et al., 2011), in particular, the Model and Solve track.", "startOffset": 93, "endOffset": 116}, {"referenceID": 33, "context": "We refer the reader to (Lierler et al., 2012) for the details of pure-ASP encoding SEQ++.", "startOffset": 23, "endOffset": 45}, {"referenceID": 31, "context": "Its key features are inspired by the important industrial problem of finding an optimal join order by cost-based query optimizers in database systems. Lierler et al. (2012) provides a complete description of the problem itself as well as the formalization named SEQ++ that became the encoding used in the present paper.", "startOffset": 88, "endOffset": 173}, {"referenceID": 2, "context": "We direct the reader to (Balduccini, 2011) for more details on this domain.", "startOffset": 24, "endOffset": 42}, {"referenceID": 3, "context": "The determination is based on the technique described in (Balduccini and Lierler, 2012).", "startOffset": 57, "endOffset": 87}, {"referenceID": 14, "context": "Thus, we resorted to the encoding described in (Dovier et al., 2011).", "startOffset": 47, "endOffset": 68}, {"referenceID": 25, "context": "This encoding leverages a mapping from action language B (Gelfond and Lifschitz, 1998) statements to numerical constraints, which are then solved by a CLP system.", "startOffset": 57, "endOffset": 86}, {"referenceID": 39, "context": "In the introduction we mentioned solvers ACSOLVER (Mellarkod et al., 2008), CLINGCON (Gebser et al.", "startOffset": 50, "endOffset": 74}, {"referenceID": 23, "context": ", 2008), CLINGCON (Gebser et al., 2009), IDP (Wittocx et al.", "startOffset": 18, "endOffset": 39}, {"referenceID": 48, "context": ", 2009), IDP (Wittocx et al., 2008), INCA (Drescher and Walsh, 2011), DINGO (Janhunen et al.", "startOffset": 13, "endOffset": 35}, {"referenceID": 15, "context": ", 2008), INCA (Drescher and Walsh, 2011), DINGO (Janhunen et al.", "startOffset": 14, "endOffset": 40}, {"referenceID": 30, "context": ", 2008), INCA (Drescher and Walsh, 2011), DINGO (Janhunen et al., 2011), MINGO (Liu et al.", "startOffset": 48, "endOffset": 71}, {"referenceID": 36, "context": ", 2011), MINGO (Liu et al., 2012), ASPMT2SMT (Bartholomew and Lee, 2014), and EZSMT (Susman and Lierler, 2016).", "startOffset": 15, "endOffset": 33}, {"referenceID": 4, "context": ", 2012), ASPMT2SMT (Bartholomew and Lee, 2014), and EZSMT (Susman and Lierler, 2016).", "startOffset": 19, "endOffset": 46}, {"referenceID": 46, "context": ", 2012), ASPMT2SMT (Bartholomew and Lee, 2014), and EZSMT (Susman and Lierler, 2016).", "startOffset": 58, "endOffset": 84}, {"referenceID": 45, "context": "ACSOLVER SMODELS (Simons et al., 2002) constraint logic programming systems CLINGCON CLASP (Gebser et al.", "startOffset": 17, "endOffset": 38}, {"referenceID": 21, "context": ", 2002) constraint logic programming systems CLINGCON CLASP (Gebser et al., 2007) GECODE (Schulte and Stuckey, 2008)", "startOffset": 60, "endOffset": 81}, {"referenceID": 44, "context": ", 2007) GECODE (Schulte and Stuckey, 2008)", "startOffset": 15, "endOffset": 42}, {"referenceID": 10, "context": "IDP MINISAT(ID) (Cat et al., 2014) GECODE (Schulte and Stuckey, 2008)", "startOffset": 16, "endOffset": 34}, {"referenceID": 44, "context": ", 2014) GECODE (Schulte and Stuckey, 2008)", "startOffset": 15, "endOffset": 42}, {"referenceID": 21, "context": "INCA CLASP (Gebser et al., 2007) its own CP solver", "startOffset": 11, "endOffset": 32}, {"referenceID": 46, "context": "The EZSMT (Susman and Lierler, 2016) solver and the ASPMT2SMT (Bartholomew and Lee, 2014) solvers utilize SMT solvers to process CA programs.", "startOffset": 10, "endOffset": 36}, {"referenceID": 4, "context": "The EZSMT (Susman and Lierler, 2016) solver and the ASPMT2SMT (Bartholomew and Lee, 2014) solvers utilize SMT solvers to process CA programs.", "startOffset": 62, "endOffset": 89}, {"referenceID": 4, "context": "The EZSMT (Susman and Lierler, 2016) solver and the ASPMT2SMT (Bartholomew and Lee, 2014) solvers utilize SMT solvers to process CA programs. Both of these systems may only deal with tight programs. They allow for arbitrary integer linear constraints. None of the SMT-based CASP solvers allow for global constraints in their programs due to the underlying solving technology. Last but not least, the solver MINGO translates CA programs into mixed integer programming expressions and then utilizes IBM ILOG CPLEX system to find solutions. Susman and Lierler (2016) provide an experimental analysis of systems from all of the families mentioned.", "startOffset": 63, "endOffset": 564}, {"referenceID": 8, "context": "For the comparison, we used three challenging benchmark problems from the Third Answer Set Programming Competition \u2013 2011 (Calimeri et al., 2011).", "startOffset": 122, "endOffset": 145}], "year": 2017, "abstractText": "Researchers in answer set programming and constraint programming have spent significant efforts in the development of hybrid languages and solving algorithms combining the strengths of these traditionally separate fields. These efforts resulted in a new research area: constraint answer set programming. Constraint answer set programming languages and systems proved to be successful at providing declarative, yet efficient solutions to problems involving hybrid reasoning tasks. One of the main contributions of this paper is the first comprehensive account of the constraint answer set language and solver EZCSP, a mainstream representative of this research area that has been used in various successful applications. We also develop an extension of the transition systems proposed by Nieuwenhuis et al. in 2006 to capture Boolean satisfiability solvers. We use this extension to describe the EZCSP algorithm and prove formal claims about it. The design and algorithmic details behind EZCSP clearly demonstrate that the development of the hybrid systems of this kind is challenging. Many questions arise when one faces various design choices in an attempt to maximize system\u2019s benefits. One of the key decisions that a developer of a hybrid solver makes is settling on a particular integration schema within its implementation. Thus, another important contribution of this paper is a thorough case study based on EZCSP, focused on the various integration schemas that it provides. Under consideration in Theory and Practice of Logic Programming (TPLP).", "creator": "LaTeX with hyperref package"}}}