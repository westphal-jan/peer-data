{"id": "1702.06334", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "21-Feb-2017", "title": "Synthesizing Imperative Programs from Examples Guided by Static Analysis", "abstract": "We present a novel algorithm that synthesizes imperative programs for introductory programming courses. Given a set of input-output examples and a partial program, our algorithm generates a complete program that is consistent with every example. Our key idea is to combine enumerative program synthesis and static analysis, which aggressively prunes out a large search space while guaranteeing to find, if any, a correct solution. We have implemented our algorithm in a tool, called SIMPL, and evaluated it on 30 problems used in introductory programming courses. The results show that SIMPL is able to solve the benchmark problems in 6.6 seconds on average.", "histories": [["v1", "Tue, 21 Feb 2017 11:29:28 GMT  (35kb)", "https://arxiv.org/abs/1702.06334v1", null], ["v2", "Tue, 13 Jun 2017 09:13:33 GMT  (35kb)", "http://arxiv.org/abs/1702.06334v2", "The paper is accepted in Static Analysis Symposium (SAS) '17. The submission version is somewhat different from the version in arxiv. The final version will be uploaded after the camera-ready version is ready"]], "reviews": [], "SUBJECTS": "cs.PL cs.AI", "authors": ["sunbeom so", "hakjoo oh"], "accepted": false, "id": "1702.06334"}, "pdf": {"name": "1702.06334.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["so@korea.ac.kr", "oh@korea.ac.kr"], "sections": [{"heading": null, "text": "ar Xiv: 170 2.06 334v 2 [cs.P L] 13 Jun 20"}, {"heading": "1 Introduction", "text": "Our long-term goal is to build an intelligent tutorial system that helps students improve their programming skills. Our experience in introductory programming courses is that students learning programming for the first time often struggle to solve programming problems for themselves. Manually providing instructions simply does not scale for the ever-increasing number of students. To make matters worse, even teachers sometimes make mistakes and shy students are reluctant to ask questions. Motivated by this experience, we strive to build an automatic system that helps students improve their skills without human teachers. In this paper, we present a key component of the system that automatically generates complete programs from incomplete programs. Entries from the algorithm are a subprogram with limitations on variables and constants that specify the behavior of the program."}, {"heading": "2 Showcase", "text": "In this section, we present SIMPL with four programming problems that most beginners find difficult; < r = > r = > r To use SIMPL, students must provide (1) a subprogram, (2) a set of input-output examples, and (3) resources that SIMPL can use. Resources consist of a set of integer variables and a set of array variables. SIMPL's goal is to complete the subprogram. r.t. The input-output-output examples that use only the given resources. Problem 1 (Reverse integers) The first problem is to write a function that reverts a given integer variable. For example, the specified integer function should return 21."}, {"heading": "3 Problem Definition", "text": "The syntax of the language is defined by the following grammar}, {"heading": "4 Synthesis Algorithm", "text": "In this section we present our synthesis algorithm, which combines enumerative search with static analysis."}, {"heading": "4.1 Synthesis as State-Search", "text": "Let us first reduce the synthesis problem to a problem of state search. Let us consider a synthesis problem ((x, c, y), E, \u0442, Xi, Xa). The corresponding search problem is defined by the transition system (S, \u2192, s0, F), where S is a series of states, (\u2192) S \u00b7 S is a transition relationship, s0, S is a starting state and F S is a series of solution states. Algorithm 1 Synthesis algorithm Input: A synthesis problem ((((x, c0, r), E,, Xi, Xa) Output: A complete program in accordance with E 1: W \u00b2 2: Repeat 3: Select the smallest state from W 4: If s is a final state, then 5: if solution (s) then returns 6: otherwise 7: if \u00ac prune (s) then W \u00b2 s further (s)."}, {"heading": "4.2 Baseline Search Algorithm", "text": "The algorithm 1 shows the basic architecture of our enumerative search algorithm. The algorithm initializes the workset W with c0 (line 1), then selects a state s with the smallest size and removes the state from the workset (line 3). If the pruning fails, the next states of s are included in the workset and the loop repeats. Details of our pruning technique are described in Section 4.3. At the moment, the algorithm assumes that pruning always fails. The basic algorithm implicitly performs two well-known optimization techniques. First, it maintains previously researched states and never looks at them again. Second, it normalizes states so that semantically equivalent programs are also synchronously the same expressions."}, {"heading": "4.3 Pruning with Static Analysis", "text": "Static analysis allows us to identify states that are ultimately not a solution. We first define the concept of failure. (Definition 1) A state is a failure state that is called a failure state. (Definition 1) Our goal is to detect as many failure states as possible. We observed two typical cases of failure states that often show up during the search for an algorithm. (Example 1) Consider the program in Figure 4 (a) and the input output example (1). If the program is executed with n = 1, it does not matter how the hole is executed, the output value r is no less than 2 in the return statement."}, {"heading": "5 Evaluation", "text": "Experimental Setup To evaluate our synthesis algorithm, we have compiled 30 introductory problems from several online forums (Table 1).2 The problems consist of integer and array manipulation tasks. Some problems are not trivial for beginners; they require students to come up with different control structures such as nested loops and combinations of loops and conditional statements; the subprograms we use are similar to those in Section 2; they have a Boolean expression hole and one or two command holes (); for each benchmark, we report the number of integer variables (IVars), array variables (AVars), integer constants (Ints) and examples (Exs) that are provided; all benchmark problems are publicly available with our tool. Experiments were conducted on MacBook Pro with Intel Core i7 and 16GB of memory."}, {"heading": "6 Related Work", "text": "Thus, the technology has been used in automatic problem generation, and the automatic solution finding is able to use the programs for automatic programming, in the way in which they were executed, in the time in which they were executed, in the way in which they were executed, in the way in which they were executed, in the way in which they were executed, in the way in which they were executed, in the way in which they were executed."}, {"heading": "7 Conclusion", "text": "In this paper we have shown that the combination of enumerative synthesis and static analysis is a promising method for synthesis of introductory imperative programs. Enumerative search allows us to find the smallest possible program, i.e. general program, while semantic static analysis speeds up the process dramaturgically in a safe way. We have demonstrated the effectiveness of 30 real-world programming problems collected in online forums."}], "references": [{"title": "a system to debug student programs", "author": ["Anne Adam", "Jean-Pierre Laurent. Laura"], "venue": "Artificial Intelligence, 15(1-2), November", "citeRegEx": "Adam and Laurent. 1980", "shortCiteRegEx": null, "year": 1980}, {"title": "Automatically generating problems and solutions for natural deduction", "author": ["Umair Z. Ahmed", "Sumit Gulwani", "Amey Karkare"], "venue": "IJCAI,", "citeRegEx": "Ahmed et al.. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Compilers: Principles", "author": ["Alfred V. Aho", "Ravi Sethi", "Jeffrey D. Ullman"], "venue": "Techniques, and Tools. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA,", "citeRegEx": "Aho et al.. 1986", "shortCiteRegEx": null, "year": 1986}, {"title": "Recursive program synthesis", "author": ["Aws Albarghouthi", "Sumit Gulwani", "Zachary Kincaid"], "venue": "CAV,", "citeRegEx": "Albarghouthi et al.. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Loris D\u2019Antoni", "author": ["Rajeev Alur"], "venue": "Sumit Gulwani, Dileep Kini, and Mahesh Viswanathan. Automated grading of dfa constructions. In IJCAI,", "citeRegEx": "Alur et al.. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Synthesis of geometry proof problems", "author": ["Chris Alvin", "Sumit Gulwani", "Rupak Majumdar", "Supratik Mukhopadhyay"], "venue": "AAAI,", "citeRegEx": "Alvin et al.. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints", "author": ["Patrick Cousot", "Radhia Cousot"], "venue": "POPL,", "citeRegEx": "Cousot and Cousot. 1977", "shortCiteRegEx": null, "year": 1977}, {"title": "An interactive computer-based tutor for lisp", "author": ["Robert G. Farrell", "John R. Anderson", "Brian J. Reiser"], "venue": "AAAI,", "citeRegEx": "Farrell et al.. 1984", "shortCiteRegEx": null, "year": 1984}, {"title": "Synthesizing data structure transformations from input-output examples", "author": ["John K. Feser", "Swarat Chaudhuri", "Isil Dillig"], "venue": "PLDI,", "citeRegEx": "Feser et al.. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Exampledirected synthesis: A type-theoretic interpretation", "author": ["Jonathan Frankle", "Peter-Michael Osera", "David Walker", "Steve Zdancewic"], "venue": "POPL,", "citeRegEx": "Frankle et al.. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Synthesizing geometry constructions", "author": ["Sumit Gulwani", "Vijay Anand Korthikanti", "Ashish Tiwari"], "venue": "PLDI,", "citeRegEx": "Gulwani et al.. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "Feedback generation for performance problems in introductory programming assignments", "author": ["Sumit Gulwani", "Ivan Radi\u010dek", "Florian Zuleger"], "venue": "FSE,", "citeRegEx": "Gulwani et al.. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Automating string processing in spreadsheets using input-output examples", "author": ["Sumit Gulwani"], "venue": "POPL,", "citeRegEx": "Gulwani. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "Proust: Knowledge-based program understanding", "author": ["W. Lewis Johnson", "Elliot Soloway"], "venue": "ICSE,", "citeRegEx": "Johnson and Soloway. 1984", "shortCiteRegEx": null, "year": 1984}, {"title": "Semisupervised verified feedback generation", "author": ["Shalini Kaleeswaran", "Anirudh Santhiar", "Aditya Kanade", "Sumit Gulwani"], "venue": "FSE,", "citeRegEx": "Kaleeswaran et al.. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Apex: Automatic programming assignment error explanation", "author": ["Dohyeong Kim", "Yonghwi Kwon", "Peng Liu", "I. Luk Kim", "DavidMitchel Perry", "Xiangyu Zhang", "Gustavo Rodriguez-Rivera"], "venue": "OOPSLA,", "citeRegEx": "Kim et al.. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "Flashnormalize: Programming by examples for text normalization", "author": ["Dileep Kini", "Sumit Gulwani"], "venue": "IJCAI,", "citeRegEx": "Kini and Gulwani. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Flashextract: A framework for data extraction by examples", "author": ["Vu Le", "Sumit Gulwani"], "venue": "PLDI,", "citeRegEx": "Le and Gulwani. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Integrating programming by example and natural language programming", "author": ["Mehdi Manshadi", "Daniel Gildea", "James Allen"], "venue": "AAAI,", "citeRegEx": "Manshadi et al.. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Automatic Program DeBugging for Intelligent Tutoring Systems", "author": ["William R. Murray"], "venue": "Morgan Kaufmann Publishers Inc.,", "citeRegEx": "Murray. 1989", "shortCiteRegEx": null, "year": 1989}, {"title": "Type-and-example-directed program synthesis", "author": ["Peter-Michael Osera", "Steve Zdancewic"], "venue": "PLDI,", "citeRegEx": "Osera and Zdancewic. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Eleanor O\u2019Rourke", "author": ["Oleksandr Polozov"], "venue": "Adam M. Smith, Luke Zettlemoyer, Sumit Gulwani, and Zoran Popovic. Personalized mathematical word problem generation. In IJCAI,", "citeRegEx": "Polozov et al.. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Programming by example using least general generalizations", "author": ["Mohammad Raza", "Sumit Gulwani", "Natasa Milic-Frayling"], "venue": "AAAI,", "citeRegEx": "Raza et al.. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Compositional program synthesis from natural language and examples", "author": ["Mohammad Raza", "Sumit Gulwani", "Natasa Milic-Frayling"], "venue": "IJCAI,", "citeRegEx": "Raza et al.. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Synthesizing number transformations from inputoutput examples", "author": ["Rishabh Singh", "Sumit Gulwani"], "venue": "CAV,", "citeRegEx": "Singh and Gulwani. 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Automatically generating algebra problems", "author": ["Rohit Singh", "Sumit Gulwani", "Sriram Rajamani"], "venue": "AAAI,", "citeRegEx": "Singh et al.. 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Automated feedback generation for introductory programming assignments", "author": ["Rishabh Singh", "Sumit Gulwani", "Armando Solar-Lezama"], "venue": "PLDI,", "citeRegEx": "Singh et al.. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Meno-ii: An intelligent tutoring system for novice programmers", "author": ["Elliot M. Soloway", "Beverly Woolf", "Eric Rubin", "Paul Barth"], "venue": "IJCAI. Morgan Kaufmann Publishers Inc.,", "citeRegEx": "Soloway et al.. 1981", "shortCiteRegEx": null, "year": 1981}, {"title": "An iterative approach to synthesize data transformation programs", "author": ["Bo Wu", "Craig A. Knoblock"], "venue": "IJCAI,", "citeRegEx": "Wu and Knoblock. 2015", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 2, "context": "To do so, we use four code optimization techniques: constant propagation, copy propagation, dead code elimination, and expression simplification [Aho et al., 1986].", "startOffset": 145, "endOffset": 163}, {"referenceID": 6, "context": "The domain of intervals is standard [Cousot and Cousot, 1977]:", "startOffset": 36, "endOffset": 61}, {"referenceID": 6, "context": "We use the standard widening operator in [Cousot and Cousot, 1977].", "startOffset": 41, "endOffset": 66}, {"referenceID": 25, "context": "For instance, the technology has been used in automatic problem generation [Singh et al., 2012; Ahmed et al., 2013; Alvin et al., 2014; Polozov et al., 2015], automatic grading [Alur et al.", "startOffset": 75, "endOffset": 157}, {"referenceID": 1, "context": "For instance, the technology has been used in automatic problem generation [Singh et al., 2012; Ahmed et al., 2013; Alvin et al., 2014; Polozov et al., 2015], automatic grading [Alur et al.", "startOffset": 75, "endOffset": 157}, {"referenceID": 5, "context": "For instance, the technology has been used in automatic problem generation [Singh et al., 2012; Ahmed et al., 2013; Alvin et al., 2014; Polozov et al., 2015], automatic grading [Alur et al.", "startOffset": 75, "endOffset": 157}, {"referenceID": 21, "context": "For instance, the technology has been used in automatic problem generation [Singh et al., 2012; Ahmed et al., 2013; Alvin et al., 2014; Polozov et al., 2015], automatic grading [Alur et al.", "startOffset": 75, "endOffset": 157}, {"referenceID": 4, "context": ", 2015], automatic grading [Alur et al., 2013], and automatic solution generation [Gulwani et al.", "startOffset": 27, "endOffset": 46}, {"referenceID": 10, "context": ", 2013], and automatic solution generation [Gulwani et al., 2011].", "startOffset": 43, "endOffset": 65}, {"referenceID": 0, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 27, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 7, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 13, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 19, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 26, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 11, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 14, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 15, "context": "A large amount of work has been done to automate programming education [Adam and Laurent, 1980; Soloway et al., 1981; Farrell et al., 1984; Johnson and Soloway, 1984; Murray, 1989; Singh et al., 2013; Gulwani et al., 2014; Kaleeswaran et al., 2016; Kim et al., 2016], which focuses", "startOffset": 71, "endOffset": 266}, {"referenceID": 26, "context": "For example, the system in [Singh et al., 2013] needs a correct implementation and a set of correction rules manually designed by the instructor.", "startOffset": 27, "endOffset": 47}, {"referenceID": 7, "context": "An exception is [Farrell et al., 1984], where an automatic LISP feedback system is presented.", "startOffset": 16, "endOffset": 38}, {"referenceID": 12, "context": "Most of the PBE approaches focus on domain-specific languages for string transformation [Gulwani, 2011; Kini and Gulwani, 2015; Raza et al., 2015; Manshadi et al., 2013; Wu and Knoblock, 2015], number transformation [Singh and Gulwani, 2012], XML transformation [Raza et al.", "startOffset": 88, "endOffset": 192}, {"referenceID": 16, "context": "Most of the PBE approaches focus on domain-specific languages for string transformation [Gulwani, 2011; Kini and Gulwani, 2015; Raza et al., 2015; Manshadi et al., 2013; Wu and Knoblock, 2015], number transformation [Singh and Gulwani, 2012], XML transformation [Raza et al.", "startOffset": 88, "endOffset": 192}, {"referenceID": 23, "context": "Most of the PBE approaches focus on domain-specific languages for string transformation [Gulwani, 2011; Kini and Gulwani, 2015; Raza et al., 2015; Manshadi et al., 2013; Wu and Knoblock, 2015], number transformation [Singh and Gulwani, 2012], XML transformation [Raza et al.", "startOffset": 88, "endOffset": 192}, {"referenceID": 18, "context": "Most of the PBE approaches focus on domain-specific languages for string transformation [Gulwani, 2011; Kini and Gulwani, 2015; Raza et al., 2015; Manshadi et al., 2013; Wu and Knoblock, 2015], number transformation [Singh and Gulwani, 2012], XML transformation [Raza et al.", "startOffset": 88, "endOffset": 192}, {"referenceID": 28, "context": "Most of the PBE approaches focus on domain-specific languages for string transformation [Gulwani, 2011; Kini and Gulwani, 2015; Raza et al., 2015; Manshadi et al., 2013; Wu and Knoblock, 2015], number transformation [Singh and Gulwani, 2012], XML transformation [Raza et al.", "startOffset": 88, "endOffset": 192}, {"referenceID": 24, "context": ", 2013; Wu and Knoblock, 2015], number transformation [Singh and Gulwani, 2012], XML transformation [Raza et al.", "startOffset": 54, "endOffset": 79}, {"referenceID": 22, "context": ", 2013; Wu and Knoblock, 2015], number transformation [Singh and Gulwani, 2012], XML transformation [Raza et al., 2014], and extracting relational data [Le and Gulwani, 2014], etc.", "startOffset": 100, "endOffset": 119}, {"referenceID": 17, "context": ", 2014], and extracting relational data [Le and Gulwani, 2014], etc.", "startOffset": 40, "endOffset": 62}, {"referenceID": 3, "context": "Several others have studied synthesis of functional programs [Albarghouthi et al., 2013; Osera and Zdancewic, 2015; Frankle et al., 2016].", "startOffset": 61, "endOffset": 137}, {"referenceID": 20, "context": "Several others have studied synthesis of functional programs [Albarghouthi et al., 2013; Osera and Zdancewic, 2015; Frankle et al., 2016].", "startOffset": 61, "endOffset": 137}, {"referenceID": 9, "context": "Several others have studied synthesis of functional programs [Albarghouthi et al., 2013; Osera and Zdancewic, 2015; Frankle et al., 2016].", "startOffset": 61, "endOffset": 137}, {"referenceID": 20, "context": "Existing enumerative synthesis technology used pruning techniques such as type systems [Osera and Zdancewic, 2015; Frankle et al., 2016] and deductions [Feser et al.", "startOffset": 87, "endOffset": 136}, {"referenceID": 9, "context": "Existing enumerative synthesis technology used pruning techniques such as type systems [Osera and Zdancewic, 2015; Frankle et al., 2016] and deductions [Feser et al.", "startOffset": 87, "endOffset": 136}, {"referenceID": 8, "context": ", 2016] and deductions [Feser et al., 2015], which are not applicable to our setting.", "startOffset": 23, "endOffset": 43}], "year": 2017, "abstractText": "We present a novel algorithm that synthesizes imperative programs for introductory programming courses. Given a set of input-output examples and a partial program, our algorithm generates a complete program that is consistent with every example. Our key idea is to combine enumerative program synthesis and static analysis, which aggressively prunes out a large search space while guaranteeing to find, if any, a correct solution. We have implemented our algorithm in a tool, called SIMPL, and evaluated it on 30 problems used in introductory programming courses. The results show that SIMPL is able to solve the benchmark problems in 6.6 seconds on average.", "creator": "LaTeX with hyperref package"}}}