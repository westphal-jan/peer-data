{"id": "1702.08441", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Feb-2017", "title": "Monte Carlo Action Programming", "abstract": "This paper proposes Monte Carlo Action Programming, a programming language framework for autonomous systems that act in large probabilistic state spaces with high branching factors. It comprises formal syntax and semantics of a nondeterministic action programming language. The language is interpreted stochastically via Monte Carlo Tree Search. Effectiveness of the approach is shown empirically.", "histories": [["v1", "Sat, 25 Feb 2017 11:48:50 GMT  (691kb,D)", "http://arxiv.org/abs/1702.08441v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.PL", "authors": ["lenz belzner"], "accepted": false, "id": "1702.08441"}, "pdf": {"name": "1702.08441.pdf", "metadata": {"source": "CRF", "title": "Monte Carlo Action Programming", "authors": ["Lenz Belzner"], "emails": [], "sections": [{"heading": null, "text": "Keywords: Online Planning, Action Programming, MCTS"}, {"heading": "1 Introduction", "text": "This paper introduces Monte Carlo Action Programming (MCAP) to reduce the cardinality of the search space by specifying heuristic knowledge in the form of non-deterministic programs. In this paper, Monte Carlo Action Programming (MCAP) introduces Monte Carlo Action Programming (MCAP) to reduce the cardinality of the search space by specifying heuristic knowledge in the form of non-deterministic programs. Additional challenges to system design are the occurrence of unexpected events and / or changing goals at runtime. A state-of-the-art candidate for answering this challenge is behavioral synthesis with online planning [1,2,3]. Here, a planning agent evaluates possible behavioral decisions at runtime."}, {"heading": "2 Related Work", "text": "We discuss Monte Carlo Tree Search briefly in Section 2.1 and Action Programming in Section 2.2."}, {"heading": "2.1 Monte Carlo Tree Search", "text": "Monte Carlo Tree Search (MCTS) is a framework for statistical searches in very large state spaces with high branching factors, based on a generative model of the domain (i.e. a simulation). It performs well even without heuristic evaluation of intermediate states in the search space. The MCTS framework arose from research in the Go computer [4,5]. The game Go releases the aforementioned characteristics. Also, not many good heuristics for Go are known. Nevertheless, specialized Go programs based on the MCTS algorithm are able to play at the level of a human professional actor [6]. MCTS is often used in autonomous planning [2,3] and has been successfully applied to a huge number of other search tasks. MCTS adds nodes iteratively to the tree. Nodes represent states and store metadata via search paths that pass through them."}, {"heading": "2.2 Action Programming", "text": "Non-deterministic action programs define outlines of system behavior that are interpreted at runtime, so that the system can make precisely defined decisions at runtime. Interpretation of an action program typically provides a measure of the quality of certain instances of these sketches. Concrete traces are then executed for this quality metric. Well-established action program languages are Golog [7,8] and Flux [9]. Each of these languages is interpreted according to a specific formal specification of domain dynamics: Situational calculation and flow calculation deal with the specification of action effects and domain dynamics in first-order logic [10,11]. Prolog interpreters have been implemented for both Golog and Flux. The MCAP framework differs from these formalisms and their respective languages: (a) MCAP does not offer a specific formal representation of domain dynamics and does not require a specific search for these CAP forms. Rather, each form varies from the domain dynamics of the respective languages."}, {"heading": "3 Monte Carlo Action Programming", "text": "This section introduces Monte Carlo Action Programming (MCAP), a non-deterministic procedural programming framework for autonomous systems. The basic idea of the MCAP framework is to define behavioural patterns that leave decisions to an actor. An MCAP is a non-deterministic program. MCAP programs are interpreted probabilistically by MCTS. MCAPs limit the MCTS search space w.r.t. a procedural non-deterministic program."}, {"heading": "3.1 Framework Parameters", "text": "The MCAP framework requires the following specifications.1. A generative domain model that captures the probability distribution of successor states vis-\u00e0-vis the current state and actions taken (Equation 1).The model does not need to be explicit.2. A reward function R that encodes the quality of a state versus system objectives (Equation 3).R: S \u2192 R (3) 3. A discounting factor \u03b3 [0; 1] weights the impact of potential future decisions on the current situation. A discounting factor of zero means that only direct consequences of action are taken into consideration. A discounting factor of one means that all future consequences affect the current decision equally, regardless of their temporal distance. 4. A maximum search depth hmax."}, {"heading": "3.2 Syntax", "text": "Equation 4 defines the syntax of the MCAP language. is the empty program, A denotes the specified action space (see Eq.23).? is a sequential operator, + is a non-deterministic choice, but stands for interleaving concurrency. Q denotes the query space for conditional evaluation (see Eq.23).? denotes the query of the current execution context. \"We define a conditional loop.\" Each program in its normal form consists of a selection of programs with an action prefix and an arbitrary tail program. Norm: = 1 (A); P) (5) Equations 6 to 13 define a term reduction system that ensures the conversion of programs into their normal form.; p = p = p (6) p + p = p (7) (aaaaaaaaaaaaaaaaaaaaaaaaaaaP1; p (5) equations 6 to 13 define a normal form of terms that ensures their conversion into the program."}, {"heading": "3.3 Semantics", "text": "The goal is to accumulate information on computation tracks that allow further searching. Aggregated data are visitor and node values (Eq.16) VS S \u00b7 2VA (14) S \u00b7 2VA (14) S \u00b7 2VA (14) S \u00b7 2VS (14) S \u00b7 2VS (14) S \u00b7 2VS \u00b7 P (15) D N \u00b7 R (16) While it is possible to use a DAG instead of a tree, we focus on tree planting in this paper for the sake of simplicity."}, {"heading": "4 Experimental Evaluation", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.1 Example Domain", "text": "The number of victims a robot can carry is limited by its capacity. A position can catch fire, in which case a robot cannot move there. At each step, the fire attribute of a position may change depending on how many of the neighbors of the position are on fire. Possible system actions are: 1. Move (R, P): Robot R moves to the target position P if it is connected to the current position of the robot and not on fire. 2. Extinguish (R, P): Robot R extinguishes fire at a neighboring position P. 3. Lift vs Moothate (R, V): Robot R lifts victim V (at the same location) if it is not on fire. 2. Extinguish (R, P): Robot R extinguishes fire at a neighboring position P. 3. Lift vs Moothate: null vs Moothate."}, {"heading": "4.2 Setup & Results", "text": "This year, the number of job-related redundancies has tripled compared to the previous year, tripling the number of job-related redundancies in the first six months of the current year."}, {"heading": "5 Conclusion", "text": "In this paper, Monte Carlo Action Programming was proposed, a programming language framework for autonomous systems operating in large probable states, encompassing formal syntax and semantics of a non-deterministic programming language, which is interpreted stochastically via Monte Carlo Tree Search. The effectiveness of specifying search space constraints in the MCAP framework has been empirically demonstrated, and the online interpretation of MCAP provides system performance and robustness in the face of unexpected events. A possible venue for further research is the extension of MCAP to domains with continuous time and hybrid systems, interpreting discrete programs with continuously evolving domain values [17]. It would also be interesting to assess the extent to which manual specification techniques such as MCAP could be combined with online imaging learning (e.g. static relational learning [18] and deep learning [19]): How can system behavior be constrained if the timing is not known to change at a probable point in time?"}], "references": [{"title": "A survey of Monte Carlo tree search methods", "author": ["C.B. Browne", "E. Powley", "D. Whitehouse", "S.M. Lucas", "P.I. Cowling", "P. Rohlfshagen", "S. Tavener", "D. Perez", "S. Samothrakis", "S. Colton"], "venue": "IEEE Transactions on Computational Intelligence and AI in Games 4(1)", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Trial-based Heuristic Tree Search for Finite Horizon MDPs", "author": ["T. Keller", "M. Helmert"], "venue": "Proceedings of the 23rd International Conference on Automated Planning and Scheduling (ICAPS 2013), AAAI Press", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2013}, {"title": "Reverse iterative deepening for finite-horizon mdps with large branching factors", "author": ["A. Kolobov", "P. Dai", "M. Mausam", "D.S. Weld"], "venue": "Proceedings of the 22nd International Conference on Automated Planning and Scheduling, ICAPS.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Monte-carlo tree search in production management problems", "author": ["G. Chaslot", "S. De Jong", "J.T. Saito", "J. Uiterwijk"], "venue": "Proceedings of the 18th BeNeLux Conference on Artificial Intelligence, Citeseer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2006}, {"title": "Temporal-difference search in computer go", "author": ["D. Silver", "R.S. Sutton", "M. M\u00fcller"], "venue": "In Borrajo, D., Kambhampati, S., Oddi, A., Fratini, S., eds.: Proceedings of the Twenty-Third International Conference on Automated Planning and Scheduling, ICAPS 2013, Rome, Italy, June 10-14, 2013, AAAI", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "The grand challenge of computer go: Monte carlo tree search and extensions", "author": ["S. Gelly", "L. Kocsis", "M. Schoenauer", "M. Sebag", "D. Silver", "C. Szepesv\u00e1ri", "O. Teytaud"], "venue": "Commun. ACM 55(3)", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "Congolog, a concurrent programming language based on the situation calculus", "author": ["G. De Giacomo", "Y. Lesp\u00e9rance", "H.J. Levesque"], "venue": "Artificial Intelligence 121(1)", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2000}, {"title": "Indigolog: A high-level programming language for embedded reasoning agents", "author": ["G. Giacomo", "Y. Lesp\u00e9rance", "H.J. Levesque", "S. Sardina"], "venue": "In El Fallah Seghrouchni, A., Dix, J., Dastani, M., Bordini, R.H., eds.: Multi-Agent Programming:. Springer US", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2009}, {"title": "Flux: A logic programming method for reasoning agents", "author": ["M. Thielscher"], "venue": "Theory and Practice of Logic Programming (TPLP) 5(4-5)", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2005}, {"title": "Decision-theoretic, high-level agent programming in the situation calculus", "author": ["C. Boutilier", "R. Reiter", "M. Soutchanski", "S Thrun"], "venue": "AAAI/IAAI.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2000}, {"title": "Introduction to the fluent calculus", "author": ["M. Thielscher"], "venue": "Electron. Trans. Artif. Intell. 2", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1998}, {"title": "Ucd: Upper confidence bound for rooted directed acyclic graphs", "author": ["A. Saffidine", "T. Cazenave", "J. M\u00e9hat"], "venue": "Knowledge-Based Systems 34", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2012}, {"title": "Bandit based monte-carlo planning", "author": ["L. Kocsis", "C. Szepesv\u00e1ri"], "venue": "Machine Learning: ECML 2006. Springer", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2006}, {"title": "Finite-time analysis of the multiarmed bandit problem", "author": ["P. Auer", "N. Cesa-Bianchi", "P. Fischer"], "venue": "Machine learning 47(2-3)", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2002}, {"title": "Dynamic Programming", "author": ["R. Bellman"], "venue": "Princeton University Press, Princeton, NJ, USA", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1957}, {"title": "Multivesta: Statistical model checking for discrete event simulators", "author": ["S. Sebastio", "A. Vandin"], "venue": "Proceedings of the 7th International Conference on Performance Evaluation Methodologies and Tools, ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering)", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2013}, {"title": "The algorithmic analysis of hybrid systems", "author": ["R. Alur", "C. Courcoubetis", "N. Halbwachs", "T.A. Henzinger", "P.H. Ho", "X. Nicollin", "A. Olivero", "J. Sifakis", "S. Yovine"], "venue": "Theoretical computer science 138(1)", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1995}, {"title": "Introduction to statistical relational learning", "author": ["L. Getoor"], "venue": "MIT press", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2007}, {"title": "A fast learning algorithm for deep belief nets", "author": ["G.E. Hinton", "S. Osindero", "Y.W. Teh"], "venue": "Neural computation 18(7)", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2006}], "referenceMentions": [{"referenceID": 0, "context": "A state of the art candidate for responding to this challenge is behavior synthesis with online planning [1,2,3].", "startOffset": 105, "endOffset": 112}, {"referenceID": 1, "context": "A state of the art candidate for responding to this challenge is behavior synthesis with online planning [1,2,3].", "startOffset": 105, "endOffset": 112}, {"referenceID": 2, "context": "A state of the art candidate for responding to this challenge is behavior synthesis with online planning [1,2,3].", "startOffset": 105, "endOffset": 112}, {"referenceID": 0, "context": "MCAP is based on stochastic interpretation of nondeterministic action programs by Monte Carlo Tree Search (MCTS) [1,4].", "startOffset": 113, "endOffset": 118}, {"referenceID": 3, "context": "MCAP is based on stochastic interpretation of nondeterministic action programs by Monte Carlo Tree Search (MCTS) [1,4].", "startOffset": 113, "endOffset": 118}, {"referenceID": 3, "context": "The MCTS framework originated from research in computer Go [4,5].", "startOffset": 59, "endOffset": 64}, {"referenceID": 4, "context": "The MCTS framework originated from research in computer Go [4,5].", "startOffset": 59, "endOffset": 64}, {"referenceID": 5, "context": "Nevertheless, specialized Go programs based on the MCTS algorithm are able to play on the niveau of a human professional player [6].", "startOffset": 128, "endOffset": 131}, {"referenceID": 1, "context": "MCTS is also commonly used in autonomous planning [2,3] and has been applied successfully to a huge number of other search tasks [1].", "startOffset": 50, "endOffset": 55}, {"referenceID": 2, "context": "MCTS is also commonly used in autonomous planning [2,3] and has been applied successfully to a huge number of other search tasks [1].", "startOffset": 50, "endOffset": 55}, {"referenceID": 0, "context": "MCTS is also commonly used in autonomous planning [2,3] and has been applied successfully to a huge number of other search tasks [1].", "startOffset": 129, "endOffset": 132}, {"referenceID": 0, "context": "1: Monte Carlo Tree Search [1].", "startOffset": 27, "endOffset": 30}, {"referenceID": 0, "context": "Algorithm 1 General MCTS approach [1] 1: procedure mcts(s0) 2: create root node v0 with state s0 3: while within computational budget do 4: vl \u2190 treepolicy(v0) 5: \u2206\u2190 defaultpolicy(vl) 6: backup(vl,\u2206) 7: return a(bestchildv0())", "startOffset": 34, "endOffset": 37}, {"referenceID": 6, "context": "Well-established action programming languages are Golog [7,8] and Flux [9].", "startOffset": 56, "endOffset": 61}, {"referenceID": 7, "context": "Well-established action programming languages are Golog [7,8] and Flux [9].", "startOffset": 56, "endOffset": 61}, {"referenceID": 8, "context": "Well-established action programming languages are Golog [7,8] and Flux [9].", "startOffset": 71, "endOffset": 74}, {"referenceID": 9, "context": "a particular formal specification of domain dynamics: The situation calculus and the fluent calculus are concerned with specification of action effects and domain dynamics in first order logic [10,11].", "startOffset": 193, "endOffset": 200}, {"referenceID": 10, "context": "a particular formal specification of domain dynamics: The situation calculus and the fluent calculus are concerned with specification of action effects and domain dynamics in first order logic [10,11].", "startOffset": 193, "endOffset": 200}, {"referenceID": 0, "context": "Recommendation quality depends on the number of simulations used for search [1].", "startOffset": 76, "endOffset": 79}, {"referenceID": 11, "context": "While it is possible to use a DAG instead of a tree [12], we will concentrate on the tree setting in this paper for the sake of simplicity.", "startOffset": 52, "endOffset": 56}, {"referenceID": 12, "context": "It is a popular instantiation of the MCTS tree policy based on regret minimization [13,14].", "startOffset": 83, "endOffset": 90}, {"referenceID": 13, "context": "It is a popular instantiation of the MCTS tree policy based on regret minimization [13,14].", "startOffset": 83, "endOffset": 90}, {"referenceID": 14, "context": "a Bellman update) for updating node values [15].", "startOffset": 43, "endOffset": 47}, {"referenceID": 0, "context": "[*] victims [1] position", "startOffset": 12, "endOffset": 15}, {"referenceID": 15, "context": "System performance was measured with the statistical model checker Multivesta [16].", "startOffset": 78, "endOffset": 82}, {"referenceID": 16, "context": "continuously evolving domain values [17].", "startOffset": 36, "endOffset": 40}, {"referenceID": 17, "context": "statistical relational learning [18] and deep learning [19]): How to constrain system behavior if perceptual abstraction is unknown at design time or changes at runtime?", "startOffset": 32, "endOffset": 36}, {"referenceID": 18, "context": "statistical relational learning [18] and deep learning [19]): How to constrain system behavior if perceptual abstraction is unknown at design time or changes at runtime?", "startOffset": 55, "endOffset": 59}], "year": 2017, "abstractText": "This paper proposes Monte Carlo Action Programming, a programming language framework for autonomous systems that act in large probabilistic state spaces with high branching factors. It comprises formal syntax and semantics of a nondeterministic action programming language. The language is interpreted stochastically via Monte Carlo Tree Search. Effectiveness of the approach is shown empirically.", "creator": "LaTeX with hyperref package"}}}