{"id": "1703.08838", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Mar-2017", "title": "Distributed Voting/Ranking with Optimal Number of States per Node", "abstract": "Considering a network with $n$ nodes, where each node initially votes for one (or more) choices out of $K$ possible choices, we present a Distributed Multi-choice Voting/Ranking (DMVR) algorithm to determine either the choice with maximum vote (the voting problem) or to rank all the choices in terms of their acquired votes (the ranking problem). The algorithm consolidates node votes across the network by updating the states of interacting nodes using two key operations, the union and the intersection. The proposed algorithm is simple, independent from network size, and easily scalable in terms of the number of choices $K$, using only $K\\times 2^{K-1}$ nodal states for voting, and $K\\times K!$ nodal states for ranking. We prove the number of states to be optimal in the ranking case, this optimality is conjectured to also apply to the voting case. The time complexity of the algorithm is analyzed in complete graphs. We show that the time complexity for both ranking and voting is $O(\\log(n))$ for given vote percentages, and is inversely proportional to the minimum of the vote percentage differences among various choices.", "histories": [["v1", "Sun, 26 Mar 2017 16:19:31 GMT  (270kb,D)", "http://arxiv.org/abs/1703.08838v1", null]], "reviews": [], "SUBJECTS": "cs.DC cs.LG", "authors": ["saber salehkaleybar", "arsalan sharif-nassab", "s jamaloddin golestani"], "accepted": false, "id": "1703.08838"}, "pdf": {"name": "1703.08838.pdf", "metadata": {"source": "CRF", "title": "Distributed Voting/Ranking with Optimal Number of States per Node", "authors": ["Saber Salehkaleybar", "Arsalan Sharif-Nassab"], "emails": ["saleh@ee.sharif.edu,", "sharifnassab@ee.sharif.edu,", "golestani@ieee.org"], "sections": [{"heading": null, "text": "In fact, it is so that most of them are able to assert themselves, that they are able to survive themselves, that they are able to survive themselves, and that they are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves, that most of them are able to survive themselves."}, {"heading": "II. THE DISTRIBUTED MULTI-CHOICE VOTING/RANKING (DMVR) ALGORITHM", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. Problem Statement", "text": "Consider a network with n nodes. The topology of the network is represented by a contiguous undirected graph, G = (V, E), where the vertex V = {1,..., n} is set and the edge E V \u00b7 V is set, so that (i, j) E is only set if the nodes i and j can communicate directly. Furthermore, it is assumed that each node is equipped with a local clock that ticks with rate one after a Poisson process. First, each node selects a choice from a series of K decisions C = {c1, \u00b7 \u00b7, cK}. Let's # ck the number of nodes that satisfy the selection criterion ck and ICK, # ck n. In the majority selection problem, the goal is to find the selection criterion in the majority, i.e. the selection criterion ck, which # ck is satisfactory."}, {"heading": "B. Description of the DMVR algorithm", "text": "A value set vi (t) is associated with each node i at a given time. At t = 0, the only member of vi (0) is the selected choice of node i. In the process of the algorithm, vi (t) is always a subset of C. The algorithm essentially performs two functions when they interact; the second part of the algorithm is related to the distribution of the consolidated result of the first part of the algorithm."}, {"heading": "III. CONVERGENCE ANALYSIS", "text": "In this section, we will show that the DMVR algorithm converges to the correct solution to majority voting and ranking problems. First, we will examine how value sets consolidate and converge into a convergence set by defining a Lyapunov function, then we will discuss how memory upgrades can spread the right result in parallel with updating the values. Next, we will merge the value sets and memory of the DMVR algorithm to reduce memory consumption for both majority voting and ranking problems, and finally, we will prove that the proposed implementation is optimal for the number of states required for the ranking problem."}, {"heading": "A. Consolidation of Value Sets", "text": "In this part, we analyze how values in the network are consolidated until the state of the system is converted into a convergence setting.Definition 1. Let us not leave the network state vector as X (t) = [v1 (t), \u00b7 \u00b7 \u00b7 \u00b7, vn (t) at any given time. The set of all state vectors X (t) = [v1 (t), \u00b7 \u00b7 \u00b7 \u00b7, vn (t)] with the following property is called convergence settings and is defined by X0: | vi (t) | vj (t) | vi (t)."}, {"heading": "B. Dissemination of Result in Memories", "text": "In this part, we show how the updating of memory spreads the correct result in the network. Without loss of generality, we assume in the rest of this work that # c1 > # c2 > \u00b7 \u00b7 \u00b7 > # cK.3Definition 5. Assuming that the state vector X (t) arrives in X0 at a certain point in time, we define the vector v? = [v1, \u00b7 \u00b7, vK] as follows: vk = \u2212 vi (\u03c4), i \u00b7 \u00b7 \u00b7 \u00b7 Decisions {1, \u00b7 \u00b7, n}: | vi (\u03c4) | = k, otherwise. (13) and rk (t) = \u03b1 (t) # vi (t) | = k}.Theorem 1. The vector [\u03c01, \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 K] defined in (2) gives the correct order of decisions in an infinite time with the probability one.Proof: From Lemma 4 we know that the state vector X (t) ultimately arrives in the given time."}, {"heading": "C. State-optimal Implementation of DMVR Algorithm", "text": "In the case of majority selection, the state of the node i is the pair (mi (t), vi (t))) in which the sets mi (t) and vi (t) each have K and 2K possible states. Thus, the total number of states is K \u00b7 2K. \u00b7 However, if we can implement the DMVR algorithm with fewer states by selecting a random member by adding the following rules: \u2022 If the output of the update rule, vi (t) and the change mi (t) applies to {ck} -2 states, the state of the node i remains stored in the form of (t +), vi (t +).3We assume that # cK > 0. Otherwise, we can reduce the problem to the case with fewer options."}, {"heading": "IV. TIME COMPLEXITY", "text": "In this section, we first analyze the temporal complexity of the DMVR algorithm for the binary matching problem in complete diagrams. We then examine the multiple-choice case and derive a narrow limit for the runtime of the DMVR algorithm for the ranking problem. Finally, we propose a method to accelerate the DMVR algorithm in the majority voting problem."}, {"heading": "A. Binary Voting Case", "text": "To investigate the time complexity of the DMVR algorithm, we divide its execution time into two phases: \u2022 First phase (extinction of {c2}): This phase begins with the beginning of the algorithm \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 n If none of the value sets is {c2}. We designate the completion time of this phase by \u03c41. \u2022 Second phase (distribution of {c1} in the memories): This phase follows the first phase and ends when the memories of all nodes are {c1}. The execution time of this phase is represented by \u03c42.1) Time complexity of the first phase: In the binary case, the transition rule of the DMVR algorithm is exactly the same as the PAGA algorithm. In [23], an upper limit, O (log (n) / (1 \u2212 2), the time for the PAGA algorithms is given in which 2 =. Here we propose the exact average time complexity for the first phase."}, {"heading": "B. Multiple Choice Voting Case", "text": "Consider two decisions ck and cl. From the state vector X (t) = [v1 (t), v2 (t), vn (t)), we define a new state vector Xk, l (t) = [v) 1 (t), \u00b7 \u00b7 \u00b7 n (t) by setting the value of each node i (n) to {ck, cl), i.e. v (t) = vi (t) [t), {ck, l (t), l (t), n (t), n (n), n (n), n (n), 21 () 1 (). Thus, the projected state vector Xk, l (t) represents the path of execution 1 \u2212 rnnr)."}, {"heading": "C. Speeding up the DMVR algorithm for majority voting problem", "text": "The execution time of the DMVR algorithm can be divided into two phases: the first phase begins with zero time and ends when the state vector X (t) enters the convergence X0; then the second phase begins and ends when the memories of all nodes are set with the majority choice. To speed up the second phase, we add the following rule: When two nodes i and j come into contact with each other, each becomes t: 1: when they (t +) | > 1: vj (t +) | > 1 then 2: Generate u from Bernoulli distribution with successprobability 0.5. 3: when u = 1 then 4: mi (t +): 5: else 6: mj (t +): mi (t): (t). 7: end, when 8: end, when it is worth mentioning that the added rule is executed from the beginning of the algorithm."}, {"heading": "V. SIMULATIONS", "text": "In this section we evaluate the time complexity of the DMVR algorithm through simulations and compare it with the PAGA automaton for binary and ternary tuning. Furthermore, we examine the proposed time complexity limits in complete diagrams. Each point in simulations is considered on average over 1000 ballots. We compare the proposed limits for E {\u03c41} and E {\u03c42} with simulation results for the binary tuning in Fig. 3. As you can see, the bound E {\u03c41} is exactly as we expect, while there is a constant gap between simulation and analysis for E {\u03c42}. In Fig. 4, the time complexity of the DMVR algorithm, its extended version and the PAGA automaton versus8 0.55 0.6 0.65 0.7 0.75 0.8 0 10 20 30 40 50 60 80 80 percent 1E."}, {"heading": "VI. CONCLUSIONS", "text": "The DMVR algorithm is a simple solution with limited memory and optimal for the ranking problem in terms of the number of states. Furthermore, we analyzed the temporal complexity of the DMVR algorithm and showed that it refers inversely to mini = 1, \u00b7 \u00b7, K \u2212 1 \u03c1i + 1 \u2212 \u03c1i. As future work it is absolutely important to obtain the minimum number of states required to solve the majority tuning problem. We suspect that the DMVR algorithm represents an optimal solution to the majority tuning problem, i.e. for every possible solution at least K \u00d7 2K \u2212 1 states are required. 0.55 0.6 0.65 0.7 0.75 0.85 0.9 01002003004005000700\u043c 1E {event} Ring, n = 100The PAGA automaton The DMVR algorithm (improved version) 0.75 0.75 0.65 0.65 VR (0.185 net 0.7)."}], "references": [{"title": "Local vote decision fusion for target detection in wireless sensor networks", "author": ["N. Katenka", "E. Levina", "G. Michailidis"], "venue": "Signal Processing, IEEE Transactions on, vol. 56, no. 1, pp. 329\u2013338, 2008.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2008}, {"title": "An improved threshold approximation for local vote decision fusion", "author": ["M.S. Ridout"], "venue": "Signal Processing, IEEE Transactions on, vol. 61, no. 5, pp. 1104\u20131106, 2013.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2013}, {"title": "Distributed hypothesis testing with social learning and symmetric fusion", "author": ["J.B. Rhim", "V.K. Goyal"], "venue": "Signal Processing, IEEE Transactions on, vol. 62, no. 23, pp. 6298\u20136308, 2014.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "Distributed consensus algorithms in sensor networks: Quantized data and random link failures", "author": ["S. Kar", "J.M. Moura"], "venue": "Signal Processing, IEEE Transactions on, vol. 58, no. 3, pp. 1383\u20131400, 2010.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2010}, {"title": "Computation in networks of passively mobile finite-state sensors", "author": ["D. Angluin", "J. Aspnes", "Z. Diamadi", "M.J. Fischer", "R. Peralta"], "venue": "Distributed computing, vol. 18, no. 4, pp. 235\u2013253, 2006.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2006}, {"title": "Programmable chemical controllers made from dna", "author": ["Y.-J. Chen", "N. Dalchau", "N. Srinivas", "A. Phillips", "L. Cardelli", "D. Soloveichik", "G. Seelig"], "venue": "Nature nanotechnology, vol. 8, no. 10, pp. 755\u2013762, 2013.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "No two-state ca for density classification exists", "author": ["M. Land", "R. Belew"], "venue": "Physical Review Letters, vol. 74, no. 25, pp. 5148\u20135150, 1995.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1995}, {"title": "Majority consensus and the local majority rule", "author": ["N.H. Mustafa", "A. Peke\u010d"], "venue": "Automata, Languages and Programming. Springer, 2001, pp. 530\u2013542.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2001}, {"title": "The gacs-kurdyumov-levin automaton revisited", "author": ["P.G. de S\u00e1", "C. Maes"], "venue": "Journal of Statistical Physics, vol. 67, no. 3-4, pp. 507\u2013522, 1992.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1992}, {"title": "Distributed probabilistic polling and applications to proportionate agreement", "author": ["Y. Hassin", "D. Peleg"], "venue": "Information and Computation, vol. 171, no. 2, pp. 248\u2013268, 2001.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2001}, {"title": "Nondeterministic density classification with diffusive probabilistic cellular automata", "author": ["H. Fuk\u015b"], "venue": "Physical Review E, vol. 66, no. 6, p. 066106, 2002.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2002}, {"title": "Evolution of asynchronous cellular automata for the density task", "author": ["M. Tomassini", "M. Venzi"], "venue": "Parallel Problem Solving from NaturePPSN VII. Springer, 2002, pp. 934\u2013943.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2002}, {"title": "The distributed multiple voting problem", "author": ["F. Benezit", "P. Thiran", "M. Vetterli"], "venue": "Selected Topics in Signal Processing, IEEE Journal of, vol. 5, no. 4, pp. 791\u2013804, 2011.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2011}, {"title": "Randomized gossip algorithms", "author": ["S. Boyd", "A. Ghosh", "B. Prabhakar", "D. Shah"], "venue": "Information Theory, IEEE Transactions on, vol. 52, no. 6,  pp. 2508\u20132530, 2006.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2006}, {"title": "Quantized consensus", "author": ["A. Kashyap", "T. Basar", "R. Srikant"], "venue": "Information Theory, 2006 IEEE International Symposium on, 2006, pp. 635\u2013639.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2006}, {"title": "Interval consensus: from quantized gossip to voting", "author": ["F. B\u00e9n\u00e9zit", "P. Thiran", "M. Vetterli"], "venue": "Acoustics, Speech and Signal Processing, 2009. ICASSP 2009. IEEE International Conference on. IEEE, 2009, pp. 3661\u20133664.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2009}, {"title": "Simple dynamics for plurality consensus", "author": ["L. Becchetti", "A. Clementi", "E. Natale", "F. Pasquale", "R. Silvestri", "L. Trevisan"], "venue": "Proceedings of the 26th ACM symposium on Parallelism in algorithms and architectures. ACM, 2014, pp. 247\u2013256.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2014}, {"title": "Plurality consensus in the gossip model", "author": ["L. Becchetti", "A. Clementi", "E. Natale", "F. Pasquale", "R. Silvestri"], "venue": "Proceedings of the 26th ACM-SIAM symposium on discrete algorithms. ACM, 2015, pp. 371\u2013 390.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2015}, {"title": "Distributed ranking in networks with limited memory and communication", "author": ["K. Jung", "B. Kim", "M. Vojnovic"], "venue": "Information Theory Proceedings (ISIT), 2012 IEEE International Symposium on. IEEE, 2012, pp. 980\u2013984.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Distributed multivalued consensus", "author": ["A. Babaee", "M. Draief"], "venue": "The Computer Journal, p. bxt026, 2013.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2013}, {"title": "Convergence speed of binary interval consensus", "author": ["M. Draief", "M. Vojnovic"], "venue": "SIAM Journal on Control and Optimization, vol. 50, no. 3, pp. 1087\u20131109, 2012.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2012}, {"title": "Tight bounds on expected order statistics", "author": ["D. Bertsimas", "K. Natarajan", "C.-P. Teo"], "venue": "Probability in the Engineering and Informational Sciences, vol. 20, no. 04, pp. 667\u2013686, 2006.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2006}], "referenceMentions": [{"referenceID": 0, "context": "It can be employed as a subroutine in many network applications such as target detection in sensor networks [1], [2], distributed hypothesis testing [3], quantized consensus [4], voting in distributed systems [5], and molcular nanorobots [6].", "startOffset": 108, "endOffset": 111}, {"referenceID": 1, "context": "It can be employed as a subroutine in many network applications such as target detection in sensor networks [1], [2], distributed hypothesis testing [3], quantized consensus [4], voting in distributed systems [5], and molcular nanorobots [6].", "startOffset": 113, "endOffset": 116}, {"referenceID": 2, "context": "It can be employed as a subroutine in many network applications such as target detection in sensor networks [1], [2], distributed hypothesis testing [3], quantized consensus [4], voting in distributed systems [5], and molcular nanorobots [6].", "startOffset": 149, "endOffset": 152}, {"referenceID": 3, "context": "It can be employed as a subroutine in many network applications such as target detection in sensor networks [1], [2], distributed hypothesis testing [3], quantized consensus [4], voting in distributed systems [5], and molcular nanorobots [6].", "startOffset": 174, "endOffset": 177}, {"referenceID": 4, "context": "It can be employed as a subroutine in many network applications such as target detection in sensor networks [1], [2], distributed hypothesis testing [3], quantized consensus [4], voting in distributed systems [5], and molcular nanorobots [6].", "startOffset": 209, "endOffset": 212}, {"referenceID": 5, "context": "It can be employed as a subroutine in many network applications such as target detection in sensor networks [1], [2], distributed hypothesis testing [3], quantized consensus [4], voting in distributed systems [5], and molcular nanorobots [6].", "startOffset": 238, "endOffset": 241}, {"referenceID": 0, "context": "As an example in target detection [1], wireless sensors combine their binary decisions about the presence of a target through majority voting, and send a report to the fusion center if the majority is in favor of presence.", "startOffset": 34, "endOffset": 37}, {"referenceID": 6, "context": "In [7], it has been shown that there is no synchronous deterministic two-state automaton that can solve binary voting problem in a connected network.", "startOffset": 3, "endOffset": 6}, {"referenceID": 7, "context": "Several two-state automata have been proposed for the ring topology [8], [9], the most successful of which can get the correct result in nearly 83% of initial configurations of selected votes [10].", "startOffset": 73, "endOffset": 76}, {"referenceID": 8, "context": "Several two-state automata have been proposed for the ring topology [8], [9], the most successful of which can get the correct result in nearly 83% of initial configurations of selected votes [10].", "startOffset": 192, "endOffset": 196}, {"referenceID": 6, "context": "In order to circumvent the impossibility result of [7], asynchronous and probabilistic automata have also been presented in CA community [11]\u2013 [13].", "startOffset": 51, "endOffset": 54}, {"referenceID": 9, "context": "In order to circumvent the impossibility result of [7], asynchronous and probabilistic automata have also been presented in CA community [11]\u2013 [13].", "startOffset": 137, "endOffset": 141}, {"referenceID": 11, "context": "In order to circumvent the impossibility result of [7], asynchronous and probabilistic automata have also been presented in CA community [11]\u2013 [13].", "startOffset": 143, "endOffset": 147}, {"referenceID": 12, "context": "However, none of them can obtain the correct result with probability one [14].", "startOffset": 73, "endOffset": 77}, {"referenceID": 13, "context": "Using a different approach, binary voting problem can be solved by a randomized gossip algorithm [15] that computes the average of initial node values.", "startOffset": 97, "endOffset": 101}, {"referenceID": 14, "context": "The drawback of this approach is that the number of required states in its quantized version [16] grows linearly in terms of the network size [14].", "startOffset": 93, "endOffset": 97}, {"referenceID": 12, "context": "The drawback of this approach is that the number of required states in its quantized version [16] grows linearly in terms of the network size [14].", "startOffset": 142, "endOffset": 146}, {"referenceID": 15, "context": "[17] proposed an elegant solution based on an automaton, with the state space {0, 0.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "5, 1}, which resembles the idea in [16].", "startOffset": 35, "endOffset": 39}, {"referenceID": 12, "context": "In [14], a Pairwise Asynchronous Graph Automata (PAGA) has been used to extend the above idea to the multiple choice voting problem, and sufficient conditions for convergence are stated.", "startOffset": 3, "endOffset": 7}, {"referenceID": 12, "context": "For majority voting with more than four choices, pairwise and parallel comparison among the choices, has been proposed [14], requiring \u0398(2K(K\u22121)) number of states in terms of the number of choices, K.", "startOffset": 119, "endOffset": 123}, {"referenceID": 16, "context": "One of the main problems is whether voting automata exist for any number of multiple choices without running multiple binary or ternary voting automata in parallel? Furthermore, what is the minimum number of states of a possible solution? In more recent works [18]\u2013[21], it has been shown that the majority vote can be obtained with high probability if the initial votes are sufficiently biased to the majority or the network size is large enough.", "startOffset": 260, "endOffset": 264}, {"referenceID": 19, "context": "One of the main problems is whether voting automata exist for any number of multiple choices without running multiple binary or ternary voting automata in parallel? Furthermore, what is the minimum number of states of a possible solution? In more recent works [18]\u2013[21], it has been shown that the majority vote can be obtained with high probability if the initial votes are sufficiently biased to the majority or the network size is large enough.", "startOffset": 265, "endOffset": 269}, {"referenceID": 18, "context": "A generalization of the distributed voting problem, is the distributed ranking problem in which the goal is to rank all the K choices in terms of the number of votes, each get from different network nodes [20].", "startOffset": 205, "endOffset": 209}, {"referenceID": 12, "context": "For instance, the number of required states is 12 for ternary voting, and 32 for quaternary voting, compared to respectively 15 and 100 states in the case of PAGA algorithm [14].", "startOffset": 173, "endOffset": 177}, {"referenceID": 13, "context": "Furthermore, unlike the randomized gossip algorithms [15], [16], the number of states is independent from the network size.", "startOffset": 53, "endOffset": 57}, {"referenceID": 14, "context": "Furthermore, unlike the randomized gossip algorithms [15], [16], the number of states is independent from the network size.", "startOffset": 59, "endOffset": 63}, {"referenceID": 12, "context": "Thus, the number of states for ternary voting is 12 compared to 15 for the PAGA automaton [14] and it is equal to 32 for quaternary voting while the number of states for the PAGA is 100.", "startOffset": 90, "endOffset": 94}, {"referenceID": 20, "context": "In [23], an upper bound, O(log(n)/(1 \u2212 2\u03c1)), is given for the PAGA algorithm in complete graphs where \u03c12 = \u03c1.", "startOffset": 3, "endOffset": 7}, {"referenceID": 21, "context": "(Order Statistics [24]) Let [Z1, \u00b7 \u00b7 \u00b7 , ZR] denote R \u2265 2 random variables (not necessarily independent or identically distributed) with means [\u03bcr] and variances [\u03c3 r ].", "startOffset": 18, "endOffset": 22}], "year": 2017, "abstractText": "Considering a network with n nodes, where each node initially votes for one (or more) choices out of K possible choices, we present a Distributed Multi-choice Voting/Ranking (DMVR) algorithm to determine either the choice with maximum vote (the voting problem) or to rank all the choices in terms of their acquired votes (the ranking problem). The algorithm consolidates node votes across the network by updating the states of interacting nodes using two key operations; the union and the intersection. The proposed algorithm is simple, independent from network size, and easily scalable in terms of the number of choices K, using only K\u00d72K\u22121 nodal states for voting, and K\u00d7K! nodal states for ranking. We prove the number of states to be optimal in the ranking case; this optimality is conjectured to also apply to the voting case. The time complexity of the algorithm is analyzed in complete graphs. We show that the time complexity for both ranking and voting is O(log(n)) for given vote percentages, and is inversely proportional to the minimum of the vote percentage differences among various choices.", "creator": "LaTeX with hyperref package"}}}