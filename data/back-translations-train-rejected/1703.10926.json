{"id": "1703.10926", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-Mar-2017", "title": "EMULATOR vs REAL PHONE: Android Malware Detection Using Machine Learning", "abstract": "The Android operating system has become the most popular operating system for smartphones and tablets leading to a rapid rise in malware. Sophisticated Android malware employ detection avoidance techniques in order to hide their malicious activities from analysis tools. These include a wide range of anti-emulator techniques, where the malware programs attempt to hide their malicious activities by detecting the emulator. For this reason, countermeasures against antiemulation are becoming increasingly important in Android malware detection. Analysis and detection based on real devices can alleviate the problems of anti-emulation as well as improve the effectiveness of dynamic analysis. Hence, in this paper we present an investigation of machine learning based malware detection using dynamic analysis on real devices. A tool is implemented to automatically extract dynamic features from Android phones and through several experiments, a comparative analysis of emulator based vs. device based detection by means of several machine learning algorithms is undertaken. Our study shows that several features could be extracted more effectively from the on-device dynamic analysis compared to emulators. It was also found that approximately 24% more apps were successfully analysed on the phone. Furthermore, all of the studied machine learning based detection performed better when applied to features extracted from the on-device dynamic analysis.", "histories": [["v1", "Fri, 31 Mar 2017 14:59:15 GMT  (3787kb,D)", "http://arxiv.org/abs/1703.10926v1", "IWSPA 2017 Proceedings of the 3rd ACM International Workshop on Security and Privacy Analytics, co-located with CODASPY'17, Scottsdale, Arizona, USA - March 24 - 24, 2017, pages 65-72"]], "COMMENTS": "IWSPA 2017 Proceedings of the 3rd ACM International Workshop on Security and Privacy Analytics, co-located with CODASPY'17, Scottsdale, Arizona, USA - March 24 - 24, 2017, pages 65-72", "reviews": [], "SUBJECTS": "cs.CR cs.AI", "authors": ["mohammed k alzaylaee", "suleiman y yerima", "sakir sezer"], "accepted": false, "id": "1703.10926"}, "pdf": {"name": "1703.10926.pdf", "metadata": {"source": "CRF", "title": "EMULATOR vs REAL PHONE: Android Malware Detection Using Machine Learning", "authors": ["Mohammed K. Alzaylaee", "Suleiman Y. Yerima", "Sakir Sezer"], "emails": ["malzaylaee01@qub.ac.uk", "s.yerima@qub.ac.uk", "s.sezer@qub.ac.uk"], "sections": [{"heading": null, "text": "Keywords Android; Malware; Malware Detection; Anti-Analysis; Antiemulation; Machine Learning; Device-based Detection"}, {"heading": "1. INTRODUCTION", "text": "In fact, most people are able to decide for themselves what they want and what they want."}, {"heading": "2. PHONE BASED DYNAMIC ANALYSIS AND FEATURE EXTRACTION", "text": "This year it is so far that it will only be a matter of time before it will be so far, until it will be so far."}, {"heading": "3. METHODOLOGY AND EXPERIMENTS", "text": "This section describes the methodology of the experiments carried out to evaluate the ecological effectiveness of trait recognition and extraction and to analyze the performance of machine learning algorithms on both the emulator and the real phone."}, {"heading": "3.1 Dataset", "text": "The data set used for the experiments consists of a total of 2444 Android applications. 1222 of these were malware samples from 49 families of the Android malware genome project [9], the rest were 1222 benign samples from Intel Security (McAfee Labs)."}, {"heading": "3.2 Environmental configurations", "text": "The two environments in which the experiments were carried out had the following configurations: The first was an Elephone P6000 smartphone with Android 5.0 Lollipop, 1.3 GHz CPU, 16 GB of internal memory and 32 GB of external SD card memory. In addition, a Sim card with call credit was installed in the phone to allow outgoing calls and the use of 3G data. The emulator environment (an Android virtual device) was created in a Santoku Linux VirtualBox-based machine. The emulator was configured with 2 MB of memory and 8 GB of external SD card memory. The Android version in the emulator was 4.1.2 Jelly Bean (API level 16).Please note that the features depend on the app, so the difference in Android versions will have no effect. The emulator has been improved as described in [14] by allowing contact numbers, images, simulation files, and text files to be restored as well as the third-party IMI phone files."}, {"heading": "3.3 Features extraction", "text": "After running and processing all apps in both analytical environments, the results were pre-processed into a file of feature vectors representing the features extracted from each application. Within the vector, each feature is represented by 0 or 1, indicating the presence or absence of the feature. Files were converted to the ARFF format and fed into the WEKA machine learning tool for further processing. Initially, 178 features were extracted for both the phone environment and the emulator environment, which were then evaluated using InfoGain's feature ranking algorithm in WEKA. The 100 best features were then used in the experiments to compare the recognition performance between the two environments using multiple machine learning algorithms. Table 1 shows the 10 ranked features (based on InfoGain) in both sets (phone and emulator)."}, {"heading": "3.4 Machine learning classifiers", "text": "In the experiments, the features were divided into five different groups (20, 40, 60, 80 and 100 using InfoGain) to compare the performance of emulator and phone-based recognition using machine learning. In the experiments, the following algorithms were used: Support Vector Machine (SVM-linear), Naive Bayes (NB), Simple Logistic (SL), Multilayer Perceptron (MLP), Partial Decision Trees (PART), Random Forest (RF) and J48 Decision Tree."}, {"heading": "3.5 Metrics", "text": "Five measurements were used to emulate the detection approaches: true positive rate (TPR), true negative rate (TNR), false positive rate (FPR), false negative rate (FNR), and weighted average F measurement. The definition of these measurements is as follows: TPR = TPTP + FN (1) TNR = TNTP + FN (2) FPR = FPTP + FN (3) FNR = FNTP + FN (4) F \u2212 measurement = 2 \u0445 recall precision + precision (5) True positives (TP) are defined as the number of correctly classified malware samples, while false negatives are defined as the number of incorrectly classified malware samples. True negatives (TN) are defined as the number of benign samples correctly classified, while false positives (FP) are defined as the number of incorrectly classified samples."}, {"heading": "4. RESULTS AND DISCUSSIONS", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "4.1 Experiment 1: Emulator vs Device analysis and feature extraction", "text": "In fact, most of them are able to decide whether or not they are able to play by the rules."}, {"heading": "4.2 Experiment 2: Emulator vs Device Machine learning detection comparison", "text": "Table 4 and Table 5 present the results of the performance evaluation of the various machine learning algorithms (for the top 100 features), showing that using the phone-based features for the dynamic analysis approach is more effective for detecting and classifying applications compared to the emulator. Results were obtained in tests on 33% of the samples, while 66% were used for training the model. Table 5 shows that higher detection rates from the phone-based features were achieved for all algorithms (top 100 training features). TPR of > 90% were achieved with all but the N.B classifier with the phonebased features, while NB, SL, PART and J48 all features have < 90% TPR with the emulator-based features. As previously mentioned, 939 / 1222 malware and 786 / 1222 benign samples were successfully executed on the emulator (for a total of 1725 samples)."}, {"heading": "4.3 Comparison with other works", "text": "In this subsection, we compare our results with those from the DroidDolphin [31] and STREAM [15] dynamic analytical frameworks. DroidDolphin is a dynamic analytical framework for detecting Android malware applications that utilizes the technologies of GUI-based testing, big data analysis and machine learning. STREAM is also an Andromaly-based dynamic analytical framework that enables rapid, large-scale validation of mobile malware machine learning classifiers. DroidDolphin used 1000 to 64000 well-balanced malware and benevolent Android applications.In the STREAM approach, test results were used with 24 harmless and 23 malware applications, while the training set consisted of 408 benign and 1330 malware applications, both using split training / test sets (T.S.) and 10-fold validation (C.V.) methods. Table 8 shows comparison between our telephone results (100) and STREAM results (15)."}, {"heading": "5. RELATED WORK", "text": "In this context, it is worth mentioning that the solution to these problems is an attempt to find a solution."}, {"heading": "6. CONCLUSIONS", "text": "In this paper, we presented an investigation of machine learning detection using dynamic analysis on real Android devices. We implemented a tool to automatically extract dynamic features from Android phones and conducted a comparative analysis of emulator-based vs. device-based detection using Random Forest, Naive Bayes, Multilayer Perceptron, Simple Logistics, J48 Decision Tree, PART and SVM (linear) algorithms in several experiments. Our experiments showed that several features were more effectively extracted from the phone than the emulator using the same dataset. In addition, 23.8% more apps on the phone were fully analyzed than on the emulator. This shows that for a more efficient analysis, the phone is definitely a better environment, as far more apps crash when analyzed on the emulator. The results of our phone-based analysis, which analyzed up to 0.926 F measure and 93.1% more apps on the emulator, show that the results of machine emulators are more effective than the results of machine-based emulators analyzing the effects of machine work."}, {"heading": "7. REFERENCES", "text": "[1] Smartphone OS market share worldwide 2009-2015 | Statista https: / / www.statista.com / statistics / 263453 / global-market-share-held by-smartphone-operating-systems /. [2] Global smartphone shipments by OS 2016 and 2020 | Statistic, https: / / www.statista.com / statistics / 263453 / global-smartphone-shipments-forecast-system /. [3] F-Secure, Android Pincer A, https: / / www.f-secure.com / archives / 00002538.html. [4] DroidBox, Google Archive https: / / code.google.com / p."}], "references": [{"title": "DroidAPIMiner: Mining API-Level Features for Robust Malware Detection in Android", "author": ["Y. Aafer", "W. Du", "H. Yin"], "venue": "Security and Privacy in Communication Networks, 127:86\u2013103", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2013}, {"title": "DynaLog: An automated dynamic analysis framework for characterizing android applications", "author": ["M.K. Alzaylaee", "S.Y. Yerima", "S. Sezer"], "venue": "2016 International Conference on Cyber Security and Protection of Digital Services, Cyber Security 2016", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2016}, {"title": "Applying machine learning classifiers to dynamic android malware detection at scale", "author": ["B. Amos", "H. Turner", "J. White"], "venue": "2013 9th International Wireless Communications and Mobile Computing Conference, IWCMC 2013, pages 1666\u20131671", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2013}, {"title": "Drebin: Effective and Explainable Detection of Android Malware in Your Pocket", "author": ["D. Arp", "M. Spreitzenbarth", "H. Malte", "H. Gascon", "K. Rieck"], "venue": "Symposium on Network and Distributed System Security (NDSS), (February):23\u201326", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2014}, {"title": "A view on current malware behaviors", "author": ["U. Bayer", "I. Habibi", "D. Balzarotti", "E. Kirda", "C. Kruegel"], "venue": "Proceedings of the 2nd USENIX conference on Large-scale exploits and emergent threats: botnets, spyware, worms, and more, page 8", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2009}, {"title": "Crowdroid: Behavior-Based Malware Detection System for Android", "author": ["I. Burguera", "U. Zurutuza", "S. Nadjm-Tehrani"], "venue": "Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices - SPSM \u201911, page 15", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2011}, {"title": "MADAM: A multi-level anomaly detector for android malware", "author": ["G. Dini", "F. Martinelli", "A. Saracino", "D. Sgandurra"], "venue": "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 7531 LNCS:240\u2013253", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2012}, {"title": "TaintDroid: An Information-Flow Tracking System for Realtime  Privacy Monitoring on Smartphones", "author": ["W. Enck", "P. Gilbert", "B.-G. Chun", "L.P. Cox", "J. Jung", "P. McDaniel", "A.N. Sheth"], "venue": "Osdi \u201910, 49:1\u20136", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2010}, {"title": "Glassbox: Dynamic Analysis Platform for Malware", "author": ["P. Irolla", "E. Filiol"], "venue": "Android Applications on Real Devices", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2016}, {"title": "Morpheus: Automatically Generating Heuristics to Detect Android Emulators", "author": ["Y. Jing", "Z. Zhao", "G.-J. Ahn", "H. Hu"], "venue": "Proceedings of the 30th Annual Computer Security Applications Conference on - ACSAC \u201914, pages 216\u2013225", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2014}, {"title": "Marvin: Efficient and comprehensive mobile app classification through static and dynamic analysis", "author": ["M. Lindorfer", "M. Neugschwandtner"], "venue": "Computer Software and Applications Conference (COMPSAC), 2015 IEEE 39th Annual, 2:422\u2013433", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "BareDroid", "author": ["S. Mutti", "Y. Fratantonio", "A. Bianchi", "L. Invernizzi", "J. Corbetta", "D. Kirat", "C. Kruegel", "G. Vigna"], "venue": "Proceedings of the 31st Annual Computer Security Applications Conference on - ACSAC 2015, pages 71\u201380", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2015}, {"title": "Dissecting the Android Bouncer", "author": ["J. Oberheide", "C. Miller"], "venue": "Summercon 2012", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2012}, {"title": "AppsPlayground : Automatic Security Analysis of Smartphone Applications", "author": ["V. Rastogi", "Y. Chen", "W. Enck"], "venue": "CODASPY \u201913 (3rd ACM conference on Data and Application Security and Privac), pages 209\u2013220", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2013}, {"title": "Andromaly\u201d: A behavioral malware detection framework for android devices", "author": ["A. Shabtai", "U. Kanonov", "Y. Elovici", "C. Glezer", "Y. Weiss"], "venue": "Journal of Intelligent Information Systems, 38(1):161\u2013190", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2012}, {"title": "CopperDroid: Automatic Reconstruction of Android Malware Behaviors", "author": ["K. Tam", "S.J. Khan", "A. Fattori", "L. Cavallaro"], "venue": "Ndss, (February):8\u201311", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2015}, {"title": "Evading android runtime analysis via sandbox detection", "author": ["T. Vidas", "N. Christin"], "venue": "ASIA CCS \u201914 (9th ACM symposium on Information, computer and communications security), pages 447\u2013458", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2014}, {"title": "Droiddolphin: A dynamic android malware detection framework using big data and machine learning", "author": ["W.-C. Wu", "S.-H. Hung"], "venue": "Proceedings of the 2014 Conference on Research in Adaptive and Convergent Systems, RACS \u201914, pages 247\u2013252, New York, NY, USA", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2014}, {"title": "Android Malware Detection : an Eigenspace Analysis Approach", "author": ["S.Y. Yerima", "S. Sezer", "I. Muttik"], "venue": "Science and Information Conference, pages 1\u20137", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2015}, {"title": "High accuracy android malware detection using ensemble learning", "author": ["S.Y. Yerima", "S. Sezer", "I. Muttik"], "venue": "IET Information Security, 9(6):313\u2013320", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 12, "context": "However it has been previously demonstrated that the Bouncer dynamic analysis process can be bypassed by means of some simple anti-emulator techniques [26].", "startOffset": 151, "endOffset": 155}, {"referenceID": 16, "context": "The paper [30] discusses some methods that could be employed in order to detect the run-time environment thereby hindering dynamic analysis.", "startOffset": 10, "endOffset": 14}, {"referenceID": 9, "context": "Morpheus [22] has also exposed more than 10,000 detection heuristics based on some artifacts that can be used to detect the run-time analysis environments.", "startOffset": 9, "endOffset": 13}, {"referenceID": 1, "context": "Dynamic analysis tools that rely on emulators (or virtual devices) such as Dynalog [14] attempt to address the problem by changing properties of the environment to emulate a real phone as much as possible and to incorporate several behaviours to mimic a real phone.", "startOffset": 83, "endOffset": 87}, {"referenceID": 8, "context": "whilst useful, have been shown to be insufficient to completely tackle anti-emulation [21], [22], [31] .", "startOffset": 86, "endOffset": 90}, {"referenceID": 9, "context": "whilst useful, have been shown to be insufficient to completely tackle anti-emulation [21], [22], [31] .", "startOffset": 92, "endOffset": 96}, {"referenceID": 17, "context": "whilst useful, have been shown to be insufficient to completely tackle anti-emulation [21], [22], [31] .", "startOffset": 98, "endOffset": 102}, {"referenceID": 7, "context": "Several dynamic analysis tools such as TaintDroid [20], DroidBox [4], CopperDroid [29], Andrubis [17], AppsPlayground [27] have been proposed.", "startOffset": 50, "endOffset": 54}, {"referenceID": 15, "context": "Several dynamic analysis tools such as TaintDroid [20], DroidBox [4], CopperDroid [29], Andrubis [17], AppsPlayground [27] have been proposed.", "startOffset": 82, "endOffset": 86}, {"referenceID": 4, "context": "Several dynamic analysis tools such as TaintDroid [20], DroidBox [4], CopperDroid [29], Andrubis [17], AppsPlayground [27] have been proposed.", "startOffset": 97, "endOffset": 101}, {"referenceID": 13, "context": "Several dynamic analysis tools such as TaintDroid [20], DroidBox [4], CopperDroid [29], Andrubis [17], AppsPlayground [27] have been proposed.", "startOffset": 118, "endOffset": 122}, {"referenceID": 11, "context": "[25], have demonstrated the feasibility of device-based dynamic analysis to alleviate the problems of anti-emulation.", "startOffset": 0, "endOffset": 4}, {"referenceID": 1, "context": "For the emulator based learning, we utilized the DynaLog dynamic analysis framework described in [14].", "startOffset": 97, "endOffset": 101}, {"referenceID": 1, "context": "DynaLog components include an emulator-based analysis sandbox, an APK instrumentation module, Behaviour/features logging and extraction, App trigger/exerciser and log parsing and processing scripts [14].", "startOffset": 198, "endOffset": 202}, {"referenceID": 1, "context": "The emulator was enhanced as described in [14] by adding contact numbers, images, .", "startOffset": 42, "endOffset": 46}, {"referenceID": 17, "context": "In this subsection, we compare our results with those obtained from the DroidDolphin [31] and STREAM [15] dynamic analysis frameworks.", "startOffset": 85, "endOffset": 89}, {"referenceID": 2, "context": "In this subsection, we compare our results with those obtained from the DroidDolphin [31] and STREAM [15] dynamic analysis frameworks.", "startOffset": 101, "endOffset": 105}, {"referenceID": 3, "context": "Some previous machine learning based Android malware detection works such as [16], , [33], [13], [32], have considered API calls and Intents in their studies.", "startOffset": 77, "endOffset": 81}, {"referenceID": 19, "context": "Some previous machine learning based Android malware detection works such as [16], , [33], [13], [32], have considered API calls and Intents in their studies.", "startOffset": 85, "endOffset": 89}, {"referenceID": 0, "context": "Some previous machine learning based Android malware detection works such as [16], , [33], [13], [32], have considered API calls and Intents in their studies.", "startOffset": 91, "endOffset": 95}, {"referenceID": 18, "context": "Some previous machine learning based Android malware detection works such as [16], , [33], [13], [32], have considered API calls and Intents in their studies.", "startOffset": 97, "endOffset": 101}, {"referenceID": 10, "context": "Marvin [23] applies a machine learning approach to the extracted features from a combination of static and dynamic analysis techniques in order to improve the detection performance.", "startOffset": 7, "endOffset": 11}, {"referenceID": 14, "context": "Shabtai et al [28] presented a dynamic framework called Andromaly which applies several different machine learning algorithms, including random forest, naive Bayes, multilayer perceptron, Bayes net, logistic, and J48 to classify the Android applications.", "startOffset": 14, "endOffset": 18}, {"referenceID": 6, "context": "MADAM [19] is also a dynamic analysis framework that uses machine learning to classify Android apps.", "startOffset": 6, "endOffset": 10}, {"referenceID": 5, "context": "Crowdroid [18] is a cloud-based machine learning framework for Android malware detection.", "startOffset": 10, "endOffset": 14}, {"referenceID": 11, "context": "BareDroid [25] proposed a system designed to make baremetal analysis of Android applications feasible.", "startOffset": 10, "endOffset": 14}, {"referenceID": 8, "context": "Glassbox [21] also presented a dynamic analysis platform for analysing Android malware on real devices.", "startOffset": 9, "endOffset": 13}], "year": 2017, "abstractText": "The Android operating system has become the most popular operating system for smartphones and tablets leading to a rapid rise in malware. Sophisticated Android malware employ detection avoidance techniques in order to hide their malicious activities from analysis tools. These include a wide range of anti-emulator techniques, where the malware programs attempt to hide their malicious activities by detecting the emulator. For this reason, countermeasures against antiemulation are becoming increasingly important in Android malware detection. Analysis and detection based on real devices can alleviate the problems of anti-emulation as well as improve the effectiveness of dynamic analysis. Hence, in this paper we present an investigation of machine learning based malware detection using dynamic analysis on real devices. A tool is implemented to automatically extract dynamic features from Android phones and through several experiments, a comparative analysis of emulator based vs. device based detection by means of several machine learning algorithms is undertaken. Our study shows that several features could be extracted more effectively from the on-device dynamic analysis compared to emulators. It was also found that approximately 24% more apps were successfully analysed on the phone. Furthermore, all of the studied machine learning based detection performed better when applied to features extracted from the on-device dynamic analysis.", "creator": "LaTeX with hyperref package"}}}