{"id": "1704.02375", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Apr-2017", "title": "AppLP: A Dialogue on Applications of Logic Programming", "abstract": "This document describes the contributions of the 2016 Applications of Logic Programming Workshop (AppLP), which was held on October 17 and associated with the International Conference on Logic Programming (ICLP) in Flushing, New York City.", "histories": [["v1", "Fri, 7 Apr 2017 21:10:00 GMT  (49kb)", "http://arxiv.org/abs/1704.02375v1", "David S. Warren and Yanhong A. Liu (Editors). 33 pages. Including summaries by Christopher Kane and abstracts or position papers by M. Aref, J. Rosenwald, I. Cervesato, E.S.L. Lam, M. Balduccini, J. Lobo, A. Russo, E. Lupu, N. Leone, F. Ricca, G. Gupta, K. Marple, E. Salazar, Z. Chen, A. Sobhi, S. Srirangapalli, C.R. Ramakrishnan, N. Bj{\\o}rner, N.P. Lopes, A. Rybalchenko, and P. Tarau"]], "COMMENTS": "David S. Warren and Yanhong A. Liu (Editors). 33 pages. Including summaries by Christopher Kane and abstracts or position papers by M. Aref, J. Rosenwald, I. Cervesato, E.S.L. Lam, M. Balduccini, J. Lobo, A. Russo, E. Lupu, N. Leone, F. Ricca, G. Gupta, K. Marple, E. Salazar, Z. Chen, A. Sobhi, S. Srirangapalli, C.R. Ramakrishnan, N. Bj{\\o}rner, N.P. Lopes, A. Rybalchenko, and P. Tarau", "reviews": [], "SUBJECTS": "cs.PL cs.AI cs.LO cs.SE", "authors": ["david s warren", "yanhong a liu"], "accepted": false, "id": "1704.02375"}, "pdf": {"name": "1704.02375.pdf", "metadata": {"source": "CRF", "title": "AppLP: A Dialogue on Applications of Logic Programming", "authors": ["David S. Warren", "Yanhong A. Liu"], "emails": [], "sections": [{"heading": null, "text": "ar Xiv: 170 4.02 375v 1 [cs.P L] 7A pr2 017"}, {"heading": "AppLP: A Dialogue on Applications of Logic Programming", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "David S. Warren Yanhong A. Liu Stony Brook University", "text": "This document describes the contributions of the Applications of Logic Programming Workshop (AppLP) 2016, which took place on 17 October in conjunction with the International Conference on Logic Programming (ICLP) in Flushing, New York City."}, {"heading": "Focus and scope", "text": "The workshop focused on logic programming applications, i.e. application problems that are solved in whole or in part through the use of logical programming languages and systems, with a particular interest in exploring the simplicity of development and maintenance, clarity, performance and trade-offs between these features that are caused by programming using a logical paradigm. The aim was to provide guidance for future research progress and application developments.Real-world problems increasingly involve complex data and logic, making the use of logical programming increasingly advantageous for such complex applications. Despite the diversity of application areas, the common underlying requirements focus on the simplicity of development and maintenance, clarity, performance, integration with other tools and compromises between these characteristics. A better understanding of these important principles will advance logic programming research and lead to benefits for applications in logic programming. The workshop was organized around four main application areas: enterprise software, intelligent control systems, and depth analysis."}, {"heading": "Program and organization", "text": "Participants were invited to submit a one-page or two-page position paper explaining their application problems, solutions, rationality and challenges; in addition to an excellent submission for an invited lecture, six others were selected by the program committee to present their work in short presentations; they were encouraged to make their presentations available to non-specialists; others were invited to participate in panel discussions, in which the moderator addressed a short question to a panelist who presented his thoughts, giving the other panelists a short time to respond and contribute their thoughts; and at the end of the workshop, the floor was opened for a final open discussion; the workshop brought together researchers and software engineers who create applications using logical programming, and presented novel and challenging work, and participated in lively discussions. Approximately 35 people attended the morning session and about 55 in the afternoon."}, {"heading": "Summaries of Presentations and Discussions", "text": "Created by Christopher Kane, Stony Brook University"}, {"heading": "LogicBlox: Solver-Aided Declarative Programming \u2014 Invited talk by Molham Aref", "text": "This conversation led to the \"intelligent database\" system LogicBlox (developed by the company of the same name). It is organized as follows: (1) background information on enterprise systems and motivation for new systems such as LogicBlox, (2) key features of their language LogiQL, (3) a brief explanation of their methods for efficiently computing queries, and (4) results in comparing the performance of LogicBlox with other similar systems on standard benchmarks. LogicBlox \"companies are complex systems. Simplification models of key areas in their companies are required to manage this complexity and produce useful analyses. Current solutions, spreadsheets and enterprise systems, are too limited and coarse to handle the complexity effectively. In addition, current enterprise systems consist of many components that need to be carefully coordinated, making them difficult to use and maintain. LogicBlox strives to offer a unified system to avoid these problems.The modules of Blox, which are most suited to the domain of millions of business models, are not the logicBlox's primary users, are explained to the experts."}, {"heading": "Logic Programming in the Materials Handling and Logistics Industries \u2014 Presentation by Jeffrey Rosenwald", "text": "This year, it has reached the point where it will be able to leave the country without being able to leave it."}, {"heading": "Distributed Systems Management: Logic Programming Solution and Challenges \u2014 Presentation by Alessandra Russo", "text": "This conversation presents an evaluation of efforts to apply logical programming to distributed systems based on two application examples: access control guidelines and distributed computation. It is necessary to focus on two application examples that require a clear formalization of both policies and system states. Abductive analysis is also based on the assumption of the closed world, which prevents the analysis from showing a property that is fulfilled for each limited domain. There are several suggestions for applying logical programming to distributed computing. This conversation advocates a distributed state machine model of distributed compilation. Datalog plus an idea of time can be used to clearly represent states and state transitions."}, {"heading": "Applying ASP in Industrial Contexts: Lessons Learned and Current Directions \u2014 Invited talk by Francesco Ricca", "text": "This conversation offered reflections on experiences with Answer Set Programming (ASP) for industrial applications. ASP is a declarative programming paradigm for logic programming and non-monotonous reasoning using stable model semantics. There are several robust and efficient implementations, including DLV, Wasp, CModels and IDP. Applications include artificial intelligence, knowledge presentation and reasoning, information integration, data cleaning, robotics, etc. The conversation describes the use of DLV and Wasp to build industrial applications in many of these areas and gives sustained attention to two of these applications. First, the use of DLV to build a system, ZLog, that classifies customers of a call center and provides routes the most appropriate service. Categories are created by experts (call center operators) who provide a friendly GUI in ZLog, and then automatically translated into ASP rules."}, {"heading": "Building Large-Scale, Knowledge-Based Systems with ASP \u2014 Presentation by Gopal Gupta", "text": "This conversation describes several challenges that arise in building a large knowledge base, and argumentation systems that require an unnecessary address, and then suggests a possible solution. Most ASP systems rely on SAT solutions, and this approach raises several problems that are not feasible for a large knowledge base. SAT solvers will find the entire model of the program, which can contain a lot of unnecessary information, and hide the answer we can find arelooking for the model. Finally, smaller inconsistencies in the knowledge base will prevent finding an answer, but we cannot expect large knowledge bases to be completely free of inconsistencies. The proposed solution is a query-driven ASP system that supports the use of predicates."}, {"heading": "Declarative Probabilistic Programming \u2014 Invited talk by C. R. Ramakrishnan", "text": "In this talk, an extension of logic programming was presented to support probabilistic facts and probabilistic reasoning, and the current state of probabilistic programming languages and their application.Logic programming is good for providing an executable specification of operational semantics. For example, a simple set of rules covers the semantics of lambda calculation. Logic programming can also be used for abstract semantics. Context-insensitive pointer analysis can be specified with a small number of logical programming rules that look exactly like the formal inference rules used to define pointer analysis. Logic programming can also be used to build a model checker for logic with temporal properties, such as Computational Tree Logic (CTL). CTL contains formulas describing systems that describe systems and formulas describing paths (sequences of states)."}, {"heading": "Horn Clause Solvers for Network Verification \u2014 Presentation by Nikolaj Bj\u00f8rner", "text": "In this talk, the results of attempts to represent networks as datalog programs and then use horn clause solvers in Z3 to check the properties of the network were discussed. Z3 was used to find solutions to symbolic representations of problems in many areas. It was applied to the analysis of programs to determine whether an execution path is feasible (SAGE), whether policies fulfill a certain contract (SecGuru), etc. In addition, Z3 contains several specialized engines when the formulas to which it is applied are restricted horn clauses. Horn clause solution is useful because networks can be expressed as datalog programs that use restricted horn clauses in which packets are represented as differences from cubes. For example, entries in a routing table can be expressed by rules in which a predicate represents the current location of a packet and its source and destination in the body of the rule, and the next hop location is located in the header of the rule."}, {"heading": "Logic Programming from NLP to NLU? \u2014 Presentation by Paul Tarau", "text": "This speech describes the application of local programming systems in a natural way."}, {"heading": "Logic Programming in the Materials Handling and Logistics Industries", "text": "Jeffrey A. Rosenwald, Intelligrated, LLC For some time now, I have been using SWI Prolog to build systems that control machines that transport packages in warehouses of about one million square meters, such systems are used in large retail distribution centers, airports, and parcel and mail sorting centers."}, {"heading": "Characteristics of the application", "text": "\u2022 Systems are large - it is not uncommon for a sorter to have 20,000 alarm points. \u2022 High throughput - the range is typically 105 to 106 items per day \u2022 High accuracy - sorting errors are expensive. Error rate is about 1 in 104 items sorted. \u2022 Heterogeneous - different systems, platforms and vendors can be involved \u2022 Event controlled - everyone responds to events occurring on the machine \u2022 Soft real-time - end-to-end service times are measured in milliseconds. A certain variability in service time is tolerable within limits. \u2022 Error tolerant - non-byzantine failure that is late or lost (infinitely late) messages, repairable. \u2022 High availability - many sorters work 20 hours a day, 364 days a year. The execution phase of the control system is measured in years."}, {"heading": "Characteristics of the software design", "text": "\u2022 An agent-oriented design provides a collection of small stand-alone programs - a holon community organized in a holarchy. \u2022 Each holon has a sphere of influence and a protocol. \u2022 Holons communicate anonymously by message delivery using a publishing and subscribe regime that spans the entire CPU cluster. \u2022 Holons can be used via a cluster of multiple CPUs that provides hot standby redundancy, load balancing and automatic failover. \u2022 Holons in the system play the following roles: - two holons interact with Siemens S7 Programmable Logic Controllers (PLCs) via TCP / IP byte streams to provide system control, alarm and diagnostic monitoring - one holon is responsible for routing. That is, where an object should go when it is seen (through a barcode scanner) in a specific location and at a specific time on the machine - multiple holons offer different statuses for control and usage indicators."}, {"heading": "Characteristics of the implementation", "text": "\u2022 The system is fast, small, flexible, scalable, resilient, easily understandable and maintainable and virtually bulletproof. \u2022 The amount of source code is about 20K lines of prologue, which is almost an order of magnitude smaller than its Java-based counterpart. \u2022 IPC messages are human-readable. \u2022 The message pattern is loosely coupled. \u2022 Holons have almost no code intended for debugging. \u2022 Debugging of dynamic behavior is done by lurking / logging on the transmission channel. \u2022 Unit testing of Holons is a highly effective method for eliminating defects. \u2022 Poorly shaped messages do not enter the system. They are detected and discarded early. \u2022 Holons can be replaced on-the-fly without shutting down the system. \u2022 The design is inherently parallel. Effective use of multi-core CPUs is free. \u2022 Association, parsing and pattern matching are essential. \u2022 Non-deterministic content is addressable."}, {"heading": "Barriers to adoption", "text": "\u2022 Materials Handling is an old business with many large incumbents with vested interests \u2022 Choosing technological platforms and systems of this magnitude is an entrepreneurial decision, not a technical one. \u2022 Fear, uncertainty and doubt \u2022 Market penetration is likely to be revolutionary and not evolutionary \u2022 Irrational fear of open source in general and of the GPL in particular \u2022 Incompatibility of the GPL with business models that promote \"ownership\" of intellectual property. \u2022 Prologue is almost unknown in the US outside academic circles. \u2022 Angel investors and venture capitalists are reluctant to invest in ideas that do not provide a sustainable competitive advantage that can be sold. This usually means intellectual property: patents, copyrights or trade secrecy.Here is a video of a system used by Buemer / Crisplant (our European sister company)."}, {"heading": "Concurrent Logic Programming: Met and Unmet Promises", "text": "It is not only a matter of time before such a process will occur, but also whether such a process will occur. (...) It is a matter of time before such a process will occur. (...) It is a matter of time before such a process will occur. (...) It is a matter of time before such a process will occur. (...) It is a matter of time before such a process will occur. (...) It is a matter of time before such a process will occur. (...) It is a matter of time before such a process will occur. \"(...)"}, {"heading": "What Tweety-the-Penguin and Faulty Suitcases Tell Us", "text": "Marcello Balduccini, Drexel University: The fields of common sense, action and change reasoning, and constraint satisfaction have a long tradition in the knowledge representation community. These areas have often evolved independently of each other, but various forms of combining them have proven extremely useful for practical applications. In this talk, we will attempt to convey a sense of the breadth of applications that research offers at the interface of common sense, action and change reasoning, and constraint satisfaction. We will begin with our early and somewhat unexpected success in solving industrial problems with a planning and diagnostic system for the Space Shuttle, and then expand to later work on hybrid thinking, industrial scheduling, cybersecurity, and information gathering."}, {"heading": "Distributed Systems Management: Logic Programming Solutions and Challenges", "text": "Jorge Lobo, ICREA & Universitat Pompeu Fabra Alessandra Russo and Emil Lupu, Imperial College LondonWithin the last decade, distributed systems have rapidly evolved from applications running within local networks with simple client / server architecture to applications running over complex large networks and large-scale platforms in various administrative areas and geographical areas, a trend that will continue with the increasing use of embedded devices and technologies of the Internet of Things. Configuration and management of such systems is critical because of their openness and expandability, their dynamics - new components emerge, detach or migrate to new locations and the many different functions required for management - failure, security, performance, accounting, etc. To overcome these challenges, strict and scalable solutions are required, capable of adapting to the dynamic changes in the system and the environment in which they operate."}, {"heading": "Policies in system management", "text": "In fact, the fact is that most of them are able to assert themselves, that they are able to survive themselves, and that they are able to survive themselves."}, {"heading": "Security", "text": "In this context, it is worth mentioning that this is a typical example of this type of politics that a unit must fulfill in the future in order to submit to politics. An LP dialect is used to describe politics, and an inductive method tailored to analysis is introduced. To avoid conflicts and non-determinism, many management systems use orderly rule sets in their configuration. In such scenarios, the first \"matching\" rule is executed while the others are ignored; firewall rules are a classic example."}, {"heading": "Declarative distributed computing", "text": "More recently, we have focused our attention on a much broader class of problems in distributed systems and network management, with the goal of developing a general but strict framework for formalizing distributed algorithms, analyzing them and thinking about their correctness in situations where networks are dynamic (e.g. nodes can connect to the network and / or leave the network during execution); these are hard and open problems that are relevant not only to network management, but to any application that requires distributed calculations. Building on theoretical results from action theories [9] and their translation into causal logic, we were able to propose a declarative approach to distributed computing called D2C (see [13]). In D2C, distributed algorithms can be specified not only as action theories of flows and actions, but also as collections of (input / output) automata, and using the results to link distributed semantics and ASK-based distributed algorithms (ASK)."}, {"heading": "Directions of research", "text": "Much can be said about future research, but we would like to conclude with just three questions that can be used as discussion points for future work: \u2022 Is political learning an alternative to policy refinement? Better integration of numerical methods and logic programs will be helpful. \u2022 Is the perception that LP / Datalog is not efficient enough for high-throughput security applications real? \u2022 What does it mean to run distributed logic programming? Is declarative networking the appropriate abstraction - the implementation of distributed logic programs? Key problems common to the above three aspects of future research are the scalability of LP and the global adoption of the domain. For example, in declarative distributed computing, the analysis of the routing protocol, which is known to be a NP-hard problem when it is based only on ASP calculation, can only handle toy networks consisting of no more than four nodes."}, {"heading": "Applying ASP in Industrial Contexts: Lessons Learned and Current Directions", "text": "Nicola Leone and Francesco Ricca, University of CalabriaAnswer Set Programming (ASP) is an explanatory programming paradigm proposed in the field of logical programming and non-monotonous thinking. ASP has become a popular choice for solving complex problems, as evidenced by the numerous scientific applications based on ASP, and is now also attracting increasing interest outside the scientific community. We report on the development of some applications of ASP in an industrial context. We focus on the lessons we have learned and on current developments. We outline the benefits of ASP from a software development perspective and stress the importance of expanding tools and development environments to speed up and simplify the implementation of applications in the real world."}, {"heading": "Applying ASP in industrial contexts", "text": "In fact, it is the case that most of them will be able to move into a different world, in which they are able, in which they are able, in which they are able, in which they are able, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they, in which they live, in which they, in which they live, in which they, in which they live, in which they, in which they live, in which they live, in which they live, in which they live."}, {"heading": "Building Large-scale Knowledge-based Systems with ASP", "text": "This year it is so far that it will be able to solve the problems mentioned, \"he said in an interview with the taz.\" It is as if we have been able to find a solution, \"he said.\" But it is not as if we have been able to find a solution, \"he said.\" It is as if we have been able to find a solution that is able to find a solution. \""}, {"heading": "Horn Clause Solvers for Network Verification", "text": "Nikolaj Bj\u00f8rner, Nuno P. Lopes and Andrey Rybalchenko, Microsoft ResearchWe describe our experience with the use of horn clauses solvers with a particular focus on network verification. Z3 is a general purpose theory tester with a wealth of special motors. Some of these motors are dedicated to solving horn clauses. One application of horn clauses is symbolic model testing of software. Other applications are the verification of accessibility properties in packet-mediated networks. Stratified Datalog can easily encode such properties, with relationships reaching beyond packet headers. Packet headers are bit vectors in turn. We developed Network Optimized Datalog (NoD) to resolve horn clauses derived from network verification."}, {"heading": "Horn Clause Engines in Z3", "text": "In fact, most of them are able to determine for themselves how they have behaved."}, {"heading": "Technological Barriers and Aspirations", "text": "There are many possible extensions and improvements to the horn clause engines of Z3. For symbolic model verification, we have found that a concept of model-based projection is useful. It boils down to the partial elimination of quantifiers that use ground models as a starting point. In conjunction with proof-based semi-interpolation, it offers a powerful combination that is applicable to several theories, such as integers, realarithmetics, arrays, polynomial realarithmetics, and algebraic data types. There are many unexplored extensions of the use of model-based projection with proof-based interpolation. Our finite domain engines do not currently blend well with engines that are suitable for finite domains. Abstract interpretation provides clues to an approach that uses reduced products, but our current use of reduced products has not been successful in meshing SMT with abstract interpretation approaches."}, {"heading": "Logic Programming: from NLP to NLU?", "text": "In fact, it is the case that most of them are able to survive themselves if they do not put themselves in a position to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...) Most of them are able to survive themselves. (...)... (...)... (...)... (...)... (...)... (...)... ()... ()... ()... ()... ()... ()... ()... ())... () ()... () ()... () ()) () ()) (...) () ()) () ()) (...) () ()) ()) (...) ()) (...) () ()) ()) () () ()) ()) (...) (...) () ()) () () ()) () ()) () () ()) () ()) () () ()) () ()) () ()) () ()) () ()) () () ())) () ()) () ()) () ()) () () ()) () ()) ()) () ()) () ()) () () ()) ()) () ()) () ()) ()) () ()) () () ())) () () ()) () ())) () () ()) () ())) () () () ()) () () ()) ()) ()) () () ())) () ()) ()) () () () ()))) () () ()) ()) () () ()) ()) () () ()) () () ())) ()) () () ()) ()) () ())) () () ()))) () () ("}], "references": [{"title": "Knowledge Representation - Reasoning & Declarative Problem Solving", "author": ["C. Baral"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "The stable model semantics for logic programming", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "In International Conference and Symposium,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1988}, {"title": "Goal-directed execution of answer set programs", "author": ["K. Marple", "G. Gupta"], "venue": "Proc. PPDP", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "Dynamic Consistency Checking in Goal-Directed Answer Set Programming", "author": ["K. Marple", "G. Gupta"], "venue": "TPLP", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Computing Stable Models of Normal Logic Programs without Grounding", "author": ["K. Marple", "E. Salazar", "G. Gupta"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2017}, {"title": "A Physician Advisory System for Chronic Heart Failure management based on knowledge patterns", "author": ["Zhuo Chen", "Kyle Marple", "Elmer Salazar", "Gopal Gupta", "Lakshman Tamil"], "venue": "TPLP 16(5-6):604-618,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2016}, {"title": "Declarative routing: extensible routing with declarative queries", "author": ["B.T. Loo", "J.M. Hellerstein", "I. Stoica", "R. Ramakrishnan"], "venue": "Proceedings of the ACM SIGCOMM 2005 Conference on Applications,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2005}, {"title": "Checking beliefs in dynamic networks", "author": ["N. Lopes", "N. Bj\u00f8rner", "P. Godefroid", "K. Jayaraman", "G. Varghese"], "venue": "In NSDI,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "Lazy annotation revisited", "author": ["K.L. McMillan"], "venue": "Computer Aided Verification - 26th International Conference,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Scaling network verification using symmetry and surgery", "author": ["G.D. Plotkin", "N. Bj\u00f8rner", "N.P. Lopes", "A. Rybalchenko", "G. Varghese"], "venue": "Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "PageRank on Semantic Networks, with application to Word Sense Disambiguation", "author": ["R. Mihalcea", "P. Tarau", "E. Figa"], "venue": "In Proceedings of The 20st International Conference on Computational Linguistics (COLING", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2004}, {"title": "Graph-based Natural Language Processing and Information Retrieval", "author": ["R.F. Mihalcea", "D.R. Radev"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2011}, {"title": "The pagerank citation ranking: Bringing order to the web", "author": ["L. Page", "S. Brin", "R. Motwani", "T. Winograd"], "venue": "Technical report, Stanford Digital Library Technologies Project,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1998}, {"title": "Definite clause grammars for language analysis - a survey of the formalism and a comparison with transition networks", "author": ["F. Pereira", "D. Warren"], "venue": "Artificial Intelligence,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1980}, {"title": "LogiMOO: an Extensible Multi-User Virtual World with Natural Language Control", "author": ["P. Tarau", "K. De Bosschere", "V. Dahl", "S. Rochefort"], "venue": "Journal of Logic Programming,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1999}, {"title": "Using Lambda-Calculus to Represent Meanings in Logic Grammars", "author": ["D.S. Warren"], "venue": "In Proceedings of the 21st Annual Meeting on Association for Computational Linguistics,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1983}], "referenceMentions": [{"referenceID": 3, "context": "While the system-centric approach to programming distributed application is not exclusive to the paradigm of logic programming (in fact, it underlies many of Google\u2019s applications [4]), logic", "startOffset": 180, "endOffset": 183}, {"referenceID": 0, "context": "programming is proving particularly well-suited for this purpose [1, 5, 9, 10].", "startOffset": 65, "endOffset": 78}, {"referenceID": 6, "context": "programming is proving particularly well-suited for this purpose [1, 5, 9, 10].", "startOffset": 65, "endOffset": 78}, {"referenceID": 7, "context": "programming is proving particularly well-suited for this purpose [1, 5, 9, 10].", "startOffset": 65, "endOffset": 78}, {"referenceID": 6, "context": "One language that embraces this philosophy is CoMingle [9].", "startOffset": 55, "endOffset": 58}, {"referenceID": 2, "context": "first-order linear logic using a forward-chaining semantics, as found in languages based on multisetrewriting such as CHR [3].", "startOffset": 122, "endOffset": 125}, {"referenceID": 5, "context": "We used an advanced prototype of CoMingle [7] to implement a number of mobile applications.", "startOffset": 42, "endOffset": 45}, {"referenceID": 8, "context": ", [11] about performance bounds), we argue that such expectations of correctness have not been met.", "startOffset": 2, "endOffset": 6}, {"referenceID": 4, "context": "One promising idea is session types [6], which describe the communication pattern of a program, thereby allowing the implementation of a tool to statically catch messaging errors and deadlocks.", "startOffset": 36, "endOffset": 39}, {"referenceID": 1, "context": "Other techniques include logic-based modularity [2], which gives the programmer control over the scope of interactions (in contrast to the traditionally flat name-space of logic programming).", "startOffset": 48, "endOffset": 51}], "year": 2017, "abstractText": "Focus and scope The focus of the workshop was applications of logic programming, i.e., application problems, in whole or in part, that are solved by using logic programming languages and systems. A particular theme of interest was to explore the ease of development and maintenance, clarity, performance, and tradeoffs among these features, brought about by programming using a logic paradigm. The goal was to help provide directions for future research advances and application development. Real-world problems increasingly involve complex data and logic, making the use of logic programming more and more beneficial for such complex applications. Despite the diverse areas of application, their common underlying requirements are centered around ease of development and maintenance, clarity, performance, integration with other tools, and tradeoffs among these properties. Better understanding of these important principles will help advance logic programming research and lead to benefits for logic programming applications. The workshop was organized around four main areas of application: Enterprise Software, Control Systems, Intelligent Agents, and Deep Analysis. These general areas included topics such as business intelligence, ontology management, text processing, program analysis, model checking, access control, network programming, resource allocation, system optimization, decision making, and policy administration. The issues proposed for discussion included language features, implementation efficiency, tool support and integration, evaluation methods, as well as teaching and training.", "creator": "LaTeX with hyperref package"}}}