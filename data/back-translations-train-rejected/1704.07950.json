{"id": "1704.07950", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Apr-2017", "title": "Structured Production System (extended abstract)", "abstract": "In this extended abstract, we propose Structured Production Systems (SPS), which extend traditional production systems with well-formed syntactic structures. Due to the richness of structures, structured production systems significantly enhance the expressive power as well as the flexibility of production systems, for instance, to handle uncertainty. We show that different rule application strategies can be reduced into the basic one by utilizing structures. Also, many fundamental approaches in computer science, including automata, grammar and logic, can be captured by structured production systems.", "histories": [["v1", "Wed, 26 Apr 2017 02:39:07 GMT  (37kb,D)", "http://arxiv.org/abs/1704.07950v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["yi zhou"], "accepted": false, "id": "1704.07950"}, "pdf": {"name": "1704.07950.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Yi Zhou"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "In this context, it is worth mentioning that this is a very complex issue, a very complex, complex and complex matter."}, {"heading": "2 Structures, Terms and Assertions", "text": "We assume that readers are familiar with some basic terms and notations in set theory. A syntactical structure (in short) is a triple < I, C, O >, where I am a class of individuals representing objects in a scope; C is a class of concepts representing groups of individuals who have something in common. Essentially, concepts are set in the sense that for each concept C, C and I; O is a class of operators on individuals representing interactions between individuals and concepts in the application domain. Each operator is associated with a domain of form (C1,.., Cn), which represents all possible values that the operator O can operate, where Ci, 1 \u2264 i \u2264 i \u2264 n. Here, n is considered the rarity of O. For an n-like tuple (a1,.), a) matching domain system we are two."}, {"heading": "3 Rules and Structured Production Systems", "text": "In this section, we present the formal definition of structured production systems. First, we define production rules. A basic rule is from the rule form (1), except that prerequisites a1,.., and postal condition b are defined as affirmations defined in Section 2.Other than basic rules, we also introduce schema rules. \u2022 Similar to concepts that affect individuals, schema rules are used for group principles. A schema rule contains two parts: \u2022 a set of variable explanations of the formx, (3) where x is a variable that extends to all individuals in C. \u2022 a rule section of the form a1,.., a \u2192 b, (4) where a1,.., a and b are assertions, except that individuals usually occurred could be replaced by variables explained in the variable explanation. A schema rule above is usually explained as: a1,."}, {"heading": "4 Rule Application Strategies", "text": "The application of rules is a central issue in production systems. At a certain point, when the precursor of a rule is fulfilled, this rule can be triggered. It may be that many rules can be triggered at the same time, but only one rule can be applied. Then, the consequent action is carried out or the consequent follow-up condition can be achieved. However, in some cases, there may be different strategies for applying rules. For example, in cellular vending machines, the new status of each cell is updated simultaneously based on the current state of that cell itself and its neighborhood. Therefore, naive strategy for applying rules is not sufficiently flexible. In this section, we will show that this problem can be addressed in structured production systems by using well-shaped structures. First, we will follow the same basic strategy for applying rules as traditional production systems. Then, we will show that other strategies for applying rules, including the simultaneous application of rules, constant rules and much more, can be reduced to the fundamental problem by using syntactical structures."}, {"heading": "4.1 The basic strategy", "text": "We start with the basic application strategy for structured production systems. Similar to the traditional production system, only up to one basic rule can be applied at each stage. Again, a basic rule can be triggered if all assertions in its precursor are true in their current state. Nevertheless, the basic rule can be a real basic rule or a basic rule with corresponding assignment. If a basic rule is applied, its resulting t1 = t2 must be fulfilled by assigning the new value t1 to the existing value t2. A derivative d of a PLC is a sequence r1,..., rn of basic rules triggered and applied, denoted by d = r1;...; rn, where \";\" is an operator that combines rules."}, {"heading": "4.2 Constant rules", "text": "For example, the following rule simply counts the global time clock of a PLC. \u2192 t = t + 1, which means that after each stage, the counter t is increased by 1. For this rule to work, it must be applied to all levels. We call it the constant rule. A constant rule can be reduced to the basic rule application strategy by coupling it to all the other rules in a PLC. For this purpose, we introduce a special term structure called the conditional term. A conditional term is a triple < p, p, p, p >, where p is an assertion and t1 and t2 are two terms. If the claim is valid, this conditional term is t1; otherwise, it is equivalent to t2. By using a conditional term, any production rule of the form (1) in which the resulting tb = 1 = 2 is rewritten equally."}, {"heading": "4.3 Simultaneous rule application", "text": "In some cases, some rules can be applied at the same time. This can be reduced to the basic application of rules strategy by also using syntactical structures. To this end, we use groups of rules. \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212"}, {"heading": "4.4 Preference over rules", "text": "In some cases, you may wish that one rule is better than another. That is, if the first rule is applicable, then it is always triggered and applied. Otherwise, you can check whether the second rule is applicable or not. Applicable (r) means that the requirements of r are met, so that rule r can be triggered and applied. Then, we add a new precondition to rule r, which says that r is only applicable if rule r is not applicable at the moment, that is, applicable (r) must be wrong for rule r to be triggered and a1,... one of all its requirements. Let r be a basic rule, a basic rule, a basic rule that is applicable."}, {"heading": "4.5 Ordered rule application", "text": "Sometimes you may wish that the rules are applied in sequence, i.e., a rule can only be applied if another rule is already applied. A special case is the application of sequential rules, i.e. rules are applied successively. We show that the application of ordered rules and sequential rules can also be reduced to the strategy of applying basic rules. We introduce a new operator that is applied across all rules and that explicitly monitors whether a rule is applied or not. Let r be a basic rule of the form (1) and r is the rule that must be applied before the application of r, designated by r \"B.\" We rewrite r \"asa\" 1,... a \"n\" b, \"applied (r\"). and r as a1., \"a\" applied (r \") \u2192 b,\" applied (r). Depending on the construction, this rule can only be triggered if rule r \"is applied. After applying this rule r\""}, {"heading": "5 Capturing Existing Approaches", "text": "In this case, the fact is that most of them are able to survive themselves without there being a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process, in which there is a process."}, {"heading": "6 Handling Uncertainty", "text": "One of the main concerns of traditional production systems is that the production rule of form (1) is too simple to model complex areas of application, for example, to deal with uncertainty. In this section we show that this problem can be solved by using syntactic structures."}, {"heading": "6.1 Uncertainty associated with assertions", "text": "One way to integrate uncertainty into structured production systems is to add uncertainty information to claims. Thus, for example, Pr (\u03c6) is an assertion and Pr is a probability function whose domain is the concept of all assertions and whose value is a real number between 0 and 1. Consequently, Pr (\u03c6) is an individual. Uncertainty assertions can speak directly about uncertainty in structured production systems, which means that the probability of being true is 0.6. It is easy to see that other uncertainty assertions, such as fuzzy assertions, can be defined in a similar way.With uncertainty assertions, one can speak directly about uncertainty in structured production systems. For example, the following scheme means rulePr (Smoke (x) = 0.9, P r (father (x))) = 0.85 \u2192 Pr (cancer (x) = 0.45, where x (cancer) is a rule."}, {"heading": "6.2 Uncertainty associated with rules", "text": "An alternative way to deal with uncertainty in structured production systems is to link uncertainty information to rules, such as r being a rule. We are introducing a probability function Pr, whose domain is the concept of all rules and whose value is a real number between 0 and 1. Then Pr (r) is an individual, and consequently Pr (r) = 0.8 is a probability assertion, which means that the probability that r is true is 0.8. This can be extended to a probability function via derivatives. For example, we can define the following scheme rule to calculate the probabilities of derivatives d = r1;..; rn \u2192 Pr (d) = Pr (r1) \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 Pr (rn) (7), where d is above all derivatives and ri, 1 \u2264 i \u2264 n above all rules."}, {"heading": "6.3 Embedding probabilistic context-free grammar", "text": "Following the above ideas of dealing with uncertainty in the structured production system, one can see that many interesting approaches, such as the probabilistic context-free grammar, which is widely used in the processing of natural language, can also be considered structured production systems. Formally, a probabilistic context-free grammar is a quintuple < M, T, R, S, P >, where M is a series of intermediate symbols, including the initial symbol S, T a series of endsymbols deriving from M, R a set of rules of FormA \u2192 \u03b1, (8) where A-M and \u03b1 are a string above M-T, and finally P a probabilistic function from R to [0, 1]. A derivative is a sequence of rule applications that generate a string of endsymbols from the initial symbol S. At the beginning, the string is only the beginning symbol of S. Then, at each stage, it is the beginning symbol."}, {"heading": "7 Conclusions, Discussions and Future Work", "text": "This year, it has come to the point that it has never been as far as this year."}, {"heading": "Acknowledgement", "text": "The author thanks Prof. Fangzhen Lin for his comments on the first draft of this essay."}], "references": [{"title": "Natural Language Understanding (2Nd Ed.)", "author": ["James Allen"], "venue": "Benjamin-Cummings Publishing Co., Inc.,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1995}, {"title": "An Behavior-based Robotics", "author": ["Ronald C. Arkin"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1998}, {"title": "How bad is forming your own opinion", "author": ["David Bindel", "Jon M. Kleinberg", "Sigal Oren"], "venue": "Games and Economic Behavior,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "A robust layered control system for a mobile robot", "author": ["Rodney A. Brooks"], "venue": "Technical report,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1985}, {"title": "Programming Expert Systems in OPS5: An Introduction to Rule-based Programming", "author": ["Lee Brownston", "Robert Farrell", "Elaine Kant", "Nancy Martin"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1985}, {"title": "Building Expert Systems", "author": ["Frederick Hayes-Roth", "Donald A. Waterman", "Douglas B. Lenat"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1983}, {"title": "Opinion dynamics and bounded confidence: models, analysis and simulation", "author": ["Rainer Hegselmann", "Ulrich Krause"], "venue": "J. Artificial Societies and Social Simulation,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2002}, {"title": "Introduction to Expert Systems", "author": ["Peter Jackson"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1998}, {"title": "The estimation of stochastic context-free grammars using the inside-outside algorithm", "author": ["K. Lari", "S.J. Young"], "venue": "Computer Speech and Language,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1990}, {"title": "Expressiveness and tractability in knowledge representation and reasoning", "author": ["Hector J. Levesque", "Ronald J. Brachman"], "venue": "Computational Intelligence,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1987}, {"title": "Computation: Finite and Infinite Machines. Prentice-Hall, Inc", "author": ["Marvin L. Minsky"], "venue": "Upper Saddle River, NJ,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1967}, {"title": "Theory of Self-Reproducing Automata", "author": ["John Von Neumann"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1966}], "referenceMentions": [{"referenceID": 4, "context": "Production systems are widely applied in many application domains including expert systems [5, 6, 8], action selection in robotics [2, 4] and natural language processing [1].", "startOffset": 91, "endOffset": 100}, {"referenceID": 5, "context": "Production systems are widely applied in many application domains including expert systems [5, 6, 8], action selection in robotics [2, 4] and natural language processing [1].", "startOffset": 91, "endOffset": 100}, {"referenceID": 7, "context": "Production systems are widely applied in many application domains including expert systems [5, 6, 8], action selection in robotics [2, 4] and natural language processing [1].", "startOffset": 91, "endOffset": 100}, {"referenceID": 1, "context": "Production systems are widely applied in many application domains including expert systems [5, 6, 8], action selection in robotics [2, 4] and natural language processing [1].", "startOffset": 131, "endOffset": 137}, {"referenceID": 3, "context": "Production systems are widely applied in many application domains including expert systems [5, 6, 8], action selection in robotics [2, 4] and natural language processing [1].", "startOffset": 131, "endOffset": 137}, {"referenceID": 0, "context": "Production systems are widely applied in many application domains including expert systems [5, 6, 8], action selection in robotics [2, 4] and natural language processing [1].", "startOffset": 170, "endOffset": 173}, {"referenceID": 10, "context": ", Post canonical system, are Turing complete [11].", "startOffset": 45, "endOffset": 49}, {"referenceID": 3, "context": "Subsumption architecture Subsumption architecture [4] is an extension of traditional production system by allowing multi-layer of production rules to be applied simultaneously, where lower-level actions are sub-behaviors of higher-level ones.", "startOffset": 50, "endOffset": 53}, {"referenceID": 11, "context": "Cellular automata A cellular automaton [12, 13] consists of a grid of cells whose values range over a finite set.", "startOffset": 39, "endOffset": 47}, {"referenceID": 2, "context": ", opinion dynamics [3, 7] and, can be reformulated as structured production system as well.", "startOffset": 19, "endOffset": 25}, {"referenceID": 6, "context": ", opinion dynamics [3, 7] and, can be reformulated as structured production system as well.", "startOffset": 19, "endOffset": 25}, {"referenceID": 8, "context": "Following the above ideas of handling uncertainty in structured production system, one can see that many interesting approaches, for instance, probabilistic context-free grammar that is widely used in natural language processing [9], can be considered as structured production systems as well.", "startOffset": 229, "endOffset": 232}, {"referenceID": 0, "context": "where A \u2208 M and \u03b1 a string of symbols over M \u222a T , and finally, P a probabilistic function from R to [0, 1].", "startOffset": 101, "endOffset": 107}, {"referenceID": 9, "context": "In traditional symbolic AI, a critical dilemma is the tradeoff between expressiveness and efficiency (often measured by computational complexity) [10].", "startOffset": 146, "endOffset": 150}], "year": 2017, "abstractText": "In this extended abstract, we propose Structured Production Systems (SPS), which extend traditional production systems with well-formed syntactic structures. Due to the richness of structures, structured production systems significantly enhance the expressive power as well as the flexibility of production systems, for instance, to handle uncertainty. We show that different rule application strategies can be reduced into the basic one by utilizing structures. Also, many fundamental approaches in computer science, including automata, grammar and logic, can be captured by structured production systems.", "creator": "LaTeX with hyperref package"}}}