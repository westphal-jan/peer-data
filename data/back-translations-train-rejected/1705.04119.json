{"id": "1705.04119", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-May-2017", "title": "Memetic search for identifying critical nodes in sparse graphs", "abstract": "Critical node problems involve identifying a subset of critical nodes from an undirected graph whose removal results in optimizing a pre-defined measure over the residual graph. As useful models for a variety of practical applications, these problems are computational challenging. In this paper, we study the classic critical node problem (CNP) and introduce an effective memetic algorithm for solving CNP. The proposed algorithm combines a double backbone-based crossover operator (to generate promising offspring solutions), a component-based neighborhood search procedure (to find high-quality local optima) and a rank-based pool updating strategy (to guarantee a healthy population). Specially, the component-based neighborhood search integrates two key techniques, i.e., two-phase node exchange strategy and node weighting scheme. The double backbone-based crossover extends the idea of general backbone-based crossovers. Extensive evaluations on 42 synthetic and real-world benchmark instances show that the proposed algorithm discovers 21 new upper bounds and matches 18 previous best-known upper bounds. We also demonstrate the relevance of our algorithm for effectively solving a variant of the classic CNP, called the cardinality-constrained critical node problem. Finally, we investigate the usefulness of each key algorithmic component.", "histories": [["v1", "Thu, 11 May 2017 11:43:30 GMT  (109kb)", "http://arxiv.org/abs/1705.04119v1", null], ["v2", "Sat, 7 Oct 2017 13:15:03 GMT  (119kb)", "http://arxiv.org/abs/1705.04119v2", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["yangming zhou", "jin-kao hao", "fred glover"], "accepted": false, "id": "1705.04119"}, "pdf": {"name": "1705.04119.pdf", "metadata": {"source": "CRF", "title": "Memetic search for identifying critical nodes in sparse graphs", "authors": ["Yangming Zhou", "Jin-Kao Hao", "Fred Glover"], "emails": ["yangming@info.univ-angers.fr", "jin-kao.hao@univ-"], "sections": [{"heading": null, "text": "In this sense, it is important that people in individual countries and regions are able to abide by the rules that they apply in practice. In this sense, it is important that people in individual countries apply the same rules and principles that they apply in practice. In this sense, it is important that people in individual countries apply the same rules and principles that they apply in practice. In this sense, it is important that people in other countries apply the same principles and principles. In this sense, it is necessary that the same principles and principles and principles and principles apply in individual countries apply the same principles and principles that they apply in practice. In this sense, it is important that people in other countries apply the same principles and principles and principles. In this sense, it is necessary that the same principles and principles and principles and principles and principles apply in other countries of the same and principles and principles of the same countries and the same countries and principles apply the same principles and principles of the same countries and principles."}, {"heading": "II. PROBLEM DESCRIPTION AND NOTATION", "text": "Critical nodes in a graph G = (V, E) aim to delete a \"limited\" subset of nodes S'V to maximize or minimize predefined connectivity. Once the critical nodes in this set have been removed, the residual graph G [V / S] can be represented by a set of connected components H = (C1, C2).... CT}, where a connected component Ci is a set of nodes that are mutually connected (accessible by some paths), and no two nodes in different sets are connected to each other. Critical node problems have been extensively investigated over the past decade, and various connectivity measures have been studied according to special interests. These connectivity measures can be divided into three categories: (i) To optimize paired connectivity, i.e., the total number of nodes connected by a path."}, {"heading": "III. THE PROPOSED MEMETIC APPROACH FOR CNP", "text": "In this section, we introduce MACNP, an effective memetic algorithm for solving the classic problem of the critical node. The memetic framework is a powerful general method that has been successfully used to solve many NP-hard problems, such as chart coloring [31], graph partition [7], maximum diversity [46], [49] and square knapsack [13]. The memetic framework combines population-based search and single-track local search to achieve an appropriate balance between search intensification and diversification."}, {"heading": "A. Solution representation and evaluation", "text": "Given a graph G = (V, E) and an integer K (the maximum number of nodes that can be removed), a viable solution of the CNP can be represented by S = {vS (1), vS (2),..., vS (K) (1 6 S (i) 6 = S (j) 6 | V | for all 3 i 6 = j), where S (l) (1 6 l 6 K) is the index of a selected node in S. Therefore, the entire solution space contains all possible subsets S V, so that | S | 6 K. According to Equation (1), the corresponding objective function value f (S) for a viable solution calculates the total number of node pairs still connected in the residual graph G [V\\ S]. f (S) can be calculated using a modified depth search algorithm by identifying the connected components of a graph [26]."}, {"heading": "B. General scheme", "text": "The proposed MACNP algorithm consists of four main procedures: a population initialization procedure, a component-based neighborhood search procedure, a double backbone-based crossover procedure, and a ranking-based pool update procedure. MACNP assumes a number of different elite individuals to be achieved through the population initialization procedure (Section III-C. For each generation, a progeny solution is generated through the double backbone-based crossover procedure (Section III-E. This progeny solution is further improved by the component-based neighborhood search procedure (Section III-D) and then considered for adoption by the ranking-based pool update procedure (see Section III-F. The process repeats until a stop condition (e.g. a time limit) is met. The general framework of the proposed MACNP algorithm is presented in Algorithm 1, while its four procedures are described in each of the following sections."}, {"heading": "C. Population initialization", "text": "Our MACNP algorithm begins its search with an initial population of diverse and high-quality solutions. To construct such a population, we first randomly generate a viable solution (i.e. any set of K-nodes at most) and then improve it by using the component-based neighborhood search method described in Section III-D. We insert the improved solution into the population if it differs from the existing individuals in the population. Otherwise, we modify the improved solution by exchanging it until it is different from all existing individuals before we insert it into the population. We repeat the procedure p-mal to fill the population with p unique solutions."}, {"heading": "D. Component-based neighborhood search", "text": "In fact, it is such that it is a way in which most people are able to survive themselves. (...) Indeed, it is such that most people are able to survive themselves. (...) It is such that they are able to survive themselves. (...) It is such that they are able to survive themselves. (...) It is such that they are able to survive themselves. (...) It is such that they are able to survive themselves. (...) It is such that they are able to survive themselves}, {"heading": "E. Double backbone-based crossover", "text": "Are we looking around to see how the threat of the disease has developed in recent years?"}, {"heading": "F. Rank-based pool updating", "text": "Each progeny solution is presented for improvement by the component-based neighborhood search method set forth in Section III-D. Subsequently, we use a rank-based pool update strategy to decide whether the improved progeny solution S0 should be accepted in the population.This pool update strategy uses a score function to evaluate each individual, and the score function takes into account not only the quality of the progeny, but also their average distance from other individuals in the population.This strategy is inspired by the population management strategies presented in [31], [13], [49].The rank-based pool update strategy used in our algorithm is described in Algorithm 3. First, we temporarily insert S0 into the population P (line 3 of Alg.3), then we estimate all individuals in the population according to the score function [49] (line 4-8 of Alg.3), and identify the worst solution Sw with the highest score Sw-9 (finally, Sw-3)."}, {"heading": "G. Computational complexity of MACNP", "text": "To analyze the computational complexity of the proposed MACNP algorithm, we consider the most important steps in a generation in the main loop of algorithm 1. As shown in algorithm 1, our MACNP algorithm consists of four subroutines for each generation: parent selection, double backbone-based crossover, component-based neighborhood search, and rank-based pool update. Parent selection is very simple and takes time O (1). The double backbone-based crossover operator can be realized in time O (| V | K2). The computational complexity of the component-based neighborhood search is O (K (| V | + | E |) MaxIter, where MaxIter is the maximum allowable number of iterations without improvement. Rank-based pool update can be achieved in time O (p (K2 + p), where p is the population size)."}, {"heading": "IV. COMPUTATIONAL STUDIES", "text": "This section presents calculation studies to evaluate the performance of our MACNP algorithm and compare it with state-of-the-art algorithms."}, {"heading": "A. Benchmark instances", "text": "Our calculation studies are based on two benchmarks.1 Synthetic benchmark was originally presented in [41] and contains 16 cases divided into four categories: BarabasiAlbert (BA) diagrams, Erdos-Renyi (ER) diagrams, Forest Fire (FF) diagrams and Watts Strogatz (WS) diagrams. The real benchmark was first presented in [4] and consists of 26 real diagrams from various practical applications, including protein interaction, electronic circuitry, the air network, the railway network, the power distribution network, the social network and etc.1 Both synthetic and real benchmarks are publicly available at http: / / individual.utoronto.ca / mventresca / cnd.html and http: / / www.di.unito.it / aringhie / cnp.html."}, {"heading": "B. Experimental settings", "text": "All the experiments were carried out on a computer equipped with an Intel E5-2670 2.5 GHz processor and 2 GB of RAM running on the Linux system. Without using a compiler flag, the well-known DIMACS benchmark procedures dfmax.c2 were executed on our machine, which takes 0.19, 1.17 and 4.54 seconds to resolve the benchmark diagrams r300.5, r400.5 and r500.5, respectively. Our computational results were obtained by executing the MACNP algorithm with those in Table I. For our experiments, we chose a cut-off time as the stop condition, which is standard practice for solving CNPs [3], [4], [34], [48]. Given its stochastic nature, the proposed algorithm was executed 30 times as [41]."}, {"heading": "C. Performance of the MACNP algorithm", "text": "Table II shows the calculation results for MACNP on the synthetic and real benchmarks below the time limit tmax = 3600 seconds. Columns 1-3 describe for each instance their name (instance), the number of critical nodes (K) and the known best objective value (KBV) specified in the literature. Columns 4-8 describe the detailed results of MACNP, including the difference between the best objective value fbest2dfmax: ftp: / / dimacs.rutgers.edu / pub / dsj / clique and its known best value CNCNBV (i.e., the difference between the highest objective value fbest \u2212 KBV), the difference between the average objective value fbest2dfmax and KBV (i.e., the best objective performance of CNBV), the average time to achieve the objective value (tavg) and the average number of steps (i.e. the exchanges)."}, {"heading": "D. Comparison with the state-of-the-art algorithms", "text": "It is indeed the case that we will be able to go in search of a solution that meets the needs of the people."}, {"heading": "V. APPLICATION TO THE CARDINALITY-CONSTRAINED CRITICAL NODE PROBLEM", "text": "In this section, we show that our algorithm can also be used to solve other critical nodes by testing MACNP for the cardinality-limited critical node problem (CC-CNP).8 The experiments were conducted again using the synthetic and real-world benchmarks described in Section IV-A."}, {"heading": "A. Cardinality-constrained critical node problem", "text": "CC-CNP is a cardinality-limited version of the classic CNP [6]. CC-CNP aims to identify a minimum subset S V so that each connected component in the residual diagram G [V\\ S] contains at most W nodes where W is a given threshold. To approximate K \u0445, we solve a series of CC-CNP with decreasing K > K values. For a fixed K, we try to find a fixed S V of K-nodes whose distance minimizes the number of nodes in each connected component that exceeds the cardinality threshold W. To this end, we define an auxiliary function (minimization function) f \u2032: f \u2032 (S) = T \u0445 i = 1max (| Ci | \u2212 W, 0) (2), which calculates the total number of nodes via W in all T-connected components of the residual diagram. It is clear that if f \u2032 (S) is then a feasible solution of CC-S."}, {"heading": "B. Solving CC-CNP with MACNP", "text": "To solve CC-CNP, we slightly adjust MACNP and designate the new algorithm by MACC-CNP. In essence, we replace the objective function f used in MACNP with the minimization function f \u2032, which is defined by Equation (2). To solve CC-CNP, we start with an initial K value (obtained with a construction method, see below) and apply MACC-CNP to find a set of K-nodes whose removal minimizes the number of excess 9 nodes (i.e., the minimization of f \u2032 (S) = 0). If f \u2032 (S) = 0, then S is a feasible solution of CC-CNP. At this moment, we reduce K by one and solve the problem again. We repeat this process until no feasible solution can be found and report the last S found with f \u2032 (S) = 0. This general solution method is achieved by a popular approach to the classical gradient v = 0, which is inspired by a large scale problem [47]."}, {"heading": "C. Comparison with the state-of-the-art algorithms", "text": "For our comparative study, we compared our MACC CNP algorithm with the five state-of-the-art algorithms: greedy algorithms (G1 and G2) [4], genetic algorithm (GA) [4], multi-start giedy algorithm (CNA2) [33], fast heuristic (FastCNP) [48], fast heuristic (FastCNP) [48], 7 \"7\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"\" 4 \"4\" \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"5\" 6 \"6\" 6 \"6\" 6 \"6\" 6 \"6\" 6 \"7\" 7 \"7\" 7 \"7\" 7 \"\" \"7\" 7 \"4\" \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 4 \"4\" 6 \"6\" 6 \"6\" 6 \"6\" 6 \"6\" 6 \"6\" 7 \"7\" 7 \"7\" 7 \"7\" 7 \""}, {"heading": "VI. DISCUSSION", "text": "We will now analyze the main components of the proposed MACNP algorithm: the two-phase node exchange strategy and the node weighting scheme used in the component-based neighborhood search (sections VI-A and VI-B) and the backbone-based crossover (section VI-C). Based on the classic critical node problem, the experiments were conducted on 4 representative synthetic instances from different families (BA5000, ER941, FF500 and WS250) as well as 4 representative real-world instances (TreniR, H3000a, H4000 and Hepth) covering different classes of different sizes and degrees of difficulty."}, {"heading": "A. Benefit of the two-phase node exchange strategy", "text": "Our component-based neighborhood search breaks down the exchange process into two phases, i.e. the \"add-phase\" and \"removal phases,\" and executes them separately. To investigate the benefits of the two-phase node exchange strategy, we compare MACNP with an alternative algorithm, MACNP0, which uses the conventional two-node exchange strategy to link a node u-S (S is the current solution) with a node v-V\\ S. MACNP0 and MACNP thus share the same components except for the neighborhood.TABLE VI COMPARATIVE PERFORMANCE OF MACNP WITH MACNP0.MACNPInstance fbest favssec fbest favgstepssecBA5000 3083 3257.7 37.6 3083 3101.1 59954.5 ER941 257 257.0 134.9 257 257.0 & 21445.3 FF.5000 & BA.5000 301010101050,1050,256,0"}, {"heading": "B. Effectiveness of the node weighting scheme", "text": "To evaluate the effectiveness of the node weight scheme in component-based neighborhood search (CBNS), we compared our MACNP algorithm with its alternative MACNP1 algorithm, where the node weight scheme is disabled in CBNS. In MACNP1, we also split the exchange process into two phases (\"Add Phase\" and \"Removal Phase\") and execute them separately. However, in \"Add Phase,\" a node is randomly removed from a large connected component, rather than selecting the node according to the node weight scheme. Table VII shows the comparison results of MACNP and MACNP1 on the tested instances, based on four indicators: best objective value (fbest), average objective value (favg), average time to find the best objective value (tavg), average number of favorable steps required to find the CNMAMA1, average number of CNMAP value (CNMA1) less than CNMA1, where an objective value (CNMAMA1) is CNMA1, and average number of favorable steps is required to find the favorable one (table)."}, {"heading": "C. Rationale behind the double backbone-based crossover", "text": "To investigate the reasons for this turnout, we compare MACNP with an alternative version of MACNP2. MACNP2 is obtained by MACNP by replacing our backbone-based dedicated turnout with a single backbone-based turnout that only treats the common elements as the backbone. Specifically, the single backbone-based turnout operator first constructs a partial S0 solution by directly inheriting all the common elements of two parent solutions, and then completes the partial solution S0 by removing a node from a large component of the residual diagram up to | S0 | = K. The comparative performance of MACNP and its alternative MACNP2 in terms of the best lens value and average lens value are shown in the left and right part of Figure 1. X-axis shows instance V, and Yaxis shows the gap between our results (eight best values or averages) and the average lens value IV."}, {"heading": "VII. CONCLUSIONS AND FUTURE WORK", "text": "In this paper, we proposed an effective memetic search approach to solving the classical critical node problem (MACNP), which combines a component-based neighborhood search for local optimization, a two-phase crossover operator for recombining solutions, and a rank-based pool update strategy to ensure healthy population diversity. In addition, to ensure its effectiveness, the two-phase crossover solution not only maintains solution characteristics of parent solutions, but also introduces diversity by likely incorporating exclusive elements from parent solutions. To demonstrate the competitiveness of the proposed algorithm, we evaluated MACNP based on a wide range of synthetic and real benchmarks. The computational results showed that MACNP is clearly superior to state-of-the-art technology."}, {"heading": "ACKNOWLEDGMENT", "text": "We thank Dr. W. Pullan for kindly transmitting the source codes of the CNA1 and CNA2 algorithms."}], "references": [{"title": "Identifying critical nodes in undirected graphs: Complexity results and polynomial algorithms for the case of bounded treewidth", "author": ["B. Addis", "M. Di Summa", "A. Grosso"], "venue": "Discrete Applied Mathematics, 161(16):2349\u20132360, 2013.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Hybrid constructive heuristics for the critical node problem", "author": ["B. Addis", "R. Aringhieri", "A. Grosso", "P. Hosteins"], "venue": "Annals of Operations Research, 238(1-2):637\u2013649, 2016.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2016}, {"title": "A general evolutionary framework for different classes of critical node problems", "author": ["R. Aringhieri", "A. Grosso", "P. Hosteins", "R. Scatamacchia"], "venue": "Engineering Applications of Artificial Intelligence, 55:128\u2013145, 2016.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2016}, {"title": "Detecting critical nodes in sparse graphs", "author": ["A. Arulselvan", "C.W. Commander", "L. Elefteriadou", "P.M. Pardalos"], "venue": "Computers & Operations Research, 36(7):2193\u20132200, 2009.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2009}, {"title": "Cardinality-constrained critical node detection problem", "author": ["A. Arulselvan", "C.W. Commander", "O. Shylo", "P.M. Pardalos"], "venue": "Springer Optimization and Its Applications,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "A multilevel memetic approach for improving graph k-partitions", "author": ["U. Benlic", "J.-K. Hao"], "venue": "IEEE Transactions on Evolutionary Computation, 15(5):624\u2013642, 2011.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Identifying critical nodes in protein\u2013protein interaction networks", "author": ["V. Boginski", "C.W. Commander"], "venue": "Clustering Challenges in Biological Networks, pp. 153\u2013167, 2009.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2009}, {"title": "Identifying sets of key players in a social network", "author": ["S.P. Borgatti"], "venue": "Computational & Mathematical Organization Theory, 12(1):21\u201334, 2006.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2006}, {"title": "Local search with edge weighting and configuration checking heuristics for minimum vertex cover", "author": ["S. Cai", "K. Su", "A. Sattar"], "venue": "Artificial Intelligence, 175(9):1672 \u2013 1696, 2011.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2011}, {"title": "Two weighting local search for minimum vertex cover.", "author": ["S. Cai", "J. Lin", "K. Su"], "venue": "Proceedings of the AAAI-2015,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "System vulnerability assessment and critical nodes identification", "author": ["X. Chen"], "venue": "Expert Systems with Applications, 65:212\u2013220, 2016.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2016}, {"title": "Memetic search for the generalized quadratic multiple knapsack problem", "author": ["Y. Chen", "J.K. Hao"], "venue": "IEEE Transactions on Evolutionary Computation, 20(6):908\u2013923, 2016.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "The wireless network jamming problem", "author": ["C.W. Commander", "P.M. Pardalos", "V. Ryabchenko", "S. Uryasev", "G. Zrazhevsky"], "venue": "Journal of Combinatorial Optimization, 14(4):481\u2013498, 2007.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2007}, {"title": "Statistical comparisons of classifiers over multiple data sets", "author": ["J. Dem\u0161ar"], "venue": "Journal of Machine Learning Research, 7:1\u201330, 2006.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2006}, {"title": "On new approaches of assessing network vulnerability: hardness and approximation", "author": ["T.N. Dinh", "Y. Xuan", "M.T. Thai", "P.M. Pardalos", "T. Znati"], "venue": "IEEE/ACM Transactions on Networking, 20(2):609\u2013 619, 2012.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2012}, {"title": "Robust optimization of graph partitioning and critical node detection in analyzing networks", "author": ["N. Fan", "P.M. Pardalos"], "venue": "Lecture Notes in Computer Science, 6508:170\u2013183. 2010.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2010}, {"title": "An efficient local search heuristic with row weighting for the unicost set covering problem", "author": ["C. Gao", "X. Yao", "T. Weise", "J. Li"], "venue": "European Journal of Operational Research, 246(3):750\u2013761, 2015.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2015}, {"title": "Tabu search: A tutorial", "author": ["F. Glover"], "venue": "Interfaces, 20(1)74\u201394, 1990.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1990}, {"title": "Tabu search for nonlinear and parametric optimization (with links to genetic algorithms)", "author": ["F. Glover"], "venue": "Discrete Applied Mathematics, 49:231\u2013 255, 1994.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1994}, {"title": "Exterior path relinking for zero-one optimization", "author": ["F. Glover"], "venue": "International Journal of Applied Metaheuristic Computing, 5(3):1\u20138, 2014.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2014}, {"title": "Tabu Search", "author": ["F. Glover", "M. Laguna"], "venue": "C. Reeves (Ed.) Modern Heuristic Techniques for Combinatorial Problems, Blackwell Scientific Publishing, pp. 71\u2013140, 1993.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1993}, {"title": "A user\u2019s guide to tabu search", "author": ["F. Glover", "E. Taillard", "E. Taillard"], "venue": "Annals of Operations Research, 41(1):1\u201328, 1993.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 1993}, {"title": "Approximation algorithms for minimum k-cut", "author": ["N. Guttmann-Beck", "R. Hassin"], "venue": "Algorithmica, 27(2):198\u2013207, 2000.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2000}, {"title": "Memetic algorithms in discrete optimization", "author": ["J.-K. Hao"], "venue": "Handbook of Memetic Algorithms. Studies in Computational Intelligence 379,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2012}, {"title": "Algorithm 447: Efficient algorithms for graph manipulation", "author": ["J. Hopcroft", "R. Tarjan"], "venue": "Communications of the ACM, 16(6):372\u2013378, 1973.", "citeRegEx": "26", "shortCiteRegEx": null, "year": 1973}, {"title": "Finding critical nodes for inhibiting diffusion of complex contagions in social networks", "author": ["C.J. Kuhlman", "V.S. Anil Kumar", "M.V. Marathe", "S.S. Ravi", "D.J. Rosenkrantz"], "venue": "Lecture Notes in Computer Science, 6322:111\u2013127, 2010.", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2010}, {"title": "Existence theorems and approximation algorithms for generalized network security games", "author": ["V.A. Kumar", "R. Rajaraman", "Z. Sun", "R. Sundaram"], "venue": "Proc. of 2010 IEEE 30th International Conference on Distributed Computing Systems, IEEE, 2010, pp. 348\u2013357.", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2010}, {"title": "Cost-effective outbreak detection in networks", "author": ["J. Leskovec", "A. Krause", "C. Guestrin", "C. Faloutsos", "J. Vanbriesen", "N. Glance"], "venue": "Proc. of the 13th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pp. 420\u2013429, 2007.", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2007}, {"title": "Optimizing network attacks by artificial bee colony", "author": ["M. Lozano", "C. Garc\u0131\u0301a-Mart\u0131\u0301nez", "F.J. Rodr\u0131\u0301guez", "H.M. Trujillo"], "venue": "Information Sciences, 377:30 \u2013 50, 2017.", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2017}, {"title": "A memetic algorithm for graph coloring", "author": ["Z. L\u00fc", "J.-K. Hao"], "venue": "European Journal of Operational Research, 203(1):241\u2013250, 2010.", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2010}, {"title": "The breakout method for escaping from local minima", "author": ["P. Morris"], "venue": "Proceedings of the 11th AAAI, USA, July 11-15, 1993, pp. 40\u201345, 1993.", "citeRegEx": "32", "shortCiteRegEx": null, "year": 1993}, {"title": "Heuristic identification of critical nodes in sparse real-world graphs", "author": ["W. Pullan"], "venue": "Journal of Heuristics, 21(5):577\u2013598, 2015.", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2015}, {"title": "Heuristic algorithm for identifying critical nodes in graphs", "author": ["D. Purevsuren", "G. Cui", "N.N.H. Win", "X. Wang"], "venue": "Advances in Computer Science : an International Journal, 5(3):1\u20134, 2016.", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2016}, {"title": "Tabu search candidate list strategies in scheduling", "author": ["B. Rangaswamy", "A.S. Jain", "F. Glover"], "venue": "Operations Research/Computer Science Interfaces Series, 9:15\u2013233, 1998.", "citeRegEx": "35", "shortCiteRegEx": null, "year": 1998}, {"title": "On the discovery of critical links and nodes for assessing network vulnerability", "author": ["Y. Shen", "N.P. Nguyen", "Y. Xuan", "M.T. Thai"], "venue": "IEEE/ACM Transactions on Networking, 21(3):963\u2013973, 2013.", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2013}, {"title": "Polynomial-time algorithms for solving a class of critical node problems on trees and series-parallel graphs", "author": ["S. Shen", "J.C. Smith"], "venue": "Networks, 60(2):103\u2013119, 2012.", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2012}, {"title": "Branch and cut algorithms for detecting critical nodes in undirected graphs", "author": ["M.D. Summa", "A. Grosso", "M. Locatelli"], "venue": "Computational Optimization and Applications, 53(3):649\u2013680, 2012.", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2012}, {"title": "Studying connectivity properties in human protein\u2013protein interaction network in cancer", "author": ["V. Tomaino", "A. Arulselvan", "P. Veltri", "P.M. Pardalos"], "venue": "pathway,\u201c Optimization and Its Applications,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2012}, {"title": "Clause weighting local search for sat", "author": ["J. Thornton"], "venue": "Journal of Automated Reasoning, 35(1-3):97\u2013142, 2005.", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2005}, {"title": "Global search algorithms using a combinatorial unranking-based problem representation for the critical node detection problem", "author": ["M. Ventresca"], "venue": "Computers & Operations Research, 39(11):2763\u20132775, 2012.", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2012}, {"title": "A derandomized approximation algorithm for the critical node detection problem", "author": ["M. Ventresca", "D.M. Aleman"], "venue": "Computers & Operations Research, 43:261\u2013270, 2014.", "citeRegEx": "42", "shortCiteRegEx": null, "year": 2014}, {"title": "Efficiently identifying critical nodes in large complex networks", "author": ["M. Ventresca", "D. Aleman"], "venue": "Computational Social Networks, 2(1): 6, 2015.", "citeRegEx": "43", "shortCiteRegEx": null, "year": 2015}, {"title": "Exact identification of critical nodes in sparse networks via new compact formulations", "author": ["A. Veremyev", "V. Boginski", "E.L. Pasiliao"], "venue": "Optimization Letters, 8(4):1245\u20131259, 2014.", "citeRegEx": "44", "shortCiteRegEx": null, "year": 2014}, {"title": "An integer programming framework for critical elements detection in graphs", "author": ["A. Veremyev", "O.A. Prokopyev", "E.L. Pasiliao"], "venue": "Journal of Combinatorial Optimization, 28(1):233\u2013273, 2014.  13", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2014}, {"title": "A hybrid metaheuristic method for the maximum diversity problem", "author": ["Q. Wu", "J.-K. Hao"], "venue": "European Journal of Operational Research, 231(2):452\u2013464, 2013.", "citeRegEx": "46", "shortCiteRegEx": null, "year": 2013}, {"title": "Reinforcement learning based local search for grouping problems: A case study on graph coloring", "author": ["Y. Zhou", "J.-K. Hao", "B. Duval"], "venue": "Expert Systems with Applications, 64:412\u2013422, 2016.", "citeRegEx": "47", "shortCiteRegEx": null, "year": 2016}, {"title": "A fast heuristic algorithm for the critical node probelm", "author": ["Y. Zhou", "J.K. Hao"], "venue": "to appear in Genetic and Evolutionary Computation Conference Companion (GECOO\u201917), Berlin, Germany, July 15-19, 2017, (2 pages short paper).", "citeRegEx": "48", "shortCiteRegEx": null, "year": 2017}, {"title": "Opposition-based memetic search for the maximum diversity problem", "author": ["Y. Zhou", "J.K. Hao", "B. Duval"], "venue": "IEEE Transactions on Evolutionary Computation, DOI: 10.1109/TEVC.2017.2674800, 2017. (in press).", "citeRegEx": "49", "shortCiteRegEx": null, "year": 2017}], "referenceMentions": [{"referenceID": 34, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 95, "endOffset": 99}, {"referenceID": 10, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 101, "endOffset": 105}, {"referenceID": 40, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 124, "endOffset": 128}, {"referenceID": 6, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 158, "endOffset": 161}, {"referenceID": 37, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 163, "endOffset": 167}, {"referenceID": 3, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 190, "endOffset": 193}, {"referenceID": 25, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 195, "endOffset": 199}, {"referenceID": 12, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 224, "endOffset": 228}, {"referenceID": 28, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 246, "endOffset": 250}, {"referenceID": 7, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 279, "endOffset": 282}, {"referenceID": 27, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 284, "endOffset": 288}, {"referenceID": 15, "context": "CNPs have natural applications in a number of fields, such as network vulnerability assessment [36], [12], epidemic control [42], biological molecule studies [8], [39], network immunization [5], [27], network communications [14], network attacks [30] and social network analysis [9], [29], [17].", "startOffset": 290, "endOffset": 294}, {"referenceID": 7, "context": ", leaders of the organization or community) [9].", "startOffset": 44, "endOffset": 47}, {"referenceID": 3, "context": "CNP is known to be NP-hard on general graphs [5], even if there are polynomially solvable special cases [37].", "startOffset": 45, "endOffset": 48}, {"referenceID": 35, "context": "CNP is known to be NP-hard on general graphs [5], even if there are polynomially solvable special cases [37].", "startOffset": 104, "endOffset": 108}, {"referenceID": 3, "context": "Exact solution methods [5], [38], [44] guarantee the optimality of the solutions they find, but may fail on hard and large instances.", "startOffset": 23, "endOffset": 26}, {"referenceID": 36, "context": "Exact solution methods [5], [38], [44] guarantee the optimality of the solutions they find, but may fail on hard and large instances.", "startOffset": 28, "endOffset": 32}, {"referenceID": 42, "context": "Exact solution methods [5], [38], [44] guarantee the optimality of the solutions they find, but may fail on hard and large instances.", "startOffset": 34, "endOffset": 38}, {"referenceID": 3, "context": "For instance, an early heuristic starts with an independent set and uses a greedy criterion to remove vertices from the set [5].", "startOffset": 124, "endOffset": 127}, {"referenceID": 41, "context": "Another greedy algorithm using a modified depth-first search is proposed in [43].", "startOffset": 76, "endOffset": 80}, {"referenceID": 46, "context": "More recently, a number of metaheuristic algorithms have been reported for CNP, including iterated local search [3], [48], variable neighborhood search [3], multi-start greedy algorithm [33], greedy randomized adaptive search procedure with path relinking [34], and genetic algorithm [4].", "startOffset": 117, "endOffset": 121}, {"referenceID": 31, "context": "More recently, a number of metaheuristic algorithms have been reported for CNP, including iterated local search [3], [48], variable neighborhood search [3], multi-start greedy algorithm [33], greedy randomized adaptive search procedure with path relinking [34], and genetic algorithm [4].", "startOffset": 186, "endOffset": 190}, {"referenceID": 32, "context": "More recently, a number of metaheuristic algorithms have been reported for CNP, including iterated local search [3], [48], variable neighborhood search [3], multi-start greedy algorithm [33], greedy randomized adaptive search procedure with path relinking [34], and genetic algorithm [4].", "startOffset": 256, "endOffset": 260}, {"referenceID": 2, "context": "More recently, a number of metaheuristic algorithms have been reported for CNP, including iterated local search [3], [48], variable neighborhood search [3], multi-start greedy algorithm [33], greedy randomized adaptive search procedure with path relinking [34], and genetic algorithm [4].", "startOffset": 284, "endOffset": 287}, {"referenceID": 3, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 79, "endOffset": 82}, {"referenceID": 14, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 84, "endOffset": 88}, {"referenceID": 0, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 90, "endOffset": 93}, {"referenceID": 43, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 95, "endOffset": 99}, {"referenceID": 41, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 101, "endOffset": 105}, {"referenceID": 31, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 107, "endOffset": 111}, {"referenceID": 1, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 113, "endOffset": 116}, {"referenceID": 32, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 118, "endOffset": 122}, {"referenceID": 2, "context": ", the total number of pairs of nodes connected by a path in the residual graph [5], [16], [1], [45], [43], [33], [2], [34], [3], [4].", "startOffset": 129, "endOffset": 132}, {"referenceID": 35, "context": "(ii) To optimize the size of the largest connected component in the residual graph [37], [45], [33], [4].", "startOffset": 83, "endOffset": 87}, {"referenceID": 43, "context": "(ii) To optimize the size of the largest connected component in the residual graph [37], [45], [33], [4].", "startOffset": 89, "endOffset": 93}, {"referenceID": 31, "context": "(ii) To optimize the size of the largest connected component in the residual graph [37], [45], [33], [4].", "startOffset": 95, "endOffset": 99}, {"referenceID": 2, "context": "(ii) To optimize the size of the largest connected component in the residual graph [37], [45], [33], [4].", "startOffset": 101, "endOffset": 104}, {"referenceID": 35, "context": "(iii) To optimize the total number of connected components in the residual graph [37], [45], [4].", "startOffset": 81, "endOffset": 85}, {"referenceID": 43, "context": "(iii) To optimize the total number of connected components in the residual graph [37], [45], [4].", "startOffset": 87, "endOffset": 91}, {"referenceID": 2, "context": "(iii) To optimize the total number of connected components in the residual graph [37], [45], [4].", "startOffset": 93, "endOffset": 96}, {"referenceID": 3, "context": "However, most studies in the literature have focused on the classic critical node problem (denoted as CNP), which aims to minimize the pair-wise connectivity measure [5] and belongs to the first category mentioned above.", "startOffset": 166, "endOffset": 169}, {"referenceID": 41, "context": "In other words, the resulting residual graph should be composed of a relatively large number of connected components while each connected component has a similar size [43].", "startOffset": 167, "endOffset": 171}, {"referenceID": 4, "context": ", the cardinality-constrained critical node problem (CC-CNP) [6], which falls into the second category mentioned above.", "startOffset": 61, "endOffset": 64}, {"referenceID": 22, "context": "For example, the k-cut problem [24], which is a popular graph partitioning problem.", "startOffset": 31, "endOffset": 35}, {"referenceID": 26, "context": "Another similar problem is the minimum contamination problem, which minimizes the expected size of contamination by removing a set of edges of at most a given cardinality [28].", "startOffset": 171, "endOffset": 175}, {"referenceID": 29, "context": "The memetic framework is a powerful general method which has been successfully applied to solve many NP-hard problems, such as graph coloring [31], graph partition [7], maximum diversity [46], [49] and quadratic knapsack [13].", "startOffset": 142, "endOffset": 146}, {"referenceID": 5, "context": "The memetic framework is a powerful general method which has been successfully applied to solve many NP-hard problems, such as graph coloring [31], graph partition [7], maximum diversity [46], [49] and quadratic knapsack [13].", "startOffset": 164, "endOffset": 167}, {"referenceID": 44, "context": "The memetic framework is a powerful general method which has been successfully applied to solve many NP-hard problems, such as graph coloring [31], graph partition [7], maximum diversity [46], [49] and quadratic knapsack [13].", "startOffset": 187, "endOffset": 191}, {"referenceID": 47, "context": "The memetic framework is a powerful general method which has been successfully applied to solve many NP-hard problems, such as graph coloring [31], graph partition [7], maximum diversity [46], [49] and quadratic knapsack [13].", "startOffset": 193, "endOffset": 197}, {"referenceID": 11, "context": "The memetic framework is a powerful general method which has been successfully applied to solve many NP-hard problems, such as graph coloring [31], graph partition [7], maximum diversity [46], [49] and quadratic knapsack [13].", "startOffset": 221, "endOffset": 225}, {"referenceID": 24, "context": "f(S) can be computed with a modified depth-first search algorithm by identifying the connected components of a graph [26], requiringO(|V |+|E|) time.", "startOffset": 117, "endOffset": 121}, {"referenceID": 1, "context": "A traditional neighborhood for CNP is defined by the conventional exchange operator which swaps a node u \u2208 S with a node v \u2208 V \\ S [3], [2], [34], [41].", "startOffset": 136, "endOffset": 139}, {"referenceID": 32, "context": "A traditional neighborhood for CNP is defined by the conventional exchange operator which swaps a node u \u2208 S with a node v \u2208 V \\ S [3], [2], [34], [41].", "startOffset": 141, "endOffset": 145}, {"referenceID": 39, "context": "A traditional neighborhood for CNP is defined by the conventional exchange operator which swaps a node u \u2208 S with a node v \u2208 V \\ S [3], [2], [34], [41].", "startOffset": 147, "endOffset": 151}, {"referenceID": 24, "context": "To evaluate a neighboring solution, no incremental technique is known and a full computation from scratch is required by running the modified depth-first search algorithm of complexity O(|V |+ |E|) [26].", "startOffset": 198, "endOffset": 202}, {"referenceID": 21, "context": "2) Two-phase node exchange strategy: To further reduce the size of the above component-based neighborhood, we employ a two-phase node exchange strategy which relies on an extension of a candidate list strategy also called a neighborhood decomposition strategy or a successive filtration strategy [23], [35], [49].", "startOffset": 296, "endOffset": 300}, {"referenceID": 33, "context": "2) Two-phase node exchange strategy: To further reduce the size of the above component-based neighborhood, we employ a two-phase node exchange strategy which relies on an extension of a candidate list strategy also called a neighborhood decomposition strategy or a successive filtration strategy [23], [35], [49].", "startOffset": 302, "endOffset": 306}, {"referenceID": 47, "context": "2) Two-phase node exchange strategy: To further reduce the size of the above component-based neighborhood, we employ a two-phase node exchange strategy which relies on an extension of a candidate list strategy also called a neighborhood decomposition strategy or a successive filtration strategy [23], [35], [49].", "startOffset": 308, "endOffset": 312}, {"referenceID": 17, "context": ", [19]).", "startOffset": 2, "endOffset": 6}, {"referenceID": 38, "context": "Weighting is a popular technique, which has been used in a number of heuristic algorithms, such as clause weighting for satisfiability problems [40], edge weighting for the minimum vertex cover problem [11], and row weighting for the set cover problem [18].", "startOffset": 144, "endOffset": 148}, {"referenceID": 9, "context": "Weighting is a popular technique, which has been used in a number of heuristic algorithms, such as clause weighting for satisfiability problems [40], edge weighting for the minimum vertex cover problem [11], and row weighting for the set cover problem [18].", "startOffset": 202, "endOffset": 206}, {"referenceID": 16, "context": "Weighting is a popular technique, which has been used in a number of heuristic algorithms, such as clause weighting for satisfiability problems [40], edge weighting for the minimum vertex cover problem [11], and row weighting for the set cover problem [18].", "startOffset": 252, "endOffset": 256}, {"referenceID": 30, "context": "Our node weighing scheme follows the general penalty idea for constraint satisfaction problems, which was first used in this setting in Morris\u2019s breakout method [32].", "startOffset": 161, "endOffset": 165}, {"referenceID": 20, "context": ", the six frequency-based memory classes proposed earlier in [B] and their refinements in [22]).", "startOffset": 90, "endOffset": 94}, {"referenceID": 18, "context": "The modern conception embraces the principle of structured combinations introduced in [20], where solutions are combined by domain specific heuristics that map them into new solutions faithful to the structure of the problems considered.", "startOffset": 86, "endOffset": 90}, {"referenceID": 23, "context": ") As observed in [25], a successful crossover should be able to generate promising offspring solutions by inheriting good properties of the parents and introducing useful new features, while respecting the domain specific structure of the problem context .", "startOffset": 17, "endOffset": 21}, {"referenceID": 44, "context": "The concept of backbone has been used to design some successful crossover operators for subset selection problems [46], [49].", "startOffset": 114, "endOffset": 118}, {"referenceID": 47, "context": "The concept of backbone has been used to design some successful crossover operators for subset selection problems [46], [49].", "startOffset": 120, "endOffset": 124}, {"referenceID": 44, "context": "This double backbone-based crossover operator shares similar ideas with the crossovers proposed in [46], [49], i.", "startOffset": 99, "endOffset": 103}, {"referenceID": 47, "context": "This double backbone-based crossover operator shares similar ideas with the crossovers proposed in [46], [49], i.", "startOffset": 105, "endOffset": 109}, {"referenceID": 19, "context": "This strategy of combining solutions by introducing elements beyond their union is shared with the approach of exterior path relinking [21], which likewise has recently been found effective in discrete optimization.", "startOffset": 135, "endOffset": 139}, {"referenceID": 29, "context": "This strategy is inspired by the population management strategies presented in [31], [13], [49].", "startOffset": 79, "endOffset": 83}, {"referenceID": 11, "context": "This strategy is inspired by the population management strategies presented in [31], [13], [49].", "startOffset": 85, "endOffset": 89}, {"referenceID": 47, "context": "This strategy is inspired by the population management strategies presented in [31], [13], [49].", "startOffset": 91, "endOffset": 95}, {"referenceID": 47, "context": "3), then we evaluate all individuals of the population according to the score function [49] (lines 4-8 of Alg.", "startOffset": 87, "endOffset": 91}, {"referenceID": 39, "context": "Synthetic benchmark was originally presented in [41] and contains 16 instances classified into four categories: BarabasiAlbert (BA) graphs, Erdos-Renyi (ER) graphs, Forest-Fire (FF) graphs and Watts-Strogatz (WS) graphs.", "startOffset": 48, "endOffset": 52}, {"referenceID": 2, "context": "Real-world benchmark was first presented in [4] and consists of 26 real-world graphs from various practical applications, including protein interaction, the electronic circuit, flight network, train network, electricity distribution network, social network and etc.", "startOffset": 44, "endOffset": 47}, {"referenceID": 2, "context": "For our experiments, we adopted a cutoff time as the stopping condition, which is a standard practice for solving CNPs [3], [4], [34], [48].", "startOffset": 124, "endOffset": 127}, {"referenceID": 32, "context": "For our experiments, we adopted a cutoff time as the stopping condition, which is a standard practice for solving CNPs [3], [4], [34], [48].", "startOffset": 129, "endOffset": 133}, {"referenceID": 46, "context": "For our experiments, we adopted a cutoff time as the stopping condition, which is a standard practice for solving CNPs [3], [4], [34], [48].", "startOffset": 135, "endOffset": 139}, {"referenceID": 39, "context": "Given its stochastic nature, the proposed algorithm was independently executed 30 times on each test instance like [41].", "startOffset": 115, "endOffset": 119}, {"referenceID": 13, "context": "To analyze the experimental results, we resort to the wellknown two-tailed sign test [15] to check the significant difference on each comparison indicator between the compared algorithms.", "startOffset": 85, "endOffset": 89}, {"referenceID": 36, "context": "\u2217 Optimal results obtained by exact algorithm [38] within 5 days.", "startOffset": 46, "endOffset": 50}, {"referenceID": 36, "context": "6, which is far less than 5 days by the exact algorithm [38] (as reported in [3]).", "startOffset": 56, "endOffset": 60}, {"referenceID": 2, "context": "Note that in [4], a large time limit of tmax = 16000 seconds was used.", "startOffset": 13, "endOffset": 16}, {"referenceID": 1, "context": "We consider 7 reference algorithms, including the dynamic restarting greedy algorithms (Greedy3d and Greedy4d) [2], iterated local search (ILS) [3], variable neighborhood search (VNS) [3], genetic algorithm (GA) [4], multi-start greedy algorithm (CNA1) [33] and a fast heuristic (FastCNP) [48].", "startOffset": 111, "endOffset": 114}, {"referenceID": 2, "context": "We consider 7 reference algorithms, including the dynamic restarting greedy algorithms (Greedy3d and Greedy4d) [2], iterated local search (ILS) [3], variable neighborhood search (VNS) [3], genetic algorithm (GA) [4], multi-start greedy algorithm (CNA1) [33] and a fast heuristic (FastCNP) [48].", "startOffset": 212, "endOffset": 215}, {"referenceID": 31, "context": "We consider 7 reference algorithms, including the dynamic restarting greedy algorithms (Greedy3d and Greedy4d) [2], iterated local search (ILS) [3], variable neighborhood search (VNS) [3], genetic algorithm (GA) [4], multi-start greedy algorithm (CNA1) [33] and a fast heuristic (FastCNP) [48].", "startOffset": 253, "endOffset": 257}, {"referenceID": 46, "context": "We consider 7 reference algorithms, including the dynamic restarting greedy algorithms (Greedy3d and Greedy4d) [2], iterated local search (ILS) [3], variable neighborhood search (VNS) [3], genetic algorithm (GA) [4], multi-start greedy algorithm (CNA1) [33] and a fast heuristic (FastCNP) [48].", "startOffset": 289, "endOffset": 293}, {"referenceID": 2, "context": "1 GHz AMD Opteron 8425HE processors and 16 GB of RAM) [3], [4], which is slower than our machine with a factor 0.", "startOffset": 59, "endOffset": 62}, {"referenceID": 39, "context": "Note that, in our comparison, we do not consider the simulated annealing algorithm [41], the population-based incremental learning algorithm [41], and the greedy randomized adaptive search procedure with path relinking [34] because they are completely dominated by FastCNP proposed in [48].", "startOffset": 83, "endOffset": 87}, {"referenceID": 39, "context": "Note that, in our comparison, we do not consider the simulated annealing algorithm [41], the population-based incremental learning algorithm [41], and the greedy randomized adaptive search procedure with path relinking [34] because they are completely dominated by FastCNP proposed in [48].", "startOffset": 141, "endOffset": 145}, {"referenceID": 32, "context": "Note that, in our comparison, we do not consider the simulated annealing algorithm [41], the population-based incremental learning algorithm [41], and the greedy randomized adaptive search procedure with path relinking [34] because they are completely dominated by FastCNP proposed in [48].", "startOffset": 219, "endOffset": 223}, {"referenceID": 46, "context": "Note that, in our comparison, we do not consider the simulated annealing algorithm [41], the population-based incremental learning algorithm [41], and the greedy randomized adaptive search procedure with path relinking [34] because they are completely dominated by FastCNP proposed in [48].", "startOffset": 285, "endOffset": 289}, {"referenceID": 4, "context": "CC-CNP is a cardinality constrained version of the classic CNP [6].", "startOffset": 63, "endOffset": 66}, {"referenceID": 36, "context": "\u2217 Optimal results obtained by exact algorithm [38] within 5 days.", "startOffset": 46, "endOffset": 50}, {"referenceID": 29, "context": "This general solution procedure is inspired by a popular approach for solving the classic graph coloring problem [31], [47].", "startOffset": 113, "endOffset": 117}, {"referenceID": 45, "context": "This general solution procedure is inspired by a popular approach for solving the classic graph coloring problem [31], [47].", "startOffset": 119, "endOffset": 123}, {"referenceID": 2, "context": "Based on the synthetic and real-world benchmarks, we compared our MACC-CNP algorithm with the five state-ofthe-art algorithms: greedy algorithms (G1 and G2) [4], genetic algorithm (GA) [4], multi-start greedy algorithm (CNA2) [33], fast heuristic (FastCNP) [48].", "startOffset": 157, "endOffset": 160}, {"referenceID": 2, "context": "Based on the synthetic and real-world benchmarks, we compared our MACC-CNP algorithm with the five state-ofthe-art algorithms: greedy algorithms (G1 and G2) [4], genetic algorithm (GA) [4], multi-start greedy algorithm (CNA2) [33], fast heuristic (FastCNP) [48].", "startOffset": 185, "endOffset": 188}, {"referenceID": 31, "context": "Based on the synthetic and real-world benchmarks, we compared our MACC-CNP algorithm with the five state-ofthe-art algorithms: greedy algorithms (G1 and G2) [4], genetic algorithm (GA) [4], multi-start greedy algorithm (CNA2) [33], fast heuristic (FastCNP) [48].", "startOffset": 226, "endOffset": 230}, {"referenceID": 46, "context": "Based on the synthetic and real-world benchmarks, we compared our MACC-CNP algorithm with the five state-ofthe-art algorithms: greedy algorithms (G1 and G2) [4], genetic algorithm (GA) [4], multi-start greedy algorithm (CNA2) [33], fast heuristic (FastCNP) [48].", "startOffset": 257, "endOffset": 261}, {"referenceID": 31, "context": "The source code of CNA2 was provided by its author [33].", "startOffset": 51, "endOffset": 55}, {"referenceID": 2, "context": "For algorithms G1, G2 and GA, whose source codes are not available, we used the results reported in [4].", "startOffset": 100, "endOffset": 103}, {"referenceID": 13, "context": "To analyze these results, we calculated the number of instances (wins) in which MACC-CNP proved superior according to the twotailed sign test [15], as shown in the last row for each", "startOffset": 142, "endOffset": 146}, {"referenceID": 46, "context": "\u25e6 We adapted the FastCNP algorithm [48] for solving CC-CNP, and the new algorithm is denoted by FastCC-CNP (FA).", "startOffset": 35, "endOffset": 39}], "year": 2017, "abstractText": "Critical node problems involve identifying a subset of critical nodes from an undirected graph whose removal results in optimizing a pre-defined measure over the residual graph. As useful models for a variety of practical applications, these problems are computational challenging. In this paper, we study the classic critical node problem (CNP) and introduce an effective memetic algorithm for solving CNP. The proposed algorithm combines a double backbone-based crossover operator (to generate promising offspring solutions), a component-based neighborhood search procedure (to find high-quality local optima) and a rank-based pool updating strategy (to guarantee a healthy population). Specially, the component-based neighborhood search integrates two key techniques, i.e., two-phase node exchange strategy and node weighting scheme. The double backbone-based crossover extends the idea of general backbonebased crossovers. Extensive evaluations on 42 synthetic and realworld benchmark instances show that the proposed algorithm discovers 21 new upper bounds and matches 18 previous bestknown upper bounds. We also demonstrate the relevance of our algorithm for effectively solving a variant of the classic CNP, called the cardinality-constrained critical node problem. Finally, we investigate the usefulness of each key algorithmic component.", "creator": "gnuplot 4.6 patchlevel 4"}}}