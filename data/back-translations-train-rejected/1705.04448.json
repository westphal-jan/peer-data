{"id": "1705.04448", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-May-2017", "title": "R2-D2: ColoR-inspired Convolutional NeuRal Network (CNN)-based AndroiD Malware Detections", "abstract": "Machine Learning (ML) has found it particularly useful in malware detection. However, as the malware evolves very fast, the stability of the feature extracted from malware serves as a critical issue in malware detection. The recent success of deep learning in image recognition, natural language processing, and machine translation indicates a potential solution for stabilizing the malware detection effectiveness. In this research, we haven't extract selected any features (e.g., the control-flow of op-code, classes, methods of functions and the timing they are invoked etc.) from Android apps. We develop our own method for translating Android apps into rgb color code and transform them to a fixed-sized encoded image. After that, the encoded image is fed to convolutional neural network (CNN) for automatic feature extraction and learning, reducing the expert's intervention. Deep learning usually involves a large number of parameters that cannot be learned from only a small dataset. In this way, we currently have collected 1500k Android apps samples, have run our system over these 800k malware samples (benign and malicious samples are roughly equal-sized), and also through our back-end (60 million monthly active users and 10k new malware samples per day), we can effectively detect the malware. We believe that our methodology and the corresponding use of deep learning malware classification can overcome the weakness, and computational cost of the common static/dynamic analysis process or machine learning-based of Android malware detection approach.", "histories": [["v1", "Fri, 12 May 2017 06:28:12 GMT  (7709kb,D)", "http://arxiv.org/abs/1705.04448v1", "2017/05/12 Draft Version"], ["v2", "Fri, 21 Jul 2017 11:56:51 GMT  (7872kb,D)", "http://arxiv.org/abs/1705.04448v2", "2017/07/20 Version 2"], ["v3", "Fri, 1 Sep 2017 16:10:48 GMT  (6305kb,D)", "http://arxiv.org/abs/1705.04448v3", "2017/09/01 Version 3"]], "COMMENTS": "2017/05/12 Draft Version", "reviews": [], "SUBJECTS": "cs.CR cs.AI", "authors": ["tonton hsien-de huang", "hung-yu kao"], "accepted": false, "id": "1705.04448"}, "pdf": {"name": "1705.04448.pdf", "metadata": {"source": "CRF", "title": "R2-D2: ColoR-inspired Convolutional NeuRal Network (CNN)-based AndroiD Malware Detections", "authors": [], "emails": [], "sections": [{"heading": null, "text": "Index Terms - Deep Learning, Android Malware Detection, Convolutional Neural NetworkI. INTRODUCTIONSmartphones have gained popularity worldwide, including. Android is the most used operating system (OS), and is still expanding as a ferritory. International Data Corporation (IDC) 2016 Q3 Smartphones OS Marketshare Reports 86.8% of smartphones are Android phones, indicating a steady growth in market share, compared to 84.3% of market share in 2015 Q2 (see Fig. 1) [1]. Android stands out for its openness; users can choose to download apps from Google Play and third-party marketplace. Due to its popularity and openness, Android has attracted the attacker's attention. In purticalar malware (malware) we can easily spread and infect harmless devices. Security Report 201516 from AV-TEST Intitute reported that while the number of malware increased from 17 million in 2005 to 600 million in 2016, malware has increased significantly from 60,000 in 2016 to 60,000 in 2016."}, {"heading": "II. RELATED WORK", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. Android Malware Analysis Background", "text": "Android Package (APK) is the paella format used by Android OS for distributing and installing mobile apps. Essentially, APK fields are a kind of zip-formatted archive file. The structure of APK can be dissected as follows: \u2022 META-INIF /: contains the information description from the Java Jar file. \u2022 res /: contains the resource document. \u2022 libs /: contains the so-called library from Android Native Devel-opment (NDK) \u2022 AndroidManifest.xml: contains the configuration file about the authorization and the service. \u2022 classes.dex: contains the Dalvik byte code, i.e. Androidexecution file (NDK).asc: contains the binary resource file after com-pilation. Fig. 3 shows the compilation process of Android APK."}, {"heading": "B. Machine Learning-based Malware Detection", "text": "Machine learning is a technique that allows the machine to learn the pattern, build the model, and make the prediction by seeing only the raw data. Currently, the most common malware attacks are still attacks and privileged escalation, as a result, most machine learning malware detection features such as permissions for Android apps, API call and control flow charts (CFG) to distinguish between harmless and malicious apps. Usually, SVM and Random Forest are used to build the model to distinguish between harmless and malicious apps. Thus, DroidMiner [4] has a two-tiered flowchart to map the behavior of Android apps and capture the execution protocols behind the apps. Afterwards, the receptors are clustered to identify the similar code snippet. Lei Chen et al. [5] recognized features from Android API approach as reverse engineering data sets."}, {"heading": "C. Deep Learning", "text": "The recent success in the research and development of deep learning is attracting people's attention [6]. In 2015, Google published Tensorflow [7], a framework for implementing deep learning algorithms. Deep learning is a specific type of machine learning, or more precisely deep learning is an artificial neural network in which several layers of neurons with different weights and activation functions are linked to learn the hidden relationship between input and output. Intuitively, input data is transferred to the first layer, which generates different combinations of input [8]. These combinations are passed on to the second layer after the activation function, etc. Under the above methods, different combinations of outputs from the previous layer can be viewed as different representations of features. The weights of connections between layers are adjusted according to forward and backward propagation, depending on the distance or lesser function between the true output network and the neural label, which is calculated by the label."}, {"heading": "D. Deep Learning-based Malware Detection", "text": "Deep learning may once seem like taking care of the above problem. However, a pre-processing step, such as feature engineering, is still required before the model is learned. Furthermore, the dataset used to train the model may not accurately reflect the real world malware. For example, [14], suggest malware detection, which requires invoking the Windows API as input for the batch of auto-encoders and fine-tuning the model parameters [15]. Performs the function extraction, such as contextual byte features, string 2d histogram features, and PE metadata features. Then, the extracted features are fed into the DNN. With two hidden layers [16], static analysis is used to extract features such as required permission, sensitive API, and uses dynamic analysis to extract features such as action xclass load, action rent, and start-up service."}, {"heading": "III. OUR PROPOSED MECHANISM: R2-D2", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. The Advantage of Our Methodology", "text": "As mentioned above, the majority of malware detection is still based on static analysis of the source code and dynamic analysis by monitoring the execution of malware. However, these approaches are known to have better detection accuracy only for the same family of malware. In reality, Android malware has dramatic numerical growth and mutates at high speed and with various anti-analysis techniques, all of which make accurate detection extremely difficult. Therefore, we are trying to find the hidden relationship between the program execution logic and the sequence of function calls behind the malware by taking advantage of deep learning to accurately detect known and even unknown malware. Since the byte code in the classrooms and the RGB color code are both hexadecimal, we proposed a transformation algorithm that allows the byte code to be used as RGB color code. Afterwards, we apply CNN to the images for detection of malware 2."}, {"heading": "B. The Architecture of Our Methodology", "text": "Below we explain the algorithm procedures of R2-D2 in detail. First, we have collected the Android apps that are classified as benign and Trojan by our original back-end classification system, RiskTool, HackTool, AdWare, Banker, Clicker, Downloader, Dropper, FakeAV, Monitor, SMS, Spy, Ransom, Exploit and BackDoor. Then we decompress the apps to retrieve the classes and present them as byte code. Then we arrange the hexadecimal from byte code to RGB color code through the rulebook in Fig. 8. Finally, we get a color image (Fig. 9 and 10), and the images are fed to CNN and train a model for detecting Android malware. Fig. 11 is our system architecture."}, {"heading": "IV. EXPERIMENT RESULT", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. Experiment Environment and Datasets", "text": "We collect data from the Cheetah Mobile Security Research Lab. In our back-end system, we collect an average of 4,000 benign and 6,000 malicious samples per day. The duration of data collection ranges from October 2016 to February 2017, including approximately 1.5 million Android apps for our experiments. We point out in particular that the malware can have different variants and mutations depending on factors such as the cell-pone model, the Android version, and the orographic regions. Fig. 2 shows the basis for our classification according to the malware family and malware behavior. Fig. 13 shows the trend of different malware families, especially around the world, and Fig. 14 shows the trend of different malware families, especially in China and India. Fig. 15 shows the market share for different mobile phone models. Based on the above statistics, we can confirm that even the same malware family exhibits different behaviors in different geographical regions."}, {"heading": "B. Evaluations of different deep neural networks optimization", "text": "Based on our collected data, we evaluate the detection accuracy and performance using various optimization techniques. Note that the learning rate is fixed to be 0.01, the model optimization techniques are stochastic gradient descent (SGD), Nesterov Accelerated Gradient (NAG), AdaDelta and AdaGrad. From our experiment, we find that Inception v3 (show in Fig. 16) is almost always better than AlexNet (show in Fig. 17), with such as observation, we continue to compare Inception v3 with AdaDelta and Inception v3 with AdaGrad (see Fig. 18), and find that SGD is most suitable for our use. In particular, it leads to the sharpest increase in accuracy and the sharpest decrease in loss. In the end, we reach 98.4225% and 97.7081% accuracy (see Fig. 19).C. Validation on real environment, we are collected to influence the performance of our painting system."}, {"heading": "D. Real Case study", "text": "Specifically, we collect 87 Minecraft apps that are verified as malware by Google Play. These apps are active on Google Play as of January 2017, and the number of installations is approximately 1 million. The most prominent feature of these apps is the additional module for downloading and requesting permission from the device administrator. These apps then promote misleading advertising. These apps have been removed from Google Play, but if they can be detected in the first place without feature extraction, they can mitigate fluctuations in Android malware. Starting with Fig. 21, we can find that most of the above Minecraft malware is detected by approximately 16% sellers (10 / 60) on March 24, 2017. By 2017 / 03 / 30, approximately 32% sellers (20 / 60) can detect this malware. Thus, Fig. 22 shows the detection results of \"malware.\" However, even before these 75% features are detected, R2 software is not even state-of-the-art."}, {"heading": "E. Comparison with Exited Methodology", "text": "Finally, we compare our R2-D2 with DroidSieve. The evaluation devices include sample size, DR / FPR, Acc- and detection time. Fig. 23 shows that R2-D2 is slightly weaker than some others in DRFPR and Acc, but our R2D2 is trained on the basis of a much larger data set and adapts better to the real world application, as the model trained by smaller data sets cannot reflect reality. In addition, R2-D2 has the crucial advantage that it has a fast detection time of 0.5 seconds for each upcoming sample and requires manual feature engineering."}, {"heading": "V. CONCLUSION", "text": "The proposed proof-of-concept system has been tested in our internal environment. Results show that our detection system works very well to detect known Android malware and even unknown Android malware. We have also released our core product to provide convenient application scenarios for end users or businesses. Future work is to reduce the complex task and train high performance to save the Android malware from an enormous amount of computing effort. In addition, we will keep our research results on http: / / R2D2.TWMAN.ORG when there is an update."}, {"heading": "ACKNOWLEDGEMENT", "text": "This work would not have been possible without the valuable data set of the Cheetah Mobile, Leopard Mobile and Android CM Security Master (CM Security) apps."}], "references": [{"title": "Evading Android Runtime Analysis via Sandbox Detection", "author": ["T. Vidas", "N. Christin"], "venue": "Proceedings of the 9th ACM symposium on Information, computer and communications security (ASIA CCS \u201914), Kyoto, Japan, June, 2014.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "DroidMiner: Automated Mining and Characterization of Fine-grained Malicious Behaviors in Android Applications", "author": ["C. Yang", "Z. Xu", "G. Gu", "V. Yegneswaran", "P. Porras"], "venue": "Proceedings of the 19th European Symposium on Research in Computer Security (ESORICS\u201914), Wroclaw, Poland, September, 2014.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "A Probabilistic Discriminative Model for Android Malware Detection with Decompiled Source Code", "author": ["C. Lei", "C.S. Gates", "S. Luo", "L. Ninghui"], "venue": "IEEE Transactions on Dependable and Secure Computing, vol. 12, pp. 400-412, 2015.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2015}, {"title": "Mastering the game of Go with deep neural networks and tree search", "author": ["D. Silver", "A. Huang", "C.J. Maddison", "A. Guez", "L. Sifre", "G. van den Driessche"], "venue": "Nature, vol. 529, pp. 484-489, 2016.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2016}, {"title": "TensorFlow: a system for large-scale machine learning", "author": ["M. Abadi", "P. Barham", "J. Chen", "Z. Chen", "A. Davis", "J. Dean"], "venue": "Proceedings of the 12th USENIX conference on Operating Systems Design and Implementation, Savannah, GA, USA, 2016.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2016}, {"title": "Deep learning", "author": ["Y. LeCun", "Y. Bengio", "G. Hinton"], "venue": "Nature, vol. 521, pp. 436-444, 2015.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep learning\" An MIT Press book", "author": ["Ian Goodfellow", "Y. Bengio", "Aaron Courville"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2016}, {"title": "ImageNet Classification with Deep Convolutional Neural Networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "Advances in Neural Information Processing Systems 25 (NIPS 2012), Harrahs and Harveys, Lake Tahoe, 2012, pp. 1097-1105.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Very Deep Convolutional Networks for Large- Scale Image Recognition", "author": ["A.Z.K. Simonyan"], "venue": "International Conference on Learning Representations 2015 (ICLR2015), San Diego, CA, 2015.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2015}, {"title": "Wojna.,\u201dRethinking the Inception Architecture for Computer Vision.\u201din", "author": ["C. Szegedy", "V. Vanhoucke", "S. Ioffe", "J. Shlens"], "venue": "Proc. of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR), WA,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2016}, {"title": "Deep Residual Learning for Image Recognition", "author": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Las Vegas, Nevada, 2016.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "DL4MD: A Deep Learning Framework for Intelligent Malware Detection", "author": ["William Hardy", "Lingwei Chen", "Shifu Hou", "Yanfang Ye", "Xin Li"], "venue": "International Conference on Data Mining", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2016}, {"title": "Deep neural network based malware detection using two dimensional binary program features", "author": ["J. Saxe", "K. Berlin"], "venue": "2015 10th International Conference on Malicious and Unwanted Software (MALWARE), Fajardo, 2015.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}, {"title": "Droid-Sec: deep learning in android malware detection", "author": ["Z. Yuan", "Y. Lu", "Z. Wang", "Y. Xue"], "venue": "Proceedings of the 2014 ACM conference on SIGCOMM, Chicago, Illinois, USA, 2014.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2014}, {"title": "N-Gram- Based Detection of New Malicious Code", "author": ["T. Abou-Assaleh", "N. Cercone", "V. Keselj", "R. Sweidan"], "venue": "Proceedings of the 28th Annual International Computer Software and Applications Conference- Workshops and Fast Abstracts-Volume 02, 2004.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2004}, {"title": "N-gram analysis for computer virus detection", "author": ["D.K.S. Reddy", "A.K. Pujari"], "venue": "Journal in Computer Virology, vol. 2, pp. 231-239, 2006.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2006}, {"title": "Unknown Malcode Detection Using OPCODE Representation", "author": ["R. Moskovitch", "C. Feher", "N. Tzachar", "E. Berger", "M. Gitelman", "S. Dolev"], "venue": "Intelligence and Security Informatics: First European Conference, EuroISI 2008, Esbjerg, Denmark, December 3-5, 2008. Proceedings, D. Ortiz-Arroyo, H. L. Larsen, D. D. Zeng, D. Hicks, and G. Wagner, Eds., ed Berlin, Heidelberg: Springer Berlin Heidelberg, pp. 204-215, 2008.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2008}, {"title": "Malware images: visualization and automatic classification", "author": ["L. Nataraj", "S. Karthikeyan", "G. Jacob", "B.S. Manjunath"], "venue": "Proceedings of the 8th International Symposium on Visualization for Cyber Security, Pittsburgh, Pennsylvania, USA, 2011.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2011}, {"title": "Character-level convolutional networks for text classification", "author": ["X. Zhang", "J. Zhao", "Y. LeCun"], "venue": "Proceedings of the 28th International Conference on Neural Information Processing Systems, Montreal, Canada, 2015.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2015}, {"title": "Deep Android Malware Detection", "author": ["N. McLaughlin", "J.M. d. Rincon", "B. Kang", "S. Yerima", "P. Miller", "S. Sezer"], "venue": "Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy, Scottsdale, Arizona, USA, 2017.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2017}, {"title": "Inside of APK Protectors", "author": ["Bob Pan"], "venue": "RSA Conference 2015, [Online].Available : https : //www.rsaconference.com/writable/presentations/fileupload/spo\u2212 r09insideofapkprotectors.pdf.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2015}, {"title": "Dex Education: Practicing Safe Dex", "author": ["Caleb Fenton", "Tim Strazzere"], "venue": "Black Hat USA 2012, [Online].Available : https : //www.blackhat.com/html/bh \u2212 us \u2212 12/bh \u2212 us \u2212 12 \u2212 briefings.html#Strazzere.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2012}, {"title": "Android Hacker Protection Level 0", "author": ["Tim Strazzere", "Jon Sawyer"], "venue": "Defcon 22, [Online].Available : https : //www.defcon.org/images/defcon \u2212 22/dc \u2212 22 \u2212 presentations/Strazzere \u2212 Sawyer/DEFCON \u2212 22 \u2212 Strazzere\u2212and\u2212Sawyer\u2212Android\u2212Hacker\u2212Protection\u2212 Level\u2212 UPDATED.pdf.", "citeRegEx": "25", "shortCiteRegEx": null, "year": 0}], "referenceMentions": [{"referenceID": 0, "context": "However antianalysis techniques such as obfuscation, encryption, and antidebugging are also proposed by hacker to hide the malicious behaviours, and escaping the detection [3].", "startOffset": 172, "endOffset": 175}, {"referenceID": 1, "context": "For example, DroidMiner [4] has a two-step flow-chart to represent the behaviours of Android apps and capture the execution logs behind the apps.", "startOffset": 24, "endOffset": 27}, {"referenceID": 2, "context": "[5] extracted features from Android API invocation as a reverse engineering approach.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "The recent success in deep learning research and development attracts people\u2019s attention [6].", "startOffset": 89, "endOffset": 92}, {"referenceID": 4, "context": "In 2015, Google released Tensorflow [7], a framework of realizing deep learning algorithm.", "startOffset": 36, "endOffset": 39}, {"referenceID": 5, "context": "Intuitively, input data are feeded to the first layer that generates different combinations of the input [8].", "startOffset": 105, "endOffset": 108}, {"referenceID": 6, "context": "After the above learning process via multiple layers, we can derive a better understanding and representation of distinguishable features, enhancing the detection accuracy [9].", "startOffset": 172, "endOffset": 175}, {"referenceID": 7, "context": "The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13].", "startOffset": 70, "endOffset": 74}, {"referenceID": 8, "context": "The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13].", "startOffset": 74, "endOffset": 78}, {"referenceID": 9, "context": "The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13].", "startOffset": 78, "endOffset": 82}, {"referenceID": 10, "context": "The representation of CNN include AlexNet, VGG, GoogleNet, and ResNet [10][11][12][13].", "startOffset": 82, "endOffset": 86}, {"referenceID": 11, "context": "For example [14], propose a malware detection, which takes windows API invocation as the inputs of stack of Auto-Encoders and fine-tunes the model parameters [15].", "startOffset": 12, "endOffset": 16}, {"referenceID": 12, "context": "For example [14], propose a malware detection, which takes windows API invocation as the inputs of stack of Auto-Encoders and fine-tunes the model parameters [15].", "startOffset": 158, "endOffset": 162}, {"referenceID": 13, "context": "With two hidden layers, [16] uses static analysis to extract features such as required permission, sensitive API, and uses dynamic analysis to extract features such as actiondexclass-load, action-recrent and action-service start.", "startOffset": 24, "endOffset": 28}, {"referenceID": 14, "context": "For example, [17] and [18] first calculate the n-grams on the binary byte-code and then perform the malware detection based on k-nearest neighbor.", "startOffset": 13, "endOffset": 17}, {"referenceID": 15, "context": "For example, [17] and [18] first calculate the n-grams on the binary byte-code and then perform the malware detection based on k-nearest neighbor.", "startOffset": 22, "endOffset": 26}, {"referenceID": 16, "context": "[19] proposes to perform analysis on op-code of the reverse-engineering.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "For example, [20] proposes to first transform binary byte-code into grayscale image and the apply pattern recognition on the image.", "startOffset": 13, "endOffset": 17}, {"referenceID": 18, "context": "required, implying the impracticality [21].", "startOffset": 38, "endOffset": 42}, {"referenceID": 19, "context": "Recently, [22] also proposes a deep learning-based malware detection, where the op-code", "startOffset": 10, "endOffset": 14}, {"referenceID": 20, "context": "4 [23], [24], [25].", "startOffset": 2, "endOffset": 6}, {"referenceID": 21, "context": "4 [23], [24], [25].", "startOffset": 8, "endOffset": 12}, {"referenceID": 22, "context": "4 [23], [24], [25].", "startOffset": 14, "endOffset": 18}], "year": 2017, "abstractText": "Machine Learning (ML) has found it particularly useful in malware detection. However, as the malware evolves very fast, the stability of the feature extracted from malware serves as a critical issue in malware detection. The recent success of deep learning in image recognition, natural language processing, and machine translation indicates a potential solution for stabilizing the malware detection effectiveness. In this research, we haven\u2019t extract selected any features (e.g., the control-flow of op-code, classes, methods of functions and the timing they are invoked etc.) from Android apps. We develop our own method for translating Android apps into rgb color code and transform them to a fixed-sized encoded image. After that, the encoded image is fed to convolutional neural network (CNN) for automatic feature extraction and learning, reducing the expert\u2019s intervention. Deep learning usually involves a large number of parameters that cannot be learned from only a small dataset. In this way, we currently have collected 1500k Android apps samples, have run our system over these 800k malware samples (benign and malicious samples are roughly equal-sized), and also through our back-end (60 million monthly active users and 10k new malware samples per day), we can effectively detect the malware. We believe that our methodology and the corresponding use of deep learning malware classification can overcome the weakness, and computational cost of the common static/dynamic analysis process or machine learning-based of Android malware detection approach.", "creator": "LaTeX with hyperref package"}}}