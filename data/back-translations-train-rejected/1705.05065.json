{"id": "1705.05065", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-May-2017", "title": "AirSim: High-Fidelity Visual and Physical Simulation for Autonomous Vehicles", "abstract": "Developing and testing algorithms for autonomous vehicles in real world is an expensive and time consuming process. Also, in order to utilize recent advances in machine intelligence and deep learning we need to collect a large amount of annotated training data in a variety of conditions and environments. We present a new simulator built on Unreal Engine that offers physically and visually realistic simulations for both of these goals. Our simulator includes a physics engine that can operate at a high frequency for real-time hardware-in-the-loop (HITL) simulations with support for popular protocols (e.g. MavLink). The simulator is designed from the ground up to be extensible to accommodate new types of vehicles, hardware platforms and software protocols. In addition, the modular design enables various components to be easily usable independently in other projects. We demonstrate the simulator by first implementing a quadrotor as an autonomous vehicle and then experimentally comparing the software components with real-world flights.", "histories": [["v1", "Mon, 15 May 2017 04:06:22 GMT  (5860kb,D)", "http://arxiv.org/abs/1705.05065v1", null], ["v2", "Tue, 18 Jul 2017 05:30:28 GMT  (9482kb,D)", "http://arxiv.org/abs/1705.05065v2", "Accepted for Field and Service Robotics conference 2017 (FSR 2017)"]], "reviews": [], "SUBJECTS": "cs.RO cs.AI cs.CV cs.SY", "authors": ["shital shah", "debadeepta dey", "chris lovett", "ashish kapoor"], "accepted": false, "id": "1705.05065"}, "pdf": {"name": "1705.05065.pdf", "metadata": {"source": "CRF", "title": "AirSim: High-Fidelity Visual and Physical Simulation for Autonomous Vehicles", "authors": ["Shital Shah", "Debadeepta Dey", "Chris Lovett", "Ashish Kapoor"], "emails": ["akapoor@microsoft.com"], "sections": [{"heading": "1 Introduction", "text": "Recently, paradigms such as enhanced learning [18], learning-by-demonstration [14, 9] and transfer learning [23] have emerged as a natural means of training various robot systems. One of the most important challenges with these techniques is the high degree of complexity - the amount of training data required to learn useful behaviors is often prohibitively high. To make matters worse, autonomous vehicles are often unsafe and expensive to operate during the training phase. In order to operate seamlessly in the real world, the robot needs to transfer the learning it learns in the simulation. Currently, this is a non-trivial task, as simulated perception, environments and actuators are often simplifying and lack the richness or diversity of the real world. For robots aiming to reproduce computer vision in out-1, 2, 3, 4, Microsoft Research, 4, Microsoft Research, WA, USA E-mail: hospitals, dey, vcloakoor 170 @ Xioft5.0.com, the dynamics of the world."}, {"heading": "2 Related Work", "text": "While a comprehensive review of the simulators currently in use goes beyond the scope of this paper, we mention a few notable recent work that is closest to our environment and strongly influences this work. Gazebo [19] was one of the most popular simulation platforms. It has a wide range of capabilities and modular design, including the ability to simulate various physical motors, a variety of sensor models, and the ability to create 3D virtual worlds. Gazebo goes beyond monolithic rigid body vehicles and can be used to simulate more general robots with left-and-joints architecture such as complex manipulator arms or bifurcated robots. While Gazebo is fairly feature-rich, it is difficult to create large complex environments that are closer to the real world or platforms such as Unreal Engine or Unity as a rendering layer natively.Other notable efforts include Hector [21], which focuses primarily on ROS and Gazebo simulators."}, {"heading": "3 Architecture", "text": "In fact, it is so that most of them are able to move, move, move and move. Most of them are able to move, move and move, and most of them are able to move, move and move."}, {"heading": "3.1 Vehicle Model", "text": "AirSim provides an interface to define vehicles as rigid bodies, in which the actuators are modeled as sources of forces and torques. It includes parameters such as mass, inertia, coefficients for linear and angular resistance, friction and restitution coefficients, etc., and is used by physics to calculate rigid body dynamics. Formally, a vehicle is defined as a collection of K-vertices placed in positions {r1,.., rk} and normal {n1,.., nk}, each of which receives a control input {u1,.., uk}. Forces and torques from vertices are always generated in the same direction as their corresponding norms. Note, however, that the positions and norms may change during the simulation. Figure 3 shows how a quadrotor can be represented as a collection of four vertices."}, {"heading": "3.2 Environment", "text": "The vehicle is exposed to various physical phenomena, including gravity, air density, air pressure and magnetic field. Although it is possible to build mathematically expensive models of these phenomena that are very accurate, we focus our attention on models that are accurate enough to enable real-time operation with hardware-in-the-loop."}, {"heading": "3.2.1 Gravity", "text": "While many models use a constant number to model gravity, it varies in complex ways, as models such as GRACE [26] show. These variations may not matter for most ground-based vehicles or low-altitude vehicles, but it is relatively inexpensive to build a more accurate model. Formally, we approach gravitational acceleration g at height h by applying the binomial theorem to Newton's law of gravity and neglecting the higher forces: g = g0 \u00b7 R2e (Re + h) 2 \u2248 g0 \u00b7 (1 \u2212 2 hRe).Here Re is the radius of the earth and g0 is the gravitational constant measured on the surface."}, {"heading": "3.2.2 Magnetic Field", "text": "The World Magnetic Model (WMM) model [12] of the National Oceanic and Atmospheric Administration (NOAA) is one of the most well-known magnetic models of the Earth. Unfortunately, the latest model WMM2015 is quite complex and computationally expensive for real-time applications. We have implemented the tilted dipole model, in which we assume the Earth as the perfect dipolar sphere, ignoring all notions of the first order to derive magnetic field estimates using spherical geometry. This model allows us to simulate the variation of the magnetic field while moving in space, as well as areas that are often problematic, such as polar regions. Given a geographical latitude, we can calculate the longitude and altitude h (from the Earth's surface), first calculating the magnetic co-longitude of the Earth by determining the magnetic co-longitude of the Earth: cosmic co-longitude of the Earth: cosmic co-longitude + indicators."}, {"heading": "3.2.3 Air Pressure and Density", "text": "The relationship between the altitude and pressure of the Earth's atmosphere is complicated due to the presence of many different layers, each with its own individual characteristics. For the pressure, we use the US standard atmospheric model from 1976 [25] for altitudes below 51 kilometres and switch to [3] for the model up to 86 km. Then the air density at standard pressure P and temperature is T \u03c3 = PR \u00b7 T (R is the specific gas constant)."}, {"heading": "3.3 Physics Engine", "text": "The kinematic state of the body is expressed in 6 variables: position, orientation, linear velocity, linear acceleration, angular velocity and angular acceleration. The aim of the physics engine is to capture the kinematic state of each body along with forces and torques and to calculate the next kinematic state. We strive for an efficient physics engine that can provide a high frame rate (1000 Hz). A higher frame rate is desirable to enable real-time simulation applications such as human-controlled flights, supported by software-driven functions such as automatic emergency maneuvers. Therefore, we implement a physics engine that avoids the additional complexity of a generic motor that allows us to accurately control performance and make compromises that best meet our requirements to simulate vehicles as rigid bodies."}, {"heading": "3.3.1 Linear and Angular drag", "text": "Since the vehicle moves in the presence of air, the linear and angular resistance have significant effects on the dynamics of the body. The simulator calculates the size of the linear air resistance force on the body according to the equation of air resistance [27]: | Fd | = 1 2 \u03c3 | v | 2ClinA. Here, Clin is the linear air resistance coefficient, A is the vehicle cross-section and \u03c3 is the air density. This air resistance force acts in the opposite direction to the velocity vector vector vThe calculation of the angular resistance for any shape remains complex and computationally intensive. Many existing engines of physics use a small but often arbitrary damping constant as a substitute for the calculation of the actual angle resistance. We provide simple but better approximations to model the angular resistance motion for any shape. Consider an infinitesimal surface area that experiences the angular velocity in the extremity of the body."}, {"heading": "3.3.2 Accelerations", "text": "In addition to the braking forces and torques, we must also take into account the forces Fi and the torques \u03c4i present on the vehicle at the apex ri relative to the centre of gravity (see Section 3.1).Thus, we calculate the net force and torque as follows: Fnet = \u2211 i Fi + Fd and \u03c4net = \u2211 i [\u03c4i + ri \u00b7 Fi] + \u03c4dWe can calculate the total linear and angular acceleration.The angular acceleration is derived from Euler's equation of rotation: \u03b1 = I \u2212 1 \u00b7 (\u03c4net \u2212 (\u03c9 \u00b7 (I \u00b7 \u03c9))), where I am the inertial tensor. We obtain the linear acceleration by applying Newton's second law and then adding the gravitational vector to calculate the net acceleration, a = Fnet / m + g."}, {"heading": "3.3.3 Integration", "text": "We update the position pk + 1 of the body to time k + 1 by integrating the velocity from the previous time step k. In our implementation, we use verlet integration instead of stanchion Kutta for stability and simplicity, and are almost as efficient as the Euler integration (see [11] for details). Formally, vk + 1 = vk + dt \u00b7 ak / 2 pk + 1 = pk + dt \u00b7 vk + 1The angular velocity is updated in a similar way: \u03c9k + 1 = \u03c9k + dt \u00b7 \u03b1k / 2. However, updating the orientation is not easy. One of the existing approaches maintains the orientation as a rotation matrix that is updated at each time step, but this results in a slow drift that must be corrected at regular intervals using expensive calculations. The alternative is to maintain rotations as quaternion, which is much more efficient, numerically stable and trivially normalizable."}, {"heading": "3.3.4 Collisions", "text": "Unreal Engine provides a comprehensive collision detection system optimized for different classes of collision networks, and we use this feature directly for our needs. We get the impact position, impact standard and penetration depth for each collision that occurred during the rendering interval. Our physics engine uses this data to calculate the collision response with Coulomb friction to modify both linear and angular kinematics."}, {"heading": "3.4 Sensors", "text": "AirSim offers sensor models for accelerometers, gyroscopes, barometers, magnetometers and GPS. All of our sensor models are implemented as a C + + header-only library and can be used independently. Like other components, sensor models are expressed as a hierarchy of abstract interfaces, making it easy to replace or add new sensors."}, {"heading": "3.4.1 Barometer", "text": "To simulate the barometer, we calculate the ground true pressure using the detailed model of the atmosphere (sec 3,2,3) and model the drift in pressure measurement over time using the Gaussian Markov method [24] for a more realistic behavior during long flights. Formally, if we call the current bias factor bk, the drift is modeled as follows: bk + 1 = w \u00b7 bk + (1 \u2212 w) \u00b7 \u03b7, where: w = e \u2212 dt t and \u03b7 \u0445 N (0, s2). Here t is the time constant for the process and in our model set to 1 hour. \u03b7 is a zero-mean Gaussian noise with standard deviation s = 0.5mbar based on the data available in [10] as well as experiments performed. This pressure p is then added to white noise, which is drawn from the zero-mean Gaussian distribution, with the standard deviation from the reference sheet set (for example, 0.24 \u2212 112 based on the MAS = the pressure \u2212 finally, which is calculated by the MAS = 56rical temperature)."}, {"heading": "3.4.2 Gyroscope and Accelerometer", "text": "Gyroscopes and acceleration sensors form the core of the inertial measurement unit (IMU) [28], which we model by adding white noise and prewave drift to the basic truth over time. For gyroscopes, we calculate the measurement at the actual angular velocity \u03c9 as spectral output as spectral output = \u03c9 + \u03b7a + bt, where \u03b7a \u0445 N (0, ra) andbt = bt \u2212 1 + \u03b7b, where \u03b7b \u0445 N (0, b0 \u221a dt ta). Here, the parameters ra, bias b0 and the time constant for prewave drift ta can either be determined from Allan variance diagrams or specified directly in data sheets."}, {"heading": "3.4.3 Magnetometer", "text": "We use the tilted dipole model for the Earth's magnetic field 3.2.2, indicating the geographic coordinates, to calculate the components of the Earth's magnetic field in the body frame and to add the white noise specified in the datasheet."}, {"heading": "3.4.4 Global Positioning System (GPS)", "text": "Our GPS model simulates latency (typically 200ms), slower update rates (typically 50Hz), and horizontal and vertical position errors to simulate decay rates over time. Decay rates are modeled with first-order low-pass filters that are individually parameterized for horizontal and vertical corrections."}, {"heading": "3.5 Visual Rendering", "text": "Since advanced rendering and detailed environments were a key requirement for AirSim, we chose Unreal Engine 4 (UE4) [17] as our rendering platform. UE4 offers several features that have made it an attractive choice, including the fact that it is open source and usable for Linux, Windows and OSX applications. UE4 brings some of the most innovative graphics features, such as physical based materials, photometric lamps, flat reflections, ray traced distance field shadows, etc. Figure 1 shows a screenshot of AirSim highlighting rendering quality close to the real world. There is also a large market [8] where various pre-designed, elaborate environments are available and are created using large-scale photogrammetry."}, {"heading": "4 Experiments", "text": "This year, it has come to the point that there will only be one time that there will be such a process, in which there will be such a process."}, {"heading": "5 Conclusion and Future Work", "text": "The goal of AirSim is to enable rapid training and the development of data-driven robotic systems. In particular, the platform enables high-precision simulation, which in turn can be used to collect training data for the construction of machine learning models. Core components include a physics engine with detailed models of physical phenomena and a high-precision perception simulation that allows training and testing of computer image modules. By using such a simulator, we hope to be able to effectively use methods such as amplification and imitation and to enable simulators for the transfer of machine-learned technologies to the real world.The task of mimicking the real world in real-time simulation is a challenging one. There are a number of things that can be improved. Currently, we are not simulating full-fledged realistic collisions. New development functions in unreal engines such as the physics engine sub-stepping could be useful in solving these problems."}], "references": [{"title": "An invitation to imitation", "author": ["A. Bagnell"], "venue": "Tech. Rep. CMU-RI-TR-15-08, Robotics Inst.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "Mariner\u2019s Pressure Atlas: Worldwide Mean Sea Level Pressures and Standard Deviations for Weather Analysis and Tropical Storm Forecasting", "author": ["D. Burch"], "venue": "Starpath School of Nav.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2014}, {"title": "Numerical methods for ordinary differential equations (2016", "author": ["J.C. Butcher"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2016}, {"title": "The us/uk world magnetic model for 2015-2020: Technical report", "author": ["A.S. Chulliat", "P. Macmillan", "C. Alken", "M. Beggan", "B. Nair", "A. Hamilton", "V. Woods", "S. Ridley", "Maus", "A. Thomson"], "venue": "NOAA National Geophysical Data Center", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2015}, {"title": "Robot Operating System (ROS): The Complete Reference, chap", "author": ["F. Furrer", "M. Burri", "M. Achtelik", "R. Siegwart"], "venue": "RotorS\u2014A Modular Gazebo MAV Simulator Framework", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "A survey of inverse reinforcement learning techniques", "author": ["Y. Gao", "J. Peters", "A. Tsourdos", "S. Zhifei", "E. Meng Joo"], "venue": "International Journal of Intelligent Computing and Cybernetics", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2012}, {"title": "Rosflight: A lightweight, inexpensive mav research and development tool", "author": ["J. Jackson", "G. Ellingson", "T. McLain"], "venue": "ICUAS", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2016}, {"title": "Uiuc propeller database, university of illinois at urbana-champaign", "author": ["G.A.J.B. Brandt R.W. Deters", "M. Selig"], "venue": "http://m-selig.ae.illinois.edu/props/propDB.html", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2017}, {"title": "Real shading in unreal engine 4", "author": ["B. Karis", "E. Games"], "venue": "Proc. Physically Based Shading Theory Practice", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2013}, {"title": "Reinforcement learning in robotics: A survey", "author": ["J. Kober", "J.A. Bagnell", "J. Peters"], "venue": "The International Journal of Robotics Research", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "Design and use paradigms for gazebo, an open-source multi-robot simulator", "author": ["N. Koenig", "A. Howard"], "venue": "IROS", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2004}, {"title": "Pixhawk: A system for autonomous flight using onboard computer vision", "author": ["L. Meier", "P. Tanskanen", "F. Fraundorfer", "M. Pollefeys"], "venue": "ICRA", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2011}, {"title": "Comprehensive simulation of quadrotor uavs using ros and gazebo", "author": ["J. Meyer", "A. Sendobry", "S. Kohlbrecher", "U. Klingauf", "O. Von Stryk"], "venue": "International Conference on Simulation, Modeling, and Programming for Autonomous Robots", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2012}, {"title": "Introduction to fluid mechanics", "author": ["Y. Nakayama", "R. Boucher"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1998}, {"title": "A survey on transfer learning", "author": ["S.J. Pan", "Q. Yang"], "venue": "Tran. on Knowledge and Data Eng.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2010}, {"title": "A stochastic approach to noise modeling for barometric altimeters", "author": ["A.M. Sabatini", "V. Genovese"], "venue": "Sensors (Basel, Switzerland) 13(11)", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2013}, {"title": "Practical Meteorology: An Algebra-based Survey of Atmospheric Science", "author": ["R. Stull"], "venue": "University of British Columbia", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2015}, {"title": "The ggm03 mean earth gravity model from grace", "author": ["B. Tapley", "J. Ries", "S. Bettadpur", "D. Chambers", "M. Cheng", "F. Condi", "S. Poole"], "venue": "AGU Fall Meeting Abstracts", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2007}, {"title": "Classical mechanics", "author": ["J.R. Taylor"], "venue": "University Science Books", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2005}, {"title": "An introduction to inertial navigation", "author": ["O.J. Woodman"], "venue": "University of Cambridge", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2007}], "referenceMentions": [{"referenceID": 9, "context": "Recently, paradigms such as reinforcement learning [18], learning-by-demonstration [14, 9] and transfer learning [23] are proving a natural means to train various robotics systems.", "startOffset": 51, "endOffset": 55}, {"referenceID": 5, "context": "Recently, paradigms such as reinforcement learning [18], learning-by-demonstration [14, 9] and transfer learning [23] are proving a natural means to train various robotics systems.", "startOffset": 83, "endOffset": 90}, {"referenceID": 0, "context": "Recently, paradigms such as reinforcement learning [18], learning-by-demonstration [14, 9] and transfer learning [23] are proving a natural means to train various robotics systems.", "startOffset": 83, "endOffset": 90}, {"referenceID": 14, "context": "Recently, paradigms such as reinforcement learning [18], learning-by-demonstration [14, 9] and transfer learning [23] are proving a natural means to train various robotics systems.", "startOffset": 113, "endOffset": 117}, {"referenceID": 10, "context": "Gazebo [19] has been one the most popular simulation platforms.", "startOffset": 7, "endOffset": 11}, {"referenceID": 12, "context": "Other notable effort includes Hector [21] that primarily focuses on ROS and is a Gazebo-enabled quadrotor simulator.", "startOffset": 37, "endOffset": 41}, {"referenceID": 4, "context": "Similarly, RotorS [13] provides a modular framework to design Micro Aerial Vehicles, and build algorithms for control and state estimation that can be deployed in the field.", "startOffset": 18, "endOffset": 22}, {"referenceID": 11, "context": "The typical setup for an autonomous aerial vehicle includes the flight controller software such as PX4 [20], ROSFlight [15] etc.", "startOffset": 103, "endOffset": 107}, {"referenceID": 6, "context": "The typical setup for an autonomous aerial vehicle includes the flight controller software such as PX4 [20], ROSFlight [15] etc.", "startOffset": 119, "endOffset": 123}, {"referenceID": 8, "context": "This has been one of the challenging areas where we leverage recent advances in rendering technologies implemented by platforms such as Unreal engine [17].", "startOffset": 150, "endOffset": 154}, {"referenceID": 7, "context": "We compute the forces and torques produced by propellers using [16]:", "startOffset": 63, "endOffset": 67}, {"referenceID": 17, "context": "While many models use a constant number to model the gravity, it varies in a complex manner as demonstrated by models such as GRACE [26].", "startOffset": 132, "endOffset": 136}, {"referenceID": 3, "context": "The World Magnetic Model (WMM) model [12] by National Oceanic and Atmospheric Administration (NOAA) is one of the best known magnetic models of Earth.", "startOffset": 37, "endOffset": 41}, {"referenceID": 16, "context": "Standard Atmosphere model [25] for altitude below 51 kilometers and switch to the model in [3] beyond that up to 86 km.", "startOffset": 26, "endOffset": 30}, {"referenceID": 18, "context": "The simulator computes the magnitude |Fd | of the linear drag force on the body according to the drag equation [27]:", "startOffset": 111, "endOffset": 115}, {"referenceID": 13, "context": "As the linear velocity dv experienced by ds is given by rds\u00d7\u03c9 , we can now use the linear drag equation for ds [22]:", "startOffset": 111, "endOffset": 115}, {"referenceID": 2, "context": "In our implementation we use Verlet integration instead of Runge Kutta for stability and simplicity while being nearly as efficient as Euler integration (see [11] for details).", "startOffset": 158, "endOffset": 162}, {"referenceID": 15, "context": "3) and model the drift in the pressure measurement over time using Gaussian Markov process [24] for more realistic behavior in long flights.", "startOffset": 91, "endOffset": 95}, {"referenceID": 1, "context": "[10] as well as experiments we conducted.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "Gyroscope and accelerometers constitute the core of the inertial measurement unit (IMU) [28].", "startOffset": 88, "endOffset": 92}, {"referenceID": 8, "context": "Since advanced rendering and detailed environments have been a key requirement for AirSim we chose Unreal Engine 4 (UE4) [17] as our rendering platform.", "startOffset": 121, "endOffset": 125}], "year": 2017, "abstractText": "Developing and testing algorithms for autonomous vehicles in real world is an expensive and time consuming process. Also, in order to utilize recent advances in machine intelligence and deep learning we need to collect a large amount of annotated training data in a variety of conditions and environments. We present a new simulator built on Unreal Engine that offers physically and visually realistic simulations for both of these goals. Our simulator includes a physics engine that can operate at a high frequency for real-time hardware-in-the-loop (HITL) simulations with support for popular protocols (e.g. MavLink). The simulator is designed from the ground up to be extensible to accommodate new types of vehicles, hardware platforms and software protocols. In addition, the modular design enables various components to be easily usable independently in other projects. We demonstrate the simulator by first implementing a quadrotor as an autonomous vehicle and then experimentally comparing the software components with real-world flights.", "creator": "LaTeX with hyperref package"}}}