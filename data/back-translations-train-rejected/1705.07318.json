{"id": "1705.07318", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-May-2017", "title": "Formalized Lambek Calculus in Higher Order Logic (HOL4)", "abstract": "In this project, a rather complete proof-theoretical formalization of Lambek Calculus (non-associative with arbitrary extensions) has been ported from Coq proof assistent to HOL4 theorem prover, with some improvements and new theorems.", "histories": [["v1", "Sat, 20 May 2017 15:04:34 GMT  (50kb)", "http://arxiv.org/abs/1705.07318v1", "37 pages"]], "COMMENTS": "37 pages", "reviews": [], "SUBJECTS": "cs.CL cs.LO", "authors": ["chun tian"], "accepted": false, "id": "1705.07318"}, "pdf": {"name": "1705.07318.pdf", "metadata": {"source": "CRF", "title": "Formalized Lambek Calculus in Higher Order Logic (HOL4)", "authors": ["Chun Tian"], "emails": ["chun.tian@studio.unibo.it"], "sections": [{"heading": null, "text": "ar Xiv: 170 5.07 318v 1 [cs.C L] 20 May 201 7Three deduction systems (Syntactic Calculus, Natural Calculus, and Sequential Calculus) of the Lambek Calculus are supported by many related theories, and the equivalence between these systems has been formally proven. Finally, in HOL4 a formalization of the sequence calculation proofs (in which Coq has built-in columns) was designed and implemented. Some fundamental results, including the subformula properties of the so-called \"cut-free\" corrections, have been formally proven. This work can be seen as a preliminary work to a language parser based on category programs that are not multimodal but are nevertheless capable of supporting context-sensitive languages through tailored extensions."}, {"heading": "1 Introduction", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "1.1 Phrase structure grammars and Chomsky Hierarchy", "text": "In fact, it is such that most of them will be able to move into another world, in which they are able, in which they are able, in which they are able, in which they are able, in which they are able, in which they are able, in which they live, in the world in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live, in which they live."}, {"heading": "1.2 Categorial Grammars and Lambek Calculus", "text": "In fact, it is the case that most people are able to determine for themselves what they want and what they do not want. (...) Most people in the world are not able to decide. (...) Most people in the world are not able to decide for themselves. (...) Most people in the world are not able to decide for themselves. (...) Most people in the world are not able to decide for themselves. (...) Most of them are not able to determine for themselves. (...) Most of them are not able to determine for themselves. (...) Most of them are not able to determine for themselves. (...) Most of them are not able to determine for themselves. (...) Most of them are not able to determine for themselves. (...) Most of them are not able to determine for themselves. (...)"}, {"heading": "1.3 Categorial grammars and universal grammar", "text": "Chomsky believes that there is a universal grammar inherent in the human mind, and when children begin to learn languages from very limited vocabulary and extremely incomplete corpus (where machine learning is impossible), what they actually do is adapt that universal grammar to their native languages. However, we see no evidence for the existence of universal grammars from Chomsky's Phrase Structure Theory and related grammars: 1. Language-independent part: the follow-up rules for categories; 2. Language-dependent part: the lexicon. Therefore, if we treat the first part with \"universal grammar,\" what needs to be learned by children (and machine learning program) is precisely the vocabulary that has words associated with their syntactical categories (which is then used to indicate the meaning of the language)."}, {"heading": "1.4 Categorial Type Logics", "text": "Since natural language is not context-free, while it is only context-free, people are looking for ways to support context-dependent languages. On the other hand, neither, NL and NLP, is perfect for all languages, so they are looking for ways to combine the different aspects of the target language. (L / iL) One such attempt is the so-called multimodal Lambek calculation. In this calculation system, there are many copies of categorical connectors, each associated with a categorical index. (L / iL)"}, {"heading": "1.5 Trusted software and theorem provers", "text": "On the other hand, either operating systems or development platforms (including programming languages) are developing fast. Every program that has been written must be maintained continuously, otherwise it will soon become unuseful.Therefore, we try to convince the audience of the following principles: 1. For every research task in computer science, the last solution is to write a completely new software, because once the research is completed (or the paper is published), the software cannot be well maintained, and in a few years it will be dead. 2. Choose programming languages that have a long history (at least 10 years), with more than one stable implementation. 3. Whenever possible, generate program code from higher-level tools instead of writing it directly. On the other hand, to guarantee the accuracy of the algorithms or their implementations, it is preferable to use them."}, {"heading": "1.6 Why Higher Order Logic?", "text": "Compared to other theorem testers, the Higher Order Logic (HOL) family of theorem testers (HOL4, HOL light, Isabelle) has a relatively simple logic basis: simply typed lambda calculations with type variables. Compared to the logic basis of Coq (Calculus of Inductive Construction, CIC), the logic of the order is easier to understand and use because it has few primitive derivative rules, and students who have just finished studying \u03bb calculations (typed and untyped) could easily start with HOL.HOL, also has a small and verified kernel. And if HOL is implemented in the default language ML, which is the case of HOL4 and Isabelle, the programming platform itself could be formally verified 6Therefore, we choose HOL4 for several reasons: 1. It is a theorem tester that is well maintained and with a long history (30 years)."}, {"heading": "2 Lambek Calculus in HOL4", "text": "In this project, we implemented Lambek Calculus in HOL4. The exact variant of the Lambek Calculus is NL (non-associative) with arbitrary extensions. Three trigger systems are implemented: (Axiomatic) Syntactic Calculus, Natural Deduction and Gentzen's Sequent Calculus. 7This work is based on an implementation of Lambek Calculus 8 in the Coq Proof Assistant. In fact, our work can so far be considered as a partial port of the Coq-based Proof Scripts: Most definitions and theorems come from previous work, with necessary modifications. Here are some key differences: 1. Whenever a relationship can be defined as a reflective temporary closure (RTC) of another relationship, instead of defining it manually as in Coq, we now use HOL's Builtin RelationTheory to define it and get the associated theorems. 2. Coq's built-in support for defining whole profs for data HOL, so we are not directly portable to the HOL."}, {"heading": "2.1 Syntactic Categories", "text": "In HOL, syntactic categories are defined by an algebraic data type form with a type variable \u03b1: data type \"Form = At'a | Slash Form | Backslash Form | Dot Form\" In this way, all the theorems we have demonstrated are actually theory schemes in which there is always a type variable. In practice, the user can either define a different data structure with enumerated categories (S, n, np,...) or use strings directly. In later mode, for example, the basic category \"S\" can simply be represented as At \"S,\" and the category \"S / np\" will be Slash (At \"S\") (At \"np\") or At \"S\" / At \"np\" when grammar support is enabled."}, {"heading": "2.2 Syntactic Calculus", "text": "(Axiomatic) Syntactic calculus is a theory of the arrow relationship, which indicates that a number of words having the first category will also have the seoncd category, it is reflexive and transitive. (!) In HOL4, such an inductive relationship can easily be defined by Hol _ reln [13] command: \"A (Arrow _ rules, arrow _ ind, arrow _ cases) = Hol _ reln\" (! X A. Array X A) A) /\\ (! X A C. arrow X (Dot A) C = = > Arrow X (Slash C). \"(! X A C. arrow X (Slash C).\" (X C. arrow X) C. \"(Dot A) C.\" (Dot A B) C. arrow X. \"(Dot A) C. arrow X.\" (Dot A) C. \""}, {"heading": "2.3 Associative Lambek Calculus", "text": "For the original Lambek associative calculus, we have proved all arrow theorems of the category \"y\" (7) mentioned in Lambek (1958), all of which are called L _ plus single letters (with optional prim), the first five being L axioms (but in fact they are proved by the previous definition of the arrow ratio: L _ a: Arrow L x x L _ b: Arrow L (x \u00b7 y \u00b7 z)) L _ b ': Arrow L (x \u00b7 z)) (x z: Arrow L (x \u00b7 y) z: Arrow L x (x \u00b7 y) z: Arrow L x (z / y) L _ c': Arrow L (x \u00b7 z) L (x \u00b7 z): Arrow L y (x \u00b7 z)."}, {"heading": "2.4 Natural Deduction for Lambek Calculus", "text": "In fact, it is the case that most of us are able to abide by the rules that they have imposed on themselves. (...) In fact, it is the case that they are able to abide by the rules. (...) In fact, it is the case that they are able to abide by the rules. (...) In fact, it is the case that they are able to abide by the rules. (...) In fact, it is the case that they are able to outdo themselves. \"(...)\" It is as if they are able to outdo themselves. \"(...)"}, {"heading": "2.5 Gentzen\u2019s Sequent Calculus for Lambek Calculus", "text": "It's not just the way in which people in the United States and in the United States of America have behaved in their own way, but also the way in which they have behaved in the manner in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the way in which they have behaved in the manner in which they have behaved in which they have behaved in the manner in which they have behaved in which they have behaved in the manner in which they have behaved in which they have behaved in the manner in which they have behaved in the manner in which they have behaved in the manner in which they have behaved in which they have behaved in the manner in which they have behaved in the manner in which they have behaved in the manner in which they have behaved in the manner in which they have behaving in the manner in which they have behaving in which they have behaved in the manner in which they have behaving in which they have behaved in the manner in the manner in which they have behaving in the manner in which they have behaving in which they have behaving in the manner in which they have behaving in which they have behaving in the manner in the manner in the manner in which they have behaving there and are the manner in which they have behaving in which they have, and the manner in which they have behaving in which they have behaving in the manner in the manner in which they have behaving in which they have behaving in the manner in which they have behaving in the manner in the manner in which they have behaving in which they have behaving in the manner in the manner in the manner in the manner in which they"}, {"heading": "3 Equivalences between three deduction systems", "text": "So far, we have introduced three deduction systems for the Lambek calculation: (axiomatic) syntactical calculation, natural deduction, and Gentzen's subsequent calculation. The persuasive power of syntactic calculation is based on intuition and the fact that all axiom rules are extremely simple, while the correctness of natural deduction rules and subsequent calculation rules is not so clear. Before we fully switch to natural deduction or subsequent calculation as an alternative deduction system, we must prove the equivalences between them and the original syntactic calculation."}, {"heading": "3.1 Equivalence between Syntactic Calculus and Sequent Calculus", "text": "In the first direction we have the following definition: \"We have the following definition}, {"heading": "3.2 Equivalence between Natural Deduction and Sequent Calculus", "text": "D \"i\" e \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s.\" D \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" \"s\" \"s\" \"s\" \"s\" \"s\" \"s\" \"s\" s \"\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" s \"s\" \"s\" s \"s\" \"s\" s \"\" s \"\" s \"\" s \"\" \"s\" \"s\" \"\" s \"\" \"s\" \"s\" \"\" s \"\" \"s\" \"s\" \"\" s \"\" \"s\" \"\" \"s\" s \"\" \"\" s \"\" \"s\" \"s\" \"\" \"s\" \"\" s \"\" \"\" s \"\" \"\" s \"\" \"\" s \"\" s \"\" \"\" \"\" \"s\" s \"\" \"\" s \"\" \"\" \"\" s \"\" \"\" \"\" s \"\" s \"\" \"\" \"s\" \"\" \"\" s \"\" \"\" \"\" \"\" \"s\" \"\" s \"\" \"\" \"\" \"\" s \"\" \"\" \"\" \"\" \"\" s \"\" \"\" \"\" \"\" s \"\" \"\" \"\" \"\" \"\" s \"\" \"\" \"\" \"\" \"\" s \"\" \"\" \"\" \"\" \"\" \"s\" \"\" \"\" \"\" \"\" \"\" s \"\" \"\" \"\" \"\" \"\" \"s\" \"\" \"\" \"\" \"\" \"\" \"\" s \"\" \"\" \"\" \"\" \"\" \"\" \"s\" \"\" \"\" \"\" \"\" \"s\" \"\" \"\" \"\" \"\" \"\" \"s\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" s \"\" \"\" \"\" \"\" \"\" \"\" \"\" \""}, {"heading": "3.3 Equivalence between Syntactic Calculus and Natural Deduction", "text": "By combining the results from the two previous sections, the equivalence between syntactical calculation and natural deduction can be easily demonstrated with Gentzen's Sequent Calculus as intermediate steps: natDedToArrow: gentzenToArrowExt E X \u21d2 natDed E Gamma A \u21d2 Arrow X (deltaTranslation Gamma) AnatDedToArrow _ E: natDed E Gamma A \u21d2 Arrow (ToArrowExt E) (deltaTranslation Gamma) AarrowToNatDed: condCutExt E arrowToGentzenExt X E Arrow X A \u21d2 natDed E (OneForm A) There seems to be no possibility to obtain equivalence theorems between syntactic calculation and natural deduction / sequential calculation, since the translations between terms and forms take place."}, {"heading": "4 A proof-theoretic formalization of Sequent Calculus", "text": "Dei eeisrcnh-eSrdhSrcnlhsrteeaeaHngcnlhsrtee\u00fccnh hacu ide eeisrcnh-eSrcnlhSrcnlhsrteeaeee\u00fcgn-eaHnlhc-eaHnlrcnlhsrtee\u00fccnh ni eeisrsrcnlhsrteeeae\u00fcgn-eaHnlhc-eaHnlcnlcnlhSrnlhsrcnh) (1) 1 (1) (1) (1) (1) (1) (2) (1) (4) (4) (1) (4) (4) (1) (4) (1) (4) (4) (1) (4) (1) (4) (4) (1) (4) (4) (1.3 (4) (4) (1.4) (4) (4) (1.3 (4) (4) (4) (.4) (1.4) (1 (4) (4) (.4) (.4) (.4) (.4) (1 (4) (.4) (.4) (1 (1).3 (4) (4) (.4) (.4) (1 (.4) (1 (4).4) (.4) (1 (.4) (.4) (1 (.4) (1 (4).4) (1 (.4).3 (.4) (1 (.4).4) (.4) (1 (.4) (1 (.4) (1 (.4).3 (.4).3 (.4) (1 (.4) (1 (.4).3 (.4).4) (.4) (1 (.4) (.4) (1 (.4) (.4) (.4) (1 (.4) (.4) (.4) (.4) (.4) (.4"}, {"heading": "4.1 Proof objects", "text": "Do we see ourselves in a position to change the world?, \"he asked in an interview with\" The World on Sunday. \"(\" The World on Sunday \")\" The World \"(\" The World on Sunday \"),\" The World \"(\" The World on Sunday \"),\" The World on Sunday \"(\" The World on Sunday \"),\" The World on Sunday \"(\" The World on Sunday \"),\" The World on Sunday \"(\" The World on Sunday \"),\" The World on Sunday \"(\" The World on Sunday \"),\" The World on Sunday \"(\" The World on Sunday \"),\" The World (\"The World on Sunday\"), \"The World (\" The World on Sunday \"),\" The World (\"The World on Sunday\"), \"The World (The World on Sunday),\" The World (The World on Sunday), \"The World (The World),\" The (The World), \"The (The),\" The (The), \"The (The)"}, {"heading": "4.2 Derivations of proof tree", "text": "So how can we invent a proof for any theorems in Sequent E (A / B)? (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta) Delta (A) Delta (A) Delta (A) Delta (A) Delta) Delta (A) Delta (A) Delta (A) Delta (A) Delta (A) Delta) Delta (A) Delta (A) Delta) A (A) Delta (A) Delta (A) Delta) A (A) Delta) Delta (A) Delta (A) Delta) A (A) Delta (A) Delta) A (A) Delta (A) Delta) A (A) Delta) (A) A) Delta (A) (A) (A) Delta (A) (A) (A) Delta) (A) (A) Delta (A) (A) Delta) (A) Delta (A) (A) Delta) (A) Delta (A) (A) Delta (A) Delta (A) Delta (A) (A) Delta (A) Delta (A) Delta (A) (A) Delta (A) Delta (A) Delta (A) Delta (A) (A) Delta (A) Delta) (A) (A) Delta (A) Delta (A) (A) Delta (A) (A) Delta (A) (A) Delta (A) (A) (A) Delta) (A) (A) (A) Delta (A) (A) (A) (A) Delta (A) (A) (A) (A) Delta (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A) (A)"}, {"heading": "4.3 Cut-free proofs", "text": "Central to Gentzen's original sequence calculus for intuitionistic propositional logic is the so-called cut elimination theorem (main theorem), which Lambek has proven for L [7] and NL [12]. This important theorem roughly states that the cut rule is admissible, in other words, the cut rule does not increase the number of theorems that can be proven by other rules. It is this theorem that guarantees the existence of decision-making processes, because all other rules have the partial formula characteristics that are indispensable for the automatic search for evidence. In our project, it is not yet formally proven due to the complexity and great preparation effort before reaching the cut elimination theorem. Also, the original Coq work has not yet yielded this proof. 12A cut-free proof is a proof (sequence, the Calculle of Ruutus)."}, {"heading": "12 to our knowledge, the Cut-elimination theorem for Lambek calculus is never formally verified. This topic along", "text": "It is possible that we have another inductive relationship to another definition, but only if we can find it in a single case of the dertree definition: one version of this relationship is defined as another definition of the other definition, but only if we can find it in a single case of the dertree definition: one version of this relationship is defined as another definition of the other definition."}, {"heading": "5 Examples", "text": "Our first example shows how to use the Lambek calculation formulations as a toolkit (\"At\" S \") (\" At \"S\") (\"At\") (\"At\") (\"A\") (\"A\") (\"A\") (\"A\") (\"A\") (\"A\") (\"A\") (\"A\"), \"A\" (\"A\") (\"A\"), \"A\" (\"A\"), \"(\" A \"),\" (\"A\"), \"(\" \"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\"),\" (\",\", \"(\"), \"(\"), \"(\"), \"(\", \",\", \"(\"), \"(\"), \"(\"), \",\" (\"),\" (\",\", \",\", \"(\"), \"(\"), \",\" (\"),\", \"(\"), \",\" (\"),\", \"(\", \"),\" (\"),\" (\",\"), \"(\"), \",\" (\"),\", \",\" (\"),\" (\"),\", \"(\"), \",\" (\"),\", \"(\", \"),\" (\")."}, {"heading": "6 Differences between HOL and Coq", "text": "There are significant differences between HOL and Coq for many logical definitions that we ported from Coq, although they look similar."}, {"heading": "6.1 Inductive datatypes and relations", "text": "Coq defines both inductive data types and relationships as inductive sets, for example the definition of the type \"shape\" and the arrow relationship for syntactic calculus: Inductive form (atom: set): An: atom - > form atoms | Slash: form atoms - > form atoms - > form atoms - > form atoms | Dot: form atoms - > form atoms - > form atoms - > form atoms - > form atoms - > form atoms - > form atoms - > form atoms - > form atoms - > form atoms - > set: one: forall A: form atom, arrow A | forall A C: forall A: forall A (slash C)."}, {"heading": "6.2 Further on logical connectives", "text": "In HOL, basic Boolean connectors and logical quantifiers of first order such as \"Forq,\" \"exists,\" \"and,\" or, \"not\" and even \"true,\" \"false,\" are all defined as \"Gammaq.\" (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\"Gammaq\") (\") Gammaq (\") (\") Gammaq (\") (\") Gammaq (\") (\") (\") Gammaq (\") (\") Gammaq (\") (\") Gammaq (\") (\") Gammaq (\") (\") (\") Gammaq (\") (\") Gammaq (\") (\") Gammaq () (\") (\") Gammaq () (\") Gammaq () () (\") Gammaq () () (\" (\") Gammaq (\") Gammaq (\") (\") (\"(\")."}, {"heading": "6.3 On Coq\u2019s built-in supports of proofs", "text": "This fact seems to emerge from the fact that in Coq every logical theorem essentially has the type theorem that is actually a mathematical theorem, and every element in such theorems is perhaps a possible \"proof\" of that theorem! This is really a handy feature when people have to prove results about themselves, but the disadvantage is that most of these theorems can have a large set of variables. For example, our last theorem in CutFreeTheory is subFormulaProperty, which has the following representation in HOL: subProof q p \u21d2 extensionSub (exten p) \u21d2 extensionSub (exten p) \u21d2 CutFreeProof p \u21d2 x. subFormTerm x (prems q), subFormula x (concl q) \u21d2 subFormTerm x (prems p): subFormx x x (concl p)."}, {"heading": "7 Future directions", "text": "From the point of view of theorem proof, it is worthwhile to prove the following theorems in the future: 1. Cut-Elimination Theorem for Lambek Calculus with arbitrary extensions. 2. Lambek Calculus L is context-free. [11] The cut-elimination theorem can be proven directly from the existing framework in our CutFreeTheory, while for the second goal a complete treatment of the Lambek Calculus in the model theoretical approach with many new basic definitions and theorems.3. From the point of view of language parsing, the following objectives have to be fulfilled: 1. Implement an automatic proof-search algorithm for Sequent Calculus as HOL tactic. 2. Implement the same algorithm for generating first-class proof trees (dertree).3. Implement a language parser as an ML function that generates both parsing trees and validation theories. 4. Design an encyclopaedia lexic lexic of each set of data structure, with more than five words."}, {"heading": "8 Conclusions", "text": "In this project, we have implemented a fairly complete evidence-theoretical formalization of the Lambek Calculus (association-free, with arbitrary extensions).The current status is sufficient as a toolbox for the manual testing of category sets in three deduction systems of the Lambek Calculus: Axiomatic Syntactic Calculus, Natural Deduction (Gentzen style) and Gentzen's Sequence Calculus. This work can also be considered as a basis for the further formalization of deeper theorems of the Lambek Calculus in the years 2002-2003. For the modules we have migrated from Coq, we have improved definitions and demonstrated many new theorems.For the evidence-theoretical formalization of the Lambek Calculus in the Coq, by Houda ANOUN and Pierre Casteran, we have presented our work (the first evidence in Tamna trees, which was presented in conjunction with Prof. Nathios Bneorems at the University)."}, {"heading": "1. Chomsky, N.: On certain formal properties of grammars. Information and Computation 2 (1959) 137\u2013167", "text": "2. Chomsky, N.: Syntacsche Strukturen. Walter de Gruyter (Januar 2002) 3. Napoli, D.J., Burzio, L.: Italian Syntax: A Government-Binding Approach. Language 64 (1) (1988) 130 4. Ajdukiewicz, K.: Syntactic Connexion (1936). In: The Scientific World-Perspective and Other Essays, 1931-1963. Springer Netherlands, Dordrecht (1978) 118-139 5. Bar-Hillel, Y.: A quasi-arithmetical Notation for syntactic description. Language 29 (1) (1953) 47 6. Moot, R., J., C.: The Logic of Categorial Grammars. Volume 6850 of Lecture Notes in Computer Science.Springer Berlin Heidelberg, Heidelberg, 405. Lambek, J.: The Mathematics of Sentative Structure."}], "references": [{"title": "On certain formal properties of grammars", "author": ["N. Chomsky"], "venue": "Information and Computation 2", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1959}, {"title": "Syntactic Structures", "author": ["N. Chomsky"], "venue": "Walter de Gruyter", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2002}, {"title": "Italian Syntax: A Government-Binding Approach", "author": ["D.J. Napoli", "L. Burzio"], "venue": "Language 64(1)", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1988}, {"title": "Syntactic Connexion (1936)", "author": ["K. Ajdukiewicz"], "venue": "The Scientific World-Perspective and Other Essays, 1931\u20131963. Springer Netherlands, Dordrecht", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1978}, {"title": "A quasi-arithmetical notation for syntactic description", "author": ["Y. Bar-Hillel"], "venue": "Language 29(1)", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1953}, {"title": "The Logic of Categorial Grammars", "author": ["R. Moot", "C. Retore"], "venue": "Volume 6850 of Lecture Notes in Computer Science. Springer Berlin Heidelberg, Berlin, Heidelberg", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "The mathematics of sentence structure", "author": ["J. Lambek"], "venue": "The American Mathematical Monthly 65(3)", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1958}, {"title": "The equivalence of two concepts of categorial grammar", "author": ["J.M. Cohen"], "venue": "Information and Control 10(5)", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1967}, {"title": "Lambek calculus is NP-complete", "author": ["M. Pentus"], "venue": "Theoretical Computer Science 357(1-3)", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2006}, {"title": "Lambek calculus is L-complete", "author": ["M. Pentus"], "venue": "Institute for Logic", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1993}, {"title": "Lambek grammars are context free", "author": ["M. Pentus"], "venue": "Eighth Annual IEEE Symposium on Logic in Computer Science (Montreal, PQ, 1993). IEEE Comput. Soc. Press, Los Alamitos, CA", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1993}, {"title": "On the calculus of syntactic types", "author": ["J. Lambek"], "venue": "Proceedings of Symposia in Applied Mathematics 12", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1961}, {"title": "A Package for Inductive Relation Definitions in HOL", "author": ["T.F. Melham"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2017}, {"title": "Natural deduction", "author": ["D. Prawitz"], "venue": "A proof-theoretical study. Acta Universitatis Stockholmiensis. Stockholm Studies in Philosophy, No. 3. Almqvist & Wiksell, Stockholm", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1965}, {"title": "Untersuchungen \u00fcber das logische Schlie en", "author": ["G. Gentzen"], "venue": "I. Mathematische Zeitschrift 39(1)", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1935}, {"title": "Untersuchungen \u00fcber das logische Schlie en", "author": ["G. Gentzen"], "venue": "II. Mathematische Zeitschrift 39(1)", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1935}, {"title": "Machine-checked Cut-elimination for Display Logic", "author": ["J.E. Dawson", "R. Gor\u00e9"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2006}], "referenceMentions": [{"referenceID": 0, "context": "Since the year when Noam Chomsky published his famous \u201cHierarchy\u201d [1] and his work on phrase structures of English and Spanish [2] in 1950s, the concepts of context-free and context-sensitive languages (and the intemediate areas between them) with the uses of rewriting rules to represent the phrase structure grammar of any given language, has dominated the parsing theory until today.", "startOffset": 66, "endOffset": 69}, {"referenceID": 1, "context": "Since the year when Noam Chomsky published his famous \u201cHierarchy\u201d [1] and his work on phrase structures of English and Spanish [2] in 1950s, the concepts of context-free and context-sensitive languages (and the intemediate areas between them) with the uses of rewriting rules to represent the phrase structure grammar of any given language, has dominated the parsing theory until today.", "startOffset": 127, "endOffset": 130}, {"referenceID": 2, "context": "33 of [3]) with an", "startOffset": 6, "endOffset": 9}, {"referenceID": 3, "context": "Categorial Grammar was firstly introduced by Polish philosopher and logician Kazimierz Ajdukiewicz in 1935 [4], which is based on ideas from precedent Polish logicians.", "startOffset": 107, "endOffset": 110}, {"referenceID": 4, "context": "In 1953, just two years before Chomsky published his phrase structure grammar theory and the famous hierarchy, Israeli philosopher, mathematician, and linguist Yehoshua Bar-Hillel made an important enhancement [5] to Ajdukiewicz\u2019s categorial grammar.", "startOffset": 210, "endOffset": 213}, {"referenceID": 5, "context": "[6].", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "Finally, in 1958, Joachim Lambek [7] succesfully defined a formal system for syntactic calculus in which all category formulae can be derived from a basic set of rules (as axioms) and basic logic formulae.", "startOffset": 33, "endOffset": 36}, {"referenceID": 7, "context": "Although Lambek calculues has more rules then AB grammar, but they\u2019re actually equivalent: \u201ca set of strings of words forms a categorial language of one type if and only if it forms a categorial language of the other type\u201d [8]; 2.", "startOffset": 223, "endOffset": 226}, {"referenceID": 6, "context": "This was proved by Lambek (1958) [7].", "startOffset": 33, "endOffset": 36}, {"referenceID": 8, "context": "Lambek calculus is NP-complete [9], L-complete [10], and Lambek grammars are context-free [11].", "startOffset": 31, "endOffset": 34}, {"referenceID": 9, "context": "Lambek calculus is NP-complete [9], L-complete [10], and Lambek grammars are context-free [11].", "startOffset": 47, "endOffset": 51}, {"referenceID": 10, "context": "Lambek calculus is NP-complete [9], L-complete [10], and Lambek grammars are context-free [11].", "startOffset": 90, "endOffset": 94}, {"referenceID": 11, "context": "Among other issues, to resolve the key limitation that Lambek calculus cannot be used as a language parser, in 1961, Lambek introduced the so-called Non-associative Lambek Calculus [12], or NL.", "startOffset": 181, "endOffset": 185}, {"referenceID": 5, "context": "6 of [6] for detailed discussions and links tooriginal papers) Beside L and NL, there\u2019s also NLP in which the commutativity of products is respect based on NL, i.", "startOffset": 5, "endOffset": 8}, {"referenceID": 5, "context": "(see Chapter 5 of [6]).", "startOffset": 18, "endOffset": 21}, {"referenceID": 5, "context": "184 of [6]) In this paper, we have tried another possibility to extend Lambek Calculus.", "startOffset": 7, "endOffset": 10}, {"referenceID": 12, "context": "In HOL4, such a inductive relation can be easily defined by Hol_reln [13] command:", "startOffset": 69, "endOffset": 73}, {"referenceID": 6, "context": "For the original associative Lambek Calculus, we have proved all arrow theorems mentioned in Lambek (1958) [7].", "startOffset": 107, "endOffset": 110}, {"referenceID": 13, "context": "Natural deduction was first invented by Dag Prawitz [14] as a non-semantic approach to derive propositional logic formulae.", "startOffset": 52, "endOffset": 56}, {"referenceID": 14, "context": "Sequent Calculus was original introduced by Gerhard Gentzen in two German papers [15] [16] written in 1935.", "startOffset": 81, "endOffset": 85}, {"referenceID": 15, "context": "Sequent Calculus was original introduced by Gerhard Gentzen in two German papers [15] [16] written in 1935.", "startOffset": 86, "endOffset": 90}, {"referenceID": 16, "context": "Our datatype definition is based on similar modelling work in Isabelle/HOL for Display Logic [17], then all other related inductive relation definitions and theorems are new.", "startOffset": 93, "endOffset": 97}, {"referenceID": 6, "context": "Cut-elimination theorem for Lambek Calculus was proved by Lambek for L [7] and NL [12].", "startOffset": 71, "endOffset": 74}, {"referenceID": 11, "context": "Cut-elimination theorem for Lambek Calculus was proved by Lambek for L [7] and NL [12].", "startOffset": 82, "endOffset": 86}, {"referenceID": 10, "context": "[11]", "startOffset": 0, "endOffset": 4}], "year": 2017, "abstractText": "In this project, a rather complete proof-theoretical formalization of Lambek Calculus (non-associative with arbitrary extensions) has been ported from Coq proof assistent to HOL4 theorem prover, with some improvements and new theorems. Three deduction systems (Syntactic Calculus, Natural Deduction and Sequent Calculus) of Lambek Calculus are defined with many related theorems proved. The equivalance between these systems are formally proved. Finally, a formalization of Sequent Calculus proofs (where Coq has built-in supports) has been designed and implemented in HOL4. Some basic results including the subformula properties of the so-called \u201ccut-free\u201d proofs are formally proved. This work can be considered as the preliminary work towards a language parser based on category grammars which is not multimodal but still has ability to support context-sensitive languages through customized extensions.", "creator": "LaTeX with hyperref package"}}}