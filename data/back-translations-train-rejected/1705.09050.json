{"id": "1705.09050", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-May-2017", "title": "A Clustering-based Consistency Adaptation Strategy for Distributed SDN Controllers", "abstract": "Distributed controllers are oftentimes used in large-scale SDN deployments where they run a myriad of network applications simultaneously. Such applications could have different consistency and availability preferences. These controllers need to communicate via east/west interfaces in order to synchronize their state information. The consistency and the availability of the distributed state information are governed by an underlying consistency model. Earlier, we suggested the use of adaptively-consistent controllers that can autonomously tune their consistency parameters in order to meet the performance requirements of a certain application. In this paper, we examine the feasibility of employing adaptive controllers that are built on-top of tunable consistency models similar to that of Apache Cassandra. We present an adaptation strategy that uses clustering techniques (sequential k-means and incremental k-means) in order to map a given application performance indicator into a feasible consistency level that can be used with the underlying tunable consistency model. In the cases that we modeled and tested, our results show that in the case of sequential k-means, with a reasonable number of clusters (&gt;= 50), a plausible mapping (low RMSE) could be estimated between the application performance indicators and the consistency level indicator. In the case of incremental k-means, the results also showed that a plausible mapping (low RMSE) could be estimated using a similar number of clusters (&gt;= 50) by using a small threshold (~$ 0.01).", "histories": [["v1", "Thu, 25 May 2017 05:28:57 GMT  (86kb)", "http://arxiv.org/abs/1705.09050v1", null]], "reviews": [], "SUBJECTS": "cs.NI cs.LG", "authors": ["mohamed aslan", "ashraf matrawy"], "accepted": false, "id": "1705.09050"}, "pdf": {"name": "1705.09050.pdf", "metadata": {"source": "CRF", "title": "A Clustering-based Consistency Adaptation Strategy for Distributed SDN Controllers", "authors": ["Mohamed Aslan", "Ashraf Matrawy"], "emails": ["maslan@sce.carleton.ca", "ashraf.matrawy@carleton.ca"], "sections": [{"heading": null, "text": "In fact, it is the case that most people who stand up for people's rights stand up for the rights of people who stand up for the rights of people who do not stand up for people's rights, but for the rights of people who stand up for people's rights, and for the rights of people who do not exercise their rights and obligations; in fact, the rights of people who stand up for people's rights are limited not only to people's rights, but also to the rights and obligations of people who stand up for people's rights, but also to the rights and obligations of people who have failed to respect their rights and obligations."}, {"heading": "II. THE CASE FOR SDN ADAPTIVE CONTROLLERS", "text": "In fact, most of them are able to play by the rules they have established in the past."}, {"heading": "III. BACKGROUND ON CONSISTENCY", "text": "In this section we will explain the consistency model used in a number of modern data stores such as Apache Cassandra [14], [15] and Amazon DynamoDB [16]."}, {"heading": "A. Notations", "text": "In distributed controllers, data is copied and stored at different controllers, such copies are referred to as replicas. In this essay, we assume that no more than one copy of a particular data element is stored at the same controller. We also use the term replicas when referring to the machines that store the data copies. Table I shows the notations used in this essay."}, {"heading": "B. The Tunable Consistency Model", "text": "The consistency model used by Apache Cassandra is both an eventual and a tunable consistency model. Eventual consistency [17] is a consistency model in which all replicas eventually receive the most random values after sometime if no further updated requirements have occurred. However, we refer to a property of a consistency model in which the level of consistency operation can be manually tuned. Cassandra allows the application to choose between a number of predefined consistency levels that are most relevant: (1) ONE, (2) QUORUM operation, and (3) ALL [10]. The first level \"ONE\" indicates that an operation is considered successful when a replica (R = 1) delivered the latest version in the case of a read operation, or a confirmation is received from a replica. (W = 1) a confirmation from a replica is obtained, a confirmation from a latency is obtained, or a replica from a high level (W = 1) and a high level (W = 1) is obtained."}, {"heading": "IV. PROPOSED ADAPTATION STRATEGY", "text": "The adaptation strategy requires the cooperation of different modules of an adaptive controller (proposed in [1]).In this section we describe some of the modules needed to implement the adaptive controller architecture, namely (1) the Stored Procedure Compiler Module, (2) the Tunable Consistency Module and (3) the Adapting Module."}, {"heading": "A. Stored Procedure Compiler Module", "text": "Applications often require different performance indicators. This module is required to enable applications to instruct controllers in the calculation of their performance indicators (e.g. standard load deviation in the case of a load balancing application). In addition, if applications are to be run on physically separate machines from the controllers, the task of calculating the performance indicators is transferred to the controllers in order to reduce delays in communication between applications and controllers. An application installs a stored procedure similar to that used in database systems [18] on the controller, which can be executed by the Stored Procedure Compiler module to calculate the value of the application-specific performance indicator if necessary. We assume that security measures will be taken to prevent the use of the Stored Procedure Compiler Module and to ensure the safe execution of the stored procedures on the controllers."}, {"heading": "B. Tunable Consistency Module", "text": "This module provides the adaptation module with another consistency module without adapting directly to the module. This module provides the consistency level, which cannot be changed to change the level of consistency. \u2212 \u2212 N As mentioned earlier, the adaptation module requires a parameter that can be set to change the consistency level. In the proposed strategy, we adopt the consistency model discussed in Section III-B as the basis for our consistency module. This model provides R, W and N as configurable parameters. However, mapping these parameters to a performance indicator (both) might not be complex for the adaptation module. R, W, and N are specific parameters for this particular consistency model (Cassandra-like). Therefore, exposing R, W, and N to the adaptation module would reduce the modularity of the system i.e."}, {"heading": "C. Adaptation Module", "text": "The Adaptation Module is responsible for selecting an appropriate configuration (i.e., consistency level) for the required consistency modules (i.e., the consistency level) for a particular level of performance (.2), which is calculated using the stored Process Compilation Module. In this section, we will show how clustering can be used by the Adaptation Module to convert a particular level of performance (.2) into a corresponding level of consistency (.2). In this section, we must continuously collect sample data about the application performance and configuration of the table Consistency Module. Specifically, it collects different values for the consistency level (.3) and uses these values to update cluster technology. We use clustering."}, {"heading": "D. Application-Controller Interaction", "text": "Figure 3 shows a sequence diagram for the proposed adaptation strategy. It shows the interaction between the application (app) and the different controller modules: stored procedure compiler module (SPCM), adapter module (AM) and tunable consistency module (TCM). First, the application creates a stored procedure responsible for calculating the application-specific performance indicator (BA) and then sends this procedure to the controller, where it is executed by the stored procedure compiler module as required. Next, the controller monitors and collects samples (X and D) for the application-specific performance indicator (BA) and the corresponding consistency level (BA). Then, the adaptation module calls the cluster algorithm (Learn (X, BO) for each sample and finally, when the application matches the consistency parator with a desired value (D) and (D) for the (D)."}, {"heading": "V. EVALUATION", "text": "In order to evaluate the validity of the proposed adaptation strategy, we evaluated the effectiveness of cluster techniques (sequential and incremental) in mapping performance indicators (\u2265) to consistency levels (\u0438). In our evaluation, we assumed that the relationship between the application-specific performance indicator (\u0438) and the consistency level indicator (\u043c) had the following relationships: (1) linear (\u0438 = A\u03a6 + C), (2) square (\u0442 = A\u03a62 + B\u03a6 + C), (3) cubic (\u0438 = A\u03a63 + B\u03a62 + C\u0438 + D), or (4) logarithmic (\u0439 = A.log10 (\u0445) + C). A, B, C and D are constants. We used a sample of 1000 uniform random numbers to boot the results of the tested algorithms. Then we selected 100 arbitrary, random values for the adaptation modules."}, {"heading": "VI. CONCLUSION AND FUTURE WORK", "text": "In this paper, we investigated the feasibility of using adaptive controllers based on tunable consistency models similar to that of Apache Cassandra. We presented an adaptation strategy that selects workable values for the indicator of the consistency level that meets a specific indicator of application performance. We used two online cluster techniques (sequential and incremental K agents) to find an appropriate mapping between the indicator of application performance and the indicator of consistency level. In the cases we tested, our results showed that in the case of sequential K agents with an appropriate number of clusters (\u2265 50) a plausible mapping (low RMSE) between the application performance indicators (\u0439) and the consistency level indicator (\u0438 0.01) could be estimated. In the case of incremental K agents, the results also showed that a plausible mapping (low RMSE) of a similar number (\u2265 50) could be estimated by a small number of RMSE."}, {"heading": "VII. ACKNOWLEDGMENTS", "text": "The second author recognizes the support of the Natural Sciences and Engineering Research Council of Canada (NSERC) through the NSERC Discovery Grant program."}], "references": [{"title": "Adaptive Consistency for Distributed SDN Controllers", "author": ["M. Aslan", "A. Matrawy"], "venue": "Proceedings of the 17th International Network Strategy and Planning Symposium (Networks 2016), 2016, http://www.sce.carleton.ca/\u223cmaslan/files/sdn-adaptive.pdf.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2016}, {"title": "Towards an elastic distributed sdn controller", "author": ["A. Dixit", "F. Hao", "S. Mukherjee", "T. Lakshman", "R. Kompella"], "venue": "Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. ACM, 2013, pp. 7\u201312.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2013}, {"title": "Hyperflow: A distributed control plane for openflow", "author": ["A. Tootoonchian", "Y. Ganjali"], "venue": "Proceedings of the 2010 internet network management conference on Research on enterprise networking. USENIX Association, 2010, pp. 3\u20133.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2010}, {"title": "Logically centralized?: state distribution trade-offs in software defined networks", "author": ["D. Levin", "A. Wundsam", "B. Heller", "N. Handigol", "A. Feldmann"], "venue": "Proc. of the first workshop on Hot topics in software defined networks. ACM, 2012, pp. 1\u20136.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "Onix: A distributed control platform for large-scale production networks.", "author": ["T. Koponen", "M. Casado", "N. Gude", "J. Stribling", "L. Poutievski", "M. Zhu", "R. Ramanathan", "Y. Iwata", "H. Inoue", "T. Hama"], "venue": "in OSDI,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "Onos: towards an open, distributed sdn os", "author": ["P. Berde", "M. Gerola", "J. Hart", "Y. Higuchi", "M. Kobayashi", "T. Koide", "B. Lantz", "B. O\u2019Connor", "P. Radoslavov", "W. Snow"], "venue": "Proceedings of the third workshop on Hot topics in software defined networking. ACM, 2014, pp. 1\u20136.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2014}, {"title": "Cap for networks", "author": ["A. Panda", "C. Scott", "A. Ghodsi", "T. Koponen", "S. Shenker"], "venue": "Proc. of the second ACM SIGCOMM workshop on Hot topics in software defined networking. ACM, 2013, pp. 91\u201396.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2013}, {"title": "Towards robust distributed systems", "author": ["E. Brewer"], "venue": "PODC, 2000, p. 7.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2000}, {"title": "Cap twelve years later: How the \u201crules\u201d have changed", "author": ["\u2014\u2014"], "venue": "Computer, vol. 45, no. 2, pp. 23\u201329, 2012.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2012}, {"title": "Building replicated internet services using tact: A toolkit for tunable availability and consistency tradeoffs", "author": ["H. Yu", "A. Vahdat"], "venue": "Advanced Issues of E-Commerce and Web-Based Information Systems, 2000. WECWIS 2000. Second International Workshop on. IEEE, 2000, pp. 75\u201384.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2000}, {"title": "Improving the performance of load balancing in software-defined networks through load variance-based synchronization", "author": ["Z. Guo", "M. Su", "Y. Xu", "Z. Duan", "L. Wang", "S. Hui", "H.J. Chao"], "venue": "Computer Networks, vol. 68, no. 0, pp. 95 \u2013 109, 2014, communications and Networking in the Cloud.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2014}, {"title": "On the impact of network state collection on the performance of sdn applications", "author": ["M. Aslan", "A. Matrawy"], "venue": "IEEE Communications Letters, vol. 20, no. 1, pp. 5\u20138, 2016.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "Cassandra: structured storage system on a p2p network", "author": ["A. Lakshman", "P. Malik"], "venue": "Proceedings of the 28th ACM symposium on Principles of distributed computing. ACM, 2009, pp. 5\u20135.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2009}, {"title": "Cassandra: a decentralized structured storage system", "author": ["\u2014\u2014"], "venue": "ACM SIGOPS Operating Systems Review, vol. 44, no. 2, pp. 35\u201340, 2010.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Amazon dynamodb: a seamlessly scalable nonrelational database service", "author": ["S. Sivasubramanian"], "venue": "Proceedings of the 2012 ACM SIGMOD International Conference on Management of Data. ACM, 2012, pp. 729\u2013730.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2012}, {"title": "Probabilistically bounded staleness for practical partial quorums", "author": ["P. Bailis", "S. Venkataraman", "M.J. Franklin", "J.M. Hellerstein", "I. Stoica"], "venue": "Proceedings of the VLDB Endowment, vol. 5, no. 8, pp. 776\u2013787, 2012.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2012}, {"title": "Online clustering of parallel data streams", "author": ["J. Beringer", "E. H\u00fcllermeier"], "venue": "Data & Knowledge Engineering, vol. 58, no. 2, pp. 180\u2013204, 2006.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2006}, {"title": "Scalable techniques for clustering the web", "author": ["T. Haveliwala", "A. Gionis", "P. Indyk"], "venue": "2000.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2000}, {"title": "Incremental clustering: The case for extra clusters", "author": ["M. Ackerman", "S. Dasgupta"], "venue": "Advances in Neural Information Processing Systems, 2014, pp. 307\u2013315.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2014}, {"title": "Clustering methods", "author": ["L. Rokach", "O. Maimon"], "venue": "Data mining and knowledge discovery handbook. Springer, 2005, pp. 321\u2013352.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2005}], "referenceMentions": [{"referenceID": 0, "context": "Earlier, we suggested [1] the use of adaptivelyconsistent controllers that can autonomously tune their consistency parameters in order to meet the performance requirements of a certain application.", "startOffset": 22, "endOffset": 25}, {"referenceID": 1, "context": "Recent research [2], [3], [4], [5], [6] in Software-Defined Networking (SDN) employs multiple distributed controllers for scalability and reliability reasons.", "startOffset": 16, "endOffset": 19}, {"referenceID": 2, "context": "Recent research [2], [3], [4], [5], [6] in Software-Defined Networking (SDN) employs multiple distributed controllers for scalability and reliability reasons.", "startOffset": 21, "endOffset": 24}, {"referenceID": 3, "context": "Recent research [2], [3], [4], [5], [6] in Software-Defined Networking (SDN) employs multiple distributed controllers for scalability and reliability reasons.", "startOffset": 26, "endOffset": 29}, {"referenceID": 4, "context": "Recent research [2], [3], [4], [5], [6] in Software-Defined Networking (SDN) employs multiple distributed controllers for scalability and reliability reasons.", "startOffset": 31, "endOffset": 34}, {"referenceID": 5, "context": "Recent research [2], [3], [4], [5], [6] in Software-Defined Networking (SDN) employs multiple distributed controllers for scalability and reliability reasons.", "startOffset": 36, "endOffset": 39}, {"referenceID": 6, "context": "Hence, they are subjected to issues similar to those affecting distributed datastores [7].", "startOffset": 86, "endOffset": 89}, {"referenceID": 7, "context": "A major issue is the trade-off between consistency and availability in the case of network partitioning, which was identified by Eric Brewer in the CAP (Consistency, Availability and Partitioning) conjecture [8], [9].", "startOffset": 208, "endOffset": 211}, {"referenceID": 8, "context": "A major issue is the trade-off between consistency and availability in the case of network partitioning, which was identified by Eric Brewer in the CAP (Consistency, Availability and Partitioning) conjecture [8], [9].", "startOffset": 213, "endOffset": 216}, {"referenceID": 9, "context": "While, systems that have the ability to change their behavior (degree of consistency) are known as tunably-consistent systems [10], [11].", "startOffset": 132, "endOffset": 136}, {"referenceID": 3, "context": "In SDN, the consistency level of state information exchanged among the distributed controllers can negatively affect the network application performance [4], [12], [13], depending on the performance indicators being considered.", "startOffset": 153, "endOffset": 156}, {"referenceID": 10, "context": "In SDN, the consistency level of state information exchanged among the distributed controllers can negatively affect the network application performance [4], [12], [13], depending on the performance indicators being considered.", "startOffset": 158, "endOffset": 162}, {"referenceID": 11, "context": "In SDN, the consistency level of state information exchanged among the distributed controllers can negatively affect the network application performance [4], [12], [13], depending on the performance indicators being considered.", "startOffset": 164, "endOffset": 168}, {"referenceID": 0, "context": "Earlier [1], we proposed the use of adaptive controllers [1] running ontop of tunably-consistent controllers in order to autonomously handle setting the parameters of the tunably-consistent distributed controllers based on application-specific performance indicators.", "startOffset": 8, "endOffset": 11}, {"referenceID": 0, "context": "Earlier [1], we proposed the use of adaptive controllers [1] running ontop of tunably-consistent controllers in order to autonomously handle setting the parameters of the tunably-consistent distributed controllers based on application-specific performance indicators.", "startOffset": 57, "endOffset": 60}, {"referenceID": 12, "context": "In this paper, we investigate the feasibility of using adaptive controllers running on-top of tunable consistency models similar to that of Apache Cassandra [14], [15] or Amazon DB [16].", "startOffset": 157, "endOffset": 161}, {"referenceID": 13, "context": "In this paper, we investigate the feasibility of using adaptive controllers running on-top of tunable consistency models similar to that of Apache Cassandra [14], [15] or Amazon DB [16].", "startOffset": 163, "endOffset": 167}, {"referenceID": 14, "context": "In this paper, we investigate the feasibility of using adaptive controllers running on-top of tunable consistency models similar to that of Apache Cassandra [14], [15] or Amazon DB [16].", "startOffset": 181, "endOffset": 185}, {"referenceID": 1, "context": "[2], suggested dynamically growing and shrinking the pool of controllers based on the traffic conditions, and to get rid of the controller/switch static mapping which can led to uneven distribution of the control load.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "First, those controllers are subjected to issues that affect distributed datastores [7] including the trade-off between consistency and availability of data during network partitioning.", "startOffset": 84, "endOffset": 87}, {"referenceID": 4, "context": "As such, some SDN applications may prefer different consistency and availability configurations [5].", "startOffset": 96, "endOffset": 99}, {"referenceID": 10, "context": "However, as long as it is not creating routing loops (more in [12]), it can tolerate some inconsistency in order to achieve a higher degree of availability.", "startOffset": 62, "endOffset": 66}, {"referenceID": 4, "context": "Onix [5] lets the applications make their own trade-off between consistency and availability by providing them with two data-stores: (1) a strongly consistent transactional data-store, and (2) an eventually consistent (more in the next section) in-memory distribute hash table (DHT).", "startOffset": 5, "endOffset": 8}, {"referenceID": 0, "context": "In such mode, the controllers given a per-application performance indicator will monitor the network behavior and adapt to the current conditions by autonomously tuning their consistency levels [1].", "startOffset": 194, "endOffset": 197}, {"referenceID": 12, "context": "In this section, we explain the consistency model used in a number of modern data-stores such as Apache Cassandra [14], [15] and Amazon DynamoDB [16].", "startOffset": 114, "endOffset": 118}, {"referenceID": 13, "context": "In this section, we explain the consistency model used in a number of modern data-stores such as Apache Cassandra [14], [15] and Amazon DynamoDB [16].", "startOffset": 120, "endOffset": 124}, {"referenceID": 14, "context": "In this section, we explain the consistency model used in a number of modern data-stores such as Apache Cassandra [14], [15] and Amazon DynamoDB [16].", "startOffset": 145, "endOffset": 149}, {"referenceID": 15, "context": "Eventual consistency [17] is a consistency model where all replicas eventually receive the most up-to-date values after sometime if no further updated occurred.", "startOffset": 21, "endOffset": 25}, {"referenceID": 13, "context": "Even though the number of replicas (N ) is application-specific, the nodes (controllers) themselves that are responsible for maintaining such replicas are decided by a consistent hashing function [15].", "startOffset": 196, "endOffset": 200}, {"referenceID": 0, "context": "The adaptation strategy requires the collaboration of different modules of an adaptive controller (proposed in [1]).", "startOffset": 111, "endOffset": 114}, {"referenceID": 15, "context": "In case of strong consistency (R+W \u2265 N ), \u03a6 = 1 otherwise \u03a6 = 1\u2212ps where ps (shown in (1)) is the probability that the read quorum does not include the last up-to-date version [17].", "startOffset": 176, "endOffset": 180}, {"referenceID": 15, "context": "R ) [17] (1)", "startOffset": 4, "endOffset": 8}, {"referenceID": 16, "context": "We opt for online incremental clustering techniques [19], [20].", "startOffset": 52, "endOffset": 56}, {"referenceID": 17, "context": "We opt for online incremental clustering techniques [19], [20].", "startOffset": 58, "endOffset": 62}, {"referenceID": 18, "context": "Algorithm 2 is our adoptation of the \u201csequential K-means\u201d algorithm presented in [21].", "startOffset": 81, "endOffset": 85}, {"referenceID": 19, "context": "We adopt the \u201cincremental clustering\u201d algorithm presented in [22] as a base for Algorithm 3.", "startOffset": 61, "endOffset": 65}], "year": 2017, "abstractText": "Distributed controllers are oftentimes used in largescale SDN deployments where they run a myriad of network applications simultaneously. Such applications could have different consistency and availability preferences. These controllers need to communicate via east/west interfaces in order to synchronize their state information. The consistency and the availability of the distributed state information are governed by an underlying consistency model. Earlier, we suggested [1] the use of adaptivelyconsistent controllers that can autonomously tune their consistency parameters in order to meet the performance requirements of a certain application. In this paper, we examine the feasibility of employing adaptive controllers that are built on-top of tunable consistency models similar to that of Apache Cassandra. We present an adaptation strategy that uses clustering techniques (sequential k-means and incremental k-means) in order to map a given application performance indicator (\u03c7) into a feasible consistency level (\u03a6) that can be used with the underlying tunable consistency model. In the cases that we modeled and tested, our results show that in the case of sequential k-means, with a reasonable number of clusters (\u2265 50), a plausible mapping (low RMSE) could be estimated between the application performance indicators (\u03c7) and the consistency level indicator (\u03a6). In the case of incremental k-means, the results also showed that a plausible mapping (low RMSE) could be estimated using a similar number of clusters (\u2265 50) by using a small threshold (\u2243 0.01).", "creator": "LaTeX with hyperref package"}}}