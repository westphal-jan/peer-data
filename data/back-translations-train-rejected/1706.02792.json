{"id": "1706.02792", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jun-2017", "title": "The FastMap Algorithm for Shortest Path Computations", "abstract": "We present a new preprocessing algorithm for embedding the nodes of a given edge-weighted undirected graph into a Euclidean space. In this space, the Euclidean distance between any two nodes approximates the length of the shortest path between them in the given graph. Later, at runtime, a shortest path between any two nodes can be computed using A* search with the Euclidean distances as heuristic estimates. Our preprocessing algorithm, dubbed FastMap, is inspired by the Data Mining algorithm of the same name and runs in near-linear time. Hence, FastMap is orders of magnitude faster than competing approaches that produce a Euclidean embedding using Semidefinite Programming. Our FastMap algorithm also produces admissible and consistent heuristics and therefore guarantees the generation of optimal paths. Moreover, FastMap works on general undirected graphs for which many traditional heuristics, such as the Manhattan Distance heuristic, are not always well defined. Empirically too, we demonstrate that the FastMap heuristic is competitive with other state-of-the-art heuristics like the Differential heuristic.", "histories": [["v1", "Thu, 8 Jun 2017 23:29:05 GMT  (2119kb,D)", "http://arxiv.org/abs/1706.02792v1", null], ["v2", "Sat, 21 Oct 2017 19:11:06 GMT  (2119kb,D)", "http://arxiv.org/abs/1706.02792v2", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["liron cohen", "t k satish kumar", "tansel uras", "sven koenig"], "accepted": false, "id": "1706.02792"}, "pdf": {"name": "1706.02792.pdf", "metadata": {"source": "CRF", "title": "The FastMap Algorithm for Shortest Path Computations", "authors": ["Liron Cohen", "T.K. Satish Kumar", "Tansel Uras", "Sven Koenig"], "emails": [], "sections": [{"heading": "Introduction and Related Work", "text": "In video games, for example, much of the CPU cycles are seen only on short-term paths that are calculated on shortest paths [Uras and Koenig, 2015]. Many other tasks in AI, including motion planning [LaValle, 2006], time reasoning [Dechter, 2003], and decision making [Russell and Norvig, 2009], also involve finding and thinking about shortest paths. While Dijkstra's algorithm [Dijkstra, 1959] can be used to calculate shortest paths in polynomial time, faster calculations carry important implications for the time efficiency of aforementioned tasks. One way to promote the shortest paths of calculations is to use the A * search framework with an informed heuristic framework [Hart et al, 1968].A perfect heuristic path is one that returns the true shortest distance between two nodes in a given diagram."}, {"heading": "The Origin of FastMap", "text": "This year, it is only a matter of time before an agreement is reached."}, {"heading": "FastMap for Shortest Path Computations", "text": "In this area, it is possible that the number of nodes that depend on the individual nodes depends on the number of nodes that depend on the individual nodes, depends on the number of nodes. (The number of nodes that depend on the individual nodes). (The number of nodes that depend on the number of nodes that are covered by the nodes is dependent on the number of nodes that are covered by the nodes.) (The number of nodes that are covered by the nodes that are covered by the nodes and the number of nodes that are covered by the nodes.) (The number of nodes that are covered by the nodes that are covered by the nodes and the nodes that are covered by the nodes and the nodes that are covered by the nodes that are covered by the nodes and the nodes that are covered by the nodes that are covered by the nodes and the nodes that are covered by the nodes that are covered by the nodes and the nodes that are covered by the nodes that are covered by the nodes that are covered by the nodes.) (The number of nodes that are the nodes that are covered by the nodes that are covered by the nodes and the nodes that are covered by the nodes that are covered by the nodes that are covered by the nodes and the nodes that are covered by the nodes that are covered by the nodes that are covered by the nodes that are covered by the"}, {"heading": "Proof of Consistency", "text": "In this subsection, we occupy the consistency of Fastp heuristic. Since consistency implies admissibility, it also proves that A * returns heuristic optimal paths with FastMap. We use the following notation in the proofs: wixy is the weight at the boundary between nodes x and y in the ith iteration; dixy is the shortest path between nodes x and y in the ith iteration (using weights wi); px is the vector of coordinates that are jth coordinates for node x and [px] j is its jth coordinate; 7 hixy is the hyporistic value between nodes x and y in the ith iteration. Note: hixy \u2212 pix \u2212 piy is the vector of coordinates that are jth coordinates for node x and [px] j is its jth coordinate; 7 hixy is the FastMap heuristic value between nodes x and y by iterations."}, {"heading": "Experimental Results", "text": "Figure 4 shows representative results. FastMap heuristics (FM) and differential heuristics (DH) with equal memory resources 8 are compared with each other. Furthermore, we include Octile heuristics (OCT) as the starting euristics, which also uses a closed formula for heuristic calculations. We observe that when the number of dimensions increases, (a) FM and DH perform better than OCT; (b) in accordance with Theorem 2, the mean number of expansions of FM decreases; and (c) the MADs decrease from FM. If the MADs of FM are high, the variabilities may be exploited in future work with Rapid Randomized Restart strategies. (The dimensionality of the euclidean expansion of DDD corresponds to the number of pivots in DH.FastMap also gives us a framework to identify a point at which these dimensions are relevant between the minioniality of the dimensions of DH (the number of dimensions)."}, {"heading": "Conclusions", "text": "In this paper, we introduced an almost linear time preprocessing algorithm called FastMap to create a Euclidean embedding of a general edge-weighted undirected graph. At runtime, these Euclidean distances from A * were used as heuristic estimates for the shortest path calculations. We proved that FastMap heuristics are permissible and consistent, thus generating optimal paths. FastMap is significantly faster than competing approaches to create Euclidean embedding with optimal guarantees. We also demonstrated that it competes with other modern heuristics derived in near-linear preprocessing time. However, our method has the combined advantage of requiring only approximate linear preprocessing time and producing explicit Euclidean embedding that attempts to restore the underlying diversity of the given graphs."}], "references": [{"title": "The MIT Press", "author": ["Ethem Alpaydin. Introduction to Machine Learning"], "venue": "2nd edition,", "citeRegEx": "Alpaydin. 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "In Proceedings of the Sixth AAAI Conference on Artificial Intelligence and Interactive Digital Entertainment", "author": ["Yngv Bj\u00f6rnsson", "K\u00e1ri Halld\u00f3rsson. Improved heuristics for optimal path-finding on game maps"], "venue": "pages 9\u201314,", "citeRegEx": "Bj\u00f6rnsson and Halld\u00f3rsson. 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "Journal of Game Development", "author": ["Adi Botea", "Martin M\u00fcller", "Jonathan Schaeffer. Near optimal hierarchical path-finding"], "venue": "1:7\u201328,", "citeRegEx": "Botea et al.. 2004", "shortCiteRegEx": null, "year": 2004}, {"title": "Optimizations of data structures", "author": ["T. Cazenave"], "venue": "heuristics and algorithms for path-finding on maps. In Proceedings of the 2006 IEEE Symposium on Computational Intelligence and Games, pages 27\u201333", "citeRegEx": "Cazenave. 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "The Morgan Kaufmann Series in Artificial Intelligence", "author": ["Rina Dechter. Constraint processing"], "venue": "Elsevier,", "citeRegEx": "Dechter. 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "Numerische Mathematik", "author": ["Edsger W. Dijkstra. A note on two problems in connexion with graphs"], "venue": "1(1):269\u2013271,", "citeRegEx": "Dijkstra. 1959", "shortCiteRegEx": null, "year": 1959}, {"title": "Fastmap: A fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets", "author": ["Faloutsos", "Lin", "1995] Christos Faloutsos", "King-Ip Lin"], "venue": "In Proceedings of the 1995 ACM SIGMOD International Conference on Management of Data,", "citeRegEx": "Faloutsos et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Faloutsos et al\\.", "year": 1995}, {"title": "Contraction hierarchies: Faster and simpler hierarchical routing in road networks", "author": ["R. Geisberger", "P. Sanders", "D. Schultes", "D. Delling"], "venue": "Proceedings of the 7th International Conference on Experimental Algorithms", "citeRegEx": "Geisberger et al.. 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "Portal-based true-distance heuristics for path finding", "author": ["M. Goldenberg", "A. Felner", "N. Sturtevant", "J. Schaeffer"], "venue": "Proceedings of the Third Annual Symposium on Combinatorial Search", "citeRegEx": "Goldenberg et al.. 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "In Proceedings of the Twenty-Fifth AAAI Conference on Artificial Intelligence", "author": ["Meir Goldenberg", "Nathan Sturtevant", "Ariel Felner", "Jonathan Schaeffer. The compressed differential heuristic"], "venue": "pages 24\u201329,", "citeRegEx": "Goldenberg et al.. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "and Cybernetics", "author": ["Peter E. Hart", "Nils J. Nilsson", "Bertram Raphael. A formal basis for the heuristic determination of minimum cost paths. IEEE Transactions on Systems", "Science"], "venue": "SSC-4(2):100\u2013107,", "citeRegEx": "Hart et al.. 1968", "shortCiteRegEx": null, "year": 1968}, {"title": "Searching with abstractions: A unifying framework and new highperformance algorithm", "author": ["R.C. Holte", "C. Drummond", "M.B. Perez", "R.M. Zimmer", "A.J. Macdonald"], "venue": "Proceedings of the 10th Canadian Conference on Artificial Intelligence", "citeRegEx": "Holte et al.. 1994", "shortCiteRegEx": null, "year": 1994}, {"title": "NY", "author": ["Steven LaValle. Planning Algorithms. Cambridge University Press", "New York"], "venue": "USA,", "citeRegEx": "LaValle. 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "Search space reduction using swamp hierarchies", "author": ["N. Pochter", "A. Zohar", "J. Rosenschein", "A. Felner"], "venue": "Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence, pages 155\u2013160", "citeRegEx": "Pochter et al.. 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "In Proceedings of the Twenty-Fifth AAAI Conference on Artificial Intelligence", "author": ["Chris Rayner", "Michael Bowling", "Nathan Sturtevant. Euclidean heuristic optimization"], "venue": "pages 81\u201386,", "citeRegEx": "Rayner et al.. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "Artificial Intelligence: A Modern Approach", "author": ["Stuart J. Russell", "Peter Norvig"], "venue": "Prentice Hall,", "citeRegEx": "Russell and Norvig. 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "Contraction hierarchies on grid graphs", "author": ["S. Storandt"], "venue": "Proceedings of the 36th Annual Conference on Artificial Intelligence", "citeRegEx": "Storandt. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "In Proceedings of the Twentieth AAAI Conference on Artificial Intelligence", "author": ["Nathan Sturtevant", "Michael Buro. Partial pathfinding using map abstraction", "refinement"], "venue": "pages 1392\u20131397,", "citeRegEx": "Sturtevant and Buro. 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "Ariel Felner", "author": ["N. Sturtevant"], "venue": "Max Barrer, Jonathan Schaeffer, and Neil Burch. Memorybased heuristics for explicit state spaces. In Proceedings of the Twenty-First International Joint Conference on Artificial Intelligence, pages 609\u2013614", "citeRegEx": "Sturtevant et al.. 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "Transactions on Computational Intelligence and AI in Games", "author": ["Nathan Sturtevant. Benchmarks for gridbased pathfinding"], "venue": "4(2):144 \u2013 148,", "citeRegEx": "Sturtevant. 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Fibonacci heaps and their uses in improved network optimization algorithms", "author": ["R.E. Tarjan", "M.L. Fredman"], "venue": "2013 IEEE 54th Annual Symposium on Foundations of Computer Science", "citeRegEx": "Tarjan and Fredman. 1984", "shortCiteRegEx": null, "year": 1984}, {"title": "Multidimensional scaling: I", "author": ["Warren S. Torgerson"], "venue": "theory and method. Psychometrika, 17(4):401\u2013 419,", "citeRegEx": "Torgerson. 1952", "shortCiteRegEx": null, "year": 1952}, {"title": "In Proceedings of the Twenty-Eighth AAAI Conference on Artificial Intelligence", "author": ["Tansel Uras", "Sven Koenig. Identifying hierarchies for fast optimal search"], "venue": "pages 878\u2013884,", "citeRegEx": "Uras and Koenig. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "editor", "author": ["Tansel Uras", "Sven Koenig. Subgoal graphs for fast optimal pathfinding. In Steve Rabin"], "venue": "Game AI Pro 2: Collected Wisdom of Game AI Professionals, chapter 15, pages 145\u2013160. A K Peters/CRC Press,", "citeRegEx": "Uras and Koenig. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "SIAM REVIEW", "author": ["Lieven Vandenberghe", "Stephen Boyd. Semidefinite programming"], "venue": "38:49\u201395,", "citeRegEx": "Vandenberghe and Boyd. 1996", "shortCiteRegEx": null, "year": 1996}], "referenceMentions": [{"referenceID": 23, "context": "In video games, for example, a large fraction of CPU cycles are spent on shortest path computations [Uras and Koenig, 2015].", "startOffset": 100, "endOffset": 123}, {"referenceID": 12, "context": "Many other tasks in AI, including motion planning [LaValle, 2006], temporal reasoning [Dechter, 2003], and decision making [Russell and Norvig, 2009], also involve finding and reasoning about shortest paths.", "startOffset": 50, "endOffset": 65}, {"referenceID": 4, "context": "Many other tasks in AI, including motion planning [LaValle, 2006], temporal reasoning [Dechter, 2003], and decision making [Russell and Norvig, 2009], also involve finding and reasoning about shortest paths.", "startOffset": 86, "endOffset": 101}, {"referenceID": 15, "context": "Many other tasks in AI, including motion planning [LaValle, 2006], temporal reasoning [Dechter, 2003], and decision making [Russell and Norvig, 2009], also involve finding and reasoning about shortest paths.", "startOffset": 123, "endOffset": 149}, {"referenceID": 5, "context": "While Dijkstra\u2019s algorithm [Dijkstra, 1959] can be used to compute shortest paths in polynomial time, faster computations bear important implications on the time-efficiency of solving the aforementioned tasks.", "startOffset": 27, "endOffset": 43}, {"referenceID": 10, "context": "One way to boost shortest path computations is to use the A* search framework with an informed heuristic [Hart et al., 1968].", "startOffset": 105, "endOffset": 124}, {"referenceID": 2, "context": "Hierarchical abstractions that yield suboptimal paths have been used to reduce the size of the search space by abstracting groups of vertices [Botea et al., 2004; Sturtevant and Buro, 2005].", "startOffset": 142, "endOffset": 189}, {"referenceID": 17, "context": "Hierarchical abstractions that yield suboptimal paths have been used to reduce the size of the search space by abstracting groups of vertices [Botea et al., 2004; Sturtevant and Buro, 2005].", "startOffset": 142, "endOffset": 189}, {"referenceID": 1, "context": "More informed heuristics [Bj\u00f6rnsson and Halld\u00f3rsson, 2006; Cazenave, 2006; Sturtevant et al., 2009] guide the searches better to expand fewer states.", "startOffset": 25, "endOffset": 99}, {"referenceID": 3, "context": "More informed heuristics [Bj\u00f6rnsson and Halld\u00f3rsson, 2006; Cazenave, 2006; Sturtevant et al., 2009] guide the searches better to expand fewer states.", "startOffset": 25, "endOffset": 99}, {"referenceID": 18, "context": "More informed heuristics [Bj\u00f6rnsson and Halld\u00f3rsson, 2006; Cazenave, 2006; Sturtevant et al., 2009] guide the searches better to expand fewer states.", "startOffset": 25, "endOffset": 99}, {"referenceID": 11, "context": "Hierarchies can also be used to derive heuristics during search [Leighton et al., 2008; Holte et al., 1994].", "startOffset": 64, "endOffset": 107}, {"referenceID": 1, "context": "Dead-end detection and other pruning methods [Bj\u00f6rnsson and Halld\u00f3rsson, 2006; Goldenberg et al., 2010; Pochter et al., 2010] identify areas of the graph that do not need to be searched to find shortest paths.", "startOffset": 45, "endOffset": 125}, {"referenceID": 8, "context": "Dead-end detection and other pruning methods [Bj\u00f6rnsson and Halld\u00f3rsson, 2006; Goldenberg et al., 2010; Pochter et al., 2010] identify areas of the graph that do not need to be searched to find shortest paths.", "startOffset": 45, "endOffset": 125}, {"referenceID": 13, "context": "Dead-end detection and other pruning methods [Bj\u00f6rnsson and Halld\u00f3rsson, 2006; Goldenberg et al., 2010; Pochter et al., 2010] identify areas of the graph that do not need to be searched to find shortest paths.", "startOffset": 45, "endOffset": 125}, {"referenceID": 7, "context": "Search with contraction hierarchies [Geisberger et al., 2008] is an optimal and extremely hierarchical method, as every level of the hierarchy contains only a single node.", "startOffset": 36, "endOffset": 61}, {"referenceID": 16, "context": "It has been shown to be effective on road networks but seems to be less effective on graphs with higher branching factors, such as gridbased game maps [Storandt, 2013].", "startOffset": 151, "endOffset": 167}, {"referenceID": 22, "context": "Another approach is that of N-level graphs [Uras and Koenig, 2014] constructed from undirected graphs by partitioning the nodes into levels.", "startOffset": 43, "endOffset": 66}, {"referenceID": 14, "context": "One such approach is presented in [Rayner et al., 2011].", "startOffset": 34, "endOffset": 55}, {"referenceID": 24, "context": "SDPs can be solved in polynomial time [Vandenberghe and Boyd, 1996]; and in this case, additional structure is leveraged to solve them in cubic time [Rayner et al.", "startOffset": 38, "endOffset": 67}, {"referenceID": 14, "context": "SDPs can be solved in polynomial time [Vandenberghe and Boyd, 1996]; and in this case, additional structure is leveraged to solve them in cubic time [Rayner et al., 2011].", "startOffset": 149, "endOffset": 170}, {"referenceID": 14, "context": "However, unlike the approach in [Rayner et al., 2011], it does not produce an explicit Euclidean embedding.", "startOffset": 32, "endOffset": 53}, {"referenceID": 18, "context": "The shortest path distances between each pivot node and every other node are precomputed and stored [Sturtevant et al., 2009].", "startOffset": 100, "endOffset": 125}, {"referenceID": 9, "context": "The required space is linear in the number of pivots times the number of nodes, although a more succinct representation is presented in [Goldenberg et al., 2011].", "startOffset": 136, "endOffset": 161}, {"referenceID": 8, "context": "Similar preprocessing techniques are used in Portal-Based True Distance heuristics [Goldenberg et al., 2010].", "startOffset": 83, "endOffset": 108}, {"referenceID": 0, "context": "Clustering techniques, such as the k-means algorithm, are well studied in Machine Learning [Alpaydin, 2010]; but they cannot be applied directly to domains with abstract objects as described above.", "startOffset": 91, "endOffset": 107}, {"referenceID": 21, "context": "One of the early approaches for generating such an embedding was based on the idea of multi-dimensional scaling (MDS) [Torgerson, 1952].", "startOffset": 118, "endOffset": 135}, {"referenceID": 20, "context": "Computing dai and dib for any single Oi can no longer be done in constant time but requiresO(|E|+|V | log |V |) time instead [Tarjan and Fredman, 1984].", "startOffset": 125, "endOffset": 151}, {"referenceID": 19, "context": "We set up experiments on many benchmark maps from [Sturtevant, 2012].", "startOffset": 50, "endOffset": 68}], "year": 2017, "abstractText": "We present a new preprocessing algorithm for embedding the nodes of a given edge-weighted undirected graph into a Euclidean space. In this space, the Euclidean distance between any two nodes approximates the length of the shortest path between them in the given graph. Later, at runtime, a shortest path between any two nodes can be computed using A* search with the Euclidean distances as heuristic estimates. Our preprocessing algorithm, dubbed FastMap, is inspired by the Data Mining algorithm of the same name and runs in nearlinear time. Hence, FastMap is orders of magnitude faster than competing approaches that produce a Euclidean embedding using Semidefinite Programming. Our FastMap algorithm also produces admissible and consistent heuristics and therefore guarantees the generation of optimal paths. Moreover, FastMap works on general undirected graphs for which many traditional heuristics, such as the Manhattan Distance heuristic, are not always well defined. Empirically too, we demonstrate that the FastMap heuristic is competitive with other stateof-the-art heuristics like the Differential heuristic. Introduction and Related Work Shortest path problems commonly occur in the inner procedures of many AI programs. In video games, for example, a large fraction of CPU cycles are spent on shortest path computations [Uras and Koenig, 2015]. Many other tasks in AI, including motion planning [LaValle, 2006], temporal reasoning [Dechter, 2003], and decision making [Russell and Norvig, 2009], also involve finding and reasoning about shortest paths. While Dijkstra\u2019s algorithm [Dijkstra, 1959] can be used to compute shortest paths in polynomial time, faster computations bear important implications on the time-efficiency of solving the aforementioned tasks. One way to boost shortest path computations is to use the A* search framework with an informed heuristic [Hart et al., 1968]. A perfect heuristic is one that returns the true shortest path distance between any two nodes in a given graph. In this graph, A* with such a heuristic and proper tie-breaking is guaranteed to expand nodes only on an optimal path between the specified start and goal nodes. In general, computing the perfect heuristic value between two nodes is as hard as computing the shortest path between them. Hence, A* search can benefit from a perfect heuristic only if it is computed offline. However, precomputing all pairwise shortest path distances is not only time-intensive but also requires a prohibitive O(N) memory where N is the number of nodes. Many methods for preprocessing a given graph (without precomputing all pairwise shortest path distances) have been studied before and can be grouped into several categories. Hierarchical abstractions that yield suboptimal paths have been used to reduce the size of the search space by abstracting groups of vertices [Botea et al., 2004; Sturtevant and Buro, 2005]. More informed heuristics [Bj\u00f6rnsson and Halld\u00f3rsson, 2006; Cazenave, 2006; Sturtevant et al., 2009] guide the searches better to expand fewer states. Hierarchies can also be used to derive heuristics during search [Leighton et al., 2008; Holte et al., 1994]. Dead-end detection and other pruning methods [Bj\u00f6rnsson and Halld\u00f3rsson, 2006; Goldenberg et al., 2010; Pochter et al., 2010] identify areas of the graph that do not need to be searched to find shortest paths. Search with contraction hierarchies [Geisberger et al., 2008] is an optimal and extremely hierarchical method, as every level of the hierarchy contains only a single node. It has been shown to be effective on road networks but seems to be less effective on graphs with higher branching factors, such as gridbased game maps [Storandt, 2013]. Another approach is that of N-level graphs [Uras and Koenig, 2014] constructed from undirected graphs by partitioning the nodes into levels. The hierarchy allows significant pruning during search. A different approach that does not rely on preprocessing the graph makes use of some notion of a geometric distance between two nodes as a heuristic estimate of the shortest path distance between them. One such common heuristic that is used in gridworlds is the Manhattan Distance heuristic.1 For many gridworlds, A* search with the Manhattan Distance heuristic outperforms Dijkstra\u2019s algorithm. However, in complicated 2D/3D gridworlds like mazes, the Manhattan Distance heuristic may not be informed enough to efficiently guide A* search. Another issue associated with Manhattan In a 4-connected 2D gridworld, for example, the Manhattan Distance between two cells (x1, y1) and (x2, y2) is |x1\u2212x2|+|y1\u2212y2|. Similar generalizations exist for 3D and 8-connected gridworlds. ar X iv :1 70 6. 02 79 2v 1 [ cs .A I] 8 J un 2 01 7 Distance-like heuristics is that they are not well defined for general graphs.2 For a graph that cannot be conceived in a geometric space, there is no closed-form formula for a \u201cgeometric\u201d heuristic estimate for the distance between two nodes because there are no coordinates associated with them. For a graph that does not already have a geometric embedding in Euclidean space, a preprocessing algorithm can be used to generate one. As described before, at runtime, A* search would then use the Euclidean distance between any two nodes in this space as an estimate for the length of the shortest path between them in the given graph. One such approach is presented in [Rayner et al., 2011]. This approach guarantees admissiblility and consistency of the heuristic and therefore generates optimal paths. However, it requires solving a Semidefinite Program (SDP) in its preprocessing phase. SDPs can be solved in polynomial time [Vandenberghe and Boyd, 1996]; and in this case, additional structure is leveraged to solve them in cubic time [Rayner et al., 2011]. Still, a cubic preprocessing time limits the size of the graphs that are amenable to this approach. The Differential heuristic is another state-of-the-art approach that has the benefits of near-linear preprocessing time. However, unlike the approach in [Rayner et al., 2011], it does not produce an explicit Euclidean embedding. In the preprocessing phase of the Differential heuristic approach, some nodes of the graph are chosen as pivot nodes. The shortest path distances between each pivot node and every other node are precomputed and stored [Sturtevant et al., 2009]. At runtime, the heuristic distance between two nodes, a and b, is given by maxp |d(a, p)\u2212 d(p, b)| where p is a pivot node and d(, ) is the precomputed distance. The preprocessing time is linear in the number of pivots times the size of the graph. The required space is linear in the number of pivots times the number of nodes, although a more succinct representation is presented in [Goldenberg et al., 2011]. Similar preprocessing techniques are used in Portal-Based True Distance heuristics [Goldenberg et al., 2010]. In this paper, we present a new preprocessing algorithm that produces an explicit Euclidean embedding while running in near-linear time. It therefore has the benefits of the Differential heuristic\u2019s preprocessing time as well as that of producing an embedding from which heuristic estimates can be quickly computed using closed-form formulas. Our preprocessing algorithm, dubbed FastMap, is inspired by the Data Mining algorithm of the same name [Faloutsos and Lin, 1995]. It is orders of magnitude faster than SDP-based approaches for producing Euclidean embeddings. FastMap also produces admissible and consistent heuristics and therefore guarantees the generation of optimal paths. In comparison to other heuristics derived from closed-form formulas, like the Manhattan or the Octile Distance heuristics, the FastMap heuristic has several advantages. First, it is defined for general undirected graphs (even if they are not gridworlds). Second, we observe empirically that even in gridworlds, A* with the FastMap heuristic outperforms A* with the Manhattan or the Octile Distance heuristic. In comHenceforth, whenever we refer to a graph, we mean an edgeweighted undirected graph unless stated otherwise. parison to the Differential heuristic with the same memory resources, the FastMap heuristic is not only competitive with it on some graphs but even outperforms it on some others. This performance of FastMap is encouraging given that it produces an explicit Euclidean embedding that has other representational benefits like recovering the underlying manifolds of the graph and/or visualizing it. Moreover, we observe that the FastMap and the Differential heuristics have complementary strengths and can be easily combined to generate a more informed heuristic. The Origin of FastMap The FastMap algorithm [Faloutsos and Lin, 1995] was introduced in the Data Mining community for automatically generating geometric embeddings of abstract objects. For example, if we are given objects in the form of long DNA strings, multimedia datasets such as voice excerpts or images, or medical datasets such as ECGs or MRIs, there is no geometric space in which these objects can be naturally visualized. However, in many of these domains, there is still a well defined distance function between every pair of objects. For example, given two DNA strings, the edit distance between them3 is well defined although an individual DNA string cannot be conceptualized in a geometric space. Clustering techniques, such as the k-means algorithm, are well studied in Machine Learning [Alpaydin, 2010]; but they cannot be applied directly to domains with abstract objects as described above. This is because these algorithms assume that the objects are described as points in a geometric space. FastMap revives the applicability of these clustering techniques by first creating an artificial Euclidean embedding for the abstract objects. The Euclidean embedding is such that the pairwise distances are approximately preserved. Such an embedding would also help in the visualization of the abstract objects. This visualization, for example, can aid physicians in identifying correlations between symptoms or other patterns from medical records. We are given a complete undirected edge-weighted graph G = (V,E). Each vertex vi \u2208 V represents an abstract object Oi. Between any two vertices, vi and vj , there is an edge (vi, vj) \u2208 E with weight D(Oi, Oj). Here, D(Oi, Oj) is the given pairwise distance between the objects Oi and Oj . A Euclidean embedding assigns to each object Oi a Kdimensional point pi \u2208 R . A good Euclidean embedding is one in which the Euclidean distance between any two points, pi and pj , closely approximates D(Oi, Oj). One of the early approaches for generating such an embedding was based on the idea of multi-dimensional scaling (MDS) [Torgerson, 1952]. Here, overall distortion of the pairwise distances is measured in terms of the \u201cenergy\u201d stored in \u201csprings\u201d connecting each pair of objects. MDS, however, requires O(N) time (N = |V |) and hence does not scale well in practice. On the other hand, FastMap [Faloutsos and Lin, 1995] requires only linear time. Both methods embed the objects in a K-dimensional space for a user-specified K. The edit distance between two strings is the minimum number of insertions, deletions or substitutions that are needed to transform one to the other.", "creator": "LaTeX with hyperref package"}}}