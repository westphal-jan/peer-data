{"id": "1706.03144", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Jun-2017", "title": "A Focal Any-Angle Path-finding Algorithm Based on A* on Visibility Graphs", "abstract": "In this research, we investigate the subject of path-finding. A pruned version of visibility graph based on Candidate Vertices is formulated, followed by a new visibility check technique. Such combination enables us to quickly identify the useful vertices and thus find the optimal path more efficiently. The algorithm proposed is demonstrated on various path-finding cases. The performance of the new technique on visibility graphs is compared to the traditional A* on Grids, Theta* and A* on Visibility Graphs in terms of path length, number of nodes evaluated, as well as computational time. The key algorithmic contribution is that the new approach combines the merits of grid-based method and visibility graph-based method and thus yields better overall performance.", "histories": [["v1", "Fri, 9 Jun 2017 22:19:12 GMT  (1804kb)", "http://arxiv.org/abs/1706.03144v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["pei cao", "zhaoyan fan", "robert x gao", "jiong tang"], "accepted": false, "id": "1706.03144"}, "pdf": {"name": "1706.03144.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["pei.cao@uconn.edu).", "zhaoyan.fan@oregonstate.edu).", "robert.gao@case.edu).", "jtang@engr.uconn.edu)."], "sections": [{"heading": null, "text": "A truncated version of the visibility diagram based on candidate vertices is formulated, followed by a novel method of visibility checking. Such a combination allows us to quickly identify the useful wells and thus find the optimal path more efficiently. The proposed algorithm is demonstrated in various path-finding cases. The performance of the new technique on visibility diagrams is compared to the traditional methods of visibility diagrams in the traditional way in which they are used. The new method combines the merits of the grid-based method and visibility diagrams and thus leads to a better overall performance. The key algorithm contributes to the new approach combining the merits of the grid-based method and visibility diagrams."}, {"heading": "A. Preprocessing", "text": "This year, it is closer than ever before to being able to take the lead."}, {"heading": "2) Check if the obstacles block the ray between nodes", "text": "We check the obstacles delimited by the nodes one after the other (fig. 7) to see if one of them overlaps with the line segment between the two nodes. Consider fig. 8 as an example. p and q are two nodes, and obs is a unit obstacle where the vertices with the smallest and largest x, y value are respectively vmin and vmax. ifmaxmin () () x ytytx pq (6) andmaxmin () () y xtxty pq (7) then the line segment linking p and q passes through the obstacle (intersection). In equation. (6) and (7), () xpq, () ypq are predictions of | pq | on the x axis and y axis, txmin, tymin both cases only projections of | pvmin and y axis."}, {"heading": "IV. FOCAL ANY-ANGLE A* ON VISIBILITY GRAPHS", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "A. FA-A* Algorithm", "text": "iDe \"iSe\" n \"iSe nvo nlrf\u00fc\" iSe, \"so iDe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-iSe-ie-iSe-iSe-iSe-iSe-ie-ie-iSe-ie-iSe-ie-iSe-ie-ie-iSe-ie-iSe-ie-iSe-ie-iSe-iSe-iSe-ie-ie-ie-iSe-ie-iSe-iSe-"}, {"heading": "B. Optimality", "text": "The selection process of the proposed candidate vertices could be seen as a greedy approach to reduce the number of visibility checks and functional assessments compared to the methods that use full visibility graphs. The algorithm is inspired by the scenarios where two nodes are connected to elastic, since the optimal elastic connections always have the shortest possible distance and exhibit largely changes in the heading on or between vertices, which are among the clusters that play the biggest roles in blocking the two nodes. The role that the obstacles play in blocking two nodes is an abstract notion that is quantified in our research. Then va and vb correspond to the largest ranges of block clusters on each page. By specifying V3, we aim to determine all the vertices that the optimal path can traverse. While the algorithm finds better paths than A * and Theta *, the optimality of numerical tests is not always guaranteed to be highly discrete for some cases and B."}, {"heading": "C. Computational Complexity Analysis", "text": "This section provides the complexity analysis of FA-A *. The operations of FA-A * and their worst case complexity are outlined as follows: 1) Prepossessing: O (| Obs | Obs |) as it is the complexity forquick hull algorithm. | Obs | is the number of obstacles. 2) Check which clusters block the straight line between start nodes and current nodes: O (n). O (n) is the complexity for the visibility check where n represents the number of obstacles between the two nodes. 3) Calculate: O (V2 | V2 | is the size of V2. 4) Check if a vertex is within the triangle: O (3 | V1 |). O (3) is the complexity to check if a point is within a triangle. 5) Check if a point is visible within a triangle."}, {"heading": "D. Data Structure", "text": "In this research, we maintain a precise data structure in which two main matrices are used: the first matrix, called Vall, isa | | V by 4 matrix, where | | V is the number of all verticals; each row of Vall corresponds to a vertex in V, where the first two columns represent the position of the vertex in the coordinate system; the third column is the obstacle index to which the vertex belongs; and the last column is the cluster index to which the obstacle belongs. Similarly, the second matrix, called the vconvex, is a matrix of 1 | V by 4, in which each row corresponds to a vertex in V1.Vall to determine V1 in preprocessing, and Vconvex is formed accordingly. After using V2, we use Vall to check whether a cluster is within or tangent to the triangle. Finally, vconvex can be used to determine V3."}, {"heading": "V. NUMERICAL TESTS", "text": "In this section, we evaluate the performance of four algorithms, i.e. A * on Grids (A * on G), Theta *, A * onVisibility Graphs (A * on V) and FA-A * among four representative test cases. In Tests A and B, we vary the location of the start node and the target node, as well as the complexity of the map. A total of 15 maps are used to evaluate the performance of each algorithm in relation to 2D benchmark cases. Next, in Test C, we maintain the number of obstacles and change the number of clusters to examine the impact of the number of clusters on the results of the path finding. Finally, in Test D, we examine the algorithms for a maze routing problem."}, {"heading": "A. Placing starting and target nodes in the corners", "text": "This year, more than ever before in the history of the city, where it is so far that it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, where it is a place, a place, where it is a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place, a place"}, {"heading": "B. Placing starting node in middle", "text": "Next, we apply the algorithms to 300 * 300 cards with different proportions of obstacles *. The start node is placed in the middle of the map (150, 150) and the target node is placed randomly; the test results are visualized in Fig. 15 and recorded in Table 3. As it took A * on visibility charts too long to find the optimal paths for the last two cases, the results are omitted; the performance comparison of the other three algorithms is the focus here. FA-A * always finds better paths than A * on grids and theta *. In addition, FA-A * performs best in all three metrics when the breakage of the obstacles is 5% and 10%. Similar to A * on visibility charts, FA-A * increases the computing time when the number of obstacles increases. A comparison of paths is offered in Fig. 16, where A * on grids scores a large number of nodes."}, {"heading": "C. Different number of clusters", "text": "In this test, we use 50 * 50 cards with 30% of the obstacles, but the number of clusters is limited. Position, size and shape of the cluster are all randomly generated. Test results are shown in Table 4 and Fig. 17. As can be seen, FA-A * always finds the shortest path and the time used decreases with increasing number of clusters. Running time from A * to G and Theta * does not show much improvement. A comparison of the four algorithms with different cluster numbers results in Fig. 18. If the number of clusters is 35 (Fig. 19), FA-A * dominates in all categories. In an extreme case where there is only one obstacle, FA-A * finds the shortest path and takes 0.0268 longer than A * to G *.98%."}, {"heading": "D. Maze Routing", "text": "It is a 511 * 511 card with 2.79% obstacles and 17 clusters. The start node and the destination node are selected as (15, 466) and (466, 15). In previous tests, set V1 consists of the vertices belonging to the convex hulls of clusters. In this test, we instead use the vertices at the convex corners because the clusters are nested in such labyrinthine routing problems. * The vertices on the convex hulls of a cluster are essentially a simplified representation of the vertibles at the convex corners of a cluster. * The term \"convex corner\" means that the inner angle of the corner is * less than 180 \u00b0 C *. The results are given in Table 5 and Fig. 20. FA-A * finds the shortest path among the four algorithms. Beeta, can be included in 871 A *."}, {"heading": "VI. CONCLUSION", "text": "In this research, we are developing a focal A * algorithm based on visibility graphs (FA-A *). FA-A * performs path finding with an emphasis on the position of the target and cuts off the complete visibility graph accordingly. The algorithm improves the computing power from A * to visibility graphs as shown in the numerical tests. In the meantime, FA-A * always finds better paths than A * on grids and theta *. In addition, FA-A * has the lowest node ratings for all test cases. While in this paper all path costs are evaluated as Euclidean distances, FA-A * would gain a more significant advantage in terms of computing time for problems with more complicated path costs. FA-A * can not only maintain the optimality of visibility graph-based methods, but can also keep pace with grid-based methods. As a result, the newly developed approach is able to find paths that are more efficient than A * vehicles and to a better Theta component."}], "references": [{"title": "Amit\u2019s game programming information", "author": ["A. Patel"], "venue": "International Journal of Robotics Research, 2000.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2000}, {"title": "Implementing a state machine language", "author": ["S. Rabin"], "venue": "AI Game Programming Wisdom, pp. 314-320, 2002.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2002}, {"title": "A comparison of high-level approaches for speeding up pathfinding", "author": ["N.R. Sturtevant", "R. Geisberger"], "venue": "AIIDE, Oct. 2010.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2010}, {"title": "A deterministic improved Q-learning for path planning of a mobile robot", "author": ["A. Konar", "I.G. Chakraborty", "S.J. Singh", "L.C. Jain", "A.K. Nagar"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics: Systems, vol. 43(5), pp.1141-1153, 2013.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Realization of an adaptive memetic algorithm using differential evolution and q-learning: a case study in multirobot path planning", "author": ["P. Rakshit", "A. Konar", "P. Bhowmik", "I. Goswami", "S. Das", "L.C. Jain", "A.K. Nagar"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics: Systems, vol. 43(4), pp.814-831, 2013.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "he problem of finding the shortest path is frequently encountered in video games, robotics, GPS navigation, and path planning etc [1]~[7].", "startOffset": 130, "endOffset": 133}, {"referenceID": 2, "context": "We further validate the findings reported in the preceding sub-sections by using one of the benchmark maze routing problems [3].", "startOffset": 124, "endOffset": 127}], "year": 2017, "abstractText": "In this research, we investigate the subject of path-finding. A pruned version of visibility graph based on Candidate Vertices is formulated, followed by a new visibility check technique. Such combination enables us to quickly identify the useful vertices and thus find the optimal path more efficiently. The algorithm proposed is demonstrated on various path-finding cases. The performance of the new technique on visibility graphs is compared to the traditional A* on Grids, Theta* and A* on Visibility Graphs in terms of path length, number of nodes evaluated, as well as computational time. The key algorithmic contribution is that the new approach combines the merits of grid-based method and visibility graph-based method and thus yields better overall", "creator": "Microsoft\u00ae Word 2016"}}}