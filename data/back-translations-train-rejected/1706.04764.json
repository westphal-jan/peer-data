{"id": "1706.04764", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Jun-2017", "title": "Efficient Streaming Algorithms for Submodular Maximization with Multi-Knapsack Constraints", "abstract": "Submodular maximization (SM) has become a silver bullet for a broad class of applications such as influence maximization, data summarization, top-$k$ representative queries, and recommendations. In this paper, we study the SM problem in data streams. Most existing algorithms for streaming SM only support the append-only model with cardinality constraints, which cannot meet the requirements of real-world problems considering either the data recency issues or more general $d$-knapsack constraints. Therefore, we first propose an append-only streaming algorithm {\\sc KnapStream} for SM subject to a $d$-knapsack constraint (SMDK). Furthermore, we devise the {\\sc KnapWindow} algorithm for SMDK over sliding windows to capture the recency constraints. Theoretically, the proposed algorithms have constant approximation ratios for a fixed number of knapsacks and sublinear complexities. We finally evaluate the efficiency and effectiveness of our algorithms in two real-world datasets. The results show that the proposed algorithms achieve two orders of magnitude speedups over the greedy baseline in the batch setting while preserving high quality solutions.", "histories": [["v1", "Thu, 15 Jun 2017 07:59:57 GMT  (285kb,D)", "http://arxiv.org/abs/1706.04764v1", "20 pages, 8 figures"]], "COMMENTS": "20 pages, 8 figures", "reviews": [], "SUBJECTS": "cs.DS cs.LG cs.SI", "authors": ["yanhao wang", "yuchen li", "kian-lee tan"], "accepted": false, "id": "1706.04764"}, "pdf": {"name": "1706.04764.pdf", "metadata": {"source": "CRF", "title": "Efficient Streaming Algorithms for Submodular Maximization with Multi-Knapsack Constraints", "authors": ["Yanhao Wang", "Yuchen Li", "Kian-Lee Tan"], "emails": ["yanhao90@comp.nus.edu.sg", "liyuchen@comp.nus.edu.sg", "tankl@comp.nus.edu.sg"], "sections": [{"heading": "1 Introduction", "text": "In many scenarios, the user numbers (or representativity) of the selected subsectors are defined by a submodular mode of operation, and the problem is formulated in such a way that it is always about maximizing a submodular mode of operation. [2] In fact, submodular functions are widely used, which are widely used in a broad category of application and selection. [3] This is why submodular functions not only adequately and generally lead to model selection problems, but also have theoretical consequences for designing efficient approach algorithms. [4] Most existing literature on submodular maximization (SM) is a problem."}, {"heading": "2 Related Work", "text": "In this section we will examine the literature that is most relevant to our work: (1) SM in the batch setting and (2) SM in the data streams. (2) SM in the batch setting. (2) SM in the batch setting. (2) SM in the batch setting. (2) SM in the batch setting. (2) SM in the batch setting. [2, 6, 11-13, 18, 27, 33], top-k representative queries [4, 9], recommendations [1, 23, 32] to name just a few. This has triggered a great researcher body to SM in recent years. [2, 6, 11-13, 18, 32], top-k representative queries [1, 23, 32], recommendations [1, 32], to name a few. This has triggered a large body of research to SM in recent years. [2, 11-13, 18, 32] We will focus on reviewing it most closely because of the SMK's work on checking it for SMK."}, {"heading": "3 Preliminaries", "text": "In this section we will first present the definitions of monotonous submodular functions and d-knapsack constraints in Section 3.1, then we will discuss the classic SMDK problem in the batch setting in Section 3.2, and in Section 3.3 we will present the problems of the SMDK in the attachment-only stream model and / or the sliding window model."}, {"heading": "3.1 Monotone Submodular Functions and d-knapsack Constraints", "text": "Monotonous submodular functions. Faced with a basic set of elements V, we consider a fixed function f: 2V \u2192 R \u2265 0 that maps each subset of elements in V to a utility value. First, we introduce the concept of marginal gain to f: Definition 1 (Marginal Gain). Then we formally define the monotonicity and submodularity of f: Based on the marginal gains of f: 1We consider f: not negative as f: Definition of f (S) \u2212 f (S). Then we formally define the monotonicity and submodularity of f: 1 based on the marginal gains of f: 1We consider f: not negative as f: Definition of f: 0 and f: Monotone.Algorithm 1 CEedy Greinput: A basic set of elements of V: A Output of elements V: A Output: A Output of G: vmax."}, {"heading": "3.2 SMDK in the Batch Setting", "text": "We define the optimization problem of maximizing a monotonous submodular function f subject to a dknapsack constraint (SMDK) as follows: max S'Vf (S) s.t. S '(1) we use S * to denote the optimal solution of SMDK, i.e. S * = argmaxS * f (S).According to the definition of d'knapsack constraint, a cardinality restriction with a budget k is a special case for a 1-knapsack restriction with c (v) = 1 / k. Since SM with a cardinality restriction has proven to be NP-hard [19], SMDK is also NP-hard.The cost-effective greedy algorithm CEGreedy is proposed in [15] for SM with 1-knapsack constraint."}, {"heading": "3.3 SMDK in Data Stream Models", "text": "The attached-only stream model considers all elements in V individually and each element must be edited as soon as it arrives. At any time, an element vt-V is observed from the stream and SMDK obviously requires an optimal S-T solution with respect to Equation 1 with an additional limitation: S-V,.... Formally, definition 2. SMDK in the only attached stream model requires a set of S-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T-T,."}, {"heading": "4 The Append-only Streaming Algorithm", "text": "In this section we propose a KnapStream algorithm for SMDK in attachment-only streams. We will first give an algorithmic description of KnapStream in Section 4.1. Then we will theoretically analyze the approximation ratio and complexity of KnapStream in Section 4.2."}, {"heading": "4.1 The Algorithmic Description", "text": "The basic idea is to estimate the optimal value of OPT from the observed elements and maintain the candidate solutions on the basis of the estimates. Since OPT cannot be determined unless P = NP, KnapStream only tracks the lower and upper limits of OPT and maintains a number of candidate solutions with different estimated values for OPT in the range. Each candidate solution derives a unique threshold for marginal gains according to its estimated value of OPT. Whenever a new element arrives, a candidate solution includes the element when the marginal gain of the addition exceeds the element. After processing all elements, the candidate solution with the greatest benefit is returned as the end result. Although KnapStream has similar basic ideas, it differs from the algorithms in [2] and [12] in two aspects: (1) the criterion of adding an element takes into account not only the marginal gain of the addition of the element, but also its cost, if it verifies the effectiveness of the element."}, {"heading": "4.2 Theoretical Analysis", "text": "For the theoretical analysis, we consider the cost of each element to be limited, i.e., 0 < 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"}, {"heading": "5 The Sliding Window Algorithm", "text": "In this section, we propose an efficient algorithm KnapWindow for SMDK over sliding windows. We first give an algorithmic description of KnapWindow in Section 5.1. Then, we analyze KnapWindow theoretically in Section 5.2. Finally, we propose a buffer-based optimization technique to further improve the solution quality of KnapWindow and discuss how to deal with the scenario in which the sliding window shifts by more than one element in Section 5.3."}, {"heading": "5.1 The Algorithmic Description", "text": "The idea of KnapChk is to maintain multiple instances of KnapStream (also called KnapChk) with different starting points. < Each checkpoint maintains a solution for SMDK over all elements from the element that corresponds to its starting point to the most current element. < The idea of maintaining a sequence of checkpoints over sliding windows is inspired by smooth histograms [3]. However, as shown in Section 2, smooth histograms cannot be applied to SMDK because no algorithm for SMDK in append-only streams meets the requirement for glide ratios. Therefore, we are developing a novel data structure for our problem. Submodular KnapChk checkpoints at the time. SubKnapChk includes a sequence of Checkpoints Xt = {x1,}."}, {"heading": "5.2 Theoretical Analysis", "text": "We analyze the approximation ratio and complexity of KnapWindow theoretically in this subsection. Generally, KnapWindow requires a flow over the stream and provides an approximate solution for SMDK via sliding windows (12 (1 + d) \u2212 O (1)). It maintains O (log \u03b8\u03b2) checkpoints and KnapStream instances, requires O (log 300,000 + 1) function calls per element and stores O (log \u03b8 + 1) elements where it is the ratio between the maximum and minimum utility values of SMDK and \u03b2 (0, 1) is a predefined parameter. First, we analyze the properties of SubKnapChk, which are maintained by algorithm 3.Lemma 3. At the time t, SubKnapChk contains a sequence of s checkpoints Xt = {x1,."}, {"heading": "5.3 Optimization and Discussion", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "5.3.1 Optimization", "text": "We identify the main reasons for the discrepancy as follows: First, the solutions of H (x2) are always used as end results for solving A (x2); second, the candidate solutions maintained by KnapStream with high thresholds are often much later than the starting point of A (i.e., x2 t \u2212 W + 1), which means that all elements between H (x2 \u2212 1) and vx2 \u2212 1 are missing from the solutions; second, the candidate solutions maintained by KnapStream with high thresholds are difficult to fill, even if additional elements could be added without violating the d-knapsack constraints. Based on these observations, we propose buffer and post-processing optimization to improve the quality of KnapWindow."}, {"heading": "5.3.2 Discussion", "text": "In practical scenarios, we often look at a batch update strategy. Specifically, a slider window gets t L new elements at any time, while the earliest L elements have expired. KnapWindow can handle this case with trivial adjustments. It only creates one control point t at a time, and updates all held control points by collectively processing elements from v (t \u2212 1) L + 1 to vtL. In this way, the total number of generated control points dWL e, but the number of held control points is still limited by the utility values. Furthermore, the adjustments do not affect the buffer and post-processing optimization. It is also easy to see that the properties of SubKnapChk remain shifted for sliding windows with more than one element at a time. Therefore, the adjustments do not affect the approximations and complexities of KnapWindow and KnapWindowOpt."}, {"heading": "6 Experiments", "text": "We will discuss the experiments in this section. First, we will present the applications for experimental evaluation as well as the data sets used in Section 6.1. Second, we will present the compared approaches and parameter settings in Section 6.2. Finally, we will evaluate the effectiveness and efficiency of our proposed algorithms and analyze the results in Section 6.3."}, {"heading": "6.1 Applications and Datasets", "text": "In this subsection, we will show how to formulate two real-world applications, namely a representative subset of selection and maximum coverage, such as SMDK, and describe the datasets used for both applications in our experiments."}, {"heading": "6.2 Experimental Settings", "text": "The following approaches are compared in the experiments: KW KW KW (CEG) results: We implement CEGreedy [15] as the batch baseline. As explained in Section 3, we do not use the algorithm in [11] for its efficiency. CEGreedy is (1 \u2212 1 / e) approximate for the representative subset selection and 12 (1 \u2212 1 / e) approximate for the influential monitoring in the experiments. To work for sliding windows, it stores all active elements in the current window and calculates the result of scratch for each window. \u2022 Random (RAND): We use a series of randomly selected elements as a starting point. For experiments in the appendonly streams, it takes elements from the ground that are set uniformly up to the d-Knapsack-Knapsack compulsion, it is not satisfied."}, {"heading": "6.3 Experimental Results", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "6.3.1 An Overview of Experimental Results", "text": "We compare HF effectiveness with CEG, HF effectiveness and STR effectiveness with other HF effectiveness for the remaining HF settings. Figure 1 illustrates the CPU time and utility values of comparative approaches in the default setting. Generally speaking, CEG spends most of its time achieving the best utility values. KS runs much faster than CEG (9x acceleration on Yahoo! Webscope and 23x acceleration on Twitter), while the utility values are only slightly worse (< 6%). RAND spends little time on stream processing, but returns undesirable solutions. Compared to STR, KS is 70% slower, but achieves 5% and 12% higher solution quality in the two datasets. This is because KS O (log d\u03b5; 6%) requires more candidate solutions than STR, which require more function calls to process each element, as all the effects are used for the rest of the remaining ones, as well as for the rest of the others."}, {"heading": "6.3.2 Scalability", "text": "The costs, however, are generated independently of a uniform distribution U (0.01, 0.05). We range from 1 to 5 in the experiments and determine the cost of each element to construct the j-th Knapsack compulsion. The CPU time and supply values of the different approaches are shown in Figures 4a-4d. The time usage of STR and CEG increases as d. The number of Knapsack increases, the expected size of the results becomes smaller. For KW and KW +, different trends are observed in the two datasets. CPU time usage of Yahoo and CEG increases. CPU time usage of STR and CEG increases. The number of Knapsack decreases. For KW and KW +, different trends are observed in the two datasets. CPU time decreases on Yahoo! Webscope, but increases on Twitter with greater d."}, {"heading": "6.3.3 Parameters \u03b5 and \u03b2", "text": "The results show that all approaches have a lower CPU time for a larger \u03b5. This can easily be explained by their time complexity, which is all inversely proportional to \u03b5. In terms of solution quality, all approaches in the Yahoo! Webscope dataset remain constant. In the Twitter dataset, the quality of the STR seriously deteriorates as \u03b5 grows. The phenomenon has shown that in practical scenarios, the approximation algorithms can deliver solutions with much better quality than theoretical lower limits. We find that KW and KW + are more robust in terms of solution quality for different \u03b5. Finally, KW and KW + are much more efficient than STR in all experiments. Variable \u03b2. The results for KW and KW + with varying \u03b2 are shown in Figures 8a-8d. Both the runtime and the useful values decrease as \u03b2, which is in line with the analysis in KW elements."}, {"heading": "6.3.4 Summary", "text": "Finally, we summarize all the experimental results: In the annex-only flow model, KS runs at least one order of magnitude faster than CEG and thereby achieves an approximate solution quality (> 90%); it improves the solution quality of STR at the expense of speed; in the sliding window model, KW and KW + achieve speeds of more than two orders of magnitude above CEG in all parameter settings, while returning solutions with competitive quality (> 80% for KW and > 85% for KW +); in comparison to SRT, they not only run much faster, but also return solutions with equivalent or better utility values; in addition, KW + has a better solution quality than KW with the overhead for maintaining the buffer and post-processing."}, {"heading": "7 Conclusion", "text": "In this paper, we investigated the problem of maximizing a monotonous submodular function with d-knapsack constraint (SMDK) in data stream models. First, we proposed an algorithm KnapStream for SMDK in attached streams only with an approximation ratio of (11 + d \u2212 O (1)), which improved the current (11 + 2d \u2212 O (1)) approximation algorithm. Furthermore, we proposed KnapWindow and its optimized version KnapWindowOpt for SMDK compared to sliding windows with an approximation factor of (12 (1 + d) \u2212 O (1)). Experimental results showed the efficiency and effectiveness of our proposed algorithms compared to baselines. A wide class of real applications can benefit from the results in this work due to the prevalence of submodular functions and the universality of d-knapsack constraints."}], "references": [{"title": "Diversity maximization under matroid constraints", "author": ["Z. Abbassi", "V.S. Mirrokni", "M. Thakur"], "venue": "KDD, pages 32\u201340", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2013}, {"title": "Streaming submodular maximization: Massive data summarization on the fly", "author": ["A. Badanidiyuru", "B. Mirzasoleiman", "A. Karbasi", "A. Krause"], "venue": "KDD, pages 671\u2013680", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2014}, {"title": "Smooth histograms for sliding windows", "author": ["V. Braverman", "R. Ostrovsky"], "venue": "FOCS, pages 283\u2013293", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2007}, {"title": "Representative skylines using thresholdbased preference distributions", "author": ["A. Das Sarma", "A. Lall", "D. Nanongkai", "R.J. Lipton", "J. Xu"], "venue": "ICDE, pages 387\u2013398", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2011}, {"title": "Maintaining stream statistics over sliding windows", "author": ["M. Datar", "A. Gionis", "P. Indyk", "R. Motwani"], "venue": "SIAM Journal on Computing, 31(6):1794\u20131813", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2002}, {"title": "Submodular optimization over sliding windows", "author": ["A. Epasto", "S. Lattanzi", "S. Vassilvitskii", "M. Zadimoghaddam"], "venue": "WWW, pages 421\u2013430", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2017}, {"title": "Fast sparse gaussian process methods: The informative vector machine", "author": ["R. Herbrich", "N.D. Lawrence", "M. Seeger"], "venue": "NIPS, pages 625\u2013632", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2003}, {"title": "Maximizing the spread of influence through a social network", "author": ["D. Kempe", "J. Kleinberg", "E. Tardos"], "venue": "KDD, pages 137\u2013146", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2003}, {"title": "Top-k representative queries with binary constraints", "author": ["A. Khan", "V. Singh"], "venue": "SSDBM, pages 13:1\u2013 13:10", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "The budgeted maximum coverage problem", "author": ["S. Khuller", "A. Moss", "J. Naor"], "venue": "Information Processing Letters, 70(1):39\u201345", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1999}, {"title": "Maximizing submodular set functions subject to multiple linear constraints", "author": ["A. Kulik", "H. Shachnai", "T. Tamir"], "venue": "SODA, pages 545\u2013554", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2009}, {"title": "Fast greedy algorithms in mapreduce and streaming", "author": ["R. Kumar", "B. Moseley", "S. Vassilvitskii", "A. Vattani"], "venue": "ACM Trans. Parallel Comput., 2(3):14:1\u201314:22", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2015}, {"title": "Cost-effective outbreak detection in networks", "author": ["J. Leskovec", "A. Krause", "C. Guestrin", "C. Faloutsos", "J. VanBriesen", "N. Glance"], "venue": "KDD, pages 420\u2013429", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2007}, {"title": "Towards social data platform: Automatic topic-focused monitor for twitter stream", "author": ["R. Li", "S. Wang", "K.C.-C. Chang"], "venue": "Proc. VLDB Endow., 6(14):1966\u20131977", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2013}, {"title": "Multi-document summarization via budgeted maximization of submodular functions", "author": ["H. Lin", "J. Bilmes"], "venue": "NAACL, pages 912\u2013920", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "A class of submodular functions for document summarization", "author": ["H. Lin", "J. Bilmes"], "venue": "ACL, pages 510\u2013520", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2011}, {"title": "Retrieving non-redundant questions to summarize a product review", "author": ["M. Liu", "Y. Fang", "D.H. Park", "X. Hu", "Z. Yu"], "venue": "SIGIR, pages 385\u2013394", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2016}, {"title": "Fast constrained submodular maximization: Personalized data summarization", "author": ["B. Mirzasoleiman", "A. Badanidiyuru", "A. Karbasi"], "venue": "ICML, pages 1358\u20131367", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2016}, {"title": "An analysis of approximations for maximizing submodular set functions\u2014i", "author": ["G.L. Nemhauser", "L.A. Wolsey", "M.L. Fisher"], "venue": "Mathematical Programming, 14(1):265\u2013294", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1978}, {"title": "On budgeted influence maximization in social networks", "author": ["H. Nguyen", "R. Zheng"], "venue": "IEEE Journal on Selected Areas in Communications, 31(6):1084\u20131094", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2013}, {"title": "Video distribution under multiple constraints", "author": ["B. Patt-Shamir", "D. Rawitz"], "venue": "Theoretical Computer Science, 412(29):3717\u20133730", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2011}, {"title": "A coverage-based approach to recommendation diversity on similarity graph", "author": ["S.A. Puthiya Parambath", "N. Usunier", "Y. Grandvalet"], "venue": "RecSys, pages 15\u201322", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2016}, {"title": "Online learning to diversify from implicit feedback", "author": ["K. Raman", "P. Shivaswamy", "T. Joachims"], "venue": "KDD, pages 705\u2013713", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2012}, {"title": "Sparsi: Partitioning sensitive data amongst multiple adversaries", "author": ["T. Rekatsinas", "A. Deshpande", "A. Machanavajjhala"], "venue": "Proc. VLDB Endow., 6(13):1594\u20131605", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2013}, {"title": "Characterizing and selecting fresh data sources", "author": ["T. Rekatsinas", "X.L. Dong", "D. Srivastava"], "venue": "SIGMOD, pages 919\u2013930", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2014}, {"title": "On maximum coverage in the streaming model & application to multi-topic blog-watch", "author": ["B. Saha", "L. Getoor"], "venue": "SDM, pages 697\u2013708", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2009}, {"title": "A note on maximizing a submodular set function subject to a knapsack constraint", "author": ["M. Sviridenko"], "venue": "Operations Research Letters, 32(1):41\u201343", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2004}, {"title": "Influence maximization: Near-optimal time complexity meets practical efficiency", "author": ["Y. Tang", "X. Xiao", "Y. Shi"], "venue": "SIGMOD, pages 75\u201386", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2014}, {"title": "General incremental sliding-window aggregation", "author": ["K. Tangwongsan", "M. Hirzel", "S. Schneider", "K.-L. Wu"], "venue": "Proc. VLDB Endow., 8(7):702\u2013713", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2015}, {"title": "Real-time influence maximization on dynamic social streams", "author": ["Y. Wang", "Q. Fan", "Y. Li", "K.-L. Tan"], "venue": "Proc. VLDB Endow., 10(7):805\u2013816", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2017}, {"title": "Efficient summarization framework for multi-attribute uncertain data", "author": ["J. Xu", "D.V. Kalashnikov", "S. Mehrotra"], "venue": "SIGMOD, pages 421\u2013432", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2014}, {"title": "Submodular maximization with multi-knapsack constraints and its applications in scientific literature recommendations", "author": ["Q. Yu", "E.L. Xu", "S. Cui"], "venue": "GlobalSIP, pages 1295\u20131299", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2016}, {"title": "Data summarization with social contexts", "author": ["H. Zhuang", "R. Rahman", "X. Hu", "T. Guo", "P. Hui", "K. Aberer"], "venue": "CIKM, pages 397\u2013406", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 7, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 25, "endOffset": 40}, {"referenceID": 19, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 25, "endOffset": 40}, {"referenceID": 27, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 25, "endOffset": 40}, {"referenceID": 29, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 25, "endOffset": 40}, {"referenceID": 1, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 61, "endOffset": 84}, {"referenceID": 14, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 61, "endOffset": 84}, {"referenceID": 16, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 61, "endOffset": 84}, {"referenceID": 17, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 61, "endOffset": 84}, {"referenceID": 30, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 61, "endOffset": 84}, {"referenceID": 32, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 61, "endOffset": 84}, {"referenceID": 3, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 115, "endOffset": 121}, {"referenceID": 8, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 115, "endOffset": 121}, {"referenceID": 0, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 142, "endOffset": 157}, {"referenceID": 21, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 142, "endOffset": 157}, {"referenceID": 22, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 142, "endOffset": 157}, {"referenceID": 31, "context": ", influence maximization [8, 20, 28, 30], data summarization [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9] and recommendations [1, 22, 23, 32].", "startOffset": 142, "endOffset": 157}, {"referenceID": 3, "context": "Most existing literature on the submodular maximization (SM) problem focuses on maximizing a monotone submodular function with a cardinality constraint [4, 8, 9, 17, 22, 28, 31].", "startOffset": 152, "endOffset": 177}, {"referenceID": 7, "context": "Most existing literature on the submodular maximization (SM) problem focuses on maximizing a monotone submodular function with a cardinality constraint [4, 8, 9, 17, 22, 28, 31].", "startOffset": 152, "endOffset": 177}, {"referenceID": 8, "context": "Most existing literature on the submodular maximization (SM) problem focuses on maximizing a monotone submodular function with a cardinality constraint [4, 8, 9, 17, 22, 28, 31].", "startOffset": 152, "endOffset": 177}, {"referenceID": 16, "context": "Most existing literature on the submodular maximization (SM) problem focuses on maximizing a monotone submodular function with a cardinality constraint [4, 8, 9, 17, 22, 28, 31].", "startOffset": 152, "endOffset": 177}, {"referenceID": 21, "context": "Most existing literature on the submodular maximization (SM) problem focuses on maximizing a monotone submodular function with a cardinality constraint [4, 8, 9, 17, 22, 28, 31].", "startOffset": 152, "endOffset": 177}, {"referenceID": 27, "context": "Most existing literature on the submodular maximization (SM) problem focuses on maximizing a monotone submodular function with a cardinality constraint [4, 8, 9, 17, 22, 28, 31].", "startOffset": 152, "endOffset": 177}, {"referenceID": 30, "context": "Most existing literature on the submodular maximization (SM) problem focuses on maximizing a monotone submodular function with a cardinality constraint [4, 8, 9, 17, 22, 28, 31].", "startOffset": 152, "endOffset": 177}, {"referenceID": 18, "context": "in [19] provides a (1 \u2212 1/e)-approximate solution, it has several drawbacks that limit its use in a broader spectrum of applications.", "startOffset": 3, "endOffset": 7}, {"referenceID": 0, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 12, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 13, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 15, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 17, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 19, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 23, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 24, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 31, "context": "There is a large body of real-world problems [1,13,14,16,18,20,24,25,32] that are modeled as SM with (1) more than one constraint and (2) more general constraints beyond cardinality constraints.", "startOffset": 45, "endOffset": 72}, {"referenceID": 13, "context": "The d-knapsack constraints are a class of general constraints that have been widely adopted in SM problems [14,16,18,21,24,32].", "startOffset": 107, "endOffset": 126}, {"referenceID": 15, "context": "The d-knapsack constraints are a class of general constraints that have been widely adopted in SM problems [14,16,18,21,24,32].", "startOffset": 107, "endOffset": 126}, {"referenceID": 17, "context": "The d-knapsack constraints are a class of general constraints that have been widely adopted in SM problems [14,16,18,21,24,32].", "startOffset": 107, "endOffset": 126}, {"referenceID": 20, "context": "The d-knapsack constraints are a class of general constraints that have been widely adopted in SM problems [14,16,18,21,24,32].", "startOffset": 107, "endOffset": 126}, {"referenceID": 23, "context": "The d-knapsack constraints are a class of general constraints that have been widely adopted in SM problems [14,16,18,21,24,32].", "startOffset": 107, "endOffset": 126}, {"referenceID": 31, "context": "The d-knapsack constraints are a class of general constraints that have been widely adopted in SM problems [14,16,18,21,24,32].", "startOffset": 107, "endOffset": 126}, {"referenceID": 13, "context": "One example is the Twitter stream monitoring problem in [14], which selects a set of representative tweets such that both the number and the total length of selected tweets are constrained.", "startOffset": 56, "endOffset": 60}, {"referenceID": 20, "context": "The other example is the server resource allocation problem in [21], which considers providing video streams to clients with limited server resources.", "startOffset": 63, "endOffset": 67}, {"referenceID": 1, "context": "Many algorithms [2, 3, 5, 6, 29, 30, 32] have been developed for data stream models.", "startOffset": 16, "endOffset": 40}, {"referenceID": 2, "context": "Many algorithms [2, 3, 5, 6, 29, 30, 32] have been developed for data stream models.", "startOffset": 16, "endOffset": 40}, {"referenceID": 4, "context": "Many algorithms [2, 3, 5, 6, 29, 30, 32] have been developed for data stream models.", "startOffset": 16, "endOffset": 40}, {"referenceID": 5, "context": "Many algorithms [2, 3, 5, 6, 29, 30, 32] have been developed for data stream models.", "startOffset": 16, "endOffset": 40}, {"referenceID": 28, "context": "Many algorithms [2, 3, 5, 6, 29, 30, 32] have been developed for data stream models.", "startOffset": 16, "endOffset": 40}, {"referenceID": 29, "context": "Many algorithms [2, 3, 5, 6, 29, 30, 32] have been developed for data stream models.", "startOffset": 16, "endOffset": 40}, {"referenceID": 31, "context": "Many algorithms [2, 3, 5, 6, 29, 30, 32] have been developed for data stream models.", "startOffset": 16, "endOffset": 40}, {"referenceID": 1, "context": "There have been several techniques [2, 12] for streaming SM, but they can only work with a single cardinality constraint.", "startOffset": 35, "endOffset": 42}, {"referenceID": 11, "context": "There have been several techniques [2, 12] for streaming SM, but they can only work with a single cardinality constraint.", "startOffset": 35, "endOffset": 42}, {"referenceID": 5, "context": "Many practical applications [6, 29, 30] adopt the sliding window [5] model where only the last W elements in the stream are considered to meet the recency requirement.", "startOffset": 28, "endOffset": 39}, {"referenceID": 28, "context": "Many practical applications [6, 29, 30] adopt the sliding window [5] model where only the last W elements in the stream are considered to meet the recency requirement.", "startOffset": 28, "endOffset": 39}, {"referenceID": 29, "context": "Many practical applications [6, 29, 30] adopt the sliding window [5] model where only the last W elements in the stream are considered to meet the recency requirement.", "startOffset": 28, "endOffset": 39}, {"referenceID": 4, "context": "Many practical applications [6, 29, 30] adopt the sliding window [5] model where only the last W elements in the stream are considered to meet the recency requirement.", "startOffset": 65, "endOffset": 68}, {"referenceID": 5, "context": "However, SM over sliding windows is still largely unexplored and, to the best of our knowledge, there are only two existing techniques [6,30] on this topic.", "startOffset": 135, "endOffset": 141}, {"referenceID": 29, "context": "However, SM over sliding windows is still largely unexplored and, to the best of our knowledge, there are only two existing techniques [6,30] on this topic.", "startOffset": 135, "endOffset": 141}, {"referenceID": 31, "context": "It improves the state-of-the-art ( 1 1+2d \u2212O(1)) approximation ratio for this problem in [32].", "startOffset": 89, "endOffset": 93}, {"referenceID": 7, "context": "Due to its theoretical consequences, SM has been widely applied to various problems in databases and data mining, including influence maximization [8, 20, 28, 30], data summariza-", "startOffset": 147, "endOffset": 162}, {"referenceID": 19, "context": "Due to its theoretical consequences, SM has been widely applied to various problems in databases and data mining, including influence maximization [8, 20, 28, 30], data summariza-", "startOffset": 147, "endOffset": 162}, {"referenceID": 27, "context": "Due to its theoretical consequences, SM has been widely applied to various problems in databases and data mining, including influence maximization [8, 20, 28, 30], data summariza-", "startOffset": 147, "endOffset": 162}, {"referenceID": 29, "context": "Due to its theoretical consequences, SM has been widely applied to various problems in databases and data mining, including influence maximization [8, 20, 28, 30], data summariza-", "startOffset": 147, "endOffset": 162}, {"referenceID": 1, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 5, "endOffset": 28}, {"referenceID": 14, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 5, "endOffset": 28}, {"referenceID": 16, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 5, "endOffset": 28}, {"referenceID": 17, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 5, "endOffset": 28}, {"referenceID": 30, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 5, "endOffset": 28}, {"referenceID": 32, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 5, "endOffset": 28}, {"referenceID": 3, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 59, "endOffset": 65}, {"referenceID": 8, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 59, "endOffset": 65}, {"referenceID": 0, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 83, "endOffset": 98}, {"referenceID": 21, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 83, "endOffset": 98}, {"referenceID": 22, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 83, "endOffset": 98}, {"referenceID": 31, "context": "tion [2, 15, 17, 18, 31, 33], top-k representative queries [4, 9], recommendations [1, 22, 23, 32], to just name a few.", "startOffset": 83, "endOffset": 98}, {"referenceID": 1, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 5, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 10, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 11, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 12, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 14, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 17, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 26, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 31, "context": "This has triggered a large body of research on SM in recent years [2, 6, 11\u201313, 15, 18, 27, 32].", "startOffset": 66, "endOffset": 95}, {"referenceID": 26, "context": "Sviridenko [27] first proposes a (1\u2212 1/e) approximation algorithm for SM subject to 1-knapsack constraints with O(n) complexity.", "startOffset": 11, "endOffset": 15}, {"referenceID": 10, "context": "[11] propose a (1\u2212 1/e\u2212 \u03b5) approximation algorithm for SM subject to d-knapsack constraints with O(n \u22124 ) complexity.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] and Lin et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[15] respectively.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "In this paper, we adapt the algorithm in [15] for SMDK and use the adapted algorithm as the batch baseline.", "startOffset": 41, "endOffset": 45}, {"referenceID": 1, "context": "Next, we review existing streaming SM algorithms [2,6,12,30,32].", "startOffset": 49, "endOffset": 63}, {"referenceID": 5, "context": "Next, we review existing streaming SM algorithms [2,6,12,30,32].", "startOffset": 49, "endOffset": 63}, {"referenceID": 11, "context": "Next, we review existing streaming SM algorithms [2,6,12,30,32].", "startOffset": 49, "endOffset": 63}, {"referenceID": 29, "context": "Next, we review existing streaming SM algorithms [2,6,12,30,32].", "startOffset": 49, "endOffset": 63}, {"referenceID": 31, "context": "Next, we review existing streaming SM algorithms [2,6,12,30,32].", "startOffset": 49, "endOffset": 63}, {"referenceID": 1, "context": "[2] propose a (1/2\u2212\u03b5) approximation algorithm for SM with cardinality constraints in append-only streams with sublinear time and space complexities.", "startOffset": 0, "endOffset": 3}, {"referenceID": 11, "context": "Append-only stream algorithms for SMDK are proposed in [12] and [32].", "startOffset": 55, "endOffset": 59}, {"referenceID": 31, "context": "Append-only stream algorithms for SMDK are proposed in [12] and [32].", "startOffset": 64, "endOffset": 68}, {"referenceID": 4, "context": "The sliding window model [5] is widely adopted in many streaming applications [3, 6, 29, 30] to capture the data recency constraint.", "startOffset": 25, "endOffset": 28}, {"referenceID": 2, "context": "The sliding window model [5] is widely adopted in many streaming applications [3, 6, 29, 30] to capture the data recency constraint.", "startOffset": 78, "endOffset": 92}, {"referenceID": 5, "context": "The sliding window model [5] is widely adopted in many streaming applications [3, 6, 29, 30] to capture the data recency constraint.", "startOffset": 78, "endOffset": 92}, {"referenceID": 28, "context": "The sliding window model [5] is widely adopted in many streaming applications [3, 6, 29, 30] to capture the data recency constraint.", "startOffset": 78, "endOffset": 92}, {"referenceID": 29, "context": "The sliding window model [5] is widely adopted in many streaming applications [3, 6, 29, 30] to capture the data recency constraint.", "startOffset": 78, "endOffset": 92}, {"referenceID": 4, "context": "Exponential histograms [5] and smooth histograms [3] are common methods to estimate the values of functions over sliding windows.", "startOffset": 23, "endOffset": 26}, {"referenceID": 2, "context": "Exponential histograms [5] and smooth histograms [3] are common methods to estimate the values of functions over sliding windows.", "startOffset": 49, "endOffset": 52}, {"referenceID": 5, "context": "8 in append-only streams [6].", "startOffset": 25, "endOffset": 28}, {"referenceID": 18, "context": "632 unless P = NP [19].", "startOffset": 18, "endOffset": 22}, {"referenceID": 5, "context": "To the best of our knowledge, there are only a few research efforts [6, 30] on SM over sliding windows, but they only focus on cardinality constraints.", "startOffset": 68, "endOffset": 75}, {"referenceID": 29, "context": "To the best of our knowledge, there are only a few research efforts [6, 30] on SM over sliding windows, but they only focus on cardinality constraints.", "startOffset": 68, "endOffset": 75}, {"referenceID": 5, "context": "[6] propose (1/3 \u2212 \u03b5) and (1/2 \u2212 \u03b5) approximation algorithms for SM with cardinality constraints over sliding windows.", "startOffset": 0, "endOffset": 3}, {"referenceID": 29, "context": "In [30], influence maximization in social streams is defined by SM with cardinality constraints over sliding windows.", "startOffset": 3, "endOffset": 7}, {"referenceID": 18, "context": "As SM with a cardinality constraint has been proved to be NP-hard [19], SMDK is also NP-hard.", "startOffset": 66, "endOffset": 70}, {"referenceID": 14, "context": "The cost-effective greedy algorithm CEGreedy proposed in [15] for SM with 1-knapsack constraints can be adopted for SMDK2.", "startOffset": 57, "endOffset": 61}, {"referenceID": 10, "context": "2We do not use the (1\u2212 1/e\u2212 \u03b5) approximation algorithm in [11] as the baseline for its O(nd\u03b5 ) complexity.", "startOffset": 58, "endOffset": 62}, {"referenceID": 4, "context": "We further consider SMDK in the sliding window model [5] to capture the recency constraint.", "startOffset": 53, "endOffset": 56}, {"referenceID": 1, "context": "1 The Algorithmic Description The KnapStream algorithm uses a threshold-based framework proposed in [2] and [12] for streaming SM.", "startOffset": 100, "endOffset": 103}, {"referenceID": 11, "context": "1 The Algorithmic Description The KnapStream algorithm uses a threshold-based framework proposed in [2] and [12] for streaming SM.", "startOffset": 108, "endOffset": 112}, {"referenceID": 1, "context": "Although having similar basic ideas, KnapStream is different from the algorithms in [2] and [12] in two aspects: (1) the criterion for adding an element considers not only the marginal gain of adding the element but also its costs, i.", "startOffset": 84, "endOffset": 87}, {"referenceID": 11, "context": "Although having similar basic ideas, KnapStream is different from the algorithms in [2] and [12] in two aspects: (1) the criterion for adding an element considers not only the marginal gain of adding the element but also its costs, i.", "startOffset": 92, "endOffset": 96}, {"referenceID": 1, "context": "KnapStream adopts the same candidate solution maintenance strategy as used in [2].", "startOffset": 78, "endOffset": 81}, {"referenceID": 31, "context": "A Comparison with [32].", "startOffset": 18, "endOffset": 22}, {"referenceID": 31, "context": "The algorithm in [32] also uses the threshold-based framework and works for SMDK in append-only streams.", "startOffset": 17, "endOffset": 21}, {"referenceID": 5, "context": "1 in [6] and 0.", "startOffset": 5, "endOffset": 8}, {"referenceID": 31, "context": "25 in [32]), where KnapStream has obviously better approximation ratios.", "startOffset": 6, "endOffset": 10}, {"referenceID": 31, "context": "In addition, KnapStream is more robust than the algorithm in [32] when d increases as O( log d \u03b5 ) more candidates are maintained.", "startOffset": 61, "endOffset": 65}, {"referenceID": 2, "context": "The idea of maintaining a sequence of checkpoints over sliding windows is inspired by smooth histograms [3].", "startOffset": 104, "endOffset": 107}, {"referenceID": 1, "context": "In this paper, we adopt the widely used Informative Vector Machine (IVM) [2, 6, 7] as the metric for the representativeness of any set of elements S, which is defined as follows: f(S) = 1 2 log det(I + \u03c3KS,S) (5)", "startOffset": 73, "endOffset": 82}, {"referenceID": 5, "context": "In this paper, we adopt the widely used Informative Vector Machine (IVM) [2, 6, 7] as the metric for the representativeness of any set of elements S, which is defined as follows: f(S) = 1 2 log det(I + \u03c3KS,S) (5)", "startOffset": 73, "endOffset": 82}, {"referenceID": 6, "context": "In this paper, we adopt the widely used Informative Vector Machine (IVM) [2, 6, 7] as the metric for the representativeness of any set of elements S, which is defined as follows: f(S) = 1 2 log det(I + \u03c3KS,S) (5)", "startOffset": 73, "endOffset": 82}, {"referenceID": 6, "context": "It has been proved that f(\u00b7) defined by Equation 5 is a monotone submodular function [7].", "startOffset": 85, "endOffset": 88}, {"referenceID": 1, "context": "Representative subset selection is formulated as maximizing the IVM function with a cardinality constraint in previous work [2,6].", "startOffset": 124, "endOffset": 129}, {"referenceID": 5, "context": "Representative subset selection is formulated as maximizing the IVM function with a cardinality constraint in previous work [2,6].", "startOffset": 124, "endOffset": 129}, {"referenceID": 1, "context": "75 and \u03c3 = 1 as used in [2].", "startOffset": 24, "endOffset": 27}, {"referenceID": 14, "context": "Many real-world problems such as document summarization [15], Blog watching [26], and resource allocation [21] are modeled as maximum coverage with 1 or d knapsack constraints [10].", "startOffset": 56, "endOffset": 60}, {"referenceID": 25, "context": "Many real-world problems such as document summarization [15], Blog watching [26], and resource allocation [21] are modeled as maximum coverage with 1 or d knapsack constraints [10].", "startOffset": 76, "endOffset": 80}, {"referenceID": 20, "context": "Many real-world problems such as document summarization [15], Blog watching [26], and resource allocation [21] are modeled as maximum coverage with 1 or d knapsack constraints [10].", "startOffset": 106, "endOffset": 110}, {"referenceID": 9, "context": "Many real-world problems such as document summarization [15], Blog watching [26], and resource allocation [21] are modeled as maximum coverage with 1 or d knapsack constraints [10].", "startOffset": 176, "endOffset": 180}, {"referenceID": 13, "context": "We adopt the constraints as used in [14] for our experiments: the number as well as the total length of selected tweets are bounded.", "startOffset": 36, "endOffset": 40}, {"referenceID": 14, "context": "The following approaches are compared in the experiments: \u2022 CEGreedy (CEG): We implement CEGreedy [15] as the batch baseline.", "startOffset": 98, "endOffset": 102}, {"referenceID": 10, "context": "As stated in Section 3, we do not use the algorithm in [11] for its efficiency.", "startOffset": 55, "endOffset": 59}, {"referenceID": 31, "context": "\u2022 Streaming (STR): We implement the algorithm proposed in [32] as the append-only streaming baseline.", "startOffset": 58, "endOffset": 62}], "year": 2017, "abstractText": "Submodular maximization (SM) has become a silver bullet for a broad class of applications such as influence maximization, data summarization, top-k representative queries, and recommendations. In this paper, we study the SM problem in data streams. Most existing algorithms for streaming SM only support the append-only model with cardinality constraints, which cannot meet the requirements of real-world problems considering either the data recency issues or more general d-knapsack constraints. Therefore, we first propose an append-only streaming algorithm KnapStream for SM subject to a d-knapsack constraint (SMDK). Furthermore, we devise the KnapWindow algorithm for SMDK over sliding windows to capture the recency constraints. Theoretically, the proposed algorithms have constant approximation ratios for a fixed number of knapsacks and sublinear complexities. We finally evaluate the efficiency and effectiveness of our algorithms in two real-world datasets. The results show that the proposed algorithms achieve two orders of magnitude speedups over the greedy baseline in the batch setting while preserving high quality solutions.", "creator": "LaTeX with hyperref package"}}}