{"id": "1708.07285", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Aug-2017", "title": "Area Protection in Adversarial Path-Finding Scenarios with Multiple Mobile Agents on Graphs: a theoretical and experimental study of target-allocation strategies for defense coordination", "abstract": "We address a problem of area protection in graph-based scenarios with multiple agents. The problem consists of two adversarial teams of agents that move in an undirected graph shared by both teams. Agents are placed in vertices of the graph; at most one agent can occupy a vertex; and they can move into adjacent vertices in a conflict free way. Teams have asymmetric goals: the aim of one team - attackers - is to invade into given area while the aim of the opponent team - defenders - is to protect the area from being entered by attackers by occupying selected vertices. We study strategies for allocating vertices to be occupied by the team of defenders to block attacking agents. We show that the decision version of the problem of area protection is PSPACE-hard under the assumption that agents can allocate their target vertices multiple times. Further we develop various on-line vertex-allocation strategies for the defender team in a simplified variant of the problem with single stage vertex allocation and evaluated their performance in multiple benchmarks. The success of a strategy is heavily dependent on the type of the instance, and so one of the contributions of this work is that we identify suitable vertex-allocation strategies for diverse instance types. In particular, we introduce a simulation-based method that identifies and tries to capture bottlenecks in the graph, that are frequently used by the attackers. Our experimental evaluation suggests that this method often allows a successful defense even in instances where the attackers significantly outnumber the defenders.", "histories": [["v1", "Thu, 24 Aug 2017 05:58:28 GMT  (867kb,D)", "http://arxiv.org/abs/1708.07285v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.MA", "authors": ["marika ivanov\\'a", "pavel surynek"], "accepted": false, "id": "1708.07285"}, "pdf": {"name": "1708.07285.pdf", "metadata": {"source": "CRF", "title": "Area Protection in Adversarial Path-Finding Scenarios with Multiple Mobile Agents on Graphs a theoretical and experimental study of target-allocation strategies for defense coordination", "authors": ["Marika Ivanov\u00e1", "Pavel Surynek"], "emails": ["marika.ivanova@uib.no,", "pavel.surynek@aist.go.jp"], "sections": [{"heading": "1 INTRODUCTION", "text": "In this thesis, we examine an Area Protection ProblemFigure 1: A motivational example of an opposing Scout scenario (APP) with multiple mobile agents moving conflict-free. APP can be seen as a modification of the well-known problem of Adversarial Cooperative PathFinding (ACPF) (Ivanova \u0301 and Surynek, 2014), in which two teams of agents compete to reach their target positions. Unlike ACPF, where the targets of agents are symmetrical, the opposing teams in APP have different targets. The first team of attackers contains agents whose goal is to reach a predefined target position in the area protected by the second team of defenders. Each attacker has a unique target in the protected area and each target is assigned exactly to one attacker. The opposing team of defenders tries to prevent the attackers from reaching their targets by occupying selected locations so that they cannot be overtaken by attackers."}, {"heading": "1.1 Related Works", "text": "There are several CPF algorithms that work both fully and suboptimally under different objective functions. It is known that every known optimization version of CPF is a hard problem, so that each agent achieves its unique goal in a conflict-free maneuver. (Ratner and Warmuth, 1990) There are several CPF algorithms that are both complete and suboptimal under different objective functions. It is known that every known optimization version of CPF is a hard problem. (Ratner and Warmuth, 2013) There are many efficient optimal algorithms that introduce advanced search space transformations such as CBS et al. (Sharon et al.) or ICTS et al."}, {"heading": "1.2 The Target Allocation Problem", "text": "In this work, we focus specifically on a sub-problem called the target assignment problem. Defenders are not initially assigned a target and have no information about an attacker's intended target. However, defenders have complete knowledge of all target positions in the protected area. The task in this setting is to assign each defender agent to a specific position in the diagram, so that defenders can attempt to optimize a given target function by occupying it. We assume that both teams use the same cooperative path-finding algorithm (CPF) to achieve temporarily selected targets. In general, targets can be assigned to defender agents several times in the context of territorial defense, but it is assumed that target assignment occurs rarely. After defense agents have been assigned their target positions, they go to their target positions using a predetermined CPF algorithm. When a target position is reached by a defender agent, the agent stops there and continues the target position until a new target is assigned to the target."}, {"heading": "2 PRELIMINARIES", "text": "In APP, we model the environment using an undirected, unweighted diagram G = (V, E). In this work, we limit the instances to 4 interconnected grid diagrams with possible obstacles. Therefore, the team of attackers and defenders is designated by A = {a1,.., am} and D = {d1,.. dn}. Continuous time is divided into discrete time steps. At any time, the agents are placed in vertices of the diagram, so that at most one agent is placed in each vertice. Allow: A \u00b2 D \u2192 V to be a uniquely invertable assignment that denotes the configuration of the agents in time step t. Agents can immediately enter an adjacent vertible vertex between successive time steps to form the next configuration: t + 1. Compliance with the following movement rules ensures the avoidance of conflicts: \u2022 An agent can only move to one adjacent vertex when the other vertex is empty or vacant."}, {"heading": "3 THEORETICAL PROPERTIES", "text": "This formula is reduced to an APP instance, which is set out in the following analysis. To study the theoretical complexity of the APP, we must consider the decision variant of the APP. (Many game-like problems are PSPACE-hard, and APP is no exception.) We reduce the known problem of verifying the validity of the Quantified Boolean Formula (QBF) to it.The technique of reducing the QBF to APP is inspired by a similar reduction of the QBF to ACPF, from which we select several technical steps and lemmas (Ivanova and Surynek, 2014). We describe the reduction of the QBF using the following example."}, {"heading": "4 TARGET ALLOCATION", "text": "As mentioned in section 1, solutions can be divided into two basic categories: single-level and multi-level. In single-level methods, targets are assigned to defenders only once at the beginning, as opposed to multi-level methods where targets can be re-assigned at any time during the agent course. Once all defenders are assigned to some targets, they try to get to the desired locations using the LRA * algorithm modified for the environment with opposing teams. This section focuses only on the single-level methods. We describe several simple target assignment strategies and discuss their characteristics. The first two methods always assign a defender to a target. The advantage of this approach is that a defender manages to capture a target when it is never hit by the attacker. This can be useful in scenarios where the number of defenders is similar to the number of attackers. Unfortunately, such a strategy would not be very successful in cases where the number of attackers clearly exceeds the number of targets."}, {"heading": "4.1 Random Allocation", "text": "For comparison, we consider a strategy in which each defender is assigned to a random target of an attacker. Neither the position of the agent nor the underlying structure of the grid diagrams are exploited."}, {"heading": "4.2 Greedy Allocation", "text": "The basic variant, called greedy, takes defenders one by one and assigns them to the next target. Another variant, called strictly greedy, starts by calculating the distances between each defender and each target and stores these values in a suitable data structure. We then iteratively select the pair (defender, target) with the shortest distance, and all entries containing the selected attacker and target are removed from the data structure until there are no available defenders or unallocated targets left."}, {"heading": "4.3 Bottleneck Simulation Allocation", "text": "The first naive idea is a gap between two obstacles, and it is possible to identify them by an excessive search."}, {"heading": "5 EXPERIMENTAL EVALUATION", "text": "The experimental evaluation focuses on the competitive comparison of proposed target assignment strategies with respect to Goal 2. - Maximizing the number of sites that are not conquered by attackers within a given timeframe. Our hypothesis is that random strategies would perform worst because they are completely uninformed. Better results are expected from shortest distances and greedy strategies, but all of these simple strategies are likely to be surpassed by advanced bottleneck strategies.We implemented all proposed strategies in Java as an experimental prototype. In our test scenarios, we use maps of different structure with different initial configurations of attackers and defenders. Our selection of test scenarios focuses on comparing different performance of different strategies and determining that they are at a distance of 1 from each other when they have at least one point in common. Therefore, it is important to conceive a location that is not at the edge of the map with 8 neighbors. Which factors have the most significant impact on their success, as the following sections show, the different strategies are successful in different."}, {"heading": "5.1 Instance generation and types", "text": "The instances used in the practical experiments are generated using a pseudo-random generator, but in a controlled manner. An instance is defined by its map, the ratio | A: | D | and the locations of each defender, attacker and their targets. These three entries constitute an input of the instance generation procedure. Furthermore, we select rectangular areas in which the agents of both teams and the targets of the attackers are placed randomly. We use 5 different maps in which the first and basic map is empty, i. e. no obstacles are included. Each next type has a more complicated obstacle structurally. Orthogonal spaces. The first non-empty map shown in the Fig. 9a resembles a top view of a house. Doors between the rooms are bottlenecks, which are often crossed by a large number of agents. This map is designed so that two obstacles that form an obstacle lie in a straight line."}, {"heading": "5.2 Experiments on simple maps", "text": "The experiments comparing random, shortest path and greedy strategy confirm the expected result that the random strategy is always worse than the other two methods. This series of experiments is carried out on instances with an empty map that contains 100 agents in each team. Methods that exploit the structure of obstacles in the map are not included because they are not relevant in this environment. Fig. 10 shows scenarios in which the rectangular areas of the placement of the teams are adjacent to each other and are on the left side of the empty map. The area containing targets is initially positioned in such a way that it partially overlaps with both teams. It is then gradually pulled to the right end of the map. The distance between the agent areas and the target is represented by the x-axis. Each entry in the graph is an average of 10 runs with different random positions of agents and targets in their respective areas. A similar experiments with results in Fig. 11 were carried out with the targets that are located in the center of the teams and in opposite areas."}, {"heading": "5.3 Experiments on complex maps", "text": "Maps Waterfront and Dark forest contain very irregular obstacles and many bottlenecks, and are therefore very challenging environments for all strategies. In the Dark forest map, random and greedy methods are better suited than the simulation strategy in cases with the same team size, in contrast to scenarios with fewer defenders, where the bottleneck simulation strategy clearly leads. In the separate scenario, the simulation strategy is even worse in all tested conditions (see Tab. 3 and Tab. 4). This behavior can be explained by the fact that occupying all relevant bottlenecks in such a complex map is more difficult than occupying targets in the protected area. In contrast, bottlenecks in the waterfront map have a more advantageous structure, so that those relevant to territorial protection can be more easily occupied. CONCLUSIVE REMARKSWe have shown the lower limit for the complexity of the APP problem, namely that we are asking the PACE Theoretical APE to EXACE membership."}], "references": [{"title": "Multirobot adversarial patrolling: Facing a full-knowledge opponent", "author": ["N. Agmon", "G.A. Kaminka", "S. Kraus"], "venue": "J. Artif. Intell. Res.,", "citeRegEx": "Agmon et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Agmon et al\\.", "year": 2011}, {"title": "Push and rotate: a complete multi-agent pathfinding algorithm", "author": ["B. de Wilde", "A. ter Mors", "C. Witteveen"], "venue": "J. Artif. Intell. Res.,", "citeRegEx": "Wilde et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Wilde et al\\.", "year": 2014}, {"title": "Multi-robot area patrol under frequency constraints", "author": ["Y. Elmaliach", "N. Agmon", "G.A. Kaminka"], "venue": "Ann. Math. Artif. Intell.,", "citeRegEx": "Elmaliach et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Elmaliach et al\\.", "year": 2009}, {"title": "Evolving beharioral strategies in predators and prey", "author": ["T. Haynes", "S. Sen"], "venue": "In Proc. of Adaption and Learning in Multi-Agent Systems,", "citeRegEx": "Haynes and Sen,? \\Q1995\\E", "shortCiteRegEx": "Haynes and Sen", "year": 1995}, {"title": "Adversarial cooperative path-finding: Complexity and algorithms", "author": ["M. Ivanov\u00e1", "P. Surynek"], "venue": "IEEE International Conference on Tools with Artificial Intelligence,", "citeRegEx": "Ivanov\u00e1 and Surynek,? \\Q2014\\E", "shortCiteRegEx": "Ivanov\u00e1 and Surynek", "year": 2014}, {"title": "Push and swap: Fast cooperative path-finding with completeness guarantees", "author": ["R. Luna", "K.E. Bekris"], "venue": "IJCAI", "citeRegEx": "Luna and Bekris,? \\Q2011\\E", "shortCiteRegEx": "Luna and Bekris", "year": 2011}, {"title": "Nxn puzzle and related relocation problem", "author": ["D. Ratner", "M.K. Warmuth"], "venue": "J. Symb. Comput.,", "citeRegEx": "Ratner and Warmuth,? \\Q1990\\E", "shortCiteRegEx": "Ratner and Warmuth", "year": 1990}, {"title": "Exploiting subgraph structure in multi-robot path planning", "author": ["M.R.K. Ryan"], "venue": "J. Artif. Intell. Res.,", "citeRegEx": "Ryan,? \\Q2008\\E", "shortCiteRegEx": "Ryan", "year": 2008}, {"title": "Conflict-based search for optimal multi-agent pathfinding", "author": ["G. Sharon", "R. Stern", "A. Felner", "N.R. Sturtevant"], "venue": "Artif. Intell.,", "citeRegEx": "Sharon et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Sharon et al\\.", "year": 2015}, {"title": "The increasing cost tree search for optimal multi-agent pathfinding", "author": ["G. Sharon", "R. Stern", "M. Goldenberg", "A. Felner"], "venue": null, "citeRegEx": "Sharon et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Sharon et al\\.", "year": 2013}, {"title": "Cooperative pathfinding", "author": ["D. Silver"], "venue": "In Proc. of the 1st Artificial Intelligence and Interactive Digital Entertainment Conference,", "citeRegEx": "Silver,? \\Q2005\\E", "shortCiteRegEx": "Silver", "year": 2005}, {"title": "Benchmarks for grid-based pathfinding", "author": ["N. Sturtevant"], "venue": "Transactions on Computational Intelligence and AI in Games,", "citeRegEx": "Sturtevant,? \\Q2012\\E", "shortCiteRegEx": "Sturtevant", "year": 2012}, {"title": "Solving abstract cooperative pathfinding in densely populated environments", "author": ["P. Surynek"], "venue": "Computational Intelligence,", "citeRegEx": "Surynek,? \\Q2014\\E", "shortCiteRegEx": "Surynek", "year": 2014}, {"title": "Efficient SAT approach to multi-agent path finding under the sum of costs objective", "author": ["P. Surynek", "A. Felner", "R. Stern", "E. Boyarski"], "venue": "In ECAI 2016 - 22nd European Conference on AI,", "citeRegEx": "Surynek et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Surynek et al\\.", "year": 2016}, {"title": "Probabilistic pursuit-evasion games: theory, implementation, and experimental evaluation", "author": ["R. Vidal", "O. Shakernia", "H.J. Kim", "D.H. Shim", "S. Sastry"], "venue": "IEEE Trans. Robotics and Autom.,", "citeRegEx": "Vidal et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Vidal et al\\.", "year": 2002}, {"title": "MAPP: a scalable multiagent path planning algorithm with tractability and completeness guarantees", "author": ["K.C. Wang", "A. Botea"], "venue": "J. Artif. Intell. Res.,", "citeRegEx": "Wang and Botea,? \\Q2011\\E", "shortCiteRegEx": "Wang and Botea", "year": 2011}, {"title": "Structure and intractability of optimal multi-robot path planning on graphs", "author": ["J. Yu", "S.M. LaValle"], "venue": "In Proc. of the 27th AAAI Conference on AI,", "citeRegEx": "Yu and LaValle,? \\Q2013\\E", "shortCiteRegEx": "Yu and LaValle", "year": 2013}], "referenceMentions": [{"referenceID": 4, "context": "APP can be regarded as a modification of known problem of Adversarial Cooperative Path Finding (ACPF) (Ivanov\u00e1 and Surynek, 2014) where two teams of agents compete in reaching their target positions.", "startOffset": 102, "endOffset": 129}, {"referenceID": 0, "context": "APP has many real-life motivations from the domains of access denial operations both in civil and military sector, robotics with adversarial teams of robots or other type of penetrators (Agmon et al., 2011), and computer games (see Figure 1).", "startOffset": 186, "endOffset": 206}, {"referenceID": 10, "context": "Movements of agents at low reactive level are assumed to be planned by some cooperative pathfinding - CPF (multi-agent path-finding - MAPF) (Silver, 2005; Ryan, 2008; Wang and Botea, 2011) algorithm where agents of own team cooperate while opposing agents are considered as obstacles.", "startOffset": 140, "endOffset": 188}, {"referenceID": 7, "context": "Movements of agents at low reactive level are assumed to be planned by some cooperative pathfinding - CPF (multi-agent path-finding - MAPF) (Silver, 2005; Ryan, 2008; Wang and Botea, 2011) algorithm where agents of own team cooperate while opposing agents are considered as obstacles.", "startOffset": 140, "endOffset": 188}, {"referenceID": 15, "context": "Movements of agents at low reactive level are assumed to be planned by some cooperative pathfinding - CPF (multi-agent path-finding - MAPF) (Silver, 2005; Ryan, 2008; Wang and Botea, 2011) algorithm where agents of own team cooperate while opposing agents are considered as obstacles.", "startOffset": 140, "endOffset": 188}, {"referenceID": 6, "context": "It is known that any known optimization version of CPF is an NP-hard problem (Ratner and Warmuth, 1990; Yu and LaValle, 2013).", "startOffset": 77, "endOffset": 125}, {"referenceID": 16, "context": "It is known that any known optimization version of CPF is an NP-hard problem (Ratner and Warmuth, 1990; Yu and LaValle, 2013).", "startOffset": 77, "endOffset": 125}, {"referenceID": 8, "context": "Many efficient optimal algorithms that introduce advanced search space transformations like CBS (Sharon et al., 2015) or ICTS (Sharon et al.", "startOffset": 96, "endOffset": 117}, {"referenceID": 9, "context": ", 2015) or ICTS (Sharon et al., 2013) and compilation based methods that cast CPF to a different formalism (Surynek et al.", "startOffset": 16, "endOffset": 37}, {"referenceID": 13, "context": ", 2013) and compilation based methods that cast CPF to a different formalism (Surynek et al., 2016) have been introduced recently.", "startOffset": 77, "endOffset": 99}, {"referenceID": 12, "context": "Rule-based algorithms like BIBOX (Surynek, 2014) and Push-and-Swap (Luna and Bekris, 2011; de Wilde et al.", "startOffset": 33, "endOffset": 48}, {"referenceID": 5, "context": "Rule-based algorithms like BIBOX (Surynek, 2014) and Push-and-Swap (Luna and Bekris, 2011; de Wilde et al., 2014) guarantee finding solution in polynomial time.", "startOffset": 67, "endOffset": 113}, {"referenceID": 10, "context": "These methods include LRA*, CA*, HCA*, and WHCA* (Silver, 2005).", "startOffset": 49, "endOffset": 63}, {"referenceID": 2, "context": "These studies often focus on patrolling strategies that are robust with respect to various attackers trying to penetrate through the patrol path (Elmaliach et al., 2009).", "startOffset": 145, "endOffset": 169}, {"referenceID": 14, "context": "Theoretical works related to APP also include studies on pursuit evasion (Vidal et al., 2002) or predator-prey (Haynes and Sen, 1995) problems.", "startOffset": 73, "endOffset": 93}, {"referenceID": 3, "context": ", 2002) or predator-prey (Haynes and Sen, 1995) problems.", "startOffset": 25, "endOffset": 47}, {"referenceID": 4, "context": "The technique of reduction of QBF to APP is inspired by a similar reduction of QBF to ACPF from which we borrow several technical steps and lemmas (Ivanov\u00e1 and Surynek, 2014).", "startOffset": 147, "endOffset": 174}, {"referenceID": 11, "context": "This map is taken from (Sturtevant, 2012).", "startOffset": 23, "endOffset": 41}, {"referenceID": 11, "context": "9d was used in WarCraft and is also taken from (Sturtevant, 2012).", "startOffset": 47, "endOffset": 65}, {"referenceID": 4, "context": "Theoretical study of ACPF (Ivanov\u00e1 and Surynek, 2014) showing its membership in EXPTIME suggests that the same upper bound holds for APP but it is still an open question if APP is in PSPACE.", "startOffset": 26, "endOffset": 53}], "year": 2017, "abstractText": "We address a problem of area protection in graph-based scenarios with multiple agents. The problem consists of two adversarial teams of agents that move in an undirected graph shared by both teams. Agents are placed in vertices of the graph; at most one agent can occupy a vertex; and they can move into adjacent vertices in a conflict free way. Teams have asymmetric goals: the aim of one team attackers is to invade into given area while the aim of the opponent team defenders is to protect the area from being entered by attackers by occupying selected vertices. We study strategies for allocating vertices to be occupied by the team of defenders to block attacking agents. We show that the decision version of the problem of area protection is PSPACE-hard under the assumption that agents can allocate their target vertices multiple times. Further we develop various on-line vertex-allocation strategies for the defender team in a simplified variant of the problem with single stage vertex allocation and evaluated their performance in multiple benchmarks. The success of a strategy is heavily dependent on the type of the instance, and so one of the contributions of this work is that we identify suitable vertex-allocation strategies for diverse instance types. In particular, we introduce a simulation-based method that identifies and tries to capture bottlenecks in the graph, that are frequently used by the attackers. Our experimental evaluation suggests that this method often allows a successful defense even in instances where the attackers significantly outnumber the defenders.", "creator": "LaTeX with hyperref package"}}}