{"id": "1709.03363", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Sep-2017", "title": "A Planning Approach to Monitoring Behavior of Computer Programs", "abstract": "We describe a novel approach to monitoring high level behaviors using concepts from AI planning. Our goal is to understand what a program is doing based on its system call trace. This ability is particularly important for detecting malware. We approach this problem by building an abstract model of the operating system using the STRIPS planning language, casting system calls as planning operators. Given a system call trace, we simulate the corresponding operators on our model and by observing the properties of the state reached, we learn about the nature of the original program and its behavior. Thus, unlike most statistical detection methods that focus on syntactic features, our approach is semantic in nature. Therefore, it is more robust against obfuscation techniques used by malware that change the outward appearance of the trace but not its effect. We demonstrate the efficacy of our approach by evaluating it on actual system call traces.", "histories": [["v1", "Mon, 11 Sep 2017 13:19:08 GMT  (170kb,D)", "http://arxiv.org/abs/1709.03363v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.CR", "authors": ["alexandre cukier", "ronen i brafman", "yotam perkal", "david tolpin"], "accepted": false, "id": "1709.03363"}, "pdf": {"name": "1709.03363.pdf", "metadata": {"source": "CRF", "title": "A Planning Approach to Monitoring Computer Programs\u2019 Behavior", "authors": ["Alexandre Cukier", "Ronen I. Brafman", "Yotam Perkal", "David Tolpin"], "emails": ["alexandre.cukier@gmail.com", "brafman@cs.bgu.ac.il", "yperkal@paypal.com", "dvd@offtopia.net"], "sections": [{"heading": "Introduction", "text": "It is a serious threat to computer and Internet security for both individuals and entities. 430 million new, unique pieces of malware were discovered by Symantec in 2015, and 94.1 million malware variants were developed only in the month of February 2017. It is not surprising that many malware detection techniques have been proposed. In this paper, we are interested in the more general problem of understanding the behaviors taking place in the system. Based on this information, one can determine whether they are malicious or not, and whether they provide an informed response. The standard approach to this problem is the use of pattern recognition methods that are synchronous in nature."}, {"heading": "Related work", "text": "(Forrest et al. 1996) is considered a groundbreaking work that has advanced research into methods and representations of the operating system process monitoring system based on system calls. (Warrender, Forrest and Pearlmutter 1999) provides an early comparison of the machine1A system call is a mechanism used by a program to request behavioral techniques it cannot perform directly. (Gao, Reiter and Song 2004) introduces the model of execution diagrams and behavioral similarities based on the execution graph. (Mutz et al. 2006) combines several models to improve abnormal detection. (Xu and Shelton 2010) applies Continuous Bayesian Network (CTBN) to system call processes to take into account time-dependent features and addresses of high variability of system calls over time."}, {"heading": "Background", "text": "It is not the first time that the EU Commission has taken such a step."}, {"heading": "AI Planning", "text": "We assume that a decision-making technology is used to find action sequences that can transform a system from a starting state to a target state. Formally, a classic planning problem is a tuple: p = < P, A, I, G >. Where: P is a set of primitive proposals that describe properties of the interest of the system; A is the action that transforms the state of the system in some way; and G is the target condition - usually a combination of primitive suggestions. A state of the world, s that describes truth values to all p-P. Recall of this is simply a primitive proposition or its negation.An action model is a pair, {pre (a), effects (a)} where pre (a) is a combination of letters and effects (a) that is a set of conditional effects effects effects (c, e)."}, {"heading": "Our approach", "text": "We have an answer to the question whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question, whether there is an answer to the question to the question, whether there is an answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the answer to the question, whether there is an answer to the answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question, whether there is an answer to the answer to the question after the question after the question, whether there is an answer to the question after the question after the question after the answer after the question, whether there is an answer after the answer after the question after the question after the question, whether there is an answer after the question after the question after the question after the question, whether there is an answer after the answer after the question after the question after the question after the question, whether there is an answer after the question after the question after the question after the question, whether there is an answer after the answer after the question after the question after the question after the question after the question, whether there is an answer after the answer after the question after the question after the question, whether there is an answer after the question"}, {"heading": "Empirical evaluation", "text": "In the previous section, we demonstrated the capabilities of our approach to reverse shell behavior detection, where our planning model is able to detect the same behavior generated in different ways. We would now like to emphasize our ability to detect complex, higher behaviors built from lower behaviors, compared to statistical methods that are quite popular in this area. To do this, we look at the behavior of real processes involved in a mail service. Given the system call logs of multiple processes, we try to detect what behavior is being implemented by each of the processes, such as sending an email via SMTP, collecting an email from a remote server via IMAP, and so on. The code and data set used for empirical evaluation can be obtained from a git repository at https: / / / github.com / alexEnsimag / planning-for-syscall-monitoring."}, {"heading": "Data Collection", "text": "We generate the traces of the processes running in an e-mail service (Figure 2). The setup consists of two systems: the client and the server, which comprises a series of processes that take place in the individual areas, and the system in which they are located. (See how it comes to the individual systems in the individual areas.) (See how it comes to the individual systems, how it comes to the individual systems.) It is the way it comes to the individual systems. (See how it comes to the individual systems.) It is the way it comes to the individual systems. \"(See,) It is the way it comes to the individual systems. (See, how it comes to the individual systems.) It is the way it comes to the individual systems.\" (See,) It is the way it comes to the individual systems. \""}, {"heading": "Discussion and future work", "text": "We presented an approach to monitoring computer programs that uses an abstract model of the system state and the basic \"actions\" based on that state - in our case, system calls. The method is semantic in nature and therefore not prone to the weaknesses of syntactic methods that take into account the shape of the command sequences and not their meaning. Unlike statistical methods, which can in principle be fully automated, our approach has a non-trivial, one-time manual modeling step. But once the model is constructed, it can be automated and at a low cost.We demonstrated the effectiveness of our method by first showing how we can detect a simple low-level behavior that has multiple implementations with a simple model. Syntactically, each implementation is very different, but common semantics can be captured by modeling just a few system calls. Then, we showed how we can detect more complex, higher-level behavior with near-perfect accuracy, while recognizing the level of the system call, without being easily influenced by the level of obfuscation of the statistics."}], "references": [{"title": "J", "author": ["Baker, C.L.", "Tenenbaum"], "venue": "B.; and Saxe, R.", "citeRegEx": "Baker. Tenenbaum. and Saxe 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "AbstractionBased Malware Analysis Using Rewriting and Model Checking", "author": ["Gnaedig Beaucamps", "P. Marion 2012] Beaucamps", "I. Gnaedig", "J.-Y. Marion"], "venue": null, "citeRegEx": "Beaucamps et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Beaucamps et al\\.", "year": 2012}, {"title": "A quantitative study of accuracy in system call-based malware detection", "author": ["Canali"], "venue": "ISSTA", "citeRegEx": "Canali,? \\Q2012\\E", "shortCiteRegEx": "Canali", "year": 2012}, {"title": "System call-based detection of malicious processes", "author": ["Mancoridis Canzanese", "R. Kam 2015] Canzanese", "S. Mancoridis", "M. Kam"], "venue": "In Int. Conf. on Software Quality, Reliability and Security,", "citeRegEx": "Canzanese et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Canzanese et al\\.", "year": 2015}, {"title": "R", "author": ["M. Christodorescu", "S. Jha", "S.A. Seshia", "D. Song", "Bryant"], "venue": "E.", "citeRegEx": "Christodorescu et al. 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "M", "author": ["N. Ezzati-Jivan", "Dagenais"], "venue": "R.", "citeRegEx": "Ezzati.Jivan and Dagenais 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Analysis of machine learning techniques used in behavior-based malware detection", "author": ["Firdausi"], "venue": "In ACT", "citeRegEx": "Firdausi,? \\Q2010\\E", "shortCiteRegEx": "Firdausi", "year": 2010}, {"title": "T", "author": ["S. Forrest", "S.A. Hofmeyr", "A. Somayaji", "Longstaff"], "venue": "A.", "citeRegEx": "Forrest et al. 1996", "shortCiteRegEx": null, "year": 1996}, {"title": "M", "author": ["Gao, D.", "Reiter"], "venue": "K.; and Song, D.", "citeRegEx": "Gao. Reiter. and Song 2004", "shortCiteRegEx": null, "year": 2004}, {"title": "Malware behavioral detection by attribute-automata using abstraction from platform and language", "author": ["Debar Jacob", "G. Filiol 2009] Jacob", "H. Debar", "E. Filiol"], "venue": "In RAID", "citeRegEx": "Jacob et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Jacob et al\\.", "year": 2009}, {"title": "Lstm-based system-call language modeling and robust ensemble method for designing host-based intrusion detection systems. arXiv preprint arXiv:1611.01726", "author": ["Kim"], "venue": null, "citeRegEx": "Kim,? \\Q2016\\E", "shortCiteRegEx": "Kim", "year": 2016}, {"title": "A comparison of system call feature representations for insider threat detection", "author": ["Liu"], "venue": "In Information Assurance Workshop", "citeRegEx": "Liu,? \\Q2005\\E", "shortCiteRegEx": "Liu", "year": 2005}, {"title": "J", "author": ["L. Martignoni", "E. Stinson", "M. Fredrikson", "S. Jha", "Mitchell"], "venue": "C.", "citeRegEx": "Martignoni et al. 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "Anomalous system call detection", "author": ["Mutz"], "venue": "ACM Trans. Inf. Syst. Secur. 9(1):61\u201393", "citeRegEx": "Mutz,? \\Q2006\\E", "shortCiteRegEx": "Mutz", "year": 2006}, {"title": "M", "author": ["K. Poulose Jacob", "Surekha"], "venue": "V.", "citeRegEx": "Poulose Jacob and Surekha 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "and Gudes", "author": ["I. Rosenberg"], "venue": "E.", "citeRegEx": "Rosenberg and Gudes 2017", "shortCiteRegEx": null, "year": 2017}, {"title": "R", "author": ["G. Sukthankar", "C. Geib", "H. Bui", "D. Pynadath", "Goldman"], "venue": "P., eds.", "citeRegEx": "Sukthankar et al. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "P", "author": ["G. Tandon", "Chan"], "venue": "K.", "citeRegEx": "Tandon and Chan 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "Dynamic, resilient detection of complex malicious functionalities in the system call domain", "author": ["Skormin Tokhtabayev", "A. Dolgikh 2010] Tokhtabayev", "V. Skormin", "A. Dolgikh"], "venue": "In MILCOM\u201910,", "citeRegEx": "Tokhtabayev et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Tokhtabayev et al\\.", "year": 2010}, {"title": "Detecting intrusions using system calls: Alternative data models", "author": ["Forrest Warrender", "C. Pearlmutter 1999] Warrender", "S. Forrest", "B. Pearlmutter"], "venue": "In IEEE Sym. on Security and Privacy,", "citeRegEx": "Warrender et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Warrender et al\\.", "year": 1999}, {"title": "A close look on n-grams in intrusion detection: Anomaly detection vs. classification", "author": ["Wressnegger"], "venue": "In ACM WS on AI and Security,", "citeRegEx": "Wressnegger,? \\Q2013\\E", "shortCiteRegEx": "Wressnegger", "year": 2013}, {"title": "C", "author": ["J. Xu", "Shelton"], "venue": "R.", "citeRegEx": "Xu and Shelton 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "and Yim", "author": ["I. You"], "venue": "K.", "citeRegEx": "You and Yim 2010", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [], "year": 2017, "abstractText": "We describe a novel approach to monitoring high level behaviors using concepts from AI planning. Our goal is to understand what a program is doing based on its system call trace. This ability is particularly important for detecting malware. We approach this problem by building an abstract model of the operating system using the STRIPS planning language, casting system calls as planning operators. Given a system call trace, we simulate the corresponding operators on our model and by observing the properties of the state reached, we learn about the nature of the original program and its behavior. Thus, unlike most statistical detection methods that focus on syntactic features, our approach is semantic in nature. Therefore, it is more robust against obfuscation techniques used by malware that change the outward appearance of the trace but not its effect. We demonstrate the efficacy of our approach by evaluating it on actual system call traces.", "creator": "LaTeX with hyperref package"}}}