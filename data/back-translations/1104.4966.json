{"id": "1104.4966", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Apr-2011", "title": "Combining Ontology Development Methodologies and Semantic Web Platforms for E-government Domain Ontology Development", "abstract": "One of the most important challenges in e-government is the development of systems that can be easily integrated and interacted to provide seamless services to citizens. In recent years, semantic web technologies based on ontology have proven to be promising solutions to the above-mentioned technical problems. However, current research that practices semantic development in e-government does not focus on the application of available methods and platforms for developing ontologies in government. Furthermore, few of this research provides detailed guidelines for developing semantic ontology models in government. This research presents a case study of an ontology building methodology and two state-of-the-art semantic web platforms, namely Protege and Java Jena Ontology API, for developing semantic ontology models in e-government. First, a framework of the Uschold and King ontology building methodology for developing e-domains will be applied to develop an ontology in government.", "histories": [["v1", "Tue, 26 Apr 2011 16:55:42 GMT  (832kb)", "http://arxiv.org/abs/1104.4966v1", "14 pages"]], "COMMENTS": "14 pages", "reviews": [], "SUBJECTS": "cs.AI cs.CY", "authors": ["jean vincent fonou dombeu", "magda huisman"], "accepted": false, "id": "1104.4966"}, "pdf": {"name": "1104.4966.pdf", "metadata": {"source": "CRF", "title": "Combining Ontology Development Methodologies and Semantic Web Platforms for E-government Domain Ontology Development", "authors": ["Jean Vincent Fonou-Dombeu", "Magda Huisman"], "emails": ["fonoudombeu@gmail.com", "Magda.Huisman@nwu.ac.za"], "sections": [{"heading": null, "text": "DOI : 10.5121/ijwest.2011.2202 12\nOne of the key challenges in electronic government (e-government) is the development of systems that can be easily integrated and interoperated to provide seamless services delivery to citizens. In recent years, Semantic Web technologies based on ontology have emerged as promising solutions to the above engineering problems. However, current research practicing semantic development in e-government does not focus on the application of available methodologies and platforms for developing government domain ontologies. Furthermore, only a few of these researches provide detailed guidelines for developing semantic ontology models from a government service domain. This research presents a case study combining an ontology building methodology and two state-of-the-art Semantic Web platforms namely Prot\u00e9g\u00e9 and Java Jena ontology API for semantic ontology development in e-government. Firstly, a framework adopted from the Uschold and King ontology building methodology is employed to build a domain ontology describing the semantic content of a government service domain. Thereafter, UML is used to semi-formally represent the domain ontology. Finally, Prot\u00e9g\u00e9 and Jena API are employed to create the Web Ontology Language (OWL) and Resource Description Framework (RDF) representations of the domain ontology respectively to enable its computer processing. The study aims at: (1) providing egovernment developers, particularly those from the developing world with detailed guidelines for practicing semantic content development in their e-government projects and (2), strengthening the adoption of semantic technologies in e-government. The study would also be of interest to novice Semantic Web developers who might used it as a starting point for further investigations.\nKEYWORDS\nE-government, Semantic Web, Ontology, Java Jena API, Prot\u00e9g\u00e9, RDF, OWL"}, {"heading": "1. INTRODUCTION", "text": "In the past ten years, e-government has been a subject of interest of governments around the world. Governments worldwide are expecting e-government to improve their internal processes and provide Internet and ICT-based service delivery to citizens, businesses and organizations. This requires the design, implementation and launch of web-based systems that present government structures and services online, provide mechanisms for online interaction of government with citizens, and facilitate online citizen participation to government processes and decision making. These mandates of e-government can only be achieved if a large range of government\u2019s services and processes are delivered seamlessly to citizens and stakeholders\nthrough a single web portal [1], [2]. This raises the issue of developing heterogonous web-based e-government systems of government departments and agencies that can interoperate and be easily integrated. Although the state-of-the-art software engineering techniques including objectoriented and agile methods provide appropriate solutions to the aforementioned engineering problems of services integration and interoperability in e-government [1], [3], [4], it has been demonstrated that they have certain limitations [3], [4], [5], [6]. Therefore, during the past six years, Semantic Web technologies have emerged as promising solutions to these problems [3], [4], [7], [8], [16].\nSemantic-based e-government consists of describing existing entities, concepts, processes, laws and regulations governing a government service domain, into a conceptual model namely domain ontology. This domain ontology is initially represented in a human readable form. Then, to make it processable by computers, ontology editing and implementing platforms should be used by egovernment developers to develop the domain ontology in Semantic Web machine processable syntaxes such as XML, RDF, and OWL. In light of the above, practicing semantic development in e-government could be challenging to e-government system developers without any knowledge of ontology and Semantic Web technologies. Thus, there is a need for detailed research in the field of e-government that focuses on ontology development using available ontology development methodologies and open-source Semantic Web development platforms. To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap. Furthermore, only a few of current works provide detailed guidelines for developing government domain ontology from a government service domain.\nThis research presents a case study combining an ontology building methodology and two stateof-the-art Semantic Web platforms, namely Prot\u00e9g\u00e9 and Java Jena ontology API, for semantic ontology development in e-government. Firstly, a framework adopted from the Uschold and King [17] ontology building methodology is employed to build a domain ontology describing the semantic content of a government service domain. Thereafter, UML is used to semi-formally represent the domain ontology. Finally, Prot\u00e9g\u00e9 and Jena API are employed to create the Web Ontology Language (OWL) and Resource Description Framework (RDF) representations of the domain ontology respectively to enable its computer processing. The study aims at: (1) providing e-government developers, particularly those from the developing world, where there is little or no use of Semantic Web technologies in e-government, with detailed guidelines for practicing semantic content development in their e-government projects and (2), strengthening the adoption of semantic technologies in e-government. The study would also be of interest to novice Semantic Web developers who might use it as a starting point for further investigations.\nThe rest of the paper is organized as follows. Section 2 presents existing languages for ontology representation in Semantic Web. The software platforms for ontology development are described in Section 3. Section 4 conducts a literature review on the state of usage of Semantic Web technologies in e-government to date. The existing methodologies for building ontologies as well as the stages of ontology development are discussed in Section 5. Section 6 presents a case study development of a government domain ontology combining ontology development methodology and Semantic web platforms, including Prot\u00e9g\u00e9 and Jena API. A discussion is carried out in Section 7 and a conclusion is drawn in the last section."}, {"heading": "2. ONTOLOGY LANGUAGES FOR THE SEMANTIC WEB", "text": "The Semantic Web [18] is an evolution of the current Web that provides meanings to Web contents to enable their intelligent processing by computers. The meanings of Web contents are\nrepresented with ontology and described formally in logic-based syntaxes to facilitate their integration and accessibility over the Web [19]. The logic-based description of ontology is carried out with Semantic Web ontology languages such as XML, XML Schema (XMLS), RDF, RDF Schema (RDFS), and OWL. The work presented in this paper uses RDF(S) and OWL which are the leading Semantic Web ontology languages [6], [19], [20], [21]."}, {"heading": "2.1 RDF(S)", "text": "RDF and RDFS are the first standardized Web Based languages [19], [20]. RDF is a data model used to describe resources on the Web, whereas, RDFS is an improved version of RDF which provides facilities for the definition of basic ontology elements such as classes and hierarchy of classes, properties, domain and range of properties [19], [20]. RDF uses statements in the form of <S, P, O> to represent an ontology. The meaning of a RDF statement is that subject S has property P with value O. In a RDF statement, S and P are uniform resource identifiers (URIs), while O is either a URI or a literal value [6]."}, {"heading": "2.2 OWL", "text": "OWL was developed to overcome the weak expressive power of RDF(S) [19], [20], [21]. The expressivity of RDF(S) is enhanced by OWL with tools for: describing relations between classes, defining properties\u2019 characteristics, cardinality and value restrictions on properties, etc. [19], [20].\nIn practice, Semantic Web developers do not have to write RDF(S) and/or OWL codes by hand; several software platforms exist for the automatic development of RDF(S) and OWL codes. The next section expands more on existing software platforms for Semantic Web ontology development."}, {"heading": "3. SOFTWARE PLATFORMS FOR SEMANTIC WEB ONTOLOGY DEVELOPMENT", "text": "To support the vision of the Semantic Web which is making machine-readable content available on the Web, several software platforms and application interfaces (APIs) have been developed to permit the automatic creation and use of RDF(S) and OWL ontologies. Recent comparative studies of some of the existing RDF(S) and OWL editing platforms are provided in [21], [22]. A more exhaustive list of these platforms could be found in [21], [22], [23], [27]; they include Prot\u00e9g\u00e9, WebODE, OntoEdit, KAON1, and so forth. Beside the software platforms used for the edition of RDF(S) and OWL ontologies, there exist APIs such as OWL API [23], Jena API [6], Sesame [5], etc., which provide facilities for the persistence storage and query of RDF(S) and OWL ontologies. Prot\u00e9g\u00e9 and Jena API are discussed and used in this study as they are the leading platforms for Semantic Web development [6], [21], [22]; furthermore, they are both opensource software and might facilitate the repeatability of this study."}, {"heading": "3.1 Prot\u00e9g\u00e9", "text": "Prot\u00e9g\u00e9 is an open-source platform developed at Stanford Medical Informatics. It provides an internal structure called model [23] for ontologies representation and an interface for the display and manipulation of the underlying model. The Prot\u00e9g\u00e9 model is used to represent ontology elements as classes, properties or slots, property characteristics such as facets and constraints, and instances. The Prot\u00e9g\u00e9 graphical user interface can be used to create classes and instances, and set\nclass properties and restrictions on property facets. Additionally, Prot\u00e9g\u00e9 has a library of various tabs for the access, graphical visualization, and query of ontologies. Prot\u00e9g\u00e9 can be currently used to load, edit and save ontologies in different formats including XML, RDF, UML, and OWL [23]."}, {"heading": "3.2 Jena API", "text": "Jena is a Java ontology API. It provides object classes for creating and manipulating RDF graphs called interfaces. A RDF graph is called a model and represented with the Model interface. The resources, properties and literals describing RDF statements are represented with the Resource, Property and Literal interfaces respectively. Jena also provides methods that allow saving and retrieving RDF graphs to and from files. The Jena platform supports various database management systems such as PostgreSQL, MySQL, Oracle, and so on; it also provides various tools including RDQL query language, a parser for RDF/XML, I/O modules for RDF/XML output, etc. [6]. The state of use of Semantic Web technologies in e-government is presented in the next section."}, {"heading": "4. BACKGROUND ON THE USE OF SEMANTIC WEB", "text": "TECHNOLOGIES IN E-GOVERNMENT\nIn the past six years, e-government has been one of the most active areas of Semantic Web development. However, current research practicing semantic development in e-government does not focus on the application of available methodologies and platforms for developing government domain ontologies. In [9], a process-document ontology describing the document hierarchy and the structure of the business processes in e-government is modelled using RDF and OWL graphical representations. However, no practical implementation was discussed to illustrate how the proposed process-document ontology can be created with existing Semantic Web editing and representation platforms.\nXiao et al. [8] and Sabucedo et al. [16] proposed specific e-government domain ontologies to address the issue of service integration in e-government; the proposed ontology models were represented in OWL for semantic processing. However, no information was given on the platforms employed to generate the OWL versions of the proposed ontology models.\nOther semantic-based solutions for e-government services integration and interoperability based on specific ontology models are proposed in [7], [10]. The proposed ontology models were developed in OWL using dedicated platforms namely ONTOGOV [7] and IESD [10], respectively. However, the platforms employed are proprietary and little information is provided for their widespread use within the e-government community.\nThe analysis of other relevant literature by Sabucedo and Rifon [11], Chen et al. [12] and Gugliotta et al. [13] reveals other specific ontology models describing various aspects of egovernment service delivery. However, the proposed ontology models were only presented at the conceptual level. Further, none of the works has provided clues on how the proposed ontology models can be constructed from the complex public administration system with existing ontology building methodologies.\nThe issue of services interoperability in e-government is further addressed in Muthaiyah and Kerschberg [3], Zhang and Wang [14] and Bettahar et al. [15] with ontology-based solutions; the ontology components of the proposed solutions are modeled in OWL [3], [14], [15] and Sematic Web Rule Language (SWRL) [3], [14] with Prot\u00e9g\u00e9 to enable the semantic interoperability of e-\ngovernment services. Although these studies have used Prot\u00e9g\u00e9 for semantic ontology development, they did not focus on the methodological approach for semantic ontology development in e-government; then, it is not clear how the ontology components of the proposed interoperability solutions were built from the complex public administration system until their implementation with Prot\u00e9g\u00e9.\nIn summary, the above research demonstrate the interest in Semantic Web technologies based on ontology in e-government; they show how various ontology models are being used in egovernment researches and projects to describe and specify e-government services, aiming at their semantic integration and interoperability. However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10]. Further, none of the current research provides guidelines for constructing the proposed semantic ontology models from the complex public administration system using existing ontology building methodology provided in the ontology engineering field. All these factors do not facilitate the repeatability of various ontology-based solutions for egovernment services integration and interoperability that are being proposed in various egovernment researches and projects nor do they contribute to the widespread adoption of Semantic Web technologies in e-government. The next section explains the ontology development process."}, {"heading": "5. ONTOLOGY DEVELOPMENT PROCESS", "text": ""}, {"heading": "5.1 Ontology Development Methodologies", "text": "At present, there is no universal definition of ontology in the literature. Ontology is commonly defined as an explicit specification of a conceptualization [24] i.e., a model of the real world domain such as medicine, geographic information system, physics, e-government and so forth; which is explicitly represented with existing objects, concepts, entities and relationships between them. The above definition of ontology shows that developing an ontology for a given domain of knowledge could be a complex and challenging task [23]; especially for a complex domain such as the public administration system. Therefore, ontology developers need appropriate methodologies that will guide them in the process of building an ontology characterizing a particular domain.\nTo this end, a considerable amount of research has been done in the field of ontology engineering to develop proper methodologies for ontology development. Detailed comparative studies of these methodologies are provided in [25], [26], [27]. The ontology development methodologies prescribe various steps and tasks that must be performed when building ontology. To the best of our knowledge, none of the current research practicing semantic ontology development in egovernment has referred to a particular methodology that was employed when building the proposed e-government specific ontology models. This may not ease the repeatability of the proposed ontology-based solutions by e-government developers without any knowledge of ontology and Semantic Web technologies.\nThe primary objective of this study is to provide e-government developers, particularly those from the developing world, with guidelines for practicing Semantic content development in their e-government projects. Therefore this research presents a case study of semantic ontology development in e-government. A framework adopted from the Uschold and Kind [17] ontology building methodology is applied to build a domain ontology from a government service domain.\nThe domain ontology is further developed in RDF and OWL with Prot\u00e9g\u00e9 and Java Jena ontology API to enable its semantic processing by computers."}, {"heading": "5.2 Phases of Ontology Development", "text": "A rigorous development process for ontology building requires the use of its development methodologies and platforms. A methodology mainly prescribes guidelines for the specification, conceptualization, formalization and implementation of ontology [27]. The specification phase defines the aims and roles of the intended ontology as well as people who will be using it. During the conceptualization phase, a conceptual or domain ontology is built. In its simple representation, a conceptual or domain ontology is a graph where the vertices are objects, concepts, and entities of the domain, and the edges are lines interconnecting pairs of vertices and representing the relationships between the constituents of the domain. The formalization phase transforms the conceptual model or domain ontology into its semi-formal representation; this can be done either in description logic [29] or UML formalisms [30]. The UML formalism is used in this study because it is widely used by software developers for object-oriented systems development. During the implementation phase of ontology development, the semi-formal version of the ontology is formally represented in one of Semantic Web languages with ontology editing platforms (see sections 2 and 3).\nAfter its formal representation, the developed ontology has to be effectively used by its intended users. Therefore, the formal ontology must be deployed onto the Web using programming platforms such as Java, C++, .NET, etc. This provides facilities for database storage and querying of the developed ontology.\nTo fulfil the objectives of this study, which are to provide e-government developers with detailed guidelines for practicing semantic content development in their e-government projects and strengthen the adoption of semantic technologies in e-government, the main phases of ontology development presented above are applied to develop a government domain ontology using a framework adopted from the Uschold and King [17], [28] methodology and Prot\u00e9g\u00e9 and Java Jena ontology API platforms.\nThe Uschold and Kind [17] methodology was chosen in this study for its clarity and the fact that it is technology and platform independent [25]; which might facilitate its use by novice ontology developers and promote a fast development of domain ontologies."}, {"heading": "6. APPLICATION", "text": "This section presents a case study development of government domain ontology."}, {"heading": "6.1 Presentation of the Government Service Domain", "text": "The government service domain used in this study is the domain of development projects monitoring in developing countries. In fact, in developing countries as well as in Sub Saharan Africa (SSA), almost every government department is somehow involved in the implementation of a programme aiming at improving the welfare of its people. These programmes are commonly called development projects and include infrastructure development, water supply and sanitation, education, rural development, health care, ICT infrastructure development and so forth. Thus, application that could interface all the activities related to development projects implementation in a SSA country could bring tremendous advantages. For example, such a web application would improve the monitoring and evaluation of projects and provide transparency, efficiency and better delivery to populations. In a previous study [28], we built a domain ontology of development projects monitoring (OntoDPM) for such an application. The next subsections describe the methodology and platforms employed."}, {"heading": "6.2 OWL Representation of the OntoDPM Domain Ontology", "text": "A framework adopted from the Uschold and King [17] ontology building methodology was used in [28] to build the OntoDPM as in Figure 1. The OntoDPM shows the key concepts of the domain (people, stakeholder, financier, monitoring indicator, reporting technique, etc.), the activities carried out in the domain (training, discussion, fieldwork, visit, meeting, etc.) and the\nrelationships between the constituents of the domain. This study does not expand on the framework for building the OntoDPM in Figure 1. Interested readers may refer to [28] for detailed information. The OntoDPM in Figure 1 was further written semi-formally in UML and implemented in OWL using Prot\u00e9g\u00e9 [31], [32].\nThe UML representation of the OntoDPM was constructed by identifying classes and class instances in the OntoDPM in Figure 1 and categorizing relationships between classes (composition, association, inheritance). Figure 2 represents a part of classes, inheritance structure and properties/slots of the OntoDPM, in the UML formalism for knowledge representation [30]. This formalism was chosen because it allows modeling ontologies with instances/individuals, slots and classes, which are the terminologies of Prot\u00e9g\u00e9 as well [31]. In this formalism, a class is labelled \"ontology class\", a property/slot \"slot relation\" and an instance/individual \"IndividualOf\". Properties/slots represent the relationships between the concepts of the domain ontology. Each slot has a domain and a range which are labelled hasTempletateSlot and valueType, respectively. The inheritance relationship between classes is labelled \"subclass-of\".\nThe OWL version of the OntoDPM was created with Prot\u00e9g\u00e9 (see part in Table 1) using its semiformal representation (see part in Figure 2). Firstly, we downloaded Prot\u00e9g\u00e9 version 4.0 from the Stanford Medical Informatics website and installed it in our computer; related documentations [31], [32] were downloaded as well. Thereafter, the user-friendly graphical user interface of Prot\u00e9g\u00e9 was used to create the class hierarchy (classes, instances and inheritance structure), slots, and domain and range of slots respectively. These features of the OntoDPM were created based\non its UML representation (see part in Figure 2). The resulting Prot\u00e9g\u00e9 file was saved as an OWL file onto the disc.\nTable 1: Part of OWL Version of the OntoDPM Domain Ontology\n---\n<owl:Class rdf:about=\"#Stakeholder\">\n<owl:Class rdf:about=\"#CivilSociety\">\n<rdfs:subClassOf rdf:resource=\"#Stakeholder\"/>\n</owl:Class>\n<owl:Class rdf:about=\"#PrivateCompany\">\n<rdfs:subClassOf rdf:resource=\"#Stakeholder\"/>\n</owl:Class>\n<owl:Class rdf:about=\"#AcademicInstitution\">\n<rdfs:subClassOf rdf:resource=\"#Stakeholder\"/>\n</owl:Class>\n<owl:Class rdf:about=\"#CommunityBasedOrganization\">\n<rdfs:subClassOf rdf:resource=\"#Stakeholder\"/>\n</owl:Class>\n<owl:Class rdf:about=\"#Financier\">\n<owl:Class rdf:about=\"#Donor\">\n<rdfs:subClassOf rdf:resource=\"#Financier\"/>\n</owl:Class>\n<owl:Class rdf:about=\"#Government\">\n<rdfs:subClassOf rdf:resource=\"#Financier\"/>\n</owl:Class>\n<owl:Class rdf:about=\"#NonGovernmentalOrganization\">\n<rdfs:subClassOf rdf:resource=\"#Financier\"/>\n</owl:Class>\n---\n<owl:ObjectProperty rdf:about=\"#IsFunderBy\">\n<rdfs:domain rdf:resource=\"#DevelopmentProject\"/>\n<rdfs:range rdf:resource=\"#Financier\"/>\n</owl:ObjectProperty>\n<owl:ObjectProperty rdf:about=\"# IsInvolvedIn \">\n<rdfs:domain rdf:resource=\"#DevelopmentProject\"/>\n<rdfs:range rdf:resource=\"#Stakeholder\"/>\n</owl:ObjectProperty>\n---\nThe code in Table 1 was obtained by opening the saved OWL file with open-source programming editors such as JCreator and JGrasp. Table 1 presents parts of the subclass-of relationships (inheritance) and domains and ranges of slots in the OntoDPM. It is worth noting that the concepts of class, property/slot, domain and range, and individual/instance used in the UML representation of the OntoDPM (see part in Figure 2), are concepts of Prot\u00e9g\u00e9 as well; this indicates that the formalism employed in Figure 2 is appropriate for representing a semi-formal ontology to be implemented with Prot\u00e9g\u00e9. A complete description of OWL syntax is beyond the\nscope of this research; the study aims to provide guidelines for creating OWL ontology with Prot\u00e9g\u00e9, based a semi-formal UML representation of domain ontology such as the OntoDPM. Further information on the OWL syntax and its development with Prot\u00e9g\u00e9 could be found in [31] and [32]. In the following subsection, Java Jena ontology API is employed to create the RDF formal representation of the OntoDPM."}, {"heading": "6.3 RDF Representation of the OntoDPM Domain Ontology", "text": "Let\u2019s recall that RDF is a Semantic Web language for representing resources on the Web. A resource is any information that can be accessed over the Web using an URI. Three concepts are fundamental in RDF including subject (S), predicate (P) and Object (O). A subject is a resource to be referred to on the Web; a predicate is a property describing the resource and an object is a value of the property. Thus, the triplet <S, P, O> describes the same information and forms an RDF graph or statement [6]. An RDF graph or statement is graphically represented with two nodes and one arc; where, the arc is the property that describes the resource and the nodes at both sides of the arc, the resource and property\u2019s value respectively. In light of the above, the RDF syntax represents each class of an ontology as a resource which has properties with values. Thus, an ontology will be represented in RDF with several statements where each statement or a set of related statements forms an RDF sub-graph of the entire RDF graph of the intended ontology.\nThe RDF version of the OntoDPM was created with the Java Jena Ontology API. Firstly, we downloaded, installed and configured the Jena API in the Eclipse Java software development kit (SDK). As there are many classes in the OntoDPM, it was difficult to handle the same Jena RDF model to create all of them. We found that the Jena Model interface provides the union method that can be used to integrate different branches of a large RDF graph. Then, we created the main components (inheritance and instances) of the OntoDPM as individual Java files (see the left part of Figure 3). In each of the Java files, the main() method was included to generate and write the corresponding RDF sub-graph into a text file. Thereafter, we coded a method to read each text file and construct its RDF sub-graphs with the Jena Model interface. Finally, the individual RDF sub-graphs were integrated with the union method of the Model interface, in a unique RDF graph of the OntoDPM.\nTable 2: Part of RDF Representation of the OntoDPM Domain Ontology\n<rdf:RDF\nxmlns:rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n<rdf:Description rdf:about=\"http://OntoDPM/DevelopmentProject\">\n<rdf:predicate>\n<rdf:Description rdf:about=\"http://OntoDPM/Stakeholder\">\n<rdf:predicate rdf:resource=\"http://OntoDPM/CivilSociety\"/>\n<rdf:predicate>\n<rdf:Description rdf:about=\"http://OntoDPM/PrivateCompany\">\n<rdf:object rdf:resource=\"http://OntoDPM/Consultant\"/>\n<rdf:object rdf:resource=\"http://OntoDPM/Purchaser\"/>\n<rdf:object rdf:resource=\"http://OntoDPM/Contractor\"/>\n<rdf:object rdf:resource=\"http://OntoDPM/Supplier\"/>\n</rdf:Description>\n</rdf:predicate>\n<rdf:predicate rdf:resource=\"http://OntoDPM/AcademicInstitution\"/>\n<rdf:predicate rdf:resource=\"http://OntoDPM/CommunityBasedOrganization\"/>\n</rdf:Description>\n</rdf:predicate>\n<rdf:Description rdf:about=\"http://OntoDPM/Financier\">\n<rdf:predicate rdf:resource=\"http://OntoDPM/NonGovernmentalOrganization\"/>\n<rdf:predicate>\n<rdf:Description rdf:about=\"http://OntoDPM/Government\">\n<rdf:predicate rdf:resource=\"http://OntoDPM/Agency\"/>\n<rdf:predicate rdf:resource=\"http://OntoDPM/Municipality\"/>\n<rdf:predicate rdf:resource=\"http://OntoDPM/Department\"/>\n<rdf:object>Institute of Nuclear Research</rdf:object>\n<rdf:object>Department of Health</rdf:object>\n<rdf:object>Ekhurhuleni</rdf:object>\n</rdf:Description>\n</rdf:predicate>\n<rdf:predicate rdf:resource=\"http://OntoDPM/Donor\"/>\n</rdf:Description>\n</rdf:predicate>\n---\n</rdf:Description>\n</rdf:RDF>\nA part of the code for integrating the RDF sub-graphs is depicted on the right side of Figure 3. Table 2 shows a part of the generated RDF code of the OntoDPM. One can notice that RDF code is not as readable as an OWL code because of the weak expressive power of RDF mentioned earlier in this study. However, Table 2 illustrates the representation of a part of the OntoDPM class hierarchy and instances with basic RDF concepts of resource, predicate and object. A complete explanation of the development of RDF ontology with Jena API is beyond the scope of this research. Further information on how to use Jena API to develop ontology in RDF syntax could be found in [33], [34]. A discussion and future direction of our research are presented in the next section."}, {"heading": "7. DISCUSSION", "text": "The study has discussed Semantic Web ontology languages and software platforms for ontology development. A domain ontology was built with a framework adopted from the Uschold and King [17] ontology building methodology [28]. A semi-formal representation of the domain ontology was done with the UML formalism. Further, two state-of-the-art Semantic Web platforms for ontology development including Prot\u00e9g\u00e9 and Java Jena API were used to generate the machine processable version of the domain ontology in OWL and RDF, respectively. It is worth highlighting that Jena API provides some useful features for ontology deployment. In fact, the Jena API provides the RDQL language for RDF storage and query with various database management systems including PostgreSQL, MySQL, Oracle [6], etc. However, the database storage and query of RDF ontology is out of the scope of this research and will be the focus of our future work. Furthermore, Jena API provides parsing mechanisms that could be exploited to read OWL ontology developed with Prot\u00e9g\u00e9 and generate an RDF graph; this might facilitate the development of real-world Semantic Web applications where ontology edition is done with Prot\u00e9g\u00e9, while queries are handled with Jena interfaces. The parsing mechanism for bridging Prot\u00e9g\u00e9 and Jena API will be investigated in our future work as well."}, {"heading": "8. CONCLUSION", "text": "The study reviews the literature and points out that current research focusing on Semantic Web development in e-government does not refer to any existing ontology development methodology when reporting on either the e-government specific ontology models that they have developed or an ontology-based solution for e-government services integration and interoperability that they propose. The study has also pointed out that current research does not provide detailed guidelines for developing government domain ontology using available open-source Semantic Web platforms. All these factors do not ease the repeatability of the various specific ontology models being developed in e-government domain nor do they strengthen the adoption of semantic technologies in e-government.\nAs a solution, the study has developed a government domain ontology using a framework adopted from the Uschold and King ontology building methodology and two leading Semantic Web development platforms namely Prot\u00e9g\u00e9 and Java Jena Ontology API. The framework used for ontology building provides clearly defined steps and their application and it is platform independent as well [28]. This may facilitate its use by novice ontology developers and promote a fast development of domain ontology. Furthermore the Semantic Web platforms employed\nincluding Prot\u00e9g\u00e9 and Java Jena Ontology API are all open-source software which are downloadable from the Internet. This may facilitate the repeatability of the study within the egovernment development community and strengthen the adoption of semantic technologies in egovernment."}], "references": [{"title": "XML Schema Design and Management for E-government Data Interoperability", "author": ["T. Lee", "C.T. Hon", "D. Cheung"], "venue": "Electronic Journal of E-government, Vol. 7, No. 4, pp. 381-390, 2009.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "Integrated Service Modelling for Online One-Stop Government", "author": ["M.A. Wimmer"], "venue": "Electronic Markets, Vol. 12, No. 3, pp.149-156, 2002.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2002}, {"title": "Achieving Interoperability in E-government Services with two Modes of Semantic Bridging: SRS and SWRL", "author": ["S. Muthaiyah", "L. Kerschberg"], "venue": "Journal of Theoretical and Applied Electronic Commerce Research, Vol. 3, No. 3, pp. 52-63, December, 2008.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2008}, {"title": "A Methodology Framework for E-government Service Delivery Integration, ", "author": ["L. Sanati", "J. Lu"], "venue": "In Egovernment Interoperability Campus, Paris, France,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2007}, {"title": "Practical Artificial Intelligence Programming with Java, ", "author": ["M. Watson"], "venue": "Third Edition,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Efficient RDF Storage and Retrieval in Jena2", "author": ["K. Wilkinson", "C. Sayers", "H. Kuno", "D. Reynolds"], "venue": "proceedings of the First International Workshop on Semantic Web and Databases (SWDB), Berlin, Germany, pp. 131-150, 2003.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2003}, {"title": "Configuring E-government Services Using Ontologies", "author": ["D. Apostolou", "L. Stojanovic", "T.P. Lobo", "J.C. Miro", "A. Papadakis"], "venue": "IFIP International Federation for Information Processing, Springer Boston, Vol. 2005, No. 189, pp. 1571-5736, 2005.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2005}, {"title": "An Ontology for E-government Knowledge Modelling and Interoperability", "author": ["Y. Xiao", "M. Xioa", "H. Zhao"], "venue": "Proceedings of IEEE International Conference on Wireless Communications, Networking and Mobile Computing (WiCOM 2007), Shanghai, pp. 3600-3603, 21-25 September, 2007.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2007}, {"title": "Using Knowledge Management and Business Process in E-government", "author": ["J. Puustjarvi"], "venue": "Proceedings of the Information Integration and Web-based Applications and Services 2006 (iiWas2006) Conference, Yogyakarta Indonesia, pp. 381-390, 4-6 December, 2006.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2006}, {"title": "Multilevel Life-event Abstraction Framework for E-government Service Integration", "author": ["F. Sanati", "J. Lu"], "venue": "Proceedings of the 9th European Conference on E-government 2009 (ECEG 2009), London, UK, pp. 550- 558, 29-30 June, 2009.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2009}, {"title": "Semantic Service Oriented Architectures for E-government Platforms, ", "author": ["L.A. Sabucedo", "L.A. Rifon"], "venue": "American Association for Artificial Intelligence,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2006}, {"title": "Research Knowledge Sharing of E-government Based on Automatic Ontology Mapping, ", "author": ["D. Chen", "G. Nie", "P. Liu"], "venue": "In Proceedings of the 6th Wuhan International Conference on E-Business, China,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2008}, {"title": "A Conceptual Model for Semantically-Based Egovernment Portal, ", "author": ["A. Gugliotta", "L. Cabral", "J. Domingue", "V. Roberto"], "venue": "In Proceedings of the International Conference on E-government", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2005}, {"title": "Towards Building a Semantic Grid for E-government Applications, ", "author": ["W. Zhang", "Y. Wang"], "venue": "WSEAS Transactions on Computer Research,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2008}, {"title": "Barthes, \u201cTowards a Semantic Interoperability in an E-government Application, ", "author": ["F. Bettahar", "J.P.C. Moulin"], "venue": "Electronic Journal of E-government,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "Knowledge-based Platform for Egovernment Agents: A Web-based Solution Using Semantic Technologies", "author": ["L.M.A. Sabucedo", "L.E.A. Rifon", "F. Corradini", "A. Polzonetti", "B. Re"], "venue": "Journal of Expert Systems with Applications, Elsevier Inc., Vol. 2010, No. 37, pp. 3647-3656, 2010.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2010}, {"title": "Towards a Methodology for Building Ontologies", "author": ["M. Uschold", "M. King"], "venue": "Proceedings of IJCAI95 Workshop on Basic Ontological Issues in Knowledge Sharing, Montreal, Canada, pp. 1-13, 1995.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1995}, {"title": "The Semantic Web", "author": ["T. Berners-Lee", "J. Hendler", "O. Lessila"], "venue": "Scientific American, May, 2001.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2001}, {"title": "Building Web Service Ontologies, ", "author": ["M. Sabou"], "venue": "PhD Thesis, Dutch Graduate School for Information and Knowledge Systems, Netherlands, p", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2006}, {"title": "Debugging and Repair of OWL Ontologies, ", "author": ["A. Kalyanpur"], "venue": "PhD Thesis, Faculty of Graduate School, University of Maryland, USA,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2006}, {"title": "A Comparative Study Ontology Building Tools for Semantic Web Applications", "author": ["B. Kapoor", "S. Sharma"], "venue": "International Journal of Web & Semantic Technology (IJWesT), Vol. 1, No. 3, pp. 1-13, July, 2010.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2010}, {"title": "Comparing Ontology Development Tools Based on an Online Survey", "author": ["M.R. Khondoker", "P. Mueller"], "venue": "Proceedings of the World Congress on Engineering (WCE), London, UK, June 30 - July 2, 2010.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2010}, {"title": "The Prot\u00e9g\u00e9 OWL Plugin: An Open Development Environment for Semantic Web Applications", "author": ["H. Knublauch", "R.W. Fergerson", "N.F. Noy", "M.A. Musen"], "venue": "Proceedings of the Third International Semantic Web Conference, Lecture Notes in Computer Science, Hiroshima, Japan, November 7-11, pp. 229-243, 2004.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2004}, {"title": "Toward Principles for the Design of Ontologies used for Knowledge Sharing", "author": ["T.R Gruber"], "venue": "International Journal of Human-Computer Studies, Vol. 43, pp 907-928, 1993.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 1993}, {"title": "Overview of Methodologies for Building Ontologies, ", "author": ["M. Fernandez-Lopez"], "venue": "In Proceedings of the IJCAI- 99 workshop on Ontologies and Problem-Solving Methods (KRR5), Stockholm, Sweden,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 1999}, {"title": "Overview of Approach, Methodologies, Standards, and Tools for Ontologies", "author": ["H. Beck", "H.S Pinto"], "venue": "Agricultural Ontology Service (UNFAO), 2003.", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2003}, {"title": "Ontologies for Software Engineering and Software Technology, ", "author": ["C. Calero", "F. Ruiz", "M. Piattini"], "venue": "Calero.Ruiz.Piattini (Eds.), Springer-Verlag Berlin Heidelberg,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2006}, {"title": "Investigating E-government Knowledge Base ontology Supporting Development Project Monitoring in Sub Saharan Africa, ", "author": ["J.V. Fonou-Dombeu", "M. Huisman"], "venue": "International Journal of Computing and ICT Research, Special Issue,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2010}, {"title": "Evaluation of Ontologies and DL Reasoners", "author": ["M.", "M.A. Fahad", "S.A.H. Qadir", "Shah"], "venue": "IFIP International Federation for Information Processing, Boston: Springer, Vol. 288, pp. 17-27, 2008.", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2008}, {"title": "A Semantically-Rich, Graphical Environment for Collaborative Ontology Development in Agentcities, ", "author": ["L. Ceccaroni", "E. Kendall"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2003}, {"title": "A Practical Guide to Building OWL Ontologies Using the Prot\u00e9g\u00e9-OWL Plugin and CO-ODE Tools Edition 1.0", "author": ["M.", "H. Horridge", "A. Knublauch", "R. Rector", "Stevens", "C.", "Wroe"], "venue": "Research Report, University of Manchester, UK, 27 August, 2004.", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2004}, {"title": "Constructing Ontologies in OWL Using Prot\u00e9g\u00e9-2000, ", "author": ["S.K. Singh", "Malik"], "venue": "In Proceedings of the 2nd National Conference on Challenges and Opportunities in Information Technology", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2008}, {"title": "Jena Tutorial", "author": ["B. McCarthy"], "venue": "Available at: http://jena.sourceforge.net/tutorial/index.html, [Accessed 06/02/2011]", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "13 through a single web portal [1], [2].", "startOffset": 31, "endOffset": 34}, {"referenceID": 1, "context": "13 through a single web portal [1], [2].", "startOffset": 36, "endOffset": 39}, {"referenceID": 0, "context": "Although the state-of-the-art software engineering techniques including objectoriented and agile methods provide appropriate solutions to the aforementioned engineering problems of services integration and interoperability in e-government [1], [3], [4], it has been demonstrated that they have certain limitations [3], [4], [5], [6].", "startOffset": 239, "endOffset": 242}, {"referenceID": 2, "context": "Although the state-of-the-art software engineering techniques including objectoriented and agile methods provide appropriate solutions to the aforementioned engineering problems of services integration and interoperability in e-government [1], [3], [4], it has been demonstrated that they have certain limitations [3], [4], [5], [6].", "startOffset": 244, "endOffset": 247}, {"referenceID": 3, "context": "Although the state-of-the-art software engineering techniques including objectoriented and agile methods provide appropriate solutions to the aforementioned engineering problems of services integration and interoperability in e-government [1], [3], [4], it has been demonstrated that they have certain limitations [3], [4], [5], [6].", "startOffset": 249, "endOffset": 252}, {"referenceID": 2, "context": "Although the state-of-the-art software engineering techniques including objectoriented and agile methods provide appropriate solutions to the aforementioned engineering problems of services integration and interoperability in e-government [1], [3], [4], it has been demonstrated that they have certain limitations [3], [4], [5], [6].", "startOffset": 314, "endOffset": 317}, {"referenceID": 3, "context": "Although the state-of-the-art software engineering techniques including objectoriented and agile methods provide appropriate solutions to the aforementioned engineering problems of services integration and interoperability in e-government [1], [3], [4], it has been demonstrated that they have certain limitations [3], [4], [5], [6].", "startOffset": 319, "endOffset": 322}, {"referenceID": 4, "context": "Although the state-of-the-art software engineering techniques including objectoriented and agile methods provide appropriate solutions to the aforementioned engineering problems of services integration and interoperability in e-government [1], [3], [4], it has been demonstrated that they have certain limitations [3], [4], [5], [6].", "startOffset": 324, "endOffset": 327}, {"referenceID": 5, "context": "Although the state-of-the-art software engineering techniques including objectoriented and agile methods provide appropriate solutions to the aforementioned engineering problems of services integration and interoperability in e-government [1], [3], [4], it has been demonstrated that they have certain limitations [3], [4], [5], [6].", "startOffset": 329, "endOffset": 332}, {"referenceID": 2, "context": "Therefore, during the past six years, Semantic Web technologies have emerged as promising solutions to these problems [3], [4], [7], [8], [16].", "startOffset": 118, "endOffset": 121}, {"referenceID": 3, "context": "Therefore, during the past six years, Semantic Web technologies have emerged as promising solutions to these problems [3], [4], [7], [8], [16].", "startOffset": 123, "endOffset": 126}, {"referenceID": 6, "context": "Therefore, during the past six years, Semantic Web technologies have emerged as promising solutions to these problems [3], [4], [7], [8], [16].", "startOffset": 128, "endOffset": 131}, {"referenceID": 7, "context": "Therefore, during the past six years, Semantic Web technologies have emerged as promising solutions to these problems [3], [4], [7], [8], [16].", "startOffset": 133, "endOffset": 136}, {"referenceID": 15, "context": "Therefore, during the past six years, Semantic Web technologies have emerged as promising solutions to these problems [3], [4], [7], [8], [16].", "startOffset": 138, "endOffset": 142}, {"referenceID": 2, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 93, "endOffset": 96}, {"referenceID": 6, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 98, "endOffset": 101}, {"referenceID": 7, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 103, "endOffset": 106}, {"referenceID": 8, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 108, "endOffset": 111}, {"referenceID": 9, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 113, "endOffset": 117}, {"referenceID": 10, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 119, "endOffset": 123}, {"referenceID": 11, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 125, "endOffset": 129}, {"referenceID": 12, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 131, "endOffset": 135}, {"referenceID": 13, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 137, "endOffset": 141}, {"referenceID": 14, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 143, "endOffset": 147}, {"referenceID": 15, "context": "To the best of our knowledge, current research focusing on semantic e-government development [3], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16] has not yet filled this gap.", "startOffset": 149, "endOffset": 153}, {"referenceID": 16, "context": "Firstly, a framework adopted from the Uschold and King [17] ontology building methodology is employed to build a domain ontology describing the semantic content of a government service domain.", "startOffset": 55, "endOffset": 59}, {"referenceID": 17, "context": "The Semantic Web [18] is an evolution of the current Web that provides meanings to Web contents to enable their intelligent processing by computers.", "startOffset": 17, "endOffset": 21}, {"referenceID": 18, "context": "14 represented with ontology and described formally in logic-based syntaxes to facilitate their integration and accessibility over the Web [19].", "startOffset": 139, "endOffset": 143}, {"referenceID": 5, "context": "The work presented in this paper uses RDF(S) and OWL which are the leading Semantic Web ontology languages [6], [19], [20], [21].", "startOffset": 107, "endOffset": 110}, {"referenceID": 18, "context": "The work presented in this paper uses RDF(S) and OWL which are the leading Semantic Web ontology languages [6], [19], [20], [21].", "startOffset": 112, "endOffset": 116}, {"referenceID": 19, "context": "The work presented in this paper uses RDF(S) and OWL which are the leading Semantic Web ontology languages [6], [19], [20], [21].", "startOffset": 118, "endOffset": 122}, {"referenceID": 20, "context": "The work presented in this paper uses RDF(S) and OWL which are the leading Semantic Web ontology languages [6], [19], [20], [21].", "startOffset": 124, "endOffset": 128}, {"referenceID": 18, "context": "RDF and RDFS are the first standardized Web Based languages [19], [20].", "startOffset": 60, "endOffset": 64}, {"referenceID": 19, "context": "RDF and RDFS are the first standardized Web Based languages [19], [20].", "startOffset": 66, "endOffset": 70}, {"referenceID": 18, "context": "RDF is a data model used to describe resources on the Web, whereas, RDFS is an improved version of RDF which provides facilities for the definition of basic ontology elements such as classes and hierarchy of classes, properties, domain and range of properties [19], [20].", "startOffset": 260, "endOffset": 264}, {"referenceID": 19, "context": "RDF is a data model used to describe resources on the Web, whereas, RDFS is an improved version of RDF which provides facilities for the definition of basic ontology elements such as classes and hierarchy of classes, properties, domain and range of properties [19], [20].", "startOffset": 266, "endOffset": 270}, {"referenceID": 5, "context": "In a RDF statement, S and P are uniform resource identifiers (URIs), while O is either a URI or a literal value [6].", "startOffset": 112, "endOffset": 115}, {"referenceID": 18, "context": "OWL was developed to overcome the weak expressive power of RDF(S) [19], [20], [21].", "startOffset": 66, "endOffset": 70}, {"referenceID": 19, "context": "OWL was developed to overcome the weak expressive power of RDF(S) [19], [20], [21].", "startOffset": 72, "endOffset": 76}, {"referenceID": 20, "context": "OWL was developed to overcome the weak expressive power of RDF(S) [19], [20], [21].", "startOffset": 78, "endOffset": 82}, {"referenceID": 18, "context": "[19], [20].", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[19], [20].", "startOffset": 6, "endOffset": 10}, {"referenceID": 20, "context": "Recent comparative studies of some of the existing RDF(S) and OWL editing platforms are provided in [21], [22].", "startOffset": 100, "endOffset": 104}, {"referenceID": 21, "context": "Recent comparative studies of some of the existing RDF(S) and OWL editing platforms are provided in [21], [22].", "startOffset": 106, "endOffset": 110}, {"referenceID": 20, "context": "A more exhaustive list of these platforms could be found in [21], [22], [23], [27]; they include Prot\u00e9g\u00e9, WebODE, OntoEdit, KAON1, and so forth.", "startOffset": 60, "endOffset": 64}, {"referenceID": 21, "context": "A more exhaustive list of these platforms could be found in [21], [22], [23], [27]; they include Prot\u00e9g\u00e9, WebODE, OntoEdit, KAON1, and so forth.", "startOffset": 66, "endOffset": 70}, {"referenceID": 22, "context": "A more exhaustive list of these platforms could be found in [21], [22], [23], [27]; they include Prot\u00e9g\u00e9, WebODE, OntoEdit, KAON1, and so forth.", "startOffset": 72, "endOffset": 76}, {"referenceID": 26, "context": "A more exhaustive list of these platforms could be found in [21], [22], [23], [27]; they include Prot\u00e9g\u00e9, WebODE, OntoEdit, KAON1, and so forth.", "startOffset": 78, "endOffset": 82}, {"referenceID": 22, "context": "Beside the software platforms used for the edition of RDF(S) and OWL ontologies, there exist APIs such as OWL API [23], Jena API [6], Sesame [5], etc.", "startOffset": 114, "endOffset": 118}, {"referenceID": 5, "context": "Beside the software platforms used for the edition of RDF(S) and OWL ontologies, there exist APIs such as OWL API [23], Jena API [6], Sesame [5], etc.", "startOffset": 129, "endOffset": 132}, {"referenceID": 4, "context": "Beside the software platforms used for the edition of RDF(S) and OWL ontologies, there exist APIs such as OWL API [23], Jena API [6], Sesame [5], etc.", "startOffset": 141, "endOffset": 144}, {"referenceID": 5, "context": "Prot\u00e9g\u00e9 and Jena API are discussed and used in this study as they are the leading platforms for Semantic Web development [6], [21], [22]; furthermore, they are both opensource software and might facilitate the repeatability of this study.", "startOffset": 121, "endOffset": 124}, {"referenceID": 20, "context": "Prot\u00e9g\u00e9 and Jena API are discussed and used in this study as they are the leading platforms for Semantic Web development [6], [21], [22]; furthermore, they are both opensource software and might facilitate the repeatability of this study.", "startOffset": 126, "endOffset": 130}, {"referenceID": 21, "context": "Prot\u00e9g\u00e9 and Jena API are discussed and used in this study as they are the leading platforms for Semantic Web development [6], [21], [22]; furthermore, they are both opensource software and might facilitate the repeatability of this study.", "startOffset": 132, "endOffset": 136}, {"referenceID": 22, "context": "It provides an internal structure called model [23] for ontologies representation and an interface for the display and manipulation of the underlying model.", "startOffset": 47, "endOffset": 51}, {"referenceID": 22, "context": "Prot\u00e9g\u00e9 can be currently used to load, edit and save ontologies in different formats including XML, RDF, UML, and OWL [23].", "startOffset": 118, "endOffset": 122}, {"referenceID": 5, "context": "[6].", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "In [9], a process-document ontology describing the document hierarchy and the structure of the business processes in e-government is modelled using RDF and OWL graphical representations.", "startOffset": 3, "endOffset": 6}, {"referenceID": 7, "context": "[8] and Sabucedo et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 15, "context": "[16] proposed specific e-government domain ontologies to address the issue of service integration in e-government; the proposed ontology models were represented in OWL for semantic processing.", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "Other semantic-based solutions for e-government services integration and interoperability based on specific ontology models are proposed in [7], [10].", "startOffset": 140, "endOffset": 143}, {"referenceID": 9, "context": "Other semantic-based solutions for e-government services integration and interoperability based on specific ontology models are proposed in [7], [10].", "startOffset": 145, "endOffset": 149}, {"referenceID": 6, "context": "The proposed ontology models were developed in OWL using dedicated platforms namely ONTOGOV [7] and IESD [10], respectively.", "startOffset": 92, "endOffset": 95}, {"referenceID": 9, "context": "The proposed ontology models were developed in OWL using dedicated platforms namely ONTOGOV [7] and IESD [10], respectively.", "startOffset": 105, "endOffset": 109}, {"referenceID": 10, "context": "The analysis of other relevant literature by Sabucedo and Rifon [11], Chen et al.", "startOffset": 64, "endOffset": 68}, {"referenceID": 11, "context": "[12] and Gugliotta et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] reveals other specific ontology models describing various aspects of egovernment service delivery.", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "The issue of services interoperability in e-government is further addressed in Muthaiyah and Kerschberg [3], Zhang and Wang [14] and Bettahar et al.", "startOffset": 104, "endOffset": 107}, {"referenceID": 13, "context": "The issue of services interoperability in e-government is further addressed in Muthaiyah and Kerschberg [3], Zhang and Wang [14] and Bettahar et al.", "startOffset": 124, "endOffset": 128}, {"referenceID": 14, "context": "[15] with ontology-based solutions; the ontology components of the proposed solutions are modeled in OWL [3], [14], [15] and Sematic Web Rule Language (SWRL) [3], [14] with Prot\u00e9g\u00e9 to enable the semantic interoperability of e-", "startOffset": 0, "endOffset": 4}, {"referenceID": 2, "context": "[15] with ontology-based solutions; the ontology components of the proposed solutions are modeled in OWL [3], [14], [15] and Sematic Web Rule Language (SWRL) [3], [14] with Prot\u00e9g\u00e9 to enable the semantic interoperability of e-", "startOffset": 105, "endOffset": 108}, {"referenceID": 13, "context": "[15] with ontology-based solutions; the ontology components of the proposed solutions are modeled in OWL [3], [14], [15] and Sematic Web Rule Language (SWRL) [3], [14] with Prot\u00e9g\u00e9 to enable the semantic interoperability of e-", "startOffset": 110, "endOffset": 114}, {"referenceID": 14, "context": "[15] with ontology-based solutions; the ontology components of the proposed solutions are modeled in OWL [3], [14], [15] and Sematic Web Rule Language (SWRL) [3], [14] with Prot\u00e9g\u00e9 to enable the semantic interoperability of e-", "startOffset": 116, "endOffset": 120}, {"referenceID": 2, "context": "[15] with ontology-based solutions; the ontology components of the proposed solutions are modeled in OWL [3], [14], [15] and Sematic Web Rule Language (SWRL) [3], [14] with Prot\u00e9g\u00e9 to enable the semantic interoperability of e-", "startOffset": 158, "endOffset": 161}, {"referenceID": 13, "context": "[15] with ontology-based solutions; the ontology components of the proposed solutions are modeled in OWL [3], [14], [15] and Sematic Web Rule Language (SWRL) [3], [14] with Prot\u00e9g\u00e9 to enable the semantic interoperability of e-", "startOffset": 163, "endOffset": 167}, {"referenceID": 8, "context": "However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10].", "startOffset": 82, "endOffset": 85}, {"referenceID": 10, "context": "However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10].", "startOffset": 87, "endOffset": 91}, {"referenceID": 11, "context": "However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10].", "startOffset": 93, "endOffset": 97}, {"referenceID": 12, "context": "However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10].", "startOffset": 99, "endOffset": 103}, {"referenceID": 7, "context": "However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10].", "startOffset": 177, "endOffset": 180}, {"referenceID": 15, "context": "However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10].", "startOffset": 182, "endOffset": 186}, {"referenceID": 6, "context": "However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10].", "startOffset": 247, "endOffset": 250}, {"referenceID": 9, "context": "However, the ontology models employed were only presented at the conceptual level [9], [11], [12], [13]; in certain cases, no details of the implementation platforms were given [8], [16]; and some of them were developed with proprietary platforms [7], [10].", "startOffset": 252, "endOffset": 256}, {"referenceID": 23, "context": "Ontology is commonly defined as an explicit specification of a conceptualization [24] i.", "startOffset": 81, "endOffset": 85}, {"referenceID": 22, "context": "The above definition of ontology shows that developing an ontology for a given domain of knowledge could be a complex and challenging task [23]; especially for a complex domain such as the public administration system.", "startOffset": 139, "endOffset": 143}, {"referenceID": 24, "context": "Detailed comparative studies of these methodologies are provided in [25], [26], [27].", "startOffset": 68, "endOffset": 72}, {"referenceID": 25, "context": "Detailed comparative studies of these methodologies are provided in [25], [26], [27].", "startOffset": 74, "endOffset": 78}, {"referenceID": 26, "context": "Detailed comparative studies of these methodologies are provided in [25], [26], [27].", "startOffset": 80, "endOffset": 84}, {"referenceID": 16, "context": "A framework adopted from the Uschold and Kind [17] ontology building methodology is applied to build a domain ontology from a government service domain.", "startOffset": 46, "endOffset": 50}, {"referenceID": 26, "context": "A methodology mainly prescribes guidelines for the specification, conceptualization, formalization and implementation of ontology [27].", "startOffset": 130, "endOffset": 134}, {"referenceID": 28, "context": "The formalization phase transforms the conceptual model or domain ontology into its semi-formal representation; this can be done either in description logic [29] or UML formalisms [30].", "startOffset": 157, "endOffset": 161}, {"referenceID": 29, "context": "The formalization phase transforms the conceptual model or domain ontology into its semi-formal representation; this can be done either in description logic [29] or UML formalisms [30].", "startOffset": 180, "endOffset": 184}, {"referenceID": 16, "context": "To fulfil the objectives of this study, which are to provide e-government developers with detailed guidelines for practicing semantic content development in their e-government projects and strengthen the adoption of semantic technologies in e-government, the main phases of ontology development presented above are applied to develop a government domain ontology using a framework adopted from the Uschold and King [17], [28] methodology and Prot\u00e9g\u00e9 and Java Jena ontology API platforms.", "startOffset": 415, "endOffset": 419}, {"referenceID": 27, "context": "To fulfil the objectives of this study, which are to provide e-government developers with detailed guidelines for practicing semantic content development in their e-government projects and strengthen the adoption of semantic technologies in e-government, the main phases of ontology development presented above are applied to develop a government domain ontology using a framework adopted from the Uschold and King [17], [28] methodology and Prot\u00e9g\u00e9 and Java Jena ontology API platforms.", "startOffset": 421, "endOffset": 425}, {"referenceID": 16, "context": "The Uschold and Kind [17] methodology was chosen in this study for its clarity and the fact that it is technology and platform independent [25]; which might facilitate its use by novice ontology developers and promote a fast development of domain ontologies.", "startOffset": 21, "endOffset": 25}, {"referenceID": 24, "context": "The Uschold and Kind [17] methodology was chosen in this study for its clarity and the fact that it is technology and platform independent [25]; which might facilitate its use by novice ontology developers and promote a fast development of domain ontologies.", "startOffset": 139, "endOffset": 143}, {"referenceID": 27, "context": "In a previous study [28], we built a domain ontology of development projects monitoring (OntoDPM) for such an application.", "startOffset": 20, "endOffset": 24}, {"referenceID": 16, "context": "A framework adopted from the Uschold and King [17] ontology building methodology was used in [28] to build the OntoDPM as in Figure 1.", "startOffset": 46, "endOffset": 50}, {"referenceID": 27, "context": "A framework adopted from the Uschold and King [17] ontology building methodology was used in [28] to build the OntoDPM as in Figure 1.", "startOffset": 93, "endOffset": 97}, {"referenceID": 27, "context": "Interested readers may refer to [28] for detailed information.", "startOffset": 32, "endOffset": 36}, {"referenceID": 30, "context": "The OntoDPM in Figure 1 was further written semi-formally in UML and implemented in OWL using Prot\u00e9g\u00e9 [31], [32].", "startOffset": 102, "endOffset": 106}, {"referenceID": 31, "context": "The OntoDPM in Figure 1 was further written semi-formally in UML and implemented in OWL using Prot\u00e9g\u00e9 [31], [32].", "startOffset": 108, "endOffset": 112}, {"referenceID": 29, "context": "Figure 2 represents a part of classes, inheritance structure and properties/slots of the OntoDPM, in the UML formalism for knowledge representation [30].", "startOffset": 148, "endOffset": 152}, {"referenceID": 30, "context": "This formalism was chosen because it allows modeling ontologies with instances/individuals, slots and classes, which are the terminologies of Prot\u00e9g\u00e9 as well [31].", "startOffset": 158, "endOffset": 162}, {"referenceID": 30, "context": "0 from the Stanford Medical Informatics website and installed it in our computer; related documentations [31], [32] were downloaded as well.", "startOffset": 105, "endOffset": 109}, {"referenceID": 31, "context": "0 from the Stanford Medical Informatics website and installed it in our computer; related documentations [31], [32] were downloaded as well.", "startOffset": 111, "endOffset": 115}, {"referenceID": 30, "context": "Further information on the OWL syntax and its development with Prot\u00e9g\u00e9 could be found in [31] and [32].", "startOffset": 89, "endOffset": 93}, {"referenceID": 31, "context": "Further information on the OWL syntax and its development with Prot\u00e9g\u00e9 could be found in [31] and [32].", "startOffset": 98, "endOffset": 102}, {"referenceID": 5, "context": "Thus, the triplet <S, P, O> describes the same information and forms an RDF graph or statement [6].", "startOffset": 95, "endOffset": 98}, {"referenceID": 32, "context": "Further information on how to use Jena API to develop ontology in RDF syntax could be found in [33], [34].", "startOffset": 95, "endOffset": 99}, {"referenceID": 16, "context": "A domain ontology was built with a framework adopted from the Uschold and King [17] ontology building methodology [28].", "startOffset": 79, "endOffset": 83}, {"referenceID": 27, "context": "A domain ontology was built with a framework adopted from the Uschold and King [17] ontology building methodology [28].", "startOffset": 114, "endOffset": 118}, {"referenceID": 5, "context": "In fact, the Jena API provides the RDQL language for RDF storage and query with various database management systems including PostgreSQL, MySQL, Oracle [6], etc.", "startOffset": 152, "endOffset": 155}, {"referenceID": 27, "context": "The framework used for ontology building provides clearly defined steps and their application and it is platform independent as well [28].", "startOffset": 133, "endOffset": 137}], "year": 2011, "abstractText": "One of the key challenges in electronic government (e-government) is the development of systems that can be easily integrated and interoperated to provide seamless services delivery to citizens. In recent years, Semantic Web technologies based on ontology have emerged as promising solutions to the above engineering problems. However, current research practicing semantic development in e-government does not focus on the application of available methodologies and platforms for developing government domain ontologies. Furthermore, only a few of these researches provide detailed guidelines for developing semantic ontology models from a government service domain. This research presents a case study combining an ontology building methodology and two state-of-the-art Semantic Web platforms namely Prot\u00e9g\u00e9 and Java Jena ontology API for semantic ontology development in e-government. Firstly, a framework adopted from the Uschold and King ontology building methodology is employed to build a domain ontology describing the semantic content of a government service domain. Thereafter, UML is used to semi-formally represent the domain ontology. Finally, Prot\u00e9g\u00e9 and Jena API are employed to create the Web Ontology Language (OWL) and Resource Description Framework (RDF) representations of the domain ontology respectively to enable its computer processing. The study aims at: (1) providing egovernment developers, particularly those from the developing world with detailed guidelines for practicing semantic content development in their e-government projects and (2), strengthening the adoption of semantic technologies in e-government. The study would also be of interest to novice Semantic Web developers who might used it as a starting point for further investigations.", "creator": "PScript5.dll Version 5.2.2"}}}