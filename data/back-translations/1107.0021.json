{"id": "1107.0021", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Jun-2011", "title": "Decentralized Supply Chain Formation: A Market Protocol and Competitive Equilibrium Analysis", "abstract": "The formation of a supply chain is the process of determining the structure and conditions of exchange relationships to enable multi-stage, multi-agent production activity. We present a simple model of supply chains, highlighting two characteristics: hierarchical subtask decomposition and resource competition. In order to decentralize the creation process, we introduce a market price system based on the resources produced along the chain. In a competitive equilibrium for this system, actors select locally optimal allocations in terms of prices, and the results are optimal overall. In order to determine prices, we define a market protocol based on distributed, progressive auctions and short-sighted, non-strategic bidding strategies. In the case of resource competition, this protocol leads to better solutions than the greedy protocols commonly used in the literature on artificial intelligence and multi-layer systems. The protocol often converges to high-quality supply chains and, if competitive balances exist, usually to approximate competitive balances.", "histories": [["v1", "Thu, 30 Jun 2011 20:32:28 GMT  (368kb)", "http://arxiv.org/abs/1107.0021v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["w e walsh", "m p wellman"], "accepted": false, "id": "1107.0021"}, "pdf": {"name": "1107.0021.pdf", "metadata": {"source": "CRF", "title": "Decentralized Supply Chain Formation: A Market Protocol and Competitive Equilibrium Analysis", "authors": ["William E. Walsh", "Michael P. Wellman"], "emails": ["WWALSH1@US.IBM.COM", "WELLMAN@UMICH.EDU"], "sections": [{"heading": "1. Introduction", "text": "Electronic commerce technology can provide significant improvements in existing modes of commercial interaction, through increased speed, convenience, quality, and reduced costs. Yet some have proposed more radical visions of how business may be transformed. Exponential increases in communications bandwidth and computational ability have the potential to qualitatively decrease the friction in business interactions. With this as a premise, Malone and Laubaucher\u2019s treatise on the emerging \u201cE-Lance Economy\u201d (1998) puts forth the view that, in the not-too-distant future, business relationships will lose much of their current persistent character. Indeed, Malone and Laubaucher propose that large companies as we know them will cease to exist, and rather be dynamically formed by \u201celectronically connected freelancers\u201d (e-lancers) for the purpose of producing particular goods and services, and then dissolved when projects are completed. Others employ the evocative term \u201cvirtual corporation\u201d (Davidow, 1992) to describe groups of agile organizations forming temporary confederations for ad hoc purposes.\nc\u00a92003 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.\nWhether or not one accepts the full extent of this vision of virtual corporations, several business trends provide evidence that we are moving in this direction. Software companies are time-shifting development between the U.S. and India, and Sun Microsystems now allows freelance programmers to bid to fix customers\u2019 software problems (Borenstein & Saloner, 2001). Large, traditional manufacturing companies, exemplified by major automotive manufacturers, increasingly outsource the production of various components. Ford and General Motors (GM) have spun off parts manufacturing into separate companies (Lucking-Reily & Spulber, 2001). Start-ups and other small companies form partnerships to compete with larger, more established companies. Application service providers supplant in-house provision of standard operations, information, and technology services.\nWe study this phenomenon in the guise of supply chains, a common form of coordinated commercial interaction. For our purposes, a supply chain is a network of production and exchange relationships that spans multiple levels of production or task decomposition. Whenever we have a producer that buys inputs and sells outputs, we have a supply chain. Although typically used to refer to multi-business structures in manufacturing industries, any service or contracting relationship that spans multiple levels can be viewed as a supply chain.\nSupply chain formation is the process of determining the participants in the supply chain, who will exchange what with whom, and the terms of the exchanges. Traditionally, supply chains have been formed and maintained over long periods of time by means of extensive human interactions. But the acceleration of commercial decision making is creating a need for more advanced support. Companies ranging from auto makers to computer manufacturers are basing their business models on rapid development, build-to-order, and customized products to satisfy ever-changing consumer demand. And fluctuations in resource costs and availability mean that companies must respond rapidly to maintain production capabilities and profits. As these changes increasingly occur at speeds, scales, and complexity unmanageable by humans, the need for automated supply chain formation becomes acute.\nBecause the agents are autonomous in an electronic commerce setting, we must generally assume that they have specialized knowledge about their own capabilities but limited knowledge about other individuals and the large-scale structure of the problem. Because agents are self-interested, they will participate with the goal of maximizing their own benefit. Additionally, we may have cause to control the allocation of each resource individually if, for instance, global optimization is infeasible or if no one entity has global allocative authority. For such environments where information, decision making, and control are inherently decentralized, we seek to engineer the process of bottom-up supply chain formation. This problem is complicated if the structure of resource contention precludes the use of simple greedy allocation strategies.\nWe present a decentralized, asynchronous market protocol for supply chain formation under conditions of resource scarcity. The protocol allows agents to negotiate the formation of supply chains in a bottom-up fashion, requiring only local knowledge and communication. In the market protocol, agents\u2019 decisions are coordinated by the price system, with the price for each resource determined through an ascending auction.\nThe remainder of the paper describes our market protocol, and characterizes its behavior theoretically and empirically.1 We begin in Section 2 with a formal definition of the supply chain formation problem, and an illustrating application to the automotive industry. In Section 3, we\n1. Further details may be found in the first author\u2019s dissertation (Walsh, 2001).\nshow how typical greedy top-down approaches to supply chain formation can fail in the presence of resource contention. We define a price system and analyze static properties of price equilibria in Section 4. In Section 5, we introduce a price-based market protocol for supply chain formation and analyze its convergence properties. We present the results of an empirical study of the protocol in Section 6. In Section 7, we discuss relevant results and issues in price-based analysis and auction theory, as well as some related work in supply chain formation. We conclude in Section 8 and suggest extensions and future work. Throughout, we defer proofs to Appendix A."}, {"heading": "2. The Supply Chain Formation Problem", "text": "Agents in the supply chain are characterized in terms of their capabilities to perform tasks, and their interests in having tasks accomplished. A central feature of our model of the problem is hierarchical task decomposition: in order to perform a particular task, an agent may need to achieve some subtasks, which may be delegated to other agents. These may in turn have subtasks that may be delegated, forming a supply chain through a decomposition of task achievement. Constraints on the task assignment arise from resource contention, where agents require a common resource (e.g., a task achievement, or something tangible such as a piece of equipment) to accomplish their tasks.\nTasks are performed on behalf of particular agents; if two agents need a task then it would have to be performed twice to satisfy them both. In this way, tasks are the same as any other discrete, rival resource. Hence, we make no distinction in our model, and use the term \u201cgood\u201d to refer to any task or resource provided or needed by agents. The assumption that goods cannot be shared or reused (i.e., have limited available quantities) is necessary for much of our analysis. Goods that can be replicated at little or no marginal cost, such as software and information, provide many interesting challenges to economic analysis (Shapiro & Varian, 1999), not addressed in this work."}, {"heading": "2.1 Example: Automotive Supply Chain Formation", "text": "We illustrate our model of supply chain formation with an application to a stylized, hypothetical example from the automotive industry. Traditionally, automotive supply chains span many tiers, formed and maintained over long periods of time through extensive human negotiations. Some automation is emerging, for example through Covisint2, a company formed by GM, Ford, and DaimlerChrysler to mediate the negotiation and exchange of parts, as well as other supply chain interactions. Currently the focus in such efforts is on a particular exchange relationship within a single level of production. We consider the broader problem of assembling combinations of relationships across multiple levels to form complete, feasible supply chains.\nIn the example presented in Figure 1, Ford and GM need to acquire contracts for transmissions in order to produce particular models of cars. Ford can produce the transmissions in its own factories or acquire them from an independent transmission producer. GM currently does not have the capacity to produce the desired transmissions, and must outsource. The independent transmission producer has capacity to provide transmissions to either Ford or GM, but not both. Ford and the independent factory both require the services of a job shop for metal-working tasks, but the job shop does not have capacity to serve them simultaneously. Contracts with the job shop and with the two transmission factories are the scarce goods to be allocated.\n2. http://www.covisint.com\nThe limited capacity of the job shop entails certain constraints on feasible supply chains. Ford cannot acquire transmissions from the independent factory, because the job shop cannot serve the independent factory and Ford simultaneously. Additionally, Ford and GM cannot simultaneously be satisfied."}, {"heading": "2.2 Problem Specification", "text": "We provide a formal description of the supply chain formation problem in terms of bipartite graphs. The two types of nodes represent goods and agents, respectively. A task dependency network is a directed, acyclic graph, (V,E), with vertices V = G\u222aA, where:\nG = the set of goods,\nA = C\u222a\u03a0, the set of agents, C = the set of consumers,\n\u03a0 = the set of producers,\nand a set of edges E connecting agents with goods they can use or produce. There exists an edge \u3008g,a\u3009 from g \u2208 G to a \u2208 A when agent a can make use of one unit of g, and an edge \u3008a,g\u3009 when a can provide one unit of g. If an agent requires multiple units of a good as input, then we treat each unit as a separate edge, distinguishing them by subscripts. (Edges without explicit subscripts are interpreted as implicitly subscripted by \u201c1\u201d.) For instance, if agent a requires two units of g as input, then its input edges are \u3008g,a\u30091 and \u3008g,a\u30092.\nThe various agent types are characterized by their position in the task dependency network. Each consumer, c \u2208 C, wishes to acquire one unit of one good from its set of consumable goods, Gc \u2286 G, where \u3008g,c\u3009 \u2208 E iff g \u2208 Gc.\nA producer can produce a single unit of an output good conditional on acquiring some input goods. With each producer \u03c0 \u2208 \u03a0 we associate:\n1. an input set, I\u03c0 \u2286 G, such that g \u2208 I\u03c0 iff there are edges \u3008g,\u03c0\u3009k \u2208 E for one or more k, and\n2. a single output, g\u03c0 \u2208 G\\ I\u03c0, such that \u3008\u03c0,g\u03c0\u3009 \u2208 E .\nA producer\u2019s input goods are complementary in that the agent must acquire all of them in order to produce its output; it cannot accomplish anything with only a partial set. Alternate producers with the same output indicate different ways that a good can be produced.\nTask dependency networks are constrained to be acyclic, that is, no agent produces goods that could be used to assemble its inputs through any chain of production. Although we might broadly view all global commerce as one large cycle of production and consumption, in practice, negotiations tend to be clustered within more limited scopes of concern, often referred to as \u201cindustries\u201d. The resulting supply chains are typically acyclic.\nFigure 2 shows an example task dependency network for the automotive supply chain problem of Figure 1. Here the goods are indicated by circles, and agents by boxes. Producers with inputs are represented by curved boxes. The numbers under agent boxes represent production costs and consumption values, explained below. An arrow from an agent to a good indicates that the agent can provide that good, and an arrow from a good to an agent indicates that the agent can make use of the good. For instance, the producer labeled Ford Auto Assembly requires Worked Metal and Ford Transmissions in order to produce cars. Since the transmissions produced by the Ford Transmission Factory can be used only by Ford, we need to distinguish Ford and GM transmissions as separate goods. This in turn requires that we introduce Ford and GM Transmission Subcontractor producers to model the fact that the Independent Transmission Factory can be used to produce either type.\nAn allocation is a subgraph (V \u2032,E \u2032) \u2286 (V,E). For a \u2208 A and g \u2208 G, an edge \u3008a,g\u3009 \u2208 E \u2032 means that agent a provides g, and \u3008g,a\u3009 \u2208 E \u2032 means a acquires g. An allocation\u2019s vertices are the agents and goods incident on its edges:\n1. An agent is in an allocation graph iff it acquires or provides a good:\nFor a \u2208 A, we have a \u2208V \u2032 iff \u3008g,a\u3009 \u2208 E \u2032 or \u3008a,g\u3009 \u2208 E \u2032.\n2. A good is in an allocation graph iff it is acquired or provided:\nFor g \u2208 G, we have g \u2208V \u2032 iff \u3008g,a\u3009 \u2208 E \u2032 or \u3008a,g\u3009 \u2208 E \u2032.\nA producer \u03c0 is active iff it provides its output. A producer is feasible iff it is inactive or acquires all its inputs. Consumers are always feasible.\nGood g is in material balance in (V \u2032,E \u2032) iff the number of edges in equals the number out: \u2223\n\u2223{(a,k) | \u3008a,g\u3009k \u2208 E \u2032} \u2223 \u2223= \u2223 \u2223{(a,k) | \u3008g,a\u3009k \u2208 E \u2032} \u2223 \u2223 .\nAn allocation is feasible iff all agents are feasible and all goods are in material balance. A solution is a feasible allocation that forms a partial ordering of feasible production, culminating in consumption. That is, some consumer acquires a good it desires:\nThere exists a \u3008g,c\u3009 \u2208 E \u2032 such that c \u2208C\u2229V \u2032.\nA solution may involve multiple consumers. If consumer c is in a solution (V \u2032,E \u2032) then we say that (V \u2032,E \u2032) is a solution for c.\nFigure 3 shows a solution allocation for the task dependency network of Figure 2. Shaded agents and solid arrows are part of the solution, with unshaded agents and dashed arrows indicating elements of the problem not part of the solution. Note that the Ford Auto Assembler wins an input, but is inactive. However, recall that inactive producers are feasible, hence the solution properties are met. We refer to the configuration of an inactive producer acquiring an input in an allocation as a dead end.\nEach producer \u03c0 has some production cost \u03ba\u03c0 for providing a unit of its output. The cost might represent the value \u03c0 could obtain from engaging in some other activity (i.e., its opportunity cost), or some direct cost incurred in producing its output (but not including input costs). Since a producer provides at most one unit of one good, the total production cost to \u03c0, with output g, for allocation E \u2032, is \u03ba\u03c0 if \u3008\u03c0,g\u3009 \u2208 E \u2032 and 0 otherwise.\nWe assume that a consumer has preferences over different possible goods, but wishes to obtain only a single unit of one good. Thus, a consumer c obtains value vc(g) for obtaining a single unit\nof good g, and, for allocation E \u2032, obtains value vc((V \u2032,E \u2032)) \u2261 max\u3008g,c\u3009\u2208E \u2032 vc(g). In depicting task dependency networks, we display costs and values below the corresponding agent boxes.\nDefinition 1 (value of an allocation) The value of allocation (V \u2032,E \u2032) is:\nvalue((V \u2032,E \u2032)) \u2261 \u2211 c\u2208C vc((V \u2032,E \u2032))\u2212 \u2211 \u03c0\u2208\u03a0 \u03ba\u03c0((V \u2032,E \u2032)).\nDefinition 2 (efficient allocations) The set of efficient allocations contains all feasible allocations (V \u2217,E\u2217) such that:\nvalue((V \u2217,E\u2217)) = max (V \u2032,E \u2032)\u2286(V,E) (value((V \u2032,E \u2032)) | (V \u2032,E \u2032) is feasible).\nTask dependency networks describe the supply chain formation problem from a global perspective. In a decentralized approach to formation, we would generally not assume that an agent, or any other entity, has perfect or complete knowledge of the entire network. We generally do assume that all agents have perfect knowledge of their own costs, values, and goods of interest. When mediators facilitate the negotiations for goods (as in protocols described below), each agent knows of relevant mediators for its goods of interest. This knowledge includes all rules enforced by the mediators. Likewise, mediators know of the existence of all agents interested in their respective goods. Beyond that, a mediator knows only what the agents reveal through communication during negotiation. A mediator does not know the agents\u2019 true costs or valuations, nor is it aware of agents\u2019 preferences for goods outside of its direct scope of facilitation. We do not address in detail how agents and mediators achieve mutual awareness (i.e., how connections originate), but assume that it can be accomplished via some unspecified search, notification, or broadcast protocol."}, {"heading": "3. Resource Contention", "text": "One natural candidate approach to supply chain formation is the CONTRACT NET protocol (Davis & Smith, 1983), the most widely studied algorithm for forming task performance relations among distributed agents. CONTRACT NET does indeed apply to our framework, as it employs local negotiation to achieve a hierarchical task decomposition. Although definitive characterization is difficult due to the many variants on CONTRACT NET in the literature (Baker, 1996; Davis & Smith, 1983; Dellarocas et al., 2000; Sandholm, 1993), it is fair to say that, generally, \u201crequest for quotes\u201d proceed top down from the root task (right-to-left from consumers, in our network terminology), and contracting proceeds bottom-up (left-to-right towards consumers), selecting at each level among candidate \u201cbids\u201d received. (Variants of the protocol are primarily distinguished by the form of bids and selection criteria employed.) As a consequence, choices are made greedily, without reflecting ramifications upstream in the evolving chain.\nThis approach can form satisficing supply chains when there are sufficient resources to support the greedy selection. However, the basic CONTRACT NET protocol does not explicitly address resource scarcity or contention among multiple agents. Producers accept bids on inputs before it can be established whether this might cause infeasibility further upstream. Without lookahead or backtracking, CONTRACT NET might construct infeasible supply chains when there are limited resources.\nFor instance, a greedy protocol would not produce a solution for the network shown in Figure 4. Here, if all producers bid according to a common function monotone in cost, the output bid of\nproducer a6 would be preferred to that of a5, because a6 can acquire its inputs cheaper. But since a7 must acquire the one available unit of good 4 to feasibly participate in a solution, a6 cannot be a part of the solution.\nThe issue of resource contention motivates our adoption of a market-based approach. The key idea is that prices can signal resource value and scarcity up and down the chain, enabling local decision making while avoiding the pitfalls of greedy one-pass selection or communication of global structure information."}, {"heading": "4. Price Systems", "text": "A price system p assigns to each good g, a nonnegative number p(g) as its price. Prices are anonymous (i.e., not agent dependent) and linear in the quantity of goods. Intuitively, prices indicate the relative value of the goods, and agents use the prices to guide their local decision making.\nWe assume agents have quasilinear utility functions, defined by \u201cmoney\u201d holdings plus the value (or minus cost) associated with the allocation of goods. Agents wish to maximize their surplus with respect to prevailing prices.\nDefinition 3 (surplus) The surplus, \u03c3(a,(V \u2032,E \u2032), p), of agent a with allocation (V \u2032,E \u2032) at prices p, is given by:\n\u2022 va((V \u2032,E \u2032))\u2212\u2211\u3008g,a\u3009\u2208E \u2032 p(g), if a \u2208C\n\u2022 \u2211\u3008a,g\u3009\u2208E \u2032 p(g)\u2212\u2211\u3008g,a\u3009\u2208E \u2032 p(g)\u2212\u03ba\u03c0((V \u2032,E \u2032)), if a \u2208 \u03a0."}, {"heading": "4.1 Price Equilibrium", "text": "Generally, an allocation (V \u2032,E \u2032) is a competitive equilibrium at prices p if (V \u2032,E \u2032) is feasible and assigns to each agent an allocation that optimizes the agent\u2019s surplus at p. For our model, this means specifically:\n\u2022 A producer\u2019s optimal choice is to be either active and feasible, or to acquire no goods. Hence, a producer in the allocation obtains nonnegative surplus by being active, and a producer not in the allocation would obtain nonpositive surplus by being active.\n\u2200\u03c0 \u2208 \u03a0\u2229V \u2032, \u2211 \u3008\u03c0,g\u3009\u2208E p(g)\u2212 \u2211 \u3008g,\u03c0\u3009\u2208E p(g)\u2212\u03ba\u03c0 \u2265 0\n\u2200\u03c0 \u2208 \u03a0\\V \u2032, \u2211 \u3008\u03c0,g\u3009\u2208E p(g)\u2212 \u2211 \u3008g,\u03c0\u3009\u2208E p(g)\u2212\u03ba\u03c0 \u2264 0\n\u2022 Because a consumer receives value for obtaining at most one good, a consumer\u2019s optimal choice is to obtain the good that gives it maximum nonnegative surplus, and to obtain no other goods at a positive price. Furthermore, a consumer not in the allocation (i.e., not obtaining any goods) would obtain nonpositive surplus from any good.\n\u2200c \u2208C\u2229V \u2032, \u2203\u3008g,c\u3009 \u2208 E \u2032, g = arg max g\u2032\u2208G vc(g \u2032)\u2212 p(g\u2032)\n\u2227 vc(g)\u2212 p(g) \u2265 0 \u2227\u2200\u3008g\u2032,E\u3009, g\u2032 6= g, p(g\u2032) = 0\n\u2200c \u2208C \\V \u2032, \u2200g \u2208 G,\nvc(g)\u2212 p(g) \u2264 0\nFigure 5 shows an example of a competitive equilibrium for Network greedy-bad. The prices are shown under their respective goods.\nA competitive equilibrium allocation is stable in the sense that no agent would want a different allocation at the equilibrium prices. Moreover, from equilibrium there is no way to reallocate the resources (including money transfers) so that some agent has greater surplus, without degrading some other agent\u2019s surplus. This absence of further gains from trade is referred to as Pareto optimality. Given quasilinear utility, price equilibria have been shown to be efficient under fairly general conditions (Bikhchandani & Mamer, 1997; Gul & Stacchetti, 1999; Ygge, 1998). This also holds for the particular case of task dependency networks, as stated in Corollary 4."}, {"heading": "4.2 Existence of Competitive Equilibrium", "text": "Not all task dependency networks have competitive equilibria. Consider again Network greedybad but with vcons = 9, as shown in Figure 6. The allocation shown is the only efficient allocation, hence any equilibrium must support it. Recall that in equilibrium, active agents must obtain nonnegative surplus, and inactive producers must not be able to obtain positive surplus. The price inequalities under the goods follow from constraints on the surplus associated with agent activity. The lower bounds on the prices of goods 1, 2, and 5 ensure that producers a1, a2, and a5, respectively receiv5e nonnegative surplus. The upper bound on 3 ensures that a3 could not obtain positive surplus. The lower bound on 4 ensures that a6 would receive nonpositive surplus. Propagating these bounds to 6, we see that p(6) \u2265 10 to give a7 positive surplus, but also that p(6) \u2264 9 to give cons nonnegative surplus. Since this is impossible, a competitive equilibrium cannot exist.\nTechnically, non-existence of equilibrium is due to complementarity of inputs for producers with discrete-quantity goods. In fact, complementarities are necessary to preclude competitive equilibrium in task dependency networks. A network has no input complementarities when all producers have at most one input.\nTheorem 1 Competitive equilibria exist for any network with no input complementarities.\nWe defer the proof of this and subsequent theorems to Appendix A. Consider again Figure 6. The multiple undirected paths between 1 and 4 give rise to the lower bound on the price of good 6. It turns out that these undirected cycles are also necessary to preclude competitive equilibrium.\nA polytree is a graph in which there is at most one undirected path from any vertex to another. Recall that in task dependency networks, if a producer uses multiple units of a good, then each unit is represented by a separate edge. It follows that an allocation is a polytree iff no more than one unit of a good is used to produce another given good, or used in multiple ways to produce a good.\nTheorem 2 Competitive equilibria exist for any polytree."}, {"heading": "4.3 Approximate Price Equilibrium", "text": "We should generally expect that market protocols based on discrete price adjustments (such as the SAMP-SB protocol we describe in Section 5) would overshoot exact equilibria by at least a small amount. Therefore, our analysis emphasizes approximate equilibrium concepts (Demange et al., 1986; Wellman et al., 2001a). We introduce a particular type of approximation, \u03bb-\u03b4-competitive equilibrium, defined in terms of parameters that bound the degree to which agents acquire suboptimal surplus. Intuitively, \u03b4b bounds the suboptimality of a consumer\u2019s surplus, \u03b4s bounds the suboptimality of a producer\u2019s surplus attributable to its output, and \u03bbg\u03c0 bounds the suboptimality of a producer \u03c0\u2019s surplus attributable to input g. As described in Section 5, these parameters also have special interpretation in our market protocol as applied to task dependency networks.\nDenote as Ha(p) the maximum surplus that agent a can obtain in (V,E), at prices p, subject to feasibility. That is,\nHa(p) \u2261 max (V \u2032,E \u2032)\u2286(V,E)\n\u03c3(a,(V \u2032,E \u2032), p)\nsuch that a is feasible at (V \u2032,E \u2032).\nDefinition 4 (\u03bb-\u03b4-competitive equilibrium) Given the parameters:\n\u2022 \u03b4b, \u03b4s \u2265 0,\n\u2022 \u03bbg\u03c0 for all \u03c0 \u2208 \u03a0 and all g \u2208 G,\nan allocation (V \u2032,E \u2032) is in \u03bb-\u03b4-competitive equilibrium at prices p iff:\n1. For all a \u2208 A, \u03c3(a,(V \u2032,E \u2032), p) \u2265 0.\n2. For all c \u2208C, \u03c3(c,(V \u2032,E \u2032), p) \u2265 Hc(p)\u2212\u03b4b.\n3. For all \u03c0 \u2208 \u03a0, \u03c3(\u03c0,(V \u2032,E \u2032), p) \u2265 H\u03c0(p)\u2212 (\u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s), and \u03c0 is feasible at (V \u2032,E \u2032).\n4. All goods are in material balance.\nConsider Network greedy-bad with the same prices shown in Figure 5 except that p(5) = 8. This does not constitute an exact competitive equilibrium because a6, though inactive, could make a positive profit. However, if \u03bb2\na6 +\u03bb3 a6 +\u03bb4 a6 +\u03b4s \u2265 1, then since Ha6(p) = 1, a6 obeys Condition 3\nand the allocation is a \u03bb-\u03b4-competitive equilibrium at the specified prices.\nTheorem 3 If (V \u2032,E \u2032) is a \u03bb-\u03b4-competitive equilibrium for (V,E) at some prices p, then (V \u2032,E \u2032) is a feasible allocation with a nonnegative value that differs from the value of an efficient allocation by at most \u2211\u03c0\u2208\u03a0[\u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s]+ |C|\u03b4b.\nA \u03bb-\u03b4-competitive equilibrium corresponds to the standard notion of competitive equilibrium when \u03b4b = \u03b4s = 0, and \u03bb g \u03c0 = 0 for all \u03c0 and g.\nCorollary 4 (to Theorem 3) A competitive equilibrium allocation is efficient.\nAs noted in Section 4.1, this is consistent with previously established results."}, {"heading": "4.4 Valid Solutions", "text": "In the following sections we show that \u03bb-\u03b4-competitive equilibria can be a useful concept for analyzing decentralized market protocols. However, such protocols do not always reach \u03bb-\u03b4-competitive equilibria for all networks. Hence we also consider weaker constraints on prices, consistent with a lesser degree of agent optimization in a solution allocation.\nWe say that a solution (V \u2032,E \u2032) is valid with respect to prices p if:\n1. Each consumer in the solution pays no more than its value for a single good. That is, for all c \u2208C\u2229V \u2032, there exists a single \u3008g,c\u3009 \u2208 E \u2032 such that\np(g) \u2264 vc(g),\nand p(g\u2032) = 0 for all g\u2032 6= g such that \u3008g\u2032,c\u3009 \u2208 E \u2032.\n2. None of the active producers are unprofitable. For all \u03c0 \u2208 \u03a0\u2229V \u2032 where \u3008\u03c0,g\u03c0\u3009 \u2208 E \u2032 we have \u03c3(\u03c0,(V \u2032,E \u2032), p) \u2265 0. Note that solution validity does not preclude an inactive producer from being unprofitable (i.e., it admits dead ends).\nNote that (1) effectively states that consumers do not obtain negative utility, which is weaker than the competitive equilibrium conditions in that it does not require consumers to receive their optimal allocation. Similarly, (2) does not require producers to optimize, as in competitive equilibrium, but only requires nonnegative utility for active producers.\nFigure 7 shows an example valid solution, with the same underlying costs and values as in Figure 5. Because it allows dead ends, validity does not directly provide useful bounds on the inefficiency of an allocation."}, {"heading": "5. SAMP-SB Protocol", "text": "The preceding section introduces some static properties of price configurations and allocations. Here we address the problem of how prices might be obtained. To compute prices and allocations, we must elicit information bearing on the relative value of goods, through some systematic communication process. Mechanisms that determine market-based exchanges based on messages from agents are called auctions (McAfee & McMillan, 1987).\nThe agents\u2019 bidding policies represent their strategies for interacting with the auctions. Whereas the auction mechanism may be designed by a central authority, bidding policies are generally determined by individual agents. To understand the implications of the auction design requires an analysis of the market protocol that arises from the combination the auction mechanism and the agent bidding policies.\nThe space of potential auctions is expansive (Wurman et al., 2001), and definitive theoretical results are currently known only for fairly limited classes of problems (Bikhchandani & Mamer, 1997; Demange & Gale, 1985; Gul & Stacchetti, 2000; Klemperer, 1999; McAfee & McMillan, 1987). Complementarities with discrete goods, which can cause nonexistence of price equilibria, also greatly complicate auction design and analysis of auctions (Milgrom, 2000).\nFor our supply-chain domain, we have investigated a particular protocol, called SAMP-SB (Simultaneous Ascending (M+1)st Price with Simple Bidding). As demonstrated below, SAMP-SB can produce good allocations which, in some cases, are consistent with competitive price equilibrium theory."}, {"heading": "5.1 Auction Mechanism", "text": "The SAMP-SB mechanism comprises a set of auctions, one for each good. Auctions run simultaneously, asynchronously, and independently, without direct coordination. Agents interact with the auctions by submitting bids for goods they wish to buy or sell. A bid is of the form: ((q1 p1) . . . (qn pn)). Each pair (qi pi) indicates an offer to buy or sell the good, with qi indicating the quantity of the offer and pi indicating the price. If qi > 0, it is an offer to buy qi units of the good for no more than pi per unit, and we refer to it as a buy offer. If qi < 0, it is an offer to sell qi units for no less than pi per unit, and we refer to it as a sell offer. Because no agent both buys and sells the same good in a task dependency network, a bid contains either all positive or all negative quantity offers. Bids possess what is sometimes called \u201cadditive-OR\u201d semantics\u2014the offers are treated exactly as if they came from separate bids, hence the auction can match any of the individual offers independently. Without loss of generality, we henceforth impose the restriction |qi| = 1 for all offers in all bids, continuing to allow that agents may submit multiple offers in a bid.\nWhen an auction receives a new bid, it sends each of its bidders a price quote specifying the price that would result if the auction ended in the current bid state. Price quotes are not issued until all initial bids are received, but are subsequently issued immediately on receipt of new bids. Because some offers may be tied at the current price, this information alone is not sufficient for an agent to tell whether it is winning an offer placed at that price. To clarify this ambiguity, the price quote also reports to each bidder the quantity it would buy or sell in the current state. The same prices are sent to all bidders, but the reported winning state is specific to the recipient. Agents may then choose to revise their bids in response to the notifications (if an agent does not wish to change its bid, inaction leaves its previous bid standing in the auction).\nWe assume that communication is reliable but asynchronous.3 That is, all messages sent eventually reach their recipients, although we impose no bound on the delays. Agents and auctions use message IDs to ensure that they handle messages in the appropriate order. Note that even if all auctions and agents have deterministic behaviors, an overall run of SAMP-SB may be nondeterministic due to this asynchrony.\n3. Technically, we adopt the model of asynchronous reliable message passing systems (Fagin et al., 1995).\nUnder asynchrony, it is helpful for the auction to send the ID of the most recent bid received from the agent with its price quote. An agent responds only to a price quote that reflects its most recent bid sent. Without this device, an agent can have difficulty establishing feasibility, as its understanding of its input and output bid states may be based on nonuniformly delayed reports.\nBidding continues until quiescence, a state where all messages have been received, no agent chooses to revise its bids, and no auction changes its prices, ask prices, or allocation. At this point, the auctions clear; each bidder is notified of the final prices and how many units it transacts in each good. Note that a quiescent system is not necessarily in a solution state or (approximate) equilibrium state.\nAlthough detecting quiescence is straightforward in a centralized system, in a decentralized, asynchronous system we need to perform the operation using only local message passing. In previous work (Wellman & Walsh, 2000), we described a protocol for detecting quiescence in general distributed negotiations, based on a well-known termination-detection algorithm.\nEach auction runs according to (M+1)st-price rules (Satterthwaite & Williams, 1989, 1993; Wurman et al., 1998). The (M+1)st price auction is a variant of the (second-price) Vickrey auction (Vickrey, 1961), generalized to allow for the exchange of multiple units of a good. Given a set of offers including M units offered for sale, the (M+1)st-price auction sets a price equal to the price of the (M+1)st highest offer over all of the offers. The price can be said to separate the winners from the losers, in that the winners include all sell offers strictly below the price and all buy offers strictly above the price. Some agents that offer at the (M+1)st price also win; in case of ties, offers submitted earlier have precedence. Winning buy and sell offers are matched one-to-one, and pay (or get paid) the (M+1)st price.\nWhen issuing price quotes, the auction reports both the price (i.e., the current going price, or (M+1)st price), p(g) and the ask price, \u03b1(g) of the good g. The ask price specifies the amount above which a buyer would have to offer in order to buy the good, given the current set of offers. The ask price is determined by the price of the Mth highest of all offers in the auction, hence \u03b1(g) \u2265 p(g). For instance, if we have buy bids 12, 10, and 6 and sell bids 15, 11, and 8, p(g) = 10, \u03b1(g) = 11, and if the auction is in quiescence, the buy bids 12 and 10 would match the sell bids 15 and 11 and trade at p(g) = 10.\nBecause a producer has complementary inputs, ensuring feasibility is a challenging problem, requiring careful design. The auctions run simultaneously, and each auction requires that the prices of an agent\u2019s successive buy offers increase by no less than some (generally small) positive number \u03b4b and the prices of successive sell offers increase by no less than \u03b4s.4 An auction can enforce the ascending rule by simply rejecting an agent\u2019s offer if the price does not increase by \u03b4b or \u03b4s. By constraining the direction of price changes, this design gives producers a more accurate indication of the relative prices for inputs and outputs than if prices were allowed to fluctuate in both directions.\nThe ascending bid restriction ensures ascending auction prices, with one technicality. Due to asynchrony and immediate issuance of price quotes, if the initial bid from an agent arrives after a higher bid, the price quote could decrease. This can be handled simply at the auction by issuing no price quotes until some specified period of time after the auction opens. After the first price quote is issued, the auction accepts new bids only from agents that had previously placed bids.\nIt is common in auction literature and practice to place an ascending restriction on buy-offer prices. It may seem counterintuitive\u2014and is in fact atypical\u2014to place the same restriction on\n4. These rules differ from those of a more typical simultaneous ascending auction (Demange et al., 1986; Milgrom, 2000), which specify that agents must submit offer prices that are at least an increment above the current price.\nsell-offer prices. However, such an ascending offer price restriction ensures that price quotes rise monotonically as the auctions progress. Section 5.4 shows how an ascending\u2013offer-price restriction for both buy and sell offers serves a key role in establishing the relationships between system quiescence and solution convergence of the system."}, {"heading": "5.2 Bidding Policies", "text": "Although designers of negotiation mechanisms do not generally have control over the agents\u2019 behaviors, any conclusions about the outcome of a mechanism must be based on some assumptions about these behaviors. A typical assumption in economics is that agents are rational in some sense, for example that they play policies that form a Bayes-Nash equilibrium. However, as discussed in Section 7.1, the complexity of supply chain formation markets is beyond the current state-of-the-art in analyzing Bayes-Nash equilibria with simultaneous ascending auctions. Instead, our analysis assumes that the agents follow a simple, non-strategic bidding policy, described in this section. Other variations may be reasonable, or perhaps better in some respects than the policies we describe. Rather than explore the range of possibilities, we chose in this work to investigate a particular set of policies in depth. Our chosen policies obey the ascending offer restriction enforced by the auction, respect the locality of information in that they require no knowledge of other agents in the system, and are myopic in that they use only information provided by the current price quotes, without forecasting future prices.\nRecall that a consumer wishes to acquire a single good that maximizes its surplus at the given prices. We assume that a consumer initially offers zero for each good of interest. So long as it is winning a good, it does not change its offer. Whenever it is not winning a good, it offers p(g\u2217)+\u03b4b for good g\u2217 = arg maxg\u2208G(vc(g)\u2212 p(g)\u2212\u03b4b) if vc(g\u2217)\u2212 p(g\u2217)\u2212\u03b4b \u2265 0, otherwise it stops bidding.\nA producer\u2019s objective is much more complex, namely to maximize the difference between the price it receives for its output and the total price it pays for its inputs, while remaining feasible. We assume that a producer initially offers zero for each of its input goods, and gradually increases these offers to ensure feasibility. It raises its offer price for an input good by \u03b4b if and only if the price quotes indicate that it is losing that good but winning its output.\nWe assume that producer \u03c0 bids for its output good g\u03c0 in an effort to recover its production cost and the perceived costs of its inputs. The producer places its first output offer only after receiving the first price quotes for all its inputs, and subsequently updates its output offer whenever it receives a new price quote on any input. For simplicity, consider the case in which \u03c0 has one offer (each at quantity one) for each input. If \u03c0 is currently winning an input g, its perceived cost, p\u0302\u03c0(g) of g is simply p(g). When \u03c0 is not currently winning g with a particular offer, p\u0302\u03c0(g) = max(\u03b1(g), p(g)+ \u03b4b). If \u03b2 is the price of the previous offer made by \u03c0 for g\u03c0, then when its perceived costs increase, \u03c0 offers max(\u03b2 + \u03b4s, \u2211\u3008g,\u03c0\u3009\u2208E p\u0302\u03c0(g)) for its output g\u03c0. If \u03c0 has multiple offers for a good g, then it assumes a separate perceived cost with respect to each offer, and bids for its output accordingly. Figure 8 shows how a producer would bid next as a function of the current prices and its current offers, when \u03b4b = 1 and \u03b4s \u2264 2.\nNote that throughout the negotiation, a producer places bids for its output goods before it has received commitments on its input goods. Producers counteract potential risk by continually updating their bids based on price changes and feasibility status. A producer reduces exposure to dead ends by incrementing its offer prices on inputs by minimal amounts and only when necessary."}, {"heading": "5.3 Bidding with General Preferences", "text": "The task dependency network model represents fairly simple production capabilities and consumer utility. Here we discuss some natural potential extensions of the bidding policies to a broader class of capabilities and preferences.\nA producer capable of variable-unit production could bid exactly as if it were multiple identical producers. Such a producer would maintain separate offers in its bids for each unit, and update the separate offers independently. Similarly, a consumer with additive value for multiple goods, or multiple units of a good, could bid for each unit of each good as if it were a separate consumer.\nA producer with alternatives on some input, independent of other inputs, can switch its bidding to the currently cheapest option. Subtle issues can arise for a producer that has alternative input sets, particularly when it is tentatively winning parts of the sets. One option would be to focus bidding on the set with the lowest perceived cost, which may include a premium for goods not in the tentatively winning set. Alternatively, the producer could assume that it will definitely win its tentatively won goods and effectively treat them as sunk costs. Fractional accounting of sunk costs may also be reasonable. Similar considerations arise for extensions presenting complex consumption choices."}, {"heading": "5.4 Properties of SAMP-SB", "text": "In this section we describe a number of theoretical properties of SAMP-SB. In Section 5.4.1 we describe properties relating to convergence to quiesence, in Section 5.4.2 we present properties relating to efficiency and convergence to price equilibrium, and in Section 5.4.3 we present properties relating to solution convergence."}, {"heading": "5.4.1 CONVERGENCE TO QUIESCENCE", "text": "The SAMP-SB auctions and bidding policies guarantee that the system will always reach quiescence.\nTheorem 5 SAMP-SB reaches quiescence after a finite number of bids have been placed.\nHowever, convergence can take a long time.\nObservation 6 In an asynchronous environment, it is possible that a run of the protocol may require a number of bids that is exponential in the network size, and not a function of the consumer value.\nFigure 9 shows Network exponential, which illustrates this observation. The agent named start places a one-time bid to sell one unit of good 0 for $2. Since \u03b1(0) = 2, and producers 1-1 and 1-2 are initially losing their input bids, these agents each offer a price of 2 for their output goods. Producer 1-3 will receive the new price quotes for goods 1-A and 1-B asynchronously, hence may update its bid for good 1 twice, offering a price of 2 the first time and a price of 4 the second time. Continuing with this process, we see that producer 3-3 updates its bid for good 3 up to eight times. If we extend this network and maintain labeling consistent with Figure 9, then producer n-3 would place O(2n) bids for good n. Note however, that if bids and price quotes are propagated synchronously, the exponential growth would not occur.\nIn the example above, most of the bids are actually superfluous in that they do not meaningfully affect the outcome of the protocol. This appears often true of situations exhibiting the worst-case behavior described. To capture the distinction between relevant and irrelevant bidding, we introduce the notion of quasi-quiescence, a persistent state from which all subsequent bids effectively do not matter for solution convergence. SAMP-SB convergence to quasi-quiescence requires a number of \u201cmeaningful\u201d bids that can be bounded by the size of the network and the value of the maximum consumer value.\nDefinition 5 (quasi-quiescent) A run of SAMP-SB is in a quasi-quiescent state when, for any consumer or active producer \u03c4, all bids by \u03c4 have been received and \u03c4 would not change its bids in response to any price quotes already received or transmitted by auctions.\nClearly, the requirements of quasi-quiescence are subset of the requirements for quiescence.\nObservation 7 A quiescent state is a quasi-quiescent state.\nTheorem 8 If a run of SAMP-SB reaches a quasi-quiescent state, then it remains in a quasiquiescent state. Furthermore, neither the allocation nor the prices p subsequently change.\nThis theorem means that, once quasi-quiescence is reached, all subsequent bids effectively do not matter in terms of equilibrium and solution convergence.\nCorollary 9 (to Theorem 8) The quiescent state of SAMP-SB is a \u03bb-\u03b4-equilibrium or valid solution iff the first quasi-quiescent state reached is a \u03bb-\u03b4-equilibrium or valid solution, respectively.\nThe following theorem establishes a bound on the number of relevant bids necessary to reach quasi-quiescence.\nTheorem 10 SAMP-SB reaches a quasi-quiescent state after a number of bids bounded by a polynomial of the size of the network and the value of the maximum consumer value have been placed by consumers and active producers.\nOur previously mentioned quiescence-detection protocol (Wellman & Walsh, 2000) can also detect quasi-quiescence, and thus terminate negotiations when it is reached."}, {"heading": "5.4.2 EFFICIENCY AND CONVERGENCE TO PRICE EQUILIBRIUM", "text": "We intentionally use \u03b4b and \u03b4s, to parametrize both SAMP-SB and our concept of \u03bb-\u03b4-competitive equilibrium. With an interpretation of \u03bbg\u03c0 in terms of prices and ask prices, we can specify necessary and sufficient conditions for which the result of SAMP-SB corresponds to a \u03bb-\u03b4-competitive equilibrium.\nTheorem 11 The prices and allocation determined in quiescence by the SAMP-SB protocol is a \u03bb-\u03b4-competitive equilibrium, with \u03bbg\u03c0 = max(\u03b1(g)\u2212 p(g), \u03b4b), iff no inactive producer buys any positive-price input.\nFrom Theorems 3 and 11, we can establish bounds on the inefficiency of a \u03bb-\u03b4-competitive equilibrium, parametrized by \u03bbg\u03c0 = max(\u03b1(g)\u2212 p(g),\u03b4b) for each good. In some cases, the difference between \u03b1(g) and p(g) may be quite high. However, we can actually establish a tighter bound.\nTheorem 12 If (V \u2032,E \u2032) is a \u03bb-\u03b4-competitive equilibrium computed by SAMP-SB, then (V \u2032,E \u2032) has a nonnegative value that differs from the value of an efficient allocation by at most \u2211\u03c0\u2208\u03a0(|{\u3008g,\u03c0\u3009 \u2208 E}| \u03b4b + \u03b4s)+ |C|\u03b4b.\nNote that the theorem replaces \u03bbg\u03c0 from Theorem 3 with \u03b4b in the bound. A network is a tree if it is a polytree with no more than one consumer.\nTheorem 13 The quiescent state of SAMP-SB is a \u03bb-\u03b4-competitive equilibrium for a tree.\nWe are unaware of other general network structures for which SAMP-SB is guaranteed to converge to a \u03bb-\u03b4-competitive equilibrium. However, Theorem 11 implies that we can improve allocations if we modify SAMP-SB to avoid dead ends. We say that a bidding policy is safe for a producer if the producer cannot obtain a negative surplus in quiescence. It is clear that if a protocol is safe for all producers, then it will converge to \u03bb-\u03b4-competitive equilibrium.\nIn SAMP-SB we have assumed that a producer updates buy and sell offers simultaneously in response to price quotes. This policy is not safe, even for single-input producers, because the producer bids for its input based on the state of its standing offer for its output, rather than the offer it is about to place. The producer would get negative surplus if it does not win its new output offer but gets stuck winning its new input offer. However, a slight variant of the bidding policy, which we call safe SAMP-SB, is safe for any single-input producer. With this protocol, a producer updates its input bids only when it would not update, and it currently winning, its most recent output offer. Clearly, safe SAMP-SB has the same static properties as SAMP-SB, hence Theorem 12 applies to safe SAMP-SB.\nTheorem 14 The quiescent state of safe SAMP-SB is a \u03bb-\u03b4-competitive equilibrium for a network with no input complementarities.\nSafe SAMP-SB is not guaranteed to be safe for producers with multiple inputs in arbitrary networks, nor do we know of any safe producer bidding policy that ensures safety for producers in any arbitrary network (other than degenerate policies such as not bidding).\nSafe SAMP-SB may take longer to reach quiescence than regular SAMP-SB. With safe SAMP-SB, a producer must always wait for notification of the results of pending output offers before increasing input offers. For a producer to win an output offer may require propagations of many messages through various paths in the network before buyers of the output good would increase their buy offer prices for that good. The resulting delay would be greater than the local delay in communicating with the output good auction.\nThat non-\u03bb-\u03b4-competitive equilibrium runs of SAMP-SB result in dead ends suggests a potential source of significant efficiency loss. For example, Figure 7 shows the result of a run of SAMP-SB on Network greedy-bad. This valid solution has a dead end at producer a6. Since producer a3 incurs its cost of $1 to provide good 3 to a6, but does not contribute to any value in the system, this dead end is pure waste from a global efficiency perspective. The allocation is undesirable directly for producer a6 because it is committed to pay $1 for an input it cannot use. With large networks or costs, dead ends can result in significant efficiency losses and negative profits to individual agents.\nWe propose a contract decommitment protocol to remove dead ends after SAMP-SB reaches quiescence. According to the decommitment protocol, each inactive producer can decommit from its contracts for its inputs for which it would pay a positive price. The protocol is applied recursively to the producers that lose their outputs due to decommitment. When the decommitment process terminates, agents exchange goods as specified by the remaining contracts. We refer to SAMP-SB with decommitment as SAMP-SB-D.\nIn Figure 7, producer a6 would decommit from its contract with a3. Clearly, Theorem 11 implies that no agent decommits iff SAMP-SB produced a \u03bb-\u03b4-competitive equilibrium. Moreover, if we remove from consideration all producers that decommit, the remaining agents are in \u03bb-\u03b4-competitive equilibrium.\nDecommitment has the benefit that, whereas some producers can lose money in the SAMP-SB protocol, no agent receives a negative surplus from participating in SAMP-SB-D. However, this is achieved by making the auction allocations non-binding, which is undesirable to the producers who lose their output sales to decommitments. It also begs the question of how to enforce the requirement that inactive producers be the only agents that decommit.\nIn addition to dead ends, efficiency can also be lost if SAMP-SB fails to find a solution when a positive value solution exists, or if SAMP-SB forms a solution with value inferior to an efficient solution (dead ends are not necessarily mutually exclusive of these two cases). In Section 6 we describe an experimental analysis of the efficiency, the source of inefficiency, and equilibrium attainment of SAMP-SB in a set of networks."}, {"heading": "5.4.3 SOLUTION CONVERGENCE", "text": "Recall that SAMP-SB always converges to a valid solution (specifically a \u03bb-\u03b4-competitive equilibrium) for networks with tree structures, and the safe variant converges for networks with no input complementarities. The following theorem shows that, with sufficiently high consumer value, regular SAMP-SB can always converge to a (possibly non-equilibrium) valid solution for polytrees.\nTheorem 15 If (V,E) is a polytree with a solution that assigns good g to consumer c, then given all other costs and values, there exists a value vc(g) such that SAMP-SB is guaranteed to converge to a valid solution (V \u2032,E \u2032) for c.\nBecause dead ends may result, we cannot usefully bound the inefficiency of the solution reached by SAMP-SB in a polytree.\nFor general network structures, the prices of all sell offers for all consumers\u2019 goods could rise above their values, in which case the system will necessarily reach quasi-quiescence in a nonsolution state. If, however, quasi-quiescence is reached before the price of some consumer\u2019s good reaches its value for the good, we have a valid solution.\nTheorem 16 If SAMP-SB reaches quasi-quiescence with p(g) < vc(g) for some \u3008g,c\u3009 \u2208 E, c \u2208C, then the system\u2019s state represents a valid solution.\nThe next theorem establishes conditions under which a valid solution state will immediately lead to quasi-quiescence.\nTheorem 17 If a run of SAMP-SB in (V,E) is in a valid solution state such that:\n\u2022 each consumer c is either winning an offer or p(g)+ \u03b4b > vc(g) for all \u3008g,c\u3009 \u2208 E,\n\u2022 all agents have correct beliefs about which goods they are currently winning,\n\u2022 all bids from consumers and active producers have been received in response to the current price quotes,\n\u2022 and no sell offers are lost due to tie breaking,\nthen after the subsequent price quote from each auction, the system will be in a quasi-quiescent state with a valid solution.\nAlthough SAMP-SB is not guaranteed to converge to a solution, the fact that the problem of finding a solution is NP-Complete (Walsh et al., 2003) should lead us to expect that there are problems for which SAMP-SB would converge to a solution only after an exponential number of meaningful bids. Since the number of meaningful bids is bounded by a polynomial of the maximum consumer value, we should further expect that there exist networks for which SAMP-SB can converge to a solution only with a exponential consumer values. In practice we find that we can construct problems for which the consumer value must be exponential in order for SAMP-SB to converge to a solution (Walsh et al., 2003). However, we have run many simulations for which the required value is much more reasonable (Walsh et al., 2003).\nFor some networks, costs, and values, SAMP-SB cannot converge to a valid solution with some values of \u03b4b and \u03b4s, no matter how high the consumer value. One example (the simplest we have been able to construct) is Network no-converge, shown in Figure 10. Observe that a solution must include agent a8, but cannot include a7. Agent a6 always offers a price of at least p(2)+ 20 for good 4, hence a8 cannot win two units of good 4 for less than p(2)+20 each. Thus agent a8 will always offer a price of at least 2p(2)+ 40 for good 5. Since agent a7 will never offer a price more than 2p(2)+ 2\u03bb2\na7 for good 5, agent a8 could only win good 5 if \u03bb2 a7 \u2265 20. But, for this to occur,\nwe must have \u03b4b \u2265 20. A more thorough analysis, taking into account the dynamics of SAMP-SB, shows we must have \u03b4b \u2265 40 and \u03b4s = 0 to obtain a valid solution in quiescence, and then only for certain patterns of asynchrony."}, {"heading": "6. Empirical Performance of SAMP-SB", "text": "Whereas our analytic results provide some insight into SAMP-SB and its variants, they do not support a comprehensive characterization of performance, except for certain special-case network structures. In order to gain further understanding of the effectiveness of SAMP-SB and SAMP-SB-D, we performed an empirical study based on protocol simulations on sample task dependency networks."}, {"heading": "6.1 Setup", "text": "Our investigation focuses on a small set of networks exhibiting a variety of structural properties: simple (Figure 11), unbalanced (Figure 12), two-cons (Figure 13), bigger (Figure 14), and many-cons (Figure 15). We also also studied Network greedy-bad (Figure 4).\nWe ran experiments on multiple instances of each network. For each instance we randomly chose producer costs uniformly from [0,1], but for each consumer in a network, we calculated a fixed value so that, excluding all other consumers, there exists a positive-surplus solution for this consumer with 0.9 probability. We determined consumer values via simulation, assuming the specified distributions of producer costs. We discarded all instances whose efficient solutions had value zero. We set \u03b4b = \u03b4s = .01.\nTo test the effect of competitive equilibrium existence on the performance of the protocols, we generated instances of unbalanced, two-cons, and greedy-bad with costs that admit competitive equilibrium and with costs that do not. Because simple and many-cons are polytrees,\nwe know from Theorem 2 that all instances thereof have competitive equilibria. We were not able to generate no-equilibrium instances of bigger with the given cost distributions.\nTo generate an instance with a desired type of cost structure (equilibrium or no-equilibrium) we repeatedly chose sets of producer costs randomly from the uniform distribution until the desired property was met. In the experiments, we determined whether competitive equilibrium existed\u2014 given complete information about the network structure, values, and costs\u2014using the following procedure. Recall that a competitive equilibrium is always efficient (Corollary 4). Hence, given an optimal allocation (V \u2217,E\u2217), we attempt to solve the system of linear equations that characterize a competitive equilibrium, as described in Section 4.1. If a solution to the equations exists, the resulting prices constitute a competitive equilibrium, otherwise no equilibrium exists. We used CPLEX, a commercial mixed-integer-linear programming package, to find the efficient allocation and to solve the corresponding equilibrium equations.\nFor each type of cost structure in each network, we tested 100 random instances, with the exception of simple, for which we tested 3220 instances.5 For each instance and each protocol, we measured the efficiency\u2014the fraction of the efficient value\u2014attained by SAMP-SB and SAMP-SB-D. We also measured the percentage of available surplus (i.e., percentage of the value of an optimal solutions) obtained by the producers."}, {"heading": "6.2 Results", "text": "We classify the efficiency of a run of the protocols in one of four ways: Negative, Zero, Suboptimal (but positive), and Optimal efficiency. Table 1 shows the distribution of the efficiency classes in our experiments. Note that SAMP-SB-D cannot produce negative efficiency, by construction.\n5. We tested more instances of simple as a part of a broader study (Walsh et al., 2000).\nRecall (from Section 5.4.2) that efficiency loss in SAMP-SB can be attributable to any of three, not necessarily exclusive, causes: dead ends, failure to form a solution when a positive-valued solution exists, and finding a suboptimal solution. We can infer the percentage of instances exhibiting dead-end suboptimality in SAMP-SB by examining the differences between SAMP-SB-D and SAMP-SB totaled over the Negative, Zero, and Suboptimal columns in Table 1. Decommitment does not affect the contribution of no-solution and suboptimal-solution losses, but helps reveal them by eliminating dead-end suboptimality. Hence, we can infer the percentage of instances exhibiting no-solution and suboptimal-solution suboptimality in SAMP-SB by examining the Zero and Suboptimal columns of SAMP-SB-D, respectively.\nTable 2 shows the average efficiency attained by the protocols, factored by network and equilibrium existence (where relevant). We see, from the difference between the SAMP-SB-D and SAMP-SB columns, that dead ends are a significant source of inefficiency. Additionally, existence of competitive equilibrium has a significant effect on the performance of the protocols. In these networks, SAMP-SB-D produces nearly perfect efficiency when competitive equilibrium exists (recall that all studied instances of simple, bigger, and many-cons have equilibria), but is is much less effective when equilibrium does not exist, in fact failing to find any solutions in the no-equilibrium cases of unbalanced and greedy-bad.\nTo check whether these differences in performance are significant, we performed Student\u2019s tTests for each protocol, comparing the mean efficiencies of instances that admit competitive equilibrium with the means of those instances that do not admit competitive equilibrium. Table 3 shows the results, indicating the p-values that the means of equilibrium and no-equilibrium instances came from the same underlying population. In typical analyses, the null hypothesis that the means are equal is rejected if the p-value is below 0.05. With this threshold, it seems we can safely reject the hypothesis that the mean efficiencies of equilibrium and non-equilibrium instances are the same for\nNetworks unbalanced and greedy-bad. Inspection of the data further supports this conclusion, as SAMP-SB-D essentially always produces zero efficiency, but produces perfect efficiency in many of the instances that do admit competitive equilibrium.\nOn the face of it, the high SAMP-SB/greedy-bad p-value suggests that we cannot safely reject the hypothesis that the mean efficiencies differ between the equilibrium and no-equilibrium instances of the network. However, inspection of the data indicates that this high probability results from one outlying equilibrium instance with a large negative efficiency. Indeed, the fact that SAMP-SB-D always produces essentially optimal results in instances that admit competitive equilibrium, but predominantly produces suboptimal results in the instances without such equilibria, suggests that it is unlikely that the equilibrium and no-equilibrium means are the same for SAMP-SB in Network greedy-bad.\nTable 4 shows the percentage of instances for which SAMP-SB attained \u03bb-\u03b4-competitive equilibrium in each network. It is straightforward to determine whether \u03bb-\u03b4-competitive equilibrium is attained by observing whether there are any dead ends (Theorem 11). Again, we see a strong connection with the existence of competitive equilibrium. One notable exception is many-cons (which always admits a competitive equilibrium), for which SAMP-SB frequently produced dead ends. We do see that \u03bb-\u03b4-competitive equilibria form in a small percentage of the no-equilibrium two-cons instances, although this is not a prevalent phenomenon with the \u03b4b and \u03b4s parameters we chose.\nTable 5 shows the average efficiency, factored by \u03bb-\u03b4-competitive equilibrium attainment (SAMP-SB and SAMP-SB-D produce the same results when \u03bb-\u03b4-competitive equilibrium is attained). We must be careful in drawing conclusions from these statistics because, for any given network case, there were relatively few or many \u03bb-\u03b4-competitive equilibrium instances (Table 4). Still, we note certain salient trends. The \u03bb-\u03b4-competitive equilibrium runs produce near perfect efficiency, with smaller degrees of inefficiency than specified by the bounds in Theorem 12. Because an allocation produced by SAMP-SB is a \u03bb-\u03b4-competitive equilibrium iff there are no dead ends, we should expect that a significant portion of efficiency loss in non-\u03bb-\u03b4-competitive equilibrium pro-\nducing runs of SAMP-SB would be attributable to negative surplus incurred from dead ends. The significant differences between the efficiency of SAMP-SB-D and SAMP-SB shown in the non\u03bb-\u03b4-competitive equilibrium column provides evidence for this hypothesis. Indeed, it appears that surplus lost to dead ends (as opposed to suboptimal solution attainment) is the dominant cause of inefficiency when \u03bb-\u03b4-competitive equilibrium is not attained. In all instances, improvement from decommitment is greater than the difference between the efficiency of SAMP-SB-D and optimal efficiency.\nTable 6 shows the average fraction of available surplus obtained by producers, respectively, in each network. Perhaps surprisingly, in some networks the producers can gain significant surplus with the SAMP-SB-D protocol, even though they are bidding to obtain zero surplus. The reason for this is that a producer\u2019s output offer indicates the minimum amount it is willing to accept in exchange for its output. But rising buy offers can cause the price to rise above the producer\u2019s output offer. This could happen in cases when it is necessary to block out certain agents to have a feasible allocation in quiescence. Note however, that the decommitment step is needed for the producers to obtain high average surplus. Without decommitment, the average producer surplus can be highly negative, as shown in the SAMP-SB column."}, {"heading": "7. Related Literature", "text": "In this section we discuss literature related to our present work. In Section 7.1 we discuss related literature on price-based analysis and auction theory, and in Section 7.2 we discuss related literature on supply chain formation."}, {"heading": "7.1 Price-Based Analysis and Auction Theory", "text": "We have shown some special cases for which competitive equilibria exist in task dependency networks (polytree and single-input-producer networks), that SAMP-SB always finds \u03bb-\u03b4-competitive equilibrium in trees, and that a minor variant always finds \u03bb-\u03b4-competitive equilibria in single-inputproducer networks. A review of the results in price equilibrium and auction theory reveals that such limited positive results are typical.\nIt is well-known that given arbitrarily divisible goods and convex utility, cost, and production functions, competitive equilibrium prices exist. If additionally, the gross substitutes condition (which is a generalization of no-complementarities) is met, the classic ta\u0302tonnement procedure finds competitive equilibrium in a distributed manner.6\nWhen goods are discrete, competitive equilibria exist in exchange (non-production) economies if the gross substitutes conditions are met (Bikhchandani & Mamer, 1997; Gul & Stacchetti, 1999; Kelso & Crawford, 1982). Milgrom (2000) showed that the existence of a single complementarity can be sufficient to preclude equilibrium in exchange economies. Bickhchandani and Mamer (1997) also show existence under a variety of other conditions, which do not appear to have natural interpretations in task dependency networks. In exchange economies, the gross substitutes condition also ensures convergence to (approximately) competitive equilibria with simultaneous ascending auctions (Demange et al., 1986; Gul & Stacchetti, 2000).\nThat distributed price-based auction protocols can leave agents with undesired goods when their preferences are complementary (e.g., dead ends in a task dependency network), is a widely recognized problem. An alternative approach is to use a combinatorial auction, which mediates negotiation at a single location, performing global matching of combinations of goods based on indivisible bids. This general approach has received much attention in the AI community as of late, motivated\n6. The reader may consult a standard microeconomic textbook (Mas-Colell et al., 1995) for details on these results.\nin part by techniques for quickly performing the necessary global optimization (Andersson et al., 2000; Leyton-Brown et al., 2000; Sandholm & Suri, 2000).\nCurrently, some results on combinatorial equilibria and auctions have been established for onesided (i.e., buyer only) bidding. Bikhchandani and Ostroy (2002) and Wurman and Wellman (2000), using different combinatorial frameworks, provide positive results on equilibrium existence, and properties thereof. Wurman and Wellman describe a combinatorial auction for their framework. Parkes and Ungar (2000) describe a combinatorial auction that is guaranteed to converge to an efficient allocation if agents follow myopic best-response strategies. By adding an \u201cextend-andadjust\u201d phase, these authors are able to obtain this allocation in ex post Nash equilibrium (Parkes & Ungar, 2002). Ausubel and Milgrom (2002) present a proxy-auction mechanism that obtains efficient allocations with straightforward bidding in equilibrium when goods are substitutes.\nIn the present work we consider only simple, local, myopic bidding policies. These policies are non-strategic, in that agents do not reason about their effect on the negotiations in an attempt to extract greater surplus. The assumption of non-strategic behavior is plausible when there are a large number of agents. In networks with many agents bidding for individual goods, many parallel branches, or many agents in sequence, the potential contribution of any one agent to the value of a solution is relatively small and there is little to gain by strategic behavior.\nOur experiments have shown that, even when producers bid to obtain zero surplus with the specified policy, they can obtain positive surplus in some networks. Nevertheless, in smaller networks, the potential for strategic improvement is more pronounced, and our non-strategic assumption becomes less plausible. A widely studied concept used for analyzing strategic behavior is Bayes-Nash equilibrium.7 Informally, a set of strategies constitutes a Bayes-Nash equilibrium if no single agent has an incentive to deviate from its strategy, given that all other agents play their Bayes-Nash equilibrium strategies. McAfee and McMillan (1987) and Klemperer (1999) survey the state of knowledge of strategic analysis of auctions in exchange economies. Milgrom (2000) provides insights on some of the fundamental challenges to understanding the agent behavior with complementary preferences. However, definitive results are known only for quite restrictive market structures, and do not encompass two-sided markets with complementarities, never mind the multi-level characteristic of negotiation in task dependency networks. The problem of even specifying the information structure of the extensive form game of simultaneous ascending (M+1)st price auctions in task dependency networks, prerequisite to computing Bayes-Nash equilibria, is well beyond the current state of the art in game-theoretic analysis.\nAs auction theory currently fails to provide satisfactory guidance for understanding strategic behavior in even moderately complicated domains, some have used tournaments as a framework for developing and evaluating candidate agent strategies. The Santa Fe Double Auction Tournament (Rust et al., 1994) provided some unexpected insights into effective strategies in continuous double auctions, and the recent \u201cTAC\u201d series of trading agent competitions (Wellman et al., 2001b, 2003) encouraged the development of sophisticated agent strategies (Greenwald, 2003; Stone & Greenwald, 2000) for a complex market game.\nThe Vickrey-Clarke-Groves mechanism (Clarke, 1971; Groves, 1973; Vickrey, 1961), also called the Generalized Vickrey Auction (GVA) (MacKie-Mason & Varian, 1994), is a direct revelation approach, where agents report their valuations on allocations, and the auction computes a lump-sum payment. For the GVA, the solution is the optimal allocation based on the reports, and\n7. For a foundational reference, Chapter 7 of Fudenberg and Tirole\u2019s game theory text (1998) provides a formal treatment of the strategic issues in auction mechanism design and analysis.\nthe payment function is such that it is a dominant strategy for agents to report their true utility. Because of this incentive compatibility and perfect efficiency, the GVA may seem ideal from an economic perspective (although the computation can be intractable). However, the GVA is not budget balanced\u2014when both buyers and sellers bid, the GVA can pay out more money than it takes in. Unfortunately this is unavoidable, as it is impossible to simultaneously ensure efficiency, budget balance, and individual rationality (no agent achieves negative surplus) (Myerson & Satterthwaite, 1983). Recently, Babaioff et al. (Babaioff & Nisan, 2001; Babaioff & Walsh, 2003) described distributed auction mechanisms, based on McAfee\u2019s trade reduction auction (1992), that obtain incentive compatibility and budget balance in linear supply chains, at the expense of perfect efficiency. Recent work by Parkes, Kalagnanam, and Eso (2001) explores methods to minimize the deviation from efficiency while maintaining budget balance in two-sided GVA-like mechanisms."}, {"heading": "7.2 Supply Chain Formation", "text": "Supply chain management\u2014the problem of accurately forecasting and planning production and deliveries to meet demand and minimize inventory\u2014is an active field of study in operations research. The problem of management differs from supply chain formation in that the exchange partners in the supply chain are pre-established, and it is assumed that information can be gathered from all agents to effectively optimize global production across the supply chain. In contrast, in this work we approached the problem of automating the process of determining supply chain participants dynamically, under the assumption that information and decision making is decentralized. Readers interested in supply chain management may refer to Kjenstad (1998) for an extensive review.\nRelatively less effort has been explicitly devoted to the problem we cast as supply chain formation, despite the rhetorical appeals to decentralized and dynamic relation-building commonplace in the popular literature. Nevertheless, as we point out in Section 3, some venerable AI methods\u2014in particular the widely-known CONTRACT NET protocol\u2014can in principle be applied to supply chain formation. As discussed in Section 3, the standard CONTRACT NET does not have mechanisms to resolve nontrivial resource contention, precluding a systematic comparison with SAMP-SB on general network structures. We can, however, compare the protocols on network structures for which a resource contention mechanism is not necessary for CONTRACT NET. It is clear that if agents bid their true costs, then CONTRACT NET with greedy allocation will converge to optimal allocations for trees. The same holds for tree structures relaxed to allow multiple-unit input bids. As we have shown, SAMP-SB is guaranteed to converge to approximately efficient allocations for trees. However, it can be shown that it may not converge to good solutions if multiple unit input bids are allowed. In the latter case, competitive equilibrium may not exist, and and we have observed that equilibrium non-existence can substantially hurt efficiency in SAMP-SB allocations. In contrast, producers may receive different prices for the same good with CONTRACT NET. This discriminatory pricing mechanism makes CONTRACT NET robust in the presence of complementarities, for this class of network structures.\nSandholm (1993) examines a specialization of CONTRACT NET for a generalization of Task Oriented Domains (TODs) (Rosenschein & Zlotkin, 1994). Agents begin with an initial allocation of tasks and negotiate task exchanges until there are no mutually beneficial trades. Sandholm\u2019s model allows local constraints on task achievement in that an agent can perform only certain combinations of tasks. However, there is no dependency structure\u2014an agent does not rely on other agents\u2019 task achievement in order to accomplish its own tasks. Thus, every locally feasible trade results in\na globally feasible allocation, and can be executed immediately and independently of other trades. We cannot generally apply an incremental trading protocol to our task allocation model with subtask dependencies. A local exchange may require reallocation throughout the entire network to maintain production feasibility.\nAndersson and Sandholm (1998) find that decommitment protocols increase the quality of the resulting allocations in variants of TODs. With incremental trading, decommitment gives agents the opportunity to engage in other more cost-effective contracts. Andersson and Sandholm also consider decommitment penalties to provide friction in reallocation and to compensate agents whose contracts are broken. We expect that such penalties would be an appropriate extension to the SAMP-SB-D protocol.\nVeeramani et al. (Veeramani et al., 1999; Joshi et al., 1999) consider issues arising from simultaneous negotiation of multiple subtasking issues at various levels of a supply chain. In their asynchronous model, agents may have the opportunity to finalize a contract while other negotiations are still pending. This uncertainty induces a complex decision problem for agents that do not wish to overextend their commitments.\nHunsberger and Grosz (2000) study the problem of assigning task performance roles to agents in the SharedPlans collaborative planning framework. The model is based on recipes, which describe the precedence constraints on the execution time across the various sub-tasks that constitute a complex task. Contention for shared resources is not modeled explicitly in the recipe, but individual agents may have additional cost, timing, or other constraints, potentially arising from their individual resource limitations. Hunsberger and Grosz use a combinatorial auction to assign tasks to agents, given the constraints, to produce a high-valued shared plan. They find that limiting task assignment to certain combinations in roles can effect a tradeoff between computational and allocative efficiency.\nIn other work (Walsh et al., 2000; Walsh, 2001), we have studied strategic behavior of agents bidding in a particular one-shot combinatorial auction within the task dependency network model. We empirically compared the performance of SAMP-SB, SAMP-SB-D, and the combinatorial auction (with strategic bidding). The combinatorial auction eliminates the problem of dead ends by allocating inputs and outputs to producers on an all-or-nothing basis. This advantage notwithstanding, combinatorial auctions may not always be an appropriate mechanism. Since finding any feasible supply chain solution is NP-hard (Walsh et al., 2003), sufficiently large problems will be intractable, even for advanced optimization procedures. Even when the computation is tractable, social factors may limit the authority of any one entity to compute allocations over the entire supply chain."}, {"heading": "8. Extensions and Future Work", "text": "The task dependency network model we propose provides a basis for beginning to understand the automation of supply chain formation. We have discussed some ways to extend the bidding policies in our market protocol to accommodate more general production capabilities and consumer preferences. With these extensions we can model capabilities and preferences on multi-attribute goods (e.g., goods with multiple features such as quality and delivery time, in addition to price and quantity) by simply representing each configuration as a distinct good in the network. However, it is clear that this can explode the number of goods with just a few attributes. To effectively handle greater numbers of attributes would require multiattribute auctions (Bichler, 2001), where multiple inseparable features of an exchange are negotiated simultaneously.\nIn more realistic scenarios, producers may also have to solve complex internal scheduling, planning, forecasting, or other complex problems in order to evaluate their costs and feasible options. These types of extensions would increase the fidelity of the model, but would have implications for agent bidding policies and computation and convergence speed in market protocols. Despite the best efforts of agents to forecast and plan, agents cannot predict with certainty their operation within a formed supply chain. Sophisticated agents would employ probabilistic reasoning techniques in evaluating their options during negotiation. When unexpected events do occur that impair the operation of a formed supply chain, agents would need protocols for repairing or reforming the supply chain.\nWe assumed a simple set of non-strategic, myopic bidding policies for the simultaneous ascending auction. Because agents must coordinate input and output bids in a dynamic auction mechanism, understanding strategic bidding behavior is a challenging and unsolved, albeit important problem for future work. It seems likely that significant developments in game-theoretic methodology would be necessary to analytically solve, or even realistically specify, the extensive form games of incomplete information corresponding to asynchronous iterative auctions. In the meantime, to make progress in understanding the performance of auctions, we should consider alternate approaches to developing \u201cgood\u201d bidding policies. Tournaments have proven to be effective ways to both encourage smart people to design smart trading policies and to evaluate their relative qualities (Rust et al., 1994; Wellman et al., 2001b). Axelrod (1987) used an evolutionary approach to evaluate populations of strategies, with fixed types, for the iterated prisoners\u2019 dilemma. A major challenge in applying an evolutionary approach to the supply chain formation problem is to develop a sufficiently rich, yet reasonably searchable set of agent bidding policies.\nWe suggested decommitment as a solution to the problem of dead ends in SAMP-SB, and a strategic analysis of the protocol would have to take this phase into account. Because producers could not lose money when decommitment is allowed, we should expect that producers would be more willing to participate, and would also be more aggressive in their bidding. Allowing decommitment begs the question of how to enforce that producers decommit only when they are in dead ends, and also does not address the fact that unilateral decisions for decommitment can potentially break the (possibly desirable) contracts of many other downstream producers. To reduce aggressive bidding and mitigate the potential problems, we could charge penalties to producers who initiate decommitment (Andersson & Sandholm, 1998), perhaps paid to the producers whose output contracts get decommitted. This would reduce spurious decommitments while still allowing an out for producers stuck in costly dead ends.\nFinally, we note that the market configuration studied here\u2014separate auctions for each good\u2014 represents just one possible partition of the scope of negotiations on the supply chain. At the other extreme, production activity could be mediated by one combinatorial auction mechanism covering the entire supply chain (Walsh et al., 2000). This avoids some coordination pitfalls of the separate auction approach, but imposes other disadvantages associated with imposing a mechanism with global scope. Intermediate configurations, involving multiple auctions for clusters of highly related goods, represent a promising alternative for further investigation."}, {"heading": "ACKNOWLEDGMENTS", "text": "This paper includes material previously presented at the Sixteenth International Joint Conference on Artificial Intelligence (IJCAI-99) (Walsh & Wellman, 1999). This work was supported in part by NSF grant IIS-0205435."}, {"heading": "Appendix A. Proofs", "text": "This appendix provides proofs of our theorems. For convenience, we restate the theorems before the proofs.\nIn our proofs, it is sometimes useful to index the position of a producer in a network. The Clevel of a producer with output g is the maximum distance from it to any consumer, formally stated as follows: one if no producer, but some consumer, has g as input, and k + 1 if the maximum level of any producer with input g is k. The S-level of a producer is defined similarly, but with respect to the distance to any producer with no input, and with a basis of zero for producers that have no inputs themselves. Both the C-level and S-level are well defined, by acyclicity."}, {"heading": "A.1 Proof of Theorem 1", "text": "Let (V,E) be a network with no input complementarities, that is all producers have at most one input, and let (V \u2217,E\u2217) be the optimal allocation for (V,E). For convenience, we partition producers \u03a0 into sets \u03a01, the producers with a single input, and \u03a00, the producers with no inputs.\nProcedure No Input Complementarities Equilibrium constructs prices that support a competitive equilibrium for (V \u2217,E\u2217).\nNo Input Complementarities Equilibrium:\n1. Initialize all prices to zero.\n2. Perform any of the following until no price changes are made:\n(a) If for some c \u2208C \\V \u2217, we have vc(g) > p(g), where \u3008g,c\u3009 \u2208 E \\E\u2217, p(g) \u2190 vc(g). (b) If for some c \u2208C\u2229V \u2217, we have vc(g\u2032)\u2212 p(g\u2032) > vc(g)\u2212 p(g) \u2265 0, where \u3008g,c\u3009 \u2208 E\u2217 and \u3008g\u2032,c\u3009 \u2208 E \\E\u2217,\np(g\u2032) \u2190 vc(g\u2032)\u2212 (vc(g)\u2212 p(g)).\n(c) If for some \u03c0 \u2208 \u03a00 \u2229V \u2217, we have p(g\u03c0) < \u03ba\u03c0, where \u3008\u03c0,g\u03c0\u3009 \u2208 E\u2217, p(g\u03c0) \u2190 \u03ba\u03c0. (d) If for some \u03c0 \u2208 \u03a01 \u2229V \u2217, we have p(g\u03c0) < p(g)+ \u03ba\u03c0 where \u3008\u03c0,g\u03c0\u3009 \u2208 E\u2217 and \u3008g,\u03c0\u3009 \u2208 E\u2217, p(g\u03c0) \u2190 p(g)+ \u03ba\u03c0. (e) If for some \u03c0 \u2208 \u03a01 \\V \u2217, we have p(g\u03c0) > p(g)+ \u03ba\u03c0,\nwhere \u3008\u03c0,g\u03c0\u3009 \u2208 E \\E\u2217 and \u3008g,\u03c0\u3009 \u2208 E \\E\u2217, p(g) \u2190 p(g\u03c0)\u2212\u03ba\u03c0.\nIn network (V,E) (with no input complementarities) at prices p, a closed, reverse-surplus sequence is a directly connected sequence of agents and goods such that every agent would be better off by \u201creversing\u201d its allocation. Formally, it is a sequence (n1, . . . ,nk) of vertices ni \u2208V , such that:\n1. \u3008ni,ni+1\u3009 \u2208 E or \u3008ni+1,ni\u3009 \u2208 E for all i where 1 \u2264 i \u2264 k\u22121.\n2. nk \u2208 G.\n3. n1 \u2208 (C \\V \u2217)\u222a (\u03a00 \u2229V \u2217).\n(a) If n1 \u2208 C \\V \u2217, then \u3008n2,n1\u3009 \u2208 E \\E\u2217 and n1 would obtain nonnegative surplus at p from obtaining n2. If 1 = k\u22121, then n1 would obtain strictly positive surplus at p from obtaining n2.\n(b) If n1 \u2208 \u03a00 \u2229V \u2217, then \u3008n1,n2\u3009 \u2208 E\u2217 and n1 would obtain nonpositive surplus at p from being active. If k = 2, then n1 would obtain strictly negative surplus at p from being active.\n4. For i \u2265 2, if ni \u2208 A then ni \u2208 \u03a01 \u222a (C\u2229V \u2217).\n(a) If ni \u2208 \u03a01 \u2229V \u2217, then \u3008ni\u22121,ni\u3009 \u2208 E\u2217, \u3008ni,ni+1\u3009 \u2208 E\u2217, and ni would obtain nonpositive surplus at p from being active. If i = k\u22121, then ni would obtain strictly negative surplus at p by being active.\n(b) If ni \u2208 \u03a01 \\V \u2217, then \u3008ni+1,ni\u3009 \u2208 E\u2217, \u3008ni,ni\u22121\u3009 \u2208 E\u2217, and ni would obtain nonnegative surplus at p from being active. If i = k\u22121, then ni would obtain strictly positive surplus at p by being active.\n(c) If ni \u2208C\u2229V \u2217, then \u3008ni\u22121,ni\u3009 \u2208E\u2217, \u3008ni+1,n\u3009 \u2208E \\E\u2217, and ni would obtain no less surplus from ni+1 than from ni\u22121 at p. If i = k\u2212 1, then ni would obtain strictly better surplus from ni+1 than from ni\u22121.\nAn open reverse-surplus sequence is the same as a closed, reverse-surplus sequence except that, instead of Condition 3, we have n1 \u2208 G and n2 \u2208 \u03a01 \u222a (C\u2229V \u2217) as with Condition 4. Clearly any closed, reverse-surplus sequence of length greater than two contains an open, reverse-surplus sequence.\nLemma 18 Procedure No Input Complementarities Equilibrium does not reach a state such that there is an open, reverse-surplus sequence K = (n1, . . . ,nk) constituting a cycle with n1 = nk and k \u2265 3.\nProof. Assume, contrary to which we wish to prove, that there is such a cycle K at prices p. Moreover, let the cycle be the smallest, in that it contains no other such cycle.\nWe show how to create an alternate, feasible solution (V \u2032,E \u2032) with a higher value than (V \u2217,E\u2217), giving us a contradiction. Initialize (V \u2032,E \u2032) = (V \u2217,E\u2217). For all n j, where 1 \u2264 j < k, if \u3008n j,n j+1\u3009 \u2208 E\u2217, remove the edge from E \u2032, and if the edge is in E \\E\u2217, add the edge to E \u2032. Also, add and remove vertices as necessary to be consistent with the added and removed edges.\nEach producer in (V \u2032,E \u2032) is feasible because it was feasible in (V \u2217,E\u2217) and if it has an input, either both its input and output are added, both are removed, or neither is changed. Consider a good n j \u2208 G, with 1 < j < k. Since j\u22121 > 1, it must be that agents n j\u22121 and n j+1 are in \u03a01 \u222a (C\u2229V \u2217). By inspecting Conditions 4(a)\u20134(b) of the definition of a closed, reverse-surplus sequence (which also apply to an open reverse-surplus sequence), we see that edges incident on n j are added or removed in such a way that n j is in material balance. Similarly, considering agents nk\u22121, n2, and\ngood n1 = nk, we have material balance for good n1 = nk. Since goods are in material balance and producers are feasible, (V \u2032,E \u2032) is feasible.\nThe surpluses of agents not in K are unaffected by the transformation. By definition of an open, reverse-surplus sequence, every agent in K obtains no lower surplus at p after the transformation, and agent nk\u22121 obtains strictly higher surplus at p. Because the value of a feasible allocation is the sum of agent surpluses at any particular prices (Lemma 22), we must then have value((V \u2032,E \u2032)) > value((V \u2217,E\u2217)). But this contradicts the optimality of (V \u2217,E\u2217), so the assumption that K exists must be false. \u2737\nLemma 19 If the price of good nk increases in Procedure No Input Complementarities Equilibrium, then there there exists a finite closed, reverse-surplus sequence (n1, . . . ,nk) at prices p just before the price increase."}, {"heading": "Proof.", "text": "We show how to construct the desired closed, reverse-surplus sequence, referring to the conditions in the definition, and to the steps in Procedure No Input Complementarities Equilibrium. The price increase of nk occurred in one of Steps 2(a)\u20132(e), triggered by agent nk\u22121. Since the step was triggered, nk\u22121 would obtain strictly better surplus by reversing its allocation at p, as specified in the conditions 3(a), 3(b), or 4(a)\u20134(c). If the price of nk was increased in Step 2(a) or 2(c), then we have the desired closed, reverse-surplus sequence, with nk\u22121 \u2208 (C \\V \u2217)\u222a (\u03a00 \u2229V \u2217) and k\u2212 1 = 1. Otherwise, the price or nk was increased in Step 2(b), 2(d), or 2(e), with nk\u22121 \u2208 \u03a01\u222a (C\u2229V \u2217) and k\u22121 > 2. In this case, we let nk\u22122 be the good that also matched the condition of the step.\nIf the price of nk\u22122 increased, then Procedure No Input Complementarities Equilibrium ensures that we can find an agent nk\u22123 matching one of the Conditions 3(a), 3(b), or 4(a)\u20134(c). If, on the other hand, p(nk\u22122) = 0, then because producers have positive costs and consumers have positive values, we can also find such an agent nk\u22123. If we find an agent that corresponds to condition 3(a) or 3(b), then k\u2212 3 = 1 and we are done. Otherwise, we can find a good nk\u22124, as we did nk\u22122, and continue in the same manner.\nClearly, this process constructs an open, reverse-surplus sequence. Now, we must show that this process of selecting vertices eventually selects an element n1 \u2208 (C \\V \u2217)\u222a (\u03a00 \u2229V \u2217). Since (V,E) is finite, and since by Lemma 18 there can be no cycles in any open, reverse-surplus sequence, we must eventually find a n1 \u2208 (C \\V \u2217)\u222a (\u03a00 \u2229V \u2217) to give us a closed, reverse-surplus sequence. \u2737\nLemma 20 Procedure No Input Complementarities Equilibrium terminates.\nProof. Assume, contrary to which we wish to prove, that the procedure does not terminate and that the price of good g increases an infinite number of times. Consider a cycle K = (n1 = g, . . . ,nk = g) of vertices ni \u2208V , k \u2265 3 such that:\n1. \u3008ni,ni+1\u3009 \u2208 E or \u3008ni+1,ni\u3009 \u2208 E for all i \u2208 {1, . . . ,k\u22121}.\n2. For all i \u2208 {2, . . . ,k\u22121}, ni 6= g.\n3. For all i \u2208 {3, . . . ,k}, if ni \u2208 G, the price increase of good ni occurred in one of the Steps 2(b), 2(d), or 2(e) in the procedure, and agent ni\u22121 and good ni\u22122 also matched the condition in that step. Furthermore, the price increase of ni\u22122, triggered by agent ni\u22123 and good ni\u22124, caused the need for the price increase of good ni.\nBecause the price of g increases an infinite number of times, such a cycle must exist. Let p be prices such that p(n1) is as it was when n1 and agent n2 triggered the price increase of n3, and for all ni \u2208 G and 1 < i < k, p(ni) is as it was just after the it was increased, as triggered by agent ni\u22121 and good ni\u22122. The price of all other goods is an arbitrary nonnegative number.\nBy the way we constructed p, and by the way prices are increased in the procedure, K must be an open, reverse-surplus sequence. But by Lemma 18, such a K cannot exist. Therefore, the procedure terminates. \u2737\nTheorem 1 Competitive equilibria exist for any network with no input complementarities.\nProof. We show that Procedure No Input Complementarities Equilibrium terminates at prices p with every agent obtaining its maximum surplus according to (V \u2217,E\u2217) . Since (V \u2217,E\u2217) is efficient, it is also feasible, giving us a competitive equilibrium at prices p.\nBy Lemma 20, the procedure terminates. Clearly, when the procedure terminates, agents in \u03a01 \u222a (\u03a00 \u2229V \u2217)\u222a (C \\V \u2217) optimize according to (V \u2217,E\u2217). It remains to show the same for (C \u2229 V \u2217)\u222a (\u03a00 \\V \u2217). Assume, contrary to which we wish to prove, that some a \u2208 (C\u2229V \u2217)\u222a (\u03a00 \\V \u2217) does not optimize according to (V \u2217,E\u2217).\nConsider the case where a \u2208 (C \u2229V \u2217) and \u3008g,a\u3009 \u2208 E\u2217. Since the algorithm guarantees that a does not prefer any other good g\u2032 to g at prices p, it must be that p(g) > vc(g). Let p\u2032 be the prices immediately before the price of g rose above vc(g) and p\u2032\u2032 be the prices immediately after. By Lemma 19, there is a closed, reverse-surplus sequence (n1, . . . ,nk = g) at prices p\u2032. At p\u2032\u2032, the conditions of the closed, reverse-surplus sequence hold, except that the surplus condition in 4(a), 4(b), or 4(c) that applies to nk\u22121 becomes non-strict. However, a obtains a strictly negative surplus at p\u2032\u2032. Denote a as nk+1.\nWe can create an alternate, feasible solution (V \u2032,E \u2032) as in the proof of Lemma 18 by adding edges \u3008ni,ni+1\u3009 that are in E \\E\u2217, and removing such edges that are in E\u2217, for all i \u2208 {1, . . . ,k}. The surpluses of agents not in K are unaffected by the transformation. Every agent in (a1, . . . ,nk\u22121) obtains no lower surplus at p\u2032\u2032 after the transformation. Agent a = nk obtains zero surplus after the transformation, which is higher than the negative surplus it had before. Because the value of a feasible allocation is the sum of agent surpluses at any particular prices (Lemma 22), we must have value((V \u2032,E \u2032)) > value((V \u2217,E\u2217)). But this contradicts the optimality of (V \u2217,E\u2217), so it must be that p(g) \u2264 vc(g) and a is obtaining its maximum surplus at p in (V \u2217,E\u2217).\nIf, on the other hand, a \u2208 (\u03a00 \\V \u2217), and \u3008a,g\u3009 \u2208 E . It must be that \u03baa < p(g). We can use the same line of proof as the case of C\u2229V \u2217 to show that (V \u2217,E\u2217) has a suboptimal value, providing a contradiction. Thus a must optimize according to (V \u2217,E\u2217) at p.\nThus we have shown that the algorithm terminates with all agents optimizing according to (V \u2217,E\u2217) at p. Thus p supports a competitive equilibrium for allocation (V \u2217,E\u2217). \u2737"}, {"heading": "A.2 Proof of Theorem 2", "text": "Given a polytree (V,E) and an efficient allocation (V \u2217,E\u2217), we present Procedure Polytree Equilibrium that constructs lower bounds p\u2212(g) and upper bounds p\u2212(g) on the prices of all goods g, and in turn uses these bounds to construct prices p for all goods. Then we prove that the resulting prices are in fact competitive equilibrium prices that support (V \u2217,E\u2217).\nObserve that, for the purposes of competitive equilibrium pricing, we can treat a consumer c that wishes to obtain one good from the set Gc as a consumer that desires a single good gc with value vc(gc) = vc = maxg\u2208Gc vc(g), along with additional producers. For each g \u2208 Gc we create a producer \u03c0 with output gc, input g, and with \u03ba\u03c0 = vc \u2212 vc(g). Thus, without loss of generality, we consider only consumers with preferences for single goods. We denote as gc the good that consumer c desires and denote as vc the value c has for gc.\nWe refer to all n\u2032 \u2208 V such that either \u3008n,n\u2032\u3009 \u2208 E or \u3008n\u2032,n\u3009 \u2208 E as the neighbors of a vertex n \u2208V . We use \u22a5 to refer to a null vertex that is not a neighbor of any other vertex."}, {"heading": "Polytree Equilibrium:", "text": "1. For each g \u2208 G, p\u2212(g) \u2190 0 and p\u2212(g) \u2190 \u221e.\n2. For each connected subgraph (V\u0302 , E\u0302) \u2286 (V,E), select a g \u2208 G\u2229 V\u0302 arbitrarily: Perform Set Bounds(g, \u22a5). p(g) \u2190 p\u2212(g).\nSet Bounds recursively visits the vertices, updating the price bounds in postorder (i.e., as the recursion unwinds) and setting prices to either the lower or upper bounds. Because (V,E) is a polytree, the procedure sets the price for each good exactly once.\nIn Set Bounds(n, r), if n \u2208 A, then r \u2208 G and the procedure either updates p\u2212(r) or p\u2212(r) after the bounds for all neighbors of n, other than r, have been fixed. If it updates p\u2212(r), it does so in such a way that if n /\u2208V \u2217 then n, if active, would get a nonpositive surplus for any p(r) \u2265 p\u2212(r), given the bounds on the other neighbors of n, and if n \u2208V \u2217 then n, if active, would get a nonnegative surplus for any p(r) \u2265 p\u2212(r), given the bounds on the other neighbors of n. Since p\u2212(r) only increases (Steps 2, 4(b), and 5(c)), this property is maintained. Similarly, if Set Bounds(n, r) updates p\u2212(r), it does so in such a way that if n /\u2208 V \u2217 then n, if active, would get a nonpositive surplus for any p(r) \u2264 p\u2212(r), given the bounds on the other neighbors of n, and if n \u2208 V \u2217 then n, if active, would get a nonnegative surplus for any p(r) \u2264 p\u2212(r), given the bounds on the other neighbors of n. Since p\u2212(r) only decreases (Steps 3, 4(c), and 5(b)), this property is maintained.\nSet Bounds(n, r):\n1. For each neighbor z of n such that z 6= r, perform Set Bounds(z, n).\n2. If n \u2208C \\V \u2217, p\u2212(r) \u2190 max(vn, p\u2212(r)).\n3. Else if n \u2208C\u2229V \u2217, p\u2212(r) \u2190 min(vn, p\u2212(r)).\n4. Else if n \u2208 \u03a0\\V \u2217 then,\n(a) For each neighbor g of n such that g 6= r If g is an input of n\np(g) \u2190 p\u2212(g). Else g is the output of n,\np(g) \u2190 p\u2212(g).\n(b) If r is an input of n, and with the output, gn, of n\np\u2212(r) \u2190 max(p\u2212(r), p\u2212(gn)\u2212\u2211\u3008g,n\u3009\u2208E, g6=r p\u2212(g)\u2212\u03ban).\n(c) Else r is the output of n, p\u2212(r) \u2190 min(p\u2212(r), \u2211\u3008g,n\u3009\u2208E p\u2212(g)+ \u03ban).\n5. Else if n \u2208 \u03a0\u2229V \u2217 then,\n(a) For each neighbor g of n such that g 6= r, If g is an input of n,\np(g) \u2190 p\u2212(g). If g is the output of n,\np(g) \u2190 p\u2212(g).\n(b) If r is an input of n, and with the output, gn, of n),\np\u2212(r) \u2190 min(p\u2212(r), p\u2212(gn)\u2212\u2211\u3008g,n\u3009\u2208E, g6=r p\u2212(g)\u2212\u03ban).\n(c) Else r is the output of n, p\u2212(r) \u2190 max(p\u2212(r), \u2211\u3008g,n\u3009\u2208E p\u2212(g)+ \u03ban)\nLemma 21 Procedure Polytree Equilibrium computes price bounds such that p\u2212(g) \u2264 p\u2212(g) for all goods g \u2208 G.\nProof. Assume, contrary to which we wish to prove, that at some state there is some g\u0302 \u2208 G such that p\u2212(g\u0302) > p\u2212(g\u0302). Assume further that g\u0302 is the first such good visited.\nWe say that agent a constrained p\u2212(g) if Set Bounds(a, g) was the last to change p\u2212(g). Similarly, we say that agent a constrained p\u2212(g) if Set Bounds(a, g) was the last to change p\u2212(g).\nRecall from Lemma 22 that the value of any feasible allocation is equal to the sum of the agent surpluses at any particular prices. We show how to transform (V \u2217,E\u2217) to an alternate feasible allocation (V \u2032,E \u2032) and compute alternate prices p to show that the sum of surpluses in (V \u2032,E \u2032) is greater than in (V \u2217,E\u2217).\nFirst, initialize (V \u2032,E \u2032) = (V \u2217,E\u2217) and for each good g \u2208 G initialize p(g) = 0. Next, set p(g\u0302) = p\u2212(g\u0302). Then we recursively change prices and the allocation for a portion of the subtree rooted at g\u0302. Perform Lower Bound(a, g\u0302) for the agent a that constrained p\u2212(g\u0302) and perform Upper Bound(a, g\u0302) for the agent that constrained p\u2212(g).\nThroughout the transformation, we perform Lower Bound(a\u0303, g\u0303) iff we visit g\u0303 and agent a\u0303 constrained p\u2212(g\u0303). Similarly, we perform Upper Bound(a\u0303, g\u0303) iff we visit g\u0303 and agent a\u0303 constrained p\u2212(g\u0303). The following describes these portions of the transformation.\nLower Bound(a, g):\n1. If a \u2208 \u03a0\\V \u2217, it must be that g is an input of a (because a constrained p\u2212(g)). For each neighbor g\u2032 6= g of a:\n(a) If g\u2032 is an input of a, p(g\u2032) \u2190 p\u2212(g\u2032), perform Upper Bound(a\u2032, g\u2032) for the agent a\u2032 that constrained p\u2212(g\u2032).\n(b) Else (g\u2032 is an output of a), p(g\u2032) \u2190 p\u2212(g\u2032), perform Lower Bound(a\u2032, g\u2032) for the agent a\u2032 that constrained p\u2212(g\u2032).\n2. Else if a \u2208 \u03a0\u2229V \u2217, it must be that g is an output of a (because a constrained p\u2212(g)). For each input g\u2032 of a:\np(g\u2032) \u2190 p\u2212(g\u2032), perform Lower Bound(a\u2032, g\u2032) for the agent a\u2032 that constrained p\u2212(g\u2032).\n3. If a \u2208V \u2217, remove a and all incident edges from (V \u2032,E \u2032).\n4. Else if a \u2208V \\V \u2217, add a and all incident edges to (V \u2032,E \u2032).\nUpper Bound(a, g):\n1. If a \u2208 \u03a0\\V \u2217, it must be that g is an output of a (because a constrained p\u2212(g)). For each input g\u2032 of a:\np(g\u2032) \u2190 p\u2212(g\u2032), perform Upper Bound(a\u2032, g\u2032) on the agent a\u2032 that constrained p\u2212(g\u2032).\n2. If a \u2208 \u03a0\u2229V \u2217, it must be that g is an input of a (because a constrained p\u2212(g)). For each neighbor g\u2032 6= g of a:\n(a) If g\u2032 is an input of a, p(g\u2032) \u2190 p\u2212(g\u2032), perform Lower Bound(a\u2032, g\u2032) for the agent a\u2032 that constrained p\u2212(g\u2032).\n(b) Else (g\u2032 is an output of a), p(g\u2032) \u2190 p\u2212(g\u2032), perform Upper Bound(a\u2032, g\u2032) for the agent a\u2032 that constrained p\u2212(g\u2032).\n3. If a \u2208V \u2217, remove a and all incident edges from (V \u2032,E \u2032).\n4. Else if a \u2208V \\V \u2217, add a and all incident edges to (V \u2032,E \u2032).\nObserve that, because (V,E) is a polytree, a vertex can be visited at most once by either Upper Bound or Lower Bound.\nNow we show that (V \u2032,E \u2032) is feasible. Consumers are always feasible. Producers are feasible because we add or remove all incident edges when we add or remove a producer, respectively. We now prove that every g \u2208 G is in material balance in (V \u2032,E \u2032).\nConsider good g\u0302 for which p\u2212(g\u0302) > p\u2212(g\u0302). Lower Bound(a, g\u0302) is performed only if agent a constrained p\u2212(g\u0302), which occurred in 2, 4(b), or 5(c) of Set Bounds(a, g\u0302). Therefore Lower Bound(a, g\u0302) either adds \u3008g\u0302,a\u3009 \u2208 E \\E\u2217 or else removes \u3008a, g\u0302\u3009 \u2208 E\u2217. Upper Bound(a, g\u0302) is performed only if a constrained p\u2212(g\u0302), which occurred in 3, 4(c), or 5(b) of Set Bounds(a, g\u0302). Therefore Upper Bound(a, g) either adds \u3008a, g\u0302\u3009 \u2208 E \\E\u2217 or else removes \u3008g\u0302,a\u3009 \u2208 E\u2217. For any possible combination, material balance is maintained for g\u0302.\nNow consider any other good g 6= g\u0302. If g is visited by Lower Bound(a, g), then p(g) was set to p\u2212(g) in one of the following ways, immediately prior:\n1. p(g) was set to p\u2212(g) by 1(b) of Lower Bound(a\u0303, g\u0303), for some other agent a\u0303 \u2208 \u03a0\\V \u2217 and other good g\u0303. In this case, g is an output of a\u0303 so \u3008a\u0303,g\u3009 \u2208 E \\E\u2217 was added to (V \u2032,E \u2032) in 4 of Lower Bound(a\u0303, g\u0303).\n2. p(g) was set to p\u2212(g) by 2 of Lower Bound(a\u0303, g\u0303), for some other agent a\u0303 \u2208 \u03a0\u2229V \u2217 and other good g\u0303. In this case g is an input of a\u0303 so \u3008g, a\u0303\u3009 \u2208 E\u2217 was removed from (V \u2032,E \u2032) in 3 of Lower Bound(a\u0303, g\u0303).\n3. p(g) was set to p\u2212(g) by 2(a) of Upper Bound(a\u0303, g\u0303), for some other agent a\u0303 \u2208 \u03a0\u2229V \u2217 and other good g\u0303. In this case case g is an input of a\u0303 so \u3008g, a\u0303\u3009 \u2208 E\u2217 was removed from (V \u2032,E \u2032) in 3 of Upper Bound(a\u0303, g\u0303).\nOne of the following operations occurred in Lower Bound(a, g):\n1. If a constrained p\u2212(g) in 2 or 4(b) of Set Bounds(a, g), then \u3008g,a\u3009 \u2208 E \\E\u2217 is added to (V \u2032,E \u2032) in 4 of Lower Bound(a, g).\n2. If agent a constrained p\u2212(g) in 5(c) of Set Bounds(a, g), then \u3008a,g\u3009 \u2208 E\u2217 is removed from (V \u2032,E \u2032) in 3 of Lower Bound(a, g).\nFor any possible combination of additions or removals of edges incident on g prior to, and in Lower Bound(a, g), material balance is maintained for g. We can show a similar result if g is visited by Upper Bound(a, g). Hence we have established feasibility of (V \u2032,E \u2032).\nNow we show that for any agent a \u2208 A, \u03c3(a,(V \u2032,E \u2032), p) \u2265 \u03c3(a,(V \u2217,E\u2217), p), and there is some agent a\u2032 \u2208 A such that \u03c3(a\u2032,(V \u2032,E \u2032), p) > \u03c3(a\u2032,(V \u2217,E\u2217), p).\nFor any agent a not visited in the construction of (V \u2032,E \u2032), \u03c3(a,(V \u2032,E \u2032), p) = \u03c3(a,(V \u2217,E\u2217), p), because a has the same allocation as in (V \u2217,E\u2217).\nConsider a\u2032 visited by Upper Bound(a\u2032, g\u0302). Because a\u2032 was thus visited, a\u2032 constrained p\u2212(g\u0302). Upper Bound(a\u2032, g\u0302) sets the prices of all other neighbor goods g 6= g\u0302 to the prices used to compute p\u2212(g\u0302) in Set Bounds(a\u2032, g\u0302). The prices of these neighboring goods were computed such that if a\u2032 \u2208V \u2217, a\u2032 would get negative surplus at any price for g\u0302 above p\u2212(g\u0302) and if a\u2032 \u2208V \\V \u2217 it would get a positive surplus for at any price for g\u0302 above p\u2212(g\u0302). But, in the alternate prices we computed, p(g\u0302) = p\u2212(g\u0302), and we assume p\u2212(g\u0302) > p\u2212(g\u0302). Since a\u2032 is in V \u2032 if and only if it is not in V \u2217, we have \u03c3(a\u2032,(V \u2032,E \u2032), p) > \u03c3(a\u2032,(V \u2217,E\u2217), p).\nNow consider any other a \u2208 A, a 6= a\u2032, visited in the construction of (V \u2032,E \u2032). If a is visited by Upper Bound(a, g), then p(g) = p\u2212(g) and a must have constrained p\u2212(g). If a \u2208 C, then Set Bounds(a, g) set p\u2212(g) such that va \u2212 p\u2212(g) = 0. If a \u2208 \u03a0, Upper Bound(a, g) sets the prices of the other goods neighboring a to the prices used to compute p\u2212(g) in Set Bounds(a, g). These neighboring prices are such that if a were active and feasible, it would get zero surplus when\np(g) = p\u2212(p). Thus \u03c3(a,(V \u2032,E \u2032), p) = \u03c3(a,(V \u2217,E\u2217), p). If, on the other hand, a is visited by Lower Bound, then p(g) = p\u2212(g) and a must have constrained p\u2212(g). By a similar argument we used with Upper Bound, a gets a zero surplus when p(g) = p\u2212(g). Again, this gives \u03c3(a,(V \u2032,E \u2032), p) = \u03c3(a,(V \u2217,E\u2217), p).\nWe have shown that for any agent a \u2208 A, \u03c3(a,(V \u2032,E \u2032), p) \u2265 \u03c3(a,(V \u2217,E\u2217), p), and there is some agent a\u2032 \u2208 A such that \u03c3(a\u2032,(V \u2032,E \u2032), p) > \u03c3(a\u2032,(V \u2217,E\u2217), p). But then value((V \u2032,E \u2032)) > value((V \u2217,E\u2217)), which is a contradiction. Hence, the initial assumption that p\u2212(g\u0302) > p\u2212(g\u0302) must be false. But then p\u2212(g) \u2264 p\u2212(g) for all goods g.\n\u2737\nTheorem 2 Competitive equilibria exist for any polytree.\nProof. We show that agents optimize according to (V \u2217,E\u2217) at the prices p computed by procedure Polytree Equilibrium. Since (V \u2217,E\u2217) is feasible by definition, the resulting prices and allocation constitute a competitive equilibrium for (V,E).\nBecause the construction of p\u2212(g) ensures that it never decreases, Step 2 of Set Bounds ensures that every consumer c\u2208C\\V \u2217 optimizes if p(gc)\u2265 p\u2212(gc). Because p\u2212(gc)\u2264 p(c)\u2264 p\u2212(gc) (by construction of p and by Lemma 21), c then optimizes according to (V \u2217,E\u2217). By a similar argument, every c \u2208C\u2229V \u2217 optimizes according to (V \u2217,E\u2217).\nConsider a producer \u03c0 \u2208 \u03a0 \\V \u2217, visited by Set Bounds(\u03c0, g). If good g is an input of \u03c0, then 4(a) of Set Bounds(\u03c0, g) sets the price of every other neighbor good g\u2032 6= g of \u03c0 to the price bounds used to compute p\u2212(g) in Step 4(b) of Set Bounds(\u03c0, g). Moreover, p\u2212(g) is set to the smallest price such that \u03c0 could get a maximum surplus of zero, given the specified bounds of the other neighbor goods. Since p\u2212(g) could only increase subsequently, since p\u2212(g) \u2264 p(g) \u2264 p(g) (by the construction of p and by Lemma 21), and since the price of each good is set only once (because (V,E) is a polytree) \u03c0 cannot get a positive surplus at the prices set by Set Bounds(\u03c0, g). By a similar argument, if g is an output of \u03c0, then in Step 4(c) p\u2212(g) is set to the largest price such that \u03c0 would get at a maximum surplus of zero, given the prices set on the neighbor goods. Since again, p\u2212(g) \u2264 p(g) \u2264 p\u2212(g), p\u2212(g) only increases subsequently, and the price of each good is set only once, it must be that \u03c0 can get at most zero surplus. Thus \u03c0 optimizes according to (V \u2217,E\u2217). Symmetrically, we can see that every \u03c0 \u2208 \u03a0\u2229V \u2217 optimizes according to (V \u2217,E\u2217).\nWe have shown that all agents optimize according to (V \u2217,E\u2217) at p, hence we have shown that a competitive equilibrium exists for polytree (V,E). \u2737"}, {"heading": "A.3 Proof of Theorem 3", "text": "Lemma 22 The value of a feasible allocation (V \u2032,E \u2032), at any prices p, can be expressed as:\nvalue((V \u2032,E \u2032)) = \u2211 a\u2208A \u03c3(a,(V \u2032,E \u2032), p). (1)\nProof. Equation (1) expands to:\nvalue((V \u2032,E \u2032)) = \u2211 c\u2208C\n(\nvc((V \u2032,E \u2032))\u2212 \u2211\n\u3008g,c\u3009\u2208E \u2032 p(g)\n)\n+ \u2211 \u03c0\u2208\u03a0\n(\n\u2211 \u3008\u03c0,g\u3009\u2208E \u2032 p(g)\u2212 \u2211 \u3008g,\u03c0\u3009\u2208E \u2032 p(g)\u2212\u03ba\u03c0((V \u2032,E \u2032))\n)\n.\nSince all goods are in material balance in a feasible allocation, all the price terms cancel out. We are left with\n\u2211 c\u2208C vc((V \u2032,E \u2032))\u2212 \u2211 \u03c0\u2208\u03a0 \u03bas((V \u2032,E \u2032)),\nwhich is the original formula for the value of a solution (Definition 1). \u2737\nTheorem 3 If (V \u2032,E \u2032) is a \u03bb-\u03b4-competitive equilibrium for (V,E) at some prices p, then (V \u2032,E \u2032) is a feasible allocation with a nonnegative value that differs from the value of an efficient allocation by at most \u2211\u03c0\u2208\u03a0[\u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s]+ |C|\u03b4b.\nProof. We refer to the four conditions for a \u03bb-\u03b4-competitive equilibrium (Definition 4). Let (V \u2217,E\u2217) be an efficient allocation for (V,E).\nConditions (3) and (4) imply that (V \u2032,E \u2032) is feasible. Recall the formula for the value of a feasible allocation from Equation (1). Since (V \u2032,E \u2032) and (V \u2217,E\u2217) are both feasible, we can express their values as\nvalue((V \u2032,E \u2032)) = \u2211 a\u2208A \u03c3(a,(V \u2032,E \u2032), p), (2)\nvalue((V \u2217,E\u2217)) = \u2211 a\u2208A \u03c3(a,(V \u2217,E\u2217), p). (3)\nFor all c \u2208 C, by Condition (2), \u03c3(c,(V \u2032,E \u2032), p) \u2265 Hc(p)\u2212 \u03b4b. Because no allocation is any better for an agent than its optimal allocation, \u03c3(c,(V \u2217,E\u2217), p) \u2264 Hc(p). Thus,\n\u03c3(c,(V \u2217,E\u2217), p)\u2212\u03c3(c,(V \u2032,E \u2032), p) \u2264 \u03b4b. (4)\nFor all \u03c0 \u2208 \u03a0, by Condition (3), \u03c3(\u03c0,(V \u2032,E \u2032), p) \u2265 H\u03c0(p)\u2212 (\u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s). Because no\nallocation is any better for an agent than its optimal allocation, \u03c3(\u03c0,(V \u2217,E\u2217), p) \u2264 H\u03c0(p). Thus,\n\u03c3(\u03c0,(V \u2217,E\u2217), p)\u2212\u03c3(\u03c0,(V \u2032,E \u2032), p) \u2264 \u2211 \u3008g,\u03c0\u3009\u2208E \u03bbg\u03c0 + \u03b4s. (5)\nEquations (2)\u2013(5) together imply that value((V \u2217,E\u2217))\u2212 value((V \u2032,E \u2032)) \u2264 \u2211\u03c0\u2208\u03a0[\u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s] + |C|\u03b4b. Condition (1) implies that each sum term in Equation (2) is nonnegative, hence value((V \u2032,E \u2032)) \u2265 0. As noted, (V \u2032,E \u2032) is feasible.\n\u2737"}, {"heading": "A.4 Proof of Theorem 5", "text": "In proving the theorem, we refer to the C-level and S-level of producers in a network, as defined in the beginning of Section A.\nA task dependency network (V,E) is characterized by the following parameters:\n\u2022 \u03c6: the maximum C-level of any producer in the network,\n\u2022 \u03d2: the maximum number of input goods for any producer,\n\u2022 R: the maximum consumer value, max\u3008g,c\u3009\u2208E|c\u2208C vc(g).\nLemma 23 In a run of SAMP-SB for network (V,E), no agent places a buy offer above R + 2\u03c6\u03b4b.\nProof. Consumers never offer above their valuation, which is bounded by R. We prove by induction on the producer C-level that no producer at C-level k places a buy offer above R + 2k\u03b4b.\nSuppose that a producer \u03c0 at C-level one places an offer to buy an input g at price \u03b2 > R + 2\u03b4b. Since it always increments buy offers by \u03b4b, this means at some previous time it submitted a buy offer for g at price R+\u03b4b < \u03b2\u2032 \u2264 R+2\u03b4b. At that time, it must have been losing g, else it would not be bidding. But then the ask quote of g must have been greater than R, and \u03c0 then offered greater than R for its output. Since only a consumer will offer to buy for the output of a producer at C-level one, \u03c0 must lose its output. Because offers are nondecreasing, this situation is permanent, and hence \u03c0 never again raises an input offer, contrary to our supposition. Thus a C-level one producer will never place a buy offer above R + 2\u03b4b.\nFor the inductive step, we assume that no producer at any C-level i, where i < k, places a buy offer above R + 2i\u03b4b. Thus, no producer at C-level k can win its output offer for more than R + 2(k\u2212 1)\u03b4b. Applying reasoning analogous to the base case (C-level one), we see that no producer at C-level k places a buy offer above R + 2k\u03b4b. Because k \u2264 \u03c6 for all producers, the lemma follows immediately. \u2737\nLemma 24 No agent places more than \u03d2(R + 2\u03c6\u03b4b)/\u03b4b + \u03d2 buy offers.\nProof. Since consumers offer at most R and increase offers by at least \u03b4b, they place offers at most R/\u03b4b times. A producer initially places at most \u03d2 buy offers for its inputs. According to Lemma 23 and the producer bidding policy, a producer subsequently offers no higher than R+2\u03c6\u03b4b in increments of \u03b4b for each of a maximum of \u03d2 inputs. \u2737\nTheorem 5 SAMP-SB reaches quiescence after a finite number of bids have been placed.\nProof. By Lemma 24, a finite number of buy offers are placed. We need show only that producers place a finite number of sell (output) offers to establish that a finite number of total bids are placed.\nA producer will change its output offer only if: 1) the price of an input changes, 2) the ask price of an input changes, or 2) it loses an an offer for a good that it was previously winning. An unchanged input offer can switch between winning and losing at most once without the price changing. Similarly, an unchanged input offer can switch winning state at most once without the ask price changing. Hence, it is sufficient to show that the price and ask price of each of a producer\u2019s\ninput goods change at most a finite number of times. We prove by induction on the producer S-level that the price and ask quotes of an input good to a producer at S-level k changes a finite number of times.\nOnly a producer with no input places an output offer for a input good g to a producer at S-level one, and producers with no input place only one offer each. Hence, the price or ask price of g change only in response to a change in a buy offer for g. But by Lemma 24, the number of buy offer changes for g is finite.\nNow assume that all producers at all S-levels less than k place a finite number of output offers. For a good g which is an input for a producer \u03c0 at S-level k, the number of output offer changes is finite. Again the number of input offers for g must be finite. Since the number of input and output offers for g is finite, \u03c0 places a finite number of output offers. \u2737"}, {"heading": "A.5 Proof of Theorem 8", "text": "In proving the theorem, we refer to the C-level of producers in a network, as defined in the beginning of Section A. For reference, quasi-quiescence is described in Definition 5.\nLemma 25 If a run of SAMP-SB is in a quasi-quiescent state during the time interval [t, t \u2032] then no inactive producer changes an offer for an input good in the time interval [t, t \u2032 + \u03b5], where \u03b5 is the smallest period of time an agent requires to update a bid in response to a price quote.\nProof. By definition of quasi-quiescence, during the interval [t, t \u2032], no consumer or active producer changes any offer. Thus, a simple induction on the C-level of the inactive producers shows that any producer that is inactive at time t would not win its output during [t, t \u2032], hence inactive producers remain inactive during this interval. But a producer that is inactive during [t, t \u2032] would not change its input offer during [t, t \u2032 + \u03b5]. \u2737\nLemma 26 If a run of SAMP-SB is in a quasi-quiescent during the time interval [t, t \u2032], then it is quasi-quiescent during the time interval [t, t \u2032 + \u03b5], where \u03b5 is the smallest period of time an agent requires to update a bid in response to a price quote.\nProof. Assume, contrary to that we wish to prove, that a run of SAMP-SB is quasi-quiescent during [t, t \u2032] but not during time [t \u2032, t \u2032+\u03b5]. Let a be a consumer or active producer that will change an offer in [t \u2032, t \u2032 + \u03b5].\nIf a is a consumer, then a would only change an offer if it lost some offer it was previously winning in quasi-quiescence. If a is a producer, it must be feasible, otherwise it would change its input offer (because it is active) violating quasi-quiescence. Since a is feasible, it would change an offer only if it loses an input it was previously winning, or the price of one of its inputs increases. In any of these cases, a either loses a buy offer it was previously winning, or the price of one of its buy offers increased. For one of these to occur, it must be that at time t \u2032\u2032 \u2208 [t, t \u2032], some agent either 1) changed its own winning output offer or 2) changed its input offer. But the definition of quasi-quiescence precludes #1, and Lemma 25 and the definition of quasi-quiescence preclude #2. This gives us a contradiction, proving the lemma. \u2737\nLemma 27 If a run of SAMP-SB is in a quasi-quiescent state at time t, then it is quasi-quiescent at all times t \u2032 > t.\nProof. By Lemma 26 we can conclude that we have quasi-quiescence in the interval [t, t + \u03b5], then further extend that interval by \u03b5, and so on indefinitely. \u2737\nLemma 28 If a run of SAMP-SB is in a quasi-quiescent at time t, then a producer that is inactive at time t is inactive at time t + \u03b5, and a producer that is active at time t is also inactive at time t + \u03b5, where \u03b5 is the smallest period of time an agent requires to update a bid in response to a price quote. Furthermore, p(g) does not change for any good g at time t + \u03b5\nProof. Since an agent cannot lower its offers, the only way for an inactive producer \u03c0 to become active is for some other agent to raise its buy offer. By Lemma 27 and the definition of quasiquiescence, only inactive producers will change any offers after t, and by Lemma 25 no inactive producer will change its input offers. But then \u03c0 remains inactive.\nSince offers do not decrease, an active producer \u03c0 can become inactive only by increasing its offer for its output. But \u03c0 will do this only if the prices on its inputs increase. Since we have a quasi-quiescent state, this can happen only if an inactive producer \u03c0\u2032 changes its offer for its output g. But since \u03c0\u2032 is inactive, a change to its offer for g can cause only \u03b1(g) to change. Since active producers are feasible (otherwise they would want to change their bids, violating quasi-quiescence), \u03c0 is not losing a buy offer for g at time t. Therefore, \u03c0 does not respond to changes in \u03b1(g), hence does not change its output offer and will remain active. \u2737\nTheorem 8 If a run of SAMP-SB reaches a quasi-quiescent state, then it remains in a quasiquiescent state. Furthermore, neither the allocation nor the prices p subsequently change.\nProof. The theorem follows directly from Lemmas 27 and 28. \u2737"}, {"heading": "A.6 Proof of Theorem 10", "text": "In proving the theorem, we refer to the C-level of producers in a network, as defined in the beginning of Section A.\nA given run of SAMP-SB in network (V,E) is characterized by the following parameters:\n\u2022 \u03c6: the maximum C-level of any producer in the network,\n\u2022 \u03d2: the maximum number of input goods for any producer,\n\u2022 R: the maximum consumer value, max\u3008g,c\u3009\u2208E|c\u2208C vc(g).\nTheorem 10 SAMP-SB reaches a quasi-quiescent state after a number of bids bounded by a polynomial of the size of the network and the value of the maximum consumer value have been placed by consumers and active producers.\nProof. SAMP-SB is guaranteed to reach a quasi-quiescent state (Theorem 5 and Observation 7). By Lemma 24, the number of buy offers is bounded by a polynomial in the value of R, hence we need only be concerned with the number of sell offers placed. Since the prices of buy offers increase by at least \u03b4b, a producer\u2019s perceived cost for any good must rise by at least \u03b4b, so will increase its\nsell offer by no less than \u03b4b. Also, a producer will increase its sell offer by no less than \u03b4s, as required by the auction. Hence, Lemma 23 implies that an active producer will become permanently inactive after it places at most (R + 2\u03c6\u03b4b)/[max(\u03b4b, \u03b4s)] output offers. \u2737"}, {"heading": "A.7 Proof of Theorem 11", "text": "In proving the theorem, we refer to the conditions for a \u03bb-\u03b4-competitive equilibrium (Definition 4).\nLemma 29 When SAMP-SB reaches quiescence in network (V,E) then each consumer obeys the \u03bb-\u03b4-competitive equilibrium conditions (Conditions (1) and (2)).\nProof. Since each consumer maintains at most a single winning offer for a good that gives it nonnegative surplus, it obeys Condition (1).\nLet the final prices and allocation be p and (V \u2032,E \u2032), respectively. Assume, contrary to Condition (2), that \u03c3(c,(V \u2032,E \u2032), p) < Hc(p)\u2212 \u03b4b for some consumer c. Let g\u2217 be a surplus-maximizing good for c at p.\nIf c does not buy a good, then p(g\u2217)+ \u03b4b < vc(g\u2217) (otherwise it would have placed and won an offer for g\u2217) and \u03c3(c,(V \u2032,E \u2032), p) = 0. Noting also that Hc(p) = vc(g\u2217)\u2212 p(g\u2217), algebraic manipulation gives us \u03c3(c,(V \u2032,E \u2032), p) > Hc(p)\u2212\u03b4b, which is a contradiction.\nThus, c buys one good g\u2032 such that\nvc(g \u2032)\u2212 p(g\u2032) < vc(g \u2217)\u2212 p(g\u2217)\u2212\u03b4b. (6)\nLet p\u0302(g\u2217) and p\u0302(g\u2032) be the prices for g\u2217 and g\u2032 when c placed its final offer for g\u2032. Since c offers p\u0302(g\u2032)+ \u03b4b for g\u2032, and since c won this offer at p(g\u2032), we have\np\u0302(g\u2032)+ \u03b4b \u2265 p(g\u2032). (7)\nSince prices do not decrease, we have\np\u0302(g\u2217) \u2264 p(g\u2217). (8)\nSubstituting Equations (7) and (8) into the left and right sides, respectively, of Equation (6) gives us\nvc(g \u2032)\u2212 (p\u0302(g\u2032)+ \u03b4b) < vc(g\u2217)\u2212 (p\u0302(g\u2217)+ \u03b4b).\nBut the consumer bidding policy specifies that c would have bid for g\u2217, rather than g\u2032 at prices p\u0302, which is a contradiction. Thus each consumer obeys Condition (2). \u2737\nLemma 30 If SAMP-SB reaches quiescence in network (V,E) such that no inactive producer buys a positive-price input, then each producer obeys the \u03bb-\u03b4-competitive equilibrium conditions (Conditions (1) and (3)), with \u03bbg\u03c0 = max(\u03b1(g)\u2212 p(g), \u03b4b).\nProof. The bidding policy ensures that each producer \u03c0 sells its output g\u03c0 only at a nonnegative surplus, and the lemma conditions directly imply that \u03c0 has zero surplus if it does not sell \u03c0. Thus \u03c0 obeys Condition (1).\nThe producer bidding policy guarantees that \u03c0 is feasible in quiescence.\nLet the final prices be p and allocation be (V \u2032,E \u2032). If H\u03c0(p) > \u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s in quiescence,\nthen H\u03c0(p) = p(g\u03c0)\u2212\u2211\u3008g,\u03c0\u3009\u2208E p(g) > \u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 +\u03b4s. Thus p(g\u03c0) > \u2211\u3008g,\u03c0\u3009\u2208E p(g)+\u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s. The producer bidding policy ensures that \u03c0 offers no more than \u2211\u3008g,\u03c0\u3009\u2208E p(g)+ \u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s for g\u03c0, so it must be winning g\u03c0 at a profit. Thus \u03c3(\u03c0,(V \u2032,E \u2032), p) = H\u03c0(p) and Condition (3) holds. If instead H\u03c0(p) \u2264 \u2211\u3008g,\u03c0\u3009\u2208E \u03bb g \u03c0 + \u03b4s, then since \u03c3(\u03c0,(V \u2032,E \u2032), p) \u2265 0, Condition (3) holds. \u2737\nTheorem 11 The prices and allocation determined in quiescence by the SAMP-SB protocol is a \u03bb-\u03b4-competitive equilibrium, with \u03bbg\u03c0 = max(\u03b1(g)\u2212 p(g), \u03b4b), iff no inactive producer buys any positive-price input.\nProof. Case only if: Condition (1) of \u03bb-\u03b4-competitive equilibrium (Definition 4) fails if an inactive producer buys any positive-price input.\nCase if: Lemmas 29 and 30 show that the consumers and producers, respectively, obey the \u03bb-\u03b4competitive equilibrium conditions (Conditions (1)\u2013(3)). The (M+1)st-price auction rules ensure Condition (4). All conditions of \u03bb-\u03b4-competitive equilibrium are met. \u2737"}, {"heading": "A.8 Proof of Theorem 12", "text": "In proving the theorem, we refer to the conditions for a \u03bb-\u03b4-competitive equilibrium (Definition 4).\nLemma 31 If \u03b1(g)\u2212 p(g) > \u03b4b for any good g in a quiescent state of SAMP-SB for network (V,E), then no agent wins an offer for g.\nProof. Assume, contrary to which we wish to prove, that \u03b1(g)\u2212 p(g) > \u03b4b and some agent is winning an offer for g, in quiescence of SAMP-SB. Either a buy offer or a sell offer sets \u03b1(g).\nCase 1: An agent sets \u03b1(g) with a buy offer. According to the SAMP-SB bidding policies, an agent will increase a buy offer only if it is losing that offer. An agent will win any offer for g at a price above p(g). A producer increases its buy offer in increments of \u03b4b and a consumer offers at most p(g)+ \u03b4b. In either case, an agent will place a buy offer no higher than p(g)+ \u03b4b for g. But then \u03b1(g) \u2264 p(g)+ \u03b4b, which is a contradiction.\nCase 2: An agent sets \u03b1(g) with a sell offer. As with Case 1, there are no buy offers higher than p(g)+ \u03b4b, hence every buy offer is strictly below \u03b1(g). Recall that, if there are M sell offers, the Mth highest offer determines \u03b1(g). Then since there are no buy offers at or above \u03b1(g), it must be that all sell offers are at or above \u03b1(g). But then all sell offers are strictly above all buy offers and no agent wins an offer for g, which is a contradiction.\nSince each case gives us a contradiction, it must be the case that no agent wins an offer for g when \u03b1(g)\u2212 p(g) > \u03b4b. \u2737\nLemma 32 If (V \u2032,E \u2032) is in \u03bb-\u03b4-competitive equilibrium at prices p, in quiescence of SAMP-SB for network (V,E), then there exist prices p\u2032 such that (V \u2032,E \u2032) is also in \u03bb-\u03b4-competitive equilibrium at p\u2032, with \u03bbg\u03c0 = \u03b4b for all producers \u03c0 and goods g.\nProof. We specify p\u2032 as follows: if \u03b1(g) > p(g)+ \u03b4b, then p\u2032(g) = \u03b1(g), otherwise p\u2032(g) = p(g). We will show that all the conditions of \u03bb-\u03b4-competitive equilibrium hold with \u03bbg\u03c0 = \u03b4b. Because we are considering the same allocation, the goods are still in material balance so Condition 4 still holds at p\u2032.\nConsider an agent a such that p\u2032(g) = p(g) for all adjacent goods g. Clearly, Ha(p\u2032) = Ha(p) and \u03c3(a,(V \u2032,E \u2032), p\u2032) = \u03c3(a,(V \u2032,E \u2032), p). We then have \u03c3(a,(V \u2032,E \u2032), p\u2032) \u2265 0 (Condition 1), and the surplus bound is met for consumers (Condition 2) since these hold at p. If a is a producer, then for any input g, \u03b1(g)\u2212 p(g) \u2264 \u03b4b since p\u2032(g) = p(g). Hence, we have the following bound on its perceived cost for g: p\u0302a(g) \u2264 p(g)+ \u03b4b. As a result, the producer bidding policies imply that \u03c3(a,(V \u2032,E \u2032), p)\u2265 H\u03c0(p)\u2212 (\u2211\u3008g,\u03c0\u3009\u2208E \u03b4b +\u03b4s). Therefore \u03c3(a,(V \u2032,E \u2032), p\u2032)\u2265 H\u03c0(p\u2032)\u2212 (\u2211\u3008g,a\u3009\u2208E \u03bb g a + \u03b4s) and and the producer surplus bound (Condition 3) holds with \u03bbg \u2032\na for all inputs g\u2032. Now consider an agent a adjacent to a good g with p\u2032(g) = \u03b1(g). By Lemma 31, a does not win an offer for g, so \u03c3(a,(V \u2032,E \u2032), p\u2032) = \u03c3(a,(V \u2032,E \u2032), p), implying \u03c3(a,(V \u2032,E \u2032), p\u2032) \u2265 0 (Condition 1). If a is a consumer, since p\u2032(g) \u2265 p(g), and since a does not win g, we have Ha(p\u2032) = Ha(p), so the surplus bound is met for consumers (Condition 2).\nIf a is a producer, then since it did not win g, it must not have won any good (according to the \u03bb-\u03b4-competitive equilibrium conditions and Theorem 11), implying \u03c3(a,(V \u2032,E \u2032), p\u2032) = 0. The producer bidding policy specifies that a offered a price at most \u03b2 = \u03baa +\u2211\u3008g\u2032,a\u3009\u2208E max(\u03b1(g\u2032), p(g\u2032)+ \u03b4b) + \u03b4s for its output ga. Since a did not win ga, it must be that \u03b1(ga) \u2264 \u03b2. But by the way p\u2032 is constructed, p\u2032(ga) \u2264 \u03b1(ga) and p\u2032(g\u2032) + \u03b4b \u2265 max(\u03b1(g\u2032), p(g\u2032) + \u03b4b), giving us p\u2032(ga) \u2264 \u03b1(ga) \u2264 \u03b2 \u2264 \u03baa + \u2211\u3008g\u2032,a\u3009\u2208E(p\u2032(g\u2032)+ \u03b4b)+ \u03b4s. If a would optimize at p\u2032 by being active, we have Ha(p\u2032) = p\u2032(ga)\u2212\u03baa\u2212\u2211\u3008g\u2032,a\u3009\u2208E p\u2032(g\u2032) \u2264 \u2211\u3008g\u2032,a\u3009\u2208E \u03b4b +\u03b4s. But since \u03c3(a,(V \u2032,E \u2032), p\u2032) = 0 it follows that \u03c3(a,(V \u2032,E \u2032), p\u2032)\u2265 Ha(p\u2032)\u2212 (\u2211\u3008g\u2032,a\u3009\u2208E \u03b4b +\u03b4s). If, on the other hand, a would optimize at p\u2032 by being inactive at, \u03c3(a,(V \u2032,E \u2032), p\u2032) = Ha(p\u2032). In either case, the surplus bound is met for producers (Condition 3) with \u03bbg \u2032 a = \u03b4b for all inputs g\u2032. \u2737\nTheorem 12 If (V \u2032,E \u2032) is a \u03bb-\u03b4-competitive equilibrium computed by SAMP-SB then (V \u2032,E \u2032) has a nonnegative value that differs from the value of an efficient allocation by at most \u2211\u03c0\u2208\u03a0(|{\u3008g,\u03c0\u3009 \u2208 E}| \u03b4b + \u03b4s)+ |C|\u03b4b.\nProof. By Lemma 32, there is a \u03bb-\u03b4-competitive equilibrium for (V \u2032,E \u2032) with \u03bbg\u03c0 = \u03b4b for all producers \u03c0 and goods g. With \u03b4b substituted for \u03bb g \u03c0 in the equation from Theorem 3, we have proved the present theorem. \u2737"}, {"heading": "A.9 Proof of Theorem 13", "text": "In proving the theorem, we refer to the S-level of producers in a network, as defined in the beginning of Section A.\nTheorem 13 The quiescent state of SAMP-SB is a \u03bb-\u03b4-competitive equilibrium for a tree.\nProof. We prove, by induction on the S-level of producers, that no producer changes its initial output offer. Since buy offers never decrease, it follows that, if a producer is winning its output, it will not lose its output at any successive state of the run of the protocol. Since a producer bids for its inputs only when winning its output, no inactive producer will buy any positive-price output and the present theorem follows from Theorem 11.\nBasis case: The bidding policy specifies that a producer at S-level zero never changes its initial output offer.\nInductive case: Assume that no producer at S-level less than k changes its initial output offer to show that a producer \u03c0 at S-level k never changes its initial output offer. Consider input good g with M sell offers and the lowest sell offer \u03b2. Since the network is a tree, \u03c0 is the only agent that places buy offers for g. Producer \u03c0 initially offers zero for g, and so long as it offers less than \u03b2 it loses its offer, and p\u0302\u03c0(g) = \u03b1(g). While this holds, \u03b1(g), defined as the Mth highest price, is the lowest sell offer, hence p\u0302\u03c0(g) = \u03b2. As soon as \u03c0 offers \u03b2 or greater for g it will win its offer, and then p\u0302\u03c0(g) = p(g). When this holds, p(g), defined as the M + 1st highest price, is the lowest sell offer, hence p\u0302\u03c0(g) = \u03b2. We conclude that p\u0302\u03c0(g) never changes for any input g, hence \u03c0 never changes its initial output offer.\nWe have proven that no producer changes its initial output offer, and by the argument above, the theorem is proven. \u2737"}, {"heading": "A.10 Proof of Theorem 14", "text": "Theorem 14 The quiescent state of safe SAMP-SB is a \u03bb-\u03b4-competitive equilibrium for a network with no input complementarities.\nProof. We will show that that no inactive producer buys its input at a positive price in quiescence of safe SAMP-SB. Since the properties of safe SAMP-SB in quiescence are the same as in SAMP-SB, the present theorem then follows from Theorem 11. Assume, to the contrary, that, in quiescence, producer \u03c0 wins its input g at a positive price but loses its offer for output g\u03c0.\nLet \u03b2 be the price of the final offer by \u03c0 for g, p(g) > 0 be the final price of g, and p\u0302\u03c0(g) be the final perceived cost of g to \u03c0. Since \u03c0 wins g in quiescence, p\u0302\u03c0(g) = p(g). Let \u03b2\u2032 be the price of the second to last offer from \u03c0. Immediately before \u03c0 places offer \u03b2, let p\u0302\u2032\u03c0(g) be the perceived price of g to \u03c0 and p\u2032(g) be the price component from the price quote for g. According to the bidding policy, \u03b2 = \u03b2\u2032 +\u03b4b. Since \u03c0 offers \u03b2 only if it loses g with offer \u03b2\u2032, it must be that \u03b2\u2032 \u2264 p\u2032(g), hence \u03b2 \u2264 p\u2032(g)+ \u03b4b. Furthermore, since \u03c0 loses with offer \u03b2\u2032, we have p\u0302\u2032\u03c0(g) \u2265 p\u2032(g)+ \u03b4b. Because we assume that \u03c0 wins g in quiescence, it must be that p(g) \u2264 \u03b2, hence p(g) \u2264 p\u2032(g)+ \u03b4b. It follows that, since p\u0302\u03c0(g) = p(g) and p\u0302\u2032\u03c0(g) \u2265 p\n\u2032(g)+ \u03b4b, we have p\u0302\u03c0(g) \u2264 p\u0302\u2032\u03c0(g). According to the safe SAMP-SB bidding policies, \u03c0 offers \u03b2 for g only if it is first winning g\u03c0 with offer price p\u0302\u2032\u03c0(g). Since p\u0302\u03c0(g) \u2264 p\u0302 \u2032 \u03c0(g), \u03c0 its offer for g\u03c0 is the same in quiescence as when it had placed \u03b2 for g. But since no offers from any agent decrease, \u03c0 must continue to win its final offer for g\u03c0, contradicting the assumption that \u03c0 loses g\u03c0 in quiescence. Thus, \u03c0 does not win its input at a positive price if it is inactive, and the quiescent state of safe SAMP-SB is a \u03bb-\u03b4-competitive equilibrium. \u2737"}, {"heading": "A.11 Proof of Theorem 15", "text": "In proving the theorem, we refer to the C-level and S-level of producers in a network, as defined in the beginning of Section A.\nTheorem 15 If (V,E) is a polytree with a solution that assigns good g to consumer c, then given all other costs and values, there exists a value vc(g) such that SAMP-SB is guaranteed to converge to a valid solution (V \u2032,E \u2032) for c.\nProof. For convenience, denote max ( \u2211\u03c0\u2208\u03a0\u2229V \u2032 \u03ba\u03c0 , maxc\u2032\u2208C, \u3008g\u2032,c\u2032\u30096=\u3008g,c\u3009 vc\u2032(g\u2032) ) as \u03b3. We show that the theorem holds for:\nvc(g) = [\u03b3+(2\u03b4b + \u03b4s)|\u03a0|] |\u03a0|+ \u03b4b.\nWe need to show that SAMP-SB cannot reach a state in which p(g) > vc(g)\u2212\u03b4b and c is not winning g, because then c would stop bidding for g and the desired solution would not form.\nFirst, observe that for any consumer c\u2032 and any good g\u2032 such that \u3008g\u2032,a\u3009 6= \u3008g,c\u3009, c\u2032 will not offer above \u03b3 for g\u2032, by construction.\nNow, consider a producer \u03c0 such that there is no directed path from \u03c0 to g through the output of \u03c0. We show, by induction on the C-level of producers, that no such producer offers higher than \u03b3+ \u03b4bd\u03c0, where d\u03c0 is the C-level of \u03c0, for one of its inputs. For the basis case, such a producer \u03c0 at C-level one cannot win an output offer above \u03b3 (by the definition of \u03b3). \u03c0 increases its input offers in increments of \u03b4b, so to offer \u03b2\u2032 > \u03b3+ \u03b4b, on any input g\u2032, it must first offer \u03b2, where \u03b3 < \u03b2 \u2264 \u03b3+ \u03b4b for that input. \u03c0 will only offer \u03b2\u2032 if it is losing \u03b2 but winning its output offer. But if \u03c0 is losing \u03b2, we must have p(g\u2032) \u2265 \u03b2, so \u03c0 must be offering more than \u03b3 for its output. But then it cannot be winning its output, hence would not offer \u03b2\u2032 for g. Thus \u03c0 at C-level one does not offer more than \u03b3+ \u03b4b for any input, establishing the base case. Now, assume that the property holds for every such producer at C-level less than k to show that it holds for producer \u03c0 at C-level k. Given the inductive assumption, it must be that \u03c0 cannot win its output for more than \u03b3 + \u03b4b(k\u2212 1). By an argument similar to the basis case, \u03c0 does not offer above \u03b3 + \u03b4bk for its input, proving the inductive case. Since d\u03c0 \u2264 |\u03a0|, then no such producer offers higher than \u03b3+ \u03b4b|\u03a0| for its input.\nFor any producer \u03c0 \u2208 \u03a0\u2229V \u2032, denote as I\u03c0 the maximum number of producers, other than \u03c0, in the subgraph of (V,E), rooted at \u03c0. Now we show by induction on the S-level, that a producer \u03c0 on a directed path to g offers no more than [\u03b3+ \u03b4b(|\u03a0|+ d\u03c0)+ \u03b4s(d\u03c0 \u22121)]I\u03c0 + \u03b4s for its output, where d\u03c0 is the S-level of \u03c0. For the basis case, consider such a producer \u03c0 at S-level one, offering to buy some g\u2032. No consumer offers above \u03b3 for g\u2032. Because (V,E) is a polytree, any other producer \u03c0\u2032 that offers to buy g\u2032 is not on a directed path to g, hence offers at most \u03b3 + \u03b4b|\u03a0| to buy g\u2032. Any producer that offers to sell g\u2032 must have no inputs, hence offers no more than \u03b3 for g\u2032. Hence \u03c0\u2032 can successfully buy g\u2032 with a offer no higher than \u03b3 + \u03b4b(|\u03a0|+ 1), thus will offer no higher than this amount for g\u2032. Since the the number of inputs to \u03c0 is equal to I\u03c0, it will offer no more than (\u03b3+ \u03b4b(|\u03a0|+ 1))I\u03c0 + \u03b4s for its output, and the basis case is proven. Now, assume that the property holds for every such producer at S-level less than k to prove that it holds for producer \u03c0 offering to buy some g\u2032 at S-level k. By the inductive assumption, no producer \u03c0\u0303 offers to sell g\u2032 for more than (\u03b3 + \u03b4b(|\u03a0|+ k\u2212 1)+ \u03b4s(k\u2212 2))I\u03c0\u0303 + \u03b4s. As in the basis case, no consumer offers more than \u03b3 for g\u2032 and any producer other than \u03c0 will offer no more than \u03b3+ \u03b4b|\u03a0| to buy g\u2032. Hence, \u03c0 will offer at most (\u03b3+ \u03b4b(|\u03a0|+ k\u22121)+ \u03b4s(k\u22122))I\u03c0\u0303 + \u03b4s + \u03b4b to buy g\u2032, and for its output will offer at most\n[\n\u2211 \u3008\u03c0\u0303,g\u2032\u3009p\u2208E | \u3008g\u2032,\u03c0\u3009\u2208E (\u03b3+ \u03b4b(|\u03a0|+ k\u22121)+ \u03b4s(k\u22122))I\u03c0\u0303 + \u03b4s + \u03b4b\n]\n+ \u03b4s \u2264\n[\u03b3+ \u03b4b(|\u03a0|+ k)+ \u03b4s(k\u22121)]I\u03c0 + \u03b4s,\nproving the inductive case. Since I\u03c0 \u2264 |\u03a0| and d\u03c0 \u2264 |\u03a0|, then no such producer offers higher than [\u03b3+ 2\u03b4b|\u03a0|+ \u03b4s(|\u03a0|\u22121)]|\u03a0|+ \u03b4s \u2264 [\u03b3+(2\u03b4b + \u03b4s)|\u03a0|] |\u03a0| = vc(g)\u2212\u03b4b.\nWe have shown that no agent a 6= c places a buy offer as high as vc(g)\u2212\u03b4b for g and no producer on a directed path to g places a sell offer as high as vc(g)\u2212\u03b4b for g. Hence c is the only agent that\ncould possibly offer as high as vc(g)\u2212 \u03b4b for g. But c will offer this high, if necessary, to win g, and will win g if it offers vc(g)\u2212\u03b4b or higher. It follows that c will win g at a price below vc(g) in quiescence. By Observation 7 and Theorem 16, the state must be a valid solution. \u2737"}, {"heading": "A.12 Proof of Theorem 16", "text": "Theorem 16 If SAMP-SB reaches quasi-quiescence with p(g) < vc(g) for some \u3008g,c\u3009 \u2208 E, c \u2208 C, then the system\u2019s state represents a valid solution.\nProof. Because the definition of quasi-quiescence requires that active producers do not change their bids, they must be feasible. All other agents are feasible by definition. The price of an active producer\u2019s output good must be no less than the total price of its input goods, otherwise it would increase its output offer, violating quasi-quiescence.\nBecause p(g) < vc(g), consumer c must have won its offer for g. A consumer bids in such a way that it wins only one unit of one good, and consumers do not change their bids in quasi-quiescence.\nFinally, the auction guarantees that there is a one-to-one mapping between successful buy offers and successful sell offers for any good, ensuring material balance.\nThus, each of the constraints for a valid solution is satisfied. \u2737"}, {"heading": "A.13 Proof of Theorem 17", "text": "Theorem 17 If a run of SAMP-SB in (V,E) is in a valid solution state such that:\n\u2022 each consumer c is either winning an offer or p(g)+ \u03b4b > vc(g) for all \u3008g,c\u3009 \u2208 E,\n\u2022 all agents have correct beliefs about which goods they are currently winning,\n\u2022 all bids from consumers and active producers have been received in response to the current price quotes,\n\u2022 and no sell offers are lost due to tie breaking,\nthen after the subsequent price quote from each auction, the system will be in a quasi-quiescent state with a valid solution.\nProof. Let the current prices be p. The consumer bidding policy dictates that the consumers do not change their offers under the specified conditions. Because we have a valid solution, each producer is feasible and thus will not raise any of its buy offers for inputs. Therefore, no agent changes any buy offers.\nAn active producer \u03c0 is feasible in a valid solution. Since \u03c0 is winning all of its inputs, it only raises its offer for output g\u03c0 if p(g) changes for once of its inputs g, and will place an offer for its output a price no higher than the sum of its input good prices. By the definition of a valid solution, if \u03c0 is active, then the current price of its output good is no less than sum of the current prices of its inputs. But since \u03c0 won its offer for g\u03c0, it must have offered no higher than p(g\u03c0) for g\u03c0. Because the previous offer price by \u03c0 for g\u03c0 is no higher than p(g\u03c0), and because the sum of the current prices of its inputs are no higher than p(g), \u03c0 will offer no higher than p(g\u03c0) for g\u03c0.\nWe have established that no agent changes any buy offers, and no currently active producer places a sell offer above p(g) for any good g. We show this implies that, at the next price quotes with prices p\u2032, we have p\u2032(g) = p(g). Assume the contrary. Since offers do not decrease, p\u2032(g) > p(g). Since no buy offer and no winning sell offer changed, the price increase is due an updated losing sell offer at price \u03b2, such that \u03b2 = p\u2032(g). But if the agent was losing with a previous offer price of \u03b2\u2032, it must be that \u03b2\u2032 was at least as high as the (M + 1)st highest offer. Thus \u03b2, being higher, must be strictly higher than the (M + 1)st highest offer, hence cannot raise the price of g. Hence p\u2032(g) = p(g).\nSince prices do not change, the temporal-precedence tie breaking ensures that the set of winning buy offers does not change. Additionally, since no winning seller offers above p(g) and no sell offers are currently lost to tie breaking, the set of winning sell offers does not change. Since prices and allocations do not change, no consumer or active producer will change its bids. Furthermore, because the system is in a valid solution state based on the current price quotes, it must be in a valid solution state based on the next price quotes. \u2737\nWe note that temporal-precedence tie-breaking itself (without the requirement that no tied sell offers are lost) is not sufficient to ensure that the allocation to sellers does not change. If some tied sell offers are lost, it is possible that an active producer could increase its next sell offer price up to the price of its output good. If this occurs, then that producer would lose the tie breaking of its output at the next quote, and the system would not be in quasi-quiescence."}], "references": [], "referenceMentions": [], "year": 2011, "abstractText": "Supply chain formation is the process of determining the structure and terms of exchange relationships to enable a multilevel, multiagent production activity. We present a simple model of supply chains, highlighting two characteristic features: hierarchical subtask decomposition, and resource contention. To decentralize the formation process, we introduce a market price system over the resources produced along the chain. In a competitive equilibrium for this system, agents choose locally optimal allocations with respect to prices, and outcomes are optimal overall. To determine prices, we define a market protocol based on distributed, progressive auctions, and myopic, non-strategic agent bidding policies. In the presence of resource contention, this protocol produces better solutions than the greedy protocols common in the artificial intelligence and multiagent systems literature. The protocol often converges to high-value supply chains, and when competitive equilibria exist, typically to approximate competitive equilibria. However, complementarities in agent production technologies can cause the protocol to wastefully allocate inputs to agents that do not produce their outputs. A subsequent decommitment phase recovers a significant fraction of the lost surplus.", "creator": "dvips(k) 5.90a Copyright 2002 Radical Eye Software"}}}