{"id": "1203.3480", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Mar-2012", "title": "Learning Game Representations from Data Using Rationality Constraints", "abstract": "One answer is to learn the representations from data. If you want to learn both the payouts and the strategies of the players, a naive approach is to learn both directly from the data. This approach ignores the fact that the players could play reasonably good strategies, so there is a link between the strategies and the data. The main contribution of this paper is to make this connection during learning. We formulate the learning problem as a weighted satisfaction problem with limitations both in terms of adjusting the payouts and strategies to the data and in adjusting the strategies to the payouts. We use quantum balance as our idea of rationality to quantify the latter fit. Our results show that the inclusion of rationality constraints can improve learning when the amount of data is limited.", "histories": [["v1", "Thu, 15 Mar 2012 11:17:56 GMT  (175kb)", "http://arxiv.org/abs/1203.3480v1", "Appears in Proceedings of the Twenty-Sixth Conference on Uncertainty in Artificial Intelligence (UAI2010)"]], "COMMENTS": "Appears in Proceedings of the Twenty-Sixth Conference on Uncertainty in Artificial Intelligence (UAI2010)", "reviews": [], "SUBJECTS": "cs.GT cs.AI", "authors": ["xi alice gao", "avi pfeffer"], "accepted": false, "id": "1203.3480"}, "pdf": {"name": "1203.3480.pdf", "metadata": {"source": "CRF", "title": "Learning Game Representations from Data Using Rationality Constraints", "authors": ["Xi Alice Gao"], "emails": ["xagao@seas.harvard.edu", "apfeffer@cra.com"], "sections": [{"heading": null, "text": "While game theory is widely used to model strategic interactions, a natural question is where do the game representations come from? One answer is to learn the representations from data. If one wants to learn both the payoffs and the players\u2019 strategies, a naive approach is to learn them both directly from the data. This approach ignores the fact the players might be playing reasonably good strategies, so there is a connection between the strategies and the data. The main contribution of this paper is to make this connection while learning. We formulate the learning problem as a weighted constraint satisfaction problem, including constraints both for the fit of the payoffs and strategies to the data and the fit of the strategies to the payoffs. We use quantal response equilibrium as our notion of rationality for quantifying the latter fit. Our results show that incorporating rationality constraints can improve learning when the amount of data is limited."}, {"heading": "1 Introduction", "text": "Game theory has been widely used to model strategic interactions of agents. A natural question is where do the game representations come from? Traditionally, games have usually been constructed by hand, but in that case they may only be theoretical abstractions of reality. Alternatively, one might have access to a simulator, for example, in the trading agent competition, but that is unusual. The problem is similar to that of developing a probabilistic model, and a common approach, which we take in this paper, is to learn the model from data.\nConsider for example the following situation. A farmer wants to begin selling fruits in a market. She has to\ndecide where in the market to locate her store, which types of fruits to sell, and what prices to charge for the fruits. She does not know what the other farmers currently do nor what payoffs the other farmers are receiving for their decisions. This is a game and our new farmer would like to learn both the rules of the game and the strategies that the other players play from observing them. Moreover, she would like to learn these quickly with limited data.\nA naive approach to this learning problem is to use the maximum likelihood estimation to learn the strategy profiles and payoff values separately from observed data. However, this approach is prone to over-fitting since limited amount of data may not accurately reflect the actual strategies and payoffs. More importantly, this approach ignores the fact that agents might already be playing reasonably good strategies. It does not connect the strategies played by the agents to their payoffs while learning. Our main contribution is to make this connection, as illustrated in Figure 1.\nThe naive approach makes the connection between the strategy and payoff variables with the observed data, but does not connect the strategy variables to the payoff variables. An alternative approach could learn the payoffs from data, and then connect the strategies to the payoffs by solving the game, using some notion of rationality. This approach, however, ignores the observed data about strategies. Our approach makes all three connections. We learn both the payoff variables and strategy variables from data, and use the payoffs to inform the strategies and vice versa.\nA possible notion of rationality is Nash equilibrium. However, Nash equilibrium is a brittle concept since it assumes players have completely converged to playing rational strategies and does not allow for noise. Instead, we use the quantal response equilibrium concept to model the rationality of agents. In quantal response equilibrium, players do not choose best responses with probability one as in Nash equilibrium. Instead, they \u201cbetter respond\u201d by choosing responses with higher expected payoffs with higher probabilities. Using the quantal response equilibrium allows us to model bounded rationality of agents as well as being robust to noise in the data.\nOur approach is formulated as a weighted constraint satisfaction problem (WCSP). Our WCSP model has variables for both mixed strategy profiles and payoff values. The two sets of soft constraints assign lower costs to variable assignments that have higher probability based on the observed data. The third set of soft constraints expresses the bounded rationality of the agents using the quantal response equilibrium concept. The advantage of using the WCSP framework is that we are able to incorporate and balance the goals of fitting the learned strategy profiles and payoff values to the observed data with the goal of connecting the learned strategy profiles and payoff values using the quantal response equilibrium. Furthermore, using a CSP framework allows us to potentially add additional types of constraints for dealing with more complex game structures. For instance, one possible future work is to add additional constraints for learning the structures of graphical games (Kearns et al., 2001).\nRelated Work. There has been some research in recent years on learning games from data. Ficici et al. (2008) learned a reduced game form representation from data by clustering agents with similar strategic views of the game and used this representation to approximately solve asymmetric games of many players. Vorobeychik et al. (2007) used regression learning techniques to learn payoff functions of infinite games. Duong et al. (2009) applied existing learning algorithms such as branch-and-bound, greedy, and local search algorithms to learning graphical games from data. These search algorithms were evaluated based on metrics such as minimizing empirical loss, approximating graphical structure, and approximating Nash equilibria. All these approaches differ from ours in that they do not use rationality to inform the learning.\nSoni et al. (2007) formulated the problem of computing pure strategy approximate Nash equilibria in oneshot complete-information games as a constraint satisfaction problem. Their PureProp CSP defined variables corresponding to the strategy profiles of players and constraints to solve for -Nash equilibrium of\nthe resulting game. Their work is similar to our approach since we essentially use rationality constraints to solving for quantal response equilibrium of the normal form game based on observed data on payoff values. However, their work differs from our approach because we also use constraints related to learning the parameters from observed data in our CSP framework."}, {"heading": "2 Preliminaries", "text": ""}, {"heading": "2.1 Normal Form Games", "text": "In this paper, we consider one-shot complete information normal form games. Such a game G = [I,A,U] is given by a set of players I with |I| = N , a set of pure strategies A = \u00d7i\u2208IAi where Ai is the set of pure strategies for player i \u2208 I, and U = \u00d7i\u2208Iui where ui : A \u2192 < is the payoff function for player i \u2208 I. A mixed strategy of player i is denoted by \u03c3i : Ai \u2192 [0, 1] where \u2211 a\u2208Ai \u03c3i(a) = 1 is a probability distribution over all the pure strategies of player i. We use \u2212i to refer to the set of all players other than player i. Thus, a\u2212i and \u03c3\u2212i denote the joint pure strategy and mixed strategy profile of the set of players \u2212i.\nWe focus on finite games for which the set of players I and the sets of pure strategies Ai for each player i \u2208 I are finite. The game G is considered complete information in the sense that each player i has full knowledge of the payoff functions of the other players."}, {"heading": "2.2 Equilibrium Notions", "text": "In our learning model, we consider two popular equilibrium notions: the mixed strategy Nash equilibrium and the quantal response equilibrium.\nNash equilibrium assumes that every player is completely rational. In Nash equilibrium, every player i is playing a best response to the mixed strategy profile of all the other players \u2212i.\nDefinition: 1 A joint mixed strategy profile \u03c3\u2217 is Nash equilibrium if every player i is playing a mixed strategy best response to the strategy profiles of its opponents \u2212i, i.e.\nui(\u03c3\u2217\u2212i, \u03c3 \u2217 i ) \u2265 ui(\u03c3\u2217\u2212i, \u03c3i),\u2200\u03c3i (1)\nThis definition implies that no player can benefit in expectation by deviating unilaterally from the Nash equilibrium strategy profile \u03c3\u2217.\nWe use the quantal response equilibrium notion to model the bounded rationality of agents (McKelvey and Palfrey, 1996). In a quantal response equilibrium, players fix their strategies, form beliefs about the\nstrategies of the other players, compute their expected payoffs based on their beliefs, and choose a strategy which assigns relatively higher probabilities to actions with relatively higher expected payoffs. We use the most common specification for the quantal response equilibrium called the logit equilibrium (LQRE). The LQRE uses an exponentiated response function and a positive real valued parameter \u03bb to capture how sensitive each player is to the differences in expected payoffs. The parameter \u03bb can be interpreted as a measure of the degree of rationality of the particular player choosing this response function. For instance, when \u03bb = 0, the player chooses each pure strategy with equal probability. As \u03bb increases, the player becomes more and more responsive to the differences in expected payoffs of different pure strategies and chooses his mixed strategy best response accordingly. The strategies chosen by the players in a LQRE converges to Nash equilibrium when \u03bb approaches infinity.\nDefinition: 2 A joint mixed strategy profile \u03c3\u2217 is a LQRE for some non-negative real number \u03bb (referred to as \u03bb-LQRE hereafter), if for every player i, \u03c3\u2217(ai) for every ai \u2208 Ai is a exponentiated best response to the joint mixed strategy profile \u03c3\u2217\u2212i, i.e. for all ai \u2208 Ai, we have\n\u03c3\u2217i (ai) = e (\u03bb\nP a\u2212i\u2208A\u2212i\n\u03c3\u2217\u2212i(a\u2212i)ui(ai,a\u2212i))\u2211 aj\u2208Ai e (\u03bb P a\u2212i\u2208A\u2212i \u03c3\u2217\u2212i(a\u2212i)ui(aj ,a\u2212i)) (2)"}, {"heading": "2.3 Weighted Constraint Satisfaction Problems", "text": "A classic constraint satisfaction problem (CSP) is defined by a set of variables, each with a finite domain, and a set of constraints. Each constraint consists of a subset of the variables, and a relation over the variables in the constraint. A solution to a CSP is an assignment of values to the variables such that every constraint is satisfied, i.e., the projection of the assignment onto the constraint variables is in the constraint relation.\nA weighted CSP (WCSP) is similar to a CSP except that it has two kinds of constraints. Hard constraints are like those in an ordinary CSP. Soft constraints consist of a set of variables and a cost function from those variables to non-negative numbers. The goal of solving a CSP is to find an assignment such that all the hard constraints are satisfied, while the sum of the costs of the soft constraints for the assignment is minimized."}, {"heading": "3 Problem Definition", "text": "We consider generating M samples of the play of a one-shot simultaneous-move game G. G is a com-\nplete information game, so the players have complete knowledge of the payoff matrix of the game. We assume that player i chooses a fixed mixed strategy \u03c3i chosen in advance and plays it for every sample generated. This is a simplifying assumption that allows us to treat the training instances as independent; relaxing it is a topic for future work. For the k-th sample, player i chooses to play some pure strategy ai \u2208 Ai and incurs some real valued payoff ui(A) where A is the joint pure strategy profile chosen by all the players. For example, in our fruit vendor example, the players are the fruit vendors, and the pure strategies of each player are the location of the stall, the types of fruit sold, and the prices. This game is played for many times by the fruit vendors.\nIn this paper, we take the perspective of an outside observer (referred to as O hereafter). O is not a participant of the game but might be someone who potentially wants to join the game, just like the fruit seller who wants to join the market. We assume that the number of players and the set of pure strategies available to each player are known to O. We also assume that the set of players playing the game is fixed. Given these assumptions, O observes the game being played for M times. Whenever, the players choose a joint pure strategy profile a for the k-th sample, O can observe this joint pure strategy profile a perfectly. This assumption fits our domain, where the observer can observe the fruit, prices and location of each vendor, but can easily be relaxed if necessary. However, O cannot observe the payoffs directly, but only has a noisy estimate of them. In the fruit example, the observer can observe the number of customers at each stall but not the exact transactions. We model this by having O observe a payoff that is Gaussian distributed around its expected value ui(A) using a fixed variance R2; other noise models can easily be accommodated.\nOur goal is, given these observations, to learn a representation of the game that balances the fit of the learned game to the data with the assumption that the players are playing a \u03bb-LQRE for some fixed \u03bb. This balancing involves three factors: (1) the fit of the estimated payoffs to the observed payoffs; (2) the fit of the estimated strategies to the observed strategies; and (3) the fit of the estimated strategies to the estimated payoffs. The \u03bb-LQRE assumption may or may not be correct. Therefore, we do not enforce this assumption in a hard manner, but rather introduce slack, penalizing estimates that deviate far from it. The assumption serves as a force with which to enforce some sense on the data. It behaves rather like a Bayesian prior. With a large amount of data, the LQRE assumption will be overcome, but with small amounts of data it will help prevent over-fitting. For the LQRE assumption, we\nassume that the outside observer knows all the \u03bb values for the players although the players do not need to know each other\u2019s \u03bb values."}, {"heading": "4 Our WCSP Learning Model", "text": "We formulate our learning model using the weighted constraint satisfaction framework. Our WCSP model has one variable corresponding to each \u03c3i(ai) which is the probability of the pure strategy ai in the mixed strategy \u03c3i of each player i. Moreover, our WCSP also defines one variable for each entry in the ui(A) which is the true payoff vector of player i when the joint pure strategy profile chosen by all the players is A. Since the domains of the strategy and payoff variables are continuous, we discretize them to be multiples of real valued discretization parameters and \u03b4 respectively. We also restrict the payoff values ui(A) to be within a pre-defined range [umin, umax] where umin, umax \u2208 < are the minimum and the maximum of the observed payoff values. Now we define the four types of constraints in our WCSP learning model.\nStrategy Maximum Likelihood Constraints\nIntuitively, the value of \u03c3i(ak) for mixed strategy \u03c3i for player i and the pure strategy ak \u2208 Ai for player i gives the probability of observing the pure strategy ak being played by player i for a particular instance of game play. Therefore, given a sequence of observed pure strategies a1k, ..., a M k chosen by player i, we can calculate the log-likelihood of a particular \u03c3i(ak) value given the observed sequence of pure strategies as\nlog ( \u03c3i(a1k)\u00d7 ...\u00d7 \u03c3i(aMk ) ) = M\u2211 j=1;ajk=ak log \u03c3i(a j k) (3)\nGiven a sequence of observed pure strategies, for each player i, we would like to choose a value for \u03c3i(ak) in order to maximize the log-likelihood of the observations. Maximizing the log-likelihood of observations is equivalent to minimizing the negative log-likelihood of the observations.\nTherefore, for our strategy maximum likelihood constraints, we associate a cost with each possible discretized value of \u03c3i(ak) for each pure strategy ak \u2208 Ai of player i, which is equal to the negative log-likelihood of the observed sequence of pure strategies chosen by player i for the M samples of game play. For every player i, and for each pure strategy ak \u2208 Ai for player i, the cost can be calculated as follows:\ncost(\u03c3i(ak)) = \u2212 logP (a1i , ..., aMi |\u03c3i(ak)) (4)\nBased on the above equation, the value of \u03c3i(ak) associated with minimum cost has the highest probability\nto be the true value of \u03c3i(ak) in the true mixed strategy \u03c3i(ak) chosen by player i.\nStrategy Consistency Constraints\nThis consistency constraint ensures that the values of \u03c3i(ak) form a valid mixed strategy probability distribution since our strategy maximum likelihood constraints were defined for each pure strategy separately rather than for the set of pure strategies for a particular player.\nThe strategy consistency constraint is a unary hard constraint for the variables \u03c3i(ak) of player i. This constraint specifies that the probabilities \u03c3i(ai) assigned to the pure strategies ai \u2208 Ai must sum to 1, i.e.\n\u2200i \u2208 I, \u2211 ak\u2208Ai \u03c3i(ak) = 1 (5)\nPayoff Maximum Likelihood Constraints\nWe defined the observed payoff of a player as a Gaussian distribution N(ui(A), R2). Therefore, the loglikelihood of observing a sequence of payoff values v1i , ..., v M i with the corresponding pure strategy profiles a1, ..., aM for player i can be calculated as\ncost(ui(a)) = M\u2211\nj=1:aj=a\nlogN(vji ,a j|ui(a), R2) (6)\nGiven a sequence of observed payoff values, for each player i, we would like to choose a value for ui(a) in order to maximize the log-likelihood of the observations, which is equivalent to minimizing the negative log-likelihood of the observations.\nFor our payoff maximum likelihood constraints, we define the cost for ui(a) as the negative log-likelihood of the observed sequence of payoffs of player i when the observed pure strategy profile aj is the same as a. For every player i, the cost can be calculated as follows:\ncost(ui(a)) = \u2212 M\u2211\nj=1:aj=a\nlogN(vji ,a j|ui(a), R2) (7)\nRationality Constraints\nThere is a rationality constraint for every pure strategy of every player. This constraint only involves variables and does not involve any of the observed data. For the rationality constraint, the cost for player i for a pure strategy measures how far off the probability of the strategy is from its quantal response probability. From Equation 2, we obtain that in a \u03bb-LQRE,\n| exp(\u03bb \u2211 a\u2212i \u03c3\u2212i(a\u2212i)ui(ak, a\u2212i))\u2212\n\u03c3i(ak) \u2211 ak\u2208Ai exp(\u03bb \u2211 a\u2212i \u03c3\u2212i(a\u2212i)ui(ak, a\u2212i))| = 0 (8)\nWe therefore obtain the following constraint for all i \u2208 I and ak \u2208 Ai:\ncost(\u03c3i(ak), \u03c3\u2212i(\u00b7), ui(ak, \u00b7)) = (9) \u03b1| exp(\u03bb \u2211 a\u2212i \u03c3\u2212i(a\u2212i)ui(ak, a\u2212i))\n\u2212\u03c3i(ak) \u2211 ak\u2208Ai exp(\u03bb \u2211 a\u2212i \u03c3\u2212i(a\u2212i)ui(ak, a\u2212i))|\nThe \u03c3\u2212i(\u00b7) indicates that the constraint has a variable for every pure strategy of every other player. Similarly, ui(ak, \u00b7) indicates that it has one for every action profile consistent with player i playing ak. Clearly, this is a lot of variables, so the constraint will be huge. We will discuss how to deal with this in the next section. Note that our LQRE constraints only include strategy profiles observed in the data.\nThe parameter \u03b1 determines the strength of the rationality constraints compared to the data-driven strategy and payoff constraints. A larger \u03b1 is analogous to having a stronger prior, and will make it more difficult to overcome the rationality constraint, whereas a smaller \u03b1 will allow the rationality constraints to be overcome more easily by the data. One method to choose \u03b1 is to use cross-validation."}, {"heading": "5 Complexity and Constraint Decomposition", "text": "Clearly, the size of the rationality constraints is exponential in the number of variables. If there are N players and K pure strategies per player, there will be on the order of NK variables, so the size of the constraint will be exponential in NK. Exponential cost in N is acceptable, because the size of the normal form representation is itself exponential in the number of players. Furthermore, representations like graphical games provide a handle on how to deal with games with large numbers of players. However, an exponential cost in K would severely limit the practicality of the approach. Fortunately, we can avoid this cost using constraint decomposition, which we now describe. We go through all four types of constraints in turn."}, {"heading": "5.1 Strategy Maximum Likelihood Constraints", "text": "The strategy maximum likelihood constraints are unary constraints. In particular, there is one constraint for each pure strategy of each player. With N players and K pure strategies for each player, there are NK strategy maximum likelihood constraints in our WCSP. If we use as the discretization parameter for strategy variables, then the complexity of the strategy maximum likelihood constraints is NK ."}, {"heading": "5.2 Strategy Consistency Constraints", "text": "Each strategy consistency constraint involves K strategy variables, and there are N such constraints. If we use as the discretization parameter for the strategy variables, then there are on the order of 1 choices of values for each variable. For each player i, if we implement this consistency constraint directly, then there are 1 K values to search from where is a small positive real number. The complexity of the strategy consistency constraints is N K which is exponential in K.\nHowever, for each constraint for each player i, we define K extra variables t1, ..., tk and decompose the multi-variable hard constraint into K ternary hard constraints as follows. t1 = \u03c3i(a1) t2 = t1 + \u03c3i(a2) ... tk = tk\u22121 + \u03c3i(an) = 1 (10)\nGiven this decomposition, we only need to search from K 3 possible tuples of values. This is a significant reduction in complexity of this constraint as long as K > 3. The complexity of this constraint is NK 3 which is polynomial in K."}, {"heading": "5.3 Payoff Maximum Likelihood Constraints", "text": "The payoff maximum likelihood constraints are unary constraints. There is one constraint for each pure strategy for each player i, for a total of NKN constraints. If we use \u03b4 as the discretization parameter for payoff variables, then the complexity of the payoff maximum likelihood constraint is NK N\n\u03b4 ."}, {"heading": "5.4 Rationality Constraints", "text": "The rationality constraints are multi-variable soft constraints. There is one constraint for each pure strategy of each player i. With N players and K pure strategies for each player, we have NK rationality constraints.\nFor each player i and each pure strategy ak of player i, we can decompose the rationality constraints in several steps. First of all, the term \u03c3\u2212i(a\u2212i)ui(ak, a\u2212i) can be decomposed into (N+1) ternary constraints as follows: t1 = \u03c31(a1) ... ti\u22121 = ti\u22122\u03c3i\u22121(ai\u22121) ti+1 = ti\u22121\u03c3i+1(ai+1) ...\ntn = tn\u22121\u03c3n(an) tn+1 = tnui(ak, a\u2212i)\n(11)\nUse xi to denote the last equation in the decomposition of the ith product \u03c3\u2212i(a\u2212i)ui(ak, a\u2212i). Then the term\nexp(\u03bb \u2211 a\u2212i \u03c3\u2212i(a\u2212i)ui(ak, a\u2212i)) (12)\ncan be decomposed as follows: y1 = x1 y2 = y1 + x2 ...\nykn\u22121 = ykn\u22121\u22121 + xkn\u22121 ykn\u22121+1 = e\u03bbykn\u22121\n(13)\nFor decomposing Equation 12, a set of constraints of in the form of equation 11 is constructed for every joint action profile a\u2212i. Since there are KN\u22121 action profiles for a\u2212i, Equation 12 can be decomposed into KN\u22121(N + 1) constraints. Notice that the decomposition of Equation 12 can be reused since it appears in two terms in the rationality constraint.\nFinally, we decompose the following summation\u2211 ak\u2208Ai exp(\u03bb \u2211 a\u2212i \u03c3\u2212i(a\u2212i)ui(ak, a\u2212i)) (14)\nThis requires computing Equation 12 K times for different values of ak, plus another K + 1 constraints for the sum. With one more constraint to express Equation 9, the total number of constraints is KN (N+1)+ K+ 2. Thus, the total number of constraints is on the order of O(NKN ). If we use discretization parameter for strategy variables and \u03b4 for payoff variables, then the complexity of the rationality constraints is on the order of O( NK N\nmin{ ,\u03b4}3 ).\nAs a result of these decompositions, the size of the WCSP is polynomial in the size of the normal form game representation. Of course, WCSP is an NP-hard problem, so the complexity of our approach is probably exponential in the worst case. Nevertheless, WCSP is often tractable for real problems, so there is good reason to hope that it will be for us too."}, {"heading": "6 Evaluation", "text": "In this section, we first discuss several baseline methods that we compare our learning method with. Then we describe our implementation, present our experimental results and discuss their implications."}, {"heading": "6.1 Baseline Methods", "text": "A completely naive approach is to learn the strategies and payoffs of the game separately from the data given. We call this method the Naive method. This is\na maximum likelihood approach for which the strategies and payoffs with highest log probabilities given the observations will be chosen. This approach respects the data completely. In our setting, the payoffs are noisily observed. Moreover, if the number of samples is small, then the observed frequency of each pure strategy might not reflect the underlying mixed strategy being played. For these reasons, we expect that the Naive method will perform poorly when the standard deviations of the payoffs are high and or when the number of samples is small.\nA more sophisticated approach is to learn the payoff values from the observed data and infer the mixed strategies being played by solving for an equilibrium based on a certain solution concept. We use NaiveNash to refer to the method using the Nash equilibrium concept and NaiveLQRE to refer to the method using the LQRE concept. This approach ignores the observed pure strategy profiles."}, {"heading": "6.2 Experimental Setup", "text": "We evaluate our learning methods with computational experiments on randomly generated normal form games with 2 players and 2 pure strategies for each player (referred to as 2-player game hereafter). Our implementation consists of the following steps: 1. Generate a random 2-player normal form game. 2. Use Gambit (McKelvey et al., 2007) to compute LQRE of the game with different \u03bb values. 3. Given specific LQRE strategies, generate data on game play, assuming players are playing according to the specified strategies, and payoffs are generated from a Gaussian distribution centered around the payoffs specified in the game. 4. Generate and store a WCSP problem in a predefined XML format. This XML file defines the variables, the domains of the variables, and the constraints in the form of costs associated with value assignment tuples. 5. Solve the WCSP specified in the XML file using Toolbar2 (Bouveret et al., 2004) which is a stateof-the-art C++ solver for WCSP, Max-SAT, and Bayesian Networks.\nWe derived our results by averaging the data over 10 random 2-player normal form games. The payoff values are sampled uniformly from [1, 2]. We chose the strategy discretization parameter to be 5%, the payoff discretization parameter \u03b4 to be 0.1, the LQRE multiplier \u03b1 to be 100, and the standard deviation R of payoff values to be 0.7. These are parameters of our model that need to be set manually and finding ways to set them automatically will be future work. For our preliminary results, the implementation does not include the constraint decomposition described. We\nhad to truncate the LQRE constraint written out into the XML file to only contain 15 of all the generated tuples with the smallest costs due to the enormous size of the resulting XML file (70mb). Although this does not affect the validity of our results, we believe that incorporating the constraint decomposition will result in an immediate improvement for the efficiency of our implementation.\nFor the Naive method, the XML file includes only the strategy and payoff maximum likelihood constraints. For the NaiveNash method, we take the payoff values learned from the Naive method, use Gambit to solve for Nash equilibrium. For games with multiple Nash equilibria, we pick the one minimizing our error measure. For the NaiveLQRE method, we again take the payoff values learned from the Naive method and use Gambit to solve for the LQRE using the same \u03bb value used to generate the data."}, {"heading": "6.3 Results and Discussion", "text": "We evaluated our learning method in three different settings. First, we varied the training set sizes and compare our approach with the Naive, NaiveLQRE, and NaiveNash methods. Second, we varied the \u03bb values and do the same comparison. Finally, we examined the performance of our algorithm using wrong \u03bb. The error of each learning instance is measured by computing the Euclidean distance between the combined vectors of actual versus learned strategy and payoff values.\nVarying training set sizes\nWe first consider varying the training set size, i.e. the number of samples of the game plays observed. When the training set size is small, learning an accurate representation of the game is expected to be difficult since the limited amount of data does not reflect the mixed strategy chosen by the players accurately. Also, with limited amount of data, the payoff values sampled with noise may be too biased to reflect the true mean and standard deviation of the observed payoff values.\nIn this setting, we found that our approach with rationality constraints performs better than the naive approach when the training set size is small. Table 1 summarizes our results for this setting. When the number of samples is 10, the average error obtained by our approach is 8% less than that of the Naive method. Also, we found that the NaiveLQRE and NaiveNash perform considerably worse than the Naive method and our LQRE method. This observation is expected, especially for NaiveNash, since the limited amount of noisy data causes the maximum likelihood methods to produce inaccurate payoff values. As a result, solving for equilibrium strategies using these payoff values re-\nsult in equilibrium strategies that tend to be far from the actual strategies being played.\nHowever, as the number of samples increases, we observe that the Naive method gradually outperforms our LQRE approach since there is enough data to for the Naive method to learn the payoff values accurately. By learning accurate payoff values, the errors of NaiveLQRE and the NaiveNash methods also improve. In particular, when the number of samples is 50, the average error of our LQRE approach is still close to that of the Naive method. However, for 100 samples, the Naive method outperforms our LQRE approach by a larger amount.\nVarying \u03bb values\nNext, we tested how well our LQRE approach performs as we vary the value of \u03bb. For this set of results, we fix the number of samples to be 10 and vary the \u03bb values used to solve for the LQRE of the games. The concern of this setting is whether the correct \u03bb value will guide the WCSP with rationality constraints to find the correct mixed strategy and payoff combinations.\nWe ran experiments for 3 \u03bb values and the results are shown in Table 2. The lambda values are approximate since Gambit does not allow us to specify the lambda values with which to solve the LQRE of the game. Our findings indicate that our approach performs better than the naive approach for small and moderate values of \u03bb, but not for very large \u03bb. We believe that this is because the LQRE approaches Nash equilibrium as \u03bb approaches infinity. For the games we considered, we observed that when \u03bb is around 10, the mixed strategies corresponding to a LQRE are already extremely close to the Nash equilibrium strategies of the game.\nUsing the wrong \u03bb\nA potential criticism of our approach is that it requires the knowledge of \u03bb or how approximately rational the players are. It might be unrealistic to expect this in real world examples. To counter this criticism, we investigated how well our approach works when we have the wrong \u03bb value, i.e., when the \u03bb used for generating the data is different from the \u03bb used for learning. In other words, does it help to assume that the agents are somewhat rational, even if we are wrong about to the degree of their rationality? To test this question, we ran experiments fixing M = 10 and \u03bb = 1 for learning but varying the actual \u03bb used to generate data.\nThe results are shown in Table 3. The column headers are the actual values of \u03bb used to generate the data. We were pleasantly surprised to find that our algorithm performs quite well even when \u03bb is significantly wrong, and the performance does not degrade quickly. When the true \u03bb is 1, which means that we are learning with the correct value, our method improves over the naive method by 13%. When the true \u03bb is 2, our method still improves over the naive method by 9%. This indicates that imposing rationality constraints is beneficial, even when it is not exactly correct."}, {"heading": "7 Conclusion and Future Work", "text": "This paper has introduced the idea that connecting strategies to payoffs using rationality constraints can improve learning games from data, particularly with limited data. While we have only demonstrated this for 2-by-2 normal form games, the paper serves as a proof by demonstration that the idea can be beneficial. Although our experimental results are preliminary, we hope that this paper opens the door to research on efficient and scalable implementations and approximations of the idea. For future work, we first would like to generate data for games with more players, more actions for each player, and greater number of samples. We also plan to experiment with games with interesting structures. There are several other specific future directions. It would be preferable to make \u03bb a variable that is learned rather than treating it as a fixed parameter that must be set. Making \u03bb a variable can be accommodated in our WCSP framework. Also, we might not want to assume that all agents use the same \u03bb, and our LQRE formulation can be generalized to capture\nthis. Moreover, in addition to using wrong \u03bb values, it would be worthwhile to investigate the case when our LQRE assumption is incorrect. Alternatively, a possible extension is to combine the rationality constraints, which as we have argued are like Bayesian priors, with Bayesian priors of the traditional kind."}, {"heading": "Acknowledgements", "text": "This work was supported by the Air Force Office of Scientific Research under MURI contract 5710002613."}], "references": [{"title": "Semiring-based constraint satisfaction and optimization", "author": ["S. Bistarelli", "U. Montanari", "F. Rossi"], "venue": "Journal of the ACM,", "citeRegEx": "Bistarelli et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Bistarelli et al\\.", "year": 1997}, {"title": "Toolbar: a state-of-the-art platform for WCSP. http://www.inra.fr/bia/t/degivry/toolbar.pdf", "author": ["S. Bouveret", "F. Heras", "S. de Givry", "J. Larrosa", "M. Sanchez", "T. Schiex"], "venue": null, "citeRegEx": "Bouveret et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Bouveret et al\\.", "year": 2004}, {"title": "Behavioral game theory", "author": ["C.F. Camerer"], "venue": null, "citeRegEx": "Camerer,? \\Q2003\\E", "shortCiteRegEx": "Camerer", "year": 2003}, {"title": "Learning graphical game models", "author": ["Q. Duong", "Y. Vorobeychik", "S. Singh", "M.P. Wellman"], "venue": "In Proceedings of the 21st International Joint Conference on Artificial Intelligence", "citeRegEx": "Duong et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Duong et al\\.", "year": 2009}, {"title": "Learning and solving many-player games through a clusterbased representation", "author": ["S. Ficici", "D.C. Parkes", "A. Pfeffer"], "venue": "In Proceedings of the 24th Conference in Uncertainty in Artificial Intelligence", "citeRegEx": "Ficici et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Ficici et al\\.", "year": 2008}, {"title": "Graphical models for game theory", "author": ["M.J. Kearns", "M.L. Littman", "S.P. Singh"], "venue": "In Proceedings of the 17th Conference in Uncertainty in Artificial Intelligence (UAI", "citeRegEx": "Kearns et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Kearns et al\\.", "year": 2001}, {"title": "Gambit: Software tools for game theory, version 0.2007.01.30", "author": ["R.D. McKelvey", "A.M. McLennan", "T.L. Turocy"], "venue": null, "citeRegEx": "McKelvey et al\\.,? \\Q2007\\E", "shortCiteRegEx": "McKelvey et al\\.", "year": 2007}, {"title": "Quantal response equilibria for normal form games", "author": ["R.D. McKelvey", "T.R. Palfrey"], "venue": "In Normal Form Games, Games and Economic Behavior,", "citeRegEx": "McKelvey and Palfrey,? \\Q1996\\E", "shortCiteRegEx": "McKelvey and Palfrey", "year": 1996}, {"title": "Constraint satisfaction algorithms for graphical games", "author": ["V. Soni", "S. Singh", "M.P. Wellman"], "venue": "In Proceedings of the 6th International Joint Conference on Autonomous Agents and Multiagent Systems", "citeRegEx": "Soni et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Soni et al\\.", "year": 2007}, {"title": "Learning payoff functions in infinite games", "author": ["Y. Vorobeychik", "M.P. Wellman", "S. Singh"], "venue": null, "citeRegEx": "Vorobeychik et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Vorobeychik et al\\.", "year": 2007}], "referenceMentions": [{"referenceID": 5, "context": "For instance, one possible future work is to add additional constraints for learning the structures of graphical games (Kearns et al., 2001).", "startOffset": 119, "endOffset": 140}, {"referenceID": 3, "context": "Ficici et al. (2008) learned a reduced game form representation from data by clustering agents with similar strategic views of the game and used this representation to approximately solve asymmetric games of many players.", "startOffset": 0, "endOffset": 21}, {"referenceID": 3, "context": "Ficici et al. (2008) learned a reduced game form representation from data by clustering agents with similar strategic views of the game and used this representation to approximately solve asymmetric games of many players. Vorobeychik et al. (2007) used regression learning techniques to learn payoff functions of infinite games.", "startOffset": 0, "endOffset": 248}, {"referenceID": 3, "context": "Duong et al. (2009) applied existing learning algorithms such as branch-and-bound, greedy, and local search algorithms to learning graphical games from data.", "startOffset": 0, "endOffset": 20}, {"referenceID": 7, "context": "We use the quantal response equilibrium notion to model the bounded rationality of agents (McKelvey and Palfrey, 1996).", "startOffset": 90, "endOffset": 118}, {"referenceID": 6, "context": "Use Gambit (McKelvey et al., 2007) to compute LQRE of the game with different \u03bb values.", "startOffset": 11, "endOffset": 34}, {"referenceID": 1, "context": "Solve the WCSP specified in the XML file using Toolbar2 (Bouveret et al., 2004) which is a stateof-the-art C++ solver for WCSP, Max-SAT, and Bayesian Networks.", "startOffset": 56, "endOffset": 79}], "year": 2010, "abstractText": "While game theory is widely used to model strategic interactions, a natural question is where do the game representations come from? One answer is to learn the representations from data. If one wants to learn both the payoffs and the players\u2019 strategies, a naive approach is to learn them both directly from the data. This approach ignores the fact the players might be playing reasonably good strategies, so there is a connection between the strategies and the data. The main contribution of this paper is to make this connection while learning. We formulate the learning problem as a weighted constraint satisfaction problem, including constraints both for the fit of the payoffs and strategies to the data and the fit of the strategies to the payoffs. We use quantal response equilibrium as our notion of rationality for quantifying the latter fit. Our results show that incorporating rationality constraints can improve learning when the amount of data is limited.", "creator": "LaTeX with hyperref package"}}}