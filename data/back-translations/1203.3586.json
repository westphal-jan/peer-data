{"id": "1203.3586", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Mar-2012", "title": "Automated Text Summarization Base on Lexicales Chain and graph Using of WordNet and Wikipedia Knowledge Base", "abstract": "Automatic document aggregation technology is emerging and can offer a solution to the problem of information overload. Nowadays, document aggregation plays an important role in retrieving information. For a large number of documents, the task of presenting the user with a summary of each document makes it considerably easier to find the desired documents. Document aggregation is a process of automatically creating a compressed version of a given document that provides useful information to the user, and Summary of Multiple Documents is a summary that provides the bulk of the information content from a set of documents on an explicit or implicit main topic. In this paper, we will consider the effects of using lexical cohesion characteristics in the summary and knowledge base.", "histories": [["v1", "Thu, 15 Mar 2012 22:56:29 GMT  (898kb)", "http://arxiv.org/abs/1203.3586v1", null]], "reviews": [], "SUBJECTS": "cs.IR cs.CL", "authors": ["mohsen pourvali", "mohammad saniee abadeh"], "accepted": false, "id": "1203.3586"}, "pdf": {"name": "1203.3586.pdf", "metadata": {"source": "CRF", "title": "Automated Text Summarization Base on Lexicales Chain and graph Using of WordNet and Wikipedia Knowledge Base", "authors": ["Mohsen Pourvali", "Mohammad Saniee Abadeh"], "emails": [], "sections": [{"heading": "1. Introduction", "text": "The technology of automatic document summarization is maturing and may provide a solution to the information overload problem. Nowadays, document summarization plays an important role in information retrieval (IR). With a large volume of documents, presenting the user with a summary of each document greatly facilitates the task of finding the desired documents. Text summarization is the process of automatically creating a compressed version of a given text that provides useful information to users, and multi-document summarization is to produce a summary\ndelivering the majority of information content from a set of documents about an explicit or implicit main topic [14]. Authors of the paper [10] provide the following definition for a summary: \u201cA summary can be loosely defined as a text that is produced from one or more texts that conveys important information in the original text(s), and that is no longer than half of the original text(s) and usually significantly less than that. Text here is used rather loosely and can refer to speech, multimedia documents, hypertext, etc. The main goal of a summary is to present the main ideas in a document in less space. If all sentences in a text document were of equal importance, producing a summary would not be very effective, as any reduction in the size of a document would carry a proportional decrease in its in formativeness. Luckily, information content in a document appears in bursts, and one can therefore distinguish between more and less informative segments. Identifying the informative segments at the expense of the rest is the main challenge in summarization\u201d. assumes a tripartite processing model distinguishing three stages: source text interpretation to obtain a source representation, source representation transformation to summary representation, and summary text generation from the summary representation. A variety of document summarization methods have been developed recently. The paper [4] reviews research on automatic summarizing over the last decade. This paper reviews salient notions and developments, and seeks to assess the state-of-the-art for this challenging natural language processing (NLP) task. The review shows that some useful summarizing for various purposes can already be done but also, not surprisingly, that there is a huge amount more to do. Sentence based extractive summarization techniques are commonly used in automatic summarization to produce extractive summaries. Systems for extractive summarization are typically based on technique for sentence extraction, and attempt to identify the set of sentences that are most important for the overall understanding of a given document. In paper [11] proposed\nCopyright (c) 2012 International Journal of Computer Science Issues. All Rights Reserved.\nparagraph extraction from a document based on intradocument links between paragraphs. It yields a text relationship map (TRM) from intra-links, which indicate that the linked texts are semantically related. It proposes four strategies from the TRM: bushy path, depth-first path, segmented bushy path, augmented segmented bushy path. In our study we focus on sentence based extractive summarization. In this way we to express that The lexical cohesion structure of the text can be exploited to determine the importance of a sentence.\u00a0 Eliminate the ambiguity of the word has a significant impact on the inference sentence.\u00a0 In this article we will show that the separation text into the inside issues by using the correct concept Noticeable effect on the summary text is created. The experimental results on an open benchmark datasets from DUC01 and DUC02 show that our proposed approach can improve the performance compared to state-of-the-art summarization approaches. The rest of this paper is organized as follows: Section 2 introduces related works, Word sense disambiguation is presented in Section 3, clustering of the lexical chains is presented in Section 4, text segmentation base on the inner topics is presented in Section 5, The experiments and results are given in Section 6. Finally conclusion presents in section 7."}, {"heading": "2. Related work", "text": "Generally speaking, the methods can be either extractive summarization or abstractive summarization. Extractive summarization involves assigning salience scores to some units (e.g.sentences, paragraphs) of the document and extracting the sentences with highest scores, while abstraction summarization (e.g.http://www1.cs.columbia.edu/nlp/newsblaster/) usually needs information fusion, sentence compression and reformulation [14]. Sentence extraction summarization systems take as input a collection of sentences (one or more documents) and select some subset for output into a summary. This is best treated as a sentence ranking problem, which allows for varying thresholds to meet varying summary length requirements. Most commonly, such ranking approaches use some kind of similarity or centrality metric to rank sentences for inclusion in the summary \u2013 see, for example, [1].The centroid-based method [3] is one of the most popular extractive summarization methods. MEAD (http://www.summarization.com/mead/) is an implementation of the centroid-based method for either single-or-multi-document summarizing. It is based on sentence extraction. For each sentence in a cluster of related documents, MEAD computes three features and uses a linear combination of the three to determine what sentences are most salient. The three features used are\ncentroid score, position, and overlap with first sentence (which may happen to be the title of a document). For single-documents or (given) clusters it computes centroid topic characterizations using tf\u2013idf-type data. It ranks candidate summary sentences by combining sentence scores against centroid, text position value, and tf\u2013idf title/lead overlap. Sentence selection is constrained by a summary length threshold, and redundant new sentences avoided by checking cosine similarity against prior ones. In the past, extractive summarizers have been mostly based on scoring sentences in the source document. In paper [12] each document is considered as a sequence of sentences and the objective of extractive summarization is to label the sentences in the sequence with 1 and 0, where a label of 1 indicates that a sentence is a summary sentence while 0 denotes a non-summary sentence. To accomplish this task, is applied conditional random field, which is a state-of-theart sequence labeling method .In paper [15] proposed a novel extractive approach based on manifold\u2013ranking of sentences to query-based multi-document summarization. The proposed approach first employs the manifold\u2013ranking process to compute the manifold\u2013ranking score for each sentence that denotes the biased information-richness of the sentence, and then uses greedy algorithm to penalize the sentences with highest overall scores, which are deemed both informative and novel, and highly biased to the given query. The summarization techniques can be classified into two groups: supervised techniques that rely on pre-existing document-summary pairs, and unsupervised techniques, based on properties and heuristics derived from the text. Supervised extractive summarization techniques treat the summarization task as a two-class classification problem at the sentence level, where the summary sentences are positive samples while the non-summary sentences are negative samples. After representing each sentence by a vector of features, the classification function can be trained in two different manners [7]. One is in a discriminative way with well-known algorithms such as support vector machine (SVM) [16]. Many unsupervised methods have been developed for document summarization by exploiting different features and relationships of the sentences \u2013 see, for example [3] and the references therein. On the other hand, summarization task can also be categorized as either generic or query-based. A query-based summary presents the information that is most relevant to the given queries [2] and [14] while a generic summary gives an overall sense of the document\u2019s content [2] , [4] , [12] , [14]. The QCS system (Query, Cluster, and Summarize) [2] performs the following tasks in response to a query: retrieves relevant documents; separates the retrieved documents into clusters by topic, and creates a summary for each cluster. QCS is a tool for document retrieval that presents results in a format so that a user can quickly identify a set of documents of interest. In paper [17] are developed a generic, a query-based, and a hybrid summarizer, each with\nCopyright (c) 2012 International Journal of Computer Science Issues. All Rights Reserved.\ndiffering amounts of document context. The generic summarizer used a blend of discourse information and information obtained through traditional surface-level analysis. The query-based summarizer used only queryterm information, and the hybrid summarizer used some discourse information along with query-term information. The article [18] presents a multi-document, multi-lingual, theme-based summarization system based on modeling text cohesion (story flow)."}, {"heading": "3. Word Sense Disambiguation", "text": "For extracting lexical chains in a document, all words and correct senses of these words should be known. Humans disambiguate words by the current context. Lexical chaining algorithms depend on an assumption, and this assumption is that correct sense of words has stronger relations with other word senses. Using this assumption, lexical chaining algorithms first try to disambiguate all word occurrences. For this reason, word sense disambiguation (WSD) is an immediate application of lexical chains and an extrinsic evaluation methodology.\n3.1 generating and traversing the WordNet graph\nThe algorithm presented in this paper is based on lexical chains therefore the system needs to deeply analyze the text. Per word has a sense based on it\u2019s position in the sentence. For instance, the word bank in the follow sentences has different senses:\u201dBeautiful bank of river\u201d and \u201cBank failures were a major disaster\u201d. In first sentence bank means river\u2019s coast, but in the second sentence it means economic bank. The most appropriate sense must be chosen for this word and it cause increasing the connectedness in a lexical chain. In the algorithm presented in this paper , word sense are calculated locally . in this way the best word sense is extracted .we also use WordNet as an external source for disambiguation\nFig. 1 Diagram of algorithm\u2019s steps\nlet wi be a word in the document ,and wi have n senses , , \u2026 , , \u2026 , .in this procedure for finding the meaning of two words related locally together and placed in the same sentence , we assume all of the possible meanings and senses of per word as the first level of the traversing word tree then we process every sense in a returning algorithm .Next , we connect all the relations for that sense as it\u2019s descendants ,and these descendants are generated through relations that are Hypernym ,... . We do this process in a returning manner for n levels. Next, every first level sense of the one word compare with all the first level senses of the other word .Afterwards, the numbers of equalities are considered in integer digit .the same comparison is done for another word .if there isn\u2019t any equality, for each word we choose first sense that is most common.\nIn the above figure, we illustrate the relations of the tree .the root of the tree is considered as the target word, and the first level nodes as the senses of the target words. The nodes of the second, third,...levels are senses related with the first level nodes with Hypernym ,\u2026 relations. This tree is generated using returning functions and traversing of the tree is in the returning manner.\nCopyright (c) 2012 International Journal of Computer Science Issues. All Rights Reserved.\nThe above algorithm is one of the functions used for producing WordNet graph .this function is the part of the graph related with Hypernym relation .We use the great encyclopedia of Wikipedia because of the lack of special names in knowledge base of WordNet. This is done using the 3.5G XML file that is downloaded from dumps.wikipedia.org site. We have created a Xml_Reader for this file, and then goal word abstract is extracted. Extracted abstract is used same of the Glosses of another sentence\u2019s word we use creating the graph and traversing of it just for the first ,middle ,and last sentences ,and it is useful because these sentences usually encompass concise expression of the concept of the paragraph in most of the documents .in this manner we decrease the space of interpretation and therefore the time of calculation and the space of memory because we just need to keep some highlight sentences related with each other. After clarifying the actual senses of the all words in the prominent sentences and with the similarities and relations between every pair of the words, we put them in incessant lexical chains. For example in the tree of two words, and through the traversing of the first word, we put these two words in the same lexical chain as soon as we reach the first common sense between the subordinate graph of the first word and the first level nodes of the second word .For each lexical chain LCi , symbolizes that this word occur in the first sentence and the third sense of this word is chosen as the best sense. lexical chains created at first are generated from highlight sentences, and we use different algorithm for putting other words of sentences in the relevant lexical chains. in this algorithm with some changes in Lesk algorithm ,we use gloss concepts to represent similarities and differences of two words. let w1 , w2 are two words in text .firstly we extract senses of per word in normal Lesk algorithm from knowledge base"}, {"heading": "1 \u2208 1 2 \u2208 2 \u00a0 (1)", "text": "then we find overlaps between gloss concepts\n1, 2 | 1 \u22c2 2 |\u00a0 (2) And every two concepts that have more similarities are chosen as the target words. Moreover, we use not only unigram (sequence of one word) overlaps , but also bi-gram (sequence of two words) overlaps .if there is one of the senses the first word in gloss concepts of the second word, we give one special score to this two senses. We do this because two concepts may have common words that are not related with their similarities and it causes increasing in scores of that two senses and makes a mistake in choosing related word as a result. Considering the word sense in gloss concept of the second word\u2019s sense, we can award an additional chance to this sense to be chosen in process of choosing words for chains from words that are not semantically related in fact.\ns1 \u2208 gloss s2 or s2 \u2208 gloss s1 (3) 1, 2 1, 2 \u03bb is an additional score, and considering average existed words in sense\u2019s gloss concept and experimental tests, we find that the best value for \u03bb is 5 . it is important in surveying gloss concepts to survey just existed names and existed verbs. At first, there are lexical chains generated from highlight sentences with traversing the graph, and with assuming LCi as one of the lexical chains generated from last step and Wj as one of the other sentence\u2019s words and with using the above algorithm , Wj is compared with members of lexical chain LCi .if the similarity\u2019s score of Wj with one of the members of LCi is more than threshold T , Wj is added to LCi and from now on, other residual words are investigated based on their similarities with members of LCi and Wj ,too."}, {"heading": "4. Clustring Lexical Chains", "text": "After lexical chains are constructed for the text, there will be some weak lexical chains formed of single word senses. For each lexical chain LCi, a sentence occurrence vector Vi is formed. , \u2026 , , \u2026 , where n is the\nCopyright (c) 2012 International Journal of Computer Science Issues. All Rights Reserved.\nnumber of sentences in the document. Each is the number of LCi members in the sentence k. If sentence k has 3 members of LCi then is 3. Two lexical chains LCi and LCj go into the same cluster if their sentence occurrence vectors Vi and Vj are similar. Our clustering algorithm, starts from an initial cluster distribution, where each lexical chain is in its own cluster. Thus, our clustering algorithm starts with n clusters, where n is the number of lexical chains. Iteratively the most similar cluster pair is found and they are merged to form a single cluster. Clustering stops when the similarity between the most similar clusters is lower than a threshold value. for this purpose we used the well known formula from Linear Algebra:\n| | (4)\nIn the equation | | represents the Euclidean Length for the vector."}, {"heading": "5. Sequence Extraction", "text": "In our algorithm, the text is segmented from the perspective of each lexical chain cluster, finding the hot spots for each topic. For each cluster, connected sequences of sentences are extracted as segments. Sentences that are cohesively connected are usually talking about the same topic. For each lexical chain cluster Clj , we form sequences separately. For each sentence Sk, if sentence Sk has a lexical chain member in Clj , a new sequence is started or the sentence is added to the sequence. If there is no cluster member in Sk, then the sequence is ended. By using this procedure, text is segmented with respect to a cluster, identifying topic concentration points. Figure 5 is an example of Text Segmentation.\nEach sequence is scored using the formula in Equation (5).\n\u2217 \u2217 \u2217 (5) Where li is the number of sentences in the sequencei. SLCi is the number of lexical chains that starts in sequencei. PLCi is the number of lexical chains having a member in sequencei and f is the number of lexical chains in cluster. Score of the cluster score(Cli), is the average score of the lexical chains in the cluster. Our scoring function tries to model the connectedness of the segment using this cluster score."}, {"heading": "6. Experiments and Results", "text": "In this section, we conduct experiments to test our summarization method empirically.\n6.1 Datasets\nFor evaluation the performance of our methods we used two document datasets DUC01 and DUC02 and corresponding 100-word summaries generated for each of documents. The DUC01 and DUC02 are an open benchmark datasets which contain 147 and 567 documentssummary pairs from Document Understanding Conference (http://duc.nist.gov). We use them because they are for generic single-document extraction that we are interested in and they are well preprocessed. These datasets DUC01 and DUC02 are clustered into 30 and 59 topics, respectively. In those document datasets, stop words were removed using the stop list provided in ftp://ftp.cs.cornell.edu/pub/smart/english.stop and the terms were stemmed using Porter\u2019s scheme [9], which is a commonly used algorithm for word stemming in English.\n6.2 Evaluation metrics\nThere are many measures that can calculate the topical similarities between two summaries. For evaluation the results we use two methods. The first one is by precision (P), recall (R) and F1-measure which are widely used in Information Retrieval. For each document, the manually extracted sentences are considered as the reference summary (denoted by Summref). This approach compares the candidate summary (denoted by Summcand) with the reference summary and computes the P, R and F1-measure values as shown in formula (8) [12].\n\u2229 | | (6)\n\u2229 (7)\n(8) The second measure we use the ROUGE toolkit [5] , [6] for evaluation, which was adopted by DUC for automatically summarization evaluation. It has been shown that ROUGE is very effective for measuring document summarization. It measures summary quality by counting overlapping units such as the N-gram, word sequences and word pairs between the candidate summary and the reference summary. The ROUGE-N measure compares N-grams of two summaries, and counts the number of matches. The measure is defined by formula (9) [5] , [6].\nCopyright (c) 2012 International Journal of Computer Science Issues. All Rights Reserved.\nROUGE N \u2211 \u2211 \u2208\u2208\u2211 \u2211 \u2208\u2208 (9) where N stands for the length of the N-gram, Countmatch (Ngram) is the maximum number of N-grams co-occurring in candidate summary and a set of reference\u2013summaries. Count(N _ gram) is the number of N-grams in the reference summaries. We use two of the ROUGE metrics in the experimental results, ROUGE-1 (unigram-based) and ROUGE-2 (bigram-based).\n6.3 Simulation strategy and parameters\nThe parameters of our method are set as follows: depth of tree that is created for any word, n=3; extra value for Lesk algorithm, =5; Finally, we would like to point out that algorithm was developed from scratch in C#.net 2008 platform on a Pentium Dual CPU, 1.6 GHz PC, with 512 KB cache, and 1 GB of main memory in Windows XP environment.\n6.4 Performance evaluation and discussion\nWe compared our method with four methods CRF [12], NetSum [13], Manifold\u2013Ranking [15] and SVM [16]. Tables 1 and 2 show the results of all the methods in terms ROUGE-1, ROUGE-2, and F1-measure metrics on DUC01 and DUC02 datasets, respectively. As shown in Tables 1 and 2, on DUC01 dataset, the average values of ROUGE-1, ROUGE-2 and F1 metrics of all the methods are better than on DUC02 dataset. As seen from Tables 1 and 2 Manifold\u2013 Ranking is the worst method, In the Tables 1 and 2 highlighted (bold italic) entries represent the best performing methods in terms of average evaluation metrics. Among the methods NetSum, CRF, SVM and Manifold\u2013 Ranking the best result shows NetSum. We use relative improvement 100 for comparison. Compared with the best method NetSum, on DUC01 (DUC02) dataset our method improves the performance by 2.65% (3.62%), 4.26% (10.25%) and 1.81% (3.27%) in terms ROUGE-1, ROUGE-2 and F1, respectively.\nTable 1: Average values of evaluation metrics for summarization methods (DUC01\ndataset). Av.F1measure Av.ROUGE-2 Av.ROUGE-1 Methods 0.48124 0.18451 0.47656 Our method 0.47267 0.17697 0.46427 NetSum 0.46435 0.17327 0.45512 CRF 0.45357 0.17018 0.44628 SVM 0.44368 0.16635 0.43359 Manifold\u2013Ranking"}, {"heading": "7. Conclusion", "text": "We have attacked single document summarization. our algorithm is able to select sentences that human summarizers prefer to add to their summaries. our algorithm relies on WordNet which is theoretically domain independent, and also we have used Wikipedia for some of the words that do not exist in the WordNet. For summarization, we aimed to use more cohesion clues than other lexical chain based summarization algorithms. Our results were competitive with other summarization algorithms and achieved good results. Using co-occurrence of lexical chain members, our algorithm tries to build the bond between subject terms and the object terms in the text. With implicit segmentation, we tried to take advantage of lexical chains for text segmentation. It might be possible to use our algorithm as a text segmenter."}], "references": [{"title": "Summarization of text-based documents with a determination of latent topical sections and information-rich sentences", "author": ["R.M. Alguliev", "R.M. Alyguliev"], "venue": "Automatic Control and Computer Sciences ,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "QCS: A system for querying, clustering and summarizing documents", "author": ["D.M. Dunlavy", "D.P. O\u2019Leary", "J.M. Conroy", "J.D. Schlesinger"], "venue": "Information Processing and Management ,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2007}, {"title": "Lexrank: Graph-based lexical centrality as salience in text summarization", "author": ["G. Erkan", "D.R. Radev"], "venue": "Journal of Artificial Intelligence Research ,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2004}, {"title": "Automatic summarizing: The state of the art", "author": ["K.S. Jones"], "venue": "Information Processing and Management ,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2007}, {"title": "ROUGE: A package for automatic evaluation summaries", "author": ["Lin", "C. -Y"], "venue": "In Proceedings of the workshop on text summarization branches out,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2004}, {"title": "Automatic evaluation of summaries using N-gram co-occurrence statistics. In Proceedings of the 2003 conference of the north american chapter of the association for computational linguistics on human language technology", "author": ["Lin", "C. -Y", "E.H. Hovy"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2003}, {"title": "Explorations in automatic book summarization. In Proceedings of the 2007 joint conference on empirical methods in natural language processing and computational natural language learning (EMNLP-CoNLL 2007), (pp. 380\u2013389)", "author": ["R. Mihalcea", "H. Ceylan"], "venue": "Prague, Czech Republic.  IJCSI International Journal of Computer Science Issues,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "An Experimental Study of Graph Connectivity for Unsupervised Word Sense Disambiguation", "author": ["R. Navigli", "M. Lapata"], "venue": "IEEE Computer", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "An algorithm for suffix stripping", "author": ["M. Porter"], "venue": "Program ,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1980}, {"title": "Introduction to the special issue on summarization", "author": ["D. Radev", "E. Hovy", "K. McKeown"], "venue": "omputational Linguistics ,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2002}, {"title": "Automatic text structuring and summarization", "author": ["G. Salton", "A. Singhal", "M. Mitra", "C. Buckley"], "venue": "Information Processing and Management ,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1997}, {"title": "Document summarization using onditional random fields", "author": ["D. Shen", "Sun", "J. -T", "H. Li", "Q. Yang", "Z. Chen"], "venue": "In Proceedings of the 20th international joint conference on artificial intelligence (JCAI", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2007}, {"title": "Enhancing single-document summarization by combining RankNet and third-party sources. In Proceedings of the 2007 joint conference on empirical methods in natural language processing and computational natural language learning (EMNLP-CoNLL", "author": ["K.M. Svore", "L. Vanderwende", "C.J.C. Burges"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2007}, {"title": "Using only cross-document relationships for both generic and topic-focused multi-document summarizations", "author": ["X. Wan"], "venue": "Information Retrieval ,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2008}, {"title": "Manifold-ranking based topic-focused multidocument summarization", "author": ["X. Wan", "J. Yang", "J. Xiao"], "venue": "In Proceedings of the 20th international joint conference on artificial intelligence (IJCAI", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2007}, {"title": "Text summarization using a trainable summarizer and latent semantic analysis", "author": ["Yeh", "J-Y", "Ke", "H-R", "Yang", "W-P", "Meng", "I-H"], "venue": "Information Processing and Management ,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2005}, {"title": "Summary in context: Searching versus browsing", "author": ["D.M. McDonald", "H. Chen"], "venue": "ACM Transactions on Information Systems,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2006}, {"title": "One story, one flow: Hidden Markov story models for multilingual multi document summarization", "author": ["P. Fung", "G. Ngai"], "venue": "ACM Transaction on Speech and Language Processing,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2006}, {"title": "The Google similarity measure", "author": ["R.L. Cilibrasi", "P.M.B. Vitanyi"], "venue": "IEEE Transaction on Knowledge and Data Engineering,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2007}], "referenceMentions": [{"referenceID": 13, "context": "Text summarization is the process of automatically creating a compressed version of a given text that provides useful information to users, and multi-document summarization is to produce a summary delivering the majority of information content from a set of documents about an explicit or implicit main topic [14].", "startOffset": 309, "endOffset": 313}, {"referenceID": 9, "context": "Authors of the paper [10] provide the following definition for a summary: \u201cA summary can be loosely defined as a text that is produced from one or more texts that conveys important information in the original text(s), and that is no longer than half of the original text(s) and usually significantly less than that.", "startOffset": 21, "endOffset": 25}, {"referenceID": 3, "context": "The paper [4] reviews research on automatic summarizing over the last decade.", "startOffset": 10, "endOffset": 13}, {"referenceID": 10, "context": "In paper [11] proposed IJCSI International Journal of Computer Science Issues, Vol.", "startOffset": 9, "endOffset": 13}, {"referenceID": 13, "context": "edu/nlp/newsblaster/) usually needs information fusion, sentence compression and reformulation [14].", "startOffset": 95, "endOffset": 99}, {"referenceID": 0, "context": "Most commonly, such ranking approaches use some kind of similarity or centrality metric to rank sentences for inclusion in the summary \u2013 see, for example, [1].", "startOffset": 155, "endOffset": 158}, {"referenceID": 2, "context": "The centroid-based method [3] is one of the most popular extractive summarization methods.", "startOffset": 26, "endOffset": 29}, {"referenceID": 11, "context": "In paper [12] each document is considered as a sequence of sentences and the objective of extractive summarization is to label the sentences in the sequence with 1 and 0, where a label of 1 indicates that a sentence is a summary sentence while 0 denotes a non-summary sentence.", "startOffset": 9, "endOffset": 13}, {"referenceID": 14, "context": "In paper [15] proposed a novel extractive approach based on manifold\u2013ranking of sentences to query-based multi-document summarization.", "startOffset": 9, "endOffset": 13}, {"referenceID": 6, "context": "After representing each sentence by a vector of features, the classification function can be trained in two different manners [7].", "startOffset": 126, "endOffset": 129}, {"referenceID": 15, "context": "One is in a discriminative way with well-known algorithms such as support vector machine (SVM) [16].", "startOffset": 95, "endOffset": 99}, {"referenceID": 2, "context": "Many unsupervised methods have been developed for document summarization by exploiting different features and relationships of the sentences \u2013 see, for example [3] and the references therein.", "startOffset": 160, "endOffset": 163}, {"referenceID": 1, "context": "A query-based summary presents the information that is most relevant to the given queries [2] and [14] while a generic summary gives an overall sense of the document\u2019s content [2] , [4] , [12] , [14].", "startOffset": 90, "endOffset": 93}, {"referenceID": 13, "context": "A query-based summary presents the information that is most relevant to the given queries [2] and [14] while a generic summary gives an overall sense of the document\u2019s content [2] , [4] , [12] , [14].", "startOffset": 98, "endOffset": 102}, {"referenceID": 1, "context": "A query-based summary presents the information that is most relevant to the given queries [2] and [14] while a generic summary gives an overall sense of the document\u2019s content [2] , [4] , [12] , [14].", "startOffset": 176, "endOffset": 179}, {"referenceID": 3, "context": "A query-based summary presents the information that is most relevant to the given queries [2] and [14] while a generic summary gives an overall sense of the document\u2019s content [2] , [4] , [12] , [14].", "startOffset": 182, "endOffset": 185}, {"referenceID": 11, "context": "A query-based summary presents the information that is most relevant to the given queries [2] and [14] while a generic summary gives an overall sense of the document\u2019s content [2] , [4] , [12] , [14].", "startOffset": 188, "endOffset": 192}, {"referenceID": 13, "context": "A query-based summary presents the information that is most relevant to the given queries [2] and [14] while a generic summary gives an overall sense of the document\u2019s content [2] , [4] , [12] , [14].", "startOffset": 195, "endOffset": 199}, {"referenceID": 1, "context": "The QCS system (Query, Cluster, and Summarize) [2] performs the following tasks in response to a query: retrieves relevant documents; separates the retrieved documents into clusters by topic, and creates a summary for each cluster.", "startOffset": 47, "endOffset": 50}, {"referenceID": 16, "context": "In paper [17] are developed a generic, a query-based, and a hybrid summarizer, each with IJCSI International Journal of Computer Science Issues, Vol.", "startOffset": 9, "endOffset": 13}, {"referenceID": 17, "context": "The article [18] presents a multi-document, multi-lingual, theme-based summarization system based on modeling text cohesion (story flow).", "startOffset": 12, "endOffset": 16}, {"referenceID": 0, "context": "index == sp[1] tnew=Create New Nod(sp[2]) Call Hyp(ref tnew,level-1) Add_New_Nod_ToList(tnew)", "startOffset": 11, "endOffset": 14}, {"referenceID": 1, "context": "index == sp[1] tnew=Create New Nod(sp[2]) Call Hyp(ref tnew,level-1) Add_New_Nod_ToList(tnew)", "startOffset": 37, "endOffset": 40}, {"referenceID": 8, "context": "stop and the terms were stemmed using Porter\u2019s scheme [9], which is a commonly used algorithm for word stemming in English.", "startOffset": 54, "endOffset": 57}, {"referenceID": 11, "context": "This approach compares the candidate summary (denoted by Summcand) with the reference summary and computes the P, R and F1-measure values as shown in formula (8) [12].", "startOffset": 162, "endOffset": 166}, {"referenceID": 4, "context": "The second measure we use the ROUGE toolkit [5] , [6] for evaluation, which was adopted by DUC for automatically summarization evaluation.", "startOffset": 44, "endOffset": 47}, {"referenceID": 5, "context": "The second measure we use the ROUGE toolkit [5] , [6] for evaluation, which was adopted by DUC for automatically summarization evaluation.", "startOffset": 50, "endOffset": 53}, {"referenceID": 4, "context": "The measure is defined by formula (9) [5] , [6].", "startOffset": 38, "endOffset": 41}, {"referenceID": 5, "context": "The measure is defined by formula (9) [5] , [6].", "startOffset": 44, "endOffset": 47}, {"referenceID": 11, "context": "We compared our method with four methods CRF [12], NetSum [13], Manifold\u2013Ranking [15] and SVM [16].", "startOffset": 45, "endOffset": 49}, {"referenceID": 12, "context": "We compared our method with four methods CRF [12], NetSum [13], Manifold\u2013Ranking [15] and SVM [16].", "startOffset": 58, "endOffset": 62}, {"referenceID": 14, "context": "We compared our method with four methods CRF [12], NetSum [13], Manifold\u2013Ranking [15] and SVM [16].", "startOffset": 81, "endOffset": 85}, {"referenceID": 15, "context": "We compared our method with four methods CRF [12], NetSum [13], Manifold\u2013Ranking [15] and SVM [16].", "startOffset": 94, "endOffset": 98}], "year": 2012, "abstractText": "The technology of automatic document summarization is maturing and may provide a solution to the information overload problem. Nowadays, document summarization plays an important role in information retrieval. With a large volume of documents, presenting the user with a summary of each document greatly facilitates the task of finding the desired documents. Document summarization is a process of automatically creating a compressed version of a given document that provides useful information to users, and multi-document summarization is to produce a summary delivering the majority of information content from a set of documents about an explicit or implicit main topic. The lexical cohesion structure of the text can be exploited to determine the importance of a sentence/phrase. Lexical chains are useful tools to analyze the lexical cohesion structure in a text .In this paper we consider the effect of the use of lexical cohesion features in Summarization, And presenting a algorithm base on the knowledge base. Our algorithm at first find the correct sense of any word, Then constructs the lexical chains, remove Lexical chains that less score than other ,detects topics roughly from lexical chains, segments the text with respect to the topics and selects the most important sentences. The experimental results on an open benchmark datasets from DUC01 and DUC02 show that our proposed approach can improve the performance compared to sate-of-the-art summarization approaches.", "creator": "PScript5.dll Version 5.2.2"}}}