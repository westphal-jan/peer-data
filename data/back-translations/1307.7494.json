{"id": "1307.7494", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Jul-2013", "title": "ReAct! An Interactive Tool for Hybrid Planning in Robotics", "abstract": "We present ReAct!, an interactive tool for high-level reasoning for cognitive robot applications. ReAct! enables robotics researchers to describe the actions and changes of robots in dynamic domains without having to know the syntactical and semantic details of the underlying formalism in advance, and to solve planning problems using state-of-the-art automated argumentators without having to know their input / output language or use. In particular, ReAct! can be used to represent complex dynamic domains that exhibit contemporaneity, indirect effects of actions, and state / transition constraints. It also enables the embedding of externally defined calculations (e.g. checking for collision-free continuous trajectories) in representations of hybrid domains that require a close integration of (discrete) high-level arguments with (continuous) geometric arguments. ReAct! also enables the solution of planning problems that include objectives.", "histories": [["v1", "Mon, 29 Jul 2013 08:26:37 GMT  (698kb,D)", "http://arxiv.org/abs/1307.7494v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LO cs.RO", "authors": ["zeynep dogmus", "esra erdem", "volkan patoglu"], "accepted": false, "id": "1307.7494"}, "pdf": {"name": "1307.7494.pdf", "metadata": {"source": "CRF", "title": "REACT! An Interactive Tool for Hybrid Planning in Robotics", "authors": ["Zeynep Dogmus", "Esra Erdem", "Volkan Patoglu"], "emails": ["zeynepdogmus@sabanciuniv.net", "esraerdem@sabanciuniv.net", "vpatoglu@sabanciuniv.net"], "sections": [{"heading": null, "text": "Keywords: Reasoning about actions and change, AI planning, robotics"}, {"heading": "1 Introduction", "text": "As the robotics technology makes its transition from repetitive tasks in highly-structured industrial settings to loosely defined tasks in unstructured human environments, substantial new challenges are encountered. For instance, in order to be able to deploy robotic assistants in our society, these systems are expected to robustly deal with high complexity and wide variability of their surroundings to perform typical everyday tasks without sacrificing safety. Moreover, whenever more than one robotic agent is available in a domain, these robots are expected to collaborate with each other intelligently to share common tasks/resources. The complexity of the tasks and the variability of environment place high demands on the robots\u2019 intelligence and autonomy. Consequently, there exists a pressing need to furnish robotic systems with high-level cognitive capabilities.\nThe multidisciplinary field of robotics is diverse and the technical background of robotics researchers are highly heterogenous. Even though artificial intelligence (AI)\nar X\niv :1\n30 7.\n74 94\nv1 [\ncs .A\nI] 2\n9 Ju\nl 2 01\nplanning and reasoning about actions and change have been studied for decades in the field of computer science, leading to various action description languages, computational methods and automated reasoners, utilization of these outcomes in robotic systems has only recently gained momentum, thanks to increasing demands from new challenging domains, like service robotics applications. However, as many of the robotics researchers trained in diverse engineering aspects of robotics are not familiar with these logic-based formalisms, underlying theoretical AI concepts, and the state-of-the-art automated reasoners, it is still a challenge to integrate high-level automated reasoning methods in robotics applications.\nIn this paper, we introduce an interactive tool, called REACT!, to fulfill this need in robotics. With REACT!, robotics researchers can describe robots\u2019 actions and change in a dynamic domain, without having to know about the syntactic and semantic details of the underlying formalism in advance. Such dynamic domains may be quite sophisticated, allowing concurrency, indirect effects of actions, and state/transition constraints. They can also solve planning problems, which may involve temporal complex goals, using a state-of-the-art automated reasoner, without having to know about its input/output language or usage. Furthermore, while computing a (discrete) plan, some geometric constraints on continuous trajectories can be embedded in domain description, to ensure feasible (collision-free) plans.\nREACT! utilizes two sorts of automated reasoners: SAT solvers (e.g., CHAFF [1], MINISAT [2], MANYSAT [3]) and ASP solvers (e.g., CLASP [4]). According to SAT [5], the idea is to formalize (in general NP-hard) computational problems as a set of formulas in propositional logic so that the models of this set of formulas characterize the solutions of the given problem; and compute the models using SAT solvers. According to ASP [6,7], the idea is similar; though the problems are represented in a different logical formalism where the formulas (called rules) look different, have a non-monotonic meaning and the models (called answer sets [8]) are computed using ASP solvers. Both SAT and ASP have been applied in various real-world applications. For instance, SAT has been used for software and hardware verification [9] and planning [10]; ASP has been applied to biomedical informatics [11], space shuttle control [12], workforce management [13], etc.\nAlthough both SAT and ASP provide efficient solvers and their formalisms are general enough to represent various kinds of computational problems, their formalisms do not provide special structures for a systematic formalization of dynamic domains. To facilitate the use of such general knowledge representation formalisms for representing dynamic domains, some other form of logic-based formalisms, called action description languages [14], have been introduced. Further, to be able to use SAT/ASP solvers for reasoning about actions and change, sound transformations from action description languages to SAT and ASP have been developed [15,16,17].\nREACT! provides an interactive interface to systematically represent actions and change in the action language C+ [17]. It also allows the users to solve planning problems using state-of-the-art SAT/ASP solvers. In that sense, REACT! helps robotic researchers to learn, understand, and use high-level representation and reasoning concepts, formalisms, methods, and reasoners."}, {"heading": "2 Reasoning about Actions and Change", "text": "For an agent to act intelligently in a dynamic domain, one of the essential high level cognitive functions for that agent is reasoning about its actions and the change that is directly or indirectly caused by these actions. For instance, AI planning is one of such reasoning tasks: a robotic agent should be able to autonomously find a sequence of actions to execute, in order to reach a given goal from the initial state she is at. To perform reasoning tasks, an agent should know about which actions she can execute, as well as how these actions change the world. For that, we can describe the actions of the agent in a logic-based formalism so that the agent can autonomously perform reasoning tasks (e.g., find plans) by using an automated reasoner based on logic-based inferences.\nOn the other hand, representing actions of an agent in a logic-based formalism requires some background in logic as well as the specific representation language. Consider, for instance, a mobile robot that can go from one location to another location, as well as pick and place some boxes in these locations. States of the world can be described by means of three fluents (i.e., predicates whose truth value may change over time): one describing the location of the robot, one describing the locations of objects, another describing whether the robot is holding an object or not. Then, we describe the action of a robot going to a location y, by representing the preconditions (i.e., the robot is not at y) and the direct effects (i.e., the robot is at y). We also describe the indirect effects of actions, and state/transition constraints, like:\nRamifications: If the robot is holding a box b, and the robot goes to some location y, then as an indirect effect of this action the location of the box b becomes y as well.\nState Constraints: Every robot (or box) cannot be at two different locations, and two boxes cannot be at the same location at any state of the world.\nFurther, we need the commonsense law of inertia: if an action does not change the location of the robot (resp. a box), then the robot\u2019s (resp. a box\u2019s) location remains to be the same.\nFigures 1, 2, and 3 show parts of the robot\u2019s domain, in particular the representation of the action of going to a location, in SAT (by a set of clauses), in ASP (by a set of rules) and in C+ (by a set of causal laws), respectively. In these representations, y ranges over locations {L1, . . . ,Lm}, and b ranges over boxes {B1, . . . ,Bn}. As you can see from these formulations, it is hard to understand which clauses in the SAT formulation describe preconditions and which clauses represent direct effects. The ASP formulation is more concise and it is slightly easier to understand each rule; however, it is still hard to figure out which kind of rules (one with nothing on the left-hand-side of the arrow, or one with some atom) to use for representing what. The C+ formulation is closer to natural language and easier to understand: causal laws of the form nonexecutable a if f describe preconditions \u00ac f of an action a; causal laws of the form a causes f describe direct effects f of an action a; and causal laws of the form caused f if g describe ramifications of actions. However, we still need to know about the syntax and semantics of formulas in C+ to formalize a robotic domain.\nMoreover, once the domain is represented and the reasoning problem is specified formally, to solve a given planning problem, we need to know the specific usage and/or\ncommand lines of the relevant automated reasoners. Therefore, it is challenging and time-consuming to learn how dynamic domains can be represented in such a logicbased formalism, and how automated reasoners can be used to solve planning problems (and other reasoning problems, such as prediction and postdiction).\nWe would like to enable the robotic researchers to start using automated reasoners to solve various planning problems in dynamic domains with robotic agents, and assist\nthem to have a better understanding of the concepts on reasoning about actions and change, so that they can build/use robots that are furnished with deliberate reasoning capabilities to autonomously perform some tasks. With this motivation, we have built an interactive tool that guides robotic researchers\n\u2013 to represent dynamic domains in a generic way (so they do not have to know about a specific action description language), \u2013 to embed continuous geometric reasoning in discrete task planning in a modular way (so they do not have to modify the source codes of relevant planners or implement new hybrid planning algorithms), and \u2013 to solve planning problems using various planners/reasoners (so they do not have to know any specifics of these systems)."}, {"heading": "3 REACT!", "text": "REACT! is an interactive tool that helps the users represent a dynamic domain in a logic-based formalism, and solve a planning problem in this domain using an automated\nreasoner. It guides the users with an interactive user-interface providing explanations and examples, so that the users do not have to know about the underlying formalism or the reasoner. REACT! also assists users to have an understanding of fundamental concepts in knowledge representation and reasoning.\nFor instance, the preconditions and direct effects of the action of going to a location are described in REACT! as depicted in Figure 4. As seen in the upper inset, the user describes (in the left part of the user-interface) the following precondition of goto(L1): the robot is not already at L1. While describing the precondition, the user can use the variables and the object constants (shown on the right part of the user-interface) declared earlier, with the aid of auto-completion. After the user adds this precondition, it is displayed in the syntax of C+ on the right part of the interface, as shown in the lower inset in Figure 4. The question mark symbols on the user-interface provide information about what preconditions and effects are, how they look like, with examples.\nOnce the action domain is described, the user checks whether the domain description is consistent. If the description is consistent, then the user continues with the specification of a planning problem by means of an initial state and a goal state, as shown in the upper inset in Figure 5. This problem can then be solved by an automated reasoner.\nCurrently, the underlying formalism of REACT! is the action description language C+. The user can choose one of the state-of-the-art SAT solvers among CHAFF, MINISAT and MANYSAT, or the state-of-the-art ASP solver CLASP as an automated reasoner. If the user chooses a SAT solver, REACT! uses CCALC [18] to transform the action domain description in C+ to a set of clauses, and calls the SAT solver to find a plan for the given problem with respect to the described action domain, as shown in the lower inset in Figure 5. If the user chooses an ASP solver, REACT! uses the program CPLUS2ASP [19] to transform the action domain description in C+ to a set of rules in ASP, and calls CLASP to find a plan for the given problem with respect to the described action domain (Figure 5).\n3.1 Hybrid Planning with REACT!\nREACT! allows integration of continuous geometric constraints (e.g., by calling a motion planner to check whether going to some location by means of a continuous trajectory is feasible without colliding to any static object) as well as temporal constraints (e.g., by defining durative actions and imposing deadlines for completion of tasks) into discrete high-level representation of a domain description, so that the discrete plan computed by REACT! is feasible. Such an integration is possible by means of \u201cexternal predicates\u201d [20,21]\u2014predicates that are not part of the action domain description (i.e., different from fluents and actions) but that are defined externally in some programming language (e.g., C++, Prolog). Integrating geometric reasoning (in preconditions of actions) and temporal reasoning (in planning problems) are possible thanks to the expressive input language of CCALC. Essentially, CCALC performs some preprocessing of external predicates, while transforming causal laws into propositional logic formulas. The ASP solver CLASP also supports external predicates.\nThe lower inset in Figure 6 shows an example of integrating collision checking as part of the preconditions of the action of going to some location L1 (from a location L2), by means of an external predicate pathExists(L1,L2) declared earlier as in the upper inset. By this way, geometric reasoning is embedded in high-level representation: while computing a task-plan, the reasoner takes into account geometric models and kinematic relations by means of external predicates implemented for geometric reasoning. In that sense, the geometric reasoner guides the reasoner to find feasible solutions.\nAn interesting example of hybrid planning with temporal constraints is given for the housekeeping domain in [22]. In this domain, not only an external predicate pathExists is used to check geometric feasibility of action of going to some location, but also a second external predicate timeEstimate is utilized to estimate the time it will take for the robot to traverse the path. Then, while describing the planning problem, temporal\nconstraints, for instance the constraint that the total time required to complete the plan should be less than a predefined value, can be added to the specification of a planning problem (the upper inset of Figure 5).\nHybrid planning with geometric and temporal constraints has been applied in various domains (e.g., cognitive factories [23], service robotics [22,24], robotic manipulation [25,26]) in the spirit of cognitive robotics [27]. REACT! allows formulations of these domains.\n3.2 Sample Domains and Simulation Interface of REACT!\nTo facilitate the use of REACT! for robotic applications and help robotic researchers to gain experience on fundamental concepts in reasoning about actions and change, REACT! provides a set of example domains, including Tower of Hanoi and Multi-Agent Path Planning problems. In each example domain, REACT! provides explanations at each tab (e.g., about the concepts of a fluent, an action, preconditions/effects of an action, ramifications, static/transition constraints, planning problem), so that the user can have a better understanding of systematically representing a dynamic domain. Once a plan is computed by an automated reasoner, REACT! also provides a dynamic simulation for an execution of the plan, using OPENRAVE [28]. For the Tower of Hanoi example, REACT! also provides a wrapper to execute the plans on a physical KuKa youBot manipulator through Robot Operating System (ROS). For instance, Figure 7 shows a snapshot of a simulation of a plan computed by MINISAT for a Tower of Hanoi problem, while a movie of its physical implementation can be viewed from the following link: http://cogrobo.sabanciuniv.edu/?p=690."}, {"heading": "4 Conclusions", "text": "We have introduced REACT! as an interactive tool for cognitive robotic applications. Significantly reducing the learning time, REACT! lets robotic researchers to concentrate on robotic applications, by enabling them to describe action domains systematically and to solve complex problems relevant to robotics applications using automated reasoners.\nREACT! not only assists its users to have a better understanding of the concepts on reasoning about actions and change, but also provides sample formalizations of some action domains, as well as dynamic simulations of plans computed by a selected automated reasoner."}, {"heading": "Acknowledgments", "text": "This work is partially supported by TUBITAK 111E116."}], "references": [{"title": "Chaff: Engineering an efficient SAT solver", "author": ["M.W. Moskewicz", "C.F. Madigan", "Y. Zhao", "L. Zhang", "S. Malik"], "venue": "Proc. 38th Design Automation Conf. (DAC).", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2001}, {"title": "An extensible SAT-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "Proc. 6th Int. Conf. Theory and Applications of Satisfiability Testing (SAT).", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2003}, {"title": "ManySAT: A parallel SAT solver", "author": ["Y. Hamadi", "S. Jabbour", "L. Sais"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation 6(4)", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2009}, {"title": "clasp: A conflict-driven answer set solver", "author": ["M. Gebser", "B. Kaufmann", "A. Neumann", "T. Schaub"], "venue": "Proc. of LPNMR.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2007}, {"title": "Cognitive robotics", "author": ["C.P. Gomes", "H. Kautz", "A. Sabharwal", "B. Selman"], "venue": "Handbook of Knowledge Representation, Elsevier", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2008}, {"title": "What is answer set programming? In: Proc", "author": ["V. Lifschitz"], "venue": "of AAAI, MIT Press", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2008}, {"title": "Answer set programming at a glance", "author": ["G. Brewka", "T. Eiter", "M. Truszczynski"], "venue": "Commun. ACM 54(12)", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Classical negation in logic programs and disjunctive databases", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "New Generation Computing 9", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1991}, {"title": "Effective use of boolean satisfiability procedures in the formal verification of superscalar and vliw microprocessors", "author": ["M.N. Velev", "R.E. Bryant"], "venue": "J. Symb. Comput. 35(2)", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2003}, {"title": "Planning as satisfiability", "author": ["H.A. Kautz", "B. Selman"], "venue": "Proc. of ECAI.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1992}, {"title": "Finding answers and generating explanations for complex biomedical queries", "author": ["E. Erdem", "Y. Erdem", "H. Erdogan", "U. Oztok"], "venue": "Proc. of AAAI.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2011}, {"title": "An a-prolog decision support system for the space shuttle", "author": ["M. Nogueira", "M. Balduccini", "M. Gelfond", "R. Watson", "M. Barry"], "venue": "Proc. of PADL, Springer", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2001}, {"title": "Team-building with answer set programming in the Gioia-Tauro seaport", "author": ["F. Ricca", "G. Grasso", "M. Alviano", "M. Manna", "V. Lio", "S. Iiritano", "N. Leone"], "venue": "Theory and Practice of Logic Programming 12", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2012}, {"title": "Action languages", "author": ["M. Gelfond", "V. Lifschitz"], "venue": "Electronic Transactions on Artificial Intelligence 2", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1998}, {"title": "Satisfiability planning with causal theories", "author": ["N. McCain", "H. Turner"], "venue": "Proc. of KR.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1998}, {"title": "Representing transition systems by logic programs", "author": ["V. Lifschitz", "H. Turner"], "venue": "Proc. of LPNMR.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1999}, {"title": "Nonmonotonic causal theories", "author": ["E. Giunchiglia", "J. Lee", "V. Lifschitz", "N. McCain", "H. Turner"], "venue": "Artificial Intelligence 153(1\u20132)", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2004}, {"title": "Causal theories of action and change", "author": ["N. McCain", "H. Turner"], "venue": "Proc. 14th Nat. Conf. Artificial Intelligence.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1997}, {"title": "Representing the language of the causal calculator in answer set programming", "author": ["M. Casolary", "J. Lee"], "venue": "Proc. of ICLP (Technical Communications).", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2011}, {"title": "Causality in Commonsense Reasoning about Actions", "author": ["N. McCain"], "venue": "PhD thesis, UT Austin", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1997}, {"title": "Effective integration of declarative rules with external evaluations for semantic-web reasoning", "author": ["T. Eiter", "G. Ianni", "R. Schindlauer", "H. Tompits"], "venue": "Proc. of ESWC.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2006}, {"title": "Answer set programming for reasoning with semantic knowledge in collaborative housekeeping robotics", "author": ["E. Aker", "V. Patoglu", "E. Erdem"], "venue": "Proc. Int. IFAC Symp. Robot Control (SYROCO).", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2012}, {"title": "Causality-based planning and diagnostic reasoning for cognitive factories", "author": ["E. Erdem", "K. Haspalamutgil", "V. Patoglu", "T. Uras"], "venue": "Proc. 17th IEEE Int. Conf. Emerging Technologies and Factory Automation (ETFA).", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2012}, {"title": "Causal reasoning for planning and coordination of multiple housekeeping robots", "author": ["E. Aker", "A. Erdogan", "E. Erdem", "V. Patoglu"], "venue": "Proc. 12th Int. Conf. Logic Programming and Nonmonotonic Reasoning (LPNMR).", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}, {"title": "Combining high-level causal reasoning with low-level geometric reasoning and motion planning for robotic manipulation", "author": ["E. Erdem", "K. Haspalamutgil", "C. Palaz", "V. Patoglu", "T. Uras"], "venue": "Proc. of IEEE Int. Conf. Robotics and Automation (ICRA).", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2011}, {"title": "A case study on the Tower of Hanoi Challenge: Representation, reasoning and execution", "author": ["G. Havur", "K. Haspalamutgil", "C. Palaz", "E. Erdem", "V. Patoglu"], "venue": "Proc. of IEEE Int. Conf. Robotics and Automation (ICRA).", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2013}, {"title": "Applications of action languages in cognitive robotics", "author": ["E. Erdem", "V. Patoglu"], "venue": "Correct Reasoning.", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2012}, {"title": "Automated Construction of Robotic Manipulation Programs", "author": ["R. Diankov"], "venue": "PhD thesis, Carnegie Mellon University, Robotics Institute", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": ", CHAFF [1], MINISAT [2], MANYSAT [3]) and ASP solvers (e.", "startOffset": 8, "endOffset": 11}, {"referenceID": 1, "context": ", CHAFF [1], MINISAT [2], MANYSAT [3]) and ASP solvers (e.", "startOffset": 21, "endOffset": 24}, {"referenceID": 2, "context": ", CHAFF [1], MINISAT [2], MANYSAT [3]) and ASP solvers (e.", "startOffset": 34, "endOffset": 37}, {"referenceID": 3, "context": ", CLASP [4]).", "startOffset": 8, "endOffset": 11}, {"referenceID": 4, "context": "According to SAT [5], the idea is to formalize (in general NP-hard) computational problems as a set of formulas in propositional logic so that the models of this set of formulas characterize the solutions of the given problem; and compute the models using SAT solvers.", "startOffset": 17, "endOffset": 20}, {"referenceID": 5, "context": "According to ASP [6,7], the idea is similar; though the problems are represented in a different logical formalism where the formulas (called rules) look different, have a non-monotonic meaning and the models (called answer sets [8]) are computed using ASP solvers.", "startOffset": 17, "endOffset": 22}, {"referenceID": 6, "context": "According to ASP [6,7], the idea is similar; though the problems are represented in a different logical formalism where the formulas (called rules) look different, have a non-monotonic meaning and the models (called answer sets [8]) are computed using ASP solvers.", "startOffset": 17, "endOffset": 22}, {"referenceID": 7, "context": "According to ASP [6,7], the idea is similar; though the problems are represented in a different logical formalism where the formulas (called rules) look different, have a non-monotonic meaning and the models (called answer sets [8]) are computed using ASP solvers.", "startOffset": 228, "endOffset": 231}, {"referenceID": 8, "context": "For instance, SAT has been used for software and hardware verification [9] and planning [10]; ASP has been applied to biomedical informatics [11], space shuttle control [12], workforce management [13], etc.", "startOffset": 71, "endOffset": 74}, {"referenceID": 9, "context": "For instance, SAT has been used for software and hardware verification [9] and planning [10]; ASP has been applied to biomedical informatics [11], space shuttle control [12], workforce management [13], etc.", "startOffset": 88, "endOffset": 92}, {"referenceID": 10, "context": "For instance, SAT has been used for software and hardware verification [9] and planning [10]; ASP has been applied to biomedical informatics [11], space shuttle control [12], workforce management [13], etc.", "startOffset": 141, "endOffset": 145}, {"referenceID": 11, "context": "For instance, SAT has been used for software and hardware verification [9] and planning [10]; ASP has been applied to biomedical informatics [11], space shuttle control [12], workforce management [13], etc.", "startOffset": 169, "endOffset": 173}, {"referenceID": 12, "context": "For instance, SAT has been used for software and hardware verification [9] and planning [10]; ASP has been applied to biomedical informatics [11], space shuttle control [12], workforce management [13], etc.", "startOffset": 196, "endOffset": 200}, {"referenceID": 13, "context": "To facilitate the use of such general knowledge representation formalisms for representing dynamic domains, some other form of logic-based formalisms, called action description languages [14], have been introduced.", "startOffset": 187, "endOffset": 191}, {"referenceID": 14, "context": "Further, to be able to use SAT/ASP solvers for reasoning about actions and change, sound transformations from action description languages to SAT and ASP have been developed [15,16,17].", "startOffset": 174, "endOffset": 184}, {"referenceID": 15, "context": "Further, to be able to use SAT/ASP solvers for reasoning about actions and change, sound transformations from action description languages to SAT and ASP have been developed [15,16,17].", "startOffset": 174, "endOffset": 184}, {"referenceID": 16, "context": "Further, to be able to use SAT/ASP solvers for reasoning about actions and change, sound transformations from action description languages to SAT and ASP have been developed [15,16,17].", "startOffset": 174, "endOffset": 184}, {"referenceID": 16, "context": "REACT! provides an interactive interface to systematically represent actions and change in the action language C+ [17].", "startOffset": 114, "endOffset": 118}, {"referenceID": 17, "context": "If the user chooses a SAT solver, REACT! uses CCALC [18] to transform the action domain description in C+ to a set of clauses, and calls the SAT solver to find a plan for the given problem with respect to the described action domain, as shown in the lower inset in Figure 5.", "startOffset": 52, "endOffset": 56}, {"referenceID": 18, "context": "If the user chooses an ASP solver, REACT! uses the program CPLUS2ASP [19] to transform the action domain description in C+ to a set of rules in ASP, and calls CLASP to find a plan for the given problem with respect to the described action domain (Figure 5).", "startOffset": 69, "endOffset": 73}, {"referenceID": 19, "context": "Such an integration is possible by means of \u201cexternal predicates\u201d [20,21]\u2014predicates that are not part of the action domain description (i.", "startOffset": 66, "endOffset": 73}, {"referenceID": 20, "context": "Such an integration is possible by means of \u201cexternal predicates\u201d [20,21]\u2014predicates that are not part of the action domain description (i.", "startOffset": 66, "endOffset": 73}, {"referenceID": 21, "context": "An interesting example of hybrid planning with temporal constraints is given for the housekeeping domain in [22].", "startOffset": 108, "endOffset": 112}, {"referenceID": 22, "context": ", cognitive factories [23], service robotics [22,24], robotic manipulation [25,26]) in the spirit of cognitive robotics [27].", "startOffset": 22, "endOffset": 26}, {"referenceID": 21, "context": ", cognitive factories [23], service robotics [22,24], robotic manipulation [25,26]) in the spirit of cognitive robotics [27].", "startOffset": 45, "endOffset": 52}, {"referenceID": 23, "context": ", cognitive factories [23], service robotics [22,24], robotic manipulation [25,26]) in the spirit of cognitive robotics [27].", "startOffset": 45, "endOffset": 52}, {"referenceID": 24, "context": ", cognitive factories [23], service robotics [22,24], robotic manipulation [25,26]) in the spirit of cognitive robotics [27].", "startOffset": 75, "endOffset": 82}, {"referenceID": 25, "context": ", cognitive factories [23], service robotics [22,24], robotic manipulation [25,26]) in the spirit of cognitive robotics [27].", "startOffset": 75, "endOffset": 82}, {"referenceID": 26, "context": ", cognitive factories [23], service robotics [22,24], robotic manipulation [25,26]) in the spirit of cognitive robotics [27].", "startOffset": 120, "endOffset": 124}, {"referenceID": 27, "context": "Once a plan is computed by an automated reasoner, REACT! also provides a dynamic simulation for an execution of the plan, using OPENRAVE [28].", "startOffset": 137, "endOffset": 141}], "year": 2013, "abstractText": "We present REACT!, an interactive tool for high-level reasoning for cognitive robotic applications. REACT! enables robotic researchers to describe robots\u2019 actions and change in dynamic domains, without having to know about the syntactic and semantic details of the underlying formalism in advance, and solve planning problems using state-of-the-art automated reasoners, without having to learn about their input/output language or usage. In particular, REACT! can be used to represent sophisticated dynamic domains that feature concurrency, indirect effects of actions, and state/transition constraints. It allows for embedding externally defined calculations (e.g., checking for collision-free continuous trajectories) into representations of hybrid domains that require a tight integration of (discrete) high-level reasoning with (continuous) geometric reasoning. REACT! also enables users to solve planning problems that involve complex goals. Such variety of utilities are useful for robotic researchers to work on interesting and challenging domains, ranging from service robotics to cognitive factories. REACT! provides sample formalizations of some action domains (e.g., multiagent path planning, Tower of Hanoi), as well as dynamic simulations of plans computed by a state-of-the-art automated reasoner (e.g., a SAT solver or an ASP solver).", "creator": "LaTeX with hyperref package"}}}