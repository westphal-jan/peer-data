{"id": "1310.1757", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Oct-2013", "title": "A Deep and Tractable Density Estimator", "abstract": "The Neural Autoregressive Distribution Estimator (NADE) and its real-rated version RNADE are competitive density models of multidimensional data in a variety of areas. These models use a fixed, arbitrary arrangement of data dimensions. It is easy to condition variables at the beginning of the order and marginalize variables at the end of the order, but other inference tasks require approximate inference. In this work, we introduce an efficient procedure to simultaneously train a NADE model for every possible arrangement of variables by sharing parameters for all of these models. This allows us to use the most convenient model for each available inference task, and ensembles of such models with different arrangements are immediately available. Unlike the original NADE, our training method also scales to deep models. Empirically, ensembles of Deep NADE models receive state-of-the-art density estimation.", "histories": [["v1", "Mon, 7 Oct 2013 12:42:41 GMT  (357kb,D)", "http://arxiv.org/abs/1310.1757v1", "9 pages, 4 tables, 1 algorithm, 5 figures"], ["v2", "Sat, 11 Jan 2014 17:13:56 GMT  (360kb,D)", "http://arxiv.org/abs/1310.1757v2", "9 pages, 4 tables, 1 algorithm, 5 figures. To appear ICML 2014, JMLR W&amp;CP volume 32"]], "COMMENTS": "9 pages, 4 tables, 1 algorithm, 5 figures", "reviews": [], "SUBJECTS": "stat.ML cs.LG", "authors": ["benigno uria", "iain murray", "hugo larochelle"], "accepted": true, "id": "1310.1757"}, "pdf": {"name": "1310.1757.pdf", "metadata": {"source": "META", "title": "A Deep and Tractable Density Estimator", "authors": ["Benigno Uria", "Iain Murray", "Hugo Larochelle"], "emails": ["B.URIA@ED.AC.UK", "I.MURRAY@ED.AC.UK", "HUGO.LAROCHELLE@USHERBROOKE.CA"], "sections": [{"heading": "1. Introduction", "text": "In probabilistic approaches to machine learning, large collections of variables are described by a joint probability distribution. There is considerable interest in flexible model distributions that can fit and generalize from training data in a variety of applications. To draw inferences from these models, we often condition on a subset of observed variables, and report the probabilities of settings of another subset of variables, marginalizing out any unobserved nuisance variables. The solutions to these inference tasks often cannot be computed exactly, and require iterative approximations such as Monte Carlo or variational methods (e.g., Bishop, 2006). Models for which inference is tractable would be preferable.\nNADE (Larochelle & Murray, 2011), and its real-valued\nvariant RNADE (Uria et al., 2013), have been shown to be state of the art joint density models for a variety of realworld datasets, as measured by their predictive likelihood. These models predict each variable sequentially in an arbitrary order, fixed at training time. Variables at the beginning of the order can be set to observed values, i.e., conditioned on. Variables at the end of the ordering are not required to make predictions; marginalizing these variables requires simply ignoring them. However, marginalizing over and conditioning on any arbitrary subsets of variables will not be easy in general.\nIn this work, we present a procedure for training a factorial number of NADE models simultaneously; one for each possible ordering of the variables. The parameters of these models are shared, and we optimize the mean cost over all orderings using a stochastic gradient technique. After fitting the shared parameters, we can extract, in constant time, the NADE model with the variable ordering that is most convenient for any given inference task. While the different NADE models might not be consistent in their probability estimates, this property is actually something we can leverage to our advantage, by generating ensembles of NADE models \u201con the fly\u201d (i.e., without explicitly training any such ensemble) which are even better estimators than any single NADE. In addition, our procedure is able to train a deep version of NADE incurring an extra computational expense only linear in the number of layers."}, {"heading": "2. Background: NADE and RNADE", "text": "Autoregressive methods use the product rule to factorize the probability density function of a D-dimensional vectorvalued random variable x as a product of one-dimensional conditional distributions:\np(x) = D\u220f d=1 p(xod |xo<d), (1)\nwhere o is aD-tuple in the set of permutations of (1, . . . , D) that serves as an ordering of the elements in x, and xo<d\nar X\niv :1\n31 0.\n17 57\nv1 [\nst at\n.M L\n] 7\nO ct\n2 01\ndenotes the elements of x indexed by the first d\u22121 elements in o. This factorisation of the pdf assumes no conditional independences. The only element constraining the modelling ability of an autoregressive model is the family of distributions chosen for each of the conditionals.\nIn the case of binary data, autoregressive models based on logistic regressors and neural networks have been proposed (Frey, 1998; Bengio & Bengio, 2000). The neural autoregressive density estimator (NADE) (Larochelle & Murray, 2011), inspired by a mean-field approximation to the conditionals of Equation (1) of a restricted Boltzmann machine (RBM), uses a set of one-hidden-layer neural networks with tied parameters to calculate each conditional:\np(xod = 1 |xo<d) = sigm(V \u00b7,odhd + bod) (2) hd = sigm(W \u00b7,o<dxo<d + c), (3)\nwhere H is the number of hidden units, and V \u2208 RH\u00d7D, b \u2208 RD, W \u2208 RH\u00d7D, c \u2208 RH are the parameters of the NADE model.\nA NADE can be trained by regularized gradient descent on the negative log-likelihood given the training datasetX:\nJFO(\u03b8) = \u2212 log p(X |\u03b8) = \u2212 \u2211\nx(n)\u2208X\nlog p(x(n) |\u03b8). (4)\nIn NADE the activation of the hidden units in (3) can be computed recursively:\nhd = sigm(ad) (5)\nwhere:\na1 = c (6) ad+1 = ad + xodW \u00b7,od . (7)\nThis relationship between activations allows faster training and evaluation of a NADE model, O(DH), than autoregressive models based on untied neural networks, O(D2H).\nNADE has recently been extended to allow density estimation of real-valued vectors (Uria et al., 2013) by using mixture density networks or MDNs (Bishop, 1994) for each of the conditionals in Equation (1). The networks\u2019 hidden layers use the same parameter sharing as before, with activations computed as in (7).\nNADE and RNADE have been shown to offer better modelling performance than mixture models and untied neural networks in a range of datasets. Compared to binary RBMs with hundreds of hidden units, NADEs usually have slightly worse modelling performance, but they have three desirable properties that the former lack: 1) an easy training procedure by gradient descent on the negative likelihood of a training dataset, 2) a tractable expression for the density of\na datapoint, 3) a direct ancestral sampling procedure, rather than requiring Markov chain Monte Carlo methods.\nInference under a NADE is easy as long as the variables to condition on are at the beginning of its ordering, and the ones to marginalise over are at the end. To infer the density of xoa...ob while conditioning on xo1...oa\u22121 , and marginalising over xob+1...D , we simply write\np(xoa...b |xo1...a\u22121) = b\u220f\nd=a\np(xod |xo<d), (8)\nwhere each one-dimensional conditional is directly available from the model. However, as in most models, arbitrary probabilistic queries require approximate inference methods.\nA disadvantage of NADE compared to other neural network models is that an efficient deep formulation (e.g., Bengio, 2009) is not available. While extending NADE\u2019s definition to multiple hidden layers is trivial (we simply introduce regular feed-forward layers between the computation of Equation 3 and of Equation 2), we lack a recursive expression like Equations 6 and 7 for the added layers. Thus, when NADE has more than one hidden layer, each additional hidden layer must be computed separately for each input dimension, yielding a complexity cubic on the size of the layersO(DH2L), whereL represents the number of layers. This scaling seemingly made a deep NADE impractical, except for datasets of low dimensionality."}, {"heading": "3. Training a factorial number of NADEs", "text": "Looking at the simplicity of inference in Equation 8, a naive approach that could exploit this property for any inference task would be to train as many NADE models as there are possible orderings of the input variables. Obviously, this approach, requiring O(D!) time and memory, is not viable. However, we show here that through some careful parameter tying between models, we can derive an efficient stochastic procedure for training all models, minimizing the mean of their negative log-likelihood objectives.\nConsider for now a parameter tying strategy that simply uses the same weight matrices and bias parameters across all NADE models (we will refine this proposal later). We will now write p(x |\u03b8, o) as the joint distribution of the NADE model that uses ordering o and p(x(n)od |x(n)o<d ,\u03b8, o<d, od) as its associated conditionals, which are computed as specified in Equations (2) and (3), or their straightforward extension in the deep network case. Thus we explicitly treat the ordering o as a random variable. Notice that the dth conditional only depends on the first d elements of the ordering, and is thus exactly the same across NADE models sharing their first d elements in o. During training we will attempt to minimise the expected (over variable orderings) negative\nlog-likelihood of the model for the training data:\nJOA(\u03b8) = E o\u2208D! \u2212 log p(X |\u03b8, o) (9)\n\u221d E o\u2208D! E x(n)\u2208X \u2212 log p(x(n) |\u03b8, o), (10)\nwhere D! is the set of all orderings (i.e. permutations of D elements). This objective does not correspond to a mixture model, in which case the expectation over orderings would be inside the log operation.\nUsing NADE\u2019s autoregressive expression for the density of a datapoint, (10) can be rewritten as:\nJOA(\u03b8) = E o\u2208D! E x(n)\u2208X D\u2211 d=1 \u2212 log p(x(n)od |x(n)o<d ,\u03b8, o).\n(11) By moving the expectation over orderings inside the sum over dimensions, the ordering of the dimensions, o, can be split in three parts: o<d standing for the index of the d\u22121 first dimensions in the ordering; od the index of the d-th dimension in the ordering, and o>d standing for the indices of the remaining dimensions in the ordering. Therefore, the loss function can be rewritten as:\nJOA(\u03b8) = E x(n)\u2208X D\u2211 d=1 E o<d E od E o>d \u2212 log p(x(n)od |x(n)o<d ,\u03b8, o<d, od)\n(12)\nthe value of each term does not depend on o>d. Therefore, it can be simplified as:\nJOA(\u03b8) = E x(n)\u2208X D\u2211 d=1 E o<d E od \u2212 log p(x(n)od |x(n)o<d ,\u03b8, o<d, od) (13) In practice, this loss function (13) will have a very high number of terms and will have to be approximated by sampling x(n), d, and o<d. The innermost expectation over values of od can be calculated cheaply for a NADE given that the hidden unit states hd are shared for all possible od. Therefore, assuming all orderings are equally probable, we will estimate JOA(\u03b8) by:\nJ\u0302OA(\u03b8) = D D \u2212 d+ 1 \u2211 od \u2212 log p(x(n)od |x(n)o<d ,\u03b8, o<d, od)\n(14)\nwhich provides an unbiased estimator of (10). Thus training can be done by descent on the stochastic gradient of J\u0302OA(\u03b8). An implementation of this order-agnostic training procedure corresponds to an artificial neural network withD inputs and D outputs (or an MDN in the real-valued case), where the input values in o\u2265d have been set to zero and gradients are backpropagated only from the outputs in o\u2265d, and rescaled by DD\u2212d+1 .\nThe end result is a stochastic training update costing O(DH +H2L), as in regular multilayer neural networks. At test time, we unfortunately cannot avoid a complexity of O(DH2L) and perform D passes through the neural network to obtain all D conditionals for some given ordering. However, this is still tractable, unlike computing probabilities in a restricted Boltzmann machine or a deep belief network."}, {"heading": "3.1. Improved parameter sharing using input masks", "text": "While the parameter tying proposed so far is simple, in practice it leads to poor performance. One issue is that the values of the hidden units, computed using (3), are the same when a dimension is in xo>d (a value to be predicted) and when the value of that dimension is zero and conditioned on. When training just one NADE with a fixed o, each output unit knows which inputs feed into it, but in the multiple ordering case that information is lost when the input is zero.\nIn order to make this distinction possible, we augment the parameter sharing scheme by appending to the inputs a binary mask vector mo<d \u2208 {0, 1}D indicating which dimensions are present in the input. That is, the i-th element of mo<d is 1 if i \u2208 o<d and 0 otherwise. One interpretation of this scheme is that the bias vector c of the first hidden layer is now dependent on the ordering o and the value of d, thus slightly relaxing the strength of parameter sharing between the NADE models. We\u2019ve found in practice that this adjustment is crucial to obtain good estimation performance. Some results showing the difference in statistical performance with and without training masks can be seen in Table 2 as part of our experimental analysis (see Section 6 for details)."}, {"heading": "4. On the fly generation of NADE ensembles", "text": "Our order-agnostic training procedure can be thought of as producing a set of parameters that can be used by a factorial number of NADEs, one per ordering of the input variables. These different NADEs will not, in general, agree on the probability of a given datapoint. While this disagreement might look unappealing at first, we can actually use this source of variability to our advantage, and obtain better estimates than possible with a set of consistent models.\nA NADE with a given input ordering corresponds to a different hypothesis space than other NADEs with different ordering. In other words, each NADE with a different ordering is a model in its own right, with slightly different inductive bias, despite the parameter sharing.\nA reliable approach to improve on some given estimator is to instead construct an ensemble of multiple, strong but different estimators, e.g. with bagging (Ormoneit & Tresp, 1996) or stacking (Smyth & Wolpert, 1999). Our training proce-\ndure suggest a straightforward way of generating ensembles of NADE models: generate a set of uniformly distributed orderings {o(k)}Kk=1 over the input variables and use the average probability 1K \u2211K k=1 p(x|\u03b8, o(k)) as our estimator.\nEnsemble averaging increases the computational cost of density estimation linearly with the size of the ensemble, while the complexity of sampling doesn\u2019t change (we pick an ordering o(k) at random from the ensemble and sample from the corresponding NADE). Importantly, the computational cost of training remains the same, unlike ensemble methods such as bagging. Moreover, an adequate number of components can be chosen after training, and can even be adapted to the available computational budget on the fly."}, {"heading": "5. Related work", "text": "As mentioned previously, autoregressive density/distribution estimation has been explored before by others. For the binary data case, Frey (1998) considered the use of logistic regression conditional models, while Bengio & Bengio (2000) proposed a single layer neural network architecture, with a parameter sharing scheme different from the one in the NADE model (Larochelle & Murray, 2011). In all these cases however, a single (usually random) input ordering was chosen and maintained during training.\nGregor & LeCun (2011) proposed training a variant of the NADE architecture under stochastically generated random orderings. Like us, they observed much worse performance than when choosing a single variable ordering, which motivates our proposed parameter sharing scheme relying on input masks. Gregor & LeCun generated a single ordering for each training update, and conditioned on contexts of all possible sizes to compute the log-probability of an example and its gradients. Our stochastic approach uses only a single conditioning configuration for each update, but computes the average log-probability for the next dimension under all possible future orderings. This change allowed us to generalize NADE to deep architectures with an acceptable computational cost.\nOur algorithm also bears similarity with denoising autoencoders (Vincent et al., 2008) trained using so-called \u201cmasking noise\u201d. There are two crucial differences however. The first is that our procedure corresponds to training on the average reconstruction of only the inputs that are missing from the input layer. The second is that, unlike denoising autoencoders, the NADE models that we train can be used as tractable density estimators."}, {"heading": "6. Experimental results", "text": "We performed experiments on several binary and real-valued datasets to asses the performance of NADEs trained using\nour order-agnostic procedure. We report the average test log-likelihood of each model, that is, the average log-density of datapoints in a held-out test set. In the case of NADEs trained in an order-agnostic way, we need to choose an ordering of the variables so that one may calculate the density of the test datapoints. We report the average of the average test log-likelihoods using ten different orderings chosen at random. Note that this is different from an ensemble, where the probabilities are averaged before calculating its logarithm. To reduce clutter, we have not reported the standard deviation across orderings. In all cases, this standard deviation has magnitude smaller than the log-likelihood\u2019s standard error due to the finite size of our test sets. These standard errors are also small enough not to alter the ranking of the different models. In the case of ensembles of NADEs the standard deviation due to different sets of orderings is, as expected, even smaller. Every results table is partitioned in two halves, the top half contains baselines and the bottom half results obtained using our training procedure. In every table the log-likelihood of the best model, and the log-likelihood of the best ensemble are shown in bold, but in the case of ensembles only if it outperforms the simple models.\nTraining configuration details common to all datasets (except where specified later on) follow. We trained all orderagnostic NADEs and RNADEs using minibatch stochastic gradient descent on JOA, (13). The initial learning rate, which was chosen independently for each dataset, was reduced linearly to reach zero after the last iteration. For the purpose of consistency, we used rectified linear units (Nair & Hinton, 2010) in all experiments. We found that this type of unit allow us to use higher learning rates and made training converge faster. We used Nesterov\u2019s accelerated gradient (Sutskever, 2013) with momentum value 0.9. No weight decay was applied. However, to avoid overfitting, we early-stopped training by estimating the log-likelihood on a validation dataset after each training iteration using the J\u0302OA estimator, (14). For models with several hidden layers, each hidden layer was pretrained using the same hyperparameter values but only for 20 iterations, see recursive procedure in Algorithm 1."}, {"heading": "6.1. Binary datasets", "text": "We start by measuring the statistical performance of a NADE trained using our order-agnostic procedure on eight binary UCI datasets (Bache & Lichman, 2013) of dimensionalities between 112 and 300.\nExperimental configuration details follow. We fixed the number of units per hidden layer to 500, following Larochelle & Murray (2011). We used minibatches of size 100. Training was run for 100 iterations, each consisting of 1000 weight updates. The initial learning rate\nAlgorithm 1 Pretraining of a NADE with n hidden layers on dataset X.\n1: procedure PRETRAIN(n, X) 2: if n = 1 then 3: return RANDOM-ONE-HIDDEN-LAYER-NADE() 4: else 5: nade\u2190 PRETRAIN(n\u2212 1) 6: nade\u2190 REMOVE-OUTPUT-LAYER(nade) 7: nade\u2190 ADD-A-NEW-HIDDEN-LAYER(nade) 8: nade\u2190 ADD-A-NEW-OUTPUT-LAYER(nade) 9: nade\u2190 TRAIN-ALL(nade,X, iters = 20)\n10: return nade 11: end if 12: end procedure\nwas cross-validated for each of the datasets among values {0.016, 0.004, 0.001, 0.00025, 0.0000675}. Results are shown on Table 1. We compare our method to mixtures of multivariate Bernoullis with their number of components cross-validated among {32, 64, 128, 256, 512, 1024}, tractable RBMs of 23 hidden units, fully visible sigmoidal Bayes networks (FVSBN), and NADEs trained using a fixed ordering of the variables. All baseline results are taken from Larochelle & Murray (2011) and details can be found there. NADEs trained in an order-agnostic manner obtain performances close to those of NADEs trained on a fixed ordering. The use of several hidden layers offers no advantage on these datasets. However, ensembles of NADEs obtain higher test log-likelihoods on all datasets.\nWe also present results on binarized-MNIST (Salakhutdinov & Murray, 2008), a binary dataset of 28 by 28 pixel images of handwritten digits. Unlike classification, density estimation on this dataset remains a challenging task.\nExperimental configuration details follow. Training was run for 200 iterations each consisting of 1000 parameter updates,\nusing minibatches of size 1000. The initial learning rate was set to 0.001 and chosen manually by optimizing the validation-set log-likelihood on preliminary runs.\nResults for MNIST are shown in Table 2. We compare our method with mixtures of multivariate Bernoulli distributions with 10 and 500 components, fixed-ordering NADEs, an RBMs (500 hidden units), and two-hidden-layer DBNs (500 and 2000 hidden units on each layer) whose performance was estimated by Salakhutdinov & Murray (2008); Murray & Salakhutdinov (2009). In order to provide a more direct comparison to our results, we also report the performance of NADEs trained using a fixed variable-ordering, minibatch stochastic gradient descent and sigmoid or rectified linear units. We found the type of hidden-unit did not affect statistical performance, while our minibatch SGD implementation seems to obtain slightly higher log-likelihoods than previously reported.\nOne and two hidden-layer NADEs trained by minimizing JOA obtain marginally lower (worse) test-likelihoods than a NADE trained for a fixed ordering of the inputs, but still perform much better than mixtures of multivariate Bernoullis and very close to the estimated performance of RBMs. More than two hidden layers are not beneficial on this dataset.\nEnsembles of NADEs obtained by using NADEs with different variable orderings but trained simultaneously with our order-agnostic procedure obtain better statistical performance than NADEs trained using a fixed ordering. These EoNADEs can also surpass the estimated performance of RBMs with the same number of hidden units, and even approach the estimated performance of a (larger) 2-hiddenlayer deep belief network. A more detailed account of the statistical performance of EoNADEs can be seen in Figure 1. We also report the performance on NADE trained by minimizing JOA but without input masks. Input masks are necessary for obtaining competitive results.\nSamples from a 2 hidden layer (500 hidden units per layer) NADE trained using the order-agnostic method are shown\nin Figure 2. Most of the samples can be identified as digits. Figure 4 shows some receptive fields from the model\u2019s first hidden layer (i.e. columns of W ). Most of the receptive fields resemble pen strokes. We also show their associated receptive fields on the input masks . These can be thought of as biases that activate or deactivate a hidden unit. Most of them will activate the unit when the input mask contains a region of unknown values (zeros in the input mask) flanked by a region of known values (ones in the input mask).\nHaving at our disposal a NADE for each possible ordering of the inputs makes it easy to perform any inference task.\nIn Figure 3 we show examples of marginalization and imputation tasks. Arbitrarily chosen regions of digits in the MNIST test-set are to be marginalized or sampled from. An RBM or a DBN would require an exponential number of operations to calculate either the marginal density or the density of the complete images. A NADE trained on a fixed ordering of the variables would be able to easily calculate the densities of the complete images, but would require approximate inference to calculate the marginal densities. Both an RBM and a fixed-order NADE require MCMC methods in order to sample the hollowed regions. However, with our order-agnostic training procedure we can easily calculate the marginal densities and sample the hollowed regions in constant time just by constructing a NADE with a convenient ordering of the pixels."}, {"heading": "6.2. Real-valued datasets", "text": "We also compared the performance of RNADEs trained with our order-agnostic procedure to RNADEs trained for a fixed ordering. We start by comparing the performance on three low-dimensional UCI datasets (Bache & Lichman, 2013) of heterogeneous data, namely: red wine, white wine and parkinsons. We dropped the other two datasets tested by Uria et al. (2013), because some of their dimensions only take a finite number of values even if those are realvalued. We report the test-log-likelihood on 10 folds of the dataset, each with 90% of the data used for training\nand 10% for testing. All experiments use normalized data. Each dimension is normalized separately by subtracting its training-set average and dividing by its standard deviation.\nExperimental details follow. Learning rate and weight decay rates were chosen by per-fold cross-validation; using grid\nsearch. One ninth of the training set examples were used for validation purposes. Once the hyperparameter values had been chosen, a final experiment was run using all the training data. In order to prevent overfitting, training was stopped when observing a training likelihood higher than the one obtained at the optimal stopping point in the corresponding validation run. All RNADEs trained had a mixture of 20 Gaussian components for output, and were trained by stochastic gradient descent on JOA. We fixed the number of hidden units to 50, following Uria et al. (2013). The learning rate was chosen among {0.02, 0.005, 0.002, 0.0005} and the weight decay rate among {0.02, 0.002, 0}. The results are shown in Table 3. RNADEs trained using our procedure outperform RNADEs trained for a fixed ordering on the red wine and white wine datasets. On the Parkinsons dataset, RNADEs trained for a fixed ordering perform better. The former two datasets require the use of considerable weight decay rates when trained for a fixed ordering. It is possible that parameter tying across RNADEs with different orderings acts as a better form of regularization than weight decay. Ensembles of RNADEs obtained better statistical performance than all baselines.\nWe also measured the performance of our new training procedure on 8 by 8 patches of natural images in the BSDS300 dataset. We compare the performance of RNADEs with different number of hidden layers trained with our procedure against a one-hidden layer RNADE trained for a fixed ordering (Uria et al., 2013), and with mixtures of Gaussians, which remain the state of the art in this problem (Zoran & Weiss, 2012).\nWe adopted the setup described by Uria et al. (2013). The average intensity of each patch was subtracted from each pixel\u2019s value. After this, all datapoints lay on a 63- dimensional subspace, for this reason only 63 pixels were modelled, discarding the bottom-right pixel.\nExperimental details follow. The dataset\u2019s 200 training image set was partitioned into a training set and a validation set of 180 and 20 images respectively. Hyperparameters were chosen by preliminary manual search on the model likelihood for the validation dataset. We used a mixture of 10 Gaussian components for the output distribution of each pixel. All hidden layers were fixed to a size of 1000 units. The minibatch size was set to 1000. Training was run for 2000 iterations, each consisting of 1000 weight updates. The initial learning rate was set to 0.001. Pretraining of hidden layers was done for 50 iterations.\nThe results are shown in Table 4. RNADEs with less than 3 hidden layers trained using our order-agnostic procedure obtained lower statistical performance than a fixed-ordering NADE and a mixture of Gaussians. However RNADEs with more than 3 layers are able to beat both baselines and obtain\nTable 3. Average test log-likelihood for different models on three real-valued UCI datasets. Baselines are taken from (Uria et al., 2013).\nModel Red wine White wine Parkinsons\nGaussian \u221213.18 \u221213.20 \u221210.85 MFA \u221210.19 \u221210.73 \u22121.99 RNADE (fixed) \u22129.36 \u221210.23 \u22120.90 RNADE 1hl \u22128.79 \u22129.98 \u22122.34 RNADE 2hl \u22128.49 \u22129.57 \u22121.56 RNADE 3hl \u22128.14 \u22129.52 \u22121.42 EoRNADE 1hl 2 ord \u22128.62 \u22129.83 \u22121.89 EoRNADE 2hl 2 ord \u22128.24 \u22129.33 \u22121.17 EoRNADE 3hl 2 ord \u22127.83 \u22129.31 \u22121.07 EoRNADE 1hl 16 ord \u22128.30 \u22129.64 \u22121.43 EoRNADE 2hl 16 ord \u22127.88 \u22129.10 \u22120.63 EoRNADE 3hl 16 ord \u22127.42 \u22129.08 \u22120.52\nwhat are, to the extent of our knowledge, the best results ever reported on this task. Ensembles of RNADEs also show an improvement in statistical performance compared to the use of single RNADEs.\nNo signs of overfitting were observed. Even when using 6 hidden layers, the cost on the validation dataset never started increasing steadily during training. Therefore it may be possible to obtain even better results using more hidden layers or more hidden units per layer.\nSamples from the 6 hidden layers NADE trained in an orderagnostic manner are shown in Figure 5. The samples are similar to the examples from the test set, and display long range dependencies."}, {"heading": "7. Conclusions", "text": "We have introduced a new training procedure that simultaneously fits a NADE for each possible ordering of the\nFigure 5. Top: 50 examples of 8\u00d7 8 patches in the BSDS300 dataset ordered by decreasing likelihood under a 6-hidden-layer NADE. Bottom: 50 samples from a 6-hidden-layer NADE. The bottom-right pixel intensity of each patch was calculated as minus the sum of all other pixel intensities (see text).\ndimensions. In addition, this new training procedure is able to train deep versions of NADE with a linear increase in computation, and construct ensembles of NADEs on the fly without incurring any extra training computational cost.\nUnsurprisingly, the statistical performance of models trained using our order agnostic method is dataset dependent. NADEs trained with our procedure outperform mixture models in all datasets we have investigated. However, for most datasets several hidden layers are required to surpass or equal the performance of NADEs trained for a fixed ordering of the variables. Nonetheless, our method allows fast and exact marginalization and sampling, unlike the rest of the methods compared.\nModels trained using our order-agnostic procedure obtained what are, to the best of our knowledge, the best statistical performances ever reported on the red wine, white wine and BSDS300 8\u00d78-image-patches datasets. Statistical performance is even better if we take into account ensembles of NADEs with tied parameters but different orderings, which we can obtain at no extra training cost and have a mild effect on test-time cost. The use of ensembles improved performance in all datasets analyzed."}, {"heading": "ACKNOWLEDGMENTS", "text": "We thank John Bridle and Steve Renals for useful discussions."}], "references": [{"title": "Learning deep architectures for AI", "author": ["Y. Bengio"], "venue": "Foundations and trends in Machine Learning,", "citeRegEx": "Bengio,? \\Q2009\\E", "shortCiteRegEx": "Bengio", "year": 2009}, {"title": "Modeling High-Dimensional Discrete Data with Multi-Layer Neural Networks", "author": ["Y. Bengio", "S. Bengio"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "Bengio and Bengio,? \\Q1999\\E", "shortCiteRegEx": "Bengio and Bengio", "year": 1999}, {"title": "Mixture Density Networks", "author": ["C.M. Bishop"], "venue": "Technical report,", "citeRegEx": "Bishop,? \\Q1994\\E", "shortCiteRegEx": "Bishop", "year": 1994}, {"title": "Pattern recognition and machine", "author": ["C.M. Bishop"], "venue": null, "citeRegEx": "Bishop,? \\Q2006\\E", "shortCiteRegEx": "Bishop", "year": 2006}, {"title": "Graphical models for machine learning and digital communication", "author": ["B.J. Frey"], "venue": null, "citeRegEx": "Frey,? \\Q1998\\E", "shortCiteRegEx": "Frey", "year": 1998}, {"title": "Learning Representations by Maximizing Compression", "author": ["K. Gregor", "Y. LeCun"], "venue": "Technical report,", "citeRegEx": "Gregor and LeCun,? \\Q2011\\E", "shortCiteRegEx": "Gregor and LeCun", "year": 2011}, {"title": "The Neural Autoregressive Distribution Estimator", "author": ["H. Larochelle", "I. Murray"], "venue": "In Proceedings of the 14th International Conference on Artificial Intelligence and Statistics (AISTATS 2011),", "citeRegEx": "Larochelle and Murray,? \\Q2011\\E", "shortCiteRegEx": "Larochelle and Murray", "year": 2011}, {"title": "Evaluating probabilities under high-dimensional latent variable models", "author": ["I. Murray", "R. Salakhutdinov"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "Murray and Salakhutdinov,? \\Q2008\\E", "shortCiteRegEx": "Murray and Salakhutdinov", "year": 2008}, {"title": "Rectified linear units improve restricted boltzmann machines", "author": ["V. Nair", "G.E. Hinton"], "venue": "In Proceedings of the 27th International Conference on Machine Learning", "citeRegEx": "Nair and Hinton,? \\Q2010\\E", "shortCiteRegEx": "Nair and Hinton", "year": 2010}, {"title": "Improved Gaussian mixture density estimates using Bayesian penalty terms and network averaging", "author": ["D. Ormoneit", "V. Tresp"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "Ormoneit and Tresp,? \\Q1995\\E", "shortCiteRegEx": "Ormoneit and Tresp", "year": 1995}, {"title": "On the Quantitative Analysis of Deep Belief Networks", "author": ["R. Salakhutdinov", "I. Murray"], "venue": "In Proceedings of the 25th International Conference on Machine Learning (ICML 2008),", "citeRegEx": "Salakhutdinov and Murray,? \\Q2008\\E", "shortCiteRegEx": "Salakhutdinov and Murray", "year": 2008}, {"title": "Linearly combining density estimators via stacking", "author": ["P. Smyth", "D. Wolpert"], "venue": "Machine Learning,", "citeRegEx": "Smyth and Wolpert,? \\Q1999\\E", "shortCiteRegEx": "Smyth and Wolpert", "year": 1999}, {"title": "Training Recurrent Neural Networks", "author": ["I. Sutskever"], "venue": "PhD thesis, University of Toronto,", "citeRegEx": "Sutskever,? \\Q2013\\E", "shortCiteRegEx": "Sutskever", "year": 2013}, {"title": "RNADE: The real-valued neural autoregressive density-estimator", "author": ["B. Uria", "I. Murray", "H. Larochelle"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "Uria et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Uria et al\\.", "year": 2013}, {"title": "Extracting and Composing Robust Features with Denoising Autoencoders", "author": ["P. Vincent", "H. Larochelle", "Y. Bengio", "P.A. Manzagol"], "venue": "In Proceedings of the 25th International Conference on Machine Learning (ICML", "citeRegEx": "Vincent et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Vincent et al\\.", "year": 2008}, {"title": "Natural images, Gaussian mixtures and dead leaves", "author": ["D. Zoran", "Y. Weiss"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "Zoran and Weiss,? \\Q2012\\E", "shortCiteRegEx": "Zoran and Weiss", "year": 2012}], "referenceMentions": [{"referenceID": 13, "context": "NADE (Larochelle & Murray, 2011), and its real-valued variant RNADE (Uria et al., 2013), have been shown to be state of the art joint density models for a variety of realworld datasets, as measured by their predictive likelihood.", "startOffset": 68, "endOffset": 87}, {"referenceID": 4, "context": "In the case of binary data, autoregressive models based on logistic regressors and neural networks have been proposed (Frey, 1998; Bengio & Bengio, 2000).", "startOffset": 118, "endOffset": 153}, {"referenceID": 13, "context": "NADE has recently been extended to allow density estimation of real-valued vectors (Uria et al., 2013) by using mixture density networks or MDNs (Bishop, 1994) for each of the conditionals in Equation (1).", "startOffset": 83, "endOffset": 102}, {"referenceID": 2, "context": ", 2013) by using mixture density networks or MDNs (Bishop, 1994) for each of the conditionals in Equation (1).", "startOffset": 50, "endOffset": 64}, {"referenceID": 3, "context": "For the binary data case, Frey (1998) considered the use of logistic regression conditional models, while Bengio & Bengio (2000) proposed a single layer neural network architecture, with a parameter sharing scheme different from the one in the NADE model (Larochelle & Murray, 2011).", "startOffset": 26, "endOffset": 38}, {"referenceID": 0, "context": "For the binary data case, Frey (1998) considered the use of logistic regression conditional models, while Bengio & Bengio (2000) proposed a single layer neural network architecture, with a parameter sharing scheme different from the one in the NADE model (Larochelle & Murray, 2011).", "startOffset": 106, "endOffset": 129}, {"referenceID": 14, "context": "Our algorithm also bears similarity with denoising autoencoders (Vincent et al., 2008) trained using so-called \u201cmasking noise\u201d.", "startOffset": 64, "endOffset": 86}, {"referenceID": 12, "context": "We used Nesterov\u2019s accelerated gradient (Sutskever, 2013) with momentum value 0.", "startOffset": 40, "endOffset": 57}, {"referenceID": 13, "context": "We dropped the other two datasets tested by Uria et al. (2013), because some of their dimensions only take a finite number of values even if those are realvalued.", "startOffset": 44, "endOffset": 63}, {"referenceID": 13, "context": "We fixed the number of hidden units to 50, following Uria et al. (2013). The learning rate was chosen among {0.", "startOffset": 53, "endOffset": 72}, {"referenceID": 13, "context": "We compare the performance of RNADEs with different number of hidden layers trained with our procedure against a one-hidden layer RNADE trained for a fixed ordering (Uria et al., 2013), and with mixtures of Gaussians, which remain the state of the art in this problem (Zoran & Weiss, 2012).", "startOffset": 165, "endOffset": 184}, {"referenceID": 13, "context": "We adopted the setup described by Uria et al. (2013). The average intensity of each patch was subtracted from each pixel\u2019s value.", "startOffset": 34, "endOffset": 53}, {"referenceID": 13, "context": "Baselines are taken from (Uria et al., 2013).", "startOffset": 25, "endOffset": 44}], "year": 2017, "abstractText": "The Neural Autoregressive Distribution Estimator (NADE) and its real-valued version RNADE are competitive density models of multidimensional data across a variety of domains. These models use a fixed, arbitrary ordering of the data dimensions. One can easily condition on variables at the beginning of the ordering, and marginalize out variables at the end of the ordering, however other inference tasks require approximate inference. In this work we introduce an efficient procedure to simultaneously train a NADE model for each possible ordering of the variables, by sharing parameters across all these models. We can thus use the most convenient model for each inference task at hand, and ensembles of such models with different orderings are immediately available. Moreover, unlike the original NADE, our training procedure scales to deep models. Empirically, ensembles of Deep NADE models obtain state of the art density estimation performance.", "creator": "LaTeX with hyperref package"}}}