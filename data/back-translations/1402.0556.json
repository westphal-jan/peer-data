{"id": "1402.0556", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Feb-2014", "title": "Generating Extractive Summaries of Scientific Paradigms", "abstract": "Researchers and scholars are increasingly able to quickly understand large amounts of technical material, and our goal is to effectively address this need by using bibliometric text mining and abstract techniques to create abstracts of scientific literature. We will show how we can use citations to create automatically generated, easily consumable, technically extractive abstracts. First, we propose C-LexRank, a model for summarizing individual scientific articles based on citations, using community references and extracting important information-rich sentences. Next, we expand our experiments to compile a series of papers covering the same scientific topic. We will create extractive summaries of a set of questions (QA) and dependency parsing (DP) papers, their summaries and citations, and show that citations contain unique information that allows for a summary.", "histories": [["v1", "Tue, 4 Feb 2014 01:33:10 GMT  (637kb)", "http://arxiv.org/abs/1402.0556v1", null]], "reviews": [], "SUBJECTS": "cs.IR cs.CL", "authors": ["vahed qazvinian", "dragomir r radev", "saif m mohammad", "bonnie dorr", "david zajic", "michael whidby", "taesun moon"], "accepted": false, "id": "1402.0556"}, "pdf": {"name": "1402.0556.pdf", "metadata": {"source": "CRF", "title": "Generating Extractive Summaries of Scientific Paradigms", "authors": ["Vahed Qazvinian", "Dragomir R. Radev", "Saif M. Mohammad", "Bonnie Dorr", "David Zajic", "Michael Whidby", "Taesun Moon"], "emails": ["vahed@umich.edu", "radev@umich.edu", "saif.mohammad@nrc-cnrc.gc.ca", "bonnie@umiacs.umd.edu", "dmzajic@umiacs.umd.edu", "mawhidby@umd.edu", "tsmoon@umiacs.umd.edu"], "sections": [{"heading": "1. Introduction", "text": "In today\u2019s rapidly expanding disciplines, scientists and scholars are constantly faced with the daunting task of keeping up with knowledge in their field. In addition, the increasingly interconnected nature of real-world tasks often requires experts in one discipline to rapidly learn about other areas in a short amount of time. Cross-disciplinary research requires scientists in areas such as linguistics, biology, and sociology to learn about computational approaches and applications such as computational linguistics, biological modeling, and social networks. Authors of journal articles and books must write accurate summaries of previous work, ranging from short summaries of related research to in-depth historical notes. Interdisciplinary review panels are often called upon to review proposals in a wide range of\nc\u00a92013 AI Access Foundation. All rights reserved.\nareas, some of which may be unfamiliar to panelists. Thus, they must learn about a new discipline \u201con the fly\u201d in order to relate their own expertise to the proposal.\nOur goal is to effectively serve these needs by combining two currently available technologies: (1) bibliometric lexical link mining that exploits the structure of citations and (2) summarization techniques that exploit the content of the material in both the citing and cited papers.\nIt is generally agreed upon that manually written abstracts are good summaries of individual papers. More recently, Qazvinian and Radev (2008) argued that citation sentences (i.e., set of sentences that appear in other papers and cite a given article) are useful in creating a summary of important contributions of a research paper. Kaplan, Iida, and Tokunaga (2009) introduced \u201ccitation-site\u201d as a block of text that includes a citation and discusses the cited text. This work used a machine learning method for extracting citations from research papers and evaluates the result using an annotated corpus of 38 papers citing 4 articles. Moreover, Qazvinian and Radev (2010) showed the usefulness of using implicit citations (i.e., context sentences, sentences that occur before or after a citation sentence and do not explicitly cite the target paper, but discuss its contributions) in summary generation. Teufel (2005) argued that citations could contain subjective content, and that this content can be exploited for summary generation. Additional work (Mohammad et al., 2009) demonstrated the usefulness of citations for producing multi-document summaries of scientific articles. Follow-up work indicated that further improvements to citation handling enables the production of more fluent summaries (Whidby, 2012).\nIn our work, we develop summarization systems that exploit citations. Specifically,\n\u2022 We compare and contrast the usefulness of abstracts and of citations in automatically generating a technical summary on a given topic from multiple research papers. Our findings suggest that abstracts and citations have some overlapping information but they also have a significant amount of unique summary-amenable information. Particularly, we provide evidence that citation sentences contain crucial information that is not available, or hard to extract, from abstracts and papers alone.\n\u2022 We propose C-LexRank, a graph based summarization system. This method models a set of citing sentences as a network in which vertices are sentences and edges represent their lexical similarity. C-LexRank then identifies vertex communities (clusters) in this network, and selects sentences from different communities to increase diversity in the summary. Using 30 different sets of citation sentences extracted from 6 different NLP topics in the ACL1 Anthology Network, we show that C-LexRank is effective in producing a summary of a paper\u2019s contributions. We compare C-LexRank with a wide range of state-of-the-art summarization systems that leverage diversity (MMR, DivRank, MASCS), employ graph structure (DivRank, LexRank), or employ sentence compression (MASCS) to produce a summary.\n\u2022 We extend our experiments from summarizing the contributions of a single article to generating summaries of scientific topics. Our evaluation experiments for extractive summary generation are applied to a set of 10 papers in the research area of Question Answering (QA) and another set of 16 papers on Dependency Parsing (DP).\n1. Association for Computational Linguistics\nWe provide some background for this work including the primary features of a technical summary and also the types of input that are used in our study (full papers, abstracts, and citation sentences)."}, {"heading": "1.1 Background", "text": "Automatically creating technical extractive summaries is significantly distinct from traditional multi-document summarization. Below we describe the primary characteristics of a technical extractive summary and we present different types of input texts that we used for the production of extractive summaries."}, {"heading": "1.1.1 Technical Extractive Summaries", "text": "In the case of multi-document summarization, the goal is to produce a readable presentation of multiple documents, whereas in the case of technical summary creation, the goal is to convey the key features and basic underpinnings of a particular field, early and late developments, important contributions and findings, contradicting positions that may reverse trends or start new sub-fields, and basic definitions and examples that enable rapid understanding of a field by non-experts.\nA prototypical example of a technical summary is that of \u201cchapter notes,\u201d i.e., short (50\u2013500 word) descriptions of sub-areas found at the end of chapters of textbooks, such as Jurafsky and Martin\u2019s (2008). One might imagine producing such descriptions automatically, then hand-editing them and refining them for use in an actual textbook.\nPreviously Mohammad et al. (2009) conducted a human analysis of these chapter notes and revealed a set of conventions, an outline of which is provided here (with example sentences in italics):\n1. Introductory/opening statement: The earliest computational use of X was in Y, considered by many to be the foundational work in this area.\n2. Definitional follow up: X is defined as Y.\n3. Elaboration of definition (e.g., with an example): Most early algorithms were based on Z.\n4. Deeper elaboration, e.g., pointing out issues with initial approaches: Unfortunately, this model seems to be wrong.\n5. Contrasting definition: Algorithms since then...\n6. Introduction of additional specific instances / historical background with citations: Two classic approaches are described in Q.\n7. References to other summaries: R provides a comprehensive guide to the details behind X.\nThe notion of text level categories or zoning of technical papers\u2014related to the summary components enumerated above\u2014has been investigated previously in the work of Teufel and Moens (2002) and Nanba, Kando, and Okumura (2000). These earlier works focused on\nthe analysis of scientific papers based on their rhetorical structure and on determining the portions of papers that contain new results, comparisons to earlier work, etc. The work described here focuses on the synthesis of technical summary based on knowledge gleaned from rhetorical structure not unlike that of the work of these earlier researchers, but guided by structural patterns along the lines of the conventions listed above.\nAlthough our current approach to summary creation does not yet incorporate a fully pattern-based component, our ultimate objective is to apply these patterns to guide the creation and refinement of the final output. As a first step toward this goal, we use citation sentences (closest in structure to the patterns identified by convention 7 above) to pick out the most important content for summary creation."}, {"heading": "1.1.2 Scholarly Texts", "text": "Published research on a particular topic can be summarized from two different kinds of sources: (1) where an author describes her own work and (2) where others describe an author\u2019s work (usually in relation to their own work). The author\u2019s description of her own work can be found in her paper. How others perceive her work is spread across other papers that cite her work.\nTraditionally, technical summary generation has been tackled by summarizing a set of research papers pertaining to the topic. However, individual research papers usually come with manually-created \u201csummaries\u201d\u2014their abstracts. The abstract of a paper may have sentences that set the context, state the problem statement, mention how the problem is approached, and the bottom-line results\u2014all in 200 to 500 words. Thus, using only the abstracts (instead of full papers) as input to a summarization system is worth exploring.\nWhereas the abstract of a paper presents what the authors think to be the important aspects of a paper, the citations to a paper capture what others in the field perceive as the broader contributions of the paper. The two perspectives are expected to have some overlap in their content, but the citations also contain additional information not found in abstracts (Elkiss, Shen, Fader, Erkan, States, & Radev, 2008; Nakov & Hearst, 2012). For example, authors may describe how a particular methodology from one paper was combined with another from a different paper to overcome some of the drawbacks of each. Citations are also indicators of what contributions described in a paper were influential over time.\nAnother feature that distinguishes citations from abstracts is that citations tend to have a certain amount of redundant information. This is because multiple papers may describe the same contributions of a target paper. This redundancy can be exploited by automatic systems to determine the important contributions of the target paper.\nOur goal is to test the hypothesis that an effective technical summary will reflect information on research not only from the perspective of its authors but also from the perspective of others who use, commend, discredit, or add to it. Before describing our experiments with technical papers, abstracts, and citations, we first summarize relevant prior work that used these sources of information as input.\nThe rest of this paper is organized as follows. After reviewing the related work, we present an analysis of citations and demonstrate that they contain summary-amenable information. In the process, we develop C-LexRank, a citation-based summarization system. In Section 5, we show that state-of-the-art automatic summarization systems create more\ncontentful summaries of citations of individual documents than those created simply by random sampling. We also show that C-LexRank performs better than other state-of-theart summarization systems when producing both 100- and 200-word extracts. In Section 6, we extend our experiments to summarize a set of papers representing the same scientific topic using the source texts as well as citations to the topic papers. Additionally, we show the usefulness of citation sentences in automatically generating a technical summary on a given topic. We observe that, as expected, abstracts are useful in summary creation, but, notably, we also conclude that citations contain crucial information not present in (or at least, not easily extractable from) abstracts. We further discover that abstracts are authorbiased and thus complementary to the broader perspective inherent in citation sentences; these differences enable the use of a range of different levels and types of information in the summary."}, {"heading": "2. Related Work", "text": "In this section, we review related prior work in two categories. First, we review previous research on citation analysis, and then we discuss prior work on capturing diversity in automatic text summarization."}, {"heading": "2.1 Citation Analysis", "text": "Previous work has analyzed citation and collaboration networks (Teufel, Siddharthan, & Tidhar, 2006; Newman, 2001) and scientific article summarization (Teufel & Moens, 2002). Bradshaw (2002, 2003) benefited from citations to determine the content of articles and introduce \u201cReference Directed Indexing\u201d to improve the results of a search engine. Nanba, Abekawa, Okumura, and Saito (2004) and Nanba et al. (2000) analyzed citation sentences and automatically categorize citations into three groups using 160 pre-defined phrase-based rules. This categorization was then used to build a tool to help researchers analyze citations and write scientific summaries. Nanba and Okumura (1999) also discussed the same citation categorization to support a system for writing a survey. Nanba and Okumura (1999) and Nanba et al. (2000) reported that co-citation implies similarity by showing that the textual similarity of co-cited papers is proportional to the proximity of their citations in the citing article.\nPrevious work has shown the importance of the citation sentences in understanding scientific contributions. Elkiss et al. (2008) performed a large-scale study on citations and their importance. They conducted several experiments on a set of 2, 497 articles from the free PubMed Central (PMC) repository2 and 66 from ACM digital library. Results from this experiment confirmed that the average cosine between sentences in the set of citations to an article is consistently higher than that of its abstract. They also reported that this number is much greater than the average cosine between citation sentences and a randomly chosen document, as well as between citation sentences and the abstract. Finally, they concluded that the content of citing sentences has much greater uniformity than the content of the corresponding abstract, implying that citations are more focused and contain additional information that does not appear in abstracts.\n2. http://www.pubmedcentral.gov\nNakov and Hearst (2012) performed a detailed manual study of citations in the area of molecular interactions and found that the set of citations to a given target paper cover most information found in the abstract of that article, as well as 20% more concepts, mainly related to experimental procedures.\nKupiec, Pedersen, and Chen (1995) used the abstracts of scientific articles as a target summary. They used 188 Engineering Information summaries that are mostly indicative in nature. Kan, Klavans, and McKeown (2002) used annotated bibliographies to cover certain aspects of summarization and suggest guidelines that summaries should also include metadata and critical document features as well as the prominent content-based features.\nSiddharthan and Teufel (2007) described a new reference task and show high human agreement as well as an improvement in the performance of argumentative zoning (Teufel, 2005). In argumentative zoning\u2014a rhetorical classification task\u2014seven classes (Own, Other, Background, Textual, Aim, Basis, and Contrast) are used to label sentences according to their role in the author\u2019s argument.\nThe problem of automatic related work summarization is addressed by Hoang and Kan (2010). In their work, Hoang and Kan used a set of keywords representing a hierarchy of paper topics and assigned a score to each input sentence to construct an extractive summary.\nAthar (2011) addressed the problem of identifying positive and negative sentiment polarity in citations to scientific papers. Similarly, Athar and Teufel (2012) used context-enriched citations to classify scientific sentiment towards a target paper."}, {"heading": "2.2 Leveraging Diversity in Summarization", "text": "In summarization, a number of previous methods have focused on the diversity of perspectives. Mei, Guo, and Radev (2010) introduced DivRank, a diversity-focused ranking methodology based on reinforced random walks in information networks. Their random walk model, which incorporates the rich-gets-richer mechanism to PageRank with reinforcements on transition probabilities between vertices, showed promising results on the Document Understanding Conference (DUC) 2004 dataset. DivRank is a state-of-the-art graph-based method and it leverages the diversity of perspectives in summarization. Therefore, we chose this algorithm as an important baseline in our experiments and we will discuss it in more detail in Section 4.\nA similar ranking algorithm, described by Zhu, Goldberg, Van Gael, and Andrzejewski (2007), is the Grasshopper ranking model, which leverages an absorbing random walk. This model starts with a regular time-homogeneous random walk, and in each step the vertex with the highest weight is set as an absorbing state. Paul, Zhai, and Girju (2010) addressed the problem of summarizing opinionated text using Comparative LexRank, a random walk model inspired by LexRank (Erkan & Radev, 2004). Comparative LexRank first assigns different sentences to clusters based on their contrastiveness with each other. It then modifies the graph based on cluster information and performs LexRank on the modified cosine similarity graph.\nPerhaps the most well-known summarization method to address diversity in summarization is Maximal Marginal Relevance (MMR) (Carbonell & Goldstein, 1998). This method is based on a greedy algorithm that selects sentences in each step that are the least similar\nto the summary so far. We compare our summarization output with that of MMR and discuss this algorithm in more details in Section 4.\nIn prior work on evaluating independent contributions in content generation, Voorhees (1998) studied IR systems and showed that relevance judgments differ significantly between humans but relative rankings show high degrees of stability across annotators. In other work, van Halteren and Teufel (2004) asked 40 Dutch students and 10 NLP researchers to summarize a BBC news report, resulting in 50 different summaries. They also used 6 DUC-provided summaries, and annotations from 10 student participants and 4 additional researchers, to create 20 summaries for another news article in the DUC datasets. They calculated the Kappa statistic (Carletta, 1996; Krippendorff, 1980) and observed high agreement, indicating that the task of atomic semantic unit (factoid) extraction can be robustly performed in naturally occurring text, without any copy-editing.\nThe diversity of perspectives and the growth of the factoid inventory (Qazvinian & Radev, 2011b) also affects evaluation in text summarization. Evaluation methods are either extrinsic, in which the summaries are evaluated based on their quality in performing a specific task (Spa\u0308rck-Jones, 1999) or intrinsic where the quality of the summary itself is evaluated, regardless of any applied task (van Halteren & Teufel, 2003; Nenkova & Passonneau, 2004). These evaluation methods assess the information content in the summaries that are generated automatically."}, {"heading": "3. Citation-Based Summarization", "text": "The ACL Anthology Network3 (AAN) is a manually curated resource built on top of the ACL Anthology4 (Bird, Dale, Dorr, Gibson, Joseph, Kan, Lee, Powley, Radev, & Tan, 2008). AAN includes all the papers published by ACL and related organizations as well as the Computational Linguistics journal over a period of four decades. AAN consists of more than 18, 000 papers from more than 14, 000 authors, each distinguished with a unique ACL ID, together with their full-texts, abstracts, and citation information. It also includes other valuable metadata such as author affiliations, citation and collaboration networks, and various centrality measures (Radev, Muthukrishnan, & Qazvinian, 2009; Joseph & Radev, 2007).\nTo study citations across different areas within Computational Linguistics, we first extracted six different sets of papers from AAN corresponding to 6 different NLP topics: Dependency Parsing (DP), Phrase-based Machine Translation (PBMT), Text Summarization (Summ), Question Answering (QA), Textual Entailment (TE), and Conditional Random Fields (CRF). To build each set, we matched the topic phrase against the title and the content of AAN papers, and extracted the 5 highest cited papers. Table 1 shows the number of articles and the number of citation sentences in each topic5. The number of citations in each set shows that number of sentences that are used as an input to various summarization systems in our experiments.\n3. http://clair.si.umich.edu/anthology/ 4. http://www.aclweb.org/anthology-new/ 5. The number of incoming citations are from AAN\u2019s 2008 release.\nBelow we describe our approach to citation analysis, including our calculation of interjudge agreement. We then describe our C-LexRank method for extracting citation sentences."}, {"heading": "3.1 Citation Analysis", "text": "To analyze citations, we designed an annotation task that requires explicit definitions that distinguish between phrases that represent the same or different information units. Unfortunately, there is little consensus in the literature on such definitions. Therefore, following van Halteren and Teufel (2003), Qazvinian and Radev (2011b) we made the following distinction. We define a nugget to be a phrasal information unit (i.e., any phrase that would contain some information about the contributions of the cited paper). Different nuggets may all represent the same atomic semantic unit, which we refer to as a factoid. In the context of citations, a factoid refers to a unique contribution of a target paper mentioned in a citation sentence. For example, the following set of citations to Eisner\u2019s (1996) famous parsing paper illustrate the set of factoids about this paper and suggest that different authors who cite a particular paper may discuss different contributions (factoids) of that paper.\nIn the context of DPs, this edge based factorization method was proposed by Eisner (1996).\nEisner (1996) gave a generative model with a cubic parsing algorithm based on an edge factorization of trees.\nEisner (1996) proposed an O(n3) parsing algorithm for PDG.\nIf the parse has to be projective, Eisner\u2019s (1996) bottom-up-span algorithm can be used for the search.\nThis example also suggests that different authors use different wordings (nuggets) to represent the same factoids. For instance, cubic parsing and O(n3) parsing algorithm are two nuggets that represent the same factoid about (Eisner, 1996). A similar example, which we will use throughout the paper, is the paper by Cohn and Blunsom (2005) (identified with the ACL ID W05-0622 in Table 1). This paper is cited in 9 different sentences within AAN. All of these sentences are listed in Table 2. In each sentence, the nuggets extracted by the annotators are underlined. As this table suggests, a citation sentence may not discuss any of the contributions of the cited paper. For instance, the last sentence does not contain any factoids about Cohn and Blunsom\u2019s (2005) work. The nuggets that are identified using the citation to the paper (Cohn & Blunsom, 2005) account for a total number of 3 factoids (contributions) identified for this paper: f1, tree structures; f2, semantic role labeling; and f3, a pipelined approach.\nFollowing these examples, we asked two annotators with background in Natural Language Processing to review each citing sentence and extract a list of phrases that represent a contribution of the cited paper.6 Moreover, to ensure that the extracted nuggets are explicitly mentioned in the citations, we asked the annotators to rely merely on the set of citations to do the task and not on their background on this topic or the source of the\n6. One of the annotators is an author of this paper.\ncited paper. Finally, we reviewed each list and collapsed phrases that represent the same contribution (factoid).\nFinding agreement between annotated well-defined nuggets is straightforward and can be calculated in terms of Kappa. However, when nuggets themselves are to be extracted by annotators, the task becomes less obvious. To calculate the agreement, we annotated 5 randomly selected citation sets twice (1 paper from each of the NLP areas in Table 1), and designed a simple evaluation scheme based on Kappa. For each n-gram, w, in a given citation sentence, we determine w is part of any nugget in either human annotations. If w occurs in both or neither, then the two annotators agree on it, and otherwise they do not. Based on this agreement setup, we can formalize the \u03ba statistic as:\n\u03ba = Pr(a)\u2212 Pr(e)\n1\u2212 Pr(e) (1)\nwhere Pr(a) is the relative observed agreement among annotators, and Pr(e) is the probability that annotators agree by chance if each annotator is randomly assigning categories.\nTable 3 shows the unigram, bigram, and trigram-based \u03ba between the two human annotators (Human1, Human2) in the five datasets that were annotated twice. These results suggest that human annotators can reach substantial agreement when trigram nuggets are examined, and have reasonable agreement for unigram and bigram nuggets."}, {"heading": "3.2 C-LexRank", "text": "In this section we describe C-LexRank as a method to extract citing sentences that cover a diverse set of factoids. Our method works by modeling the set of citations as a network of sentences and identifying communities of sentences that cover similar factoids. Once a good division of sentences is made, we extract salient sentences from different communities. Figure 1 illustrates a representative example that depicts C-LexRank\u2019s process."}, {"heading": "3.2.1 Citation Summary Network", "text": "In the first step (as shown in Figure 1 (a)), we model the set of sentences that cite a specific paper with a network in which vertices represent citing sentences and undirected weighted edges show the degree of semantic relatedness between vertex pairs, normally quantified by a similarity measure. We refer to this network as the Citation Summary Network of an article. The similarity function should ideally assign high scores to sentence pairs that have the same factoids, and should assign low scores to sentences that talk about different contributions of the target paper.\nPreviously, Qazvinian and Radev (2008) examined 7 different similarity measures including TF-IDF with various IDF databases, longest common sub-sequence, generation probability (Erkan, 2006), and the Levenstein distance on a training set of citations. They showed that the cosine similarity measure that employs TF-IDF vectors assigns higher similarities to pairs that contain the same factoids. Following Qazvinian and Radev (2008), we use the cosine similarity between TF-IDF vector models that employ a general IDF corpus7 to construct the citation summary network of each article.\n7. We use the IDF corpus in the Mead summarization system (Radev et al., 2004), which is generated using the English portion of the Hong Kong News parallel corpus (Ma, 2000)."}, {"heading": "3.2.2 Community Structure", "text": "In the second step (as shown in Figure 1 (b)), we extract vertex communities from the citation summary network to generate summaries. We generate summaries by extracting representative sentences from the citation summary network. Intuitively, a good summary should include sentences that represent different contributions of a paper. Therefore, a good sentence selection from the citation summary network will include vertices that are similar to many other vertices and which are not very similar to each other. On the other hand, a bad selection would include sentences that are only representing a small set of vertices in the graph. This is very similar to the concept of maximizing social influence in social networks (Kempe, Kleinberg, & E\u0301va Tardos, 2003). Figure 2 shows an example in which the selected two vertices in the citation summary networks represent a small subset of vertices (left) and a larger subset of vertices (right). In our work we try to select vertices that\nmaximize the size of the set of vertices that they represent. We achieve this by detecting different vertex communities in the citation summary network.\nIn order to find vertex communities and thus a good sentence selection, we exploit the small-world property of citation summary networks. A network is called small-world, if most of its vertices are not neighbors of each other, but can be reached from one another by a small number of steps (Watts & Strogatz, 1998). Recent research has shown that a wide range of natural graphs such as biological networks (Ravasz, Somera, Mongru, Oltvai, & Baraba\u0301si, 2002), food webs (Montoya & Sole\u0301, 2002), brain neurons (Bassett & Bullmore, 2006) and human languages (Ferrer i Cancho & Sole\u0301, 2001) exhibit the small-world property.\nThis common characteristic can be detected using two basic statistical properties: the clustering coefficient C, and the average shortest path length `. The clustering coefficient of a graph measures the number of closed triangles in the graph. It describes how likely it is that two neighbors of a vertex are connected (Newman, 2003). Watts and Strogatz (1998) define the clustering coefficient as the average of the local clustering values for each vertex.\nC = \u2211n i=1 ci n\n(2)\nThe local clustering coefficient ci for the ith vertex is the number of triangles connected to vertex i divided by the total possible number of triangles connected to vertex i. Watts and Strogatz (1998) show that small-world networks are highly clustered and obtain relatively short paths (i.e., ` is small). Previous work (Qazvinian & Radev, 2011a) shows that citation summary networks are highly clustered. These networks have small shortest paths and obtain clustering coefficient values that are significantly larger than random networks. Moreover, Qazvinian and Radev suggest that this is because of a community structure,\nwhere each community is composed of a set of highly connected vertices with a small number of edges that fall between communities.\nFigure 3 (a) illustrates a real citation summary network built using the citation sentences in Table 2 in which each vertex is labeled with its corresponding nugget. With some re-\narrangement of the vertices in Figure 3 (b), it becomes clear that the citation summary network of this paper has an underlying community structure in which sentences that cover similar factoids are closer to each other and form communities. For instance, in this network there are at least 3 observable communities: one that is about \u201cf1: tree structure,\u201d one about \u201cf2: semantic role labeling\u201d and the last one about the \u201cf3: pipelined approach\u201d as proposed by Cohn and Blunsom (2005).\nIn order to detect these communities automatically we use modularity. Modularity, (Newman, 2004a), is a measure to evaluate the divisions that a community detection algorithm generates. For a division with g groups, they define matrix eg\u00d7g whose component eij is the fraction of edges in the original network that connect vertices in components i, j. Then the modularity Q can be defined as:\nQ = \u2211 i eii \u2212 \u2211 ijk eijeki (3)\nIntuitively, Q is the fraction of all the edges that are embedded within communities minus the expected value of the same quantity in a network with the same degrees but in which edges are placed at random regardless of the community structure. Newman and Girvan (2004) and Newman (2004b) showed across a wide range of simulated and real-world networks that larger Q values are correlated with better graph clusterings. It is also shown by Newman (2004b) that if no edges exist that connect vertices across different clusters then Q = 1, and conversely if the number of inter-cluster edges is no better than random then Q = 0. Other work (Smyth & White, 2005) showed empirically that modularity works well in practice in terms of both (a) finding good clusterings of vertices in networks where community structure is evident, and (b) indicating what the appropriate number of clusters k is for such a graph.\nC-LexRank uses the clustering algorithm of Clauset, Newman, and Moore (2004), which exploits modularity to detect vertex communities in a network. This network clustering method, as discussed by Clauset et al. (2004) is a hierarchical agglomeration algorithm, which works by greedily optimizing the modularity in a linear running time for sparse graphs. More particularly, their method continuously merges vertex or cluster pairs with the highest similarity and stops when modularity reaches the maximum value. This clustering algorithm is efficient (O(n log2 n) in the number of nodes, n) and does not require a predetermined number of clusters. These two characteristics makes this community detection algorithm particularly useful.\nFigure 3 (c) shows how the clustering algorithm detects factoid communities in Cohn and Blunsom\u2019s (2005) citation summary network. In this figure, we have color-coded vertices based on their community. The clustering algorithm assigns sentences 1, 4 and 8 (which are all about the tree structures) to one cluster; sentences 3, 6 and 7 (which are all about semantic role labeling) to another cluster; and finally assigns sentences 2, 5 and 9 (sentences 2 and 5 are both about pipelined approach) to the last cluster. This figure also shows that sentence 6, which discusses two factoids (\u201csemantic role labeling\u201d and \u201cT-CRF\u201d) connects the two vertex communities (corresponding to 2 factoids) as a bridge.\nTo evaluate how well the clustering method works in all of our datasets, we calculated both the purity and the normalized mutual information (NMI) for the divisions in each citation set, extracted using the community detection algorithm. Purity (Zhao & Karypis,\n2001) is a method in which each cluster is assigned to the class with the majority vote in the cluster, and the accuracy of this assignment is then measured by dividing the number of correctly assigned documents by N . More formally:\npurity(\u2126,C) = 1\nN \u2211 k max j |\u03c9k \u2229 cj | (4)\nwhere \u2126 = {\u03c91, \u03c92, . . . , \u03c9K} is the set of clusters and C = {c1, c2, . . . , cJ} is the set of classes. \u03c9k is interpreted as the set of documents in the cluster \u03c9k and cj as the set of documents in the class cj .\nWe also calculate the normalized mutual information (NMI). Manning, Raghavan, and Schu\u0308tze (2008) describe NMI as follows. Let us assume \u2126 = {\u03c91, \u03c92, . . . , \u03c9K} is the set of clusters and C = {c1, c2, . . . , cJ} is the set of classes. Then,\nNMI(\u2126,C) = I(\u2126;C)\n[H(\u2126) +H(C)]/2 (5)\nwhere I(\u2126;C) is the mutual information:\nI(\u2126,C) = \u2211 k \u2211 j P (\u03c9k \u2229 cj) log P (\u03c9k \u2229 cj) P (\u03c9k)P (cj)\n(6)\n= \u2211 k \u2211 j |\u03c9k \u2229 cj | N log N |\u03c9k \u2229 cj | |\u03c9k||cj |\n(7)\nin which P (\u03c9k), P (cj), and P (\u03c9k \u2229 cj) are the probabilities of a document being in cluster \u03c9k, class cj , and in the intersection of \u03c9k and cj , respectively; and H is entropy:\nH(\u2126) = \u2212 \u2211 k P (\u03c9k) logP (\u03c9k) (8)\n= \u2212 \u2211 k |\u03c9k| N log |\u03c9k| N\n(9)\nI(\u2126;C) in Equation 6 measures the amount of information that we would lose about the classes without the cluster assignments. The normalization factor ([H(\u2126) + H(C)]/2) in Equation 5 enables us to trade off the quality of the clustering against the number of clusters, since entropy tends to increase with the number of clusters. For example, H(\u2126) reaches its maximum when each document is assigned to a separate cluster. Because NMI is normalized, we can use it to compare cluster assignments with different numbers of clusters. Moreover, [H(\u2126) +H(C)]/2 is a tight upper bound for I(\u2126;C), making NMI obtain values between 0 and 1. Table 4 lists the average Purity and NMI across the papers in our collected dataset, along with the analogous numbers for a division of the same size where vertices are randomly assigned to clusters."}, {"heading": "3.2.3 Ranking", "text": "The third step of the C-LexRank process (as shown in Figure 1 (c)) is applied after the graph is clustered and the communities are formed. To produce the C-LexRank output,\nwe extract sentences from different clusters to build a summary. We start with the largest cluster and extract sentences using LexRank (Erkan & Radev, 2004) within each cluster. In other words, for each cluster \u2126i we made a lexical network of the sentences in that cluster (Ni). Using LexRank we can find the most central sentences in Ni as salient sentences of \u2126i to include in the main summary. We choose, for each cluster \u2126i, the most salient sentence of \u2126i, and if we have not reached the summary length limit, we do that for the second most salient sentences of each cluster, and so on. The cluster selection is in order of decreasing size. Figure 3 (d) shows Cohn and Blunsom\u2019s (2005) citation summary network, in which each vertex is plotted with a size proportional to its LexRank value within its cluster. This figure shows how C-LexRank emphasizes on selecting a diverse set of sentences covering a diverse set of factoids.\nPreviously, we mentioned that factoids with higher weights appear in a greater number of sentences, and clustering aims to cluster such fact-sharing sentences in the same communities. Thus, starting with the largest community is important to ensure that the system summary first covers the factoids that are more frequently mentioned in other citation sentences and thus are more important.\nThe last sentence in the example in Table 2 is as follows. \u201cWe use CRFs as our models for both tasks (Cohn & Blunsom, 2005).\u201d This sentence shows that a citation may not cover any contributions of the target paper. Such sentences are assigned by the community detection algorithm in C-LexRank to clusters to which they are semantically most similar. The intuition behind employing LexRank within each cluster is to try to avoid extracting such sentences for the summary, since LexRank within a cluster enforces extracting the most central sentence in that cluster. In order to verify this, we also try a variant of C-LexRank in which we do not select sentences from clusters based on their salience in the cluster, but rather in a round-robin fashion, in which all the sentences within a cluster are equally likely to be selected. We call this variant C-RR.\nTable 5 shows the 100-word summary constructed using C-LexRank for our exemplar paper, in which different nuggets are illustrated in bold. This summary is a perfect summary in terms of covering the different factoids about the paper. It includes citing sentences that talk about \u201ctree CRF,\u201d \u201cpipelined approach,\u201d and \u201cSemantic Role Labeling,\u201d which are indeed Cohn and Blunsom\u2019s (2005) three main contributions."}, {"heading": "4. Other Methods", "text": "In our experiments in Section 5 we compare C-LexRank to a number of other summarization systems. We compare C-LexRank with random summarization to find a lower-bound on the pyramid scores in our experiments. We use LexRank and C-RR as two variants of CLexRank to investigate the usefulness of community detection and salient vertex selection in C-LexRank. We evaluate DivRank as a state of the art graph-based summarization system that leverages diversity as well as MMR as a widely used diversity-based summarization system. Finally, we use Multiple Alternate Sentence Compression Summarizer (MASCS) as a system that does not rely merely on extraction, but rather produces a list of candidates by applying pre-defined sentence-compression rules."}, {"heading": "4.1 Random", "text": "This method simply chooses citations in random order without replacement. Since a citing sentence may cover no information about the cited paper (as in the last sentence in Table 2), randomization has the drawback of selecting citations that have no valuable information in them. Moreover, the random selection procedure is more prone to produce redundant summaries as citing sentences that discuss the same factoid may be selected."}, {"heading": "4.2 LexRank", "text": "One of the systems that we compare C-LexRank with is LexRank (Erkan & Radev, 2004). It works by first building a graph of all the documents (di) in a cluster. The edges between corresponding vertices (di) represent the cosine similarity between them if the cosine value is above a threshold (0.10 following Erkan & Radev, 2004). Once the network is built, the system finds the most central sentences by performing a random walk on the graph.\np(dj) = (1\u2212 \u03bb) 1\n|D| + \u03bb \u2211 di p(di)P (di \u2192 dj) (10)\nEquation 10 shows that the probability that the random walker would visit dj depends on a random jump element as well as the probability that the random walk visits each of its neighbors (di) times the transition probability between di and dj , P (di \u2192 dj).\nComparing C-LexRank summaries with the ones from LexRank gives insight into how we can benefit from detecting communities in citation sets. Essentially, C-LexRank is the same as LexRank if all the vertices are assigned to the same cluster. By construction, C-LexRank should produce more diverse summaries covering different perspectives by capturing communities of sentences that discuss the same factoids."}, {"heading": "4.3 MMR", "text": "Maximal Marginal Relevance (MMR) is proposed by Carbonell and Goldstein (1998) and is a widely used algorithm in generating summaries that reflect the diversity of perspectives in the source documents (Das & Martins, 2007). MMR uses the pairwise cosine similarity matrix and greedily chooses sentences that are the least similar to those already in the summary. In particular,\nMMR = argminDi\u2208D\u2212A [ max Dj\u2208A Sim(Di, Dj) ]\n(11)\nwhere A is the set of documents in the summary, initialized to A = \u2205. In Equation 11, a sentence Di that is not in the summary A is chosen such that its highest similarity to summary sentences maxDj\u2208A Sim(Di, Dj) is minimum among all unselected sentences."}, {"heading": "4.4 DivRank", "text": "We also compare C-LexRank with a state-of-the-art graph-based summarization system that leverages diversity, DivRank. DivRank is based on calculating stationary distribution of vertices using a modified random walk model. Unlike other time-homogeneous random walks (e.g., PageRank), DivRank does not assume that the transition probabilities remain constant over time.\nDivRank uses a vertex-reinforced random walk model to rank graph vertices based on a diversity based centrality. The basic assumption in DivRank is that the transition probability from a vertex to other is reinforced by the number of previous visits to the target vertex (Mei et al., 2010). Particularly, let us assume pT (u, v) is the transition probability from any vertex u to vertex v at time T . Then,\npT (di, dj) = (1\u2212 \u03bb).p\u2217(dj) + \u03bb. p0(di, dj).NT (dj)\nDT (di) (12)\nwhere NT (dj) is the number of times the walk has visited dj up to time T and,\nDT (di) = \u2211 dj\u2208V p0(di, dj)NT (dj) (13)\nHere, p\u2217(dj) is the prior distribution that determines the preference of visiting vertex dj , and p0(u, v) is the transition probability from u to v prior to any reinforcement. Mei et al. argue that the random walk could stay at the current state at each time, and therefore\nassumes a hidden link from each vertex to itself, thus defining p0(u, v) as:\np0(u, v) = { \u03b1.w(u,v)deg(u) if u 6= v 1\u2212 \u03b1 if u = v\n(14)\nHere, we try two variants of this algorithm: DivRank, in which p\u2217(dj) is uniform, and DivRank with priors in which p\u2217(dj) \u221d l(Dj)\u2212\u03b2, where l(Dj) is the number of the words in the document Dj and \u03b2 is a parameter (0.1 in our experiments). This prior distribution assigns larger probabilities to shorter sentences which will increase their likelihood of being salient. This will cause more sentences to be included in the summary, and might increase the factoid coverage. In our experiments, we follow Mei et al. (2010) and set \u03bb = 0.90 and \u03b1 = 0.25."}, {"heading": "4.5 MASCS", "text": "The last summarization system that we use as a baseline is Multiple Alternate Sentence Compression Summarizer (MASCS) (Zajic, Dorr, Lin, & Schwartz, 2007). Similar to previous previous baseline systems, MASCS\u2019s goal is to leverage diversity in summarization. MASCS performs preprocessing on sentences that transforms them into new sentences, thus expanding the pool of candidates available for inclusion in a summary beyond the set of sentences that occur in source documents. This is what makes MASCS somewhat non-extractive. In addition, the preprocessing used in MASCS for these experiments was specifically adapted to the genre of citation sentences from scientific papers (Whidby, 2012).\nMore particularly, MASCS is a summarization system that utilizes Trimmer\u2019s (Zajic et al., 2007) sentence compression candidates to create summaries for a single or set of documents. Summarization with MASCS is performed in three stages. In the first stage, MASCS generates several compressed sentence candidates for every sentence in a document from the cluster. The second stage involves calculating various ranking features for each of the compressed sentence candidates. In the final stage, sentence candidates are chosen for inclusion in the summary, and are chosen based on a linear combination of features.\nTrimmer can leverage the output of any constituency parser that uses the Penn Treebank conventions. At present, the Stanford Parser (Klein & Manning, 2003) is used. The set of compressions is ranked according to a set of features that may include metadata about the source sentences, details of the compression process that generated the compression, and externally calculated features of the compression.\nSummaries are constructed by iteratively adding compressed sentences from the candidate pool until a length threshold is met. Candidates are chosen by an implementation of MMR that uses features directly calculated from a candidate, metadata about a candidate\u2019s source and its compression history, relevance of the candidate to the topic and redundancy of the candidate to already selected candidates. The redundancy score in MASCS uses an index of the words (w) in the document set:\u2211\nw\nlog(\u03bb.P (w|summary) + (1\u2212 \u03bb).P (w|corpus)) (15)\nwhere \u03bb is a weighting factor (set to 0.3 in our experiments)."}, {"heading": "5. Experiments", "text": "We used the 30 sets of citations listed in Table 1 and employ C-LexRank to produce two extractive summaries with different summary lengths (100 and 200 words) for each set. In addition to C-LexRank and C-RR, we also performed the same experiments with the baseline methods described in Section 4, most of which are aimed at leveraging diversity in summarization."}, {"heading": "5.1 Evaluation", "text": "To evaluate our system, we use the pyramid evaluation method (Nenkova & Passonneau, 2004). Each factoid in the citations to a paper corresponds to a summary content unit (SCU) in (Nenkova & Passonneau, 2004).\nThe score given by the pyramid method for a summary is the ratio of the sum of the weights of its factoids to the sum of the weights of an optimal summary. This score ranges from 0 to 1, and high scores show the summary content contains more heavily weighted factoids. If a factoid appears in more citation sentences than another factoid, it is more important, and thus should be assigned a higher weight. To weight the factoids we build a pyramid, and each factoid falls in a tier. Each tier shows the number of sentences a factoid appears in. Thus, the number of tiers in the pyramid is equal to the citation summary size. If a factoid appears in more sentences, it falls in a higher tier. So, if the factoid fi appears |fi| times in the citation summary it is assigned to the tier T|fi|.\nThe pyramid score formula that we use is computed as follows. Suppose the pyramid has n tiers, Ti, where tier Tn on top and T1 on the bottom. The weight of the factoids in tier Ti will be i (i.e. they appeared in i sentences). If |Ti| denotes the number of factoids in tier Ti, and Di is the number of factoids in the summary that appear in Ti, then the total factoid weight for the summary is as follows.\nD = n\u2211 i=1 i\u00d7Di (16)\nAdditionally, the optimal pyramid score for a summary with X factoids, is\nMax = n\u2211\ni=j+1\ni\u00d7 |Ti|+ j \u00d7 (X \u2212 n\u2211\ni=j+1\n|Ti|) (17)\nwhere j = maxi( \u2211n\nt=i |Tt| \u2265 X). Subsequently, the pyramid score for a summary is calculated as follows.\nP = D\nMax (18)"}, {"heading": "5.2 Results and Discussion", "text": "Table 6 shows the average pyramid score of the summaries generated using different methods with different lengths. Longer summaries result in higher pyramid scores since the amount of information they cover is greater than shorter summaries. For the random sentence extraction baseline, we repeat the experiment with 100 different randomly generated seed values and report the average pyramid score of these summaries in Table 6. This table shows\nthat C-LexRank outperforms all other methods that leverage diversity as well as random summaries and LexRank. The results in this table also suggest that employing LexRank within each cluster is essential for the selection of salient citing sentences, as the average pyramid scores from C-RR, where sentences are picked in a round-robin fashion, are lower."}, {"heading": "5.2.1 Effect of Community Detection", "text": "The community detection that C-LexRank employs assigns highly similar citing sentences to the same cluster. This enables C-LexRank to produce a diverse summary by selecting sentences from different clusters. This selection is done by assigning a score to each vertex using LexRank within the cluster. The modularity-based clustering method described in Section 3.2.2, which works by maximizing modularity in a clustering, will always produce at least 2 clusters. Intuitively, in a network in which all the vertices are assigned to the same community, the fraction of edges that are embedded within that community is equal to the expected value of the same quantity in a network in which edges are placed at random. This will make Q obtain its lower-bound, Q = 0.\nHowever, in the hypothetical case where all the vertices belong to the same cluster, CLexRank will be the same as LexRank (i.e., it will perform LexRank on the entire network). Therefore, comparing C-LexRank and LexRank helps us understand the effect of clustering on summary quality. Table 6 shows that C-LexRank produces summaries that obtain higher pyramid scores at both 100 words and 200 words. Table 7 shows the 100-word summary that was constructed using LexRank for Cohn and Blunsom\u2019s (2005) citations. This summary, unlike the one produced by C-LexRank (Table 5), does not cover all of the factoids of the target paper (e.g., \u201cpipelined approach\u201d). Moreover, this summary has redundant information (e.g., TreeCRF vs. T-CRF) and contains a citation sentence that does not cover any of the contributions of Cohn and Blunsom."}, {"heading": "5.2.2 Salient Vertex Extraction", "text": "Selecting representative sentences (vertices) from different clusters is done using LexRank in the C-LexRank algorithm. More particularly, for each cluster, C-LexRank first extracts a subgraph of the network representing vertices and edges in that cluster, and then employs LexRank to assign a salience score to each vertex. An alternative idea could be selecting sentences from clusters at random (C-RR). In C-RR, we traverse between clusters in a round-robin fashion and randomly select a previously unselected sentence from the cluster to include a summary.\nComparing C-LexRank with C-RR enables us to understand the effect of salience selection within communities. Selecting vertices that are not a good representative of the cluster may result in picking sentences that do not cover contributions of the target paper (e.g., sentence 9 from Table 2 \u2013 vertex 9 in Figure 3 (d)). In fact, Table 6 shows that C-LexRank produces summaries with relatively 20% and 5% higher pyramid scores than C-RR when extracting 100 and 200 word summaries respectively. Moreover, C-RR performs better when longer summaries are produced since it extracts a greater number of sentences from each cluster increasing the likelihood of covering different factoids captured by different clusters."}, {"heading": "6. Summaries of Scientific Topics", "text": "In previous sections, we described C-LexRank as a method to identify communities of citations that discuss the same scientific contributions. We showed that C-LexRank is effective in summarizing contributions of single scientific papers. However, the ultimate goal of our work is to investigate whether citations have summary-amenable information and also to build an end-to-end system that receives a query representing a scientific topic (such as \u201cdependency parsing\u201d) and produces a citation-based automatic summary of the given topic.\nIn this section, we extend our experiments on using the tools explained in previous sections for automatic summarization of scientific topics. Our evaluation experiments for extractive summary generation are on a set of papers in the research area of Question Answering (QA) and another set of papers on Dependency Parsing (DP). The two sets of papers were compiled by selecting all the papers in AAN that had the words \u201cQuestion Answering\u201d and \u201cDependency Parsing,\u201d respectively, in the title and the content. There were 10 papers in the QA set and 16 papers in the DP set. We also compiled the citation sentences for the 10 QA papers and the citation sentences for the 16 DP papers."}, {"heading": "6.1 Data Preparation", "text": "Our goal is to determine if citations do indeed have useful information that one will want to put in a summary and if so, how much of this information is not available in the original papers and their abstracts. For this we evaluate each of the automatically generated summaries using two separate approaches: nugget-based pyramid evaluation and ROUGE. Recall-Oriented Understudy for Gisting Evaluation (ROUGE) is a metric that evaluates automatic summaries by comparing them against a set of human written references (Lin, 2004).\nTwo sets of gold standard data were manually created from the QA and DP citation sentences and abstracts, respectively:8 (1) We asked three annotators9 with background in Natural Language Processing to identify important nuggets of information worth including in a summary. (2) We asked four NLP researchers10 to write 250-word summaries of the QA and DP datasets. Then we determined how well the different automatically generated summaries perform against these gold standards. If the citations contain only redundant information with respect to the abstracts and original papers, then the summaries of citations will not perform better than others."}, {"heading": "6.1.1 Nugget Annotations", "text": "For our first evaluation approach we used a nugget-based evaluation methodology (Voorhees, 2003; Nenkova & Passonneau, 2004; Hildebrandt, Katz, & Lin, 2004; Lin & DemnerFushman, 2006). We asked three annotators with background in Natural Language Processing to review the citation sentences and/or abstract sets for each of the papers in the QA and DP sets and manually extract prioritized lists of 2\u20138 \u201cfactoids,\u201d or main contributions, supplied by each paper. Each factoid was assigned a weight based on the frequency with which it was listed by annotators as well as the priority it was assigned in each case. Our automatically generated summaries were then scored based on the number and weight of the nuggets that they covered.\nMore particularly, the annotators had two distinct tasks for the QA set, and one for the DP set: (1) extract nuggets for each of the 10 QA papers, based only on the citations to those papers; (2) extract nuggets for each of the 10 QA papers, based only on the abstracts of those papers; and (3) extract nuggets for each of the 16 DP papers, based only on the citations to those papers.\n8. Creating gold standard data from complete papers is fairly arduous, and was not pursued. 9. Two of the annotators are authors of this paper.\n10. All of the annotators are authors of this paper.\nOne annotator completed the three tasks in full and the remaining two annotators jointly completed tasks 1 and 3, providing us with two complete annotations of the QA and DP citation sets and one annotation of the QA abstract set. For each task, annotators constructed lists of 2\u20138 prioritized nuggets per paper. This gave us 81 distinct nuggets from the QA citation set, 45 nuggets from the QA abstract set, and 144 nuggets from the DP citation set. By collapsing similar nuggets, we were able to identify 34 factoids for the QA citation set, 27 factoids for the QA abstract set, and 57 factoids for the DP citation set. We obtained a weight for each factoid by reversing its priority out of 8 (e.g., a factoid listed with priority 1 was assigned a weight of 8, a nugget listed with priority 2 was assigned a weight of 7, etc.) and summing the weights over each listing of that factoid.11"}, {"heading": "6.1.2 Expert Summaries", "text": "In addition to nugget annotations, we asked four NLP researchers to write 250-word summaries of the QA citation set, QA abstract set and DP citation set.\nTable 8 gives the pyramid scores of the 250-word summaries manually produced by experts. The summaries were evaluated using the nuggets drawn from the QA citations, QA abstracts, and DP citations. The average of their scores (listed in the rightmost column) may be considered a good score to aim for by the automatic summarization methods. Additionally, Table 9 presents ROUGE scores (Lin, 2004) of each of expert-written 250- word summaries against each other (e.g., Human1 versus all others and so forth). The average (last column) could be considered a ceiling in the performance of the automatic summarization systems.\n11. Results obtained with other weighting schemes that ignored priority ratings and multiple mentions of a nugget by a single annotator showed the same trends as the ones shown by the selected weighting scheme."}, {"heading": "6.2 Automatic Extractive Summaries", "text": "We used four summarization systems for our summary-creation approach: C-LexRank, CRR, LexRank and MASCS.\nWe automatically generated summaries for both QA and DP from three different types of documents: (1) full papers from the QA and DP sets\u2014QA and DP full papers (PA), (2) only the abstracts of the QA and DP papers\u2014QA and DP abstracts (AB), and (3) the citation sentences corresponding to the QA and DP papers\u2014QA and DP citations (CT).\nWe generated 24 (4\u00d7 3\u00d7 2) summaries, each of length 250 words, by applying MASCS, LexRank, and C-LexRank on the three data types (citation sentences, abstracts, and full papers) for both QA and DP. (Table 10 shows a fragment of one of the automatically generated summaries from QA citation sentences.) We created six (3 \u00d7 2) additional 250- word summaries by randomly choosing sentences from citations, abstracts, and full papers of QA and DP. We will refer to them as random summaries.\nTable 11 gives the pyramid score values of the summaries generated by the four automatic summarizers, evaluated using nuggets drawn from the QA citation sentences, QA abstracts, and DP citation sentences. The table also includes results for the baseline random summaries.\nWhen we used the nuggets from the abstracts set for evaluation, the summaries created from abstracts scored higher than the corresponding summaries created from citations and papers. Further, the best summaries generated from citations outscored the best summaries generated from papers. When we used the nuggets from citation sets for evaluation, the best automatic summaries generated from citations outperform those generated from abstracts and full papers. All these pyramid results demonstrate that citations can contain useful information that is not available in the abstracts or the original papers, and that abstracts can contain useful information that is not available in the citations or full papers.\nAmong the various automatic summarizers, MASCS performed best at this task, in two cases exceeding the average human performance. Note also that the random summarizer outscored the automatic summarizers in cases where the nuggets were taken from a source different from that used to generate the summary. However, one or two summarizers still tended to do well. This indicates a difficulty in extracting the overlapping summaryamenable information across the two sources.\nWe then evaluated each of the random summaries and those generated by the four summarization systems against the references. Table 12 lists ROUGE scores of summaries when the manually created 250-word summary of the QA citation sentences, summary of the QA abstracts, and the summary of the DP citation sentences, were used as gold standard.\nWhen we use manually created citation summaries as reference, then the summaries generated from citations obtained significantly better ROUGE scores than the summaries generated from abstracts and full papers (p < 0.05) [Result 1]. This confirms that crucial information, amenable to creating a summary and present in citation sentences is not available, or hard to extract, from abstracts and papers alone. Further, the summaries generated from abstracts performed significantly better than those generated from the full papers (p < 0.05) [Result 2]. This suggests that abstracts and citations are generally denser in summary-amenable information than full papers.\nWhen we use manually created abstract summaries as reference, then the summaries generated from abstracts obtained significantly better ROUGE scores than the summaries generated from citations and full papers (p < 0.05) [Result 3]. Further, and more importantly, the summaries generated from citations performed significantly better than those generated from the full papers (p < 0.05) [Result 4]. Again, this suggests that abstracts and citations are richer in summary-amenable information. These results also show that abstracts of papers and citations have some overlapping information (Result 2 and Result 4), but they also have a significant amount of unique summary-amenable information (Result 1 and Result 3).\nAmong the automatic summarizers, C-LexRank and LexRank perform best. This is unlike the results found through the nugget-evaluation method, where MASCS performed best. This suggests that MASCS is better at identifying more useful nuggets of information, but C-LexRank and LexRank are better at producing unigrams and bigrams expected in a summary. To some extent this may be due to MASCS\u2019s compression preprocessing, which breaks large, complex sentences into smaller, finer-grained units of content that correspond better to the amount of content in a nugget."}, {"heading": "7. Conclusion", "text": "In this paper, we investigated the usefulness of directly summarizing citation sentences (set of sentences that cite a paper) in the automatic creation of technical summaries. We proposed C-LexRank, a graph-based summarization model and generated summaries of 30 single scientific articles selected from 6 different topics in the ACL Anthology Network (AAN). We also generated summaries of a set of Question Answering (QA) and Dependency Parsing (DP) papers, their abstracts, and their citation sentences using four state-of-theart summarization systems (C-LexRank, C-RR, LexRank, and MASCS). We then used two different approaches, nugget-based pyramid and ROUGE, to evaluate the summaries. The results from both approaches and all four summarization systems show that both citation sentences and abstracts have unique summary-amenable information. These results also demonstrate that multidocument summarization\u2014especially technical summary creation\u2014 benefits considerably from citations.\nWe next plan to generate summaries using both citation sentences and abstracts together as input. Given the overlapping content of abstracts and citation sentences, discovered in\nthe current study, it is clear that redundancy detection will be an integral component of this future work. Creating readily consumable technical summaries is a hard task, especially when using only raw text and simple summarization techniques. Therefore, we intend to combine these summarization and bibliometric techniques with suitable visualization methods towards the creation of iterative technical survey tools\u2014systems that present summaries and bibliometric links in a visually convenient manner and which incorporate user feedback to produce even better summaries.\nCurrent work on generating topic summaries is focused almost exclusively on extracting diverse factoid-rich summaries. Meanwhile, the fluency of the produced summaries has been mostly ignored. In future work, we plan to employ some post-processing techniques such as reference scope extraction and sentence simplification, as described by Abu-Jbara and Radev (2011), to generate more readable and cohesive summaries."}, {"heading": "8. Acknowledgments", "text": "We would like to thank Ahmed Hassan, Rahul Jha, Pradeep Muthukrishan, and Arzucan O\u0308zgu\u0308r for annotations and Melissa Egan for preliminary developments. We are also grateful to Ben Shneiderman, Judith Klavans, and Jimmy Lin for fruitful discussions and the anonymous reviewers for insightful readings and constructive guidance. The following authors, Vahed Qazvinian, Dragomir R. Radev, Saif M. Mohammad, Bonnie Dorr, David Zajic, and Michael Whidby were supported, in part, by the National Science Foundation under Grant No. IIS-0705832 (iOPENER: Information Organization for PENning Expositions on Research) awarded to the University of Michigan and the University of Maryland. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation. The following authors, Michael Whidby and Taesun Moon were supported, in part, by the Intelligence Advanced Research Projects Activity (IARPA) via Department of Interior National Business Center (DoI/NBC) contract number D11PC20153. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes not withstanding any copyright annotation thereon. Disclaimer: The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of IARPA, DoI/NBC, or the U.S. Government."}], "references": [], "referenceMentions": [], "year": 2013, "abstractText": "Researchers and scientists increasingly find themselves in the position of having to quickly understand large amounts of technical material. Our goal is to effectively serve this need by using bibliometric text mining and summarization techniques to generate summaries of scientific literature. We show how we can use citations to produce automatically generated, readily consumable, technical extractive summaries. We first propose C-LexRank, a model for summarizing single scientific articles based on citations, which employs community detection and extracts salient information-rich sentences. Next, we further extend our experiments to summarize a set of papers, which cover the same scientific topic. We generate extractive summaries of a set of Question Answering (QA) and Dependency Parsing (DP) papers, their abstracts, and their citation sentences and show that citations have unique information amenable to creating a summary.", "creator": "TeX"}}}