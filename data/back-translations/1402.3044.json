{"id": "1402.3044", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Feb-2014", "title": "Finding a Collective Set of Items: From Proportional Multirepresentation to Group Recommendation", "abstract": "We consider the following problem: There are a number of elements (e.g. movies) and a group of agents (e.g. passengers on an airplane); each agent has an intrinsic benefit for each of the elements. Our goal is to select a set of $K $elements that maximize the total derived benefit of all agents (i.e., in our example, we are supposed to select $K $movies that we place on the aircraft entertainment system). The actual benefit that an agent derives from a particular element is only a fraction of its intrinsic benefit, and this fraction depends on how the agent classifies the object among the available (in the example, the perceived value of a movie depends on the values of the other available ones). Extreme examples of our model include the setting in which each agent derives benefit from his or her preferred element (e.g., an agent will select his or her favorite movie only from his or her least preferred element), from his or her least favorable element, from his or her least available agent, from his or her preferred object, or her least likely to be forced to observe the WA.", "histories": [["v1", "Thu, 13 Feb 2014 07:14:28 GMT  (40kb)", "http://arxiv.org/abs/1402.3044v1", null], ["v2", "Fri, 8 Jan 2016 19:51:00 GMT  (155kb)", "http://arxiv.org/abs/1402.3044v2", null]], "reviews": [], "SUBJECTS": "cs.GT cs.AI cs.MA", "authors": ["piotr krzysztof skowron", "piotr faliszewski", "j\u00e9r\u00f4me lang"], "accepted": true, "id": "1402.3044"}, "pdf": {"name": "1402.3044.pdf", "metadata": {"source": "CRF", "title": "Finding a Collective Set of Items: From Proportional Multirepresentation to Group Recommendation", "authors": ["Piotr Skowron"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n40 2.\n30 44\nv1 [\ncs .G\nT ]\n1 3"}, {"heading": "1 Introduction", "text": "A number of real-world problems consist of selecting a set of items for a group of agents to jointly use. Examples of such activities include picking a set of movies to put on a plane\u2019s entertainment system, deciding which journals a university library should subscribe to, deciding what common facilities to build, or even voting for a parliament (or other assembly of representatives). These examples have a number of common features:\n1. There is a set of items1 and a set of agents, where each agent has some intrinsic utility for each of the items (e.g., this utility can be the level of appreciation for a movie, the average number of articles one reads from a given issue of a journal, expected benefit from building a particular facility, the feeling\u2014measured in some way\u2014of being represented by a particular politician).\n2. Typically, it is not possible to provide all the items to the agents and we can only pick some K of them, say (a plane\u2019s entertainment system can fit only a handful of movies, the library has a limited budget, only several sites for the facilities-to-be-built are available, the parliament has a fixed size).\n3. The intrinsic utilities for items extend to the sets of items in such a way that the impact of each selected item on the utility of an agent may depend on the rank of this item (from the agent\u2019s point of view) among the selected ones. Extreme examples include the case where each agent derives utility from his or her most preferred item only (e.g., an agent will watch his or her favorite movie only, will read / use the favorite journal / favorite facility only, will feel represented by the most appropriate politician only), from his or her least preferred item only (say, the agent worries that he or she will be somehow forced to stick to the worst item; e.g., he or she worries the family will force him or her to watch the worst available movie), or derives 1/K of the utility from each of the available items (e.g., the agent chooses the item\u2014say, a movie\u2014at random). However, in practice one should expect much more complicated schemes (e.g., an agent watches the top movie certainly, the second one probably, the third one perhaps, etc.; an agent is interested in having at least some T interesting journals in the library; an agent feels represented by some top T members of the parliament, etc.).\nThe goal of this paper is to formally define a model that captures all the above-described scenarios, provide a set of examples where the model is applicable, and to provide an initial set of computational results for it in terms of efficient algorithms (exact or approximate) and computational hardness results (NP-hardness and inapproximability results).\nOur work builds upon, generalizes, and extends quite a number of settings that have already been studied in the literature. We provide a deeper overview of this research in Section 5; here we mention two most directly related lines of work. First, our model where the agents derive utility from their most preferred item among the selected one directly corresponds to winner determination under the Chamberlin\u2013Courant\u2019s voting rule [4,13,32] (it is also very deeply connected to the model of budgeted social choice [27]) and is in a certain formal sense a variant of the facility location problem. The case where for each item each agent derives the same fraction of the utility is, in essence, the same as K-winner range-voting (or K-winner Borda [15]); that agents enjoy equally the items they get is also a key assumption in the Santa Claus problem [3], and in the problem of designing optimal picking sequences [7,10,24].\n1We use the term \u2018item\u2019 in the most neutral possible way. Items may be candidates running for an election or movies or possible facilities, and so on.\nThe paper is organized as follows. First, in Section 2 we discuss several important modeling choices and provide the formal description of our model. Then, in Section 3, we discuss the applicability of the model in various scenarios. Specifically, we show a number of examples that lead to a particular parameter values of our model. Then, in Section 4 we present our computational results. The section is further partitioned into subsections regarding the following issues: (a) the complexity of computing exact solutions for our model, (b) the issue of computing approximate solutions without any restrictions on agents\u2019 utilities, and (c) the issue of computing approximate solutions for the case where the agents utilities represent a linear spectrum of appreciation for the possible items (so-called Borda utilities). Finally, in Section 5 we discuss related work and in Section 6 we present our summary."}, {"heading": "2 The Model", "text": "In this section we give a formal description of our model. However, before we move to the mathematical details, let us explain and justify some high-level assumptions and choices that we have made.\nFirst, we assume that the agents have separable preferences. This means that the intrinsic utility of an object does not depend on what other objects are selected. This is very different from, for example, the case of combinatorial auctions. However, in our model the impact of an object on the global utility of an agent does depend on its rank (according to that agent) among the selected items. This distinction between the intrinsic value of an item and its value distorted by its rank are also considered in several other research fields, especially decision theory (\u201crank-dependent utility theory\u201d) and multicriteria decision making, from which we borrow one of the main ingredients of our approach, so-called ordered weighted average (OWA) operators [38] (see the following formal model).\nSecond, we assume that the agents\u2019 intrinsic utilities are provided explicitly in the input as numerical values, and that these values are comparable between agents (if one agent has twice as high a utility for some item than the other one, we take it to mean that this agent likes this item twice as much). Yet, we make no further assumptions about the nature of agents\u2019 utilities: they do not need to be normalized, they do not need to come from any particular range of values, etc. However, we often consider two special cases that can be seen as extreme ends of a spectrum of possibilities: so-called approval-based utilities (each agent\u2019s utility for each item is either 0 or 1), and so-called Borda utilities (each agent ranks the items from the most to the least desired one and an item\u2019s utility is the number of items that the agent likes less). In other words, in the approval-utilities case the agents only have extreme views regarding the items (they like them or not), and in the Borda-utilities case they have a full linear spectrum of appreciation of the items.\nThird, we take the utilitarian view and measure the social welfare of the agents as the sum of their perceived utilities. Other choices are of course possible. In particular, it is tempting to define the social welfare for the group as the minimum of the utilities for all agents (an egalitarian model). We have consider this approach and obtained some results\nfor it. However, although the model is worth studying, our computational results were uniformly negative (computational hardness and inapproximability results), and we have kept these results out of the current paper."}, {"heading": "2.1 The Formal Setting", "text": "Let N = [n] be a set of n agents and let A = {a1, . . . , am} be a set of m items. The goal is to pick a set W of some K items (where K will be part of our input) that, in some sense, are most satisfying for the agents. To this end, (1) for each agent i \u2208 N and for each item aj \u2208 A, we have an intrinsic utility ui,aj that agent i derives from aj ; (2) the utility that each agent derives from a set of K items is an ordered weighted average [38] of this agent\u2019s intrinsic utilities for these items.\nA weighted ordered average (OWA) over K numbers is a function defined through a vector \u03b1(K) = \u3008\u03b11, . . . , \u03b1K\u3009 of K (nonnegative) numbers 2 as follows: Let ~x = \u3008x1, . . . , xK\u3009 be a vector of K numbers and let ~x\u2193 = \u3008x\u21931, . . . , x \u2193 K\u3009 be the nonincreasing rearrangement of ~x, that is, x\u2193i = x\u03c3(i), where \u03c3 is any permutation of {1, . . . ,K} such that x\u03c3(1) \u2265 x\u03c3(2) \u2265 . . . \u2265 x\u03c3(K). Then we set:\nOWA\u03b1(K)(~x) =\nK \u2211\ni=1\n\u03b1ix \u2193 i\nTo make the notation lighter, we will write \u03b1(K)(x1, . . . , xK), instead of OWA\u03b1(K)(x1, . . . , xK). We will provide a more detailed discussion of OWA operators useful in our context later; for the time being let us note that they can be used, for example, to express the arithmetic average (through the size-K vector ( 1K , . . . , 1 K )), the maximum and minimum operators (through vectors (1, 0, . . . , 0), and (0, . . . , 0, 1), respectively) and the median (through the vector that has 0s everywhere, except for the middle position, where it has 1).\nGiven the above setup, we formalize our problem of computing \u201cthe most satisfying set of K items\u201d in the following way.\nDefinition 1. In the OWA-Winner problem we are given a set N = [n] of agents with utilities over m items (alternatives) from the set A = {a1, . . . , am}, a positive integer K (K \u2264 m), and a K-number OWA \u03b1(K). The task is to compute a subset W = {w1, . . . , wK} of A such that u\u03b1 (K)\nut (W ) = \u2211n i=1 \u03b1 (K)(ui,w1 , . . . , ui,wK ) is maximal. 3\nFor a family (\u03b1(K))\u221eK=1 of OWAs, we write \u03b1-OWA-Winner to denote the variant of the OWA-Winner problem where, for a given solution size K, we use OWA \u03b1(K). From now on we will not mention the size of the OWA vector explicitly and it will always be\n2The standard definition of OWAs assumes normalization, that is, \u2211K\ni=1 \u03b1i = 1. We do not make this assumption here, for the sake of convenience; note that whether OWA vectors are normalized or not is irrelevant to all notions and results of this paper.\n3Formally, what we define here should be called a utilitarian OWA-Winner problem because we are interested in maximizing the total utility. As said before, it is also natural to consider egalitarian OWA-Winner problem, where we maximize the utility of the worst-off agent.\nclear from context. We implicitly assume that OWAs in our families are polynomial-time computable.\nFinally, we will often speak of variants of OWA-Winner where agents\u2019 utilities are somehow restricted. In particular, by approval-based utilities we mean that each agent\u2019s utilities come from the set {0, 1}, and by Borda-based utilities we mean the case where for each agent i the set of his or her utilities for all the items, that is, {ui,a1 , . . . , ui,am} is equal to {0, . . . ,m\u2212 1}. The term \u201cBorda-based utilities\u201d comes from the fact that such utilities translate to the scores under Borda voting rule (see, e.g., the text of Brams and Fishburn [8] for a discussion of voting procedures). Indeed, one of the most convenient ways to represent Borda-based utilities is through preference orders. For example, if for some agent i it holds that for each aj \u2208 A we have ui,aj = j\u22121, then we would say that this agent has preference order am \u227b am\u22121 \u227b \u00b7 \u00b7 \u00b7 \u227b a1. That is, the agent puts the item with utility m\u2212 1 on the top position in the preference order, then the item with utility m\u2212 2, then the one with utility m \u2212 3, down to the item with utility 0. In fact, one way in which Borda-based utilities could arise is if the agents originally have the preference orders and not the utility values. One may derive the utilities using Borda\u2019s rule of assigning utility \u2113 to an item if the agent prefers it to \u2113 items (or, of course, one may use one of many other ways of deriving the utility values). Borda-based utilities are also used in several works on fair division (e.g., by Brams and King [9]).\nExample 2. Let n = 6, m = 6, K = 3, A = {a1, a2, a3, a4, a5, a6}, \u03b1 = (2, 1, 0), and Borda-based utilities derived from the following rankings:"}, {"heading": "3 agents : a1 \u227b a2 \u227b a3 \u227b a5 \u227b a6 \u227b a4", "text": ""}, {"heading": "2 agents : a6 \u227b a1 \u227b a4 \u227b a3 \u227b a5 \u227b a2", "text": "1 agent : a5 \u227b a4 \u227b a2 \u227b a3 \u227b a6 \u227b a1\nLet us compute the score of {a1, a2, a6}. The first three agents get utility 2 \u00d7 5 + 4 = 14, the next two get 2\u00d7 4 + 4 = 14 and the last one gets 2\u00d7 3 + 1 = 7. Therefore the score of {a1, a2, a6} is 42+28+7 = 77. It can be checked that this is the optimal set. (The next best ones are {a1, a2, a4}, {a1, a2, a5} and {a1, a5, a6} , all with score 75.) Note that 3-Borda (in our terms, the rule defined by 3-best OWA, \u03b1\u2032 = (1, 1, 1)) would choose {a1, a2, a3} and that Chamberlin and Courant\u2019s rule (in our terms, the rule defined by 1-best OWA, \u03b1\u2032\u2032 = (1, 0, 0)) would choose {a1, a5, a6}."}, {"heading": "2.2 A Dictionary of Useful OWA Families", "text": "OWA-Winner is a remarkably general problem and we will usually focus on some special cases, for a particular family of OWAs. Below we give a catalog of particularly useful OWA families (in the description below we take K to be the dimension of the vectors to which we apply a given OWA).\n1. k-median OWA. For each k \u2208 {1, . . . ,K}, k-med(K) is the OWA defined by the vector of k \u2212 1 zeros, followed by a single one, followed by K \u2212 k zeros. It is easy to\nsee that k-med(K)(x1, . . . , xK) is the k-th largest number in the set {x1, . . . , xK} and is known as the k-median of ~x. In particular, 1-med(K)(~x) is the maximum operator, K-med(K)(~x) is the minimum operator, and if K is odd, K+12 -med\n(K)(~x) is the median operator.\n2. k-best OWA. For each k \u2208 {1, . . . ,K}, k-best(K) OWA is defined through the vector of k ones followed byK\u2212k zeros. That is, k-best(K)(~x) is the sum of the top k values in ~x (with appropriate scaling, this means an arithmetic average of the top k numbers).\nK-best (K) K is simply the sum of all the numbers in ~x (after scaling, the arithmetic average).\n3. Arithmetic progression OWA. This OWA is defined through the vector aprog[a](K) = \u3008a+(K \u2212 1)b, a+(K\u2212 2)b, . . . , a\u3009, where a \u2265 0 and b > 0. (One can easily check that the choice of b has no impact on the outcome of OWA-Winner; this is not the case for a, though.)\n4. Geometric progression OWA. This OWA is defined through the vector gprog[p](K) = \u3008pK\u22121, pK\u22122, . . . , 1\u3009, where p > 1. (This is without loss of generality, because multiplying the vector by a constant factor has no impact on the outcome of OWA-Winner; but the choice of p matters.)\n5. Hurwicz OWA. This OWA is defined through a vector (\u03bb, 0, . . . , 0, 1\u2212 \u03bb), where \u03bb, 0 \u2264 \u03bb \u2264 1, is a parameter.\nNaturally, all sorts of middle-ground OWAs are possible between these particular cases, and can be tailored for a specific application. As our natural assumption is that highly ranked items have more impact than lower-ranked objects, we often make the assumption that OWA vectors are nonincreasing, that is, \u03b11 \u2265 . . . \u2265 \u03b1K . While most OWA operators we consider in the paper are indeed nonincreasing, this is not the case for k-medians (except for 1-median) and Hurwicz (except for \u03bb = 1)."}, {"heading": "3 Applications of the Model", "text": "We give here four different scenarios where our model is applicable. The first one is a generalization of Chamberlin and Courant\u2019s proportional representation rule. The common feature of the latter three scenarios is that they each focus on some form of uncertainty about the final outcome; the impact of a selected item is the probability that this item will be actually used by the agent."}, {"heading": "3.1 Generalizing Chamberlin\u2013Courant\u2019s Voting Rule", "text": "Our research started as an attempt to generalize the Chamberlin\u2013Courant\u2019s voting rule for electing sets of representatives [13]. For this rule, voters (agents) have Borda utilities over a set of candidates and we wish to elect a K-member committee (for instance, a parliament),\nsuch that each voter is represented by one member of the committee. In other words, if we select K candidates, then a voter is \u201crepresented\u201d by that selected candidate that he or she ranks highest among the chosen ones. The idea is that then, in the parliament, each selected candidate would have voting power proportional to the number of voters that he or she represents. It is easy to see that winner determination under Chamberlin\u2013Courant\u2019s voting rule corresponds exactly to solving 1-best-OWA-Winner for the case of Borda utilities."}, {"heading": "3.2 Malfunctioning Items or Unavailable Candidates", "text": "In this first model, we assume that, as in classical group recommendation setting and budgeted social choice setting [27], each user only benefits from one item, but that the items may not be working properly: if we select (off-line) a set of items S, then (on-line) there will be a subset S+ of items that can be used, and a set S\u2212 = S \\ S+ of objects that are \u2018malfunctioning\u2019 or are unavailable\u2019 and cannot be used. For instance, items are radio channels that can be unreachable, or items are candidates running in an election and these candidates may finally decide to not take a position in the elected committee, or items are parking lots that are to be built but that can sometimes be full (see [26] for further examples of social choice with possibly unavailable candidates). Moreover, we have a prior probability distribution about the (un)availability of items: as in [26], we assume that each item is available with probability p (i.i.d.). The utility an agent gets from a set of selected items S is the value of the best available object in S, that is, of the best object in S+. Therefore, it is the value of the item ranked in position i in S if the first i\u2212 1 items are unavailable and the ith item is available. The expected contribution of an item to the utility of a user is therefore proportional to p(1\u2212 p)i\u22121, which leads to the OWA defined by \u03b1i = p(1\u2212 p) i\u22121, which is a geometric progression with initial value p and coefficient 1\u2212 p."}, {"heading": "3.3 Uncertainty About the Number of Items Enjoyed by a User", "text": "We assume now that there is some uncertainty about the number of items that a user will enjoy. A first possible reason is that users may have a limited capacity to enjoy items. For instance, items are movies or books and each user has a time constraint that will prevent him or her from enjoying all selected items. A second possible reason is that users are reluctant to use items they don\u2019t like enough: they will watch only the films whose value reaches a given subjective threshold. We give here two possible models for the choice of the OWA vectors:\n\u2022 We first assume that the probability that a user enjoys i items, for 0 \u2264 i \u2264 K, is uniformly distributed, that is, a user will enjoy exactly his or her first i items in S with probability P (i) = 1K+1 . Thus, she will enjoy the item ranked i if she enjoys at\nleast i items, which occurs with probability K\u2212i+1K+1 . This leads to the OWA vector defined by \u03b1i = K \u2212 i + 1 (we disregard the normalizing constant), which is an arithmetic progression.\n\u2022 Second, we assume that the values given by each user to each item are distributed uniformly, i.i.d., on [0, 1] and that each user uses only the items that have a value at least \u03b8, where \u03b8 is a fixed (user-independent) threshold. Therefore, a user enjoys the item in S ranked in position i if he or she values at least i items at least \u03b8, which\noccurs with probability \u2211K\nj=i\n(\nK i\n)\n(1\u2212\u03b8)i\u03b8K\u2212i, thus leading to the following OWA\nvector defined by \u03b1i = \u2211K\nj=i\n(\nK i\n)\n(1\u2212 \u03b8)i\u03b8K\u2212i. For instance, if K = 4 and \u03b8 = 34 ,\nthe OWA (omitting the denominators) is \u03b1 = (175, 67, 13, 1); for K = 4 and \u03b8 = 12 , we get \u03b1 = (14, 12, 5, 1); and for K = 4 and \u03b8 = 14 , we get \u03b1 = (252, 243, 189, 81)."}, {"heading": "3.4 Ignorance About Which Item Will Be Assigned to a User", "text": "We now assume that a matching mechanism will be used posterior to the selection of the K items. The matching mechanism used is not specified; it may also be a randomized mechanism.\nIf users have a complete ignorance about the mechanism used, then it makes sense to use known criteria for decision under complete uncertainty:\n\u2022 the Wald criterion assumes that agents are extremely risk-averse, and corresponds to \u03b1 = K-med(K): we, therefore, seek to maximize\n\u2211n i=1 minwj\u2208W ui,wj .\n\u2022 the Hurwicz criterion is a linear combination between the worst and the best outcomes, and corresponds to \u03b1 = (\u03bb, 0, . . . , 0, 1 \u2212 \u03bb) for some fixed \u03bb \u2208 (0, 1).\nIf users still have a complete ignorance about the mechanism used except that they know that they are guaranteed to get one of their best i items, then the Wald and Hurwicz criteria now lead, respectively, to the OWAs \u03b1 = i-med(K) and \u03b1 = (\u03bb, 0, . . . , 0, 1\u2212\u03bb, 0, . . . , 0), with 1\u2212 \u03bb in position i.\nIf users know that the mechanism used is a random mechanism with a uniform distribution among the items ranked in positions 1 to i, then the choice of i-best OWA makes sense. More generally, the matching mechanism may assign items to agents with a probability that depends on the rank and that decreases when the rank increases."}, {"heading": "4 Computational Results", "text": "We start our analysis by discussing worst-case results in Section 4.1. Then we move on to approximability results, in Section 4.2 for the case of general utilities (but with some focus on approval-based ones) and in Section 4.3 for the case of Borda-based ones. It turns out that while in general the problem is NP-hard and good approximation algorithms are rare, for the case of Borda-based utilities it is possible to obtain polynomial-time approximation schemes (PTASes) for a relatively large, interesting family of OWAs."}, {"heading": "4.1 Computing Exact Solutions", "text": "In general, it seems that OWA-Winner is a rather difficult problem. However, as long as we seek a size-K winner set where K is a fixed constant, then the problem is in P.\nProposition 3. For each fixed constant K (the size of the winner set), OWA-Winner is in P.\nProof. For a profile with m items, there are only O(mK) sets of winners to try. We try them all and pick one that yields highest utility.\nNaturally, in practice the variant of the problem with fixed K has only limited applicability and throughout the rest of the paper we focus on the \u03b1-OWA-Winner variant of the problem where K is given as part of the input and \u03b1 represents a family of OWAs, one for each value of K. By results of Procaccia, Rosenschein and Zohar [32] and Lu and Boutilier [27], we know that the 1-best-OWA-Winner problem is NP-hard both for approval and for Borda-based utilities (in this case the problem is equivalent to winner determination under appropriate variants of Chamberlin\u2013Courant voting rule; in effect, many results regarding the complexity of this rule are applicable for this variant of the problem [4,36,37,39]). A simple reduction shows that this result carries over to each family of k-best OWAs and of k-med OWAs, where k is a fixed positive integer.\nProposition 4. For each fixed k, k-best-OWA-Winner and k-med-OWA-Winner are NP-complete, even if the utility profiles are restricted to be approval-based or Borda-based.\nProof. Let k be a fixed constant. It is easy to see that k-best-OWA-Winner and kmed-OWA-Winner are both in NP. To show NP-hardness, we give reductions from 1- best-OWA-Winner (either with approval-based utilities or with Borda-based utilities) to k-best-OWA-Winner and to k-med-OWA-Winner (with the same types of utilities).\nLet I be an instance of 1-best-OWA-Winner with n agents, m items, and where we seek a winner set of size K. We form an instance I \u2032 of k-best-OWA-Winner that is identical to I except that: (1) We add k \u2212 1 special items b1, . . . , bk\u22121 such that under approval-based utilities each agent i has utility 1 for each item bj, 1 \u2264 j \u2264 k \u2212 1, and under Borda-based utilities each agent i has utility m+j\u22121 for item bj , 1 \u2264 j \u2264 k\u22121. (2) We set the size of the desired winner set to be K \u2032 = K+k\u22121. It is easy to see that if there is an optimal solution W \u2032 for I \u2032 that achieves some utility x, then there is a solution W \u2032\u2032 for I \u2032 that uses all the k \u2212 1 items b1, . . . , bk\u22121 and also achieves utility x. Further, the set W \u2032\u2032 \u2212 {b1, . . . , bk\u22121} is an optimal solution for I and, for I, has utility x\u2212\n\u2211n i=1 \u2211k\u22121 j=1 ui,bj = x\u2212 n \u2211k\u22121 j=1 u1,bj .\nAnalogous argument shows that 1-best-OWA-Winner reduces to k-med-OWA-Winner (also for approval-based and for Borda-based utilities).\nOn the other hand, it is easy to note that for K-best OWA (that is, for the family of constant OWAs \u03b1 = (1, . . . , 1)) the problem is easy.\nProposition 5. K-best-OWA-Winner is in P.\nProof. Let I be an input instance with m items and n agents, where we seek a winner set of size K. It suffices to compute for each item the total utility that all the agents would derive if this item were included in the winner set and return K items for which this value is highest.\nIndeed, if the agents\u2019 utilities are either approval-based or Borda-based, K-best-OWAWinner boils down to (polynomial-time) winner determination for K-best approval rule and for K-Borda rule [15], respectively (see also the work of Elkind et al. [16] for a general discussion of multiwinner rules). Given this result, it is quite interesting that already (K \u2212 1)-best-OWA-Winner is NP-hard, both for approval-based and for Borda-based utilities. In our proof we give a reduction from the standard VertexCover problem (below we also define its version for cubic graphs, which will be useful a bit later).\nDefinition 6. In the VertexCover problem we are given an undirected graph G = (V,E), where V = {v1, . . . , vm} and E = {e1, . . . , en}, and a positive integer K. We ask if there is a set C of up to K vertices such that each edge is incident to at least one vertex from C. The CubicVertexCover problem is identical to the standard VertexCover problem, except each vertex in the input graph is required to have degree exactly three.\nVertexCover is well-known to be NP-hard [20]; NP-hardness for CubicVertexCover was shown by Alimonti and Kann [1].\nTheorem 7. (K\u22121)-best-OWA-Winner is NP-complete even for approval-based utilities.\nProof. Membership in NP is clear. We show a reduction from the VertexCover problem. Let I be an instance of VertexCover with graph G = (V,E), where V = {v1, . . . , vm} and E = {e1, . . . , en}, and with a positive integer K (without loss of generality, we assume that K \u2265 3 and K < m).\nWe construct an instance I \u2032 of (K \u2212 1)-best-OWA-Winner in the following way. We let the set of items be A = V and we form 2n agents, two for each edge. Specifically, if ei is an edge connecting two vertices, call them vi,1 and vi,2, then we introduce two agents, e 1 i and e2i , with the following utilities: e 1 i has utility 1 for vi,1 and for vi,2, and has utility 0 for all the other items; e2i has opposite utilities\u2014it has utility 0 for vi,1 and for vi,2, and has utility 1 for all the remaining ones.\nLet W be some set of K items (i.e., vertices) and consider the sum of the utilities derived by the two agents e1i and e 2 i from W under (K\u22121)-best-OWA. If neither vi,1 nor vi,2 belong to W , then the total utility of e1i and e 2 i is equal to K \u2212 1 (the former agent gets utility 0 and the latter one gets K \u2212 1). If only one of the items, i.e., either vi,1 or vi,2, belongs to W , then the total utility of e1i and e 2 i is equal to K (the former agent gets utility 1 and the latter one still gets K \u2212 1). Finally, if both items vi,1, vi,2 belong to W , then the total utility of e1i and e 2 i is also equal to K (the former gets utility 2 and the latter gets utility K \u2212 2). Thus the total utility of all agents is equal to K \u00b7 n if and only if the answer to the instance I is \u201cyes\u201d. This shows that the reduction is correct and, since the reduction is computable in polynomial time, the proof is complete.\nA variant of this result for Borda-based utilities follows by an application of a similar idea, but the restriction to Borda-based utilities requires a much more technical proof.\nTheorem 8. (K \u2212 1)-best-OWA-Winner is NP-hard even for Borda-based utilities.\nProof. As before, it is clear that the problem is in an NP and we only show NP-hardness. We give a reduction from VertexCover (see the previous proof for an exact definition). Let I be an instance of the VertexCover problem that consists of undirected graph G = (V,E), where V = {v1, . . . , vm} and E = {e1, . . . , en}, and positive integer K (without loss of generality, we assume that K \u2265 3).\nFrom I, we construct an instance I \u2032 of (K \u2212 1)-best-OWA-Winner with Borda-based utilities as follows. We set\nx = 4n(m+ 2)(K + 4)\nand we let the set of items be A = V \u222a {d1, d2} \u222aH, where H = {h1, . . . , hx} and {d1, d2} are sets of dummy items that we need to build appropriate structure of the utility profile. To build the set of agents N , we set\ny = (n(x+m+ 2)2 + 1)\nand we set N = NE \u222aN1\u222a . . .\u222aNy, where NE = {e 1 1, e 2 1, . . . , e 1 n, e 2 n} contains pairs of agents that correspond to the edges of G, and N1, . . . , Ny contain pairs of agents needed for the construction. Specifically, every set Ni, 1 \u2264 i \u2264 y, consists of two agents, f 1 i and f 2 i . We refer to the agents in the set N1 \u222a \u00b7 \u00b7 \u00b7 \u222aNy as the \u201cdummy agents.\u201d We describe agents\u2019 utilities through their preference orders. The agents in the set NE have the following preference orders. Let ei \u2208 E be an edge of the graph that connects vertices vi,1 and vi,2. Agents e 1 i and e 2 i have preference orders:\ne1i : d1 \u227b d2 \u227b V \u2212 {vi,1, vi,2} \u227b H \u227b {vi,1, vi,2}, e2i : d1 \u227b d2 \u227b {vi,1, vi,2} \u227b H \u227b V \u2212 {vi,1, vi,2}.\n(When we put a set of items in a preference order, this means that this set can be replaced by these items in an arbitrary, easily computable, way.) Each agent f1i , 1 \u2264 i \u2264 y, has the same, fixed, preference order:\nf1i : d1 \u227b v1 \u227b v2 \u00b7 \u00b7 \u00b7 \u227b vm \u227b d2 \u227b h1 \u00b7 \u00b7 \u00b7 \u227b hx.\nSimilarly, each agent f2i , 1 \u2264 i \u2264 y, has preference order:\nf2i : d2 \u227b vm \u227b vm\u22121 \u00b7 \u00b7 \u00b7 \u227b v1 \u227b d1 \u227b h1 \u00b7 \u00b7 \u00b7 \u227b hx.\nFinally, in the instance I \u2032 we seek a set of winners of size K + 2. This means that we use (K + 1)-best-OWA to compute the aggregated utility than an agent derives from a set of winners.\nThis concludes the description of the reduction and it is clear that it is polynomial-time computable. Before we prove that it is correct, let us make several observations. Let W be\nsome optimal solution for I \u2032. We claim that W does not contain any of the items from H. For the sake of contradiction, assume that some h \u2208 H belongs to W . Since d1 and d2 are ranked ahead of h in every preference order (and in some preference orders d1 is first and d2 is second, so their utility cannot be ignored by the (K +1)-best-OWA), we infer that d1 and d2 must belong to W as well (otherwise we would obtain higher utility by replacing h with one of d1 and d2 in W ). Let v be some item from V that does not belong to W . If we replace h with v in W then the total utility of the dummy agents increases by at least 2y. Why is this so? Consider some pair Ni, 1 \u2264 i \u2264 y of dummy agents. item h is either the lowest ranked member of W for both f1i and f 2 i or for neither. We consider these cases:\n\u2022 h is the lowest-ranked winner for both the agents in Ni. Replacing h with v means that either some other member h\u2032 of H \u2229W becomes the lowest ranked winner for both f1i and f 2 i , or d2 becomes the lowest ranked winner for f 1 i and d1 becomes\nthe lowest ranked winner for f2i . In either case, both f 1 i and f 2 i obtain utility higher by at least one from v than from the item that became the new lowest-ranked winner. Thus, the total utility yielded by these two agents increases by at least two.\n\u2022 h is not the lowest-ranked winner for either agent in Ni. In this case, since both agents rank v higher thank h and replacing h with v does not change the lowestranked winner for either of the agents, their total utility also increases at least by two.\nSince there are y pairs of agents, the total utility increases by at least 2y. Since the total utility of the agents from NE is lower than 2n(x+m+2)\n2 < 2y, we see that after the change the total utility of all the agents increases. Thus, we get a contradiction and we conclude that W does not contain any of the agents from H.\nNext, we claim that both d1 and d2 belong to W . We give a detailed argument for d1 only; the case of d2 is analogous. For the sake of contradiction, assume that d1 does not belong to W . Let vk be an item from W such for each vj , j < k, vj does not belong to W . By our assumptions, for each agent f2i , 1 \u2264 i \u2264 y, vk is the lowest-ranked winner from W . Thus, if we replace vk with d1 in W , then the utility of each agent f 2 i will not change, whereas the utility of each agent f1i will increase. Further, the utility of each agent from NE will increase. Thus, by replacing vk with d1, we can increase the total utility of the agents. We reach a contradiction and we conclude that d1 must have been a member of W . An analogous argument shows that d2 belongs to W as well.\nAs the result of the above reasoning, we infer that each set of winners consists of d1, d2, and K items from V . Whenever both d1 and d2 are included in the set of winners and neither item from H is, the total utility of the dummy agents is the same, irrespective which items from V are selected. With these observations, we now show that the answer for the input VertexCover instance is \u201cyes\u201d if and only if there is a size-(K + 2) winner set for I \u2032 that for agents in the set NE yields total utility at least nx(K + 4).\n(\u21d2) Let us assume that there exists a cover C for I, that is, a set C of K vertices such that each edge is incident to at least one vertex from C. We show that winner set W = C \u222a {d1, d2} gives total utility of every two agents e 1 i and e 2 i , 1 \u2264 i \u2264 n, equal to at\nleast x(K + 4). Pick some arbitrary i, 1 \u2264 i \u2264 n, and let vi,1 and vi,2 be the two vertices connected by edge ei. If both vi,1 and vi,2 belong to C, then e 2 i obtains utility at least x for each item in {vi,1, vi,2, d1, d2} (at least utility 4x in total). On the other hand, e 1 i obtains utility at least x for each item in W \u2212 {vi,1, vi,2}. This gives utility at least Kx. Altogether, both agents get utility at least x(K + 4). If only one of the items vi,1 and vi,2, say vi,1, belongs to C, then e 2 i obtains utility at least 3x (at least x for every item from {vi,1, d1, d2}), and e 1 i obtains utility at least (K + 1)x (at least 2x from items d1 and d2, and at least (K \u2212 1)x from the K \u2212 1 members of C that e1i ranks on the top positions). Again, both agents get utility at least x(K + 4). Thus the total utility of the agents in NE in the optimal solution must be at least nx(K + 4).\n(\u21d0) Assume that W is some optimal solution for I \u2032 and that for the agents in NE it yields utility at least nx(K + 4). By previous discussion, we know that W contains d1, d2, and K members of V . We set C = W \\ {d1, d2}. Let us fix some arbitrary i, 1 \u2264 i \u2264 n. Let vi,1 and vi,2 be the two vertices connected by edge ei. We observe that under W , the total utility of agents e1i and e 2 i is at most (x+m+ 2)(K + 4) +mK. To see this, let z be the number of items from {vi,1, vi,2} that are included in C and note that (1) for the upper bound we can disregard the OWA that we use, (2) there are x + m + 2 items and so we can upper-bound the utility derived from each item by x+m+2, (3) altogether, the items from W are ranked on at most K+2\u2212 z top-(m+2) positions by e1i (we upper-bound their total utility by (K + 2\u2212 z)(x+m+ 2)) and at most 2 + z top-(m+ 2) positions by e2i (we upper-bound their total utility by (2+ z)(x+m+2)), and (4) the items from W are ranked on at most z bottom-m positions by e1i (we upper-bound their total utility by zm) and on K \u2212 z bottom-m positions by e2i (we upper-bound their total utility by (K \u2212 z)m). When we sum up these upper bounds, we get (x+m+2)(K+4)+mK. However, for our argument we also need an upper bound on the total utility of e1i and e 2 i under the assumption that neither vi,1 nor vi,2 belongs to C. In this case, the upper bound is (x+m+2)(K+3)+mK. We obtain it in the same way as the previous bound, except that we note that due to our (K + 1)-best-OWA, the utility derived by e1i can take into account at most K + 1 agents from the top-(m+ 2) positions of the preference order of e1i .\nBased on these upper bounds, we will now show that if the total utility derived from W by the agents in NE is nx(K + 4), then C must correspond to a cover of all the edges of G. To this end, consider a situation where there is at least one edge ei such that neither of the vertices that it connects belongs to C. By using our upper bounds, in this case the total utility of the agents from NE can be at most:\n(K + 3)(x+m+ 2) + (n\u2212 1)(K + 4)(x+m+ 2) + nmK\n= (x+m+ 2)(K + 3 + (n\u2212 1)(K + 4)) + nmK\n= (x+m+ 2)(n(K + 4)\u2212 1) + nmK\n= xn(K + 4) + n(m+ 2)(K + 4)\u2212 (x+m+ 2) + nmK\n= xn(K + 4) + 0.25x\u2212 (x+m+ 2) + nmK\n< xn(K + 4)\n(The last two lines follow directly by the definition of x.) So, from the assumption that C is not a solution for I, we obtain that the total utility of the agents in NE must be lower than nx(K +4), which contradicts our assumption. Thus C is a correct solution for I and, so, I is a yes-instance of VertexCover. This completes the proof.\nUsing a proof that combines the ideas of the proof of Theorems 4 and 7, we show that indeed OWA-Winner is NP-hard for a large class of natural OWAs. This time, for the sake of simplicity, we give a proof for the approval-based utilities only.\nTheorem 9. Fix an OWA family \u03b1, such that there exists p, that for every \u03b1(K) we have \u03b1 (K) p > \u03b1 (K) p+1; \u03b1-OWA-Winner is NP-hard for approval-based utilities.\nProof. We give a reduction from CubicVertexCover problem. Let I be an instance of CubicVertexCover with graph G = (V,E), where V = {v1, . . . , vm} and E = {e1, . . . , en}, and positive integer K. W.l.o.g., we assume that n > 3.\nWe construct an instance I \u2032 of \u03b1-OWA-Winner. In I \u2032 we set N = E (the agents correspond to the edges), A = V \u222a {b1, b2, . . . bp\u22121} (there are (p \u2212 1) dummy items; other items correspond to the vertices), and we seek a collection of items of size K + p\u2212 1. Each agent ei, ei \u2208 E, has utility 1 exactly for all the dummy items and for two vertices that ei connects and for each of the dummy items (for the remaining items ei has utility 0). In effect, each agent has utility 1 for exactly p+ 1 items.\nWe claim that I is a yes-instance of CubicVertexCover if and only if there exists a solution for I \u2032 with the total utility at least n\n\u2211p i=1 \u03b1i + (3K \u2212 n)\u03b1p+1.\n(\u21d2) If there is a vertex cover C of size K for G, then by selecting the items W = C \u222a {b1, b2, . . . bp\u22121} we obtain the required utility of the agents. Indeed, for every agent ei there are at least p items in W for which i gives value 1 (the p\u22121 dummy items and at least one vertex incident to ei). These items contribute the value n \u2211p i=1 \u03b1i to the total agents\u2019 utility. Additionally, since every non-dummy item has value 1 for exactly 3 agents, and since every agent has at most (p+1) items with value 1, there are exactly (3K \u2212 n) agents that have exactly (p + 1) items in W with values 1. These (p + 1)\u2019th additional utility-1 items of the (3k \u2212 n) agents contribute (3K \u2212 n)\u03b1p+1 to the total utility. Altogether, the agents\u2019 utility is n\n\u2211p i=1 \u03b1i + (3K \u2212 n)\u03b1p+1, as claimed.\n(\u21d0) Let us assume that there is a set of (K + p \u2212 1) items with total utility at least n \u2211p\ni=1 \u03b1i + (3K \u2212 n)\u03b1p+1. In I \u2032 we have (p\u2212 1) items that have value 1 for each of the n agents, and every other item has value 1 for exactly 3 agents. Thus, the sum of the utilities of K + p \u2212 1 items (without applying the OWA operator yet) is at most (p \u2212 1)n + 3K = pn + (3K \u2212 n). Thus, the total utility of the agents (now applying the OWA operator) is n\n\u2211p i=1 \u03b1i + (3K \u2212 n)\u03b1p+1 only if for each agent ei the solution contains p items with\nutility 1. Since there are only p \u2212 1 dummy items, it meas that for each agent ei there is a vertex vj in the solution such that ej is incident to vj . That is, I is a yes-instance of CubicVertexCover.\nThe above theorem applies directly, for example, to the families of geometric progression OWAs and arithmetic progression OWAs.\nCorollary 10. The problems gprog[p]-OWA-Winner (for any p > 1) and aprog[a]-OWAWinner (for any a > 0) are NP-complete.\nIn fact, the following theorem (whose proof builds upon the above constructions) shows an even stronger NP-hardness result.\nTheorem 11. Fix an OWA family \u03b1, such that for every K, \u03b1(K) is nonincreasing and nonconstant; \u03b1-OWA-Winner is NP-hard for approval-based utilities.\nProof sketch. We reduce from CubicVertexCover. Let I be an instance of CubicVertexCover with graph G = (V,E), where V = {v1, . . . , vm} and E = {e1, . . . , en}, and with positive integer K.\nNow let us consider \u03b1(2K); since \u03b1(2K) is nonincreasing and nonconstant, one of the two following conditions must hold.\n1. There exists p \u2264 K, that \u03b1 (2K) p > \u03b1 (2K) p+1 .\n2. There exists p > K, that \u03b1 (2K) p > \u03b1 (2K) p+1 , and for every p \u2264 K, we have \u03b1 (2K) p = \u03b1 (2K) p+1 .\nIf (1) is the case then we use a reduction similar to that in the proof of Theorem 9. The only difference is that apart from the set D1 of (p \u2212 1) dummy items (ranked first by all agents), we introduce the set D2 of (2K \u2212 p + 1) dummy items and (2K \u2212 p + 1) sets N1, N2, . . . , N2K\u2212p+1, each consisting of 2n dummy agents. The dummy items from D2 are introduced only to fill-up the solution up to 2K members. The dummy agents from Ni have utility 1 for each of the items from D1 and for the i\u2019th item from D2 (they have utility 0 for all the other items). This is to enforce that the items from D2 are selected in the optimal solution. The further part of the reduction is as in the proof of Theorem 9.\nIf (2) is the case, then we use a reduction similar to that in the proof of Theorem 7. Similarly as before, we also need to introduce the sets: D1 of (p \u2212 1) dummy items, D2 of (2K\u2212p+1) dummy items, and (2K\u2212p+1) sets N1, N2, . . . , N2K\u2212p+1 of dummy agents.\nBy the above discussion, we conjecture that the family of constant OWAs, that is, the family of K-best OWAs, is the only natural family for which \u03b1-OWA-Winner is in P. We leave this conjecture as a natural follow-up question.\nNonetheless, we still might be in a position where it is necessary to obtain an exact solution for a given \u03b1-OWA-Winner instance and the brute-force algorithm from Proposition 3 is too slow. In such a case, it might be possible to use an integer linear programming (ILP) formulation of the problem, given below. We believe that this ILP formulation is interesting in its own right and, in particular, that it is interesting future work to experimentally assess the size of instances for which it yields solutions in reasonable amount of time.\nTheorem 12. OWA-Winner reduces to computing a solution for the following integer linear program.\nminimize\nn \u2211\ni=1\nm \u2211\nj=1\nK \u2211\nk=1\n\u03b1kui,ajxi,j,k\nsubject to:\n(a) :\nm \u2211\ni=1\nxi = K\n(b) : xi,j,k \u2264 xj , i \u2208 [n]; j, k \u2208 [K]\n(c) :\nm \u2211\nj=1\nxi,j,k = 1 , i \u2208 [n]; k \u2208 [K]\n(d) :\nK \u2211\nk=1\nxi,j,k = 1 , i \u2208 [n]; j \u2208 [m]\n(e) :\nm \u2211\nj=1\nui,ajxi,j,k \u2265 m \u2211\nj=1\nui,ajxi,j,(k+1) , i \u2208 [n]; k \u2208 [K \u2212 1]\n(f) : xi,j,k \u2208 {0, 1} , i \u2208 [n]; j, k \u2208 [K]\n(g) : xj \u2208 {0, 1} , j \u2208 [m]\nProof. Consider an input instance with n agents N = [n] and m items A = {a1, . . . , am}, where we seek a winner set of size K, under OWA \u03b1 = (\u03b11, . . . , \u03b1K). For each i \u2208 N , aj \u2208 A, we write ui,aj to denote the utility that agent i derives from item aj.\nWe form an instance of ILP with the following variables: (1) For each i \u2208 N , j \u2208 [m], and k \u2208 [K], there is an indicator variable xi,j,k (intuitively, we interpret xi,j,k = 1 to mean that for agent i, item aj is the k-th most preferred one among those selected for the solution). (2) For each j \u2208 [m], there is an indicator variable xj (intuitively, we interpret xj = 1 to mean that aj is included in the solution). Given these variables (and assuming that we enforce their intuitive meaning), the goal of our ILP is to maximize the function \u2211n\ni=1 \u2211m j=1 \u2211K k=1 \u03b1kui,ajxi,j,k.\nWe require that our variables are indeed indicator variables and, thus, take values from the set {0, 1} only (constraints (f) and (g)). We requite that the variables of the form xi,j,k are internally consistent. (constraint (c) says that each agent ranks only one of the candidates from the solution as k-th best, constraint (d) say that there is no agent i and item aj such that i views aj as ranked on two different positions among the items from the solution.) Then, we require that variables of the form xi,j,k are consistent with those of the form xj (constraint (b)) and that exactly K items are selected for the solution (constraint (a)).\nOur final constraint, constraint (e), requires that variables xi,j,k indeed for each agent sort the items from the solution in the order of descending utility values. We mention that constraint (e) is necessary only for the case of OWAs \u03b1 that are not-nonincreasing. For a nonincreasing \u03b1, an optimal solution for our ILP already ensures the correct \u201csorting\u201d (otherwise our goal function would not be maximized).\nAlgorithm 1: The greedy algorithm for finding the utilitarian set of K winners.\nW \u2190 \u2205 ; for \u2113 \u2190 1 to K do\nscore \u2190 {} ; foreach a \u2208 A \\W do\ns \u2190 0; foreach i \u2208 N do\np \u2190 \u2016{w \u2208 W : ui,w \u2264 ui,a\u2016+ 1 ; s \u2190 s+ ui,a \u00b7 \u03b1p ;\nscore[a] \u2190 s W \u2190 W \u222a {argmaxa\u2208A\\W score[a]};"}, {"heading": "4.2 (In)Approximability Results: General Utilities and Approval Utilities", "text": "The OWA-Winner problem is particularly well-suited for applications that involve recommendation systems (see, e.g., the work of Lu and Boutilier [27] for a discussion of 1-bestOWA-Winner in this context). For recommendation systems it often suffices to find good approximate solutions instead of perfect, exact ones, especially if we only have estimates of agents\u2019 utilities. It turns out that the quality of the approximate solutions that we can produce for OWA-Winner very strongly depends on both the properties of the particular family of OWAs used and on the nature of agents\u2019 utilities.\nFirst, we show that as long as our OWA is nonincreasing, a simple greedy algorithm achieves (\n1\u2212 1e )\napproximation ratio. This result follows by showing that for a nonincreasing OWA \u03b1, the function u\u03b1ut (recall Definition 1) is submodular and nondecreasing, and by applying the famous result of Nemhauser et al. [30].\nRecall that if A is some set and u is a function u : 2A \u2192 R+, then we say that: (1) u is submodular if for each W and W \u2032, W \u2286 W \u2032 \u2286 A, and each a \u2208 A \\ W \u2032 it holds that u(W \u222a a)\u2212 u(W ) \u2265 u(W \u2032 \u222a a)\u2212 u(W \u2032), and (2) u is nondecreasing if for each W \u2286 A and each a \u2208 A it holds that u(W \u222a {a}) \u2265 u(W ).\nLemma 13. Let I be an instance of OWA-Winner with a nonincreasing OWA \u03b1. The function u\u03b1ut is submodular and nondecreasing.\nProof. Let I be an instance of OWA-Winner with agent set N = [n], item set A = {a1, . . . , am}, desired solution size K, and OWA \u03b1 = \u3008\u03b11, . . . , \u03b1K\u3009. For each agent i \u2208 N and each item aj \u2208 A, ui,aj is a nonnegative utility that i derives from aj .\nSince all the utilities and all the entries of the OWA vector are nonnegative, we note that u\u03b1ut is nondecreasing. To show submodularity, we decompose u \u03b1 ut as follows:\nu\u03b1ut(W ) = K\u22121 \u2211\n\u2113=1\n(\u03b1\u2113 \u2212 \u03b1\u2113+1)u \u2113-best-OWA ut (W ) + \u03b1Ku K-best-OWA ut (W )\nFor each W \u2286 A, i \u2208 N and \u2113 \u2208 [m], let Top(W, i, \u2113) be the set of those \u2113 items from W whose utility, from the point of view of agent i, is highest (we break ties in an arbitrary way). Since nonnegative linear combinations of submodular functions are submodular, it suffices to prove that for each i \u2208 N and each \u2113 \u2208 [m], function u\u2113i(W ) = \u2211\nw\u2208Top(W,i,\u2113) ui,w is submodular.\nTo show submodularity of u\u2113i , consider two sets, W and W \u2032, W \u2286 W \u2032 \u2286 A, and some\na \u2208 A \\W \u2032. We claim that:\nu\u2113i(W \u222a {a})\u2212 u \u2113 i(W ) \u2265 u \u2113 i(W \u2032 \u222a {a})\u2212 u\u2113i(W \u2032). (1)\nLet uW and uW \u2032 denote the utilities that the i-th agent has for the \u2113-th best items from W and W \u2032, respectively (or 0 if a given set has fewer than \u2113 elements). Of course, uW \u2032 \u2265 uW . Let ua denote i-th agent\u2019s utility for a. We consider two cases. If ua \u2264 uW , then both sides of (1) have value 0. Otherwise:\nu\u2113i(W \u2032 \u222a {a})\u2212 u\u2113i(W \u2032) = max(ua \u2212 uW \u2032 , 0)\nu\u2113i(W \u222a {a}) \u2212 u \u2113 i(W ) = ua \u2212 uW ,\nwhich proves (1) and completes the proof.\nTheorem 14. For a nonincreasing OWA \u03b1, Algorithm 1 is a polynomial time (1 \u2212 1/e)approximation algorithm for the problem of finding the utilitarian set of K winners.\nProof. The thesis follows from the results of Nemhauser et al. [30] on approximating nondecreasing submodular functions.\nIs a (1\u2212 1e )-approximation algorithm a good result? After all, 1\u2212 1 e \u2248 0.63 and so the algorithm guarantees only about 63% of the maximum possible satisfaction for the agents. Irrespective if one views it as sufficient or not, this is the best possible approximation ratio of a polynomial-time algorithm for (unrestricted) OWA-Winner with a nonincreasing OWA. The reason is that 1-best-OWA-Winner with approval-based utilities is, in essence, another name for the MaxCover problem, and if P 6= NP, then (1 \u2212 1e ) is approximation upper bound for MaxCover [17]. We omit the exact details of the connection between MaxCover and 1-best-OWA-Winner and instead we point the readers to the work of Skowron and Faliszewski [36] who discuss this point in detail (we mention that they refer to what we call 1-best-OWA-Winner as winner determination for Chamberlin\u2013Courant\u2019s voting rule).\nFurther, for OWAs that are not nonincreasing, it seems that we cannot even hope for such a (1 \u2212 1e )-approximation algorithm. Such OWAs yield utility functions that are not necessarily submodular. For example, this is the case for 2-med OWA.\nExample 15. Let us consider a single agent, two sets of itemsW = {c, d} andW \u2032 = {b, c, d} (of course W \u2282 W \u2032), and 2-med-OWA \u03b1. The utilities of the agent over the items a, b, c, and d are equal to 10, 9, 2, and 1, respectively. We get:\nu\u03b1ut(W \u222a {a}) \u2212 u \u03b1 ut(W ) = 2\u2212 1 = 1, u \u03b1 ut(W \u2032 \u222a {a}) \u2212 u\u03b1ut(W \u2032) = 9\u2212 2 = 7.\nThat is, u\u03b1ut is not submodular. Indeed, this example works even for approval-based utilities: it suffices to set the utilities for a and b to be 1, and for c and d to be 0.\nIt is quite plausible that there are no constant-factor approximation algorithms for many not-nonincreasing OWAs. As an example, let us consider the case of families of OWAs whose first entries are zero (but that, nonetheless, have a nonzero entry at a sufficiently early position). If there were a good approximation algorithm for winner determination under such OWAs, then there would be a good approximation algorithm for the DensestK-Subgraph problem, which seems unlikely.\nDefinition 16. In a Densest-k-Subgraph problem we are given an undirected graph G = (V,E) and a positive integer K. We ask for a subgraph S with K vertices with the maximal number of edges.\nTheorem 17. Fix some integer \u2113, \u2113 \u2265 2. Let \u03b1 be a family of OWAs such that each OWA in the family (for at least \u2113 numbers) has 0s on positions 1 through \u2113\u22121, and has a nonzero value on the \u2113\u2019th position. If there is a polynomial-time x(n)-approximation algorithm for \u03b1-OWA-Winner then there is a polynomial-time x(n)-approximation algorithm for the Densest-k-Subgraph problem.\nWe should mention that Theorem 17 holds for a somewhat more general class of OWAs than stated explicitly. The proof relies on the fact that the first entry of the OWA is zero and that after the first non-zero entry of the OWA there are still K \u2212 1 positions, where K is the parameter from the input Densest-K-Subset instance.\nof Theorem 17. Let I be an instance of the Densest-K-Subgraph problem with graph G = (V,E) and positive integer K. From I we construct an instance I \u2032 of \u03b1-OWA-Winner, where the set of agents N is E, the set of items is A = V \u222a {d1, . . . , d\u2113\u22122} (or V if \u2113 = 2), and we seek a winner set of size K + \u2113 \u2212 2. Agents utilities are set as follows: For each agent e and each item dj , 1 \u2264 j \u2264 \u2113\u2212 2, the utility of e for dj is 1. If e is an edge in G than connects vertices u and v then agent e\u2019s utility for u and v is 1 and is 0 for the remaining items from V .\nIt is easy too see that the items d1, . . . , d\u2113\u22122 all belong to every optimal solution for I \u2032. It is also easy to see that in each optimal solution the utility of each agent e is nonzero (and exactly equal to \u03b1\u2113, the \u2113-th entry of the OWA \u03b1 used) if and only if both items corresponding to the vertices connected by e are included in the solution. Thus the total utility of every optimal solution for I \u2032 is equal to \u03b1\u2113 times the number of edges that connect any two vertices corresponding to the items from the solution.\nLet A be a polynomial-time x(n)-approximation algorithm for \u03b1-OWA-Winner. If A, returns a solution S for I \u2032 with none-zero utility, then the items d1, . . . , d\u2113\u22122 all belong to S. Let us take the vertices corresponding to the items S \\ {d1, . . . , d\u2113\u22122}. The number of the edges connecting these vertices is equal to the total utility of S divided by \u03b1\u2113. Thus, from x(n)-approximation solution for I \u2032 we can extract an x(n)-approximation solution for I. This completes the proof.\nIt seems that theDensest-k-Subgraph is not easy to approximate. Khot [25] ruled out the existence of a PTAS for the problem under standard complexity-theoretic assumptions. Bhaskara et al. [6] showed the polynomial integrality gap. Raghavendra and Steurer [34] and Alon et al. [2] proved that there is no polynomial-time constant approximation under non-standard assumptions. Finally, the best approximation algorithm for the problem that we know of, due to Bhaskara et al. [5], has approximation ratio O(n1/4+\u01eb), where n is the number of vertices in the input graph.\nAs a further evidence that OWAs that are not-nonincreasing are particularly hard to deal with from the point of view of approximation algorithms, we show that for an extreme example of an OWA family, i.e., for the K-med OWAs, there is a very strong hardness-ofapproximation result. We start from the following graph problem.\nDefinition 18. In the Maximum Edge Biclique Problem (MEBP) we are given a balanced bipartite graph (U \u222a V,E) where U \u222a V is the set of vertices (\u2016U\u2016 = \u2016V \u2016) and E is the set of edges (there are edges only between the vertices from U and V ). We ask for a biclique (i.e., a subgraph S, such that every vertex from U \u2229 S is connected with every vertex from V \u2229 S) with as many edges as possible.\nAccording to Feige and Kogan [18], there exists a constant c such that there is no polynomial (2c \u221a lgn/n)-approximation algorithm for MEBP unless for some \u01eb we have 3-SAT \u2208 DTIME(2n 3/4+\u01eb\n). Currently it seems unlikely that such an algorithm for 3-SAT exists. For our argument it is more convenient to define and use the following variant of MEBP.\nDefinition 19. In MEBP-V we are given the same input as in MEBP and a positive integer K. We ask for a biclique S such that \u2016S \u2229 V \u2016 = K and S contains as many edges as possible. Lemma 20. There exists a constant c such that there is no polynomial-time (2c \u221a lgn/n)approximation algorithm for MEBP-V unless for some \u01eb we have 3-SAT \u2208 DTIME(2n 3/4+\u01eb ).\nProof. For the sake of contradiction, let us assume that there exists a constant c and a polynomial-time (2c \u221a lgn/n)-approximation algorithm A for MEBP-V. By running A for every value of K ranging from 1 to \u2016V \u2016, we obtain a polynomial-time (2c \u221a lgn/n)approximation algorithm forMEBP. This stays in contradiction with the result of Feige and Kogan [18]. Theorem 21. There exists a constant c such that there is no polynomial-time (2c \u221a lgn/n)approximation algorithm for K-med-OWA-Winner unless for some \u01eb we have 3-SAT \u2208 DTIME(2n 3/4+\u01eb ). Proof. Let us assume that there is a constant c and a polynomial-time (2c \u221a lgn/n)-approximation algorithm A for K-med-OWA-Winner. We will show that we can use A to solve instances of MEBP-V with the same approximation ratio. By Lemma 20, this will prove our theorem.\nLet I be an instance of MEBP-V with bipartite graph G = (U \u222a V,E) and positive integer K. From I we construct an instance I \u2032 of K-med-OWA-Winner in the following way. We let the set of agents N be U , the set of items A be V , and we seek a winner set of size K. The utility of agent u from item v is equal to 1 if and only if u and v are connected in G; otherwise it is 0. Now we note that there is a one-to-one correspondence between the solutions for I and for I \u2032. Let S be a solution for I with x edges: S \u2229 V is also a solution for I \u2032 with the utility at least equal to x/K. Let S be a solution for I \u2032 with the utility x. All the agents from U with non-zero utilities, together with S, form a biclique with Kx edges. Thus, from the (2c \u221a lgn/n)-approximation solution for I \u2032 we can extract a (2c \u221a lgn/n)-approximation solution for I. This completes the proof.\nAs a corollary of the above proof, we also have that Hurwicz[\u03bb]-OWA-Winner is NPhard (through an almost identical proof, but with a certain dummy candidate, that gets utility 1 from everyone, added, and with the size of the winner set extended by 1).\nCorollary 22. Hurwicz[\u03bb]-OWA-Winner is NP-hard\nInterestingly, even though Hurwicz[\u03bb] OWA is not nonincreasing, we do show an approximation algorithm for it with a constant approximation ratio. This shows that, indeed, even for not-nonincreasing OWAs, sometimes some form of approximation result is possible (though we will comment on the value of this approximation later).\nProposition 23. Let A be a \u03b2-approximation algorithm for 1-best-OWA-Winner. A is a \u03bb \u00b7 \u03b2-approximation algorithm for Hurwicz[\u03bb]-OWA-Winner.\nProof. Let us consider some instance IH of Hurwicz[\u03bb]-OWA-Winner, where the goal is to pick a set of K items. We construct an instance I1 that is identical to IH , but for the 1-bestOWA, and we run algorithm A on I1. The algorithm outputs some set W = {w1, . . . , wK} (a \u03b2-approximate solution for I1). We claim that W is a \u03bb\u03b2-approximate solution for IH .\nLet WH = {wH1 , . . . , w H K} be an optimal solution for I H and let W 1 = {w11, . . . , w 1 K} be an optimal solution for I1. We first note that the following holds (recall the ~x\u2193 notation for sorted sequences):\nu Hurwicz[\u03bb] ut (W H) =\nn \u2211\ni=1\n(\n\u03bbu\u2193 i,wH1 + (1\u2212 \u03bb)u\u2193 i,wHK\n) \u2264 n \u2211\ni=1\nu\u2193 i,wH1\n\u2264 n \u2211\ni=1\nu\u2193 i,w11 = u1-bestut (W 1).\nIn effect, we have that u1-bestut (W 1) \u2265 u Hurwicz[\u03bb] ut (W H). Now, it is easy to verify that for W (or, in fact, for any set of K items) it holds that:\nu Hurwicz[\u03bb] ut (W ) =\nn \u2211\ni=1\n(\n\u03bbu\u2193i,w1 + (1\u2212 \u03bb)u \u2193 i,wK\n) \u2265 \u03bb n \u2211\ni=1\nu\u2193i,w1 = \u03bbu 1-best ut (W ).\nFinally, combining these two inequalities and the fact that W is a \u03b2-approximate solution for 1-bestOWA-Winner, we get:\nu Hurwicz[\u03bb] ut (W ) \u2265 \u03bbu 1-best ut (W ) \u2265 \u03bb\u03b2u 1-best ut (W 1) \u2265 \u03bb\u03b2u Hurwicz[\u03bb] ut (W H).\nThis completes the proof.\nBy using Algorithm 1 in the general case, and the algorithm of Skowron et al. [37] for 1-best-OWA-Winner for Borda-based utilities, we get the following corollary.\nCorollary 24. (1) There is an algorithm that for Hurwicz[\u03bb]-OWA-Winner with no restrictions on the utility functions achieves approximation ratio \u03bb(1\u2212 1e ). (2) For each positive \u01eb, there is an algorithm that for Hurwicz[\u03bb]-OWA-Winner for the case of Borda-based utilities achieves approximation ration \u03bb(1\u2212 \u01eb).\nFurther, returning to nonincreasing OWAs, we can even show an example of a PTAS for OWA-Winner for a certain family OWAs. However, to defeat the relation with the MaxCover problem, these OWAs need to be of a very special form: they need to be as similar to the K-best OWA as possible.\nTheorem 25. Consider a nonincreasing OWA \u03b1, \u03b1 = \u3008\u03b11, . . . , \u03b1K\u3009. Let I be an instance for \u03b1-OWA-Winner (where we seek a winner set of size K). An optimal solution for the same instance but with K-best-OWA is a (\n\u2211K i=1 \u03b1i)/(K\u03b11)-approximate solution for I.\nProof. Let I be the instance of \u03b1-OWA-Winner described in the statement of the theorem, let W \u2217 be one of its optimal solution, and let W be an optimal solution for the same instance, but with the K-best-OWA. Note that W is also an optimal solution for the Knumber constant OWA \u03b2 = \u3008\u03b11, . . . , \u03b11\u3009. We claim that the following inequalities hold (u \u03b1 ut is defined with respect to the instance I and u\u03b2ut is defined with respect to instance I with \u03b2 as the OWA):\nu\u03b1ut(W ) \u2265 \u2211K i=1 \u03b1i K\u03b11 u\u03b2ut(W ) \u2265 \u2211K i=1 \u03b1i K\u03b11 u\u03b2ut(W \u2217) \u2265 \u2211K i=1 \u03b1i K\u03b11 u\u03b1ut(W \u2217),\nThe second inequality holds because W is an optimal solution for I with OWA \u03b2. To see why the first and the third inequalities hold, let us focus on some agent i. The third inequality is simpler and so we prove it first.\nLet u\u22171, . . . , u \u2217 k be the utilities, in the nonincreasing order, that agent i has for the items\nin W \u2217. Thus the utility that i gets from W \u2217 under \u03b1 is \u2211K i=1 \u03b1iu \u2217 i . Since for each i, 1 \u2264 i \u2264 K, we have \u03b1i \u2264 \u03b11, i\u2019s utility under \u03b1 is less or equal to i\u2019s utility under \u03b2, \u2211K\ni=1 \u03b11u \u2217 i .\nWe now prove the first inequality. Let u1, . . . , uK be the utilities, in the nonincreasing order, that agent i has for the items in W . Our goal is to show that:\n\u03b11u1 + \u00b7 \u00b7 \u00b7+ \u03b1KuK \u2265 \u2211K i=1 \u03b1i K\u03b11 \u03b11u1 + \u00b7 \u00b7 \u00b7 + \u2211K i=1 \u03b1i K\u03b11 \u03b11uK = \u2211K i=1 \u03b1i K u1 + \u00b7 \u00b7 \u00b7+ \u2211K i=1 \u03b1i K uK .\nThis inequality is equivalent to\nK\u03b11u1 + \u00b7 \u00b7 \u00b7+K\u03b1KuK \u2265 K \u2211\ni=1\n\u03b1iu1 + \u00b7 \u00b7 \u00b7 + K \u2211\ni=1\n\u03b1iuK ,\nwhich itself is equivalent to\nu1(K\u03b11 \u2212 \u2211K i=1 \u03b1i) + \u00b7 \u00b7 \u00b7+ uK(K\u03b1K \u2212 \u2211K i=1 \u03b1i) \u2265 0.\nWe can rewrite the left-hand side of this inequality as:\n(u1 \u2212 u2)(K\u03b11 \u2212 \u2211K i=1 \u03b1i) + (u2 \u2212 u3)(K\u03b11 +K\u03b12 \u2212 2 \u2211K i=1 \u03b1i) + \u00b7 \u00b7 \u00b7+\n+ (uK\u22121 \u2212 uK)( \u2211K\u22121 j=1 K\u03b1j \u2212 (K \u2212 1) \u2211K i=1 \u03b1i) + uK( \u2211K j=1K\u03b1j \u2212K \u2211K i=1 \u03b1i).\nWe claim that each summand in this expression is nonnegative. Since u1, . . . , uK is a nonincreasing sequence of nonnegative utilities, we have that for each j, 1 \u2264 j \u2264 K \u2212 1, uj \u2212 uj+1 is nonnegative, and so is uK . Now fix some t, 1 \u2264 t \u2264 K. We have:\n\u2211t j=1K\u03b1j \u2212 t \u2211K i=1 \u03b1i = \u2211t j=1(K \u2212 t)\u03b1j \u2212 t \u2211K i=t+1 \u03b1i\n\u2265 t(K \u2212 t)\u03b1t \u2212 t K \u2211\ni=t+1\n\u03b1i \u2265 t(K \u2212 t)\u03b1t \u2212 t(K \u2212 t)\u03b1t = 0\nThis completes the proof.\nAs a consequence of this theorem, we immediately get the following result.\nTheorem 26. Let f : N \u2192 N be a function computable in polynomial-time with respect to the value of its argument, such that f(K) is o(K). There is a PTAS for (K \u2212 f(K))-bestOWA-Winner.\nProof. Let us fix some \u01eb, 0 < \u01eb < 1. We give a polynomial time \u01eb-approximation algorithm for (K \u2212 f(K))-best-OWA-Winner. Since f(K) is o(K), there is some value K\u01eb such that for each K \u2265 K\u01eb it holds that K\u2212f(K)\nK \u2265 \u01eb. If for our input instance we are to find a winner set of size K, K \u2265 K\u01eb, then we simply run the polynomial-time algorithm for K-best-OWA. Otherwise, we seek a winner set of size at most K\u01eb and we try all subsets of items of size K. Since, in this case, K is bounded by a constant, our algorithm runs in polynomial time.\nNonetheless, both Corollary 24 and Theorem 26 have a bitter-sweet taste. In essence, they say that instead of using a particular OWA family (either Hurwicz[\u03bb] or (K \u2212 f(K))best OWA), we might as well use a different, simpler one (1-best OWA or K-best OWA). If one wanted Hurwicz[\u03bb] OWA or (K \u2212 f(K)-best OWA for some very important reason, then these algorithms are insufficient (though, one could interpret them as suggesting that such a very important reason is unlikely).4\nStill, Theorem 26 is a very interesting result when contrasted with Theorem 17. Theorem 26 says that there is a PTAS for \u03b1-OWA-Winner for OWA family \u30081, . . . , 1, 0\u3009, whereas Theorem 17 suggests that it is unlikely that there is a constant-factor approximation algorithm for \u03b1-OWA-Winner with OWA family \u30080, 1, . . . , 1\u3009. Even though these two OWA families seem very similar, the fact that one is nonincreasing and the other one is not makes a huge difference in terms of approximability of our problem.\n4This comment applies to Hurwicz[\u03bb] for large values of \u03bb only."}, {"heading": "4.3 Polynomial Time Approximation Schemes: Borda Utilities", "text": "We now focus on OWA-Winner with Borda-based utilities. In this case the difference between nonincreasing OWAs and those that are not is much less pronounced than in the general case (approval-based case) and very strong approximation algorithms exist. Indeed, we show PTASes for many variants of \u03b1-OWA-Winner with Borda-based utilities.\nWe start by discussing Algorithm 2, which is a generalization of an algorithm of Skowron et al. [37] for 1-best-OWA. Algorithm 2 works for nonincreasing OWAs where only some initial \u2113 positions are nonzero. Recall that W(\u00b7) is Lambert\u2019s W function, that is, a function that for x \u2208 R+ satisfies the equation x = W(x)eW(x) (and, thus, W(x) is O(log(x))). The idea behind the algorithm is as follows: It proceeds in K iterations (where K is the winner-set size that we seek) and in each iteration it introduces one new item into the winner set. For each agent it considers only the top x = mW (\nK \u2113\n)\n\u2113 K items with highest\nutilities and in a given iteration it greedily picks an item a that maximizes the number of agents that (1) rank a among items with highest x utilities, and (2) still have \u201cfree slots\u201d (an agent has a free slot if among the so-far-selected winners less than \u2113 have utilities among the x highest ones for this agent). Below we give an example of how the algorithm works.\nExample 27. Consider the utility profile with n = 10 agents, m = 8 items a1, a2, . . . , a8, and the utilities extracted from the following preference orders using the Borda\u2019s rule.\nagent1 : a1 \u227b a2 \u227b a3 \u227b a4 \u227b a5 \u227b a6 \u227b a7 \u227b a8\nagent2 : a2 \u227b a1 \u227b a4 \u227b a3 \u227b a7 \u227b a6 \u227b a5 \u227b a8\nagent3 : a1 \u227b a3 \u227b a7 \u227b a4 \u227b a6 \u227b a5 \u227b a8 \u227b a2\nagent4 : a2 \u227b a1 \u227b a4 \u227b a5 \u227b a3 \u227b a8 \u227b a7 \u227b a6\nagent5 : a1 \u227b a6 \u227b a5 \u227b a8 \u227b a7 \u227b a4 \u227b a2 \u227b a3\nagent6 : a3 \u227b a2 \u227b a1 \u227b a5 \u227b a4 \u227b a7 \u227b a8 \u227b a6\nagent7 : a1 \u227b a2 \u227b a6 \u227b a4 \u227b a7 \u227b a6 \u227b a8 \u227b a3\nagent8 : a1 \u227b a3 \u227b a5 \u227b a7 \u227b a8 \u227b a6 \u227b a4 \u227b a2\nagent9 : a1 \u227b a4 \u227b a3 \u227b a5 \u227b a2 \u227b a6 \u227b a7 \u227b a8\nagent10 : a8 \u227b a6 \u227b a3 \u227b a4 \u227b a5 \u227b a2 \u227b a1 \u227b a7\nSo, for example, agent1 has utility 7 for a1, utility 6 for a2, 5 for a3, and so on. We take K = 4 and we are using the 2-best OWA, so that \u2113 = 2. Consequently, the algorithm will consider only the first x = \u2308mW (\nK \u2113\n)\n\u2113 K \u2309 = 4 positions of the agents\u2019 rankings (W(2) \u2248\n0.8562). Initially, each agent has \u2113 = 2 free slots. In the first iteration, the algorithm selects an item that is most frequent among the first 4 positions of the agents\u2019 rankings, i.e., a1. Every agent except for agent10 ranks a1 among the first 4 positions, so after the first iteration every agent except for agent10 is left with one free slot; agent10 still has 2 free slots. In the second iteration, the algorithm selects the most frequent item (excluding a1), i.e., either a3 or a4. Ties are broken arbitrarily, so let us assume that it picks a3. Every agent that ranks a3 among the first 4 positions is assigned a3 and loses one free slot. Now\nAlgorithm 2: An algorithm for nonincreasing OWAs where at most first \u2113 entries are nonzero, for the case of Borda-based utilities.\nNotation: \u03a6 \u2190 a map defining the number of free slots per agent. Initially for each agent i we have \u03a6[i] = \u2113.\nx \u2190 mW ( K \u2113 ) \u2113 K ; S \u2190 \u2205; for i \u2190 1 to K do\na \u2190 argmaxa\u2208A\\S\u2016{j | \u03a6(j) > 0 \u2227 posj(a) \u2265 x}\u2016; foreach j \u2208 {j | \u03a6(j) > 0} do if posj(a) \u2265 x then\n\u03a6[j] \u2190 \u03a6[j]\u2212 1;\nS \u2190 S \u222a {a}; return S\nthe agents agent4, agent5, agent7, and agent10 have one free slot left and the remaining ones have no free slots. In the third iteration, the algorithm considers only the 4 agents with free slots. The most two frequent items that are ranked among the first 4 positions by these 4 agents are a4 and a6; let us assume the algorithm picks a4. After this iteration only agent5 has a free slot. Since K = 4, the algorithm is allowed to pick one more item ranked among the first 4 positions by agent5, which is either of a5, a6, and a8. Say, the algorithm picks a5.\nTheorem 28. Fix a positive integer \u2113 and let \u03b1 be a nonincreasing OWA where at most first \u2113 entries are nonzero. Given an instance I of \u03b1-OWA-Winner, Algorithm 2 computes a (\n1\u2212 2W(K/\u2113)K/\u2113\n)\n-approximate solution for I in polynomial-time.\nProof. Consider an instance I of \u03b1-OWA-Winner, with n agents, m items, and where we seek a winner set of size K. Let x = mW (\nK \u2113\n)\n\u2113 K . Since we use an OWA, where an agent\u2019s\ntotal utility from a winner set W depends on this agent\u2019s utilities for the top \u2113 items from W (from this agent\u2019s point of view), we introduce the notion of free slots for each agent. Initially, each agent has \u2113 free slots. Whenever an agent j has a free slot and the algorithm selects an item a such that from j\u2019s perspective a is among x items with highest utilities, we say that a starts occupying one free slot of i. Consequently, after such item is selected, i has one free slot less.\nLet ni denote the total number of free slots of all the agents after the i-th iteration of the algorithm; n0 = \u2113n. We will show by induction that ni \u2264 \u2113n ( 1\u2212 x\u2113m )i . Indeed, the inequality is true for i = 0. Let us assume that it is true for some i: ni \u2264 \u2113n ( 1\u2212 x\u2113m )i . Let Fi denote the set of agents that have free slots after iteration i. There are at least ni \u2113 such agents. For j \u2208 Fi, let S(j) be the number of j\u2019s top-x items that were not included in the solution yet. If j \u2208 Fi has s free slots, then S(j) = (x \u2212 \u2113+ s). Thus we have that \u2211\nj\u2208Fi S(j) \u2265 ni + (x \u2212 \u2113) ni \u2113 = nix \u2113 . By the pigeonhole principle, there exists an item that\nis among top-x items for at least nix\u2113m agents from Fi. Thus, after the (i+ 1)-th iteration of the algorithm, the total number of free slots is at most:\nni+1 \u2264 ni \u2212 nix\n\u2113m = ni\n( 1\u2212 x\n\u2113m\n) \u2264 \u2113n ( 1\u2212 x\n\u2113m\n)(i+1)\nThus, at the end of the algorithm the total number of free slots is at most:\nnK \u2264 \u2113n ( 1\u2212 x\n\u2113m\n)K \u2264 \u2113n ( 1\u2212 x\n\u2113m\n)K = \u2113n\n(\n1\u2212 W\n(\nK \u2113\n)\nK\n)K\n= \u2113n\n(\n1\ne\n)W(K/\u2113)\n= \u2113nW(K/\u2113)\nK/\u2113 .\nThe number of occupied slots at the end of the algorithm is, thus, at least equal to (\n\u2113n\u2212 \u2113nW(K/\u2113)K/\u2113\n)\n. Every item that occupies an agent\u2019s slot has utility for this agent at\nleast equal to (\nm\u2212 mW(K/\u2113)K/\u2113\n)\n. Now, we will assess the OWA coefficients for the utilities\nof the items from the solution. If for some agent i the utility of an item a (ui,a) is taken with the coefficient \u03b1p (p > 1), then in the solution there must exist an item a\n\u2032 such that ui,a\u2032 \u2265 ui,a and such that ui,a\u2032 is taken with coefficient \u03b1p\u22121. Thus, there must exist at least 1 \u2113 ( \u2113n\u2212 \u2113nW(K/\u2113)K/\u2113 ) occurrences of the items with the utilities greater than ( m\u2212 mW(K/\u2113)K/\u2113 ) and such that these utilities are taken with the coefficient \u03b11. By repeating the same reasoning for the remaining occurrences of the items from the solution, we get that the total utility of the agents is lower bounded by:\n(\n\u2113n\u2212 \u2113nW(K/\u2113)\nK/\u2113\n)(\nm\u2212 mW(K/\u2113)\nK/\u2113\n)\n1\n\u2113\n\u2113 \u2211\ni=1\n\u03b1i \u2265 \u2113nm\n(\n1\u2212 W(K/\u2113)\nK/\u2113\n)2 1\n\u2113\n\u2113 \u2211\ni=1\n\u03b1i\n\u2265 nm\n(\n1\u2212 2W(K/\u2113)\nK/\u2113\n) \u2113 \u2211\ni=1\n\u03b1i.\nSince the total utility of all the agents can be upper-bounded by nm \u2211\u2113\ni=1 \u03b1i, we get the desired approximation ratio.\nTheorem 29. Fix a value \u2113 and let \u03b1 be a family of nonincreasing OWAs that have nonzero values on top \u2113 positions only. There is a PTAS for \u03b1-OWA-Winner for the case of Bordabased utilities.\nProof. For every \u01eb we show a polynomial algorithm with approximation ratio (1\u2212 \u01eb). Consider some \u01eb, 0 \u2264 \u01eb \u2264 1. There exists a value K\u01eb such that for each K > K\u01eb it holds that 2W(K/\u2113)\nK/\u2113 < \u01eb. For each instance I of \u03b1-OWA-Winner where we seek winner set of size at least K\u01eb, we run Algorithm 2. For the remaining cases, where the winner-set size is bounded by a constant, we use a brute-force algorithm.\nUsing the above result, we can also obtain a PTAS for OWA-Winner for geometric progression OWAs, for the case of Borda utilities. This is quite a useful result: some of our scenarios from Section 3 yield OWAs of this form.\nCorollary 30. Fix a value p > 1. There is a PTAS for gprog[p]-OWA-Winner for the case of Borda-based utilities.\nProof. Our goal is to show an algorithm that for a given value \u01eb, \u01eb > 0, in polynomial time outputs a (1\u2212 \u01eb)-approximate solution for gprog[p]-OWA-Winner. Let us fix the value of such \u01eb. The idea of our proof is to truncate the vector describing gprog[p] OWA to consider only some \u2113 nonzero items on the top, where \u2113 depends on \u01eb only, and to run the algorithm from Theorem 29.\nFor a given number t, let St be the sum of the first t coefficients of gprog[p]. We have: St = gprog[p]t + gprog[p]t\u22121 + \u00b7 \u00b7 \u00b7+ gprog[p]1 = pK\u2212t + pK\u2212(t\u22121) + \u00b7 \u00b7 \u00b7+ pK\u22121 = pK\u2212t pt\u22121 p\u22121 . We fix \u2113 = \u2308logp( 2 \u01eb )\u2309. Now, consider the ratio r = S\u2113/SK :\nr = S\u2113 SK = pK\u2212\u2113 p\u2113 \u2212 1 pK \u2212 1 > pK\u2212\u2113 p\u2113 \u2212 1 pK = 1\u2212 1 p\u2113 \u2265 1\u2212\n1\nplogp( 2 \u01eb ) = 1\u2212\n\u01eb 2 .\nIntuitively, the above inequality says that 1\u2212 \u01eb2 fraction of the total weight of gprog[p] OWA is concentrated in its first \u2113 coefficients.\nLet gprog[p]|\u2113 denote the OWA obtained from gprog[p] by replacing all coefficients with indices greater than \u2113 with 0. Let A be a (1 \u2212 \u01eb2)-approximation algorithm for gprog[p]|\u2113OWA-Winner. From Theorem 29 we know that such an algorithm exists. It is easy to see that A is a (1 \u2212 \u01eb)-approximation algorithm for gprog[p]-OWA-Winner. Indeed, the utility under gprog[p]|\u2113 for every K-element set W is close to the utility of W under gprog[p] (recall the ~x\u2193 notation for sorted sequences; the inequality in the second line holds because for each i we have\n\u2211\u2113 g=1 gprog[p]gu \u2193 i,wh \u2264 \u2211\u2113 j=1 gprog[p]ju \u2193 i,wj ):\nu gprog[p] ut (W ) =\nn \u2211\ni=1\nK \u2211\nj=1\ngprog[p]ju \u2193 i,wj\n\u2264 n \u2211\ni=1\n\n\n\u2113 \u2211\nj=1\ngprog[p]ju \u2193 i,wj +\nK \u2211\nh=\u2113+1\ngprog[p]h\n\u2211\u2113 j=1 gprog[p]ju \u2193 i,wj\n\u2211\u2113 g=1 gprog[p]g\n\n\n=\nn \u2211\ni=1\n\u2113 \u2211\nj=1\ngprog[p]ju \u2193 i,wj\n(\n1 +\n\u2211K h=\u2113+1 gprog[p]h\n\u2211\u2113 g=1 gprog[p]g\n)\n\u2264 n \u2211\ni=1\n\u2113 \u2211\nj=1\ngprog[p]ju \u2193 i,wj\n( 1 + \u01eb\n2\n) = ( 1 + \u01eb\n2\n)\nu gprog[p]|\u2113 ut (W ).\nFrom which we get that for every W :\nu gprog[p]|\u2113 ut (W ) \u2265 (1\u2212\n\u01eb 2 )u gprog[p] ut (W ).\nThis completes the proof because algorithm A returns a (1 \u2212 \u01eb2)-approximate solution for gprog[p]|\u2113-OWA-Winner and (1\u2212 \u01eb 2)(1 \u2212 \u01eb 2) \u2265 1\u2212 \u01eb.\nInterestingly, Theorem 29 can be generalized to the case of arbitrary OWAs (not necessarily nonincreasing) that have nonzero entries among top \u2113 positions only (where \u2113 is a constant.5) The idea of our algorithm is very similar to that presented as Algorithm 2, but this time we take more care in choosing the winning items, so that we ensure that a large collection of voters ranks at least \u2113 winners on positions with high utility values. Specifically, we use the following lemma, which is a direct consequence of Theorem 28 (or of the algorithm for 1-best-OWA-Winner of Skowron et al. [37]).\nLemma 31. Consider a set N of n agents and a set A of m items, where the agents rank the items from the most preferred ones to the least preferred ones. Let K, \u2113, and t be some positive integers such that K \u2264 m, \u2113 \u2264 K, and t \u2264 \u2113. Let x = mW(K/\u2113)K/\u2113 . There is a polynomial-time algorithm that finds a collection C of up to K/\u2113 items such that there are at least n(1 \u2212 W(K/\u2113)K/\u2113 ) agents that each rank at least one member of C between positions (t\u2212 1)x+ 1 and tx.\nProof. To see that this lemma holds, it suffices to analyze the proof of Theorem 28 for p = 1 and note that the proof works equally well irrespectively of whether we consider the positions 1 through x, or x + 1 through 2x, or any other segment of x positions in the agents\u2019 preference orders.\nTheorem 32. Fix a positive integer \u2113 and let \u03b1 be a family of OWAs that have nonzero entries on top \u2113 positions only. There is a polynomial-time (1 \u2212 2\u2113W(K/\u2113)K/\u2113 )-approximation algorithm for \u03b1-OWA-Winner for the case of Borda-based utilities.\nProof. Consider an input instance I of \u03b1-OWA-Winner with the set N = [n] of agents, with the set A of m items, and where we seek winner set of size K. We consider the agents\u2019 utilities to be represented by preference orders over A (recall the discussion of Borda-based utilities in Section 2.1 and the fact that we can decode these preference orders from the Borda-based utilities of the agents). Let \u03b1 = \u3008\u03b11, . . . , \u03b1\u2113, 0, . . . , 0\u3009 be the OWA used in this instance. We set x = mW(K/\u2113)K/\u2113 .\nOur algorithm proceeds in \u2113 iterations. We set N (0) = N and n(0) = n. In the i-th iteration, 1 \u2264 i \u2264 \u2113, the algorithm operates as follows: Using the algorithm from Lemma 31, we find a set A(i) of up to K/\u2113 items such that at least n(i\u22121)(1\u2212 W(K/\u2113)K/\u2113 ) of the agents from the set N (i\u22121) each rank at least one of these items among positions (i\u2212 1)x+ 1, . . . , ix of their preference orders. We let N (i) be the set of these agents and we set n(i) = \u2016N (i)\u2016. Finally, we set W =\n\u22c3\u2113 i=1A (i) and return W as the set of winners (it is easy to see that W contains at most K items; if K contains fewer than K items then we supplement it with K \u2212 \u2016W\u2016 arbitrarily chosen ones).\n5However, if one reads our proof carefully, it is clear that it generalizes to some values of \u2113 that depend\non K, but which are sufficiently small; e.g., it works for \u2113 = K 1 3 ).\nBy the construction of our algorithm, each of the agents from the set N (\u2113) ranks at least \u2113 items from the set W on positions no worse than \u2113x. Thus the total utility that the agents from the set N derive from the solution W is at least:\nn(\u2113)\n(\n\u2113 \u2211\ni=1\n\u03b1i\n)\n(m\u2212 x\u2113).\nThis is so, because for each i, 1 \u2264 i \u2264 \u2113, each of the agents in the set N (\u2113) derives utility \u03b1i(m\u2212 x\u2113) from the agent that he ranks as i\u2019th best among the items from W .\nBy construction of our algorithm, we have:\nn(\u2113) \u2265 n\n(\n1\u2212 W(K/\u2113)\nK/\u2113\n)\u2113\n\u2265 n\n(\n1\u2212 \u2113W(K/\u2113)\nK/\u2113\n)\n.\nThus, the total utility obtained by the agents is at least:\nu\u03b1ut(W ) \u2265 n\n(\n1\u2212 \u2113W(K/\u2113)\nK/\u2113\n)\n(\n\u2113 \u2211\ni=1\n\u03b1i\n)\n(m\u2212 x\u2113)\n= n\n(\n1\u2212 \u2113W(K/\u2113)\nK/\u2113\n)\n(\n\u2113 \u2211\ni=1\n\u03b1i\n)\n(\nm\u2212 \u2113 mW(K/\u2113)\nK/\u2113\n)\n= nm\n(\n\u2113 \u2211\ni=1\n\u03b1i\n)\n(\n1\u2212 \u2113W(K/\u2113)\nK/\u2113\n)(\n1\u2212 \u2113W(K/\u2113)\nK/\u2113\n)\n\u2265 nm\n(\n\u2113 \u2211\ni=1\n\u03b1i\n)\n(\n1\u2212 2\u2113W(K/\u2113)\nK/\u2113\n)\nNow, since the maximum possible total utility of all the agents is upper-bounded by nm(\n\u2211\u2113 i=1 \u03b1i), we have that our algorithm has approximation ratio (1 \u2212 2\u2113W(K/\u2113) K/\u2113 ). It is\nclear that it runs in polynomial time, and so the proof is complete.\nBased on Theorem 32, we can immediately generalize Theorem 29.\nTheorem 33. Fix a value \u2113 and let \u03b1 be a family of OWAs that have nonzero values on top \u2113 positions only. There is a PTAS for \u03b1-OWA-Winner for the case of Borda-based utilities.\nIt is interesting to compare Theorems 28 and 32. Even though the latter one covers a larger set of cases, the algorithm it implies achieves a notably weaker approximation ratio (even if still sufficient to obtain a PTAS). This shows that OWAs that are not nonincreasing are harder to deal with even for Borda-based utilities (even if the difference is much smaller than in the general case). Theorems 32 and 33 are also quite interesting in conjunction with Theorem 17. In particular, they show that it seems impossible to generalize Theorem 17 to the case of Borda-based utilities. It might be surprising at first, because it was possible to\ngeneralize Theorem 7 to the case of Borda utilities (as Theorem 8) and, indeed, the main ideas of these proofs are similar.\nIt is also interesting to note that there is nothing in the proofs of Theorems 28 and 32 that would stop us from using them for the case where \u2113 depends on K. In particular, Theorem 28 still gives an approximation ratio higher than 1 \u2212 1e of the greedy algorithm even for K10 -best OWA. For the case, of Theorem 32, it stays useful (i.e., still yields even a PTAS) for values of \u2113 in O(K0.5\u2212\u01eb), for each positive \u01eb (the same is true for Theorem 28 as long as \u2113(K) is such that W(K/\u2113(K))K/\u2113(K) goes to 0 when K goes to \u221e)."}, {"heading": "5 Related Work", "text": "Weighing intrinsic values by coefficients that are a function of their rank in a list is of course not new. Ordered Weighted Average operators have been used extensively in multicriteria decision making, and to a lesser extent in social choice [23]; the vector of values then corresponds to criteria (in MCDM) or to agents (in social choice). Also, studying rankdependent expected utility (RDEU) [33] is a well-known research stream in decision theory, whose starting point is the construction of models that explain Allais\u2019 paradox: given a set of possible consequences of an act, the contribution of a possible consequence on the agent\u2019s RDEU is a function of its probability and of its rank in the list of consequences ordered by decreasing probability. Whereas these three research streams use ranks to modify the contribution of a criterion, an agent, or a possible consequence, in our setting they modify the contribution of items, our final aim being to select an optimal set of items. Because we don\u2019t select criteria, agents or possible consequences, it is not obvious how our results can apply to these three aforementioned research fields.\nSeveral known settings are recovered as particular cases of our general model. In particular, this applies to some proportional representation schemes [13] and to (variants of) the budgeted social choice model [27]. Computational complexity of these proportional representation schemes was first studied by Procaccia et al. [32]; the parametrized complexity of the problem was analyzed by Betzler et al. [4]. The first approximation algorithm was proposed by Lu and Boutilier [27]. These results on approximability were then extended in several directions by Skowron et al. [37].\nGroup recommender systems (see, e.g., the work of O\u2019Connor et al. [31] for one of the first approaches, and the surveys of Jameson and Smyth [22] and of Masthoff [28]) aim at recommending sets or sequences of items (such as a set of television programs or a sequence of songs) to a group of users, based on preferences of all group members. Two mainstream approaches have been developed (see [22]): those based on the construction of an \u2018average user\u2019 whose preferences are built by aggregating the preferences of individuals in the group, and those based on producing individual recommendations and aggregating them. Unlike these, our approach (which recommends sets, but not yet sequences) proceeds in a single step, and enables a fine-tuning of the contribution of an item to each user\u2019s utility depending on the number of better items (for that user) in the list.\nFacility location problem (fl) is closely related to 1-best-OWA-Winner. In fl, how-\never, the goal is to minimize the dissatisfaction of the agents instead of maximizing their utility (satisfaction). Although, as far as exact solutions are concerned both formulations are equivalent, there is a significant difference in the quality of approximation (the difference between approximation guarantees for the maximization and minimization formulations of 1-best-OWA-Winner for Borda utilities is described by Skowron et al. [37]). Some works focus on general dissatisfaction functions [19], but most of the results were established for dissatisfactions corresponding to the distances, and thus satisfying the triangle inequality [21,35]. Also, in fl the goal is to minimize the dissatisfaction of the worst-off agent (the egalitarian view). The utilitarian version of the problem is called k-median [21]. The parametrized complexity of the problem was analyzed by Fellows and Fernau [19]. The approximation algorithms include [14,21,35]. Interestingly, a local-search algorithm (which, to the best of our knowledge, is the best known approximation algorithm for the capacitated\nversion of fl [14]) is also a 12 -approximation algorithm for maximizing nondecreasing submodular functions [30], and thus for OWA-Winner with non-decreasing utility functions. We conclude that it would be interesting to compare the algorithms for fl and k-median with different algorithms for OWA-Winner on real preference traces [29]."}, {"heading": "6 Summary", "text": "Our contribution is twofold. First, we have proposed a new model for the selection of a collective sets of items; this model appears to be very general, encompasses several known frameworks, and can be applied to various domains such as committee elections, group recommendation, and beyond. Second, we have investigated the computational feasibility of the model, depending on the various assumptions we can make about the agents\u2019 utilities and the choice of the OWA vector. Table 1 gives a summary of our results. We note that many of these results directly related to the OWA families that appear in the settings from Section 3, that were our motivating force.\nSome of our results look negative, while some others (especially in the case of Borda utilities) are on the positive side. However, the way the results should be interpreted depends on the application domain. In political elections and other high-stake domains, is makes sense to use an approximation algorithm only if it viewed as defining a new, full-fledged voting rule, which may enjoy many desirable properties (on this point see [11,12,16,37]); but it is arguably not reasonable to use an approximation algorithm (even with a good performance guarantee) if it is viewed as nothing more than an approximation algorithm of another rule, and it is even less reasonable to use a heuristic search algorithm (when there is no good approximation algorithm); this implies that using this model for political elections is feasible when the number of candidates is small enough, but can become problematic beyond that (unless we define the approximation algorithm to be the new voting rule, as said above). On the other hand, in low-stake applications domains (which can include some committee elections, and of course group recommender systems), it may become perfectly reasonable, and in that case, even NP-hardness and inapproximability results should not discourage us to use the model; they only tell that we may have to resort to heuristic search algorithms, which is one of the interesting directions for further research.\nOur research leads to many open problems. In particular, one might want to strengthen our approximation algorithms, provide algorithms for more general cases, provide more inapproximability results. Among these problems, a particularly interesting one regards the approximability of OWA-Winner for the arithmetic progression family of OWAs. For this case, our set of results is very limited. In particular, can one provide a PTAS for arithmeticprogression OWAs under Borda-based utilities? Can one do so for K2 -best OWAs/K-median OWAs?"}], "references": [{"title": "Some apx-completeness results for cubic graphs", "author": ["P. Alimonti", "V. Kann"], "venue": "Theor. Comput. Sci.,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2000}, {"title": "Inapproximabilty of densest k-subgraph from average case hardness", "author": ["N. Alon", "S. Arora", "R. Manokaran", "D. Moshkovitz", "O. Weinstein"], "venue": "Technical report,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "The Santa Claus problem", "author": ["N. Bansal", "M. Sviridenko"], "venue": "In Proceedings of STOC-2006,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2006}, {"title": "On the computation of fully proportional representation", "author": ["N. Betzler", "A. Slinko", "J. Uhlmann"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2013}, {"title": "Detecting high log-densities: an o(n1/4) approximation for densest k-subgraph", "author": ["A. Bhaskara", "M. Charikar", "E. Chlamtac", "U. Feige", "A. Vijayaraghavan"], "venue": "In Proceedings of STOC-2010,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "Polynomial integrality gaps for strong sdp relaxations of densest k-subgraph", "author": ["A. Bhaskara", "M. Charikar", "A. Vijayaraghavan", "V. Guruswami", "Y. Zhou"], "venue": "In Proceedings of SODA-2012,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "A general elicitation-free protocol for allocating indivisible goods", "author": ["S. Bouveret", "J. Lang"], "venue": "In Proceedings of IJCAI-2011,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Voting procedures", "author": ["S. Brams", "P. Fishburn"], "venue": "Handbook of Social Choice and Welfare,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2002}, {"title": "Efficient fair division help the worst off or avoid envy", "author": ["S. Brams", "D. King"], "venue": "Rationality and Society,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2005}, {"title": "The Win-Win solution: Guaranteeing Fair Shares to Everybody", "author": ["S. Brams", "A. Taylor"], "venue": "WW Norton & Company,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2000}, {"title": "On the approximability of Dodgson and Young elections", "author": ["I. Caragiannis", "J. Covey", "M. Feldman", "C. Homan", "C. Kaklamanis", "N. Karanikolas", "A. Procaccia", "J. Rosenschein"], "venue": "Artificial Intelligence,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "Socially desirable approximations for Dodgson\u2019s voting rule", "author": ["I. Caragiannis", "C. Kaklamanis", "N. Karanikolas", "A. Procaccia"], "venue": "In Proceedings of EC-2010,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "Representative deliberations and representative decisions: Proportional representation and the borda rule", "author": ["B. Chamberlin", "P. Courant"], "venue": "American Political Science Review,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1983}, {"title": "Improved approximation algorithms for capacitated facility location problems", "author": ["F. Chudak", "D.P. Williamson"], "venue": "Math. Program.,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2005}, {"title": "An axiomatic characterization of Borda\u2019s k-choice function", "author": ["B. Debord"], "venue": "Social Choice and Welfare,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1992}, {"title": "Properties of multiwinner voting rules", "author": ["E. Elkind", "P. Faliszewski", "P.S.A. Slinko"], "venue": "In Proceedings of AAMAS-2014,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2014}, {"title": "A threshold of ln n for approximating set cover", "author": ["U. Feige"], "venue": "J. ACM,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1998}, {"title": "Hardness of approximation of the balanced complete bipartite subgraph problem", "author": ["U. Feige", "S. Kogan"], "venue": "Technical report,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2004}, {"title": "Facility location problems: A parameterized view", "author": ["M.R. Fellows", "H. Fernau"], "venue": "Discrete Appl. Math.,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2011}, {"title": "Computers and Intractability: A Guide to the Theory of NP-Completeness", "author": ["M. Garey", "D. Johnson"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1979}, {"title": "Approximation algorithms for metric facility location and k-median problems using the primal-dual schema and lagrangian relaxation", "author": ["K. Jain", "V. Vazirani"], "venue": "J. ACM,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2001}, {"title": "Recommendation to groups", "author": ["A. Jameson", "B. Smyth"], "venue": "In The Adaptive Web,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2007}, {"title": "The role of the OWA operators as a unification tool for the representation of collective choice sets", "author": ["J. Kacprzyk", "H. Nurmi", "S. Zadrozny"], "venue": "In Recent Developments in the Ordered Weighted Averaging Operators,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2011}, {"title": "Elicitation-free protocols for allocating indivisble goods", "author": ["T. Kalinowski", "N. Narodytska", "T. Walsh", "L. Xia"], "venue": "In Proceedings of COMSOC-2012,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2012}, {"title": "Ruling out ptas for graph min-bisection, dense k-subgraph, and bipartite clique", "author": ["S. Khot"], "venue": "SIAM J. Comput,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2006}, {"title": "The unavailable candidate model: a decision-theoretic view of social choice", "author": ["T. Lu", "C. Boutilier"], "venue": "In Proceedings of ACM-EC-2010,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2010}, {"title": "Budgeted social choice: From consensus to personalized decision making", "author": ["T. Lu", "C. Boutilier"], "venue": "In Proceedings of IJCAI-2011,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2011}, {"title": "Group recommender systems: Combining individual models", "author": ["J. Masthoff"], "venue": "Recommender Systems Handbook,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2010}, {"title": "Preflib: A library for preferences http: //www.preflib.org", "author": ["N. Mattei", "T. Walsh"], "venue": "In ADT,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2013}, {"title": "An analysis of approximations for maximizing submodular set functions", "author": ["G. Nemhauser", "L. Wolsey", "M. Fisher"], "venue": "Mathematical Programming,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 1978}, {"title": "Polylens: A recommender system for groups of user", "author": ["M. O\u2019Connor", "D. Cosley", "J. Konstan", "J. Riedl"], "venue": "In Proceedings of ECSCW-2010,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2001}, {"title": "On the complexity of achieving proportional representation", "author": ["A. Procaccia", "J. Rosenschein", "A. Zohar"], "venue": "Social Choice and Welfare,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2008}, {"title": "Generalized Expected Utility Theory. The Rank-Dependent Model", "author": ["J. Quiggin"], "venue": "Kluwer Academic Publishers,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 1993}, {"title": "Graph expansion and the unique games conjecture", "author": ["P. Raghavendra", "D. Steurer"], "venue": "In Proceedings of STOC-2010,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2010}, {"title": "Approximation algorithms for facility location problems (extended abstract)", "author": ["D. Shmoys", "\u00c9. Tardos", "K. Aardal"], "venue": "In Proceedings of STOC-1997,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 1997}, {"title": "Approximating the maxcover problem with bounded frequencies in FPT time", "author": ["P. Skowron", "P. Faliszewski"], "venue": "Technical report,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2013}, {"title": "Fully proportional representation as resource allocation: Approximability results", "author": ["P. Skowron", "P. Faliszewski", "A. Slinko"], "venue": "In Proceedings of IJCAI-2013,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2013}, {"title": "On ordered weighted averaging aggregation operators in multicriteria decisionmaking", "author": ["R. Yager"], "venue": "IEEE Transactions on Systems, Man and Cybernetics,", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 1988}, {"title": "Multiwinner elections under preferences that are single-peaked on a tree", "author": ["L. Yu", "H. Chan", "E. Elkind"], "venue": "In Proceedings of IJCAI-2013,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2013}], "referenceMentions": [{"referenceID": 3, "context": "First, our model where the agents derive utility from their most preferred item among the selected one directly corresponds to winner determination under the Chamberlin\u2013Courant\u2019s voting rule [4,13,32] (it is also very deeply connected to the model of budgeted social choice [27]) and is in a certain formal sense a variant of the facility location problem.", "startOffset": 191, "endOffset": 200}, {"referenceID": 12, "context": "First, our model where the agents derive utility from their most preferred item among the selected one directly corresponds to winner determination under the Chamberlin\u2013Courant\u2019s voting rule [4,13,32] (it is also very deeply connected to the model of budgeted social choice [27]) and is in a certain formal sense a variant of the facility location problem.", "startOffset": 191, "endOffset": 200}, {"referenceID": 31, "context": "First, our model where the agents derive utility from their most preferred item among the selected one directly corresponds to winner determination under the Chamberlin\u2013Courant\u2019s voting rule [4,13,32] (it is also very deeply connected to the model of budgeted social choice [27]) and is in a certain formal sense a variant of the facility location problem.", "startOffset": 191, "endOffset": 200}, {"referenceID": 26, "context": "First, our model where the agents derive utility from their most preferred item among the selected one directly corresponds to winner determination under the Chamberlin\u2013Courant\u2019s voting rule [4,13,32] (it is also very deeply connected to the model of budgeted social choice [27]) and is in a certain formal sense a variant of the facility location problem.", "startOffset": 274, "endOffset": 278}, {"referenceID": 14, "context": "The case where for each item each agent derives the same fraction of the utility is, in essence, the same as K-winner range-voting (or K-winner Borda [15]); that agents enjoy equally the items they get is also a key assumption in the Santa Claus problem [3], and in the problem of designing optimal picking sequences [7,10,24].", "startOffset": 150, "endOffset": 154}, {"referenceID": 2, "context": "The case where for each item each agent derives the same fraction of the utility is, in essence, the same as K-winner range-voting (or K-winner Borda [15]); that agents enjoy equally the items they get is also a key assumption in the Santa Claus problem [3], and in the problem of designing optimal picking sequences [7,10,24].", "startOffset": 254, "endOffset": 257}, {"referenceID": 6, "context": "The case where for each item each agent derives the same fraction of the utility is, in essence, the same as K-winner range-voting (or K-winner Borda [15]); that agents enjoy equally the items they get is also a key assumption in the Santa Claus problem [3], and in the problem of designing optimal picking sequences [7,10,24].", "startOffset": 317, "endOffset": 326}, {"referenceID": 9, "context": "The case where for each item each agent derives the same fraction of the utility is, in essence, the same as K-winner range-voting (or K-winner Borda [15]); that agents enjoy equally the items they get is also a key assumption in the Santa Claus problem [3], and in the problem of designing optimal picking sequences [7,10,24].", "startOffset": 317, "endOffset": 326}, {"referenceID": 23, "context": "The case where for each item each agent derives the same fraction of the utility is, in essence, the same as K-winner range-voting (or K-winner Borda [15]); that agents enjoy equally the items they get is also a key assumption in the Santa Claus problem [3], and in the problem of designing optimal picking sequences [7,10,24].", "startOffset": 317, "endOffset": 326}, {"referenceID": 37, "context": "This distinction between the intrinsic value of an item and its value distorted by its rank are also considered in several other research fields, especially decision theory (\u201crank-dependent utility theory\u201d) and multicriteria decision making, from which we borrow one of the main ingredients of our approach, so-called ordered weighted average (OWA) operators [38] (see the following formal model).", "startOffset": 359, "endOffset": 363}, {"referenceID": 37, "context": "To this end, (1) for each agent i \u2208 N and for each item aj \u2208 A, we have an intrinsic utility ui,aj that agent i derives from aj ; (2) the utility that each agent derives from a set of K items is an ordered weighted average [38] of this agent\u2019s intrinsic utilities for these items.", "startOffset": 223, "endOffset": 227}, {"referenceID": 7, "context": ", the text of Brams and Fishburn [8] for a discussion of voting procedures).", "startOffset": 33, "endOffset": 36}, {"referenceID": 8, "context": ", by Brams and King [9]).", "startOffset": 20, "endOffset": 23}, {"referenceID": 12, "context": "1 Generalizing Chamberlin\u2013Courant\u2019s Voting Rule Our research started as an attempt to generalize the Chamberlin\u2013Courant\u2019s voting rule for electing sets of representatives [13].", "startOffset": 171, "endOffset": 175}, {"referenceID": 26, "context": "2 Malfunctioning Items or Unavailable Candidates In this first model, we assume that, as in classical group recommendation setting and budgeted social choice setting [27], each user only benefits from one item, but that the items may not be working properly: if we select (off-line) a set of items S, then (on-line) there will be a subset S+ of items that can be used, and a set S\u2212 = S \\ S+ of objects that are \u2018malfunctioning\u2019 or are unavailable\u2019 and cannot be used.", "startOffset": 166, "endOffset": 170}, {"referenceID": 25, "context": "For instance, items are radio channels that can be unreachable, or items are candidates running in an election and these candidates may finally decide to not take a position in the elected committee, or items are parking lots that are to be built but that can sometimes be full (see [26] for further examples of social choice with possibly unavailable candidates).", "startOffset": 283, "endOffset": 287}, {"referenceID": 25, "context": "Moreover, we have a prior probability distribution about the (un)availability of items: as in [26], we assume that each item is available with probability p (i.", "startOffset": 94, "endOffset": 98}, {"referenceID": 0, "context": ", on [0, 1] and that each user uses only the items that have a value at least \u03b8, where \u03b8 is a fixed (user-independent) threshold.", "startOffset": 5, "endOffset": 11}, {"referenceID": 31, "context": "By results of Procaccia, Rosenschein and Zohar [32] and Lu and Boutilier [27], we know that the 1-best-OWA-Winner problem is NP-hard both for approval and for Borda-based utilities (in this case the problem is equivalent to winner determination under appropriate variants of Chamberlin\u2013Courant voting rule; in effect, many results regarding the complexity of this rule are applicable for this variant of the problem [4,36,37,39]).", "startOffset": 47, "endOffset": 51}, {"referenceID": 26, "context": "By results of Procaccia, Rosenschein and Zohar [32] and Lu and Boutilier [27], we know that the 1-best-OWA-Winner problem is NP-hard both for approval and for Borda-based utilities (in this case the problem is equivalent to winner determination under appropriate variants of Chamberlin\u2013Courant voting rule; in effect, many results regarding the complexity of this rule are applicable for this variant of the problem [4,36,37,39]).", "startOffset": 73, "endOffset": 77}, {"referenceID": 3, "context": "By results of Procaccia, Rosenschein and Zohar [32] and Lu and Boutilier [27], we know that the 1-best-OWA-Winner problem is NP-hard both for approval and for Borda-based utilities (in this case the problem is equivalent to winner determination under appropriate variants of Chamberlin\u2013Courant voting rule; in effect, many results regarding the complexity of this rule are applicable for this variant of the problem [4,36,37,39]).", "startOffset": 416, "endOffset": 428}, {"referenceID": 35, "context": "By results of Procaccia, Rosenschein and Zohar [32] and Lu and Boutilier [27], we know that the 1-best-OWA-Winner problem is NP-hard both for approval and for Borda-based utilities (in this case the problem is equivalent to winner determination under appropriate variants of Chamberlin\u2013Courant voting rule; in effect, many results regarding the complexity of this rule are applicable for this variant of the problem [4,36,37,39]).", "startOffset": 416, "endOffset": 428}, {"referenceID": 36, "context": "By results of Procaccia, Rosenschein and Zohar [32] and Lu and Boutilier [27], we know that the 1-best-OWA-Winner problem is NP-hard both for approval and for Borda-based utilities (in this case the problem is equivalent to winner determination under appropriate variants of Chamberlin\u2013Courant voting rule; in effect, many results regarding the complexity of this rule are applicable for this variant of the problem [4,36,37,39]).", "startOffset": 416, "endOffset": 428}, {"referenceID": 38, "context": "By results of Procaccia, Rosenschein and Zohar [32] and Lu and Boutilier [27], we know that the 1-best-OWA-Winner problem is NP-hard both for approval and for Borda-based utilities (in this case the problem is equivalent to winner determination under appropriate variants of Chamberlin\u2013Courant voting rule; in effect, many results regarding the complexity of this rule are applicable for this variant of the problem [4,36,37,39]).", "startOffset": 416, "endOffset": 428}, {"referenceID": 14, "context": "Indeed, if the agents\u2019 utilities are either approval-based or Borda-based, K-best-OWAWinner boils down to (polynomial-time) winner determination for K-best approval rule and for K-Borda rule [15], respectively (see also the work of Elkind et al.", "startOffset": 191, "endOffset": 195}, {"referenceID": 15, "context": "[16] for a general discussion of multiwinner rules).", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "VertexCover is well-known to be NP-hard [20]; NP-hardness for CubicVertexCover was shown by Alimonti and Kann [1].", "startOffset": 40, "endOffset": 44}, {"referenceID": 0, "context": "VertexCover is well-known to be NP-hard [20]; NP-hardness for CubicVertexCover was shown by Alimonti and Kann [1].", "startOffset": 110, "endOffset": 113}, {"referenceID": 26, "context": ", the work of Lu and Boutilier [27] for a discussion of 1-bestOWA-Winner in this context).", "startOffset": 31, "endOffset": 35}, {"referenceID": 29, "context": "[30].", "startOffset": 0, "endOffset": 4}, {"referenceID": 29, "context": "[30] on approximating nondecreasing submodular functions.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "The reason is that 1-best-OWA-Winner with approval-based utilities is, in essence, another name for the MaxCover problem, and if P 6= NP, then (1 \u2212 1e ) is approximation upper bound for MaxCover [17].", "startOffset": 195, "endOffset": 199}, {"referenceID": 35, "context": "We omit the exact details of the connection between MaxCover and 1-best-OWA-Winner and instead we point the readers to the work of Skowron and Faliszewski [36] who discuss this point in detail (we mention that they refer to what we call 1-best-OWA-Winner as winner determination for Chamberlin\u2013Courant\u2019s voting rule).", "startOffset": 155, "endOffset": 159}, {"referenceID": 24, "context": "Khot [25] ruled out the existence of a PTAS for the problem under standard complexity-theoretic assumptions.", "startOffset": 5, "endOffset": 9}, {"referenceID": 5, "context": "[6] showed the polynomial integrality gap.", "startOffset": 0, "endOffset": 3}, {"referenceID": 33, "context": "Raghavendra and Steurer [34] and Alon et al.", "startOffset": 24, "endOffset": 28}, {"referenceID": 1, "context": "[2] proved that there is no polynomial-time constant approximation under non-standard assumptions.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5], has approximation ratio O(n1/4+\u01eb), where n is the number of vertices in the input graph.", "startOffset": 0, "endOffset": 3}, {"referenceID": 17, "context": "According to Feige and Kogan [18], there exists a constant c such that there is no polynomial (2c \u221a lgn/n)-approximation algorithm for MEBP unless for some \u01eb we have 3-SAT \u2208 DTIME(2n 3/4+\u01eb ).", "startOffset": 29, "endOffset": 33}, {"referenceID": 17, "context": "This stays in contradiction with the result of Feige and Kogan [18].", "startOffset": 63, "endOffset": 67}, {"referenceID": 36, "context": "[37] for 1-best-OWA-Winner for Borda-based utilities, we get the following corollary.", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "[37] for 1-best-OWA.", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "[37]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "Ordered Weighted Average operators have been used extensively in multicriteria decision making, and to a lesser extent in social choice [23]; the vector of values then corresponds to criteria (in MCDM) or to agents (in social choice).", "startOffset": 136, "endOffset": 140}, {"referenceID": 32, "context": "Also, studying rankdependent expected utility (RDEU) [33] is a well-known research stream in decision theory, whose starting point is the construction of models that explain Allais\u2019 paradox: given a set of possible consequences of an act, the contribution of a possible consequence on the agent\u2019s RDEU is a function of its probability and of its rank in the list of consequences ordered by decreasing probability.", "startOffset": 53, "endOffset": 57}, {"referenceID": 12, "context": "In particular, this applies to some proportional representation schemes [13] and to (variants of) the budgeted social choice model [27].", "startOffset": 72, "endOffset": 76}, {"referenceID": 26, "context": "In particular, this applies to some proportional representation schemes [13] and to (variants of) the budgeted social choice model [27].", "startOffset": 131, "endOffset": 135}, {"referenceID": 31, "context": "[32]; the parametrized complexity of the problem was analyzed by Betzler et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 3, "context": "[4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 26, "context": "The first approximation algorithm was proposed by Lu and Boutilier [27].", "startOffset": 67, "endOffset": 71}, {"referenceID": 36, "context": "[37].", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "[31] for one of the first approaches, and the surveys of Jameson and Smyth [22] and of Masthoff [28]) aim at recommending sets or sequences of items (such as a set of television programs or a sequence of songs) to a group of users, based on preferences of all group members.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[31] for one of the first approaches, and the surveys of Jameson and Smyth [22] and of Masthoff [28]) aim at recommending sets or sequences of items (such as a set of television programs or a sequence of songs) to a group of users, based on preferences of all group members.", "startOffset": 75, "endOffset": 79}, {"referenceID": 27, "context": "[31] for one of the first approaches, and the surveys of Jameson and Smyth [22] and of Masthoff [28]) aim at recommending sets or sequences of items (such as a set of television programs or a sequence of songs) to a group of users, based on preferences of all group members.", "startOffset": 96, "endOffset": 100}, {"referenceID": 21, "context": "Two mainstream approaches have been developed (see [22]): those based on the construction of an \u2018average user\u2019 whose preferences are built by aggregating the preferences of individuals in the group, and those based on producing individual recommendations and aggregating them.", "startOffset": 51, "endOffset": 55}, {"referenceID": 36, "context": "[37]).", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "Some works focus on general dissatisfaction functions [19], but most of the results were established for dissatisfactions corresponding to the distances, and thus satisfying the triangle inequality [21,35].", "startOffset": 54, "endOffset": 58}, {"referenceID": 20, "context": "Some works focus on general dissatisfaction functions [19], but most of the results were established for dissatisfactions corresponding to the distances, and thus satisfying the triangle inequality [21,35].", "startOffset": 198, "endOffset": 205}, {"referenceID": 34, "context": "Some works focus on general dissatisfaction functions [19], but most of the results were established for dissatisfactions corresponding to the distances, and thus satisfying the triangle inequality [21,35].", "startOffset": 198, "endOffset": 205}, {"referenceID": 20, "context": "The utilitarian version of the problem is called k-median [21].", "startOffset": 58, "endOffset": 62}, {"referenceID": 18, "context": "The parametrized complexity of the problem was analyzed by Fellows and Fernau [19].", "startOffset": 78, "endOffset": 82}, {"referenceID": 13, "context": "The approximation algorithms include [14,21,35].", "startOffset": 37, "endOffset": 47}, {"referenceID": 20, "context": "The approximation algorithms include [14,21,35].", "startOffset": 37, "endOffset": 47}, {"referenceID": 34, "context": "The approximation algorithms include [14,21,35].", "startOffset": 37, "endOffset": 47}], "year": 2017, "abstractText": "We consider the following problem: There is a set of items (e.g., movies) and a group of agents (e.g., passengers on a plane); each agent has some intrinsic utility for each of the items. Our goal is to pick a set of K items that maximize the total derived utility of all the agents (i.e., in our example we are to pick K movies that we put on the plane\u2019s entertainment system). However, the actual utility that an agent derives from a given item is only a fraction of its intrinsic one, and this fraction depends on how the agent ranks the item among available ones (in the movie example, the perceived value of a movie depends on the values of the other ones available). Extreme examples of our model include the setting where each agent derives utility from his or her most preferred item only (e.g., an agent will watch his or her favorite movie only), from his or her least preferred item only (e.g., the agent worries that he or she will be somehow forced to watch the worst available movie), or derives 1/K of the utility from each of the available items (e.g., the agent will pick a movie at random). Formally, to model this process of adjusting the derived utility, we use the mechanism of ordered weighted average (OWA) operators. Our contribution is twofold: First, we provide a formal specification of the model and provide concrete examples and settings where particular OWA operators are applicable. Second, we show that, in general, our problem is NP-hard but\u2014depending on the OWA operator and the nature of agents\u2019 utilities\u2014there exist good, efficient approximation algorithms (sometimes even polynomial time approximation schemes). Interestingly, our results generalize and build upon those for proportional represented in multiwinner voting scenarios.", "creator": "LaTeX with hyperref package"}}}