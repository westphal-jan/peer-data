{"id": "1411.4614", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "26-Sep-2014", "title": "Using graph transformation algorithms to generate natural language equivalents of icons expressing medical concepts", "abstract": "Medical concepts are expressed through symbols that convey rapid visual information about the current state of patients or the known effects of medications. To increase the acceptance and ease of use of visual language, an interface is currently being developed for the generation of natural language. In this context, this paper describes the use of an informatics method ---graph transformation--to prepare data consisting of concepts in an OWL-DL ontology for use in a component for the production of natural language. The OWL concept can be regarded as a star-shaped graph with a central node, which converts it into a graph representing the deep semantic structure of a natural language phrase. This work may be useful in the future in other contexts in which ontological concepts must be mapped onto semi-formalized natural language expressions.", "histories": [["v1", "Fri, 26 Sep 2014 05:09:40 GMT  (54kb)", "http://arxiv.org/abs/1411.4614v1", "Presented at the TSD 2014 conference: Text, Speech and Dialogue, 17th international conference. Brno, Czech Republic, September 8-12, 2014. 10 pages, 7 figures"]], "COMMENTS": "Presented at the TSD 2014 conference: Text, Speech and Dialogue, 17th international conference. Brno, Czech Republic, September 8-12, 2014. 10 pages, 7 figures", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["pascal vaillant", "jean-baptiste lamy"], "accepted": false, "id": "1411.4614"}, "pdf": {"name": "1411.4614.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Jean-Baptiste Lamy"], "emails": ["vaillant@univ-paris13.fr"], "sections": [{"heading": null, "text": "ar X\niv :1\n41 1.\n46 14\nv1 [\ncs .C\nL ]\n2 6\nSe p\nKeywords: Graph grammars, Natural Language Generation, Health and Medicine, Iconic Language"}, {"heading": "1 Introduction", "text": "This work takes place in the field of medical knowledge visualization. It is part of an ongoing project aiming at developing and promoting the use of new interfaces for accessing medical information systems, including a graphical representation language, VCM [1], whereby medical concepts are expressed by icons, and a multi-lingual interface. The graphical language is used to provide complex information in a form adapted to synthetic visual perception.\nTo be accepted and used more widely within different medical information systems, icons needs to be made as easy to learn and to use as possible. In this view, it is necessary to provide users with easily accessible natural language expressions of the meaning conveyed by any icon, e.g. in the form of a pop-up balloon appearing when the mouse cursor is hovering over the icon.\nThe icons express meanings which result from the combination of a finite set of elementary meaning components. As there are hundreds of thousands of potential combinations, and since the language design is still expanding, icons are dynamically generated from the elementary components. Thus, the natural language utterances also have to be automatically generated. To this purpose, we develop a natural language generation module, which outputs phrases in two languages.\nThe graphical language VCM is built against an ontology of medical concepts, defined with the OWL-DL representation formalism [2]. Every icon expresses a concept in the VCM ontology. So, the primary input data is an OWL concept, which corresponds to the medical concept to be expressed. This one concept is used in one process to generate an image object (not discussed here), and in another process to generate a natural language phrase. In the application context, more specifically, it is generally wished that the phrase should be a noun phrase (NP); but this should be a mere parameter of the generation process, and should it be desirable that the output be e.g. a sentence (S), it would be possible as well.\nSo, the stake of the work described here is the automatic generation of natural language expressions of concepts defined within a formal ontology. This problem has already raised interest in the semantic web community [3], and has given way to approaches allowing to precisely verbalize the set of logical restrictions and specifications which define concepts in a logical description language like OWLDL [4]. In the medical field, work has been done towards automatic generation of case descriptions in natural language from an RDF input [5].\nThe present work adopts another approach. It applies a method based on the principle of graph transformation (specifically, graph grammar) to the problem of preparing data into a form suitable for natural language generation. There are reasons to think that this approach is suited to the nature of the problem, and, moreover, that it has a potential to generalization."}, {"heading": "2 Background: context of use, input data", "text": "The minimal \u201cvisual utterances\u201d of the graphical language are icons. Those icons actually have a well-defined internal composition, built against a standardized visual grammar. The elements which make up an icon are graphical primitives, each of which contributes to the overall meaning of the visual sign. An icon may for instance (Figure 1.a) display: a central pictogram representing a liver; embedded in a square colored in orange (conventionally meaning \u201crisk\u201d); with a shape modifier on the left side made of a small graphical symbol representing a virus; and another shape modifier, located in the top right corner, showing a blue square (conventionally meaning \u201cmonitoring\u201d). As an example, such a combination of graphical primitives (central pictogram, shape, color, side modifier, superscript modifier), with their respective meanings (iconic or conventional) and their assembly rules, constitute a sign conveying the concept \u201cviral hepatitis risk monitoring\u201d.\nHence, the primary starting point for the text generation process is the same as the one for the icon generation process: a standardized code, made up of 7 positional fields, each of which corresponds to a possible graphical primitive (cf. caption of Figure 1).\nThe first step of the process actually is a parsing step. It consists in projecting the 7-fields code, that essentially is the specification of a syntagm in a graphical grammar, onto an ontology of concepts. To this end, a dictionary defines a mapping between graphical elements and concepts. More precisely, every graphical element considered within the context of a type of graphical relation between part and whole (e.g. \u201cblue square as superscript modifier\u201d), maps to one (or more) ontology entries that define a specific property constraining the most generic concept of the ontology, namely that of \u201cmedical state\u201d. For instance, one of the rules specifies that when a visual sign has as central color the color: orange, then the state thus represented is linked to the temporality: future. Similarly, if the visual sign has as side modifier the element: virus, then the state is linked to a viral infection. Again, if the sign has as central pictogram the pictogram: liver, then the state is linked to the organ: liver or to the function: hepatic.\nThe result of the parsing is a concept of a medical state, specified by a number of restrictive properties, which may be represented in the form of a graph. For example, the icon on Figure 1.a is a visual expression of the graph in Figure 1.b. Possible ambiguities of some graphical elements (e.g. the \u201cliver\u201d pictogram being used at times to represent the organ: liver, and at other times to represent the function: hepatic), are removed at that stage by a reasoner that filters valid OWL concepts. For instance, in the case exhibited above, it filters out the function, since a virus may infect an organ, but not (directly) a function.\nThe format of the data in Figure 1.b is not fit to be fed in to an automatic text generation process. Natural language generation takes as input data something that should be close to a deep semantic representation of some natural language fragment, that is a semantic graph (we will avoid the use of the term \u201cconceptual graph\u201d coined by John Sowa [6], since it has a more specific formal definition; moreover, it may mislead the reader into confusing \u201cconcepts\u201d of conceptual graphs with \u201cconcepts\u201d of OWL-DL). As a matter of fact, the graph which represents the concept in the ontology is: (1) of a regular shape (star-shaped); (2) non-ambiguous (within the reference ontology).\nOn the contrary, a semantic graph should represent the semantic structure underlying a given linguistic phrase. Hence, it possesses the properties expected from that level of representation, namely, it is (1) of an irregular shape (not necessarily star-shaped, or linear); (2) made up of ambiguous, i.e. multivocal, units. The node labels in the semantic graphs are multivocal as much in their relation to the reference ontology (a \u201csemanteme\u201d may match more than one concept, and a concept more than one semantemes) as in their relation to the surface linguistic forms (a semanteme may be expressed by different lexical units depending on its syntactic context, e.g. \u201ceye\u201d or \u201cocular\u201d).\nA semantic graph that would correspond to one of the most basic, \u201cnaive\u201d, among the many possible ways of expressing the concept of Figure 1, would be the graph in Figure 2.\nOf course, in this particular case, there are more elegant ways to express the concept, which at the same time are closer to the actual use by health professionals (here, \u201cviral hepatitis risk monitoring\u201d). But we deliberately take the naive phrase as example, because the goal of the natural language generation process described here precisely is not to provide the most frequent term: it is to provide a verbalization of what concept exactly is covered by the icon, with a view to help users of health information systems better understand the logic of the graphic language. The idea explored in this work is that from the same exact input code, two different functions will generate an image on one side, and a natural language string (or a sorted set of alternative natural language strings) on another.\nIn a medical classification like e.g. the one used by ICD-10, the base concept will be referred to by the term \u201cviral hepatitis\u201d, not as \u201cviral infection of the liver\u201d. But our graphical language is designed with the ambition to be able to express medical concepts by combining primary elements, not to reflect an exact mapping with a specific medical classification. Consequences of this are: that it is possible to build icons for concepts which are not relevant nor frequent; that some icons might be more specific, in what they actually express, than a most common medical term; and that other icons might be more generic (for instance, a \u201cmyocardial infarction\u201d is represented by an icon, the exact meaning of which is \u201cblocked blood vessel in the heart\u201d). We view this independance from medical\nterminology as a feature of the language. There are many reasons for this: first, there are different medical terminologies, and our visual language must be able to be used in conjunction with any of them; second, the ontology approach, with a few discrete atomic axes, permits to express a much greater number of possible combinations of medical concepts than the terminology approach, which sets in advance a finite set of possibilities (this rationale also is behind the GRAIL language, defined within the GALEN project [7]). Third, there is no 100% agreement between different experts on exact mappings of even widespread medical concepts \u2014one more evidence that there may be no bijective mapping between any given classification and even a subset of a graphical language.\nThe initial step of the text generation process hence consists in transforming the primary input data (the OWL concept, expressed as a graph, like in Figure 1.b) into a deep semantic structure (the semantic graph, like in Figure 2). So, it is a graph transformation process."}, {"heading": "3 Method: graph transformation", "text": "The problem with the preparation of data lies in the fact that some specific configurations of properties of the initial medical concept are jointly expressed by set words or phrases from the human language (English in the example given here). For example, the fact that the medical state affects the liver (top left part of the graph in Figure 1.b), and that it is connected with a viral pathology (top right part), is expressed in English (among other possibilities) by the phrase \u201cviral infection of the liver\u201d (the present paper concentrates on the graph transformation process, and hence does not address the issue of generating multiple possible expressions, by using different roots \u2014like \u2018hepat-\u2019 instead of \u2018liver\u2019\u2014 or by using different linguistic mechanisms \u2014like morphological derivation instead of syntax).\nAnother property of the initial concept, e.g. in this case the fact that it refers to a future possibility, is spontaneously expressed as a noun phrase headed by \u2018risk\u2019, and taking as a syntactic argument the already built phrase (\u201crisk of viral infection of the liver\u201d), as in Figure 2. This underlying graph structure is different from the one directly drawn from concept properties (Figure 1.b), which, if linearized as natural language, would rather yield some text like \u201cThere is a risk of a state. The state affects the liver. The state is related to a viral infection.\u201d\nTransformations of that type are systematic. Changing parameters in the entry graph would yield structurally identical phrases like \u201cparasitic infection of the liver\u201d or \u201cviral infection of the respiratory tract\u201d.\nTo this end, we need graph rewriting rules allowing to specify the systematic transformation of a sub-structure of the input graph (corresponding to the pattern: medical state affecting an organ Y; medical state connected to a pathology X) into a sub-structure of the output semantic graph (corresponding to the under-specified phrase: \u201c<pathology Y> of <organ X>\u201d). Such a transformation does not imply preserving either the number or the \u201cperimeter\u201d of the nodes in\nthe input graph when transferring their meaning into the output graph. For instance, the node \u201cViral_infection\u201d (Figure 1.b), a unique individual entity in the ontology, should be translated by two different semantemes of the English language: \u201cviral\u201d and \u201cinfection\u201d (Figure 3).\nSimilarly, we need a rule able to express the systematic transformation of the subgraph in the input graph expressing the property \u201cFuture\u201d into a a subgraph in the output graph corresponding to the lexical unit \u201crisk of ...\u201d (Figure 4).\nThere is a difference between the examples in Figure 3 and Figure 4: in the first case, the output semantic subgraph is complete, or saturated (it could be an output graph in itself); whereas in the second case, the output subgraph is awaiting completion by being grafted to another, saturated, semantic graph. The node marked with a star in the right side of Figure 4 may be called substitution node (in analogy with the technical term used in the frame of the Tree-Adjoining Grammars to refer to a comparable operation on phrase-structure trees): it is a non-instanciated node that has to be substituted for by another graph, given as a function argument.\nThe approach adopted here is based on the principle of \u201cgraph grammars\u201d [8], which has given way to important developments in the past two decades, especially in the field of process modelling [9]. Our algorithm defines a set of transformation rules \u2014or graph-rewriting rule. Each rule takes an under-specified graph as input, on its left-hand side (filter subgraph), and yields another underspecified graph as output, on its right-hand side (product subgraph).\nOur algorithm may be classified in the category of graph grammars proper, not simply graph-rewriting systems (following the distinction drawn by Blostein [10]), because it makes a difference between terminal graphs and non-terminal graphs, analogous to the similar difference that phrase-structure grammars (PSG) make between terminal strings (made up of terminal symbols only) and nonterminal strings in a linear language.\nIn the present case, a terminal graph is a graph that contains only nodes of the type semanteme, and has no more node of the type concept. Semantemes and concepts belong to two different XML/RDF namespaces."}, {"heading": "4 Method: implementation", "text": "The generic rewriting system is implemented as a module in the python programming language. It relies on four specific mechanisms: (1) an operation of unification of graph topological structures, along with unification of node and edge labels; (2) a translation function, mapping the set of input node labels onto the set of output node labels; (3) a co-indexing mechanism to manage glueing the incident edges (left loose after removing a node of the input graph) to a node in the rewritten graph; (4) a substitution mechanism, defined at unsaturated nodes, to manage glueing the neighboring (saturated) nodes to edges pertaining to the rewritten graph.\n(1) The detection of matching sites for a filter graph (left-hand side graph of a rewriting rule) implies: (a) detecting an isomorphism between part of the complete input graph and the filter graph, and (b) identifying subtype-to-supertype (\u201cis a\u201d) relations between (more specific) node labels in the input graph and (more generic) node labels in the filter graph. Such \u201cis a\u201d relations depend on the concept type hierarchy defined within the graphical language ontology. They allow e.g. to recognize that the subgraph circled by a dotted line, in the bottom right corner of Figure 5, is a specific instance of the generic filter graph displayer in the top right part of the same figure (by making sure that a \u201cviral infection\u201d is a sort of \u201cinfection\u201d, which is a sort of \u201ctrouble\u201d; and that the \u201cliver\u201d is a sort of \u201corgan of the digestive system\u201d, which is a sort of \u201canatomy\u201d).\n(2) The generation of the product subgraph, when a rule is being applied to a matching site, relies on a translation function (noted tr in Figures 3 and 4), which maps every element in the OWL concept ontology onto a small semantic graph (generally, but not necessarily, made up of one single semanteme node). In fact, since the concepts of the filter graph are under-specified, it is not possible\nto specify in advance, for every rule, the exact type of the nodes in the product subgraph.\n(3) When the filter subgraph of a rule finds a matching site on a bigger input graph, the result of the rewriting operation is a new graph where the subgraph found at the matching site is replaced by the product subgraph of the rule. The \u201cglueing\u201d of that product subgraph with the remaining parts of the input graph relies on a co-indexing mechanism between product graph and filter graph. Coindices are attributes present on both filter-side nodes and product-side nodes, that get numeric values; when a filter-side node and a product-side node share the same co-index, it means that they should match the same node in the input graph. The actual integer number used as value for a co-index in the definition of a rule may be arbitrary: its only purpose is to be shared by the left-hand side and the right-hand side. If there are more than one co-index, different integer values mean that the relevant nodes should match distinct nodes in the input graph. Hence, co-indices allow to spot the nodes in the input graph where loose incident relations of the product subgraph have to be \u201cglued\u201d.\n(4) Some product subgraphs are made up of a set of fully determined semantemenodes, that express all the concepts of the input graph which were captured when matching the filter subgraph (Figure 3). Other, oppositely, have a loose edge \u2014 to put it another way, they include an edge between a node which is already fully determined in the product subgraph, and a node which has to be determined somewhere else (Figure 4). Such product subgraphs contain a substitution node. After the application of the rule, the substitution node must be unified with a saturated node from the remaining of the graph, to build the whole rewritten graph (Figure 6). Substitution is compulsory.\nRemark: Points (3) and (4) actually are implemented by the same underlying computer function operating on graphs, and taking two arguments: the \u201cgraft\u201d and the \u201ctrunk\u201d. This function attempts to find co-indexed nodes on both sides sharing the same value, and it \u201cglues\u201d the two graphs on those nodes. For every such \u201cco-indexed site\u201d, one of the sides must be filled and the other side blank. (3) is implemented when the trunk node is blank and the graft node is filled; (4) is implemented when it is the other way around.\nThe algorithm works by iterated rewritings: At step 0, the set of rewritings R0 is initialized to G; G being the original input graph, representing the OWL concept. At every step n+1, Rn+1 is augmented with the set of rewritings yielded by applying matching rules to elements of Rn, when those results do not already belong to Rn:\nRn+1 \u2190 Rn \u222a {Rk(g) | g \u2208 Rn},\nwhere Rk(g) denotes the result of rewriting a graph g (present in Rn) by one of the applicable rewriting rules, k.\nWhen the set Rn ceases to grow between two iterations, the loop is exited, and Rn is filtered so that only the \u201cterminal\u201d graphs are kept (the graphs where all the nodes are semantemes, and no more concepts).\nIn our system, the generic processing mechanisms are separated from the description of specific rewriting rules, like it is common practice in the field of formal grammars (it is an instance of the more general principle that data should be treated separately from processes). The former are implemented by functions in the python programming language, taking graph-rewriting rule identifiers as en input parameter; the latter are stored in XML documents following an ad hoc document schema."}, {"heading": "5 Conclusion and Perspective", "text": "The next step in the present work is the development of a complete text generation module, based on the generation of phrase structure trees by derivation of elementary trees in a TAG lexicalized grammar [11].\nThe graphical language is built on minimal segments of expression called icons, a description of which has been given above (Section 2). Those icons may be combined together, following a constrained visual syntax, to compose more complex iconic utterances: on bidimensional surfaces, structured in predefined fields, they form synthetic visualization grids displaying information about the complete set of contraindications or side effects of a drug, or the clinical condition of a patient.\nA future extension of the natural language generation work will be taking into account that visual syntax, to be able to translate complex graphical utterances in texts in the chosen target natural language. It is envisioned that future\ndevelopments shall include other output languages, so that the visual language approach actually allows embedding in multi-lingual systems for displaying medical information.\nWe believe that the method presented here has a potential for generalization. It can be used in other cases where generation of natural language equivalents of OWL concepts may be desirable as a tool to help ontology users; and, more generally, when the pre-linguistic input for natural language generation is expressed in a knowledge representation formalism translatable in the form of graphs. This might be of use in other application fields, like automatic explanation generation in health information systems, or help in decision making."}], "references": [{"title": "An iconic language for the graphical representation of medical concepts", "author": ["Lamy", "J.-B.", "C. Duclos", "A. Bar-Hen", "P. Ouvrard", "A. Venot"], "venue": "BMC Med. Inform. Decis. Mak., 8 (16)", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2008}, {"title": "OWL web ontology language guide", "author": ["C. Welty", "D.L. McGuinness", "M.K. Smith"], "venue": "W3C Recommandation. W3C", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2004}, {"title": "Talking OWLs: Towards an ontology verbalizer", "author": ["G. Wilcock"], "venue": "Proc. ISWC Workshop on Human Language Technology for the Semantic Web and Web Services, pp. 109\u2013112", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2003}, {"title": "Effective NL paraphrasing of ontologies on the semantic web", "author": ["D. Hewlett", "A. Kalyanpur", "V. Kolovski", "C. Halaschek-Wiener"], "venue": "Proc. ISWC Workshop on End User Semantic Web Interaction, CEUR-WS.org, vol. 172", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2005}, {"title": "Automatic report generation from ontologies: the MIAKT approach", "author": ["K. Bontcheva", "Y. Wilks"], "venue": "Meziane, F., M\u00e9tais, E. (eds.) Natural Language Processing and Information Systems: Proc. 9th International Conference on Appl. of Natural Language to Information Systems (NLDB). LNCS, vol. 3136, pp. 324\u2013335. Springer, Heidelberg", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2004}, {"title": "Conceptual structures: information processing in mind and machine", "author": ["J. Sowa"], "venue": "Addison Wesley, New York", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1984}, {"title": "The GRAIL concept modelling language for medical terminology", "author": ["A.L. Rector", "S. Bechhofer", "C.A. Goble", "I. Horrocks", "W.A. Nowlan", "W.D. Solomon"], "venue": "Artif. Intell. Med., 9 (2), pp. 139\u2013171", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1997}, {"title": "Introduction to Graph Grammars with Applications to Semantic Networks", "author": ["H. Ehrig", "A. Habel", "H.J. Kreowski"], "venue": "Comput. Math. Appl., 23 (6\u20139), pp. 557\u2013572. Elsevier, Amsterdam", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1992}, {"title": "Graph grammar engineering with PROGRES", "author": ["A. Sch\u00fcrr", "A.J. Winter", "A. Z\u00fcndorf"], "venue": "Sch\u00e4fer, W., Botella, P.: Software Engineering \u2014 ESEC \u201995: Proc. 5 European Software Engineering Conference (ESEC). LNCS, vol. 989, pp. 219\u2013234. Springer, Heidelberg", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1995}, {"title": "Issues in the practical use of graph rewriting", "author": ["D. Blostein", "H. Fahmy", "A. Grbavec"], "venue": "Cuny, J., Ehrig, H., Engels, G., Rozenberg, G. (eds) Graph Grammars and Their Application to Computer Science. LNCS, vol. 1073, pp. 38\u201355. Springer, Heidelberg", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1996}, {"title": "Parsing strategies with \u2018lexicalized\u2019 grammars: application to Tree Adjoining Grammars", "author": ["Y. Schabes", "A. Abeill\u00e9", "A.K. Joshi"], "venue": "COLING 88: Proc. 12 International Conference on Computational Linguistics. pp. 578\u2013583. Budapest, Aug 22\u201327,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1988}], "referenceMentions": [{"referenceID": 0, "context": "It is part of an ongoing project aiming at developing and promoting the use of new interfaces for accessing medical information systems, including a graphical representation language, VCM [1], whereby medical concepts are expressed by icons, and a multi-lingual interface.", "startOffset": 188, "endOffset": 191}, {"referenceID": 1, "context": "The graphical language VCM is built against an ontology of medical concepts, defined with the OWL-DL representation formalism [2].", "startOffset": 126, "endOffset": 129}, {"referenceID": 2, "context": "This problem has already raised interest in the semantic web community [3], and has given way to approaches allowing to precisely verbalize the set of logical restrictions and specifications which define concepts in a logical description language like OWLDL [4].", "startOffset": 71, "endOffset": 74}, {"referenceID": 3, "context": "This problem has already raised interest in the semantic web community [3], and has given way to approaches allowing to precisely verbalize the set of logical restrictions and specifications which define concepts in a logical description language like OWLDL [4].", "startOffset": 258, "endOffset": 261}, {"referenceID": 4, "context": "In the medical field, work has been done towards automatic generation of case descriptions in natural language from an RDF input [5].", "startOffset": 129, "endOffset": 132}, {"referenceID": 5, "context": "Natural language generation takes as input data something that should be close to a deep semantic representation of some natural language fragment, that is a semantic graph (we will avoid the use of the term \u201cconceptual graph\u201d coined by John Sowa [6], since it has a more specific formal definition; moreover, it may mislead the reader into confusing \u201cconcepts\u201d of conceptual graphs with \u201cconcepts\u201d of OWL-DL).", "startOffset": 247, "endOffset": 250}, {"referenceID": 6, "context": "There are many reasons for this: first, there are different medical terminologies, and our visual language must be able to be used in conjunction with any of them; second, the ontology approach, with a few discrete atomic axes, permits to express a much greater number of possible combinations of medical concepts than the terminology approach, which sets in advance a finite set of possibilities (this rationale also is behind the GRAIL language, defined within the GALEN project [7]).", "startOffset": 481, "endOffset": 484}, {"referenceID": 7, "context": "The approach adopted here is based on the principle of \u201cgraph grammars\u201d [8], which has given way to important developments in the past two decades, especially in the field of process modelling [9].", "startOffset": 72, "endOffset": 75}, {"referenceID": 8, "context": "The approach adopted here is based on the principle of \u201cgraph grammars\u201d [8], which has given way to important developments in the past two decades, especially in the field of process modelling [9].", "startOffset": 193, "endOffset": 196}, {"referenceID": 9, "context": "Our algorithm may be classified in the category of graph grammars proper, not simply graph-rewriting systems (following the distinction drawn by Blostein [10]), because it makes a difference between terminal graphs and non-terminal graphs, analogous to the similar difference that phrase-structure grammars (PSG) make between terminal strings (made up of terminal symbols only) and nonterminal strings in a linear language.", "startOffset": 154, "endOffset": 158}, {"referenceID": 10, "context": "The next step in the present work is the development of a complete text generation module, based on the generation of phrase structure trees by derivation of elementary trees in a TAG lexicalized grammar [11].", "startOffset": 204, "endOffset": 208}], "year": 2014, "abstractText": "A graphical language addresses the need to communicate medical information in a synthetic way. Medical concepts are expressed by icons conveying fast visual information about patients\u2019 current state or about the known effects of drugs. In order to increase the visual language\u2019s acceptance and usability, a natural language generation interface is currently developed. In this context, this paper describes the use of an informatics method \u2014graph transformation\u2014 to prepare data consisting of concepts in an OWL-DL ontology for use in a natural language generation component. The OWL concept may be considered as a star-shaped graph with a central node. The method transforms it into a graph representing the deep semantic structure of a natural language phrase. This work may be of future use in other contexts where ontology concepts have to be mapped to half-formalized natural language expressions.", "creator": "LaTeX with hyperref package"}}}