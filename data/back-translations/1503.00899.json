{"id": "1503.00899", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Mar-2015", "title": "An Ant Colony Optimization Algorithm for Partitioning Graphs with Supply and Demand", "abstract": "In this paper, we focus on the search for high-quality solutions to the problem of maximum distribution of graphs with supply and demand (MPGSD). Interest in MPGSD is growing due to its close connection to problems encountered in the field of electrical distribution systems, in particular to optimize the autonomy of networked micro-grids. We propose an algorithm to optimize the ant colony for the problem. To further improve the algorithm, we combine it with a previously developed correction method. In our computing experiments, we evaluate the performance of the proposed algorithm on both trees and general graphs. The tests show that the method succeeds in finding optimal solutions in more than 50% of problem cases, and that it has an average relative error of less than 0.5% compared to known optimal solutions.", "histories": [["v1", "Tue, 3 Mar 2015 11:26:02 GMT  (265kb,D)", "http://arxiv.org/abs/1503.00899v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["raka jovanovic", "milan tuba", "stefan voss"], "accepted": false, "id": "1503.00899"}, "pdf": {"name": "1503.00899.pdf", "metadata": {"source": "CRF", "title": "An Ant Colony Optimization Algorithm for Partitioning Graphs with Supply and Demand", "authors": ["Raka Jovanovic", "Milan Tuba", "Stefan Vo\u00df"], "emails": [], "sections": [{"heading": null, "text": "In this paper we focus on finding high quality solutions for the problem of maximum partitioning of graphs with supply and demand (MPGSD). There is a growing interest for the MPGSD due to its close connection to problems appearing in the field of electrical distribution systems, especially for the optimization of self-adequacy of interconnected microgrids. We propose an ant colony optimization algorithm for the problem. With the goal of further improving the algorithm we combine it with a previously developed correction procedure. In our computational experiments we evaluate the performance of the proposed algorithm on both trees and general graphs. The tests show that the method manages to find optimal solutions in more than 50% of the problem instances, and has an average relative error of less than 0.5% when compared to known optimal solutions.\nKeywords: Ant Colony Optimization, Microgrid, Graph Partitioning, Demand Vertex, Supply Vertex, Combinatorial Optimization"}, {"heading": "1. Introduction", "text": "In recent years the research in the field of smart grids has had a significant increase in exploring the concept of interconnected microgrids [1]. This approach has resulted in novel types of typologies for electrical grids and new aspects of such systems that should be considered. Some of the most prominent newly\nPreprint submitted to Applied Soft Computing March 4, 2015\nar X\niv :1\n50 3.\n00 89\n9v 1\n[ cs\n.A I]\n3 M\nemerged problems are the maximizing of self-adequacy [2], reliability, supplysecurity [3] and the potential for self-healing [4] of such systems. In many cases the underlying optimization problems are of a very high complexity and can not be solved to optimality in polynomial time. Electrical grids are systems of gigantic size, which makes their optimization very hard from a computational point of view. Luckily, previous research has shown that for many systems it is not necessary to use highly detailed models; often simplified graph ones can give sufficiently good approximations to the original problem. The family of graph partitioning problems has proven to be closely related to power supply and delivery networks [5, 6, 7, 8, 9].\nIn a system of interconnected microgrids each microgrid is made as independent from the rest of the system as possible; this results in many positive characteristics. Some examples are the lower complexity of the entire grid and enhanced reliability of each of the microgrids due to the increased resistance to failures in other parts of the system. The term independent is used for the case when there is a minimum of power exchange between the connected microgrids. This property of the system is formally defined as the maximization of self-adequacy of interconnected microgrids. Recently, research has been conducted in developing algorithms for finding approximate solutions [2] to this problem. Previous research has also explored the closely related problem of efficient decomposition or islanding of large grids into islands with a balanced generation/load subject to specific constraints [10, 11]. Due to the large complexity and size of electrical grids, when attempting to model and optimize some global properties, it is frequently convenient to use simplified graph models. Such models often result in different versions of graph partitioning problems suitable for specific real life applications. Some examples are having a balanced partitioning [12], minimizing the number or weight of cuts [13, 14], or by limiting the number of cuts [15].\nThe focus of this paper is on the Maximal Partitioning of Graphs with Supply and Demand (MPGSD). The majority of previous research has been dedicated to the theoretical aspects of this problem [16, 17, 6, 18]. A significant part of the\npublished work is focused on solving this problem for specific types of graphs like trees [17, 6, 18] and series-parallel graphs [16]. A method for finding solutions with a guarantee of a 2k-approximation for general graphs has been presented in [9]. Different variations of the original problem have been developed, like a parametric version [19] and one with additional capacity constraints [20].\nIn this paper we present an ant colony optimization (ACO) [21] approach for finding high quality approximate solutions to the MPGSD. ACO has previously been successfully applied to problems of multiway [22] and balanced [23] graph partitioning. The same method has also proven to be suitable for the closely related problems of graph cutting [24] and covering [25, 26] and partitioning of meshes [27]. The proposed ACO adaptation for our problem of interest is based on the greedy algorithm presented in [28, 29]. The ACO algorithm is further improved by combining it with our previously developed correction procedure [29]. In our tests on general graphs and trees, we show that the newly developed method frequently manages to find optimal solutions and has a small average error when compared to known optimal solutions.\nThe paper is organized as follows. In the second section we give the definition of the MPGSD. Then we provide a short outline of a greedy algorithm which is used as a basis for the proposed method. In the third section we present details of our ACO algorithm. In the subsequent sections we discuss results of our computational experiments and provide some conclusions."}, {"heading": "2. Maximal Partitioning of Graphs With Supply/Demand", "text": "The MPGSD is defined for an undirected graph G = (V,E) with a set of nodes V and a set of edges E. The set of nodes V is split into two disjunct subsets Vs and Vd. Each node u \u2208 Vs will be called a supply vertex and will have a corresponding positive integer value sup(u). Elements of the second subset v \u2208 Vd will be called demand vertices and will have a corresponding positive integer value sup(v). The goal is to find a partitioning \u03a0 = {S1, S2, .., Sn} of the graph G that satisfies the following constraints. All the subgraphs in \u03a0 must be\nconnected subgraphs containing only a single distinct supply node. As a result we have |Vs| = n. Each of the Si must have a supply greater or equal to its total demand. Each demand vertex can be an element of only one subgraph, or in other words it can only receive \u2019power\u2019 from one supply vertex through the edges of G.\nWith the intention of having a simpler notation, we will use strictly negative values for demand nodes and positive values for supply nodes (note that this is slightly different from the definition of [16]). The goal is to maximize the fulfillment of demands, or more precisely to maximize the following sum.\nD(\u03a0) = \u2212 \u2211 S\u2208\u03a0 \u2211 v\u2208S\u2229Vd sup(v) (1)\nwhile the following constraints are satisfied for all Si \u2208 \u03a0\u2211 v\u2208Si sup(v) \u2265 0 (2)\nSi \u2229 Sj = \u2205 , i 6= j (3)\nSi is connected (4)\nAn illustration of the MPGSD is given in Figure 1. It has been shown that the MPGSD is NP-hard even in the case of a graph containing only one supply node and having a star structure [16]."}, {"heading": "3. Outline of Greedy Algorithm", "text": "In this section we give a short overview of the greedy algorithm, for which details can be found in [28], that is used as a base for the ACO method for the MPGSD. As previously stated, the solution of the problem of interest is a set of |\u03a0| = n subgraphs where n = |Vs| is the number of supply nodes. In the initial step of the algorithm we start with n disjunct subgraphs Si, that only contain one supply node S = {si}. At each of the following steps (iterations) of the algorithm one vertex v \u2208 Vd is selected and used to expand a selected subgraph Si. The selection of both v and Si is performed in a way that the\nnewly generated subgraph satisfies the constraints of being connected, disjunct and fulfills Eq. 2.\nLet us define NV as the set of adjacent vertices to v in G using the following\nequation\nNV (v) = {u|u \u2208 V \u2227 (u, v) \u2208 E} (5)\nThe idea is to gradually expand each of the subgraphs Si by adding new vertices v to them. The set of potential candidates for expansion of subgraph Si, or in other words vertices that are adjacent to the Si, can be defined using the extension of NV to subgraphs. It is important to note that as the subgraph Si will be changed in subsequent iteration, the notation Ski will be used to specify the state of subgraph Si at iteration k. Now we can extend the definition of NV with the following equation.\nN\u0302ki = NV (S k i ) = {u|u \u2208 V \u2227 \u2203(v \u2208 Ski )(u, v) \u2208 E} (6)\nIt is evident that if the expansion of subgraph Ski is done by v \u2208 N\u0302ki the newly created subgraph Sk+1i will be connected, but it is not necessary that the other constraints will be satisfied. More precisely, the new Sk+1i need not satisfy Eq. 2, or there may exist such an Sk+1j that S k+1 j \u2229S k+1 i = v for the new subgraph. This can be avoided if instead of using set N\u0302ki , we use a restricted set of vertices Nki that guarantees that the constraints will be satisfied when S k i is expanded using v \u2208 Nki . We shall first define supki as the available supply for subgraph Si at iteration k in the following equation.\nsupki = \u2211 v\u2208Ski sup(v) (7)\nUsing supki given in Eq. 7, N k i is defined in the following way.\nNki = {u|u \u2208 N\u0302ki \u2227 sup(u) \u2264 sup k i } \\ n\u22c3 j=1 Skj (8)\nThe sets Nki are used to specify the greedy algorithm for the MPGSD in combination with two heuristic functions. More precisely, at each iteration one heuristic hs is used to select the subgraph Ski most suitable for expansion, and the second heuristic hv will be used to select the best v \u2208 Nki to be added to Ski . An extensive analysis of potential heuristics is given in our previous work given in articles[28, 29]. This procedure will be repeated until it is not possible to expand any of the subgraphs."}, {"heading": "4. Application of Ant Colony Optimization", "text": "In this section we present an ACO approach for solving the MPGSD, based on the greedy algorithm from [28], outlined in the previous section. The general idea of ACO algorithms is to perform an \u201dintelligent\u201d randomization of an appropriate greedy algorithm for the problem of interest. There are several variations of ACO, out of which the Ant Colony System [30] is most commonly used. In it the \u201dintelligence\u201d comes from experience gained by previously generated solutions, which is stored in a pheromone matrix. In practice, a colony\nof n artificial ants generates solutions using a probabilistic algorithm based on a heuristic function and the pheromone matrix. As in the case of the greedy algorithm, an ant generates a solution by expanding a partial one through steps. The difference is that instead of using a heuristic function it uses a probabilistic transition rule to decide what is to be added to the partial solution. The pheromone matrix stores the experience gathered by the artificial ants. This is done by applying a global and local update rule to the pheromone matrix. The global update rule is used after all n ants in the colony have generated a solution and it reinforces the selection of elements inside of the best found solution or in some variations of good solutions. The local update is performed after an ant has applied the transition rule, and its purpose is to diversify the search of the solution space by avoiding the selection of the same elements of the solution by all of the ants.\nBefore defining the ACO algorithm for the MPGSD, we will first state some observations regarding the greedy algorithm and the form of the solution of the problem. A solution \u03a0 of the MPGSD can also be observed as a set of pairs (s, v), which states that node v is inside subgraph Ss. In this notation we will include (\u22121, v) for the case where v is not a member of any subgraph Ss. From this type of notation we realize that in the algorithm given in the previous section only the second stage, the selection of node v, directly specifies the elements of the solution. The purpose of the heuristic in the first stage is to make it possible to perform a good expansion of the partial solution, which is of significant importance when only one solution is generated using a deterministic algorithm. In case of an ACO algorithm this becomes less important since many solutions are generated and the \u201dsteering\u201d in the direction of good solutions is, to a large extent, done by the pheromone matrix.\nBecause of this, in the proposed ACO algorithm the heuristic function at this stage will be substituted with a random selection from the set of subgraphs that can be expanded. In this way the ACO mechanism will only be dedicated to the selection of expansion nodes."}, {"heading": "4.1. Algorithm Specification", "text": "To specify the ACO for the MPGSD we need to define the transition rule, global and local update rules. In all of the following equations we will assume that we have a randomly selected subgraph Ss with index s. We will first define the transition rule, based on the same heuristic function as in [28], defined in the following equation.\n\u03b7v = hn1(v) = |sup(v)| (9)\nThe heuristic function \u03b7v given in Eq. 9 states that vertices with high demand are considered more desirable. The logic behind this is that it gets harder to satisfy high demands as the algorithm progresses since the available supply decreases as new vertices are added to the subgraphs. Because of this it is better to resolve high demands early.\nUsing \u03b7v we can define the transition rule for individual ants. This selection is done using a combination of deterministic and probabilistic steps. First we need to include the constraint that only vertices from the set Nki can be selected. We specify this constraint using the following equation.\npkv =  0 , v 6\u2208 Nksprobki , v \u2208 Nks (10) In Eq. 10, pkv gives us the probability of selecting node v at step k. As previously stated we only consider v \u2208 Nks where s is the selected subgraph, as a consequence the probability of selecting v /\u2208 Nks is 0. For the nodes that are elements of Nks their selection is done using the following formula.\nprobkv =  1 , q > q0 & v = arg max i\u2208Nks \u03c4is\u03b7i 0 , q > q0 & v 6= arg max i\u2208Nks \u03c4is\u03b7i\n\u03c4vs\u03b7v\u2211 i\u2208Nks \u03c4is\u03b7i , q \u2264 q0\n(11)\nIn Eq. 11 probkv gives us the probability of selecting node v at step k. The values of the pheromone matrix \u03c4is correspond to elements of the solution in the form of a vertex-subgraph pair (i, s). In the same equation parameter q0\nis used to define the exploitation/ exploration rate. Connected to it, q \u2208 (0, 1) is a random variable which specifies whether the next selected node will be deterministic or non-deterministic. In the case of the former q > q0, we simply select the node v with the maximal value of \u03c4is\u03b7i, which results in a probability 1. If the selection is non-deterministic (q < q0), the probability distribution for node selection is given in the last row of Eq. 11.\nThe next component of the ACO method that needs to be specified is the global update rule. The proposed ACO algorithm is based on the ant colony system, in which only the best found solution deposits pheromone after each iteration of the colony. This update is formally defined using the following equations\n\u2206\u03c4 = V al(\u03a0\u2032) (12)\n\u03c4i = (1\u2212 p)\u03c4vs + p\u2206\u03c4 ,\u2200(v, s) \u2208 \u03a0\u2032 (13)\nIn Eq. 12 \u03a0\u2032 is used to note the currently best found solution. \u2206\u03c4 is used to specify the quality of the solution \u03a0\u2032 using function V al for which we will give details in the implementation subsection. In Eq. 13, the parameter p \u2208 (0, 1) is used to specify the influence of the global update rule. It is important to point out that Eq. 13 only effects the values of pheromone \u03c4vs for (v, s) \u2208 \u03a0\u2032.\nAs previously mentioned the local update rule is applied after individual ants perform the transition rule. In our implementation the local update rule is applied after an ant i has generated a solution \u03a0i using the following formula\n\u03c4vs = \u03d5\u03c4vs ,\u2200(v, s) \u2208 \u03a0i (14)\nIn Eq. 14 \u03d5 \u2208 (0, 1) is used to specify the influence of the local update rule."}, {"heading": "4.2. Implementation", "text": "In this section we give details of the implementation of the proposed ACO algorithm. The first necessary step is to define a suitable quality function V al\nfor the generated solutions. This is done by using the following equations.\nT = \u2211 v\u2208Vs sup(v) (15)\nV al(\u03a0) = 1\nT \u2212D(\u03a0) + 1 (16)\nEq. 16 states that the quality of the solution will be inversely proportional to the difference of T , the total initially available supply in G and the satisfied demand D(\u03a0) of partitioning \u03a0. To avoid division by zero one is added to this value. Using this measure, the initial value of all the pheromone matrix elements tvs is set to the value V al(\u03a0g), where \u03a0g is the solution acquired using the previously outlined greedy algorithm. More precisely, it corresponds to the method presented in [28], where the node selection heuristic is the maximal demand and the subgraph selection heuristic is the maximal available supply.\nWith the goal of having a better presentation of the proposed method, it is\npresented in the form of the following pseudo-code\nGenerate solution \u03a0g using the greedy algorithm Initialize the pheromone matrix \u03c4 with V al(\u03a0g) while (Maximal number of iterations not reached) do\nfor all n ants do\nInitialize \u03a0 = {S1, .., Sn} , Si = {si} while \u03a0 can be expanded do\nRandomly select S, where |NV (S)| > 0 Select v for S using transition rule \u03a0 = \u03a0 \u222a (v, S) Update auxiliary structures\nend while Apply correction procedure to \u03a0 Apply local update rule for \u03a0\nend for Apply global update rule for \u03a0best\nend while\nAs illustrated in the pseudo-code, the first step is generating a solution using a greedy algorithm and initializing the pheromone matrix \u03c4 . The main loop performs one iteration for the colony of ants by generating a solution for each of the n artificial ants. For each of the ants we start with the initial partitioning \u03a0. At each iteration of the following loop, we randomly select a subgraph S, and using the transition rule a node v is selected for expansion. After each such step it is necessary to update the auxiliary structures, presented in [28], that are used to make the proposed algorithm computation efficient.\nAfter an ant has generated a solution \u03a0 we apply the correction procedure, presented in [29], which corresponds to a local search to improve its quality. This is done due to the fact that, in general, ACO algorithms have a problem with narrowing on local minima. It has been shown that the performance of such methods can be significantly improved if they are combined with a local search. For the newly acquired solution we apply the local update rule given in Eq. 14. After all of the ants in the colony have generated their solutions we apply the global update rule given in Eq. 13 for the best solution \u03a0best found by the algorithm for all the previous iterations."}, {"heading": "5. Results", "text": "In this section we present the results of our computational experiments used to evaluate the performance of the proposed ACO methods. We give a comparison of the proposed ACO algorithm, with (ACO-C) and without (ACO) the use of a correction procedure, and the basic greedy algorithm (Gr). All the algorithms have been implemented in C# using Microsoft Visual Studio 2012. The source code and the executive files have been made available at [31]. The calculations have been done on a machine with Intel(R) Core(TM) i7-2630 QM CPU 2.00 Ghz, 4GB of DDR3-1333 RAM, running on Microsoft Windows 7 Home Premium 64-bit.\nTo have an extensive evaluation of the proposed algorithm tests have been conducted on a wide range of graphs. We have used 24 different graph sizes\nhaving 2-100 supply nodes and 6-2000 demand nodes. For each of the test sizes 40 different problem instances have been generated. We have compared the average solution and the number of found optimal solutions for each size. With the goal of observing the potential dependence between the method performance and graph structure, we have performed tests on trees and general graphs. The same data sets have been used in the article [29], which can be downloaded from [31], where specifics of the method for their generation are presented. It is important to note that the optimal solutions are known for each of the test instances due to the algorithm used for their generation.\nFor each of the 40 problem instances, inside of one graph size, a single run of the ACO algorithm has been performed for both versions of the method. In each of the runs the colony had 10 ants and 150 iterations have been performed. In practice this means that 1500 solutions have been generated for each test instance. The parameters for specifying the influence of the global and the local update rules had the following values p = 0.1 and \u03d5 = 0.9. We have used the value q0 = 0.1 to define the exploitation/exploration rate. The chosen parameters correspond to the commonly used values for the ACO algorithm, for which our initial tests have shown that they give the best performance.\nThe results of the conducted computational experiments are presented in Tables 1, 2 for general graphs and trees, respectively. The values in these tables represent the average normalized error of the found solutions compared to the known optimal one, for each of the used methods. More precisely, for each of the 40 test instances, for each graph size, the normalized error is calculated by (Optimal\u2212 found)/Optimal \u2217 100, and we show the average value in Tables 1, 2. To have a better comprehension of the performance we have also included the standard deviation and maximal errors. The last value included in these tables is the number of found optimal solutions (hits) for each graph size out of the 40 test instances.\nFor both types of graphs, there is a very significant improvement of the ACO algorithms when compared to the basic greedy algorithm. In case of the greedy algorithm the average error varies from less than 1% to even 16%, while for the\nACO algorithm the range is between 0-4%, and in case of ACO-C it is within 0-1.5%. The ACO-C method proves to be very robust in the sense that maximal error has never exceeded 7%, and has been greater than 1% in only 17 out of the 48 graphs sizes. The basic ACO significantly improves the maximal error when compared with the greedy algorithm but lacks behind ACO-C with the maximal error never exceeding 12% and being less than 1% in 50% of test sizes.\nIt is important to note that there is a difference in performance of the methods for general graphs and trees. While the greedy algorithm has a slightly better performance in case of general graphs, in case of the proposed ACO algorithms we have an opposite situation. In case of trees, the ACO had only twice an average error higher than 1% and never higher than 2.03%. ACO-C produces even better results with never having an error greater than 1%, and having an error of less than 0.1% in 19 out of 24 graph sizes.\nThe results in Tables 1 and 2 show that the greedy algorithm only manages to find optimal solutions in the case of the smallest graphs. On the other hand the ACO-C manages to find the optimal solution for about 50% of the test instances, while ACO is close to 30%. As in the case of average errors both ACO methods have a significantly better performance for trees than for general graphs. In case of trees ACO-C has found the optimal solution for 65% of the test instances, but it would rarely find ones for the largest graphs.\nDue to the stochastic nature of the ACO algorithm, we have also performed multiple runs of ACO and ACO-C, with different seeds for the random number generator, on a single problem instance. In case of this type of analysis, for small problem instances both methods have a very good performance and manage to find the best solution for the vast majority of runs. The interesting cases are connected to the \u2013 harder to solve \u2013 large graph sizes. The behavior of both algorithms is similar for all tested instances in one problem size, because of which we believe it is sufficient to give a graphic illustration only for a single test instance for general graphs and trees in Figures 2, 3. In case of general graphs, in Figure 2, we can see that ACO-C has a significantly higher speed of convergence. ACO-C also proves to be significantly more reliable, since its\nmaximal error is lower than the minimal error for ACO. We can also see that both methods have a notable dependence on the selected seed of the random number generator since the difference between minimal and maximal error is 2% and 1% for ACO and ACO-C, respectively. The results in Figure 3, for trees, show that the advantage of ACO-C is much lower when compared to ACO. The range of error for both methods is much lower in case of trees.\nFrom the performed tests we can conclude that the proposed ACO algorithm is a very effective method for solving the MPGSD. The tests have also shown that, as for many others, in the case of the problem of interest the performance of the ACO algorithm can be significantly improved by adding a local search method. Finally, the quality of the solutions acquired by the ACO and ACO-C is to a certain extent dependent on the seed of the random number generator. Because of this fact, when applying the proposed method it is advisable to\nperform multiple runs to get the highest quality of found solutions."}, {"heading": "6. Conclusion", "text": "In this paper we have presented an ant colony optimization algorithm for solving the problem of the maximum partitioning of graphs with supply and demand. To the best of our knowledge, this is the first time that the ACO metaheuristic has been applied to this type of problem. The basic ACO algorithm has been combined with a local search to enhance the performance of the method. Our computational experiments have shown that the proposed approach managed to find the optimal solutions in more than 50% of the test problem instances, and had an average relative error of less then 0.5%. The tests have been performed on trees and general graphs and shown that the method is more suitable for trees.\nIn the future we plan to adapt the method to a less constrained and a stochastic version of the problem. This type of research can prove to be very beneficial for problems appearing in the field of electrical distribution systems especially for the optimization of self-adequacy of interconnected microgrids and other related problems."}, {"heading": "100 X 1000 4.67(0.89) 2.29(0.22) 0.60(0.07) 7.04 2.71 0.74 0 0 0", "text": ""}, {"heading": "100 X 500 8.77(1.07) 3.93(0.60) 1.42(0.28) 11.65 6.21 2.13 0 0 0", "text": ""}, {"heading": "100 X 300 11.75(1.45) 3.69(0.69) 0.90(0.42) 14.61 6.05 2.02 0 0 0", "text": ""}, {"heading": "50 X 1000 3.07(0.99) 0.73(0.11) 0.06(0.02) 5.97 0.99 0.13 0 0 0", "text": ""}, {"heading": "50 X 500 4.65(1.28) 1.56(0.23) 0.31(0.07) 7.39 2.27 0.50 0 0 0", "text": ""}, {"heading": "50 X 250 8.76(1.34) 2.67(0.47) 0.84(0.22) 10.80 3.59 1.42 0 0 0", "text": ""}, {"heading": "50 X 150 12.04(1.86) 2.20(0.78) 0.46(0.40) 15.63 3.91 1.78 0 0 3", "text": ""}, {"heading": "25 X 500 2.81(1.37) 0.44(0.07) 0.01(0.02) 6.10 0.56 0.06 0 0 11", "text": ""}, {"heading": "25 X 250 4.60(1.49) 0.83(0.19) 0.13(0.06) 8.68 1.22 0.23 0 0 0", "text": ""}, {"heading": "25 X 125 8.64(2.07) 1.76(0.58) 0.51(0.31) 13.64 3.16 1.49 0 0 0", "text": ""}, {"heading": "25 X 75 12.14(3.16) 1.63(1.08) 0.28(0.29) 19.23 5.38 1.14 0 1 12", "text": ""}, {"heading": "10 X 200 2.52(2.81) 0.10(0.05) 0.00(0.00) 12.98 0.22 0.00 0 1 40", "text": ""}, {"heading": "10 X 100 3.92(2.44) 0.28(0.14) 0.05(0.05) 13.14 0.69 0.18 0 0 18", "text": ""}, {"heading": "10 X 50 7.36(2.79) 1.08(0.45) 0.26(0.26) 14.19 2.20 0.90 0 0 13", "text": ""}, {"heading": "10 X 30 11.53(4.44) 0.51(0.82) 0.16(0.40) 23.88 4.29 1.60 0 19 32", "text": ""}, {"heading": "5 X 100 2.01(2.54) 0.02(0.03) 0.00(0.00) 13.63 0.13 0.00 0 26 40", "text": ""}, {"heading": "5 X 50 3.89(2.62) 0.15(0.13) 0.01(0.03) 10.27 0.65 0.10 0 8 35", "text": ""}, {"heading": "5 X 25 7.89(5.99) 0.78(0.77) 0.22(0.29) 34.62 3.84 1.07 0 7 21", "text": ""}, {"heading": "5 X 15 10.88(7.77) 0.59(1.31) 0.13(0.44) 38.78 7.14 2.22 0 28 36", "text": ""}, {"heading": "2 X 40 0.77(0.50) 0.00(0.00) 0.00(0.00) 1.74 0.00 0.00 3 40 40", "text": ""}, {"heading": "2 X 20 1.85(1.11) 0.09(0.13) 0.00(0.00) 4.21 0.46 0.00 1 26 40", "text": ""}, {"heading": "2 X 10 5.62(4.39) 0.24(0.60) 0.00(0.00) 23.08 3.04 0.00 4 32 40", "text": ""}, {"heading": "2 X 6 7.45(8.71) 0.28(1.77) 0.00(0.00) 46.10 11.36 0.00 17 39 40", "text": ""}, {"heading": "100 X 1000 11.18(1.82) 1.05(0.51) 0.18(0.29) 14.55 2.25 1.55 0 0 3", "text": ""}, {"heading": "100 X 500 10.26(1.79) 0.56(0.35) 0.08(0.06) 14.43 1.62 0.21 0 0 3", "text": ""}, {"heading": "100 X 300 9.83(1.99) 0.27(0.18) 0.09(0.15) 14.11 0.81 0.64 0 2 17", "text": ""}, {"heading": "50 X 1000 12.75(2.41) 1.09(0.85) 0.51(0.60) 18.30 3.61 1.92 0 0 10", "text": ""}, {"heading": "50 X 500 11.92(3.03) 0.44(0.50) 0.05(0.13) 18.84 2.21 0.79 0 0 11", "text": ""}, {"heading": "50 X 250 10.20(3.07) 0.31(0.29) 0.07(0.09) 18.72 1.23 0.39 0 2 17", "text": ""}, {"heading": "50 X 150 8.66(2.93) 0.15(0.18) 0.04(0.09) 17.04 0.76 0.46 0 13 30", "text": ""}, {"heading": "25 X 500 11.64(3.93) 0.48(0.69) 0.14(0.34) 19.37 2.72 1.27 0 2 30", "text": ""}, {"heading": "25 X 250 10.68(3.22) 0.29(0.60) 0.06(0.23) 20.23 2.73 1.31 0 9 30", "text": ""}, {"heading": "25 X 125 10.79(3.83) 0.15(0.16) 0.06(0.13) 17.29 0.63 0.47 0 12 27", "text": ""}, {"heading": "25 X 75 9.52(4.87) 0.18(0.35) 0.03(0.12) 22.49 1.44 0.73 0 26 36", "text": ""}, {"heading": "10 X 200 13.92(6.58) 0.27(1.15) 0.25(1.15) 26.02 6.71 6.71 0 23 37", "text": ""}, {"heading": "10 X 100 11.40(6.33) 0.09(0.13) 0.03(0.09) 26.73 0.53 0.48 0 19 33", "text": ""}, {"heading": "10 X 50 9.67(5.59) 0.07(0.17) 0.07(0.21) 29.53 0.70 1.08 0 31 34", "text": ""}, {"heading": "10 X 30 8.66(6.44) 0.09(0.25) 0.01(0.06) 27.17 1.13 0.37 2 34 39", "text": ""}, {"heading": "5 X 100 16.43(11.22) 0.12(0.64) 0.00(0.00) 50.93 4.09 0.00 0 30 40", "text": ""}, {"heading": "5 X 50 10.63(6.99) 0.07(0.16) 0.04(0.15) 29.60 0.89 0.89 0 28 35", "text": ""}, {"heading": "5 X 25 7.87(6.04) 0.10(0.25) 0.07(0.29) 21.80 1.11 1.49 1 33 37", "text": ""}, {"heading": "5 X 15 8.47(8.71) 0.01(0.04) 0.00(0.00) 27.19 0.27 0.00 13 39 40", "text": ""}, {"heading": "2 X 40 6.09(7.65) 0.05(0.14) 0.00(0.00) 30.58 0.57 0.00 3 34 40", "text": ""}, {"heading": "2 X 20 8.71(9.11) 0.09(0.34) 0.01(0.07) 28.94 2.13 0.43 3 35 39", "text": ""}, {"heading": "2 X 10 5.46(8.02) 0.11(0.50) 0.02(0.13) 35.14 3.08 0.85 16 37 39", "text": ""}, {"heading": "2 X 6 1.67(5.92) 0.00(0.00) 0.00(0.00) 26.37 0.00 0.00 37 40 40", "text": ""}], "references": [{"title": "Microgrids", "author": ["N. Hatziargyriou", "H. Asano", "R. Iravani", "C. Marnay"], "venue": "Power and Energy Magazine, IEEE 5 (4) ", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2007}, {"title": "Supply-adequacy-based optimal construction of microgrids in smart distribution systems", "author": ["S. Arefifar", "Y. Mohamed", "T.H.M. EL-Fouly"], "venue": "IEEE Transactions on Smart Grid 3 (3) ", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2012}, {"title": "Optimum microgrid design for enhancing reliability and supply-security", "author": ["S. Arefifar", "Y.-R. Mohamed", "T. EL-Fouly"], "venue": "Smart Grid, IEEE Transactions on 4 (3) ", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2013}, {"title": "Comprehensive operational planning framework for self-healing control actions in smart distribution grids", "author": ["S. Arefifar", "Y.-R. Mohamed", "T. EL-Fouly"], "venue": "Power Systems, IEEE Transactions on 28 (4) ", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Optimal feeder routing in distribution system planning using dynamic programming technique and GIS facilities", "author": ["N. Boulaxis", "M. Papadopoulos"], "venue": "IEEE Transactions on Power Delivery 17 (1) ", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2002}, {"title": "Partitioning trees of supply and demand", "author": ["T. Ito", "X. Zhou", "T. Nishizeki"], "venue": "International Journal of Foundations of Computer Science 16 (4) ", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2005}, {"title": "An efficient brute-force solution to the network reconfiguration problem", "author": ["A.B. Morton", "I.M. Mareels"], "venue": "IEEE Transactions on Power Delivery 15 (3) ", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2000}, {"title": "Feeder-switch relocation for customer interruption cost minimization", "author": ["J.-H. Teng", "C.-N. Lu"], "venue": "IEEE Transactions on Power Delivery 17 (1) ", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2002}, {"title": "Modelling the power supply network - hardness and approximation", "author": ["A. Popa"], "venue": "in: T.-H. Chan, L. Lau, L. Trevisan (Eds.), Theory and Applications of Models of Computation, Vol. 7876 of Lecture Notes in Computer Science, Springer Berlin Heidelberg", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "A simulation study of obdd-based proper splitting strategies for power systems under consideration of transient stability", "author": ["K. Sun", "D.-Z. Zheng", "Q. Lu"], "venue": "IEEE Transactions on Power Systems 20 (1) ", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2005}, {"title": "Controlled partitioning of a power network considering real and reactive power balance", "author": ["J. Li", "C.-C. Liu", "K.P. Schneider"], "venue": "IEEE Transactions on Smart Grid 1 (3) ", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2010}, {"title": "Balanced graph partitioning", "author": ["K. Andreev", "H. R\u00e4cke"], "venue": "in: Proceedings of the Sixteenth Annual ACM Symposium on Parallelism in Algorithms and Architectures, SPAA \u201904, ACM, New York", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2004}, {"title": "Computing finest mincut partitions of a graph and application to routing problems", "author": ["G. Reinelt", "D.O. Theis", "K.M. Wenger"], "venue": "Discrete Applied Mathematics 156 (3) ", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2008}, {"title": "A new heuristic for partitioning the nodes of a graph", "author": ["E. Barnes", "A. Vannelli", "J. Walker"], "venue": "SIAM Journal on Discrete Mathematics 1 (3) ", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1988}, {"title": "Generating partitions of a graph into a fixed number of minimum weight cuts", "author": ["G. Reinelt", "K.M. Wenger"], "venue": "Discrete Optimization 7 (12) ", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Approximability of partitioning graphs with supply and demand", "author": ["T. Ito", "E.D. Demaine", "X. Zhou", "T. Nishizeki"], "venue": "Journal of Discrete Algorithms 6 (4) ", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2008}, {"title": "Linear time algorithm for tree t-spanner in outerplanar graphs via supply-demand partition in trees", "author": ["N.S. Narayanaswamy", "G. Ramakrishna"], "venue": "in: CoRR", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2012}, {"title": "Partitioning trees with supply", "author": ["M. Kawabata", "T. Nishizeki"], "venue": "demand and edge-capacity, IEICE Transactions 96-A (6) ", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "Parametric power supply networks", "author": ["S. Morishita", "T. Nishizeki"], "venue": "in: D.-Z. Du, G. Zhang (Eds.), Computing and Combinatorics, Vol. 7936 of Lecture Notes in Computer Science, Springer Berlin Heidelberg", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2013}, {"title": "Minimum cost partitions of trees with supply and demand", "author": ["T. Ito", "T. Hara", "X. Zhou", "T. Nishizeki"], "venue": "Algorithmica 64 (3) ", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2012}, {"title": "Ant colony optimization theory: A survey", "author": ["M. Dorigo", "C. Blum"], "venue": "Theoretical computer science 344 (2) ", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2005}, {"title": "A distributed multilevel ant-colony algorithm for the multi-way graph partitioning", "author": ["K. Tashkova", "P. Korosec", "J. Silc"], "venue": "International Journal of Bio- Inspired Computation 3 (5) ", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2011}, {"title": "A multiagent algorithm for graph partitioning", "author": ["F. Comellas", "E. Sapena"], "venue": "in: F. Rothlauf, J. Branke, S. Cagnoni, E. Costa, C. Cotta, R. Drechsler, E. Lutton, P. Machado, J. Moore, J. Romero, G. Smith, G. Squillero, H. Takagi (Eds.), Applications of Evolutionary Computing, Vol. 3907 of Lecture Notes in Computer Science, Springer Berlin Heidelberg", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2006}, {"title": "Cutting graphs using competing ant colonies and an edge clustering heuristic", "author": ["M. Hinne", "E. Marchiori"], "venue": "in: P. Merz, J.-K. Hao (Eds.), Evolutionary Computation in Combinatorial Optimization, Vol. 6622 of Lecture Notes in Computer Science, Springer Berlin Heidelberg", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}, {"title": "An ant colony optimization algorithm with improved pheromone correction strategy for the minimum weight vertex cover problem", "author": ["R. Jovanovic", "M. Tuba"], "venue": "Applied Soft Computing 11 (8) ", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2011}, {"title": "M", "author": ["R. Jovanovic"], "venue": "Tuba, Ant colony optimization algorithm with pheromone correction strategy for the minimum connected dominating set problem., Computer Science and Information Systems ", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2013}, {"title": "Mesh-partitioning with the multiple antcolony algorithm", "author": ["P. Korosec", "J. Silc", "B. Robic"], "venue": "in: M. Dorigo, M. Birattari, C. Blum, L. Gambardella, F. Mondada, T. Stutzle (Eds.), Ant Colony Optimization and Swarm Intelligence, Vol. 3172 of Lecture Notes in Computer Science, Springer Berlin Heidelberg", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2004}, {"title": "A greedy method for optimizing the selfadequacy of microgrids presented as partitioning of graphs with supply and demand", "author": ["R. Jovanovic", "A. Bousselham"], "venue": "in: The 2nd International Renewable and Sustainable Energy Conference Ouarzazate, Morocco October 17-19, 2014, IEEE conference", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2014}, {"title": "Ant colony system: a cooperative learning approach to the traveling salesman problem", "author": ["M. Dorigo", "L.M. Gambardella"], "venue": "Evolutionary Computation, IEEE Transactions on 1 (1) ", "citeRegEx": "30", "shortCiteRegEx": null, "year": 1997}], "referenceMentions": [{"referenceID": 0, "context": "In recent years the research in the field of smart grids has had a significant increase in exploring the concept of interconnected microgrids [1].", "startOffset": 142, "endOffset": 145}, {"referenceID": 1, "context": "emerged problems are the maximizing of self-adequacy [2], reliability, supplysecurity [3] and the potential for self-healing [4] of such systems.", "startOffset": 53, "endOffset": 56}, {"referenceID": 2, "context": "emerged problems are the maximizing of self-adequacy [2], reliability, supplysecurity [3] and the potential for self-healing [4] of such systems.", "startOffset": 86, "endOffset": 89}, {"referenceID": 3, "context": "emerged problems are the maximizing of self-adequacy [2], reliability, supplysecurity [3] and the potential for self-healing [4] of such systems.", "startOffset": 125, "endOffset": 128}, {"referenceID": 4, "context": "The family of graph partitioning problems has proven to be closely related to power supply and delivery networks [5, 6, 7, 8, 9].", "startOffset": 113, "endOffset": 128}, {"referenceID": 5, "context": "The family of graph partitioning problems has proven to be closely related to power supply and delivery networks [5, 6, 7, 8, 9].", "startOffset": 113, "endOffset": 128}, {"referenceID": 6, "context": "The family of graph partitioning problems has proven to be closely related to power supply and delivery networks [5, 6, 7, 8, 9].", "startOffset": 113, "endOffset": 128}, {"referenceID": 7, "context": "The family of graph partitioning problems has proven to be closely related to power supply and delivery networks [5, 6, 7, 8, 9].", "startOffset": 113, "endOffset": 128}, {"referenceID": 8, "context": "The family of graph partitioning problems has proven to be closely related to power supply and delivery networks [5, 6, 7, 8, 9].", "startOffset": 113, "endOffset": 128}, {"referenceID": 1, "context": "Recently, research has been conducted in developing algorithms for finding approximate solutions [2] to this problem.", "startOffset": 97, "endOffset": 100}, {"referenceID": 9, "context": "Previous research has also explored the closely related problem of efficient decomposition or islanding of large grids into islands with a balanced generation/load subject to specific constraints [10, 11].", "startOffset": 196, "endOffset": 204}, {"referenceID": 10, "context": "Previous research has also explored the closely related problem of efficient decomposition or islanding of large grids into islands with a balanced generation/load subject to specific constraints [10, 11].", "startOffset": 196, "endOffset": 204}, {"referenceID": 11, "context": "Some examples are having a balanced partitioning [12], minimizing the number or weight of cuts [13, 14], or by limiting the number of cuts [15].", "startOffset": 49, "endOffset": 53}, {"referenceID": 12, "context": "Some examples are having a balanced partitioning [12], minimizing the number or weight of cuts [13, 14], or by limiting the number of cuts [15].", "startOffset": 95, "endOffset": 103}, {"referenceID": 13, "context": "Some examples are having a balanced partitioning [12], minimizing the number or weight of cuts [13, 14], or by limiting the number of cuts [15].", "startOffset": 95, "endOffset": 103}, {"referenceID": 14, "context": "Some examples are having a balanced partitioning [12], minimizing the number or weight of cuts [13, 14], or by limiting the number of cuts [15].", "startOffset": 139, "endOffset": 143}, {"referenceID": 15, "context": "The majority of previous research has been dedicated to the theoretical aspects of this problem [16, 17, 6, 18].", "startOffset": 96, "endOffset": 111}, {"referenceID": 16, "context": "The majority of previous research has been dedicated to the theoretical aspects of this problem [16, 17, 6, 18].", "startOffset": 96, "endOffset": 111}, {"referenceID": 5, "context": "The majority of previous research has been dedicated to the theoretical aspects of this problem [16, 17, 6, 18].", "startOffset": 96, "endOffset": 111}, {"referenceID": 17, "context": "The majority of previous research has been dedicated to the theoretical aspects of this problem [16, 17, 6, 18].", "startOffset": 96, "endOffset": 111}, {"referenceID": 16, "context": "published work is focused on solving this problem for specific types of graphs like trees [17, 6, 18] and series-parallel graphs [16].", "startOffset": 90, "endOffset": 101}, {"referenceID": 5, "context": "published work is focused on solving this problem for specific types of graphs like trees [17, 6, 18] and series-parallel graphs [16].", "startOffset": 90, "endOffset": 101}, {"referenceID": 17, "context": "published work is focused on solving this problem for specific types of graphs like trees [17, 6, 18] and series-parallel graphs [16].", "startOffset": 90, "endOffset": 101}, {"referenceID": 15, "context": "published work is focused on solving this problem for specific types of graphs like trees [17, 6, 18] and series-parallel graphs [16].", "startOffset": 129, "endOffset": 133}, {"referenceID": 8, "context": "A method for finding solutions with a guarantee of a 2k-approximation for general graphs has been presented in [9].", "startOffset": 111, "endOffset": 114}, {"referenceID": 18, "context": "Different variations of the original problem have been developed, like a parametric version [19] and one with additional capacity constraints [20].", "startOffset": 92, "endOffset": 96}, {"referenceID": 19, "context": "Different variations of the original problem have been developed, like a parametric version [19] and one with additional capacity constraints [20].", "startOffset": 142, "endOffset": 146}, {"referenceID": 20, "context": "In this paper we present an ant colony optimization (ACO) [21] approach for finding high quality approximate solutions to the MPGSD.", "startOffset": 58, "endOffset": 62}, {"referenceID": 21, "context": "ACO has previously been successfully applied to problems of multiway [22] and balanced [23] graph partitioning.", "startOffset": 69, "endOffset": 73}, {"referenceID": 22, "context": "ACO has previously been successfully applied to problems of multiway [22] and balanced [23] graph partitioning.", "startOffset": 87, "endOffset": 91}, {"referenceID": 23, "context": "The same method has also proven to be suitable for the closely related problems of graph cutting [24] and covering [25, 26] and partitioning of meshes [27].", "startOffset": 97, "endOffset": 101}, {"referenceID": 24, "context": "The same method has also proven to be suitable for the closely related problems of graph cutting [24] and covering [25, 26] and partitioning of meshes [27].", "startOffset": 115, "endOffset": 123}, {"referenceID": 25, "context": "The same method has also proven to be suitable for the closely related problems of graph cutting [24] and covering [25, 26] and partitioning of meshes [27].", "startOffset": 115, "endOffset": 123}, {"referenceID": 26, "context": "The same method has also proven to be suitable for the closely related problems of graph cutting [24] and covering [25, 26] and partitioning of meshes [27].", "startOffset": 151, "endOffset": 155}, {"referenceID": 27, "context": "The proposed ACO adaptation for our problem of interest is based on the greedy algorithm presented in [28, 29].", "startOffset": 102, "endOffset": 110}, {"referenceID": 15, "context": "With the intention of having a simpler notation, we will use strictly negative values for demand nodes and positive values for supply nodes (note that this is slightly different from the definition of [16]).", "startOffset": 201, "endOffset": 205}, {"referenceID": 15, "context": "It has been shown that the MPGSD is NP-hard even in the case of a graph containing only one supply node and having a star structure [16].", "startOffset": 132, "endOffset": 136}, {"referenceID": 27, "context": "In this section we give a short overview of the greedy algorithm, for which details can be found in [28], that is used as a base for the ACO method for the MPGSD.", "startOffset": 100, "endOffset": 104}, {"referenceID": 27, "context": "An extensive analysis of potential heuristics is given in our previous work given in articles[28, 29].", "startOffset": 93, "endOffset": 101}, {"referenceID": 27, "context": "In this section we present an ACO approach for solving the MPGSD, based on the greedy algorithm from [28], outlined in the previous section.", "startOffset": 101, "endOffset": 105}, {"referenceID": 28, "context": "There are several variations of ACO, out of which the Ant Colony System [30] is most commonly used.", "startOffset": 72, "endOffset": 76}, {"referenceID": 27, "context": "We will first define the transition rule, based on the same heuristic function as in [28], defined in the following equation.", "startOffset": 85, "endOffset": 89}, {"referenceID": 27, "context": "More precisely, it corresponds to the method presented in [28], where the node selection heuristic is the maximal demand and the subgraph selection heuristic is the maximal available supply.", "startOffset": 58, "endOffset": 62}, {"referenceID": 27, "context": "After each such step it is necessary to update the auxiliary structures, presented in [28], that are used to make the proposed algorithm computation efficient.", "startOffset": 86, "endOffset": 90}], "year": 2015, "abstractText": "In this paper we focus on finding high quality solutions for the problem of maximum partitioning of graphs with supply and demand (MPGSD). There is a growing interest for the MPGSD due to its close connection to problems appearing in the field of electrical distribution systems, especially for the optimization of self-adequacy of interconnected microgrids. We propose an ant colony optimization algorithm for the problem. With the goal of further improving the algorithm we combine it with a previously developed correction procedure. In our computational experiments we evaluate the performance of the proposed algorithm on both trees and general graphs. The tests show that the method manages to find optimal solutions in more than 50% of the problem instances, and has an average relative error of less than 0.5% when compared to known optimal solutions.", "creator": "LaTeX with hyperref package"}}}