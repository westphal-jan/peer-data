{"id": "1506.06726", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Jun-2015", "title": "Skip-Thought Vectors", "abstract": "We describe an approach to unattended learning of a generic, distributed sentence encoder. Using the continuity of texts from books, we build an encoder decoder model that attempts to reconstruct the surrounding sentences of an encrypted passage, thus mapping sentences that share semantic and syntactic characteristics to similar vector representations. Next, we introduce a simple method of vocabulary expansion to encode words that were not considered part of the training, allowing us to expand our vocabulary to a million words. After training our model, we extract and evaluate our vectors using linear models for 8 tasks: semantic kinship, paraphrase recognition, picture-sentence ranking, question-type classification, and 4 benchmark mood and subjectivity datasets. The end result is a standard encoder that can produce highly generic sentence representations that are robust and work well in practice.", "histories": [["v1", "Mon, 22 Jun 2015 19:33:40 GMT  (1199kb,D)", "http://arxiv.org/abs/1506.06726v1", "11 pages"]], "COMMENTS": "11 pages", "reviews": [], "SUBJECTS": "cs.CL cs.LG", "authors": ["ryan kiros", "yukun zhu", "ruslan salakhutdinov", "richard s zemel", "raquel urtasun", "antonio torralba 0001", "sanja fidler"], "accepted": true, "id": "1506.06726"}, "pdf": {"name": "1506.06726.pdf", "metadata": {"source": "CRF", "title": "Skip-Thought Vectors", "authors": ["Ryan Kiros", "Yukun Zhu", "Ruslan Salakhutdinov", "Richard S. Zemel", "Antonio Torralba", "Raquel Urtasun", "Sanja Fidler"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Developing learning algorithms for distributed compositional semantics of words has been a longstanding open problem at the intersection of language understanding and machine learning. In recent years, several approaches have been developed for learning composition operators that map word vectors to sentence vectors including recursive networks [1], recurrent networks [2], convolutional networks [3, 4] and recursive-convolutional methods [5, 6] among others. All of these methods produce sentence representations that are passed to a supervised task and depend on a class label in order to backpropagate through the composition weights. Consequently, these methods learn highquality sentence representations but are tuned only for their respective task. The paragraph vector of [7] is an alternative to the above models in that it can learn unsupervised sentence representations by introducing a distributed sentence indicator as part of a neural language model. The downside is at test time, inference needs to be performed to compute a new vector.\nIn this paper we abstract away from the composition methods themselves and consider an alternative loss function that can be applied with any composition operator. We consider the following question: is there a task and a corresponding loss that will allow us to learn highly generic sentence representations? We give evidence for this by proposing a model for learning high-quality sentence vectors without a particular supervised task in mind. Using word vector learning as inspiration, we propose an objective function that abstracts the skip-gram model of [8] to the sentence level. That is, instead of using a word to predict its surrounding context, we instead encode a sentence to predict the sentences around it. Thus, any composition operator can be substituted as a sentence encoder and only the objective function becomes modified. Figure 1 illustrates the model. We call our model skip-thoughts and vectors induced by our model are called skip-thought vectors.\nOur model depends on having a training corpus of contiguous text. We chose to use a large collection of novels, namely the BookCorpus dataset [9] for training our models. These are free books written by yet unpublished authors. The dataset has books in 16 different genres, e.g., Romance (2,865 books), Fantasy (1,479), Science fiction (786), Teen (430), etc. Table 1 highlights the summary statistics of the book corpus. Along with narratives, books contain dialogue, emotion and a wide\nar X\niv :1\n50 6.\n06 72\n6v 1\n[ cs\n.C L\n] 2\n2 Ju\nn 20\nrange of interaction between characters. Furthermore, with a large enough collection the training set is not biased towards any particular domain or application. Table 2 shows nearest neighbours of sentences from a model trained on the BookCorpus dataset. These results show that skip-thought vectors learn to accurately capture semantics and syntax of the sentences they encode.\nWe evaluate our vectors in a newly proposed setting: after learning skip-thoughts, freeze the model and use the encoder as a generic feature extractor for arbitrary tasks. In our experiments we consider 8 tasks: semantic-relatedness, paraphrase detection, image-sentence ranking and 5 standard classification benchmarks. In these experiments, we extract skip-thought vectors and train linear models to evaluate the representations directly, without any additional fine-tuning. As it turns out, skip-thoughts yield generic representations that perform robustly across all tasks considered.\nOne difficulty that arises with such an experimental setup is being able to construct a large enough word vocabulary to encode arbitrary sentences. For example, a sentence from a Wikipedia article might contain nouns that are highly unlikely to appear in our book vocabulary. We solve this problem by learning a mapping that transfers word representations from one model to another. Using pretrained word2vec representations learned with a continuous bag-of-words model [8], we learn a linear mapping from a word in word2vec space to a word in the encoder\u2019s vocabulary space. The mapping is learned using all words that are shared between vocabularies. After training, any word that appears in word2vec can then get a vector in the encoder word embedding space."}, {"heading": "2 Approach", "text": ""}, {"heading": "2.1 Inducing skip-thought vectors", "text": "We treat skip-thoughts in the framework of encoder-decoder models 1. That is, an encoder maps words to a sentence vector and a decoder is used to generate the surrounding sentences. Encoderdecoder models have gained a lot of traction for neural machine translation. In this setting, an encoder is used to map e.g. an English sentence into a vector. The decoder then conditions on this vector to generate a translation for the source English sentence. Several choices of encoder-decoder pairs have been explored, including ConvNet-RNN [10], RNN-RNN [11] and LSTM-LSTM [12]. The source sentence representation can also dynamically change through the use of an attention mechanism [13] to take into account only the relevant words for translation at any given time. In our model, we use an RNN encoder with GRU [14] activations and an RNN decoder with a conditional GRU. This model combination is nearly identical to the RNN encoder-decoder of [11] used in neural machine translation. GRU has been shown to perform as well as LSTM [2] on sequence modelling tasks [14] while being conceptually simpler. GRU units have only 2 gates and do not require the use of a cell. While we use RNNs for our model, any encoder and decoder can be used so long as we can backpropagate through it.\nAssume we are given a sentence tuple (si\u22121, si, si+1). Let wti denote the t-th word for sentence si and let xti denote its word embedding. We describe the model in three parts: the encoder, decoder and objective function.\n1A preliminary version of our model was developed in the context of a computer vision application [9].\nEncoder. Let w1i , . . . , wNi be the words in sentence si where N is the number of words in the sentence. At each time step, the encoder produces a hidden state hti which can be interpreted as the representation of the sequence w1i , . . . , w t i . The hidden state h N i thus represents the full sentence. To encode a sentence, we iterate the following sequence of equations (dropping the subscript i):\nrt = \u03c3(Wrx t + Urh t\u22121) (1)\nzt = \u03c3(Wzx t + Uzh t\u22121) (2) h\u0304t = tanh(Wxt + U(rt ht\u22121)) (3) ht = (1\u2212 zt) ht\u22121 + zt h\u0304t (4)\nwhere h\u0304t is the proposed state update at time t, zt is the update gate, rt is the reset gate ( ) denotes a component-wise product. Both update gates takes values between zero and one.\nDecoder. The decoder is a neural language model which conditions on the encoder output hi. The computation is similar to that of the encoder except we introduce matrices Cz , Cr and C that are used to bias the update gate, reset gate and hidden state computation by the sentence vector. One decoder is used for the next sentence si+1 while a second decoder is used for the previous sentence si\u22121. Separate parameters are used for each decoder with the exception of the vocabulary matrix V, which is the weight matrix connecting the decoder\u2019s hidden state for computing a distribution over words. In what follows we describe the decoder for the next sentence si+1 although an analogous computation is used for the previous sentence si\u22121. Let hti+1 denote the hidden state of the decoder at time t. Decoding involves iterating through the following sequence of equations (dropping the subscript i+ 1):\nrt = \u03c3(Wdrx t\u22121 + Udrh t\u22121 + Crhi) (5) zt = \u03c3(Wdzx t\u22121 + Udzh t\u22121 + Czhi) (6)\nh\u0304t = tanh(Wdxt\u22121 + Ud(rt ht\u22121) + Chi) (7) hti+1 = (1\u2212 zt) ht\u22121 + zt h\u0304t (8)\nGiven hti+1, the probability of word w t i+1 given the previous t\u2212 1 words and the encoder vector is\nP (wti+1|w<ti+1,hi) \u221d exp(vwti+1h t i+1) (9)\nwhere vwti+1 denotes the row of V corresponding to the word of w t i+1. An analogous computation is performed for the previous sentence si\u22121.\nObjective. Given a tuple (si\u22121, si, si+1), the objective optimized is the sum of the log-probabilities for the forward and backward sentences conditioned on the encoder representation:\u2211\nt logP (wti+1|w<ti+1,hi) + \u2211 t logP (wti\u22121|w<ti\u22121,hi) (10)\nThe total objective is the above summed over all such training tuples."}, {"heading": "2.2 Vocabulary expansion", "text": "We now describe how to expand our encoder\u2019s vocabulary to words it has not seen during training. Suppose we have a model that was trained to induce word representations, such as word2vec. Let Vw2v denote the word embedding space of these word representations and let Vrnn denote the RNN word embedding space. We assume the vocabulary of Vw2v is much larger than that of Vrnn. Our goal is to construct a mapping f : Vw2v \u2192 Vrnn parameterized by a matrix W such that v\u2032 = Wv for v \u2208 Vw2v and v\u2032 \u2208 Vrnn. Inspired by [15], which learned linear mappings between translation word spaces, we solve an un-regularized L2 linear regression loss for the matrix W. Thus, any word from Vw2v can now be mapped into Vrnn for encoding sentences. Table 3 shows examples of nearest neighbour words for queries that did not appear in our training vocabulary.\nWe note that there are alternate strategies for solving the vocabulary problem. One alternative is to initialize the RNN embedding space to that of pre-trained word vectors. This would require a more sophisticated softmax for decoding, or clipping the vocabulary of the decoder as it would be too computationally expensive to naively decode with vocabularies of hundreds of thousands of words. An alternative strategy is to avoid words altogether and train at the character level."}, {"heading": "3 Experiments", "text": "In our experiments, we evaluate the capability of our encoder as a generic feature extractor after training on the BookCorpus dataset. Our experimentation setup on each task is as follows:\n\u2022 Using the learned encoder as a feature extractor, extract skip-thought vectors for all sentences. \u2022 If the task involves computing scores between pairs of sentences, compute component-wise fea-\ntures between pairs. This is described in more detail specifically for each experiment. \u2022 Train a linear classifier on top of the extracted features, with no additional fine-tuning or back-\npropagation through the skip-thoughts model.\nWe restrict ourselves to linear classifiers for two reasons. The first is to directly evaluate the representation quality of the computed vectors. It is possible that additional performance gains can be made throughout our experiments with non-linear models but this falls out of scope of our goal. Furthermore, it allows us to better analyze the strengths and weaknesses of the learned representations. The second reason is that reproducibility now becomes very straightforward."}, {"heading": "3.1 Details of training", "text": "To induce skip-thought vectors, we train two separate models on our book corpus. One is a unidirectional encoder with 2400 dimensions, which we subsequently refer to as uni-skip. The other is a bidirectional model with forward and backward encoders of 1200 dimensions each. This model contains two encoders with different parameters: one encoder is given the sentence in correct order, while the other is given the sentence in reverse. The outputs are then concatenated to form a 2400 dimensional vector. We refer to this model as bi-skip. For training, we initialize all recurrent matricies with orthogonal initialization [16]. Non-recurrent weights are initialized from a uniform distribution in [-0.1,0.1]. Mini-batches of size 128 are used and gradients are clipped if the norm of the parameter\nvector exceeds 10. We used the Adam algorithm [17] for optimization. Both models were trained for roughly two weeks. As an additional experiment, we also report experimental results using a combined model, consisting of the concatenation of the vectors from uni-skip and bi-skip, resulting in a 4800 dimensional vector. Since we are using linear classifiers for evaluation, we were curious to what extent performance gains can be made by trivially increasing the vector dimensionality post-training of the skip-thought models. We refer to this model throughout as combine-skip.\nAfter our models are trained, we then employ vocabulary expansion to map word embeddings into the RNN encoder space. The publically available CBOW word vectors are used for this purpose 2. The skip-thought models are trained with a vocabulary size of 20,000 words. After removing multiple word examples from the CBOW model, this results in a vocabulary size of 930,911 words. Thus even though our skip-thoughts model was trained with only 20,000 words, after vocabulary expansion we can now successfully encode 930,911 possible words.\nSince our goal is to evaluate skip-thoughts as a general feature extractor, we keep text pre-processing to a minimum. When encoding new sentences, no additional preprocessing is done other than basic tokenization. This is done to test the robustness of our vectors."}, {"heading": "3.2 Semantic relatedness", "text": "Our first experiment is on the SemEval 2014 Task 1: semantic relatedness SICK dataset [29]. Given two sentences, our goal is to produce a score of how semantically related these sentences are, based on human generated scores. Each score is the average of 10 different human annotators. Scores take values between 1 and 5. A score of 1 indicates that the sentence pair is not at all related, while a score of 5 indicates they are highly related. The dataset comes with a predefined split of 4500 training pairs, 500 development pairs and 4927 testing pairs. All sentences are derived from existing image and video annotation datasets. The evaluation metrics are Pearson\u2019s r, Spearman\u2019s \u03c1, and mean squared error.\nGiven the difficulty of this task, many existing systems employ a large amount of feature engineering and additional resources. Thus, we test how well our learned representations fair against heavily engineered pipelines. Recently, [22] showed that learning representations with LSTM or Tree-LSTM for the task at hand is able to outperform these existing systems. We take this one step further and see how well our vectors learned from a completely different task are able to capture semantic relatedness when only a linear model is used on top to predict scores.\nTo represent a sentence pair, we use two features. Given two skip-thought vectors u and v, we compute their component-wise product u \u00b7 v and their absolute difference |u \u2212 v| and concatenate\n2http://code.google.com/p/word2vec/\nthem together. These two features were also used by [22]. To predict a score, we use the same setup as [22]. Let r> = [1, . . . , 5] be an integer vector from 1 to 5. We compute a distribution p as a function of prediction scores y given by pi = y \u2212 byc if i = byc + 1, pi = byc \u2212 y + 1 if i = byc and 0 otherwise. These then become our targets for a logistic regression classifier. At test time, given new sentence pairs we first compute targets p\u0302 and then compute the related score as r>p\u0302. As an additional comparison, we also explored appending features derived from an image-sentence embedding model trained on COCO (see section 3.4). Given vectors u and v, we obtain vectors u\u2032 and v\u2032 from the learned linear embedding model and compute features u\u2032 \u00b7 v\u2032 and |u\u2032 \u2212 v\u2032|. These are then concatenated to the existing features.\nTable 4 (left) presents our results. First, we observe that our models are able to outperform all previous systems from the SemEval 2014 competition. This is remarkable, given the simplicity of our approach and the lack of feature engineering. It highlights that skip-thought vectors learn representations that are well suited for semantic relatedness. Our results are comparable to LSTMs whose representations are trained from scratch on this task. Only the dependency tree-LSTM of [22] performs better than our results. We note that the dependency tree-LSTM relies on parsers whose training data is very expensive to collect and does not exist for all languages. We also observe using features learned from an image-sentence embedding model on COCO gives an additional performance boost, resulting in a model that performs on par with the dependency tree-LSTM. To get a feel for the model outputs, Table 5 shows example cases of test set pairs. Our model is able to accurately predict relatedness on many challenging cases. On some examples, it fails to pick up on small distinctions that drastically change a sentence meaning, such as tricks on a motorcycle versus tricking a person on a motorcycle."}, {"heading": "3.3 Paraphrase detection", "text": "The next task we consider is paraphrase detection on the Microsoft Research Paraphrase Corpus [30]. On this task, two sentences are given and one must predict whether or not they are paraphrases. The training set consists of 4076 sentence pairs (2753 which are positive) and the test set has 1725 pairs (1147 are positive). We compute a vector representing the pair of sentences in the same way as on the SICK dataset, using the component-wise product u \u00b7 v and their absolute difference |u\u2212 v| which are then concatenated together. We then train logistic regression on top to predict whether the sentences are paraphrases. Cross-validation is used for tuning the L2 penalty.\nAs in the semantic relatedness task, paraphrase detection has largely been dominated by extensive feature engineering, or a combination of feature engineering with semantic spaces. We report experiments in two settings: one using the features as above and the other incorporating basic statistics between sentence pairs, the same features used by [24]. These are referred to as feats in our results. We isolate the results and baselines used in [24] as well as the top published results on this task.\nTable 4 (right) presents our results, from which we can observe the following: (1) skip-thoughts alone outperform recursive nets with dynamic pooling when no hand-crafted features are used, (2)\nwhen other features are used, recursive nets with dynamic pooling works better, and (3) when skipthoughts are combined with basic pairwise statistics, it becomes competitive with the state-of-the-art which incorporate much more complicated features and hand-engineering. This is a promising result as many of the sentence pairs have very fine-grained details that signal if they are paraphrases."}, {"heading": "3.4 Image-sentence ranking", "text": "We next consider the task of retrieving images and their sentence descriptions. For this experiment, we use the Microsoft COCO dataset [34] which is the largest publicly available dataset of images with high-quality sentence descriptions. Each image is annotated with 5 captions, each from different annotators. Following previous work, we consider two tasks: image annotation and image search. For image annotation, an image is presented and sentences are ranked based on how well they describe the query image. The image search task is the reverse: given a caption, we retrieve images that are a good fit to the query. The training set comes with over 80,000 images each with 5 captions. For development and testing we use the same splits as [31]. The development and test sets each contain 1000 images and 5000 captions. Evaluation is performed using Recall@K, namely the mean number of images for which the correct caption is ranked within the top-K retrieved results (and vice-versa for sentences). We also report the median rank of the closest ground truth result from the ranked list.\nThe best performing results on image-sentence ranking have all used RNNs for encoding sentences, where the sentence representation is learned jointly. Recently, [32] showed that by using Fisher vectors for representing sentences, linear CCA can be applied to obtain performance that is as strong as using RNNs for this task. Thus the method of [32] is a strong baseline to compare our sentence representations with. For our experiments, we represent images using 4096-dimensional OxfordNet features from their 19-layer model [35]. For sentences, we simply extract skip-thought vectors for each caption. The training objective we use is a pairwise ranking loss that has been previously used by many other methods. The only difference is the scores are computed using only linear transformations of image and sentence inputs. The loss is given by:\u2211 x \u2211 k max{0, \u03b1\u2212 s(Ux,Vy) + s(Ux,Vyk)}+ \u2211 y \u2211 k max{0, \u03b1\u2212 s(Vy,Ux) + s(Vy,Uxk)},\nwhere x is an image vector, y is the skip-thought vector for the groundtruth sentence, yk are vectors for constrastive (incorrect) sentences and s(\u00b7, \u00b7) is the image-sentence score. Cosine similarity is used for scoring. The model parameters are {U,V} where U is the image embedding matrix and V is the sentence embedding matrix. In our experiments, we use a 1000 dimensional embedding, margin \u03b1 = 0.2 and k = 50 contrastive terms. We trained for 15 epochs and saved our model anytime the performance improved on the development set.\nTable 6 illustrates our results on this task. Using skip-thought vectors for sentences, we get performance that is on par with both [31] and [32] except for R@1 on image annotation, where other methods perform much better. Our results indicate that skip-thought vectors are representative enough to capture image descriptions without having to learn their representations from scratch. Combined with the results of [32], it also highlights that simple, scalable embedding techniques perform very well provided that high-quality image and sentence vectors are available."}, {"heading": "3.5 Classification benchmarks", "text": "For our final quantitative experiments, we report results on several classification benchmarks which are commonly used for evaluating sentence representation learning methods.\nWe use 5 datasets: movie review sentiment (MR) [36], customer product reviews (CR) [37], subjectivity/objectivity classification (SUBJ) [38], opinion polarity (MPQA) [39] and question-type classification (TREC) [40]. On all datasets, we simply extract skip-thought vectors and train a logistic regression classifier on top. 10-fold cross-validation is used for evaluation on the first 4 datasets, while TREC has a pre-defined train/test split. We tune the L2 penality using cross-validation (and thus use a nested cross-validation for the first 4 datasets).\nMethod MR CR SUBJ MPQA TREC\nNB-SVM [41] 79.4 81.8 93.2 86.3 MNB [41] 79.0 80.0 93.6 86.3 cBoW [6] 77.2 79.9 91.3 86.4 87.3\nGrConv [6] 76.3 81.3 89.5 84.5 88.4 RNN [6] 77.2 82.3 93.7 90.1 90.2 BRNN [6] 82.3 82.6 94.2 90.3 91.0 CNN [4] 81.5 85.0 93.4 89.6 93.6 AdaSent [6] 83.1 86.3 95.5 93.3 92.4\nParagraph-vector [7] 74.8 78.1 90.5 74.2 91.8\nuni-skip 75.5 79.3 92.1 86.9 91.4 bi-skip 73.9 77.9 92.5 83.3 89.4 combine-skip 76.5 80.1 93.6 87.1 92.2 combine-skip + NB 80.4 81.3 93.6 87.5\nbetter than learning a generic unsupervised sentence vector on much bigger datasets. Finally, we observe that the skip-thoughts-NB combination is effective, particularly on MR. This results in a very strong new baseline for text classification: combine skip-thoughts with bag-of-words and train a linear model."}, {"heading": "3.6 Visualizing skip-thoughts and generating stories", "text": "As a final experiment, we applied t-SNE [42] to skip-thought vectors extracted from TREC, SUBJ and SICK datasets and the visualizations are shown in Figure 2. For the SICK visualization, each point represents a sentence pair, computed using the concatenation of component-wise and absolute difference of features. Remarkably, sentence pairs that are similar to each other are embedded next to other similar pairs. Even without the use of relatedness labels, skip-thought vectors learn to accurately capture this property.\n3We use the code available at https://github.com/mesnilgr/nbsvm\nSince our decoder is a neural language model, we can also generate from it. We can perform generation by conditioning on a sentence, generating a new sentence, concatenating the generated example to the previous text and continuing. Since our model was trained on books, the generated samples reads like a novel, albeit a nonsensical one. Below is a 20 sentence sample generated by our model:\nshe grabbed my hand . \u201c come on . \u201d she fluttered her bag in the air . \u201c i think we \u2019re at your place . i ca n\u2019t come get you . \u201d he locked himself back up . \u201c no . she will . \u201d kyrian shook his head . \u201c we met ... that congratulations ... said no . \u201d the sweat on their fingertips \u2019s deeper from what had done it all of his flesh hard did n\u2019t fade . cassie tensed between her arms suddenly grasping him as her sudden her senses returned to its big form . her chin trembled softly as she felt something unreadable in her light . it was dark . my body shook as i lost what i knew and be betrayed and i realize just how it ended . it was n\u2019t as if i did n\u2019t open a vein . this was all my fault , damaged me . i should have told toby before i was screaming . i should \u2019ve told someone that was an accident . never helped it . how can i do this , to steal my baby \u2019s prints ? \u201d"}, {"heading": "4 Conclusion", "text": "We evaluated the effectiveness of skip-thought vectors as an off-the-shelf sentence representation with linear classifiers across 8 tasks. Many of the methods we compare against were only evaluated on 1 task. The fact that skip-thought vectors perform well on all tasks considered highlight the robustness of our representations.\nWe believe our model for learning skip-thought vectors only scratches the surface of possible objectives. Many variations have yet to be explored, including (a) deep encoders and decoders, (b) larger context windows, (c) encoding and decoding paragraphs, (d) other encoders, such as convnets. It is likely the case that more exploration of this space will result in even higher quality representations."}, {"heading": "Acknowledgments", "text": "We thank Geoffrey Hinton for suggesting the name skip-thoughts. We also thank Felix Hill, Kelvin Xu, Kyunghyun Cho and Ilya Sutskever for valuable comments and discussion. This work was supported by NSERC, Samsung, CIFAR, Google and ONR Grant N00014-14-1-0232."}], "references": [{"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "author": ["Richard Socher", "Alex Perelygin", "Jean Y Wu", "Jason Chuang", "Christopher D Manning", "Andrew Y Ng", "Christopher Potts"], "venue": "In EMNLP,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1997}, {"title": "A convolutional neural network for modelling sentences", "author": ["Nal Kalchbrenner", "Edward Grefenstette", "Phil Blunsom"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Convolutional neural networks for sentence classification", "author": ["Yoon Kim"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "On the properties of neural machine translation: Encoder-decoder approaches", "author": ["Kyunghyun Cho", "Bart van Merri\u00ebnboer", "Dzmitry Bahdanau", "Yoshua Bengio"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "Self-adaptive hierarchical sentence model", "author": ["Han Zhao", "Zhengdong Lu", "Pascal Poupart"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2015}, {"title": "Distributed representations of sentences and documents", "author": ["Quoc V Le", "Tomas Mikolov"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Efficient estimation of word representations in vector space", "author": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Aligning books and movies: Towards story-like visual explanations by watching movies and reading books", "author": ["Yukun Zhu", "Ryan Kiros", "Richard S. Zemel", "Ruslan Salakhutdinov", "Raquel Urtasun", "Antonio Torralba", "Sanja Fidler"], "venue": "In Arxiv,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Recurrent continuous translation models", "author": ["Nal Kalchbrenner", "Phil Blunsom"], "venue": "In EMNLP,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2013}, {"title": "Learning phrase representations using rnn encoder-decoder for statistical machine", "author": ["Kyunghyun Cho", "Bart van Merrienboer", "Caglar Gulcehre", "Fethi Bougares", "Holger Schwenk", "Yoshua Bengio"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc VV Le"], "venue": "In NIPS,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "ICLR,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}, {"title": "Empirical evaluation of gated recurrent neural networks on sequence modeling", "author": ["Junyoung Chung", "Caglar Gulcehre", "KyungHyun Cho", "Yoshua Bengio"], "venue": "NIPS Deep Learning Workshop,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2014}, {"title": "Exploiting similarities among languages for machine translation", "author": ["Tomas Mikolov", "Quoc V Le", "Ilya Sutskever"], "venue": "arXiv preprint arXiv:1309.4168,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2013}, {"title": "Exact solutions to the nonlinear dynamics of learning in deep linear neural networks", "author": ["Andrew M Saxe", "James L McClelland", "Surya Ganguli"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2014}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "ICLR,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2015}, {"title": "Illinois-lh: A denotational and distributional approach to semantics", "author": ["Alice Lai", "Julia Hockenmaier"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2014}, {"title": "Unal-nlp: Combining soft cardinality features for semantic textual similarity, relatedness and entailment", "author": ["Sergio Jimenez", "George Duenas", "Julia Baquero", "Alexander Gelbukh", "Av Juan Dios B\u00e1tiz", "Av Mendiz\u00e1bal"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2014}, {"title": "The meaning factory: Formal semantics for recognizing textual entailment and determining semantic similarity", "author": ["Johannes Bjerva", "Johan Bos", "Rob van der Goot", "Malvina Nissim"], "venue": "SemEval", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2014}, {"title": "Ecnu: One stone two birds: Ensemble of heterogenous measures for semantic relatedness and textual entailment", "author": ["Jiang Zhao", "Tian Tian Zhu", "Man Lan"], "venue": null, "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2014}, {"title": "Improved semantic representations from tree-structured long short-term memory", "author": ["Kai Sheng Tai", "Richard Socher", "Christopher D Manning"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2015}, {"title": "Grounded compositional semantics for finding and describing images with sentences", "author": ["Richard Socher", "Andrej Karpathy", "Quoc V Le", "Christopher D Manning", "Andrew Y Ng"], "venue": "TACL,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}, {"title": "Dynamic pooling and unfolding recursive autoencoders for paraphrase detection", "author": ["Richard Socher", "Eric H Huang", "Jeffrey Pennin", "Christopher D Manning", "Andrew Y Ng"], "venue": "In NIPS,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2011}, {"title": "Using machine translation evaluation techniques to determine sentence-level semantic equivalence", "author": ["Andrew Finch", "Young-Sook Hwang", "Eiichiro Sumita"], "venue": "In IWP,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2005}, {"title": "Paraphrase identification as probabilistic quasi-synchronous recognition", "author": ["Dipanjan Das", "Noah A Smith"], "venue": "In ACL,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2009}, {"title": "Using dependency-based features to take the \u00e2\u0102IJpara-farce\u00e2\u0102\u0130 out of paraphrase", "author": ["Stephen Wan", "Mark Dras", "Robert Dale", "C\u00e9cile Paris"], "venue": "In Proceedings of the Australasian Language Technology Workshop,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2006}, {"title": "Re-examining machine translation metrics for paraphrase identification", "author": ["Nitin Madnani", "Joel Tetreault", "Martin Chodorow"], "venue": "In NAACL,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2012}, {"title": "Semeval-2014 task 1: Evaluation of compositional distributional semantic models on full sentences through semantic relatedness and textual entailment", "author": ["Marco Marelli", "Luisa Bentivogli", "Marco Baroni", "Raffaella Bernardi", "Stefano Menini", "Roberto Zamparelli"], "venue": null, "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2014}, {"title": "Unsupervised construction of large paraphrase corpora: Exploiting massively parallel news sources", "author": ["Bill Dolan", "Chris Quirk", "Chris Brockett"], "venue": "In Proceedings of the 20th international conference on Computational Linguistics,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2004}, {"title": "Deep visual-semantic alignments for generating image descriptions", "author": ["A. Karpathy", "L. Fei-Fei"], "venue": "In CVPR,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2015}, {"title": "Associating neural word embeddings with deep image representations using fisher vectors", "author": ["Benjamin Klein", "Guy Lev", "Gil Sadeh", "Lior Wolf"], "venue": "In CVPR,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2015}, {"title": "Deep captioning with multimodal recurrent neural networks (m-rnn)", "author": ["Junhua Mao", "Wei Xu", "Yi Yang", "Jiang Wang", "Alan Yuille"], "venue": null, "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2015}, {"title": "Microsoft coco: Common objects in context", "author": ["Tsung-Yi Lin", "Michael Maire", "Serge Belongie", "James Hays", "Pietro Perona", "Deva Ramanan", "Piotr Doll\u00e1r", "C Lawrence Zitnick"], "venue": "In ECCV,", "citeRegEx": "34", "shortCiteRegEx": "34", "year": 2014}, {"title": "Very deep convolutional networks for large-scale image recognition", "author": ["Karen Simonyan", "Andrew Zisserman"], "venue": "ICLR,", "citeRegEx": "35", "shortCiteRegEx": "35", "year": 2015}, {"title": "Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales", "author": ["Bo Pang", "Lillian Lee"], "venue": "In ACL,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2005}, {"title": "Mining and summarizing customer reviews", "author": ["Minqing Hu", "Bing Liu"], "venue": "In Proceedings of the tenth ACM SIGKDD international conference on Knowledge discovery and data mining,", "citeRegEx": "37", "shortCiteRegEx": "37", "year": 2004}, {"title": "A sentimental education: Sentiment analysis using subjectivity summarization based on minimum cuts", "author": ["Bo Pang", "Lillian Lee"], "venue": "In ACL,", "citeRegEx": "38", "shortCiteRegEx": "38", "year": 2004}, {"title": "Annotating expressions of opinions and emotions in language", "author": ["Janyce Wiebe", "Theresa Wilson", "Claire Cardie"], "venue": "Language resources and evaluation,", "citeRegEx": "39", "shortCiteRegEx": "39", "year": 2005}, {"title": "Learning question classifiers", "author": ["Xin Li", "Dan Roth"], "venue": "In Proceedings of the 19th international conference on Computational linguistics,", "citeRegEx": "40", "shortCiteRegEx": "40", "year": 2002}, {"title": "Baselines and bigrams: Simple, good sentiment and topic classification", "author": ["Sida Wang", "Christopher D Manning"], "venue": "In ACL,", "citeRegEx": "41", "shortCiteRegEx": "41", "year": 2012}, {"title": "Visualizing data using t-sne", "author": ["Laurens Van der Maaten", "Geoffrey Hinton"], "venue": null, "citeRegEx": "42", "shortCiteRegEx": "42", "year": 2008}], "referenceMentions": [{"referenceID": 0, "context": "In recent years, several approaches have been developed for learning composition operators that map word vectors to sentence vectors including recursive networks [1], recurrent networks [2], convolutional networks [3, 4] and recursive-convolutional methods [5, 6] among others.", "startOffset": 162, "endOffset": 165}, {"referenceID": 1, "context": "In recent years, several approaches have been developed for learning composition operators that map word vectors to sentence vectors including recursive networks [1], recurrent networks [2], convolutional networks [3, 4] and recursive-convolutional methods [5, 6] among others.", "startOffset": 186, "endOffset": 189}, {"referenceID": 2, "context": "In recent years, several approaches have been developed for learning composition operators that map word vectors to sentence vectors including recursive networks [1], recurrent networks [2], convolutional networks [3, 4] and recursive-convolutional methods [5, 6] among others.", "startOffset": 214, "endOffset": 220}, {"referenceID": 3, "context": "In recent years, several approaches have been developed for learning composition operators that map word vectors to sentence vectors including recursive networks [1], recurrent networks [2], convolutional networks [3, 4] and recursive-convolutional methods [5, 6] among others.", "startOffset": 214, "endOffset": 220}, {"referenceID": 4, "context": "In recent years, several approaches have been developed for learning composition operators that map word vectors to sentence vectors including recursive networks [1], recurrent networks [2], convolutional networks [3, 4] and recursive-convolutional methods [5, 6] among others.", "startOffset": 257, "endOffset": 263}, {"referenceID": 5, "context": "In recent years, several approaches have been developed for learning composition operators that map word vectors to sentence vectors including recursive networks [1], recurrent networks [2], convolutional networks [3, 4] and recursive-convolutional methods [5, 6] among others.", "startOffset": 257, "endOffset": 263}, {"referenceID": 6, "context": "The paragraph vector of [7] is an alternative to the above models in that it can learn unsupervised sentence representations by introducing a distributed sentence indicator as part of a neural language model.", "startOffset": 24, "endOffset": 27}, {"referenceID": 7, "context": "Using word vector learning as inspiration, we propose an objective function that abstracts the skip-gram model of [8] to the sentence level.", "startOffset": 114, "endOffset": 117}, {"referenceID": 8, "context": "We chose to use a large collection of novels, namely the BookCorpus dataset [9] for training our models.", "startOffset": 76, "endOffset": 79}, {"referenceID": 8, "context": "Table 1: Summary statistics of the BookCorpus dataset [9].", "startOffset": 54, "endOffset": 57}, {"referenceID": 7, "context": "Using pretrained word2vec representations learned with a continuous bag-of-words model [8], we learn a linear mapping from a word in word2vec space to a word in the encoder\u2019s vocabulary space.", "startOffset": 87, "endOffset": 90}, {"referenceID": 9, "context": "Several choices of encoder-decoder pairs have been explored, including ConvNet-RNN [10], RNN-RNN [11] and LSTM-LSTM [12].", "startOffset": 83, "endOffset": 87}, {"referenceID": 10, "context": "Several choices of encoder-decoder pairs have been explored, including ConvNet-RNN [10], RNN-RNN [11] and LSTM-LSTM [12].", "startOffset": 97, "endOffset": 101}, {"referenceID": 11, "context": "Several choices of encoder-decoder pairs have been explored, including ConvNet-RNN [10], RNN-RNN [11] and LSTM-LSTM [12].", "startOffset": 116, "endOffset": 120}, {"referenceID": 12, "context": "The source sentence representation can also dynamically change through the use of an attention mechanism [13] to take into account only the relevant words for translation at any given time.", "startOffset": 105, "endOffset": 109}, {"referenceID": 13, "context": "In our model, we use an RNN encoder with GRU [14] activations and an RNN decoder with a conditional GRU.", "startOffset": 45, "endOffset": 49}, {"referenceID": 10, "context": "This model combination is nearly identical to the RNN encoder-decoder of [11] used in neural machine translation.", "startOffset": 73, "endOffset": 77}, {"referenceID": 1, "context": "GRU has been shown to perform as well as LSTM [2] on sequence modelling tasks [14] while being conceptually simpler.", "startOffset": 46, "endOffset": 49}, {"referenceID": 13, "context": "GRU has been shown to perform as well as LSTM [2] on sequence modelling tasks [14] while being conceptually simpler.", "startOffset": 78, "endOffset": 82}, {"referenceID": 8, "context": "A preliminary version of our model was developed in the context of a computer vision application [9].", "startOffset": 97, "endOffset": 100}, {"referenceID": 14, "context": "Inspired by [15], which learned linear mappings between translation word spaces, we solve an un-regularized L2 linear regression loss for the matrix W.", "startOffset": 12, "endOffset": 16}, {"referenceID": 15, "context": "For training, we initialize all recurrent matricies with orthogonal initialization [16].", "startOffset": 83, "endOffset": 87}, {"referenceID": 17, "context": "Illinois-LH [18] 0.", "startOffset": 12, "endOffset": 16}, {"referenceID": 18, "context": "3692 UNAL-NLP [19] 0.", "startOffset": 14, "endOffset": 18}, {"referenceID": 19, "context": "3550 Meaning Factory [20] 0.", "startOffset": 21, "endOffset": 25}, {"referenceID": 20, "context": "3224 ECNU [21] 0.", "startOffset": 10, "endOffset": 14}, {"referenceID": 21, "context": "Mean vectors [22] 0.", "startOffset": 13, "endOffset": 17}, {"referenceID": 22, "context": "4557 DT-RNN [23] 0.", "startOffset": 12, "endOffset": 16}, {"referenceID": 22, "context": "3822 SDT-RNN [23] 0.", "startOffset": 13, "endOffset": 17}, {"referenceID": 21, "context": "3848 LSTM [22] 0.", "startOffset": 10, "endOffset": 14}, {"referenceID": 21, "context": "2831 Bidirectional LSTM [22] 0.", "startOffset": 24, "endOffset": 28}, {"referenceID": 21, "context": "2736 Dependency Tree-LSTM [22] 0.", "startOffset": 26, "endOffset": 30}, {"referenceID": 23, "context": "feats [24] 73.", "startOffset": 6, "endOffset": 10}, {"referenceID": 23, "context": "2 RAE+DP [24] 72.", "startOffset": 9, "endOffset": 13}, {"referenceID": 23, "context": "6 RAE+feats [24] 74.", "startOffset": 12, "endOffset": 16}, {"referenceID": 23, "context": "2 RAE+DP+feats [24] 76.", "startOffset": 15, "endOffset": 19}, {"referenceID": 24, "context": "FHS [25] 75.", "startOffset": 4, "endOffset": 8}, {"referenceID": 25, "context": "7 PE [26] 76.", "startOffset": 5, "endOffset": 9}, {"referenceID": 26, "context": "7 WDDP [27] 75.", "startOffset": 7, "endOffset": 11}, {"referenceID": 27, "context": "0 MTMETRICS [28] 77.", "startOffset": 12, "endOffset": 16}, {"referenceID": 21, "context": "The first group of results are SemEval 2014 submissions, while the second group are results reported by [22].", "startOffset": 104, "endOffset": 108}, {"referenceID": 16, "context": "We used the Adam algorithm [17] for optimization.", "startOffset": 27, "endOffset": 31}, {"referenceID": 28, "context": "Our first experiment is on the SemEval 2014 Task 1: semantic relatedness SICK dataset [29].", "startOffset": 86, "endOffset": 90}, {"referenceID": 21, "context": "Recently, [22] showed that learning representations with LSTM or Tree-LSTM for the task at hand is able to outperform these existing systems.", "startOffset": 10, "endOffset": 14}, {"referenceID": 21, "context": "These two features were also used by [22].", "startOffset": 37, "endOffset": 41}, {"referenceID": 21, "context": "To predict a score, we use the same setup as [22].", "startOffset": 45, "endOffset": 49}, {"referenceID": 21, "context": "Only the dependency tree-LSTM of [22] performs better than our results.", "startOffset": 33, "endOffset": 37}, {"referenceID": 29, "context": "The next task we consider is paraphrase detection on the Microsoft Research Paraphrase Corpus [30].", "startOffset": 94, "endOffset": 98}, {"referenceID": 23, "context": "We report experiments in two settings: one using the features as above and the other incorporating basic statistics between sentence pairs, the same features used by [24].", "startOffset": 166, "endOffset": 170}, {"referenceID": 23, "context": "We isolate the results and baselines used in [24] as well as the top published results on this task.", "startOffset": 45, "endOffset": 49}, {"referenceID": 30, "context": "0 500 DVSA [31] 38.", "startOffset": 11, "endOffset": 15}, {"referenceID": 31, "context": "8 3 GMM+HGLMM [32] 39.", "startOffset": 14, "endOffset": 18}, {"referenceID": 32, "context": "6 4 m-RNN [33] 41.", "startOffset": 10, "endOffset": 14}, {"referenceID": 33, "context": "For this experiment, we use the Microsoft COCO dataset [34] which is the largest publicly available dataset of images with high-quality sentence descriptions.", "startOffset": 55, "endOffset": 59}, {"referenceID": 30, "context": "For development and testing we use the same splits as [31].", "startOffset": 54, "endOffset": 58}, {"referenceID": 31, "context": "Recently, [32] showed that by using Fisher vectors for representing sentences, linear CCA can be applied to obtain performance that is as strong as using RNNs for this task.", "startOffset": 10, "endOffset": 14}, {"referenceID": 31, "context": "Thus the method of [32] is a strong baseline to compare our sentence representations with.", "startOffset": 19, "endOffset": 23}, {"referenceID": 34, "context": "For our experiments, we represent images using 4096-dimensional OxfordNet features from their 19-layer model [35].", "startOffset": 109, "endOffset": 113}, {"referenceID": 30, "context": "Using skip-thought vectors for sentences, we get performance that is on par with both [31] and [32] except for R@1 on image annotation, where other methods perform much better.", "startOffset": 86, "endOffset": 90}, {"referenceID": 31, "context": "Using skip-thought vectors for sentences, we get performance that is on par with both [31] and [32] except for R@1 on image annotation, where other methods perform much better.", "startOffset": 95, "endOffset": 99}, {"referenceID": 31, "context": "Combined with the results of [32], it also highlights that simple, scalable embedding techniques perform very well provided that high-quality image and sentence vectors are available.", "startOffset": 29, "endOffset": 33}, {"referenceID": 35, "context": "We use 5 datasets: movie review sentiment (MR) [36], customer product reviews (CR) [37], subjectivity/objectivity classification (SUBJ) [38], opinion polarity (MPQA) [39] and question-type classification (TREC) [40].", "startOffset": 47, "endOffset": 51}, {"referenceID": 36, "context": "We use 5 datasets: movie review sentiment (MR) [36], customer product reviews (CR) [37], subjectivity/objectivity classification (SUBJ) [38], opinion polarity (MPQA) [39] and question-type classification (TREC) [40].", "startOffset": 83, "endOffset": 87}, {"referenceID": 37, "context": "We use 5 datasets: movie review sentiment (MR) [36], customer product reviews (CR) [37], subjectivity/objectivity classification (SUBJ) [38], opinion polarity (MPQA) [39] and question-type classification (TREC) [40].", "startOffset": 136, "endOffset": 140}, {"referenceID": 38, "context": "We use 5 datasets: movie review sentiment (MR) [36], customer product reviews (CR) [37], subjectivity/objectivity classification (SUBJ) [38], opinion polarity (MPQA) [39] and question-type classification (TREC) [40].", "startOffset": 166, "endOffset": 170}, {"referenceID": 39, "context": "We use 5 datasets: movie review sentiment (MR) [36], customer product reviews (CR) [37], subjectivity/objectivity classification (SUBJ) [38], opinion polarity (MPQA) [39] and question-type classification (TREC) [40].", "startOffset": 211, "endOffset": 215}, {"referenceID": 40, "context": "NB-SVM [41] 79.", "startOffset": 7, "endOffset": 11}, {"referenceID": 40, "context": "3 MNB [41] 79.", "startOffset": 6, "endOffset": 10}, {"referenceID": 5, "context": "3 cBoW [6] 77.", "startOffset": 7, "endOffset": 10}, {"referenceID": 5, "context": "GrConv [6] 76.", "startOffset": 7, "endOffset": 10}, {"referenceID": 5, "context": "4 RNN [6] 77.", "startOffset": 6, "endOffset": 9}, {"referenceID": 5, "context": "2 BRNN [6] 82.", "startOffset": 7, "endOffset": 10}, {"referenceID": 3, "context": "0 CNN [4] 81.", "startOffset": 6, "endOffset": 9}, {"referenceID": 5, "context": "6 AdaSent [6] 83.", "startOffset": 10, "endOffset": 13}, {"referenceID": 6, "context": "Paragraph-vector [7] 74.", "startOffset": 17, "endOffset": 20}, {"referenceID": 40, "context": "In particular, the NB-SVM of [41] is a fast and robust performer on these tasks.", "startOffset": 29, "endOffset": 33}, {"referenceID": 41, "context": "As a final experiment, we applied t-SNE [42] to skip-thought vectors extracted from TREC, SUBJ and SICK datasets and the visualizations are shown in Figure 2.", "startOffset": 40, "endOffset": 44}], "year": 2015, "abstractText": "We describe an approach for unsupervised learning of a generic, distributed sentence encoder. Using the continuity of text from books, we train an encoderdecoder model that tries to reconstruct the surrounding sentences of an encoded passage. Sentences that share semantic and syntactic properties are thus mapped to similar vector representations. We next introduce a simple vocabulary expansion method to encode words that were not seen as part of training, allowing us to expand our vocabulary to a million words. After training our model, we extract and evaluate our vectors with linear models on 8 tasks: semantic relatedness, paraphrase detection, image-sentence ranking, question-type classification and 4 benchmark sentiment and subjectivity datasets. The end result is an off-the-shelf encoder that can produce highly generic sentence representations that are robust and perform well in practice. We will make our encoder publicly available.", "creator": "LaTeX with hyperref package"}}}