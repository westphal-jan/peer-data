{"id": "1507.00142", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Jul-2015", "title": "A Tool for Computing and Estimating the Volume of the Solution Space of SMT(LA)", "abstract": "There are already a number of tools for solving SMT problems (Satisfiability Modulo Theories). In this essay we present\\ texttt {VolCE}, a tool for calculating solutions to SMT constraints, or in other words, for calculating the volume of the solution space. Its input is essentially a series of Boolean combinations of linear constraints, where the numerical variables are either integer numbers or all reals and each variable is limited. It extends SMT solving by integer solution counting and volume calculation / estimation for convex polytopes. Effective heuristics are adopted, which allow the tool to efficiently and precisely handle high-dimensional problems.", "histories": [["v1", "Wed, 1 Jul 2015 08:06:33 GMT  (257kb,D)", "http://arxiv.org/abs/1507.00142v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["cunjing ge", "feifei ma", "jian zhang"], "accepted": false, "id": "1507.00142"}, "pdf": {"name": "1507.00142.pdf", "metadata": {"source": "CRF", "title": "A Tool for Computing and Estimating the Volume of the Solution Space of SMT(LA) Constraints", "authors": ["Cunjing Ge", "Feifei Ma", "Jian Zhang"], "emails": ["gecj@ios.ac.cn", "maff@ios.ac.cn", "zj@ios.ac.cn"], "sections": [{"heading": "1 Introduction", "text": "In recent years, there have been a lot of works on solving the Satisfiability Modulo Theories (SMT) problem. Quite efficient SMT solvers have been developed, such as CVC3, MathSAT, Yices and Z3. In [13], we studied the counting version of SMT solving, and presented some techniques for computing the size of the solution space efficiently. This problem can be regarded as an extension to SMT solving, and also an extension to model counting in the propositional logic. It has recently gained much attention in the software engineering community [11,9].\nThe prototype tool presented in [13] computes the exact volume of solution space. However, exact volume computation in general is an extremely difficult problem. It has been proved to be #P-hard, even for explicitly described polytopes. On the other hand, it suffices to have an approximate value of the volume in many cases. Recently we implemented a tool to estimate the volume of polytopes; and integrated it into the framework of [13].\nThis paper presents the new tool VolCE1 for the counting version of SMT(LA). (Here LA stands for linear arithmetic.) The input of the tool is a set of Boolean combinations of linear constraints, where each numeric variable is bounded. Independent Boolean variables may also appear in the constraints. The output of the tool is the \u201cvolume\u201d of the solution space, or the number of solutions in case that the domain consists of integer points.\n1 It is available at http://lcs.ios.ac.cn/\u02dczj/volce10x64.tar.gz\nar X\niv :1\n50 7.\n00 14\n2v 1\n[ cs\n.A I]\n1 J\nul 2\n2 The rest of this paper is organized as follows. Section 2 presents the architecture of VolCE. Section 3 presents the algorithm and implementation of our volume estimation sub-procedure. Section 4 briefly describes how to use the tool. Section 5 discusses our experiments, and Section 6 describes some related works. We conclude in Section 7.\n2 Architecture of VolCE\nThe architecture of VolCE is illustrated in Figure 1. Recall that in [13], a consistent conjunction of linear constraints that satisfies the boolean skeleton of the SMT(LA) formula is called a feasible assignment. The sum of volumes of all feasible assignments is the volume of the whole formula. In VolCE, the SAT solving engine (MiniSat2) and the linear arithmetic solver (lp solve3) work together to find feasible assignments. Each time a feasible assignment is obtained, VolCE tries to reduce it to a partial assignment that still propositionally satisfies the formula. The resulted feasible partial assignment may cover a bunch of feasible assignments, hence is called a \u201cbunch\u201d. Then a solution counting or volume computation/estimation sub-procedure is called for the polytope corresponding to each bunch rather than each feasible assignment, so that the number of calls is reduced. For more details of the main algorithm, see [13].\nIn addition to MiniSat and lp solve, VolCE calls Vinci [3] and LattE [5] to help compute the size of the solution space. Vinci is a tool for computing the volume of a convex body. LattE is a tool for counting lattice points inside convex polytopes and solutions of integer programs. Moreover, we implemented a tool for estimating the volume of convex polytopes, called PolyVest [8]. It will be elaborated in the subsequent section.\n2 The MiniSat Page. http://minisat.se/ 3 Available at http://lpsolve.sourceforge.net/\n3"}, {"heading": "3 Volume Estimation", "text": "The performance of volume computation packages for convex polytopes is the bottleneck of the prototype tool in [13]. Recently we augmented it with an efficient volume estimation sub-procedure for convex polytopes."}, {"heading": "3.1 Volume Estimation for Convex Polytopes", "text": "A straightforward way to estimate the volume of a convex body is the MonteCarlo method. However, it suffers from the curse of dimensionality4, which means the possibility of sampling inside a certain space in the target object decreases very quickly while the dimension increases. As a result, the sample size has to grow exponentially to achieve a reasonable estimation. To avoid the curse of dimensionality, Dyer et.al. proposed a polynomial time randomized approximation algorithm (Multiphase Monte-Carlo Algorithm) [6]. The theoretical complexity of the original algorithm is O\u2217(n23)5, and is recently reduced to O\u2217(n4) [12].\nBased on the Multiphase Monte-Carlo method, we implemented our own tool PolyVest (Polytope Volume Estimation) to estimate the volume of convex polytopes [8]. One improvement over the original Multiphase Monte-Carlo method is that we developed a new technique to reutilize sample points, so that the number of sample points can be significantly reduced.\nIn the sequel, we briefly describe the algorithm implemented in PolyVest. For more details, one can refer to [8]. We assume that P is a full-dimensional and nonempty convex polytope. We use vol(K) to represent the volume of a convex body K, and B(x,R) to represent the ball with radius R and center x.\nThe basic procedure of PolyVest consists of the following three steps: rounding, subdivision and sampling.\n4 http://en.wikipedia.org/wiki/Curse of dimensionality 5 \u201csoft-O\u201d notation O\u2217 indicates that we suppress factors of logn as well as factors\ndepending on other parameters like the error bound\n4 Rounding First we find an affine transformation T on polytope P so that T (P ) contains the unit ball B(0, 1), and is contained in the ball B(0, r). This can be achieved by applying the Shallow-\u03b2-Cut Ellipsoid Method [10]. We set r = 2n in our implementation. Rounding is an essential step. For example, it is difficult to subdivide a very \u201cthin\u201d polytope and sample on it without rounding. For simplicity, we still use P to denote the new polytope T (P ) after rounding.\nSubdivision Then we divide P into a sequence of convex bodies. The general idea of the subdivision step is illustrated in Figure 2. We place l concentric balls {Bi} between B(0, 1) and B(0, r). Let Ki denote the convex body Bi \u2229 P , then\nvol(P ) = vol(K0) l\u22121\u220f i=0 vol(Ki+1) vol(Ki) .\nLet \u03b1i denote the ratio vol(Ki+1)/vol(Ki), then\nvol(P ) = vol(K0) l\u22121\u220f i=0 \u03b1i.\nHence the volume of the polytope P is transformed to the products of ratios and the volume of K0. Note that K0 = B(0, 1) whose volume can be easily computed. So we only have to estimate the value of \u03b1i.\nOf course, one would like to choose the number of concentric balls, l, to be small. However, one needs about O(l\u03b1i) random points to get a sufficiently good approximation for \u03b1i. It follows that the \u03b1i must not be too large. In PolyVest, we set l = dn log2 re and Bi = B(0, 2i/n) to construct the convex bodies {Ki}. And it can be proved that 1 \u2264 \u03b1i \u2264 2 with this construction.\nSampling Finally, we generate S points in Ki+1 and count the number of points ci in Ki. Thus \u03b1i can be approximated with S/ci. Generating independent uniformly distributed random points in {Ki} is not as simple as in cubes or ellipsoids. So we use a hit-and-run method for sampling. Hit-and-run method is a random walk which can generate points with almost uniform distribution in polynomial time [1]. Figure 3 illustrates the hit-and-run method: It starts from a point x, then randomly selects a line L through x and choose the next point x\u2032 uniformly on the segment in P of line L. PolyVest adopts the coordinate directions hit-and-run method, in which the random direction of line L is chosen with equal probability from the coordinate direction vectors and their negations.\nReutilization of Sample Points In the original Multiphase Monte Carlo method, the ratios \u03b1i are estimated in natural order, from the first ratio \u03b10 to the last one \u03b1l\u22121. And the method starts sampling from the origin. However, our implementation works in the opposite way. It generates sample points from the outermost convex body Kl to the innermost convex body K0, and the ratios are estimated accordingly in reverse order.\nThe advantage of approximation in reverse order is that it is possible to fully exploit the sample points generated in the previous phases. Since K0 \u2286 K1 \u2286 \u00b7 \u00b7 \u00b7 \u2286 Kl, the sample points in Ki still fall in Kj (i \u2264 j). On the other hand, the sample points generated by the hit-and-run method are almost independent\n5 as sample size S is large enough. Therefore, for any i that i \u2264 j, the points generated for approximating \u03b1j that hit Ki+1 can serve as sample points to approximate \u03b1i as well. It can be easily proved that we only need to generate less than half sample points with this technique since \u03b1i \u2264 2. In practice, this technique can save over 70% time consumption under most circumstances."}, {"heading": "3.2 Volume Estimation for SMT(LRA) Formula", "text": "Now we describe how to estimate the \u201cvolume\u201d of the solution space of SMT(LRA) formulas. (Here LRA stands for linear real arithmetic.) The basic procedure is quite similar to that of volume computation as described in [13]. As in [13], a consistent conjunction of linear constraints that satisfies the boolean skeleton of the SMT(LRA) formula is called a feasible (partial) assignment. Each time VolCE obtains a feasible (partial) assignment, it calls PolyVest to estimate the volume of the polytope corresponding to this assignment. The sum of estimated volumes of all feasible (partial) assignments is approximately the volume for the whole formula. Note that the \u201cvolume computation in bunches\u201d strategy in [13] can also be applied in volume estimation.\nIn the Multiphase Monte-Carlo method, the number of sample points at each phase is a key parameter. As the sample size increases, the accuracy of estimation improves, and the estimation process also takes more time. It is important to balance the accuracy and run time, especially for VolCE since the estimation subroutine PolyVest is usually called many times.\nVolCE employs a two-round strategy that can dynamically determine a proper sample size for each feasible (partial) assignment. At the first round of estimation, each feasible assignment is sampled with a fixed small number of random points to get a quick and rough estimation. Since the volumes of feasible assignments may vary a lot, intuitively a feasible assignment with relatively larger volume should be estimated with higher accuracy. Hence at the second round, the sample size for each assignment is determined according to its estimated volume from the first round. More specifically, we use the following rule to decide the sample sizes in the second round:\n\u2013 Suppose the sample size in the first round is Smin, and the largest sample size in the second round is set to Smax. Let Vmax denote the largest estimated volume in the first round, and Vi denote the volume of the ith feasible assignment estimated in the first round. Then the sample size Si for the ith feasible assignment in the second round is:\nSi = 2\u00d7 Smax \u00d7 Vi\nVmax\nIf Si \u2264 Smin, the ith feasible assignment is neglected at the second round, and we use the result from the first round as its estimated volume. If Si > Smax, then set Si to Smax.\n6 Through statistical results of substantial experiments, we find that setting Smin to 40l and Smax to 1600l (l = dn log2 re) is very effective. It only needs to generate Smin/Smax = 1/40 points in extreme cases with this strategy. In practice, it usually saves more than 95% points for random instances."}, {"heading": "4 Using the Tool", "text": "The input of VolCE is an SMT formula where the theory T is restricted to the linear arithmetic theory. It can be regarded as a Boolean combination of linear inequalities. There are two input formats.\nFor the first format, the input formula is a Boolean formula \u03c6(b1, . . . , bn) in conjunctive normal form (CNF). And each Boolean variable bi can stand for a linear arithmetic constraint (LAC). The whole input file is an extension of the DIMACS format for SAT solving. An alternative input format is SMT-Lib style. Currently, VolCE supports the main features of the \u201cSMT-LIBv2\u201d syntax.\nVolCE has several command-line options:\n\u2013 -V asks the tool to call Vinci to compute the volume. \u2013 -P asks the tool to call PolyVest to approximate the volume. \u2013 -L asks the tool to call LattE to count integer solutions. \u2013 -w=NUMBER specifies the word length of variables in bit-wise representations. \u2013 -maxc=NUMBER sets the maximum sampling coefficient of PolyVest, which is\nan upper bound. \u2013 -minc=NUMBER sets the minimum sampling coefficient of PolyVest.\nFor more details about using the tool, see the manual. Here we just give an example to show its application to program analysis.\nExample from Program Analysis\nIn [13], we describe a program called getop() and analyze the execution frequency of its paths. For Path1, its path condition6 is:\n(NOT ((c = 32) OR (c = 9) OR (c = 10))) AND ((c != 46) AND ((c < 48) OR (c > 57)))\nHere c is a variable of type char; it can be regarded as an integer variable within the domain [-128..127]. For this path condition, we can compute the number of solutions using VolCE. With option -L (i.e., using LattE), the tool tells us that the constraint has 242 solutions. (We do not need to use the option -w=8, because the default word length is 8.) Given that the size of the whole search space is 256, we conclude that the frequency of executing Path1 is about 0.945 (242/256). This means, if the input string has only one character, most probably, the program will follow this path.\n6 The path condition is a set of constraints such that any input data satisfying these constraints will make the program execute along that path.\n7 Another path, Path2, has a more complicated path condition (omitted here, due to the lack of space). It involves 3 input variables c0, c1 and c2. Given the second path condition, our tool tells us that the number of solutions is 8085. So the path execution frequency is 8085/(256 \u2217 256 \u2217 256) which is roughly 0.00048."}, {"heading": "5 Experimental Results", "text": "In this section, we report some experimental results about our tool. The experiments are performed on a workstation with 3.40GHz Intel Core i7-2600 CPU and 8GB memory. In all experiments, the parameter Smax is set to 1600, and Smin set to 40. The domain of each numeric variable is set to [-128..127] by default.\nBenchmarks The following instances have been tested.\n\u2013 Instances generated from static program analysis. We analyzed the following programs: \u2022 abs: a function which calculates absolute value; \u2022 findmiddle: a function which finds the middle number among 3 numbers; \u2022 Space manage: a program related to space technology; \u2022 tritype: a program which determines the type of a triangle; \u2022 calDate: a function which converts the special date into a Julian date; \u2013 Instances from SMT-Lib, including: (1) the QF LRA benchmarks Arthan, atan; and (2) the QF LIA benchmarks bignum, simplebitadder, fischer, pigeon-hole, prime cone. \u2013 Random instances ran i c d: which have d numeric variables, i inequalities and c clauses. They are generated by randomly choosing coefficients of LACs and literals of clauses. The length of each clause is between 3 to 5.\nIn the following tables, \u201c\u2014\u201d means that the instance takes more than one hour to solve (or the tool runs out of memory).\nTable 1 shows the results of comparison between volume estimation and computation. \u201cDims\u201d represents the number of numeric variables in LACs. \u201cIneqs\u201d represents the number of LACs and also represents the number of boolean variables in the boolean skeleton. \u201cClauses\u201d represents the number of clauses in the boolean skeleton. \u201cBunches\u201d represents the number of feasible partial assignments obtained by VolCE and also represents the times of VolCE calling PolyVest or Vinci.\nObserve that VolCE with PolyVest is very efficient and the relative errors of approximation are small. When the dimension of instance grows to 8 or larger, VolCE with Vinci often fails to give an answer in one hour or depletes memory. Though \u201cVinci\u201d has an option to restrict its memory storage, as a tradeoff it will take much more time to solve, and still cannot solve instances within the timeout.\nTable 2 shows the results of our tools with two-round strategy on random instances. Column \u201cSample\u201d represents the average coefficient of the sample\n8\nsize of Si. In the original algorithm, this average value always equals to S = Smax = 1600. Values in column \u201cRatio\u201d are approximation of saved sample points by the two-round strategy. Obviously, the two-round strategy could save much time without losing much accuracy. The differences of the results between original and two-round strategy are usually less than 5%. Besides, the two-round strategy could save 93% to 97% sample points and save more than 90% time.\nTable 3 shows the results of experiments with some larger random instances. Note that the number of dimensions and bunches are the key parameters of the\n9\nscale of instances. The larger the number of dimensions or bunches, the more time the tool has to run. VolCE can handle instances around 30-dimensions in reasonable time and up to 50-dimensions with a few bunches.\nTable 4 are the results of counting integer solutions with LattE. It shows that LattE can handle some problems up to 17 dimensions. However, LattE cannot solve the random instance \u201cran 15 45 7\u201d. The inequalities in the instance are quite complicated."}, {"heading": "6 Related Works", "text": "There was little work on the counting of SMT solutions, until quite recently. Fredrikson and Jha [7] relate a set of privacy and confidentiality verification problems to the so-called model-counting satisfiability problem, and present an abstract decision procedure for it. They implemented this procedure for linearinteger arithmetic. Their tool is called countersat. It is not available to us.\nZhou et al. [18] propose a BDD-based search algorithm which reduces the number of conjunctions. For each conjunction, they propose a Monte-Carlo integration with a ray-based sampling strategy, which approximates the volume.\n10\nTheir tool is named RVC. It can handle formulas with up to 18 variables. But the running time is dozens of minutes.\nA different approach is described in [4]. It reduces an approximate version of #SMT to SMT. The approach does not need to modify existing SMT solvers. It has been applied to solve a value estimation problem for certain kind of probabilistic programs. We do not know how large the benchmarks are, and it is not clear about the quality of the approximation."}, {"heading": "7 Concluding Remarks", "text": "VolCE is a tool for computing and estimating the volume of the solution space (or counting the number of solutions), given a formula/constraint which is a Boolean combination of linear arithmetic inequalities. VolCE is very flexible to use. For medium sized SMT(LA) formulas, it can provide exact volume computation results or exact number of solutions. For larger SMT(LA) formulas, it can quickly perform volume estimation with high accuracy, due to the use of effective heuristics. We believe that the tool will be useful in a number of domains, such as program analysis and probabilistic verification."}, {"heading": "E Examples", "text": "Example 1 For the above Formula 1, we have two input files: VolCE style input (f1.vs) and SMT-LIBv2 input (f1.smt2).\nExecute the command:\n17\n% ./volce -P -V -L -w=0 examples/f1.smt2\nAnd we obtain the result:\nEnabled PolyVest. Enabled Vinci. Enabled LattE. Set word length to 0. Disabled default bounds since wo rd length <= 0. VolCE Directory: ... Working Directory: ...\n================================\nParsing smt2 file. Reading Input. Number of bool vars: 16 Number of clauses: 29 Number of numeric vars: 2 Number of linear constraints: 6\n================================\nBranches: 2 SATISFIABLE\n================================ =========== PolyVest =========== ================================\nFIRST ROUND 0 0.222875 * 2"}, {"heading": "1 0.24338 * 1", "text": "SEC & LAST ROUND 0 1600 0.252037 * 2 1 1600 0.250964 * 1\nTotal approximation: 0.755039\n================================\nThe total volume (PolyVest): 0.7 5503900\n================================ ============ Vinci ============= ================================\n0.25000000 * 2 0.25000000 * 1\n================================\nThe total volume (Vinci): 0.7500 0000\n================================ ============ LattE ============= ================================\n0 * 2 2 * 1\n================================\nThe total volume (LattE): 2\nAnalysis: Figure 4 shows the linear constraints in Formula 1. The plane is splitted into 4 areas, since b4, b5, b6, b7 are always True. The pair {b1, b3} determines the counted areas.\n\u2013 Area I: {b1 = True, b3 = True}. It has no lattice points. \u2013 Area II: {b1 = True, b3 = False}. It has 1 lattice point: {0, 1}. \u2013 Area III: {b1 = False, b3 = False}. It has 2 lattice points: {1, 0} and {1, 1}.\n18\n\u2013 Area IV: {b1 = False, b3 = True}. It has 1 lattice point: {0, 0}.\nThere are 3 Boolean solutions for Formula 1: {b1 = True, b2 = True, b3 = True}, {b1 = True, b2 = False, b3 = True}, and {b1 = False, b2 = True, b3 = False}. Thus the volume of the solution space is 2\u00d7 vol(AreaI) + vol(AreaIII) = 0.75. And there are 2\u00d7 0 + 2 = 2 integer solutions (lattice points).\nExample 2 Here is an exercise for young pupils: In the following square, there are 8 sub-areas. Color them so that the neighboring sub-areas use different colors. How many different coloring schemes are there?\nA D\nB\nC E\nF\nG\nH\nObviously, this problem can be regarded as a solution counting problem. The input consists of the following inequalities:\nxA 6= xB, xA 6= xD, xB 6= xC, xB 6= xD, xB 6= xE,\nxC 6= xE, xD 6= xE, xD 6= xF, xD 6= xG,\nxE 6= xG, xE 6= xH, xF 6= xG, xG 6= xH.\nWe assume that there are at most 4 colors, and execute the following command:\n19\n% ./volce -L -w=2 examples/coloring.smt2\nWe find that there are 768 solutions.\nExample 3 In [13], we describe a program called getop() and analyze the execution frequency of its paths. For Path1, its path condition7 is:\n(NOT ((c = 32) OR (c = 9) OR (c = 10))) AND ((c != 46) AND ((c < 48) OR (c > 57)))\nHere c is a variable of type char; it can be regarded as an integer variable within the domain [-128..127].\nFor the above path condition, we can compute the number of solutions by executing the command:\n% ./volce -L examples/program_analysis/getopPath1.smt2\nWe find that the path condition has 242 solutions. (We do not need to use the option -w=8, because the default word length is 8.)\nGiven that the size of the whole search space is 256, we conclude that the frequency of executing Path1 is about 0.945 (i.e., 242/256). This means, if the input string has only one character, most probably, the program will follow this path.\nAnother path, Path2, has the following path condition:\n((c0 = 32) OR (c0 = 9) OR (c0 = 10)) AND (NOT ((c1 = 32) OR (c1 = 9) OR (c1 = 10))) AND (NOT ((c1 != 46) AND ((c1 < 48) OR (c1 > 57)))) AND (NOT ((c2 >= 48) AND (c2 <= 57))) AND (NOT (c2 = 46))\nGiven this set of constraints, and using LattE, our tool tells us that the number of solutions is 8085. The executed command is:\n% ./volce -L examples/program_analysis/getopPath2.smt2\nSo the path execution frequency is 8085/(256\u2217256\u2217256) which is roughly 0.00048.\nExample 4 Hoare\u2019s program FIND takes an array A[N] and an integer as input, and partitions the array into two parts.\nAssume that N = 8. We may extract two execution paths from the program, and generate the path conditions. The first path condition is the following:\n(A[0] < A[3]); !(A[1] < A[3]); (A[3] < A[7]); !(A[3] < A[6]); !(A[2] < A[3]); !(A[3] < A[5]); !(A[3] < A[4]); (A[0] < A[4]); (A[6] < A[4]); (A[5] < A[4]).\n7 The path condition is a set of constraints such that any input data satisfying these constraints will make the program execute along that path.\n20\nSetting the word length to 4, we can find that the number of solutions is 4075920. The executed command is:\n% ./volce -L -w=4 examples/program_analysis/FINDpath1.smt2\nThe second path condition is a bit more complicated:\n!(A[0] < A[3]); (A[3] < A[7]); (A[3] < A[6]); (A[3] < A[5]); (A[3] < A[4]); !(A[1] < A[3]); (A[3] < A[2]); (A[3] < A[1]); (A[1] < A[0]); (A[2] < A[0]); !(A[0] < A[7]); !(A[4] < A[0]); (A[0] < A[6]); !(A[0] < A[5]); (A[1] < A[7]); (A[2] < A[7]); !(A[7] < A[5]); !(A[1] < A[5]); !(A[2] < A[5]); (A[5] < A[2]); (A[2] < A[1]).\nExecuting the command:\n% ./volce -L -w=4 examples/program_analysis/FINDpath2.smt2\nwe find that the number of solutions is 87516. So, the first path is executed much more frequently than the second one. (We assume that the input space is evenly distributed.)\nExample 5 Let us try a randomly generated example (ran 5 20 8.vs). It has 5 Boolean variables, 8 numeric variable, 20 clauses and 5 linear constraints.\nExecute the command:\n% ./volce -P -V -w=4 examples/ran/ran_5_20_8.vs\nAnd we obtain the result:\nEnabled PolyVest. Enabled Vinci. Set word length to 4. VolCE Directory: ... Working Directory: ...\n================================\nReading Input. Number of bool vars: 5 Number of clauses: 20 Number of numeric vars: 8 Number of linear constraints: 5\n================================\nBranches: 1\nSATISFIABLE\n================================ =========== PolyVest =========== ================================\nFIRST ROUND 0 8.38972e+06 * 1\nSEC & LAST ROUND 0 1600 7.88093e+06 * 1\nTotal approximation: 7.88093e+06\n================================\nThe total volume (PolyVest): 788\n21\n0930.00000000\n================================ ============ Vinci ============= ================================\n7970738.22355500 * 1\n================================\nThe total volume (Vinci): 797073 8.22355500"}], "references": [{"title": "Hit-and-run algorithms for the identification of nonredundant linear inequalities", "author": ["H.C.P. Berbee", "C.G.E. Boender", "A.H.G. Rinnooy Ran", "C.L. Scheffer", "R.L. Smith", "J. Telgen"], "venue": "Mathematical Programming,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1987}, {"title": "Exact volume computation for polytopes: a practical study", "author": ["B. B\u00fceler", "A. Enge", "K. Fukuda"], "venue": "In Polytopes \u2013 combinatorics and computation,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1998}, {"title": "Approximate counting in SMT and value estimation for probabilistic programs", "author": ["D. Chistikov", "R. Dimitrova", "R. Majumdar"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Effective lattice point counting in rational convex polytopes", "author": ["J.A. De Loera"], "venue": "J. of Symbolic Computation,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2004}, {"title": "A random polynomial time algorithm for approximating the volume of convex bodies", "author": ["M. Dyer", "A. Frieze", "R. Kannan"], "venue": "Proc. ACM SToC,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1989}, {"title": "a new approach for analyzing privacy properties", "author": ["M. Fredrikson", "S. Jha. Satisfiability modulo counting"], "venue": "Proc. CSL-LICS\u201914, Article No. 42", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "A fast and practical method to estimate volumes of convex polytopes", "author": ["C. Ge", "F. Ma", "J. Zhang"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Probabilistic symbolic execution", "author": ["J. Geldenhuys", "M.B. Dwyer", "W. Visser"], "venue": "Proc. ISSTA 2012,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Geometric Algorithms and Combinatorial Optimization", "author": ["M. Gr\u00f6tschel", "L. Lov\u00e1sz", "A. Schrijver"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1993}, {"title": "Program analysis: from qualitative analysis to quantitative analysis", "author": ["S. Liu", "J. Zhang"], "venue": "Proc. ICSE 2011 (NIER track),", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "Simulated annealing in convex bodies and an O\u2217(n4) volume algorithm", "author": ["L. Lov\u00e1sz", "S. Vempala"], "venue": "J. of Computer and System Sci.,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2006}, {"title": "Volume computation for Boolean combination of linear arithmetic constraints", "author": ["F. Ma", "S. Liu", "J. Zhang"], "venue": "Proc. CADE-22, LNCS 5663,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2009}, {"title": "On the complexity of derivation in propositional calculus. In: Slisenko, A.O. (ed.) Structures in Constructive Mathematics and Mathematical Logic, Part II, Seminars in Mathematics (translated from Russian), pp.115\u2013125", "author": ["G.S. Tseitin"], "venue": "Steklov Mathematical Institute,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1968}], "referenceMentions": [{"referenceID": 11, "context": "In [13], we studied the counting version of SMT solving, and presented some techniques for computing the size of the solution space efficiently.", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "It has recently gained much attention in the software engineering community [11,9].", "startOffset": 76, "endOffset": 82}, {"referenceID": 7, "context": "It has recently gained much attention in the software engineering community [11,9].", "startOffset": 76, "endOffset": 82}, {"referenceID": 11, "context": "The prototype tool presented in [13] computes the exact volume of solution space.", "startOffset": 32, "endOffset": 36}, {"referenceID": 11, "context": "Recently we implemented a tool to estimate the volume of polytopes; and integrated it into the framework of [13].", "startOffset": 108, "endOffset": 112}, {"referenceID": 11, "context": "Recall that in [13], a consistent conjunction of linear constraints that satisfies the boolean skeleton of the SMT(LA) formula is called a feasible assignment.", "startOffset": 15, "endOffset": 19}, {"referenceID": 11, "context": "For more details of the main algorithm, see [13].", "startOffset": 44, "endOffset": 48}, {"referenceID": 1, "context": "In addition to MiniSat and lp solve, VolCE calls Vinci [3] and LattE [5] to help compute the size of the solution space.", "startOffset": 55, "endOffset": 58}, {"referenceID": 3, "context": "In addition to MiniSat and lp solve, VolCE calls Vinci [3] and LattE [5] to help compute the size of the solution space.", "startOffset": 69, "endOffset": 72}, {"referenceID": 6, "context": "Moreover, we implemented a tool for estimating the volume of convex polytopes, called PolyVest [8].", "startOffset": 95, "endOffset": 98}, {"referenceID": 11, "context": "The performance of volume computation packages for convex polytopes is the bottleneck of the prototype tool in [13].", "startOffset": 111, "endOffset": 115}, {"referenceID": 4, "context": "proposed a polynomial time randomized approximation algorithm (Multiphase Monte-Carlo Algorithm) [6].", "startOffset": 97, "endOffset": 100}, {"referenceID": 10, "context": "The theoretical complexity of the original algorithm is O\u2217(n23)5, and is recently reduced to O\u2217(n4) [12].", "startOffset": 100, "endOffset": 104}, {"referenceID": 6, "context": "Based on the Multiphase Monte-Carlo method, we implemented our own tool PolyVest (Polytope Volume Estimation) to estimate the volume of convex polytopes [8].", "startOffset": 153, "endOffset": 156}, {"referenceID": 6, "context": "For more details, one can refer to [8].", "startOffset": 35, "endOffset": 38}, {"referenceID": 8, "context": "This can be achieved by applying the Shallow-\u03b2-Cut Ellipsoid Method [10].", "startOffset": 68, "endOffset": 72}, {"referenceID": 0, "context": "Hit-and-run method is a random walk which can generate points with almost uniform distribution in polynomial time [1].", "startOffset": 114, "endOffset": 117}, {"referenceID": 11, "context": ") The basic procedure is quite similar to that of volume computation as described in [13].", "startOffset": 85, "endOffset": 89}, {"referenceID": 11, "context": "As in [13], a consistent conjunction of linear constraints that satisfies the boolean skeleton of the SMT(LRA) formula is called a feasible (partial) assignment.", "startOffset": 6, "endOffset": 10}, {"referenceID": 11, "context": "Note that the \u201cvolume computation in bunches\u201d strategy in [13] can also be applied in volume estimation.", "startOffset": 58, "endOffset": 62}, {"referenceID": 11, "context": "Example from Program Analysis In [13], we describe a program called getop() and analyze the execution frequency of its paths.", "startOffset": 33, "endOffset": 37}, {"referenceID": 5, "context": "Fredrikson and Jha [7] relate a set of privacy and confidentiality verification problems to the so-called model-counting satisfiability problem, and present an abstract decision procedure for it.", "startOffset": 19, "endOffset": 22}, {"referenceID": 2, "context": "A different approach is described in [4].", "startOffset": 37, "endOffset": 40}], "year": 2015, "abstractText": "There are already quite a few tools for solving the Satisfiability Modulo Theories (SMT) problems. In this paper, we present VolCE, a tool for counting the solutions of SMT constraints, or in other words, for computing the volume of the solution space. Its input is essentially a set of Boolean combinations of linear constraints, where the numeric variables are either all integers or all reals, and each variable is bounded. The tool extends SMT solving with integer solution counting and volume computation/estimation for convex polytopes. Effective heuristics are adopted, which enable the tool to deal with high-dimensional problem instances efficiently and accurately.", "creator": "LaTeX with hyperref package"}}}