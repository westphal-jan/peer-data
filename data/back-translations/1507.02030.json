{"id": "1507.02030", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Jul-2015", "title": "Beyond Convexity: Stochastic Quasi-Convex Optimization", "abstract": "Stochastic convex optimization is a fundamental and well-researched primitive in machine learning. It is well known that convex and Lipschitz functions can be efficiently minimized by stochastic gradient descent (SGD). The Normalized Gradient Descent (NGD) algorithm is an adaptation of the gradient descent that is updated according to the direction of the gradients, not the gradient itself. In this paper, we analyze a stochastic version of NGD and prove its convergence to a global minimum for a broader class of functions: We require that the functions be quasi-convex and local-Lipschitz. Quasi-convexity expands the notion of unimodality to multidimensions and allows certain types of saddle points that represent a known hurdle to first-class optimization methods such as gradient descent. Local-Lipschitz functions are only required to optimize Lipschitz around the optimum point in a small region.", "histories": [["v1", "Wed, 8 Jul 2015 05:47:42 GMT  (132kb,D)", "https://arxiv.org/abs/1507.02030v1", null], ["v2", "Mon, 26 Oct 2015 08:14:31 GMT  (132kb,D)", "http://arxiv.org/abs/1507.02030v2", null], ["v3", "Wed, 28 Oct 2015 07:00:56 GMT  (132kb,D)", "http://arxiv.org/abs/1507.02030v3", null]], "reviews": [], "SUBJECTS": "cs.LG math.OC", "authors": ["elad hazan", "kfir y levy", "shai shalev-shwartz"], "accepted": true, "id": "1507.02030"}, "pdf": {"name": "1507.02030.pdf", "metadata": {"source": "CRF", "title": "Beyond Convexity: Stochastic Quasi-Convex Optimization", "authors": ["Elad Hazan", "Kfir Y. Levy", "Shai Shalev-Shwartz"], "emails": ["ehazan@cs.princeton.edu.", "kfiryl@tx.technion.ac.il.", "shais@cs.huji.ac.il."], "sections": [{"heading": null, "text": "The Normalized Gradient Descent (NGD) algorithm, is an adaptation of Gradient Descent, which updates according to the direction of the gradients, rather than the gradients themselves. In this paper we analyze a stochastic version of NGD and prove its convergence to a global minimum for a wider class of functions: we require the functions to be quasi-convex and locally-Lipschitz. Quasi-convexity broadens the concept of unimodality to multidimensions and allows for certain types of saddle points, which are a known hurdle for first-order optimization methods such as gradient descent. Locally-Lipschitz functions are only required to be Lipschitz in a small region around the optimum. This assumption circumvents gradient explosion, which is another known hurdle for gradient descent variants.\nInterestingly, unlike the vanilla SGD algorithm, the stochastic normalized gradient descent algorithm provably requires a minimal minibatch size."}, {"heading": "1 Introduction", "text": "The benefits of using the Stochastic Gradient Descent (SGD) scheme for learning could not be stressed enough. For convex and Lipschitz objectives, SGD is guaranteed to find an - optimal solution within O(1/ 2) iterations and requires only an unbiased estimator for the gradient, which is obtained with only one (or a few) data samples. However, when applied to non-convex problems several drawbacks are revealed. In particular, SGD is widely used for deep learning Bengio (2009), one of the most interesting fields where stochastic non-convex optimization problems arise. Often, the objective in these kind of problems demonstrates\n\u2217Princeton University; ehazan@cs.princeton.edu. \u2020Technion; kfiryl@tx.technion.ac.il. \u2021The Hebrew University; shais@cs.huji.ac.il.\nar X\niv :1\n50 7.\n02 03\n0v 3\n[ cs\n.L G\n] 2\n8 O\nct 2\ntwo extreme phenomena: on the one hand plateaus, i.e., regions with very small gradients; and on the other hand sharp cliffs, i.e., exceedingly high gradients. As is expected, applying SGD to these problems is often reported to yield unsatisfactory results.\nIn this paper we analyze a stochastic version of the Normalized Gradient Descent (NGD) algorithm, which we denote by SNGD. Each iteration of SNGD is as simple and efficient as SGD, but is much more appropriate for non-convex optimization problems, overcoming some of the pitfalls that SGD may encounter. Particularly, we define a family of locally-quasiconvex and locally-Lipschitz functions, and prove that SNGD is suitable for optimizing such objectives.\nLocal-Quasi-convexity is a generalization of unimodal functions to multidimensions, which includes quasi-convex, and convex functions as a subclass. Locally-Quasi-convex functions allow for certain types of plateaus and saddle points which are difficult for SGD and other gradient descent variants. Local-Lipschitzness is a generalization of Lipschitz functions that only assumes Lipschitzness in a small region around the minima, whereas farther away the gradients may be unbounded. Gradient explosion is, thus, another difficulty that is successfully tackled by SNGD and poses difficulties for other stochastic gradient descent variants.\nOur contributions:\n\u2022 We introduce local-quasi-convexity, a property that extends quasi-convexity and captures unimodal functions which are not quasi-convex. We prove that NGD finds an -optimal minimum for such functions within O(1/ 2) iterations. As a special case, we show that the above rate can be attained for quasi-convex functions that are Lipschitz in an \u2126( )-region around the optimum (gradients may be unbounded outside this region). For objectives that are also smooth in an \u2126( \u221a )-region around the optimum,\nwe prove a faster rate of O(1/ ).\n\u2022 We introduce a new setup: stochastic optimization of locally-quasi-convex functions; and show that this setup captures Generalized Linear Models (GLM) regression, McCullagh and Nelder (1989). For this setup, we devise a stochastic version of NGD (SNGD), and show that it converges within O(1/ 2) iterations to an -optimal minimum.\n\u2022 The above positive result requires that at each iteration of SNGD, the gradient should be estimated using a minibatch of a minimal size. We provide a negative result showing that if the minibatch size is too small then the algorithm might indeed diverge.\n\u2022 We report experimental results supporting our theoretical guarantees and demonstrate an accelerated convergence attained by SNGD."}, {"heading": "1.1 Related Work", "text": "Quasi-convex optimization problems arise in numerous fields, spanning economics Varian (1985); Laffont and Martimort (2009), industrial organization Wolfstetter (1999) , and computer vision Ke and Kanade (2007). It is well known that quasi-convex optimization tasks\ncan be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996).\nThere exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al. (1972); Khabibullin (1977); Sikorski (1986). A pioneering paper by Nesterov (1984), was the first to suggest an efficient algorithm, namely Normalized Gradient Descent, and prove that this algorithm attains -optimal solution within O(1/ 2) iterations given a differentiable quasi-convex objective. This work was later extended by Kiwiel (2001), showing that the same result may be achieved assuming upper semi-continuous quasi-convex objectives. In Konnov (2003) it was shown how to attain faster rates for quasi-convex optimization, but they assume to know the optimal value of the objective, an assumption that generally does not hold in practice.\nAmong the deep learning community there have been several attempts to tackle gradientexplosion/plateaus. Ideas spanning gradient-clipping Pascanu et al. (2013), smart initialization Doya (1993), and more, Martens and Sutskever (2011), have shown to improve training in practice. Yet, non of these works provides a theoretical analysis showing better convergence guarantees.\nTo the best of our knowledge, there are no previous results on stochastic versions of NGD, neither results regarding locally-quasi-convex/locally-Lipschitz functions.\nGradient descent with fixed step sizes, including its stochastic variants, is known to perform poorly when the gradients are too small in a plateau area of the function, or alternatively when the other extreme happens: gradient explosions. These two phenomena have been reported in certain types of non-convex optimization, such as training of deep networks.\nFigure 1 depicts a one-dimensional family of functions for which GD behaves provably poorly. With a large step-size, GD will hit the cliffs and then oscillate between the two boundaries. Alternatively, with a small step size, the low gradients will cause GD to miss the middle valley which has constant size of 1/2. On the other hand, this exact function is quasi-convex and locally-Lipschitz, and hence the NGD algorithm provably converges to the optimum quickly."}, {"heading": "2 Definitions and Notations", "text": "We use \u2016 \u00b7 \u2016 to denote the Euclidean norm. Bd(x, r) denotes the d dimensional Euclidean ball of radius r, centered around x, and Bd := Bd(0, 1). [N ] denotes the set {1, . . . , N}.\nFor simplicity, throughout the paper we always assume that functions are differentiable (but if not stated explicitly, we do not assume any bound on the norm of the gradients).\nDefinition 2.1. (Local-Lipschitzness and Local-Smoothness) Let z \u2208 Rd, G, \u2265 0. A function f : K 7\u2192 R is called (G, , z)-Locally-Lipschitz if for every x,y \u2208 Bd(z, ), we have |f(x)\u2212 f(y)| \u2264 G\u2016x\u2212 y\u2016 . Similarly, the function is (\u03b2, , z)-locally-smooth if for every x,y \u2208 Bd(z, ) we have,\n|f(y)\u2212 f(x)\u2212 \u3008\u2207f(y),x\u2212 y\u3009| \u2264 \u03b2 2 \u2016x\u2212 y\u20162 .\nNext we define quasi-convex functions:\nDefinition 2.2. (Quasi-Convexity) We say that a function f : Rd 7\u2192 R is quasi-convex if \u2200x,y \u2208 Rd, such that f(y) \u2264 f(x), it follows that\n\u3008\u2207f(x),y \u2212 x\u3009 \u2264 0 .\nWe further say that f is strictly-quasi-convex, if it is quasi-convex and its gradients vanish only at the global minima, i.e., \u2200y : f(y) > minx\u2208Rd f(x) \u21d2 \u2016\u2207f(y)\u2016 > 0.\nInformally, the above characterization states that the (opposite) gradient of a quasiconvex function directs us in a global descent direction. Following is an equivalent (more common) definition:\nDefinition 2.3. (Quasi-Convexity) We say that a function f : Rd 7\u2192 R is quasi-convex if any \u03b1-sublevel-set of f is convex, i.e., \u2200\u03b1 \u2208 R the set\nL\u03b1(f) = {x : f(x) \u2264 \u03b1} is convex.\nThe equivalence between the above definitions can be found in Boyd and Vandenberghe (2004), for completeness we provide a proof in Appendix A. During this paper we denote the sublevel-set of f at x by\nSf (x) = {y : f(y) \u2264 f(x)} . (1)"}, {"heading": "3 Local-Quasi-Convexity", "text": "Quasi-convexity does not fully capture the notion of unimodality in several dimension. As an example let x = (x1, x2) \u2208 [\u221210, 10]2, and consider the function\ng(x) = (1 + e\u2212x1)\u22121 + (1 + e\u2212x2)\u22121 . (2)\nIt is natural to consider g as unimodal since it acquires no local minima but for the unique global minima at x\u2217 = (\u221210,\u221210). However, g is not quasi-convex: consider the points x = (log 16,\u2212 log 4),y = (\u2212 log 4, log 16), which belong to the 1.2-sub-level set, their average does not belong to the same sub-level-set since g(x/2 + y/2) = 4/3.\nQuasi-convex functions always enable us to explore, meaning that the gradient always directs us in a global descent direction. Intuitively, from an optimization point of view, we only need such a direction whenever we do not exploit, i.e., whenever we are not approximately optimal.\nIn what follows we define local-quasi-convexity, a property that enables us to either explore/exploit. This property 1 captures a wider class of unimodal function (such as g above) rather than mere quasi-convexity. Later we justify this definition by showing that it captures Generalized Linear Models (GLM) regression, see McCullagh and Nelder (1989); Kalai and Sastry (2009).\nDefinition 3.1. (Local-Quasi-Convexity) Let x, z \u2208 Rd, \u03ba, > 0. We say that f : Rd 7\u2192 R is ( , \u03ba, z)-Strictly-Locally-Quasi-Convex (SLQC) in x, if at least one of the following applies:\n1. f(x)\u2212 f(z) \u2264 .\n2. \u2016\u2207f(x)\u2016 > 0, and for every y \u2208 B(z, /\u03ba) it holds that \u3008\u2207f(x),y \u2212 x\u3009 \u2264 0 . Note that if f is G-Lispschitz and strictly-quasi-convex function, then \u2200x, z \u2208 Rd, \u2200 > 0, it holds that f is ( , G, z)-SLQC in x. Recalling the function g that appears in Equation (2), then it can be shown that \u2200 \u2208 (0, 1], \u2200x \u2208 [\u221210, 10]2 then this function is ( , 1,x\u2217)-SLQC in x, where x\u2217 = (\u221210,\u221210) (see Appendix B)."}, {"heading": "3.1 Generalized Linear Models (GLM)", "text": ""}, {"heading": "3.1.1 The Idealized GLM", "text": "In this setup we have a collection of m samples {(xi, yi)}mi=1 \u2208 Bd \u00d7 [0, 1], and an activation function \u03c6 : R 7\u2192 R. We are guaranteed to have w\u2217 \u2208 Rd such that: yi = \u03c6\u3008w\u2217,xi\u3009, \u2200i \u2208 [m] (we denote \u03c6\u3008w,x\u3009 := \u03c6(\u3008w,x\u3009)). The performance of a predictor w \u2208 Rd, is measured by the average square error over all samples.\ne\u0302rrm(w) = 1\nm m\u2211 i=1 (yi \u2212 \u03c6\u3008w,xi\u3009)2 . (3)\nIn Kalai and Sastry (2009) it is shown that the Perceptron problem with \u03b3-margin is a private case of GLM regression.\nThe sigmoid function \u03c6(z) = (1 + e\u2212z)\u22121 is a popular activation function in the field of deep learning. The next lemma states that in the idealized GLM problem with sigmoid\n1Definition 3.1 can be generalized in a manner that captures a broader range of scenarions (e.g. the Perceptron problem), we defer this definition to Appendix H.\nactivation, then the error function is SLQC (but not quasi-convex). As we will see in Section 4 this implies that Algorithm 1 finds an -optimal minima of e\u0302rrm(w) within poly(1/ ) iterations.\nLemma 3.1. Consider the idealized GLM problem with the sigmoid activation, and assume that \u2016w\u2217\u2016 \u2264 W . Then the error function appearing in Equation (3) is ( , eW ,w\u2217)-SLQC in w, \u2200 > 0, \u2200w \u2208 Bd(0,W ) (But it is not generally quasi-convex).\nWe defer the proof to Appendix C"}, {"heading": "3.1.2 The Noisy GLM", "text": "In the noisy GLM setup (see McCullagh and Nelder (1989); Kalai and Sastry (2009)), we may draw i.i.d. samples {(xi, yi)}mi=1 \u2208 Bd \u00d7 [0, 1], from an unknown distribution D. We assume that there exists a predictor w\u2217 \u2208 Rd such that E(x,y)\u223cD[y|x] = \u03c6\u3008w\u2217,x\u3009, where \u03c6 is an activation function. Given w \u2208 Rd we define its expected error as follows:\nE(w) = E(x,y)\u223cD(y \u2212 \u03c6\u3008w,x\u3009)2 ,\nand it can be shown that w\u2217 is a global minima of E . We are interested in schemes that obtain an -optimal minima to E , within poly(1/ ) samples and optimization steps. Given m samples from D, their empirical error e\u0302rrm(w), is defined as in Equation (3).\nThe following lemma states that in this setup, letting m = \u2126(1/ 2), then e\u0302rrm is SLQC with high probability. This property will enable us to apply Algorithm 2, to obtain an -optimal minima to E , within poly(1/ ) samples from D, and poly(1/ ) optimization steps. Lemma 3.2. Let \u03b4, \u2208 (0, 1). Consider the noisy GLM problem with the sigmoid activation, and assume that \u2016w\u2217\u2016 \u2264 W . Given a fixed point w \u2208 B(0,W ), then w.p.\u2265 1 \u2212 \u03b4, after m \u2265 8e2W (W+1)2\n2 log(1/\u03b4) samples, the empirical error function appearing in Equation (3) is\n( , eW , w\u2217)-SLQC in w.\nNote that if we had required the SLQC to hold \u2200w \u2208 B(0,W ), then we would need the number of samples to depend on the dimension, d, which we would like to avoid. Instead, we require SLQC to hold for a fixed w. This satisfies the conditions of Algorithm 2, enabling us to find an -optimal solution with a sample complexity that is independent of the dimension. We defer the proof of Lemma 3.2 to Appendix D"}, {"heading": "4 NGD for Locally-Quasi-Convex Optimization", "text": "Here we present the NGD algorithm, and prove the convergence rate of this algorithm for SLQC objectives. Our analysis is simple, enabling us to extend the convergence rate presented in Nesterov (1984) beyond quasi-convex functions. We then show that quasiconvex and locally-Lipschitz objective are SLQC, implying that NGD converges even if the gradients are unbounded outside a small region around the minima. For quasi-convex and locally-smooth objectives, we show that NGD attains a faster convergence rate.\nAlgorithm 1 Normalized Gradient Descent (NGD)\nInput: #Iterations T , x1 \u2208 Rd, learning rate \u03b7 for t = 1 . . . T do\nUpdate:\nxt+1 = xt \u2212 \u03b7g\u0302t where gt = \u2207f(xt), g\u0302t = gt \u2016gt\u2016\nend for Return: x\u0304T = arg min{x1,...,xT } f(xt)\nNGD is presented in Algorithm 1. NGD is similar to GD, except we normalize the gradients. It is intuitively clear that to obtain robustness to plateaus (where the gradient can be arbitrarily small) and to exploding gradients (where the gradient can be arbitrarily large), one must ignore the size of the gradient. It is more surprising that the information in the direction of the gradient suffices to guarantee convergence.\nFollowing is the main theorem of this section:\nTheorem 4.1. Fix > 0, let f : Rd 7\u2192 R, and x\u2217 \u2208 arg minx\u2208Rd f(x). Given that f is ( , \u03ba,x\u2217)-SLQC in every x \u2208 Rd. Then running the NGD algorithm with T \u2265 \u03ba2\u2016x1 \u2212 x\u2217\u20162/ 2, and \u03b7 = /\u03ba, we have that: f(x\u0304T )\u2212 f(x\u2217) \u2264 .\nTheorem 4.1 states that (\u00b7, \u00b7,x\u2217)-SLQC functions admit poly(1/ ) convergence rate using NGD. The intuition behind this lies in Definition 3.1, which asserts that at a point x either the (opposite) gradient points out a global optimization direction, or we are already -optimal. Note that the requirement of ( , \u00b7, \u00b7)-SLQC in any x is not restrictive, as we have seen in Section 3, there are interesting examples of functions that admit this property \u2200 \u2208 [0, 1], and for any x.\nFor simplicity we have presented NGD for unconstrained problems. Using projections we can easily extend the algorithm and its analysis for constrained optimization over convex sets. This will enable to achieve convergence of O(1/ 2) for the objective presented in Equation (2), and the idealized GLM problem presented in Section 3.1.1.\nWe are now ready to prove Theorem 4.1:\nProof of Theorem 4.1. First note that if the gradient of f vanishes at xt, then by the SLQC assumption we must have that f(xt)\u2212f(x\u2217) \u2264 . Assume next that we perform T iterations and the gradient of f at xt never vanishes in these iterations. Consider the update rule of NGD (Algorithm 1), then by standard algebra we get,\n\u2016xt+1 \u2212 x\u2217\u20162 = \u2016xt \u2212 x\u2217\u20162 \u2212 2\u03b7\u3008g\u0302t,xt \u2212 x\u2217\u3009+ \u03b72 .\nAssume that \u2200t \u2208 [T ] we have f(xt)\u2212 f(x\u2217) > . Take y = x\u2217 + ( /\u03ba) g\u0302t, and observe that \u2016y\u2212x\u2217\u2016 \u2264 /\u03ba. The ( , \u03ba,x\u2217)-SLQC assumption implies that \u3008g\u0302t,y\u2212xt\u3009 \u2264 0, and therefore\n\u3008g\u0302t,x\u2217 + ( /\u03ba) g\u0302t \u2212 xt\u3009 \u2264 0 \u21d2 \u3008g\u0302t,xt \u2212 x\u2217\u3009 \u2265 /\u03ba .\nSetting \u03b7 = /\u03ba, the above implies,\n\u2016xt+1 \u2212 x\u2217\u20162 \u2264 \u2016xt \u2212 x\u2217\u20162 \u2212 2\u03b7 /\u03ba+ \u03b72 = \u2016xt \u2212 x\u2217\u20162 \u2212 2/\u03ba2 .\nThus, after T iterations for which f(xt)\u2212 f(x\u2217) > we get\n0 \u2264 \u2016xT+1 \u2212 x\u2217\u20162 \u2264 \u2016x1 \u2212 x\u2217\u20162 \u2212 T 2/\u03ba2 ,\nTherefore, we must have T \u2264 \u03ba2\u2016x1 \u2212 x\u2217\u20162/ 2 ."}, {"heading": "4.1 Locally-Lipschitz/Smooth Quasi-Convex Optimization", "text": "It can be shown that strict-quasi-convexity and (G, /G,x\u2217)-local-Lipschitzness of f implies that f is ( , G,x\u2217)-SLQC \u2200x \u2208 Rd, \u2200 \u2265 0, and x\u2217 \u2208 arg minx\u2208Rd f(x) (see Appendix E). Therefore the following is a direct corollary of Theorem 4.1:\nCorollary 4.1. Fix > 0, let f : Rd 7\u2192 R, and x\u2217 \u2208 arg minx\u2208Rd f(x). Given that f is strictly quasi-convex and (G, /G,x\u2217)-locally-Lipschitz. Then running the NGD algorithm with T \u2265 G2\u2016x1 \u2212 x\u2217\u20162/ 2, and \u03b7 = /G, we have that: f(x\u0304T )\u2212 f(x\u2217) \u2264 .\nIn case f is also locally-smooth, we state an even faster rate:\nTheorem 4.2. Fix > 0, let f : Rd 7\u2192 R, and x\u2217 \u2208 arg minx\u2208Rd f(x). Given that f is strictly quasi-convex and (\u03b2, \u221a 2 /\u03b2,x\u2217)-locally-smooth. Then running the NGD algorithm\nwith T \u2265 \u03b2\u2016x1 \u2212 x\u2217\u20162/2 , and \u03b7 = \u221a 2 /\u03b2, we have that: f(x\u0304T )\u2212 f(x\u2217) \u2264 .\nWe prove Theorem 4.2 in Appendix F.\nRemark 1. The above corollary (resp. theorem) implies that f could have arbitrarily large gradients and second derivatives outside B(x\u2217, /G) (resp. B(x\u2217, \u221a 2 /\u03b2)), yet NGD is still ensured to output an -optimal point within G2\u2016x1 \u2212 x\u2217\u20162/ 2 (resp. \u03b2\u2016x1 \u2212 x\u2217\u20162/2 ) iterations. We are not familiar with a similar guarantee for GD even in the convex case."}, {"heading": "5 SNGD for Stochastic SLQC Optimization", "text": "Here we describe the setting of stochastic SLQC optimization. Then we describe our SNGD algorithm which is ensured to yield an -optimal solution within poly(1/ ) queries. We also show that the (noisy) GLM problem, described in Section 3.1.2 is an instance of stochastic SLQC optimization, allowing us to provably solve this problem within poly(1/ ) samples and optimization steps using SNGD.\nAlgorithm 2 Stochastic Normalized Gradient Descent (SNGD)\nInput: #Iterations T , x1 \u2208 Rd, learning rate \u03b7, minibatch size b for t = 1 . . . T do\nSample: {\u03c8i}bi=1 \u223c Db, and define,\nft(x) = 1\nb b\u2211 i=1 \u03c8i(x)\nUpdate:\nxt+1 = xt \u2212 \u03b7g\u0302t where gt = \u2207ft(xt), g\u0302t = gt \u2016gt\u2016\nend for Return: x\u0304T = arg min{x1,...,xT } ft(xt)\nThe stochastic SLQC optimization Setup: Consider the problem of minimizing a function f : Rd 7\u2192 R, and assume there exists a distribution over functions D, such that:\nf(x) := E\u03c8\u223cD[\u03c8(x)] .\nWe assume that we may access f by randomly sampling minibatches of size b, and querying the gradients of these minibatches. Thus, upon querying a point xt \u2208 Rd, a random minibatch {\u03c8i}bi=1 \u223c Db is sampled, and we receive \u2207ft(xt), where ft(x) = 1b \u2211b i=1 \u03c8i(x). We make the following assumption regarding the minibatch averages:\nAssumption 5.1. Let T, , \u03b4 > 0, x\u2217 \u2208 arg minx\u2208Rd f(x). There exists \u03ba > 0, and a function b0 : R3 7\u2192 R, that for b \u2265 b0( , \u03b4, T ) then w.p.\u2265 1 \u2212 \u03b4 and \u2200t \u2208 [T ], the minibatch average ft(x) = 1 b \u2211b i=1 \u03c8i(x) is ( , \u03ba,x\n\u2217)-SLQC in xt. Moreover, we assume |ft(x)| \u2264 M, \u2200t \u2208 [T ],x \u2208 Rd .\nNote that we assume that b0 = poly(1/ , log(T/\u03b4)).\nJustification of Assumption 5.1 Noisy GLM regression (see Section 3.1.2), is an interesting instance of stochastic optimization problem where Assumption 5.1 holds. Indeed according to Lemma 3.2, given , \u03b4, T > 0, then for b \u2265 \u2126(log(T/\u03b4)/ 2) samples2, the average minibatch function is ( , \u03ba,x\u2217)-SLQC in xt, \u2200t \u2208 [T ], w.p.\u2265 1\u2212 \u03b4.\nLocal-quasi-convexity of minibatch averages is a plausible assumption when we optimize an expected sum of quasi-convex functions that share common global minima (or when the different global minima are close by). As seen from the Examples presented in Equation (2),\n2In fact, Lemma 3.2 states that for b = \u2126(log(1/\u03b4)/ 2), then the error function is SLQC in a single decision point. Using the union bound we can show that for b = \u2126(log(T/\u03b4)/ 2) it holds for T decision points\nand in Sections 3.1.1, 3.1.2, this sum is generally not quasi-convex, but is more often locallyquasi-convex.\nNote that in the general case when the objective is a sum of quasi-convex functions, the number of local minima of such objective may grow exponentially with the dimension d, see Auer et al. (1996). This might imply that a general setup where each \u03c8 \u223c D is quasi-convex may be generally hard."}, {"heading": "5.1 Main Results", "text": "SNGD is presented in Algorithm 2. SNGD is similar to SGD, except we normalize the gradients. The normalization is crucial in order to take advantage of the SLQC assumption, and in order to overcome the hurdles of plateaus and cliffs. Following is our main theorem:\nTheorem 5.1. Fix \u03b4, , G,M, \u03ba > 0. Suppose we run SNGD with T \u2265 \u03ba2\u2016x1 \u2212 x\u2217\u20162/ 2 iterations, \u03b7 = /\u03ba, and b \u2265 max{M2 log(4T/\u03b4)\n2 2 , b0( , \u03b4, T )} . Assume that for b \u2265 b0( , \u03b4, T )\nthen w.p.\u2265 1 \u2212 \u03b4 and \u2200t \u2208 [T ], the function ft defined in the algorithm is M-bounded, and is also ( , \u03ba,x\u2217)-SLQC in xt. Then, with probability of at least 1 \u2212 2\u03b4, we have that f(x\u0304T )\u2212 f(x\u2217) \u2264 3 .\nWe prove of Theorem 5.1 at the end of this section.\nRemark 2. Since strict-quasi-convexity and (G, /G,x\u2217)-local-Lipschitzness are equivalent to SLQC (App. E), the theorem implies that f could have arbitrarily large gradients outside B(x\u2217, /G), yet SNGD is still ensured to output an -optimal point within G2\u2016x1 \u2212 x\u2217\u20162/ 2 iterations. We are not familiar with a similar guarantee for SGD even in the convex case.\nRemark 3. Theorem 5.1 requires the minibatch size to be \u2126(1/ 2). In the context of learning, the number of functions, n, corresponds to the number of training examples. By standard sample complexity bounds, n should also be order of 1/ 2. Therefore, one may wonder, if the size of the minibatch should be order of n. This is not true, since the required training set size is 1/ 2 times the VC dimension of the hypothesis class. In many practical cases, the VC dimension is more significant than 1/ 2, and therefore n will be much larger than the required minibatch size. The reason our analysis requires a minibatch of size 1/ 2, without the VC dimension factor, is because we are just \u201cvalidating\u201d and not \u201clearning\u201d.\nIn SGD and for the case of convex functions, even a minibatch of size 1 suffices for guaranteed convergence. In contrast, for SNGD we require a minibatch of size 1/ 2. The theorem below shows that the requirement for a large minibatch is not an artifact of our analysis but is truly required.\nTheorem 5.2. Let \u2208 (0, 0.1]; There exists a distribution over convex loss functions, such that running SNGD with minibatch size of b = 0.2 , with a high probability, it never reaches an -optimal solution\nWe prove Theorem 5.2 in Section 5.2.3. The gap between the upper bound of 1/ 2 and the lower bound of 1/ remains as an open question.\nWe now provide a sketch for the proof of Theorem 5.1:\nProof of Theorem 5.1. Theorem 5.1 is a consequence of the following two lemmas. In the first we show that whenever all ft\u2019s are SLQC, there exists some t such that ft(xt)\u2212 ft(x\u2217) \u2264 . In the second lemma, we show that for a large enough minibatch size b, then for any t \u2208 [T ] we have f(xt) \u2264 ft(xt)+ , and f(x\u2217) \u2265 ft(x\u2217)\u2212 . Combining these two lemmas we conclude that f(x\u0304T )\u2212 f(x\u2217) \u2264 3 . Lemma 5.1. Let , \u03b4 > 0. Suppose we run SNGD for T \u2265 \u03ba2\u2016x1 \u2212 x\u2217\u20162/ 2 iterations, b \u2265 b0( , \u03b4, T ), and \u03b7 = /\u03ba. Assume that w.p.\u2265 1 \u2212 \u03b4 all ft\u2019s are ( , \u03ba,x\u2217)-SLQC in xt, whenever b \u2265 b0( , \u03b4, T ). Then w.p.\u2265 1 \u2212 \u03b4 we must have some t \u2208 [T ] for which ft(xt)\u2212 ft(x\u2217) \u2264 .\nLemma 5.1 is proved similarly to Theorem 4.1, we defer the proof to Section 5.2.1. The second Lemma relates ft(xt)\u2212 ft(x\u2217) \u2264 to a bound on f(xt)\u2212 f(x\u2217).\nLemma 5.2. Suppose b \u2265 M2 log(4T/\u03b4) 2 \u22122 then w.p.\u2265 1\u2212 \u03b4 and for every t \u2208 [T ]:\nf(xt) \u2264 ft(xt) + , and also, f(x\u2217) \u2265 ft(x\u2217)\u2212 .\nLemma 5.2 is a direct consequence of Hoeffding\u2019s bound (see Section 5.2.2). Using the definition of x\u0304T (Alg. 2) , together with Lemma 5.2 gives:\nf(x\u0304T )\u2212 f(x\u2217) \u2264 ft(xt)\u2212 ft(x\u2217) + 2 , \u2200t \u2208 [T ]\nCombining the latter with Lemma 5.1, establishes Theorem 5.1."}, {"heading": "5.2 Remaining Proofs", "text": ""}, {"heading": "5.2.1 Proof of Lemma 5.1", "text": "Proof. First note that if the gradient of ft vanishes at xt, then by the SLQC assumption we must have that ft(xt) \u2212 ft(x\u2217) \u2264 . Assume next that we perform T iterations and the gradient of ft at xt never vanishes in these iterations. Consider the update rule of SNGD (Algorithm 2), then by standard algebra we get:\n\u2016xt+1 \u2212 x\u2217\u20162 = \u2016xt \u2212 x\u2217\u20162 \u2212 2\u03b7\u3008g\u0302t,xt \u2212 x\u2217\u3009+ \u03b72 .\nAssume that \u2200t \u2208 [T ] we have ft(xt)\u2212 ft(x\u2217) > . Take y = x\u2217 + ( /\u03ba) g\u0302t, and observe that \u2016y \u2212 x\u2217\u2016 \u2264 /\u03ba. Hence the ( , \u03ba,x\u2217)-SLQC assumption implies that \u3008g\u0302t,y \u2212 xt\u3009 \u2264 0, thus,\n\u3008g\u0302t,x\u2217 + ( /\u03ba) g\u0302t \u2212 xt\u3009 \u2264 0 \u21d2 \u3008g\u0302t,xt \u2212 x\u2217\u3009 \u2265 /\u03ba .\nThis implies that, if we set \u03b7 = /\u03ba then\n\u2016xt+1 \u2212 x\u2217\u20162 \u2264 \u2016xt \u2212 x\u2217\u20162 \u2212 2\u03b7 /\u03ba+ \u03b72 = \u2016xt \u2212 x\u2217\u20162 \u2212 2/\u03ba2 .\nSo, after T iterations for which ft(xt)\u2212 ft(x\u2217) > we get\n0 \u2264 \u2016xT+1 \u2212 x\u2217\u20162 \u2264 \u2016x1 \u2212 x\u2217\u20162 \u2212 T 2/\u03ba2 ,\nTherefore, we must have\nT \u2264 \u03ba 2\u2016x1 \u2212 x\u2217\u20162\n2 ."}, {"heading": "5.2.2 Proof of Lemma 5.2", "text": "Proof. At each step t, the minibatch is being sampled after xt and x \u2217 are fixed. The random variables ft(xt) (resp. ft(x \u2217)) are an average of b i.i.d. random variables whose expectation is f(xt) (resp. f(x \u2217)). These random variables are bounded, since we assume \u2200t,x, |ft(x)| \u2264M (see Thm. 5.1). Applying Hoeffding\u2019s bound to the b random samples mentioned above, together with the union bound over t \u2208 [T ], and over both sequences of random variables, the lemma follows."}, {"heading": "5.2.3 Proof of Theorem 5.2", "text": "We will require the following lemma, whose proof is given in App. G.\nLemma 5.3 (Absorb probabilities). Let {Xt}\u221et=1 be a Markov chain over states {i}\u221ei=0, such that 0 is an absorbing state , and the transition distribution elsewhere is as follows:\nXt+1|{Xt = i} = { i\u2212 1 w.p. p i+ 1 w.p. 1\u2212 p\nDefine the absorb probabilities \u03b1i := P (\u2203t > 0 : Xt = 0|X0 = i), then:\n\u03b1i = ( p 1\u2212 p )i , \u2200i \u2265 1\nProof. To prove Theorem 5.2, we construct a counter example in one dimension. Consider the following distribution D over loss functions:\nf(x) = { \u22120.5 x w.p. 1\u2212 (1\u2212 0.5 ) max{x + 3, 0} w.p. (4)\nIt can be verified that the optimum of ED[f(x)] is in x \u2217 = \u22123 , and that the slope of the expected loss in (\u22123,\u221e) is 0.5 . Also notice that all points in the segment [\u22125,\u22121] are -optimal.\nSuppose we use SNGD with a batchsize of b = 0.2\n, i.e., we sample the gradient b times at any query point, and then average the samples and take the sign. Assume that at time t the queried point is greater than x\u2217 = \u22123. Let Yt be the averaged gradient over the\nbatch received at time t, and define p = P (Yt \u2265 0), i.e., the probability that this sign is non-negative. Then the following is a lower bound on 1\u2212 p:\n1\u2212 p := P (Yt < 0) \u2265 (1\u2212 )b = (1\u2212 )0.2/ ,\nwhere (1\u2212 )b is the probability that all b samples are negative. Now, consider the function G( ) = (1 \u2212 )0.2/ , It can be shown that G is monotonically decreasing in [0, 1], and that G(0.1) \u2265 0.8. Therefore, for any \u2208 [0, 0.1] we have, p \u2264 0.2.\nNow, let {Xt}t\u2208[T ], be the random variables describing the queries of SNGD under the distribution over loss functions given in Equation (4). Also assume that we start SNGD with X1 = 0, i.e., at a distance of D = 3 from the optimum. Then the points that SNGD queries are on the discrete lattice {i\u03b7}i\u2208Z , and the following holds:\nXt+1|{Xt = i\u03b7} = {\n(i\u2212 1)\u03b7 w.p. p (i+ 1)\u03b7 w.p. 1\u2212 p\nLet i0 = d\u22121/\u03b7e, note that i0 is the minimal number of steps required by SNGD to arrive from X1 = 0, to an -optimal solution. Now in order to analyze the probability that SNGD ever arrives at an -optimal point, it is sufficient to consider the Markov chain over the lattice {i\u03b7}i\u2208Z with the state S0 = i0\u03b7, as an absorbing state. Using Lemma 5.3 we conclude that if we start at X1 = 0 then the probability that we ever absorb is:\nP (\u2203t > 0 : Xt is -optimal |X0 = 0) \u2264 ( p\n1\u2212 p\n) 1 \u03b7 \u22121\n\u2264 ( 1\n4\n) 1 \u22121\n\u2264 ( 1\n4\n)9 ,\nwhere we used p \u2264 0.2, a bound of G = 1 on the gradients of losses; NGD\u2019s learning rate \u03b7 = /G, and \u2264 0.1."}, {"heading": "6 Experiments", "text": "A better understanding of how to train deep neural networks is one of the greatest challenges in current machine learning and optimization. Since learning NN (Neural Network) architectures essentially requires to solve a hard non-convex program, we have decided to focus our empirical study on this type of tasks. As a test case, we train a Neural Network with a single hidden layer of 100 units over the MNIST data set. We use a ReLU activation function, and minimize the square loss. We employ a regularization over weights with a parameter of \u03bb = 5 \u00b7 10\u22124.\nAt first we were interested in comparing the performance of SNGD to MSGD (Minibatch Stochastic Gradient Descent), and to a stochastic variant of Nesterov\u2019s accelerated gradient\nmethod Sutskever et al. (2013), which is considered to be state-of-the-art. For MSGD and Nesterov\u2019s method we used a step size rule of the form \u03b7t = \u03b70(1 + \u03b3t)\n\u22123/4, with \u03b70 = 0.01 and \u03b3 = 10\u22124. For SNGD we used the constant step size of 0.1. In Nesterov\u2019s method we used a momentum of 0.95. The comparison appears in Figures 2(a),2(b). As expected, MSGD converges relatively slowly. Conversely, the performance of SNGD is comparable with Nesterov\u2019s method. All methods employed a minibatch size of 100.\nLater, we were interested in examining the effect of minibatch size on the performance of SNGD. We employed SNGD with different minibatch sizes. As seen in Figure 2(c), the performance improves significantly with the increase of minibatch size."}, {"heading": "7 Discussion", "text": "We have presented the first provable gradient-based algorithm for stochastic quasi-convex optimization. This is a first attempt at generalizing the well-developed machinery of stochastic convex optimization to the challenging non-convex problems facing machine learning, and better characterizing the border between NP-hard non-convex optimization and tractable cases such as the ones studied herein.\nAmongst the numerous challenging questions that remain, we note that there is a gap between the upper and lower bound of the minibatch size sufficient for SNGD to provably converge."}, {"heading": "A Equivalence Between Definitions 2.2 and 2.3", "text": "First let us show that 2.2 \u21d2 2.3\nProof of 2.2 \u21d2 2.3. Let x,y \u2208 Rd such that f(x), f(y) \u2264 \u03bb. Let [x,y] be the line segment connecting these points; we need to show that \u2200z \u2208 [x,y]; f(z) \u2264 \u03bb. Assume by contradiction that there exists z \u2208 [x,y] such that f(z) > \u03bb. Assume w.l.o.g. that \u3008\u2207f(z),x\u2212y\u3009 6= 0 (otherwise we could always find z\u2032 \u2208 [x,y] such that f(z\u2032) = f(z) and \u3008\u2207f(z\u2032),x\u2212 y\u3009 6= 0), and let \u03b1 \u2208 (0, 1) such that z = \u03b1x + (1\u2212 \u03b1)y. By Definition 2.2 the following applies:\n0 \u2264 \u3008\u2207f(z), z\u2212 x\u3009 = \u3008\u2207f(z), \u03b1x + (1\u2212 \u03b1)y \u2212 x\u3009 = (1\u2212 \u03b1)\u3008\u2207f(z),y \u2212 x\u3009 , 0 \u2264 \u3008\u2207f(z), z\u2212 y\u3009 = \u3008\u2207f(z), \u03b1x + (1\u2212 \u03b1)y \u2212 y\u3009 = \u2212\u03b1\u3008\u2207f(z),y \u2212 x\u3009 .\nSince \u03b1 \u2208 (0, 1), we conclude that \u3008\u2207f(z),y \u2212 x\u3009 \u2265 0 and also \u3008\u2207f(z),y \u2212 x\u3009 \u2264 0. This is a contradiction since we assumed \u3008\u2207f(z),y \u2212 x\u3009 6= 0.\nLet us now show that 2.3 \u21d2 2.2\nProof of 2.3 \u21d2 2.2. Consider the 1 dimensional function h(\u03b1) = f(x + \u03b1(y \u2212 x)). The derivative of h at 0 is h\u2032(0) = \u3008\u2207f(x),y\u2212 x\u3009. Therefore, we need to show that if y \u2208 Sf (x) then h\u2032(0) \u2264 0. By the quasi-convex assumption we have that all the line segment connecting x to y is in Sf (x). Therefore, for every \u03b1 \u2208 [0, 1] we have h(\u03b1) \u2264 h(0). This means that\nh\u2032(0) = lim \u03b1\u2192+0 h(\u03b1)\u2212 h(0) \u03b1 \u2264 0 ."}, {"heading": "B Local Quasi-convexity of g", "text": "Here we show that the function g that appears in Equation 2 is SLQC. Denote x\u2217 = (\u221210,\u221210), let \u2208 [0, 1] and let x,y such that g(x) \u2212 g(x\u2217) \u2265 and \u2016y \u2212 x\u2217\u2016 \u2264 . In order to prove SLQC it sufficient to show that \u2016gx\u2016 > 0, and that \u3008gx,x\u2212y\u3009 \u2265 0 (we denote gx := \u2207g(x)). Deriving g at x we have:\ngx = \u2207g(x) = (e\u2212x1/(1 + e\u2212x1)2, e\u2212x2/(1 + e\u2212x2)2) .\nand it is clear that \u2016gx\u2016 > 0, \u2200x \u2208 [\u221210, 10]2, thus strictness always holds. We divide the proof of \u3008gx,x\u2212 y\u3009 \u2265 0, into cases:\nCase 1: Suppose that x1 \u2264 0, x2 \u2264 0. In this case it is possible to show that the Hessian of g is positive-semi-definite, thus g is convex in [\u221210, 0]2. Since g is also 1-Lipschitz, then it implies that it is ( , 1,x\u2217)-SLQC in every x \u2208 [\u221210, 0]2.\nCase 2: Suppose that at least one of x1, x2 is positive, w.l.o.g. assume that x1 > 0. In this case:\n\u3008gx,x\u2212 y\u3009 \u2265 2\u2211 i=1 e\u2212xi(xi + 10 + (x \u2217 i \u2212 yi)) (1 + e\u2212xi)2\n\u2265 2\u2211 i=1 e\u2212xi(xi + 10\u2212 ) (1 + e\u2212xi)2 \u2265 19e \u221210\n(1 + e\u221210)2 \u2212 e\n\u221210+\n(1 + e\u221210+ )2\n\u2265 e \u221210\n(1 + e\u221210)2 (19\u2212 e )\n> 0 .\nwhere in the second line we used \u2016y \u2212 x\u2217\u2016 \u2264 . In the third line we used \u2208 [0, 1], also 10 = arg maxz\u2208[0,10] e\u2212z(z+9) (1+e\u2212z)2 , and minz\u2208[\u221210,0] e\u2212z(z+10\u2212 ) (1+e\u2212z)2 \u2265 \u2212 e\u221210+ (1+e\u221210+ )2 . The fourth line uses e\u221210+ \u2265 e\u221210, and the last line uses \u2264 1. The above two cases establish that g is ( , 1,x\u2217)-SLQC in every x \u2208 [\u221210, 10]2, \u2208 (0, 1]."}, {"heading": "C Proof of Lemma 3.1", "text": "Proof. Given \u2265 0, we will show that e\u0302rrm is ( , eW ,w\u2217)-SLQC at every w \u2208 B(0,W ). Recall \u03c6(z) = (1+e\u2212z)\u22121, and consider \u2016w\u2016 \u2264 W such that e\u0302rrm(w) = 1m \u2211m i=1(yi\u2212\u03c6\u3008w,xi\u3009)2 \u2265 . Also let v be a point /eW close to the minima w\u2217, we therefore have:\n\u3008\u2207e\u0302rrm(w),w \u2212 v\u3009\n= 2\nm m\u2211 i=1\ne\u3008w,xi\u3009\n(1 + e\u3008w,xi\u3009)2 (\u03c6\u3008w,xi\u3009 \u2212 yi)(\u3008w,xi\u3009 \u2212 \u3008v,xi\u3009)\n= 2\nm m\u2211 i=1\ne\u3008w,xi\u3009\n(1 + e\u3008w,xi\u3009)2 (\u03c6\u3008w,xi\u3009 \u2212 \u03c6\u3008w\u2217,xi\u3009)(\u3008w,xi\u3009 \u2212 \u3008w\u2217,xi\u3009+ \u3008w\u2217 \u2212 v,xi\u3009)\n\u2265 2 m m\u2211 i=1\n4e\u3008w,xi\u3009\n(1 + e\u3008w,xi\u3009)2 (\u03c6\u3008w,xi\u3009 \u2212 \u03c6\u3008w\u2217,xi\u3009)2 \u2212\ne\u2212W\n2\n\u2265 2e\u2212W e\u0302rrm(w)\u2212 e\u2212W 2 > 0 . (5)\nIn the second line we used yi = \u03c6\u3008w\u2217,xi\u3009, which holds for the idealized setup. In the third line we used the fact that \u03c6(z) is monotonically increasing and 1/4-Lipschitz, and therefore (\u03c6(z)\u2212 \u03c6(z\u2032)) (z \u2212 z\u2032) \u2265 4 (\u03c6(z)\u2212 \u03c6(z\u2032))2. We also used |\u3008w\u2217 \u2212 v,xi\u3009| \u2264 \u2016w\u2217 \u2212 v\u2016 \u00b7 \u2016xi\u2016 \u2264 e\u2212W , and |\u03c6(w,xi) \u2212 \u03c6(w\u2217,xi)| \u2264 1; Finally we used maxz e z (1+ez)2 \u2264 1/4. The fourth line\nuses min\u2016z\u2016\u2264W 4ez (1+ez)2 \u2265 e\u2212W . The last line follows since we assume e\u0302rrm(w) \u2265 . The strictness is immediate since \u3008\u2207e\u0302rrm(w),w\u2212v\u3009 > 0, therefore, the above establishes SLQC.\nWe will now show that e\u0302rrm is generally not quasi-convex: Consider the idealized setup with two samples (x1, y1), (x2, y2) where x1 = (0,\u2212 log 4),x2 = (\u2212 log 4, 0) and y1 = y2 = 1/5, The error function is therefore:\ne\u0302rrm(w) = 1\n2\n( 1\n5 \u2212 1 1 + e\u2212\u3008w,x1\u3009\n)2 + 1\n2\n( 1\n5 \u2212 1 1 + e\u2212\u3008w,x2\u3009\n)2 .\nand it can be verified that the optimal predictor is w\u2217 = (1, 1), yielding e\u0302rrm(w \u2217) = 0. Now let w1 = (3, 1),w2 = (1, 3), it can be shown that e\u0302rrm(w1) = e\u0302rrm(w2) \u2264 0.018, yet e\u0302rrm(w1/2 + w2/2) \u2265 0.019. Thus e\u0302rrm is not quasi-convex."}, {"heading": "D Proof of Lemma 3.2", "text": "Proof. Since we are in the noisy idealized setup, and \u2200i, yi \u2208 [0, 1] the folllowing holds\nyi = \u03c6\u3008w\u2217,xi\u3009+ \u03bei .\nwhere {\u03bei}mi=1 are zero mean, independent and bound random variables, \u2200i \u2208 [m], |\u03bei| \u2264 1. Therefore e\u0302rrm can be written as follows:\ne\u0302rrm(w) = 1\nm m\u2211 i=1 (yi \u2212 \u03c6\u3008w,xi\u3009)2\n= 1\nm m\u2211 i=1 (\u03c6\u3008w\u2217,xi\u3009 \u2212 \u03c6\u3008w,xi\u3009)2 + 1 m m\u2211 i=1 \u03bei\u03b8i(w) + c .\nwhere c = 1 m \u2211m i=1 \u03be 2 i , and \u03b8i(w) = 2 (\u03c6\u3008w,xi\u3009 \u2212 \u03c6\u3008w\u2217,xi\u3009). We therefore have:\ne\u0302rrm(w)\u2212 e\u0302rrm(w\u2217) = 1\nm m\u2211 i=1 (\u03c6\u3008w\u2217,xi\u3009 \u2212 \u03c6\u3008w,xi\u3009)2 + 1 m m\u2211 i=1 \u03bei\u03b8i(w) .\nNow fix > 0, and let w be a fixed point in B(0,W ) such that e\u0302rrm(w) \u2212 e\u0302rrm(w\u2217) \u2265 . Also let v be a point /eW close to the minima w\u2217, we therefore have:\n\u3008\u2207e\u0302rrm(w),w \u2212 v\u3009\n= 2\nm m\u2211 i=1\ne\u3008w,xi\u3009\n(1 + e\u3008w,xi\u3009)2 (\u03c6\u3008w,xi\u3009 \u2212 yi)(\u3008w,xi\u3009 \u2212 \u3008v,xi\u3009)\n= 2\nm m\u2211 i=1\ne\u3008w,xi\u3009\n(1 + e\u3008w,xi\u3009)2 (\u03c6\u3008w,xi\u3009 \u2212 \u03c6\u3008w\u2217,xi\u3009 \u2212 \u03bei)(\u3008w,xi\u3009 \u2212 \u3008w\u2217,xi\u3009+ \u3008w\u2217 \u2212 v,xi\u3009)\n\u2265 2 m m\u2211 i=1\n4e\u3008w,xi\u3009\n(1 + e\u3008w,xi\u3009)2 (\u03c6\u3008w,xi\u3009 \u2212 \u03c6\u3008w\u2217,xi\u3009)2 \u2212\ne\u2212W\n2 +\n1\nm m\u2211 i=1 \u03bei\u03bbi(w)\n\u2265 2 m m\u2211 i=1\n4e\u3008w,xi\u3009 (1 + e\u3008w,xi\u3009)2 [ (\u03c6\u3008w,xi\u3009 \u2212 \u03c6\u3008w\u2217,xi\u3009)2 + \u03bei\u03b8i(w) ] \u2212 e \u2212W 2 + 1 m m\u2211 i=1 \u03bei\u03bb\u0303i(w)\n\u2265 2e\u2212W (e\u0302rrm(w)\u2212 e\u0302rrm(w\u2217))\u2212 e\u2212W\n2 +\n1\nm m\u2211 i=1 \u03bei\u03bb\u0303i(w)\n\u2265 3 2 e\u2212W + 1 m m\u2211 i=1 \u03bei\u03bb\u0303i(w) . (6)\nwhere we denote \u03bbi(w) = 8e\u3008w,xi\u3009 (1+e\u3008w,xi\u3009)2 (\u3008w\u2217,xi\u3009\u2212\u3008w,xi\u3009), and \u03bb\u0303i(w) = \u03bbi(w)\u2212 8e \u3008w,xi\u3009 (1+e\u3008w,xi\u3009)2 \u03b8i(w). The argumentation justifying the above inequalities is the same as is done for Equation (5) (see Appendix C). According to Equation (6), the lemma is established if we can show that\n1\nm m\u2211 i=1 \u03bei\u03bb\u0303i(w) \u2265 \u2212 e\u2212W\nThe {\u03bei}mi=1 are zero mean and independent, and |\u03bei\u03bb\u0303i(w)| \u2264 4(W + 1), thus applying Heoffding\u2019s bound we get that the above does hold for m \u2265 8e2W (W+1)2\n2 log(1/\u03b4). Note that\nin bounding |\u03bei\u03bb\u0303i(w)|, we used |\u03bei| \u2264 1, also w,w\u2217 \u2208 B(0,W ), and maxz e z (1+ez)2 \u2264 1 4 ."}, {"heading": "E Locally-Lipschitz and Strictly Quasi-Convex are SLQC", "text": "In order to show that strictly quasi-convex function which is also (G, /G,x\u2217)-Lipschitz, is SLQC, we require the following lemma:\nLemma E.1. Let z \u2208 Rd, and assume that f is (G, /G, z)-Locally-Lipschitz. Then, for every x with f(x)\u2212 f(z) > we have B(z, /G) \u2286 Sf (x)\nProof. Recall the notation Sf (x) = {y : f(y) \u2264 f(x)}. By Lipschitzness, for every y \u2208 B(z, /G) we have f(y) \u2264 f(z) + . Combining with the assumption that f(z) + < f(x) we obtain that y \u2208 Sf (x).\nTherefore, if f(x)\u2212 f(x\u2217) \u2265 , then \u2200y \u2208 B(x\u2217, /G) it holds that f(x)\u2212 f(y) \u2265 0, and since f is strictly quasi-convex, the latter means that \u3008\u2207f(x),y\u2212x\u3009 \u2264 0, and \u2016\u2207f(x)\u2016 > 0. Thus ( , G,x\u2217)-SLQC is established."}, {"heading": "F Proof of Theorem 4.2", "text": "The key lemma, that enables us to attain faster rates for smooth functions is the following: Lemma F.1. Let x\u2217 be a global minima of f . Also assume that f is (\u03b2, \u221a 2 /\u03b2,x\u2217)-locally-\nsmooth. Then, for every x with f(x)\u2212 f(x\u2217) > we have B(x\u2217, \u221a\n2 /\u03b2) \u2286 Sf (x). Proof. Combining the definition of local-smoothness (Def. 2.1) together with \u2207f(x\u2217) = 0 we get\n|f(y)\u2212 f(x\u2217)| \u2264 \u03b2 2 \u2016y \u2212 x\u2217\u20162, \u2200y \u2208 B(x\u2217,\n\u221a 2 /\u03b2)\nTherefore, for every y \u2208 B(x\u2217, \u221a\n2 /\u03b2) we have f(y) \u2264 f(x\u2217) + . Combining with the assumption that f(x\u2217) + < f(x) we obtain that y \u2208 Sf (x).\nThe proof of Theorem 4.2 follows the same lines as the proof of Theorem 4.1. The main difference is that whenever f(xt) \u2212 f(x\u2217) \u2265 , we use Lemma F.1 and quasi-convexity to show that for y = x\u2217 + \u221a 2 /\u03b2g\u0302t it follows that\n\u3008\u2207f(xt),y \u2212 xt\u3009 \u2264 0 .\nWe therefore omit the details of the proof."}, {"heading": "G Proof of Lemma 5.3", "text": "Proof. Using the stationarity and Markov property of the chain, we can write the following recursive equations for the absorb probabilities:\n\u03b1i = (1\u2212 p)\u03b1i+1 + p\u03b1i\u22121, \u2200i > 1 (7) \u03b11 = (1\u2212 p)\u03b12 + p (8)\nLets guess a solution of the form, \u03b1i = c0\u03c1 i, where \u03c1 is the decay parameter of the absorb probabilities. By inserting this solution into equation (7) we get an equation for \u03c1:\n(1\u2212 p)\u03c12 \u2212 \u03c1+ p = 0 .\nAnd it can be validated that the only nontrivial solution is \u03c1 = p 1\u2212p , using the latter \u03c1 in equation (8) we get c0 = 1, and therefore we conclude that:\n\u03b1i = ( p 1\u2212 p )i , \u2200i \u2265 1"}, {"heading": "H A Broader Notion of Local-Quasi-Convexity", "text": "Definition 3.1 describes a rich family of function, as depicted in Section 3.1.1, and 3.1.2. However, it is clear that it does not capture piecewise constant and quasi-convex functions, such as the zero-one loss, or the Perceptron problem.\nIn some cases, e.g. the Perceptron problem, we may have an access to a direction oracle, G : Rd 7\u2192 Rd. This oracle is a proxy to the gradient, aiming us in a global ascent (descent) direction. Following is a broader definition of locally-quasi-convex functions:\nDefinition H.1. (Local-Quasi-Convexity) Let x, z \u2208 Rd, \u03ba, > 0. Also let G : Rd 7\u2192 Rd. We say that f : Rd 7\u2192 R is ( , \u03ba, z)-Strictly-Locally-Quasi-Convex (SLQC) in x, with respect to the direction oracle G, if at least one of the following applies:\n1. f(x)\u2212 f(z) \u2264 .\n2. \u2016G(x)\u2016 > 0, and for every y \u2208 B(z, /\u03ba) it holds that \u3008G(x),y \u2212 x\u3009 \u2264 0 .\nThus, Definition 3.1, is a private case of the above, which takes the gradient of f to be the direction oracle. Note that we can show that NGD/SNGD and their guarantees still hold for SLQC functions with a direction oracle. The algorithms and proofs are very similar to the ones that appear in the paper, and we therefore omit the details.\nIn the following section we illustrate a scenario that fits the above definition.\nH.1 The \u03b3-margin Perceptron\nIn this setup we have a collection of m samples {(xi, yi)}mi=1 \u2208 Bd \u00d7 {0, 1} ,and we are guaranteed to have w\u2217 \u2208 Rd such that: yi\u3008w\u2217,xi\u3009 \u2265 \u03b3, \u2200i \u2208 [m]. Thus, using the sign of \u3008w\u2217, xi\u3009 as a predictor, it classifies all the points correctly (with a margin of \u03b3).\nLetting \u03c6 be the zero-one loss \u03c6(z) = 1 z\u22650, we measure the performance of a predictor w \u2208 Rd, by the average (square) error over all samples,\ne\u0302rrm(w) = 1\nm m\u2211 i=1 (yi \u2212 \u03c6\u3008w,xi\u3009)2 . (9)\nClearly, the gradients of e\u0302rrm(w) vanish almost everywhere. Luckily, from the convergence analysis of the Perceptron (see e.g. Kalai and Sastry (2009)), we know the following to be a direction oracle for e\u0302rrm(w):\nG(w) = 1 m m\u2211 i=1 (\u03c6\u3008w,xi\u3009 \u2212 yi) xi . (10)\nThe next lemma states that in the above setup, the error function is SLQC with respect to G. This implies that Algorithm 1 finds an -optimal minima of e\u0302rrm(w) within poly(1/ ) iterations.\nLemma H.1. Consider the \u03b3-margin Perceptron problem. Then the error function appearing in Equation (9) is ( , 2/\u03b3,w\u2217)-SLQC in w, \u2200 \u2208 (0, 1), \u2200w \u2208 Rd with respect to the direction oracle appearing in Equation (10).\nProof. Given \u2208 (0, 1), we will show that e\u0302rrm is ( , 2/\u03b3,w\u2217)-SLQC at every w \u2208 Rd. Consider w \u2208 Rd such that e\u0302rrm(w) = 1m \u2211m i=1(yi \u2212 \u03c6\u3008w,xi\u3009)2 \u2265 . Also let v be a point \u03b3 /2 close to the minima w\u2217, we therefore have:\n\u3008G(w),w \u2212 v\u3009\n= 1\nm m\u2211 i=1 (\u03c6\u3008w,xi\u3009 \u2212 yi)(\u3008w,xi\u3009 \u2212 \u3008v,xi\u3009)\n= 1\nm m\u2211 i=1 (\u03c6\u3008w,xi\u3009 \u2212 \u03c6\u3008w\u2217,xi\u3009)(\u3008w,xi\u3009 \u2212 \u3008w\u2217,xi\u3009+ \u3008w\u2217 \u2212 v,xi\u3009)\n\u2265 \u03b3 m m\u2211 i=1 (\u03c6\u3008w,xi\u3009 \u2212 \u03c6\u3008w\u2217,xi\u3009)2 \u2212 \u03b3 /2 \u2265 \u03b3 \u2212 \u03b3 /2 > 0 . (11)\nIn the second line we used yi = \u03c6\u3008w\u2217,xi\u3009, which holds by our assumption on w\u2217. In the fourth line we used the fact that (\u03c6\u3008w,xi\u3009\u2212\u03c6\u3008w\u2217,xi\u3009)(\u3008w,xi\u3009\u2212\u3008w\u2217,xi\u3009) \u2265 \u03b3(\u03c6\u3008w,xi\u3009\u2212\u03c6\u3008w\u2217,xi\u3009)2, which holds since w\u2217 is a minimizer with a \u03b3-margin. We also used e\u0302rrm(w) \u2264 1, and |\u3008w\u2217 \u2212 v,xi\u3009| \u2264 \u2016w\u2217 \u2212 v\u2016 \u00b7 \u2016xi\u2016 \u2264 \u03b3 /2. Lastly, we use e\u0302rrm(w) \u2265 .\nThe strictness is immediate since \u3008G(w),w \u2212 v\u3009 > 0, therefore, the above establishes SLQC."}], "references": [{"title": "Exponentially many local minima for single neurons", "author": ["P. Auer", "M. Herbster", "M.K. Warmuth"], "venue": "Advances in neural information processing systems,", "citeRegEx": "Auer et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Auer et al\\.", "year": 1996}, {"title": "Learning deep architectures for AI", "author": ["Y. Bengio"], "venue": "Foundations and trends in Machine Learning,", "citeRegEx": "Bengio.,? \\Q2009\\E", "shortCiteRegEx": "Bengio.", "year": 2009}, {"title": "Bifurcations of recurrent neural networks in gradient descent learning", "author": ["K. Doya"], "venue": "IEEE Transactions on neural networks,", "citeRegEx": "Doya.,? \\Q1993\\E", "shortCiteRegEx": "Doya.", "year": 1993}, {"title": "Complexity analysis of an interior cutting plane method for convex feasibility problems", "author": ["J.-L. Goffin", "Z.-Q. Luo", "Y. Ye"], "venue": "SIAM Journal on Optimization,", "citeRegEx": "Goffin et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Goffin et al\\.", "year": 1996}, {"title": "The isotron algorithm: High-dimensional isotonic regression", "author": ["A.T. Kalai", "R. Sastry"], "venue": "In COLT,", "citeRegEx": "Kalai and Sastry.,? \\Q2009\\E", "shortCiteRegEx": "Kalai and Sastry.", "year": 2009}, {"title": "Quasiconvex optimization for robust geometric reconstruction", "author": ["Q. Ke", "T. Kanade"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on,", "citeRegEx": "Ke and Kanade.,? \\Q2007\\E", "shortCiteRegEx": "Ke and Kanade.", "year": 2007}, {"title": "A method to find a point of a convex set. Issled", "author": ["R.F. Khabibullin"], "venue": "Prik. Mat.,", "citeRegEx": "Khabibullin.,? \\Q1977\\E", "shortCiteRegEx": "Khabibullin.", "year": 1977}, {"title": "Convergence and efficiency of subgradient methods for quasiconvex minimization", "author": ["K.C. Kiwiel"], "venue": "Mathematical programming,", "citeRegEx": "Kiwiel.,? \\Q2001\\E", "shortCiteRegEx": "Kiwiel.", "year": 2001}, {"title": "On convergence properties of a subgradient method", "author": ["I.V. Konnov"], "venue": "Optimization Methods and Software,", "citeRegEx": "Konnov.,? \\Q2003\\E", "shortCiteRegEx": "Konnov.", "year": 2003}, {"title": "The theory of incentives: the principal-agent model", "author": ["J.-J. Laffont", "D. Martimort"], "venue": "Princeton university press,", "citeRegEx": "Laffont and Martimort.,? \\Q2009\\E", "shortCiteRegEx": "Laffont and Martimort.", "year": 2009}, {"title": "Learning recurrent neural networks with hessian-free optimization", "author": ["J. Martens", "I. Sutskever"], "venue": "In Proceedings of the 28th International Conference on Machine Learning", "citeRegEx": "Martens and Sutskever.,? \\Q2011\\E", "shortCiteRegEx": "Martens and Sutskever.", "year": 2011}, {"title": "Generalised linear models", "author": ["P. McCullagh", "J. Nelder"], "venue": "London: Chapman and Hall/CRC,", "citeRegEx": "McCullagh and Nelder.,? \\Q1989\\E", "shortCiteRegEx": "McCullagh and Nelder.", "year": 1989}, {"title": "Minimization methods for nonsmooth convex and quasiconvex functions", "author": ["Y.E. Nesterov"], "venue": "Matekon, 29:519\u2013531,", "citeRegEx": "Nesterov.,? \\Q1984\\E", "shortCiteRegEx": "Nesterov.", "year": 1984}, {"title": "On the difficulty of training recurrent neural networks", "author": ["R. Pascanu", "T. Mikolov", "Y. Bengio"], "venue": "In Proceedings of The 30th International Conference on Machine Learning,", "citeRegEx": "Pascanu et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Pascanu et al\\.", "year": 2013}, {"title": "A general method of solving extremum problems", "author": ["B.T. Polyak"], "venue": "Dokl. Akademii Nauk SSSR,", "citeRegEx": "Polyak.,? \\Q1967\\E", "shortCiteRegEx": "Polyak.", "year": 1967}, {"title": "Quasi subgradient algorithms for calculating surrogate constraints. In Analysis and algorithms of optimization problems, pages 203\u2013236", "author": ["J. Sikorski"], "venue": null, "citeRegEx": "Sikorski.,? \\Q1986\\E", "shortCiteRegEx": "Sikorski.", "year": 1986}, {"title": "On the importance of initialization and momentum in deep learning", "author": ["I. Sutskever", "J. Martens", "G. Dahl", "G. Hinton"], "venue": "In Proceedings of the 30th International Conference on Machine Learning", "citeRegEx": "Sutskever et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2013}, {"title": "Price discrimination and social welfare", "author": ["H.R. Varian"], "venue": "The American Economic Review, pages 870\u2013875,", "citeRegEx": "Varian.,? \\Q1985\\E", "shortCiteRegEx": "Varian.", "year": 1985}, {"title": "Topics in microeconomics: Industrial organization, auctions, and incentives", "author": ["E. Wolfstetter"], "venue": null, "citeRegEx": "Wolfstetter.,? \\Q1999\\E", "shortCiteRegEx": "Wolfstetter.", "year": 1999}, {"title": "The minimization of quasicomplex functionals", "author": ["Y.I. Zabotin", "A. Korablev", "R.F. Khabibullin"], "venue": "Izv. Vyssh. Uch. Zaved. Mat.,", "citeRegEx": "Zabotin et al\\.,? \\Q1972\\E", "shortCiteRegEx": "Zabotin et al\\.", "year": 1972}], "referenceMentions": [{"referenceID": 1, "context": "In particular, SGD is widely used for deep learning Bengio (2009), one of the most interesting fields where stochastic non-convex optimization problems arise.", "startOffset": 52, "endOffset": 66}, {"referenceID": 11, "context": "\u2022 We introduce a new setup: stochastic optimization of locally-quasi-convex functions; and show that this setup captures Generalized Linear Models (GLM) regression, McCullagh and Nelder (1989). For this setup, we devise a stochastic version of NGD (SNGD), and show that it converges within O(1/ ) iterations to an -optimal minimum.", "startOffset": 165, "endOffset": 193}, {"referenceID": 15, "context": "1 Related Work Quasi-convex optimization problems arise in numerous fields, spanning economics Varian (1985); Laffont and Martimort (2009), industrial organization Wolfstetter (1999) , and computer vision Ke and Kanade (2007).", "startOffset": 95, "endOffset": 109}, {"referenceID": 8, "context": "1 Related Work Quasi-convex optimization problems arise in numerous fields, spanning economics Varian (1985); Laffont and Martimort (2009), industrial organization Wolfstetter (1999) , and computer vision Ke and Kanade (2007).", "startOffset": 110, "endOffset": 139}, {"referenceID": 8, "context": "1 Related Work Quasi-convex optimization problems arise in numerous fields, spanning economics Varian (1985); Laffont and Martimort (2009), industrial organization Wolfstetter (1999) , and computer vision Ke and Kanade (2007).", "startOffset": 110, "endOffset": 183}, {"referenceID": 5, "context": "1 Related Work Quasi-convex optimization problems arise in numerous fields, spanning economics Varian (1985); Laffont and Martimort (2009), industrial organization Wolfstetter (1999) , and computer vision Ke and Kanade (2007). It is well known that quasi-convex optimization tasks", "startOffset": 205, "endOffset": 226}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al.", "startOffset": 159, "endOffset": 180}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al.", "startOffset": 159, "endOffset": 284}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al. (1972); Khabibullin (1977); Sikorski (1986).", "startOffset": 159, "endOffset": 307}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al. (1972); Khabibullin (1977); Sikorski (1986).", "startOffset": 159, "endOffset": 327}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al. (1972); Khabibullin (1977); Sikorski (1986). A pioneering paper by Nesterov (1984), was the first to suggest an efficient algorithm, namely Normalized Gradient Descent, and prove that this algorithm attains -optimal solution within O(1/ ) iterations given a differentiable quasi-convex objective.", "startOffset": 159, "endOffset": 344}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al. (1972); Khabibullin (1977); Sikorski (1986). A pioneering paper by Nesterov (1984), was the first to suggest an efficient algorithm, namely Normalized Gradient Descent, and prove that this algorithm attains -optimal solution within O(1/ ) iterations given a differentiable quasi-convex objective.", "startOffset": 159, "endOffset": 383}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al. (1972); Khabibullin (1977); Sikorski (1986). A pioneering paper by Nesterov (1984), was the first to suggest an efficient algorithm, namely Normalized Gradient Descent, and prove that this algorithm attains -optimal solution within O(1/ ) iterations given a differentiable quasi-convex objective. This work was later extended by Kiwiel (2001), showing that the same result may be achieved assuming upper semi-continuous quasi-convex objectives.", "startOffset": 159, "endOffset": 643}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al. (1972); Khabibullin (1977); Sikorski (1986). A pioneering paper by Nesterov (1984), was the first to suggest an efficient algorithm, namely Normalized Gradient Descent, and prove that this algorithm attains -optimal solution within O(1/ ) iterations given a differentiable quasi-convex objective. This work was later extended by Kiwiel (2001), showing that the same result may be achieved assuming upper semi-continuous quasi-convex objectives. In Konnov (2003) it was shown how to attain faster rates for quasi-convex optimization, but they assume to know the optimal value of the objective, an assumption that generally does not hold in practice.", "startOffset": 159, "endOffset": 762}, {"referenceID": 2, "context": "can be solved by a series of convex feasibility problems Boyd and Vandenberghe (2004); However, generally solving such feasibility problems may be very costly Goffin et al. (1996). There exists a rich literature concerning quasi-convex optimization in the offline case, Polyak (1967); Zabotin et al. (1972); Khabibullin (1977); Sikorski (1986). A pioneering paper by Nesterov (1984), was the first to suggest an efficient algorithm, namely Normalized Gradient Descent, and prove that this algorithm attains -optimal solution within O(1/ ) iterations given a differentiable quasi-convex objective. This work was later extended by Kiwiel (2001), showing that the same result may be achieved assuming upper semi-continuous quasi-convex objectives. In Konnov (2003) it was shown how to attain faster rates for quasi-convex optimization, but they assume to know the optimal value of the objective, an assumption that generally does not hold in practice. Among the deep learning community there have been several attempts to tackle gradientexplosion/plateaus. Ideas spanning gradient-clipping Pascanu et al. (2013), smart initialization Doya (1993), and more, Martens and Sutskever (2011), have shown to improve training in practice.", "startOffset": 159, "endOffset": 1109}, {"referenceID": 2, "context": "(2013), smart initialization Doya (1993), and more, Martens and Sutskever (2011), have shown to improve training in practice.", "startOffset": 29, "endOffset": 41}, {"referenceID": 2, "context": "(2013), smart initialization Doya (1993), and more, Martens and Sutskever (2011), have shown to improve training in practice.", "startOffset": 29, "endOffset": 81}, {"referenceID": 10, "context": "Later we justify this definition by showing that it captures Generalized Linear Models (GLM) regression, see McCullagh and Nelder (1989); Kalai and Sastry (2009).", "startOffset": 109, "endOffset": 137}, {"referenceID": 4, "context": "Later we justify this definition by showing that it captures Generalized Linear Models (GLM) regression, see McCullagh and Nelder (1989); Kalai and Sastry (2009). Definition 3.", "startOffset": 138, "endOffset": 162}, {"referenceID": 4, "context": "In Kalai and Sastry (2009) it is shown that the Perceptron problem with \u03b3-margin is a private case of GLM regression.", "startOffset": 3, "endOffset": 27}, {"referenceID": 10, "context": "2 The Noisy GLM In the noisy GLM setup (see McCullagh and Nelder (1989); Kalai and Sastry (2009)), we may draw i.", "startOffset": 44, "endOffset": 72}, {"referenceID": 4, "context": "2 The Noisy GLM In the noisy GLM setup (see McCullagh and Nelder (1989); Kalai and Sastry (2009)), we may draw i.", "startOffset": 73, "endOffset": 97}, {"referenceID": 12, "context": "Our analysis is simple, enabling us to extend the convergence rate presented in Nesterov (1984) beyond quasi-convex functions.", "startOffset": 80, "endOffset": 96}, {"referenceID": 0, "context": "Note that in the general case when the objective is a sum of quasi-convex functions, the number of local minima of such objective may grow exponentially with the dimension d, see Auer et al. (1996). This might imply that a general setup where each \u03c8 \u223c D is quasi-convex may be generally hard.", "startOffset": 179, "endOffset": 198}, {"referenceID": 15, "context": "method Sutskever et al. (2013), which is considered to be state-of-the-art.", "startOffset": 7, "endOffset": 31}], "year": 2015, "abstractText": "Stochastic convex optimization is a basic and well studied primitive in machine learning. It is well known that convex and Lipschitz functions can be minimized efficiently using Stochastic Gradient Descent (SGD). The Normalized Gradient Descent (NGD) algorithm, is an adaptation of Gradient Descent, which updates according to the direction of the gradients, rather than the gradients themselves. In this paper we analyze a stochastic version of NGD and prove its convergence to a global minimum for a wider class of functions: we require the functions to be quasi-convex and locally-Lipschitz. Quasi-convexity broadens the concept of unimodality to multidimensions and allows for certain types of saddle points, which are a known hurdle for first-order optimization methods such as gradient descent. Locally-Lipschitz functions are only required to be Lipschitz in a small region around the optimum. This assumption circumvents gradient explosion, which is another known hurdle for gradient descent variants. Interestingly, unlike the vanilla SGD algorithm, the stochastic normalized gradient descent algorithm provably requires a minimal minibatch size.", "creator": "LaTeX with hyperref package"}}}