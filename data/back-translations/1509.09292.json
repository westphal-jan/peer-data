{"id": "1509.09292", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Sep-2015", "title": "Convolutional Networks on Graphs for Learning Molecular Fingerprints", "abstract": "Predicting properties of molecules requires functions that use graphs as input. Molecular graphs are typically pre-processed with hash-based functions to generate fixed-size fingerprint vectors that are used as predictive features. We are introducing a Convolutionary Neural Network that works directly on graphs, enabling end-to-end learning of the feature pipeline, and this architecture generalizes standard molecular fingerprints. We show that these data-driven features are more interpretable and have better predictive capability for a variety of tasks.", "histories": [["v1", "Wed, 30 Sep 2015 18:33:50 GMT  (1247kb,D)", "http://arxiv.org/abs/1509.09292v1", "9 pages, 5 figures. To appear in Neural Information Processing Systems (NIPS)"], ["v2", "Tue, 3 Nov 2015 17:18:32 GMT  (1261kb,D)", "http://arxiv.org/abs/1509.09292v2", "9 pages, 5 figures. To appear in Neural Information Processing Systems (NIPS)"]], "COMMENTS": "9 pages, 5 figures. To appear in Neural Information Processing Systems (NIPS)", "reviews": [], "SUBJECTS": "cs.LG cs.NE stat.ML", "authors": ["david k duvenaud", "dougal maclaurin", "jorge aguilera-iparraguirre", "rafael bombarell", "timothy hirzel", "al\u00e1n aspuru-guzik", "ryan p adams"], "accepted": true, "id": "1509.09292"}, "pdf": {"name": "1509.09292.pdf", "metadata": {"source": "CRF", "title": "Convolutional Networks on Graphs for Learning Molecular Fingerprints", "authors": ["David Duvenaud", "Dougal Maclaurin", "Jorge Aguilera-Iparraguirre", "Rafael G\u00f3mez-Bombarelli", "Timothy Hirzel", "Al\u00e1n Aspuru-Guzik", "Ryan P. Adams"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Recent work in materials design has applied neural networks to virtual screening, where the task is to predict the properties of novel molecules by generalizing from examples. One difficulty with this task is that the input to the predictor, a molecule, can be of arbitrary size and shape. Most machine learning pipelines can only handle inputs of a fixed size. The current state of the art is to use offthe-shelf fingerprint software to compute fixed-dimensional feature vectors, and use those features as inputs to a fully-connected deep neural network or other standard machine learning method. This formula was followed by [28, 3, 19]. During training, the molecular fingerprints were treated as fixed.\nIn this paper, we replace the bottom layer of this stack \u2013 the fixed molecular fingerprints \u2013 with a differentiable neural network whose input is a graph representing the original molecule. In this graph, vertices represent individual atoms and edges represent bonds. The lower layers of this network is convolutional in the sense that the same local filter is applied to each atom and its neighborhood. After several such layers, a global pooling step combines features from all the atoms in the molecule.\nNeural graph fingerprints offer several advantages over fixed fingerprints:\n\u2022 Predictive performance. By using data adapting to the task at hand, machine-optimized fingerprints can provide substantially better predictive performance than fixed fingerprints. We compare the effectiveness of neural graph fingerprints against standard fingerprints at predicting solubility, drug efficacy, and organic photovoltaic efficiency.\n\u2022 Parsimony. Fixed fingerprints must be extremely large to encode all possible substructures without overlap. For example, [28] used a fingerprint vector of size 43,000, after having removed rarely-occurring features. Differentiable fingerprints can be optimized to encode only relevant features, reducing downstream computation and regularization requirements.\n\u2022 Interpretability. Standard fingerprints encode each fragment differently (up to random collisions), with no notion of similarity between fragments. Each feature of a neural graph fingerprint can be activated by similar but distinct molecular fragments, making the feature representation more meaningful.\n\u2020Equal contribution.\nar X\niv :1\n50 9.\n09 29\n2v 1\n[ cs\n.L G\n] 3\n0 Se\np 20"}, {"heading": "2 Circular fingerprints", "text": "The state of the art in molecular fingerprints are extended-connectivity circular fingerprints (ECFP) [21]. Circular fingerprints [6] are a refinement of the Morgan algorithm [17], designed to identify which substructures are present in a molecule in a way that is invariant to atom-relabeling.\nCircular fingerprints generate each layer\u2019s features by applying a fixed hash function to the concatenated features of the neighborhood in the previous layer. The results of these hashes are then treated as integer indices, where a 1 is written to the fingerprint vector at the index given by the feature vector at each node in the graph. Figure 1(left) shows a sketch of this computational architecture. Ignoring collisions, each index of the fingerprint denotes the presence of a particular substructure. The size of the substructures represented by each index depends on the depth of the network. Thus the number of layers is referred to as the \u2018radius\u2019 of the fingerprints.\nCircular fingerprints are analogous to convolutional networks in that they apply the same operation locally everywhere, and combine information in a global pooling step."}, {"heading": "3 Creating a differentiable fingerprint", "text": "The space of possible network architectures is large. In the spirit of starting from a known-good configuration, we chose an architecture analogous to existing fingerprints. This section describes our replacement of each discrete operation in circular fingerprints with a differentiable analog.\nHashing The purpose of the hash functions applied at each layer of circular fingerprints is to combine information about each atom and its neighboring substructures. This ensures that any change in a fragment, no matter how small, will lead to a different fingerprint index being activated. We replace the hash operation with a single layer of a neural network. Using a smooth function allows the activations to be similar when the local molecular structure varies in minor ways.\nIndexing Circular fingerprints use an indexing operation to combine each atom\u2019s feature vector into a fingerprint of the whole molecule. Each atom sets a single bit of the fingerprint to one, at an index determined by the hash of its feature vector. This pooling-like operation converts an arbitrary-sized graph into a fixed-sized vector. For small molecules and a large fingerprint length, the fingerprints are always sparse. We use the softmax operation as a differentiable analog of indexing. In essence, each atom is asked to classify itself as belonging to a single category. The sum of all these classification label vectors produces the final fingerprint. This operation is analogous to the pooling operation in standard convolutional neural networks.\nAlgorithm 1 Circular fingerprints 1: Input: molecule, radius R, fingerprint\nlength S 2: Initialize: fingerprint vector f \u2190 0S 3: for each atom a in molecule 4: ra \u2190 g(a) . lookup atom features 5: for L = 1 to R . for each layer 6: for each atom a in molecule 7: r1 . . . rN = neighbors(a) 8: v\u2190 [ra, r1, . . . , rN ] . concatenate 9: ra \u2190 hash(v) . hash function 10: i\u2190 mod(ra, S) . convert to index 11: fi \u2190 1 . Write 1 at index 12: Return: binary vector f\nAlgorithm 2 Neural graph fingerprints 1: Input: molecule, radius R, hidden weights H11 . . . H 5 R, output weights W1 . . .WR\n2: Initialize: fingerprint vector f \u2190 0S 3: for each atom a in molecule 4: ra \u2190 g(a) . lookup atom features 5: for L = 1 to R . for each layer 6: for each atom a in molecule 7: r1 . . . rN = neighbors(a) 8: v\u2190 ra + \u2211 N\ni=1 ri . sum 9: ra \u2190 \u03c3(vHNL ) . smooth function 10: i\u2190 softmax(raWL) . sparsify 11: f \u2190 f + i . add to fingerprint 12: Return: real-valued vector f\nFigure 2: Pseudocode of circular fingerprints (left) and neural graph fingerprints (right). Differences are highlighted in blue. Every non-differentiable operation is replaced with a differentiable analog.\nCanonicalization Circular fingerprints are identical regardless of the ordering of atoms in each neighborhood. This invariance is achieved by sorting the neighboring atoms according to their features, and bond features. We experimented with this sorting scheme, and also with applying the local feature transform on all possible permutation of the local neighborhood. An alternative to canonicalization is to apply a permutation-invariant function, such as summation. In the interests of simplicity and scalability, we chose summation.\nAlgorithms 1 and 2 summarize these two algorithms and highlight their differences. Given a fingerprint length L, and F features at each layer, the parameters of neural graph fingerprints consist of a separate output weight matrix of size F \u00d7 L for each layer, as well as a set of hidden-to-hidden weight matrices of size F \u00d7 F at each layer, one for each possible number of bonds an atom can have (up to 5 in organic molecules)."}, {"heading": "4 Experiments", "text": "Circular fingerprints can be interpreted as a special case of neural graph fingerprints having large random weights. This is reasonable to expect, since in the limit of large input weights, tanh nonlinearities approach step functions, which when concatenated resemble a hash function. Also, in the limit of large input weights, the softmax operator approaches a one-hot-coded argmax operator, which is analogous to an indexing operation.\nOne use for molecular fingerprints is to compute distances between molecules. We examined whether ECFP-based distances were similar to random neural fingerprint-based distances. Figure 3 (left) shows a scatterplot of pairwise distances calculated using either circular or neural fingerprints. Fingerprints had length 2048, and were calculated on molecules from the solubility dataset [4]. Distance was measured using a continuous generalization of the Tanimoto (a.k.a. Jaccard) similarity measure, given by\ndistance(x,y) = 1\u2212 \u2211 min(xi, yi) /\u2211 max(xi, yi) (1)\nThere is a correlation of r = 0.823 between the distances. The line of points on the far left shows that for some pairs of molecules, binary ECFP fingerprints have exactly zero overlap.\nFigure 3 (right) shows that the predictive performance of random neural fingerprints is similar to that of circular fingerprints. Shown are average predictive performance on the same dataset using linear regression on top of fingerprints. Both curves follow a similar trajectory, suggesting that randomly initialized neural fingerprints are similar to circular fingerprints. In contrast, the performance of neural fingerprints with small random weights follows a different curve, and is substantially better. This suggests the possibility that even for untrained neural weights, their relatively smooth activation helps generalization."}, {"heading": "4.1 Examining learned features", "text": "To demonstrate that neural graph fingerprints are interpretable, we show examples of classes of substructures which activate individual features in a fingerprint. Circular fingerprint features can each only be activated by a single fragment of a single radius, except for accidental collisions. In contrast, neural graph fingerprints can be activated by variations of the same structure, making them more parsimonious and interpretable.\nSolubility features Figure 4 shows the fragments that maximally activate the most predictive features of a fingerprint. The fingerprint network was trained as inputs to a linear model predicting solubility, as measured in [4]. The top fingerprint has a positive predictive relationship with solubility, and is most activated by fragments containing a hydrophilic R-OH group, a standard indicator of solubility. The bottom fingerprint, strongly predictive of insolubility, is activated by non-polar repeated ring structures.\nToxicity features We trained the same model architecture to predict toxicity, as measured in two different datasets in [26]. Figure 5 shows fragments which maximally activate the feature most predictive of toxicity.\n[27] constructed similar visualizations, but in a semi-manual way: to determine which toxic fragments activated a given neuron, they searched over a hand-made list of toxic substructures and chose the one most correlated with a given neuron. In contrast, our visualizations are generated automatically, without the need to restrict the range of possible answers beforehand."}, {"heading": "4.2 Predictive Performance", "text": "We ran several experiments to compare the predictive performance of neural graph fingerprints to that of the standard state-of-the-art setup: circular fingerprints fed into a fully-connected neural network.\nExperimental setup Our pipeline takes as input the SMILES [30] string encoding of each molecule, which is then converted into a graph using RDKit [20]. We also used RDKit to produce the extended circular fingerprints used in the baseline. Hydrogen atoms were treated implicitly.\nIn our convolutional networks, the initial atom and bond features were chosen to be similar to those used by ECFP: Initial atom features concatenated a one-hot encoding of the atom\u2019s element, its degree, the number of attached hydrogen atoms, and the implicit valence, and an aromaticity indicator. The bond features were a concatenation of whether the bond type was single, double, triple, or aromatic, whether the bond was conjugated, and whether the bond was part of a ring.\nTraining and Architecture Training used batch normalization [11]. We also experimented with tanh vs relu activation functions for both the neural fingerprint network layers and the fullyconnected network layers. relu had a slight but consistent performance advantage on the validation set. We also experimented with dropconnect [29], a variant of dropout in which weights are randomly set to zero instead of hidden units, but found that it led to worse validation error in general. Each experiment optimized for 10000 minibatches of size 100 using the Adam algorithm [13], a variant of RMSprop that includes momentum.\nHyperparameter Optimization To optimize hyperparameters, we used random search. The hyperparameters of all methods were optimized using 50 trials for each cross-validation fold. The following hyperparameters were optimized: log learning rate, log of the initial weight scale, the log L2 penalty, fingerprint length, fingerprint depth (up to 6), and the size of the hidden layer in the fully-connected network. Additionally, the size of the hidden feature vector in the convolutional neural fingerprint networks was optimized.\nDatasets We compared the performance of standard circular fingerprints against neural graph fingerprints on a variety of domains:\n\u2022 Solubility: The aqueous solubility of 1144 molecules as measured by [4]. \u2022 Drug efficacy: The half-maximal effective concentration (EC50) in vitro of 10,000\nmolecules against a sulfide-resistant strain of P. falciparum, the parasite that causes malaria, as measured by [5].\n\u2022 Organic photovoltaic efficiency: The Harvard Clean Energy Project [8] uses expensive DFT simulations to estimate the photovoltaic efficiency of organic molecules. We used a subset of 20,000 molecules from this dataset.\nPredictive accuracy We compared the performance of circular fingerprints and neural graph fingerprints under two conditions: In the first condition, predictions were made by a linear layer using the fingerprints as input. In the second condition, predictions were made by a one-hidden-layer neural network using the fingerprints as input. The neural graph fingerprints were simultaneously optimized during training by propagating through the linear and neur Results are summarized in\nTable 4.2. In all experiments, the neural graph fingerprints match or beat the accuracy of circular fingerprints, and the methods with a neural network on top of the fingerprints typically outperformed the linear layers.\nSoftware Automatic differentiation (AD) software packages such as Theano [1] significantly speed up development time by providing gradients automatically, but can only handle limited control structures and indexing. Since we required relatively complex control flow and indexing in order to implement variants of Algorithm 2, we used a more flexible automatic differentiation package for Python called Autograd (github.com/HIPS/autograd). This package handles standard Numpy [18] code, and can differentiate code containing while loops, branches, and indexing.\nCode for computing neural fingerprints and producing visualizations is available at github.com/HIPS/neural-fingerprint."}, {"heading": "5 Limitations", "text": "Computational cost Neural fingerprints have the same asymptotic complexity in the number of atoms and the depth of the network as circular fingerprints, but have additional terms due to the matrix multiplies necessary to transform the feature vector at each step. To be precise, computing the neural fingerprint of depthR, fingerprint length L of a molecule withN atoms using a molecular convolutional net having F features at each layer costs O(RNFL + RNF 2). In practice, training neural networks on top of circular fingerprints usually took several minutes, while training both the fingerprints and the network on top took on the order of an hour.\nLimited computation at each layer How complicated should we make the function that goes from one layer of the network to the next? In this paper we chose the simplest feasible architecture: a single layer of a neural network. However, it may be fruitful to apply multiple layers of nonlinearities between each message-passing step (as in [22]), or to make information preservation easier by adapting the Long Short-Term Memory [10] architecture to pass information upwards.\nLimited information propagation across the graph The local message-passing architecture developed in this paper scales well in the size of the graph (due to the low degree of organic molecules), but its ability to propagate information across the graph is limited by the depth of the network. This may be appropriate for small graphs such as those representing the small organic molecules used in this paper. However, in the worst case, it can take a depth N2 network to distinguish between graphs of size N . To avoid this problem, [2] proposed a hierarchical clustering of graph substructures. A tree-structured network could examine the structure of the entire graph using only log(N) layers, but would require learning to parse molecules. Techniques from natural language processing [25] might be fruitfully adapted to this domain.\nInability to distinguish stereoisomers Special bookkeeping is required to distinguish between stereoisomers, including enantomers (mirror images of molecules) or cis/trans isomers (rotation around double bonds). Most circular fingerprint implementations have the option to make these distinctions. Neural fingerprints could be extended to be sensitive to stereoisomers, but this remains a task for future work."}, {"heading": "6 Related work", "text": "This work is similar in spirit to the neural Turing machine [7], in the sense that we take an existing discrete computational architecture, and make each part differentiable in order to do gradient-based optimization.\nConvolutional neural networks Convolutional neural networks have been used to model images, speech, and time series [14]. However, standard convolutional architectures use a fixed computational graph, making them difficult to apply to objects of varying size or structure, such as molecules. More recently, [12] and others have developed a convolutional neural network architecture for modeling sentences of varying length.\nNeural fingerprints The most closely related work is [15], who build a neural network having graph-valued inputs. Their approach is to remove all cycles and build the graph into a tree structure, choosing one atom to be the root. A recursive neural network [23, 24] is then run from the leaves to the root to produce a fixed-size representation. Because a graph having N nodes has N possible roots, all N possible graphs are constructed. The final descriptor is a sum of the representations computed by all distinct graphs. There are as many distinct graphs as there are atoms in the network. The computational cost of this method thus grows as O(F 2N2), where F is the size of the feature vector and N is the number of atoms, making it less suitable for large molecules.\nNeural nets for quantitative structure-activity relationship (QSAR) The modern standard for predicting properties of novel molecules is to compose circular fingerprints with fully-connected neural networks or other regression methods. [3] used circular fingerprints as inputs to an ensemble of neural networks, Gaussian processes, and random forests. [19] used circular fingerprints (of depth 2) as inputs to a multitask neural network, showing that multiple tasks helped performance.\nNeural networks on fixed graphs [2] introduce convolutional networks on graphs in the regime where the graph structure is fixed, and each training example differs only in having different features at the vertices of the same graph. In contrast, our networks address the situation where each training input is a different graph.\nNeural networks on input-dependent graphs [22] propose a neural network model for graphs having an interesting training procedure. The forward pass consists of running a message-passing scheme to equilibrium, a fact which allows the reverse-mode gradient to be computed without storing the entire forward computation. They apply their network to predicting mutagenesis of molecular compounds as well as web page rankings. [16] also propose a neural network model for graphs with a learning scheme whose inner loop optimizes not the training loss, but rather the correlation between each newly-proposed vector and the training error residual. They apply their model to a dataset of boiling points of 150 molecular compounds. Our paper builds on these ideas, with the\nfollowing differences: Our method replaces their complex training algorithms with simple gradientbased optimization, generalizes existing circular fingerprint computations, and applies these networks in the context of modern QSAR pipelines which use neural networks on top of the fingerprints to increase model capacity.\nUnrolled inference algorithms [9] and others have noted that iterative inference procedures sometimes resemble the feedforward computation of a recurrent neural network. One natural extension of these ideas is to parameterize each inference step, and train a neural network to approximately match the output of exact inference using only a small number of iterations. The neural fingerprint, when viewed in this light, resembles an unrolled message-passing algorithm on the original graph."}, {"heading": "7 Conclusion", "text": "We generalized existing hand-crafted molecular features to allow their optimization for diverse tasks. By making each operation in the feature pipeline differentiable, we can use standard neural-network training methods to scalably optimize the parameters of these neural molecular fingerprints end-toend. We demonstrated the interpretability and predictive performance of these new fingerprints.\nData-driven features have already replaced hand-crafted features in speech recognition, machine vision, and natural-language processing. Carrying out the same task for virtual screening, drug design, and materials design is a natural next step."}, {"heading": "Acknowledgments", "text": "We thank Edward Pyzer-Knapp, Jennifer Wei, and Samsung Advanced Institute of Technology for their support."}], "references": [{"title": "Theano: new features and speed improvements", "author": ["Fr\u00e9d\u00e9ric Bastien", "Pascal Lamblin", "Razvan Pascanu", "James Bergstra", "Ian J. Goodfellow", "Arnaud Bergeron", "Nicolas Bouchard", "Yoshua Bengio"], "venue": "Deep Learning and Unsupervised Feature Learning NIPS 2012 Workshop,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Spectral networks and locally connected networks on graphs", "author": ["Joan Bruna", "Wojciech Zaremba", "Arthur Szlam", "Yann LeCun"], "venue": "arXiv preprint arXiv:1312.6203,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Multi-task neural networks for QSAR predictions", "author": ["George E. Dahl", "Navdeep Jaitly", "Ruslan Salakhutdinov"], "venue": "arXiv preprint arXiv:1406.1231,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "ESOL: Estimating aqueous solubility directly from molecular structure", "author": ["John S. Delaney"], "venue": "Journal of Chemical Information and Computer Sciences,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2004}, {"title": "Thousands of chemical starting points for antimalarial lead identification", "author": ["Francisco-Javier Gamo", "Laura M Sanz", "Jaume Vidal", "Cristina de Cozar", "Emilio Alvarez", "Jose-Luis Lavandera", "Dana E Vanderwall", "Darren VS Green", "Vinod Kumar", "Samiul Hasan"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "Circular fingerprints: flexible molecular descriptors with applications from physical chemistry to ADME", "author": ["Robert C. Glem", "Andreas Bender", "Catrin H. Arnby", "Lars Carlsson", "Scott Boyer", "James Smith"], "venue": "IDrugs: the investigational drugs journal,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2006}, {"title": "The Harvard clean energy project: large-scale computational screening and design of organic photovoltaics on the world community", "author": ["Johannes Hachmann", "Roberto Olivares-Amaya", "Sule Atahan-Evrenk", "Carlos Amador-Bedolla", "Roel S S\u00e1nchez-Carrera", "Aryeh Gold-Parker", "Leslie Vogt", "Anna M Brockway", "Al\u00e1n Aspuru-Guzik"], "venue": "grid. The Journal of Physical Chemistry Letters,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "Deep unfolding: Model-based inspiration of novel deep architectures", "author": ["John R Hershey", "Jonathan Le Roux", "Felix Weninger"], "venue": "arXiv preprint arXiv:1409.2574,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1997}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["Sergey Ioffe", "Christian Szegedy"], "venue": "arXiv preprint arXiv:1502.03167,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "A convolutional neural network for modelling sentences", "author": ["Nal Kalchbrenner", "Edward Grefenstette", "Phil Blunsom"], "venue": "Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "arXiv preprint arXiv:1412.6980,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}, {"title": "Convolutional networks for images, speech, and time series", "author": ["Yann LeCun", "Yoshua Bengio"], "venue": "The handbook of brain theory and neural networks,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1995}, {"title": "Deep architectures and deep learning in chemoinformatics: the prediction of aqueous solubility for drug-like molecules", "author": ["Alessandro Lusci", "Gianluca Pollastri", "Pierre Baldi"], "venue": "Journal of chemical information and modeling,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2013}, {"title": "Neural network for graphs: A contextual constructive approach", "author": ["Alessio Micheli"], "venue": "Neural Networks, IEEE Transactions on,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2009}, {"title": "The generation of a unique machine description for chemical structure", "author": ["H.L. Morgan"], "venue": "Journal of Chemical Documentation,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1965}, {"title": "Python for scientific computing", "author": ["Travis E Oliphant"], "venue": "Computing in Science & Engineering,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2007}, {"title": "Massively multitask networks for drug", "author": ["Bharath Ramsundar", "Steven Kearnes", "Patrick Riley", "Dale Webster", "David Konerding", "Vijay Pande"], "venue": "discovery. arXiv:1502.02072,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "Extended-connectivity fingerprints", "author": ["David Rogers", "Mathew Hahn"], "venue": "Journal of Chemical Information and Modeling,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2010}, {"title": "The graph neural network model", "author": ["F. Scarselli", "M. Gori", "Ah Chung Tsoi", "M. Hagenbuchner", "G. Monfardini"], "venue": "Neural Networks, IEEE Transactions on,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2009}, {"title": "Dynamic pooling and unfolding recursive autoencoders for paraphrase detection", "author": ["Richard Socher", "Eric H Huang", "Jeffrey Pennin", "Christopher D Manning", "Andrew Y Ng"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2011}, {"title": "Semi-supervised recursive autoencoders for predicting sentiment distributions", "author": ["Richard Socher", "Jeffrey Pennington", "Eric H Huang", "Andrew Y Ng", "Christopher D Manning"], "venue": "In Proceedings of the Conference on Empirical Methods in Natural Language Processing,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2011}, {"title": "Improved semantic representations from tree-structured long short-term memory networks", "author": ["Kai Sheng Tai", "Richard Socher", "Christopher D Manning"], "venue": "arXiv preprint arXiv:1503.00075,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2015}, {"title": "Toxicity prediction using deep learning", "author": ["Thomas Unterthiner", "Andreas Mayr", "G\u00fcnter Klambauer", "Sepp Hochreiter"], "venue": "arXiv preprint arXiv:1503.01445,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2015}, {"title": "Deep learning as an opportunity in virtual screening", "author": ["Thomas Unterthiner", "Andreas Mayr", "G \u00fcnter Klambauer", "Marvin Steijaert", "J\u00f6rg Wenger", "Hugo Ceulemans", "Sepp Hochreiter"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2014}, {"title": "Regularization of neural networks using dropconnect", "author": ["Li Wan", "Matthew Zeiler", "Sixin Zhang", "Yann L. Cun", "Rob Fergus"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2013}, {"title": "SMILES, a chemical language and information system", "author": ["David Weininger"], "venue": "Journal of chemical information and computer sciences,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 1988}], "referenceMentions": [{"referenceID": 24, "context": "This formula was followed by [28, 3, 19].", "startOffset": 29, "endOffset": 40}, {"referenceID": 2, "context": "This formula was followed by [28, 3, 19].", "startOffset": 29, "endOffset": 40}, {"referenceID": 17, "context": "This formula was followed by [28, 3, 19].", "startOffset": 29, "endOffset": 40}, {"referenceID": 24, "context": "For example, [28] used a fingerprint vector of size 43,000, after having removed rarely-occurring features.", "startOffset": 13, "endOffset": 17}, {"referenceID": 18, "context": "2 Circular fingerprints The state of the art in molecular fingerprints are extended-connectivity circular fingerprints (ECFP) [21].", "startOffset": 126, "endOffset": 130}, {"referenceID": 5, "context": "Circular fingerprints [6] are a refinement of the Morgan algorithm [17], designed to identify which substructures are present in a molecule in a way that is invariant to atom-relabeling.", "startOffset": 22, "endOffset": 25}, {"referenceID": 15, "context": "Circular fingerprints [6] are a refinement of the Morgan algorithm [17], designed to identify which substructures are present in a molecule in a way that is invariant to atom-relabeling.", "startOffset": 67, "endOffset": 71}, {"referenceID": 3, "context": "Fingerprints had length 2048, and were calculated on molecules from the solubility dataset [4].", "startOffset": 91, "endOffset": 94}, {"referenceID": 3, "context": "The fingerprint network was trained as inputs to a linear model predicting solubility, as measured in [4].", "startOffset": 102, "endOffset": 105}, {"referenceID": 23, "context": "[27] constructed similar visualizations, but in a semi-manual way: to determine which toxic fragments activated a given neuron, they searched over a hand-made list of toxic substructures and chose the one most correlated with a given neuron.", "startOffset": 0, "endOffset": 4}, {"referenceID": 26, "context": "Experimental setup Our pipeline takes as input the SMILES [30] string encoding of each molecule, which is then converted into a graph using RDKit [20].", "startOffset": 58, "endOffset": 62}, {"referenceID": 9, "context": "Training and Architecture Training used batch normalization [11].", "startOffset": 60, "endOffset": 64}, {"referenceID": 25, "context": "We also experimented with dropconnect [29], a variant of dropout in which weights are randomly set to zero instead of hidden units, but found that it led to worse validation error in general.", "startOffset": 38, "endOffset": 42}, {"referenceID": 11, "context": "Each experiment optimized for 10000 minibatches of size 100 using the Adam algorithm [13], a variant of RMSprop that includes momentum.", "startOffset": 85, "endOffset": 89}, {"referenceID": 3, "context": "Dataset Solubility [4] Drug efficacy [5] Photovoltaic efficiency [8] Units log Mol/L EC50 in nM percent Predict mean 4.", "startOffset": 19, "endOffset": 22}, {"referenceID": 4, "context": "Dataset Solubility [4] Drug efficacy [5] Photovoltaic efficiency [8] Units log Mol/L EC50 in nM percent Predict mean 4.", "startOffset": 37, "endOffset": 40}, {"referenceID": 6, "context": "Dataset Solubility [4] Drug efficacy [5] Photovoltaic efficiency [8] Units log Mol/L EC50 in nM percent Predict mean 4.", "startOffset": 65, "endOffset": 68}, {"referenceID": 3, "context": "\u2022 Solubility: The aqueous solubility of 1144 molecules as measured by [4].", "startOffset": 70, "endOffset": 73}, {"referenceID": 4, "context": "falciparum, the parasite that causes malaria, as measured by [5].", "startOffset": 61, "endOffset": 64}, {"referenceID": 6, "context": "\u2022 Organic photovoltaic efficiency: The Harvard Clean Energy Project [8] uses expensive DFT simulations to estimate the photovoltaic efficiency of organic molecules.", "startOffset": 68, "endOffset": 71}, {"referenceID": 0, "context": "Software Automatic differentiation (AD) software packages such as Theano [1] significantly speed up development time by providing gradients automatically, but can only handle limited control structures and indexing.", "startOffset": 73, "endOffset": 76}, {"referenceID": 16, "context": "This package handles standard Numpy [18] code, and can differentiate code containing while loops, branches, and indexing.", "startOffset": 36, "endOffset": 40}, {"referenceID": 19, "context": "However, it may be fruitful to apply multiple layers of nonlinearities between each message-passing step (as in [22]), or to make information preservation easier by adapting the Long Short-Term Memory [10] architecture to pass information upwards.", "startOffset": 112, "endOffset": 116}, {"referenceID": 8, "context": "However, it may be fruitful to apply multiple layers of nonlinearities between each message-passing step (as in [22]), or to make information preservation easier by adapting the Long Short-Term Memory [10] architecture to pass information upwards.", "startOffset": 201, "endOffset": 205}, {"referenceID": 1, "context": "To avoid this problem, [2] proposed a hierarchical clustering of graph substructures.", "startOffset": 23, "endOffset": 26}, {"referenceID": 22, "context": "Techniques from natural language processing [25] might be fruitfully adapted to this domain.", "startOffset": 44, "endOffset": 48}, {"referenceID": 12, "context": "Convolutional neural networks Convolutional neural networks have been used to model images, speech, and time series [14].", "startOffset": 116, "endOffset": 120}, {"referenceID": 10, "context": "More recently, [12] and others have developed a convolutional neural network architecture for modeling sentences of varying length.", "startOffset": 15, "endOffset": 19}, {"referenceID": 13, "context": "Neural fingerprints The most closely related work is [15], who build a neural network having graph-valued inputs.", "startOffset": 53, "endOffset": 57}, {"referenceID": 20, "context": "A recursive neural network [23, 24] is then run from the leaves to the root to produce a fixed-size representation.", "startOffset": 27, "endOffset": 35}, {"referenceID": 21, "context": "A recursive neural network [23, 24] is then run from the leaves to the root to produce a fixed-size representation.", "startOffset": 27, "endOffset": 35}, {"referenceID": 2, "context": "[3] used circular fingerprints as inputs to an ensemble of neural networks, Gaussian processes, and random forests.", "startOffset": 0, "endOffset": 3}, {"referenceID": 17, "context": "[19] used circular fingerprints (of depth 2) as inputs to a multitask neural network, showing that multiple tasks helped performance.", "startOffset": 0, "endOffset": 4}, {"referenceID": 1, "context": "Neural networks on fixed graphs [2] introduce convolutional networks on graphs in the regime where the graph structure is fixed, and each training example differs only in having different features at the vertices of the same graph.", "startOffset": 32, "endOffset": 35}, {"referenceID": 19, "context": "Neural networks on input-dependent graphs [22] propose a neural network model for graphs having an interesting training procedure.", "startOffset": 42, "endOffset": 46}, {"referenceID": 14, "context": "[16] also propose a neural network model for graphs with a learning scheme whose inner loop optimizes not the training loss, but rather the correlation between each newly-proposed vector and the training error residual.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "Unrolled inference algorithms [9] and others have noted that iterative inference procedures sometimes resemble the feedforward computation of a recurrent neural network.", "startOffset": 30, "endOffset": 33}], "year": 2015, "abstractText": "Predicting properties of molecules requires functions that take graphs as inputs. Molecular graphs are usually preprocessed using hash-based functions to produce fixed-size fingerprint vectors, which are used as features for making predictions. We introduce a convolutional neural network that operates directly on graphs, allowing end-to-end learning of the feature pipeline. This architecture generalizes standard molecular fingerprints. We show that these data-driven features are more interpretable, and have better predictive performance on a variety of tasks.", "creator": "LaTeX with hyperref package"}}}