{"id": "1510.08568", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Oct-2015", "title": "Feature-Based Diversity Optimization for Problem Instance Classification", "abstract": "Understanding the behavior of heuristic search methods is a challenge, even for simple local search methods such as 2-OPT for the traveling salesperson problem. In this article, we present a general framework that is capable of constructing a variety of instances that are difficult or simple for a particular search heuristics. Such a diverse set can be obtained by using an evolutionary algorithm to construct hard or simple instances that differ in terms of different features of the underlying problem. Looking at the constructed instance sets, we show that many combinations of two or three features allow a good classification of TSP instances in terms of whether they are difficult to solve with 2-OPT.", "histories": [["v1", "Thu, 29 Oct 2015 05:40:54 GMT  (567kb,D)", "https://arxiv.org/abs/1510.08568v1", "15 pages, 15 figures"], ["v2", "Fri, 8 Apr 2016 05:12:48 GMT  (658kb,D)", "http://arxiv.org/abs/1510.08568v2", "20 pages, 18 figures"]], "COMMENTS": "15 pages, 15 figures", "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["wanru gao", "samadhi nallaperuma", "frank neumann"], "accepted": false, "id": "1510.08568"}, "pdf": {"name": "1510.08568.pdf", "metadata": {"source": "CRF", "title": "Feature-Based Diversity Optimization for Problem Instance Classification", "authors": ["Wanru Gao"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Heuristic search methods such as local search, simulated annealing, evolutionary algorithms and ant colony optimization have been shown to be very successful for various combinatorial optimization problems. Although they usually don\u2019t come with performance guarantees on their runtime and/or approximation behaviour, they often perform very well in several situations. Understanding the conditions under which optimization algorithms perform well is essential for automatic algorithm selection, configuration and effective algorithm design. In both the artificial intelligence (AI) [23, 9, 22, 5, 7] and operational research communities [17, 21], this topic has become a major point of interest.\nar X\niv :1\n51 0.\n08 56\n8v 2\nThe feature-based analysis of heuristic search algorithms has become an important part in understanding such type of algorithms [11, 18]. This approach characterizes algorithms and their performance for a given problem based on features of problem instances. Thereby, it provides an important tool for bridging the gap between pure experimental investigations and mathematical methods for analysing the performance of search algorithms [15, 10, 6]. Current methods for the feature-based analysis are based on constructing hard and easy instances for an investigated search heuristic and a given optimization problem by evolving instances using an evolutionary algorithm [11, 14, 13]. This evolutionary algorithm constructs problem instances where the examined algorithm either shows a bad (good) approximation behaviour and/or requires a large (small) computational effort to come up with good or optimal solutions. Although the evolutionary algorithm for constructing such instances is usually run several times to obtain a large set of hard (easy) instances, the question arises whether the results in terms of features of the instances obtained give a good characterization of problem difficulty.\nIn the paper, we propose a new approach of constructing hard and easy instances. Following some recent work on using evolutionary algorithms for generating diverse sets of instances that are all of high quality [19, 20], we introduce an evolutionary algorithm which maximizes diversity of the obtained instances in terms of a given feature. Our approach allows to generate a set of instances that is much more diverse with respect to the problem feature at hand. Carrying out this process for several features of the considered problem and algorithm gives a much better classification of instances according to their difficulty of being solved by the considered algorithm.\nTo show the benefit of our approach compared to previous methods, we consider the classical 2-OPT algorithm for the TSP. Previous feature-based analyses have already considered hard and easy instances in terms of approximation ratio and analyzed the features of such hard (easy) instances obtained by an evolutionary algorithm. The experimental results of our new approach show that diversity optimization of the features results in an improved coverage of the feature space over classical instance generation methods. In particular, the results show that for some combinations of two features it is possible to classify hard and easy instances into two clusters with a wider coverage of the feature space compared to the classical methods. Moreover, the three-feature combinations further improve the classification of hard and easy instances for most of the feature combinations. Furthermore, a classification model is built using these diverse instances that can classify TSP instances based on hardness for 2-OPT.\nThe remainder of this paper is organized as follows. Firstly, we introduce the Euclidean TSP and the background on feature based analysis. Afterwards, we state our diversity optimization approach for evolving instances according to feature values and report on the impact of diversity optimization in terms of the range of feature values. As features value can be very diverse both for easy and hard instances, we consider the combinations of several features for instance classification afterwards. We then build a classification model that can classify instances based on hardness and finally finish with some conclusions."}, {"heading": "2 Background", "text": "We consider the classical NP-hard Euclidean Traveling Salesperson problem (TSP) as the example problem for evolving hard and easy instances which have a diverse set of features. Our methodology can be applied to any optimization problem, but using the TSP in our study has the advantage that it has already been investigated extensively from different perspectives including the area of feature-based analysis.\nThe input of the problem is given by a set V = {v1, ...,vn} of n cities in the Euclidean plane and Euclidean distances d : V \u00d7V \u2192R\u22650 between the cities. The goal is to find a Hamiltonian cycle whose sum of distances is minimal. A candidate solution for the TSP is often represented by a permutation \u03c0 = (\u03c01, . . . ,\u03c0n) of the n cities and the goal is to find a permutation \u03c0\u2217 which minimizes the tour length given by\nc(\u03c0) = d(\u03c0n,\u03c01)+ n\u22121\n\u2211 i=1 d(\u03c0i,\u03c0i+1).\nFor our investigations cities are always in the normalized plane [0,1]2, i. e. each city has an x- and y-coordinate in the interval [0,1]. In following, a TSP instance always consists of a set of n points in [0,1]2 and the Euclidean distances between them.\nLocal search heuristics have been shown to be very successful when dealing with the TSP and the most prominent local search operator is the 2-OPT operator [4]. The resulting local search algorithm starts with a random permutation of the cities and repeatedly checks whether removing two edges and reconnecting the two resulting paths by two other edges leads to a shorter tour. If no improvement can be found by carrying out any 2-OPT operation, the tour is called locally optimal and the algorithm terminates.\nThe key factor in the area of feature-based analysis is to identify the problem features and their contribution to the problem hardness for a particular algorithm and problem combination. This can be achieved through investigating hard and easy instances of the problem. Using an evolutionary algorithm, it is possible to evolve sets of hard and easy instances by maximizing or minimizing the fitness (tour length in the case of the TSP) of each instance [21, 17, 11, 18]. However, none of these approaches have considered the diversity of the instances explicitly. Within this study we expect to improve the evolutionary algorithm based instance generation approach by introducing diversity optimization.\nThe structural features are dependent on the underlying problem. In [11], there are 47 features in 8 groups used to provide an understanding of algorithm performance for the TSP. The different feature classes established are distance features, mode features, cluster features, centroid features, MST features, angle features and convex hull features. The feature values are regarded as indicators which allow to predict the performance of a given algorithm on a given instance."}, {"heading": "3 Feature-Based Diversity Optimization", "text": "In this section, we introduce our approach of evolving a diverse set of easy or hard instances which are diverse with respect to important problem features. As in previous\nAlgorithm 1: (\u00b5 +\u03bb )-EAD 1 Initialize the population P with \u00b5 TSP instances of approximation ratio at least\n\u03b1h. 2 Let C \u2286 P where |C|= \u03bb . 3 For each I \u2208C, produce an offspring I\u2032 of I by mutation. If \u03b1A(I\u2032)> \u03b1h, add I\u2032\nto P. 4 While |P|> \u00b5 , remove an individual I = argminJ\u2208P d(J,P) uniformly at\nrandom. 5 Repeat step 2 to 4 until termination criterion is reached.\nstudies, we measure hardness of a given instance by the ratio of the solution quality obtained by the considered algorithm and the value of an optimal solution.\nThe approximation ratio of an algorithm A for a given instance I is defined as\n\u03b1A(I) = A(I)/OPT (I)\nwhere A(I) is value of the solution produced by algorithm A for the given instance I, and OPT (I) is value of an optimal solution for instance I. Within this study, A(I) is the tour length obtained by 2-OPT for a given TSP instance I and OPT (I) is the optimal tour length which we obtain in our experiments by using the exact TSP solver Concorde [1].\nWe propose to use an evolutionary algorithm to construct sets of instances of the TSP that are quantified as either easy or hard in terms of approximation and are diverse with respect to underlying features of the produced problem instances. Our evolutionary algorithm (shown in Algorithm 1) evolves instances which are diverse with respect to given features and meet given approximation ratio thresholds.\nThe algorithm is initialized with a population P consisting of \u00b5 TSP instances which have an approximation ratio at least \u03b1h in the case of generating a diverse set of hard instances. In the case of easy instances, we start with a population where all instances have an approximation ratio of at most \u03b1e and only instances of approximation ratio at most \u03b1e can be accepted for the next iteration. In each iteration, \u03bb \u2264 \u00b5 offspring are produced by selecting \u03bb parents and applying mutation to the selected individuals. Offsprings that don\u2019t meet the approximation threshold are rejected immediately.\nThe new parent population is formed by reducing the set consisting of parents and offsprings satisfying the approximation threshold until a set of \u00b5 solutions is achieved. This is done by removing instances one by one based on their contribution to the diversity according to the considered feature.\nThe core of our algorithm is the selection among individuals meeting the threshold values for the approximation quality according to feature values. Let I1, . . . , Ik be the elements of P and f (Ii) be their features values. Furthermore, assume that f (Ii)\u2208 [0,R], i.e. feature values are non-negative and upper bounded by R.\nWe assume that f (I1)\u2264 f (I2)\u2264 . . .\u2264 f (Ik) holds. The diversity contribution of an instance I to a population of instances P is defined as\nd(I,P) = c(I,P)\nwhere c(I,P) is a contribution based on other individuals in the population Let Ii be an individual for which f (Ii) 6= f (I1) and f (Ii) 6= f (Ik). We set\nc(Ii,P) = ( f (Ii)\u2212 f (Ii\u22121)) \u00b7 ( f (Ii+1)\u2212 f (Ii))\nwhich assigns the diversity contribution of an individual based on the next smaller and next larger feature values. If f (Ii) = f (I1) or f (Ii) = f (Ik), we set c(Ii,P) = R2 if there is no other individual I 6= Ii in P with f (I) = f (Ii) and c(Ii,P) = 0 otherwise. This implies an individual Ii with feature value equal to any other instances in the population gains c(Ii,P) = 0.\nFurthermore, an individual with the unique smallest and largest feature value always stays in the population when working with \u00b5 \u2265 2.\nIn [11], 47 features of TSP instances for characterizing easy and hard TSP instances have been studied. We consider 7 features coming from different feature classes which have shown to be well suited for classification and prediction. These features are:\n\u2022 angle mean :- mean value of the angles made by each point with its two nearest neighbor points\n\u2022 centroid mean distance to centroid :- mean value of the distances from the points to the centroid\n\u2022 chull area : - area covered by the convex hull\n\u2022 cluster 10pct mean distance to centroid :- mean value of the distances to cluster centroids at 10% levels of reachability\n\u2022 mst depth mean :- mean depth of the minimum spanning tree\n\u2022 nnds mean :- mean distance between nearest neighbours\n\u2022 mst dists mean :- mean distance of the minimum spanning tree\nWe refer the reader to [11] for a detailed explanation for each feature. We carry out our diversity optimization approach for these features and use the evolutionary algorithm to evolve for each feature a diverse population of instances that meets the approximation criteria for hard/easy instances given by the approximation ratio thresholds.\nAll programs in our experiments are written in R and run in R environment [16]. We use the functions in tspmeta package to compute the feature values [11].\nThe setting of the evolutionary algorithm for diversity optimization used in our experiments is as follows. We use \u00b5 = 30 and \u03bb = 5 for the parent and offspring population size, respectively. The 2-OPT algorithm is executed on each instance I five times with different initial solutions and we set A(I) to the average tour length obtained. The examined instance sizes n are 25, 50 and 100, which are denoted by the number of cities in one instance. Based on previous investigations in [11] and initial experimental investigations, we set \u03b1e = 1 for instances of size 25 and 50, and \u03b1e = 1.03 for instances of size 100. Evolving hard instances, we use \u03b1h = 1.15,1.18,1.2 for instances of size n = 25,50,100, respectively. The mutation operator picks in each step one city for the\ngiven parent uniformly at random and changes its x- and y-coordinator by choosing an offset according to the Normal-distribution with standard deviation \u03c3 . Coordinates that are out of the interval are reset to the value of the parent. Based on initial experiments we use two mutation operators with different values of \u03c3 . We use \u03c3 = 0.025 with probability 0.9 and \u03c3 = 0.05 with probability 0.1 in a mutation step. The evolutionary algorithm terminates after 10,000 generations which allows to obtain a good diversity for the considered features. For each n = 25,50,100 and each of the 7 features, a set of easy and hard instances are generated, which results in 42 independent runs of the (\u00b5+\u03bb )-EAD."}, {"heading": "4 Range of Feature Values", "text": "We first evaluate our diversity optimization approach in terms of the diversity that is obtained with respect to a single feature. Focusing on a single feature in each run provides the insight of the possible range of a certain feature value for hard or easy instances. The previous study [11], suggests that there are some differences in the possible range of feature values for easy and hard instances. We study the effect of the diversity optimization on the range of features by comparing the instances generated by diversity optimization to the instances generated by the conventional approach in [11]. Evolving hard instances based on the conventional evolutionary algorithm, the obtained instances have mean approximation ratios of 1.12 for n = 25, 1.16 for n = 50, and 1.18 for n = 100. For easy instances, the mean approximation ratios are 1 for n = 25,50 and 1.03 for n = 100.\nFigure 1 (left) presents the variation of the mean distance of the distances between points and the centroid feature (centroid mean distance to centroid) for hard and easy instances of the three considered sizes 25, 50 and 100. Each set consists of 100 instances generated by independent runs [11]. As shown in Figure 1 (left) the hard in-\nstances have higher feature values than for easy instances for all instance sizes. For example, for instance size 100 and for the hard instances the median value (indicated by the red line) is 0.4157 while its only 0.0.4032 for the easy instances. The respective range of the feature value is 0.0577 for the hard instances and 0.0645 for the easy instances. For the instances generated by diversity optimization (easy and hard instances are indicated by e (b) and h (b) respectively), there is a difference in the median feature values for the hard and easy instances similar to the instances generated by the conventional approach. Additionally, the range of the feature values for both the hard and easy instances has significantly increased. For example, for the instance size 100, the median value for easy instances is 0.4028 and the range is 0.2382. For the hard instances of the same size, the median is 0.04157 while the range is 0.1917 (see Figure 1 (left)).\nSimilarly, Figure 1 (right) presents the variation of cluster 10% distance to centroid (cluster 10pct distance to centroid) feature for the hard and easy instances generated by the conventional approach (indicated by (e (a) and h (a)) and for the hard and easy instances generated by diversity optimization (indicated by (e (b) and h (b))). The general observations from these box plots are quite similar to the observations from the mst dist mean shown in Figure 1 (left). For the easy instances of size 100, the range of the feature value is 0.0919 for conventional instances and 0.3471 for the instances generated by diversity optimization. Similarly, for the hard instances the range of the feature values has increased from 0.0577 to 0.1776 by the diversity optimization approach. As shown in Figure 1 (right), there is a significant increase in the range for other instance sizes as well. Improved ranges in feature values are observed for all considered features however, due to space limitations these are not included in the paper.\nThe above results suggest that the diversity optimization approach has resulted in a significant increase in the coverage over the feature space. Having the threshold for approximation ratios (\u03b1e and \u03b1h) our method guarantees the hardness of the instances. These approximation thresholds are more extreme than the mean approximation values obtained by the conventional method. Furthermore, starting with initial population of duplicated instances and a hard coded threshold, the modified (\u00b5 +\u03bb )-EA is able to achieve hard instances with approximation ratio 1.347, 1.493 and 1.259, respectively for instance size 25, 50 and 100. The majority of the instances are clustered in a small region in the feature space while some other points are dispersed across the whole space. This is evident in the median values similar to the values for the instances with respect to conventional approach and with significantly larger range in feature value. The conventional approach has failed to explore certain regions in the feature space and missed some instances existing in those regions. Being able to discover all these instances spread in the whole feature space, our approach provides a strong basis for more effective feature based prediction.\nAs a result of the increased ranges and the similar gap in median feature values for hard and easy instances compared to the conventional instances, there is a strong overlap in the ranges of the features for easy and hard instances generated by the diversity optimization. This is observed in the results for mst dist mean and cluster 10pct distance to centroid shown in Figure 1. Similar pattern holds for the other features as well. This prevents a good classification of problem instances based on single feature value."}, {"heading": "5 Classification Based on Multiple Features", "text": "As a single feature is not capable in clearly classifying the hard/easy instances, combinations of two or three different features are examined in the following. Our analysis mainly focuses on combinations of the 7 previously introduced features."}, {"heading": "5.1 Diversity Maximization over Single Feature Value", "text": "Firstly, we represent the instances according to the combination of two different features in the 2-dimensional feature value space (see Figure 2 for an example).\nAccording to the observation and discussion in [11], the two features distance max and angle mean can be considered together to provide an accurate classification of the hard and easy instances. Whereas after increasing the diversity over the seven different feature values and a wider coverage of the 2D space is achieved, the separation of easy and hard instances is not so obvious. The clusters of dots representing hard and easy instances have some overlapping as shown in the left graphs of Figure 2. There are large overlapping areas lying between the two groups of instances. Another example of some separation given by two-feature combination is mst dists mean and chull area which measure the mean distance of the minimum spanning tree and the area of the convex hull. However, as the number of cities in an instance increases, the overlapping area becomes larger. It is hard to do classification based on this.\nAfter examining the 21 different combinations of two features out of the seven features, we found out that some combinations of two features provide a fair separation between hard and easy instances after increasing the diversity over different feature values. As shown in Figure 2, taking both mst dists mean and chull area features into consideration, some separations can be spotted between hard and easy instances. However, most combinations are not able to give a clear classification between hard and easy instances, for example in Figure 3, neither the combination of features nnds mean and centroid mean distance to centroid nor features mst depth mean and chull area shows clear classification between instances of different hardness. Moreover, along with the instance size increment, the overlapping area of the dots standing for hard and easy instances grows.\nSince the majority of two-feature combinations are not capable of classifying easy and hard instances, the idea of combining three different feature is put forward. As in the analysis of two-feature combination, the values of the three selected features are plotted in 3D space.\nBy considering a third feature in the combination, in the 35 different combinations, it is clear that there are some separations between the two groups of 210 instances from the 3D-plots. A good selection of features results in an accurate classification of the instances. The three-feature combinations with the features measuring statistics about minimum spanning tree always provide good separation between hard and easy instances as shown in Figure 4 and Figure 5. Although there is an overlapping in the\narea between the two clusters of hard and easy instances, from the 3D-plots, we can spot some areas where there are only dots for instances of certain hardness.\nTaken another feature value into consideration, the two-feature combination that is not able to provide good separation can give some clear classification in hard and easy instances. An example illustrating this is included as Figure 6, where together with an additional feature mst dists mean, the two-feature combination of features mst depth mean and chull area shows a clear separation between easy and hard instances comparing to the results shown in the left graph in Figure 3.\nFrom the investigation of both the two-feature combination and three-feature combination, we found out that the range of feature values for larger TSP instances is smaller. Some of the good combinations for classifying the hardness of smaller instances may not work for larger instances, such as centroid features which performs well when combining with another feature in classifying the hardness of instances of 25 cities while does not show a clear separation with instance size 50 and 100 in our study. However, there exist some three-feature combinations that give good classification of easy and hard instances without regarding to the instance size, for example mst dists mean, chull area and nnds mean, and mst dists mean, chull area and mst depth mean."}, {"heading": "5.2 Diversity Maximization over Multiple Feature Values", "text": "In order to examine the relationship between feature combination and hardness of the instances, a weighted population diversity based on multiple features is introduced. The weighted population diversity for a certain set of features { f1, f2, ..., fk} is defined as the weighted sum of the normalised population diversity over these k features. The contribution of an instance I to the weighted population diversity is defined as\nd\u2032(I,P) = k\n\u2211 i=1 (wi \u00b7d fi(I,P)),\nwhere d fi(I,P) denotes the normalised contribution to the population diversity d(I,P) over certain feature i and wi represents the weight of feature i. The contribution of an individual to the population diversity on certain feature is normalised based on the maximum population diversity on the feature, in order to reduce the bias among different features.\nThis weighted population diversity is used in Algorithm 1 to gain some insight of the relationship between features combination and instance quality. The same parent and offspring population sizes are used for these experiments, which are \u00b5 = 30 and \u03bb = 5. The instance sizes examined are still 25, 50 and 100. The 2-OPT algorithm is executed five times to obtain the approximation quality. In the experiments, (\u00b5+\u03bb )-EAD execute for 10,000 generation as previous. Since it is shown in Section 4 that a combination of three features is able to provide a good separation between hard and easy instances, some of the good three-feature combinations are chosen for exploration. The weight distributions for { f1, f2, f3} considered in the experiments are {1,1,1}, {2,1,1}, {1,2,1}, {1,1,2}, {2,2,1}, {2,1,2}, {1,2,2}. The same hardness thresholds are used in these experiments as previous. After the seven independent runs\nfor easy and hard instances, the final solution sets are put together. Therefore the results set has 210 instances for each instance size and hardness type, which is the same as previous experiments. The results are plotted in 3D space and compared to the previous experiments on single feature discussed in Section 3 and 4.\nThe weighted population diversity offers a way to examine the overlapping area of hard and easy instances. With the weighting technique, it takes consideration about the relationship between the different features examined. Since most of these features are not independent from each others and the weighted population diversity considers multiple features at the same time, it is predictable that with the weighted population diversity the extreme value for each single feature may not reach.\nAn example is shown in Figure 7 focusing on maximizing the weighted population diversity over the combination of features mst dists mean, nnds mean and chull area, which is shown to be a good combination for separating the hard and easy instances. From the comparison between Figure 4 and Figure 7, we can see that although the results from maximizing weighted population diversity does not cover a wider search space, it provides a detailed insight into the intersection between the hard and easy instances. The 3D plots of different instance sizes show that the combination of these three certain features provide a clear separation between hard and easy instances. There are some overlapping areas in the search space, but it is clear that this combination of features provide some hints for predicting of hard or easy instances."}, {"heading": "6 Instances Classification Using Support Vector Machine", "text": "Support vector machines (SVMs) are well-known supervised learning models in machine learning which can be used for classification, regression and outliers detection [3, 8]. In order to quantify the separation between instances of different hardness based on the feature values, SVM models are constructed for each combination of features."}, {"heading": "6.1 Linear SVM", "text": "The linear classifier is the first model tried in classifying the dataset. In SVM the linear classifiers that can separate the data with maximum margin is termed as the optimal separating hyper-plane. From the plots in Figure 2, 3, 4 and 5, it is clear that none of the datasets are linearly separable. Taken the trade-off between maximizing the margin and minimizing the number of misclassified data points into consideration, the soft-margin SVM is used for classification.\nLet ACCn be the training accuracy of a feature combination in separating the hard and easy instances of size n. We define ACCn as the ratio of number of instances which are correctly classified by the model to the total number of instances in the dataset. All classification experiments are done in R with library{e1071} [12]. The training data of the SVM models are the population of 420 instances generated as in Section 3 and the training accuracy is regarded as a quantified measurement of the separation between hard and easy instances. The feature combinations used for classification are the 21 two-feature combinations and 35 three-feature combinations discussed in Section 5.\nFrom experiment results, ACC25 for two-feature combinations lie in the range of 0.5095 to 0.7548 with an average accuracy of 0.6672, while the ACC25 for three-feature combination lie between 0.6286 to 0.7786 with average value 0.7079. In the case of instances with city number of 50, two-feature combination results in ACC50 lying in the range of 0.5286 to 0.7738 with an average of 0.6544 while ACC50 of three-feature combinations are from 0.5381 to 0.85 with average accuracy equal to 0.6969. For larger instance size, ACC100 are in the range between 0.5738 and 0.8119 with average 0.6986 for two-feature combination, whereas those for three-feature combination lie in the scope of 0.6238 to 0.8524 with average 0.7382.\nAlthough three-feature combinations show better accuracy in separation of hard and easy instances than those two-feature combinations, there is no significant difference in ACC for two-feature combinations and three-feature combinations. Moreover, the general low accuracy implies the high possibility that the linear models are not suitable for separating the hard and easy instances based on most of the feature combinations.\nWe then move to applying kernel function for non-linear mapping of the feature combination."}, {"heading": "6.2 Nonlinear Classification with RBF Kernel", "text": "The linearly non-separable features can become linearly separable after mapped to a higher dimension feature space. The Radial Basis Function (RBF) kernel is one of the well-known kernel function used in SVM classification.\nThere are two parameters need to be selected when applying RBF, which are C(cost) and \u03b3 . The parameter setting for RBF is crucial, since increasing C and \u03b3 leads to accurate separation of the training data but at the same time causes over-fitting. The SVMs here are generated for quantifying the separation rate between hard and easy instances rather than classifying other instances. After some initial trials, (C,\u03b3) is set to (100,2) in all the tests to avoid over-fitting. This parameter setting may not be the best parameters for the certain feature combination in SVM classifying, but it helps us to gain some understanding of the separation of hard and easy instances generated from previous experiments based on the same condition.\nTable 1 and 2 show the accuracy of different two features or three features combination in hard and easy instances separation. With RBF kernel, SVM with certain parameter setting can generate a model separating the dataset with average accuracy of 0.8170, 0.8244 and 0.8346 in 2D feature space for instance size 25, 50 and 100 respectively. Whereas with three features, SVM with the same parameter setting provides a separation with average accuracy of 0.9503, 0.9584 and 0.9422 for instance size 25, 50 and 100 respectively.\nFrom the results, it can be concluded that there are better separations between hard and easy instances in the 3D feature space."}, {"heading": "7 Conclusions", "text": "With this paper, we have introduced a new methodology of evolving easy/hard instances which are diverse with respect to feature sets of the optimization problem at hand. Using our diversity optimization approach we have shown that the easy and hard instances obtained by our approach covers a much wider range in the feature space than previous methods. The diversity optimization approach provides instances which are diverse with respect to the investigated features. The proposed population diversity measurements provide good evaluation of the diverse over single or multiple feature values. Our experimental investigations for 2-OPT and TSP have shown that our large set of diverse instances can be classified quite well into easy and hard instances when considering a suitable combination of multiple features which provide some guidance for predication as the next step. In particular, the SVM classification model built with the diverse instances that can classify TSP instances based on problem hardness provides a strong basis for future performance prediction models that lead to automatic algorithm selection and configuration. Building such models would require further experimentation to determine the minimal set of strong features that can predict performance accurately."}], "references": [{"title": "Solution of a min-max vehicle routing problem", "author": ["D. Applegate", "W. Cook", "S. Dash", "A. Rohe"], "venue": "INFORMS Journal on Computing,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2002}, {"title": "editors", "author": ["B. Bonet", "S. Koenig"], "venue": "Proceedings of the Twenty-Ninth AAAI Conference on Artificial Intelligence, January 25-30, 2015, Austin, Texas, USA. AAAI Press", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Support-vector networks", "author": ["C. Cortes", "V. Vapnik"], "venue": "Machine Learning, 20(3):273\u2013 297", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1995}, {"title": "A method for solving traveling-salesman problems", "author": ["G.A. Croes"], "venue": "Operations Research, 6(6):791\u2013812", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1958}, {"title": "Worst case and probabilistic analysis of the 2-opt algorithm for the TSP", "author": ["M. Englert", "H. R\u00f6glin", "B. V\u00f6cking"], "venue": "Algorithmica, 68(1):190\u2013264", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2014}, {"title": "Support vector machines for classification and regression", "author": ["S.R. Gunn"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1998}, {"title": "Algorithm runtime prediction: Methods & evaluation", "author": ["F. Hutter", "L. Xu", "H.H. Hoos", "K. Leyton-Brown"], "venue": "Artif. Intell.,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "Theoretical analysis of two ACO approaches for the traveling salesman problem", "author": ["T. K\u00f6tzing", "F. Neumann", "H. R\u00f6glin", "C. Witt"], "venue": "Swarm Intelligence, 6(1):1\u2013 21", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "A novel feature-based approach to characterize algorithm performance for the traveling salesperson problem", "author": ["O. Mersmann", "B. Bischl", "H. Trautmann", "M. Wagner", "J. Bossek", "F. Neumann"], "venue": "Annals of Mathematics and Artificial Intelligence, 69(2):151\u2013182", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2013}, {"title": "e1071: Misc Functions of the Department of Statistics", "author": ["D. Meyer", "E. Dimitriadou", "K. Hornik", "A. Weingessel", "F. Leisch"], "venue": "Probability Theory Group ", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1071}, {"title": "Parameter prediction based on features of evolved instances for ant colony optimization and the traveling salesperson problem", "author": ["S. Nallaperuma", "M. Wagner", "F. Neumann"], "venue": "PPSN XIII - 13th International Conference, Ljubljana, Slovenia, September 13-17, 2014. Proceedings, pages 100\u2013109", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2014}, {"title": "A feature-based comparison of local search and the christofides algorithm for the travelling salesperson problem", "author": ["S. Nallaperuma", "M. Wagner", "F. Neumann", "B. Bischl", "O. Mersmann", "H. Trautmann"], "venue": "FOGA \u201913, pages 147\u2013160", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2013}, {"title": "Bioinspired Computation in Combinatorial Optimization:Algorithms and Their Computational Complexity", "author": ["F. Neumann", "C. Witt"], "venue": "Springer-Verlag New York, Inc., New York, NY, USA, 1st edition", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "R: A Language and Environment for Statistical Computing", "author": ["R Core Team"], "venue": "R Foundation for Statistical Computing, Vienna, Austria", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Measuring instance difficulty for combinatorial optimization problems", "author": ["K. Smith-Miles", "L. Lopes"], "venue": "Computers & OR, 39(5):875\u2013889", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2012}, {"title": "J", "author": ["K. Smith-Miles"], "venue": "van Hemert, and X. Y. Lim. Understanding TSP difficulty by learning from evolved instances. In 4th International Conference on Learning and Intelligent Optimization (LION), LION\u201910, pages 266\u2013280. Springer", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2010}, {"title": "Defining and optimizing indicator-based diversity measures in multiobjective search", "author": ["T. Ulrich", "J. Bader", "L. Thiele"], "venue": "R. Schaefer, C. Cotta, J. Kolodziej, and G. Rudolph, editors, PPSN (1), volume 6238 of Lecture Notes in Computer Science, pages 707\u2013717. Springer", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2010}, {"title": "Integrating decision space diversity into hypervolume-based multiobjective search", "author": ["T. Ulrich", "J. Bader", "E. Zitzler"], "venue": "M. Pelikan and J. Branke, editors, GECCO, pages 455\u2013462. ACM", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2010}, {"title": "Evolving combinatorial problem instances that are difficult to solve", "author": ["J.I. van Hemert"], "venue": "Evolutionary Computation,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2006}, {"title": "A perspective view and survey of meta-learning", "author": ["R. Vilalta", "Y. Drissi"], "venue": "Artificial Intelligence Review,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2002}, {"title": "Satzilla: portfolio-based algorithm selection for sat", "author": ["L. Xu", "F. Hutter", "H.H. Hoos", "K. Leyton-Brown"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2008}], "referenceMentions": [{"referenceID": 20, "context": "In both the artificial intelligence (AI) [23, 9, 22, 5, 7] and operational research communities [17, 21], this topic has become a major point of interest.", "startOffset": 41, "endOffset": 58}, {"referenceID": 6, "context": "In both the artificial intelligence (AI) [23, 9, 22, 5, 7] and operational research communities [17, 21], this topic has become a major point of interest.", "startOffset": 41, "endOffset": 58}, {"referenceID": 19, "context": "In both the artificial intelligence (AI) [23, 9, 22, 5, 7] and operational research communities [17, 21], this topic has become a major point of interest.", "startOffset": 41, "endOffset": 58}, {"referenceID": 14, "context": "In both the artificial intelligence (AI) [23, 9, 22, 5, 7] and operational research communities [17, 21], this topic has become a major point of interest.", "startOffset": 96, "endOffset": 104}, {"referenceID": 18, "context": "In both the artificial intelligence (AI) [23, 9, 22, 5, 7] and operational research communities [17, 21], this topic has become a major point of interest.", "startOffset": 96, "endOffset": 104}, {"referenceID": 8, "context": "The feature-based analysis of heuristic search algorithms has become an important part in understanding such type of algorithms [11, 18].", "startOffset": 128, "endOffset": 136}, {"referenceID": 15, "context": "The feature-based analysis of heuristic search algorithms has become an important part in understanding such type of algorithms [11, 18].", "startOffset": 128, "endOffset": 136}, {"referenceID": 12, "context": "Thereby, it provides an important tool for bridging the gap between pure experimental investigations and mathematical methods for analysing the performance of search algorithms [15, 10, 6].", "startOffset": 177, "endOffset": 188}, {"referenceID": 7, "context": "Thereby, it provides an important tool for bridging the gap between pure experimental investigations and mathematical methods for analysing the performance of search algorithms [15, 10, 6].", "startOffset": 177, "endOffset": 188}, {"referenceID": 4, "context": "Thereby, it provides an important tool for bridging the gap between pure experimental investigations and mathematical methods for analysing the performance of search algorithms [15, 10, 6].", "startOffset": 177, "endOffset": 188}, {"referenceID": 8, "context": "Current methods for the feature-based analysis are based on constructing hard and easy instances for an investigated search heuristic and a given optimization problem by evolving instances using an evolutionary algorithm [11, 14, 13].", "startOffset": 221, "endOffset": 233}, {"referenceID": 11, "context": "Current methods for the feature-based analysis are based on constructing hard and easy instances for an investigated search heuristic and a given optimization problem by evolving instances using an evolutionary algorithm [11, 14, 13].", "startOffset": 221, "endOffset": 233}, {"referenceID": 10, "context": "Current methods for the feature-based analysis are based on constructing hard and easy instances for an investigated search heuristic and a given optimization problem by evolving instances using an evolutionary algorithm [11, 14, 13].", "startOffset": 221, "endOffset": 233}, {"referenceID": 16, "context": "Following some recent work on using evolutionary algorithms for generating diverse sets of instances that are all of high quality [19, 20], we introduce an evolutionary algorithm which maximizes diversity of the obtained instances in terms of a given feature.", "startOffset": 130, "endOffset": 138}, {"referenceID": 17, "context": "Following some recent work on using evolutionary algorithms for generating diverse sets of instances that are all of high quality [19, 20], we introduce an evolutionary algorithm which maximizes diversity of the obtained instances in terms of a given feature.", "startOffset": 130, "endOffset": 138}, {"referenceID": 0, "context": "For our investigations cities are always in the normalized plane [0,1]2, i.", "startOffset": 65, "endOffset": 70}, {"referenceID": 0, "context": "each city has an x- and y-coordinate in the interval [0,1].", "startOffset": 53, "endOffset": 58}, {"referenceID": 0, "context": "In following, a TSP instance always consists of a set of n points in [0,1]2 and the Euclidean distances between them.", "startOffset": 69, "endOffset": 74}, {"referenceID": 3, "context": "Local search heuristics have been shown to be very successful when dealing with the TSP and the most prominent local search operator is the 2-OPT operator [4].", "startOffset": 155, "endOffset": 158}, {"referenceID": 18, "context": "Using an evolutionary algorithm, it is possible to evolve sets of hard and easy instances by maximizing or minimizing the fitness (tour length in the case of the TSP) of each instance [21, 17, 11, 18].", "startOffset": 184, "endOffset": 200}, {"referenceID": 14, "context": "Using an evolutionary algorithm, it is possible to evolve sets of hard and easy instances by maximizing or minimizing the fitness (tour length in the case of the TSP) of each instance [21, 17, 11, 18].", "startOffset": 184, "endOffset": 200}, {"referenceID": 8, "context": "Using an evolutionary algorithm, it is possible to evolve sets of hard and easy instances by maximizing or minimizing the fitness (tour length in the case of the TSP) of each instance [21, 17, 11, 18].", "startOffset": 184, "endOffset": 200}, {"referenceID": 15, "context": "Using an evolutionary algorithm, it is possible to evolve sets of hard and easy instances by maximizing or minimizing the fitness (tour length in the case of the TSP) of each instance [21, 17, 11, 18].", "startOffset": 184, "endOffset": 200}, {"referenceID": 8, "context": "In [11], there are 47 features in 8 groups used to provide an understanding of algorithm performance for the TSP.", "startOffset": 3, "endOffset": 7}, {"referenceID": 0, "context": "Within this study, A(I) is the tour length obtained by 2-OPT for a given TSP instance I and OPT (I) is the optimal tour length which we obtain in our experiments by using the exact TSP solver Concorde [1].", "startOffset": 201, "endOffset": 204}, {"referenceID": 8, "context": "In [11], 47 features of TSP instances for characterizing easy and hard TSP instances have been studied.", "startOffset": 3, "endOffset": 7}, {"referenceID": 8, "context": "We refer the reader to [11] for a detailed explanation for each feature.", "startOffset": 23, "endOffset": 27}, {"referenceID": 13, "context": "All programs in our experiments are written in R and run in R environment [16].", "startOffset": 74, "endOffset": 78}, {"referenceID": 8, "context": "We use the functions in tspmeta package to compute the feature values [11].", "startOffset": 70, "endOffset": 74}, {"referenceID": 8, "context": "Based on previous investigations in [11] and initial experimental investigations, we set \u03b1e = 1 for instances of size 25 and 50, and \u03b1e = 1.", "startOffset": 36, "endOffset": 40}, {"referenceID": 8, "context": "The previous study [11], suggests that there are some differences in the possible range of feature values for easy and hard instances.", "startOffset": 19, "endOffset": 23}, {"referenceID": 8, "context": "We study the effect of the diversity optimization on the range of features by comparing the instances generated by diversity optimization to the instances generated by the conventional approach in [11].", "startOffset": 197, "endOffset": 201}, {"referenceID": 8, "context": "Each set consists of 100 instances generated by independent runs [11].", "startOffset": 65, "endOffset": 69}, {"referenceID": 8, "context": "According to the observation and discussion in [11], the two features distance max and angle mean can be considered together to provide an accurate classification of the hard and easy instances.", "startOffset": 47, "endOffset": 51}, {"referenceID": 2, "context": "Support vector machines (SVMs) are well-known supervised learning models in machine learning which can be used for classification, regression and outliers detection [3, 8].", "startOffset": 165, "endOffset": 171}, {"referenceID": 5, "context": "Support vector machines (SVMs) are well-known supervised learning models in machine learning which can be used for classification, regression and outliers detection [3, 8].", "startOffset": 165, "endOffset": 171}, {"referenceID": 9, "context": "All classification experiments are done in R with library{e1071} [12].", "startOffset": 65, "endOffset": 69}], "year": 2016, "abstractText": "Understanding the behaviour of heuristic search methods is a challenge. This even holds for simple local search methods such as 2-OPT for the Traveling Salesperson problem. In this paper, we present a general framework that is able to construct a diverse set of instances that are hard or easy for a given search heuristic. Such a diverse set is obtained by using an evolutionary algorithm for constructing hard or easy instances that are diverse with respect to different features of the underlying problem. Examining the constructed instance sets, we show that many combinations of two or three features give a good classification of the TSP instances in terms of whether they are hard to be solved by 2-OPT.", "creator": "LaTeX with hyperref package"}}}