{"id": "1511.00840", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Nov-2015", "title": "Finetuning Randomized Heuristic Search For 2D Path Planning: Finding The Best Input Parameters For R* Algorithm Through Series Of Experiments", "abstract": "Path planning is typically considered a graph-seeking problem in Artificial Intelligence, and R * is a modern algorithm tailored to its solution. The algorithm splits predefined path-finding tasks into a series of subtasks, each of which can be easily (in a computational sense) solved using known methods (such as A *). Parameterized random selection is used to perform the decomposition, and as a result, R * performance largely depends on the choice of its input parameters. In our work, we formulate a set of assumptions regarding possible upper and lower limits of R * parameters, their interdependence, and their impact on R * performance. We then evaluate these assumptions by conducting a large number of experiments. As a result, we formulate a set of heuristic rules that can be used to initialize the values of R * parameters in a way that leads to the best performance of the algorithm.", "histories": [["v1", "Tue, 3 Nov 2015 09:56:01 GMT  (473kb)", "http://arxiv.org/abs/1511.00840v1", "8 pages, 2 figures, 18 references. As accepted to the 16th International Conference on Artificial Intelligence:Methodology, Systems, Applications (AIMSA 2014), Varna, Bulgaria, September 11-13, 2014"]], "COMMENTS": "8 pages, 2 figures, 18 references. As accepted to the 16th International Conference on Artificial Intelligence:Methodology, Systems, Applications (AIMSA 2014), Varna, Bulgaria, September 11-13, 2014", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["konstantin yakovlev", "egor baskin", "ivan hramoin"], "accepted": false, "id": "1511.00840"}, "pdf": {"name": "1511.00840.pdf", "metadata": {"source": "CRF", "title": "Finetuning Randomized Heuristic Search For 2D Path Planning: Finding The Best Input Parameters For R* Algorithm Through Series Of Experiments", "authors": ["Konstantin Yakovlev", "Egor Baskin", "Ivan Hramoin"], "emails": ["hramoin}@isa.ru"], "sections": [{"heading": null, "text": "Authors manuscript. The The final publication is available at Springer via http://dx.doi.org/10.1007/978-3319-10554-3_29\nKeywords: path planning, grid, 2D, A*, R*, heuristic search"}, {"heading": "1 Introduction", "text": "Ability to plan a path is one of the key features for an intelligent agent. In our work, we examine the case when an agent operates in a rectangle-bounded region of static 2D environment composed of traversable and non-traversable areas (free space and obstacles). We use 8-connected grid as a formal model of agent\u2019s environment [1, 2, 3]. Within this model the task is to find a sequence of unoccupied adjacent grid cells connecting given start and goal cells.\nHeuristic search algorithm A* [4] is widely used in AI community for finding paths on grids. A* using admissible heuristics guarantees finding a shortest path [5]. Plenty of such heuristics for grid-worlds exist: Manhattan distance, octile (diagonal) distance etc. These heuristics being natural metrics in grid-worlds are the \u201dbestavailable\u201d, but nevertheless A*-search exercising them explores too much of the state-space in case the goal is located beyond the obstacles. The reason of the overexploration is that A* guided locally by one of the abovementioned heuristics necessarily (in presence of obstacles) falls into a local minimum \u2013 \u201cthe portion of statespace from which there is no way to states with smaller heuristics without passing through states with higher heuristics\u201d [6]. There exist a number of approaches to reduce the A* search space (and thus increase the computational effectiveness of path planning algorithm). One approach is to modify A* in some way. Using weighted heuristics [7, 8, 9], implementing iterative deepening techniques [10, 11], imposing\nsuch approach. Another approach exploits the idea of decomposition. Methods implementing this approach split the given task to the series of subtasks (local tasks) each of which is solved independently (by local planners) and final solution is constructed by the composition of local solutions. Decomposition can be performed using predefined criteria [14] or in random fashion [15, 16].\nOne of the well-known state-of-the art algorithms suitable for path finding in gridworlds based on parameterized random decomposition is R* introduced in [6]. It exploits the same ideas lying behind RRT planners [16] and uses WA* (A* with weighted heuristic) as local planner. To perform a search R* needs to be provided with the values of its 3 input parameters (as well as the weight of the heuristic used for the local WA* search). Preliminary experiments show that the algorithm performance largely depends on these values. At the same time to the best of authors knowledge there is no reported research results on how exactly the choice of the parameters values influence the performance of R* and which values should be used to solve practical path planning tasks with R*. This works aims at filling this gap.\nIn our work we theoretically analyze the possible influence of each parameter on R* performance along with evaluating its lower and upper bounds. We show that the bounds for 2 parameters are either constants or can be expressed as functions of the 3rd parameter. At the same time, we propose that the value of the latter is the function of start and goal positions. Then we perform comprehensive experimental analysis of R* solving more than 5000 of 2D path planning tasks to estimate the coefficients of the parameters\u2019 bindings proposed before. Thus we end up with a set of rules for R* parameterization applying which leads to algorithm\u2019s best performance."}, {"heading": "2 R* algorithm for grid path planning", "text": ""}, {"heading": "2.1 Path planning problem", "text": "Consider a 8-connected grid which is a finite set of cells A=(a, b, c, \u2026) that can be represented as a matrix AMxN={aij}, where: i, j \u2013 are cell position indexes (also denoted as i(a), j(a)) and M, N \u2013 are grid dimensions. Each cell is labeled either traversable or un-traversable and agent is allowed to move from a traversable cell to one of its traversable neighbors.\nA metric function dist (also known to AI community as diagonal heuristic) is used\nto measure the distance between any two cells:\ndist(aij, akl) = cd \u00b7min(\u0394i, \u0394j) + chv\u00b7(\u0394i + \u0394j \u2013 2\u00b7min(\u0394i, \u0394j)),\nwhere \u0394i=|i\u2013k|, \u0394j=|j\u2013l|, cd=k\u00b7chv (1<k<2), chv=constR + . chv is a distance between a cell and any of its horizontal or vertical neighbors, cd is a distance between a cell and any of its diagonal neighbors. In our work we use integer constants chv=10 and cd=14 for corresponding distances.\nPath planning task is considered to be set if two distinct traversable cells \u2013 start and goal \u2013 s, gA are set. The solution of the problem is a path (s, g), e.g. a sequence of traversable adjacent cells starting with s and ending with g. The length of the path L() is the sum of the distances between all pairs of adjacent cells forming the path.\nR* \u2013 is state-of-the art heuristic search algorithm that decomposes initial path planning task into series of subtasks, identifies ones to be solved by local planner (WA*) and tries to solve them. If the local solution is found \u201ceasily\u201d it is stored and can be used lately to reconstruct final solution but if the local solution is \u201chard to find\u201d R* postpones local search and chooses another local task. As its creators say in [6]: \u201cR* postpones the ones [local searches] that do not find solutions easily and tries to construct the overall solution using only the results of searches that find solutions easily\u201d.\nWe encourage the reader to examine the papers [6, 17] for the detailed explanation\nof R* and now give only a brief overview of the algorithm.\nAt each step R* firstly chooses the most promising cell c from OPEN list (initially containing only start cell). Then algorithm randomly selects K traversable cells residing at the distance \u0394 from c and inserts them into OPEN. These cells (bi) are called the successors of c, while c itself is called the predecessor (pred(bi)=c). If dist(g, c)\u2264\u0394 then the goal cell is also added to OPEN.\nNext R* tries to find a local path (pred(c), c) with WA* algorithm. If the path is not found after the m steps of WA* the cell c is labeled AVOID which means it was hard to find the current local path and the local search should be postponed. Cell c is kept in OPEN list in that case. If the path is found the cell is removed from OPEN and is inserted into CLOSED list.\nThe process of generating successors, adding them to OPEN, choosing the best cell\nin OPEN and trying to find a local path is referred as the expansion of the cell c.\nR* chooses the cells from OPEN using the same heuristic rule as WA*. The only difference is that R* chooses only such a cell which is not labeled AVOID (initially none of the cells has this label) and only if no such cells are left in OPEN it chooses a cell amongst AVOID ones. The stop criteria for R* is analogous to WA*.\nOne specific thing related to algorithm\u2019s implementation which is not addressed in original paper is the procedure of generating successors for the expanding cell. In our implementation of R* we use midpoint circle algorithm [18] to generate successors \u2013 see fig.1.\nOne can think that the circumference of radius \u0394/chv (if measured in cells) with the center in the cell c is \u201cdrawn\u201d and K traversable cells forming this circumference are randomly chosen as successors of c.\nand Upper Bounds\nObviously R* performance depends on the values of its 3 parameters: K \u2013 number of successors generated for each expanded cell c, \u0394 \u2013 the distance between c and generated successors, m \u2013 number of steps local planner is allowed to perform before abandoning the search. Let\u2019s analyze the influence of each parameter and assess its lower and upper bounds taking into account R* working principles.\nThe value of m affects both execution time and memory usage. The higher the value of m is the more steps are performed by WA* while finding each local path. At the same time it is likely that only small fraction of all local paths compound final solution which means in case of higher m more chances are that R* wastes much time on \u201cuseless\u201d computations. Thus high values of m should be avoided.\nThe influence of parameter m on path length is less evident. It is likely that the latter depends primarily on how local goal cells are chosen at each step of R* and that is independent of m.\nThe lower bound for m can be assessed in the following way. One can show that minimum number of steps WA* needs to find a path is m*=max(|i(s)\u2013i(g)|, |j(s)\u2013j(g)|). This happens in particular when there are no obstacles in between s and g. As detailed above our implementation of R* uses midpoint circle algorithm to form the set of possible successors and it can be shown that max(|i(s)\u2013i(g)|, |j(s)\u2013j(g)|) is achieved when s (the cell under expansion) and g (the successor of s) lie on the same grid row (or column) and in that case m*=\u0394/chv. So the value m\u2019=\u0394/chv(=\u0394/10) is the lower bound for m (if m<\u0394/10 WA* would simply fail to solve local path finding tasks in most cases).\nTheoretically upper bound for m is the number of all traversable cells on grid but it\u2019s reasonable to limit m by some value m\u2019\u2019=k\u00b7m\u2019 (kN) which means that the local planner (WA*) is allowed to perform k times more steps to solve local path planning tasks than in the most trivial cases (when there are no obstacles present).\nThe value of K affects both execution time and memory usage but primarily memory usage as all K successors for each expanded cell are permanently stored in memory. So, if we are interested in decreasing memory consumption high values of K should be avoided. At the same time, the higher the value of K is the more successors for each cell are generated and more chances are R* would pick up \u201cgood\u201d candidates for further expansion (the candidates that minimize both local and overall path lengths). So setting K to high values potentially leads to better quality solutions.\nUpper bound for K can be assessed in the following way. As said above, set of successors for any expanded grid cell is the subset of cells comprising the discrete circumference of radius \u0394/chv (if measured in cells). The length of such circumference equals 2\u2219\u03c0\u2219\u0394/chv. Thus maximum number of successors K\u2019\u2019\u22486\u2219\u0394/10. Minimum possible number of successors K\u2019 apparently equals 1. But it\u2019s obvious that in that case we would likely get very awkward shaped and very long paths, so we suggest K\u2019=3.\nAs shown above upper/lower bounds for m and K can be expressed in relation to \u0394 making \u0394 the key parameter for R* which value affects both execution time and memory usage and solution quality. Considering the influence of \u0394 independently one\nR* relies on local path planning which makes algorithm behave more like typical A*family algorithm (the behavior we are trying to avoid). On the other hand setting \u0394 to extremely small values (with chv=10 being the minimum) directly converges R* to A* which does not make any sense at all. So, the value of \u0394 should be picked from the middle of the spectrum of possible values. In other words, \u0394 can be represented as a positive monotone function (with known minimum and maximum) of start and goal locations, e.g. \u0394=dist(s, g)/k and the \u201cright\u201d value for binding coefficient k should be estimated via experimental analysis but it is likely to belong to the middle range of possible spectrum (defined by minimum and maximum values of \u0394).\nBy now we have theoretically evaluated lower and upper bounds for the R* parameters (m, K and \u0394) and showed that m and K can be expressed as linear functions of \u0394 and \u0394 can be expressed as linear function of start and goal locations. The coefficients of the bindings are unknown and we are going to evaluate them experimentally."}, {"heading": "3 Experimental analysis", "text": ""}, {"heading": "3.1 Testbed", "text": ""}, {"heading": "To examine the influence of R* input parameters on the algorithm\u2019s performance and", "text": "find parameters \u201cbest\u201d values we have run 5250 of experiments on 3 types of grids: - randomly generated grids containing rectangle shaped obstacles of different sizes (70 grids * 25 different parameters configurations = 1750 experiments); - randomly generated grids containing tetris-shaped obstacles of different sizes (70 grids * 25 different parameters configurations = 1750 experiments); - grids which are models of city landscape (70 grids * 25 different parameters configurations = 1750 experiments).\nWhile generating grids containing rectangle and tetris-shaped obstacles the latter were added one by one at randomly selected positions until the total number of untraversble cells equals or slightly exceeds predefined threshold, e.g. 30%. When adding each obstacle its size and orientation was chosen randomly within predefined thresholds.\nGrids modeling city landscape were generated semi-automatically and the maps of the real cities were used as sources. The percentage of blocked cells on these grids equals or slightly exceeds 30% (just as on randomly generated grids).\nAll grids were of the size 501x501 and start and goal cells were always located on\nthe opposite edges of grid in such a way that dist(s, g)=5000.\nThe following indicators were used to evaluate R* performance: cells \u2013 the number of cells stored in OPEN and CLOSED (used to assess memory\nconsumption);\ntime \u2013 time (in ms) used by R* to find a path; length \u2013 length of the path found.\nThere were conducted 3 consecutive series of experiments and a preliminary one.\nPreliminary experiments were aimed at fine tuning local planer (WA*), e.g. estimating the best value for weight of heuristic function. For the sake of space we omit the results of experiments but they count in favor value 3 should be used as the weight. As R* is supposed to use the same heuristic function as local planner weighted by the same weight (to guarantee suboptimality) the later was also set to 3.\nFirst, we examined the influence of parameter m \u2013 number of steps local planner (WA*) is allowed to commit before abandoning the search for a local path \u2013 on R* performance. Then parameter K \u2013 number of successors generated for each expanded cell \u2013 was evaluated with m being set to its best value. Finally, parameter \u0394 \u2013 the distance between expanded cell and its successors \u2013 was evaluated (with m and K being fixed to their best values discovered before).\nThe averaged results of the experiments are shown on fig. 2. These averaged results correlate well with all \u201cindividual\u201d ones, e.g. results obtained on grids of specific types, and thus can be used as consistent basis for R* performance evaluation.\nIn the first series of experiments values of \u0394 and K were set to dist(s, g)/10(=500) and \u0394/10(=50) respectively and m was assigned a range of values: 50, 75, 100, 200, 300, 500, 750, 1000.\nObtained results (see fig. 2) support the assumption that m mainly affects running time and memory consumption \u2013 time and cells values differ (due to different mvalues) \u22485 and 1,5 times respectively \u2013 while the influence of m on solution quality is less evident. Interesting case which breaks the evident tendency \u2013 the higher the value of m is the worse the performance of R* is \u2013 is setting m to 50. Worst results in that case (which are not depicted on diagrams but reported in the table) can be easily explained: when m is set to 50 local planner is guaranteed to almost always fail in local pathfinding (during the first attempt). So in the end more such searches are performed which in turn substantially degrades R* performance.\nBased on gained results value 100(=\u0394/5) can be recommended to initialize m. This can be interpreted in the following way (see previous section): minimum number of steps local planer needs to find a path is \u0394/10, so to get \u201cbest\u201d results local planner should be allowed to use 2 times more steps (than the minimum).\nIn the second series of experiments value of \u0394 remained the same, m was set to its\nbest value, e.g \u0394/5, and K was assigned a range of values: 3, 5, 7, 10, 25, 50, 70, 100.\nObtained results support the assumption that K drastically affects memory consumption and running time \u2013 cells and time values differ 4 and 3 times (due to different K-values) respectively; they also justify that K has a major influence on solution quality\u2013 difference in length reaches 30-35%.\nResults of the experiments evidently show that higher values of K should be avoided due to high computational costs and lower values of K should be avoided due to lower solution quality. On this basis the recommended value for K is 25=(\u0394/20). This can be interpreted as following: maximum number of successors for any cell \u22486\u2219\u0394/10, so to get best results R* should generate round 1/10 th -1/12 th of that value (1 out the 10-12 possible successors should be generated).\nIn the third series of experiments m and K were assigned their best values, e.g \u0394/5 and \u0394/20, and \u0394 was consequently initialized as: 50, 100, 200, 300, 500, 750, 1000, 1500, 2500.\nObtained results (see fig. 2) verify the assumption that \u0394 (just like K) has more influence on R* performance rather than m: cells and time differ 4 and 10 times respectively (due to the different values of \u0394) and the difference in length reaches 10%.\nAs one can see, setting \u0394 to higher or lower values significantly reduces algorithm\u2019s computational efficiency (the fact we have predicted earlier) so these values should be rejected and the values from the middle of the spectrum should be used. Based on the obtained results we recommend setting \u0394 to 500(=dist(s, g)/10).\nSummarizing the results of experimental analysis two main conclusions can be made. First, R* performance depends largely on the values of its parameters and assigning them in a wrong way can lead to a dramatic fall in computational efficiency. Second, there exist a set of rules which can be used to automatically initialize R* input parameters in such a way that leads to best performance. These rules can be formalized as the set of bindings:\n\u0394=dist(s, g)/10;\nK=max(10, \u0394/20);\nm=\u0394/5.\nPresented bindings are dependent only on start and goal locations which are known a priori and thus can be viewed as a universal (heuristic) rule of parameterizing R* when solving path planning tasks on 8-connected grids."}, {"heading": "4 Conclusions", "text": "R* is state-of-the-art randomized heuristic search algorithm and a powerful tool to solve 2D path planning tasks at low computational costs. But to benefit from using R* in actual practice one needs to initialize 3 algorithm\u2019s parameters in a \u201cright\u201d way as\nretically and experimentally) the nature of that dependencies and end up with the set of heuristic rules that can be used to automatically parameterize R* in order to get the best results (low computational cost and high solution quality). Presented rules are easily applicable to any path planning task in any grid-world as they do not require any additional knowledge except the positions of start and goal cells."}], "references": [{"title": "Using occupancy grids for mobile robot perception and navigation", "author": ["A. Elfes"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1989}, {"title": "Grid-based path-finding", "author": ["P. Yap"], "venue": "Proceedings of 15th Conference of the Canadian Society for Computational Studies of Intelligence,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2002}, {"title": "Search space representations", "author": ["P. Tozour"], "venue": "AI Game Programming Wisdom", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2004}, {"title": "A formal basis for the heuristic determination of minimum cost paths", "author": ["P.E. Hart", "N.J. Nilsson", "B. Raphael"], "venue": "IEEE Transactions on Systems Science and Cybernetics,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1968}, {"title": "Heuristics: intelligent search strategies for computer problem solving", "author": ["J. Pearl"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1984}, {"title": "First results on the effect of error in heuristic search", "author": ["I. Pohl"], "venue": "Machine Intelligence", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1970}, {"title": "A\u03b5 \u2013 an efficient near admissible heuristic search algorithm", "author": ["M. Gallab", "Dennis A"], "venue": "In Proceedings of the Eighth International Joint Conference on Artificial Intelligence", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1983}, {"title": "ARA*: Anytime A* with Provable Bounds on Sub-Optimality, Advances in Neural Information Processing Systems 16 (NIPS)", "author": ["M. Likhachev", "G. Gordon", "S. Thrun"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "Depth-first iterative-deepening: An optimal admissible tree search", "author": ["R.E. Korf"], "venue": "Artificial intelligence,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1985}, {"title": "Enhanced iterative-deepening search", "author": ["A. Reinefeld", "T.A. Marsland"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1994}, {"title": "Complete anytime beam search", "author": ["W. Zhang"], "venue": "In Proceedings of the Fifteenth National Conference on Artificial Intelligence", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1998}, {"title": "Near optimal hierarchical path finding", "author": ["A. Botea", "M. Muller", "J. Schaeffer"], "venue": "Journal of game development,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2004}, {"title": "Probabilistic roadmaps for path planning in high-dimensional configuration spaces", "author": ["L.E. Kavraki", "P. Svestka", "J.C. Latombe", "M.H. Overmars"], "venue": "IEEE Transactions on Robotics and Automation,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1996}, {"title": "Rapidly-exploring random trees: A new tool for path planning", "author": ["S.M. LaValle"], "venue": "Technical Report, 98-11,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1998}, {"title": "R* search: The proofs", "author": ["M. Likhachev", "A. Stentz"], "venue": "Technical Report,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2008}, {"title": "Algorithms of conic generation", "author": ["M.L.V. Pitteway"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1985}], "referenceMentions": [{"referenceID": 0, "context": "We use 8-connected grid as a formal model of agent\u2019s environment [1, 2, 3].", "startOffset": 65, "endOffset": 74}, {"referenceID": 1, "context": "We use 8-connected grid as a formal model of agent\u2019s environment [1, 2, 3].", "startOffset": 65, "endOffset": 74}, {"referenceID": 2, "context": "We use 8-connected grid as a formal model of agent\u2019s environment [1, 2, 3].", "startOffset": 65, "endOffset": 74}, {"referenceID": 3, "context": "Heuristic search algorithm A* [4] is widely used in AI community for finding paths on grids.", "startOffset": 30, "endOffset": 33}, {"referenceID": 4, "context": "A* using admissible heuristics guarantees finding a shortest path [5].", "startOffset": 66, "endOffset": 69}, {"referenceID": 5, "context": "Using weighted heuristics [7, 8, 9], implementing iterative deepening techniques [10, 11], imposing", "startOffset": 26, "endOffset": 35}, {"referenceID": 6, "context": "Using weighted heuristics [7, 8, 9], implementing iterative deepening techniques [10, 11], imposing", "startOffset": 26, "endOffset": 35}, {"referenceID": 7, "context": "Using weighted heuristics [7, 8, 9], implementing iterative deepening techniques [10, 11], imposing", "startOffset": 26, "endOffset": 35}, {"referenceID": 8, "context": "Using weighted heuristics [7, 8, 9], implementing iterative deepening techniques [10, 11], imposing", "startOffset": 81, "endOffset": 89}, {"referenceID": 9, "context": "Using weighted heuristics [7, 8, 9], implementing iterative deepening techniques [10, 11], imposing", "startOffset": 81, "endOffset": 89}, {"referenceID": 10, "context": "limits on the size of the set of candidate cells for exploration [12, 13] are examples of such approach.", "startOffset": 65, "endOffset": 73}, {"referenceID": 11, "context": "Decomposition can be performed using predefined criteria [14] or in random fashion [15, 16].", "startOffset": 57, "endOffset": 61}, {"referenceID": 12, "context": "Decomposition can be performed using predefined criteria [14] or in random fashion [15, 16].", "startOffset": 83, "endOffset": 91}, {"referenceID": 13, "context": "Decomposition can be performed using predefined criteria [14] or in random fashion [15, 16].", "startOffset": 83, "endOffset": 91}, {"referenceID": 13, "context": "It exploits the same ideas lying behind RRT planners [16] and uses WA* (A* with weighted heuristic) as local planner.", "startOffset": 53, "endOffset": 57}, {"referenceID": 14, "context": "We encourage the reader to examine the papers [6, 17] for the detailed explanation of R* and now give only a brief overview of the algorithm.", "startOffset": 46, "endOffset": 53}, {"referenceID": 15, "context": "In our implementation of R* we use midpoint circle algorithm [18] to generate successors \u2013 see fig.", "startOffset": 61, "endOffset": 65}], "year": 2015, "abstractText": "Path planning is typically considered in Artificial Intelligence as a graph searching problem and R* is state-of-the-art algorithm tailored to solve it. The algorithm decomposes given path finding task into the series of subtasks each of which can be easily (in computational sense) solved by well-known methods (such as A*). Parameterized random choice is used to perform the decomposition and as a result R* performance largely depends on the choice of its input parameters. In our work we formulate a range of assumptions concerning possible upper and lower bounds of R* parameters, their interdependency and their influence on R* performance. Then we evaluate these assumptions by running a large number of experiments. As a result we formulate a set of heuristic rules which can be used to initialize the values of R* parameters in a way that leads to algorithm\u2019s best performance.", "creator": "Microsoft\u00ae Word 2010"}}}