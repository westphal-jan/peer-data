{"id": "1512.01503", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Dec-2015", "title": "On the Min-cost Traveling Salesman Problem with Drone", "abstract": "Once known for being used exclusively in the military, unmanned aerial vehicles (UAVs) have become part of new logistics methods in the commercial sector, known as \"last mile delivery.\" In this novel approach, small unmanned aerial vehicles (UAVs), also known as drones, are used alongside trucks to deliver goods to customers to improve the quality of service or reduce transport costs, resulting in a new variant of the problem of the moving vendor (TSP), which we call TSP with drone (TSP-D). In this article, we look at a variant of TSP-D where the main goal is to minimize total transport costs. We also propose two heuristics: \"Drone First, Truck Second\" (DFTS) and \"Truck First, Drone Second\" (TFDS) to effectively solve the problem. The former constructs route for drones, while the latter route for trucks constructs first.", "histories": [["v1", "Fri, 4 Dec 2015 18:23:41 GMT  (532kb,D)", "http://arxiv.org/abs/1512.01503v1", "23 pages. arXiv admin note: text overlap witharXiv:1509.08764"], ["v2", "Sun, 27 Dec 2015 06:21:51 GMT  (525kb,D)", "http://arxiv.org/abs/1512.01503v2", "23 pages. arXiv admin note: text overlap witharXiv:1509.08764"], ["v3", "Sun, 22 May 2016 17:06:40 GMT  (0kb,I)", "http://arxiv.org/abs/1512.01503v3", "23 pages. arXiv admin note: text overlap witharXiv:1509.08764. Hence we update the previous submission in order to have the latest work"], ["v4", "Thu, 26 May 2016 13:14:33 GMT  (0kb,I)", "http://arxiv.org/abs/1512.01503v4", "We proposedarXiv:1509.08764as the first report about our research on TSP-D. However due to a critical error in the experiment, we changed the research approach and method and proposearXiv:1512.01503. Now it seemsarXiv:1509.08764received new citations. we would like to withdrawarXiv:1512.01503and replacedarXiv:1509.08764with our latest work"]], "COMMENTS": "23 pages. arXiv admin note: text overlap witharXiv:1509.08764", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["quang minh ha", "yves deville", "quang dung pham", "minh ho\\`ang h\\`a"], "accepted": false, "id": "1512.01503"}, "pdf": {"name": "1512.01503.pdf", "metadata": {"source": "CRF", "title": "On the Min-cost Traveling Salesman Problem with Drone", "authors": ["Quang Minh Ha", "Yves Deville", "Quang Dung Pham", "Minh Ho\u00e0ng H\u00e0"], "emails": ["quang.ha@uclouvain.be", "yves.deville@uclouvain.be", "dungpq@soict.hust.edu.vn", "minhhoang.ha@cirrelt.net"], "sections": [{"heading": null, "text": "I. Introduction\nOver the years, companies always look for methods to find the most cost efficient wayto distribute goods across the logistic network [10]. Traditionally, a truck is used tohandle these tasks and the corresponding transportation problem is modeled as a traveling salesman problem (TSP). However, with the emergence of technologies, a new distribution method arises where small unmanned aerial vehicles (UAV), also known as drones, are deployed to support parcels delivery. On one hand, there are 4 advantages of using a drone for delivery: (1) it can be operated without human as pilot, (2) it can avoid the congestion of traditional road networks by flying over them, (3) it is faster than trucks, and (4) it has much lower transportation cost (per kilometer) [13]. On the other hand, as the drones are operated using batteries, their flight endurance is limited, resulted in maximum travel distance and restricted size of parcels. Likewise, a truck has its advantage of long range traveling, large cargo and diversity of parcels\u2019 size but it is also heavy, slow and cost inefficient.\nEvidently, the pros of the truck resolve the cons of the drone and conversely, the pros of drone fix the cons of the truck. This is the foundation of a novel method named \"last mile delivery with drone\" [3] that transports the drone closer to customer locations by the truck in order to service customers within its flight range and effectively increase its usability and schedule flexibility. Specifically, the truck departs from the depot carrying the drone and all of customer parcels. As the truck makes deliveries, the drone is launched from the truck to service a customer with a parcel. While the drone is in service, the truck continues its schedule to new customer locations. The drone then returns to the truck in a location different from the launch point.\nIn the literature, we are aware of two previous works that investigates the routing problem related to the combined truck and drone delivery approach. Murray and Chu [7] introduce\nar X\niv :1\n51 2.\n01 50\n3v 1\n[ cs\n.A I]\n4 D\nec 2\n01 5\nthe problem and call it \"Flying Sidekick Traveling Salesman Problem\" (FSTSP). A mixed integer programming (MIP) formulation and a simple heuristic are proposed. Basically, their heuristic is based on \"Truck First, Drone Second\" (TFDS) idea, that is to construct a route for truck first by solving a TSP problem then use greedy procedures to select nodes that are serviced by drone. Agatz et al., [1] study a slightly different problem - called \"Traveling Salesman Problem with Drone\" (TSP-D), in which the drone has to follow the same road network as the truck. Moreover, in the TSP-D, the drone is allowed to be launched and return to a same location while in FSTSP this is forbidden. In Agatz et al., [1], the TSP-D is formulated as a MIP formulation and solved by \"Truck First, Drone Second\" (TFDS) heuristic in which drone route construction is based on local search and dynamic programming. Both of their works aim to minimize the time returning to depot of the truck with instances of 10 customers.\nThe minimization in truck\u2019s traveling time can improve the service quality [8]. However, in every logistics or delivery operations, transportation cost also plays an important role, helping to reduce the overall business cost [4] [11]. Hence, minimizing this cost by using a more cost-efficient vehicle is a vital objective of every companies with transport and logistic activities. Since we are not aware of any previous works on TSP-D that aims to minimize the total transportation cost, it brings a strong motivation to follow this approach.\nThis paper studies a novel variant of TSP-D with the following hypotheses: (1) The truck and the drone must go alongside with each other. (2) The drone must be launched and retrieved in two different customer locations. (3) The truck cannot return to any visited customer to pickup the drone (it avoids the subtour problem in TSP). Most importantly, the objective is to minimize the total transportation cost of both vehicles.\nIn this paper, we propose MIP-based heuristics to solve this min-cost TSP-D variant. Our heuristics are based on not only the existing approach \"Truck First, Drone Second\" proposed in the literature, but also a novel approach that we call \"Drone First, Truck Second\". The contributions of this paper are:\n- We propose a new variant of TSP-D in which the objective is to minimize the total transportation cost of vehicles.\n- We propose two heuristics of two opposite concepts: \"Drone First, Truck Second\" (DFTS) and \"Truck First, Drone Second\" (TFDS)\n- We introduce a mixed integer programming formulation to solve the clustering step in our heuristic methods\n- We provide various sets of instances in different sizes of customers and options for testing this problem\nThis paper is structured as follows: section I gives the introduction. Section II discusses problem definition and its mixed integer formulation. We describe our two heuristics in section III. Section IV is about the design of the experiments including instance generations and settings. After that, we discuss the numerical results in section V with a variety of analysis. Finally, section VI concludes the paper and gives suggestion for future researches.\nII. The Traveling Salesman Problem with Drone\nThis section is divided into three parts. Firstly, we give the definition of the Traveling Salesman Problem with Drone (TSP-D) where we describe the context, constraints, and explain the terminologies to be used further in this paper. Consequently, we present the MIP formulation adapted\nfrom the work of [7]. Lastly, improvements in constraints and drone deliveries set are proposed to enhance the formulation in terms of modeling and solving time.\n1. Problem definition\nIn TSP-D, we consider a set of customers (nodes), each of whom must be served exactly once by either a truck or a drone. The truck and the drone must depart from, and return to the a single depot exactly once. During the tour of the truck, it may proceed multiple drone deliveries. Each of drone delivery is a tuple consists of three nodes: the launch node, the drone node, and the return node as follows:\n- The launch node can be either a depot or a customer location (node).\n- The drone node is a customer location that is served by drone\n- After service the customer, drone will either rendezvous with the truck at the next customer location, or return to the depot. These two vehicles must wait for each other at the rendezvous point to fulfil the movement-synchronization characteristic [5]. Furthermore, in order to guarantee the service quality, these two vehicles waiting time are limited by a constant called time span.\nOnce launched, the drone must visit a customer and return to a truck or to the depot within the drone\u2019s flight endurance or time span limit. A tuple is only selected if and only if these two time constraints are met. There is also a time needed for the truck\u2019s driver to launch and retrieve the drone. The objective is to minimize the total transportation cost, given their different rates per kilometer.\nA visual explanation is shown in figure 1, 2, 3. Starting from the truck-only route in figure 1, figure 2 interprets the scenario where customers are far from the depot and outside the flight endurance of the drone.\nOn the other hand, figure 3 illustrates the case where some customers are within the drone flight range, therefore, the drone can start directly from the depot, service a customer, then rendezvous with the truck to continue the delivery task. At the end, the drone, after being\nlaunched from the truck, service a customer, can directly flight to the depot as it meets the flight endurance requirement.\nAs can be seen from the example above, a solution of TSP-D is an assemblage of smaller routes, each of which may or may not contain the delivery by drone. In the case it has a drone, the route contains not only an drone delivery, but also a set of customers that the truck serve during the time the drone performs a delivery. We define this kind of route an drone route which is described below.\nAs the generalization of TSP, this is a NP-Hard problem. It reduces to a TSP when the endurance of the drone is 0, hence no drone is used during the computation."}, {"heading": "1.1 Drone route", "text": "An drone route is defined as (\u3008i, j, k\u3009, {O}) where:\nAn example is shown in figure 1, set O has 3 customers. Another example is in figure 5 where there is no customer in-between launch point and rendezvous point, hence the truck and the drone will travel a triangle. The definition of drone route is a central element in our cluster first formulation which is shown in the section below.\n2. Notations, parameters and mathematical formulation\nThe following notations and parameters are applied for all the mixed integer programming (MIP) formulations in this paper. Let N = {1, . . . , n} denote the set of customers. Let 0 and n + 1 denote single physical depot. The set of all nodes in the graph is denoted by V = {0, . . . , n + 1}. We denote dij is the Manhattan distance between customer i and j and d\u2032ij is its Euclidean distance. Let \u03c4ij and \u03c4\u2032ij denote the time travel for the truck and the drone respectively, with i \u2208 V0 and j \u2208 V+. The travel time of each type of vehicle is calculated by taking into account their unique speed. Additionally, as the truck and drone are not allowed to revisit any node, \u03c4ii and \u03c4\u2032ii are undefined for all i \u2208 V. Let sL and sR be the time taken for the drone to be launched from and recovered by, upon the rendezvous point. The flight endurance of the drone is denoted by e. Let P represents the set of all drone deliveries. We denote C1, C2 are the transportation cost rates (per kilometer) of truck and drone respectively. The time span is denoted as T.\nWe now define the decision variables. Let xij \u2208 {0, 1} equal one if the truck goes from node i to node j with i \u2208 V0 and j \u2208 V+ and i 6= j. Let yijk \u2208 {0, 1} equal one if the drone serves the delivery \u3008i, j, k\u3009. Let tj and t\u2032j denote the time which the truck and the drone arrives at node j \u2208 V+. We have tj, t\u2032j \u2265 0, t0 = t\u20320 = 0 represent the earliest departure time of both truck and drone. Let pij \u2208 {0, 1} equals one if the customer i \u2208 N is visited at some moments before customer j \u2208 N, j 6= i in the truck\u2019s path. This variable ensures that consecutive drone deliveries are consistent with the ordering of the truck\u2019s visitation sequence. As if both i and j are visited by the drone, the value of pij will be inconsequential in the constraints. We also have p0j = 0 for all j \u2208 N, to indicate that the truck will always start the tour from the depot. As a standard TSP subtour elimination constraints, we denote 1 \u2264 u \u2264 n + 2 denote the position of the node i, i \u2208 V+ in the truck\u2019s path.\nThe MIP formulation is presented as follows:\nMin C1 \u2211 i\u2208V0 \u2211 j\u2208V+ i 6=j dijxij + C2 \u2211 i\u2208V0 \u2211 j\u2208N i 6=j \u2211 k\u2208V+ \u3008i,j,k\u3009\u2208P\n(d\u2032ij + d \u2032 jk)yijk (1)\ns.t. \u2211 i\u2208V0 i 6=j xij + \u2211 i\u2208V0 i 6=j \u2211 k\u2208V+ \u3008i,j,k\u3009\u2208P yijk = 1 \u2200j \u2208 N (2)\n\u2211 j\u2208V+ x0j = 1 (3)\n\u2211 i\u2208V0 xi,n+1 = 1 (4)\nui \u2212 uj + 1 \u2264 (n + 2)(1\u2212 xij) \u2200i \u2208 N, j \u2208 {V+ : j 6= i} (5)\n\u2211 i\u2208V0 i 6=j xij = \u2211 k\u2208V+ k 6=j xjk \u2200j \u2208 N (6)\n\u2211 j\u2208N j 6=i \u2211 k\u2208V+ \u3008i,j,k\u3009\u2208P yijk \u2264 1 \u2200i \u2208 V0 (7)\n\u2211 i\u2208V0 i 6=k \u2211 j\u2208N \u3008i,j,k\u3009\u2208P yijk \u2264 1 \u2200k \u2208 V+ (8)\n2yijk \u2264 \u2211 h\u2208V0 h 6=i xhi + \u2211 l\u2208N l 6=k xlk \u2200i \u2208 N, j \u2208 {N : j 6= i}, k \u2208 {V+ : \u3008i, j, k\u3009 \u2208 P} (9)\ny0jk \u2264\u2211 h\u2208 xhk \u2200j \u2208 N, k \u2208 {V+ :} (10)\nuk \u2212 ui \u2265 1\u2212 (n + 2) (\n1\u2212 \u2211 j\u2208N \u3008i,j,k\u3009\u2208P yijk\n) \u2200i \u2208 N, k \u2208 {V+ : k 6= i} (11)\nt\u2032i \u2265 ti \u2212M (\n1\u2212 \u2211 j\u2208N j 6=i \u2211 k\u2208V+ \u3008i,j,k\u3009\u2208P yijk\n) \u2200i \u2208 N (12)\nt\u2032i \u2264 ti + M (\n1\u2212 \u2211 j\u2208N j 6=i \u2211 k\u2208V+ \u3008i,j,k\u3009\u2208P yijk\n) \u2200i \u2208 N (13)\n|tk \u2212 t\u2032k| \u2264 T (\n\u2211 i\u2208V0 i 6=k \u2211 j\u2208N \u3008i,j,k\u3009\u2208P yijk\n) \u2200k \u2208 V+ (14)\ntk \u2265 th + \u03c4hk + sL ( \u2211 l\u2208N l 6=k \u2211 m\u2208V+ \u3008i,j,k\u3009\u2208P yklm ) + sR ( \u2211 i\u2208V0 i 6=k \u2211 j\u2208N \u3008i,j,k\u3009\u2208P yijk ) \u2212M(1\u2212 xhk) (15)\n\u2200h \u2208 V0, k \u2208 {V+ : k 6= h} t\u2032j \u2265 t\u2032i + \u03c4\u2032ij \u2212M (\n1\u2212 \u2211 k\u2208V+ \u3008i,j,k\u3009\u2208P yijk\n) \u2200j \u2208 N\u2032, i \u2208 {N0 : i 6= j} (16)\nt\u2032k \u2265 t \u2032 j + \u03c4 \u2032 jk + sR \u2212M ( 1\u2212 \u2211\ni\u2208V0 \u3008i,j,k\u3009\u2208P\nyijk ) \u2200j \u2208 N\u2032, k \u2208 {V+ : k 6= j} (17)\nt\u2032k \u2212 (t \u2032 j \u2212 \u03c4\u2032ij) \u2264 e + M(1\u2212 yijk) \u2200k \u2208 V+, j \u2208 {N : j 6= k}, i \u2208 {N0 : \u3008i, j, k\u3009 \u2208 P} (18)\nui \u2212 uj \u2265 1\u2212 (n + 2)pij \u2200i \u2208 N, j \u2208 {N : j 6= i} (19)\nui \u2212 uj \u2264 \u22121 + (n + 2)(1\u2212 pij) \u2200i \u2208 N, j \u2208 {N : j 6= i} (20)\npij + pji = 1 \u2200i \u2208 N, j \u2208 {N : j 6= i} (21) t\u2032i \u2265 t\u2032k \u2212M (\n3\u2212 \u2211 j\u2208N \u3008i,j,k\u3009\u2208P\nj 6=l yijk \u2212 \u2211 m\u2208N m 6=i m 6=k m 6=l \u2211 n\u2208V+ \u3008l,m,n\u3009\u2208P n 6=i n 6=k ylmn \u2212 pil\n) (22)\n\u2200i \u2208 V0, k \u2208 {V+ : k 6= i}, l \u2208 {N : l 6= i, l 6= k}\nt0 = 0 (23)\nt\u20320 = 0 (24)\np0j = 1 \u2200j \u2208 N (25)\nxij \u2208 {0, 1} \u2200i \u2208 V0, j \u2208 {V+ : j 6= i} (26)\nyijk \u2208 {0, 1} \u2200i \u2208 V0, j \u2208 {N : j 6= i}, k \u2208 {V+ : \u3008i, j, k\u3009 \u2208 P} (27)\n1 \u2264 ui \u2264 n + 2 \u2200i \u2208 V+ (28)\nti \u2265 0 \u2200i \u2208 N (29)\nt\u2032i \u2265 0 \u2200i \u2208 N (30)\npij \u2208 {0, 1} \u2200i \u2208 V0, j \u2208 {N : j 6= i} (31)\nThe objective function (1) is to minimize the total transportation cost of both vehicles. The cost includes two parts: (i) the first part is the cost of the truck going in Manhattan distances; (ii) the\nsecond part is the cost of the drone, going two arcs in each drone delivery, in Euclidean distances. For the constraints, each customer is served exactly once by either truck or drone as defined in constraint (2). Constraint (3) ensures that the truck departs from depot exactly once and constraint (4) says it must return to depot exactly once also. Truck\u2019s subtour elimination is provided in (5) and (29). Constraint (6) states that the truck visits at node j must also depart from j. Constraint (7) and (8) indicate that the drone can be launched (rendezvous) from (at) any customer location or the starting (ending) depot at most once. Constraint (9) associates the drone delivery with the truck route. It states that if the drone executes a delivery to j then the truck\u2019s route must be assigned to both i and k in order for it to launch and retrieve the drone. In the special case where the drone is launched directly from the depot, constraint (10) ensures that the truck will pickup the drone at k. Furthermore, in constraint (11), the truck must visit i before k if the drone executes a delivery \u3008i, j, k\u3009.\nConstraint (12) and (13) define that if the drone executes a delivery \u3008i, j, k\u3009, then it must be synchronized in time with the truck at i for launching. In constraint (14), we ensure that both vehicles only wait for each other at the rendezvous point no later than T in a drone route. Constraint (15) incorporates the arrival time of the truck at one point k with the previous arrival time h and its travel time, and possibly, launch and/or retrieval time if there\u2019s a drone delivery. Similarly, constraints (16) and (17) associate the arrival time of the drone with its travel time and retrieval time when there\u2019s a drone delivery. Constraint (18) ensures drone\u2019s flight endurance requirement. Constraint (19)-(22) define that if the drone is launched from i and return to k then during this delivery it cannot be launched again, given that i precedes l in the truck\u2019s route. Finally, constraints (23)-(31) define the decision variables and their initial values. The value of big M from constraints (12)-(21) is determined by taking the total travel time using nearest neighbor heuristic.\nIII. Heuristics\nThis section presents two heuristics based on two adverse approaches. In \"Drone First, Truck Second\" (DFTS), we aim to find the clusters - the set of drone routes that are selected in the final solution. After that, we build the tour of truck given the existing drone routes. The underlying idea is to find as many drone routes as possible first since the cost of using drone is much cheaper, hence, more drone used, more cost-efficient. Alternatively, in \"Truck First, Drone Second\" (TFDS), we build the truck-only tour first, then apply an adapted version of Murray and Chu [7] heuristic to find the set of drone routes by replacing some nodes serve by truck with drone nodes and possibly rearrange some nodes in truck\u2019s tour. This approach considers truck-only tour as the initial solution (when drone endurance is 0), then apply multiple iteration with the hope of improving it.\n1. Drone First, Truck Second (DFTS)\nIn this section, we introduce a mixed integer programming formulation to solve the cluster step in our heuristics. Before presenting the formulation, we first define additional notations. We also explain the method to find the drone routes \u2126 and two different profit functions: one considers the factor of time span and the other does not."}, {"heading": "1.1 Additional notations", "text": "We use the existing notations and parameters of the formulation above and define additional ones as follows: let \u2126 represents the set of possible drone routes given the set of nodes V. We want to restate that a tuple of a drone route is selected if and only if it meets the flight endurance or time\nspan requirement. Furthermore, a tuple (drone delivery) may be appear in one or many drone routes due to the various possibilities of in-between nodes {O}. Hence the size of \u2126 is at least the number of drone deliveries.\nWe also define some binary coefficients as follows: let uir \u2208 {0, 1} equals one if customer i \u2208 N appears in set {O} of drone route r \u2208 \u2126 in the final solution. Similarly, dir \u2208 {0, 1} equals one if customer i \u2208 N is a drone node of route r \u2208 \u2126. Additionally, tir \u2208 {0, 1} equals one if customer i \u2208 V appears either at the launch point i or rendezvous point k of a drone delivery of route r \u2208 \u2126.\nWe have the binary decision variables \u03bbr \u2208 {0, 1} equals one if drone route r \u2208 \u2126 is selected in the final solution. Let cr denote the profit of choosing route r. This profit is calculated using various functions that are shown in the experiment settings section."}, {"heading": "1.2 Drone first formulation", "text": "Given the additional notations, parameters and variables, we now present our mixed integer programming (MILP) formulation:\nMax \u2211 r\u2208\u2126 cr\u03bbr (32)\ns.t. \u2211 r\u2208\u2126 uir\u03bbr \u2264 1 \u2200i \u2208 N (33)\n\u2211 r\u2208\u2126 dir\u03bbr \u2264 1 \u2200i \u2208 N (34)\n\u2211 r\u2208\u2126 tir\u03bbr + \u2211 r\u2208\u2126 dir\u03bbr \u2264 1\u2212 \u2211 r\u2208\u2126 uir\u03bbr \u2200i \u2208 V (35)\n\u2211 r\u2208\u2126 tir\u03bbr + \u2211 r\u2208\u2126 uir\u03bbr \u2264 1\u2212 \u2211 r\u2208\u2126 dir\u03bbr \u2200i \u2208 V (36)\n\u2211 r\u2208\u2126 dir\u03bbr + \u2211 r\u2208\u2126 uir\u03bbr \u2264 1 \u2200i \u2208 V (37)\n(38)\n\u2211 r\u2208\u2126 tir\u03bbr \u2264 2\u2212 2( \u2211 r\u2208\u2126 dir\u03bbr + \u2211 r\u2208\u2126 uir\u03bbr) \u2200i \u2208 V (39)\n(40)\nThe objective is to maximize the profit of choosing drone routes among \u2126. Constraint (2) ensures that each node appears in-between a drone route at most once. Similarly, constraint (4) guarantees that each node appears as drone node at most once. Constraint (2) states that each node may appears as terminal node (i or k in a drone delivery) at most twice. For example: we have two routes with two drone deliveries {0, 1, 5} and {5, 2, 4}, we cannot have node 5 appear as first or last node of a sortie in any other routes. Hence another route with drone delivery such as {5, 6, 7} violates the constraint. Constraint (5) and (6) ensures that if once a node is either drone node or in-between node, they only do one role. Constraint (7) couples the drone node and in-between node. Finally, constraint (8) couples both terminal node, drone node, and in-between node."}, {"heading": "1.3 Finding the drone routes \u2126", "text": "From the formulation above, there remains the method to find the set of drone routes \u2126. We describe the algorithm as below:\nAlgorithm 1: Find drone routes Data: Drone deliveries P, limit L Result: \u2126 1 \u2126\u2190 [] ; 2 foreach \u3008i, j, k\u3009 in P do 3 S\u2190 all possible paths from i to k that goes to less than L nodes ; 4 foreach s in S do 5 \u2126\u2190 \u2126 \u222a (\u3008i, j, k\u3009, s)\n6 return \u2126\nIn details, with each drone delivery \u3008i, j, k\u3009, we collect all the paths that truck can go from i to k. However, finding this set itself is a difficult task, therefore, we limit the number of nodes in the path L. In our experiment, we have L = 1, meaning that between i and k the truck can go to one more location at most. Additionally, as the objective of is to minimize the transportation cost, and the truck\u2019s cost is much higher than the drone\u2019s, it is better for the truck not to travel to many nodes while the drone is in delivery."}, {"heading": "1.4 Profit functions", "text": "In the MIP formulation above, the profit cr, r \u2208 Omega is calculated by two different functions with various options. They are:\nFunction 1: cr = pr (41)\nFunction 2: cr = pr\nwr + 1 (42)\nWhere wr is the actual waiting time between 2 vehicles at the rendezvous point and pr has 2 options:\n(1) pr is calculated by taking into account two elements: (d1) Euclidean distance from drone node of a drone delivery tuple \u3008i, j, k\u3009 to the center of the customers and (d2) Manhattan distance of the truck going from i to k. Then we have:\npr = d1 d2\n(43)\n(2) Similar to (1), pr is calculated by replacing (d1) with (d3) which is the Euclidean distance from the drone node to the depot, so we have:\npr = d3 d2\n(44)\nBoth options of pr share the same logics. They aim to choose the drone routes that: (1) minimize distances of truck\u2019s path (d2); (2) have drone nodes are ones in the boundary of the customer region (d1), or the furthest from the depot (d3). Since the model always maximize this total distance, it allows the drone to serve the far-most customers, hence, save more cost as the drone\u2019s is much cheaper than truck\u2019s."}, {"heading": "1.5 Heuristic", "text": "The pseudo code is shown in Algorithm 2. It begins at line 1 by solving the clustering procedure in function solveMIP to get the set of selected drone routes. This set, along with the remaining nodes that are not appeared in any selected drone routes, is then used to construct a symmetry TSPLIB file [9] in line 2. However, if we leave the drone route as it, during the process of building the truck\u2019s tour, its origin may be altered as all elements of the drone route will be treated as normal nodes in a TSP graph. In order to keep it unchanged, we need to fix these edges in the TSPLIB file. This is the work of constructTSPInput function which is introduced in Algorithm 3.\nAfter line 2, the \"drone first\" part of the heuristic is completed. The tour of the truck with given drone routes is then constructed by using a TSP solver in line 3. Finally we process the drone routes to get the solution in line 4. Figure 6 demonstrates a sample process of DFTS heuristic.\nAlgorithm 2: DFTS heuristic Data: instance Result: Solution 1 droneRoutes\u2190 solveMIP(instance); 2 TSPInput\u2190 constructTSPInput(droneRoutes, instance); 3 TSPSolution\u2190 solveTSP(TSPInput); 4 Solution\u2190 createSolutionFromTSP(TSPSolution, instance); 5 return Solution;\nConstructing TSP with fixed edges In Algorithm 3, we want to construct a full matrix TSPLIB file from a list of nodes, tspNodes. Firstly, we consider each drone route in the droneRoutes to save all the edges from the launch node i to the rendezvous node k in line 6. We also add all the truck nodes (i, k, and in-between nodes) to the tspNodes. This list is initialized with all the remaining nodes that are not in any drone routes. In line 10, we create a full weight matrix from tspNodes. In this matrix, all the edges that are found in f ixedEdges are set to weight of -9999, so they are fixed and must be traversed in the final TSP solution.\nAlgorithm 3: constructTSPInput function that create a TSPLIB file, as input for TSP solver Data: droneRoutes Result: outputFile 1 remainNodes \u2190 all nodes not in droneRoutes ; 2 tspNodes \u2190 remainNodes ; 3 f ixedEdges\u2190 [] ; 4 foreach route \u2208 droneRoutes do 5 \u3008i, j, k\u3009 \u2190 drone delivery of route ; 6 f ixedEdges\u2190 edges in the path from i to k; 7 tspNodes\u2190 i ; 8 tspNodes\u2190 k ; 9 tspNodes\u2190 in-between nodes of i and k ;\n10 f ullMatrix = build a full weight matrix from tspNodes, with all the edges\u2019 values in f ixedEdges are set to -9999; 11 generate a TSPLIB file outputFile with given f ullMatrix; 12 return outputFile;\n2. Truck First, Drone Second (TFDS)\nIn this section, we present an adapted version of Murray and Chu\u2019s FSTSP heuristic so that it incorporates the factor of time span and consider the savings of transportation cost instead of traveling time. The main principle of this algorithm is to run multiple iterations, each of which determine every truck-served customers to see whether they can be: (i) rearranged to another position to have better cost saving, (ii) removed from the truck\u2019s route and become a drone node. During the iterations, a global maxSavings value is maintained and the algorithm will be terminated until no more savings can be achieved (maxSavings = 0).\nSpecifically, in algorithm 4, it firstly solves the truck-only TSP using the same solver as two heuristics above, then calculate the arrival times of the truck to each node, and the cumulative cost at each node (line 2). Initially, the original truck route is the only \"subroute\" in the truckSubRoutes (line 3). As the algorithm proceeds, it will divide the truck route into smaller subroutes and store in this list. Each of them may be a drone route or truck-only route. Line 5 starts the iterations and line 6 considers each customer j, calculating its possible savings in algorithm 5.\nIn algorithm 5, if j does not belong to a drone route, then we simply get the cost savings if we remove j and the truck goes directly from i to k (line 3). On the other hand, when j belongs to a drone route, we also need to compare the savings above with the transportation cost of the drone delivery (line 9).\nWe go back to algorithm 4, in line 8, where each subroute is processed to see if current considering customer j can be associate with it: either relocate j or make j to become its drone node. If the subroute is a drone route, then we call the function calcCostTruck (algorithm 6, otherwise calcCostDrone is called (algorithm 7).\nIn calcCostTruck function (algorithm 6, we iterate through each pair of adjacent nodes i and k in the subroute and evaluate the possibility to insert j between i and k to save the the cost. Line 4 calculates the cost that can be saved, line 5 calculates the time cost when inserting j. We check the cost saving in line 6 and the time requirement in line 7. If this saving is better than maxSavings then we store these positions i, j, k (line 10).\nFor the calcCostDrone function (algorithm 7), we consider a truck-only subroute. The algorithm will find a possibility to create a new drone route with j being the drone node, or examine whether\nAlgorithm 4: TFDS heuristic with time span and min-cost objective Result: truckSubRoutes 1 Customers = N ; 2 [truckRoute, t, c] = solveTSP(N); 3 truckSubRoutes = {truckRoute}; 4 maxSavings = 0; 5 repeat 6 forall the j \u2208 Customers do 7 Call the calcSavings(j, c) function ; 8 forall the subroute in truckSubRoutes do 9 if there is a drone associate with this subroute then\n10 Call the calcCostTruck(j, t, c, subroute) function\n11 else 12 Call the calcCostDrone(j, t, c, subroute) function\n13 if maxSavings \u2265 0 then 14 Call the per f ormUpdate function; 15 Reset maxSavings = 0 ;\n16 else 17 STOP\n18 until Stop;\nAlgorithm 5: calcSavings function Data: j : a customer currently assigned to the truck c : the vector of truck\u2019s cumulative transportation cost at each node Result: Solution 1 Find i, the node immediately preceding j in the truck\u2019s route; 2 Find k, the immediate successor node to j in the truck\u2019s route ; 3 savings = (di,j + dj,k \u2212 di,k)C1 ;\nj can be removed from the truck\u2019s route for drone delivery (line 1-4). If the answer is yes, then we check the cost saving and store the locations of i, j, k and update the maxSavings (line 5-8).\nBackward to TFDS heuristic in algorithm 4, after considering all customers and their possibilities for relocation or being a drone node (line 6-12), we check if the best changes can result in a positive maxSavings, meaning we can actually save more cost, then we call the per f ormUpdate function to make the changes (line 14) and reset maxSavings afterward (line 15). In the case we cannot find any changes that can save the existing cost, the algorithm is stopped.\nThis is a simple yet effective heuristic to find good drone routes in order to save the transportation cost. However, it has one weakness due to its greedy characteristics: once it chooses a node to be drone node, it will not try to relocate this node in the next iterations.\nAlgorithm 6: calcCostTruck function - Calculates the cost of inserting customer j into a different position of the truck\u2019s route\nData: j : current considering customer t : the vector of truck\u2019s arrival time to each node c : the vector of truck\u2019s cumulative transportation cost at each node subroute : current considering subroute Result: Solution\n1 Find a, the first node in truck\u2019s subroute ; 2 Find b, the last node in truck\u2019s subroute ; 3 forall the adjacent i and k in subroute do 4 cost = (di,j + dj,k \u2212 di,k)C1 ; 5 timeCost = \u03c4i,j + \u03c4j,k \u2212 \u03c4i,k ; 6 if cost < savings then 7 if t[b]\u2212 t[a] + timeCost \u2264 min{e, timespan} then 8 if savings\u2212 cost > maxSavings then 9 servedByDrone = False;\n10 j\u2217 = j; i\u2217 = i; k\u2217 = k; 11 maxSavings = savings\u2212 cost;\nAlgorithm 7: calcCostDrone function - Calculates the cost of serving customer j by a drone (a drone node)\nData: j : current considering customer c : the vector of truck\u2019s cumulative transportation cost at each node subroute : current considering subroute Result: Solution\n1 forall the i and k in subroute, i precedes k do 2 if \u03c4\u2032i,j + \u03c4 \u2032 j,k \u2264 min{e, timespan} then 3 Find c\u2032[k], the truck\u2019s cost at node k if j was removed from the truck\u2019s route ; 4 cost = (d\u2032i,j + d \u2032 j,k)C2 ; 5 if savings\u2212 cost > maxSavings then 6 servedByDrone = True; 7 j\u2217 = j; i\u2217 = i; k\u2217 = k; 8 maxSavings = savings\u2212 cost;\nIV. Experiments\nIn this section, we describe our design of experiment in term of instances and settings. For the instances, we adapt the characteristics of depot locations from the work of [7], the customer locations generations from [1]. The detailed explanations are shown in subsections below.\nAlgorithm 8: performUpdate function Data: servedByDrone, i\u2217, j\u2217, k\u2217\nResult: Solution 1 if servedByDrone == True then 2 The Drone is now assigned to i\u2217 \u2192 j\u2217 \u2192 k\u2217; 3 Remove j\u2217 from truckRoute and truckSubRoutes; 4 Append a new truck subroute that starts at i\u2217 and ends at k\u2217; 5 Remove i\u2217, j\u2217, k\u2217 from Customers; 6 Update t and c (the two vectors above);\n7 else 8 Remove j\u2217 from its current truck subroute; 9 Insert j\u2217 between i\u2217 and k\u2217 in the new truck subroute ;\n10 Update truckRoute ; 11 Update t and c;\n1. Instances generation\nIn order to evaluate the impact of different aspects of depot and customer locations to the performance of our heuristics, 3 sets of instances were generated. Each of them has different number of customers along with the square region that they are distributed (see table 2). The customer locations respect the triangle inequality and are uniformly distributed across the area.\nWe design the first set (Set 1) similar to the parameters of Murray and Chu [7]. Set 2 has 5 times more customers in 2 times bigger than Set 1. The last set doubled in both customer and area size. We put customers in larger area so that the drone alone cannot make direct delivery to all customers from the depot, bringing up the meaning of using it alongside with truck to travel long distance, closer to customers\u2019 regions.\nFor each instance, the depot is placed at one of the three locations: in (0,0), the average of the x- and y-coordinates of the customers, the average x-coordinates with y-coordinates of zero. We call them 0-center, xy-center, x-center respectively. In every set, we generate 10 instances for each depot location setting. Therefore there are 90 instances generated in total.\n2. Experiment settings\nWe create three combinations of speed between drone and truck and drone\u2019s endurance. With the truck\u2019s speed set to a fixed value, we diversify the drone\u2019s speed and its endurance. The settings are shown in Table 3.\nThe time to launch and retrieve the drone is 1 minute each. The time span is set to 5 minutes. Transportation cost ratio between drone and truck is 1:25. We will also do an experiment with the ratio 1:50 and 1:10 with Set 2 to evaluate the impact of this value to our heuristics performance. To solve the MIP model, we use CPLEX 12.6.2. The TSP is solved (in both heuristics) by the state-of-the-art TSP solver Concorde [2].\nWith 2 function types, 2 pr options, we have 4 settings of DFTS, labeled as: obj-1, obj-2, obj-1w, obj-2w. TFDS heuristic is labeled as tf.\nV. Numerical results\nThis section describes experimental results on all settings of our heuristics and the one proposed by [7]. The algorithm is implemented in Scala language and the tests are run on a computer with 2.4-GHz Intel Core i7 5500U and 8GB of RAM. The rest of this section is organized as follows. Firstly, we analyze the performance of all heuristics with optimal solution of the MIP model (section II) in small instances. Secondly, we compare the results of all heuristics with truck-only value to evaluate their overall performance. Then we report the results of DFTS heuristic under all settings against TFDS. After that, we analyze which is the best setting for each instance options. The last two sections evaluate the impact of truck - drone speed ratios and cost ratios to the performance of our heuristics.\n1. Comparison with optimal solution\nIn this section, we run 300 tests to evaluate the performance between the MIP model optimal solution 2 and two heuristics. The gap is calculated by:\ngap = heuristicObjective\u2212 optimalObjective\noptimalObjective \u00d7 100 (45)\nThe smaller positive gap, the better performance of the heuristics, as it is close to the optimal solution. The results are shown in Table 4. As can be seen, DFTS with obj-1 and obj-2 delivers the best average gap comparing to TFDS. In details, both obj-1 and obj-2 has a similar average performance (28.54% and 32.86%) while it is about 60% worse in TFDS (49.45%). This is also true with the best gap and worst gap. While the best gap between obj-1, obj-2 and TFDS doesn\u2019t not so different, the worst gap shows a significant distinction. TFDS\u2019s worst gap is about 2.3 times larger than obj-1 and 1.4 times than obj-2.\nAlso, DFTS with obj-1w and obj-2w have the worst performance among all gaps, of which we will analyze in the section below.\n2. Comparison with truck-only TSP optimal solutions\nIn this result, we want to observe the gap in percentage between TFDS and 4 settings with truckonly TSP optimal solution. The results are demonstrated in Table 5, 6, 7. The gap is calculated by:\ngap = newObjective\u2212 tspObjective\ntspObjective \u00d7 100 (46)\nA larger negative gap means better performance against truck-only TSP solution. The average gaps in each table is the result of 300 tests run. From the tables, we can easily observe that DFTS with obj-1, obj-2 outperformed TFDS (tf) regardless of the customer size. Moreover, TFDS has a stable performance in terms of average gap, best and worst gap among all sets because of its greedy nature and initial solution (always start from an optimal TSP truck-only solution).\nFurthermore, DFTS with time span factor in the profit function showed a poor performance with positive average gaps among 3 sets. It is because in order to minimize the time span while choosing drone routes, it may falls into a case like in Figure 7.\nWhen looking at the best gap and worse gap among 3 sets, we can also notice the improvement in stability of obj-1 and obj-2 with the incremental number of customers. In details, positive gap appears with obj-2 in Set 1 (4.71), obj-1 in Set 2 (0.21), but not in Set 3 where they are quite similar (-10.13 and -10.03) and closer to the best gap (-24.48 and -23.66).\n3. Comparison between two heuristics\nBecause instances and results of Bouman et al. are not available by private contact, we are able to compare our heuristics with the one adapted from Murray and Chu only. We calculate the gap - the percentage that our models can outperform or being outperformed by TFDS heuristic. The gap is calculated by:\ngap = objective\u2212 f stsp\nf stsp \u00d7 100 (47)\nA negative average gap means that the setting of DFTS is better than TFDS heuristic. Additionally, only a wining rate of more than 50% can result in an overall dominance. The results are shown in Table 8, 9, 10. The gaps and winning rates are calculated among 300 tests for each table. As can be seen, among all sets, DFTS with obj-1 and obj-2 shows better performance against TFDS in average gap (from -6.25% to -12.18%) and winning rate (mostly more than 80%). Furthermore,\nobj-2 has a stable gap in every tests (-9.45, -10.53, -0.01) comparing to TFDS. Again, DFTS with time span profit function delivers poorest performance, with winning rate less than 10% in Set 1 and 0% in Set 2,3, strengthening our observation that it is not a good strategy to minimize waiting time when choosing clusters in DFTS.\n4. Comparison between instance options\nIn this section, we report the average gap in section 2 for each of the instance option (depot location) and the best setting in Table 11. This number is obtained by taking the rate among 300 tests for each depot location.\nAs can be seen, all heuristics perform best when the depot is located at the center of the customers. This strengthens our observations and hypotheses when designing pr in profit function in section 1.4, with obj-1 and obj-2 performs best in xy-center instances and a distinctive average gap comparing to other instance options (obj-1: -25.41 vs. -17.08 and -20.44; obj-2: -26.26 vs. -17.92 and -19.31). We demonstrate this scenario in Figure 8 where the drones are sent to the far-most locations, allowing the truck to travel in an \"inner-circle\" of the customer region.\nIt is also logical when the best setting of xy-center is obj-1 (DFTS). It is also the best in x-center\n5. Impacts of truck - drone speed ratios to the heuristics\u2019 performances\nIn this section, we analyze the impact of different speed ratio between truck and drone to the performance of the heuristics and settings. We conduct the test again only on Set 2 (50 customers). Table 12 and 13 reports the result for speed-endurance setting S1, S2 in Table 3. In details, drone is slower than truck but has more endurance in S1, and faster than truck but less endurance in S2.\nWhen drone is slower, TFDS performs badly with the average gap is significantly worse than DFTS with obj-1 and obj-2 (-4.62% vs. -18.78% and -20.04%). Furthermore, the best gap of obj-1 and obj-2 are about two times better than TFDS. On the other hand, when drone is faster, TFDS\u2019s performance is much increased and close to DFTS with obj-1 and obj-2. This phenomena can be explained as follows: with a higher speed, the drone is able to serve more and further customers, therefore allows TFDS to choose more drone nodes for relocation, making it performs better.\nIn addition, this change also affects the results of DFTS with time span in profit function (obj-1w and obj-2w), in details, from 13.99%\u2192 -4.87% with obj-1w; 13.39%\u2192 -4.24% with obj-2w. Also, their best gaps are also close to TFDS. It means higher drone\u2019s speed not only allows DFTS to save more cost, but also minimize the waiting time of both vehicles.\n6. Impacts of truck - drone cost ratios\nTo assess the impact of truck - drone cost ratio to the performance of our heuristics, we conduct 600 more tests on Set 2 with two more ratios - 1:50 and 1:10. The average gap between each ratio is shown in Table 14 where detailed gaps are reported in Table 16, 15. The results are obvious: the higher truck - drone cost ratio, the more cost-efficient we can achieve, regardless of the heuristics. However, this effect is more clearly in DFTS with obj-1 and obj-2. In details, it jumps from -12.59% \u2192 -19.17%\u2192 21.39% and -14.93%\u2192 -21.45%\u2192 -23.66% for obj-1 and obj-2, while this number is slightly changed in TFDS: -9.29%\u2192 -11.54%\u2192 -11.99%.\nTherefore, we can either reduce the cost of the drone or truck in order to lengthen this ratio. For example: a higher durability battery for the drone, and a better fuel efficient truck. Futhermore, hybrid solution is also an option where we can combine between solar energy and battery for the drone [12], or using hybrid electric trucks [6].\nVI. Conclusion\nThis paper introduces a new variant of the Traveling Salesman Problem with Drone (TSP-D) with the objective is to minimize the total transportation cost. We present two heuristic methods - DFTS and TFDS - to solve the problem based on two opposing approaches. In DFTS, we propose a mixed integer programming formulation to solve the clustering step. An experiment is conducted with a variety of parameters, settings and instance options. The numerical analysis shows that DFTS without the time span in profit function performs better than TFDS in term of average results. However, TFDS has a good stability while DFTS is less stable (positive gaps).\nAs nature of a generalized version of a NP-hard problem (TSP), larger instances of this problem cannot be solved by using a MIP solver for clustering, in a reasonable time. It resulted in the tuning of time span parameter to reduce the \u2126 size in MIP model. Hence, local search techniques should be developed. That is the next step in our developments for this problem. Additionally, we want to have more numerical analysis on the relation between different instance options, speed and cost ratio to the performance of heuristics. They will clearly give us closer look into the nature of this problem. It is also obviously clear to extend this problem to a multiple trucks and multiple drones problem. Also an online and dynamic version is also a logical direction.\nAcknowledgement\nThe research of this paper is supported by National Foundation for Science and Technology (NAFOSTED), project ID FWO.102.2013.04\nReferences\n[1] Agatz, N., Bouman, P., Schmidt, M.: Optimization approaches for the traveling salesman problem with drone. Tech. rep. (2015)\n[2] Applegate, D., Bixby, R., Chvatal, V., Cook, W.: Concorde tsp solver (2006)\n[3] Banker, S.: Amazon and drones \u2013 here is why it will work (dec 2013), http://www.forbes. com/sites/stevebanker/2013/12/19/amazon-drones-here-is-why-it-will-work/\n[4] Dawn Russell, John J. Coyle, K.R., Thomchick, E.A.: The real impact of high transportation costs (jan 2014), http://www.supplychainquarterly.com/topics/Logistics/ 20140311-the-real-impact-of-high-transportation-costs/\n[5] Drexl, M.: Synchronization in vehicle routing-a survey of vrps with multiple synchronization constraints. Transportation Science 46(3), 297\u2013316 (2012)\n[6] Golson, J.: Fedex\u2019s new electric trucks get a boost from diesel turbines (sep 2014), http: //www.wired.com/2014/09/fedex-wrightspeed-diesel-ev-trucks/\n[7] Murray, C.C., Chu, A.G.: The flying sidekick traveling salesman problem: Optimization of drone-assisted parcel delivery. Transportation Research Part C: Emerging Technologies 54, 86\u2013109 (2015)\n[8] Nozick, L.K., Turnquist, M.A.: Inventory, transportation, service quality and the location of distribution centers. European Journal of Operational Research 129(2), 362\u2013371 (2001)\n[9] Reinelt, G.: Tsplib\u2014a traveling salesman problem library. ORSA journal on computing 3(4), 376\u2013384 (1991)\n[10] Rizzoli, A.E., Montemanni, R., Lucibello, E., Gambardella, L.M.: Ant colony optimization for real-world vehicle routing problems. Swarm Intelligence 1(2), 135\u2013151 (2007)\n[11] Robinson, A.: Logistics and transportation expenses: Understanding their role in the cost of doing business (feb 2014), http://cerasis.com/2014/02/14/transportation-expenses/\n[12] Venkataramanan, M.: Solar-powered drone breaks record with 81-hour flight (jul 2015), http: //www.wired.co.uk/news/archive/2015-07/31/solar-powered-drone-world-record\n[13] WOHLSEN, M.: The next big thing you missed: Amazon\u2019s delivery drones could work\u2014they just need trucks (oct 2014), http://www.wired.com/2014/06/ the-next-big-thing-you-missed-delivery-drones-launched-from-trucks-are-the-future-of-shipping/"}], "references": [{"title": "Optimization approaches for the traveling salesman problem with drone", "author": ["N. Agatz", "P. Bouman", "M. Schmidt"], "venue": "Tech. rep", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Concorde tsp solver", "author": ["D. Applegate", "R. Bixby", "V. Chvatal", "W. Cook"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2006}, {"title": "Amazon and drones \u2013 here is why it will work (dec 2013), http://www.forbes", "author": ["S. Banker"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "The real impact of high transportation costs (jan", "author": ["Dawn Russell", "K.R. John J. Coyle", "E.A. Thomchick"], "venue": "http://www.supplychainquarterly.com/topics/Logistics/", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Synchronization in vehicle routing-a survey of vrps with multiple synchronization constraints", "author": ["M. Drexl"], "venue": "Transportation Science 46(3),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Fedex\u2019s new electric trucks get a boost from diesel turbines (sep", "author": ["J. Golson"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "The flying sidekick traveling salesman problem: Optimization of drone-assisted parcel delivery", "author": ["C.C. Murray", "A.G. Chu"], "venue": "Transportation Research Part C: Emerging Technologies", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "Inventory, transportation, service quality and the location of distribution centers", "author": ["L.K. Nozick", "M.A. Turnquist"], "venue": "European Journal of Operational Research 129(2),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2001}, {"title": "Tsplib\u2014a traveling salesman problem library", "author": ["G. Reinelt"], "venue": "ORSA journal on computing 3(4),", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1991}, {"title": "Ant colony optimization for real-world vehicle routing problems", "author": ["A.E. Rizzoli", "R. Montemanni", "E. Lucibello", "L.M. Gambardella"], "venue": "Swarm Intelligence", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2007}, {"title": "Logistics and transportation expenses: Understanding their role in the cost of doing business (feb", "author": ["A. Robinson"], "venue": null, "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Solar-powered drone breaks record with 81-hour flight (jul 2015), http: //www.wired.co.uk/news/archive/2015-07/31/solar-powered-drone-world-record", "author": ["M. Venkataramanan"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "The next big thing you missed: Amazon\u2019s delivery drones could work\u2014they just need trucks (oct 2014), http://www.wired.com/2014/06/ the-next-big-thing-you-missed-delivery-drones-launched-from-trucks-are-the-future-of-shipping", "author": ["M. WOHLSEN"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "It gives rise to a new variant of the traveling salesman problem (TSP), of which we call TSP with drone (TSP-D) [1].", "startOffset": 112, "endOffset": 115}, {"referenceID": 9, "context": "Introduction Over the years, companies always look for methods to find the most cost efficient way to distribute goods across the logistic network [10].", "startOffset": 147, "endOffset": 151}, {"referenceID": 12, "context": "On one hand, there are 4 advantages of using a drone for delivery: (1) it can be operated without human as pilot, (2) it can avoid the congestion of traditional road networks by flying over them, (3) it is faster than trucks, and (4) it has much lower transportation cost (per kilometer) [13].", "startOffset": 288, "endOffset": 292}, {"referenceID": 2, "context": "This is the foundation of a novel method named \"last mile delivery with drone\" [3] that transports the drone closer to customer locations by the truck in order to service customers within its flight range and effectively increase its usability and schedule flexibility.", "startOffset": 79, "endOffset": 82}, {"referenceID": 6, "context": "Murray and Chu [7] introduce", "startOffset": 15, "endOffset": 18}, {"referenceID": 0, "context": ", [1] study a slightly different problem - called \"Traveling Salesman Problem with Drone\" (TSP-D), in which the drone has to follow the same road network as the truck.", "startOffset": 2, "endOffset": 5}, {"referenceID": 0, "context": ", [1], the TSP-D is formulated as a MIP formulation and solved by \"Truck First, Drone Second\" (TFDS) heuristic in which drone route construction is based on local search and dynamic programming.", "startOffset": 2, "endOffset": 5}, {"referenceID": 7, "context": "The minimization in truck\u2019s traveling time can improve the service quality [8].", "startOffset": 75, "endOffset": 78}, {"referenceID": 3, "context": "However, in every logistics or delivery operations, transportation cost also plays an important role, helping to reduce the overall business cost [4] [11].", "startOffset": 146, "endOffset": 149}, {"referenceID": 10, "context": "However, in every logistics or delivery operations, transportation cost also plays an important role, helping to reduce the overall business cost [4] [11].", "startOffset": 150, "endOffset": 154}, {"referenceID": 6, "context": "from the work of [7].", "startOffset": 17, "endOffset": 20}, {"referenceID": 4, "context": "These two vehicles must wait for each other at the rendezvous point to fulfil the movement-synchronization characteristic [5].", "startOffset": 122, "endOffset": 125}, {"referenceID": 6, "context": "Alternatively, in \"Truck First, Drone Second\" (TFDS), we build the truck-only tour first, then apply an adapted version of Murray and Chu [7] heuristic to find the set of drone routes by replacing some nodes serve by truck with drone nodes and possibly rearrange some nodes in truck\u2019s tour.", "startOffset": 138, "endOffset": 141}, {"referenceID": 8, "context": "This set, along with the remaining nodes that are not appeared in any selected drone routes, is then used to construct a symmetry TSPLIB file [9] in line 2.", "startOffset": 142, "endOffset": 145}, {"referenceID": 6, "context": "For the instances, we adapt the characteristics of depot locations from the work of [7], the customer locations generations from [1].", "startOffset": 84, "endOffset": 87}, {"referenceID": 0, "context": "For the instances, we adapt the characteristics of depot locations from the work of [7], the customer locations generations from [1].", "startOffset": 129, "endOffset": 132}, {"referenceID": 6, "context": "We design the first set (Set 1) similar to the parameters of Murray and Chu [7].", "startOffset": 76, "endOffset": 79}, {"referenceID": 1, "context": "The TSP is solved (in both heuristics) by the state-of-the-art TSP solver Concorde [2].", "startOffset": 83, "endOffset": 86}, {"referenceID": 6, "context": "This section describes experimental results on all settings of our heuristics and the one proposed by [7].", "startOffset": 102, "endOffset": 105}, {"referenceID": 11, "context": "Futhermore, hybrid solution is also an option where we can combine between solar energy and battery for the drone [12], or using hybrid electric trucks [6].", "startOffset": 114, "endOffset": 118}, {"referenceID": 5, "context": "Futhermore, hybrid solution is also an option where we can combine between solar energy and battery for the drone [12], or using hybrid electric trucks [6].", "startOffset": 152, "endOffset": 155}], "year": 2017, "abstractText": "Once known to be used exclusively in military domain, unmanned aerial vehicles (drones) have stepped up to become a part of new logistic method in commercial sector called \"last-mile delivery\". In this novel approach, small unmanned aerial vehicles (UAV), also known as drones, are deployed alongside with trucks to deliver goods to customers in order to improve the service quality or reduce the transportation cost. It gives rise to a new variant of the traveling salesman problem (TSP), of which we call TSP with drone (TSP-D) [1]. In this article, we consider a variant of TSP-D where the main objective is to minimize the total transportation cost. We also propose two heuristics: \"Drone First, Truck Second\" (DFTS) and \"Truck First, Drone Second\" (TFDS), to effectively solve the problem. The former constructs route for drone first while the latter constructs route for truck first. We solve a TSP to generate route for truck and propose a mixed integer programming (MIP) formulation with different profit functions to build route for drone. Numerical results obtained on many instances with different sizes and characteristics are presented. Recommendations on promising algorithm choices are also provided.", "creator": "LaTeX with hyperref package"}}}