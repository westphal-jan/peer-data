{"id": "1601.00626", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Jan-2016", "title": "Scalable Models for Computing Hierarchies in Information Networks", "abstract": "Fortunately, there are many statistical and computational models that automatically generate hierarchies, but the existing approaches do not take into account links in information networks, which are becoming increasingly common in real-world scenarios. Current approaches also tend to present topics as abstract likely distribution via words, etc., rather than as tangible nodes from the original network. Furthermore, the statistical techniques included in many previous work are not yet capable of processing data on a web scale. In this paper, we introduce the Hierarchical Document Topic Model (HDTM), which uses a distributed vertex programming process to compute a non-parametric Bayesian generative model. Experiments with three medium-sized datasets and the entire Wikipedia dataset show that HDTM can derive precise hierarchies across large information networks.", "histories": [["v1", "Mon, 4 Jan 2016 20:05:19 GMT  (637kb,D)", "http://arxiv.org/abs/1601.00626v1", "Preprint for \"Knowledge and Information Systems\" paper, in press"]], "COMMENTS": "Preprint for \"Knowledge and Information Systems\" paper, in press", "reviews": [], "SUBJECTS": "cs.AI cs.DL cs.LG", "authors": ["baoxu shi", "tim weninger"], "accepted": false, "id": "1601.00626"}, "pdf": {"name": "1601.00626.pdf", "metadata": {"source": "META", "title": "Scalable Models for Computing Hierarchies in Information Networks", "authors": ["Baoxu Shi", "Tim Weninger"], "emails": [], "sections": [{"heading": null, "text": "Scalable Models for Computing Hierarchies in Information Networks\nBaoxu Shi\u2217 and Tim Weninger\u2020 \u2217\u2020Department of Computer Science and Engineering, University of Notre Dame, Notre Dame, Indiana, USA (Dated: January 5, 2016)\nInformation hierarchies are organizational structures that often used to organize and present large and complex information as well as provide a mechanism for effective human navigation. Fortunately, many statistical and computational models exist that automatically generate hierarchies; however, the existing approaches do not consider linkages in information networks that are increasingly common in real-world scenarios. Current approaches also tend to present topics as an abstract probably distribution over words, etc rather than as tangible nodes from the original network. Furthermore, the statistical techniques present in many previous works are not yet capable of processing data at Web-scale. In this paper we present the Hierarchical Document Topic Model (HDTM), which uses a distributed vertex-programming process to calculate a nonparametric Bayesian generative model. Experiments on three medium size data sets and the entire Wikipedia dataset show that HDTM can infer accurate hierarchies even over large information networks.\nI. INTRODUCTION\nAs the number of online resources and Web documents continues to increase, the need for better organizational structures that guide readers towards the information they seek increases. Hierarchies and taxonomies are invaluable tools for this purpose. Taxonomies are widely used in libraries via the Library of Congress System or the Dewey Decimal System, and hierarchies were a fixture of the early World Wide Web; perhaps the most famous example being the Yahoo search engine, which originally was a taxonomic-collection of hyperlinks organized by topic. These systems were developed because their effectiveness at topical organization and their logarithmic depth allowed users to quickly find the relevant documents for which they were searching.\nUnfortunately, taxonomy curation of documents, articles, books, etc. is mostly a manual process, which is only possible when the number of curated documents is relatively small. This process becomes increasingly impractical as the number of documents grows to Web-scale, and has motivated research towards the automatic inference of taxonomies [1\u20136].\nMost document repositories contain linkages between the documents creating a document-graph. These links provide, among other things, proper context to the terms and topics in each document. Document-graphs are especially common in nonfiction and scientific literature, where citations are viewed as inter-document links. Similarly, the World Wide Web (WWW) can be considered to be a single, very large document-graph, where Web pages represent documents and hyperlinks link documents. Web sites on the WWW could also be considered document graphs because a Web site is simply a subgraph of the WWW. Web site subgraphs, in particular, are a collection of documents with a specific and purposeful organizational structure, which are often carefully designed to guide the user from the entry page, i.e., a homepage, to progressively more specific Web pages.\nSimilarly, scientific literature can be categorized into a hierarchy of increasingly specific scientific topics by their citation links, and encyclopedia articles can be categorized into a hierarchy of increasingly specific articles by their cross references. Thus, we assert that most document-graphs, or, more generally, information networks, contain hidden node hierarchies."}, {"heading": "A. Taxonomies versus Hierarchies", "text": "In this paper we draw specific distinctions between a hierarchy and a taxonomy. A taxonomy is defined to be a classification of objects into increasingly finer granularities, where each non-leaf node is a conceptual combination of its children. A biological taxonomy is a canonical example of this definition because a\n\u2217 bshi@nd.edu \u2020 tweninge@nd.edu\nar X\niv :1\n60 1.\n00 62\n6v 1\n[ cs\n.A I]\n4 J\nan 2\n01 6\n2 classified species, say homo sapiens (i.e., humans), can only be placed at a leaf in the taxonomy; the inner nodes, e.g., primate, mammal, animal, do not declare new species, rather they are conceptual agglomerations of species. Furthermore, each species is described by its path through the taxonomy. For example, homo sapiens, can be more generally described as primates, mammals and as animals (among others).\nA hierarchy, on the other hand, is an arrangement of objects where some objects are considered to be above, below or at the same level as others. This necessarily means that objects of a hierarchy live at the internal nodes. For example, a business, government or military chain of command is a hierarchy because the president is a specific object that is above the generals, which are above the captains, and so on. In this case, high-level nodes like president are not agglomerations of captains just as the CEO is not an aggregation of managers or clerks."}, {"heading": "B. Hierarchies of Documents", "text": "In the similar studies, \u201cdocument hierarchies\u201d were not actually hierarchies of documents in the literal sense. For example, Hierarchical LDA (hLDA) [7, 8], TopicBlock [3], and the Tree Structured Stick Breaking (TSSB) model [1] learn a conceptual taxonomy in which the non-leaf topics are a combination of words and does not represent a real document in the corpus; the hierarchical Pachinko allocation model (hPAM) [6] constructs a tree-like conceptual taxonomy like hLDA, but where each topic can have multiple parents.\nIn these related models, only the leaves contained the actual, literal documents. Contrary to our perspective, the internal nodes of existing models contain ephemeral word-topic distributions, rather than actual documents. See Figure 3 for a brief comparison of model outputs. The HDTM model introduced in this paper requires that inner nodes, which in previous work are made of ephemeral distributions, be literal documents. This requirement asserts that some documents are more general than others. Here we explore this assertion through examples and a review of similar assertions made in previous research."}, {"heading": "1. Web sites as Document Hierarchies", "text": "A Web site G can be viewed as a directed graph with Web pages as vertices V and hyperlinks as directed edges E between Web pages vx \u2192 vy \u2013 excluding inter-site hyperlinks. In most cases, designating the Web site entry page as the root r allows for a Web site to be viewed as a rooted directed graph. Web site creators and curators purposefully organize the hyperlinks between documents in a topically meaningful manner. As a result, Web documents further away from the root document typically contain more specific topics than Web documents graphically close to the root document.\nFor example, the Web site at the University of Notre Dame, shown in Figure 1 contains a root Web document (the entry page), and dozens of children Web documents. Even with a very small subset of documents and edges, the corresponding Web graph can be quite complicated and messy. A breadth first traversal of the Web graph starting with the root node is a simple way to distill a document hierarchy from the Web graph. Unfortunately, a fixed breadth-first hierarchy cannot account for many of the intricacies of real world Web graphs.\nFor explanation purposes, let\u2019s assume there are four types of hyperlink edges in a Web site: (1) parentto-child links, (2) upward links, (3) shortcuts, and (4) cross-topic links. Parent-to-child links direct the user from one Web page to a more topically specific Web page; e.g., a hyperlink from engineering. nd.edu to cse.nd.edu is a parent-to-child hyperlink because computer science is topically more specific than engineering. Upward links are hyperlinks that reference a more general document; e.g., there may exist a hyperlink from engineering.nd.edu to /the-arts because the engineering college would like to reference artistic happenings at the university. Shortcut links are hyperlinks that skip from very general Web documents to very specific Web documents as a way of featuring some specific topic; e.g., if a computer science professor wins a prestigious award or grant, the professor\u2019s Web page may be linked to from the news section of the root Web page. Cross topic links are hyperlinks that move across topical subtrees; e.g., the college of science may reference some working relationship with the college of engineering by creating a hyperlink between the two Web pages.\nBecause the goal is to infer the document hierarchy, the HDTM model is, in a sense, trying to find parentto-child links. In the event that there is more than one parent-to-child link to a particular Web page, the goal is to find the best topically-relevant parent for each Web document in the inferred hierarchy (except the root).\nWeb researchers and practitioners have used hyperlink structures to organize Web documents for many years. The PageRank and HITS algorithms are two of the most famous examples of information propagation through links. PageRank, for instance, uses the model of a random Web surfer (i.e. random walker), who randomly follows hyperlinks over the Web; a current measure of a Web page\u2019s authority corresponds to the probability that a random surfer lands upon that Web page \u2013 the PageRank score. In the HDTM model, PageRank\u2019s notion of authority loosely corresponds to topical generality, that is, Web pages with a high random surfer probability are likely to be topically more general than others."}, {"heading": "2. Term propagation in Document Graphs", "text": "The document-graph structure is also used to enrich the document description by adding features to improve retrieval performance. Some of the intuition behind these previous works are helpful in framing the generative model.\nA limitation of the random walker model is that it only looks at the graphical structure of the network. The word distributions found in each document are clearly an important factor to consider when generating document hierarchies. Previous work by Song, et al. [9] and Qin, et al. [10] show that a given Web page can be enriched by propagating information from its children. Their relevance propagation model modifies the language distribution of a Web page to be a mixture of itself and its children according to the formula:\nf \u2032(w; d) = (1 + \u03b1)f(w; d) + (1\u2212 \u03b1) |Child(d)| \u2211 c\u2208Child(d) f(w; c), (1)\nwhere f(w; d) is the frequency of term w in a document d before propagation, f \u2032(w; d) is the frequency of term w in document d after propagation, c is a child page of d in the sitemap T , and \u03b1 is a parameter to control the mixing factor of the children. This propagation algorithm assumes that the sitemap, T , is constructed ahead of time.\nFor the purposes of Web information retrieval language models are often used to normalize and smooth word distributions. For illustration purposes, we apply a Dirichlet prior smoothing function [11] to smooth the term distribution where the f \u2032(w; d) from above is used in place of the usual c(w; d) from the original Dirichlet prior smoothing function yielding:\np\u00b5(w; d) = f \u2032(w; d) + \u00b5p(w|C)\n|d|\u2032 + \u00b5 , (2)\nwhere C is the distribution over all terms in V , \u00b5 is the smoothing parameter, and the length is modified by the propagation algorithm to be |d|\u2032 = (1 + \u03b1)|d|.\nAs a result of the upward propagation p\u00b5 function, the root document (Web site entry page) will contain all of the words from all of the Web pages in the Web site with different non-zero probabilities. The most probable words are those that occur most frequently and most generally across all documents, and are thus propagated the most.\nAs a small, preliminary example, Table I shows the top six most probable words in the top document (via text propagation) and in root topics of hLDA and HDTM of the computer science department\u2019s Web site at the University of Notre Dame[12]. This small example reinforces the intuition that certain Web sites have a hidden hierarchical topical structure.\nIn the previous term propagation work, Web site sitemaps were constructed ahead of time using URL heuristics or manually. The goal of HDTM is to learn the document hierarchy automatically and in conjunction with the topical hierarchy."}, {"heading": "C. Other hierarchies", "text": "Documents from many different collections exist in hidden hierarchies. While technically a Web site, Wikipedia documents and categories form a unique document graph. Wikipedia categories are especially interesting because they provide a type of ontology wherein categories have more specific sub-categories and more general parent-categories. Most Wikipedia articles are are represented by at least one category description; this allows for users to drill down to relevant articles in a very few number of clicks by browsing the category graph.\nA partial example of the Wikipedia category graph is shown in Figure 2. This figure illustrates how a document graph can be construed into a document hierarchy. Specifically, the Wikipedia community has hand-crafted a category hierarchy, represented by colored circles and edges, on top of the article-graph, represented by grey squares and grey edges. Although the category graph is imperfect and incomplete, Wikipedia browsers can get a sense of the granularity, topic and fit simply by viewing the article\u2019s placement in the category hierarchy. With the Wikipedia construction in mind, our goal can be loosely interpreted as automatically inferring the Wikipedia category hierarchy from the Wikipedia article graph; this inference is tried and evaluated in Section IV.\nBibliographical networks may also be hierarchically structured. In a bibliographic network, papers or authors (wherein each author could be a collection of documents) are represented by nodes and each citation is represented by an edge in the graph.\nApart from Web and citation graphs, bioinformatics networks, for example protein networks, can also be hierarchically organized for protein fold prediction [13]. The nodes in such network are proteins and two proteins are connected if they have structural or evolutionary relationships [14]."}, {"heading": "D. Challenges and Contributions", "text": "The goal of this work is to construct node hierarchies from an information network using the node features (e.g., text) and inter-node edges. For these purposes a node which appears above, below or at the same level as another node refers to the conceptual granularity of the nodes. In other words, given an information network with an explicitly identified root, such as a Web site homepage, we aim to learn a node-hierarchy that best captures the conceptual hierarchy of the document-graph. This problem poses three technical challenges:\n1. Document-Topic Inference. In document hierarchies the parent documents consist of topics that are more general than their children. This requires that the parent documents are viewed as a mixture of the topics contained within its children, and children documents should topically fit underneath their selected parent. In this paper we introduce the Hierarchical Document-Topic Model (HDTM) which generates a course-to-fine representation of the text information, wherein high-level documents live near the top of the hierarchy, and low-level, more specific documents live at or near the leaves.\n2. Selecting document placement. Placement of a document within the hierarchy drives the topic mixing during inference. Because links between edges hint at the context of the relationship between documents, the document placement in the inferred hierarchy is constrained by their edges within the original document-graph. In other words, if an edge exists in the final, inferred hierarchy, then it must also exist in original document-graph (not vice versa). Unlike existing models, such as hLDA [7, 8], that select topic paths using the nested Chinese Restaurant Process (nCRP), HDTM performs document placement based on a stochastic process resembling random walks with restart (RWR) over the original document-graph. The use of a stochastic process over the document-graph frees the algorithm from rigid parameters; perhaps most importantly the adoption of the RWR stochastic process instead of nCRP allows documents to live at non-leaf nodes, and frees the algorithm from the depth parameter of hLDA.\n3. Analysis at Web site-scale. In many document-graph collections, the number of edges grows quadratically with the number of nodes. This limits the scalability of many topic diffusion algorithms [15, 16]. An important side-effect of the RWR process is the ability to adapt the HDTM model inference algorithm into a distributed graph processing system that is capable of processing billion-node graphs.\nThe remainder of this paper is organized as follows: After reviewing the related work we introduce the HDTM model and show how inference is performed. Next we show how the inference can be adapted to a large scale graph processing system in order to run on Web-scale data sets. The experiments section describes a myriad of tests that were run on various data sets and the quantitative and qualitative evaluations that were performed. We conclude with a examples of real-world use cases, discuss avenues for future research, and provide a link to HDTM\u2019s source code."}, {"heading": "II. RELATED WORK", "text": "Initial efforts in hierarchical clustering used greedy heuristics such as single-link or complete-link agglomoration rules to infer dendrograms [17], in which the root node is split into a series of branches that terminate\nwith a single document at each leaf. Ho, et al., point out that manually-curated Web hierarchies like the Open Directory Project[18] are typically flatter and contain fewer inner nodes than agglomerative clustering techniques produce [3]. Other hierarchical clustering algorithms include top-down processes which iteratively partition the data [19], incremental methods like CobWeb [20], Classit [21], and other algorithms optimized for hierarchical text clustering.\nThe processes that typically defines most hierarchical clustering algorithms can be made to fit in a probabilistic setting that build bottom-up hierarchies based on Bayesian hypothesis testing [22]. On the other hand, a lot of recent work uses Bayesian generative models to find the most likely explanation of observed text and links. The first of these hierarchical generative models was hierarchical latent Dirichlet allocation (hLDA). In hLDA each document sits at a leaf in a tree of fixed depth L as illustrated in Figure 3(a). Note that all non-leave nodes in Figure 3(a) are conceptual topics containing word distribution instead of a document. Each document is represented by a mixture of multinomials along the path through the taxonomy from the document to the root. Documents are placed at their respective leaf nodes stochasically using the nested Chinese restaurant process (nCRP) along side an LDA-style word sampling process.\nNCRP is a recursive version of the standard Chinese Restaurant Process (CRP), which progresses according to the following analogy: An empty Chinese restaurant has an infinite number of tables, and each table has an infinite number of chairs. When the first customer arrives he sits in the first chair at the first table with probability of 1. The second customer can then chose to sit at an occupied table with probability of ni\u03b3+n\u22121 or sit at a new, unoccupied table with probability of \u03b3\u03b3+n\u22121 , where n is the current customer, ni is the number\n7 of customers currently sitting at table i, and \u03b3 is a parameter that defines the affinity to sit at a previously occupied table.\nThe nested version of the CRP extends the original analogy as follows: At each table in the Chinese restaurant are cards with the name of another Chinese restaurant. When a customer sits at a given table, he reads the card, gets up and goes to that restaurant, where he is reseated according to the CRP. Each customer visits L restaurants until he is finally seated and is able to eat. This process creates a tree with a depth of L and a width determined by the \u03b3 parameter. This process has also been called the Chinese Restaurant Franchise because of this analogy [2].\nAdams, et al. proposed a hierarchical topic model called tree structured stick breaking (TSSB), illustrated in Figure 3(c), wherein documents can live at internal nodes, rather than exclusively at leaf nodes[1]. However, this process involves chaining together conjugate priors which makes inference more complicated, and it also does not make use of link data.\nOther work along this line include hierarchical labeled LDA (hLLDA) by Petinot et al. [23] hLLDA, as well as fixed structure LDA (fsLDA) by Reisinger and Pasca [24] which modify hLDA by fixing the hierarchical structure and learning hierarchical topic distributions. The hierarchical pachinko allocation model(hPAM), shown in Figure 3(b), produces a directed acyclic graph (DAG) of a fixed depth allowing for each internal (non-document) node to be represented a mixture of more abstract, i.e., higher level, topics [6].\nIn network-only data, community discovery is the process of finding self-similar group, or clusters. The SHRINK algorithm creates hierarchical clusters by identifying tightly-knit communities and by finding disparate clusters by looking for hubs and other heuristics [25]. Clauset, et al, discover dendrograms by Monte Carlo sampling [26]; however, dendrograms poorly represent the manually curated hierarchies and taxonomies that we are pursuing.\nStochastic block models (SBM) are an alternative line of network clustering research that partitions nodes into communities in order to generatively infer link probabilities [27]. Several extensions to the original SBM have since been proposed (for a survey see [28]). One downside to block-model processes is that they assign probabilities to every possible edge requiring O(N2) complexity in every sampling iteration. Furthermore, SBM methods typically are not concerned with topical/conceptual properties of the nodes.\nBecause HDTM merges document text and inter-document links into a single model, we assume that the words and their latent topics fit within the link structure of the graph, and that the graph structure explains topical relationships between interlinked documents. Topic Modeling with Network Structure (TMN) is similar in this regard because it regularizes a statistical topic model with a harmonic regularizer based on the graph structure in the data; the result is that topic proportions of linked documents are similar to each other [29]. However, hierarchical information is not discovered nor can be easily inferred from this model.\nTopic-sensitive PageRank combines document topics with the PageRank algorithm, by arguing that the PageRank score of a document ought to be influenced by its topical connection to the referring document [30]. Like TMN model, Topic-senstive PageRank does not construct any type of information network hierarchy.\nOther work on generative models that combine text and links include: a probabilistic model for document connectivity [31], the Link-PLSA-LDA and Pairwise-Link-LDA methods [32], the Latent Topic Model for Hypertext (LTHM) method [33], role discovery in social networks [34], the author-topic-model [35], and others. The above models operate by encoding link probability as a discrete random variable or a Bernoulli trial that is parameterized by the topics of the documents. The relational topic model (RTM) builds links between topics, where observed links are given a very high likelihood [5]. The TopicBlock model combines the non-parametric hLDA and stochastic block models [27] to generate document taxonomies from text and links [3]; however, TopicBlock, like hLDA, does not permit documents to reside at non-leaf nodes of the resulting tree.\nTo apply topic modeling algorithms on web-scale data, several parallel algorithms have been introduced. Newman, et al proposed an exact distributed Gibbs sampling algorithm as well as an approximate distributed Gibbs sampling algorithm that uses local Gibbs sampling and global synchronization [36]. Smyth, et al introduced an asynchronous distributed algorithm that was capable of learning LDA-style topics [37]; and Ahmed, et al recently released Yahoo LDA, which is a scalable approximate inference framework on large-scale streaming data [38]. These parallel approaches use the conventional, procedural programming paradigms, and as a result cannot guarantee statistically sound samples from their Gibbs iterations. Although conventional parallel and distributed algorithms indeed divide the document set into smaller groups, the maximum number of subgroups is subject to the number of processors. In contrast, the vertex-programming paradigm, e.g., Pregel, GraphLab and GraphX [39, 40], can distribute sampling operations at a much finer granularity by treating each graph-node as an independent computing unit.\n8 Although the distributed variants of topic inference have made significant contributions in large scale topic models on the one hand, and large scale graph processing on the other hand, we are unaware of any parallel algorithm capable of joining these two subjects to infer topical hierarchies on large scale information networks.\nIn contrast to the previous work, HDTM builds a hierarchy of documents from text and inter-document links. In this model, each node in the hierarchy contains a single document, and the hierarchy\u2019s width and depth is not fixed. The distributed version of proposed algorithm has the ability to handle graph with millions of nodes and billions of tokens."}, {"heading": "III. HIERARCHICAL DOCUMENT TOPIC MODEL", "text": "The problem of inferring the document hierarchy is a learning problem akin to finding the single, best parent for each document-node. Unlike previous algorithms, which discover latent topic taxonomies, the hierarchical document-topic model (HDTM) finds hidden hierarchies by selecting edges in the document graph. This section presents a detailed description of the model.\nBeginning with a document graph G = {V,E} of documents V and edges E. Each document is a collection of words, where a wordw is an item in a vocabulary. The basic assumption of HDTM and similar models is that each document can be generated by probabilistically mixing words from among topics. Distributions over topics are represented by z, which is a multinomial variable with an associated set of distributions over words p(w|z, \u03b2), where \u03b2 is a Dirichlet hyper-parameter. Document-specific mixing proportions are denoted by the vector \u03b8. Parametric-Bayes topic models also include aK parameter that denotes the number of topics, wherein z is one of K possible values and \u03b8 is a K-D vector. HDTM, and other non-parametric Bayesian models, do not require a K parameter as input. Instead, in HDTM there exist |V | topics, one for each graph node, and each document is a mixture of the topics on the path between itself and the root document.\nIn the original LDA model, a single document mixture distribution is p(w|\u03b8) = \u2211K i=1 \u03b8ip(w|z = i, \u03b2i). The process for generating a document is (1) choose a \u03b8 of topic proportions from a distribution p(\u03b8|\u03b1), where p(\u03b8|\u03b1) is a Dirichlet distribution; (2) sample words from the mixture distribution p(w|\u03b8) for the \u03b8 chosen in step 1.\nHLDA is an extension of LDA in which the topics are situated in a taxonomy T of fixed depth L. The hierarchy is generated by the nested Chinese restaurant process (nCRP) which represents \u03b8 as an L-dimensional vector, defining an L-level path through T from root to document. Because of the nCRP process, every document lives at a leaf and the words in each document are a mixture of the topic-words on the path from it to the root."}, {"heading": "A. Random Walks with Restart", "text": "The nCRP stochastic process could not be used to infer document hierarchies because the nCRP process forces documents to the leaves in the tree. HDTM replaces nCRP with random walk with restart (RWR) (which is also known as Personalized PageRank (PPR)) [41]. In contrast, random walk with teleportation (aka PageRank) random walks by selecting a random starting point, and, with probability (1\u2212 \u03b3), the walker randomly walks to a new, connected location or chooses to jump to a random location with probability \u03b3, where \u03b3 is called the jumping probability[42].\nIn HDTM, the root node is fixed, either as the entry page of a Web site, by some other heuristic or manually. Therefore, for the purposes of hierarchy inference, the random walker is forced to start and restart at the root node.\nSay we wish to find the RWR-probability between some node u and some target node k. We model this by a random walker visiting document u at time t. In the next time step, the walker chooses a document vi from among u\u2019s outgoing neighbors {v|u\u2192T v} in the hierarchy T uniformly at random. In other words, at time t + 1, the walker lands at node vi \u2208 {v|u \u2192T v} with probability 1/deg(u), where deg(u) is the outdegree of some document u \u2208 G. If at any time, there exists an edge to k \u2208 {v|u \u2192G v}, i.e, an edge between the current node u and the target node k in the original graph G, then we record the probability of that new path possibility for later sampling. Alg. 1 describes this process algorithmically. This procedure allows for new paths from the root r k to be probabilistically generated based on the current hierarchy effectively allowing for documents to migrate up, down and through the hierarchy during sampling.\n9 Algorithm 1: Random Walk with Restart input : Path Probs. P , Current Node u, Target k, Weight w globals: Graph G, Hierarchy T, Restart Prob. \u03b3 output : P foreach vi \u2208 T.Ch(u) do /* child of u in T */ if vi 6= k then w \u2190 w + log ( 1\u2212\u03b3\nlen(T.Ch(u))\n) ;\nRWR (P , vi, k, w); /* Recur */ if u\u2192G k then /* Edge u to k exists in G */ P.Put(u,w);"}, {"heading": "B. Generating document paths", "text": "Because a document hierarchy is a tree, each document-node can only have one parent. Selecting a path for a document d in the graph G is akin to selecting a parent u = Pa(d) (and grandparents, etc.) from {d|u\u2192G d} in the document graph G. HDTM creates and samples from a probability distribution over each documents\u2019 parent, where the probability of document u being the parent of d is defined as:\ndepT (d)\u22121\u220f t=0 1\u2212 \u03b3 degT (dt) , (3)\nwhere dt is the walkers current position at time t, depT (d) is the depth of d in T , and degT (dt) is the outdegree of dt in the hierarchy T . In other words, the probability of landing at d is the product of the emission probabilities from each document in the path through T from r to d.\nThis random walker function assigns higher probabilities to parents that are at a shallower depth than those at deeper positions. This is in line with the intuition that flatter hierarchies are easier for human understanding than deep hierarchies [3]. Simply put, the restart probability \u03b3 controls how much resistance there is to placing a document at successive depths.\nAlgorithmically, HDTM infers document hierarchies by drawing paths cd from the r to the document d. Thus, the documents are drawn from the following generative process:\n1. Each document d \u2208 G is assigned a topic \u03b2d \u223c Dir(\u03b7):\n2. For each document d \u2208 G:\n(a) Draw a path cd \u223c RWR(\u03b3) (b) Draw an L-dim topic proportion vector \u03b8 from Dir(\u03b1), where L =len(cd).\n(c) For each word n \u2208 {1, . . . , N}: i. Choose topic zd,n|\u03b8 \u223cMult(\u03b8d).\nii. Choose word wd,n|{zd,n, cd,\u03b2} \u223c Mult(\u03b2cd,zd,n ), where \u03b2cd,zd,n is the topic in the zth position in cd.\nIn this generative process hierarchical nodes represent documents and topics, where internal nodes contain the shared terminology of its descendants.\nThe illustration in Figure 4 shows the two potential outputs from a three-node graph of the Wikipedia articles: Computer Science, Data Mining and Machine Learning. Clearly, data mining and machine learning could both be regarded as children of computer science, but there is indeed a wiki-link from Data Mining to Machine learning in the graph. There are two key ideas conveyed in this illustration.\nThe first is that the hierarchy on the left picks edges so as to ignore the Computer Science to Machine Learning wiki-link (denoted as a thin-grey line), whereas the hierarchy on the right picks edges so as to ignore the Data Mining to Machine Learning wiki-link. Thus, in this toy example, there are two possible hierarchy outcomes presented: the one on the left and the one on the right in Figure 4.\n10\nThe second idea conveyed in this illustration is that the word-topic distributions (in colored circles) are stored along with documents\u2019 words (in black squares) at the same position in the hierarchy. The word distribution within each topic is constrained such that a document may only propagate terms upwards through the currently selected/sampled hierarchical topology. Thus, it is impossible, in the hierarchy on the left, for the topic distribution at Machine Learning to contain a word unique to Computer Science or Data Mining. It is similarly impossible, in the hierarchy on the right, for the topic distribution in Data Mining to contain a word unique to Machine Learning even though this is indeed possible in the hierarchical topology on the left.\nLike in earlier models, there is statistical pressure to have more general terms in topics towards the root of the hierarchy. This is because every path in the hierarchy includes the root node and there are more paths through nodes at higher levels than through nodes at lower levels. Moving down the tree, the topics, and therefore the documents, become more specific.\nHyperparameters also play an important role in the shape and character of the hierarchy. The \u03b1 parameter affects the smoothing on topic distributions, and the \u03b7 parameter affects the smoothing on word distributions. The \u03b3 parameter is perhaps the most important parameter because it affects the depth of the hierarchy. Specifically, if \u03b3 is set to be large (e.g., \u03b3 = 0.95) then resulting hierarchy is shallow. Low values (e.g., \u03b3 = 0.05) may result in deep hierarchies, because there is a smaller probabilistic penalty for each step that the random walker takes.\nC. Inference\nExact inference on this model is intractable, so an approximation technique for posterior inference is used. The Gibbs sampling algorithm is ideal in this situation because it simultaneously allows exploration of topic distributions and potential graphical hierarchies.\nThe variables needed by the Gibbs sampler are: wd,n, the nth word in document d; zd,n, the assignment of the nth word in document d; and cd,z , the topic corresponding to document at the zth level. The \u03b8 and \u03b2\n11\nvariables are integrated out forming a collapsed Gibbs sampler. The sampling is performed in two parts: (1) given the current level allocations of each word zd,n sample the path cd,z , (2) given the current state of the hierarchy, sample zd,n. In other words, we use the topic distributions to inform the path selections that make up the hierarchy, and the hierarchy topology to inform the topic distributions."}, {"heading": "1. Sampling document paths", "text": "The first Gibbs sampling step is to draw a path from each document to the root through the graph. The sampling distribution for a path cd is\np(cd|c\u2212d, z,w, \u03b7, \u03b3) \u221d p(cd,wd|c\u2212d, z,w\u2212d, \u03b3, \u03b7) = p(wd|c, z,w\u2212d, \u03b7)p(cd|c\u2212d),\n(4)\nwhere w is the count of terms in document d, and w\u2212d are the words without document d. This equation is an expression of Bayes\u2019 theorem where the first term represents the probability of data given some choice of path from the root, and the second term represents the probability of selecting some path.\nSpecifically, the second term represents the probability of drawing the path cd,k to document d at depth k from the RWR process. Recall that each node has an emission probability of 1/degT (d), and a restart probability of \u03b3. The probability is defined recursively:\np(cd,k|c\u2212d, cd,1:(k\u22121)) = \u220f k=0 1\u2212 \u03b3 degT (dk)\n(5)\nIn other words, the probability of reaching d is equal to the probability of a random walker with restart probability \u03b3 being at document d at time k.\nThe first term in Eq. 4 is the probability of a given word based on the current path c and topic assignment z:\np(wd|c,w\u2212d, z, \u03b7) = max(zd)\u220f k=1 \u0393( \u2211 w #[c\u2212d,k = cd,k,w\u2212d = w] +W\u03b7)\u220f w \u0393(#[c\u2212d,k = cd,k,w\u2212d = w] + \u03b7)\n\u00d7\u220f w \u0393(#[z = k, ck = cd,k,w = w] + \u03b7)\n\u0393( \u2211 #[z = k, ck = cd,k,w = w] +W\u03b7) ,\n(6)\nwhere #[\u00b7] counts the elements of an array that satisfy the given condition, and max(zd) is the maximum depth of the current hierarchy state. The expression #[c\u2212d,k = cd,k,w\u2212d = w] counts: (ii) w\u2212d = w, i.e., the number of words w that do not appear in d, for each (i) c\u2212d,k = cd,k, i.e., the number of paths to the current document d except those where the path length is k. The expression #[z = k, ck = cd,k,w = w counts: (iii) w = w, i.e., the number of words w such that, (ii) ck = cd,k, i.e., the words appear in document d and are situated at the end of a path of length k, where (i) z = k, i.e., k is one of the topics in z. W is the size of the vocabulary. Eq. 6 is adapted from the standard ratio of normalizing constants for the Dirichlet distribution [8]."}, {"heading": "2. Sampling word levels", "text": "Given the current state of all the variables, the word sampler must first pick an assignment z for word n in document d. The sampling distribution of zd,n is\np(zd,n|c, z,w, \u03b7, \u03b3) \u221d p(wd,n, zd,n|c, z\u2212(d,n),w\u2212(d,n), \u03b7, \u03b3) = p(wd,n|c, z,w\u2212(d,n), \u03b7)p(zd,n|zd,\u2212n, c, \u03b3)\n(7)\nwhere zd,\u2212n = {zd,\u00b7}\\zd,n and w\u2212(d,n) = {w}\\wd,n. The first term is a distribution over word assignments:\np(wd,n|c, z,w\u2212(d,n), \u03b7) \u221d #[z\u2212(d,n) = zd,n, czd,n = cd,zd,n ,w\u2212(d,n) = wd,n] + \u03b7 (8)\n12\nwhich is the \u03b7-smoothed frequency of seeing word wd,n in the topic at level zd,n in the path cd. The second term is the distribution over levels\np(zd,n = k|zd,\u2212n, c, \u03b3) = k\u22121\u220f j=1 1\u2212 \u03b3 degT (dj\u22121) #[zd,\u2212n > j] #[zd,\u2212n \u2265 j] \u00d7 1\u2212 \u03b3\ndegT (dk\u22121)\n#[zd,\u2212n = k] #[zd,\u2212n \u2265 k] ,\n(9)\nwhere #[\u00b7] is the number of elements in the vector which satisfy the given condition. Eq. 9 abuses notation so that the product from j = 1 to k \u2212 1 combines terms representing nodes at the jth level in the path c down to the parent of dk, and the second set of terms represents document dk at level k. The > symbol in Eq. 9 refers to terms representing all ancestors of a particular node, and \u2265 refers to the ancestors of a node including itself."}, {"heading": "D. Distributed HDTM", "text": "A common complaint among data science practitioners is that graphical models, especially, non-parametric Bayesian graphical models, do not perform well at scale. With this in mind, we also implemented the HDTM inference algorithm in the scalable, distributed vertex-programming paradigm.\nThe mechanism behind Gibbs sampling, and other Markov Chain Monte Carlo methods, requires sequential sampling steps, and execution of each step depends on the results of the previous step making Gibbs samplers, and MCMC method in general, difficult to parallelize. Approximate Distributed LDA (AD-LDA) is one attempt to find approximate, distributed solutions to the serial inference problem by dividing documents into P parts where P is the number of processors and initializes the topic distribution z globally. Then, for every Gibbs iteration, each processor samples 1P\nth of the dataset using the zP from last Gibbs sampling iteration. When all processors are finished, a global synchronization is performed and z is updated [36].\nFollowing the distribution lessons from AD-LDA we sought to also implement a scalable, distributed version of HDTM. However, a major difference between the LDA/hLDA and HDTM is that hLDA uses the nCRP stochastic process to assign terms to topics, while HDTM samples paths from a graph of documents using graph-based random walk with restart method. The process of random walks over the network topology combined with the term sampling process described above is a good candidate for the vertex-programming paradigm using frameworks like Pregel [43] or GraphLab [39]."}, {"heading": "1. Vertex Programming", "text": "Although MapReduce is a widely used, general purpose parallel scheme that can easily deal with scalable data, it is not optimized for iterative computational tasks such as statistical inference or logistic regression [44]. This is because MapReduce materializes all intermediate results and to disk in order to tolerate task failures. Mapreduce, therefore, has relatively high I/O costs compared to other designs that keep data in memory across iterations [45].\nApart from MapReduce, another scalable solution is to build a custom distributed system using message passing interface (MPI). Custom approaches are usually closer to optimal because developers can tune the code based on their own needs and minimize the unnecessary overhead. However, the drawbacks are also significant: because MPI is a barebone communication specification developers need to write their own code for job dispatching, load balancing, and dealing with node failure [46].\nAfter evaluating aforementioned approaches, we decided to use an emerging computational paradigm called vertex programming. Vertex programming aims to improve the performance of graph/network computing by automatically distributing in-memory computation and with vertex-centric scheduling. Unlike the MapReduce paradigm, which writes every intermediate result to disk, vertex programming keeps data up-todate, in-memory and reduces I/O overhead by only materializing data to disk through periodic checkpoints. Vertex-centric scheduling views every graph-vertex as an elementary computing unit and uses MPI (or some other message passing system) to transfer data over graph-edges. Typically, vertex-programs are rather easy\n13\nAlgorithm 2: Distributed Random Walk with Restart globals: Vertices V , Hierarchy T , Restart Prob. \u03b3 input : Messages received containing path probabilities m output : Messages sent to adjacent edges for vertex dk \u2208 V do in parallel /* each document in parallel */ if m\u2190 getmsg() then cd,k \u2190 cd,k + sum(m) /* Add path-probs from incoming message m */ foreach child \u2208 T.Ch(dk) do\n/* Send prob message to children of dk */ sendmsg (child, cd,k + log (\n1\u2212\u03b3 len(T.Ch(dk))\n) )\nto implement, can be distributed easily, and are much more computationally efficient than conventional, procedural programming when working with iterative computational tasks [47].\nSeveral vertex programming frameworks, including Spark-GraphX, HAMA, GraphLab, GraphLab Create and GraphLab 2.0 (PowerGraph), were evaluated, and the PowerGraph framework was ultimately chosen. The decision was based, in part, from insurmountable troubles experienced during several months of implementation attempts on Spark\u2019s GraphX framework. Ultimately, we concluded that C++ and MPI based PowerGraph was faster, more scalable and had a much smaller memory footprint than other frameworks."}, {"heading": "2. Distributed Inference Algorithm", "text": "Algorithm 3: Path-Global Update globals: Vertices V , Hierarchy T , Restart Prob. \u03b3 input : Messages received containing path probabilities m output : Messages sent to adjacent edges for vertex dk \u2208 V do in parallel /* each document in parallel */ foreach u \u2208 cd,k do sendmsg (u, [dk.n, dk.z]) /* Send local n, z to node u */ if m\u2190 getmsg() then foreach u \u2208 m do dk.n\u2190 u.n dk.z \u2190 u.z\nThe distributed HDTM inference algorithm is similar to procedural HDTM. We do not detail the entire distributed HDTM inference algorithm in this paper; however, the source code is referenced in the Section V. To fit HDTM to the vertex-programming model, changes in sampling sequence and attention to global synchronization were required. Firstly, random walk with restart must be executed during each Gibbs iteration so that every visited node can have a random walk probability. Next, every node gathers w\u2212d, z, and c separately and decides their new path c according to Eq 4 and shown in Alg 2. After a path is sampled, each node will pick sample assignments z for each word n across all documents/nodes d in parallel according to Eq 7. A global synchronization step is required so that each document/node can update the number of words n and the topic assignments z globally; fortunately, because the topics and words are sampled according to the information provided in the path from root r to the each document dk (document d at level k), it suffices to update the nodes on the path from r to dk instead of an actual global update to all nodes in V . This vertex-programming based path-global update function is shown in Alg 3. Furthermore, this update is executed during the synchronization barrier, which is built-in to most vertex-programming frameworks, is highly optimized, and does not lock the global system any more than the synchronization barrier already does.\n14"}, {"heading": "IV. EXPERIMENTAL RESULTS", "text": "This section describes the method and results for evaluating the HDTM model. A quantitative and qualitative analysis of the hierarchical document-topic model\u2019s ability to learn accurate and interpretable hierarchies of document graphs is shown. The main evaluations explore the empirical likelihood of the data and a very large case study wherein human judges are asked to evaluate the constructed hierarchies."}, {"heading": "A. Data", "text": "HDTM is evaluated on four corpora: the Wikipedia category graph, the Wikipedia document graph, a computer science Web site from the University of Illinois, and a bibliographic network of all CIKM and SIGIR conferences.\nThe Wikipedia data set has been used several times in the past for topic modeling purpose. However, because of the computational resources needed to infer topic models, prior studies have severely constricted the dataset size. Gruber et al., crawled 105 pages starting with the article on the NIPS conference finding 799 links [33]. Ho et al. performed a larger evaluation of their TopicBlock model using 14,675 document with 152,674 links; however, they truncated each article to only the first 100 terms and limited the vocabulary to the 10,000 most popular words [3].\nThe Wikipedia category data set is a crawl of the category graph of Wikipedia, beginning at the category Computing as shown in Figure 2. In Wikipedia each category has a collection of articles and a set of links to other categories; however, categories don\u2019t typically have text associated with them, so the text of each article associated with a particular category is associated to the category\u2019s text. For example, the category Internet includes articles: Internet, Hyperlink, World Wide Web, etc. In total the crawled category graph consisted of 609 categories with text from 6,745 articles. The category graph is rather sparse with only 2,014 edges between categories, but has vocabulary size of 146,624 with 5,570,868 total tokens. We did not perform any text preprocessing procedure, including stop word removal and stemming, in any of the experiments due to empirical findings that these models are robust to the presents of stop words, etc [48]. Such settings can also explore HDTM\u2019s robustness in presence of a large and noisy corpus.\nA computer science department Web site from the University of Illinois Urbana-Champaign was chosen as the second data set because it represents a rooted Web graph with familiar topics. By inferring the document hierarchy, the goal is to find the organizational structure of the computer science department. The intuition is that Web sites reflect the business organization of the underlying entity; thus it is expected that subtrees consisting of courses, faculty, news, research areas, etc. are found at high levels, and specific Web pages are found at lower levels in the hierarchy. Web site was crawled starting at the entry page and captured 1,078 Web pages and 63,052 hyperlinks. In total there were 15,101 unique terms from 771,309 tokens.\nThe bibliographic network consists of documents and titles from 4,713 articles from the SIGIR and CIKM conferences. There exist 3,908 terms across 43,345 tokens in the document collection. In this collection, links include citations between papers within the CIKM and SIGIR conferences. Due to different citation styles, vendor abbreviations, and ambiguous names, without human interference most bibliographical metadata extraction algorithms can only extract a portion of correct data [49\u201351]. Here we choose to use the most complete citation data set available from by the authors of the ArnetMiner project [51], however the citation graph is not guaranteed to be complete. A SIGIR 1998 paper by Ponte and Croft [52] was chosen to be the root document because, in the data set, it had the most in-collection citations.\nTo construct a larger data set with finer granularity, the English Wikipedia article graph is used. In Wikipedia, every Wiki-article has two different link types: 1) category links, which point from the article to its categories, and 2) Wiki-links, which point from the article to other Wiki-articles. The category links\n15\nare important because they hint at some encoded hierarchical structure that was codified on top of Wikipedia after the article-graph was largely developed. For example, the Wiki-article Barack Obama has a category link to Harvard Law School alumni and Wiki-links to Harvard Law School and Dreams from My Father among others. In later experiments we infer a document hierarchy from Wikipedia and compare it to the crowd-encoded Wikipedia category hierarchy. Our Wikipedia snapshot has 4,606,884 documents with 1,878,158,318 tokens, 44,739,242 links, and a vocabulary of 6,064,216 words. Because the document graph is not a single connected component, we picked the largest component in that graph as data set. This giant component contains 1,957,268 documents and 44,673,134 document to document links; 42.49% of nodes and 70% of edges are in this component. Additionally, 1,316,879,537 terms with 4,225,765 unique tokens appear in this component, which is approximately 70% of the total number of terms. As a graph-preprocessing step, we replaced all edges pointing to redirection pages with edges that point directly to the actual Wiki-article."}, {"heading": "B. Summary of the Sampling Algorithm", "text": "Using either the traditional inference model from Sec. III C or the high-throughput distributed sampling algorithm from Sec. III D we basically sample a full hierarchy cd by sampling paths for each node cd except the root and the words in the document zd,n. Given the state of the sampler at some time t, i.e., c (t) 1:D and z(t)1:D, we iteratively sample each variable conditioned on the others as illustrated in III B. The conditional distribution of the latent variables in HDTM model the given document-network. After running the Markov chain a sufficient number of times we approach the stationary distribution; the process of approaching the stationary distribution is called the \u201cburn-in\u201d period. After the burn-in we collect samples at a selected interval, i.e., the sampling lag.\nThe collected \u201csamples\u201d from the Markov chain are full hierarchies constructed from the selection of a path for each node cd and a word for each document zd,n. Therefore each sampled hierarchy contains one estimation about position of each document in the hierarchy and the position of each word in a document. For a given sampled hierarchy, we can assess the goodness of the hierarchy by measuring the log probability of that hierarchy and the observed words conditioned on the hyperparameters:\nL(t) = log p (\nc(t)1:D, z (t) 1:D,w1:D|\u03b3, \u03b7\n) .\nUsing this log likelihood function it is possible to pick the most sampled hierarchy that maximizes the log likelihood as the final result. Later, we will relax this assumption and use a more robust measurement that computes the mode of the sampled hierarchies and determines the certainty of the result."}, {"heading": "C. Quantitative Analysis", "text": "HDTM has some distinct qualities that make apples to apples comparison difficult. Because HDTM is the first model to generate document hierarchies based on graphs, there is nothing to directly compare against. However, some of the models in the related work perform similar tasks, and so comparisons were performed when applicable.\nThe related models typically perform quantitative evaluation by measuring the log likelihood on held out data or by performing some other task like link prediction. Log likelihood analysis looks at the goodness of fit on held out data. Unfortunately, the creation of a \u201chold out\u201d data set is not possible, because each document, especially documents on the first or second level document, is very important to the resulting hierarchy. Removing certain documents might even cause the graph to separate, which would make hierarchy inference impossible. Instead, for the first quantitative evaluation, we compare the highest log likelihood generated from each model\u2019s sampler.\nQuantitative experiments were performed on many of the aforementioned algorithms including: HLDA [7, 8], TopicBlock [3], TSSB [1], and fsLDA [24]. The fixed structure in fsLDA is determined by a breadth first iteration over the document graph because URL heuristics used in the original paper do not exist in most of our data sets. The depth of HLDA and TopicBlock is 4.\nIn all cases, a Gibbs sampler was run for 5,000 iterations; with a burn-in of 2,000 and a sampling lag of 20. Figure 5(a) shows the log likelihood for each sample on the computer science Web site; the other data sets\n16\nshowed similarly-shaped results. Interestingly, Figure 5(b) shows that higher likelihood values are strongly correlated with hierarchies of deeper average depth.\nThe Gibbs sampling algorithm was run on HDTM for various values of \u03b3, and Figure 6 shows the best cumulative log likelihood for each of the tested values of \u03b3. We observe that HDTM with \u03b3 = 0.05 achieved the best likelihood score. Likelihood scores decreased steadily for increasing \u03b3 values, and HDTM with \u03b3 = 0.95 achieved the worst likelihood score.\nTable III shows the results of the different algorithms on the three smaller data sets. The TopicBlock and TSSB clearly infer models with the best likelihood. The remaining algorithms, including HDTM, have mixed results. Although these log likelihood results initially seem as if HDTM performs poorly, we demonstrate in Section IV D that these likelihood results are expected and preferred."}, {"heading": "1. Large-scale Analysis", "text": "Recall that the goal of HDTM is to generate document hierarchies from some original document-graph. Thus, a positive result should somehow demonstrate that HDTM demonstrates hierarchies that are similar to\n17\nthe hierarchy that a human (or many humans) would create given the same document graph. With this in mind we performed a large scale experiment on the full English Wikipedia article graph. Also recall that the Wikipedia category graph establishes a hierarchy that was human-built on top of Wikipedia that maintains a pseudo-hierarchical classification of almost every document. The structure of categories is described to be a tree rooted by Main topic classifications or Fundamental categories; however, we find that 87.01% of categories have an in-degree larger than 1 indicating the actual category is more complex. We find that although the Wikipedia category graph mostly resembles a top-down (coarse to fine) hierarchy, it is technically an undirected loopy graph. As for Wiki-articles, they almost always belong to more than one category because the idea or object described in each article can rightfully have multiple classification perspectives. For example, the Wiki-article Computer Science belongs to a category of the same name, but it also belongs to Computer Engineering and Electrical Engineering among others.\nFor a large scale evaluation our task is to infer a hierarchy from the full Wikipedia article graph and see how well it matches the category graph. Unfortunately, it is difficult to measure similarity between category graph and HDTM-hierarchies using conventional evaluation methods like the log likelihood. Consider, for example, the category University of Notre Dame faculty, which contains Wiki-articles of faculty members from vastly different topical fields. In such cases, the bond is described primarily by the links rather than the content; nevertheless, the log likelihood score judges models based on the goodness of fit of words. Thus it is unreasonable to measure hierarchy quality by likelihood scores alone; indeed, the hierarchy with the best possible likelihood score may be very different from actual, human created hierarchy. In order to perform a more thorough evaluation we should also compare the the graph structure.\nGraph topologies can be compared in many different ways. Among many options we chose DeltaCon [53] to measure the similarity between HDTM\u2019s hierarchy and the Wikipedia category hierarchy three reasons: 1) DeltaCon can calculate the similarity between two graphs with nodes that partially overlap, as observed in the messy Wikipedia category graph, 2) the underlying metric in DeltaCon is the affinity score calculated by fast belief propagation (FABP), which models the connectivity of nodes, and 3) DeltaCon can process millions of nodes in only a few hours. The DeltaCon metric returns a similarity score between the two compared graphs ranging between 0 and 1 inclusive where 0 is completely dissimilar and 1 is completely similar.\nAlthough comparing with hLDA and its variants is important, all existing hierarchical topic models are incapable of processing on data sets at this scale. We attempted to use the hLDA implementation in the Mallet package [54], but 130 hours was needed in order to compute a single Gibbs sampling iteration. Fortunately, we were able to use Graphlab\u2019s implementation of LDA which is based on models developed by Ahmed et al. [38] and Smyth et al. [37]. Although LDA does not directly generate a graph, we are able to compare it with the category hierarchy by connecting the documents within a single LDA-cluster to a made-up root node to simulate a hierarchy. The large scale models were inferred using 400 Gibbs sampling iterations with a burn-in of 100 and a lag of 10.\nIn addition to HDTM and LDA, we also use DeltaCon to compare the original Wikipedia article graph and a randomly generated article-hierarchy as baselines. In the case of Wikipedia article graph, we expect the Wikipedia article graph (the full graph, not a hierarchy) to perform reasonably well because the category hierarchy is largely built on top of the article graph topology and they currently coexist and coevolve. In the case of the randomly generated article hierarchy, we randomly select a single parent for each node in the original article graph.\nTable IV shows that the hierarchy inferred by HDTM is indeed most similar to the Wikipedia category graph, followed by the random article hierarchy. Recall that DeltaCon looks at graph topology similarity, thus the HDTM hierarchy is expected to more topologically similar to another hierarchy (even if random) than the article graph. These results demonstrate that HDTM can identify and preserve critical topological features\n18\nwhen inferring a hierarchy from the graph. As usual, an increase in the number of LDA topics increases the goodness of fit score (in this case measured by DeltaCon instead of likelihood). Interestingly, the \u03b3 parameter and the selection of different roots did not significantly influence DeltaCon score. To understand why this is, recall that different root-nodes and \u03b3 values result in different classification perspectives, but the different perspectives are still subsets of the same category graph with similar topological properties. Hence they should have similar scores using the DeltaCon metric.\nRecall that the HDTM, in its most basic form, generates a hierarchy by picking the best parent for each node/document (except the root). In the iterative Gibbs sampling process it is an almost certainty that a given node will pick different parents during different iterations. For example, say node d has two parents x and y, it is possible that during iterations 1\u20135 node d samples node x as its parent, but then in iterations 6\u201320 node d samples node y to be its parent. Two questions come to mind: 1) which parent should be ultimately picked for node d in the final output graph? and 2) what can the distribution of samples say about the certainty of our inferred graph?\nIn classic Gibbs sampling, maximum a posteriori estimation is determined by the the mode of the samples. For some node d, this translates to choosing the parent that appeared in the most samples as the final parent; in the above case node d would chose node y as its parent because node y was sampled 15 times compared to only 5 samples of node x. To answer the second question, and therefore model the certainty of an inferred hierarchy, we calculate the number of times some node d picks its final parent over the total number of samples normalized by the number of possible choices, i.e., parents, node d has. This results in a certainty score for node d:\ncertaintyd =\nnp n \u2212 1 deg\u2212(d) np n , (10)\nwhere n represents the total number of samples, np is the number of times the final parent p is sampled, and deg\u2212(d) is the indegree of node d representing the total number of parents that node d could pick from. In the certainty score the outside fraction is used to measure the normalized difference between the raw probability and probability of random guess. Applying this function to the above example we would calculate that the certainty score of node d would be ( 1520 \u2212 1 2 )/ 15 20 = .33.\nFigure 7 shows the probability density functions for the certainties in HDTMs parent sampling process. In the figures on both left and right we find that the probability densities appear to be polynomial distributions with interesting plateaus that end just before the 50%, 66%, and 75% certainty scores corresponding to the near-certain (but not perfectly-certain) scores for nodes with indegree values of 2, 3, and 4 respectively. In these results, and others not displayed in this paper, we find that when the root is a general document like Science, then changing \u03b3 does not affect the certainty distribution. Given a relatively specific root like Barack Obama, larger \u03b3 values increase certainty overall.\nAs discussed earlier, measuring topical similarity in hierarchies can be precarious because, in many cases, documents that are correctly situated under a topically unrelated parent may still have a strong contextual association with the parent document that outweighs the topical/language-oriented similarity as determined by the \u03b3 parameter. As an example, consider the Wiki-articles Honest Leadership and Open Government Act and Alexi Giannoulias: even though these two articles are topically dissimilar, HDTM parameterized\n19\nwith a high \u03b3 value is likely to place both articles as children of the hierarchy\u2019s root Barack Obama because the high \u03b3 values weigh the topological link as more important that the documents\u2019 inferred topicality. If, on the other hand, HDTM was parameterized with a very low \u03b3 value, then Alexi Giannoulias is more likely to be situated with other state senators, and the Honest Leadership and Open Government Act is more likely to be situated with other legislation.\nTo quantitatively evaluate the topical and topological fitness of hierarchy together, we compare the similarily among the sets of parents and children in the inferred hierarchy against sets of Wiki-articles and their Wikipedia categories. Because we are comparing sets of items we use the Jaccard coefficient for this task. Specifically, the Jaccard coefficient is calculated by\nJcoefficient = |Cd \u2229 Cpa|\n|Cd|+ |Cpa| \u2212 |Cd \u2229 Cpa| , (11)\nfor each document d that belongs to a set of categoriesCd, and whereCpa is the union of the corresponding categories of the nodes in d\u2019s ancestors cd. The Jaccard coefficient is useful here because it gives an quantitative measure describing how well the inferred hierarchical structure matches with the human-annotated categorical structure of Wikipedia.\nFigure 8 shows the relationship between Jaccard coefficients of the hierarchies. For illustration clarity, in\n20\nthis figure all Jaccard coefficients are binned into 10 equal intervals. We observe a clear correlation between the node\u2019s certainty function and its Jaccard coefficient. This means that decisions that HDTM is most certain about tend to be the most similar to the human-created hierarchies.\nRecall that HDTM uses the \u03b3 parameter to balance the weight of topological links and topical similarities. Hence when specific nodes like Barack Obama are chosen as the root, higher \u03b3 will reduce Jaccard coefficient for high certainty nodes. This is because higher \u03b3 values favor topology rather than content during the path and parent selection process.\nThese results also underscore the importance of the selection of the root node. When provided a root node, which can be any node in the document graph, the inferred hierarchy is created from the perspective of that root. The hierarchy rooted at Barack Obama would therefore organize, say, congressional legislation differently than a hierarchy generated by the Wiki-article on Science. Yet, as we\u2019ve seen, the graph similarity metrics views the drastically different document-topic hierarchies as topologically similar."}, {"heading": "D. Discussion", "text": "In order to properly understand the results captured in Table III from above, recall that log likelihood is a metric on the fit of the observations on the configuration of the model. The original work on LDA [2] found that likelihood increases as the number of topics increases. Along those lines, Chang, et al. demonstrated that more fine grained topics, which appear in models with a larger number of topics have a lower interpretability, despite having higher likelihood scores [55]. Simply put, there exists a negative correlation between likelihood scores and human interpretability in LDA and similar topic models.\nApplying those lessons to our experiments, recall that HDTM has as many topics as there are documents, and non-root document topics are mixtures of the topics on the path to the root. Also recall that HLDA, TopicBlock and TSSB all generate a large number of latent topics. In HLDA and TopicBlock, there are infinitely many topics/tables in the nCRP; and practically speaking, the number of topics in the final model is much larger than the number of documents (conditioned on the \u03b3 parameter). In TSSB, the topic generation is said to be an interleaving of two stick breaking processes; practically, this generates even larger topic hierarchies. The fsLDA algorithm has as many topics as there are in hLDA, however, the fsLDA hierarchy is not redrawn during Gibbs iterations to fit the word distributions resulting in a lower likelihood. Simply put, the number of topics in HDTM and fsLDA = |V | hPAM, hLDA and TopicBlock TSSB.\nSimilarly, Figure 5(b) shows that deeper hierarchies have higher likelihood scores. This is because long document-to-root paths, found in deep hierarchies, are able to provide a more fine grained fit for the words in the document resulting in a higher likelihood.\nTherefore, the better likelihood values of HLDA, TopicBlock and TSSB are due to the larger number of topics that these models infer and not necessarily due to better model outputs. In this case, a better way to evaluate model accuracy is by some external task or by manually judging the coherence of the topics."}, {"heading": "E. Qualitative Analysis", "text": "To measure the coherence of the inferred groupings, the word intrusion task developed by Chang et al [55] is slightly modified to create the document intrusion task. In this task, a human subject is presented with a randomly ordered set of eight document titles. The task for the human judge is to find the intruder, that is, the judge is asked to find which document is out of place or does not belong. If the set of documents without the intruder document all make sense together, then the human judge should easily be able to find the intruder. For example, given a set of computer science documents with titles {systems, networking, databases, graphics, Alan Turing}, most people, even non-computer scientists, would pick Alan Turing as the intruder because the remaining words make sense together \u2013 they are all computer science disciplines.\nFor the set {systems, networking, RAM, Minesweeper, Alan Turing}, identifying a single intruder is more difficult. Human judges, when forced to make a choice, will choose an intruder at random, indicating that the grouping has poor coherence.\nTo construct a set of document titles to present to the human judge, a grouping from the hierarchy is selected at random, and select seven documents are further selected at random from the grouping. If the there are fewer than 7 documents available in the selected grouping, then we select all of the documents available; groupings of size less than 4 are thrown out. In addition to these documents, an intruder document is selected\n21\nat random from among the entire collection of documents minus the documents in the test group. Titles are then shuffled and presented to the human judges."}, {"heading": "1. Comparison Models", "text": "Extracting document groupings for evaluation is slightly different for each model. HDTM and fsLDA store a document at each node in the hierarchy. A grouping is selected by first picking a document at random, and then choosing its siblings. TopicBlock and HLDA store documents at the leaves of the taxonomy, which often include several documents. A grouping is selected from these models by first picking a document at random, and then choosing the other documents in the leaf-topic.\nThe hierarchies that the TSSB model constructed allowed multiple documents to live at inner nodes. Attempts to evaluate groupings on inner nodes with more than 4 documents were unsuccessful. Nodes with 4 or more siblings were also difficult to find because the hierarchies that were generated were too sparse to find practical groupings. Thus human judges with TSSB groupings could not be found.\nEach document-graph collection had different types of labels presented to the judges. The CompSci web site collection was labeled by the Web Page title and URL; the Wikipedia collection was labeled by the category title as shown in Figure 9; the bibliography network was labeled by the title of the paper."}, {"heading": "2. Analyzing human judgments", "text": "The intruder detection tasks described above were offered on Amazon Mechanical Turk. No specialized training is expected of the judges. 50 tasks were created for each data set and model combination; each user was presented with 5 tasks at a time at a cost of $0.07 per task. Each task was evaluated by 15 separate judges. In order to measure the trustworthiness of a judge, 5 easy tasks were selected, i.e., groupings with clear intruders, and gold-standard answers were created. Judges who did not answer 80% of the gold-standard answers correctly are thrown out and not paid. In total the solicitation attracted 31,494 judgments, across 14 models of 50 tasks each. Of these, 13,165 judgments were found to be from trustworthy judges.\nThe model precision is measured based on how well the intruders were detected by the judges. Specifically, if the intruder word wmk is from model m and task k, and i m k,j is the intruder selected by the human judge j on task k in model m then\nMPmk = sumJ1(i m k,j = w m k )/J, (12)\nwhere 1(\u00b7) is the indicator function and J is the number of judges. The model precision is basically the fraction of judges agreeing with the model.\nFigure 10 shows boxplots of the precision for the four models on three corpora. In most cases, HDTM performs the best. As in [55], the likelihood scores do not necessarily correspond to human judgments. Paired, two-tailed t-tests of statistical significants (p < 0.05) performed between HDTM \u03b3 = 0.95 and \u03b3 = 0.05 and the other models are represented by \u2217 and \u25e6 in Figure 10 respectively.\n22\n0\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\n1\nModel Type\nM od\nel P\nre ci\nsi on\nTopicBlockHLDA \u03b3=1 fsLDA \u2217 \u2217 \u00b0 HDTM \u03b3=0.95 HDTM \u03b3=0.05\n(a)CompSci Web site\n0\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\n1\nModel Type\nM od\nel P\nre ci\nsi on\nTopicBlockHLDA \u03b3=1 fsLDA \u2217 \u2217 \u2217 \u00b0 HDTM \u03b3=0.95 HDTM \u03b3=0.05\n(b)Wikipedia\n23\nA Language Modeling Approach to Information Retrieval [the, a, retrieval, information, for, of, language] Combining Multiple Classifiers for Text Categorization\nProbabilistic combination of text classifiers using reliability indicators: models and results Parameterized generation of labeled datasets for text categorization based on a hierarchical directory Using bayesian priors to combine classifiers for adaptive filtering.\nOn-line spam filter fusion. Spam filtering for short messages. Relaxed online SVMs for spam filtering. Robustness of adaptive filtering methods in a cross-benchmark evaluation. Generalizing from relevance feedback using named entity wildcards.\nPredicting the Cost-Quality Trade-Off for Information Retrieval Queries Organizing structured web sources by query schemas: a clustering approach. Information Retrieval as Statistical Translation.\nCross-lingual relevance models. A search engine for historical manuscript images. A method for transferring retrieval scores between collections with non-overlapping vocabularies. Evaluating a Probabilistic Model for Cross-Lingual Information Retrieval. Stemming in the language modeling framework. Translating unknown queries with web corpora for cross-language information retrieval.\nMining translations of OOV terms from the web through cross-lingual query expansion. Probabilistic structured query methods.\nAddressing the lack of direct translation resources for cross-language retrieval. Triangulation without translation.\nAmbiguous queries: test collections need more sense. Bayesian extension to the language model for ad hoc information retrieval. Comparing cross-language query expansion techniques by degrading translation resources.\nMeasuring pseudo relevance feedback & CLIR. Cross-lingual query suggestion using query logs of different languages.\nStatistical cross-language information retrieval using n-best query translations. Study of cross lingual information retrieval using on-line translation systems. Using the web for automated translation extraction in cross-language information retrieval.\nBootstrapping dictionaries for cross-language information retrieval. Detection and translation of OOV terms prior to query time.\nand 16 others\nFIG. 11. Constructed hierarchy of bibliographic network with HDTM \u03b3 = .95. Words at the root document represent the most probable words in the root topic. Most probable words for other documents are not shown due to space constraints.\nThe bibliography network data had relatively low precision scores. This is almost certainly because it was more difficult for the judges, who were probably not computer scientists, to differentiate between the topics in research paper titles. Figure 11 shows a small portion of the document hierarchy for the bibliographic network data set constructed with HDTM \u03b3 = .95. The root document has 20 children in the hierarchy despite having 145 in-collection links. The remaining 120 documents live deeper in the hierarchy because HDTM has determined that they are too specific to warrant a first level position, and have a better fit in one of the subtrees.\nRecall that each document is associated with the topics from itself to the root, where the root is a single, general topic. The seven most probable terms at the root level are also shown adjacent to the root\u2019s title in Figure 11. These terms, like in HLDA and TopicBlock, are terms that are general to the entire collection. Similar sets of words exist at each node in the hierarchy, but are not shown in this illustration to maintain clarity."}, {"heading": "F. Reproducibility", "text": "HDTM source code, analysis code and the scripts which generated the results found in this paper can be downloaded from https://github.com/nddsg/HDTM/releases/tag/kais. The Wikipedia, Web site and bibliographical data are all publicly available and free to download and are replicated in our own data repository.\n24"}, {"heading": "V. CONCLUSIONS", "text": "Hierarchical document-topic model (HDTM), is a Bayesian generative model that creates document and topic hierarchies from rooted document graphs. The initial hypothesis was that document graphs, such as Web sites, Wikipedia and bibliographic networks contain a hidden hierarchy. Unlike most previous work, HDTM allows documents to live at non-leaf nodes in the hierarchy, which requires the random walk with restart path sampling technique. An interesting side-effect of the random walker adaptation is that the path sampling step, Eq. 4, is much faster and easier to scale than the nCRP because RWR only creates a sampling distribution for the parents of a document, whereas the nCRP process creates a sampling distribution over all possible paths in the taxonomy.\nSeveral quantitative experiments comparing HDTM with related models were performed. However, the results show that likelihood scores are a poor indicator of hierarchy interpretability, especially when the number of topics are different between comparison models. A large qualitative case study was also performed which showed that the cohesiveness of the document groupings generated by HDTM were statistically better than many of the comparison models despite the poor likelihood scores."}, {"heading": "ACKNOWLEDGMENTS", "text": "This work is sponsored by an AFOSR grant FA9550-15-1-0003, and a John Templeton Foundation grant FP053369-M.\n[1] R. P. Adams, Z. Ghahramani, and M. I. Jordan, in NIPS (2010) pp. 19\u201327. [2] D. M. Blei, A. Y. Ng, and M. I. Jordan, The Journal of Machine Learning Research 3, 993 (2003). [3] Q. Ho, J. Eisenstein, and E. P. Xing, in WWW (New York, New York, USA, 2012) p. 739. [4] A. Chambers, P. Smyth, and M. Steyvers, in NIPS (2010) pp. 334\u2013342. [5] J. Chang and D. M. Blei, Annals of Applied Statistics 4, 121 (2010). [6] D. Mimno, W. Li, and A. McCallum, in ICML (New York, New York, USA, 2007) pp. 633\u2013640. [7] D. M. Blei, T. L. Griffiths, M. I. Jordan, and J. B. Tenenbaum, in NIPS (2004) pp. 17\u201324. [8] D. M. Blei, T. L. Griffiths, and M. I. Jordan, Journal of the ACM 57, 7 (2010). [9] R. Song, J.-R. Wen, S. Shi, G. Xin, T.-Y. Liu, T. Qin, X. Zheng, J. Zhang, G.-R. Xue, and W.-Y. Ma, in TREC\n(2004). [10] T. Qin, T.-Y. Liu, X.-D. Zhang, Z. Chen, and W.-Y. Ma, in SIGIR (New York, New York, USA, 2005) p. 408. [11] C. Zhai and J. Lafferty, ACM TOIS 22, 179 (2004). [12] http://cse.nd.edu. [13] C. Lin, Y. Zou, J. Qin, X. Liu, Y. Jiang, C. Ke, and Q. Zou, PloS one 8, e56499 (2013). [14] A. G. Murzin, S. E. Brenner, T. Hubbard, and C. Chothia, Journal of molecular biology 247, 536 (1995). [15] R. Nallapati, D. A. McFarland, and C. D. Manning, in AISTATS, Vol. 15 (2011) pp. 543\u2013551. [16] T. Furukawa, Y. Matsuo, I. Ohmukai, K. Uchiyama, and M. Ishizuka, in ICWSM (2008). [17] P. Willett, Information Processing & Management 24, 577 (1988). [18] http://www.dmoz.org. [19] Y. Zhao, G. Karypis, and U. Fayyad, Data Mining and Knowledge Discovery 10, 141 (2005). [20] D. H. Fisher, Machine Learning 2, 139 (1987). [21] J. H. Gennari, P. Langley, and D. Fisher, Artificial Intelligence 40, 11 (1989). [22] K. A. Heller and Z. Ghahramani, in ICML (New York, New York, USA, 2005) pp. 297\u2013304. [23] Y. Petinot, K. McKeown, and K. Thadani, in ACL (2011) pp. 670\u2013675. [24] J. Reisinger and M. Paca, ACL , 620 (2009). [25] J. Huang, H. Sun, J. Han, H. Deng, Y. Sun, and Y. Liu, in CIKM (New York, New York, USA, 2010) p. 219. [26] A. Clauset, C. Moore, and M. E. J. Newman, Nature 453, 98 (2008). [27] P. W. Holland, K. B. Laskey, and S. Leinhardt, Social Networks 5, 109 (1983). [28] A. Goldenberg, A. X. Zheng, S. E. Fienberg, and E. M. Airoldi, Foundations and Trends in Machine Learning\nFoundations and Trends in Machine Learning, 2, 129 (2009). [29] Q. Mei, D. Cai, D. Zhang, and C. Zhai, in WWW (New York, New York, USA, 2008) pp. 101\u2013110. [30] T. H. Haveliwala, in WWW (New York, New York, USA, 2002) pp. 517\u2013526. [31] D. A. Cohn and T. Hofmann, in NIPS (2000) pp. 430\u2013436.\n25\n[32] R. M. Nallapati, A. Ahmed, E. P. Xing, and W. W. Cohen, in SIGKDD (New York, New York, USA, 2008) pp. 542\u2013550. [33] A. Gruber, M. Rosen-Zvi, and Y. Weiss, in UAI (2008) pp. 230\u2013239. [34] A. McCallum, A. Corrada-Emmanuel, and X. Wang, in IJCAI (2005) pp. 786\u2013791. [35] M. Rosen-Zvi, T. L. Griffiths, M. Steyvers, and P. Smyth, in UAI (2004) pp. 487\u2013494. [36] D. Newman, P. Smyth, M. Welling, and A. U. Asuncion, in Advances in neural information processing systems\n(2007) pp. 1081\u20131088. [37] P. Smyth, M. Welling, and A. U. Asuncion, in Advances in Neural Information Processing Systems (2009) pp.\n81\u201388. [38] A. Ahmed, M. Aly, J. Gonzalez, S. Narayanamurthy, and A. J. Smola, in Proceedings of the fifth ACM international\nconference on Web search and data mining (ACM, 2012) pp. 123\u2013132. [39] Y. Low, D. Bickson, J. Gonzalez, C. Guestrin, A. Kyrola, and J. M. Hellerstein, in Proceedings of the VLDB\nEndowment ( VLDB Endowment, 2012). [40] R. S. Xin, J. E. Gonzalez, M. J. Franklin, and I. Stoica, GRADES \u201913: First International Workshop on Graph Data\nManagement Experiences and Systems (2013). [41] B. Bahmani, A. Chowdhury, and A. Goel, PVLDB 4, 173 (2010). [42] Most related works denote the jumping probability as \u03b1, however, this would be ambiguous with the Dirichlet\nhyper-parameter \u03b1. [43] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser, and G. Czajkowski, in Proceedings of the\n2010 ACM SIGMOD International Conference on Management of data (ACM, 2010) pp. 135\u2013146. [44] M. Zaharia, M. Chowdhury, M. J. Franklin, S. Shenker, and I. Stoica, in Proceedings of the 2nd USENIX conference\non Hot topics in cloud computing, Vol. 10 (2010) p. 10. [45] K.-H. Lee, Y.-J. Lee, H. Choi, Y. D. Chung, and B. Moon, SIGMOD Record 40, 11 (2012). [46] Q. Zou, X.-B. Li, W.-R. Jiang, Z.-Y. Lin, G.-L. Li, and K. Chen, Briefings in bioinformatics , bbs088 (2013). [47] R. R. McCune, T. Weninger, and G. Madey, ACM Computing Surveys (2015). [48] A. Mccallum, D. M. Mimno, and H. M. Wallach, in Advances in neural information processing systems (2009) pp.\n1973\u20131981. [49] C. L. Giles, K. D. Bollacker, and S. Lawrence, in Proceedings of the third ACM conference on Digital libraries\n(ACM, 1998) pp. 89\u201398. [50] M. Ley, in String Processing and Information Retrieval (Springer, 2002) pp. 1\u201310. [51] J. Tang, J. Zhang, L. Yao, J. Li, L. Zhang, and Z. Su, in SIGKDD (New York, New York, USA, 2008) p. 990. [52] J. M. Ponte and W. B. Croft, in SIGIR (New York, New York, USA, 1998) pp. 275\u2013281. [53] C. Faloutsos, D. Koutra, and J. T. Vogelstein, SDM , 162 (2013). [54] A. K. McCallum, (2002) (2002). [55] J. Chang, S. Gerrish, C. Wang, J. L. Boyd-graber, and D. M. Blei, in Advances in neural information processing\nsystems (2009) pp. 288\u2013296."}], "references": [{"title": "The Journal of Machine Learning Research 3", "author": ["D.M. Blei", "A.Y. Ng", "M.I. Jordan"], "venue": "993 ", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2003}, {"title": "and E", "author": ["Q. Ho", "J. Eisenstein"], "venue": "P. Xing, in WWW ", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "and M", "author": ["A. Chambers", "P. Smyth"], "venue": "Steyvers, in NIPS ", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2010}, {"title": "Annals of Applied Statistics 4", "author": ["J. Chang", "D.M. Blei"], "venue": "121 ", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2010}, {"title": "and A", "author": ["D. Mimno", "W. Li"], "venue": "McCallum, in ICML ", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2007}, {"title": "and J", "author": ["D.M. Blei", "T.L. Griffiths", "M.I. Jordan"], "venue": "B. Tenenbaum, in NIPS ", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2004}, {"title": "Journal of the ACM 57", "author": ["D.M. Blei", "T.L. Griffiths", "M.I. Jordan"], "venue": "7 ", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2010}, {"title": "J", "author": ["R. Song", "J.-R. Wen", "S. Shi", "G. Xin", "T.-Y. Liu", "T. Qin", "X. Zheng"], "venue": "Zhang, G.-R. Xue, and W.-Y. Ma, in TREC ", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2004}, {"title": "Z", "author": ["T. Qin", "T.-Y. Liu", "X.-D. Zhang"], "venue": "Chen, and W.-Y. Ma, in SIGIR ", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2005}, {"title": "ACM TOIS 22", "author": ["C. Zhai", "J. Lafferty"], "venue": "179 ", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2004}, {"title": "PloS one 8", "author": ["C. Lin", "Y. Zou", "J. Qin", "X. Liu", "Y. Jiang", "C. Ke", "Q. Zou"], "venue": "e56499 ", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2013}, {"title": "Journal of molecular biology 247", "author": ["A.G. Murzin", "S.E. Brenner", "T. Hubbard", "C. Chothia"], "venue": "536 ", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1995}, {"title": "in AISTATS", "author": ["R. Nallapati", "D.A. McFarland", "C.D. Manning"], "venue": "Vol. 15 ", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2011}, {"title": "and M", "author": ["T. Furukawa", "Y. Matsuo", "I. Ohmukai", "K. Uchiyama"], "venue": "Ishizuka, in ICWSM ", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2008}, {"title": "Information Processing & Management 24", "author": ["P. Willett"], "venue": "577 ", "citeRegEx": "17", "shortCiteRegEx": null, "year": 1988}, {"title": "Data Mining and Knowledge Discovery 10", "author": ["Y. Zhao", "G. Karypis", "U. Fayyad"], "venue": "141 ", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2005}, {"title": "Machine Learning 2", "author": ["D.H. Fisher"], "venue": "139 ", "citeRegEx": "20", "shortCiteRegEx": null, "year": 1987}, {"title": "Artificial Intelligence 40", "author": ["J.H. Gennari", "P. Langley", "D. Fisher"], "venue": "11 ", "citeRegEx": "21", "shortCiteRegEx": null, "year": 1989}, {"title": "and K", "author": ["Y. Petinot", "K. McKeown"], "venue": "Thadani, in ACL ", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2011}, {"title": "ACL", "author": ["J. Reisinger", "M. Paca"], "venue": "620 ", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2009}, {"title": "and Y", "author": ["J. Huang", "H. Sun", "J. Han", "H. Deng", "Y. Sun"], "venue": "Liu, in CIKM ", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2010}, {"title": "Nature 453", "author": ["A. Clauset", "C. Moore", "M.E.J. Newman"], "venue": "98 ", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2008}, {"title": "Social Networks 5", "author": ["P.W. Holland", "K.B. Laskey", "S. Leinhardt"], "venue": "109 ", "citeRegEx": "27", "shortCiteRegEx": null, "year": 1983}, {"title": "Foundations and Trends in Machine Learning Foundations and Trends in Machine Learning", "author": ["A. Goldenberg", "A.X. Zheng", "S.E. Fienberg", "E.M. Airoldi"], "venue": "2, 129 ", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2009}, {"title": "and C", "author": ["Q. Mei", "D. Cai", "D. Zhang"], "venue": "Zhai, in WWW ", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2008}, {"title": "and W", "author": ["R.M. Nallapati", "A. Ahmed", "E.P. Xing"], "venue": "W. Cohen, in SIGKDD ", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2008}, {"title": "and Y", "author": ["A. Gruber", "M. Rosen-Zvi"], "venue": "Weiss, in UAI ", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2008}, {"title": "and X", "author": ["A. McCallum", "A. Corrada-Emmanuel"], "venue": "Wang, in IJCAI ", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2005}, {"title": "and P", "author": ["M. Rosen-Zvi", "T.L. Griffiths", "M. Steyvers"], "venue": "Smyth, in UAI ", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2004}, {"title": "and A", "author": ["D. Newman", "P. Smyth", "M. Welling"], "venue": "U. Asuncion, in Advances in neural information processing systems ", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2007}, {"title": "and A", "author": ["P. Smyth", "M. Welling"], "venue": "U. Asuncion, in Advances in Neural Information Processing Systems ", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2009}, {"title": "and A", "author": ["A. Ahmed", "M. Aly", "J. Gonzalez", "S. Narayanamurthy"], "venue": "J. Smola, in Proceedings of the fifth ACM international conference on Web search and data mining ", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2012}, {"title": "and J", "author": ["Y. Low", "D. Bickson", "J. Gonzalez", "C. Guestrin", "A. Kyrola"], "venue": "M. Hellerstein, in Proceedings of the VLDB Endowment ", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2012}, {"title": "and I", "author": ["R.S. Xin", "J.E. Gonzalez", "M.J. Franklin"], "venue": "Stoica, GRADES \u201913: First International Workshop on Graph Data Management Experiences and Systems ", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2013}, {"title": "PVLDB 4", "author": ["B. Bahmani", "A. Chowdhury", "A. Goel"], "venue": "173 ", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2010}, {"title": "and G", "author": ["G. Malewicz", "M.H. Austern", "A.J. Bik", "J.C. Dehnert", "I. Horn", "N. Leiser"], "venue": "Czajkowski, in Proceedings of the 2010 ACM SIGMOD International Conference on Management of data ", "citeRegEx": "43", "shortCiteRegEx": null, "year": 2010}, {"title": "in Proceedings of the 2nd USENIX conference on Hot topics in cloud computing", "author": ["M. Zaharia", "M. Chowdhury", "M.J. Franklin", "S. Shenker", "I. Stoica"], "venue": "Vol. 10 ", "citeRegEx": "44", "shortCiteRegEx": null, "year": 2010}, {"title": "SIGMOD Record 40", "author": ["K.-H. Lee", "Y.-J. Lee", "H. Choi", "Y.D. Chung", "B. Moon"], "venue": "11 ", "citeRegEx": "45", "shortCiteRegEx": null, "year": 2012}, {"title": "Briefings in bioinformatics", "author": ["Q. Zou", "X.-B. Li", "W.-R. Jiang", "Z.-Y. Lin", "G.-L. Li", "K. Chen"], "venue": "bbs088 ", "citeRegEx": "46", "shortCiteRegEx": null, "year": 2013}, {"title": "and G", "author": ["R.R. McCune", "T. Weninger"], "venue": "Madey, ACM Computing Surveys ", "citeRegEx": "47", "shortCiteRegEx": null, "year": 2015}, {"title": "and H", "author": ["A. Mccallum", "D.M. Mimno"], "venue": "M. Wallach, in Advances in neural information processing systems ", "citeRegEx": "48", "shortCiteRegEx": null, "year": 2009}, {"title": "and S", "author": ["C.L. Giles", "K.D. Bollacker"], "venue": "Lawrence, in Proceedings of the third ACM conference on Digital libraries ", "citeRegEx": "49", "shortCiteRegEx": null, "year": 1998}, {"title": "and Z", "author": ["J. Tang", "J. Zhang", "L. Yao", "J. Li", "L. Zhang"], "venue": "Su, in SIGKDD ", "citeRegEx": "51", "shortCiteRegEx": null, "year": 2008}, {"title": "SDM", "author": ["C. Faloutsos", "D. Koutra", "J.T. Vogelstein"], "venue": "162 ", "citeRegEx": "53", "shortCiteRegEx": null, "year": 2013}, {"title": "and D", "author": ["J. Chang", "S. Gerrish", "C. Wang", "J.L. Boyd-graber"], "venue": "M. Blei, in Advances in neural information processing systems ", "citeRegEx": "55", "shortCiteRegEx": null, "year": 2009}], "referenceMentions": [{"referenceID": 0, "context": "This process becomes increasingly impractical as the number of documents grows to Web-scale, and has motivated research towards the automatic inference of taxonomies [1\u20136].", "startOffset": 166, "endOffset": 171}, {"referenceID": 1, "context": "This process becomes increasingly impractical as the number of documents grows to Web-scale, and has motivated research towards the automatic inference of taxonomies [1\u20136].", "startOffset": 166, "endOffset": 171}, {"referenceID": 2, "context": "This process becomes increasingly impractical as the number of documents grows to Web-scale, and has motivated research towards the automatic inference of taxonomies [1\u20136].", "startOffset": 166, "endOffset": 171}, {"referenceID": 3, "context": "This process becomes increasingly impractical as the number of documents grows to Web-scale, and has motivated research towards the automatic inference of taxonomies [1\u20136].", "startOffset": 166, "endOffset": 171}, {"referenceID": 4, "context": "This process becomes increasingly impractical as the number of documents grows to Web-scale, and has motivated research towards the automatic inference of taxonomies [1\u20136].", "startOffset": 166, "endOffset": 171}, {"referenceID": 5, "context": "For example, Hierarchical LDA (hLDA) [7, 8], TopicBlock [3], and the Tree Structured Stick Breaking (TSSB) model [1] learn a conceptual taxonomy in which the non-leaf topics are a combination of words and does not represent a real document in the corpus; the hierarchical Pachinko allocation model (hPAM) [6] constructs a tree-like conceptual taxonomy like hLDA, but where each topic can have multiple parents.", "startOffset": 37, "endOffset": 43}, {"referenceID": 6, "context": "For example, Hierarchical LDA (hLDA) [7, 8], TopicBlock [3], and the Tree Structured Stick Breaking (TSSB) model [1] learn a conceptual taxonomy in which the non-leaf topics are a combination of words and does not represent a real document in the corpus; the hierarchical Pachinko allocation model (hPAM) [6] constructs a tree-like conceptual taxonomy like hLDA, but where each topic can have multiple parents.", "startOffset": 37, "endOffset": 43}, {"referenceID": 1, "context": "For example, Hierarchical LDA (hLDA) [7, 8], TopicBlock [3], and the Tree Structured Stick Breaking (TSSB) model [1] learn a conceptual taxonomy in which the non-leaf topics are a combination of words and does not represent a real document in the corpus; the hierarchical Pachinko allocation model (hPAM) [6] constructs a tree-like conceptual taxonomy like hLDA, but where each topic can have multiple parents.", "startOffset": 56, "endOffset": 59}, {"referenceID": 4, "context": "For example, Hierarchical LDA (hLDA) [7, 8], TopicBlock [3], and the Tree Structured Stick Breaking (TSSB) model [1] learn a conceptual taxonomy in which the non-leaf topics are a combination of words and does not represent a real document in the corpus; the hierarchical Pachinko allocation model (hPAM) [6] constructs a tree-like conceptual taxonomy like hLDA, but where each topic can have multiple parents.", "startOffset": 305, "endOffset": 308}, {"referenceID": 7, "context": "[9] and Qin, et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "[10] show that a given Web page can be enriched by propagating information from its children.", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "For illustration purposes, we apply a Dirichlet prior smoothing function [11] to smooth the term distribution where the f \u2032(w; d) from above is used in place of the usual c(w; d) from the original Dirichlet prior smoothing function yielding:", "startOffset": 73, "endOffset": 77}, {"referenceID": 10, "context": "Apart from Web and citation graphs, bioinformatics networks, for example protein networks, can also be hierarchically organized for protein fold prediction [13].", "startOffset": 156, "endOffset": 160}, {"referenceID": 11, "context": "The nodes in such network are proteins and two proteins are connected if they have structural or evolutionary relationships [14].", "startOffset": 124, "endOffset": 128}, {"referenceID": 5, "context": "Unlike existing models, such as hLDA [7, 8], that select topic paths using the nested Chinese Restaurant Process (nCRP), HDTM performs document placement based on a stochastic process resembling random walks with restart (RWR) over the original document-graph.", "startOffset": 37, "endOffset": 43}, {"referenceID": 6, "context": "Unlike existing models, such as hLDA [7, 8], that select topic paths using the nested Chinese Restaurant Process (nCRP), HDTM performs document placement based on a stochastic process resembling random walks with restart (RWR) over the original document-graph.", "startOffset": 37, "endOffset": 43}, {"referenceID": 12, "context": "This limits the scalability of many topic diffusion algorithms [15, 16].", "startOffset": 63, "endOffset": 71}, {"referenceID": 13, "context": "This limits the scalability of many topic diffusion algorithms [15, 16].", "startOffset": 63, "endOffset": 71}, {"referenceID": 14, "context": "Initial efforts in hierarchical clustering used greedy heuristics such as single-link or complete-link agglomoration rules to infer dendrograms [17], in which the root node is split into a series of branches that terminate", "startOffset": 144, "endOffset": 148}, {"referenceID": 1, "context": ", point out that manually-curated Web hierarchies like the Open Directory Project[18] are typically flatter and contain fewer inner nodes than agglomerative clustering techniques produce [3].", "startOffset": 187, "endOffset": 190}, {"referenceID": 15, "context": "Other hierarchical clustering algorithms include top-down processes which iteratively partition the data [19], incremental methods like CobWeb [20], Classit [21], and other algorithms optimized for hierarchical text clustering.", "startOffset": 105, "endOffset": 109}, {"referenceID": 16, "context": "Other hierarchical clustering algorithms include top-down processes which iteratively partition the data [19], incremental methods like CobWeb [20], Classit [21], and other algorithms optimized for hierarchical text clustering.", "startOffset": 143, "endOffset": 147}, {"referenceID": 17, "context": "Other hierarchical clustering algorithms include top-down processes which iteratively partition the data [19], incremental methods like CobWeb [20], Classit [21], and other algorithms optimized for hierarchical text clustering.", "startOffset": 157, "endOffset": 161}, {"referenceID": 0, "context": "This process has also been called the Chinese Restaurant Franchise because of this analogy [2].", "startOffset": 91, "endOffset": 94}, {"referenceID": 18, "context": "[23] hLLDA, as well as fixed structure LDA (fsLDA) by Reisinger and Pasca [24] which modify hLDA by fixing the hierarchical structure and learning hierarchical topic distributions.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[23] hLLDA, as well as fixed structure LDA (fsLDA) by Reisinger and Pasca [24] which modify hLDA by fixing the hierarchical structure and learning hierarchical topic distributions.", "startOffset": 74, "endOffset": 78}, {"referenceID": 4, "context": ", higher level, topics [6].", "startOffset": 23, "endOffset": 26}, {"referenceID": 20, "context": "The SHRINK algorithm creates hierarchical clusters by identifying tightly-knit communities and by finding disparate clusters by looking for hubs and other heuristics [25].", "startOffset": 166, "endOffset": 170}, {"referenceID": 21, "context": "Clauset, et al, discover dendrograms by Monte Carlo sampling [26]; however, dendrograms poorly represent the manually curated hierarchies and taxonomies that we are pursuing.", "startOffset": 61, "endOffset": 65}, {"referenceID": 22, "context": "Stochastic block models (SBM) are an alternative line of network clustering research that partitions nodes into communities in order to generatively infer link probabilities [27].", "startOffset": 174, "endOffset": 178}, {"referenceID": 23, "context": "Several extensions to the original SBM have since been proposed (for a survey see [28]).", "startOffset": 82, "endOffset": 86}, {"referenceID": 24, "context": "Topic Modeling with Network Structure (TMN) is similar in this regard because it regularizes a statistical topic model with a harmonic regularizer based on the graph structure in the data; the result is that topic proportions of linked documents are similar to each other [29].", "startOffset": 272, "endOffset": 276}, {"referenceID": 25, "context": "Other work on generative models that combine text and links include: a probabilistic model for document connectivity [31], the Link-PLSA-LDA and Pairwise-Link-LDA methods [32], the Latent Topic Model for Hypertext (LTHM) method [33], role discovery in social networks [34], the author-topic-model [35], and others.", "startOffset": 171, "endOffset": 175}, {"referenceID": 26, "context": "Other work on generative models that combine text and links include: a probabilistic model for document connectivity [31], the Link-PLSA-LDA and Pairwise-Link-LDA methods [32], the Latent Topic Model for Hypertext (LTHM) method [33], role discovery in social networks [34], the author-topic-model [35], and others.", "startOffset": 228, "endOffset": 232}, {"referenceID": 27, "context": "Other work on generative models that combine text and links include: a probabilistic model for document connectivity [31], the Link-PLSA-LDA and Pairwise-Link-LDA methods [32], the Latent Topic Model for Hypertext (LTHM) method [33], role discovery in social networks [34], the author-topic-model [35], and others.", "startOffset": 268, "endOffset": 272}, {"referenceID": 28, "context": "Other work on generative models that combine text and links include: a probabilistic model for document connectivity [31], the Link-PLSA-LDA and Pairwise-Link-LDA methods [32], the Latent Topic Model for Hypertext (LTHM) method [33], role discovery in social networks [34], the author-topic-model [35], and others.", "startOffset": 297, "endOffset": 301}, {"referenceID": 3, "context": "The relational topic model (RTM) builds links between topics, where observed links are given a very high likelihood [5].", "startOffset": 116, "endOffset": 119}, {"referenceID": 22, "context": "The TopicBlock model combines the non-parametric hLDA and stochastic block models [27] to generate document taxonomies from text and links [3]; however, TopicBlock, like hLDA, does not permit documents to reside at non-leaf nodes of the resulting tree.", "startOffset": 82, "endOffset": 86}, {"referenceID": 1, "context": "The TopicBlock model combines the non-parametric hLDA and stochastic block models [27] to generate document taxonomies from text and links [3]; however, TopicBlock, like hLDA, does not permit documents to reside at non-leaf nodes of the resulting tree.", "startOffset": 139, "endOffset": 142}, {"referenceID": 29, "context": "Newman, et al proposed an exact distributed Gibbs sampling algorithm as well as an approximate distributed Gibbs sampling algorithm that uses local Gibbs sampling and global synchronization [36].", "startOffset": 190, "endOffset": 194}, {"referenceID": 30, "context": "Smyth, et al introduced an asynchronous distributed algorithm that was capable of learning LDA-style topics [37]; and Ahmed, et al recently released Yahoo LDA, which is a scalable approximate inference framework on large-scale streaming data [38].", "startOffset": 108, "endOffset": 112}, {"referenceID": 31, "context": "Smyth, et al introduced an asynchronous distributed algorithm that was capable of learning LDA-style topics [37]; and Ahmed, et al recently released Yahoo LDA, which is a scalable approximate inference framework on large-scale streaming data [38].", "startOffset": 242, "endOffset": 246}, {"referenceID": 32, "context": ", Pregel, GraphLab and GraphX [39, 40], can distribute sampling operations at a much finer granularity by treating each graph-node as an independent computing unit.", "startOffset": 30, "endOffset": 38}, {"referenceID": 33, "context": ", Pregel, GraphLab and GraphX [39, 40], can distribute sampling operations at a much finer granularity by treating each graph-node as an independent computing unit.", "startOffset": 30, "endOffset": 38}, {"referenceID": 34, "context": "HDTM replaces nCRP with random walk with restart (RWR) (which is also known as Personalized PageRank (PPR)) [41].", "startOffset": 108, "endOffset": 112}, {"referenceID": 1, "context": "This is in line with the intuition that flatter hierarchies are easier for human understanding than deep hierarchies [3].", "startOffset": 117, "endOffset": 120}, {"referenceID": 6, "context": "6 is adapted from the standard ratio of normalizing constants for the Dirichlet distribution [8].", "startOffset": 93, "endOffset": 96}, {"referenceID": 29, "context": "When all processors are finished, a global synchronization is performed and z is updated [36].", "startOffset": 89, "endOffset": 93}, {"referenceID": 35, "context": "The process of random walks over the network topology combined with the term sampling process described above is a good candidate for the vertex-programming paradigm using frameworks like Pregel [43] or GraphLab [39].", "startOffset": 195, "endOffset": 199}, {"referenceID": 32, "context": "The process of random walks over the network topology combined with the term sampling process described above is a good candidate for the vertex-programming paradigm using frameworks like Pregel [43] or GraphLab [39].", "startOffset": 212, "endOffset": 216}, {"referenceID": 36, "context": "Although MapReduce is a widely used, general purpose parallel scheme that can easily deal with scalable data, it is not optimized for iterative computational tasks such as statistical inference or logistic regression [44].", "startOffset": 217, "endOffset": 221}, {"referenceID": 37, "context": "Mapreduce, therefore, has relatively high I/O costs compared to other designs that keep data in memory across iterations [45].", "startOffset": 121, "endOffset": 125}, {"referenceID": 38, "context": "However, the drawbacks are also significant: because MPI is a barebone communication specification developers need to write their own code for job dispatching, load balancing, and dealing with node failure [46].", "startOffset": 206, "endOffset": 210}, {"referenceID": 39, "context": "to implement, can be distributed easily, and are much more computationally efficient than conventional, procedural programming when working with iterative computational tasks [47].", "startOffset": 175, "endOffset": 179}, {"referenceID": 26, "context": ", crawled 105 pages starting with the article on the NIPS conference finding 799 links [33].", "startOffset": 87, "endOffset": 91}, {"referenceID": 1, "context": "performed a larger evaluation of their TopicBlock model using 14,675 document with 152,674 links; however, they truncated each article to only the first 100 terms and limited the vocabulary to the 10,000 most popular words [3].", "startOffset": 223, "endOffset": 226}, {"referenceID": 40, "context": "We did not perform any text preprocessing procedure, including stop word removal and stemming, in any of the experiments due to empirical findings that these models are robust to the presents of stop words, etc [48].", "startOffset": 211, "endOffset": 215}, {"referenceID": 41, "context": "Due to different citation styles, vendor abbreviations, and ambiguous names, without human interference most bibliographical metadata extraction algorithms can only extract a portion of correct data [49\u201351].", "startOffset": 199, "endOffset": 206}, {"referenceID": 42, "context": "Due to different citation styles, vendor abbreviations, and ambiguous names, without human interference most bibliographical metadata extraction algorithms can only extract a portion of correct data [49\u201351].", "startOffset": 199, "endOffset": 206}, {"referenceID": 42, "context": "Here we choose to use the most complete citation data set available from by the authors of the ArnetMiner project [51], however the citation graph is not guaranteed to be complete.", "startOffset": 114, "endOffset": 118}, {"referenceID": 5, "context": "Quantitative experiments were performed on many of the aforementioned algorithms including: HLDA [7, 8], TopicBlock [3], TSSB [1], and fsLDA [24].", "startOffset": 97, "endOffset": 103}, {"referenceID": 6, "context": "Quantitative experiments were performed on many of the aforementioned algorithms including: HLDA [7, 8], TopicBlock [3], TSSB [1], and fsLDA [24].", "startOffset": 97, "endOffset": 103}, {"referenceID": 1, "context": "Quantitative experiments were performed on many of the aforementioned algorithms including: HLDA [7, 8], TopicBlock [3], TSSB [1], and fsLDA [24].", "startOffset": 116, "endOffset": 119}, {"referenceID": 19, "context": "Quantitative experiments were performed on many of the aforementioned algorithms including: HLDA [7, 8], TopicBlock [3], TSSB [1], and fsLDA [24].", "startOffset": 141, "endOffset": 145}, {"referenceID": 43, "context": "Among many options we chose DeltaCon [53] to measure the similarity between HDTM\u2019s hierarchy and the Wikipedia category hierarchy three reasons: 1) DeltaCon can calculate the similarity between two graphs with nodes that partially overlap, as observed in the messy Wikipedia category graph, 2) the underlying metric in DeltaCon is the affinity score calculated by fast belief propagation (FABP), which models the connectivity of nodes, and 3) DeltaCon can process millions of nodes in only a few hours.", "startOffset": 37, "endOffset": 41}, {"referenceID": 31, "context": "[38] and Smyth et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "[37].", "startOffset": 0, "endOffset": 4}, {"referenceID": 0, "context": "The original work on LDA [2] found that likelihood increases as the number of topics increases.", "startOffset": 25, "endOffset": 28}, {"referenceID": 44, "context": "demonstrated that more fine grained topics, which appear in models with a larger number of topics have a lower interpretability, despite having higher likelihood scores [55].", "startOffset": 169, "endOffset": 173}, {"referenceID": 44, "context": "To measure the coherence of the inferred groupings, the word intrusion task developed by Chang et al [55] is slightly modified to create the document intrusion task.", "startOffset": 101, "endOffset": 105}, {"referenceID": 44, "context": "As in [55], the likelihood scores do not necessarily correspond to human judgments.", "startOffset": 6, "endOffset": 10}, {"referenceID": 0, "context": "[2] D.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[3] Q.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "[4] A.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[5] J.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[6] D.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[7] D.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "[8] D.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[9] R.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "[10] T.", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "[11] C.", "startOffset": 0, "endOffset": 4}, {"referenceID": 10, "context": "[13] C.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "[14] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[15] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[16] T.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[17] P.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "[19] Y.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[20] D.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[21] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[23] Y.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[24] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 20, "context": "[25] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[26] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 22, "context": "[27] P.", "startOffset": 0, "endOffset": 4}, {"referenceID": 23, "context": "[28] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "[29] Q.", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "[32] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 26, "context": "[33] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 27, "context": "[34] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 28, "context": "[35] M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 29, "context": "[36] D.", "startOffset": 0, "endOffset": 4}, {"referenceID": 30, "context": "[37] P.", "startOffset": 0, "endOffset": 4}, {"referenceID": 31, "context": "[38] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 32, "context": "[39] Y.", "startOffset": 0, "endOffset": 4}, {"referenceID": 33, "context": "[40] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 34, "context": "[41] B.", "startOffset": 0, "endOffset": 4}, {"referenceID": 35, "context": "[43] G.", "startOffset": 0, "endOffset": 4}, {"referenceID": 36, "context": "[44] M.", "startOffset": 0, "endOffset": 4}, {"referenceID": 37, "context": "[45] K.", "startOffset": 0, "endOffset": 4}, {"referenceID": 38, "context": "[46] Q.", "startOffset": 0, "endOffset": 4}, {"referenceID": 39, "context": "[47] R.", "startOffset": 0, "endOffset": 4}, {"referenceID": 40, "context": "[48] A.", "startOffset": 0, "endOffset": 4}, {"referenceID": 41, "context": "[49] C.", "startOffset": 0, "endOffset": 4}, {"referenceID": 42, "context": "[51] J.", "startOffset": 0, "endOffset": 4}, {"referenceID": 43, "context": "[53] C.", "startOffset": 0, "endOffset": 4}, {"referenceID": 44, "context": "[55] J.", "startOffset": 0, "endOffset": 4}], "year": 2016, "abstractText": "Information hierarchies are organizational structures that often used to organize and present large and complex information as well as provide a mechanism for effective human navigation. Fortunately, many statistical and computational models exist that automatically generate hierarchies; however, the existing approaches do not consider linkages in information networks that are increasingly common in real-world scenarios. Current approaches also tend to present topics as an abstract probably distribution over words, etc rather than as tangible nodes from the original network. Furthermore, the statistical techniques present in many previous works are not yet capable of processing data at Web-scale. In this paper we present the Hierarchical Document Topic Model (HDTM), which uses a distributed vertex-programming process to calculate a nonparametric Bayesian generative model. Experiments on three medium size data sets and the entire Wikipedia dataset show that HDTM can infer accurate hierarchies even over large information networks.", "creator": "LaTeX with hyperref package"}}}