{"id": "1602.02211", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Feb-2016", "title": "Fuzzy Maximum Satisfiability", "abstract": "The MaxSAT problem for a set of formulas {\\ Phi} is the problem of finding an association with the variables in {\\ Phi} that meets the maximum number of formulas. Three possible solutions (encodings) are proposed for the new problem: (1) Disjunctive Linear Relations (DLRs), (2) Mixed Integer Linear Programming (MILP) and (3) Weighted Constraint Satisfaction Problem (WCSP). Like its Boolean counterpart, the extended, fuzzy MaxSAT will have numerous applications in optimization problems that involve vagueness.", "histories": [["v1", "Sat, 6 Feb 2016 03:57:57 GMT  (10kb)", "http://arxiv.org/abs/1602.02211v1", "10 pages"]], "COMMENTS": "10 pages", "reviews": [], "SUBJECTS": "cs.LO cs.AI cs.CC", "authors": ["mohamed el halaby", "areeg abdalla"], "accepted": false, "id": "1602.02211"}, "pdf": {"name": "1602.02211.pdf", "metadata": {"source": "CRF", "title": "Fuzzy Maximum Satisfiability", "authors": ["Mohamed El Halaby", "Areeg Abdalla"], "emails": ["halaby@sci.cu.edu.eg", "areeg@sci.cu.edu.eg"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 2.\n02 21\n1v 1\n[ cs\n.L O\n] 6\nF eb"}, {"heading": "1 Introduction", "text": "Boolean Satisfiability (SAT) stands at the crossroads of logic, graph theory and computer science in general. For this reason, nowadays more problems are being solved faster by SAT solvers than other means. A lot of real-life problems are difficult to solve because they pose computational challenges. In many of these problems, it is not sufficient to find a solution but rather one that is optimal. These are called optimization problems and they arise frequently in the real world. One of the most effective ways to solve optimization problems is to first model them mathematically or logically, then solve them using a suitable algorithm.\nMaximum Satisfiability (MaxSAT) is the optimization version of SAT. In recent years, there has been a growing interest in developing efficient algorithms[18, 19] and implementing them into competent solvers that could solve instances from real-life applications[6, 12, 21, 4, 5]. In fact, an annual competition called The MaxSAT Evaluations is held for the purpose of running recent solvers on categories of benchmarks (random, crafted and industrial instances) then declaring a winner for each categories. Indeed, the performance of MaxSAT solvers is getting better with time and hence it is becoming more feasible to solve practical problems using MaxSAT.\nFuzzy logic is an extension of Boolean logic by Lotfi Zadeh in 1965 based on the theory of fuzzy sets, which is a generalization of the classical set theory. Introducing the notion of degree in the verification of a condition enables a condition to be in a state other than true or false (thus, infinite truth degrees).\nFuzzy logic provides a very valuable flexibility for reasoning, which makes it possible to take into account inaccuracies and vagueness."}, {"heading": "1.1 Boolean Logic and SAT", "text": "A Boolean variable x can take one of two possible values: 1 or 0. A literal l is a variable x or its negation \u00acx. A disjunction C is a group of r literals joined by \u2228. This is expressed as C =\n\u2228r i=1 li A Boolean formula \u03c6 in Conjunctive\nNormal Form (CNF) is a group ofm disjunctions joined by \u2227 (i.e., a conjunction of disjunctions). From now on, we will refer to a disjunction in a CNF formula as a clause. If \u03c6 consists of m clauses where each clause Ci is composed of ri literals, then \u03c6 can be written as\n\u03c6 = m \u2227\ni=1\nCi\nwhere\nCi =\nri \u2228\nj=1\nli,j\nA formula is said to be k-CNF if each clause has exactly k literals. Sometimes we consider a CNF formula as a set of clauses \u03c6 = {C1, . . . , Cm}. A Boolean CNF formula will be referred to as just a formula for short. If \u03c6 is a formula over the n variables x1, . . . , xn, then a complete assignment of \u03c6 is a set A = {x1 = b1, . . . , xn = bn}, where each bi, (1 \u2264 i \u2264 n) is either 1 or 0. A partial assignment is an assignment that leaves out some variables unassigned. An assignment A (complete or partial) satisfies a literal x if x is assigned 1 in A and satisfies a literal \u00acx if x is assigned 0 in A. A clause C is satisfied by A if at least one literal of C is satisfied by A. A formula \u03c6 is satisfied by A if A satisfies all the clauses of \u03c6.\nThe decision version of the SAT problem, given a formula \u03c6, is deciding whether there exists an assignment that satisfies \u03c6. The search version is concerned with finding (searching) for a satisfying assignment for \u03c6. For example, \u03c61 = {(x1 \u2228 \u00acx2), (\u00acx1 \u2228 x3), (\u00acx1 \u2228 x2 \u2228 \u00acx3)} has the satisfying assignment A1 = {x1 = 1, x2 = 0, x3 = 0}. The formula \u03c62 = {(x1 \u2228 x2 \u2228 x3 \u2228 x4 \u2228 \u00acx5), (x1 \u2228 x2 \u2228 x3 \u2228 \u00acx4 \u2228 x5), (x1 \u2228 x2 \u2228 \u00acx3 \u2228 x4 \u2228 x5), (x1 \u2228 \u00acx2 \u2228 x3 \u2228 x4 \u2228 x5), (\u00acx1 \u2228 x2 \u2228 x3 \u2228 x4 \u2228 x5), (x1 \u2228 x2 \u2228 x3 \u2228 x4 \u2228 x5)} has the solution A2 = {x1 = 0, x2 = 1, x3 = 1, x4 = 0, x5 = 0}, which indeed satisfies \u03c62."}, {"heading": "1.2 MaxSAT", "text": "Maximum Satisfiability is a generalization of SAT. The idea behind it is that sometimes not all restrictions of a problem can be satisfied, and we try to satisfy as much of them as possible.\nGiven a CNF formula \u03c6, MaxSAT asks for an assignment that maximizes the number of satisfied clausespipatsrisawat2007clone. For example, \u03c6 = {(y \u2228 z), (\u00acz), (x \u2228 \u00acy), (\u00acx \u2228 z)} has A = {x = 0, y = 0, z = 0} as a solution. The maximum number of satisfied clauses in \u03c6 is three. Table 1.1 shows all the possible assignments for \u03c6 and the number of clauses that each one satisfies.\nThere are two general techniques to solve MaxSAT: (1) branch and bound algorithms, and (2) SAT-based algorithms. Branch and bound algorithms[8]\nwork by searching the binary tree of all partial assignments to the variables of the input formula. The procedure starts with the empty assignment at the root of the tree and traverses it in a depth-first manner to find an optimal complete solution (represented by leaf nodes). Branching occurs on an unassigned variable at some node and the children of this node correspond to assigning the variable 1 or 0. Later works added more effective techniques in order to boost the search. Namely, more efficient data-structures, new branching heuristics, new simplification rules and more accurate lower bounds[20, 1, 22, 23, 15, 13]. In practice, branch and bound Max-SAT solvers are suitable for instances generated at random and some crafted ones.\nSAT-based MaxSAT algorithms[10, 17, 16, 14, 2] are based on iteratively calling a SAT solver. These techniques work by maintaining and refining a lower bound and/or an upper bound to the optimal solution with the help of a SAT-solver. It has been found that these techniques are particularly suitable for benchmarks coming from industrial applications and some crafted ones. One way to do this, given a Max-SAT instance, is to check if there is an assignment that falsifies no clauses. If such an assignment can not be found, the algorithm checks if there is an assignment that falsifies only one clause. This is repeated and each time the algorithm increments the number of clauses that are allowed to be falsified until the SAT solver returns 1 (or true), meaning that the minimum number of falsified clauses has been determined. Comprehensive surveys on SAT-based MaxSAT solving can be found in[18, 3]."}, {"heading": "1.3 Fuzzy Logic", "text": "Let X be a nonempty set, a fuzzy set A in X is characterized by its membership function\n\u00b5A : X \u2192 [0, 1]\nand \u00b5A(x) is interpreted as the degree of membership of element x in fuzzy set A for each x \u2208 X . So, A is determined by\nA = {(x, \u00b5A(x)) | x \u2208 X}\nA fromula is built from a set of variables V , constants from [0, 1] and an n-ary connective F for n \u2208 N. An assignment (also called an interpretation)is a mapping I : V \u2192 [0, 1], where:\n\u2022 For each constant c \u2208 [0, 1], [c]I = c.\n\u2022 [\u00ac\u03c6]I = F\u00ac([\u03c6]I).\n\u2022 [\u03c6 \u25e6\u03c8]I = F\u25e6([\u03c6]I \u25e6 [\u03c8]I), where \u25e6 \u2208 {\u00ac,\u2295,\u2299,\u2227,\u2228} is a binary connective.\nThe following table defines basic operations of Lukasiewicz logic. We will be dealing with five operations, namely negation (\u00ac), the strong and weak disjunction (\u2295 and \u2228 respectively) and the strong and weak conjunction (\u2299 and \u2227 respectively).\nGiven a formula \u03c6 in Lukasiewicz logic and an assignment I, we say that I satisfies \u03c6 iff [\u03c6]I = 1.\nExample 1.1. Let \u03c6 = \u00ac(x1 \u2299 x2 \u2299 \u00acx3). Consider the following two assignments:\n1. I1 with I1(x1) = 0, I1(x2) = 0, I1(x3) = 1.\n[\u03c6]I1 = \u00ac(max{0 + 0\u2212 1, 0} \u2299 \u00ac1) = \u00ac(0 \u2299 0) = \u00ac0 = 1\n2. I2 with I2(x1) = 0.6, I2(x2) = 0.7, I2(x3) = 0.2.\n[\u03c6]I2 = \u00ac(max{.6 + 0.7\u2212 1, 0} \u2299 (\u00ac0.2))\n= \u00ac(max{.3 + 0.8\u2212 1, 0}) = \u00ac0.1 = 0.9\nSo, I1 satisfies \u03c6, but I2 does not.\nThe same principle of satisfiability exists in fuzzy logics (and many-valued logics), denoted SAT\u221e. Like its classical counterpart, it is useful for solving a variety of problems. We say that a formula \u03c6 in Lukasiewicz logic is satisfiable iff there exists an assignment I such that [\u03c6]I = 1.\nExample 1.2. In the previous example, \u03c6 is satisfiable since there exists an assignment (I1) that satisfies it.\nAn assignment I is said to be a model of a set of formulas \u03a6 iff l \u2264 [\u03b1]I \u2264 u for every formula \u03b1 \u2208 \u03a6, given a lower bound l and upper bound u for that formula (usually u = 1, and in classical logic even both l = u = 1).\nSolving satisfiability in fuzzy logics is still growing in theory as well as in application. In addition, to the best of our knowledge, MaxSAT has not been defined over fuzzy logic."}, {"heading": "1.3.1 Discretization", "text": "In practice, it is common to assume a finite number of truth degrees, taken from a set\nTk = {0, 1 k , 2 k , . . . , 1}\nwith k \u2208 N\u2212 {0}.\n\u2022 Let L\u221e denote infinite-valued Lukasiewicz logic and Lk denote the (k+1)valued version in which only interpretations are considered that take truth degrees from Tk.\n\u2022 For every set of formulas \u03a6 in L\u221e, there exists a finite number of truth degrees d, such that \u03a6 is satisfiable in L\u221e iff it is satisfiable in Ld."}, {"heading": "2 Fuzzy MaxSAT", "text": "Definition 2.1. Given a set of formulae \u03a6 in Lukasiewicz logic, the MaxSAT problem asks for an assignment I that maximizes the number of satisfied formulae in \u03a6.\nFrom now on we will call the MaxSAT problem defined over propositional logic \u201cBoolean MaxSAT\u201d and the one defined over Lukasiewicz logic \u201cfuzzy MaxSAT\u201d.\nDefinition 2.2. The fuzzy Partial MaxSAT problem (fuzzy PMaxSAT) for the Lukasiewicz set of formulae \u03c6 = S \u222a H is the problem of finding an assignment that satisfies all the formulae in H and maximizes the number of satisfied formulae in S.\nExample 2.1. Consider solving fuzzy MaxSAT on \u03c6 in example 1. Assignment I1 is a solution since [\u03c6]I1 = 1, which is the largest truth degree possible.\nTheorem 2.1. Boolean MaxSAT is reducible to fuzzy PMaxSAT in polynomial time.\nProof. Let \u03c6 be a instance Boolean MaxSAT instance. We will construct a fuzzy MaxSAT instance \u03c6\u2032 = S \u222a H such that I maximizes the number of satisfied clauses in \u03c6 iff I maximizes the number of clauses in \u03c6\u2032, where I is an assignment.\nWe construct S and H as follows:\n1. For every variable x appearing in H , add the formula \u00ac(x\u2295 x)\u2295 x to \u03c6\u2032. This formula evaluates to 1 iff xk = 0 or xk = 1.\n2. For every clause (l1 \u2228 . . . \u2228 li) in \u03c6, add the formula (l1 \u2295 . . .\u2295 li) to S.\nThus H = {\u00ac(x\u2295 x)\u2295 x | x appears in \u03c6}\nand S = {(l1 \u2295 . . .\u2295 li) | (l1 \u2228 . . . \u2228 li) \u2208 \u03c6}\nIf the number of variables appearing in \u03c6 is n and |\u03c6| = m, then |\u03c6\u2032| = n+m such that |S| = m and |H | = n.\nAssume that there are k satisfied clauses in \u03c6. Then every variable x evaluates to either 0 or 1. Thus, every \u00ac(x \u2295 x) \u2295 x is satisfied and hence all H is satisfied. If a clause (l1\u2228 . . .\u2228 lm) is satisfied, then (l1\u2295 . . .\u2295 lm) is also satisfied. Hence, there are exactly k satisfied formulae in S.\nNow assume that I is a solution that satisfies k clauses in S. Then surely every variable x appearing in \u03c6\u2032 has a value either 0 or 1. This is because I certainly satisfies all formulae in H , which ensure just that. Since the semantics of the strong disjunction when restricted to 0 and 1 is identical to the semantics of Boolean disjunction, then if (l1\u2295. . .\u2295li) \u2208 S is satisfied then so is (l1\u2228. . .\u2228li) \u2208 \u03c6. Therefore, I satisfies exactly k clauses in \u03c6."}, {"heading": "3 Encodings", "text": "Before presenting the encodings, it is important to note that one can generalize Boolean CNF by replacing the Boolean negation with the Lukasiewicz negation and the Boolean disjunction with the strong disjunction. The resulting form is\nm \u2227\ni=1\n\n\nri \u2295\nj=1\nlij\n\n\nand is referred to as simple L-clausal form in[7]. It has been shown[7] that the satisfiability problem for any simple L-clausal form is solvable in linear time, contrary to the SAT problem in Boolean logic which is NP-complete in the general case. In addition, the expressiveness of simple L-clausal forms is limited. That is, not every Lukasiewicz formula has an equivalent simple L-clausal form. To remedy this matter, another form has been proposed called L-clausal form, for which the SAT problem is NP-complete1.\nDefinition 3.1. Let X = {x1, . . . , xn} be a set of variables. A literal is either a variable xi \u2208 X or \u00acxi. A term is a literal or an expression of the form \u00ac(l1 \u2295 . . .\u2295 lk), where l1, . . . , lk are literals. A L-clause is disjunction of terms. A L-clausal form is a conjunction of L-clauses."}, {"heading": "3.1 A Proposed Fuzzy MaxSAT Algorithm for Simple Lclausal forms", "text": "The proposed algorithm takes advantage of the fact that the SAT problem for simple L-clausal forms is solvable in linear time. Moreover, it is based on the basic SAT-based technique of Boolean MaxSAT solving.\nLet \u03c6 = {C1, . . . , Cm} be a MaxSAT instance. The following formula is satisfiable iff there are\n\u03c6k = {C1 \u2228 b1, . . . , Cm \u2228 bm} \u222a CNF (\nm \u2211\ni=1\nbi \u2264 k)\nwhere each bi, (1 \u2264 i \u2264 m) is a new variable and CNF ( \u2211m\ni=1 bi \u2264 k) is the encoding of the constraint \u2211m\ni=1 bi \u2264 k to CNF. This constraint is satisfied if \u03c6k has at most k falsified clauses. There are three ways to start searching for the value of k which corresponds to the optimal solution, denoted kopt:\n1The proof involves reducing Boolean 3SAT to the SAT problem for L-clausal forms.\n1. Start at k = 0 and increase k while \u03c6k is unsatisfiable.\n2. Start at k = m and decrease k while \u03c6k is satisfiable.\n3. Do binary search for kopt: alternate between satisfiable \u03c6k and unsatisfiable \u03c6k until the algorithm converges to kopt.\nAn interesting question is, can we use the same technique for simple Lclausal forms? Remember that for such forms, the satisfiability problem is solvable in linear time, and thus the time complexity of the resulting algorithm will be a huge improvement over that of Boolean MaxSAT."}, {"heading": "3.2 Into DLRs", "text": "A disjunctive linear relation (DLR) is an expression\nP1 \u25e61 Q1 \u2228 . . . \u2228 Pm \u25e6m Qm\nwhere each Pi and Qi is a polynomial of degree one with rational coefficients over the real-valued variables X = {x1, . . . , xn} and each \u25e6i \u2208 {<,\u2264, >,\u2265,=, 6=}, (1 \u2264 i \u2264 m)[9].\nThe satisfiability problem for a set D of DLRs (denoted SATDLR) is determining whether there exists an assignment I : X \u2192 R such that every DLR in D is satisfied. In 1998, Jonsson and Ba\u0308ckstro\u0308m[11] showed that SATDLR is NP-complete.\nLet \u03a6 = {\u03c61, . . . , \u03c6m} be a set of formulae. We replace each \u03c6i by (\u03c6i \u2192 \u00acyi) where yi is a new variable, for i \u2208 {1, . . . ,m}. Each of these formulae ensure that if \u03c6i is satisfied then yi is falsified.\nEach occurrence ofmax{a1, . . . , ak} can be replaced by (s) with the following inequalities: (s \u2265 a1), . . . , (s \u2265 ak), (s = a1 \u2228 . . . \u2228 s = ak). The purpose of rewriting min and max is that they are nonlinear functions and they do not fit the formulation of DLRs. Each occurrence of min{a1, . . . , an} can be replaced and rewritten similarly.\nThe final step is to add a bound on the yi, (1 \u2264 i \u2264 m) variables to capture the semantics of maximizing the number of satisfied formulae. Thus, we first add the bound\n\u2211m i=1 yi \u2264 0 and check the satisfiability of the DLR instance.\nIf it is not satisfiable, then we keep increasing the bound until the instance is satisfiable."}, {"heading": "3.3 Into MILP", "text": "AMixed Integer Linear Program (MILP) involves minimizing \u2211n\nj=1 cjxj subject to\nn \u2211\nj=1\naijxj \u2264 bi, (i = 1, 2, . . . ,m)\nxj \u2265 0, (j = 1, 2, . . . , n)\nwhere some of xj , (1 \u2264 j \u2264 n) are integers and some are real and cj , aij , bi \u2208 R Let \u03a6 be a set of r formulas {\u03c61, . . . , \u03c6m}.\n\u2022 Introduce m new binary variables y1, . . . , ym (one per formula).\n\u2022 Replace each formula \u03c6i by the relaxed formula \u00ac\u03c6i \u2192 yi.\n\u2022 Take the resulting formula of the previous step and replace every occurrence of min and max due to \u00ac,\u2295,\u2299,\u2228 and \u2227 just as shown in the DLR encoding.\nLet f(\u03c6i) be the result of performing the previous three steps on \u03c6i. The MILP instance would be:\nMinimize\nm \u2211\ni=1\nyi subject to f(\u03c61) \u2265 1, . . . , f(\u03c6m) \u2265 1"}, {"heading": "3.4 Into WCSP", "text": "A weighted CSP (WCSP) instance is a triple (X,D,C), whereX = {x1, . . . , xn}, D = {d(x1). . . . , d(xn)} and C = {C1, . . . , Cr} are variables, domains and constraints respectively. Each Ci \u2208 C is a pair (Si, fi), where Si = {xi1 , . . . , xik} is the constraint scope and fi : d(xi1 ) \u00d7 . . . \u00d7 d(xik ) \u2192 N is a cost (weight) function that maps each tuple to its associated weight.\nAn optimal solution to a WCSP instance is a complete assignment to the variables in X in which the sum of the costs of the constraints is minimal. The WCSP Problem for a WCSP instance consists in finding an optimal solution for that instance.\nGiven a set of formulae \u03a6 = {\u03c61, . . . , \u03c6m}, we encode the problem as follows:\n1. Create a variable xi for each formula \u03c6i with domain d(xi) the set of possible assignments to the variables appearing in \u03c6i. When xi takes a value in d(xi) this represents the fact that the variables of \u03c6i have been assigned accordingly.\n2. For each variable xi add a constraint that assigns cost 0 to each domain value satisfying \u03c6i and assigns cost \u221e to the values falsifying \u03c6i.\n3. For each two formulae \u03c6i and \u03c6j sharing variables, we add a constraint that assigns cost \u221e to assignments that assign different values to the shared variables, and cost 0 otherwise."}, {"heading": "4 Future Work", "text": "Recently, it has been found that the satisfiability problem for simple L-clausal forms can be solved in linear time. We will investigate whether or not an algorithm for the new MaxSAT problem for simple L-clausal forms can take advantage of this fact in order for its time complexity to be polynomial.\nAn interesting alternative definition to fuzzy MaxSAT is: Given a formula \u03c6 in Lukasiewicz logic, find an assignment I such that [\u03c6]I is maximum. In other words, the new definition asks for an assignment that maximizes \u03c6\u2019s truth degree."}], "references": [{"title": "A max-sat solver with lazy data structures", "author": ["Teresa Alsinet", "Felip Manya", "Jordi Planes"], "venue": "Advances in Artificial Intelligence\u2013IBERAMIA", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2004}, {"title": "Qmaxsat version", "author": ["Xuanye An", "Miyuki Koshimura", "Hiroshi Fujita", "Ryuzo Hasegawa"], "venue": "Proceedings of the International Workshop on First-Order Theorem Proving,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Sat-based maxsat algorithms", "author": ["Carlos Ans\u00f3tegui", "Maria Luisa Bonet", "Jordi Levy"], "venue": "Artificial Intelligence,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2013}, {"title": "Solving linux upgradeability problems using boolean optimization", "author": ["Josep Argelich", "Daniel Le Berre", "In\u00eas Lynce", "Joao Marques-Silva", "Pascal Rapicault"], "venue": "arXiv preprint arXiv:1007.1021,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2010}, {"title": "Cnf instances from the software package installation problem", "author": ["Josep Argelich", "In\u00eas Lynce"], "venue": "In RCRA Workshop,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Curriculum-based course timetabling with sat and maxsat", "author": ["Roberto A\u015b\u0131n Ach\u00e1", "Robert Nieuwenhuis"], "venue": "Annals of Operations Research,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Finding hard instances of satisfiability in lukasiewicz logics", "author": ["Miquel Bofill", "Felip Manya", "Amanda Vidal", "Mateu Villaret"], "venue": "InMultiple-Valued Logic (ISMVL),", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "A two-phase exact algorithm for maxsat and weighted max-sat problems", "author": ["Brian Borchers", "Judith Furman"], "venue": "Journal of Combinatorial Optimization,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1998}, {"title": "Handbook of temporal reasoning in artificial intelligence, volume", "author": ["Michael David Fisher", "Dov M Gabbay", "Lluis Vila"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2005}, {"title": "On solving the partial max-sat problem", "author": ["Zhaohui Fu", "Sharad Malik"], "venue": "Theory and Applications of Satisfiability Testing-SAT", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2006}, {"title": "A unifying approach to temporal constraint reasoning", "author": ["Peter Jonsson", "Christer B\u00e4ckstr\u00f6m"], "venue": "Artificial Intelligence,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1998}, {"title": "Cause clue clauses: error localization using maximum satisfiability", "author": ["Manu Jose", "Rupak Majumdar"], "venue": "ACM SIGPLAN Notices,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2011}, {"title": "A logical approach to efficient max-sat solving", "author": ["Javier Larrosa", "Federico Heras", "Simon de Givry"], "venue": "Artificial Intelligence,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2008}, {"title": "The sat4j library, release 2.2 system description", "author": ["Daniel Le Berre", "Anne Parrain"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2010}, {"title": "New inference rules for maxsat", "author": ["Chu Min Li", "Felip Many\u00e0", "Jordi Planes"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2007}, {"title": "Towards more effective unsatisfiabilityimum satisfiability algorithms", "author": ["Joao Marques-Silva", "Vasco Manquinho"], "venue": "In Theory and Applications of Satisfiability Testing\u2013SAT", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2008}, {"title": "On using unsatisfiability for solving maximum satisfiability", "author": ["Joao Marques-Silva", "Jordi Planes"], "venue": "arXiv preprint arXiv:0712.1097,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2007}, {"title": "Iterative and core-guided maxsat solving: A survey and assessment", "author": ["Antonio Morgado", "Federico Heras", "Mark Liffiton", "Jordi Planes", "Joao Marques-Silva"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2013}, {"title": "Maximum satisfiability using coreguided maxsat resolution", "author": ["Nina Narodytska", "Fahiem Bacchus"], "venue": "In AAAI,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2014}, {"title": "New upper bounds for MaxSat", "author": ["Rolf Niedermeier", "Peter Rossmanith"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1999}, {"title": "Improved design debugging using maximum satisfiability", "author": ["Sean Safarpour", "Hratch Mangassarian", "Andreas Veneris", "Mark H Liffiton", "Karem Sakallah"], "venue": "In Formal Methods in Computer Aided Design, 2007", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2007}, {"title": "Improving exact algorithms for max-2-sat", "author": ["Haiou Shen", "Hantao Zhang"], "venue": "Annals of Mathematics and Artificial Intelligence,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2005}, {"title": "Maxsolver: An efficient exact algorithm for (weighted) maximum satisfiability", "author": ["Zhao Xing", "Weixiong Zhang"], "venue": "Artificial Intelligence,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2005}], "referenceMentions": [{"referenceID": 17, "context": "In recent years, there has been a growing interest in developing efficient algorithms[18, 19] and implementing them into competent solvers that could solve instances from real-life applications[6, 12, 21, 4, 5].", "startOffset": 85, "endOffset": 93}, {"referenceID": 18, "context": "In recent years, there has been a growing interest in developing efficient algorithms[18, 19] and implementing them into competent solvers that could solve instances from real-life applications[6, 12, 21, 4, 5].", "startOffset": 85, "endOffset": 93}, {"referenceID": 5, "context": "In recent years, there has been a growing interest in developing efficient algorithms[18, 19] and implementing them into competent solvers that could solve instances from real-life applications[6, 12, 21, 4, 5].", "startOffset": 193, "endOffset": 210}, {"referenceID": 11, "context": "In recent years, there has been a growing interest in developing efficient algorithms[18, 19] and implementing them into competent solvers that could solve instances from real-life applications[6, 12, 21, 4, 5].", "startOffset": 193, "endOffset": 210}, {"referenceID": 20, "context": "In recent years, there has been a growing interest in developing efficient algorithms[18, 19] and implementing them into competent solvers that could solve instances from real-life applications[6, 12, 21, 4, 5].", "startOffset": 193, "endOffset": 210}, {"referenceID": 3, "context": "In recent years, there has been a growing interest in developing efficient algorithms[18, 19] and implementing them into competent solvers that could solve instances from real-life applications[6, 12, 21, 4, 5].", "startOffset": 193, "endOffset": 210}, {"referenceID": 4, "context": "In recent years, there has been a growing interest in developing efficient algorithms[18, 19] and implementing them into competent solvers that could solve instances from real-life applications[6, 12, 21, 4, 5].", "startOffset": 193, "endOffset": 210}, {"referenceID": 7, "context": "Branch and bound algorithms[8]", "startOffset": 27, "endOffset": 30}, {"referenceID": 19, "context": "Namely, more efficient data-structures, new branching heuristics, new simplification rules and more accurate lower bounds[20, 1, 22, 23, 15, 13].", "startOffset": 121, "endOffset": 144}, {"referenceID": 0, "context": "Namely, more efficient data-structures, new branching heuristics, new simplification rules and more accurate lower bounds[20, 1, 22, 23, 15, 13].", "startOffset": 121, "endOffset": 144}, {"referenceID": 21, "context": "Namely, more efficient data-structures, new branching heuristics, new simplification rules and more accurate lower bounds[20, 1, 22, 23, 15, 13].", "startOffset": 121, "endOffset": 144}, {"referenceID": 22, "context": "Namely, more efficient data-structures, new branching heuristics, new simplification rules and more accurate lower bounds[20, 1, 22, 23, 15, 13].", "startOffset": 121, "endOffset": 144}, {"referenceID": 14, "context": "Namely, more efficient data-structures, new branching heuristics, new simplification rules and more accurate lower bounds[20, 1, 22, 23, 15, 13].", "startOffset": 121, "endOffset": 144}, {"referenceID": 12, "context": "Namely, more efficient data-structures, new branching heuristics, new simplification rules and more accurate lower bounds[20, 1, 22, 23, 15, 13].", "startOffset": 121, "endOffset": 144}, {"referenceID": 9, "context": "SAT-based MaxSAT algorithms[10, 17, 16, 14, 2] are based on iteratively calling a SAT solver.", "startOffset": 27, "endOffset": 46}, {"referenceID": 16, "context": "SAT-based MaxSAT algorithms[10, 17, 16, 14, 2] are based on iteratively calling a SAT solver.", "startOffset": 27, "endOffset": 46}, {"referenceID": 15, "context": "SAT-based MaxSAT algorithms[10, 17, 16, 14, 2] are based on iteratively calling a SAT solver.", "startOffset": 27, "endOffset": 46}, {"referenceID": 13, "context": "SAT-based MaxSAT algorithms[10, 17, 16, 14, 2] are based on iteratively calling a SAT solver.", "startOffset": 27, "endOffset": 46}, {"referenceID": 1, "context": "SAT-based MaxSAT algorithms[10, 17, 16, 14, 2] are based on iteratively calling a SAT solver.", "startOffset": 27, "endOffset": 46}, {"referenceID": 17, "context": "Comprehensive surveys on SAT-based MaxSAT solving can be found in[18, 3].", "startOffset": 65, "endOffset": 72}, {"referenceID": 2, "context": "Comprehensive surveys on SAT-based MaxSAT solving can be found in[18, 3].", "startOffset": 65, "endOffset": 72}, {"referenceID": 0, "context": "3 Fuzzy Logic Let X be a nonempty set, a fuzzy set A in X is characterized by its membership function \u03bcA : X \u2192 [0, 1] and \u03bcA(x) is interpreted as the degree of membership of element x in fuzzy set A for each x \u2208 X .", "startOffset": 111, "endOffset": 117}, {"referenceID": 0, "context": "A = {(x, \u03bcA(x)) | x \u2208 X} A fromula is built from a set of variables V , constants from [0, 1] and an n-ary connective F for n \u2208 N.", "startOffset": 87, "endOffset": 93}, {"referenceID": 0, "context": "An assignment (also called an interpretation)is a mapping I : V \u2192 [0, 1], where: \u2022 For each constant c \u2208 [0, 1], [c]I = c.", "startOffset": 66, "endOffset": 72}, {"referenceID": 0, "context": "An assignment (also called an interpretation)is a mapping I : V \u2192 [0, 1], where: \u2022 For each constant c \u2208 [0, 1], [c]I = c.", "startOffset": 105, "endOffset": 111}, {"referenceID": 6, "context": "and is referred to as simple L-clausal form in[7].", "startOffset": 46, "endOffset": 49}, {"referenceID": 6, "context": "It has been shown[7] that the satisfiability problem for any simple L-clausal form is solvable in linear time, contrary to the SAT problem in Boolean logic which is NP-complete in the general case.", "startOffset": 17, "endOffset": 20}, {"referenceID": 8, "context": ", xn} and each \u25e6i \u2208 {<,\u2264, >,\u2265,=, 6=}, (1 \u2264 i \u2264 m)[9].", "startOffset": 49, "endOffset": 52}, {"referenceID": 10, "context": "In 1998, Jonsson and B\u00e4ckstr\u00f6m[11] showed that SATDLR is NP-complete.", "startOffset": 30, "endOffset": 34}], "year": 2016, "abstractText": "In this paper, we extend the Maximum Satisfiability (MaxSAT) problem to Lukasiewicz logic. The MaxSAT problem for a set of formulae \u03a6 is the problem of finding an assignment to the variables in \u03a6 that satisfies the maximum number of formulae. Three possible solutions (encodings) are proposed to the new problem: (1) Disjunctive Linear Relations (DLRs), (2) Mixed Integer Linear Programming (MILP) and (3) Weighted Constraint Satisfaction Problem (WCSP). Like its Boolean counterpart, the extended fuzzy MaxSAT will have numerous applications in optimization problems that involve vagueness.", "creator": "LaTeX with hyperref package"}}}