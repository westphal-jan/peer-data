{"id": "1602.03203", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Feb-2016", "title": "Time Resource Networks", "abstract": "The problem of planning under resource constraints is widely applicable. A prominent example is energy management, where we have a limited continuous power supply but have to plan a number of power-guzzling tasks. Such problems are characterized by tightly linked continuous resource constraints and continuous time constraints.", "histories": [["v1", "Tue, 9 Feb 2016 21:49:16 GMT  (220kb,D)", "http://arxiv.org/abs/1602.03203v1", "7 pages, submitted for review to IJCAI16"]], "COMMENTS": "7 pages, submitted for review to IJCAI16", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["szymon sidor", "peng yu", "cheng fang", "brian williams"], "accepted": false, "id": "1602.03203"}, "pdf": {"name": "1602.03203.pdf", "metadata": {"source": "CRF", "title": "Time Resource Networks", "authors": ["Szymon Sidor", "Peng Yu", "Cheng Fang", "Brian Williams"], "emails": ["sidor@mit.edu", "yupeng@mit.edu", "cfang@mit.edu", "williams@mit.edu"], "sections": [{"heading": "1 Introduction", "text": "Temporal Networks scheduling algorithms support diverse formulations useful in modeling practical problems. Examples include dynamical execution strategies based on partial knowledge of uncertain durations, and strategies to upperbound the probability of failing to satisfy temporal constraints given distributions over uncertain durations. However, it is not obvious how to apply them in scenarios with resource usage constraints. While some prior work exists in operations research literature, known as project scheduling or job-shop scheduling, much of the focus is on discrete resources. We attempt to narrow the gap between the two independent bodies of work. As a motivating example, consider the following Smart House scenario. A 150W generator is available, and we know that the resident returns home at some time defined by a Normal distributionN(5pm, 5 minutes). Moreover we know that sun sets at time defined byN(7pm, 1 minute). We would like\nto meet the following constraints with the overall probability at least 98%: \u2022 Wash clothes (duration: 2 hours, power usage: 130W ) before\nuser comes back from work \u2022 Cook dinner (duration: 30 minutes, power usage: 100W )\nready within 15 minutes of user coming back from work \u2022 Have the lights on (power usage: 80W ) from before sunset to\nat least midnight. \u2022 Cook a late night snack (duration: 30 minutes, power usage:\n20W ) between 10pm and 11pm.\nWhile probabilistic constraints can be modeled using probabilistic Simple Temporal Networks [Fang et al., 2014] and solved accordingly, there is no known model which captures the tightly coupled resource constraints. In this paper, we introduce the Time Resource Network (TRN), a general framework capable of encoding scenarios similar to the example described. We describe two algorithms which schedules resource usage given TRN models, one based on a standard encoding as a mixed integer program (MIP) and a novel algorithm leveraging prior specialized algorithms for solving temporal problems. Using the algorithms, we are able to derive a solution to the above example which meets the constraints with 99.7% probability (presented on Figure 1). We also show through benchmarking that the novel algorithm is significantly faster even when the MIP encoding is solved with state-of-the-art commercial solvers."}, {"heading": "2 Related Work", "text": "One of the earliest mentions of a scheduling problem being solved in an algorithmic fashion can be found in [Johnson, 1954], although there\u2019s evidence that the problem was already considered in unpublished versions of [Bellman, 1956]. This publication considers the following statement of scheduling problem. We have n items and\nar X\niv :1\n60 2.\n03 20\n3v 1\n[ cs\n.A I]\n9 F\neb 2\n01 6\nm stages and Ai,j denoting the time for i-th item to be processed by stage j. All the items must be processed by different stages in order (for example first stage is printing of a book and second stage is binding). The publication considers m = 2 and m = 3 and arrives at the solution that \u201cpermits one to optimally arrange twenty production items in about five minutes by visual inspection\u201d. It turns out that the solution to the problem form \u2265 3 is NP-hard ([Garey et al., 1976]). In [Wagner, 1959] an Integer Programming solution to the scheduling problem was presented, with a comment stating that it \u201cis a single model which encompasses a wide variety of machinescheduling situations\u201d. In [Pritsker et al., 1969], a generalization of scheduling problems is considered, which allows for multiple resource constraints. However, the proposed solution uses a discrete time formulation, which, depending on required accuracy, can substantially decrease performance. In 1988 a technique was proposed which can handle resource constraints and continuous time ([Bartusch et al., 1988]). The proposed approach can be thought of as resource constrained scheduling over Simple Temporal Networks (STN). In [Dechter et al., 1991], a notion of Simple Temporal Problem was introduced which allows one to solve problems with simple temporal constraints of form l \u2264 ty \u2212 tx \u2264 u. This concept was later extended with various more sophisticated notions of temporal constraints. [Vidal and Ghallab, 1996] defined an uncertain temporal constraint, where the duration between two time events can take a value from an interval [l, u], which is unknown during the time of scheduling (uncertain duration constraints). [Morris et al., 2001] describes a pseudopolynomial algorithm for handling uncertain duration constraint, where we are allowed to make a scheduling decisions based on knowledge of uncertain durations from the past (Dynamic controllability). The algorithm is later improved to polynomial complexity ([Morris and Muscettola, 2005]). Finally, [Fang et al., 2014] provides a non-linear optimization based solver for uncertain temporal constraints where the duration of the constraint can come from arbitrary probabilistic distribution."}, {"heading": "3 Problem statement", "text": "In this section we introduce a novel formulation - Time Resource Network (TRN). While the results presented in this paper can be extended to multiple types of resources being constrained simultaneously (for example electricity, water, fuel, CPU time and memory among others), for simplicity we consider only one type of constrained resource in this work. Additionally, we only consider the problem of consistency, but the techniques presented can be extended to handle optimization over constrained schedules."}, {"heading": "3.1 Abstract Temporal Network", "text": "We wish to define TRN to support a general class of temporal networks. We thus define the notion of Abstract Temporal Network as a 3-tuple ATN = \u3008E,C,X\u3009 where E is a set of controllable events, C is a set of simple temporal constraints [Dechter et al., 1991] and X represents any additional elements such as additional constraints and variables.\nSchedule A schedule for an ATN = \u3008E,C,X\u3009 is a mapping s : E\u2192 R from events in ATN to their execution times.\nTemporal Consistency For an ATN = \u3008E,C,X\u3009 we define a predicate TCs(ATN) = stn \u2212 consistent(E,C, s) \u2227 extra \u2212 criteria(E,C,X, s), which denotes the ATN is temporally consistent under schedule s. stn \u2212 consistent(E,C, s) represents STN consistency as defined in [Dechter et al., 1991].\nextra \u2212 criteria(E,C,X, s) depends on the type of the particular ATN. We say that ATN is temporally consistent (denoted by TC(ATN)), if there exists at schedule s such that TCs(ATN).\nExample An example of a network that satisfies the ATN interface is Simple Temporal Network with Uncertainty (STNU) described in [Vidal and Ghallab, 1996]. The set E is composed of all the activated and received events, C is the set of requirement links, X is the set of all the contingent links. One way to define is TC(ATN) is to be true if and only if the networks is strongly controllable (which already implies stn\u2212 consistent(E,C, s))."}, {"heading": "3.2 Time Resource Network", "text": "A Time Resource Network is described by a tuple TRN = \u3008ATN,R\u3009, where ATN is an Abstract Temporal Network and R = src1, ..., srcn is a set of simple resource constraints, each of which is a triplet \u3008x, y, r\u3009, where x, y \u2208 E and r \u2208 R is the amount of resource, which can be positive (consumption) and negative (generation). Given a schedule s for any time t \u2208 R we define resource usage for src = \u3008x, y, r\u3009 as:\nus(src, t) = { r if s(x) \u2264 t < s(y) 0 otherwise\nIntuitively, simple resource constraint encodes the fact that between time s(x) and s(y) resource is consumed (generated) at the rate |r| per unit time for positive (negative) r. Our notation is inspired by [Bartusch et al., 1988]. The authors have demonstrated that it is possible encode arbitrary piecewise-constant resource profile, by representing each constant interval by a simple resource constraint and joining ends of those intervals by simple temporal constraints."}, {"heading": "3.3 Resource consistency", "text": "For a schedule s we define a net-usage of a resource at time t \u2208 R as:\nUs(t) = \u2211\n\u2200srci\u2208R\nus(srci, t)\nR is the set of all the resource constraints. We say that the network is resource consistent under schedule s when it satisfies predicate RCs(TRN), i.e.\n\u2200t\u2208R.Us(t) \u2264 0 (1)\nIntuitively, it means that resource is never consumed at a rate that is greater than the generation rate. We say that TRN is resource consistent, if there exists s, such that RCs(TRN) is true."}, {"heading": "3.4 Time-resource consistency", "text": "TRN = (ATN,R) is time-resource consistent if there exists a schedule s such that RCs(TRN) \u2227 TCs(ATN). Determining whether a TRN is time-resource consistent is the central problem addressed in this publication."}, {"heading": "3.5 Properties of TRN", "text": "Before we proceed to describe algorithms for determining timeresource consistency it will be helpful to understand some properties common to every TRN. Lemma 3.1. For a TRN a schedule s is resource consistent if and only if\n\u2200e\u2208EUs(s(e)) \u2264 0 (2)\ni.e. resource usage is non-positive a moment after all of the scheduled events.\nProof. \u21d2 Follows from definition of resource-consistency. \u21d0 We say a time point t \u2208 R is scheduled if there exists an event e \u2208 E such that t = s(e). Assume for contradiction, that the right side of the implication is satisfied, but the schedule is not resource consistent. That means that there exists a time point tdanger for which Us(tdanger) > 0. Notice that by assumption tdanger could not be scheduled. Let tbefore be the highest scheduled time point is smaller than tdanger . Notice that if no such time point existed, that would mean that there is no resource constraint (x, y, r) such that s(x) \u2264 tdanger < s(y), so Us(tdanger) = 0 . By assumption, Us(tbefore) < 0. We can therefore assume that tbefore exists. Notice that by definition of tbefore and simple resource constraints, Us(t) for tbefore \u2264 t \u2264 tdanger is constant. If it wasn\u2019t there would be another scheduled point between tbefore and tdanger , but we assumed that tbefore is highest scheduled point smaller than tdanger . Therefore Us(tdanger) = Us(tbefore). But we assumed that Us(tdanger) > 0 and Us(tbefore) < 0 Contradiction.\nCorollary 3.1.1. Given a TRN and two schedules A and B where all events occur in the same order, A is resource consistent if and only if B is resource consistent.\nProof. Notice that if we move execution time of arbitrary event, while preserving the relative ordering of all the events, then net resource usage at that event will not change. Therefore by lemma 3.1, A is resource-consistent if and only if B is resource-consistent."}, {"heading": "4 Approach", "text": "In this section we present two approaches for determining timeresource consistency of a TRN. One of them involves Mixed Integer Programming (MIP) and the other Constraint Problem (CP) formulations."}, {"heading": "4.1 Definitions", "text": "Let\u2019s take a TRN = \u3008ATN,R\u3009 where R = src1, ..., srcn and srci = \u3008xi, yi, ri\u3009 as defined in section 3.2. Let\u2019s denote all the events relevant for resource constraints as RE \u2286 E, i.e.\nRE = {xi|\u3008xi, yi, ri\u3009 \u2208 R} \u222a {yi|\u3008xi, yi, ri\u3009 \u2208 R}\nAdditionally, let\u2019s introduce resource-change at event e \u2208 E as:\n\u2206(e) = \u2211\n\u3008xi,yi,ri\u3009\u2208R,xi=e\nri + \u2211\n\u3008xi,yi,ri\u3009\u2208R,yi=e\n\u2212ri\nIntuitively \u2206(n) is the amount by which resource usage changes after time s(n) under schedule s."}, {"heading": "4.2 Mixed Integer Programming based algorithm", "text": "Mixed Integer Programming ([Markowitz and Manne, 1957]) allows one to express scheduling problems in an intuitive way. In this section we present a way to formulate TRN as a MIP problem. The technique is very similar to the ones used in state of the art solvers for general scheduling [Patterson, 1984] [Bartusch et al., 1988]. Therefore, the purpose of this section is not to introduce a novel approach, but to demonstrate that those algorithms are straightforward to express using TRN formulation. Let TC-formulation(ATN) be a MIP-formulation that has a solution if an only if TC(ATN). For some types of ATN such a formulation might not exist and in those cases MIP-based algorithm cannot be applied.\nThe following MIP program has a solution if and only if the TRN is time-resource-consistent:\n\u2200e\u2208E . 0 \u2264 e \u2264M (3) \u2200e1,e2\u2208RE,e1 6=e2 . e1 \u2212 e2 \u2265 \u2212xe1,e2M (4) \u2200e1,e2\u2208RE,e1 6=e2 . e1 \u2212 e2 \u2264 (1.0\u2212 xe1,e2)M (5) \u2200e1,e2\u2208RE,e1 6=e2 . xe1,e2 + xe2,e1 = 1 (6) \u2200e1,e2\u2208RE,e1 6=e2 . xe1,e2 \u2208 {0, 1} (7)\n\u2200e1\u2208RE . \u2211\ne2\u2208RE\nxe2,e1\u2206(e2) \u2264 0 (8)\nTC-formulation(ATN) (9)\nVariable M denotes the time horizon, such that all the variables are scheduled between 0 and M . This definition is imposed in eq. 3. Variables xe1,e2 are order variables, i.e.\nxe1,e2 = { 1 if s(e1) \u2264 s(e2) 0 otherwise\nEquations 4, 5, 6, 7 enforce that definition. In particular equations 4, 5 enforce the ordering using big-M formulation that is correct because of time horizon constraint. In theory eq. 6 could be eliminated by careful use of (making sure no two timepoints are scheduled at exactly the same time), but we found that in practice they result in useful cutting planes that decrease the total optimization time. Equation 8 ensures resource consistency by lemma 3.1. Finally eq. 9 ensures time consistency. Solving that Mixed-Integer Program will yield a valid schedule if one exists, which can be recovered by inspecting values of variables t \u2208 E."}, {"heading": "4.3 Constraint Programming based algorithm", "text": "The downside of MIP approach is the fact that the ATN must have a MIP formulation (e.g. pSTN does not have one). In this section we present a novel CP approach which addresses this concern. The high level idea of the algorithm is quite simple and is presented in algorithm 1. In the second line, we iterate over all the permutations of the events. On line 3 we use resource consistent function to check resource consistency, which by corollary 3.1.1 is only dependent on the chosen permutation. On line five we use TC checker to determine if network is time consistent - the implementation depends on the type of ATN and we assume it is available. Function encode as stcs encodes permutation using simple temporal constraints. For example if \u03c3(1) = 2 and \u03c3(2) = 1 and \u03c3(3) = 3, then we can encode it by two STCs: 2\u2190 1 and 1\u2190 3.\nData: TRN = \u3008ATN,R\u3009, ATN = \u3008E,C,X\u3009 Result: true if TRN is time-resource-consistent\n1 N \u2190 E; 2 for \u03c3 \u2190 permutation of N do 3 if resource consistent(R, \u03c3) then 4 ATN \u2032 = (E,C \u222a encode as stcs(\u03c3), X) ; 5 if TC(ATN) then 6 return true; 7 end 8 end 9 end\n10 return false; Algorithm 1: Time-resource-consistency of a TRN\nThe implementation of resource consistent follows from lemma 3.1 and is straightforward - we can evaluate Us(s(e)) for all events e \u2208 RE (which can be done only knowing their relative ordering), and if it is always non-positive then we return true. To improve the performance w.r.t algorithm 1, we use off-theshelf constraint propagation software (PyConstraint). Let\u2019s consider RE = e1, ..., eN . We define a problem using N variables: x1, x2, ..., xN \u2208 {1, ..., N}, such that xj = i if ei is j-th in the temporal order, i.e. x1, ..., xN represent the permutation \u03c3. We used the following pruners which, when combined, make the CP solver behave similarly to algorithm 1, but ignoring some pruned permutations:\n\u2022 all different constraint - ensure that all variables are different, i.e. they actually represent a permutation. This is standard constraint available in most CP software packages.\n\u2022 time consistent - making sure that the temporal constraints implied by the permutation are not making the ATN inconsistent. Even when the variables are partially instantiated, we can compute a set of temporal constraints implied by the partially instantiated permutation. For example if we only know that x1 = 3, x5 = 2 and x6 = 5, it implies e5 \u2264 e1 \u2264 e6.\n\u2022 resource consistent - ensure that for all e1, ..., en \u2208 RE, resource usage just after ei is non-positive. Even if the order is partially specified we can still evaluate it. A subtlety which needs to be considered is that we need to assume that all the events for which xi is undefined and which are generating (\u03b4(ei) < 0) could be scheduled before all the points for which order is defined. For example if n = 4 and \u2206(e1) = 4, \u2206(e2) = \u22126, \u2206(e3) = 3, \u2206(e4) = 4 and we only know that x1 = 3, x3 = 2, then we have to assume that all the generation happened before the points that we know, i.e. initially resource usage is \u22126, then after e3 is is \u22123, and after e1 it is 1, therefore violating the constraint. But if in that scenario we would instead have \u2206(e1) = 2 and we hadn\u2019t had assumed that all the unscheduled generation \u22126 happens at the beginning, we would have falsely deduced that the given variable assignment could never be made resource consistent.\nTRN limitations - Going Beyond Fixed Schedules Notice that CP algorithm does not require the schedule to be fixed. For example, we could consider ATN to be STNU and TC to be dynamic controllability ([Vidal and Ghallab, 1996]). There, we seek an execution strategy, rather than a schedule. While this can be implemented for a TRN, there is an important limitation to that approach. Even though temporal schedule is dynamic, the schedule implied by resource constraints is static - we cannot change \u03c3 dynamically during execution.\nFigure 2 shows an example where TRN would report no solution found. However, if we ignore the resource constraints and find a dynamic execution strategy satisfying temporal constraints, it never violates the resource constraints, as they are both generating. The reason TRN fails to find the solution is due to the fact that B and D are both in the set RE and TRN\u2019s solution attempts to fix the ordering between B and D, which is impossible to do statically in this example."}, {"heading": "5 Experiments", "text": ""}, {"heading": "5.1 TRN over STN", "text": "To understand the performance of our novel CP algorithm, we used the proposed MIP approach as a baseline. We used Gurobi as a MIP solver. Both algorithms were used to determine time-resource consistency for TRN over Simple Temporal Network. In case of MIP based algorithm, all the temporal constraints l \u2264 x\u2212 y \u2264 u, where l, b \u2208 R and x, y \u2208 E can be expressed as linear constraints, with x and y being continuous variables. In case of CP algorithm, we used Floyd-Warshall to determine temporal consistency as suggested in [Dechter et al., 1991]. The test cases were created by the following procedure:\n1. Specify number of events N \u2265 2, number of temporal constraints T \u2265 2 and number of resource constraints R \u2265 2\n2. Create a random schedule s for events in N with times in the interval (0.0, 1.0).\n3. Create T time constraints using the following procedure:\n(a) Choose start and end points x, y \u2208 N . (b) Choose a type of constraint - lower bound or upper\nbound, each with probability 0.5 (c) Let d = s(y) \u2212 s(x) and chose number d\u2032 form expo-\nnential distribution with \u03bb = 1/ \u221a d. For lower-bound set\nl = d\u2212 d\u2032. For upper bound set u = d+ d\u2032. 4. Choose number of generating constraints G as a random inte-\nger between 1 and R \u2212 1 and set number of consuming constraints as C = R\u2212G (so that there\u2019s at least on constraint of each type).\n5. CreateG generating constraints using the following procedure, by randomly choosing x, y \u2208 N and setting r to a random number between \u22121 and 0.\n6. Create C consuming constraints using the following procedure.\n(a) Choose start and end points x, y \u2208 N . (b) Let m be the maximum resource usage value between x\nand y considering all the resource constraints generated so far. If m = 0 repeat the process.\n(c) choose r from uniform distribution between 0 and \u2212m. We considered 10 different values ofN : 10, 20, ..., 100. We considered 6 different values of R: 2, 4, 6, 8, 10, 20. We defined two types of networks - sparse, where T = 2N and dense where T = N2/2. For every set of parameters we run 5 trials. We set the time limit to 30 seconds. The results are presented on figure 3. We can see there exists a set of parameters where only CP managed to find the solution MIP exceed the time limit and vice versa. Figure 4 compares execution time of CP and MIP algorithms. The cells colored in blue are the ones where CP algorithm is faster and the cells colored in red are the ones where MIP based algorithm is better. One can see that CP is much better suited for large temporal networks with small number of resource constraints, while MIP scales much better with the number of resource constraints."}, {"heading": "5.2 TRN over pSTN", "text": "To demonstrate extensibility of our approach we have implemented a version of TRN network, where the underlying temporal network is a pSTN ([Fang et al., 2014]). pSTN extends the notion of STN. It defines STN-like events and edges as actiavated time points and free constraints respectively. It extends STN with received time points, which are determined by the environment. Every received time point is defined by corresponding uncertain duration (uDn) constraint, which specifies a probability distribution over duration between some activated time point and the received time point. Due to that extension, the notion of consistency TC(ATN) becomes probabilistic; rather than asking is this pSTN consistent?, we ask is is this pSTN consistent with probability p?. Since pSTN is an extension of STN, it is an ATN . Given the choice of p we can use probabilistic consistency as TC. Therefore we can use CP algorithm to check networks consistency. Example scenario and the schedule obtained by the algorithm is presented in the introduction."}, {"heading": "6 Conclusion", "text": "In this paper, we have introduced Time Resource Networks, which allow one to encode many resource-constrained scheduling problems. We defined them in a way that permits use of many different notions of temporal networks to constrain schedules. We introduced a novel CP algorithm for determining time-resource consistency of a TRN and we compared it MIP baseline. We have demonstrated that our algorithm achieves superior performance for networks with large number of temporal constraints and small number of resource constraints. In addition, we have shown that CP algorithm is flexible and can support recently introduced probabilistic Simple Temporal Networks [Fang et al., 2014]."}], "references": [{"title": "Annals of operations Research", "author": ["Martin Bartusch", "Rolf H M\u00f6hring", "Franz J Radermacher. Scheduling project networks with resource constraints", "time windows"], "venue": "16(1):199\u2013240,", "citeRegEx": "Bartusch et al.. 1988", "shortCiteRegEx": null, "year": 1988}, {"title": "Journal of the Society for Industrial and Applied Mathematics", "author": ["Richard Bellman. Mathematical aspects of scheduling theory"], "venue": "4(3):168\u2013205,", "citeRegEx": "Bellman. 1956", "shortCiteRegEx": null, "year": 1956}, {"title": "Artificial intelligence", "author": ["Rina Dechter", "Itay Meiri", "Judea Pearl. Temporal constraint networks"], "venue": "49(1):61\u2013 95,", "citeRegEx": "Dechter et al.. 1991", "shortCiteRegEx": null, "year": 1991}, {"title": "Chance-constrained probabilistic simple temporal problems", "author": ["Cheng Fang", "Peng Yu", "Brian C. Williams"], "venue": "AAA-14,", "citeRegEx": "Fang et al.. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Mathematics of operations research", "author": ["Michael R Garey", "David S Johnson", "Ravi Sethi. The complexity of flowshop", "jobshop scheduling"], "venue": "1(2):117\u2013129,", "citeRegEx": "Garey et al.. 1976", "shortCiteRegEx": null, "year": 1976}, {"title": "Naval research logistics quarterly", "author": ["Selmer Martin Johnson. Optimal two-", "threestage production schedules with setup times included"], "venue": "1(1):61\u201368,", "citeRegEx": "Johnson. 1954", "shortCiteRegEx": null, "year": 1954}, {"title": "Econometrica: journal of the Econometric Society", "author": ["Harry M Markowitz", "Alan S Manne. On the solution of discrete programming problems"], "venue": "pages 84\u2013 110,", "citeRegEx": "Markowitz and Manne. 1957", "shortCiteRegEx": null, "year": 1957}, {"title": "In AAAI", "author": ["Paul H Morris", "Nicola Muscettola. Temporal dynamic controllability revisited"], "venue": "pages 1193\u20131198,", "citeRegEx": "Morris and Muscettola. 2005", "shortCiteRegEx": null, "year": 2005}, {"title": "et al", "author": ["Paul Morris", "Nicola Muscettola", "Thierry Vidal"], "venue": "Dynamic control of plans with temporal uncertainty. In IJCAI, volume 1, pages 494\u2013502. Citeseer,", "citeRegEx": "Morris et al.. 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "project scheduling problem", "author": ["James H Patterson. A comparison of exact approaches for solving the multiple constrained resource"], "venue": "Management science, 30(7):854\u2013867,", "citeRegEx": "Patterson. 1984", "shortCiteRegEx": null, "year": 1984}, {"title": "Multiproject scheduling with limited resources: A zero-one programming approach", "author": ["A Alan B Pritsker", "Lawrence J Waiters", "Philip M Wolfe"], "venue": "Management science, 16(1):93\u2013108,", "citeRegEx": "Pritsker et al.. 1969", "shortCiteRegEx": null, "year": 1969}, {"title": "Dealing with uncertain durations in temporal constraint networks dedicated to planning", "author": ["Thierry Vidal", "Malik Ghallab"], "venue": "ECAI, pages 48\u201354. PITMAN,", "citeRegEx": "Vidal and Ghallab. 1996", "shortCiteRegEx": null, "year": 1996}, {"title": "Naval Research Logistics Quarterly", "author": ["Harvey M Wagner. An integer linear-programming model for machine scheduling"], "venue": "6(2):131\u2013140,", "citeRegEx": "Wagner. 1959", "shortCiteRegEx": null, "year": 1959}], "referenceMentions": [{"referenceID": 3, "context": "While probabilistic constraints can be modeled using probabilistic Simple Temporal Networks [Fang et al., 2014] and solved accordingly, there is no known model which captures the tightly coupled resource constraints.", "startOffset": 92, "endOffset": 111}, {"referenceID": 5, "context": "One of the earliest mentions of a scheduling problem being solved in an algorithmic fashion can be found in [Johnson, 1954], although there\u2019s evidence that the problem was already considered in unpublished versions of [Bellman, 1956].", "startOffset": 108, "endOffset": 123}, {"referenceID": 1, "context": "One of the earliest mentions of a scheduling problem being solved in an algorithmic fashion can be found in [Johnson, 1954], although there\u2019s evidence that the problem was already considered in unpublished versions of [Bellman, 1956].", "startOffset": 218, "endOffset": 233}, {"referenceID": 4, "context": "It turns out that the solution to the problem form \u2265 3 is NP-hard ([Garey et al., 1976]).", "startOffset": 67, "endOffset": 87}, {"referenceID": 12, "context": "In [Wagner, 1959] an Integer Programming solution to the scheduling problem was presented, with a comment stating that it \u201cis a single model which encompasses a wide variety of machinescheduling situations\u201d.", "startOffset": 3, "endOffset": 17}, {"referenceID": 10, "context": "In [Pritsker et al., 1969], a generalization of scheduling problems is considered, which allows for multiple resource constraints.", "startOffset": 3, "endOffset": 26}, {"referenceID": 0, "context": "In 1988 a technique was proposed which can handle resource constraints and continuous time ([Bartusch et al., 1988]).", "startOffset": 92, "endOffset": 115}, {"referenceID": 2, "context": "In [Dechter et al., 1991], a notion of Simple Temporal Problem was introduced which allows one to solve problems with simple temporal constraints of form l \u2264 ty \u2212 tx \u2264 u.", "startOffset": 3, "endOffset": 25}, {"referenceID": 11, "context": "[Vidal and Ghallab, 1996] defined an uncertain temporal constraint, where the duration between two time events can take a value from an interval [l, u], which is unknown during the time of scheduling (uncertain duration constraints).", "startOffset": 0, "endOffset": 25}, {"referenceID": 8, "context": "[Morris et al., 2001] describes a pseudopolynomial algorithm for handling uncertain duration constraint, where we are allowed to make a scheduling decisions based on knowledge of uncertain durations from the past (Dynamic controllability).", "startOffset": 0, "endOffset": 21}, {"referenceID": 7, "context": "The algorithm is later improved to polynomial complexity ([Morris and Muscettola, 2005]).", "startOffset": 58, "endOffset": 87}, {"referenceID": 3, "context": "Finally, [Fang et al., 2014] provides a non-linear optimization based solver for uncertain temporal constraints where the duration of the constraint can come from arbitrary probabilistic distribution.", "startOffset": 9, "endOffset": 28}, {"referenceID": 2, "context": "We thus define the notion of Abstract Temporal Network as a 3-tuple ATN = \u3008E,C,X\u3009 where E is a set of controllable events, C is a set of simple temporal constraints [Dechter et al., 1991] and X represents any additional elements such as additional constraints and variables.", "startOffset": 165, "endOffset": 187}, {"referenceID": 2, "context": "stn \u2212 consistent(E,C, s) represents STN consistency as defined in [Dechter et al., 1991].", "startOffset": 66, "endOffset": 88}, {"referenceID": 11, "context": "Example An example of a network that satisfies the ATN interface is Simple Temporal Network with Uncertainty (STNU) described in [Vidal and Ghallab, 1996].", "startOffset": 129, "endOffset": 154}, {"referenceID": 0, "context": "Our notation is inspired by [Bartusch et al., 1988].", "startOffset": 28, "endOffset": 51}, {"referenceID": 6, "context": "Mixed Integer Programming ([Markowitz and Manne, 1957]) allows one to express scheduling problems in an intuitive way.", "startOffset": 27, "endOffset": 54}, {"referenceID": 9, "context": "The technique is very similar to the ones used in state of the art solvers for general scheduling [Patterson, 1984] [Bartusch et al.", "startOffset": 98, "endOffset": 115}, {"referenceID": 0, "context": "The technique is very similar to the ones used in state of the art solvers for general scheduling [Patterson, 1984] [Bartusch et al., 1988].", "startOffset": 116, "endOffset": 139}, {"referenceID": 11, "context": "For example, we could consider ATN to be STNU and TC to be dynamic controllability ([Vidal and Ghallab, 1996]).", "startOffset": 84, "endOffset": 109}, {"referenceID": 2, "context": "In case of CP algorithm, we used Floyd-Warshall to determine temporal consistency as suggested in [Dechter et al., 1991].", "startOffset": 98, "endOffset": 120}, {"referenceID": 3, "context": "To demonstrate extensibility of our approach we have implemented a version of TRN network, where the underlying temporal network is a pSTN ([Fang et al., 2014]).", "startOffset": 140, "endOffset": 159}], "year": 2016, "abstractText": "The problem of scheduling under resource constraints is widely applicable. One prominent example is power management, in which we have a limited continuous supply of power but must schedule a number of power-consuming tasks. Such problems feature tightly coupled continuous resource constraints and continuous temporal constraints. We address such problems by introducing the Time Resource Network (TRN), an encoding for resource-constrained scheduling problems. The definition allows temporal specifications using a general family of representations derived from the Simple Temporal network, including the Simple Temporal Network with Uncertainty, and the probabilistic Simple Temporal Network (Fang et al. (2014)). We propose two algorithms for determining the consistency of a TRN: one based on Mixed Integer Programing and the other one based on Constraint Programming, which we evaluate on scheduling problems with Simple Temporal Constraints and Probabilistic Temporal Constraints.", "creator": "LaTeX with hyperref package"}}}