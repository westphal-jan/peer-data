{"id": "1603.07051", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Mar-2016", "title": "Cosolver2B: An Efficient Local Search Heuristic for the Travelling Thief Problem", "abstract": "The Traveling Thief Problem (TTP) is a NP-hard optimization problem aimed at providing a more realistic model. TTP specifically targets routing problems under packaging / loading constraints found in supply chain management and transportation. In this paper, TTP is represented and formulated mathematically, a combined local search algorithm is proposed and compared with Random Local Search (RLS) and Evolutionary Algorithm (EA), and the results are promising as new better solutions are found.", "histories": [["v1", "Wed, 23 Mar 2016 02:30:35 GMT  (68kb)", "http://arxiv.org/abs/1603.07051v1", "12th ACS/IEEE International Conference on Computer Systems and Applications (AICCSA) 2015. November 17-20, 2015"]], "COMMENTS": "12th ACS/IEEE International Conference on Computer Systems and Applications (AICCSA) 2015. November 17-20, 2015", "reviews": [], "SUBJECTS": "cs.AI cs.DS cs.NE", "authors": ["mohamed el yafrani", "bela\\\"id ahiod"], "accepted": false, "id": "1603.07051"}, "pdf": {"name": "1603.07051.pdf", "metadata": {"source": "CRF", "title": "Cosolver2B: An Efficient Local Search Heuristic for the Travelling Thief Problem", "authors": ["Mohamed El Yafrani"], "emails": ["m.elyafrani@gmail.com", "ahiod@fsr.ac.ma"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 3.\n07 05\n1v 1\n[ cs\n.A I]\n2 3\nM ar\n2 01\n6\nCosolver2B: An Efficient Local Search Heuristic for the Travelling Thief Problem\nMohamed El Yafrani LRIT, associated unit to CNRST (URAC 29)\nFaculty of Science, Mohammed V University of Rabat B.P. 1014 Rabat, Morocco\nEmail: m.elyafrani@gmail.com\nBela\u0131\u0308d Ahiod LRIT, associated unit to CNRST (URAC 29)\nFaculty of Science, Mohammed V University of Rabat B.P. 1014 Rabat, Morocco\nEmail: ahiod@fsr.ac.ma\n978-1-5090-0478-2/15/$31.00 c\u00a92015 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other uses, in any current or future media, including reprinting/republishing this material for advertising or promotional purposes, creating new collective works, for resale or redistribution to servers or lists, or reuse of any copyrighted component of this work in other works.\nAbstract\u2014Real-world problems are very difficult to optimize. However, many researchers have been solving benchmark problems that have been extensively investigated for the last decades even if they have very few direct applications. The Traveling Thief Problem (TTP) is a NP-hard optimization problem that aims to provide a more realistic model. TTP targets particularly routing problem under packing/loading constraints which can be found in supply chain management and transportation. In this paper, TTP is presented and formulated mathematically. A combined local search algorithm is proposed and compared with Random Local Search (RLS) and Evolutionary Algorithm (EA). The obtained results are quite promising since new better solutions were found.\nI. INTRODUCTION\nThe travelling thief problem (TTP) is a novel NP-hard problem introduced in [1] to provide a model that better represents real-world problems. The particularity of TTP is that it is composed of two other NP-hard problems, namely the travelling salesman problem and the knapsack problem, which are interdependent.\nThe problem can be introduced with the following simplified statement: \u201dGiven n cities and m items scattered among these cities, a thief with his rented knapsack should visit all n cities, once and only once each, and pick up some items. The more the knapsack gets heavier, the more the thief becomes slower. What is the best path and picking plan to adopt to achieve the best benefit ?\u201d.\nTwo particular properties can be extracted from the statement above. First, the overall problem is composed of two sub-problems: choosing the best path and picking up the most profitable items. Second, the sub-problems are interdependent: when the knapsack gets heavier, the speed of the thief decreases. The composition increases the number of possible solutions, and the interdependence makes it impossible to isolate sub-problems.\nThis kind of multiple interdependent components is widely found in logistics and supply chain management. Nevertheless, few attempts have been made to study and solve these problems as a whole, and a lot of effort have been made to solve the components independently. In [3], the authors explain\nwhy there is a gap between the work done by the Evolutionary Computation researchers and real-world applications. As far as we know, these observations can be extended to all metaheuristics community.\nExamples of other realistic problems with multiple interdependent sub-problems include most supply chain optimization problems [7], [8], routing problems with loading constraints such as 2L-CVRP and 3L-CVRP [9], [10], [3], and water tank delivery [14].\nSince TTP was introduced, some algorithms were proposed to solve it. An Evolutionary Algorithm and a Random Local Search were proposed in [13] to provide a starting point to other researchers. In [2], an approach named Cosolver was introduced to solve TTP by separating the sub-problems and managing a communication between them. Lastly, an interesting work on TTP introduces many complexity reduction techniques in order to solve very large instances in a time budget of 10 minutes [11].\nIn this paper, we follow the ideas proposed in [2] and [11] to propose further improvements and introduce an algorithm based on the Cosolver framework that can solve TTP instances efficiently.\nThis paper is organized as follows. In section II TTP is mathematically defined and investigated. Section III is dedicated to introduce our approach for solving TTP. The tests and results are presented in section IV. Section V concludes the paper and outlines areas for future research."}, {"heading": "II. BACKGROUND", "text": "In this section, we present some background information about TTP. The problem is formulated and an abstract algorithm is presented."}, {"heading": "A. The Travelling Thief Problem", "text": "Herein we formulate the Travelling Thief Problem (TTP) which combines two other well known benchmark problems, namely the Travelling Salesman Problem (TSP) and the Knapsack Problem (KP).\nIn TTP, we consider n cities and the associated distance matrix {dij}. There are m items scattered in these cities, each item k have a profit pk and a weight wk. A thief with his knapsack is going to visit all these cities (once and only once\neach), and pick up some items to fill his knapsack. We note W the maximum capacity of the knapsack, vmin and vmax are the minimum and maximum possible velocity respectively.\nAlso, we consider also the following constraints and parameters:\n\u2022 Each item is available in only one city. We note {Ai} the availability vector, Ai \u2208 {1, ..., n} contains the reference to the city that contains the item i. \u2022 We suppose that the knapsack is rented. We note R the renting price per time unit. \u2022 The velocity of the thief changes accordingly to the knapsack weight. We note vxi the velocity of the thief at city xi (see equation 1).\nvxi = vmax \u2212 C \u2217 wxi (1)\nwhere C = vmax\u2212vmin W is a constant value, and wxi represents the weight of the knapsack at city xi.\nThe goal of the problem is to find the tour x and the picking plan z that optimize the total travel gain defined in equation 2.\nG(x, z) = g(z)\u2212R \u2217 f(x, z) (2)\nWhere g(z) = \u2211\nm pm \u2217 zm is the total value of the items subject to \u2211 m wm \u2217zm \u2264 W , and f(x, z) = \u2211n\u22121 i=1 txi,xi+1 + txn,x1 is the total travel time. The solutions could be naturally coded as follows. The tour x = (x1, ..., xn) is a vector containing the ordered list of cities, and the picking plan z = (z1, ..., zn) is a binary vector such as zi is equal to 1 if the item i is picked, 0 otherwise.\nThe interdependence between KP and TSP have been investigated. As shown in [1], [11], optimizing the sub-problems in isolation (even to optimality) does not guarantee finding good solutions for the overall problem. Therefore, finding good global solutions requires an algorithm that takes interdependence of components in consideration, which makes the design of such an algorithm quite difficult."}, {"heading": "B. Cosolver", "text": "Cosolver is an abstract algorithm proposed in [2] to solve TTP. The idea behind the algorithm is simple. Decompose the overall problem and solve components separately using a fitness function that takes in consideration the interdependence between the two components.\nThus, given an initial solution (x0, z0), TTP is decomposed into the following problems.\n1) The Travelling Salesman with Knapsack Problem (TSKP): consists of finding the best tour x\u2032 that, combined with the last found picking plan z\u2032, optimizes the TTP objective function G. Also, because the total profit function g does not depend on the tour, instead of maximizing G, we can consider minimizing the total travel cost T (see equation 3).\nT (x, z) = R \u2217 f(x, z) (3)\n2) The Knapsack on the Route Problem (KRP): consists of finding the best picking plan z\u2032 that maximizes the total gain G when combined with the last found tour x\u2032.\nFigure 1 represents a flowchart of the Cosolver framework."}, {"heading": "III. PROPOSED APPROACH", "text": "In this section, we propose an algorithm that implements the Cosolver framework and uses some techniques proposed in [11]."}, {"heading": "A. Solution initialization", "text": "In TTP, the initial solution has a big impact on the search algorithm. Thus, the initialization strategy should be chosen carefully. In our implementation, we use a heuristic approach to initialize both the tour and the picking plan.\nFirstly, the tour is generated using a good TSP algorithm such as the Lin-Kernighan heuristic [6] or the Ant Colony Optimization algorithm [5].\nThen, the picking plan is initialized using the following approach.\n1) The insertion heuristic proposed in [11] is used to fill the knapsack with items according to three fitness approximations. 2) A simple bit-flip search on inserted items is performed to eliminate some useless items from the picking plan using the objective function.\nWe will refer to this heuristic as the insertion & elimination heuristic."}, {"heading": "B. Complexity reduction techniques", "text": "Our algorithm uses the following complexity reduction techniques.\n1) TSKP neighborhood reduction: The Delaunay triangulation [4] is used as a candidate generator for the 2-OPT heuristic. This strategy was also proposed in [11].\n2) Objective value recovery: Instead of using the objective function to calculate the objective value of neighbors, this value can be recovered by keeping track of time and weight information at each tour\u2019s city. The following vectors are used to perform such operation.\n\u2022 Time accumulator (tacc): a vector that contains the current time at each city of the tour. \u2022 Weight accumulator (wacc): a vector that contains the current weight at each city of the tour. \u2022 Time register (treg): a vector that contains the added time at each city of the tour. \u2022 Weight register (wreg): a vector that contains the added weight at each city of the tour.\nFigure 2 shows the effect (in gray) of mutating a TTP solution on the total travel time. Two mutations are shown (in black): the one-bit-flip on the picking plan, and a 2-OPT exchange on the tour.\nA similar technique named incremental evaluation was proposed in [11]. In our implementation, we go further and use these techniques also to recover the vectors.\n3) Objective function calculation: The objective function has a complexity of O(m \u2217 n) as proposed in [12], where m is the number of items and n is the number of cities. The complexity could be reduced to O(k\u2217n) where k is the number of items per city. In the CEC \u20192015 competition website 1, the Java implementations already has a reduced complexity but it uses a technique highly dependent on the TTP instance generator. We believe that a better way is to class items per city.\nFigure 3 explains this technique using a simple example. In the example, 4 cities are considered: city 1 contains 4 items (1, 2, 3 and 4), city 2 contains 2 items (5 and 6), city 3 contains no items, city 4 contains 3 items (7, 8 and 9)."}, {"heading": "C. Proposed algorithm", "text": "Our heuristic, namely Cosolver2B, is based on local search algorithms, and it implements the Cosolver framework. In addition to the techniques presented above, we use the 2-OPT heuristic to solve TSKP and a bit-flip search to solve the KRP. The algorithm is summarized in the flowchart in figure 4.\n1http://cs.adelaide.edu.au/ optlog/CEC2015Comp/\nThe algorithm starts with a tour generated using the LinKernighan heuristic. The insertion & elimination heuristic is then used to initialize the picking plan. The obtained tour and picking plan are then given to the TSKP optimizer that tries to improve the current tour using a 2-OPT heuristic. The resulting tour is combined with the current picking plan and given to the KRP optimizer that uses a simple bit-flip to find a decent picking plan. If there is improvement, the new picking plan is combined with the current tour and given to the TSKP optimizer. This process is repeated until there is no improvement."}, {"heading": "IV. EXPERIMENTAL RESULTS", "text": "We tested our algorithm on 15 TTP instances of various sizes [13]. The obtained results are compared with RLS and\nEA proposed in the same paper 2. We have implemented two versions of Cosolver2B. The first is best fit (also known as best improvement) which searches the entire neighborhood on a given iteration and selects the best neighbor. The second is first fit (also known as first improvement) which stops the neighborhood search once a better solution is found.\nSince our algorithms are deterministic, one run per instance is sufficient. The algorithms have a maximum runtime limit of 600 seconds. Note that our implementation uses the Java platform, and the tests are performed on a core i3-2370M CPU 2.40GHz machine with 4 GB of RAM, running Linux.\nOn the other hand, due to their random behavior, 30 runs per instance were performed using RLS and EA. The tests on EA and RLS were performed on a different machine (Matlab 2014, core i7 2600 CPU 3.4 GHz, with 4GB of RAM, running Windows 7). Thus, The runtimes for these algorithms are given for guidance. Furthermore, in our comparison, we only select the best found solution for these two algorithms.\nThe results are reported in table I. Note that the runtimes are measured with seconds and the best objective values are made bolder.\nThe results show that our algorithm was able to find new better solutions for most tested instances only by combining local search algorithms. Furthermore, we have made the following observations:\n\u2022 Cosolver2B surpasses EA and RLS on various TTP sizes. \u2022 The runtime of Cosolver2B is very decent for small and\nmid-size instances. However, for very large instances the runtime is quite high compared to RLS and EA.\n2for instance files and raw results of RLS and EA, the reader is referred to https://sites.google.com/site/mohammadrezabonyadi/standarddatabases/travellingthief-problem-data-bases-and-raw-results\n\u2022 Both EA and RLS have an unpredictable behavior, while Cosolver2B is deterministic and garantees decent solutions for most instances. \u2022 For many instances, most optimization runtime and gain improvement is done on the KRP sub-problem. \u2022 The best fit strategy performed better than first fit for most small and mid-size instances."}, {"heading": "V. CONCLUSION", "text": "In this paper, a combined local search heuristic has been proposed. Our approach is based on the Cosolver framework and complexity reduction techniques. The experimental results have shown promising results both in terms of solution quality and runtime. The good performance of Cosolver2B and the memetic algorithm MALTS on very large scale instances [11] proves the importance of making strong assumptions about the problem domain when dealing with multi-component problems.\nFurthermore, we engage to improve our algorithm in terms of space exploration and runtime by using more sophisticated search heuristics."}, {"heading": "ACKNOWLEDGMENT", "text": "The authors express their gratefulness to the following persons who have contributed to this work with their useful comments: Asmae El Ghazi, Aziz Ouaarab, and Mehdi El Krari."}], "references": [{"title": "The travelling thief problem: the first step in the transition from theoretical problems to realistic problems", "author": ["Mohammad Reza Bonyadi", "Zbigniew Michalewicz", "Luigi Barone"], "venue": "In Evolutionary Computation (CEC),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "Socially inspired algorithms for the travelling thief problem", "author": ["Mohammad Reza Bonyadi", "Zbigniew Michalewicz", "Micha\u014f Roman Przyby\u014fek", "Adam Wierzbicki"], "venue": "In Proceedings of the 2014 conference on Genetic and evolutionary computation,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "A hybrid algorithm for the capacitated vehicle routing problem with three-dimensional loading constraints", "author": ["Andreas Bortfeldt"], "venue": "Computers & Operations Research,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "Sur la sphere vide", "author": ["Boris Delaunay"], "venue": "Izv. Akad. Nauk SSSR, Otdelenie Matematicheskii i Estestvennyka Nauk,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1934}, {"title": "Ant colonies for the travelling salesman problem. BioSystems", "author": ["Marco Dorigo", "Luca Maria Gambardella"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1997}, {"title": "An effective implementation of the lin\u2013kernighan traveling salesman heuristic", "author": ["Keld Helsgaun"], "venue": "European Journal of Operational Research,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2000}, {"title": "Evolutionary approaches for supply chain optimisation: part i: single and two-component supply chains", "author": ["Maksud Ibrahimov", "Arvind Mohais", "Sven Schellenberg", "Zbigniew Michalewicz"], "venue": "International Journal of Intelligent Computing and Cybernetics,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Evolutionary approaches for supply chain optimisation. part ii: multi-silo supply chains", "author": ["Maksud Ibrahimov", "Arvind Mohais", "Sven Schellenberg", "Zbigniew Michalewicz"], "venue": "International Journal of Intelligent Computing and Cybernetics,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2012}, {"title": "Routing problems with loading", "author": ["Manuel Iori", "Silvano Martello"], "venue": "constraints. Top,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2010}, {"title": "A meta-heuristic algorithm for heterogeneous fleet vehicle routing problems with two-dimensional loading constraints", "author": ["Stephen CH Leung", "Zhenzhen Zhang", "Defu Zhang", "Xian Hua", "Ming K Lim"], "venue": "European Journal of Operational Research,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2013}, {"title": "Improving efficiency of heuristics for the large scale traveling thief problem", "author": ["Yi Mei", "Xiaodong Li", "Xin Yao"], "venue": "In Simulated Evolution and Learning,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "On investigation of interdependence between sub-problems of the travelling thief problem", "author": ["Yi Mei", "Xiaodong Li", "Xin Yao"], "venue": "Soft Computing,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "A comprehensive benchmark set and heuristics for the traveling thief problem", "author": ["Sergey Polyakovskiy", "Mohammad Reza", "Markus Wagner", "Zbigniew Michalewicz", "Frank Neumann"], "venue": "In Proceedings of the Genetic and Evolutionary Computation Conference (GECCO),", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}, {"title": "Combining vehicle routing and packing for optimal delivery schedules of water tanks", "author": ["Jacob Stolk", "Isaac Mann", "Arvind Mohais", "Zbigniew Michalewicz"], "venue": "OR Insight,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "The travelling thief problem (TTP) is a novel NP-hard problem introduced in [1] to provide a model that better represents real-world problems.", "startOffset": 76, "endOffset": 79}, {"referenceID": 2, "context": "In [3], the authors explain why there is a gap between the work done by the Evolutionary Computation researchers and real-world applications.", "startOffset": 3, "endOffset": 6}, {"referenceID": 6, "context": "Examples of other realistic problems with multiple interdependent sub-problems include most supply chain optimization problems [7], [8], routing problems with loading constraints such as 2L-CVRP and 3L-CVRP [9], [10], [3], and water tank delivery [14].", "startOffset": 127, "endOffset": 130}, {"referenceID": 7, "context": "Examples of other realistic problems with multiple interdependent sub-problems include most supply chain optimization problems [7], [8], routing problems with loading constraints such as 2L-CVRP and 3L-CVRP [9], [10], [3], and water tank delivery [14].", "startOffset": 132, "endOffset": 135}, {"referenceID": 8, "context": "Examples of other realistic problems with multiple interdependent sub-problems include most supply chain optimization problems [7], [8], routing problems with loading constraints such as 2L-CVRP and 3L-CVRP [9], [10], [3], and water tank delivery [14].", "startOffset": 207, "endOffset": 210}, {"referenceID": 9, "context": "Examples of other realistic problems with multiple interdependent sub-problems include most supply chain optimization problems [7], [8], routing problems with loading constraints such as 2L-CVRP and 3L-CVRP [9], [10], [3], and water tank delivery [14].", "startOffset": 212, "endOffset": 216}, {"referenceID": 2, "context": "Examples of other realistic problems with multiple interdependent sub-problems include most supply chain optimization problems [7], [8], routing problems with loading constraints such as 2L-CVRP and 3L-CVRP [9], [10], [3], and water tank delivery [14].", "startOffset": 218, "endOffset": 221}, {"referenceID": 13, "context": "Examples of other realistic problems with multiple interdependent sub-problems include most supply chain optimization problems [7], [8], routing problems with loading constraints such as 2L-CVRP and 3L-CVRP [9], [10], [3], and water tank delivery [14].", "startOffset": 247, "endOffset": 251}, {"referenceID": 12, "context": "An Evolutionary Algorithm and a Random Local Search were proposed in [13] to provide a starting point to other researchers.", "startOffset": 69, "endOffset": 73}, {"referenceID": 1, "context": "In [2], an approach named Cosolver was introduced to solve TTP by separating the sub-problems and managing a communication between them.", "startOffset": 3, "endOffset": 6}, {"referenceID": 10, "context": "Lastly, an interesting work on TTP introduces many complexity reduction techniques in order to solve very large instances in a time budget of 10 minutes [11].", "startOffset": 153, "endOffset": 157}, {"referenceID": 1, "context": "In this paper, we follow the ideas proposed in [2] and [11] to propose further improvements and introduce an algorithm based on the Cosolver framework that can solve TTP instances efficiently.", "startOffset": 47, "endOffset": 50}, {"referenceID": 10, "context": "In this paper, we follow the ideas proposed in [2] and [11] to propose further improvements and introduce an algorithm based on the Cosolver framework that can solve TTP instances efficiently.", "startOffset": 55, "endOffset": 59}, {"referenceID": 0, "context": "As shown in [1], [11], optimizing the sub-problems in isolation (even to optimality) does not guarantee finding good solutions for the overall problem.", "startOffset": 12, "endOffset": 15}, {"referenceID": 10, "context": "As shown in [1], [11], optimizing the sub-problems in isolation (even to optimality) does not guarantee finding good solutions for the overall problem.", "startOffset": 17, "endOffset": 21}, {"referenceID": 1, "context": "Cosolver is an abstract algorithm proposed in [2] to solve TTP.", "startOffset": 46, "endOffset": 49}, {"referenceID": 10, "context": "In this section, we propose an algorithm that implements the Cosolver framework and uses some techniques proposed in [11].", "startOffset": 117, "endOffset": 121}, {"referenceID": 5, "context": "Firstly, the tour is generated using a good TSP algorithm such as the Lin-Kernighan heuristic [6] or the Ant Colony Optimization algorithm [5].", "startOffset": 94, "endOffset": 97}, {"referenceID": 4, "context": "Firstly, the tour is generated using a good TSP algorithm such as the Lin-Kernighan heuristic [6] or the Ant Colony Optimization algorithm [5].", "startOffset": 139, "endOffset": 142}, {"referenceID": 10, "context": "1) The insertion heuristic proposed in [11] is used to fill the knapsack with items according to three fitness approximations.", "startOffset": 39, "endOffset": 43}, {"referenceID": 3, "context": "1) TSKP neighborhood reduction: The Delaunay triangulation [4] is used as a candidate generator for the 2-OPT heuristic.", "startOffset": 59, "endOffset": 62}, {"referenceID": 10, "context": "This strategy was also proposed in [11].", "startOffset": 35, "endOffset": 39}, {"referenceID": 10, "context": "A similar technique named incremental evaluation was proposed in [11].", "startOffset": 65, "endOffset": 69}, {"referenceID": 11, "context": "3) Objective function calculation: The objective function has a complexity of O(m \u2217 n) as proposed in [12], where m is the number of items and n is the number of cities.", "startOffset": 102, "endOffset": 106}, {"referenceID": 12, "context": "We tested our algorithm on 15 TTP instances of various sizes [13].", "startOffset": 61, "endOffset": 65}, {"referenceID": 10, "context": "The good performance of Cosolver2B and the memetic algorithm MALTS on very large scale instances [11] proves the importance of making strong assumptions about the problem domain when dealing with multi-component problems.", "startOffset": 97, "endOffset": 101}], "year": 2016, "abstractText": "978-1-5090-0478-2/15/$31.00 c \u00a92015 IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other uses, in any current or future media, including reprinting/republishing this material for advertising or promotional purposes, creating new collective works, for resale or redistribution to servers or lists, or reuse of any copyrighted component of this work in other works. Abstract\u2014Real-world problems are very difficult to optimize. However, many researchers have been solving benchmark problems that have been extensively investigated for the last decades even if they have very few direct applications. The Traveling Thief Problem (TTP) is a NP-hard optimization problem that aims to provide a more realistic model. TTP targets particularly routing problem under packing/loading constraints which can be found in supply chain management and transportation. In this paper, TTP is presented and formulated mathematically. A combined local search algorithm is proposed and compared with Random Local Search (RLS) and Evolutionary Algorithm (EA). The obtained results are quite promising since new better solutions were found.", "creator": "LaTeX with hyperref package"}}}