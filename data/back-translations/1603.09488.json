{"id": "1603.09488", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-Mar-2016", "title": "Building the Signature of Set Theory Using the MathSem Program", "abstract": "The representation of knowledge is a popular field of research in information technology. Since mathematical knowledge is the most formalized, its representation is important and interesting. Mathematical knowledge consists of various mathematical theories. In this paper we consider a deductive system that derives mathematical terms, axioms and theorems. All these terms, axioms and theorems can be considered as part of elementary set theory, which is presented as a semantic network.", "histories": [["v1", "Thu, 31 Mar 2016 08:41:22 GMT  (815kb)", "http://arxiv.org/abs/1603.09488v1", null]], "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["andrey luxemburg"], "accepted": false, "id": "1603.09488"}, "pdf": {"name": "1603.09488.pdf", "metadata": {"source": "CRF", "title": "Building the Signature of Set Theory Using the MathSem Program", "authors": [], "emails": ["andr_lux@mail.ru"], "sections": [{"heading": null, "text": "mathematical knowledge is most formalized, its representation is important and interesting. Mathematical knowledge consists of various mathematical theories. In this paper we consider a deductive system that derives mathematical notions, axioms and theorems. All these notions, axioms and theorems can be considered a small mathematical theory. This theory will be represented as a semantic net.\nWe start with the signature <Set; > where Set is the support set, is the membership predicate. Using the MathSem program we build the signature <Set;  where is set intersection,  is set union, -is the Cartesian product of sets, and is the subset relation.\nKeywords: Semantic network \u00b7 semantic net\u00b7 mathematical logic \u00b7 set theory \u00b7 axiomatic systems \u00b7 formal systems \u00b7 semantic web \u00b7 prover \u00b7 ontology \u00b7 knowledge representation \u00b7 knowledge engineering \u00b7 automated reasoning"}, {"heading": "1 Introduction", "text": "The term \"knowledge representation\" usually means representations of knowledge aimed to enable automatic processing of the knowledge base on modern computers, in particular, representations that consist of explicit objects and assertions or statements about them. We are particularly interested in the following formalisms for knowledge representation:\n1. First order predicate logic; 2. Deductive (production) systems. In such a system there is a set of initial objects, rules of inference to build new objects from initial ones or ones that are already build, and the whole of initial and constructed objects.\n3. Semantic net. In the most general case a semantic net is an entity-relationship model, i.e., a graph, whose vertices correspond to objects (notions) of the theory and edges correspond to relations between them."}, {"heading": "2 Description of the Project", "text": "In this paper we describe a part of the project and a part of the interactive computer application for automated building of mathematical theories. We define a formal language (close to first-order predicate logic), and a deductive (production) system that builds expressions in this language. There are rules for building new objects from initial (atomic) ones and the ones already built. Objects can be either statement (predicates), or definitions (these could be predicates or truth sets of predicates). These objects are put into vertices of a net (graph). There are several types of relations between objects: logical, syntactic, quantificational, set-theoretical, semantical. The membership predicate is taken as the atomic formula. Rules for building new objects include logical operations (conjunction, disjunction, negation, implication), adding a universal or existential quantifier, and one more rule: building the truth set of a predicate. One can consider symbols denoting predicates and sets, and also the predicates and sets themselves (when an interpretation or model is fixed). One more rule allows substitution of an individual variable or a term for a variable. The execution of the algorithm will result in closed formulae (without free variables), and a collection of such formulae can be considered as a set of axioms of some theory. The question is whether this theory has a model. Further, when we have built a new formula, we can simplify it using term-rewriting rules and logical laws (methods of automated reasoning). In order to prove theorems one can apply wellknown methods of automated reasoning (resolution method, method of analytic tableaux, natural deduction, inverse method), as well as new methods based on the knowledge of \u00abatomic\u00bb structure of the formula (statement) that we are trying to prove. For a new formula written in the formal language a human expert (mathematician) can translate it into \u00abnatural\u00bb language (Russian, English etc.), thus we obtain a glossary of basic notions of the system. More complicated formulae are translated into natural language using an algorithm and the glossary. There are several approaches of constructing mathematics: set-theoretical, constructive (algorithmic), topos theory etc. Mathematical logic is also part of metamathematics. Thus, one can consider various logics (intuitionistic, modal etc.) when constructing mathematical theories. The deductive system constructed here is based on classical first-order predicate logic. The initial object is the membership predicate, and the derivations result into mathematical notions and theorems. The computer program (algorithm) builds formulae from atomic ones (makes the semantic net of the derivation). In our systems we take formulae (strings) as vertices of the semantic net. Formulae can be predicates or mathematical objects. The principal relations between elements of the net are those that correspond to the method of obtaining an element (a vertice or an object) of the net from others. If a formula is obtained as the union of two others, then it is connected with those two formulae with the inheritance (parent \u2014 child) relation. Another relation is established between a mathematical object and the predicate from which this object was generated (as the truth set of this predicate), though we could have given it the same name. In the case of substitution of objects into predicates and making unions of objects the corresponding relations are established, and they correspond to links between objects (formulae). Relations in the net can be classified\nas semantical, syntactic, logical, set-theoretical and quantificational. A syntax relation is a subformula relation. Logical relations include disjunction, conjunction, negation, implication, equality. Set-theoretical relations define relations between objects as sets. Quantificational relations are classified by the quantifier used (universal or existential). We shall use an approach to knowledge representation that links together traditional notions of semantic nets in the procedural approach framework. One option is to formulate the semantics of nets in terms of classical logic. But the semantics of classical logics doesn't reflect data representation issues. E. g., there is no difference between a rule of inference that can be used, and the rule of inference that should be used. Another option is to formulate the semantics of nets by means of programs (algorithms). In this case the semantics include the notion of behavior w.r.t. some operations. This is so called procedural semantics. Any data representation should interact with the program at some level. In systems based on the notion of semantic net, where nets are considered as data structures, one usually builds an interpreter for modifying the structure and extracting answers to queries."}, {"heading": "3 Deductive (Production) Systems", "text": "By a deductive (production) system we understand a triple\nDS=< , , >, where is a set of initial objects, are rules for building new\nobjects, and is the set of objects constructed,\n:\nExamples: <axioms, rules of inference, theorems>,\n<a line segment; Cartesian product, sewing by the border; a square, a torus, a\nsphere, etc.>.\n4 Definability and Expressibility\nFrom predicate logic we shall use the notions of predicate, satisfiable, true and false formulae, and interpretation.\nThe question of definability was first mentioned in A. Padoa's works in connection with relations between Euclidean and non-Euclidean geometries. Later the notion of definability was introduced by A. Tarski. Craig's interpolation theorem and Beth's theorem played an important role in definability theory. Craig and Beth in their works demonstrated a close relation between the notions of definability and derivability. As a result, a series of important questions concerning definability were reduced to wellknown problems of the theory of logical derivation.\nConsider a given first-order signature and its interpretation on a set D. We are going to define the notion of definable (using formulae from the given signature in the given interpretation) k-ary predicate.\nChoose k variables . Consider an arbitrary formula P, such that all its parameters belong to the list . The truth value of this formula depends\nsolely on truth values of variables . Thus, we obtain a mapping , i. e., a k-ary predicate on D. This predicate is called the predicate expressed by formula P. Predicates that can be expressed in this way are called expressible. A predicate P on set D is called expressible via predicates , ..., on , if we can construct a statement that contains only , , ..., and is true if an only if P is true. Of course, besides these predicates we can use logical connectives and quantifiers.\nAny k-ary predicate ( , ) (where are free variables) defines a set M, which contains only such tuples that ( , ) is true. This set is usually denoted by\nM( ):={ | ( , )}\nand is called \"the set of all such that ( , )\". M is the truth set of the predicate.\n5 Description of Deductive System of MathSem\nNotations\n-variables for elements of sets; - variables for sets; denote predicates; ,\n-denote sets of mathematical objects; /\\ (&), \\/, , => - logical connectives; -universal quantifier; - existential quantifier; -denotes membership; stands for a tuple; { } is a set defined by explicitly listing all its elements.\nHere we define objects derivable in the deductive system. They are either formulae\nthat denote predicates, or formulae that describe mathematical objects (notions).\nThe symbol \":=\" (a colon and the equality symbol) is considered as a metasymbol. The main idea. We have the membership predicate. Consider predicates that can be\ndefined via the membership predicate, and truth sets of these predicates.\nThe following formulae are considered atomic: ( ) Rules for building new formulae:\n1. Negation:\n2. Grouping with logical connectives: ,\n3. Quantification: for any free variable x in predicate one can build new predicates :=( Pi, Pk:= x Pi 4. Consider a finite number of variables: . One can construct a string it is a triple of variables. 5. Building a mathematical object (notion). Consider a predicate ( (here are free variables,). One can build the set M( ):={ | ( , )} It is the truth set of the predicate.\nM( ) ( , ) or\n( ( ( , )  6. Substitution of variables. We can substitute variables in predicate P or object M.\nSince mathematical objects are actually sets, we can substitute them for variables into predicates.\nNote that the interpretations plays an important role here. Different interpretations give different semantic values for predicates and different truth sets. To avoid logical paradoxes one can introduce a hierarchy of sets (B. Russel's simple type theory); another option is to choose rules of building new sets that do not allow possible paradoxes."}, {"heading": "6 Software Description", "text": "We build semantic nets using the VUE (Visual Understanding Environment) program, written in an American university and freely distributed. The MathSem program itself is being written by Vitaly Tatarintsev. As for now, only syntax is implemented, the work on semantics is in progress. Only parent-son relations take place.\nIn this program, complicated formulae are built from atomic ones \u00abmanually\u00bb. The formulae built can be saved in a Word file along with their descriptions. One can also upload formulae from a Word file. Below one can find an example of building circa 30 formulae. Notably, all the signature of set theory is built from formulae with length (number of atomic formulae) not greater than two."}, {"heading": "N \u0424\u043e\u0440\u043c\u0443\u043b\u0430 / Formula \u041e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435/", "text": ""}, {"heading": "7 Table with result formulae.", "text": "Starting from the predicate of membership, we have obtained inclusion, intersection, union, complement, relative complement, Cartesian product of sets, subset relation, powerset.\n<Set; <Set;  We have built all the signature of set theory from the membership predicate in a combinatorial way. Usually in a first order language the signature is fixed in the beginning, so here we extend our language."}, {"heading": "8 Connection between Predicates and Mathematical Objects", "text": "Using the fifth rule one can build a predicate from a set and a set from a\npredicate.\nGiven the definitions of union, intersection, and Cartesian product of sets, one\ncan prove the following:\n1. If M1={A1| P1(A1,\u2026, Ak)} and M2={B1| P2(B1,\u2026, Bm)},\nthen M1xM2={<A1,B1>| P1(A1,\u2026,Ak)P2(B1,\u2026, Bm)}\n2. If M1={A1| P1(A1,\u2026, Ak)} and M2={A1| P2(A1,\u2026,Am)},\nthen M1M2={A1| P1(A1,\u2026Ak)P2(A1,\u2026, Am)}\n3. If M1={A1| P1(A1,\u2026, Ak)} and M2={A1| P2(A1,\u2026, Am)},\nthen M1M2={A1| P1(A1,\u2026, Ak)P2(A1,\u2026, Am)}.\nWe have built a semantic net of notions and statements of set theory. It is interesting to understand the connections between our system and ZFC. Some axioms of ZFC are syntactically derivable in our theory."}], "references": [{"title": "Languages and Calculi (in Russian), MCCME", "author": ["K. Vereshchagin N", "A. Shen"], "venue": "Moscow", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2008}, {"title": "Exact and Plausible Reasoning in Intellectual Systems (in Russian)", "author": ["N. Vagin V", "Yu. Golovina E", "A. Zagoryanskaya A", "V. Fomina M"], "venue": "Fizmatlit, Moscow,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2004}, {"title": "Local Set Theory", "author": ["K. Zakharov V."], "venue": "Math. Notes, Vol. 77, Issue 1-2, pp. 177\u2013193.Moscow", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2005}, {"title": "Mathematical Logic (in Russian)", "author": ["A. Lavrov I."], "venue": "Academia, Moscow", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2006}, {"title": "Automated Construction of Mathematical Theories (in Russian)", "author": ["A. Luxemburg A."], "venue": "Editorial URSS, Moscow", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "Handbook of Automated Reasoning (in 2 volumes)", "author": ["Robinson J.A.", "Voronkov A. (Eds."], "venue": "Elsevier and MIT Press", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2001}, {"title": "Theory of Deductive Systems and its Applications (in Russian)", "author": ["Maslov S. Yu."], "venue": "Radio i svyaz, Moscow", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1986}, {"title": "An intellectual reference system for geometry (in Russian).In", "author": ["T. Davydenko I", "A. Zhitko V", "S. Zalivako S", "N. Koronchik D", "G. Moshenko S", "Yu. Savelyeva O", "S. Startsev S", "V Shunkevich D"], "venue": "Proc. of OSTIS-2011,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}], "referenceMentions": [], "year": 2014, "abstractText": "Knowledge representation is a popular research field in IT. As mathematical knowledge is most formalized, its representation is important and interesting. Mathematical knowledge consists of various mathematical theories. In this paper we consider a deductive system that derives mathematical notions, axioms and theorems. All these notions, axioms and theorems can be considered a small mathematical theory. This theory will be represented as a semantic net. We start with the signature <Set; > where Set is the support set, \uf02dis the membership predicate. Using the MathSem program we build the signature <Set; \uf020\uf03e\uf020\uf02c\uf020\uf020\uf020\uf020 where \uf020\uf02d\uf020is set intersection,\uf020 \uf02d is set union, -is the Cartesian product of sets, and \uf02d\uf020is the subset relation.", "creator": "Microsoft\u00ae Word 2010"}}}