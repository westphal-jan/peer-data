{"id": "1604.00536", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Apr-2016", "title": "Improving SAT Solvers via Blocked Clause Decomposition", "abstract": "The Decision Variable Selection Policy used by the most competitive CDCL (Conflict-Driven Clause Learning) SAT solvers is either VSIDS (Variable State Independent Decaying Sum) or its variants such as the exponential version EVSIDS. The common characteristic of VSIDS and its variants is the use of statistical information in the solution process, but ignores structural information of the problem. For this reason, this paper modifies the Decision Variable Selection Policy and presents a BCD (Blocked Clause Decomposition) based SAT solution technique. Its basic idea is that part of the decision variables are heuristically selected by VSIDS, while another part of the decision variables are selected by BCD-based technology. Compared with the existing BCD-based technique, our technique is simple and does not need to decode CNF formulas again. SAT solvers for certified UNSAT statistics can also use our BCD-based technology.", "histories": [["v1", "Sat, 2 Apr 2016 17:50:32 GMT  (30kb)", "http://arxiv.org/abs/1604.00536v1", "9 pages, 1 figure"]], "COMMENTS": "9 pages, 1 figure", "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["jingchao chen"], "accepted": false, "id": "1604.00536"}, "pdf": {"name": "1604.00536.pdf", "metadata": {"source": "CRF", "title": "Improving SAT Solvers via Blocked Clause Decomposition", "authors": ["Jingchao Chen"], "emails": ["chen-jc@dhu.edu.cn"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 4.\n00 53\n6v 1\n[ cs\n.L O\n] 2\nA pr\nKeywords: CDCL SAT solver, Blocked Clause Decomposition, Decision variable selection policy"}, {"heading": "1 Introduction", "text": "The SAT solving technology has made great progress in recent years. A number of state-of-the-art SAT solvers have come to the fore. Nevertheless, a great number of SAT problems remain unsolved yet. How to improve further SAT solvers is still a very important topic.\nRecently, Balyo et al [3] reported that reencoding CNF (Conjunctive Normal Form) formulas by BCD (Blocked Clause Decomposition) can improve the performance of the state-of-the-art CDCL (Conflict-Driven Clause Learning) SAT solvers such as Lingeling [6]. The basic idea behind this technique is to define multiple versions for each variable through reencoding the original CNF formula. The version number of variables depends on blocked subsets obtained by a decomposition algorithm. A blocked set is defined to be a set of clauses that can\n2 be removed completely by BCE (Blocked Clause Elimination) [10]. It is easy to verify that any CNF formula can be decomposed into two blocked subsets. Due to this property, any CNF formula can be reencoded into a new CNF formula in the order where clauses occur in blocked subsets. According to the experiments of Balyo et al [3], some reencoded application benchmarks are indeed easier to be solved than the original ones. For a part of hard application benchmarks, the reencoding starts to pay off after 3500 seconds. The main drawback of the reencoding technique is that UNSAT problems solved by it cannot be certified, since there is no automatic method for recognizing whether the original benchmark and the reencoded benchmark are identical or not. Therefore, the BCD-based reencoding is not suitable for SAT solvers that are used for the certified UNSAT track.\nThis paper aims at improving the performance of SAT solvers by BCD. In general, a CDCL SAT solver consists of components such as decision variable selection, Boolean constraint propagation, learnt clause database reduction, restart etc. This paper focuses how to improve the decision variable selection policy of CDCL solvers. Unlike the reencoding approach by Balyo et al [3], we do not reencode CNF formulas, but use blocked sets to guide the selection of a few decision variables. Up to now, the decision variable selection policy used by the most competitive CDCL SAT solvers is based on either VSIDS (Variable State Independent Decaying Sum) [11] or its variants such as EVSIDS (exponential VSIDS) [9,5], VMTF (variable move-to-front), ACIDS (average conflict-index decision score) [4]. The common characteristic of VSIDS and its variants is to make use of statistical information in the solving process, but ignore structural information of the problem. The empirical evaluation of Biere et al [4] shows that EVSIDS, VMTF, and ACIDS empirically perform equally well. Therefore, we believe that improving the performance of SAT solvers by only modifying VSIDS leads difficultly to a breakthrough. For this reason, we decide to use structure information obtained by BCD to optimize the decision variable selection policy. Our basic idea is that a part of the decision variables are selected by VSIDS heuristic, while another part of the decision variables are selected by blocked subsets that are obtained by BCD. Solver abcdSAT [8], which is built on the top of Glucose 2.3 [1,2], is the first to optimize the variable selection policy with BCD, and won the Gold Medal of the main track of SAT Race 2015 [12]. From the result of SAT Race 2015, the BCD-based variable selection policy improved indeed the performance of this solver. This paper identifies further such an evaluation. The original abcdSAT applied the BCD-based technique only for small instances, not for large instances. Thus, at SAT Race 2015, no solver solved a large instance group mulr. However, if the BCD-based technique is used also for large instances in the initial phase of search, group mulr can be solved in 105.2 seconds by abcdSAT. Our BCD-based technique need not reencoding. Its advantage is that solvers entering certified UNSAT track can apply directly it also.\n3"}, {"heading": "2 Preliminaries", "text": "In this section, after the definition of some notations, we introduce the basic principle of a modern CDCL SAT solver, on which the improvement will be made in Section 4.\nA formula in CNF is defined as a conjunction of clauses, where each clause is a disjunction of literals, each literal being either a Boolean variable or its negation. Usually, the logic form of a clause C is written as C = x1 \u2228 \u00b7 \u00b7 \u00b7 \u2228 xm, where xi(1 \u2264 i \u2264 m) is a literal. A clause with only one literal is called a unit clause or unit literal. A CNF formula F is written as F = C1 \u2227 \u00b7 \u00b7 \u00b7 \u2227 Cn, where Ci(1 \u2264 i \u2264 n) is a clause.\nGiven two clauses C1 = l\u2228 a1 \u2228 \u00b7 \u00b7 \u00b7 \u2228 am and C2 = l\u0304\u2228 b1 \u2228 \u00b7 \u00b7 \u00b7 \u2228 bn, the clause C = a1\u2228\u00b7 \u00b7 \u00b7\u2228am\u2228 b1\u2228\u00b7 \u00b7 \u00b7\u2228 bn is called the resolvent of C1 and C2 on the literal l, which is denoted by C = C1\u2297lC2.\nThe so-called blocked clause can be defined formally as follows. Given a CNF formula F , a clause C, a literal l \u2208 C is said to block C w.r.t. F if (i) C is a tautology w.r.t. l, or (ii) for each clause C\u2032 \u2208 F with l\u0304 \u2208 C\u2032, the resolvent C\u2032\u2297lC is a tautology. When l blocks C w.r.t. F , the literal l and the clause C are called a blocking literal and a blocked clause, respectively.\nIn general, a CDCL SAT solver consists of unit propagation, variable activity based heuristic, literal polarity phase, clause learning, restarts and a learnt clause database reduction policy etc. Here is the core framework of a CDCL SAT solver.\nAlgorithm CDCL solver repeat the following steps\nif !propagate() then if (c = conflictAnalyze()) == \u2205 then return UNSAT add c to learnt clause database backtrack to the assertion level of c else if (l = pickBranchLit()) == null then return SAT assert literal l in a new decision level\nIn the above algorithm, Procedure propagate performs unit propagation, i.e., assigns repeatedly each unit literal to true until the formula F has no unit clause under the current model. When this procedure yields a conflict, a new asserting clause c is derived by Procedure conflictAnalyze. If the derived clause c is empty, then the formula F is unsatisfiable. Otherwise, it is added to the learnt clause database, and the algorithm backtracks to the assertion level of the learnt clause c, i.e., the level where the learnt clause becomes unit. If unit propagation does not generate the empty clause, Procedure pickBranchLit begins to select a new decision literal l. If such a literal is selected successfully, it is asserted in a new decision level. Otherwise, the formula is answered to be satisfiable. Throughout this paper, Procedure pickBranchLit is assumed to use the EVSIDS heuristic to select a literal with the highest score.\n4"}, {"heading": "3 Related Work", "text": "In theory, any CNF formula can be decomposed into two blocked subsets such that both can be solved by BCE (Blocked Clause Elimination). Therefore, we can assume that one blocked set of a CNF formula is C1 \u2227C2 \u2227 \u00b7 \u00b7 \u00b7 \u2227Cm, where Ci (i = 1, 2, . . . ,m) is a clause. Balyo et al [3] reencode each clause Ci so that the reencoded formula is solved more easily than the original formula. Their reencoding may be described as follows. Each blocking literal xi is allowed to have several versions. In the order of Cm, Cm\u22121 . . . , C1, each of its versions is defined. Assuming that clause Ct has the form of Ct = xi \u2228 yj1 \u2228 \u00b7 \u00b7 \u00b7 \u2228 yjk , where xi is the blocking literal. Let xi,$ be the current version of xi. Its next version is defined as follows.\nxi,$+1 := xi,$ \u2228 (yj1,$ \u2227 \u00b7 \u00b7 \u00b7 \u2227 yjk,$)\nThen this formula is converted to CNF. Clearly, since a blocking literal is mapped to multiple version variables, such a reencoding technique will add a vast amount of auxiliary variables. As far as we know, so far no solver entering SAT competition (Race) used such a reencoding technique."}, {"heading": "4 Decision Variable Selection Policy Based on Blocked Clause Decomposition", "text": "In this section we describe a new SAT solving technique, which is based on BCD. Apart from the reencoding technique of Balyo et al, to avoid using auxiliary variables, our BCD-based solving policy does not reencode the original CNF formula, but uses blocked subsets to guide the selection of decision variables. The reencoding technique of Balyo et al is to how to convert a CNF formula into one which is easily solved, but does not modify any SAT solver. Nevertheless, our BCD-based solving technique is to modify a SAT solver. Assuming that a CNF formula is decomposed into a large blocked subset L and a small blocked subset S. The reencoding technique uses each blocked subset separately, while we use them by appending S to L. For convenience, let L\u2227S = C1\u2227C2\u2227\u00b7 \u00b7 \u00b7\u2227Cn, where Ci (i = 1, 2, . . . , n) is a clause, and the order of clauses in L and S is opposite to that in which clauses are eliminated by BCE. We use the locations where variables occur in L\u2227S for the first time to determine decision variable selection at some levels in the pickBranchLit procedure of a CDCL solver. Let pos[v] denote the minimum index where variable v occur in C1\u2227C2\u2227\u00b7 \u00b7 \u00b7\u2227Cn. Ignoring the priority of clauses, the position indexes of variables may be computed as follows.\nfor each variable v do pos[v] = 0 for i = 1 to n do\nfor each variable v \u2208 Ci do if pos[v] = 0 then pos[v] = i\n5 In our real implementation, the priority of binary clauses is higher than that of the other clauses. That is to say, if there exist non-binary clause Cj and binary clause Ck that both contain v, and there is no binary clause Ci (i < k) containing v, pos[v] is set to k even if j < k. Hence, the exact expression of pos[v] may be described as follows.\npos(v) =\n\n\n argmin{v \u2208 Ci \u2227 |Ci| = 2} \u2203i|Ci| = 2 argmin{v \u2208 Ci} \u2200i|Ci| 6= 2 0 otherwise\nUsing pos[v], procedure pickBranchLit of CDCL SAT solvers may be modified as follows.\nAlgorithm pickBranchLit if current level \u2208 {1, 2, 3} \u2227#conf < \u03b8 then\nLet v be decision variable at 0 level S \u2190 \u2205 for i = pos[v] to pos[v] + 5 do\nif Ci is satisfied then continue S \u2190 S \u222a Ci\nif S 6= \u2205 then return literal l \u2208 S with EVSID-based highest score return literal l \u2208 F with EVSID-based highest score\nAt whichever decision level, the algorithm selects always a literal l with the highest score computed by EVSID. At the 1st \u2013 3rd decision level, the selection range is limited to S, which is a subset of formula F , while at the other levels, it is F , not subset S, i.e., there is no limitation. According to our experiments, it is a good choice that only those three levels adopt the BCD-based decision variable selection policy. In the above pseudo-code, #conf denote the number of conflicts. In general, \u03b8 is set to 30000 for large instances, and 500000 for small instances. We use condition #conf < \u03b8 to limit the application range of the BCD-based policy. When selecting a decision variable at the 1st \u2013 3rd level, we consider at most 6 clauses Ci (pos[v] \u2264 i \u2264 pos[v] + 5) in the order of the blocked clauses, where v is a decision variable at the 0-th level. Among these candidate clauses, we pick a literal with the EVSID-based highest score as a decision literal. Whenever a part of variables are fixed, our solver runs a simplification procedure. In general, after the simplification procedure, we can obtain a blocked set that is different from the initial blocked set. However, to save the cost of computing repeatedly the blocked set, we do not update pos[v]. In other words, what we used is the initial pos[v] (blocked set), not the updated pos[v]. From this viewpoint, our BCD-based policy is static, not dynamic."}, {"heading": "5 Empirical evaluation", "text": "We evaluated the performance of SAT solving with BCD and without BCD under the following experimental platform: Intel Core 2 Quad Q6600 CPU with speed of 2.40GHz and 2GB memory.\n6\n7 In this experiment, to verify the efficiency of the BCD-based policy, we use solver abcdSAT [8], the winner of the main track of SAT Race 2015, which is built on the top of the CDCL solver Glucose 2.3. BCD algorithm used is a recently proposed algorithm called MixDecompose [7], The source code of MixDecompose is available at http://github.com/jingchaochen/MixBcd. As an advantage, MixDecompose can ensure that the decomposition of any instance is done within 200 seconds. And its decomposition quality keeps high still. Here, the decomposition quality is measured by |L||F | , where |L| and |F | denote the number of clauses in the large blocked set and the original formula, respectively. Table 1 shows the runtime of abcdSAT with four different modes (versions). The timeout for each solver to solve each instance was set to 5000 seconds. Mode no BCD denotes that abcdSAT doest not use any BCD-based policy. All the other three modes are based on BCD. The difference among these three modes is that the values of \u03b8 in condition #conf < \u03b8 in algorithm pickBranchLit are different. Let n and m denotes the number of clauses and variables in formula F , respectively. \u03b8 is set as follows.\nMode BCD1:\n\u03b8 =\n{\n0 n > 15\u00d7 105 \u2228m > 5\u00d7 105 6\u00d7 106 otherwise\nMode BCD2:\n\u03b8 =\n\n\n\n0 n > 5\u00d7 106 \u2228m > 15\u00d7 105 \u2228 n < 2m 30000 above is false \u2227m > 5\u00d7 105 5\u00d7 105 otherwise\nMode BCD3:\n\u03b8 =\n\n  \n  \n0 n>5\u00d7106\u2228m>15\u00d7105\u2228n<2m\u2228n>30m 30000 above is false \u2227m > 5\u00d7 105 6\u00d7106 above is false \u2227m \u2265 1600\u2227m \u2264 15000 5\u00d7105 otherwise\nMode BCD1 is actually the SAT-Race 2015\u2019s version of abcdSAT. In Table 1, Column |F | denotes the number of clauses in formula F in thousands of clauses. Here F is a formula simplified by the preprocessing of abcdSAT, not the original input formula. #var denotes the number of variables in F . Column S/U indicates whether an instance is SAT or UNSAT. Table 1 lists all the application benchmarks from SAT Race 2015 where the performance of four modes is inconsistent, except the first one from SAT Competition 2014. For benchmarks that are not listed in Table 1, either all the four modes solved them or no mode solved them in 5000 seconds. As seen in Table 1, the solvers with BCD are better than the solver without BCD. The performance of Mode BCD3 is the best. It solved 7 more instances than the mode without BCD. Mode BCD3 solved group mulr in 105.2 seconds. This instance was not solved by any\n8 solver in the SAT Race 2015. Notice, the SAT-Race 2015\u2019s version of abcdSAT adopted the BCD policy only for small instances, not for large instances such as group mulr. In addition, no MiniSat-style solver solved korf-18. Our BCD-based version solved easily it.\nFigure 1 shows a cactus plot related to the comparison of abcdSAT with and without BCD. In this comparison experiment, all 300 instances tested are from the main track at the SAT Race 2015. Here the BCD mode used is Mode BCD3. As seen in the cactus plot, when the given amount of time is small, the solver with BCD has no advantage. However, when it is plenty large enough, the solver with BCD solved more instances than the solver without BCD."}, {"heading": "6 Conclusions", "text": "In this paper, we presented a BCD-based improvement strategy on SAT solvers, which is different from that of Balyo et al [3]. Common to the two strategies is that they start to pay off after sufficiently long time. If a given amount of time is very short, there is no improvement on SAT solvers. Compared with the approach of Balyo et al, our approach is simple, need not reencoding, and has no application limit. In addition, the BCD-based reencoding of Balyo et al is a preprocessing, while our BCD-based mode is a solving strategy.\nThe decision variable selection is a very important component of CDCL SAT solvers. Our BCD-based variable selection policy solved an instance that was not solved by any solvers so far. However, it seems to be suited only for a part of instances. What is the optimal variable selection policy after all? This is a problem which is well worth looking into further. The current version of our BCD-based strategy is static. However, in the usual sense, dynamic is better than static. It is left as an open problem how to make the BCD-based strategy dynamic."}], "references": [{"title": "Predicting learnt clauses quality in modern sat solvers", "author": ["G. Audemard", "L. Simon"], "venue": "Proceedings of IJCAI", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2009}, {"title": "Glucose 2.3 in the sat 2013 competition", "author": ["G. Audemard", "L. Simon"], "venue": "Proceedings of the SAT Competition 2013,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Everything you always wanted to know about blocked sets (but were afraid to ask)", "author": ["T. Balyo", "A. Fr\u00f6hlich", "M.J.H. Heule", "A. Biere"], "venue": "SAT", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Evaluating cdcl variable scoring schemes, SAT 2015", "author": ["A. Biere", "A. Fr\u00f6hlich"], "venue": "LNCS 9340,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Adaptive restart strategies for conflict driven sat solvers", "author": ["A. Biere"], "venue": "SAT 2008,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Lingeling, plingeling and treengeling entering the sat competition", "author": ["A. Biere"], "venue": "Proceedings of SAT Competition", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Fast blocked clause decomposition with high quality, 2015, http://arxiv.org/abs/1507.00459", "author": ["J.C. Chen"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "MiniSAT BCD and abcdSAT: solvers based on blocked blause decomposition", "author": ["J.C. Chen"], "venue": "Proceedings of SAT Race", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "An extensible sat-solver", "author": ["N. E\u00e9n", "N. S\u00f6rensson"], "venue": "SAT 2003,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2004}, {"title": "Simulating circuit-level simplifications on cnf", "author": ["M. J\u00e4rvisalo", "A. Biere", "M.J.H. Heule"], "venue": "Journal of Automated Reasoning 49(4),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}, {"title": "Chaff: Engineering an Efficient SAT Solver", "author": ["M.W. Moskewicz", "C.F. Madigan", "Y. Zhao", "L.T. Zhang", "S. Malik"], "venue": "Design Automation Conference (DAC)", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2001}], "referenceMentions": [{"referenceID": 2, "context": "Recently, Balyo et al [3] reported that reencoding CNF (Conjunctive Normal Form) formulas by BCD (Blocked Clause Decomposition) can improve the performance of the state-of-the-art CDCL (Conflict-Driven Clause Learning) SAT solvers such as Lingeling [6].", "startOffset": 22, "endOffset": 25}, {"referenceID": 5, "context": "Recently, Balyo et al [3] reported that reencoding CNF (Conjunctive Normal Form) formulas by BCD (Blocked Clause Decomposition) can improve the performance of the state-of-the-art CDCL (Conflict-Driven Clause Learning) SAT solvers such as Lingeling [6].", "startOffset": 249, "endOffset": 252}, {"referenceID": 9, "context": "be removed completely by BCE (Blocked Clause Elimination) [10].", "startOffset": 58, "endOffset": 62}, {"referenceID": 2, "context": "According to the experiments of Balyo et al [3], some reencoded application benchmarks are indeed easier to be solved than the original ones.", "startOffset": 44, "endOffset": 47}, {"referenceID": 2, "context": "Unlike the reencoding approach by Balyo et al [3], we do not reencode CNF formulas, but use blocked sets to guide the selection of a few decision variables.", "startOffset": 46, "endOffset": 49}, {"referenceID": 10, "context": "Up to now, the decision variable selection policy used by the most competitive CDCL SAT solvers is based on either VSIDS (Variable State Independent Decaying Sum) [11] or its variants such as EVSIDS (exponential VSIDS) [9,5], VMTF (variable move-to-front), ACIDS (average conflict-index decision score) [4].", "startOffset": 163, "endOffset": 167}, {"referenceID": 8, "context": "Up to now, the decision variable selection policy used by the most competitive CDCL SAT solvers is based on either VSIDS (Variable State Independent Decaying Sum) [11] or its variants such as EVSIDS (exponential VSIDS) [9,5], VMTF (variable move-to-front), ACIDS (average conflict-index decision score) [4].", "startOffset": 219, "endOffset": 224}, {"referenceID": 4, "context": "Up to now, the decision variable selection policy used by the most competitive CDCL SAT solvers is based on either VSIDS (Variable State Independent Decaying Sum) [11] or its variants such as EVSIDS (exponential VSIDS) [9,5], VMTF (variable move-to-front), ACIDS (average conflict-index decision score) [4].", "startOffset": 219, "endOffset": 224}, {"referenceID": 3, "context": "Up to now, the decision variable selection policy used by the most competitive CDCL SAT solvers is based on either VSIDS (Variable State Independent Decaying Sum) [11] or its variants such as EVSIDS (exponential VSIDS) [9,5], VMTF (variable move-to-front), ACIDS (average conflict-index decision score) [4].", "startOffset": 303, "endOffset": 306}, {"referenceID": 3, "context": "The empirical evaluation of Biere et al [4] shows that EVSIDS, VMTF, and ACIDS empirically perform equally well.", "startOffset": 40, "endOffset": 43}, {"referenceID": 7, "context": "Solver abcdSAT [8], which is built on the top of Glucose 2.", "startOffset": 15, "endOffset": 18}, {"referenceID": 0, "context": "3 [1,2], is the first to optimize the variable selection policy with BCD, and won the Gold Medal of the main track of SAT Race 2015 [12].", "startOffset": 2, "endOffset": 7}, {"referenceID": 1, "context": "3 [1,2], is the first to optimize the variable selection policy with BCD, and won the Gold Medal of the main track of SAT Race 2015 [12].", "startOffset": 2, "endOffset": 7}, {"referenceID": 2, "context": "Balyo et al [3] reencode each clause Ci so that the reencoded formula is solved more easily than the original formula.", "startOffset": 12, "endOffset": 15}, {"referenceID": 7, "context": "In this experiment, to verify the efficiency of the BCD-based policy, we use solver abcdSAT [8], the winner of the main track of SAT Race 2015, which is built on the top of the CDCL solver Glucose 2.", "startOffset": 92, "endOffset": 95}, {"referenceID": 6, "context": "BCD algorithm used is a recently proposed algorithm called MixDecompose [7], The source code of MixDecompose is available at http://github.", "startOffset": 72, "endOffset": 75}, {"referenceID": 2, "context": "In this paper, we presented a BCD-based improvement strategy on SAT solvers, which is different from that of Balyo et al [3].", "startOffset": 121, "endOffset": 124}], "year": 2016, "abstractText": "The decision variable selection policy used by the most competitive CDCL (Conflict-Driven Clause Learning) SAT solvers is either VSIDS (Variable State Independent Decaying Sum) or its variants such as exponential version EVSIDS. The common characteristic of VSIDS and its variants is to make use of statistical information in the solving process, but ignore structure information of the problem. For this reason, this paper modifies the decision variable selection policy, and presents a SAT solving technique based on BCD (Blocked Clause Decomposition). Its basic idea is that a part of decision variables are selected by VSIDS heuristic, while another part of decision variables are selected by blocked sets that are obtained by BCD. Compared with the existing BCD-based technique, our technique is simple, and need not to reencode CNF formulas. SAT solvers for certified UNSAT track can apply also our BCD-based technique. Our experiments on application benchmarks demonstrate that the new variables selection policy based on BCD can increase the performance of SAT solvers such as abcdSAT. The solver with BCD solved an instance from the SAT Race 2015 that was not solved by any solver so far. This shows that in some cases, the heuristic based on structure information is more efficient than that based on statistical information.", "creator": "LaTeX with hyperref package"}}}