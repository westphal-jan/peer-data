{"id": "1606.02193", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "7-Jun-2016", "title": "Adapting Sampling Interval of Sensor Networks Using On-Line Reinforcement Learning", "abstract": "The time between two consecutive measurements is a crucial parameter to set during the WSN configuration because it can affect the lifetime of the WSN, the assertion of the wireless medium and the quality of the reported data. As trends in the monitored parameters can vary significantly between scenarios and within time, it is also difficult to determine a sampling interval that is suitable for several cases. In this work, we propose a dynamic sampling rate matching scheme based on amplification learning and able to adjust the sampling interval of the sensors on-the-fly according to environmental conditions and application requirements. In simulations, our mechanism could set the total number of transmissions to the best possible value, to avoid oversampling and save energy, without missing ambient changes that may be relevant for the application. In simulations, our mechanism could reduce the total number of transmissions in comparison to a fixed transmission strategy provided simultaneously with Internet flexibility by enhancing the transmission strategy.", "histories": [["v1", "Tue, 7 Jun 2016 16:01:16 GMT  (91kb,D)", "http://arxiv.org/abs/1606.02193v1", "6 pages, 2 figures, submitted to the IEEE World Forum on Internet of Things 2016"], ["v2", "Tue, 12 Jul 2016 16:11:58 GMT  (87kb,D)", "http://arxiv.org/abs/1606.02193v2", "6 pages, 2 figures, submitted to the IEEE World Forum on Internet of Things 2016"]], "COMMENTS": "6 pages, 2 figures, submitted to the IEEE World Forum on Internet of Things 2016", "reviews": [], "SUBJECTS": "cs.NI cs.LG cs.SY", "authors": ["gabriel martins dias", "maddalena nurchis", "boris bellalta"], "accepted": false, "id": "1606.02193"}, "pdf": {"name": "1606.02193.pdf", "metadata": {"source": "CRF", "title": "Adapting Sampling Interval of Sensor Networks Using On-Line Reinforcement Learning", "authors": ["Gabriel Martins Dias", "Maddalena Nurchis", "Boris Bellalta"], "emails": ["boris.bellalta}@upf.edu"], "sections": [{"heading": null, "text": "Keywords-Machine Learning; Wireless Sensor Networks; Autonomic Computing, Performance Optimization;\nI. INTRODUCTION\nThe broad adoption of wireless sensor nodes for environmental monitoring purposes happened not only because of their capacity of sensing and transmitting (via radio) several environmental parameters, but especially thanks to their low production costs. In fact, their low production costs are a result of limited resources, such as battery and memory, which have boosted a great deal of research work aimed at extending their lifetime without affecting their most valuable asset: the sensed data.\nIn monitoring Wireless Sensor Networks (WSNs), the sensor nodes\u2019 sampling interval is crucial for generating highquality data. The data quality is reduced when the interval between two measurements is not sufficiently short to report significant changes in the monitored parameters, or if it is too short and report several similar (and, consequently, unimportant) successive values. Furthermore, a sampling interval set under some conditions may occasionally become too short (or too long) within time, due to the environment\u2019s evolution. Additionally, besides the data quality, the sampling interval affects the wireless medium access and stirs up network\ncongestion, end-to-end delays and sensor nodes\u2019 energy consumption. In conclusion, the sampling interval configuration must focus on the trade-off between data quality and resource savings.\nIn this work, we propose an on-line sampling interval adaptation scheme. Our mechanism relies on real-time analysis of the data produced by sensor nodes in order to dynamically adapt the WSN operation to the current environmental conditions. Our main goal is to guarantee the minimum number of transmissions needed to not lose valuable environmental data. To achieve that, we aim to keep the maximum difference between two consecutive measurement values below a threshold, which is set according to the application needs.\nWe formally represent the scenario of a monitoring WSN through the reinforcement learning model, and apply a QLearning algorithm in order to learn the most suitable sampling intervals under different conditions, without a-priori model of the environment\u2019s evolution. The learning agent may be placed in the cloud, in a central gateway or in each sensor, according to the resource constraints. The scope of our work is to evaluate the algorithm and observe factors that impact its performance, whereas analyzing the performance difference between a centralized or a distributed solution is left for future work.\nThe rest of the paper is organized as follows: Section II describes the basics about reinforcement learning; Section III enumerates related works that adopted reinforcement learning to optimize sensor networks at different layers, and those that focused on avoiding unnecessary transmissions without losing important changes in the environment; Section IV formulates the problem of adapting the sensor nodes\u2019 sampling interval as a reinforcement learning problem; Section V explains how we generated controlled scenarios and experimental results; Section VI shows experimental results of the reinforcement learning technique applied to real datasets; Section VII shows our conclusions and ideas for future work."}, {"heading": "II. BACKGROUND - REINFORCEMENT LEARNING", "text": "Reinforcement Learning (RL) is a machine learning technique that allows an agent to automatically determine a system\u2019s optimal behavior to achieve its goal [1]. Such an optimal behavior is based on the positive and negative feedbacks received from the environment after taking certain actions.\nar X\niv :1\n60 6.\n02 19\n3v 1\n[ cs\n.N I]\n7 J\nun 2\n01 6\nAssuming that interactions between the agent and the environment occur at a sequence of discrete time instant t, a RL model is defined by:\n\u2022 a set of possible observations O that the agent may make, such that ot \u2208 O is the observation made at time t; \u2022 a set of states S, such that the state st \u2208 S is observed at time t; \u2022 a set of actions A, such that the action at \u2208 A is taken at time t; \u2022 a state transition function T (st, at, st+1) that calculates the probability of making a transition from st to st+1 after performing at; and \u2022 a set of rules that determine the scalar immediate reward rt+1 = R(st, at), which scales the goodness of taking at in st.\nEach state should satisfy the Markov property1, that is, to be independent of any state or action previous to time t. An RL agent aims to obtain the maximum long-term reward for an Markov Decision Process environment, even when the model of the environment is unknown or difficult to learn. The strategy adopted to maximize the long-term reward defines the agent\u2019s way of behaving at a certain time and is called a policy."}, {"heading": "A. Q-Learning", "text": "Q-Learning is an RL algorithm that does not depend on a state transition function to work. More precisely, the algorithm relies on an optimal action-value function Q(s, a), which value is the estimated reward of executing a in s, assuming that the agent will always follow the policy that provides the maximum long-term reward.\nAt any state st, a selected action at determines the transition to the state st+1 and the value associated to the pair (st, at) is updated:\nQt+1(st, at) = \u03b1 ( rt+1 + \u03b3max\na Qt(st+1, a)\u2212Qt(st, at) ) +Qt(st, at),\n(1)\nwhere st+1 and rt+1 are the state and reward, respectively, obtained after performing at in st, the learning rate \u03b1 \u2208 [0, 1] is a positive step-size parameter, and the discount factor \u03b3 \u2208 [0, 1] is used to determine the weight of future rewards. If \u03b3 = 0, the agent will behave so as to maximize its immediate reward, even if this would imply a lower long-term return.\nBy visiting several times each (s, a) pair, the agent learns which is the action that gives the best long-term reward in each state. Hence, if the number of states is high, the algorithm takes longer and requires more data to find the best action for each state, i.e., to converge. Therefore, it is very important to have a concise representation of the environment, thus to define the set of states according to the goals of the algorithm and do not include unnecessary information. In short, the set of states should illustrate only and all the characteristics that are relevant for the problem under consideration.\n1RL can be also applied to cases that do not satisfy the Markov property [1]"}, {"heading": "III. RELATED WORK", "text": "Several works have already adopted reinforcement learning techniques at various layers to improve wireless networks\u2019 performance. In [2], the authors proposed a self-adaptive routing framework for wireless mesh networks. Using the Q-Learning algorithm, it was possible, in runtime, to select the most proper routing protocol from a pre-defined set of options and successfully increase the average data throughput in comparison to static techniques. Other examples of the use of reinforcement learning techniques in sensor networks include locating mobile sensor nodes [3] and aggregating sensed data [4].\nWSNs are mainly composed by wireless sensor nodes that make measurements and transmit them to a Gateway (GW). There are many solutions to reduce their number of transmissions, which include clustering, data aggregation and data prediction. In [5], the authors suggest that future measurements can be predicted by sensor nodes and GWs. Therefore, sensor nodes only transmit a measurement if they observe that the prediction is not correct, i.e., the real measurement differs by more than a certain threshold from the predicted value. The success of this technique highly depends on the capacity of the sensor nodes to compute efficient prediction methods that will accurately predict future values. However, sensor nodes usually have very limited computing capacities and must rely on GWs to regularly generate and transmit new predictions. Moreover, GWs and sensor nodes must share the same knowledge, which requires additional control messages and reduce the benefit of decreasing measurement transmissions, especially if predictions are not sufficiently accurate.\nIn [6], the authors propose an approach to answer queries in GWs without fetching the data directly from sensor nodes. The Principal Component Analysis method was used to analyze historical data and select only the sensor nodes that measured most of the variance observed in the environment. This technique reduced the workload of the sensor nodes and reduced up to 50% the number of transmissions, according the results obtained from experiments in real testbeds. However, the authors do not define how the environment\u2019s evolution would be addressed. For example, if the temperature varies more often during the day, it would be necessary more measurements from more sensor nodes during these hours to build datasets that reliably describe the environment.\nOur work does not necessarily rely on the computational capacity of sensor nodes or GWs, because the incorporation of WSNs into the IoT allows the use of external entities and cloud computing services that can perform powerful machine learning techniques over sensed data, if needed [7]. To the best of our knowledge, this is the first approach that dynamically adapts the sampling interval of the sensor nodes based on a reinforcement learning technique."}, {"heading": "IV. ADAPTIVE SAMPLING AS A REINFORCEMENT LEARNING PROBLEM", "text": "In this Section, we formulate the adaptive sampling interval problem as a reinforcement learning problem. For this work,\nwe take as a reference the real scenario of a WSN with several nodes measuring temperature values in an office [8]. From this real dataset, we use a sub-set of measurements in the preliminary analysis presented in Section IV-B, and a different sub-set in the performance evaluation in Section VI (missing values were interpolated and added to a small white noise). Moreover, as the sensors of this scenario were set to sample temperature nearly every 30 seconds, we set this as the shortest sampling interval, and let the range of possible sampling intervals be(i) 30 seconds; (ii) 60 seconds; (iii) 120 seconds; or (iv) 240 seconds.\nA valuable adaptive sampling algorithm should systematically setup the most proper sampling interval so as to guarantee the best quality-resource trade-off under the current environmental conditions. As for the quality, we define the goal of the agent in terms of an accepted threshold \u03c4 . The algorithm should avoid that the absolute difference between consecutive measurements exceeds a pre-defined value (\u03c4 ), which is configured according to the monitoring application requirements. Meanwhile, higher sampling intervals are preferred to reduce the number of transmissions and, consequently, the energy consumption in sensor nodes.\nIn our experiments, we consider the number of transmissions as a general measure of resource optimization, which is also valuable in scenarios with energy constraints. For space limitation, we can not include other metrics that may be more relevant in specific scenarios, such as the energy saved by reducing report transmissions or by increasing the idle time of the sensor nodes."}, {"heading": "A. Observations", "text": "First, we define wireless sensor nodes as the source of the observations made by an agent. Observations may vary, among other parameters, between temperature, relative humidity and solar radiation. In our scenario example, an observation ot is the temperature measured at time t."}, {"heading": "B. States", "text": "To properly define the set of possible states, we make a preliminary evaluation of part of the data collected by the WSN, in order to identify characteristics that have high correlation with our goal. Such characteristics are transformed into predictors, and a Random Forest [9] is built to classify in which periods of time each sampling interval would make consecutive measurements that differ by less than \u03c4 .\nIn this process, we use the data from 3 different sensor nodes sampled every 30 seconds for 3 days. To simulate different\nsampling intervals, we removed intermediate measurements and, after analyzing the generated data, the value of \u03c4 was set to 0.02oC. Using this value, a sampling interval of 120 seconds would be sufficient to observe a difference of less than \u03c4 in nearly one half of the time. Furthermore, sampling intervals of 30, 60 and 240 seconds would be sufficient to observe a difference of less than \u03c4 in, respectively, approximately 73.2%, 59.2% and 26.1% of the time. Note that we do not expect to measure fast enough to make all measurements differ by less than \u03c4 , but we know that there are many cases in which sensors do not have to sample every 30 seconds to achieve it.\nFinally, we annotate each measurement with the characteristics shown in Table I and build a Random Forest to observe the most relevant factors to predict if a measurement will differ by less than \u03c4 from the previous one (i.e., q = true). Based on the results obtained using the Random Forest algorithm and considering the importance of keeping a small number of states, we defined the set of states for our RL model as a combination of quality, sampling interval and a verification of whether it is a working hour or not (see table I) . Thus, each state is defined by a tuple: {q, s, \u03c9}. In short, as we are looking for states that will be used by different sensor nodes, we ignored any factor that was less important than the node ID to predict the quality of the measurements and those that would represent a significant increase in the number of states, such as the hour of the day."}, {"heading": "C. Actions and transitions", "text": "In the adaptive sampling interval problem, actions are used to control the sensor nodes\u2019 sampling interval. An action can be specific, such as \u201cset the sampling interval to 30 seconds\u201d, or more abstract, like \u201cincrease the sampling interval\u201d requiring the new sampling interval to be calculated based on the last one set. In order to avoid abrupt changes provoked by occasional outliers and noise in the data, we adopt only \u201csmooth\u201d actions, i.e., they only move to neighboring states. Therefore, an action a can take one of the following values:(i) increase the sampling interval; (ii) keep the sampling interval; or (iii) reduce the sampling interval."}, {"heading": "D. Reward", "text": "A reward is a mathematical representation of the gains obtained after reacting to the environment with a certain action. In our case, after changing the sampling interval to a new value, while in s. As the reward defines the target of the algorithm, in our problem, it should ensure that the difference between consecutive measurements is less than \u03c4 , while not oversampling.\nThe algorithm adopted for the reward is based on the rate of transmissions avoided. For instance, if the sampling interval is 120 seconds, the sensor node is transmitting 4 times less than if it was 30 seconds. In this case, therefore, the original reward would be set to 4. Then, if the absolute difference between two consecutive measurements (\u03b4) is less than \u03c4 , we assume that the sampling interval is small enough to not lose significant changes in the environment and take the original reward. If \u03b4\nis smaller than one half of \u03c4 , the sampling interval might be doubled, so we multiply the original reward by 1.5. Otherwise, if \u03b4 is greater than \u03c4 , the sampling interval is too long and the reported data may be missing important changes in the environment. In this case, we multiply the original reward by \u22121."}, {"heading": "V. SYNTHETIC SCENARIOS", "text": "To check the feasibility of using RL as a means of intelligently adapting sampling intervals, we simulate its use in artificial and realistic scenarios. In this Section, we present the simplest scenarios, using synthetic data with evident characteristics, such as large and significant (versus small and negligible) variations in a short period of time. Having control over the data characteristics allows us to first verify if the RL algorithm decides for the most proper actions in different scenarios. Later, we analyze the impact of the values of learning rate \u03b1 and discount factor \u03b3 on the time that the agent needs to reach the most proper state, when it occurs."}, {"heading": "A. Fixed expectations", "text": "We generated 6 synthetic scenarios in which we have control about the sampling intervals that the algorithm should set. In these datasets, the difference between consecutive measurements is proportional to \u03c4 . For instance, if the difference between two consecutive measurements made in a period of 60 seconds is always smaller than \u03c4 , setting the sampling interval to 30 or 60 seconds is sufficient to satisfy the requirements of quality, but setting it to 60 seconds is preferred, because it reduces the number of transmissions, in comparison with the 30 seconds interval.\nIn the Controlled 30 dataset, the difference between subsequent measurements made in an interval of 30 seconds between each other is always 110% of \u03c4 . In practice, even the smallest sampling interval (30 seconds) is not sufficient to provide measurements in which consecutive values differ by less than \u03c4 . Therefore, the agent must define the ideal sampling interval as 30 seconds to reduce as much as possible the\n2Without considering datasets Controlled 30 and Controlled 240.\nquality loss. Note that in this particular scenario, a difference between subsequent values higher than the maximum threshold is unavoidable. Therefore, we do not consider this dataset when reporting the percentage of measurements over \u03c4 .\nIn the Controlled 60, Controlled 120 and Controlled 240 datasets, the difference between subsequent measurements made in an interval of 30 seconds between each other is respectively 47.5% 23.75% and 10% of \u03c4 . Hence, 60, 120 and 240 seconds are respectively the largest possible sampling intervals such that the sensor node will never report a difference greater than \u03c4 . Hence, the agent must define the ideal sampling interval respectively to 60, 120 and 240 seconds in each scenario. Note that, antagonistically to the Controlled 30 dataset, in Controlled 240, successive measurements never have an absolute difference higher than the maximum threshold. Therefore, we also do not consider this dataset when reporting the percentage of measurements over \u03c4 .\nTo observe the impact of \u03b1 and \u03b3 in the decisions taken by the agent, we observe how long the Q-Learning algorithm takes to decide for the correct sampling interval. We call this period as convergence time, and we assume that the agent has converged to a final value if the sampling interval does not change in, at least, 75% of the future decisions. The reported values are the average of all considered scenarios.\nIn our simulations, the average convergence time was less than 2000 seconds (around 33 minutes) only in 6 cases and nearly 10 times longer in the remaining. We highlight, as WSNs are usually long-term deployments that last for months (or years), the period of 1 day (or less) spent to find the most proper sampling intervals represents less than 1% of their average lifetime. Table II shows the combinations with the 10 lowest average convergence times, the percentage of times that the agent took a wrong decision (using the expected sampling interval as a reference) and the percentage of consecutive measurements that differed by more than \u03c4 . Half of these combinations had high \u03b1 (i.e., \u03b1 \u2208 {0.8, 0.9}) and low \u03b3 (i.e., \u03b3 \u2208 {0.1, 0.2}), which means that the agent performs better when its decisions are mostly based on the current status of the environment and little importance is given to future estimated rewards. In practice, it shows that if a certain action resulted in high rewards in the day before, it will not necessarily result in high rewards in the future due to the environment\u2019s evolution."}, {"heading": "B. Moving expectations", "text": "In real world applications, the environment may be constantly changing and evolving, requiring that agents never stop to learn, because there might not exist an answer that stands forever as the most proper one. To synthesize these situations, we generated 3 datasets that are combinations of the Controlled datasets presented before. Finally, we simulate 4 days in which the agent should converge to a new value each day, updating its previous belief. In practice, these scenarios will show how good is the algorithm to keep learning from the environment\u2019s evolution, even after a decision has been already taken.\nThe sequence of expected sampling intervals varies in each dataset. In Evolving I, the sampling interval that satisfies \u03c4 evolves in the sequence: 30 seconds in the first day, 60 seconds in the second day, 120 seconds in the third day and 240 seconds in the last day. In Evolving II, the most proper sequence of sampling intervals is 240, 120, 60 and 30 seconds. In Evolving III, the most proper sequence of sampling intervals is 60, 120, 240 and 30 seconds.\nTo evaluate the impact of \u03b1 and \u03b3 on how fast the Q-Learning algorithm can adapt to changes in the environment, we observe the average convergence time among different days. Again, the convergence time is defined as the initial period that the agent takes to decide for the correct sampling interval and does not change in, at least, 75% of the future decisions. The reported values are the daily average of all considered scenarios.\nTable III shows the 3 parameter combinations that took less than 16 hours to converge on every simulated day, and the respective percentage of the agent\u2019s decisions that were wrongly taken. Recall that, in these\u2013more realistic\u2013scenarios, the conditions change every 24 hours. Therefore, everyday the agent revisits states and updates its knowledge to set the most proper sampling intervals, which increases the time necessary to converge: on average, at least 4.5 hours more than in the previous simulations. Once again, a high \u03b1 (namely, \u03b1 = 0.9) combined with low \u03b3 (i.e., \u03b3 \u2208 {0.1, 0.2, 0.5}) is the best option to reduce the average time that the agent takes to converge to the most proper sampling interval value, considering that the environment is continuously evolving."}, {"heading": "VI. REAL WORLD SCENARIOS", "text": "In real world scenarios, the environment is constantly changing and there are external (uncontrolled) factors that impact the measurements. To simulate that, we adopted real measurements collected during 5 days by 5 wireless sensor nodes and set 0.02oC as the value of \u03c4 , using the strategy explained in Section IV-B. These measurements were collected in the same experiment we considered to setup the states in Section IV-B, but now we use data from different nodes.\nTo illustrate the results, we assume that during the first 12 hours, the Q-Learning algorithm \u201ccalibrates\u201d the action-value function, i.e., it tries to visit all state-action pairs to estimate the long-term rewards that each action would provide in each state. Therefore, we consider only the results observed in the last 4.5 simulated days.\nAs before, we observed how the values of \u03b1 and \u03b3 impact the quality of the measurements and the number of wireless transmissions in a sensor node. However, differently from the synthetic scenarios, it is not possible to define the expected values in real world situations. The main reason is that the environment is constantly changing and evolving, besides external factors that produce noise and change the environment itself. Indeed, this is the core motivation of this work and what requires the design of a solution that can adaptively adjust sensor nodes\u2019 sampling intervals."}, {"heading": "A. Number of transmissions", "text": "In our experiments, the number of transmissions in a sensor node achieves its maximum when the sampling interval is 30 seconds and its minimum when the sampling interval is 240 seconds. Intuitively, setting the sampling interval to 60, 120 and 240 seconds represents a reduction of respectively 50%, 75% and 87.5% in the maximum number of transmissions.\nFigure 1 illustrates how many transmissions could be saved when the Q-Learning was adopted to adjust the sensor node\u2019s sampling interval. In this plot, we consider that the QLearning agent triggers one extra transmission every time a new sampling interval is set. In the best case, the number of transmissions can be reduced to up to 72.57% of its maximum, when \u03b1 = 0.8 and \u03b3 = 0.1. As observed in our preliminary results, the highest savings happen when \u03b1 is high (i.e., \u03b1 \u2208 {0.7, 0.8, 0.9}) and \u03b3 is low (i.e., \u03b3 \u2208 {0.1, 0.2, 0.3}). That is, when the agent learns mostly from recent environment feedback and minimally from the expected reward. We highlight the importance of setting proper values to \u03b1 and \u03b3, given that most of the cases do not reduce by more than 15% the maximum number of transmissions."}, {"heading": "B. Efficiency", "text": "Figure 2 shows the percentage of consecutive measurements that differ by more than \u03c4 . To help the understanding of the magnitude of the errors, we added four baselines that represent\nthe rates that would be observed if the sampling intervals were fixed, based on the same data used in the simulations. Again, the best results happen in scenarios using higher \u03b1 (i.e., \u03b1 \u2208 {0.7, 0.8, 0.9}) and lower \u03b3 (i.e., \u03b3 \u2208 {0.1, 0.2, 0.3}).\nIn the best result (\u03b1 = 0.9 and \u03b3 = 0.1), the rate of measurements over \u03c4 is similar to the scenario with a fixed sampling interval of 30 seconds. With the sampling interval fixed to 30 seconds, we observed 16509 pairs of consecutive measurements that differed by more than \u03c4 with an average of 0.063oC. Using Q-Learning, we observed 13679 pairs of consecutive measurements that differed by more than \u03c4 , which differed by 0.078oC on average.\nThese small values strengthen the relevance of the reduction in the number of transmissions shown above, because they show that the avoided transmissions are, in fact, worthless in this scenario. In conclusion, a real application that adopted Q-Learning with \u03b1 = 0.9 and \u03b3 = 0.1 would have saved around 65% of its transmissions and observed an average of 0.024oC in the absolute difference between two consecutive measurements."}, {"heading": "VII. CONCLUSION", "text": "In this work, we adopted a Reinforcement Learning (RL) technique called Q-Learning to adjust the sampling interval of sensor nodes according to the expected changes in the environment. After explaining how the adaptive sampling can be formulated as a machine learning problem and showing that the environment\u2019s evolution can impact our algorithm, we evaluated the reduction in the number of transmissions and the quality of the reported data. We presented the steps to setup the algorithm (i.e., states, actions and reward) in a way that can be further exploited in several scenarios.\nIn our simulations, we could avoid nearly 73% of transmissions in the best combination of parameters for the Q-Learning algorithm. Observing the quality of the reported data, we noticed that the proposed mechanism keeps similar quality\nto what would be observed if the smallest sampling interval was adopted. Assuming that the radio transmissions are the main cause of energy consumption in monitoring WSNs, this solution may lead to significant savings in any scenario with wireless sensor nodes. Furthermore, the reduction in the number of transmissions can support WSNs to admit more sensor nodes, increasing their range and generating more knowledge about the monitored area. This mechanism can be combined with other approaches to further optimize resource usage, such as data aggregation and data compression.\nWe conclude that the use of a RL algorithm to control sensor nodes\u2019 sampling intervals can be very profitable. Furthermore, we highlight that the proper choice of its parameters (\u03b1 and \u03b3) can significantly impact the results. For instance, in our experiments, higher values of \u03b1 (i.e., \u03b1 \u2208 {0.8, 0.9}) and lower values of \u03b3 (i.e., \u03b3 \u2208 {0.1, 0.2}) provided the best cost-benefit in the \u201csaved transmissions\u201d-\u201chigh quality\u201d relationship. In our future work, we plan to implement the mechanism presented here to control the sampling interval of wireless sensor nodes in a real deployment."}, {"heading": "ACKNOWLEDGMENT", "text": "This work has been partially supported by the Catalan Government through the project SGR-2014-1173 and by the European Union through the project FP7-SME-2013-605073ENTOMATIC."}], "references": [{"title": "Introduction to Reinforcement Learning, 1st ed", "author": ["R.S. Sutton", "A.G. Barto"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1998}, {"title": "A self-adaptive routing paradigm for wireless mesh networks based on reinforcement learning", "author": ["M. Nurchis", "R. Bruno", "M. Conti", "L. Lenzini"], "venue": "Proceedings of the 14th ACM international conference on Modeling, analysis and simulation of wireless and mobile systems. ACM, 2011, pp. 197\u2013204.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2011}, {"title": "Dynamic path determination of mobile beacons employing reinforcement learning for wireless sensor localization", "author": ["S. Li", "X. Kong", "D. Lowe"], "venue": "Advanced Information Networking and Applications Workshops (WAINA), 2012 26th International Conference on. IEEE, 2012, pp. 760\u2013 765.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Adaptive and Learning Agents: Second Workshop, ALA 2009, Held as Part of the AAMAS 2009 Conference in Budapest, Hungary", "author": ["M. Mihaylov", "K. Tuyls", "A. Now\u00e9"], "venue": "May 12,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2009}, {"title": "Adaptive model selection for time series prediction in wireless sensor networks", "author": ["Y.-A. Le Borgne", "S. Santini", "G. Bontempi"], "venue": "Signal Processing, vol. 87, no. 12, pp. 3010\u20133020, Dec. 2007.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2007}, {"title": "A methodology to optimize query in wireless sensor networks using historical data", "author": ["H. Malik", "A.S. Malik", "C.K. Roy"], "venue": "Journal of Ambient Intelligence and Humanized Computing, vol. 2, no. 3, pp. 227\u2013238, Jun. 2011.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "A self-managed architecture for sensor networks based on real time data analysis", "author": ["G.M. Dias", "T. Adame", "B. Bellalta", "S. Oechsner"], "venue": "submitted to the Future Technologies Conference 2016. IEEE, May 2016. [Online]. Available: http://arxiv.org/abs/1605.09011", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2016}, {"title": "Intel lab data", "author": ["S. Madden"], "venue": "http://db.lcs.mit.edu/labdata/labdata.html, Jun. 2004.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2004}, {"title": "Random forests", "author": ["L. Breiman"], "venue": "Machine learning, pp. 1\u201333, 2001.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2001}], "referenceMentions": [{"referenceID": 0, "context": "Reinforcement Learning (RL) is a machine learning technique that allows an agent to automatically determine a system\u2019s optimal behavior to achieve its goal [1].", "startOffset": 156, "endOffset": 159}, {"referenceID": 0, "context": "where st+1 and rt+1 are the state and reward, respectively, obtained after performing at in st, the learning rate \u03b1 \u2208 [0, 1] is a positive step-size parameter, and the discount factor \u03b3 \u2208 [0, 1] is used to determine the weight of future rewards.", "startOffset": 118, "endOffset": 124}, {"referenceID": 0, "context": "where st+1 and rt+1 are the state and reward, respectively, obtained after performing at in st, the learning rate \u03b1 \u2208 [0, 1] is a positive step-size parameter, and the discount factor \u03b3 \u2208 [0, 1] is used to determine the weight of future rewards.", "startOffset": 188, "endOffset": 194}, {"referenceID": 0, "context": "1RL can be also applied to cases that do not satisfy the Markov property [1] III.", "startOffset": 73, "endOffset": 76}, {"referenceID": 1, "context": "In [2], the authors proposed a self-adaptive routing framework for wireless mesh networks.", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "Other examples of the use of reinforcement learning techniques in sensor networks include locating mobile sensor nodes [3] and aggregating sensed data [4].", "startOffset": 119, "endOffset": 122}, {"referenceID": 3, "context": "Other examples of the use of reinforcement learning techniques in sensor networks include locating mobile sensor nodes [3] and aggregating sensed data [4].", "startOffset": 151, "endOffset": 154}, {"referenceID": 4, "context": "In [5], the authors suggest that future measurements can be predicted by sensor nodes and GWs.", "startOffset": 3, "endOffset": 6}, {"referenceID": 5, "context": "In [6], the authors propose an approach to answer queries in GWs without fetching the data directly from sensor nodes.", "startOffset": 3, "endOffset": 6}, {"referenceID": 6, "context": "Our work does not necessarily rely on the computational capacity of sensor nodes or GWs, because the incorporation of WSNs into the IoT allows the use of external entities and cloud computing services that can perform powerful machine learning techniques over sensed data, if needed [7].", "startOffset": 283, "endOffset": 286}, {"referenceID": 7, "context": "we take as a reference the real scenario of a WSN with several nodes measuring temperature values in an office [8].", "startOffset": 111, "endOffset": 114}, {"referenceID": 8, "context": "Such characteristics are transformed into predictors, and a Random Forest [9] is built to classify in which periods of time each sampling interval would make", "startOffset": 74, "endOffset": 77}], "year": 2017, "abstractText": "Monitoring Wireless Sensor Networks (WSNs) are composed by sensor nodes that report temperature, relative humidity and other environmental parameters. The time between two successive measurements is a critical parameter to set during the WSN configuration, because it can impact the WSN\u2019s lifetime, the wireless medium contention and the quality of the reported data. As trends in monitored parameters can significantly vary between scenarios and within time, identifying a sampling interval suitable for several cases is also challenging. In this work, we propose a dynamic sampling rate adaptation scheme based on reinforcement learning, able to tune sensors\u2019 sampling interval on-the-fly, according to environmental conditions and application requirements. The main goal is to set the sampling interval to the best value possible so as to avoid oversampling and save energy, while not missing environmental changes that can be relevant for the application. In simulations, our mechanism could reduce up to 73% the total number of transmissions compared to a fixed strategy and, simultaneously, keep the average quality of information provided by the WSN. The inherent flexibility of the reinforcement learning algorithm facilitates its use in several scenarios, so as to exploit the broad scope of the Internet of Things. Keywords-Machine Learning; Wireless Sensor Networks; Autonomic Computing, Performance Optimization;", "creator": "LaTeX with hyperref package"}}}