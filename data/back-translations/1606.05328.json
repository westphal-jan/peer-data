{"id": "1606.05328", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jun-2016", "title": "Conditional Image Generation with PixelCNN Decoders", "abstract": "This paper examines conditional image generation with a new image density model based on the PixelCNN architecture. The model can be conditioned on any vector, including descriptive labels or tags, or latent embedding by other networks. If conditioned on class labels from the ImageNet database, the model generates diverse, realistic scenes representing different animals, objects, landscapes, and structures. If built on an embedding generated by a folding network on a single image of an invisible face, it creates a variety of new portraits of the same person with different facial expressions, poses, and lighting conditions. We also show that conditional PixelCNN can serve as a powerful decoder in an image auto encoder to generate. In addition, the gated convolutional layers in the proposed model greatly improve the logic probability of PixelCNN to match the state-of-the-the-art performance of PixelRNN on image processing costs with reduced image density.", "histories": [["v1", "Thu, 16 Jun 2016 19:40:56 GMT  (3016kb,D)", "http://arxiv.org/abs/1606.05328v1", null], ["v2", "Sat, 18 Jun 2016 15:44:24 GMT  (3016kb,D)", "http://arxiv.org/abs/1606.05328v2", null]], "reviews": [], "SUBJECTS": "cs.CV cs.LG", "authors": ["a\u00e4ron van den oord", "nal kalchbrenner", "lasse espeholt", "koray kavukcuoglu", "oriol vinyals", "alex graves"], "accepted": true, "id": "1606.05328"}, "pdf": {"name": "1606.05328.pdf", "metadata": {"source": "CRF", "title": "Conditional Image Generation with PixelCNN Decoders", "authors": ["A\u00e4ron van den Oord"], "emails": ["avdnoord@google.com", "nalk@google.com", "vinyals@google.com", "espeholt@google.com", "gravesa@google.com", "korayk@google.com"], "sections": [{"heading": "1 Introduction", "text": "Recent advances in image modelling with neural networks [30, 26, 20, 10, 9, 28, 6] have made it feasible to generate diverse natural images that capture the high-level structure of the training data. While such unconditional models are fascinating in their own right, many of the practical applications of image modelling require the model to be conditioned on prior information: for example, an image model used for reinforcement learning planning in a visual environment would need to predict future scenes given specific states and actions [17]. Similarly image processing tasks such as denoising, deblurring, inpainting, super-resolution and colorization rely on generating improved images conditioned on noisy or incomplete data. Neural artwork [18, 5] and content generation represent potential future uses for conditional generation.\nThis paper explores the potential for conditional image modelling by adapting and improving a convolutional variant of the PixelRNN architecture [30]. As well as providing excellent samples, this network has the advantage of returning explicit probability densities (unlike alternatives such as generative adversarial networks [6, 3, 19]), making it straightforward to apply in domains such as compression [32] and probabilistic planning and exploration [2]. The basic idea of the architecture is to use autoregressive connections to model images pixel by pixel, decomposing the joint image distribution as a product of conditionals. Two variants were proposed in the original paper: PixelRNN, where the pixel distributions are modeled with two-dimensional LSTM [7, 26], and PixelCNN, where they are modelled with convolutional networks. PixelRNNs generally give better performance, but PixelCNNs are much faster to train because convolutions are inherently easier to parallelize; given the vast number of pixels present in large image datasets this is an important advantage. We aim to\nar X\niv :1\n60 6.\n05 32\n8v 1\n[ cs\n.C V\n] 1\n6 Ju\ncombine the strengths of both models by introducing a gated variant of PixelCNN (Gated PixelCNN) that matches the log-likelihood of PixelRNN on both CIFAR and ImageNet, while requiring less than half the training time.\nWe also introduce a conditional variant of the Gated PixelCNN (Conditional PixelCNN) that allows us to model the complex conditional distributions of natural images given a latent vector embedding. We show that a single Conditional PixelCNN model can be used to generate images from diverse classes such as dogs, lawn mowers and coral reefs, by simply conditioning on a one-hot encoding of the class. Similarly one can use embeddings that capture high level information of an image to generate a large variety of images with similar features. This gives us insight into the invariances encoded in the embeddings \u2014 e.g., we can generate different poses of the same person based on a single image. The same framework can also be used to analyse and interpret different layers and activations in deep neural networks."}, {"heading": "2 Gated PixelCNN", "text": "PixelCNNs (and PixelRNNs) [30] model the joint distribution of pixels over an image x as the following product of conditional distributions, where xi is a single pixel:\np(x) = n2\u220f i=1 p(xi|x1, ..., xi\u22121). (1)\nThe ordering of the pixel dependencies is in raster scan order: row by row and pixel by pixel within every row. Every pixel therefore depends on all the pixels above and to the left of it, and not on any of other pixels. The dependency field of a pixel is visualized in Figure 1 (left).\nA similar setup has been used by other autoregressive models such as NADE [14] and RIDE [26]. The difference lies in the way the conditional distributions p(xi|x1, ..., xi\u22121) are constructed. In PixelCNN every conditional distribution is modelled by a convolutional neural network. To make sure the CNN can only use information about pixels above and to the left of the current pixel, the filters of the convolution are masked as shown in Figure 1 (middle). For each pixel the three colour channels (R, G, B) are modelled successively, with B conditioned on (R, G), and G conditioned on R. This is achieved by splitting the feature maps at every layer of the network into three and adjusting the centre values of the mask tensors. The 256 possible values for each colour channel are then modelled using a softmax.\nPixelCNN typically consists of a stack of masked convolutional layers that takes an N x N x 3 image as input and produces N x N x 3 x 256 predictions as output. The use of convolutions allows the predictions for all the pixels to be made in parallel during training (all conditional distributions from Equation 1). During sampling the predictions are sequential: every time a pixel is predicted, it is\nfed back into the network to predict the next pixel. This sequentiality is essential to generating high quality images, as it allows every pixel to depend in a highly non-linear and multimodal way on the previous pixels."}, {"heading": "2.1 Gated Convolutional Layers", "text": "PixelRNNs, which use spatial LSTM layers instead of convolutional stacks, have previously been shown to outperform PixelCNNs as generative models [30]. One possible reason for the advantage is that the recurrent connections in LSTM allow every layer in the network to access the entire neighbourhood of previous pixels, while the region of the neighbourhood available to pixelCNN grows linearly with the depth of the convolutional stack. However this shortcoming can largely be alleviated by using sufficiently many layers. Another potential advantage is that PixelRNNs contain multiplicative units (in the form of the LSTM gates), which may help it to model more complex interactions. To amend this we replaced the rectified linear units between the masked convolutions in the original pixelCNN with the following gated activation unit:\ny = tanh(Wk,f \u2217 x) \u03c3(Wk,g \u2217 x), (2)\nwhere \u03c3 is the sigmoid non-linearity, k is the number of the layer, is the element-wise product and \u2217 is the convolution operator. We call the resulting model the Gated PixelCNN. Feed-forward neural networks with gates have been explored in previous works, such as highway networks [25], grid LSTM [13] and neural GPUs [12], and have generally proved beneficial to performance."}, {"heading": "2.2 Blind spot in the receptive field", "text": "In Figure 1 (top right), we show the progressive growth of the effective receptive field of a 3 \u00d7 3 masked filter over the input image. Note that a significant portion of the input image is ignored by the masked convolutional architecture. This \u2018blind spot\u2019 can cover as much as a quarter of the potential receptive field (e.g., when using 3x3 filters), meaning that none of the content to the right of the current pixel would be taken into account.\nIn this work, we remove the blind spot by combining two convolutional network stacks: one that conditions on the current row so far (horizontal stack) and one that conditions on all rows above (vertical stack). The arrangement is illustrated in Figure 1 (bottom right). The vertical stack, which does not have any masking, allows the receptive field to grow in a rectangular fashion without any blind spot, and we combine the outputs of the two stacks after each layer. Every layer in the horizontal stack takes as input the output of the previous layer as well as that of the vertical stack. If we had connected the output of the horizontal stack into the vertical stack, it would be able to use information about pixels that are below or to the right of the current pixel which would break the conditional distribution.\nFigure 2 shows a single layer block of a Gated PixelCNN. We combine Wf and Wg in a single (masked) convolution to increase parallelization. As proposed in [30] we also use a residual connection [11] in the horizontal stack. We have experimented with adding a residual connection in the vertical stack, but omitted it from the final model as it did not improve the results in our initial experiments. Note that the (n\u00d7 1) and (n\u00d7 n) masked convolutions in Figure 2 can also be implemented by (dn2 e \u00d7 1) and (d n 2 e \u00d7 n) convolutions followed by a shift in pixels by padding and cropping."}, {"heading": "2.3 Conditional PixelCNN", "text": "Given a high-level image description represented as a latent vector h, we seek to model the conditional distribution p(x|h) of images suiting this description. Formally the conditional PixelCNN models the following distribution:\np(x|h) = n2\u220f i=1 p(xi|x1, ..., xi\u22121,h). (3)\nWe model the conditional distribution by adding terms that depend on h to the activations before the nonlinearities in Equation 2, which now becomes:\ny = tanh(Wk,f \u2217 x+ V Tk,fh) \u03c3(Wk,g \u2217 x+ V Tk,gh), (4)\nwhere k is the layer number. If h is a one-hot encoding that specifies a class this is equivalent to adding a class dependent bias at every layer. Notice that the conditioning does not depend on the location of the pixel in the image; this is appropriate as long as h only contains information about what should be in the image and not where. For example we could specify that a certain animal or object should appear, but may do so in different positions and poses and with different backgrounds.\nWe also developed a variant where the conditioning function was location dependent. This could be useful for applications where we do have information about the location of certain structures in the image embedded in h. By mapping h to a spatial representation s = m (h) (which has the same width and height as the image but may have an arbitrary number of feature maps) with a deconvolutional neural network m(), we obtain a location dependent bias as follows:\ny = tanh(Wk,f \u2217 x+ Vk,f \u2217 s) \u03c3(Wk,g \u2217 x+ Vk,g \u2217 s). (5)\nwhere Vk,g \u2217 s is an unmasked 1\u00d7 1 convolution."}, {"heading": "2.4 PixelCNN Auto-Encoders", "text": "Because conditional PixelCNNs have the capacity to model diverse, multimodal image distributions p(x|h), it is possible to apply them as image decoders in existing neural architectures such as autoencoders. An auto-encoder consists of two parts: an encoder that takes an input image x and maps it to a (usually) low-dimensional representation h, and a decoder that tries to reconstruct the original image.\nStarting with a traditional convolutional auto-encoder architecture [16], we replace the deconvolutional decoder with a conditional PixelCNN and train the complete network end-to-end. Since PixelCNN has proved to be a strong unconditional generative model, we would expect this change to improve the reconstructions. Perhaps more interestingly, we also expect it to change the representations that the encoder will learn to extract from the data: since so much of the low level pixel statistics can be handled by the PixelCNN, the encoder should be able to omit these from h and concentrate instead on more high-level abstract information."}, {"heading": "3 Experiments", "text": ""}, {"heading": "3.1 Unconditional Modeling with Gated PixelCNN", "text": "Table 1 compares Gated PixelCNN with published results on the CIFAR-10 dataset. These architectures were all optimized for the best possible validation score, meaning that models that get a lower\nscore actually generalize better. Gated PixelCNN outperforms the PixelCNN by 0.11 bits/dim, which has a very significant effect on the visual quality of the samples produced, and which is close to the performance of PixelRNN.\nIn Table 2 we compare the performance of Gated PixelCNN with other models on the ImageNet dataset. Here Gated PixelCNN outperforms PixelRNN; we believe this is because the models are underfitting, larger models perform better and the simpler PixelCNN model scales better. We were able to achieve similar performance to the PixelRNN (Row LSTM [30]) in less than half the training time (60 hours using 32 GPUs). For the results in Table 2 we trained a larger model with 20 layers (Figure 2), each having 384 hidden units and filter size of 5\u00d7 5. We used 200K synchronous updates over 32 GPUs in TensorFlow [1] using a total batch size of 128."}, {"heading": "3.2 Conditioning on ImageNet Classes", "text": "For our second experiment we explore class-conditional modelling of ImageNet images using Gated PixelCNNs. Given a one-hot encoding hi for the i-th class we model p(x|hi). The amount of information that the model receives is only log(1000) \u2248 0.003 bits/pixel (for a 32x32 image). Still, one could expect that conditioning the image generation on class label could significantly improve the log-likelihood results, however we did not observe big differences. On the other hand, as noted in [27], we observed great improvements in the visual quality of the generated samples.\nIn Figure 3 we show samples from a single class-conditional model for 8 different classes. We see that the generated classes are very distinct from one another, and that the corresponding objects, animals and backgrounds are clearly produced. Furthermore the images of a single class are very diverse: for example the model was able to generate similar scenes from different angles and lightning conditions. It is encouraging to see that given roughly 1000 images from every animal or object the model is able to generalize and produce new renderings."}, {"heading": "3.3 Conditioning on Portrait Embeddings", "text": "In our next experiment we took the latent representations from the top layer of a convolutional network trained on a large database of portraits automatically cropped from Flickr images using a face detector. The quality of images varied wildly, because a lot of the pictures were taken with mobile phones in bad lightning conditions.\nThe network was trained with a triplet loss function [23] that ensured that the embedding h produced for an image x of a specific person was closer to the embeddings for all other images of the same person than it was to any embedding of another person.\nAfter the supervised net was trained we took the (image=x, embedding=h) tuples and trained the Conditional PixelCNN to model p(x|h). Given a new image of a person that was not in the training set we can compute h = f(x) and generate new portraits of the same person.\nSamples from the model are shown in Figure 4. We can see that the embeddings capture a lot of the facial features of the source image and the generative model is able to produce a large variety of new faces with these features in new poses, lighting conditions, etc.\nFinally, we experimented with reconstructions conditioned on linear interpolations between embeddings of pairs of images. The results are shown in Figure 5. Every image in a single row used the same random seed in the sampling which results in smooth transitions. The leftmost and rightmost images are used to produce the end points of interpolation."}, {"heading": "3.4 PixelCNN Auto Encoder", "text": "This experiment explores the possibility of training both the encoder and decoder (PixelCNN) endto-end as an auto-encoder. We trained a PixelCNN auto-encoder on 32x32 ImageNet patches and compared the results with those from a convolutional auto-encoder trained to optimize MSE. Both models used a 10 or 100 dimensional bottleneck.\nFigure 6 shows the reconstructions from both models. For the PixelCNN we sample multiple conditional reconstructions. These images support our prediction in Section 2.4 that the information encoded in the bottleneck representation h will be qualitatively different with a PixelCNN decoder than with a more conventional decoder. For example, in the lowest row we can see that the model generates different but similar looking indoor scenes with people, instead of trying to exactly reconstruct the input."}, {"heading": "4 Conclusion", "text": "This work introduced the Gated PixelCNN, an improvement over the original PixelCNN that is able to match or outperform PixelRNN [30], and is computationally more efficient. In our new architecture, we use two stacks of CNNs to deal with \u201cblind spots\u201d in the receptive field, which limited the original PixelCNN. Additionally, we use a gating mechanism which improves performance and convergence speed. We have shown that the architecture gets similar performance to PixelRNN on CIFAR-10 and is now state-of-the-art on the ImageNet 32x32 and 64x64 datasets.\nFurthermore, using the Conditional PixelCNN we explored the conditional modelling of natural images in three different settings. In class-conditional generation we showed that a single model is able to generate diverse and realistic looking images corresponding to different classes. On human portraits the model is capable of generating new images from the same person in different poses and lightning conditions from a single image. Finally, we demonstrated that the PixelCNN can be used as a powerful image decoder in an autoencoder. In addition to achieving state of the art log-likelihood scores in all these datasets, the samples generated from our model are of very high visual quality showing that the model captures natural variations of objects and lighting conditions.\nIn the future it might be interesting to try and generate new images with a certain animal or object solely from a single example image [21, 22]. Another exciting direction would be to combine Conditional PixelCNNs with variational inference to create a variational auto-encoder. In existing work p(x|h) is typically modelled with a Gaussian with diagonal covariance and using a PixelCNN instead could thus improve the decoder in VAEs. Another promising direction of this work would be to model images based on an image caption instead of class label, as proposed by Mansimov et\nal. [15]. Because the alignDRAW model proposed by the authors tends to output blurry samples we believe that something akin to the Conditional PixelCNN could greatly improve those samples."}], "references": [{"title": "Tensorflow: Large-scale machine learning on heterogeneous distributed systems", "author": ["Mart\u0131n Abadi", "Ashish Agarwal", "Paul Barham", "Eugene Brevdo", "Zhifeng Chen", "Craig Citro", "Greg S Corrado", "Andy Davis", "Jeffrey Dean", "Matthieu Devin"], "venue": "arXiv preprint arXiv:1603.04467,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2016}, {"title": "Unifying count-based exploration and intrinsic motivation", "author": ["Marc G Bellemare", "Sriram Srinivasan", "Georg Ostrovski", "Tom Schaul", "David Saxton", "Remi Munos"], "venue": "arXiv preprint arXiv:1606.01868,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2016}, {"title": "Deep generative image models using a laplacian pyramid of adversarial networks", "author": ["Emily L Denton", "Soumith Chintala", "Rob Fergus"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "NICE: Non-linear independent components estimation", "author": ["Laurent Dinh", "David Krueger", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1410.8516,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "A neural algorithm of artistic style", "author": ["Leon A Gatys", "Alexander S Ecker", "Matthias Bethge"], "venue": "arXiv preprint arXiv:1508.06576,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "Generative adversarial nets", "author": ["Ian Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron Courville", "Yoshua Bengio"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "Offline handwriting recognition with multidimensional recurrent neural networks", "author": ["Alex Graves", "J\u00fcrgen Schmidhuber"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2009}, {"title": "Towards conceptual compression", "author": ["Karol Gregor", "Frederic Besse", "Danilo J Rezende", "Ivo Danihelka", "Daan Wierstra"], "venue": "arXiv preprint arXiv:1601.06759,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2016}, {"title": "DRAW: A recurrent neural network for image generation", "author": ["Karol Gregor", "Ivo Danihelka", "Alex Graves", "Daan Wierstra"], "venue": "Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Deep autoregressive networks", "author": ["Karol Gregor", "Ivo Danihelka", "Andriy Mnih", "Charles Blundell", "Daan Wierstra"], "venue": "In Proceedings of the 31st International Conference on Machine Learning,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Deep residual learning for image recognition", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": "arXiv preprint arXiv:1512.03385,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Neural gpus learn algorithms", "author": ["\u0141ukasz Kaiser", "Ilya Sutskever"], "venue": "arXiv preprint arXiv:1511.08228,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Grid long short-term memory", "author": ["Nal Kalchbrenner", "Ivo Danihelka", "Alex Graves"], "venue": "arXiv preprint arXiv:1507.01526,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}, {"title": "The neural autoregressive distribution estimator", "author": ["Hugo Larochelle", "Iain Murray"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2011}, {"title": "Generating images from captions with attention", "author": ["Elman Mansimov", "Emilio Parisotto", "Jimmy Lei Ba", "Ruslan Salakhutdinov"], "venue": "arXiv preprint arXiv:1511.02793,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2015}, {"title": "Stacked convolutional auto-encoders for hierarchical feature extraction", "author": ["Jonathan Masci", "Ueli Meier", "Dan Cire\u015fan", "J\u00fcrgen Schmidhuber"], "venue": "In Artificial Neural Networks and Machine Learning\u2013ICANN", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2011}, {"title": "Action-conditional video prediction using deep networks in atari games", "author": ["Junhyuk Oh", "Xiaoxiao Guo", "Honglak Lee", "Richard L Lewis", "Satinder Singh"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2015}, {"title": "Inceptionism: Going deeper into neural networks", "author": ["Christopher Olah", "Mike Tyka"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2015}, {"title": "Generative adversarial text to image synthesis", "author": ["Scott Reed", "Zeynep Akata", "Xinchen Yan", "Lajanugen Logeswaran", "Bernt Schiele", "Honglak Lee"], "venue": "arXiv preprint arXiv:1605.05396,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2016}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["Danilo J Rezende", "Shakir Mohamed", "Daan Wierstra"], "venue": "In Proceedings of the 31st International Conference on Machine Learning,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2014}, {"title": "One-shot generalization in deep generative models", "author": ["Danilo Jimenez Rezende", "Shakir Mohamed", "Ivo Danihelka", "Karol Gregor", "Daan Wierstra"], "venue": "arXiv preprint arXiv:1603.05106,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2016}, {"title": "Learning with hierarchical-deep models", "author": ["Ruslan Salakhutdinov", "Joshua B Tenenbaum", "Antonio Torralba"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1958}, {"title": "Facenet: A unified embedding for face recognition and clustering", "author": ["Florian Schroff", "Dmitry Kalenichenko", "James Philbin"], "venue": "In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2015}, {"title": "Deep unsupervised learning using nonequilibrium thermodynamics", "author": ["Jascha Sohl-Dickstein", "Eric A. Weiss", "Niru Maheswaranathan", "Surya Ganguli"], "venue": "Proceedings of the 32nd International Conference on Machine Learning,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2015}, {"title": "Training very deep networks", "author": ["Rupesh K Srivastava", "Klaus Greff", "J\u00fcrgen Schmidhuber"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2015}, {"title": "Generative image modeling using spatial LSTMs", "author": ["Lucas Theis", "Matthias Bethge"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2015}, {"title": "A note on the evaluation of generative models", "author": ["Lucas Theis", "Aaron van den Oord", "Matthias Bethge"], "venue": "arXiv preprint arXiv:1511.01844,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2015}, {"title": "Neural autoregressive distribution estimation", "author": ["Benigno Uria", "Marc-Alexandre C\u00f4t\u00e9", "Karol Gregor", "Iain Murray", "Hugo Larochelle"], "venue": "arXiv preprint arXiv:1605.02226,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2016}, {"title": "Locally-connected transformations for deep gmms", "author": ["Aaron van den Oord", "Joni Dambre"], "venue": "In International Conference on Machine Learning (ICML) : Deep learning Workshop,", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2015}, {"title": "Pixel recurrent neural networks", "author": ["Aaron van den Oord", "Nal Kalchbrenner", "Koray Kavukcuoglu"], "venue": "arXiv preprint arXiv:1601.06759,", "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2016}, {"title": "Factoring variations in natural images with deep gaussian mixture models", "author": ["A\u00e4ron van den Oord", "Benjamin Schrauwen"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2014}, {"title": "The student-t mixture as a natural image patch prior with application to image compression", "author": ["Aaron van den Oord", "Benjamin Schrauwen"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2014}], "referenceMentions": [{"referenceID": 29, "context": "Recent advances in image modelling with neural networks [30, 26, 20, 10, 9, 28, 6] have made it feasible to generate diverse natural images that capture the high-level structure of the training data.", "startOffset": 56, "endOffset": 82}, {"referenceID": 25, "context": "Recent advances in image modelling with neural networks [30, 26, 20, 10, 9, 28, 6] have made it feasible to generate diverse natural images that capture the high-level structure of the training data.", "startOffset": 56, "endOffset": 82}, {"referenceID": 19, "context": "Recent advances in image modelling with neural networks [30, 26, 20, 10, 9, 28, 6] have made it feasible to generate diverse natural images that capture the high-level structure of the training data.", "startOffset": 56, "endOffset": 82}, {"referenceID": 9, "context": "Recent advances in image modelling with neural networks [30, 26, 20, 10, 9, 28, 6] have made it feasible to generate diverse natural images that capture the high-level structure of the training data.", "startOffset": 56, "endOffset": 82}, {"referenceID": 8, "context": "Recent advances in image modelling with neural networks [30, 26, 20, 10, 9, 28, 6] have made it feasible to generate diverse natural images that capture the high-level structure of the training data.", "startOffset": 56, "endOffset": 82}, {"referenceID": 27, "context": "Recent advances in image modelling with neural networks [30, 26, 20, 10, 9, 28, 6] have made it feasible to generate diverse natural images that capture the high-level structure of the training data.", "startOffset": 56, "endOffset": 82}, {"referenceID": 5, "context": "Recent advances in image modelling with neural networks [30, 26, 20, 10, 9, 28, 6] have made it feasible to generate diverse natural images that capture the high-level structure of the training data.", "startOffset": 56, "endOffset": 82}, {"referenceID": 16, "context": "While such unconditional models are fascinating in their own right, many of the practical applications of image modelling require the model to be conditioned on prior information: for example, an image model used for reinforcement learning planning in a visual environment would need to predict future scenes given specific states and actions [17].", "startOffset": 343, "endOffset": 347}, {"referenceID": 17, "context": "Neural artwork [18, 5] and content generation represent potential future uses for conditional generation.", "startOffset": 15, "endOffset": 22}, {"referenceID": 4, "context": "Neural artwork [18, 5] and content generation represent potential future uses for conditional generation.", "startOffset": 15, "endOffset": 22}, {"referenceID": 29, "context": "This paper explores the potential for conditional image modelling by adapting and improving a convolutional variant of the PixelRNN architecture [30].", "startOffset": 145, "endOffset": 149}, {"referenceID": 5, "context": "As well as providing excellent samples, this network has the advantage of returning explicit probability densities (unlike alternatives such as generative adversarial networks [6, 3, 19]), making it straightforward to apply in domains such as compression [32] and probabilistic planning and exploration [2].", "startOffset": 176, "endOffset": 186}, {"referenceID": 2, "context": "As well as providing excellent samples, this network has the advantage of returning explicit probability densities (unlike alternatives such as generative adversarial networks [6, 3, 19]), making it straightforward to apply in domains such as compression [32] and probabilistic planning and exploration [2].", "startOffset": 176, "endOffset": 186}, {"referenceID": 18, "context": "As well as providing excellent samples, this network has the advantage of returning explicit probability densities (unlike alternatives such as generative adversarial networks [6, 3, 19]), making it straightforward to apply in domains such as compression [32] and probabilistic planning and exploration [2].", "startOffset": 176, "endOffset": 186}, {"referenceID": 31, "context": "As well as providing excellent samples, this network has the advantage of returning explicit probability densities (unlike alternatives such as generative adversarial networks [6, 3, 19]), making it straightforward to apply in domains such as compression [32] and probabilistic planning and exploration [2].", "startOffset": 255, "endOffset": 259}, {"referenceID": 1, "context": "As well as providing excellent samples, this network has the advantage of returning explicit probability densities (unlike alternatives such as generative adversarial networks [6, 3, 19]), making it straightforward to apply in domains such as compression [32] and probabilistic planning and exploration [2].", "startOffset": 303, "endOffset": 306}, {"referenceID": 6, "context": "Two variants were proposed in the original paper: PixelRNN, where the pixel distributions are modeled with two-dimensional LSTM [7, 26], and PixelCNN, where they are modelled with convolutional networks.", "startOffset": 128, "endOffset": 135}, {"referenceID": 25, "context": "Two variants were proposed in the original paper: PixelRNN, where the pixel distributions are modeled with two-dimensional LSTM [7, 26], and PixelCNN, where they are modelled with convolutional networks.", "startOffset": 128, "endOffset": 135}, {"referenceID": 29, "context": "PixelCNNs (and PixelRNNs) [30] model the joint distribution of pixels over an image x as the following product of conditional distributions, where xi is a single pixel:", "startOffset": 26, "endOffset": 30}, {"referenceID": 13, "context": "A similar setup has been used by other autoregressive models such as NADE [14] and RIDE [26].", "startOffset": 74, "endOffset": 78}, {"referenceID": 25, "context": "A similar setup has been used by other autoregressive models such as NADE [14] and RIDE [26].", "startOffset": 88, "endOffset": 92}, {"referenceID": 29, "context": "1 Gated Convolutional Layers PixelRNNs, which use spatial LSTM layers instead of convolutional stacks, have previously been shown to outperform PixelCNNs as generative models [30].", "startOffset": 175, "endOffset": 179}, {"referenceID": 24, "context": "Feed-forward neural networks with gates have been explored in previous works, such as highway networks [25], grid LSTM [13] and neural GPUs [12], and have generally proved beneficial to performance.", "startOffset": 103, "endOffset": 107}, {"referenceID": 12, "context": "Feed-forward neural networks with gates have been explored in previous works, such as highway networks [25], grid LSTM [13] and neural GPUs [12], and have generally proved beneficial to performance.", "startOffset": 119, "endOffset": 123}, {"referenceID": 11, "context": "Feed-forward neural networks with gates have been explored in previous works, such as highway networks [25], grid LSTM [13] and neural GPUs [12], and have generally proved beneficial to performance.", "startOffset": 140, "endOffset": 144}, {"referenceID": 29, "context": "As proposed in [30] we also use a residual connection [11] in the horizontal stack.", "startOffset": 15, "endOffset": 19}, {"referenceID": 10, "context": "As proposed in [30] we also use a residual connection [11] in the horizontal stack.", "startOffset": 54, "endOffset": 58}, {"referenceID": 15, "context": "Starting with a traditional convolutional auto-encoder architecture [16], we replace the deconvolutional decoder with a conditional PixelCNN and train the complete network end-to-end.", "startOffset": 68, "endOffset": 72}, {"referenceID": 29, "context": "Model NLL Test (Train) Uniform Distribution: [30] 8.", "startOffset": 45, "endOffset": 49}, {"referenceID": 29, "context": "00 Multivariate Gaussian: [30] 4.", "startOffset": 26, "endOffset": 30}, {"referenceID": 3, "context": "70 NICE: [4] 4.", "startOffset": 9, "endOffset": 12}, {"referenceID": 23, "context": "48 Deep Diffusion: [24] 4.", "startOffset": 19, "endOffset": 23}, {"referenceID": 8, "context": "20 DRAW: [9] 4.", "startOffset": 9, "endOffset": 12}, {"referenceID": 30, "context": "13 Deep GMMs: [31, 29] 4.", "startOffset": 14, "endOffset": 22}, {"referenceID": 28, "context": "13 Deep GMMs: [31, 29] 4.", "startOffset": 14, "endOffset": 22}, {"referenceID": 7, "context": "00 Conv DRAW: [8] 3.", "startOffset": 14, "endOffset": 17}, {"referenceID": 25, "context": "57) RIDE: [26, 30] 3.", "startOffset": 10, "endOffset": 18}, {"referenceID": 29, "context": "57) RIDE: [26, 30] 3.", "startOffset": 10, "endOffset": 18}, {"referenceID": 29, "context": "47 PixelCNN: [30] 3.", "startOffset": 13, "endOffset": 17}, {"referenceID": 29, "context": "08) PixelRNN: [30] 3.", "startOffset": 14, "endOffset": 18}, {"referenceID": 29, "context": "We were able to achieve similar performance to the PixelRNN (Row LSTM [30]) in less than half the training time (60 hours using 32 GPUs).", "startOffset": 70, "endOffset": 74}, {"referenceID": 0, "context": "We used 200K synchronous updates over 32 GPUs in TensorFlow [1] using a total batch size of 128.", "startOffset": 60, "endOffset": 63}, {"referenceID": 7, "context": "32x32 Model NLL Test (Train) Conv Draw: [8] 4.", "startOffset": 40, "endOffset": 43}, {"referenceID": 29, "context": "35) PixelRNN: [30] 3.", "startOffset": 14, "endOffset": 18}, {"referenceID": 7, "context": "77) 64x64 Model NLL Test (Train) Conv Draw: [8] 4.", "startOffset": 44, "endOffset": 47}, {"referenceID": 29, "context": "04) PixelRNN: [30] 3.", "startOffset": 14, "endOffset": 18}, {"referenceID": 26, "context": "On the other hand, as noted in [27], we observed great improvements in the visual quality of the generated samples.", "startOffset": 31, "endOffset": 35}, {"referenceID": 22, "context": "The network was trained with a triplet loss function [23] that ensured that the embedding h produced for an image x of a specific person was closer to the embeddings for all other images of the same person than it was to any embedding of another person.", "startOffset": 53, "endOffset": 57}, {"referenceID": 29, "context": "This work introduced the Gated PixelCNN, an improvement over the original PixelCNN that is able to match or outperform PixelRNN [30], and is computationally more efficient.", "startOffset": 128, "endOffset": 132}, {"referenceID": 20, "context": "In the future it might be interesting to try and generate new images with a certain animal or object solely from a single example image [21, 22].", "startOffset": 136, "endOffset": 144}, {"referenceID": 21, "context": "In the future it might be interesting to try and generate new images with a certain animal or object solely from a single example image [21, 22].", "startOffset": 136, "endOffset": 144}], "year": 2016, "abstractText": "This work explores conditional image generation with a new image density model based on the PixelCNN architecture. The model can be conditioned on any vector, including descriptive labels or tags, or latent embeddings created by other networks. When conditioned on class labels from the ImageNet database, the model is able to generate diverse, realistic scenes representing distinct animals, objects, landscapes and structures. When conditioned on an embedding produced by a convolutional network given a single image of an unseen face, it generates a variety of new portraits of the same person with different facial expressions, poses and lighting conditions. We also show that conditional PixelCNN can serve as a powerful decoder in an image autoencoder, creating . Additionally, the gated convolutional layers in the proposed model improve the log-likelihood of PixelCNN to match the state-of-the-art performance of PixelRNN on ImageNet, with greatly reduced computational cost.", "creator": "LaTeX with hyperref package"}}}