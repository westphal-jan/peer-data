{"id": "1608.04485", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Aug-2016", "title": "Authorship clustering using multi-headed recurrent neural networks", "abstract": "A recurring neural network that has been trained to model the language of multiple documents by unknown authors separately is used to measure the similarity between the documents. It is able to find evidence of common authorship, even if the documents are very short and deal with different topics. Although it is easy to make statistically significant predictions about authorship, it is difficult to group documents into specific clusters with high accuracy.", "histories": [["v1", "Tue, 16 Aug 2016 05:04:46 GMT  (554kb)", "http://arxiv.org/abs/1608.04485v1", "14 pages, 5 figures; notebook for PAN@CLEF 2016"]], "COMMENTS": "14 pages, 5 figures; notebook for PAN@CLEF 2016", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["douglas bagnall"], "accepted": false, "id": "1608.04485"}, "pdf": {"name": "1608.04485.pdf", "metadata": {"source": "CRF", "title": "Authorship clustering using multi-headed recurrent neural networks Notebook for PAN at CLEF 2016", "authors": ["Douglas Bagnall"], "emails": ["douglas@halo.gen.nz"], "sections": [{"heading": "1 Introduction", "text": "The most successful entry in the PAN 2015 author identification task [7][2] used a form of recurrent neural network (RNN) to simultaneously model the language of several authors. The relative success of each author\u2019s model when presented with an anonymous text was treated as an indication of true authorship. This technique is reused here, but with different interpretive steps to suit the different task.\nThe use of recurrent neural networks for language models is not new, and was most recently revived by Mikolov [6]. The novelty of [2] was the use of a single recurrent state that was shared by multiple language models, reducing both overfitting and computational cost. The system produces scores in the form of relative entropies which suit the attribution problem well because it avoids the problems of high dimensional feature space, cutting directly to pairwise similarity scores.\nWhile this suited the PAN2015 author identification task[7], and the combination of language modelling and information theory is clearly useful in uncovering authorship, the approach may have drawbacks when used for clustering. At its core it produces an asymmetrical matrix of pair-wise divergence scores. Lacking both symmetry and the triangle inequality, this matrix cannot be used with clustering algorithms designed for metric spaces \u2014 which is to say most of them.\nThis paper briefly describes the multi-headed recurrent neural network introduced in [2], then looks at a method of turning its output into clustering decisions. But first comes a description of the task, noting in particular the scoring mechanisms which will come to contort the rest of the work."}, {"heading": "1.1 The PAN 2016 author clustering task", "text": "For a full description of the competition, see the overview paper [7]. The following concise definition is taken from the PAN website: 1 1 http://pan.webis.de/clef16/pan16-web/author-identification.html\nGiven a collection of (up to 100) documents, identify authorship links and groups of documents by the same author. All documents are single-authored, in the same language, and belong to the same genre. However, the topic or textlength of documents may vary. The number of distinct authors whose documents are included in the collection is not given.\nThe task covers three alphabetic languages (English, Greek, and Dutch), with six problems in each language. As described in the quoted passage, each problem consists of up to 100 documents. Two forms of answer are required for each problem: a set of clusters, indicating texts presumed to be by a single author; and a set of weighted links between text pairs where a higher weight relates to a higher probability that the two texts are from the same author. These two outputs are scored in different ways. The clustering are evaluated using the F(BCubed)[1] measure which averages the precision and recall of each document. The weighted links are scored using mean average precision[5] (or MAP), which punishes for every false link that is scored higher than a true link. Although the scores are presented in the form of probabilities, MAP doesn\u2019t actually care about their relative values, just their rank."}, {"heading": "2 The multi-headed recurrent neural network language model", "text": "This description is simplified for brevity; for more detail see [2] or [6] for an overview of RNN based language modelling.\nA standard character-level language model will, given an unfinished sequence of text x1, x2, x3, . . . , xi\u22121, predict the next character xi. That is, it outputs a probability distribution over the possible characters p(xi|xi\u22121, xi\u22122, . . . , x1). Such a model is usually trained on a corpus of text and the probabilities it emits are based on that text (and of course its structure and meta-parameters). Given the hypothesis that the writing style of an author will inevitably be reflected in choices made at the character level (even if that relationship is very faint), it follows that a language model trained solely on one author\u2019s work is likely to better predict another text by that author than would a model trained on the work of another author.\nAn RNN based language model will usually have a softmax activation for the output layer z. Where there are k output nodes (corresponding to the set of possible symbols), softmax for node j is defined as\n\u03c3(z)j = ezj\u2211 k e zk\nwhich provides values that can be treated as mutually exclusive probabilities. The multiheaded RNN language model differs in that it simultaneously models the language of many documents at once by using multiple softmax groups. GivenM documents, there are M \u2217 k output nodes arranged in M independent softmax groups. Each of these groups is trained primarily on a single text, with some stochastic \u201cleakage\u201d from other texts which helps regulate the output layer weights, preventing gross overfitting. The error gradient is back-propagated to the shared hidden layer.\nIn most regards the network follows the basic structure described by Elman [4], which is to say it resembles a multi-layer perceptron with a single hidden layer modified so the hidden state depends in part on the previous iteration\u2019s hidden state.\nAt each time step t, the hidden state ht depends on the hidden state at the previous time step ht\u22121 as well as the input vector xt which represents a single character. Where bh is a bias vector, Wxh and Whh are weight matrices, and fh is a non-linear function, the update of the hidden state is ht = fh(Whhht\u22121 +Wxhxt + bh). An output vector yt is derived from the hidden state, with yt = fy(Whyht + by). For this work, as in [2], the \u201cReSQRT\u201d function is used for fh:\nfh(x) =\n{\u221a x+ 1\u2212 1 if x \u2265 0\n0 otherwise.\nThe input layer uses a \u201cone-hot\u201d representation of the symbols; there is a node for each of the N symbols in the alphabet, and at each time step the node for the current symbol is set to 1 while the rest are 0.\nThe network is trained using a variant of adagrad[3] and back-propagation through time (BPTT). Simply described this involves iteratively adjusting the weight matrices with an individual monotonically decreasing learning rate for each weight.\nThe recurrent hidden layer can be thought of as modelling the language as a whole, while the various sub-models pick out aspects of the recurrent state that suit their document."}, {"heading": "3 Method", "text": ""}, {"heading": "3.1 Text preprocessing", "text": "In order to simplify the computational task and remove the distorting effect of extremely rare characters, all the texts were mapped to a smaller character set following the method described in [2]. The following description is an abbreviated version of a section of that paper. In addition, in two out of the five runs for each language, rare words were replaced by special tokens (Section 3.2).\nThe text is converted into the NFKD unicode normal form, which decomposes accented letters into the letter followed by the combining accent. Capital letters are further decomposed into an uppercase marker followed by the corresponding lowercase letter.\nVarious rare characters that seem largely equivalent are mapped together; for example the en-dash (\u201c\u2013\u201d) and em-dash (\u201c\u2014\u201d) are rare and appear to be used interchangeably in practice so these are mapped together.\nFor the Greek text, all Latin characters are mapped to a single token (the letter s) on the basis that foreign quotations and references appear too rarely for their content to be valuable and an attempt to model them would be wasteful, but the tendency to use them might be a useful signal. Following similar logic, all digits in all languages are mapped to 7. Runs of whitespace are collapsed into a single space.\nAt the end of this processing, any character with a frequency lower than 1 in 10,000 is discarded. Any characters occurring in a text but not in the resultant alphabet are ignored\u2014there is no \u201cunknown\u201d token. Alphabet sizes are 45 for English, 47 for Dutch, and 51 for Greek.\nRuns of more than 5 identical characters are truncated at 5. This is mainly aimed at the Latin stretches in Greek text, where the exact word length is probably not a useful signal."}, {"heading": "3.2 Eliminating low document frequency words", "text": "There are always going to be character level patterns in text that are more indicative of topic or genre than authorial style. Genre is to ostensibly controlled in the PAN corpora, but topic is not. A content-agnostic language model trained on a text containing topicspecific words will expect those words to appear frequently.\nFor example, this is the entirety of a text used in the Dutch review training problems:\nIk heb de Blackberry 9790 Bold nu sinds vijf dagen, en ik ben zeer tevreden over deze telefoon. Ik was op zoek naar een telefoon zonder te veel poespas en onzinnige applicaties, maar die wil snel en gemakkelijk werkt. Het menu werkt snel en instinctief. Als ik iets wil veranderen, heb ik het zo gevonden. Tijdens vergaderingen gebruik ik soms de luidspreker; dat werkt perfect. Ik heb overigens verschillende recensies gelezen over een slechte batterij, maar mijn blackberry houdt het wel de hele dag vol. Volgens mij hebben andere smartphones veelal dezelfde problemen.\nThe word blackberry doesn\u2019t occur anywhere else in the corpus, yet it accounts for about 3.5% of this text. A naively trained languagemodel could be forgiven for assuming that a propensity to write blackberry is a trademark of this author, which is unlikely in reality.\nTo counter this for some runs words that occur in only a very few documents (including in the controls) are replaced by a rare word token (arbitrarily, the degree sign \u00b0). The following quote is the above review modified according to the rules described with the words occuring in fewer than 1 percent of documents replaced with \u00b0 tokens:\n\u00b9ik heb de \u00b9\u00b0 7777 \u00b9\u00b0 nu sinds vijf dagen, en ik ben zeer tevreden over deze telefoon. \u00b9ik was op zoek naar een telefoon zonder te veel \u00b0 en \u00b0 \u00b0, maar die wil snel en gemakkelijk werkt. \u00b9het menu werkt snel en \u00b0. \u00b9als ik iets wil veranderen, heb ik het zo gevonden. \u00b9tijdens vergaderingen gebruik ik soms de \u00b0; dat werkt perfect. \u00b9ik heb overigens verschillende \u00b0 gelezen over een slechte batterij, maar mijn \u00b0 houdt het wel de hele dag vol. \u00b9volgens mij hebben andere smartphones \u00b0 dezelfde problemen.\nWhile this clearly removes some topic specific words (Blackberry, Bold, applicaties, luidspreker), it also mangles some possibly useful and seemingly ordinary words and phrases (poespas en onzinnige, veelal).2 It is difficult to ascertain whether this is of net benefit on the small training set, or indeed what the threshold should be. For each language an ensemble of five models was used; for two of these the document frequency threshold was used. There are around 300 documents for each language (see next section) so the lowest effective threshold is in the order of 0.005, corresponding to the word occurring in a single document.\nIt would likely be of benefit to take part-of-speech information into account when discarding words, but that would complicate things and involve tagging software that is not unavailable for all languages."}, {"heading": "3.3 MHRNN set up", "text": "Although in both the training and test sets there are six independent problems for each language, there is (at least in the training set) overlap between the sets with some texts being in multiple problems. As a result, although the training problem sizes sum to 390, 471, and 330 texts for English, Dutch, and Greek respectively, there are only 201, 278, and 189 individual texts, also respectively. Numbers for the tests sets are unknown.\nAll the documents from all the problems in each language were combined into a single model, along with 80 \u201ccontrol\u201d texts selected at random from the 2013, 2014, and 2015 PAN training corpora. That means that in the training set for the Greek model there were 269 (i.e. 189 problem texts + 80 control) softmax groups; for the Dutch 358, and for the English 281.\nCalculating all the problems at once is beneficial in a number of ways. The more text that the model as a whole sees, the better it can model the target language. More text allows the hidden layer to be larger, giving it more subtlety. Treating each problem 2 I do not speak Dutch and can only guess at the value of these words.\nindividually with a larger portion of control texts (e.g. 250 control texts per problem) would possibly work, at great computational cost. On the other hand, the presence of the other problems may be beneficial as they teach the model more about the genres in question. Many of the control texts in English (for example) are excerpts from bad 19th century novels, which differ significantly from the PAN2016 problem texts."}, {"heading": "3.4 Interpreting the results", "text": "The cross-entropy of each sub-model running against each text is collected in a matrix. For every problem the relevant sub-set of the matrix (i.e. problem texts evaluated by problem models) is gathered up. Because some texts are inherently more difficult to model than others, the problemmatrix is adjusted by subtracting the mean score given to each text by the control models. This gives the problem matrix a mean of approximately zero.\nThe control models were used for this (rather than themodels of the problem itself, or those of other problems) because between them the problems share authors across many texts. Using these models to normalise scores might skew the matrix if a few authors dominate. On the other hand, some of the control texts are known to possess peculiar styles while others could well be by the same authors as the the problem texts (given that they are from previous competitions and PAN draws corpora from limited pools). No attempt was made to find out.\nThe matrix is then added to its own transpose for symmetry and made positive and monotonically increasing by exponentiation. That is given the normalised matrix M is converted thusM \u2032 = eM+MT . The top triangle ofM \u2032 is scaled to the range 0\u20131 for the MAP scores. This simple strategy seems to work reasonably well for MAP scores."}, {"heading": "3.5 Optimising F(BCubed): the cowardly approach", "text": "By definition, the F(BCubed) metric must be above 0.5 when all documents are placed in their own individual clusters of size one (because this makes the precision of each document 1, while recall is at worst 1/N when all documents belong to the same cluster). On the other hand, placing all documents in a single big cluster will in result in an Fscore less than 0.5 in the typical case.3 This reflects that the fully disconnected solution states only the a-priori truth that each document is in a cluster with itself, and F(BCubed) rewards the restraint of that claim.\nTherefore, given no other information, the optimal strategy is predict N fully disconnected clusters of size 1. It only makes sense to depart from this strategy when the underlying detection is strong. In this paper, the fully disconnected solution is called the cowardly strategy, and the rest of this section is devoted to detecting ways in which it might be bettered.\nFigure 3 shows the problem."}, {"heading": "3.6 Optimising F(BCubed): the cluster-aware approach", "text": "3 Typical not only in the sense of a randomly sampled partition, but more importantly this is empirically true for all the training set problems.\nOne problem with the simple agglomerative approach is that the a link between two documents can cluster together a large number of other documents that might otherwise seem unrelated. This is equivalent to singlelinkage in themetric clustering case. Figure 4 attempts to illustrate the problem. As clusters get big, the probability of a single link leading to cataclysmic super-cluster grows, causing the cliff in Figure 3.\nA modified agglomerative approach was developed where each link\u2019s score is adjusted to the mean of all the links in the cluster it forms. This approach, which appeared to give better results, is not described here because it was mistakenly not used in the PAN evaluation."}, {"heading": "3.7 Optimising F(BCubed): the accidental small-cluster steep cliff approach", "text": "Due to a foolish programming error, the cluster-aware strategy was replaced by an algorithm was used that effectively punished any link that joined more than two documents together. That is, the documents were all made to partner up before any of them could consider larger clusters.\nAlthough this error seems drastic, the algorithm turns out to have some nice features. Figure 5 shows the modified F(BCubed) curves for the same examples as Figure 3. The cliff is steeper and the hill, where there is one, is broader and flatter (though lower). This makes aiming at better-than-cowardly easier using the simple heuristic described in the next section. Results on the training set using the same heuristic and the intended algorithm (as in Section 3.6) are in aggregate very similar to those obtained with this accidental method, though the variance is larger. The intended algorithm appears to make higher scores achievable in a narrower band of thresholds; outside the band the scores are worse."}, {"heading": "3.8 Optimising F(BCubed): the clusteriness heuristic", "text": "The aim of these clustering explorations is to find a method that beats the cowardly strategy. This appears achievable by using the simple heuristic of finding anchor points in the F(BCubed) landscape, as shown in Figure 5, and choosing a point between them according to a fixed ratio. The exact ratio was chosen per language and genre based on a terrible mixture of greed and fear. In the end a slightly risky coefficient was chosen as the underlying detection seems quite sound (reflected in significantly better than random MAP scores on the training set), and if sticking to the cowardly baseline is the best strategy it is almost certainly going to result in a tie. Thus safety is discarded in pursuit of a win."}, {"heading": "3.9 Optimising F(BCubed): example training set results", "text": "Table 1 shows some results obtained on the training set. It shows that for most of the English problems there is no chance of getting a better-than-cowardly result (using these techniques), but for the other languages this is not only possible but is achieved using the preset values. Those preset values were of course adjusted with full knowledge of the training set."}, {"heading": "3.10 Ensembles", "text": "Five nets were trained for each language, and the raw cross entropymatriceswere summed before subsequent processing. All the models were trained in a similar fashion, using a form of adagrad optimisation, with somewhat haphazard variation in a few meta-\nparameters. A summary of the meta-parameters is shown in Table 2.4 Whether this variation in meta-parameters (or indeed the use of ensembles at all) actually helps was not thoroughly explored.\nAs the number of documents is much greater than typically found in the PAN2015 challenge, the hidden layers can be larger than seen in [2], resulting in hopefully more accurate and nuanced modelling at the cost of training time.\nIn ordinary language modelling, the point is to achieve maximum accuracy, and to this end a validation corpus is often used to avoid overfitting the model to the training set. For this task a similar approach is used, though accuracy of the language model itself is of course not the primary concern. It was found that a slightly overfit model (vis-a-vis a validation text, averaged across all sub-models) seems to give better MAP results. Hence the nets were trained until the validation entropy had been worsening for a small number of epochs.\n4 Fullmeta-parameter details are defined in code at https://github.com/douglasbagnall/bog/tree/master/config; there is little to be gained from an exhaustive summary.\nFor each language, two of the five models read the texts backwards, learning to predict the characters that lead to the current state. While reversed language models are no better than forward ones on their own, they were included on the hypothesis that their differing perspective should help the ensemble.\nThere were also two nets for each language with a word document frequency threshold or 0.005 or 0.01. The arrangement of all the meta-parameters is essentially ad-hoc."}, {"heading": "4 Results", "text": "Results are shown in Table 3. At the time of writing it is unknown how these results compare to other approaches.\nWhere the P-BCubed column in Table 3 is 1, it is likely (but not certain) that the software has settled on the cowardly strategy (Section 3.5).Where it is not 1, the software has deviated from this strategy, whether successfully or not. There is cause for optimism where the MAP scores are greater than 0.1 and the BCubed precision is not far below 1. On the whole the software looks to have favoured valour over caution."}, {"heading": "5 Discussion", "text": "The technique described seems to perform reasonably well on an intrinsically difficult problem, but it is sadly difficult to be certain how it compares to other methods. Most entries in the PAN competition appear to have suffered problems relating to their understanding of the scoring system,whichmay be hiding some successes at actually detecting links between texts."}, {"heading": "5.1 A zero-effort baseline", "text": "The PAN committee published a baseline result on an early-bird test set with an F(BCubed) score of 0.6922, and a MAP of 0.000459. As has been well established, the fully-disconnected cowardly strategy offers a hard-to-beat, easy-to-achieve baseline for F(BCubed). For MAP a beatable but useful baseline might be a fully connected graph with random link strengths. Randomly shuffling the link arrays gives results like the final column in Table 4. The average of this column is 0.036 \u2013 two orders of magnitude better than the \u201cofficial\u201d baseline. MAP rewards verbosity. Even if a method gives no ranking\nof undesired links, it is better to assign them low random weights than to ignore them altogether.\nAs explained at length in Section 3.5, a system that sticks to the a-priori truth that each document is in a cluster with itself will obtain an F(BCubed) of around 0.8. Thus it is easy to define a zero-effort baseline that randomizes links for MAP and uses the cowardly strategy for F(BCubed). Unfortunately this baseline would have performed quite well in competition. Many teams seem not to have grasped the fundamental biases of the two scoring mechanisms, although their underlying solutions may be sound.\nThis suggests a weakness in F(BCubed)[1] for evaluating very difficult clustering problems. Whereas from an informational point of view putting everything in a single cluster might not seem very different from putting everything in separate clusters of size one, F(BCubed) over-rewards the latter claim. It may be that there is no clustering evaluation system that suits all problems.\nMAP and F(BCubed) are evidently both quite tricky to code and reason about. It might help in future competitions if some form of evaluation software was available so that inexperienced coders could gain a better understanding of the task and their progress in it."}, {"heading": "5.2 Variations and run-time", "text": "Amajor drawback to this technique is the time it takes. As described in the paper it took far longer than any other technique. An obvious way to speed up the process would be to reduce the ensemble size to one (for a five-fold improvement). Reducing the number of hidden neurons would further improve speed but reduce efficacy a small margin.\nGoing the other way, increasing the amount and quality of control text would increase the system\u2019s overall understanding of the language, and allow the number of hidden nodes to be increased. This should lead to somewhat better results without fundamental changes."}], "references": [{"title": "A comparison of extrinsic clustering evaluation metrics based on formal constraints", "author": ["E. Amig\u00f3", "J. Gonzalo", "J. Artiles", "F. Verdejo"], "venue": "Information retrieval 12(4), 461\u2013486", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2009}, {"title": "Author identification using multi-headed recurrent neural networks", "author": ["D. Bagnall"], "venue": "arXiv preprint arXiv:1506.04891", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["J. Duchi", "E. Hazan", "Y. Singer"], "venue": "The Journal of Machine Learning Research 12, 2121\u20132159", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "Finding structure in time", "author": ["J.L. Elman"], "venue": "Cognitive science 14(2), 179\u2013211", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1990}, {"title": "Introduction to information retrieval", "author": ["C.D. Manning", "P. Raghavan", "H. Sch\u00fctze"], "venue": "Cambridge University Press", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2008}, {"title": "Statistical Language Models Based on Neural Networks", "author": ["T. Mikolov"], "venue": "Ph.D. thesis, Ph. D. thesis, Brno University of Technology", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "Clustering by Authorship Within and Across Documents", "author": ["E. Stamatatos", "M. Tschuggnall", "B. Verhoeven", "W. Daelemans", "G. Specht", "B. Stein", "M. Potthast"], "venue": "Working Notes Papers of the CLEF 2016 Evaluation Labs. CEUR Workshop Proceedings, CLEF and CEUR-WS.org", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 6, "context": "The most successful entry in the PAN 2015 author identification task [7][2] used a form of recurrent neural network (RNN) to simultaneously model the language of several authors.", "startOffset": 69, "endOffset": 72}, {"referenceID": 1, "context": "The most successful entry in the PAN 2015 author identification task [7][2] used a form of recurrent neural network (RNN) to simultaneously model the language of several authors.", "startOffset": 72, "endOffset": 75}, {"referenceID": 5, "context": "The use of recurrent neural networks for language models is not new, and was most recently revived by Mikolov [6].", "startOffset": 110, "endOffset": 113}, {"referenceID": 1, "context": "The novelty of [2] was the use of a single recurrent state that was shared by multiple language models, reducing both overfitting and computational cost.", "startOffset": 15, "endOffset": 18}, {"referenceID": 6, "context": "While this suited the PAN2015 author identification task[7], and the combination of language modelling and information theory is clearly useful in uncovering authorship, the approach may have drawbacks when used for clustering.", "startOffset": 56, "endOffset": 59}, {"referenceID": 1, "context": "This paper briefly describes the multi-headed recurrent neural network introduced in [2], then looks at a method of turning its output into clustering decisions.", "startOffset": 85, "endOffset": 88}, {"referenceID": 6, "context": "For a full description of the competition, see the overview paper [7].", "startOffset": 66, "endOffset": 69}, {"referenceID": 0, "context": "The clustering are evaluated using the F(BCubed)[1] measure which averages the precision and recall of each document.", "startOffset": 48, "endOffset": 51}, {"referenceID": 4, "context": "The weighted links are scored using mean average precision[5] (or MAP), which punishes for every false link that is scored higher than a true link.", "startOffset": 58, "endOffset": 61}, {"referenceID": 1, "context": "This description is simplified for brevity; for more detail see [2] or [6] for an overview of RNN based language modelling.", "startOffset": 64, "endOffset": 67}, {"referenceID": 5, "context": "This description is simplified for brevity; for more detail see [2] or [6] for an overview of RNN based language modelling.", "startOffset": 71, "endOffset": 74}, {"referenceID": 3, "context": "In most regards the network follows the basic structure described by Elman [4], which is to say it resembles a multi-layer perceptron with a single hidden layer modified so the hidden state depends in part on the previous iteration\u2019s hidden state.", "startOffset": 75, "endOffset": 78}, {"referenceID": 1, "context": "For this work, as in [2], the \u201cReSQRT\u201d function is used for fh:", "startOffset": 21, "endOffset": 24}, {"referenceID": 2, "context": "The network is trained using a variant of adagrad[3] and back-propagation through time (BPTT).", "startOffset": 49, "endOffset": 52}, {"referenceID": 1, "context": "In order to simplify the computational task and remove the distorting effect of extremely rare characters, all the texts were mapped to a smaller character set following the method described in [2].", "startOffset": 194, "endOffset": 197}, {"referenceID": 1, "context": "As the number of documents is much greater than typically found in the PAN2015 challenge, the hidden layers can be larger than seen in [2], resulting in hopefully more accurate and nuanced modelling at the cost of training time.", "startOffset": 135, "endOffset": 138}, {"referenceID": 0, "context": "This suggests a weakness in F(BCubed)[1] for evaluating very difficult clustering problems.", "startOffset": 37, "endOffset": 40}], "year": 2016, "abstractText": "A recurrent neural network that has been trained to separately model the language of several documents by unknown authors is used to measure similarity between the documents. It is able to find clues of common authorship even when the documents are very short and about disparate topics. While it is easy to make statistically significant predictions regarding authorship, it is difficult to group documents into definite clusters with high accuracy.", "creator": " XeTeX output 2016.07.02:0046"}}}