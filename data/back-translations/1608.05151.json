{"id": "1608.05151", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Aug-2016", "title": "Effective Multi-step Temporal-Difference Learning for Non-Linear Function Approximation", "abstract": "Multilevel Differential Learning (TD), where the update targets contain information from several steps in advance, is one of the most popular forms of TD learning for linear functional approximation. This is because multi-level methods often perform much better than their one-step counterparts due to lower distortion of the update targets. However, in nonlinear functional approximation, single-step methods seem to be the norm. One reason for this may be that in many areas the popular multi-step methods TD ($\\ lambda $) and Sarsa ($\\ lambda $), combined with nonlinear functional approximation, do not perform well. Specifically, they are highly susceptible to deviations in estimates. In this paper, we identify the reason for this. In addition, based on our analysis, we propose a new multilevel TD method for nonlinear functional approximation that addresses this problem. We confirm the effectiveness of our networking by using two neural tasks as a benchmark.", "histories": [["v1", "Thu, 18 Aug 2016 01:21:27 GMT  (63kb,D)", "http://arxiv.org/abs/1608.05151v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["harm van seijen"], "accepted": false, "id": "1608.05151"}, "pdf": {"name": "1608.05151.pdf", "metadata": {"source": "CRF", "title": "Effective Multi-step Temporal-Difference Learning for Non-Linear Function Approximation", "authors": ["Harm van Seijen"], "emails": ["harm.vanseijen@maluuba.com"], "sections": [{"heading": "1 Introduction", "text": "Multi-step update targets play an important role in TD learning (Sutton, 1988) and reinforcement learning (Sutton & Barto, 1998; Szepesv\u00e1ri, 2009). The core concept behind TD learning is to bootstrap the value of one state (or state-action pair) from the value of another state (or state-action pair). With one-step update targets the state that is bootstrapped from lies one time step in the future; with multi-step update targets bootstrapping occurs with respect to values of states that lie further in the future. Controlling from which states bootstrapping occurs is important, because it affects the fundamental trade-off between bias and variance of updates. The trade-off that produces the best performance is different from domain to domain, but for most domains the best trade-off lies somewhere in between a one-step update target (high bias, but low variance) and an update with the full return (unbiased, but high variance). This has made TD(\u03bb), where the trade-off between variance and bias of the update target can be controlled by the parameter \u03bb, one of the most popular TD methods in linear function approximation.\nWhile TD(\u03bb) and its control variant Sarsa(\u03bb) are very popular in the case of linear function approximation, when non-linear function approximation is used to represent the value function single-step methods are the norm. A reason could be that in many domains with non-linear function approximation TD(\u03bb) does not perform particularly well. In particular, it is very susceptible to divergence of values. We argue that the underlying reasons for this instability are not unique to non-linear function\nar X\niv :1\n60 8.\n05 15\n1v 1\n[ cs\n.A I]\napproximation; it is a more general phenomenon of traditional TD(\u03bb). However, the issues are more prominent when non-linear function approximation is used for two reasons. First, for table lookup or linear function approximation with binary features, an alternative version of TD(\u03bb) is available (TD(\u03bb) with replacing traces) that is less sensitive to divergence (Singh & Sutton, 1996). Second, value blow-ups occur especially in domains where the same feature is active (i.e., has a value 6= 0) for many subsequent time steps (van Seijen et al., 2015). This is something that occurs often with non-linear function approximation, because features are typically more general in this setting and can be active over a large part of the state-space.\nWe show that the susceptibility of TD(\u03bb) to divergence stems from a deviation of TD(\u03bb) from the general TD update rule based on gradient descent that is formalized by its forward view. Unfortunately, while the forward view is less susceptible to divergence, it is expensive to implement (both the computation time per step and required memory grow over time), making it not a practical alternative to TD(\u03bb). To address this, we present an alternative version of TD(\u03bb), which we call forward TD(\u03bb), that implements the gradient-descent-based update rule exactly and is computationally efficient as well. The price that is payed to achieve this is that updates occur with a delay. However, we show empirically that the advantages of having an exact implementation of the gradient-descent-based update rule substantially outweigh the disadvantages of having a delay in the updates."}, {"heading": "2 Related Work", "text": "This work is related to true online temporal-difference learning (van Seijen & Sutton, 2014; van Seijen et al., 2015). The non-linear, online \u03bb-return algorithm presented in Section 4 is a direct extension of the linear, online \u03bb-return algorithm that underlies true online TD(\u03bb). In the linear case, the computationally inefficient forward view equations can be rewritten in computationally efficient backward view equations, yielding the true online TD(\u03bb) algorithm. Unfortunately, this is not possible in the non-linear case, because the derivation of the true online equations makes use of the fact that the gradient with respect to the value function is independent of the weight vector, which does not hold in the case of non-linear function approximation.\nForward TD(\u03bb) is similar to a method introduced by Cichosz (1995). Specifically, Cichosz\u2019s method is based on the same update target as forward TD(\u03bb). Interestingly, Cichosz presents his method in the context of linear function approximation as a computationally efficient alternative to traditional TD(\u03bb). While we focus primarily on sample efficiency in the non-linear setting, like Cichosz\u2019s method, forward TD(\u03bb) also has computational advantages. In fact, forward TD(\u03bb) is more efficient than Cichosz\u2019s method. Forward TD(\u03bb) has the same computation-time complexity as TD(0); by contrast, the computation-time of Cichosz\u2019s method depends on K."}, {"heading": "3 Background", "text": "Our problem setting is that of a Markov decision processes (MDP), which can be described as a 5-tuple of the form \u3008S,A, p, r, \u03b3\u3009, consisting of S, the set of all states; A, the set of all actions; p(s\u2032|s, a), the transition probability function, giving for each state s \u2208 S and action a \u2208 A the probability of a transition to state s\u2032 \u2208 S at the next step; r(s, a, s\u2032), the reward function, giving the expected reward for a transition from (s, a) to s\u2032. \u03b3 is the discount factor, specifying how future rewards are weighted with respect to the immediate reward. An MDP can contain terminal states, which terminate an episode. Mathematically, a terminal state can be interpreted as a state with a single action that results in a reward of 0 and a transition to itself.\nThe return at time t is defined as the discounted sum of rewards, observed after t:\nGt = Rt+1 + \u03b3 Rt+2 + \u03b3 2Rt+3 + ... = \u221e\u2211 i=1 \u03b3i\u22121Rt+i ,\nwhere Rt+1 is the reward received after taking action At in state St.\nActions are taken at discrete time steps t = 0, 1, 2, ... according to a policy \u03c0 : S \u00d7 A \u2192 [0, 1], which defines for each action the selection probability conditioned on the state. Each policy \u03c0 has a corresponding state-value function v\u03c0(s), which maps each state s \u2208 S to the expected value of the return Gt from that state, when following policy \u03c0:\nv\u03c0(s) = E{Gt |St = s, \u03c0} .\nThe value of a terminal state is (by definition) 0.\nTemporal-Difference (TD) learning aims to learn the state-value function using a strategy based on stochastic gradient descent (Bertsekas, 1995). Let V\u0302 (s|\u03b8) be an estimate of v\u03c0(s) given the weight vector \u03b8 \u2208 Rn. Then, the general form of the TD update is:\n\u03b8t+1 = \u03b8t + \u03b1 ( Ut \u2212 V\u0302 (St|\u03b8t) ) \u2207\u03b8V\u0302 (St|\u03b8t) , (1)\nwhere \u03b1 > 0 is the step-size parameter, Ut is the update target, and\u2207\u03b8V\u0302 is the gradient of V\u0302 with respect to the weight vector \u03b8. The update target Ut is some estimate of the value v\u03c0(St). A simple example is the TD(0) update target, which uses the estimate of the next state to bootstrap from:\nUt = Rt+1 + \u03b3V\u0302 (St+1|\u03b8t) .\nThe update equations for TD(\u03bb) are:\n\u03b4t = Rt+1 + \u03b3V\u0302 (St+1|\u03b8t)\u2212 V\u0302 (St|\u03b8t) et = \u03b3\u03bbet\u22121 +\u2207\u03b8V\u0302 (St|\u03b8t)\n\u03b8t+1 = \u03b8t + \u03b1\u03b4t et\nwhere et is called the eligibility-trace vector. While these updates appear to deviate from the gradientdescent-based update rule given in (1), there is a close connection with this update rule. In the next section, we go deeper into the details of this relation."}, {"heading": "4 Analysis of TD(\u03bb)", "text": "That TD(\u03bb) is a multi-step method is not immediately obvious, because its update equations are different in form than (1), making it hard to specify what the update target is. That TD(\u03bb) is a multi-step method becomes clear from the fact that the weights computed by TD(\u03bb) are similar to those computed by a different algorithm that does have a well-defined multi-step update target, called the \u03bb-return algorithm. The \u03bb-return algorithm is also referred to as the forward view of TD(\u03bb). While the traditional \u03bb-return algorithm is similar to TD(\u03bb) only at the end of an episode (Sutton & Barto, 1998; Bertsekas & Tsitsiklis, 1996), below we specify a more general version that is similar to TD(\u03bb) at all time steps.\nWe define the \u03bb-return for time step t with horizon h \u2265 t+ 1 as follows:\nG \u03bb|h t := (1\u2212 \u03bb) h\u2212t\u22121\u2211 n=1 \u03bbn\u22121G (n) t + \u03bb h\u2212t\u22121G (h\u2212t) t (2)\nwhere G(n)t is the n-step return, defined as:\nG (n) t := n\u2211 k=1 \u03b3k\u22121Rt+k + \u03b3 n V\u0302 (St+n|\u03b8t+n\u22121).\nNote that G\u03bb|ht uses information only up to the horizon h. We define \u03b8t as the result of a sequence of updates of the form (1), based on states S0, . . . , St\u22121 and update targets G \u03bb|t 0 , . . . , G \u03bb|t t\u22121, respectively. Formally, we define \u03b8t := \u03b8tt, with \u03b8 t t incrementally defined by: 1\n\u03b8tk+1 := \u03b8 t k + \u03b1 ( G \u03bb|t k \u2212 V\u0302 (Sk|\u03b8 t k) ) \u2207\u03b8V\u0302 (Sk|\u03b8tk), for 0 \u2264 k < t . (3)\nwith \u03b8t0 := \u03b80 for all t and \u03b80 being the weight vector at the start of the episode. We call the algorithm that implements these updates the online \u03bb-return algorithm. Furthermore, we define the offline \u03bb-return algorithm as the algorithm that performs (3) only at the end of an episode. That is, \u03b8t := \u03b80 for 0 \u2264 t < T , with T the time step of termination, while \u03b8T := \u03b8TT , with \u03b8 T T defined incrementally by (3). 1Note that the sequence of updates is different for each time step, due to the different horizons, requiring the double indices for the weight vectors.\nFigure 1 illustrates the difference between the online and offline \u03bb-return algorithm and TD(\u03bb), by showing the RMS error on a random walk task. The task consists of 10 states laid out in a row plus a terminal state on the left. Each state transitions with 70% probability to its left neighbour and with 30% probability to its right neighbour (or to itself in case of the right-most state). All rewards are 1, and \u03b3 = 1. The right-most state is the initial state.\nThe theorem below states that for appropriately small step-sizes TD(\u03bb) behaves like the online \u03bb-return algorithm. We provide the proof for the theorem in Appendix A. The theorem uses the term \u2206ti, which we define as:\n\u2206ti := ( G\u0304 \u03bb|t i \u2212 V\u0302 (Si|\u03b80) ) \u2207\u03b8V\u0302 (Si|\u03b80) ,\nwith G\u0304\u03bb|ti the interim \u03bb-return for state Si with horizon t that uses \u03b80 for all value evaluations. Note that \u2206ti is independent of the step-size.\nTheorem 1 Let \u03b80 be the initial weight vector, \u03b8tdt be the weight vector at time t computed by TD(\u03bb), and \u03b8\u03bbt be the weight vector at time t computed by the online \u03bb-return algorithm. Furthermore, assume that \u2207\u03b8V\u0302 is well-defined and continuous everywhere and that \u2211t\u22121 i=0 \u2206 t i 6= 0. Then, for all time steps t: ||\u03b8tdt \u2212 \u03b8 \u03bb t ||\n||\u03b8tdt \u2212 \u03b80|| \u2192 0 as \u03b1\u2192 0.\nWhile TD(\u03bb) behaves for small step-size like the \u03bb-return algorithm, in practise a small step-size often results in slow learning. Hence, higher step-sizes are desirable. Figure 1 suggests that for higher step-sizes, TD(\u03bb) has a disadvantage with respect to the online \u03bb-return algorithm. We analyze why this is the case, using the one-state example shown in the left of Figure 2.\nThe right of Figure 2 shows the RMS error over the first 10 episodes for different step-sizes and \u03bb = 1. While for small step-sizes, TD(\u03bb) indeed behaves like the \u03bb-return algorithm, for larger step-sizes the difference becomes huge.\nTo understand the reason for the large difference in performance, we derive an analytical expression for the value at the end of an episode. First, we consider the \u03bb-return algorithm. Because there is\nonly one state involved, we indicate the value of this state simply by V\u0302 . The value at the end of an episode, V\u0302T , is equal to V\u0302 TT , resulting from the update sequence:\nV\u0302 Tk+1 = V\u0302 T k + \u03b1(G \u03bb|T k \u2212 V\u0302 T k ) for 0 \u2264 k < T\nBy substitution, we can directly express V\u0302T in terms of the initial value, V\u03020, and the update targets:\nV\u0302T = (1\u2212 \u03b1)T V\u03020 + \u03b1(1\u2212 \u03b1)T\u22121G\u03bb|T0 + \u03b1(1\u2212 \u03b1)T\u22122G \u03bb|T 1 + \u00b7 \u00b7 \u00b7+ \u03b1G \u03bb|T T\u22121\nUsing that G\u03bb|Tk = 1 for all k, this can be written as a single pseudo-update:\nV\u0302T = V\u03020 + \u03b2(1\u2212 V\u03020) (4)\nwith \u03b2 = 1 \u2212 (1 \u2212 \u03b1)T . Note that a larger \u03b1 or T results in a larger \u03b2, but its value is bounded. Specifically, 0 \u2264 \u03b1 \u2264 1\u21d2 0 \u2264 \u03b2 \u2264 1.\nWe now consider TD(\u03bb). The update at the end of an episode is V\u0302T = V\u0302T\u22121 + \u03b1eT\u22121\u03b4T\u22121 . In our example, \u03b4t = 0 for 0 \u2264 t < T \u2212 1, while \u03b4T\u22121 = 1 \u2212 VT\u22121. Because \u03b4t is 0 for all time steps except the last, VT\u22121 = V0. Furthermore, \u2207\u03b8V\u0302 reduces to 1 in our example, resulting in eT\u22121 = T . Substituting all this in the above equation also reduces it to pseudo-update (4), but with \u03b2 = \u03b1T . So for TD(\u03bb), \u03b2 can grow much larger than 1, causing divergence of values, even for \u03b1 < 1. This is the reason that TD(\u03bb) can be very sensitive to the step-size and it explains why the optimal step-size for TD(\u03bb) is much smaller than the optimal step-size for the \u03bb-return algorithm in Figure 4 (\u03b1 \u2248 0.15 versus \u03b1 = 1, respectively). Moreover, because the variance on \u03b2 is higher for TD(\u03bb) the performance at optimal \u03b1 of TD(\u03bb) is worse than the performance at optimal \u03b1 for the \u03bb-return algorithm. In Section 6, we show empirically that the general behaviour of TD(\u03bb) shown in Figure 2 also occurs in more complex domains.\nWhile the online \u03bb-return algorithm has clear advantages over TD(\u03bb), it is not a practical algorithm: the number of updates that need to be performed per time step grows over time, as well as the memory requirements. On the other hand, the offline \u03bb-return algorithm is undesirable, because it performs no updates during an episode and cannot be applied to non-episodic tasks. In the next section, we present forward TD(\u03bb), a computationally efficient algorithm that forms a middle ground between the online and the offline \u03bb-return algorithm."}, {"heading": "5 Forward TD(\u03bb)", "text": "The online \u03bb-return algorithm uses update targets that grow with the data horizon. This has the advantage that updates can be performed immediately, but also causes the computation time per time step to grow over time. In this section, we present a computationally efficient method that performs updates using a \u03bb-return with a horizon that lies a fixed number of time steps in the future: G\u03bb|t+Kt with K \u2208 {1, 2, . . . }. We refer to this update target as the K-bounded \u03bb-return.\nA consequence of using update target G\u03bb|t+Kt with fixed K is that during the first K \u2212 1 time steps no updates occur. In other words, \u03b8t := \u03b80 for 1 \u2264 t < K. The weights \u03b8K through \u03b8T\u22121 are defined as follows:\n\u03b8t+K := \u03b8t+K\u22121 + \u03b1 ( G \u03bb|t+K t \u2212 V\u0302 (St|\u03b8t+K\u22121) ) \u2207\u03b8V\u0302 (St|\u03b8t+K\u22121) , for 0 \u2264 t < T \u2212K.\nAt the end of an episode K updates occur. Following the convention of the double indices when multiple updates occur at a single time step, we define \u03b8T := \u03b8TK , with \u03b8 T K defined incrementally by:\n\u03b8Tk+1 := \u03b8 T k + \u03b1 ( G \u03bb|T T\u2212K+k \u2212 V\u0302 (ST\u2212K+k|\u03b8 T k ) ) \u2207\u03b8V\u0302 (ST\u2212K+k|\u03b8Tk ) for 0 \u2264 k < K ,\nwith \u03b8T0 := \u03b8T\u22121.\nThe question of how to set K involves a trade-off. On the one hand, larger values of K bring the end-of-episode weights closer to those of the \u03bb-return algorithm; on the other hand, smaller values of K result in a shorter delay of updates. In general, K should be set in such a way that G \u03bb|t+K t is an accurate estimate of G \u03bb|T t , while not being unnecessary large. How accurately G \u03bb|t+K t\napproximates G\u03bb|Tt depends on the value \u03b3\u03bb, because the contribution of a reward to the K-bounded \u03bb-return reduces exponentially with \u03b3\u03bb (we will show this below). While the immediate reward has a contribution of 1, the contribution of a reward K time steps in the future is only (\u03b3\u03bb)K . Hence, a sensible strategy for setting K is to find the smallest value of K that still ensures that the value (\u03b3\u03bb)K is smaller than some fraction \u03b7. This value can be computed as follows:\nK = ceil ( log(\u03b7)/log(\u03b3\u03bb) ) , (5)\nwhere ceil(\u00b7) rounds up to the nearest integer. Note that for \u03b3\u03bb < \u03b7 , K = 1. The value K = 1 is special becauseG\u03bb|t+1t reduces to the TD(0) update target, independent of the value of \u03bb. Furthermore, there is no delay in updates. Hence, forward TD(\u03bb) behaves exactly like TD(0) in this case. For \u03b3\u03bb = 1, no finite value of K can ensure that an accurate estimate of G\u03bb|Tt is obtained. The only way to resolve this is to postpone all updates to the end of an episode (which can be interpreted as K = \u221e). In this case, the performance of forward TD(\u03bb) is equal to that of the offline \u03bb-return algorithm.\nNext, we discuss how forward TD(\u03bb) can be implemented efficiently. Our implementation is based on two ways of computing the K-bounded \u03bb-return. We derive the underlying equations in Appendix B. The first way is based on the equation:\nG \u03bb|h+1 t = G \u03bb|h t + (\u03b3\u03bb) h\u2212t\u03b4\u2032h , for h \u2265 t+ 1 , (6) with \u03b4\u2032h := Rh+1 + \u03b3V\u0302 (Sh+1|\u03b8h)\u2212 V\u0302 (Sh|\u03b8h\u22121) . Note that \u03b4\u2032i differs from \u03b4i in the index of the weight vector used for the value of Si. Using (6) incrementally, Gt+Kt can be computed, starting from G \u03bb|t+1 t = Rt+1 + \u03b3V\u0302 (St+1|\u03b8t), in K \u2212 1 updates.\nThe second way is based on the equation:\nG \u03bb|h t+1 = (G \u03bb|h t \u2212 \u03c1t)/\u03b3\u03bb , for h \u2265 t+ 2 , (7)\nwith \u03c1t = Rt+1 + \u03b3(1\u2212 \u03bb) V\u0302 (St+1|\u03b8t) .\nThis equation can be used to compute Gt+Kt+1 from G t+K t . Performing one more update using (6) results in the K-bounded \u03bb-return for time step t + 1: G t+1+Kt+1 . This way of computing the K-bounded \u03bb-return requires only two updates (for any value of K).\nIn theory, the K-bounded \u03bb-return has to be computed incrementally from scratch (using Equation 6) only for the initial state; for the other states it can be computed efficiently using only 2 updates. Unfortunately, this approach does not work well in practise. The reason is that tiny rounding errors that occur on any computer get blown up by dividing by \u03b3\u03bb over and over again. For example, consider \u03b3\u03bb = 0.5. Then, rounding errors in the K-bounded \u03bb-return at time t will be blown up by a factor (1/\u03b3\u03bb)100 = 2100 at time t+ 100. Fortunately, we can avoid these blow-ups in an elegant way, by recomputing the K-bounded \u03bb-return from scratch every K time steps. This ensures that rounding errors will never grow by a factor larger than (1/\u03b3\u03bb)K . Moreover, as we argued in the previous subsection, K is set in such a way that the value \u03b3\u03bbK is just slightly smaller than the hyper-parameter \u03b7. Hence, rounding errors will not grow by a factor larger than approximately 1/\u03b7. Because \u03b7 will typically be set to 0.01 or larger (smaller values of \u03b7 will result in longer update delays, which is undesirable), no issues with rounding error blow-ups will occur.\nWe now analyze the computational complexity of forward Sarsa(\u03bb). For reference purposes, the pseudocode for implementing forward TD(\u03bb) in provided in Algorithm 1. First, we look at computation time. Between time step K and the end of an episode, exactly one state-value evaluation and one state-value update occur. All other computations have O(1) cost. At the end of the episode an additional K \u2212 1 value updates occur, so there is a spike in computation at the end of an episode, but because during the first K \u2212 1 time steps of an episode no updates occur, on average the algorithm still performs only one value update and one value evaluation per time step. This is the same as for TD(0). Hence, forward TD(\u03bb) is very efficient from a computation time perspective. In terms of memory, forward TD(\u03bb) requires the storage of the K most recent feature vectors. So, if n is the number of features, forward TD(\u03bb) requires additional memory of size O(nK) over TD(0) (note that forward TD(\u03bb) does not require storage of an eligiblity-trace vector). If n is large and memory is scarce, K can be bounded by some value Kmax to deal with this.\nAlgorithm 1 forward TD(\u03bb) INPUT: \u03b1, \u03bb, \u03b3,\u03b8init, \u03b7,Kmax (optional) \u03b8 \u2190 \u03b8init If \u03b3\u03bb > 0 then: K = ceil ( log(\u03b7)/ log(\u03b3\u03bb) ) , else: K = 1\nK = min(Kmax,K) (optional) cfinal \u2190 (\u03b3\u03bb)K\u22121 Loop (over episodes): F \u2190 \u2205 // F is a FIFO queue (max length: K) Usync \u2190 0; i\u2190 0; c\u2190 1; Vcurrent \u2190 0; ready \u2190 false obtain initial state S // or \u03c6(S) While S is not terminal, do:\nobserve reward R and next state S\u2032 If S\u2032 is terminal: Vnext \u2190 0 , else: Vnext \u2190 V\u0302 (S\u2032|\u03b8) \u03c1\u2190 R+ \u03b3(1\u2212 \u03bb)Vnext push tuple \u3008S, \u03c1\u3009 on F // or \u3008\u03c6(S), \u03c1\u3009 \u03b4\u2032 \u2190 R+ \u03b3Vnext \u2212 Vcurrent Vcurrent \u2190 Vnext If i = K \u2212 1 :\nU \u2190 Usync Usync \u2190 Vcurrent ; i\u2190 0; c\u2190 1; ready \u2190 true\nElse: Usync \u2190 Usync + c \u00b7 \u03b4\u2032 i\u2190 i+ 1; c\u2190 \u03b3\u03bb \u00b7 c If ready : U \u2190 U + cfinal \u00b7 \u03b4\u2032 // G\u03bb|t+Kt \u21d0 G \u03bb|t+K\u22121 t\npop \u3008Sp, \u03c1p\u3009 from F update \u03b8 using Sp and U If K 6= 1 : U \u2190 ( U \u2212 \u03c1p ) /(\u03b3\u03bb) // G\u03bb|t+Kt+1 \u21d0 G \u03bb|t+K t\nS \u2190 S\u2032 If ready = false: U \u2190 Usync While F not empty:\npop \u3008Sp, \u03c1p\u3009 from F update \u03b8 using Sp and U If K 6= 1 : U \u2190 (U \u2212 \u03c1p)/\u03b3\u03bb"}, {"heading": "6 Empirical Comparisons", "text": "In our first experiment, we evaluate the performance of TD(\u03bb), forward TD(\u03bb) and the online/offline \u03bb-return algorithm on the standard mountain car task (Sutton & Barto, 1998). The state-space consists of the position and velocity of the car, scaled to numbers within the range [-1, 1]. The value function is approximated with a neural network that has the two state-variables as input, one output variable representing the state value, and a single hidden layer of 50 nodes in between. The backpropagation algorithm is used for obtaining the derivative of the value function with respect to the weights (in a similar way as done by Tesauro, 1994). The evaluation policy is a near-optimal policy. All rewards are drawn from a normal distribution with mean -1 and standard deviation 2. We fixed \u03bb = 0.9 and set \u03b7 = 0.01 and show the performance for different step-sizes. Our performance metric is the RMS error (over the state distribution induced by the policy) at the end of an episode, averaged over the first 50 episodes. The left graph of Figure 3 shows the results. The results are averaged over 50 independent runs. TD(\u03bb) shows the same behaviour as in the one-state example (Figure 2). That is, the error quickly diverges. Surprisingly, forward TD(\u03bb) outperforms the online \u03bb-return algorithm. That delaying updates results in better performance in this case is probably related to the reason that the DQN algorithm uses a separate target network that is updated in a delayed way (Mnih et al., 2015). Most likely because it reduces instability.\nFor our second experiment, we compared the performance of forward TD(\u03bb) with \u03b7 \u2208 {0.01, 0.1, 0.3} and no maximum K value, for \u03b1 = 0.015 and different \u03bb values. In addition, we tested \u03b7 = 0.01 with Kmax = 50. The experimental settings are the same as in the first experiment, except we average over 200 independent runs instead of 50. The right graph of Figure 3 shows the results. This graph shows that the performance at optimal \u03bb is not really affected by \u03b7. Hence, in practise \u03b7 can just be fixed to some small value.\nFor our third and fourth experiment, we used control tasks. Here the goal is to improve the policy in order to maximize the return. To deal with these tasks, we used one neural network per action to represent the action-value and used -greedy action selection. Effectively, this changes TD(\u03bb) into Sarsa(\u03bb) and forward TD(\u03bb) into forward Sarsa(\u03bb).\nOur first control domain is the mountain car task, but now with deterministic rewards of -1. We compared the average return of Sarsa(\u03bb) and forward Sarsa(\u03bb) over the first 50 episodes for different \u03bb. For each \u03bb and each method we optimized \u03b1. We used \u03b7 = 0.01 and = 0.05. The left graph of Figure 4 shows the results. Results are averaged over 200 independent runs. Forward Sarsa(\u03bb) outperforms Sarsa(\u03bb) for all \u03bb values, except for \u03bb = 1.0. This can be explained by the fact that for \u03bb = 1, all updates are delayed until the end of the episode for forward Sarsa(\u03bb), in contrast to the updates of Sarsa(\u03bb).\nOur second control domain is the cart-pole benchmark task, in which a pole has to be balanced upright on a cart for as long as possible (Barto et al., 1983). The state-space consists of the position and velocity of the cart, as well as the angle and angular velocity of the pole; there are only two actions: move left and move right. An episode ends when the angle of the pole deviates a certain number of degrees from its upright position or when the cart position exceeds certain bounds. We used -greedy exploration with = 0.05, and limited the episode length to 1000 steps. Again, \u03b7 = 0.01. The networks we used for action-value estimation are the same as in the mountain car experiment (1 hidden layer consisting of 50 nodes), expect that each network now has four input nodes, corresponding with scaled versions of the four state-space parameters. We compared the average return over the first 1000 episodes for different \u03bb with optimized \u03b1. The right graph of Figure 4 shows the results, averaged over 200 independent runs. In this domain, higher values of \u03bb actually reduce the performance of Sarsa(\u03bb). By contrast, the optimal performance of forward Sarsa(\u03bb) is obtained around \u03bb = 0.6 and is substantially higher than the performance of Sarsa(0). Overall, these results convincingly show that forward Sarsa(\u03bb) outperforms Sarsa(\u03bb), as predicted by our analysis."}, {"heading": "7 Conclusions", "text": "We identified the reason why TD(\u03bb) often performs poorly on domains with non-linear function approximation. Deviations from the general TD update rule make TD(\u03bb) susceptible to divergence of value estimates and causes additional variance that reduces performance. While the \u03bb-return algorithm implements the general update rule exactly, it is not a practical alternative, because its computation-time per step, as well as its memory requirements, are much more expensive. To address this, we presented a new method, called forward TD(\u03bb), that exactly implements the general update rule (like the \u03bb-return algorithm), but is also very efficient (like TD(\u03bb)). Specifically, its computation-time complexity is the same as that of TD(0). While forward TD(\u03bb) performs its updates with a delay, we have shown empirically that the performance increase due to exactly following the general update rule more than makes up for the performance decrease due to the update delays. In fact, one of our experiments suggests that the delay in updates could actually have a positive impact on the performance when non-linear function approximation is used. This surprising result is likely related to the same reason that DQN uses a separate target network that is updated in a delayed way and is an interesting topic for future research."}, {"heading": "Acknowledgements", "text": "The author thanks Itamar Arel for discussions leading to the development of forward TD(\u03bb). This work was partly supported by grants from Alberta Innovates \u2013 Technology Futures and the National Science and Engineering Research Council of Canada."}, {"heading": "A Proof TD(\u03bb) is Similar to the Online \u03bb-Return Algorithm", "text": "Theorem 1 Let \u03b80 be the initial weight vector, \u03b8tdt be the weight vector at time t computed by TD(\u03bb), and \u03b8\u03bbt be the weight vector at time t computed by the online \u03bb-return algorithm. Furthermore, assume that \u2207\u03b8V\u0302 is well-defined and continuous everywhere and that \u2211t\u22121 i=0 \u2206 t i 6= 0. Then, for all time steps t: ||\u03b8tdt \u2212 \u03b8 \u03bb t ||\n||\u03b8tdt \u2212 \u03b80|| \u2192 0 as \u03b1\u2192 0.\nProof We prove the theorem by showing that ||\u03b8tdt \u2212 \u03b8 \u03bb t ||/||\u03b8 td t \u2212 \u03b80|| can be approximated by O(\u03b1)/ ( C + O(\u03b1) ) as \u03b1 \u2192 0, with C > 0. For readability, we will not use the \u2018td\u2019 and \u2018\u03bb\u2019 superscripts; instead, we always use weights with double indices for the online \u03bb-return algorithm and weights with single indices for TD(\u03bb).\nThe update equations for TD(\u03bb) are:\n\u03b4t = Rt+1 + \u03b3V\u0302 (St+1|\u03b8t)\u2212 V\u0302 (St|\u03b8t) et = \u03b3\u03bbet\u22121 +\u2207\u03b8V\u0302 (St|\u03b8t)\n\u03b8t+1 = \u03b8t + \u03b1\u03b4t et\nBy incremental substitution, we can write \u03b8t directly in terms of \u03b80:\n\u03b8t = \u03b80 + \u03b1 t\u22121\u2211 j=0 \u03b4jej\n= \u03b80 + \u03b1 t\u22121\u2211 j=0 \u03b4j j\u2211 i=0 (\u03b3\u03bb)j\u2212i\u2207\u03b8V\u0302 (Si|\u03b8i)\n= \u03b80 + \u03b1 t\u22121\u2211 j=0 j\u2211 i=0 (\u03b3\u03bb)j\u2212i\u03b4j \u2207\u03b8V\u0302 (Si|\u03b8i)\nUsing the summation rule \u2211n j=k \u2211j i=k ai,j = \u2211n i=k \u2211n j=i ai,j we can rewrite this as:\n\u03b8t = \u03b80 + \u03b1 t\u22121\u2211 i=0 t\u22121\u2211 j=i (\u03b3\u03bb)j\u2212i\u03b4j\u2207\u03b8V\u0302 (Si|\u03b8i) (8)\nIn Appendix B, the following relation is proven (see Equation 14):\nG \u03bb|h+1 i = G \u03bb|h i + (\u03b3\u03bb) h\u2212i\u03b4\u2032h for h \u2265 i+ 1 with \u03b4\u2032h := Rh+1 + \u03b3V\u0302 (Sh+1|\u03b8h)\u2212 V\u0302 (Sh|\u03b8h\u22121) . By applying this sequentially for i+ 1 \u2264 h < t, we can derive:\nG \u03bb|t i = G \u03bb|i+1 i + t\u22121\u2211 j=i+1 (\u03b3\u03bb)j\u2212i\u03b4\u2032j (9)\nFurthermore, the following holds:\nG \u03bb|i+1 i = Ri+1 + \u03b3V\u0302 (Si+1|\u03b8i)\n= Ri+1 + \u03b3V\u0302 (Si+1|\u03b8i)\u2212 V\u0302 (Si|\u03b8i\u22121) + V\u0302 (Si|\u03b8i\u22121) = \u03b4\u2032i + V\u0302 (Si|\u03b8i\u22121)\nSubstituting this in (9) yields:\nG \u03bb|t i = V\u0302 (Si|\u03b8i\u22121) + t\u22121\u2211 j=i (\u03b3\u03bb)j\u2212i\u03b4\u2032j .\nUsing that \u03b4\u2032j = \u03b4j + V\u0302 (Sj |\u03b8j)\u2212 V\u0302 (Sj |\u03b8j\u22121), it follows that\nt\u22121\u2211 j=i (\u03b3\u03bb)j\u2212i\u03b4j = G \u03bb|t i \u2212 V\u0302 (Si|\u03b8i\u22121)\u2212 t\u22121\u2211 j=i (\u03b3\u03bb)j\u2212i ( V\u0302 (Sj |\u03b8j)\u2212 V\u0302 (Sj |\u03b8j\u22121) ) . (10)\nFrom the update equations of TD(\u03bb) it follows that ||\u03b8j\u2212\u03b8j\u22121|| \u2192 0 as \u03b1\u2192 0. Furthermore, because \u2207\u03b8V\u0302 is well-defined everywhere, V\u0302 is a continuous function, and therefore if ||\u03b8j \u2212 \u03b8j\u22121|| \u2192 0 then ||V\u0302 (Sj |\u03b8j\u22121)\u2212 V\u0302 (Sj |\u03b8j)|| \u2192 0. Hence, as \u03b1\u2192 0, we can approximate (10) as:\nt\u22121\u2211 j=i (\u03b3\u03bb)j\u2212i\u03b4j = G \u03bb|t i \u2212 V\u0302 (Si|\u03b8i\u22121) +O(\u03b1)\n= G\u0304 \u03bb|t i \u2212 V\u0302 (Si|\u03b80) +O(\u03b1)\nwith G\u0304\u03bb|ti the interim \u03bb-return that uses \u03b80 for all value evaluations. Substituting this in (8) yields:\n\u03b8t = \u03b80 + \u03b1 t\u22121\u2211 i=0 ( G\u0304 \u03bb|t i \u2212 V\u0302 (Si|\u03b80) +O(\u03b1) ) \u2207\u03b8V\u0302 (Si|\u03b8i)\nBecause\u2207\u03b8V\u0302 is a continuous function, if ||\u03b8i \u2212 \u03b80|| \u2192 0 then ||\u2207\u03b8V\u0302 (Si|\u03b8i)\u2212\u2207\u03b8V\u0302 (Si|\u03b80)|| \u2192 0. Using this, we can approximate the above equation further as:\n\u03b8t = \u03b80 + \u03b1 t\u22121\u2211 i=0 ( G\u0304 \u03bb|t i \u2212 V\u0302 (Si|\u03b80) +O(\u03b1) )( \u2207\u03b8V\u0302 (Si|\u03b80) +O(\u03b1) \u00b7 1 ) = \u03b80 + \u03b1\nt\u22121\u2211 i=0 ( G\u0304 \u03bb|t i \u2212 V\u0302 (Si|\u03b80) ) \u2207\u03b8V\u0302 (Si|\u03b80) +O(\u03b12) \u00b7 1 , (11)\nwith 1 a vector consisting only of 1\u2019s.\nFor the online \u03bb-return algorithm, we can derive the following by sequential substitution:\n\u03b8tt = \u03b80 + \u03b1 t\u22121\u2211 i=0 ( G \u03bb|t i \u2212 V\u0302 (Si|\u03b8 t i) ) \u2207\u03b8V\u0302 (Si|\u03b8ti)\nAs \u03b1\u2192 0, we can approximate this as:\n\u03b8tt = \u03b80 + \u03b1 t\u22121\u2211 i=0 ( G\u0304 \u03bb|t i \u2212 V\u0302 (Si|\u03b80) ) \u2207\u03b8V\u0302 (Si|\u03b80) +O(\u03b12) \u00b7 1 . (12)\nCombining (11) and (12), it follows that as \u03b1\u2192 0:\n||\u03b8t \u2212 \u03b8tt|| ||\u03b8t \u2212 \u03b80|| = ||(\u03b8t \u2212 \u03b8tt)/\u03b1|| ||(\u03b8t \u2212 \u03b80)/\u03b1|| = O(\u03b1) C +O(\u03b1) ,\nwith\nC = \u2223\u2223\u2223\u2223\u2223 \u2223\u2223\u2223\u2223\u2223 t\u22121\u2211 i=0 ( G\u0304 \u03bb|t i \u2212 V\u0302 (Si|\u03b80) ) \u2207\u03b8V\u0302 (Si|\u03b80) \u2223\u2223\u2223\u2223\u2223 \u2223\u2223\u2223\u2223\u2223 = \u2223\u2223\u2223\u2223\u2223 \u2223\u2223\u2223\u2223\u2223 t\u22121\u2211 i=0 \u2206ti \u2223\u2223\u2223\u2223\u2223 \u2223\u2223\u2223\u2223\u2223 .\nFrom the condition \u2211t\u22121 i=0 \u2206 t i 6= 0 it follows that C > 0.\nB Efficiently Computing the K-bounded \u03bb-Return\nHere, we derive the two update equations that underly forward TD(\u03bb). First, we derive the equation to compute G\u03bb|h+1t from G \u03bb|h t . We use V\u0302t as a shorthand for V\u0302 (St|\u03b8t\u22121). The value G \u03bb|h+1 t can be\nwritten in terms of G\u03bb|ht as follows:\nG \u03bb|h+1 t := (1\u2212 \u03bb) h\u2212t\u2211 n=1 \u03bbn\u22121G (n) t + \u03bb h\u2212tG (h+1\u2212t) t\n= (1\u2212 \u03bb) h\u2212t\u22121\u2211 n=1 \u03bbn\u22121G (n) t + \u03bb h\u2212tG (h+1\u2212t) t + (1\u2212 \u03bb)\u03bbh\u2212t\u22121G (h\u2212t) t\n= (1\u2212 \u03bb) h\u2212t\u22121\u2211 n=1 \u03bbn\u22121G (n) t + \u03bb h\u2212t\u22121G (h\u2212t) t + \u03bb h\u2212t(G(h+1\u2212t)t \u2212G(h\u2212t)t ) = G \u03bb|h t + \u03bb\nh\u2212t(G(h+1\u2212t)t \u2212G(h\u2212t)t ) (13) Furthermore, we can rewrite the difference G(h+1\u2212t)t \u2212G (h\u2212t) t as follows:\nG (h+1\u2212t) t \u2212G (h\u2212t) t = h+1\u2212t\u2211 k=1 \u03b3k\u22121Rt+k + \u03b3 h+1\u2212t V\u0302h+1 \u2212 h\u2212t\u2211 k=1 \u03b3k\u22121Rt+k \u2212 \u03b3h\u2212t V\u0302h\n= \u03b3h\u2212t ( Rh+1 + \u03b3V\u0302h+1 \u2212 V\u0302h )\nBy combining this expression with (13), we get:\nG \u03bb|h+1 t = G \u03bb|h t + (\u03b3\u03bb) h\u2212t\u03b4\u2032h , (14)\nwith\n\u03b4\u2032h := Rh+1 + \u03b3V\u0302 (Sh+1|\u03b8h)\u2212 V\u0302 (Sh|\u03b8h\u22121) .\nNext, the derive the equation to compute Ght+1 from G h t . The first step in the derivation makes use of the fact that the weights of the n-step returns in the K-bounded \u03bb-return always sum to 1. That is, for 0 \u2264 \u03bb \u2264 1 and n \u2208 N+, the following holds (this can be proven using the geometric series rule):\n(1\u2212 \u03bb) n\u22121\u2211 i=1 \u03bbi\u22121 + \u03bbn\u22121 = 1 (15)\nIn addition, the derivation makes use of the following relation, for n \u2265 2:\nG (n) t = n\u2211 i=1 \u03b3i\u22121Rt+i + \u03b3 n V\u0302t+n\n= Rt+1 + n\u2211 i=2 \u03b3i\u22121Rt+i + \u03b3 n V\u0302t+n\n= Rt+1 + n\u22121\u2211 j=1 \u03b3jRt+1+j + \u03b3 n V\u0302t+n\n= Rt+1 + \u03b3 [ n\u22121\u2211 j=1 \u03b3j\u22121Rt+1+j + \u03b3 n\u22121 V\u0302t+n ] = Rt+1 + \u03b3G (n\u22121) t+1\nThe full derivation is as follows (h \u2265 t+ 2):\nG \u03bb|h t := (1\u2212 \u03bb) h\u2212t\u22121\u2211 i=1 \u03bbi\u22121G (i) t + \u03bb h\u2212t\u22121G (h\u2212t) t\n= (1\u2212 \u03bb) h\u2212t\u22121\u2211 i=1 \u03bbi\u22121G (i) t + \u03bb h\u2212t\u22121G (h\u2212t) t +Rt+1 \u2212 [ (1\u2212 \u03bb) h\u2212t\u22121\u2211 i=1 \u03bbi\u22121 + \u03bbh\u2212t\u22121 ] Rt+1\n= (1\u2212 \u03bb) h\u2212t\u22121\u2211 i=1 \u03bbi\u22121 [ G (i) t \u2212Rt+1 ] + \u03bbh\u2212t\u22121 [ G (h\u2212t) t \u2212Rt+1 ] +Rt+1 = (1\u2212 \u03bb) [ G\n(1) t \u2212Rt+1\n] + (1\u2212 \u03bb) h\u2212t\u22121\u2211 i=2 \u03bbi\u22121 [ G (i) t \u2212Rt+1 ] +\u03bbh\u2212t\u22121 [ G (h\u2212t) t \u2212Rt+1 ] +Rt+1\n= (1\u2212 \u03bb) [ Rt+1 + \u03b3V\u0302t+1 \u2212Rt+1 ] + (1\u2212 \u03bb) h\u2212t\u22121\u2211 i=2 \u03bbi\u22121\u03b3G (i\u22121) t+1\n+\u03bbh\u2212t\u22121\u03b3G (h\u2212t\u22121) t+1 +Rt+1\n= \u03b3(1\u2212 \u03bb)V\u0302t+1 + (1\u2212 \u03bb) h\u2212t\u22122\u2211 j=1 \u03bbj\u03b3G (j) t+1 + \u03bb h\u2212t\u22121\u03b3G (h\u2212t\u22121) t+1 +Rt+1\n= \u03b3(1\u2212 \u03bb)V\u0302t+1 +Rt+1 + \u03b3\u03bb [ (1\u2212 \u03bb) h\u2212t\u22122\u2211 j=1 \u03bbj\u22121G (j) t+1 + \u03bb h\u2212t\u22122G (h\u2212t\u22121) t+1 ] = \u03b3(1\u2212 \u03bb)V\u0302t+1 +Rt+1 + \u03b3\u03bbG\u03bb|ht+1\nThe above derivation expresses G\u03bb|ht in terms of G \u03bb|h t+1. G \u03bb|h t+1 expressed in terms of G \u03bb|h t yields:\nG \u03bb|h t+1 = (G \u03bb|h t \u2212 \u03c1t)/\u03b3\u03bb , for h \u2265 t+ 2\nwith \u03c1t = Rt+1 + \u03b3(1\u2212 \u03bb) V\u0302 (St+1|\u03b8t) ."}], "references": [{"title": "Neuronlike adaptive elements that can solve difficult learning control problems", "author": ["A.G. Barto", "R.S. Sutton", "C.W. Anderson"], "venue": "IEEE Transactions on Systems, Man and Cybernetics,", "citeRegEx": "Barto et al\\.,? \\Q1983\\E", "shortCiteRegEx": "Barto et al\\.", "year": 1983}, {"title": "Truncating temporal differences: On the efficient implementation of TD(\u03bb) for reinforcement learning", "author": ["P. Cichosz"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Cichosz,? \\Q1995\\E", "shortCiteRegEx": "Cichosz", "year": 1995}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski", "S. Petersen", "C. Beattie", "A. Sadik", "I. Antonoglou", "Kumaran", "H. King D", "D. Wierstra", "S. Legg", "D. Hassabis"], "venue": "Nature, 518:529\u2013533,", "citeRegEx": "Mnih et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2015}, {"title": "Reinforcement learning with replacing eligibility traces", "author": ["S.P. Singh", "R.S. Sutton"], "venue": "Machine Learning,", "citeRegEx": "Singh and Sutton,? \\Q1996\\E", "shortCiteRegEx": "Singh and Sutton", "year": 1996}, {"title": "Learning to predict by the methods of temporal differences", "author": ["R.S. Sutton"], "venue": "Machine Learning,", "citeRegEx": "Sutton,? \\Q1988\\E", "shortCiteRegEx": "Sutton", "year": 1988}, {"title": "Reinforcement Learning: An Introduction", "author": ["R.S. Sutton", "A.G. Barto"], "venue": null, "citeRegEx": "Sutton and Barto,? \\Q1998\\E", "shortCiteRegEx": "Sutton and Barto", "year": 1998}, {"title": "Algorithms for Reinforcement Learning", "author": ["C. Szepesv\u00e1ri"], "venue": null, "citeRegEx": "Szepesv\u00e1ri,? \\Q2009\\E", "shortCiteRegEx": "Szepesv\u00e1ri", "year": 2009}, {"title": "TD-Gammon, a self-teaching backgammon program, achieves master-level play", "author": ["G. Tesauro"], "venue": "Neural Computation,", "citeRegEx": "Tesauro,? \\Q1994\\E", "shortCiteRegEx": "Tesauro", "year": 1994}, {"title": "True online TD(\u03bb)", "author": ["H. van Seijen", "R.S. Sutton"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "Seijen and Sutton,? \\Q2014\\E", "shortCiteRegEx": "Seijen and Sutton", "year": 2014}], "referenceMentions": [{"referenceID": 4, "context": "1 Introduction Multi-step update targets play an important role in TD learning (Sutton, 1988) and reinforcement learning (Sutton & Barto, 1998; Szepesv\u00e1ri, 2009).", "startOffset": 79, "endOffset": 93}, {"referenceID": 6, "context": "1 Introduction Multi-step update targets play an important role in TD learning (Sutton, 1988) and reinforcement learning (Sutton & Barto, 1998; Szepesv\u00e1ri, 2009).", "startOffset": 121, "endOffset": 161}, {"referenceID": 1, "context": "Forward TD(\u03bb) is similar to a method introduced by Cichosz (1995). Specifically, Cichosz\u2019s method is based on the same update target as forward TD(\u03bb).", "startOffset": 51, "endOffset": 66}, {"referenceID": 2, "context": "That delaying updates results in better performance in this case is probably related to the reason that the DQN algorithm uses a separate target network that is updated in a delayed way (Mnih et al., 2015).", "startOffset": 186, "endOffset": 205}, {"referenceID": 0, "context": "Our second control domain is the cart-pole benchmark task, in which a pole has to be balanced upright on a cart for as long as possible (Barto et al., 1983).", "startOffset": 136, "endOffset": 156}], "year": 2016, "abstractText": "Multi-step temporal-difference (TD) learning, where the update targets contain information from multiple time steps ahead, is one of the most popular forms of TD learning for linear function approximation. The reason is that multi-step methods often yield substantially better performance than their single-step counter-parts, due to a lower bias of the update targets. For non-linear function approximation, however, single-step methods appear to be the norm. Part of the reason could be that on many domains the popular multi-step methods TD(\u03bb) and Sarsa(\u03bb) do not perform well when combined with non-linear function approximation. In particular, they are very susceptible to divergence of value estimates. In this paper, we identify the reason behind this. Furthermore, based on our analysis, we propose a new multi-step TD method for non-linear function approximation that addresses this issue. We confirm the effectiveness of our method using two benchmark tasks with neural networks as function approximation.", "creator": "LaTeX with hyperref package"}}}