{"id": "1610.09027", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Oct-2016", "title": "Scaling Memory-Augmented Neural Networks with Sparse Reads and Writes", "abstract": "These models look promising for applications such as voice modeling and machine translation, but they scale poorly both spatially and temporally as the amount of memory grows - limiting their applicability to real areas. We show that SAM reaches asymptotically lower limits in space and time, and that an implementation runs $1,\\! 000\\ times faster and at $3,\\! 000\\ times less physical memory than non-sparse models. SAM learns with comparable data efficiency to existing models on a range of synthetic tasks and one-time character recognition, and can scale to tasks that require $100,\\! 000\\ times less physical memory than non-sparse models.", "histories": [["v1", "Thu, 27 Oct 2016 22:38:05 GMT  (2240kb,D)", "http://arxiv.org/abs/1610.09027v1", "in 30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain"]], "COMMENTS": "in 30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["jack w rae", "jonathan j hunt", "ivo danihelka", "timothy harley", "andrew w senior", "gregory wayne", "alex graves", "tim lillicrap"], "accepted": true, "id": "1610.09027"}, "pdf": {"name": "1610.09027.pdf", "metadata": {"source": "CRF", "title": "Scaling Memory-Augmented Neural Networks with Sparse Reads and Writes", "authors": ["Jack W Rae", "Jonathan J Hunt", "Tim Harley tharley", "Ivo Danihelka", "Timothy P Lillicrap"], "emails": ["@google.com"], "sections": [{"heading": "1 Introduction", "text": "Recurrent neural networks, such as the Long Short-Term Memory (LSTM) [11], have proven to be powerful sequence learning models [6, 18]. However, one limitation of the LSTM architecture is that the number of parameters grows proportionally to the square of the size of the memory, making them unsuitable for problems requiring large amounts of long-term memory. Recent approaches, such as Neural Turing Machines (NTMs) [7] and Memory Networks [21], have addressed this issue by decoupling the memory capacity from the number of model parameters. We refer to this class of models as memory augmented neural networks (MANNs). External memory allows MANNs to learn algorithmic solutions to problems that have eluded the capabilities of traditional LSTMs, and to generalize to longer sequence lengths. Nonetheless, MANNs have had limited success in real world application.\nA significant difficulty in training these models results from their smooth read and write operations, which incur linear computational overhead on the number of memories stored per time step of training. Even worse, they require duplication of the entire memory at each time step to perform backpropagation through time (BPTT). To deal with sufficiently complex problems, such as processing \u2217These authors contributed equally.\n30th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nar X\niv :1\n61 0.\n09 02\n7v 1\n[ cs\n.L G\n] 2\na book, or Wikipedia, this overhead becomes prohibitive. For example, to store 64 memories, a straightforward implementation of the NTM trained over a sequence of length 100 consumes \u2248 30 MiB physical memory; to store 64,000 memories the overhead exceeds 29 GiB (see Figure 1). In this paper, we present a MANN named SAM (sparse access memory). By thresholding memory modifications to a sparse subset, and using efficient data structures for content-based read operations, our model is optimal in space and time with respect to memory size, while retaining end-to-end gradient based optimization. To test whether the model is able to learn with this sparse approximation, we examined its performance on a selection of synthetic and natural tasks: algorithmic tasks from the NTM work [7], Babi reasoning tasks used with Memory Networks [17] and Omniglot one-shot classification [16, 12]. We also tested several of these tasks scaled to longer sequences via curriculum learning. For large external memories we observed improvements in empirical run-time and memory overhead by up to three orders magnitude over vanilla NTMs, while maintaining near-identical data efficiency and performance.\nFurther, in Supplementary D we demonstrate the generality of our approach by describing how to construct a sparse version of the recently published Differentiable Neural Computer [8]. This Sparse Differentiable Neural Computer (SDNC) is over 400\u00d7 faster than the canonical dense variant for a memory size of 2,000 slots, and achieves the best reported result in the Babi tasks without supervising the memory access."}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 Attention and content-based addressing", "text": "An external memory M \u2208 RN\u00d7M is a collection of N real-valued vectors, or words, of fixed size M . A soft read operation is defined to be a weighted average over memory words,\nr = N\u2211 i=1 w(i)M(i) , (1)\nwhere w \u2208 RN is a vector of weights with non-negative entries that sum to one. Attending to memory is formalized as the problem of computing w. A content addressable memory, proposed in [7, 21, 2, 17], is an external memory with an addressing scheme which selects w based upon the similarity of memory words to a given query q. Specifically, for the ith read weight w(i) we define,\nw(i) = f (d(q,M(i)))\u2211N j=1 f (d(q,M(j)) , (2)\nwhere d is a similarity measure, typically Euclidean distance or cosine similarity, and f is a differentiable monotonic transformation, typically a softmax. We can think of this as an instance of kernel smoothing where the network learns to query relevant points q. Because the read operation (1) and content-based addressing scheme (2) are smooth, we can place them within a neural network, and train the full model using backpropagation."}, {"heading": "2.2 Memory Networks", "text": "One recent architecture, Memory Networks, make use of a content addressable memory that is accessed via a series of read operations [21, 17] and has been successfully applied to a number of question answering tasks [20, 10]. In these tasks, the memory is pre-loaded using a learned embedding of the provided context, such as a paragraph of text, and then the controller, given an embedding of the question, repeatedly queries the memory by content-based reads to determine an answer."}, {"heading": "2.3 Neural Turing Machine", "text": "The Neural Turing Machine is a recurrent neural network equipped with a content-addressable memory, similar to Memory Networks, but with the additional capability to write to memory over time. The memory is accessed by a controller network, typically an LSTM, and the full model is differentiable \u2014 allowing it to be trained via BPTT.\nA write to memory, Mt \u2190 (1\u2212Rt) Mt\u22121 + At , (3)\nconsists of a copy of the memory from the previous time step Mt\u22121 decayed by the erase matrix Rt indicating obsolete or inaccurate content, and an addition of new or updated information At. The erase matrix Rt = wWt e T t is constructed as the outer product between a set of write weights wWt \u2208 [0, 1]N and erase vector et \u2208 [0, 1]M . The add matrix AT = wWt aTt is the outer product between the write weights and a new write word at \u2208 RM , which the controller outputs."}, {"heading": "3 Architecture", "text": "This paper introduces Sparse Access Memory (SAM), a new neural memory architecture with two innovations. Most importantly, all writes to and reads from external memory are constrained to a sparse subset of the memory words, providing similar functionality as the NTM, while allowing computational and memory efficient operation. Secondly, we introduce a sparse memory management scheme that tracks memory usage and finds unused blocks of memory for recording new information.\nFor a memory containing N words, SAM executes a forward, backward step in \u0398(logN) time, initializes in \u0398(N) space, and consumes \u0398(1) space per time step. Under some reasonable assumptions, SAM is asymptotically optimal in time and space complexity (Supplementary A)."}, {"heading": "3.1 Read", "text": "The sparse read operation is defined to be a weighted average over a selection of words in memory:\nr\u0303t = K\u2211 i=1 w\u0303Rt (si)Mt(si), (4)\nwhere w\u0303Rt \u2208 RN contains K number of non-zero entries with indices s1, s2, . . . , sK ; K is a small constant, independent of N , typically K = 4 or K = 8. We will refer to sparse analogues of weight vectors w as w\u0303, and when discussing operations that are used in both the sparse and dense versions of our model use w.\nWe wish to construct w\u0303Rt such that r\u0303t \u2248 rt. For content-based reads where wRt is defined by (2), an effective approach is to keep the K largest non-zero entries and set the remaining entries to zero. We can compute w\u0303Rt naively in O(N) time by calculating wRt and keeping the K largest values. However, linear-time operation can be avoided. Since the K largest values in wRt correspond to the K closest points to our query qt, we can use an approximate nearest neighbor data-structure, described in Section 3.5, to calculate w\u0303Rt in O(logN) time. Sparse read can be considered a special case of the matrix-vector product defined in (1), with two key distinctions. The first is that we pass gradients for only a constant K number of rows of memory per time step, versus N , which results in a negligible fraction of non-zero error gradient per timestep when the memory is large. The second distinction is in implementation: by using an efficient sparse matrix format such as Compressed Sparse Rows (CSR), we can compute (4) and its gradients in constant time and space (see Supplementary A)."}, {"heading": "3.2 Write", "text": "The write operation is SAM is an instance of (3) where the write weights w\u0303Wt are constrained to contain a constant number of non-zero entries. This is done by a simple scheme where the controller writes either to previously read locations, in order to update contextually relevant memories, or the least recently accessed location, in order to overwrite stale or unused memory slots with fresh content.\nThe introduction of sparsity could be achieved via other write schemes. For example, we could use a sparse content-based write scheme, where the controller chooses a query vector qWt and applies writes to similar words in memory. This would allow for direct memory updates, but would create problems when the memory is empty (and shift further complexity to the controller). We decided upon the previously read / least recently accessed addressing scheme for simplicity and flexibility.\nThe write weights are defined as wWt = \u03b1t ( \u03b3t w R t\u22121 + (1\u2212 \u03b3t) IUt ) , (5)\nwhere the controller outputs the interpolation gate parameter \u03b3t and the write gate parameter \u03b1t. The write to the previously read locations wRt\u22121 is purely additive, while the least recently accessed word IUt is set to zero before being written to. When the read operation is sparse (wRt\u22121 has K non-zero entries), it follows the write operation is also sparse.\nWe define IUt to be an indicator over words in memory, with a value of 1 when the word minimizes a usage measure Ut\nIUt (i) =\n{ 1 if Ut(i) = min\nj=1,...,N Ut(j)\n0 otherwise. (6)\nIf there are several words that minimize Ut then we choose arbitrarily between them. We tried two definitions of Ut. The first definition is a time-discounted sum of write weights U\n(1) T (i) =\u2211T\nt=0 \u03bb T\u2212t (wWt (i) + w R t (i)) where \u03bb is the discount factor. This usage definition is incorporated within Dense Access Memory (DAM), a dense-approximation to SAM that is used for experimental comparison in Section 4.\nThe second usage definition, used by SAM, is simply the number of time-steps since a non-negligible memory access: U (2)T (i) = T \u2212max { t : wWt (i) + wRt (i) > \u03b4} . Here, \u03b4 is a tuning parameter that we typically choose to be 0.005. We maintain this usage statistic in constant time using a custom data-structure (described in Supplementary A). Finally we also use the least recently accessed word to calculate the erase matrix. Rt = IUt 1T is defined to be the expansion of this usage indicator where 1 is a vector of ones. The total cost of the write is constant in time and space for both the forwards and backwards pass, which improves on the linear space and time dense write (see Supplementary A)."}, {"heading": "3.3 Controller", "text": "We use a one layer LSTM for the controller throughout. At each time step, the LSTM receives a concatenation of the external input, xt, the word, rt\u22121 read in the previous time step. The LSTM then produces a vector, pt = (qt, at, \u03b1t, \u03b3t), of read and write parameters for memory access via a linear layer. The word read from memory for the current time step, rt, is then concatenated with the output of the LSTM, and this vector is fed through a linear layer to form the final output, yt. The full control flow is illustrated in Supplementary Figure 6."}, {"heading": "3.4 Efficient backpropagation through time", "text": "We have already demonstrated how the forward operations in SAM can be efficiently computed in O(T logN) time. However, when considering space complexity of MANNs, there remains a dependence on Mt for the computation of the derivatives at the corresponding time step. A naive implementation requires the state of the memory to be cached at each time step, incurring a space overhead of O(NT ), which severely limits memory size and sequence length. Fortunately, this can be remedied. Since there are only O(1) words that are written at each time step, we instead track the sparse modifications made to the memory at each timestep, apply them in-place to compute Mt in O(1) time and O(T ) space. During the backward pass, we can restore the state of Mt from Mt+1 in O(1) time by reverting the sparse modifications applied at time step t. As such the memory is actually rolled back to previous states during backpropagation (Supplementary Figure 5).\nAt the end of the backward pass, the memory ends rolled back to the start state. If required, such as when using truncating BPTT, the final memory state can be restored by making a copy of MT prior to calling backwards in O(N) time, or by re-applying the T sparse updates in O(T ) time."}, {"heading": "3.5 Approximate nearest neighbors", "text": "When querying the memory, we can use an approximate nearest neighbor index (ANN) to search over the external memory for the K nearest words. Where a linear KNN search inspects every element in\nmemory (taking O(N) time), an ANN index maintains a structure over the dataset to allow for fast inspection of nearby points in O(logN) time. In our case, the memory is still a dense tensor that the network directly operates on; however the ANN is a structured view of its contents. Both the memory and the ANN index are passed through the network and kept in sync during writes. However there are no gradients with respect to the ANN as its function is fixed.\nWe considered two types of ANN indexes: FLANN\u2019s randomized k-d tree implementation [15] that arranges the datapoints in an ensemble of structured (randomized k-d) trees to search for nearby points via comparison-based search, and one that uses locality sensitive hash (LSH) functions that map points into buckets with distance-preserving guarantees. We used randomized k-d trees for small word sizes and LSHs for large word sizes. For both ANN implementations, there is an O(logN) cost for insertion, deletion and query. We also rebuild the ANN from scratch every N insertions to ensure it does not become imbalanced."}, {"heading": "4 Results", "text": ""}, {"heading": "4.1 Speed and memory benchmarks", "text": "We measured the forward and backward times of the SAM architecture versus the dense DAM variant and the original NTM (details of setup in Supplementary E). SAM is over 100 times faster than the NTM when the memory contains one million words and an exact linear-index is used, and 1600 times faster with the k-d tree (Figure 1a). With an ANN the model runs in sublinear time with respect to the memory size. SAM\u2019s memory usage per time step is independent of the number of memory words (Figure 1b), which empirically verifies the O(1) space claim from Supplementary A. For 64 K memory words SAM uses 53 MiB of physical memory to initialize the network and 7.8 MiB to run a 100 step forward and backward pass, compared with the NTM which consumes 29 GiB."}, {"heading": "4.2 Learning with sparse memory access", "text": "We have established that SAM reaps a huge computational and memory advantage of previous models, but can we really learn with SAM\u2019s sparse approximations? We investigated the learning cost of inducing sparsity, and the effect of placing an approximate nearest neighbor index within the network, by comparing SAM with its dense variant DAM and some established models, the NTM and the LSTM.\nWe trained each model on three of the original NTM tasks [7]. 1. Copy: copy a random input sequence of length 1\u201320, 2. Associative Recall: given 3-6 random (key, value) pairs, and subsequently a cue key, return the associated value. 3. Priority Sort: Given 20 random keys and priority values, return\nthe top 16 keys in descending order of priority. We chose these tasks because the NTM is known to perform well on them.\nFigure 2 shows that sparse models are able to learn with comparable efficiency to the dense models and, surprisingly, learn more effectively for some tasks \u2014 notably priority sort and associative recall. This shows that sparse reads and writes can actually benefit early-stage learning in some cases.\nFull hyperparameter details are in Supplementary C."}, {"heading": "4.3 Scaling with a curriculum", "text": "The computational efficiency of SAM opens up the possibility of training on tasks that require storing a large amount of information over long sequences. Here we show this is possible in practice, by scaling tasks to a large scale via an exponentially increasing curriculum.\nWe parametrized three of the tasks described in Section 4.2: associative recall, copy, and priority sort, with a progressively increasing difficulty level which characterises the length of the sequence and number of entries to store in memory. For example, level specifies the input sequence length for the copy task. We exponentially increased the maximum level h when the network begins to learn the fundamental algorithm. Since the time taken for a forward and backward pass scales O(T ) with the sequence length T , following a standard linearly increasing curriculum could potentially take O(T 2), if the same amount of training was required at each step of the curriculum. Specifically, h was doubled whenever the average training loss dropped below a threshold for a number of episodes. The level was sampled for each minibatch from the uniform distribution over integers U(0, h). We compared the dense models, NTM and DAM, with both SAM with an exact nearest neighbor index (SAM linear) and with locality sensitive hashing (SAM ANN). The dense models contained 64 memory words, while the sparse models had 2\u00d7 106 words. These sizes were chosen to ensure all models use approximately the same amount of physical memory when trained over 100 steps.\nFor all tasks, SAM was able to advance further than the other models, and in the associative recall task, SAM was able to advance through the curriculum to sequences greater than 4000 (Figure 3). Note that we did not use truncated backpropagation, so this involved BPTT for over 4000 steps with a memory size in the millions of words.\nTo investigate whether SAM was able to learn algorithmic solutions to tasks, we investigated its ability to generalize to sequences that far exceeded those observed during training. Namely we trained SAM on the associative recall task up to sequences of length 10, 000, and found it was then able to generalize to sequences of length 200,000 (Supplementary Figure 8)."}, {"heading": "4.4 Question answering on the Babi tasks", "text": "[20] introduced toy tasks they considered a prerequisite to agents which can reason and understand natural language. They are synthetically generated language tasks with a vocab of about 150 words that test various aspects of simple reasoning such as deduction, induction and coreferencing.\nWe tested the models (including the Sparse Differentiable Neural Computer described in Supplementary D) on this task. The full results and training details are described in Supplementary G.\nThe MANNs, except the NTM, are able to learn solutions comparable to the previous best results, failing at only 2 of the tasks. The SDNC manages to solve all but 1 of the tasks, the best reported result on Babi that we are aware of.\nNotably the best prior results have been obtained by using supervising the memory retrieval (during training the model is provided annotations which indicate which memories should be used to answer a query). More directly comparable previous work with end-to-end memory networks, which did not use supervision [17], fails at 6 of the tasks.\nBoth the sparse and dense perform comparably at this task, again indicating the sparse approximations do not impair learning. We believe the NTM may perform poorly since it lacks a mechanism which allows it to allocate memory effectively."}, {"heading": "4.5 Learning on real world data", "text": "Finally, we demonstrate that the model is capable of learning in a non-synthetic dataset. Omniglot [12] is a dataset of 1623 characters taken from 50 different alphabets, with 20 examples of each character. This dataset is used to test rapid, or one-shot learning, since there are few examples of each character but many different character classes. Following [16], we generate episodes where a subset of characters are randomly selected from the dataset, rotated and stretched, and assigned a randomly chosen label. At each time step an example of one of the characters is presented, along with the correct label of the proceeding character. Each character is presented 10 times in an episode (but each presentation may be any one of the 20 examples of the character). In order to succeed at the task the model must learn to rapidly associate a novel character with the correct label, such that it can correctly classify subsequent examples of the same character class.\nAgain, we used an exponential curriculum, doubling the number of additional characters provided to the model whenever the cost was reduced under a threshold. After training all MANNs for the same length of time, a validation task with 500 characters was used to select the best run, and this was then tested on a test set, containing all novel characters for different sequence lengths (Figure 4). All of the MANNs were able to perform much better than chance, even on sequences \u2248 4\u00d7 longer than seen during training. SAM outperformed other models, presumably due to its much larger memory capacity. Previous results on the Omniglot curriculum [16] task are not identical, since we used 1-hot labels throughout and the training curriculum scaled to longer sequences, but our results with the dense models are comparable (\u2248 0.4 errors with 100 characters), while the SAM is significantly better (0.2 < errors with 100 characters)."}, {"heading": "5 Discussion", "text": "Scaling memory systems is a pressing research direction due to potential for compelling applications with large amounts of memory. We have demonstrated that you can train neural networks with large memories via a sparse read and write scheme that makes use of efficient data structures within the network, and obtain significant speedups during training. Although we have focused on a specific MANN (SAM), which is closely related to the NTM, the approach taken here is general and can be applied to many differentiable memory architectures, such as Memory Networks [21].\nIt should be noted that there are multiple possible routes toward scalable memory architectures. For example, prior work aimed at scaling Neural Turing Machines [22] used reinforcement learning to train a discrete addressing policy. This approach also touches only a sparse set of memories at each time step, but relies on higher variance estimates of the gradient during optimization. Though we can only guess at what class of memory models will become staple in machine learning systems of the future, we argue in Supplementary A that they will be no more efficient than SAM in space and time complexity if they address memories based on content.\nWe have experimented with randomized k-d trees and LSH within the network to reduce the forward pass of training to sublinear time, but there may be room for improvement here. K-d trees were not designed specifically for fully online scenarios, and can become imbalanced during training. Recent work in tree ensemble models, such as Mondrian forests [13], show promising results in maintaining balanced hierarchical set coverage in the online setting. An alternative approach which may be well-suited is LSH forests [3], which adaptively modifies the number of hashes used. It would be an interesting empirical investigation to more fully assess different ANN approaches in the challenging context of training a neural network.\nHumans are able to retain a large, task-dependent set of memories obtained in one pass with a surprising amount of fidelity [4]. Here we have demonstrated architectures that may one day compete with humans at these kinds of tasks."}, {"heading": "Acknowledgements", "text": "We thank Vyacheslav Egorov, Edward Grefenstette, Malcolm Reynolds, Fumin Wang and Yori Zwols for their assistance, and the Google DeepMind family for helpful discussions and encouragement."}, {"heading": "A Time and space complexity", "text": "Under a reasonable class of content addressable memory architectures A, SAM is optimal in time and space complexity.\nDefinition 1. LetM be a collection of real vectors m1,m2, . . . ,mN of fixed dimension d. Let A be the set of all content addressable memory data structures that storeM and can return at least one word mj such that D(q,mj) \u2264 c (1 + ) for a given Lp norm D, query vector q, and > 0; provided such a memory mc exists with D(q,mc) = c.\nExisting lower bounds [14, 1] assert that for any data structure a \u2208 A, a requires \u2126(logN) time and \u2126(N) space to perform a read operation. The SAM memory architecture proposed in this paper is contained within A as it computes the approximate nearest neighbors problem in fixed dimensions [15]. As we will show, SAM requires O(logN) time to query and maintain the ANN, O(1) to perform all subsequent sparse read, write, and error gradient calculations. It requires O(N) space to initialize the memory and O(1) to store intermediate sparse tensors. We thus conclude it is optimal in asymptotic time and space complexity.\nA.1 Initialization\nUpon initialization, SAM consumes O(N) space and time to instantiate the memory and the memory Jacobian. Furthermore, it requires O(N) time and space to initialize auxiliary data structures which index the memory, such as the approximate nearest neighbor which provides a content-structured view of the memory, and the least accessed ring, which maintains the temporal ordering in which memory words are accessed. These initializations represent an unavoidable one-off cost that does not recur per step of training, and ultimately has little effect on training speed. For the remainder of the analysis we will concentrate on the space and time cost per training step.\nA.2 Read\nRecall the sparse read operation,\nr\u0303t = K\u2211 i=1 w\u0303Rt (si)Mt(si) . (7)\nAs K is chosen to be a fixed constant, it is clear we can compute (7) in O(1) time. During the backward pass, we see the gradients are sparse with only K non-zero terms,\n\u2202L\n\u2202w\u0303Rt (i) =\n{ Mt(i) \u00b7 \u2202L\u2202r\u0303t if i \u2208 {s1, s2, . . . , sK} 0 otherwise.\nand \u2202L\n\u2202Mt (i) =\n{ w\u0303Rt (i)\n\u2202L \u2202r\u0303t if i \u2208 {s1, s2, . . . , sK} 0 otherwise.\nwhere 0 is a vector of M zeros. Thus they can both be computed in constant time by skipping the computation of zeros. Furthermore by using an efficient sparse matrix format to store these matrices and vectors, such as the CSR, we can represent them using at most 3K values. Since the read word r\u0303t and its respective error gradient is the size of a single word in memory (M elements), the overall space complexity is O(1) per time step for the read.\nA.3 Write\nRecall the write operation,\nMt \u2190Mt\u22121 \u2212Et + At, , (8)\nwhere At = wWt aTt is the add matrix, Et = Mt\u22121 Rt is the erase matrix, and Rt = IUt 1T is defined to be the erase weight matrix. We chose the write weights to be an interpolation between the least recently accessed location and the previously read locations,\nwWt = \u03b1t ( \u03b3t w\u0303 R t\u22121 + (1\u2212 \u03b3t) IUt ) . (9)\nFor sparse reads where wRt = w\u0303Rt is a sparse vector with K non-zeros, the write weights wWt is also sparse with K + 1 non-zeros: 1 for the least recently accessed location and K for the previously read locations. Thus the sparse-dense outer product At = wWt aTt can be performed in O(1) time as K is a fixed constant.\nSince Rt = IUt 1T can be represented as a sparse matrix with one single non-zero, the erase matrix Et can also. As At and Et are sparse matrices we can then add them component-wise to the dense Mt\u22121 in O(1) time. By analogous arguments the backward pass can be computed in O(1) time and each sparse matrix can be represented in O(1) space.\nWe avoid caching the modified memory, and thus duplicating it, by applying the write directly to the memory. To restore its prior state during the backward pass, which is crucial to gradient calculations at earlier time steps, we roll the memory it back by reverting the sparse modifications with an additional O(1) time overhead (Supplementary Figure 5).\nThe location of the least recently accessed memory can be maintained in O(1) time by constructing a circular linked list that tracks the indices of words in memory, and preserves a strict ordering of relative temporal access. The first element in the ring is the least recently accessed word in memory, and the last element in the ring is the most recently modified. We keep a \u201chead\u201d pointer to the first element in the ring. When a memory word is randomly accessed, we can push its respective index to the back of the ring in O(1) time by redirecting a small number of pointers. When we wish to pop the least recently accessed memory (and write to it) we move the head to the next element in the ring in O(1) time.\nA.4 Content-based addressing\nAs discussed in Section 3.5 we can calculate the content-based attention, or read weights wRt , in O(logN) time using an approximate nearest neighbor index that views the memory. We keep the ANN index synchronized with the memory by passing it through the network as a non-differentiable member of the network\u2019s state (so we do not pass gradients for it), and we update the index upon each write or erase to memory in O(logN) time. Maintaining and querying the ANN index represents the most expensive part of the network, which is reasonable as content-based addressing is inherently expensive [14, 1].\nFor the backward pass computation, specifically calculating \u2202L \u2202qt and \u2202L \u2202Mt with respect to wRt , we can once again compute these using sparse matrix operations in O(1) time. This is because the K non-zero locations have been determined during the forward pass.\nThus to conclude, SAM consumes in total O(1) space for both the forward and backward step during training, O(logN) time per forward step, and O(1) per backward step.\nB Control flow"}, {"heading": "C Training details", "text": "Here we provide additional details on the training regime used for our experiments used in Figure 2.\nTo avoid bias in our results, we chose the learning rate that worked best for DAM (and not SAM). We tried learning rates {10\u22126, 5\u00d7 10\u22125, 10\u22125, 5\u00d7 10\u22124, 10\u22124} and found that DAM trained best with 10\u22125. We also tried values of K {4, 8, 16} and found no significant difference in performance across the values. We used 100 hidden units for the LSTM (including the controller LSTMs), a minibatch of 8, 8 asynchronous workers to speed up training, and RMSProp [19] to optimize the controller. We used 4 memory access heads and configured SAM to read from only K = 4 locations per head."}, {"heading": "D Sparse Differentiable Neural Computer", "text": "Recently [8] proposed a novel MANN the Differentiable Neural Computer (DNC). The two innovations proposed by this model are a new approach to tracking memory freeness (dynamic memory allocation) and a mechanism for associating memories together (temporal memory linkage). We demonstrate here that the approaches enumerated in the paper can be adapted to new models by outlining a sparse version of this model, the Sparse Differentiable Neural Computer (SDNC), which learns with similar data efficiency while retaining the computational advantages of sparsity.\nD.1 Architecture\nFor brevity, we will only explain the sparse implementations of these two items, for the full model details refer to the original paper. The mechanism for sparse memory reads and writes was implemented identically to SAM.\nIt is possible to implement a scalable version of the dynamic memory allocation system of the DNC avoiding any O(N) operations by using a heap. However, because it is practical to run the SDNC with many more memory words, reusing memory is less crucial so we did not implement this and used the same usage tracking as in SAM.\nThe temporal memory linkage in the DNC is a system for associating and recalling memory locations which were written in a temporal order, for exampling storing and retrieving a list. In the DNC this is done by maintaining a temporal linkage matrix Lt \u2208 [0, 1]N\u00d7N . Lt[i, j] represents the degree to which location i was written to after location j. This matrix is updated by tracking the precedence weighting pt, where pt(i) represents the degree to which location i was written to.\np0 = 0 (10) pt = (1\u2212 \u2211 i wWt (i)) pt\u22121 + w W t (11)\nThe memory linkage is updated according to the following recurrence\nL0 = 0 (12)\nLt(i, j) = { 0 i = j (1\u2212 wWt (i)\u2212 wWt (j))Lt\u22121(i, j) + wWt (i)pt\u22121(j) i 6= j\n(13)\n(14)\nThe temporal linkage Lt can be used to compute read weights following the temporal links either forward\nfrt = Ltw r t\u22121 (15)\nor backward brt = L T t w r t\u22121 (16)\nThe read head then uses a 3-way softmax to select between a content-based read or following the forward or backward weighting.\nNaively, the link matrix requires O(N2) memory and computation although [8] proposes a method to reduce the computational cost to O(N logN) and O(N) memory cost.\nIn order to maintain the scaling properties of the SAM, we wish to avoid any computational dependence on N . We do this by maintaining two sparse matrices Nt,Pt \u2208 [0, 1]N\u00d7{KL} that approximate Lt and LTt respectively. We store these matrices in Compressed Sparse Row format. They are defined by the following updates:\nN0 = 0 (17) P0 = 0 (18)\nNt(i, j) = (1\u2212 wWt (i))Nt\u22121(i, j) + wWt (i) pt\u22121(j) (19)\nPt(i, j) = (1\u2212 wWt (j))Pt\u22121(i, j) + wWt (j) pt\u22121(i) (20)\nAdditionally, pt is, as with the other weight vectors maintained as a sparse vector with at most KL non-zero entries. This means that the outer product of wtpTt\u22121 has at most K2L non-zero entries. In addition to the updates specified above, we also constrain each row of the matrices Nt and Pt to have at most KL non-zero entries \u2014 this constraint can be applied in O(K2L) because at most KL rows change in the matrix.\nOnce these matrices are applied the read weights following the temporal links can be computed similar to before:\nfrt = Ntw r t\u22121 (21) brt = Ptw r t\u22121 (22)\nNote, the number of locations we read from, K, does not have to equal the number of outward and inward links we preserve, KL. We typically choose KL = 8 as this is still very fast to compute (100\u00b5s in total to calculate Nt,Pt, pt, f r t , b r t on a single CPU thread) and we see no learning benefit with larger KL. In order to compute the gradients, Nt and Pt need to be stored. This could be done by maintaining a sparse record of the updates applied and reversing them, similar to that performed with the memory as described in Section 3.4. However, for implementation simplicity we did not pass gradients through the temporal linkage matrices.\nD.2 Results\nWe benchmarked the speed and memory performance of the SDNC versus a naive DNC implementation (details of setup in Supplementary E). The results are displayed in Figure 7. Here, the computational benefits of sparsity are more pronounced due to the expensive (quadratic time and space) temporal transition table operations in the DNC. We were only able to run comparative benchmarks up to N = 2048, as the DNC quickly exceeded the machine\u2019s physical memory for larger values; however even at this modest memory size we see a speed increase\nof \u2248 440\u00d7 and physical memory reduction of \u2248 240\u00d7. Note, unlike the SAM memory benchmark in Section 4 we plot the total memory consumption, i.e. the memory overhead of the initial start state plus the memory overhead of unrolling the core over a sequence. This is because the SDNC and DNC do not have identical start states. The sparse temporal transition matrices N0,P0 \u2208 [0, 1]N\u00d7N{K} consume much less memory than the corresponding L0 \u2208 [0, 1]N\u00d7N in the DNC.\nIn order to compare the models on an interesting task we ran the DNC and SDNC on the Babi task (this task is described more fully in the main text). The results are described in Supplementary G and demonstrate the SDNC is capable of learning competitively. In particular, it achieves the best report result on the Babi task."}, {"heading": "E Benchmarking details", "text": "Each model contained an LSTM controller with 100 hidden units, an external memory containing N slots of memory, with word size 32 and 4 access heads. For speed benchmarks, a minibatch size of 8 was used to ensure fair comparison - as many dense operations (e.g. matrix multiplication) can be batched efficiently. For memory benchmarks, the minibatch size was set to 1.\nWe used Torch7 [5] to implement SAM, DAM, NTM, DNC and SDNC. Eigen v3 [9] was used for the fast sparse tensor operations, using the provided CSC and CSR formats. All benchmarks were run on a Linux desktop running Ubuntu 14.04.1 with 32GiB of RAM and an Intel Xeon E5-1650 3.20GHz processor with power scaling disabled.\nF Generalization on associative recall"}, {"heading": "G Babi results", "text": "See the main text for a description of the Babi task and its relevance. Here we report the best and mean results for all of the models on this task.\nThe task was encoded using straightforward 1-hot word encodings for both the input and output. We trained a single model on all of the tasks, and used the 10,000 examples per task version of the training set (a small subset of which we used as a validation set for selecting the best run and hyperparameters). Previous work has reported best results (Supplementary table 1), which with only 15 runs is a noisy comparison, so we additionally report the mean and variance for all runs with the best selected hyperparameters (Supplementary table 2).\nL ST\nM D\nN C\nSD N\nC D\nA M\nSA M\nN T\nM M\nN S\nM N U 1: 1 su pp or tin g fa ct 2 8. 8 0. 0 0. 0 0. 0 0. 0 1 6. 4 0 .0 0 .0 2: 2 su pp or tin g fa ct s 5 7. 3 3. 2 0. 6 0. 2 0. 2 5 6. 3 0 .0 1 .0 3: 3 su pp or tin g fa ct s 5 3. 7 9. 5 0. 7 1. 3 0. 5 4 9. 0 0 .0 6 .8 4: 2 ar gu m en tr el at io ns 0 .7 0. 0 0. 0 0. 0 0. 0 0 .0 0 .0 0 .0 5: 3 ar gu m en tr el at io ns 3 .5 1. 7 0. 3 0. 4 0. 7 2 .5 0 .3 6 .1 6: ye s/ no qu es tio ns 1 7. 6 0. 0 0. 0 0. 0 0. 0 9 .6 0 .0 0 .1 7: co un tin g 1 8. 5 5. 3 0. 2 0. 4 1. 9 1 2. 0 3 .3 6 .6 8: lis ts /s et s 2 0. 9 2. 0 0. 2 0. 0 0. 4 6 .5 1 .0 2 .7 9: si m pl e ne ga tio n 1 8. 2 0. 1 0. 0 0. 0 0. 1 7 .0 0 .0 0 .0 10 :i nd efi ni te kn ow le dg e 3 4. 0 0. 6 0. 2 0. 0 0. 2 7 .6 0 .0 0 .5 11 :b as ic co re fe re nc e 9 .0 0. 0 0. 0 0. 0 0. 0 2 .5 0 .0 0 .0 12 :c on ju nc tio n 5 .5 0. 1 0. 1 0. 0 0. 1 4 .6 0 .0 0 .1 13 :c om po un d co re fe re nc e 6 .3 0. 4 0. 1 0. 0 0. 0 2 .0 0 .0 0 .0 14 :t im e re as on in g 5 6. 1 0. 2 0. 1 3. 8 4. 3 4 4. 2 0 .0 0 .0 15 :b as ic de du ct io n 4 9. 3 0. 1 0. 0 0. 0 0. 0 2 5. 4 0 .0 0 .2 16 :b as ic in du ct io n 5 3. 2 5 1 .9 5 4 .1 5 2 .8 5 3 .1 5 2. 2 0 .0 0 .2 17 :p os iti on al re as on in g 4 1. 7 2 1 .7 0. 3 6. 0 1 6 .0 3 9. 7 0 .0 4 1. 8 18 :s iz e re as on in g 8 .4 1. 8 0. 1 0. 3 1. 1 3 .6 2 4. 6 8 .0 19 :p at h fin di ng 7 6. 4 4. 3 1. 2 1. 5 2. 6 5 .8 2 .1 7 5. 7 20 :a ge nt \u2019s m ot iv at io ns 1 .9 0. 1 0. 0 0. 1 0. 0 2 .2 3 1. 9 0 .0 M ea n E rr or (% ) 2 8. 0 5. 2 2. 9 3. 3 4. 1 1 7. 5 3 .2 7 .5 Fa ile d ta sk s (e rr .> 5% ) 1 7 4 1 2 2 1 3 2 6\nTa bl\ne 1:\nTe st\nre su\nlts fo\nrt he\nbe st\nru n\n(c ho\nse n\nby va\nlid at\nio n\nse t)\non th\ne B\nab it\nas k.\nTh e\nm od\nel w\nas tra\nin ed\nan d\nte st\ned jo\nin tly\non al\nlt as\nks .A\nll ta\nsk s\nre ce\niv ed\nap pr\nox im\nat el y eq ua lt ra in in g re so ur ce s. B ot h SA M an d D A M pa ss al lb ut 2 of th e ta sk s, w ith ou ta ny su pe rv is io n of th ei r m em or y ac ce ss es . SD N C ac hi ev es th e be st re po rt ed re su lt on th is ta sk w ith un su pe rv is ed m em or y ac ce ss ,s ol vi ng al lb ut 1 ta sk .W e\u2019 ve in cl ud ed co m pa ri so n w ith m em or y ne tw or ks ,b ot h w ith su pe rv is io n of m em or ie s (M em N et S) an d, m or e di re ct ly co m pa ra bl e w ith ou ra pp ro ac h, le ar ni ng en dto -e nd (M em N et s U ).\nL ST\nM D\nN C\nSD N\nC D\nA M\nSA M\nN T M 1: 1 su pp or tin g fa ct 3 0. 9 \u00b1 1. 5 2. 2 \u00b1 5 .6 0. 0 \u00b1 0 .0 2. 9 \u00b1 1 0. 7 4. 7 \u00b1 1 2. 8 3 1 .5 \u00b1\n1 5 .3\n2: 2\nsu pp\nor tin\ng fa\nct s\n5 7.\n4 \u00b1\n1. 2\n2 3 .9 \u00b1\n2 1 .0\n7. 1 \u00b1\n1 4.\n6 1 2 .1 \u00b1\n1 9 .3\n3 0 .9 \u00b1\n2 5 .1\n5 7 .0 \u00b1\n1. 3\n3: 3\nsu pp\nor tin\ng fa\nct s\n5 3.\n0 \u00b1\n1. 4\n2 9 .7 \u00b1\n1 5 .8\n9. 4 \u00b1\n1 6.\n7 1 5 .3 \u00b1\n1 7 .4\n3 1 .4 \u00b1\n2 1 .6\n4 9 .4 \u00b1\n1. 3\n4: 2\nar gu\nm en\ntr el\nat io\nns 0 .7 \u00b1\n0. 4\n0. 1 \u00b1\n0 .1\n0. 1 \u00b1\n0 .1\n0. 1 \u00b1\n0 .1\n0. 2 \u00b1\n0 .2\n0. 4 \u00b1\n0. 3\n5: 3\nar gu\nm en\ntr el\nat io\nns 4 .9 \u00b1\n0. 9\n1. 3 \u00b1\n0 .3\n0. 9 \u00b1\n0 .3\n1. 0 \u00b1\n0 .4\n1. 0 \u00b1\n0 .5\n2. 7 \u00b1\n1. 2\n6: ye\ns/ no\nqu es\ntio ns\n1 8.\n8 \u00b1\n1. 0\n2. 8 \u00b1\n5 .0\n0. 1 \u00b1\n0 .2\n1. 9 \u00b1\n5 .3\n3. 9 \u00b1\n6 .7\n1 8 .6 \u00b1\n2. 7\n7: co\nun tin\ng 1 8.\n2 \u00b1\n1. 1\n7. 3 \u00b1\n5 .9\n1. 6 \u00b1\n0 .9\n4. 5 \u00b1\n6 .1\n7. 3 \u00b1\n6 .6\n1 8 .7 \u00b1\n3. 2\n8: lis\nts /s\net s\n2 0.\n9 \u00b1\n1. 4\n4. 0 \u00b1\n4 .1\n0. 5 \u00b1\n0 .4\n2. 7 \u00b1\n5 .4\n3. 6 \u00b1\n6 .2\n1 8 .5 \u00b1\n5. 9\n9: si\nm pl\ne ne\nga tio\nn 1 9.\n4 \u00b1\n1. 5\n3. 0 \u00b1\n5 .2\n0. 0 \u00b1\n0 .1\n2. 1 \u00b1\n5 .5\n3. 8 \u00b1\n6 .7\n1 7 .6 \u00b1\n3. 4\n10 :i\nnd efi\nni te\nkn ow\nle dg\ne 3 3.\n0 \u00b1\n1. 6\n3. 2 \u00b1\n5 .9\n0. 3 \u00b1\n0 .2\n3. 4 \u00b1\n8 .1\n5. 7 \u00b1\n9 .2\n2 5 .6 \u00b1\n6. 9\n11 :b\nas ic\nco re\nfe re\nnc e\n1 5.\n9 \u00b1\n3. 3\n0. 9 \u00b1\n3 .0\n0. 0 \u00b1\n0 .0\n1. 5 \u00b1\n5 .5\n2. 6 \u00b1\n7 .9\n1 5 .2 \u00b1\n9. 4\n12 :c\non ju\nnc tio\nn 7 .0 \u00b1\n1. 3\n1. 5 \u00b1\n1 .6\n0. 2 \u00b1\n0 .3\n1. 8 \u00b1\n6 .4\n2. 9 \u00b1\n7 .9\n1 4 .7 \u00b1\n8. 9\n13 :c\nom po\nun d\nco re\nfe re\nnc e\n9 .1 \u00b1\n1. 4\n1. 5 \u00b1\n2 .5\n0. 1 \u00b1\n0 .1\n0. 6 \u00b1\n2 .2\n1. 3 \u00b1\n2 .4\n6. 8 \u00b1\n3. 3\n14 :t\nim e\nre as\non in\ng 5 7.\n0 \u00b1\n1. 6\n1 0 .6 \u00b1\n9. 4\n5. 6 \u00b1\n2 .9\n1 1 .5 \u00b1\n1 5 .0\n1 5 .0 \u00b1\n1 2 .6\n5 2 .6 \u00b1\n5. 1\n15 :b\nas ic\nde du\nct io\nn 4 8.\n1 \u00b1\n1. 3\n3 1 .3 \u00b1\n1 5 .6\n3. 6 \u00b1\n1 0.\n3 1 7 .2 \u00b1\n1 9 .7\n5. 5 \u00b1\n1 3.\n8 4 2 .0 \u00b1\n6. 9\n16 :b\nas ic\nin du\nct io\nn 5 3.\n8 \u00b1\n1. 4\n5 4 .0 \u00b1\n1. 9\n5 3 .0 \u00b1\n1. 3\n5 3 .8 \u00b1\n1. 0\n5 3 .6 \u00b1\n1. 2\n5 3 .8 \u00b1\n2. 1\n17 :p\nos iti\non al\nre as\non in\ng 4 0.\n8 \u00b1\n1. 8\n2 7 .7 \u00b1\n9. 4\n1 2 .4 \u00b1\n5. 9\n1 6 .9 \u00b1\n1 0 .3\n2 0 .4 \u00b1\n8. 6\n4 0 .1 \u00b1\n1. 3\n18 :s\niz e\nre as\non in\ng 7 .3 \u00b1\n1. 9\n3. 5 \u00b1\n1 .5\n1. 6 \u00b1\n1 .1\n1. 8 \u00b1\n1 .7\n3. 0 \u00b1\n1 .8\n5. 0 \u00b1\n1. 2\n19 :p\nat h\nfin di\nng 7 4.\n4 \u00b1\n1. 3\n4 4 .9 \u00b1\n2 9 .0\n3 0 .8 \u00b1\n2 4 .2\n2 3 .0 \u00b1\n2 5 .4\n3 3 .7 \u00b1\n2 7 .8\n6 0 .8 \u00b1\n2 4 .6\n20 :a\nge nt\n\u2019s m\not iv\nat io\nns 1 .7 \u00b1\n0. 4\n0. 1 \u00b1\n0 .2\n0. 0 \u00b1\n0 .0\n0. 1 \u00b1\n0 .5\n0. 0 \u00b1\n0 .0\n2. 0 \u00b1\n0. 3\nM ea\nn E\nrr or\n(% )\n2 8.\n7 \u00b1\n0. 5\n1 2 .8 \u00b1\n4. 7\n6. 4 \u00b1\n2 .5\n8. 7 \u00b1\n6 .4\n1 1 .5 \u00b1\n5. 9\n2 6 .6 \u00b1\n3. 7\nFa ile\nd ta\nsk s\n(e rr\n.> 5%\n) 1 7.\n1 \u00b1\n0. 8\n8. 2 \u00b1\n2 .5\n4. 1 \u00b1\n1 .6\n5. 4 \u00b1\n3 .4\n7. 1 \u00b1\n3 .4\n1 5 .5 \u00b1\n1. 7\nTa bl\ne 2:\nM ea\nn an\nd va\nri an\nce of\nte st\ner ro\nrs fo\nrt he\nbe st\nse to\nfh yp\ner pa\nra m\net er\ns (c\nho se\nn ac\nco rd\nin g\nth e\nva lid\nat io\nn se\nt) .S\nta tis\ntic s\nar e\nge ne\nra te\nd fr\nom 15\nru ns\n."}], "references": [{"title": "An optimal algorithm for approximate nearest neighbor searching fixed dimensions", "author": ["Sunil Arya", "David M. Mount", "Nathan S. Netanyahu", "Ruth Silverman", "Angela Y. Wu"], "venue": "J. ACM,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1998}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1409.0473,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Lsh forest: self-tuning indexes for similarity search", "author": ["Mayank Bawa", "Tyson Condie", "Prasanna Ganesan"], "venue": "In Proceedings of the 14th international conference on World Wide Web,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2005}, {"title": "Visual long-term memory has a massive storage capacity for object details", "author": ["Timothy F Brady", "Talia Konkle", "George A Alvarez", "Aude Oliva"], "venue": "Proceedings of the National Academy of Sciences,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2008}, {"title": "Torch7: A matlab-like environment for machine learning", "author": ["Ronan Collobert", "Koray Kavukcuoglu", "Cl\u00e9ment Farabet"], "venue": "In BigLearn, NIPS Workshop, number EPFL-CONF-192376,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["Alex Graves", "Abdel-rahman Mohamed", "Geoffrey Hinton"], "venue": "In Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Neural turing machines", "author": ["Alex Graves", "Greg Wayne", "Ivo Danihelka"], "venue": "arXiv preprint arXiv:1410.5401,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Hybrid computing using a neural network with dynamic external memory", "author": ["Alex Graves", "Greg Wayne", "Malcolm Reynolds", "Tim Harley", "Ivo Danihelka", "Agnieszka Grabska-Barwi\u0144ska", "Sergio G\u00f3mez Colmenarejo", "Edward Grefenstette", "Tiago Ramalho", "John Agapiou"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2016}, {"title": "The goldilocks principle: Reading children\u2019s books with explicit memory representations", "author": ["Felix Hill", "Antoine Bordes", "Sumit Chopra", "Jason Weston"], "venue": "arXiv preprint arXiv:1511.02301,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1997}, {"title": "Human-level concept learning through probabilistic program induction", "author": ["Brenden M Lake", "Ruslan Salakhutdinov", "Joshua B Tenenbaum"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2015}, {"title": "Mondrian forests: Efficient online random forests", "author": ["Balaji Lakshminarayanan", "Daniel M Roy", "Yee Whye Teh"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2014}, {"title": "Lower bounds on locality sensitive hashing", "author": ["Rajeev Motwani", "Assaf Naor", "Rina Panigrahy"], "venue": "SIAM Journal on Discrete Mathematics,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2007}, {"title": "Scalable nearest neighbor algorithms for high dimensional data", "author": ["Marius Muja", "David G. Lowe"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2014}, {"title": "Meta-learning with memory-augmented neural networks", "author": ["Adam Santoro", "Sergey Bartunov", "Matthew Botvinick", "Daan Wierstra", "T Lillicrap"], "venue": "In International conference on machine learning,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2016}, {"title": "End-to-end memory networks", "author": ["Sainbayar Sukhbaatar", "Jason Weston", "Rob Fergus"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2015}, {"title": "Sequence to sequence learning with neural networks", "author": ["Ilya Sutskever", "Oriol Vinyals", "Quoc V Le"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2014}, {"title": "Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude", "author": ["Tijmen Tieleman", "Geoffrey Hinton"], "venue": "COURSERA: Neural Networks for Machine Learning,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2012}, {"title": "Towards ai-complete question answering: A set of prerequisite toy tasks", "author": ["Jason Weston", "Antoine Bordes", "Sumit Chopra", "Alexander M Rush", "Bart van Merri\u00ebnboer", "Armand Joulin", "Tomas Mikolov"], "venue": "arXiv preprint arXiv:1502.05698,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2015}], "referenceMentions": [{"referenceID": 9, "context": "1 Introduction Recurrent neural networks, such as the Long Short-Term Memory (LSTM) [11], have proven to be powerful sequence learning models [6, 18].", "startOffset": 84, "endOffset": 88}, {"referenceID": 5, "context": "1 Introduction Recurrent neural networks, such as the Long Short-Term Memory (LSTM) [11], have proven to be powerful sequence learning models [6, 18].", "startOffset": 142, "endOffset": 149}, {"referenceID": 16, "context": "1 Introduction Recurrent neural networks, such as the Long Short-Term Memory (LSTM) [11], have proven to be powerful sequence learning models [6, 18].", "startOffset": 142, "endOffset": 149}, {"referenceID": 6, "context": "Recent approaches, such as Neural Turing Machines (NTMs) [7] and Memory Networks [21], have addressed this issue by decoupling the memory capacity from the number of model parameters.", "startOffset": 57, "endOffset": 60}, {"referenceID": 6, "context": "To test whether the model is able to learn with this sparse approximation, we examined its performance on a selection of synthetic and natural tasks: algorithmic tasks from the NTM work [7], Babi reasoning tasks used with Memory Networks [17] and Omniglot one-shot classification [16, 12].", "startOffset": 186, "endOffset": 189}, {"referenceID": 15, "context": "To test whether the model is able to learn with this sparse approximation, we examined its performance on a selection of synthetic and natural tasks: algorithmic tasks from the NTM work [7], Babi reasoning tasks used with Memory Networks [17] and Omniglot one-shot classification [16, 12].", "startOffset": 238, "endOffset": 242}, {"referenceID": 14, "context": "To test whether the model is able to learn with this sparse approximation, we examined its performance on a selection of synthetic and natural tasks: algorithmic tasks from the NTM work [7], Babi reasoning tasks used with Memory Networks [17] and Omniglot one-shot classification [16, 12].", "startOffset": 280, "endOffset": 288}, {"referenceID": 10, "context": "To test whether the model is able to learn with this sparse approximation, we examined its performance on a selection of synthetic and natural tasks: algorithmic tasks from the NTM work [7], Babi reasoning tasks used with Memory Networks [17] and Omniglot one-shot classification [16, 12].", "startOffset": 280, "endOffset": 288}, {"referenceID": 7, "context": "Further, in Supplementary D we demonstrate the generality of our approach by describing how to construct a sparse version of the recently published Differentiable Neural Computer [8].", "startOffset": 179, "endOffset": 182}, {"referenceID": 6, "context": "A content addressable memory, proposed in [7, 21, 2, 17], is an external memory with an addressing scheme which selects w based upon the similarity of memory words to a given query q.", "startOffset": 42, "endOffset": 56}, {"referenceID": 1, "context": "A content addressable memory, proposed in [7, 21, 2, 17], is an external memory with an addressing scheme which selects w based upon the similarity of memory words to a given query q.", "startOffset": 42, "endOffset": 56}, {"referenceID": 15, "context": "A content addressable memory, proposed in [7, 21, 2, 17], is an external memory with an addressing scheme which selects w based upon the similarity of memory words to a given query q.", "startOffset": 42, "endOffset": 56}, {"referenceID": 15, "context": "2 Memory Networks One recent architecture, Memory Networks, make use of a content addressable memory that is accessed via a series of read operations [21, 17] and has been successfully applied to a number of question answering tasks [20, 10].", "startOffset": 150, "endOffset": 158}, {"referenceID": 18, "context": "2 Memory Networks One recent architecture, Memory Networks, make use of a content addressable memory that is accessed via a series of read operations [21, 17] and has been successfully applied to a number of question answering tasks [20, 10].", "startOffset": 233, "endOffset": 241}, {"referenceID": 8, "context": "2 Memory Networks One recent architecture, Memory Networks, make use of a content addressable memory that is accessed via a series of read operations [21, 17] and has been successfully applied to a number of question answering tasks [20, 10].", "startOffset": 233, "endOffset": 241}, {"referenceID": 0, "context": "The erase matrix Rt = w t e T t is constructed as the outer product between a set of write weights w t \u2208 [0, 1] and erase vector et \u2208 [0, 1] .", "startOffset": 105, "endOffset": 111}, {"referenceID": 0, "context": "The erase matrix Rt = w t e T t is constructed as the outer product between a set of write weights w t \u2208 [0, 1] and erase vector et \u2208 [0, 1] .", "startOffset": 134, "endOffset": 140}, {"referenceID": 13, "context": "We considered two types of ANN indexes: FLANN\u2019s randomized k-d tree implementation [15] that arranges the datapoints in an ensemble of structured (randomized k-d) trees to search for nearby points via comparison-based search, and one that uses locality sensitive hash (LSH) functions that map points into buckets with distance-preserving guarantees.", "startOffset": 83, "endOffset": 87}, {"referenceID": 6, "context": "We trained each model on three of the original NTM tasks [7].", "startOffset": 57, "endOffset": 60}, {"referenceID": 18, "context": "4 Question answering on the Babi tasks [20] introduced toy tasks they considered a prerequisite to agents which can reason and understand natural language.", "startOffset": 39, "endOffset": 43}, {"referenceID": 15, "context": "More directly comparable previous work with end-to-end memory networks, which did not use supervision [17], fails at 6 of the tasks.", "startOffset": 102, "endOffset": 106}, {"referenceID": 10, "context": "Omniglot [12] is a dataset of 1623 characters taken from 50 different alphabets, with 20 examples of each character.", "startOffset": 9, "endOffset": 13}, {"referenceID": 14, "context": "Following [16], we generate episodes where a subset of characters are randomly selected from the dataset, rotated and stretched, and assigned a randomly chosen label.", "startOffset": 10, "endOffset": 14}, {"referenceID": 14, "context": "Previous results on the Omniglot curriculum [16] task are not identical, since we used 1-hot labels throughout and the training curriculum scaled to longer sequences, but our results with the dense models are comparable (\u2248 0.", "startOffset": 44, "endOffset": 48}, {"referenceID": 11, "context": "Recent work in tree ensemble models, such as Mondrian forests [13], show promising results in maintaining balanced hierarchical set coverage in the online setting.", "startOffset": 62, "endOffset": 66}, {"referenceID": 2, "context": "An alternative approach which may be well-suited is LSH forests [3], which adaptively modifies the number of hashes used.", "startOffset": 64, "endOffset": 67}, {"referenceID": 3, "context": "Humans are able to retain a large, task-dependent set of memories obtained in one pass with a surprising amount of fidelity [4].", "startOffset": 124, "endOffset": 127}], "year": 2016, "abstractText": "Neural networks augmented with external memory have the ability to learn algorithmic solutions to complex tasks. These models appear promising for applications such as language modeling and machine translation. However, they scale poorly in both space and time as the amount of memory grows \u2014 limiting their applicability to real-world domains. Here, we present an end-to-end differentiable memory access scheme, which we call Sparse Access Memory (SAM), that retains the representational power of the original approaches whilst training efficiently with very large memories. We show that SAM achieves asymptotic lower bounds in space and time complexity, and find that an implementation runs 1,000\u00d7 faster and with 3,000\u00d7 less physical memory than non-sparse models. SAM learns with comparable data efficiency to existing models on a range of synthetic tasks and one-shot Omniglot character recognition, and can scale to tasks requiring 100,000s of time steps and memories. As well, we show how our approach can be adapted for models that maintain temporal associations between memories, as with the recently introduced Differentiable Neural Computer.", "creator": "LaTeX with hyperref package"}}}