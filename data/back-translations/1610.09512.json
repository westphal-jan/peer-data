{"id": "1610.09512", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Oct-2016", "title": "Contextual Decision Processes with low Bellman rank are PAC-Learnable", "abstract": "Our first contribution is a new measure of complexity, the Bellman Rank, which, as we have shown, enables comprehensible learning of near-optimal behavior in these processes and is, of course, small for many well-studied learning environments for reinforcement. Our second contribution is a new reinforcement learning algorithm that conducts systematic exploration to learn contextual decision-making processes with a low Bellman Rank. The algorithm has been shown to learn near-optimal behavior with a number of samples that are polynomial in all relevant parameters, but independent of the number of unique observations. The algorithm uses Bellman error minimization with optimistic exploration and provides new insights in efficient exploration for reinforcement learning with functional approximation.", "histories": [["v1", "Sat, 29 Oct 2016 14:01:58 GMT  (849kb,D)", "http://arxiv.org/abs/1610.09512v1", "43 pages, 1 figure"], ["v2", "Thu, 1 Dec 2016 19:21:45 GMT  (846kb,D)", "http://arxiv.org/abs/1610.09512v2", "42 pages, 1 figure"]], "COMMENTS": "43 pages, 1 figure", "reviews": [], "SUBJECTS": "cs.LG stat.ML", "authors": ["nan jiang", "akshay krishnamurthy", "alekh agarwal", "john langford", "robert e schapire"], "accepted": true, "id": "1610.09512"}, "pdf": {"name": "1610.09512.pdf", "metadata": {"source": "CRF", "title": "Contextual Decision Processes with Low Bellman Rank are PAC-Learnable", "authors": ["Nan Jiang", "Akshay Krishnamurthy", "Alekh Agarwal", "John Langford", "Robert E. Schapire"], "emails": ["nanjiang@umich.edu", "akshay@cs.umass.edu", "alekha@microsoft.com", "jcl@microsoft.com", "schapire@microsoft.com"], "sections": [{"heading": "1 Introduction", "text": "How can we tractably solve sequential decision making problems where the agent receives rich observations? This question is at the core of both theoretical and empirical reinforcement learning research. There is a rich body of theoretical literature on learning Markov Decision Processes (MDPs) with a small state space [Kearns and Singh, 2002, Brafman and Tennenholtz, 2003, Strehl et al., 2006], with an emphasis on sophisticated exploration techniques that find near-optimal policies in a sample-efficient manner. While there have been attempts to extend these techniques to large state spaces [Kakade et al., 2003, Jong and Stone, 2007, Pazis and Parr, 2016], these approaches fail to be a good fit for practical scenarios where the environment is typically perceived through complex sensory observations such as image, text or audio signals. Alternatively, Monte Carlo Tree Search (MCTS) methods can handle arbitrarily large state spaces, but the advantage comes at the cost of exponential dependence on the planning horizon [Kearns et al., 2002, Kocsis and Szepesva\u0301ri, 2006].\nOn the empirical side, the prominent recent success on both the Atari platform [Mnih et al., 2015, Wang et al., 2015] and Go [Silver et al., 2016] have sparked a flurry of research interest. These approaches leverage advances in deep learning for powerful function approximation, while, in most cases, using simple heuristic strategies, such as -greedy, for exploration. More advanced exploration strategies include extending the methods for small state spaces to real-world settings (e.g., the use of pseudo-counts in Bellemare et al. [2016]), and combining MCTS with function approximation (e.g., Silver et al. [2016]). Both types of approaches often require strong domain knowledge and large amounts of data to be successful.\nIn this work, we study reinforcement learning settings where the agent receives rich sensory observations from the environment, forms complex contexts from these sensorimotor streams for learning and decisionmaking, and uses function approximation to generalize to unseen contexts. Our work departs from existing efforts by aiming at a sample complexity that depends neither on the number of unique contexts nor exponentially on the horizon. Similar goals have been attempted by Wen and Van Roy [2013] and Krishnamurthy et al. [2016] where attention is restricted to decision processes with special structures. In contrast, we consider a much broader class of problems with relatively mild conditions.\nConcretely, we study a large class of sequential decision-making problems which we call Contextual Decision Processes (CDPs). A CDP involves an agent repeatedly observing some rich contextual information,\nar X\niv :1\n61 0.\n09 51\n2v 1\n[ cs\n.L G\n] 2\n9 O\nct 2\n01 6\nusing this information to take an action, and, as a consequence, eliciting a reward and a new context. The agent\u2019s goal is to learn a policy mapping contexts to actions, such that its long-term reward is maximized. This setting clearly generalizes MDPs, where the state forms the context (Example 1), and POMDPs, where the history forms the context (Example 2). Our goal is to design a learning algorithm that identifies a near-optimal policy in a CDP in a sample-efficient manner.\nIn many cases of interest, the context space is likely to be highly complex, and the agent uses a valuefunction approximator to generalize from a small fraction of presented contexts to unseen ones. Unfortunately, a compact function approximator alone does not guarantee sample-efficient learning of CDPs, as we show in an exponential lower bound (Proposition 1). We circumvent this hardness by imposing a structural assumption that holds in a wide range of scenarios. As our first major contribution, we define a notion of Bellman Factorization (Definition 5), and focus on problems with low Bellman Rank .\nAt a high level, Bellman Rank is a form of algebraic dimension on the interplay between the CDP and the value-function approximator that we show is naturally small for many well-studied models. For example, every MDP with a tabular value-function has Bellman Rank bounded by the number of states. If the number of states is large, but the transition matrix has a low-rank structure, then the Bellman Rank is at most the rank of the transition matrix. For a POMDP with reactive value-functions, the Bellman Rank is at most the number of hidden states and has no dependence on the observation space, allowing environments with rich sensory observations. Moreover, the notion continues to be useful beyond these models, and leads to non-trivial results for well-studied models, such as Linear Quadratic Regulators from control theory and Predictive State Representations. Overall, studying CDPs with a small Bellman Rank provides a unified framework to handle a large class of sequential decision making problems.\nFollowing the introduction of Bellman Rank, our next contribution is a novel algorithm for episodic reinforcement learning, which finds a near-optimal value-function, and consequently policy, in a sample efficient manner, whenever the problem has low Bellman Rank. Concretely, when the optimal valuefunction in a CDP can be represented by the function approximator used by the learner, the algorithm uses O\u0303(M2H3K log(N/\u03b4)/ 2) trajectories to find an -suboptimal policy, where M is the Bellman Rank, H is the length of an episode, K is the number of actions available at each decision point, N is the size of the value-function class in consideration, and \u03b4 is the failure probability. Importantly, the sample complexity bound has a logarithmic dependence on the number of value functions, thus enabling powerful function approximation, and no dependence on the size of the context space, which can be very large or even infinite. As many existing models, including the ones mentioned above, have low Bellman Rank, our result immediately implies sample-efficient learning in all of these settings, as highlighted in Table 1.\nWe also present several extensions of the main result, showing robustness to the failure of our assumptions, including the assumption that the optimal value-function is captured by our function approximator, adaptivity to unknown Bellman Rank and extension to infinite function classes of bounded statistical complexity. Altogether, our results show that the notion of Bellman Rank robustly captures the difficulty of exploration in sequential decision-making problems.\nTo summarize, this work constitutes significant progress in understanding reinforcement learning with complex observations where long-term planning and exploration are critical. There are of course several additional questions that must be resolved before we have satisfactory tools for these problems. The biggest caveat of our algorithm is its computational complexity, which is polynomial in the number of value functions hence intractable for the powerful classes of interest. This issue must be resolved before we can empirically\nevaluate the effectiveness of our principled exploration technique. We leave this, and further open questions, for future work."}, {"heading": "2 Contextual Decision Processes (CDPs)", "text": "We introduce a new model, called a Contextual Decision Process, as a unified framework for reinforcement learning with rich observations. We first present the model, before the relevant notation and definitions."}, {"heading": "2.1 Model and Examples", "text": "Traditionally, Markov Decision Processes (MDPs) have been used as a standard model of the environment in RL, but the Markovian assumption is often unrealistic in real-world problems. While models such as Partially Observable MDPs (POMDPs) allow for non-Markovian environments, the emphasis is typically on the finite and small observation spaces or on the latent structures which allow the partial observability to be resolved, making the techniques unsuitable in several practical applications. Contextual Decision Processes use minimal assumptions to capture a very general class of RL problems.\nDefinition 1 (Contextual Decision Process (CDP)). A (finite-horizon) Contextual Decision Process (CDP for short) is defined as an \u3008X ,A, H, P \u3009 tuple, where X is the context space, A is the action space, and H is the horizon of the problem. P = (P\u2205, P+) is the system descriptor, where P\u2205 \u2208 \u2206(X ) is a distribution over initial contexts, that is x1 \u223c P\u2205, and P+ : (X \u00d7A\u00d7 R)\u2217 \u00d7 X \u00d7A \u2192 \u2206(R\u00d7 X ) elicits the next reward and context from the interactions so far x1, a1, r1, . . . , xh, ah:\n(rh, xh+1) \u223c P+(x1, a1, r1, . . . , xh, ah).\nIn a CDP, the agent\u2019s interaction with the environment proceeds in episodes. In each episode, the agent observes a context x1, take action a1, receives reward r1 and observes x2, repeating H times. A policy \u03c0 : X \u2192 A specifies the decision-making strategy of an agent, that is ah = \u03c0(xh) \u2200h \u2208 [H], and induces a distribution over the trajectory (x1, a1, r1, . . . , xH , aH , rH , xH+1) according to the system descriptor P . 1 The value of a policy, V \u03c0, is defined as\nV \u03c0 = EP [\u2211H h=1 rH \u2223\u2223\u2223 a1:H \u223c \u03c0] , (1) where a1:H \u223c \u03c0 abbreviates for a1 = \u03c0(x1), . . . , aH = \u03c0(xH). Here, and in the sequel, the expectation is always taken over contexts and rewards drawn according to the system descriptor P , so that we will suppress the subscript P for brevity. The goal of the agent is to find a policy \u03c0 that attains the largest value.\nTo get some intuition about CDPs, we will typically think of the context space X as some finitedimensional vector space (such as a collection of sensor measurements or features), and A as a small and discrete set. The model, however, is faily general and inclusive and we next show a few examples on how CDPs capture classical RL models. We start with MDPs. Note that in finite-horizon MDPs, optimal policies can be non-stationary in general, i.e., they depend on the number of remaining time steps, so we explicitly provide the number of time steps as part of the context.\nExample 1 (MDPs with states as contexts). Consider a finite-horizon MDP \u3008S,A, H,\u03931,\u0393, R\u3009, where S is the state space, A is the action space, H is the horizon, \u03931 \u2208 \u2206(S) is the initial state distribution, \u0393 : S \u00d7 A \u2192 \u2206(S) is the state transition function, R : S \u00d7 A \u2192 \u2206([0, 1]) is the reward function, and an episode takes the form of (s1, a1, r1, . . . , sH , aH , rH). If the agent chooses from the space of all non-stationary policies {\u03c0 : S\u00d7[H]\u2192 A}, we can convert the MDP to a CDP \u3008X ,A, H, P \u3009 by letting X = S\u00d7[H] and xh = (sh, h). The system descriptor is P = (P\u2205, P+), where P\u2205 = \u03931, and P+(rh, xh+1 |x1, a1, r1, . . . , xh, ah) = R(rh|sh, ah) \u0393(sh+1|sh, ah).\n1More generally, non-stationary and stochastic policies induce trajectory distributions in a similar way. That is, \u03c01, . . . , \u03c0H : X \u2192 \u2206(A) also specifies a distribution over the trajectory where ah \u223c \u03c0h(xh) \u2200h \u2208 [H].\nThe system descriptor for a particular model is usually obvious from definition, and here we give its detailed form as an illustration. We omit the specification of system descriptor in the remaining examples.\nNext we turn to POMDPs. We might naively suspect that a CDP describes a similar process as a POMDP but limits the agent\u2019s decision-making strategies to memoryless (or reactive) policies. This is not true. We clarify this issue by showing that we can use the history as context, and the induced CDP suffers no loss in the ability to represent optimal policies.\nExample 2 (POMDPs with histories as contexts). Consider a finite-horizon POMDP, which can be specified by an underlying MDP with state space S (i.e., the hidden-state space), an observation space O, and an emission processDs that associates each s \u2208 S with a distribution overO. Suppose (s1, a1, r1, . . . , sH , aH , rH) is an episode in the underlying MDP, then the POMDP episode takes the form of (o1, a1, r1, . . . , oH , aH , rH), where oh \u223c Dsh and sh itself is unobserved. If the agent chooses from the space of all policies that depend on history, we can convert the POMDP to a CDP \u3008X ,A, H, P \u3009 by letting X = (O \u00d7 A \u00d7 R)\u2217 \u00d7 O and xh = (o1, a1, r1, . . . , oh). Moreover, xh is Markovian and the CDP can be viewed as an MDP.\nIt should also be clear from this example that we can assume that contexts are Markovian in CDPs without loss of generality (because we can always use history as context). While we do not commit to this assumption to allow for a flexible framework with simple notations (see Example 3), we will connect to well-known results in MDP literature based on this observation so that readers can transfer their insights on MDPs to CDPs.\nExample 3 (POMDPs with sliding windows of observations as contexts). In some application scenarios, partial observability can be resolved by using a small sliding window: for example, in Atari games, it is common to keep track of the last 4 frames of images [Mnih et al., 2015]. In this case, we can represent the problem as a CDP by letting xh = (oh\u22123, oh\u22122, oh\u22121, oh).\nFinally, we introduce some common regularity assumptions on the rewards.\nAssumption 1 (Boundedness of rewards). We assume that regardless of how actions are chosen, for any h = 1, . . . ,H, rh \u2265 0 and \u2211H h=1 rh \u2264 1 almost surely.\nNow that we have a model in place, we will next discuss a few important solution concepts."}, {"heading": "2.2 Value-based RL and Function Approximation", "text": "Note that a CDP makes no assumption on the cardinality of the context space, and we will typically consider continuous context sets. This makes it critical to generalize across contexts, since the agent might not encounter the same context twice. With this motivation, we consider value-based RL with function approximation. That is, the agent is given a space of functions F \u2286 X\u00d7A \u2192 [0, 1] and uses it to approximate an action-value function (or Q-value function). Without loss of generality we assume that f(xH+1, a) \u2261 0.2 For the purpose of presentation, we assume that F is a finite space with |F| = N <\u221e for most part of the paper. In Section 5.3 we relax this assumption and allow infinite function classes with bounded capacity.\nOptimal value functions in MDPs are typically specified through the Bellman equations that they satisfy. Such value-functions also induce an optimal policy, one that maps every state to the action with the highest long-term reward. A direct extension of these notions to CDPs would entail that the agent should learn to map every single context to the optimal action, and that the corresponding value-function be contained in the function class F . As we show below, however, this assumption can be substantially relaxed to better account for the learner only having access to a restricted function class F .\nAs in typical value-based RL, our goal is also to identify a f \u2208 F which respects a particular set of Bellman equations, and achieves a high value with its greedy policy \u03c0f (x) = argmaxa\u2208A f(x, a). To more precisely describe this goal, we introduce our variant of Bellman equations and the optimal value V ?F through a series of definitions.\n2This frees us from having to treat the last level (h = H) differently in the Bellman equations.\nDefinition 2 (Average Bellman error). Given any policy \u03c0 : X \u2192 A and a function f : X \u00d7A \u2192 [0, 1], the average Bellman error of f under roll-in policy \u03c0 at level h is defined as\nE(f, \u03c0, h) = E [ f(xh, ah)\u2212 rh \u2212 f(xh+1, ah+1) \u2223\u2223 a1:h\u22121 \u223c \u03c0, ah:h+1 \u223c \u03c0f ]. (2) In words, the average Bellman error measures the self-consistency of a function f between its predictions at levels h and h + 1 when all the previous actions are taken according to some policy \u03c0. 3 Given this definition, we now define a set of Bellman equations.\nDefinition 3 (Bellman equations and validity of f). Given an (f, \u03c0, h) triple, a Bellman equation posits E(f, \u03c0, h) = 0. We say f \u2208 F is valid if the Bellman equation on (f, \u03c0f \u2032 , h) holds for every f \u2032 \u2208 F , h \u2208 [H].\nIn the MDP setting, each of our Bellman equation can be viewed as the linear combination of the standard Bellman optimality equations for Q?, 4 with the coefficients in this combination being the probability with which the roll-in policy \u03c0 visits each state. This leads to the following consequence.\nFact 1 (Q? is always valid). Given an MDP and a space of functions F : S\u00d7 [H]\u00d7A \u2192 [0, 1], if the optimal Q-value function of the MDP, Q?, lies in F , then in the corresponding CDP with X = S \u00d7 [H], Q? is valid.\nWhile Q? satisfies our Bellman equations and yields the optimal policy \u03c0? = \u03c0Q? , there can be many more other functions which also satisfy the equations but may yield suboptimal policies. This happens because Eq. 2 only considers ah, ah+1 drawn according to \u03c0f and does not use the values on other actions. For instance, consider a CDP where at every context, action a always gets a reward of 0 and action a\u2032 always gets a reward of 1. A function that predicts f(x, a) = f(x, a\u2032) = 0 \u2200x, a is trivially valid as long as tie-breaks always favor a.\nSince validity alone does not imply that we get a good policy, it is natural to search for a valid value function which also induces a high-value policy. We formalize this goal in the next definition.\nDefinition 4 (Optimal value). Define f? = argmaxf\u2208F : f is valid V \u03c0f , and V ?F = V \u03c0f? .\nFact 2. For the same setting as in Fact 1, when Q? \u2208 F , we have f? = Q?, and V ?F = V ?, which is the optimal long-term value.\nThis final definition implicitly assumes that there is at least one valid f \u2208 F . This is weaker than the realizability assumption made in the value-based RL literature, that F contains Q?, the optimal Q-value function of an MDP. Indeed, our setup subsumes realizability, as evidenced by Fact 1 and 2. When Q? \u2208 F , our algorithm aims to identify a policy achieving value close to V ?, the optimal value achievable by any agent. When no functions in F approximate Q? well, our algorithm still delivers non-trivial guarantees, in that it finds the best valid value function. In this sense, our setting requires substantially weaker realizability-type assumptions than related theoretical results for value-based RL [Antos et al., 2008, Krishnamurthy et al., 2016], which assume Q? \u2208 F often in addition to several stronger requirements.\nApproximation to Bellman Equations. In value-based RL, since we use a restricted class of value functions, we may not have Q? \u2208 F or even worse, we may not have any valid functions in F . In our setup, this corresponds to V ?F = \u2212\u221e (no valid functions) or V ?F V ?, in which case competing with V ?F may be vacuous. Instead, a practical algorithm should be robust to this situation, and produce a good policy, even when no value functions are strictly valid. In Section 5.4, we show that if F contains good functions that approximately satisfy the Bellman equations (Definition 8), then our algorithm can compete with the value achieved by these functions, which can be much higher than V ?F as defined above.\n3In many existing approaches (e.g., LSPI [Lagoudakis and Parr, 2003] and FQI [Ernst et al., 2005]), the Bellman errors are defined as taking the expectation of a squared error unlike in our definition.\n4Readers who are not familiar with the definition of Q? are advised to consult a textbook, such as [Sutton and Barto, 1998]."}, {"heading": "3 Bellman Factorization and Bellman Rank", "text": "Hopefully, the development so far has convinced the reader that CDPs are fairly general models for RL. While this is good in that any algorithms for CDPs apply to all the subsumed special cases, this generality also poses substantial challenges for sample-efficient learning. Indeed, learning in CDPs with large or infinite context spaces is generally hard, since they subsume MDPs and POMDPs with arbitrarily large state/observation spaces. Intuitively, one might expect that a simple function class F with low statistical capacity can generalize over the large space thereby enabling efficient exploration.\nIn the following lower bound, we show that this intuition does not hold: while simple function classes do generalize effectively in supervised learning where data come from a fixed distribution,5 in RL the data consists of trajectories whose distribution crucially depends on the agent\u2019s policy. Consequently, low statistical capacity is not sufficient to guarantee generalization in RL problems where exploration is critical. In particular, even when logN , the statistical capacity for finite classes, is small, there exists an exponential (in horizon) lower bound for the sample complexity of exploration. The result is due to Krishnamurthy et al. [2016], and we restate it here for completeness.\nProposition 1 (Restatement of Proposition 2 in Krishnamurthy et al. [2016]). For any H,K \u2208 N with K \u2265 2, and any \u2208 (0, \u221a 1/8), there exists a family of finite-horizon MDPs with horizon H and |A| = K, such that we can construct a function space F with |F| = KH to guarantee that Q? \u2208 F for all MDP instances in the family, yet there exists a universal constant c such that for any algorithm and any T \u2264 cKH/ 2, the probability that the algorithm outputs a policy \u03c0\u0302 with V \u03c0\u0302 \u2265 V ? \u2212 after collecting T trajectories is at most 2/3 when the problem instance is chosen from the family by an adversary.\nProof sketch for completeness. The proof relies on the fact that CDPs include MDPs where the state space is arbitrarily large. Each instance of the MDP family is a complete tree with branching factor K and depth H. Transition dynamics are deterministic, and only leaf nodes have non-zero rewards. All leaves give Ber(1/2) rewards, except for one that gives Ber(1/2+ ). Changing the position of the most rewarding leaf node yields a family of KH MDP instances, and collecting their optimal Q-value functions forms the desired function class F . Since F provides no information other than the fact that the true MDP lies in this family, the problem is equivalent to identifying the best arm in a multi-arm bandit with KH arms, and the remaining analysis follows exactly the same as in Krishnamurthy et al. [2016].\nThe existence of such a lower bound implies that we need to impose some further structure on the set of all CDPs before sample-efficient learning is possible. We do so by proposing a new complexity measure that characterizes the difficulty of exploration in RL, so that we can exclude the hard instances by restricting attention to settings where the measure is low, and develop algorithms that have sample complexity polynomial in the measure.\nOur complexity measure is a structural characterization of the set of Bellman equations induced by the CDP and value-function class (recall Definition 2), which we need to search through to find valid functions. These equations are implicitly structured in many existing sample-efficient reinforcement learning results; for example, in tabular MDPs, the Bellman error of f on every state is sufficient to judge the validity of f , since the error under any roll-in policy is just a stochastic combination of these single-state errors. On the other hand, without such structure, the naive approach of checking the validity of all functions might necessitate the collection of samples according to \u03c0f \u2032 for every f\n\u2032 \u2208 F , which is intractable for large F . Together, these observations hint toward a more a general phenomenon: whenever the collection of Bellman errors across all roll-in policies can be concisely represented, we may be able to check the validity of all functions in a sample-efficient manner.\nThis motivates the definition of a new complexity measure for CDPs which we call the Bellman Rank . Consider the Bellman error matrices, that is, |F| \u00d7 |F| matrices with the (f, f \u2032)th entry being the Bellman error E(f, \u03c0f \u2032 , h), one for every level h. Informally, we can think of the Bellman Rank for a CDP and a given value-function class F to be a uniform upper bound on the rank of all the H Bellman error matrices.\nBased on our earlier discussion, it is immediate that the Bellman Rank defined this way is controlled by the number of states in a tabular MDP setting (the formal statement will be given in Proposition 2). More\n5For a finite hypothesis class, its generalization error in supervised learning is controlled by the log of its cardinality.\ngenerally, whenever there are some compact statistics that can summarize the influence of the roll-in policy \u03c0 for the purpose of calculating the Bellman error of any f , the Bellman Rank of the resulting problem is small. For tabular MDPs, such a statistic is the state at level h. Moreover, the observability of the statistic is not required; in POMDPs for example, the hidden state can also serve as such a statistic (Proposition 4).\nNow we give the formal definition below.\nDefinition 5 (Bellman Factorization and Bellman Rank). We say that a CDP \u3008X ,A, H, P \u3009 and F \u2282 X \u00d7 A \u2192 [0, 1] admit Bellman Factorization with Bellman Rank M and norm parameter \u03b6, if there exists \u03bdh : F \u2192 RM , \u03beh : F \u2192 RM for each h \u2208 [H], such that for any f, f \u2032 \u2208 F , h \u2208 [H],\nE(f, \u03c0f \u2032 , h) = \u3008\u03bdh(f \u2032), \u03beh(f)\u3009, (3)\nand \u2016\u03bdh(f \u2032)\u20162 \u00b7 \u2016\u03beh(f)\u20162 \u2264 \u03b6 <\u221e.\nThe exact factorization in Eq. (3) can be relaxed to an approximate version as will be discussed in Section 5.4. In the remaining sections of this paper we introduce the main algorithm, and prove its sampleefficiency in problems with low Bellman Rank. Before that, we use the rest of this section to showcase the generality of Definition 5 by presenting a number of common RL settings that have a small Bellman Rank. Throughout, we will see how the Bellman Rank captures the process-specific structures that allow for efficient exploration.\nWe start with the tabular MDP setting, and show that the Bellman Rank is at most the number of states.\nProposition 2 (Bellman Rank bounded by number of states in MDPs). Consider an MDP introduced in Example 1 with |S| < \u221e, and let \u3008X ,A, H, P \u3009 be the corresponding CDP with X = S \u00d7 [H]. With any F \u2282 X \u00d7A \u2192 [0, 1], this model admits a Bellman Factorization with M = |S| and \u03b6 = 2 \u221a M .\nThis result is proved in Appendix B.1. We also note that there is a previous effort in extending tabular PAC-MDP methods to large MDPs using a form of state abstractions [Li, 2009, Section 8.2.3], which we are also able to subsume. See Appendix B.2 for details.\nNext we consider large MDPs whose transition dynamics have a low-rank structure. A closely related setting has been considered by Barreto et al. [2011, 2014] where the low-rank structure is exploited to speed up MDP planning. For our purpose, such a structure yields low Bellman Rank hence enables efficient exploration, and this result is novel as far as we know. To align with existing literature we assume that S is finite (but can be arbitrarily large); extension to the infinite case is straight-forward.\nProposition 3 (Bellman Rank bounded by rank of transition matrices in MDPs). Consider an MDP introduced in Example 1. With a slight abuse of notation let \u0393 denote its transition matrix of size |S\u00d7A|\u00d7|S|, whose element indexed by ((s, a), s\u2032) is \u0393(s\u2032|s, a). Assume that there are two row-stochastic matrices \u0393(1) and \u0393(2) with sizes |S \u00d7 A| \u00d7M and M \u00d7 |S| respectively, such that\n\u0393 = \u0393(1)\u0393(2). (4)\nRecall that we convert an MDP into a CDP by letting X = S\u00d7[H], xh = (sh, h). For any F \u2282 X\u00d7A \u2192 [0, 1], this model admits a Bellman Factorization with Bellman Rank M and \u03b6 = 2 \u221a M .\nOur next example considers POMDPs with large observations spaces and reactive value functions, where the Bellman Rank is at most the number of hidden states. This result subsumes and generalizes the setting of Krishnamurthy et al. [2016] which requires deterministic transitions in the underlying MDP. In contrast, we eliminate the need for the deterministicity assumption, and still guarantee sample-efficient learning.\nProposition 4 (Bellman Rank bounded by hidden states in reactive POMDPs). Consider a POMDP introduced in Example 3 with |S| < \u221e and a sliding window of size 1. Let \u3008X ,A, H, P \u3009 be an induced CDP with X = O \u00d7 [H] and xh = (oh, h). Given any F \u2282 X \u00d7 A \u2192 [0, 1], this model admits a Bellman Factorization with M = |S| and \u03b6 = 2 \u221a M .\nPerhaps surprisingly, Proposition 3 and 4 can be proved under a unified model that generalizes POMDPs by allowing the transition function and the reward function to depend on the observation. See Figure 1 (a)\n\u2013 (c) for graphical representations of these models and Appendix B.3 for the proof of both Propositions 4 and 3. This unified model captures the experimental settings considered in state-of-the-art empirical RL work (Figure 1 (d)), where agents act in a grid-world (|S| is small) and receives complex and rich observations such as raw pixel images (|O| is large).\nNext, we consider Predictive State Representations (PSRs), which are alternative models of partially observable systems with parameters grounded in observable quantities [Littman et al., 2001]. Similar to the case of POMDPs, we can bound the Bellman Rank in terms of the rank of the PSR6 when the candidate value functions are reactive. For presentation purposes, we only give an informal result here, and defer the definitions, properties of PSRs, formal statement, and its proof to Appendix B.4\nProposition 5 (Informal result on bounding Bellman Rank in PSRs). Consider a partially observable system with observation space O, and the induced CDP \u3008X ,A, H, P \u3009 with xh = (oh, h). If the linear dimension of the system (i.e., rank of its PSR model) is at most L, then given any F : X \u00d7A \u2192 [0, 1], the Bellman Rank is bounded by LK.\nOur last example considers a class of linear control problems well studied in control theory, called Linear Quadratic Regulators (LQRs). In LQRs, we show that the Bellman Rank is bounded by the dimension of the state space. Exploration in this class of problems has been previously considered by Osband and Van Roy [2014]. Again for presentation purposes, we only state an informal result here and defer the formal statement to Appendix B.5. Note that the algorithm to be introduced in the next section does not directly apply to LQRs due to the continuous action space, and adaptations that exploit the structure of the action space may be needed, which we leave for future work.\nProposition 6 (Informal result on bounding Bellman Rank in LQRs). An LQR can be viewed as an MDP with continuous state space Rd and action space RK , where the dynamics are described by some linear equations. Given any function class F consisting of non-stationary quadratic functions of the state, the Bellman Rank is bounded by d2 + 1."}, {"heading": "4 Algorithm and Main Results", "text": "In this section we present our algorithm for learning CDPs which have Bellman Factorization with a small Bellman Rank and our main sample complexity guarantee. To aid presentation and help convey the main ideas, we make three simplifying assumptions:\n1. We assume the Bellman Rank parameter M corresponding to the Bellman Factorization is known to the agent.7\n2. We assume the function class F is finite with |F| = N .\n3. We assume exact validity (Definition 3) and exact Bellman Factorization (Definition 5).\nAll three assumptions can be relaxed, and we sketch these relaxations in Section 5. We are interested in designing an algorithm for PAC Learning CDPs. We say that an algorithm PAC learns if given F , two parameters , \u03b4 \u2208 (0, 1), and access to a CDP, the algorithm outputs a policy \u03c0\u0302 with V \u03c0\u0302 \u2265 V ?F \u2212 with probability at least 1 \u2212 \u03b4. The sample complexity is the number of episodes needed to achieve such a guarantee, and is typically expressed in terms of , \u03b4 and other relevant parameters. Our goal is to design an algorithm with sample complexity that is Poly(M,K,H, , log(N), log(1/\u03b4)) where M is the Bellman Rank, K is the number of actions, and H is the time horizon. We say that such a sample complexity bound is polynomial in all relevant parameters. Importantly, the bound should have no dependence on the number of unique contexts |X |.\n6Every POMDP has an equivalent PSR whose rank is bounded by the number of hidden states [Singh et al., 2004]. 7We will also assume knowledge of the corresponding norm parameter, but this is relatively minor."}, {"heading": "4.1 Algorithm", "text": "Pseudocode for our algorithm, which we call Olive (Optimism Led Iterative Value-Function Elimination), is displayed in Algorithm 1. Theorem 1 describes how to set the parameters nest, neval, n, and \u03c6.\nAt a high level, the algorithm aims to eliminate functions f \u2208 F that fail to satisfy the validity condition in Definition 3. This is done by Eq. (6) and (7) inside the loop of the algorithm. Observe that, since the actions aht are chosen uniformly at random, Eq. (6) produces an unbiased estimate of E(f, \u03c0t, ht), the average Bellman error for function f on roll-in policy \u03c0t at time ht. Thus, Eq. (7) eliminates functions that have high average Bellman error on this distribution, which means they fail to satisfy the validity criteria.\nThe other major component of the algorithm involves choosing the roll-in policy and level on which to do the learning step. At round t, we choose the roll-in policy \u03c0t optimistically, by choosing ft that predicts the highest value at starting context distribution, and letting \u03c0t = \u03c0ft . To pick the level, we compute ft\u2019s average Bellman error on its own roll-in distribution (Eq. (5)), and set ht to be any level for which this average Bellman error is high (See Line 11). As we will see, these choices ensure that substantial learning happens on each iteration, guaranteeing that the algorithm progresses rapidly and uses polynomially many episodes.\nThe last component is the termination criterion. The algorithm terminates if ft has small average Bellman error on its own roll-in distribution at all levels. As we will see in our analysis, this criteria guarantees that \u03c0t is near optimal.\nComputationally, the algorithm requires enumeration of the value-function class, which we expect to be extremely large or infinite in practice. While computational efficiency is essential for a practical algorithm, our focus here is on statistical issues, so we do not dwell further on this deficiency.\nIntuition for OLIVE. To convey intuition, it is helpful to ignore any sampling effects, which means replacing all empirical estimates with their population values. The first important fact is that the algorithm never eliminates a valid function, since the learning step in Eq. (7) only eliminates a function f , if we can find a distribution on which it has large average Bellman error. If f is valid, then E(f, \u03c0, h) = 0 for all \u03c0, h, so f will never be eliminated.\nThe second fact is that if a function f is valid, then its predicted value is exactly the value achieved by the greedy policy \u03c0f , that is Vf = E[f(x1, \u03c0f (x1))] = V \u03c0f . This follows by telescoping the recursion in the definition of average Bellman error. Therefore, since ft is chosen optimistically as the maximizer of the value prediction among the surviving functions and since we never eliminate valid functions, if Olive terminates, it must output a near optimal valid policy. In our analysis, we incorporate sampling effects to derive robust versions of these two facts, and thus we can guarantee that the algorithm always outputs a policy that is at most -suboptimal.\nThe more challenging component is ensuring that the algorithm terminates in polynomially many iterations, which is critical for obtaining a polynomial sample complexity bound. This argument crucially relies on the Bellman Factorization (recall Definition 5), which enables us to embed the distributions into M dimensions and measure progress in this low-dimensional space.\nIf we ignore sampling effects we can set \u03c6 = 0, and by using the Bellman Factorization to write E(f, \u03c0f \u2032 , h) as an inner product, we can think of the learning step in Eq. (7) as introducing a homogenous linear constraint on the set of \u03beh(f) vectors. Now, if we ever execute the learning step at level h again, that means we found a new function f \u2032 for which \u3008\u03bdh(f \u2032), \u03beh(f \u2032)\u3009 is very large. Importantly, this means that \u03bdh(f \u2032) must be linearly independent from all other constraints we have introduced, since f \u2032 satisfies all of those homogenous linear equalities. Therefore, introducing the constraint involving \u03bdh(f\n\u2032) guarantees we eliminate one more dimension from the null space of the constraint matrix. Since there are only M dimensions, this leads to a bound on the number of iterations.\nThe above heuristic reasoning, despite relying on the brittle notion of linear independence, can be made robust. With sampling effects, rather than homogeneous linear equalities, our learning step for level h introduces linear inequality constraints to the \u03beh(f) vectors. But if f\n\u2032 is a surviving function that forces us to train at level h, it means that \u3008\u03bdh(f \u2032), \u03beh(f \u2032)\u3009 is very large, while \u3008\u03bdh(\u00b7), \u03beh(f \u2032)\u3009 is very small for all previous \u03bdh(\u00b7) vectors used in the learning step. Intuitively this means that the new \u03bd(f \u2032) vector is quite different from all of the previous ones, and our proof uses a volumetric argument to show that this suffices to guarantee substantial learning takes place.\nThe optimistic choice for ft is critical for driving the agent\u2019s exploration. With this choice, if ft is valid,\nAlgorithm 1 Olive (F ,M, \u03b6, , \u03b4) \u2013 Optimism Led Iterative Value-function Elimination\n1: Collect nest trajectories with actions taken in an arbitrary manner; save initial contexts {x(i)1 } nest i=1 . 2: Estimate the predicted value for each f \u2208 F : V\u0302f = 1nest \u2211nest i=1 f(x (i) 1 , \u03c0f (x (i) 1 )). 3: F0 \u2190 F . 4: for t = 1, 2, . . . do 5: Choose policy ft = argmaxf\u2208Ft\u22121 V\u0302f , \u03c0t = \u03c0ft . 6: Collect neval trajectories {(x(i)1 , a (i) 1 , r i 1, . . . , x (i) H , a (i) H , r (i) H )} neval i=1 by following \u03c0t (i.e. a (i) h = \u03c0t(x (i) h )\nfor all h, i). 7: Estimate \u2200h \u2208 [H],\nE\u0303(ft, \u03c0t, h) = 1\nneval neval\u2211 i=1 [ ft(x (i) h , a (i) h )\u2212 r (i) h \u2212 ft(x (i) h+1, a (i) h+1) ] . (5)\n8: if \u2211H h=1 E\u0303(ft, \u03c0t, h) \u2264 5 /8 then\n9: Terminate and ouptut \u03c0t. 10: end if 11: Pick any ht \u2208 [H] for which E\u0303(ft, \u03c0t, ht) \u2265 5 /8H (One is guaranteed to exist). 12: Collect trajectories {(x(i)1 , a (i) 1 , r (i) 1 , . . . , x (i) H , a (i) H , r (i) H )}ni=1 where a (i) h = \u03c0t(x (i) h ) for all h 6= ht and a (i) ht\nis drawn uniformly at random. 13: Estimate\nE\u0302(f, \u03c0t, ht) = 1\nn n\u2211 i=1 1[a (i) ht = \u03c0f (x (i) ht )] 1/K ( f(x (i) ht , a (i) ht )\u2212 r(i)ht \u2212 f(x (i) ht+1 , \u03c0f (x (i) ht+1 )) ) . (6)\n14: Learn\nFt = { f \u2208 Ft\u22121 : \u2223\u2223\u2223E\u0302(f, \u03c0t, ht)\u2223\u2223\u2223 \u2264 \u03c6} . (7) 15: end for\nthen the algorithm terminates correctly, and if ft is not valid, then substantial progress is made. Thus the agent does not get stuck exploring with many valid but suboptimal functions, which could result in exponential sample complexity."}, {"heading": "4.2 Sample Complexity", "text": "We now turn to our main result, which guarantees that Olive PAC-learns Contextual Decision Processes with polynomial sample complexity.\nTheorem 1. For any , \u03b4 \u2208 (0, 1), any Contextual Decision Process and function class F that admits a Bellman Factorization with parameters M, \u03b6, run Olive with the following parameters:\n\u03c6 = 12H \u221a M , nest =\n32\n2 log(6N/\u03b4),\nneval = 288H2\n2 log\n( 12H2M log(6H \u221a M\u03b6/ )\n\u03b4\n) ,\nn = 4608H2MK\n2 log\n( 12NHM log(6H \u221a M\u03b6/ )\n\u03b4\n) .\nThen, with probability at least 1 \u2212 \u03b4, Olive halts and returns a policy \u03c0\u0302 that satisfies V \u03c0\u0302 \u2265 V ?F \u2212 (V ?F in\nDefinition 3), and the number of episodes required is at most8\nO\u0303 ( M2H3K\n2 log(N\u03b6/\u03b4)\n) . (8)\nAccording to this theorem, if a Contextual Decision Process and function class F admit a Bellman Factorization with small Bellman Rank and F contains valid functions, Olive is guaranteed to find a near optimal valid function using only polynomially many episodes. Recall that many popular models, including MDPs with small state spaces, POMDPs with reactive value functions and small hidden-state spaces, and linear quadratic regulators admit factorizations with small Bellman Rank. Moreover, recall that our validity requirement is considerably weaker than realizability assumptions in prior works characterizing reinforcement learning with function approximation. To our knowledge, this is simultaneously the most general polynomial sample complexity bound for reinforcement learning with rich observation spaces and for reinforcement learning with function approximation. Our result also certifies that the notion of Bellman Factorization, which is quite general, is sufficient for efficient exploration and learning in sequential decision making problems.\nIt is worth briefly comparing this result with prior work.\n1. The most closely related result is the recent work of Krishnamurthy et al. [2016], who also consider episodic reinforcement learning with infinite observation spaces and function approximation. The model studied in their paper is a form of Contextual Decision Process with Bellman Rank M , so our result applies as is to their setting. Importantly, we eliminate the need for their deterministic transition assumption, resolving an open problem posed in their paper. Moreover, our sample complexity bound improves on theirs in the dependence on H and , but at the cost of a worse dependence on M . We emphasize that our result applies to a much more general class of models.\n2. Another related line of literature provides sample complexity bounds for Fitted Value/Policy Iteration methods (e.g., [Munos, 2003, Antos et al., 2008, Munos and Szepesva\u0301ri, 2008]). These works consider the infinite-horizon discounted MDP setting, and require much stronger assumptions than we do, that the function class not only captures Q?, but is also closed under Bellman update operators, and the degree of violation to these assumptions shows up in the approximation error guarantee (see e.g., the inherent Bellman error in [Antos et al., 2008]). More importantly, the analyses rely on the so-called concentrability coefficients to correct the mismatch between training and test distributions [Farahmand et al., 2010, Lazaric et al., 2012], implicitly assuming that an exploration distribution is given, hence this line of literature does not address the exploration issue which is our main focus.\n3. Since CDPs include small-state MDPs, our algorithm can be applied as is to these problems. Unfortu-\nnately, our sample complexity is polynomially worse than the state of the art O\u0303(Mpoly(H)K 2 log(1/\u03b4)) bounds for PAC-learning MDPs [Dann and Brunskill, 2015]. On the other hand, our algorithm also applies to MDPs with infinite state spaces, which cannot be handled by tabular methods.\n4. Our setup can be applied to learning reactive policies in POMDPs (see Proposition 4). Azizzadenesheli et al. [2016] provided a sample-efficient algorithm in a closely related setting, where both the observation space and the hidden-state space are small in cardinality. While their approach does not require realizable value-functions, their sample complexity depends polynomially on the number of unique observations, and the method relies on additional mixing assumptions of the underlying MDP, which we do not.\n5. Finally, Contextual Decision Processes also encompass contextual bandits, where the optimal sample complexity is O(K log(N)/ 2) [Agarwal et al., 2012]. As contextual bandits have M = 1 and H = 1, our algorithm achieves this optimal sample complexity in this special case.\nTurning briefly to lower bounds, since the CDP setting with Bellman Factorization is new, general lower bounds for the broad class do not exist. However, we can use MDP lower bounds for guidance on the question\n8We use O\u0303(\u00b7) notation to suppress poly-logarithmic dependence on everything except N and \u03b4.\nof optimality, since the small-state MDPs in Example 1 are a special case. While no existing MDP lower bounds apply as is, since formulations vary, in Appendix A we adapt ideas from the literature [Auer et al., 2002] to obtain a \u2126(MKH/ 2) sample complexity lower bound for learning the MDPs in Example 1.\nComparing with this lower bound, the sample complexity in Theorem 1 is worse in M,H, and log(N) factors, but of course the small-state MDP is a significantly simpler special case of our setting. We leave as future work the question of optimal sample complexity for learning CDPs with low Bellman Rank."}, {"heading": "5 Extensions", "text": "We introduce four important extensions to our algorithm and analysis."}, {"heading": "5.1 Unknown Bellman Rank", "text": "The first extension deals with the difficulty that M might not be known to the agent (note that Algorithm 1 requires M as an input parameter). However, a simple procedure described in Algorithm 2, can guess the value of M on a doubling schedule and handle this situation with no consequences to asymptotic sample complexity.9\nAlgorithm 2 GuessM(F , \u03b6, , \u03b4) 1: for i = 1, 2, . . . do 2: M \u2032 \u2190 2i. 3: Call Olive(F ,M \u2032, , \u03b4i(i+1) ) with parameters specified on Theorem 1.\n4: Terminate the subroutine when t > HM \u2032 log ( 6H \u221a M \u2032\u03b6 ) / log(5/3) in Line 4 (the for-loop).\n5: if a policy \u03c0 is returned from Olive then return \u03c0. 6: end if 7: end for\nTheorem 2. For any , \u03b4 \u2208 (0, 1), any Contextual Decision Process and function class F that admits a Bellman Factorization with parameters M, \u03b6, if we run GuessM(F , , \u03b4), then with probability at least 1\u2212 \u03b4, Olive halts and returns a policy which satisfies V \u03c0\u0302 \u2265 V ?F \u2212 , and the number of episodes required is at most\nO\u0303 ( M2H3K\n2 log(N\u03b6/\u03b4)\n) .\nWe give some intuition about the proof here, with details deferred details to Appendix D. In Algorithm 2, M \u2032 is our guess of M , and it grows exponentially. When M \u2032 \u2265 M , analysis of the main algorithm shows that Olive(F ,M \u2032, , \u03b4i(i+1) ) will terminate and return a near-optimal policy with high probability, and by our doubling schedule, we know that M \u2032 \u2264 2M which is not too large. On the other hand, Olive may not explore effectively when M \u2032 < M , because we use too few samples (chosen according to M \u2032) to estimate average Bellman errors in Eq. (6). This worse accuracy is inadequate to guarantee sufficient progress in learning\nHowever, the high-probability guarantee that f? will not be eliminated is unaffected, because the threshold \u03c6 on Line 7 of Olive is set in accordance with the sample size n specified in Theorem 1, regardless ofM . Consequently, if the algorithm ever terminates when M \u2032 < M , we still get a near-optimal policy. The only issue is that Olive subroutine may not terminate, which we address by explicitly terminating the subroutine once its sample complexity bound, which depends on M \u2032, is reached (Line 4 in Algorithm 2). Finally, by splitting the failure probability \u03b4 appropriately among all guesses of M \u2032, we obtain the same order of sample complexity as in Theorem 1.\n9In Algorithm 2 we assume that \u03b6 is known. In the examples provided in Proposition 2, 3, and 4, however, \u03b6 grows with M in the form of \u03b6 = 2 \u221a M . In this case, we can compute \u03b6\u2032 = 2 \u221a M \u2032 and call Olive with \u03b6\u2032 instead of \u03b6. As long as \u03b6 is a polynomial term and non-decreasing in M the same analysis applies and Theorem 2 holds."}, {"heading": "5.2 Separation of Policy Class and V-value Class", "text": "So far, we have assumed that the agent has access to a class of Q-value functions F \u2282 X \u00d7 A \u2192 [0, 1]. In this section we show that our algorithm allows separate representations of policies and V-value functions.\nFor every f \u2208 F , and any x \u2208 X , a 6= \u03c0f (x), we note that the value of f(x, a) is not used by Algorithm 1, and changing it to arbitrary values does not affect the execution of the algorithm as long as f(x, a) \u2264 f(x, \u03c0f (x)) (so that \u03c0f does not change). In other words, our algorithm only interacts with f in two forms:\n1. f \u2019s greedy policy \u03c0f .\n2. A mapping gf : x 7\u2192 f(x, \u03c0f (x)). We call such mappings V-value functions to contrast the previous use of Q-value functions.10\nHence, supplying F is equivalent to supplying the following space of (policy, V-value function) pairs:\n{ ( \u03c0f , gf ) : f \u2208 F}.\nThis observation provides further evidence that Definition 3 is significantly less restrictive than standard realizability assumptions. Validity of f means that (\u03c0f , gf ) obeys the Bellman Equations for Policy Evaluation (i.e., gf predicts the long-term value of following \u03c0f ), as opposed to the more common Bellman Optimality Equations. In MDPs, there are many ways to satisfy the policy evaluation equations at every state simultaneously, while Q? is the only function that satisfies all optimality equations.\nMore generally, instead of using a Q-value function class, we can run Olive with a policy space \u03a0 \u2282 X \u2192 A and a V-value function class G \u2282 X \u2192 [0, 1] where we assemble (policy,V-value function) pairs by taking the Cartesian product of \u03a0 and G. Olive can be run here with the understanding that each Q-value function f in Olive is associated with a (\u03c0, g) pair, and the algorithm uses \u03c0 instead of \u03c0f and g(x) instead of f(x, \u03c0f (x)). All the analysis applies directly with this transformation, and the log |F| dependence in sample complexity is replaced by log |\u03a0| + log |G|. Note also that the definition of Bellman Factorization also extends naturally to this case, where the first argument is the (\u03c0, g) pair and the second argument is a roll-in policy, \u03c0\u2032."}, {"heading": "5.3 Infinite Hypothesis Classes", "text": "The arguments in Section 4 assume that |F| = N < \u221e. However, almost all commonly used function approximators are infinite classes, which restricts the applicability of our algorithm. On the other hand, the size of the function class appears in our analysis only through deviation bounds, so techniques from empirical process theory can be used to generalize our results to infinite classes. This section establishes parallel versions of those deviation bounds for function classes with finite combinatorial dimensions, and together with the rest of the original analysis we can show that our algorithm enjoys similar guarantees when working with infinite hypothesis classes.\nSpecifically, we consider the setting where \u03a0 and G are given (see Section 5.2), and they are infinite classes with finite combinatorial dimensions. We assume that \u03a0 has finite Natarajan dimension (Definition 6), and G has finite Pseudo-dimension (Definition 7). These two dimensions are extensions of VC-dimension to multi-class classification and regression respectively, and are standard in literature of statistical learning theory.\nDefinition 6 (Natarajan dimension [Natarajan, 1989]). Suppose X is a feature space and Y is a finite label space. Given hypothesis class H \u2282 X \u2192 Y, its Natarajan dimension Ndim(H) is defined as the maximum cardinality of a set A \u2286 X that satisfies the following: there exists h1, h2 : A \u2192 Y such that (1) \u2200x \u2208 A, h1(x) 6= h2(x), and (2) \u2200B \u2286 A, \u2203h \u2208 H such that \u2200x \u2208 B, h(x) = h1(x) and \u2200x \u2208 A \\B, h(x) = h2(x).\nDefinition 7 (Pseudo-dimension [Haussler, 1992]). Suppose X is a feature space. Given hypothesis class H \u2282 X \u2192 R, its pseudo-dimension Pdim(H) is defined as Pdim(H) = VC-dim(H+), where H+ = {(x, \u03be) 7\u2192 1[h(x) > \u03be] : h \u2208 H} \u2282 X \u00d7 R\u2192 {0, 1}.\n10In the MDP setting, such functions are also known as state-value functions.\nThe definition of Pseudo-dimension relies on that of VC-dimension, whose definition and basic properties are recalled in the appendix. We state the final sample complexity result here. Since the algorithm parameters are somewhat complex expressions, we omit them in the theorem statement and provide their specification in the proof, which is deferred to Appendix D.\nTheorem 3. Let \u03a0 \u2282 X \u2192 A with Ndim(\u03a0) \u2264 d\u03a0 < \u221e and G \u2282 X \u2192 [0, 1] with Pdim(G) \u2264 dG < \u221e. For any , \u03b4 \u2208 (0, 1), any Contextual Decision Process with policy space \u03a0 and function space G that admits a Bellman Factorization with parameters M, \u03b6, if we run Olive with appropriate parameters, then with probability at least 1\u2212 \u03b4, Olive halts and returns a policy \u03c0\u0302 that satisfies V \u03c0\u0302 \u2265 V ?F \u2212 , and the number of episodes required is at most\nO\u0303 ( M2H3K2\n2\n( d\u03a0 + dG + log(\u03b6/\u03b4) )) . (9)\nCompared to Theorem 1, the sample complexity we get for infinite hypothesis classes has two differences: (1) logN is replaced by d\u03a0 + dG , which is expected, based on the discussion in Section 5.2, and (2) the dependence on K is quadratic as opposed to linear. In fact, in the proof of Theorem 1, we exploited the low-variance property of importance weights in Eq. (6), and applied Bernstein\u2019s inequalities to avoid a factor of K. With infinite hypothesis classes, the same approach does not apply directly. However, we believe this is only a technical issue and a more refined analysis might recover the linear dependence (e.g., using tools from Panchenko [2002])."}, {"heading": "5.4 Approximate Validity and Approximate Bellman Rank", "text": "Recall that the sample-efficiency guarantee of Olive relies on two major assumptions:\n\u2022 We assumed that F contains valid functions (Definition 3). In practice, however, it is hard to specify a function class that contains strictly valid functions, as the notion of validity depends on the environment dynamics, which are unknown. A much more realistic situation is that some functions in F satisfy validity only approximately.\n\u2022 We assumed that the average Bellman errors have an exact low-rank factorization (Definition 5). While this is true for a number of RL models (Section 3), it is worth keeping in mind that these are only models of the environments, which are different from and only approximations to the real environments themselves. Therefore, it is more realistic to assume that an approximate factorization exists when defining Bellman Factorization.\nIn this section, we show that the algorithmic idea of Olive is indeed robust against both types of approximation errors, and degrades gracefully with the extent that the two assumptions are violated. Below we first introduce the approximate versions of Definition 3 and 5. Then we give a slightly extended version of our algorithm, Oliver (for Optimism-Led Iterative Value-function Elimination with Robustness, see Algorithm 3), and state its sample complexity guarantee in Theorem 4.\nDefinition 8 (Approximate validity of f). Given any CDP and function class F , we say f \u2208 F is \u03b8-valid if for any f \u2032 \u2208 F and any h \u2208 [H], |E(f, \u03c0f \u2032 , h)| \u2264 \u03b8.\nThe approximation error \u03b8 introduced in Definition 8 allows our algorithm to compete against a broader range of functions; hence the notions of optimal function and value need to be re-defined accordingly.\nDefinition 9. For a fixed \u03b8, define f?\u03b8 = argmaxf\u2208F : f is \u03b8-valid V \u03c0f , and V ?F,\u03b8 = V\n\u03c0f? \u03b8 .\nBy definition, V ?F,\u03b8 is non-decreasing in \u03b8, and Definition 3 is its special case with \u03b8 = 0. When \u03b8 > 0, we compete against some functions that do not obey Bellman equations, breaking an essential element of value-based RL. As a consequence, returning a policy with value close to V ?F,\u03b8 in a sample-efficient manner is very challenging, and the value that our algorithm can guarantee is suboptimal to V ?F,\u03b8 by a term that is proportional to \u03b8 and does not diminish with more data.\nAlgorithm 3 Oliver (F , \u03b8,M, \u03b6, \u03b7, , \u03b4) 1: Let \u2032 = + 2H(3 \u221a M(\u03b8 + \u03b7) + \u03b7).\n2: Collect nest trajectories with actions taken in an arbitrary manner; save initial contexts {x(i)1 } nest i=1 . 3: Estimate the predicted value for each f \u2208 F : V\u0302f = 1nest \u2211nest i=1 f(x (i) 1 , \u03c0f (x (i) 1 )). 4: F0 \u2190 F . 5: for t = 1, 2, . . . do 6: Choose policy ft = argmaxf\u2208Ft\u22121 V\u0302f , \u03c0t = \u03c0ft . 7: Collect neval trajectories {(x(i)1 , a (i) 1 , r i 1, . . . , x (i) H , a (i) H , r (i) H )} neval i=1 by following \u03c0t (i.e. a (i) h = \u03c0t(x (i) h )\nfor all h, i). 8: Estimate \u2200h \u2208 [H],\nE\u0303(ft, \u03c0t, h) = 1\nneval neval\u2211 i=1 [ ft(x (i) h , a (i) h )\u2212 r (i) h \u2212 ft(x (i) h+1, a (i) h+1) ] . (11)\n9: if \u2211H h=1 E\u0303(ft, \u03c0t, h) \u2264 5 \u2032/8 then\n10: Terminate and ouptut \u03c0t. 11: end if 12: Pick any ht \u2208 [H] for which E\u0303(ft, \u03c0t, ht) \u2265 5 \u2032/8H (One is guaranteed to exist). 13: Collect trajectories {(x(i)1 , a (i) 1 , r (i) 1 , . . . , x (i) H , a (i) H , r (i) H )}ni=1 where a (i) h = \u03c0t(x (i) h ) for all h 6= ht and a (i) ht\nis drawn uniformly at random. 14: Estimate\nE\u0302(f, \u03c0t, ht) = 1\nn n\u2211 i=1 1[a (i) ht = \u03c0f (x (i) ht )] 1/K ( f(x (i) ht , a (i) ht )\u2212 r(i)ht \u2212 f(x (i) ht+1 , \u03c0f (x (i) ht+1 )) ) . (12)\n15: Learn\nFt = { f \u2208 Ft\u22121 : \u2223\u2223\u2223E\u0302(f, \u03c0t, ht)\u2223\u2223\u2223 \u2264 \u03c6+ \u03b8} . (13) 16: end for\nDefinition 10 (Approximate Bellman Rank). We say that a CDP \u3008X ,A, H, P \u3009 and F \u2282 X \u00d7 A \u2192 [0, 1], admits a Bellman Factorization with Bellman Rank M , norm parameter \u03b6, and approximation error \u03b7, if there exists \u03bdh : F \u2192 RM , \u03beh : F \u2192 RM for each h \u2208 [H], such that for any f, f \u2032 \u2208 F , h \u2208 [H],\n|E(f, \u03c0f \u2032 , h)\u2212 \u3008\u03bdh(f \u2032), \u03beh(f)\u3009| \u2264 \u03b7, (10)\nand \u2016\u03bdh(f \u2032)\u20162 \u00b7 \u2016\u03beh(f)\u20162 \u2264 \u03b6 <\u221e.\nA modified version of Olive that deals with these approximation errors, Oliver (for Olive with Robustness), is specified in Algorithm 3. Here, we use to denote the component of the suboptimality that diminish as more data is collected, and the total suboptimality that we can guarantee is plus a term proportional to \u03b8 and \u03b7 (see Eq. (14) in Theorem 4). The algorithm is almost identical to Olive except for two differences: (1) it uses \u2032 on Line 9 in the termination condition as opposed to , and (2) it uses a higher threshold that depends on \u03b8 in Eq. (13) to avoid eliminating \u03b8-valid functions.\nTheorem 4. For any , \u03b4 \u2208 (0, 1), any Contextual Decision Process and function class F that admits a Bellman Factorization with parameters M , \u03b6, and \u03b7, suppose we run Oliver with any \u03b8 \u2208 [0, 1], and nest, neval, n, \u03c6 as specified in Theorem 1. Then with probability at least 1 \u2212 \u03b4, Oliver halts and returns a policy \u03c0\u0302 which is at most\n+ 8H \u221a M(\u03b8 + \u03b7) (14)\nsuboptimal compared to V ?F,\u03b8 defined in Definition 9, and the number of episodes required is at most\nO\u0303 ( M2H3K\n2 log(N\u03b6/\u03b4)\n) . (15)"}, {"heading": "6 Proofs of Main Results", "text": "In this section, we will provide the high-level intuition as well as the key lemmas involved in proving Theorem 1. We will also show how the lemmas are put together in proving the theorem. Detailed proofs of the lemmas are in Appendix C.\nAt a high-level, the proof follows an explore or exploit argument common to most sample-efficient RL algorithms. Concretely, we argue that the optimistic policy chosen in Step 5 of Algorithm 1 is either approximately optimal, or visits a context distribution under which it has a large Bellman error. This implies that using this policy for exploration leads to learning on a new context distribution. For sample efficiency, we then need to establish that this event cannot happen too many times. This is done by leveraging the Bellman Factorization of the process and arguing that the number of times an sub-optimal policy is found can be no larger than O\u0303(MH log(1/ )). Combining with the number of samples collected for every sub-optimal policy, this immediately yields our PAC learning guarantee. We now make this intuition concrete with the key lemmas in our proof."}, {"heading": "6.1 Key Lemmas for Theorem 1", "text": "We begin by decomposing a policy loss-like term into the sum of Bellman errors.\nLemma 1 (Policy loss decomposition). Define Vf = E[f(x1, \u03c0f (x1))]. Then \u2200f : X \u00d7A \u2192 [0, 1],\nVf \u2212 V \u03c0f = H\u2211 h=1 E(f, \u03c0f , h). (16)\nThe structure of this lemma is similar to many existing results in RL that upper-bound the loss of following an approximate value function greedily using the function\u2019s Bellman errors (e.g., Singh and Yee [1994]). However, most existing results are inequalities that use max-norm relaxations to deal with mismatch in distributions hence likely to be loose. Our lemma, on the other hand, is an equality, thanks to the fact that we are comparing V \u03c0f to Vf , not V\n?. As the remaining analysis will show, this simple equation allows us to relate policy loss (from the LHS) with average Bellman error (the RHS) that we use to drive exploration. In particular, this lemma implies an explore-or-terminate behavior for our algorithm.\nLemma 2 (Optimism drives exploration). Suppose the estimates V\u0302f and E\u0303(ft, \u03c0t, h) in Line 2 and 7 always satisfy\n|V\u0302f \u2212 Vf | \u2264 /8, and |E\u0303(ft, \u03c0t, h)\u2212 E(ft, \u03c0t, h)| \u2264\n8H (17)\nthroughout the execution of the algorithm. Assume further that f? is never eliminated. Then in any round t, one of the following two statements holds:\n(i) the algorithm does not terminate and\nE(ft, \u03c0t, ht) \u2265\n2H , (18)\n(ii) or the algorithm terminates and the output policy \u03c0t satisfies V \u03c0t \u2265 V ?F \u2212 .\nThe lemma essentially guarantees that the policy \u03c0t used at the iteration t in Algorithm 1 has a sufficiently large Bellman error on at least one of the levels, provided two conditions are met: (1) we have reasonably accurate value function estimates from Step 2, and (2) we collected enough samples to form reliable Bellman\nerror estimates under ft at each level h in Step 7 of the algorithm. The result of Theorem 1 can then be obtained using two further ingredients. First, we need to make sure that the first case in Lemma 2 does not happen too many times. Second, we need to collect enough samples to ensure the preconditions in the lemma in Steps 2 and 7. We first establish a bound on the number of iterations using the Bellman Rank of the problem, before moving on to sample complexity questions.\nLemma 3 (Iteration Complexity). If E\u0302(f, \u03c0t, ht) in Eq. (6) always satisfies that\n|E\u0302(f, \u03c0t, ht)\u2212 E(f, \u03c0t, ht)| \u2264 \u03c6 (19)\nthroughout the execution of the algorithm (\u03c6 is the threshold in the elimination criterion), then f? is never eliminated. Furthermore, for any particular level h, if whenever ht = h we have\n|E(ft, \u03c0t, ht)| \u2265 6 \u221a M\u03c6, (20)\nthen the number of rounds that ht = h is at most M log ( \u03b6\n2\u03c6 ) / log 53 .\nPrecondition (19) simply posits that we collect enough samples for reliable Bellman error estimation in Step 13. Intuitively, since f? has no Bellman error, this is sufficient to ensure that it is never eliminated. Precondition 20 is naturally satisfied by our exploration policies \u03c0t given Lemma 2. Given this, the above lemma bounds the number of iterations at which we can find a large Bellman error at any particular level in Algorithm 1.\nThe intuition behind this claim is most clear in the POMDP setting of Proposition 4. In this case, \u03bdh(f \u2032) in Definition 5 corresponds to the distribution over hidden states induced by \u03c0f \u2032 at level h. At iteration t, the exploration policy \u03c0ft induces such a hidden-state distribution p = \u03bdh(ft) at the chosen level h = ht, which results in the elimination of all functions which have a large Bellman error on p. Thanks to the Bellman Factorization, [\u03beht(f)]s be the Bellman error of f on the hidden state s, this corresponds to the elimination of all functions this corresponds to the elimination of all f with a large |p>\u03beh(f)|, where \u03beh(f) is also defined in Definition 5. In this case, it can be easily shown that \u03beh(f) \u2208 [\u22122, 2]M , so the space of all such vectors {\u03beh(f) : f \u2208 F} at each level h is originally contained in an `\u221e ball in M dimensions with radius 2, and, whenever ht = h, we intersect this set with two parallel halfspaces. We use a geometric argument to prove that each such intersection reduces the volume of the space by a constant factor, and we also show that the volume of the set is bounded from below. Together, these two facts lead to the iteration complexity upper bound in Lemma 3. The mathematical techniques used here are analogous to the analysis of the Ellipsoid method in linear programming.\nFinally, we need to ensure that the number of samples collected in each of Steps 2, 7, and 13 of Algorithm 1 can be upper bounded, which yields the overall PAC learning result in Theorem 1. The next three lemmas present precisely the deviation bounds required for this argument. The first two follow from simple applications of Hoeffding\u2019s inequality.\nLemma 4 (Deviation Bound for V\u0302f ). With probability at least 1\u2212 \u03b4,\n|V\u0302f \u2212 Vf | \u2264 \u221a 1\n2nest log\n2N\n\u03b4\nholds for all f \u2208 F simultaneously. Hence, we can set nest \u2265 32 2 log 2N \u03b4 to guarantee that |V\u0302f \u2212 Vf | \u2264 /8.\nThis helps control the number of samples required in Step 2 of Algorithm 1.\nLemma 5 (Deviation Bound for E\u0303(ft, \u03c0t, h)). For any fixed ft, with probability at least 1\u2212 \u03b4,\n|E\u0302(ft, \u03c0t, h)\u2212 E(ft, \u03c0t, h)| \u2264 3 \u221a 1\n2neval log\n2H\n\u03b4\nholds for all h \u2208 [H] simultaneously. Hence, we can set neval \u2265 288H 2 2 log 2H \u03b4 to guarantee that |E\u0303(ft, \u03c0t, h)\u2212 E(ft, \u03c0t, h)| \u2264 8H .\nThis lemma can be seen as the sample complexity at each iteration in Step 7 of Algorithm 1. Note that no union bound over F is needed here, since Step 7 only estimates the average Bellman error for a single policy, which is fixed before data is collected. Finally, we bound the sample complexity of the main exploration step.\nLemma 6 (Deviation Bound for E\u0302(f, \u03c0t, ht)). For any fixed \u03c0t and ht, with probability at least 1\u2212 \u03b4,\n|E\u0302(f, \u03c0t, ht)\u2212 E(f, \u03c0t, ht)| \u2264\n\u221a 8K log 2N\u03b4\nn + 2K log 2N\u03b4 n\nholds for all f \u2208 F simultaneously. Hence, we can set n \u2265 32K\u03c62 log 2N \u03b4 to guarantee that |E\u0302(f, \u03c0t, ht) \u2212 E(f, \u03c0t, ht)| \u2264 \u03c6 as long as \u03c6 \u2264 4.\nThis lemma uses Bernstein\u2019s inequality to exploit the small variance of the importance weighted estimates. We are now ready to prove Theorem 1 given these lemmas."}, {"heading": "6.2 Proof of Theorem 1", "text": "Suppose the preconditions of Lemma 2 (Eq. (17)) and Lemma 3 (Eq. (19)) hold; we will show them via concentration inequalities later. Applying Lemma 2, in every round t before the algorithm terminates,\nE(ft, \u03c0t, ht) \u2265 2H = 6 \u221a M\u03c6,\nthanks to the choice of \u03c6. For level h = ht, Eq. (20) is satisfied. According to Lemma 3, the event ht = h can happen at most M log ( \u03b6\n2\u03c6 ) / log 53 times for every h \u2208 [H]. Hence, the total number of rounds in the\nalgorithm is at most\nHM log\n( \u03b6\n2\u03c6\n) / log 5\n3 = HM log\n( 6H \u221a M\u03b6 ) / log 5\n3 .\nNow we are ready to apply the concentration inequalities to show that Eq. (17) and 19 hold with high probability. We split the total failure probability \u03b4 among the following estimation events:\n1. Estimation of V\u0302f (Lemma 4; only once): \u03b4/3. 2. Estimation of E\u0303(ft, \u03c0t, h) (Lemma 5; every round): \u03b4/ ( 3HM log ( 6H \u221a M\u03b6 ) / log 53 ) .\n3. Estimation of E\u0302(f, \u03c0t, ht) (Lemma 6; every round): same as above.\nSince these events happen in a particular sequence, our proof actually bounds the probability of these failure events conditioned on all previous events succeeding. This imposes no technical challenge as fresh data is collected for every event, so it effectively reduces to a standard union bound.\nApplying Lemma 4, 5, 6 with the above failure probabilities, we can verify that the choice of nest, neval, n in the algorithm statement satisfies the preconditions of Lemma 2 and 3. Finally, we upper bound the total number of episodes as\nnest + neval \u00b7HM log\n( 6H \u221a M\u03b6 ) / log 5\n3 + n \u00b7HM log\n( 6H \u221a M\u03b6 ) / log 5\n3\n= O\u0303\n( log(N/\u03b4)\n2 + MH3 2 log(\u03b6/\u03b4) + M2H3K 2 log(N\u03b6/\u03b4)\n) = O\u0303 ( M2H3K\n2 log(N\u03b6/\u03b4)\n) ."}, {"heading": "7 Conclusions and Discussions", "text": "In this paper, we present a new model for RL with rich observations, called Contextual Decision Processes, and a structural property, the Bellman Factorization, of these models that enables sample-efficient learning. Our unified approach allows us to address several settings of practical interest that have largely eluded RL theory to date. Via extensions of our main result, we also demonstrate that our techniques are quite robust and degrade gracefully with violation of our assumptions. While the results are certainly an exciting development for RL theory, we believe they also elicit several further questions that we look forward to studying in future work:\n1. Most importantly, can we obtain a computationally efficient algorithm for even a smaller, but novel, subset of this setting? Prior related work (for instance in contextual bandits [Dudik et al., 2011, Agarwal et al., 2014]) have used supervised learning oracles for computationally efficient approaches. Is there a suitable oracle for this more challenging setting?\n2. Our sample complexity depends polynomially on the cardinality of the action space. Can we extend our results to handle large or continuous action spaces?\n3. Can we address sample-efficient RL given only a policy class rather than a value function class? Empirical approaches in policy search often rely on policy gradients, which are subject to local optima. Can we develop parallel results to this work, without access to value functions?\nWe believe that understanding these questions will serve to bridge RL theory and practice, and will be critical to success in challengin reinforcement learning problems."}, {"heading": "Appendix", "text": ""}, {"heading": "A A New Lower Bound", "text": "In this section, we prove a new lower bound for layered episodic MDPs that meet the assumptions we make in this paper.\nWe first recall some definitions. A layered episodic MDP is defined by a time horizon H, a state space S, partitioned into sets S1, . . . ,SH , each of size at most M , and an action space A of size K. The system descriptor is replaced with a transition function \u0393 that associates a distribution over states with each state action pair. More formally, for any sh \u2208 Sh, and a \u2208 A, \u0393(sh, a) \u2208 \u2206(Sh+1). The starting state is drawn from \u03931 \u2208 \u2206(S1), and all transitions from SH are terminal.\nThere is also a reward distribution R that associates a random reward with each state-action pair. We use r \u223c R(s, a) to denote the random instantaneous reward for taking action a at state s. We assume that the cumulative reward \u2211H h=1 rh \u2208 [0, 1], where rh is the reward received at level hth as in Assumption 1.\nObserve that this process is a special case of the finite-horizon Contextual Decision Process and moreover, with the set of all value functions F = (S \u00d7A \u2192 [0, 1]), admits a Bellman Factorization with Bellman Rank at most M (by Proposition 2). Thus our upper bounds for PAC learning apply directly to this setting.\nWe now state the lower bound.\nTheorem 5. Fix M \u2265 4, H,K \u2265 2 and \u2208 (0, 1 48 \u221a 8 ). For any algorithm and any n \u2264 cMKH/ 2, there exists a layered episodic MDP with H layers, M states per layer, and K actions, such that the probability that the algorithm outputs a policy \u03c0\u0302 with V (\u03c0\u0302) \u2265 V ? \u2212 after collecting n trajectories is at most 11/12. Here c > 0 is a universal constant.\nThe result precludes a o(MKH/ 2) PAC-learning sample complexity bound since in this case the algorithm must fail with constant probability. The result is similar in spirit to other lower bounds for PAClearning MDPs [Dann and Brunskill, 2015, Krishnamurthy et al., 2016], but we are not aware of any lower bound that applies directly to our setting. There are two main differences between our bound and the lower bound due to Dann and Brunskill [2015] for episodic MDPs. First, their bound assumes that the total reward is in [0, H], so the H2 dependence in the sample complexity is a consequence of scaling the rewards. Second, their MDP is not layered, but instead has M total states shared across all layers. In contrast, our process is layered with M distinct states per layer and total reward bounded in [0, 1]. Intuitively, our additional H dependence arises simply from having MH total states.\nAt a high level, the proof is based on embedding \u0398(MH) independent multi-arm bandit instances into a MDP and requiring that the algorithm identify the best action in \u2126(MH) of them to produce a near-optimal policy. By appealing to a sample complexity lower bound for best arm identification, this implies that the algorithm requires \u2126(MHK/ 2) samples to identify a near-optimal policy.\nWe rely on a fairly standard lower bound for best arm identification. We reproduce the formal statement from Krishnamurthy et al. [2016], although the proof is based on earlier lower bounds due to Auer et al. [2002].\nProposition 7. For any K \u2265 2 and \u03c4 \u2264 \u221a\n1/8 and any best arm identification algorithm that produces an estimate a\u0302, there exists a multi-arm bandit problem for which the best arm a? is \u03c4 better than all others, but P[a\u0302 6= a?] \u2265 1/3 unless the number of samples T is at least K72\u03c42 .\nIn particular, the problem instance used in this lower bound is one where the best arm a? has reward Ber(1/2 + ), while all other arms have reward Ber(1/2). Our construction will embed precisely these instances into the MDP.\nProof. We construct an MDP with M states per level, H levels, and K actions per state. At each level, we allocate three special states, wh, gh, and bh for \u201cwaiting\u201d, \u201cgood\u201d, and \u201cbad.\u201d The remaining M\u22123 \u201cbandit\u201d states are denoted sh,i, i \u2208 [M \u2212 3]. Each bandit state has an unknown optimal action a?h,i.\nThe dynamics are as follows.\n\u2022 For waiting states wh, all actions are equivalent and with probability 1 \u2212 1/H they transition to the next waiting state wh+1. With the remaining 1/H probability, they transition randomly to one of the bandit state sh+1,i so each subsequent bandit state is visited with probability 1 H(M\u22123) .\n\u2022 For bandit states sh,i, the optimal action a?h,i transitions to the good state gh+1 with probability 1/2+\u03c4 and otherwise to the bad state bh+1. All other actions transition to gh+1 and bh+1 with probability 1/2. Here \u03c4 is a parameter we will set toward the end of the proof.\n\u2022 Good states always transition to the next good state and bad states always transition to bad states.\n\u2022 The starting state is w1 with probability 1\u22121/H and s1,i with probability 1H(M\u22123) for each i \u2208 [M\u22123].\nThe reward at all states except gH is zero, and the reward at gH is one. Clearly the optimal policy takes actions a?h,i for each bandit state, and takes arbitrary actions at the waiting, good, and bad states.\nThis construction embeds H(M\u22123) best arm identification problems that are identical to the one used in Proposition 7 into the MDP. Moreover, these problems are independent in the sense that samples collected from one provides no information about any others. Appealing to Proposition 7, for each bandit state (h, i), unless K72\u03c42 samples are collected from that state, the learning algorithm will fail to identify the optimal action a?h,i with probability at least 1/3.\nAfter the execution of the algorithm, let B be the set of (h, s) pairs for which the algorithm identifies the correct action. Let C be the set of (h, s) pairs for which the algorithm collects fewer than K72\u03c42 samples. For a set S, we use SC to denote the complement.\nE[|B|] = E \u2211 (h,s) 1[ah,s = a ? h,s]  \u2264 ((M \u2212 3)H \u2212 |C|) +\n\u2211 (h,s)\u2208C E1[ah,s = a?h,s]\n\u2264 ((M \u2212 3)H \u2212 |C|) + 2 3 |C| = (M \u2212 3)H \u2212 |C|/3\nThe second inequality is based on Proposition 7. Now, by the pigeonhole principle, if n \u2264 (M\u22123)H2 \u00d7 K 72\u03c42 , then the algorithm can collect K72\u03c42 samples from at most half of the bandit problems. Thus |C| \u2265 (M \u2212 3)H/2, which implies,\nE[|B|] \u2264 5 6 (M \u2212 3)H\nBy Markov\u2019s inequality, P [ |B| \u2265 11\n12 (M \u2212 3)H\n] \u2264 E[|B|]11\n12 (M \u2212 3)H \u2264 5/6 11/12 = 10/11\nThus with probability at least 1/11 we know that |B| \u2264 1112 (M \u2212 3)H, so the algorithm failed to identify the optimal action on 1/12 fraction of the bandit problems. Under this event, the suboptimality of the policy produced by the algorithm is,\nV ? \u2212 V (\u03c0\u0302) = P[visit BC ]\u00d7 \u03c4 = P[ \u22c3\n(h,i)\u2208BC visit (h, i)]\u00d7 \u03c4 = \u2211 (h,i)\u2208BC P[visit (h, i)]\u00d7 \u03c4\n= \u2211\n(h,i)\u2208BC\n1\nH(M \u2212 3) (1\u2212 1/H)h\u22121\u03c4 \u2265 \u2211 (h,i)\u2208BC\n1\nH(M \u2212 3) (1\u2212 1/H)H\u03c4\n\u2265 \u2211\n(h,i)\u2208BC\n1 H(M \u2212 3) 1 4 \u03c4 \u2265 H(M \u2212 3) 12\n1 H(M \u2212 3) 1 4 \u03c4 = \u03c4 48\nHere we use the fact that the probability of visiting a bandit state is independent of the policy and that the policy can only visit one bandit state per episode, so the events are disjoint. Moreover, if we visit a bandit state for which the algorithm failed to identify the optimal action, the difference in value is \u03c4 , since the optimal action visits the good state with \u03c4 more probability than a suboptimal one. The remainder of the calculation uses the transition model, the fact that H \u2265 2, and finally the fact that |B| \u2264 11/12(M \u2212 3)H. Setting \u03c4 = 48 and using the requirement on \u03c4 gives a stricter requirement on and proves the result."}, {"heading": "B Models with Low Bellman Rank", "text": ""}, {"heading": "B.1 Proof of Propositon 2", "text": "Let M = |S| and each element of \u03bdh(\u00b7) and \u03beh(\u00b7) be indexed by s \u2208 S. We explicitly construct \u03bdh and \u03beh as follows: let [\u03bdh(f \u2032)]s = Pr [xh = (s, h) | a1:h\u22121 \u223c \u03c0f \u2032 ], and [\u03beh(f)]s = E [ f(xh, ah)\u2212 rh\u2212f(xh+1, ah+1) \u2223\u2223 xh = (s, h), ah:h+1 \u223c \u03c0f ] . In other words, \u03bdh(f\n\u2032) is the distribution over states induced by \u03c0f \u2032 at time step h, and the s-th element of \u03beh is the traditional notion of Bellman error for state s. It is easy to verify that Eq. (3) holds. For the norm constraint, since \u2016\u03bdh(\u00b7)\u20161 = 1 and \u2016\u03beh(\u00b7)\u2016\u221e \u2264 2, we have \u2016\u03bdh(\u00b7)\u20162 \u2264 1 and \u2016\u03beh(\u00b7)\u20162 \u2264 2 \u221a M , hence \u03b6 = 2 \u221a M is a valid upper bound on the product of vector norms."}, {"heading": "B.2 Generalization of Li [2009]\u2019s setting", "text": "Li [2009] considers the setting where the learner is given an abstraction \u03c6 that maps the large state space S in an MDP to some finite abstract state space S\u0304 in an MDP. |S\u0304| is potentially much smaller than |S|, and it is guaranteed that Q? can be expressed as a function of (\u03c6(s), a). Li shows that when delayed Q-learning is applied to this setting, the sample complexity has polynomial dependence on |S\u0304| with no direct dependence on |S|.\nIn the next proposition, we show that a similar setting for finite-horizon problems admits Bellman Factorization with low Bellman Rank. In particular, we subsume Li\u2019s setting by viewing it as a POMDP, where \u03c6 is a deterministic emission process that maps hidden state s \u2208 S to discrete observations \u03c6(s) \u2208 S\u0304 = O, and the candidate value functions are reactive so they depend on \u03c6(s) but not directly on s or any previous state. More generally, Proposition 8 claims that for POMDPs with large hidden-state spaces and finite observation spaces, the Bellman Rank is polynomial in the number of observations if the function class is reactive.\nProposition 8 (A generalization of [Li, 2009]\u2019s setting). Consider a POMDP introduced in Example 2 with |O| <\u221e, and assume that rewards can only take CR different discrete values.11 The CDP \u3008X ,A, H, P \u3009 induced by letting X = O\u00d7[H] and xh = (oh, h), with any F : X\u00d7A \u2192 [0, 1], admits a Bellman Factorization with M = |O|2CRK and \u03b6 = 2|O|K \u221a CR.\nProof. For any f, f \u2032 \u2208 F , h \u2208 [H], let \u03bdh(f \u2032) and \u03beh(f) be vectors of length |O|2CRK. Let the entry of \u03bdh(f \u2032) indexed by (oh, ah, rh, oh+1) be\nP [oh, rh, oh+1 | a1:h\u22121 \u223c \u03c0f \u2032 , ah],\ninterpreted as the following: conditioned on the fact that the first h\u2212 1 actions are chosen according to \u03c0f \u2032 , what is the probability of seeing a particular tuple of (oh, rh, oh+1) when taking a particular action for ah? For \u03beh(f), let the corresponding entry be (with xh = (oh, h) and xh+1 = (oh+1, h+ 1) as the corresponding contexts in the CDP)\n1[ah = \u03c0f (xh)] ( f(xh, ah)\u2212 rh \u2212 f(xh+1, \u03c0f (xh+1)) ) .\nIt is not hard to verify that E(f, \u03c0f \u2032 , h) = \u3008\u03bdh(f \u2032), \u03beh(f)\u3009. Since fixing ah to any non-adaptive choice of action induces a valid distribution over (oh, rh, oh+1), we have \u2016\u03bdh(f \u2032)\u20161 = K and \u2016\u03bdh(f \u2032)\u20162 \u2264 K. On the other hand, \u2016\u03beh(f)\u2016\u221e \u2264 2 but the vector only has |O|2CR non-zero entries, so \u2016\u03beh(f)\u20162 \u2264 2|O| \u221a CR. Together the norm bound follows.\n11The discrete reward assumption is made to simplify presentation and can be relaxed. For arbitrary rewards, we can always discretize the reward distribution onto a grid of resolution CR, which incurs \u03b7 = O(1/CR) approximation error in Definition 10."}, {"heading": "B.3 POMDP-like models", "text": "We prove Propositions 3 and 4 by studying a slightly more general model (See Figure 1c). The model behaves like a POMDP except that both the transition function and the reward depends also on the observation, that is \u0393 : S \u00d7 X \u00d7 A \u2192 \u2206(S) and R : S \u00d7 X \u00d7 A \u2192 \u2206([0, 1]). Clearly this model generalizes standard POMDPs, where the transition and reward are both assumed to be independent of the current observation.\nThis model also generalizes the MDP with low-rank dynamics described in Proposition 3: if the future hidden-state is independent of the current hidden-state conditioned on the observation, we can treat the hidden-state as the low-rank factor in Eq. (4) (see Figure 1). The low-rank dynamics requires that for x at level h, \u0393(x\u2032|x, a) = \u3008q(x, a), wh(x\u2032)\u3009 for two M -dimensional vectors. If we write [q(x, a)]s\u2032 = \u0393(s\u2032|x, a) and [wh(x \u2032)]s\u2032 = Ds\u2032(x \u2032) in the above model, we have identified an M -dimensional decomposition of the transition dynamics. Thus Proposition 3 follows as a special case of our analysis for this more general model. As in Proposition 4, we consider a class F reactive value functions. Observe that for the MDP with low rank dynamics, this provides essentially no loss of generality, since the optimal value function is reactive.\nProposition 9. Let \u3008X ,A, H, P \u3009 be the CDP induced by the above model which generalizes POMDPs, with X = O \u00d7 [H] and xh = (oh, h). Given any F : X \u00d7A \u2192 [0, 1], the Bellman Rank M \u2264 |S| with \u03b6 = 2 \u221a |S|.\nProof. For any f, f \u2032 \u2208 F , h \u2208 [H], consider\na1:h\u22121 \u223c \u03c0f \u2032 , ah:h+1 \u223c \u03c0f ,\nwhich is how actions are chosen in the definition of E(f, \u03c0f \u2032 , h) (see Definition 2). Such a decision-making strategy will induce a distribution over the following set of variables\n(sh, oh, ah, rh, oh+1, ah+1).\nWe use \u00b5f,f \u2032 to denote this distribution, and the subscript emphasizes its dependence on both f and f \u2032. Note that the marginal distribution of sh only depends on f \u2032 and has no dependence on f , which we denote as \u00b5f \u2032 . Then, sampling from \u00b5f,f \u2032 is equivalent to the following sampling procedure: (recall that xh = (oh, h))\nsh \u223c \u00b5f \u2032 , oh \u223c Dsh , ah = \u03c0f (xh), rh \u223c R(sh, oh, ah), sh+1 \u223c \u0393(sh, oh, ah), oh+1 \u223c Dsh+1 , ah+1 = \u03c0f (xh).\nThat is, we first sample sh from the marginal \u00b5f \u2032 , and then sample the remaining variables conditioned on sh. Notice that once we condition on sh, the sampling of the remaining variable has no dependence on f\n\u2032, so we denote the joint distribution over the remaining variables (conditioned on the value of sh) \u00b5f |sh .\nFinally, we express the factorization of E(f, \u03c0f \u2032 , h) as follows:\nE(f, \u03c0f \u2032 , h) = E\u00b5f,f\u2032 [f(xh, ah)\u2212 rh \u2212 f(xh+1, ah+1)] = Esh\u223c\u00b5f\u2032E\u00b5f|sh [f(xh, ah)\u2212 rh \u2212 f(xh, ah+1)]\n= \u2211 s\u2208S \u00b5f \u2032(s) \u00b7 E\u00b5f|s [f(xh, ah)\u2212 rh \u2212 f(xh, ah+1)].\nWe define \u03bdh(\u00b7) and \u03beh(\u00b7) explicitly with dimension M = |S|: given f and f \u2032, we index the elements of \u03bdh(f\n\u2032) and those of \u03beh(f) by s \u2208 S, and let [\u03bdh(f \u2032)]s = \u00b5f \u2032(s), [\u03beh(f)]s = E\u00b5f|s [f(xh, ah)\u2212 rh\u2212 f(xh, ah+1)]. \u03b6 = 2 \u221a M follows from the fact that \u2016\u03bdh(f \u2032)\u20161 = 1 and \u2016\u03beh(f)\u2016\u221e \u2264 2."}, {"heading": "B.4 Predictive State Representations", "text": "In this subsection we state and prove the formal version of Proposition 5. We first recall the definitions and some basic properties of PSRs, which can be found in Singh et al. [2004], Boots et al. [2011]. Consider dynamical systems with discrete and finite observation space O and action space A. Such systems can be fully specified by moment matrices PT |H, where H is a set of histories (past events) and T is a set of tests (future events). Elements of T and H are sequences of alternating actions and observations, and the entry\nof PT |H indexed by t \u2208 T on the row and \u03c4 \u2208 H on the column is Pt|\u03c4 , the probability that the test t would succeed conditioned on a particular past \u03c4 . For example, if t = aoa\u2032o\u2032, success of t means seeing o and o\u2032 in the next two steps after \u03c4 is observed, if interventions a and a\u2032 were to be taken.\nAmong all such systems, we are concerned about those that have finite linear dimension, defined as supT ,H rank(PT |H). As an example, the linear dimension of a POMDP is bounded by the number of hiddenstates. Systems with finite linear dimension have many nice properties, which allow them to be expressed by compact models, namely PSRs. In particular, fixing any T and H such that rank(PT |H) is equal to the linear dimension (such (H, T ) are called core histories and core tests), we have:\n1. For any history \u03c4 \u2208 (A\u00d7O)\u2217, the conditional predictions of core tests PT |{\u03c4} (we will also write PT |\u03c4 ) is always a state, that is, a sufficient statistics of history. This gives rise to the name \u201cpredictive state representation\u201d.\n2. Based on PT |\u03c4 , the conditional prediction of any test t can be computed from a PSR model, parame-\nterized by square matrices {Bao} and a vector b\u221e with dimension |T |. Letting t(i) be the i-th (action, observation) pair in t, and |t| be the number of such pairs, the prediction rule is\nPt|\u03c4 = b > \u221eBt(|t|) \u00b7 \u00b7 \u00b7Bt(1)PT |\u03c4 . (21)\nAnd these parameters can be computed as\nBao = PT ,ao,HP \u2020 T ,H , b > \u221e = P > HP \u2020 T ,H (22)\nwhere\n\u2022 PT ,H is a matrix whose element indexed by (t \u2208 T , \u03c4 \u2208 H) is P\u03c4t|\u2205, where \u03c4t is the concatenation of \u03c4 and t and \u2205 is the null history. \u2022 PH = P{\u2205},H. \u2022 PT ,ao,H = PT ,Hao , where Hao = {\u03c4ao : \u03c4 \u2208 H}.\nNow we are ready to state and prove the formal version of Proposition 5.\nProposition 10 (Formal version of Proposition 5). Consider a partially observable system with observation space O, and the induced CDP \u3008X ,A, H, P \u3009 with xh = (oh, h). To handle some subtleties, we assume that\n1. |O| <\u221e (classical PSR results assume discrete observations).\n2. o1 is deterministic (PSR trajectories always start with an action), and rh is a deterministic function of oh+1 (reward is usually omitted or assumed to be part of the observation).\nIf the linear dimension of the original system is at most L, then with any F : X\u00d7A \u2192 [0, 1], this model admits a Bellman Factorization with M = LK. Assuming further that the PSR\u2019s parameters are non-negative under some choice of core histories and tests (H, T ) of size |H| = |T | = L, then we have \u03b6 \u2264 2K2L3 \u221a L/\u03c33min, where \u03c3min is the minimal non-zero singular value of PT ,H.\nProof. For any f, f \u2032 \u2208 F , h \u2208 [H], define\n1. \u00b5f \u2032,h as the distribution vector over (a1, o2, . . . , oh\u22121, ah\u22121) \u2208 (A\u00d7O)h\u22122\u00d7A induced by a1:h\u22121 \u223c \u03c0f \u2032 . (Recall that o1 is deterministic.)\n2. P2|h\u22121 as a moment matrix whose element with column index (oh, ah, oh+1) \u2208 O \u00d7A\u00d7O and row index (a1, o2, . . . , oh\u22121, ah\u22121) \u2208 (A\u00d7O)h\u22122 \u00d7A is\nP [oh, oh+1 \u2016 ah\u22121, ah | a1, o2, . . . , oh\u22121].12\n12PSR literature often emphasizes the intervention aspect of the actions in tests via the uses \u201c\u2016\u201d symbol; mathematically they can be treated as the conditioning operator in most cases.\n3. Ff,h as a vector whose element indexed by (oh, ah, oh+1) \u2208 O \u00d7A\u00d7O is (recall that xh = (oh, h) and rh is function of oh+1)\n1[ah 6= \u03c0f (xh)] ( f(xh, ah)\u2212 rh \u2212 f(xh+1, \u03c0f (xh+1)) ) .\nFirst we verify that E(f, \u03c0f \u2032 , h) = \u00b5>f \u2032,hP2|h\u22121Ff,h.\nTo show this, first observe that \u00b5>f \u2032,hP2|h\u22121 is a row vector whose element indexed by (oh, ah, oh+1) is\nP [oh, oh+1 \u2016 ah | a1:h\u22121 \u223c \u03c0f \u2032 ].\nMultiplied by Ff,h, we further get\nE[f(xh, ah)\u2212 rh \u2212 f(xh+1, \u03c0f (xh+1)) | a1:h\u22121 \u223c \u03c0f \u2032 , ah \u223c \u03c0f ] = E(f, \u03c0f \u2032 , h).\nNext, we explicit construct \u03beh(f) and \u03bdh(f \u2032) by factorizing P2|h\u22121 = P1 \u00d7 P2, where both P1 and P2 have no dependence on either f or f \u2032. Recall that for PSRs, any history (a1, o2, . . . , oh\u22121) has a sufficient statistics PT |a1,o2,...,oh\u22121 , that is a vector of predictions over the selected core tests T conditioned on the observed history. P1 consists of row vectors of length LK, and for the row indexed by (a1, o2, . . . , oh\u22121, ah\u22121) the vector is\nPadah\u22121 ( P>T |a1,o2,...,oh\u22121 ) ,\nwhere Pada(\u00b7) is a function that takes a L-dimensional vector, puts it in the a-th block of a vector of length LK, and fills the remaining entries with 0.\nWe construct P2 to be a matrix whose column vector indexed by (oh, ah, oh+1) isB>a(1),ohB>ah,oh+1b\u221e. . . B> a(K),oh B>ah,oh+1b\u221e  , where A = {a(1), . . . , a(K)}. It is easy to verify that P2|h\u22121 = P1 \u00d7 P2 by recalling the prediction rules of PSRs in Eq. (21):\nP [oh, oh+1 \u2016 ah\u22121, ah | a1, o2, . . . , oh\u22121] = b>\u221eBah,oh+1Bah\u22121,ohPT |a1,o2,...,oh\u22121 = P>T |a1,o2,...,oh\u22121(B > ah\u22121,oh B>ah,oh+1b\u221e).\nGiven this factorization, we can write\nE(f, \u03c0f \u2032 , h) = (\u00b5>f \u2032,hP1)\u00d7 (P2Ff,h).\nSo we let \u03bdh(f \u2032) = P>1 \u00b5f \u2032,h and \u03beh(f) = P2Ff,h. It remains to be shown that we can bound their norms. Notice that the entries of a state vector PT |(\u00b7) are predictions of probabilities, so \u2016P1\u2016\u221e \u2264 1. Since \u00b5f \u2032,h is a probability vector, its dot product with every column in P1 is bounded by 1, hence \u2016\u03bdh(f \u2032)\u20162 \u2264 \u221a LK.\nAt last, we consider bounding the norm of P2Ff,h. We will upper bound each entry of P2Ff,h by providing an `1 bound on the row vectors of P2, and then applying the Ho\u0308lder\u2019s inequality with \u2016Ff,h\u2016\u221e \u2264 2. Since we assumed that all model parameters of the PSRs are non-negative, P2 is a non-negative matrix, and bounding the `1 norm of its row vectors is equivalent to bounding each entry of the vector P2 1, where 1 is an all-1 vector. This vector is equal to\nP2 1 =\n \u2211 (oh,ah,oh+1) B> a(1),oh\nB>ah,oh+1b\u221e . . .\u2211\n(oh,ah,oh+1) B> a(K),oh B>ah,oh+1b\u221e\n =  (\u2211 oh B> a(1),oh )(\u2211 (ah,oh+1) B>ah,oh+1 ) b\u221e\n. . .(\u2211 oh B> a(K),oh )(\u2211 (ah,oh+1) B>ah,oh+1 ) b\u221e.\n (23)\nSince we care about the `\u221e norm of this vector, we can bound the `\u221e norm of each component vector. Using the PSR learning equations, we have\n\u2211 a,o Bao = \u2211 a,o PT ,ao,HP \u2020 T ,H = (\u2211 a,o PT ,ao,H ) P \u2020T ,H.\nNote that for any fixed a = a(i), every entry of \u2211 o PT ,ao,H is the probability that the event t \u2208 T happens after h \u2208 H happens with a one step delay in the middle, where a is intervened in that delayed time step. Such entries are predicted probabilities of events, hence lie in [0, 1]. Consequently, \u2016 \u2211 a,o PT ,ao,H\u2016\u221e \u2264 K, and\nwe can upper bound the matrix `2 norm by Frobenius norm: \u2016 \u2211 a,o PT ,ao,H\u20162 \u2264 \u2016 \u2211 a,o PT ,ao,H\u2016F \u2264 KL. Hence, \u2225\u2225\u2225\u2225\u2225\u2211 a,o Bao \u2225\u2225\u2225\u2225\u2225 2 \u2264 \u2225\u2225\u2225\u2225\u2225\u2211 a,o PT ,ao,H \u2225\u2225\u2225\u2225\u2225 2 \u00b7 \u2225\u2225\u2225P \u2020T ,H\u2225\u2225\u2225 2 \u2264 KL/\u03c3min.\nUsing a similar argument, for any fixed a = a(i), \u2016 \u2211 oBao\u20162 \u2264 L/\u03c3min. We also recall the definition of b\u221e and bound its norm similarly:\n\u2016b\u221e\u20162 = \u2225\u2225\u2225P>HP \u2020T ,H\u2225\u2225\u2225 2 \u2264 \u221a L/\u03c3min.\nFinally, we have\n\u2016P2 1\u2016\u221e \u2264 max a\u2208A \u2225\u2225\u2225\u2225\u2225\u2225 (\u2211\noh\nB>a,oh ) \u2211 (ah,oh+1) B>ah,oh+1  b\u221e \u2225\u2225\u2225\u2225\u2225\u2225 \u221e\n(Eq. (23))\n\u2264 max a\u2208A \u2225\u2225\u2225\u2225\u2225\u2225 (\u2211\noh\nB>a,oh ) \u2211 (ah,oh+1) B>ah,oh+1  b\u221e \u2225\u2225\u2225\u2225\u2225\u2225\n2\n\u2264 ( max a\u2208A \u2225\u2225\u2225\u2225\u2225\u2211 o Bao \u2225\u2225\u2225\u2225\u2225 2 )\u2225\u2225\u2225\u2225\u2225\u2211 a,o Bao \u2225\u2225\u2225\u2225\u2225 2 \u2016b\u221e\u20162 \u2264 KL2 \u221a L/\u03c33min.\nSo each row of P2 has `1 norm bounded by the above expression. Applying Ho\u0308lder\u2019s inequality we have each entry of P2Ff,h bounded by 2KL 2 \u221a L/\u03c33min, hence \u2016\u03beh(f)\u20162 = \u2016P2Ff,h\u20162 \u2264 2L3K \u221a K/\u03c33min. Combined with the bound on \u2016\u03bdh(f \u2032)\u20162 the proposition follows."}, {"heading": "B.5 Linear Quadratic Regulators", "text": "In this subsection we prove that Linear Quadratic Regulators (LQR) (See e.g., Anderson and Moore [2007] for a standard reference) admit Bellman Factorization with low Bellman Rank. We study a finite-horizon, discrete-time LQR, governed by the equations:\nx1 = 0, xh+1 = Axh +Bah + h, and ch = x > hQxh + a > h ah + \u03c4h,\nwhere xh \u2208 Rd, ah \u2208 RK and the noise variables are centered with E[ h >h ] = \u03a3, and E\u03c42h = \u03c32. We operate with costs ch and the goal is to minimize cumulative cost. We assume that all parameters A,B,\u03a3, Q, \u03c3\n2 are bounded in spectral norm by some \u0398 \u2265 1, that \u03bbmin(B>B) \u2265 \u03ba > 0, and that Q is strictly positive definite. Other formulations of LQR include replace a>h ah in our cost with a > hRah for a positive definite matrix R, but this can be accounted for by a change of variables. Generalization to non-stationary parameters is straightforward.\nThis model describes an MDP with continuous state and action spaces, and the corresponding CDP has context space Rd\u00d7 [H], although we will always explicitly write both parts of the context in this section. It is well known that in a discrete time LQR, the optimal policy is a non-stationary linear policy \u03c0?(x, h) = P?,hx [Anderson and Moore, 2007], where P?,h \u2208 RK\u00d7d is a h-dependent control matrix. Moreover, if all of the\nparameters are known to have spectral norm bounded by \u0398 then the optimal policy has matrices with bounded spectral norm as well, as we will see in our proof.\nOur arguments for LQR use decoupled policy and value function classes as in Section 5.2. We use a policy class and value function class defined below for parameters B1, B2, B3 that we will set in the proof.\n\u03a0 = {\u03c0~P : \u03c0~P (x, h) = Phx, ~P \u2208 H\u220f i=1 RK\u00d7d, \u2016Ph\u20162 \u2264 B1}\nG = {f~\u039b, ~O : f~\u039b, ~O(x, h) = x >\u039bhx+Oh, ~\u039b \u2208 H\u220f i=1 Rd\u00d7d, \u2016\u039bh\u20162 \u2264 B2, ~O \u2208 RH , |Oh| \u2264 B3}\nThe policy class consists of linear non-stationary policies, while the value functions are nonstationary quadratics with constant offset.\nProposition 11 (Formal version of Proposition 6). Consider an LQR under the assumptions outlined above. Let G be a class of non-stationary quadratic value functions with offsets and let \u03a0 be a class of linear non-stationary policies, defined above. Then, at level h, for any (\u03c0, g) pair and any roll-in policy \u03c0\u2032 \u2208 \u03a0, the average Bellman error can be written as\nE(g, \u03c0, \u03c0\u2032, h) = \u3008\u03beh(\u03c0, g), \u03bdh(\u03c0\u2032)\u3009,\nwhere \u03bd, \u03be \u2208 Rd2+1. If \u03a0,G are defined as above with bounds B1, B2, B3 and if all problem parameters have spectral norm at most \u0398, then\n\u2016\u03beh(\u03c0, g)\u201622 \u2264 d ( B2 + \u0398 +B 2 1 \u2212 (\u0398 + \u0398B1)2B2 ) + 4B23 + d 2\u03982B22\n\u2016\u03bdh(\u03c0\u2032)\u201622 \u2264 dH+1\u0398(\u0398B1)2H + 1.\nHence, the problem admits Bellman Factorization with Bellman Rank at most d2 +1 and \u03b6 that is exponential in H but polynomial in all other parameters. Moreover, if we set B1, B2, B3 as,\nB1 = \u0398 2/\u03ba,B2 =\n( 6\u03986\n\u03ba2\n)H \u0398, B3 = ( 6\u03986\n\u03ba2\n)H dH\u03982,\nthen the optimal policy and value function belong to \u03a0,G respectively.\nWe prove the proposition in several components. First, we study the relationship between policies and value functions, showing that linear policies induce quadratic value functions. Then, we turn to the structure of the optimal policy, showing that it is linear. Next, we derive bounds on the parameters B1, B2, B3 which ensure that the optimal policy and value function belong to \u03a0,G. Lastly, we demonstrate the Bellman Factorization.\nThe next lemma derives a relationship between linear policies and quadratic value functions.\nLemma 7. If \u03c0 is a linear non-stationary policy, \u03c0h(x) = P\u03c0,hx, then V \u03c0(x, h) = x>\u039b\u03c0,hx + O\u03c0,h where \u039b\u03c0,h \u2208 Rd\u00d7d depends only on \u03c0 and h and O\u03c0,h \u2208 R. These parameters are defined inductively by,\n\u039b\u03c0,H = Q+ P > \u03c0,HP\u03c0,H , O\u03c0,H = 0\n\u039b\u03c0,h = Q+ P > \u03c0,hP\u03c0,h + (A+BP\u03c0,h) >\u039b\u03c0,h+1(A+BP\u03c0,h)\nO\u03c0,h = tr(\u039b\u03c0,h+1\u03a3) +O\u03c0,h+1,\nwhere we recall that \u03a3 is the covariance matrix of the h random variables.\nProof. The proof is by backward induction on h, starting from level H. Clearly,\nV \u03c0(x,H) = x>Qx+ \u03c0H(x) >\u03c0H(x) = x >Qx+ x>P>\u03c0,HP\u03c0,Hx , x >\u039b\u03c0,Hx\nso V \u03c0(\u00b7, H) is a quadratic function.\nFor the inductive step, consider level h and assume that for all x, V \u03c0(x, h + 1) = x>\u039b\u03c0,h+1x + O\u03c0,h+1. Then, expanding definitions,\nV \u03c0(x, h) = x>Qx+ \u03c0h(x) >\u03c0h(x) + Ex\u2032\u223c(x,\u03c0h(x))V \u03c0(x\u2032, h+ 1) = x>Qx+ x>P>\u03c0,hP\u03c0,hx+ Ex\u2032\u223c(x,\u03c0h(x)) [ (x\u2032)>\u039b\u03c0,h+1(x \u2032) +O\u03c0,h+1 ]\n= x>Qx+ x>P>\u03c0,hP\u03c0,hx+ E h [ (Ax+B\u03c0h(x) + h) >\u039b\u03c0,h+1(Ax+B\u03c0h(x) + h) +O\u03c0,h+1 ]\n= x>Qx+ x>P>\u03c0,hP\u03c0,hx+ E h [ (Ax+BP\u03c0,hx+ h) >\u039b\u03c0,h+1(Ax+BP\u03c0,hx+ h) +O\u03c0,h+1 ] = x>Qx+ x>P>\u03c0,hP\u03c0,hx+ x >(A+BP\u03c0,h)\n>\u039b\u03c0,h+1(A+BP\u03c0,h)x+ E h >h \u039b\u03c0,h+1 h +O\u03c0,h+1 = x>Qx+ x>P>\u03c0,hP\u03c0,hx+ x >(A+BP\u03c0,h) >\u039b\u03c0,h+1(A+BP\u03c0,h)x+ tr(\u039b\u03c0,h+1\u03a3) +O\u03c0,h+1\nThus, setting,\n\u039b\u03c0,h = Q+ P > \u03c0,hP\u03c0,h + (A+BP\u03c0,h) >\u039b\u03c0,h+1(A+BP\u03c0,h)\nO\u03c0,h = tr(\u039b\u03c0,h+1\u03a3) +O\u03c0,h+1\nWe have shown that V \u03c0(x, h) is a quadratic function of x.\nThe next lemma shows that the optimal policy is linear.\nLemma 8. In an LQR, the optimal policy \u03c0? is a non-stationary linear policy given by \u03c0?(x, h) = P?,hx, with parameter matrices P?,h \u2208 RK\u00d7d at each level h. The optimal value function V ? is a non-stationary quadratic function given by V ?(x, h) = x>\u039b?,hx + O?,h with parameter matrix \u039b?,h \u2208 Rd\u00d7d and offset O?,h \u2208 R. The optimal parameters are defined recursively by,\nP?,H = 0 \u039b?,H = Q O?,H = 0\nP?,h = (I +B >\u039b?,h+1B) \u22121B>\u039b?,h+1A \u039b?,h = Q+ P > ?,hP?,h + (A+BP?,h) >\u039b?,h+1(A+BP?,h)\nO?,h = tr(\u039b?,h+1\u03a3) +O?,h+1.\nProof. We will explicitly calculate the optimal policy \u03c0? and demonstrate that it is linear. Then we will instantiate these matrices in Lemma 7 to compute the optimal value function.\nFor the optimal policy, we use backward induction on H. At the last level, we have,\n\u03c0?(x,H) = argmin a x>Qx+ a>a = 0.\nRecall that we are working with costs, so the optimal policy minimizes the expected cost. Thus P?,H = 0 \u2208 RK\u00d7d and \u03c0?(x,H) is a linear function of x.\nPlugging into Lemma 7 the value function has parameters,\n\u039b?,H = Q, O?,H = 0\nFor the induction step, assume that \u03c0?(x, h + 1) = P?,h+1x is linear and V ?(x, h + 1) is quadratic with\nparameter \u039b?,h+1 0 and O?,h+1. We then have,\n\u03c0?(x, h) = argmin a x>Qx+ a>a+ Ex\u2032\u223c(x,a)V ?(x\u2032, h+ 1)\n= argmin a\nx>Qx+ a>a+ E h(Ax+Ba+ h)>\u039b?,h+1(Ax+Ba+ h) +O?,h+1\n= argmin a\na>(I +B>\u039b?,h+1B)a+ 2\u3008\u039b?,h+1Ax,Ba\u3009\nThis follows by applying definitions and eliminating terms that are independent of a. Since R,\u039b?,h+1 0 by assumption and our inductive hypothesis, we can analytically minimize. Setting the derivative equal to zero gives,\na = (I +B>\u039b?,h+1B) \u22121B>\u039b?,h+1Ax\nThus P?,h = (I +B >\u039b?,h+1B) \u22121B>\u039b?,h+1A.\nAs a consequence, we can now derive bounds on the policy and value function parameters. Recall that we assume that all system parameters are bounded in spectral norm by \u0398 \u2265 1 and that (B>B)\u22121 has minimum eigenvalue at least \u03ba.\nCorollary 1. With \u0398 and \u03ba defined above, we have\n\u2016P?,h\u2016f \u2264 \u03982\n\u03ba , \u2016\u039b?,h\u2016 \u2264\n( 6\u03986\n\u03ba2\n)H\u2212h \u0398, |O?,h| \u2264 (H \u2212 h) ( 6\u03986\n\u03ba2\n)H\u2212h d\u03982.\nProof. Again we proceed by backward induction, using Lemma 8. Clearly \u2016P?,H\u2016F = 0, \u2016\u039b?,H\u2016F \u2264 \u0398, |O?,H | = 0.\nFor the inductive step we can actually compute P?,h without any assumption on \u039b?,h+1, except for the fact that it is symmetric positive definite, which follows from Lemma 8. First, we consider just the matrix B>\u039b?,h+1A. Diagonalizing \u039b?,h+1 = U >DU where U is orthonormal and D is diagonal, gives,\nB>\u039b?,h+1A = (UB) >D(UA) = (UB)>D(UB)(B>U>UB)\u22121(UB)>(UA)\n= (UB)>D(UB)(B>B)\u22121B>A = B>\u039b?,h+1\u03a0BA\nHere \u03a0B = B(B >B)\u22121B> is an orthogonal projection operator. This derivation uses the fact that since (UB)>D has rows in the column space of UB, we can right multiply by the projector onto UB. We also use that U>U = I since U has orthonormal rows and columns.\nThus, by the submultiplicative property of spectral norm, we obtain\n\u2016(I +B>\u039b?,h+1B)\u22121B>\u039b?,h+1A\u20162 \u2264 \u2016(I +B>\u039b?,h+1B)\u22121B>\u039b?,h+1B\u20162\u2016(B>B)\u22121B>A\u20162 \u2264 \u2016(B>B)\u22121B>A\u20162 \u2264 \u03982/\u03ba\nHere \u03ba is a lower bound on the minimum eigenvalue of B>B. Using this bound on \u2016P?,h\u2016, we can now bound the optimal value function,\n\u2016\u039b?,h\u2016 \u2264 \u0398 + \u03984/\u03ba2 + (\u0398 + \u03983/\u03ba)2\u2016\u039b?,h+1\u2016 \u2264 6\u03986/\u03ba2\u2016\u039b?,h+1\u2016\nThe last bound uses the fact we apply a bound for \u2016\u039b?,h+1\u20162 that is larger than one, so the last term dominates. We also use the inequalities \u03982/\u03ba \u2265 1 and \u0398 \u2265 1. This recurrence yields,\n\u2016\u039b?,h\u20162 \u2264 ( 6\u03986\n\u03ba2\n)H\u2212h \u0398.\nA naive upper bound on O?,h gives,\nO?,h \u2264 \u2016\u039b?,h+1\u2016 tr(\u03a3) + |O?,h+1| \u2264 (H \u2212 h) ( 6\u03986\n\u03ba2\n)H\u2212h d\u03982.\nThe final component of the proposition is to demonstrate the Bellman Factorization.\nProof of Proposition 11. Fix h and a value function g parametrized by matrices \u039b and offset O at time h and \u039b\u2032, O\u2032 at time h+ 1. Also fix \u03c0 which uses operator P\u03c0 at time h.\nE(\u03c0, g, \u03c0\u2032, h) = Ex\u223c(\u03c0\u2032,h)x>\u039bx+O \u2212 x>Qx\u2212 x>P>\u03c0 P\u03c0x\u2212 Ex\u2032\u223c(x,\u03c0(x))(x\u2032)>\u039b\u2032x\u2032 +O\u2032\n= Ex\u223c(\u03c0\u2032,h)x>\u039bx+O \u2212 x>Qx\u2212 x>P>\u03c0 P\u03c0x\u2212 E (Ax+BP\u03c0x+ )>\u039b\u2032(Ax+BP\u03c0x+ ) +O\u2032 = tr [( \u039b\u2212Q\u2212 P>\u03c0 P\u03c0 \u2212 (A+BP\u03c0)>\u039b\u2032(A+BP\u03c0) ) Ex\u223c(\u03c0\u2032,h)xx> ] +O \u2212O\u2032 \u2212 tr(\u039b\u03a3)\nThus we may write \u03beh(\u03c0, g) = vec(\u039b\u2212Q\u2212P>\u03c0 P\u03c0\u2212 (A+BP\u03c0)>\u039b\u2032(A+BP\u03c0)) in the first d2 coordinates and O\u2212O\u2032\u2212 tr(\u039b\u03a3) in the last coordinate. We also write \u03bdh(\u03c0\u2032) = vec(Ex\u223c(\u03c0\u2032,h)xx>) in the first d2 coordinates and 1 in the last coordinate.\nThe norm bound on \u03be is straightforward, since all terms in its decomposition have an exponential in H bound.\nFor \u03bd, since the distribution is based on applying a bounded policy \u03c0\u2032 at level h \u2212 1 iteration, we can write x = Ax\u0303+BP\u03c0\u2032 x\u0303+ where x\u0303 is obtained by rolling in with \u03c0\n\u2032 for h\u2212 1 steps. If (\u03c0\u2032, h\u2212 1) denotes the distribution at the previous level, this gives,\n\u2016Ex\u223c(\u03c0\u2032,h)xx>\u2016F \u2264 \u2016\u03a3\u2016F + tr ( (A+BP )>(A+BP )Ex\u0303\u223c(\u03c0\u2032,h\u22121)x\u0303x\u0303> ) \u2264 \u2016\u03a3\u2016F + d(\u0398 + \u0398B1)2\u2016Ex\u0303\u223c(\u03c0\u2032,h\u22121)x\u0303x\u0303>\u2016F\nSince at level one we have that the norm is at most \u2016\u03a3\u2016F , we obtain a recurrence which produces a bound, at level h of,\n\u2016Ex\u223c(\u03c0\u2032,h)xx>\u2016F \u2264 \u2016\u03a3\u2016F h\u2211 i=1 di\u22121(\u0398 + \u0398B1) 2(i\u22121) \u2264 \u2016\u03a3\u2016FHdH(\u0398B1)2H\nif \u0398, B1 \u2265 1, which is our regime of interest."}, {"heading": "C Auxiliary Proofs of the Main Lemmas", "text": "In this appendix we give the full proofs of the lemmas sketched in Section 6. Rather than directly analyze Olive and prove Theorem 1, we instead focus our analysis on the robust variant, Oliver, introduced in Section 5.4. Oliver (Algorithm 3) with parameters \u03b8 = 0 and \u03b7 = 0 is precisely Olive, and the two analyses are identical. To avoid repetition, in this appendix we analyze Oliver (Algorithm 3) and prove the versions of the lemmas that can be used for Theorem 4. Readers can easily recover the detailed proofs of the lemmas in Section 6 for Olive by letting \u03b8 = 0, \u03b7 = 0, \u2032 = , f?\u03b8 = f ?, V ?F,\u03b8 = V ? F .\nTo facilitate understanding we break up the proofs into 3 parts. The main proofs appear in C.1, and two types of technical lemmas will be invoked from there: (1) a series of lemmas that adapt the work of Todd [1982] for our purpose, which are given in C.2; (2) deviation bounds, which are given in C.3."}, {"heading": "C.1 Main Proofs", "text": "Lemma (Restatement of Lemma 1 from main text for convenience) With Vf = E[f(x1, \u03c0f (x1))], we have\nVf \u2212 V \u03c0f = H\u2211 h=1 E(f, \u03c0f , h). (24)\nProof. Recall from Definition 2 that the average Bellman errors are defined as E(f, \u03c0, h) = E [ f(xh, ah)\u2212 rh \u2212 f(xh+1, ah+1) \u2223\u2223 a1:h\u22121 \u223c \u03c0, ah:h+1 \u223c \u03c0f ]. Expanding RHS of Eq. (24), we get\nH\u2211 h=1 E [ f(xh, ah)\u2212 rh \u2212 f(xh+1, ah+1) \u2223\u2223 a1:h\u22121 \u223c \u03c0f , ah:h+1 \u223c \u03c0f ]. Since all H expected values share the same distribution over trajectories, which is the one induced by a1:H \u223c \u03c0f , the above expression is equal to\nH\u2211 h=1 E [ f(xh, ah)\u2212 rh \u2212 f(xh+1, ah+1) \u2223\u2223 a1:H \u223c \u03c0f ] = E\n[ H\u2211 h=1 ( f(xh, ah)\u2212 rh \u2212 f(xh+1, ah+1) ) \u2223\u2223 a1:H \u223c \u03c0f] = E [ f(x1, \u03c0f (x1)) ] \u2212 E [ rh \u2223\u2223 a1:H \u223c \u03c0f ] = Vf \u2212 V \u03c0f .\nLemma 9 (Optimism drives exploration, analog of Lemma 2). If the estimates V\u0302f and E\u0303(ft, \u03c0t, h) in Line 3 and 8 of Algorithm 3 always satisfy\n|V\u0302f \u2212 Vf | \u2264 \u2032/8, |E\u0303(ft, \u03c0t, h)\u2212 E(ft, \u03c0t, h)| \u2264 \u2032\n8H (25)\nthroughout the execution of the algorithm (recall that \u2032 is defined on Line 1), and f?\u03b8 is never eliminated, then in any round t, either the algorithm does not terminate and\nE(ft, \u03c0t, ht) \u2265 \u2032\n2H , (26)\nor the algorithm terminates and the output policy \u03c0t satisfies V \u03c0t \u2265 V ?F,\u03b8 \u2212 \u2032 \u2212H\u03b8.\nProof. Eq. (26) follows directly from the termination criterion and Eq. (25). Suppose the algorithm terminates in round t. Let fmax := argmaxf\u2208Ft\u22121 Vf , and we have\nV \u03c0t = Vft \u2212 H\u2211 h=1 E(ft, \u03c0t, h) (Lemma 1)\n\u2265 V\u0302ft \u2212 H\u2211 h=1 E\u0303(ft, \u03c0t, h)\u2212 \u2032/4 (Eq. (25)) \u2265 V\u0302ft \u2212 7 \u2032/8 (termination criterion) \u2265 V\u0302fmax \u2212 7 \u2032/8 (ft is the maximizer of V\u0302f ) \u2265 Vfmax \u2212 \u2032 \u2265 Vf?\u03b8 \u2212 \u2032 (f?\u03b8 is not eliminated) \u2265 V ?F,\u03b8 \u2212H\u03b8 \u2212 \u2032. (Lemma 1)\nThe last inequality uses Lemma 1 on Vf?\u03b8 and the definition of V ? F,\u03b8, which is the reward for policy \u03c0f?\u03b8 . Lemma 1 relates these two quantities to the average Bellman errors, which, since f?\u03b8 is \u03b8-valid are each upper bounded by \u03b8.\nLemma 10 (Volumetric argument, analog of Lemma 3). If E\u0302(f, \u03c0t, ht) in Eq. (12) always satisfies\n|E\u0302(f, \u03c0t, ht)\u2212 E(f, \u03c0t, ht)| \u2264 \u03c6 (27)\nthroughout the execution of the algorithm (\u03c6 is the threshold in the elimination criterion), then f?\u03b8 is never eliminated. Furthermore, for any particular level h, if whenever ht = h, we have\n|E(ft, \u03c0t, ht)| \u2265 3 \u221a M(2\u03c6+ \u03b8 + \u03b7) + \u03b7, , (28)\nthen the number of rounds that ht = h is at most\nM log \u03b6\n2\u03c6 / log\n5 3 . (29)\nProof. The first claim that f?\u03b8 is never eliminated follows directly from the fact |E(f?\u03b8 , \u03c0t, ht)| \u2264 \u03b8 (Definition 8), Eq. (27), and the elimination threshold \u03c6+ \u03b8. Below we prove the second claim.\nFor any particular level h, suppose i1 < \u00b7 \u00b7 \u00b7 < i\u03c4 < \u00b7 \u00b7 \u00b7 < iTh are the round indices with ht = h, {t : ht = h} ordered from first to last, and Th = |{t : ht = h}|. For convenience define i0 = 0. Our goal is to prove an upper bound on Th.\nDefine notations:\n\u2022 p1, . . . , pTh . p\u03c4 := \u03bdh(fi\u03c4 ) where \u03bdh(\u00b7) is given in Definition 10. Recall that fi\u03c4 is the optimistic function used for exploration in round t = i\u03c4 .\n\u2022 U(Fi0),U(Fi1), . . . ,U(FiTh ). U(Fi\u03c4 ) = {\u03beh(f) : f \u2208 Fi\u03c4 } where \u03beh(f) \u2208 R M is given in Definition 10.\n\u2022 \u03a8 = supf\u2208F \u2016\u03bdh(f)\u20162, and \u03a6 = supf\u2208F \u2016\u03beh(f)\u20162. By Definition 10, \u03a8 \u00b7 \u03a6 \u2264 \u03b6.\n\u2022 V0, V1, . . . , VTh . V0 := {v : \u2016v\u20162 \u2264 \u03a6}, and V\u03c4 := {v \u2208 V\u03c4\u22121 : |p>\u03c4 v| \u2264 2\u03c6+ \u03b8 + \u03b7}.\n\u2022 B0, B1, . . . , BTh . B\u03c4 is a minimum volume enclosing ellipsoid (MVEE) of V\u03c4 .\nFor every \u03c4 = 0, . . . , Th, we first show that U(Fi\u03c4 ) \u2286 V\u03c4 . When \u03c4 = 0 this is obvious. For \u03c4 \u2265 1, we have \u2200f \u2208 Fi\u03c4 , |E(f, \u03c0fi\u03c4 , h)| \u2264 2\u03c6+ \u03b8. by the elimination criterion and Eq. (27). By Definition 10, this implies that, \u2200v \u2208 U(Fi\u03c4 ),\n|p>\u03c4 v| \u2264 2\u03c6+ \u03b8 + \u03b7,\nso U(Fi\u03c4 ) \u2286 V\u03c4 . Next we show that \u2203v \u2208 V\u03c4\u22121 such that |p>\u03c4 v| \u2265 3 \u221a M(2\u03c6 + \u03b8 + \u03b7). In fact, Eq. (28) and the fact that fit was chosen (implying that it survived) implies that this v can be chosen as\nv = \u03beh(fi\u03c4 ) \u2208 U(Fi\u03c4\u22121) \u2286 U(Fi\u03c4\u22121) \u2286 V\u03c4\u22121.\n(The first \u201c\u2286\u201d follows from the fact that Ft shrinks monotonically in Algorithm 3, since the learning steps between t = i\u03c4\u22121 + 1 and t = i\u03c4 \u2212 1 on other levels can only eliminate functions.) We verify that this v satisfies the desired property, given by Definition 10 and Eq. (28):\n|p>\u03c4 v| = |\u3008\u03bdh(fi\u03c4 ), \u03beh(fi\u03c4 )\u3009| \u2265 |E(fi\u03c4 , \u03c0i\u03c4 , h)| \u2212 \u03b7 \u2265 3 \u221a M(2\u03c6+ \u03b8 + \u03b7).\nNow we apply Lemma 11 and Fact 4 with the variables set to d := M,B := B\u03c4\u22121, \u03ba := 3 \u221a M(2\u03c6 + \u03b8 +\n\u03b7), \u03b3 := 2\u03c6+ \u03b8 + \u03b7. We obtain that vol(B+)\nvol(Bt\u22121) \u2264 0.6,\nwhere B+ is the MVEE of V \u2032\u03c4 := {v \u2208 B\u03c4\u22121 : |p>\u03c4 v| \u2264 2\u03c6 + \u03b8 + \u03b7}. Note that V\u03c4 = {v \u2208 V\u03c4\u22121 : |p>\u03c4 v| \u2264 2\u03c6+ \u03b8+ \u03b7} \u2286 V \u2032\u03c4 given that V\u03c4\u22121 \u2286 B\u03c4\u22121. Since B+ is an enclosing ellipsoid of V\u03c4 , and B\u03c4 is the MVEE of V\u03c4 , we have vol(B\u03c4 ) \u2264 vol(B+). Altogether we claim that\nvol(B\u03c4 )\nvol(B\u03c4\u22121) \u2264 0.6.\nThis result shows that the volume of B\u03c4 shrinks exponentially with \u03c4 . To prove that Th is small, it suffices to show that the volume of B0 is not too large, and that of BTh is not too small. Let cM be the volume of Euclidean sphere with unit radius in RM . By definition, vol(B0) = cM (\u03a6)M .\nFor vol(BTh), since \u2016p\u03c4\u20162 \u2264 \u03a8 always holds, we can guarantee that\nVT \u2287 q \u2208 RM : \u22c2 p\u2208RM :\u2016p\u20162\u2264\u03a8 |\u3008p, q\u3009| \u2264 2\u03c6+ \u03b8 + \u03b7  \u2287 { q \u2208 RM : \u2016q\u20162 \u2264 (2\u03c6+ \u03b8 + \u03b7)/\u03a8 } (Ho\u0308lder\u2019s inequality)\n\u2287 { q \u2208 RM : \u2016q\u20162 \u2264 2\u03c6/\u03a8 } .\nHence, vol(BTh) \u2265 cM (2\u03c6/\u03a8) M , and\ncM (2\u03c6/\u03a8) M\ncM (\u03a6)M \u2264 vol(BTh) vol(B0) = Th\u220f t=1 vol(Bt) vol(Bt\u22121) \u2264 0.6Th .\nAlgebraic manipulations give\nM log\n( \u03a8\u03a6\n2\u03c6\n) \u2265 Th log 5\n3 .\nThe second claim of the lemma statement follows by recalling that \u03a8\u03a6 \u2264 \u03b6."}, {"heading": "C.2 Lemmas for the volumetric argument", "text": "We adapt the work of Todd [1982] to derive lemmas that we use in C.1. The main result of this section is Lemma 11. As this section focuses on generic geometric results, we adopt notation that is more standard for these arguments. The notation used in this section should not be confused with the rest of the paper.\nTheorem 6 (Theorem 2 of Todd [1982]). Define E = {w \u2208 Rd : w>w \u2264 1} and E\u03b2 = {w \u2208 E : |e>1 w| \u2264 \u03b2} for 0 < \u03b2 \u2264 d\u22121/2. The ellipsoid,\nE+ = {w \u2208 Rd |w>(\u03c1(I \u2212 \u03c3e1e>1 ))\u22121w \u2264 1}, (30)\nis a minimum volume enclosing ellipsoid (MVEE) for E\u03b2 if\n\u03c3 = 1\u2212 d\u03b22\n1\u2212 \u03b22 and \u03c1 = d(1\u2212 \u03b22) d\u2212 1 .\nFact 3. With E,E+, \u03c3, \u03c1 as in Theorem 6, we have\nVol(E+) Vol(E) = \u221a d\u03b2\n( d\nd\u2212 1\n)(d\u22121)/2 ( 1\u2212 \u03b22 )(d\u22121)/2 . (31)\nProof. For convenience, let us define G = \u03c1(I \u2212 \u03c3e1e>1 ) so that E+ = {w \u2208 Rd : w>G\u22121w \u2264 1}. Notice that E can be obtained from E+ by the affine transformation v = G\n\u22121/2w, which means that if w \u2208 E+ then v = G\u22121/2w \u2208 E. Via change of variables this implies that\nVol(E+)\nVol(E) = det(G1/2).\nThe determinant is simply the product of the eigenvalues, which is easy to calculate since G is diagonal,\ndet(G1/2) = \u03c1(d\u22121)/2(\u03c1(1\u2212 \u03c3))1/2.\nPlugging in the definitions of \u03c1, \u03c3 from Theorem 6 proves the statement.\nLemma 11. Consider a closed and bounded set V \u2282 Rd and a vector p \u2208 Rd. Let B be any enclosing ellipsoid of V . Suppose there exists v \u2208 V with |p>v| \u2265 \u03ba and define B+ as the minimum volume enclosing ellipsoid of {v \u2208 B : |p>v| \u2264 \u03b3}. If \u03b3/\u03ba \u2264 1/ \u221a d, we have\nvol(B+) vol(B) \u2264 \u221a d \u03b3 \u03ba\n( d\nd\u2212 1\n)(d\u22121)/2( 1\u2212 \u03b3 2\n\u03ba2\n)(d\u22121)/2 . (32)\nProof. The first claim is to prove a bound on p>Bp.\n\u03ba \u2264 |p>v| = |p>B1/2B\u22121/2v| \u2264 \u221a p>Bp \u221a v>B\u22121v \u2264 \u221a p>Bp.\nThe last inequality applies since v \u2208 B so that v>B\u22121v \u2264 1. Now we will proceed to work with the ellipsoids, let L = {v : |v>p| \u2264 \u03b3}. Set B+ = MVEE(B \u22c2 L). We will apply two translations of the coordinate system so that B gets mapped to the unit ball and so that p gets mapped to \u03b1e1 (i.e. a scaled multiple of the first standard basis vector). The first translation is done by setting w = B\u22121/2v where w is in the new coordinate system and v is in the old coordinate system. Let p1 = B\n1/2p so that we can equivalently write L = {w : |w>p1| \u2264 \u03b3}. The second translation maps p1 to \u03b1e1 via a rotation matrix R such that RB1/2p = Rp1 = \u03b1e1. We also translate w to Rw but this doesn\u2019t affect the now spherically symmetric ellipsoid, so we do not change the variable names.\nTo summarize, after applying the scaling and the rotation, we are interested in MVEE(I \u22c2 {w : |w>e1| \u2264\n\u03b3/\u03b1}) and specifically, since volume ratios are invariant under affine transformation, we have\nVol(B+)\nVol(B) =\nVol(MVEE(I \u22c2 {w : |w>e1| \u2264 \u03b3/\u03b1}))\nVol(I) .\nHere I is the unit ball (i.e. the ellipsoid with identity matrix). Further applying Fact 3, we obtain\nVol(B+) Vol(B) = \u221a d \u03b3 \u03b1\n( d\nd\u2212 1\n)(d\u22121)/2( 1\u2212 \u03b3 2\n\u03ba2\n)(d\u22121)/2 .\nIt remains to lower bound \u03b1, which is immediate since\n\u03b1 = \u2016RB1/2p\u20162 = \u2016B1/2p\u20162 \u2265 \u03ba.\nSubstituting this lower bound on \u03b1 completes the proof.\nFact 4. When \u03b3/\u03ba = 1 3 \u221a d , the RHS of Eq. (32) is less than 0.6.\nProof. Plugging in the numbers, we have the RHS of Eq. (32) equal to\n1\n3\n( d\nd\u2212 1 9d\u2212 1 9d\n)(d\u22121)/2 = 1\n3\n( 1 +\n8\n9(d\u2212 1)\n)9(d\u22121)/8 \u00b7 4/9 \u2264 1\n3 exp(4/9) \u2264 0.52.\nHere we used the fact that (1 + 1x ) x is monotonically increasing towards e on x \u2208 [1,\u221e)."}, {"heading": "C.3 Deviation Bounds", "text": "In this section we prove the deviation bounds. Note that the statement of the lemmas in this section, which are for Oliver, coincide with those stated in Section 6 for Olive. This should not be surprising as the two algorithms draw data and estimate quantities in the same way.\nLemma 12 (Deviation Bound for V\u0302f ). With probability at least 1\u2212 \u03b4,\n|V\u0302f \u2212 Vf | \u2264 \u221a 1\n2nest log\n2N\n\u03b4\nholds for all f \u2208 F simultaneously. Hence, we can set nest \u2265 32 2 log 2N \u03b4 to guarantee that |V\u0302f \u2212 Vf | \u2264 /8.\nProof. The bound follows from a straight-forward application of Hoeffding\u2019s inequality and the union bound, and we only need to verify that the Vf is the expected value of the V\u0302f , and the range of the random variables is [0, 1].\nLemma 13 (Deviation Bound for E\u0303(ft, \u03c0t, h)). For any fixed ft, with probability at least 1\u2212 \u03b4,\n|E\u0303(ft, \u03c0t, h)\u2212 E(ft, \u03c0t, h)| \u2264 3 \u221a 1\n2neval log\n2H\n\u03b4\nholds for all h \u2208 [H] simultaneously. Hence, for any neval \u2265 288H 2 2 log 2H \u03b4 , with probability at least 1\u2212 \u03b4 we have |E\u0303(ft, \u03c0t, h)\u2212 E(ft, \u03c0t, h)| \u2264 8H .\nProof. This bound is another straight-forward application of Hoeffding\u2019s inequality and the union bound, except that the random variables that go into the average have range [\u22121, 2], and we have to realize that E\u0303(ft, \u03c0t, h) is an unbiased estimate of E(ft, \u03c0t, h).\nLemma 14 (Deviation Bound for E\u0302(f, \u03c0t, ht)). For any fixed \u03c0t and ht, with probability at least 1\u2212 \u03b4,\n|E\u0302(f, \u03c0t, ht)\u2212 E(f, \u03c0t, ht)| \u2264\n\u221a 8K log 2N\u03b4\nn + 2K log 2N\u03b4 n\nholds for all f \u2208 F simultaneously. Hence, for any n \u2265 32K\u03c62 log 2N \u03b4 and \u03c6 \u2264 4, with probability at least 1\u2212 \u03b4 we have |E\u0302(f, \u03c0t, ht)\u2212 E(f, \u03c0t, ht)| \u2264 \u03c6.\nProof. We first show that E\u0302(f, \u03c0t, ht) is an average of i.i.d. random variables with mean E(f, \u03c0t, ht). We use \u00b5 as a shorthand for the distribution over trajectories induced by a1, . . . , aht\u22121 \u223c \u03c0t, ah \u223c unif(A), which is the distribution of data used to estimate E\u0302(f, \u03c0t, ht). On the other hand, let \u00b5\u2032 denote the distribution over trajectories induced by a1, . . . , aht\u22121 \u223c \u03c0t, ah \u223c \u03c0f . The importance weight used in Eq. (12) essentially converts the distribution from \u00b5 to \u00b5\u2032, hence the expected value of E\u0302(f, \u03c0t, ht) can be written as\nE\u00b5 [K1[ah = \u03c0f (xh)] (f(xh, ah)\u2212 rh \u2212 f(xh+1, \u03c0f (xh+1)))] = E\u00b5\u2032 [f(xh, ah)\u2212 rh \u2212 f(xh+1, \u03c0f (xh+1))] = E(f, \u03c0t, ht).\nNow, we apply Bernstein\u2019s inequality. We first analyze the 2nd-moment of the random variable. Defining y(xh, ah, rh, xh+1) = f(xh, ah)\u2212 rh \u2212 f(xh+1, \u03c0f (xh+1)) \u2208 [\u22122, 1], the 2nd-moment is\nE\u00b5 [ (K1[ah = \u03c0f (xh)]y(xh, ah, rh, xh+1)) 2 ]\n= Pr \u00b5\n[ah = \u03c0f (xh)] \u00b7 E\u00b5 [ (Ky(xh, ah, rh, xh+1)) 2 \u2223\u2223 ah = \u03c0f (xh)]+ Pr \u00b5 [ah 6= \u03c0f (xh)] \u00b7 0\n\u2264 1 K\nE\u00b5 [ K2 \u00b7 4 \u2223\u2223 ah = \u03c0f (xh)] = 4K. Next we check the range of the centered random variable. The uncentered variable lies in [\u22122K,K], and the expected value is in [\u22122, 1], so the centered variable lies in [\u22122K \u2212 1,K + 2] \u2286 [\u22123K, 3K]. Applying Bernstein\u2019s inequality, we have with probability at least 1\u2212 \u03b4,\n|E\u0302(f, \u03c0t, ht)\u2212 E(f, \u03c0t, ht)| \u2264\n\u221a 2 Var [K1[ah = \u03c0f (xh)]y(xh, ah, rh, xh+1)] log 2N \u03b4\nn + 6K log 2N\u03b4 3n\n\u2264\n\u221a 8K log 2N\u03b4\nn + 2K log 2N\u03b4 n . (variance is bounded by 2nd-moment)\nAs long as 2K log 2N\u03b4 n \u2264 1, the above is bounded by 2 \u221a 8K log 2N\u03b4 n . The choice of n follows from solving\n2\n\u221a 8K log 2N\u03b4\nn = \u03c6 for n, which indeed guarantees that 2K log 2N\u03b4 n \u2264 1 as \u03c6 \u2264 4."}, {"heading": "D Proofs of Extensions", "text": ""}, {"heading": "D.1 Proof for unknown Bellman Rank (Theorem 2)", "text": "Since we assign \u03b4i(i+1) failure probability to the i-th call of Algorithm 2, the total failure probability is at most\n\u221e\u2211 i=1\n\u03b4\ni(i+ 1) = \u03b4 \u221e\u2211 i=1 ( 1 i \u2212 1 i+ 1 ) = \u03b4.\nSo with probability at least 1 \u2212 \u03b4, all high probability events in the analysis of Olive occur for every i = 1, 2, . . .. Note that regardless of whether M \u2032 < M , we never eliminate f? according to Lemma 3. Hence Lemma 2 holds and whenever the algorithm returns a policy it is near-optimal.\nWhile the algorithm returns a near-optimal policy if it terminates, we still must prove that the algorithm will terminate. Since when M \u2032 < M Eq. (20) and Lemma 10 do not apply, we cannot naively use arguments from the analysis of Olive. However, we monitor the number of rounds that have passed in each execution to Olive and stop the subroutine when the actual number of rounds exceeds the iteration complexity bound (Lemma 3) to prevent wasting more samples on the wrong M \u2032.\nOlive is guaranteed to terminate within the sample complexity bound and output near-optimal policy when M \u2264 M \u2032. Since M \u2032 grows on a doubling schedule, for the first M \u2032 that satisfies M \u2264 M \u2032, we have M \u2032 \u2264 2M and i \u2264 log2M + 1. Hence, the total number of calls is bounded by log2M + 1.\nFinally, since the sample complexity bound in Theorem 1 is monotonically increasing in M and 1/\u03b4 and our schedule for \u03b4\u2032 is increasing, we can bound the total sample complexity by that of the last call to Olive multiplied by the number of calls. The last call to Olive has M \u2032 \u2264 2M , and i(i+1)\u03b4 \u2264 (log2 M+2)(log2 M+1)\n\u03b4 , so the sample complexity bound is only affected by factors that are at most logarithmic in the relevant parameters.\nD.2 Proofs for infinite hypothesis classes\nIn this section we prove sample complexity guarantee for using infinite hypothesis classes in Section 5.3. Recall that we are working with separated policy class \u03a0 and V-value function class G, and when running Olive any occurrence of f \u2208 F should be replaced appropriately by (\u03c0, g) \u2208 \u03a0\u00d7G. For clarity, we use (\u03c0, g) instead of f in the derivations in this section. We assume that the two function classes have finite Natarajan dimension and Pseudo-dimension respectively.\nThe key technical step for the sample complexity guarantee is to establish the necessary deviation bounds for infinite classes. Among these deviation bounds, the bound on E\u0303((\u03c0t, gt), \u03c0t, h) (Lemma 5) does not involve union bound over F , so it can be reused without modification. The other two bounds need to be replaced by Lemma 15 and 16, stated below. With these lemmas, Theorem 3 immediately follows simply by replacing the deviation bounds.\nDefinition 11. Define d\u03a0 = max(Ndim(\u03a0), 6), dG = max(Pdim(G), 6), and d = d\u03a0 + dG.\nLemma 15. If\nnest \u2265 8192\n2\n( dG log 128e + log(8e(dG + 1)) + log 1\n\u03b4\n) , (33)\nthen with probability at least 1\u2212 \u03b4, |V\u0302(\u03c0,g) \u2212 V(\u03c0,g)| \u2264 /8, \u2200(\u03c0, g) \u2208 \u03a0\u00d7 G.\nWe remark that both the estimate V\u0302(\u03c0,g) and population quantity V(\u03c0,g) are independent of \u03c0 in the separable case, and hence the sample complexity is independent of d\u03a0.\nLemma 16. If\nn \u22651152K 2\n\u03c62\n( 6d log (2eKd) log 48eK\n\u03c6 + log\n( 8e(6d log (2eKd) + 1) ) + log 3\n\u03b4\n) , (34)\nthen for any fixed \u03c0t and ht, with probability at least 1\u2212 \u03b4,\n|E\u0302((\u03c0, g), \u03c0t, ht)\u2212 E((\u03c0, g), \u03c0t, ht)| \u2264 \u03c6, \u2200(\u03c0, g) \u2208 \u03a0\u00d7 G.\nProof of Theorem 3. Set the algorithm parameters to:\n\u03c6 = 12H \u221a M , nest =\n8192\n2\n( dG log 128e + log(8e(dG + 1)) + log 3\n\u03b4\n) ,\nneval = 288H2\n2 log\n( 12H2M log(6H \u221a M\u03b6/ )\n\u03b4\n) ,\nn = 1152K2\n\u03c62\n( 6d log ( 2eK ) log 48eK\n\u03c6 + log\n( 8e(6d log (2eKd) + 1) ) + log 18HM log(6H \u221a M\u03b6/ )\n\u03b4\n) .\nThe rest of the proof is essentially the same as the proof of Theorem 1, and the sample complexity follows by noticing that nest = O\u0303(dG+log(1/\u03b4) 2 ) and n = O\u0303(K 2(d\u03a0 + dG + log(1/\u03b4))/\u03c6 2).\nLemma 15 is a straight-forward application of Corollary 2 introduced in D.2.1 and will not be proved separately. The remainder of this section, we prove Lemma 16. Before that, we review some standard definitions and results from statistical learning theory."}, {"heading": "D.2.1 Definitions and Basic Lemmas", "text": "Notations X , x, n, d, \u03be in this section are used according to conventions in the literature and may not share semantics with the same symbols used elsewhere in this paper.\nDefinition 12 (VC-Dimension). Given hypothesis class H \u2282 X \u2192 {0, 1}, its VC-dimension VC-dim(H) is defined as the maximal cardinality of a set X = {x1, . . . , x|X|} \u2282 X that satisfies |HX | = 2|X| (or X is shattered by H), where HX is the restriction of H to X, namely {(h(x1), . . . , h(x|X|)) : h \u2208 H}.\nLemma 17 (Sauer\u2019s Lemma). Given hypothesis class H \u2282 X \u2192 {0, 1} with d = VC-dim(H) <\u221e, we have \u2200X = (x1, . . . , xn) \u2208 Xn,\n|HX | \u2264 (n+ 1)d.\nLemma 18 (Sauer\u2019s Lemma for Natarajan dimension [Ben-David et al., 1992, Haussler and Long, 1995]). Given hypothesis class H \u2282 X \u2192 Y with Ndim(H) \u2264 d, we have \u2200X = (x1, . . . , xn) \u2208 Xn,\n|HX | \u2264 ( ne(K + 1)2\n2d\n)d ,\nwhere K = |Y|.\nDefinition 13 (Covering number). Given hypothesis class H \u2282 X \u2192 R, > 0, X = (x1, . . . , xn) \u2208 Xn, the covering number N1(\u03b1,H, X) is defined as the minimal cardinality of a set C \u2282 Rn, such that for any h \u2208 H there exists c = (c1, . . . , cn) \u2208 C where 1n \u2211n i=1 |h(xi)\u2212 ci| \u2264 \u03b1.\nLemma 19 (Bounding covering number by pseudo-dimension [Haussler, 1995]). Given hypothesis class H \u2282 X \u2192 R with Pdim(H) \u2264 d, we have for any X \u2208 Xn,\nN1(\u03b1,H, X) \u2264 e(d+ 1) ( 2e\n\u03b1\n)d .\nLemma 20 (Uniform deviation bound using covering number [Pollard, 1984]; also see Devroye et al. [1996], Theorem 29.1). Let H \u2282 X \u2192 [0, b] be a hypothesis class, and (x1, . . . , xn) be i.i.d. samples drawn from some distribution supported on X . For any \u03b1 > 0,\nPr { sup h\u2208H \u2223\u2223\u2223\u2223\u2223 1n n\u2211 i=1 h(xi)\u2212 E[h(x1)] \u2223\u2223\u2223\u2223\u2223 > \u03b1 } \u2264 8E [ N1 ( \u03b1/8,H, (x1, . . . , xn) )] exp ( \u2212 n\u03b1 2 128b2 ) .\nCorollary 2 (Uniform deviation bound using pseudo-dimension). Suppose Pdim(H) \u2264 d, then\nPr { sup h\u2208H \u2223\u2223\u2223\u2223\u2223 1n n\u2211 i=1 h(xi)\u2212 E[h(x1)] \u2223\u2223\u2223\u2223\u2223 > \u03b1 } \u2264 8e(d+ 1) ( 16e \u03b1 )d exp ( \u2212 n\u03b1 2 128b2 ) .\nTo guarantee that this probability is upper bounded by \u03b4, it suffices to have\nn \u2265 128 \u03b12\n( d log 16e\n\u03b1 + log(8e(d+ 1)) + log\n1\n\u03b4\n) ."}, {"heading": "D.2.2 Proof of Lemma 16", "text": "The idea is to establish deviation bounds for each of the three terms in the definition of E\u0302((\u03c0, g), \u03c0t, ht) (Eq. (6)). Each term takes the form of an importance weight multiplied by a real-valued function, and we first show that the function space formed by these products has bounded pseudo-dimension. We state this supporting lemma in terms of an arbitrary value-function class V which might operate on an input space X \u2032 different from the context space X . In the sequel, we will instantiate V and X \u2032 in the the lemma with specific choices to prove the desired results.\nLemma 21. Let Y be a label space with |Y| = K, let \u03a0 \u2286 X \u2192 Y be a function class with Natarajan dimension at most d\u03a0 \u2208 [6,\u221e), and let V \u2286 X \u2032 \u2192 [0, 1] be a class with pseudo-dimension at most dV \u2208 [6,\u221e). The hypothesis class H = {(x, a, x\u2032) 7\u2192 1[a = \u03c0(x)]g(x\u2032) : \u03c0 \u2208 \u03a0, g \u2208 V} has pseudo-dimension Pdim(H) \u2264 6(d\u03a0 + dV) log (2eK(d\u03a0 + dV)).\nProof. Recall that Pdim(H) = VC-dim(H+), so it suffices to show that for any X = {(x1, a1, x\u20321, \u03be1), . . . , (xd, ad, x\u2032d, \u03bed)} \u2208 (X \u00d7 A \u00d7 X \u2032 \u00d7 R)d where d = 6(d\u03a0 + dV) log (2eK(d\u03a0 + dV)), |H+X | < 2d. Note that since g(x) \u2208 [0, 1] for all g, x\nH+ = {(x, a, x\u2032, \u03be) 7\u2192 1 [ 1[a = \u03c0(x)]g(x\u2032) > \u03be ] }\n= {(x, a, x\u2032, \u03be) 7\u2192 1[\u03be < 0] + 1[\u03be \u2265 0] \u00b7 1[a = \u03c0(x)] \u00b7 1[g(x\u2032) > \u03be]}\nFor points where \u03bei < 0, all hypotheses in H+ produce label 1, so without loss of generality we can assume that \u03bei \u2265 0, i = 1, . . . , d.\nWith a slight abuse of notation, let \u03a0X denote the restriction of \u03a0 to the set of contexts {x1, . . . , xd} (actions and future contexts (a1, x \u2032 1), . . . , (ad, x \u2032 d) are ignored since \u03a0 does not operate on them), and V + X denote the restriction of V+ to {(x\u20321, \u03be1), . . . , (x\u2032d, \u03bed)}. H + X can be produced by the Cartesian product of \u03a0X and V+X as follows:\nH+X = {(1[a1 = \u03b11]\u03b21, . . . ,1[ad = \u03b1d]\u03b2d) : (\u03b11, . . . , \u03b1d) \u2208 \u03a0X , (\u03b21, . . . , \u03b2d) \u2208 V + X}.\nTherefore, |H+X | \u2264 |\u03a0X | |V + X |. Recall that Ndim(\u03a0) \u2264 d\u03a0 and VC-dim(V+) = Pdim(V) \u2264 dV . Applying Lemma 18 and 17:\n|H+X | \u2264 ( de(K + 1)2\n2d\u03a0\n)d\u03a0 (d+ 1)dV .\nThe logarithm of the RHS is\nd\u03a0 log\n( de(K + 1)2\n2d\u03a0\n) + dV log(d+ 1) < d\u03a0 log(de(K + 1) 2) + dV log(d+ 1)\n\u2264 d\u03a0 log d+ 2d\u03a0 log(2eK) + dV log(d+ 1) \u2264 2(d\u03a0 + dV) log(2eK) + (d\u03a0 + dV) log(2d).\nIt remains to be shown that this is less than log(2d) = d log 2. Note that\nd log 2 > 3(d\u03a0 + dV)(log(2eK) + log(d\u03a0 + dV)),\nso we only need to show that (d\u03a0 + dV) log(2d) \u2264 (d\u03a0 + dV) log(2eK) + 3(d\u03a0 + dV) log(d\u03a0 + dV). Now (d\u03a0 + dV) log(2d) = (d\u03a0 + dV) ( log(12(d\u03a0 + dV)) + log log(2eK(d\u03a0 + dV)) )\n\u2264 2(d\u03a0 + dV) log(d\u03a0 + dV) + (d\u03a0 + dV) log ( log(2eK) + log(d\u03a0 + dV) )\n(d\u03a0 + dV \u2265 12) \u2264 2(d\u03a0 + dV) log(d\u03a0 + dV) + (d\u03a0 + dV) ( log(2eK) + log(d\u03a0 + dV) ) .\nProof of Lemma 16. Recall that when we are given a policy class \u03a0 and separate V-value function class G, for every \u03c0 \u2208 \u03a0, g \u2208 G, we instead estimate average Bellman error with\nE\u0302((\u03c0, g), \u03c0t, ht) = 1\nn n\u2211 i=1 1[a (i) ht = \u03c0(x (i) ht )] 1/K ( g(x (i) ht )\u2212 r(i)ht \u2212 g(x (i) ht+1 ) ) .\nSo it suffices to show that the averages of 1[a (i) ht = \u03c0(x (i) ht )]g(x (i) ht ), 1[a (i) ht = \u03c0(x (i) ht )]r (i) ht , 1[a (i) ht = \u03c0(x (i) ht )]g(x (i) ht+1 ) are \u03c63K -close to their expectations with probability at least 1\u2212\u03b4/3, respectively. It turns out that, we can use Lemma 21 for all the three terms. For the first and the third terms, we apply Lemma 21 with V = G,X \u2032 = X , and obtain the necessary sample size directly from Corollary 2. For the second term, we apply Lemma 21 with V = {x 7\u2192 x},X \u2032 = R. Note that in this case V is a singleton with the only element being the identity function over R, so it is clear that Pdim(V) < 6 \u2264 dG , hence the sample size for the other two terms is also adequate for this term."}, {"heading": "D.3 Proofs for OLIVER", "text": "Recall that the main lemmas for analyzing Oliver have been proved in Appendix C.1, so below we directly prove Theorem 4.\nProof of Theorem 4. Suppose the preconditions of Lemma 9 (Eq. (25)) and Lemma 10 (Eq. (27)) hold; we will show them by invoking the deviation bounds later. By Lemma 9, when the algorithm terminates, the value of the output policy is at least\nV ?F,\u03b8 \u2212 \u2032 \u2212H\u03b8.\nRecall that \u2032 = + 2H(3 \u221a M(\u03b8 + \u03b7) + \u03b7) (Line 1), so the suboptimality compared to V ?F,\u03b8 is at most\n+ 2H(3 \u221a M(\u03b8 + \u03b7) + \u03b7) +H\u03b8 \u2264 + 8H \u221a M(\u03b8 + \u03b7),\nwhich establishes the suboptimality claim. It remains to show the sample complexity bound. Applying Lemma 9, in every round t before the algorithm terminates,\nE(ft, \u03c0t, ht) \u2265 \u2032\n2H = 2H + 3 \u221a M(\u03b8 + \u03b7) + \u03b7 = 3 \u221a M(2\u03c6+ \u03b8 + \u03b7) + \u03b7,\nthanks to the choice of \u03c6 and \u2032. For level h = ht, Eq. (28) is satisfied. According to Lemma 10, the event ht = h can happen at most M log ( \u03b6\n2\u03c6 ) / log 53 times for every h \u2208 [H]. Hence, the total number of rounds\nin the algorithm is at most\nHM log\n( \u03b6\n2\u03c6\n) / log 5\n3 = HM log\n( 6H \u221a M\u03b6 ) / log 5\n3 .\nNow we are ready to apply the deviation bounds to show that Eq. (25) and 19 hold with high probability. We split the total failure probability \u03b4 among the following events:\n1. Estimation of V\u0302f (Lemma 12; only once): \u03b4/3. 2. Estimation of E\u0303(ft, \u03c0t, h) (Lemma 13; every round): \u03b4/ ( 3HM log ( 6H \u221a M\u03b6 ) / log 53 ) .\n3. Estimation of E\u0302(f, \u03c0t, ht) (Lemma 14; every round): same as above.\nApplying Lemma 12, 13, 14 with the above failure probabilities, the choices of nest, neval, n in the algorithm statement satisfy the preconditions of Lemmas 9 and 10. In particular, the choice of nest and neval guarantee that |V\u0302f \u2212 Vf | \u2264 /8 and |E\u0303(ft, \u03c0t, h) \u2212 E(ft, \u03c0t, h)| \u2264 /8H, which are tighter than needed as \u2264 \u2032 (only \u2032/8 and \u2032/8H are needed respectively, but tightening these bounds does not improve the sample complexity significantly, so we keep them the same as in Theorem 1 for simplicity). The remaining calculation of sample complexity is exactly the same as in the proof of Theorem 1."}, {"heading": "Acknowledgements", "text": "Part of this work was completed while NJ and AK were at Microsoft Research."}], "references": [{"title": "Contextual bandit learning with predictable rewards", "author": ["Alekh Agarwal", "Miroslav Dud\u0301\u0131k", "Satyen Kale", "John Langford", "Robert E. Schapire"], "venue": "In International Conference on Artificial Intelligence and Statistics (AISTATS),", "citeRegEx": "Agarwal et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Agarwal et al\\.", "year": 2012}, {"title": "Taming the monster: A fast and simple algorithm for contextual bandits", "author": ["Alekh Agarwal", "Daniel Hsu", "Satyen Kale", "John Langford", "Lihong Li", "Robert E. Schapire"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "Agarwal et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Agarwal et al\\.", "year": 2014}, {"title": "Optimal control: linear quadratic methods", "author": ["Brian D.O. Anderson", "John B. Moore"], "venue": "Courier Corporation,", "citeRegEx": "Anderson and Moore.,? \\Q2007\\E", "shortCiteRegEx": "Anderson and Moore.", "year": 2007}, {"title": "Learning near-optimal policies with bellman-residual minimization based fitted policy iteration and a single sample path", "author": ["Andr\u00e1s Antos", "Csaba Szepesv\u00e1ri", "R\u00e9mi Munos"], "venue": "Machine Learning,", "citeRegEx": "Antos et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Antos et al\\.", "year": 2008}, {"title": "The nonstochastic multiarmed bandit problem", "author": ["Peter Auer", "Nicolo Cesa-Bianchi", "Yoav Freund", "Robert E. Schapire"], "venue": "SIAM Journal on Computing,", "citeRegEx": "Auer et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Auer et al\\.", "year": 2002}, {"title": "Reinforcement learning of POMDPs using spectral methods", "author": ["Kamyar Azizzadenesheli", "Alessandro Lazaric", "Animashree Anandkumar"], "venue": "Conference on Learning Theory (COLT),", "citeRegEx": "Azizzadenesheli et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Azizzadenesheli et al\\.", "year": 2016}, {"title": "Policy iteration based on stochastic factorization", "author": ["Andr\u00e9 da Motta Salles Barreto", "Joelle Pineau", "Doina Precup"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Barreto et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Barreto et al\\.", "year": 2014}, {"title": "Reinforcement Learning using Kernel-based Stochastic Factorization", "author": ["Andre S Barreto", "Doina Precup", "Joelle Pineau"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Barreto et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Barreto et al\\.", "year": 2011}, {"title": "Unifying count-based exploration and intrinsic motivation", "author": ["Marc G. Bellemare", "Sriram Srinivasan", "Georg Ostrovski", "Tom Schaul", "David Saxton", "Remi Munos"], "venue": null, "citeRegEx": "Bellemare et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Bellemare et al\\.", "year": 2016}, {"title": "Characterizations of learnability for classes of {0", "author": ["Shai Ben-David", "Nicolo Cesa-Bianchi", "Philip M. Long"], "venue": "n}-valued functions. In Conference on Learning Theory (COLT),", "citeRegEx": "Ben.David et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Ben.David et al\\.", "year": 1992}, {"title": "Closing the learning-planning loop with predictive state representations", "author": ["Byron Boots", "Sajid M. Siddiqi", "Geoffrey J. Gordon"], "venue": "International Journal of Robotics Research,", "citeRegEx": "Boots et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Boots et al\\.", "year": 2011}, {"title": "R-max-a general polynomial time algorithm for near-optimal reinforcement learning", "author": ["Ronen I. Brafman", "Moshe Tennenholtz"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Brafman and Tennenholtz.,? \\Q2003\\E", "shortCiteRegEx": "Brafman and Tennenholtz.", "year": 2003}, {"title": "Sample complexity of episodic fixed-horizon reinforcement learning", "author": ["Christoph Dann", "Emma Brunskill"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Dann and Brunskill.,? \\Q2015\\E", "shortCiteRegEx": "Dann and Brunskill.", "year": 2015}, {"title": "A probabilistic theory of pattern recognition", "author": ["Luc Devroye", "L\u00e1szl\u00f3 Gy\u00f6rfi", "G\u00e1bor Lugosi"], "venue": null, "citeRegEx": "Devroye et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Devroye et al\\.", "year": 1996}, {"title": "Efficient optimal learning for contextual bandits", "author": ["Miroslav Dudik", "Daniel Hsu", "Satyen Kale", "Nikos Karampatziakis", "John Langford", "Lev Reyzin", "Tong Zhang"], "venue": "In Uncertainty in Artificial Intelligence (UAI),", "citeRegEx": "Dudik et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Dudik et al\\.", "year": 2011}, {"title": "Tree-based batch mode reinforcement learning", "author": ["Damien Ernst", "Pierre Geurts", "Louis Wehenkel"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Ernst et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Ernst et al\\.", "year": 2005}, {"title": "Error propagation for approximate policy and value iteration", "author": ["Amir-Massoud Farahmand", "Csaba Szepesv\u00e1ri", "R\u00e9mi Munos"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Farahmand et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Farahmand et al\\.", "year": 2010}, {"title": "Decision theoretic generalizations of the PAC model for neural net and other learning applications", "author": ["David Haussler"], "venue": "Information and computation,", "citeRegEx": "Haussler.,? \\Q1992\\E", "shortCiteRegEx": "Haussler.", "year": 1992}, {"title": "Sphere packing numbers for subsets of the boolean n-cube with bounded vapnik-chervonenkis dimension", "author": ["David Haussler"], "venue": "Journal of Combinatorial Theory, Series A,", "citeRegEx": "Haussler.,? \\Q1995\\E", "shortCiteRegEx": "Haussler.", "year": 1995}, {"title": "A generalization of sauer\u2019s lemma", "author": ["David Haussler", "Philip M. Long"], "venue": "Journal of Combinatorial Theory, Series A,", "citeRegEx": "Haussler and Long.,? \\Q1995\\E", "shortCiteRegEx": "Haussler and Long.", "year": 1995}, {"title": "The Malmo Platform for artificial intelligence experimentation", "author": ["Matthew Johnson", "Katja Hofmann", "Tim Hutton", "David Bignell"], "venue": "In International Joint Conference on Artificial Intelligence (IJCAI),", "citeRegEx": "Johnson et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 2016}, {"title": "Model-based exploration in continuous state spaces", "author": ["Nicholas K. Jong", "Peter Stone"], "venue": "In Abstraction, Reformulation, and Approximation,", "citeRegEx": "Jong and Stone.,? \\Q2007\\E", "shortCiteRegEx": "Jong and Stone.", "year": 2007}, {"title": "Exploration in metric state spaces", "author": ["Sham Kakade", "Michael Kearns", "John Langford"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "Kakade et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Kakade et al\\.", "year": 2003}, {"title": "Near-optimal reinforcement learning in polynomial time", "author": ["Michael Kearns", "Satinder Singh"], "venue": "Machine Learning,", "citeRegEx": "Kearns and Singh.,? \\Q2002\\E", "shortCiteRegEx": "Kearns and Singh.", "year": 2002}, {"title": "A sparse sampling algorithm for near-optimal planning in large Markov decision processes", "author": ["Michael Kearns", "Yishay Mansour", "Andrew Y. Ng"], "venue": "Machine Learning,", "citeRegEx": "Kearns et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Kearns et al\\.", "year": 2002}, {"title": "Bandit based monte-carlo planning", "author": ["Levente Kocsis", "Csaba Szepesv\u00e1ri"], "venue": "In European Conference on Machine Learning (ECML),", "citeRegEx": "Kocsis and Szepesv\u00e1ri.,? \\Q2006\\E", "shortCiteRegEx": "Kocsis and Szepesv\u00e1ri.", "year": 2006}, {"title": "PAC reinforcement learning with rich observations", "author": ["Akshay Krishnamurthy", "Alekh Agarwal", "John Langford"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Krishnamurthy et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Krishnamurthy et al\\.", "year": 2016}, {"title": "Least-squares policy iteration", "author": ["Michail G. Lagoudakis", "Ronald Parr"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Lagoudakis and Parr.,? \\Q2003\\E", "shortCiteRegEx": "Lagoudakis and Parr.", "year": 2003}, {"title": "Finite-sample analysis of least-squares policy iteration", "author": ["Alessandro Lazaric", "Mohammad Ghavamzadeh", "R\u00e9mi Munos"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Lazaric et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Lazaric et al\\.", "year": 2012}, {"title": "A unifying framework for computational reinforcement learning theory", "author": ["Lihong Li"], "venue": "PhD thesis, Rutgers, The State University of New Jersey,", "citeRegEx": "Li.,? \\Q2009\\E", "shortCiteRegEx": "Li.", "year": 2009}, {"title": "Predictive representations of state", "author": ["Michael L. Littman", "Richard S. Sutton", "Satinder Singh"], "venue": "In Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Littman et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Littman et al\\.", "year": 2001}, {"title": "Human-level control through deep reinforcement learning", "author": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Andrei A Rusu", "Joel Veness", "Marc G Bellemare", "Alex Graves", "Martin Riedmiller", "Andreas K Fidjeland", "Georg Ostrovski", "Stig Petersen", "Charles Beattie", "Amir Sadik", "Ioannis Antonoglou", "Helen King", "Dharshan Kumaran", "Daan Wierstra", "Shane Legg", "Demis Hassabis"], "venue": "Nature,", "citeRegEx": "Mnih et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2015}, {"title": "Error bounds for approximate policy iteration", "author": ["R\u00e9mi Munos"], "venue": "In International Conference on Machine Learning (ICML),", "citeRegEx": "Munos.,? \\Q2003\\E", "shortCiteRegEx": "Munos.", "year": 2003}, {"title": "Finite-time bounds for fitted value iteration", "author": ["R\u00e9mi Munos", "Csaba Szepesv\u00e1ri"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Munos and Szepesv\u00e1ri.,? \\Q2008\\E", "shortCiteRegEx": "Munos and Szepesv\u00e1ri.", "year": 2008}, {"title": "On learning sets and functions", "author": ["Balas K. Natarajan"], "venue": "Machine Learning,", "citeRegEx": "Natarajan.,? \\Q1989\\E", "shortCiteRegEx": "Natarajan.", "year": 1989}, {"title": "Model-based reinforcement learning and the eluder dimension", "author": ["Ian Osband", "Benjamin Van Roy"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Osband and Roy.,? \\Q2014\\E", "shortCiteRegEx": "Osband and Roy.", "year": 2014}, {"title": "Some extensions of an inequality of Vapnik and Chervonenkis", "author": ["Dmitriy Panchenko"], "venue": "Electronic Communications in Probability,", "citeRegEx": "Panchenko.,? \\Q2002\\E", "shortCiteRegEx": "Panchenko.", "year": 2002}, {"title": "Efficient PAC-optimal exploration in concurrent, continuous state MDPs with delayed updates", "author": ["Jason Pazis", "Ronald Parr"], "venue": "In Conference on Artificial Intelligence (AAAI),", "citeRegEx": "Pazis and Parr.,? \\Q2016\\E", "shortCiteRegEx": "Pazis and Parr.", "year": 2016}, {"title": "Convergence of Stochastic Processes", "author": ["D Pollard"], "venue": null, "citeRegEx": "Pollard.,? \\Q1984\\E", "shortCiteRegEx": "Pollard.", "year": 1984}, {"title": "Mastering the game of Go with deep neural networks and tree search. Nature, 2016", "author": ["David Silver", "Aja Huang", "Chris J. Maddison", "Arther Guez", "Laurent Sifre", "George van den Driessche", "Julian Schrittwieser", "Ioannis Antonoglou", "Veda Penneershelvam", "Marc Lanctot", "Sander Dieleman", "Dominik Grewe", "John Nham", "Nal Kalchbrenner", "Ilya Sutskever", "Timothy Lillicrap", "Madeleine Leach", "Koray Kavukcuoglu", "Thore Graepel", "Demis Hassabis"], "venue": null, "citeRegEx": "Silver et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Silver et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 39, "context": ", 2015] and Go [Silver et al., 2016] have sparked a flurry of research interest.", "startOffset": 15, "endOffset": 36}, {"referenceID": 8, "context": ", the use of pseudo-counts in Bellemare et al. [2016]), and combining MCTS with function approximation (e.", "startOffset": 30, "endOffset": 54}, {"referenceID": 8, "context": ", the use of pseudo-counts in Bellemare et al. [2016]), and combining MCTS with function approximation (e.g., Silver et al. [2016]).", "startOffset": 30, "endOffset": 131}, {"referenceID": 8, "context": ", the use of pseudo-counts in Bellemare et al. [2016]), and combining MCTS with function approximation (e.g., Silver et al. [2016]). Both types of approaches often require strong domain knowledge and large amounts of data to be successful. In this work, we study reinforcement learning settings where the agent receives rich sensory observations from the environment, forms complex contexts from these sensorimotor streams for learning and decisionmaking, and uses function approximation to generalize to unseen contexts. Our work departs from existing efforts by aiming at a sample complexity that depends neither on the number of unique contexts nor exponentially on the horizon. Similar goals have been attempted by Wen and Van Roy [2013] and Krishnamurthy et al.", "startOffset": 30, "endOffset": 742}, {"referenceID": 8, "context": ", the use of pseudo-counts in Bellemare et al. [2016]), and combining MCTS with function approximation (e.g., Silver et al. [2016]). Both types of approaches often require strong domain knowledge and large amounts of data to be successful. In this work, we study reinforcement learning settings where the agent receives rich sensory observations from the environment, forms complex contexts from these sensorimotor streams for learning and decisionmaking, and uses function approximation to generalize to unseen contexts. Our work departs from existing efforts by aiming at a sample complexity that depends neither on the number of unique contexts nor exponentially on the horizon. Similar goals have been attempted by Wen and Van Roy [2013] and Krishnamurthy et al. [2016] where attention is restricted to decision processes with special structures.", "startOffset": 30, "endOffset": 774}, {"referenceID": 26, "context": ", POMDPs with large observation spaces and reactive value functions [Krishnamurthy et al., 2016]) and \u201cnew\u201d means that we provide the first sample efficient algorithm (e.", "startOffset": 68, "endOffset": 96}, {"referenceID": 31, "context": "In some application scenarios, partial observability can be resolved by using a small sliding window: for example, in Atari games, it is common to keep track of the last 4 frames of images [Mnih et al., 2015].", "startOffset": 189, "endOffset": 208}, {"referenceID": 27, "context": ", LSPI [Lagoudakis and Parr, 2003] and FQI [Ernst et al.", "startOffset": 7, "endOffset": 34}, {"referenceID": 15, "context": ", LSPI [Lagoudakis and Parr, 2003] and FQI [Ernst et al., 2005]), the Bellman errors are defined as taking the expectation of a squared error unlike in our definition.", "startOffset": 43, "endOffset": 63}, {"referenceID": 26, "context": "The result is due to Krishnamurthy et al. [2016], and we restate it here for completeness.", "startOffset": 21, "endOffset": 49}, {"referenceID": 26, "context": "Proposition 1 (Restatement of Proposition 2 in Krishnamurthy et al. [2016]).", "startOffset": 47, "endOffset": 75}, {"referenceID": 26, "context": "Since F provides no information other than the fact that the true MDP lies in this family, the problem is equivalent to identifying the best arm in a multi-arm bandit with K arms, and the remaining analysis follows exactly the same as in Krishnamurthy et al. [2016].", "startOffset": 238, "endOffset": 266}, {"referenceID": 26, "context": "This result subsumes and generalizes the setting of Krishnamurthy et al. [2016] which requires deterministic transitions in the underlying MDP.", "startOffset": 52, "endOffset": 80}, {"referenceID": 20, "context": "(d) A popular RL experiment setting [Johnson et al., 2016].", "startOffset": 36, "endOffset": 58}, {"referenceID": 30, "context": "Next, we consider Predictive State Representations (PSRs), which are alternative models of partially observable systems with parameters grounded in observable quantities [Littman et al., 2001].", "startOffset": 170, "endOffset": 192}, {"referenceID": 29, "context": "Our last example considers a class of linear control problems well studied in control theory, called Linear Quadratic Regulators (LQRs). In LQRs, we show that the Bellman Rank is bounded by the dimension of the state space. Exploration in this class of problems has been previously considered by Osband and Van Roy [2014]. Again for presentation purposes, we only state an informal result here and defer the formal statement to Appendix B.", "startOffset": 101, "endOffset": 322}, {"referenceID": 26, "context": "The most closely related result is the recent work of Krishnamurthy et al. [2016], who also consider episodic reinforcement learning with infinite observation spaces and function approximation.", "startOffset": 54, "endOffset": 82}, {"referenceID": 3, "context": ", the inherent Bellman error in [Antos et al., 2008]).", "startOffset": 32, "endOffset": 52}, {"referenceID": 12, "context": "Unfortunately, our sample complexity is polynomially worse than the state of the art \u00d5( 2 log(1/\u03b4)) bounds for PAC-learning MDPs [Dann and Brunskill, 2015].", "startOffset": 129, "endOffset": 155}, {"referenceID": 5, "context": "Azizzadenesheli et al. [2016] provided a sample-efficient algorithm in a closely related setting, where both the observation space and the hidden-state space are small in cardinality.", "startOffset": 0, "endOffset": 30}, {"referenceID": 0, "context": "Finally, Contextual Decision Processes also encompass contextual bandits, where the optimal sample complexity is O(K log(N)/ ) [Agarwal et al., 2012].", "startOffset": 127, "endOffset": 149}, {"referenceID": 4, "context": "While no existing MDP lower bounds apply as is, since formulations vary, in Appendix A we adapt ideas from the literature [Auer et al., 2002] to obtain a \u03a9(MKH/ ) sample complexity lower bound for learning the MDPs in Example 1.", "startOffset": 122, "endOffset": 141}, {"referenceID": 34, "context": "Definition 6 (Natarajan dimension [Natarajan, 1989]).", "startOffset": 34, "endOffset": 51}, {"referenceID": 17, "context": "Definition 7 (Pseudo-dimension [Haussler, 1992]).", "startOffset": 31, "endOffset": 47}, {"referenceID": 36, "context": ", using tools from Panchenko [2002]).", "startOffset": 19, "endOffset": 36}, {"referenceID": 11, "context": "The result is similar in spirit to other lower bounds for PAClearning MDPs [Dann and Brunskill, 2015, Krishnamurthy et al., 2016], but we are not aware of any lower bound that applies directly to our setting. There are two main differences between our bound and the lower bound due to Dann and Brunskill [2015] for episodic MDPs.", "startOffset": 76, "endOffset": 311}, {"referenceID": 11, "context": "The result is similar in spirit to other lower bounds for PAClearning MDPs [Dann and Brunskill, 2015, Krishnamurthy et al., 2016], but we are not aware of any lower bound that applies directly to our setting. There are two main differences between our bound and the lower bound due to Dann and Brunskill [2015] for episodic MDPs. First, their bound assumes that the total reward is in [0, H], so the H dependence in the sample complexity is a consequence of scaling the rewards. Second, their MDP is not layered, but instead has M total states shared across all layers. In contrast, our process is layered with M distinct states per layer and total reward bounded in [0, 1]. Intuitively, our additional H dependence arises simply from having MH total states. At a high level, the proof is based on embedding \u0398(MH) independent multi-arm bandit instances into a MDP and requiring that the algorithm identify the best action in \u03a9(MH) of them to produce a near-optimal policy. By appealing to a sample complexity lower bound for best arm identification, this implies that the algorithm requires \u03a9(MHK/ ) samples to identify a near-optimal policy. We rely on a fairly standard lower bound for best arm identification. We reproduce the formal statement from Krishnamurthy et al. [2016], although the proof is based on earlier lower bounds due to Auer et al.", "startOffset": 76, "endOffset": 1280}, {"referenceID": 4, "context": "[2016], although the proof is based on earlier lower bounds due to Auer et al. [2002].", "startOffset": 67, "endOffset": 86}, {"referenceID": 29, "context": "2 Generalization of Li [2009]\u2019s setting Li [2009] considers the setting where the learner is given an abstraction \u03c6 that maps the large state space S in an MDP to some finite abstract state space S\u0304 in an MDP.", "startOffset": 20, "endOffset": 30}, {"referenceID": 29, "context": "2 Generalization of Li [2009]\u2019s setting Li [2009] considers the setting where the learner is given an abstraction \u03c6 that maps the large state space S in an MDP to some finite abstract state space S\u0304 in an MDP.", "startOffset": 20, "endOffset": 50}, {"referenceID": 29, "context": "Proposition 8 (A generalization of [Li, 2009]\u2019s setting).", "startOffset": 35, "endOffset": 45}, {"referenceID": 10, "context": "[2004], Boots et al. [2011]. Consider dynamical systems with discrete and finite observation space O and action space A.", "startOffset": 8, "endOffset": 28}, {"referenceID": 2, "context": "It is well known that in a discrete time LQR, the optimal policy is a non-stationary linear policy \u03c0(x, h) = P?,hx [Anderson and Moore, 2007], where P?,h \u2208 RK\u00d7d is a h-dependent control matrix.", "startOffset": 115, "endOffset": 141}, {"referenceID": 2, "context": ", Anderson and Moore [2007] for a standard reference) admit Bellman Factorization with low Bellman Rank.", "startOffset": 2, "endOffset": 28}, {"referenceID": 18, "context": "Lemma 19 (Bounding covering number by pseudo-dimension [Haussler, 1995]).", "startOffset": 55, "endOffset": 71}, {"referenceID": 38, "context": "Lemma 20 (Uniform deviation bound using covering number [Pollard, 1984]; also see Devroye et al.", "startOffset": 56, "endOffset": 71}, {"referenceID": 13, "context": "Lemma 20 (Uniform deviation bound using covering number [Pollard, 1984]; also see Devroye et al. [1996], Theorem 29.", "startOffset": 82, "endOffset": 104}], "year": 2017, "abstractText": "This paper studies systematic exploration for reinforcement learning with rich observations and function approximation. We introduce a new formulation, called contextual decision processes, that unifies and generalizes most prior settings. Our first contribution is a new complexity measure, the Bellman Rank , that we show enables tractable learning of near-optimal behavior in these processes and is naturally small for many well-studied reinforcement learning settings. Our second contribution is a new reinforcement learning algorithm that engages in systematic exploration to learn contextual decision processes with low Bellman Rank. The algorithm provably learns near-optimal behavior with a number of samples that is polynomial in all relevant parameters but independent of the number of unique observations. The algorithm uses Bellman error minimization with optimistic exploration and provides new insights into efficient exploration for reinforcement learning with function approximation.", "creator": "LaTeX with hyperref package"}}}