{"id": "1611.06355", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Nov-2016", "title": "Invertible Conditional GANs for image editing", "abstract": "Generative Adversarial Networks (GANs) have recently shown that complex data distributions can be successfully approximated. A relevant extension of this model are conditional GANs (cGANs), where the introduction of external information makes it possible to determine specific representations of the generated images. In this thesis, we evaluate encoders in order to reverse the imaging of a cGAN, i.e. a real image into a latent space and a conditional representation. This allows, for example, the reconstruction and modification of real images of facial conditions to arbitrary attributes. In addition, we evaluate the design of cGANs. Combining an encoder with a cGAN, which we call Invertible cGAN (IcGAN), makes it possible to restore real images with deterministic complex modifications.", "histories": [["v1", "Sat, 19 Nov 2016 12:35:01 GMT  (2392kb,D)", "http://arxiv.org/abs/1611.06355v1", "Accepted paper at NIPS 2016 Workshop on Adversarial Training"]], "COMMENTS": "Accepted paper at NIPS 2016 Workshop on Adversarial Training", "reviews": [], "SUBJECTS": "cs.CV cs.AI", "authors": ["guim perarnau", "joost van de weijer", "bogdan raducanu", "jose m \\'alvarez"], "accepted": false, "id": "1611.06355"}, "pdf": {"name": "1611.06355.pdf", "metadata": {"source": "CRF", "title": "Invertible Conditional GANs for image editing", "authors": ["Guim Perarnau", "Joost van de Weijer", "Bogdan Raducanu", "Jose M. \u00c1lvarez"], "emails": ["guimperarnau@gmail.com", "joost@cvc.uab.es", "bogdan@cvc.uab.es", "jose.alvarez@nicta.com.au"], "sections": [{"heading": "1 Introduction", "text": "Image editing can be performed at different levels of complexity and abstraction. Common operations consist in simply applying a filter to an image to, for example, augment the contrast or convert to grayscale. These, however, are low-complex operations that do not necessarily require to comprehend the scene or object that the image is representing. On the other hand, if one would want to modify the attributes of a face (e.g. add a smile, change the hair color or even the gender), this is a more complex and challenging modification to perform. In this case, in order to obtain realistic results, a skilled human with an image edition software would often be required.\nA solution to automatically perform these non-trivial operations relies on generative models. Natural image generation has been a strong research topic for many years, but it has not been until 2015 that promising results have been achieved with deep learning techniques combined with generative modeling [1, 2]. Generative Adversarial Networks (GANs) [3] is one of the state-of-the-art approaches for image generation. GANs are especially interesting as they are directly optimized towards generating the most plausible and realistic data, as opposed to other models (e.g. Variational Autoencoders [4]), which focus on an image reconstruction loss. Additionally, GANs are able to explicitly control generated images features with a conditional extension, conditional GANs (cGANs). However, the GAN framework lacks an inference mechanism, i.e., finding the latent representation of an input image, which is a necessary step for being able to reconstruct and modify real images.\nIn order to overcome this limitation, in this paper we introduce Invertible Conditional GANs (IcGANs) for complex image editing as the union of an encoder used jointly with a cGAN. This model allows to map real images into a high-feature space (encoder) and perform meaningful modifications on them (cGAN). As a result, we can explicitly control the attributes of a real image (Figure 1), which could be potentially useful in several applications, be it creative processes, data augmentation or face profiling.\nCode available at https://github.com/Guim3/IcGAN\nWorkshop on Adversarial Training, NIPS 2016, Barcelona, Spain.\nar X\niv :1\n61 1.\n06 35\n5v 1\n[ cs\n.C V\n] 1\n9 N\nov 2\nThe summary of contributions of our work is the following: \u2022 Proposing IcGANs, composed of two crucial parts: an encoder and a cGAN. We apply this\nmodel to MNIST [5] and CelebA [6] datasets, which allows performing meaningful and realistic editing operations on them by arbitrarily changing the conditional information y.\n\u2022 Introducing an encoder in the conditional GAN framework to compress a real image x into a latent representation z and conditional vector y. We consider several designs and training procedures to leverage the performance obtained from available conditional information.\n\u2022 Evaluating and refining cGANs through conditional position and conditional sampling to enhance the quality of generated images."}, {"heading": "2 Related work", "text": "There are different approaches for generative models. Among them, there are two promising ones that are recently pushing the state-of-the-art with highly plausible generated images.\nThe first one is Variational Autoencoders (VAE) [1, 4, 7, 8], which impose a prior representation space z (e.g. normal distribution) in order to regularize and constrain the model to sample from it. However, VAEs main limitation is the pixel-wise reconstruction error used as a loss function, which causes the output images to look blurry. The second approach is Generative Adversarial Nets (GANs). Originally proposed by Goodfellow et al. [3], GANs have been improved with a deeper architecture (DCGAN) by Radford et al. [2]. The latest advances introduced several techniques that improve the overall performance for training GANs [9] and an unsupervised approach to disentangle feature representations [10]. Additionally, the most advanced and recent work on cGANs trains a model to generate realistic images from text descriptions and landmarks [11].\nOur work is considered in the content of the GAN framework. The baseline will be the work of Radford\u2019s et al. (DCGANs) [2], which we will add a conditional extension. The difference of our approach to prior work is that we also propose an encoder (Invertible cGAN) with which we can, given an input image x, to obtain its representation as a latent variable z and a conditional vector y. Then, we can modify z and y to re-generate the original image with complex variations. Dumoulin et al. [12] and Donahue et al. [13] also proposed an encoder in GANs, but in a non-conditional and jointly trained setting. Additionally, Makhzani et al. [14] and Larsen et al. [15] proposed a similar idea to this paper by combining a VAE and a GAN with promising results.\nReed et al. [16] implemented an encoder in a similar fashion to our approach. This paper builds alongside their work in a complementary manner. In our case, we analyze more deeply the encoder by including conditional information encoding and testing different architectures and training approaches. Also, we evaluate unexplored design decisions for building a cGAN."}, {"heading": "3 Background: Generative Adversarial Networks", "text": "A GAN is composed of two neural networks, a generator G and a discriminator D. Both networks are iteratively trained competing against each other in a minimax game. The generator aims to approximate the underlying unknown data distribution pdata to fool the discriminator, whilst the discriminator is focused on being able to tell which samples are real or generated. On convergence, we want pdata = pg , where pg is the generator distribution.\nMore formally, considering the function v(\u03b8g, \u03b8d), where \u03b8g and \u03b8d are the parameters of the generator G and discriminator D respectively, we can formulate GAN training as optimizing\nmin g max d v(\u03b8g, \u03b8d) = Ex\u223cpdata [logD(x)] + Ez\u223cpz [log(1\u2212D(G(z)))], (1)\nwhere z is a vector noise sampled from a known simple distribution pz (e.g. normal).\nGAN framework can be extended with conditional GANs (cGANs) [17]. They are quite similar to vanilla (non-conditional) GANs, the only difference is that, in this case, we have extra information y (e.g. class labels, attribute information) for a given real sample x. Conditional information strictly depends on real samples, but we can model a density model py in order to sample generated labels y\u2032 for generated data x\u2032. Then, Equation 1 can be reformulated for the cGAN extension as\nmin g max d\nv(\u03b8g, \u03b8d) = Ex,y\u223cpdata [logD(x, y)] + Ez\u223cpz,y\u2032\u223cpy [log(1\u2212D(G(z, y\u2032), y\u2032))]. (2)\nOnce a cGAN is trained, it allows us to generate samples using two level of variations: constrained and unconstrained. Constrained variations are modeled with y as it directly correlates with features of the data that are explicitly correlated with y and the data itself. Then, all the other variations of the data not modeled by y (unconstrained variations) are encoded in z."}, {"heading": "4 Invertible Conditional GANs", "text": "We introduce Invertible Conditional GANs (IcGANs), which are composed of a cGAN and an encoder. Even though encoders have recently been introduced into the GAN framework [12, 13, 16], we are the first ones to include and leverage the conditional information y into the design of the encoding process. In section 4.1 we explain how and why an encoder is included in the GAN framework for a conditional setting. In section 4.2, we introduce our approach to refine cGANs on two aspects: conditional position and conditional sampling. The model architecture is described in section 4.3."}, {"heading": "4.1 Encoder", "text": "A generator x\u2032 = G(z, y\u2032) from a GAN framework does not have the capability to map a real image x to its latent representation z. To overcome this problem, we can train an encoder/inference network E that approximately inverses this mapping (z, y) = E(x). This inversion would allow us to have a latent representation z from a real image x and, then, we would be able to explore the latent space by interpolating or adding variations on it, which would result in variations on the generated image x\u2032. If combined with a cGAN, once the latent representation z has been obtained, explicitly controlled variations can be added to an input image via conditional information y (e.g. generate a certain digit in MNIST or specify face attributes on a face dataset). We call this combination Invertible cGAN, as now the mapping can be inverted: (z, y) = E(x) and x\u2032 = G(z, y), where x is an input image and x\u2032 its reconstruction. See Figure 2 for an example on how a trained IcGAN is used.\nOur approach consists of training an encoder E once the cGAN has been trained, as similarly considered by Reed et al [16]. In our case, however, the encoder E is composed of two sub-encoders: Ez , which encodes an image to z, and Ey, which encodes an image to y. To train Ez we use the generator to create a dataset of generated images x\u2032 and their latent vectors z, and then minimize a squared reconstruction loss Lez (Eq. 3). For Ey, we initially used generated images x\u2032 and their conditional information y\u2032 for training. However, we found that generated images tend to be noisier than real ones and, in this specific case, we could improve Ey by directly training with real images and labels from the dataset pdata (Eq. 4).\nLez = Ez\u223cpz,y\u2032\u223cpy\u2016z \u2212 Ez(G(z, y\u2032))\u201622 (3) Ley = Ex,y\u223cpdata\u2016y \u2212 Ey(x)\u201622 (4)\nAlthough Ez and Ey might seem completely independent, we can adopt different strategies to make them interact and leverage the conditional information (for an evaluation of them, see section 5.3):\n\u2022 SNG: One single encoder with shared layers and two outputs. That is, Ez and Ey are embedded in a single encoder.\n\u2022 IND: Two independent encoders. Ez and Ey are trained separately. \u2022 IND-COND: Two encoders, where Ez is conditioned on the output of encoder Ey .\nRecently, Dumoulin et al. [12] and Donahue et al. [13] proposed different approaches on how to train an encoder in the GAN framework. One of the most interesting approaches consists in jointly training the encoder with both the discriminator and the generator. Although this approach is promising, our work has been completely independent of these articles and focuses on another direction, since we consider the encoder in a conditional setting. Consequently, we implemented our aforementioned approach which performs nearly equally [13] to their strategy."}, {"heading": "4.2 Conditional GAN", "text": "We consider two main design decisions concerning cGANs. The first one is to find the optimal conditional position y on the generator and discriminator, which, to our knowledge, has not been previously addressed. Secondly, we discuss the best approach to sample conditional information for the generator.\nConditional position In the cGAN, the conditional information vector y needs to be introduced in both the generator and the discriminator. In the generator, y \u223c pdata and z \u223c pz (where pz = N (0, 1)) are always concatenated in the filter dimension at the input level [16\u201318]. As for the discriminator, different authors insert y in different parts of the model [16\u201318]. We expect that the earlier y is positioned in the model the better since the model is allowed to have more learning interactions with y. Experiments regarding the optimal y position will be detailed in section 5.2.\nConditional sampling There are two types of conditional information, y and y\u2032. The first one is trivially sampled from (x, y) \u223c pdata and is used for training the discriminator D(x, y) with a real image x and its associated label y. The second one is sampled from y\u2032 \u223c py and serves as input to the generator G(z, y\u2032) along with a latent vector z \u223c pz to generate an image x\u2032, and it can be sampled using different approaches:\n\u2022 Kernel density estimation: also known as Parzen window estimation, it consists in randomly sampling from a kernel (e.g. Gaussian kernel with a cross-validated \u03c3).\n\u2022 Direct interpolation: interpolate between label vectors y from the training set [16]. The reasoning behind this approach is that interpolations can belong to the label distribution py . \u2022 Sampling from the training set y\u2032 \u223c py, py = pdata: Use directly the real labels y from the training set pdata. As Gauthier [18] pointed out, unlike the previous two approaches, this method could overfit the model by using the conditional information to reproduce the images of the training set. However, this is only likely to occur if the conditional information is, to some extent, unique for each image. In the case where the attributes of an image are binary, one attribute vector y could describe a varied and large enough subset of images, preventing the model from overfitting given y.\nKernel density estimation and direct interpolation are, at the end, two different ways to interpolate on py. Nevertheless, interpolation is mostly suitable when the attribute information y is composed of real vectors y \u2208 Rn, not binary ones. It is not the case of the binary conditional information of the datasets used in this paper (see section 5.1 for dataset information). Directly interpolating binary vectors would not create plausible conditional information, as an interpolated vector y \u2208 Rn would not belong to py \u2208 {0, 1}n nor pdata \u2208 {0, 1}n. Using a kernel density estimation would not make sense either, as all the binary labels would fall in the corners of a hypercube. Therefore, we will directly sample y from pdata."}, {"heading": "4.3 Model architecture", "text": "Conditional GAN The work of this paper is based on the Torch implementation of the DCGAN1 [2]. We use the recommended configuration for the DCGAN, which trains with the Adam optimizer [19] (\u03b21 = 0.5, \u03b22 = 0.999, = 10\u22128) with a learning rate of 0.0002 and a mini-batch size of 64 (samples drawn independently at each update step) during 25 epochs. The output image size used as a baseline is 64\u00d7 64. Also, we train the cGAN with the matching-aware discriminator method from Reed et al. [16]. In Figure 3 we show an overview architecture of both generator and discriminator for the cGAN. For a more detailed description of the model see Table 1.\nEncoder For simplicity, we show the architecture of the IND encoders (Table 2), as they are the ones that give the best performance. Batch Normalization and non-linear activation functions are removed from the last layer to guarantee that the output distribution is similar to pz = N (0, 1). Additionally, after trying different configurations, we have replaced the last two convolutional layers with two fully connected layers at the end of the encoder, which yields a lower error. The training configuration (Adam optimizer, batch size, etc) is the same as the one used for the cGAN model."}, {"heading": "5 Experiments", "text": ""}, {"heading": "5.1 Datasets", "text": "We use two image datasets of different complexity and variation, MNIST [5] and CelebFaces Attributes (CelebA) [6]. MNIST is a digit dataset of grayscale images composed of 60,000 training images and 10,000 test images. Each sample is a 28\u00d7 28 centered image labeled with the class of the digit (0 to 9). CelebA is a dataset composed of 202,599 face colored images and 40 attribute binary vectors. We use the aligned and cropped version and scale the images down to 64\u00d7 64. We also use the official train and test partitions, 182K for training and 20K for testing. Of the original 40 attributes, we filter those that do not have a clear visual impact on the generated images, which leaves a total of 18 attributes. We will evaluate the quality of generated samples of both datasets. However, a quantitative evaluation will be performed on CelebA only, as it is considerably more complex than MNIST."}, {"heading": "5.2 Evaluating the conditional GAN", "text": "The goals of this experiment are two. First, we evaluate the general performance of the cGAN with an attribute predictor network (Anet) on CelebA dataset. Second, we test the impact of adding y in different layers of the cGAN (section 4.2, conditional position).\nWe use an Anet2 as a way to make a quantitative evaluation in a similar manner as Salimans et al. Inception model [9], as the output given by this Anet (i.e., which attributes are detected on a generated sample) is a good indicator of the generator ability to model them. In other words, if the predicted Anet attributes y\u2032 are closer to the original attributes y used to generate an image x\u2032, we expect that the generator has successfully learned the capability to generate new images considering the semantic meaning of the attributes. Therefore, we use the generator G to create images x\u2032 conditioned on attribute vectors y \u223c pdata (i.e. x\u2032 = G(z, y)), and make the Anet predict them. Using the Anet output, we build a confusion matrix for each attribute and compute the mean accuracy and F1-Score to test the model and its inserted optimal position of y in both generator and discriminator.\nIn Table 3 we can see how cGANs have successfully learned to generate the visual representations of the conditional attributes with an overall accuracy of \u223c 86%. The best accuracy is achieved by inserting y in the first convolutional layer of the discriminator and at the input level for the generator. Thus, we are going to use this configuration for the IcGAN. Both accuracy and F1-Score are similar as long as y is not inserted in the last convolutional layers, in which case the performance considerably drops, especially in the generator. Then, these results reinforce our initial intuition of y being added at an early stage of the model to allow learning interactions with it."}, {"heading": "5.3 Evaluating the encoder", "text": "In this experiment, we prioritize the visual quality of reconstructed samples as an evaluation criterion. Among the different encoder configurations of section 4.1, IND and IND-COND yield a similar qualitative performance, being IND slightly superior. A comparison of these different configurations is shown in Figure 4a and in Figure 4b we focus on IND reconstructed samples. On another level, the fact that the generator is able, via an encoder, to reconstruct unseen images from the test set shows that the cGAN is generalizing and suggests that it does not suffer from overfitting, i.e., it is not just memorizing and reproducing training samples.\n2The architecture of the Anet is the same as Ey from Table 2.\nAdditionally, we compare the different encoder configurations in a quantitative manner by using the minimal squared reconstruction loss Le as a criterion. Each encoder is trained minimizing Le with respect to latent representations z (Lez) or conditional information y (Ley). Then, we quantitatively evaluate different model architectures using Le as a metric on a test set of 150K CelebA generated images. We find that the encoder that yields the lowest Le is also IND (0.429), followed closely by IND-CND (0.432), and being SNG the worst case (0.500).\nFurthermore, we can see an interesting property of minimizing a loss based on the latent space instead of a pixel-wise image reconstruction: reconstructed images tend to accurately keep high-level features of an input image (e.g. how a face generally looks) in detriment to more local details such as the exact position of the hair, eyes or face. Consequently, a latent space based encoder is invariant to these local details, making it an interesting approach for encoding purposes. For example, notice how the reconstructions in the last row of CelebA samples in Figure 4b fill the occluded part of the face by a hand. Another advantage with respect to element-wise encoders such as VAE is that GAN based reconstructions do not look blurry."}, {"heading": "5.4 Evaluating the IcGAN", "text": "In order to test that the model is able to correctly encode and re-generate a real image by preserving its main attributes, we take real samples from MNIST and CelebA test sets and reconstruct them with modifications on the conditional information y. The result of this procedure is shown in Figure 5, where we show a subset of 9 of the 18 for CelebA attributes for image clarity. We can see that, in MNIST, we are able to get the hand-written style of real unseen digits and replicate these style on all the other digits. On the other hand, in CelebA we can see how reconstructed faces generally match the specified attribute. Additionally, we noticed that faces with uncommon conditions (e.g., looking away from the camera, face not centered) were the most likely to be noisy. Furthermore, attributes such as mustache often fail to be generated especially on women samples, which might indicate that the generator is limited to some unusual attribute combinations.\nManipulating the latent space The latent feature representation z and conditional information y learned by the generator can be further explored beyond encoding real images or randomly sampling z. In order to do so, we linearly interpolate both z and y with pairs of reconstructed images from the CelebA test set (Figure 6a). All the interpolated faces are plausible and the transition between faces is smooth, demonstrating that the IcGAN learned manifold is also consistent between interpolations. Then, this is also a good indicator that the model is generalizing the face representation properly, as it is not directly memorizing training samples.\nIn addition, we perform in Figure 6b an attribute transfer between pairs of faces. We infer the latent representation z and attribute information y of two real faces from the test set, swap y between those faces and re-generate them. As we previously noticed, the results suggest that z encodes pose, illumination and background information, while y tends to represent unique features of the face."}, {"heading": "6 Conclusions", "text": "We introduce an encoder in a conditional setting within the GAN framework, a model which we call Invertible Conditional GANs (IcGANs). It solves the problem of GANs lacking the ability to infer real samples to a latent representation z, while also allowing to explicitly control complex attributes of generated samples with conditional information y. We also refine the performance of cGANS by testing the optimal position in which the conditional information y is inserted in the model. We have found that for the generator, y should be added at the input level, whereas the discriminator works best when y is at the first layer. Additionally, we evaluate several ways to training an encoder. Training two independent encoders \u2013 one for encoding z and another for encoding y \u2013 has proven to be the best option in our experiments. The results obtained with a complex face dataset, CelebA, are satisfactory and promising.\nAcknowledgments This work is funded by the Projects TIN2013-41751-P of the Spanish Ministry of Science and the CHIST ERA project PCIN-2015-226."}], "references": [{"title": "DRAW: A Recurrent Neural Network For Image Generation", "author": ["K. Gregor", "I. Danihelka", "A. Graves", "D. Jimenez Rezende", "D. Wierstra"], "venue": "International Conference on Machine Learning (ICML), pp. 1462\u20131471, 2015.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks", "author": ["A. Radford", "L. Metz", "S. Chintala"], "venue": "International Conference on Learning Representations (ICLR), 2016.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2016}, {"title": "Generative adversarial nets", "author": ["I. Goodfellow", "J. Pouget-Abadie", "M. Mirza", "B. Xu", "D. Warde-Farley", "S. Ozair", "A. Courville", "Y. Bengio"], "venue": "Advances in Neural Information Processing Systems 27, Z. Ghahramani, M. Welling, C. Cortes, N. D. Lawrence, and K. Q. Weinberger, Eds. Curran Associates, Inc., 2014, pp. 2672\u20132680. [Online]. Available: http://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "Auto-encoding variational bayes", "author": ["D.P. Kingma", "M. Welling"], "venue": "International Conference on Learning Representations (ICLR), 2014. [Online]. Available: http://arxiv.org/abs/1312.6114", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. Lecun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE, 1998, pp. 2278\u20132324.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1998}, {"title": "Deep learning face attributes in the wild", "author": ["Z. Liu", "P. Luo", "X. Wang", "X. Tang"], "venue": "Proceedings of International Conference on Computer Vision (ICCV), December 2015.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Stochastic backpropagation and approximate inference in deep generative models", "author": ["D.J. Rezende", "S. Mohamed", "D. Wierstra"], "venue": "Proceedings of the 31st International Conference on Machine Learning (ICML), vol. 32, pp. 1278\u20131286, 2014.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2014}, {"title": "Semi-supervised learning with deep generative models", "author": ["D.P. Kingma", "D.J. Rezende", "S. Mohamed", "M. Welling"], "venue": "Proceedings of Neural Information Processing Systems (NIPS), 2014. [Online]. Available: http://arxiv.org/abs/1406.5298", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2014}, {"title": "Improved techniques for training GANs", "author": ["T. Salimans", "I.J. Goodfellow", "W. Zaremba", "V. Cheung", "A. Radford", "X. Chen"], "venue": "Neural Information Processing Systems (NIPS), 2016. [Online]. Available: http://arxiv.org/abs/1606.03498", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2016}, {"title": "InfoGAN: Interpretable Representation Learning by Information Maximizing Generative Adversarial Nets", "author": ["X. Chen", "Y. Duan", "R. Houthooft", "J. Schulman", "I. Sutskever", "P. Abbeel"], "venue": "Neural Information Processing Systems (NIPS), 2016. [Online]. Available: http://arxiv.org/abs/1606.03657", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2016}, {"title": "Learning what and where to draw", "author": ["S. Reed", "Z. Akata", "S. Mohan", "S. Tenka", "B. Schiele", "H. Lee"], "venue": "Advances in Neural Information Processing Systems (NIPS), 2016.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2016}, {"title": "Adversarially Learned Inference", "author": ["V. Dumoulin", "I. Belghazi", "B. Poole", "A. Lamb", "M. Arjovsky", "O. Mastropietro", "A. Courville"], "venue": "Arxiv, 2016. [Online]. Available: http://arxiv.org/abs/1606.00704", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2016}, {"title": "Adversarial feature learning", "author": ["J. Donahue", "P. Kr\u00e4henb\u00fchl", "T. Darrell"], "venue": "CoRR, vol. abs/1605.09782, 2016. [Online]. Available: http://arxiv.org/abs/1605.09782", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "Adversarial autoencoders", "author": ["A. Makhzani", "J. Shlens", "N. Jaitly", "I. Goodfellow"], "venue": "International Conference on Learning Representations (ICLR), 2016. [Online]. Available: http://arxiv.org/abs/1511. 05644", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2016}, {"title": "Autoencoding beyond pixels using a learned similarity metric", "author": ["A.B.L. Larsen", "S.K. S\u00f8nderby", "O. Winther"], "venue": "Proceedings of the 33rd International Conference on Machine Learning (ICML), pp. 1558\u20131566, 2015. [Online]. Available: http://arxiv.org/abs/1512.09300", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2015}, {"title": "Generative adversarial text to image synthesis", "author": ["S.E. Reed", "Z. Akata", "X. Yan", "L. Logeswaran", "B. Schiele", "H. Lee"], "venue": "International Conference on Machine Learning (ICML), 2016. [Online]. Available: http://arxiv.org/abs/1605.05396", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2016}, {"title": "Conditional Generative Adversarial Nets", "author": ["M. Mirza", "S. Osindero"], "venue": "CoRR, vol. abs/1411.1784, 2014. [Online]. Available: http://arxiv.org/abs/1411.1784", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2014}, {"title": "Conditional generative adversarial nets for convolutional face generation", "author": ["J. Gauthier"], "venue": "Class project for Stanford CS231N: Convolutional Neural Networks for Visual Recognition, Winter semester 2014, 2014. [Online]. Available: http://cs231n.stanford.edu/reports/jgauthie_final_report.pdf", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2014}, {"title": "Adam: A Method for Stochastic Optimization", "author": ["D. Kingma", "J. Ba"], "venue": "International Conference for Learning Representations (ICLR), 2014. [Online]. Available: http://www.arxiv.org/pdf/1412.6980.pdf 9", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "Natural image generation has been a strong research topic for many years, but it has not been until 2015 that promising results have been achieved with deep learning techniques combined with generative modeling [1, 2].", "startOffset": 211, "endOffset": 217}, {"referenceID": 1, "context": "Natural image generation has been a strong research topic for many years, but it has not been until 2015 that promising results have been achieved with deep learning techniques combined with generative modeling [1, 2].", "startOffset": 211, "endOffset": 217}, {"referenceID": 2, "context": "Generative Adversarial Networks (GANs) [3] is one of the state-of-the-art approaches for image generation.", "startOffset": 39, "endOffset": 42}, {"referenceID": 3, "context": "Variational Autoencoders [4]), which focus on an image reconstruction loss.", "startOffset": 25, "endOffset": 28}, {"referenceID": 4, "context": "We apply this model to MNIST [5] and CelebA [6] datasets, which allows performing meaningful and realistic editing operations on them by arbitrarily changing the conditional information y.", "startOffset": 29, "endOffset": 32}, {"referenceID": 5, "context": "We apply this model to MNIST [5] and CelebA [6] datasets, which allows performing meaningful and realistic editing operations on them by arbitrarily changing the conditional information y.", "startOffset": 44, "endOffset": 47}, {"referenceID": 0, "context": "The first one is Variational Autoencoders (VAE) [1, 4, 7, 8], which impose a prior representation space z (e.", "startOffset": 48, "endOffset": 60}, {"referenceID": 3, "context": "The first one is Variational Autoencoders (VAE) [1, 4, 7, 8], which impose a prior representation space z (e.", "startOffset": 48, "endOffset": 60}, {"referenceID": 6, "context": "The first one is Variational Autoencoders (VAE) [1, 4, 7, 8], which impose a prior representation space z (e.", "startOffset": 48, "endOffset": 60}, {"referenceID": 7, "context": "The first one is Variational Autoencoders (VAE) [1, 4, 7, 8], which impose a prior representation space z (e.", "startOffset": 48, "endOffset": 60}, {"referenceID": 2, "context": "[3], GANs have been improved with a deeper architecture (DCGAN) by Radford et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[2].", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "The latest advances introduced several techniques that improve the overall performance for training GANs [9] and an unsupervised approach to disentangle feature representations [10].", "startOffset": 105, "endOffset": 108}, {"referenceID": 9, "context": "The latest advances introduced several techniques that improve the overall performance for training GANs [9] and an unsupervised approach to disentangle feature representations [10].", "startOffset": 177, "endOffset": 181}, {"referenceID": 10, "context": "Additionally, the most advanced and recent work on cGANs trains a model to generate realistic images from text descriptions and landmarks [11].", "startOffset": 138, "endOffset": 142}, {"referenceID": 1, "context": "(DCGANs) [2], which we will add a conditional extension.", "startOffset": 9, "endOffset": 12}, {"referenceID": 11, "context": "[12] and Donahue et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] also proposed an encoder in GANs, but in a non-conditional and jointly trained setting.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14] and Larsen et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[15] proposed a similar idea to this paper by combining a VAE and a GAN with promising results.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "[16] implemented an encoder in a similar fashion to our approach.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "GAN framework can be extended with conditional GANs (cGANs) [17].", "startOffset": 60, "endOffset": 64}, {"referenceID": 11, "context": "Even though encoders have recently been introduced into the GAN framework [12, 13, 16], we are the first ones to include and leverage the conditional information y into the design of the encoding process.", "startOffset": 74, "endOffset": 86}, {"referenceID": 12, "context": "Even though encoders have recently been introduced into the GAN framework [12, 13, 16], we are the first ones to include and leverage the conditional information y into the design of the encoding process.", "startOffset": 74, "endOffset": 86}, {"referenceID": 15, "context": "Even though encoders have recently been introduced into the GAN framework [12, 13, 16], we are the first ones to include and leverage the conditional information y into the design of the encoding process.", "startOffset": 74, "endOffset": 86}, {"referenceID": 15, "context": "Our approach consists of training an encoder E once the cGAN has been trained, as similarly considered by Reed et al [16].", "startOffset": 117, "endOffset": 121}, {"referenceID": 11, "context": "[12] and Donahue et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] proposed different approaches on how to train an encoder in the GAN framework.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "Consequently, we implemented our aforementioned approach which performs nearly equally [13] to their strategy.", "startOffset": 87, "endOffset": 91}, {"referenceID": 15, "context": "In the generator, y \u223c pdata and z \u223c pz (where pz = N (0, 1)) are always concatenated in the filter dimension at the input level [16\u201318].", "startOffset": 128, "endOffset": 135}, {"referenceID": 16, "context": "In the generator, y \u223c pdata and z \u223c pz (where pz = N (0, 1)) are always concatenated in the filter dimension at the input level [16\u201318].", "startOffset": 128, "endOffset": 135}, {"referenceID": 17, "context": "In the generator, y \u223c pdata and z \u223c pz (where pz = N (0, 1)) are always concatenated in the filter dimension at the input level [16\u201318].", "startOffset": 128, "endOffset": 135}, {"referenceID": 15, "context": "As for the discriminator, different authors insert y in different parts of the model [16\u201318].", "startOffset": 85, "endOffset": 92}, {"referenceID": 16, "context": "As for the discriminator, different authors insert y in different parts of the model [16\u201318].", "startOffset": 85, "endOffset": 92}, {"referenceID": 17, "context": "As for the discriminator, different authors insert y in different parts of the model [16\u201318].", "startOffset": 85, "endOffset": 92}, {"referenceID": 15, "context": "\u2022 Direct interpolation: interpolate between label vectors y from the training set [16].", "startOffset": 82, "endOffset": 86}, {"referenceID": 17, "context": "As Gauthier [18] pointed out, unlike the previous two approaches, this method could overfit the model by using the conditional information to reproduce the images of the training set.", "startOffset": 12, "endOffset": 16}, {"referenceID": 1, "context": "Conditional GAN The work of this paper is based on the Torch implementation of the DCGAN1 [2].", "startOffset": 90, "endOffset": 93}, {"referenceID": 18, "context": "We use the recommended configuration for the DCGAN, which trains with the Adam optimizer [19] (\u03b21 = 0.", "startOffset": 89, "endOffset": 93}, {"referenceID": 15, "context": "[16].", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "We use two image datasets of different complexity and variation, MNIST [5] and CelebFaces Attributes (CelebA) [6].", "startOffset": 71, "endOffset": 74}, {"referenceID": 5, "context": "We use two image datasets of different complexity and variation, MNIST [5] and CelebFaces Attributes (CelebA) [6].", "startOffset": 110, "endOffset": 113}, {"referenceID": 8, "context": "Inception model [9], as the output given by this Anet (i.", "startOffset": 16, "endOffset": 19}], "year": 2016, "abstractText": "Generative Adversarial Networks (GANs) have recently demonstrated to successfully approximate complex data distributions. A relevant extension of this model is conditional GANs (cGANs), where the introduction of external information allows to determine specific representations of the generated images. In this work, we evaluate encoders to inverse the mapping of a cGAN, i.e., mapping a real image into a latent space and a conditional representation. This allows, for example, to reconstruct and modify real images of faces conditioning on arbitrary attributes. Additionally, we evaluate the design of cGANs. The combination of an encoder with a cGAN, which we call Invertible cGAN (IcGAN), enables to re-generate real images with deterministic complex modifications.", "creator": "LaTeX with hyperref package"}}}