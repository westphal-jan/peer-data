{"id": "1612.01064", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Dec-2016", "title": "Trained Ternary Quantization", "abstract": "To solve this problem, we propose Trained Ternary Quantization (TTQ), a method that can reduce the precision of weights in neural networks to ternary values, and our AlexNet model is retrained from the ground up, which means that it is so easy to train normal models with full precision. We highlight our trained quantization method, which can learn both ternary values and ternary assignments. During the inference, only ternary values (2-bit weights) and scaling factors are required, so our models are almost 16x smaller than models with full precision. Our ternary models can also be considered sparse binary weight networks, which can potentially accelerate to 0.36% -0.36% net precision.", "histories": [["v1", "Sun, 4 Dec 2016 05:00:22 GMT  (288kb,D)", "http://arxiv.org/abs/1612.01064v1", "Submitted to ICLR 17"], ["v2", "Mon, 23 Jan 2017 03:27:20 GMT  (289kb,D)", "http://arxiv.org/abs/1612.01064v2", "Submitted to ICLR 17"], ["v3", "Thu, 23 Feb 2017 06:52:28 GMT  (289kb,D)", "http://arxiv.org/abs/1612.01064v3", "Accepted for Poster Presentation on ICLR 2017"]], "COMMENTS": "Submitted to ICLR 17", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["chenzhuo zhu", "song han", "huizi mao", "william j dally"], "accepted": true, "id": "1612.01064"}, "pdf": {"name": "1612.01064.pdf", "metadata": {"source": "CRF", "title": "TRAINED TERNARY QUANTIZATION", "authors": ["Chenzhuo Zhu", "Song Han", "Huizi Mao", "William J. Dally"], "emails": ["zhucz13@mails.tsinghua.edu.cn", "songhan@stanford.edu", "huizi@stanford.edu", "dally@stanford.edu"], "sections": [{"heading": "1 INTRODUCTION", "text": "Deep neural networks are becoming the preferred approach for many machine learning applications. However, as networks get deeper, deploying a network with a large number of parameters on a small device becomes increasingly difficult. Much work has been done to reduce the size of networks. Halfprecision networks (Amodei et al., 2015) cut sizes of neural networks in half. XNOR-Net (Rastegari et al., 2016), DoReFa-Net (Zhou et al., 2016) and network binarization (Courbariaux et al.; 2015; Lin et al., 2015) use aggressively quantized weights, activations and gradients to further reduce computation during training. While weight binarization benefits from 32\u00d7 smaller model size, the extreme compression rate comes with a loss of accuracy. Hubara et al. (2016) and Li & Liu (2016) propose ternary weight networks to trade off between model size and accuracy.\nIn this paper, we propose Trained Ternary Quantization which uses two full-precision scaling coefficients W pl , W n l for each layer l, and quantize the weights to {\u2212Wnl , 0, +W p l } instead of traditional {-1, 0, +1} or {-E, 0, +E} where E is the mean of the absolute weight value, which is not learned. Our positive and negative weights have different absolute values W pl and W n l that are trainable parameters. We also maintain latent full-precision weights at training time, and discard them at test time. We back propagate the gradient to both W pl , W n l and to the latent full-precision weights. This makes it possible to adjust the ternary assignment (i.e. which of the three values a weight is assigned).\nOur quantization method, achieves higher accuracy on the CIFAR-10 and ImageNet datasets. For AlexNet on ImageNet dataset, our method outperforms previously state-of-art ternary network(Li &\n\u2217Work done while at Stanford CVA lab.\nar X\niv :1\n61 2.\n01 06\n4v 1\n[ cs\n.L G\n] 4\nD ec\n2 01\nLiu, 2016) by 3.0% of Top-1 accuracy and the full-precision model by 1.6%. By converting most of the parameters to 2-bit values, we also compress the network by about 16x. Moreover, the advantage of few multiplications still remains, because W pl and W n l are fixed for each layer during inference. On custom hardware, multiplications can be pre-computed on activations, so only two multiplications per activation are required."}, {"heading": "2 RELATED WORK", "text": ""}, {"heading": "2.1 BINARY NEURAL NETWORK (BNN)", "text": "Lin et al. (2015) proposed binary and ternary connections to compress neural networks and speed up computation during inference. They used similar probabilistic methods to convert 32-bit weights into binary values or ternary values, defined as:\nwb \u223c Bernoulli( w\u0303 + 1 2 )\u00d7 2\u2212 1\nwt \u223c Bernoulli(|w\u0303|)\u00d7 sign(w\u0303) (1)\nHere wb and wt denote binary and ternary weights after quantization. w\u0303 denotes the latent full precision weight.\nDuring back-propagation, as the above quantization equations are not differentiable, derivatives of expectations of the Bernoulli distribution are computed instead, yielding the identity function:\n\u2202L \u2202w\u0303 = \u2202L \u2202wb = \u2202L \u2202wt (2)\nHere L is the loss to optimize.\nFor BNN with binary connections, only quantized binary values are needed for inference. Therefore a 32\u00d7 smaller model can be deployed into applications."}, {"heading": "2.2 DOREFA-NET", "text": "Zhou et al. (2016) proposed DoReFa-Net which quantizes weights, activations and gradients of neural networks using different widths of bits. Therefore with specifically designed low-bit multiplication algorithm or hardware, both training and inference stages can be accelerated.\nThey also introduced a much simpler method to quantize 32-bit weights to binary values, defined as:\nwb = E(|w\u0303|)\u00d7 sign(w\u0303) (3) Here E(|w\u0303|) calculates the mean of absolute values of full precision weights w\u0303 as layer-wise scaling factors. During back-propagation, Equation 2 still applies."}, {"heading": "2.3 TERNARY WEIGHT NETWORKS", "text": "Li & Liu (2016) proposed TWN (Ternary weight networks), which reduce accuracy loss of binary networks by introducing zero as a third quantized value. They use two symmetric thresholds \u00b1\u2206l and a scaling factor Wl for each layer l to quantize weighs into {\u2212Wl, 0,+Wl}:\nwtl =  Wl : w\u0303l > \u2206l\n0 : |w\u0303l| \u2264 \u2206l \u2212Wl : w\u0303l < \u2212\u2206l\n(4)\nThey then solve an optimization problem of minimizing L2 distance between full precision and ternary weights to obtain layer-wise values of Wl and \u2206l:\n\u2206l = 0.7\u00d7E(|w\u0303l|) Wl = E\ni\u2208{i|w\u0303l(i)|>\u2206} (|w\u0303l(i)|) (5)\nAnd again Equation 2 is used to calculate gradients. While an additional bit is required for ternary weights, TWN achieves a validation accuracy that is very close to full precision networks according to their paper."}, {"heading": "2.4 DEEP COMPRESSION", "text": "Han et al. (2015) proposed deep compression to prune away trivial connections and reduce precision of weights. Unlike above models using zero or symmetric thresholds to quantize high precision weights, Deep Compression used clusters to categorize weights into groups. In Deep Compression, low precision weights are fine-tuned from a pre-trained full precision network, and the assignment of each weight is established at the beginning and stay unchanged, while representative value of each cluster is updated throughout fine-tuning."}, {"heading": "3 METHOD", "text": "Our method is illustrated in Figure 1. First, we normalize the full-precision weights to the range [-1, +1] by dividing each weight by the maximum weight. Next, we quantize the intermediate full-resolution weights to {-1, 0, +1} by thresholding. The threshold factor t is a hyper-parameter that is the same across all the layers in order to reduce the search space. Finally, we perform trained quantization by back propagating two gradients, as shown in the dashed lines in Figure 1. We back-propagate gradient1 to the full-resolution weights and gradient2 to the scaling coefficients. The former enables learning the ternary assignments, and the latter enables learning the ternary values.\nAt inference time, we throw away the full-resolution weights and only use ternary weights."}, {"heading": "3.1 LEARNING BOTH TERNARY VALUES AND TERNARY ASSIGNMENTS", "text": "During gradient descent we learn both the quantized ternary weights (the codebook), and choose which of these values is assigned to each weight (choosing the codebook index).\nTo learn the ternary value (codebook), we introduce two quantization factors W pl and W n l for positive and negative weights in each layer l. During feed-forward, quantized ternary weightswtl are calculated as:\nwtl =  W pl : w\u0303l > \u2206l\n0 : |w\u0303l| \u2264 \u2206l \u2212Wnl : w\u0303l < \u2212\u2206l\n(6)\nUnlike previous work where quantized weights are calculated from 32-bit weights, the scaling coefficients W pl and W n l are two independent parameters and are trained together with other parameters. Following the rule of gradient descent, derivatives of W pl and W n l are calculated as:\n\u2202L\n\u2202W pl = \u2211 i\u2208Ipl \u2202L \u2202wtl (i) , \u2202L \u2202Wnl = \u2211 i\u2208Inl \u2202L \u2202wtl (i) (7)\nHere Ipl = {i|w\u0303l(i) > \u2206l} and Inl = {i|(i)w\u0303l < \u2212\u2206l}. Furthermore, because of the existence of two scaling factors, gradients of latent full precision weights can no longer be calculated by\nEquation 2. We use scaled gradients for 32-bit weights:\n\u2202L \u2202w\u0303l =  W pl \u00d7 \u2202L \u2202wtl : w\u0303l > \u2206l 1\u00d7 \u2202L \u2202wtl : |w\u0303l| \u2264 \u2206l Wnl \u00d7 \u2202L\n\u2202wtl : w\u0303l < \u2212\u2206l\n(8)\nNote we use scalar number 1 as factor of gradients of zero weights. The overall quantization process is illustrated as Figure 1. The evolution of the ternary weights from different layers during training is shown in Figure 2. We observe that as training proceeds, different layers behave differently: for the first quantized conv layer, the absolute values of W pl and W n l get smaller and sparsity gets lower, while for the last conv layer and fully connected layer, the absolute values of W pl and W n l get larger and sparsity gets higher.\nWe learn the ternary assignments (index to the codebook) by updating the latent full-resolution weights during training. This may cause the assignments to change between iterations. Note that the thresholds are not constants as the maximal absolute values change over time. Once an updated weight crosses the threshold, the ternary assignment is changed.\nThe benefits of using trained quantization factors are: i) The asymmetry of W pl 6= Wnl enables neural networks to have more model capacity. ii) Quantized weights play the role of \"learning rate multipliers\" during back propagation."}, {"heading": "3.2 QUANTIZATION HEURISTIC", "text": "In previous work on ternary weight networks, Li & Liu (2016) proposed Ternary Weight Networks (TWN) using \u00b1\u2206l as thresholds to reduce 32-bit weights to ternary values, where \u00b1\u2206l is defined as Equation 5. They optimized value of \u00b1\u2206l by minimizing expectation of L2 distance between full precision weights and ternary weights. Instead of using a strictly optimized threshold, we adopt different heuristics: 1) use the maximum absolute value of the weights as a reference to the layer\u2019s threshold and maintain a constant factor t for all layers:\n\u2206l = t\u00d7max(|w\u0303|) (9)\nand 2) maintain a constant sparsity r for all layers throughout training. By adjusting the hyperparameter r we are able to obtain ternary weight networks with various sparsities. We use the first method and set t to 0.05 in experiments on CIFAR-10 and ImageNet dataset and use the second one to explore a wider range of sparsities in section 5.1.1.\n4\n177 0.08179999887943270.100699998438358 0.089199997484684 178 0.08139999955892560.128600001335144 0.0901999995112419 179 0.08060000091791150.110799998044968 0.086499996483326\nFull precision Binary weight (DoReFa-Net) Ternary weight (Ours)\n6"}, {"heading": "4 EXPERIMENTS", "text": "We perform our experiments on CIFAR-10 (Krizhevsky & Hinton, 2009) and ImageNet (Russakovsky et al., 2015). Our network is implemented on both TensorFlow (Abadi & et. al o, 2015) and Caffe (Jia et al., 2014) frameworks."}, {"heading": "4.1 CIFAR-10", "text": "CIFAR-10 is an image classification benchmark containing images of size 32\u00d732RGB pixels in a training set of 50000 and a test set of 10000. ResNet (He et al., 2015) structure is used for our experiments.\nWe use parameters pre-trained from a full precision ResNet to initialize our model. Learning rate is set to 0.1 at beginning and scaled by 0.1 at epoch 80, 120 and 300. A L2-normalized weight decay of 0.0002 is used as regularizer. Most of our models converge after 160 epochs. We take a moving average on errors of all epochs to filter off fluctuations when reporting error rate.\nWe compare our model with the full-precision model and a binary-weight model. We train a a full precision ResNet (He et al., 2016) on CIFAR-10 as the baseline (blue line in Figure 3). We fine-tune the trained baseline network as a 1-32-32 DoReFa-Net where weights are 1 bit and both activations and gradients are 32 bits giving a significant loss of accuracy (green line) . Finally, we fine-tuning the baseline with trained ternary weights (red line). Our model has substantial accuracy improvement over the binary weight model, and our loss of accuracy over the full precision model is small. We also compare our model to Tenary Weight Network (TWN) on ResNet-20. Result shows our model improves the accuracy by \u223c 0.25% on CIFAR-10. We expand our experiments to ternarize ResNet with 32, 44 and 56 layers. All ternary models are fine-tuned from full precision models. Our results show that we improve the accuracy of ResNet-32, ResNet-44 and ResNet-56 by 0.04%, 0.16% and 0.36% . The deeper the model, the larger the improvement. We conjecture that this is due to ternary weights providing the right model capacity and preventing overfitting for deeper networks.\n1"}, {"heading": "4.2 IMAGENET", "text": "We further train and evaluate our model on ILSVRC12(Russakovsky et al. (2015)). ILSVRC12 is a 1000-category dataset with over 1.2 million images in training set and 50 thousand images in validation set. Images from ILSVRC12 also have various resolutions. We used a variant of AlexNet(Krizhevsky et al. (2012)) structure by removing dropout layers and add batch normalization(Ioffe & Szegedy, 2015) for all models in our experiments. The same variant is also used in experiments described in the paper of DoReFa-Net.\nOur ternary model of AlexNet uses full precision weights for the first convolution layer and the last fully-connected layer. Other layer parameters are all quantized to ternary values. We train our model on ImageNet from scratch using an Adam optimizer (Kingma & Ba (2014)). Minibatch size is set to 128. Learning rate starts at 10\u22124 and is scaled by 0.2 at epoch 56 and 64. A L2-normalized weight decay of 5 \u00d7 10\u22126 is used as a regularizer. Images are first resized to 256 \u00d7 256 then randomly cropped to 224\u00d7 224 before input. We report both top 1 and top 5 error rate on validation set. We compare our model to a full precision baseline, 1-32-32 DoReFa-Net and TWN. After around 64 epochs, validation error of our model dropped significantly compared to other low-bit networks as well as the full precision baseline. Finally our model reaches top 1 error rate of 42.5%, while DoReFa-Net gets 46.1% and TWN gets 45.5%. Furthermore, our model still outperforms full precision AlexNet (the batch normalization version, 44.1% according to paper of DoReFa-Net) by 1.6%, and is even better than the best AlexNet results reported (42.8%1). The complete results are listed in Table 2.\nWe draw the process of training in Figure 4, the baseline results of AlexNet are marked with dashed lines. Our ternary model effectively reduces the gap between training and validation performance, which appears to be quite great for DoReFa-Net and TWN. This indicates that adopting trainable W pl and Wnl helps prevent models from overfitting to the training set."}, {"heading": "5 DISCUSSION", "text": "In this section we analyze performance of our model with regard to weight compression and inference speeding up. These two goals are achieved through reducing bit precision and introducing sparsity.\n1https://github.com/BVLC/caffe/wiki/Models-accuracy-on-ImageNet-2012-val\nTable 1\nTable 2 w/o pruning 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Validation Error 0.105744999647141 0.09665999934077260.09309500008821490.0913449995219708 0.09231499992311 0.091499999538064 0.09421999976038930.099015000090003 0.113474999368191 0.150045001879334 Train Error 0.03142703464254740.008692236384376880.007409938820637760.007549929246306420.007867254689335820.009407590329647060.0125876291189343 0.0196611762978137 0.03617928531020880.0824047848582268\nWe also visualize convolution kernels in quantized convolution layers to find that basic patterns of edge/corner detectors are also well learned from scratch even precision is low."}, {"heading": "5.1 SPATIAL AND ENERGY EFFICIENCY", "text": "We save storage for models by 16\u00d7 by using ternary weights. Although switching from a binaryweight network to a ternary-weight network increases bits per weight, it brings sparsity to the weights, which gives potential to skip the computation on zero weights and achieve higher energy efficiency."}, {"heading": "5.1.1 TRADE-OFF BETWEEN SPARSITY AND ACCURACY", "text": "Figure 5 shows the relationship between sparsity and accuracy. As the sparsity of weights grows from 0 (a pure binary-weight network) to 0.5 (a ternary network with 50% zeros), both the training and validation error decrease. Increasing sparsity beyond 50% reduces the model capacity too far, increasing error. Minimum error occurs with sparsity between 30% and 50%.\nWe introduce only one hyper-parameter to reduce search space. This hyper-parameter can be either sparsity, or the threshold t w.r.t the max value in Equation 6. We find that using threshold produces better results. This is because fixing the threshold allows the sparsity of each layer to vary (Figure reffig:weights)."}, {"heading": "5.1.2 SPARSITY AND ENERGY OF ALEXNET", "text": "We further analyze parameters from our AlexNet model. We calculate layer-wise density (complement of sparsity) and approximate energy consumption for each image inference. The dynamic sparsity of activations is unpredictable so we assume dense activations. And we calculate energy according to Han et al. (2016). Despite we use different W pl and W n l for each layer, ternary weights can be pre-computed when fetched from memory, thus multiplications during convolution and inner product process are still saved. As shown in Table 3, compared to Deep Compression, we accelerate inference\nspeed using ternary values and more importantly, we reduce energy consumption of inference by more than 63%, while achieving higher accuracy.\nWe notice that without all quantized layers sharing the same t for Equation 9, our model achieves considerable sparsity in convolution layers where the majority of computations takes place. Therefore we are able to squeeze forward time to less than 30% of full precision networks.\nAs for spatial compression, by substituting 32-bit weights with 2-bit ternary weights, our model is approximately 16\u00d7 smaller than original 32-bit AlexNet."}, {"heading": "5.2 KERNEL VISUALIZATION", "text": "We visualize quantized convolution kernels in Figure 6. The left matrix is kernels from the second convolution layer (5\u00d7 5) and the right one is from the third (3\u00d7 3). We pick first 10 input channels and first 10 output channels to display for each layer. Grey, black and white color represent zero, negative and positive weights respectively.\nWe observe similar filter patterns as full precision AlexNet. Edge and corner detectors of various directions can be found among listed kernels. While these patterns are important for convolution neural networks, the precision of each weight is not. Ternary value filters are capable enough extracting key features after a full precision first convolution layer while saving unnecessary storage.\nFurthermore, we find that there are a number of empty filters (all zeros) or filters with single non-zero value in convolution layers. More aggressive pruning can be applied to prune away these redundant kernels to further compress and speed up our model."}, {"heading": "6 CONCLUSION", "text": "We introduce a novel neural network quantization method that compresses network weights to ternary values. We introduce two trained scaling coefficients W lp and W l n for each layer and train these coefficients using back-propagation. During training, the gradients are back-propagated both to the latent full-resolution weights and to the scaling coefficients. We use layer-wise thresholds that are proportional to the maximum absolute values to quantize the weights. When deploying the ternary network, only the ternary weights and scaling coefficients are needed, which reducing parameter size by at least 16\u00d7. Experiments show that our model reaches or even surpasses the accuracy of full precision models on both CIFAR-10 and ImageNet dataset. On ImageNet we exceed the accuracy of prior ternary networks (TWN) by 3%.\n8"}], "references": [{"title": "Deep speech 2: End-to-end speech recognition in english and mandarin", "author": ["Dario Amodei", "Rishita Anubhai", "Eric Battenberg", "Carl Case", "Jared Casper", "Bryan Catanzaro", "Jingdong Chen", "Mike Chrzanowski", "Adam Coates", "Greg Diamos"], "venue": "arXiv preprint arXiv:1512.02595,", "citeRegEx": "Amodei et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Amodei et al\\.", "year": 2015}, {"title": "Binaryconnect: Training deep neural networks with binary weights during propagations", "author": ["Matthieu Courbariaux", "Yoshua Bengio", "Jean-Pierre David"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Courbariaux et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Courbariaux et al\\.", "year": 2015}, {"title": "Deep compression: Compressing deep neural network with pruning, trained quantization and huffman coding", "author": ["Song Han", "Huizi Mao", "William J Dally"], "venue": "CoRR, abs/1510.00149,", "citeRegEx": "Han et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Han et al\\.", "year": 2015}, {"title": "Eie: efficient inference engine on compressed deep neural network", "author": ["Song Han", "Xingyu Liu", "Huizi Mao", "Jing Pu", "Ardavan Pedram", "Mark A Horowitz", "William J Dally"], "venue": "arXiv preprint arXiv:1602.01528,", "citeRegEx": "Han et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Han et al\\.", "year": 2016}, {"title": "Deep residual learning for image recognition", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": "arXiv preprint arXiv:1512.03385,", "citeRegEx": "He et al\\.,? \\Q2015\\E", "shortCiteRegEx": "He et al\\.", "year": 2015}, {"title": "Identity mappings in deep residual networks", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": "arXiv preprint arXiv:1603.05027,", "citeRegEx": "He et al\\.,? \\Q2016\\E", "shortCiteRegEx": "He et al\\.", "year": 2016}, {"title": "Quantized neural networks: Training neural networks with low precision weights and activations", "author": ["Itay Hubara", "Matthieu Courbariaux", "Daniel Soudry", "Ran El-Yaniv", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1609.07061,", "citeRegEx": "Hubara et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hubara et al\\.", "year": 2016}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["Sergey Ioffe", "Christian Szegedy"], "venue": "arXiv preprint arXiv:1502.03167,", "citeRegEx": "Ioffe and Szegedy.,? \\Q2015\\E", "shortCiteRegEx": "Ioffe and Szegedy.", "year": 2015}, {"title": "Caffe: Convolutional architecture for fast feature embedding", "author": ["Yangqing Jia", "Evan Shelhamer", "Jeff Donahue", "Sergey Karayev", "Jonathan Long", "Ross Girshick", "Sergio Guadarrama", "Trevor Darrell"], "venue": "arXiv preprint arXiv:1408.5093,", "citeRegEx": "Jia et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Jia et al\\.", "year": 2014}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "arXiv preprint arXiv:1412.6980,", "citeRegEx": "Kingma and Ba.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Learning multiple layers of features from tiny images", "author": ["Alex Krizhevsky", "Geoffrey Hinton"], "venue": null, "citeRegEx": "Krizhevsky and Hinton.,? \\Q2009\\E", "shortCiteRegEx": "Krizhevsky and Hinton.", "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E. Hinton"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Ternary weight networks", "author": ["Fengfu Li", "Bin Liu"], "venue": "arXiv preprint arXiv:1605.04711,", "citeRegEx": "Li and Liu.,? \\Q2016\\E", "shortCiteRegEx": "Li and Liu.", "year": 2016}, {"title": "Neural networks with few multiplications", "author": ["Zhouhan Lin", "Matthieu Courbariaux", "Roland Memisevic", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1510.03009,", "citeRegEx": "Lin et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lin et al\\.", "year": 2015}, {"title": "Xnor-net: Imagenet classification using binary convolutional neural networks", "author": ["Mohammad Rastegari", "Vicente Ordonez", "Joseph Redmon", "Ali Farhadi"], "venue": "arXiv preprint arXiv:1603.05279,", "citeRegEx": "Rastegari et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Rastegari et al\\.", "year": 2016}, {"title": "ImageNet Large Scale Visual Recognition Challenge", "author": ["Olga Russakovsky", "Jia Deng", "Hao Su", "Jonathan Krause", "Sanjeev Satheesh", "Sean Ma", "Zhiheng Huang", "Andrej Karpathy", "Aditya Khosla", "Michael Bernstein", "Alexander C. Berg", "Li Fei-Fei"], "venue": "International Journal of Computer Vision (IJCV),", "citeRegEx": "Russakovsky et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Russakovsky et al\\.", "year": 2015}, {"title": "Dorefa-net: Training low bitwidth convolutional neural networks with low bitwidth gradients", "author": ["Shuchang Zhou", "Zekun Ni", "Xinyu Zhou", "He Wen", "Yuxin Wu", "Yuheng Zou"], "venue": "arXiv preprint arXiv:1606.06160,", "citeRegEx": "Zhou et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zhou et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "Halfprecision networks (Amodei et al., 2015) cut sizes of neural networks in half.", "startOffset": 23, "endOffset": 44}, {"referenceID": 14, "context": "XNOR-Net (Rastegari et al., 2016), DoReFa-Net (Zhou et al.", "startOffset": 9, "endOffset": 33}, {"referenceID": 16, "context": ", 2016), DoReFa-Net (Zhou et al., 2016) and network binarization (Courbariaux et al.", "startOffset": 20, "endOffset": 39}, {"referenceID": 13, "context": ", 2016) and network binarization (Courbariaux et al.; 2015; Lin et al., 2015) use aggressively quantized weights, activations and gradients to further reduce computation during training.", "startOffset": 33, "endOffset": 77}, {"referenceID": 0, "context": "Halfprecision networks (Amodei et al., 2015) cut sizes of neural networks in half. XNOR-Net (Rastegari et al., 2016), DoReFa-Net (Zhou et al., 2016) and network binarization (Courbariaux et al.; 2015; Lin et al., 2015) use aggressively quantized weights, activations and gradients to further reduce computation during training. While weight binarization benefits from 32\u00d7 smaller model size, the extreme compression rate comes with a loss of accuracy. Hubara et al. (2016) and Li & Liu (2016) propose ternary weight networks to trade off between model size and accuracy.", "startOffset": 24, "endOffset": 473}, {"referenceID": 0, "context": "Halfprecision networks (Amodei et al., 2015) cut sizes of neural networks in half. XNOR-Net (Rastegari et al., 2016), DoReFa-Net (Zhou et al., 2016) and network binarization (Courbariaux et al.; 2015; Lin et al., 2015) use aggressively quantized weights, activations and gradients to further reduce computation during training. While weight binarization benefits from 32\u00d7 smaller model size, the extreme compression rate comes with a loss of accuracy. Hubara et al. (2016) and Li & Liu (2016) propose ternary weight networks to trade off between model size and accuracy.", "startOffset": 24, "endOffset": 493}, {"referenceID": 13, "context": "1 BINARY NEURAL NETWORK (BNN) Lin et al. (2015) proposed binary and ternary connections to compress neural networks and speed up computation during inference.", "startOffset": 30, "endOffset": 48}, {"referenceID": 16, "context": "2 DOREFA-NET Zhou et al. (2016) proposed DoReFa-Net which quantizes weights, activations and gradients of neural networks using different widths of bits.", "startOffset": 13, "endOffset": 32}, {"referenceID": 15, "context": "We perform our experiments on CIFAR-10 (Krizhevsky & Hinton, 2009) and ImageNet (Russakovsky et al., 2015).", "startOffset": 80, "endOffset": 106}, {"referenceID": 8, "context": "al o, 2015) and Caffe (Jia et al., 2014) frameworks.", "startOffset": 22, "endOffset": 40}, {"referenceID": 4, "context": "ResNet (He et al., 2015) structure is used for our experiments.", "startOffset": 7, "endOffset": 24}, {"referenceID": 5, "context": "We train a a full precision ResNet (He et al., 2016) on CIFAR-10 as the baseline (blue line in Figure 3).", "startOffset": 35, "endOffset": 52}, {"referenceID": 14, "context": "2 IMAGENET We further train and evaluate our model on ILSVRC12(Russakovsky et al. (2015)).", "startOffset": 63, "endOffset": 89}, {"referenceID": 11, "context": "We used a variant of AlexNet(Krizhevsky et al. (2012)) structure by removing dropout layers and add batch normalization(Ioffe & Szegedy, 2015) for all models in our experiments.", "startOffset": 29, "endOffset": 54}, {"referenceID": 11, "context": "We used a variant of AlexNet(Krizhevsky et al. (2012)) structure by removing dropout layers and add batch normalization(Ioffe & Szegedy, 2015) for all models in our experiments. The same variant is also used in experiments described in the paper of DoReFa-Net. Our ternary model of AlexNet uses full precision weights for the first convolution layer and the last fully-connected layer. Other layer parameters are all quantized to ternary values. We train our model on ImageNet from scratch using an Adam optimizer (Kingma & Ba (2014)).", "startOffset": 29, "endOffset": 534}, {"referenceID": 2, "context": "And we calculate energy according to Han et al. (2016). Despite we use different W p l and W n l for each layer, ternary weights can be pre-computed when fetched from memory, thus multiplications during convolution and inner product process are still saved.", "startOffset": 37, "endOffset": 55}], "year": 2016, "abstractText": "Deep neural networks are widely used in machine learning applications. However, the deployment of large neural networks models can be difficult to deploy on mobile devices with limited power budgets. To solve this problem, we propose Trained Ternary Quantization (TTQ), a method that can reduce the precision of weights in neural networks to ternary values. This method has very little accuracy degradation and can even improve the accuracy of some models (32, 44, 56-layer ResNet) on CIFAR-10 and AlexNet on ImageNet. And our AlexNet model is trained from scratch, which means it\u2019s as easy as to train normal full precision model. We highlight our trained quantization method that can learn both ternary values and ternary assignment. During inference, only ternary values (2-bit weights) and scaling factors are needed, therefore our models are nearly 16\u00d7 smaller than fullprecision models. Our ternary models can also be viewed as sparse binary weight networks, which can potentially be accelerated with custom circuit. Experiments on CIFAR-10 show that the ternary models obtained by trained quantization method outperform full-precision models of ResNet-32,44,56 by 0.04%, 0.16%, 0.36%, respectively. On ImageNet, our model outperforms full-precision AlexNet model by 0.3% of Top-1 accuracy and outperforms previous ternary models by 3%.", "creator": "LaTeX with hyperref package"}}}