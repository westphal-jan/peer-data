{"id": "1702.04521", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Feb-2017", "title": "Frustratingly Short Attention Spans in Neural Language Modeling", "abstract": "Recently, various methods have been proposed to augment neural speech models with a differentiable memory attention mechanism. To predict the next token, these models query information from a recent memory, which can facilitate the learning of medium- and long-term dependencies. However, conventional attention mechanisms used in memory-augmented neural speech models generate a single output vector per time step. This vector is used both for predicting the next token and for the key and value of a differentiable memory of a token story. In this paper, we propose a neural language model with a key value attention mechanism that gives separate representations of the key and value of a differentiable memory, as well as for encoding the closest possible word distribution. This model surpasses existing memory-augmented neural language models on two corpora. Nevertheless, we have found that our method is essentially based on a more up-to-date memory based on a much simpler version of the most recent five models.", "histories": [["v1", "Wed, 15 Feb 2017 09:45:23 GMT  (260kb,D)", "http://arxiv.org/abs/1702.04521v1", "Published as a conference paper at ICLR 2017"]], "COMMENTS": "Published as a conference paper at ICLR 2017", "reviews": [], "SUBJECTS": "cs.CL cs.AI cs.LG cs.NE", "authors": ["micha{\\l} daniluk", "tim rockt\\\"aschel", "johannes welbl", "sebastian riedel"], "accepted": true, "id": "1702.04521"}, "pdf": {"name": "1702.04521.pdf", "metadata": {"source": "CRF", "title": "FRUSTRATINGLY SHORT ATTENTION SPANS IN NEURAL LANGUAGE MODELING", "authors": ["Micha\u0142 Daniluk", "Tim Rockt\u00e4schel", "Johannes Welbl", "Sebastian Riedel"], "emails": ["michal.daniluk.15@ucl.ac.uk,", "t.rocktaschel@cs.ucl.ac.uk", "j.welbl@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"], "sections": [{"heading": "1 INTRODUCTION", "text": "At the core of language models (LMs) is their ability to infer the next word given a context. This requires representing context-specific dependencies in a sequence across different time scales. On the one hand, classical N -gram language models capture relevant dependencies between words in short time distances explicitly, but suffer from data sparsity. Neural language models, on the other hand, maintain and update a dense vector representation over a sequence where time dependencies are captured implicitly (Mikolov et al., 2010). A recent extension of neural sequence models are attention mechanisms (Bahdanau et al., 2015), which can capture long-range connections more directly. However, we argue that applying such an attention mechanism directly to neural language models requires output vectors to fulfill several purposes at the same time: they need to (i) encode a distribution for predicting the next token, (ii) serve as a key to compute the attention vector, as well as (iii) encode relevant content to inform future predictions.\nWe hypothesize that such overloaded use of output representations makes training the model difficult and propose a modification to the attention mechanism which separates these functions explicitly, inspired by Miller et al. (2016); Ba et al. (2016); Reed & de Freitas (2015); Gulcehre et al. (2016). Specifically, at every time step our neural language model outputs three vectors. The first is used to encode the next-word distribution, the second serves as key, and the third as value for an attention mechanism. We term the model key-value-predict attention and show that it outperforms existing memory-augmented neural language models on the Children\u2019s Book Test (CBT, Hill et al., 2016) and a new corpus of 7500 Wikipedia articles. However, we observed that this model pays attention mainly to the previous five memories. We thus also experimented with a much simpler model that only uses a concatenation of output vectors from the previous time steps for predicting the next token. This simple model is on par with more sophisticated memory-augmented neural language models. Thus, our main finding is that modeling short attention spans properly works well and provides notable\nar X\niv :1\n70 2.\n04 52\n1v 1\n[ cs\n.C L\n] 1\n5 Fe\nb 20\n17\nimprovements over a neural language model with attention. Conversely, it seems to be notoriously hard to train neural language models to leverage long-range dependencies.\nIn this paper, we investigate various memory-augmented neural language models and compare them against previous architectures. Our contributions are threefold: (i) we propose a key-value attention mechanism that uses specific output representations for querying a sliding-window memory of previous token representations, (ii) we demonstrate that while this new architecture outperforms previous memory-augmented neural language models, it mainly utilizes a memory of the previous five representations, and finally (iii) based on this observation we experiment with a much simpler but effective model that uses the concatenation of three previous output representations to predict the next word."}, {"heading": "2 METHODS", "text": "In the following, we discuss methods for extending neural language models with differentiable memory. We first present a standard attention mechanism for language modeling (\u00a72.1). Subsequently, we introduce two methods for separating the usage of output vectors in the attention mechanism: (i) using a dedicated key and value (\u00a72.2), and (ii) further separating the value into a memory value and a representation that encodes the next-word distribution (\u00a72.3). Finally, we describe a very simple method that concatenates previous output representations for predicting the next token (\u00a72.4)."}, {"heading": "2.1 ATTENTION FOR NEURAL LANGUAGE MODELING", "text": "Augmenting a neural language model with attention (Bahdanau et al., 2015) is straight-forward. We simply take the previous L output vectors as memory Yt = [ht\u2212L \u00b7 \u00b7 \u00b7 ht\u22121] \u2208 Rk\u00d7L where k is the output dimension of a Long Short-Term Memory (LSTM) unit (Hochreiter & Schmidhuber, 1997). This memory could in principle contain all previous output representations, but for practical reasons we only keep a sliding window of the previous L outputs. Let ht \u2208 Rk be the output representation at time step t and 1 \u2208 RL be a vector of ones. The attention weights \u03b1 \u2208 RL are computed from a comparison of the current and previous LSTM outputs. Subsequently, the context vector rt \u2208 Rk is calculated from a sum over previous output vectors weighted by their respective attention value. This can be formulated as\nMt = tanh(W Y Yt + (W hht)1 T ) \u2208 Rk\u00d7L (1)\n\u03b1t = softmax(wTMt) \u2208 R1\u00d7L (2) rt = Yt\u03b1 T \u2208 Rk (3)\nwhereW Y ,W h \u2208 Rk\u00d7k are trainable projection matrices andw \u2208 Rk is a trainable vector. The final representation that encodes the next-word distribution is computed from a non-linear combination of the attention-weighted representation rt of previous outputs and the final output vector ht via\nh\u2217t = tanh(W rrt +W xht) \u2208 Rk (4)\nwhere W r,W x \u2208 Rk\u00d7k are trainable projection matrices. An overview of this architecture is depicted in Figure 1a. Lastly, the probablity distribution yt for the next word is represented by\nyt = softmax(W \u2217h\u2217t + b) \u2208 R|V | (5)\nwhereW \u2217 \u2208 R|V |\u00d7k and b \u2208 R|V | are a trainable projection matrix and bias, respectively."}, {"heading": "2.2 KEY-VALUE ATTENTION", "text": "Inspired by Miller et al. (2016); Ba et al. (2016); Reed & de Freitas (2015); Gulcehre et al. (2016), we introduce a key-value attention model that separates output vectors into keys used for calculating the attention distribution \u03b1t, and a value part used for encoding the next-word distribution and context representation. This model is depicted in Figure 1b. Formally, we rewrite Equations 1-4 as follows:[\nkt vt\n] = ht \u2208 R2k (6)\nMt = tanh(W Y [kt\u2212L \u00b7 \u00b7 \u00b7 kt\u22121] + (W hkt)1T ) \u2208 Rk\u00d7L (7)\n\u03b1t = softmax(wTMt) \u2208 R1\u00d7L (8) rt = [vt\u2212L \u00b7 \u00b7 \u00b7 vt\u22121]\u03b1T \u2208 Rk (9) h\u2217t = tanh(W rrt +W xvt) \u2208 Rk (10)\nIn essence, Equation 7 compares the key at time step t with the previous L keys to calculate the attention distribution \u03b1t which is then used in Equation 9 to obtain a weighted context representation from values associated with these keys."}, {"heading": "2.3 KEY-VALUE-PREDICT ATTENTION", "text": "Even with a key-value separation, a potential problem is that the same representation vt is still used both for encoding the probability distribution of the next word and for retrieval from the memory via the attention later. Thus, we experimented with another extension of this model where we further separate ht into a key, a value and a predict representation where the latter is only used for encoding the next-word distribution (see Figure 1c). To this end, equations 6 and 10 are replaced by[\nkt vt pt\n] = ht \u2208 R3k (11)\nh\u2217t = tanh(W rrt +W xpt) \u2208 Rk (12)\nMore precisely, the output vector ht is divided into three equal parts: key, value and predict. In our implementation we simply split the output vector ht into kt, vt and pt. To this end the hidden dimension of the key-value-predict attention model needs to be a multiplicative of three. Consequently, the dimensions of kt, vt and pt are 100 for a hidden dimension of 300."}, {"heading": "2.4 N -GRAM RECURRENT NEURAL NETWORK", "text": "Neural language models often work best in combination with traditional N -gram models (Mikolov et al., 2011; Chelba et al., 2013; Williams et al., 2015; Ji et al., 2016; Shazeer et al., 2015), since the former excel at generalization while the latter ensure memorization. In addition, from initial experiments with memory-augmented neural language models, we found that usually only the previous five output representations are utilized. This is in line with observations by Tran et al. (2016). Hence, we experiment with a much simpler architecture depicted in Figure 1d. Instead of an attention mechanism, the output representations from the previous N \u2212 1 time steps are directly used to calculate next-word probabilities. Specifically, at every time step we split the LSTM output into N \u2212 1 vectors [h1t , . . . ,hN\u22121t ] and replace Equation 4 with\nh\u2217t = tanh WN  h 1 t ...\nhN\u22121t\u2212N+1\n  \u2208 Rk (13)\nwhere WN \u2208 Rk\u00d7(N\u22121)k is a trainable projection matrix. This model is related to higher-order RNNs (Soltani & Jiang, 2016) with the difference that we do not incorporate output vectors from the previous steps into the hidden state but only use them for predicting the next word. Furthermore, note that at time step t the first part of the output vector h1t will contribute to predicting the next word, the second part h2t will contribute to predicting the second word thereafter, and so on. As the output vectors from the N \u2212 1 previous time-steps are used to score the next word, we call the resulting model an N -gram RNN."}, {"heading": "3 RELATED WORK", "text": "Early attempts of using memory in neural networks have been undertaken by Taylor (1959) and Steinbuch & Piske (1963) by performing nearest-neighbor operations on input vectors and fitting parametric models to the retrieved sets. The dedicated use of external memory in neural architectures has more recently witnessed increased interest. Weston et al. (2015) introduced Memory Networks to explicitly segregate memory storage from the computation of the neural network, and Sukhbaatar et al. (2015) trained this model end-to-end with an attention-based memory addressing mechanism. The Neural Turing Machines by Graves et al. (2014) add an external differentiable memory with read-write functions to a controller recurrent neural network, and has shown promising results in simple sequence tasks such as copying and sorting. These models make use of external memory, whereas our model directly uses a short sequence from the history of tokens to dynamically populate an addressable memory.\nIn sequence modeling, RNNs such as LSTMs (Hochreiter & Schmidhuber, 1997) maintain an internal memory state as they process an input sequence. Attending over previous state outputs on top of an RNN encoder has improved performances in a wide range of tasks, including machine translation (Bahdanau et al., 2015), recognizing textual entailment (Rockta\u0308schel et al., 2016), sentence summarization (Rush et al., 2015), image captioning (Xu et al., 2015) and speech recognition (Chorowski et al., 2015).\nRecently, Cheng et al. (2016) proposed an architecture that modifies the standard LSTM by replacing the memory cell with a memory network (Weston et al., 2015). Another proposal for conditioning on previous output representations are Higher-order Recurrent Neural Networks (HORNNs, Soltani & Jiang, 2016). Soltani & Jiang found it useful to include information from multiple preceding RNN states when computing the next state. This previous work centers around preceding state vectors, whereas we investigate attention mechanisms on top of RNN outputs, i.e. the vectors used for predicting the next word. Furthermore, instead of pooling we use attention vectors to calculate a context representation of previous memories.\nYang et al. (2016) introduced a reference-aware neural language model where at every position a latent variable determines from which source a target token is generated, e.g., by copying entries from a table or referencing entities that were mentioned earlier.\nAnother class of models that include memory into sequence modeling are Recurrent Memory Networks (RMNs) (Tran et al., 2016). Here, a memory block accesses the most recent input words to selectively attend over relevant word representations from a global vocabulary. RMNs use a global memory with two input word vector look-up tables for the attention mechanism, and consequently have a large number of trainable parameters. Instead, we proposed models that need much fewer parameters by producing the vectors that will be attended over in the future, which can be seen as a memory that is dynamically populated by the language model.\nFinally, the functional separation of look-up keys and memory content has been found useful for Memory Networks (Miller et al., 2016), Neural Programmer-Interpreters (Reed & de Freitas, 2015), Dynamic Neural Turing Machines (Gulcehre et al., 2016), and Fast Associative Memory (Ba et al., 2016). We apply and extend this principle to neural language models."}, {"heading": "4 EXPERIMENTS", "text": "We evaluate models on two different corpora for language modeling. The first is a subset of the Wikipedia corpus.1 It consists of 7500 English Wikipedia articles (dump from 6 Feb 2015) belonging to one of the following categories: People, Cities, Countries, Universities, and Novels. We chose these categories as we expect articles in these categories to often contain references to previously mentioned entities. Subsequently, we split this corpus into a train, development, and test part, resulting in corpora of 22.5M words, 1.2M and 1.2M words, respectively. We map all numbers to a dedicated numerical symbol N and restrict the vocabulary to the 77K most frequent words, encompassing 97% of the training vocabulary. All other words are replaced by the UNK symbol. The average length of sentences is 25 tokens. In addition to this Wikipedia corpus, we also run experiments on the Children\u2019s Book Test (CBT Hill et al., 2016). While this corpus is designed for cloze-style question-answering, in this paper we use it to test how well language models can exploit wider linguistic context."}, {"heading": "4.1 TRAINING PROCEDURE", "text": "We use ADAM (Kingma & Ba, 2015) with an initial learning rate of 0.001 and a mini-batch size of 64 for optimization. Furthermore, we apply gradient clipping at a gradient norm of 5 (Pascanu et al., 2013). The bias of the LSTM\u2019s forget gate is initialized to 1 (Jozefowicz et al., 2016), while other parameters are initialized uniformly from the range (\u22120.1, 0.1). Backpropagation Through Time (Rumelhart et al., 1985; Werbos, 1990) was used to train the network with 20 steps of unrolling. We reset the hidden states between articles for the Wikipedia corpus and between stories for CBT, respectively. We take the best configuration based on performance on the validation set and evaluate it on the test set."}, {"heading": "5 RESULTS", "text": "In the first set of experiments we explore how well the proposed models and Tran et al.\u2019s Recurrentmemory Model can make use of histories of varying lengths. Perplexity results for different attention window sizes on the Wikipedia corpus are summarized in Figure 2a. The average attention these models pay to specific positions in the history is illustrated in Figure 3. We observed that although our models attend over tokens further in the past more often than the Recurrent-memory Model, attending over a longer history does not significantly improve the perplexity of any attentive model.\nThe much simpler N -gram RNN model achieves comparable results (Figure 2b) and seems to work best with a history of the previous three output vectors (4-gram RNN). As a result, we choose the 4-gram model for the following N -gram RNN experiments.\n1The wikipedia corpus is available at https://goo.gl/s8cyYa."}, {"heading": "5.1 COMPARISON WITH STATE-OF-THE-ART MODELS", "text": "In the next set of experiments, we compared our proposed models against a variety of state-of-the-art models on the Wikipedia and CBT corpora. Results are shown in Figure 2c and 2d, respectively. Note that the models presented here do not achieve state-of-the-art on CBT as they are language models and not tailored towards cloze-sytle question answering. Thus, we merely use this corpus for comparing different neural language model architectures. We reimplemented the Recurrent-Memory model by Tran et al. (2016) with the temporal matrix and gating composition function (RM+tM-g).\nFurthermore, we reimplemented Higher Order Recurrent Neural Networks (HORNNs) by Soltani & Jiang (2016).\nTo ensure a comparable number of parameters to a vanilla LSTM model, we adjusted the hidden size of all models to have roughly the same total number of model parameters. The attention window size N for the N -gram RNN model was set to 4 according to the best validation set perplexity on the Wikipedia corpus. Below we discuss the results in detail.\nAttention By using a neural language model with an attention mechanism over a dynamically populated memory, we observed a 3.2 points lower perplexity over a vanilla LSTM on Wikipedia, but only notable differences for predicting verbs and prepositions in CBT. This indicates that incorporating mechanisms for querying previous output vectors is useful for neural language modeling.\nKey-Value Decomposing the output vector into a key-value paired memory improves the perplexity by 7.0 points compared to a baseline LSTM, and by 1.9 points compared to the RM(+tM-g) model. Again, for CBT we see only small improvements.\nKey-Value-Predict By further separating the output vector into a key, value and next-word prediction part, we get the lowest perplexity and gain 9.4 points over a baseline LSTM, a 4.3 points compared to RM(+tM-g), and 2.4 points compared to only splitting the output into a key and value. For CBT, we see an accuracy increase of 1.0 percentage points for verbs, and 1.7 for prepositions. As stated earlier, the performance of the Key-Value-Predict model does not improve significantly when increasing the attention window size. This leads to the conclusion that none of the attentive models investigated in this paper can utilize a large memory of previous token representations. Moreover, none of the presented methods differ significantly for predicting common nouns and named entities in CBT.\nN -gram RNN Our main finding is that the simple modification of using output vectors from the previous time steps for the next-word prediction leads to perplexities that are on par with or better than more complicated neural language models with attention. Specifically, the 4-gram RNN achieves only slightly worse perplexities than the Key-Value-Predict architecture."}, {"heading": "6 CONCLUSION", "text": "In this paper, we observed that using an attention mechanism for neural language modeling where we separate output vectors into a key, value and predict part outperform simpler attention mechanisms on a Wikipedia corpus and the Children Book Test (CBT, Hill et al., 2016). However, we found that all attentive neural language models mainly utilize a memory of only the most recent history and fail to exploit long-range dependencies. In fact, a much simpler N -gram RNN model, which only uses a concatenation of output representations from the previous three time steps, is on par with more sophisticated memory-augmented neural language models. Training neural language models that take long-range dependencies into account seems notoriously hard and needs further investigation. Thus, for future work we want to investigate ways to encourage attending over a longer history, for instance by forcing the model to ignore the local context and only allow attention over output representations further behind the local history."}, {"heading": "ACKNOWLEDGMENTS", "text": "This work was supported by Microsoft Research and the Engineering and Physical Sciences Research Council through PhD Scholarship Programmes, an Allen Distinguished Investigator Award, and a Marie Curie Career Integration Award."}], "references": [{"title": "Using fast weights to attend to the recent past", "author": ["Jimmy Ba", "Geoffrey E Hinton", "Volodymyr Mnih", "Joel Z Leibo", "Catalin Ionescu"], "venue": "In NIPS,", "citeRegEx": "Ba et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Ba et al\\.", "year": 2016}, {"title": "Neural machine translation by jointly learning to align and translate", "author": ["Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "In ICLR,", "citeRegEx": "Bahdanau et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Bahdanau et al\\.", "year": 2015}, {"title": "One billion word benchmark for measuring progress in statistical language modeling", "author": ["Ciprian Chelba", "Tomas Mikolov", "Mike Schuster", "Qi Ge", "Thorsten Brants", "Phillipp Koehn", "Tony Robinson"], "venue": "arXiv preprint arXiv:1312.3005,", "citeRegEx": "Chelba et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Chelba et al\\.", "year": 2013}, {"title": "Long short-term memory-networks for machine reading", "author": ["Jianpeng Cheng", "Li Dong", "Mirella Lapata"], "venue": "In EMNLP,", "citeRegEx": "Cheng et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cheng et al\\.", "year": 2016}, {"title": "Attention-based models for speech recognition", "author": ["Jan K Chorowski", "Dzmitry Bahdanau", "Dmitriy Serdyuk", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "In NIPS,", "citeRegEx": "Chorowski et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Chorowski et al\\.", "year": 2015}, {"title": "Attention-over-attention neural networks for reading comprehension", "author": ["Yiming Cui", "Zhipeng Chen", "Si Wei", "Shijin Wang", "Ting Liu", "Guoping Hu"], "venue": "arXiv preprint arXiv:1607.04423,", "citeRegEx": "Cui et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cui et al\\.", "year": 2016}, {"title": "Consensus attention-based neural networks for chinese reading comprehension", "author": ["Yiming Cui", "Ting Liu", "Zhipeng Chen", "Shijin Wang", "Guoping Hu"], "venue": "arXiv preprint arXiv:1607.02250,", "citeRegEx": "Cui et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cui et al\\.", "year": 2016}, {"title": "Gated-attention readers for text comprehension", "author": ["Bhuwan Dhingra", "Hanxiao Liu", "William W Cohen", "Ruslan Salakhutdinov"], "venue": "arXiv preprint arXiv:1606.01549,", "citeRegEx": "Dhingra et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Dhingra et al\\.", "year": 2016}, {"title": "Neural turing machines", "author": ["Alex Graves", "Greg Wayne", "Ivo Danihelka"], "venue": "arXiv preprint arXiv:1410.5401,", "citeRegEx": "Graves et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2014}, {"title": "Dynamic neural turing machine with soft and hard addressing schemes", "author": ["Caglar Gulcehre", "Sarath Chandar", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "arXiv preprint arXiv:1607.00036,", "citeRegEx": "Gulcehre et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Gulcehre et al\\.", "year": 2016}, {"title": "The goldilocks principle: Reading children\u2019s books with explicit memory representations", "author": ["Felix Hill", "Antoine Bordes", "Sumit Chopra", "Jason Weston"], "venue": "In ICLR,", "citeRegEx": "Hill et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Hill et al\\.", "year": 2016}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "Hochreiter and Schmidhuber.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Blackout: Speeding up recurrent neural network language models with very large vocabularies", "author": ["Shihao Ji", "SVN Vishwanathan", "Nadathur Satish", "Michael J Anderson", "Pradeep Dubey"], "venue": "In ICLR,", "citeRegEx": "Ji et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Ji et al\\.", "year": 2016}, {"title": "Exploring the limits of language modeling", "author": ["Rafal Jozefowicz", "Oriol Vinyals", "Mike Schuster", "Noam Shazeer", "Yonghui Wu"], "venue": "arXiv preprint arXiv:1602.02410,", "citeRegEx": "Jozefowicz et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Jozefowicz et al\\.", "year": 2016}, {"title": "Text understanding with the attention sum reader network", "author": ["Rudolf Kadlec", "Martin Schmid", "Ondrej Bajgar", "Jan Kleindienst"], "venue": "In ACL,", "citeRegEx": "Kadlec et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Kadlec et al\\.", "year": 2016}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "In ICLR,", "citeRegEx": "Kingma and Ba.,? \\Q2015\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2015}, {"title": "Recurrent neural network based language model", "author": ["Tomas Mikolov", "Martin Karafi\u00e1t", "Lukas Burget", "Jan Cernock\u1ef3", "Sanjeev Khudanpur"], "venue": "In Interspeech,", "citeRegEx": "Mikolov et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Mikolov et al\\.", "year": 2010}, {"title": "Empirical evaluation and combination of advanced language modeling techniques", "author": ["Tomas Mikolov", "Anoop Deoras", "Stefan Kombrink", "Lukas Burget", "Jan Cernock\u1ef3"], "venue": "In Interspeech,", "citeRegEx": "Mikolov et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Mikolov et al\\.", "year": 2011}, {"title": "Key-value memory networks for directly reading documents", "author": ["Alexander Miller", "Adam Fisch", "Jesse Dodge", "Amir-Hossein Karimi", "Antoine Bordes", "Jason Weston"], "venue": "arXiv preprint arXiv:1606.03126,", "citeRegEx": "Miller et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Miller et al\\.", "year": 2016}, {"title": "On the difficulty of training recurrent neural networks", "author": ["Razvan Pascanu", "Tomas Mikolov", "Yoshua Bengio"], "venue": "In ICML, pp", "citeRegEx": "Pascanu et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Pascanu et al\\.", "year": 2013}, {"title": "Reasoning about entailment with neural attention", "author": ["Tim Rockt\u00e4schel", "Edward Grefenstette", "Karl Moritz Hermann", "Tomas Kocisky", "Phil Blunsom"], "venue": "In ICLR,", "citeRegEx": "Rockt\u00e4schel et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Rockt\u00e4schel et al\\.", "year": 2016}, {"title": "Learning internal representations by error propagation", "author": ["David E Rumelhart", "Geoffrey E Hinton", "Ronald J Williams"], "venue": "Technical report, DTIC Document,", "citeRegEx": "Rumelhart et al\\.,? \\Q1985\\E", "shortCiteRegEx": "Rumelhart et al\\.", "year": 1985}, {"title": "A neural attention model for abstractive sentence summarization", "author": ["Alexander M. Rush", "Sumit Chopra", "Jason Weston"], "venue": "In EMNLP, pp", "citeRegEx": "Rush et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Rush et al\\.", "year": 2015}, {"title": "Sparse non-negative matrix language modeling for skip-grams", "author": ["Noam Shazeer", "Joris Pelemans", "Ciprian Chelba"], "venue": "In Interspeech, pp", "citeRegEx": "Shazeer et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Shazeer et al\\.", "year": 2015}, {"title": "Higher order recurrent neural networks", "author": ["Rohollah Soltani", "Hui Jiang"], "venue": "arXiv preprint arXiv:1605.00064,", "citeRegEx": "Soltani and Jiang.,? \\Q2016\\E", "shortCiteRegEx": "Soltani and Jiang.", "year": 2016}, {"title": "Learning matrices and their applications", "author": ["Karl Steinbuch", "UAW Piske"], "venue": "IEEE Transactions on Electronic Computers,", "citeRegEx": "Steinbuch and Piske.,? \\Q1963\\E", "shortCiteRegEx": "Steinbuch and Piske.", "year": 1963}, {"title": "End-to-end memory networks", "author": ["Sainbayar Sukhbaatar", "Jason Weston", "Rob Fergus"], "venue": "In NIPS, pp. 2440\u20132448,", "citeRegEx": "Sukhbaatar et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Sukhbaatar et al\\.", "year": 2015}, {"title": "Pattern recognition by means of automatic analogue apparatus", "author": ["WK Taylor"], "venue": "Proceedings of the IEE-Part B: Radio and Electronic Engineering,", "citeRegEx": "Taylor.,? \\Q1959\\E", "shortCiteRegEx": "Taylor.", "year": 1959}, {"title": "Recurrent memory networks for language modeling", "author": ["Ke Tran", "Arianna Bisazza", "Christof Monz"], "venue": "In NAACL-HLT,", "citeRegEx": "Tran et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Tran et al\\.", "year": 2016}, {"title": "Natural language comprehension with the epireader", "author": ["Adam Trischler", "Zheng Ye", "Xingdi Yuan", "Kaheer Suleman"], "venue": "arXiv preprint arXiv:1606.02270,", "citeRegEx": "Trischler et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Trischler et al\\.", "year": 2016}, {"title": "Separating answers from queries for neural reading comprehension", "author": ["Dirk Weissenborn"], "venue": "arXiv preprint arXiv:1607.03316,", "citeRegEx": "Weissenborn.,? \\Q2016\\E", "shortCiteRegEx": "Weissenborn.", "year": 2016}, {"title": "Backpropagation through time: what it does and how to do it", "author": ["Paul J Werbos"], "venue": "Proceedings of the IEEE,", "citeRegEx": "Werbos.,? \\Q1990\\E", "shortCiteRegEx": "Werbos.", "year": 1990}, {"title": "Scaling recurrent neural network language models", "author": ["Will Williams", "Niranjani Prasad", "David Mrva", "Tom Ash", "Tony Robinson"], "venue": "In 2015 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "Williams et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Williams et al\\.", "year": 2015}, {"title": "Show, attend and tell: Neural image caption generation with visual attention", "author": ["Kelvin Xu", "Jimmy Ba", "Ryan Kiros", "Kyunghyun Cho", "Aaron Courville", "Ruslan Salakhutdinov", "Richard S Zemel", "Yoshua Bengio"], "venue": "In ICML,", "citeRegEx": "Xu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Xu et al\\.", "year": 2015}, {"title": "Reference-aware language models", "author": ["Zichao Yang", "Phil Blunsom", "Chris Dyer", "Wang Ling"], "venue": "arXiv preprint arXiv:1611.01628,", "citeRegEx": "Yang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Yang et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 16, "context": "Neural language models, on the other hand, maintain and update a dense vector representation over a sequence where time dependencies are captured implicitly (Mikolov et al., 2010).", "startOffset": 157, "endOffset": 179}, {"referenceID": 1, "context": "A recent extension of neural sequence models are attention mechanisms (Bahdanau et al., 2015), which can capture long-range connections more directly.", "startOffset": 70, "endOffset": 93}, {"referenceID": 0, "context": "A recent extension of neural sequence models are attention mechanisms (Bahdanau et al., 2015), which can capture long-range connections more directly. However, we argue that applying such an attention mechanism directly to neural language models requires output vectors to fulfill several purposes at the same time: they need to (i) encode a distribution for predicting the next token, (ii) serve as a key to compute the attention vector, as well as (iii) encode relevant content to inform future predictions. We hypothesize that such overloaded use of output representations makes training the model difficult and propose a modification to the attention mechanism which separates these functions explicitly, inspired by Miller et al. (2016); Ba et al.", "startOffset": 71, "endOffset": 742}, {"referenceID": 0, "context": "(2016); Ba et al. (2016); Reed & de Freitas (2015); Gulcehre et al.", "startOffset": 8, "endOffset": 25}, {"referenceID": 0, "context": "(2016); Ba et al. (2016); Reed & de Freitas (2015); Gulcehre et al.", "startOffset": 8, "endOffset": 51}, {"referenceID": 0, "context": "(2016); Ba et al. (2016); Reed & de Freitas (2015); Gulcehre et al. (2016). Specifically, at every time step our neural language model outputs three vectors.", "startOffset": 8, "endOffset": 75}, {"referenceID": 1, "context": "Augmenting a neural language model with attention (Bahdanau et al., 2015) is straight-forward.", "startOffset": 50, "endOffset": 73}, {"referenceID": 16, "context": "Inspired by Miller et al. (2016); Ba et al.", "startOffset": 12, "endOffset": 33}, {"referenceID": 0, "context": "(2016); Ba et al. (2016); Reed & de Freitas (2015); Gulcehre et al.", "startOffset": 8, "endOffset": 25}, {"referenceID": 0, "context": "(2016); Ba et al. (2016); Reed & de Freitas (2015); Gulcehre et al.", "startOffset": 8, "endOffset": 51}, {"referenceID": 0, "context": "(2016); Ba et al. (2016); Reed & de Freitas (2015); Gulcehre et al. (2016), we introduce a key-value attention model that separates output vectors into keys used for calculating the attention distribution \u03b1t, and a value part used for encoding the next-word distribution and context representation.", "startOffset": 8, "endOffset": 75}, {"referenceID": 17, "context": "Neural language models often work best in combination with traditional N -gram models (Mikolov et al., 2011; Chelba et al., 2013; Williams et al., 2015; Ji et al., 2016; Shazeer et al., 2015), since the former excel at generalization while the latter ensure memorization.", "startOffset": 86, "endOffset": 191}, {"referenceID": 2, "context": "Neural language models often work best in combination with traditional N -gram models (Mikolov et al., 2011; Chelba et al., 2013; Williams et al., 2015; Ji et al., 2016; Shazeer et al., 2015), since the former excel at generalization while the latter ensure memorization.", "startOffset": 86, "endOffset": 191}, {"referenceID": 32, "context": "Neural language models often work best in combination with traditional N -gram models (Mikolov et al., 2011; Chelba et al., 2013; Williams et al., 2015; Ji et al., 2016; Shazeer et al., 2015), since the former excel at generalization while the latter ensure memorization.", "startOffset": 86, "endOffset": 191}, {"referenceID": 12, "context": "Neural language models often work best in combination with traditional N -gram models (Mikolov et al., 2011; Chelba et al., 2013; Williams et al., 2015; Ji et al., 2016; Shazeer et al., 2015), since the former excel at generalization while the latter ensure memorization.", "startOffset": 86, "endOffset": 191}, {"referenceID": 23, "context": "Neural language models often work best in combination with traditional N -gram models (Mikolov et al., 2011; Chelba et al., 2013; Williams et al., 2015; Ji et al., 2016; Shazeer et al., 2015), since the former excel at generalization while the latter ensure memorization.", "startOffset": 86, "endOffset": 191}, {"referenceID": 2, "context": ", 2011; Chelba et al., 2013; Williams et al., 2015; Ji et al., 2016; Shazeer et al., 2015), since the former excel at generalization while the latter ensure memorization. In addition, from initial experiments with memory-augmented neural language models, we found that usually only the previous five output representations are utilized. This is in line with observations by Tran et al. (2016). Hence, we experiment with a much simpler architecture depicted in Figure 1d.", "startOffset": 8, "endOffset": 393}, {"referenceID": 1, "context": "Attending over previous state outputs on top of an RNN encoder has improved performances in a wide range of tasks, including machine translation (Bahdanau et al., 2015), recognizing textual entailment (Rockt\u00e4schel et al.", "startOffset": 145, "endOffset": 168}, {"referenceID": 20, "context": ", 2015), recognizing textual entailment (Rockt\u00e4schel et al., 2016), sentence summarization (Rush et al.", "startOffset": 40, "endOffset": 66}, {"referenceID": 22, "context": ", 2016), sentence summarization (Rush et al., 2015), image captioning (Xu et al.", "startOffset": 32, "endOffset": 51}, {"referenceID": 33, "context": ", 2015), image captioning (Xu et al., 2015) and speech recognition (Chorowski et al.", "startOffset": 26, "endOffset": 43}, {"referenceID": 4, "context": ", 2015) and speech recognition (Chorowski et al., 2015).", "startOffset": 31, "endOffset": 55}, {"referenceID": 20, "context": "Early attempts of using memory in neural networks have been undertaken by Taylor (1959) and Steinbuch & Piske (1963) by performing nearest-neighbor operations on input vectors and fitting parametric models to the retrieved sets.", "startOffset": 74, "endOffset": 88}, {"referenceID": 20, "context": "Early attempts of using memory in neural networks have been undertaken by Taylor (1959) and Steinbuch & Piske (1963) by performing nearest-neighbor operations on input vectors and fitting parametric models to the retrieved sets.", "startOffset": 74, "endOffset": 117}, {"referenceID": 20, "context": "Early attempts of using memory in neural networks have been undertaken by Taylor (1959) and Steinbuch & Piske (1963) by performing nearest-neighbor operations on input vectors and fitting parametric models to the retrieved sets. The dedicated use of external memory in neural architectures has more recently witnessed increased interest. Weston et al. (2015) introduced Memory Networks to explicitly segregate memory storage from the computation of the neural network, and Sukhbaatar et al.", "startOffset": 74, "endOffset": 359}, {"referenceID": 20, "context": "(2015) introduced Memory Networks to explicitly segregate memory storage from the computation of the neural network, and Sukhbaatar et al. (2015) trained this model end-to-end with an attention-based memory addressing mechanism.", "startOffset": 121, "endOffset": 146}, {"referenceID": 5, "context": "The Neural Turing Machines by Graves et al. (2014) add an external differentiable memory with read-write functions to a controller recurrent neural network, and has shown promising results in simple sequence tasks such as copying and sorting.", "startOffset": 30, "endOffset": 51}, {"referenceID": 1, "context": "Attending over previous state outputs on top of an RNN encoder has improved performances in a wide range of tasks, including machine translation (Bahdanau et al., 2015), recognizing textual entailment (Rockt\u00e4schel et al., 2016), sentence summarization (Rush et al., 2015), image captioning (Xu et al., 2015) and speech recognition (Chorowski et al., 2015). Recently, Cheng et al. (2016) proposed an architecture that modifies the standard LSTM by replacing the memory cell with a memory network (Weston et al.", "startOffset": 146, "endOffset": 387}, {"referenceID": 28, "context": "Another class of models that include memory into sequence modeling are Recurrent Memory Networks (RMNs) (Tran et al., 2016).", "startOffset": 104, "endOffset": 123}, {"referenceID": 18, "context": "Finally, the functional separation of look-up keys and memory content has been found useful for Memory Networks (Miller et al., 2016), Neural Programmer-Interpreters (Reed & de Freitas, 2015), Dynamic Neural Turing Machines (Gulcehre et al.", "startOffset": 112, "endOffset": 133}, {"referenceID": 9, "context": ", 2016), Neural Programmer-Interpreters (Reed & de Freitas, 2015), Dynamic Neural Turing Machines (Gulcehre et al., 2016), and Fast Associative Memory (Ba et al.", "startOffset": 98, "endOffset": 121}, {"referenceID": 0, "context": ", 2016), and Fast Associative Memory (Ba et al., 2016).", "startOffset": 37, "endOffset": 54}, {"referenceID": 19, "context": "Furthermore, we apply gradient clipping at a gradient norm of 5 (Pascanu et al., 2013).", "startOffset": 64, "endOffset": 86}, {"referenceID": 13, "context": "The bias of the LSTM\u2019s forget gate is initialized to 1 (Jozefowicz et al., 2016), while other parameters are initialized uniformly from the range (\u22120.", "startOffset": 55, "endOffset": 80}, {"referenceID": 21, "context": "Backpropagation Through Time (Rumelhart et al., 1985; Werbos, 1990) was used to train the network with 20 steps of unrolling.", "startOffset": 29, "endOffset": 67}, {"referenceID": 31, "context": "Backpropagation Through Time (Rumelhart et al., 1985; Werbos, 1990) was used to train the network with 20 steps of unrolling.", "startOffset": 29, "endOffset": 67}, {"referenceID": 28, "context": "Model Attention Window Size 1 5 10 15 RM(+tM-g) (Tran et al., 2016) 83.", "startOffset": 48, "endOffset": 67}, {"referenceID": 28, "context": "1 RM(+tM-g) (Tran et al., 2016) 300 300 15 93.", "startOffset": 12, "endOffset": 31}, {"referenceID": 10, "context": "(d) Results on CBT; those marked with \u2021 are taken from Hill et al. (2016).", "startOffset": 55, "endOffset": 74}, {"referenceID": 14, "context": "703 AS Reader, avg ensemble (Kadlec et al., 2016) 0.", "startOffset": 28, "endOffset": 49}, {"referenceID": 14, "context": "689 \u2212 \u2212 AS Reader, greedy ensemble (Kadlec et al., 2016) 0.", "startOffset": 35, "endOffset": 56}, {"referenceID": 30, "context": "675 \u2212 \u2212 QANN, 4 hops, GloVe (Weissenborn, 2016) 0.", "startOffset": 28, "endOffset": 47}, {"referenceID": 7, "context": "657 \u2212 \u2212 GA Reader, ensemble (Dhingra et al., 2016) 0.", "startOffset": 28, "endOffset": 50}, {"referenceID": 29, "context": "694 \u2212 \u2212 EpiReader, ensemble (Trischler et al., 2016) 0.", "startOffset": 28, "endOffset": 52}, {"referenceID": 28, "context": "774 RM(+tM-g) (Tran et al., 2016) 0.", "startOffset": 14, "endOffset": 33}, {"referenceID": 28, "context": "We reimplemented the Recurrent-Memory model by Tran et al. (2016) with the temporal matrix and gating composition function (RM+tM-g).", "startOffset": 47, "endOffset": 66}], "year": 2017, "abstractText": "Neural language models predict the next token using a latent representation of the immediate token history. Recently, various methods for augmenting neural language models with an attention mechanism over a differentiable memory have been proposed. For predicting the next token, these models query information from a memory of the recent history which can facilitate learning midand long-range dependencies. However, conventional attention mechanisms used in memoryaugmented neural language models produce a single output vector per time step. This vector is used both for predicting the next token as well as for the key and value of a differentiable memory of a token history. In this paper, we propose a neural language model with a key-value attention mechanism that outputs separate representations for the key and value of a differentiable memory, as well as for encoding the next-word distribution. This model outperforms existing memoryaugmented neural language models on two corpora. Yet, we found that our method mainly utilizes a memory of the five most recent output representations. This led to the unexpected main finding that a much simpler model based only on the concatenation of recent output representations from previous time steps is on par with more sophisticated memory-augmented neural language models.", "creator": "LaTeX with hyperref package"}}}