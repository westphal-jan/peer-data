{"id": "1704.06215", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Apr-2017", "title": "On Singleton Arc Consistency for Natural CSPs Defined by Forbidden Patterns", "abstract": "Singleton arc consistency is an important type of local consistency that has recently been shown to solve all constraint satisfaction problems (CSPs) over constraint languages of limited width. We aim to characterize all classes of CSPs defined by a forbidden pattern solved by singleton arc consistency and closed by removing constraints. We identify five new patterns whose absence ensures solvability by singleton arc consistency, four of which are demonstrably maximum and three generalize 2-SAT. Combined with simple counterexamples of other patterns, we are making significant progress toward full classification.", "histories": [["v1", "Thu, 20 Apr 2017 16:29:21 GMT  (30kb)", "https://arxiv.org/abs/1704.06215v1", null], ["v2", "Fri, 21 Apr 2017 20:10:25 GMT  (31kb)", "http://arxiv.org/abs/1704.06215v2", "v2: improved presentation"]], "reviews": [], "SUBJECTS": "cs.CC cs.AI cs.DM", "authors": ["clement carbonnel", "david a cohen", "martin c cooper", "stanislav zivny"], "accepted": false, "id": "1704.06215"}, "pdf": {"name": "1704.06215.pdf", "metadata": {"source": "CRF", "title": "On Singleton Arc Consistency for Natural CSPs Defined by Forbidden Patterns", "authors": ["Cl\u00e9ment Carbonnel"], "emails": ["clement.carbonnel@cs.ox.ac.uk", "d.cohen@rhul.ac.uk", "cooper@irit.fr", "standa.zivny@cs.ox.ac.uk"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 4.\n06 21\n5v 2\n[ cs\n.C C\n] 2"}, {"heading": "1 Introduction", "text": "The constraint satisfaction problem (CSP) is a declarative paradigm for expressing computational problems. An instance of the CSP consists of a number of variables to which we need to assign values from some domain. Some subsets of the variables are constrained in that they are not permitted to take all values in the product of their domains. We call the variables whose values are limited by a constraint its scope, and the allowed assignments to that scope the constraint relation. A solution to a CSP instance is an assignment of values to every variable in such a way that every constraint is satisfied.\nThe CSP has proved to be a useful technique for modelling in many important application areas from manufacturing to process optimisation, for example planning and scheduling optimisation [28], resource allocation [25], job shop problems [9] and workflow management [29]. Hence much work has been done on describing useful classes of constraints [2] and implementing efficient algorithms for processing constraints [5]. Many constraint solvers use a form of backtracking where successive variables are assigned values that satisfy all constraints. In order to mitigate the exponential complexity of backtracking some form of pre-processing is\n\u2217The authors were supported by EPSRC grant EP/L021226/1. Stanislav Z\u030civny\u0301 was supported by a Royal Society University Research Fellowship. This project has received funding from the European Research Council (ERC) under the European Union\u2019s Horizon 2020 research and innovation programme (grant agreement No 714532). The paper reflects only the authors\u2019 views and not the views of the ERC or the European Commission. The European Union is not liable for any use that may be made of the information contained therein.\nalways performed. These pre-processing techniques identify values, or sets of values, that cannot be part of any solution in an effective way and then propagate the effects of removing these values throughout the problem instance. Of key importance amongst these pre-processing algorithms are the relatives of arc consistency propagation including generalised arc consistency (GAC) and singleton arc consistency (SAC), which only remove values from the domains of variables and so are most natural to apply in a backtracking solver. Surprisingly there are large classes of the CSP for which GAC or SAC are decision procedures: after establishing consistency if every variable still has a non-empty domain then the instance has a solution.\nMore generally we wish to identify tractable sub-problems of the CSP: those for which a polynomial time algorithm can be shown to exist. Perhaps the most natural ways to restrict the CSP is to limit the constraint relations that we allow or to limit the structure of (hypergraph of) interactions of the constraint scopes. A set of allowed constraint relations is called a constraint language. A subset of the CSP defined by limiting the scope interactions is called a structural class. Both limitations are natural in the sense that we can relax (remove constraints from) any CSP instance without affecting its membership of such a class.\nThere has been considerable success in identifying the tractable constraint languages in recent years. Techniques from universal algebra have been essential in this work: the complexity of a constraint language is characterised by a particular algebraic structure [7]. Surprisingly there are only two known reasons for tractability, bounded width [1] and (generalisations of) Maltsev [6, 23], leading to two possible algorithms for solving any CSP defined over a tractable language. All bounded width [1, 8] language problems are decided by establishing singleton arc consistency [24].\nA necessary condition for the tractability of a structural class with bounded arity is that it has bounded generalised hypertree width [21]. In all such cases we decide an instance by performing k-wise joins (which is polynomial time complexity) and then establishing pairwise relational consistency. This process is equivalent to establishing arc consistency in the so called dual representation [18].\nSince our understanding of the tractability landscape for languages [1] and structural [22, 26] classes is so well advanced there is now much interest in so called hybrid tractable classes. These are tractable CSP problems that are not definable either by restricting the language nor by limiting the structure. Following the considerable success of mapping the complexity hierarchy for graph problems by forbidding either induced subgraphs or graph minors we are now applying the same mechanisms to the CSP. We define new natural CSP problems by forbidding the occurrence of certain patterns as a substructure [11]. This technique has allowed for the identification of interesting cases of practical significance: for example, a precise characterisation of patterns which allow for the elimination of variables before backtracking has been obtained [10]. This is a clear advance on using consistency techniques alone.\nIt is therefore natural to ask for which patterns, forbidding their occurrence in an instance ensures that singleton arc consistency is a decision procedure. In this paper we make a significant contribution towards this objective by identifying novel CSP problems for which SAC is a decision procedure. The structure of the paper is as follows. In Section 2 we provide essential definitions and background theory. In Section 3 we state the main results that we will prove in this paper. Of particular interest is that we can limit the possible structure of candidate patterns. The following sections give proofs of the complexity results for the novel classes that we are presenting. In the appendix we discuss some negative results and in Section 10 give directions for future research on undecided patterns."}, {"heading": "2 Preliminaries", "text": "CSP A binary CSP instance is a triple I = (X,D,C), where X is a finite set of variables, D is a finite domain, each variable x \u2208 X has its own domain of possible values D(x) \u2286 D, and C = {R(x, y) | x, y \u2208 X}, where R(x, y) \u2286 D2, is the set of constraints. Notice that we assume, without loss of generality, that each pair of variables x, y \u2208 X is constrained by a constraint relation R(x, y). (Otherwise we add the trivial constraint R(x, y) = D(x)\u00d7D(y).) Without loss of generality, we also assume that (a, b) \u2208 R(x, y) if and only if (b, a) \u2208 R(y, x). A constraint is trivial (or complete) if it contains the Cartesian product of the domains of the two variables. The projection I[X \u2032] of a binary CSP instance I on X \u2032 \u2286 X is obtained by removing all variables in X\\X \u2032 and all constraints R(x, y) with {x, y} 6\u2286 X \u2032. A partial solution to a binary CSP instance on X \u2032 \u2286 X is an assignment s of values to variables in X \u2032 such that s(x) \u2208 D(x) for all x \u2208 X \u2032 and (s(x), s(y)) \u2208 R(x, y) for all constraints R(x, y) with x, y \u2208 X \u2032. A solution to a binary CSP instance is a partial solution on X.\nAn assignment (x, a) is called a point. If (a, b) \u2208 R(x, y), we say that the assignments (x, a), (y, b) (or more simply a, b) are compatible and that ab is a positive edge, otherwise a, b are incompatible and ab is a negative edge. For simplicity of notation we can assume that variable domains are disjoint, so that using a as a shorthand for (x, a) is unambiguous. We say that a \u2208 D(x) has a support at variable y if \u2203b \u2208 D(y) such that ab is a positive edge.\nThe constraint graph of a CSP instance with variables X is the graph G = (X,E) such that (x, y) \u2208 E if R(x, y) is non-trivial. The degree of a variable x in a CSP instance is the degree of x in the constraint graph of the instance.\nArc Consistency A domain value a \u2208 D(x) is arc consistent if it has a support at every other variable. A CSP instance is arc consistent (AC) if every domain value is arc consistent.\nSingleton Arc Consistency Singleton arc consistency is a notion stronger than arc consistency (but weaker than strong path consistency [27]). A domain value a \u2208 D(x) in a CSP instance I is singleton arc consistent if the instance obtained from I by removing all domain values b \u2208 D(x) with a 6= b can be made arc consistent without emptying any domain. A CSP instance is singleton arc consistent (SAC) if every domain value is singleton arc consistent.\nEstablishing Consistency Domain values that are not arc consistent or not singleton arc consistent cannot be part of a solution so can safely be removed. For a binary CSP instance with maximum domain size d, n variables and e non-trivial constraints there are optimal O(ed2) algorithms for establishing arc consistency [4] and O(ned3) algorithms for establishing singleton arc consistency [3]. These algorithms repeatedly remove inconsistent values from domains.\nSAC is a decision procedure for a CSP instance if, after establishing singleton arc consistency, non-empty domains for all variables guarantee the existence of a solution. SAC is a decision procedure for a class of CSP instances if SAC is a decision procedure for every instance from the class.\nNeighbourhood Substitutability If a, b \u2208 D(x), then a is neighbourhood substitutable by b if there is no c such that ac is a positive edge and bc a negative edge: such values a can be deleted from D(x) without changing the satisfiability of the instance since a can be\nreplaced by b in any solution [20]. Similarly, removing neighbourhood substitutable values cannot destroy (singleton) arc consistency.\nPatterns In a binary CSP instance each constraint decides, for each pair of values in D, whether it is allowed. Hence a binary CSP can also be defined as a set of pointsX\u00d7D together with a compatibility function that maps each edge, ((x, a), (y, b)) with x 6= y, into the set {negative,positive}. A pattern extends the notion of a binary CSP instance by allowing the compatibility function to be partial. A pattern P occurs (as a subpattern) in an instance I if there is mapping from the points of P to the points of I which respects variables (two points are mapped to points of the same variable in I if and only if they belong to the same variable in P ) and maps negative edges to negative edges, and positive edges to positive edges.\nPoints (x, a) and (x, b) in a pattern are mergeable if there is no point (y, c) such that ac is positive and bc is negative or vice versa. For each pattern there is an equivalent (set of) pattern(s) without mergeable points which occur in the same set of instances.\nA point (x, a) in a pattern is called dangling if there is at most one b such that ab is a positive edge and no c such that ac is a negative edge. Dangling points are redundant when considering the occurrence of a pattern in an arc consistent CSP instance.\nA pattern is called irreducible if it has no dangling points and no mergeable points [14]. In arc consistent CSP instances it is enough to consider the occurrence of irreducible patterns.\nWe use the notation CSP(P ) for the set of binary instances in which P does not occur as a subpattern. A pattern P is called SAC-solvable if SAC is a decision procedure for CSP(P ). It is worth observing that CSP(P ) is closed under the operation of establishing (singleton) arc consistency. A pattern P is called tractable if every instance from CSP(P ) can be solved in polynomial time."}, {"heading": "3 Results", "text": "Call a class C of CSP instances natural if deleting any constraint from an instance I \u2208 C produces another instance in C. For example, language classes and bounded treewidth classes are natural. An interesting research direction is to study those natural classes defined by a forbidden pattern which are solved by singleton arc consistency, both in order to uncover new tractable classes and to better understand the strength of SAC.\nWe call a pattern natural if when forbidden it defines a natural class. Natural patterns can easily be seen to correspond to exactly those patterns in which positive edges only occur in constraints which have at least one negative edge.\nConsider the natural patterns Q1 and Q2 shown in Figure 1, patterns R5, R8 shown in Figure 2, and pattern R7- shown in Figure 3.\nTheorem (Main). The patterns Q1, Q2, R5, R8, and R7- are SAC-solvable.\nNote that these patterns do not occur in instances with three or fewer variables and hence are not solved by arc consistency alone (the instance with three Boolean variables and a triangle of inequality constraints is arc consistent but has not solution). The SAC-solvability of these patterns will be proved in the following sections. In order to prove the SAC-solvability of Q1, R8 and R7- we use the same idea of following the trace of arc consistency and argue that the resulting instance is not too complicated. While the same idea is behind the proofs of all three patterns, the technical details are different in each case.\nIn the remaining two cases we identify an operation that preserves SAC and satisfiability, does not introduce the pattern and after repeated application necessarily produces an equivalent instance which is solved by SAC. In the case of R5, the operation is simply removing any constraint. The resulting instance is trivial, and in particular solved by SAC. In the case of Q2, the operation is BTP-merging [13]. The resulting instance has the property that a particular pattern, which we call V\u2212, only occurs at degree-2 variables. We prove that such instances are indeed solved by SAC.\nRemark 1. Proposition 2 in Appendix A tells us that any natural irreducible pattern solvable by SAC must occur in at least one of the patterns shown in Figures 1 and 2. By this analysis, we have managed to reduce the number of remaining cases to a handful. Our main result shows that some of these are SAC-solvable. In particular, the patterns Q1, Q2, R5, and R8 are maximal in the sense that adding anything to them would give a pattern that is either non-natural or not solved by SAC.\nRemark 2. We point out that certain interesting forbidden patterns, such as BTP [15], NegTrans [16], and EMC [17] are not natural. On the other hand, the patterns T1, . . . ,T5 shown in Figure 4 are natural. Patterns T1, . . . ,T5 were identified in [14] as the maximal 2-constraint irreducible tractable patterns. We show in Appendix A that T1 is not solved by SAC. Our main result implies (since the pattern R8 contains T4 and T5) that both T4 and T5 are solved by SAC. It can easily be shown, from an earlier known result [14, Lemma 25], that T2 is solved by SAC, and we provide in Appendix B a simple proof that T3 is solved by SAC as well. Hence, we have characterised all 2-constraint irreducible patterns solvable by SAC.\nRemark 3. Observe that Q1 does not occur in any binary CSP instance in which all degree 3 or more variables are Boolean. This shows that Q1 defines a tractable class which is a strict generalisation of 2-SAT. This class is incomparable with language-based generalisations of 2-SAT, such as the class ZOA [12], since in CSP(Q1) degree-2 variables can be constrained by arbitrary constraints. Indeed, instances in CSP(Q1) can have an arbitrary constraint on the pair of variables x, y, where x is of arbitrary degree and of arbitrary domain size if for all variables z /\u2208 {x, y}, the constraint on the pair of variables x, z is of the form (x \u2208 S)\u2228(z \u2208 Tz) where S is fixed (i.e. independent of z) but Tz is arbitrary. R8 and R7- generalise T4 and CSP(T4) generalises ZOA [14], so CSP(R8) and CSP(R7-) are strict generalisations of ZOA."}, {"heading": "4 Tractability of Q2", "text": "Consider the pattern V\u2212 shown in Figure 5(b). We say that V\u2212 occurs at point a or at variable x if a \u2208 D(x) is the central point of the pattern in the instance. The pattern V\u2212 is known to be tractable since all instances in CSP(V\u2212) satisfy the joint-winner property [16]. However, we show a slightly different result, namely that singleton arc consistency is sufficient to solve instances in which V\u2212 only occurs at degree-2 variables.\nLemma 1. Instances in which V\u2212 only occurs at degree-2 variables are solved by singleton arc consistency.\nProof. Singleton arc consistency only eliminates values from domains and thus cannot increase the degree of a variable nor introduce the pattern V\u2212. Hence, singleton arc consistency cannot lead to the occurrence of the pattern V\u2212 at a variable of degree greater than two. Therefore it is sufficient to show that any SAC instance I in which V\u2212 only occurs at degree-2 variables is satisfiable.\nWe will show that it is always possible to find an independent partial solution, i.e. an assignment to a non-empty subset of the variables of I which is compatible with all possible assignments to the other variables. A solution can be found by repeatedly finding independent partial solutions. If I has only degree-2 variables, then it is folklore (and easy to show) that singleton arc consistency implies satisfiability. So we only need to consider the case in which I has at least one variable x1 of degree greater than or equal to three. Choose an arbitrary value a1 \u2208 D(x1). If this assignment is compatible with all assignments to all other variables, then this is the required independent partial solution, so suppose that there is a negative edge a1b where b \u2208 D(x2) for some variable x2. By assumption, since x1 has degree greater than or equal to three, the pattern V\u2212 does not occur at x1 and hence the assignment (x1, a1) is compatible with all assignments to all variables other than x1, x2.\nNow suppose that we have a partial assignment (x1, a1), . . . , (xk, ak), as shown in Figure 6, such that\n1. for i = 1, . . . , k, ai \u2208 D(xi),\n2. for i = 1, . . . , k \u2212 1, \u2203b \u2208 D(xi+1) such that aib is a negative edge.\n3. for i = 1, . . . , k \u2212 1, aiai+1 is a positive edge,\nThe assignments (xi, ai) (i = 1, . . . , k) are all compatible with each other, otherwise the pattern V\u2212 would occur at a variable of degree three or greater, as illustrated in Figure 6. Furthermore, for the same reason, the assignments (xi, ai) (i = 1, . . . , k\u22121) are all compatible with all possible assignments to all variables other than x1, . . . , xk. It only remains to consider the compatibility of ak with the assignments to variables other than x1, . . . , xk.\nIf the assignment (xk, ak) is compatible with all assignments to all variables other than x1, . . . , xk, then we have an independent partial solution to x1, . . . , xk. On the other hand, if for some xk+1 /\u2208 {x1, . . . , xk}, \u2203b \u2208 D(xk+1) such that akb is a negative edge, then by (singleton) arc consistency \u2203ak+1 \u2208 D(xk+1) such that akak+1 is a positive edge and we have a larger partial assignment with the above three properties. Therefore, we can always add another assignment until the resulting partial assignment is an independent partial solution (or we have assigned all variables).\nA reduction operation that cannot introduce Q2 Two values a, b \u2208 D(x) are BTPmergeable [13] if there are not two other distinct variables y, z 6= x such that \u2203c \u2208 D(y), \u2203d \u2208 D(z) with ad, bc, cd positive edges and ac, bd negative edges as shown in Figure 7. The BTP-merging operation consists in merging two points a, b \u2208 D(x) which are BTP-mergeable: the points a, b are replaced by a new point c in D(x) such that for all other variables w 6= x and for all d \u2208 D(w), cd is a positive edge if at least one of ad, bd was a positive edge (a negative edge otherwise). It is known that BTP-merging preserves satisfiability [13].\nLemma 2. Let P be a pattern in which no point occurs in more than one positive edge. Then a BTP-merging operation cannot introduce the pattern P in an instance I \u2208 CSP(P).\nProof. Suppose that the pattern P occurs in an instance I \u2032 obtained by BTP-merging of two points a, b in I to create a new point c in I \u2032. From the assumptions about P , we know that c belongs to any number of negative edges ce1, . . . , cer, but at most one positive edge cd in\nthe occurrence of P in I \u2032. By the definition of merging, in I one of ad, bd must have been a positive edge and all of ae1, . . . , aer and be1, . . . , ber must have been negative. Without loss of generality, suppose that ad was a positive edge. But then the pattern P occurred in I (on a instead of c) which is a contradiction.\nSince Q2 has no point which occurs in more than one positive edge, we can deduce from Lemma 2 that Q2 cannot be introduced by BTP-merging.\nTheorem 1. CSP(Q2) is solved by singleton arc consistency.\nProof. Let I \u2208 CSP(Q2). Since establishing single arc consistency cannot introduce patterns, and hence in particular cannot introduce Q2, we can assume that I is SAC. Let I \u2032 be the result of applying BTP-merging operations to I until convergence. By Lemma 2, we know that I \u2032 \u2208 CSP(Q2). Furthermore, since BTP-merging only weakens constraints (in the sense that the new value c is constrained less than either of the values a, b it replaces), it cannot destroy singleton arc consistency; hence I \u2032 is SAC. By Lemma 1, it suffices to show that V\u2212 cannot occur in I \u2032 at variables of degree three or greater. Consider an arbitrary point a \u2208 D(x) at a variable x which is of degree three or greater. We will show that V\u2212 cannot occur at a, which will complete the proof. If a belongs to no negative edge then clearly V\u2212 cannot occur at a. The existence of a negative edge and the (singleton) arc consistency of I implies that there there is some other value b \u2208 D(x). Since a, b cannot be BTP-merged, there must be other variables y, z and values c \u2208 D(y), d \u2208 D(z) with ad, bc, cd positive edges and ac, bd negative edges, as shown in Figure 7(b). Now since Q2 does not occur in I, we can deduce that a and b are connected by positive edges to all points in D(v) for v /\u2208 {x, y, z}. Since x is of degree three or greater, there must therefore be another point e \u2208 D(x)\\{a, b} and a negative edge ef where f \u2208 D(w) for some w /\u2208 {x, y, z} (as shown in Figure 7(b)). By applying the same argument as above, knowing that a, e cannot be BTP-merged, we can deduce that a and e are connected by positive edges to all points in D(v) for v /\u2208 {x, y, w}. Hence, a can only be connected by negative edges to points in D(y). It follows that the pattern V\u2212 cannot occur at a, which completes the proof."}, {"heading": "5 Tractability of R5", "text": "Constraint elimination In this section we consider the operation of binary constraint elimination: the elimination of the constraint on variables x, y consists in replacing the binary relation R(x, y) by the complete relation D(x)\u00d7D(y) (or equivalently replacing all negative edges between D(x) and D(y) by positive edges). Constraint elimination cannot destroy singleton arc consistency since no form of consistency can be destroyed by an operation, such as constraint elimination, which weakens the instance. Observe that R5 cannot be introduced by constraint elimination since it has positive edges only in constraints in which there is also a negative edge.\nWe will need the following lemma to show that R5 is solved by SAC.\nLemma 3. If the pattern R5, shown in Figure 8, does not occur in a SAC binary CSP instance I, then constraint elimination of any constraint leaves the satisfiability of I invariant.\nProof. Suppose that the pattern R5 does not occur in the instance I and that I is singleton arc consistent. Let I \u2032 be the instance which results when we eliminate the constraint between an arbitrary pair of variables x and y. Suppose that s is a solution to I \u2032. It suffices to exhibit a solution to I. We use s[z] to denote the value assigned to variable z in s. Let a = s[x] and b = s[y]. If ab is a positive edge in I than s is also a solution to I, so we assume that ab is a negative edge.\nBy (singleton) arc consistency, \u2203c \u2208 D(x) such that bc is a positive edge. Either we can replace a in s by c to produce a solution to I, or there is some variable w /\u2208 {x, y} such that ce is a negative edge where e = s[w]. By singleton arc consistency, \u2203d \u2208 D(y), \u2203g \u2208 D(w) such that ad, ag and dg are positive edges. Consider any variable z /\u2208 {x, y, w}. We have the situation in I shown in Figure 9(a) where f = s[z]. The positive edges ae and bf follow from the fact that s is a solution to I \u2032. Now, since R5 does not occur in I, we can deduce that df is a positive edge. Recall that the variable z was any variable other than x, y or w.\nSince d \u2208 D(y) is compatible with a = s[x], we have just shown that d can only be incompatible with s[z] when z = w. Thus, either we can replace b by d to produce a solution to I, or de is a negative edge. In this latter case, consider any variable z /\u2208 {x, y, w} and again denote s[z] by f . We have the situation in I shown in Figure 9(b). The positive edges be and ef follow from the fact that s is a solution to I \u2032. Since the pattern R5 does not occur\nin I, we can deduce that gf is a positive edge. But then we can replace b by d and e by g in s to produce a solution to I.\nTheorem 2. CSP(R5) is solved by singleton arc consistency.\nProof. Establishing singleton arc consistency preserves satisfiability and cannot introduce any pattern and, hence in particular, cannot introduce R5. Consider a SAC instance I \u2208 CSP(R5) which has non-empty domains. By Lemma 3, we can eliminate any constraint. The resulting instance is still SAC. Furthermore, R5 has not been introduced since R5 is natural. Therefore, we can keep on eliminating constraints until all constraints have been eliminated. The resulting instance is trivially satisfiable and hence so was the original instance I. It follows that singleton arc consistency decides all instances in CSP(R5).\nAn interesting open question is which (natural) patterns allow us to eliminate some constraint without changing the satisfiability of the instance. For example, if the pattern shown in Figure 10 does not occur on variable x in a SAC instance then for any variable y, the constraint on x, y can be eliminated. The proof is practically identical to the proof for R5. Unfortunately, this is not a natural pattern, so eliminating a constraint may actually introduce the pattern and it is unlikely that we can use this to define a tractable class."}, {"heading": "6 Notation for the Trace Technique", "text": "Given a singleton arc consistent instance I, a variable x and a value v \u2208 D(x), we denote by Ixv the instance obtained by assigning x to v (that is, setting D(x) = {v}) and enforcing arc consistency. To avoid confusion with the original domains, we will use Dxv(x) to denote the domain of the variable x in Ixv. For our proofs we will assume that arc consistency has been enforced using a straightforward algorithm that examines the constraints one at a time and removes the points that do not have a support until a fixed point is reached. We will be interested in the trace of this algorithm, given as a chain of propagations:\n(Pxv) : (x \u2192 y0), (x1 \u2192 y1), (x2 \u2192 y2), . . . , (xp \u2192 yp)\nwhere xi \u2192 yi means that the algorithm has inferred a change in the domain of yi when examining the constraint R(xi, yi). We define a function \u03c1 : (Pxv) 7\u2192 D that maps each (xi \u2192 yi) \u2208 (Pxv) to the set of values that were removed from Dxv(yi) at this step. Without loss of generality, we assume that the steps (xi \u2192 yi) such that the pruning of \u03c1(xi \u2192 yi) from Dxv(yi) does not incur further propagation are performed last.\nWe denote by S(Pxv) the set of variables that appear in (Pxv). Because I was (singleton) arc consistent before x was assigned, we have S(Pxv) = {x} \u222a {yi | i \u2265 0}. We rename the elements of S(Pxv) as {pi | i \u2265 0} where the index i denotes the order of first appearance in (Pxv). Finally, we use S I (Pxv) to denote the set of inner variables, that is, the set of all variables pj \u2208 S(Pxv) for which there exists pr \u2208 S(Pxv) such that (pj \u2192 pr) \u2208 (Pxv)."}, {"heading": "7 Tractability of Q1", "text": "Consider the pattern Q1 shown in Figure 11. Let I \u2208 CSP(Q1) be a singleton arc consistent instance, x be any variable and v be any value in the domain of x. Our proof of the SACdecidability of CSP(Q1) uses the trace of the arc consistency algorithm to determine a subset of variables in the vicinity of x such that (i) the projection of Ixv to this particular subset is satisfiable, (ii) those variables do not interact too much with the rest of the instance and (iii) the projections of Ixv and I on the remaining variables are almost the same. We then use these three properties to show that the satisfiability of I is equivalent to that of an instance with fewer variables, and we repeat the operation until the smaller instance is trivially satisfiable.\nThe following lemma describes the particular structure of Ixv around the variables whose domain has been reduced by arc consistency.\nLemma 4. Consider the instance Ixv. Every variable pi \u2208 S I (Pxv) is in the scope of at most two non-trivial constraints, which must be of the form R(pj, pi) and R(pi, pr) with j < i, (pj \u2192 pi) \u2208 (Pxv) and (pi \u2192 pr) \u2208 (Pxv).\nProof. The claim is true for p0 = x as every constraint incident to x is complete. Otherwise, let pi \u2208 S\nI (Pxv) be such that pi 6= x. Let pj , j < i be such that (pj \u2192 pi) occurs first in\n(Pxv). Because pi \u2208 S I (Pxv) and we assumed that the arc consistency algorithm performs the pruning that do not incur further propagation last, we know that there exists ci \u2208 \u03c1(pj \u2192 pi)\nand pr \u2208 S(Pxv) with (pi \u2192 pr) \u2208 (Pxv) such that the pruning of ci from Dxv(pi) allows the pruning of some ar \u2208 \u03c1(pi \u2192 pr) from the domain of pr. It follows that (ci, ar) \u2208 R(pi, pr), (vi, ar) /\u2208 R(pi, pr) for any vi \u2208 Dxv(pi) and (vj , ci) /\u2208 R(pj, pi) for any vj \u2208 Dxv(pj). Moreover, ar was a support for ci at pr when ci was pruned so we know that pj 6= pr.\nFor the sake of contradiction, let us assume that there exists a constraint R(pi, l) with l /\u2208 {pj , pr} that is not complete. In particular, there exist ai, bi \u2208 Dxv(pi) and al \u2208 Dxv(l) such that (ai, al) \u2208 R(pi, l) but (bi, al) /\u2208 R(pi, l). Furthermore, ar was removed by arc consistency when inspecting the constraint R(pi, pr) so (ai, ar) /\u2208 R(pi, pr). Ixv is arc consistent so there exists some aj \u2208 Dxv(pj) such that (aj , bi) \u2208 R(pj, pi), and since ci \u2208 \u03c1(pj \u2192 pi) we have (aj , ci) /\u2208 R(pj, pi). At this point we have reached the desired contradiction as Q1 occurs on (pi, pj, pr, l) with pi being the middle variable.\n\u2022 aj \u271b \u271a \u2718 \u2719\npj\n\u2022 ar \u271b \u271a \u2718 \u2719\npr\n\u2022 al \u271b \u271a \u2718 \u2719\nl \u2022 bi \u2022 ai \u2022 ci\n\u271b\n\u271a\n\u2718\n\u2719 pi\n\u2745 \u2745 \u2745 \u2745 \u2745\nGiven a subset S of variables, an S-path between two (not necessarily distinct) variables y1, y2 is a path R(y1, x2), R(x2, x3), . . . , R(xk\u22121, y2) of non-trivial constraints such that k \u2265 3 and x2, . . . , xk\u22121 \u2208 S.\nLemma 5. Consider the instance Ixv. There is no (S I (Pxv) )-path between two variables in X\\SI(Pxv) and there is no cycle of non-trivial constraints in Ixv[S I (Pxv) ].\nProof. Let y1, y2 /\u2208 X\\S I (Pxv) and assume for the sake of contradiction that a (SI(Pxv))-path R(y1, x2), R(x2, x3), . . . , R(xk\u22121, y2) exists. Let pi \u2208 {x2, . . . , xk\u22121} be such that i is minimum. Since pi is in the scope of two non-trivial constraints in this path, it follows from Lemma 4 that pi is in the scope of exactly two non-trivial constraints, one of which is of the form R(pj, pi) with j < i and (pj \u2192 pi) \u2208 (Pxv). It follows from (pj \u2192 pi) \u2208 (Pxv) that pj \u2208 S\nI (Pxv)\nand hence pj is not an endpoint of the path, and then j < i contradicts the minimality of i. The second part of the claim follows from the same argument, by considering a cycle as a (SI(Pxv))-path R(x1, x2), R(x2, x3), . . . , R(xk\u22121, x1) with x1 \u2208 (S I (Pxv) ) and defining pi as the variable among {x1, . . . , xk\u22121} with minimum index.\nLemma 6. Ixv has a solution if and only if Ixv[X\\S I (Pxv) ] has a solution.\nProof. The \u201conly if\u201d implication is trivial, so let us focus on the other direction. Suppose that there exists a solution \u03c6 to Ixv[X\\S\nI (Pxv) ]. Let Y be a subset of variables initialized to\nX\\SI(Pxv). We will grow Y with the invariants that (i) we know a solution \u03c6 to Ixv[Y ], and (ii) there is no (X\\Y )-path between two variables in Y (which is true at the initial state by Lemma 5).\nIf there is no non-trivial constraint between X\\Y and Y then Ixv is satisfiable if and only if Ixv[X\\Y ] is. By construction X\\Y \u2286 S\nI (Pxv) and by Lemma 5 we know that Ixv[X\\Y ] has\nno cycle of non-trivial constraints. Because Ixv[X\\Y ] is arc consistent and acyclic it has a solution [19], and we can conclude that in this case Ixv has a solution.\nOtherwise, let pi \u2208 X\\Y be such that there exists a non-trivial constraint between pi and some variable pr \u2208 Y . By (ii), this non-trivial constraint must be unique as otherwise we would have a (X\\Y )-path between two variables in Y . By arc consistency, there exists ai \u2208 Dxv(pi) such that (ai, \u03c6(pr)) \u2208 R(pi, pr); because this non-trivial constraint is unique, setting \u03c6(pi) = ai yields a solution to Ixv[Y \u222a{pi}]. Because any (X\\(Y \u222a{pi}))-path between two variables in Y \u222a{pi} would extend to a (X\\Y )-path between Y variables by going through pi, we know that no such path exists. Then Y \u2190 Y \u222a{pi} satisfies both invariants, so we can repeat the operation until we have a solution to the whole instance or all constraints between Y and X\\Y are trivial. In both cases Ixv has a solution.\nLemma 7. I has a solution if and only if I[X\\SI(Pxv)] has a solution.\nProof. Again the \u201conly if\u201d implication is trivial so we focus on the other direction. Let us assume for the sake of contradiction that I[X\\SI(Pxv)] has a solution but I does not. In particular this implies that Ixv does not have a solution, and then by Lemma 6 we know that Ixv[X\\S\nI (Pxv) ] has no solution either. We define Z as a subset of X\\SI(Pxv) of minimum size\nsuch that Ixv[Z] has no solution. Observe that Ixv[Z] can only differ from I[Z] by having fewer values in the domain of the variables in S(Pxv). Let \u03c6 be a solution to I[Z] such that \u03c6(y) \u2208 Dxv(y) for as many variables y as possible. Because \u03c6 is not a solution to Ixv[Z], there exists pr \u2208 Z\u2229S(Pxv) and pj \u2208 S I (Pxv) such that (pj \u2192 pr) \u2208 (Pxv) and \u03c6(pr) \u2208 \u03c1(pj \u2192 pr). By construction, pj /\u2208 Z. First, let us assume that there exists a variable y \u2208 Z, y 6= pr such that there is no ar \u2208 Dxv(pr) with (\u03c6(y), ar) \u2208 R(y, pr). This implies, in particular, that \u03c6(y) /\u2208 Dxv(y). We first prove, using the same reasoning as in Lemma 4, that R(y, pr) and R(pj, pr) are the only possible non-trivial constraints involving pr in Ixv. If there exists a fourth variable z such that R(pr, z) is non-trivial in Ixv, then there exist ar, br \u2208 Dxv(pr) and az \u2208 Dxv(z) such that (ar, az) \u2208 R(pr, z) but (br, az) /\u2208 R(pr, z). By assumption we have (\u03c6(y), ar) /\u2208 R(y, pr) and (\u03c6(y), \u03c6(pr)) \u2208 R(y, pr). Finally, br has a support aj \u2208 Dxv(pj) and \u03c6(pr) \u2208 \u03c1(pj \u2192 pr) so we have (aj , br) \u2208 R(pj, pr) but (aj , \u03c6(pr)) /\u2208 R(pj, pr). This produces Q1 on (pr, y, pj , z) with pr being the middle variable. Therefore, we know that R(y, pr) and R(pj, pr) are the only possible non-trivial constraints involving pr in Ixv. However, in this case the variable pr has only one incident non-trivial constraint in Ixv[Z], and hence Ixv[Z] has a solution if and only if Ixv[Z\\pr] has one. This contradicts the minimality of Z, and for the rest of the proof we can assume that for every y \u2208 Z there exists some ar 6= \u03c6(pr) such that ar \u2208 Dxv(pr) and (\u03c6(y), ar) \u2208 R(y, pr).\nNow, let y \u2208 Z be such that y 6= pr and |{b \u2208 Dxv(pr) | (\u03c6(y), b) \u2208 R(y, pr)}| is minimum. By the argument above, there exists ar \u2208 Dxv(pr) such that (\u03c6(y), ar) \u2208 R(y, pr) and ar 6= \u03c6(pr). By hypothesis setting \u03c6(pr) = ar would violate at least one constraint in I[Z], so there exists some variable z \u2208 Z, z 6= y such that (\u03c6(z), ar) /\u2208 R(z, pr). Furthermore, by arc consistency of Ixv there exists aj \u2208 Dxv(pj) such that (aj , ar) \u2208 R(pj, pr). Recall that we\npicked pj in such a way that \u03c6(pr) \u2208 \u03c1(pj \u2192 pr), and so we have (aj , \u03c6(pr)) /\u2208 R(pj, pr). We summarize what we have in Figure 12.\nObserve that unless Q1 occurs, for every br \u2208 Dxv(pr) such that (\u03c6(y), br) /\u2208 R(y, pr) we also have (\u03c6(z), br) /\u2208 R(z, pr). However, recall that (\u03c6(y), ar) \u2208 R(y, pr) so \u03c6(z) is compatible with strictly fewer values in Dxv(pr) than \u03c6(y). This contradicts the choice of y. It follows that setting \u03c6(pr) = ar cannot violate any constraint in I[Z], which is impossible by our choice of \u03c6 - a final contradiction.\nTheorem 3. CSP(Q1) is solved by singleton arc consistency.\nProof. Let I \u2208 CSP(Q1) be singleton arc consistent. Pick any variable x and value v \u2208 D(x). By singleton arc consistency the instance Ixv does not have any empty domains. If S\nI (Pxv) = \u2205,\nthen we can make the assignment (x, v) to produce an equivalent smaller instance, so assume SI(Pxv) 6= \u2205. By Lemma 7, I has a solution if and only if I[X\\S I (Pxv) ] has one. Because I[X\\SI(Pxv)] is singleton arc consistent as well and S I (Pxv) 6= \u2205, we can repeat the procedure until X\\SI(Pxv) is empty, at which point we can conclude that I has a solution."}, {"heading": "8 Tractability of R8", "text": "Consider the pattern R8 shown in Figure 13. Let I \u2208 CSP(R8) be a singleton arc consistent instance, x be any variable and v be any value in the domain of x. While Q1 and R8 are structurally dissimilar, we will show that the idea of using Ixv to extract variables from I without altering satisfiability works in the case of R8 as well. We note that the proof below applies almost verbatim to the non-natural generalisation of R8 shown in Figure 14. The following lemma is the R8 analog of Lemma 4.\nThe centers of a star are its nodes of highest degree (every star with three or more vertices has a unique center).\nLemma 8. Consider the instance Ixv. After the removal of every neighbourhood substitutable value, every connected component of non-trivial constraints that intersect with S(Pxv) is a star with a center in S(Pxv).\nProof. We proceed by induction. No connected component of non-trivial constraints may contain p0 = x. Otherwise, let k \u2265 0 and suppose that every connected component of nontrivial constraints that intersect {pi | i \u2264 k} is a star centered on S(Pxv). Suppose also, for the sake of contradiction, that there exists a connected component G of non-trivial constraints that contains pk+1 and that is not a star centered on S(Pxv).\nLet pj, j \u2264 k be such that (pj \u2192 pk+1) \u2208 (Pxv). By the induction hypothesis, pj cannot be part of G and hence R(pj, pk+1) must be complete. Furthermore, if every simple path of non-trivial constraints starting at pk+1 had length 1 then G would be a star centered on pk+1, which would contradict our assumption. Therefore, there exist two distinct variables z1, z2 /\u2208 {pj , pk+1} such that neither R(pk+1, z1) nor R(z1, z2) is complete (again, the claim z1, z2 6= pj comes from the fact that pj is not part of G).\nBecause R(pk+1, z1) is not complete, there exist two distinct values ak+1, bk+1 \u2208 Dxv(pk+1) and a1 \u2208 Dxv(z1) such that (ak+1, a1) \u2208 R(pk+1, z1) but (bk+1, a1) /\u2208 R(pk+1, z1). Furthermore, R(pj, pk+1) is complete and hence there exists aj \u2208 Dxv(pj) such that (aj , ak+1), (aj , bk+1) \u2208 R(pj, pk+1). Finally, since (pj \u2192 pk+1) \u2208 (Pxv) some propagation must have taken place in the domain of pk+1, and hence there exists ck+1 such that (aj , ck+1) /\u2208 R(pj, pk+1). We can summarize what we have in the following picture (the tuple (a1, a2) comes from the fact that a1 must have a support in R(z1, z2)).\n\u2022 aj\n\u2022 ck+1\n\u2022 bk+1\n\u2022 ak+1\n\u2022 a1 \u2022 a2\u272c \u272b \u2729 \u272a\npj\n\u272c\n\u272b\n\u2729\n\u272a pk+1\n\u272c \u272b \u2729 \u272a\nz1\n\u272c \u272b \u2729 \u272a\nz2 \u270f\u270f\n\u270f\u270f \u270f\u270f\n\u270f\u270f\nFirst case: there exists b1 \u2208 Dxv(z1) such that (b1, a2) /\u2208 R(z1, z2). For R8 not to occur, (bk+1, b1) must not belong to R(pk+1, z1). By arc consistency, b1 must be connected to some dk+1 \u2208 Dxv(pk+1). If there exists one such dk+1 such that (dk+1, a1) /\u2208 R(pk+1, z1), then R8 occurs again, so a1 dominates b1 in the constraint R(pk+1, z1). However, recall that all neighbourhood substitutable values have been removed, so there must exist a variable z3 (potentially equal to z2, but different from pj , pk+1, z1) and a3 \u2208 Dxv(z3) such that (b1, a3) \u2208 R(z1, z3) but (a1, a3) /\u2208 R(z1, z3). Finally, because bk+1 is arc consistent, there exists c1 \u2208 D(z1) such that (bk+1, c1) \u2208 R(pk+1, z1). We obtain the following two structures, which may only differ on the last constraint.\n\u2022 aj\n\u2022 dk+1\n\u2022 ck+1\n\u2022 bk+1\n\u2022 ak+1\n\u2022 b1\n\u2022 c1\n\u2022 a1\n\u2022 a3\u272c \u272b \u2729 \u272a\npj\n\u272c\n\u272b\n\u2729\n\u272a pk+1\n\u272c\n\u272b\n\u2729\n\u272a z1\n\u272c \u272b \u2729 \u272a\nz3 \u270f\u270f\n\u270f\u270f \u270f\u270f\n\u270f\u270f \u2711 \u2711 \u2711 \u2711 \u2711 \u2711 \u2711\u2711 PPPPPPPP\u270f\u270f \u270f\u270f \u270f\u270f \u270f\u270f\u270f \u270f\u270f \u270f\u270f \u270f\u270f\u270f\n\u2022 aj\n\u2022 dk+1\n\u2022 ck+1\n\u2022 bk+1\n\u2022 ak+1\n\u2022 b1\n\u2022 c1\n\u2022 a1\n\u2022 a2\u272c \u272b \u2729 \u272a\npj\n\u272c\n\u272b\n\u2729\n\u272a pk+1\n\u272c\n\u272b\n\u2729\n\u272a z1\n\u272c \u272b \u2729 \u272a\nz2 \u270f\u270f\n\u270f\u270f \u270f\u270f\n\u270f\u270f \u2711 \u2711 \u2711 \u2711 \u2711 \u2711 \u2711\u2711 PPPPPPPP\u270f\u270f \u270f\u270f \u270f\u270f \u270f\u270f PPPPPPPP\nThe key observation here is that whenever a1 or b1 is compatible with any value v of a fourth variable, then c1 is compatible as well unless R8 occurs. Thus, the only constraint on which c1 may not dominate both a1 and b1 is R(pk+1, z1). However, if (dk+1, c1) /\u2208 R(pk+1, z1) then R8 occurs in (pj , pk+1, z1, z3), and if (ak+1, c1) /\u2208 R(pk+1, z1) then R8 occurs in (pj , pk+1, z1, z2); this is true for any choice of ak+1 and dk+1 so c1 dominates both a1 and b1 in R(pk+1, z1) - a contradiction, since it means that a1 and b1 should have been removed by neighbourhood substitution.\nSecond case: there does not exist b1 \u2208 Dxv(z1) such that (b1, a2) /\u2208 R(z1, z2) for any choice of z2. This means that we must have (v1, v2) \u2208 R(z1, z2) for all v1 \u2208 Dxv(z1) and v2 \u2208 Dxv(z2) such that (a1, v2) \u2208 R(z1, z2). Putting this together with the fact that by hypothesis R(z1, z2) is not complete, there exists b2 \u2208 Dxv(z2) such that (a1, b2) /\u2208 R(z1, z2). Then b2 must have a support (b1, b2) in R(z1, z2), and b1 must have a support (dk+1, b1) in R(pk+1, z1). Because R(pj, pk+1) is complete, (aj , dk+1) \u2208 R(pj, pk+1). Let us update our picture:\n\u2022 aj\n\u2022 dk+1\n\u2022 ck+1\n\u2022 bk+1\n\u2022 ak+1\n\u2022 b1\n\u2022 a1\n\u2022 b2\n\u2022 a2\u272c \u272b \u2729 \u272a\npj\n\u272c\n\u272b\n\u2729\n\u272a pk+1\n\u272c\n\u272b\n\u2729\n\u272a z1\n\u272c\n\u272b\n\u2729\n\u272a z2\n\u270f\u270f \u270f\u270f\n\u270f\u270f \u270f\u270f \u2711 \u2711 \u2711 \u2711 \u2711 \u2711 \u2711\u2711 PPPPPPPP PPPPPPPP \u270f\u270f \u270f\u270f \u270f\u270f \u270f\u270f\u270f \u270f\u270f \u270f\u270f \u270f\u270f\u270f\nObserve that ak+1 is an arbitrary value of Dxv(pk+1) that is compatible with a1. If (ak+1, b1) /\u2208 R(pk+1, z1), then R8 occurs. Hence, every value compatible with a1 in every constraint involving z1 is also compatible with b1. This means that a1 should have been removed by neighbourhood substitution - a final contradiction.\nLemma 9. Consider the instance Ixv. There exists a partition (X1,X2) of X such that\n(i) S(Pxv) \u2286 X1;\n(ii) \u2200(x, y) \u2208 X1 \u00d7X2, R(x, y) is complete;\n(iii) Every connected component of non-trivial constraints whose scope is a subset of X1 is a star.\nProof. Let X1 = S(Pxv) \u222a { z \u2208 X | \u2203y \u2208 S(Pxv) : Dxv(y) \u00d7Dxv(z) 6\u2286 R(y, z) }. X1 satisfies (i), and by construction every non-trivial constraint between y \u2208 X1 and z /\u2208 X1 must be such that y /\u2208 S(Pxv) and y is adjacent to a variable in S(Pxv) via a non-trivial constraint. By Lemma 8 this is impossible, and hence X1 satisfies (ii). The property (iii) is immediate by Lemma 8.\nTheorem 4. CSP(R8) is solved by singleton arc consistency.\nProof. Let I \u2208 CSP(R8) and suppose that I is singleton arc consistent. Let x \u2208 X and v \u2208 D(x). Because of singleton arc consistency the instance Ixv has no empty domains. By Lemma 9, the variable set of Ixv can be divided into two parts X1,X2 such that Ixv has a solution if and only if both Ixv[X1] and Ixv[X2] are satisfiable. Ixv[X1] is an arc consistent instance with no cycle of non-trivial constraints, and hence is satisfiable. Ixv[X2] is exactly I[X2] because no variable in X2 was affected by propagation after x was assigned. Because I[X2] is singleton arc consistent as well, we can repeat the same reasoning on I[X2]. At each step the set X1 cannot be empty (it contains x) so this procedure will always terminate, and because each I[X1] has a solution I has a solution as well.\n9 Tractability of R7-\nThe pattern R7- (Figure 15) presents structural similarity with R8 because both are generalizations of T4. In the case of R8, the T4-like structure was used to prove by induction that once a variable was assigned some value, arc consistency greatly simplifies the instance and leaves few non-trivial constraints in its wake. We show that a variant of this technique works for R7- as well, with two differences:\n(i) Branching on just any variable-value pair may lead to a subproblem that is not solved by AC.\n(ii) Once the right assignment is made, the property that holds is much stronger as all constraints must become complete except for at most one. In contrast to the case of R8, this non-trivial constraint may interfere with parts of the instance left unchanged after arc consistency.\n\u2022\n\u2022\n\u2022\n\u2022\n\u2022 \u2022\n\u2022\n\u272c\n\u272b\n\u2729\n\u272a \u272c\n\u272b\n\u2729\n\u272a\n\u272c\n\u272b\n\u2729\n\u272a\nFigure 16: The \u201cmoth\u201d pattern M\u0302.\nFinding out which variable we should branch on is tricky. The ideal starting point for the induction is a substructure corresponding to a particular pattern M\u0302. However, M\u0302 is an NP-hard pattern so it may not occur at all in the instance. To handle this problem we define a weaker pattern V2, whose absence implies SAC-solvability, and we show that if the induction started from V2 breaks then M\u0302 must occur somewhere - a win-win situation. Afterwards, we can use (ii) to build recursively a solution to the whole instance.\nLet I \u2208 CSP(R7-) be a singleton arc consistent instance. The next pair of lemmas make use of the patterns M\u0302 and V2, described in Figure 16 and Figure 17 respectively. Note that CSP(V2) is trivially decided by SAC (for instance because it is a subpattern of T4), and\nCSP(M\u0302) is NP-complete [11].\nLemma 10. Let x \u2208 X be such that M\u0302 occurs on (y, x, z) with x the middle variable. Let v\nbe the value in D(x) that is the meet point of the two positive edges. Then every constraint whose scope contains a variable in S(Pxv) is complete in Ixv, except possibly R(y, z).\nProof. We prove the claim by induction. Every constraint with p0 = x in its scope is complete. Let k \u2265 0 and suppose that the claim holds for every constraint whose scope contains a variable in {pi | i \u2264 k}. Let w \u2208 X\\{pi | i \u2264 k} be a variable such that R(pk+1, w) is not complete in Ixv and {pk+1, w} 6= {y, z}. Let pj be such that (pj \u2192 pk+1) \u2208 (Pxv). Because R(pk+1, w) is not complete and Ixv is arc consistent, there exist ak+1, bk+1 \u2208 Dxv(pk+1) and aw \u2208 Dxv(w) such that (ak+1, aw) \u2208 R(pk+1, w) and (bk+1, aw) /\u2208 R(pk+1, w).\nIf R(pj , pk+1) is complete, then there exists aj \u2208 Dxv(pj) such that (aj , ak+1), (aj , bk+1) \u2208 R(pj, pk+1) and ck+1 such that (aj , ck+1) /\u2208 R(pj, pk+1) (ck+1 is one of the values that were eliminated by arc consistency at step (pj \u2192 pk+1)). Then, if pj 6= x there exists pi, i < j such that (pi \u2192 pj) \u2208 (Pxv). By arc consistency and because some propagation must have taken place in the domain of pj at step (pi \u2192 pj), there exists ai \u2208 Dxv(pi) and bj such that (ai, aj) \u2208 R(pi, pj) and (ai, bj) /\u2208 R(pi, pj). It follows that R7- occurs on (pi, pj, pk+1, w), a contradiction. On the other hand, if pj = x then we obtain the same contradiction by using either y or z (the one which does not appear in {pk+1, w}) instead of pi.\nBy the induction hypothesis, if R(pj, pk+1) is not complete then {pj, pk+1} = {y, z}. By symmetry we can assume pk+1 = z. R(x, z) is complete, so {(v, ak+1), (v, bk+1)} \u2286 R(x, z). Furthermore, M\u0302 occurs on (y, x, z) so there exist ck+1 such that (v, ck+1) /\u2208 R(x, z) and ay, bx such that (ay, v) \u2208 R(y, z) but (ay, bx) /\u2208 R(y, z). Then, R7- occurs on (y, x, z, w), a contradiction.\nIn both cases the induction holds, so the claim follows.\nLemma 11. Suppose that I \u2208 CSP(M\u0302) \u2229 CSP(R7-). Let x \u2208 X be such that V2 occurs on (y, x, z) with x the middle variable. Let v be the value in D(x) that is the meet point of the two positive edges. Then every constraint whose scope contains a variable in S(Pxv) is complete in Ixv, except possibly R(y, z).\nProof. The proof follows the same idea as for Lemma 10. However, in this case the fact that M\u0302 does not occur is critical in order to keep the induction going.\nAgain, every constraint with p0 = x in its scope is complete. Let k \u2265 0 and suppose that the claim holds for every constraint whose scope contains a variable in {pi | i \u2264 k}. Let w \u2208 X\\{pi | i \u2264 k} be a variable such that R(pk+1, w) \u2208 C is not complete in Ixv and {pk+1, w} 6= {y, z}. Let pj be such that (pj \u2192 pk+1) \u2208 (Pxv). Because R(pk+1, w) is not complete and Ixv is arc consistent, there exist ak+1, bk+1 \u2208 Dxv(pk+1) and aw \u2208 Dxv(w) such that (ak+1, aw) \u2208 R(pk+1, w) and (bk+1, aw) /\u2208 R(pk+1, w).\nIf R(pj, pk+1) is complete we can proceed exactly as in the proof of Lemma 10, so let us focus on the case where R(pj, pk+1) is not complete. By induction we must have {pj , pk+1} = {y, z}. We assume without loss of generality that pk+1 = z. If (x \u2192 z) \u2208 (Pxv) then we can use x instead of y to bring us to the case where R(pj, pk+1) is complete, so let us assume (x \u2192 z) /\u2208 (Pxv). Then, if (x \u2192 y) /\u2208 (Pxv) there exists pi, pl such that i, l \u2264 k, (pi \u2192 y) \u2208 (Pxv) and (pl \u2192 pi) \u2208 (Pxv). However, by induction R(pi, y) is complete and thus R(y, z) should have been complete as well. We can therefore assume that (x \u2192 y) \u2208 (Pxv) to work our way towards a contradiction. In particular, this means that there exists cy such that (v, cy) /\u2208 R(x, y) (cy being a value eliminated by arc consistency). Because V2 occurs on (y, x, z), there exists ay \u2208 Dxv(y) and ax such that (v, ay) \u2208 R(x, y) and (ax, ay) /\u2208 R(x, y).\nObserve that we can always assume that either (ay, ak+1) \u2208 R(y, z) or (ay, bk+1) \u2208 R(y, z) by replacing either ak+1 or bk+1 with a support for ay in R(y, z).\n\u2022 ax\n\u2022 v\n\u2022 cy\n\u2022\n\u2022 ay\n\u2022 ck+1\n\u2022 bk+1\n\u2022 ak+1\n\u2022 aw\n\u272c\n\u272b\n\u2729\n\u272a x\n\u272c\n\u272b\n\u2729\n\u272a y\n\u272c\n\u272b\n\u2729\n\u272a z = pk+1\n\u272c \u272b \u2729 \u272a\nw\nIf (ay, ak+1) \u2208 R(y, z), then unless R7- occurs on (x, y, z, w) we must have (ay, bk+1) /\u2208 R(y, z). By arc consistency of Ixv, there exists by \u2208 Dxv(y) such that (by, bk+1) \u2208 R(y, z), (by, ck+1) /\u2208 R(y, z) (since ck+1 was eliminated by arc consistency) and because R(x, y) is complete we have (v, by) \u2208 R(x, y). Again, unless R7- occurs on (x, y, z, w) we have (by, ak+1) /\u2208 R(y, z). At this point one can observe that the pattern M\u0302 occurs on (x, y, z) with the meet point of the two solid lines being ay. This contradicts the assumption that I \u2208\nCSP(M\u0302).\n\u2022 ax\n\u2022 v\n\u2022 cy\n\u2022 by\n\u2022 ay\n\u2022 ck+1\n\u2022 bk+1\n\u2022 ak+1\n\u2022 aw\n\u272c\n\u272b\n\u2729\n\u272a x\n\u272c\n\u272b\n\u2729\n\u272a y\n\u272c\n\u272b\n\u2729\n\u272a z = pk+1\n\u272c \u272b \u2729 \u272a\nw\nPPPPPPPP\nThe case where (ay, bk+1) \u2208 R(y, z) is almost symmetric. Because R7- does not occur, we must have (ay, ak+1) /\u2208 R(y, z). By arc consistency, there exists some by \u2208 Dxv(y) such that (by, ak+1) \u2208 R(y, z), (by, ck+1) /\u2208 R(y, z) and because R(x, y) is complete we have (v, by) \u2208 R(x, y). It follows from the absence of R7- that (by, bk+1) /\u2208 R(y, z), which create the pattern M\u0302 on (x, y, z) with its meet point being by. This final contradiction completes the proof.\nTheorem 5. CSP(R7-) is solved by singleton arc consistency.\nProof. Let I = (X,D,C) \u2208 CSP(R7-), and suppose that enforcing SAC did not lead to a wipeout of any variable domain. If V2 does not occur in I then it has a solution (recall that absence of V2 ensures solvability by SAC), so let us assume that V2 occurs. Let x \u2208 X and v \u2208 D(x) be such that v is the meet point of solid edges of M\u0302 if M\u0302 occurs in I, and the meet point of V2 otherwise. I is SAC so the instance Ixv has no empty domains. By Lemma 10 and Lemma 11, there is at most one non-trivial constraint in Ixv[S(Pxv)] so by arc consistency for every x1 \u2208 S(Pxv) and v1 \u2208 Dxv(x1) there is a solution \u03c6 to Ixv[S(Pxv)] such that \u03c6(x1) = v1. Furthermore, Ixv[X\\S(Pxv)] = I[X\\S(Pxv)] and there is at most one non-trivial constraint with one endpoint in S(Pxv) and the other in X\\S(Pxv). By combining the two properties we obtain that Ixv has a solution if and only if I[X\\S(Pxv)] has one. Because I[X\\S(Pxv)] is SAC and\nR7- still does not occur, we can repeat the operation until we have a solution to the whole instance."}, {"heading": "10 Conclusion", "text": "We have established SAC-solvability of five novel classes of binary CSPs defined by a forbidden pattern, three of which are generalisations of 2SAT. For natural patterns (defining classes of CSPs closed under removing constraints), there are only a relatively small number of irreducible patterns whose SAC-solvability is still open. In addition to settling the remaining patterns, a possible line of future work is to study sets of patterns or partially-ordered patterns [17] that give rise to SAC-solvable (natural) classes of CSPs.\nWe hope that the notion of natural classes of CSP instances will provide a bridge between relational and structural classes which could lead to the discovery of new hybrid tractable classes (not necessarily defined by forbidden patterns)."}, {"heading": "A A necessary condition for solvability by SAC", "text": "In order to establish some basic properties of patterns solvable by SAC, we first show that several small patterns are not solvable by SAC. In order to do this, we consider the following instances:\n\u2022 I3COL4 : corresponds to 3-colouring the complete graph on 4 vertices, i.e. four variables x1, . . . , x4 with domains D(xi) = {1, 2, 3} (i = 1, . . . , 4) and the six inequality constraints: xi 6= xj (1 \u2264 i < j \u2264 4).\n\u2022 I3,4: corresponds to an alternative encoding of 3-colouring the complete graph on 4 vertices: three new variables y1, y2, y3 are introduced such that yj = i if variable xi is assigned colour j. There are now seven variables (x1, x2, x3, x4, y1, y2, y3) with domains D(xi) = {1, 2, 3} (i = 1, 2, 3, 4), D(yi) = {1, 2, 3, 4} (i = 1, 2, 3) and constraints (xi = j) \u21d2 (yj = i) (i = 1, 2, 3, 4; j = 1, 2, 3). I3,4 is shown in Figure 18(a) (in which only negative edges are shown so as not to clutter up the figure).\n\u2022 I5: five variables (x1, . . . , x5) each with domain {1, 2, 3, 4} and the constraints (xi = j \u2212 1) \u21d4 (xj = i) for all i, j such that 1 \u2264 i < j \u2264 5. One constraint of this instance is shown in Figure 18(b) (again only negative edges are shown).\nIt is tedious but easy to verify that each of these instances has no solution and is singleton arc consistent. Any pattern which is solvable by SAC must therefore occur in each of these\n\u2022 \u2022\n\u272d\u272d\u272d\u272d \u272d\u2022 \u2764\u2764\u2764\u2764\u2764 \u2717 \u2716 \u2714 \u2715\n\u2717\n\u2716\n\u2714\n\u2715 a b a 6= bc\nFigure 20: The pattern V.\ninstances. Consider the patterns shown in Figure 19. The patterns T1 and M3 do not occur in I3,4. The pattern Trestle does not occur in I5. It therefore follows that T1, M3 and Trestle are not solvable by SAC.\nThe constraint graph of a pattern P with variables X is the graph G = (X,E) such that (x, y) \u2208 E if P has a negative edge between variables x, y \u2208 X.\nProposition 1. A natural irreducible pattern P solvable by SAC satisfies:\n1. None of the patterns T1, M3 and Trestle occur in P .\n2. P has at most four variables and its constraint graph is connected and acyclic.\n3. P has at most one degree-3 variable and at most one non-trivial constraint in which the pattern V, shown in Figure 20, occurs (with its centre point c at a variable with domain at size at most two), but does not have both a degree-3 variable and an occurrence of V.\n4. P has at most one negative edge per constraint, at most one point at which two negative edges meet (a negative meet point) and no point at which three negative edges meet. If P has a negative meet point, then none of its variables has domain size greater than two.\nProof. The first property follows from the above discussion and the fact that Q occurs in P implies that CSP(Q) \u2286 CSP(P).\nSince a pattern P which is solvable by SAC must occur in I3COL4 , P can have at most four variables. If P is also a natural pattern, then it has a connected constraint graph and hence all of its variables are at a distance of at most three in its constraint graph.\nBy padding out I3COL4 with chains of equality constraints, it is easy to produce a SAC instance which has no solution and in which the pattern V does not occur in any non-trivial constraint at a distance of three or less from a degree-3 variable. It follows that no natural irreducible pattern P with a degree-3 variable and in which the pattern V occurs is solvable by\nSAC. Using this same padding-with-equality argument, we can also deduce that in a natural irreducible pattern P solvable by SAC: there is at most one degree-3 variable, there is at most one non-trivial constraint in which the pattern V occurs, and that P has no cycle in its constraint graph (the latter following from the fact that cycles of any fixed length can be eliminated from an instance by padding out with chains of equality constraints).\nEach inequality constraint xi 6= xj in I 3COL 4 can be replaced by equivalent gadgets in which all constraints have at most one negative edge [11]. The resulting instance is still SAC. To be concrete, for each i \u2208 {1, 2, 3, 4} and each a \u2208 {1, 2, 3}, we create 21 new Boolean variables xria (r = 0, 1, . . . , 20) linked to the xi variables and between themselves by the following constraints: (xi = a) \u21d2 x 0 ia and x r ia \u21d2 x r+1 ia (r = 0, 1, . . . , 19). If xi is assigned the value a, then all the variables xria must be assigned true. Each constraint xi 6= xj (1 \u2264 i < j \u2264 4) is then replaced by the chain of constraints x4jia \u21d2 y 1 ija, y 1 ija \u21d2 y 2 ija, y 2 ija \u21d2 y 3 ija, y 3 ija \u21d2 x 4i ja, where ysija (s = 1, 2, 3; a = 1, 2, 3) are new boolean variables. In the resulting instance I there are no points at which three negative edges meet, no two negative meet points at a distance of three or less and no negative meet point at a distance of three or less from a variable with domain size three. We do not change the semantics of I (nor its singleton arc consistency) by replacing the constraints (xi = a) \u21d2 x 0 ia by (xi = a) \u21d4 x 0 ia. In the resulting instance I \u2032, no pattern V (Figure 20) occurs with its centre point c at a variable with domain size greater than two. We can deduce that a natural irreducible pattern P solvable by SAC (since it contains no 4-constraint path) has at most one negative edge per constraint, at most one negative meet point, no point at which three negative edges meet and the V pattern only occurs in P with its centre point c at a variable with domain of size at most two. Besides, P cannot have both a negative meet point and a variable with domain size three or more.\nProposition 1 allows us to narrow down natural irreducible patterns solvable by SAC to a finite number, which we can summarize succinctly by the following proposition.\nProposition 2. If P is a natural irreducible pattern solvable by SAC, then P must occur in at least one of the patterns Q1,Q2,R1,. . .,R10 (shown in Figures 1 and 2).\nProof. From Proposition 1, we can deduce that the constraint graph of P is a either a star or a chain, with at most four vertices, and P has at most one negative edge per constraint. Such patterns must have one of the following four descriptions, which we analyse separately.\nP has a single degree-3 variable. The constraint graph of P is necessarily a star. By Proposition 1, the pattern V does not occur in P . From this and the fact that P contains no dangling points and no mergeable points, we can deduce that each of the three degree-1 variables must have domain size 1. If the central degree-3 variable has domain size 3, then the fact that none of the patterns V, T1 and M3 occur in P , and that there are no mergeable points, implies that P must be the pattern Q1. If, on the other hand, the central variable has domain size 2, then since V and T1 do not occur in P and no three negative edges meet at a point, we can deduce that P must be Q2 (or a subpattern).\nP is of degree 2 and has a negative meet point. By Proposition 1, P has no domain of size greater than 2 and Trestle does not occur. It then follows by Proposition 1 and irreducibility of P that the pattern V cannot occur more than once (even in the same constraint). Since P has no dangling points, there are only four possible positions where\nV could occur. We can only add a limited number of positive edges without introducing T1, Trestle, dangling points or mergeable points. This gives rise to the four patterns R1,R2,R3,R4 (or subpatterns).\nP is of degree 2, has no negative meet point and all domains of size 1 or 2. By the same argument as in the previous case, the pattern V can occur at most once. By the absence of Trestle and dangling points in P , and by symmetry, there are only two possible positions for the pattern V in P , if it occurs at all. Again, we can only add a limited number of positive edges without introducing T1, Trestle, dangling points or mergeable points. This gives rise to the three patterns R5,R6,R10 (or subpatterns).\nP is of degree 2, has no negative meet point and at least one size-3 domain. The fact that P has no mergeable points and all variables have degree at most 2 implies that no domain can be greater than size 3. Indeed, from the fact that P is irreducible and that, by Proposition 1, no V can occur centred at a variable of domain size 3, we can deduce that there is exactly one variable with domain size 3. Adding positive edges to ensure that no two points are mergeable at this variable v, necessarily creates a V pattern. No other V can occur either in a different constraint (by Proposition 1) or in the same constraint otherwise we would have a V centred at v or Trestle would occur. Adding other positive edges, while satisfying the properties of Proposition 1, produces patterns R7,R8,R9 (or subpatterns)."}, {"heading": "B SAC-solvability of T3", "text": "Consider the pattern T3 shown in Figure 21. This is the only maximal two-constraint tractable pattern whose SAC-solvability is not determined by our main theorem, Proposition 1 and the results of [14].\n\u2724 \u271c\nTheorem 6. CSP(T3) is solved by singleton arc consistency.\nProof. Let I \u2208 CSP(T3) be a singleton arc consistent instance with no neighbourhood substitutable values. If T4 does not occur then I has a solution, so we examine the case where T4 occurs on variables (x, y, z) and values ax, ay, by, cy, az with axay, axby, byaz being positive edges and axcy, ayaz being negative edges. By arc consistency, cy has a support bx at x and because T3 does not occur bxby is a positive edge. Observe that by dominates cy in R(x, y),\nand because neighbourhood substitutable values have been removed there must exist a variable w (possibly equal to z) and bw \u2208 D(w) such that bybw is a negative edge and cybw is a positive edge. However, in this case T3 occurs on (x, y, w), so we obtain a contradiction. It follows that T4 cannot occur in the instance, and hence I has a solution."}], "references": [{"title": "Constraint Satisfaction Problems Solvable by Local Consistency Methods", "author": ["Libor Barto", "Marcin Kozik"], "venue": "Journal of the ACM,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2014}, {"title": "Theoretical analysis of singleton arc consistency and its extensions", "author": ["Christian Bessiere", "Romuald Debruyne"], "venue": "Artificial Intelligence,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "An optimal coarse-grained arc consistency algorithm", "author": ["Christian Bessi\u00e8re", "Jean-Charles R\u00e9gin", "Roland H.C. Yap", "Yuanlin Zhang"], "venue": "Artificial Intelligence,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2005}, {"title": "Constraint satisfaction problems: Algorithms and applications", "author": ["Sally C. Brailsford", "Chris N. Potts", "Barbara M. Smith"], "venue": "European Journal of Operational Research,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1999}, {"title": "A simple algorithm for Mal\u2019tsev constraints", "author": ["Andrei Bulatov", "V\u0131\u0301ctor Dalmau"], "venue": "SIAM J. Comput.,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2006}, {"title": "Classifying the complexity of constraints using finite algebras", "author": ["Andrei Bulatov", "Peter Jeavons", "Andrei Krokhin"], "venue": "SIAM J. Comput.,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2005}, {"title": "Graphs of relational structures: Restricted types", "author": ["Andrei A. Bulatov"], "venue": "In Proceedings of the 31st Annual ACM/IEEE Symposium on Logic in Computer Science", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2016}, {"title": "Applying constraint satisfaction techniques to job shop scheduling", "author": ["Cheng-Chung Cheng", "Stephen F. Smith"], "venue": "Annals of Operations Research,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1997}, {"title": "\u017divn\u00fd. Variable and value elimination in binary constraint satisfaction via forbidden patterns", "author": ["David A. Cohen", "Martin C. Cooper", "Guillaume Escamocher", "Stanislav"], "venue": "Journal of Computer and System Sciences,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "The tractability of CSP classes defined by forbidden patterns", "author": ["Martin C. Cooper", "David A. Cohen", "P\u00e1id\u0301\u0131 Creed", "D\u00e1niel Marx", "Andr\u00e1s Z. Salamon"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "Characterising Tractable Constraints", "author": ["Martin C. Cooper", "David A. Cohen", "Peter G. Jeavons"], "venue": "Artificial Intelligence,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1994}, {"title": "Broken triangles: From value merging to a tractable class of general-arity constraint satisfaction problems", "author": ["Martin C. Cooper", "Aymeric Duchein", "Achref El Mouelhi", "Guillaume Escamocher", "Cyril Terrioux", "Bruno Zanuttini"], "venue": "Artificial Intelligence,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2016}, {"title": "Characterising the complexity of constraint satisfaction problems defined by 2-constraint forbidden patterns", "author": ["Martin C. Cooper", "Guillaume Escamocher"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Generalizing constraint satisfaction on trees: Hybrid tractability and variable elimination", "author": ["Martin C. Cooper", "Peter G. Jeavons", "Andr\u00e1s Z. Salamon"], "venue": "Artificial Intelligence,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2010}, {"title": "\u017divn\u00fd. Hybrid tractability of valued constraint problems", "author": ["Martin C. Cooper", "Stanislav"], "venue": "Artificial Intelligence,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2011}, {"title": "\u017divn\u00fd. The power of arc consistency for CSPs defined by partially-ordered forbidden patterns", "author": ["Martin C. Cooper", "Stanislav"], "venue": "In Proceedings of the 31st Annual ACM/IEE Symposium on Logic in Computer Science (LICS16),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2016}, {"title": "Tree clustering for constraint networks", "author": ["Rina Dechter", "Judea Pearl"], "venue": "Artificial Intelligence,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1989}, {"title": "A sufficient condition for backtrack-free search", "author": ["Eugene C. Freuder"], "venue": "J. ACM,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 1982}, {"title": "Eliminating Interchangeable Values in Constraint Satisfaction Problems", "author": ["Eugene C. Freuder"], "venue": "In Proceedings of AAAI-91,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 1991}, {"title": "Hypertree decompositions and tractable queries", "author": ["Georg Gottlob", "Nicola Leone", "Francesco Scarcello"], "venue": "Journal of Computer and System Sciences,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2002}, {"title": "The complexity of homomorphism and constraint satisfaction problems seen from the other side", "author": ["Martin Grohe"], "venue": "Journal of the ACM,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2007}, {"title": "Tractability and learnability arising from algebras with few subpowers", "author": ["Pawe Idziak", "Petar Markovi", "Ralph McKenzie", "Matthew Valeriote", "Ross Willard"], "venue": "SIAM Journal on Computing,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2010}, {"title": "Weak consistency notions for all the CSPs of bounded width", "author": ["Marcin Kozik"], "venue": "In Proceedings of the 31st Annual ACM/IEEE Symposium on Logic in Computer Science", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2016}, {"title": "A constraint programming-based resource management technique for processing MapReduce jobs with SLSs on clouds", "author": ["Norman Lim", "Shikharesh Majumdar", "Peter Ashwood-Smith"], "venue": "In Proceedings of the 43rd International Conference on Parallel Processing", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}, {"title": "Tractable hypergraph properties for constraint satisfaction and conjunctive queries", "author": ["D\u00e1niel Marx"], "venue": "Journal of the ACM,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2013}, {"title": "Arc and path consistency revisited", "author": ["Roger Mohr", "Thomas C. Henderson"], "venue": "Artificial Intelligence,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 1986}, {"title": "Optimisation and constraint based heuristic methods for advanced planning and scheduling systems", "author": ["Cemalettin Ozturk", "M. Arslan Ornek"], "venue": "International Journal of Industrial Engineering: Theory, Applications and Practice,", "citeRegEx": "28", "shortCiteRegEx": "28", "year": 2016}], "referenceMentions": [{"referenceID": 26, "context": "The CSP has proved to be a useful technique for modelling in many important application areas from manufacturing to process optimisation, for example planning and scheduling optimisation [28], resource allocation [25], job shop problems [9] and workflow management [29].", "startOffset": 187, "endOffset": 191}, {"referenceID": 23, "context": "The CSP has proved to be a useful technique for modelling in many important application areas from manufacturing to process optimisation, for example planning and scheduling optimisation [28], resource allocation [25], job shop problems [9] and workflow management [29].", "startOffset": 213, "endOffset": 217}, {"referenceID": 7, "context": "The CSP has proved to be a useful technique for modelling in many important application areas from manufacturing to process optimisation, for example planning and scheduling optimisation [28], resource allocation [25], job shop problems [9] and workflow management [29].", "startOffset": 237, "endOffset": 240}, {"referenceID": 3, "context": "Hence much work has been done on describing useful classes of constraints [2] and implementing efficient algorithms for processing constraints [5].", "startOffset": 143, "endOffset": 146}, {"referenceID": 5, "context": "Techniques from universal algebra have been essential in this work: the complexity of a constraint language is characterised by a particular algebraic structure [7].", "startOffset": 161, "endOffset": 164}, {"referenceID": 0, "context": "Surprisingly there are only two known reasons for tractability, bounded width [1] and (generalisations of) Maltsev [6, 23], leading to two possible algorithms for solving any CSP defined over a tractable language.", "startOffset": 78, "endOffset": 81}, {"referenceID": 4, "context": "Surprisingly there are only two known reasons for tractability, bounded width [1] and (generalisations of) Maltsev [6, 23], leading to two possible algorithms for solving any CSP defined over a tractable language.", "startOffset": 115, "endOffset": 122}, {"referenceID": 21, "context": "Surprisingly there are only two known reasons for tractability, bounded width [1] and (generalisations of) Maltsev [6, 23], leading to two possible algorithms for solving any CSP defined over a tractable language.", "startOffset": 115, "endOffset": 122}, {"referenceID": 0, "context": "All bounded width [1, 8] language problems are decided by establishing singleton arc consistency [24].", "startOffset": 18, "endOffset": 24}, {"referenceID": 6, "context": "All bounded width [1, 8] language problems are decided by establishing singleton arc consistency [24].", "startOffset": 18, "endOffset": 24}, {"referenceID": 22, "context": "All bounded width [1, 8] language problems are decided by establishing singleton arc consistency [24].", "startOffset": 97, "endOffset": 101}, {"referenceID": 19, "context": "A necessary condition for the tractability of a structural class with bounded arity is that it has bounded generalised hypertree width [21].", "startOffset": 135, "endOffset": 139}, {"referenceID": 16, "context": "This process is equivalent to establishing arc consistency in the so called dual representation [18].", "startOffset": 96, "endOffset": 100}, {"referenceID": 0, "context": "Since our understanding of the tractability landscape for languages [1] and structural [22, 26] classes is so well advanced there is now much interest in so called hybrid tractable classes.", "startOffset": 68, "endOffset": 71}, {"referenceID": 20, "context": "Since our understanding of the tractability landscape for languages [1] and structural [22, 26] classes is so well advanced there is now much interest in so called hybrid tractable classes.", "startOffset": 87, "endOffset": 95}, {"referenceID": 24, "context": "Since our understanding of the tractability landscape for languages [1] and structural [22, 26] classes is so well advanced there is now much interest in so called hybrid tractable classes.", "startOffset": 87, "endOffset": 95}, {"referenceID": 9, "context": "We define new natural CSP problems by forbidding the occurrence of certain patterns as a substructure [11].", "startOffset": 102, "endOffset": 106}, {"referenceID": 8, "context": "This technique has allowed for the identification of interesting cases of practical significance: for example, a precise characterisation of patterns which allow for the elimination of variables before backtracking has been obtained [10].", "startOffset": 233, "endOffset": 237}, {"referenceID": 25, "context": "Singleton Arc Consistency Singleton arc consistency is a notion stronger than arc consistency (but weaker than strong path consistency [27]).", "startOffset": 135, "endOffset": 139}, {"referenceID": 2, "context": "For a binary CSP instance with maximum domain size d, n variables and e non-trivial constraints there are optimal O(ed2) algorithms for establishing arc consistency [4] and O(ned3) algorithms for establishing singleton arc consistency [3].", "startOffset": 165, "endOffset": 168}, {"referenceID": 1, "context": "For a binary CSP instance with maximum domain size d, n variables and e non-trivial constraints there are optimal O(ed2) algorithms for establishing arc consistency [4] and O(ned3) algorithms for establishing singleton arc consistency [3].", "startOffset": 235, "endOffset": 238}, {"referenceID": 18, "context": "replaced by b in any solution [20].", "startOffset": 30, "endOffset": 34}, {"referenceID": 12, "context": "A pattern is called irreducible if it has no dangling points and no mergeable points [14].", "startOffset": 85, "endOffset": 89}, {"referenceID": 11, "context": "In the case of Q2, the operation is BTP-merging [13].", "startOffset": 48, "endOffset": 52}, {"referenceID": 13, "context": "We point out that certain interesting forbidden patterns, such as BTP [15], NegTrans [16], and EMC [17] are not natural.", "startOffset": 70, "endOffset": 74}, {"referenceID": 14, "context": "We point out that certain interesting forbidden patterns, such as BTP [15], NegTrans [16], and EMC [17] are not natural.", "startOffset": 85, "endOffset": 89}, {"referenceID": 15, "context": "We point out that certain interesting forbidden patterns, such as BTP [15], NegTrans [16], and EMC [17] are not natural.", "startOffset": 99, "endOffset": 103}, {"referenceID": 12, "context": ",T5 were identified in [14] as the maximal 2-constraint irreducible tractable patterns.", "startOffset": 23, "endOffset": 27}, {"referenceID": 10, "context": "This class is incomparable with language-based generalisations of 2-SAT, such as the class ZOA [12], since in CSP(Q1) degree-2 variables can be constrained by arbitrary constraints.", "startOffset": 95, "endOffset": 99}, {"referenceID": 12, "context": "R8 and R7- generalise T4 and CSP(T4) generalises ZOA [14], so CSP(R8) and CSP(R7-) are strict generalisations of ZOA.", "startOffset": 53, "endOffset": 57}, {"referenceID": 14, "context": "The pattern V is known to be tractable since all instances in CSP(V) satisfy the joint-winner property [16].", "startOffset": 103, "endOffset": 107}, {"referenceID": 11, "context": "A reduction operation that cannot introduce Q2 Two values a, b \u2208 D(x) are BTPmergeable [13] if there are not two other distinct variables y, z 6= x such that \u2203c \u2208 D(y), \u2203d \u2208 D(z) with ad, bc, cd positive edges and ac, bd negative edges as shown in Figure 7.", "startOffset": 87, "endOffset": 91}, {"referenceID": 11, "context": "It is known that BTP-merging preserves satisfiability [13].", "startOffset": 54, "endOffset": 58}, {"referenceID": 17, "context": "Because Ixv[X\\Y ] is arc consistent and acyclic it has a solution [19], and we can conclude that in this case Ixv has a solution.", "startOffset": 66, "endOffset": 70}, {"referenceID": 9, "context": "Note that CSP(V2) is trivially decided by SAC (for instance because it is a subpattern of T4), and CSP(M\u0302) is NP-complete [11].", "startOffset": 122, "endOffset": 126}, {"referenceID": 15, "context": "In addition to settling the remaining patterns, a possible line of future work is to study sets of patterns or partially-ordered patterns [17] that give rise to SAC-solvable (natural) classes of CSPs.", "startOffset": 138, "endOffset": 142}], "year": 2017, "abstractText": "Singleton arc consistency is an important type of local consistency which has been recently shown to solve all constraint satisfaction problems (CSPs) over constraint languages of bounded width. We aim to characterise all classes of CSPs defined by a forbidden pattern that are solved by singleton arc consistency and closed under removing constraints. We identify five new patterns whose absence ensures solvability by singleton arc consistency, four of which are provably maximal and three of which generalise 2-SAT. Combined with simple counter-examples for other patterns, we make significant progress towards a complete classification.", "creator": "LaTeX with hyperref package"}}}