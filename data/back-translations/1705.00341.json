{"id": "1705.00341", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Apr-2017", "title": "Deriving Quests from Open World Mechanics", "abstract": "Open-world games offer players more freedom than games with linear progression structures, but without clearly defined goals, they often leave players without meaning and purpose. Quests and objectives are mostly written by hand and laid over the mechanics of an open world. But, what if they could be generated organically from the gameplay itself? The goal of our project was to develop a model of mechanics in Minecraft that can determine the ideal placement of targets in an open world. We formalized Minecraft's game logic in terms of logical rules that can be manipulated in two ways: They can be run to create graphics that represent the player experience when a game is played in an open world without a developer direction; and they can be statistically analyzed to determine dependency orders, feedback loops, and bottlenecks; these analyses can then be used to place performances algorithmically on gameplay actions.", "histories": [["v1", "Sun, 30 Apr 2017 16:47:57 GMT  (672kb,D)", "http://arxiv.org/abs/1705.00341v1", "To appear at Foundations of Digital Games (FDG) 2017"]], "COMMENTS": "To appear at Foundations of Digital Games (FDG) 2017", "reviews": [], "SUBJECTS": "cs.MM cs.AI", "authors": ["ryan alexander", "chris martens"], "accepted": false, "id": "1705.00341"}, "pdf": {"name": "1705.00341.pdf", "metadata": {"source": "CRF", "title": "Deriving\u0083ests from Open World Mechanics", "authors": ["Ryan Alexander", "Chris Martens"], "emails": ["rjalexan@ncsu.edu", "martens@csc.ncsu.edu", "permissions@acm.org."], "sections": [{"heading": null, "text": "KEYWORDS procedural content generation, quests, Minecra , game modeling ACM Reference format: Ryan Alexander and Chris Martens. . Deriving ests from Open World Mechanics. In Proceedings of Foundations of Digital Games Conference, Cape Cod, MA, August 2017 (FDG2017), 6 pages. DOI:"}, {"heading": "1 INTRODUCTION", "text": "In an open world game, players enjoy a great deal of autonomy in selecting from a complex system of mechanics, explorable spaces, and goals. Rather than experiencing a prescribed linear (or partiallyordered) progression of challenges and plot points orchestrated by a game designer, players are free to experiment with the consequences of the game\u2019s mechanics and exhibit more creativity in deciding what to do, frequently devising their own goals. In the framework of Jesper Juul [6], open world games emphasize emergence over progression: they are more interested in opening a wide space of explorable consequences of the game\u2019s mechanics than in delivering a speci c sequential experience.\nMinecra is a popular example of such a game, whose open world mechanics are supported by procedurally generated terrain: players canmine the terrain for natural resources, which they then cra into new tools necessary for survival, exploration, and additional mining.\nPermission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro t or commercial advantage and that copies bear this notice and the full citation on the rst page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permi ed. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speci c permission and/or a fee. Request permissions from permissions@acm.org. FDG2017, Cape Cod, MA \u00a9 ACM. . . .$15.00 DOI:\nMinecra also comes with a hand-authored achievement tree (see Figure 1) that serves to overlay some progression structure on top of the open world mechanics: the player is noti ed Achievement Unlocked when they reach certain points in their exploration of the game\u2019s mechanics, and eventually they may be led down any of several branches to nd special items and characters.\nClearly, although open worlds without prescriptive goals have wide appeal, progression structures such as quests provide something that players are missing: a sense of purpose or progress as they navigate the game\u2019s mechanics. However, once players complete Minecra \u2019s hand-authored achievement tree and special quests, they are back to where they started in a directionless open world. is quandary leads us to our problem statement: could we procedurally generate quests based purely on an open world game\u2019s mechanics?\nExamination of Minecra \u2019s hand-authored achievement tree suggests that much of it could be derived algorithmically. e tool cra ing portion of the tree is a prime example of this, due to the cyclical nature of the cra ing system. Making new tools and using new materials for tools are rewarded with achievements. By examining these gameplay elements we can determine why they were chosen to have achievements and how to apply that decision making to other elements.\nWe present a formal computational model of Minecra \u2019s mining and cra ing rules that is amenable to algorithmic treatment analogous to a topological sort of these mechanics. e results align naturally to progression structures in the game and suggest locations in game traces where achievements might be placed. Furthermore, we show how two distinct analyses of the rules provide distinct progression structures.\nOur results constitute a novel approach to quest generation, based not on a model of story distinct from a game\u2019s mechanics, but in fact derived from them and directly leveraging their emergent behavior. As a secondary contribution, we illustrate the methodological value in using a formal modeling tool based on logic to gain insight into a game\u2019s mechanics."}, {"heading": "2 RELATEDWORK", "text": "On a broad level, the context for this work is the eld of procedural content generation (PCG). Within this eld, we observe a shi in interest from algorithms that can create artbitrary, varied content to those that can generate to t a spec cation, such as the argument for generating with ASP [9], a framework whose primary edge is its rich constraint speci cation capabilities.\nOthers have also observed that, while PCG traditionally has centered on cra ing content to t with the emergent dynamics of a game (such as level generation), generating progression structures such as narrative and quests poses novel and important challenges. For instance, the Grail framework [10] addresses the problem of constructing quests whose goals may have emergent solutions\nar X\niv :1\n70 5.\n00 34\n1v 1\n[ cs\n.M M\n] 3\n0 A\npr 2\n01 7\nbased on the game\u2019s mechanics, rather than scripted solutions based on the author\u2019s intended path for the player. Likewise, the Symon project [5] procedurally generates fetchquest-style narrative puzzles from a exible de nition of object interactions. Compared to our work, the goals of these projects were di erent: rather than starting with an open world and building quest content atop it, they aim to allow an author to specify only enough world rules for the generator to create a exible range of playable story content.\ne \u201cmission/space\u201d dichotomy [3] explicitly formulates the integration of generating spatial content (e.g. levels) with progression content (e.g. missions). First author Dormans also provides a more thorough theoretical account of integrating emergence and progression [2]. Dormans et al.\u2019s work closely relates to ours in that it explicitly addresses co-generation of an open, explorable world, and an ordered, nite progression, including consideration of how to generate a space to t a provided mission, or an emergent structure from a progression. Our work explores the opposite direction, generating progression structures from emergent ones, and further considers richer world mechanics (cra ing, mining) than the lockand-key-based level exploration primarily explored by Dormans et al.\nRecent interest in general level generation [7] poses a problem quite similar to the one we are addressing: how can a program, given a game\u2019s mechanics (speci ed in VGDL), generate a level (including a goal condition) for the game? In this framework, the level serves as the progression structure (an initial condition and a goal) whereas the games rules, speci ed in terms of which entities exist, their properties, and how they interact with other properties, create emergence. is problem aligns very well with the case we examine of taking Minecra \u2019s open world rules and generating a beginning and end condition for a player to interact with them.\nFinally, others have considered the problem of the quest in a generated world [1], which is similar to the idea of generating quests for an open world in that what a player can do within the world is not known at the outset. ey formulate a quest in terms of spatial progression, and their system considers randomly generated levels and generates lock-and-key puzzles for them. In this work, the actions that make up the quest (collecting keys and unlocking doors) are layered atop a generated world without a pre-existing set of emergent rules. Our work seeks to construct quests not by adding a ordances (keys, locks) to a generated world but by making use of existing game world rules, which permits us to directly integrate the actions a player takes to complete a quest with the mechanics that permit open play."}, {"heading": "3 BACKGROUND", "text": ""}, {"heading": "3.1 Emergence and Progression in Minecra", "text": "Emergence and progression are terms used by Jesper Juul [6] to describe two di erent modes of gameplay. Progression structures engage the player through a structured set of objectives or quests. Emergent play revolves around the naturally occurring events that stem from a small number of simple rules. ere are drawbacks to both methodologies used in isolation: games of pure progression may feel \u201crailroaded\u201d to the player, and furthermore demand more time from developers to hand cra the desired experience, while games of pure emergence risk overwhelming players with the vast\nspace of possibilities available to them, or alternatively boring them with no clear direction for advancement. us, many games, such as Minecra , utilize elements of both: they provide a simple set of open-ended mechanics for exploratory play while also adding quests and achievements to give the player a sense of progression.\nMinecra is an open world survival game, where players can traverse an in nite terrain of blocks. ese blocks come in a variety of materials and can be collected by the player then used to build structures or make items. Due to the open world se ing, there are no restrictions on where the player can go, which lends more freedom to the playing experience. Alongside this lack of boundaries, also comes a lack of explanation. Upon spawning into the game, players have \u201cno clear idea of what he or she can do within the world\u201d [4]. e only hint is a message informing players that they have unlocked an achievement upon opening their inventory. ese achievements are the main source of progression in this mostly emergent game.\nIn Minecra , achievements are optional objectives that the player can choose to accomplish. e achievement menu displays them as a tree where one achievement will serve as a requirement for completing another. ere is no in-game reward for completing an achievement, other than unlocking the ability to see the next achievements in the tree. As shown in Figure 1, each achievement has a square icon linked to other achievements by a line. e colors of the icons and lines represent the status of the achievement. Bright icons indicate that the achievement has been unlocked, darker icons mean that the achievement is not unlocked but can be unlocked and its details are visible to the player. e darkest icons signal that an achievement cannot be unlocked yet and the player does not have access to information about the achievement. Similarly, gray lines link unlocked achievements, green join unlocked achievements to those that can be unlocked, while black lines connect locked objectives."}, {"heading": "3.2 ests, Achievements, and Objectives", "text": "So far, we have been using the terms quest, achievement system, and objective placement relatively interchangeably. In this work, we adopt a simpli ed notion of quest meaning, essentially, a subset of the nodes in a gameplay trace that are recognized by the game\nsystem as progress (e.g. with \u201cachievement\u201d messages). An objective in this framework is simply some communication of the fact that the player should try to reach achievement nodes. We do not closely examine these communication mechanisms (e.g. Minecra \u2019s achievement tree conveys a great deal of information about achievements\u2019 inter-dependency, whereas in some games, how to complete achievements is le completely opaque)."}, {"heading": "3.3 Ceptre", "text": "Designing quests from the rules of a game requires formalizing its mechanics in a way that is analyzable by an algorithm. We created our formal model of Minecra \u2019s mechanics in Ceptre [8], which allows us to represent game logic in a high-level, quicklyprototypable, yet rigorous and formal way.\nCeptre is a rule-based speci cation language describing how program states (e.g. game states) may evolve. Each Ceptre rule consists of a le -hand side (LHS), its inputs, and a right-hand side (RHS), its outputs. A collection of rules is interpreted by multiset rewriting: an initial state is supplied, a multiset of predicates. en, each step of execution involves selecting a rule that may re in the current state, and ring it, which means replacing the elements in the multiset that match the LHS of the rule with new elements matching the RHS.\nCollections of rules within Ceptre programs are called stages, and each stage may be designated as autonomous or interactive. When a stage runs manually, Ceptre displays a list of possible state transitions to the user from which she may choose to step the program forward. If the program is run autonomously, it will randomly pick possible transitions until no more remain.\nRegardless of which method is used, it is possible to view a visual representation of the rules that were executed by generating the trace graph such as the one shown in Figure 5. ese traces provide information about how rules t together to help establish where any progression occurs. Being able to analyze how rules interoperate this way is the main reason Ceptre was chosen for this project. Running Ceptre code autonomously multiple times creates a random sampling of play trace space and generates corresponding trace graphs that visually demonstrate how the rules interact, while manually running the code allows the user to see each step of the process."}, {"heading": "4 A FORMAL MODEL OF MINECRAFT", "text": "e game mechanics we chose to look at in Minecra fall into two groups, rules for gathering materials and rules to cra tools from those materials. In this section, we discuss the Minecra rules we chose to represent and how they are formalized in Ceptre.\nFirst, we encoded various facts about the world, such as the quantity of materials carried by the player, which tools she has built out of which materials, and so on, as predicates in Ceptre. e mapping from predicate to Minecra state is shown in Table 1. Note that predicates with arguments are wri en in Ceptre with adjacency, e.g. pred Arg, rather than with parentheses."}, {"heading": "4.1 Rules", "text": "4.1.1 Rules for Gathering. e rst category of rules is based on taking resources found in the world of Minecra and re ning\ncraftTable : plank (N + 4) -o cT * plank N.\nFigure 2: Cra ing a cra ing table using the inventory menu and its formalization in Ceptre.\nthem into materials for cra ing items and tools. For the purpose of this project, a distinction has been made between gathering and mining. While both involve collecting resources, mining refers to the materials that can only be collected when using a pickaxe, one of the tools in the game. Due to this limitation, the gathering rules only include the recipes needed to make a wood pickaxe and begin mining.\nAn example of a gathering rule is one that will allow the player to gather wood from a tree: tree : wood (N+1) -o wood_block 1 * wood N.\nHow to parse this rule: the rule is named tree. e name is separated from the rule itself with a colon (:). e rule\u2019s LHS is wood (N+1), meaning that for the rule to re, there must be some number of trees representable as N + 1 for some N . A er the rule res, this predicate will be consumed, meaning there will no longer be N + 1 trees. e rule\u2019s RHS is wood_block 1 * wood N, which is two predicates conjoined with tensor (*). e rst predicate, wood_block 1, means that ring the rule results in the player having 1 wooden block. e second predicate wood N means that a er the rule res, there will be N trees, which is 1 fewer than what we started with.\nAt an early stage in the game, the player has access to a cra ing interface that is a 2x2 grid serving as the input for materials, and a single square on the right for the recipe\u2019s output. By lling the grid with wooden planks, the player is able to produce a cra ing table block. Interacting with the cra ing table is what provides\naccess to the 3x3 cra ing menu needed for more complex recipes, such as tools. e rule for creating a cra ing table is shown in both Minecra \u2019s cra ing interface and as a rule in Ceptre in Figure 2.\n4.1.2 Rules for Tools and Mining. A er creating a cra ing table and gaining access to the 3x3 interface, the program can move on to tools and the materials needed to make them. e tools in Minecra are shovels, swords, axes, hoes, and pickaxes. All of these recipes involve a combination of materials and sticks. e material used to create a tool dictates the strength and durability of a tool. Some materials may only be collected by tools of a certain strength, so upgrading to a higher tier opens up new cra ing opportunities for the player. While Minecra has a system in place where the condition of a tool decreases a er prolonged use until it breaks and disappears, for the purposes of this project that feature is not represented in the rules. If the program creates one of a tool at a certain strength level, it does not need to make another of that same material. e strength levels go from wood as the weakest, then stone, iron/gold, and diamond is the strongest. Gold is a special case in that it requires an iron pickaxe to be collected, but is not stronger than iron. All of these materials must be mined using a pickaxe of the tier directly below it, except for wood which is already covered under gathering.\nPickaxes in Minecra are cra ed by placing three of a material in the top row and two sticks in the remaining spots of the middle column, as shown in Figure 3. e Ceptre representation of this recipe is shown underneath the game screenshot. e rule consumes a cra ing table, at least two sticks, and at least three wooden planks, and it produces a wooden pickaxe and any remaining sticks and planks, as well as the cra ing table. e cra ing table is not destroyed during this process, so the symbol \u201c$\u201d is used to indicate that the predicate appears on both sides of the rule. e term wood is the material argument to the pickaxe predicate.\ne player can then use a wooden pickaxe to mine stone, codi ed by the following rule: mineStone : $pickaxe M * stone (N + 1) * cobble C -o\ncobble (C + 1) * stone N.\nWhen given a pickaxe and at least one block of stone, this mine/stone rule can be called to return the same pickaxe, one more piece of cobblestone, and any remaining stone. e di erence between cobblestone (represented by the \u201ccobble\u201d predicate) and stone in Minecra is that stone is found more commonly, but becomes\ncobblestone when broken with a pickaxe. Cobblestone is used for cra ing stone tools, while stone cannot. Also, breaking stone without a pickaxe results in no cobble being dropped, which is why wooden pickaxes must be cra ed beforehand. However, a pickaxe of any material can be used to mine stone, so the \u201cM\u201d signi es that any pickaxe may be used as a predicate.\nOnce the player has stone, they are able to use it to make tools like in Figure 4 where a stone pickaxe is being Cra ed in Minecra and in Ceptre. e similarities between Figure 3 and Figure 4 are evident both in the game and in the code. Any wooden planks in the recipe were replaced by cobblestone. is basic pa ern became a key component in determining quest placement."}, {"heading": "5 TRACE ANALYSIS", "text": "In order to understand how the rules operate in relationship to each other, the program was run both autonomously and interactively. ese procedures provided insight into how the rules were connected, allowing us to analyze the progression elements in the gameplay. When generating these models, the main pa erns we\nlooked for were bo lenecks and feedback loops. e gameplay of Minecra , speci cally the mining aspect, tends to be cyclical with players repetitively making stronger tools and nding stronger materials. Running the Ceptre model helped us identify key rules that stratify this process into stages.\nAs more rules re, the number of possible choices in the system increases. Each run begins with the same rules being necessary, speci cally the rules for gathering wood and making the cra ing table and sticks\u2014the cra ing table recipe is an important node in all play traces, because no tools may be cra ed until the player has made it. Such a node represents a bo leneck in the mechanics.\nOnce the program has these materials, rules for wooden tools can be run, which opens access to the mining rules. e mining rules must re multiple times in order to have su cient resources to create a tool. e way that these rules are repeated hints towards their signi cance in the player experience. is interactive model represents the player experience through text, but is similarly timeconsuming. A er the initial discovery of how important the mining rules were and how the cra ing table expands the player\u2019s options, we moved on to studying the trace graphs to generate larger batches of data to compare.\nTrace graphs are a visual representation of all rules selected during a run of the program\u2014see Figure 5. is trace graph shows that the tree rule is dependent on itself, since having some number of trees in the environment is both a requirement for the rule and an outcome. We can also see that the numeric argument to the rule decreases on each subsequent ring of the rule, and that the other resources generated (the wood blocks) are used in other, unrelated rules. ese graphs allowed us to compare multiple possible outcomes when the program is given the same initial resources. ese comparisons reinforced the results found through the interactive testing and highlighted the signi cance of the mining rules. e high likelihood that a player will perform these actions multiple times during a playthrough indicates that objectives such as \u201cMine X amount of stone\u201d might be worthwhile. While these quests tend to be viewed as unoriginal and tedious, if the value for \u201cX\u201d is chosen based on the expected amount of times a player will perform this action through the course of playing the game naturally, it can potentially make a task that is tedious in general more rewarding. Creating multiples of these trace graphs and analyzing how many times certain rules are run can help determine what an appropriate \u201cX\u201d value is for that rule."}, {"heading": "6 STATIC ANALYSIS", "text": "We have identi ed two di erent methods for organizing rules that separate segments of a trace into di erent phases base on static analysis of the LHS for each rule. We generated a static dependency graph between rules, where an edge between R1 and R2 indicates that R2 consumes predicates that R1 produces. en, we collapsed rules with similar LHS together into a single node with a list of possible alternate arguments. We then interpret the bo leneck points and actions immediately following them as game events that should be rewarded with achievements. e two factors that were used to determine which LHSes were similar were the materials represented as arguments to predicates and the quantities of raw materials that a rule required, which corresponds to its tool type.\ncurrently has achievements.\nMaterial-Based Sorting. One way to sort these rules is based on the type of material they require. All tools in Minecra are a combination of sticks and the material that determines the tools strength. Figure 6 groups rules that have the same inputs together. e wood section is all of the rules that take some amount of sticks and wood as inputs, the stone rules have inputs of sticks and stone and so on. Objectives based on this type of organization\ncould reward players for unlocking improved versions of items or abilities that were previously accessible. An example of this is the Minecra achievement \u201dGe ing an Upgrade\u201d that rewards the player for acquiring a stone pickaxe, which in Figure 6 would be the seen as moving from the wood group to the stone group. ese types of goals reward the player by enhancing an aspect of the gameplay that they are already familiar with. In Minecra , the stone pickaxe performs the same basic mining function as the wooden one, but does it faster and on resources that are too strong to be collected by the wood pickaxe. is method of organizing is useful for nding objectives that make the player stronger.\nantity-Based Sorting. A di erent approach to organizing rules is based on the number of materials that the rule takes. In Minecra , pickaxes are made with two sticks and three of another material, while swords are one stick and two of a material. Focusing on the format of the recipe instead of on the speci c ingredients leads to grouping tools that have similar functionality , but di ering strength. is method is shown in Figure 7 where rules are grouped by the type of tool that is produced. ere are achievements for the player cra ing their rst hoe, sword, and pickaxe, which are all marked in the rst node of their respective groups. ese achievements all represent the player unlocking a new element of gameplay. Hoes, swords, and pickaxes are the critical tools for farming, combat, and mining respectively. Categorizing rules based on the quantities of inputs aids in the formation of objectives that reward the player with new ways to play the game."}, {"heading": "7 CONCLUSION", "text": "rough our formalization and analysis of the rules of Minecra in Ceptre, we have shown that it is possible to re-discover handauthored progression structures algorithmically from the openworld mechanics of the game. is process can help explain and identify ideal achievement placement in open world se ings. We carried out two analyses: an informal examination of the play traces resulting from autonomous execution of the rules, and a formal analysis of the static, syntactic structure of the encoded rules\nthemselves. e algorithmic discoveries we have made about the system dynamics match up with achievements that were manually authored for Minecra .\nIn future work, we hope to apply this process of deriving progression structures from mechanics to other games, particularly those that do not already have manually-authored quests or achievements. We also intend to devise alternative achievement placement strategies and compare them to the two sorting-based strategies.\ne ultimate goal of such a research programme is to improve the player\u2019s sense of purpose in open world games by providing more a ordances for potential intermi ent objectives, where those objectives stem organically from the gameplay itself."}], "references": [{"title": "\u008ce quest in a generated world", "author": ["Calvin Ashmore", "Michael Nitsche"], "venue": "In Proc. 2007 Digital Games Research Assoc.(DiGRA) Conference: Situated Play", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "Integrating emergence and progression", "author": ["Joris Dormans"], "venue": "In \u008aink Design Play: Proceedings of the 2011 Digital Games Research Association Conference, Hilversum the Netherlands", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Generating missions and spaces for adaptable play experiences", "author": ["Joris Dormans", "Sander Bakkes"], "venue": "IEEE Transactions on Computational Intelligence and AI in Games 3,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "Minecra\u0089, beyond construction and survival. Well Played: a journal on video games, value and meaning", "author": ["Sean Duncan"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Procedural generation of narrative puzzles in adventure games: \u008ce puzzle-dice system", "author": ["Clara Fern\u00e1ndez-Vara", "Alec \u008comson"], "venue": "In Proceedings of the \u008ae third workshop on Procedural Content Generation in Games. ACM,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Half-Real: Video Games between Real Rules and Fictional Worlds", "author": ["Jesper Juul"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2005}, {"title": "General video game level generation", "author": ["Ahmed Khalifa", "Diego Perez-Liebana", "Simon M Lucas", "Julian Togelius"], "venue": "In Proceedings of the 2016 on Genetic and Evolutionary Computation Conference", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2016}, {"title": "Ceptre: A Language for Modeling Generative Interactive Systems. In Arti\u0080cial Intelligence and Interactive Digital Entertainment", "author": ["Chris Martens"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "A case study of expressively constrainable level design automation tools for a puzzle game", "author": ["Adam M Smith", "Erik Andersen", "Michael Mateas", "Zoran Popovi\u0107"], "venue": "In Proceedings of the International Conference on the Foundations of Digital Games. ACM,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "Making quests playable: Choices, CRPGs, and the Grail framework", "author": ["Anne Sullivan", "Michael Mateas", "Noah Wardrip-Fruin"], "venue": "Leonardo Electronic Almanac 17,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}], "referenceMentions": [{"referenceID": 5, "context": "In the framework of Jesper Juul [6], open world games emphasize emergence over progression: they are more interested in opening a wide space of explorable consequences of the game\u2019s mechanics than in delivering a speci\u0080c sequential experience.", "startOffset": 32, "endOffset": 35}, {"referenceID": 8, "context": "Within this \u0080eld, we observe a shi\u0089 in interest from algorithms that can create artbitrary, varied content to those that can generate to \u0080t a spec\u0080cation, such as the argument for generating with ASP [9], a framework whose primary edge is its rich constraint speci\u0080cation capabilities.", "startOffset": 200, "endOffset": 203}, {"referenceID": 9, "context": "For instance, the Grail framework [10] addresses the problem of constructing quests whose goals may have emergent solutions ar X iv :1 70 5.", "startOffset": 34, "endOffset": 38}, {"referenceID": 4, "context": "Likewise, the Symon project [5] procedurally generates fetchquest-style narrative puzzles from a \u0083exible de\u0080nition of object interactions.", "startOffset": 28, "endOffset": 31}, {"referenceID": 2, "context": "\u008ce \u201cmission/space\u201d dichotomy [3] explicitly formulates the inte-", "startOffset": 29, "endOffset": 32}, {"referenceID": 1, "context": "First author Dormans also provides a more thorough theoretical account of integrating emergence and progression [2].", "startOffset": 112, "endOffset": 115}, {"referenceID": 6, "context": "Recent interest in general level generation [7] poses a problem quite similar to the one we are addressing: how can a program, given a game\u2019s mechanics (speci\u0080ed in VGDL), generate a level (including a goal condition) for the game? In this framework, the level serves as the progression structure (an initial condition and a goal) whereas the games rules, speci\u0080ed in terms of which entities exist, their properties, and how they interact with other properties, create emergence.", "startOffset": 44, "endOffset": 47}, {"referenceID": 0, "context": "Finally, others have considered the problem of the quest in a generated world [1], which is similar to the idea of generating quests for an open world in that what a player can do within the world is not known at the outset.", "startOffset": 78, "endOffset": 81}, {"referenceID": 5, "context": "Emergence and progression are terms used by Jesper Juul [6] to describe two di\u0082erent modes of gameplay.", "startOffset": 56, "endOffset": 59}, {"referenceID": 3, "context": "Upon spawning into the game, players have \u201cno clear idea of what he or she can do within the world\u201d [4].", "startOffset": 100, "endOffset": 103}, {"referenceID": 7, "context": "created our formal model of Minecra\u0089\u2019s mechanics in Ceptre [8], which allows us to represent game logic in a high-level, quickly-", "startOffset": 59, "endOffset": 62}], "year": 2017, "abstractText": "Open world games present players with more freedom than games with linear progression structures. However, without clearly-de\u0080ned objectives, they o\u0089en leave players without a sense of purpose. Most of the time, quests and objectives are hand-authored and overlaid atop an open world\u2019s mechanics. But what if they could be generated organically from the gameplay itself? \u008ce goal of our project was to develop a model of the mechanics in Minecra\u0089 that could be used to determine the ideal placement of objectives in an open world se\u008aing. We formalized the game logic of Minecra\u0089 in terms of logical rules that can be manipulated in two ways: they may be executed to generate graphs representative of the player experience when playing an open world game with li\u008ale developer direction; and they may be statically analyzed to determine dependency orderings, feedback loops, and bo\u008alenecks. \u008cese analyses may then be used to place achievements on gameplay actions algorithmically.", "creator": "LaTeX with hyperref package"}}}