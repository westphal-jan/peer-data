{"id": "1705.10639", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-May-2017", "title": "Grammatical Inference as a Satisfiability Modulo Theories Problem", "abstract": "The problem of learning a minimally consistent model from a series of labeled symbol sequences is considered from the perspective of satisfaction module theory. We present two encodings for deterministic finite automata and extend one of them for Moore and Mealy machines. Our experimental results show that these encodings improve the state of the art and are useful in practice for learning small models.", "histories": [["v1", "Tue, 30 May 2017 13:48:15 GMT  (14kb)", "http://arxiv.org/abs/1705.10639v1", "Submitted and selected for oral presentation at the LearnAut workshop at LICS 2017"]], "COMMENTS": "Submitted and selected for oral presentation at the LearnAut workshop at LICS 2017", "reviews": [], "SUBJECTS": "cs.FL cs.LG cs.LO", "authors": ["rick smetsers"], "accepted": false, "id": "1705.10639"}, "pdf": {"name": "1705.10639.pdf", "metadata": {"source": "CRF", "title": "Grammatical Inference as a Satisfiability Modulo Theories Problem", "authors": ["Rick Smetsers"], "emails": ["r.smetsers@cs.ru.nl"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 5.\n10 63\n9v 1\n[ cs\n.F L\n] 3\n0 M\nay 2\n01 7\nI. INTRODUCTION\nOne of the best studied problems in grammatical inference is that of finding a deterministic finite automaton (DFA) of minimal size that accepts a given set of positive examples and rejects a given set of negative examples of an unknown language. This problem can be very hard. It is the optimization variant of the problem of finding a consistent DFA of a fixed size, which has been shown to be NP-complete [1].\nIn [2], Coste and Nicolas observe that this problem can be encoded as a graph coloring problem. The intuition behind their encoding is as follows. First, a tree-shaped DFA is constructed that accepts exactly the positive examples and rejects exactly the negative ones. Each state in this DFA is represented by a vertex in a conflict graph. Two vertices in the graph are connected by an edge if one vertex represents an accepting state and the other represents a rejecting state. Now, the problem at hand is to color this graph, with the additional constraint that for states that are represented by vertices of the same color, their parents have to be represented by vertices of the same color as well. For such a coloring, a minimal DFA can be constructed in which each state is represented by a different color.\nIn [3], Heule and Verwer propose an encoding of the aforementioned graph coloring problem in propositional logic. Satisfiability, or SAT, is the problem of deciding if there exists an assignment to a propositional logic formula that makes it true. To prove that the minimal size of a DFA is n, Heule and Verwer use an iterative procedure to determine that an encoding for n colors is satisfiable, but an encoding for n\u2212 1 colors is unsatisfiable.\nFor many applications, encoding the problems into propositional logic is not the right choice. Frequently, a better alternative is to express the problems in a richer logic. A first effort in this direction was made by Bruynooghe et. al. [4], who express the encoding by Heule and Verwer in a predicate logic.\nIn this paper we encode the aforementioned grammatical inference problem as a satisfiability modulo theories (SMT) problem. SMT is the problem of deciding the satisfiability of a formula with respect to one or more background theories expressed in first-order logic, that is, if there exists a SAT assignment consistent with these theories.\nOur encoding has several advantages over the one mentioned before. First, we show that it is faster in practice. Second, it benefits from the continuous efforts by fellow researchers on making SMT solvers more powerful. Third, we argue that it is more natural, because it makes a distinction between the logic that is required to solve the problem, and the logic imposed by the background theories. This allows us to easily extend the encoding to Moore and Mealy machines, and address a wider range of grammatical inference problems."}, {"heading": "II. SATISFIABILITY MODULO THEORIES", "text": "Let us first recall some basic terminology for propositional logic. In our presentation, we borrow notational conventions from [5]. Let P be a set of Boolean variables. Such a variable p \u2208 P can be assigned either true or false. A literal l is a variable p or its negation \u00acp. A clause C is a disjunction of literals l1 \u2228 . . . \u2228 ln. A unit clause is a clause consisting of a single literal. The negation of a clause C is a conjunction of the negations of its literals \u00acl1 \u2227 . . . \u2227 \u00acln. A formula F is a conjunction of clauses C1 \u2227 . . . \u2227 Cn. Finally, a (partial) assignment M is a (partial) mapping of variables to true or false. A (partial) assignment can be seen as a conjunction of literals, and hence as a formula.\nA clause C is true in an assignment M if at least one of its literals is in M . It is false in M if all of the negations of its literals are in M . Otherwise, it is undefined in M . A formula F is true in M , if all of its clauses are true in M . In that case, M is a model of F .\nSatisfiability (SAT) is the problem of deciding for a given formula F if there exists an assignment M that is a model for F . If no such assignment exists, then F is called unsatisfiable.\nBefore we give a description of satisfiability modulo theories, let us briefly recall the necessary notions of firstorder logic. We refer to [6] and [5] for a more detailed explanation. Central to first-order logic are the notions of formulae, atoms, terms and variables. First-order formulae are clauses constructed over atoms, which are in turn predicates\nconstructed over Boolean variables and terms, which are in turn constructed over variables and constants that are defined over some (in our case finite) domain. A theory defines a set of valid formation rules for formulae, atoms and terms. For our theories (linear inequality and uninterpreted functions), these rules are as follows.\n\u2022 A term is inductively defined by the following rules:\n1) Any variable x is a term. 2) Any function f(t1, . . . , tn) over terms t1, . . . , tn is a term.\n\u2022 An atom is a statement that may be true or false,\ndepending on the value of its terms. It is defined as being either\n1) an expression of the form t = t\u2032 for terms t and t\u2032, or 2) a predicate P (t1, . . . , tn) over terms t1, . . . , tn; specifically we are concerned with inequality rela-\ntions (<,>,\u2264,\u2265).\n\u2022 A formula is inductively defined by the following rules:\n1) A disjunction of formulae (\u2228) is a formula. 2) A negation (\u00ac) of a formula is a formula. 3) An atom is a formula.\nEquality logic for uninterpreted functions is not concerned with the semantics for a function f . This means that f is not restricted by any axioms or rules of inference, if not explicitly added. The theory does, however, impose the standard equality axioms over its terms (reflexivity, symmetry and transitivity). In addition, functions are required to be functionally consistent, i.e.\nx1 = y1\u2227 . . .\u2227xn = yn =\u21d2 f(x1, . . . , xn) = f(y1, . . . , yn)\nSatisfiability modulo theories (SMT) is the problem of deciding satisfiability of a (conjunction of) first-order formula(e) with respect to one or more given theories. Typically, this problem is solved as follows. Initially, all atoms in the firstorder formula(e) are replaced by Boolean variables, forgetting about the theory (therefore, we consider the same definitions and notation as given before for the propositional case). The resulting (propositional) formula F is presented to a SAT solver. If a SAT solver determines it to be propositionally unsatisfiable, then we can conclude that the first-order formula is unsatisfiable as well. If, instead, the SAT solver finds a propositional model M for F , then M is given to a so-called theory solver that converts the model back to its first-order form, and checks if it is consistent with the theory. If this is the case then we can conclude that F is T -satisfiable and that M is a so-called T -model of F . Otherwise, the theory solver constructs a theory lemma. A theory lemma is a (propositional) clause C that is a logical consequence from the theory. The SAT solver is then started again for the formula F \u2227 C. This process is repeated until the SAT solver finds a T -model for F , or concludes it is unsatisfiable.\nHence, SMT is the problem of deciding for a given theory T and a given formula F , if F is T -satisfiable, or equivalently, if there exists a T -model of F . For a more detailed introduction\nto SMT we refer to [7]. Improvements to the basic approach for solving SMT problems include:\n\u2022 checking theory consistency of a (partial) assignment\nwhile it is being built,\n\u2022 restarting the SAT solver from a point where the (partial)\nassignment was consistent with the theory,\n\u2022 using a theory solver to guide the search for a satisfiable\nmodel by detecting literals that are a logical consequence of the theory, and \u2022 periodically replacing a theory T by a stronger theory\nT \u2227 T \u2032.\nThese recent improvements and ongoing advancements make SMT interesting from a grammatical inference perspective."}, {"heading": "III. GRAMMATICAL INFERENCE AS A SMT PROBLEM", "text": "Grammatical inference is the study concerned with learning formal languages. One of the best studied problems in grammatical inference is that of finding a deterministic finite automaton (DFA) of minimal size that accepts a given set of positive examples and rejects a given set of negative examples of an unknown regular language.\nA DFA is a finite state machine that accepts and rejects strings, which are sequences of symbols. Formally, we define it as a tuple (\u03a3, Q, q0, \u03b4, \u03bb), where \u03a3 is a finite alphabet of symbols, Q is a finite set of states, q0 is the initial state, \u03b4 : Q\u00d7\u03a3 \u2192 Q is a transition function for states and symbols, \u03bb : Q \u2192 B is an output function that returns true if a state is accepting, and false if it is rejecting.\nLet x be a string, then we use xi to denote the symbol at the ith position of x. The position i of a symbol in a string satisfies 1 \u2264 i \u2264 |x| (i.e. the first symbol of x is x1). We use x[i,j] to denote the substring of x starting at position i and ending at position j (inclusive), i.e. x = x[1,|x|]. A DFA D accepts a string x if, starting in the initial state, the unique computation for x ends in an accepting state. This can be formalized as follows. Let x be a string over \u03a3, then D accepts x if a sequence of states q\u20320 . . . q \u2032 |x| exists such that\n1) q\u20320 = q0, 2) q\u2032i = \u03b4(q \u2032 i\u22121, xi) for 1 \u2264 i \u2264 |x|, and 3) \u03bb(q\u2032|x|) = true. Let S+ be a sample of strings that should be accepted, and let S\u2212 be a sample of strings that should be rejected. Then one way of approaching the grammatical inference problem is by iteratively asking the following question.\nIs there a DFA of at most n states that is consistent with S = {S+, S\u2212}, i.e. accepts all strings in S+ and rejects all strings in S\u2212?\nIf such a DFA D of at most n states exists, and one with at most n \u2212 1 states does not exist, then D is a DFA of minimal size that is consistent with S. The goal is to find such a consistent minimal DFA."}, {"heading": "A. A natural encoding", "text": "This leads us to a natural encoding of the aforementioned problem in satisfiability modulo the theories of inequality and\nuninterpreted functions. Let us consider the set of states of D as a set of non-negative integers. Then the following axioms assert that D has at most n states:\n\u2200i \u2208 {0, . . . , n\u2212 1} \u2200a \u2208 \u03a3\nn\u22121\u2228\nj=0\n\u03b4(i, a) = j (1)\nRemark. The axioms in Equation 1 can also be encoded in the following way (if the solver supports linear inequalities):\n\u2200i \u2208 {0, . . . , n\u22121} \u2200a \u2208 \u03a3 \u03b4(i, a) \u2265 0 \u2227 \u03b4(i, a) < n (2)\nIf we assume without loss of generality that the initial state is 0, then we can add the following constraints for the strings in S+:\n\u2200x \u2208 S+ \u03bb( \u03b4(. . . \u03b4(\u03b4(0, x1), x2), . . . x|x|) ) = true (3)\nSimilarly, we can add the following constraints for the strings in S\u2212:\n\u2200x \u2208 S\u2212 \u03bb( \u03b4(. . . \u03b4(\u03b4(0, x1), x2), . . . x|x|) ) = false (4)\nThe constraints and axioms in Equations 1-4 are sufficient to determine if there is a DFA with at most n states that is consistent with S. If and only if the resulting formula is unsatisfiable, such a DFA does not exist. If it is satisfiable, however, the SMT solver\u2019s model provides us with \u03b4 and \u03bb. Hence, we can construct a minimal consistent DFA D for S by iteratively incrementing n (in Equation 1 or 2).\nUnfortunately, the nesting in the set of constraints given by Equations 3 and 4 might make it hard for the theory solver to determine if the formula is consistent with the constraints given by Equation 1 or 2."}, {"heading": "B. A more expressive encoding", "text": "One solution to this is to define the constraints implied by strings in a non-nested way. Similarly to Heule and Verwer [3], and Bruynooghe et. al. [4], we use an augmented prefix tree (APT) for this. We, however, introduce a more concise set of constraints. An APT A can be considered a partial, tree-shaped DFA that is exactly consistent with S, i.e. it accepts only the set S+ and rejects only the set S\u2212. For every state q of A there exists exactly one string that ends in q. Therefore, we denote the unique state that a string x ends in by qx. This implies that two strings x and y visit the same state if and only if they share a prefix, i.e. x[1,i] = y[1,i] for some 1 \u2264 i \u2264 min(|x|, |y|). We formally define an APT as (\u03a3, Q, q\u01eb, \u03b4, QS, \u03bb), where \u03a3 and Q are the same as before, q\u01eb is the initial state (i.e. the state reached by the empty string \u01eb), \u03b4 : Q \u00d7 \u03a3 \u21c0 Q is a partial transition function that satisfies the aforementioned property, QS = {qx \u2208 Q : x \u2208 S} is the subset of Q in which a string of S ends, and \u03bb : QS \u2192 B is an output function for these states. Indeed, no output is defined for the states in Q \\QS . Let us define the set of constraints for finding a DFA D = (\u03a3, QD, qD0 , \u03b4 D, \u03bbD) that is consistent with an APT A = (\u03a3, QA, qA\u01eb , \u03b4 A, QAS , \u03bb\nA) for a given sample S = {S+, S\u2212}. Recall that such a DFA is consistent if and only if it accepts all strings in S+ and rejects all strings in S\u2212, i.e. for each x\nin S \u03bbD(\u03b4D(q0, x)) = \u03bb A(qx) (we slightly abuse notation here by extending \u03b4 to strings). Such a DFA has at most as many states as the APT (but typically significantly less). Therefore, there must exist a surjective (i.e. many-to-one) function \u03c0 : QA \u2192 QD. Our goal is to find a set of constraints for \u03c0 that make sure that our target DFA D is consistent.\nFirst, let us encode the (partial) transition function \u03b4A:\n\u2200qxa \u2208 Q A : x \u2208 \u03a3\u2217, a \u2208 \u03a3 \u03b4D(\u03c0(qx), a) = \u03c0(qxa) (5)\nNow, let us encode the output function \u03bbA:\n\u2200q \u2208 QAS \u03bb D(\u03c0(qx)) = \u03bb A(qx) (6)\nThe problem at hand is to find a \u2018smallest\u2019 \u03c0 function; i.e. there should be no other function with a smaller image that satisfies these constraints. We can encode this as follows. Let us (again) consider the set of states of D as a set of nonnegative integers. Then the following axioms assert that D has at most n states:\n\u2200q \u2208 QA n\u22121\u2228\ni=0\n\u03c0(q) = i (7)\nRemark. The axioms in Equation 7 can also be encoded in the following way (if the solver supports linear inequalities):\n\u2200q \u2208 QA \u03c0(q) \u2265 0 \u2227 \u03c0(q) < n (8)\nAgain, these constraints and axioms are sufficient to determine if there is a DFA with at most n states that is consistent with S, and if the resulting formula is satisfiable the SMT solver\u2019s model provides us with \u03b4D and \u03bbD. Hence, we can construct a minimal consistent DFA D for S by iteratively incrementing n in Equation 7 or 8."}, {"heading": "C. An extension for Moore and Mealy machines", "text": "An advantage of the encoding presented in Section III-B (as opposed to the one presented in Section III-A) is that it can easily be extended to learn Moore and Mealy machines. In this section we present such an encoding.\nA Moore machine is a transducer that produces an output symbol in each state. Formally, it is a tuple (\u03a3,\u039b, Q, q0, \u03b4, \u03bb) where \u03a3, Q, q0 and \u03b4 are the same as for a DFA, \u039b is a finite alphabet of output symbols, and \u03bb : Q \u2192 \u039b is an output function. A Moore machine produces an output symbol every time it (re-)enters a state. Therefore, a sample S for a Moore machine consists of traces, which are pairs (x, y) where x = x1 . . . x|x| is a string over \u03a3 and y = y0y1 . . . y|x| is a string over \u039b (observe that |y| = |x|+ 1). A Mealy machine is a transducer whose output symbols are determined by both its current state and the current input symbol. Formally, it is the same as a Moore machine, except that \u03bb : Q\u00d7 \u03a3 \u2192 \u039b is a transition output function. A Mealy machine produces an output every time it makes a transition. A sample S for a Mealy machine consists of traces (x, y) where x = x1 . . . x|x| is a string over \u03a3 and y = y1 . . . y|x| is a string over \u039b (observe that |y| = |x|). It has been shown in [8] that Moore and Mealy machines are equi-expressive if we neglect the output produced by the initial\nstate of a Moore machine. Therefore, we can define an APT for a sample S of traces produced by either a Moore or Mealy machine M = (\u03a3,\u039b, QM , qM0 , \u03b4 M , \u03bbM ) in a similar way. We choose to define it as a tuple A = (\u03a3,\u039b, QA, qA\u01eb , \u03b4 A, \u03bbA), where \u03a3, \u039b, QA, qA\u01eb and \u03b4 A are as you would expect from previous definitions, and \u03bbA : QA \\ qA\u01eb \u2192 \u039b is an output function that is defined for all states except qA\u01eb . One can afterwards add \u03bbA(qA\u01eb ) = y0 for any output string y in S if M is a Moore machine.\nWe can now determine if there is a Moore or Mealy machine with at most n states that is consistent with S by using the set of constraints and axioms presented in Section III-B, if we\n1) define \u03c0 : QA \u2192 QM accordingly, 2) replace D with M in Equation 5, and 3) replace Equation 6 with Equation 9 (for Moore ma-\nchines) or 10 (for Mealy machines).\n\u2200q \u2208 QA \u03bbM (\u03c0(q)) = \u03bbA(q) (9)\n\u2200qxa \u2208 Q A : x \u2208 \u03a3\u2217, a \u2208 \u03a3 \u03bbM (\u03c0(qx), a) = \u03bb A(qxa) (10)"}, {"heading": "IV. EXPERIMENTAL RESULTS", "text": "We have implemented our encodings using the Python frontend of Z3 [9], and we have conducted some initial experiments that assess the scalability of the different encodings and their applicability in practice1.\nIn our first set of experiments we benchmark the running\ntimes of the following encodings:\n\u2022 Heule and Verwer\u2019s propositional encoding without re-\ndundant constraints [3, Table 1] (HV-1),\n\u2022 Heule and Verwer\u2019s propositional encoding with redun-\ndant constraints [3, Table 1] (HV-2),\n\u2022 Section III-A with Equation 1 (III-A-1), \u2022 Section III-A with Equation 2 (III-A-2), \u2022 Section III-B with Equation 7 (III-B-7), and \u2022 Section III-B with Equation 8 (III-B-8).\nFor this purpose, we define a DFA Dmodk = (\u03a3, Q, q0, \u03b4, \u03bb) that accepts strings x if |x| mod k = 0:\n\u2022 \u03a3 = {a}, \u2022 Q = {i \u2208 N : 0 \u2264 i < k}, \u2022 q0 = 0, \u2022 \u03b4(i, a) = (i + 1) mod k for i in Q, and \u2022 \u03bb(0) = true and \u03bb(i) = false for 1 \u2264 i < k.\nThis DFA Dmodk is then used to construct a benchmark sample Smodk for 1 \u2264 k \u2264 12 that contains all strings up to length 100 (i.e. \u03a3\u2264100). Results for the experiments are shown in Figure IV. The experiments were performed on an Intel Core i5-4258U processor and the timeout for an experiment was set to 10 minutes. Each experiment was repeated 5 times. Interestingly, the \u2018outliers\u2019 occurred consistently in these experiments.\nIn our second set of experiments we simulate the case study from [10]. Here, the authors use model learning [11]\n1See https://gitlab.science.ru.nl/rick/z3gi .\ntechniques to obtain Mealy machines for different bank cards2. We first use the Wp-method [12] to generate a characterizing sample for these Mealy machines. Then, we use the following encodings to reconstruct the Mealy machine:\n\u2022 Section III-C with Equations 7 and 10 (III-C-7), and \u2022 Section III-C with Equations 8 and 10 (III-C-8).\nThe results of the experiments are shown in Table I. Here, ||S|| = \u2211\nx\u2208S |x|. As expected, the learned models were equivalent to the source Mealy machines."}, {"heading": "V. CONCLUSIONS AND FUTURE WORK", "text": "We have presented an encoding in SMT for learning a minimal consistent DFA, Moore machine or Mealy machine from a set of sequences of symbols. Our experimental results show that these encodings improve upon the state-of-the-art, and are useful in practice. The time required to learn a model, however, grows rapidly in its number of states. In the future we wish to address this problem and extend this work by:\n1) defining a counterexample-driven algorithm that incre-\nmentally refines a minimal consistent model,\n2) combining our approach with existing learning algo-\nrithms, and\n3) extending the encoding for richer model formalisms,\nsuch as register automata.\n2See http://automata.cs.ru.nl/BenchmarkBankcard."}, {"heading": "ACKNOWLEDGMENTS", "text": "This work is supported by the Netherlands Organisation for Scientific Research (NWO) project 628.001.009 on Learning Extended State Machine for Malware Analysis (LEMMA)."}], "references": [{"title": "Language identification in the limit", "author": ["E.M. Gold"], "venue": "Information and Control, vol. 10, no. 5, pp. 447\u2013474, 1967. [Online]. Available: http://dx.doi.org/10.1016/S0019-9958(67)91165-5", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1967}, {"title": "Regular inference as a graph coloring problem", "author": ["F. Coste", "J. Nicolas"], "venue": "Proc. ICML, 1997.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1997}, {"title": "Software model synthesis using satisfiability solvers", "author": ["M.J.H. Heule", "S. Verwer"], "venue": "Empirical Software Engineering, vol. 18, no. 4, pp. 825\u2013856, 2013. [Online]. Available: http://dx.doi.org/10.1007/s10664-012-9222-z", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2013}, {"title": "Predicate logic as a modeling language: modeling and solving some machine learning and data mining problems with idp3", "author": ["M. Bruynooghe", "H. Blockeel", "B. Bogaerts", "B. De Cat", "S. De Pooter", "J. Jansen", "A. Labarre", "J. Ramon", "M. Denecker", "S. Verwer"], "venue": "Theory and Practice of Logic Programming, vol. 15, no. 6, p. 783817, 2015.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "Solving SAT and SAT modulo theories: From an abstract Davis\u2013Putnam\u2013Logemann\u2013Loveland procedure to DPLL(T)", "author": ["R. Nieuwenhuis", "A. Oliveras", "C. Tinelli"], "venue": "J. ACM, vol. 53, no. 6, pp. 937\u2013977, Nov. 2006. [Online]. Available: http://dx.doi.org/10.1145/1217856.1217859", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2006}, {"title": "Equality logic and uninterpreted functions", "author": ["D. Kroening", "O. Strichman"], "venue": "Decision Procedures: An Algorithmic Point of View. Berlin, Heidelberg: Springer Berlin Heidelberg, 2008, pp. 59\u201380. [Online]. Available: http://dx.doi.org/10.1007/978-3-540-74105-3 3", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2008}, {"title": "Satisfiability modulo theories: Introduction and applications", "author": ["L. De Moura", "N. Bj\u00f8rner"], "venue": "Commun. ACM, vol. 54, no. 9, pp. 69\u201377, Sep. 2011. [Online]. Available: http://doi.acm.org/10.1145/1995376.1995394", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2011}, {"title": "Introduction to Automata Theory, Languages, and Computation", "author": ["J. Hopcroft", "J. Ullman"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1979}, {"title": "Z3: An efficient smt solver", "author": ["L. de Moura", "N. Bj\u00f8rner"], "venue": "Proc. TACAS, C. R. Ramakrishnan and J. Rehof, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2008, pp. 337\u2013340. [Online]. Available: http://dx.doi.org/10.1007/978-3-540-78800-3 24", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2008}, {"title": "Formal models of bank cards for free", "author": ["F. Aarts", "J. de Ruiter", "E. Poll"], "venue": "Proc. ICSTW. IEEE, 2013. [Online]. Available: http://dx.doi.org/10.1109/ICSTW.2013.60", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Model learning", "author": ["F. Vaandrager"], "venue": "Commun. ACM, vol. 60, no. 2, pp. 86\u2013 95, Jan. 2017. [Online]. Available: http://doi.acm.org/10.1145/2967606", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2017}, {"title": "Test selection based on finite state models", "author": ["S. Fujiwara", "G. von Bochmann", "F. Khendek", "M. Amalou", "A. Ghedamsi"], "venue": "Software Engineering, vol. 17, no. 6, pp. 591\u2013603, 1991.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1991}], "referenceMentions": [{"referenceID": 0, "context": "It is the optimization variant of the problem of finding a consistent DFA of a fixed size, which has been shown to be NP-complete [1].", "startOffset": 130, "endOffset": 133}, {"referenceID": 1, "context": "In [2], Coste and Nicolas observe that this problem can be encoded as a graph coloring problem.", "startOffset": 3, "endOffset": 6}, {"referenceID": 2, "context": "In [3], Heule and Verwer propose an encoding of the aforementioned graph coloring problem in propositional logic.", "startOffset": 3, "endOffset": 6}, {"referenceID": 3, "context": "[4], who express the encoding by Heule and Verwer in a predicate logic.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "In our presentation, we borrow notational conventions from [5].", "startOffset": 59, "endOffset": 62}, {"referenceID": 5, "context": "We refer to [6] and [5] for a more detailed explanation.", "startOffset": 12, "endOffset": 15}, {"referenceID": 4, "context": "We refer to [6] and [5] for a more detailed explanation.", "startOffset": 20, "endOffset": 23}, {"referenceID": 6, "context": "For a more detailed introduction to SMT we refer to [7].", "startOffset": 52, "endOffset": 55}, {"referenceID": 2, "context": "Similarly to Heule and Verwer [3], and Bruynooghe et.", "startOffset": 30, "endOffset": 33}, {"referenceID": 3, "context": "[4], we use an augmented prefix tree (APT) for this.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "It has been shown in [8] that Moore and Mealy machines are equi-expressive if we neglect the output produced by the initial", "startOffset": 21, "endOffset": 24}, {"referenceID": 8, "context": "We have implemented our encodings using the Python frontend of Z3 [9], and we have conducted some initial experiments that assess the scalability of the different encodings and their applicability in practice.", "startOffset": 66, "endOffset": 69}, {"referenceID": 9, "context": "In our second set of experiments we simulate the case study from [10].", "startOffset": 65, "endOffset": 69}, {"referenceID": 10, "context": "Here, the authors use model learning [11]", "startOffset": 37, "endOffset": 41}, {"referenceID": 11, "context": "We first use the Wp-method [12] to generate a characterizing sample for these Mealy machines.", "startOffset": 27, "endOffset": 31}], "year": 2017, "abstractText": "The problem of learning a minimal consistent model from a set of labeled sequences of symbols is addressed from a satisfiability modulo theories perspective. We present two encodings for deterministic finite automata and extend one of these for Moore and Mealy machines. Our experimental results show that these encodings improve upon the state-of-the-art, and are useful in practice for learning small models.", "creator": "LaTeX with hyperref package"}}}