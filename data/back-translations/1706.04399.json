{"id": "1706.04399", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Jun-2017", "title": "Enhanced discrete particle swarm optimization path planning for UAV vision-based surface inspection", "abstract": "When monitoring the built infrastructure, an efficient route planning algorithm is indispensable for the robot-assisted inspection of large areas using computer vision. In this work, we first formulate the problem of Inspection Path Planning as an extended Traveling Salesman (TSP) problem, taking into account both the coverage and avoidance of obstacles; then we propose an advanced Particle Swarm Optimization (DPSO) algorithm to solve the TSP, improving performance through deterministic initialization, random mutation and edge exchange; finally, we use parallel computing to implement the DPSO in a GPU-based framework, so that computing time can be significantly reduced while the hardware requirements remain unchanged. To demonstrate the effectiveness of the proposed algorithm, experimental results for data sets from the UAV inspection of an office building and bridge are included.", "histories": [["v1", "Wed, 14 Jun 2017 10:40:19 GMT  (7143kb,D)", "http://arxiv.org/abs/1706.04399v1", null]], "reviews": [], "SUBJECTS": "cs.RO cs.AI cs.CV", "authors": ["manh duong phung", "cong hoang quach", "tran hiep dinh", "quang ha"], "accepted": false, "id": "1706.04399"}, "pdf": {"name": "1706.04399.pdf", "metadata": {"source": "CRF", "title": "Enhanced Discrete Particle Swarm Optimization Path Planning for UAV Vision-based Surface Inspection", "authors": ["Manh Duong Phung", "Cong Hoang Quach", "Tran Hiep Dinh", "Quang Hab"], "emails": ["duongpm@vnu.edu.vn", "hoangqc@vnu.edu.vn", "tranhiep.dinh@uts.edu.au", "quang.ha@uts.edu.au"], "sections": [{"heading": null, "text": "In built infrastructure monitoring, an efficient path planning algorithm is essential for robotic inspection of large surfaces using computer vision. In this work, we first formulate the inspection path planning problem as an extended travelling salesman problem (TSP) in which both the coverage and obstacle avoidance were taken into account. An enhanced discrete particle swarm optimisation (DPSO) algorithm is then proposed to solve the TSP, with performance improvement by using deterministic initialisation, random mutation, and edge exchange. Finally, we take advantage of parallel computing to implement the DPSO in a GPU-based framework so that the computation time can be significantly reduced while keeping the hardware requirement unchanged. To show the effectiveness of the proposed algorithm, experimental results are included for datasets obtained from UAV inspection of an office building and a bridge.\nKeywords: Path planning, infrastructure monitoring, bridge inspection, vision-based inspection, particle swarm optimization, unmanned aerial vehicle"}, {"heading": "1. Introduction", "text": "For robotics inspection of built infrastructure, computer vision can be used to detect most surface deficiencies such as cracking, spalling, rusting, distortion,\n\u2217Corresponding author Email addresses: duongpm@vnu.edu.vn (Manh Duong Phung), hoangqc@vnu.edu.vn\n(Cong Hoang Quach), tranhiep.dinh@uts.edu.au (Tran Hiep Dinh), quang.ha@uts.edu.au (Quang Ha)\nPreprint submitted to Arxiv June 15, 2017\nar X\niv :1\n70 6.\n04 39\n9v 1\n[ cs\n.R O\n] 1\n4 Ju\nn 20\nmisalignment, and excessive movements. Over the last decade, much research effort has been devoted to this theme with computer vision becoming an important component of modern Structural Health Monitoring (SHM) systems for built infrastructure such as rust detection of steel bridges [1], crack detection of concrete bridges [2, 3, 4], or bridge condition assessment [5]. In this regard, it is promising to integrate a computer vision system into mobile inspection robots, such as unmanned aerial vehicles (UAVs) [6, 7] or ubiquitous robots [8, 9], especially when dealing with large and hardly accessible structures like tunnels [10]. For this purpose, an efficient inspection path planning (IPP) algorithm is therefore of crucial importance.\nIn vision-based inspection path planning, it is required to find a trajectory that is informative enough to collect data from different views of a given structure so that the inspection robot can carry out the data acquisition of the region of interest. Depending on size of the inspecting region, the trajectory can be planned for multiple robots to coordinately conduct the data collection [11]. To be visibly processed at a later time, the data collected are often from a sensor of the time-of-flight (optical, sonar or radar) or passive optical (CCD camera) type. Since the computational time for IPP rapidly increases with the area of the region of interest, an IPP algorithm should meet the following criteria:\n(i) capability of viewing/covering every surface of the region of interest via\nat least one planned viewpoint of the inspection sensor,\n(ii) obstacle avoidance for the robot, (iii) generation of an \u201doptimal\u201d path under available conditions, and (iv) effectiveness in terms of processing time (for online re-planning and large\nstructure inspection).\nStudies on IPP, in general, can be categorised into three groups, namely cell decomposition, sub-problem separation, and other methods. In cell decomposition, the target space is decomposed in sub-regions called cells. The cell shape can be trapezoidal, square, cubic, or customised depending on critical points of Morse functions, often with a uniform size [12, 13, 14]. An exhaustive path connecting each cell is then computed for the coverage, using typically a\nheuristic algorithm such as wavefront [15] or spiral spanning tree [16]. Methods based on cell decomposition yield good results in terms of coverage and obstacle avoidance. As the path generated, however, may not be optimal, it is worth seeking a better and more feasible alternative. In this context, the IPP separation approach tackling the non-deterministic polynomial time (NP)hard problems can be divided into two, the art gallery problem that finds the smallest set of viewpoints to cover the whole gallery, and the travelling salesman problem (TSP) that finds the shortest path to visit a set of given cities [17, 18, 19, 20, 21, 22]. Each problem can be solved separately using known methods such as the randomised, incremental algorithm for the art gallery problem [23, 24] and the chained Lin-Kernighan heuristics for the TSP [25]. Other approaches have focused on sampling the configuration space [26], using submodular objective function [27], or employing genetic algorithms [28] but they often require constraining the robot to certain dynamic models or end with near-optimal solutions. The requirements remain not only a shorter path but also collision-free.\nIn this paper, the IPP problem is addressed by first formulating it as an extended TSP. The enhanced discrete particle swarm optimisation (DPSO) is then employed to solve the IPP. Finally, parallel computing based on graphical processing units (GPU) is deployed to obtain the real-time performance. The contributions of our approach are three folds: (i) By formulating the IPP as an extended TSP, both the coverage and obstacle avoidance are simultaneously taken into account. In addition, constraints related to the kinematic and dynamic models of the robot are separated from the DPSO solution so that this solution can be applied to a broad range of robots. (ii) Three techniques including deterministic initialisation, random mutation, and edge exchange have been proposed to improve the accuracy of DPSO. (iii) Parallel computation has been implemented to significantly improve the time performance of DPSO. By utilising GPU, the parallel implementation does not add additional requirements to the hardware, i.e. the developed software can run on popular laptop computers.\nThe rest of this paper is structured as follows. Section 2 introduces the\nsteps to formulate the IPP as an extended TSP. Section 3 presents the proposed DPSO and its deployment for solving the IPP. Section 4 provides experimental results. Finally, a conclusion is drawn to end our paper."}, {"heading": "2. Problem formulation", "text": "Our ultimate goal is to design a path planning system for an UAV used for inspecting planar surfaces of largely built structures like buildings or bridges. The sensor used for the inspection is a CCD camera attached to a controllable gimbal. We suppose that the 3D model of the structure and the environment are known prior to planning, for example, by using laser scanners. Here, the IPP objective is to find the shortest path for the UAV\u2019s navigation and taking photos of the target surfaces so that the images captured can be later processed to detect potential defects or damages. We first consider the IPP as an extended TSP and then solve it using the developed DPSO. This section presents the computation of viewpoint selection and point-to-point pathfinding, which are fundamental to formulate the extended TSP problem."}, {"heading": "2.1. Viewpoint selection", "text": "The viewpoint selection involves finding a set of camera configurations that together cover the whole surfaces of interest. Let P be a finite set of geometric primitives pi comprising the surfaces to be covered. Each geometric primitive pi corresponds to a surface patch within the field of view of the camera. Let C be the configuration space such that every feasible configuration cj \u2208 C maps to a subset of P . Each configuration ci corresponds to a position (xi, yi, zi) and an orientation (\u03d5i, \u03b8i, \u03c8i) of the camera. Given a finite set of configurations C, the viewpoint selection problem on one hand calls generally for the minimum number of configurations ci such that all elements pi \u2208 P are covered. On the other hand, from image sticking and defect detection, the following requirements are added to the system: (i) image capturing moment is when the camera is perpendicular to the inspected surface, (ii) sufficiently high resolution to distinguish the smallest feature, sf , and (iii) overlapping of images to a percentage op\nspecified by the sticking algorithm. It turns out that those requirements sim-\nplify our selection problem. The perpendicular requirement confines the camera orientation to the normal of the inspected surface. The resolution requirement suggests the computation of the field of view of the camera as:\nafov = 1\n2 rcsf , (1)\nwhere rc is the camera resolution (see Fig. 1). Taken the overlapping percentage into account, the geometric primitive pi is then:\npi = (1\u2212 op)afov. (2)\nThe working distance from the camera to the surface can also be computed as:\ndk = afovf\nss , (3)\nwhere f and ss are respectively the focal length and sensor size of the camera. From (2) and (3), it is possible to determine configurations ci to cover the set\nof primitives P , as illustrated in Fig. 2. Specifically, for each surface Pk \u2282 P , a grid with the cell size of pi is first established to cover Pk. A working surface P \u2217 k , parallel to Pk and distant dk from Pk, is then created. Projecting the center of each cell of Pk to P \u2217 k gives the position component of viewpoint ci. The normal of Pk defines the orientation component of ci, which is supposed to be fully controlled by the inspecting UAV so that it can be omitted in our computation."}, {"heading": "2.2. Point-to-point pathfinding", "text": "Given the viewpoints, the shortest, obstacle-free path between every pair of them need be found to form a graph for later processing. Without loss of generality, different motion planning approaches such as roadmap, decoupling, potential field and mathematical programming can be used here depending on the UAV model and dynamic constraints [29, 30]. In this work, the hierarchical decoupled approach is employed in which open- and closed-loop controllers operating at a variety of rate are linked together from top to bottom [29, 31, 32]. Since the majority of UAVs currently in production often already equipped with an inner-loop tracking controller and a waypoint following system, this approach can be simplified to a discrete search that produces a set of waypoints connecting\ntwo viewpoints while avoiding obstacles. For this, the workspace is first divided into a grid of voxels. Each voxel has the free or occupied status corresponding to the presence or absence of an object in that voxel. In order to consider the UAV as a particle moving without collision between voxels, all the free voxels in a sphere of a radius equal to the largest dimension of the UAV are marked as occupied. Thus, the A* algorithm [33] can be used to find the shortest path between viewpoints. In each step, the cost to move from one voxel to another surrounding neighbour is computed as:\nL(\u03b1, \u03b2, \u03b3) = a1\u03b1 2 + a2\u03b2 2 + a3\u03b3 2, (4)\nwhere coordinates \u03b1, \u03b2, \u03b3 \u2208 {\u22121, 0, 1} indicate the position of neighbor, and coefficients a1, a2 and a3 assign a particular weight to each direction. The total cost to move from a voxel p to the viewpoint g at step n is given by:\nf(p) = n\u2211 k=1 Lk + \u2016p\u2212 g\u20162, (5)\nwhere Lk is the motion cost at step k."}, {"heading": "2.3. Modelling the IPP as a TSP", "text": "For given viewpoints and paths between them, a graph can be built to model the IPP as an extended TSP. We define each viewpoint as a node, i, and the path between two viewpoints as an edge, eij . The length, lij , of edge eij is the cost to travel from node i to node j determined by (5). If the path between node i and node j is blocked due to obstacles, a virtual path between them is defined and a very large cost is assigned for the path. Denoting the set of all nodes by V and the set of all edges by E, we restrict motion of the UAV to the graph G = (V,E). The IPP task is now to find a tour, with a minimum cost, that visits each node (viewpoint) exactly once, including the way back to the initial node. Let T be the set of these nodes.\nBy associating a binary variable\n\u03bbij =  1 if edge eij \u2208 E is in tour0 otherwise (6)\nwith each edge in the graph, the IPP is then formulated as follows:\nmin \u2211\neij\u2208E lij\u03bbij (7)\nsubject to \u2211\nj\u2208V, i6=j\n\u03bbij = 2 \u2200i \u2208 V (8)\n\u2211 i,j\u2208T, i 6=j \u03bbij \u2264 |T | \u2212 1 \u2200T \u2282 V, T 6= \u2205 (9)\n\u03bbij \u2208 {0, 1}, (10)\nwhere |T | is the number of nodes in the tour. The objective function in (7) defines the shortest tour. The constraint in (8) implies each node in the graph has exactly one incoming edge and one outgoing edge, i.e., the tour passes through each node once, while condition (9) ensures no sub-tours, i.e., the tour returns to the original node after visiting all other nodes."}, {"heading": "3. Enhanced Discrete Particle Swarm Optimization for Inspection", "text": "Path Planning\nParticle swarm optimization (PSO), inspired by social behavior of bird flocking or fish schooling, is a population-based stochastic technique designed for solving optimization problems [34]. In PSO, a finite set of particles is generated, each particle seeks the global optimum by moving and evolving through generations. Initially, each particle is assigned to a random position and velocity. It then moves by updating its best previous position, Pk, and the best position of the swarm, Gk. Let xk and vk be respectively the position and velocity of a particle at generation k. The position and velocity of that particle in the next generation is given by:\nvk+1 \u2190 w.vk + \u03d51r1.(Pk \u2212 xk) + \u03d52r2.(Gk \u2212 xk) (11)\nxk+1 \u2190 xk + vk+1, (12)\nwhere w is the inertial coefficient, \u03d51 is the cognitive coefficient, \u03d52 is the social coefficient, and r1, r2 are random samples of a uniform distribution in the range [0,1]. Equations (11) and (12) imply that the motion of a given particle is a compromise between three possible choices including following its own way, moving toward its best previous position, or toward the swarm\u2019s best position. The ratio between choices is determined by the coefficients w, \u03d51, and \u03d52."}, {"heading": "3.1. DPSO approach to the IPP", "text": "Since the IPP defined in (7) \u2013 (10) is a discrete optimization problem, enhanced algorithms for discrete particle optimization (DPSO) will be developed for our problem, motivated by [35]. For this, let us begin with an outline of our approach to solve the IPP problem using DPSO with improvements in initialization, mutation, edge exchange and parallel implementation.\nFirst, let define the position of particles as sequences of N + 1 nodes, all\ndistinct, except that the last node must be equal to the first one:\nx = (n1, n2, ..., nN , nN+1), ni \u2208 V, n1 = nN+1, (13)\nwhere N is the number of nodes, N = |V |. Since each sequence is a feasible tour satisfying (8) and (9), to minimise the objective function (7) according to (11) and (12), we need to define the velocity and numerical operators for the particles\u2019 motion.\nFrom (12), it can be seen that a new position of a particle can be evolved from the position of its current generation via the velocity operator, considered here as a list of node transpositions:\nv = ((ni,1, nj,1), (ni,2, nj,2), ..., (ni,\u2016v\u2016, nj,\u2016v\u2016)), (14)\nwhere ni, nj \u2208 V and \u2016v\u2016 is the length of the transposition list.\nIn DPSO, particle velocities and positions are updated by using the following\noperations:\n\u2022 The addition between a position x and a velocity v is found by applying\nthe first transposition of v to x, then the second one to the result, etc.\nFor example, with x = (1, 4, 2, 3, 5, 1) and v = ((1, 2), (2, 3)), by applying the first transposition of v to x and keeping in mind the equality between the first and last nodes, we obtain (2,4,1,3,5,2). Then applying the second transposition of v to that result gives (3,4,1,2,5,3), which is the final result of x+ v.\n\u2022 The subtraction between a position x2 and a position x1 is defined as the\nvelocity v, i.e., x2\u2212 x1 = v, such that by applying v to x1 we obtain back x2.\n\u2022 The addition between a velocity v1 and a velocity v2 is defined as a new\nvelocity, v1 \u2295 v2 = v, which contains the transpositions of v1 followed by the transpositions of v2.\n\u2022 The multiplication between a real coefficient c with a velocity v is a new\nvelocity, c.v, defined as follows:\n\u2013 For c = 0, c.v = \u2205.\n\u2013 For 0 < c \u2264 1, c.v = ((ni,1, nj,1), (ni,2, nj,2), ..., (ni,c\u2016v\u2016, nj,c\u2016v\u2016)).\n\u2013 For c < 0 and c > 1, we omit these cases since they do not occur in\nour DPSO."}, {"heading": "3.2. Augmentations to the DPSO", "text": "In order to speed up the convergence and avoid being stuck in the local minimum, we propose to enhance optimisation performance of the DPSO as follows."}, {"heading": "3.2.1. Deterministic initialization", "text": "The swarm in DPSO, having no prior knowledge of the searching space, is initialized with its particles at random positions. This initialization works well for a relatively small search space.\nFor large structure, the searching result depends, to a great extent, on the initial positions of the particles. Therefore, in order to increase the probability\nof reaching the global optimum, we propose to exploit features of viewpoints to generate several seeding particles to facilitate the evolution of the swarm in the search space. In our application, viewpoints are generated based on a grid decomposition. Consequently, a back-and-forth tour would generate a near-optimal path, as shown in Fig. 3, if no obstacles occur. From this observation, positions are deterministically assigned for several particles during the initialization process."}, {"heading": "3.2.2. Random mutation", "text": "Similar to other evolutionary optimisation techniques such as the genetic algorithm or ant colony system, the PSO performs both exploration and exploitation of the search space. Initially, particles are far from each other so they explore different regions in the search space. After evolving through generations, the swarm converges and starts to make more exploitation. At this stage, distances between particles will gradually reduce to the size termed \u201dswarm collapse\u201d [34], whereby many particles will become almost identical.\nIn order to avoid the collapse situation and keep the balance between exploration and exploitation, random mutations for particles are employed. After\nevery i generations, identical particles are filtered. The remaining are then sorted according to their cost values. Finally, only one-third of the smallest particles are kept for the next generation. All others are disturbed, each in different and randomly-chosen dimensions."}, {"heading": "3.2.3. Edge exchange", "text": "The enhancement is based on the geometric feature for which crossing edges can be exchanged to result in a shorter tour. Here, as 3D cross checking may be difficult, a complete search similarly to the 2-opt algorithm is employed to compare each valid combination of the swapping mechanism for edges [36]. In this search, every possible exchange of edges is evaluated and the one with the most improvement is chosen. Figure 4 illustrates the case when an edge exchange between (2,6) and (3,7) to shorten the tour. Since this augmentation is computational demanding, it should be used only when the random mutation does not make any difference."}, {"heading": "3.2.4. Parallel implementation on GPU", "text": "Owing to the rapidly increased performance with thousands of cores, a graphics processing unit (GPU) can outperform the traditional CPUs for problems that are suitable for processed by SIMD (single instruction multiple data). As our optimisation algorithms are also a SIMD-based, we can take this advantage to implement in parallel the proposed DPSO in GPUs to reduce computation time.\nThe diagram and pseudo code for parallel implementation are shown in Fig. 5\nand Fig. 6 respectively. After initialization, parameters of a particle such as the velocity, position, and fitness are computed in parallel, each particle in a different thread. At the end of each generation, the results are saved to the global memory to update these particle parameters and then a new parallel computation round starts.\nIn UAVs, parallel programs can be implemented in recent onboard computers having good GPU capability and low power consumption such as Jetson TK1 with 192 CUDA Cores (Kepler GPU), 5 W [37]. The board can be configured as either the main or supplemental board communicated with other components via standard communications protocols like MAVLink. However, if the battery power is highly limited as in some micro UAVs, an alternative solution is to stream the sensory data to the ground control station (GCS) and utilise the GPU of a laptop to conduct the path planning. The result is then uploaded to the UAV via GCS for planning/re-planning and navigation."}, {"heading": "3.3. Enhanced DPSO Pseudo Code", "text": "For vision-based inspection, to take into account obstacle avoidance of the UAV, a selected combination of random and deterministic initialization for each particle in the swarm is performed on a CPU while its evolutions, including computation of updated particles\u2019 velocity and position, random mutation and edge exchange, are implemented in parallel on a GPU.\nBy making use of all advantages of the enhanced DPSO algorithm, the pseudo code for our proposed algorithm incorporating the above-mentioned augmentations is shown in Fig. 7."}, {"heading": "4. Experimental results", "text": "Experiments have been carried out on two real datasets recorded by laser scanners mounted on a UAV for inspection of an office building and a concrete bridge. The first dataset represents a floor of the building with a size of 25 m \u00d7 12 m \u00d7 8 m. The second dataset represents a part of the bridge including\npiers and surfaces with a size of 22 m \u00d7 10 m \u00d7 4.5 m. Figures 8a and 9a show the datasets in point cloud representation. In order to apply the IPP algorithm to the datasets, planar surfaces and boundaries need to extracted from them. For this task, we have developed a software for automatic interpretation of\nunordered point cloud data described in details in [38]. The software uses the Random sample consensus (RANSAC) algorithm combined with data obtained from an inertial measurement unit (IMU) to detect planar surfaces. The convex hull algorithm is then employed to determine their boundaries. The remaining point cloud is clusterized to obstacle objects by finding the nearest neighbour in a 3D Kd-tree structure. Through the software, users are able to select the surfaces they want to inspect, as shown in Fig. 8b and Fig. 9b, respectively.\nIn all experiments, coefficients w = 1, \u03d51 = 0.4, \u03d52 = 0.4 are chosen for the DPSO. The number of particles is set to 100. The random mutation is executed in every three generations and the edge exchange is carried out if the random mutation does not improve the result. The parallel implementation is developed based on the CUDA platform. The programs, including both serial and parallel versions, are executed in a laptop computer with CoreTMi7 CPU and GeForce@ GTX 960M GPU."}, {"heading": "4.1. Path Generation and DPSO Convergence", "text": "Figures 8c and 9c show the paths generated to inspect three selected surfaces of each dataset. Figures 8d and 9d show the paths in the appearance of obstacles. It can be seen that the back-and-forth pattern is dominant in those paths, except essential changes when having obstacles or switching between surfaces. Figures 8e and 8f present the front and side views of a zoom-in part of the inspection path showing that obstacles were avoided. Figures 9e and 9f show similar results for the bridge dataset.\nFigure 10 shows the graphs of the fitness value as an objective function of the generation number for the two inspection cases of a building and a bridge. In each graph, the fitness represents the cost to traverse the inspection path. From the dataset of the office building, the DPSO by solving the extended TSP improves 22.2 % of the travelling cost and converges within 60 generations. For the second dataset of the bridge, those numbers are 37.9 % and 80, respectively. The difference is accounted for by the variation in size of the inspection surfaces and the structural complexity of the environments. That is to say in terms of al-\ngorithms, care should be given when considering parameters for the exploration (number of particles) and exploitation (number of generations)."}, {"heading": "4.2. Effect of the augmentations on the DPSO", "text": "Table 1 presents the effect of augmentations on the performance improvement over DPSO in percentage by applying our enhanced algorithm. Here, with the dataset obtained from building inspection, the deterministic initialization\nsignificantly improves the processing time by 2.8 times and slightly improves the travelling cost by 1.4 %. Notably, the computational efficiency in terms of fast convergence actually comes from the improvement of evolving generations of the swarm by means of initialization. On the other hand, it is not surprised that the edge exchange introduces some enhancement on the travelling cost as it uses brute force transpositions. Likewise, the parallel implementation introduces the most significant impact on the computation time thanks to the parallel processing capability taking advantage of the SIMD feature of the DPSO.\nTo show consistency in the effectiveness of the proposed approach, we com-\npare our enhanced DPSO algorithm not only with the conventional DPSO but also with an ant colony system (ACS), where the ACS is implemented as in [39]. In the comparison, each algorithm was executed over 15 trials. Table 2 shows the results expressed in the average value and the standard deviation of the processing time and the travelling cost. Compared with the ACS algorithm, our enhanced DPSO for the bridge inspection dataset has shown on average an improvement of 15% in the travelling cost and 87 times in the computation time. Owing to a significant improvement in processing time, the enhanced DPSO can be applied for real-time automated inspection."}, {"heading": "5. Conclusion", "text": "In this paper, we have presented an enhanced discrete particle optimisation (DPSO) algorithm for solving the inspection path planning (IPP) problem that is formulated as an extended travelling salesman problem (TSP) considering simultaneously the coverage and obstacle avoidance. By augmenting with deterministic initialization, random mutation, edge exchange and parallel implementation on GPU, the proposed DPSO can greatly improve its performance in both time and travelling cost. The validity and effectiveness of the proposed technique are verified in successful experiments with two real-world datasets collected by UAV inspection of an office building and a concrete bridge. In a future work, the algorithm will be extended for inspection of non-planar surfaces and incorporation of online re-planning strategies to deal with inspection of built infrastructure of an irregular shape."}, {"heading": "Acknowledgments", "text": "The first author would like to acknowledge an Endeavours Research Fellowship (ERF-PDR-142403-2015) provided by the Australian Government. This work is supported by the University of Technology Sydney Data Arena Research Exhibit Grant 2016 and Vietnam National University Grant QG.16.29."}], "references": [{"title": "Detection of rust defects on steel bridge coatings via digital image recognition", "author": ["K.-W. Liao", "Y.-T. Lee"], "venue": "Automation in Construction 71 (Part 2) ", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2016}, {"title": "Vision-based automated crack detection for bridge inspection", "author": ["C.M. Yeum", "S.J. Dyke"], "venue": "Comp.-Aided Civil and Infrastruct. Engineering 30 (10) ", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Long-distance precision inspection method for bridge cracks with image processing", "author": ["G. Li", "S. He", "Y. Ju", "K. Du"], "venue": "Automation in Construction 41 ", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "Image-based retrieval of concrete crack properties for bridge inspection", "author": ["R. Adhikari", "O. Moselhi", "A. Bagchi"], "venue": "Automation in Construction 39 ", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "A novel extended potential field controller for use on aerial robots", "author": ["A.A. Woods", "H.M. La", "Q. Ha"], "venue": "in: Proceedings of the 12th IEEE International Conference on Automation Science and Engineering (CASE)", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2016}, {"title": "Bridge deck delamination identification from unmanned aerial vehicle infrared imagery", "author": ["A. Ellenberg", "A. Kontsos", "F. Moon", "I. Bartoli"], "venue": "Automation in Construction 72 (Part 2) ", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2016}, {"title": "The future of construction automation: Technological disruption and the upcoming ubiquity of robotics", "author": ["T. Bock"], "venue": "Automation in Construction 59 ", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Color tracking for multiple robot control using a system-on-programmable-chip", "author": ["Y. Yu", "N. Kwok", "Q. Ha"], "venue": "Automation in Construction 20 ", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "Past", "author": ["R. Montero", "J. Victores", "S. Martnez", "A. Jardn", "C. Balaguer"], "venue": "present and future of robotic tunnel inspection, Automation in Construction 59 ", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2015}, {"title": "Cooperative and geometric learning algorithm (CGLA) for path planning of UAVs with limited information", "author": ["B. Zhang", "W. Liu", "Z. Mao", "J. Liu", "L. Shen"], "venue": "Automatica 50 (3) ", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2014}, {"title": "Coverage for robotics - a survey of recent results", "author": ["H. Choset"], "venue": "Annals of Mathematics and Artificial Intelligence 31 ", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2001}, {"title": "S", "author": ["H. Choset", "K. Lynch", "S. Hutchinson", "G. Kantor", "W. Burgard", "L. Kavraki"], "venue": "Thrun (Eds.), Principles of Robot Motion: Theory, Algorithms, and Implementation, The MIT Press", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2005}, {"title": "Morse decompositions for coverage tasks", "author": ["E. Acar", "H. Choset", "A. Rizzi", "P. Atkar", "D. Hull"], "venue": "International Journal of Robotics Research 21 (4) ", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2002}, {"title": "Real-time planning for covering an initially-unknown spatial environment", "author": ["V. Shivashankar", "R. Jain", "U. Kuter", "D. Nau"], "venue": "in: Proceedings of the Twenty-Fourth International Florida Artificial Intelligence Research Society Conference", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2011}, {"title": "Spiral-stc: an on-line coverage algorithm of grid environments by a mobile robot", "author": ["Y. Gabriely", "E. Rimon"], "venue": "in: Proceedings of the IEEE International Conference in Robotics and Automation (ICRA), Vol. 1", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2002}, {"title": "Three-dimensional coverage planning for an underwater inspection robot", "author": ["B. Englot", "F. Hover"], "venue": "International Journal of Robotics Research 32 (9-10) ", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2013}, {"title": "Active planning for underwater inspection and the benefit of adaptivity", "author": ["G.A. Hollinger", "B. Englot", "F.S. Hover", "U. Mitra", "G.S. Sukhatme"], "venue": "The International Journal of Robotics Research 32 (1) ", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2013}, {"title": "Speeding up coverage queries in 3d multi-goal path planning", "author": ["P. Janousek", "J. Faigl"], "venue": "in: Proceedings of the IEEE International Conference on Robotics and Automation (ICRA)", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2013}, {"title": "Some complexity results for metric view planning problem with traveling cost and visibility range", "author": ["P. Wang", "K. Gupta", "R. Krishnamurti"], "venue": "IEEE Transactions on Automation Science and Engineering 8 (3) ", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2011}, {"title": "View planning and automated data acquisition for three-dimensional modeling of complex sites", "author": ["P.S. Blaer", "P.K. Allen"], "venue": "Journal of Field Robotics 26 (11-12) ", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2009}, {"title": "Planning tours of robotic arms among partitioned goals", "author": ["M. Saha", "T. Roughgarden", "J.-C. Latombe", "G. Snchez-Ante"], "venue": "The International Journal of Robotics Research 25 (3) ", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2006}, {"title": "Randomized planning for short inspection paths", "author": ["T. Danner", "L.E. Kavraki"], "venue": "in: Proceedings of the IEEE International Conference on Robotics and Automation (ICRA)", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2000}, {"title": "Planning complex inspection tasks using redundant roadmaps", "author": ["B. Englot", "F. Hover"], "venue": "in: H. I. Christensen, O. Khatib (Eds.), Robotics Research, 23  Vol. 100 of Springer Tracts in Advanced Robotics, Springer International Publishing", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2016}, {"title": "Chained lin-kernighan for large traveling salesman problems", "author": ["D. Applegate", "W. Cook", "A. Rowe"], "venue": "INFORMS Journal on Computing 15 (1) ", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2003}, {"title": "Asymptotically optimal inspection planning using systems with differential constraints", "author": ["G. Papadopoulos", "H. Kurniawat", "N. Patrikalakis"], "venue": "in: Proceedings of the IEEE International Conference in Robotics and Automation (ICRA)", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2013}, {"title": "Uncertaintydriven view planning for underwater inspection", "author": ["G. Hollinger", "B. Englot", "F. Hover", "U. Mitra", "G. Sukhatme"], "venue": "in: Proceedings of the IEEE International Conference in Robotics and Automation (ICRA)", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2012}, {"title": "Optimal area covering using genetic algorithms", "author": ["P. Jimenez", "B. Shirinzadeh", "A. Nicholson", "G. Alici"], "venue": "in: Proceedings of the IEEE/ASME International Conference on Advanced Intelligent Mechatronics", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2007}, {"title": "A survey of motion planning algorithms from the perspective of autonomous uav guidance", "author": ["C. Goerzen", "Z. Kong", "B. Mettler"], "venue": "Journal of Intelligent and Robotic Systems 57 (1) ", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2009}, {"title": "Survey of motion planning literature in the presence of uncertainty: Considerations for uav guidance", "author": ["N. Dadkhah", "B. Mettler"], "venue": "Journal of Intelligent & Robotic Systems 65 (1) ", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2012}, {"title": "M", "author": ["S. Scherer", "S. Singh", "L. Chamberlain"], "venue": "Elgersma, Flying fast and low among obstacles: Methodology and experiments., The International Journal of Robotics Research 27 (5) ", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2008}, {"title": "On-line path generation for unmanned aerial vehicles using b-spline path templates", "author": ["D. Jung", "P. Tsiotras"], "venue": "Journal of Guidance, Control, and Dynamics 36 (6) ", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2013}, {"title": "A formal basis for the heuristic determination of minimum cost paths", "author": ["P. Hart", "N. Nilsson", "B. Raphael"], "venue": "IEEE Transactions on Systems Science and Cybernetics 4 (2) ", "citeRegEx": "33", "shortCiteRegEx": null, "year": 1968}, {"title": "Y", "author": ["J. Kennedy", "R. Eberhart"], "venue": "Shi (Eds.), Swarm Intelligence, Morgan Kaufmann", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2001}, {"title": "Discrete particle swarm optimization", "author": ["M. Clerc"], "venue": "illustrated by the traveling salesman problem, in: G. Onwubolu, B. Babu (Eds.), New Optimization Techniques in Engineering, Vol. 141 of Studies in Fuzziness and Soft Computing, Springer Berlin Heidelberg", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2004}, {"title": "A", "author": ["G. Gutin"], "venue": "Punnen (Eds.), The Traveling Salesman Problem and Its Variations, Springer US", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2007}, {"title": "Performance of the nvidia jetson tk1 in hpc", "author": ["Y. Ukidave", "D. Kaeli", "U. Gupta", "K. Keville"], "venue": "in: 2015 IEEE International Conference on Cluster Computing (CLUSTER)", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2015}, {"title": "Automatic interpretation of unordered point cloud data for UAV navigation in construction", "author": ["M. Phung", "C. Quach", "D. Chu", "N. Nguyen", "T. Dinh", "Q. Ha"], "venue": "in: Proceedings of the 14th International Conference on Control, Automation, Robotics and Vision (ICARCV)", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2016}, {"title": "Ant colony system: a cooperative learning approach to the traveling salesman problem", "author": ["M. Dorigo", "L.M. Gambardella"], "venue": "IEEE Trans. Evolutionary Computation 1 (1) ", "citeRegEx": "39", "shortCiteRegEx": null, "year": 1997}], "referenceMentions": [{"referenceID": 0, "context": "Over the last decade, much research effort has been devoted to this theme with computer vision becoming an important component of modern Structural Health Monitoring (SHM) systems for built infrastructure such as rust detection of steel bridges [1], crack detection of concrete bridges [2, 3, 4], or bridge condition assessment [5].", "startOffset": 245, "endOffset": 248}, {"referenceID": 1, "context": "Over the last decade, much research effort has been devoted to this theme with computer vision becoming an important component of modern Structural Health Monitoring (SHM) systems for built infrastructure such as rust detection of steel bridges [1], crack detection of concrete bridges [2, 3, 4], or bridge condition assessment [5].", "startOffset": 286, "endOffset": 295}, {"referenceID": 2, "context": "Over the last decade, much research effort has been devoted to this theme with computer vision becoming an important component of modern Structural Health Monitoring (SHM) systems for built infrastructure such as rust detection of steel bridges [1], crack detection of concrete bridges [2, 3, 4], or bridge condition assessment [5].", "startOffset": 286, "endOffset": 295}, {"referenceID": 3, "context": "Over the last decade, much research effort has been devoted to this theme with computer vision becoming an important component of modern Structural Health Monitoring (SHM) systems for built infrastructure such as rust detection of steel bridges [1], crack detection of concrete bridges [2, 3, 4], or bridge condition assessment [5].", "startOffset": 286, "endOffset": 295}, {"referenceID": 4, "context": "In this regard, it is promising to integrate a computer vision system into mobile inspection robots, such as unmanned aerial vehicles (UAVs) [6, 7] or ubiquitous robots [8, 9], especially when dealing with large and hardly accessible structures like tunnels [10].", "startOffset": 141, "endOffset": 147}, {"referenceID": 5, "context": "In this regard, it is promising to integrate a computer vision system into mobile inspection robots, such as unmanned aerial vehicles (UAVs) [6, 7] or ubiquitous robots [8, 9], especially when dealing with large and hardly accessible structures like tunnels [10].", "startOffset": 141, "endOffset": 147}, {"referenceID": 6, "context": "In this regard, it is promising to integrate a computer vision system into mobile inspection robots, such as unmanned aerial vehicles (UAVs) [6, 7] or ubiquitous robots [8, 9], especially when dealing with large and hardly accessible structures like tunnels [10].", "startOffset": 169, "endOffset": 175}, {"referenceID": 7, "context": "In this regard, it is promising to integrate a computer vision system into mobile inspection robots, such as unmanned aerial vehicles (UAVs) [6, 7] or ubiquitous robots [8, 9], especially when dealing with large and hardly accessible structures like tunnels [10].", "startOffset": 169, "endOffset": 175}, {"referenceID": 8, "context": "In this regard, it is promising to integrate a computer vision system into mobile inspection robots, such as unmanned aerial vehicles (UAVs) [6, 7] or ubiquitous robots [8, 9], especially when dealing with large and hardly accessible structures like tunnels [10].", "startOffset": 258, "endOffset": 262}, {"referenceID": 9, "context": "Depending on size of the inspecting region, the trajectory can be planned for multiple robots to coordinately conduct the data collection [11].", "startOffset": 138, "endOffset": 142}, {"referenceID": 10, "context": "The cell shape can be trapezoidal, square, cubic, or customised depending on critical points of Morse functions, often with a uniform size [12, 13, 14].", "startOffset": 139, "endOffset": 151}, {"referenceID": 11, "context": "The cell shape can be trapezoidal, square, cubic, or customised depending on critical points of Morse functions, often with a uniform size [12, 13, 14].", "startOffset": 139, "endOffset": 151}, {"referenceID": 12, "context": "The cell shape can be trapezoidal, square, cubic, or customised depending on critical points of Morse functions, often with a uniform size [12, 13, 14].", "startOffset": 139, "endOffset": 151}, {"referenceID": 13, "context": "heuristic algorithm such as wavefront [15] or spiral spanning tree [16].", "startOffset": 38, "endOffset": 42}, {"referenceID": 14, "context": "heuristic algorithm such as wavefront [15] or spiral spanning tree [16].", "startOffset": 67, "endOffset": 71}, {"referenceID": 15, "context": "In this context, the IPP separation approach tackling the non-deterministic polynomial time (NP)hard problems can be divided into two, the art gallery problem that finds the smallest set of viewpoints to cover the whole gallery, and the travelling salesman problem (TSP) that finds the shortest path to visit a set of given cities [17, 18, 19, 20, 21, 22].", "startOffset": 331, "endOffset": 355}, {"referenceID": 16, "context": "In this context, the IPP separation approach tackling the non-deterministic polynomial time (NP)hard problems can be divided into two, the art gallery problem that finds the smallest set of viewpoints to cover the whole gallery, and the travelling salesman problem (TSP) that finds the shortest path to visit a set of given cities [17, 18, 19, 20, 21, 22].", "startOffset": 331, "endOffset": 355}, {"referenceID": 17, "context": "In this context, the IPP separation approach tackling the non-deterministic polynomial time (NP)hard problems can be divided into two, the art gallery problem that finds the smallest set of viewpoints to cover the whole gallery, and the travelling salesman problem (TSP) that finds the shortest path to visit a set of given cities [17, 18, 19, 20, 21, 22].", "startOffset": 331, "endOffset": 355}, {"referenceID": 18, "context": "In this context, the IPP separation approach tackling the non-deterministic polynomial time (NP)hard problems can be divided into two, the art gallery problem that finds the smallest set of viewpoints to cover the whole gallery, and the travelling salesman problem (TSP) that finds the shortest path to visit a set of given cities [17, 18, 19, 20, 21, 22].", "startOffset": 331, "endOffset": 355}, {"referenceID": 19, "context": "In this context, the IPP separation approach tackling the non-deterministic polynomial time (NP)hard problems can be divided into two, the art gallery problem that finds the smallest set of viewpoints to cover the whole gallery, and the travelling salesman problem (TSP) that finds the shortest path to visit a set of given cities [17, 18, 19, 20, 21, 22].", "startOffset": 331, "endOffset": 355}, {"referenceID": 20, "context": "In this context, the IPP separation approach tackling the non-deterministic polynomial time (NP)hard problems can be divided into two, the art gallery problem that finds the smallest set of viewpoints to cover the whole gallery, and the travelling salesman problem (TSP) that finds the shortest path to visit a set of given cities [17, 18, 19, 20, 21, 22].", "startOffset": 331, "endOffset": 355}, {"referenceID": 21, "context": "Each problem can be solved separately using known methods such as the randomised, incremental algorithm for the art gallery problem [23, 24] and the chained Lin-Kernighan heuristics for the TSP [25].", "startOffset": 132, "endOffset": 140}, {"referenceID": 22, "context": "Each problem can be solved separately using known methods such as the randomised, incremental algorithm for the art gallery problem [23, 24] and the chained Lin-Kernighan heuristics for the TSP [25].", "startOffset": 132, "endOffset": 140}, {"referenceID": 23, "context": "Each problem can be solved separately using known methods such as the randomised, incremental algorithm for the art gallery problem [23, 24] and the chained Lin-Kernighan heuristics for the TSP [25].", "startOffset": 194, "endOffset": 198}, {"referenceID": 24, "context": "Other approaches have focused on sampling the configuration space [26], using submodular objective function [27], or employing genetic algorithms [28] but they often require constraining the robot to certain dynamic models or end with near-optimal solutions.", "startOffset": 66, "endOffset": 70}, {"referenceID": 25, "context": "Other approaches have focused on sampling the configuration space [26], using submodular objective function [27], or employing genetic algorithms [28] but they often require constraining the robot to certain dynamic models or end with near-optimal solutions.", "startOffset": 108, "endOffset": 112}, {"referenceID": 26, "context": "Other approaches have focused on sampling the configuration space [26], using submodular objective function [27], or employing genetic algorithms [28] but they often require constraining the robot to certain dynamic models or end with near-optimal solutions.", "startOffset": 146, "endOffset": 150}, {"referenceID": 27, "context": "Without loss of generality, different motion planning approaches such as roadmap, decoupling, potential field and mathematical programming can be used here depending on the UAV model and dynamic constraints [29, 30].", "startOffset": 207, "endOffset": 215}, {"referenceID": 28, "context": "Without loss of generality, different motion planning approaches such as roadmap, decoupling, potential field and mathematical programming can be used here depending on the UAV model and dynamic constraints [29, 30].", "startOffset": 207, "endOffset": 215}, {"referenceID": 27, "context": "In this work, the hierarchical decoupled approach is employed in which open- and closed-loop controllers operating at a variety of rate are linked together from top to bottom [29, 31, 32].", "startOffset": 175, "endOffset": 187}, {"referenceID": 29, "context": "In this work, the hierarchical decoupled approach is employed in which open- and closed-loop controllers operating at a variety of rate are linked together from top to bottom [29, 31, 32].", "startOffset": 175, "endOffset": 187}, {"referenceID": 30, "context": "In this work, the hierarchical decoupled approach is employed in which open- and closed-loop controllers operating at a variety of rate are linked together from top to bottom [29, 31, 32].", "startOffset": 175, "endOffset": 187}, {"referenceID": 31, "context": "Thus, the A* algorithm [33] can be used to find the shortest path between viewpoints.", "startOffset": 23, "endOffset": 27}, {"referenceID": 32, "context": "Particle swarm optimization (PSO), inspired by social behavior of bird flocking or fish schooling, is a population-based stochastic technique designed for solving optimization problems [34].", "startOffset": 185, "endOffset": 189}, {"referenceID": 0, "context": "where w is the inertial coefficient, \u03c61 is the cognitive coefficient, \u03c62 is the social coefficient, and r1, r2 are random samples of a uniform distribution in the range [0,1].", "startOffset": 169, "endOffset": 174}, {"referenceID": 33, "context": "DPSO approach to the IPP Since the IPP defined in (7) \u2013 (10) is a discrete optimization problem, enhanced algorithms for discrete particle optimization (DPSO) will be developed for our problem, motivated by [35].", "startOffset": 207, "endOffset": 211}, {"referenceID": 32, "context": "At this stage, distances between particles will gradually reduce to the size termed \u201dswarm collapse\u201d [34], whereby many particles will become almost identical.", "startOffset": 101, "endOffset": 105}, {"referenceID": 34, "context": "Here, as 3D cross checking may be difficult, a complete search similarly to the 2-opt algorithm is employed to compare each valid combination of the swapping mechanism for edges [36].", "startOffset": 178, "endOffset": 182}, {"referenceID": 35, "context": "In UAVs, parallel programs can be implemented in recent onboard computers having good GPU capability and low power consumption such as Jetson TK1 with 192 CUDA Cores (Kepler GPU), 5 W [37].", "startOffset": 184, "endOffset": 188}, {"referenceID": 36, "context": "unordered point cloud data described in details in [38].", "startOffset": 51, "endOffset": 55}, {"referenceID": 37, "context": "pare our enhanced DPSO algorithm not only with the conventional DPSO but also with an ant colony system (ACS), where the ACS is implemented as in [39].", "startOffset": 146, "endOffset": 150}], "year": 2017, "abstractText": "In built infrastructure monitoring, an efficient path planning algorithm is essential for robotic inspection of large surfaces using computer vision. In this work, we first formulate the inspection path planning problem as an extended travelling salesman problem (TSP) in which both the coverage and obstacle avoidance were taken into account. An enhanced discrete particle swarm optimisation (DPSO) algorithm is then proposed to solve the TSP, with performance improvement by using deterministic initialisation, random mutation, and edge exchange. Finally, we take advantage of parallel computing to implement the DPSO in a GPU-based framework so that the computation time can be significantly reduced while keeping the hardware requirement unchanged. To show the effectiveness of the proposed algorithm, experimental results are included for datasets obtained from UAV inspection of an office building and a bridge.", "creator": "LaTeX with hyperref package"}}}