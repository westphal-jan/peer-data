{"id": "1706.05518", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Jun-2017", "title": "Evaluating the quality of tourist agendas customized to different travel styles", "abstract": "Many tourist applications offer a personalized tourist agenda with a list of recommended activities for the user. These applications must undoubtedly take into account the limitations and preferences that define the user's interests. Among these preferences, we can find those that define the user's travel style, such as the rhythm of the trip, the number of visits to be included in the tour, or the priority of visits that are of particular interest to the user. In this essay, we deal with the task of creating a customized tourism agenda as a planning and planning application that is able to conveniently plan the most suitable destinations (visits) to maximize the user's satisfaction with the tourist itinerary. In this essay, we analyze the importance of travel style preferences and compare the quality of the solutions achieved by two different solutions, a PDDL-based planner and a Constraint Satisfaction Problem Solver. In addition, we define several quality metrics and conduct extensive experiments to evaluate the results obtained with both solutions.", "histories": [["v1", "Sat, 17 Jun 2017 11:59:40 GMT  (338kb,D)", "http://arxiv.org/abs/1706.05518v1", "Twenty-seventh Workshop on Constraint Satisfaction Techniques for Planning and Scheduling Problems (COPLAS'17)"]], "COMMENTS": "Twenty-seventh Workshop on Constraint Satisfaction Techniques for Planning and Scheduling Problems (COPLAS'17)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["jes\\'us ib\\'a\\~nez-ruiz", "laura sebasti\\'a", "eva onaindia"], "accepted": false, "id": "1706.05518"}, "pdf": {"name": "1706.05518.pdf", "metadata": {"source": "CRF", "title": "Evaluating the quality of tourist agendas customized to different travel styles", "authors": ["Jes\u00fas Ib\u00e1\u00f1ez-Ruiz", "Laura Sebasti\u00e1", "Eva Onaindia"], "emails": ["jeibrui@dsic.upv.es,", "lstarin@dsic.upv.es,", "onaindia@dsic.upv.es"], "sections": [{"heading": "Introduction", "text": "The exponential growth of the Internet of Things and the surge of open data platforms provided by city governments worldwide is providing a new foundation for travel-related mobile products and services. With technology being embedded on all organizations and entities, and the application of the smartness concept to address travellers\u2019 needs before, during and after their trip, destinations could increase their competitiveness level (Buhalis and Amaranggana 2013).\nMany tourism applications provide a personalized tourist agenda with the list of recommended activities to the user (Garcia et al. 2009; Vansteenwegen et al. 2011; Refanidis et al. 2014). In most cases, applications return a tourist route or agenda indicating the most convenient order for the user to realize the activities and, additionally, the path to follow between activities. In other cases, tools provide a dynamic interaction that allows the user to interact with such agenda by adding or removing activities or changing their order.\nSAMAP (Castillo et al. 2008), for instance, elicits a tourist plan including information about the transportation mode, restaurants and bars or leisure attractions such as cinemas or theaters, all this accompanied with a detailed plan explanation. Scheduled routes presented in a map along with a timetable are nowadays a common functionality of many\ntourist applications like e-Tourism (Garcia et al. 2009), including also context information such as the opening and closing hours of the places to visit and the geographical distances between places. In CT-Planner (Kurata and Hara 2014), personalization is understood as taking into account preferences like the walking speed or reluctance to walk of the user, in which case the planner will suggest short walking distances. PersTour (Lim et al. 2015) calculates a personalized duration of a visit using the popularity of the point of interest and the user preferences. The work in (Rodr\u0131\u0301guez et al. 2012) considers user preferences based on the number of days of the trip and the pace of the tour; i.e., whether the user wants to perform many activities in one day or travel at a more relaxed pace.\nPersonalized tourism applications must undoubtedly deal with the constraints and preferences that define the interests of the user. This can be addressed through a scheduler designed for the automatic scheduling of user\u2019s individual activities in an electronic calendar such as SelfPlanner (Refanidis and Alexiadis 2011). In SelfPlanner, user preferences are defined over alternative schedules and the user specifies whether she prefers the task to be scheduled as early or as late as possible or whether she is indifferent on how a task will be scheduled within its temporal domain. SelfPlanner and its descendent (Alexiadis and Refanidis 2016) enable users express their preferences over the way their activities should be scheduled in time. eTourism (Garcia et al. 2009; Iba\u0301n\u0303ez, Sebastia, and Onaindia 2016) approaches the problem of creating a customized tourist plan as a preference-based planning problem encoded in PDDL3.0 and solved with the planner OPTIC (Benton, Coles, and Coles 2012). One limitation of OPTIC is that it does not enable the use of non-linear plan metrics. This makes it unaffordable to deal with situations in which, for instance, the satisfaction of the user with tourist plan does not always increase linearly with its duration.\nTourist preferences are not only about scheduling activities at the user\u2019s preferred time but also dealing with the travel style or personal circumstances of the tourist such as the rhythm of the trip, handling the number of visits to include in the tour or giving more priority to visits of special predilection for the user. Thus, we envision the task of creating a customized tourist agenda as a planning and scheduling (P&S) application capable of conveniently\nar X\niv :1\n70 6.\n05 51\n8v 1\n[ cs\n.A I]\n1 7\nJu n\n20 17\nscheduling the most appropriate goals (visits) so as to maximize the user satisfaction with the tourist route. Our proposal relies upon encoding the tourist agenda problem as a CSP (Constraint Satisfaction Problem). The challenge when using a CSP-based approach is specifically on (a) the encoding of a planning problem as a constraint programming formulation (Garrido, Arangu, and Onaindia 2009; Garcia et al. 2009) and (b) the encoding of user preferences that must be maximized as a function to minimize.\nThe paper is organized as follows. First, a description of the tourist agenda problem is given and we detail the metrics we will use to evaluate each obtained solution. Then, we describe the formulation of this problem for being solved by an automated planner. Afterwards, the problem is encoded as a CSP. In the section Experiments, we analyze the results we have obtained for a set of tourist problems. Finally, we draw some conclusions about this work."}, {"heading": "Problem description", "text": "In this section, we describe the tourist problem to be solved with a planner and a CSP solver. The problem is inspired in the tourist setting introduced in (Iba\u0301n\u0303ez, Sebastia, and Onaindia 2016), which describes the problem of generating an agenda for a tourist. The information included in the problem definition is: (a) a set of recommended points of interest (POIs) for the particular tourist; we assume the existence of a Recommender System (RS) that returns a set of preferable POIs for the user according to her likes; (b) the tourist\u2019s preferences regarding the travel style and model of transport; and (c) context-ware information such as the location or hours of the tourist attractions.\nInitially, the user enters the basic details of the route: the date of the visit, the start and finish point, start and finish hour, the time interval reserved for lunch and the mode of transport she prefers, which may determine the time needed to move between locations. Then, she also indicates her preferences related to her travel style, namely, she indicates if she prefers to include many or few visits in the tour or has no preference over it and if she prefers to obtain an agenda with a high or a low temporal occupation or has no preference over it. Figure 1 shows four examples of agendas that reflect four combinations of these travel style preferences. The first one shows an agenda with a low number of visits but a high temporal occupation with no free time between visits. The second shows an agenda with a low occupation rate, where visits are shorter in order to have some free time between visits. The third example shows a high occupation rate agenda that also contains a high number of visits (in this case, visits 1 and 2 are shorter to be able to include visits 3, 4 and 5). The last example is an agenda with a low occupation rate but a high number of visits."}, {"heading": "Problem formulation", "text": "In order to define a tourist problem, we need to distinguish between the domain data relative to the particular area or city the user wants to visit, and the user data, which specify the personalized features of the tourist route.\n1. Domain information. Two sources of knowledge from the\ndomain are relevant for a tourist problem: the POIs of the city along with their opening and closing times and the travelling time between POIs.\n(a) Information about the POIs. For each POI p of the city, we store three values: the POI identifier and the opening and closing time of p (denoted by openp and closep, respectively). Times are measured from 00:00. For example, <Cathedral, 600, 1170> represents that the POI \u2019Cathedral\u2019 opens at 10:00; i.e., openCathedral=600 (10h*60min/h+0min = 600); and closes at 19:30; i.e., closeCathedral=1170 (19h*60min/h+30min = 1170). The information of the hours of the city POIs will be denoted as H\u2217.\n(b) Travelling times. Additionally, for every two POIs of the city, including the initial and final location of the user\u2019s route, we store the travelling time between them accordingly to the transport mode (e.g., walk, bus, car). For example, <Hotel, Cathedral, walk, 20>, <Hotel, Cathedral, bus, 8>. We will denote the data of travelling times between POIs by T \u2217.\n2. Personalized route information. We distinguish between the data that are directly provided by the user (route details) and the data estimated by the Recommendation System for the user:\n(a) Route details. The user introduces the following data: \u2022 initial and final time of the route, which define the\ntotal time available for the route \u2022 initial and final location of the route, denoted by\nstart loc and final loc, respectively \u2022 initial and final time for the lunch break, if specified \u2022 the transport mode (e.g., walk, bus, car) \u2022 preference of the user for the number of visits; the user\ncan select among the values {few,many, indif} \u2022 preference of the user for the temporal occupation\nof the route; the user can select among the values {high, low, indif}\nWe will refer to the route details introduced by the user as R.\n(b) Recommendation. A set of recommendable POIs for the user to visit are obtainable through the RS. Specifically, for each recommended visit, the RS returns a tuple of the form \u3008p, vp, dminp, dmaxp\u3009, where p is the POI to visit, vp \u2208 [0, vmaxp] is the estimated value of p to the user (i.e., the estimated degree of interest of the user in p), and dminp and dmaxp are the minimum and maximum recommended duration for visiting p, respectively. We will denote the set of recommended visits to a user as V 1.\nA tourist problem Pu for a particular user is defined as a tuple Pu =< R, V,H, T >, where R is the set of route details specified by the user, V is the set of recommended visits to the user, H \u2286 H\u2217 is the hours of the POIs contained in V and T \u2286 T \u2217 is the travelling times between the POIs\n1The RS we used to elicit the list of recommended POIs and values assumes vmaxp = 300.\nin V \u222a{start loc, final loc, restaurant} according to the transport mode selected by the user.\nA solution for a problem Pu =< R, V,H, T > is a sequence of actions or plan \u03a0 that contains move actions from T and visit actions from V . More specifically, \u03a0 = {T\u03a0, V\u03a0}, where: \u2022 T\u03a0 are actions of the form (move p q ts durp,q), being p\nand q two POIs, ts the start time of the move action and durp,q the travelling time between p and q according to the user\u2019s selected transport.\n\u2022 V\u03a0 are actions of the form (visit p ts durp), being p the POI to visit, ts the start time of the visit and durp \u2208 [dminp, dmaxp] the duration recommended for the visit. The restaurant is also included in this set with vrestaurant = 0 2.\nThe goal is to maximize the user satisfaction; that is, including the most-valued recommended visits of V and meeting the user preferences with respect to the number of visits and temporal occupation. We define a penalty cost for violation of user preferences and we pose the problem as finding the solution with minimal penalty."}, {"heading": "Penalties", "text": "There can be many different solutions for the tourist problem defined above, given that different visits can be selected to be included in the plan, with different durations, in different order (which implies different movements from one location to another), etc. Each of these solutions will fit the user preferences in a better or worse way. The solver is aimed at finding the best plan according to some metrics that rely on four types of penalties to assess the degree to which the user preferences are not satisfied. Next, we present the four penalties, which are values in the interval [0,1].\n\u2022 Non-visited POIs: This penalty is used to force the solver to include in the plan those visits with the highest recommendation value. That is, the idea is to obtain a plan with a high utility for the user, where utility is defined with respect to the recommendation value. We have designed\n2In this work, restaurants are not defined as POIs. We consider a generic POI restaurant that the user must visit if a lunch break is specified. Including a list of restaurants as POIs of V alongside their recommended value to the user is straightforward.\nthree different utilities which, in turn, define three different penalties by substracting the obtained utility from the highest possible utility. Equation 1 calculates the utility as the ratio of the recommendation value of the visits included in the plan with respect to the maximum recommendation value that a plan could have, that is, the sum of the recommendation value of all the elements in V 3:\nU1 = \u2211 p\u2208V\u03a0 vp\u2211 p\u2208V vp\nPU1 = 1\u2212 U1 (1)\nThe second way to calculate this penalty is formalized in equation 2. In this case, the utility is calculated as the sum of the recommendation value of all the visits included in the final plan multiplied by the time spent in each visit, with respect to the total time spent in the plan (that is, taking into account movements between locations). The aim of this penalty is to consider how long the user is visiting a place with a high recommendation value, not only that this place is visited.\nU2 =\n\u2211 p\u2208V\u03a0 (vp \u2217 durp)\ntotal time PU2 = (vmaxp \u2212 U2) /vmaxp\n(2) And finally, the third way to calculate this penalty, shown in equation 3, is similar to equation 2, but the recommendation value per time unit is divided by the total time spent on visiting POIs, instead of the total available time:\nU3 =\n\u2211 p\u2208V\u03a0\n(vp \u2217 durp)\u2211 p\u2208V\u03a0 durp PU3 = (vmaxp \u2212 U3) /vmaxp\n(3) For example, for the first plan in Figure 1, where the recommendation value v and the duration interval for each visit are shown on the right and vmaxp = 300, the penalties would be calculated as follows:\n\u2013 PU1 = 1\u2212 300+2801480 = 0.61, where 1480 is the sum of v for all the visits.\n3Abusing the notation, we will write p \u2208 V or p \u2208 V\u03a0 when we refer to the POI p of an action visit p ts durp. And we will use (p, q) \u2208 T\u03a0 when we refer to the POIs p and q of an action move p q ts durp,q).\n\u2013 PU2 = (300 \u2212 300\u2217240+280\u2217150600 )/300 = 0.37, where 240 and 150 are the duration of visits 1 and 2, respectively, and 600 is the total available time of the user. \u2013 PU3 = (300 \u2212 300\u2217240+280\u2217150240+150 )/300 = 0.03. This is a low value because, in fact, the recommendation value per time unit is nearly maximal.\nIf we compare these values of the penalties for the first plan, with the values obtained for the fourth plan, which are 0.14, 0.57 and 0.15, respectively, we can observe that: (1) PU1 is much better for the fourth plan, because it includes three more visits; (2) however, PU2 and PU3 are better in the first plan, because the utility per time unit is higher as the new visits included in the fourth plan have a lower recommendation value.\n\u2022 Movement time: Movement time is the sum of all time needed to move between the locations included in the plan. The aim of this penalty is to force the solver to reduce the time spent in moving from one location to another.\nPjourney =\n\u2211 (p,q)\u2208T\u03a0 durp,q\ntotal time\nUsing the first plan as in the example above, this penalty would be calculated as: Pjourney = 20+10+30+20600 = 0.13 \u2022 Number of visits: As for the preference regarding the number of visits, which denotes whether the user desires a tour with many POIs to visit, few POIs or it is indifferent to her, the penalty considers the number of visits included in the plan with respect to the total recommended places:\nP#visits =  |V |\u2212|V\u03a0| |V | if many\n0 if indif. |V\u03a0| |V | if few\nTaking into account that the first plan in Figure 1 represents a plan with a few number of visits, this penalty would be calculated as: P#visits = 26 = 0.33. Obviously, the fourth plan with the same preference would have a higher value of the penalty, specifically 0.83, given that it includes 5 visits.\n\u2022 Occupation: If the user selects a high temporal occupation, the free time must be minimized. If the user selects a low temporal occupation, then the variables to minimize are the time spent on visits or travelling. In case the user selects \u201dindifferent\u201d, it is not needed to minimize any expression. free time is defined as the slack time between activities and it is calculated as the difference between the total available time and the time spent in actions in the plan:\nfree time = total time\u2212 \u2211 p\u2208V\u03a0 durp \u2212 \u2211 (p,q)\u2208T\u03a0 durp,q\nTherefore, the penalty is defined as follows:\nPoccup =  free time total time if high 0 if indif.\n1 free time\u2217total time if low\nTaking into account that the first plan in Figure 1 represents a plan with a high temporal occupation, this penalty would be calculated as: Poccup = 0600 = 0, which is consistent with the fact that there is not free time in this case and, therefore, there is not any penalty due to occupation. In contrast, these penalty for the second plan would take a value of 0.47."}, {"heading": "Metrics", "text": "In this section, we define the set of metrics that make use of the penalties introduced above. Given that these are penalties, a plan satisfies better the user preferences when the values of the penalties are lower; therefore, the metrics must be minimized.\nIn general, these metrics consist in the addition of the four penalties defined above. That is, all the factors are considered equally.\n\u2022 M1: utility per POI: This metrics uses the first defined not-visited POIs penalty PU1, therefore emphasis is put on how many POIs with high utility are visited. It will take a value in the interval [0,4].\nM1 = PU1 + Pjourney + P#visits + Poccup\nFor example, assuming that the user prefers few visits and a high temporal occupation in the plan, this metrics would take the following values for each plan in Figure 1: 1.09, 1.54, 1.18 and 1.28. This means that, according to this metrics, the best plan would be the first plan and the second plan would be the worst one; that is, in this particular example, the penalty due to the number of visits has not a great weight.\n\u2022 M2: utility per time unit with respect to the total available time: M2 uses the second not-visited POIs penalty PU2, which considers the utility of each visit per time unit with respect the total time, thus taking into account the travelling actions, that do not provide any reward. Given that journeys are already considered, Pjourney penalty is excluded from M2, so this metrics will take a value in the interval [0,3]. Specifically:\nM2 = PU2 + P#visits + Poccup\nFor example, assuming the same preferences than above (few visits and a high temporal occupation), this metrics would take the following values for each plan in Figure 1: 0.7, 1.61, 1.34 and 1.48; that is, the best plan would be the first plan and the second plan would be the worst according to this metrics. Again, the penalty for the number of visits has a lower impact than the penalty due to occupation in this example.\n\u2022 M3: utility per time unit with respect to the time spent in visits: M3 considers the utility of the selected visits per time unit regarding the time spent in visits only, with the aim of focusing on how satisfying are the visits for the users, in spite of the time spent on travelling from one place to another. Specifically:\nM3 = PU3 + Pjourney + P#visits + Poccup\nFor example, assuming the same preferences than above (few visits and a high temporal occupation), this metrics would take the following values for each plan in Figure 1: 0.51, 0.96, 1.2 and 1.28; that is, the best plan would be the first plan and the fourth plan would be the worst according to this metrics. Unlike the previous metrics, in this particular example, PU3 is penalizing, in a greater degree, the plans with many visits than the plans with a low occupation.\nIn summary, we can observe that, in all cases, the metrics have selected correctly the best plan according to the user preferences. The degree in which the other plans are penalized depend on the particular configuration of the plan, as the results will show."}, {"heading": "PDDL encoding", "text": "This section describes the planning formulation of the tourist problem described in the prior section. We will specify the problem with PDDL (Planning Domain Definition Language), the standard language for encoding planning problems.\nThe features required to define the tourist problem in PDDL are: (1) temporal planning and management of durative actions (e.g., duration of visits, time spent in transportation, etc.); (2) ability of reasoning with temporal constraints (e.g., scheduling the activities within the opening hours of places, planning the tour within the available time slot of the tourist, etc.) and (3) ability of reasoning with the tourist preferences (e.g., selecting the preferred activities of the user for planning the tour). Specifically, apart from durative actions, which were introduced in PDDL 2.1 (Fox and Long 2003), we also need the following features:\n\u2022 Duration inequality to define the duration of an action as a value within an interval. This functionality was included in PDDL2.1.\n\u2022 Timed initial literals: to describe deterministic and unconditional exogenous events. They were included in PDDL2.2 (Edelkamp and Hoffmann 2004).\n\u2022 Preferences or soft goals to express the user preferences. They were included in PDDL3.0 (Gerevini et al. 2009).\n\u2022 Plan metrics to allow quantitative evaluation of plans for selecting the best plan. This was included in PDDL2.1.\nSubsequently, we describe the PDDL problem formulation from the input data Pu =< R, V,H, T >."}, {"heading": "Variables", "text": "The problem variables are specified through predicates and functions. Visiting a POI is described by means of:\n\u2022 The interval duration of visiting a POI p is defined through the functions (min visit duration ?p) and (max visit duration ?p). They will be assigned the values dminp and dmaxp of the corresponding POI p in the list V .\n\u2022 The opening and closing time of a POI p are specified by a timed-initial literal: (at openp (open p)) and (at\nclosep (not (open p))), where openp and closep are defined in H .\nThe time for moving from one location p to another location q is defined by the function (location time p q), which indicates the time in minutes to move from p to q as indicated in T . We note that T contains the travelling time between the POIs of V according to the transport mode specified by the user. We also need the following predicates and functions:\n\u2022 A predicate that represents the user initial location, (person at start loc), which will be modified when a move action is applied.\n\u2022 The function (free time) represents the remaining available time; the initial value is set to total time, which will decrease as new activities are included in the plan.\n\u2022 Two functions to compute the metrics during the plan construction, namely, a function to count the number of visits included in the plan, (number visit location); and the function (transport time) to add up the time spent in move actions."}, {"heading": "Actions", "text": "We define three three types of actions in the tourist problem: move, visit and eat actions.\nThe action to move from one location to another is shown in Figure 2. The parameters are the initial place ?x, the user ?y and the destination ?z. The action duration is set to the time specified in T . The preconditions for this action to be applicable are: (1) the user is at location ?x and (2) the free time is greater than the move duration. The effects of the action assert that (1) the user is not longer at the initial location, (2) the user is at the new location at the end of the action and (3) the free time and the time spent in the movement are modified accordingly to the action duration.\nThe action to visit a POI is defined in Figure 3. The parameters are the POI to visit ?x and the user ?y. The action duration is a value between (min visit time ?x) and (max visit time ?x) which must be smaller than the remaining available time (free time). The planner will choose the actual duration of the action according to these\nconstraints. The conditions for this action to be applicable are: (1) the POI has not been visited yet; (2) the user is at the POI during the whole execution of the action; and (3) the place is open during the whole execution of the action. The effects of the action assert that (1) the POI has been visited4, (2) the number of visited locations is increased and (3) the free time is updated according to the visit duration.\nFinally, the eat action to represent the activity of \u201dhaving lunch\u201d is similarly defined to the visit action."}, {"heading": "Goal and optimization function", "text": "We define two different types of goals:\n\u2022 Hard goals that represent the realization of an action that the user has specified as mandatory (e.g., the location the user has indicated final destination: (person at locationfinal)).\n\u2022 Soft goals or preferences that we wish to satisfy in order to generate a good plan but that do not have to be achieved in order for the plan to be correct (Gerevini et al. 2009). We will assign penalties to violated preferences.\nThe objective is to find a plan that achieves all the hard goals and minimize the total penalty for unsatisfied preferences. For example, the specification of metric M1 (see Sections Penalties and Metrics) in PDDL is expressed as: (:metric minimize (+\nPU1 Pjourney P#visits Poccup))\n(1) PU1. The specification of PU1 requires defining a preference for every POI in V ; e.g. (preference p1 (visit location id 1)) (preference p2 (visit location id 2))\nand defining the penalty PU1 for each preference: (/ (* 250 (is-violated p1)) 532) (/ (* 282 (is-violated p2)) 532)\n4Two predicates are necessary to indicate a visit has been done if the planner does not allow for negated conditions.\nwhere vid1 = 250, vid2 = 282 and \u2211\np\u2208V vp = 532 (assuming V contains only two POIs, id 1 and id 2).\n(2)Pjourney. This penalty is specified as (/ (transport time) 540) where total time = 540 in this particular example.\n(3) P#visits. If the user selected few visits, this penalty is expressed as (/ (number visit location) 10), where |V | = 10 in this example.\n(4) Poccup. Assuming the user selected a high temporal occupation in the plan, this is expressed as (/ (free time) 540) with total time = 540."}, {"heading": "CSP model", "text": "This section details the specification of the tourist problem Pu =< R, V,H, T > as a CSP."}, {"heading": "Constraints", "text": "In this section we explain the constraints that it is necessary to specify in order to correctly solve the tourist problem.\nPlan structure. Among the V places recommended by the RS, not all of them will be possibly included in the agenda due to several temporal restrictions. We define an array P of |V |+3 elements that is used to record the places that will be included in the tourist route. The |V | variables take a value in {0, 1} to denote whether or not the respective place is a visit to realize in the route. The three extra variables defined in P represent the initial location of the user (always set to 1), the restaurant (this variable equals 1 if the user selected a lunch time interval) and the destination (always set to 1).\nFor example, for the first plan of Figure 1, and assuming |V | = 6, the final array P will be P = \u3008Orig, V is1, V is2, V is3, V is4, V is5, V is6, Rest,Dest\u3009, where variables P0, P1, P2, P7 and P8 are set to 1 and the value of variables from P3 (V is3) to P6 (V is6) is 0 because they are not included in the plan.\nPlan sorting. The constraints explained in this subsection are devoted to obtain a correct plan from the point of view of the ordering of the visits. Specifically, assuming that each visit included in a plan is assigned a number in the sequence, a plan is correctly ordered if: the current location of the user is assigned the 0th position and the destination of the user is assigned the nth position (if the plan has n+1 visits). This implies that there are not empty positions in the plan.\nIn order to obtain a correct plan, several additional structures and constraints must be added. Let Aij be a 2- dimension matrix ((|V |+ 3)\u00d7 (|V |+ 3)) with components in a {0, 1} domain. Aij is used to represent the sequence of visits in the plan, where i is the visited place and j is the order of i in the sequence. For example, the first plan in Figure 1 would be stored in a matrix A of 9x9, where all the elements Aij are equal to 0, except A00, which indicates that the user is initially at start location; A21 to represent that the first to visit is V is2; A72 to indicate that next the user heads to the restaurant; A13 to represent that in the next step the user visits V is1 and A84 to indicate that the user finishes her route in the destination.\nAij must fulfill two conditions: a place can only be visited once and two or more monuments cannot be visited at the same time.\n\u2200i |V |+2\u2211 j=0 Aij \u2264 1 \u2200j |V |+2\u2211 i=0 Aij \u2264 1\nLet mijk be a 3-dimension matrix ((|V |+3)\u00d7(|V |+3)\u00d7 (|V | + 2)) whose components take a value in {0, 1}. This matrix establishes a relationship between a place to visit and the next one. That is, mijk is set to 1 if place i is visited immediately before j, and i is visited in position k. More formally:\n\u2200i, j, k/i, j \u2208 [0, |V |+ 2], k \u2208 [0, |V |+ 1] : mijk = Aik \u2217Aj(k+1)\nConsidering the matrix A above, all the elements in the matrix mijk are 0 except m020,m271,m712,m183. For example, m271 denotes that after visiting the second place of array P (V is2) in position 1 the user heads to the fifth place of P (Rest).\nThe aforementioned constraints may not prevent the model from generating an incorrect solution like the one shown before. In order not to have empty positions in the sequence of visits, i.e., positions in which no visit is applied, we use the following constraint:\n\u2200j \u2208 [1, |V |+ 2] : |V |+2\u2211 i=0 Aij \u2264 |V |+2\u2211 i=0 Ai(j\u22121)\nThe last place in the tourist agenda must be the user destination. Hence, if the user destination appears in the jth position of the sequence of visits, all the values on the right of column jth in matrix A must be 0.\nIf A(|V |+2)j = 1\u21d2 \u2200z/j < z \u2264 |V |+ 2 : |V |+2\u2211 z=0 Aiz = 0\nTemporal constraints over the visits included in the plan These constraints are used to determine the value of (starti, finishi) for each visit and lunch action i included in the plan.\nA recommended interval of the duration of each visit [dmini, dmaxi] is provided by the RS. The following constraint establishes that the actual duration of a visit must fall within the recommended interval:\n\u2200i \u2208 [1, |V |+1]/Pi = 1 : dmini \u2264 durationi \u2264 dmaxi The finish time of a visit is specified as: \u2200i \u2208 [1, |V |+ 1]/Pi = 1 : finishi = starti + durationi\nA visit to a POI i must be performed within the interval of the opening hours in H , denoted as [openi, closei]:\n\u2200i \u2208 [1, |V |+ 1]/Pi = 1 : openi \u2264 starti \u2227 finishi \u2264 closei\nIn order to calculate the start time of a visit j, the estimated time needed to move from the prior visit i (defined as duri,j in T ) must be taken into account:\n\u2200i, j, k/i, j \u2208 [0, |V |+ 2], k \u2208 [0, |V |+ 1] : if mijk = 1\u21d2 startj > finishi + duri,j"}, {"heading": "Optimization function", "text": "The constraints specified in the previous section enables the CSP solver to obtain a valid plan. Since our aim is to obtain a high-quality plan that fits the user\u2019s preferences, some other factors must be considered. In this case, we have implemented all the designed metrics as defined in Section Metrics by using the variables defined above. For example, the Pjourney penalty can be formalized as follows:\nPjourney =\n\u2211 \u2200i,j,k duri,j \u2217mijk\ntotal time (4)\nwhere duri,j is the duration of the travelling time from i to j as defined in T ."}, {"heading": "Solution", "text": "A CSP solution is a pair of the form (starti, finishi) for the lunch action and for each recommended visit i. In case that the POI is included in the plan, starti and finishi indicate the start and finish time of the visit, otherwise these values are set to 0. Therefore, V\u03a0 would contain all the visits with values greater than 0 in starti and finishi. On the other hand, each travelling action to be included T\u03a0 would be obtained from the gaps between visits.\nThe following table represents the CSP output from the first plan in Figure 1. In this case, visits V 2 and V 3 and the restaurant would be included into V\u03a0 and, for example, the travelling action from the start location to the first visit (V 2) would start at time 0 with a duration of 20.\nV1 V2 V3 V4 V5 V6 R Start 320 20 0 0 0 0 180 Finish 570 170 0 0 0 0 300"}, {"heading": "Experiments", "text": "This section presents the results obtained when solving the tourist problem with the PDDL-encoding and the CSPencoding.\nAccording to the features required to formulate the PDDL problem, we need a planner that handles PDDL3.0. A few automated planners are capable of this, such as MIPSXXL (Edelkamp, Jabbar, and Nazih 2006), SGPLAN5 (Chen, Wah, and Hsu 2005) or OPTIC (Benton, Coles, and Coles 2012). We opted for OPTIC because it manages non-fixed durations, preferences and other helpful functionalities. OPTIC is a heuristic planner that adapts the FF\u2019s relaxed-plan heuristic (Hoffmann 2003) to temporal settings and numeric preference satisfaction. OPTIC uses a hill-climbing algorithm in combination with a greedy algorithm, which enables to efficiently obtain good-quality solutions.\nHowever, OPTIC presents a severe limitation as it is not able to handle nonlinear functions. This prevents us from testing the metric M3 that involves the nonlinear penalty U3. On the other hand, let\u2019s assume the preference (preference p1 (visit location id 1)) in a problem; given that preference violation is expressed in PDDL through the variable (is-violated p1), encoding U2 would require to be able to express (* (is-violated p1) (duration visit id 1)), which is not allowed in\nOPTIC. This nonlinearity restriction also affects the definition of the low temporal occupation penalty, reason why we implemented the occupation formula presented in (Iba\u0301n\u0303ez, Sebastia, and Onaindia 2016) where Poccup = free timetotal time if high and Poccup = total time\u2212free timetotal time if low. In summary, OPTIC has been tested in a modified version of metric M1 which we will refer to as M1\u2032.\nFor solving the CSP-encoding, we chose a fast CSP solver like CHOCO (Prud\u2019homme, Fages, and Lorca 2016). We used the CHOCO function that, according with the manual, returns the optimal solution provided that no stop criteria is applied in the search. The variable and value selector is based on \u201cDowOverWDeg + LB\u201d strategy that solves the hard-constraints firstly and it reaches a good solution in a short time. Unlike OPTIC, CHOCO provides a greater flexibility and the possibility of testing all the defined metrics.\nWe tested the quality of the solutions obtained with the four possibilities (M1\u2032 in OPTIC, denoted as OPT-M1\u2019, and from M1 to M3 in CHOCO, denoted by CHO-M1 to CHOM3), as well as the temporal performance of both solvers5. For doing this, we randomly generated a set of problems,\n5Experiments were performed in an intel i7-4790 3.6 Ghz machine with 16 GB DDR3.\nwith the following parameters: (1) a random vp value for each POI in the interval [180, 300]; (2) a random distance between every two locations T in the interval [1, 60]; (3) for the visit duration, we take a random value between 30 and 200 minutes which determines the average duration visit (in case this value is larger than the total available time, the system will discard it); then, we compute the duration interval as explained in (Iba\u0301n\u0303ez, Sebastia, and Onaindia 2016) (i.e. we apply a normal distribution to obtain dminp and dmaxp).\nWe set three different values for the number of recommended places, |V | = 5, |V | = 7 and |V | = 10, and three different values for the total time of the route: a short plan (3 hours), half-day (5 hours) and all-day (9 hours). This makes a total of 9 different problem types. Only in the case of all-day routes, the plan will include the lunch time interval, which is a fixed-duration interval in a fixed time slot. Then, we added the 9 possible combinations of user preferences P#visits = {Many, Indifferent, Low} and Poccupation = {High, Indifferent, Low} to each problem type, thus having a total of 81 combinations. We generated two problem instances for each combination creating a total of 162 problems with a wide range of opening hours for each place.\nWe used different measures to evaluate the quality of the\nobtained plans with respect to the user preferences. We analyzed the number of visits in the plan and the level of occupation of the plan, that is, the ratio of the time the user is doing any activity (a visit, a journey between two places or having lunch) to the total time:\nOccup = 1\u2212 free time total time\nMoreover, we analyzed the utility of the obtained plans with the utility measures U1, U2 and U3 defined in Equation 1, 2 and 3, except for U1, which has been slightly modified as follows:\nU1\u2217 =\n\u2211 \u2200i\u2208V\u03a0 vi\n|V\u03a0| \u2217 vmaxp (5)\nThe results for the generated problem set are shown in the plots from Figure 4 to Figure 9. Each Figure consists of nine plots, resulting from the combination of the values \u2019Few\u2019, \u2019Indif\u2019 or \u2019Many\u2019 for the preference P#visits along the X axis; and \u2019Low\u2019, \u2019Indif\u2019 or \u2019High\u2019 for Poccupation along the Y axis. Each single plot pictures 4 bars, where the first corresponds to OPT-M1\u2019 and the other three correspond to CHO-M1 to CHO-M3. For example, the plot in the leftbottom corner of Figure 7 shows, for each of the four plan metrics, the average percentage of occupation of the agendas for all the problems where the user has defined a \u2019High\u2019 temporal occupation and a \u2019Few\u2019 number of visits.\nFigures from 4 to 6 show the average utility measured by U1\u2217, U2 and U3 (equations 5, 2 and 3, respectively) for the 9 combinations of user preferences. We can observe that the utility values are very similar for the four metrics in Figures 4 and 6. However, in Figure 5, the values are significantly lower for OPTIC. This is because CHOCO, which returns the optimal value for the three metrics, tends to principally minimize the penalty for the non-visited POIs of the list V . Consequently, CHOCO plans will typically include the most-valued POIs, a larger number of POIs or the POIs that render more utility per unit time and so the plans will have higher utility values, which is specially notable for the \u2019Low\u2019 occupation. This is also confirmed with the results of Tables 1 and 2. Table 1 shows the average results of the utility measures in the solution plans obtained for the problem\ninstances with occupation \u2019High\u2019, \u2019Indif\u2019 and \u2019Low\u2019. And Table 2 shows the average results of the utility in the solution plans obtained for the problem instances where the user selected \u2019Many\u2019, \u2019Indif\u2019 o \u2019Few\u2019 number of visits. We can also observe in the Tables that the average occupation and number of visits is always higher in CHOCO for the aforementioned reason. For instance, for problems where the user selected \u2019Few\u2019 visits, OPTIC includes only one POI in the majority of plans while CHOCO includes two POIs.\nThe plot in Figure 7 shows the percentage of occupation for each of the 9 possible combinations of user preferences. The four plan metrics yield high values of occupation when Poccupation \u2019High\u2019. However, when the user selects \u2019Low\u2019 or \u2019Indif\u2019, we can observe the values of OPTIC are significantly lower, which could be interpreted as a result more compliant with a \u2019Low\u2019 occupation (for the case \u2019Indif\u2019 any value would be equally acceptable). Likewise, this is explained because CHOCO solution represents a plan in which the user is visiting highly-recommendable POIs for longer or the plan includes more POIs than the plans returned by OPTIC, and this negatively affects the occupation in problems where the this preference is set to \u2019Low\u2019. However, given that the values of OPTIC plans are around 40% of the route occupancy, one might see this as an \u2019extremely low\u2019 value. This interpretation would obviously depend on the user likes, an indication that a more accurate definition of user preferences might be preferable. On the other hand, CHO-M2 and CHO-M3 are clearly the metrics less compliant with a \u2019Low\u2019 occupancy preference, an indication that CHOCO tends to maximize the time the user is visiting highly-recommendable POIs.\nThe plots in Figure 8 show the average number of visits. In general, metrics OPT-M1\u2019 and CHO-M1 are the best performers, except in the \u2019Few-High\u2019 dimension and \u2019ManyLow\u2019 dimension, respectively. This reflects the fact that OPT-M1\u2019 is more sensible to the \u2019Low\u2019 occupation preference, similarly to Figure 7, whereas CHO-M1 is more sensible to the \u2019High\u2019 occupation preference. With respect to the execution time shown in Figure 9 (time in minutes), again OPT-M1\u2019 and CHO-M1 are the top performers in all the dimensions. In general, we can observe that when Poccupation\nis \u2019High\u2019 and P#visits is \u2019Many\u2019, both solvers require longer to solve the problems with any metric.\nThe values in Tables 1 and 2 allow us to examine the plan metrics with respect to the achievement of the user preferences. Table 1 shows that the best metrics wrt the utility and level of occupation for a \u2019High\u2019 and \u2019Indif\u2019 Poccupation are CHO-M2 and CHO-M3, although the differences in the \u2019High\u2019 case are smaller. In the \u2019Low\u2019 case, the best results are obtained by OPT-M1\u2019, followed by CHO-M1. This follows the same tendency as above, where OPTIC is more compliant with \u2019Low\u2019 occupation values. In Table 2, the best metric for \u2019Many\u2019 and \u2019Indif\u2019 number of visits is CHOM1; however, CHO-M2 obtains better utility values. This means that, although CHO-M2 includes less visits in the plan, the utility per time unit for the user is higher. For the case of \u2019Few\u2019 visits, the best metrics is OPT-M1\u2019, in line with the rest of results, followed by CHO-M2, which obtains higher utility values. We can conclude that maximizing\u2211 p\u2208V\u03a0 (vp \u2217 durp) provides the best utility to the user and that CHO-M2 is the best plan metric."}, {"heading": "Conclusion", "text": "This paper describes the tourist problem, which consists in creating a personalized tourist agenda taking into account, apart from the usual constraints, such as maximizing the user satisfaction with the visits, other user preferences related to the travel style. We detail how this problem can be solved both using an automated planner and a CSP solver. We tested various plan metrics in two problem sets and showed that a plan metric that takes into account all the activities of the tour, including travelling times between places, yields in general a better utility to the user."}, {"heading": "Acknowledgments", "text": "This work has been partly supported by the Spanish MINECO under project TIN2014-55637-C2-2-R."}], "references": [{"title": "Alternative plan generation and online preference learning in scheduling individual activities", "author": ["Alexiadis", "A. Refanidis 2016] Alexiadis", "I. Refanidis"], "venue": "International Journal on Artificial Intelligence Tools 25(3):1\u201328", "citeRegEx": "Alexiadis et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Alexiadis et al\\.", "year": 2016}, {"title": "Temporal planning with preferences and time-dependent continuous costs", "author": ["Coles Benton", "J. Coles 2012] Benton", "A.J. Coles", "A. Coles"], "venue": "In Proc. ICAPS,", "citeRegEx": "Benton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Benton et al\\.", "year": 2012}, {"title": "Smart tourism destinations enhancing tourism experience through personalisation of services", "author": ["Buhalis", "D. Amaranggana 2013] Buhalis", "A. Amaranggana"], "venue": "In Proc. Int. Confernece on Information and Communication Technologies in Tourism,", "citeRegEx": "Buhalis et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Buhalis et al\\.", "year": 2013}, {"title": "samap: An user-oriented adaptive system for planning tourist visits. Expert Systems with Applications 34(2):1318\u20131332", "author": ["Castillo"], "venue": null, "citeRegEx": "Castillo,? \\Q2008\\E", "shortCiteRegEx": "Castillo", "year": 2008}, {"title": "Temporal planning using subgoal partitioning and resolution in SGPlan", "author": ["Wah Chen", "Y. Hsu 2005] Chen", "B.W. Wah", "C. Hsu"], "venue": "Journal of Artificial Intelligence Research", "citeRegEx": "Chen et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2005}, {"title": "PDDL2.2: the language for the classical part of IPC\u20134", "author": ["Edelkamp", "S. Hoffmann 2004] Edelkamp", "J. Hoffmann"], "venue": "In Proc. International Planning Competition (ICAPS),", "citeRegEx": "Edelkamp et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Edelkamp et al\\.", "year": 2004}, {"title": "Large-scale optimal PDDL3 planning with mips-xxl", "author": ["Jabbar Edelkamp", "S. Nazih 2006] Edelkamp", "S. Jabbar", "M. Nazih"], "venue": "In 5th International Planning Competition Booklet,", "citeRegEx": "Edelkamp et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Edelkamp et al\\.", "year": 2006}, {"title": "PDDL2.1: An extension to PDDL for expressing temporal planning domains", "author": ["Fox", "M. Long 2003] Fox", "D. Long"], "venue": "Journal of Artificial Intelligence Research", "citeRegEx": "Fox et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Fox et al\\.", "year": 2003}, {"title": "e-Tourism: a tourist recommendation and planning application", "author": ["Garcia"], "venue": "International Journal on Artificial Intelligence Tools 18(5):717\u2013738", "citeRegEx": "Garcia,? \\Q2009\\E", "shortCiteRegEx": "Garcia", "year": 2009}, {"title": "A constraint programming formulation for planning: from plan scheduling to plan generation", "author": ["Arangu Garrido", "A. Onaindia 2009] Garrido", "M. Arangu", "E. Onaindia"], "venue": "Journal of Scheduling", "citeRegEx": "Garrido et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Garrido et al\\.", "year": 2009}, {"title": "Deterministic planning in the fifth international planning competition: PDDL3 and experimental evaluation of the planners", "author": ["Gerevini"], "venue": "Artificial Intelligence", "citeRegEx": "Gerevini,? \\Q2009\\E", "shortCiteRegEx": "Gerevini", "year": 2009}, {"title": "Planning tourist agendas for different travel styles", "author": ["Sebastia Ib\u00e1\u00f1ez", "J. Onaindia 2016] Ib\u00e1\u00f1ez", "L. Sebastia", "E. Onaindia"], "venue": "In Proc. ECAI,", "citeRegEx": "Ib\u00e1\u00f1ez et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Ib\u00e1\u00f1ez et al\\.", "year": 2016}, {"title": "Ctplanner4: Toward a more user-friendly interactive day-tour planner", "author": ["Kurata", "Y. Hara 2014] Kurata", "T. Hara"], "venue": "In Proc. Int. Information and Communication Technologies in Tourism,", "citeRegEx": "Kurata et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kurata et al\\.", "year": 2014}, {"title": "Personalized tour recommendation based on user interests and points of interest visit durations", "author": ["Lim"], "venue": "In Proc. 24th IJCAI,", "citeRegEx": "Lim,? \\Q2015\\E", "shortCiteRegEx": "Lim", "year": 2015}, {"title": "Deployment and evaluation of selfplanner, an automated individual task management system", "author": ["Refanidis", "I. Alexiadis 2011] Refanidis", "A. Alexiadis"], "venue": "Computational Intelligence", "citeRegEx": "Refanidis et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Refanidis et al\\.", "year": 2011}, {"title": "myVisitPlanner gr: Personalized Itinerary Planning System for Tourism", "author": ["Refanidis"], "venue": "In Proc. SETN,", "citeRegEx": "Refanidis,? \\Q2014\\E", "shortCiteRegEx": "Refanidis", "year": 2014}, {"title": "Interactive design of personalised tourism routes. Tourism Management 33(4):926\u2013940", "author": ["Rodr\u0131\u0301guez"], "venue": null, "citeRegEx": "Rodr\u0131\u0301guez,? \\Q2012\\E", "shortCiteRegEx": "Rodr\u0131\u0301guez", "year": 2012}, {"title": "The city trip planner: An expert system for tourists", "author": ["Vansteenwegen"], "venue": "Expert Syst. Appl. 38(6):6540\u20136546", "citeRegEx": "Vansteenwegen,? \\Q2011\\E", "shortCiteRegEx": "Vansteenwegen", "year": 2011}], "referenceMentions": [], "year": 2017, "abstractText": "Many tourist applications provide a personalized tourist agenda with the list of recommended activities to the user. These applications must undoubtedly deal with the constraints and preferences that define the user interests. Among these preferences, we can find those that define the travel style of the user, such as the rhythm of the trip, the number of visits to include in the tour or the priority to visits of special interest for the user. In this paper, we deal with the task of creating a customized tourist agenda as a planning and scheduling application capable of conveniently scheduling the most appropriate goals (visits) so as to maximize the user satisfaction with the tourist route. This paper makes an analysis of the meaning of the travel style preferences and compares the quality of the solutions obtained by two different solvers, a PDDL-based planner and a Constraint Satisfaction Problem solver. We also define several quality metrics and perform extensive experiments in order to evaluate the results obtained with both solvers.", "creator": "LaTeX with hyperref package"}}}