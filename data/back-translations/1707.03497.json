{"id": "1707.03497", "review": {"conference": "nips", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jul-2017", "title": "Value Prediction Network", "abstract": "In contrast to typical model-based RL methods, VPN learns a dynamic model whose abstract states are trained to make optional predictions of future values (discounted sum of rewards) instead of future observations. Our experimental results show that VPN has several advantages over model-free and model-based baselines in a stochastic environment where careful planning is required, but building a precise observation and prediction model is difficult. Furthermore, VPN outperforms Deep Q Network (DQN) in several Atari games even with short-term planning and demonstrates its potential as a new way to learn good government representation.", "histories": [["v1", "Tue, 11 Jul 2017 23:32:36 GMT  (2705kb,D)", "http://arxiv.org/abs/1707.03497v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LG", "authors": ["junhyuk oh", "satinder singh", "honglak lee"], "accepted": true, "id": "1707.03497"}, "pdf": {"name": "1707.03497.pdf", "metadata": {"source": "CRF", "title": "Value Prediction Network", "authors": ["Junhyuk Oh", "Satinder Singh", "Honglak Lee"], "emails": ["junhyuk@umich.edu,", "baveja@umich.edu,", "honglak@umich.edu,", "honglak@google.com"], "sections": [{"heading": "1 Introduction", "text": "Model-based reinforcement learning (RL) approaches attempt to learn a model that predicts future observations conditioned on actions and can thus be used to simulate the real environment and do multi-step lookaheads for planning. We will call such models an observation-prediction model to distinguish it from another form of model introduced in this paper. Building an accurate observationprediction model is often very challenging when the observation space is large [23, 7, 14, 4] (e.g., highdimensional pixel-level image frames), and even more difficult when the environment is stochastic. Therefore, a natural question is whether it is possible to plan without predicting future observations.\nIn fact, raw observations may contain information unnecessary for planning, such as dynamically changing backgrounds in visual observations that are irrelevant to their value/utility. One could try and predict abstractions of observations, but then it is unclear how to roll such predictions forward to make multi-step predictions without accumulating large error. The starting point of this work is the premise that what planning truly requires is the ability to predict the rewards and values of future states. An observation-prediction model relies on its predictions of observations to predict future rewards and values. What if we could predict future rewards and values directly without predicting future observations? Such a model could be more easily learnable for complex domains. In this paper, we address the problem of learning and planning from a value-prediction model that can directly generate/predict the value/reward of future states without generating future observations.\nOur main contribution is a novel neural network architecture we call the Value Prediction Network (VPN). The VPN combines model-based RL (i.e., learning the dynamics of an abstract state space sufficient for computing future rewards and values) and model-free RL (i.e., mapping the learned abstract states to rewards and values) in a unified framework. In order to train a VPN, we propose a combination of temporal-difference search [27] (TD search) and n-step Q-learning [22]. In brief, VPNs learn to predict values via Q-learning and rewards via supervised learning. At the same time, VPNs perform lookahead planning to choose actions and compute bootstrapped target Q-values.\nOur empirical results on a 2D navigation task demonstrate the advantage of VPN over model-free baselines (e.g., Deep Q-Network [21]). We also show that VPN is more robust to stochasticity in the environment than an observation-prediction model approach. Furthermore, we show that our VPN outperforms DQN on several Atari games [2] even with short-lookahead planning, which suggests that our approach can be potentially useful for learning better abstract-state representations and reducing sample-complexity.\nar X\niv :1\n70 7.\n03 49\n7v 1\n[ cs\n.A I]\n1 1\nJu l 2\n01 7"}, {"heading": "2 Related Work", "text": "Model-based Reinforcement Learning. Dyna-Q [32] integrates model-free and model-based RL by learning an observation-prediction model and using it to generate samples for Q-learning in addition to the model-free samples obtained by acting in the real environment. Gu et al. [8] extended these ideas to continuous control problems. Our work is similar to Dyna-Q in the sense that planning and learning are integrated into one architecture. Another line of work [23, 4, 9, 30] uses observationprediction models not for planning, but for improving exploration. A key distinction from these prior works is that our method learns abstract-state dynamics not to predict future observations, but instead to predict future rewards/values. For continuous control problems, deep learning has been combined with model predictive control (MPC) [6, 19], a specific way of using an observation-prediction model. In cases where the observation-prediction model is differentiable with respect to continuous actions, backpropagation can be used to find the optimal action [20] or to compute value gradients [12]. In contrast, our work focuses on learning and planning using lookahead for discrete control problems.\nOur VPNs are related to Value Iteration Networks [34] (VINs) which perform value iteration (VI) by approximating the Bellman-update through a convolutional neural network (CNN). However, VINs perform VI over the entire state space, which in practice requires that 1) the state space is small and representable as a vector with each dimension corresponding to a separate state and 2) the states have a topology with local transition dynamics (e.g., 2D grid). VPNs do not have these limitations and are thus more generally applicable, as we will show empirically in this paper.\nVPN is close to and in-part inspired by Predictron [29] in that a recurrent neural network (RNN) acts as a transition function over abstract states. However, Predictrons are limited to uncontrolled settings and thus policy evaluation, whereas our VPNs can learn an optimal policy in controlled settings.\nModel-free Deep Reinforcement Learning. Mnih et al. [21] proposed the Deep Q-Network (DQN) architecture which learns to estimate Q-values using deep neural networks. A lot of variations of DQN have been proposed for learning better state representation [36, 17, 10, 24, 35, 25], including the use of memory-based networks for handling partial observability [10, 24, 25], estimating both state-values and advantage-values as a decomposition of Q-values [36], learning successor state representations [17], and learning several auxiliary predictions in addition to the main RL values [13]. Our VPN can be viewed as a model-free architecture which 1) decomposes Q-value into reward, discount, and the value of the next state and 2) uses predictions of future values of these quantities as auxiliary tasks to learn a good representation. A key difference from the prior work listed above is that our VPN learns to simulate the future rewards/values which enables planning. Although STRAW [35] can maintain a sequence of future actions using an external memory, it cannot explicitly perform planning by simulating future rewards/values.\nMonte-Carlo Planning. Monte-Carlo Tree Search (MCTS) methods [16, 3] have been used for complex search problems, such as the game of Go, where a simulator of the environment is already available and thus does not have to be learned. Most recently, AlphaGo [28] introduced a value network that directly estimates the value of state in Go in order to better approximate the value of leaf-node states during tree search. Our VPN takes a similar approach by predicting the value of abstract future states during tree search using a value function approximator. Temporal-difference search [27] (TD search) combined TD-learning with MCTS by computing target values for a value function approximator through MCTS. Our algorithm for training VPN can be viewed as an instance of TD search, but it learns the dynamics of future rewards/values instead of being given a simulator."}, {"heading": "3 Value Prediction Network", "text": "The value prediction network is developed for semi-Markov decision processes (SMDPs). Let xt be the observation or a history of observations for partially observable MDPs (henceforth referred to as just observation) and let ot be the option [33, 31, 26] at time t. Each option maps observations to primitive actions, and the following Bellman equation holds for all policies \u03c0: Q\u03c0(xt, ot) = E[ \u2211k\u22121 i=0 \u03b3 irt+i + \u03b3 kV \u03c0(xt+k)], where \u03b3 is a discount factor, rt is the immediate reward at time t, and k is the number of time steps taken by the option ot before terminating in observation xt+k.\nA VPN not only learns an option-value function Q\u03b8 (xt, ot) through a neural network parameterized by \u03b8 like model-free RL, but also learns the dynamics of the rewards/values to perform planning. We describe the architecture of VPN in Section 3.1. In Section 3.2, we describe how to perform planning using VPN. Section 3.3 describes how to train VPN in a Q-Learning-like framework [37]."}, {"heading": "3.1 Architecture", "text": "The VPN consists of the following modules parameterized by \u03b8 = {\u03b8enc, \u03b8value, \u03b8out, \u03b8trans}:\nEncoding fenc\u03b8 : x 7\u2192 s Value fvalue\u03b8 : s 7\u2192 V\u03b8(s) Outcome fout\u03b8 : s, o 7\u2192 r, \u03b3 Transition f trans\u03b8 : s, o 7\u2192 s\u2032\n\u2022 Encoding module maps the observation (x) to the abstract state (s \u2208 Rm) using neural networks (e.g., CNN for visual observations). Thus, s is an abstract-state representation which will be learned by the network (and not an environment state or even an approximation to one).\n\u2022 Value module estimates the value of the abstract-state (V\u03b8(s)). Note that the value module is not a function of the observation, but a function of the abstract-state.\n\u2022 Outcome module predicts the option-reward (r \u2208 R) for executing the option o at abstract-state s. If the option takes k primitive actions before termination, the outcome module should predict the discounted sum of the k immediate rewards as a scalar. The outcome module also predicts the option-discount (\u03b3 \u2208 R) induced by the number of steps taken by the option.\n\u2022 Transition module transforms the abstract-state to the next abstract-state (s\u2032 \u2208 Rm) in an optionconditional manner.\nFigure 1a illustrates the core module which performs 1-step rollout by composing the above modules: f core\u03b8 : s, o 7\u2192 r, \u03b3, V\u03b8(s\u2032), s\u2032. The core module takes an abstract-state and option as input and makes separate option-conditional predictions of the option-reward (henceforth, reward), the option-discount (henceforth, discount), and the value of the abstract-state at option-termination. By combining the predictions, we can estimate the Q-value as follows: Q\u03b8(s, o) = r + \u03b3V\u03b8(s\u2032). In addition, the VPN recursively applies the core module to predict the sequence of future abstract-states as well as rewards and discounts given an initial abstract-state and a sequence of options as illustrated in Figure 1b."}, {"heading": "3.2 Planning", "text": "VPN has the ability to simulate the future and plan based on the simulated future abstract-states. Although many existing planning methods (e.g., MCTS) can be applied to the VPN, we implement a simple planning method which performs rollouts using the VPN up to a certain depth (say d), henceforth denoted as planning depth, and aggregates all intermediate value estimates as described in Algorithm 1 and Figure 2. More formally, given an abstract-state s = fenc\u03b8 (x) and an option o, the Q-value calculated from d-step planning is defined as:\nQd\u03b8(s, o) = r + \u03b3V d \u03b8 (s \u2032) V d\u03b8 (s) = { V\u03b8(s) if d = 1 1 dV\u03b8(s) + d\u22121 d maxo Q d\u22121 \u03b8 (s, o) if d > 1,\n(1)\nwhere s\u2032 = f trans\u03b8 (s, o), V\u03b8(s) = fvalue\u03b8 (s), and r, \u03b3 = fout\u03b8 (s, o). Our planning algorithm is divided into two steps: expansion and backup. At the expansion step, we recursively simulate options up to a depth of d by unrolling the core module. At the backup step, we compute the weighted average of the direct value estimate V\u03b8(s) and the maximum of Qd\u22121\u03b8 (s, o) to compute V d \u03b8 (s) (i.e., value from d-step planning). Since VPN can directly estimate the value for each step, V d\u03b8 (s) is the weighted average of d expected returns along the path of the best sequence of options. To reduce the computational cost, we simulate only b-best options at each expansion step based on Q1(s, o). We also find that choosing only the best option after a certain depth does not compromise the performance much, which is analogous to using a default policy in MCTS beyond a certain depth. This heuristic visits reasonably good abstract states during planning, though a more principled way such as UCT [16] can also be used to balance exploration and exploitation. This planning method is used for choosing options and computing target Q-values during training, as described in the following section.\n(a) Expansion (b) Backup\n3.3 Learning\nVPN can be trained through any existing valuebased RL algorithm for the value predictions combined with supervised learning for reward and discount predictions. In this paper, we present a modification of n-step Q-learning [22] and TD search [27]. The main idea is to generate trajectories by following -greedy policy based on the planning method described in Section 3.2. Given a n-step trajectory x1, o1, r1, \u03b31, x2, o2, r2, \u03b32, ..., xn+1 generated by the -greedy policy, k-step predictions are defined as follows:\nskt = { fenc\u03b8 (xt) if k = 0 f trans\u03b8 (s k\u22121 t\u22121 , ot\u22121) if k > 0\nvkt = f value \u03b8 (s k t ) r k t , \u03b3 k t = f out \u03b8 (s k\u22121 t , ot).\nIntuitively, skt is the VPN\u2019s k-step prediction of the abstract-state at time t predicted from xt\u2212k following options ot\u2212k, ..., ot\u22121 in the trajectory as illustrated in Figure 3. By applying the value and the outcome module, VPN can compute the k-step prediction of the value, the reward, and the discount. The k-step prediction loss at step t is defined as:\nLt = k\u2211 l=1 ( Rt \u2212 vlt )2 + ( rt \u2212 rlt )2 + ( \u03b3t \u2212 \u03b3lt )2 where Rt = { rt + \u03b3tRt+1 if t \u2264 n maxoQ d \u03b8\u2212(sn+1, o) if t = n+ 1.\nHere, sn+1 = fenc\u03b8 (xn+1), and Qd\u03b8\u2212(sn+1, o) is the Q-value computed by the d-step planning method described in 3.2. Intuitively, Lt accumulates losses over 1-step to k-step predictions of values, rewards, and discounts. In order to get the bootstrapped target in Q-learning, we perform planning for the last state xn+1 in the trajectory. Thus, our learning algorithm introduces two hyperparameters: the number of prediction steps (k) and planning depth (dtrain) used for choosing options and computing bootstrapped targets. We also make use of a target network parameterized by \u03b8\u2212 which is synchronized with \u03b8 after a certain number of steps to stabilize training as suggested by [22]. The loss is accumulated over n-steps and the parameter is updated by computing its gradient as follows: \u2207\u03b8L = \u2211n t=1\u2207\u03b8Lt. The full algorithm is described in the Appendix."}, {"heading": "3.4 Relationship to Existing Approaches", "text": "VPN is model-based in the sense that it learns an abstract-state-option transition function sufficient to predict rewards/discount/values without predicting observations. Meanwhile, VPN can also be viewed as model-free in the sense that it learns to directly estimate the value of the abstract-state. From this perspective, VPN exploits several auxiliary prediction tasks, such as reward and discount predictions to learn a good abstract-state representation. An interesting property of VPN is that its planning ability is used to compute the bootstrapped target as well as choose options during Q-learning. Therefore, as VPN improves the quality of its future predictions, it can not only perform better during evaluation through its improved planning ability, but also generate more accurate target Q-values during training, which encourages faster convergence compared to conventional Q-learning."}, {"heading": "4 Experiments", "text": "Our experiments investigated the following questions: 1) Does VPN outperform model-free baselines (e.g., DQN)? 2) What is the advantage of planning with a VPN over observation-based planning? 3) Is VPN useful for complex domains with high-dimensional sensory inputs, such as Atari games?"}, {"heading": "4.1 Experimental Setting", "text": "Network Architecture. A CNN was used as the encoding module of VPN, and the transition module consists of one option-conditional convolution layer which uses different weights depending on the option followed by a few more convolution layers. We used a residual connection [11] from the previous abstract-state to the next abstract-state so that the transition module learns the change of the abstract-state. The outcome module is similar to the transition module except that it does not have a residual connection and two fully-connected layers are used to produce reward and discount. The value module consists of two fully-connected layers. The number of layers and hidden units vary depending on the domain. These details are described in the Appendix. Hyperparameters. Our algorithm is based on asynchronous n-step Q-learning [22] where n is 10 and 16 threads are used. The target network is synchronized after every 10K steps. We used the Adam optimizer [15], and the best learning rate and its decay were chosen from {0.0001, 0.0002, 0.0005, 0.001} and {0.98, 0.95, 0.9, 0.8} respectively. The learning rate is multiplied by the decay parameter every 1M steps. Our implementation is based on TensorFlow [1] and OpenAI\u2019s code1.\nVPN has four more hyperparameters: 1) the number of predictions steps (k) during training, 2) the plan depth (dtrain) during training, 3) the plan depth (dtest) during evaluation, and 4) the branching factor (b) which indicates the number of options to be simulated for each expansion step during planning. We used k = dtrain = dtest throughout the experiment unless otherwise stated. VPN(d) represents our model which learns to predict and simulate up to d-step futures during training and evaluation. The branching factor (b) was set to 4 until depth of 3 and set to 1 after depth of 3, which means that VPN simulates 4-best options up to depth of 3 and only the best option after that. Baselines. We compared our approach to the following baselines.\n\u2022 DQN: This baseline directly estimates Q-values as its output and is trained through asynchronous n-step Q-learning. Unlike the original DQN, however, our DQN baseline takes an option as additional input and applies an option-conditional convolution layer to the top of the last encoding convolution layer, which is very similar to our VPN architecture.2\n\u2022 VPN(1): This is identical to our VPN with the same training procedure except that it performs only 1-step rollout to estimate Q-value as shown in Figure 1a. This can be viewed as a variation of DQN that predicts reward, discount, and the value of the next state as a decomposition of Q-value.\n\u2022 OPN(d): We call this Observation Prediction Network (OPN), which is similar to VPN except that it directly predicts future observations. More specifically, we train two independent networks: a model network (fmodel : x, o 7\u2192 r, \u03b3, x\u2032) which predicts reward, discount, and the next observation, and a value network (fvalue : x 7\u2192 V (x)) which estimates the value from the observation. The training scheme is similar to our algorithm except that a squared loss for observation prediction is used to train the model network. This baseline performs d-step planning like VPN(d)."}, {"heading": "4.2 Collect Domain", "text": "Task Description. We defined a simple, but challenging 2D navigation task where the agent should collect as many goals as possible within a time limit, as illustrated in Figure 4. In this task, the agent, goals, and walls are randomly placed for each episode. The agent has four options: move left/right/up/down to the first crossing branch or the end of the corridor in the chosen direction. The agent is given 20 steps for each episode and receives a positive reward (2.0) when it collects a goal by moving on top of it and a time-penalty (\u22120.02) for each step. Although it is easy to learn a sub-optimal policy which collects nearby goals, finding the optimal trajectory in each episode requires careful planning because the optimal solution cannot be computed in polynomial time.\nAn observation is represented as a 3D tensor (R3\u00d710\u00d710) with binary values indicating the presence/absence of each object type. The time remaining is normalized to [0, 1] and is concatenated to the 3rd convolution layer of the network as a channel.\n1https://github.com/openai/universe-starter-agent 2This architecture outperformed the original DQN architecture in our preliminary experiments.\nWe evaluated all architectures first in a deterministic environment and then investigated the robustness in a stochastic environment separately. In the stochastic environment, each goal moves by one block with probability of 0.3 for each step. In addition, each option can be repeated multiple times with probability of 0.3. This makes it difficult to predict and plan the future precisely. Overall Performance. The result is summarized in Figure 6. To understand the quality of different policies, we implemented a greedy algorithm which always collects the nearest goal first and a shortest-path algorithm which finds the optimal solution through exhaustive search assuming that the environment is deterministic. Note that even a small gap in terms of reward can be qualitatively substantial as indicated by the small gap between greedy and shortest-path algorithms.\nThe results show that many architectures learned a better-than-greedy policy in the deterministic and stochastic environments except that OPN baselines perform poorly in the stochastic environment. In addition, the performance of VPN is improved as the plan depth increases, which implies that deeper predictions are reliable enough to provide more accurate value estimates of future states. As a result, VPN with 5-step planning represented by \u2018VPN(5)\u2019 performs best in both environments. Comparison to Model-free Baselines. Our VPNs outperform DQN and VPN(1) baselines by a large margin as shown in Figure 6. Figure 4 (b-c) shows an example of trajectories of DQN and VPN(5) given the same initial state. Although DQN\u2019s behavior is reasonable, it ended up with collecting one less goal compared to VPN(5). We hypothesize that 6 convolution layers used by DQN and VPN(1) are not expressive enough to find the best route in each episode because finding an optimal path requires a combinatorial search in this task. On the other hand, VPN can perform such a combinatorial search to some extent by simulating future abstract-states, which has advantages over model-free approaches for dealing with tasks that require careful planning. Comparison to Observation-based Planning. Compared to OPNs which perform planning based on predicted observations, VPNs perform slightly better or equally well in the deterministic environment. We observed that OPNs can predict future observations very accurately because observations in this task are simple and the environment is deterministic. Nevertheless, VPNs learn faster than OPNs in most cases. We conjecture that it takes additional training steps for OPNs to learn to predict future observations. In contrast, VPNs learn to predict only minimal but sufficient information for planning: reward, discount, and the value of future abstract-states, which may be the reason why VPNs learn faster than OPNs.\nIn stochastic environments, VPNs significantly outperform OPNs. We observed that OPNs tend to predict the average of possible future observations (Ex[x]) because the neural network is deterministic.\nEstimating values on such predictions leads to estimating V\u03b8(Ex[x]) which is different from the true expected value Ex[V (x)]. On the other hand, VPN is trained to approximate the true expected value because there is no explicit constraint or loss for the predicted abstract state. We hypothesize that this key distinction between VPNs and OPNs allows VPN to learn different modes of possible future states more flexibly in the abstract state space. This result suggests that a value-prediction model can be more beneficial than an observation-prediction model when the environment is stochastic and building an observation-prediction model is difficult.\nGeneralization Performance. One advantage of the model-based RL approach is that it can generalize well to unseen environments as long as the dynamics of the environment remains similar. To see if our VPN has such a property, we evaluated all architectures on two types of previously unseen environments with either reduced number of goals (from 8 to 5) or increased number of walls. It turns out that our VPN is much more robust to the unseen environments compared to model-free baselines (DQN and VPN(1)), as shown in Table 1. The model-free baselines perform worse than the greedy algorithm on unseen environments, whereas VPN still performs well. In addition, VPN generalizes as well as OPN which can learn a near-perfect model in the deter-\nministic setting, and VPN significantly outperforms OPN in the stochastic setting. This suggests that VPN potentially has a good generalization property like model-based RL methods and is robust to stochasticity.\nEffect of Planning Depth. To further investigate the effect of planning depth in a VPN, we measured the average reward in the deterministic environment by varying the planning depth (dtest) from 1 to 10 during evaluation after training VPN with a fixed number of prediction steps and planning depth (k, dtrain), as shown in Figure 7. Since VPN does not learn to predict observations, there is no guarantee that it can perform deeper planning during evaluation (dtest) than the planning depth used during training (dtrain). Interestingly, however, the result in Figure 7 shows that if k = dtrain > 2, VPN achieves better performance during evaluation using a planning depth dtest > dtrain. We also tested a VPN with k = 10 and dtrain = 5 and found that a planning depth of 10 achieved the best performance during evaluation. Thus, with suitably large number of prediction steps during training, our VPN is able to benefit from deeper planning during eval-\nuation relative to the planning depth during training. Figure 5 shows examples of good plans of length greater than 5 found by a VPN trained with planning depth 5. Another observation from Figure 7 is that the performance of planning depth of 1 (dtest = 1) degrades as the planning depth during training (dtrain) increases. This means that a VPN can improve its value estimations through long-term planning at the expense of the quality of short-term planning."}, {"heading": "4.3 Atari Games", "text": "To investigate how VPN deals with complex visual observations, we evaluated it on several Atari games [2]. Unlike in the Collect domain, in Atari games most primitive actions have only small value consequences and it is difficult to hand-design useful extended options. Nevertheless, we explored if VPNs are useful in Atari games even with short-lookahead planning using simple options that repeat the same primitive action over extended time periods by using a frame-skip of 10.3 We pre-processed the game screen to 84 \u00d7 84 gray-scale images. All architectures take last 4 frames as input. We doubled the number of hidden units of the fully-connected layer for DQN to approximately match the number of parameters. VPN learns to predict rewards and values but not discount (since that is fixed),\n3Much of the previous work on Atari games has used a frame-skip of 4. Though using a larger frame-skip generally makes the games easier, it may make some games harder if they require more fine-grained control [18].\nand was trained to make 3-option-step predictions for planning which means that the agent predicts up to 0.5 seconds ahead in real-time.\nAs summarized in Table 2 and Figure 8, our VPN outperforms DQN baseline on 7 out of 9 Atari games and learned significantly faster than DQN on Seaquest, QBert, Krull, and Crazy Climber. One possible reason why VPN outperforms DQN is that even 3-step planning is indeed helpful for learning a better policy. Figure 9 shows an example of VPN\u2019s 3-step planning in Seaquest. Our VPN predicts reasonable values given different sequences of actions, which can potentially help choose a better action by looking at the short-term future. Another hypothesis is that the architecture of VPN itself, which has several auxiliary prediction tasks for multi-step future rewards and values, is useful for learning a good abstract-state representation as a model-free agent. Finally, our algorithm which performs planning to compute the target Q-value can potentially speed up learning by generating more accurate targets as it performs value backups multiple times from the simulated futures, as discussed in Section 3.4. These results show that our approach is applicable to complex visual environments without needing to predict observations."}, {"heading": "5 Conclusion", "text": "We introduced value prediction networks (VPNs) as a new deep RL way of integrating planning and learning while simultaneously learning the dynamics of abstract-states that make option-conditional predictions of future rewards/discount/values rather than future observations. Our empirical evaluations showed that VPNs outperform model-free DQN baselines in multiple domains, and outperform traditional observation-based planning in a stochastic domain. An interesting future direction would be to develop methods that automatically learn the options that allow good planning in VPNs."}, {"heading": "Acknowledgement", "text": "This work was supported by NSF grant IIS-1526059. Any opinions, findings, conclusions, or recommendations expressed here are those of the authors and do not necessarily reflect the views of the sponsor."}, {"heading": "A Examples of Trajectories on Collect Domain", "text": "A.1 Comparison between VPN and DQN in the Deterministic Environment\nA.2 Comparison between VPN and OPN in the Stochastic Environment"}, {"heading": "B Examples of Planning on Atari Games", "text": ""}, {"heading": "C Details of Learning", "text": "Algorithm 2 describes our algorithm for training value prediction network (VPN). We observed that training the outcome module (reward and discount prediction) on additional data collected from a random policy slightly improves the performance because it reduces a bias towards the agent\u2019s behavior. More specifically, we fill a replay memory with R transitions from a random policy before training and sample transitions from the replay memory to train the outcome module for each iteration. This procedure is described in Line 4 and Lines 20-24 in Algorithm 2. This method was used only for Collect domain (not for Atari) in our experiment by augmenting 1M transitions from a random policy.\nAlgorithm 2 Asynchronous n-step Q-learning with k-step prediction and d-step planning 1: \u03b8: global parameter, \u03b8\u2212: global target network parameter, T : global step counter 2: d: plan depth, k: number of prediction steps 3: t\u2190 0 and T \u2190 0 4: M [1...R]\u2190 Store R transitions (s, o, r, \u03b3, s\u2032) using a random policy 5: while not converged do 6: Clear gradients d\u03b8 \u2190 0 7: Synchronize thread-specific parameter \u03b8\u2032 \u2190 \u03b8 8: tstart \u2190 t 9: st \u2190 Observe state 10: while t\u2212 tstart < n and st is non-terminal do 11: at \u2190 argmaxoQ d \u03b8\u2032(st, ot) or random option based on -greedy policy 12: rt, \u03b3t, st+1 \u2190 Execute ot 13: t\u2190 t+ 1 and T \u2190 T + 1 14: end while\n15: R = { 0 if st is terminal maxoQ d \u03b8\u2212(st, o) if st is non-terminal 16: for i = t\u2212 1 to tstart do 17: R\u2190 ri + \u03b3iR 18: d\u03b8 \u2190 d\u03b8 +\u2207\u03b8\u2032 [\u2211k l=1 ( R\u2212 vli )2 + ( ri \u2212 rli )2 + ( \u03b3i \u2212 \u03b3li\n)2] 19: end for 20: t\u2032 \u2190 Sample an index from 1, 2, ..., R 21: for i = t\u2032 to t\u2032 + n do 22: si, ai, ri, \u03b3i, si+1 \u2190 Retrieve a transition from M [i] 23: d\u03b8 \u2190 d\u03b8 +\u2207\u03b8\u2032 [\u2211k l=1 ( ri \u2212 rli )2 + ( \u03b3i \u2212 \u03b3li\n)2] 24: end for 25: Perform asynchronous update of \u03b8 using d\u03b8 26: if T mod Itarget == 0 then 27: Update the target network \u03b8\u2212 \u2190 \u03b8 28: end if 29: end while"}, {"heading": "D Details of Hyperparameters", "text": "D.1 Collect\nThe encoding module of our VPN consists of Conv(32-3x3-1)-Conv(32-3x3-1)-Conv(64-4x4-2) where Conv(NKxK-S) represents N filters with size of KxK with a stride of S. The transition module is illustrated in Figure 13. It consists of OptionConv(64-3x3-1)-Conv(64-3x3-1)-Conv(64-3x3-1) and a separate Conv(64-1x1-1) for the mask which is multipled to the output of the 3rd convolution layer of the transition module. \u2018OptionConv\u2019 uses different convolution weights depending on the given option. We also used a residual connection from the previous abstract state to the next abstract state such that the transition module learns the difference between two states. The outcome module has OptionConv(64-3x3-1)-Conv(64-3x3-1)-FC(64)-FC(2) where FC(N) represents a fully-connected layer with N hidden units. The value module consists of FC(64)-FC(1). Exponential linear unit (ELU) [5] was used as an activation function for all architectures.\nOur DQN baseline consists of the encoding module followed by the transition module followed by the value module. Thus, the overall architecture is very similar to VPN except that it does not have the outcome module. To match the number of parameters, we used 256 hidden units for DQN\u2019s value module. We found that this architecture outperforms the original DQN architecture [21] on Collect domain and several Atari games.\nThe model network of OPN baseline has the same architecture as VPN except that it has an additional decoding module which consists of Deconv(64-4x4-2)-Deconv(32-3x3-1)-Deconv(32-3x3-1). This module is applied to the predicted abstract-state so that it can predict the future observations. The value network of OPN has the same architecture as our DQN baseline.\nA discount factor of 0.98 was used, and the target network was synchronized after every 10K steps. The epsilon was linearly decreased from 1 to 0.05 for -greedy policy for the first 1M steps.\nD.2 Atari Games\nThe encoding module consist of Conv(16-8x8-4)-Conv(32-4x4-2), and the transition module has OptionConv(323x3-1)-Conv(32-3x3-1) with a mask and a residual connection as described above. The outcome module has OptionConv(32-3x3-1)-Conv(32-3x3-1)-FC(128)-FC(1), while the value module consists of FC(128)-FC(1). The DQN baseline has the same encoding module followed by the trasition module and the value module, and we used 256 hidden units for the value module of DQN to approximately match the number of parameters. The other hyperperameters are same those used in the Collect domain except that a discount factor of 0.99 was used."}], "references": [], "referenceMentions": [], "year": 2017, "abstractText": "This paper proposes a novel deep reinforcement learning (RL) architecture, called<lb>Value Prediction Network (VPN), which integrates model-free and model-based<lb>RL methods into a single neural network. In contrast to typical model-based<lb>RL methods, VPN learns a dynamics model whose abstract states are trained<lb>to make option-conditional predictions of future values (discounted sum of re-<lb>wards) rather than of future observations. Our experimental results show that<lb>VPN has several advantages over both model-free and model-based baselines in a<lb>stochastic environment where careful planning is required but building an accurate<lb>observation-prediction model is difficult. Furthermore, VPN outperforms Deep<lb>Q-Network (DQN) on several Atari games even with short-lookahead planning,<lb>demonstrating its potential as a new way of learning a good state representation.", "creator": "LaTeX with hyperref package"}}}