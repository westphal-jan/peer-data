{"id": "1708.06551", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "22-Aug-2017", "title": "Reinforcement Learning in POMDPs with Memoryless Options and Option-Observation Initiation Sets", "abstract": "While hierarchy and partial observability are usually tackled separately, for example by combining recurring neural networks and options, we show that in many cases addressing both problems simultaneously is easier and more efficient. Specifically, we make the initiation of options dependent on the previously executed option, and show that options with such option-observation initiation sets (OOIs) are at least as meaningful as finite state controllers (FSCs), a state-of-the-art approach to learning in POMDPs. Unlike other hierarchical methods in partially observable environments, OOIs are easily designed based on an intuitive description of the task, lead to explainable strategies, and keep the top level and option policies memory-free. Our experiments show that OOIs agents are able to learn optimal strategies in challenging POMDPs by learning a human-provided policy in our experiment over a rotary network much faster than a recurrent one.", "histories": [["v1", "Tue, 22 Aug 2017 09:51:18 GMT  (1071kb,D)", "http://arxiv.org/abs/1708.06551v1", null], ["v2", "Tue, 12 Sep 2017 08:34:04 GMT  (1099kb,D)", "http://arxiv.org/abs/1708.06551v2", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LG", "authors": ["denis steckelmacher", "diederik m roijers", "anna harutyunyan", "peter vrancx", "h\\'el\\`ene plisnier", "ann now\\'e"], "accepted": false, "id": "1708.06551"}, "pdf": {"name": "1708.06551.pdf", "metadata": {"source": "CRF", "title": "Reinforcement Learning in POMDPs with Memoryless Options and Option-Observation Initiation Sets", "authors": ["Denis Steckelmacher", "Diederik M. Roijers", "Anna Harutyunyan", "Peter Vrancx", "Ann Now\u00e9"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Real-world applications of reinforcement learning (RL) face two main challenges: complex long-running tasks and partial observability. Hierarchical RL, of which options are the particular instance we focus on, addresses the first challenge by factoring a complex task into simpler sub-tasks (Barto and Mahadevan 2003; Roy et al. 2006; Tessler et al. 2016). Instead of learning which action to perform depending on an observation, the agent learns a top-level policy that repeatedly selects options, that in turn execute a sequence of actions before returning (Sutton et al. 1999). The second challenge, partial observability, is addressed by maintaining a belief of what the agent thinks the full state is (Cassandra et al. 1994), reasoning about possible future observations (Littman et al. 2001; Boots et al. 2011), storing information in an external memory for later reuse (Peshkin et al. 2001; Zaremba and Sutskever 2015; Graves et al. 2016), or using recurrent neural networks (RNNs) to allow information to flow between time-steps (Bakker 2001; Mnih et al. 2016).\nCombined solutions to the above two challenges have already been proposed, but are not always ideal. HQ-Learning decomposes a task into a list of fully-observable subtasks to be executed in sequence (Wiering and Schmidhuber 1997),\nwhich precludes cyclic tasks with an unbounded number of repetitions from being solved. Using recurrent neural networks in options and for the top-level policy (Sridharan et al. 2010) addresses both challenges, but brings in the design complexity of RNNs (Jo\u0301zefowicz et al. 2015; Angeline et al. 1994; Mikolov et al. 2014). RNNs also have limitations regarding long time horizons, as their memory decays over time (Hochreiter and Schmidhuber 1997), and provide no explanation on which past observations affect the current choice of action.\nIn her PhD thesis, Precup (2000, page 126) suggests that options may already be close to addressing partial observability, thus removing the need for more complicated solutions. In this paper, we prove this intuition correct by:\n1. Showing that options do not suffice in POMDPs; 2. Introducing Option-Observation Initiation Sets (OOIs),\nthat make the initiation sets of options conditional on the previously-executed option;\n3. Proving that OOIs make options at least as expressive as Finite State Controllers (Section 3.2), state-of-the-art in POMDPs.\nDesigning OOIs is as easy as describing a task in natural language (Section 3.1). In contrast to existing HRL algorithms for POMDPs (Wiering and Schmidhuber 1997; Theocharous 2002; Sridharan et al. 2010), OOIs handle repetitive tasks, do not restrict the action set available to subtasks, and keep the option policies and policy over options memoryless. Experimental results in Section 4 confirm that OOIs allow partially observable tasks to be solved optimally, while allowing learned (Section 4.4) or human-provided options to be used (Sections 4.3 and 4.5). Our experiments also show that OOIs are much more sample efficient than a recurrent neural network over options, and lead to a policy significantly outperforming an expert policy in Section 4.3."}, {"heading": "1.1 Motivating Example", "text": "OOIs are designed to solve complex partially observable tasks that can be decomposed into a set of fully-observable sub-tasks. For instance, a robot with first-person sensors may be able to avoid obstacles, open doors or manipulate objects even if its precise location in a building is not observed. We now introduce such an environment, on which our robotic experiments of Section 4.3 are based.\nar X\niv :1\n70 8.\n06 55\n1v 1\n[ cs\n.A I]\n2 2\nA ug\n2 01\n7\nA Khepera III1robot has to gather objects from a green and a blue terminal separated by a wall, and to bring them to a central root location. Objects have to be gathered one by one from a terminal until it becomes empty, which requires many journeys between the root and a terminal. When a terminal is emptied, the other one is automatically refilled. The robot therefore has to alternatively gather objects from both terminals, until the end of the episode. The root is colored in red and marked by a paper QR-code displaying 1. Each terminal has a screen displaying its color and a 1 QRcode when full, 2 when empty. Because the robot cannot read QR-codes from far away, the state of a terminal cannot be observed from the root. This makes the environment partially observable, and requires that the robot goes to a terminal, observes that it is empty, goes back to the root, and remembers to now go to the other terminal.\nThe robot is able to control the speed of its two wheels. A wireless camera mounted on top of the robot allows it to identify where the largest red, green or blue color blobs are in its field of view, and can read nearby QR-codes. Such low-level actions and observations, combined with a complicated task, motivate the use of hierarchical reinforcement learning. Fixed options allow the robot to move towards the largest red, green or blue blob in its field of view. The options terminate as soon as a QR-code is in front of the camera and close enough to be read. This allows the robot to move towards colored objects, then to make a decision based on the QR-code displayed on that object. The limited range of the QR-code reader and its inability to read more than one QR-code at once prevent the agent from observing the complete state of the environment. The robot has to learn a policy over options that solves the task.\nThe robot may have to gather a large number of objects, alternating between terminals several times. The repetitive nature of this task is incompatible with HQ-Learning (Wiering and Schmidhuber 1997). Options with standard initiation sets are not able to solve this task, as the top-level policy is memoryless (Sutton et al. 1999) and cannot remember from which terminal the robot arrives at the root, and whether that terminal was full or empty. Because the termi-\n1http://www.k-team.com/mobile-roboticsproducts/old-products/khepera-iii\nnals are far from the root, almost a hundred primitive actions have to be executed to complete any root/terminal journey. Without options, this represents a time horizon much larger than usually handled by recurrent neural networks (Bakker 2001) or finite history windows (Lin and Mitchell 1993).\nOOIs allow each option to be selected conditionally on the previously executed one (Section 3.1), which is much simpler than combining options and recurrent neural networks (Sridharan et al. 2010). The ability of OOIs to solve POMDPs builds on the time abstraction capabilities and expressiveness of options. Section 4.3 shows that OOIs allow the optimal policy for our robotic task to be represented and learned above expert level. Section 4.4 demonstrates on a simulated task that both the top-level and option policies can be learned by the agent. Finally, Section 4.5 shows that OOIs lead to substantial gains over standard initiation sets even if the option set is reduced or unsuited to the task."}, {"heading": "2 Background", "text": "This section formally introduces Markov Decision Processes (MDPs), Options, Partially Observable MDPs (POMDPs) and Finite State Controllers, before presenting our main contribution in Section 3."}, {"heading": "2.1 Markov Decision Processes", "text": "A discrete-time Markov Decision Process (MDP) \u3008S,A,R, T, \u03b3\u3009 with discrete actions is defined by a possibly-infinite set S of states, a finite set A of actions, a reward function R(st, at, st+1) \u2208 R, that provides a scalar reward rt for each state transition, a transition function T (st, at, st+1) \u2208 [0, 1], that outputs a probability distribution over new states st+1 given a (st, at) state-action pair, and 0 \u2264 \u03b3 < 1 the discount factor, that defines how sensitive the agent should be to future rewards.\nA stochastic memoryless policy \u03c0(st, at) \u2208 [0, 1] maps a state to a probability distribution over actions. The goal of the agent is to find a policy \u03c0\u2217 that maximizes the expected cumulative discounted reward E\u03c0\u2217 [ \u2211 t \u03b3\ntrt] obtainable by following that policy."}, {"heading": "2.2 Options", "text": "The options framework, defined in MDPs by Sutton et al., consists of a set of options O where each option \u03c9 \u2208 O is a tuple \u3008\u03c0\u03c9, I\u03c9, \u03b2\u03c9\u3009, with \u03c0\u03c9(st, at) \u2208 [0, 1] the memoryless option policy, \u03b2\u03c9(st) \u2208 [0, 1] the termination function that\ngives the probability for the option \u03c9 to terminate in state st, and I\u03c9 \u2286 S the initiation set that defines in which states \u03c9 can be started (Sutton et al. 1999).\nThe memoryless policy over options \u00b5(st, \u03c9t) \u2208 [0, 1] maps states to a distribution over options and allows to choose which option to start in a given state. When an option \u03c9 is started, it executes until termination (due to \u03b2\u03c9), at which point \u00b5 selects a new option based on the now current state."}, {"heading": "2.3 Partially Observable MDPs", "text": "Most real-world problems are not MDPs and present at least some degree of partial observability. A Partially Observable MDP (POMDP) \u3008\u2126, S,A,R, T,O, \u03b3\u3009 is a MDP extended with two components: the possibly infinite set \u2126 of observations, and theO : S \u2208 \u2126 function that produces observations x based on the hidden state s of the process. Two different states, requiring two different optimal actions, may produce the same observation. This makes POMDPs remarkably challenging for reinforcement learning algorithms, as memoryless policies, that select actions or options based only on the current observation, typically no longer suffice."}, {"heading": "2.4 Finite State Controllers", "text": "Finite State Controllers (FSCs) are state of the art in representing policies that work well in POMDPs. An FSC \u3008N , \u03c8, \u03b7, \u03b70\u3009 is defined by a finite set N of nodes, an action function \u03c8(nt, at) \u2208 [0, 1] that maps nodes to a probability distribution over actions, a successor function \u03b7(nt\u22121, xt, nt) \u2208 [0, 1] that maps nodes and observations to a probability distribution over next nodes, and an initial function \u03b70(x1, n1) \u2208 [0, 1] that maps initial observations to nodes (Meuleau et al. 1999).\nAt the first time-step, the agent observes x1 and activates a node n1 by sampling from \u03b70(x1, \u00b7). An action is performed by sampling from \u03c8(n1, \u00b7). At each time-step t, a node nt is sampled from \u03b7(nt\u22121, xt, \u00b7), then an action at is sampled from \u03c8(nt, \u00b7). FSCs allow the agent to select actions according to the entire history of past observations (Meuleau et al. 1999), which has been shown to be one of the best approaches for POMDPs (Lin and Mitchell 1992). OOIs, our main contribution, make options at least as expressive and as relevant to POMDPs as FSCs, while being able to leverage the hierarchical structure of the problem."}, {"heading": "3 Option-Observation Initiation Sets", "text": "Our main contribution, Option-Observation Initiation Sets (OOIs), make the initiation sets of options conditional on the option that has just terminated. We prove that OOIs make options at least as expressive as FSCs (thus suited to POMDPs, see Section 3.2), even if the top-level and option policies are memoryless, while options without OOIs are strictly less expressive than FSCs (see Section 3.3). In Section 4, we show on one robotic and two simulated tasks that OOIs allow challenging POMDPs to be solved optimally."}, {"heading": "3.1 Conditioning on Previous Option", "text": "Descriptions of partially observable tasks in natural language often contain allusions at sub-tasks that must be se-\nquenced or cycled through, possibly with branches. This is easily mapped to a policy over options (learned by the agent) and sets of options that may or may not follow each other.\nA good memory-based policy for our motivating example, where the agent has to bring objects from two terminals to the root, can be described as \u201cgo to the green terminal, then go to the root, then go back to the green terminal if it was full, to the blue terminal otherwise\u201d, and symmetrically so for the blue terminal. This sequence of sub-tasks, that contains a condition, is easily translated to a set of options. Two options, sharing a single policy, go from the green terminal to the root (using low-level motor actions). One is executed when the terminal is full, the other when it is empty. At the root, the option that goes back to the green terminal can only follow the option that goes to the root after having observed that the green terminal was full. This forces the agent to switch to the blue terminal when the green one is empty. In Section 4.3, we show that a slightly larger set of options avoids encoding parts of the solution in the option set, which allows the agent to discover a stochastic policy that outperforms our good policy.\nWe now formally define our main contribution, OptionObservation Initiation Sets (OOIs), that allow to describe which options may follow which ones. We define the initiation set I\u03c9 of option \u03c9 so that the set Ot of options available at time t depends on the observation xt and previouslyexecuted option \u03c9t\u22121:\nI\u03c9 \u2286 \u2126\u00d7 (O \u222a {\u2205}) Ot \u2261 {\u03c9 \u2208 O : (xt, \u03c9t\u22121) \u2208 I\u03c9}\nwith \u03c90 = \u2205, \u2126 the set of observations and O the set of options. Ot allows the agent to condition the option selected at time t on the one that has just terminated, even if the top-level policy does not observe \u03c9t\u22121. The option policies and top-level policy remain memoryless. Not having to observe \u03c9t\u22121 keeps the observation space of the top-level policy small, instead of extending it to \u2126 \u00d7 O, without impairing the representational power of OOIs, as shown in the next sub-section."}, {"heading": "3.2 OOIs Make Options as Expressive as FSCs", "text": "Finite State Controllers are state-of-the-art in policies applicable to POMDPs (Meuleau et al. 1999). By proving that options with OOIs are as expressive as FSCs, we provide a lower bound on the expressiveness of OOIs and ensure that they are applicable to a wide range of POMDPs.\nTheorem 1. OOIs allow options to represent any policy that can be expressed using a Finite State Controller.\nProof. The reduction from any FSC to options requires one option \u3008n\u2032t\u22121, nt\u3009 per ordered pair of node in the FSC, and one option \u3008\u2205, n1\u3009 per node in the FSC. Assuming that n0 = \u2205 and \u03b7(\u2205, x1, \u00b7) = \u03b70(x1, \u00b7), the options are defined by:\n\u03b2\u3008n\u2032t\u22121,nt\u3009(xt) = 1 (1)\n\u03c0\u3008n\u2032t\u22121,nt\u3009(xt, at) = \u03c8(nt, at) (2) \u00b5(xt, \u3008n\u2032t\u22121, nt\u3009) = \u03b7(n\u2032t\u22121, xt, nt) (3) I\u3008\u2205,n1\u3009 = \u2126\u00d7 {\u2205}\nI\u3008n\u2032t\u22121,nt\u3009 = \u2126\u00d7 {\u3008n \u2032 t\u22122, nt\u22121\u3009 : n\u2032t\u22121 = nt\u22121}\nEach option corresponds to an edge of the FSC. Equation 1 ensures that every option stops after having emitted a single action, as the FSC takes one transition every timestep. Equation 2 maps the current option to the action emitted by the destination node of its corresponding FSC edge. We show that \u00b5 and I\u3008n\u2032t\u22121,nt\u3009 implement \u03b7(nt\u22121, xt, nt) by:\n\u00b5(xt, \u3008n\u2032t\u22121, nt\u3009 | \u03c9t\u22121 = \u3008n\u2032t\u22122, nt\u22121\u3009) = 0 \u3008n\u2032t\u22122, nt\u22121\u3009 /\u2208 I\u3008n\u2032t\u22121,nt\u3009 \u21d4 n\u2032t\u22121 6= nt\u22121\n\u03b7(nt\u22121, xt, nt) \u3008n\u2032t\u22122, nt\u22121\u3009 \u2208 I\u3008n\u2032t\u22121,nt\u3009 \u21d4 n\u2032t\u22121 = nt\u22121\nBecause \u03b7 maps nodes to nodes and \u00b5 selects options representing pairs of nodes, \u00b5 is extremely sparse and returns a value different from zero, \u03b7(nt\u22121, xt, nt), only when \u3008n\u2032t\u22122, nt\u22121\u3009 and \u3008n\u2032t\u22121, nt\u3009 agree on nt\u22121.\nEquation 2 ignores the observation, which leads to a large amount of options to compensate. In practice, we expect to be able to express policies for real-world POMDPs with much less options than the number of states an FSC would require, as shown in our simulated (Section 4.4, 2 options) and robotic experiments (Section 4.3, 12 options). In addition to being sufficient, the next sub-section proves that OOIs are necessary for options to be as expressive as FSCs."}, {"heading": "3.3 Original Options are not as Expressive as FSCs", "text": "While options with regular initiation sets may be able to express some memory-based policies (Sutton et al. 1999, page 7), the tiny but valid Finite State Controller presented in Figure 3 cannot be mapped to a set of options and a policy over options (without OOIs). This proves that options without OOIs are strictly less expressive than FSCs. Theorem 2. Options without OOIs are not as expressive as Finite State Controllers.\nProof. Figure 3 shows a Finite State Controller that emits a sequence of alternating A\u2019s and B\u2019s, based on a constant uninformative observation x\u2205. This task requires memory because the observation does not provide any information about what was the last letter to be emitted, or which one must now be emitted. Options having memoryless policies, options executing for multiple time-steps are unable to represent the FSC exactly. A combination of options that execute for a single time-step cannot represent the FSC either, as the options framework is unable to represent memorybased policies with single-time-step options (Sutton et al. 1999)."}, {"heading": "4 Experiments", "text": "The experiments in this section illustrate how OOIs allow agents to perform optimally in environments where options without OOIs fail. Section 4.3 shows on our motivating example (Section 1.1) that OOIs allow the agent to find a policy outperforming an expert-provided one, which motivates the use of reinforcement learning in industrial POMDPs where the currently deployed policies may still be improved upon. Section 4.4 shows that the top-level and option policies required by a repetitive task can be learned, which is useful when no predefined options are available. In Section 4.5, we progressively reduce the amount of options available to the agent, and demonstrate how OOIs still allow good memory-based policies to emerge when a sub-optimal amount of options are used. Our experiments demonstrate how OOIs allow to reach optimal policies in real-world POMDPs with minimal engineering effort.\nAll our results are averaged across 20 runs, with standard deviation represented by the light regions in the figures."}, {"heading": "4.1 Experimental Setup", "text": "All our agents learn their policy over options and option policies (if not fixed) using a single feed-forward neural network, with one hidden layer of 100 neurons, trained using Policy Gradient (Sutton et al. 2000) and the Adam optimizer (Kingma and Ba 2014). Our neural network \u03c0 takes three inputs and produces one output. The inputs are observation features x = \u03c6(xt), the one-hot encoded current option \u03c9 (\u03c9 = 0 when executing the top-level policy), and a mask, mask. The output is a distribution y over extended options:\nh1 = tanh(W1[x T\u03c9T ]T + b1),\ny\u0302 = \u03c3(W2h1 + b2) \u25e6mask,\ny = y\u0302\n1T y\u0302 ,\nwith Wi and bi the trainable weights and biases of layer i, \u03c3 the sigmoid function, and \u25e6 the element-wise product of two vectors. The fraction ensures that a valid probability distribution is produced by the network2. The set of extended options O\u0303 is the union of the set A of actions and the set O of options, multiplied by 2 as the agent is able to select an action while terminating (or not) the current option3:\n2A Softmax over allowed options did not provide results as good as this implementation\n3\u03b2\u03c9t(xt) = \u2211 a \u03c0(xt, \u03c9t, a+ terminate)\nO\u0303 \u2261 (O \u222aA)\u00d7 {end, continue}\nThe initiation sets of options are implemented using the mask input of the neural network, a vector of |O\u0303| integers. When \u03c9 = 0, the mask forces the probability of primitive actions to zero, preserves option \u03c9i according to I\u03c9i , and prevents the top-level policy from terminating. When \u03c9 6= 0, the mask only allows primitive actions to be executed. For instance, if there are two options and three actions, mask = endcont ( 0 0 1 1 1 0 0 1 1 1 ) when executing any of the options. When executing the top-level policy, mask = end cont ( 0 0 0 0 0 a b 0 0 0 ), with a = 1 if and only if the option that has just finished is in the initiation set of the first option, and b = 1 according to the same rule but for the second option. The neural network \u03c0 is trained using Policy Gradient, with the following loss:\nL(\u03c0) = \u2212 T\u2211 t=0 (Rt \u2212 V (xt, \u03c9t)) log(\u03c0(xt, \u03c9t, at))\nwith at \u223c \u03c0(xt, \u03c9t, \u00b7) the action executed at time t. The returnRt = \u2211T \u03c4=t \u03b3\n\u03c4r\u03c4 , with r\u03c4 = R(s\u03c4 , a\u03c4 , s\u03c4+1), is a simple discounted sum of future rewards, and ignores changes of current option. This gives the agent information about the complete outcome of an action or option, by directly evaluating its flattened policy. A baseline V (xt, \u03c9t) is used to reduce the variance of the L estimate (Sutton et al. 2000). V (xt, \u03c9t) predicts the expected cumulative reward obtainable from xt in option \u03c9t using a separate neural network, trained on the monte-carlo return obtained from xt in \u03c9t."}, {"heading": "4.2 Comparison with LSTM over Options", "text": "In order to provide a complete evaluation of OOIs, a variant of the \u03c0 network of Section 4.1, where the hidden layer is replaced with a layer of 100 LSTM units (Hochreiter and Schmidhuber 1997; Sridharan et al. 2010), is also evaluated on every task. In every experiment, the agent based on the LSTM network manages to reach the optimal policy, but it requires hundreds of thousands of episodes to do so, an order of magnitude more than options with OOIs. We explain this result by the continuous nature of LSTM recurrent connections, and the fact that the LSTM agents are unable to exploit the high-level structure of the task, encoded by OOIs. Their policy spaces are therefore larger, and more difficult to search in. To keep our graphs readable, we do not show the full length of the learning curves of the LSTM agents."}, {"heading": "4.3 Object Gathering", "text": "The first experiment illustrates how OOIs can be applied to a complex real-world robotic partially observable task, leading to a stochastic top-level policy significantly outperforming an expert-provided policy. This result is particularly important as, combined with the simplicity of OOIs, it illustrates the benefits of using reinforcement learning for industrial tasks, even when existing policies already seem satisfactory.\nThe experiment takes place in the environment described in Section 1.1. A robot has to gather objects one by one\nfrom two terminals, green and blue, and bring them back to a root location. When the robot reaches one of the terminals, it either picks up an object and receives a reward of +2, or receives a reward of -2 when the terminal is empty. Whether a terminal is full or empty is observed by the agent only when it is at the terminal. At the beginning of the episode, each terminal contains 2 or 3 objects, this amount being selected randomly for each terminal. When the agent goes to an empty terminal, the other one is re-filled with 2 or 3 objects. The episode ends after 2 or 3 emptyings (combined across both terminals). As detailed in Section 1.1, the agent only has a first-person view of the world, cannot observe terminals from far away, and therefore has to remember information acquired at terminals in order to make good decisions at the root. When at the root, 10 feet away from any terminal, the agent has no way of knowing which terminal is empty, if any.\nThe agent has access to 12 memoryless options that go to red (\u03c9R1..R4), green (\u03c9G1..G4) or blue objects (\u03c9B1..B4), and terminate when the agent is close enough to them to read a QR-code displayed on them. The initiation set of \u03c9R1,R2 is \u03c9G1..G4, of \u03c9R3,R4 is \u03c9B1..B4, and of \u03c9Gi,Bi is \u03c9Ri \u2200i = 1..4. This description of the options and their OOIs is purposefully uninformative, and illustrates how little information the agent has about the task. The option set used in this experiment is also richer than the simple example of Section 3.1, to better illustrate the generality of OOIs.\nAgents with and without OOIs learn top-level policies over these options. We compare them to a fixed agent, using an expert top-level policy that interprets the options as follows: \u03c9R1..R4 go to the root from a full/empty green/blue terminal (and are selected accordingly at the terminals depending on the QR-code displayed on them), while \u03c9G1..G4,B1..B4 go to the green/blue terminal from the root when the previous terminal was full/empty and green/blue. At the root, the expert top-level policy outputs a uniform probability distribution over go to green after a full green, go to green after an empty blue, go to blue after a full blue and go to blue after an empty green. OOIs ensure that only a single of these options is selected, according to what the last\nterminal was and whether it was full or empty. The agent goes to a terminal until it is empty, then goes back to the root and starts emptying the other terminal, which leads to an average reward of 7.5.4\nWhen the top-level policy is not fixed, OOIs allow the task to be learned, as shown in Figure 4. Because experiments on a robot are slow, we developed a small simulator for this task, and used it to produce Figure 4 after having successfully asserted its accuracy using two 1000-episodes runs on the actual robot. The agent learns to properly select \u03c9R1..R4 at the terminals, depending on the QR-code, and to output a proper distribution over options at the root. Interestingly, the agent converges to a stochastic policy (as permitted by Policy Gradient, see Section 4.1). Instead of always emptying a terminal before switching to the other one, the agent switches terminal early with a small probability, which reduces its chances of observing an empty terminal before having to switch anyway. This policy leads to an average reward of 7.825, significantly higher than the 7.5 average obtained by our expert policy (p < 10\u221210, computed from 2000 episodes). This demonstrates how reinforcement learning, options and OOIs can be applied to a complex partially observable task, fine-tuning probabilities more precisely than a human could do, to lead to a policy achieving better results than one produced by a human expert, even if the task seems easy to solve at first glance.\nBecause fixed option policies are not always available, we now show that OOIs allow them to be learned at the same time as the top-level policy."}, {"heading": "4.4 Modified DuplicatedInput", "text": "In some cases, a hierarchical reinforcement learning agent may not have been provided policies for several or all its options. In this case, OOIs allow the agent to learn its top-level policy, the option policies and their termination functions. In this experiment, the agent has to learn its top-level and option policies to copy characters from an input tape to an\n42.5\u00d7(\u22122+2.5\u00d72), 2 or 3 emptyings of terminals that contain 2 or 3 objects. Average confirmed experimentally from 32 runs on the actual robot, p > 0.49.\noutput tape, removing duplicate B\u2019s and D\u2019s (mapping ABBCCEDD to ABCCED for instance; B\u2019s and D\u2019s always appear in pairs). The agent only observes a single input character at a time, and can write at most one character to the output tape per time-step.\nThe input tape is a sequence of N symbols x \u2208 \u2126, with \u2126 = {A,B,C,D,E} and N a random number between 20 and 30. The agent observes a single symbol xt \u2208 \u2126, read from the i-th position in the input sequence, and does not observe i. When t = 1, i = 0. The action set A contains 20 actions, each of them representing a symbol, whether it must be pushed onto the output tape, and whether i should be incremented or decremented. A reward of 1 is given for each correct symbol written to the output tape. The episode finishes with a reward of -0.5 when an error is made.\nThe agent has access to two options, \u03c91 and \u03c92. OOIs are designed so that \u03c92 cannot follow itself, with no such restriction on \u03c91. No reward shaping or hint about what each option should do is provided. The agent automatically discovers that \u03c91 must copy the current character to the output, and that \u03c92 must skip the character without copying it. It also learns the top-level policy, that selects \u03c92 (skip) when observing B or D and \u03c92 is allowed, \u03c91 otherwise (copy).\nFigure 5 shows that an agent with two options and OOIs learns an optimal policy for this task, while an agent with two options and only standard initiation sets (I\u03c9 = \u2126 \u2200\u03c9) fails to do so. The agent without OOIs only learns to copy characters and never skips any (having two options does not help it). This shows that OOIs are necessary for learning this task, and allow to learn a policy over options and option policies suited to our repetitive partially observable task.\nThe first two experiments use a set of options tailored to the task to solve. That set may not always be known, and the last experiment shows that OOIs provide large benefits over standard initiation sets and LSTM over options even when a sub-optimal amount of options are available."}, {"heading": "4.5 TreeMaze", "text": "Defining an extensive set of options and their OOIs may sometimes require more knowledge about the task and the environment than available. This experiment shows that a sub-optimal set of options, arising from a mis-specification of the environment or normal trial-and-error in design phase, does not prevent agents with OOIs from learning reasonably\ngood policies. TreeMaze is our generalization of the T-maze environment (Bakker 2001) to arbitrary heights. The agent starts at the root of the tree-like maze depicted in Figure 6, and has to reach the extremity of one of the 8 leaves. The leaf to be reached (the goal) is chosen uniformly randomly before each episode, and is indicated to the agent using 3 bits, observed one at a time during the first 3 time-steps. The agent receives no bit afterwards, and has to remember them in order to navigate to the goal. The agent observes its position in the current corridor (0 to 4) and the number of T junctions it has already crossed (0 to 3). A reward of -0.1 is given each time-step, +10 when reaching the goal. The episode finishes when the agent reaches any of the leaves. The optimal reward is 8.2.\nWe consider 14 options with predefined memoryless policies, several of them sharing the same policy, but encoding distinct states (among 14) of a 3-bit memory where some bits may be unknown. 6 partial-knowledge options \u03c90\u2212\u2212, \u03c91\u2212\u2212, \u03c900\u2212, ..., \u03c911\u2212 go right then terminate. 8 full-knowledge options \u03c9000, \u03c9001, ..., \u03c9111 go to their corresponding leaf. OOIs are defined so that any option may only be followed by itself, and every option that represents a memory state where a single 0 or - has been flipped to 1. Three agents have to learn their top-level policy, which requires them to discover how to use the available options to represent and update their implicit memory. The agents do not know the name or meaning of the options, and do not even know that an implicit memory is required for this task. The first agent has access to all 14 options. The second agent only has access to complete-knowledge options, and therefore cannot disambiguate unknown and 0 bits. The third agent is restricted to options \u03c9000, \u03c9010, \u03c9100 and \u03c9110 and therefore cannot reach odd-numbered goals. The options of the second and third agents terminate in the first two cells of the first corridor, to allow the top-level policy to observe the second and third bits.\nFigure 7 shows that OOIs allow the agent with 14 options to consistently learn the optimal policy for this task. When\nthe number of options is reduced, the quality of the resulting policies decreases, while still remaining above the agent without OOIs. Even the agent with 4 options, that cannot reach half the goals, performs better than the agent without OOIs. This experiment demonstrates that OOIs provide measurable benefits over standard initiation sets, even if the option set is largely reduced.\nCombined, our three experiments demonstrate that OOIs lead to optimal policies in challenging POMDPs, consistently outperform LSTM over options (and a carefullydesigned expert policy in Section 4.3), allow the option policies to be learned, and are robust to insufficient amounts of options."}, {"heading": "5 Conclusion and Future Work", "text": "This paper proposes OOIs, an extension of the initiation sets of options so that they restrict which options are allowed to be executed after one terminates. This makes options as expressive as Finite State Controllers. Experimental results confirm that challenging partially observable tasks, simulated or on physical robots, one of them requiring exact information storage for hundreds of time-steps, can now be solved using options. On our robotic task, options with OOIs lead to a stochastic policy better than our expert one. The hierarchical nature of options and simplicity of OOIs enable us to explain the reasoning of the agent, potentially allowing it to be applied to new tasks.\nOptions with OOIs also perform surprisingly well compared to an LSTM network over options. While LSTM over options does not require the design of OOIs, efficient recurrent neural networks have several hyperparameters to be tuned, and their ability to learn without any a-priori knowledge comes at the cost of sample efficiency and explainability. OOIs therefore provide a compelling alternative, applicable to a wide range of problems.\nFinally, the compatibility between OOIs and a large variety of reinforcement learning algorithms leads to many future research opportunities. For instance, we have obtained very encouraging results in continuous action spaces, using CACLA (Van Hasselt and Wiering 2007) to implement parametric options, that take continuous arguments when executed, in continuous-action hierarchical POMDPs."}, {"heading": "Acknowledgments", "text": "The first author is \u201cAspirant\u201d with the Science Foundation of Flanders (FWO, Belgium), grant number 1129317N. The second author is \u201cPostdoctoral Fellow\u201d with the FWO, grant number 12J0617N.\nThanks to Finn Lattimore, who gave a computer to the first author, so that he could finish this paper while attending the UAI 2017 conference in Sydney, after his own computer unexpectedly fried."}], "references": [{"title": "Neural Networks", "author": ["Peter J. Angeline", "Gregory M. Saunders", "Jordan B. Pollack. An evolutionary algorithm that constructs recurrent neural networks. IEEE Trans"], "venue": "5(1):54\u201365,", "citeRegEx": "Angeline et al. 1994", "shortCiteRegEx": null, "year": 1994}, {"title": "Reinforcement learning with long short-term memory", "author": ["Bram Bakker"], "venue": "Advances in Neural Information Processing Systems,", "citeRegEx": "Bakker 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "Discrete Event Dynamic Systems: Theory and Applications", "author": ["Andrew G Barto", "Sridhar Mahadevan. Recent advances in hierarchical reinforcement learning"], "venue": "13(12):341\u2013379,", "citeRegEx": "Barto and Mahadevan 2003", "shortCiteRegEx": null, "year": 2003}, {"title": "The International Journal of Robotics Research", "author": ["Byron Boots", "Sajid M. Siddiqi", "Geoffrey J. Gordon. Closing the learning-planning loop with predictive state representations"], "venue": "30(7):954\u2013966,", "citeRegEx": "Boots et al. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "Acting optimaly in partially observable stochastic domains", "author": ["A Cassandra", "L Kaelbling", "M Littman"], "venue": "AAAI, (April)", "citeRegEx": "Cassandra et al. 1994", "shortCiteRegEx": null, "year": 1994}, {"title": "Hybrid computing using a neural network with dynamic external memory", "author": ["Adam Cain", "Helen King", "Christopher Summerfield", "Phil Blunsom", "Koray Kavukcuoglu", "Demis Hassabis"], "venue": null, "citeRegEx": "Cain et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Cain et al\\.", "year": 2016}, {"title": "Neural Computation", "author": ["Sepp Hochreiter", "Jurgen J\u00fcrgen Schmidhuber. Long short-term memory"], "venue": "9(8):1\u201332,", "citeRegEx": "Hochreiter and Schmidhuber 1997", "shortCiteRegEx": null, "year": 1997}, {"title": "In Proceedings of the 32nd International Conference on Machine Learning (ICML)", "author": ["Rafal J\u00f3zefowicz", "Wojciech Zaremba", "Ilya Sutskever. An empirical exploration of recurrent network architectures"], "venue": "pages 2342\u20132350,", "citeRegEx": "J\u00f3zefowicz et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik Kingma", "Jimmy Ba"], "venue": "arXiv preprint arXiv:1412.6980,", "citeRegEx": "Kingma and Ba 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Carnegie-Mellon University", "author": ["Long-Ji Lin", "Tom M Mitchell. Memory approaches to reinforcement learning in nonMarkovian domains"], "venue": "Department of Computer Science,", "citeRegEx": "Lin and Mitchell 1992", "shortCiteRegEx": null, "year": 1992}, {"title": "From animals to animats", "author": ["Long-Ji Lin", "Tom M Mitchell. Reinforcement learning with hidden states"], "venue": "2:271\u2013280,", "citeRegEx": "Lin and Mitchell 1993", "shortCiteRegEx": null, "year": 1993}, {"title": "Predictive Representations of State", "author": ["Littman"], "venue": "Neural Information Processing Systems (NIPS),", "citeRegEx": "Littman,? \\Q2001\\E", "shortCiteRegEx": "Littman", "year": 2001}, {"title": "Proceedings of the fifteenth conference on uncertainty in artificial intelligence", "author": ["Nicolas Meuleau", "Leonid Peshkin", "Kee-eung Kim", "Leslie Pack Kaelbling. Learning FiniteState Controllers for partially observable environments"], "venue": "pages 427\u2013436,", "citeRegEx": "Meuleau et al. 1999", "shortCiteRegEx": null, "year": 1999}, {"title": "and Marc\u2019Aurelio Ranzato", "author": ["Tomas Mikolov", "Armand Joulin", "Sumit Chopra", "Micha\u00ebl Mathieu"], "venue": "Learning longer memory in recurrent neural networks. CoRR, abs/1412.7753,", "citeRegEx": "Mikolov et al. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "Asynchronous Methods for Deep Reinforcement Learning", "author": ["Mnih"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Mnih,? \\Q2016\\E", "shortCiteRegEx": "Mnih", "year": 2016}, {"title": "Sixteenth International Conference on Machine Learning", "author": ["Leonid Peshkin", "Nicolas Meuleau", "Leslie Kaelbling. Learning Policies with External Memory"], "venue": "page 8,", "citeRegEx": "Peshkin et al. 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "PhD thesis", "author": ["Doina Precup. Temporal Abstraction in Reinforcement Learning"], "venue": "University of Massachusetts,", "citeRegEx": "Precup 2000", "shortCiteRegEx": null, "year": 2000}, {"title": "Springer Tracts in Advanced Robotics", "author": ["Nicholas Roy", "Geoffrey Gordon", "Sebastian Thrun. Planning under uncertainty for reliable health care robotics"], "venue": "24:417\u2013426,", "citeRegEx": "Roy et al. 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "Planning to see: A hierarchical approach to planning visual actions on a robot using POMDPs", "author": ["Mohan Sridharan", "Jeremy Wyatt", "Richard Dearden"], "venue": "Artificial Intelligence, 174(11):704\u2013725,", "citeRegEx": "Sridharan et al. 2010", "shortCiteRegEx": null, "year": 2010}, {"title": "Between MDPs and semi-MDPs: A framework for temporal abstraction in reinforcement learning", "author": ["Richard Sutton", "Doina Precup", "Satinder Singh"], "venue": "Artificial intelligence,", "citeRegEx": "Sutton et al. 1999", "shortCiteRegEx": null, "year": 1999}, {"title": "Policy gradient methods for reinforcement learning with function approximation", "author": ["Richard Sutton", "David McAllester", "Satinder Singh", "Yishay Mansour"], "venue": "Advances in Neural Information Processing Systems,", "citeRegEx": "Sutton et al. 2000", "shortCiteRegEx": null, "year": 2000}, {"title": "A Deep Hierarchical Approach to Lifelong Learning in Minecraft", "author": ["Chen Tessler", "Shahar Givony", "Tom Zahavy", "Daniel J Mankowitz", "Shie Mannor"], "venue": "13th European Workshop on Reinforcement Learning,", "citeRegEx": "Tessler et al. 2016", "shortCiteRegEx": null, "year": 2016}, {"title": "PhD thesis", "author": ["Georgios Theocharous. Hierarchical learning", "planning in partially observable Markov decision processes"], "venue": "Michigan State University,", "citeRegEx": "Theocharous 2002", "shortCiteRegEx": null, "year": 2002}, {"title": "Proceedings of the 2007 IEEE Symposium on Approximate Dynamic Programming and Reinforcement Learning", "author": ["Hado Van Hasselt", "Marco A. Wiering. Reinforcement learning in continuous action spaces"], "venue": "pages 272\u2013279,", "citeRegEx": "Van Hasselt and Wiering 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "Adaptive Behavior", "author": ["Marco Wiering", "J\u00fcrgen Schmidhuber. HQ-Learning"], "venue": "6(2):219\u2013 246,", "citeRegEx": "Wiering and Schmidhuber 1997", "shortCiteRegEx": null, "year": 1997}, {"title": "Reinforcement Learning Neural Turing Machines", "author": ["Wojciech Zaremba", "Ilya Sutskever"], "venue": "Arxiv,", "citeRegEx": "Zaremba and Sutskever 2015", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [], "year": 2017, "abstractText": "Most real-world reinforcement learning problems have a hierarchical nature, and often exhibit some degree of partial observability. While hierarchy and partial observability are usually tackled separately, for instance by combining recurrent neural networks and options, we show that addressing both problems simultaneously is simpler and more efficient in many cases. More specifically, we make the initiation set of options conditional on the previously-executed option, and show that options with such Option-Observation Initiation Sets (OOIs) are at least as expressive as Finite State Controllers (FSCs), a state-of-the-art approach for learning in POMDPs. In contrast to other hierarchical methods in partially observable environments, OOIs are easy to design based on an intuitive description of the task, lead to explainable policies and keep the top-level and option policies memoryless. Our experiments show that OOIs allow agents to learn optimal policies in challenging POMDPs, outperforming an human-provided policy in our robotic experiment, while learning much faster than a recurrent neural network", "creator": "LaTeX with hyperref package"}}}