{"id": "1709.05943", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Sep-2017", "title": "Fast YOLO: A Fast You Only Look Once System for Real-time Embedded Object Detection in Video", "abstract": "Object recognition is considered one of the most difficult issues in this area of computer vision, as it involves combining object classification and object localization within a scene. Recently, deep neural networks (DNNs) have been shown to achieve superior object recognition performance compared to other approaches, with YOLOv2 (an enhanced You Only Look Once model) being one of the most advanced methods of DNN-based object detection in terms of both speed and accuracy. Although YOLOv2 can achieve real-time performance on a powerful GPU, using this approach to real-time detection of objects on embedded computer devices with limited computing power and limited memory remains a major challenge. In this paper, we propose a new framework called Fast YOLO, a fast You Only Look Once framework that accelerates YOLOv2 to perform real-time object detection in video on embedded devices.", "histories": [["v1", "Mon, 18 Sep 2017 13:57:16 GMT  (2564kb)", "http://arxiv.org/abs/1709.05943v1", null]], "reviews": [], "SUBJECTS": "cs.CV cs.AI cs.NE", "authors": ["mohammad javad shafiee", "brendan chywl", "francis li", "alexander wong"], "accepted": false, "id": "1709.05943"}, "pdf": {"name": "1709.05943.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Mohammad Javad Shafiee"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n70 9.\n05 94\n3v 1\n[ cs\n.C V\n] 1\n8 Se\np 20\n17 Fast YOLO: A Fast You Only Look Once System for Real-time Embedded Object Detection in Video\nObject detection is considered one of the most challenging problems in this field of computer vision, as it involves the combination of object classification and object localization within a scene. Recently, deep neural networks (DNNs) have been demonstrated to achieve superior object detection performance compared to other approaches, with YOLOv2 (an improved You Only Look Oncemodel) being one of the state-of-the-art in DNN-based object detection methods in terms of both speed and accuracy. Although YOLOv2 can achieve real-time performance on a powerful GPU, it still remains very challenging for leveraging this approach for real-time object detection in video on embedded computing devices with limited computational power and limited memory. In this paper, we propose a new framework called Fast YOLO, a fast You Only Look Once framework which accelerates YOLOv2 to be able to perform object detection in video on embedded devices in a realtime manner. First, we leverage the evolutionary deep intelligence framework to evolve the YOLOv2 network architecture and produce an optimized architecture (referred to as O-YOLOv2 here) that has 2.8X fewer parameters with just a \u223c2% IOU drop. To further reduce power consumption on embedded devices while maintaining performance, a motion-adaptive inference method is introduced into the proposed Fast YOLO framework to reduce the frequency of deep inference with O-YOLOv2 based on temporal motion characteristics. Experimental results show that the proposed Fast YOLO framework can reduce the number of deep inferences by an average of 38.13%, and an average speedup of \u223c3.3X for objection detection in video compared to the original YOLOv2, leading Fast YOLO to run an average of \u223c18FPS on a Nvidia Jetson TX1 embedded system."}, {"heading": "1 Introduction", "text": "Object detection [1, 5] is one of the most challenging problems in this field of computer vision. The goal of object detection is to localize different objects in a scene and assign labels to the objects\u2019 bounding boxes. The most common approach [1, 2] to tackling this problem is to re-purpose existing trained classifiers to assign labels to bounding boxes in a scene. For example, a standard sliding window approach [1] can be used where a classifier determines the existence of an object and its associated label for all possible windows in the scene. However, this type of approach has significant limitations in terms of not only high computational complexity but also high detection error rate.\nRecently, deep neural networks (DNNs) have shown superior performance in a range of different applications [3, 4], with object detection being one of the key areas where DNNs have significantly outperformed existing approaches. In particular, a number of convolutional neural network (CNN)-based methods have been demonstrated to achieve state-of-the-art object detection performance. For example, in the Region-CNN (R-CNN) [5] approach, a CNN architecture is used to generate bounding box proposals in an image instead of a sliding window approach, and thus a classifier only perform classification on bounding box proposals. Although R-CNN is able to produce state-of-the-art accuracy, the whole procedure is slow and difficult to optimize since each component must be trained individually.\nMore recently, a You Only Look Once (YOLO) object detection approach [6] was proposed that mitigated the computational complexity issues associated with R-CNN by formulating the object detection problem as a single regression problem, where bounding box coordinates and class probabilities are computed at the same time. Although YOLO was demonstrated to provide significant speed advantages over R-CNN (e.g., 45 frames per second on a Nvidia Titan-X GPU), it was also shown that the localization error of YOLO is significantly higher than more recent R-CNN variants such as Faster R-CNN [7]. Region proposal network (RPN) in Faster R-CNN predicts offsets and confidences for the anchor\nboxes using hand-picked priors instead of predicting bounding box coordinates directly. Each anchor is associated with 4 coordinates for the box and 2 score values which estimate the probability of object and not object of the proposed box.\nMotivated by the improvement of Faster R-CNN via the anchor proposal, Redmon and Farhadi [8] proposed an improved YOLO method (named YOLOv2) where anchor boxes are used to predict bounding boxes. Furthermore, compared to YOLO, YOLOv2 does not have fully-connected layers in its network architecture. To make the training procedure easier for the network, k-means clustering was applied on the training set of bounding boxes to automatically select good priors and thus improved the modeling accuracy. To make the network faster, YOLOv2 utilized a new CNN network architecture (i.e., Darknet-19) in contrast to other frameworks which are using VGG-16. More specifically, Darknet-19 requires 8.52 billion floating point operations, which is significantly lower compared to VGG-16 which requires 30.69 billion floating point operations in each forward pass. The experimental results for this approach demonstrated that YOLOv2 can perform object detection at 67 FPS on a Nvidia Titan-X GPU while achieving state-of-the-art detection performance.\nAlthoughYOLOv2 can achieve real-time performance on a powerful GPU, it still remains very challenging for leveraging this approach for real-time object detection in video on embedded computing devices with limited computational power and limited memory. For example, in different real-world applications such as realtime inference on smartphones and embedded video surveillance, the available computing resources are limited to a combination of low-power embeddedGPUs or even just embedded CPUs with limited memory. Therefore, real-time object detection in video on embedded devices remains a big challenge to tackle.\nMotivated to tackle this challenge, we propose a new framework called Fast YOLO, which accelerates YOLOv2 for real-time objection detection in video on embedded devices via two key strategies. First, motivated by the promising results demonstrated by Shafiee et al [16, 17, 18], we leverage the evolutionary deep intelligence framework to evolve the YOLOv2 network architecture and produce an optimized architecture (referred to as O-YOLOv2 here) that has significantly fewer parameters while maintaining strong detection performance. Second, a motion-adaptive inference method is introduced into the proposed Fast YOLO framework to reduce the frequency of deep inference with O-YOLOv2 based on temporal motion characteristics. The combination of these two strategies results in a object detection framework that not only improves realtime embedded objection detection speed for video, making them feasible on embedded devices with restricted computational, memory, and power requirements.\nThe paper is organized as follows. In Section 2, the methodology behind Fast YOLO is described in detail. Experimental results demonstrating the efficacy of Fast YOLO is presented in Section 3, and conclusions are drawn in Section 4."}, {"heading": "2 Methodology", "text": "The proposed Fast YOLO framework is divided into two main components: i) optimized YOLOv2 architecture, and ii) motion-adaptive inference (see Figure 1). For each video frame, an image stack consisting of the video frame with a reference frame is passed into a 1\u00d7 1 convolutional layer. The result of the convolutional layer is a motion probability map, which is then fed into a motion-adaptive inference module to determine if deep inference is needed to compute an updated class probability map. As mentioned in the introduction, the main goal is to introduce a framework for object detection in video that can perform faster on embedded devices while decreasing resource usage, which in turn significantly decreases power usage. By leveraging this motion-adaptive inference approach, the frequency of deep inference is greatly reduced and is performed only when necessary."}, {"heading": "2.1 Optimized Network Architecture", "text": "One the main challenges in deep neural networks, particularly when leveraging them for embedded scenarios, is in network architecture design. The design process is usually performed by a human expert who explores a large number of network configurations to find the best architecture for a particular task in terms of modeling accuracy and the number of parameters. Finding the optimized network architecture is typically tackled currently as a hyper-parameter optimization problem, but this way of tackling the problem is very time-consuming and most methods are either computationally intractable for large network architectures, or lead to suboptimal solutions that are insufficient for embedded use. For example, a common approach to hyper-parameter optimization is grid search, where a large range of different network configurations are examined, and then the best configuration is selected as the final network architecture. However, a deep neural network designed for the purpose of object detection in video such as YOLOv2 have a tremendous number of parameters and as such is not computationally tractable to search the entire parameter space to find the optimal solution. As such, rather than leveraging a hyper-parameter optimization approach to obtaining an optimal network architecture based on YOLOv2, we instead take advantage of network optimization strategies designed specifically for improving network efficiency [9, 10, 11, 12, 13, 14, 15]. In particular, we leverage the evolutionary deep intelligence framework [16, 17, 18] to optimize the network architecture to synthesize a deep neural network that satisfies both the memory and computational power restrictions of embedded devices.\nIn the evolutionary deep intelligence framework [16, 17, 18], the architectural traits of a deep neural network is modeled via a probabilistic genetic encoding modeling strategy. In particular, the probabilistic \u2019DNA\u2019 produced in this manner encodes the probability of existence of all possible synapses within a network architecture. The probabilistic \u2019DNA\u2019 of an ancestor network (mimicking inheritance), along with environmental factors are then leveraged to synthesize a new, offspring deep neural network in a stochastic manner (mimicking natural selection and random mutation). This encoding and synthesis process is repeated generation after generation, producing increasinglymore efficient deep neural networks as time goes by. One of the key advantages of this approach is that, unlike hyper-parameter optimization approaches, the need to evaluate an enormous number of possible solutions is significantly mitigated, thus significantly decreases the computational complexity of finding an optimal network architecture.\nTo leverage the evolutionary deep intelligence framework for obtaining an optimized network architecture based on YOLOv2 for the purpose of embedded object detection on video, we take into consideration the fact that the computational power and available\nmemory are greatly limited on embedded devices. Therefore, we configure the environmental factors used in the network synthesis process such that the number of parameters in the network architecture are greatly reduced at each generation, as the number of parameters is the major factor in computational and memory requirements of a deep neural network.\nUse this approach allowed us to automatically find an optimized network architecture based on YOLOv2 (which we will call O-YOLOv2) that contains\u223c2.8X fewer parameters compared to the original YOLOv2 network architecture. Running such an optimized deep neural network not only greatly reduced computational and memory requirements, but also decreases the power consumption of the processor unit, which is highly important on embedded devices."}, {"heading": "2.2 Motion-adaptive Inference", "text": "To further decrease the power consumption of the processor unit for the purposes of embedded object detection in video, we take advantage of the fact that not all video frames captured contain unique information and thus deep inference does not need to be performed on all frames. As such, we introduce a motion-adaptive inference approach to determine if deep inference is needed for a particular video frame. By performing deep inference using the O-YOLOv2 network introduced in the previous section when necessary, this motion-adaptive inference technique can help the framework to decrease the demand for computational resources, thus resulting in a significant decrease in the power consumption of the system as well as an increase in processing speed.\nThe motion-adaptive inference process can be seen in Figure 1. Each frame It is stacked with the reference frame Iref to form an image stack. A 1\u00d71 convolutional layer is then performed on the image stack to produce a motion probabilitymap. The motion probability map, along with frame It , are passed into motion-adaptive inference module, which determines if the frame It is unique enough compared to the reference frame to warrant deep inference to compute a new class probability map. If the module determines that deep inference is necessary, the O-YOLOv2 network is used to compute an updated class probability map, and It and updated map are then stored as Iref and the reference probability map, respectively. In the situation where the motion-adaptive inference module determines that deep inference is not needed for frame It , the stored reference class probability map is used directly without performing O-YOLOv2 on frame It .\nBy taking advantage of this simple yet effective procedure, only frames that require deep inference are processed with it, leading to not only a decrease in power consumption, but also a decrease in the average running time per frame and can provide a faster framework specifically for environments where stationary or small\nmotion changes are frequent."}, {"heading": "3 Results & Discussion", "text": "The proposed Fast-YOLO framework is evaluated using two different strategies. First, we evaluate the modeling accuracy and performance of the optimized YOLOv2 (i.e., O-YOLOv2) network architecture with the original YOLOv2 network architecture on Pascal VOC 2007 dataset [19] to demonstrate the efficacy of the network architecture optimization process. Table 1 shows the architectural and performance comparisons between O-YOLOv2 and the original YOLOv2 on the Pascal VOC dataset. It can be observed that the O-YOLO network architecture is 2.8X smaller compared to the original YOLOv2 with only 2% drop in IOU, which would have little impact on real-world video-based object detection applications.\nSecond, the proposed Fast YOLO framework, O-YOLOv2, and original YOLOv2 are evaluated in terms of average run-time on a Nvidia Jetson TX1 embedded system on a video from [20]. It can be observed from Table 2 that the proposed Fast YOLO framework can reduce the number of deep inferences by an average of 68.5%, leading to an average run-time of 56ms compared to 184ms achieved by the original YOLOv2 (a \u223c3.3X speed-up)."}, {"heading": "4 Conclusion", "text": "In this paper, we introduced Fast YOLO, a new framework for the purpose of real-time embedded object detection in video. Although YOLOv2 is considered as a state-of-the-art framework with realtime inference on powerful GPUs, it is not possible to use it on embedded devices in real-time. Here, we take advantage of the evolutionary deep intelligence framework to produce an optimized network architecture based on YOLOv2. The optimized network architecture is utilized within a motion-adaptive inference framework to speed up the detection process as well as reduce the energy consumption of the embedded device. Experimental results showed that the proposed Fast YOLO framework can achieve an average run-time that is \u223c3.3X faster compared to original YOLOv2, can reduce the number of deep inferences by an average of 38.13%, and possesses a network architecture that is \u223c2.8X more compact."}, {"heading": "Acknowledgments", "text": "The authors thank NSERC, the Canada Research Chairs program, Nvidia, and DarwinAI."}], "references": [{"title": "Rapid object detection using a boosted cascade of simple features Computer Vision and Pattern Recognition", "author": ["P. Viola", "M. Jones"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2001}, {"title": "An extended set of haar-like features for rapid object detection", "author": ["R. Lienhart", "J. Maydt"], "venue": "International Conference on Image Processing (ICIP)(2002)", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2002}, {"title": "Imagenet classification with deep convolutional neural networks Advances in neural information processing systems (NIPS)(2012)", "author": ["A. Krizhevsky", "I. Sutskever", "G. Hinton"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "Very deep convolutional networks for large-scale image recognition arXiv preprint arXiv:1409.1556(2014)", "author": ["K. Simonyan", "A. Zisserman"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Rich feature hierarchies for accurate object detection and semantic segmentation. Computer Vision and Pattern Recognition", "author": ["Girshick R", "J. Donahue", "T. Darrell", "J. Malik"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "You only look once: Unified, real-time object detection", "author": ["J. Redmon", "S. Divvala", "R. Girshick", "A. Farhadi"], "venue": "Computer Vision and Pattern Recognition", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Faster R- CNN: Towards real-time object detection with region proposal networks. Advances in neural information processing systems", "author": ["Ren S", "K. He", "R. Girshick", "J. Sun"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "YOLO9000: better, faster, stronger. Computer Vision and Pattern Recognition", "author": ["J. Redmon", "A. Farhadi"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2017}, {"title": "Optimal brain damage", "author": ["Y. LeCun", "J. Denker", "S. Solla", "R. Howard", "L. Jackel"], "venue": "Advances in Neural Information Processing Systems (NIPS)", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1989}, {"title": "Compressing deep convolutional networks using vector quantization", "author": ["Y. Gong", "L. Liu", "M. Yang", "L. Bourdev"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Learning both weights and connections for efficient neural network", "author": ["S. Han", "J. Pool", "J. Tran", "W. Dally"], "venue": "Advances in Neural Information Processing Systems (NIPS)", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Training cnns with low-rank filters for efficient image classification", "author": ["Y. Ioannou", "D. Robertson", "J. Shotton", "R. Cipolla", "A. Criminisi"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2015}, {"title": "Sparse convolutional neural networks. Computer Vision and Pattern Recognition", "author": ["B. Liu", "M. Wang", "H. Foroosh", "M. Tappen", "M. Pensky"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "Learning structured sparsity in deep neural networks. Advances in neural information processing systems", "author": ["W. Wen", "C. Wu", "Y. Wang", "Y. Chen", "H. Li"], "venue": null, "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2016}, {"title": "Deep learning with Darwin: Evolutionary synthesis of deep neural networks", "author": ["M.J. Shafiee", "A. Mishra", "Wong A"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2016}, {"title": "Evolutionary Synthesis of Deep Neural Networks via Synaptic Cluster-driven Genetic Encoding. Advances in neural information processing systems workshop", "author": ["M.J. Shafiee", "Wong A"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2016}, {"title": "Evolution in Groups: A deeper look at synaptic cluster driven evolution of deep neural networks", "author": ["M.J. Shafiee", "E. Barshan", "Wong A"], "venue": null, "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2017}, {"title": "Multiple Object Tracking using K-Shortest Paths Optimization", "author": ["J. Berclaz", "F. Fleuret", "E. Turetken", "P. Fua"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence(2011)", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "Object detection [1, 5] is one of the most challenging problems in this field of computer vision.", "startOffset": 17, "endOffset": 23}, {"referenceID": 4, "context": "Object detection [1, 5] is one of the most challenging problems in this field of computer vision.", "startOffset": 17, "endOffset": 23}, {"referenceID": 0, "context": "The most common approach [1, 2] to tackling this problem is to re-purpose existing trained classifiers to assign labels to bounding boxes in a scene.", "startOffset": 25, "endOffset": 31}, {"referenceID": 1, "context": "The most common approach [1, 2] to tackling this problem is to re-purpose existing trained classifiers to assign labels to bounding boxes in a scene.", "startOffset": 25, "endOffset": 31}, {"referenceID": 0, "context": "For example, a standard sliding window approach [1] can be used where a classifier determines the existence of an object and its associated label for all possible windows in the scene.", "startOffset": 48, "endOffset": 51}, {"referenceID": 2, "context": "Recently, deep neural networks (DNNs) have shown superior performance in a range of different applications [3, 4], with object detection being one of the key areas where DNNs have significantly outperformed existing approaches.", "startOffset": 107, "endOffset": 113}, {"referenceID": 3, "context": "Recently, deep neural networks (DNNs) have shown superior performance in a range of different applications [3, 4], with object detection being one of the key areas where DNNs have significantly outperformed existing approaches.", "startOffset": 107, "endOffset": 113}, {"referenceID": 4, "context": "For example, in the Region-CNN (R-CNN) [5] approach, a CNN architecture is used to generate bounding box proposals in an image instead of a sliding window approach, and thus a classifier only perform classification on bounding box proposals.", "startOffset": 39, "endOffset": 42}, {"referenceID": 5, "context": "More recently, a You Only Look Once (YOLO) object detection approach [6] was proposed that mitigated the computational complexity issues associated with R-CNN by formulating the object detection problem as a single regression problem, where bounding box coordinates and class probabilities are computed at the same time.", "startOffset": 69, "endOffset": 72}, {"referenceID": 6, "context": ", 45 frames per second on a Nvidia Titan-X GPU), it was also shown that the localization error of YOLO is significantly higher than more recent R-CNN variants such as Faster R-CNN [7].", "startOffset": 180, "endOffset": 183}, {"referenceID": 7, "context": "Motivated by the improvement of Faster R-CNN via the anchor proposal, Redmon and Farhadi [8] proposed an improved YOLO method (named YOLOv2) where anchor boxes are used to predict bounding boxes.", "startOffset": 89, "endOffset": 92}, {"referenceID": 14, "context": "First, motivated by the promising results demonstrated by Shafiee et al [16, 17, 18], we leverage the evolutionary deep intelligence framework to evolve the YOLOv2 network architecture and produce an optimized architecture (referred to as O-YOLOv2 here) that has significantly fewer parameters while maintaining strong detection performance.", "startOffset": 72, "endOffset": 84}, {"referenceID": 15, "context": "First, motivated by the promising results demonstrated by Shafiee et al [16, 17, 18], we leverage the evolutionary deep intelligence framework to evolve the YOLOv2 network architecture and produce an optimized architecture (referred to as O-YOLOv2 here) that has significantly fewer parameters while maintaining strong detection performance.", "startOffset": 72, "endOffset": 84}, {"referenceID": 16, "context": "First, motivated by the promising results demonstrated by Shafiee et al [16, 17, 18], we leverage the evolutionary deep intelligence framework to evolve the YOLOv2 network architecture and produce an optimized architecture (referred to as O-YOLOv2 here) that has significantly fewer parameters while maintaining strong detection performance.", "startOffset": 72, "endOffset": 84}, {"referenceID": 8, "context": "As such, rather than leveraging a hyper-parameter optimization approach to obtaining an optimal network architecture based on YOLOv2, we instead take advantage of network optimization strategies designed specifically for improving network efficiency [9, 10, 11, 12, 13, 14, 15].", "startOffset": 250, "endOffset": 277}, {"referenceID": 9, "context": "As such, rather than leveraging a hyper-parameter optimization approach to obtaining an optimal network architecture based on YOLOv2, we instead take advantage of network optimization strategies designed specifically for improving network efficiency [9, 10, 11, 12, 13, 14, 15].", "startOffset": 250, "endOffset": 277}, {"referenceID": 10, "context": "As such, rather than leveraging a hyper-parameter optimization approach to obtaining an optimal network architecture based on YOLOv2, we instead take advantage of network optimization strategies designed specifically for improving network efficiency [9, 10, 11, 12, 13, 14, 15].", "startOffset": 250, "endOffset": 277}, {"referenceID": 11, "context": "As such, rather than leveraging a hyper-parameter optimization approach to obtaining an optimal network architecture based on YOLOv2, we instead take advantage of network optimization strategies designed specifically for improving network efficiency [9, 10, 11, 12, 13, 14, 15].", "startOffset": 250, "endOffset": 277}, {"referenceID": 12, "context": "As such, rather than leveraging a hyper-parameter optimization approach to obtaining an optimal network architecture based on YOLOv2, we instead take advantage of network optimization strategies designed specifically for improving network efficiency [9, 10, 11, 12, 13, 14, 15].", "startOffset": 250, "endOffset": 277}, {"referenceID": 13, "context": "As such, rather than leveraging a hyper-parameter optimization approach to obtaining an optimal network architecture based on YOLOv2, we instead take advantage of network optimization strategies designed specifically for improving network efficiency [9, 10, 11, 12, 13, 14, 15].", "startOffset": 250, "endOffset": 277}, {"referenceID": 14, "context": "In particular, we leverage the evolutionary deep intelligence framework [16, 17, 18] to optimize the network architecture to synthesize a deep neural network that", "startOffset": 72, "endOffset": 84}, {"referenceID": 15, "context": "In particular, we leverage the evolutionary deep intelligence framework [16, 17, 18] to optimize the network architecture to synthesize a deep neural network that", "startOffset": 72, "endOffset": 84}, {"referenceID": 16, "context": "In particular, we leverage the evolutionary deep intelligence framework [16, 17, 18] to optimize the network architecture to synthesize a deep neural network that", "startOffset": 72, "endOffset": 84}, {"referenceID": 14, "context": "In the evolutionary deep intelligence framework [16, 17, 18], the architectural traits of a deep neural network is modeled via a probabilistic genetic encoding modeling strategy.", "startOffset": 48, "endOffset": 60}, {"referenceID": 15, "context": "In the evolutionary deep intelligence framework [16, 17, 18], the architectural traits of a deep neural network is modeled via a probabilistic genetic encoding modeling strategy.", "startOffset": 48, "endOffset": 60}, {"referenceID": 16, "context": "In the evolutionary deep intelligence framework [16, 17, 18], the architectural traits of a deep neural network is modeled via a probabilistic genetic encoding modeling strategy.", "startOffset": 48, "endOffset": 60}, {"referenceID": 17, "context": "Second, the proposed Fast YOLO framework, O-YOLOv2, and original YOLOv2 are evaluated in terms of average run-time on a Nvidia Jetson TX1 embedded system on a video from [20].", "startOffset": 170, "endOffset": 174}], "year": 2017, "abstractText": "Object detection is considered one of the most challenging problems in this field of computer vision, as it involves the combination of object classification and object localization within a scene. Recently, deep neural networks (DNNs) have been demonstrated to achieve superior object detection performance compared to other approaches, with YOLOv2 (an improved You Only Look Oncemodel) being one of the state-of-the-art in DNN-based object detection methods in terms of both speed and accuracy. Although YOLOv2 can achieve real-time performance on a powerful GPU, it still remains very challenging for leveraging this approach for real-time object detection in video on embedded computing devices with limited computational power and limited memory. In this paper, we propose a new framework called Fast YOLO, a fast You Only Look Once framework which accelerates YOLOv2 to be able to perform object detection in video on embedded devices in a realtime manner. First, we leverage the evolutionary deep intelligence framework to evolve the YOLOv2 network architecture and produce an optimized architecture (referred to as O-YOLOv2 here) that has 2.8X fewer parameters with just a \u223c2% IOU drop. To further reduce power consumption on embedded devices while maintaining performance, a motion-adaptive inference method is introduced into the proposed Fast YOLO framework to reduce the frequency of deep inference with O-YOLOv2 based on temporal motion characteristics. Experimental results show that the proposed Fast YOLO framework can reduce the number of deep inferences by an average of 38.13%, and an average speedup of \u223c3.3X for objection detection in video compared to the original YOLOv2, leading Fast YOLO to run an average of \u223c18FPS on a Nvidia Jetson TX1 em-", "creator": "LaTeX with hyperref package"}}}