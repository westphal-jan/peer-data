{"id": "0903.0467", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Mar-2009", "title": "The Parameterized Complexity of Global Constraints", "abstract": "notably we argue that parameterized program complexity is a useful computational tool with ideas which algorithms to positively study large global security constraints. again in a particular, we show that typically many global constraints which can are intractable to parameter propagate completely have natural parameters often which cannot make them fixed - parameter programs tractable solutions and which are easy to compute. this tractability technique tends either to be the satisfying result directly of administering a amazingly simple dynamic constraints program or of a decomposition which has a seemingly strong polynomial backdoor of optimal bounded size. this infinitely strong backdoor is something often branded a cycle cutset. we also additionally show that parameterized solution complexity can subsequently be confidently used professionally to study out other aspects of nonlinear constraint programming like symmetry breaking. for instance, we partially prove below that computing value for symmetry propagation is fixed - parameter tractable enabled to regularly break in determining the number of logical symmetries. finally, we subsequently argue that parameterized complexity can be used naturally to derive results about considering the approximability of constraint propagation.", "histories": [["v1", "Tue, 3 Mar 2009 08:44:47 GMT  (25kb)", "http://arxiv.org/abs/0903.0467v1", "Proceedings of the Twenty-Third AAAI Conference on Artificial Intelligence"]], "COMMENTS": "Proceedings of the Twenty-Third AAAI Conference on Artificial Intelligence", "reviews": [], "SUBJECTS": "cs.AI cs.CC", "authors": ["christian bessiere", "emmanuel hebrard", "brahim hnich", "zeynep kiziltan", "claude-guy quimper", "toby walsh"], "accepted": true, "id": "0903.0467"}, "pdf": {"name": "0903.0467.pdf", "metadata": {"source": "CRF", "title": "The Parameterized Complexity of Global Constraints", "authors": ["C. Bessiere", "E. Hebrard", "B. Hnich", "Z. Kiziltan", "C.-G. Quimper", "T. Walsh"], "emails": ["bessiere@lirmm.fr", "ehebrard@4c.ucc.ie", "brahim.hnich@ieu.edu.tr", "zeynep@cs.unibo.it", "cquimper@alumni.uwaterloo.ca", "toby.walsh@nicta.com.au"], "sections": [{"heading": null, "text": "ar X\niv :0\n90 3.\n04 67\nv1 [\ncs .A\nI] 3\nM ar\n2 00"}, {"heading": "Introduction", "text": "One of the jewels of constraint programming is the notion of a global constraint (see, for example, (Re\u0301gin 1994; Re\u0301gin 1996; Bessiere and Re\u0301gin 1997; Re\u0301gin and Rueher 2000; Beldiceanu and Contegean 1994; Frisch et al. 2002)). Global constraints specify patterns that occur in many real-world problems, and come with efficient and effective propagation algorithms for pruning the search space. For instance, we often have decision variables which must take different values (e.g. activities requiring the same resource must all be assigned different times). Most constraint solvers therefore provide a global ALLDIFFERENT constraint which is propagated efficiently and effectively (Re\u0301gin 1994). Unfortunately several common and useful global constraints proposed in the past have turned out to be intractable to propagate completely (e.g. (Quimper 2003; Bessiere et al. 2004; Bessie\u0300re et al. 2005; Bessie\u0300re et al. 2006b; Samer and Szeider 2008; Artiouchine, Baptiste, and Durr 2008)). In this paper, we argue that we can understand more about the source\n\u2217Brahim Hnich is supported by the Scientific and Technological Research Council of Turkey (TUBITAK) under Grant No. SOBAG-108K027. Toby Walsh is funded by the Australian Government\u2019s Department of Broadband, Communications and the Digital Economy and the Australian Research Council. Copyright c\u00a9 2013, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nof this intractability by using tools from parameterized complexity. The insights gained from this analysis may lead to better search methods as well as new propagation algorithms."}, {"heading": "Formal background", "text": "A constraint satisfaction problem (CSP) consists of a set of variables, each with a finite domain of values, and a set of constraints specifying allowed combinations of values for some subset of variables. We presume any constraint can be checked in polynomial time. We use capital letters for variables (e.g. X , Y ), and lower case for values (e.g. d and di). We consider both finite domain and set variables. A variable X takes one value from a finite domain of possible values dom(X). A set variable S takes a set of values from a domain of possible sets. We view set variables as a vector of 0/1 finite domain variables representing the characteristic function of the set. This representation is equivalent to that of maintaining upper bound (ub(S)) and lower bound (lb(S)) on the potential and definite elements in the set. However, it permits us to simplify our analysis.\nConstraint solvers typically use backtracking search to explore the space of partial assignments. After each assignment, constraint propagation algorithms prune the search space by enforcing local consistency properties like domain or bound consistency. A constraint is domain consistent (DC) iff when a variable is assigned any of the values in its domain, there exist compatible values in the domains of all the other variables of the constraint. Such values are called a support. A CSP is domain consistent iff every constraint is domain consistent. A constraint is bound consistent (BC) iff when a variable is assigned the minimum (or maximum) value in its domain, there exist compatible values between the minimum and maximum domain value for all the other variables. Such values are called a bound support. A CSP is bound consistent iff every constraint is bound consistent. A global constraint is one in which the number of variables is not fixed. For instance, the NVALUE([X1, . . . , Xn], N) constraint ensures that the n variables,X1 to Xn, takeN different values (Pachet and Roy 1999). The ALLDIFFERENT constraint (Re\u0301gin 1994) is a special case of the NVALUE constraint in which N = n."}, {"heading": "Parameterized complexity", "text": "Recently, Bessiere et al. have shown that a number of common global constraints are intractable to propagate (Bessie\u0300re et al. 2006b). For instance, whilst enforcing bound consistency on the NVALUE constraint is polynomial, domain consistency is NP-hard. We show here that the tools of parameterized complexity can provide a more fine-grained view of such complexity results. These complexity tools help us to identify more precisely what makes a global constraint (in)tractable. The insights gained may guide search \u2013 for example, we shall see that they can identify small backdoors on which to branch \u2013 as well as suggesting new propagation algorithms.\nWe introduce the necessary tools from parameterized complexity theory. A problem is fixed-parameter tractable (FPT) if it can be solved in O(f(k)nc) time where f is any computable function, k is some parameter, c is a constant, and n is the size of the input. For example, vertex cover (\u201cGiven a graph with n vertices, is there a subset of vertices of size k or less that cover each edge in the graph\u201d) is NPhard in general, but fixed-parameter tractable with respect to k since it can be solved in O(1.31951kk2+kn) time. Hence, provided k is small, vertex cover can be solved effectively.\nDowney et al. argue (Downey, Fellows, and Stege 1999) that about half the naturally parameterized NP-hard problems in (Garey and Johnson 1979) are fixed-parameter tractable including 3 out of the 6 basic problems. Above FPT , Downey and Fellows have proposed a hierarchy of fixed-parameter intractable problem classes:\nFPT \u2286 W [1] \u2286 W [2] \u2286 . . . \u2286 XP\nFor instance, the clique problem is W [1]-complete with respect to the size of the clique, whilst the dominating set problem is W [2]-complete with respect to the size of the dominating set. W [t] is characterized by the maximum number t of unbounded fan-in gates on the input-output path of a Boolean circuit specifying the problem. There is considerable evidence to suggest that W [1]-hardness implies parametric intractability. In particular, the halting problem for non-deterministic Turing machines is W [1]-complete with respect to the length of the accepting computation."}, {"heading": "An example", "text": "Parameterized complexity gives us a more fine-grained view of the complexity of propagating global constraints. Consider again the NVALUE constraint. Whilst enforcing domain consistency on the NVALUE constraint is NP-hard in general, it is fixed-parameter tractable to enforce in the total number of values in the domains. In hindsight, it is perhaps obvious that propagating NVALUE is easy when the number of values is fixed. However, many different propagation algorithms for NVALUE have been proposed, and none of them prune all possible values and are polynomial when the number of values is fixed.\nTheorem 1 Enforcing domain consistency on NVALUE([X1, . . . , Xn], N) is fixed-parameter tractable in k = | \u22c3 i dom(Xi)|.\nProof: We give an automaton for accepting solutions to this constraint that scans through X1 to Xn and then N . The states of this automaton are all the possible sets of values that can be used by the Xi, plus one accepting state F . As there are k possible values in the domains of the Xi, there are O(2k) states. The transition on seeing Xi from state q goes to state q \u222a {Xi}. Finally, we only accept a transition on seeing N from state q if |q| = N . Quimper and Walsh have shown that we can efficiently enforce domain consistency wrt the assignments accepted by such an automaton in O(2knd) time where d = max{|dom(Xi)|} using a simple decomposition (Quimper and Walsh 2007). \u2737\nThus, if the total number of values in the domains is small, NVALUE is tractable to propagate completely since propagation takes polynomial time in the number of variables. For such complexity results to be useful, the identified parameter needs to be \u201cnatural\u201d and potentially small. It helps also if the parameter is easy to compute. We can then build a propagator which only decides to propagate the constraint completely when it is cheap to do so. As we shall see, several global constraints are fixed-parameter tractable with respect to the total number of values in the domains. This parameter is easy to compute, and is often small in practice. For instance, many radio frequency link assignment problems only require half a dozen values. We shall also see that dynamic programming is often a means (as here) to show that a global constraint is fixed-parameter tractable.\nOther parameters can help identify features that make a global constraint intractable. For instance, domain consistency on the NVALUE constraint is intractable to enforce when the fixed parameter is the maximum number of values that can be used by the Xi.\nTheorem 2 Enforcing domain consistency on NVALUE([X1, . . . , Xn], N) is W [2]-hard in k = max(dom(N)).\nProof: Hitting set is W [2]-complete in the size of the hitting set. Given a collection of sets {S1, . . . , Sn} and an integer k, consider the set of variables {X1, . . . , Xn, N} such that dom(N) = {0..k} and \u2200i, dom(Xi) = Si. It is easy to see that a solution of NVALUE([X1, . . . , Xn], N) corresponds to a hitting set of cardinality k or less. Thus, we can reduce hitting set to NVALUE immediately. \u2737\nHence, we see that the complexity of propagating the NVALUE constraint comes from the potentially large number of values in the domains of the Xi."}, {"heading": "Backdoors", "text": "As we shall see in the next section, dynamic programming is a frequent way to obtain fixed-parameter tractability results for constraint propagators. Another method is to identify a decomposition of the global constraint in which there is a strong backdoor containing a bounded number of variables. This backdoor is often a cycle cutset into an acyclic (and thus polynomial) subproblem. A strong backdoor is a subset of variables which give a polynomial subproblem however they are instantiated (Williams, Gomes, and Selman 2003). A cycle cutset is a subset of variables which break all cycles in the problem (Dechter and Pearl 1987). Once the cycle\ncutset is instantiated, the problem can be solved in a backtrack free manner using a domain consistency algorithm.\nConsider the global constraint, DISJOINT([X1, . . . , Xn], [Y1, . . . , Ym]) (Beldiceanu 2000). This ensures that Xi 6= Yj for any i and j. Such a global constraint is useful in scheduling and time-tabling problems. Enforcing domain consistency on DISJOINT is NP-hard (Bessiere et al. 2006a). However, it is fixed-parameter tractable in the total number of values in the domains. To show this, we give a simple decomposition which has a strong backdoor of bounded size that is a cycle cutset. In fact, we give a slightly stronger result. Enforcing domain consistency on DISJOINT is fixed-parameter tractable in the size of the intersection of the domains of Xi and Yj . Clearly if the total number of values is bounded then the intersection is too.\nTheorem 3 Enforcing domain consistency on DISJOINT([X1, . . . , Xn], [Y1, . . . , Ym]) is fixed-parameter tractable in k = | \u22c3 i dom(Xi) \u2229 \u22c3 j dom(Yj)|.\nProof: Without loss of generality, we assume n \u2265 m. Consider a set variable S and the decomposition: Xi \u2208 S and Yj 6\u2208 S. Recall that a set variable can be viewed as a vector of 0/1 variables representing the characteristic function. Let Sv = 1 iff v \u2208 S. Then, the set {Sv | v \u2208 \u22c3 i dom(Xi) \u2229 \u22c3 j dom(Yj)} is a strong backdoor because once these variables are set, the Xi and Yj are disconnected and domain consistency on the decomposition prunes the same values as on the original constraint. Detecting the supports can therefore be done in O(nd) time where d = max(|dom(Xi)|i\u2208[1,n]\u222a|dom(Yj)|j\u2208[1,m]). Since there are at most O(2k) possible instantiations for the strong backdoor, enforcing domain consistency on the DISJOINT constraint can be achieved by calling O(2k) times domain consistency on the decomposition and taking the union of the 2k domain consistent domains obtained. This takes O(2knd) time. \u2737"}, {"heading": "Other examples", "text": "We give some other examples of global constraints which are fixed-parameter tractable to propagate."}, {"heading": "Uses", "text": "The global constraint USES([X1, . . . , Xn], [Y1, . . . , Ym]) holds iff {Xi |1 \u2264 i \u2264 n} \u2286 {Yj | 1 \u2264 j \u2264 m}. That is, the Xi use only values used by the Yj . Enforcing domain consistency on such a constraint is NPhard (Bessie\u0300re et al. 2005). However, it is fixed-parameter tractable to propagate in the total number of values in the domain of Yj . We let k = | \u22c3 j dom(Yj)|. We give an automaton for accepting solutions to the USES constraint that scans through Y1 to Ym and then X1 to Xn. The states of this automaton are all the possible sets of values that can be used by Yj . As there are k possible values in the domains of the Yj , there are O(2k) possible states. The transition on seeing Yj from state q goes to q \u222a {Yj}. We also only accept a transition on seeing Xi from a state q if Xi \u2208 q.\nThis transition goes to state q itself. We can therefore enforce domain consistency using the simple decomposition in (Quimper and Walsh 2007) in O(2k(n+m)d) time where d = max{|dom(Xi)|} \u222a {|dom(Yj)|}."}, {"heading": "Among", "text": "The AMONG constraint was introduced in CHIP to model resource allocation problems like car sequencing (Beldiceanu and Contegean 1994). It counts the number of variables using values from a given set. AMONG([X1, . . . , Xn], [d1, . . . , dm], N) holds iff N = |{i | Xi = dj , 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m}|. We here consider a generalisation of AMONG where instead of the fixed values dj we have a set variable S. That is, AMONG([X1, . . . , Xn], S,N) holds iff N = |{i | Xi \u2208 S, 1 \u2264 i \u2264 n}|. Enforcing domain consistency on this extended version of AMONG is NPhard (Bessiere et al. 2006a). However, it is fixed-parameter tractable to propagate in k = |ub(S) \\ lb(S)|. AMONG can be decomposed into (Xi \u2208 S) \u2194 (Bi = 1), \u2200i, and\u2211\ni Bi = N , where Bi are additional Boolean variables. (Note that the sum constraint is polynomial to propagate when it sums Boolean variables.) S is a cycle cutset of the decomposition. Thus, once S is set, domain consistency on the decomposition is equivalent to domain consistency on the original AMONG constraint. Since there are at most O(2k) possible instantiations for S, enforcing domain consistency on the AMONG constraint can be achieved by calling O(2k) times domain consistency on the decomposition and making the union of the 2k domain consistent domains obtained. This takes O(2knd) time."}, {"heading": "Roots", "text": "Many counting and occurrence constraints can be specified using the global ROOTS constraint (Bessie\u0300re et al. 2005). ROOTS([X1, . . . , Xn], S, T ) holds iff S = {i |Xi \u2208 T }. As before, we consider S and T as shorthand for the vector of 0/1 variables representing the associated characteristic function. ROOTS can specify a wide range of other global constraints including the AMONG, ATMOST, ATLEAST, USES, DOMAIN and CONTIGUITY constraints. Enforcing domain consistency on ROOTS is NP-hard (Bessie\u0300re et al. 2006c). However, it is fixed-parameter tractable to propagate in k = |ub(T ) \\ lb(T )|. ROOTS can be decomposed into (i \u2208 S) \u2194 (Xi \u2208 T ), \u2200i. T is a cycle cutset of the decomposition. Thus, once T is set, domain consistency on the decomposition is equivalent to domain consistency on the original ROOTS constraint. Since there are at most O(2k) possible instantiations for T , enforcing domain consistency on the ROOTS constraint can be achieved by calling O(2k) times domain consistency on the decomposition and making the union of the 2k domain consistent domains obtained. This takes O(2knd) time."}, {"heading": "Bound consistency", "text": "Often bound consistency on a global constraint is tractable but domain consistency is NP-hard to enforce. For instance, as we observed before, bound consistency on\nthe NVALUE constraint is polynomial, but domain consistency is NP-hard (Bessie\u0300re et al. 2006b). As a second example, bound consistency on the INTERDISTANCE constraint is polynomial, but domain consistency is NPhard (Re\u0301gin 1997; Artiouchine, Baptiste, and Durr 2008). INTERDISTANCE([X1, . . . , Xn], p) holds iff |Xi \u2212 Xj | \u2265 p for i 6= j. This global constraint is useful in scheduling problems like runway sequencing. As a third example, the extended global cardinality constraint, EGCC([X1, . . . , Xn], [O1, . . . , Om]) ensures Oj = |{i | Xi = j}| for all j. Enforcing bound consistency on the Oj and domain consistency on the Xi is polynomial, but enforcing domain consistency on all variables is NP-hard (Quimper 2003). As a fourth and final example, bound consistency on a linear equation with coefficients set to one is polynomial, but domain consistency is NP-hard.\nWe can give a general fixed-parameter tractability result for such global constraints. The parameter is the sum of the number of non-interval domains and of the maximum number of \u201choles\u201d in a domain. This measures how close the domains are to intervals. If there are many holes in the domains, then we are far from intervals and the problem is intractable. We define intervals(S) = |{v \u2208 S | v + 1 6\u2208 S}|. If S contains no holes then intervals(S) = 1. If S contains p holes, then intervals(S) = p+ 1.\nTheorem 4 Suppose enforcing bound consistency on a global constraint over X1 to Xn is polynomial. Then enforcing domain consistency is fixed-parameter tractable in k = p + q where p = max(intervals(dom(Xi)) and q is the number of non-interval variables.\nProof: We give a decomposition with a strong backdoor. Consider Xi. Suppose the jth interval in dom(Xi) runs from lj to uj (that is, lj \u22121 6\u2208 dom(Xi), uj+1 6\u2208 dom(Xi), and [lj, uj ] \u2286 dom(Xi)). We introduce a variable Zi. When Zi = j, Xi will be restricted to the jth interval. To ensure this, we post (Zi = j) \u2194 (lj \u2264 Xi \u2264 uj). By definition of bound consistency, when domains are all intervals, a constraint is bound consistent iff it contains at least a satisfying tuple. Thus, the Zi are a strong backdoor into a subproblem which bound consistency can solve because when all Zi are set, all Xi become intervals. Checking if a value v for Xi is domain consistent on the global constraint is done by instantiating Xi to v (which is an interval), and by trying all the possible instantiations of the backdoor, except Zi, until bound consistency does not fail. This means that a support contains Xi = v. The total cost is bounded by nd \u00b7 \u220f i intervals(dom(Xi)) times the cost of bound con-\nsistency on this constraint, with \u220f\ni intervals(dom(Xi)) \u2264 pq. \u2737"}, {"heading": "Meta-constraints", "text": "Parameterized complexity also provides insight into propagators for meta-constraints. A meta-constraint is a constraint that applies other constraints. For instance, given a constraint C of arity p, the meta-constraint CARDPATH(N, [X1, . . . , Xn], C) holds iff N of the constraints, C(X1, . . . , Xp) to C(Xn\u2212p+1, . . . , Xn) hold (Beldiceanu and Carlsson 2001). This permits us to specify,\nsay, that we want at least 2 days \u201coff\u201d in every 7 along a sequence of shifts. CARDPATH can encode a range of Boolean connectives since N \u2265 1 gives disjunction, N = 1 gives exclusive or, and N = 0 gives negation. It therefore has numerous applications in domains including car-sequencing and rostering.\nEnforcing domain consistency on CARDPATH is NP-hard even when enforcing domain consistency on each C is polynomial (Bessie\u0300re et al. 2007). However, domain consistency is fixed-parameter tractable to enforce with respect to the sum of the arity of C and the maximum domain size.\nTheorem 5 Enforcing domain consistency on CARDPATH(N, [X1, . . . , Xn], C) is fixed-parameter tractable in k = p + d where p is the arity of C and d = max|{dom(Xi)}|.\nProof: We give an automaton for accepting solutions to this constraint that scans through X1 to Xn and then read N . The states of this automaton are the possible sequences of values of length smaller than p \u2212 1 labelled by the value 0, plus n+ 1 copies of the sequences of values of length p\u2212 1 labelled with the integers from 0 to n, and a final accepting state F . The integer labels count the number of times C has been satisfied so far. For l < p, the transition on reading vl from the state [v1, . . . , vl\u22121] (labelled 0) goes to the state [v1, . . . , vl\u22121, vl] with label 0. The transition on reading vp from the state [v1, . . . , vp\u22121] with label r goes to the state [v2, . . . , vp] with label r\u2032, where r\u2032 = r + 1 if C(v1, . . . , vp) is satisfied and r\u2032 = r otherwise. Finally, there is a transition reading character r from any state labelled with r to the final state F . The state F is the unique final state and the initial state is the empty sequence \u01eb (labelled 0). There are O(ndp\u22121) distinct states. We can therefore enforce domain consistency using the simple decomposition in (Quimper and Walsh 2007) in O(dpn2) time. \u2737\nThis is another example of a fixed-parameter tractability result with respect to two parameters, p and d. However, CARDPATH is not fixed-parameter tractable with respect to just d. In fact it is NP-hard when d is fixed.\nTheorem 6 Enforcing domain consistency on CARDPATH(N, [X1, . . . , Xn], C) is NP-hard even if |{dom(Xi)}| \u2264 2\nProof: The reduction used in the proof of NP-hardness of CARDPATH in Theorem 12 (Bessie\u0300re et al. 2007) uses just 1 or 2 domain values for each variable. \u2737"}, {"heading": "Symmetry breaking", "text": "Parameterized complexity also provides insight into symmetry breaking. Symmetry is a common feature of many real-world problems that dramatically increases the size of the search space if it is not taken into consideration. Consider, for instance, value symmetry. A value symmetry is a bijection \u03c3 on values that preserves solutions. That is, if Xi = ai for 1 \u2264 i \u2264 n is a solution then Xi = \u03c3(ai) is also. For example, if two values are interchangeable, then any possible permutation of these values is a symmetry. A simple and effective mechanism to deal\nwith symmetry is to add constraints to eliminate symmetric solutions (Puget 1993; Crawford et al. 1996). For example, given a set of value symmetries \u03a3, we can eliminate all symmetric solutions by posting the global constraint VALSYMBREAK(\u03a3, [X1, . . . , Xn]). This ensures that, for each \u03c3 \u2208 \u03a3:\n\u3008X1, . . . , Xn\u3009 \u2264lex \u3008\u03c3(X1), . . . , \u03c3(Xn)\u3009\nEnforcing domain consistency on such a global symmetry breaking constraint is NP-hard (Walsh 2007). However, this complexity depends on the number of symmetries. Breaking all value symmetry is fixed-parameter tractable in the number of symmetries.\nTheorem 7 Enforcing domain consistency on VALSYMBREAK(\u03a3, [X1, . . . , Xn]) is fixed-parameter tractable in k = |\u03a3|.\nProof: We give an automaton for accepting solutions to this constraint that scans through X1 to Xn. The states of the automaton are the set of value symmetries which have been broken up to this point in the vector. For instance, at the ith state, \u03c3 is a symmetry in the state iff \u3008X1, . . . , Xi\u3009 <lex \u3008\u03c3(X1), . . . , \u03c3(Xi)\u3009. If we are in the state q, we accept Xi if Xi \u2264 \u03c3(Xi) or (Xi > \u03c3(Xi) and \u03c3 \u2208 q). From the state q, on seeing Xi, we move to q \u222a {\u03c3 | \u03c3 \u2208 \u03a3, Xi < \u03c3(Xi)}. There are O(2k) possible states. We can therefore enforce domain consistency using the simple decomposition in (Quimper and Walsh 2007) in O(2knd) time where d = max{|dom(Xi)|}. \u2737"}, {"heading": "Approximate consistency", "text": "Parameterized complexity also provides insight into the approximability of constraint propagation. For optimization problems, global constraints can incorporate a variable taking the objective value. We can use approximation algorithms to filter partially such global constraints (Sellmann 2003). For example, consider the knapsack constraint, KNAPSACK([X1, . . . , Xn], [w1, . . . , wn], C, [p1, . . . , pn], P ) which holds iff:\nn\u2211\ni=1\nwiXi \u2264 C and\nn\u2211\ni=1\npiXi > P\nC is the capacity and P is the profit. Based on a fully polynomial time approximation scheme, Sellmann gives a propagator based on dynamic programming which guarantees an approximate consistency which filters values which only have supports that are a factor \u01eb outside the optimal profit. A fully polynomial time approximation scheme (FPTAS) is an algorithm that computes an answer with relative error \u01eb in time polynomial in the input length and in 1/\u01eb. A weaker notion is an efficient polynomial time approximation scheme (efficient PTAS) which is an algorithm that computes an answer with relative error \u01eb in time polynomial in the input length and in some function of \u01eb.\nWe can use parameterized complexity results to show that such approximate consistency is intractable to achieve. In particular, we can exploit a theorem first proved by Bazgan that if a problem has an efficient PTAS then it is in\nFPT (Downey, Fellows, and Stege 1999). Consider again the constraint NVALUE([X1, . . . , Xn], N). We might ask if we can approximately filter domains.\nTheorem 8 There is no polynomial algorithm for enforcing approximate consistency on NVALUE([X1, . . . , Xn], N) unless FPT = W [2].\nProof: By Theorem 2, enforcing domain consistency on NVALUE([X1, . . . , Xn], N) is W [2]-hard in k = max{dom(N)}. By Bazgan\u2019s theorem, we cannot have an efficient PTAS (and thus FPTAS) for this problem unless FPT = W [2]. \u2737"}, {"heading": "Other related work", "text": "In addition to the related work already mentioned, there are a number of other related studies. The analysis of (in)tractability has a long history in constraint programming. Such work has tended to focus on the structure of the constraint graph (e.g. (Freuder 1982; Dechter and Pearl 1989)) or on the semantics of the constraints (e.g. (Cooper, Cohen, and Jeavons 1994)). However, these lines of research are concerned with a constraint satisfaction problem as a whole, and do not say much about global constraints.\nFor global constraints of bounded arity, asymptotic analysis has been used to study propagation both in general and for constraints with a particular semantics. For example, the GAC-Schema algorithm of (Bessiere and Re\u0301gin 1997) has an O(dn) time complexity on constraints of arity n and domains of size d, whilst the GAC algorithm of (Re\u0301gin 1994) for the n-ary ALLDIFFERENT constraint has O(n 3\n2 d) time complexity. For global constraints like the CUMULATIVE and CYCLE constraints, there are very immediate reductions from bin packing and Hamiltonian circuit which demonstrate that these constraints are intractable to propagate in general. Bessiere et al. showed that many other global constraints like NVALUE are also intractable to propagate (Bessiere et al. 2004). More recently, Samer and Szeider have studied the parameterized complexity of the EGCC constraint (Samer and Szeider 2008). They show it is fixedparameter tractable to enforce domain consistency in the tree-width of the value graph and the largest possible number of occurrences, but is W [1]-hard in just the tree-width. Note that tree-width itself is NP-hard to compute."}, {"heading": "Conclusions", "text": "We have argued that parameterized complexity is a useful tool with which to study global constraints. In particular, we have shown that many global constraints like NVALUE, DISJOINT, and ROOTS, which are intractable to propagate completely have natural parameters which make them fixedparameter tractable. This tractability tends either to be the result of a simple dynamic program or of a decomposition which has a strong backdoor of bounded size. This strong backdoor is often a cycle cutset. We also showed that parameterized complexity can be used to study other aspects of constraint programming like symmetry breaking. For instance, we proved that value symmetry is fixed-parameter\ntractable to break in the number of symmetries. Finally, we argued that parameterized complexity can be used to derive results about the approximability of constraint propagation. For example, we cannot enforce an approximate consistency within a guaranteed factor for the NVALUE constraint.\nThe insights provided by this work can help design new search methods. For example, NVALUE, DISJOINT, USES, AMONG and ROOTS all have efficient propagators when the total number of value is small with respect to the number of variables. We might therefore build a propagator that propagates partially using a decomposition if the total number of values is large, and calls a complete method otherwise. We might also exploit their decompositions by branching on the backdoor variables. Finally, when we have an efficient bound consistency propagator, it may be worthwhile \u201celiminating\u201d holes in the domains by branching on those variables whose domains have holes, or by introducing variables to represent the intervals without holes and branching on these introduced variables. In the longer term, we hope to apply other ideas about tractability from parameterized complexity like reduction to a problem kernel."}], "references": [{"title": "Runway sequencing with holding patterns", "author": ["Baptiste Artiouchine", "K. Durr 2008] Artiouchine", "P. Baptiste", "C. Durr"], "venue": "European Journal of OR", "citeRegEx": "Artiouchine et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Artiouchine et al\\.", "year": 2008}, {"title": "and Carlsson", "author": ["N. Beldiceanu"], "venue": "M.", "citeRegEx": "Beldiceanu and Carlsson 2001", "shortCiteRegEx": null, "year": 2001}, {"title": "and Contegean", "author": ["N. Beldiceanu"], "venue": "E.", "citeRegEx": "Beldiceanu and Contegean 1994", "shortCiteRegEx": null, "year": 1994}, {"title": "and R\u00e9gin", "author": ["C. Bessiere"], "venue": "J.", "citeRegEx": "Bessiere and R\u00e9gin 1997", "shortCiteRegEx": null, "year": 1997}, {"title": "The complexity of global constraints", "author": ["Bessiere"], "venue": "In Proc. of the 19th National Conf. on AI. AAAI", "citeRegEx": "Bessiere,? \\Q2004\\E", "shortCiteRegEx": "Bessiere", "year": 2004}, {"title": "The range and roots constraints: Specifying counting and occurrence problems", "author": ["Bessi\u00e8re"], "venue": "In Proc. of 19th IJCAI,", "citeRegEx": "Bessi\u00e8re,? \\Q2005\\E", "shortCiteRegEx": "Bessi\u00e8re", "year": 2005}, {"title": "Among, common and disjoint constraints", "author": ["Bessiere"], "venue": "In Recent Advances in Constraints: Joint ERCIM/CoLogNET Int. Workshop on Constraint Solving and Constraint Logic Programming", "citeRegEx": "Bessiere,? \\Q2006\\E", "shortCiteRegEx": "Bessiere", "year": 2006}, {"title": "Filtering algorithms for the NVALUE constraint. Constraints 11(4):271\u2013293", "author": ["Bessi\u00e8re"], "venue": null, "citeRegEx": "Bessi\u00e8re,? \\Q2006\\E", "shortCiteRegEx": "Bessi\u00e8re", "year": 2006}, {"title": "The complexity of global constraints. Constraints 12(2):239\u2013259", "author": ["Bessi\u00e8re"], "venue": null, "citeRegEx": "Bessi\u00e8re,? \\Q2007\\E", "shortCiteRegEx": "Bessi\u00e8re", "year": 2007}, {"title": "Characterizing tractable constraints", "author": ["Cohen Cooper", "M. Jeavons 1994] Cooper", "D. Cohen", "P. Jeavons"], "venue": "Artificial Intelligence", "citeRegEx": "Cooper et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Cooper et al\\.", "year": 1994}, {"title": "Symmetry breaking predicates for search problems", "author": ["Crawford"], "venue": "In Proc. of the 5th Int. Conf. on Knowledge Representation and Reasoning,", "citeRegEx": "Crawford,? \\Q1996\\E", "shortCiteRegEx": "Crawford", "year": 1996}, {"title": "and Pearl", "author": ["R. Dechter"], "venue": "J.", "citeRegEx": "Dechter and Pearl 1987", "shortCiteRegEx": null, "year": 1987}, {"title": "and Pearl", "author": ["R. Dechter"], "venue": "J.", "citeRegEx": "Dechter and Pearl 1989", "shortCiteRegEx": null, "year": 1989}, {"title": "M", "author": ["Downey, R.G.", "Fellows"], "venue": "R.; and Stege, U.", "citeRegEx": "Downey. Fellows. and Stege 1999", "shortCiteRegEx": null, "year": 1999}, {"title": "Global constraints for lexicographic orderings", "author": ["Frisch"], "venue": "In Proc. of 8th Int. Conf. on Principles and Practices of Constraint Programming (CP-2002)", "citeRegEx": "Frisch,? \\Q2002\\E", "shortCiteRegEx": "Frisch", "year": 2002}, {"title": "and Johnson", "author": ["M. Garey"], "venue": "D.", "citeRegEx": "Garey and Johnson 1979", "shortCiteRegEx": null, "year": 1979}, {"title": "and Roy", "author": ["F. Pachet"], "venue": "P.", "citeRegEx": "Pachet and Roy 1999", "shortCiteRegEx": null, "year": 1999}, {"title": "and Walsh", "author": ["Quimper", "C.-G."], "venue": "T.", "citeRegEx": "Quimper and Walsh 2007", "shortCiteRegEx": null, "year": 2007}, {"title": "and Rueher", "author": ["R\u00e9gin", "J.-C."], "venue": "M.", "citeRegEx": "R\u00e9gin and Rueher 2000", "shortCiteRegEx": null, "year": 2000}, {"title": "and Szeider", "author": ["M. Samer"], "venue": "S.", "citeRegEx": "Samer and Szeider 2008", "shortCiteRegEx": null, "year": 2008}], "referenceMentions": [], "year": 2013, "abstractText": "We argue that parameterized complexity is a useful tool with which to study global constraints. In particular, we show that many global constraints which are intractable to propagate completely have natural parameters which make them fixedparameter tractable and which are easy to compute. This tractability tends either to be the result of a simple dynamic program or of a decomposition which has a strong backdoor of bounded size. This strong backdoor is often a cycle cutset. We also show that parameterized complexity can be used to study other aspects of constraint programming like symmetry breaking. For instance, we prove that value symmetry is fixed-parameter tractable to break in the number of symmetries. Finally, we argue that parameterized complexity can be used to derive results about the approximability of constraint", "creator": "LaTeX with hyperref package"}}}