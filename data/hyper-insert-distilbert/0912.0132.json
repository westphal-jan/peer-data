{"id": "0912.0132", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2009", "title": "Opportunistic Adaptation Knowledge Discovery", "abstract": "adaptation has long been considered controversial as the cultural achilles'sole heel of studying case - based evolutionary reasoning even since beginning it requires some shared domain - specific social knowledge element that it is truly difficult to acquire. in this paper, two relevant strategies are successfully combined exactly in good order to temporarily reduce entirely the knowledge engineering cost induced by terminating the human adaptation knowledge ( ca ) acquisition task : ca interaction is learned from the case base by the formal means of knowledge discovery processing techniques, however and where the actual ca acquisition paradigm sessions are opportunistically frequently triggered, i. e., at problem - solving time.", "histories": [["v1", "Tue, 1 Dec 2009 12:08:47 GMT  (38kb)", "http://arxiv.org/abs/0912.0132v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["fadi badra", "am\\'elie cordier", "jean lieber"], "accepted": false, "id": "0912.0132"}, "pdf": {"name": "0912.0132.pdf", "metadata": {"source": "CRF", "title": "Opportunistic Adaptation Knowledge Discovery", "authors": ["Fadi Badra", "Am\u00e9lie Cordier", "Jean Lieber"], "emails": ["badra@loria.fr", "lieber@loria.fr", "Amelie.Cordier@liris.cnrs.fr"], "sections": [{"heading": null, "text": "ar X\niv :0\n91 2.\n01 32\nv1 [\ncs .A\nI] 1\nD ec"}, {"heading": "1 Introduction", "text": "Case-based reasoning (CBR [6]) is a reasoning paradigm based on the reuse of previous problem-solving experiences, called cases. A CBR system often has profit of a retrieval procedure, selecting in a case base a source case similar to the target problem, and an adaptation procedure, that adapts the retrieved source case to the specificity of the target problem. The adaptation procedure depends on domain-dependent adaptation knowledge (AK, in the following). Acquiring AK can be done from experts or by using machine learning techniques. An intermediate approach is knowledge discovery (KD) that combines efficient learning algorithms with human-machine interaction.\nMost of previousAK acquisition strategies are off-line: they are disconnected from the use of the CBR system. By contrast, recent work aims at integrating AK acquisition from experts to specific reasoning sessions: this opportunistic AK acquisition takes advantage of the problem-solving context. This paper presents an approach to AK discovery that is opportunistic: the KD is triggered at problem-solving time.\nThe paper is organized as follows. Section 2 introduces some basic notions and notations about CBR. Section 3 presents the CBR system Taaable, which constitutes the application context of the study, and motivates the need for adaptation knowledge acquisition in this application context. Section 4 presents the proposed opportunistic and interactive AK discovery method. In Sect. 5, this method is applied to acquire adaptation knowledge in the context of the Taaable system. Section 6 discusses this approach and situates it among related work. Section 7 concludes and presents some future work."}, {"heading": "2 Basic Notions About CBR", "text": "In the following, problems are assumed to be represented in a language Lpb and solutions in a language Lsol. A source case represents a problem-solving episode by a pair (srce, Sol(srce)), in which srce \u2208 Lpb is the representation of a problem statement and Sol(srce) \u2208 Lsol is the representation of its associated solution. CBR aims at solving a target problem tgt using a set of source cases CB called the case base. The CBR process is usually decomposed in two main steps: retrieval and adaptation. Retrieval selects a source case (srce, Sol(srce)) from the case base such that srce is judged to be similar to tgt according to a given similarity criterion. Adaptation consists in modifying Sol(srce) in order\nto propose a candidate solution S\u0303ol(tgt) for tgt to the user. If the user validates\nthe candidate solution S\u0303ol(tgt), then S\u0303ol(tgt) is considered to be a solution Sol(tgt) for tgt.\n3 Application Context: the Taaable System\nThe Taaable system [3] is a cooking CBR system. In the cooking domain, CBR aims at answering a query using a set of recipes. In order to answer a query, the system retrieves a recipe in the recipe set and adapts it to produce a recipe satisfying the query. The Taaable system was proposed to participate to the Computer Cooking Contest (CCC) challenge in 2008 [4]. In the CCC challenge, queries are given in natural language and express a set of constraints that the desired recipe should satisfy. These constraints concern the ingredients to be included or avoided, the type of ingredients (e.g., meat or fruit), the dietary practice (e.g., nut-free diet), the type of meal (e.g., soup) or the type of cuisine (e.g., chinese cuisine). An example of query is: \u201cCook a chinese soup with leek but no peanut oil.\u201d Recipes are given in textual form, with a shallow XML structure, and include a set of ingredients togetherwith a textual part describing the recipe preparation. The Taaable system is accessible online (http://taaable.fr)."}, {"heading": "3.1 Representation Issues", "text": "ACooking Ontology. The systemmakes use of a cooking ontology O represented in propositional logic. Each concept ofO corresponds to a propositional variable taken fromafinite setV of propositional variables.O ismainly composedof a set of concepts organized in a hierarchy, which corresponds, in propositional logic, to a set of logical implications a \u21d2 b. For example, the axiom leek \u21d2 onions of O states that leeks are onions.\nProblem and Solution Representation. In Taaable, a problem pb \u2208 Lpb represents a query and a solution Sol(pb) of pb represents a recipe that matches this query. Lpb and Lsol are chosen fragments of propositional logic defined using the vocabularyV introduced in the cooking ontology O. One propositional variable is\ndefined inLpb andLsol for each concept name ofO and the only logical connective used in Lpb and Lsol is the conjunction \u2227. For example, the representation tgt \u2208 Lpb of the query mentioned above is:\ntgt = chinese\u2227 soup \u2227 leek \u2227 \u00ac peanut oil\nThe case base CB contains a set of recipes. Each recipe is indexed in the case base by a propositional formula R \u2208 Lsol. For example, the index R of the recipe Wonton Soup is:\nR = chinese\u2227 soup \u2227 green onion \u2227 . . . \u2227 peanut oil \u2227Nothing else\nNothing else denotes a conjunction of negative literals \u00ac a for all a \u2208 V such that chinese \u2227 soup \u2227 green onion \u2227 . . . \u2227 peanut oil 2O a. This kind of \u201cclosed world assumption\u201d states explicitly that for all propositional variable a \u2208 V, either R O a (the recipe contains the ingredient represented by a) or R O \u00ac a (the recipe does not contain the ingredient represented by a).\nEach recipe index R represents a set of source cases: R represents the set of source cases (srce, Sol(srce)) such that Sol(srce) = R and srce is solved by R, i.e., srce is such that R O srce.\nAdaptation Knowledge. In Taaable, adaptation knowledge is given by a set of reformulations (r,Ar) inwhichr is a binary relationbetweenproblemsandAr is an adaptation function associatedwith r [13]. A reformulation has the following semantics: if two problems pb1 and pb2 are relatedby r\u2014denoted by pb1 r pb2\u2014 then for every recipe Sol(pb1) matching the query pb1, Ar(pb1, Sol(pb1), pb2) = S\u0303ol(pb2) matches the query pb2. In this paper, binary relations r are given by substitutions of the form \u03c3 = \u03b1 \u03b2, where \u03b1 and \u03b2 are literals (either positive or negative). For example, the substitution \u03c3 = leek onions generalizes leek into onions.\nAdaptation functions Ar are given by substitutions of the form \u03a3 = A B in which A and B are conjunctions of literals. For example, the substitution \u03a3 = soup \u2227 pepper soup \u2227 ginger states that pepper can be replaced by ginger in soup recipes. A substitution \u03a3 can be automatically generated from a substitution \u03c3: \u03a3 = b a if \u03c3 is of the form a b and \u03a3 = \u2205 \u00ac a if \u03c3 is of the form \u00ac a \u2205.\nThe main source of adaptation knowledge is the ontology O. A substitution \u03c3 = a b is automatically generated from each axiom a \u21d2 b of O and correspond to a substitution by generalization. A substitution \u03c3 = a b can be applied to a query pb if pb O a. \u03c3 generates a new query \u03c3(pb) inwhich the propositional variable a has been substituted by the propositional variable b. For example, the substitution \u03c3 = leek onions is generated automatically from the axiom leek \u21d2 onions of O. \u03c3 can be applied to the query tgt to produce the query \u03c3(tgt) = chinese \u2227 soup \u2227 onions \u2227 \u00ac peanut oil, in which leek has been substituted by onions. For each propositional variable a of V, an additional substitution of the form \u03c3 = \u00ac a \u2205 is generated. Such a substitution can be applied to a problem pb if pb O \u00ac a and generates a newproblem \u03c3(pb) inwhich\nthe negative literal \u00ac a is removed. This has the effect to loosen the constraints imposed on a query e.g., by omitting in the query an unwanted ingredient. For example, the substitution \u00ac peanut oil \u2205 applied to tgt generates the query \u03c3(tgt) = chinese\u2227soup\u2227leek, in which the condition on the ingredient peanut oil is omitted.\nHowever, when O is the only source of adaptation knowledge, the system is only able to perform simple adaptations, in which the modifications made to Sol(srce) correspond to a sequence of substitutions that can be used to transform srce into tgt. Therefore, an additional adaptation knowledge base AKB is introduced. AKB contains a set of reformulations (\u03c3, \u03a3) that capture more complex adaptation strategies.\n3.2 The CBR Process in Taaable\nRetrieval. The retrieval algorithm is based on a smooth classification algorithm on an index hierarchy. Such an algorithm aims at determining a set ofmodifications to apply to tgt in order to obtain a modified query srce that matches at least one recipe Sol(srce) of the case base. The algorithm computes a similarity path, which is a composition of substitutions SP = \u03c3q \u25e6 \u03c3q\u22121 \u25e6 \u00b7 \u00b7 \u00b7 \u25e6 \u03c31 such that there exists at least one recipe Sol(srce) matching the modified query srce = \u03c3q(\u03c3q\u22121(. . . \u03c31(tgt) . . .)), i.e., such that Sol(srce) O srceholds. Thus, a similarity path SP can be written:\nSol(srce) O srce \u03c3q \u2190\u2212 \u03c3q\u22121 \u2190\u2212\u2212 \u00b7 \u00b7 \u00b7 \u03c31 \u2190\u2212 tgt\nFor example, to solve the above query tgt, the system generates a similarity path SP = \u03c32 \u25e6 \u03c31, with:\ntgt = chinese\u2227 soup \u2227 leek \u2227 \u00ac peanut oil\n\u03c31 = \u00ac peanut oil \u2205, \u03c32 = leek onions\nsrce = chinese\u2227 soup \u2227 onions\nSol(srce) = chinese\u2227 soup \u2227 green onion\u2227 . . . \u2227 peanut oil \u2227Nothing else\nIn this similarity path, Sol(srce) is the propositional representation of the recipe Wonton Soup. Since the ontology O contains the axiom green onion\u21d2 onions, the modified query srce = \u03c32 \u25e6 \u03c31 (tgt) verifies Sol(srce) O srce.\nAdaptation. To a similarity path is associated an adaptation path AP, which is a composition of substitutions AP = \u03a31 \u25e6 \u03a32 \u25e6 \u00b7 \u00b7 \u00b7 \u25e6 \u03a3q such that the modified\nrecipe S\u0303ol(tgt) = \u03a31(\u03a32(. . . \u03a3q(Sol(srce)) . . .)) solves the initial query tgt, i.e.,\nverifies S\u0303ol(tgt) O tgt. Thus, an adaptation path AP can be written\nSol(srce) \u03a3q \u2212\u2192 \u03a3q\u22121 \u2212\u2212\u2192 \u00b7 \u00b7 \u00b7 \u03a31 \u2212\u2192 S\u0303ol(tgt) O tgt\nThe adaptation path AP is constructed from the similarity path SP by associating a substitution \u03a3i to each substitution \u03c3i. To determine which substitution\n\u03a3i to associate to a given substitution \u03c3i, the external adaptation knowledge base AKB is searched first. For a substitution \u03c3i = \u03b1 \u03b2, the system looks for a substitution \u03a3 = A B such that A O \u03b2 and B O \u03b1. For example, if \u03c32 = leek onions is used in SP and AKB contains the reformulation (\u03c3, \u03a3) with \u03c3 = \u03c32 and \u03a3 = green onion leek \u2227 ginger, \u03a3 will be selected to constitute the substitution \u03a32 in AP since green onion O onions and leek \u2227 ginger O leek. If no substitution \u03a3 is found in AKB for a given substitution \u03c3i then \u03a3i is generated automatically from \u03c3i.\nIn the previous example, AKB is considered to be empty so\u03a31 and\u03a32 are generated automatically from the substitutions \u03c31 and \u03c32: \u03a31 = \u2205 \u00ac peanut oil since \u03c31 = \u00ac peanut oil \u2205 and \u03a32 = onions leek since \u03c32 = leek onions. According to the axiom green onion \u21d2 onions of O, the system further specializes the substitution \u03a32 into the substitution green onion leek and the user is proposed to replace green onions by leek in the recipe Wonton Soup and to suppress peanut oil. The generated adaptation path is AP = \u03a31 \u25e6 \u03a32 (Fig. 1), with:\n3.3 Why Learning Adaptation Knowledge in Taaable?\nIn the version of the Taaable system that was proposed to participate in the CCC challenge, AKB = \u2205 so adaptation knowledge is inferred from the ontology O. The main advantage of this approach lies in its simplicity: no external source of adaptation knowledge is needed and the system is able to propose a solution to any target problem. However, the system\u2019s adaptation capabilities (simple\nsubstitutions) appear to be very limited and the user has no means to give some feedback on the quality of the proposed adaptation.\nFor example, the substitution\u03a31 = \u2205 \u00ac peanut oil suggests to remove the ingredient peanut oil in the retrieved recipe, but as the oil is used in this recipe to saute the bok choy, the adapted recipe turns out to be practically unfeasible. A better adaptation would suggest to replace peanut oil by e.g., sesame oil, which can be modeled by the substitution \u03a31 = peanut oil sesame oil. To generate this substitution automatically, the system could for example exploit the fact that the concepts peanut oil and sesame oil are both sub-concepts of the concept oil in O. But still, some additional knowledge would be needed to express the fact that peanut oil should be replaced by sesame oil, and not by olive oil or hot chili oil, as olive oil and hot chili oil are also sub-concepts of oil inO. Besides, the system should be aware that this substitution is recommended only in Asian cuisine, which can be modeled by the more precise substitution \u03a31 = asian\u2227 peanut oil asian \u2227 sesame oil.\nFurthermore, the second substitution \u03a32 = green onions leek suggests to solely replace sliced green onions by uncooked leek. But the green onion was used in the original Wonton Soup for garniture, so the user might consider that raw leek added as garniture alters too much the taste of a soup. A better adaptationwould consist in frying leek with e.g., tempeh and red bell pepper to prepare the garniture. Such an adaptation can be modeled by the substitution \u03a32 = green onions leek \u2227 tempeh \u2227 red bell pepper. This substitution, which reflects a cooking know-how, can hardly be generated automatically from the ontology.\nThese examples show that in order to improve its adaptation capabilities, the system would greatly benefit from the availability of a set of adaptation rules that would capture more complex adaptation strategies. These adaptation rules cannot be generated automatically from the ontology and need to be acquired fromother knowledge sources. These examples also show that the human expert plays a major role in adaptation knowledge acquisition and that in the cooking domain, adaptation rules are often highly contextual."}, {"heading": "4 Opportunistic Adaptation Knowledge Discovery", "text": "The presented AK acquisition method combines two previous approaches of AK acquisition. The first one was implemented in the CabamakA system [5] and learns AK from differences between cases by the means of knowledge discovery techniques (section 4.1). The second one was implemented in the IakA system [8] and acquires adaptation knowledge at problem-solving time through interactions with the user (section 4.2)."}, {"heading": "4.1 Adaptation Knowledge Discovery from the Case Base", "text": "Machine learning algorithms aim at extracting some regularities from a set of observations. Knowledge discovery techniques combine efficient machine\nlearning algorithmswith human-machine interaction. In [5], AK is learned from differences between cases by the means of knowledge discovery techniques. A set of pairs of sources cases is taken as input of a frequent itemset extraction algorithm, which outputs a set of itemsets. Each of these itemsets can be interpreted as an adaptation rule. This approach of AK learning was motivated by the original idea proposed by Kathleen Hanney and Mark T. Keane in [11], in which the authors suggest that AK may be learned from differences between cases. The main assumption is that the differences that occur between cases in the case base are often representative of differences that will occur between future problems and the case base.\nTo learn adaptation rules fromdifferences between cases, representing variations between cases is essential. In [2], expressive representation formalisms are proposed and it is shown that defining a partial order on the variation language can help organizing the learned rules by generality."}, {"heading": "4.2 Opportunistic and Interactive Knowledge Acquisition", "text": "Experiential knowledge, or know-how, can often be acquired on-line, when users are using CBR tools. It is the aim of interactive and opportunistic knowledge acquisition strategies to support such an acquisition. In these strategies, the system exploits its interactions with its user to build new pieces of knowledge, to test them and, in case of success, to retain them. Moreover, the knowledge acquisition process is often opportunistic, i.e, triggered by a previous reasoning failure: reasoning failures highlight missing knowledge and thus constitute a guidance for the acquisition process. A major advantage of interactive knowledge acquisition strategies is that they ensure that the user is in a favorable context when he participates to the acquisition process. In [7], a review of interactive and opportunistic knowledge acquisition approaches is proposed, and two strategies are developed. This work illustrates the efficiency of interactive and opportunistic knowledge acquisition approaches to acquire specific knowledge. On the other hand, it shows that such approaches only allow the systems to acquire small pieces of knowledge at a time."}, {"heading": "4.3 Combining the two Approaches", "text": "When properly used, knowledge discovery techniques may have the strong advantage of automating a part of the knowledge acquisition process. In these approaches, dedicated human-machine interfaces allow the expert, through predefined interactions, to provide feedback on a set of suggestions generated automatically by the system. The role of the expert is thus reduced to the validation of a pre-selected set of knowledge pieces. The acquired knowledge is directly usable by the system, without the need for an additional formalization step. Automatic approaches also benefit from efficient machine learning algorithms that can be applied, as in [2], to learn adaptation rules at different levels of generality. However, these approaches still produce a large number of\ncandidate knowledge units that have to be validated by a domain expert out of any context, which constitutes an important drawback.\nAcquiring adaptation knowledge offline, i.e., independently of a particular problem-solving session, appears to be problematic. Offline AK acquisition forces the system\u2019s designer to anticipate the need for adaptation knowledge in problem-solving and to acquire it in advance, which can be very tedious, if not impossible. Offline acquisition of adaptation knowledge also makes difficult to come upwith fine-grained adaptation rules, since adaptation knowledge is often highly contextual. For example, in the cooking domain, an egg can sometimes be substituted by 100 grams of tofu, but this adaptation rule may be applied only to certain types of dishes, like cakes or mayonnaise, and has proved to be irrelevant in order to adapt a mousse recipe or an omelet recipe. Acquiring such a rule would require to circumscribe its domain of validity in order to avoid over-generalization.\nMoreover, initial acquisition of adaptation knowledge prevents the system from learning from experience. ACBR systemwith fixed adaptation knowledge has no way to improve its problem-solving capabilities, except by retaining in the case base a new experience each time a problem has been solved, as it is usually done in traditional CBR systems [6].\nOn the other hand, interactive and opportunistic knowledge acquisition approaches heavily rely on the human expert but ensure that the expert is \u201cin context\u201d when validating knowledge units that are to be acquired. Combining knowledge discovery techniques and interactive approaches, as it is proposed here, could overcome one of the limitations of KD by dramatically reducing the number of candidate adaptation rules presented to the expert. By triggering the process in an opportunistic manner, the expert is able to parametrize the KD in order to focus on specific knowledge to acquire in context. The resulting AK discovery process:\n\u2013 is performed on-line, i.e., in the context of a problem-solving session, \u2013 is interactive as adaptation knowledge is learned by the system through interactions with its user who acts as an expert, \u2013 is opportunistic as it is triggered by reasoning failure, and, consequently, often helps repairing a failed adaptation, \u2013 makes use of knowledge discovery techniques to provide assistance to the user in the formulation of new knowledge: the user is presented with a set of suggestions that are generated automatically from the case base.\n5 Applying Opportunistic AK Discovery to Taaable\nIn this section, an opportunistic AK discovery process is applied to the context of the Taaable system."}, {"heading": "5.1 AK Discovery", "text": "In Taaable, the AK discovery process consists in learning a set of substitutions from the case base by comparing two sets of recipes.\nThe Training Set. The training set TS is formed by selecting from the case base a set of pairs of recipes (Rk, R\u2113) \u2208 CB\u00d7CB and by representing for each selected pair of recipes (Rk, R\u2113) the variation \u2206k\u2113 from Rk to R\u2113. The choice of the training set TS results from a set of interactions with the user during which he/she is asked to formulate the cause of the adaptation failure and to pick up a repair strategy.\nRepresenting Variations. The variation \u2206k\u2113 from a recipe Rk to a recipe R\u2113 is represented in a language L\u2206 by a set of properties. Three properties a -, a+ and a= are defined in L\u2206 for each propositional variable a of V, and \u2206k\u2113 \u2208 L\u2206 contains:\n\u2013 the property a- if Rk O a and R\u2113 2O a, \u2013 the property a+ if Rk 2O a and R\u2113 O a, \u2013 the property a= if Rk O a and R\u2113 O a.\nFor example, if:\nRk = chinese\u2227 soup \u2227 . . . \u2227 peanut oil \u2227Nothing else\nR\u2113 = chinese\u2227 soup \u2227 . . . \u2227 olive oil \u2227Nothing else\nthen \u2206k\u2113 = {chinese =, soup=, oil=, peanut oil-, olive oil+, . . .}, provided that peanut oil O oil, olive oil O oil, R\u2113 2O peanut oil and Rk 2O olive oil. The inclusion relation \u2286 constitutes a partial order onL\u2206 that can be used to organize variations by generality: a variation \u2206 is more general than a variation \u2206\u2032 if \u2206 \u2286 \u2206\u2032.\nMining. The learning process consists in highlighting some variations \u2206 \u2208 L\u2206 that aremore general thana \u201clarge\u201d number of elements\u2206k\u2113of TS.More formally, let\nsupport(\u2206) = card {\u2206k\u2113 \u2208 TS | \u2206 \u2286 \u2206k\u2113}\ncard TS\nLearning adaptation rules aims at finding the \u2206 \u2208 L\u2206 such that support(\u2206) \u2265 \u03c3s, where \u03c3s \u2208 [0; 1] is a learning parameter called the support threshold. It can be noticed that if \u22061 \u2286 \u22062 then support(\u22061) \u2265 support(\u22062). The support threshold also has an influence on the number of generated variations. The number of generated variations increases when \u03c3s decreases. Thus, specifying a high threshold restricts the generation of variations to the most general ones, which can limit the number of generated variations and save computation time but has the effect to discard the most specific ones from the result set.\nEach learned variation \u2206 = {p1, p2, . . . , pn} \u2208 L\u2206 is interpreted as a substitution of the form A B such that:\n\u2013 A O a and B 2O a if a - \u2208 \u2206, \u2013 A 2O a and B O a if a + \u2208 \u2206, \u2013 A O a and B O a if a = \u2208 \u2206.\nFor example, the variation\u2206 = {oil=, peanut oil-, olive oil+} is interpreted as the substitution \u03a3 = peanut oil olive oil. The conjunct oil is not present neither in A nor in B since it is useless: peanut oil O oil and olive oil O oil.\nFiltering. For a retrieved recipe Sol(srce), the result set can befiltered in order to retain only the substitutions \u03a3 = A B that can be applied tomodify Sol(srce), i.e., such that Sol(srce) O A.\nValidation. Knowledge discovery aims at building a model of reality from a set of observations. But as a model of a part of reality is only valid with respect to a particular observer, any learned substitution has to be validated by a human expert in order to acquire the status of piece of knowledge."}, {"heading": "5.2 Opportunistic Adaptation Knowledge Discovery", "text": "The AK discovery process turns the case base into an additional source of adaptation knowledge. This new source of knowledge is usedduring a problemsolving session to provide the CBR system with adaptation knowledge \u201con demand\u201d. A set of variations \u2206 is learned from the case base by comparing two sets of recipes and each learned variation \u2206 is interpreted as a substitution \u03a3 that can be used to repair the adaptation path AP. Each learned substitution \u03a3 is presented to the user for validation together with the corrected solution\nS\u0303ol(tgt) resulting from its application. When the user validates the corrected solution, a new reformulation (\u03c3, \u03a3) is added to the adaptation knowledge base AKB so that the learned substitution \u03a3 can be later reused to adapt new recipes. The AK discovery process is triggered either during the adaptation phase, to come up with suggestions of gradual solution refinements (see section 5.4 for an example), or during the solution test phase to repair a failed adaptation in response to the user\u2019s feedback (see section 5.5 for an example)."}, {"heading": "5.3 Implementation", "text": "To test the proposed adaptation knowledge acquisition method, a prototype was implemented that integrates the Taaable system [3] and the CabamakA system [5]. The case base contains 862 recipes taken from theCCC2008 recipe set. The Taaable system is used to perform retrieval and adaptation. The CabamakA system is used to learn a set of substitutions \u03a3 from the case base from the comparison of two sets of recipes. As in [5], the mining step is performed thanks to a frequent closed itemset extraction algorithm."}, {"heading": "5.4 A First Example: Cooking a Chocolate Cake", "text": "An example is presented to illustrate how the case base is used as an additional source of adaptation knowledge. The AK discovery process is parametrized automatically and is used to provide assistance to the user by suggesting some gradual refinements for the proposed solution.\n1. Representing the Target Problem. In this example, the user wants to cook a chocolate cake with baking chocolate and oranges. The target problem is:\ntgt = cake \u2227 baking chocolate\u2227 orange\nIn the Taaable interface, the field \u201cIngredients I Want\u201d is filled in with the tokens baking chocolate and orange and the field \u201cTypes I Want\u201d is filled in with the token cake. 2. Retrieval. The retrieval procedure generates the similarity path SP = \u03c31 in which the substitution \u03c31 = baking chocolate chocolate is generated automatically from the ontology O from the axiom baking chocolate \u21d2 chocolate. SP is applied to tgt in order to produce the modified query srce = cake\u2227chocolate\u2227orange. The system retrieves the recipeUltralight Chocolate Cake, whose representation Sol(srce) is:\nSol(srce) = cake\u2227 cocoa\u2227 orange\u2227 . . . \u2227Nothing else\nSince the ontology O contains the axiom cocoa \u21d2 chocolate, Sol(srce) solves the query srce: Sol(srce) is such that Sol(srce) O srce. 3. Adaptation. AKB is assumed to be empty, so to construct the adaptation path AP, the substitution chocolate baking chocolate is generated automatically from \u03c31. This substitution is further specialized into the substitution \u03a31 = cocoa baking chocolate, according to the axiom cocoa \u21d2\nchocolate of O. A first solution S\u0303ol(tgt) is computed by applying to Sol(srce) the adaptation path AP = \u03a31. The user suggests that an ingredient is missing in S\u0303ol(tgt) but could not identify a repair strategy. An AK\ndiscovery is triggered in order to suggest gradual refinements of S\u0303ol(tgt). 4. Choosing the Training Set. The training set TS is chosen from\u03a31: AK is learned\nby comparing the recipes containing cocoa with the recipes containing baking chocolate. TS is composed of the set of variations\u2206k\u2113 \u2208 L\u2206 between pairs of recipes (Rk, R\u2113) \u2208 CB \u00d7 CB such that {cocoa\n-, baking chocolate+} \u2286 \u2206k\u2113. 5. Mining and Filtering. A value is given to the support threshold \u03c3s and the\nmining step outputs a set of variations. A filter retains only the variations that correspond to substitutions applicable to modify Sol(srce). 6. Solution Test and Validation. The user selects the learned variation \u2206 = {cocoa-, baking chocolate+, oil-} from the result set. \u2206 is interpreted as the substitution \u03a3 = cocoa \u2227 oil baking chocolate, which suggests to replace cocoa by baking chocolate in the retrieved recipe and to remove oil. The user explains this rule by the fact that baking chocolate contains more fat than cocoa, and therefore substituting cocoa by baking chocolate implies to reduce the quantity of fat in the recipe. Further solution refinements are proposed to the user. The set of learned variations is filtered in order to retain only the substitutions \u2206\u2032 that aremore specific than \u2206, i.e., such that \u2206 \u2286 \u2206\u2032. Among the retained variations is the variation \u2206\u2032 = {cocoa-, baking chocolate+, oil-, vanilla-}, which is interpreted as the substitution\u03a3\u2032 = cocoa\u2227oil\u2227vanilla baking chocolate. \u03a3\u2032 suggests to also remove vanilla in the recipeUltralight Chocolate Cake. The\nuser is satisfied with the refined solution S\u0303ol(tgt) resulting from the application of the adaptation path AP = \u03a3\u2032 to Sol(srce), so the reformulation (baking chocolate chocolate, cocoa \u2227 oil \u2227 vanilla baking chocolate) is added to the adaptation knowledge base AKB."}, {"heading": "5.5 A Second Example: Cooking a Chinese Soup", "text": "A second example is presented in which the AK discovery process is triggered in response to the user feedback in order to repair the adaptation presented in Sect. 3. In this example, the user is encouraged to formulate the cause of the adaptation failure. A repair strategy is chosen that is used to parametrize the AK discovery process.\n1. Representing the Target Problem. In this example, the target problem tgt is:\ntgt = chinese\u2227 soup \u2227 leek \u2227 \u00ac peanut oil\nIn the Taaable interface, the field \u201cIngredients I Want\u201d is filled in with the token leek, the field \u201cIngredients I Don\u2019t Want\u201d is filled in with the token peanut oil and the field \u201cTypes IWant\u201d is filled in with the tokens chinese and soup. 2. Retrieval. As in Sect. 3, two substitutions \u03c31 = \u00ac peanut oil \u2205 and \u03c32 = leek onions are generated automatically from the ontology O. The similarity path SP = \u03c32 \u25e6 \u03c31 is applied to tgt in order to produce the modified query srce = chinese\u2227 soup \u2227 onions. The system retrieves the recipeWonton Soup, whose representation Sol(srce) solves the query srce: Sol(srce) is such that Sol(srce) O srce. 3. Adaptation. Initially, AKB = \u2205, so to construct the adaptation path AP, two substitutions \u03a31 = \u2205 \u00ac peanut oil and \u03a32 = green onion leek are automatically generated from \u03c31 and \u03c32. 4. Solution Test and Validation. The solution S\u0303ol(tgt) is presented to the user for validation, together with the adaptation path AP = \u03a31 \u25e6 \u03a32 that was used to generate it. 5. The User is Unsatisfied! The user complains that the adapted recipe is prac-\ntically unfeasible because the proposed solution S\u0303ol(tgt) does not contain oil anymore, and oil is needed to saute the bok choy. 6. What has Caused the Adaptation Failure? The cause of the adaptation failure is identified through interactions with the user. The user validates the inter-\nmediate solution S\u0303ol(pb) that results from the application of the substitution \u03a32 = green onion leek to Sol(srce). But the user invalidates the solution S\u0303ol(tgt) that results from the application of \u03a31 = \u2205 \u00ac peanut oil to S\u0303ol(pb). The substitution \u03a31 is identified as responsible for the adaptation failure since its application results in the removal of oil in the recipe. 7. Choosing a Repair Strategy.A repair strategy is chosen according to the user\u2019s feedback. The user expresses the need for oil in the adapted recipe, so the repair strategy consists in replacing peanut oil by another oil. An AK discovery process is triggered to decidewhich oil to replace peanut oil with. 8. Choosing the Training Set.A set of recipes that contain peanut oil is compared with a set of recipes containing other types of oil. The training set TS is composed of the set of variations\u2206k\u2113 \u2208 L\u2206 between pairs of recipes (Rk, R\u2113) \u2208 CB \u00d7 CB such that {oil=, peanut oil-} \u2286 \u2206k\u2113.\n9. Mining and Filtering. A value is given to the support threshold \u03c3s and the mining step outputs a set of variations. A filter retains only the variations that correspond to substitutions applicable to modify Sol(pb).\n10. Solution Test and Validation. The user selects the learned variation \u2206 = {oil=, peanut oil-, olive oil+} from the result set. \u2206 is interpreted as the substitution \u03a3 = peanut oil olive oil, which suggests to replace peanut oil by olive oil in the retrieved recipe. The adaptation path AP = \u03a3 \u25e6\n\u03a32 is computed and the repaired solution S\u0303ol(tgt) is presented to the user for validation. The user is satisfied with the corrected solution S\u0303ol(tgt), so the reformulation (\u2205 \u00ac peanut oil, peanut oil olive oil) is added to the adaptation knowledge base AKB."}, {"heading": "6 Discussion and Related Work", "text": "AK acquisition is a difficult task that is recognized to be a major bottleneck for CBR system designers due to the high knowledge-engineering costs it generates. To overcome these knowledge-engineering costs, a few approaches (e.g., [5,9,11]) have applied machine learning techniques to learn AK offline from differences between cases of the case base. In [11], a set of pairs of source cases is selected from the case base and each selected pair of source cases is considered as a specific adaptation rule. The featural differences between problems constitute the antecedent part of the rule and the featural differences between solutions constitute the consequent part. Michalski\u2019s closing interval rule algorithm is then applied to generalize adaptation rule antecedents. In [9], adaptation knowledge takes the form of a set of adaptation cases. Each adaptation case associates an adaptation action to a representation of the differences between the two source problems. Machine learning algorithms like C4.5 or RISE are applied to learn generalized adaptation knowledge from these adaptation cases in order to improve the system\u2019s case-based adaptation procedure.\nWhen applyingmachine learning techniques to learn adaptation knowledge from differences between cases, one main challenge concerns the choice of the training set: which cases are worth comparing? Arguing that (1) the size of the training set should be reduced to minimize the cost of the adaptation rule generationprocess and that (2) the source cases that areworth comparing should be the ones that aremore similar, only the pairs of source cases that were judged to be similar according to a given similarity measure are selected in [9] and [11]. However, committing to a particular similarity measure might be somewhat arbitrary. Therefore, in [5], the authors decided to include in the training set all the pairs of distinct source cases of the case base. This paper introduces a third approach: the choice of the training set is determined interactively and according to the problem-solving context, taking advantage of the fact that the AK discovery process is triggered on-line. This approach appears to be very promising since the learning algorithm can be parametrized in order to learn only the knowledge that is needed to solve the target problem.\nThe examples presented above also show that knowledge discovery techniques allow to come up with more complex adaptation strategies than the simple one-to-one ingredient substitutions generated from the ontology O. In particular, these techniques can help identifying interactions between the different ingredients that appear in the recipes (like e.g., that cocoa contains less fat than baking chocolate, so oil should be removed) as well as co-occurrences of ingredients (like say, that cinnamon is well-suited with apples). Besides, adaptation knowledge is learned at different levels of generality, so the user can be guided into gradual solution refinements.\nSeveral CBR systems make use of interactive and/or opportunistic knowledge acquisition approaches to improve their learning capabilities. For example, in Creek, an approach that combines case-based and model-based methods, general knowledge is acquired through interactions with the user [1]. This knowledge acquisition process is provided in addition to the traditional case acquisition and allows the system to acquire knowledge that cannot be captured through cases only. In the Dial system, adaptation knowledge is acquired in the form of adaptation cases: when a case has to be adapted, the adaptation process is memorized in the form of a case and can be reused to adapt another case. Hence, adaptation knowledge is acquired through a CBR process inside the main CBR cycle. It must be remarked that adaptation cases can either be built automatically by adaptation of previous adaptation cases or manually by a user who interactively builds the adaptation case in response to a problem by selecting the appropriates operations to perform [12]. Hence, knowledge acquisition in Dial appears to be both interactive and opportunistic. Chef is obviously related to thework described here [10]. Chef is a case-basedplanner in the cooking domain, its task is to build recipes on the basis of a user\u2019s request. The input of the system is a set of goals (tastes, textures, ingredients, types of dishes) and the output is a plan for a single recipe that satisfies all the goals. To solve this task, Chef is able to build new plans from old ones stored in memory. The system is provided with the ability to choose plans on the basis of the problems that they solve as well as the goals they satisfy, but it is also able to predict problems and to modify plans to avoid failures (plans are indexed in memory by the problems they avoid). Hence, Chef learns by providing causal explanations of failures thus marking elements as \u201dpredictive\u201d of failures. In other words, the acquired knowledge allows the system to avoid identical failures to occur again. In our approach, we propose to go one step further by using failure to acquire knowledge that can be more widely used."}, {"heading": "7 Conclusion and Future Work", "text": "In this paper, a novel approach for adaptation knowledge acquisition is presented in which the knowledge learned at problem-solving time by knowledge discovery techniques is directly reused for problem-solving. An application is proposed in the context of the cooking CBR system Taaable and the feasibility of the approach is demonstrated on some use cases. Future work will include\ndeveloping a graphical user interface and doing more extensive testing. Opportunistic and interactive knowledge discovery in Taaable implies that the user plays the role of the domain expert, which raises several issues. For example, how to be sure that the knowledge expressed by a particular user is valuable? How to ensure that the adaptation knowledge base will remain consistent with time? Besides, Taaable is meant to be multi-user, so if the system\u2019s knowledge evolves with experience, some synchronization problems might occur. Therefore, the envisioned multi-user, ever-learning Taaable system needs to be thought of as a collaborative tool in which knowledge acquired by some users can be revised by others."}], "references": [{"title": "Knowledge-Intensive Case-Based Reasoning in Creek", "author": ["A. Aamodt"], "venue": "Proceedings of the 7th European Conference on Case-Based Reasoning (ECCBR\u201904),", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2004}, {"title": "Representing Case Variations for Learning General and Spe- cific Adaptation Rules", "author": ["F. Badra", "J. Lieber"], "venue": "Proceedings of the Fourth Starting AI Researcher\u2019s Symposium (STAIRS", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "Taaable: Text Mining, Ontology Engineering, and Hierarchical Classification for Textual Case-Based Cooking, in Computer Cooking Contest - Workshop at European Con- ference on Case-Based Reasoning (ECCBR\u201908), eds", "author": ["F. Badra", "R. Bendaoud", "R. Bentebibel", "Champin", "P.-A", "J. Cojan", "A. Cordier", "S. Despr\u00e9s", "S. Jean-Daubias", "J. Lieber", "T. Meilender", "A. Mille", "E. Nauer", "A. Napoli", "Y. Toussaint"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Case Base Mining for Adaptation Knowledge Acquisition", "author": ["M. d\u2019Aquin", "F. Badra", "S. Lafrogne", "J. Lieber", "A. Napoli", "L. Szathmary"], "venue": "Proceedings of the International Con- ference on Artificial Intelligence,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Case-Based Reasoning: An Overview", "author": ["R.L. de M\u00e1ntaras", "E. Plaza"], "venue": "in AI Communica- tions,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1997}, {"title": "Interactive and Opportunistic Knowledge Acquisition in Case-Based Reasoning", "author": ["A. Cordier"], "venue": "Phd Thesis, Universite\u0301 Lyon", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2008}, {"title": "Opportunistic Ac- quisition of Adaptation Knowledge and Cases - The IakA Approach, in Proceedings of the 9th European Conference on Case-Based Reasoning (ECCBR\u201908)", "author": ["A. Cordier", "B. Fuchs", "L. Lana de Carvalho", "J. Lieber", "A. Mille"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2008}, {"title": "LearningAdaptation Knowledge to ImproveCase- Based Reasoning", "author": ["S. Craw", "N. Wiratunga", "R. Rowe"], "venue": "Artificial Intelligence,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}, {"title": "CHEF: A model of case-based planning", "author": ["K. Hammond"], "venue": "Proceedings of the 5th National Conference on Artificial Intelligence, eds AAAI Press,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1986}, {"title": "The Adaptation Knowledge Bottleneck: How to Unblock it By Learning", "author": ["K. Hanney", "M.T. Keane"], "venue": "From Cases, in Proceedings of the 2nd International Conference on CBR,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1997}, {"title": "Acquiring Case Adaptation Knowledge: A Hybrid Approach", "author": ["D. Leake", "A. Kinley", "D. Wilson"], "venue": "in Proc. of the 13th National Conference onArtificial Intelligence,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1996}, {"title": "Reformulation in Case-Based Reasoning, in Fourth EuropeanWorkshop on Case-Based Reasoning, EWCBR-98, eds B", "author": ["E. Melis", "J. Lieber", "A. Napoli"], "venue": "Smyth and P. Cunning- ham, Lecture Notes in Artificial Intelligence,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1998}], "referenceMentions": [{"referenceID": 4, "context": "Case-based reasoning (CBR [6]) is a reasoning paradigm based on the reuse of previous problem-solving experiences, called cases.", "startOffset": 26, "endOffset": 29}, {"referenceID": 2, "context": "The Taaable system [3] is a cooking CBR system.", "startOffset": 19, "endOffset": 22}, {"referenceID": 11, "context": "In Taaable, adaptation knowledge is given by a set of reformulations (r,Ar) inwhichr is a binary relationbetweenproblemsandAr is an adaptation function associatedwith r [13].", "startOffset": 169, "endOffset": 173}, {"referenceID": 3, "context": "The first one was implemented in the CabamakA system [5] and learns AK from differences between cases by the means of knowledge discovery techniques (section 4.", "startOffset": 53, "endOffset": 56}, {"referenceID": 6, "context": "The second one was implemented in the IakA system [8] and acquires adaptation knowledge at problem-solving time through interactions with the user (section 4.", "startOffset": 50, "endOffset": 53}, {"referenceID": 3, "context": "In [5], AK is learned from differences between cases by the means of knowledge discovery techniques.", "startOffset": 3, "endOffset": 6}, {"referenceID": 9, "context": "Keane in [11], in which the authors suggest that AK may be learned from differences between cases.", "startOffset": 9, "endOffset": 13}, {"referenceID": 1, "context": "In [2], expressive representation formalisms are proposed and it is shown that defining a partial order on the variation language can help organizing the learned rules by generality.", "startOffset": 3, "endOffset": 6}, {"referenceID": 5, "context": "In [7], a review of interactive and opportunistic knowledge acquisition approaches is proposed, and two strategies are developed.", "startOffset": 3, "endOffset": 6}, {"referenceID": 1, "context": "Automatic approaches also benefit from efficient machine learning algorithms that can be applied, as in [2], to learn adaptation rules at different levels of generality.", "startOffset": 104, "endOffset": 107}, {"referenceID": 4, "context": "ACBR systemwith fixed adaptation knowledge has no way to improve its problem-solving capabilities, except by retaining in the case base a new experience each time a problem has been solved, as it is usually done in traditional CBR systems [6].", "startOffset": 239, "endOffset": 242}, {"referenceID": 2, "context": "To test the proposed adaptation knowledge acquisition method, a prototype was implemented that integrates the Taaable system [3] and the CabamakA system [5].", "startOffset": 125, "endOffset": 128}, {"referenceID": 3, "context": "To test the proposed adaptation knowledge acquisition method, a prototype was implemented that integrates the Taaable system [3] and the CabamakA system [5].", "startOffset": 153, "endOffset": 156}, {"referenceID": 3, "context": "As in [5], the mining step is performed thanks to a frequent closed itemset extraction algorithm.", "startOffset": 6, "endOffset": 9}, {"referenceID": 3, "context": ", [5,9,11]) have applied machine learning techniques to learn AK offline from differences between cases of the case base.", "startOffset": 2, "endOffset": 10}, {"referenceID": 7, "context": ", [5,9,11]) have applied machine learning techniques to learn AK offline from differences between cases of the case base.", "startOffset": 2, "endOffset": 10}, {"referenceID": 9, "context": ", [5,9,11]) have applied machine learning techniques to learn AK offline from differences between cases of the case base.", "startOffset": 2, "endOffset": 10}, {"referenceID": 9, "context": "In [11], a set of pairs of source cases is selected from the case base and each selected pair of source cases is considered as a specific adaptation rule.", "startOffset": 3, "endOffset": 7}, {"referenceID": 7, "context": "In [9], adaptation knowledge takes the form of a set of adaptation cases.", "startOffset": 3, "endOffset": 6}, {"referenceID": 7, "context": "When applyingmachine learning techniques to learn adaptation knowledge from differences between cases, one main challenge concerns the choice of the training set: which cases are worth comparing? Arguing that (1) the size of the training set should be reduced to minimize the cost of the adaptation rule generationprocess and that (2) the source cases that areworth comparing should be the ones that aremore similar, only the pairs of source cases that were judged to be similar according to a given similarity measure are selected in [9] and [11].", "startOffset": 535, "endOffset": 538}, {"referenceID": 9, "context": "When applyingmachine learning techniques to learn adaptation knowledge from differences between cases, one main challenge concerns the choice of the training set: which cases are worth comparing? Arguing that (1) the size of the training set should be reduced to minimize the cost of the adaptation rule generationprocess and that (2) the source cases that areworth comparing should be the ones that aremore similar, only the pairs of source cases that were judged to be similar according to a given similarity measure are selected in [9] and [11].", "startOffset": 543, "endOffset": 547}, {"referenceID": 3, "context": "Therefore, in [5], the authors decided to include in the training set all the pairs of distinct source cases of the case base.", "startOffset": 14, "endOffset": 17}, {"referenceID": 0, "context": "For example, in Creek, an approach that combines case-based and model-based methods, general knowledge is acquired through interactions with the user [1].", "startOffset": 150, "endOffset": 153}, {"referenceID": 10, "context": "It must be remarked that adaptation cases can either be built automatically by adaptation of previous adaptation cases or manually by a user who interactively builds the adaptation case in response to a problem by selecting the appropriates operations to perform [12].", "startOffset": 263, "endOffset": 267}, {"referenceID": 8, "context": "Chef is obviously related to thework described here [10].", "startOffset": 52, "endOffset": 56}], "year": 2013, "abstractText": "Adaptation has long been considered as the Achilles\u2019 heel of case-based reasoning since it requires some domain-specific knowledge that is difficult to acquire. In this paper, two strategies are combined in order to reduce the knowledge engineering cost induced by the adaptation knowledge (AK) acquisition task: AK is learned from the case base by the means of knowledge discovery techniques, and the AK acquisition sessions are opportunistically triggered, i.e., at problem-solving time.", "creator": "LaTeX with hyperref package"}}}