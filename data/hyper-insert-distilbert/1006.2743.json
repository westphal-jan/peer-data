{"id": "1006.2743", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Jun-2010", "title": "Global Optimization for Value Function Approximation", "abstract": "existing value _ function approximation methods have both been successfully being used in many applications, but they though often naturally lack useful a least priori error bounds. we propose a new approximate matrix bilinear programming methodology formulation scheme of value = function approximation, methodology which additionally employs global optimization. the formulation provides strong validity a priori guarantees on predicting both that robust and expected generalized policy loss approximation by minimizing poorly specific norms of evaluating the bellman residual. thus solving a given bilinear program during optimally algorithms is np - hard, but addressing this promise is unavoidable often because considering the estimates bellman - residual linear minimization itself consistently is indeed np - hard. we describe variously and analyze jointly both classical optimal minimum and partially approximate algorithms for simultaneously solving objective bilinear calculation programs. setting the analysis further shows that executing this algorithm offers a convergent generalization of approximate memory policy iteration. we also briefly analyze the characteristic behavior of explicit bilinear programming programming algorithms especially under incomplete samples. moreover finally, we critically demonstrate that the proposed initial approach rules can consistently minimize the bellman residual on weakly simple benchmark problems.", "histories": [["v1", "Mon, 14 Jun 2010 15:38:41 GMT  (550kb,D)", "http://arxiv.org/abs/1006.2743v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["marek petrik", "shlomo zilberstein"], "accepted": false, "id": "1006.2743"}, "pdf": {"name": "1006.2743.pdf", "metadata": {"source": "CRF", "title": "Global Optimization for Value Function Approximation Global Optimization for Value Function Approximation", "authors": ["Marek Petrik"], "emails": ["petrik@cs.umass.edu", "shlomo@cs.umass.edu"], "sections": [{"heading": null, "text": "Keywords: value function approximation, Markov decision processes, reinforcement learning, approximate dynamic programming"}, {"heading": "1. Motivation", "text": "Solving large Markov Decision Problems (MDPs) is a very useful, but computationally challenging problem addressed widely in the AI literature, particularly in the area of reinforcement learning. It is widely accepted that large MDPs can only be solved approximately. The commonly used approximation methods can be divided into three broad categories: 1) policy search, which explores a restricted space of all policies, 2) approximate dynamic programming, which searches a restricted space of value functions, and 3) approximate linear programming, which approximates the solution using a linear program. While all of these methods have achieved impressive results in many application domains, they have significant limitations.\nPolicy search methods rely on local search in a restricted policy space. The policy may be represented, for example, as a finite-state controller (Stanley and Miikkulainen, 2004) or as a greedy policy with respect to an approximate value function (Szita and Lorincz, 2006). Policy search methods have achieved impressive results in such domains as Tetris (Szita and\nar X\niv :1\n00 6.\n27 43\nv1 [\ncs .A\nI] 1\n4 Ju\nLorincz, 2006) and helicopter control (Abbeel et al., 2006). However, they are notoriously hard to analyze. We are not aware of any established theoretical guarantees regarding the quality of the solution.\nApproximate dynamic programming (ADP) methods iteratively approximate the value function (Bertsekas and Ioffe, 1997; Powell, 2007; Sutton and Barto, 1998). They have been extensively analyzed and are the most commonly used methods. However, approximate dynamic programming methods typically do not converge and they only provide weak guarantees of approximation quality. The approximation error bounds are usually expressed in terms of the worst-case approximation of the value function over all policies (Bertsekas and Ioffe, 1997). In addition, most available bounds are with respect to the L\u221e norm, while the algorithms often minimize the L2 norm. While there exist some L2-based bounds (Munos, 2003), they require values that are difficult to obtain.\nApproximate linear programming (ALP) uses a linear program to compute the approximate value function in a particular vector space (de Farias, 2002). ALP has been previously used in a wide variety of settings (Adelman, 2004; de Farias and van Roy, 2004; Guestrin et al., 2003). Although ALP often does not perform as well as ADP, there have been some recent efforts to close the gap (Petrik and Zilberstein, 2009). ALP has better theoretical properties than ADP and policy search. It is guaranteed to converge and return the closest L1-norm approximation v\u0303 of the optimal value function v\n\u2217 up to a multiplicative factor. However, the L1 norm must be properly weighted to guarantee a small policy loss, and there is no reliable method for selecting appropriate weights (de Farias, 2002).\nTo summarize, the existing reinforcement learning techniques often provide good solutions, but typically require significant domain knowledge (Powell, 2007). The domain knowledge is needed partly because useful a priori error bounds are not available, as mentioned above. Our goal is to develop a more reliable method that is guaranteed to minimize bounds on the policy loss in various settings.\nWe present new formulations of value function approximation that provably minimize bounds on the policy loss using global optimization. Most of these bounds do not rely on values that are hard to obtain, unlike, for example, approximate linear programming. The focus of the work is on two broad bound minimization approaches: 1) minimizing L\u221e bounds, and 2) minimizing weighted L1 norm bounds on the policy loss. In some sense, the formulations minimize the bounds by unifying policy value-function search methods.\nWe start with a description of the framework and notation in Section 2 and the description of value function approximation in Section 3. Then, in Section 4, we describe the proposed approximate bilinear programming (ABP) formulations. Bilinear programs are typically solved using global optimization methods, which we briefly discuss in Section 5. A drawback of the bilinear formulation is that solving bilinear programs may require exponential time. We also show in Section 5 that this is unavoidable, because minimizing the approximation error bound is in fact NP-hard.\nIn practice, only sampled versions of ABPs are often solved. While a thorough treatment of sampling is beyond the scope of this paper, we examine the impact of sampling and establish some guarantees in Section 6. Unlike classical sampling bounds on approximate linear programming, we describe bounds that apply to the worst-case error. Section 7 shows that ABP is related to other approximate dynamic programming methods, such as approximate linear programming and policy iteration. Section 8 demonstrates the applicability\nof ABP using common reinforcement learning benchmark problems. Technical proofs are provided in the appendix.\nThe general setting considered in this paper is a restriction of reinforcement learning. Reinforcement learning methods can use samples without requiring a model of the environment. The methods we propose can also be based on samples, but they require additional structure. In particular, they require that all or most actions are sampled for every state. Such samples can be easily generated when a model of the environment is available."}, {"heading": "2. Framework and Notation", "text": "This section formally defines the framework and the notation we use. We also define Markov decision processes and the approximation errors involved. Markov decision processes come in many flavors based on the objective function that is optimized. This work focuses on the infinite horizon discounted MDPs, which are defined as follows.\nDefinition 1 (e.g. (Puterman, 2005)). A Markov Decision Process is a tuple (S,A, P, r, \u03b1). Here, S is a finite set of states, A is a finite set of actions, P : S \u00d7 A \u00d7 S 7\u2192 [0, 1] is the transition function (P (s, a, s\u2032) is the probability of transiting to state s\u2032 from state s given action a), and r : S\u00d7A 7\u2192 R+ is a reward function. The initial distribution is: \u03b1 : S 7\u2192 [0, 1], such that \u2211 s\u2208S \u03b1(s) = 1.\nThe goal is to find a sequence of actions that maximizes \u03b3-discounted discounted cumulative sum of the rewards, also called the return. A solution of a Markov decision process is a policy, which is defined as follows.\nDefinition 2. A deterministic stationary policy \u03c0 : S 7\u2192 A assigns an action to each state of the Markov decision process. A stochastic policy policy \u03c0 : S \u00d7A 7\u2192 [0, 1]. The set of all stochastic stationary policies is denoted as \u03a0 and satisfies \u2211 a\u2208A \u03c0(s, a) = 1.\nGeneral non-stationary policies may take different actions in states in different timesteps. We limit our treatment to stationary policies, since for infinite-horizon MDPs there exists an optimal stationary and deterministic policy. We also consider stochastic policies because they are more convenient to use in some settings that we consider.\nThe transition and reward functions for a given policy are denoted by P\u03c0 and r\u03c0. The value function update for a policy \u03c0 is denoted by L\u03c0, and the Bellman operator is denoted by L. That is:\nL\u03c0v = P\u03c0v + r\u03c0 Lv = max \u03c0\u2208\u03a0 L\u03c0v.\nThe optimal value function, denoted v\u2217, satisfies v\u2217 = Lv\u2217. We assume a vector representation of the policy \u03c0 \u2208 R|S||A|. The variables \u03c0 are defined for all state-action pairs and represent policies. That is \u03c0(s, a) represents the probability of taking action a \u2208 A in state s \u2208 S. The space of all correct (stochastic) policies can be represented using a set of linear equations:\u2211\na\u2208A \u03c0(s, a) = 1 \u2200s \u2208 S\n\u03c0(s, a) \u2265 0 \u2200s \u2208 S, \u2200a \u2208 A\nThese inequalities can be represented using matrix notation as follows.\nB\u03c0 = 1\n\u03c0 \u2265 0,\nwhere the matrix B : |S| \u00d7 (|S| \u00b7 |A|) is defined as follows.\nB(s\u2032, (s, a)) =\n{ 1 s = s\u2032\n0 otherwise .\nWe use 0 and 1 to denote vectors of all zeros or ones of the appropriate size respectively. The symbol I denotes an identity matrix of the appropriate dimension.\nIn addition, a policy \u03c0 induces a state visitation frequency u\u03c0 : S \u2192 R, defined as follows:\nu\u03c0 = ( I\u2212 \u03b3PT\u03c0 )\u22121 \u03b1.\nThe return of a policy depends on the state-action visitation frequencies and \u03b1Tv\u03c0 = r Tu\u03c0. The optimal state-action visitation frequency is u\u03c0\u2217 . State-action visitation frequency u : S \u00d7A \u2192 R is defined for all states and actions. Notice the missing subscript. We use ua to denote the part of u that corresponds to action a \u2208 A. State-action visitation frequencies must satisfy: \u2211\na\u2208A (I\u2212 \u03b3P )Tua = \u03b1.\nTo formulate approximate linear and bilinear programs, it is necessary to restrict the value functions so that their Bellman residuals are non-negative (or at least bounded from below). We call such value functions transitive-feasible and define them as follows.\nDefinition 3. A value function is transitive-feasible when v \u2265 Lv. The set of transitivefeasible value functions is:\nK = {v \u2208 R|S| v \u2265 Lv}.\nGiven some \u2265 0, the set of -transitive-feasible value functions is:\nK( ) = {v \u2208 R|S| v \u2265 Lv \u2212 1}.\nNotice that the optimal value function v\u2217 is transitive-feasible. The following lemma summarizes the key property of transitive-feasible value functions:\nLemma 4. Transitive feasible value functions form an upper bound on the optimal value function. If v \u2208 K( ) is an -transitive-feasible value function, then\nv \u2265 v\u2217 \u2212 1\u2212 \u03b31."}, {"heading": "3. Value Function Approximation", "text": "This section describes the basic methods for value function approximation. MDPs used in practical applications are often too large for the optimal policy to be computed precisely. In these cases, we first calculate an approximate value function v\u0303 and then take the greedy policy \u03c0 with respect to it. The quality of such a policy can be characterized using its value function v\u03c0 in one of the following two main ways.\nDefinition 5 (Policy Loss). Let \u03c0 be a policy computed from value function approximation. The expected policy loss measures the expected loss of \u03c0, defined as follows:\n\u2016v\u2217 \u2212 v\u03c0\u20161,\u03b1 = \u03b1Tv\u2217 \u2212 \u03b1Tv\u03c0 (1)\nwhere \u2016x\u20161,c denotes the weighted L1 norm: ||x\u20161,c = \u2211\ni |c(i)x(i)|. The robust policy loss measures the worst-case loss of \u03c0, defined as follows:\n\u2016v\u2217 \u2212 v\u03c0\u2016\u221e = max s\u2208S |v\u2217(s)\u2212 v\u03c0(s)| (2)\nThe expected policy loss captures the total loss of discounted reward when following the policy \u03c0 instead of the optimal policy assuming the initial distribution. The robust policy loss ignores the initial distribution and, in some sense, measures the difference for the worst-case initial distribution.\nA set of state features is a necessary component of value function approximation. These features must be supplied in advance and must capture the essential structure of the problem. The features are defined by mapping each state s to a vector \u03c6(s) of features. We denote \u03c6i : S \u2192 R to be a function that maps states to the value of feature i:\n\u03c6i(s) = (\u03c6(s))i.\nThe desirable properties of the features depend strongly on the algorithm, samples, and attributes of the problem; the tradeoffs are not yet fully understood. The function \u03c6i can also be treated as a vector, similarly to the value function v.\nValue function approximation methods compute value functions that can be represented using the state features. We call such value functions representable and define them below.\nDefinition 6. Given a convex polyhedral setM\u2286 R|S|, a value function v is representable (in M) if v \u2208M.\nMany methods that compute a value function based on a given set of features have been developed, such as neural networks and genetic algorithms (Bertsekas and Ioffe, 1997). Most of these methods are extremely hard to analyze, computationally complex, and hard to use. Moreover, these complex methods do not satisfy the convexity assumption in Definition 6. A simpler, more common, method is linear value function approximation. In linear value function approximation, the value function of state s is represented as a linear combination of nonlinear features \u03c6(s). Linear value function approximation is easy to apply and analyze.\nLinear value function approximation can be expressed in terms of matrices as follows. Let the matrix \u03a6 : |S|\u00d7m represent the features for the state-space, where m is the number of features. The rows of the feature matrix \u03a6, also known as the basis, correspond to the\nfeatures of the states \u03c6(s). The feature matrix can be defined in one of the following two ways:\n\u03a6 = \u2212 \u03c6(s1) T \u2212\n\u2212 \u03c6(s2)T \u2212 ...  \u03a6 =  | |\u03c61 \u03c62 . . . | |  The value function v is then represented as v = \u03a6x and the set of representable functions is M = colspan (\u03a6).\nThe goal of value function approximation is not just to obtain a good value function v\u0303 but a policy with a small policy loss. Unfortunately, the policy loss of a greedy policy, as formulated in Definition 5, depends non-trivially on the approximate value function v\u0303. Often, the only reliable method of precisely computing the policy loss is to simulate the policy, which can be very costly. Value function approximation methods, therefore, optimize bounds on the policy loss.\nTheorem 7. [Robust Policy Loss, e.g. (Williams and Baird, 1994)] Let \u03c0 be a greedy policy with respect to a value function v\u0303. Then:\n\u2016v\u2217 \u2212 v\u03c0\u2016\u221e \u2264 2\n1\u2212 \u03b3 \u2016v\u0303 \u2212 Lv\u0303\u2016\u221e.\nIn addition, if v\u0303 \u2208 K, the policy loss is minimized for the greedy policy and:\n\u2016v\u2217 \u2212 v\u03c0\u2016\u221e \u2264 1\n1\u2212 \u03b3 \u2016v\u0303 \u2212 Lv\u0303\u2016\u221e.\nThe bounds above ignore the initial distribution and may often be overly conservative. We establish new bounds on the expected policy loss that also consider the initial distribution.\nTheorem 8. [Expected Policy Loss] Let \u03c0 be a greedy policy with respect to a value function v\u0303 and let the state-action visitation frequencies of \u03c0 be bounded as u \u2264 u\u03c0 \u2264 u\u0304. Then:\n\u2016v\u2217 \u2212 v\u03c0\u20161,\u03b1 = \u03b1Tv\u2217 \u2212 \u03b1Tv\u0303 + uT\u03c0 (v\u0303 \u2212 Lv\u0303) \u2264 \u03b1Tv\u2217 \u2212 \u03b1Tv\u0303 + uT [v\u0303 \u2212 Lv\u0303]\u2212 + u\u0304T [v\u0303 \u2212 Lv\u0303]+ .\nThe state-visitation frequency u\u03c0 depends on the initial distribution \u03b1, unlike v \u2217. In addition, when v\u0303 \u2208 K, the bound is: \u2016v\u2217 \u2212 v\u03c0\u20161,\u03b1 \u2264 \u2212\u2016v\u2217 \u2212 v\u0303\u20161,\u03b1 + \u2016v\u0303 \u2212 Lv\u0303\u20161,u\u0304 \u2016v\u2217 \u2212 v\u03c0\u20161,\u03b1 \u2264 \u2212\u2016v\u2217 \u2212 v\u0303\u20161,\u03b1 + 1\n1\u2212 \u03b3 \u2016v\u0303 \u2212 Lv\u0303\u2016\u221e\nHere we use [x]+ = max{x,0} componentwise.\nProof. The bound is derived as follows:\n\u03b1Tv\u2217 \u2212 \u03b1Tv\u03c0 = \u03b1Tv\u2217 \u2212 \u03b1Tv\u03c0 + (uT\u03c0 (I\u2212 \u03b3P\u03c0)\u2212 \u03b1T)v\u0303 = \u03b1Tv\u2217 \u2212 rT\u03c0u\u03c0 + (uT\u03c0 (I\u2212 \u03b3P\u03c0)\u2212 \u03b1T)v\u0303 = \u03b1Tv\u2217 \u2212 rT\u03c0u\u03c0 + uT\u03c0 (I\u2212 \u03b3P\u03c0)v\u0303 \u2212 \u03b1Tv\u0303 = \u03b1Tv\u2217 \u2212 \u03b1Tv\u0303 + uT\u03c0 ((I\u2212 \u03b3P\u03c0)v\u0303 \u2212 r\u03c0) = \u03b1Tv\u2217 \u2212 \u03b1Tv\u0303 + uT\u03c0 (v\u0303 \u2212 Lv\u0303) .\nWe used the fact that uT\u03c0 (I\u2212\u03b3P\u03c0)\u2212\u03b1T = 0, which follows from the definition of state-action visitation frequencies and that v\u2217 \u2265 v\u03c0. The inequalities for v\u0303 \u2208 K follow from Lemma 38, Lemma 43, and the trivial version of the Holder\u2019s inequality:\n\u03b1Tv\u2217 \u2212 \u03b1Tv\u0303 = \u2212\u2016v\u2217 \u2212 v\u0303\u20161,\u03b1 uT\u03c0 (v\u0303 \u2212 Lv\u0303) \u2264 \u2016u\u03c0\u20161 \u2016v\u0303 \u2212 Lv\u0303\u2016\u221e = 1\n1\u2212 \u03b3 \u2016v\u0303 \u2212 Lv\u0303\u2016\u221e\nNotice that the bounds in Theorem 8 can be minimized even without knowing the optimal v\u2217. The optimal value function v\u2217 is independent of the approximate value function v\u0303 and the greedy policy \u03c0 depends only on v\u0303.\nRemark 9. The bounds in Theorem 8 generalize the bounds established by de Farias (2002, Theorem 1.3), which state that whenever v \u2208 K:\n\u2016v\u2217 \u2212 v\u03c0\u20161,u \u2264 1 1\u2212 \u03b3 \u2016v \u2217 \u2212 v\u0303\u20161,(1\u2212\u03b3)u.\nThis bound is a special case of Theorem 8 because \u03b1Tv\u2217 \u2212 \u03b1Tv\u0303 \u2264 0 and:\n\u2016v\u0303 \u2212 Lv\u0303\u20161,u \u2264 \u2016v\u2217 \u2212 v\u0303\u20161,u \u2264 1 1\u2212 \u03b3 \u2016v \u2217 \u2212 v\u0303\u20161,(1\u2212\u03b3)u,\nfrom v\u2217 \u2264 Lv\u0303 \u2264 v\u0303. The proof of Theorem 8 also simplifies the proof of Theorem 1.3 in (de Farias, 2002).\nThe methods that we propose require the following standard assumption.\nAssumption 10. All multiples of the constant vector 1 are representable in M. That is, for all k \u2208 R we have that k1 \u2208M.\nNotice that the representation set M satisfies Assumption 10 when a first column of \u03a6 is 1. The impact of including the constant feature is typically negligible because adding a constant to the value function does not change the greedy policy.\nValue function approximation algorithms are typically variations of the exact algorithms for solving MDPs. Hence, they can be categorized as approximate value iteration, approximate policy iteration, and approximate linear programming. The ideas of approximate value iteration could be traced to Bellman (1957), which was followed by many additional research efforts (Bertsekas and Tsitsiklis, 1996; Sutton and Barto, 1998; Powell, 2007). Below, we only discuss approximate policy iteration and approximate linear programming, because they are the most closely related to our approach.\nApproximate policy iteration (API) is summarized in algorithm 1. The function Z(\u03c0) denotes the specific method used to approximate the value function for the policy \u03c0. The two most commonly used methods \u2014 Bellman residual approximation and least-squares approximation (Lagoudakis and Parr, 2003) \u2014 minimize the L2 norm of the Bellman residual.\nThe approximations based on minimizing L2 norm of the Bellman residual are common in practice since they are easy to compute and often lead to good results. Most theoretical analyses of API, however, assume minimization of the L\u221e norm of the Bellman residual:\nZ(\u03c0) \u2208 arg min v\u2208M \u2016(I\u2212 \u03b3P\u03c0)v \u2212 r\u03c0\u2016\u221e (3)\nAlgorithm 1: Approximate policy iteration, where Z(\u03c0) denotes a custom value function approximation for the policy \u03c0. 1 \u03c00, k \u2190 rand, 1 ; 2 while \u03c0k 6= \u03c0k\u22121 do 3 v\u0303k \u2190 Z(\u03c0k\u22121) ; 4 \u03c0k(s)\u2190 arg maxa\u2208A r(s, a) + \u03b3 \u2211 s\u2032\u2208S P (s, a, s\n\u2032)v\u0303k(s) \u2200s \u2208 S ; 5 k \u2190 k + 1 ;\nL\u221e-API is shown in algorithm 1, where Z(\u03c0) is calculated using the following program:\nmin \u03c6,v \u03c6 s.t. (I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 r\u03c0 \u2212(I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 \u2212r\u03c0 v \u2208M\n(4)\nWe are not aware of convergence or divergence proofs of L\u221e-API, and this analysis is beyond the scope of this paper. Theoretically, it is also possible to minimize the L1 norm of the Bellman residual, but we are not aware of any study of such an approximation.\nIn the above description of API, we assumed that the value function is approximated for all states and actions. This is impossible in practice due to the size of the MDP. Instead, API only relies on a subset of states and actions, provided as samples. API is not guaranteed to converge in general and its analysis is typically in terms of limit behavior. The limit bounds are often very loose. We discuss the performance of API and how it relates to approximate bilinear programming in more detail in Section 7.\nApproximate linear programming \u2014 a method for value function approximation \u2014 is based on the linear program formulation of exact MDPs:\nmin v \u2211 s\u2208S c(s)v(s)\ns.t. v(s)\u2212 \u03b3 \u2211 s\u2032\u2208S P (s\u2032, s, a)v(s\u2032) \u2265 r(s, a) \u2200(s, a) \u2208 (S,A) (5)\nWe use A as a shorthand notation for the constraint matrix and b for the right-hand side. The value c represents a distribution over the states, usually a uniform one. That is, \u2211\ns\u2208S c(s) = 1. The linear program (5) is often too large to be solved precisely, so it is approximated to get an approximate linear program by assuming that v \u2208 M (de Farias and van Roy, 2003), as follows:\nmin v\ncTv\ns.t. Av \u2265 b v \u2208M\n(ALP\u2013L1)\nThe constraint v \u2208 M denotes the approximation. To actually solve this linear program, the value function is represented as v = \u03a6x. Assumption 10 guarantees the feasibility of\nthe ALP. The optimal solution of the ALP, v\u0303, satisfies: v\u0303 \u2265 v\u2217. Therefore, the objective of (ALP\u2013L1) represents the minimization of \u2016v\u0303 \u2212 v\u2217\u20161,c (de Farias, 2002).\nApproximate linear programming is guaranteed to converge to a solution and minimize a weighted L1 norm on the solution quality.\nTheorem 11 (e.g. (de Farias, 2002)). Given Assumption 10, let v\u0303 be the solution of the approximate linear program (ALP\u2013L1). If c = \u03b1 then\n\u2016v\u2217 \u2212 v\u0303\u20161,\u03b1 \u2264 2 1\u2212 \u03b3 minv\u2208M \u2016v \u2217 \u2212 v\u2016\u221e.\nThe difficulty with the solution of ALP is that it is hard to derive guarantees on the policy loss based on the bounds in terms of the L1 norm; it is possible when the objective function c represents u\u0304, as Remark 9 shows. In addition, the constant 1/(1 \u2212 \u03b3) may be very large when \u03b3 is close to 1.\nApproximate linear programs are often formulated in terms of samples instead of the full formulation above. The performance guarantees are then based on analyzing the probability that a large number of constraints is violated. It is generally hard to translate the constraint violation bounds to bounds on the quality of the value function and the policy."}, {"heading": "4. Bilinear Program Formulations", "text": "This section shows how to formulate value function approximation as a separable bilinear program. Bilinear programs are a generalization of linear programs with an additional bilinear term in the objective function. A separable bilinear program consists of two linear programs with independent constraints and are fairly easy to solve and analyze.\nDefinition 12 (Separable Bilinear Program). A separable bilinear program in the normal form is defined as follows:\nmin w,x y,z\nsT1w + r T 1 x+ x TCy + rT2 y + s T 2 z\ns.t. A1x+B1w = b1 A2y +B2z = b2 w, x \u2265 0 y, z \u2265 0 (BP\u2013m)\nThe objective of the bilinear program (BP\u2013m) is denoted as f(w, x, y, z). We separate the variables using a vertical line and the constraints using different columns to emphasize the separable nature of the bilinear program. In this paper, we only use separable bilinear programs and refer to them simply as bilinear programs.\nWe present three different approximate bilinear formulations that minimize the following bounds on the approximate value function.\n1. Robust policy loss: Minimizes \u2016v\u2217 \u2212 v\u03c0\u2016\u221e by minimizing the bounds in Theorem 7:\nmin \u03c0\u2208\u03a0 \u2016v\u2217 \u2212 v\u03c0\u2016\u221e \u2264 min v\u2208M\n1\n1\u2212 \u03b3 \u2016v \u2212 Lv\u2016\u221e\n2. Expected policy loss: Minimizes \u2016v\u2217\u2212v)\u03c0\u20161,\u03b1 by minimizing the bounds in Theorem 8:\nmin \u03c0\u2208\u03a0 \u2016v\u2217 \u2212 v\u03c0\u20161,\u03b1 \u2264 \u03b1Tv\u2217 + min v\u2208M\n( \u2212\u03b1Tv\u0303 + 1 1\u2212 \u03b3 \u2016v \u2212 Lv\u2016\u221e )\nmin \u03c0\u2208\u03a0 \u2016v\u2217 \u2212 v\u03c0\u20161,\u03b1 \u2264 \u03b1Tv\u2217 + min v\u2208M\n( \u2212\u03b1Tv\u0303 + \u2016v \u2212 Lv\u2016u\u0304 ) .\n3. The sum of k largest errors: This formulation represents a hybrid between the robust and expected formulations. It is more robust than simply minimizing the expected performance but is not as sensitive to worst-case performance.\nThe appropriateness of each formulation depends on the particular circumstances of the domain. For example, minimizing robust bounds is advantageous when the initial distribution is not known and the performance must be consistent under all circumstances. On the other hand, minimizing expected bounds on the value function is useful when the initial distribution is known.\nIn the formulations described below, we initially assume that samples of all states and actions are used. This means that the precise version of the operator L is available. To solve large problems, the number of samples would be much smaller; either simply subsampled or reduced using the structure of the MDP. Reducing the number of constraints in linear programs corresponds to simply removing constraints. In approximate bilinear programs it also reduces the number of some variables, as Section 6 describes.\nThe formulations below denote the value function approximation generically by v \u2208M. That restricts the value functions to be representable using features. Representable value functions v can be replaced by a set of variables x as v = \u03a6x. This reduces the number of variables to the number of features."}, {"heading": "4.1 Robust Policy Loss", "text": "The solution of the robust approximate bilinear program minimizes the L\u221e norm of the Bellman residual \u2016v \u2212 Lv\u2016\u221e. This minimization can be formulated as follows.\nmin \u03c0 \u03bb,\u03bb\u2032,v\n\u03c0T\u03bb+ \u03bb\u2032\ns.t. B\u03c0 = 1 Av \u2212 b \u2265 0 \u03c0 \u2265 0 \u03bb+ \u03bb\u20321 \u2265 Av \u2212 b\n\u03bb, \u03bb\u2032 \u2265 0 v \u2208M\n(ABP\u2013L\u221e)\nAll the variables are vectors except \u03bb\u2032, which is a scalar. The matrix A represents constraints that are identical to the constraints in (ALP\u2013L1). The variables \u03bb correspond to all state-action pairs. These variables represent the Bellman residuals that are being minimized. This formulation offers the following guarantees.\nTheorem 13. Given Assumption 10, any optimal solution (\u03c0\u0303, v\u0303, \u03bb\u0303, \u03bb\u0303\u2032) of the approximate bilinear program (ABP\u2013L\u221e) satisfies:\n\u03c0\u0303T\u03bb\u0303+ \u03bb\u0303\u2032 = \u2016Lv\u0303 \u2212 v\u0303\u2016\u221e \u2264 min v\u2208K\u2229M \u2016Lv \u2212 v\u2016\u221e \u2264 2 min\nv\u2208M \u2016Lv \u2212 v\u2016\u221e\n\u2264 2(1 + \u03b3) min v\u2208M \u2016v \u2212 v\u2217\u2016\u221e.\nMoreover, there exists an optimal solution \u03c0\u0303 that is greedy with respect to v\u0303 for which the policy loss is bounded by:\n\u2016v\u2217 \u2212 v\u03c0\u0303\u2016\u221e \u2264 2\n1\u2212 \u03b3 ( min v\u2208M \u2016Lv \u2212 v\u2016\u221e ) .\nIt is important to note that the theorem states that solving the approximate bilinear program is equivalent to minimization over all representable value functions, not only the transitive-feasible ones. This follows by subtracting a constant vector 1 from v\u0303 to balance the lower bounds on the Bellman residual error with the upper ones. This reduces the Bellman residual by 1/2 without affecting the policy. Finally, note that whenever v\u2217 \u2208M, both ABP and ALP will return the optimal value function v\u2217.\nTo prove the theorem, we first define the following linear program, which solves for the L\u221e norm of the Bellman update L\u03c0 for fixed value function v and policy \u03c0.\nf1(\u03c0, v) = min \u03bb,\u03bb\u2032\n\u03c0T\u03bb+ \u03bb\u2032\ns.t. 1\u03bb\u2032 + \u03bb \u2265 Av \u2212 b \u03bb \u2265 0\n(6)\nThe linear program (6) corresponds to the bilinear program (ABP\u2013L\u221e) with a fixed policy \u03c0 and value function v.\nLemma 14. Let v \u2208 K be a transitive-feasible value function and let \u03c0 be a policy. Then:\nf1(\u03c0, v) \u2265 \u2016v \u2212 L\u03c0v\u2016\u221e,\nwith an equality for a deterministic policy \u03c0.\nProof. The dual of the linear program (6) is the following program.\nmax x xT(Av \u2212 b) s.t. x \u2264 \u03c0\n1Tx = 1\nx \u2265 0\n(7)\nNote that replacing 1Tx = 1 by 1Tx \u2264 1 preserves the properties of the linear program and would add an additional constraint in (ABP\u2013L\u221e): \u03bb\n\u2032 \u2265 0. First, we show that f1(\u03c0, v) \u2265 \u2016L\u03c0v \u2212 v\u2016\u221e. Because v is feasible in the approximate bilinear program (ABP\u2013L\u221e), Av \u2212 b \u2265 0 and v \u2265 Lv from Lemma 38. Let state s be the state in which t = \u2016L\u03c0v \u2212 v\u2016\u221e is achieved. That is:\nt = v(s)\u2212 \u2211 a\u2208A \u03c0(s, a)\n( r(s, a) +\n\u2211 s\u2032\u2208S \u03b3P (s\u2032, s, a)v(s\u2032)\n) .\nNow let x(s, a) = \u03c0(s, a) for all a \u2208 A. This is a feasible solution with value t, from the stochasticity of the policy and therefore a lower bound on the objective value.\nTo show the equality for a deterministic policy \u03c0, we show that f1(\u03c0, v) \u2264 \u2016Lv \u2212 v\u2016\u221e, using that \u03c0 \u2208 {0, 1}. Then let x\u2217 be an optimal solution of (7). Define the index of x\u2217 with the largest objective value as:\ni \u2208 arg max {i x\u2217(i)>0} (Av \u2212 b)(i).\nLet solution x\u2032(i) = 1 and x\u2032(j) = 0 for j 6= i, which is feasible since \u03c0(i) = 1. In addition:\n(Av \u2212 b)(i) = \u2016L\u03c0v \u2212 v\u2016\u221e.\nNow (x\u2217)T(Av \u2212 b) \u2264 (x\u2032)T(Av \u2212 b) = \u2016L\u03c0v \u2212 v\u2016\u221e, from the fact that i is the index of the largest element of the objective function.\nWhen the policy \u03c0 is fixed, the approximate bilinear program (ABP\u2013L\u221e) becomes the following linear program:\nf2(\u03c0) = min \u03bb,\u03bb\u2032,v\n\u03c0T\u03bb+ \u03bb\u2032\ns.t. Av \u2212 b \u2265 0 1\u03bb+ \u03bb\u2032 \u2265 Av \u2212 b \u03bb \u2265 0 v \u2208M\n(8)\nUsing Lemma 38 , this linear program corresponds to:\nf2(\u03c0) = min v\u2208M\u2229K f1(\u03c0, v).\nThen it is easy to show that:\nLemma 15. Given a policy \u03c0, let v\u0303 be an optimal solution of the linear program (8). Then:\nf2(\u03c0) = \u2016L\u03c0v\u0303 \u2212 v\u0303\u2016\u221e \u2264 min v\u2208M\u2229K \u2016L\u03c0v \u2212 v\u2016\u221e.\nWhen v is fixed, the approximate bilinear program (ABP\u2013L\u221e) becomes the following linear program:\nf3(v) = min \u03c0 f2(\u03c0, v) s.t. B\u03c0 = 1\n\u03c0 \u2265 0 (9)\nNote that the program is only meaningful if v is transitive-feasible and that the function f2 corresponds to a minimization problem.\nLemma 16. Let v \u2208M\u2229K be a transitive-feasible value function. There exists an optimal solution \u03c0\u0303 of the linear program (9) such that:\n1. \u03c0\u0303 represents a deterministic policy 2. L\u03c0\u0303v = Lv 3. \u2016L\u03c0\u0303v \u2212 v\u2016\u221e = min\u03c0\u2208\u03a0 \u2016L\u03c0v \u2212 v\u2016\u221e = \u2016Lv \u2212 v\u2016\u221e\nProof. The existence of an optimal \u03c0 that corresponds to a deterministic policy follows from Lemma 15, the correspondence between policies and values \u03c0, and the existence of a deterministic greedy policy.\nSince v \u2208 K, we have for some policy \u03c0 that:\nv \u2265 Lv = L\u03c0v \u2265 L\u03c0\u0303v.\nAssuming that L\u03c0\u0303 < Lv leads to a contradiction since \u03c0 is also a feasible solution in the linear program (9) and:\nv \u2212 L\u03c0\u0303 > v \u2212 Lv \u2016v \u2212 L\u03c0\u0303\u2016\u221e > \u2016v \u2212 Lv\u2016\u221e.\nThis proves the lemma.\nTheorem 13 now easily follows from the lemmas above.\nProof. Let v\u0304 be a value function with the minimal \u2016Lv\u0304\u2212v\u0304\u2016\u221e feasible in approximate bilinear program (ABP\u2013L\u221e), and let \u03c0\u0304 be a greedy policy with respect to v\u0304. Because v\u0304 \u2265 v\u2217, as Lemma 38 shows, we get:\nt = \u2016Lv\u0304 \u2212 v\u0304\u2016\u221e = \u2016Lv\u0304v\u0304 \u2212 v\u0304\u2016\u221e.\nLet f\u2217 be the optimal objective value of (ABP\u2013L\u221e). Because both v\u0304 and \u03c0\u0304 are feasible in (ABP\u2013L\u221e), we have that f\n\u2217 \u2264 t. Now, assume that v\u0303 is an optimal solution of (ABP\u2013L\u221e) with an objective value f\u0303 = \u2016Lv\u0303 \u2212 v\u0303\u2016\u221e > t. Then, from Lemma 16, f\u0303 > t \u2265 f\u2217, which contradicts the optimality of v\u0303.\nTo show that the optimal policy is deterministic and greedy, let \u03c0\u2217 be the optimal policy. Then consider the state s for which \u03c0\u0303 does not define a deterministic greedy action. From the definition of greedy action a\u0304:\n(La\u0304v\u0303)(s) \u2264 (L\u03c0\u0303v\u0303)(s).\nFrom the bilinear formulation (ABP\u2013L\u221e), it is easy to show that there is an optimal solution such that:\n(Lav\u0303)(s) \u2264 \u03bb\u0303\u2032 + \u03bb\u0303(s, a) \u03bb\u0303(s, a\u0304) \u2264 \u03bb\u0303(s, a).\nThen setting \u03c0\u0303(s, a\u0304) = 1 and all other action probabilities to 0, the difference in the objective value function: \u03bb\u0303(s, a\u0304)\u2212 \u2211 a\u2208A \u03bb\u0303(s, a) \u2264 0.\nTherefore, the objective function for the deterministic greedy policy does not increase. The remainder of the theorem follows directly from Proposition 40, Proposition 41, and Proposition 42. The bounds on the policy loss then follow directly from Theorem 7."}, {"heading": "4.2 Expected Policy Loss", "text": "This section describes bilinear programs that minimize expected policy loss for a given initial distribution \u2016v \u2212 Lv\u20161,\u03b1. The initial distribution can be used to derive tighter bounds on the policy loss. We describe two formulations. They respectively minimize an L\u221e and a weighted L1 norm on the Bellman residual.\nThe expected policy loss can be minimized by solving the following bilinear formulation.\nmin \u03c0 \u03bb,\u03bb\u2032,v \u03c0T\u03bb+ \u03bb\u2032 \u2212 (1\u2212 \u03b3)\u03b1Tv s.t. B\u03c0 = 1 Av \u2212 b \u2265 0\n\u03c0 \u2265 0 \u03bb+ \u03bb\u20321 \u2265 Av \u2212 b \u03bb, \u03bb\u2032 \u2265 0 v \u2208M\n(ABP\u2013L1)\nNotice that this formulation is identical to the bilinear program (ABP\u2013L\u221e) with the exception of the term \u2212(1\u2212 \u03b3)\u03b1Tv.\nTheorem 17. Given Assumption 10, any optimal solution (\u03c0\u0303, v\u0303, \u03bb\u0303, \u03bb\u0303\u2032) of the approximate bilinear program (ABP\u2013L1) satisfies:\n1 1\u2212 \u03b3 ( \u03c0\u0303T\u03bb\u0303+ \u03bb\u0303\u2032 ) \u2212 \u03b1Tv\u0303 = 1 1\u2212 \u03b3 \u2016Lv\u0303 \u2212 v\u0303\u2016\u221e \u2212 \u03b1 Tv \u2264 min v\u2208K\u2229M ( 1 1\u2212 \u03b3 \u2016Lv \u2212 v\u2016\u221e \u2212 \u03b1 Tv ) \u2264 min\nv\u2208M\n( 1\n1\u2212 \u03b3 \u2016Lv \u2212 v\u2016\u221e \u2212 \u03b1 Tv ) Moreover, there exists an optimal solution \u03c0\u0303 that is greedy with respect to v\u0303 for which the policy loss is bounded by:\n\u2016v\u2217 \u2212 v\u03c0\u0303\u20161,\u03b1 \u2264 2\n1\u2212 \u03b3 ( min v\u2208M 1 1\u2212 \u03b3 \u2016Lv \u2212 v\u2016\u221e \u2212 \u2016v \u2217 \u2212 v\u20161,\u03b1 ) .\nNotice that the bound in this theorem is tighter than the one in Theorem 13. In particular, \u2016v\u2217 \u2212 v\u0303\u20161,\u03b1 > 0, unless the solution of the ABP is the optimal value function.\nProof. The proof of the theorem is almost identical to the proof of Theorem 13 with two main differences. First, the objective function of (ABP\u2013L1) is insensitive to adding a constant to the value function:\n\u2016(v\u0303 + k1)\u2212 L(v + k1)\u2016\u221e \u2212 \u03b1T(v + k1) = \u2016v\u0303 \u2212 Lv\u2016\u221e \u2212 \u03b1Tv.\nHence the missing factor 2 when going from minimization over K\u2229M to minimization over M. The second difference is in the derivation of the bound on the policy loss, which follows directly from Theorem 8.\nThe bilinear program formulation in (ABP\u2013L1) can be further strengthened when an upper bound on the state-visitation frequencies is available.\nmin \u03c0 \u03bb,v \u03c0TU\u03bb\u2212 \u03b1Tv s.t. B\u03c0 = 1 Av \u2212 b \u2265 0\n\u03c0 \u2265 0 \u03bb \u2265 Av \u2212 b \u03bb \u2265 0 v \u2208M\n(ABP\u2013U)\nHere U : |S| \u00b7 |A| \u00d7 |S| \u00b7 |A| is a matrix that maps a policy to bounds on state-action visitation frequencies. It must satisfy that:\n\u03c0(s, a) = 0\u21d2 (\u03c0TU)(s, a) = 0 \u2200s \u2208 S \u2200a \u2208 A.\nRemark 18. One simple option is to have U represent a diagonal matrix of u\u0304, where u\u0304 is the bound for all policies \u03c0 \u2208 \u03a0. That is:\nU((s, a), (s\u2032, a\u2032)) =\n{ u\u0304(s) s\u2032 = s\n0 otherwise \u2200s, s\u2032 \u2208 S a, a\u2032 \u2208 A.\nThe formal guarantees for this formulation are as follows. Theorem 19. Given Assumption 10 and that for all \u03c0 \u2208 \u03a0 : \u2211a\u2208A(\u03c0TU)(s, a) \u2265 uT\u03c0 (s), any optimal solution (\u03c0\u0303, v\u0303, \u03bb\u0303, \u03bb\u0303\u2032) of the bilinear program (ABP\u2013U) then satisfies:\n\u03c0\u0303TU\u03bb\u0303\u2212 \u03b1Tv\u0303 = \u2016v\u0303 \u2212 Lv\u0303\u2016u\u0304 \u2212 \u03b1Tv\u0303 \u2264 min v\u2208K\u2229M\n( \u2016v \u2212 Lv\u2016u\u0304 \u2212 \u03b1Tv ) .\nAssuming that U is defined as in Remark 18, there exists an optimal solution \u03c0\u0303 that is greedy with respect to v\u0303 and:\n\u2016v\u2217 \u2212 v\u03c0\u0303\u20161,\u03b1 \u2264 min v\u2208M\u2229K\n( \u2016v \u2212 Lv\u20161,u\u0304(v) \u2212 \u2016v\u2217 \u2212 v\u20161,\u03b1 ) .\nHere, u\u0304(v) represents an upper bound on the state-action visitation frequencies for a policy greedy with respect to value function v.\nUnlike Theorem 13 and Theorem 17, the bounds in this theorem do not guarantee that the solution quality does not degrade by restricting the value function to be transitivefeasible.\nTo prove the theorem we first define the following linear program that solves for the L1 norm of the Bellman update L\u03c0 for a value function v.\nf1(\u03c0, v) = min \u03bb,\u03bb\u2032\n\u03c0TU\u03bb\ns.t. 1\u03bb\u2032 + \u03bb \u2265 Av \u2212 b \u03bb \u2265 0\n(10)\nThe linear program (6) corresponds to the bilinear program (ABP\u2013U) with a fixed policy \u03c0 and value function v. Notice, in particular, that \u03b1Tv is a constant.\nLemma 20. Let value function v be feasible in the bilinear program (ABP\u2013U), and let \u03c0 be an arbitrary policy. Then:\nf1(\u03c0, v) \u2265 \u2016L\u03c0v \u2212 v\u20161,u\u0304,\nwith an equality for a deterministic policy.\nProof. The dual of the linear program (10) program is the following.\nmax x xT(Av \u2212 b) s.t. x \u2264 UT\u03c0\nx \u2265 0 (11)\nWe have that f1(\u03c0, v) \u2265 \u2016L\u03c0v \u2212 v\u20161,u\u0304 since x = UT\u03c0 is a feasible solution. To show the equality for a deterministic policy \u03c0, let x\u2217 be an optimal solution of linear program (11). Since Av \u2265 b and U is non-negative, an optimal solution satisfies x = UT\u03c0. The optimal value of the linear program thus corresponds to the definition of the weighted L1 norm.\nThe proof of Theorem 19 is similar to the proof of Theorem 13, but using Theorem 8 instead of Theorem 7 to bound the policy loss. The existence of a deterministic and greedy optimal solution \u03c0\u0303 follows also like Theorem 13, omitting \u03bb\u2032 and weighing \u03bb by u\u0304."}, {"heading": "4.3 Hybrid Formulation", "text": "While the robust bilinear formulation (ABP\u2013L\u221e) guarantees to minimize the robust approximation error it may be overly pessimistic. The bilinear program (ABP\u2013U), on the other hand, optimizes the average performance, but does not provide strong guarantees. It is possible to combine the advantages (and disadvantaged) of these programs using a hybrid formulation. The hybrid formulation minimizes the hybrid norm of the Bellman residual, defined as:\n\u2016x\u2016k,c = max {y 1Ty=k,1\u2265y\u22650} n\u2211 i=1 y(i)c(i)|x(i)|,\nwhere n is the length of vector x and c \u2265 0. It is easy to show that this norm represents the c-weighted L1 norm of the k largest components of the vector. As such, it is more robust than the plain L1 norm, but is not as sensitive to outliers as the L\u221e norm. Notice that the solution may be fractional when k /\u2208 Z \u2014 that is, some elements are counted only partially.\nThe bilinear program that minimizes the hybrid norm is defined as follows.\nmin \u03c0 \u03bb,\u03bb\u2032,v\n\u03c0TU\u03bb+ k\u03bb\u2032\ns.t. B\u03c0 = 1 Av \u2212 b \u2265 0 \u03c0 \u2265 0 \u03bb+ \u03bb\u2032U\u221211 \u2265 Av \u2212 b\n\u03bb, \u03bb\u2032 \u2265 0 v \u2208M\n(ABP\u2013h)\nHere U is a matrix that maps a policy to bounds on state-action visitation frequencies, for example, as defined in Remark 18.\nTheorem 21. Given Assumption 10 and U that is defined as in Remark 18, any optimal solution (\u03c0\u0303, v\u0303, \u03bb\u0303, \u03bb\u0303\u2032) of (ABP\u2013h) then satisfies:\n\u03c0\u0303TU\u03bb\u0303+ k\u03bb\u0303\u2032 = \u2016Lv\u0303 \u2212 v\u0303\u2016k,u\u0304(\u03c0\u0303) \u2264 min v\u2208M\u2229K \u2016Lv\u0303 \u2212 v\u0303\u2016k,u\u0304(v).\nHere, u\u0304(v) represents the upper bound on the state-action visitation frequencies for policy greedy with respect to value function v.\nThe implication of these bounds on the policy loss is beyond the scope of this paper, but it is likely that some form of policy loss bounds can be developed.\nThe proof of the theorem is almost identical to the proof of Theorem 13 lemma. We first define the following linear program, which solves for the required norm of the Bellman update L\u03c0 for value function v and policy \u03c0.\nf1(\u03c0, v) = min \u03bb,\u03bb\u2032\n\u03c0TU\u03bb+ k\u03bb\u2032\ns.t. \u03bb\u2032U\u221211 + \u03bb \u2265 Av \u2212 b \u03bb, \u03bb\u2032 \u2265 0\n(12)\nThe linear program (12) corresponds to the bilinear program (ABP\u2013h) with a fixed policy \u03c0 and value function v.\nLemma 22. Let v \u2208 K be a transitive-feasible value function and let \u03c0 be a policy and U be defined as in Remark 18. Then:\nf1(\u03c0, v) \u2265 \u2016v \u2212 L\u03c0v\u2016k,u\u0304,\nwith an equality for a deterministic policy \u03c0.\nProof. The dual of the linear program (6) program is the following.\nmax x xT(Av \u2212 b) s.t. x \u2264 UT\u03c0\n1T ( UT )\u22121\nx \u2264 k x \u2265 0\n(13)\nFirst, change the variables in the linear program to x = UTz to get:\nmax z zTU(Av \u2212 b) s.t. z \u2264 \u03c0\n1Tz \u2264 k z \u2265 0\n(14)\nusing the fact that U is diagonal and positive.\nThe norm\u2016L\u03c0v \u2212 v\u2016k,c can be expressed as the following linear program:\nmax y yTXU(Av \u2212 b) s.t. y \u2264 1\n1Ty \u2264 k y \u2265 0\n(15)\nHere, the matrix X : |S| \u00d7 |S| \u00b7 |A| selects the subsets of the Bellman residuals that correspond the the policy as defined:\nX(s, (s\u2032, a\u2032)) =\n{ \u03c0(s\u2032, a\u2032) when s = s\u2032\n0 otherwise .\nIt is easy to shows that v \u2212 L\u03c0v = X(Av \u2212 b). Note that XU = UX from the definition of U .\nClearly, when \u03c0 \u2208 {0, 1} is deterministic the linear programs (14) and (15) are identical. When the policy \u03c0 is stochastic, assume an optimal solution y of (15) and let z = XTy. Then, z is feasible in (14) with the identical objective value, which shows the inequality."}, {"heading": "5. Solving Bilinear Programs", "text": "This section describes methods for solving approximate bilinear programs. Bilinear programs can be easily mapped to other global optimization problems, such as mixed integer linear programs (Horst and Tuy, 1996). We focus on a simple iterative algorithm for solving bilinear programs approximately, which also serves as a basis for many optimal algorithms.\nSolving a bilinear program is an NP-complete problem (Bennett and Mangasarian, 1992). The membership in NP follows from the finite number of basic feasible solutions of the individual linear programs, each of which can be checked in polynomial time. The NP-hardness is shown by a reduction from the SAT problem.\nThere are two main approaches to solving bilinear programs optimally. In the first approach, a relaxation of the bilinear program is solved. The solution of the relaxed problem represents a lower bound on the optimal solution. The relaxation is then iteratively refined, for example by adding cutting plane constraints, until the solution becomes feasible. This is a common method used to solve integer linear programs. The relaxation of the bilinear program is typically either a linear or semi-definite program (Carpara and Monaci, 2009).\nIn the second approach, feasible, but suboptimal, solutions of the bilinear program are calculated approximately. The approximate algorithms are usually some variation of algorithm 2. The bilinear program formulation is then refined \u2014 using concavity cuts (Horst and Tuy, 1996) \u2014 to eliminate previously computed feasible solutions and solved again. This procedure can be shown to find the optimal solution by eliminating all suboptimal feasible solutions.\nThe most common and simplest approximate algorithm for solving bilinear programs is algorithm 2. This algorithm is shown for the general bilinear program (BP\u2013m), where f(w, x, y, z) represents the objective function. The minimizations in the algorithm are linear\nAlgorithm 2: Iterative algorithm for solving (BP\u2013m) 1 (x0, w0)\u2190 random ; 2 (y0, z0)\u2190 arg miny,z f(w0, x0, y, z) ; 3 i\u2190 1 ; 4 while yi\u22121 6= yi or xi\u22121 6= xi do 5 (yi, zi)\u2190 arg min{y,z A2y+B2z=b2 y,z\u22650} f(wi\u22121, xi\u22121, y, z) ; 6 (xi, wi)\u2190 arg min{x,w A1x+B1w=b1 x,w\u22650} f(w, x, yi, zi) ; 7 i\u2190 i+ 1 8 return f(wi, xi, yi, zi)\nprograms which can be easily solved. Interestingly, as we will show in Section 7, algorithm 2 applied to ABP generalizes a version of API.\nWhile algorithm 2 is not guaranteed to find an optimal solution, its empirical performance is often remarkably good (Mangasarian, 1995). Its basic properties are summarized by the following proposition.\nProposition 23 (e.g. (Bennett and Mangasarian, 1992)). algorithm 2 is guaranteed to converge, assuming that the linear program solutions are in a vertex of the optimality simplex. In addition, the global optimum is a fixed point of the algorithm, and the objective value monotonically improves during execution.\nThe proof is based on the finite count of the basic feasible solutions of the individual linear programs. Because the objective function does not increase in any iteration, the algorithm will eventually converge.\nalgorithm 2 can be further refined in case of approximate bilinear programs. For example, the constraint v \u2208 M in the bilinear programs serves just to simplify the bilinear program and a value function that violates it may still be acceptable. The following proposition motivates the construction of a new value function from two transitive-feasible value functions.\nProposition 24. Let v\u03031 and v\u03032 be feasible value functions in (ABP\u2013L\u221e). Then the value function v\u0303(s) = min{v\u03031(s), v\u03032(s)} is also feasible in bilinear program (ABP\u2013L\u221e). Therefore v\u0303 \u2265 v\u2217 and\n\u2016v\u2217 \u2212 v\u0303\u2016\u221e \u2264 min {\u2016v\u2217 \u2212 v\u03031\u2016\u221e, \u2016v\u2217 \u2212 v\u03032\u2016\u221e} .\nThe proof of the proposition is based on Jensen\u2019s inequality and is provided in the appendix. Note that v\u0303 may have a greater Bellman residual than either v\u03031 or v\u03032.\nProposition 24 can be used to extend algorithm 2 when solving ABPs. One option is to take the state-wise minimum of values from multiple random executions of algorithm 2, which preserves the transitive feasibility of the value function. However, the increasing number of value functions used to obtain v\u0303 also increases the potential sampling error."}, {"heading": "6. Sampling Guarantees", "text": "In most practical problems, the number of states is too large to be explicitly enumerated. Even though the value function is restricted to be representable, the problem cannot be solved. The usual approach is to sample a limited number of states, actions, and their transitions to approximately calculate the value function. This section shows basic properties of the samples that can provide guarantees of the solution quality with incomplete samples.\nFirst, we show a formal definition of the samples and then show how to use them. The simplest samples are defined as follows.\nDefinition 25. One-step simple samples are defined as:\n\u03a3\u0303 \u2286 {(s, a, (s1 . . . sn), r(s, a)) s, s\u2032 \u2208 S, a \u2208 A},\nwhere s1 . . . sn are selected i.i.d. from the distribution P (s, a).\nMore informative samples include the full distribution instead of samples from the distribution. While these samples are often unavailable in practice, they are useful in the theoretical analysis of sampling issues.\nDefinition 26. One-step samples with expectation are defined as follows:\n\u03a3\u0304 \u2286 {(s, a, P (s, a), r(s, a)) s \u2208 S, a \u2208 A}.\nMembership a state in the samples is denoted simply as s \u2208 \u03a3 or (s, a) \u2208 \u03a3 with the remaining variables, such as r(s, a) considered to be available implicitly.\nThe sampling models may vary significantly in different domains. The focus of this work is on problems with either a fixed set of available samples or a domain model. Therefore, we do not analyze methods for gathering samples. We also do not assume that the samples come from previous executions, but rather from a deliberate sample-gathering process.\nThe samples are used to approximate the Bellman operator and the set of transitivefeasible value functions.\nDefinition 27. The sampled Bellman operator and the corresponding set of sampled transitive-feasible functions are defined as:\n(L\u0304(v))(s\u0304) = max {a (s\u0304,a)\u2208\u03a3\u0304} r(s\u0304, a) + \u03b3 \u2211 s\u2032\u2208S P (s\u0304, a, s\u2032)v(s\u2032) \u2200s\u0304 \u2208 \u03a3\u0304 (16)\nK\u0304 = { v (s\u0304, a, P (s\u0304, a), r(s\u0304, a)) \u2208 \u03a3\u0304, v(s\u0304) \u2265 (L\u0304v)(s\u0304) } (17)\nThe less-informative set of samples \u03a3\u0303 can be used as follows.\nDefinition 28. The estimated Bellman operator and the corresponding set of estimated transitive-feasible functions are defined as:\n(L\u0303(v))(s\u0304) = max {a (s\u0304,a)\u2208\u03a3\u0303}\nr(s\u0304, a) + \u03b3 1\nn n\u2211 i=1 v(si) \u2200s\u0304 \u2208 \u03a3\u0303 (18)\nK\u0303 = { v (s\u0304, a, (s1 . . . sn), r(s\u0304, a)) \u2208 \u03a3\u0303, v(s\u0304) \u2265 (L\u0303v)(s\u0304) } (19)\nNotice that operators L\u0303 and L\u0304 map value functions to a subset of all states \u2014 only states that are sampled. The values for other states are assumed to be undefined.\nThe samples can also be used to create an approximation of the initial distribution, or the distribution of visitation-frequencies of a given policy. The estimated initial distribution \u03b1\u0304 is defined as:\n\u03b1\u0304(s) = { \u03b1(s) (s, \u00b7, \u00b7, \u00b7) \u2208 \u03a3\u0304 0 otherwise .\nThe existing sampling bounds for approximate linear programming focus on bounding the probability that a large number of constraints is violated when assuming a distribution over the constraints (de Farias and van Roy, 2004). The difficulty with this approach is that the bounds on the number of violated constraints do not transform easily to the bounds on the quality of the value function, or the policy. In addition, the constraint distribution is often somewhat arbitrary because it is difficult to define and sampling from the appropriate distributions.\nOur approach, on the other hand, is to define properties of the sampled operators that guarantee that the sampling error bounds are small. These bounds do not rely on distributions over constraints and transform directly to bounds on the policy loss. To define bounds on the sampling behavior, we propose the following assumptions.The first assumption limits the error due to missing transitions in the sampled Bellman operator L\u0304.\nAssumption 29 (Constraint Sampling Behavior). For all representable value functions v \u2208M:\nK \u2286 K\u0304 \u2286 K( p)\nThe second assumption quantifies the error on the estimation of the transitions of the estimated Bellman operator L\u0303.\nAssumption 30 (Constraint Estimation Behavior). For all representable value functions v \u2208M the following holds:\nK\u0304(\u2212 s) \u2286 K\u0303 \u2286 K\u0304( s).\nThese assumptions are intentionally made generic so that they apply to a wide range of scenarios. Domain specific assumptions are likely to lead to much tighter bounds, but these are beyond the scope of this paper.\nAlthough we define the sampled Bellman operator directly, in practice only its approximate version is typically estimated. The direct definitions are defined only for the sake of theoretical analysis. The sampled matrices used in bilinear program (ABP\u2013L\u221e) are defined as follows for all (si, aj) \u2208 \u03a3\u0303.\nA\u0303\u03a6 = (\u2212 \u03c6(si)T \u2212 \u03b3 1m\u2211s\u2032\u2208s\u20321...s\u2032m P (si, aj , s\u2032)\u03c6(s\u2032)T \u2212 \u2212 ... \u2212 ) b\u0303 = ( r(si, aj) ... ) B\u0303(s\u2032, (si, aj)) = I { s\u2032 = si } \u2200s\u2032 \u2208 \u03a3\u0303\nThe ordering over states in the definitions above is also assumed to be consistent. The sampled version of the bilinear program (ABP\u2013L\u221e) is then:\nmin \u03c0 \u03bb,\u03bb\u2032,x\n\u03c0T\u03bb+ \u03bb\u2032\ns.t. B\u0303\u03c0 = 1 A\u0303\u03a6x\u2212 b \u2265 0 \u03c0 \u2265 0 \u03bb+ \u03bb\u20321 \u2265 A\u0303\u03a6x\u2212 b\u0303\n\u03bb, \u03bb\u2032 \u2265 0\n(s\u2013ABP\u2013L\u221e)\nThe size of the bilinear program (s\u2013ABP\u2013L\u221e) scales with the number of samples and features, not with the size of the full MDP, because the variables \u03bb and \u03c0 are defined only for state \u2014 action pairs in \u03a3\u0303. That is |\u03c0| = |\u03bb| = |{(s, a) \u2208 \u03a3}|. The number of constraints in (s\u2013ABP\u2013L\u221e) is approximately three times the number of variables \u03bb. Finally, the number of variables x corresponds to the number of approximation features.\nTheorem 13 shows that sampled robust ABP minimizes \u2016v \u2212 L\u0303v\u2016\u221e or \u2016v \u2212 L\u0304v\u2016\u221e, depending on the samples used. It is then easy to derive sampling bounds that rely on the sampling assumptions defined above.\nTheorem 31. Let the optimal solutions to the sampled and precise Bellman residual minimization problems be:\nv1 \u2208 min v\u2208M\u2229K \u2016v \u2212 Lv\u2016\u221e v2 \u2208 min v\u2208M\u2229K \u2016v \u2212 L\u0304v\u2016\u221e v3 \u2208 min v\u2208M\u2229K \u2016v \u2212 L\u0303v\u2016\u221e\nValue functions v1, v2, v3 correspond to solutions of instances of robust approximate bilinear programs for the given samples. Also let v\u0302i = v\u03c0i, where \u03c0i is greedy with respect to vi. Then, given Assumptions 10, 29, and 30, the following holds:\n\u2016v\u2217 \u2212 v\u03021\u2016\u221e \u2264 2\n1\u2212 \u03b3 minv\u2208M \u2016v \u2212 Lv\u2016\u221e\n\u2016v\u2217 \u2212 v\u03022\u2016\u221e \u2264 2\n1\u2212 \u03b3 ( min v\u2208M \u2016v \u2212 Lv\u2016\u221e + p )\n\u2016v\u2217 \u2212 v\u03023\u2016\u221e \u2264 2\n1\u2212 \u03b3 ( min v\u2208M \u2016v \u2212 Lv\u2016\u221e + p + 2 s )\nThese bounds show that it is possible to bound policy loss due to incomplete samples. As mentioned above, existing bounds on constraint violation in approximate linear programming (de Farias and van Roy, 2004) typically do not easily lead to policy loss bounds.\nSampling guarantees for other bilinear program formulations are very similar. Because they also rely on an approximation of the initial distribution and the policy loss, they require additional assumptions on uniformity of state-samples.\nProof. We show bounds on \u2016vi\u2212Lvi\u2016\u221e; the remainder of the theorem follows directly from Theorem 13. The second inequality follows from Assumption 29 and Lemma 36, as follows:\nv2 \u2212 Lv2 \u2264 v2 \u2212 L\u0304v2 \u2264 v1 \u2212 L\u0304v1 \u2264 v1 \u2212 Lv1 + p1\nThe second inequality follows from Assumptions 29, 30 and Lemma 36, as follows:\nv3 \u2212 Lv3 \u2264 v2 \u2212 L\u0304v2 + p1 \u2264 v2 \u2212 L\u0303v2 + s1 + p1 \u2264 v1 \u2212 L\u0303v1 + s1 + p1 \u2264 v1 \u2212 Lv1 + 2 s1 + p1\nHere, we use the fact that vi \u2265 Lvi and that vi\u2019s minimize the corresponding Bellman residuals.\nTo summarize, this section identifies basic assumptions on the sampling behavior and shows that approximate bilinear programming scales well in the face of uncertainty caused by incomplete sampling. More detailed analysis will need to focus on identifying problemspecific assumptions and sampling modes that guarantee the basic conditions, namely satisfying Assumption 30 and Assumption 29. Such analysis is beyond the scope of this paper."}, {"heading": "7. Discussion and Related ADP Methods", "text": "This section describes connections between approximate bilinear programming and two closely related approximate dynamic programming methods: ALP, and L\u221e-API, which are commonly used to solve factored MDPs (Guestrin et al., 2003). Our analysis sheds light on some of their observed properties and leads to a new convergent form of approximate policy iteration.\nApproximate bilinear programming addresses some important issues with ALP: 1) ALP provides value function bounds with respect to L1 norm, which does not guarantee small policy loss, 2) ALP\u2019s solution quality depends significantly on the heuristically-chosen objective function c in (ALP\u2013L1) (de Farias, 2002), 3) the performance bounds involve a constant 1/(1 \u2212 \u03b3) which can be very large when \u03b3 is close to 1 and 4) incomplete constraint samples in ALP easily lead to unbounded linear programs. The drawback of using approximate bilinear programming, however, is the higher computational complexity.\nThe first and the second issue in ALP can be addressed by choosing a problem-specific objective function c (de Farias, 2002). Unfortunately, all existing bounds require that c is chosen based on the optimal ALP solution for c. This is impossible to compute in practice. Heuristic values for c are used instead. Robust approximate bilinear program (ABP\u2013L\u221e), on the other hand, has no such parameters. On the other hand, the expectedloss bilinear program (ABP\u2013U) can be seen as a method for simultaneously optimizing c and the approximate linear program.\nThe fourth issue in approximate linear programs arises when the constraints need to be sampled. The ALP may become unbounded with incomplete samples because its objective value is defined using the L1 norm on the value function, and the constraints are defined using the L\u221e norm of the Bellman residual. In approximate bilinear programs, the Bellman residual is used in both the constraints and objective function. The objective function of ABP is then bounded below by 0 for an arbitrarily small number of samples.\nThe NP-completeness of ABP compares unfavorably with the polynomial complexity of ALP. However, most other approximate dynamic programming algorithms are not guar-\nanteed to converge to a solution in finite time. As we show below, the exponential time complexity of ABP is unavoidable (unless P = NP).\nThe following theorem shows that the computational complexity of the ABP formulation is asymptotically the same as the complexity of tightly approximating the value function.\nTheorem 32. Assume 0 < \u03b3 < 1, and a given > 0. Then it is NP-complete to determine:\nmin v\u2208K\u2229M \u2016Lv \u2212 v\u2016\u221e < min v\u2208M \u2016Lv \u2212 v\u2016\u221e < .\nThe problem remains NP-complete when Assumption 10 is satisfied. It is also NP-complete to determine:\nmin v\u2208M \u2016Lv \u2212 v\u2016\u221e \u2212 \u2016v\u2217 \u2212 v\u20161,\u03b1 < min v\u2208M \u2016Lv \u2212 v\u20161,u\u0304 \u2212 \u2016v\u2217 \u2212 v\u20161,\u03b1 < ,\nassuming that u\u0304 is defined as in Remark 18.\nAs the theorem states, the value function approximation does not become computationally simpler even when Assumption 10 holds \u2014 a universal assumption in the paper. Notice that ALP can determine whether minv\u2208K\u2229M \u2016Lv \u2212 v\u2016\u221e = 0 in polynomial time.\nThe proof of Theorem 32 is based on a reduction from SAT and can be found in Section A.2. The policy in the reduction determines the true literal in each clause, and the approximate value function corresponds to the truth value of the literals. The approximation basis forces literals that share the same variable to have consistent values.\nApproximate bilinear programming can also improve on API with L\u221e minimization (L\u221e-API for short), which is a leading method for solving factored MDPs (Guestrin et al., 2003). Minimizing the L\u221e approximation error is theoretically preferable, since it is compatible with the existing bounds on policy loss (Guestrin et al., 2003). The bounds on value function approximation in API are typically (Munos, 2003):\nlim sup k\u2192\u221e\n\u2016v\u2217 \u2212 v\u0302k\u2016\u221e \u2264 2\u03b3\n(1\u2212 \u03b3)2 lim supk\u2192\u221e \u2016v\u0303k \u2212 vk\u2016\u221e.\nThese bounds are looser than the bounds on solutions of ABP by at least a factor of 1/(1\u2212\u03b3). Often the difference may be up to 1/(1\u2212\u03b3)2 since the error \u2016v\u0303k\u2212vk\u2016\u221e may be significantly larger than \u2016v\u0303k\u2212Lv\u0303k\u2016\u221e. Finally, the bounds cannot be easily used, because they only hold in the limit.\nWe propose Optimistic Approximate Policy Iteration (OAPI), a modification of API. OAPI is shown in algorithm 1, where Z(\u03c0) is calculated using the following program:\nmin \u03c6,v \u03c6 s.t. Av \u2265 b (\u2261 (I\u2212 \u03b3P\u03c0)v \u2265 r\u03c0 \u2200\u03c0 \u2208 \u03a0) \u2212(I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 \u2212r\u03c0 v \u2208M\n(20)\nIn fact, OAPI corresponds to algorithm 2 applied to ABP because the linear program (20) corresponds to (ABP\u2013L\u221e) with a fixed \u03c0 (see (8)). Then, using Proposition 23, we get the following corollary.\nCorollary 33. Optimistic approximate policy iteration converges in finite time. In addition, the Bellman residual of the generated value functions monotonically decreases.\nOAPI differs from L\u221e-API in two ways: 1) OAPI constrains the Bellman residuals by 0 from below and by \u03c6 from above, and then it minimizes \u03c6. L\u221e-API constrains the Bellman residuals by \u03c6 from both above and below. 2) OAPI, like API, uses only the current policy for the upper bound on the Bellman residual, but uses all the policies for the lower bound on the Bellman residual.\nL\u221e-API cannot return an approximate value function that has a lower Bellman residual than ABP, given the optimality of ABP described in Theorem 13. However, even OAPI, an approximate ABP algorithm, performs comparably to L\u221e-API, as the following theorem states.\nTheorem 34. Assume that L\u221e-API converges to a policy \u03c0 and a value function v that both satisfy: \u03c6 = \u2016v \u2212 L\u03c0v\u2016\u221e = \u2016v \u2212 Lv\u2016\u221e. Then\nv\u0303 = v + \u03c6\n1\u2212 \u03b31\nis feasible in the bilinear program (ABP\u2013L\u221e), and it is a fixed point of OAPI. In addition, the greedy policies with respect to v\u0303 and v are identical.\nNotice that while the optimistic and standard policy iterations can converge to the same solutions, the steps in their computation may not be identical. The actual results will depend on the initialization.\nTo prove the theorem, we first consider L\u221e-API2 as a modification of L\u221e-API. L\u221eAPI2 is shown in algorithm 1, where Z(\u03c0) is calculated using the following program:\nmin \u03c6,v \u03c6 s.t. (I\u2212 \u03b3Pa)v + 1\u03c6 \u2265 ra \u2200a \u2208 A \u2212(I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 \u2212r\u03c0 v \u2208M\n(21)\nThe difference between linear programs (4) and (27) is that (4) involves only the current policy, while (27) bounds (I\u2212 \u03b3Pa)v + 1\u03c6 \u2265 ra from below for all policies. Linear program (27) differs from linear program (20) by not bounding the Bellman residual from below by 0.\nProposition 35. L\u221e-API and L\u221e-API2 generate the same sequence of policies if the initial policies and tie-breaking is the same.\nProof. The proposition follows simply by induction from Lemma 39. The basic step follows directly from the assumption. For the inductive step, let \u03c01i = \u03c0 2 i , where \u03c0\n1 and \u03c02 are the policies with (4) and (27). Then from Lemma 39, we have that the corresponding value functions v1i = v 2 i + c1. Because \u03c0 1 i+1 and \u03c0 2 i+1 are chosen greedily, we have that \u03c01i+1 = \u03c0 2 i+1.\nThe proof of Theorem 34 follows.\nProof. The proof is based on two facts. First, v\u0303 is feasible with respect to the constraints in (ABP\u2013L\u221e). The Bellman residual changes for all the policies identically, since a constant vector is added. Second, because L\u03c0 is greedy with respect to v\u0303, we have that v\u0303 \u2265 L\u03c0v\u0303 \u2265 Lv\u0303. The value function v\u0303 is therefore transitive-feasible.\nFrom Proposition 45, L\u221e-API can be replaced by L\u221e-API2, which will converge to the same policy \u03c0. L\u221e-API2 will converge to the value function\nv\u0303 = v + \u03c6\n1\u2212 \u03b31.\nFrom the constraints in (27) we have that v\u0303 \u2265 L\u03c0v\u0303. Then, since \u03c0 is the greedy policy with regard to this value function, we have that v\u0303 \u2265 L\u03c0v\u0303 \u2265 Lv\u0303. Thus v\u0303 is transitive-feasible and feasible in (BP\u2013m) according to Lemma 38. The theorem then follows from Lemma 39 and from the fact that the greedy policy minimizes the Bellman residual, as in the proof of Lemma 16.\nTo summarize, OAPI guarantees convergence, while matching the performance of L\u221eAPI. The convergence of OAPI is achieved because given a non-negative Bellman residual, the greedy policy also minimizes the Bellman residual. Because OAPI ensures that the Bellman residual is always non-negative, it can progressively reduce it. In comparison, the greedy policy in L\u221e-API does not minimize the Bellman residual, and therefore L\u221eAPI does not always reduce it. Theorem 34 also explains why API provides better solutions than ALP, as observed in (Guestrin et al., 2003). From the discussion above, ALP can be seen as an L1-norm approximation of a single iteration of OAPI. L\u221e-API, on the other hand, performs many such ALP-like iterations."}, {"heading": "8. Experimental Results", "text": "In this section, we validate the approach by applying it to simple reinforcement learning benchmark problems. The focus of the paper is on the theoretical properties and the experiments are intentionally designed to avoid interaction between the approximation in the formulation and approximate solution methods. As Theorem 34 shows, even OAPI, the very simple approximate algorithm for ABP, can perform as well as existing methods on factored MDPs.\nABP is an off-policy approximation method, like LSPI (Lagoudakis and Parr, 2003) or ALP. That means that the samples can be gathered independently of the control policy. It is necessary, though, that multiple actions are sampled for each state to enable the selection of different policies.\nFirst, we demonstrate and analyze the properties of ABP on a simple chain problem with 200 states, in which the transitions move to the right or left (2 actions) by one step with a centered Gaussian noise of standard deviation 3. The rewards were set to sin(i/20) for the right action and cos(i/20) for the left action, where i is the index of the state. This problem is small enough to calculate the optimal value function and to control the approximation features. The approximation basis in this problem is represented by piecewise linear features, of the form \u03c6(si) = [i\u2212 c]+, for c from 1 to 200. The discount factor in the experiments was \u03b3 = 0.95 and the initial distribution was \u03b1(130) = 1. We verified that the solutions of the bilinear programs were always close to optimal, albeit suboptimal.\nWe experimented with the full state-action sample and randomly chose the features. All results are averages over 50 runs with 15 features. In the results, we use ABP to denote a close-to-optimal solution of robust ABP, ABPexp for the bilinear program (ABP\u2013L1), and ABPhyb for (ABP\u2013h) with k = 5. API denotes approximate policy iteration that minimizes the L2 norm.\nFigure 1 shows the Bellman residual attained by the methods. It clearly shows that the robust bilinear formulation most reliably minimizes the Bellman residual. The other two bilinear formulations are not much worse. Notice also the higher standard deviation of ALP and API. Figure 2 shows the expected policy loss, as specified in Definition 5, for the calculated value functions. It confirms that the ABP formulation outperforms the robust formulation, since its explicit objective is to minimize the expected loss. Similarly, Figure 3 shows the robust policy loss. As expected, it confirms the better performance of the robust ABP formulation in this case.\nNote that API and ALP may achieve lower policy loss on this particular domain than ABP formulations, even though their Bellman residual is significantly higher. This is possible since ABP simply minimizes bounds on the policy loss. The analysis of tightness of policy loss bounds is beyond the scope of this paper.\nIn the mountain-car benchmark, an underpowered car needs to climb a hill (Sutton and Barto, 1998). To do so, it first needs to back up to an opposite hill to gain sufficient momentum. The car receives a reward of 1 when it climbs the hill. The discount factor in the experiments was \u03b3 = 0.99.\nThe experiments are designed to determine whether OAPI reliably minimizes the Bellman residual in comparison with API and ALP. We use a uniformly-spaced linear spline to approximate the value function. The constraints were based on 200 uniformly sampled states with all 3 actions per state. We evaluated the methods with the number of the approximation features 100 and 144, which corresponds to the number of linear segments.\nThe results of robust ABP (in particular OAPI), ALP, API with L2 minimization, and LSPI are depicted in Table 1. The results are shown for both L\u221e norm and uniformlyweighted L2 norm. The run-times of all these methods are comparable, with ALP being\nthe fastest. Since API (LSPI) is not guaranteed to converge, we ran it for at most 20 iterations, which was an upper bound on the number of iterations of OAPI. The results demonstrate that ABP minimizes the L\u221e Bellman residual much more consistently than the other methods. Note, however, that all the considered algorithms would perform significantly better given a finer approximation."}, {"heading": "9. Conclusion and Future Work", "text": "We proposed and analyzed approximate bilinear programming, a new value-function approximation method, which provably minimizes bounds on policy loss. ABP returns the optimal approximate value function with respect to the Bellman residual bounds, despite being formulated with regard to transitive-feasible value functions. We also showed that there is no asymptotically simpler formulation, since finding the closest value function and\nsolving a bilinear program are both NP-complete problems. Finally, the formulation leads to the development of OAPI, a new convergent form of API which monotonically improves the objective value function.\nWhile we only discussed approximate solutions of the ABP, a deeper study of bilinear solvers may render optimal solution methods feasible. ABPs have a small number of essential variables (that determine the value function) and a large number of constraints, which can be leveraged by the solvers (Petrik and Zilberstein, 2007). The L\u221e error bound provides good theoretical guarantees, but it may be too conservative in practice. A similar formulation based on L2 norm minimization may be more practical.\nWe believe that the proposed formulation will help to deepen the understanding of value function approximation and the characteristics of existing solution methods, and potentially lead to the development of more robust and widely-applicable reinforcement learning algorithms."}, {"heading": "Appendix A. Proofs", "text": "A.1 Properties of Transitive-Feasible Value Functions\nBasic properties of the Bellman operator, which we often use without a reference are the following.\nLemma 36. Let v be any value function and let c be a scalar. Then:\nL(v + c1) = Lv + \u03b3c1.\nLemma 37 (Monotonicity). Let P be a stochastic matrix. Then both the linear operators P and (I \u2212 \u03b3P )\u22121 are monotonous:\nx \u2265 y \u21d2 Px \u2265 Py x \u2265 y \u21d2 (I \u2212 \u03b3P )\u22121x \u2265 (I \u2212 \u03b3P )\u22121y\nfor all x and y.\nLemma 4. Transitive feasible value functions form an upper bound on the optimal value function. If v \u2208 K( ) is an -transitive-feasible value function, then\nv \u2265 v\u2217 \u2212 1\u2212 \u03b31.\nProof. Let P \u2217 and r\u2217 be the transition matrix and the reward vector of the policy. Then, we have using Lemma 37:\nv \u2265 Lv \u2212 1 v \u2265 \u03b3P \u2217v + r\u2217 \u2212 1\n(I\u2212 \u03b3P \u2217)v \u2265 r\u2217 \u2212 1 v \u2265 (I\u2212 \u03b3P \u2217)\u22121 r\u2217 \u2212\n1\u2212 \u03b3\nLemma 38. A value function v satisfies Av \u2265 b if an only if v \u2265 Lv. In addition, if v is feasible in (ABP\u2013L\u221e), then v \u2265 v\u2217.\nProof. The backward implication of the first part of the lemma follows directly from the definition. The forward implication follows by an existence of \u03bb = 0, \u03bb\u2032 = \u2016 [Av \u2212 r]+ \u2016\u221e, which satisfy the constraints. The constraints on \u03c0 are independent and therefore can be satisfied independently. The second part of the lemma also holds in ALPs (de Farias, 2002) and is proven identically.\nThe minimization minv\u2208M \u2016Lv\u2212 v\u2016\u221e for a policy \u03c0 can be represented as the following linear program.\nmin \u03c6,v \u03c6 s.t. (I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 r\u03c0 \u2212(I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 \u2212r\u03c0 v \u2208M\n(22)\nConsider also the following linear program.\nmin \u03c6,v \u03c6 s.t. (I\u2212 \u03b3P\u03c0)v \u2265 r\u03c0 \u2212(I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 \u2212r\u03c0 v \u2208M\n(23)\nNext we show that the optimal solutions of (22) and (23) are closely related.\nLemma 39. Assume Assumption 10 and a given policy \u03c0. Let \u03c61, v1 and \u03c62, v2 optimal solutions of linear programs (22) and (23) respectively. Define:\nv\u03041 = v1 + \u03c61 1\u2212 \u03b3 v\u03042 = v1 \u2212 \u03c62 2(1\u2212 \u03b3)1\nThen: 1. 2\u03c61 = \u03c62 2. v\u03041 is an optimal solution in (23). 3. v\u03042 is an optimal solution in (22). 4. Greedy policies with respect to v1 and v\u03041 are identical. 5. Greedy policies with respect to v2 and v\u03042 are identical.\nProof. Let \u03c6\u03041 = 2\u03c61 and \u03c6\u03042 = \u03c62 2 . We first show \u03c6\u03041, v\u03041 is feasible in (23). It is representable since 1 \u2208M and it is feasible by the following simple algebraic manipulation:\n(I\u2212 \u03b3P\u03c0)v\u03041 = (I\u2212 \u03b3P\u03c0)v1 + (I\u2212 \u03b3P\u03c0) \u03c61\n1\u2212 \u03b31\n= (I\u2212 \u03b3P\u03c0)v1 + \u03c611 \u2265 \u2212\u03c611 + r\u03c0 + \u03c611 = r\u03c0\nand\n\u2212(I\u2212 \u03b3P\u03c0)v\u03041 + \u03c6\u030411 = \u2212(I\u2212 \u03b3P\u03c0)v\u03041 + 2\u03c611\n= \u2212(I\u2212 \u03b3P\u03c0)v1 \u2212 (I\u2212 \u03b3P\u03c0) \u03c61\n1\u2212 \u03b31 + 2\u03c611\n= \u2212(I\u2212 \u03b3P\u03c0)v1 \u2212 \u03c611 + 2\u03c611 \u2265 \u2212\u03c611\u2212 r\u03c0 + 2\u03c611 = \u2212r\u03c0\nNext we show that \u03c6\u03042, v\u03042 is feasible in (22). This solution is representable, since 1 \u2208M, and it is feasible by the following simple algebraic manipulation:\n(I\u2212 \u03b3P\u03c0)v\u03042 + \u03c6\u030421 = (I\u2212 \u03b3P\u03c0)v2 \u2212 (I\u2212 \u03b3P\u03c0) \u03c62 2(1\u2212 \u03b3)1 + \u03c62 2 1\n= (I\u2212 \u03b3P\u03c0)v2 \u2212 \u03c62 2 1 + 1 2 \u03c6\u030421 = (I\u2212 \u03b3P\u03c0)v2 \u2265 r\u03c0\nand\n\u2212(I\u2212 \u03b3P\u03c0)v\u03042 + \u03c6\u030421 = \u2212(I\u2212 \u03b3P\u03c0)v\u03042 + \u03c62 2 1\n= \u2212(I\u2212 \u03b3P\u03c0)v2 \u2212 (I\u2212 \u03b3P\u03c0) \u03c62 1\u2212 \u03b31 + \u03c62 2 1 = \u2212(I\u2212 \u03b3P\u03c0)v2 + \u03c621 \u2265 \u2212r\u03c0\nIt is now easy to shows that \u03c6\u03041, v\u03041 is optimal by contradiction. Assume that there exists a solution \u03c62 < \u03c6\u03041. But then: 2\u03c6\u03042 \u2264 \u03c62 < \u03c6\u03041 \u2264 2\u03c61, which is a contradiction with the optimality of \u03c61. The optimality of \u03c6\u03042, v\u03042 can be shown similarly.\nProposition 40. Assumption 10 implies that:\nmin v\u2208M\u2229K \u2016Lv \u2212 v\u2016\u221e \u2264 2 min v\u2208M \u2016Lv \u2212 v\u2016\u221e.\nProof. Let v\u0302 be the minimizer of \u03c6\u0302 = minv\u2208M \u2016Lv \u2212 v\u2016\u221e, and let \u03c0\u0302 be a policy that is greedy with respect to v\u0302. Define:\nv\u0303 = v\u0302 + \u03c6\u0302\n1\u2212 \u03b3 .\nThen from Lemma 39: 1. Value function v\u0303 is an optimal solution of (23): v\u0303 \u2265 L\u03c0v\u0303 2. Policy \u03c0\u0302 is greedy with regard to v\u0303: L\u03c0\u0302v\u0303 \u2265 Lv\u0303 3. \u2016L\u03c0v\u0303 \u2212 v\u0303\u2016\u221e = 2\u03c6\u0302 Then using a simple algebraic manipulation:\nv\u0303 \u2265 L\u03c0\u0302v\u0303 = Lv\u0303\nand the proposition follows from Lemma 38.\nProposition 41. Let v\u0303 be a solution of the approximate bilinear program (ABP\u2013L\u221e) and let:\nv\u2032 = v \u2212 1/2 (1\u2212 \u03b3)\u2016Lv \u2212 v\u2016\u221e1.\nThen:\n1. \u2016Lv\u2032 \u2212 v\u2032\u2016\u221e = \u2016Lv\u2212v\u2016\u221e2 . 2. Greedy policies with respect to v and v\u2032 are identical.\nThe proposition follows directly from Lemma 39.\nProposition 42. Assumption 10 implies that:\nmin v\u2208M \u2016Lv \u2212 v\u2016\u221e \u2264 (1 + \u03b3) min v\u2208M \u2016v \u2212 v\u2217\u2016\u221e.\nProof. Assume that v\u0302 is the minimizer of minv\u2208M \u2016v \u2212 v\u2217\u2016\u221e \u2264 . Then: v\u2217 \u2212 1 \u2264 v \u2264 v\u2217 + 1\nLv\u2217 \u2212 \u03b3 1 \u2264 Lv \u2264 Lv\u2217 + \u03b3 1 Lv\u2217 \u2212 \u03b3 1\u2212 v \u2264 Lv \u2212 v \u2264 Lv\u2217 + \u03b3 1\u2212 v\nLv\u2217 \u2212 v\u2217 \u2212 (1 + \u03b3) 1 \u2264 Lv \u2212 v \u2264 Lv\u2217 \u2212 v\u2217 + (1 + \u03b3) 1 \u2212(1 + \u03b3) 1 \u2264 Lv \u2212 v \u2264 (1 + \u03b3) 1.\nProposition 24. Let v\u03031 and v\u03032 be feasible value functions in (ABP\u2013L\u221e). Then the value function v\u0303(s) = min{v\u03031(s), v\u03032(s)} is also feasible in bilinear program (ABP\u2013L\u221e). Therefore v\u0303 \u2265 v\u2217 and\n\u2016v\u2217 \u2212 v\u0303\u2016\u221e \u2264 min {\u2016v\u2217 \u2212 v\u03031\u2016\u221e, \u2016v\u2217 \u2212 v\u03032\u2016\u221e} .\nProof. Consider a state s and action a. Then from transitive feasibility of the value functions v\u03031 and v\u03032 we have:\nv\u03031(s) \u2265 \u03b3 \u2211 s\u2032\u2208S P (s\u2032, a, a)v\u03031(s \u2032) + r(s, a)\nv\u03032(s) \u2265 \u03b3 \u2211 s\u2032\u2208S P (s\u2032, a, a)v\u03032(s \u2032) + r(s, a).\nFrom the convexity of the min operator we have that:\nmin {\u2211 s\u2032\u2208S P (s\u2032, a, a)v\u03031, \u2211 s\u2032\u2208S P (s\u2032, a, a)v\u03032(s \u2032) } \u2265 \u2211 s\u2032\u2208S P (s\u2032, a, a) min{v\u03031(s\u2032), v\u03032)(s\u2032)}.\nThen the proposition follows by the following simple algebraic manipulation: v\u0303 = min{v\u03031(s), v\u03032(s)} \u2265 \u03b3min {\u2211 s\u2032\u2208S P (s\u2032, a, a)v\u03031, \u2211 s\u2032\u2208S P (s\u2032, a, a)v\u03032(s \u2032) } + r(s, a)\n\u2265 \u03b3 \u2211 s\u2032\u2208S P (s\u2032, a, a) min{v\u03031(s\u2032), v\u03032)(s\u2032)}+ r(s, a)\n= \u03b3 \u2211 s\u2032\u2208S P (s\u2032, a, a)v\u0303(s) + r(s, a).\nLemma 43. Let u\u03c0 be the state-action visitation frequency of policy \u03c0. Then:\n1Tu = 1\n1\u2212 \u03b3 .\nProof. Let ua(s) = u\u03c0(s, \u03c0(s, a)) for all states s \u2208 S and actions a \u2208 A. The lemma follows as: \u2211\na\u2208A uTa (I\u2212 \u03b3Pa) = cT\u2211 a\u2208A uTa (I\u2212 \u03b3Pa)1 = cT1\n(1\u2212 \u03b3) \u2211 a\u2208A uTa1 = 1\nuT1 = 1\n1\u2212 \u03b3 .\nA.2 NP-Completeness\nProposition 44 (e.g. (Mangasarian, 1995)). A bilinear program can be solved in NP time.\nThere is an optimal solution of the bilinear program such that the solutions of the individual linear programs are basic feasible. The set of all basic feasible solutions is finite, because the feasible regions of w, x and y, z are independent. The value of a basic feasible solution can be calculated in polynomial time. Theorem 32. Assume 0 < \u03b3 < 1, and a given > 0. Then it is NP-complete to determine:\nmin v\u2208K\u2229M \u2016Lv \u2212 v\u2016\u221e < min v\u2208M \u2016Lv \u2212 v\u2016\u221e < .\nThe problem remains NP-complete when Assumption 10 is satisfied. It is also NP-complete to determine:\nmin v\u2208M \u2016Lv \u2212 v\u2016\u221e \u2212 \u2016v\u2217 \u2212 v\u20161,\u03b1 < min v\u2208M \u2016Lv \u2212 v\u20161,u\u0304 \u2212 \u2016v\u2217 \u2212 v\u20161,\u03b1 < ,\nassuming that u\u0304 is defined as in Remark 18.\nProof. The membership in NP follows from Theorem 13 and Proposition 44. We show NPhardness by a reduction from the 3SAT problem. We first don\u2019t assume Assumption 10. We show the theorem for = 1. The appropriate can be obtained by simply scaling the rewards in the MDP.\nThe main idea is to construct an MDP and an approximation basis, such that the approximation error is small whenever the SAT is satisfiable. The value of the states will correspond to the truth value of the literals and clauses. The approximation features \u03c6 will be used to constraint the values of literals that share the same variable. The MDP constructed from the SAT formula is depicted in Figure 4.\nConsider a SAT problem with clauses Ci:\u2227 i=1,...,n Ci = \u2227 i=1,...,n (li1 \u2228 li2 \u2228 li3) ,\nwhere lij are literals. A literal is a variable or a negation of a variable. The variables in the SAT are x1 . . . xm. The corresponding MDP is constructed as follows. It has one state s(lij) for every literal lij , one state s(Ci) for each clause Ci and an additional state s\u0304. That is: S = {s(Ci) i = 1, . . . , n} \u222a {s(lij) i = 1, . . . , n, j = 1, . . . , 3} \u222a {s\u0304}. There are 3 actions available for each state s(Ci), which determine the true literal of the clause. There is only a single action available in states s(lij) and s\u0304. All transitions in the MDP are deterministic. The transition t(s, a) = (s\u2032, r) is from the state s to s\u2032, when action a is taken, and the reward received is r. The transitions are the following:\nt(s(Ci), aj) = (s(lij), 1\u2212 \u03b3) (24) t(s(lij), a) = (s(lij),\u2212(1\u2212 \u03b3)) (25)\nt(s\u0304, a) = (s\u0304, 2\u2212 \u03b3) (26) Notice that the rewards depend on the discount factor \u03b3, for notational convenience.\nThere is one approximation feature for every variable xk such that:\n\u03c6k(s(Ci)) = 0\n\u03c6k(s\u0304) = 0\n\u03c6k(s(lij)) =\n{ 1 if lij = xk\n\u22121 if lij = \u00acxk An additional feature in the problem \u03c6\u0304 is defined as:\n\u03c6\u0304(s(Ci)) = 1\n\u03c6\u0304(s(lij)) = 0\n\u03c6\u0304(s\u0304) = 1.\nThe purpose of state s\u0304 is to ensure that v(s(ci)) \u2265 2\u2212 \u03b3, as we assume in the remainder of the proof.\nFirst, we show that if the SAT problem is satisfiable, then minv\u2208M\u2229K \u2016Lv \u2212 v\u2016\u221e < 1. The value function v\u0303 \u2208 K is constructed as a linear sum of the features as: v = \u03a6y, where y = (y1, . . . , ym, y\u0304). Here yk corresponds to \u03c6k and y\u0304 corresponds to \u03c6\u0304. The coefficients yk are constructed from the truth value of the variables as follows:\nyk =\n{ \u03b3 if xk = true\n\u2212\u03b3 if xk = false y\u0304 = 2\u2212 \u03b3.\nNow define the deterministic policy \u03c0 as:\n\u03c0(s(Ci)) = aj where lij = true .\nThe true literals are guaranteed to exist from the satisfiability. This policy is greedy with respect to v\u0303 and satisfies that \u2016L\u03c0v\u0303 \u2212 v\u0303\u2016\u221e \u2264 1\u2212 \u03b32.\nThe Bellman residuals for all actions and states, given a value function v, are defined as: v(s)\u2212 \u03b3v(s\u2032)\u2212 r, where t(s, a) = (s\u2032, r). Given the value function v\u0303, the residual values are:\nt(s(Ci), aj) = (s(lij), 1\u2212 \u03b3) : {\n2\u2212 \u03b3 \u2212 \u03b32 + (1\u2212 \u03b3) = 1\u2212 \u03b32 if lij = true 2\u2212 \u03b3 + \u03b32 + (1\u2212 \u03b3) = 1 + \u03b32 if lij = false\nt(s(lij), a) = (s(lij), (1\u2212 \u03b3)) : { \u03b3 \u2212 \u03b32 + 1\u2212 \u03b3 = 1\u2212 \u03b32 if lij = true \u2212\u03b3 + \u03b32 + 1\u2212 \u03b3 = (1\u2212 \u03b3)2 > 0 if lij = false\nt(s\u0304, a) = (s\u0304, 1\u2212 \u03b3) : (1\u2212 \u03b3) + \u03b3 \u2212 1 = 0\nIt is now clear that \u03c0 is greedy and that:\n\u2016Lv\u0303 \u2212 v\u0303\u2016\u221e = 1\u2212 \u03b32 < 1. We now show that if the SAT problem is not satisfiable then minv\u2208K\u2229M \u2016Lv \u2212 v\u2016\u221e \u2265 1 \u2212 \u03b322 . Now, given a value function v, there are two possible cases for each v(s(lij)): 1) a positive value, 2) a non-positive value. Two literals that share the same variable will have the same sign, since there is only one feature per each variable.\nAssume now that there is a value function v\u0303. There are two possible cases we analyze: 1) all transitions of a greedy policy are to states with positive value, and 2) there is at least one transition to a state with a non-positive value. In the first case, we have that\n\u2200i \u2203j, v\u0303(s(lij)) > 0. That is, there is a function q(i), which returns the positive literal for the clause j. Now, create a satisfiable assignment of the SAT as follows:\nxk =\n{ true if liq(i) = xk\nfalse if liq(i) = \u00acxk ,\nwith other variables assigned arbitrary values. Given this assignment, all literals with states that have a positive value will be also positive. Since every clause contains at least one positive literal, the SAT is satisfiable, which is a contradiction with the assumption. Therefore, there is at least one transition to a state with a non-positive value.\nLet C1 represent the clause with a transition to a literal l11 with a non-positive value, without loss of generality. The Bellman residuals at the transitions from these states will be:\nb1 = v\u0303(s(l11))\u2212 \u03b3v\u0303(s(l11)) + (1\u2212 \u03b3) \u2265 0\u2212 0 + (1\u2212 \u03b3) = 1\u2212 \u03b3 b1 = v\u0303(s(C1))\u2212 \u03b3v\u0303(s(l11))\u2212 (1\u2212 \u03b3) \u2265 2\u2212 \u03b3 \u2212 0\u2212 1 + \u03b3 = 1\nTherefore, the Bellman residual v\u0303 is bounded as:\n\u2016Lv\u0303 \u2212 v\u0303\u2016\u221e \u2265 max{b1, b2} \u2265 1.\nSince we did not make any assumptions on v\u0303, the claim holds for all representable and transitive-feasible value functions. Therefore, minv\u2208M\u2229K \u2016Lv\u2212 v\u2016\u221e \u2264 1\u2212 \u03b32 is and only if the 3-SAT problem is feasible.\nIt remains to show that the problem remains NP-complete even when Assumption 10 holds. Define a new state s\u03041 with the following transition:\nt(s\u03042, a) = (s\u03042,\u2212 \u03b3\n2 ).\nAll previously introduced features \u03c6 are zero on the new state. That is \u03c6k(s\u03041) = \u03c6\u0304(s\u03041) = 0. The new constant feature is: \u03c6\u0302(s) = 1 for all states s \u2208 S, and the matching coefficient is denoted as y\u03041. When the formula is satisfiable, then clearly minv\u2208M\u2229K \u2016Lv\u2212 v\u2016\u221e \u2264 1\u2212 \u03b32 since the basis is now richer and the Bellman error on the new transition is less than 1\u2212 \u03b32 when y\u03041 = 0.\nNow we show that when the formula is not satisfiable, then:\nmin v\u2208M\u2229K\n\u2016Lv \u2212 v\u2016\u221e \u2265 1\u2212 \u03b32\n2 .\nThis can be scaled to an appropriate by scaling the rewards. Notice that\n0 \u2264 y\u03041 \u2264 \u03b3\n2 .\nWhen y\u03041 < 0, the Bellman residual on transitions s(Ci) \u2192 s(lij) may be decreased by increasing y\u03041 while adjusting other coefficients to ensure that v(s(Ci)) = 2 \u2212 \u03b3. When y\u03041 > \u03b3 2 then the Bellman residual from the state s\u03041 is greater than 1 \u2212 \u03b32\n2 . Given the bounds on y\u03041, the argument for yk = 0 holds and the minimal Bellman residual is achieved when:\nv(s(Ci))\u2212 \u03b3v(s(lij))\u2212 (1\u2212 \u03b3) = v(s(s\u03041))\u2212 \u03b3v(s(s\u03041)) + \u03b3\n2\n2\u2212 \u03b3 \u2212 \u03b3y\u03041 \u2212 (1\u2212 \u03b3) = y\u03041 \u2212 \u03b3y\u03041 + \u03b3\n2\ny\u03041 = \u03b3\n2 .\nTherefore, when the SAT is unsatisfiable, the Bellman residual is at least 1\u2212 \u03b322 . The NP-completeness of minv\u2208M \u2016Lv \u2212 v\u2016\u221e < follows trivially from Proposition 40. The proof for \u2016v \u2212 Lv\u2016\u221e \u2212 \u03b1Tv is almost identical. The difference is a new state s\u0302, such that \u03c6(s\u0302) = 1 and \u03b1(s\u0302) = 1. In that case \u03b1Tv = 1 for all v \u2208M. The additional term thus has no effect on the optimization.\nThe proof can be similarly extended to the minimization of \u2016v\u2212Lv\u20161,u\u0304. Define u\u0304(Ci) = 1/n and u\u0304(lij) = 0. Then the SAT problem is satisfiable if an only if \u2016v \u2212 Lv\u20161,u\u0304 = 1\u2212 \u03b32. Note that u\u0304, as defined above, is not an upper bound on the visitation frequencies u\u03c0. It is likely that the proof could be extended to cover the case u\u0304 \u2265 u\u03c0 by more carefully designing the transitions from Ci. In particular, there needs to be high probability of returning to Ci and u\u0304(lij > 0.\nA.3 Equivalence of OAPI and API\nWe first consider L\u221e-API2 as a modification of L\u221e-API. L\u221e-API2 is shown in algorithm 1, where f(\u03c0) is calculated using the following program:\nmin \u03c6,v \u03c6 s.t. (I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 r\u03c0 \u2212(I\u2212 \u03b3P\u03c0)v + 1\u03c6 \u2265 \u2212r\u03c0 v \u2208M\n(27)\nProposition 45. L\u221e-API and L\u221e-API2 generate the same sequence of policies if the initial policies and tie-breaking is the same.\nProof. The proposition follows simply by induction from Lemma 39. The basic step follows directly from the assumption. For the inductive step, let \u03c01i = \u03c0 2 i , where \u03c0\n1 and \u03c02 are the policies with (4) and (27). Then from Lemma 39, we have that the corresponding value functions v1i = v 2 i + c1. Because \u03c0 1 i+1 and \u03c0 2 i+1 are chosen greedily, we have that \u03c01i+1 = \u03c0 2 i+1.\nWe are ready now to prove the theorem. Theorem 34. Assume that L\u221e-API converges to a policy \u03c0 and a value function v that both satisfy: \u03c6 = \u2016v \u2212 L\u03c0v\u2016\u221e = \u2016v \u2212 Lv\u2016\u221e. Then\nv\u0303 = v + \u03c6\n1\u2212 \u03b31\nis feasible in the bilinear program (ABP\u2013L\u221e), and it is a fixed point of OAPI. In addition, the greedy policies with respect to v\u0303 and v are identical.\nProof. From Proposition 45, L\u221e-API can be replaced by L\u221e-API2, which will converge to the same policy \u03c0. L\u221e-API2 will converge to the value function\nv\u0303 = v + \u03c6\n1\u2212 \u03b31.\nFrom the constraints in (27) we have that:\nv\u0303 \u2265 L\u03c0v\u0303.\nThen, since \u03c0 is the greedy policy with regard to this value function, we have that:\nv\u0303 \u2265 L\u03c0v\u0303 \u2265 Lv\u0303.\nThus v\u0303 is transitive-feasible and feasible in (BP\u2013m) according to Lemma 38. The theorem then follows from Lemma 39 and from the fact that the greedy policy minimizes the Bellman residual, as in the proof of Lemma 16.\nNotice that while the optimistic and standard policy iterations can converge to the same solutions, the steps in their computation may not be identical. The actual results will depend on the initialization."}], "references": [{"title": "Learning vehicular dynamics, with application to modeling helicopters", "author": ["Pieter Abbeel", "Varun Ganapathi", "Andrew Y. Ng"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Abbeel et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Abbeel et al\\.", "year": 2006}, {"title": "A price-directed approach to stochastic inventory/routing", "author": ["Daniel Adelman"], "venue": "Operations Research,", "citeRegEx": "Adelman.,? \\Q2004\\E", "shortCiteRegEx": "Adelman.", "year": 2004}, {"title": "Dynamic Programming", "author": ["Richard Bellman"], "venue": null, "citeRegEx": "Bellman.,? \\Q1957\\E", "shortCiteRegEx": "Bellman.", "year": 1957}, {"title": "Bilinear separation of two sets in n-space", "author": ["Kristin P. Bennett", "Olvi L. Mangasarian"], "venue": "Technical report,", "citeRegEx": "Bennett and Mangasarian.,? \\Q1992\\E", "shortCiteRegEx": "Bennett and Mangasarian.", "year": 1992}, {"title": "Temporal differences-based policy iteration and applications in neuro-dynamic programming", "author": ["Dimitri P. Bertsekas", "Sergey Ioffe"], "venue": "Technical Report LIDS-P-2349,", "citeRegEx": "Bertsekas and Ioffe.,? \\Q1997\\E", "shortCiteRegEx": "Bertsekas and Ioffe.", "year": 1997}, {"title": "Bidimensional packing by bilinear programming", "author": ["Alberto Carpara", "Michele Monaci"], "venue": "Mathematical Programming Series A,", "citeRegEx": "Carpara and Monaci.,? \\Q2009\\E", "shortCiteRegEx": "Carpara and Monaci.", "year": 2009}, {"title": "The Linear Programming Approach to Approximate Dynamic Programming: Theory and Application", "author": ["Daniela P. de Farias"], "venue": "PhD thesis, Stanford University,", "citeRegEx": "Farias.,? \\Q2002\\E", "shortCiteRegEx": "Farias.", "year": 2002}, {"title": "The linear programming approach to approximate dynamic programming", "author": ["Daniela P. de Farias", "Ben van Roy"], "venue": "Operations Research,", "citeRegEx": "Farias and Roy.,? \\Q2003\\E", "shortCiteRegEx": "Farias and Roy.", "year": 2003}, {"title": "On constraint sampling in the linear programming approach to approximate dynamic programming", "author": ["Daniela Pucci de Farias", "Benjamin van Roy"], "venue": "Mathematics of Operations Research,", "citeRegEx": "Farias and Roy.,? \\Q2004\\E", "shortCiteRegEx": "Farias and Roy.", "year": 2004}, {"title": "Efficient solution algorithms for factored MDPs", "author": ["Carlos Guestrin", "Daphne Koller", "Ronald Parr", "Shobha Venkataraman"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "Guestrin et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Guestrin et al\\.", "year": 2003}, {"title": "Global optimization: Deterministic approaches", "author": ["Reiner Horst", "Hoang Tuy"], "venue": null, "citeRegEx": "Horst and Tuy.,? \\Q1996\\E", "shortCiteRegEx": "Horst and Tuy.", "year": 1996}, {"title": "Least-squares policy iteration", "author": ["Michail G. Lagoudakis", "Ronald Parr"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Lagoudakis and Parr.,? \\Q2003\\E", "shortCiteRegEx": "Lagoudakis and Parr.", "year": 2003}, {"title": "The linear complementarity problem as a separable bilinear program", "author": ["Olvi L. Mangasarian"], "venue": "Journal of Global Optimization,", "citeRegEx": "Mangasarian.,? \\Q1995\\E", "shortCiteRegEx": "Mangasarian.", "year": 1995}, {"title": "Error bounds for approximate policy iteration", "author": ["Remi Munos"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Munos.,? \\Q2003\\E", "shortCiteRegEx": "Munos.", "year": 2003}, {"title": "Anytime coordination using separable bilinear programs", "author": ["Marek Petrik", "Shlomo Zilberstein"], "venue": "In Conference on Artificial Intelligence,", "citeRegEx": "Petrik and Zilberstein.,? \\Q2007\\E", "shortCiteRegEx": "Petrik and Zilberstein.", "year": 2007}], "referenceMentions": [{"referenceID": 0, "context": "Lorincz, 2006) and helicopter control (Abbeel et al., 2006).", "startOffset": 38, "endOffset": 59}, {"referenceID": 4, "context": "Approximate dynamic programming (ADP) methods iteratively approximate the value function (Bertsekas and Ioffe, 1997; Powell, 2007; Sutton and Barto, 1998).", "startOffset": 89, "endOffset": 154}, {"referenceID": 4, "context": "The approximation error bounds are usually expressed in terms of the worst-case approximation of the value function over all policies (Bertsekas and Ioffe, 1997).", "startOffset": 134, "endOffset": 161}, {"referenceID": 13, "context": "While there exist some L2-based bounds (Munos, 2003), they require values that are difficult to obtain.", "startOffset": 39, "endOffset": 52}, {"referenceID": 1, "context": "ALP has been previously used in a wide variety of settings (Adelman, 2004; de Farias and van Roy, 2004; Guestrin et al., 2003).", "startOffset": 59, "endOffset": 126}, {"referenceID": 9, "context": "ALP has been previously used in a wide variety of settings (Adelman, 2004; de Farias and van Roy, 2004; Guestrin et al., 2003).", "startOffset": 59, "endOffset": 126}, {"referenceID": 4, "context": "Many methods that compute a value function based on a given set of features have been developed, such as neural networks and genetic algorithms (Bertsekas and Ioffe, 1997).", "startOffset": 144, "endOffset": 171}, {"referenceID": 11, "context": "The two most commonly used methods \u2014 Bellman residual approximation and least-squares approximation (Lagoudakis and Parr, 2003) \u2014 minimize the L2 norm of the Bellman residual.", "startOffset": 100, "endOffset": 127}, {"referenceID": 2, "context": "The ideas of approximate value iteration could be traced to Bellman (1957), which was followed by many additional research efforts (Bertsekas and Tsitsiklis, 1996; Sutton and Barto, 1998; Powell, 2007).", "startOffset": 60, "endOffset": 75}, {"referenceID": 10, "context": "Bilinear programs can be easily mapped to other global optimization problems, such as mixed integer linear programs (Horst and Tuy, 1996).", "startOffset": 116, "endOffset": 137}, {"referenceID": 3, "context": "Solving a bilinear program is an NP-complete problem (Bennett and Mangasarian, 1992).", "startOffset": 53, "endOffset": 84}, {"referenceID": 5, "context": "The relaxation of the bilinear program is typically either a linear or semi-definite program (Carpara and Monaci, 2009).", "startOffset": 93, "endOffset": 119}, {"referenceID": 10, "context": "The bilinear program formulation is then refined \u2014 using concavity cuts (Horst and Tuy, 1996) \u2014 to eliminate previously computed feasible solutions and solved again.", "startOffset": 72, "endOffset": 93}, {"referenceID": 12, "context": "While algorithm 2 is not guaranteed to find an optimal solution, its empirical performance is often remarkably good (Mangasarian, 1995).", "startOffset": 116, "endOffset": 135}, {"referenceID": 3, "context": "(Bennett and Mangasarian, 1992)).", "startOffset": 0, "endOffset": 31}, {"referenceID": 9, "context": "Discussion and Related ADP Methods This section describes connections between approximate bilinear programming and two closely related approximate dynamic programming methods: ALP, and L\u221e-API, which are commonly used to solve factored MDPs (Guestrin et al., 2003).", "startOffset": 240, "endOffset": 263}, {"referenceID": 9, "context": "Approximate bilinear programming can also improve on API with L\u221e minimization (L\u221e-API for short), which is a leading method for solving factored MDPs (Guestrin et al., 2003).", "startOffset": 150, "endOffset": 173}, {"referenceID": 9, "context": "Minimizing the L\u221e approximation error is theoretically preferable, since it is compatible with the existing bounds on policy loss (Guestrin et al., 2003).", "startOffset": 130, "endOffset": 153}, {"referenceID": 13, "context": "The bounds on value function approximation in API are typically (Munos, 2003):", "startOffset": 64, "endOffset": 77}, {"referenceID": 9, "context": "Theorem 34 also explains why API provides better solutions than ALP, as observed in (Guestrin et al., 2003).", "startOffset": 84, "endOffset": 107}, {"referenceID": 11, "context": "ABP is an off-policy approximation method, like LSPI (Lagoudakis and Parr, 2003) or ALP.", "startOffset": 53, "endOffset": 80}, {"referenceID": 14, "context": "ABPs have a small number of essential variables (that determine the value function) and a large number of constraints, which can be leveraged by the solvers (Petrik and Zilberstein, 2007).", "startOffset": 157, "endOffset": 187}], "year": 2010, "abstractText": "Existing value function approximation methods have been successfully used in many applications, but they often lack useful a priori error bounds. We propose a new approximate bilinear programming formulation of value function approximation, which employs global optimization. The formulation provides strong a priori guarantees on both robust and expected policy loss by minimizing specific norms of the Bellman residual. Solving a bilinear program optimally is NP-hard, but this is unavoidable because the Bellman-residual minimization itself is NP-hard. We describe and analyze both optimal and approximate algorithms for solving bilinear programs. The analysis shows that this algorithm offers a convergent generalization of approximate policy iteration. We also briefly analyze the behavior of bilinear programming algorithms under incomplete samples. Finally, we demonstrate that the proposed approach can consistently minimize the Bellman residual on simple benchmark problems.", "creator": "LaTeX with hyperref package"}}}