{"id": "1012.6018", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Dec-2010", "title": "Learning a Representation of a Believable Virtual Character's Environment with an Imitation Algorithm", "abstract": "in historical video games, capturing virtual characters'optimal decision systems often use entirely a simplified representation of the world. to increase both their autonomy autonomy and thus believability capacity we want those characters to be able to quietly learn off this representation from human players. we propose them to continuously use a model called growing personal neural gas to learn by imitation the topology of supplying the environment. reviewing the implementation of the model, whether the sensory modifications discussed and relating the specification parameters then we am used for are detailed. then, the quality of the learned representations encountered and their subsequent evolution tests during joining the reinforcement learning experiment are studied using different interactive measures. improvements for the growing neural fluid gas to give driver more information to mimic the current character'spatial s model are possibly given in drafting the conclusion.", "histories": [["v1", "Wed, 29 Dec 2010 19:58:44 GMT  (225kb)", "http://arxiv.org/abs/1012.6018v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["fabien tenc\\'e", "c\\'edric buche", "pierre de loor", "olivier marc"], "accepted": false, "id": "1012.6018"}, "pdf": {"name": "1012.6018.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["tence@enib.fr,", "buche@enib.fr,", "deloor@enib.fr,", "olivier.marc@virtualys.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n01 2.\n60 18\nv1 [\ncs .A\nI] 2\n9 D\nec 2\n01 0\nIn video games, virtual characters\u2019 decision systems often use a simplified representation of the world. To increase both their autonomy and believability we want those characters to be able to learn this representation from human players. We propose to use a model called growing neural gas to learn by imitation the topology of the environment. The implementation of the model, the modifications and the parameters we used are detailed. Then, the quality of the learned representations and their evolution during the learning are studied using different measures. Improvements for the growing neural gas to give more information to the character\u2019s model are given in the conclusion."}, {"heading": "INTRODUCTION", "text": "One of the major goals of video games is to make the user feel like he/she really is in the game environment. To achieve this, it is possible to use complex devices to increase immersion like surround sound systems and stereoscopic screens. Another way is to make rich environments to increase presence. The latter can be done by, among other things, having characters with believable behaviours (Bates 1994). To generate those behaviours, models from artificial intelligence are used in the game industry. For those models to perceive the environment, game designers have to create a simplified representation of the environment, which is often defined a priori.\nDefining by hand every new environment\u2019s representation is a time-consuming work. We propose that our characters will be able to learn those representations, for them to be autonomous. This learning will be unsupervised and online: the character will learn while it plays without the judgement of a human. To be able to achieve the best believability, we want the computercontrolled characters to do like human-controlled char-\nacters. Indeed, there are no better example of what a believable behaviour is than a human behaviour itself. It is this kind of learning, by example (Del Bimbo A., Vicario E. 1995) or by imitation (Gorman and Humphrys 2007; Bauckhage et al. 2007) we want to use to learn a representation of the environment.\nThis article first presents the growing neural gas model which is used to learn the representation of the environment. Then the characteristics and qualities of the learned representations are assessed by different measures. To conclude, some enhancements are proposed for the growing neural gas to give more information to the character\u2019s model."}, {"heading": "LEARNING A REPRESENTATION OF THE ENVIRONMENT", "text": "Models which control virtual characters use different types of representation to find paths to go from one point to another. Classic approaches use a graph: nodes represent accessible places and edges represent paths between each place. Actual solutions tend to use a mesh, with different degrees of complexity, to represent the zones where the character can go. The problem with the latter solutions is that they use algorithms to find the optimal path between two points and not the most believable path. With graphs, it is possible to have more control on the paths used by the character.\nInstead of designing graphs a priori, we want them to be learned by imitation of a human player. This work as been done in (Thurau et al. 2004) where nodes and a potential field are learned from humans playing a video game. The character is then using this representation to move in the game environment, following the field defined at each node. To learn the position of the nodes, Thurau use an algorithm called Growing Neural Gas (GNG).\nThe GNG (Fritzke 1995) is a graph model which is capable of incremental learning. Each node has a position (x,y,z) in the environment and has a cumulated error which measures how well the node represents its\nsurroundings. Each edge links two nodes and has an age which gives the time since it was last activated. This algorithm needs to be omniscient, because the position of the imitated player, the demonstrator, is to be known at any time.\nThe principle of the GNG is to modify its graph, adding or removing nodes and edges and changing the nodes\u2019 position for each given demonstrator\u2019s position. The algorithm does the following: for each input the closest and the second closest nodes are picked. An edge is created between those nodes and the closest node\u2019s error is increased. Then the closest node and its neighbours are attracted toward the input. The ages of the closest node\u2019s edges are increased by 1 and too old edges are deleted. Each \u03bb input a node is inserted between the node with the maximum error and its neighbours having the maximum error. At the end of an iteration, each node\u2019s error is decreased by a small amount.\nThe version we use is a bit modified to give better results for our needs as shown by figure 1. Instead of inserting a new node each \u03bb input, a node is inserted when a node\u2019s error is superior to a parameter MAX ERROR. As each node\u2019s error is reduced by a small amount ERROR DECAY for each input, the modified GNG algorithm does not need a stopping criterion. Indeed, if there are many nodes which represent well the environment, the error added for the input will be small and for a set of inputs, the total added error will be distributed among several nodes. The decay of the error will avoid new nodes to be added to the GNG resulting in a stable state. However if the player which serves as a example goes to a place in the environment he has never gone before, the added error will be enough to counter the decay of the error, resulting in new nodes to be created.\nThis algorithm has 5 parameters which influence the density of nodes, the quality of the representation, the adaptivity and the time to reach a stable state:\n\u2022 The attraction applied to first toward (x, y, z) \u2022 The attraction applied to first\u2019s neighbours toward (x, y, z) \u2022 The nodes\u2019 error decay, ERROR DECAY \u2022 The nodes\u2019 maximum error, MAX ERROR \u2022 The edges\u2019 maximum age, MAX AGE\nNodes can be used as a representation for the character\u2019s decision system. However, edges only represent proximity and not paths between nodes: nodes can be close but there may be a obstacle between them, so edges cannot be used by the model."}, {"heading": "EVALUATION", "text": "We used the game Unreal Tournament 2004 because it features quite complex environments. Human players can also control avatars in the game so the GNG can learn for them. We have to choose the parameters in a empirical way because we cannot find them analytically nor use an optimization algorithm. Indeed, our goal is believability and it can be only measured with human judges. This kind of evaluation is not suitable for optimization. The best parameters we found are:\n\u2022 Attraction force applied to first is 0.03 times the vector (x, y, z)\u2212 first \u2022 Attraction force applied to first\u2019s neighbours is 0.0006 times the vector (x, y, z)\u2212 second \u2022 Nodes\u2019 error decay is 10 \u2022 Nodes\u2019 maximum error is 20000 \u2022 Edges\u2019 maximum age is 75\nTo compare with other environments, the position in Unreal Tournament is given in Unreal units (1 meter is roughly equal to 50 Unreal units) and all the parameters are based on a demonstrator\u2019s position in Unreal units.\nWith those parameters we trained 2 GNG on 2 different maps. The first one is a simple map, called Training Day. It is small and flat which is interesting to visualize the data in 2 dimensions. The second one, called Mixer, is much bigger and complex with stairs, elevators and slopes which is interesting to see if the GNG behave well in 3 dimensions. The results is given in figure 2 for the simple map and in figure 3 for the complex map.\nTo study the quality of the learned topology, we first choose to compare the GNG\u2019s nodes with the navigation point placed manually by the map creators. Of course, we do not want the GNG to fit exactly those points but it gives a first evaluation of the learned representation. In our case, we have those navigation points but our goal is that they are not longer necessary for a character to move in a new environment. Figure 4 shows both the navigation points and the GNG\u2019s nodes. As we can see, the two representations look alike which indicates that the model is very effective in learning the shape of the map. However, there are zones where the GNG\u2019s nodes\nare more concentrated than the navigation points and other where they are less concentrated. We cannot tell now if it is a good behaviour or not as we should evaluate an agent using this representation to see if it navigate well. Even in the less concentrated zones, the nodes are always close enough to be seen from one to another, so it should not be a problem.\nAs the attraction applied to the nodes for each input is constant, the GNG is not converging to a fixed state. This is a wanted behaviour, allowing the GNG to adapt to a variation in the use of the map: if the demonstrator suddenly uses a part of the map which he/she has not explored yet, the GNG will be able to learn this new part even if the GNG has been learning for a long time. We do want, however, the GNG to learn quickly the topology and to keep a good representation of the world over time.\nTo study the time evolution of the GNG\u2019s characteristics, we introduce a distance measure: the sum of the distance between each navigation point and its closest node. We also study the evolution of the number of nodes because we do not want the GNG to grow indefinitely. Figure 5 shows this two measures for the simple and the complex maps. For the simple map, the GNG reached its maximum number of node and minimum error in approximatively 5 minutes of real-time simulation. For the complex map, it takes more time, about 25 minutes, but results at 12 minutes are quite good. Those results show that it is possible to have an character that learns during the play.\nThe GNG can handle inputs from multiple demonstrators. Figure 6 shows the distance and number of node for a GNG trained on 1 demonstrator and for a GNG trained on 4 demonstrators. The learning with 4 demonstrators is, as expected, faster: about 3 minutes for the distance to stabilize instead of 5 minutes for 1 demonstrator. It is interesting to note that the learning is not 4 times faster but the gain is still important. Learning with multiple demonstrators seems to give a GNG with less variation during the learning. The gain have however a small drawback: the number of nodes is a little superior for multiple demonstrators. It may be due to the fact that demonstrators are scattered in the environment instead of a unique demonstrator following a path.\nIt is interesting to compare two learned GNG on the same demonstrator in the same environment and conditions but for 2 different simulations. The goal is to see if the two representations fit. Figure 7 shows that the resulting GNG are a bit different. The first GNG has 24 nodes and has a cumulated distance to navigation points of approximatively 3300 Unreal units. The second GNG has 25 nodes and has a cumulated distance of approximatively 3150 Unreal units. This proves that the GNG does not converge toward a unique solution but those solutions are quite similar in shape, number of nodes and distance to navigation points.\nThe last evaluation assesses the impact of the frequency at which the demonstrator\u2019s position is given to the GNG. For the previous experiments, the frequency was set to 10Hz. Figure 8 shows the differences for 1, 10 and 100 Hz. Results indicate that 1Hz give comparable results to 10Hz but it takes much longer to give a good representation. At 100Hz, the GNG reaches a stable state as fast as at 10Hz but the resulting GNG has much more nodes resulting in a lower error. Using a high frequency is therefore not useful because the number of nodes can be increased changing the MAX ERROR and ERROR DECAY parameters without using computing power."}, {"heading": "IMPROVEMENTS", "text": "The main drawback of the GNG is that the only information extracted is the position of the nodes. The biggest difference between the GNG we implemented and navigation graphs coded manually is that the latter\ngive also information on the accessibility of a node from another. Edges in a GNG gives only an information on proximity but there can be a obstacle between two nodes joined by an edge. An idea could be to store the previously activated node and create an edge to the current activated node. Like the GNG edges we should make the edge age and disappear if they are too old. Whether those edges should replace the GNG edges could be an interesting experiment to set up.\nTo share more information with the behaviour model, we can learn which kind of action is done when the character is near a node. The character, knowing its nearest node, can choose the best action to do. This process is quite similar to the process of tagging: designers often annotate navigation points with information such as \u201cjump spot\u201d or \u201ccovering\u201d.\nAnother interesting information to learn is if the demonstrator walk exactly at the node\u2019s position or if there is a big variation in the distance to the node. The nodes\u2019 error give a bit of information about this variation, however with the error decay, this information is lost over time. The learning is problematic because each winner node moves so it does not represent the same area. It could be possible to update the influence radius of winner and its neighbours according to their current radius and the distance to the example. The exact formula is yet to be found."}, {"heading": "CONCLUSION", "text": "Virtual environments, like for example video games, need believable characters for users to feel in the environment. To improve the characters\u2019 behaviour, we decided to use a growing neural gas to learn by imitation the topology of the environment. We believe that it will make the agent use the environment in a more human-like fashion. It also removes the burden from the maps designers of placing manually the navigation graph.\nOur first evaluations tend to show that the growing neural gas gives a good representation of the environment. The learning is fast, with one demonstrator it\ntakes up to 25 minutes to learn a representation of the whole environment. As it is possible to learn with several demonstrators, learning can be done very quickly. The character can thus adapt quickly to changes in the use of the environment and evolve while playing. Although different runs gives different results, the representations are very similar.\nWith this ability to learn the environment, the agent can be placed in any simulation without a priori knowledge and still be able to move by imitating human users. As the learning is quite fast, users could perceive the evolution in the way the agent acts and thus believing it can be human. The growing neural gas gives autonomy and believability to the model.\nThe next step is to put more information in the growing neural gas, learning which node is accessible from each node and finding the best action at each node. To see if this work really gives results we will have to test the difference in the behaviour between an agent using the navigation points and an agent using the growing neural gas."}], "references": [{"title": "The Role of Emotion in Believable Agents", "author": ["J Bates"], "venue": "Communications of the ACM", "citeRegEx": "Bates,? \\Q1994\\E", "shortCiteRegEx": "Bates", "year": 1994}, {"title": "Learning Human Behavior from Analyzing Activities in Virtual Environments MMI-Interaktiv", "author": ["C Bauckhage", "B Gorman", "C Thurau", "M Humphrys"], "venue": null, "citeRegEx": "Bauckhage et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Bauckhage et al\\.", "year": 2007}, {"title": "Specification by-Example of Virtual Agents Behavior", "author": ["A. Del Bimbo", "E. Vicario"], "venue": "IEEE Transactions on Visualization and Computer Graphics,", "citeRegEx": "Bimbo and Vicario,? \\Q1995\\E", "shortCiteRegEx": "Bimbo and Vicario", "year": 1995}, {"title": "A growing neural gas network learns topologies in \u2018Advances in Neural Information Processing Systems 7", "author": ["B Fritzke"], "venue": null, "citeRegEx": "Fritzke,? \\Q1995\\E", "shortCiteRegEx": "Fritzke", "year": 1995}, {"title": "Imitative learning of combat behaviours in first-person computer games in \u2018Proceedings of CGAMES 2007, the 11th International Conference on Computer Games: AI, Animation, Mobile, Educational & Serious Games", "author": ["B Gorman", "M Humphrys"], "venue": null, "citeRegEx": "Gorman and Humphrys,? \\Q2007\\E", "shortCiteRegEx": "Gorman and Humphrys", "year": 2007}, {"title": "Learning human-like movement behavior for computer games in \u2018Proceedings of the 8th International Conference on the Simulation of Adaptive Behavior (SAB\u201904)", "author": ["C Thurau", "C Bauckhage", "G Sagerer"], "venue": null, "citeRegEx": "Thurau et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Thurau et al\\.", "year": 2004}], "referenceMentions": [{"referenceID": 0, "context": "The latter can be done by, among other things, having characters with believable behaviours (Bates 1994).", "startOffset": 92, "endOffset": 104}, {"referenceID": 4, "context": "1995) or by imitation (Gorman and Humphrys 2007; Bauckhage et al. 2007) we want to use to learn a representation of the environment.", "startOffset": 22, "endOffset": 71}, {"referenceID": 1, "context": "1995) or by imitation (Gorman and Humphrys 2007; Bauckhage et al. 2007) we want to use to learn a representation of the environment.", "startOffset": 22, "endOffset": 71}, {"referenceID": 5, "context": "This work as been done in (Thurau et al. 2004) where nodes and a potential field are learned from humans playing a video game.", "startOffset": 26, "endOffset": 46}, {"referenceID": 3, "context": "The GNG (Fritzke 1995) is a graph model which is capable of incremental learning.", "startOffset": 8, "endOffset": 22}], "year": 2013, "abstractText": "In video games, virtual characters\u2019 decision systems often use a simplified representation of the world. To increase both their autonomy and believability we want those characters to be able to learn this representation from human players. We propose to use a model called growing neural gas to learn by imitation the topology of the environment. The implementation of the model, the modifications and the parameters we used are detailed. Then, the quality of the learned representations and their evolution during the learning are studied using different measures. Improvements for the growing neural gas to give more information to the character\u2019s model are given in the conclusion.", "creator": "LaTeX with hyperref package"}}}