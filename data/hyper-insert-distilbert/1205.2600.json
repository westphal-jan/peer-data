{"id": "1205.2600", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-May-2012", "title": "A Uniqueness Theorem for Clustering", "abstract": "despite the widespread extensive use study of clustering, recently there is now distressingly relevant little general theory subset of clustering available. theoretical questions like \" hey what distinguishes a clustering analysis of textual data from other topological data partitioning? \", \" are now there essentially any exact principles constraints governing all clustering paradigms? \", \" well how should a single user automatically choose perhaps an appropriate hierarchical clustering estimation algorithm formulated for studying a particular particular task? \", pricing etc. concepts are almost completely unanswered by the existing body of clustering literature. we unanimously consider an axiomatic approach to the optimal theory taxonomy of clustering. thence we subsequently adopt the technical framework of kleinberg, [ b kle03 ]. preceded by relaxing one type of martin kleinberg'r s clustering criteria axioms, we generally sidestep [ his impossibility generating result and arrive at a historically consistent set comprising of distinct axioms. we suggest to extend from these axioms, aiming \u2026 to help provide an advanced axiomatic taxonomy [ of simple clustering knowles paradigms. such a numerical taxonomy should provide users some guidance concerning the perceived choice of the primary appropriate clustering paradigm : for capturing a individually given cognitive task. the specific main result principle of carrying this pioneering paper forth is a geometric set composed of abstract properties that broadly characterize the single - linkage clustering objective function. this descriptive characterization result usually provides somewhat new insight ways into the broader properties of universally desired data groupings that make single - bond linkage the appropriate choice. we jointly conclude by considering a taxonomy listing of clustering convex functions based almost on abstract properties that each satisfies.", "histories": [["v1", "Wed, 9 May 2012 18:48:23 GMT  (172kb)", "http://arxiv.org/abs/1205.2600v1", "Appears in Proceedings of the Twenty-Fifth Conference on Uncertainty in Artificial Intelligence (UAI2009)"]], "COMMENTS": "Appears in Proceedings of the Twenty-Fifth Conference on Uncertainty in Artificial Intelligence (UAI2009)", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["reza bosagh zadeh", "shai ben-david"], "accepted": false, "id": "1205.2600"}, "pdf": {"name": "1205.2600.pdf", "metadata": {"source": "CRF", "title": "A Uniqueness Theorem for Clustering", "authors": ["Reza Bosagh Zadeh", "Shai Ben-David", "David R. Cheriton"], "emails": ["rezab@cs.cmu.edu", "shai@cs.uwaterloo.ca"], "sections": [{"heading": null, "text": "Despite the widespread use of Clustering, there is distressingly little general theory of clustering available. Questions like \u201cWhat distinguishes a clustering of data from other data partitioning?\u201d, \u201cAre there any principles governing all clustering paradigms?\u201d, \u201cHow should a user choose an appropriate clustering algorithm for a particular task?\u201d, etc. are almost completely unanswered by the existing body of clustering literature. We consider an axiomatic approach to the theory of Clustering. We adopt the framework of Kleinberg, [Kle03]. By relaxing one of Kleinberg\u2019s clustering axioms, we sidestep his impossibility result and arrive at a consistent set of axioms. We suggest to extend these axioms, aiming to provide an axiomatic taxonomy of clustering paradigms. Such a taxonomy should provide users some guidance concerning the choice of the appropriate clustering paradigm for a given task. The main result of this paper is a set of abstract properties that characterize the Single-Linkage clustering function. This characterization result provides new insight into the properties of desired data groupings that make SingleLinkage the appropriate choice. We conclude by considering a taxonomy of clustering functions based on abstract properties that each satisfies."}, {"heading": "1 Introduction", "text": "The task of clustering is a basic data analysis technique in many fields. Whenever one has a set of objects with an underlying measure of similarity, it is natural to seek a grouping of these objects in groups that respect these similarities. While the clustering task thus de-\nscribed arises in a very wide range of different applications, it is, of course, ill defined. Given a specific data set there are often many different ways to partition that data in a way that adheres to the above description. Consequently, there is an overwhelming variety of clustering paradigms and techniques currently in use.\nThe majority of work in the study of clustering has so far been in the context of concrete methods, concrete data generative models or concrete data-sets. However, there is very little research considering clustering from a more general perspective, research into unifying principles that are common to all clustering paradigms as well as research comparing different clustering paradigms in terms of their characterizing features. Our research aims to address these higher level aspects of clustering.\nWe wish to reason about clustering independently of any particular algorithm, objective function, or generative data model. We define a clustering function as one that satisfies a set of properties. This is often termed as an axiomatic framework. Functions that satisfy the basic axioms required to be called a clustering function can then further classified according to other properties to provide its user with guidance concerning which such function best suits their application.\nKleinberg [Kle03] sets forth three properties that one may expect all clustering functions to satisfy, but then proves no function can satisfy all three properties. By shifting the formalism of that discussion to clustering quality measures, [ABD08] concludes that Kleinberg\u2019s impossibility result is more an artifact of the formalism and framework in which the result was stated, rather than a natural and inherent contradiction in our intuition about clustering. In the current paper, we circumvent Kleinberg\u2019s impossibility result by relaxing one of his axioms. We then propose some additional abstract properties of clustering functions and obtain a uniqueness theorem, showing that only the Single-\nLinkage function satisfies the resulting set of properties. Our result highlights the aspects of a similarity measure over a data set that Single-Linkage is focused on.\nWe adopt the framework and the axioms proposed by [Kle03], however, we circumvent the impossibility result by restricting our attention to clustering algorithms that take the number of clusters to be created as part of their input. It is known that such a restriction suffices to render the resulting set of axioms consistent. In fact, most of the common clustering algorithms, such as Single-Linkage and Min-Sum kclustering, satisfy this relaxed set of axioms.\nIt is clear that fixing the number of clusters beforehand restricts the set of functions that can be described by the framework. However, one interpretation of Kleinberg\u2019s impossibility result is that if one does not give algorithms the number of clusters they are to return, then the algorithm must be performing some unintuitive operations. Furthermore, many algorithms used in practice require the number of clusters. Indeed, all objective functions (k-means, k-median, . . .) used in practice require k, along with many hierarchical (Single-Linkage, Complete Linkage, . . .) and spectral algorithms.\nOur characterization of the Single-Linkage (SL) clustering is in terms of two other notions:\n\u2022 Given a weighted graph, aminimum spanning tree is a weighted tree which touches every node, while minimizing the sum of the edges used in the tree. [GR69] showed that all the information needed to compute the Single-Linkage k-partitioning of a graph is present in the minimum spanning tree (MST) of the graph. Given a weighted graph and k, the Single-Linkage algorithm returns a kpartitioning on the nodes. It is easy to see that Single-Linkage clustering of a data set can be obtained by computing the MST of the induced complete graph (where edges are weighted by the distance between their end points), then cutting the k \u2212 1 most expensive edges of the MST; leaving behind exactly k disconnected components, which are returned as clusters. It follows, that if two distance functions give rise to the same MST then Single-Linkage will return the same clustering on both. We\u2019ll prove that Single-Linkage is the only clustering function that has this property, on top of satisfying some other natural clustering axioms.\n\u2022 Given a dissimilarity measure, d over some domain set X, we define the d-induced path distance, Pd, by setting, for all x, y \u2208 X, Pd(x, y) = minq\u2208Px,y maxi<|q| d(q(i), q(i + 1)) (where |q| denotes the number of vertices in a path q, and q(i)\nis the i\u2019th vertex in the path). We say that a clustering function, F , is path-distance-coherent if, for any pair of distance measures d, d\u2032 over the same domain, if d and d\u2032 induce the same path distance (namely, for all x, y, it is the case that Pd(x, y) = Pd\u2032(x, y)) then, for all k, F (d, k) = F (d\u2032, k).\nIt is easy to see that Single-Linkage is a pathdistance-coherent clustering function. Furthermore, it is not hard to realize that if d and d\u2032 give rise to the same MST then they induce the same path distance (namely, for all x, y, Pd(x, y) = Pd\u2032(x, y)). It follows that if a clustering function is path-distance coherent it is also MST -coherent. Our characterization of Single-Linkage in terms of MST therefore implies a similar characterization in terms of path coherence. Namely, SingleLinkage is the only clustering function that is path-distance-coherent, on top of satisfying some other natural clustering axioms.\nPath distance coherence can be viewed as a natural property that users may wish their choice clustering function to satisfy. For example, consider the case a data set of objects that have been subject to some noisy perturbations, allowing an object to be replaced by another if their distance is small. This may be the case in a data set of DNA sequences of different species under some edit distance, or a set of folklore documents that have been copied over and over again. In such cases, a user may require that a clustering groups together objects that might have a common ancestor, and can be formalized as objects with a small path-distance between them. Our message to the user is that in such a case, Single-Linkage should be their choice clustering function.\nThe outline of this paper is as follows: First we lay down formal foundations for our properties. After defining the properties, to investigate the ramifications of exhibiting algorithms which satisfy a subset of these properties, in section 2 we introduce the Minimum Spanning Tree Cuts family of partitioning functions. Then we prove the uniqueness theorem (theorem 5), investigate the properties satisfied by the Min-Sum kclustering objective in section 3, and conclude with a proposed taxonomy of partitioning functions (table 1)."}, {"heading": "More related work", "text": "As mentioned above, our formal framework is based on Kleinberg\u2019s [Kle03]. We also adopt two of the three axioms proposed in that paper, Consistency and Scale Invariance. We replace the Richness paper of [Kle03] by its version for the case of fixed numebr of clusters, k-Richness.\nAnother related axiomatic approach is the work of Jardine and Sibson [JS75]. They constrain their view of clustering functions and only consider hierarchical functions. They show that Single-Linkage is the only function satisfying a set of properties; however, this is primarily a consequence of the fact that one of their properties is an implicit optimization criterion that is uniquely optimized by Single-Linkage. Our collection of properties are drastically different from [JS75] and do not restrict the formalism to only consider hierarchical functions. Furthermore, none of our properties are implicitly optimizing the Single-Linkage criterion, and we show that important subsets of our properties are not enough to characterize Single-Linkage; meaning all 4 properties are necessary to achieve uniqueness."}, {"heading": "Formal Preliminaries", "text": "A partitioning function acts on a set S of n \u2265 2 points along with an integer k > 0, and pairwise distances among the points in S. The points in S are not assumed to belong to any specific set; the pairwise distances are the only data the partitioning function has about them. Since we wish to deal with point sets that do not necessarily belong to a specific set, we identify the points with the set S = {1, 2, ..., n}. We can then define a distance function to be any function d : S \u00d7 S \u2192 R such that for distinct i, j \u2208 S , we have d(i, j) \u2265 0, d(i, j) = 0 if and only if i = j, and d(i, j) = d(j, i) - in other words d must be symmetric and two points have distance zero if only if they are the same point.\nSometimes we write d = \u3008e1, e2, . . . , e(n2)\u3009 to mean the set of edges that exist between all pairs of n points. This list is always ordered by increasing weight. w(e) is the weight of edge e which connects some two points i, j. So w(e) = d(i, j).\nA partitioning function is a function F that takes a distance function d on S \u00d7 S and an integer k \u2265 1 and returns a k-partitioning of S. A k-partitioning of S is a collection of non-empty disjoint subsets of S whose union is S. The sets in F (d, k) will be called its clusters. Two clustering functions are equivalent if and only if they output the same partitioning on all values of d and k - i.e. functionally equivalent. Now we describe the Single-Linkage partitioning function.\nIt should be noted that the behavior of Single-Linkage is robust against small fluctuations in the weight of the edges in d, so long as the order of edges does not change. This can be seen readily from algorithm 1.\nFinally, an edge e of d is called redundant if the two ends of e (call them x, y) are connected via a path whose edges are all individually of smaller weight than\nAlgorithm 1 Single-Linkage(d, k)\nInput: d = \u3008e1, e2, . . . , e(n2)\u3009, k \u2265 1. Output: The Single-Linkage k-partitioning.\n\u0393\u2190 {{1}, {2}, . . . , {n}} 4: i\u2190 1\nwhile |\u0393| > k do let x, y be the two ends of ei let cx \u2208 \u0393, cy \u2208 \u0393 be the clusters of x and y\n8: if cx 6= cy then Merge cx and cy \u0393\u2190 (\u0393\\cx, cy) \u222a {cx \u222a cy}\nend if 12: i\u2190 i+ 1\nend while Output \u0393\nw(e). These are exactly those edges which have cx = cy, and thus fail the line 8 condition of algorithm 1."}, {"heading": "2 Uniqueness Theorem", "text": "Now in an effort to distinguish clustering functions from partitioning functions, we lay down some properties that one may like a clustering function to satisfy. Here is the first one. If d is a distance function, then we define \u03b1 \u00b7 d to be the same function with all distances multiplied by \u03b1.\nScale-Invariance. For any distance function d, number of clusters k, and scalar \u03b1 > 0, we have\nF (d, k) = F (\u03b1 \u00b7 d, k)\nThis property simply requires the function to be immune to stretching or shrinking the data points linearly. It effectively disallows clustering functions to be sensitive to changes in units of measurement - which is desirable. We would like clustering functions to not have any predefined hard-coded distance values in their decision process. This property was initially used in an axiomatic clustering framework by [JS75].\nThe next property is one that is exhibited by algorithms such as {Single, Complete, Average}-linkage. Let the order of edges in a distance function d be defined as the ordering induced by the weights of the edges.\nOrder-Consistency. For any two distance functions d and d\u2032, number of clusters k, if the order of edges in d is the same as the order of edges in d\u2032,\nthen F (d, k) = F (d\u2032, k)\nThis essentially means that the only way that the function uses edge weights is by comparing them against each other. Functions that do arithmetic on the edge\nweights (e.g. the k-median objective function) often do not satisfy this property, whereas algorithms such as Complete-Linkage do. Notice that OrderConsistency implies Scale-Invariance - meaning that any function which satisfies Order-Consistency will also satisfy Scale-Invariance. For this reason, whenever a function satisfies Order-Consistency as well as Scale-Invariance, we don\u2019t mention Scale-Invariance explicitly. This property was initially considered by [JS75].\nThe next property ensures that the clustering function is \u201crich\u201d in types of partitioning it could output. For a fixed S and k, Let Range(F (\u2022, k)) be the set of all possible outputs while varying d.\nk-Richess. For any number of clusters k, Range(F (\u2022, k)) is equal to the set of all k-partitions\nof S\nIn other words, if we are given a set of points such that all we know about the points are pairwise distances, then for any partitioning \u0393, there should exist a d such that F (d, k) = \u0393. By varying distances amongst points, we should be able to obtain all possible k-partitionings.\nThe next property is more subtle and was initially introduced in [Kle03], along with richness. We call a partitioning function \u201cconsistent\u201d if it satisfies the following: when we shrink distances between points in the same cluster and expand distances between between points in different clusters, we get the same result. Formally, we say that d\u2032 is a \u0393-transformation of d if (a) for all i, j \u2208 S belonging to the same cluster of \u0393, we have d\u2032(i, j) \u2264 d(i, j); and (b) for all i, j \u2208 S belonging to different clusters of \u0393, we have d\u2032(i, j) \u2265 d(i, j). In other words, d\u2032 is a transformation of d such that points inside the same cluster are brought closer together and points not inside the same cluster are moved further away from one another.\nConsistency. Fix k. Let d be a distance function, and d\u2032 be a F (d, k)-transformation of d. Then\nF (d, k) = F (d\u2032, k)\nIn other words, suppose that we run the partitioning function F on d to get back a particular partitioning \u0393. Now, with respect to \u0393, if we shrink in-cluster distances or expand between-cluster distances and run F again, we should still get back the same result - namely \u0393.\nThe difference between these and the properties defined in [Kle03] is that at all times, the partitioning function F is forced to return a fixed number of clusters: k. If this were not the case, then the above 4 properties could never be satisfied by any function. In\nmost popular clustering algorithms such as k-means, Single-Linkage, and spectral clustering, the number of clusters to be returned is determined beforehand \u2013 by the human user or other methods \u2013 and passed into the clustering function as a parameter. Kleinberg mentions this fact, but since the goal of [Kle03] was an impossibility result, k was not provided to partitioning functions, thereby making the properties unsatisfiable.\nProving characterization of an object by some axioms always comes in two parts: satisfiability and uniqueness. Since satisfiability is suspect as a result of [Kle03], we now prove that our properties are simultaneously satisfiable, even though a simple modification of the framework would render them unsatisfiable. An overview of clustering functions and the properties each satisfies is given in table 1.\nTheorem 1. Single-Linkage is Consistent, k-Rich, Scale-Invariant, and Order-Consistent.\nProof. Single-Linkage is Order-Consistent because it performs all its decisions by simply comparing two edges to see which is smaller/larger. Under OrderConsistent changes to the input, the decisions made by SL do not change, and therefore neither will its output. Scale-Invariance follows immediately since OrderConsistency is satisfied.\nFor k-Richness, when aiming to obtain a k-partitioning \u0393, it is enough to set \u0393 in-cluster distances to 1, and between cluster distances to 2 - then SL will return \u0393. What remains is to show Consistency.\nTo show show consistency for SL, let SL(d, k) = \u0393. With respect to \u0393, we call edges with each side in two different clusters outer edges, and edges with both ends inside a cluster inner edges. Consider that to construct \u0393, SL sorts all the edges of the graph, and successively looks at each edge: while there are more than k clusters, SL turns the smallest outer edge into an inner edge (therefore reducing the number of clusters by 1). An inner edge that is larger than any outer edge is called a redundant inner edge because during the Single-Linkage process, the edge is not considered for merging, but nevertheless becomes an inner edge as a result of transitivity. Let the edges of the input graph be represented as E = \u3008e1, e2, . . . , e(n2)\u3009, in ascending order. Each of these edges can either be an outer edge, a non-redundant inner edge, or a redundant inner edge. By the SL process, we know that there exists prefix of E (call it P ) which will be all inner edges, and will be enough to define \u0393. If k = n, then P will be empty as there are no inner edges. Now consider all possible \u0393-transformations of d. If we shrink a non-redundant inner edge of d, then P will not change and the SL process will still produce \u0393. If we shrink a redundant\ninner edge, then P may change and become P \u2032, but the clustering produced will not change as a result of transitivity. Finally, if we expand an outer edge of E, then again P will not change thereby leaving \u0393 intact. So in all possible \u0393-transformations of d, we have SL(d, k) = SL(d\u2032, k). 1"}, {"heading": "MST-Coherence and the MST Cuts family", "text": "As we observed from theorem 1, Consistency, Scale Invariance, and k-Richness do not uniquely determine a Single-Linkage since at least SL and MSKC \u2013 which are different clustering functions \u2013 satisfy all 3 properties. Two clustering functions are equivalent if and only if they output the same partitioning on all values of d and k. To uniquely characterize SL, we introduce a new property. For ease of notation, let MST(d) be the minimum spanning tree of the graph induced by d. MST(d) is defined as the output of Kruskal\u2019s algorithm, with some some arbitrary tie-breaking strategy that is universal to all mentions of MST.\nMST-Coherence. If d and d\u2032 are distance functions such that MST(d) = MST(d\u2019), then for all\nk, F (d, k) = F (d\u2032, k)\nIn other words, if two datasets have the same minimum spanning tree, then for a partitioning function F to be MST-Coherent, it must be that F returns the same partitioning on both datasets. Note that for two minimum spanning trees to be equal, we must all have all nodes, edges, and edge weights involved be equal and of the same weight. MST-Coherence is effectively forcing algorithms to ignore redundant edges, as is apparent in step 6 of the proof of theorem 5. MST-Coherence is not a property that we expect of all clustering functions, so we will never refer to it as an axiom. It is important to see that the properties are simultaneously satisfiable.\nTheorem 2. Single-Linkage satisfies MSTCoherence, Consistency, k-Richness, and OrderConsistency.\n1Kleinberg [Kle03] treated SL as a Consistent function without exhibiting a proof; we include a proof here for completeness.\nProof. Consistency was proven in theorem 1. kRichness, MST-Coherence, and Order-Consistency are proven as part of a more general result in the proof of theorem 3.\nWe will prove the main uniqueness theorem shortly. Before doing this, we reflect on the relationships between subsets of these properties and show that in addition to Single-Linkage, there exist other partitioning functions satisfying three of the four properties. But the only function that can satisfy all four is SingleLinkage. For the purpose of theorem 3, a property X is \u2018necessary\u2019 if all remaining properties together (3 of the 4) are not enough to characterize Single-Linkage.\nTheorem 3. Consistency, and k-Richness are necessary to characterize Single-Linkage.\nProof. For each of the mentioned properties, we show that all the other properties are not enough to uniquely characterize Single-Linkage. For each of the properties, we exhibit an algorithm that acts differently than Single-Linkage, and satisfies all the properties except for one. In other words, we show that without each of these properties, the remaining ones do not uniquely characterize Single-Linkage.\nWe describe the Minimum Spanning Tree Cuts (MSTC) procedure, which in fact defines a family of clustering functions. As usual, the task is to partition n points into k clusters. Consider the family of clustering functions produced by computing the minimum spanning tree of the graph, and then cutting away k \u2212 1 predefined edges in set Ck. These k \u2212 1 edges are defined by the ascending order of their length in the minimum spanning tree. For example, if the set of edges to be cut were defined by Ck = {1, 2, 3, . . . , k \u2212 1}, |Ck| = k \u2212 1, the algorithm would cut the shortest edge of the MST, then the second shortest edge, the third, all the way until the (k\u22121)\u2019th edge has been cut, leaving exactly k components, each representing a cluster. As another example, setting Ck = {n \u2212 1, n \u2212 2, n \u2212 3, . . . , n \u2212 k + 1} defines Single-Linkage, since SL is exactly the algorithm where we compute the MST then cut away the k\u22121 most expensive edges. The entire family of MSTC functions are obtained by varying Ck. As we will see,\nSingle-Linkage is the only Consistent member of the MSTC family.\nConsistency is necessary. We claim that the entire MSTC family of partitioning functions are all MSTCoherent, k-Rich, and Order-Consistent. However, it is not true that all members of MSTC are consistent - the only consistent function in MSTC is SingleLinkage. Thus Consistency is necessary to characterize SL.\nWe prove k-Richness is satisfied because we can design the edges we need to be cut to be exactly the edges in Ck: consider a target partitioning \u0393. We may construct a d such that all distances are very large, except for exactly one spanning tree T . Within T , we could like to cut any edge e that is not an in-cluster edge with respect to \u0393. We may do so by picking the size of e such that its position with respect to the other edges in the MST is inside Ck, thus guaranteeing e will be cut by the particular MSTC function. Once such a d has been constructed, we can see that indeed F (d) = \u0393.\nMST-Coherence follows as a result of the fact the decisions made by an MSTC function are entirely dependent on the minimum spanning tree of the input - so if the MST doesn\u2019t change, then neither will the output. Order-Consistency is satisfied because the order and identity of the edges in the MST do not change, even though their absolute weights might, and cutting elements of Ck is done by referring to the position of the edges in the edge-ordering. However, theorem 5 tells us that the only Consistent function within the MSTC family is Single-Linkage. As an example of a member of MSTC that is not Consistent, take Ck = {1, 2, 3, . . . , k \u2212 1}.\nk-Richness is necessary. Now consider the Constant clustering function which always returns the first n\u2212 k+1 elements of S as a single cluster and returns the remaining k\u22121 as singleton clusters with one point inside each cluster, making a total of k clusters. Because this function does not look at d, it is trivially MSTCoherent, Consistent, and Order-Consistent. However, it is not k-Rich because it always returns some singletons - i.e. we could never reach a k-partitioning that has no singletons (a singleton is a cluster with a single in it).\nNow that we have seen our properties do not trivially characterize Single-Linkage, we can move onto proving the uniqueness theorem. Lemma 4. Given a Consistent partitioning function F , and a distance function d with edges in ascending order of weight\nd = \u3008e1, e2, . . . , ep, eq, . . . e(n2)\u3009\nthen for all k > 0, if ep and eq are both inner edges or both outer edges (w.r.t. F (d, k)), we have\nF (\u3008e1, e2, . . . , eq, ep, . . . e(n2)\u3009, k) = F (d, k)\nProof. In other words, whenever we have two edges of the same type (inner or outer), in neighboring positions in the edge ordering of d, we can swap their positions while maintaining the output of F . This is true because if both ep and eq are outer edges, then we can expand ep until w(ep) > w(eq) all the while preserving the output of F (by Consistency). Similarly, if both ep and eq are inner edges, we can shrink eq until w(ep) > w(eq).\nTheorem 5. Single-Linkage is the only Consistent, k-Rich, MST-Coherent, Order-Consistent partitioning function.\nProof. Let F be any Consistent, k-Rich, MSTCoherent partitioning function, and let d be any distance function on n points. We want to show that that for all k > 0, F (d, k) = SL(d, k). For this purpose, we introduce the partitioning \u0393 as whatever the output of SL is on d and k, so SL(d, k) = \u0393. Whenever we say \u201cinner\u201d or \u201couter\u201d edge for this proof, we mean with respect to \u0393.\nBy k-Richness of F , there exists a d1 such that F (d1, k) = SL(d, k) = \u0393. Now, through a series of transformations that preserve the output of F , we transform d1 into d2, then d2 into d3, . . ., until we arrive at d. Let di be represented by an ordered list of its edges in ascending order di = \u3008ei1, ei2, . . . , ei(n2) \u3009.\nBy the definition of Single-Linkage, we know that a prefix p = \u3008e1, e2, . . . , et\u3009 of d are all inner edges, where t is exactly how many edges were considered for merging by the SL algorithm until k clusters were formed. Once the edges of p have all been declared inner edges, then all other inner edges will follow by transitivity. Since all inner edges of \u0393 are identified by p, then p is enough to define \u0393.\nRecall that redundant edges were defined earlier. We define redundant inner edges to mean any inner edges that have weight greater than some outer edge. Such inner edges are not part of p. Redundant inner edges cannot be part of the minimum spanning tree for d, since during Kruskal\u2019s algorithm for MST, the two components that a redundant inner edge connects have already been connected by non-redundant and cheaper inner edges. Since redundant inner edges are not part of the MST of d, increasing their weights will maintain this property, and so by increasing the weight of a redundant inner edge we do not change the MST.\nSince we didn\u2019t change the MST, the output of F will be preserved, by MST-Coherence.\nNow we begin the \u0393-preserving transformations on d1 to eventually transform d1 into d while at each step i maintaining F (di, k) = \u0393.\n1. By k-Richness, we know there exists a d1 such that F (d1, k) = SL(d, k) = \u0393.\n2. Since all edges of p are inner edges, we can shrink them in d1 until their position in the edge ordering of d1 is \u2264 t. Call this newly created dataset d2. d2 has the same first t edges as d, though not necessarily in the same order. This step maintains F (d2, k) = \u0393 by Consistency (we only shrank inner edges).\n3. Now we reorder the first t edges of to be in the exactly the same order as they appear in d. Call the new dataset d3. This step maintains F (d3, k) = \u0393 by lemma 4 (all the first t edges are of the same type - namely inner edges, so we may reorder them freely). Now the first t edges of d3 are the same edges (their weights may differ, but their identities match). Now we deal with the remaining( n 2 ) \u2212 t edges.\n4. We expand all outer edges until they are larger than all inner edges and call the result d4. This step maintains F (d4, k) = \u0393 by Consistency.\n5. Now we reorder all outer edges until their order in relation to each other is as they appear in d, and call the result d5. This step maintains F (d5, k) = \u0393 by lemma 4. Now, d5 has all the non-redundant inner edges in the same position as they appear in d, and has all the outer edges in the same order relative to one another as they appear in d. The only edges that are out-of-place are the redundant inner edges. The redundant inner edges need to be put into their correct position amongst the outer edges.\n6. The redundant inner edges need to have their weights increased by the exactly the right amount so that they end up in the correct position in d. This can done simply by expanding these edges. As we mentioned earlier, by MST-Coherence, expanding redundant inner edges maintains \u0393. So we call the this new data set d6, and note that by MST-Coherence F (d6, k) = \u0393.\n7. At this point in the edge ordering of d6, all the edges lie in the same position as they do in d. However, their weights might be different than what appears in d. By using Order-Consistency, we can turn the weights of d6 into exactly those of\nd, and call the result d7. Since we didn\u2019t change the order of edges from d6, by Order-Consistency we have that F (d7, k) = \u0393. It should be clear that d7 = d.\n8. Thus we have F (d7, k) = F (d, k) = \u0393.\nWe started with any d and k, and showed that\nF (d, k) = \u0393 = SL(d, k)\nAlso, in theorem 1 we showed that Single-Linkage satisfies all 4 properties. Thus it is uniquely characterized.\nNote that in the current paper when we mention Spanning Trees, we include the weights of the edges involved in the spanning tree as part of the identity of the tree - meaning that for two spanning trees to be equal they must have all edge weights equal. If we were to relax this requirement, then MST-Coherence would imply Order-Consistency, but then even SingleLinkage would not satisfy MST-Coherence. By considering edge weights when evaluating equality of two spanning trees we weaken the restrictions imposed on the partitioning function; which is desirable because it expands the applicability of theorem 5."}, {"heading": "3 Building a taxonomy of clustering functions", "text": "Now that we know there is a single function satisfying all 4 properties in table 1, it is natural to ask which clustering functions satisfy subsets of these properties. We consider one example, the Min-Sum k-clustering objective function. Variations on the Min-Sum kclustering objective are widely used. For now we focus on the Min-Sum k-clustering objective function itself leave the variations for future work. The objective is to minimize\n\u039bd(\u0393) = \u2211 C\u2208\u0393 \u2211 i,j\u2208C d(i, j)\nWhich is equivalent to the balanced k-median and Graph Cuts objective functions [BCR01, vL07]. Now, we investigate which properties are satisfied by MSKC.\nTheorem 6. Min-Sum k-clustering is Consistent, k-Rich, and Scale-invariant, but is neither OrderConsistent nor MST-Coherent.\nProof. Scale-Invariance follows as a result of the optimal argument of the objective function being invariant to linear scaling. For k-Richness, when aiming to obtain a k-partitioning \u0393, it is enough to set \u0393 in-cluster distances to 1, and between cluster distances to 2 -\nthen MSKC will return \u0393. What remains is to show Consistency.\nTo show consistency for MSKC, we observe that for a fixed k, the set of all k-partitionings is an anti-chain as defined in [Kle03]. Therefore by the construction in proof of theorem 3.2 in [Kle03], MSKC is Consistent. Now we show that MSKC is neither MST-Coherent nor Order-Consistent.\nWe prove this for k = 2, the case for k > 2 is similar. Consider the distance d function on n (even) points. We arbitrarily split the points into 2 parts each of size n/2, called A and B. Now we will construct d. For all x, y \u2208 B, d(x, y) = for some 0 < < 1. And for all points x \u2208 A, y \u2208 B, we have d(x, y) = 2. Finally, all points inside x, y \u2208 A have distance d(x, y) = except for a single edge, between x0 \u2208 A, and y0 \u2208 A, for which we have d(x0, y0) = 3. So it is clear that all edges are either of length or 2, and there is a single edge of length 3. We now use this d to show Min-Sum k-clustering is neither Order-Consistent nor MST-Coherent.\nFor sufficiently large n, if we run Min-Sum on d with k = 2, we get back as answer the partitioning \u0393 = {A,B}, since it is cheaper to group x0 and y0 together than to pay n/2\u00d72. Notice that the edge between x0 and y0 is the largest edge of d. Thus, increasing the weight of (x0, y0) is both an MST-Coherent and Order-Consistent transformation of d. Now, if we expand (x0, y0) until its weight is larger than 3n, then Min-Sum k-clustering will put x0 and y0 into different clusters, thus outputting a partitioning different from \u0393, which violates Order-Consistency and MSTCoherence."}, {"heading": "4 Conclusions & future directions", "text": "In this paper we make a step towards the important and ambitious goal of developing a general theory of clustering. More concretely, we aim to build a suite of abstract properties of clustering that will induce a taxonomy of clustering paradigms. Such a taxonomy should serve to help utilize prior domain knowledge to allow educated choice of a clustering method that is appropriate for a given clustering task.\nAt this point, we present a consistent axiomatic basis for clustering, and, under that framework, we go on to offer a concrete set of properties that characterize the Single-Linkage clustering algorithm. Our contribution provides new insight into the connection between Minimum Spanning Trees and the Single-Linkage clustering functions. This uniqueness result is set in a framework similar to one used for the purpose of showing impossibility, showing that there is no inherent impossibility\nin formalizing clustering. By considering the listing in table 1, we demonstrate the type of desired taxonomy of clustering functions based on the properties each satisfies. To investigate the ramifications of algorithms which satisfy only a subset of our properties, we introduced the Minimum Spanning Tree Cuts family of partitioning functions, of which Single-Linkage is the only Consistent member. The uniqueness theorem came about as a result of forcing functions to ignore redundant edges in the course of their operation.\nWe hope that this work spurs new research in building a more solid theory of Clustering, especially an axiomatic theory. Future considerations that will be valuable are the addition of new clustering functions and properties to table 1. We have characterized Single-Linkage in a useful way, leaving the characterization of other clustering functions (such as Min-Sum k-clustering) for future work."}, {"heading": "Acknowledgements", "text": "Thanks to Avrim Blum, Margareta Ackerman, and Nathan Schneider for very valuable discussions. Supported by NSF Grant OCI-0838385, and a graduate fellowship from NSERC. Part of this work was completed while Reza was an undergraduate at the University of Waterloo."}], "references": [{"title": "Measures of Clustering Quality: A Working Set of Axioms for Clustering", "author": ["M. Ackerman", "S. Ben-David"], "venue": null, "citeRegEx": "Ackerman and Ben.David.,? \\Q2008\\E", "shortCiteRegEx": "Ackerman and Ben.David.", "year": 2008}, {"title": "Approximating min-sum k-clustering in metric spaces", "author": ["Y. Bartal", "M. Charikar", "D. Raz"], "venue": "STOC", "citeRegEx": "Bartal et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Bartal et al\\.", "year": 2001}, {"title": "Minimum spanning trees and single linkage cluster analysis", "author": ["J.C. Gower", "GJS Ross"], "venue": "Applied Statistics,", "citeRegEx": "Gower and Ross.,? \\Q1969\\E", "shortCiteRegEx": "Gower and Ross.", "year": 1969}, {"title": "The construction of hierarchic and non-hierarchic classifications", "author": ["N. Jardine", "R. Sibson"], "venue": "Multivariate Statistical Methods, Among-groups Covariation,", "citeRegEx": "Jardine and Sibson.,? \\Q1975\\E", "shortCiteRegEx": "Jardine and Sibson.", "year": 1975}, {"title": "An Impossibility Theorem for Clustering", "author": ["J. Kleinberg"], "venue": "NIPS", "citeRegEx": "Kleinberg.,? \\Q2002\\E", "shortCiteRegEx": "Kleinberg.", "year": 2002}, {"title": "A tutorial on spectral clustering", "author": ["U. von Luxburg"], "venue": "Statistics and Computing,", "citeRegEx": "Luxburg.,? \\Q2007\\E", "shortCiteRegEx": "Luxburg.", "year": 2007}], "referenceMentions": [], "year": 2009, "abstractText": "Despite the widespread use of Clustering, there is distressingly little general theory of clustering available. Questions like \u201cWhat distinguishes a clustering of data from other data partitioning?\u201d, \u201cAre there any principles governing all clustering paradigms?\u201d, \u201cHow should a user choose an appropriate clustering algorithm for a particular task?\u201d, etc. are almost completely unanswered by the existing body of clustering literature. We consider an axiomatic approach to the theory of Clustering. We adopt the framework of Kleinberg, [Kle03]. By relaxing one of Kleinberg\u2019s clustering axioms, we sidestep his impossibility result and arrive at a consistent set of axioms. We suggest to extend these axioms, aiming to provide an axiomatic taxonomy of clustering paradigms. Such a taxonomy should provide users some guidance concerning the choice of the appropriate clustering paradigm for a given task. The main result of this paper is a set of abstract properties that characterize the Single-Linkage clustering function. This characterization result provides new insight into the properties of desired data groupings that make SingleLinkage the appropriate choice. We conclude by considering a taxonomy of clustering functions based on abstract properties that each satisfies.", "creator": "TeX"}}}