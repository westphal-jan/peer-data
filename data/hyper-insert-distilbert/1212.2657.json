{"id": "1212.2657", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Dec-2012", "title": "Study: Symmetry breaking for ASP", "abstract": "exactly in their nature euclidean configuration similar problems solving are combinatorial ( optimization ) problems. in essence order to find complete a dense configuration efficiently a solver has got to instantiate a number ( of different components together of over a some type and each of these unique components can be used successfully in satisfying a relation definition defined if for a type. for therefore, many solutions of a configuration problem have multiple symmetric ones which can be completely obtained by replacing nearly some component entries of a solution by another inside one frame of the same type. these symmetric matrix solutions would decrease critical performance of numerical optimization algorithms because of two reasons : a ) knowing they satisfy either all requirements equations and typically cannot be pruned arising out from the search space ; and b ) existence of partially symmetric optimal solutions algorithm does precisely not allow to prove such the constrained optimum in a feasible time.", "histories": [["v1", "Tue, 11 Dec 2012 21:47:26 GMT  (32kb,D)", "http://arxiv.org/abs/1212.2657v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["anna ryabokon"], "accepted": false, "id": "1212.2657"}, "pdf": {"name": "1212.2657.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["anna.ryabokon@ifit.uni-klu.ac.at"], "sections": [{"heading": null, "text": "Study: Symmetry breaking\nTechnical Report Anna Ryabokon\nAlpen-Adria Universita\u0308t, Klagenfurt, Austria anna.ryabokon@ifit.uni-klu.ac.at"}, {"heading": "1 Introduction", "text": "The configuration problem consists in finding a sequence of actions required to assemble a target artifact from a set of components of predefined types. All allowed components types, their attributes and possible relations between components are specified as configuration constraints. In addition, configuration constraints put restrictions on sets of related components required by the design of the target artifact such as a product or a service. The customization of an artifact required by the customer is formulated as customer requirements. Often these requirements can also capture customer preferences for a solution of the configuration problem. In this case the best solutions (configurations) are determined by an objective function specified in the configuration requirements.\nIn their nature configuration problems are combinatorial (optimization) problems. In order to find a configuration a solver has to instantiate a number of components of a some type and each of these components can be used in a relation defined for a type. Therefore, many solutions of a configuration problem have symmetric ones which can be obtained by replacing some component of a solution by another one of the same type. These symmetric solutions decrease performance of optimization algorithms because of two reasons: a) they satisfy all requirements and cannot be pruned out from the search space; and b) existence of symmetric optimal solutions does not allow to prove the optimum in feasible time.\nar X\niv :1\n21 2.\n26 57\nv1 [\ncs .A\nI] 1\n1 D\nec 2\n01 2"}, {"heading": "2 Motivation and related work", "text": "Symmetry breaking is fundamental topic in many AI areas based on combinatorial search. It does not matter which approach we are investigating: CSP, SAT or ASP, it is a significant tool for solving particular classes of problems. Namely, the problems which include a lot of symmetries. The pigeon-hole problem is a very good illustrating example, in which one has to place n pigeons in m holes such that there is at most one pigeon in each hole. It is clear that there is no sense to distinguish between holes, because all holes are identical. Therefore, all placements of pigeons into holes belong to the same equivalence class of symmetric assignments. This is extremely important if we have m = n \u2212 1 holes for n pigeons since one has to prove each of (n\u2212 1)! branches in a search tree to verify that there is no solution.\nThere are three types of symmetry breaking (SB): variable (A,B), value (A,\u00acA) and variable-value (A,\u00acB), where A and B are propositional symbols and (A,B) is a permutation that replaces A in all clauses of a CNF with B and vice versa. While the pigeon-hole problem essentially involve some sort of capacity constraint on a set of interchangeable variables, it exhibits only pure variable symmetries [7]. However, breaking these symmetries improves performance a lot [1, 2, 7, 3]. Although we are aware of research of SB for CSPs done e.g. by Ian P. Gent [5] and Toby Walsh [9], in this study we focus us mainly on symmetry breaking for SAT problems. The reason for this is that we want to compare the approach presented in [4] to the same method but extended with SB predicates."}, {"heading": "3 Approach", "text": "Modern approaches to identification of symmetries in a CNF are based on a well-understood notion of group isomorphism.\nDefinition 1 (Group). Group is a structure \u3008G, \u2217\u3009 where G is a (non-empty) set that is closed under a binary operation \u2217 for which the following axioms are satisfied:\n\u2022 associativity: for all x, y, z \u2208 G, (x \u2217 y) \u2217 z = x \u2217 (y \u2217 z)\n\u2022 identity: there exists an element e \u2208 G such that for all x \u2208 G, x\u2217e = x\n\u2022 inverse: for each x \u2208 G there exists x\u22121 \u2208 G, x \u2217 x\u22121 = e\nNote that in the literature the authors often refer G to a group rather than \u3008G, \u2217\u3009 and omit explicit definition of the operation \u2217 and write xy instead of x \u2217 y.\nLet set G = {{A,B} , {\u00acA,B} , {A,\u00acB} , {\u00acA,\u00acB}} include sets of two propositional literals and \u2217 : G \u00d7 G \u2192 G be a binary operation defined as follows:\nA,B \u00acA,B A,\u00acB \u00acA,\u00acB A,B A,B \u00acA,B A,\u00acB \u00acA,\u00acB \u00acA,B \u00acA,B A,B \u00acA,\u00acB A,\u00acB A,\u00acB A,\u00acB \u00acA,\u00acB A,B \u00acA,B \u00acA,\u00acB \u00acA,\u00acB A,\u00acB \u00acA,B A,B\nThe negation in this operation means that some element of a set should be negated. For instance, in \u2217({\u00acA,B} , {A,B}) the first argument {\u00acA,B} defines that the first element in a set should be negated and the second argument that none of the elements is negated. In this case the operation negates only A and returns {\u00acA,B}. Clearly, \u3008G, \u2217\u3009 is a group.\nDefinition 2 (Subgroup). A group \u3008H, \u2217\u3009 if a subgroup of a group \u3008G, \u2217\u3009 if H \u2286 G and H 6= \u2205. If H \u2282 G then H is a proper subgroup of G.\nDefinition 3 (Group generators). Let H \u2282 G be a subgroup of a group G. The group H generates G if all elements of G can be obtained by (multiple)application of the group operation. Elements of H are called generators of G. A generator is redundant if it can be obtained from other generators. H is irredundant if it does not contain redundant generators.\nAn irredundant generating set of subgroup H provides an extremely compact representation of G. Consider a group \u30082Z,+\u3009 of all even integers with addition operation. In this case an irredundant set of generators H = {\u22122, 0, 2} provides a group \u3008H,+\u3009. The notion of generators provides a base for the identification of symmetries in groups. Thus, if a group G contains some subgroup G\u2032 which elements can be generated by its subgroup H then we can consider only elements of H. In the context of SB for CNFs the elements of H are symmetry generators. One can use H to declare additional constraints eliminating symmetric solutions.\nAnother important notion of group theory is group isomorphism. This notion is used to relate different groups, like G\u2032 and H from the example given above.\nDefinition 4 (Group isomorphism). Let \u3008G, \u2217\u3009 and \u3008G\u2032, \u2217\u2032\u3009 be two groups and there is an one-to-one (injective) function \u03c6 : G\u2192 G\u2032 such that for any two elements x, y \u2208 G and corresponding elements x\u2032, y\u2032 \u2208 G, i.e. \u03c6(x) = x\u2032 and \u03c6(y) = y\u2032: \u03c6(x \u2217 y) = \u03c6(x) \u2217\u2032 \u03c6(y) = x\u2032 \u2217\u2032 y\u2032 (1) then group G and G\u2032 are isomorphic.\nThat is if some property if true for the group G it is also true for the group G\u2032 and vice versa. Therefore, any group isomorphism maps sets of generators of a group to sets of generators of an isomorphic one.\nAs we mentioned above symmetric solutions of a configuration problem, and CNFs in general, are obtained by permuting either variables (propositional symbols), their values or both.\nDefinition 5 (Permutation). A permutation \u03c0 of a set S is an one-to-one and onto (bijective) function \u03c0 : S \u2192 S. Two permutations \u03c0 and \u03c0\u2032 can be nested to form a single new permutation function by function composition \u03c0\u2032\u2032(s) = (\u03c0 \u25e6 \u03c0\u2032)(s) = \u03c0(\u03c0\u2032(s)), where s \u2208 S.\nIt can be easily shown that the permutation operation is bijective for any given set S and therefore can be used to create a group of permutations.\nDefinition 6 (Permutation Group). Let A be a non-empty set and SA be the set of all permutations of A. Then SA forms a group under permutation operation.\nConsider a simple house problem with five persons each owning five things. Given a constraint that restricts placement of things of different persons in the same cabinet, the solution of the problem includes at least five cabinets, e.g. C = {1, 2, 3, 4, 5}. One of the solutions, in this case, will suggest storing all things of the first person in cabinet 1, of the second person in the cabinet 2 and so on. A permutation (1, 2) in this context means that the things of the first person will be stored in a cabinet 2 and things of the second person in the cabinet 1. Identification of such permutations in a CNF formula is done through reduction to the colored graph automorphism problem. In order to define this problem let us introduce the group of a colored graph.\nDefinition 7 (Graph automorphism). Given a graph GR = (V,E) where V = {1, 2, . . . , n} is a set of vertices and E is a set of edges. Let \u03c0(V ) =\n{V1, V2, . . . , Vk} be a partition of its vertices, i.e. \u22c3 Vi\u2208\u03c0(V ) Vi = V and Vi \u2229 Vj = \u2205 for any Vi, Vj \u2208 \u03c0(V ), Vi 6= Vj. An automorphism group Aut(GR, \u03c0) is a the set of permutations of the graph vertices of the same cell Vi \u2208 \u03c0(V )that map edges to edges and non-edges to non-edges.\nTo simplify the presentation one can consider \u03c0(V ) as assignment of k different colors to sets of graph vertices. In this case vertices of one color cannot be mapped to vertices of another one. The coloring \u03c0(V ) is stable if for all pairs of vertices u, v \u2208 V\nd(u, Vi) = d(v, Vi), \u2200Vi \u2208 \u03c0(V ) (2)\nwhere d(u, Vi) is a number of vertices in Vi that are adjacent to u in GR. Given an initial coloring of a graph one can compute a set of different stable colorings. These colorings permutations of the graph vertices correspond to symmetries in the graph and, thus, form a group of permutations.\nFor the purpose of symmetry breaking in ASP Drescher et al. defined an initial coloring described in [3]. A graph representation of a grounded program colored according to this definition can be used as an input to the algorithm computing stable coloring. Given a set of stable colorings it is possible to compute a set of (irredundant) generators. The latter can be used to generate a set of lexicographic constraints that introduce an order on a set of literals \u2013 elements of the set of generators. Extension of the grounded program with these constraints leads to elimination of symmetric solutions. The meaning of these constraints can be roughly described as: literal b can be in a model only if literal a is."}, {"heading": "3.1 Tools", "text": "SBASS is a preprocessor which detects and breaks symmetries in the search space of ASP instances by adding lexicographic symmetry-breaking constraints. This tool was developed by Christian Drescher and is a part of Potsdam Answer Set Collection1. SBASS takes a grounded logic program produced by a grounder GRINGO2 as an input. For the given grounded program the tool generates a colored graph and provides it as an input to SAUCY3 [2]. The latter is a graph automorphism identification library that\n1http://potassco.sourceforge.net/labs.html 2http://potassco.sourceforge.net/ 3http://vlsicad.eecs.umich.edu/BK/SAUCY/\nreturns a set of graph symmetry generators. Each symmetry generator is used to produce a chain of symmetry breaking constraints (SBC). The initial logic program is extended with SBC. The global architecture of SBASS is presented in Figure 1 [3]. SBASS allows to limit the number of computed generators4, since there are exponentially many generators in the general case [7]. In practice such limitation makes possible computation of symmetry breaking constraints for big grounded programs, for which identification of all symmetries would be infeasible.\nAlso weight constraints and optimization is not supported by SBASS. Therefore, the weight constraint of the general encoding of the house problem provided in [4] was replaced by corresponding cardinality constraint and SBASS was modified to ignore optimization statement during its preprocessing step.\nAs a small example consider a house configuration with the following customer and configuration requirements:\nperson(1;2). thing(3..5). thing(8). personTOthing(1,3;4;5). personTOthing(2,8). cabinet(50;51;52;53). 1{cabinetTOthing(X,Y):cabinet(X)}1 :- thing(Y). 4command line option --limit=n\n:- cabinet(X), 3cabinetTOthing(X,Y) : thing(Y). % only 2 things :- cabinetTOthing(C, T1), cabinetTOthing(C, T2),\npersonTOthing(P1,T1), personTOthing(P2, T2), P1!=P2.\nComputing only one generator we set --limit=1. Afterwards, we obtain a group generator and a chain of SBC5:\n(16 17) (23 24) (30 31) (37 38) (44 45)\nTranslation of this output from LPARSE format [8] results in the following generator set. The literals 44 and 45 cannot be translated since they were introduced by the grounder.\n(c2t(53,5)c2t(52,5)) (c2t(53,4)c2t(52,4)) (c2t(53,3)c2t(52,3)) (c2t(53,8)c2t(52,8)) (44 45)\nGiven the generator set SBASS produces the following set of constraints:\n% thing 5 should not be placed in cabinet 53 1 1 2 1 17 16 :- not c2t(52,5), c2t(53,5). % all rules with cp2 in head should not be satisfied 1 1 1 0 48 :- cp2. % thing 4 in cabinet 52 should be preferred and so on... 1 48 3 1 24 23 16 cp2 :- not c2t(52,4), c2t(53,4), c2t(53,5). 1 48 3 2 17 24 23 cp2 :- not c2t(52,5), not c2t(52,4), c2t(53,4). 1 48 2 0 16 49 cp2 :- c2t(53,5), cp3. 1 48 2 1 17 49 cp2 :- not c2t(52,5), cp3. 1 49 3 1 31 30 23 cp3 :- not c2t(52,3), c2t(53,3), c2t(53,4). 1 49 3 2 24 31 30 cp3 :- not c2t(52,4), not c2t(52,3), c2t(53,3). 1 49 2 0 23 50 cp3 :- c2t(53,4), cp4. 1 49 2 1 24 50 cp3 :- c2t(52,4), cp4. 1 50 3 1 38 37 30 cp4 :- not c2t(52,8), c2t(53,8), c2t(53,3). 1 50 3 2 31 38 37 cp4 :- not c2t(52,3), not c2t(52,8), c2t(53,8). 1 50 2 0 30 51 cp4 :- c2t(53,3), cp5. 1 50 2 1 31 51 cp4 :- c2t(52,3), cp5. % do not use 44 if 45 is not used and thing 8 is in cabinet 53 1 51 3 1 45 44 37 cp5 :- not 45, 44, c2t(53,8). % do not use 44 if 45 is not used and thing 8 is not in cabinet 52 1 51 3 2 38 45 44 cp5 :- not c2t(52,8), not 45, 44.\n5It is not possible to obtain a set of SBC generated by SBASS without modification of this tool.\n2 44 4 0 3 37 30 23 16 44 :- 3c2t(53,8),c2t(53,3),c2t(53,4),c2t(53,5). 2 constraint rule 44 head 4 # literals 0 # negative literals 3 bound 37 c2t(53,8) 30 c2t(53,3) 23 c2t(53,4) 16 c2t(53,5)\n1 1 1 0 44 i.e. :- 44.\n2 45 4 0 3 38 31 24 17 45 :- 3c2t(52,8),c2t(52,3),c2t(52,4),c2t(52,5). 2 constraint rule 45 head 4 # literals 0 # negative literals 3 bound 38 c2t(52,8) 31 c2t(52,3) 24 c2t(52,4) 17 c2t(52,5)\n1 1 1 0 45 i.e. :- 45."}, {"heading": "3.2 Evaluation", "text": "We evaluated6 pure application of CLASP7 to our general encoding and an extended by SBASS\u2019 SBC version on a set of the house reconfiguration instances where we take only creation costs for individuals into account.\n6The evaluation experiments were performed using Potassco ASP collection (gringo3.0.3, clasp-2.0.5, sbass including saucy 1.0) on a system with Intel i7-3930K CPU (3.20GHz), 32Gb of RAM and running Ubuntu 11.10.\n7http://potassco.sourceforge.net/\nIn st\nan ce\nO p ti\nm u m\nN o\nS B\nA S S\nS B\nA S S ,\nd ef\nau lt\nS B\nA S S ,\nli m\nit =\n5 S B\nA S S ,\nli m\nit =\n10 S\nB A\nS S ,\nli m\nit = 20 em p ty p 05 t0 25 50 50 /0 :0 0. 04 7 50 /0 :0 0. 07 9 50 /0 :0 0. 05 3 50 /0 :0 0. 05 7 50 /0 :0 0. 07 9 em p ty p 10 t0 50 10 0 10 0/ 0: 00 .2 84 10 0/ 0: 01 .0 49 10 0/ 0: 00 .3 21 10 0/ 0: 00 .3 68 10 0/ 0: 00 .4 65 em p ty p 15 t0 75 15 0 15 0/ 0: 00 .9 77 15 0/ 1: 17 .1 48 15 0/ 0: 01 .1 49 15 0/ 0: 01 .3 44 15 0/ 0: 01 .6 14 em p ty p 20 t1 00 20 0 20 0/ 0: 04 .3 69 20 0/ - 20 0/ 0: 05 .7 18 20 0/ 0: 05 .2 33 20 0/ 0: 39 .5 75 em p ty p 25 t1 25 25 0 25 0/ 1: 04 .1 25 T O 25 0/ 0: 58 .1 10 20 0/ 1: 09 .7 29 25 0/ - em p ty p 30 t1 50 30 0 30 0/ - T O 30 0/ - 30 0/ - 30 0/ - em p ty p 35 t1 75 35 0 35 0/ - T O 35 0/ - 35 0/ - 35 0/ - em p ty p 40 t2 00 40 0 40 0/ - T O 40 0/ - 40 0/ - T O lo n g 2 p 02 t0 30 c3 0 0/ 0: 00 .0 82 0/ 0: 0. 12 1 0/ 0: 00 .0 83 0/ 0: 00 .0 81 0/ 0: 00 .1 13 lo n g 2 p 04 t0 60 c3 0 0/ 0: 00 .7 21 0/ 0: 01 .5 56 0/ 0: 00 .7 86 0/ 0: 01 .3 84 0/ 0: 01 .6 39 lo n g 2 p 06 t0 90 c3 0 0/ 2: 07 .9 73 0/ 0: 36 .3 73 0/ 1: 03 .6 95 0/ 1: 26 .4 35 0/ 0: 12 .0 70 lo n g 2 p 08 t1 20 c3 0 35 /- 35 /- 40 /- 30 /- 30 /- lo n g 2 p 10 t1 50 c3 0 45 /- 55 /- 55 /- 15 /- 70 /- lo n g 2 p 12 t1 80 c3 0 90 /- 75 /- 80 /- 85 /- 80 /- lo n g 2 p 14 t2 10 c3 0 T O 15 0/ - T O T O 17 0/ - lo n g 2 p 16 t2 40 c3 0 T O T O T O T O T O n ew ro om p 02 t0 24 c3 10 10 /0 :0 0. 05 7 10 /0 :0 0. 07 3 10 /0 :0 0. 06 0 10 /0 :0 0. 06 5 10 /0 :0 0. 07 3 n ew ro om p 04 t0 48 c3 20 20 /0 :0 0. 39 8 20 /0 :0 0. 54 1 20 /0 :0 0. 48 3 20 /0 :0 0. 44 1 20 /0 :0 0. 44 6 n ew ro om p 06 t0 72 c3 30 30 /0 :0 1. 15 2 30 /0 :0 2. 39 8 30 /0 :0 1. 33 6 30 /0 :0 1. 36 9 30 /0 :0 1. 52 6 n ew ro om p 08 t0 96 c3 40 40 /0 :0 2. 79 3 40 /0 :0 8. 38 0 40 /0 :0 3. 35 0 40 /0 :0 3. 48 5 40 /0 :0 3. 79 4 n ew ro om p 10 t1 20 c3 50 50 /0 :0 5. 49 4 50 /0 :2 2. 36 5 50 /0 :0 7. 14 6 50 /0 :0 7. 29 5 50 /0 :0 7. 85 0 n ew ro om p 12 t1 44 c3 60 60 /0 :1 0. 07 3 60 /0 :5 3. 05 8 60 /0 :1 3. 48 8 60 /0 :1 3. 77 1 60 /0 :1 4. 74 9 n ew ro om p 14 t1 68 c3 70 70 /0 :1 6. 82 7 70 /2 :0 0. 13 5 70 /0 :2 3. 84 0 70 /0 :2 4. 25 8 70 /0 :2 5. 76 8 n ew ro om p 16 t1 92 c3 80 80 /0 :2 4. 81 6 80 /3 :5 2. 28 0 80 /0 :3 8. 28 4 80 /0 :3 8. 75 3 80 /0 :4 1. 11 5 sw ap r0 2t 03 5 0 0/ 0: 00 .0 38 0/ 0: 00 .0 64 0/ 0: 00 .0 46 0/ 0: 00 .0 48 0/ 0: 00 .0 48 sw ap r0 4t 07 0 0 0/ 0: 00 .1 24 0/ 0: 00 .2 50 0/ 0: 00 .1 52 0/ 0: 00 .1 55 0/ 0: 00 .1 53 sw ap r0 6t 10 5 0 0/ 0: 00 .2 79 0/ 0: 00 .9 64 0/ 0: 00 .3 43 0/ 0: 00 .3 44 0/ 0: 00 .3 51 sw ap r0 8t 14 0 0 0/ 0: 00 .5 94 0/ 0: 02 .8 55 0/ 0: 00 .7 24 0/ 0: 00 .7 34 0/ 0: 00 .7 43 sw ap r1 0t 17 5 0 0/ 0: 01 .1 12 0/ 0: 06 .6 55 0/ 0: 01 .3 28 0/ 0: 01 .2 78 0/ 0: 01 .3 24 sw ap r1 2t 21 0 0 0/ 0: 01 .8 53 0/ 0: 16 .4 17 0/ 0: 02 .1 71 0/ 0: 02 .1 51 0/ 0: 02 .2 24 sw ap r1 4t 24 5 0 0/ 0: 02 .7 21 0/ 0: 28 .8 79 0/ 0: 03 .4 06 0/ 0: 03 .3 53 0/ 0: 03 .4 96 sw ap r1 6t 28 0 0 0/ 0: 04 .4 07 0/ 0: 48 .8 96 0/ 0: 05 .1 15 0/ 0: 05 .2 99 0/ 0: 05 .1 96\nT ab\nle 1:\nE va\nlu at\nio n\nre su\nlt s\nfo r\nth e\nh ou\nse re\nco n fi gu\nra ti\non p ro\nb le\nm . T O\nin d ic\nat es\na ti\nm eo\nu t\nw it\nh in\n60 0\nse co\nn d s.\n50 /0\n: 00 .0\n47 m\nea n s\nth at\nan op\nti m\nal so\nlu ti\non w\nit h\nco st\ns eq\nu al\n50 w\nas fo\nu n d\nin 47\nm il li se\nco n d s,\nw h er\nea s\n20 0/ \u2212\nre p\nor ts\nth at\non ly\na su\nb op\nti m\nal so\nlu ti\non w\nit h\nco st\ns eq\nu al\n20 0\nw as\nre tu\nrn ed\nb y\na so\nlv er\n.\nWe tested application of SBASS with default settings when all generators have to be computed and we limited search of generators by a constant. We set this constant to 5, 10 and 20 during the evaluation to see how it influences on performance . Overall evaluation results are presented in Table 1."}, {"heading": "4 Conclusions", "text": "The results for the pigeon-hole problem presented in [3] are very impressive. This motivated us to try symmetry breaking tool suitable for ASP suggested there. Unfortunately, it turned out that not all of the house reconfiguration problem instances can be solved in a given time frame although we limit a number of generators. Moreover, in only 2 cases (empty p25t125, long 2 p06t090c3) runtime was improved and in 3 cases (long 2 p08t120c3, long 2 p10t150c3, long 2 p12t180c3) CLASP found the better suboptimal solutions by application of SBASS. Together, there are only 5 cases from 32 were actually runtime or quality of a solution was better by adding of SBC. The reason for this could be that the size of SBC is too large to be effectively handled by a SAT solver [7] on the one hand. On the other hand, additional constraints, like we are not allowed to store things of different persons in the same cabinet, might cause the difficulties.\nSome other modern packages for detecting and breaking symmetries of CNF formulas are available. NAUTY8 described in [1] is another approach to compute automorphism groups of graphs. Experiments showed that it is not efficient enough for large sparse but for dense graphs [7]. The instances of the house (re)configuration problem are sparse graphs and choice of NAUTY would be not justified. Junttila et Al [6] introduced BLISS9 which is an enhancement of NAUTY and SAUCY. The authors showed experimentally that their approach outperforms the previous tools. However, these were not investigated in this study."}], "references": [{"title": "Solving difficult instances of boolean satisfiability in the presence of symmetry", "author": ["F.A. Aloul", "A. Ramani", "I.L. Markov", "K. A Sakallah"], "venue": "http://potassco.sourceforge.net/labs.html http://www.tcs.hut.fi/Software/bliss/index.html 10  IEEE Trans. on CAD of Integrated Circuits and Systems, 22(9):1117\u2013 1137", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2003}, {"title": "Efficient Symmetry Breaking for Boolean Satisfiability", "author": ["F.A. Aloul", "K.A. Sakallah", "I.L. Markov"], "venue": "IEEE Transactions on computers, 55(5):549\u2013558", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2006}, {"title": "Symmetry-breaking Answer Set Solving", "author": ["C. Drescher", "O. Tifrea", "T. Walsh"], "venue": "AI Communications, 24(2):177\u2013194", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "Re)configuration using Answer Set Programming", "author": ["G. Friedrich", "A. Ryabokon", "A.A. Falkner", "A. Haselb\u00f6ck", "G. Schenner", "H. Schreiner"], "venue": "Proceedings of the IJCAI 2011 Workshop on Configuration, pages 17\u201325", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2011}, {"title": "Groups and Constraints: Symmetry Breaking during Search", "author": ["Ian P. Gent", "Warwick Harvey", "Tom Kelsey"], "venue": "In Proceedings of 8th International Conference on Principles and Practice of Constraint Programming,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}, {"title": "Engineering an Efficient Canonical Labeling Tool for Large and Sparse Graphs", "author": ["T. Junttila", "P. Kaski"], "venue": "Ninth Workshop on Algorithm Engineering and Experiments, pages 135\u2013149", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2007}, {"title": "Handbook of Satisfability", "author": ["K.A. Sakallah"], "venue": "Handbook of Satisfiability, pages 289\u2013338, Amsterdam, Netherlands", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2009}, {"title": "Lparse 1.0 User Manual", "author": ["Tommi Syrj\u00e4nen"], "venue": "Technical report,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2000}, {"title": "General symmetry breaking constraints", "author": ["Toby Walsh"], "venue": "In Proceedings of 12th International Conference on Principles and Practice of Constraint Programming,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}], "referenceMentions": [{"referenceID": 6, "context": "While the pigeon-hole problem essentially involve some sort of capacity constraint on a set of interchangeable variables, it exhibits only pure variable symmetries [7].", "startOffset": 164, "endOffset": 167}, {"referenceID": 0, "context": "However, breaking these symmetries improves performance a lot [1, 2, 7, 3].", "startOffset": 62, "endOffset": 74}, {"referenceID": 1, "context": "However, breaking these symmetries improves performance a lot [1, 2, 7, 3].", "startOffset": 62, "endOffset": 74}, {"referenceID": 6, "context": "However, breaking these symmetries improves performance a lot [1, 2, 7, 3].", "startOffset": 62, "endOffset": 74}, {"referenceID": 2, "context": "However, breaking these symmetries improves performance a lot [1, 2, 7, 3].", "startOffset": 62, "endOffset": 74}, {"referenceID": 4, "context": "Gent [5] and Toby Walsh [9], in this study we focus us mainly on symmetry breaking for SAT problems.", "startOffset": 5, "endOffset": 8}, {"referenceID": 8, "context": "Gent [5] and Toby Walsh [9], in this study we focus us mainly on symmetry breaking for SAT problems.", "startOffset": 24, "endOffset": 27}, {"referenceID": 3, "context": "The reason for this is that we want to compare the approach presented in [4] to the same method but extended with SB predicates.", "startOffset": 73, "endOffset": 76}, {"referenceID": 2, "context": "defined an initial coloring described in [3].", "startOffset": 41, "endOffset": 44}, {"referenceID": 1, "context": "For the given grounded program the tool generates a colored graph and provides it as an input to SAUCY [2].", "startOffset": 103, "endOffset": 106}, {"referenceID": 2, "context": "The global architecture of SBASS is presented in Figure 1 [3].", "startOffset": 58, "endOffset": 61}, {"referenceID": 6, "context": "SBASS allows to limit the number of computed generators, since there are exponentially many generators in the general case [7].", "startOffset": 123, "endOffset": 126}, {"referenceID": 3, "context": "Therefore, the weight constraint of the general encoding of the house problem provided in [4] was replaced by corresponding cardinality constraint and SBASS was modified to ignore optimization statement during its preprocessing step.", "startOffset": 90, "endOffset": 93}, {"referenceID": 7, "context": "Translation of this output from LPARSE format [8] results in the following generator set.", "startOffset": 46, "endOffset": 49}, {"referenceID": 2, "context": "The results for the pigeon-hole problem presented in [3] are very impressive.", "startOffset": 53, "endOffset": 56}, {"referenceID": 6, "context": "The reason for this could be that the size of SBC is too large to be effectively handled by a SAT solver [7] on the one hand.", "startOffset": 105, "endOffset": 108}, {"referenceID": 0, "context": "NAUTY described in [1] is another approach to compute automorphism groups of graphs.", "startOffset": 19, "endOffset": 22}, {"referenceID": 6, "context": "Experiments showed that it is not efficient enough for large sparse but for dense graphs [7].", "startOffset": 89, "endOffset": 92}, {"referenceID": 5, "context": "Junttila et Al [6] introduced BLISS which is an enhancement of NAUTY and SAUCY.", "startOffset": 15, "endOffset": 18}], "year": 2013, "abstractText": "The configuration problem consists in finding a sequence of actions required to assemble a target artifact from a set of components of predefined types. All allowed components types, their attributes and possible relations between components are specified as configuration constraints. In addition, configuration constraints put restrictions on sets of related components required by the design of the target artifact such as a product or a service. The customization of an artifact required by the customer is formulated as customer requirements. Often these requirements can also capture customer preferences for a solution of the configuration problem. In this case the best solutions (configurations) are determined by an objective function specified in the configuration requirements. In their nature configuration problems are combinatorial (optimization) problems. In order to find a configuration a solver has to instantiate a number of components of a some type and each of these components can be used in a relation defined for a type. Therefore, many solutions of a configuration problem have symmetric ones which can be obtained by replacing some component of a solution by another one of the same type. These symmetric solutions decrease performance of optimization algorithms because of two reasons: a) they satisfy all requirements and cannot be pruned out from the search space; and b) existence of symmetric optimal solutions does not allow to prove the optimum in feasible time.", "creator": "LaTeX with hyperref package"}}}