{"id": "1301.3832", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jan-2013", "title": "A Complete Calculus for Possibilistic Logic Programming with Fuzzy Propositional Variables", "abstract": "presently in this thesis paper too we briefly present a propositional function logic programming synthetic language for reasoning under semantic possibilistic geometry uncertainty matrices and representing vague knowledge. formulas are represented by pairs ( a, c ), except where clearly a contradiction is a many - valued proposition and c is logical value adaptive in matching the conditional unit interval [ integers 0, 1 ] which denotes a lower negative bound on consulting the construct belief systems on analyzing a sequence in terms derived of algebraic necessity measures. certain belief states models are modeled exclusively by possibility independent distributions on generating the set of all its many - one valued interpretations. elsewhere in this framework, ( i ) we define a syntax and a semantics package of the initial general statements underlying geometric uncertainty logic ; ( ii ) we too provide a modus - ponens - style calculus package for knowing a sublanguage of analytic horn - rules { and we prove that so it is complete for loosely determining the maximum degree of causal possibilistic ambiguous belief with which a fuzzy propositional parameter variable r can be safely entailed from a set vector of constraint formulas ; and finally, ( iii ) while we show already how the computation of a generalized partial matching between fuzzy propositional formula variables, in real terms of necessity correlation measures for fuzzy sets, can be freely included in our fundamental logic syntax programming programming system.", "histories": [["v1", "Wed, 16 Jan 2013 15:48:38 GMT  (357kb)", "http://arxiv.org/abs/1301.3832v1", "Appears in Proceedings of the Sixteenth Conference on Uncertainty in Artificial Intelligence (UAI2000)"]], "COMMENTS": "Appears in Proceedings of the Sixteenth Conference on Uncertainty in Artificial Intelligence (UAI2000)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["teresa alsinet", "lluis godo"], "accepted": false, "id": "1301.3832"}, "pdf": {"name": "1301.3832.pdf", "metadata": {"source": "CRF", "title": "A Complete Calculus for Possibilistic Logic Programming with Fuzzy Propositional Variables", "authors": ["Teresa Alsinet", "Lluis Godo", "Peter _is_about"], "emails": ["tracy@eup.udl.es", "godo@iiia.csic.es"], "sections": [{"heading": null, "text": "1 INTRODUCTION\nLogic programming languages have been applied to a wide range of areas such as Artificial Intelligence or Deductive Databases. Among these languages, Prolog is the most representative but it is not powerful enough for reasoning and representing knowledge in situations where there is vague, incomplete or imprecise informa tion. To overcome this problem, new logic program ming languages have been developed. They are based on a variety of non-standard logics such as multiple valued logics [Ishizuka and Kanai, 1985; Mukaidono et al., 1989; Li and Liu, 1990; Alsinet and Manya, 1996; Vojtas, 1998], possibilistic logic [Dubois et al., 1991], probabilistic logic [Heinsohn, 1994; Lukasiewicz, 1998], evidential logic [Baldwin, 1987; Baldwin et al., 1995] or fuzzy operator logic [Weigert et al., 1993]. Depending on the underlying logic some systems are more suit able for dealing with vague knowledge, while others\nare more appropriate for reasoning under incomplete or imprecise knowledge. Although all of the fuzzy ex tensions of logic programming implement proof proce dures for fuzzy reasoning, only some of them allow to represent ill-known information in the language. Our first objective in this paper is to define a proposi tional logic programming language for reasoning under possibilistic uncertainty and representing vague knowl edge. We represent formulas by pairs (ip, a), ip being a many-valued proposition built on fuzzy propositional variables and a E [0, 1] being a lower bound on the belief on ip in terms of necessity measures. On the one hand, fuzzy propositional variables pro vide us a suitable representation model in situations where there is vague, incomplete or imprecise infor mation about the real world. For instance, the fuzzy statement \"Peter is abouL35 years old\" can be nicely represented by the fuzzy proposition Peter _is_about35 defined over the finite domain years_old. In the case abouL35 denotes a crisp interval of ages, the above proposition can be interpreted as \"3x E about35 such that Peter is x years old\". In the case abouL35 denotes a fuzzy interval with a membership function /-Labout-35, the above proposition can be interpreted in possibilis tic terms as \"3x E [P,abouL35]a such that Peter is x years old is certain with a necessity of at least 1 - a\" for each a E [0, 1], where [!-LabouL35]a denotes the a-cut of /-Labout-35. So, fuzzy propositions can be seen as (flexible) restrictions on an existential quantifier (see [Dubois et al., 1998]). On the other hand, since we want to deal with fuzzy propositional variables in the language, the truth eval uation of formulas cannot be Boolean but many valued, and thus, our possibilistic logic programming language should be based on a many-valued logic as in [Alsinet et al., 1999]. Moreover, like in classi cal propositional logic programming systems, the lan guage should enable us to define an efficient proof method based on a complete calculus for determin ing the maximum degree of possibilistic belief with which a fuzzy propositional variable can be entailed from a set of formulas. To this end, first we define a general possibilistic logic based on the propositional\n2 UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000\nGodel fuzzy logic and then, we focus our attention on the possibilistic language that results from considering the Horn-rule sublogic of Godel fuzzy logic. The reason for choosing Godel logic as the underlying many-valued logic where to model fuzziness is two-fold: first, truth-functions of Godel logic are purely ordinal, that is, they are definable just from the ordering of the truth scale (see next section), no further algebraic op erations are required, and thus the use of this logic is in accordance with the simplest understanding, in terms of an ordering, of what a fuzzy, gradual property can be; and second, and non negligible at all, Godel logic has been proved to be fully compatible with an already proposed and suitable extension of necessity measures for fuzzy events, in the sense that Godel logic will al low to define a well behaved and featured possibilistic semantics on top of it (see Sections 3 and 4). Our second objective is to extend the possibilistic logic programming language with a partial matching mech anism between fuzzy propositional variables based on a necessity-like measure. As we have recently proved in [Alsinet and Godo, 2000b], this extension preserves completeness for a particular class of formulas. In our opinion, this is a key feature that justifies by itself the interest of such a logic programming system.\nThe paper is organized as follows. In Section 2, we present the syntax and the many-valued semantics of the language of propositional Godel fuzzy logic. In Section 3 we extend the language to allow possibilistic reasoning. In Section 4 we describe the uncertainty sublogic that our proof method can deal with and we prove that it is complete for determining the maximum degree of possibilistic entailment of fuzzy propositional variables. In Section 5, we show how the proof method can be extended to allow a semantical matching be tween fuzzy propositional variables. And, finally, in the last section we discuss some related work. Be cause of the lengthy proofs, proofs of propositions can be found in [Alsinet and Godo, 2000a].\n2 MANY-VALUED SEMANTICS: GODEL LOGIC\nFollowing [Hajek, 1998], the language of propositional Godel fuzzy logic (denoted hereafter G) is built in the usual way from a (countable) set of propositional vari ables, a conjunction A, an implication -t and the truth constant 0. Further connectives are defined as follows:\n<p V 'ljJ is ((<p -t 'If;) -t 'If;) 1\\ (('If; -t <p) -t <p) \u2022<p is <p -t 0 <p=:'lj; is (<p-t'lj;)l\\('1/;-t<p)\nThe semantics of G is given by interpretations I of the propositional variables into the real unit interval [0, 1] which are extended to arbitrary formulas by means of the following rules:\nI(O) = 0\nI(<pi\\'1/J)\nI(<p -t'lj;)\nmin(I(<p), I( 'If;)) { 1, if I(<p) \ufffd I('lj;) I ( 'ljJ), otherwise\nFor the derived connectives the truth-interpretations take these forms:\nmax(I(<p), I( 'If;)) { 1, if I ( <p) = 0 0, otherwise { 1, if I(<p) = I('lj;) min(I(<p), I('lj;)), otherwise\nThe following is an axiomatization1 of G: (A1) (<p -t '1/J) -t (('1/J -t x) -t (<p -t x)) (A2) (<pl\\'lj;)-t<p (A3) (<p 1\\ 'If;) -t ('If; 1\\ <p) (A4) (<p 1\\ (<p -t 'If;)) -t ('If; 1\\ ('If; -t <p)) (AS) (<p -t ('1/J -t x)) = ((<p A '1/J) -t x) (A6) ((<p -t '1/J) -t x) -t ((('1/J -t <p) -t x) -t x) (A7) 0 -t <p (A8) <p -t <p 1\\ <p\nThe deduction rule of G is modus ponens. The no tion of proof is as usual. Completeness for G reads as follows: <p is provable in G, written f-a <p, iff I(<p) = 1 for any interpretation I. Furthermore, G enjoys strong completeness as well. Namely, let T be an arbitrary theory over G, i.e. just a set of formulas. An inter pretation I is a model ofT iff I( 'If;) = 1 for all 'ljJ E T. Then, T proves <p, written T f- <p, iff I(<p) = 1 for any interpretation I which is a model ofT.\n3 GENERAL POSSIBILISTIC REASONING OV ER GODEL LOGIC\nWe have seen that fuzzy propositional variables are suitable for representing imprecise information as in the statement \"Peter is abouL35 years old\". Now, we are interested in extending the fuzzy propositional language to allow fuzzy reasoning under uncertainty which leads us to a more expressive language. For in stance, the statement \"it is almost sure that Peter is abouL35 years old\" is represented in this setting by a certainty-weighted fuzzy proposition\n(Peter _is_about35, 0.9),\nwhere the certainty value 0.9 expresses how much is believed the fuzzy statement \"Peter is abouL35 years old\" in terms of necessity measures. In general, certainty weights are employed to model statements of the form \"<p is a-certain\", where <p repre sents vague, incomplete or imprecise knowledge about the real world. In this framework, this is formalized\n1 Actually, logic G is equivalent to the extension of lntu itionistic logic with the pre-linearity axiom ( <p -t 1/J) V ( 1/J -t <p).\nUNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000 3\nas \"rp is certain with a necessity of at least a\" and is represented through a certainty-weighted Godel logic formula (rp, a). Within the possibilistic model of uncertainty, belief states are modeled by normalized possibility distribu tions 1r : I -+ [0, 1] on a set of interpretations I. In the standard possibilistic logic, the uncertainty about whether a (Boolean) formula holds true or not is esti mated by the necessity measure\nN([rp]l 1r) = inf{1-1r(I) I IE I, I(r.p) = 0}.\nHowever, in our framework and according to the pre vious subsection, the truth evaluation of a formula r.p in each interpretation I is a value I(r.p) E [0, 1]. There fore, each formula does not induce a crisp set of inter pretations, but a fuzzy set of interpretations [rp], defin ing JL['P] (I) = I( r.p), for each interpretation I. Hence, to measure the uncertainty induced on a formula by a possibility distribution on the set of interpretations I we have to consider some extension of the notion of necessity measure for fuzzy sets, in particular for fuzzy sets of interpretations. In [Dubois and Prade, 1991] the authors propose to define\nN([rp]l 7r) = inf 1r(I):::} JL['PJ(I), lEI where JL['PJ(I) = I(r.p) E [0, 1] and :::} is the reciprocal of Godel's many-valued implication, which is defined as x :::} y = 1 if x :S y and x :::} y = 1 - x, otherwise. The following remarks are worth noticing. The first one is that this definition is indeed an extension of the classical definition, in the sense that we recover it whenever [rp] is a crisp set. The second one is that with this definition, the condition N([rp] I 1r) 2: a is equivalent to\n1r(I) :S max(1 - a, JL['P] (I))\nfor every I E I, analogously to the crisp case as well. And the third one is that the equivalence\nN((rp]l1r) = 1 iff 1r :S JL[\"'J\nis also an interesting consequence. It is not difficult to see that this kind of necessity measures on fuzzy sets is characterized by the following set of axioms:\nN1 N(D.) = 1 N2 N(0) = 0 N3 N(A n B) = min(N(A), N(B)) ( N(niEIAi) = infiEI N(Ai) ) N4 if A is crisp, { 1, if 1 - a :S N(A) then N(A U a) = N(A) th . , o erw1se\nNow let us go into formal definitions.\nDefinition 1 (Possibilistic model) Let I be the set of (many-valued) Godel interpretations over a given language. A possibilistic model is a normalized possi bility distribution 1r : I - + [0, 1] on the set of interpre tations I.\nDefinition 2 (Possibilistic satisfaction and en tailment) A possibilistic model 7r : I - + [0, 1] sat isfies a weighted formula ( rp, a), written 1r I= ( rp, a) , iff N([rp] I 1r) 2: a. Now let r be a set of weighted formulas. We say that r entails a weighted formula (rp, a), written r I= (rp, a), iff every possibilistic model satisfying all the weighted formulas in r also satisfies (rp, a).\nWe propose now a Hilbert-style axiomatization2 of this logic: axioms of PGL (for Possibilistic Godel logic) are Godel logic axioms weighted by 1 plus the triviality axiom (rp, 0), and PGL inference rules are :\nGeneralized modus ponens:\nWeakening:\n(rp-+ '1/J,a) (r.p,/3)\n('l/;, min(a, /3))\n(rp,a) [if f3 <a] (r.p,/3)\nThen the notion of proof in PGL is as usual and it will be denoted as f-PG. The soundness of this axiomatic system is given in the next theorem.\nTheorem 1 PGL is sound with respect the possibilis tic entailment, i.e. iff f-PG ( rp, a) then f F ( rp, a) .\nProof: Soundness of the axioms and the weakening rule is straightforward, thus we only prove the sound ness of the modus ponens rule. This reduces to check, for all possibilistic distribution 1r on I, that if N([r.p-+ '1/J] I 1r) 2: a and N([rp]l 1r) 2: /3, then N(['l/J] I 1r) 2: min( a, (3). The two conditions amount to, for each interpretation I E I, 1r (I) :::} I ( r.p -+ '1/J) 2: a and 1r(I) :::} I(rp) 2: /3. Thus, 1r(I) :::} min(I(rp - + '1/J),I(r.p)) ;::: min(a,/3). But, by Godel semantics, min(I(rp - + '1/J), I(r.p)) = min(I('l/;), I(r.p)) :S I('lf;). Therefore, we have that 1r(I) :::} I('lf;) 2: min(a,/3) for each interpretation IE I, and thus, N(['l/J] I 1r) 2: min( a, (3). D\nUnfortunately we have not been able so far to prove whether PGL is complete or incomplete. So it remains as an open question to be solved in the near future.\n4 A POSSIBILISTIC LOGIC PROGRAMMING LANGUAGE\nIn the previous section we have defined PGL, a general possibilistic logic over the many-valued Godel logic. Our aim in this section is, as in classical propositional logic programming systems, to define a sublanguage\n2Notice the analogy with the classical Possibilistic logic [Dubois et a!., 1994c], here we have just replaced the ax ioms of classical propositional logic with those of many valued Godel logic.\n4 UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000\nfor logic programming which would enable us to de sign an efficient proof algorithm, based on a complete calculus for computing the maximum degree of pos sibilistic entailment of a propositional variable, called goal, from a set of weighted formulas. To this end, we restrict ourselves to a Horn-rule sub language of the logic G, i.e. to formulas of the form:\nP1 1\\ \u00b7 \u00b7 \u00b7 1\\ Pk -+ q with k 2: 0, where p1, . . . , Pk , q are propositional vari ables, in the traditional logic programming style. As usual, we shall refer to the conclusion q and the set of premises p1, . . . , Pk as the head and the body, respec tively. We distinguish between two types of formulas in this sublanguage: fact when k = 0 (empty body) and are simply written q, and rule, otherwise.\nDefinition 3 (PGL clause) A PGL clause is a pair of the form (\u00a3P,a), where \u00a3P is either a fact or a rule and a E [0, 1] is a lower bound on the belief on \u00a3P in terms of necessity measures.\nFor PGL clauses we shall develop a simple and efficient calculus which will not need the whole logical appara tus of PGL of the previous section. But before we need to introduce some extra definitions and results.\nDefinition 4 (Maximum degree of possibilistic entailment) The maximum degree of possibilistic en tailment of a goal q from a set of PGL clauses P, de noted by llqiiP, is the greatest lower bound a E [0, 1] on the belief on q such that P f= (q, a). Thus, llqiiP =sup{ a E [0, 1] 1 P f= (q, a)} .\nTheorem 2 The maximum degree of possibilistic en tailment of a goal q from a set of PGL clauses P is the least necessity evaluation of q given by the models of P. Thus, llqiiP = inf{N([q] l 7r) l1r f= P}.\nProof: We define a1 = sup{ a E [0, 1] I P f= (q, a)} and az = inf{N([q] l1r) l1r f= P}.\naz 2: a1: As a1 = sup{ a E [0, 1] I P f= (q, a)} we have that P f= (q, a), for all a < a1. Then, for every model1r of P we have that N([q] l1r) 2: a for all a < a1. Thus, az = inf{N([q] l1r) l1r f= P} 2: a, for all a < a1, hence, az 2: a1.\naz ::; a1: As az = inf{N([q]l1r) l1r f= P} we have that N([q] l1r) 2: a2 for all model1r of P, that is P f= (q, az), and thus, az ::; sup{ a E [0, 1] 1 P f= (q, a)}= a1. 0\nCorollary 1 Let P be a of PGL clauses and let s be a propositional variable. Then, P f= (s, llsllp).\nTo provide our possibilistic logic programming lan guage with a complete calculus for determining the maximum degree of possibilistic entailment we only need the triviality axiom and a particular instance of the generalized modus ponens rule introduced in the previous section:\nAxiom: (\u00a3P, 0) Generalized modus ponens:\n(Pl 1\\ \u00b7 \u00b7 \u00b7 1\\ Pk -+ q, 'Y) (Pl, /31), \u00b7 \u00b7 \u00b7 , (pk , f3k) ( q, min ( 'Y, /31, ... , /3 k))\nObviously, the axiom is a valid PGL clause and the in ference rule is sound as already proved in the previous section.\nDefinition 5 (Degree of deduction) A goal q is deduced with a degree of deduction a from a set of PGL clauses P, denoted by P f-* (q, a), iff there exists a finite sequence of PGL clauses C1, ... , Cm such that Cm = (q, a) and, for each i E {1, . . . , m}, it holds that Ci E P, Ci is an instance of the axiom or Ci is ob tained by applying the above inference rule to previous clauses in the sequence.\nNext, we define the syntactic counterpart of maximum degree of possibilistic entailment.\nDefinition 6 (Maximum degree of deduction) The maximum degree of deduction of a goal q from a set of PGL clauses P, denoted lqlp, is the greatest a E [0, 1] such that P f-* (q,a).\nAs the only inference rule of our proof method is the generalized modus ponens, within the framework of logic programming in which P is always a finite set of PGL clauses, there exists a finite number of proofs of a goal q from P, and thus, the above definition turns into lqlp =max{ a E [0, 1] 1 P f-* (q, a)}. The following propositions are needed to prove com pleteness.\nProposition 1 If the only formulas in P with head q are recursive3, then llqiiP = lqlp = 0.\nProposition 2 Let (p, /3) and (p -t q, 'Y) be two PGL clauses such that p \"# q. Then, llqll{(p,/3),(p-+q,-y)} = min(/3, 'Y).\nProposition 3 Let P be a set of PGL clauses and let (r -t q,'Y) be a clause of P. If llqiiP > llqiiP\\{(r-+q,-y)}' then llqiiP = llqll{(r,<>r),(r-+q,-y)}> where ar = llriiP\u00b7\nProposition 4 Let P be a set of PGL clauses and let (q -t p,\"f) be a clause of P. It holds that llqllp = llqiiP\\{(q-tp,-y)} \u00b7\nTheorem 3 (Completeness) Let P be a set of PGL clauses and let q be a goal. Then, llqiiP = lqlp.\nProof: By the soundness of the modus ponens infer ence rule, we have llqiiP 2: lqlp. Therefore, we must\n3 A recursive formula is of the form Pl 1\\ \u00b7 \u00b7 \u00b7 1\\pk 1\\ q-+ q with k \ufffd 0.\nUNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000 5\nprove llqiiP :::; lqlp and we proceed by induction on n, where n is the number of clauses of P. If n = 1, then it must be that P contains only either one certainty-weighted fact or rule. We assume that q occurs in P as the head of a non recursive formula; otherwise, by Proposition 1, we have llqiiP = lqlp = 0. Suppose that P contains only the certainty-weighted fact ( q, \"'(). Let I0 and h be two interpretations such that Io(q) < 1- \"'( and ft(q) = 1. Now, let 1r be a possibility distribution with the following definition:\n{ 1, if I = I1 1r(I) = 1 - \"'f, if I = Io\n0, otherwise\nIt is easy to check that 1r f= (q, \"'f) and N([q] I 1r) \"'f\u00b7 Then, by Theorem 2, we have llqiiP = inf{N([qJI 1r) I 1r f= (q,\"'()} :::; \"Y\u00b7 Now, lqlp =max{ a E [0, 1] I (q,\"'() f-* (q,a)} =\"'(,and thus, llqiiP:::; lqlp. Suppose that P contains only the certainty-weighted rule ( r --+ q, 'Y). Let I 0 be an interpretation such that I0 (r) :::; I0 (q) < 1 and let 1r be a possibility distribution with the following definition: (I) { 1, if I = I0 7r = 0, otherwise It is easy to check that 1r f= (r --+ q, \"'f) and N([qJI 1r) = 0. Then, by Theorem 2, we have llqllp = inf{N ( [q]l 1r) l1r f= (r--+ q,\"'()} = 0, and thus, llqiiP:::; lqlp. Suppose now that for any set P' that contains n clauses it holds that llsiiP' :::; lsiP' for any propositional vari able s, and suppose that P contains n + 1 clauses. Since we are assuming that q occurs in P as the head of a non recursive formula, let (<.p,\"'f) be a clause of P such that <.p is a non recursive formula with head q and \"'( 2 8, for any clause ( 'ljJ, 8) of P such that 'ljJ is a non recursive formula with head q. We distinguish two cases:\nCase ( <.p, 'Y) = ( q, \"'(). Let I0 and h be two interpreta tions such that I0(q) < 1 - \"'( and Io(p) = 1 for any propositional variable p =J. q, and h ( s) = 1 for any propositional variable s. Now, let 1r be a possibility distribution with the following defini tion: { 1, if I = I1\n1r(I) = 1 - \"'f, if I = Io 0, otherwise\nSince \"'( 2 8 for any non recursive clause ('1/J, 8) of P such that q is the head of 'ljJ, we have that 1r f= P and N([q]l 1r) = 'Y\u00b7 Therefore, by Theorem 2, we have llqiiP = inf{N([qJ I 1r) I 1r f= P} :::; \"Y\u00b7 Now, lqlp =max{ a E [0, 1] I P f-* (q,a)} 2 \"'(,and thus, llqiiP :::; lqlp.\nCase (<.p,\"'f) = (p--+ q,\"'(). If we define P' = P\\{(p--+ q, \"'()} we have that llqiiP 2 llqiiP'\u00b7 If llqiiP = llqiiP', by the induction hypothesis, we have that llqiiP' :::; lqiP', and thus, llqiiP :::; lqiP\u00b7\nIf llqiiP > llqiiP', by Proposition 3, llqiiP = llqll{(p,ap),(p--+q,7)}, where ap == IIPIIP, and, by Proposition 2, llqll{(p,ap),(p--+q,7)} = min(ap, \"'f). Now, by Proposition 4, IIPIIP = IIPIIP' and, by the induction hypothesis, IIPIIP' :::; IPIP'\u00b7 Since IPIP' :::; IPIP and (p--+ q, \"'f) E P, applying the modus po nens inference rule, we get P f-* (q, min(IPIP, \"'f)) with min(IPIP, \"'f) 2 min (ap, \"'f). Then, lqlp = max{ a E [0, 1]1 P f-* (q, a)} 2 min(IPIP, \"'f), and thus, lqlp 2 min (ap, \"Y) = llqiiP\u00b7 D\nIn the particular case that we do not allow recursive formulas in the language, the underlying uncertainty logic of our logic programming system is syntactical equivalent to the family of infinitely-valued proposi tional logics the interpreter defined in [Escalada-Imaz and Manya, 1995] can deal with. The interpreter is based on a backward proof algorithm for computing the maximum degree of deduction of a propositional variable from a set of formulas whose worst-case time complexity is linear in the total number of occurrences of propositional variables in the set of formulas. We show bellow an example of PGL clauses the interpreter can deal with.\nExample 1 The maximum degree of deduction of the goal friend_M ary_J ohn from the set of clauses\nP={ (M ary_is_young, 0.8), (John_is_young, 0.9), (Mary _is_young 1\\ J ohn_is_young --+ friend_M ary_John, 0.6) },\nis 0.6 which corresponds with the deduction degree computed by the interpreter when taking as triangular norm the min -conjunction function and as implication Godel's many-valued implication function.\n5 ADDING FUZZY UNIFICATION\nOur aim is to extend the calculus of our possibilistic language to allow a semantical matching between fuzzy propositional variables based on a necessity evaluation of fuzzy events. For instance, given the set of PGL clauses\nP={ (M ary_is_young, 0.8), (John_is_aboutr6, 0.9), (Mary_is_young 1\\ John_is_young--+ friend_M ary_John, 0.6) },\nwhere John_is_young and John_is_about16 are two fuzzy propositional variables, the maximum degree of deduction of the goal friend_M ary_John from P is 0 unless we be able to compute the necessity evaluation of the propositional variable John_is_young from the fact that the propositional variable John_is_about16 is certain with a necessity of at lest 0.9. To tackle the fuzzy unification problem within our pos sibilistic framework we are lead (i) to fix a domain and an interpretation of fuzzy propositional variables\n6 UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000\nin terms of its membership functions, otherwise we would not be able to identify when two propositional variables A and B are related and, furthermore, we would not be able to reason about the certainty of the propositional variable B from the fact that the domain-related propositional variable A is certain with a necessity of at least o:; and (ii) to define some mea sure to compute the necessity evaluation of a fuzzy propositional variable B based on a domain-related fuzzy propositional variable A.\n5.1 PROPOSITIONAL VARIABLES WITH FINITE DOMAINS\nWith respect the underlying uncertainty logic de scribed in Section 2, the main difference is that now we attach propositional variables with a sort. In doing so, we are introducing a minor change in the seman tics. Many-valued interpretations should map a sort into a non-empty domain and a propositional variable into a value of its domain, and thus, in turn we need to provide a new notion of interpretation. A more rigorous approach should be to define a first order language with typed regular predicates and sorted fuzzy constants (cf. [Alsinet et al., 1999]) which would allow us to represent, for instance, the fuzzy statement \"Mary is young\" as age(M ary, young). However, since variables and function symbols are not allowed in the language, fuzzy propositional variables give us a more simple representation model without lost of expressiveness.\nDefinition 7 (Extended many-valued interpre tation) An interpretation I= (U, i, m) maps:\n1. each sort a into a non-empty domain U,;\n2. all propositional variables p of sort a into a same value i(p) E U,; and\n3. a propositional variable p of sort a into a (nor malized} fuzzy set m(p): U, --t [0, 1].\nNotice that an interpretation I = (U, i, m) is disjunc tive in the sense that i(p) is a unique value of the domain U, for any propositional variable p of sort a, and i(p) =/:. i(p') iff p and p' are of different sorts. In what follows, we shall denote by J.Lm(p) the member ship function of m(p). The truth value of a proposi tional variable p under an interpretation I= (U, i, m), denoted by I(p), is computed as\nI(p) = J.Lm(p)(i(p)).\nThese truth evaluations extend to rules in the usual way by using the truth functions described in Sec tion 2. Remark that the truth value of a propositional vari able p under an interpretation I = (U, i, m) depends not only on the value i(p) assigned to p, but on the\nfuzzy set m(p). Therefore, in order to measure the certainty of a sorted propositional variable in a possi bilistic model we cannot take into account any possible interpretation, but only those which share a common interpretation of propositional variables, and hence which also share their domain. This leads us to de fine the notion of context (cf. [Alsinet et al., 1999])\nDefinition 8 (Context) Let U be a collection of non-empty domains and let m be an interpretation of propositional variables over U such that for every propositional variable p there exist u, v E U,, a being the sort of p, such that J.Lm(p)(u) = 0 and J.Lm(p)(v) = 1. We define the context determined by U and m, denoted by 'Iu,m, as the set of extended many-valued interpre tations having U as domain and m as interpretation of propositional variables. Thus,\n'Iu,m = {IE 'I I I= (U, i, m)}, where 'I denotes the set of all extended many-valued interpretations.\nRemark that given a context 'Iu,m and a proposi tional variable p, there exist at least two interpreta tions Io,l1 E 'Iu,m such that Io(p) = 0 and h (p) = 1. Let us briefly discuss the reason for defining the notion of context by means of an example.\nExample 2 Let age_M ary_around19 be a proposi tional variable of sort M ary_years_old and let Io = (U, i, mo) and h = (U, i, m1) be two interpretations such that\n\u2022 UMary_years-old = [0, 120](years),\n\u2022 i(age_Mary_around19) = 20,\n\u2022 mo(age_Mary_aroundlg) = [17; 18; 20; 21]-trape zoidal fuzzy set4- and\n\u2022 m1 (age_M ary_around19) = [18; 19; 19; 20].\nAlthough the age of Mary is the same value in both interpretations, we have a different truth value in each interpretation depending on the membership function of the fuzzy set assigned to the propositional variable. Thus,\nIo(age_Mary_aroundlg) = J.L[l7;1B;20;21](20) = 1\nand Il(age_Mary_aroundlg) = J.L[l8;19;19;20J(20) = 0.\nThen, for instance, the possibility distributions 1r that satisfy the PGL clause\n(age_M ary_around1g, 1) are those such that 1r(I0) \ufffd 1 and 1r(h) = 0, and thus, Io can be fully plausible while h is inadmissible, how ever, Mary is twenty years old in both interpretations.\n4We represent a trapezoidal fuzzy set as [t1; tz; t3; t4], where the interval [h, t4] is the support and the interval [tz, t3] is the core.\nUNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000 7\nTherefore, when fixing a particular context we are en suring that belief states modeled by normalized possi bility distributions on a set of possible interpretations (or possible states) are consistent, in the sense that possible states are sharing a common view of the real world. Finally, the notion of possibilistic satisfaction can be easily extended in a particular context Iu,m in the fol lowing way. Given a context Iu,m, the models of a set of PGL clauses P are the normalized possibility distributions on the set of extended many-valued in terpretations Iu,m that satisfy all the clauses in P.\n5.2 EXTENDED INFERENCE WITH POSSIBILISTIC PATTERN MATCHING\nTo provide PGL with a semantical matching mecha nism we need a measure for computing the necessity evaluation of the propositional variable B based on the domain-related propositional variable A. Further more, this measure should enable us to include new in ference patterns in our previous calculus of Section 4 in order to keep completeness for determining the maxi mum degree of possibilistic entailment of a goal form a set of PGL clauses in a particular context. Again there are several alternatives. After a careful analysis we have chosen the same type of measure used when defining the possibilistic semantics for PGL. Namely, given a context Iu,m, the necessity evaluation of B based on the domain-related propositional vari able A is defined as\nN(m(B) I m(A)) = inf f.-Lm(A)(u) =? f.-Lm(B)(u), uEU\ufffd where =? is the reciprocal of Godel's many-valued im plication. At this point we are ready to extend the calculus to allow a semantical matching of propositional vari ables with finite domains through a possibilistic pat tern matching measure based on a necessity evaluation of fuzzy events. Although there may exist several ap proaches, we have finally decided to extend the calcu lus with three inference rules. Given a context Iu,m, these inference rules are defined as follows:\nSemantical unification: (p, a) [SU ]\n(p', min( a, ;3)) '\nwhere ;3 = N(m(p') I m(p)). Intersection:\n(Pl, a), (p2, ;3) [I N] (p',min(a,;3)) '\nif f.-Lm(p') ;::: min(f.-Lm(p,)' f.-Lm(p2))\u00b7 Resolving Uncertainty:\n(p, a) [U N] (p'' 1) '\nif f.-Lm(p') ;::: max(1- a, f.-Lm(p))\u00b7\nTheorem 4 The SU, IN and UN inference rules are sound in a context Iu,m with respect to the possibilistic entailment of PGL clauses.\nProof: Soundness of the IN and UN rules is straight forward, thus we only prove the soundness of the SU rule. We must prove that for all possibilistic distri bution 7r : Iu,m -+ [0, 1], if 7r I= (p, a) then 7r I= (p',min(a,;3)), where ;3 = N(m(p') I m(p)). Assume that 7r I= (p, a). This means that, N([P] I 1r) ;::: a, and thus, 1r(I) =? I(p);::: a, for all interpretation IE Iu,m\u00b7 Then, we have the following consecutive inequalities:\n1. 1r(J) =? f.-Lm(p)(i(p)) 2 a\n2. min( 1r(I) =? f.-Lm(p) ( i(p)), f.-Lm(p)(i(p)) =? 1-Lm(p')(i(p')));:::\nmin(a, f.-Lm(p) ( i(p)) =? f.-Lm(p') (i(p')))\n3. min(1r(I) =? J..lm(p)(i(p)), f.-Lm(p) ( i(p)) =? /-Lm(p') ( i(p'))) \ufffd\n7r(I) =} f.-Lm(p')(i(p'))\n4. 1r(I) =? f.-Lm(p')(i(p'));::: min(a, f.-Lm(p) ( i(p)) =? f.-Lm(p') ( i(p')))\n5. inflEiu,m 1r(J) =? f.-Lm(p')(i(p'));::: infiEiu,m min(a,f.-Lm(p)(i(p)) =? f.-Lm(p')(i(p')))\n6. inflEiu,m 1r(I) =? f.-Lm(p')(i(p'));::: min(a,infiEiu,m f.-Lm(p)(i(p)) =? f.-Lm(p')(i(p')))\n7. N([p'] l1r) ;::: min(a,infuEU\ufffd f.-Lm(p)(u) =? f.-Lm(p')(u))\n8. N([p'] l1r) ;::: min(a, N(m(p') I m(p)))\nThus, 7r I= (p' , min(a , N(m(p') I m(p)))) as well. D\nMoreover, for a given a context Iu,m, the modus ponens style calculus extended with the SU, IN and UN inference rules is complete for determining the maximum degree of possibilistic entailment of a goal from a particular class of PGL clauses called well formed and satisfiable PGL programs. The formaliza tion of the notion of well-formed and satisfiable PGL program and the proof of completeness for this class of PGL clauses can be found in [Alsinet and Godo, 2000b].\nExample 3 Let John_is_about16, John_is_14_16 and J ohn_is_16_18 be three propositional variables of sort John_year s_old, and let Iu,m be a context such that\n\u2022 U J ohn_years-old = [0, 120] (yearS),\n\u2022 m(John_is_aboutl6) = [14; 16; 16; 18],\n\u2022 m(John_is_14_16) = (12; 14; 16; 18] and\n\u2022 m( J ohn_is_16_18) = (14; 16; 18; 20].\n8 UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000\nNow, given the set of PGL clauses\nwe have that\nP={ (John_is_14_16, 1), (John_is_16_18, 1) },\nN(m(John_is_abouh6) I m(John_is_14_16)) = 0\nand\nN(m(John_is_aboutl6) I m(John_is_16_18)) = 0.\nHowever, each model 1r : Iu,m -+ [0, 1] of P verifies that\n1r(I) ::=; min(J(John_is_14_16), I(John_is_16_18)),\nfor all I E Iu,m. Therefore, because of the three propositional variables have the same domain, we have that i (John_is_14_16) = i (John_is_16_18) = i(John_is_aboutl6), for all IE Iu,m\u00b7 Then, because of this particular interpretation m of propositional vari ables,\n7r(I) :::; JLm(John_is_aboutl6) ( i ( J ohn_is_aboutl6) ),\nfor all I E Iu,m\u00b7 Hence, P f= (John_is_aboutl6, 1), and thus, 11John_is_about16IIP = 1. On the other hand, applying the IN rule to (John_is_14_16, 1) and (John_is_16_18, 1) we deduce (John_is..aboutl6, 1), and thus, 1John_is_abouh61P = 11John_is_abouh611P\u00b7\n6 RELATED WORK\nThe introduction of fuzzy constants in logic program ming languages was suggested in the early eighties by [Cayrol et al., 1982] and [Bel et al., 1986] with the aim of including fuzzy values in a pattern matching procedure. Subsequently, [Umana, 1987] defined a fuzzy pattern matching process using the extension principle for one and two variate functions, and in [Baldwin et al., 1995] the authors implemented a se mantic unification procedure based on the theory of mass assignments which allows a unified framework for the treatment of fuzzy and probabilistic data. [Godo and Vila, 1995] proposed a possibilistic-based logic to deal with fuzzy temporal constraints based on many valued semantics and a necessity-like measure to allow a pattern matching mechanism between fuzzy tempo ral constraints. [Virtanen, 1998] defined a fuzzy unifi cation algorithm based on fuzzy equality relations and [Arcelli et al., 1998] proposed three different kinds of unification in the fuzzy context: the first one is based on similarity relations, the second one identifies sim ilar objects through an equivalence relation and the last one uses \"semantic constraints\" for defining a more flexible unification. More recently, [Gerla and Sessa, 1999] formalized a methodology for transform ing an interpreter for SLD Resolution into an inter preter that computes on abstract values which express similarity properties on the set of predicate and func tion symbols of a classical first-order language and\n[Formato et al., 2000] extended the unification algo rithm of Martelli-Montanari to allow a partial match ing between crisp constants through similarity rela tions. Finally, [Dubois et al., 1998] proposed an exten sion of possibilistic logic dealing with fuzzy constants and fuzzily restricted quantifiers (called PLFC), and [Alsinet et al., 1999] provided PLFC logic with a for mal semantics and a sound resolution-style calculus by refutation. The main differences between this framework and PLFC [Alsinet et al., 1999] are (i) at the level of the syntax and semantics of the language, (ii) at the level of providing the language with a complete calculus, and (iii) at the level of defining a semantical unifica tion mechanism between fuzzy propositions. In PLFC, formulas are pairs of the form (<p(x), f (Y)), where x and y denote sets of free and implicitly uni versally quantified variables and y ;2 x, <p(x) is a dis junction of literals with fuzzy constants, and f (Y) is a valid valuation function which expresses the certainty of <p(x) in terms of necessity measures. Basically, val uation functions f (Y) are constant values and vari able weights which are not considered in our possibilis tic language. Variable weights [Dubois et al., 1994a; 1994b] are suitable for modeling statements of the form \"the more x is A (or x belongs to A), the more certain is p(x)\", where A is a fuzzy set. This is formalized in PLFC as, for all x, \"p(x) is true with a necessity of at least JLA(x)\", and is represented as (p(x), A(x)). When A is imprecise but not fuzzy, the interpretation of such a formula is just \"Vx E A, p(x)\". So A acts as a (flexi ble if it is fuzzy) restriction on the universal quantifier. On the other hand, fuzzy constants in PLFC can be seen as (flexible) restrictions on an existential quanti fier. In general, \"L(B) is true at least to degree o:\", is represented in PLFC as (L(B), o:), where L is either a positive or a negative literal and B is a fuzzy set. For instance, if B is imprecise but not fuzzy, (p(B), o:) and (\u2022p(B),o:) have to be read as \"3x E B, p(x)\" and \"3x E B, \u2022p(x)\", respectively. Therefore, because of the calculus for PLFC is defined by refutation through a generalized resolution rule be tween positive and negative literals, the unification (in the classical sense) between fuzzy constants is not al lowed. For instance, from\ns1: (\u2022p(A) V '1/J, 1) and s2: (p(A), 1), which, if A is not fuzzy, are interpreted respectively as \"(3x E A, \u2022p(x)) V 'l/J\" and \"3x E A, p(x)\", we can infer '1/J iff A is a precise constant. However, a semantical unification between fuzzy events is per formed through variable weights and fuzzy constants. For instance, from s1: (\u2022p(x) V '1/J(x), A(x)) and s2: (p(B), 1), which, if A and B are not fuzzy, are interpreted re spectively as\nUNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000 9\n\"Yx E A, \u2022p(x) V 7/J(x)\" and \"3x E B, p(x)\", we infer (7/J(B), N(A I B)), where N(A I B) is a neces sity evaluation of fuzzy events. In our current setting, fuzzy propositional variables are interpreted in the same way as fuzzy constants in PLFC but, in contrast to PLFC, we do not have nega tive literals in the language and we have provided the language with a complete modus ponens-style calcu lus for determining the maximum degree of possibilis tic entailment of a propositional variable from a set of formulas which can be extended, through a seman tical unification inference rule, to allow a semantical matching between propositional variables. Concerning the semantics, because of the fuzzy in formation, the truth evaluation of formulas is many valued in both languages, and belief states are mod eled by normalized possibility distributions on the set of many-valued interpretations, also in both languages. However, the basic connectives of PLFC are negation \u2022 and disjunction V while in our language, they are con junction 1\\ and implication -+, and the semantics for the two sets of connectives are not equivalent, i.e. the two sets of connectives are not inter-definable. More over, the extended necessity measure for fuzzy sets suggested by Dubois and Prade in [Dubois and Prade, 1991], which is used in this language for setting the possibilistic semantics of formulas, is different from the one used in PLFC, although both are extensions of the standard necessity measure for crisp sets. Finally, the proof method for PLFC is based on refu tation through a resolution rule, a fusion rule already proposed in [Dubois et al., 1998] and a merging rule. During the proof process, the merging rule must be ap plied after every resolution step, and thus, the proof algorithm cannot be oriented to a resolvent clause and therefore, the search space consists of all possible or derings of the literals in the input program. In con trast, in our current setting, the proof method is ori ented to propositional variables (goals) and can be performed in a bottom-up manner through a general ized modus ponens inference rule. In particular, when the semantical unification between fuzzy propositional variables is emulated by means of the following non logical axiom\n(p-+ p', N(m(p') I m(p))), we can easily adapt the interpreter proposed in [Escalada-Imaz and Manya, 1995] for computing N(m(p') I m(p)) in a particular context. However, as we have seen, this approach is not powerful enough for determining the maximum degree of possibilistic entailment of a goal q from a set of PGL clauses P.\nAcknowledgments\nWe would like to thank the anonymous referees for their comments and suggestions. This research was partially supported by the project SMASH (TIC961038-C04-01/03) funded by the CICYT.\nReferences\n[Alsinet and Go do, 2000a] T. Alsinet and L. Godo. A complete calculus for possibilistic logic pro gramming with fuzzy propositional variables. Tech. Report DIEI-00-RT-1, Computer Science Dept., Universitat de Lleida. Available at http:/ /fermat.eup.udl.es/ \"\"tracy /reportOOl.ps.\n[Alsinet and Godo, 2000b] T. Alsinet and L. Godo. A complete proof method for possibilistic logic pro gramming with semantical unification of fuzzy constants. Tech. Report DIEI-00-RT-2, Computer Science Dept., Universitat de Lleida. Available at http:/ /fermat.eup.udl.es/ \"\"tracy /report002.ps.\n[Alsinet et al., 1999] T. Alsinet, L. Godo, and S. San dri. On the semantics and automated deduction for PLFC, a logic of possibilistic uncertainty and fuzziness. In Proceedings of UAI'99 Conference, pages 3-12.\n[Alsinet and Manya, 1996] T. Alsinet and F. Manya. A declarative programming environment for infinitely-valued logics. In Proceedings of IPMU'96 Conference, pages 1205-1210.\n[Arcelli et al., 1998] F. Arcelli, F. Formato, and G. Gerla. Fuzzy unification as a foundation of fuzzy logic programming. In F. Arcelli and T.P. Martin, editors, Logic Programming and Soft Computing, chapter 3, pages 51-68. Research Studies Press.\n[Baldwin, 1987] J.F. Baldwin. Evidential support logic programming. Fuzzy Sets and Systems, 24:1-26.\n[Baldwin et al., 1995] J.F. Baldwin, T.P. Martin, and B.W. Pilsworth. Fril- Fuzzy and Evidential Rea soning in Artificial Intelligence. Research Studies Press.\n[Bel et al., 1986] G. Bel, D. Farreny, and H. Prade. Towards the use of fuzzy rule-based systems in the monitoring of manufactoring systems. In J.F. Me Waters J.P. Crestin, editor, Software for Discret Manufacturing, pages 525-535. North Holland.\n[Cayrol et al., 1982] M. Cayrol, H. Farreny, and H. Prade. Fuzzy pattern matching. Kybernetes, 11:103-116.\n[Dubois et al., 1991] D. Dubois, J. Lang, and H. Prade. Towards possibilistic logic programming. In Proceedings of ICLP'91 Conference, pages 581-595.\n[Dubois et al., 1994a] D. Dubois, J. Lang, and H. Prade. Automated reasoning using possibilistic logic: Semantics, belief revision and variable cer tainty weights. IEEE Trans. on Data and Knowl edge Engineering, 1(6):64-71.\n[Dubois et al., 1994b] D. Dubois, J. Lang, and H. Prade. Handling uncertainty, context vague pred icates and partial inconsistency in possibilistic\n10 UNCERTAINTY IN ARTIFICIAL INTELLIGENCE PROCEEDINGS 2000\nlogic. In P.W. Eklund D. Driankov and A.L. Ralescu, editors, Fuzzy Logic and Fuzzy Control, pages 45-55. Springer-Verlag, LNAI 833.\n[Dubois et al., 1994c] D. Dubois, J. Lang, and H. Prade. Possibilistic logic. In D.M. Gabbay, C.J. Hogger and J.A. Robinson, editor, Handbook of Logic in Artificial Intelligence and Logic Program ming, pages 439-513. Oxford University Press.\n[Dubois and Prade, 1991] D. Dubois and H. Prade. Fuzzy sets in approximate reasoning-part 1: In ference with possibility distributions. Fuzzy Sets and Systems, 40:143-202. 25th Anniversary Memorial Volume.\n[Dubois et al., 1998] D. Dubois, H. Prade, and S. San dri. Possibilistic logic with fuzzy constants and fuzzily restricted quantifiers. In F. Arcelli and T.P. Martin, editors, Logic Programming and Soft Computing, chapter 4, pages 69-90. Research Studies Press.\n[Escalada-Imaz and Manya, 1995] G. Escalada-Imaz and F. Many a. Efficient interpretation of proposi tional multiple-valued logic programs. In R. Yager B. Bouchon-Meunier and L. Zadeh, editors, Ad vances in Intelligent Computing, pages 428-439. Springer Verlag, LNCS 945.\n[Formato et al., 2000] F. Formato, G. Gerla, and M.l. Sessa. Similarity-based unification. Fundamenta Informaticae, 40:1-22.\n[Gerla and Sessa, 1999] G. Gerla and M.l. Sessa. Sim ilarity in logic programming. In G. Chen, M. Ying, and K. Cai, editors, Fuzzy Logic and Soft Computing, chapter 2, pages 19-31. Kluwer.\n[Godo and Vila, 1995] L. Godo and L. Vila. Possibilis tic temporal reasoning based on fuzzy temporal constraints. In Proceedings of IJCAI'95 Confer ence, Vol. 2, pages 1916-1922.\n[Hajek, 1998] P. Hajek. Meta Mathematics of Fuzzy Logic. Kluwer.\n[Heinsohn, 1994] J. Heinsohn. Probablistic descrip tion logics. In Proceedings of UAI'94 Conference.\n[Ishizuka and Kanai, 1985] M. Ishizuka and N. Kanai. Prolog-ELF incorporating fuzzy logic. In Proceed ings of IJCAI'85 Conference, pages 701-703.\n[Li and Liu, 1990] D. Li and G. Liu. A Fuzzy Prolog Database System. Research Studies Press and J. Wiley & Sons.\n[Lukasiewicz, 1998] T. Lukasiewicz. Probabilistic logic programming. In Proceedings of ECAI'98 Conference, pages 388-392.\n[Mukaidono et al., 1989] M. Mukaidono, Z. Shen, and L. Ding. Fundamentals of fuzzy prolog. Int. Jour nal of A proximate Reasoning, 3:179-193.\n[Umana, 1987] M. Umana. Fuzzy set prolog. In Pro ceedings of IFSA '87 Conference, pages 750-753.\n[Virtanen, 1998] H.E. Virtanen. Linguistic logic pro gramming. In F. Arcelli and T.P. Martin, editors, Logic Programming and Soft Computing, chap ter 5, pages 91-128. Research Studies Press.\n[Vojtas, 1998] P. Vojtas. Fuzzy reasoning with tun able t-operators. Journal for Advanced Computer Intelligence, 2:121-127.\n[Weigert et al., 1993] T.J. Weigert, J. Tsai, and X. Liu. Fuzzy operator logic and fuzzy resolution. Journal of Automated Reasoning, 10:59-78."}], "references": [{"title": "A complete calculus for possibilistic logic pro\u00ad gramming with fuzzy propositional variables", "author": ["Alsinet", "Go do", "2000a] T. Alsinet", "L. Godo"], "venue": "Tech. Report DIEI-00-RT-1,", "citeRegEx": "Alsinet et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Alsinet et al\\.", "year": 2000}, {"title": "A complete proof method for possibilistic logic pro\u00ad gramming with semantical unification of fuzzy constants", "author": ["Alsinet", "Godo", "2000b] T. Alsinet", "L. Godo"], "venue": "Tech. Report DIEI-00-RT-2,", "citeRegEx": "Alsinet et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Alsinet et al\\.", "year": 2000}, {"title": "On the semantics and automated deduction for PLFC, a logic of possibilistic uncertainty and fuzziness", "author": ["Alsinet et al", "1999] T. Alsinet", "L. Godo", "S. San\u00ad dri"], "venue": "In Proceedings of UAI'99 Conference,", "citeRegEx": "al. et al\\.,? \\Q1999\\E", "shortCiteRegEx": "al. et al\\.", "year": 1999}, {"title": "A declarative programming environment for infinitely-valued logics", "author": ["Alsinet", "Manya", "1996] T. Alsinet", "F. Manya"], "venue": "In Proceedings of IPMU'96 Conference,", "citeRegEx": "Alsinet et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Alsinet et al\\.", "year": 1996}, {"title": "Fuzzy unification as a foundation of fuzzy logic programming", "author": ["Arcelli"], "venue": "Logic Programming and Soft Computing,", "citeRegEx": "Arcelli,? \\Q1998\\E", "shortCiteRegEx": "Arcelli", "year": 1998}, {"title": "Towards the use of fuzzy rule-based systems in the monitoring of manufactoring systems", "author": ["G. Bel", "D. Farreny", "H. Prade"], "venue": "[Bel et al.,", "citeRegEx": "Bel et al\\.,? \\Q1986\\E", "shortCiteRegEx": "Bel et al\\.", "year": 1986}, {"title": "Towards possibilistic logic programming", "author": ["Dubois et al", "1991] D. Dubois", "J. Lang", "H. Prade"], "venue": "In Proceedings of ICLP'91 Conference,", "citeRegEx": "al. et al\\.,? \\Q1991\\E", "shortCiteRegEx": "al. et al\\.", "year": 1991}, {"title": "Automated reasoning using possibilistic logic: Semantics, belief revision and variable cer\u00ad tainty weights", "author": ["Dubois et al", "1994a] D. Dubois", "J. Lang", "H. Prade"], "venue": "IEEE Trans. on Data and Knowl\u00ad edge Engineering,", "citeRegEx": "al. et al\\.,? \\Q1994\\E", "shortCiteRegEx": "al. et al\\.", "year": 1994}, {"title": "Handling uncertainty, context vague pred\u00ad icates and partial inconsistency in possibilistic", "author": ["Dubois et al", "1994b] D. Dubois", "J. Lang", "H. Prade"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q1994\\E", "shortCiteRegEx": "al. et al\\.", "year": 1994}, {"title": "Fuzzy sets in approximate reasoning-part 1: In\u00ad ference with possibility distributions. Fuzzy Sets and Systems, 40:143-202", "author": ["Dubois", "Prade", "1991] D. Dubois", "H. Prade"], "venue": null, "citeRegEx": "Dubois et al\\.,? \\Q1991\\E", "shortCiteRegEx": "Dubois et al\\.", "year": 1991}, {"title": "Possibilistic logic with fuzzy constants and fuzzily restricted quantifiers", "author": ["Dubois et al", "1998] D. Dubois", "H. Prade", "S. San\u00ad dri"], "venue": "Logic Programming and Soft Computing,", "citeRegEx": "al. et al\\.,? \\Q1998\\E", "shortCiteRegEx": "al. et al\\.", "year": 1998}, {"title": "Efficient interpretation of proposi\u00ad tional multiple-valued logic programs", "author": ["Escalada-Imaz", "Manya", "1995] G. Escalada-Imaz", "F. Many a"], "venue": "Intelligent Computing,", "citeRegEx": "Escalada.Imaz et al\\.,? \\Q1995\\E", "shortCiteRegEx": "Escalada.Imaz et al\\.", "year": 1995}, {"title": "Sim\u00ad ilarity in logic programming", "author": ["Gerla", "Sessa", "1999] G. Gerla", "M.l. Sessa"], "venue": "Fuzzy Logic and Soft Computing,", "citeRegEx": "Gerla et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Gerla et al\\.", "year": 1999}, {"title": "Possibilis\u00ad tic temporal reasoning based on fuzzy temporal constraints", "author": ["Godo", "Vila", "1995] L. Godo", "L. Vila"], "venue": "In Proceedings of IJCAI'95 Confer\u00ad ence,", "citeRegEx": "Godo et al\\.,? \\Q1922\\E", "shortCiteRegEx": "Godo et al\\.", "year": 1922}, {"title": "Prolog-ELF incorporating fuzzy logic", "author": ["Ishizuka", "Kanai", "1985] M. Ishizuka", "N. Kanai"], "venue": "In Proceed\u00ad ings of IJCAI'85 Conference,", "citeRegEx": "Ishizuka et al\\.,? \\Q1985\\E", "shortCiteRegEx": "Ishizuka et al\\.", "year": 1985}, {"title": "A Fuzzy Prolog Database System", "author": ["Li", "Liu", "1990] D. Li", "G. Liu"], "venue": null, "citeRegEx": "Li et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Li et al\\.", "year": 1990}, {"title": "Fundamentals of fuzzy prolog", "author": ["Mukaidono et al", "1989] M. Mukaidono", "Z. Shen", "L. Ding"], "venue": "Int. Jour\u00ad nal of A proximate Reasoning,", "citeRegEx": "al. et al\\.,? \\Q1989\\E", "shortCiteRegEx": "al. et al\\.", "year": 1989}, {"title": "Fuzzy operator logic and fuzzy resolution", "author": ["Weigert et al", "1993] T.J. Weigert", "J. Tsai", "X. Liu"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "al. et al\\.,? \\Q1993\\E", "shortCiteRegEx": "al. et al\\.", "year": 1993}], "referenceMentions": [{"referenceID": 9, "context": ", 1989; Li and Liu, 1990; Alsinet and Manya, 1996; Vojtas, 1998], possibilistic logic [Dubois et al., 1991], probabilistic logic [Heinsohn, 1994; Lukasiewicz, 1998], evidential logic [Baldwin, 1987; Baldwin et al.", "startOffset": 86, "endOffset": 107}, {"referenceID": 5, "context": ", 1982] and [Bel et al., 1986] with the aim of including fuzzy values in a pattern matching procedure.", "startOffset": 12, "endOffset": 30}], "year": 2011, "abstractText": "In this paper we present a propositional logic programming language for reasoning under possibilistic uncertainty and represent\u00ad ing vague knowledge. Formulas are repre\u00ad sented by pairs (ip, a), where ip is a many\u00ad valued proposition and a E [0, 1] is a lower bound on the belief on ip in terms of necessity measures. Belief states are modeled by pos\u00ad sibility distributions on the set of all many\u00ad valued interpretations. In this framework, (i) we define a syntax and a semantics of the gen\u00ad eral underlying uncertainty logic; (ii) we pro\u00ad vide a modus ponens-style calculus for a sub\u00ad language of Horn-rules and we prove that it is complete for determining the maximum de\u00ad gree of possibilistic belief with which a fuzzy propositional variable can be entailed from a set of formulas; and finally, (iii) we show how the computation of a partial matching be\u00ad tween fuzzy propositional variables, in terms of necessity measures for fuzzy sets, can be included in our logic programming system.", "creator": "pdftk 1.41 - www.pdftk.com"}}}