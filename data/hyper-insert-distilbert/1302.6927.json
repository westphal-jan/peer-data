{"id": "1302.6927", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Feb-2013", "title": "Online Learning for Time Series Prediction", "abstract": "explicitly in this research paper we address the conceptual problem of correctly predicting a time life series optimal using replacing the arma ( autoregressive moving average ) stat model, under minimal assumptions on the common noise terms. using synthetic regret graph minimization techniques, we independently develop effective online learning utility algorithms for integrating the prediction problem, generally without assuming properly that any the distributed noise terms are gaussian, identically distributed or usually even independent. furthermore, how we show claims that translating our algorithm'robust s performances asymptotically approaches virtually the approximate performance of solving the virtually best arma model used in rigorous hindsight.", "histories": [["v1", "Wed, 27 Feb 2013 17:14:14 GMT  (124kb)", "http://arxiv.org/abs/1302.6927v1", "17 pages, 6 figures"]], "COMMENTS": "17 pages, 6 figures", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["oren anava", "elad hazan", "shie mannor", "ohad shamir"], "accepted": false, "id": "1302.6927"}, "pdf": {"name": "1302.6927.pdf", "metadata": {"source": "CRF", "title": "Online Learning for Time Series Prediction", "authors": ["Oren Anava", "Elad Hazan", "Shie Mannor", "Ohad Shamir"], "emails": ["soanava@tx.technion.ac.il", "ehazan@ie.technion.ac.il", "shie@ee.technion.ac.il", "ohadsh@microsoft.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n30 2.\n69 27\nv1 [\ncs .L\nG ]\n2 7\nFe b"}, {"heading": "1 Introduction", "text": "A time series is a sequence of real-valued signals that are measured at successive time intervals. Autoregressive (AR), moving average (MA), and autoregressive moving average (ARMA) models are often used for the purpose of time-series modeling, analysis and prediction. These models have been successfully used in a wide range of applications such as speech analysis, noise cancelation, and stock market analysis ([Ham94, BJR94, SS05, BD09]). Roughly speaking, they are based on the assumption that each new signal is a noisy linear combination of the last few signals and independent noise terms.\nA great deal of work has been done on parameter identification and signal prediction using these models, mainly in the \u201cproper learning\u201d setting, in which the fitted model tries to mimic the assumed underlying model. Most of this work relied on strong assumptions regarding the noise terms, such as independence and identical Gaussian distribution. These assumptions are quite strict in general and the following statement from [Tho94] is sometimes quoted:\nExperience with real-world data, however, soon convinces one that both stationarity and Gaussianity are fairy tales invented for the amusement of undergraduates.\nIn this paper we argue that these assumptions can be relaxed into less strict assumptions on the noise terms. Moreover, we offer a novel approach for time series analysis and prediction \u2014 an online learning approach that allows the noise to be arbitrarily or even (to some extent) adversarially generated. The goal of this paper is to show that the new approach is more general, and is capable of coping with a wider range of time series and loss functions (rather than only the squared loss)."}, {"heading": "1.1 Summary of results", "text": "We present and analyze two online algorithms for the prediction problem, one designed for general convex loss functions and the other for exp-concave ones. Each of these algorithms attains sublinear regret bound against the best ARMA prediction in hindsight, under weak assumptions on the noise terms. We apply our results to the most commonly used loss function in time series analysis, the squared loss, and achieve a regret bound of O ( log2(T ) )\nagainst the best ARMA prediction in hindsight. Finally, we present an empirical study that verifies our theoretical results."}, {"heading": "1.2 Related work", "text": "In standard time series analysis, the squared loss is usually considered and the noise terms are assumed to be independent with bounded variance and zero-mean. In this specific setting, one can assume without loss of generality that the noise terms have identical Gaussian distribution (see [Ham94, BJR94, BD09] for more information). This allows the use of statistical methods, such as least squares and maximum likelihood based methods, for the tasks of analysis and prediction. However, when different loss functions are considered these assumptions do not hold in general, and the aforementioned methods are not applicable. We are not aware of a previous approach that tries to relax these assumptions for general convex loss functions. We note that there has been previous work which tries to relax such assumptions for the squared loss, usually under additional modelling assumptions such as t-distribution of the noise (e.g., [DES89, TWVB00]). We emphasize that the independence assumption is rather strict and previous works that relax this assumption usually offer specific dependency model, e.g., as proposed by [Eng82] for the ARCH model.\nFurthermore, an online approach that relies on regret minimization techniques was never considered for ARMA prediction, and hence regret bounds of the type we are interested simply do not exist. Yet, results on the convergence rate of the coefficient vectors do exist, and regret bounds can be derived from these results. E.g., in [DSC06] such results are presented, and a regret bound of O ( log2(T ) )\ncan be derived for the squared loss. We are not familiar of these kind of results for general convex loss functions."}, {"heading": "2 Preliminaries and model", "text": ""}, {"heading": "2.1 Time series modelling", "text": "A time series is a sequence of signals, measured at successive times, which are assumed to be spaced at uniform intervals. We denote by Xt the signal measured at time t, and by \u01ebt the noise term at time t. The AR(k) (short for autoregressive) model, parameterized by a horizon k and a coefficient vector \u03b1 \u2208 Rk, assumes that the time series is generated according to the following model, where \u01ebt is a zero-mean random noise term:\nXt =\nk \u2211\ni=1\n\u03b1iXt\u2212i + \u01ebt. (1)\nIn words, the model assumes that each Xt is a noisy linear combination of the previous k signals. A more sophisticated model is the ARMA(k, q) (short for autoregressive moving average) model, which is\nparameterized by two horizon terms k, q and coefficient vectors \u03b1 \u2208 Rk and \u03b2 \u2208 Rq. This model assumes that Xt is generated via the formula:\nXt = k \u2211\ni=1\n\u03b1iXt\u2212i +\nq \u2211\ni=1\n\u03b2i\u01ebt\u2212i + \u01ebt, (2)\nwhere again \u01ebt are zero-mean noise terms. Sometimes, an additional constant bias term is added to the equation (to indicate constant drift), but we will ignore this for simplicity. Note that the AR(k) model is a special case of the ARMA(k, q) model, where the \u03b2i coefficients are all zero."}, {"heading": "2.2 The online setting for ARMA prediction", "text": "Online learning is usually defined in a game-theoretic framework, where the data, rather than being chosen stochastically, are chosen arbitrarily, possibly by an all-powerful adversary with full knowledge of our learning algorithm (see for instance [CBL06]). In our context, we will describe the setting as follows: First, some coefficient vectors (\u03b1, \u03b2) are fixed by the adversary. At each time point t, the adversary chooses \u01ebt and generates the resulting signal Xt using the formula in Equation 2. We emphasize that (\u03b1, \u03b2) and the noise terms are not revealed to us at any time point.\nAt iteration t, we need to make a prediction X\u0303t for the signal, after which the real signal Xt is revealed, and we suffer a loss denoted by \u2113t ( Xt, X\u0303t )\n. Our goal is to minimize the sum of losses over a predefined number of iterations T . A reasonable benchmark is to try to be not much worse than the best possible ARMA model. More precisely, we let\nft(\u03b1, \u03b2) = \u2113t ( Xt, X\u0303t(\u03b1, \u03b2) ) = \u2113t\n(\nXt,\n(\nk \u2211\ni=1\n\u03b1iXt\u2212i +\nq \u2211\ni=1\n\u03b2i\u01ebt\u2212i\n))\n(3)\ndenote the loss at time t of the (conditionally expected) prediction given by an ARMA model with some coefficients (\u03b1, \u03b2). We then define the regret as\nRT = T \u2211\nt=1\n\u2113t ( Xt, X\u0303t ) \u2212min \u03b1,\u03b2\nT \u2211\nt=1\n\u2113t ( Xt, X\u0303t(\u03b1, \u03b2) ) . (4)\nWe wish to obtain efficient algorithms, whose regret grows sublinearly in T , corresponding to an average per-round regret going to zero as T increases. 1\nA major challenge in our setting is that the noise terms {\u01ebt}Tt=1 are unknown. As a result, we cannot use existing online convex optimization algorithms over the space of coefficient vectors (\u03b1, \u03b2). Moreover, even if we are given some (\u03b1, \u03b2), we cannot generate a prediction X\u0303t using the ARMA model. This lack of information makes it also hard to compute the best coefficient vectors in hindsight, and hence competing against the best ARMA model is ill-defined in this case.\n1The iterations in which t \u2264 k are usually ignored since we assume that the loss per iteration is bounded by a constant, this adds at most a constant to the final regret bound."}, {"heading": "2.3 Our assumptions", "text": "Throughout Section 3 we assume the following:\n1. The noise terms are stochastically and independently generated, each from a zero-mean distribution which might be chosen adversarially (up to the assumptions below). In Section 4 we show how to relax this assumption to adversarial noise. Also, we assume that E [|\u01ebt|] < Mmax < \u221e and E [\u2113t (Xt,Xt \u2212 \u01ebt)] < \u221e for all t.\n2. The loss function \u2113t is Lipshitz continuous for some Lipshitz constant L > 0. This is a standard assumption and it holds in particular for the squared loss, as well as for other convex loss functions, with compact domain.\n3. The coefficients \u03b1i satisfy |\u03b1i| < c for some c \u2208 R. This assumption is also standard, and needed in general for the decision set (defined in Subsection 3.1) to be bounded. We assume that c = 1 without loss of generality.\n4. The coefficients \u03b2i satisfy \u2211q i=1 |\u03b2i| < 1\u2212 \u03b5, for some \u03b5 > 0. 5. The signal is bounded (by constant which is independent of T ). Without loss of generality we assume\nthat |Xt| < 1 for all t."}, {"heading": "3 Online time series prediction", "text": "As said before, we cannot use existing online convex optimization algorithms over the space of coefficient vectors (\u03b1, \u03b2) since the noise terms are unknown to us at any stage. Instead, we use an improper learning approach, where our predictions at each time point will not come from an ARMA model that tries to mimic the underlying model. More specifically, we fix some m \u2208 N, and at each time point t, we choose an (m+ k)-dimensional coefficient vector \u03b3 \u2208 Rm+k and predict by X\u0303t(\u03b3) = \u2211m+k i=1 \u03b3iXt\u2212i. It follows that our loss at iteration t is determined by the loss function\n\u2113mt (\u03b3 t) = \u2113t\n( Xt, X\u0303t(\u03b3 t) ) = \u2113t\n(\nXt,\n(\nm+k \u2211\ni=1\n\u03b3tiXt\u2212i\n))\n. (5)\nThis can be seen as an AR model with horizon (m+ k). This leads to one of our key results: we can learn ARMA(k, q) model using AR(m+ k) model, for a properly chosen value of m. We quantify this result in Theorem 3.1 in terms of regret."}, {"heading": "3.1 Algorithm parameters definition and calculation", "text": "Before presenting the algorithm and stating our main theorem, we need to define the following parameters. The decision set K is the set of candidates ((m+ k)-dimensional coefficient vectors) we can choose from at each iteration; it is defined as\nK = { \u03b3 \u2208 Rm+k , |\u03b3j | \u2264 1 , j = 1, . . . ,m } .\nIntuitively, the structure of K follows from Assumptions 3-4 on \u03b1 and \u03b2, which restrict our improper learning variable \u03b3. We denote by D the diameter of K, and bound:\nD = sup \u03b31,\u03b32\u2208K\n\u2016\u03b31 \u2212 \u03b32\u20162 = \u221a 2 (m+ k). (6)\nNext, we denote by G the upper-bound of \u2016\u2207\u2113mt (\u03b3)\u2016 for all t and \u03b3 \u2208 K. This parameter depends on the loss function considered, and its computation is done accordingly. E.g., for the squared loss we get that G = 2 \u221a m+ kD, relying on Assumption 5. Finally, we denote by \u03bb the exp-concavity parameter of the loss functions {\u2113mt }Tt=1, i.e., it holds that e\u2212\u03bb\u00b7\u2113 m t (\u03b3) is concave for all t 2. This parameter is relevant only for exp-concave loss functions, and its computation is also done according to the loss function considered. It can be shown that \u03bb = 1\nm+k when the squared loss is considered."}, {"heading": "3.2 ARMA Online Newton Step (ARMA-ONS)", "text": "Algorithm 1 shows how to choose \u03b3t in each iteration, when the loss functions {\u2113mt }Tt=1 are assumed to be \u03bb-exp-concave in \u03b3. The notation \u03a0AtK refers to the projection onto K in the norm induced by At, i.e., \u03a0AtK (y) = argminx\u2208K(y \u2212 x)\u22a4At(y \u2212 x).\nAlgorithm 1 ARMA-ONS(k,q) 1: Input: ARMA order k,q; learning rate \u03b7; an initial (m+ k)\u00d7 (m+ k) matrix A0. 2: Set m = q \u00b7 log1\u2212\u03b5 ( (TLMmax) \u22121 ) .\n3: Choose \u03b31 \u2208 K arbitrarily. 4: for t = 1 to (T \u2212 1) do 5: Predict X\u0303t(\u03b3t) = \u2211m+k i=1 \u03b3 t iXt\u2212i. 6: Observe Xt and suffer loss \u2113mt (\u03b3 t). 7: Let \u2207t = \u2207\u2113mt (\u03b3t), update At \u2190 At\u22121 +\u2207t\u2207\u22a4t 8: Set \u03b3t+1 \u2190 \u03a0AtK ( \u03b3t \u2212 1 \u03b7 A\u22121t \u2207t ) 9: end for\nIn case the dimension (m+ k) of At is large, we note that its inverse can be efficiently re-computed after each update using the Sherman-Morrison formula.\nFor Algorithm 1 we can prove the following:\nTheorem 3.1. Let k, q \u2265 1, and set A0 = \u01ebIm+k, \u01eb = 1\u03b72D2 , \u03b7 = 12 min{4GD,\u03bb}. Then, for any data sequence {Xt}Tt=1 that satisfies the assumptions from Section 2.3, Algorithm 1 generates an online sequence {\u03b3t}Tt=1, for which the following holds:\nT \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212min\n\u03b1,\u03b2\nT \u2211\nt=1\nE [ft(\u03b1, \u03b2)] = O\n((\nGD + 1\n\u03bb\n)\nlog(T )\n)\n. (7)\n2It is easy to show that every exp-concave function is convex, the opposite is not correct.\nRemark: The expectation is necessary since the noise terms \u01ebt are unknown. Also, obtaining a high probability bound on the regret is possible but requires additional assumptions on the noise process such as boundedness or light tail.\nProof. Intuitively, Theorem 3.1 states that we can have a regret as low as the best ARMA(k, q) model, using only an AR(m + k) model. The proof consists of two steps. In the first step we bound the regret suffered by an AR(m+k) prediction using familiar techniques of online convex optimization. In the second step we bound the distance between the AR(m + k) loss function and the ARMA(k, q) loss function, using a chain of bounds and inequalities. Integrating both steps yields the requested regret bound for the ARMA(k, q) loss function. Step 1: Relying on the fact that the loss functions {\u2113mt }Tt=1 are \u03bb-exp-concave, we can guarantee that\nT \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212min\n\u03b3\nT \u2211\nt=1\n\u2113mt (\u03b3) = O (( GD + 1\n\u03bb\n) log(T ) ) ,\nusing the Online Newton Step (ONS) algorithm, presented in [HAK07]. Step 2: Define recursively\nX\u221et (\u03b1, \u03b2) = k \u2211\ni=1\n\u03b1iXt\u2212i +\nq \u2211\ni=1\n\u03b2i ( Xt\u2212i \u2212X\u221et\u2212i(\u03b1, \u03b2) ) ,\nwith initial condition X\u221e1 (\u03b1, \u03b2) = X1. We then denote by\nf\u221et (\u03b1, \u03b2) = \u2113t (Xt,X \u221e t (\u03b1, \u03b2)) (8)\nthe loss suffered by the prediction X\u221et (\u03b1, \u03b2) at iteration t. From this definition it follows that X \u221e t (\u03b1, \u03b2) is of the form X\u221et (\u03b1, \u03b2) = \u2211t\u22121\ni=1 ci(\u03b1, \u03b2)Xt\u2212i for some appropriate coefficients ci(\u03b1, \u03b2). The motivation behind the definition of f\u221et follows from the need to replace ft with a loss function that fits the full information online optimization model (no unknown parameters). We set m \u2208 N, and define\nXmt (\u03b1, \u03b2) =\nk \u2211\ni=1\n\u03b1iXt\u2212i +\nq \u2211\ni=1\n\u03b2i ( Xt\u2212i \u2212Xm\u2212it\u2212i (\u03b1, \u03b2) ) ,\nwith initial condition Xmt (\u03b1, \u03b2) = Xt for all t and m \u2264 0. We denote by\nfmt (\u03b1, \u03b2) = \u2113t (Xt,X m t (\u03b1, \u03b2)) (9)\nthe loss suffered by the prediction Xmt (\u03b1, \u03b2) at iteration t. The motivation here is simple: it is easier to generate predictions using only the last (m+ k) signals, and the distance between the loss function is relatively small. Now, let\n(\u03b1\u22c6, \u03b2\u22c6) = argmin \u03b1,\u03b2\nT \u2211\nt=1\nE [ft(\u03b1, \u03b2)] (10)\ndenote the best ARMA coefficient in hindsight for predicting the signal {Xt}Tt=1. Then, from Lemma 3.2, stated and proven below, we have that\nmin \u03b3\nT \u2211\nt=1\n\u2113mt (\u03b3) \u2264 T \u2211\nt=1\nfmt (\u03b1 \u22c6, \u03b2\u22c6) ,\nand it follows that T \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212\nT \u2211\nt=1\nfmt (\u03b1 \u22c6, \u03b2\u22c6) = O\n(( GD + 1\n\u03bb\n) log(T ) ) .\nFrom Lemma 3.3 below we know that \u2223\n\u2223 \u2223 \u2223 \u2223\nT \u2211\nt=1\nE [f\u221et (\u03b1 \u22c6, \u03b2\u22c6)]\u2212\nT \u2211\nt=1\nE [fmt (\u03b1 \u22c6, \u03b2\u22c6)]\n\u2223 \u2223 \u2223 \u2223 \u2223 = O(1),\nfor m = q \u00b7 log1\u2212\u03b5 ( (TLMmax) \u22121 ) , which implies that\nT \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212\nT \u2211\nt=1\nE [f\u221et (\u03b1 \u22c6, \u03b2\u22c6)] = O\n(( GD + 1\n\u03bb\n) log(T ) ) .\nFinally, from Lemma 3.4 below we know that \u2223\n\u2223 \u2223 \u2223 \u2223\nT \u2211\nt=1\nE [f\u221et (\u03b1 \u22c6, \u03b2\u22c6)]\u2212\nT \u2211\nt=1\nE [ft (\u03b1 \u22c6, \u03b2\u22c6)]\n\u2223 \u2223 \u2223 \u2223 \u2223 = O ( 1),\nand thus T \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212min\n\u03b1,\u03b2\nT \u2211\nt=1\nE [ft(\u03b1, \u03b2)] = O\n((\nGD + 1\n\u03bb\n)\nlog(T )\n)\n.\nNext, we prove the lemmas we used.\nLemma 3.2. Let \u2113mt (\u03b3), f m t (\u03b1, \u03b2) and (\u03b1 \u22c6, \u03b2\u22c6) be as denoted in Equations 5, 9 and 10. Then, for all m \u2208 N and data sequence {Xt}Tt=1 that satisfies the assumptions from Section 2.3, it holds that\nmin \u03b3\nT \u2211\nt=1\n\u2113mt (\u03b3) \u2264 T \u2211\nt=1\nfmt (\u03b1 \u22c6, \u03b2\u22c6) .\nProof. Note that if we set \u03b3\u22c6i = ci(\u03b1 \u22c6, \u03b2\u22c6), we immediately get that\nT \u2211\nt=1\n\u2113mt (\u03b3 \u22c6) =\nT \u2211\nt=1\nfmt (\u03b1 \u22c6, \u03b2\u22c6) .\nTrivially, it always holds that\nmin \u03b3\nT \u2211\nt=1\n\u2113mt (\u03b3) \u2264 T \u2211\nt=1\n\u2113mt (\u03b3 \u22c6),\nwhich completes the proof.\nLemma 3.3. Let f\u221et (\u03b1, \u03b2), f m t (\u03b1, \u03b2) and (\u03b1 \u22c6, \u03b2\u22c6) be as denoted in Equations 8, 9 and 10. Then, for any data sequence {Xt}Tt=1 that satisfies the assumptions from Section 2.3, it holds that\n\u2223 \u2223 \u2223 \u2223 \u2223 T \u2211\nt=1\nE [f\u221et (\u03b1 \u22c6, \u03b2\u22c6)]\u2212\nT \u2211\nt=1\nE [fmt (\u03b1 \u22c6, \u03b2\u22c6)]\n\u2223 \u2223 \u2223 \u2223 \u2223 = O(1),\nif we choose m = q \u00b7 log1\u2212\u03b5 ( (TLMmax) \u22121 ) .\nProof. We set t, and look at the distance between f\u221et (\u03b1 \u22c6, \u03b2\u22c6) and fmt (\u03b1 \u22c6, \u03b2\u22c6) in expectation. We show by induction that\nE [|Xmt (\u03b1\u22c6, \u03b2\u22c6)\u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6) |] \u2264 2Mmax \u00b7 (1\u2212 \u03b5) m q .\nFor m = 0 we have that X0t (\u03b1 \u22c6, \u03b2\u22c6) = Xt from the definition, and hence\n|X0t (\u03b1\u22c6, \u03b2\u22c6)\u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6) | \u2264 |Xt \u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6) | \u2264 |Xt \u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6)\u2212 \u01ebt|+ |\u01ebt|.\nNow, E [|\u01ebt|] < Mmax < \u221e for all t and E [|Xt \u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6)\u2212 \u01ebt|] decays exponentially as proven in lemma 3.4, and hence the inductive basis holds for m = 0. Next, we prove that the inductive basis holds for m = 1, . . . , q \u2212 1:\n|Xmt (\u03b1\u22c6, \u03b2\u22c6)\u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6) |\n=\n\u2223 \u2223 \u2223 \u2223 \u2223 q \u2211\ni=1\n\u03b2\u22c6i ( Xt\u2212i \u2212Xm\u2212it\u2212i (\u03b1\u22c6, \u03b2\u22c6) )\n\u2212 q \u2211\ni=1\n\u03b2\u22c6i ( Xt\u2212i \u2212X\u221et\u2212i (\u03b1\u22c6, \u03b2\u22c6) )\n\u2223 \u2223 \u2223 \u2223 \u2223\n=\n\u2223 \u2223 \u2223 \u2223 \u2223 m \u2211\ni=1\n\u03b2\u22c6i ( X\u221et\u2212i (\u03b1 \u22c6, \u03b2\u22c6)\u2212Xm\u2212it\u2212i (\u03b1\u22c6, \u03b2\u22c6) ) +\nq \u2211\ni=m+1\n\u03b2\u22c6i ( X\u221et\u2212i (\u03b1 \u22c6, \u03b2\u22c6)\u2212Xm\u2212it\u2212i (\u03b1\u22c6, \u03b2\u22c6) )\n\u2223 \u2223 \u2223 \u2223 \u2223\n(1) \u2264 m \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 \u2223 \u2223X\u221et\u2212i (\u03b1 \u22c6, \u03b2\u22c6)\u2212Xm\u2212it\u2212i (\u03b1\u22c6, \u03b2\u22c6) \u2223 \u2223+\nq \u2211\ni=m+1\n|\u03b2\u22c6i | \u00b7 \u2223 \u2223X\u221et\u2212i (\u03b1 \u22c6, \u03b2\u22c6)\u2212Xt \u2223 \u2223\n(2) \u2264 m \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 2Mmax \u00b7 (1\u2212 \u03b5) m\u2212i q +\nq \u2211\ni=m+1\n|\u03b2\u22c6i | \u00b7 2Mmax (3) \u2264 q \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 2Mmax \u00b7 (1\u2212 \u03b5) m\u2212q q\n\u2264 2Mmax \u00b7 (1\u2212 \u03b5) m q .\n(1) is true from the triangle inequality and from the definition of Xmt for m \u2264 0. (2) is true from the inductive hypothesis on m. (3) is true since 1 \u2264 (1\u2212 \u03b5) m\u2212q\nq for m = 1, . . . , q \u2212 1. For the inductive step we assume that\n|X\u00b5\u03c4 (\u03b1\u22c6, \u03b2\u22c6)\u2212X\u221e\u03c4 (\u03b1\u22c6, \u03b2\u22c6) | \u2264 2Mmax \u00b7 (1\u2212 \u03b5) \u00b5 q\nfor q \u2264 \u00b5 < m and \u03c4 < t, and prove that\n|Xmt (\u03b1\u22c6, \u03b2\u22c6)\u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6) | \u2264 2Mmax \u00b7 (1\u2212 \u03b5) m q .\nThus,\n|Xmt (\u03b1\u22c6, \u03b2\u22c6)\u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6) |\n=\n\u2223 \u2223 \u2223 \u2223 \u2223 q \u2211\ni=1\n\u03b2\u22c6i ( Xt\u2212i \u2212Xm\u2212it\u2212i (\u03b1\u22c6, \u03b2\u22c6) )\n\u2212 q \u2211\ni=1\n\u03b2\u22c6i ( Xt\u2212i \u2212X\u221et\u2212i (\u03b1\u22c6, \u03b2\u22c6) )\n\u2223 \u2223 \u2223 \u2223 \u2223\n=\n\u2223 \u2223 \u2223 \u2223 \u2223 q \u2211\ni=1\n\u03b2\u22c6i ( X\u221et\u2212i (\u03b1 \u22c6, \u03b2\u22c6)\u2212Xm\u2212it\u2212i (\u03b1\u22c6, \u03b2\u22c6) )\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2264 q \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 \u2223 \u2223X\u221et\u2212i (\u03b1 \u22c6, \u03b2\u22c6)\u2212Xm\u2212it\u2212i (\u03b1\u22c6, \u03b2\u22c6) \u2223 \u2223\n\u2264 q \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 2Mmax \u00b7 (1\u2212 \u03b5) m\u2212i q \u2264\nq \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 2Mmax \u00b7 (1\u2212 \u03b5) m\u2212q q\n\u2264 (1\u2212 \u03b5) \u00b7 2Mmax \u00b7 (1\u2212 \u03b5) m\u2212q q = 2Mmax \u00b7 (1\u2212 \u03b5) m q ,\nwhich completes the induction. Recall that \u2113t is Lipshitz continuous for some Lipshitz constant L > 0 from Assumption 2, and hence it follows that\n|E [f\u221et (\u03b1\u22c6, \u03b2\u22c6)]\u2212 E [fmt (\u03b1\u22c6, \u03b2\u22c6)]| = |E [\u2113t (Xt,X\u221et (\u03b1\u22c6, \u03b2\u22c6))]\u2212 E [\u2113t (Xt,Xmt (\u03b1\u22c6, \u03b2\u22c6))]| \u2264 E [|\u2113t (Xt,X\u221et (\u03b1\u22c6, \u03b2\u22c6))\u2212 \u2113t (Xt,Xmt (\u03b1\u22c6, \u03b2\u22c6))|] \u2264 L \u00b7 E [|Xmt (\u03b1\u22c6, \u03b2\u22c6)\u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6) |] \u2264 L \u00b7 2Mmax \u00b7 (1\u2212 \u03b5) m q ,\nwhere the first inequality follows from Jensen\u2019s inequality. By summing the above for all t we get that\n\u2223 \u2223 \u2223 \u2223 \u2223 T \u2211\nt=1\nE [f\u221et (\u03b1 \u22c6, \u03b2\u22c6)]\u2212\nT \u2211\nt=1\nE [fmt (\u03b1 \u22c6, \u03b2\u22c6)]\n\u2223 \u2223 \u2223 \u2223 \u2223 \u2264 TL \u00b7 2Mmax \u00b7 (1\u2212 \u03b5) m q .\nFinally, choosing m = q \u00b7 log1\u2212\u03b5 ( (TLMmax) \u22121 ) yields\n\u2223 \u2223 \u2223 \u2223 \u2223 T \u2211\nt=1\nE [f\u221et (\u03b1 \u22c6, \u03b2\u22c6)]\u2212\nT \u2211\nt=1\nE [fmt (\u03b1 \u22c6, \u03b2\u22c6)]\n\u2223 \u2223 \u2223 \u2223 \u2223 = O(1).\nLemma 3.4. Let ft(\u03b1, \u03b2), f\u221et (\u03b1, \u03b2) and (\u03b1 \u22c6, \u03b2\u22c6) be as denoted in Equations 3, 8 and 10. Then, for any data sequence {Xt}Tt=1 that satisfies the assumptions from Subsection 2.3, it holds that \u2223\n\u2223 \u2223 \u2223 \u2223\nT \u2211\nt=1\nE [f\u221et (\u03b1 \u22c6, \u03b2\u22c6)]\u2212\nT \u2211\nt=1\nE [ft (\u03b1 \u22c6, \u03b2\u22c6)]\n\u2223 \u2223 \u2223 \u2223 \u2223 = O (1) .\nProof. First, denote by (\u03b1\u2032, \u03b2\u2032) the coefficient vectors that have generated the signal. Trivially, it holds that\nT \u2211\nt=1\nft ( \u03b1\u2032, \u03b2\u2032 ) = T \u2211\nt=1\n\u2113t (Xt,Xt \u2212 \u01ebt) .\nFrom Assumption 1, \u01ebt is independent of \u01eb1, . . . , \u01ebt\u22121, and hence the best prediction available at time t will cause a loss of at least \u2113t (Xt,Xt \u2212 \u01ebt) in expectation. We can think of it in the following way: at time t, the online player has no previous information regarding the adversary\u2019s choice of \u01ebt. Since E [\u01ebt] = 0 and \u2113t is convex, predicting the expected signal is the optimal policy of the online player at time t. It follows that (\u03b1\u22c6, \u03b2\u22c6) = (\u03b1\u2032, \u03b2\u2032), meaning the best ARMA coefficients in hindsight are those that have generated the signal. Next, we show by induction that E [|Xt \u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6)\u2212 \u01ebt|] decays exponentially as t grows linearly. Without loss of generality, we can assume that for t = 1, . . . , q we have that E [|Xt \u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6)\u2212 \u01ebt|] < \u03c1 for some \u03c1 > 0, as the inductive basis. Now, for the inductive step we assume that\nE [|X\u03c4 \u2212X\u221e\u03c4 (\u03b1\u22c6, \u03b2\u22c6)\u2212 \u01eb\u03c4 |] < \u03c1 \u00b7 (1\u2212 \u03b5) \u03c4 q\nfor q < \u03c4 < t, and prove that\nE [|Xt \u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6)\u2212 \u01ebt|] \u2264 \u03c1 \u00b7 (1\u2212 \u03b5) t q .\nThus,\nE [|Xt \u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6)\u2212 \u01ebt|]\n= E\n[ \u2223\n\u2223 \u2223 \u2223 \u2223\nk \u2211\ni=1\n\u03b1\u22c6iXt\u2212i +\nq \u2211\ni=1\n\u03b2\u22c6i \u01ebt\u2212i + \u01ebt \u2212 k \u2211\ni=1\n\u03b1\u22c6iXt\u2212i \u2212 q \u2211\ni=1\n\u03b2\u22c6i ( Xt\u2212i \u2212X\u221et\u2212i (\u03b1\u22c6, \u03b2\u22c6) ) \u2212 \u01ebt \u2223 \u2223 \u2223 \u2223\n\u2223\n]\n= E\n[\u2223\n\u2223 \u2223 \u2223 \u2223\nq \u2211\ni=1\n\u03b2\u22c6i ( X\u221et\u2212i (\u03b1 \u22c6, \u03b2\u22c6)\u2212Xt\u2212i \u2212 \u01ebt\u2212i )\n\u2223 \u2223 \u2223 \u2223 \u2223 ] \u2264 q \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 E [\u2223 \u2223X\u221et\u2212i (\u03b1 \u22c6, \u03b2\u22c6)\u2212Xt\u2212i \u2212 \u01ebt\u2212i \u2223 \u2223 ]\n\u2264 q \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 \u03c1 \u00b7 (1\u2212 \u03b5) t\u2212i q \u2264\nq \u2211\ni=1\n|\u03b2\u22c6i | \u00b7 \u03c1 \u00b7 (1\u2212 \u03b5) t\u2212q q \u2264 (1\u2212 \u03b5) \u00b7 \u03c1 (1\u2212 \u03b5) t\u2212q q = \u03c1 \u00b7 (1\u2212 \u03b5) t q\nwhich ends the induction. Recall that \u2113t is assumed to be Lipshitz continuous for some constant L > 0, and hence it follows that\n|E [f\u221et (\u03b1\u22c6, \u03b2\u22c6)]\u2212 E [ft (\u03b1\u22c6, \u03b2\u22c6)]| = |E [\u2113t (Xt,X\u221et (\u03b1\u22c6, \u03b2\u22c6))]\u2212 E [\u2113t (Xt,Xt \u2212 \u01ebt)]| = |E [\u2113t (Xt,X\u221et (\u03b1\u22c6, \u03b2\u22c6))\u2212 \u2113t (Xt,Xt \u2212 \u01ebt)]| \u2264 E [|\u2113t (Xt,X\u221et (\u03b1\u22c6, \u03b2\u22c6))\u2212 \u2113t (Xt,Xt \u2212 \u01ebt)|] \u2264 L \u00b7 E [|Xt \u2212X\u221et (\u03b1\u22c6, \u03b2\u22c6)\u2212 \u01ebt|] \u2264 \u03c1L \u00b7 (1\u2212 \u03b5) t q .\nFinally, summing over all iterations yields \u2223\n\u2223 \u2223 \u2223 \u2223\nT \u2211\nt=1\nE [f\u221et (\u03b1 \u22c6, \u03b2\u22c6)]\u2212\nT \u2211\nt=1\nE [ft (\u03b1 \u22c6, \u03b2\u22c6)]\n\u2223 \u2223 \u2223 \u2223 \u2223 = O (1) .\nRemark: In Lemma 3.4 we assume here that \u03c1qL = O (1). Otherwise, an element of O (\u03c1qL) is added to the regret bound in Theorems 3.1, which does not affect the asymptotic result."}, {"heading": "3.3 ARMA Online Gradient Descent (ARMA-OGD)", "text": "We now turn to present a different algorithm for choosing \u03b3t at each time point. This algorithm is applicable to general convex loss functions, as well as to exp-concave ones. It is computationally simpler but has a somewhat worse theoretical (and empirical) performance compared to the previous one, when considering an exp-concave loss function. The notation \u03a0K refers to the Euclidean projection onto K, i.e., \u03a0K(y) = argminx\u2208K \u2016y \u2212 x\u20162 .\nAlgorithm 2 ARMA-OGD(k,q) 1: Input: ARMA order k,q. Learning rate \u03b7.\n2: Set m = q \u00b7 log1\u2212\u03b5 ( (TLMmax) \u22121 ) . 3: Choose \u03b31 \u2208 K arbitrarily. 4: for t = 1 to (T \u2212 1) do 5: Predict X\u0303t(\u03b3t) = \u2211m+k i=1 \u03b3 t iXt\u2212i. 6: Observe Xt and suffer loss \u2113mt (\u03b3t). 7: Let \u2207t = \u2207\u2113mt (\u03b3t) 8: Set \u03b3t+1 \u2190 \u03a0K ( \u03b3t \u2212 1 \u03b7 \u2207t ) 9: end for\nFor Algorithm 2 we can prove the following:\nTheorem 3.5. Let k, q \u2265 1, and set \u03b7 = D G \u221a T . Then, for any data sequence {Xt}Tt=1 that satisfies the assumptions from Section 2.3, Algorithm 2 generates an online sequence {\u03b3t}Tt=1, for which the following holds:\nT \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212min\n\u03b1,\u03b2\nT \u2211\nt=1\nE [ft(\u03b1, \u03b2)] = O ( GD \u221a T ) . (11)\nThe proof of this theorem is very similar to the proof of Theorem 3.1, albeit plugging into our framework the Online Gradient Descent (OGD) algorithm of [Zin03] rather than the Online Newton Step algorithm."}, {"heading": "4 Additional results", "text": "In this section we present an analysis for the case when the noise terms are allowed to be adversarial, and also an application of Theorem 3.1 for squared loss."}, {"heading": "4.1 Adversarial noise", "text": "The results presented in Theorems 3.1 and 3.5 rely on the assumptions that the noise terms are independent and zero-mean. Under these assumptions, the best coefficient vectors in hindsight are those that have generated the signal. However, if we allow the noise terms to be adversarially generated (the adversary chooses \u01ebt at time t with no limitations), the best coefficient vectors in hindsight are not necessarily the ones used for generating the signal. For this case we have the following theorem:\nTheorem 4.1. Denote by (\u03b1\u2032, \u03b2\u2032) the coefficient vectors that have generated the signal, and assume that {Xt}Tt=1 satisfies Assumptions 2-5 from Section 2.3, when the noise terms are allowed to be chosen adversarially. Then, for exp-concave loss functions Algorithm 1 generates an online sequence {\u03b3t}Tt=1, for which the following holds:\nT \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212\nT \u2211\nt=1\nE [ ft ( \u03b1\u2032, \u03b2\u2032 )] = O\n((\nGD + 1\n\u03bb\n)\nlog(T )\n)\n,\nand for convex loss functions, Algorithm 2 generates an online sequence {\u03b3t}Tt=1, for which the following holds:\nT \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212\nT \u2211\nt=1\nE [ ft ( \u03b1\u2032, \u03b2\u2032 )] = O ( GD \u221a T ) .\nNotice that we compare here the total loss suffered by our algorithms to the expected loss suffered by ARMA prediction with the coefficient vectors that have generated the signal, and not to the expected loss of the best ARMA prediction in hindsight. Nevertheless, this theorem captures interesting cases (e.g., correlated noise), in which traditional approaches fail to perform properly. The proof of this theorem resembles the proof of Theorem 3.1, with the modification of plugging (\u03b1\u2032, \u03b2\u2032) into Lemmas 3.3 and 3.4, instead of (\u03b1\u22c6, \u03b2\u22c6)."}, {"heading": "4.2 Application of Theorem 3.1 to squared loss", "text": "As already mentioned, the squared loss is the most commonly used loss function in time series analysis. It is defined as \u2113t(Xt, X\u0303t) = (Xt \u2212 X\u0303t)2 for prediction X\u0303t and signal Xt. In our case, the predictions come from an AR model with horizon (m+ k), and hence our loss at time t is (Xt \u2212 \u2211m+k i=1 \u03b3 t iXt\u2212i)\n2, when {\u03b3t}Tt=1 are generated using Algorithm 1. Substituting the values of G, D and \u03bb, as defined and computed in Subsection 3.1 for the squared loss, yields the following result:\nT \u2211\nt=1\n\u2113mt (\u03b3 t)\u2212min\n\u03b1,\u03b2\nT \u2211\nt=1\nE [ft(\u03b1, \u03b2)] = O ( k log (T ) + q log2 (T ) ) . (12)\nThis result implies that the average loss suffered by Algorithm 1 converges asymptotically to the average loss suffered by the best ARMA prediction in hindsight, under the assumptions from Section 2.3. In section 5 we empirically verify this theoretical result, under some different settings."}, {"heading": "5 Experiments", "text": "The following experiments demonstrate the prediction effectiveness of the proposed algorithms, under some different settings. We compare the performance to the ARMA-RLS algorithm, which was presented in [DSC06]. In a few words, the ARMA-RLS is a \u201cproper learning\u201d algorithm \u2014 it tries to mimic the underlying model. It estimates the noise terms using a recursive least squares based method, and satisfies a prediction using these estimations and the previous signals. The ARMA-RLS does not assume noise stationarity or ergodicity. We also benchmark the standard Yule-Walker estimation method3. The results are displayed in the figures below. In all cases, the x-axis is time (number of samples), and the y-axis is the average squared loss."}, {"heading": "5.1 Experiments with artificial data", "text": "In all experimental settings below we have averaged the results over 20 runs for stability. Also, we choose the order of our AR prediction to be m+ k = 10 in all settings.\nSetting 1. We started with a simple sanity check using Gaussian noise. We generated a stationary ARMA process using the coefficient vectors \u03b1 = [0.6,\u22120.5, 0.4,\u22120.4, 0.3] and \u03b2 = [0.3,\u22120.2], when the noise terms are uncorrelated and normally distributed as N (0, 0.32). Note that since predicting the noise is impossible, a perfect predictor will suffer an average error rate of at least the variance of the noise \u2014 0.09 in this setting. As can be seen in Figure 1(a) the ARMA-ONS algorithm outperforms the other online algorithms due to its lower regret in this setting of exp-concave loss functions, and quickly approaches the performance of the perfect predictor.\nSetting 2. We generated the non-stationary ARMA process using the coefficient vectors \u03b2 = [0.32,\u22120.2] and\n\u03b1(t) = [\u22120.4,\u22120.5, 0.4, 0.4, 0.1] \u2217 ( t\n104\n) + [0.6,\u22120.4, 0.4,\u22120.5, 0.4] \u2217 ( 1\u2212 t 104 ) ,\ni.e., the coefficient vectors change slowly in time. The noise terms are uncorrelated and distributed uniformly on [\u22120.5, 0.5] (denoted as Uni[\u22120.5, 0.5]). In this setting, a perfect predictor will suffer average error rate of at least 0.0833, due to the variance of the noise. The motivation behind this setting is to demonstrate the effectiveness of the online algorithms in the non-stationary case, in which the coefficients change in time. This is especially important when dealing with real data time series, since the stationarity assumption is rather strict. In Figure 1(b) we can see the clear advantage of our online algorithms. Here again, ARMA-ONS is superior to the other algorithms, despite it being less adaptive \u2014 as the theoretical bounds predict; see [HS09] for discussion of adaptivity of OGD vs. ONS.\nSetting 3. Here we consider the non-stationary ARMA process that is generated using two different sets of coefficient vectors. The first set is \u03b1 = [0.6,\u22120.5, 0.4,\u22120.4, 0.3] and \u03b2 = [0.3,\u22120.2], and it is used for\n3Yule-Walker estimation method is offline. We use it as an online prediction method by a simple adaptation \u2014 we let it predict the signal at time t with the knowledge of the signal at times 1, . . . , t\u2212 1.\ngenerating the signal at the first half of the iterations. The second set is \u03b1 = [\u22120.4,\u22120.5, 0.4, 0.4, 0.1] and \u03b2 = [\u22120.3, 0.2], and it is used for generating the signal at the second half of the iterations. The noise terms are uncorrelated and distributed Uni[\u22120.5, 0.5]. In Figure 1(c) we demonstrate the effectiveness of online algorithms in a scenario when the coefficients abruptly change. Here again, a perfect predictor will suffer average error rate of at least 0.0833, due to the variance of the noise.\nSetting 4. Consider an ARMA process that is generated using the coefficient vectors \u03b1 = [0.11,\u22120.5] and \u03b2 = [0.41,\u22120.39,\u22120.685, 0.1]. Each noise term is distributed normally, with expectation that is the value of the previous noise term, and variance 0.32. I.e., the noise terms are positively correlated. In Figure 1(d)\none can clearly see the robustness of online algorithms to correlated noise. Note that despite the correlativity introduced in this setting, ARMA-ONS achieves an average error rate that converges approximately to the variance of the noise \u2014 0.09."}, {"heading": "5.2 Experiments with real data", "text": "In this section we provide some preliminary results on real data time series, and show that for such data as well, our online learning approach is reasonably effective compared to existing approaches. For robustness, we consider time series from different fields.\nThe first time series is taken from the field of weather research. Each data point in this time series is the monthly average temperature of the sea surface, measured at a specific point. The data is taken from the Global Climate Observing System (GCOS) website. Since we are dealing with a weather related time series, and considering the monthly average temperature, it is rather reasonable that the time series follows a certain pattern. As can be seen in Figure 2(a), this pattern can be well learned using the ARMA model by all four algorithms. However, the results clearly indicate the superiority of online algorithms.\nThe second time series is taken from the field of finance. Each data point in this time series is the daily return of the S&P 500 index. The data is taken from Yahoo! Finance. The results in Figure 2(b) indicate that the ARMA model is probably not a good model for predicting the returns of the S&P 500 index. A possible reason is that the ARMA model is not rich enough, i.e., knowing the history of returns is not sufficient for satisfying a good prediction. The fact that offline familiar methods also fail here, strengthens this claim. See Section 6 for further discussion about fitting a time series model for financial data."}, {"heading": "6 Conclusion and discussion", "text": "In this paper we developed a new approach for time series analysis \u2014 an online learning approach. Our main result in this paper is that one can predict time series as well as the best ARMA model, regardless of the loss function considered, under weak assumptions on the noise terms \u2014 zero mean distribution. This result is strengthened in light of the fact that the noise terms in the underlying model are unknown to us at any stage. We overcome this difficulty by using improper learning techniques. Additionally, we present an analytical extension of our approach to adversarially generated noise terms. The main powerful properties of the online approach, as pointed out in our work, are generality, simplicity and efficiency, in comparison to existing methods.\nThere are three issues that remain for further research. First, in our analysis we assume that \u2211q i=1 |\u03b2i| < 1 \u2212 \u03b5 for some \u03b5 > 0, which seems to limit the freedom of the \u03b2 coefficients. This assumption appears sometimes in the literature (e.g. in GARCH models) and is a sufficient condition for the MA component to be causally invertible, yet not necessary. In our case, we believe that this assumption follows from our proof techniques and the results would still hold for any \u03b2 coefficients. Second, in Section 4 we present results in which the total loss suffered by our algorithms is compared to the expected loss suffered by ARMA prediction with the coefficient vectors that have generated the signal. Whereas competing against the best ARMA prediction under adversarial noise is impossible because of identifiability issues, it would be interesting to study intermediate setups such as correlated or adversarial noise to some extent. Third, the ARMA model is not compatible for any time series, as can be seen in Section 5.2, when a finance related time series is considered. However, [Eng82] showed that some finance related time series can be well predicted using the ARCH model and its expansions. Therefore, it would be interesting to generalize our work to other time series models, such as ARCH and ARIMA."}], "references": [{"title": "Time Series Analysis: Forecasting and Control", "author": ["G. Box", "G. Jenkins", "G. Reinsel"], "venue": "PrenticeHall, 3 edition,", "citeRegEx": "Box et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Box et al\\.", "year": 1994}, {"title": "Prediction, learning, and games", "author": ["N. Cesa-Bianchi", "G. Lugosi"], "venue": null, "citeRegEx": "Cesa.Bianchi and Lugosi.,? \\Q2006\\E", "shortCiteRegEx": "Cesa.Bianchi and Lugosi.", "year": 2006}, {"title": "El-Shaarawi. ARMA models with double-exponentially distributed noise", "author": ["A.H.E. Damsleth"], "venue": "Journal of the Royal Statistical Society. Series B,", "citeRegEx": "Damsleth,? \\Q1989\\E", "shortCiteRegEx": "Damsleth", "year": 1989}, {"title": "Performance analysis of estimation algorithms of nonstationary ARMA processes", "author": ["F. Ding", "Y. Shi", "T. Chen"], "venue": "IEEE Transactions on Signal Processing,", "citeRegEx": "Ding et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Ding et al\\.", "year": 2006}, {"title": "Autoregressive conditional heteroscedasticity with estimates of the variance of united kingdom", "author": ["R.F. Engle"], "venue": "inflation. Econometrica,", "citeRegEx": "Engle.,? \\Q1982\\E", "shortCiteRegEx": "Engle.", "year": 1982}, {"title": "Logarithmic regret algorithms for online convex optimization", "author": ["E. Hazan", "A. Agarwal", "S. Kale"], "venue": "Machine Learning,", "citeRegEx": "Hazan et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Hazan et al\\.", "year": 2007}, {"title": "Time Series Analysis", "author": ["J. Hamilton"], "venue": null, "citeRegEx": "Hamilton.,? \\Q1994\\E", "shortCiteRegEx": "Hamilton.", "year": 1994}, {"title": "Efficient learning algorithms for changing environments", "author": ["E. Hazan", "C. Seshadhri"], "venue": "In ICML, page", "citeRegEx": "Hazan and Seshadhri.,? \\Q2009\\E", "shortCiteRegEx": "Hazan and Seshadhri.", "year": 2009}, {"title": "Time Series Analysis and Its Applications", "author": ["R. Shumway", "D. Stoffer"], "venue": null, "citeRegEx": "Shumway and Stoffer.,? \\Q2005\\E", "shortCiteRegEx": "Shumway and Stoffer.", "year": 2005}, {"title": "Jackknifing multiple-window spectra", "author": ["D. Thomson"], "venue": "In ICASSP,", "citeRegEx": "Thomson.,? \\Q1994\\E", "shortCiteRegEx": "Thomson.", "year": 1994}, {"title": "Time series models in non-normal situations: Symmetric innovations", "author": ["M. Tiku", "W.K. Wong", "D. Vaughan", "G. Bian"], "venue": "Journal of Time Series Analysis,", "citeRegEx": "Tiku et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Tiku et al\\.", "year": 2000}, {"title": "Online convex programming and generalized infinitesimal gradient ascent", "author": ["M. Zinkevich"], "venue": "In ICML,", "citeRegEx": "Zinkevich.,? \\Q2003\\E", "shortCiteRegEx": "Zinkevich.", "year": 2003}], "referenceMentions": [], "year": 2013, "abstractText": "In this paper we address the problem of predicting a time series using the ARMA (autoregressive moving average) model, under minimal assumptions on the noise terms. Using regret minimization techniques, we develop effective online learning algorithms for the prediction problem, without assuming that the noise terms are Gaussian, identically distributed or even independent. Furthermore, we show that our algorithm\u2019s performances asymptotically approaches the performance of the best ARMA model in hindsight.", "creator": "LaTeX with hyperref package"}}}