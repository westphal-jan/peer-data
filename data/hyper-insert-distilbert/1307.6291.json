{"id": "1307.6291", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Jul-2013", "title": "A novel approach of solving the CNF-SAT problem", "abstract": "in this paper, twice we discussed cnf - computational sat problem ( np - complete problem ) and knowledge analysis two better solutions for that one can simultaneously solve within the problem, only the pl - resolution algorithm and the alternative walksat algorithm. indeed pl - resolution alignment is a sound and almost complete algorithm that can be again used to determine satisfiability and unsatisfiability with certainty. walksat cache can determine satisfiability if it only finds on a binary model, correctly but unfortunately it definitely cannot guarantee to again find neither a model even there originally exists one. however, walksat storage is much much faster than prior pl - resolution, which makes walksat memory more practical ; specifically and we can have time analysis guarantee the best performance between these two sequential algorithms, and because the performance stability of walksat is acceptable if the complexity problem alone is conducted not repeatedly so less hard.", "histories": [["v1", "Wed, 24 Jul 2013 03:48:49 GMT  (163kb)", "http://arxiv.org/abs/1307.6291v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.LO", "authors": ["xili wang"], "accepted": false, "id": "1307.6291"}, "pdf": {"name": "1307.6291.pdf", "metadata": {"source": "CRF", "title": "A novel approach of solving the CNF-SAT problem", "authors": [], "emails": [], "sections": [{"heading": null, "text": "algorithm that can be used to determine satisfiability and unsatisfiability with certainty. WalkSAT can determine satisfiability if it finds a model, but it cannot guarantee to find a model even there exists one. However, WalkSAT is much faster than PL-Resolution, which makes WalkSAT more practical; and we have analysis the performance between these two algorithms, and the performance of WalkSAT is acceptable if the problem is not so hard.\nKeywords \u2013CNF-SAT problem; WalkSAT algorithm; PL-Resolution"}, {"heading": "1. Introduction", "text": "The CNF Satisfiability Problem (CNF-SAT) is a version of the Satisfiability (SAT) Problem, where the Boolean formula is represented in the Conjunctive Normal Form (CNF)."}, {"heading": "1.1 Boolean Satisfiability", "text": "Boolean Satisfiability (SAT), in the Computer\nScience area, is a problem of determining whether there exists a Boolean value assignment, which satisfies the given formula. In other words, given a Boolean expression written using only AND (\u2227), OR (\u2228), NOT (\u00ac), variables, and parentheses, is there some assignment of TRUE and FALSE values to the variables that make the entire expression evaluate to TRUE. On the other hand, the formula is unsatisfiable if no such assignment exists, which indicate that the entire expression is evaluated to FALSE for all possible variables assignments. For example, the Boolean expression A \u2227 B, setting the both variables A and B to be TRUE to make the whole sentence TRUE, i.e., the expression A \u2227 B is satisfiable. However, there exists unsatisfiable expression, such as A \u2227 \u00acA, no matter variable A is TRUE or FALSE, the expression A \u2227 \u00acA is always FALSE. The SAT problem can be applied in many fields of Computer Science and Engineering, including underlying model for a significant and increasing number of applications in Electronics Design Automation (EDA). Furthermore, a large number of problems that occur in knowledge base, learning, planning and other areas of areas of artificial intelligence (AI) are essentially the problems of SAT."}, {"heading": "1.2 Conjunctive Normal Form:", "text": "Conjunctive Normal Form (CNF) is a formula, which is conjunction of clauses, where clause is a disjunction of literals; any formula satisfies the above conditions, we say the formula is in CNF; and it is a useful representation of Boolean expression, and\nuseful in automated theorem proving. For instance, the formula A \u2227 (B \u2228 C) is in CNF. Furthermore, every propositional formula can be converted into an equivalent formula that is in CNF by using rules of logical equivalences. In addition, there are other forms such as Disjunctive Normal Form (DNF) and Horn Form. However, we will mainly focus on CNF here."}, {"heading": "2. CNF-SAT Problem", "text": ""}, {"heading": "2.1 Practical problem:", "text": "The CNF-SAT problem can be applied to solve\nmany practical problems in the real world. Consider a real life problem, suppose you have a wedding to plan, and want to arrange the wedding seating for a certain number of guests in a hall. The hall has a certain number tables for seating. Some pairs of guests are couples or close Friends, and want to sit together at the same table. Some other pairs of guests are Enemies, and must be separated into different tables. The rest pairs are Indifferent with each other, and do not mind sitting together or not. However, each pair of guests can only have one relationship, Friends, Enemies or Indifferent. Then the problem is to find a seating arrangement that satisfies all the constraints."}, {"heading": "2.2 Convert to CNF-SAT problem", "text": "This problem can be translated into symbolic logic,\nwhere each variable is TRUE or FALSE. Consider the example, we can first construct constraint a sentence which maybe close to our language and then convert to CNF. Then we can get the following constraint:\n(a) Each guest i should be seated at least one table. (b) Each guest i should be seated at most one table. (c) Any two guests i and j who are Friends should be\nseated at the same table.\n(d) Any two guests i and j who are Enemies should\nbe seated at different tables.\nThen we convert the above sentences into the\nformula in CNF. Suppose there are M guests in total, and there are N tables in the hall. The number of pairs of Friends is F, and the number of pairs of Enemies is E; Let X(i,n) denotes that guest i sit at table n, and we can get the corresponding formulas, and guest i and f are friends, i and e are enemies:\n(a) X(i, 1) \u2228 X(i, 2) \u2228 \u2026 X(i, n) \u2228 \u2026 X(i, N)\n(1 \u2264 i \u2264 M, 1 \u2264 n \u2264 N)\n(b) \u00acX(i, k) \u2228 \u00acX(i, n)\n(1 \u2264 i \u2264 M, 1 \u2264 k \u2260 n \u2264 N)\n(c) {\u00acX(i, n) \u2228 X(f, n)} \u2227 {\u00acX(f, n) \u2228 X(i, n)}\n(1 \u2264 i, f \u2264 M, 1 \u2264 n \u2264 N)\n(d) \u00acX(i, n) \u2228 \u00acX(j, n)\n(1 \u2264 i, j \u2264 M, 1 \u2264 n \u2264 N)\nThen the whole sentence which contain all the\nconstraint should be the conjunction of all the above clauses:\n{X(i, 1) \u2228 X(i, 2) \u2228 \u2026 X(i, n) \u2228 \u2026 X(i, N)} \u2227\n{\u00acX(i, k) \u2228 \u00acX(i, n)} \u2227 {\u00acX(i, n) \u2228 X(f, n)} \u2227\n{\u00acX(f, n) \u2228 X(i, n)} \u2227 {\u00acX(i, n) \u2228 \u00acX(j, n)}\n(1 \u2264 i \u2264 M, 1 \u2264 k \u2260 n \u2264 N)\nIf we can find a Boolean value assignment for each term X(i, n) in the above sentence and make the sentence evaluate TRUE, then we solve our wedding seating arrangement problem."}, {"heading": "2.3 NP-Complete problem:", "text": "CNF-SAT is a kind of NP-Complete (NPC)\nproblem, which means we cannot find optimal solutions in polynomial time. NPC is a class of decision problem, i.e., if we already have a solution on hand, then we can check whether the solution is correct in polynomial time, just by substituting all the variables with the Boolean assignment and check whether the sentence is TRUE; however, finding such a Boolean assignment is in exponential time. Consider just using brute force to solve the above wedding seating arrangement problem, we try assigning all the possible values for the sentence, then the space would be O(2 MN ), which grows exponentially with the increase of M and N. However, if we are using AI technology to find the solution more intelligently, we can find the solution more quickly but the solution is suboptimal, which we will discuss in detail later.\n3. Solutions and Analysis\nThere already exists many SAT solvers such as Chaff, HyperSAT, Spear, The MiniSAT Solver, etc. We will discuss two solutions for CNF-SAT problem, PLResolution Algorithm and WalkSAT Algorithm."}, {"heading": "3.1 PL-Resolution Algorithm:", "text": "The PL-Resolution Algorithm is a sound and\ncomplete solution that guarantees to determine whether there exists a solution or not. The main idea of this algorithm is achieve new clauses by resolving each pair of clauses in the Knowledge Base (KB), For example, clause A \u2228 B and clause \u00acA \u2228 C can be resolved to a new clause B \u2228 C. Then, add the new clauses into KB. Only two results would occur in the end: (1) the resolve step gives us an empty clause, indicating there is a contradiction in KB, which means KB is unsatisfiable. For instance, clause A and \u00acA would be resolved to empty clause, besides, we know A \u2227 \u00acA is always FALSE intuitively; (2) otherwise the new clauses we gain are already in the KB, which mean there is no contradiction, and KB is satisfiable. The pseudo code of this algorithm [1] can be written as follow:\nfunction PLRESOLUTION(KB) returns true or false\ninputs: KB, the knowledge base, a sentence in\npropositional logic\nclauses <\u2013 the set of clauses in the CNF\nrepresentation of KB\nnew <\u2013 {} loop do\nfor each pair of clauses Ci, Cj in clauses do\nresolvents <\u2013 PL-RESOLVE(Ci, Cj) if resolvents contains the empty\nclause then return false\nnew <\u2013 new \u222a resolvents if new \u2208 clauses then return true clauses <\u2013 clauses \u222a new"}, {"heading": "3.2 WalkSAT Algorithm:", "text": "Unlike PL-Resolution, the WalkSAT Algorithm can\ndetermine satisfiability (if it finds a model), but it cannot absolutely determine unsatisfiability. WalkSAT is one of the simplest and most effective algorithms. At first, WalkSAT randomly generate a model and assign all the variables with that model. If the sentence is unsatisfiable under this model, it will modify the model. It chooses a unsatisfied clause randomly and selects a variable in taht clause to flip in every iteration. There are two way of deciding which variable should be flipped: (1) \u201cminconflicts\u201d step, which minimize the number of unsatisfied clauses in the new state; (2) \u201crandom walk\u201d step, which just picks the variable randomly. The pseudo code of this algorithm[1] can be written as follow:\nfunction WALKSAT(clauses, p, max_flips) return\na satisfying model or failure\ninputs: clauses, a set of clauses in propositional\nlogic\np, the probability of choosing to do a\n\"random walk\" move, typically around 0.5\nmax_flips, number of flips allowed before\ngiving up\nmodel <\u2013 a random assignment of true/false to\nthe symbols in clauses\nfor i = 1 to max_flips do\nif model satisfies clauses then return model clause <\u2013 a randomly selected clause from\nclauses that is false in model\nwith probability p flip the value in model\nof a randomly selected symbol from clause\nelse flip whichever symbol in clause\nmaximizes the number of satisfied clauses return failure\nWhen WalkSAT returns a model, the input sentence\nis indeed satisfiable, and we also find the solution which is its return model, but when it returns failure, there are two possible causes: either the sentence is unsatisfiable or the number of iteration reaches the max_flips. The mechanism of this algorithm cannot guarantee to decide whether the input sentence is satisfiable or not. However, this algorithm is much faster compared to PL-Resolution and can gain good performance if we set p and max_flips properly."}, {"heading": "4. Experiment", "text": "We will compare these two algorithms in terms of\nperformance and use the example of seating arrangement problem that we mentioned before. In order to simulate this problem, we first generate randomly relationship for each pairs of guests, setting any two guests are Friends with probability f, or are Enemies with probability e. And any two guests are Indifferent to each other with probability 1-f-e. Besides, we also set the number of guests to be M and the number of tables to be N. Then we convert our generated instance of wedding seating arrangement into a CNF sentence.\nThe difficulty of wedding seat arrangement problem mostly results from dealing with the pairs of Enemies among guests. We use both algorithms to produce a plot of P, which is the possibility of the instance is satisfiability, as a function of the probability e with which any two guests are Enemies. Suppose we have a small wedding to plan, and set M=16 and N=2. In order to eliminate the influence of Friends relationship, we set f=0. Generate a set of 100 random sentences for each setting of e, which increases from 2% to 20% at an interval of 2%, and use both algorithms to determine whether they are satisfiable. For WalkSAT, we set p=50% and max_flips=100. We plot the results of P versus e for both algorithms on the same graph as follow:\nAccording to Figure, we can see that the P of PLResolution is always higher than or equal to that of WalkSAT, which support the different ideal of PLResolution and WalkSAT. Though the performance of PL-Resolution is always better than WalkSAT, the runtime of PL-Resolution is growing exponentially. At the beginning, the WalkSAT performance as well as PLResolution did as we expected, because the problem is easy at first. As the e increasing, the problem become much more hard because the condition is more restrict. When e reach 20%, both algorithm can hardly find solution."}, {"heading": "5. Conclusions", "text": "In this paper, we have discussed the CNF-SAT\nproblem, which is a NP-Complete problem and analysis two solutions that can solve the problem, the PL-Resolution algorithm and the WalkSAT algorithm. PL-Resolution is a sound and complete algorithm that can be used to determine satisfiability and unsatisfiability with certainty. WalkSAT can determine satisfiability if it find a model, but it cannot guarantee to find a model even there exists one. However, WalkSAT is much faster than PLResolution, which makes WalkSAT more practical; and we have analysis the performance between these two algorithms, and the performance of WalkSAT is acceptable if the problem is not so hard. In conclusion, if we just want to solve the problem and need it be done very quickly, WalkSAT is the best choice; we also can adjust the argument max_flips to high to get more chance of finding the solution. On the other hand, if you have plenty of time, you can chose PL-Resolution which will guarantee give you the answer of whether the sentence is satisfy."}], "references": [{"title": "Upper Saddle River, New Jersey 07458", "author": ["Stuart J. Russell", "Peter Norvig"], "venue": "prentice hall,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2010}, {"title": "CNF-satisfiability test by counting and polynomial average time", "author": ["Iwama"], "venue": "SIAM Journal on Computing,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1989}, {"title": "Increasing the effectiveness of deduction in propositional SAT solvers. University of Colorado at Boulder)", "author": ["H. Han"], "venue": "ProQuest Dissertations and Theses,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "A hopeful CNF-SAT algorithm-- its high efficiency, industrial application and limitation", "author": ["W. Huang", "Li"], "venue": "Journal of Computer Science and Technology,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1998}, {"title": "The implementation of a DNA computer to solve n-variable 3 CNF SAT problems. University of Southern California)", "author": ["Johnson", "C. R"], "venue": "ProQuest Dissertations and Theses,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2004}, {"title": "Genetic Analysis of Differentiation of T-helper lymphocytes", "author": ["Qixin Wang", "Menghui Li", "Li Charlie Xia", "Ge Wen", "Hualong Zu", "Mingyi Gao"], "venue": "Genetics and Molecular Research,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "A Quantitative Evaluation of Health Care System in US, China, and Sweden, HealthMED", "author": ["Qixin Wang", "Menghui Li", "Hualong Zu", "Mingyi Gao", "Chenghua Cao", "Li Charlie"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2013}, {"title": "Atmosphere pollutants and mortality rate of respiratory diseases in Beijing", "author": ["Qixin Wang", "Yang Liu", "Xiaochuan Pan"], "venue": "Science of the Total Environment,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2008}, {"title": "A New Model Based on Grey Theory and Neural Network Algorithm for Evaluation of AIDS Clinical Trial", "author": ["Qixin Wang", "Chenghua Cao", "Menghui Li", "Hualong Zu"], "venue": "Advances in Computational Mathematics and its Applications,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2013}, {"title": "Compressed Sensing Based Fixed-Point DCT Image Encoding", "author": ["Hualong Zu", "Qixin Wang", "Mingzhi Dong", "Liwei Ma", "Liang Yin", "Yanhui"], "venue": "Advances in Computational Mathematics and its Applications,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}, {"title": "Exploring the Network Scale-out in virtualized Servers", "author": ["Hangwei Qian", "Chenghua Cao", "Li Liu", "Hualong Zu", "Qixin Wang", "Menghui Li", "Tao Lin"], "venue": "Proceeding of International Conference on Soft Computing and Software Engineering (SCSE", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "etc., A Fanotype Interference Enhancd Quantum Dot Infrared Photodetector, Vasinajindakaw, Puminun.", "author": ["Yunfeng Ling"], "venue": "Applied Physics Letters,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2011}, {"title": "Thin Film Thickness Variation Measurement Using Dual LEDs and  Reflectometric Interference Spectroscopy Model in Biosensor", "author": ["Yunfeng Ling", "Nan Wu"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2010}, {"title": "etc.,Design of Omnidirectional Vision Reflector based on VC and Matlab", "author": ["Yunfeng Ling"], "venue": "Computer Applications and Software,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2008}, {"title": "CSS: Facilitate the Cloud Service Selection in IaaS Platforms", "author": ["Hangwei Qian", "Hualong Zu", "Chenghua Cao", "Qixin Wang"], "venue": "Proceeding of IEEE International Conference on Collaboration Technologies and Systems", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "Distributed Loop Scheduling Schemes for Cloud Systems", "author": ["Y. Han", "A.T. Chronopoulos"], "venue": "IEEE 27th International Parallel and Distributed Processing Symposium Workshops & PhD Forum (IPDPSW),", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2013}, {"title": "Scalable Loop Self- Scheduling Schemes Implemented on Large-Scale Clusters, 2013", "author": ["Y. Han", "A.T. Chronopoulos"], "venue": "IEEE 27th International Parallel and Distributed Processing Symposium Workshops & PhD Forum (IPDPSW),", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2013}, {"title": "A Hierarchical Distributed Loop Self-Scheduling Scheme for Cloud Systems, The 12th", "author": ["Y. Han", "A.T. Chronopoulos"], "venue": "IEEE International Symposium on Network Computing and Applications,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "Towards Proximity-aware Application Deployment in Geodistributed Clouds", "author": ["Hangwei Qian", "Qixin Wang"], "venue": "Advances in Computer Science and its Applications,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2013}, {"title": "Concurrent Control Chart Patterns Recognition with Singular Spectrum Analysis and Support Vector Machine", "author": ["Liangjun Xie", "Nong Gu", "Dalong Li", "Zhiqiang Cao", "Min Tan", "Saeid Nahavandi"], "venue": "Computers & Industry Engineering,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2013}, {"title": "A Hybrid Approach for Multiple Particle Tracking Microrhelogy", "author": ["Liangjun Xie", "Nong Gu", "Ziqiang Cao", "Dalong Li"], "venue": "International Journal of Advanced Robotic Systems,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2013}, {"title": "Feature dimensionality reduction for example-based image superresolution", "author": ["Liangjun Xie", "Dalong. Li", "Steven J. Simske"], "venue": "Journal of Pattern Recognition Research,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2011}, {"title": "Agility in virtualized utility computing", "author": ["Hangwei Qian", "Elliot Miller", "Wei Zhang", "Michael Rabinovich", "Craig E Wills"], "venue": "Proceeding Workshop on Virtualization Technologies in Distributed Computing,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2007}, {"title": "Agile resource management in a virtualized data center", "author": ["WeiZhang", "Hangwei Qian", "Craig E Wills", "Michael Rabinovich"], "venue": "Proceeding of the First Joint WOSP/SIPEW International Conference on Performance Engineering,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2010}, {"title": "Application Placement and Demand Distribution in a Global Elastic Cloud: A Unified Approach", "author": ["Hangwei Qian", "Michael Rabinovich"], "venue": "Proceeding of the 10th USENIX International Conference on Autonomic Computing (ICAC),", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2013}, {"title": "Proximity-aware Cloud Selection and Virtual Machine Allocation in IaaS Cloud Platforms", "author": ["Hangwei Qian", "Qian Lv"], "venue": "Proceedings of t he IEEE International Workshop on Internet-based Virtual Computing Environment", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "The pseudo code of this algorithm [1] can be written as follow:", "startOffset": 34, "endOffset": 37}, {"referenceID": 0, "context": "The pseudo code of this algorithm[1] can be written as follow:", "startOffset": 33, "endOffset": 36}], "year": 2013, "abstractText": "In this paper, we discussed CNF-SAT problem (NP-Complete problem) and analysis two solutions that can solve the problem, the PL-Resolution algorithm and the WalkSAT algorithm. PL-Resolution is a sound and complete algorithm that can be used to determine satisfiability and unsatisfiability with certainty. WalkSAT can determine satisfiability if it finds a model, but it cannot guarantee to find a model even there exists one. However, WalkSAT is much faster than PL-Resolution, which makes WalkSAT more practical; and we have analysis the performance between these two algorithms, and the performance of WalkSAT is acceptable if the problem is not so hard.", "creator": "Microsoft\u00ae Word 2010"}}}