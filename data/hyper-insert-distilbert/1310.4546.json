{"id": "1310.4546", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Oct-2013", "title": "Distributed Representations of Words and Phrases and their Compositionality", "abstract": "the first recently introduced continuous skip - substitution gram lambda model is an object efficient method for learning high - aspect quality efficient distributed vector field representations algorithms that capture a large number of precise syntactic artifacts and semantic word relationships. in this pioneering paper however we present several extensions available that improve overall both the quality abilities of sequencing the vectors and the training retention speed. by avoiding subsampling of out the frequent words phrases we obtain significant textual speedup operations and also learn more regular word substitution representations. we also describe a simple language alternative to the hierarchical softmax called negative sampling. \u2026 an otherwise inherent primary limitation of word selection representations currently is their indifference to word order rules and their sharp inability to distinctly represent idiomatic phrases. for easy example, the binary meanings of \" arctic canada \" and \" morning air \" can cannot nonetheless be individually easily interpreted combined to explicitly obtain \" air canada \". starting motivated briefly by such this example, we present a large simple method optimization for simultaneously finding phrases in text, and show that therefore learning good sorted vector representations for selecting millions of phrases is truly possible.", "histories": [["v1", "Wed, 16 Oct 2013 23:28:53 GMT  (36kb)", "http://arxiv.org/abs/1310.4546v1", null]], "reviews": [], "SUBJECTS": "cs.CL cs.LG stat.ML", "authors": ["tomas mikolov", "ilya sutskever", "kai chen 0010", "gregory s corrado", "jeffrey dean"], "accepted": true, "id": "1310.4546"}, "pdf": {"name": "1310.4546.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["mikolov@google.com", "ilyasu@google.com", "kai@google.com", "gcorrado@google.com", "jeff@google.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n31 0.\n45 46\nv1 [\ncs .C\nL ]"}, {"heading": "1 Introduction", "text": "Distributed representations of words in a vector space help learning algorithms to achieve better performance in natural language processing tasks by grouping similar words. One of the earliest use of word representations dates back to 1986 due to Rumelhart, Hinton, and Williams [13]. This idea has since been applied to statistical language modeling with considerable success [1]. The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].\nRecently, Mikolov et al. [8] introduced the Skip-gram model, an efficient method for learning highquality vector representations of words from large amounts of unstructured text data. Unlike most of the previously used neural network architectures for learning word vectors, training of the Skipgram model (see Figure 1) does not involve dense matrix multiplications. This makes the training extremely efficient: an optimized single-machine implementation can train on more than 100 billion words in one day.\nThe word representations computed using neural networks are very interesting because the learned vectors explicitly encode many linguistic regularities and patterns. Somewhat surprisingly, many of these patterns can be represented as linear translations. For example, the result of a vector calculation vec(\u201cMadrid\u201d) - vec(\u201cSpain\u201d) + vec(\u201cFrance\u201d) is closer to vec(\u201cParis\u201d) than to any other word vector [9, 8].\nIn this paper we present several extensions of the original Skip-gram model. We show that subsampling of frequent words during training results in a significant speedup (around 2x - 10x), and improves accuracy of the representations of less frequent words. In addition, we present a simplified variant of Noise Contrastive Estimation (NCE) [4] for training the Skip-gram model that results in faster training and better vector representations for frequent words, compared to more complex hierarchical softmax that was used in the prior work [8].\nWord representations are limited by their inability to represent idiomatic phrases that are not compositions of the individual words. For example, \u201cBoston Globe\u201d is a newspaper, and so it is not a natural combination of the meanings of \u201cBoston\u201d and \u201cGlobe\u201d. Therefore, using vectors to represent the whole phrases makes the Skip-gram model considerably more expressive. Other techniques that aim to represent meaning of sentences by composing the word vectors, such as the recursive autoencoders [15], would also benefit from using phrase vectors instead of the word vectors.\nThe extension from word based to phrase based models is relatively simple. First we identify a large number of phrases using a data-driven approach, and then we treat the phrases as individual tokens during the training. To evaluate the quality of the phrase vectors, we developed a test set of analogical reasoning tasks that contains both words and phrases. A typical analogy pair from our test set is \u201cMontreal\u201d:\u201cMontreal Canadiens\u201d::\u201cToronto\u201d:\u201cToronto Maple Leafs\u201d. It is considered to have been answered correctly if the nearest representation to vec(\u201cMontreal Canadiens\u201d) - vec(\u201cMontreal\u201d) + vec(\u201cToronto\u201d) is vec(\u201cToronto Maple Leafs\u201d).\nFinally, we describe another interesting property of the Skip-gram model. We found that simple vector addition can often produce meaningful results. For example, vec(\u201cRussia\u201d) + vec(\u201criver\u201d) is close to vec(\u201cVolga River\u201d), and vec(\u201cGermany\u201d) + vec(\u201ccapital\u201d) is close to vec(\u201cBerlin\u201d). This compositionality suggests that a non-obvious degree of language understanding can be obtained by using basic mathematical operations on the word vector representations."}, {"heading": "2 The Skip-gram Model", "text": "The training objective of the Skip-gram model is to find word representations that are useful for predicting the surrounding words in a sentence or a document. More formally, given a sequence of training words w1, w2, w3, . . . , wT , the objective of the Skip-gram model is to maximize the average log probability\n1\nT\nT \u2211\nt=1\n\u2211\n\u2212c\u2264j\u2264c,j 6=0\nlog p(wt+j |wt) (1)\nwhere c is the size of the training context (which can be a function of the center word wt). Larger c results in more training examples and thus can lead to a higher accuracy, at the expense of the\ntraining time. The basic Skip-gram formulation defines p(wt+j |wt) using the softmax function:\np(wO|wI) = exp\n(\nv\u2032wO \u22a4vwI\n)\n\u2211W w=1 exp\n(\nv\u2032w \u22a4vwI\n) (2)\nwhere vw and v\u2032w are the \u201cinput\u201d and \u201coutput\u201d vector representations of w, and W is the number of words in the vocabulary. This formulation is impractical because the cost of computing \u2207 log p(wO|wI) is proportional to W , which is often large (105\u2013107 terms)."}, {"heading": "2.1 Hierarchical Softmax", "text": "A computationally efficient approximation of the full softmax is the hierarchical softmax. In the context of neural network language models, it was first introduced by Morin and Bengio [12]. The main advantage is that instead of evaluating W output nodes in the neural network to obtain the probability distribution, it is needed to evaluate only about log2(W ) nodes.\nThe hierarchical softmax uses a binary tree representation of the output layer with the W words as its leaves and, for each node, explicitly represents the relative probabilities of its child nodes. These define a random walk that assigns probabilities to words.\nMore precisely, each word w can be reached by an appropriate path from the root of the tree. Let n(w, j) be the j-th node on the path from the root to w, and let L(w) be the length of this path, so n(w, 1) = root and n(w,L(w)) = w. In addition, for any inner node n, let ch(n) be an arbitrary fixed child of n and let [[x]] be 1 if x is true and -1 otherwise. Then the hierarchical softmax defines p(wO|wI) as follows:\np(w|wI ) =\nL(w)\u22121 \u220f\nj=1\n\u03c3 (\n[[n(w, j + 1) = ch(n(w, j))]] \u00b7 v\u2032n(w,j) \u22a4 vwI\n)\n(3)\nwhere \u03c3(x) = 1/(1 + exp(\u2212x)). It can be verified that \u2211W\nw=1 p(w|wI) = 1. This implies that the cost of computing log p(wO|wI) and \u2207 log p(wO|wI) is proportional to L(wO), which on average is no greater than logW . Also, unlike the standard softmax formulation of the Skip-gram which assigns two representations vw and v\u2032w to each word w, the hierarchical softmax formulation has one representation vw for each word w and one representation v\u2032n for every inner node n of the binary tree.\nThe structure of the tree used by the hierarchical softmax has a considerable effect on the performance. Mnih and Hinton explored a number of methods for constructing the tree structure and the effect on both the training time and the resulting model accuracy [10]. In our work we use a binary Huffman tree, as it assigns short codes to the frequent words which results in fast training. It has been observed before that grouping words together by their frequency works well as a very simple speedup technique for the neural network based language models [5, 8]."}, {"heading": "2.2 Negative Sampling", "text": "An alternative to the hierarchical softmax is Noise Contrastive Estimation (NCE), which was introduced by Gutmann and Hyvarinen [4] and applied to language modeling by Mnih and Teh [11]. NCE posits that a good model should be able to differentiate data from noise by means of logistic regression. This is similar to hinge loss used by Collobert and Weston [2] who trained the models by ranking the data above noise.\nWhile NCE can be shown to approximately maximize the log probability of the softmax, the Skipgram model is only concerned with learning high-quality vector representations, so we are free to simplify NCE as long as the vector representations retain their quality. We define Negative sampling (NEG) by the objective\nlog \u03c3(v\u2032wO \u22a4 vwI ) +\nk \u2211\ni=1\nEwi\u223cPn(w)\n[\nlog \u03c3(\u2212v\u2032wi \u22a4 vwI )\n]\n(4)\nwhich is used to replace every logP (wO|wI) term in the Skip-gram objective. Thus the task is to distinguish the target word wO from draws from the noise distribution Pn(w) using logistic regression, where there are k negative samples for each data sample. Our experiments indicate that values of k in the range 5\u201320 are useful for small training datasets, while for large datasets the k can be as small as 2\u20135. The main difference between the Negative sampling and NCE is that NCE needs both samples and the numerical probabilities of the noise distribution, while Negative sampling uses only samples. And while NCE approximately maximizes the log probability of the softmax, this property is not important for our application.\nBoth NCE and NEG have the noise distributionPn(w) as a free parameter. We investigated a number of choices for Pn(w) and found that the unigram distribution U(w) raised to the 3/4rd power (i.e., U(w)3/4/Z) outperformed significantly the unigram and the uniform distributions, for both NCE and NEG on every task we tried including language modeling (not reported here)."}, {"heading": "2.3 Subsampling of Frequent Words", "text": "In very large corpora, the most frequent words can easily occur hundreds of millions of times (e.g., \u201cin\u201d, \u201cthe\u201d, and \u201ca\u201d). Such words usually provide less information value than the rare words. For example, while the Skip-gram model benefits from observing the co-occurrences of \u201cFrance\u201d and \u201cParis\u201d, it benefits much less from observing the frequent co-occurrences of \u201cFrance\u201d and \u201cthe\u201d, as nearly every word co-occurs frequently within a sentence with \u201cthe\u201d. This idea can also be applied in the opposite direction; the vector representations of frequent words do not change significantly after training on several million examples.\nTo counter the imbalance between the rare and frequent words, we used a simple subsampling approach: each word wi in the training set is discarded with probability computed by the formula\nP (wi) = 1\u2212\n\u221a\nt\nf(wi) (5)\nwhere f(wi) is the frequency of word wi and t is a chosen threshold, typically around 10\u22125. We chose this subsampling formula because it aggressively subsamples words whose frequency is greater than t while preserving the ranking of the frequencies. Although this subsampling formula was chosen heuristically, we found it to work well in practice. It accelerates learning and even significantly improves the accuracy of the learned vectors of the rare words, as will be shown in the following sections."}, {"heading": "3 Empirical Results", "text": "In this section we evaluate the Hierarchical Softmax (HS), Noise Contrastive Estimation, Negative Sampling, and subsampling of the training words. We used the analogical reasoning task1 introduced by Mikolov et al. [8]. The task consists of analogies such as \u201cGermany\u201d : \u201cBerlin\u201d :: \u201cFrance\u201d : ?, which are solved by finding a vector x such that vec(x) is closest to vec(\u201cBerlin\u201d) - vec(\u201cGermany\u201d) + vec(\u201cFrance\u201d) according to the cosine distance (we discard the input words from the search). This specific example is considered to have been answered correctly if x is \u201cParis\u201d. The task has two broad categories: the syntactic analogies (such as \u201cquick\u201d : \u201cquickly\u201d :: \u201cslow\u201d : \u201cslowly\u201d) and the semantic analogies, such as the country to capital city relationship.\nFor training the Skip-gram models, we have used a large dataset consisting of various news articles (an internal Google dataset with one billion words). We discarded from the vocabulary all words that occurred less than 5 times in the training data, which resulted in a vocabulary of size 692K. The performance of various Skip-gram models on the word analogy test set is reported in Table 1. The table shows that Negative Sampling outperforms the Hierarchical Softmax on the analogical reasoning task, and has even slightly better performance than the Noise Contrastive Estimation. The subsampling of the frequent words improves the training speed several times and makes the word representations significantly more accurate.\nIt can be argued that the linearity of the skip-gram model makes its vectors more suitable for such linear analogical reasoning, but the results of Mikolov et al. [8] also show that the vectors learned by the standard sigmoidal recurrent neural networks (which are highly non-linear) improve on this task significantly as the amount of the training data increases, suggesting that non-linear models also have a preference for a linear structure of the word representations."}, {"heading": "4 Learning Phrases", "text": "As discussed earlier, many phrases have a meaning that is not a simple composition of the meanings of its individual words. To learn vector representation for phrases, we first find words that appear frequently together, and infrequently in other contexts. For example, \u201cNew York Times\u201d and \u201cToronto Maple Leafs\u201d are replaced by unique tokens in the training data, while a bigram \u201cthis is\u201d will remain unchanged.\n1code.google.com/p/word2vec/source/browse/trunk/questions-words.txt\nThis way, we can form many reasonable phrases without greatly increasing the size of the vocabulary; in theory, we can train the Skip-gram model using all n-grams, but that would be too memory intensive. Many techniques have been previously developed to identify phrases in the text; however, it is out of scope of our work to compare them. We decided to use a simple data-driven approach, where phrases are formed based on the unigram and bigram counts, using\nscore(wi, wj) = count(wiwj)\u2212 \u03b4\ncount(wi)\u00d7 count(wj) . (6)\nThe \u03b4 is used as a discounting coefficient and prevents too many phrases consisting of very infrequent words to be formed. The bigrams with score above the chosen threshold are then used as phrases. Typically, we run 2-4 passes over the training data with decreasing threshold value, allowing longer phrases that consists of several words to be formed. We evaluate the quality of the phrase representations using a new analogical reasoning task that involves phrases. Table 2 shows examples of the five categories of analogies used in this task. This dataset is publicly available on the web2."}, {"heading": "4.1 Phrase Skip-Gram Results", "text": "Starting with the same news data as in the previous experiments, we first constructed the phrase based training corpus and then we trained several Skip-gram models using different hyperparameters. As before, we used vector dimensionality 300 and context size 5. This setting already achieves good performance on the phrase dataset, and allowed us to quickly compare the Negative Sampling and the Hierarchical Softmax, both with and without subsampling of the frequent tokens. The results are summarized in Table 3.\nThe results show that while Negative Sampling achieves a respectable accuracy even with k = 5, using k = 15 achieves considerably better performance. Surprisingly, while we found the Hierarchical Softmax to achieve lower performance when trained without subsampling, it became the best performing method when we downsampled the frequent words. This shows that the subsampling can result in faster training and can also improve accuracy, at least in some cases.\n2code.google.com/p/word2vec/source/browse/trunk/questions-phrases.txt\nTo maximize the accuracy on the phrase analogy task, we increased the amount of the training data by using a dataset with about 33 billion words. We used the hierarchical softmax, dimensionality of 1000, and the entire sentence for the context. This resulted in a model that reached an accuracy of 72%. We achieved lower accuracy 66% when we reduced the size of the training dataset to 6B words, which suggests that the large amount of the training data is crucial.\nTo gain further insight into how different the representations learned by different models are, we did inspect manually the nearest neighbours of infrequent phrases using various models. In Table 4, we show a sample of such comparison. Consistently with the previous results, it seems that the best representations of phrases are learned by a model with the hierarchical softmax and subsampling."}, {"heading": "5 Additive Compositionality", "text": "We demonstrated that the word and phrase representations learned by the Skip-gram model exhibit a linear structure that makes it possible to perform precise analogical reasoning using simple vector arithmetics. Interestingly, we found that the Skip-gram representations exhibit another kind of linear structure that makes it possible to meaningfully combine words by an element-wise addition of their vector representations. This phenomenon is illustrated in Table 5.\nThe additive property of the vectors can be explained by inspecting the training objective. The word vectors are in a linear relationship with the inputs to the softmax nonlinearity. As the word vectors are trained to predict the surrounding words in the sentence, the vectors can be seen as representing the distribution of the context in which a word appears. These values are related logarithmically to the probabilities computed by the output layer, so the sum of two word vectors is related to the product of the two context distributions. The product works here as the AND function: words that are assigned high probabilities by both word vectors will have high probability, and the other words will have low probability. Thus, if \u201cVolga River\u201d appears frequently in the same sentence together with the words \u201cRussian\u201d and \u201criver\u201d, the sum of these two word vectors will result in such a feature vector that is close to the vector of \u201cVolga River\u201d."}, {"heading": "6 Comparison to Published Word Representations", "text": "Many authors who previously worked on the neural network based representations of words have published their resulting models for further use and comparison: amongst the most well known authors are Collobert and Weston [2], Turian et al. [17], and Mnih and Hinton [10]. We downloaded their word vectors from the web3. Mikolov et al. [8] have already evaluated these word representations on the word analogy task, where the Skip-gram models achieved the best performance with a huge margin.\n3http://metaoptimize.com/projects/wordreprs/\nTo give more insight into the difference of the quality of the learned vectors, we provide empirical comparison by showing the nearest neighbours of infrequent words in Table 6. These examples show that the big Skip-gram model trained on a large corpus visibly outperforms all the other models in the quality of the learned representations. This can be attributed in part to the fact that this model has been trained on about 30 billion words, which is about two to three orders of magnitude more data than the typical size used in the prior work. Interestingly, although the training set is much larger, the training time of the Skip-gram model is just a fraction of the time complexity required by the previous model architectures."}, {"heading": "7 Conclusion", "text": "This work has several key contributions. We show how to train distributed representations of words and phrases with the Skip-gram model and demonstrate that these representations exhibit linear structure that makes precise analogical reasoning possible. The techniques introduced in this paper can be used also for training the continuous bag-of-words model introduced in [8].\nWe successfully trained models on several orders of magnitude more data than the previously published models, thanks to the computationally efficient model architecture. This results in a great improvement in the quality of the learned word and phrase representations, especially for the rare entities. We also found that the subsampling of the frequent words results in both faster training and significantly better representations of uncommon words. Another contribution of our paper is the Negative sampling algorithm, which is an extremely simple training method that learns accurate representations especially for frequent words.\nThe choice of the training algorithm and the hyper-parameter selection is a task specific decision, as we found that different problems have different optimal hyperparameter configurations. In our experiments, the most crucial decisions that affect the performance are the choice of the model architecture, the size of the vectors, the subsampling rate, and the size of the training window.\nA very interesting result of this work is that the word vectors can be somewhat meaningfully combined using just simple vector addition. Another approach for learning representations of phrases presented in this paper is to simply represent the phrases with a single token. Combination of these two approaches gives a powerful yet simple way how to represent longer pieces of text, while having minimal computational complexity. Our work can thus be seen as complementary to the existing approach that attempts to represent phrases using recursive matrix-vector operations [16].\nWe made the code for training the word and phrase vectors based on the techniques described in this paper available as an open-source project4.\n4code.google.com/p/word2vec"}], "references": [{"title": "A neural probabilistic language model", "author": ["Yoshua Bengio", "R\u00e9jean Ducharme", "Pascal Vincent", "Christian Janvin"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "A unified architecture for natural language processing: deep neural networks with multitask learning", "author": ["Ronan Collobert", "Jason Weston"], "venue": "In Proceedings of the 25th international conference on Machine learning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "Domain adaptation for large-scale sentiment classification: A deep learning approach", "author": ["Xavier Glorot", "Antoine Bordes", "Yoshua Bengio"], "venue": "In ICML,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "Noise-contrastive estimation of unnormalized statistical models, with applications to natural image statistics", "author": ["Michael U Gutmann", "Aapo Hyv\u00e4rinen"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Extensions of recurrent neural network language model", "author": ["Tomas Mikolov", "Stefan Kombrink", "Lukas Burget", "Jan Cernocky", "Sanjeev Khudanpur"], "venue": "In Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Strategies for Training Large Scale Neural Network Language Models", "author": ["Tomas Mikolov", "Anoop Deoras", "Daniel Povey", "Lukas Burget", "Jan Cernocky"], "venue": "In Proc. Automatic Speech Recognition and Understanding,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "Statistical Language Models Based on Neural Networks", "author": ["Tomas Mikolov"], "venue": "PhD thesis, PhD Thesis, Brno University of Technology,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Efficient estimation of word representations in vector space", "author": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": "ICLR Workshop,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Linguistic Regularities in Continuous Space Word Representations", "author": ["Tomas Mikolov", "Wen-tau Yih", "Geoffrey Zweig"], "venue": "In Proceedings of NAACL HLT,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2013}, {"title": "A scalable hierarchical distributed language model", "author": ["Andriy Mnih", "Geoffrey E Hinton"], "venue": "Advances in neural information processing systems,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "A fast and simple algorithm for training neural probabilistic language models", "author": ["Andriy Mnih", "Yee Whye Teh"], "venue": "arXiv preprint arXiv:1206.6426,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2012}, {"title": "Hierarchical probabilistic neural network language model", "author": ["Frederic Morin", "Yoshua Bengio"], "venue": "In Proceedings of the international workshop on artificial intelligence and statistics,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2005}, {"title": "Learning representations by backpropagating", "author": ["David E Rumelhart", "Geoffrey E Hintont", "Ronald J Williams"], "venue": "errors. Nature,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1986}, {"title": "Continuous space language models", "author": ["Holger Schwenk"], "venue": "Computer Speech and Language,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2007}, {"title": "Parsing natural scenes and natural language with recursive neural networks", "author": ["Richard Socher", "Cliff C. Lin", "Andrew Y. Ng", "Christopher D. Manning"], "venue": "In Proceedings of the 26th International Conference on Machine Learning (ICML),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2011}, {"title": "Semantic Compositionality Through Recursive Matrix-Vector Spaces", "author": ["Richard Socher", "Brody Huval", "Christopher D. Manning", "Andrew Y. Ng"], "venue": "In Proceedings of the 2012 Conference on Empirical Methods in Natural Language Processing (EMNLP),", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2012}, {"title": "Word representations: a simple and general method for semi-supervised learning", "author": ["Joseph Turian", "Lev Ratinov", "Yoshua Bengio"], "venue": "In Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2010}, {"title": "From frequency to meaning: Vector space models of semantics", "author": ["Peter D. Turney", "Patrick Pantel"], "venue": "In Journal of Artificial Intelligence Research,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2010}, {"title": "Distributional semantics beyond words: Supervised learning of analogy and paraphrase", "author": ["Peter D. Turney"], "venue": "In Transactions of the Association for Computational Linguistics (TACL),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "Wsabie: Scaling up to large vocabulary image annotation", "author": ["Jason Weston", "Samy Bengio", "Nicolas Usunier"], "venue": "In Proceedings of the Twenty-Second international joint conference on Artificial Intelligence-Volume Volume Three,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2011}], "referenceMentions": [{"referenceID": 12, "context": "One of the earliest use of word representations dates back to 1986 due to Rumelhart, Hinton, and Williams [13].", "startOffset": 106, "endOffset": 110}, {"referenceID": 0, "context": "This idea has since been applied to statistical language modeling with considerable success [1].", "startOffset": 92, "endOffset": 95}, {"referenceID": 13, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 97, "endOffset": 104}, {"referenceID": 6, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 97, "endOffset": 104}, {"referenceID": 1, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 136, "endOffset": 161}, {"referenceID": 19, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 136, "endOffset": 161}, {"referenceID": 14, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 136, "endOffset": 161}, {"referenceID": 2, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 136, "endOffset": 161}, {"referenceID": 17, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 136, "endOffset": 161}, {"referenceID": 18, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 136, "endOffset": 161}, {"referenceID": 8, "context": "The follow up work includes applications to automatic speech recognition and machine translation [14, 7], and a wide range of NLP tasks [2, 20, 15, 3, 18, 19, 9].", "startOffset": 136, "endOffset": 161}, {"referenceID": 7, "context": "[8] introduced the Skip-gram model, an efficient method for learning highquality vector representations of words from large amounts of unstructured text data.", "startOffset": 0, "endOffset": 3}, {"referenceID": 8, "context": "For example, the result of a vector calculation vec(\u201cMadrid\u201d) - vec(\u201cSpain\u201d) + vec(\u201cFrance\u201d) is closer to vec(\u201cParis\u201d) than to any other word vector [9, 8].", "startOffset": 149, "endOffset": 155}, {"referenceID": 7, "context": "For example, the result of a vector calculation vec(\u201cMadrid\u201d) - vec(\u201cSpain\u201d) + vec(\u201cFrance\u201d) is closer to vec(\u201cParis\u201d) than to any other word vector [9, 8].", "startOffset": 149, "endOffset": 155}, {"referenceID": 3, "context": "In addition, we present a simplified variant of Noise Contrastive Estimation (NCE) [4] for training the Skip-gram model that results in faster training and better vector representations for frequent words, compared to more complex hierarchical softmax that was used in the prior work [8].", "startOffset": 83, "endOffset": 86}, {"referenceID": 7, "context": "In addition, we present a simplified variant of Noise Contrastive Estimation (NCE) [4] for training the Skip-gram model that results in faster training and better vector representations for frequent words, compared to more complex hierarchical softmax that was used in the prior work [8].", "startOffset": 284, "endOffset": 287}, {"referenceID": 14, "context": "Other techniques that aim to represent meaning of sentences by composing the word vectors, such as the recursive autoencoders [15], would also benefit from using phrase vectors instead of the word vectors.", "startOffset": 126, "endOffset": 130}, {"referenceID": 11, "context": "In the context of neural network language models, it was first introduced by Morin and Bengio [12].", "startOffset": 94, "endOffset": 98}, {"referenceID": 9, "context": "Mnih and Hinton explored a number of methods for constructing the tree structure and the effect on both the training time and the resulting model accuracy [10].", "startOffset": 155, "endOffset": 159}, {"referenceID": 4, "context": "It has been observed before that grouping words together by their frequency works well as a very simple speedup technique for the neural network based language models [5, 8].", "startOffset": 167, "endOffset": 173}, {"referenceID": 7, "context": "It has been observed before that grouping words together by their frequency works well as a very simple speedup technique for the neural network based language models [5, 8].", "startOffset": 167, "endOffset": 173}, {"referenceID": 3, "context": "An alternative to the hierarchical softmax is Noise Contrastive Estimation (NCE), which was introduced by Gutmann and Hyvarinen [4] and applied to language modeling by Mnih and Teh [11].", "startOffset": 128, "endOffset": 131}, {"referenceID": 10, "context": "An alternative to the hierarchical softmax is Noise Contrastive Estimation (NCE), which was introduced by Gutmann and Hyvarinen [4] and applied to language modeling by Mnih and Teh [11].", "startOffset": 181, "endOffset": 185}, {"referenceID": 1, "context": "This is similar to hinge loss used by Collobert and Weston [2] who trained the models by ranking the data above noise.", "startOffset": 59, "endOffset": 62}, {"referenceID": 7, "context": "Table 1: Accuracy of various Skip-gram 300-dimensional models on the analogical reasoning task as defined in [8].", "startOffset": 109, "endOffset": 112}, {"referenceID": 7, "context": "[8].", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "[8] also show that the vectors learned by the standard sigmoidal recurrent neural networks (which are highly non-linear) improve on this task significantly as the amount of the training data increases, suggesting that non-linear models also have a preference for a linear structure of the word representations.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "Many authors who previously worked on the neural network based representations of words have published their resulting models for further use and comparison: amongst the most well known authors are Collobert and Weston [2], Turian et al.", "startOffset": 219, "endOffset": 222}, {"referenceID": 16, "context": "[17], and Mnih and Hinton [10].", "startOffset": 0, "endOffset": 4}, {"referenceID": 9, "context": "[17], and Mnih and Hinton [10].", "startOffset": 26, "endOffset": 30}, {"referenceID": 7, "context": "[8] have already evaluated these word representations on the word analogy task, where the Skip-gram models achieved the best performance with a huge margin.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "The techniques introduced in this paper can be used also for training the continuous bag-of-words model introduced in [8].", "startOffset": 118, "endOffset": 121}, {"referenceID": 15, "context": "Our work can thus be seen as complementary to the existing approach that attempts to represent phrases using recursive matrix-vector operations [16].", "startOffset": 144, "endOffset": 148}], "year": 2013, "abstractText": "The recently introduced continuous Skip-gram model is an efficient method for learning high-quality distributed vector representations that capture a large number of precise syntactic and semantic word relationships. In this paper we present several extensions that improve both the quality of the vectors and the training speed. By subsampling of the frequent words we obtain significant speedup and also learn more regular word representations. We also describe a simple alternative to the hierarchical softmax called negative sampling. An inherent limitation of word representations is their indifference to word order and their inability to represent idiomatic phrases. For example, the meanings of \u201cCanada\u201d and \u201cAir\u201d cannot be easily combined to obtain \u201cAir Canada\u201d. Motivated by this example, we present a simple method for finding phrases in text, and show that learning good vector representations for millions of phrases is possible.", "creator": "gnuplot 4.4 patchlevel 3"}}}