{"id": "1311.3669", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Nov-2013", "title": "Scalable Influence Estimation in Continuous-Time Diffusion Networks", "abstract": "\" if a compact piece of input information is released simultaneously from buying a media site, can it spread, in almost 1 month, to a 45 million accessible web pages? overcoming this partial influence estimation aid problem is thereby very considerably challenging since both challenge the abstract time - sensitive nature theme of the problem and moreover the conceptual issue of scalability need surely to be addressed correctly simultaneously. in examining this paper, mostly we propose a randomized algorithm purely for influence force estimation assistance in identifying continuous - time directed diffusion networks. evaluating our algorithm can estimate the influence of choosing every filter node assigned in determining a homogeneous network with | + v | 20 nodes and | e | edges to an accuracy of $ \\ varepsilon $ using $ n = o ( 1 / \\ varepsilon ^ 2 ) $ randomizations l and scores up to logarithmic coupling factors o ( n | p e | + log n | v | ) and computations. when used as a complementary subroutine in a greedy nonlinear influence maximization algorithm, running our incorrectly proposed inverse method is repeatedly guaranteed to find both a set of nodes computed with an influence of interaction at approximately least ( > 1 - 1 / e ) _ opt - und 2 $ \\ versus varepsilon $, where opt neutrality is the optimal value. experiments conducting on overcoming both synthetic cities and real - world data cores show that scaling the flawed proposed method alone can possibly easily not scale perfectly up to infinity networks of millions individuals of particular nodes while significantly improves over his previous average state - properties of - the - most arts results in terms of the accuracy of the sampled estimated influence coefficient and over the quality of the selected nodes inherent in maximizing removing the influence.", "histories": [["v1", "Thu, 14 Nov 2013 21:01:15 GMT  (234kb,D)", "http://arxiv.org/abs/1311.3669v1", "To appear in Advances in Neural Information Processing Systems (NIPS), 2013"]], "COMMENTS": "To appear in Advances in Neural Information Processing Systems (NIPS), 2013", "reviews": [], "SUBJECTS": "cs.SI cs.LG", "authors": ["nan du", "le song", "manuel gomez-rodriguez", "hongyuan zha"], "accepted": true, "id": "1311.3669"}, "pdf": {"name": "1311.3669.pdf", "metadata": {"source": "CRF", "title": "Scalable Influence Estimation in Continuous-Time Diffusion Networks", "authors": ["Nan Du", "Le Song", "Manuel Gomez-Rodriguez", "Hongyuan Zha"], "emails": ["dunan@gatech.edu", "lsong@cc.gatech.edu", "manuelgr@tue.mpg.de", "zha@cc.gatech.edu"], "sections": [{"heading": null, "text": "If a piece of information is released from a media site, can we predict whether it may spread to one million web pages, in a month ? This influence estimation problem is very challenging since both the time-sensitive nature of the task and the requirement of scalability need to be addressed simultaneously. In this paper, we propose a randomized algorithm for influence estimation in continuous-time diffusion networks. Our algorithm can estimate the influence of every node in a network with |V| nodes and |E| edges to an accuracy of using n = O(1/ 2) randomizations and up to logarithmic factorsO(n|E|+n|V|) computations. When used as a subroutine in a greedy influence maximization approach, our proposed algorithm is guaranteed to find a set of C nodes with the influence of at least (1 \u2212 1/e) OPT\u22122C , where OPT is the optimal value. Experiments on both synthetic and real-world data show that the proposed algorithm can easily scale up to networks of millions of nodes while significantly improves over previous state-of-the-arts in terms of the accuracy of the estimated influence and the quality of the selected nodes in maximizing the influence."}, {"heading": "1 Introduction", "text": "Motivated by applications in viral marketing [1], researchers have been studying the influence maximization problem: find a set of nodes whose initial adoptions of certain idea or product can trigger, in a time window, the largest expected number of follow-ups. For this purpose, it is essential to accurately and efficiently estimate the number of follow-ups of an arbitrary set of source nodes within the given time window. This is a challenging problem for that we need first accurately model the timing information in cascade data and then design a scalable algorithm to deal with large real-world networks. Most previous work in the literature tackled the influence estimation and maximization problems for infinite time window [1, 2, 3, 4, 5, 6]. However, in most cases, influence must be estimated or maximized up to a given time, i.e., a finite time window must be considered [7]. For example, a marketer would like to have her advertisement viewed by a million people in one month, rather than in one hundred years. Such time-sensitive requirement renders those algorithms which only consider static information, such as network topologies, inappropriate in this context.\nA sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15]. There is a twofold rationale behind this modeling choice. First, since follow-ups occur asynchronously, continuous variables seem more appropriate to represent them. Artificially discretizing the time axis into bins introduces additional tuning parameters, like the bin size, which are not easy to choose optimally. Second, discrete time models can only describe transmission times which obey an exponential density, and hence can be too restricted to capture the rich temporal dynamics in the data. Extensive experimental comparisons on both synthetic and real world data showed that continuous-time models yield significant improvement in settings such as recovering hidden diffusion network structures from cascade data [8, 10] and predicting the timings of future events [9, 14].\nar X\niv :1\n31 1.\n36 69\nv1 [\ncs .S\nI] 1\n4 N\nov 2\n01 3\nHowever, estimating and maximizing influence based on continuous-time diffusion models also entail many challenges. First, the influence estimation problem in this setting is a difficult graphical model inference problem, i.e., computing the marginal density of continuous variables in loopy graphical models. The exact answer can be computed only for very special cases. For example, Gomez-Rodriguez et al. [7] have shown that the problem can be solved exactly when the transmission functions are exponential densities, by using continuous time Markov processes theory. However, the computational complexity of such approach, in general, scales exponentially with the size and density of the network. Moreover, extending the approach to deal with arbitrary transmission functions would require additional nontrivial approximations which would increase even more the computational complexity. Second, it is unclear how to scale up influence estimation and maximization algorithms based on continuous-time diffusion models to millions of nodes. Especially in the maximization case, even a naive sampling algorithm for approximate inference is not scalable: n sampling rounds need to be carried out for each node to estimate the influence, which results in an overall O(n|V||E|) algorithm. Thus, our goal is to design a scalable algorithm which can perform influence estimation and maximization in this regime of networks with millions of nodes.\nIn particular, we propose CONTINEST (Continous-Time Influence Estimation), a scalable randomized algorithm for influence estimation in a continuous-time diffusion network with heterogeneous edge transmission functions. The key idea of the algorithm is to view the problem from the perspective of graphical model inference, and reduces the problem to a neighborhood estimation problem in graphs. Our algorithm can estimate the influence of every node in a network with |V| nodes and |E| edges to an accuracy of using n = O(1/ 2) randomizations and up to logarithmic factors O(n|E| + n|V|) computations. When used as a subroutine in a greedy influence maximization algorithm, our proposed algorithm is guaranteed to find a set of nodes with an influence of at least (1\u2212 1/e) OPT\u22122C , where OPT is the optimal value. Finally, we validate CONTINEST on both influence estimation and maximization problems over large synthetic and real world datasets. In terms of influence estimation, CONTINEST is much closer to the true influence and much faster than other state-of-the-art methods. With respect to the influence maximization, CONTINEST allows us to find a set of sources with greater influence than other state-of-the-art methods."}, {"heading": "2 Continuous-Time Diffusion Networks", "text": "First, we revisit the continuous-time generative model for cascade data in social networks introduced in [10]. The model associates each edge j \u2192 i with a transmission function, fji(\u03c4ji), a density over time, in contrast to previous discrete-time models which associate each edge with a fixed infection probability [1]. Moreover, it also differs from discrete-time models in the sense that events in a cascade are not generated iteratively in rounds, but event timings are sampled directly from the transmission function in the continuous-time model.\nContinuous-Time Independent Cascade Model. Given a directed contact network, G = (V, E), we use a continuous-time independent cascade model for modeling a diffusion process [10]. The process begins with a set of infected source nodes, A, initially adopting certain contagion (idea, meme or product) at time zero. The contagion is transmitted from the sources along their out-going edges to their direct neighbors. Each transmission through an edge entails a random spreading time, \u03c4 , drawn from a density over time, fji(\u03c4). We assume transmission times are independent and possibly distributed differently across edges. Then, the infected neighbors transmit the contagion to their respective neighbors, and the process continues. We assume that an infected node remains infected for the entire diffusion process. Thus, if a node i is infected by multiple neighbors, only the neighbor that first infects node i will be the true parent. As a result, although the contact network can be an arbitrary directed network, each cascade (a vector of event timing information from the spread of a contagion) induces a Directed Acyclic Graph (DAG).\nHeterogeneous Transmission Functions. Formally, the transmission function fji(ti|tj) for directed edge j \u2192 i is the conditional density of node i getting infected at time ti given that node j was infected at time tj . We assume it is shift invariant: fji(ti|tj) = fji(\u03c4ji), where \u03c4ji := ti \u2212 tj , and nonnegative: fji(\u03c4ji) = 0 if \u03c4ji < 0. Both parametric transmission functions, such as the exponential and Rayleigh function [10, 16], and nonparametric function [8] can be used and estimated from cascade data (see Appendix A for more details).\nShortest-Path property. The independent cascade model has a useful property we will use later: given a sample of transmission times of all edges, the time ti taken to infect a node i is the length\nof the shortest path in G from the sources to node i, where the edge weights correspond to the associated transmission times."}, {"heading": "3 Graphical Model Perspectives for Continuous-Time Diffusion Networks", "text": "The continuous-time independent cascade model is essentially a directed graphical model for a set of dependent random variables, the infection times ti of the nodes, where the conditional independence structure is supported on the contact network G (see Appendix B for more details). More formally, the joint density of {ti}i\u2208V can be expressed as\np ({ti}i\u2208V) = \u220f\ni\u2208V p (ti|{tj}j\u2208\u03c0i) , (1)\nwhere \u03c0i denotes the set of parents of node i in a cascade-induced DAG, and p(ti|{tj}j\u2208\u03c0i) is the conditional density of infection ti at node i given the infection times of its parents.\nInstead of directly modeling the infection times ti, we can focus on the set of mutually independent random transmission times \u03c4ji = ti \u2212 tj . Interestingly, by switching from a node-centric view to an edge-centric view, we obtain a fully factorized joint density of the set of transmission times\np ( {\u03c4ji}(j,i)\u2208E ) = \u220f\n(j,i)\u2208E fji(\u03c4ji), (2)\nBased on the Shortest-Path property of the independent cascade model, each variable ti can be viewed as a transformation from the collection of variables {\u03c4ji}(j,i)\u2208E . More specifically, let Qi be the collection of directed paths in G from the source nodes to node i, where each path q \u2208 Qi contains a sequence of directed edges (j, l). Assuming all source nodes are infected at zero time, then we obtain variable ti via\nti = gi ( {\u03c4ji}(j,i)\u2208E ) := min\nq\u2208Qi\n\u2211 (j,l)\u2208q \u03c4jl, (3)\nwhere the transformation gi(\u00b7) is the value of the shortest-path minimization. As a special case, we can now compute the probability of node i infected before T using a set of independent variables:\nPr {ti \u2264 T} = Pr { gi ( {\u03c4ji}(j,i)\u2208E ) \u2264 T } . (4)\nThe significance of the relation is that it allows us to transform a problem involving a sequence of dependent variables {ti}i\u2208V to one with independent variables {\u03c4ji}(j,i)\u2208E . Furthermore, the two perspectives are connected via the shortest path algorithm in weighted directed graph, a standard well-studied operation in graph analysis."}, {"heading": "4 Influence Estimation Problem in Continuous-Time Diffusion Networks", "text": "Intuitively, given a time window, the wider the spread of infection, the more influential the set of sources. We adopt the definition of influence as the average number of infected nodes given a set of source nodes and a time window, as in previous work [7]. More formally, consider a set of C source nodes A \u2286 V which gets infected at time zero, then, given a time window T , a node i is infected in the time window if ti \u2264 T . The expected number of infected nodes (or the influence) given the set of transmission functions {fji}(j,i)\u2208E can be computed as\n\u03c3(A, T ) = E [\u2211\ni\u2208V I {ti \u2264 T}\n] = \u2211\ni\u2208V E [I {ti \u2264 T}] = \u2211 i\u2208V Pr {ti \u2264 T} , (5)\nwhere I {\u00b7} is the indicator function and the expectation is taken over the the set of dependent variables {ti}i\u2208V . Essentially, the influence estimation problem in Eq. (5) is an inference problem for graphical models, where the probability of event ti \u2264 T given sources in A can be obtained by summing out the possible configuration of other variables {tj}j 6=i. That is\nPr{ti \u2264 T} = \u222b \u221e 0 \u00b7 \u00b7 \u00b7 \u222b T ti=0 \u00b7 \u00b7 \u00b7 \u222b \u221e 0 (\u220f j\u2208V p ( tj |{tl}l\u2208\u03c0j ))(\u220f j\u2208V dtj ) , (6)\nwhich is, in general, a very challenging problem. First, the corresponding directed graphical models can contain nodes with high in-degree and high out-degree. For example, in Twitter, a user can follow dozens of other users, and another user can have hundreds of \u201cfollowees\u201d. The tree-width corresponding to this directed graphical model can be very high, and we need to perform integration for functions involving many continuous variables. Second, the integral in general can not be eval-\nuated analytically for heterogeneous transmission functions, which means that we need to resort to numerical integration by discretizing the domain [0,\u221e). If we use N level of discretization for each variable, we would need to enumerate O(N |\u03c0i|) entries, exponential in the number of parents.\nOnly in very special cases, can one derive the closed-form equation for computing Pr{ti \u2264 T} [7]. However, without further heuristic approximation, the computational complexity of the algorithm is exponential in the size and density of the network. The intrinsic complexity of the problem entails the utilization of approximation algorithms, such as mean field algorithms or message passing algorithms.We will design an efficient randomized (or sampling) algorithm in the next section."}, {"heading": "5 Efficient Influence Estimation in Continuous-Time Diffusion Networks", "text": "Our first key observation is that we can transform the influence estimation problem in Eq. (5) into a problem with independent variables. Using relation in Eq. (4), we have\n\u03c3(A, T ) = \u2211 i\u2208V Pr { gi ( {\u03c4ji}(j,i)\u2208E ) \u2264 T } = E [\u2211 i\u2208V I { gi ( {\u03c4ji}(j,i)\u2208E ) \u2264 T }] , (7)\nwhere the expectation is with respect to the set of independent variables {\u03c4ji}(j,i)\u2208E . This equivalent formulation suggests a naive sampling (NS) algorithm for approximating \u03c3(A, T ): draw n samples of {\u03c4ji}(j,i)\u2208E , run a shortest path algorithm for each sample, and finally average the results (see Appendix C for more details). However, this naive sampling approach has a computational complexity of O(nC|V||E|+ nC|V|2 log |V|) due to the repeated calling of the shortest path algorithm. This is quadratic to the network size, and hence not scalable to millions of nodes.\nOur second key observation is that for each sample {\u03c4ji}(j,i)\u2208E , we are only interested in the neighborhood size of the source nodes, i.e., the summation \u2211 i\u2208V I {\u00b7} in Eq. (7), rather than in the individual shortest paths. Fortunately, the neighborhood size estimation problem has been studied in the theoretical computer science literature. Here, we adapt a very efficient randomized algorithm by Cohen [17] to our influence estimation problem. This randomized algorithm has a computational complexity of O(|E| log |V| + |V| log2 |V|) and it estimates the neighborhood sizes for all possible single source node locations. Since it needs to run once for each sample of {\u03c4ji}(j,i)\u2208E , we obtain an overall influence estimation algorithm with O(n|E| log |V| + n|V| log2 |V|) computation, nearly linear in network size. Next we will revisit Cohen\u2019s algorithm for neighborhood estimation."}, {"heading": "5.1 Randomized Algorithm for Single-Source Neighborhood Size Estimation", "text": "Given a fixed set of edge transmission times {\u03c4ji}(j,i)\u2208E and a source node s, infected at time 0, the neighborhoodN (s, T ) of a source node s given a time window T is the set of nodes within distance T from s, i.e.,\nN (s, T ) = { i \u2223\u2223 gi ({\u03c4ji}(j,i)\u2208E) \u2264 T, i \u2208 V} . (8)\nInstead of estimating N (s, T ) directly, the algorithm will assign an exponentially distributed random label ri to each network node i. Then, it makes use of the fact that the minimum of a set of exponential random variables {ri}i\u2208N (s,T ) will also be a exponential random variable, but with its parameter equals to the number of variables. That is if each ri \u223c exp(\u2212ri), then the smallest label within distance T from source s, r\u2217 := mini\u2208N (s,T ) ri, will distribute as r\u2217 \u223c exp {\u2212|N (s, T )|r\u2217}. Suppose we randomize over the labeling m times, and obtain m such least labels, {ru\u2217}mu=1. Then the neighborhood size can be estimated as\n|N (s, T )| \u2248 m\u2212 1\u2211m u=1 r u \u2217 . (9)\nwhich is shown to be an unbiased estimator of |N (s, T )| [17]. This is an interesting relation since it allows us to transform the counting problem in (8) to a problem of finding the minimum random label r\u2217. The key question is whether we can compute the least label r\u2217 efficiently, given random labels {ri}i\u2208V and any source node s. Cohen [17] designed a modified Dijkstra\u2019s algorithm (Algorithm 1) to construct a data structure r\u2217(s), called least label list, for each node s to support such query. Essentially, the algorithm starts with the node i with the smallest label ri, and then it traverses in breadth-first search fashion along the reverse direction of the graph edges to find all reachable nodes. For each reachable node s, the distance d\u2217 between i and s, and ri are added to the end of r\u2217(s). Then the algorithm moves to the node i\u2032 with the second smallest label ri\u2032 , and similarly find all reachable nodes. For each reachable\nnode s, the algorithm will compare the current distance d\u2217 between i\u2032 and s with the last recorded distance in r\u2217(s). If the current distance is smaller, then the current d\u2217 and ri\u2032 are added to the end of r\u2217(s). Then the algorithm move to the node with the third smallest label and so on. The algorithm is summarized in Algorithm 1 in Appendix D.\nAlgorithm 1 returns a list r\u2217(s) per node s \u2208 V , which contains information about distance to the smallest reachable labels from s. In particular, each list contains pairs of distance and random labels, (d, r), and these pairs are ordered as\n\u221e > d(1) > d(2) > . . . > d(|r\u2217(s)|) = 0 (10) r(1) < r(2) < . . . < r(|r\u2217(s)|), (11)\nwhere {\u00b7}(l) denotes the l-th element in the list. (see Appendix D for an example). If we want to query the smallest reachable random label r\u2217 for a given source s and a time T , we only need to perform a binary search on the list for node s:\nr\u2217 = r(l), where d(l\u22121) > T \u2265 d(l). (12) Finally, to estimate |N (s, T )|, we generate m i.i.d. collections of random labels, run Algorithm 1 on each collection, and obtain m values {ru\u2217} m u=1, which we use on Eq. (9) to estimate |N (i, T )|.\nThe computational complexity of Algorithm 1 is O(|E| log |V| + |V| log2 |V|), with expected size of each r\u2217(s) being O(log |V|). Then the expected time for querying r\u2217 is O(log log |V|) using binary search. Since we need to generate m set of random labels and run Algorithm 1 m times, the overall computational complexity for estimating the single-source neighborhood size for all s \u2208 V is O(m|E| log |V| + m|V| log2 |V| + m|V| log log |V|). For large scale network, and when m min{|V|, |E|}, this randomized algorithm can be much more efficient than approaches based on directly calculating the shortest paths."}, {"heading": "5.2 Constructing Estimation for Multiple-Source Neighborhood Size", "text": "When we have a set of sources, A, its neighborhood is the union of the neighborhoods of its constituent sources\nN (A, T ) = \u22c3\ni\u2208A N (i, T ). (13)\nThis is true because each source independently infects its downstream nodes. Furthermore, to calculate the least label list r\u2217 corresponding toN (A, T ), we can simply reuse the least label list r\u2217(i) of each individual source i \u2208 A. More formally,\nr\u2217 = mini\u2208A minj\u2208N (i,T ) rj , (14)\nwhere the inner minimization can be carried out by querying r\u2217(i). Similarly, after we obtain m samples of r\u2217, we can estimate |N (A, T )| using Eq. (9). Importantly, very little additional work is needed when we want to calculate r\u2217 for a set of sourcesA, and we can reuse work done for a single source. This is very different from a naive sampling approach where the sampling process needs to be done completely anew if we increase the source set. In contrast, using the randomized algorithm, only an additional constant-time minimization over |A| numbers is needed."}, {"heading": "5.3 Overall Algorithm", "text": "So far, we have achieved efficient neighborhood size estimation of |N (A, T )| with respect to a given set of transmission times {\u03c4ji}(j,i)\u2208E . Next, we will estimate the influence by averaging over multiple sets of samples for {\u03c4ji}(j,i)\u2208E . More specifically, the relation from (7)\n\u03c3(A, T ) = E{\u03c4ji}(j,i)\u2208E [|N (A, T )|] = E{\u03c4ji}E{r1,...,rm}|{\u03c4ji} [ m\u2212 1\u2211m u=1 r u \u2217 ] , (15)\nsuggests the following overall algorithm\nContinuous-Time Influence Estimation (CONTINEST): 1. Sample n sets of random transmission times {\u03c4 lij}(j,i)\u2208E \u223c \u220f (j,i)\u2208E fji(\u03c4ji)\n2. Given a set of {\u03c4 lij}(j,i)\u2208E , samplem sets of random labels {rui }i\u2208V \u223c \u220f i\u2208V exp(\u2212ri)\n3. Estimate \u03c3(A, T ) by sample averages \u03c3(A, T ) \u2248 1n \u2211n l=1 ( (m\u2212 1)/ \u2211m ul=1 rul\u2217 )\nImportantly, the number of random labels, m, does not need to be very large. Since the estimator for |N (A, T )| is unbiased [17], essentially the outer-loop of averaging over n samples of random transmission times further reduces the variance of the estimator in a rate of O(1/n). In practice, we can use a very small m (e.g., 5 or 10) and still achieve good results, which is also confirmed by our later experiments. Compared to [2], the novel application of Cohen\u2019s algorithm arises for estimating influence for multiple sources, which drastically reduces the computation by cleverly using the least-label list from single source. Moreover, we have the following theoretical guarantee (see Appendix E for proof)\nTheorem 1 Draw the following number of samples for the set of random transmission times\nn > C\u039b\n2 log ( 2|V| \u03b4 ) (16)\nwhere \u039b := maxA:|A|\u2264C 2\u03c3(A, T )/(m \u2212 2) + 2V ar(|N (A, T )|) + 2a /3 and |N (A, T )| \u2264 a, and for each set of random transmission times, draw m set of random labels. Then |\u03c3\u0302(A, T )\u2212 \u03c3(A, T )| 6 uniformly for all A with |A| 6 C, with probability at least 1\u2212 \u03b4.\nThe theorem indicates that the minimum number of samples, n, needed to achieve certain accuracy is related to the actual size of the influence \u03c3(A, T ), and the variance of the neighborhood size |N (A, T )| over the random draw of samples. The number of random labels, m, drawn in the inner loop of the algorithm will monotonically decrease the dependency of n on \u03c3(A, T ). It suffices to draw a small number of random labels, as long as the value of \u03c3(A, T )/(m \u2212 2) matches that of V ar(|N (A, T )|). Another implication is that influence at larger time window T is harder to estimate, since \u03c3(A, T ) will generally be larger and hence require more random labels."}, {"heading": "6 Influence Maximization", "text": "Once we know how to estimate the influence \u03c3(A, T ) for anyA \u2286 V and time window T efficiently, we can use them in finding the optimal set of C source nodesA\u2217 \u2286 V such that the expected number of infected nodes in G is maximized at T . That is, we seek to solve,\nA\u2217 = argmax|A|6C \u03c3(A, T ), (17) where setA is the variable. The above optimization problem is NP-hard in general. By construction, \u03c3(A, T ) is a non-negative, monotonic nondecreasing function in the set of source nodes, and it can be shown that \u03c3(A, T ) satisfies a diminishing returns property called submodularity [7]. A well-known approximation algorithm to maximize monotonic submodular functions is the greedy algorithm. It adds nodes to the source node set A sequentially. In step k, it adds the node i which maximizes the marginal gain \u03c3(Ak\u22121\u222a{i};T )\u2212\u03c3(Ak\u22121;T ). The greedy algorithm finds a source node set which achieves at least a constant fraction (1 \u2212 1/e) of the optimal [18]. Moreover, lazy evaluation [5] can be employed to reduce the required number of marginal gains per iteration. By using our influence estimation algorithm in each iteration of the greedy algorithm, we gain the following additional benefits:\nFirst, at each iteration k, we do not need to rerun the full influence estimation algorithm (section 5.2). We just need to store the least label list r\u2217(i) for each node i \u2208 V computed for a single source, which requires expected storage size of O(|V| log |V|) overall. Second, our influence estimation algorithm can be easily parallelized. Its two nested sampling loops can be parallelized in a straightforward way since the variables are independent of each other. However, in practice, we use a small number of random labels, and m n. Thus we only need to parallelize the sampling for the set of random transmission times {\u03c4ji}. The storage of the least element lists can also be distributed.\nHowever, by using our randomized algorithm for influence estimation, we also introduce a sampling error to the greedy algorithm due to the approximation of the influence \u03c3(A, T ). Fortunately, the greedy algorithm is tolerant to such sampling noise, and a well-known result provides a guarantee for this case (following an argument in [19, Th. 7.9]):\nTheorem 2 Suppose the influence \u03c3(A, T ) for all A with |A| \u2264 C are estimated uniformly with error and confidence 1 \u2212 \u03b4, the greedy algorithm returns a set of sources A\u0302 such that \u03c3(A\u0302, T ) \u2265 (1\u2212 1/e)OPT \u2212 2C with probability at least 1\u2212 \u03b4."}, {"heading": "7 Experiments", "text": "We evaluate the accuracy of the estimated influence given by CONTINEST and investigate the performance of influence maximization on synthetic and real networks. We show that our approach significantly outperforms the state-of-the-art methods in terms of both speed and solution quality.\nSynthetic network generation. We generate three types of Kronecker networks [20]: (i) coreperiphery networks (parameter matrix: [0.9 0.5; 0.5 0.3]), which mimic the information diffusion traces in real world networks [21], (ii) random networks ([0.5 0.5; 0.5 0.5]), typically used in physics and graph theory [22] and (iii) hierarchical networks ([0.9 0.1; 0.1 0.9]) [10]. Next, we assign a pairwise transmission function for every directed edge in each type of network and set its parameters at random. In our experiments, we use the Weibull distribution [16], f(t;\u03b1, \u03b2) = \u03b2\u03b1 ( t \u03b1 )\u03b2\u22121 e\u2212(t/\u03b1) \u03b2\n, t > 0, where \u03b1 > 0 is a scale parameter and \u03b2 > 0 is a shape parameter. The Weibull distribution (Wbl) has often been used to model lifetime events in survival analysis, providing more flexibility than an exponential distribution [16]. We choose \u03b1 and \u03b2 from 0 to 10 uniformly at random for each edge in order to have heterogeneous temporal dynamics. Finally, for each type of Kronecker network, we generate 10 sample networks, each of which has different \u03b1 and \u03b2 chosen for every edge.\nAccuracy of the estimated influence. To the best of our knowledge, there is no analytical solution to the influence estimation given Weibull transmission function. Therefore, we compare CONTINEST with Naive Sampling (NS) approach (see Appendix C) by considering the highest degree node in a network as the source, and draw 1,000,000 samples for NS to obtain near ground truth. Figures 1(a) compares CONTINEST with the ground truth provided by NS at different time window T , from 0.1 to 10 in corre-periphery networks. For CONTINEST, we generate up to 10,000 random samples (or set of random waiting times), and 5 random labels in the inner loop. In all three networks, estimation provided by CONTINEST fits accurately the ground truth, and the relative error decreases quickly as we increase the number of samples and labels (Figures 1(b) and 1(c)). For 10,000 random samples with 5 random labels, the relative error is smaller than 0.01. (see Appendix F for additional results on the random and hierarchal networks)\nScalability. We compare CONTINEST to previous state-of-the-art INFLUMAX [7] and the Naive Sampling (NS) method in terms of run time for the continuous-time influence estimation and maximization. For CONTINEST, we draw 10,000 samples in the outer loop, each having 5 random labels in the inner loop. For NS, we also draw 10,000 samples. The first two experiments are carried out in a single 2.4GHz processor. First, we compare the performance for increasing number of selected sources (from 1 to 10) by fixing the core-periphery networks to 128 node network and 320 edges and time window to 10 (Figure 2(a)). When the number of selected sources is 1, different algorithms essentially spend time estimating the influence for each node. CONTINEST outperforms other methods by order of magnitude and for the number of sources larger than 1, it can efficiently reuse computations for estimating influence for individual nodes. Dashed lines mean that a method did not finish in 24 hours, and the estimated run time is plotted. Next, we compare the run time for selecting 10 sources on core-periphery networks of 128 nodes with increasing densities (or the number of edges) (Figure 2(a)). Again, INFLUMAX and NS are order of magnitude slower due to their respective exponential and quadratic computational complexity in network density. In contrast, the run time of CONTINEST only increases slightly with the increasing density since its computational complexity is linear in the number of edges (see Appendix F for additional results on the random and hierarchal networks). Finally, we evaluate the speed on large core-periphery networks,\nranging from 100 to 1,000,000 nodes with density 1.5 in Figure 2(c). We report the parallel run time only for CONTINEST and NS (both are implemented by MPI running on 192 cores of 2.4Ghz) since INFLUMAX is not scalable. In contrast to NS, the performance of CONTINEST increases linearly with the network size and can easily scale up to one million nodes.\nReal-world data. We first quantify how well each method can estimate the true influence in a real-world dataset. Then, we evaluate the solution quality of the selected sources for influence maximization. We use the MemeTracker dataset [23] which has 10,967 hyperlink cascades among 600 media sites. We repeatedly split all cascades into a 80% training set and a 20% test set at random for five times. On each training set, we learn the continuous-time model using NETRATE [10] with exponential transmission functions. For discrete-time model, we learn the infection probabilities using [24] for IC, SP1M and PMIA. Similarly, for LT, we follow the methodology by [1]. Let C(u) be the set of all cascades where u was the source node. Based on C(u), the total number of distinct nodes infected before T quantifies the real influence of node u up to time T . In Figure 3(a), we report the Mean Absolute Error (MAE) between the real and the estimated influence. Clearly, CONTINEST performs the best statistically. Because the length of real cascades empirically conforms to a power-law distribution where most cascades are very short (2-4 nodes), the gap of the estimation error is relatively not large. However, we emphasize that such accuracy improvement is critical for maximizing long-term influence. The estimation error for individuals will accumulate along the spreading paths. Hence, any consistent improvement in influence estimation can lead to significant improvement to the overall influence estimation and maximization task, which is further confirmed by Figures 3(b) and 3(c) where we evaluate the influence of the selected nodes in the same spirit as influence estimation: the true influence is calculated as the total number of distinct nodes infected before T based on C(u) of the selected nodes. The selected sources given by CONTINEST achieve the best performance as we vary the number of selected sources and the observation time window."}, {"heading": "8 Conclusions", "text": "We propose a randomized influence estimation algorithm in continuous-time diffusion networks, which can scale up to networks of millions of nodes while significantly improves over previous stateof-the-arts in terms of the accuracy of the estimated influence and the quality of the selected nodes in maximizing the influence. There are also many venues for future work. It will be interesting to apply the current algorithm to other tasks like influence minimization and manipulation, and design scalable algorithms for continuous-time models other than the independent cascade model. Acknowledgement: Our work is supported by NSF/NIH BIGDATA 1R01GM108341-01, NSF IIS1116886, NSF IIS1218749, a DARPA Xdata grant and Raytheon Faculty Fellowship of Gatech."}, {"heading": "A Heterogeneous Transmission Functions", "text": "We denote the waiting time distribution, or transmission function, along a directed edge of G as fji(ti|tj). Formally, the transmission function fji(ti|tj) for directed edge j \u2192 i is the conditional density of node i getting infected at time ti given that node j was infected at time tj . We assume it is shift invariant, i.e., fji(ti|tj) = fji(ti \u2212 tj) = fji(\u03c4ji), where \u03c4ji := ti \u2212 tj , and it takes positive values when \u03c4ji \u2265 0, and the value of zero otherwise. In most previous work, simple parametric transmission functions such as the exponential distribution \u03b1ji exp(\u2212\u03b1ji\u03c4ji), and the Rayleigh distribution \u03b1ji\u03c4 exp(\u2212\u03b1ji\u03c42ji/2) have been used [16, 10]. However, in many real world scenarios, information transmission between pairs of nodes can be heterogeneous and the waiting times can obey distributions that dramatically differ from these simple models. For instance, in viral marketing, active consumers could update their status instantly, while an inactive user may just log in and respond once a day. As a result, the transmission function between an active user and his friends can be quite different from that between an inactive user and his friends. As an attempt to model these complex scenarios, nonparametric transmission functions have been recently considered [8]. In such approach, the relationship between the survival function, the conditional intensity function or hazard, and the transmission function is exploited. In particular, the survival function is defined as Sji(\u03c4ji) := 1 \u2212 \u222b \u03c4ji 0 fji(\u03c4 \u2032)d\u03c4 \u2032 and the hazard function is defined as hji(\u03c4ji) := fji(\u03c4ji)/Sji(\u03c4ji). Then, it is a well-known result in survival theory that Sji(\u03c4ji) = exp ( \u2212 \u222b \u03c4ji 0 hji(\u03c4 \u2032)d\u03c4 \u2032 ) and fji(\u03c4ji) = hji(\u03c4ji)Sji(\u03c4ji). The advantage of using the conditional intensity function is that we do not need to explicitly enforce \u201cthe integral equals 1\u201d constraint for the conditional density fji. Instead, we just need to ensure hji \u2265 0. This facilitates nonparametric modeling of the transmission function. For instance, we can define the conditional intensity function as a positive combination of n positive kernel functions k,\nhji(\u03c4) = \u2211n\nl=1 \u03b1lk(\u03c4l, \u03c4), if \u03c4 > 0, and 0 otherwise.\nA common choice of the kernel function is the Gaussian RBF kernel k(\u03c4 \u2032, \u03c4) = exp(\u2212\u2016\u03c4 \u2212 \u03c4 \u2032\u20162 /2s2). Nonparametric transmission functions significantly improve modeling of real world diffusion, as is shown in [8]."}, {"heading": "B A Graphical Model Perspective", "text": "Now, we look at the independent cascade model from the perspective of graphical models, where the collection of random variables includes the infection times ti of the nodes. Although the original contact graph G can contain directed loops, each diffusion process (or a cascade) induces a directed acyclic graph (DAG). For those cascades consistent with a particular DAG, we can model the joint density of ti using a directed graphical model:\np ({ti}i\u2208V) = \u220f\ni\u2208V p (ti|{tj}j\u2208\u03c0i) , (18)\nwhere each \u03c0i denotes the collection of parents of node i in the induced DAG, and each term p(ti|{tj}j\u2208\u03c0i) corresponds to a conditional density of tj given the infection times of the parents of node i. This is true because given the infection times of node i\u2019s parents, ti is independent of other infection times, satisfying the local Markov property of a directed graphical model. We note that the independent cascade model only specifies explicitly the pairwise transmission functions for each directed edge, but does not directly define the conditional density p(ti|{tj}j\u2208\u03c0i). However, these conditional densities can be derived from the pairwise transmission functions based on the Independent-Infection property [10]:\np (ti|{tj}j\u2208\u03c0i) = \u2211\nj\u2208\u03c0i hji(ti|tj) \u220f l\u2208\u03c0i S(ti|tl), (19)\nwhich is the sum of the likelihoods that node i is infected by each parent node j. More precisely, each term in the summation can be interpreted as the instantaneous risk of node i being infected at ti by node j given that it has survived the infection of all parent nodes until time ti.\nPerhaps surprisingly, the factorization in Eq. (18) is the same factorization that can be used for an arbitrary induced DAG consistent with the contact network G. In this case, we only need to replace the definition of \u03c0i (the parent of node i in the DAG) to the set of neighbors of node i with an edge\npointing to node i in G. This is not immediately obvious from Eq. (18), since the contact network G can contain directed loops which may be in conflict with the conditional independence semantics of directed graphical models. The reason it is possible to do so is as follows: Any fixed set of infection times, t1, . . . , td, induces an ordering of the infection times. If ti \u2264 tj for an edge j \u2192 i in G, hji(ti|tj) = 0, and the corresponding term in Eq. (19) is zeroed out, making the conditional density consistent with the semantics of directed graphical models.\nBased on the joint density of the infection times in Eq. (18), we can perform various inference and learning tasks. For instance, previous work has used Eq. (18) for learning the parameters of the independent cascade model [8, 10, 11]. However, this may not be the most convenient form for addressing other inference problems, including the influence estimation problem in the next section. To this end, we propose an alternative view.\nInstead of directly modeling the infection times ti, we can focus on the collection of mutually independent random transmission times \u03c4ji = ti\u2212 tj . In this case, the joint density of the collection of transmission times \u03c4ji is fully factorized\np ( {\u03c4ji}(j,i)\u2208E ) = \u220f\n(j,i)\u2208E fji(\u03c4ji),\nwhere E denotes the set of edges in the contact network G\u2014 switching from the earlier node-centric view to the now edge-centric view. Based on the Shortest-Path property of the independent cascade model, variable ti can be viewed as a transformation from the collection of variables {\u03c4ji}(j,i)\u2208E . More specifically, let Qi be the collection of directed paths in G from the source nodes to node i, where each path q \u2208 Qi contains a sequence of directed edges (j, l), and assuming all source nodes are infected at zero time, then we obtain variable ti via\nti = gi ( {\u03c4ji}(j,i)\u2208E ) := min\nq\u2208Qi\n\u2211 (j,l)\u2208q \u03c4jl, (20)\nwhere gi(\u00b7) is the transformation. Importantly, we can now compute the probability of infection of node i at ti using the set of variables {\u03c4ji}(j,i)\u2208E :\nPr {ti \u2264 T} = Pr { gi ( {\u03c4ji}(j,i)\u2208E ) \u2264 T } . (21)\nThe significance of the relation is that it allows us to transform a problem involving a sequence of dependent variables {ti}i\u2208V to one with independent variables {\u03c4ji}(j,i)\u2208E . Furthermore, the two problems are connected via the shortest path algorithm in weighted directed graph, a standard well studied operation in graph analysis."}, {"heading": "C Naive Sampling Algorithm", "text": "The graphical model perspective described in Section 3 and Appendix B suggests a naive sampling (NS) algorithm for approximating \u03c3(A, T ):\n1. Draw n samples, {{ \u03c4 lji } (j,i)\u2208E }n l=1\n, i.i.d. from the waiting time product distribution\u220f (j,i)\u2208E fji(\u03c4ji);\n2. For each sample { \u03c4 lji } (j,i)\u2208E and for each node i, find the shortest path from source nodes\nto node i; count the number of nodes with gi ({ \u03c4 lji } (j,i)\u2208E ) \u2264 T ;\n3. Average the counts across n samples.\nAlthough the naive sampling algorithm can handle arbitrary transmission function, it is not scalable to networks with millions of nodes. We need to compute the shortest path for each node and each sample, which results in a computational complexity of O(n|E| + n|V| log |V|) for a single source node. The problem is even more pressing in the influence maximization problem, where we need to estimate the influence of source nodes at different location and with increasing number of source nodes. To do this, the algorithm needs to be repeated, adding a multiplicative factor of C|V| to the computational complexity (C is the number of nodes to select). Then, the algorithm becomes quadratic in the network size. When the network size is in the order of thousands and millions, typical in modern social network analysis, the naive sampling algorithm become prohibitively ex-\npensive. Additionally, we may need to draw thousands of samples (n is large), further making the algorithm impractical for large scale problems."}, {"heading": "D Least Label List", "text": "The notation \u201cargsort((r1, . . . , r|V|), ascend)\u201d in line 2 of Algorithm 1 means that we sort the collection of random labels in ascending order and return the argument of the sort as an ordered list.\nAlgorithm 1: Least Label List Input: a reversed directed graph G = (V, E) with edge weights {\u03c4ji}(j,i)\u2208E , a node labeling {ri}i\u2208V Output: A list r\u2217(s) for each s \u2208 V for each s \u2208 V do ds \u2190\u221e, r\u2217(s)\u2190 \u2205; for i in argsort((r1, . . . , r|V|), ascend) do\nempty heap H\u2190 \u2205; set all nodes except i as unvisited; push (0, i) into heap H; while H 6= \u2205 do\npop (d\u2217, s) with the minimum d\u2217 from H; add (d\u2217, ri) to the end of list r\u2217(s); ds \u2190 d\u2217; for each unvisited in-coming neighbor j of s do\nset j as visited; if (d, j) in heap H then\nPop (d, j) from heap H; Push (min {d, d\u2217 + \u03c4js} , j) into heap H;\nelse if d\u2217 + \u03c4js < dj then Push (d\u2217 + \u03c4js, j) into heap H;\nFigure 4 shows an example of the Least-Label-List. The nodes from a to g are assigned to exponentially distributed labels with mean one shown in each parentheses. Given a query distance 0.8 for node c, we can binary-search its Least-label-list r\u2217(c) to find that node a belongs to this range with the smallest label r(a) = 1.5."}, {"heading": "E Theorem 1", "text": "Theorem 1 Sample the following number of sets of random transmission times\nn > C\u039b\n2 log ( 2|V| \u03b4 ) where \u039b := maxA:|A|\u2264C 2\u03c3(A, T )/(m \u2212 2) + 2V ar(S\u03c4 ) + 2a /3, and for each set of random transmission times, sample m set of random labels, we can guarantee that\n|\u03c3\u0302(A, T )\u2212 \u03c3(A, T )| 6 simultaneously for all A with |A| 6 C, with probability at least 1\u2212 \u03b4.\nProof Let S\u03c4 := |N (A, T )| for a fixed set of {\u03c4ji} and then \u03c3(A, T ) = E\u03c4 [S\u03c4 ]. The randomized algorithm with m randomizations produces an unbiased estimator S\u0302\u03c4 = (m \u2212 1)/( \u2211m u=1 r u \u2217 ) for S\u03c4 , i.e., Er|\u03c4 [S\u0302\u03c4 ] = S\u03c4 , with variance Er|\u03c4 [(S\u0302\u03c4 \u2212 S\u03c4 )2] = S\u03c4/(m\u2212 2).\nThen S\u0302\u03c4 is also an unbiased estimator for \u03c3(A, T ), since E\u03c4,r[S\u0302\u03c4 ] = E\u03c4Er|\u03c4 [S\u0302\u03c4 ] = E\u03c4 [S\u03c4 ] = \u03c3(A, T ). Its variance is\nV ar(S\u0302\u03c4 ) := E\u03c4,r[(S\u0302\u03c4 \u2212 \u03c3(A, T ))2] = E\u03c4,r[(S\u0302\u03c4 \u2212 S\u03c4 + S\u03c4 \u2212 \u03c3(A, T ))2] = E\u03c4,r[(S\u0302\u03c4 \u2212 S\u03c4 )2] + 2E\u03c4,r[(S\u0302\u03c4 \u2212 S\u03c4 )(S\u03c4 \u2212 \u03c3(A, T ))] + E\u03c4,r[(S\u03c4 \u2212 \u03c3(A, T ))2] = E\u03c4 [S\u03c4/(m\u2212 2)] + 0 + V ar(S\u03c4 ) = \u03c3(A, T )/(m\u2212 2) + V ar(S\u03c4 )\nThen using Bernstein\u2019s inequality, we have, for our final estimator \u03c3\u0302(A, T ) = 1n \u2211n l=1 S\u0302\u03c4 l , that\nPr {|\u03c3\u0302(A, T )\u2212 \u03c3(A, T )| > } 6 2 exp ( \u2212 n 2\n2V ar(S\u0302\u03c4 ) + 2a /3\n) (22)\nwhere S\u0302\u03c4 < a 6 |V|. Setting the right hand side of relation (22) to \u03b4, we have that, with probability 1 \u2212 \u03b4, sampling the following number set of random transmission times\nn > 2V ar(S\u0302\u03c4 ) + 2a /3\n2 log\n( 2\n\u03b4\n) =\n2\u03c3(A, T )/(m\u2212 2) + 2V ar(S\u03c4 ) + 2a /3 2 log\n( 2\n\u03b4 ) we can guarantee that our estimator to have error |\u03c3\u0302(A, T )\u2212 \u03c3(A, T )| 6 . If we want to insure that |\u03c3\u0302(A, T )\u2212 \u03c3(A, T )| 6 simultaneously hold for all A such that |A| 6 C |V|, we can first use union bound with relation (22). In this case, we have that, with probability 1\u2212 \u03b4, sampling the following number set of random transmission times\nn > C\u039b\n2 log ( 2|V| \u03b4 ) we can guarantee that our estimator to have error |\u03c3\u0302(A, T )\u2212 \u03c3(A, T )| 6 for all A with |A| 6 C. Note that we have define the constant \u039b := maxA:|A|\u2264C 2\u03c3(A, T )/(m\u22122)+2V ar(S\u03c4 )+2a /3."}, {"heading": "F Additional Experimental Results", "text": "In this section, we report additional experimental results on accuracy of influence estimation, continuous-time influence maximization and scalability for the synthetic networks.\nF.1 Accuracy of Influence Estimation\nFigure 5 evaluates the estimated scope of influence for different time windows and the relative errors with respective to different number of random samples and labels on the random kronecker networks with 1,024 nodes and 2,048 edges. Figure 6 further reports similar results on the hierarchical kronecker networks. In all cases, the errors decrease dramatically as we draw more samples and labels.\nIn addition, because INFLUMAX can produce exact closed form influence on sparse small networks with exponential transmission functions, we compare CONTINEST with INFLUMAX in Figure 7, where we chose the highest degree node in the network as the source. We have drawn 10,000 random samples, each of which has 5 random labels for each node. CONTINEST outputs values of influence which are very close to the exact values given by INFLUMAX, with relative error less than 0.01 in all three types of networks.\nF.2 Continuous-time Influence Maximization\nWe compare CONTINEST to other influence maximization methods based on discrete-time diffusion models: traditional greedy [1], with discrete-time Linear Threshold Model (LT) and Independent Cascade Model (IC) diffusion models, and the heuristic methods SP1M [2] and PMIA [25]. For INFLUMAX, since it only supports exponential pairwise transmission functions, we fit an exponential distribution per edge. Furthermore, INFLUMAX is not scalable; when the average network density of the synthetic networks is \u223c 2.0, the run time for INFLUMAX is more than 24 hours. Instead, we present the results of CONTINEST using fitted exponential distributions (Exp). For the discrete-time IC model, we learn the infection probability within time window T using Netrapalli\u2019s method [24]. The learned pairwise infection probabilities are also served for SP1M and PMIA, which essentially approximately calculate the influence based on the IC model. For the discrete-time LT model, we set the weight of each incoming edge to a node u to the inverse of its in-degree, as in previous work [1], and choose each node\u2019s threshold uniformly at random. Figure 8 compares the expected number of infected nodes against source set size for different methods. CONTINEST outperforms the rest, and the competitive advantage becomes more dramatic the larger the source set grows. Figure 9 shows\nthe expected number of infected nodes against the time window for 50 selected sources. Again, CONTINEST performs the best for all three types of networks.\nF.3 Scalability\nFigure 10 compares CONTINEST to INFLUMAX and the Naive Simulation (NS) method in terms of running time for the continuous-time influence maximization problem over the random and hierarchal kronecker type of networks, respectively, with different densities and sizes on a single 2.4Ghz CPU core. For CONTINEST, we have drawn 10,000 samples, each of which has 5 random labels assigned to each node. For NS, we follow the work [1] to run 10,000 Monte Carlo simulations. For running times longer than 24 hours, we use dashed line to qualitatively indicate the estimated performance based on the time complexity of each method."}], "references": [{"title": "Maximizing the spread of influence through a social network", "author": ["David Kempe", "Jon Kleinberg", "\u00c9va Tardos"], "venue": "In KDD,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2003}, {"title": "Efficient influence maximization in social networks", "author": ["Wei Chen", "Yajun Wang", "Siyu Yang"], "venue": "In KDD,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2009}, {"title": "Scalable influence maximization in social networks under the linear threshold model", "author": ["Wei Chen", "Yifei Yuan", "Li Zhang"], "venue": "In ICDM,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "A data-based approach to social influence maximization", "author": ["Amit Goyal", "Francesco Bonchi", "Laks V.S. Lakshmanan"], "venue": "Proc. VLDB Endow.,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Cost-effective outbreak detection in networks", "author": ["Jure Leskovec", "Andreas Krause", "Carlos Guestrin", "Christos Faloutsos", "Jeanne M. VanBriesen", "Natalie S. Glance"], "venue": "In KDD,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Mining knowledge-sharing sites for viral marketing", "author": ["Matthew Richardson", "Pedro Domingos"], "venue": "In KDD,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2002}, {"title": "Influence maximization in continuous time diffusion networks", "author": ["Manuel Gomez-Rodriguez", "Bernhard Sch\u00f6lkopf"], "venue": "In ICML \u201912,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2012}, {"title": "Learning networks of heterogeneous influence", "author": ["Nan Du", "Le Song", "Alexander J. Smola", "Ming Yuan"], "venue": "In NIPS,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2012}, {"title": "Uncover topic-sensitive information diffusion networks", "author": ["Nan Du", "Le Song", "Hyenkyun Woo", "Hongyuan Zha"], "venue": "In AISTATS,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2013}, {"title": "Uncovering the temporal dynamics of diffusion networks", "author": ["Manuel Gomez-Rodriguez", "David Balduzzi", "Bernhard Sch\u00f6lkopf"], "venue": "In ICML,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2011}, {"title": "Structure and Dynamics of Information Pathways in On-line Media", "author": ["Manuel Gomez-Rodriguez", "Jure Leskovec", "Bernhard Sch\u00f6lkopf"], "venue": "In WSDM,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "Learning social infectivity in sparse low-rank networks using multi-dimensional hawkes processes", "author": ["Ke Zhou", "Le Song", "Hongyuan Zha"], "venue": "In Artificial Intelligence and Statistics (AISTATS),", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2013}, {"title": "Learning triggering kernels for multi-dimensional hawkes processes", "author": ["Ke Zhou", "Hongyuan Zha", "Le Song"], "venue": "In International Conference on Machine Learning(ICML),", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2013}, {"title": "Modeling information propagation with survival theory", "author": ["Manuel Gomez-Rodriguez", "Jure Leskovec", "Bernhard Sch\u00f6lkopf"], "venue": "In ICML,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}, {"title": "Mixture of mutually exciting processes for viral diffusion", "author": ["Shuanghong Yang", "Hongyuan Zha"], "venue": "In International Conference on Machine Learning(ICML),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2013}, {"title": "Statistical Models and Methods for Lifetime", "author": ["Jerald F. Lawless"], "venue": "Data. Wiley-Interscience,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2002}, {"title": "Size-estimation framework with applications to transitive closure and reachability", "author": ["Edith Cohen"], "venue": "Journal of Computer and System Sciences,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1997}, {"title": "An analysis of approximations for maximizing submodular set functions", "author": ["GL Nemhauser", "LA Wolsey", "ML Fisher"], "venue": "Mathematical Programming,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1978}, {"title": "Kronecker graphs: An approach to modeling", "author": ["Jure Leskovec", "Deepayan Chakrabarti", "Jon M. Kleinberg", "Christos Faloutsos", "Zoubin Ghahramani"], "venue": "networks. JMLR,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}, {"title": "Inferring networks of diffusion and influence", "author": ["Manuel Gomez-Rodriguez", "Jure Leskovec", "Andreas Krause"], "venue": "In KDD,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2010}, {"title": "Networks, Crowds, and Markets: Reasoning About a Highly Connected World", "author": ["David Easley", "Jon Kleinberg"], "venue": null, "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2010}, {"title": "Meme-tracking and the dynamics of the news cycle", "author": ["Jure Leskovec", "Lars Backstrom", "Jon M. Kleinberg"], "venue": "In KDD,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2009}, {"title": "Learning the graph of epidemic cascades", "author": ["Praneeth Netrapalli", "Sujay Sanghavi"], "venue": "In SIG- METRICS/PERFORMANCE,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2012}], "referenceMentions": [{"referenceID": 0, "context": "1 Introduction Motivated by applications in viral marketing [1], researchers have been studying the influence maximization problem: find a set of nodes whose initial adoptions of certain idea or product can trigger, in a time window, the largest expected number of follow-ups.", "startOffset": 60, "endOffset": 63}, {"referenceID": 0, "context": "Most previous work in the literature tackled the influence estimation and maximization problems for infinite time window [1, 2, 3, 4, 5, 6].", "startOffset": 121, "endOffset": 139}, {"referenceID": 1, "context": "Most previous work in the literature tackled the influence estimation and maximization problems for infinite time window [1, 2, 3, 4, 5, 6].", "startOffset": 121, "endOffset": 139}, {"referenceID": 2, "context": "Most previous work in the literature tackled the influence estimation and maximization problems for infinite time window [1, 2, 3, 4, 5, 6].", "startOffset": 121, "endOffset": 139}, {"referenceID": 3, "context": "Most previous work in the literature tackled the influence estimation and maximization problems for infinite time window [1, 2, 3, 4, 5, 6].", "startOffset": 121, "endOffset": 139}, {"referenceID": 4, "context": "Most previous work in the literature tackled the influence estimation and maximization problems for infinite time window [1, 2, 3, 4, 5, 6].", "startOffset": 121, "endOffset": 139}, {"referenceID": 5, "context": "Most previous work in the literature tackled the influence estimation and maximization problems for infinite time window [1, 2, 3, 4, 5, 6].", "startOffset": 121, "endOffset": 139}, {"referenceID": 6, "context": ", a finite time window must be considered [7].", "startOffset": 42, "endOffset": 45}, {"referenceID": 7, "context": "A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15].", "startOffset": 203, "endOffset": 233}, {"referenceID": 8, "context": "A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15].", "startOffset": 203, "endOffset": 233}, {"referenceID": 9, "context": "A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15].", "startOffset": 203, "endOffset": 233}, {"referenceID": 10, "context": "A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15].", "startOffset": 203, "endOffset": 233}, {"referenceID": 11, "context": "A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15].", "startOffset": 203, "endOffset": 233}, {"referenceID": 12, "context": "A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15].", "startOffset": 203, "endOffset": 233}, {"referenceID": 13, "context": "A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15].", "startOffset": 203, "endOffset": 233}, {"referenceID": 14, "context": "A sequence of recent work has argued that modeling cascade data and information diffusion using continuous-time diffusion networks can provide significantly more accurate models than discretetime models [8, 9, 10, 11, 12, 13, 14, 15].", "startOffset": 203, "endOffset": 233}, {"referenceID": 7, "context": "Extensive experimental comparisons on both synthetic and real world data showed that continuous-time models yield significant improvement in settings such as recovering hidden diffusion network structures from cascade data [8, 10] and predicting the timings of future events [9, 14].", "startOffset": 223, "endOffset": 230}, {"referenceID": 9, "context": "Extensive experimental comparisons on both synthetic and real world data showed that continuous-time models yield significant improvement in settings such as recovering hidden diffusion network structures from cascade data [8, 10] and predicting the timings of future events [9, 14].", "startOffset": 223, "endOffset": 230}, {"referenceID": 8, "context": "Extensive experimental comparisons on both synthetic and real world data showed that continuous-time models yield significant improvement in settings such as recovering hidden diffusion network structures from cascade data [8, 10] and predicting the timings of future events [9, 14].", "startOffset": 275, "endOffset": 282}, {"referenceID": 13, "context": "Extensive experimental comparisons on both synthetic and real world data showed that continuous-time models yield significant improvement in settings such as recovering hidden diffusion network structures from cascade data [8, 10] and predicting the timings of future events [9, 14].", "startOffset": 275, "endOffset": 282}, {"referenceID": 6, "context": "[7] have shown that the problem can be solved exactly when the transmission functions are exponential densities, by using continuous time Markov processes theory.", "startOffset": 0, "endOffset": 3}, {"referenceID": 9, "context": "First, we revisit the continuous-time generative model for cascade data in social networks introduced in [10].", "startOffset": 105, "endOffset": 109}, {"referenceID": 0, "context": "The model associates each edge j \u2192 i with a transmission function, fji(\u03c4ji), a density over time, in contrast to previous discrete-time models which associate each edge with a fixed infection probability [1].", "startOffset": 204, "endOffset": 207}, {"referenceID": 9, "context": "Given a directed contact network, G = (V, E), we use a continuous-time independent cascade model for modeling a diffusion process [10].", "startOffset": 130, "endOffset": 134}, {"referenceID": 9, "context": "Both parametric transmission functions, such as the exponential and Rayleigh function [10, 16], and nonparametric function [8] can be used and estimated from cascade data (see Appendix A for more details).", "startOffset": 86, "endOffset": 94}, {"referenceID": 15, "context": "Both parametric transmission functions, such as the exponential and Rayleigh function [10, 16], and nonparametric function [8] can be used and estimated from cascade data (see Appendix A for more details).", "startOffset": 86, "endOffset": 94}, {"referenceID": 7, "context": "Both parametric transmission functions, such as the exponential and Rayleigh function [10, 16], and nonparametric function [8] can be used and estimated from cascade data (see Appendix A for more details).", "startOffset": 123, "endOffset": 126}, {"referenceID": 6, "context": "We adopt the definition of influence as the average number of infected nodes given a set of source nodes and a time window, as in previous work [7].", "startOffset": 144, "endOffset": 147}, {"referenceID": 6, "context": "Only in very special cases, can one derive the closed-form equation for computing Pr{ti \u2264 T} [7].", "startOffset": 93, "endOffset": 96}, {"referenceID": 16, "context": "Here, we adapt a very efficient randomized algorithm by Cohen [17] to our influence estimation problem.", "startOffset": 62, "endOffset": 66}, {"referenceID": 16, "context": "which is shown to be an unbiased estimator of |N (s, T )| [17].", "startOffset": 58, "endOffset": 62}, {"referenceID": 16, "context": "Cohen [17] designed a modified Dijkstra\u2019s algorithm (Algorithm 1) to construct a data structure r\u2217(s), called least label list, for each node s to support such query.", "startOffset": 6, "endOffset": 10}, {"referenceID": 16, "context": "Since the estimator for |N (A, T )| is unbiased [17], essentially the outer-loop of averaging over n samples of random transmission times further reduces the variance of the estimator in a rate of O(1/n).", "startOffset": 48, "endOffset": 52}, {"referenceID": 1, "context": "Compared to [2], the novel application of Cohen\u2019s algorithm arises for estimating influence for multiple sources, which drastically reduces the computation by cleverly using the least-label list from single source.", "startOffset": 12, "endOffset": 15}, {"referenceID": 6, "context": "By construction, \u03c3(A, T ) is a non-negative, monotonic nondecreasing function in the set of source nodes, and it can be shown that \u03c3(A, T ) satisfies a diminishing returns property called submodularity [7].", "startOffset": 202, "endOffset": 205}, {"referenceID": 17, "context": "The greedy algorithm finds a source node set which achieves at least a constant fraction (1 \u2212 1/e) of the optimal [18].", "startOffset": 114, "endOffset": 118}, {"referenceID": 4, "context": "Moreover, lazy evaluation [5] can be employed to reduce the required number of marginal gains per iteration.", "startOffset": 26, "endOffset": 29}, {"referenceID": 18, "context": "We generate three types of Kronecker networks [20]: (i) coreperiphery networks (parameter matrix: [0.", "startOffset": 46, "endOffset": 50}, {"referenceID": 19, "context": "3]), which mimic the information diffusion traces in real world networks [21], (ii) random networks ([0.", "startOffset": 73, "endOffset": 77}, {"referenceID": 20, "context": "5]), typically used in physics and graph theory [22] and (iii) hierarchical networks ([0.", "startOffset": 48, "endOffset": 52}, {"referenceID": 9, "context": "9]) [10].", "startOffset": 4, "endOffset": 8}, {"referenceID": 15, "context": "In our experiments, we use the Weibull distribution [16], f(t;\u03b1, \u03b2) = \u03b2 \u03b1 ( t \u03b1 )\u03b2\u22121 e\u2212(t/\u03b1) \u03b2 , t > 0, where \u03b1 > 0 is a scale parameter and \u03b2 > 0 is a shape parameter.", "startOffset": 52, "endOffset": 56}, {"referenceID": 15, "context": "The Weibull distribution (Wbl) has often been used to model lifetime events in survival analysis, providing more flexibility than an exponential distribution [16].", "startOffset": 158, "endOffset": 162}, {"referenceID": 6, "context": "We compare CONTINEST to previous state-of-the-art INFLUMAX [7] and the Naive Sampling (NS) method in terms of run time for the continuous-time influence estimation and maximization.", "startOffset": 59, "endOffset": 62}, {"referenceID": 21, "context": "We use the MemeTracker dataset [23] which has 10,967 hyperlink cascades among 600 media sites.", "startOffset": 31, "endOffset": 35}, {"referenceID": 9, "context": "On each training set, we learn the continuous-time model using NETRATE [10] with exponential transmission functions.", "startOffset": 71, "endOffset": 75}, {"referenceID": 22, "context": "For discrete-time model, we learn the infection probabilities using [24] for IC, SP1M and PMIA.", "startOffset": 68, "endOffset": 72}, {"referenceID": 0, "context": "Similarly, for LT, we follow the methodology by [1].", "startOffset": 48, "endOffset": 51}], "year": 2013, "abstractText": "If a piece of information is released from a media site, can we predict whether it may spread to one million web pages, in a month ? This influence estimation problem is very challenging since both the time-sensitive nature of the task and the requirement of scalability need to be addressed simultaneously. In this paper, we propose a randomized algorithm for influence estimation in continuous-time diffusion networks. Our algorithm can estimate the influence of every node in a network with |V| nodes and |E| edges to an accuracy of using n = O(1/ ) randomizations and up to logarithmic factorsO(n|E|+n|V|) computations. When used as a subroutine in a greedy influence maximization approach, our proposed algorithm is guaranteed to find a set of C nodes with the influence of at least (1 \u2212 1/e) OPT\u22122C , where OPT is the optimal value. Experiments on both synthetic and real-world data show that the proposed algorithm can easily scale up to networks of millions of nodes while significantly improves over previous state-of-the-arts in terms of the accuracy of the estimated influence and the quality of the selected nodes in maximizing the influence.", "creator": "LaTeX with hyperref package"}}}