{"id": "1411.7480", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Nov-2014", "title": "Unweighted Stochastic Local Search can be Effective for Random CSP Benchmarks", "abstract": "accordingly we present ulsa, a novel stochastic local search algorithm developed for conducting random binary constraint satisfaction problems ( called csp ). each ulsa is many 500 times faster developing than the prior state of the research art on a nationally widely - being studied structured suite of random binary csp benchmarks. exactly unlike addressing the globally best previous methods for delivering these benchmarks, ulsa solving is considered a simple unweighted method that specifically does need not require dynamic phase adaptation of weights or additional penalties. ulsa repeatedly obtains new convergence record allowing best matching solutions satisfying class 99 of 100 positive variables in the challenging free frb100 - db 40 benchmark run instance.", "histories": [["v1", "Thu, 27 Nov 2014 06:41:22 GMT  (157kb,D)", "http://arxiv.org/abs/1411.7480v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["christopher d rosin"], "accepted": false, "id": "1411.7480"}, "pdf": {"name": "1411.7480.pdf", "metadata": {"source": "CRF", "title": "Unweighted Stochastic Local Search can be Effective for Random CSP Benchmarks", "authors": ["Christopher D. Rosin"], "emails": ["christopher.rosin@gmail.com"], "sections": [{"heading": "1 Random Binary CSPs", "text": "Randomly generated instances of constraint satisfaction problems (CSP) have provided widely-used benchmarks in the development of solvers for CSP, Boolean satisfiability (SAT), and maximum independent set (MIS). While some interesting instances of CSP and SAT eventually turn out to be reasonably easy for appropriate methods (Minton, Johnston, Philips, & Laird, 1990; Williams, Gomes, & Selman, 2003), reliably hard instances of random CSP can be obtained from the \u201cphase transition\u201d boundary between satisfiable and unsatisfiable regions of parameterized distributions of instances (Prosser, 1996). For appropriate distributions, most of these phase transition instances are exponentially hard for a standard baseline approach of tree-like resolution (Xu & Li, 2006). And empirically these phase transition instances are challenging for all known methods.\nA discrete constraint satisfaction problem (CSP) consists of n variables x1 . . . xn. Each variable xi can be assigned a value from its finite domain Di. In this paper, all variables in an instance have the same domain size. An instance specifies a set of constraints, where each constraint identifies k variables and restricts them to an allowed subset of combinations of values from the cross product of their domains. Here, we deal with binary CSPs in which k = 2, and we refer to the two variables in a constraint as endpoints of the constraint. If two endpoints hold values that violate the constraint, we refer to it as a conflict. A solution to the CSP is a setting to the variables in which there are no conflicts. We also refer to partial solutions as meeting a target of T \u2264 n if there is a subset of T variables such that no conflict has both endpoints in this subset.\nSeveral models have been developed for generating hard random CSP instances (Smith & Dyer, 1996). Model RB addresses shortcomings of early models (Xu & Li, 2000), and has received wide attention. To generate a random binary CSP with n variables, Model RB draws (with replacement) rn ln(n) variable pairs to constrain. For each of these variable pairs, the constraint disallows\nar X\niv :1\n41 1.\n74 80\nv1 [\ncs .A\nI] 2\n7 N\nov 2\na fraction p of pairs of values; the specific pairs are drawn randomly (without replacement), independently for each constraint. With n variables, a phase transition occurs (asymptotically) when domain size is n0.8, r = 0.8/(ln(4) \u2212 ln(3)), and p = 0.25 (Xu & Li, 2003). It is also possible to modify Model RB slightly to generate forced-satisfiable instances that are guaranteed to have a solution, by rejecting any constraints that are inconsistent with a preselected solution; such forced-satisfiable instances have very similar properties to the original Model RB (Xu, Boussemart, Hemery, & Lecoutre, 2007).\nA particular benchmark suite of forced-satisfiable Model RB instances (Xu, 2003, 2005), denoted frbX-Y for X variables and domain size Y, has been used repeatedly in CSP solving competitions (Boussemart, Hemery, & Lecoutre, 2005; van Dongen, Lecoutre, & Roussel, 2006, 2008, 2009), SAT solving competitions (van Maaren & Franco, 2014), and many published CSP and SAT studies (Mehta & van Dongen, 2005; Xu et al., 2007; Cai, Su, & Sattar, 2011). These benchmarks have been very challenging in CSP and SAT competitions; for example, instance frb59-26-2 appeared in at least 6 competitions from 2004-2011 without ever being solved by any of the competitors.\nThis benchmark suite has had particular importance in the development of MIS solvers (Cai, Su, & Chen, 2010; Pullan, Mascia, & Brunato, 2011; Cai, Su, Luo, & Sattar, 2013).1 Given an undirected graph, the MIS problem asks for the largest subset of vertices such that no edge has both endpoints in the subset. For MIS, the graph formulation of this benchmark suite (known as BHOSLIB) relies on a straightforward reduction from binary CSP to MIS: given a CSP instance, the corresponding MIS instance has a vertex for each possible domain value of each variable, an edge for each pair of values disallowed by a constraint, and an edge for each pair of values for the same variable since a variable can only hold one value.2 Independent sets of size n correspond to solutions to the original n-variable CSP instance, and independent sets of size T \u2264 n correspond to partial CSP solutions meeting a target of T . As MIS solvers have become more capable via improved algorithms and increased computer speed, most of the MIS benchmarks in the older DIMACS suite are readily solved, making BHOSLIB an important source of newer challenging MIS benchmarks (Richter, Helmert, & Gretton, 2007; Pullan et al., 2011; Cai et al., 2013). The importance of BHOSLIB extends to use in the development of MIS solvers for practical biomedical applications (Bull, Muldoon, & Doig, 2013; Abraham & Diaz, 2014). Substantially improved MIS results on DIMACS and BHOSLIB instances have come through use of stochastic local search algorithms that dynamically adapt weights or penalties on vertices (Pullan & Hoos, 2006; Pullan et al., 2011), edges (Cai et al., 2010, 2013), or both (Fang, Chu, Qiao, Feng, & Xu, 2014). MIS solvers using such weighted search techniques have yielded the best results for the BHOSLIB benchmarks.\n1Instead of \u201cmaximum independent set\u201d or \u201dMIS\u201d, some studies refer to the equivalent problems of \u201cminimum vertex cover\u201d or \u201cmaximum clique.\u201d\n2We confirmed (by inspection of subset of the BHOSLIB MIS instances that had previously been made available in CSP form) that the BHOSLIB MIS instance vertices are numbered sequentially starting with all of the domain values for one CSP variable, then all of the domain values for a second CSP variable, and so on. This made it straightforward to recover the binary CSP instances from their MIS versions. Had this straightforward recovery not been possible (e.g. due to random permutation of vertices in the MIS instance), we also confirmed that it is feasible to recover the CSP variables from the MIS instance with brief runs of a max clique heuristic (NuMVC operating on the inverse of the graph) to identify the large cliques in the MIS instance that represent the domain values of the CSP variables."}, {"heading": "2 NuMVC", "text": "In comparisons below, we use the MIS algorithm NuMVC (Cai et al., 2013) to represent the state of the art in solving the BHOSLIB benchmarks. NuMVC and its predecessors by the same authors were the first to achieve an independent set of 98 nodes on the large challenging frb100-40 benchmark (Cai et al., 2010). On moderate-sized BHOSLIB instances, NuMVC succeeds more reliably at speeds at least several times faster than earlier MIS methods by other authors (Cai et al., 2013). Slightly better results on BHOSLIB (up to 20% faster on some consistently-solved instances) have been reported for a method that builds on the techniques used in NuMVC (Fang et al., 2014), but this does not materially change our conclusions below.\nNuMVC is a stochastic local search algorithm. Stochastic local search randomly selects a small localized change to a current candidate solution, and then repeats this many times to traverse the search space (Hoos & Stu\u0308tzle, 2004). The stochastic local search state in NuMVC is based on a current candidate subset of the vertices. Each iteration, NuMVC selects a vertex to add to the candidate subset; this may result in additional edges with both endpoints in the candidate subset. It then randomly selects such an edge and eliminates it by removing one of its endpoints from the subset. Each iteration, weights are increased on each edge with both endpoints in the candidate subset. The choice of vertices to add and remove from the subset is then biased to favor elimination of edges that have high weight. Edge weights are maintained and adapted over long periods consisting of many iterations."}, {"heading": "3 ULSA", "text": "ULSA (Unweighted Local Search Algorithm, Figure 1) is a novel stochastic local search algorithm that operates directly on a binary CSP (as opposed to operating on the graph formulation used by MIS algorithms). ULSA\u2019s search state consists of a candidate setting of the variables, and timestamps indicating when each variable was last updated. Each iteration, ULSA randomly\nselects a current conflict and eliminates it by setting one of its endpoints to a different value; this is comparable to NuMVC\u2019s elimination of a randomly selected edge. ULSA preferentially selects the conflict endpoint with the older timestamp; NuMVC uses a similar mechanism for tiebreaking in case of equal weights. Unlike NuMVC though, ULSA does not maintain weights or other comparably long-term state information.\nFor a variable that is to be updated, ULSA selects a value that minimizes the number of conflicts. This is similar to the well-known min-conflicts heuristic (Minton et al., 1990). A minconflicts hillclimbing heuristic, however, is subject to getting trapped in local optima from which it cannot escape without temporarily worsening the total number of conflicts (Minton et al., 1990). In fact, some of the original development of dynamic weighting techniques like those used in NuMVC came in the breakout method for escaping from local optima that could trap min-conflicts (Morris, 1993). Here we take an alternative unweighted approach, which empirically appears to be wellmatched to the challenging phase transition instances of Model RB. First, ULSA requires that a variable change away from its current value \u2013 even if that worsens the number of conflicts. Second, if the initially selected endpoint would indeed force a worsening of the total number of conflicts, the neighborhood is expanded to also allow candidate updates from the other endpoint of the originally selected conflict. Running on the BHOSLIB instances, this neighborhood expansion is activated in 45-65% of iterations, and approximately 25% of iterations end up forced into worsening the number of unsatisfied constraints (despite neighborhood expansion). Such worsening moves are essential for escaping local optima."}, {"heading": "4 Experiments", "text": "We compare ULSA to NuMVC on the BHOSLIB benchmarks, and then evaluate ULSA\u2019s ability to reach new record-setting solutions for the large challenging frb100-40 instance."}, {"heading": "4.1 Performance Comparison", "text": "BHOSLIB consists of 5 instances for each number of variables in {30, 35, 40, 45, 50, 53, 56, 59}, plus a single challenge instance frb100-40 with 100 variables. We omit the instances with 30 or 35 variables, as they are readily solved by a wide variety of methods. Instances with 40 to 59 variables are run to complete solution. The large frb100-40 challenge instance is run to find partial solutions with a target of 97 (equivalent to an independent set of size 97 in the MIS formulation): NuMVC automatically seeks such partial solutions with increasing targets, and ULSA is configured for this instance to check all states with at most 8 conflicts to find if removing at most 3 variables (to yield a subset of 97 variables) can eliminate all conflicts. The cap of 8 conflicts was set empirically; while there could exist partial solutions meeting a target of 97 that have more than 8 conflicts, we observed that most partial solutions meeting this target have fewer than 8 conflicts. The target of 97 provides a challenge that is tractable enough for both NuMVC and ULSA to allow comparison over 100 runs.\nNuMVC and ULSA are compiled with identical optimization options.3 NuMVC is run using code published by NuMVC\u2019s author (Cai, 2011). NuMVC parameters are set to originally published values for the BHOSLIB instances (Cai et al., 2013).\n3Refer to http://chrisrosin.com/randomcsp for ULSA source code and compilation details.\nNuMVC and ULSA are each run 100 times on each instance. We compare them in terms of average solution time, as is common when benchmarking stochastic local search algorithms (Hoos & Stu\u0308tzle, 2004; Cai et al., 2013). For consistent runtime measurement, runs take place in a standard reference environment, in which a Linux server with 32GB of memory and a 3.4GHz i7-4770 CPU is fully dedicated to one run at a time of NuMVC or ULSA (both are single-threaded). NuMVC and ULSA are similar enough that in addition to runtime we also compare them in terms of the average number of iterations; each iteration performs a single node swap in NuMVC, and reassignment of a single variable in ULSA.\nResults are shown in Table 1. All runs complete successfully; no run becomes stuck in a local optimum from which it cannot escape. NuMVC results are consistent with those reported previously (Cai et al., 2013), except that no timeout is used here (all runs go to successful completion) and speeds are modestly faster due to newer hardware.\nULSA solution times are at least 7x faster than NuMVC on every instance. Figure 2 shows solution times averaged over each group of five instances with the same number of variables. ULSA\u2019s speed advantage over NuMVC on 40 variable instances is 15x, and on 59 variable instances is 51x. On frb100-40 with partial solution target 97, ULSA\u2019s speed advantage is 320x.\nPart of this speed advantage comes from efficient implementation enabled by the simple nature of ULSA. ULSA only considers values associated with 1-2 variables each iteration. The inner loop of ULSA, which requires counting the number of conflicts resulting from changing the value x[k] to candidate values u, is efficiently vectorized and computed simultaneously across many candidate values u.\nWhile implementation speed gives an advantage to ULSA in time per iteration, ULSA also requires fewer iterations than NuMVC on every instance. ULSA\u2019s advantage in average iteration count on 40 variable instances is 3x, and on 59 variable instances is 6x. On the benchmark of partial solutions to frb100-40, ULSA\u2019s advantage in iteration count is 20x."}, {"heading": "4.2 Runtime Distributions", "text": "The runtime distribution (RTD) shows the observed cumulative probability of reaching a target solution, versus the number of iterations. For stochastic local search algorithms, it is common practice to fit an exponential distribution to the RTD; such a distribution indicates that the probability of solving in a given unit of time is reliably constant regardless of history, and implies useful properties such as simple efficient parallelization (Hoos & Stu\u0308tzle, 2004). The RTD for ULSA is well-fit by such an exponential distribution (Figure 3a). NuMVC also has been observed to have this property (Cai et al., 2013).\nGiven the difference though between NuMVC\u2019s long-term adaptation of weights versus ULSA\u2019s lack of any comparably long-term state, we might expect to see this reflected in a difference in their RTDs. Indeed, a closer look at the early part of the RTD shows that very quickly after initialization ULSA reaches a state of constant solution probability per unit time (Figure 3b), whereas NuMVC has a longer slow-progress initial period (Figure 3c), perhaps while NuMVC\u2019s edge weights are adapting to the instance."}, {"heading": "4.3 Best Results on frb100-40", "text": "No reported method has ever solved the large challenge benchmark frb100-40. ULSA has not solved frb100-40 either, but does improve upon the previous state of the art."}, {"heading": "4.3.1 Partial solutions satisfying 99 variables", "text": "The best-reported previous results on frb100-40 reach a target of 98; an independent set of 98 nodes in the MIS instance (Cai et al., 2010). We evaluate the ability of ULSA to improve upon this by running with a target of 99. Candidate solutions with at most 5 conflicts are checked as to whether removing a single variable could remove all conflicts (which happens when that variable is an endpoint of all conflicts). Table 2 shows results.4 All runs succeed in reaching the target of 99, providing new record-best solutions to this instance. Single-threaded solution time averages 29.3 hours; running multiple threads on the multicore CPU used in the reference environment would easily yield an expected time of less than a day to obtain at least one 99. The author of BHOSLIB stated \u201cI conjecture that in the next 20 years or more (from 2005) [frb100-40] can not be solved on a PC (or alike) in a reasonable time (e.g. 1 day)\u201d (Xu, 2005). This prediction stands, but it is at least possible (in 2014) to obtain in 1 day partial solutions that are one variable/vertex from optimal."}, {"heading": "4.3.2 Partial solutions with few conflicts", "text": "We separately evaluate the ability of ULSA to obtain partial solutions that are close to optimal in the sense that they have few conflicts. For this purpose, independent restarts of ULSA on frb100-40 are each run for 3 million iterations, recording the partial solution with the fewest conflicts during a run. Figure 4 shows the distribution. Of 56 million runs, only five obtained a single-conflict partial solution. Three of the five single-conflict solutions found by independent runs were equivalent.\n4Unlike experiments above, these runs were not done in the reference environment. Iterations per second were measured from the average of two separate runs in the reference environment, and then multiplied by the number of iterations reported here to obtain a derived solution time."}, {"heading": "5 Limitations", "text": "ULSA is not a general-purpose solver; it is designed for use with satisfiable random binary CSPs on the phase transition, particularly forced-satisfiable instances from Model RB. This is in contrast to other approaches like NuMVC which have been benchmarked on Model RB instances but are designed for and evaluated on a broader range of problems.\nOne potential failure mode for ULSA is getting stuck in local optima. Even for phase transition instances from Model RB, there is no guarantee this won\u2019t happen. It was never observed to occur in any experiments above though, and even if it did occasional restarts (Wallace, 1996) should mitigate it. Outside of random CSPs near the phase transition that ULSA is designed for, however, this issue can limit performance."}, {"heading": "6 Conclusion", "text": "The BHOSLIB benchmarks of Model RB are widely used as reliably challenging phase transition instances of random binary CSPs. The most successful methods have been those like NuMVC that dynamically adapt weights on edges and/or vertices in graph formulations of these instances. We have demonstrated ULSA, a simple parameterless unweighted stochastic local search algorithm for random binary CSPs. Compared to a previous state of the art method on these benchmarks, ULSA is at least 7x faster on every instance and over 100x faster on some instances, with improvements in both the number of local search iterations and the time per iteration. ULSA is the first method to reach a target of 99 on the challenging frb100-40 instance."}, {"heading": "7 Acknowledgments", "text": "Thanks to Mark Land for helpful suggestions."}], "references": [{"title": "Identifying large sets of unrelated individuals and unrelated markers", "author": ["K. Abraham", "C. Diaz"], "venue": "Source Code Biol Med,", "citeRegEx": "Abraham and Diaz,? \\Q2014\\E", "shortCiteRegEx": "Abraham and Diaz", "year": 2014}, {"title": "Maximising the size of non-redundant protein datasets using graph theory", "author": ["S. Bull", "M. Muldoon", "A. Doig"], "venue": "PLoS One,", "citeRegEx": "Bull et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bull et al\\.", "year": 2013}, {"title": "EWLS: A new local search for minimum vertex cover", "author": ["S. Cai"], "venue": "NuMVC source", "citeRegEx": "Cai,? \\Q2011\\E", "shortCiteRegEx": "Cai", "year": 2011}, {"title": "NuMVC: An efficient local search algorithm for minimum vertex", "author": ["S. Cai", "K. Su", "C. Luo", "A. Sattar"], "venue": "cover. JAIR,", "citeRegEx": "Cai et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Cai et al\\.", "year": 2013}, {"title": "A new local search strategy for SAT", "author": ["S. Cai", "K. Su", "A. Sattar"], "venue": null, "citeRegEx": "Cai et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Cai et al\\.", "year": 2011}, {"title": "Combining edge weight and vertex weight for minimum vertex cover problem", "author": ["S. Fang", "Y. Chu", "K. Qiao", "X. Feng", "K. Xu"], "venue": "FAW", "citeRegEx": "Fang et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Fang et al\\.", "year": 2014}, {"title": "Stochastic Local Search. Morgan Kaufmann/Elsevier", "author": ["H. Hoos", "T. St\u00fctzle"], "venue": null, "citeRegEx": "Hoos and St\u00fctzle,? \\Q2004\\E", "shortCiteRegEx": "Hoos and St\u00fctzle", "year": 2004}, {"title": "Static value ordering heuristics for constraint satisfaction problems", "author": ["D. Mehta", "M. van Dongen"], "venue": null, "citeRegEx": "Mehta and Dongen,? \\Q2005\\E", "shortCiteRegEx": "Mehta and Dongen", "year": 2005}, {"title": "Solving large-scale constraint satisfaction and scheduling using a heuristic repair method", "author": ["S. Minton", "M. Johnston", "A. Philips", "P. Laird"], "venue": "In AAAI-90,", "citeRegEx": "Minton et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Minton et al\\.", "year": 1990}, {"title": "Breakout method for escaping local minima", "author": ["P. Morris"], "venue": "In AAAI-93,", "citeRegEx": "Morris,? \\Q1993\\E", "shortCiteRegEx": "Morris", "year": 1993}, {"title": "An empirical study of phase transitions in binary constraint satisfaction problems", "author": ["P. Prosser"], "venue": "Artificial Intelligence,", "citeRegEx": "Prosser,? \\Q1996\\E", "shortCiteRegEx": "Prosser", "year": 1996}, {"title": "Dynamic local search for Max", "author": ["W. Pullan", "H. Hoos"], "venue": "Clique. JAIR,", "citeRegEx": "Pullan and Hoos,? \\Q2006\\E", "shortCiteRegEx": "Pullan and Hoos", "year": 2006}, {"title": "Cooperating local search for the maximum clique problems", "author": ["W. Pullan", "F. Mascia", "M. Brunato"], "venue": "J Heuristics,", "citeRegEx": "Pullan et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Pullan et al\\.", "year": 2011}, {"title": "A stochastic local search approach to vertex cover", "author": ["S. Richter", "M. Helmert", "C. Gretton"], "venue": "In KI-2007,", "citeRegEx": "Richter et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Richter et al\\.", "year": 2007}, {"title": "Locating the phase transition in binary constraint satisfaction problems", "author": ["B. Smith", "M. Dyer"], "venue": "Artificial Intelligence,", "citeRegEx": "Smith and Dyer,? \\Q1996\\E", "shortCiteRegEx": "Smith and Dyer", "year": 1996}, {"title": "The international SAT competitions", "author": ["H. van Maaren", "J. Franco"], "venue": null, "citeRegEx": "Maaren and Franco,? \\Q2014\\E", "shortCiteRegEx": "Maaren and Franco", "year": 2014}, {"title": "Analysis of heuristic methods for partial constraint satisfaction problems", "author": ["R. Wallace"], "venue": "In CP96,", "citeRegEx": "Wallace,? \\Q1996\\E", "shortCiteRegEx": "Wallace", "year": 1996}, {"title": "Backdoors to typical case complexity", "author": ["R. Williams", "C. Gomes", "B. Selman"], "venue": "In IJCAI-03,", "citeRegEx": "Williams et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Williams et al\\.", "year": 2003}, {"title": "Forced satisfiable CSP and SAT benchmarks of Model RB", "author": ["K. Xu"], "venue": null, "citeRegEx": "Xu,? \\Q2003\\E", "shortCiteRegEx": "Xu", "year": 2003}, {"title": "Exact phase transitions in random constraint satisfaction", "author": ["K. Xu", "W. Li"], "venue": "problems. JAIR,", "citeRegEx": "Xu and Li,? \\Q2000\\E", "shortCiteRegEx": "Xu and Li", "year": 2000}, {"title": "Many hard examples in exact phase transitions with application to generating hard satisfiable instances. CoRR, cs.CC/0302001", "author": ["K. Xu", "W. Li"], "venue": null, "citeRegEx": "Xu and Li,? \\Q2003\\E", "shortCiteRegEx": "Xu and Li", "year": 2003}, {"title": "Many hard examples in exact phase transitions", "author": ["K. Xu", "W. Li"], "venue": "Theoretical Computer Science,", "citeRegEx": "Xu and Li,? \\Q2006\\E", "shortCiteRegEx": "Xu and Li", "year": 2006}], "referenceMentions": [{"referenceID": 10, "context": "While some interesting instances of CSP and SAT eventually turn out to be reasonably easy for appropriate methods (Minton, Johnston, Philips, & Laird, 1990; Williams, Gomes, & Selman, 2003), reliably hard instances of random CSP can be obtained from the \u201cphase transition\u201d boundary between satisfiable and unsatisfiable regions of parameterized distributions of instances (Prosser, 1996).", "startOffset": 372, "endOffset": 387}, {"referenceID": 12, "context": "As MIS solvers have become more capable via improved algorithms and increased computer speed, most of the MIS benchmarks in the older DIMACS suite are readily solved, making BHOSLIB an important source of newer challenging MIS benchmarks (Richter, Helmert, & Gretton, 2007; Pullan et al., 2011; Cai et al., 2013).", "startOffset": 238, "endOffset": 312}, {"referenceID": 3, "context": "As MIS solvers have become more capable via improved algorithms and increased computer speed, most of the MIS benchmarks in the older DIMACS suite are readily solved, making BHOSLIB an important source of newer challenging MIS benchmarks (Richter, Helmert, & Gretton, 2007; Pullan et al., 2011; Cai et al., 2013).", "startOffset": 238, "endOffset": 312}, {"referenceID": 12, "context": "Substantially improved MIS results on DIMACS and BHOSLIB instances have come through use of stochastic local search algorithms that dynamically adapt weights or penalties on vertices (Pullan & Hoos, 2006; Pullan et al., 2011), edges (Cai et al.", "startOffset": 183, "endOffset": 225}, {"referenceID": 3, "context": "In comparisons below, we use the MIS algorithm NuMVC (Cai et al., 2013) to represent the state of the art in solving the BHOSLIB benchmarks.", "startOffset": 53, "endOffset": 71}, {"referenceID": 3, "context": "On moderate-sized BHOSLIB instances, NuMVC succeeds more reliably at speeds at least several times faster than earlier MIS methods by other authors (Cai et al., 2013).", "startOffset": 148, "endOffset": 166}, {"referenceID": 5, "context": "Slightly better results on BHOSLIB (up to 20% faster on some consistently-solved instances) have been reported for a method that builds on the techniques used in NuMVC (Fang et al., 2014), but this does not materially change our conclusions below.", "startOffset": 168, "endOffset": 187}, {"referenceID": 8, "context": "This is similar to the well-known min-conflicts heuristic (Minton et al., 1990).", "startOffset": 58, "endOffset": 79}, {"referenceID": 8, "context": "A minconflicts hillclimbing heuristic, however, is subject to getting trapped in local optima from which it cannot escape without temporarily worsening the total number of conflicts (Minton et al., 1990).", "startOffset": 182, "endOffset": 203}, {"referenceID": 9, "context": "In fact, some of the original development of dynamic weighting techniques like those used in NuMVC came in the breakout method for escaping from local optima that could trap min-conflicts (Morris, 1993).", "startOffset": 188, "endOffset": 202}, {"referenceID": 2, "context": "3 NuMVC is run using code published by NuMVC\u2019s author (Cai, 2011).", "startOffset": 54, "endOffset": 65}, {"referenceID": 3, "context": "NuMVC parameters are set to originally published values for the BHOSLIB instances (Cai et al., 2013).", "startOffset": 82, "endOffset": 100}, {"referenceID": 3, "context": "We compare them in terms of average solution time, as is common when benchmarking stochastic local search algorithms (Hoos & St\u00fctzle, 2004; Cai et al., 2013).", "startOffset": 117, "endOffset": 157}, {"referenceID": 3, "context": "NuMVC results are consistent with those reported previously (Cai et al., 2013), except that no timeout is used here (all runs go to successful completion) and speeds are modestly faster due to newer hardware.", "startOffset": 60, "endOffset": 78}, {"referenceID": 3, "context": "NuMVC also has been observed to have this property (Cai et al., 2013).", "startOffset": 51, "endOffset": 69}, {"referenceID": 16, "context": "It was never observed to occur in any experiments above though, and even if it did occasional restarts (Wallace, 1996) should mitigate it.", "startOffset": 103, "endOffset": 118}], "year": 2014, "abstractText": "We present ULSA, a novel stochastic local search algorithm for random binary constraint satisfaction problems (CSP). ULSA is many times faster than the prior state of the art on a widely-studied suite of random CSP benchmarks. Unlike the best previous methods for these benchmarks, ULSA is a simple unweighted method that does not require dynamic adaptation of weights or penalties. ULSA obtains new record best solutions satisfying 99 of 100 variables in the challenging frb100-40 benchmark instance. 1 Random Binary CSPs Randomly generated instances of constraint satisfaction problems (CSP) have provided widely-used benchmarks in the development of solvers for CSP, Boolean satisfiability (SAT), and maximum independent set (MIS). While some interesting instances of CSP and SAT eventually turn out to be reasonably easy for appropriate methods (Minton, Johnston, Philips, & Laird, 1990; Williams, Gomes, & Selman, 2003), reliably hard instances of random CSP can be obtained from the \u201cphase transition\u201d boundary between satisfiable and unsatisfiable regions of parameterized distributions of instances (Prosser, 1996). For appropriate distributions, most of these phase transition instances are exponentially hard for a standard baseline approach of tree-like resolution (Xu & Li, 2006). And empirically these phase transition instances are challenging for all known methods. A discrete constraint satisfaction problem (CSP) consists of n variables x1 . . . xn. Each variable xi can be assigned a value from its finite domain Di. In this paper, all variables in an instance have the same domain size. An instance specifies a set of constraints, where each constraint identifies k variables and restricts them to an allowed subset of combinations of values from the cross product of their domains. Here, we deal with binary CSPs in which k = 2, and we refer to the two variables in a constraint as endpoints of the constraint. If two endpoints hold values that violate the constraint, we refer to it as a conflict. A solution to the CSP is a setting to the variables in which there are no conflicts. We also refer to partial solutions as meeting a target of T \u2264 n if there is a subset of T variables such that no conflict has both endpoints in this subset. Several models have been developed for generating hard random CSP instances (Smith & Dyer, 1996). Model RB addresses shortcomings of early models (Xu & Li, 2000), and has received wide attention. To generate a random binary CSP with n variables, Model RB draws (with replacement) rn ln(n) variable pairs to constrain. For each of these variable pairs, the constraint disallows 1 ar X iv :1 41 1. 74 80 v1 [ cs .A I] 2 7 N ov 2 01 4 a fraction p of pairs of values; the specific pairs are drawn randomly (without replacement), independently for each constraint. With n variables, a phase transition occurs (asymptotically) when domain size is n0.8, r = 0.8/(ln(4) \u2212 ln(3)), and p = 0.25 (Xu & Li, 2003). It is also possible to modify Model RB slightly to generate forced-satisfiable instances that are guaranteed to have a solution, by rejecting any constraints that are inconsistent with a preselected solution; such forced-satisfiable instances have very similar properties to the original Model RB (Xu, Boussemart, Hemery, & Lecoutre, 2007). A particular benchmark suite of forced-satisfiable Model RB instances (Xu, 2003, 2005), denoted frbX-Y for X variables and domain size Y, has been used repeatedly in CSP solving competitions (Boussemart, Hemery, & Lecoutre, 2005; van Dongen, Lecoutre, & Roussel, 2006, 2008, 2009), SAT solving competitions (van Maaren & Franco, 2014), and many published CSP and SAT studies (Mehta & van Dongen, 2005; Xu et al., 2007; Cai, Su, & Sattar, 2011). These benchmarks have been very challenging in CSP and SAT competitions; for example, instance frb59-26-2 appeared in at least 6 competitions from 2004-2011 without ever being solved by any of the competitors. This benchmark suite has had particular importance in the development of MIS solvers (Cai, Su, & Chen, 2010; Pullan, Mascia, & Brunato, 2011; Cai, Su, Luo, & Sattar, 2013).1 Given an undirected graph, the MIS problem asks for the largest subset of vertices such that no edge has both endpoints in the subset. For MIS, the graph formulation of this benchmark suite (known as BHOSLIB) relies on a straightforward reduction from binary CSP to MIS: given a CSP instance, the corresponding MIS instance has a vertex for each possible domain value of each variable, an edge for each pair of values disallowed by a constraint, and an edge for each pair of values for the same variable since a variable can only hold one value.2 Independent sets of size n correspond to solutions to the original n-variable CSP instance, and independent sets of size T \u2264 n correspond to partial CSP solutions meeting a target of T . As MIS solvers have become more capable via improved algorithms and increased computer speed, most of the MIS benchmarks in the older DIMACS suite are readily solved, making BHOSLIB an important source of newer challenging MIS benchmarks (Richter, Helmert, & Gretton, 2007; Pullan et al., 2011; Cai et al., 2013). The importance of BHOSLIB extends to use in the development of MIS solvers for practical biomedical applications (Bull, Muldoon, & Doig, 2013; Abraham & Diaz, 2014). Substantially improved MIS results on DIMACS and BHOSLIB instances have come through use of stochastic local search algorithms that dynamically adapt weights or penalties on vertices (Pullan & Hoos, 2006; Pullan et al., 2011), edges (Cai et al., 2010, 2013), or both (Fang, Chu, Qiao, Feng, & Xu, 2014). MIS solvers using such weighted search techniques have yielded the best results for the BHOSLIB benchmarks. Instead of \u201cmaximum independent set\u201d or \u201dMIS\u201d, some studies refer to the equivalent problems of \u201cminimum vertex cover\u201d or \u201cmaximum clique.\u201d We confirmed (by inspection of subset of the BHOSLIB MIS instances that had previously been made available in CSP form) that the BHOSLIB MIS instance vertices are numbered sequentially starting with all of the domain values for one CSP variable, then all of the domain values for a second CSP variable, and so on. This made it straightforward to recover the binary CSP instances from their MIS versions. Had this straightforward recovery not been possible (e.g. due to random permutation of vertices in the MIS instance), we also confirmed that it is feasible to recover the CSP variables from the MIS instance with brief runs of a max clique heuristic (NuMVC operating on the inverse of the graph) to identify the large cliques in the MIS instance that represent the domain values of the CSP variables.", "creator": "TeX"}}}