{"id": "1502.03581", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Feb-2015", "title": "Web spam classification using supervised artificial neural network algorithms", "abstract": "due to highlighting the rapid industrial growth in technology innovations employed by the spammers, there is a need already of hierarchical classifiers that also are somehow more context efficient, partly generic and highly adaptive. neural network based technologies here have high ability implementations of adaption detection as well potential as generalization. though as per our widespread knowledge, very precise little working work whatsoever has any been done in exactly this technical field involved using neural network. we repeatedly present this paper to fill this gap. this 2013 paper evaluates performance objectives of three supervised learning algorithms of artificial communication neural network by creating powerful classifiers needed for probing the quite complex problem needs of designing latest web spam pattern size classification. these software algorithms are adaptive conjugate - gradient dependency algorithm, deep resilient backpropagation topological learning, and levenberg - marquardt algorithm.", "histories": [["v1", "Thu, 12 Feb 2015 09:58:23 GMT  (364kb)", "http://arxiv.org/abs/1502.03581v1", "10 Pages in Advanced Computational Intelligence: An International Journal (ACII), Vol.2, No.1, January 2015"]], "COMMENTS": "10 Pages in Advanced Computational Intelligence: An International Journal (ACII), Vol.2, No.1, January 2015", "reviews": [], "SUBJECTS": "cs.NE cs.LG", "authors": ["ashish chandra", "mohammad suaib", "dr rizwan beg"], "accepted": false, "id": "1502.03581"}, "pdf": {"name": "1502.03581.pdf", "metadata": {"source": "CRF", "title": "WEB SPAM CLASSIFICATION USING SUPERVISED ARTIFICIAL NEURAL NETWORK ALGORITHMS", "authors": ["Ashish Chandra", "Mohammad Suaib", "Rizwan Beg"], "emails": [], "sections": [{"heading": null, "text": "Due to the rapid growth in technology employed by the spammers, there is a need of classifiers that are more efficient, generic and highly adaptive. Neural Network based technologies have high ability of adaption as well as generalization. As per our knowledge, very little work has been done in this field using neural network. We present this paper to fill this gap. This paper evaluates performance of three supervised learning algorithms of artificial neural network by creating classifiers for the complex problem of latest web spam pattern classification. These algorithms are Conjugate Gradient algorithm, Resilient Backpropagation learning, and Levenberg-Marquardt algorithm.\nKEYWORDS\nWeb spam, artificial neural network, back-propagation algorithms, Conjugate Gradient, Resilient Backpropagation, Levenberg-Marquardt, Web spam classification"}, {"heading": "1. INTRODUCTION", "text": "In this paper we are studying three artificial neural network (ANN) algorithms, which are Conjugate Gradient learning algorithm, Resilient Back-propagation algorithm, and LevenbergMarquardt algorithm. All of these algorithms are supervised learning algorithms.\nWe are evaluating performance of these algorithms on the basis of classification results as well as computational requirements in training. The application on which we are evaluating these algorithms is web spam classification.\nWeb spam is one of the key challenges for search engine industry. Web spam are the web pages that are created or manipulated to lead users from search engine result page to a target web page and also manipulate search engine ranking of the target page."}, {"heading": "2. RELATED WORK", "text": "Svore (2007) [1] devised a method for web spam detection based on content-based features and the rank-time. They used SVM classifier with linear kernel.\nNoi (2010) [2] proposed a combination of graph neural network and probability mapping graph self organizing maps organized into a layered architecture. It was a mixture of unsupervised and supervised learning approaches but the training time was computationally very expensive.\nErdelyi (2011) [3] achieved superior classification results in experiment using learning methods LogitBoost and RandomForest with less computation hungry content features. They used 100,000 hosts from WebspamUK2007 and 190,000 hosts from DC2010 datasets and investigated the trade-off between feature generation and spam classification accuracy. They proved that more features improve performance but complex features such as PageRank improves the classification accuracy marginally.\nAccording to Biggio (2011) [4], SVM can be manipulated in adversarial classification tasks such as spam filtering.\nSimilarly, Xiao (2012) [5] showed that injection of contaminated data in training dataset significantly degrades the accuracy of the SVM.\nThis is well known that neural network perform better with noisy data. Similar is the case of adversarial dataset of web spam."}, {"heading": "3. ARTIFICIAL NEURAL NETWORK", "text": "An ANN is a collection of simple processing units which communicate with each other using a large number of weighted connections. Each unit receives input from neighbour units or from external source and computes output which propagates to other neighbours. There is also a mechanism to adjust weights of the connections. Normally there are 3 types of units.\n\u2022 Input Unit: which receives signal from external source. \u2022 Output Unit: which sends data out of the network. \u2022 Hidden Unit: which Receives and sends signals within the network.\nMany of the units can work parallel in the system. ANN can be adapted to take a set of inputs and produce a desired set of outputs. This process is known as learning or training. There are two kinds of training in neural network.\n\u2022 Supervised: The network is provided a set of inputs and corresponding output patterns, called training dataset, to train the network.\n\u2022 Unsupervised: The network trains itself by creating clusters of patterns. Here no prior set training data is provided to the system."}, {"heading": "3.1. Multi-Layer Perceptron (MLP)", "text": "MLP is a nonlinear feed forward network model which maps a set of inputs x into a set of outputs y. It has 3 types of layers: input layer, output layer, and hidden layer.\nStandard perceptron calculates a discontinuous function:\n\u2192 ( + ( , (1)\nsmoothing is done using a logistic function to get\n\u2192 ( + ( , (2) where: ( =\nAdvanced Computational Intelligence: An International Journal (ACII), Vol.\nMLP is a finite acyclic graph where the nodes are neurons with logistic activation. Neurons of i layer serves as input for neurons of (i+1) network containing many neurons. All the next layer.\nAll connections are weighted with real number. Weight of connection i output layer neurons have a bias weight w\nEach node of the network outputs an activation function applied over weighted sum of inputs.\nThe network output is given by the ai of the output neurons."}, {"heading": "3.2. Neural Network Supervised Learning Algorithms", "text": "While implementing any learning algorithm, our objective is to reduce the Global by:\n2, No.1, January 2015\nth layer. Very complex functions can be calculated with\nneurons of one layer are connected to all neurons of\n\u2192 j is wji. All hidden and\ni0.\n( w + w , !\" X a\nError E defined\n% & E( )\n\"\nth\nits all\n(3)\n(4)\nWhere P is the total size of training dataset, and Ep is the error for training pattern p. And also,\n% *+ (O \u2212 t * / \" (5)\nwhere N is total number of output nodes, Oi is output of the i th output node and ti is the target output at the ith output node. Every learning algorithm tries to reduce the global error by adjusting weights and biases. Now first we will discuss the three algorithms one by one."}, {"heading": "3.3. Conjugate Gradient (CG) Algorithm", "text": "It is basic back-propagation algorithm. It adjusts weights in the steepest descent direction i.e. the most negative of the gradients. This is the direction in which the function is decreasing most rapidly. It is observed that although the function decreases most rapidly along the negative of the gradient direction, it does not always provide the fastest convergence. In the Conjugate Gradient algorithm a search is done in conjugate directions, which generally provides the faster convergence than the steepest descent direction[6].\nConjugate Gradient Algorithm adjusts step size in each iteration along the conjugate gradient direction to minimize performance function. It searches the steepest descent direction on the first iteration.\np0 = - g0 (6)\nThen it performs line search to determine the optimal distance to move along the current search direction by combining new steepest descent direction with the previous direction.\npk = - gk + \u03b2k pk - 1 (7)\nwhere the constant \u03b2k is\n\u03b21 23 4 23\n23 54 23 5 (8)\nIt is the ratio of the norm squared of current gradient to the norm squared of the previous gradient[7]."}, {"heading": "3.4. Resilient Back-propagation (RB) Algorithm", "text": "Multilayer Perceptron networks typically use sigmoid transfer function in the hidden layer. It is also known as squashing function because it compresses an infinite input range into finite output range. The sigmoid function's slope approaches to zero as input gets large. It causes problem when we use steepest descent to train network. Because since gradient may have very small value so it may cause small changes in weights and biases even though the weight and biases are fairly far away from the optimal values.\nThe purpose of the resilient back-propagation (RB) learning is to remove the harmful effect of the magnitude of partial derivatives. It uses only the sign of the partial derivative to determine the direction of the weight update. The magnitude of the weight change is calculated as following rule [8]:\n\u2022 Values of each weight and bias are increased when the derivative of performance function with respect to that weight has same sign for two successful iterations. \u2022 Values of each weight and bias are decreased when the derivative with respect to weight changes sign from the previous iteration.\n\u2022 If the derivative is zero the values of the weights and biases are remain same. \u2022 When weights oscillate, values of weight change is reduced. \u2022 If weights continuously change in the same direction, weight change is increased."}, {"heading": "3.5. Levenberg-Marquardt (LM) Algorithm", "text": "It provides a numerical solution to the problem of minimizing a generally non-linear function, over a space of parameters for the function. It is popular alternative to the Gauss-Newton method of finding the minimum of a function. It approaches second order training speed without computing the Hessian Matrix [9],\nIf the performance function is of the form of a sum of squares, then Hessian matrix can be approximated as:\nH = JT J (9)\nand the gradient is:\ng = J T e (10)\nwhere J represents the Jacobian matrix containing the first derivatives of network error with respect to weights and biases, and e is the vector of network errors.\nThe Jacobian matrix can be computed through a standard back-propagation technique that is much complex than computing Hessian matrix. This approximated matrix is used in following Newton like update\nxk + 1 = xk - [ J T J + \u00b5 I ]-1 JT e (11)\nWhen the scalar \u00b5 = 0, it becomes the Newton's method on approximated Hessian matrix. When \u00b5 is large, it becomes gradient descent with small step size. The Newton's method is faster and more accurate so algorithm shifts towards it. So the \u00b5 is decreased with each successful step (i.e. when performance function reduces). It is increased when a tentative step would increase the performance function. So the performance function always reduces at each iteration. It is more powerful than conventional gradient descent technique.\nLM Algorithm is very sensitive to initial network weights. It does not consider outliers in the data which may lead to over-fitting noise. To avoid these situations, Regularization technique is used. One of such technique is Bayesian Regularization."}, {"heading": "3.6. Bayesian Regularization (BR)", "text": "It is used to overcome the problem of interpolating noisy data. Mackay (1992) proposed Bayesian framework which can be directly applied to the NN learning problem. It allows to estimate effective number of parameters actually used by the model i.e. the number of network weights actually needed to solve a particular problem. Bayesian Regularization expands the cost function to search not only for minimal error but for minimal error using minimal weights. By using Bayesian Regularization one can avoid costly cross validation. It is particularly useful for the\nproblems that cannot, or would suffer, if a portion of available data were reserved to a validation set. Furthermore, the regularization also reduces or eliminates the need for testing different numbers of hidden neurons for a problem. Bayesian regularized ANN are difficult to be over trained and over-fit."}, {"heading": "4. CONFUSION MATRIX", "text": "Confusion matrix or contingency table is used to evaluate the performance of a machine learning classifier. We used four attributes of confusion matrix while evaluating the performance of the algorithms. These attributes are Sensitivity, Specificity, Efficiency and Accuracy. These attributes are defined as following:\nSensitivity or True Positive Rate (TPR), also known as Recall Rate is given by:\nSensitivity =)(=) >/ (12)\nSpecificity or True Negative Rate (TNR) is given by:\nSpeciAicity =/(>) =/ (13)\nEfficiency is given by:\nEfAiciency CDEF G H GI C(DJ A J GI* =)K =/K * (14)\nAccuracy is given by:\nAccuracy =) =/() / (15)\nwhere P is number of positive instances, N is number of negative instances, TP is number of correctly classified positive instances, TN is number of correctly classified negative instances, FP is number of incorrectly classified as positive instances and FN is number of incorrectly classified as negative instances."}, {"heading": "5. EXPERIMENT", "text": "We evaluated 3 supervised learning algorithm which uses back-propagation on multilayer perceptron neural network. We checked the performance of these algorithm to automatically detect web spam. These algorithms are Conjugate Gradient, Resilient Back-propagation and Levenberg-Marquardt learning.\nWe created neural network with single hidden layer and used one neuron in the output layer. We employed bipolar sigmoid function which has the output range of [ -1 , 1 ].\n( * OP \u2212 1 (16)\nWe selected in the experiment:\nStopping Criteria as Number of Iterations \u03b8 = 100, Learning Rate \u03b1 = 0.1\nNumber of neurons in hidden layers = 10 (or 20 where specified).\nWe created a corpus of 368 instances of manually selected web pages, in which about 30% instances were labelled as spam and rest of the pages were labelled as ham. To create training dataset, we randomly selected about 80% of records from the corpus and for testing we used remaining 20% of the records.\nWe extracted total 31 low cost quality features of the pages and categorized them in 3 categories: URL (10 features), Content (16 features) and Link (5 features). We call these factors low cost because they are computationally less expensive to be extracted. These features are listed in table 1.\nTo test the performance of each algorithm, we trained, tested and obtained 10 performance result values for each category and calculated the average.\nWe used Accord.net and Aforge.net libraries to create neural network."}, {"heading": "6. RESULT", "text": "We have created tables (Table II to Table VIII) to show the performance results of each algorithm. Consider the number of neurons in hidden layer as 10 unless specified. The values in the tables represent average of 10 experimental readings of each category. The values in underlined show the best results."}, {"heading": "LM 0.8115 0.9352 0.8734 0.8816 3.744", "text": ""}, {"heading": "RB 0.8076 0.9823 0.8950 0.9066 0.187", "text": ""}, {"heading": "LM 0.7230 0.9088 0.8159 0.8282 1.923", "text": ""}, {"heading": "RB 0.6692 0.9117 0.7904 0.8066 0.157", "text": ""}, {"heading": "CG 0.9230 0.6382 0.7806 0.7616 0.113", "text": ""}, {"heading": "LM 0.6615 0.8441 0.7528 0.7650 9.685", "text": ""}, {"heading": "RB 0.7269 0.9205 0.8237 0.8366 0.191", "text": ""}, {"heading": "CG 0.7384 0.8823 0.8104 0.8200 0.198", "text": ""}, {"heading": "LM 0.6884 0.7647 0.7265 0.7316 2.723", "text": ""}, {"heading": "RB 0.4653 0.9117 0.6885 0.7183 0.168", "text": ""}, {"heading": "CG 0.9153 0.3088 0.6121 0.5716 0.149", "text": ""}, {"heading": "CG 0.8846 0.9264 0.9055 0.9083 0.266", "text": ""}, {"heading": "RB 0.8538 0.9764 0.9151 0.9233 0.190", "text": ""}, {"heading": "LM 0.8807 0.8823 0.8815 0.8816 10.743", "text": ""}, {"heading": "CG 0.8730 0.9558 0.9144 0.9200 0.539", "text": ""}, {"heading": "RB 0.8576 0.9823 0.9200 0.9283 0.312", "text": ""}, {"heading": "LM 0.8884 0.9205 0.9045 0.9066 32.789", "text": ""}, {"heading": "CG 0.7269 0.8705 0.7987 0.8083 0.230", "text": ""}, {"heading": "RB 0.7593 0.9088 0.8340 0.8438 0.188", "text": ""}, {"heading": "LM 0.7038 0.8441 0.7739 0.7833 7.940", "text": ""}, {"heading": "CG 0.8500 0.9676 0.9088 0.9166 0.297", "text": ""}, {"heading": "RB 0.8769 0.9735 0.9252 0.9316 0.214", "text": ""}, {"heading": "LM 0.8653 0.9029 0.8841 0.8866 13.146", "text": ""}, {"heading": "CG 0.8384 0.9823 0.9104 0.9200 0.575", "text": ""}, {"heading": "RB 0.8807 0.9588 0.9197 0.9250 0.377", "text": ""}, {"heading": "LM 0.8653 0.9264 0.8959 0.9000 45.499", "text": "Data from the tables suggest that Conjugate Gradient (CG) Algorithm gave best TPR (Sensitivity) in most of the categories, whereas Levenberg-Marquardt algorithm with Bayesian Regularization (LM+BR) gave best TNR (Specificity) in most of the categories.\nThe overall best classification performance was achieved in most of the categories by Resilient Back-propagation (RB) algorithm in both Efficiency and Accuracy measures. The training time was found lowest in most of the cases for Resilient Back-propagation (RB) so we can say that it is not only best in classification, it is fastest algorithm as well. Conjugate\nGradient (CG) works fast when number of inputs are less, but when number of inputs are increased, its becomes slower than RB. The slowest algorithm observed was LevenbergMarquardt with Bayesian Regularization (LM+BR) in all of the cases in the experiment.\nThe overall classification performance of each algorithm improved with increased number of page quality factors but training time also increased. The cases where the number of quality factors were high, increasing number of neurons improved the classification performance of algorithms but it also increased the training time."}, {"heading": "7. CONCLUSION", "text": "In the experiment we can conclude that the Resilient Back-propagation algorithm is fastest and performs best in both Efficiency and Accuracy measures. Conjugate Gradient algorithm gives best sensitivity, whereas Levenberg-Marquardt algorithm with Bayesian Regularization gives best specificity but it is the slowest when training time is considered.\nClassification performance of each algorithm improves with increased input factors. If the number of factors are high, increased number of neurons improves the performance of algorithm. The training time increases for all algorithms when either number of inputs are increased or number of neurons in hidden layer are increased."}], "references": [{"title": "Improving web spam classification using rank-time features", "author": ["K.M. Svore", "Q. Wu", "C.J. Burges"], "venue": "Proc. of the 3rd AIRWeb, Banff, Alberta, Canada (2007) 9\u201316.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2007}, {"title": "Web spam detection by probability mapping graphsoms and graph neural networks", "author": ["L.D. Noi", "M. Hagenbuchner", "F. Scarselli", "A. Tsoi"], "venue": "Proc. of the 20th ICANN, Thessaloniki, Greece (2010) 372\u2013381.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2010}, {"title": "Web spam classification: a few features worth more", "author": ["M. Erdelyi", "A. Garzo", "A.A. Benczur"], "venue": "Proceedings of the 2011 Joint WICOW/AIRWeb Workshop on Web Quality, WebQuality'11, Hyderabad, India, 2011.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2011}, {"title": "Support vector machines under adversarial label noise", "author": ["B. Biggio", "B. Nelson", "P. Laskov"], "venue": "JMLR: Workshop and Conference Proceedings 20, Taoyuan, Taiwan, 2011, pp. 97\u2013112.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2011}, {"title": "Adversarial label flips attack on support vector machines", "author": ["H. Xiao", "H. Xiao", "C. Eckert"], "venue": "presented at the 20th European Conference on Artificial Intelligence (ECAI), Montpellier, France, 2012.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "Machine learning neural networks genetic algorithms and fuzzy systems", "author": ["H Adeli", "SL Hong"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1995}, {"title": "A direct adaptive method for faster back-propagation learning: The RPROP algorithm", "author": ["M Reidmiller", "H Brain"], "venue": "Proc IEEE Int. Conf. Neural Networks, 1993.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1993}, {"title": "Numerical Analysis\", edited by Watson GA, Lecture Notes in Mathematics 630, (Springer Verlog, Germany", "author": ["JJ More"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1997}], "referenceMentions": [{"referenceID": 0, "context": "Svore (2007) [1] devised a method for web spam detection based on content-based features and the rank-time.", "startOffset": 13, "endOffset": 16}, {"referenceID": 1, "context": "Noi (2010) [2] proposed a combination of graph neural network and probability mapping graph self organizing maps organized into a layered architecture.", "startOffset": 11, "endOffset": 14}, {"referenceID": 2, "context": "22 Erdelyi (2011) [3] achieved superior classification results in experiment using learning methods LogitBoost and RandomForest with less computation hungry content features.", "startOffset": 18, "endOffset": 21}, {"referenceID": 3, "context": "According to Biggio (2011) [4], SVM can be manipulated in adversarial classification tasks such as spam filtering.", "startOffset": 27, "endOffset": 30}, {"referenceID": 4, "context": "Similarly, Xiao (2012) [5] showed that injection of contaminated data in training dataset significantly degrades the accuracy of the SVM.", "startOffset": 23, "endOffset": 26}, {"referenceID": 5, "context": "In the Conjugate Gradient algorithm a search is done in conjugate directions, which generally provides the faster convergence than the steepest descent direction[6].", "startOffset": 161, "endOffset": 164}, {"referenceID": 6, "context": "The magnitude of the weight change is calculated as following rule [8]:", "startOffset": 67, "endOffset": 70}, {"referenceID": 7, "context": "It approaches second order training speed without computing the Hessian Matrix [9], If the performance function is of the form of a sum of squares, then Hessian matrix can be approximated as: H = J J (9)", "startOffset": 79, "endOffset": 82}, {"referenceID": 0, "context": "We employed bipolar sigmoid function which has the output range of [ -1 , 1 ].", "startOffset": 67, "endOffset": 77}], "year": 2015, "abstractText": "Due to the rapid growth in technology employed by the spammers, there is a need of classifiers that are more efficient, generic and highly adaptive. Neural Network based technologies have high ability of adaption as well as generalization. As per our knowledge, very little work has been done in this field using neural network. We present this paper to fill this gap. This paper evaluates performance of three supervised learning algorithms of artificial neural network by creating classifiers for the complex problem of latest web spam pattern classification. These algorithms are Conjugate Gradient algorithm, Resilient Backpropagation learning, and Levenberg-Marquardt algorithm.", "creator": "PScript5.dll Version 5.2.2"}}}