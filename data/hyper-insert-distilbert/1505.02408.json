{"id": "1505.02408", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-May-2015", "title": "DistMS: A Non-Portfolio Distributed Solver for Maximum Satisfiability", "abstract": "the internally most successful managerial parallel sat managers and maxsat function solvers commonly follow a portfolio reasoning approach, where having each thread concurrently applies a different algorithm ( or the closely same graph algorithm traditionally configured vertically differently ) according to solve through a given path problem another instance. the main logical goal of building a portfolio is wanting to further diversify only the search process slowly being carried right out by each thread. as soon as one thread succeeds finishes, hopefully the instance can be deemed positively solved. detailed in this paper currently we continuously present a new open source distributed regression solver option for maxsat solving manager that addresses two issues problems commonly found late in enterprise multicore autonomous parallel solvers, namely memory contention and scalability. preliminary approach results show confidence that our non - portfolio adaptive distributed maxsat solver greatly outperforms its sequential version. and is able to solve more instances as usually the number likelihood of processes increases.", "histories": [["v1", "Sun, 10 May 2015 16:55:42 GMT  (57kb,D)", "http://arxiv.org/abs/1505.02408v1", null]], "reviews": [], "SUBJECTS": "cs.LO cs.AI", "authors": ["miguel neves", "in\\^es lynce", "vasco manquinho"], "accepted": false, "id": "1505.02408"}, "pdf": {"name": "1505.02408.pdf", "metadata": {"source": "CRF", "title": "DistMS: A Non-Portfolio Distributed Solver for Maximum Satisfiability", "authors": ["Miguel Neves", "Vasco Manquinho"], "emails": ["neves@sat.inesc-id.pt", "ines@sat.inesc-id.pt", "vmm@sat.inesc-id.pt"], "sections": [{"heading": "1 Context and Motivation", "text": "The Maximum Satisfiability (MaxSAT) problem can be defined as an optimization version of the Propositional Satisfiability (SAT) problem. Given an (usually unsatisfiable) CNF formula \u03c6, the MaxSAT problem can be defined as finding an assignment to problem variables such that it minimizes the number of unsatisfied clauses in \u03c6. In partial MaxSAT, given a CNF formula \u03c6 = \u03c6S \u222a \u03c6H , the goal is to find an assignment such that it minimizes the number of unsatisfied soft clauses in \u03c6S while satisfying all hard clauses in \u03c6H . Although there are weighted variants of MaxSAT [7], in this paper we focus on partial MaxSAT.\nLet \u03c6R denote the relaxation of a partial MaxSAT formula \u03c6. In \u03c6R we associate a fresh relaxation variable rj with each soft clause \u03c9j in \u03c6S such that \u03c6R = \u03c6H \u222a {(\u03c9j \u2228 rj) : \u03c9j \u2208 \u03c6S}. Notice that finding an assignment to the variables in \u03c6R such that it minimizes the number of relaxation variables assigned value 1 while satisfying all clauses is equivalent to solving the partial MaxSAT formula \u03c6. Hence, a common approach for solving partial MaxSAT is to relax \u03c6 and iteratively call a SAT solver on \u03c6R with an additional constraint \u2211 rj \u2264 b encoded into CNF [4]. Initially, we can define b = |\u03c6S |. If a solution is found such that \u00b5 relaxation variables are assigned value 1, then b is updated to \u00b5\u2212 1. The algorithm ends when the formula becomes unsatisfiable and the optimal solution is the last one found with value \u00b5.\nThe described algorithm performs a linear search on the number of satisfiable soft clauses. More recently, several algorithms have been proposed that take advantage of the ability of SAT solvers to provide an unsatisfiable sub-formula [17].\nar X\niv :1\n50 5.\n02 40\n8v 1\n[ cs\n.L O\n] 1\n0 M\nay 2\nThese unsatisfiability-based algorithms have been shown very successful for solving industrial instances. We refer the reader to the literature for details [13].\nDue to the predominance of multicore architectures instead of higher frequency CPUs, recent work on MaxSAT solving has been deviating to the design of parallel solvers. The most successful parallel algorithms implement a portfolio of sequential solvers. The portfolio may include both different algorithms or the same algorithm with different configurations. In parallel solutions, all the cores of a typical computer access primary memory through the same BUS, and no two cores can use the BUS at the same time. Therefore, as the number of cores increases, so does contention on the access to primary memory, hindering the scalability of parallel algorithms.\nAnother alternative to sequential algorithms are distributed algorithms. On one hand, these algorithms do not suffer from the drawback mentioned above. On the other hand, distributed algorithms are naturally designed to surpass the limitations on diversification of portfolio-based approaches. This paper describes DistMS, a distributed MaxSAT solver that implements two distributed algorithms. The first algorithm splits the search space by assigning different upper bound values of the optimum solution to different processes. The second algorithm is based on choosing a subset of the problem\u2019s variables and dividing the possible combinations of values for those variables among the processes.\n2 Distributed MaxSAT Solver DistMS\nIn this section we present the distributed algorithms for MaxSAT implemented in the DistMS solver. The first algorithm is an adaptation of the parallel Search Space Splitting approach, first proposed by Martins et al. [10,11]. The second algorithm is based on the guiding paths splitting strategy [15,5,2], which has been shown to be successful in parallel and distributed SAT solvers.\nThe architecture of DistMS is composed of one master and multiple slave processes. The master process mediates the whole communication between the slave processes, being responsible for assigning tasks to slaves and handling communication. On the other hand, slaves wait for a task to be given by the master, process that task and send the result back to the master.\nUnlike other distributed solvers [2], slave processes in DistMS do not communicate directly. All communication is established between the master and the slave processes. The main goal is to minimize the changes in the slave behaviour such that any MaxSAT algorithm can be easily incorporated into the DistMS solver. Although one might think that this would be a bottleneck in the master process, such behaviour has not been observed, even when the number of processes increases to several tens of slaves."}, {"heading": "2.1 Search Space Splitting Algorithm", "text": "Given n processes, the Search Space Splitting algorithm is composed by 1master, 1 unsatisfiability-based process and n \u2212 2 linear search processes. The master\nprocess is responsible for keeping a lower bound \u03bb and an upper bound \u00b5 on the optimum solution of the MaxSAT instance. The lower bound is initially 0. The master process starts with a SAT call containing only the hard clauses \u03c6H . Note that if this SAT call is unsatisfiable, then the solver terminates immediately, returning that the instance is not satisfiable. Otherwise, the number of unsatisfiable soft clauses provides an initial upper bound \u00b5.\nThe main goal of the search splitting algorithm is to split the set of possible values for the optimal solution. Given k linear search slave processes, p1, . . . , pk, the interval defined by the lower bound \u03bb and upper bound \u00b5 is split across the k processes. The initial bounds set is {b0, b1, ..., bk\u22121, bk} with b0 = \u03bb and bk = \u00b5 \u2212 1 and with each process pi being responsible for checking if a given tentative bound bi is either a lower or upper bound on the optimal solution.\nA slave process pi executes a SAT call on a relaxed MaxSAT formula \u03c6R with the additional constraint \u2211 rj \u2264 bi encoded into CNF [3,6]. If the formula given to process pi is unsatisfiable, then bi is a lower bound and \u03bb can be updated. Otherwise, bi is an upper bound and \u00b5 can be updated with the number of relaxation variables rj assigned value 1.\nInitially, the value of bi for process pi is given by bi \u00d7 \u00b5\u22121k c since we have \u03bb = 0. The master process maintains a sorted set B of bounds to be checked by the slaves.\nExample 21 Let \u00b5 = 37 be the initial upper bound. Given k = 6 linear search processes, the initial bounds set is B = {0, 6, 12, 18, 24, 30, 36}.\nIf a given slave process finds a new lower bound, then \u03bb is updated and all values smaller than \u03bb are removed from the bound set B. Otherwise, if a slave process finds a new upper bound, then \u00b5 is updated, all values larger than \u00b5 are removed and \u00b5 is added to B.\nLetB = {b0, b1, ..., bk\u22121, bk} be the current bounds set. If a given slave process pi needs a new bound to search on, then the master chooses a pair (bm\u22121, bm) of contiguous values such that bm \u2212 bm\u22121 \u2265 bj \u2212 bj\u22121 for all 1 < j \u2264 k. A new tentative bound bi = bm+bm\u22121 2 is computed and bi is added to B. Furthermore, the new bound is sent to slave process pi as a tentative bound.\nExample 22 Let B = {5, 12, 22, 27, 40} be a bounds set. Suppose that p1 finds that 26 is an upper bound. In this case, B is updated to B = {5, 12, 17, 22, 25} where 17 is the new tentative bound for slave process p1. Next, if p1 finds that 17 is a lower bound, then the bounds set is updated to B = {18, 20, 22, 25} where 20 is p1\u2019s new tentative bound.\nAdditionally to the slave processes that check tentative bounds, DistMS also includes a slave process executing an unsatisfiability-based algorithm. This is mainly to be able to quickly update the lower bound in few iterations, thus constraining the tentative bounds to be provided to other slave processes by the master.\nAn optimal solution is found when the lower bound \u03bb is equal to the upper bound \u00b5. When this occurs, the master process aborts the execution of the remaining processes and terminates, returning \u00b5 as the optimum value."}, {"heading": "2.2 Guiding Paths with Lookahead Algorithm", "text": "Heule et al. [5] already proposed a parallel SAT algorithm that initially uses a lookahead solver to generate guiding paths in order to split the search tree. Lookahead solvers apply sophisticated reasoning at each branching step in order to guide the search more effectively. The algorithm described throughout the rest of this section is an extension of the previous approach to distributed MaxSAT.\nGiven n processes, the guiding path algorithm in DistMS is composed by 1 master, n \u2212 2 guiding path solver processes and 1 linear search process. The master starts by generating a queue of guiding paths to be solved by the slave processes while waiting for an initial upper bound \u00b5 from the linear search process. The guiding paths are heuristically sorted and given to available slave processes with the best upper bound computed thus far. Each slave applies a linear search MaxSAT algorithm [1] and returns the best solution found for the given path to the master. If the newly found solution improves on the previous one, it is saved and the upper bound \u00b5 is updated.\nNote that unlike other guiding path solver architectures, the number of initial guiding paths is usually much larger than the number of slaves. Hence, when a given guiding path is solved, the master immediately removes the first guiding path from the queue and sends it to the slave. The MaxSAT instance is considered solved when the guiding path queue becomes empty.\nWhen the master sends a guiding path to a slave process, it also provides the current upper bound \u00b5. The working formula on the slave process contains a relaxation of the MaxSAT formula \u03c6R and a cardinality constraint \u2211 rj \u2264 \u00b5\u22121 encoded into CNF. The guiding path literals are considered assumptions in the SAT solver calls occurring in the slave process. Therefore, if the working formula is unsatisfiable, the slave process is able to provide a reason for the unsatisfiability of the formula to the master. When the unsatisfiability does not depend on the guiding path, one can conclude that the working formula is not satisfiable due to the cardinality constraint and \u00b5 is a lower bound of the MaxSAT formula. As a result, the previously found solution \u00b5 is optimal and the solver can terminate, even if there are guiding paths in the queue.\nThe pseudo-code for the guiding path generation procedure is presented in algorithm 1. This procedure receives as input a CNF formula \u03c6, the set C of guiding paths computed so far by the procedure, the current partial assignment D, the set I of literals that are implied by the partial assignment D and a cutoff value \u03b8. Formula \u03c6 corresponds to the hard clauses of the MaxSAT instance.\nThe algorithm starts by incrementing the cutoff value \u03b8 (line 2). This is done to prevent \u03b8 from being reduced too much by the decrement rule in line 4 and as a consequence generating too small guiding paths. The initial cutoff value is 1000 as specified by Heule et al. [5]. In practice, \u03b8 is incremented by 5%. Next, unit propagation is applied to simplify \u03c6 and update set I (line 3). The algorithm then checks if \u03c6 is unsatisfied by the current assignments (line 4). In this case, \u03b8 is decremented (line 5). \u03b8 is also decremented if |D|+log2 |\u03c6| > 25 (line 4). This rule prevents the guiding path generation process of going too deep in the search\nAlgorithm 1: Guiding Path generation algorithm [5] 1 Procedure GenerateGuidingPaths(\u03c6, C, D, I, \u03b8) 2 IncrementCutoff(\u03b8) 3 (\u03c6, I)\u2190 Propagate(\u03c6, D, I) 4 if \u03c6 is unsatisfied by D \u222a I or |D|+ log2 |\u03c6| > 25 then 5 DecrementCutoff(\u03b8) 6 end 7 if \u03c6 is unsatisfied by D \u222a I then 8 AnalyzeAndLearn(\u03c6, D, I) 9 return C"}, {"heading": "10 end", "text": "11 if |D| \u00d7 |D \u222a I| > \u03b8 \u00d7 | Vars(\u03c6) | then 12 return C \u222a {D} 13 end 14 x\u2190 ChooseVariable(\u03c6, D, I) 15 l\u2190 ChoosePolarity(\u03c6, x) 16 C \u2190 GenerateGuidingPaths(\u03c6, C, D \u222a {l}, I, \u03b8) 17 return GenerateGuidingPaths(\u03c6, C, D \u222a {\u00acl}, I, \u03b8)\ntree and generating too many guiding paths. In practice, \u03b8 is decremented by 30%.\nIf \u03c6 is unsatisfied, then the procedure applies conflict analysis [9,16] and learns a new clause (line 8), similarly to a CDCL SAT solver [8]. This may prevent the procedure from generating guiding paths that unsatisfy \u03c6. If \u03c6 is not unsatisfied, then the algorithm checks if the cutoff has been triggered (line 11). If so,D is returned as a guiding path. The cutoff condition takes into account the number of branching steps and the total number of assignments, explicit and implied, in the current node of the search tree.\nIf the cutoff is not triggered, then an unassigned variable x is chosen heuristically to be added to D (line 14). Given a variable x, we denote as evalcls(x) (evalcls(\u00acx)) the sum of the weights of the clauses that are reduced by the assignment x = 1 (x = 0) but are not satisfied. The clauses are weighted in a way such that a clause with length k has a weight five times larger than a clause with length k + 1. Variables are ranked by evalcls(x)\u00d7 evalcls(\u00acx) and ties are broken by evalcls(x) + evalcls(\u00acx).\nExample 23 Let \u03c6 = {(x1\u2228x2\u2228x3), (x2\u2228\u00acx3), (\u00acx1\u2228x2)} be a CNF formula. Hence, evalcls(\u00acx3) = 6 (clauses with length 2 and 3 have weights 5 and 1, respectively, if 3 is the maximum clause size).\nIn practice, a variation of the evalcls heuristic, referred to as evalwl, is used to rank variables. Given a literal l, the only difference is that instead of considering all the clauses in \u03c6, only the clauses watching [14] literal l are considered in the computation of evalwl(l). Also, only variables in soft clauses are considered when choosing a new variable.\nAfter choosing a variable x, another heuristic is used to decide which truth value will be tested first (line 15). We choose the direction based on the number of clauses that will be unsatisfied after assigning x. The branch to be explored first is the one that unsatisfies a smaller number of soft clauses. Ties are broken choosing the direction that satisfies more soft clauses. The rationale for this is that the branch that unsatisfies less soft clauses is more likely to reach an upper bound closer to the optimum value. Algorithm 1 is then repeated for x and \u00acx (lines 16 and 17).\nNote that, since the master sorts guiding paths as they are generated, in the long run the sorting heuristic dominates the polarity heuristic. The priority is given to the least restricting guiding path and ties are broken by choosing the one that was generated first.\nIf there are idle processes and there are no guiding paths left in the queue, then one of the paths currently being solved is chosen to be further split into new guiding paths. We choose the path g that was assigned first. Algorithm 1 is re-invoked, but this time with D = g and I updated accordingly. When algorithm 1 is re-invoked with D 6= \u2205, \u03b8 is initialized as 5000, or else too few guiding paths would be generated."}, {"heading": "3 Experimental Results and Discussion", "text": "The results in Table 1 were obtained on the partial MaxSAT crafted and industrial instances of the MaxSAT evaluation of 2013. DistMS was implemented on top of OpenWBO [12] and different configurations of DistMS are compared against the sequential counterparts. MSU3 refers to the OpenWBO\u2019s unsatisfiabilitybased MSU3 algorithm, LinearSU to the OpenWBO\u2019s linear search algorithm, GP-n:m to guiding paths with n processes per each one of the m machines and SSS-n:m to search space splitting with n processes per each one of the m machines. For each instance, algorithms were executed with a timeout of 1800 seconds (wall clock time) and a memory limit of 4 GB per process. The tests were conducted on a cluster of machines with 4 AMD Opteron 6376 (2.3 GHz) and 128 GB of RAM, running Debian jessie.\nExperimental results show that search space splitting (SSS) performs better in industrial instances, while using guiding paths (GP) allows DistMS to perform better in crafted instances. SSS solves more instances than the sequential solver and slightly increases its performance with a growing number of processes. However, gains are small, since the solver quickly converges to near the optimum bound, and then the diversification of the search is small.\nThe GP approach fails to perform in industrial instances. Unlike the SSS, in the GP approach it is hard to converge to the optimum in industrial instances. Nevertheless, observe that the GP approach is the best performing in crafted instances and it continues to improve as the number of processes grows.\nThis paper proposes the first distributed MaxSAT solver. Although previous multicore parallel approaches have been proposed, they fail to scale when the number of threads increases beyond 8 threads, since these are based in a portfolio of sequential solvers. As a result, DistMS integrates two non-portfolio strategies, namely search space splitting on the number of unsatisfied soft clauses and generation of guiding paths. Experimental results show that we are able to improve on the sequential solvers, but the scalability is still unclear. Given the mixed results from both approaches in different sets of instances, as future work we propose to integrate them into a unifying framework for distributed MaxSAT solving."}], "references": [{"title": "QMaxSAT: A Partial Max-SAT Solver", "author": ["X. An", "T. Zhang", "H. Fujita", "R. Hasegawa"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation 8, 95\u2013100", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "An effective distributed d&c approach for the satisfiability problem", "author": ["G. Audemard", "B. Hoessen", "S. Jabbour", "C. Piette"], "venue": "22nd Euromicro International Conference on Parallel, Distributed, and Network-Based Processing, PDP. pp. 183\u2013187. IEEE Computer Society", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2014}, {"title": "Efficient CNF Encoding of Boolean Cardinality Constraints", "author": ["O. Bailleux", "Y. Boufkhad"], "venue": "Rossi, F. (ed.) Principles and Practice of Constraint Programming. LNCS, vol. 2833, pp. 108\u2013122. Springer", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2003}, {"title": "On solving the partial MAX-SAT problem", "author": ["Z. Fu", "S. Malik"], "venue": "Biere, A., Gomes, C.P. (eds.) Theory and Applications of Satisfiability Testing - SAT 2006, 9th International Conference, Seattle, WA, USA, August 12-15, 2006, Proceedings. Lecture Notes in Computer Science, vol. 4121, pp. 252\u2013265. Springer", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2006}, {"title": "Cube and Conquer: Guiding CDCL SAT Solvers by Lookaheads", "author": ["M.J. Heule", "O. Kullmann", "S. Wieringa", "A. Biere"], "venue": "Hardware and Software: Verification and Testing, pp. 50\u201365. Springer", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "QMaxSAT: A Partial MaxSAT Solver", "author": ["M. Koshimura", "T. Zhang", "H. Fujita", "R. Hasegawa"], "venue": "Journal on Satisfiability, Boolean Modeling and Computation 8(1/2), 95\u2013100", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "MaxSAT, Hard and Soft Constraints", "author": ["C.M. Li", "F. Many\u00e0"], "venue": "Handbook of Satisfiability, pp. 613\u2013631. IOS Press", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2009}, {"title": "Conflict-Driven Clause Learning SAT Solvers", "author": ["J. Marques-Silva", "I. Lynce", "S. Malik"], "venue": "SAT Handbook pp. 131\u2013154", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2009}, {"title": "GRASP: A New Search Algorithm for Satisfiability", "author": ["J. Marques-Silva", "K. Sakallah"], "venue": "International Conference on Computer-Aided Design. pp. 220\u2013227", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1996}, {"title": "Parallel Search for Maximum Satisfiability", "author": ["R. Martins"], "venue": "Ph.D. thesis, Instituto Superior T\u00e9cnico, Universidade T\u00e9cnica de Lisboa", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Parallel Search for Maximum Satisfiability", "author": ["R. Martins", "V. Manquinho", "I. Lynce"], "venue": "AI Communications 25, 75\u201395", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2012}, {"title": "Open-wbo: A modular maxsat solver", "author": ["R. Martins", "V.M. Manquinho", "I. Lynce"], "venue": "(eds.) Theory and Applications of Satisfiability Testing SAT 2014 - 17th International Conference, Held as Part of the Vienna Summer of Logic,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "Iterative and core-guided MaxSAT solving: A survey and assessment", "author": ["A. Morgado", "F. Heras", "M. Liffiton", "J. Planes", "J. Marques-Silva"], "venue": "Constraints 18(4), 478\u2013534", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2013}, {"title": "Chaff: Engineering an efficient sat solver", "author": ["M.W. Moskewicz", "C.F. Madigan", "Y. Zhao", "L. Zhang", "S. Malik"], "venue": "Proceedings of the 38th annual Design Automation Conference. pp. 530\u2013535. ACM", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2001}, {"title": "PSATO: a Distributed Propositional Prover and Its Application to Quasigroup Problems", "author": ["H. Zhang", "M.P. Bonacina", "J. Hsiang"], "venue": "Journal of Symbolic Computation 21, 543\u2013560", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1996}, {"title": "Efficient Conflict Driven Learning in a Boolean Satisfiability Solver", "author": ["L. Zhang", "C.F. Madigan", "M.H. Moskewicz", "S. Malik"], "venue": "International Conference on Computer-Aided Design. pp. 279\u2013285", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2001}, {"title": "Validating SAT solvers using an independent resolution-based checker: Practical implementations and other applications", "author": ["L. Zhang", "S. Malik"], "venue": "2003 Design, Automation and Test in Europe Conference and Exposition (DATE 2003), 3-7 March 2003, Munich, Germany. pp. 10880\u201310885. IEEE Computer Society", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2003}], "referenceMentions": [{"referenceID": 6, "context": "Although there are weighted variants of MaxSAT [7], in this paper we focus on partial MaxSAT.", "startOffset": 47, "endOffset": 50}, {"referenceID": 3, "context": "Hence, a common approach for solving partial MaxSAT is to relax \u03c6 and iteratively call a SAT solver on \u03c6R with an additional constraint \u2211 rj \u2264 b encoded into CNF [4].", "startOffset": 162, "endOffset": 165}, {"referenceID": 16, "context": "More recently, several algorithms have been proposed that take advantage of the ability of SAT solvers to provide an unsatisfiable sub-formula [17].", "startOffset": 143, "endOffset": 147}, {"referenceID": 12, "context": "We refer the reader to the literature for details [13].", "startOffset": 50, "endOffset": 54}, {"referenceID": 9, "context": "[10,11].", "startOffset": 0, "endOffset": 7}, {"referenceID": 10, "context": "[10,11].", "startOffset": 0, "endOffset": 7}, {"referenceID": 14, "context": "The second algorithm is based on the guiding paths splitting strategy [15,5,2], which has been shown to be successful in parallel and distributed SAT solvers.", "startOffset": 70, "endOffset": 78}, {"referenceID": 4, "context": "The second algorithm is based on the guiding paths splitting strategy [15,5,2], which has been shown to be successful in parallel and distributed SAT solvers.", "startOffset": 70, "endOffset": 78}, {"referenceID": 1, "context": "The second algorithm is based on the guiding paths splitting strategy [15,5,2], which has been shown to be successful in parallel and distributed SAT solvers.", "startOffset": 70, "endOffset": 78}, {"referenceID": 1, "context": "Unlike other distributed solvers [2], slave processes in DistMS do not communicate directly.", "startOffset": 33, "endOffset": 36}, {"referenceID": 2, "context": "A slave process pi executes a SAT call on a relaxed MaxSAT formula \u03c6R with the additional constraint \u2211 rj \u2264 bi encoded into CNF [3,6].", "startOffset": 128, "endOffset": 133}, {"referenceID": 5, "context": "A slave process pi executes a SAT call on a relaxed MaxSAT formula \u03c6R with the additional constraint \u2211 rj \u2264 bi encoded into CNF [3,6].", "startOffset": 128, "endOffset": 133}, {"referenceID": 4, "context": "[5] already proposed a parallel SAT algorithm that initially uses a lookahead solver to generate guiding paths in order to split the search tree.", "startOffset": 0, "endOffset": 3}, {"referenceID": 0, "context": "Each slave applies a linear search MaxSAT algorithm [1] and returns the best solution found for the given path to the master.", "startOffset": 52, "endOffset": 55}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "Algorithm 1: Guiding Path generation algorithm [5]", "startOffset": 47, "endOffset": 50}, {"referenceID": 8, "context": "If \u03c6 is unsatisfied, then the procedure applies conflict analysis [9,16] and learns a new clause (line 8), similarly to a CDCL SAT solver [8].", "startOffset": 66, "endOffset": 72}, {"referenceID": 15, "context": "If \u03c6 is unsatisfied, then the procedure applies conflict analysis [9,16] and learns a new clause (line 8), similarly to a CDCL SAT solver [8].", "startOffset": 66, "endOffset": 72}, {"referenceID": 7, "context": "If \u03c6 is unsatisfied, then the procedure applies conflict analysis [9,16] and learns a new clause (line 8), similarly to a CDCL SAT solver [8].", "startOffset": 138, "endOffset": 141}, {"referenceID": 13, "context": "Given a literal l, the only difference is that instead of considering all the clauses in \u03c6, only the clauses watching [14] literal l are considered in the computation of evalwl(l).", "startOffset": 118, "endOffset": 122}, {"referenceID": 11, "context": "DistMS was implemented on top of OpenWBO [12] and different configurations of DistMS are compared against the sequential counterparts.", "startOffset": 41, "endOffset": 45}], "year": 2015, "abstractText": null, "creator": "LaTeX with hyperref package"}}}