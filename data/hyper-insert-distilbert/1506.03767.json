{"id": "1506.03767", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Jun-2015", "title": "Spectral Representations for Convolutional Neural Networks", "abstract": "discrete fourier transforms they provide finally a significant speedup in the computation dynamics of finite convolutions in deep semantic learning. in this work, nowadays we fundamentally demonstrate that, while beyond its advantages for efficient classical computation, calculating the spectral probability domain \u03c9 also provides importantly a powerful representation problem in theory which to model and repeatedly train convolutional fuzzy neural networks ( ip cnns ).", "histories": [["v1", "Thu, 11 Jun 2015 18:23:18 GMT  (3263kb,D)", "http://arxiv.org/abs/1506.03767v1", null]], "reviews": [], "SUBJECTS": "stat.ML cs.LG", "authors": ["oren rippel", "jasper snoek", "ryan p adams"], "accepted": true, "id": "1506.03767"}, "pdf": {"name": "1506.03767.pdf", "metadata": {"source": "CRF", "title": "Spectral Representations for Convolutional Neural Networks", "authors": ["Oren Rippel"], "emails": ["rippel@math.mit.edu", "jsnoek@seas.harvard.edu", "rpa@seas.harvard.edu"], "sections": [{"heading": null, "text": "Discrete Fourier transforms provide a significant speedup in the computation of convolutions in deep learning. In this work, we demonstrate that, beyond its advantages for efficient computation, the spectral domain also provides a powerful representation in which to model and train convolutional neural networks (CNNs).\nWe employ spectral representations to introduce a number of innovations to CNN design. First, we propose spectral pooling, which performs dimensionality reduction by truncating the representation in the frequency domain. This approach preserves considerably more information per parameter than other pooling strategies and enables flexibility in the choice of pooling output dimensionality. This representation also enables a new form of stochastic regularization by randomized modification of resolution. We show that these methods achieve competitive results on classification and approximation tasks, without using any dropout or max-pooling.\nFinally, we demonstrate the effectiveness of complex-coefficient spectral parameterization of convolutional filters. While this leaves the underlying model unchanged, it results in a representation that greatly facilitates optimization. We observe on a variety of popular CNN configurations that this leads to significantly faster convergence during training."}, {"heading": "1 Introduction", "text": "Convolutional neural networks (CNNs) (LeCun et al., 1989) have been used to achieve unparalleled results across a variety of benchmark machine learning problems, and have been applied successfully throughout science and industry for tasks such as large scale image and video classification (Krizhevsky et al., 2012; Karpathy et al., 2014). One of the primary challenges of CNNs, however, is the computational expense necessary to train them. In particular, the efficient implementation of convolutional kernels has been a key ingredient of any successful use of CNNs at scale.\nDue to its efficiency and the potential for amortization of cost, the discrete Fourier transform has long been considered by the deep learning community to be a natural approach to fast convolution (Bengio & LeCun, 2007). More recently, Mathieu et al. (2013); Vasilache et al. (2014) have demonstrated that convolution can be computed significantly faster using discrete Fourier transforms than directly in the spatial domain, even for tiny filters. This computational gain arises from the convenient property of operator duality between convolution in the spatial domain and element-wise multiplication in the frequency domain.\nar X\niv :1\n50 6.\n03 76\n7v 1\n[ st\nat .M\nL ]\n1 1\nIn this work, we argue that the frequency domain offers more than a computational trick for convolution: it also provides a powerful representation for modeling and training CNNs. Frequency decomposition allows studying an input across its various length-scales of variation, and as such provides a natural framework for the analysis of data with spatial coherence. We introduce two applications of spectral representations. These contributions can be applied independently of each other.\nSpectral parametrization We propose the idea of learning the filters of CNNs directly in the frequency domain. Namely, we parametrize them as maps of complex numbers, whose discrete Fourier transforms correspond to the usual filter representations in the spatial domain.\nBecause this mapping corresponds to unitary transformations of the filters, this reparametrization does not alter the underlying model. However, we argue that the spectral representation provides an appropriate domain for parameter optimization, as the frequency basis captures typical filter structure well. More specifically, we show that filters tend to be considerably sparser in their spectral representations, thereby reducing the redundancy that appears in spatial domain representations. This provides the optimizer with more meaningful axis-aligned directions that can be taken advantage of with standard element-wise preconditioning.\nWe demonstrate the effectiveness of this reparametrization on a number of CNN optimization tasks, converging 2-5 times faster than the standard spatial representation.\nSpectral pooling Pooling refers to dimensionality reduction used in CNNs to impose a capacity bottleneck and facilitate computation. We introduce a new approach to pooling we refer to as spectral pooling. It performs dimensionality reduction by projecting onto the frequency basis set and then truncating the representation.\nThis approach alleviates a number of issues present in existing pooling strategies. For example, while max pooling is featured in almost every CNN and has had great empirical success, one major criticism has been its poor preservation of information (Hinton, 2014b,a). This weakness is exhibited in two ways. First, along with other stride-based pooling approaches, it implies a very sharp dimensionality reduction by at least a factor of 4 every time it is applied on two-dimensional inputs. Moreover, while it encourages translational invariance, it does not utilize its capacity well to reduce approximation loss: the maximum value in each window only reflects very local information, and often does not represent well the contents of the window.\nIn contrast, we show that spectral pooling preserves considerably more information for the same number of parameters. It achieves this by exploiting the non-uniformity of typical inputs in their signal-to-noise ratio as a function of frequency. For example, natural images are known to have an expected power spectrum that follows an inverse power law: power is heavily concentrated in the lower frequencies \u2014 while higher frequencies tend to encode noise (Torralba & Oliva, 2003). As such, the elimination of higher frequencies in spectral pooling not only does minimal damage to the information in the input, but can even be viewed as a type of denoising.\nIn addition, spectral pooling allows us to specify any arbitrary output map dimensionality. This permits reduction of the map dimensionality in a slow and controlled manner as a function of network depth. Also, since truncation of the frequency representation exactly corresponds to reduction in resolution, we can supplement spectral pooling with stochastic regularization in the form of randomized resolution.\nSpectral pooling can be implemented at a negligible additional computational cost in convolutional neural networks that employ FFT for convolution kernels, as it only requires matrix truncation. We also note that these two ideas are both compatible with the recently-introduced method of batch normalization (Ioffe & Szegedy, 2015), permitting even better training efficiency."}, {"heading": "2 The Discrete Fourier Transform", "text": "The discrete Fourier transform (DFT) is a powerful way to decompose a spatiotemporal signal. In this section, we provide an introduction to a number of components of the DFT drawn upon in this work. We confine ourselves to the two-dimensional DFT, although all properties and results presented can be easily extended to other input dimensions.\nGiven an input x \u2208 CM\u00d7N (we address the constraint of real inputs in Subsection 2.1), its 2D DFT F (x) \u2208 CM\u00d7N is given by\nF (x)hw = 1\u221a MN M\u22121\u2211 m=0 N\u22121\u2211 n=0 xmne \u22122\u03c0i(mhM + nw N ) \u2200h \u2208 {0, . . . ,M \u2212 1},\u2200w \u2208 {0, . . . , N \u2212 1} .\nThe DFT is linear and unitary, and so its inverse transform is given by F\u22121(\u00b7) = F (\u00b7)\u2217, namely the conjugate of the transform itself.\nIntuitively, the DFT coefficients resulting from projections onto the different frequencies can be thought of as measures of correlation of the input with basis functions of various length-scales. See Figure 1(a) for a visualization of the DFT basis functions, and Figure 1(b) for examples of inputfrequency map pairs.\nThe widespread deployment of the DFT can be partially attributed to the development of the Fast Fourier Transform (FFT), a mainstay of signal processing and a standard component of most math libraries. The FFT is an efficient implementation of the DFT with time complexityO (MN log (MN)).\nConvolution using DFT One powerful property of frequency analysis is the operator duality between convolution in the spatial domain and element-wise multiplication in the spectral domain. Namely, given two inputs x, f \u2208 RM\u00d7N , we may write\nF (x \u2217 f) = F (x) F (f) (1) where by \u2217 we denote a convolution and by an element-wise product.\nApproximation error The unitarity of the Fourier basis makes it convenient for the analysis of approximation loss. More specifically, Parseval\u2019s Theorem links the `2 loss between any input x and its approximation x\u0302 to the corresponding loss in the frequency domain:\n\u2016x\u2212 x\u0302\u201622 = \u2016F (x)\u2212F (x\u0302)\u201622 . (2) An equivalent statement also holds for the inverse DFT operator. This allows us to quickly assess how an input is affected by any distortion we might make to its frequency representation."}, {"heading": "2.1 Conjugate symmetry constraints", "text": "In the following sections of the paper, we will propagate signals and their gradients through DFT and inverse DFT layers. In these layers, we will represent the frequency domain in the complex field.\nHowever, for all layers apart from these, we would like to ensure that both the signal and its gradient are constrained to the reals. A necessary and sufficient condition to achieve this is conjugate symmetry in the frequency domain. Namely, for any transform y = F (x) of some input x, it must hold that\nymn = y \u2217 (M\u2212m) modM,(N\u2212n) modN \u2200m \u2208 {0, . . . ,M \u2212 1},\u2200n \u2208 {0, . . . , N \u2212 1} . (3)\nThus, intuitively, given the left half of our frequency map, the diminished number of degrees of freedom allows us to reconstruct the right. In effect, this allows us to store approximately half the parameters that would otherwise be necessary. Note, however, that this does not reduce the effective dimensionality, since each element consists of real and imaginary components. The conjugate symmetry constraints are visualized in Figure 1(c). Given a real input, its DFT will necessarily meet these. This symmetry can be observed in the frequency representations of the examples in Figure 1(b). However, since we seek to optimize over parameters embedded directly in the frequency domain, we need to pay close attention to ensure the conjugate symmetry constraints are enforced upon inversion back to the spatial domain (see Subsection 2.2)."}, {"heading": "2.2 Differentiation", "text": "Here we discuss how to propagate the gradient through a Fourier transform layer. This analysis can be similarly applied to the inverse DFT layer. Define x \u2208 RM\u00d7N and y = F (x) to be the input and output of a DFT layer respectively, and R : RM\u00d7N \u2192 R a real-valued loss function applied to y which can be considered as the remainder of the forward pass. Since the DFT is a linear operator, its gradient is simply the transformation matrix itself. During back-propagation, then, this gradient is conjugated, and this, by DFT unitarity, corresponds to the application of the inverse transform:\n\u2202R \u2202x = F\u22121\n( \u2202R\n\u2202y\n) . (4)\nThere is an intricacy that makes matters a bit more complicated. Namely, the conjugate symmetry condition discussed in Subsection 2.1 introduces redundancy. Inspecting the conjugate symmetry constraints in Equation (3), we note their enforcement of the special case y00 \u2208 R for N odd, and y00, yN\n2 ,0 , y0,N2 , yN 2 , N 2 \u2208 R for N even. For all other indices they enforce conjugate equality of\npairs of distinct elements. These conditions imply that the number of unconstrained parameters is about half the map in its entirety."}, {"heading": "3 Spectral Pooling", "text": "The choice of a pooling technique boils down to the selection of an appropriate set of basis functions to project onto, and some truncation of this representation to establish a lower-dimensionality approximation to the original input. The idea behind spectral pooling stems from the observation that the frequency domain provides an ideal basis for inputs with spatial structure. We first discuss the technical details of this approach, and then its advantages.\nSpectral pooling is straightforward to understand and to implement. We assume we are given an input x \u2208 RM\u00d7N , and some desired output map dimensionalityH \u00d7W . First, we compute the discrete Fourier transform of the input into the frequency domain as y = F (x) \u2208 CM\u00d7N , and assume that the DC component has been shifted to the center of the domain as is standard practice. We then crop the frequency representation by maintaining only the central H \u00d7W submatrix of frequencies, which we denote as y\u0302 \u2208 CH\u00d7W . Finally, we map this approximation back into the spatial domain by taking\nAlgorithm 1: Spectral pooling\nInput: Map x \u2208 RM\u00d7N , output size H \u00d7W Output: Pooled map x\u0302 \u2208 RH\u00d7W\n1: y\u2190 F (x) 2: y\u0302\u2190 CROPSPECTRUM(y, H \u00d7W ) 3: y\u0302\u2190 TREATCORNERCASES(y\u0302) 4: x\u0302\u2190 F\u22121(y\u0302)\nAlgorithm 2: Spectral pooling back-propagation\nInput: Gradient w.r.t output \u2202R \u2202x\u0302 Output: Gradient w.r.t input \u2202R \u2202x\n1: z\u0302\u2190 F ( \u2202R \u2202x\u0302 ) 2: z\u0302\u2190 REMOVEREDUNDANCY(z\u0302) 3: z\u2190 PADSPECTRUM(z\u0302,M \u00d7N) 4: z\u2190 RECOVERMAP(z) 5: \u2202R\n\u2202x \u2190 F\u22121 (z)\nits inverse DFT as x\u0302 = F\u22121(y\u0302) \u2208 RH\u00d7W . These steps are listed in Algorithm 1. Note that some of the conjugate symmetry special cases described in Subsection 2.2 might be broken by this truncation. As such, to ensure that x\u0302 is real-valued, we must treat these individually with TREATCORNERCASES, which can be found in the supplementary material.\nFigure 2 demonstrates the effect of this pooling for various choices of H \u00d7W . The backpropagation procedure is quite intuitive, and can be found in Algorithm 2 (REMOVEREDUNDANCY and RECOVERMAP can be found in the supplementary material). In Subsection 2.2, we addressed the nuances of differentiating through DFT and inverse DFT layers. Apart from these, the last component left undiscussed is differentiation through the truncation of the frequency matrix, but this corresponds to a simple zero-padding of the gradient maps to the appropriate dimensions.\nIn practice, the DFTs are the computational bottlenecks of spectral pooling. However, we note that in convolutional neural networks that employ FFTs for convolution computation, spectral pooling can be implemented at a negligible additional computational cost, since the DFT is performed regardless.\nWe proceed to discuss a number of properties of spectral pooling, which we then test comprehensively in Section 5."}, {"heading": "3.1 Information preservation", "text": "Spectral pooling can significantly increase the amount of retained information relative to max-pooling in two distinct ways. First, its representation maintains more information for the same number of degrees of freedom. Spectral pooling reduces the information capacity by tuning the resolution of the input precisely to match the desired output dimensionality. This operation can also be viewed as linear low-pass filtering and it exploits the non-uniformity of the spectral density of the data with respect to frequency. That is, that the power spectra of inputs with spatial structure, such as natural images, carry most of their mass on lower frequencies. As such, since the amplitudes of the higher frequencies tend to be small, Parseval\u2019s theorem from Section 2 informs us that their elimination will result in a representation that minimizes the `2 distortion after reconstruction.\nSecond, spectral pooling does not suffer from the sharp reduction in output dimensionality exhibited by other pooling techniques. More specifically, for stride-based pooling strategies such as max pooling, the number of degrees of freedom of two-dimensional inputs is reduced by at least 75% as a function of stride. In contrast, spectral pooling allows us to specify any arbitrary output dimensionality, and thus allows us to reduce the map size gradually as a function of layer."}, {"heading": "3.2 Regularization via resolution corruption", "text": "We note that the low-pass filtering radii, say RH and RW , can be chosen to be smaller than the output map dimensionalities H,W . Namely, while we truncate our input frequency map to size H \u00d7W , we can further zero-out all frequencies outside the central RH \u00d7RW square. While this maintains the output dimensionality H \u00d7W of the input domain after applying the inverse DFT, it effectively reduces the resolution of the output. This can be seen in Figure 2.\nThis allows us to introduce regularization in the form of random resolution reduction. We apply this stochastically by assigning a distribution pR(\u00b7) on the frequency truncation radius (for simplicity we apply the same truncation on both axes), sampling from this a random radius at each iteration, and wiping out all frequencies outside the square of that size. Note that this can be regarded as an application of nested dropout (Rippel et al., 2014) on both dimensions of the frequency decomposition of our input. In practice, we have had success choosing pR(\u00b7) = U[Hmin,H](\u00b7), i.e., a uniform distribution stretching from some minimum value all the way up to the highest possible resolution."}, {"heading": "4 Spectral Parametrization of CNNs", "text": "Here we demonstrate how to learn the filters of CNNs directly in their frequency domain representations. This offers significant advantages over the traditional spatial representation, which we show empirically in Section 5.\nLet us assume that for some layer of our convolutional neural network we seek to learn filters of size H \u00d7W . To do this, we parametrize each filter f \u2208 CH\u00d7W in our network directly in the frequency domain. To attain its spatial representation, we simply compute its inverse DFT as F\u22121(f) \u2208 RH\u00d7W . From this point on, we proceed as we would for any standard CNN by computing the convolution of the filter with inputs in our mini-batch, and so on.\nThe back-propagation through the inverse DFT is virtually identical to the one of spectral pooling described in Section 3. We compute the gradient as outlined in Subsection 2.2, being careful to obey the conjugate symmetry constraints discussed in Subsection 2.1.\nWe emphasize that this approach does not change the underlying CNN model in any way \u2014 only the way in which it is parametrized. Hence, this only affects the way the solution space is explored by the optimization procedure."}, {"heading": "4.1 Leveraging filter structure", "text": "This idea exploits the observation that CNN filters have a very characteristic structure that reappears across data sets and problem domains. That is, CNN weights can typically be captured with a small\nnumber of degrees of freedom. Represented in the spatial domain, however, this results in significant redundancy.\nThe frequency domain, on the other hand, provides an appealing basis for filter representation: characteristic filters (e.g., Gabor filters) are often very localized in their spectral representations. This follows from the observation that filters tend to feature very specific length-scales and orientations. Hence, they tend to have nonzero support in a narrow set of frequency components. This hypothesis can be observed qualitatively in Figure 3(a) and quantitatively in Figure 3(b).\nEmpirically, in Section 5 we observe that spectral representations of filters leads to a convergence speedup by 2-5 times. We remark that, had we trained our network with standard stochastic gradient descent, the linearity of differentiation and parameter update would have resulted in exactly the same filters regardless of whether they were represented in the spatial or frequency domain during training (this is true for any invertible linear transformation of the parameter space).\nHowever, as discussed, this parametrization corresponds to a rotation to a more meaningful axis alignment, where the number of relevant elements has been significantly reduced. Since modern optimizers implement update rules that consist of adaptive element-wise rescaling, they are able to leverage this axis alignment by making large updates to a small number of elements. This can be seen quantitatively in Figure 3(c), where the optimizer \u2014 Adam (Kingma & Ba, 2015), in this case \u2014 only touches a small number of elements in its updates.\nThere exist a number of extensions of the above approach we believe would be quite promising in future work; we elaborate on these in the discussion."}, {"heading": "5 Experiments", "text": "We demonstrate the effectiveness of spectral representations in a number of different experiments. We ran all experiments on code optimized for the Xeon Phi coprocessor. We used Spearmint (Snoek et al., 2015) for Bayesian optimization of hyperparameters with 5-20 concurrent evaluations."}, {"heading": "5.1 Spectral pooling", "text": "Information preservation We test the information retainment properties of spectral pooling on the validation set of ImageNet (Russakovsky et al., 2015). For the different pooling strategies we plot the average approximation loss resulting from pooling to different dimensionalities. This can be seen in Figure 4. We observe the two aspects discussed in Subsection 3.1: first, spectral pooling permits significantly better reconstruction for the same number of parameters. Second, for max pooling, the only knob controlling the coarseness of approximation is the stride, which results in severe quantization and a constraining lower bound on preserved information (marked in the figure as a horizontal red line). In contrast, spectral pooling permits the selection of any output dimensionality, thereby producing a smooth curve over all frequency truncation choices.\nClassification with convolutional neural networks We test spectral pooling on different classification tasks. We hyperparametrize and optimize the following CNN architecture:(\nC96+32m3\u00d73 \u2192 SP\u2193b\u03b3Hmc\u00d7b\u03b3Hmc )M m=1 \u2192 C96+32M1\u00d71 \u2192 C 10/100 1\u00d71 \u2192 GA \u2192 Softmax (5)\nHere, by CFS we denote a convolutional layer with F filters each of size S, by SP\u2193S a spectral pooling layer with output dimensionality S, and GA the global averaging layer described in Lin et al. (2013). We upper-bound the number of filters per layer as 288. Every convolution and pooling layer is followed by a ReLU nonlinearity. We let Hm be the height of the map of layer m. Hence, each spectral pooling layer reduces each output map dimension by factor \u03b3 \u2208 (0, 1). We assign frequency dropout distribution pR(\u00b7;m,\u03b1, \u03b2) = U[bcmHmc,Hm](\u00b7) for layer m, total layers M and with cm(\u03b1, \u03b2) = \u03b1 + m M (\u03b2 \u2212 \u03b1) for some constants \u03b1, \u03b2 \u2208 R. This parametrization can be thought of as some linear parametrization of the dropout rate as a function of the layer.\nWe perform hyperparameter optimization on the dimensionality decay rate \u03b3 \u2208 [0.25, 0.85], number of layers M \u2208 {1, . . . , 15}, resolution randomization hyperparameters \u03b1, \u03b2 \u2208 [0, 0.8], weight decay rate in [10\u22125, 10\u22122], momentum in [1 \u2212 0.10.5, 1 \u2212 0.12] and initial learning rate in [0.14, 0.1]. We train each model for 150 epochs and anneal the learning rate by a factor of 10 at epochs 100 and 140. We intentionally use no dropout nor data augmentation, as these introduce a number of additional hyperparameters which we want to disambiguate as alternative factors for success.\nPerhaps unsurprisingly, the optimal hyperparameter configuration assigns the slowest possible layer map decay rate \u03b3 = 0.85. It selects randomized resolution reduction constants of about \u03b1 \u2248 0.30, \u03b2 \u2248 0.15, momentum of about 0.95 and initial learning rate 0.0088. These settings allow us to attain classification rates of 8.6% on CIFAR-10 and 31.6% on CIFAR-100. These are competitive results among approaches that do not employ data augmentation: a comparison to state-of-the-art approaches from the literature can be found in Table 4(b)."}, {"heading": "5.2 Spectral parametrization of CNNs", "text": "We demonstrate the effectiveness of spectral parametrization on a number of CNN optimization tasks, for different architectures and for different filter sizes. We use the notation MPTS to denote a max pooling layer with size S and stride T , and FCF is a fully-connected layer with F filters.\nThe first architecture is the generic one used in a variety of deep learning papers, such as Krizhevsky et al. (2012); Snoek et al. (2012); Krizhevsky (2009); Kingma & Ba (2015):\nC963\u00d73 \u2192 MP23\u00d73 \u2192 C1923\u00d73 \u2192 MP23\u00d73 \u2192 FC1024 \u2192 FC512 \u2192 Softmax (6)\nThe second architecture we consider is the one employed in Snoek et al. (2015), which was shown to attain competitive classification rates. It is deeper and more complex:\nC 96 3\u00d73 \u2192 C963\u00d73 \u2192 MP23\u00d73 \u2192 C1923\u00d73 \u2192 C1923\u00d73 \u2192 C1923\u00d73 \u2192 MP23\u00d73 \u2192 C1921\u00d71 \u2192 C10/1001\u00d71 \u2192 GA\u2192 Softmax (7)\nThe third architecture considered is the spectral pooling network from Equation 5. To increase the difficulty of optimization and reflect real training conditions, we supplemented all networks with considerable data augmentation in the form of translations, horizontal reflections, HSV perturbations and dropout.\nWe initialized both spatial and spectral filters in the spatial domain as the same values; for the spectral parametrization experiments we then computed the Fourier transform of these to attain their frequency representations. We optimized all networks using the Adam (Kingma & Ba, 2015) update rule, a variant of RMSprop that we find to be a fast and robust optimizer.\nThe training curves can be found in Figure 5(a) and the respective factors of convergence speedup in\nTable 5. Surprisingly, we observe non-negligible speedup even for tiny filters of size 3\u00d7 3, where we did not expect the frequency representation to have much room to exploit spatial structure."}, {"heading": "6 Discussion and remaining open problems", "text": "In this work, we demonstrated that spectral representations provide a rich spectrum of applications. We introduced spectral pooling, which allows pooling to any desired output dimensionality while retaining significantly more information than other pooling approaches. In addition, we showed that the Fourier functions provide a suitable basis for filter parametrization, as demonstrated by faster convergence of the optimization procedure.\nOne possible future line of work is to embed the network in its entirety in the frequency domain. In models that employ Fourier transforms to compute convolutions, at every convolutional layer the input is FFT-ed and the elementwise multiplication output is then inverse FFT-ed. These back-and-forth transformations are very computationally intensive, and as such it would be desirable to strictly remain in the frequency domain. However, the reason for these repeated transformations is the application of nonlinearities in the forward domain: if one were to propose a sensible nonlinearity in the frequency domain, this would spare us from the incessant domain switching.\nIn addition, one significant downfall of the DFT approach is its difficulty in handling finite impulse response filtering. In particular, its projection onto the various frequencies involves global sums over the entire input. Hence, the input domain has perfect spatial locality and no spectral locality, while the Fourier domain has perfect spectral locality and no spatial locality. An intermediate solution we believe would be very effective is employing wavelets, which provide a middle ground between the two approaches. While wavelets have been employed throughout machine learning with great promise (Bruna & Mallat, 2013; Oyallon et al., 2013), to our knowledge they have not been used in an adaptive way to learn CNNs.\nAcknowledgements We would like to thank Prabhat, Michael Gelbart and Matthew Johnson for useful discussions and assistance throughout this project. Jasper Snoek is a fellow in the Harvard Center for Research on Computation and Society. This work is supported by the Applied Mathematics Program within the Office of Science Advanced Scientific Computing Research of the U.S. Department of Energy under contract No. DE-AC02-05CH11231. This work used resources of the National Energy Research Scientific Computing Center (NERSC). We thank Helen He and Doug Jacobsen for providing us with access to the Babbage Xeon-Phi testbed at NERSC."}], "references": [{"title": "Scaling learning algorithms towards AI", "author": ["Bengio", "Yoshua", "LeCun", "Yann"], "venue": "Large Scale Kernel Machines. MIT Press,", "citeRegEx": "Bengio et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2007}, {"title": "Invariant scattering convolution networks", "author": ["Bruna", "Joan", "Mallat", "Stephane"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,", "citeRegEx": "Bruna et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bruna et al\\.", "year": 2013}, {"title": "URL http://dblp.uni-trier.de/db/journals/corr/ corr1302.html#abs-1302-4389", "author": ["Goodfellow", "Ian J", "Warde-Farley", "David", "Mirza", "Mehdi", "Courville", "Aaron C", "Bengio", "Yoshua"], "venue": "Maxout networks. CoRR,", "citeRegEx": "Goodfellow et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2013}, {"title": "What\u2019s wrong with convolutional nets? MIT Brain and Cognitive Sciences - Fall Colloquium Series, Dec 2014a. URL http://techtv.mit.edu/collections/bcs/videos/ 30698-what-s-wrong-with-convolutional-nets", "author": ["Hinton", "Geoffrey"], "venue": null, "citeRegEx": "Hinton and Geoffrey.,? \\Q2014\\E", "shortCiteRegEx": "Hinton and Geoffrey.", "year": 2014}, {"title": "Ask me anything: Geoffrey hinton", "author": ["Hinton", "Geoffrey"], "venue": "Reddit Machine Learning,", "citeRegEx": "Hinton and Geoffrey.,? \\Q2014\\E", "shortCiteRegEx": "Hinton and Geoffrey.", "year": 2014}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate", "author": ["Ioffe", "Sergey", "Szegedy", "Christian"], "venue": "shift. CoRR,", "citeRegEx": "Ioffe et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ioffe et al\\.", "year": 2015}, {"title": "Largescale video classification with convolutional neural networks", "author": ["Karpathy", "Andrej", "Toderici", "George", "Shetty", "Sanketh", "Leung", "Thomas", "Sukthankar", "Rahul", "Fei-Fei", "Li"], "venue": "In Computer Vision and Pattern Recognition,", "citeRegEx": "Karpathy et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Karpathy et al\\.", "year": 2014}, {"title": "Adam: A method for stochastic optimization", "author": ["Kingma", "Diederik", "Ba", "Jimmy"], "venue": "CoRR, abs/1412.6980,", "citeRegEx": "Kingma et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2015}, {"title": "Learning multiple layers of features from tiny images", "author": ["Krizhevsky", "Alex"], "venue": "Technical report,", "citeRegEx": "Krizhevsky and Alex.,? \\Q2009\\E", "shortCiteRegEx": "Krizhevsky and Alex.", "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["Krizhevsky", "Alex", "Sutskever", "Ilya", "Hinton", "Geoffrey E"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Handwritten digit recognition with a back-propagation network", "author": ["LeCun", "Yann", "Boser", "Bernhard", "J.S. Denker", "D. Henderson", "R.E. Howard", "W. Hubbard", "L.D. Jackel"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "LeCun et al\\.,? \\Q1989\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1989}, {"title": "Fast training of convolutional networks through FFTs", "author": ["Mathieu", "Micha\u00ebl", "Henaff", "Mikael", "LeCun", "Yann"], "venue": "CoRR, abs/1312.5851,", "citeRegEx": "Mathieu et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Mathieu et al\\.", "year": 2013}, {"title": "Generic deep networks with wavelet scattering", "author": ["Oyallon", "Edouard", "Mallat", "St\u00e9phane", "Sifre", "Laurent"], "venue": "CoRR, abs/1312.5940,", "citeRegEx": "Oyallon et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Oyallon et al\\.", "year": 2013}, {"title": "Learning ordered representations with nested dropout", "author": ["Rippel", "Oren", "Gelbart", "Michael A", "Adams", "Ryan P"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Rippel et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Rippel et al\\.", "year": 2014}, {"title": "Practical Bayesian optimization of machine learning algorithms", "author": ["Snoek", "Jasper", "Larochelle", "Hugo", "Adams", "Ryan Prescott"], "venue": "In Neural Information Processing Systems,", "citeRegEx": "Snoek et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Snoek et al\\.", "year": 2012}, {"title": "Scalable Bayesian optimization using deep neural networks", "author": ["Snoek", "Jasper", "Rippel", "Oren", "Swersky", "Kevin", "Kiros", "Ryan", "Satish", "Nadathur", "Sundaram", "Narayanan", "Patwary", "Md. Mostofa Ali", "Prabhat", "Adams", "Ryan P"], "venue": "In International Conference on Machine Learning,", "citeRegEx": "Snoek et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Snoek et al\\.", "year": 2015}, {"title": "Statistics of natural image", "author": ["Torralba", "Antonio", "Oliva", "Aude"], "venue": "categories. Network,", "citeRegEx": "Torralba et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Torralba et al\\.", "year": 2003}, {"title": "Fast convolutional nets with fbfft: A GPU performance evaluation", "author": ["Vasilache", "Nicolas", "Johnson", "Jeff", "Mathieu", "Micha\u00ebl", "Chintala", "Soumith", "Piantino", "Serkan", "LeCun", "Yann"], "venue": "CoRR, abs/1412.7580,", "citeRegEx": "Vasilache et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Vasilache et al\\.", "year": 2014}, {"title": "Stochastic pooling for regularization of deep convolutional neural networks", "author": ["Zeiler", "Matthew D", "Fergus", "Rob"], "venue": "CoRR, abs/1301.3557,", "citeRegEx": "Zeiler et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Zeiler et al\\.", "year": 2013}], "referenceMentions": [{"referenceID": 10, "context": "Convolutional neural networks (CNNs) (LeCun et al., 1989) have been used to achieve unparalleled results across a variety of benchmark machine learning problems, and have been applied successfully throughout science and industry for tasks such as large scale image and video classification (Krizhevsky et al.", "startOffset": 37, "endOffset": 57}, {"referenceID": 9, "context": ", 1989) have been used to achieve unparalleled results across a variety of benchmark machine learning problems, and have been applied successfully throughout science and industry for tasks such as large scale image and video classification (Krizhevsky et al., 2012; Karpathy et al., 2014).", "startOffset": 240, "endOffset": 288}, {"referenceID": 6, "context": ", 1989) have been used to achieve unparalleled results across a variety of benchmark machine learning problems, and have been applied successfully throughout science and industry for tasks such as large scale image and video classification (Krizhevsky et al., 2012; Karpathy et al., 2014).", "startOffset": 240, "endOffset": 288}, {"referenceID": 11, "context": "More recently, Mathieu et al. (2013); Vasilache et al.", "startOffset": 15, "endOffset": 37}, {"referenceID": 11, "context": "More recently, Mathieu et al. (2013); Vasilache et al. (2014) have demonstrated that convolution can be computed significantly faster using discrete Fourier transforms than directly in the spatial domain, even for tiny filters.", "startOffset": 15, "endOffset": 62}, {"referenceID": 13, "context": "Note that this can be regarded as an application of nested dropout (Rippel et al., 2014) on both dimensions of the frequency decomposition of our input.", "startOffset": 67, "endOffset": 88}, {"referenceID": 2, "context": "(b) Test errors on CIFAR-10/100 without data augmentation of the optimal spectral pooling architecture, as compared to current state-of-the-art approaches: stochastic pooling (Zeiler & Fergus, 2013), Maxout (Goodfellow et al., 2013), networkin-network (Lin et al.", "startOffset": 207, "endOffset": 232}, {"referenceID": 15, "context": "We used Spearmint (Snoek et al., 2015) for Bayesian optimization of hyperparameters with 5-20 concurrent evaluations.", "startOffset": 18, "endOffset": 38}, {"referenceID": 9, "context": "The first architecture is the generic one used in a variety of deep learning papers, such as Krizhevsky et al. (2012); Snoek et al.", "startOffset": 93, "endOffset": 118}, {"referenceID": 9, "context": "The first architecture is the generic one used in a variety of deep learning papers, such as Krizhevsky et al. (2012); Snoek et al. (2012); Krizhevsky (2009); Kingma & Ba (2015): C 3\u00d73 \u2192 MP3\u00d73 \u2192 C 3\u00d73 \u2192 MP3\u00d73 \u2192 FC \u2192 FC \u2192 Softmax (6)", "startOffset": 93, "endOffset": 139}, {"referenceID": 9, "context": "The first architecture is the generic one used in a variety of deep learning papers, such as Krizhevsky et al. (2012); Snoek et al. (2012); Krizhevsky (2009); Kingma & Ba (2015): C 3\u00d73 \u2192 MP3\u00d73 \u2192 C 3\u00d73 \u2192 MP3\u00d73 \u2192 FC \u2192 FC \u2192 Softmax (6)", "startOffset": 93, "endOffset": 158}, {"referenceID": 9, "context": "The first architecture is the generic one used in a variety of deep learning papers, such as Krizhevsky et al. (2012); Snoek et al. (2012); Krizhevsky (2009); Kingma & Ba (2015): C 3\u00d73 \u2192 MP3\u00d73 \u2192 C 3\u00d73 \u2192 MP3\u00d73 \u2192 FC \u2192 FC \u2192 Softmax (6)", "startOffset": 93, "endOffset": 178}, {"referenceID": 14, "context": "The second architecture we consider is the one employed in Snoek et al. (2015), which was shown to attain competitive classification rates.", "startOffset": 59, "endOffset": 79}, {"referenceID": 12, "context": "While wavelets have been employed throughout machine learning with great promise (Bruna & Mallat, 2013; Oyallon et al., 2013), to our knowledge they have not been used in an adaptive way to learn CNNs.", "startOffset": 81, "endOffset": 125}], "year": 2015, "abstractText": "Discrete Fourier transforms provide a significant speedup in the computation of convolutions in deep learning. In this work, we demonstrate that, beyond its advantages for efficient computation, the spectral domain also provides a powerful representation in which to model and train convolutional neural networks (CNNs). We employ spectral representations to introduce a number of innovations to CNN design. First, we propose spectral pooling, which performs dimensionality reduction by truncating the representation in the frequency domain. This approach preserves considerably more information per parameter than other pooling strategies and enables flexibility in the choice of pooling output dimensionality. This representation also enables a new form of stochastic regularization by randomized modification of resolution. We show that these methods achieve competitive results on classification and approximation tasks, without using any dropout or max-pooling. Finally, we demonstrate the effectiveness of complex-coefficient spectral parameterization of convolutional filters. While this leaves the underlying model unchanged, it results in a representation that greatly facilitates optimization. We observe on a variety of popular CNN configurations that this leads to significantly faster convergence during training.", "creator": "LaTeX with hyperref package"}}}