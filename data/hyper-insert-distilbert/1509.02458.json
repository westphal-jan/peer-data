{"id": "1509.02458", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Sep-2015", "title": "A Behavior Analysis-Based Game Bot Detection Approach Considering Various Play Styles", "abstract": "an approach for game cue bot detection in mmorpgs is yet proposed based on only the analysis of game book playing behavior. quite since mmorpgs are large scale games, users obviously can play gameplay in fundamentally various ways. this variety in digital playing field behavior prediction makes ways it frequently hard to carefully detect complex game bots based partially on virtual play behaviors. recently in order to cope with solved this structural problem, the traditionally proposed approach observes game table playing behaviors mostly of users and specifically groups them socially by their behavioral similarities. then, it develops a local bot network detection model for each game player participating group. if since the purely locally optimized behavioral models above can more accurately detect game bots within determining each player group, the combination of those models can brings conclusions about an overall improvement. for a practical purpose of reducing time the workloads of servicing the participating game console servers in console service, the game data file is collected at a properly low resolution server in continuous time. behavioral features are selected and developed to then accurately ultimately detect game control bots with the low horizontal resolution data, without considering common aspects expected of mmorpg playing. directly through the mathematical experiment with the matching real data from modeling a game currently in service, guessing it correctly is thereby shown that the presently proposed local model based approach yields clearly more accurate response results.", "histories": [["v1", "Tue, 8 Sep 2015 17:36:31 GMT  (787kb)", "http://arxiv.org/abs/1509.02458v1", null]], "reviews": [], "SUBJECTS": "cs.LG cs.AI", "authors": ["yeounoh chung", "chang-yong park", "noo-ri kim", "hana cho", "taebok yoon", "hunjoo lee", "jee-hyong lee"], "accepted": false, "id": "1509.02458"}, "pdf": {"name": "1509.02458.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Yeounoh Chung"], "emails": ["yeounohster@gmail.com),", "(codep@skku.edu),", "(pd99j@skku.edu),", "(cho2405@skku.edu),", "john@skku.edu)", "(tbyoon@seoil.ac.kr)", "(hjoo@etri.re.kr)"], "sections": [{"heading": null, "text": "ETRI Journal, Volume x, Number y, Date Yeounoh Chung et al. 1\nAn approach for game bot detection in MMORPGs is proposed based on the analysis of game playing behavior. Since MMORPGs are large scale games, users can play in various ways. This variety in playing behavior makes it hard to detect game bots based on play behaviors. In order to cope with this problem, the proposed approach observes game playing behaviors of users and groups them by their behavioral similarities. Then, it develops a local bot detection model for each player group. Since the locally optimized models can more accurately detect game bots within each player group, the combination of those models brings about overall improvement. For a practical purpose of reducing the workloads of the game servers in service, the game data is collected at a low resolution in time. Behavioral features are selected and developed to accurately detect game bots with the low resolution data, considering common aspects of MMORPG playing. Through the experiment with the real data from a game currently in service, it is shown that the proposed local model approach yields more accurate results.\nKeywords: User behavior analysis, Machine learning, Bot detection model, MMORPGs, Game play styles\nI. Introduction\nGame bots are automated programs that perform repetitive tasks on behalf of human players. Since game bots can perform tedious tasks without break, those are usually used to obtain\nManuscript received March xx, 2013; revised March xx, 2013; accepted July xx, 2013. This work was supported by Ministry of Culture, Sports and Tourism (MCST) and Korea Creative Content Agency (KOCCA) in the Culture Technology (CT) and Research Development Program 2012.\nYeounoh Chung (+82 31 290 7987, yeounohster@gmail.com), Chang-yong Park (codep@skku.edu), Noo-ri Kim (pd99j@skku.edu), Hana Cho (cho2405@skku.edu), and JeeHyong Lee (corresponding author, john@skku.edu) are with the School of Information and Communication Engineering at Sungkyunkwan University, Suwon, Rep. of Korea.\nTaebok Yoon (tbyoon@seoil.ac.kr) is with the Department of Computer Software at Seoil\nUniversity, Seoul, Rep. of Korea.\nHunjoo Lee (hjoo@etri.re.kr) is with the Contents Research Division, ETRI, Daejeon, Rep. of\nKorea.\nhttp://dx.doi.org/10.4218/etrij.13.0112.0061\nunfair advantages over honest human players. An unruly swarm of game bots depletes game contents and resources, so honest players may feel discouraged and lose interest, and eventually retire from the game. Game bots are potentially serious threats to gaming businesses, and detecting game bots is of a great importance to game publishers.\nThere have been many efforts on the game publisher side to prevent the use of game bots. However, it is hard to detect game bots because they simulate legitimate human game playing behavior. Various strategies have been proposed for game bot detection, such as repeated Turing test, network traffic analysis, bot scanning, but those are known to have drawbacks: interfering with game play or being easily evaded by game bots [1], [4]-[6].\nA promising alternative to the traditional bot detection approaches is behavior analysis of game playing [2]. To this end, researchers analyzed behavioral patterns of players. However, the previous work tried to discriminate human players and game bots with one global model. Players have various gaming styles; some users are battle-oriented, some are item collection-oriented, and some are quest-oriented. Since such players exhibit different and distinct behavioral patterns, behavior-based bot detection should use a different set of bot detection rules for each type of player groups. However, previous researches did not consider the differences in behavioral patterns of player groups. Instead, a global bot detection model was used for the different player groups.\nAnother limitation of the previous work is that they only examines one or two characteristic behaviors for bot detection, rather than whole aspects of behavior [12], [16], [22]. Observing one or two types of behaviors can still accurately detect game bots; however, because distinguishing patterns for bot detection vary greatly from game to game, the previous approaches can be highly game dependent. For instance, if detecting game bots\nA Behavior Analysis-Based Game Bot Detection\nApproach Considering Various Play Styles\nYeounoh Chung, Chang-yong Park, Noo-ri Kim, Hana Cho, Taebok Yoon, Hunjoo Lee and Jee-Hyong Lee.\n2 Yeounoh Chung et al. ETRI Journal, Volume x, Number y, Date\nbased on party play (party duration) [3], then the detection mechanism works well only with game bots in parties, but does not effectively work for players who do not party nor share their collections. Thus, it is important for a generic bot detection methodology to consider whole aspects of behavior in order to cover game bots with different gaming styles.\nAnother concern for behavior-based bot detection approaches is the game server workload for collecting game play data of all the players. In general, behavior-based game bot detection approaches require game play data in high resolution in time; however, collecting such high resolution data for every player can overload the game servers in service. Although, it is important to minimize the workload of the game servers in collecting game play data, most of the previous behavior-based bot detection approaches did not address this concern [12], [17], [20].\nIn this paper, we propose a novel behavior analysis-based bot detection methodology. We group players by their behavioral similarities and detect game bots within each group, using a set of customized bot detection rules for each group of players. We overcome the limitation of using a global bot detection model for different player groups by using local models for player groups, grouped by behavioral similarities.\nAdditionally, we examine the behavioral features that can be extracted from the low resolution game data to reduce the game server workloads. The features are common in MMORPGs and reflect the whole aspects of playing behavior. Features reflecting the whole aspects of playing behavior are necessary to effectively detect game bots with low resolution data, as well as to reduce the game-dependency of the proposed method.\nWe evaluate the proposed method using a large dataset from an MMORPG currently serviced by a Korean game publisher. Our experimental results confirm the importance of considering various aspects of game behavior and different gaming styles to detect game bots.\nThe rest of this paper is organized as follows. Section 2 reviews related work in game bot detection. Section 3 describes the features used for our experiment and the proposed bot detection framework. Section 4 presents and explains the experimental results. Section 5 summarizes and concludes the work.\nII. Related Work\nIt is difficult to detect game bots because they simulate legitimate human game playing behavior. In an effort to restrain game bots in MMORPGs, various strategies have been proposed, such as repeated Turing test, network traffic analysis, bot scanning and behavior analysis.\nThe repeated Turing test, such as CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) provides a good way to detect game bots [4], [5]. The basic idea of the Turing test is to ask a question that is easy for humans to answer, but very difficult for computers. Based on the answer from players, one judges if the respondent is human or not. The CAPTCHA authentication is widely used in MMORPGs for bot detection [6]-[11]. However, Q&A based approaches interfere with normal game play, and some advanced game bots provide an evasion function for CAPTCHA authentication [13], [15].\nChen et al. [12] traced game data packets for bot detection. They showed that there were differences in network traffic patterns generated by humans and game bots. Bot detection measures based on network traffic analysis are less obtrusive to human players than Turing test or anti-bot software [14], but they can cause network overload and lags in game play [22].\nClient-side bot scanning is one of the traditional anti-bot methodologies. Anti-bot software for bot scanning is installed on client computers and examines event sequences and memories. This can cause inconveniences for players, such as collisions with operating systems [22]. In many cases, such bot detection mechanism can be evaded by running games in guest mode on an administrator account [20].\nA promising alternative to the above approaches is bot detection based on player behavior analysis. To this end, researchers analyzed various behavioral patterns of game players using machine learning or statistical techniques.\nSome researchers focused on movement pattern of game play behavior [16]-[19]. This exploits the fact that bots move along prescribed paths, thus show regularities in their movement patterns, while human players follow more complex and random movement paths. However, bot writers can easily introduce some irregularities to bots\u2019 movement patterns [20].\nOther features that are preferred for bot detection are attack sequences [12], [21] and social sequences [18], [23], [24], because bots usually have regular patterns in those features. However, they are also limited in that such features may not be common or relevant in game bots, depending on games or gaming purposes.\nOne recent study analyzed party play behavior to detect game bots. The authors showed that game bots tend to stay in party much longer (almost indefinitely) than human players [22]. This approach also has limitations; their bot detection mechanism solely depended on party play behavior, which may not work for game bots playing individually.\nA limitation of the approaches mentioned above is that they considered a single aspect of player behavior. The features of a particular behavioral aspect may be very effective in some\nETRI Journal, Volume x, Number y, Date Yeounoh Chung et al. 3\ngames but may not work effectively in some others to detect bots. Furthermore, even if the features of the particular behavioral aspect are effective, they may not be practically applicable if collecting game data for the features overloads the game servers in service. Hence, more generic and practically applicable features need to be observed.\nAnother limitation is that they did not consider the fact that players have quite different behavior patterns. The previous work tried to discriminate human and bot players with one global model. Since there are various game playing styles, it is difficult for a single model to effectively handle all the players. The overall performance of a global model may be low and some specific types of players may not be correctly classified.\nIII. Proposed Method\nIn this section, we propose a bot detection approach based on player behavior analysis. The proposed bot detection approach works in two steps. First, players are clustered by their behavioral similarities. Second, a local model with customized bot detection rules is generated for each cluster. To describe the proposed methodology, we first explain the features selected and developed for low resolution data, and then bot detection model construction considering different types of players.\n1. Feature Selection\nIn general, behavior-based bot detection methods can yield accurate results because such methods exploit key behavioral patterns that are different in humans and game bots. However, collecting and monitoring game behavior data for every player can be very expensive. Therefore, behavioral features that are\neffective and less burdening to the systems need to be carefully chosen and developed.\nIn order to reduce the game server workloads in data collection, we select simple behavioral features that are extractable from the game data collected at a low sampling rate. Some of the simple behavioral features are attack counts, hit counts and item counts, which are either accumulated values during the sampling interval or snapshot values at the end of the each sampling interval.\nSince we assume a low resolution of the collected data, some of the informative behavioral features used in the previous researches are not used in this study. For instance, repeated moving paths and attack sequences are good features for behavior-based bot detection [17], [20], but those features require the game data sampled at a fine resolution.\nThe features are selected considering the three categories of game behavior: Battle, Collect and Move. These categories are common in MMORPGs and thus they can represent important aspects of game behavior and players with various play styles. A general bot detection approach should consider various aspects of playing behavior, because distinguishing patterns for bot detection vary greatly from game to game. Furthermore, the data sampling resolution is very low, so it needs to consider various aspects of game playing behavior.\nFor Battle category, we choose Hunting, Attack, Hit, Defense,\nAvoidance, and Recovery; for Collect category, Item, Collection and Drop; for Move category X, Y and Portal, which are very common in most MMORPGs. The features presented in Table 1 are designed based on those behaviors. So, those features are generally applicable and can be evaluated from game playing behaviors in most MMORPGs.\nAs mentioned, the selected features are just accumulated or snapshot values. For example, the attack feature, Attack, indicates how many times a player attacked within a sampling interval on average, but the feature does not convey any information on how effectively the player attacked. In order to grasp deeper meanings of player actions, we develop new features based on the selected feature set: Combat ability I, II,\n4 Yeounoh Chung et al. ETRI Journal, Volume x, Number y, Date\nIII, Collect pattern and Move pattern. The formal definitions of the developed features are shown in Table 2.\nThese features are developed to measure the effectiveness and efficiency of player behavior. Combat ability I measures how effectively a player attacks and defends, by taking the attack success rate and defense success rate. Combat ability II measures how health-efficiently a character combats based on the number of healing portion usages per hunting (killing a monster). Using a lesser number of healing portions for every hunt indicates that the player manages his or her health efficiently in combat. Combat ability III measures how spaceefficiently a player battles based on the number of hunted monsters and traveled distance. Hunting more monsters in a shorter traveled distance indicates that the player efficiently hunted monsters.\nCollect pattern measures how efficiently a player uses his or her item slots. Emptying full item slots and filling empty item slots represent efficient use of item slots. In addition, Move pattern is evaluated to observe the range of movement within a fixed time period. This feature does not measure the effectiveness or efficiency of player behavior, but there can be a correlation between the range of movements and play styles. For example, quest-oriented players would travel more distance than players with other gaming purposes\nBoth the selected and the developed features are standardized\nwith Z-scores in order to equally weight each behavioral feature. This step is of particular importance, because features have different value ranges.\n2. Player Grouping and Bot Detection Model Generation\nGame players have different gaming purposes and behavioral patterns, which results in various game play styles. So, it is necessary in behavior analysis based bot detection to consider various game play styles and use a different set of bot detection rules or a local model for each play style.\nIn this paper, we propose a bot detection methodology, concerning various game play styles in MMORPGs. We first examine three aspects (Battle, Collect and Move) of player behavior that are relevant to common MMORPG play, and group players by their behavioral similarities based on player behavior. Players who have similar gaming purposes and preferences may also exhibit similar behavioral patterns. Hence, we can group players by their game play styles using their behavioral similarities.\nFigure 1 gives an overview of the proposed methodology. We use a k-means algorithm for grouping players by their behavioral similarities. The k-means algorithm is a general clustering technique for grouping data into k clusters, for a given k. Given player data with behavioral features, the kmeans algorithm groups players who have similar behavior patterns, by maximizing intra-cluster behavioral similarities, and minimizing inter-cluster behavioral similarities. So, we can obtain k player groups, in which players have similar game playing patterns.\nFor each cluster of similar players, an SVM bot detection model is generated. The local SVM model is trained with human and bot player data from the associated cluster. SVMs are a well-known machine learning technique used in binary classification. SVMs require only a few parameters for model tuning, and the method is well-known for its low generalization\nETRI Journal, Volume x, Number y, Date Yeounoh Chung et al. 5\nerror [25]. Since the proposed method develops local models for each group, local models can be best customized to detect game bots in each player group. Such local bot detection models would more accurately and effectively detect game bots within each player group. The combination of these models can outperform an approach based on a single global model.\nIf an unknown player is given, the player is classified as a human player or a game bot, using the generated k clusters and the k SVM models. First, the most similar cluster to the player is identified. Euclidean distances between the player behavioral feature vector and cluster centroids are used as a similarity measure between players and clusters. If the player belongs to cluster i, then its local SVM model, SVMi is used. The behavioral feature vector of the player is inputted to SVMi, and the player is classified as the output of SVMi: a human player or a game bot.\nEach player group may consist of both human and bot players with similar behaviors. Therefore, a local bot detection model for a particular player group can focus more on the behavioral differences between human and bot players, and less on the behavioral differences among different play styles, which may act as noises in using a global bot detection model. Hence, we can build local detection models which are well adapted to each group with higher accuracy.\nHowever, if the number of groups is too small, players with less behavioral similarities can be clustered together. If the number of groups is too large, each cluster may contain too few players to build a bot detection model for the cluster. In such cases, the proposed method may be inaccurate. Hence, the number of clusters, k, should be carefully chosen. In this study, we tried 4 to 14 clusters and selected the number of clusters which showed the best performance using validation data. Figure 2 describes the process for finding the proper number of clusters, k. The dataset is evenly and randomly divided into 5 folds. Then, 4 folds are used for model building, and the remaining 1 fold is used for evaluating the performance of the final model. At the model building step, we first build 11 models with 3 training folds. Each model has a different number of clusters from 4 to 14. Next, each model is evaluated using the validation data. The model that produces the maximum performance is selected as the final model. The final model is the output of the model building step. Finally, the performance of the final model is evaluated with the testing data, which is independent of the data for model building.\nThroughout the experiment, we used 5-fold cross-validation to reduce statistical variance.\nV. Experiment\n1. Raw Data\nWe collected data from a popular Korean MMORPG game, titled \u201cYul-Hyul-Gang-Ho Online.\u201d The game has more than 200 million subscribers in total, with a maximum of 85,000 concurrent connections.\nMost game publishers strictly prohibit the use of game bots, but \u201cYul-Hyul-Gang-Ho Online\u201d allows players to purchase and use a game bot item, called \u201cthe Box of Black Soul.\u201d Since the game bots also perform repetitive tasks with given programmed rules as illegal games bots do, we may use the data of \u201cYul-Hyul-Gang-Ho Online\u201d for developing a bot detection methodology.\nData was collected from a game server in service for a month. In order to minimize the workloads of the game server in service, the length of sampling intervals is set to five minutes, which is a long interval to obtain descriptive behavior data.\nA brief summary of the collected behavior log data is shown in Table 3. In Table 3, the number of logs is the number of collected data log every five minutes. That is, 20,543 human players created 3,529,099 five minute data logs. There are twice more human players than game bot players, while there are 3.6 times more bot player logs than human player logs. In MMORPGs, there are generally more human players than bot players, but there are more bot players in \u201cYul-Hyul-Gang-Ho Online\u201d because the use of game bots is allowed.\nWe extract bot player instances and human player instances at a one-to-one ratio. Since there are more bot players than human players, using the entire data instances would result in biased bot detection models. In order to generate more general unbiased bot detection models, we under-sample bot player instances.\nFinally, we standardize features of data instances with Zscores in order to equally weight each behavioral feature. This step is of particular importance, because features have different value ranges. Equation 1 shows the Z-score standardization.\n\ud835\udc56 \ud835\udc67 =\n\ud835\udc53\ud835\udc56\u2212\ud835\udc5a\ud835\udc53\n\ud835\udf0e\ud835\udc53 (1)\nIn the equation, is the value of feature f of instance i, and are the average and the standard deviation of feature f of all players, respectively. is the Z-score of .\n2. Baseline and Evaluation Metrics\nIn order to compare the performance of the proposed method,\nTable 3. Number of logs and characters\nGroup Number of logs Number of players\nHuman player logs 3,529,099 20,543\nBot player logs 12,968,264 10,282\nSummation 16,497,563 30,825\n6 Yeounoh Chung et al. ETRI Journal, Volume x, Number y, Date\nwe use a global SVM bot detection model as the baseline, which does not consider game play styles. Most of the previous approaches were based on a single global model, so the model based on a single SVM is chosen as the baseline.\nWe used four evaluation metrics: Accuracy, Precision, Recall, and F1. Accuracy measures how many bots and humans are correctly identified. Precision measures how many of players detected as bots are really bots. Recall measures how many of the real game bots are detected. More formal definitions are as follows:\n= \ud835\udc47\ud835\udc43 \ud835\udc47\ud835\udc41\n\ud835\udc47\ud835\udc43 \ud835\udc47\ud835\udc41 \ud835\udc39\ud835\udc43 \ud835\udc39\ud835\udc41 (2)\n\ud835\udc43 \ud835\udc60 = \ud835\udc47\ud835\udc43\n\ud835\udc47\ud835\udc43 \ud835\udc39\ud835\udc43 (3)\n= \ud835\udc47\ud835\udc43\n\ud835\udc47\ud835\udc43 \ud835\udc39\ud835\udc41 (4)\nIn the equations, TP, TN, FP and FN are the number of real bots identified as bots, the number of humans identified as humans, the number of humans identified as bots, and the number of bots identified as humans, respectively.\nUsually, Precision and Recall tend to be inversely proportional to each other. If Precision is high, Recall is low; and vice versa. So, we observe one more measure, F1, which combines Precision and Recall as follows:\n\ud835\udc391 = \u2219 \ud835\udc43 \ud835\udc60 \u2219\n\ud835\udc43 \ud835\udc60 (5)\nThis is the harmonic mean of Precision and Recall.\n3. Bot Detection Results\nIn this experiment, we show that the proposed method outperforms the baseline. For the experiment, we use 6\ndifferent feature sets for two reasons. First, it is to verify that the superiority of the proposed method over the baseline is independent of the feature sets. Second, it is to verify that the selected and developed feature sets are effective over single aspect feature sets.\nThe 6 feature sets used in the experiment are summarized in Table 4. F12 is the 12 selected features in Section 3.1. F5 is the 5 developed features in Section 3.1. FB, FC and FM are subsets of F12, categorized as battle, collect, and move feature groups in Section 3.1, respectively. Lastly, F17 is the union of F12 and F5. F17, F12 and F5 are whole aspect feature sets, and FB, FC and FM are single aspect feature sets.\nTable 5 shows the baseline results, and Table 6 shows the proposed method results. For any feature sets, the proposed approach gives superior results to the baseline. In Accuracy, the performance of the proposed method is higher than that of the baseline under any feature sets. In Precision and Recall, the baseline is a little higher in some cases. However, in F1, a measure considering both Precision and Recall together, the proposed method shows much better performance.\nIn the case of F12, which does not include the features developed by experts, the proposed approach shows much better results than the baseline. The accuracy, precision, and recall are higher by 8.0%, 12.6% and 4.8% than those of the baseline, respectively. However, in the case of F17 where F5 is considered together with F12, the performance gap is reduced. The proposed method shows about 2% better performance in the cases of F17 and F5. From this, we may conclude that welldeveloped features from expert knowledge are effective for bot detection.\nThe performances of the single aspect feature sets are lower than those of the whole aspect feature sets, which shows why we have to consider the whole aspects of behavior. Among the single aspect features, FB gives the most accurate results in either methodology. The performance is very close to that of F12. This implies that the battle feature group may represent the most important aspect of player behavior in the game, \u201cYulHyul-Gang-Ho Online\u201d, in clustering and bot detection.\n4. Play Style Analysis\nFeature Accuracy Precision Recall F1\nWhole aspect\nF17 96.20 95.95 96.42 96.18 F12 91.50 91.68 91.35 91.51 F5 89.61 93.62 86.66 90.01\nSingle aspect\nFB 87.87 86.20 89.17 87.65 FM 72.38 71.88 72.61 72.24 FC 68.14 69.40 67.68 68.53\nIn this subsection, we analyze how distinctively the proposed approach discriminates and groups similar play style users, and how accurately the proposed approach classifies human and bot players in each play style.\nFor this purpose, we first identify the play styles of all the players. According to the Bartle Test of Gamer Psychology [26], players in MMORPGs can be classified into four categories, based on their gaming styles, as shown in Table 7.\nFor the experiment, a group of five human experts played the game more than 100 hours and was given the same raw game playing data of the players. They were asked to identify the players who had strong characteristic of Killer, Achiever or Explorer with their own expert knowledge. Player data without any strong behavioral characteristic were simply ignored and later labeled as Remainder. Since there are no features for\nsocial behavior in the collected dataset, the experts could not identify Socializer player type.\nTable 8 shows the player distribution of the three player types and the remainder. The majority of the players, both human players and game bots, are Remainder. A normal human player may not consistently play in a single play style, and thus may not be classified as one of the three player types. On the other hand, game bots continuously repeat the same programmed tasks, so can be more easily classified as one of the styles.\nWe verified how well the proposed method clusters players with different game play styles. For each feature set, we tried 4 to 14 clusters and selected the number of clusters with the best performance. Since the numbers of clusters for the best bot detection performance may be different depending on the feature sets, the numbers of clusters in the figures are different. Clustering with F17, the proposed method yields the most accurate results when the number of clusters is 4. For each of those 4 clusters, Figure 3 shows the ratio of three types, Killer, Achiever and Explorer except Remainder, in each cluster. For example, the\nFigure 3. Player type ratio by F17\nFigure 4. Player type ratio by F12\nFigure 5. Player type ratio by F5\nFigure 6. Player type ratio by FB\nFigure 7. Player type ratio by FM\nFigure 8. Player type ratio by FC\n0\n0.5\n1\nk1 k2 k3 k4\nKiller\nAchiever\nExplorer 0\n0.5\n1\nk1 k2 k3 k4 k5 k6 k7 k8 k9 k10k11k12\nKiller\nAchiever\nExplorer\n0\n0.5\n1\nk1 k2 k3 k4 k5\nKiller\nAchiever\nExplorer 0\n0.5\n1\nk1 k2 k3 k4 k5 k6\nKiller\nAchiever\nExplorer\n0\n0.5\n1\nk1 k2 k3 k4\nKiller\nAchiever\nExplorer 0\n0.5\n1\nk1 k2 k3 k4 k5 k6 k7 k8\nKiller\nAchiever\nExplorer\nTable 7. Four player types in MMORPG from the Bartle test of gamer psychology [26]\nPlayer Type Explanation\nKiller Players prefer fighting other players and engage in battles. Achiever Players who prefer to gain experiences (skill levels),\n8 Yeounoh Chung et al. ETRI Journal, Volume x, Number y, Date\nfirst cluster (k1) consists of about 55% of Killers, 45% of Achievers and 0% of Explorers. The player clustering result by F12, F5, FB, FM, and FC are also shown in Figures 4~8. And the numbers of clusters for the best performance are 12, 5, 6, 4, and 8 for F12, F5, FB, FM, and FC, respectively.\nThe clustering result by FB is the best and the results by F17, F12 and F5 are relatively good. On the other hand, the result by FM and FC are the worst. This result confirms that player types are hard to distinguish with only the move or collect feature set.\nFigure 6 by the battle feature set shows an interesting result, in which players are very distinctively separated into different clusters by their play types. This is because the three types of players, Killers, Achievers and Explorers, have distinct values of battle features. Killers are battle-oriented players, so they have the most extreme values. On the other hand, Explorers are usually quest-oriented players, so they have the least extreme values. Even though Achievers engage in battles to gain experiences and collect items, hunting is not the sole purpose of Achievers. The battle related feature values for Achievers are less extreme than those of Killers, but more extreme than those of Explorers.\nWhat is interesting is that play styles are the best separated by FB but human and bot players are not well separated, compared with the result by F17, F12 or F5 in Tables 5 and 6. Since players are best clustered by FB, FB might give the most accurate results for bot detection. However, the bot detection results are more accurate with F17, F12 or F5. This also implies that various aspects of player behavior should be considered for not only grouping players by their styles, but also analyzing player behavior for bot detection.\nNext, we analyze the classification performance of the baseline and the proposed method for each play style. Tables 9 and 10 show the bot detection accuracies for each game play styles. For example, for the Killer player group, the baseline has an accuracy of 92.42% with F17, but the proposed method has an accuracy of 95.35% with F17. The proposed approach shows better performance than the baseline in all the cases except (Explorer, F12), (Explorer, FB), (Explorer, FC) and (Remainder, FC). Since the Explorer player group is only 1.4% of the total player population, the result may not be meaningful\nin a statistical point of view, and it does not have much effect on the overall performance.\nIn addition to superiority in the overall accuracies, the proposed method is more stable. In Tables 9 and 10, the column Dev. shows the standard deviation of accuracies for Killer, Achiever and Remainder. Since the Explorer player group is 1.4% of the total player population, as mentioned, it is ignored. For example, in the case of F17, the standard deviation of the baseline for Killer, Achiever and Remainder is 1.59 but that of the proposed method is 0.64. Under any feature sets, the proposed method shows smaller variances than the baseline, which means that the proposed method more stably produced better results. It also shows that the proposed approach is very effective for detection of bots in any play styles regardless of feature sets.\nVI. Conclusion\nIn this paper, we proposed a generic bot detection methodology. In order to detect game bots with different play styles, we examined three aspects, battle, collect and move, of player behaviors which are common in MMORPGs and effective for game bot detection in a low resolution data. Then, players were grouped by their behavioral similarities. Based on the player groups, the proposed method developed a customized local model of each group for bot detection. Since local models were optimized to detect game bots in each player group, the combination of those models could improve the overall performance.\nFor comparison, the experiment was performed with the data from a game currently in service. Through the experiment, it was verified that the proposed feature sets were effective and the proposed local model approach produced more accurate and stable results for all the play styles.\nVII. References\n[1] P. Hingston, \"A Turing Test for Computer Game Bots,\"\nIEEE Transactions on Computational Intelligence and AI in Games, vol. 1, no. 3, Sep. 2009, pp. 169-186.\nETRI Journal, Volume x, Number y, Date Yeounoh Chung et al. 9\n[2] A. Cornelissen and F. Grootjen, \"A Modern Turing Test:\nBot Detection in MMORPGs,\" Proc. BNAIC \u201908, 2008, pp. 49-55.\n[3] L.V. Ahn, M. Blum, N.J. Hopper, and J. Langford,\n\"CAPTCHA: Using Hard AI Problems for Security,\" Proc. EUROCRYPT, 2003, pp. 294-311. [4] N.W. Lo and S.H. Chen, \"A Study of Anti-robot Agent\nMechanisms and Process on Online Games,\" Proc. ISI \u201908, 2008, pp. 203-205. [5] P. Golle and N. Ducheneaut, \"Preventing bots from\nplaying online games,\" Computers in Entertainment, vol. 3, no. 3, July 2005, p. 3. [6] M.V. Kesteren, J. Langevoort, and F. Grootjen,\"A step in\nthe right direction: Botdetection in MMORPGs using movement analysis,\" Proc. BNAIC \u201909. 2009. [7] K.T. Chen, A. Liao, H.K. Pao, and H.H. Chu, \"Game Bot\nDetection Based on Avatar Trajectory,\" Proc. IFIP ICEC \u201908, 2008, pp. 94-105. [8] K.T. Chen, H.K. Pao, and H.C. Chang, \"Game Bot\nIdentification Based on Manifold Learning,\" Proc. NetGames \u201908, 2008, pp. 21-26. [9] P. Golle and N. Ducheneaut. \"Keeping Bots out of Online\nGames,\" Proc. ACE \u201905, 2005, pp. 262-265.\n[10] G. Mori and J. Malik, \"Recognizing Objects in\nAdversarial Clutter: Breaking a Visual CAPTCHA,\" Proc. CVPR \u201903, 2003, pp. 134-141. [11] J. Yan and A.S.E Ahmad, \"Breaking Visual CAPTCHAs\nwith Naive Pattern Recognition Algorithms,\" Proc. ACSAC \u201907, 2007, pp. 279-291. [12] D.Y. Lin, Anti-robot Agent Mechanisms on Online\nGames\u2500 A Game Level Approach, master\u2019s thesis, National Taiwan University of Science and Technology, 2007. [13] M.L. Mauldin, \"CHATTERBOTs, TINYMUDs, and the\nTuring test: Entering the Loebner Prize Competition,\" Proc. NCAI \u201994, 1994, pp. 16-21.\n[14] E. Castronova, D. Williams, C. Shen, R. Ratan, L. Xiong,\nand Y. Huang, \"As real as real? Macroeconomic behavior in a large-scale virtual world,\" New Media & Society, vol. 11, no. 5, July 2009, pp.685-707. [15] K.T. Chen, J.W. Jiang, P. Huang, H.H. Chu, C.L. Lei, and\nW.C. Chen, \"Identifying MMORPG Bots: A Traffic Analysis Approach,\" Proc. ACE \u201906, 2006. [16] S. Hilaire, H.C. Kim, and C.K. Kim, \"How to deal with\nbot scum in MMORPGs?\" Proc. CQR \u201910, 2010, pp.1-6.\n[17] R.Thawonmas, Y. Kashifuji, and K.T. Chen, \"Detection\nof MMORPG Bots Based on Behavior Analysis,\" Proc. ICACET \u201908, 2008, pp. 91-94. [18] M. Varvello, and G.M. Voelker. \"Second life: a social\nnetwork of humans and bots,\" Proc. NOSSDAV \u201910, 2010,\npp. 9-14.\n[19] M.A. Ahmad, B. Keegan, J. Srivastava, D. Williams, and\nN. Contractor, \"Mining for Gold Farmers: Automatic Detection of Deviant Players in MMOGs,\" Proc. CSE \u201909, 2009, pp. 340-345. [20] S. Mitterhofer, C. Platzer, C. Kruegel, and E. Kirda,\n\"Server-Side Bot Detection in Massively Multiplayer Online Games,\" IEEE Transactions on Security & Privacy, vol. 7, no. 3, May-June 2009, pp. 29-36. [21] C. Platzer, \"Sequence-Based Bot Detection in Massive\nMultiplayer Online Games,\" Proc. ICICS \u201911, 2011, pp. 1- 5. [22] A.R. Kang, J. Woo, J. Park, and H.K. Kim, \"Online game\nbot detection based on party-play log analysis,\" Computers & Mathematics with Applications, 2012. [23] C. Thurau and C. Bauckhage, \"Analyzing the Evolution\nof Social Groups in World of Warcraft\u00ae ,\" Proc. CIG, 2010, pp. 170-177. [24] A. Mislove, M. Marcon, K.P. Gummadi, P. Druschel, and\nB. Bhattacharjee, \"Measurement and Analysis of Online Social Networks,\" Proc. SIGCOMM, 2007, pp. 29-42. [25] C.J. Burges, \"A Tutorial on Support Vector Machines for\nPattern Recognition,\" Data Mining and Knowledge Discovery, vol.2, no. 2, June 1998, pp. 121-167. [26] Richard Bartle, Designing Virtual Worlds, New Riders\nPress, Indiana, 2004.\nYeounoh Chung received his BS in Electrical and Computer Engineering and his ME in Computer Science from Cornell University, Ithaca, USA, in 2008 and 2009, respectively. He is currently a researcher at Sungkyunkwan University, Suwon, Rep. of Korea. His current research interests\ninclude statistical machine learning and data mining\nChang-yong Park received his BS in Computer Engineering from Dongguk University, Gyeongju, Rep. of Korea, in 2010. He is currently pursuing his MS in Computer Engineering at Sungkyunkwan University, Suwon, Rep. of Korea. His research interests include software\nengineering, context-aware recommender system, and latent variable modeling.\n10 Yeounoh Chung et al. ETRI Journal, Volume x, Number y, Date\nNoo-ri Kim received his BS in Computer Engineering from Sungkyunkwan University, Suwon, Rep. of Korea, in 2013. He is currently pursuing his MS in Computer Engineering at Sungkyunkwan University. His research interests include software engineering and latent variable modeling.\nHana Cho received her BS in Computer Engineering from Sungkyunkwan University, Suwon, Rep. of Korea, in 2013. She is currently pursuing her MS in\nComputer Engineering at Sungkyunkwan University. Her research interests include data mining and artificial intelligence.\nTaebok Yoon received his BS in Computer Science from Kongju National University, Kongju, Rep. of Korea, in 2001. He received his MS and PhD in Computer Engineering from Sungkyunkwan University in 2005 and 2010, respectively. He is now an assistant\nprofessor at Seoil University, Seoul, Rep. of Korea. His research interests include user modeling, intelligent system, and game artificial intelligence.\nHunjoo Lee received his BS, MS, and PhD in computer science & engineering from Chung-Ang University, Seoul, Rep. of Korea in 1991, 1993, and 1998, respectively. In 1998, he joined ETRI, Daejeon, Rep. of Korea. He was a postdoctoral researcher at Iowa State University, Iowa, USA, from 2001 to 2002.\nHis current research interests include game artificial intelligence, serious game, and smart content.\nJee-Hyong Lee received his BS, MS, and PhD in Computer Science from the Korea Advanced Institute of Science and Technology (KAIST), Daejeon, Rep. of Korea, in 1993, 1995, and 1999, respectively. From 2000 to 2002, he was an international fellow at SRI International,\nUSA. He joined Sungkyunkwan University, Suwon, Rep. of Korea, as a faculty member in 2002. His research interests include fuzzy theory and application, intelligent system, and machine learning."}], "references": [{"title": "A Modern Turing Test: Bot Detection in MMORPGs", "author": ["A. Cornelissen", "F. Grootjen"], "venue": "Proc. BNAIC \u201908, 2008, pp. 49-55.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2008}, {"title": "CAPTCHA: Using Hard AI Problems for Security", "author": ["L.V. Ahn", "M. Blum", "N.J. Hopper", "J. Langford"], "venue": "Proc. EUROCRYPT, 2003, pp. 294-311.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2003}, {"title": "A Study of Anti-robot Agent Mechanisms and Process on Online Games", "author": ["N.W. Lo", "S.H. Chen"], "venue": "Proc. ISI \u201908, 2008, pp. 203-205.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2008}, {"title": "Preventing bots from playing online games", "author": ["P. Golle", "N. Ducheneaut"], "venue": "Computers in Entertainment, vol. 3, no. 3, July 2005, p. 3.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "Grootjen,\"A step in the right direction: Botdetection in MMORPGs using movement analysis,", "author": ["M.V. Kesteren", "J. Langevoort"], "venue": "Proc. BNAIC", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "Game Bot Detection Based on Avatar Trajectory", "author": ["K.T. Chen", "A. Liao", "H.K. Pao", "H.H. Chu"], "venue": "Proc. IFIP ICEC \u201908, 2008, pp. 94-105.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2008}, {"title": "Game Bot Identification Based on Manifold Learning", "author": ["K.T. Chen", "H.K. Pao", "H.C. Chang"], "venue": "Proc. NetGames \u201908, 2008, pp. 21-26.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2008}, {"title": "Keeping Bots out of Online Games", "author": ["P. Golle", "N. Ducheneaut"], "venue": "Proc. ACE \u201905, 2005, pp. 262-265.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2005}, {"title": "Recognizing Objects in Adversarial Clutter: Breaking a Visual CAPTCHA", "author": ["G. Mori", "J. Malik"], "venue": "Proc. CVPR \u201903, 2003, pp. 134-141.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2003}, {"title": "Breaking Visual CAPTCHAs with Naive Pattern Recognition Algorithms", "author": ["J. Yan", "A.S.E Ahmad"], "venue": "Proc. ACSAC \u201907, 2007, pp. 279-291.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2007}, {"title": "Anti-robot Agent Mechanisms on Online Games\u2500 A Game Level Approach, master\u2019s thesis, National Taiwan", "author": ["D.Y. Lin"], "venue": "University of Science and Technology,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2007}, {"title": "CHATTERBOTs, TINYMUDs, and the Turing test: Entering the Loebner Prize Competition", "author": ["M.L. Mauldin"], "venue": "Proc. NCAI \u201994, 1994, pp. 16-21.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1994}, {"title": "As real as real? Macroeconomic behavior in a large-scale virtual world", "author": ["E. Castronova", "D. Williams", "C. Shen", "R. Ratan", "L. Xiong", "Y. Huang"], "venue": "New Media & Society, vol. 11, no. 5, July 2009, pp.685-707.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2009}, {"title": "Identifying MMORPG Bots: A Traffic Analysis Approach", "author": ["K.T. Chen", "J.W. Jiang", "P. Huang", "H.H. Chu", "C.L. Lei", "W.C. Chen"], "venue": "Proc. ACE \u201906, 2006.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2006}, {"title": "How to deal with bot scum in MMORPGs?", "author": ["S. Hilaire", "H.C. Kim", "C.K. Kim"], "venue": "Proc. CQR \u201910,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "Detection of MMORPG Bots Based on Behavior Analysis", "author": ["R.Thawonmas", "Y. Kashifuji", "K.T. Chen"], "venue": "Proc. ICACET \u201908, 2008, pp. 91-94.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2008}, {"title": "Second life: a social network of humans and bots", "author": ["M. Varvello", "G.M. Voelker"], "venue": "Proc. NOSSDAV \u201910, 2010, pp. 9-14.", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2010}, {"title": "Mining for Gold Farmers: Automatic Detection of Deviant Players in MMOGs", "author": ["M.A. Ahmad", "B. Keegan", "J. Srivastava", "D. Williams", "N. Contractor"], "venue": "Proc. CSE \u201909, 2009, pp. 340-345.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2009}, {"title": "Server-Side Bot Detection in Massively Multiplayer Online Games", "author": ["S. Mitterhofer", "C. Platzer", "C. Kruegel", "E. Kirda"], "venue": "IEEE Transactions on Security & Privacy, vol. 7, no. 3, May-June 2009, pp. 29-36.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2009}, {"title": "Sequence-Based Bot Detection in Massive Multiplayer Online Games", "author": ["C. Platzer"], "venue": "Proc. ICICS \u201911, 2011, pp. 1- 5.", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2011}, {"title": "Online game bot detection based on party-play log analysis", "author": ["A.R. Kang", "J. Woo", "J. Park", "H.K. Kim"], "venue": "Computers & Mathematics with Applications, 2012.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2012}, {"title": "Analyzing the Evolution of Social Groups in World of Warcraft\u00ae", "author": ["C. Thurau", "C. Bauckhage"], "venue": "Proc. CIG, 2010, pp. 170-177.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2010}, {"title": "Measurement and Analysis of Online Social Networks", "author": ["A. Mislove", "M. Marcon", "K.P. Gummadi", "P. Druschel", "B. Bhattacharjee"], "venue": "Proc. SIGCOMM, 2007, pp. 29-42.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2007}, {"title": "A Tutorial on Support Vector Machines for Pattern Recognition", "author": ["C.J. Burges"], "venue": "Data Mining and Knowledge Discovery, vol.2, no. 2, June 1998, pp. 121-167.", "citeRegEx": "25", "shortCiteRegEx": null, "year": 1998}], "referenceMentions": [{"referenceID": 2, "context": "[1], [4]-[6].", "startOffset": 5, "endOffset": 8}, {"referenceID": 4, "context": "[1], [4]-[6].", "startOffset": 9, "endOffset": 12}, {"referenceID": 0, "context": "A promising alternative to the traditional bot detection approaches is behavior analysis of game playing [2].", "startOffset": 105, "endOffset": 108}, {"referenceID": 10, "context": "Another limitation of the previous work is that they only examines one or two characteristic behaviors for bot detection, rather than whole aspects of behavior [12], [16], [22].", "startOffset": 160, "endOffset": 164}, {"referenceID": 14, "context": "Another limitation of the previous work is that they only examines one or two characteristic behaviors for bot detection, rather than whole aspects of behavior [12], [16], [22].", "startOffset": 166, "endOffset": 170}, {"referenceID": 20, "context": "Another limitation of the previous work is that they only examines one or two characteristic behaviors for bot detection, rather than whole aspects of behavior [12], [16], [22].", "startOffset": 172, "endOffset": 176}, {"referenceID": 1, "context": "ETRI Journal, Volume x, Number y, Date based on party play (party duration) [3], then the detection mechanism works well only with game bots in parties, but does not effectively work for players who do not party nor share their collections.", "startOffset": 76, "endOffset": 79}, {"referenceID": 10, "context": "bot detection approaches did not address this concern [12], [17], [20].", "startOffset": 54, "endOffset": 58}, {"referenceID": 15, "context": "bot detection approaches did not address this concern [12], [17], [20].", "startOffset": 60, "endOffset": 64}, {"referenceID": 18, "context": "bot detection approaches did not address this concern [12], [17], [20].", "startOffset": 66, "endOffset": 70}, {"referenceID": 2, "context": "The repeated Turing test, such as CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) provides a good way to detect game bots [4], [5].", "startOffset": 159, "endOffset": 162}, {"referenceID": 3, "context": "The repeated Turing test, such as CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) provides a good way to detect game bots [4], [5].", "startOffset": 164, "endOffset": 167}, {"referenceID": 4, "context": "The CAPTCHA authentication is widely used in MMORPGs for bot detection [6]-[11].", "startOffset": 71, "endOffset": 74}, {"referenceID": 9, "context": "The CAPTCHA authentication is widely used in MMORPGs for bot detection [6]-[11].", "startOffset": 75, "endOffset": 79}, {"referenceID": 11, "context": "However, Q&A based approaches interfere with normal game play, and some advanced game bots provide an evasion function for CAPTCHA authentication [13], [15].", "startOffset": 146, "endOffset": 150}, {"referenceID": 13, "context": "However, Q&A based approaches interfere with normal game play, and some advanced game bots provide an evasion function for CAPTCHA authentication [13], [15].", "startOffset": 152, "endOffset": 156}, {"referenceID": 10, "context": "[12] traced game data packets for bot detection.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "measures based on network traffic analysis are less obtrusive to human players than Turing test or anti-bot software [14], but they can cause network overload and lags in game play [22].", "startOffset": 117, "endOffset": 121}, {"referenceID": 20, "context": "measures based on network traffic analysis are less obtrusive to human players than Turing test or anti-bot software [14], but they can cause network overload and lags in game play [22].", "startOffset": 181, "endOffset": 185}, {"referenceID": 20, "context": "This can cause inconveniences for players, such as collisions with operating systems [22].", "startOffset": 85, "endOffset": 89}, {"referenceID": 18, "context": "In many cases, such bot detection mechanism can be evaded by running games in guest mode on an administrator account [20].", "startOffset": 117, "endOffset": 121}, {"referenceID": 14, "context": "play behavior [16]-[19].", "startOffset": 14, "endOffset": 18}, {"referenceID": 17, "context": "play behavior [16]-[19].", "startOffset": 19, "endOffset": 23}, {"referenceID": 18, "context": "can easily introduce some irregularities to bots\u2019 movement patterns [20].", "startOffset": 68, "endOffset": 72}, {"referenceID": 10, "context": "Other features that are preferred for bot detection are attack sequences [12], [21] and social sequences [18], [23], [24], because bots usually have regular patterns in those features.", "startOffset": 73, "endOffset": 77}, {"referenceID": 19, "context": "Other features that are preferred for bot detection are attack sequences [12], [21] and social sequences [18], [23], [24], because bots usually have regular patterns in those features.", "startOffset": 79, "endOffset": 83}, {"referenceID": 16, "context": "Other features that are preferred for bot detection are attack sequences [12], [21] and social sequences [18], [23], [24], because bots usually have regular patterns in those features.", "startOffset": 105, "endOffset": 109}, {"referenceID": 21, "context": "Other features that are preferred for bot detection are attack sequences [12], [21] and social sequences [18], [23], [24], because bots usually have regular patterns in those features.", "startOffset": 111, "endOffset": 115}, {"referenceID": 22, "context": "Other features that are preferred for bot detection are attack sequences [12], [21] and social sequences [18], [23], [24], because bots usually have regular patterns in those features.", "startOffset": 117, "endOffset": 121}, {"referenceID": 20, "context": "party much longer (almost indefinitely) than human players [22].", "startOffset": 59, "endOffset": 63}, {"referenceID": 15, "context": "For instance, repeated moving paths and attack sequences are good features for behavior-based bot detection [17], [20], but those features require the game data sampled at a fine resolution.", "startOffset": 108, "endOffset": 112}, {"referenceID": 18, "context": "For instance, repeated moving paths and attack sequences are good features for behavior-based bot detection [17], [20], but those features require the game data sampled at a fine resolution.", "startOffset": 114, "endOffset": 118}, {"referenceID": 23, "context": "5 error [25].", "startOffset": 8, "endOffset": 12}], "year": 2013, "abstractText": "Yeounoh Chung et al. 1 An approach for game bot detection in MMORPGs is proposed based on the analysis of game playing behavior. Since MMORPGs are large scale games, users can play in various ways. This variety in playing behavior makes it hard to detect game bots based on play behaviors. In order to cope with this problem, the proposed approach observes game playing behaviors of users and groups them by their behavioral similarities. Then, it develops a local bot detection model for each player group. Since the locally optimized models can more accurately detect game bots within each player group, the combination of those models brings about overall improvement. For a practical purpose of reducing the workloads of the game servers in service, the game data is collected at a low resolution in time. Behavioral features are selected and developed to accurately detect game bots with the low resolution data, considering common aspects of MMORPG playing. Through the experiment with the real data from a game currently in service, it is shown that the proposed local model approach yields more accurate results.", "creator": "Microsoft\u00ae Word 2010"}}}