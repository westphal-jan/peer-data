{"id": "1509.08088", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Sep-2015", "title": "Approximation and Heuristic Algorithms for Probabilistic Physical Search on General Graphs", "abstract": "we strongly consider an agent cautiously seeking to freely obtain an item, potentially equally available at different locations in a different physical environment. hopefully the traveling search costs between local locations are known in advance, even but there is only considerable probabilistic knowledge regarding the possible commodity prices of capturing the item at just any uniquely given location. given fulfilling such expectations a setting, the problem is to find also a plan that sufficiently maximizes simultaneously the subjective probability return of acquiring the good while minimizing excessive both travel and purchase costs. sample applications perhaps include agents in search - depth and - locate rescue objectives or advanced exploration missions, e. g., orbiting a rover on mars normally seeking to mine underneath a specific mineral. already these probabilistic physical search problems have been previously studied, but later we briefly present the sophisticated first approximation and heuristic algorithms rigorous for problems solving the such problems on many general synthetic graphs. perhaps we may establish an interesting connection developed between these problems thoroughly and classical serial graph - search layout problems, developments which substantially led us explicitly to provide the approximation design algorithms rigorous and hardness of such approximation results for all our settings. we further mentally suggest several heuristics for practical use, justify and demonstrate near their commercial effectiveness practically with simulation diagrams on real binary graph structure patterns and synthetic graphs.", "histories": [["v1", "Sun, 27 Sep 2015 11:56:00 GMT  (1223kb,D)", "http://arxiv.org/abs/1509.08088v1", "17 pages, 5 figures"]], "COMMENTS": "17 pages, 5 figures", "reviews": [], "SUBJECTS": "cs.MA cs.AI", "authors": ["noam hazon", "mira gonen", "max kleb"], "accepted": false, "id": "1509.08088"}, "pdf": {"name": "1509.08088.pdf", "metadata": {"source": "CRF", "title": "Approximation and Heuristic Algorithms for Probabilistic Physical Search on General Graphs", "authors": ["Noam Hazon", "Mira Gonen"], "emails": ["noamh@ariel.ac.il", "mirag@ariel.ac.il", "maxkleb@gmail.com"], "sections": [{"heading": "Introduction", "text": "An autonomous intelligent agent often needs to explore its environment and choose among different available alternatives. In many physical environments the exploration is costly, and the agent also faces uncertainty regarding the price of the possible alternatives. For example, consider a traveling purchaser seeking to obtain an item [12]. While there may be prior knowledge regarding candidate stores (e.g., based on search history), the actual price at any given site may only be determined upon reaching the site. In another domain, consider a Rover robot seeking to mine a certain mineral on the face of Mars. While there may be prior knowledge regarding candidate mining sites\nar X\niv :1\n50 9.\n08 08\n8v 1\n[ cs\n(e.g., based on satellite images), the actual cost associated with the mining at any given location, e.g., in terms of battery consumption, may depend on the exact conditions at each site (e.g., soil type, terrain, etc.), and hence are fully known only upon reaching the site.\nThese scenarios are referred to as probabilistic physical search problems, since there is a prior probabilistic knowledge regarding the price of the possible alternatives at each site, and traveling for the purpose of observing a price typically entails a cost. Furthermore, exploration and obtaining the item results in the expenditure of the same type of resource. The purchaser\u2019s money is used not only to obtain the item but also for traveling from one potential store to another; the robot\u2019s battery is used not only for mining the mineral but also for traveling from one potential location to another. Thus, the agent needs to carefully plan its exploration and balance its use of the available budget between the exploration cost and the purchasing cost.\nThis paper focuses on the development of efficient exploration strategies for probabilistic physical search problems on graphs. The analysis of such problems was initiated by [1, 10], who showed that it is (computationally) hard to find the optimal solution on general graphs. Accordingly, they provide a thorough analysis of physical search problems on one-dimensional path graphs, both for single and multi-agent settings However, many real-world physical environments may only be represented by two-dimensional graphs. For example, the Mars rover can freely move directly from any possible mining location to another (with an associated travel cost), while in path graphs the robot is restricted to move only to the two adjacent neighbors of its current location. Our work thus handles probabilistic physical search problems on general graphs. To the best of our knowledge, our is the first to do this.\nWe consider two variants of the problem. The first variant, coined Max-Probability, considers an agent that is given an initial budget for the task (which it cannot exceed) and needs to act in a way that maximizes the probability it will complete its task (e.g., reach at least one opportunity with a budget large enough to successfully buy the product). In the second variant, coined Min-Budget, we are required to guarantee some predetermined success probability, and the goal is to minimize the initial budget necessary in order to achieve the said success probability.\nSince previous work showed that probabilistic physical search problems are hard on general graphs, we either need to consider approximations with guaranteed bounds or heuristics with practical running time. We do both. We first establish an interesting connection between Max-Probability and the Deadline-TSP problems [4], and as a result we are able to provide an Oplog nq approximation for the former, based on an Oplog nq approximation for the latter, with the only requirement that the probabilities are not too small. We then show a 5 ` approximation, for every \u0105 0, for the special case of Min-Budget with equal purchasing costs, equal single probabilities, and a hardness of approximation within a ratio of 1.003553 for the general Min-Budget problem. We then consider heuristics for practical use. We suggest two families of heuristics, linear-time and exponential-time heuristics. We evaluate the performance of our heuristics through simulations on graphs extracted from a real network and on synthetic graphs. We found that our no-backtrack branch-and-bound algorithm is able to efficiently solve very large instances while producing solutions that are very close to optimal, even though it has a theoretical exponential worst-case running time. Our\nant-colony based heuristic, which has a linear worst-case running time, does not lag much behind."}, {"heading": "Related Work", "text": "Models of search processes with prior probabilistic knowledge have been studied extensively in the economic literature [16, 11]. However, these economic-based search models assume that the cost associated with observing a given opportunity is stationary, i.e., does not change along the search process. In our settings the agent is operated in a physical environment. That is, the distances to other sites depends on the agent\u2019s position, and thus when the agent travels to explore other sites the cost of traveling to other sites changes.\nChanging search costs has been considered in the computer science domain traditionally in the contexts of the Prize-Collecting Traveling Salesman problem [3] and its variants. These problems, while related, fundamentally differ from our model in that the traveling budget and the prizes in these models are distinct, with different currencies. Thus, expending the travel budget does not, and cannot affect the prize collected at a node. In our work, in contrast, traveling and buying use the same resource (e.g. battery power). The Deadline-TSP [4] problem, which is a generalization of the Orienteering problem [15], is much more relevant to our settings, and in the next section we establish a connection between the Max-Probability and the Deadline-TSP problems.\nThe work most related to ours is the work of [10], who introduced the probabilistic physical search problems and provided a comprehensive analysis of the problems on one-dimensional path graphs, both for single [1] and multi-agent settings [9]. Recently, [6] presented an MILP formulation and a branch-and-bound optimal algorithm for general graphs, which work only if the graph is complete. In a different paper, [7] investigate the minimal number of agents required to solve Max-Probability and MinBudget problems on a path and in a 2-dimensional Euclidean space.\nFrom a broader perspective, our search problems relate to planning, scheduling and path planning with uncertainty. We refer the reader to [10] for a comprehensive overview of relevant works and how they relate to probabilistic physical search."}, {"heading": "Preliminaries", "text": "We are given a graph G \u201c pV,Eq, whose vertices represent the sites where an item is available (i.e. stores) and the edges represent the connections between the sites. We are also given a weight function w on the edges w : E \u00d1 R`, which determines the travel costs between any two sites. W.l.o.g. (without loss of generality) we assume that the agent\u2019s initial location is at one of the sites, denoted by v1, and the item cannot be obtained at this site. The cost of obtaining the item at each site v P V is a random variable Cv with an associated probability mass function pvpciq for 1 \u010f i \u010f k, which gives the probability that obtaining the item will cost ci at site v. For ease of notation, we assume that all sites have k cost values (if a site v has fewer cost values then we can add arbitrary cost values ci with pvpciq \u201c 0). Hence, with a probability of 1 \u00b4\n\u0159k i\u201c1 pvpciq the item cannot be obtained at a given site v. Note that the actual cost at any site is only revealed once the agent reaches the site. The total cost for the agent includes both the traveling cost and the cost of obtaining the item. The agent travels along a path P \u201c xv1, . . . , v`y where pvi, vi`1q P E, which is an ordered multiset of vertices. That is, vi P P represents the i-th vertex of the path, and thus it is possible that for i \u2030 j, vi \u201c vj . Notice that we allow the agent to visit a site v multiple times if needed. However, the probability pvpciq of obtaining the item at cost ci will be counted only once - specifically, the first time the agent reaches v with a remaining budget of at least ci. The cost of traveling a path P \u201c xv1, . . . , v`y is \u0159`\u00b41 i\u201c1 wpvi, vi`1q, hereafter denoted wP . Given these inputs, the goal is to find a path that maximizes the probability of obtaining the item, while minimizing the necessary budget. The standard approach in such multi-criterion optimization problems is to optimize one of the objectives while bounding the other. In our case, we get two concrete problem formulations (following [10]):\n1. Max-Probability: given a total initial budget B, maximize the probability of obtaining the item.\n2. Min-Budget: given a success probability psucc, minimize the budget needed to guarantee the item will be obtained with a probability of at least psucc."}, {"heading": "Max-Probability", "text": "In this section we provide anOplog nq approximation algorithm for the Max-probability problem, when the probabilities are not too small. We first consider a restricted case of the Max-Probability problem, and then we show how to extend our analysis to the general case. Our algorithm is built on the approximation algorithm of [4] for the DeadlineTSP problem that they defined as follows:\nDefinition 1 Given a weighted graph G \u201c pV,Eq on n nodes, with a start node r, a prize function \u03c0 : V \u00d1 Z`, deadlines D : V \u00d1 Z`, and a length function ` : E \u00d1 Z`, find a path starting at r that maximizes the total prize, where a path starting at r collects the prize \u03c0pvq at node v if it reaches v before Dpvq.\nIf P is a path found by an algorithm for the Deadline-TSP,let V pPq denote the set of nodes visited by P before their deadline."}, {"heading": "The case of single probabilities", "text": "We begin by providing an approximation algorithm for the case where k \u201c 1. That is, in each site either the item can be obtained at a given cost with a given probability, or not available at all. We abuse the notation and use cv to denote the (single) cost of the item at site v, and pv to denote the probability of obtaining the item there.\nOur goal is to maximize the probability of success using a given budget. That is, the probability that the agent will be able to succeed in at least one site, and that the total cost is at most the given budget B. We may also phrase our objective as minimizing the\nfailure probability. Formally, we would like to find a path P \u201c xv1, . . . , v`y with a set of vertices V pPq \u010e P such that:\n\u2022 wP \u010f B.\n\u2022 For all vj P Pztv1u, if vj P V pPq then B \u00b4 \u0159j\u00b41 i\u201c1 wpvi, vi`1q \u011b cv and if\nvj R V pPq then B \u00b4 \u0159j\u00b41 i\u201c1 wpvi, vi`1q \u0103 cv .\n\u2022 For all vi \u201c vj P P , if i \u0103 j and vi P V pPq, it holds that vj R V pPq.\n\u2022 \u015b vPV pPqp1\u00b4 pvq is minimal.\nHowever,\nargmin P t\n\u017a\nvPV pPq p1\u00b4 pvqu \u201c\nargmin P tlogp\n\u017a\nvPV pPq p1\u00b4 pvqqu \u201c\nargmax P t\u00b4 logp\n\u017a\nvPV pPq p1\u00b4 pvqqu \u201c\nargmax P t\n\u00ff\nvPV pPq \u00b4 logp1\u00b4 pvqu (1)\nTherefore it is suffice to find a path such that \u0159 vPV pPq\u00b4 logp1\u00b4 pvq is maximal. Since we represent our objective as an optimization over summation we can convert every instance of our problem into an instance of the Deadline-TSP problem and run the approximation algorithm of [4]. This is not straightforward, since the Deadline-TSP is defined over prizes from Z` but due to our conversion the prizes will not be necessarily integers 1. Lemma 1 shows that we can overcome this challenge, if we bound the size of the prizes by any small constant.\nLemma 1 If there is an r-approximation algorithm for the Deadline-TSP problem where the prizes are integers, then there is an Oprq-approximation algorithm for the Deadline-TSP problem where the prizes are not necessarily integers, but there is a lower bound of 1{c on these prizes, for any constant c larger than 0.\nProof. Given an instance with prizes \u03c0pvq for every vertex v, that are not necessarily integers, let \u03c01pvq \u201c t\u03c0pvqu if \u03c0pvq \u011b 1, and 1 otherwise. Let OPT be the value of the optimal solution with the original prizes and POPT an optimal path. OPT 1 and POPT 1 are similarly defined with the scaled prizes \u03c01pvq. Then,\nOPT 1 \u201c \u00ff vPV pPOPT 1 q \u03c01pvq \u011b\n\u00ff\nvPV pPOPT q \u03c01pvq\n\u011b \u00ff\nvPV pPOPT q\n\u02c6\n\u03c0pvq 2\n\u02d9\n\u201c 1 2 OPT. (2)\n1Although the lengths of edges in the Deadline-TSP problem are integers, and in the Max-Probability problem they are not necessarily so, we note that they do not play any role in the optimization process.\nThe last inequality is true since \u03c01pvq \u011b 1, thus by rounding we lose at most a factor of 2. Now, suppose we have an r-approximation algorithm for the Deadline-TSP problem that uses rounded integer prizes. Let Alg1 be the total prize collected by this algorithm and PAlg1 the path returned by this algorithm. Clearly, Alg1 \u011b 1r \u00a8OPT\n1. If we use the path PAlg1 with the non-rounded prizes we will collect a different total prize, denoted Alg. If c \u010f 1 then no prize has been rounded up, and according to Equation 2,\nAlg \u011b Alg1 \u011b 1 r \u00a8OPT 1 \u011b 1 2r \u00a8OPT. (3)\nIf c \u0105 1 then in the rounding process each prize of a node in V pPAlg1q is increased by at most 1\u00b4 1{c, so it holds that\nAlg \u011b Alg1 \u00b4 |V pPAlg1q| \u00a8 p1\u00b4 1{cq \u011b Alg1 \u00b4Alg1 \u00a8 p1\u00b4 1{cq \u201c Alg1 \u00a8 1{c\n\u011b 1 r \u00a8 1 c \u00a8OPT 1 \u011b 1 2r \u00a8 c \u00a8OPT. (4)\nTherefore, the lemma immediately follows. l\nWe are now ready to present the details of our conversion and show how it guarantees an approximation ratio of Oplog nq. The idea is that the probabilities correspond to prizes and the costs correspond to deadlines, but the challenge here is to keep the same approximation ratio.\nTheorem 1 The Max-Probability problem for the case of single probabilities can be approximated within a ratio of Oplog nq, for any instance of the problem for which it holds that pv \u011b 1{c for each probability pv , where c is any constant larger than 1.\nProof. Given an instance of the Max-Probability in which p \u011b 1{c for every probability p, we construct an instance of Deadline-TSP as follows. Each site of the MaxProbability is a node of Deadline-TSP, r \u201c v1, and the weight function w becomes the length function `. For each site v, we set the prize at the corresponding node, \u03c0pvq, to \u00b4 logp1\u00b4pvq and the deadlineDpvq toB\u00b4cv . Note that in the Deadline-TSP problem when starting at r the time is 0, and it increases when traveling the path. However, in the Max-Probability problem the budget, B, is maximal when starting at v1, and it decreases when traveling the path. Therefore, by setting Dpvq to B \u00b4 cv we can consider the budget already spent instead of the remaining budget. The budget already spent is 0 when starting at v1, and increases when traveling the path. When reaching a node v in which Dpvq \u201c B \u00b4 cv , if the budget already spent is at most Dpvq the item can be bought at v since the remaining budget is at least cv .\nNow, we apply the approximation algorithm of [4] to the Deadline-TSP problem with the instance described above, and we use the path returned as a solution for MaxProbability. Obviously, p \u011b 1{c implies that\u00b4 logp1\u00b4pq \u011b \u00b4 logp1\u00b41{cq. For every constant c \u0105 1 a constant c1 \u2030 0 exists such that \u00b4 logp1\u00b4 1{cq \u011b 1{c1. (For instance take c1 \u201c \u00b4 1logp1\u00b41{cq ). Therefore, by Lemma 1 we can use the approximation algorithm of [4] even for non-integer prizes and lose only a factor of c1 in the approximation ratio.\nIt remains to show that the approximation ratio is Oplog nq. Let p\u02da be the optimal probability of the instance of Max-Probability problem. Let T\u02da be the optimal total prize of the Deadline-TSP problem on the converted instance, and let P\u02da be a path returned by an optimal algorithm for the problem. Similarly, let T apx be the total prize collected by the approximate algorithm for the Deadline-TSP problem on the converted instance, and let Papx be the path returned by the approximation algorithm. Finally, let papx be the probability achieved by using Papx for solving MaxProbability. According to our conversion, T\u02da \u201c \u0159\nvPV pP\u02daq\u00b4 logp1\u00b4pvq, and T apx \u201c \u0159\nvPV pPapxq\u00b4 logp1\u00b4pvq. By Equation (1) we find that p\u02da \u201c 1\u00b4 \u015b vPV pP\u02daqp1\u00b4pvq, and by our construction papx \u201c 1\u00b4 \u015b\nvPV pPapxqp1\u00b4 pvq. According to [4], a constant d exists such that T\u02da{pd \u00a8 log nq \u010f T apx. To simplify notations, let r \u201c 1{pd \u00a8 log nq. Therefore,\n\u00ff\nvPV pP\u02daq \u00b4 logp1\u00b4 pvq \u00a8 r \u010f\n\u00ff\nvPV pPapxq \u00b4 logp1\u00b4 pvq \u00f1\nlogp \u017a\nvPV pP\u02daq p1\u00b4 pvqq \u00a8 r \u011b logp\n\u017a\nvPV pPapxq p1\u00b4 pvqq \u00f1\np \u017a\nvPV pP\u02daq p1\u00b4 pvqqr \u011b\n\u017a\nvPV pPapxq p1\u00b4 pvq\nTherefore we get:\npapx \u201c 1\u00b4 \u017a\nvPV pPapxq p1\u00b4 pvq \u011b\n1\u00b4 p \u017a vPV pP\u02daq p1\u00b4 pvqqr \u201c 1\u00b4 p1\u00b4 p\u02daqr.\nWe use the generalization of Newton\u2019s binom, namely p1` xqr \u201c \u01598 j\u201c0 ` r j \u02d8 xj for any real r, where `\nr j\n\u02d8 \u201c rpr\u00b41q...pr\u00b4j`1qj! for j \u0105 0, and ` r 0 \u02d8 \u201c 1. Thus,\n1\u00b4 p1\u00b4 p\u02daqr \u201c 1\u00b4 8 \u00ff\nj\u201c0\n\u02c6\nr\nj\n\u02d9\npp\u02daqj \u00a8 p\u00b41qj\n\u201c 8 \u00ff\nj\u201c1\n\u02c6\nr\nj\n\u02d9\npp\u02daqj \u00a8 p\u00b41qj`1 \u011b r \u00a8 p\u02da.\nThe last inequality is valid since the sum of two consecutive terms the p2iqth term and\nthe p2i` 1qth term is positive: \u02c6\nr\n2i\n\u02d9 pp\u02daq2i \u00a8 p\u00b41q2i`1 ` \u02c6 r\n2i` 1\n\u02d9\npp\u02daq2i`1 \u00a8 p\u00b41q2i`1`1\n\u201c \u00b4 1p2iq! \u00a8 r \u00a8 pr \u00b4 1q \u00a8 . . . \u00a8 pr \u00b4 2i` 1q \u00a8 pp \u02daq2i\n` 1p2i` 1q! \u00a8 r \u00a8 pr \u00b4 1q \u00a8 . . . \u00a8 pr \u00b4 p2i` 1q ` 1q \u00a8 pp \u02daq2i`1\n\u201c pp\u02daq2i \u00a8 1p2iq! \u00a8 r \u00a8 pr \u00b4 1q \u00a8 . . . \u00a8 pr \u00b4 2i` 1qlooooooooooooooomooooooooooooooon \u01030\n\u00a8 \u201e \u00b41` 1 2i` 1 \u00a8 pr \u00b4 2iq \u00a8 p \u02da \nlooooooooooooooooomooooooooooooooooon\n\u01030\n\u0105 0\nOverall, we find that, papx \u011b r \u00a8 p\u02da, as required. l"}, {"heading": "General Case", "text": "We now show how to extend our results from the previous section to provide an approximation algorithm for the general case, i.e., where the number of probabilities in each site is not bounded. W.l.o.g. assume that in each site c1 \u010f c2 \u010f . . . \u010f ck. Thus, an agent that reaches a site v with a reaming budget of b will acquire the item with a probability of\n\u0159i j\u201c1 pvpcjq for i for which ci \u010f b \u0103 ci`1 if i \u0103 k, and probability of\n\u0159k j\u201c1 pvpcjq if b \u011b ck (namely, i \u201c k if b \u011b ck).\nWe reduce the general case to the case of single probabilities as follows. Given an instance graph G to the (general) Max-Probability problem, we define a new graph G1 that will have a single probability in each site. For every vertex v with a probability pvpciq of obtaining the item at a cost ci, where 1 \u010f i \u010f k, we define new vertices u1, . . . , uk, such that in each site ui, where 2 \u010f i \u010f k, either the item can be acquired at a cost of ci with a probability pui \u201c pvpciq 1\u00b4\n\u0159i\u00b41 j\u201c1 pvpcjq\n, or not available at all. In u1,\neither the item can be acquired at a cost of c1 with a probability pu1 \u201c pvpc1q, or not available at all. We replace the vertex v in G1 with u1, and create edges between ui and ui`1, for all 1 \u010f i \u010f k \u00b4 1, with associated weights of 0.\nTherefore, an agent that reaches u1 in G1 with a remaining budget of b can travel without any cost from u1 to uk and back to u1. For i for which ci \u010f b \u0103 ci`1, or for i \u201c k if b \u011b ck, the probability of failure from this travel is as follows:\np1\u00b4 pu1q \u00a8 . . . \u00a8 p1\u00b4 puiq \u201c p1\u00b4 pvpc1qq \u00a8 \u02c6 1\u00b4 pvpc2q 1\u00b4 pvpc1q \u02d9 \u00a8\n. . . \u00a8 \u02dc\n1\u00b4 pvpciq 1\u00b4\n\u0159i\u00b41 j\u201c1 pvpcjq\n\u00b8\n\u201c 1\u00b4 i \u00ff\nj\u201c1 pvpcjq,\nwhich is the same probability of failure of an agent that reaches the corresponding site v in G with a reaming budget of b. Therefore, the Max-Probability problem on G can\nbe approximated using the approximation algorithm from the previous section on G1. Since G1 has k \u00a8 n nodes, we conclude:\nTheorem 2 The Max-Probability problem can be approximated within a ratio ofOplog n` log kq, for any instance of the problem for which it holds that pvpciq\n1\u00b4 \u0159i\u00b41 j\u201c1 pvpcjq \u011b 1{c\nfor every vertex v and any cost ci P Cv , where c is any constant larger than 1. For k \u201c Opnq the Max-Probability problem can be approximated within a ratio of Oplog nq, for the same instances."}, {"heading": "Min-Budget", "text": "Although Min-Budget is the dual of Max-Probability and their decision versions are the same, it seems that Min-Budget is much harder to approximate on general graphs. Indeed, converting the Min-Budget problem to the dual of the Deadline-TSP is hopeless; we have a proof that unlike the Deadline-TSP problem, the dual of the Deadline-TSP problem is hard to approximate within a factor of c \u00a8 log n, for any constant c. We thus consider restricted instances. We show that the Min-Budget problem with a specific instance of equal vertex costs and equal single probabilities can be approximated within a ratio of 5 ` for any \u0105 0. The idea is to run the 2 ` approximation algorithm of [14] for the rooted k-MST problem and then travel along the tree. The rooted k-MST problem, that was shown to be NP-hard [13], is as follows:\nDefinition 2 Given a graph G \u201c pV,Eq on n nodes with a root node r, nonnegative edge weights, and a specified number k, find a tree of minimum weight that includes r, which spans at least k nodes other than r.\nTheorem 3 The Min-Budget problem with a specific instance of equal vertex costs and equal single probabilities can be approximated within a ratio of 5` for any \u0105 0.\nProof. Given an instance of Min-Budget, we define an instance for the rooted k-MST problem, where r \u201c v1 and,\nk \u201c R logp1\u00b4 psuccq logp1\u00b4 pq V . (5)\nWe then run the approximation algorithm of [14] and return the path received by traveling along the tree of [14]. The initial budget is set to c plus twice the tree\u2019s cost. Obviously, the path returned by the algorithm meets all the constraints of the minimum budget problem: if the tree spans k vertices then since k \u011b logp1\u00b4psuccqlogp1\u00b4pq , it holds that logp1\u00b4 psuccq \u011b k \u00a8 logp1\u00b4 pq, thus the probability that the algorithm will succeed is at least 1\u00b4 p1\u00b4 pqk \u011b psucc. Moreover, since we add c to the budget, the item can be bought at every node in the returned path.\nNow, letMapx be the value returned by the approximation algorithm of [14] for the rooted k-MST problem and letM\u02da be the optimum value of the rooted k-MST problem. Similarly, let Bapx be the budget required by the above approximation algorithm for\nthe Min-Budget problem, and let B\u02da be the minimal budget for the instance of the Min-Budget problem. Thus\nBapx \u201c 2 \u00a8Mapx ` c \u010f 2 \u00a8 p2` q \u00a8M\u02da ` c (6) \u010f 2 \u00a8 p2` q \u00a8B\u02da ` c \u010f p5` 2 q \u00a8B\u02da.\nl\nOn the other hand, we show that the Min-Budget problem is hard to approximate within a factor of \u03b1 \u201c 1.003553. We do so by using the hardness of approximation of the Min-Excess-Path problem proven in [5]. The excess of a path is defines as follows:\nDefinition 3 Given a graph G \u201c pV,Eq on n nodes with a root node s and an end node t, nonnegative edge weights, nonnegative prizes for each vertex, and a quota Q, the excess of a path is the difference between the length of an s \u00b4 t path that collects prizes of at least Q, and the length of the shortest path between s and t.\nThat is, any path must spend a minimum amount of time equal to the shortest distance between s and t, only to reach the destination t; the excess of the path is the extra time it spent to gather prizes along the way. The Min-Excess-Path problem is to find a minimum-excess path from s to t collecting prizes of at least Q, and [5] show that the Min-Excess-Path problem is NP-hard to approximate to within a factor of \u03b2 \u201c 220{219.\nTheorem 4 The Min-Budget problem is hard to approximate within a ratio of \u03b1 \u201c 1.003553.\nProof. We reduce the Min-Excess-Path problem to the Min-Budget problem. To do so we use the hard instance of the Min-Excess-Path problem described in [5] as follows. Let G \u201c pV,Eq be a complete graph on n nodes, with edge weights in the set t1, 2u, let r be both the starting node and ending node. and let n be the desired quota. W.o.l.g. assume that n \u011b 1000. Given the above instance of the Min-Excess-Path problem we define an instance for the Min-Budget problem using the same graph, v1 \u201c r, and in each vertex there is a single cost of 1 with a constant probability p. In addition, let psucc \u201c 1 \u00b4 p1 \u00b4 pqn. Now, assume that there is an approximation algorithm for the Min-Budget problem with an \u03b1 ratio. We show that this implies an approximation algorithm for the Min-Excess-Path problem with a \u03b2 ratio, thus contradicting [5]. Let AB be an \u03b1-approximation of the Min-Budget problem. Then run AB on the instance defined above. Let s be the ending node of the path returned by this algorithm. Then take the path returned by this algorithm, and add edge ps, rq to the path, and its weight to the path\u2019s cost. The resulting cycle is a solution for the Min-Excess-Path problem. We now analyze the approximation ratio of this algorithm. LetAEX be the value of the path returned by the above algorithm to the Min-Excess-Path problem, OB the optimal value of the Min-Budget problem for the defined instance, and OEXpu, tq the optimal value of the Min-Excess-Path problem starting at u and ending at t. Let t be the ending\nnode of an optimal Min-Budget solution. Then,\nAEXpr, rq \u010f AEXpr, sq \u010f AB \u00b4 dpr, sq \u00b4 1 \u010f \u03b1 \u00a8OB \u00b4 dpr, sq \u00b4 1 \u010f \u03b1pdpr, tq `OEXpr, tq ` 1q \u00b4 dpr, sq \u00b4 1 \u010fp\u02daq \u03b1pdpr, tq `OEXpr, rq ` 1q \u00b4 dpr, sq \u00b4 1 \u010f \u03b1 \u00a8OEXpr, rq ` \u03b1 \u00a8 3\u00b4 2. (7)\nNotice that OEXpr, rq \u011b n \u00b4 2. This is true since a path has to traverse all the nodes in order to collect enough prizes, each edge is of a length of at least 1, and the shortest path between the last vertex in which the quota is met and r is at most 2. Thus we get that\n3 \u00a8 \u03b1\u00b4 2 \u201c 3 \u00a8 \u03b1\u00b4 2 n\u00b4 2 \u00a8 pn\u00b4 2q\n\u010f 3 \u00a8 \u03b1\u00b4 2 n\u00b4 2 \u00a8OEXpr, rq \u010f \u03b2 \u00a8OEXpr, rq. (8)\n(The last inequality is valid since n \u011b 1000, so 1 \u0103 \u03b1 \u010f \u03b2pn\u00b42q`2n`1 ). This contradicts the fact that the Min-Excess-Path problem cannot be approximated within a ratio of \u03b2 [5].\nProof of (*): Notice that OEX \u201c minwtOEXpr, wqu, since there is a node on the cycle going through r in which all the needed prizes were already collected. If node w for which the minimal value is received is not t (=the last vertex on the path of the above optimal value of the Min Budget) then we can take the path from r to w and get\nAB \u201c OEXpr, wq ` dpr, wq ` 1 \u0103 OEXpr, tq ` dpr, wq ` 1 \u010f OEXpr, tq ` 3 \u201c OB \u00b4 dpr, tq \u00b4 1` 3 \u201c OB \u00b4 dpr, tq ` 2 \u010f QB ` 1. (9)\nThis implies that AB \u010f OB , so we can attain an optimal solution of the Min-Budget that returns a path for which w is the last vertex. Thus we can assume w.o.l.g. that OEXpr, rq \u201c OEXpr, tq.\nl"}, {"heading": "Heuristics and Experimental Analysis", "text": "Our theoretical results in the previous section led us to consider heuristics for practical use. In this section we propose several heuristics and experimentally evaluate them against the optimal solution. We concentrate on the Min-Budget problem, and the same ideas can be used to build heuristics for the Max-Probability problem (the implementation is even simpler). Indeed, we tested the heuristics for Max-Probability, and even the simplest greedy heuristic almost always achieved a probability that was very close to the optimal probability.\nWe use the following notations. Let P be the path that the agent traversed hitherto, P \u201c xv1, . . . , v`y. That is, v` is the site where the agent is currently located. LetNP be the set of all neighbors of sites in P , that is NP \u201c tv|u P P, pu, vq P Eu. If v P NP , let wPv be the total weight of the shortest path from v` to v that uses only sites from P . We tested the following methods:\n\u2022 Optimal. In the cases where it was computationally feasible to do so, we exhaustively evaluated every possible path with several budgets, in order to find the real optimal solution as a comparison. We implemented a branch-and-bound algorithm, that is based on the algorithm of [6], to reduce the running time.\n\u2022 Greedy. Let the score of a site v P NP and a cost ci P Cv be SpP, v, ciq \u201c \u0159i\nj\u201c1 pvpcjq wPv \u00a8ci\n. In each iteration, the heuristic locally chooses the next best site and the best cost there: argmaxvPNP argmaxciPCv SpP, v, ciq. That is, the heuristic chooses the site that has the maximal success probability to cost ratio, over all possible probabilities and costs. The heuristic then increases the initial budget so that the agent will be able to travel to the chosen site and obtain the item at the chosen cost. Note that the heuristic calculates a cost of wPv \u00a8 ci instead of wPv ` ci. Intuitively, it captures the \u201cpenalty\u201d for exploring a distant site (with a highwPv ) that will incur a high traveling cost for returning, if needed. In addition, we experimentally tested the greedy heuristic with a denominator ofwPv `ci, and it performed much worse.\n\u2022 Ant Colony Optimization (ACO). Following the successful application of the ant colony optimization technique for producing near-optimal solutions for the Traveling Salesman problem [8] and Vehicle Routing with Time Windows problem [2], we developed an ACO version for the Min-Budget problem, as follows. We ran 50 iterations. In each iteration the ant chooses the next site v P NP and the cost ci P Cv with a probability of SpP,v,ciq\u00a8h P v \u0159\nvPNP ,ciPCv SpP,v,ciq\u00a8hPv\n, where hPv is the aver-\nage pheromone level of the edges in the shortest path from v` to v that uses only sites from P . That is, the ant randomly chooses the next site and cost, where the probability of selection depends on the attractiveness of the site and the costs. The pheromone level of each edge is initially set to 1, and after each iteration it evaporates by 0.05. However, after finding a path P which is better than the current best path, the ant updates the pheromone level of each edge pu, vq of the path to wpu, vq \u00a8 V pPq{wpPq.\n\u2022 Bounded-Length (BL). This heuristic is a restricted version of the optimal branchand-bound algorithm, which bounds the solution\u2019s length by two means. First, the heuristic prunes any path that is longer than the length of the best solution found so far. In addition, the heuristic does not allow the agent to traverse through an unvisited site without spending any budget there. Clearly, this restricted branch-and-bound algorithm is no longer guaranteed to be optimal. However, it is expected to run faster than the optimal algorithm since the solution\u2019s length has a major impact on the optimal algorithm\u2019s running time.\n\u2022 No-Backtrack (NB). Another reason for the long running time of the optimal algorithm is the backtracking phase that checks paths with repetitions, i.e., where the agent visits the same sites more than once. This motivated us to consider a restricted version of the optimal algorithm, where in addition to bounding the length of solution (as in the BL heuristic) the algorithm does not backtrack and thus only checks paths without repetitions. Unlike the other heuristic, the NB heuristic does not necessarily find a solution for every instance."}, {"heading": "Experimental Design and Results", "text": "For the empirical evaluation of our heuristics we used a real graph structure with the traveling costs set as the real distance between the vertices, which we extracted from GIS data of the highways network of the USA2. Since the original network is too large we sampled 40 random sub-graphs, with an average number of 6325.5 vertices. An illustration of the full graph and of one of the sampled subgraphs are depicted in Figures 1 and 2, respectively As for the costs, for each vertex we randomly generated\nbetween 1 and 5 costs to obtain the item with a non-zero probability. The costs were\n2http://www.mapcruzin.com/download-mexico-canada-us-transportaton-shapefile.htm\ngenerated using a normal distribution with an expectation of 2700 and a standard deviation of 900 (the costs were bounded within two standard deviations from the expectation).\nWe began by testing the effect of the target success probability, psucc, on the performance of our heuristics. We thus randomly generated probabilities for each vertex using a normal distribution with an expectation of 0.24 and a standard deviation of 0.08. We then varied psucc between 0.7 and 0.975. The results are depicted in Figure 3, where each point is the average over the 40 graphs. As expected, a higher target suc-\ncess probability results in a higher minimal required budget and longer running time. However, there was no statistically significant difference between the budget required by the optimal and BL heuristic and NB was only a little behind. ACO was statistically significantly better than Greedy, but ACO still required between 72-91% more budget than NB. As for the running time, all of our heuristics were able to find solutions within a reasonable time, but the optimal algorithm demonstrated its anticipated exponential running time behavior in the early stages. Surprisingly, the NB heuristic was faster than almost all the heuristics (only the greedy heuristic was faster) while still producing solutions that are near-optimal. Our explanation is that the hard instances for the optimal algorithm, when there is a need to backtrack in order to find a good solution, possibly occur when the graph has many dead-ends, i.e., vertices with a degree of 1, or with edges that are very costly. Since we use a real graph structure with real costs, such vertices are rarely found.\nWe also wanted to test the performance of our heuristics when we decrease the probabilities (for acquiring the item) in the vertices. We thus randomly generated probabilities for each vertex using normal distributions, where we varied the expectation between 0.3 and 0.09. The standard deviation was set to a third of the expectation, and the target success probability was set to 0.90. As Figure 3 shows, when we decrease the expectation, which results in smaller values of probabilities, the minimal required budget increases. Again, BL and NB find near-optimal solutions that are statistically significantly better than Greedy and ACO. The optimal algorithm required much longer running time, and it is thus omitted from Figure 4b. However, BL demonstrated an exponential running time behavior when we decreased the expectation (for generating the probabilities). We thus conclude that NB clearly is the winner, since it runs very fast even with small probabilities and a high psucc, but still finds near-optimal solutions.\nFinally, we conducted experiments on synthetic, small-world graphs with 25, 000 vertices. Each vertex was connected to its 6 nearest neighbors and edges in the graphs were randomly rewired to different vertices with a probability of 0.09. The traveling cost on each edge was chosen uniformly between 40-1040 so that the average edge cost will be the same as in the real graph structure setting, and the rest of the parameters were set exactly as in the real graph structure setting. The results are depicted in Figure 5, where each point is the average over 40 randomly generated small-world graphs. As Figure 5 shows, the performance of the heuristics is quite similar to the performance with the real graph structure."}, {"heading": "Conclusions and Future Work", "text": "This paper considers probabilistic physical search on graphs. We show a connection between Max-Probability and the Deadline-Tsp problems, which enables the Oplog nq approximation for Max-Probability with probabilities that are not too small. We believe that this connection can lead to future cross-fertilization between probabilistic physical search problems and other variants of the Deadline-Tsp that have been extensively studied. We then provide a 5 ` approximation, for every \u0105 0, for a special case of Min-Budget, and a hardness of approximation within a ratio of 1.003553 for the general Min-Budget problem. We further suggest several heuristics for practical use,\nand experimentally show that our no-backtrack branch-and-bound algorithm is able to find near-optimal solutions and handles even very large instances. We conjuncture that even NB will have an exponential running time when it will encounter specific graphs with many dead-ends and very small probabilities. However, it is possible that there are no such graphs that represent real problem instances. In addition, it is possible that Greedy and ACO heuristics will be able to handle such settings adequately, due to their almost constant running time. An important future direction is thus to explore the hardness landscape of our problems, in order to derive better insights as to which heuristic to use when. We also see great importance in extending the single-agent analysis to multi-agent settings. Finally, providing a tighter gap between the approximation and hardness of approximation results for the Min-Budget problem remains an open challenge."}], "references": [{"title": "Physical search problems applying economic search models", "author": ["Y. Aumann", "N. Hazon", "S. Kraus", "D. Sarne"], "venue": "Proceedings of the Twenty-Third AAAI Conference on Artificial Intelligence ", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2008}, {"title": "The simulated trading heuristic for solving vehicle routing problems", "author": ["A. Bachem", "W. Hochstttler", "M. Malich"], "venue": "Discrete Applied Mathematics, 65(1\u20133):47\u201372", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1996}, {"title": "The prize collecting traveling salesman problem", "author": ["E. Balas"], "venue": "Networks, 19:621\u2013 636", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1989}, {"title": "Approximation algorithms for deadline-tsp and vehicle routing with time-windows", "author": ["N. Bansal", "A. Blum", "S. Chawla", "A. Meyerson"], "venue": "Proceedings of the Thirty-Sixth Annual ACM Symposium on Theory of Computing ", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2004}, {"title": "Approximation algorithms for orienteering and discounted-reward tsp", "author": ["A. Blum", "S. Chawla", "D.R. Karger", "T. Lane", "A. Meyerson", "M. Minkoff"], "venue": "SIAM Journal on Computing, 37(2):653\u2013670", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2007}, {"title": "Algorithms for stochastic physical search on general graphs", "author": ["D. Brown", "J. Hudack", "B. Banerjee"], "venue": "Workshops at the Twenty-Ninth AAAI Conference on Artificial Intelligence", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "k-agent sufficiency for multiagent stochastic physical search problems", "author": ["D. Brown", "S. Loscalzo", "N. Gemelli"], "venue": "Proceedings of the 4th International Conference on Algorithmic Decision Theory (ADT-15), pages 171\u2013186", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2015}, {"title": "Ant system: optimization by a colony of cooperating agents", "author": ["Marco Dorigo", "Vittorio Maniezzo", "Alberto Colorni"], "venue": "IEEE Transactions on Systems, Man, and Cybernetics, Part B,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1996}, {"title": "Collaborative multi agent physical search with probabilistic knowledge", "author": ["N. Hazon", "Y. Aumann", "S. Kraus"], "venue": "Proceedings of the Twenty-first International Joint Conference on Artificial Intelligence ", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2009}, {"title": "Physical search problems with probabilistic knowledge", "author": ["N. Hazon", "Y. Aumann", "S. Kraus", "D. Sarne"], "venue": "Artificial Intelligence, 196:26\u201352", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Search", "author": ["J. McMillan", "M. Rothschild"], "venue": "R. Aumann and S. Amsterdam, editors, Handbook of Game Theory with Economic Applications, chapter 27, pages 905\u2013927. Elsevier", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1994}, {"title": "Traveling purchaser problem", "author": ["T. Ramesh"], "venue": "Opsearch, 18:78\u201391", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1981}, {"title": "Spanning trees short or small", "author": ["R. Ravi", "R. Sundaram", "M.V. Marathe", "D.J. Rosenkrantz", "S.S. Ravi"], "venue": "Proceedings of the fifth annual ACM-SIAM symposium on Discrete algorithms SODA \u201994, pages 546\u2013555", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1994}, {"title": "Heuristic methods applied to orienteering", "author": ["T. Tsiligirides"], "venue": "Journal of the Operational Research Society, 35(9):797\u2013809", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1984}, {"title": "Optimal search for the best alternative", "author": ["Martin L Weitzman"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1979}], "referenceMentions": [{"referenceID": 11, "context": "For example, consider a traveling purchaser seeking to obtain an item [12].", "startOffset": 70, "endOffset": 74}, {"referenceID": 0, "context": "The analysis of such problems was initiated by [1, 10], who showed that it is (computationally) hard to find the optimal solution on general graphs.", "startOffset": 47, "endOffset": 54}, {"referenceID": 9, "context": "The analysis of such problems was initiated by [1, 10], who showed that it is (computationally) hard to find the optimal solution on general graphs.", "startOffset": 47, "endOffset": 54}, {"referenceID": 3, "context": "We first establish an interesting connection between Max-Probability and the Deadline-TSP problems [4], and as a result we are able to provide an Oplog nq approximation for the former, based on an Oplog nq approximation for the latter, with the only requirement that the probabilities are not too small.", "startOffset": 99, "endOffset": 102}, {"referenceID": 14, "context": "Models of search processes with prior probabilistic knowledge have been studied extensively in the economic literature [16, 11].", "startOffset": 119, "endOffset": 127}, {"referenceID": 10, "context": "Models of search processes with prior probabilistic knowledge have been studied extensively in the economic literature [16, 11].", "startOffset": 119, "endOffset": 127}, {"referenceID": 2, "context": "Changing search costs has been considered in the computer science domain traditionally in the contexts of the Prize-Collecting Traveling Salesman problem [3] and its variants.", "startOffset": 154, "endOffset": 157}, {"referenceID": 3, "context": "The Deadline-TSP [4] problem, which is a generalization of the Orienteering problem [15], is much more relevant to our settings, and in the next section we establish a connection between the Max-Probability and the Deadline-TSP problems.", "startOffset": 17, "endOffset": 20}, {"referenceID": 13, "context": "The Deadline-TSP [4] problem, which is a generalization of the Orienteering problem [15], is much more relevant to our settings, and in the next section we establish a connection between the Max-Probability and the Deadline-TSP problems.", "startOffset": 84, "endOffset": 88}, {"referenceID": 9, "context": "The work most related to ours is the work of [10], who introduced the probabilistic physical search problems and provided a comprehensive analysis of the problems on one-dimensional path graphs, both for single [1] and multi-agent settings [9].", "startOffset": 45, "endOffset": 49}, {"referenceID": 0, "context": "The work most related to ours is the work of [10], who introduced the probabilistic physical search problems and provided a comprehensive analysis of the problems on one-dimensional path graphs, both for single [1] and multi-agent settings [9].", "startOffset": 211, "endOffset": 214}, {"referenceID": 8, "context": "The work most related to ours is the work of [10], who introduced the probabilistic physical search problems and provided a comprehensive analysis of the problems on one-dimensional path graphs, both for single [1] and multi-agent settings [9].", "startOffset": 240, "endOffset": 243}, {"referenceID": 5, "context": "Recently, [6] presented an MILP formulation and a branch-and-bound optimal algorithm for general graphs, which work only if the graph is complete.", "startOffset": 10, "endOffset": 13}, {"referenceID": 6, "context": "In a different paper, [7] investigate the minimal number of agents required to solve Max-Probability and MinBudget problems on a path and in a 2-dimensional Euclidean space.", "startOffset": 22, "endOffset": 25}, {"referenceID": 9, "context": "We refer the reader to [10] for a comprehensive overview of relevant works and how they relate to probabilistic physical search.", "startOffset": 23, "endOffset": 27}, {"referenceID": 9, "context": "In our case, we get two concrete problem formulations (following [10]): 1.", "startOffset": 65, "endOffset": 69}, {"referenceID": 3, "context": "Our algorithm is built on the approximation algorithm of [4] for the DeadlineTSP problem that they defined as follows: Definition 1 Given a weighted graph G \u201c pV,Eq on n nodes, with a start node r, a prize function \u03c0 : V \u00d1 Z`, deadlines D : V \u00d1 Z`, and a length function ` : E \u00d1 Z`, find a path starting at r that maximizes the total prize, where a path starting at r collects the prize \u03c0pvq at node v if it reaches v before Dpvq.", "startOffset": 57, "endOffset": 60}, {"referenceID": 3, "context": "Since we represent our objective as an optimization over summation we can convert every instance of our problem into an instance of the Deadline-TSP problem and run the approximation algorithm of [4].", "startOffset": 196, "endOffset": 199}, {"referenceID": 3, "context": "Now, we apply the approximation algorithm of [4] to the Deadline-TSP problem with the instance described above, and we use the path returned as a solution for MaxProbability.", "startOffset": 45, "endOffset": 48}, {"referenceID": 3, "context": "Therefore, by Lemma 1 we can use the approximation algorithm of [4] even for non-integer prizes and lose only a factor of c1 in the approximation ratio.", "startOffset": 64, "endOffset": 67}, {"referenceID": 3, "context": "According to [4], a constant d exists such that T \u030a{pd  \u0308 log nq \u010f T .", "startOffset": 13, "endOffset": 16}, {"referenceID": 12, "context": "The rooted k-MST problem, that was shown to be NP-hard [13], is as follows: Definition 2 Given a graph G \u201c pV,Eq on n nodes with a root node r, nonnegative edge weights, and a specified number k, find a tree of minimum weight that includes r, which spans at least k nodes other than r.", "startOffset": 55, "endOffset": 59}, {"referenceID": 4, "context": "We do so by using the hardness of approximation of the Min-Excess-Path problem proven in [5].", "startOffset": 89, "endOffset": 92}, {"referenceID": 4, "context": "The Min-Excess-Path problem is to find a minimum-excess path from s to t collecting prizes of at least Q, and [5] show that the Min-Excess-Path problem is NP-hard to approximate to within a factor of \u03b2 \u201c 220{219.", "startOffset": 110, "endOffset": 113}, {"referenceID": 4, "context": "To do so we use the hard instance of the Min-Excess-Path problem described in [5] as follows.", "startOffset": 78, "endOffset": 81}, {"referenceID": 4, "context": "We show that this implies an approximation algorithm for the Min-Excess-Path problem with a \u03b2 ratio, thus contradicting [5].", "startOffset": 120, "endOffset": 123}, {"referenceID": 4, "context": "This contradicts the fact that the Min-Excess-Path problem cannot be approximated within a ratio of \u03b2 [5].", "startOffset": 102, "endOffset": 105}, {"referenceID": 5, "context": "We implemented a branch-and-bound algorithm, that is based on the algorithm of [6], to reduce the running time.", "startOffset": 79, "endOffset": 82}, {"referenceID": 7, "context": "Following the successful application of the ant colony optimization technique for producing near-optimal solutions for the Traveling Salesman problem [8] and Vehicle Routing with Time Windows problem [2], we developed an ACO version for the Min-Budget problem, as follows.", "startOffset": 150, "endOffset": 153}, {"referenceID": 1, "context": "Following the successful application of the ant colony optimization technique for producing near-optimal solutions for the Traveling Salesman problem [8] and Vehicle Routing with Time Windows problem [2], we developed an ACO version for the Min-Budget problem, as follows.", "startOffset": 200, "endOffset": 203}], "year": 2015, "abstractText": "We consider an agent seeking to obtain an item, potentially available at different locations in a physical environment. The traveling costs between locations are known in advance, but there is only probabilistic knowledge regarding the possible prices of the item at any given location. Given such a setting, the problem is to find a plan that maximizes the probability of acquiring the good while minimizing both travel and purchase costs. Sample applications include agents in search-and-rescue or exploration missions, e.g., a rover on Mars seeking to mine a specific mineral. These probabilistic physical search problems have been previously studied, but we present the first approximation and heuristic algorithms for solving such problems on general graphs. We establish an interesting connection between these problems and classical graph-search problems, which led us to provide the approximation algorithms and hardness of approximation results for our settings. We further suggest several heuristics for practical use, and demonstrate their effectiveness with simulation on real graph structure and synthetic graphs.", "creator": "LaTeX with hyperref package"}}}