{"id": "1510.05067", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Oct-2015", "title": "How Important Is Weight Symmetry in Backpropagation?", "abstract": "loop gradient backpropagation ( buffer bp ) requires complementary symmetric feedforward tracing and reciprocal feedback connections - - the same buffer weights must be concurrently used therefore for loop forward and down backward trace passes. this \" partial weight hopping transport problem \" [ layer 1 ] is therefore thought to basically be demonstrating the crux of bp's biological implausibility. using 15 fully different classification datasets, namely we systematically collectively study twice to what extent a bp feedback really values depends well on current weight symmetry. surprisingly, the comparative results indicate : ( 1 ) technically the pulse magnitudes of feedback weights above don't matter to represent performance ( scale 2 ) what the spectral signs of feedback transition weights do matter - - the more concordant signs crossing between feedforward and their necessarily corresponding feedback chain connections, the better ( 3 ) \u03b4 with stronger feedback weights having random magnitudes and 100 % equally concordant shift signs, we were somehow able indeed to alternatively achieve theoretically the equally same or even better performance cycles than sgd. ( level 4 ) \u2026 some normalizations / control stabilizations implemented are indispensable for such asymmetric / bp to prevent work, another namely batch change normalization ( model bn ) [ \u2013 2 ] and / n or a \" batch shift manhattan \" ( bm ) update routing rule.", "histories": [["v1", "Sat, 17 Oct 2015 03:49:05 GMT  (374kb,D)", "https://arxiv.org/abs/1510.05067v1", null], ["v2", "Sat, 31 Oct 2015 16:55:06 GMT  (374kb,D)", "http://arxiv.org/abs/1510.05067v2", null], ["v3", "Wed, 2 Dec 2015 01:49:38 GMT  (374kb,D)", "http://arxiv.org/abs/1510.05067v3", "Fixed a small bug in the implementation of Batch Normalization (BN). This solves BN's problem with TIMIT, iCub and flowers datasets. All conclusions remain the same"], ["v4", "Thu, 4 Feb 2016 08:35:58 GMT  (52kb,D)", "http://arxiv.org/abs/1510.05067v4", null]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["qianli liao", "joel z leibo", "tomaso a poggio"], "accepted": true, "id": "1510.05067"}, "pdf": {"name": "1510.05067.pdf", "metadata": {"source": "CRF", "title": "How Important Is Weight Symmetry in Backpropagation?", "authors": ["Qianli Liao", "Joel Z. Leibo", "Tomaso Poggio"], "emails": [], "sections": [{"heading": null, "text": "1 Introduction Deep Neural Networks (DNNs) have achieved remarkable performance in many domains (Krizhevsky, Sutskever, and Hinton 2012; Abdel-Hamid et al. 2012; Hinton et al. 2012; Mikolov et al. 2013; Taigman et al. 2014; Graves, Wayne, and Danihelka 2014). The simple gradient backpropagation (BP) algorithm has been the essential \u201clearning engine\u201d powering most of this work.\nDeep neural networks are universal function approximators (Hornik, Stinchcombe, and White 1989). Thus it is not surprising that solutions to real-world problems exist within their configuration space. Rather, the real surprise is that such configurations can actually be discovered by gradient backpropagation.\nThe human brain may also be some form of DNN. Since BP is the most effective known method of adapting DNN parameters to large datasets, it becomes a priority to answer: could the brain somehow be implementing BP? Or some approximation to it?\nCopyright c\u00a9 2016, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nFor most of the past three decades since the invention of BP, it was generally believed that it could not be implemented by the brain (Crick 1989; Mazzoni, Andersen, and Jordan 1991; O\u2019Reilly 1996; Chinta and Tweed 2012; Bengio et al. 2015). BP seems to have three biologically implausible requirements: (1) feedback weights must be the same as feedforward weights (2) forward and backward passes require different computations, and (3) error gradients must somehow be stored separately from activations.\nOne biologically plausible way to satisfy requirements (2) and (3) is to posit a distinct \u201cerror network\u201d with the same topology as the main (forward) network but used only for backpropagation of error signals. The main problem with such a model is that it makes requirement (1) implausible. There is no known biological way for the error network to know precisely the weights of the original network. This is known as the \u201cweight transport problem\u201d (Grossberg 1987). In this work we call it the \u201cweight symmetry problem\u201d. It is arguably the crux of BP\u2019s biological implausibility.\nIn this report, we systematically relax BP\u2019s weight symmetry requirement by manipulating the feedback weights. We find that some natural and biologically plausible schemes along these lines lead to exploding or vanishing gradients and render learning impossible. However, useful learning is restored if a simple and indeed more biologically plausible rule called Batch Manhattan (BM) is used to compute the weight updates. Another technique, called Batch Normalization (BN) (Ioffe and Szegedy 2015), is also shown effective. When combined together, these two techniques seem complementary and significantly improve the performance of our asymmetric version of backpropagation.\nThe results are somewhat surprising: if the aforementioned BM and/or BN operations are applied, the magnitudes of feedback weights turn out not to be important. A muchrelaxed sign-concordance property is all that is needed to attain comparable performance to mini-batch SGD on a large number of tasks.\nFurthermore, we tried going beyond sign concordant feedback. We systematically reduced the probability of feedforward and feedback weights having the same sign (the sign concordance probability). We found that the effectiveness of backpropagation is strongly dependent on high sign concordance probability. That said, completely random and fixed feedback still outperforms chance e.g., as in the recent work\nar X\niv :1\n51 0.\n05 06\n7v 4\n[ cs\n.L G\n] 4\nF eb\n2 01\n6\nof Lillicrap et al. (Lillicrap et al. 2014). Our results demonstrate that the perfect forwardbackward weight symmetry requirement of backpropagation can be significantly relaxed and strong performance can still be achieved. To summarize, we have the following conclusions: (I) The magnitudes of feedback weights do not matter to performance. This surprising result suggests that our theoretical understanding of why backpropagation works may be far from complete. (II) Magnitudes of the weight updates also do not matter. (III) Normalization / stabilization methods such as Batch Normalization and Batch Manhattan are necessary for these asymmetric backpropagation algorithms to work. Note that this result was missed by previous work on random feedback weights (Lillicrap et al. 2014). (IV) Asymmetric backpropagation algorithms evade the weight transport problem. Thus it is plausible that the brain could implement them. (V) These results indicate that sign-concordance is very important for achieving strong performance. However, even fixed random feedback weights with Batch Normalization significantly outperforms chance. This is intriguing and motivates further research. (VI) Additionally, we find Batch Manhattan to be a very simple but useful technique in general. When used with Batch Normalization, it often improves the performance. This is especially true for smaller training sets.\n2 Asymmetric Backpropagations A schematic representation of backpropagation is shown in Fig. 1. Let E be the objective function. Let W and V denote the feedforward and feedback weight matrices respectively. Let X denote the inputs and Y the outputs. Wij and Vij are the feedforward and feedback connections between the j-th output Yj and the i-th input Xi, respectively. f(.) and f \u2032(.) are the transfer function and its derivative. Let the derivative of the i-th input with respect to the objective function be \u2202E \u2202Xi\n, the formulations of forward and back propagation are as follows:\nYj = f(Nj), where Nj = \u2211 i WijXi (1)\n\u2202E \u2202Xi = \u2211 j Vijf \u2032(Nj) \u2202E \u2202Yj (2)\nThe standard BP algorithm requires V =W . We call that case symmetric backpropagation. In this work we systematically explore the case of asymmetric backpropagation where V 6=W .\nBy varying V , one can test various asymmetric BPs. Let sign() denote the function that takes the sign (-1 or 1) of each element. Let \u25e6 indicate element-wise multiplication. M,S are matrices of the same size as W . M is a matrix of uniform random numbers \u2208 [0, 1] and Sp is a matrix where each element is either 1 with probability 1\u2212 p or \u22121 with probability p. We explored the following choices of feedback weights V in this paper:\n1. Uniform Sign-concordant Feedbacks (uSF): V = sign(W ) 2. Batchwise Random Magnitude Sign-concordant Feedbacks (brSF): V = M \u25e6 sign(W ), where M is redrawn after each update of W (i.e., each mini-batch). 3. Fixed Random Magnitude Sign-concordant Feedbacks (frSF): V = M \u25e6 sign(W ), where M is initialized once and fixed throughout each experiment. 4. Batchwise Random Magnitude p-percent-signconcordant Feedbacks (brSF-p): V = M \u25e6 sign(W ) \u25e6 Sp, where M and Sp is redrawn after each update of W (i.e., each mini-batch). 5. Fixed Random Magnitude p-percent-sign-concordant Feedbacks (frSF-p): V = M \u25e6 sign(W ) \u25e6 Sp, where M and Sp is initialized once and fixed throughout each experiment. 6. Fixed Random Feedbacks (RndF): Each feedback weight is drawn from a zero-mean gaussian distribution and fixed throughout each experiment: V \u223c N (0, \u03c32), where \u03c3 was chosen to be 0.05 in all experiments.\nThe results are summarized in the Section 5. The performances of 1, 2 and 3, which we call strict sign-concordance cases, are shown in Experiment A. The performances of 4 and 5 with different choices of p, which we call partial signconcordance cases, are shown in Experiment B. The performances and control experiments about setting 6, which we call no concordance cases, are shown in Experiments C1 and C2.\n3 Normalizations/stabilizations are necessary for \u201casymmetric\u201d backpropagations\nBatch Normalization (BN) Batch Normalization (BN) is a recent technique proposed by (Ioffe and Szegedy 2015) to reduce \u201cinternal covariate shift\u201d (Ioffe and Szegedy 2015). The technique consists of element-wise normalization to zero mean and unit standard deviation. Means and standard deviations are separately computed for each batch. Note that in (Ioffe and\nSzegedy 2015), the authors proposed the use of additional learnable parameters after the whitening. We found the effect of this operation to be negligible in most cases. Except for the \u201cBN\u201d and \u201cBN+BM\u201d entries (e.g., in Table 2), we did not use the learnable parameters of BN. Note that batch normalization may be related to the homeostatic plasticity mechanisms (e.g., Synaptic Scaling) in the brain (Turrigiano and Nelson 2004; Stellwagen and Malenka 2006; Turrigiano 2008).\nBatch Manhattan (BM) We were first motivated by looking at how BP could tolerate noisy operations that could be seen as more easily implementable by the brain. We tried relaxing the weight updates by discarding the magnitudes of the gradients. Let the weight at time t be w(t), the update rule is:\nw(t+ 1) = w(t) + \u03b7 \u2217 \u03c4(t) (3)\nwhere \u03b7 is the learning rate. We tested several settings of \u03c4(t) as follows:\nSetting 0 (SGD): \u03c4(t) = \u2212 \u2211\nb \u2202E \u2202w +m\u2217\u03c4(t\u22121)\u2212d\u2217w(t) Setting 1: \u03c4(t) = \u2212sign( \u2211\nb \u2202E \u2202w )+m\u2217 \u03c4(t\u22121)\u2212d\u2217w(t) Setting 2: \u03c4(t) = sign(\u2212sign( \u2211\nb \u2202E \u2202w ) +m \u2217 \u03c4(t \u2212 1) \u2212\nd \u2217 w(t)) Setting 3: \u03c4(t) = sign(\u03ba(t)) where \u03ba(t) = \u2212sign( \u2211 b \u2202E \u2202w ) +m \u2217 \u03ba(t\u2212 1)\u2212 d \u2217 w(t)\nwhere m and d are momentum and weight decay rates respectively. sign() means taking the sign (-1 or 1), E is the objective function, and b denotes the indices of samples in the mini-batch. Setting 0 is the SGD algorithm (by \u201cSGD\u201d in this paper, we always refer to the mini-batch version with momentum and weight decay). Setting 1 is same as 0 but rounding the accumulated gradients in a batch to its sign. Setting 2 takes an extra final sign after adding the gradient term with momentum and weight decay terms. Setting 3 is something in between 1 and 2, where an final sign is taken, but not accumulated in the momentum term.\nWe found these techniques to be surprisingly powerful in the sense that they did not lower performance in most cases (as long as learning rates were reasonable). In fact, sometimes they improved performance. This was especially true for smaller training sets. Recall that asymmetric BPs tend to have exploding/vanishing gradients, these techniques are immune to such problems since the magnitudes of gradients are discarded.\nWe also found that the performance of this technique was influenced by batch size on some experiments. In the cases of very small batch sizes, discarding the magnitudes of the weight updates was sometimes detrimental to performance.\nThis class of update rule is very similar to a technique called the Manhattan update rule, which can be considered as a simplified version of Rprop (Riedmiller and Braun 1993). We suggest calling it \u201cBatch Manhattan\u201d (BM) to distinguish it from the stochastic version (Zamanidoost et al. 2015). By default, we used setting 1 for BM throughout the Experiments A, B, C1 and C2. The \u201cmiscellaneous experiment\u201d at the end of the Section 5 demonstrates that settings\n1, 2 and 3 give similar performances, so the conclusions we draw broadly apply to all of them.\n4 Related Work Since the invention of backpropagation (BP) (Rumelhart, Hinton, and Williams 1988), its biological plausibility has been a long-standing controversy. Several authors have argued that BP is not biologically plausible (Crick 1989; Mazzoni, Andersen, and Jordan 1991; O\u2019Reilly 1996; Chinta and Tweed 2012; Bengio et al. 2015). Various biologically plausible modifications have been proposed. Most involve bidirectional connections e.g. Restricted Boltzmann Machines (Hinton and Salakhutdinov 2006; Smolensky 1986) and so-called recirculation algorithms (Hinton and McClelland 1988; O\u2019Reilly 1996) which despite their name provided, in the case of an autoencoder, an elegant early demonstration that adaptive backwards weight can work without being identical to the forward ones. Recently, there have also been BP-free auto-encoders (Bengio 2014) based on \u201ctarget propagation\u201d (Le Cun 1986).\nThe most relevant work to ours is a recent paper by Lillicrap et al. (Lillicrap et al. 2014) of which we became aware after most of this work was done. Lillicrap et al. showed that fixed random feedback weights can support the learning of good representations for several simple tasks: (i) approximating a linear function, (ii) digit recognition on MNIST and (iii) approximating the outputs of a random 3 or 4 layer nonlinear neural network. Our work is very similar in spirit but rather different and perhaps complementary in its results, since we conclude that signs must be concordant between feedforward and corresponding feedback connections for consistent good performance, whereas the magnitudes do not matter, unlike Lilicrap et al. experiments in which both signs and magnitudes were random (but fixed). To explain the difference in our conclusions, it is useful to consider the following points: 1. We systematically explored performance of the algorithms using 15 different datasets because simple tasks like MNIST by themselves do not always reveal differences between algorithms. 2. We tested deeper networks, since the accuracy of asymmetric BP\u2019s credit assignment may critically attenuate with depth (for task (i) and (ii) Lillicrap et al. used a 3-layer (1 hidden layer) fully-connected network, and for task (iii) they used a 3 or 4 layer fully-connected network, whereas in most of our experiments, we use deeper and larger CNNs as shown in Table 1). 3. We found that local normalizations/stabilizations is critical for making asymmetric BP algorithms work. As shown by our results in Table 4, the random feedbacks scheme (i.e. the \u201cRndF\u201d column) suggested by Lillicrap et al. seem to work well only on one or two tasks, performing close to chance on most of them. Only when combined with Batch Normalization (\u201cRndF+BN\u201d or \u201cRndF+BN+BM\u201d in Table 4), it appears to become competitive. 4. We investigated several variants of asymmetric BPs such as sign-concordance (Table 2 and 3), batchwise-random vs. fixed-random feedbacks (Table 3) and learning with clamped layers (Table 4 Exp. C2).\n5 Experiments Method We were interested in relative differences between algorithms, not absolute performance. Thus we used common values for most parameters across all datasets to facilitate comparison. Key to our approach was the development of software allowing us to easily evaluate the \u201ccartesian product\u201d of models (experimental conditions) and datasets (tasks). Each experiment was a {model,dataset} pair, which was run 5 times using different learning rates (reporting the best performance). We used MatConvNet (Vedaldi and Lenc 2015) to implement our models.\nDatasets We extensively test our algorithms on 15 datasets of 5 Categories as described below. No data augmentation (e.g., cropping, flip, etc.) is used in any of the experiments. Machine learning tasks: MNIST (LeCun, Cortes, and Burges ), CIFAR-10 (Krizhevsky 2009), CIFAR-100 (Krizhevsky 2009), SVHN(Netzer et al. 2011), STL10 (Coates, Ng, and Lee 2011). Standard training and testing splits were used. Basic-level categorization tasks: Caltech101 (Fei-Fei, Fergus, and Perona 2007): 102 classes, 30 training and 10 testing samples per class. Caltech256-101 (Griffin, Holub, and Perona 2007): we train/test on a subset of randomly sampled 102 classes. 30 training and 10 testing per class. iCubWorld dataset (Fanello et al. 2013): We followed the standard categorization protocol of this dataset. Fine-grained recognition tasks: Flowers17 (Nilsback and Zisserman 2006), Flowers102 (Nilsback and Zisserman 2008). Standard training and testing splits were used. Face Identification: Pubfig83-ID (Pinto et al. 2011), SUFRW-ID (Leibo, Liao, and Poggio 2014), LFW-ID (Huang et al. 2008) We did not follow the usual (verification) protocol of these datasets. Instead, we performed a 80-way face identification task on each dataset, where the 80 identities (IDs) were randomly sampled. Pubfig83: 85 training and 15 testing samples per ID. SUFR-W: 10 training and 5 testing per\nID. LFW: 10 training and 5 testing per ID. Scene recognition: MIT-indoor67 (Quattoni and Torralba 2009): 67 classes, 80 training and 20 testing per class Non-visual task: TIMIT-80 (Garofolo et al. ): Phoneme recognition using a fully-connected network. There are 80 classes, 400 training and 100 testing samples per class.\nTraining Details The network architectures for various experiments are listed in Table 1. The input sizes of networks are shown in the second row of the table. All images are resized to fit the network if necessary.\nMomentum was used with hyperparameter 0.9 (a conventional setting). All experiments were run for 65 epochs. The base learning rate: 1 to 50 epochs 5 \u2217 10\u22124, 51 to 60 epochs 5 \u2217 10\u22125, and 61 to 65 epochs 5 \u2217 10\u22126. All models were run 5 times on each dataset with base learning rate multiplied by 100, 10, 1, 0.1, 0.01 respectively. This is because different learning algorithms favor different magnitudes of learning rates. The best validation error among all epochs of 5 runs was recorded as each model\u2019s final performance. The batch sizes were all set to 100 unless stated otherwise. All experiments used a softmax for classification and the crossentropy loss function. For testing with batch normalization, we compute exponential moving averages (alpha=0.05) of training means and standard deviations over 20 mini batches after each training epoch.\nResults Experiment A: sign-concordant Feedback In this experiment, we show the performances of setting 1, 2 and 3 in Section 2, which we call strict sign-concordance cases: while keeping the signs of feedbacks the same as feedforward ones, the magnitudes of feedbacks are either randomized or set to uniform. The results are shown in Table 2 : Plus sign (+) denotes combination of methods. For example, uSF+BM means Batch Manhattan with uniform sign-concordant feedback. SGD: Stochastic gradient descent, the baseline algorithm. BM: SGD + Batch Manhattan. BN: SGD + Batch Normalization. BN+BM:\nSGD + Batch Normalization + Batch Manhattan. uSF: Uniform sign-concordant feedback. This condition often had exploding gradients. NuSF: same as uSF, but with feedback weights normalized by dividing the number of inputs of the feedforward filter (filter width * filter height * input feature number). This scheme avoids the exploding gradients but still suffers from vanishing gradients. uSF+BM: this setting is somewhat unstable for small batch sizes. Two training procedures were explored: (1) batch size 100 for all epochs (2) batch size 100 for 3 epochs and then batch size 500 for the remaining epochs. The best performance was reported. While this gives a little advantage to this model since more settings were tried, we believe it is informative to isolate the stability issue and show what can be achieved if the model converges well. Note that uSF+BM is the only entry with slightly different training procedures. All other models share exactly the same training procedure & parameters. uSF+BN, uSF+BN+BM, brSF+BN+BM, frSF+BN+BM: These are some combinations of uSF, brSF, frSF, BN and BM. The last three are the most robust, well-performing ,and biologically-plausible algorithms.\nExperiment B: Violating Sign-Concordance with probability p In this experiment, we test the effect of partial sign-concordance. That is, we test settings 4 and 5 as described in Section 2. In these cases, the feedback weight magnitudes were all random. Strict sign-concordance was relaxed by manipulating the probability p of concordance between feedforward and feedback weight signs. Feedback weights V = M \u25e6 sign(W ) \u25e6 Sp depend on the matrix Sp as defined in Section 2. Table 3 Part 1 reports results from setting 4, the case where a new M and Sp is sampled for each batch. Table 3 Part 2 reports results of setting 5, the case where M and Sp are fixed. The main observation from this experiment is that the performance declines as the level\nof sign-concordance decreases.\nExperiment C1: Fixed Random Feedback Results are shown in Table 4: RndF: fixed random feedbacks. RndF+BN, RndF+BN+BM: some combinations of RndF, BN and BM. uSF+BN+BM: one of our best algorithms, for reference. The \u201cRndF\u201d setting is the same as the one proposed by (Lillicrap et al. 2014). Apparently it does not perform well on most datasets. However, combining it with Batch Normalization makes it significantly better. Although it remains somewhat worse than its sign concordant counterpart. Another observation is that random feedback does not work well with BM alone (but better with BN+BM).\nExperiment C2: Control experiments for Experiment C1 The fact that random feedback weights can learn meaningful representations is somewhat surprising. We explore this phenomenon by running some control experiments, where we run two control models for each model of interest: 1. (.)Bottom: The model\u2019s last layer is initialized randomly and clamped/frozen. All learning happens in the layers before the last layer. 2. (.)Top: The model\u2019s layers before the last layer are initialized randomly and clamped/frozen. All learning happens in the last layer. Results are shown in Table 4.\nThere are some observations: (i) When only the last layer was allowed to adapt, all models behaved similarly. This was expected since the models only differed in the way they backpropagate errors. (ii) With the last layer is clamped, random feedback cannot learn meaningful representations. (iii) In contrast, the models with sign concordant feedback can learn surprisingly good representations even with the last layer locked. We can draw the following conclusions from such observations: sign concordant feedback ensures that meaningful error signals reach lower layers by itself, while random feedback is not sufficient. If all layers can learn, random feedback seems to work via a \u201cmysterious co-\nadaptation\u201d between the last layer and the layers before it. This \u201cmysterious co-adaptation\u201d was first observed by (Lillicrap et al. 2014), where it was called \u201cfeedback alignment\u201d and some analyses were given. Note that our Experiment C shows that the effect is more significant if Batch Normalization is applied.\nMiscellaneous Experiment: different settings of Batch Manhattan We show that the 3 settings of BM (as described in Section 3) produce similar performances. This is the case for both symmetric and asymmetric BPs. Results are in Table 5.\n6 Discussion This work aims to establish that there exist variants of the gradient backpropagation algorithm that could plausibly be implemented in the brain. To that end we considered the question: how important is weight symmetry to backpropagation? Through a series of experiments with increasingly asymmetric backpropagation algorithms, our work complements a recent demonstration(Lillicrap et al. 2014) that perfect weight symmetry can be significantly relaxed while still retaining strong performance.\nThese results show that Batch Normalization and/or Batch Manhattan are crucial for asymmetric backpropagation to work. Furthermore, they are complementary operations that are better used together than individually. These results highlight the importance of sign-concordance to asymmetric backpropagation by systematically exploring how performance declines with its relaxation.\nFinally, let us return to our original motivation. How does all this relate to the brain? Based on current neuroscientific understanding of cortical feedback, we cannot make any claim about whether such asymmetric BP algorithms are actually implemented by the brain. Nevertheless, this work shows that asymmetric BPs, while having less constraints, are not computationally inferior to standard BP. So if the brain were to implement one of them, it could obtain most of the benefits of the standard algorithm.\nThis work suggests a hypothesis that could be checked by empirical neuroscience research: if the brain does indeed implement an asymmetric BP algorithm, then there is likely to be a high degree of sign-concordance in cortical forwardbackward connections.\nThese empirical observations concerning Batch Man-\nhattan updating may shed light on the general issue of how synaptic plasticity may implement learning algorithms. They show that changes of synaptic strength can be rather noisy. That is, the sign of a long term accumulation of synaptic potentiation or depression, rather than precise magnitude, is what is important. This scheme seems biologically implementable.\n7 Acknowledgements We thank G. Hinton for useful comments. This work was supported by the Center for Brains, Minds and Machines (CBMM), funded by NSF STC award CCF 1231216.\nReferences [Abdel-Hamid et al. 2012] Abdel-Hamid, O.; Mohamed, A.; Jiang, H.; and Penn, G. 2012. Applying convolutional neural networks concepts to hybrid NN-HMM model for speech recognition. In IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), 4277\u20134280.\n[Bengio et al. 2015] Bengio, Y.; Lee, D.-H.; Bornschein, J.; and Lin, Z. 2015. Towards biologically plausible deep learning. arXiv preprint arXiv:1502.04156.\n[Bengio 2014] Bengio, Y. 2014. How auto-encoders could provide credit assignment in deep networks via target propagation. arXiv preprint arXiv:1407.7906.\n[Chinta and Tweed 2012] Chinta, L. V., and Tweed, D. B. 2012. Adaptive optimal control without weight transport. Neural computation 24(6):1487\u20131518.\n[Coates, Ng, and Lee 2011] Coates, A.; Ng, A. Y.; and Lee, H. 2011. An analysis of single-layer networks in unsupervised feature learning. In International conference on artificial intelligence and statistics, 215\u2013223.\n[Crick 1989] Crick, F. 1989. The recent excitement about neural networks. Nature 337(6203):129\u2013132.\n[Fanello et al. 2013] Fanello, S. R.; Ciliberto, C.; Santoro, M.; Natale, L.; Metta, G.; Rosasco, L.; and Odone, F. 2013. icub world: Friendly robots help building good vision data-sets. In Computer Vision and Pattern Recognition Workshops (CVPRW), 2013 IEEE Conference on, 700\u2013705. IEEE.\n[Fei-Fei, Fergus, and Perona 2007] Fei-Fei, L.; Fergus, R.; and Perona, P. 2007. Learning generative visual models\nfrom few training examples: An incremental bayesian approach tested on 101 object categories. Computer Vision and Image Understanding 106(1):59\u201370.\n[Garofolo et al. ] Garofolo, J.; Lamel, L.; Fisher, W.; Fiscus, J.; Pallett, D.; Dahlgren, N.; and Zue, V. Timit acousticphonetic continuous speech corpus.\n[Graves, Wayne, and Danihelka 2014] Graves, A.; Wayne, G.; and Danihelka, I. 2014. Neural turing machines. arXiv preprint arXiv:1410.5401.\n[Griffin, Holub, and Perona 2007] Griffin, G.; Holub, A.; and Perona, P. 2007. Caltech-256 object category dataset.\n[Grossberg 1987] Grossberg, S. 1987. Competitive learning: From interactive activation to adaptive resonance. Cognitive science 11(1):23\u201363.\n[Hinton and McClelland 1988] Hinton, G. E., and McClelland, J. L. 1988. Learning representations by recirculation. In Neural information processing systems, 358\u2013366. New York: American Institute of Physics.\n[Hinton and Salakhutdinov 2006] Hinton, G. E., and Salakhutdinov, R. R. 2006. Reducing the dimensionality of data with neural networks. Science 313(5786):504\u2013507.\n[Hinton et al. 2012] Hinton, G.; Deng, L.; Yu, D.; Dahl, G. E.; Mohamed, A.-r.; Jaitly, N.; Senior, A.; Vanhoucke, V.; Nguyen, P.; Sainath, T. N.; et al. 2012. Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups. Signal Processing Magazine, IEEE 29(6):82\u201397.\n[Hornik, Stinchcombe, and White 1989] Hornik, K.; Stinchcombe, M.; and White, H. 1989. Multilayer feedforward networks are universal approximators. Neural networks 2(5):359\u2013366.\n[Huang et al. 2008] Huang, G. B.; Mattar, M.; Berg, T.; and Learned-Miller, E. 2008. Labeled faces in the wild: A database for studying face recognition in unconstrained environments. In Workshop on faces in real-life images: Detection, alignment and recognition (ECCV).\n[Ioffe and Szegedy 2015] Ioffe, S., and Szegedy, C. 2015. Batch normalization: Accelerating deep network training by reducing internal covariate shift. arXiv preprint arXiv:1502.03167.\n[Krizhevsky, Sutskever, and Hinton 2012] Krizhevsky, A.; Sutskever, I.; and Hinton, G. 2012. ImageNet classification with deep convolutional neural networks. In Advances in neural information processing systems.\n[Krizhevsky 2009] Krizhevsky, A. 2009. Learning multiple layers of features from tiny images.\n[Le Cun 1986] Le Cun, Y. 1986. Learning process in an asymmetric threshold network. In Disordered systems and biological organization. Springer. 233\u2013240.\n[LeCun, Cortes, and Burges ] LeCun, Y.; Cortes, C.; and Burges, C. J. The mnist database.\n[Leibo, Liao, and Poggio 2014] Leibo, J. Z.; Liao, Q.; and Poggio, T. 2014. Subtasks of Unconstrained Face Recognition. In International Joint Conference on Computer Vision, Imaging and Computer Graphics, VISIGRAPP.\n[Lillicrap et al. 2014] Lillicrap, T. P.; Cownden, D.; Tweed, D. B.; and Akerman, C. J. 2014. Random feedback weights support learning in deep neural networks. arXiv preprint arXiv:1411.0247.\n[Mazzoni, Andersen, and Jordan 1991] Mazzoni, P.; Andersen, R. A.; and Jordan, M. I. 1991. A more biologically plausible learning rule for neural networks. Proceedings of the National Academy of Sciences 88(10):4433\u20134437.\n[Mikolov et al. 2013] Mikolov, T.; Sutskever, I.; Chen, K.; Corrado, G. S.; and Dean, J. 2013. Distributed representations of words and phrases and their compositionality. In Advances in Neural Information Processing Systems (NIPS), 3111\u20133119.\n[Netzer et al. 2011] Netzer, Y.; Wang, T.; Coates, A.; Bissacco, A.; Wu, B.; and Ng, A. Y. 2011. Reading digits in natural images with unsupervised feature learning. In NIPS workshop on deep learning and unsupervised feature learning, volume 2011, 5.\n[Nilsback and Zisserman 2006] Nilsback, M.-E., and Zisserman, A. 2006. A visual vocabulary for flower classification. In Computer Vision and Pattern Recognition, 2006 IEEE Computer Society Conference on. IEEE.\n[Nilsback and Zisserman 2008] Nilsback, M.-E., and Zisserman, A. 2008. Automated flower classification over a large number of classes. In Computer Vision, Graphics & Image Processing, 2008. ICVGIP\u201908. Sixth Indian Conference on. IEEE.\n[O\u2019Reilly 1996] O\u2019Reilly, R. C. 1996. Biologically plausible error-driven learning using local activation differences: The generalized recirculation algorithm. Neural computation 8(5):895\u2013938.\n[Pinto et al. 2011] Pinto, N.; Stone, Z.; Zickler, T.; and Cox, D. 2011. Scaling up biologically-inspired computer vision: A case study in unconstrained face recognition on facebook. In Computer Vision and Pattern Recognition Workshops (CVPRW), 2011 IEEE Computer Society Conference on, 35\u201342. IEEE.\n[Quattoni and Torralba 2009] Quattoni, A., and Torralba, A. 2009. Recognizing indoor scenes. In Computer Vision and Pattern Recognition, 2009. CVPR 2009. IEEE Conference on, 413\u2013420. IEEE.\n[Riedmiller and Braun 1993] Riedmiller, M., and Braun, H. 1993. A direct adaptive method for faster backpropagation learning: The rprop algorithm. In Neural Networks, 1993., IEEE International Conference on, 586\u2013591. IEEE.\n[Rumelhart, Hinton, and Williams 1988] Rumelhart, D. E.; Hinton, G. E.; and Williams, R. J. 1988. Learning representations by back-propagating errors. Cognitive modeling.\n[Smolensky 1986] Smolensky, P. 1986. Information processing in dynamical systems: Foundations of harmony theory.\n[Stellwagen and Malenka 2006] Stellwagen, D., and Malenka, R. C. 2006. Synaptic scaling mediated by glial tnf-\u03b1. Nature 440(7087):1054\u20131059.\n[Taigman et al. 2014] Taigman, Y.; Yang, M.; Ranzato, M.; and Wolf, L. 2014. Deepface: Closing the gap to humanlevel performance in face verification. In Computer Vision\nand Pattern Recognition (CVPR), 2014 IEEE Conference on, 1701\u20131708. IEEE.\n[Turrigiano and Nelson 2004] Turrigiano, G. G., and Nelson, S. B. 2004. Homeostatic plasticity in the developing nervous system. Nature Reviews Neuroscience.\n[Turrigiano 2008] Turrigiano, G. G. 2008. The self-tuning neuron: synaptic scaling of excitatory synapses. Cell 135(3):422\u2013435.\n[Vedaldi and Lenc 2015] Vedaldi, A., and Lenc, K. 2015. MatConvNet \u2013 Convolutional Neural Networks for MATLAB\n[Zamanidoost et al. 2015] Zamanidoost, E.; Bayat, F. M.; Strukov, D.; and Kataeva, I. 2015. Manhattan rule training for memristive crossbar circuit pattern classifiers.\n[Zamanidoost et al. 2015] Zamanidoost, E.; Bayat, F. M.; Strukov, D.; and Kataeva, I. 2015. Manhattan rule training for memristive crossbar circuit pattern classifiers."}], "references": [{"title": "Applying convolutional neural networks concepts to hybrid NN-HMM model for speech recognition", "author": ["Abdel-Hamid"], "venue": "In IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "Abdel.Hamid,? \\Q2012\\E", "shortCiteRegEx": "Abdel.Hamid", "year": 2012}, {"title": "Towards biologically plausible deep learning", "author": ["Bengio"], "venue": "arXiv preprint arXiv:1502.04156", "citeRegEx": "Bengio,? \\Q2015\\E", "shortCiteRegEx": "Bengio", "year": 2015}, {"title": "D", "author": ["L.V. Chinta", "Tweed"], "venue": "B.", "citeRegEx": "Chinta and Tweed 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "A", "author": ["Coates, A.", "Ng"], "venue": "Y.; and Lee, H.", "citeRegEx": "Coates. Ng. and Lee 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "S", "author": ["Fanello"], "venue": "R.; Ciliberto, C.; Santoro, M.; Natale, L.; Metta, G.; Rosasco, L.; and Odone, F.", "citeRegEx": "Fanello et al. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "Learning generative visual models", "author": ["Fergus Fei-Fei", "L. Perona 2007] Fei-Fei", "R. Fergus", "P. Perona"], "venue": null, "citeRegEx": "Fei.Fei et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Fei.Fei et al\\.", "year": 2007}, {"title": "J", "author": ["G.E. Hinton", "McClelland"], "venue": "L.", "citeRegEx": "Hinton and McClelland 1988", "shortCiteRegEx": null, "year": 1988}, {"title": "R", "author": ["G.E. Hinton", "Salakhutdinov"], "venue": "R.", "citeRegEx": "Hinton and Salakhutdinov 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "T", "author": ["G. Hinton", "L. Deng", "D. Yu", "G.E. Dahl", "A.-r. Mohamed", "N. Jaitly", "A. Senior", "V. Vanhoucke", "P. Nguyen", "Sainath"], "venue": "N.; et al.", "citeRegEx": "Hinton et al. 2012", "shortCiteRegEx": null, "year": 2012}, {"title": "Multilayer feedforward networks are universal approximators. Neural networks 2(5):359\u2013366", "author": ["Stinchcombe Hornik", "K. White 1989] Hornik", "M. Stinchcombe", "H. White"], "venue": null, "citeRegEx": "Hornik et al\\.,? \\Q1989\\E", "shortCiteRegEx": "Hornik et al\\.", "year": 1989}, {"title": "G", "author": ["Huang"], "venue": "B.; Mattar, M.; Berg, T.; and Learned-Miller, E.", "citeRegEx": "Huang et al. 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "and Szegedy", "author": ["S. Ioffe"], "venue": "C.", "citeRegEx": "Ioffe and Szegedy 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "ImageNet classification with deep convolutional neural networks. In Advances in neural information processing systems", "author": ["Sutskever Krizhevsky", "A. Hinton 2012] Krizhevsky", "I. Sutskever", "G. Hinton"], "venue": null, "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Learning process in an asymmetric threshold network. In Disordered systems and biological organization", "author": ["Y. Le Cun 1986] Le Cun"], "venue": null, "citeRegEx": "Cun,? \\Q1986\\E", "shortCiteRegEx": "Cun", "year": 1986}, {"title": "J", "author": ["Leibo"], "venue": "Z.; Liao, Q.; and Poggio, T.", "citeRegEx": "Leibo. Liao. and Poggio 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "C", "author": ["T.P. Lillicrap", "D. Cownden", "D.B. Tweed", "Akerman"], "venue": "J.", "citeRegEx": "Lillicrap et al. 2014", "shortCiteRegEx": null, "year": 2014}, {"title": "M", "author": ["P. Mazzoni", "R.A. Andersen", "Jordan"], "venue": "I.", "citeRegEx": "Mazzoni. Andersen. and Jordan 1991", "shortCiteRegEx": null, "year": 1991}, {"title": "G", "author": ["T. Mikolov", "I. Sutskever", "K. Chen", "Corrado"], "venue": "S.; and Dean, J.", "citeRegEx": "Mikolov et al. 2013", "shortCiteRegEx": null, "year": 2013}, {"title": "A", "author": ["Y. Netzer", "T. Wang", "A. Coates", "A. Bissacco", "B. Wu", "Ng"], "venue": "Y.", "citeRegEx": "Netzer et al. 2011", "shortCiteRegEx": null, "year": 2011}, {"title": "and Zisserman", "author": ["Nilsback", "M.-E."], "venue": "A.", "citeRegEx": "Nilsback and Zisserman 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "A", "author": ["Nilsback", "M.-E.", "Zisserman"], "venue": "2008. Automated flower classification over a large number of classes. In Computer Vision, Graphics & Image Processing,", "citeRegEx": "Nilsback and Zisserman 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "Scaling up biologically-inspired computer vision: A case study in unconstrained face recognition on facebook", "author": ["Pinto"], "venue": "In Computer Vision and Pattern Recognition Workshops (CVPRW),", "citeRegEx": "Pinto,? \\Q2011\\E", "shortCiteRegEx": "Pinto", "year": 2011}, {"title": "A", "author": ["A. Quattoni", "Torralba"], "venue": "2009. Recognizing indoor scenes. In Computer Vision and Pattern Recognition, 2009. CVPR", "citeRegEx": "Quattoni and Torralba 2009", "shortCiteRegEx": null, "year": 2009}, {"title": "H", "author": ["M. Riedmiller", "Braun"], "venue": "1993. A direct adaptive method for faster backpropagation learning: The rprop algorithm. In Neural Networks,", "citeRegEx": "Riedmiller and Braun 1993", "shortCiteRegEx": null, "year": 1993}, {"title": "R", "author": ["D.E. Rumelhart", "G.E. Hinton", "Williams"], "venue": "J.", "citeRegEx": "Rumelhart. Hinton. and Williams 1988", "shortCiteRegEx": null, "year": 1988}, {"title": "R", "author": ["D. Stellwagen", "Malenka"], "venue": "C.", "citeRegEx": "Stellwagen and Malenka 2006", "shortCiteRegEx": null, "year": 2006}, {"title": "Deepface: Closing the gap to humanlevel performance in face verification", "author": ["Taigman"], "venue": null, "citeRegEx": "Taigman,? \\Q2014\\E", "shortCiteRegEx": "Taigman", "year": 2014}, {"title": "S", "author": ["G.G. Turrigiano", "Nelson"], "venue": "B.", "citeRegEx": "Turrigiano and Nelson 2004", "shortCiteRegEx": null, "year": 2004}, {"title": "G", "author": ["Turrigiano"], "venue": "G.", "citeRegEx": "Turrigiano 2008", "shortCiteRegEx": null, "year": 2008}, {"title": "and Lenc", "author": ["A. Vedaldi"], "venue": "K.", "citeRegEx": "Vedaldi and Lenc 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "F", "author": ["Zamanidoost, E.", "Bayat"], "venue": "M.; Strukov, D.; and Kataeva, I.", "citeRegEx": "Zamanidoost et al. 2015", "shortCiteRegEx": null, "year": 2015}, {"title": "F", "author": ["Zamanidoost, E.", "Bayat"], "venue": "M.; Strukov, D.; and Kataeva, I.", "citeRegEx": "Zamanidoost et al. 2015", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [], "year": 2016, "abstractText": "Gradient backpropagation (BP) requires symmetric feedforward and feedback connections\u2014the same weights must be used for forward and backward passes. This \u201cweight transport problem\u201d (Grossberg 1987) is thought to be one of the main reasons to doubt BP\u2019s biologically plausibility. Using 15 different classification datasets, we systematically investigate to what extent BP really depends on weight symmetry. In a study that turned out to be surprisingly similar in spirit to Lillicrap et al.\u2019s demonstration (Lillicrap et al. 2014) but orthogonal in its results, our experiments indicate that: (1) the magnitudes of feedback weights do not matter to performance (2) the signs of feedback weights do matter\u2014the more concordant signs between feedforward and their corresponding feedback connections, the better (3) with feedback weights having random magnitudes and 100% concordant signs, we were able to achieve the same or even better performance than SGD. (4) some normalizations/stabilizations are indispensable for such asymmetric BP to work, namely Batch Normalization (BN) (Ioffe and Szegedy 2015) and/or a \u201cBatch Manhattan\u201d (BM) update rule.", "creator": "LaTeX with hyperref package"}}}