{"id": "1511.00920", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Nov-2015", "title": "A web-based IDE for IDP", "abstract": "pure idp is overwhelmingly a reliable knowledge base system based on first order logic. although it today is just finding its way to a larger public but is there still still facing practical challenges. constant adoption of new id languages essentially requires maintaining a newcomer - geek friendly way ; for both users to consciously interact with it. both : an engaging online mobile presence to students try unsuccessfully to convince potential users trying to download the system and offline availability to completely develop or larger applications are an essential. we developed an ide which can serve both purposes through the use entirely of web tool technology. theoretically it enables us to provide the user with a largely modern ide with at relatively little computation effort.", "histories": [["v1", "Tue, 3 Nov 2015 14:30:10 GMT  (862kb,D)", "http://arxiv.org/abs/1511.00920v1", "International Workshop on User-Oriented Logic Programming (IULP 2015), co-located with the 31st International Conference on Logic Programming (ICLP 2015), Proceedings of the International Workshop on User-Oriented Logic Programming (IULP 2015), Editors: Stefan Ellmauthaler and Claudia Schulz, pages 21-32, August 2015"]], "COMMENTS": "International Workshop on User-Oriented Logic Programming (IULP 2015), co-located with the 31st International Conference on Logic Programming (ICLP 2015), Proceedings of the International Workshop on User-Oriented Logic Programming (IULP 2015), Editors: Stefan Ellmauthaler and Claudia Schulz, pages 21-32, August 2015", "reviews": [], "SUBJECTS": "cs.PL cs.AI", "authors": ["ingmar dasseville", "gerda janssens"], "accepted": false, "id": "1511.00920"}, "pdf": {"name": "1511.00920.pdf", "metadata": {"source": "META", "title": "A web-based IDE for IDP", "authors": ["Ingmar Dasseville", "Gerda Janssens"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "IDP[9,4] is a knowledge base system based on an extension of first order logic: FO(\u00b7) [10]. The goal is to split classical programs up into two parts: a declarative part (the domain knowledge) and an imperative part (the tasks done with this knowledge). Hence the name IDP: Imperative Declarative Programming.\nThe language has proven promising in practical situations, but to better support new and existing users, an IDE is an indispensable tool for any new language. In order to facilitate this need, we developed a web-based IDE for FO(\u00b7). The tool is available online at http://dtai.cs.kuleuven.be/krr/idp-ide/. This new IDE supports the basic features you would expect from an IDE such as syntax highlighting, error/warning visualization, and auto-indentation. On top of this there are also a few features specific to IDP. An example is the unsat core visualization, this helps the user debug a program by indicating what part of a theory is inconsistent. The editor has been used successfully in a course teaching IDP at the KU Leuven, and the online version has already attracted new users for IDP who use it in e.g. the tax administration business.\nIDP had one previous IDE[16]. It was based on the Eclipse Environment [11] and XText [25], however it was tedious to keep this IDE up to date with new Eclipse versions and IDP language updates. In this new IDE we used a more lightweight approach, while relying on the maturisation of web technologies. This enabled us to provide more features with a smaller code base and to host an online version of our IDE, which can be integrated into a website to present the system.\nIn the following sections we introduce the basics of IDP, give an overview of the features of the IDE, give some insights in the implementation of the IDE and finally compare our IDE with other IDEs for systems that are similar to IDP.\nar X\niv :1\n51 1.\n00 92\n0v 1\n[ cs\n.P L\n] 3\nN ov\n2 01\n5"}, {"heading": "1.1 IDP", "text": "IDP is a knowledge base system. IDP programs typically consist of 4 objects. A vocabulary, theory and structure are used to declaratively define the knowledge which is relevant for the program. The procedure then further explains what the system should do witht this knowledge.\nVocabulary The vocabulary declares which types/predicates/functions will be used. Theory The theory is the representation of the knowledge over a vocabulary, expressed in FO(\u00b7). It makes use of the standard first order concepts such as \u2200,\u2203,\u21d2,\u2227,\u2228,\u00ac extended with arithmetic, types, and inductive definitions. Structure A structure is a (partial) interpretation of the vocabulary. It should at least interpret the types of the vocabulary and can further interpret as little or as much of the rest of the vocabulary as desired. Models of a theory fully interpret all symbols so that the theory is satisfied. Procedure IDP uses a Lua scripting environment to interact with the above objects. A typical procedure would be to print the models of the theory, but this procedure could also include an interactive simulation of a system which is described in the theory.\nIDP offers a lot of built-in procedures - inferences - which operate on the above objects. Some examples of these are:\nModelexpand(Theory,Structure) This inference produces a model satisfying a theory and expanding a partial structure. The most typical main procedure consists of printing the models returned by this method. Unsatcore(Theory,Structure) This inference produces an unsat core, which is a subset of the theory which is inconsistent with the structure. This is useful for debugging purposes. Propagate(Theory,Structure) Refines the structure with logical consequences of the theory and the structure. Progress(Theory,Structure) Returns the set of possible next states (structures) for a linear time calculus (time dependent) theory. This can be used to simulate a dynamic system as explained in [2]."}, {"heading": "1.2 Approach to the IDE", "text": "The IDP system is comparable to ASP systems, for which a multitude of IDEs were developed, which are explored further in Section 3. Our approach differed from most of the others in the sense that we tried to develop a more lightweight system. A lot of the IDEs try to develop a lot of tools from scratch. However, good frameworks are already available for developing IDE tools. We chose for a web-based approach, based on existing frameworks. This approach provided us with some advantages.\nA web-based tool is agnostic about the operating system it runs on. This means that no special code is needed differentiating the different operating systems, while still providing a modern-looking layout.\nAnother advantage is that we can provide the IDE as a local application as well as a website. The local application is based on a locally run web server. The workspace folder and the IDP run command can be set via a configuration file. The application can be accessed by browsing to localhost. The web application is the same tool as the local application with some added restrictions. The workspace folder is not writable via the application and the resources for running files are limited."}, {"heading": "2 Overview of the IDE", "text": ""}, {"heading": "2.1 Features", "text": "Editing Most of the time a user spends in an IDE, he is editing the source code. It is the responsibility of the IDE to support the user as well as possible. Apart from the obvious editing of text, a user expects facilities such as highlighting errors and auto indentation.\nBasic Text Editing The IDE provides all the features you would expect from a simple text editor. This includes picking a file to edit, providing a text area to edit the code, and supporting the most common general editing features such as undo/redo, find/replace and line numbers.\nAutocompletion/Code Snippets IDEs have often very different notions of autocompletion. Some IDEs perform a full semantic analysis to suggest the possible correct completions of the current word. The autocompletion in this IDE is more simplistic. It is based on all the words occurring in the current file combined with known code snippets. These snippets are predefined and consist of a set of common pieces of code. These include declaration of components such as theory and vocabulary, and for example a reachability relation. Autocompletion can be triggered through the ctrl-space shortcut.\nSyntax Highlighting Syntax highlighting is done on a syntactical basis. The theory is divided into tokens, they indicate the function of the word in the source coding, such as logical symbol, comment or keyword. This information is then used to color certain parts of the code.\nLogical Symbol Replacement IDP makes heavy use of ASCII representations of mathematical symbols. The tokenized version of the theory identifies the logical symbols. The editor automatically replaces these symbols with their mathematical counterparts.\nAuto indentation Uniform indentation vastly increases the readability of files. The editor supports the user to use a consistent indentation and provides the possibility to reindent the whole document.\nError/Warning visualization Syntax errors and warnings are visualized right where they occur through zig-zag lines. Without this feature, users spend a lot of time tracking down the exact location of an error. This feature is implemented by running the internal parser of IDP, so the feature always uses the current version of the syntax. This prevents the IDE from being unusable when a new language construct is added to the language.\nCode Sharing The editor (both local and server) provides the capability to export code and provide a global link for sharing the code. This part of the editor uses a GitHub Gist-account[13] to back-up the code.\nRunning Apart from editing, the IDE can also provide enhanced support for running the files a user wrote. The most basic support is simple terminal support. But this IDE also supports some extra visualization features.\nFile Running Executing a file is supported in the IDE. This includes the possibility of an interactive session, or a program where a Lua procedure needs to ask input from the user as can be seen in Figure 2.\nLua Shell Mode Apart from running the main procedure of a specific file, it is also possible to select \u201cInteractive Mode\u201d in the dropdown menu to the left of the run button. This starts an interactive Lua Shell so the user can interact directly with the components in the file.\nUnsat core visualization IDP supports the user throughout the debugging process of unsatisfiable theories with the help of unsat core extraction[22]. This process extracts a subset-minimal part of the theory which is inconsistent over a given structure. The result is thus a set of ground formulas which are instantiations of lines in the theory. This information can be visualized in the editor with zig-zag lines at the appropriate theory lines together with a tooltip indicating the instantiations in the unsat core. This visualization can be seen in Figure 3. In this example, the structure specifies there are 2 animals, of which one can fly. This is not consistent with the theory stating that all animals fly. The core explains the unsatisfiability of the theory with the instantiantion of the sentence where the unsatisfying animal is the penguin.\nVisualizations IDP provides the possibility to write theories over a graphical vocabulary so that the output can be visualized. This visualization can even be interactive, so it can react to clicks of the user. This visualization technology is called IDPD3[18], it uses the same philosophy as ASPVIZ[5] and IDPDRAW[15] extended with interaction. This technology is mostly used to visualize the output of a search problem but can also be used to provide an interactive puzzle to a user, as can be seen in Figure 4. When a visualization method is called, a pane with the image is automatically opened.\nOnline-Specific Features A few modifications are used for the online version of the IDE. In the online version of the IDE, a pane with explanations can be automatically coupled to an example. In this way, a tutorial with examples can be completely integrated with the IDE. So, the IDE can be used as a learning\nenvironment. The public website of the IDE is structured in this way, an example of this can be seen in Figure 5.\nThe security aspect enforces a restriction of some of the features. When providing a system online, precautions need to be taken so that the system is safe. In a standard setting, the Lua environment of IDP provides full access to the host system. As a consequence, unsafe methods should be disabled. Also resource limitations are imposed upon requests coming from the web."}, {"heading": "2.2 Implementation", "text": "The client side of the IDE completely consists of JavaScript, CSS and HTML code and the server is written in Haskell. Libraries were used for the generic components of the UI. The general structure of the IDE can be seen in Figure 6.\nCodeMirror CodeMirror[7] is a JavaScript-based text editor with an API which has good support for extensions and new languages. All text-editing features are implemented on top of this editor. Features such as syntax highlighting are natively supported and only require simple, language-specific code to be added. Bootstrap This state-of-the-art CSS/JavaScript framework developed by Twitter [3] allows for the quick creation of a simple and effective user interface. It is well supported by all browsers, so we can ensure that the IDE works equally well on all operating systems.\nSnap To communicate between the CodeMirror instance in the web browser and IDP, we wrapped IDP into a RESTful interface. This is the most common technique on the web for exposing an API. This interface is written in Haskell using the Snap[23] framework. Socket.io When running an interactive IDP session, we needed to keep a session open during its runtime. To support this communication, we chose for WebSockets. This is a fairly new technology, but luckily socket.IO[24] provides an automatic fallback mechanism whenever a browser does not support WebSockets. In this case, the application will run through traditional XHR/JSONP requests which simulate the WebSockets.\nWith the use of these technologies, the actual code of the IDE can be very compact, e.g. the web server consists of less than 300 lines. We also expect that future changes to the IDP language require very little change to the IDE as features such as the error reporting are fully dependent on the parser of the IDP executable. This approach to parsing also has disadvantages. It is difficult to implement advanced features such as smarter autocompletion without having a full parser available in the IDE itself. We judged that for this editor the costs did not outweigh the benefits."}, {"heading": "3 Other IDEs", "text": "Existing editors for truly-declarative languages such as FO(\u00b7) and ASP can be roughly divided in two groups: custom IDEs which are built from the ground up and Eclipse plugins. This IDE falls into a third category, the web-based IDEs. As far as the authors know, such editors only exist for imperative languages."}, {"heading": "3.1 Custom IDEs", "text": "Custom IDEs often lack some basic features such as find/replace or undo/redo, which vastly undermines their practical usability. An example of such an editor is OntoDLV[21], which does not support undo. ASPIDE[12] seems to be the most comprehensive custom IDE which does include basic features such as find and\nundo. It has an impressive feature list, including quick fixes for code. However, the use of Java GUI tools causes the GUI to be platform independent. This is easy from the programmer point of view, but OS-specific things that users expect in all applications, such as shortcuts, are not there."}, {"heading": "3.2 Eclipse Plugins", "text": "Eclipse plugins benefit from the good integration Eclipse provides for new languages. However, there are some disadvantages to this approach. Eclipse requires a complete new parser for the language. This means that the IDE needs an update at every syntax change of the language. It is sometimes difficult to ensure the real language and the Eclipse language consist of the same grammar, thus it occurs often that either the parser is not strict enough and some syntax errors go unnoticed until the file is run, or some errors are indicated which are actually acceptable constructs.\nExamples of ASP editors in this category are Videas[19] and SeaLion[20] with the visualization tool Kara [17]. SeaLion seems like the most modern ASP IDE. It has a tight integration with Eclipse, and provides features such as a debugger and visualizations."}, {"heading": "3.3 Web-based IDEs", "text": "Web-based IDEs are a relatively recent phenomenon, but have gained some traction in the last few years. Cloud9[6] is one of the more popular ones. It provides the user with all tools he uses during development of an application, including full access to a virtual machine. The IDP web-IDE belongs to this category.\nOur IDE has one advantage that most of the others have not. It is one of the few tools which support both offline and online use. Two other (general purpose) IDEs that support this are Codiad [8] and ICEcoder [14]. Both tools use PHP for their back-end and ace-editor for front-end editing. Their editing features are more extensive than our IDE, especially the support for folders and projects. However, there is no integration for running the files which are being edited.\nSome ASP systems do have an online tool available. The DLV system has an online version since 2006 available at http://asptut.gibbi.com/. This website mainly consist of a plain textbox and a run button. It mainly serves the purpose to follow a tutorial in the form of slides. Clingo has a more recent tool available at http://potassco.sourceforge.net/clingo.html including syntax highlighting.\nOne system in this category is special. Atom [1] is a purely offline editor which is also based on web technology. It essentially consists of a web browser with less security restrictions, so it integrates better with the local filesystem, but there is no way to run Atom as a web service."}, {"heading": "4 Integration in other web applications", "text": "An advantage of our approach is that it makes it possible to include parts of the IDE into other web-based applications. Inserting an IDE in an application is as simple as loading the CodeMirror library with the right set of options. Running a file can be done through the REST interface which is exposed by an IDE server.\nWe currently have 2 demos online which make use of this approach. The first one demonstrates the selection of courses in a study programme. Through the inclusion of the editor we can provide the possibility for the user to interactively modify the underlying theory of this course selection system. This demo is available at http://krr.bitbucket.org/courses/. The second one demonstrates a problem where PC\u2019s should be configured to have the right software, this demo is available at http://krr.bitbucket.org/desired/."}, {"heading": "5 Conclusion", "text": "In this paper we presented the IDP Web-IDE. This new IDE for the IDP system was developed using web technology. This enabled us to provide an online as well as an offline version of the editor. The IDE supports most of the basic features you would expect from an IDE. We believe that the web-based approach is a new setting for IDEs and that this setting works inspiring e.g. to add new features. The recent addition of the tutorial mode is such an example.\nHowever, some features from other IDEs, such as managing multiple files as a project are currently not supported. We intend to expand the the IDE so it can continue to serve as a teaching and development tool. We also want to make the tools in the IDE available for other users so it becomes easier for other developers to make tools like in Section 4.\nThe IDE is publicly available at http://dtai.cs.kuleuven.be/krr/idp-ide/. There, the server version can be tried and a link to download the IDE for offline use is provided."}], "references": [{"title": "Simulating dynamic systems using linear time calculus theories", "author": ["Bart Bogaerts", "Joachim Jansen", "Maurice Bruynooghe", "Broes De Cat", "Joost Vennekens", "Marc Denecker"], "venue": "TPLP, 14:477\u2013492,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Predicate logic as a modeling language: Modeling and solving some machine learning and data mining problems with IDP3", "author": ["Maurice Bruynooghe", "Hendrik Blockeel", "Bart Bogaerts", "Broes De Cat", "Stef De Pooter", "Joachim Jansen", "Anthony Labarre", "Jan Ramon", "Marc Denecker", "Sicco Verwer"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "ASPVIZ: declarative visualisation and animation using answer set programming", "author": ["Owen Cliffe", "Marina De Vos", "Martin Brain", "Julian A. Padget"], "venue": "Logic Programming, 24th International Conference,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Predicate logic as a modelling language: The IDP system", "author": ["Broes De Cat", "Bart Bogaerts", "Maurice Bruynooghe", "Marc Denecker"], "venue": "CoRR, abs/1401.6312,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "Building a knowledge base system for an integration of logic programming and classical logic", "author": ["Marc Denecker", "Joost Vennekens"], "venue": "In Mar\u0301\u0131a Garc\u0301\u0131a de la Banda and Enrico Pontelli, editors, ICLP,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2008}, {"title": "ASPIDE: integrated development environment for answer set programming", "author": ["Onofrio Febbraro", "Kristian Reale", "Francesco Ricca"], "venue": "Logic Programming and Nonmonotonic Reasoning - 11th International Conference,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2011}, {"title": "A system for visualising and visual editing of interpretations for answer-set programs", "author": ["Christian Kloim\u00fcllner", "Johannes Oetsch", "J\u00f6rg P\u00fchrer", "Hans Tompits. Kara"], "venue": "Applications of Declarative Programming and Knowledge Management - 19th International Conference, INAP 2011, and 25th Workshop on Logic Programming,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2011}, {"title": "Visualising interactive inferences with IDPD3", "author": ["Ruben Lapauw", "Ingmar Dasseville", "Marc Denecker"], "venue": "In International Workshop on User-Oriented Logic Programming,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2015}, {"title": "VIDEAS: A development tool for answer-set programs based on model-driven engineering technology", "author": ["Johannes Oetsch", "J\u00f6rg P\u00fchrer", "Martina Seidl", "Hans Tompits", "Patrick Zwickl"], "venue": "Logic Programming and Nonmonotonic Reasoning - 11th International Conference,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2011}, {"title": "The SeaLion has landed: An IDE for answer-set programming - preliminary report", "author": ["Johannes Oetsch", "J\u00f6rg P\u00fchrer", "Hans Tompits"], "venue": "editors, Applications of Declarative Programming and Knowledge Management - 19th International Conference, INAP 2011, and 25th Workshop on Logic Programming,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2011}, {"title": "OntoDLV: An ASP-based system for enterprise ontologies", "author": ["Francesco Ricca", "Lorenzo Gallucci", "Roman Schindlauer", "Tina Dell\u2019Armi", "Giovanni Grasso", "Nicola Leone"], "venue": "J. Log. Comput.,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2009}, {"title": "Debugging overconstrained declarative models using unsatisfiable cores. In ASE, pages 94\u2013105", "author": ["Ilya Shlyakhter", "Robert Seater", "Daniel Jackson", "Manu Sridharan", "Mana Taghdiri"], "venue": "IEEE Computer Society,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2003}], "referenceMentions": [{"referenceID": 3, "context": "IDP[9,4] is a knowledge base system based on an extension of first order logic: FO(\u00b7) [10].", "startOffset": 3, "endOffset": 8}, {"referenceID": 1, "context": "IDP[9,4] is a knowledge base system based on an extension of first order logic: FO(\u00b7) [10].", "startOffset": 3, "endOffset": 8}, {"referenceID": 4, "context": "IDP[9,4] is a knowledge base system based on an extension of first order logic: FO(\u00b7) [10].", "startOffset": 86, "endOffset": 90}, {"referenceID": 0, "context": "This can be used to simulate a dynamic system as explained in [2].", "startOffset": 62, "endOffset": 65}, {"referenceID": 11, "context": "Unsat core visualization IDP supports the user throughout the debugging process of unsatisfiable theories with the help of unsat core extraction[22].", "startOffset": 144, "endOffset": 148}, {"referenceID": 7, "context": "This visualization technology is called IDPD3[18], it uses the same philosophy as ASPVIZ[5] and IDPDRAW[15] extended with interaction.", "startOffset": 45, "endOffset": 49}, {"referenceID": 2, "context": "This visualization technology is called IDPD3[18], it uses the same philosophy as ASPVIZ[5] and IDPDRAW[15] extended with interaction.", "startOffset": 88, "endOffset": 91}, {"referenceID": 10, "context": "An example of such an editor is OntoDLV[21], which does not support undo.", "startOffset": 39, "endOffset": 43}, {"referenceID": 5, "context": "ASPIDE[12] seems to be the most comprehensive custom IDE which does include basic features such as find and", "startOffset": 6, "endOffset": 10}, {"referenceID": 8, "context": "Examples of ASP editors in this category are Videas[19] and SeaLion[20] with the visualization tool Kara [17].", "startOffset": 51, "endOffset": 55}, {"referenceID": 9, "context": "Examples of ASP editors in this category are Videas[19] and SeaLion[20] with the visualization tool Kara [17].", "startOffset": 67, "endOffset": 71}, {"referenceID": 6, "context": "Examples of ASP editors in this category are Videas[19] and SeaLion[20] with the visualization tool Kara [17].", "startOffset": 105, "endOffset": 109}], "year": 2015, "abstractText": "IDP is a knowledge base system based on first order logic. It is finding its way to a larger public but is still facing practical challenges. Adoption of new languages requires a newcomer-friendly way for users to interact with it. Both an online presence to try to convince potential users to download the system and offline availability to develop larger applications are essential. We developed an IDE which can serve both purposes through the use of web technology. It enables us to provide the user with a modern IDE with relatively little effort.", "creator": "LaTeX with hyperref package"}}}