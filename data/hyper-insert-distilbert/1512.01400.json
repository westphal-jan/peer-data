{"id": "1512.01400", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Dec-2015", "title": "Max-Pooling Dropout for Regularization of Convolutional Neural Networks", "abstract": "recently, strategic dropout has typically seen increasing theoretical use in robust deep brain learning. common for particularly deep convolutional neural composite networks, dropout design is known to naturally work well in fully - connected layers. however, furthermore its conceptual effect in applying pooling layers above is still often not visually clear. on this paper demonstrates that max - intensive pooling dropout reasoning is currently equivalent to realistic randomly simulated picking activation based locally on a multinomial confidence distribution at routine training use time. in light time of maintaining this insight, 1 we both advocate projects employing purely our proposed probabilistic weighted weights pooling, instead which of commonly typically used abstract max - rich pooling, to act widely as model averaging at test time. empirical testing evidence quickly validates the perceived superiority of practical probabilistic weighted pooling. again we jointly also compare complex max - pooling dropout and dynamic stochastic pooling, but both of which strongly introduce stochasticity based on multinomial distributions at pooling integration stage.", "histories": [["v1", "Fri, 4 Dec 2015 13:18:37 GMT  (212kb)", "http://arxiv.org/abs/1512.01400v1", "The journal version of this paper [arXiv:1512.00242] has been published in Neural Networks,this http URL"]], "COMMENTS": "The journal version of this paper [arXiv:1512.00242] has been published in Neural Networks,this http URL", "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.NE", "authors": ["haibing wu", "xiaodong gu"], "accepted": false, "id": "1512.01400"}, "pdf": {"name": "1512.01400.pdf", "metadata": {"source": "CRF", "title": "Max-Pooling Dropout for Regularization of Convolutional Neural Networks", "authors": ["Haibing Wu"], "emails": ["haibingwu13@fudan.edu.cn,", "xdgu@fudan.edu.cn"], "sections": [{"heading": null, "text": "convolutional neural networks, dropout is known to work well in fully-connected layers. However, its effect in pooling layers is still not clear. This paper demonstrates that max-pooling dropout is equivalent to randomly picking activation based on a multinomial distribution at training time. In light of this insight, we advocate employing our proposed probabilistic weighted pooling, instead of commonly used max-pooling, to act as model averaging at test time. Empirical evidence validates the superiority of probabilistic weighted pooling. We also compare max-pooling dropout and stochastic pooling, both of which introduce stochasticity based on multinomial distributions at pooling stage.\nKeywords: Deep learning, convolutional neural network, max-pooling dropout"}, {"heading": "1 Introduction", "text": "Deep convolutional neural networks (CNNs) have recently been substantially improving on the state of art in computer vision. A standard CNN consists of alternating convolutional and pooling layers, with fully-connected layers on top. Compared to regular feed-forward networks with similarly-sized layers, CNNs have much fewer connections and parameters due to the local-connectivity and shared-filter architecture in convolutional layers, so they are far less prone to over-fitting. Another nice property of CNNs is that pooling operation provides a form of translation invariance and thus benefits generalization. Despite these attractive qualities and despite the fact that CNNs are much easier to train than other regular, deep, feed-forward neural networks, big CNNs with millions or billions of parameters still easily overfit relatively small training data.\nDropout [1] is a recently proposed regularizer to fight against over-fitting. It is a regularization method that stochastically sets to zero the activations of hidden units for each training case at training time. This breaks up co-adaptions of feature detectors since the dropped-out units cannot influence other retained units. Another way to interpret dropout is that it yields a very efficient form of model averaging where the number of trained models is exponential in that of units, and these models share the same parameters. Dropout has also inspired other stochastic model averaging methods such as stochastic pooling [4], drop-connect [5] and maxout networks [3].\nAlthough dropout is known to work well in fully-connected layers of convolutional\nvation based on a multinomial distribution, and the distribution has a tunable parameter p (the retaining probability). In light of this, probabilistic weighted pooling is proposed and employed at test time to efficiently average all possibly max-pooling dropout trained networks. Our empirical evidence confirms the superiority of probabilistic weighted pooling over max-pooling. Like fully-connected dropout, the number of possible max-pooling dropout models also grows exponentially with the increase of the number of hidden units that are fed into pooling layers, but decreases with the increase of pooling region\u2019s size.\nAs both stochastic pooling [4] and max-pooling dropout randomly sample activation based on multinomial distributions at pooling stage, it becomes interesting to compare their performance. Experimental results show that stochastic pooling performs between max-pooling dropout with different retaining probabilities, yet max-pooling dropout with typical retaining probabilities often outperforms stochastic pooling by large margins.\nIn this paper, dropout on the input to max-pooling layers is also called max-pooling dropout for brevity. Similarly, dropout on the input to fully-connected layers is called fully-connected dropout."}, {"heading": "2 Related Work", "text": "Dropout is a new regularization technique that has been more recently employed in deep learning. Pioneering work by Hinton et al. [1] only applied dropout to fully connected layers. It was the reason they provided that the convolutional shared-filter architecture was a drastic reduction in the number of parameters and thus reduced its possibility to overfit in convolutional layers. Krizhevsky et al. [6] trained a very big convolutional neural net to classify 1.2 million ImageNet images. Two primary methods were used to reduce over-fitting in their experiments. The first one was data augmentation, an easiest and most commonly used approach to reduce over-fitting on image data. Dropout was exactly the second one. Also, it was only used in fully-connected layers.\nStochastic pooling [4] is a dropout-inspired regularization method. Instead of always capturing the strongest activity within each pooling region as max-pooling does, stochastic pooling randomly picks the activations according to a multinomial distribution.\nMaxout network [3] is another model inspired by dropout. Combining with dropout, maxout networks have been shown to achieve best results on five benchmark datasets. However, the authors did not train maxout networks without dropout. Besides, they did not train the rectified counterparts with dropout and directly compare it with maxout networks. Dropout has also motivated other stochastic model averaging methods, such as drop-connect [5] and adaptive dropout [8]."}, {"heading": "3 Max-Pooling Dropout", "text": "We now demonstrate that max-pooling dropout is equivalent to sampling activation"}, {"heading": "3.1 Max-Pooling Dropout at Training Time", "text": "Consider a standard CNN composed of alternating convolutional and pooling layers, with fully-connected layers on top. On each presentation of a training example, if layer l is followed by a pooling layer, the forward propagation without dropout can be described as\n)()()()( 1 )1( ),,...,,...,( lj l n l i ll j RiaaaPoola   . (1)\nHere )(l jR is pooling region j at layer l and is the activity of each neuron within it. || )(ljRn  is the number of units in )(l jR . Pool() denotes the pooling function. Pooling operation provides a form of spatial transformation invariance as well as reduces the computational complexity for upper layers. An ideal pooling method is expected to preserve task-related information while discarding irrelevant image details. Two popular choices are average- and max-pooling. Average-pooling takes all activations in a pooling region into consideration with equal contributions. This may downplay high activations as many low activations are averagely included. Max-pooling only captures the strongest activation, and disregards all other units in the pooling region. We now show that employing dropout in max-pooling layers avoids both disadvantages by introducing stochasticity.\nWith dropout, the forward propagation becomes\n,~\u02c6 )()()( lll ama  (2)\n.),\u02c6,...,\u02c6,...,\u02c6( )()()()(1 )1( l j l n l i ll j RiaaaPoola   (3)\nHere  denotes element wise product and )(lm is a binary mask with each element )(l\nim drawn independently from a Bernoulli distribution. This mask is multiplied with activations )(la in a pooling region at layer l to produce dropout-modified activations )(\u02c6 la . The modified activations are then passed to pooling layers. Fig. 1 presents a concrete example to illustrate the effect of dropout in max-pooling layers. Clearly, without\nput. Therefore, max-pooling at training time becomes a stochastic procedure. To formulate such stochasticity, suppose the activations ),...,,( )()(2 )( 1 l n ll aaa in each pooling region j are reordered in non-decreasing order, i.e., )()( 2 )( 1 ...0 l n ll aaa  . With dropout, each unit in the pooling region could be possibly set to zero with probability of q = 1 \u2013 p is the dropout probability, and p is the retaining probability). As a result, )(l ia will be selected as the pooled activation on condition that (1) )()( 2 )( 1 ,...,, l n l i l i aaa   are dropped out, and (2) )(l ia is retained. This event occurs with probability of pi according to probability theory:\n).,...,2,1(,)Pr( )()1( nipqpaa ini l i l j   (4)\nA special event occurring with probability of 0p = q\nn is that all the units in a pooling\nregion is dropped out, and the pooled output becomes 0)(0  la . Therefore, performing max-pooling over the dropout-modified pooling region is exactly sampling from the following multinomial distribution to select an index i, then the pooled activation is simply )(l ia :\n).,...,,,(~where, 210 )()1( n l i l j pppplMultinomiaiaa   (5)\nLet s be the size of a feature map at layer l (with r feature maps), and t be the size of pooling regions. The number of pooling region is therefore rs/t for non-overlapping pooling. Each pooling region provides t+1 choices of the indices, then the number of possibly trained models C at layer l is\n    .)(11 rsrsttrs tbttC  (6) So the number of possibly max-pooling dropout trained models is exponential in the number of units that are fed pooling max-pooling layers, and the base b(t) )2)1)(1(  t ttb depends on the size of pooling regions. Obviously, with the increase of the size of pooling regions, the base b(t) decreases, and the number of possibly trained models becomes smaller. Note that the number of possibly fully-connected dropout trained models is also exponential in the number of units that are fed into fullyconnected layers, but with 2 as the base."}, {"heading": "3.2 Probabilistic Weighted Pooling at Test Time", "text": "Using dropout in fully-connected layers during training, the whole network containing all the hidden units should be used at test time, but with their outgoing weights halved to compensate for the fact that twice as many of them are active [1], or with their activations halved. Using max-pooling dropout during training, one might intuitively pick as output the strongest activation multiplied by the retaining probability:\n),...,,...,max( )()()(1 )1( l n l i ll j aaapa   . (7)\nSince the strongest activation in a pooling region is scaled down by the retaining\nprobability, we call this scaled max-pooling.\naccurate approximation of averaging all possibly trained dropout networks. In this pooling scheme, the pooled activity is linear weighted summation over activations in each region:\n. 1\n)(\n0 )()1(  \n  n\ni\nl\nii\nn\ni\nl\nii\nl j apapa (8)\nHere pi is exactly the probability calculated by Eqn. (4). This type of probabilistic weighted summation can be interpreted as an efficient form of model averaging where each selection of index i corresponds to a different model. Empirical evidence will confirm that probabilistic weighted pooling is a more accurate approximation of averaging all possible dropout models than scaled max-pooling."}, {"heading": "4 Empirical Evaluations", "text": "Experiments are conducted on three datasets: MNIST, CIFAR-10 and CIFAR-100. MNIST consists of 28x28 pixel grayscale images, each containing a digit 0 to 9. There are 60,000 training and 10,000 test examples. We do not perform any preprocessing except scaling the pixel values to [0, 1]. The CIFAR-10 dataset [2] consists of ten classes of natural images with 50,000 examples for training and 10,000 for testing. Each example is a 32x32 RGB image taken from the tiny images dataset collected from the web. CIFAR-100 is just like CIFAR-10, but with 100 categories. We also scale to [0, 1] for CIFAR-10 and CIFAR-100 and subtract the mean value of each channel computed over the dataset for each image.\nWe use rectified linear function [7] for convolutional and fully-connected layers, and softmax activation function for the output layer. More commonly used sigmoidal and tanh nonlinearities are not adopted due to gradient vanishing problem with them. Our models are trained using stochastic mini-batch gradient descent with a batch size of 100, momentum of 0.95, learning rate of 0.1 to minimize the cross entropy loss. The weights in all layers are initialized from a zero-mean Gaussian distribution with 0.1 as standard deviation and the constant 0 as the neuron biases in all layers.\nThe CNN architecture for MNIST is 1x28x28-20C5-2P2-40C5-2P2-1000N-10N, which represents a CNN with 1 input image of size 28x28, a convolutional layer with 20 feature maps and 5x5 filters, a pooling layer with pooling region 2x2 and stride 2, a convolutional layer with 40 feature maps and 5x5 filters, a pooling layer with pooling region 2x2 and stride 2, a fully-connected layer with 1000 hidden units, and an output layer with 10 units (one per class). The architecture for CIFAR-10 is 3x32x32-96C53P2-128C3-3P2-256C3-3P2-2000N-2000N-10N. The architecture for CIFAR-100 is the same with CIFAR-10 except with 100 output units."}, {"heading": "4.1 Probabilistic Weighted Pooling vs. (Scaled) Max-Pooling", "text": "We initially validate the superiority of probabilistic weighted pooling over max-pooling\nand scaled max-pooling using MNIST. The CNNs are trained for 1000 epochs. For max-pooling dropout, CNN models are trained with different retaining probabilities. Fig. 2 compares the test performances produced by different pooling methods at test time. Generally, probabilistic weighted pooling performs better than max-pooling and scaled max-pooling with different retaining probabilities. For small p (the retaining probability), max-pooling and scaled max-pooling performs very poorly; probabilistic weighted pooling is considerably better. With the increase of p, the performance gap becomes smaller. This is not surprising as the pooled outputs for different pooling methods are close to each other for large p. An extreme case is that when p = 1, scaled maxpooling and probabilistic weighted pooling are exactly the same with max-pooling.\nWe then compares different pooling methods at test time for max-pooling dropout trained models on CIFAR-10 and CIFAR-100. The retaining probability is set to 0.3, 0.5 and 0.7 respectively. At test time, max-pooling, scaled max-pooling and probabil-\n= 0.3, scaled max-pooling and probabilistic weighted pooling perform poorly. Probabilistic weighted pooling is the best performer with different retaining probabilities. The increase of p narrows different pooling methods\u2019 performance gap."}, {"heading": "4.2 Max-Pooling Dropout vs. Stochastic Pooling", "text": "Similar to max-pooling dropout, stochastic pooling [4] also randomly picks activation according to a multinomial distribution at training time, and also involves probabilistic weighting at test time. More concretely, at training time it first computes the probability pi for each unit within pooling region j at layer l by normalizing the activations:\n).,...,2,1(,\n1\n)(\n)(\nni\na\na p\nn\nk\nl\nk\nl\ni\ni \n \n(9)\nIt then samples from a multinomial distribution based on pi to select an index i in the pooling region. The pooled activation is simply )(l ia :\n).,...,,(~where, 21 )()1( n l i l j ppplMultinomiaiaa   (10)\nAt test time, probabilistic weighting is adopted to act as model averaging. That is,\nthe activations in each pooling region are weighted by the probability pi and summed:\n. 1 )()1(  \n  n\ni\nl\nii\nl\nj apa (11)\nOne may have found that stochastic pooling bears much resemblance to max-pooling dropout, as both involve stochasticity at pooling stage. We are therefore very interested in their performance differences. To compare their performances, we train CNN models with different retaining probabilities on MNIST, CIFAR-10 and CIFAR-100. For maxpooling dropout trained models, only probabilistic weighted pooling is used at test time. Fig. 4 compares the test performances of max-pooling dropout with different retaining\nlarge, max-pooling dropout performs poorer than stochastic pooling. Yet max-pooling dropout with typical p (around 0.5) outperforms stochastic pooling by a large margin. Therefore, although stochastic pooling is hyper-parameter free and this saves the tuning of retaining probability, its performance is often inferior to max-pooling dropout."}, {"heading": "5 Conclusions", "text": "This paper mainly addresses the problem of understanding and using dropout on the input to max-pooling layers of convolutional neural nets. At training time, max-pooling dropout is equivalent to randomly picking activation according to a multinomial distribution, and the number of possibly trained networks is exponential in the number of input units to the pooling layers. At test time, a new pooling method, probabilistic weighted pooling, is proposed to act as model averaging. Experimental evidence confirms the benefits of using max-pooling dropout, and validates the superiority of probabilistic weighted pooling over max-pooling and scaled max-pooling. Considering that stochastic pooling is similar to max-pooling dropout, we empirically compare them and show that the performance of stochastic pooling is between those produced by maxpooling dropout with different retaining probabilities."}, {"heading": "Acknowledgements", "text": "This work was supported in part by National Natural Science Foundation of China under grant 61371148 and Shanghai National Natural Science Foundation under grant 12ZR1402500."}], "references": [{"title": "Improving neural networks by preventing co-adaption of feature detectors", "author": ["G.E. Hinton", "N. Srivastave", "A. Krizhevsky", "I. Sutskever", "R.R. Salakhutdinov"], "venue": "arXiv", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky"], "venue": "M.S. diss., University of Toronto", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2009}, {"title": "Maxout networks", "author": ["I.J. Goodfellow", "D. Warde-Farley", "M. Mirza", "A. Courville", "Y. Bengio"], "venue": "ICML", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2013}, {"title": "Stochastic pooling for regularization of deep convolutional neural networks", "author": ["M.D. Zeiler", "Fergus R."], "venue": "ICLR", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Regularization of neural networks using DropConnect", "author": ["L. Wan", "M.D. Zeiler", "S. Zhang", "Y. LeCun", "R. Fergus"], "venue": "ICML", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "ImageNet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "NIPS", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2012}, {"title": "Rectified linear units improve restricted Boltzmann machines", "author": ["N. Vinod", "G.E. Hinton"], "venue": "ICML", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2010}, {"title": "Adaptive dropout for training deep neural networks", "author": ["J.L. Ba", "B. Frey"], "venue": "NIPS", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2013}], "referenceMentions": [{"referenceID": 0, "context": "Dropout [1] is a recently proposed regularizer to fight against over-fitting.", "startOffset": 8, "endOffset": 11}, {"referenceID": 3, "context": "Dropout has also inspired other stochastic model averaging methods such as stochastic pooling [4], drop-connect [5] and maxout networks [3].", "startOffset": 94, "endOffset": 97}, {"referenceID": 4, "context": "Dropout has also inspired other stochastic model averaging methods such as stochastic pooling [4], drop-connect [5] and maxout networks [3].", "startOffset": 112, "endOffset": 115}, {"referenceID": 2, "context": "Dropout has also inspired other stochastic model averaging methods such as stochastic pooling [4], drop-connect [5] and maxout networks [3].", "startOffset": 136, "endOffset": 139}, {"referenceID": 0, "context": "neural nets [1, 5, 6], its effect in pooling layers is, however, not well studied.", "startOffset": 12, "endOffset": 21}, {"referenceID": 4, "context": "neural nets [1, 5, 6], its effect in pooling layers is, however, not well studied.", "startOffset": 12, "endOffset": 21}, {"referenceID": 5, "context": "neural nets [1, 5, 6], its effect in pooling layers is, however, not well studied.", "startOffset": 12, "endOffset": 21}, {"referenceID": 3, "context": "As both stochastic pooling [4] and max-pooling dropout randomly sample activation based on multinomial distributions at pooling stage, it becomes interesting to compare their performance.", "startOffset": 27, "endOffset": 30}, {"referenceID": 0, "context": "[1] only applied dropout to fully connected layers.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] trained a very big convolutional neural net to classify 1.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "Stochastic pooling [4] is a dropout-inspired regularization method.", "startOffset": 19, "endOffset": 22}, {"referenceID": 2, "context": "Maxout network [3] is another model inspired by dropout.", "startOffset": 15, "endOffset": 18}, {"referenceID": 4, "context": "Dropout has also motivated other stochastic model averaging methods, such as drop-connect [5] and adaptive dropout [8].", "startOffset": 90, "endOffset": 93}, {"referenceID": 7, "context": "Dropout has also motivated other stochastic model averaging methods, such as drop-connect [5] and adaptive dropout [8].", "startOffset": 115, "endOffset": 118}, {"referenceID": 0, "context": "Using dropout in fully-connected layers during training, the whole network containing all the hidden units should be used at test time, but with their outgoing weights halved to compensate for the fact that twice as many of them are active [1], or with their activations halved.", "startOffset": 240, "endOffset": 243}, {"referenceID": 0, "context": "We do not perform any preprocessing except scaling the pixel values to [0, 1].", "startOffset": 71, "endOffset": 77}, {"referenceID": 1, "context": "The CIFAR-10 dataset [2] consists of ten classes of natural images with 50,000 examples for training and 10,000 for testing.", "startOffset": 21, "endOffset": 24}, {"referenceID": 0, "context": "We also scale to [0, 1] for CIFAR-10 and CIFAR-100 and subtract the mean value of each channel computed over the dataset for each image.", "startOffset": 17, "endOffset": 23}, {"referenceID": 6, "context": "We use rectified linear function [7] for convolutional and fully-connected layers, and softmax activation function for the output layer.", "startOffset": 33, "endOffset": 36}, {"referenceID": 3, "context": "Similar to max-pooling dropout, stochastic pooling [4] also randomly picks activation according to a multinomial distribution at training time, and also involves probabilistic weighting at test time.", "startOffset": 51, "endOffset": 54}], "year": 2015, "abstractText": "Recently, dropout has seen increasing use in deep learning. For deep convolutional neural networks, dropout is known to work well in fully-connected layers. However, its effect in pooling layers is still not clear. This paper demonstrates that max-pooling dropout is equivalent to randomly picking activation based on a multinomial distribution at training time. In light of this insight, we advocate employing our proposed probabilistic weighted pooling, instead of commonly used max-pooling, to act as model averaging at test time. Empirical evidence validates the superiority of probabilistic weighted pooling. We also compare max-pooling dropout and stochastic pooling, both of which introduce stochasticity based on multinomial distributions at pooling stage.", "creator": "Microsoft\u00ae Word 2013"}}}