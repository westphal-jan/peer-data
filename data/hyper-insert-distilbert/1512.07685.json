{"id": "1512.07685", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Dec-2015", "title": "Service Choreography, SBVR, and Time", "abstract": "we propose limiting the use of structured natural language language ( english ) in those specifying service industry choreographies, focusing on the what follows rather than designing the presentation how of the required coordination of participant services in realising a business and application transformation scenario. however the declarative approach approach we propose uses the omg standard defined semantics complexity of business vocabulary statements and rules ( sbvr ) set as a standard modelling procedural language. the service choreography approach has typically been continuously proposed initially for services describing within the global component orderings complexity of designing the invocations on graphical interfaces of participant services. we terms therefore broadly extend sbvr with only a notion implementation of aggregate time which can capture for the coordination of the participant services, implying in terms aspects of the observable message exchanges between outside them. accordingly the extension is commonly done using purely existing modelling constructs delivered in form sbvr, and hence respects the standard interface specification. the general idea extension is interesting that users - human domain specialists who rather than software implementation specialists - can verify by the requested internet service composition by visually directly electronically reading the specific structured english used by sbvr. or at the same time, simply the sbvr model domain can both be represented in appropriate formal logic so it then can easily be parsed and executed by simply a machine.", "histories": [["v1", "Thu, 24 Dec 2015 01:40:20 GMT  (551kb,D)", "http://arxiv.org/abs/1512.07685v1", "In Proceedings FOCLASA 2015,arXiv:1512.06947"]], "COMMENTS": "In Proceedings FOCLASA 2015,arXiv:1512.06947", "reviews": [], "SUBJECTS": "cs.SE cs.CL", "authors": ["nurulhuda a manaf", "sotiris moschoyiannis", "paul krause"], "accepted": false, "id": "1512.07685"}, "pdf": {"name": "1512.07685.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Nurulhuda A. Manaf", "Sotiris Moschoyiannis", "Paul J. Krause"], "emails": ["p.krause}@surrey.ac.uk"], "sections": [{"heading": null, "text": "Jose\u0301 Proenc\u0327a and Massimo Tivoli (Eds.): 14th International Workshop on Foundations of Coordination Languages and Self-Adaptive Systems (FOCLASA15) EPTCS 201, 2015, pp. 63\u201377, doi:10.4204/EPTCS.201.5\nc\u00a9 N.A. Manaf, S. Moschoyiannis & P.J. Krause This work is licensed under the Creative Commons Attribution License.\nService Choreography, SBVR, and Time\u2217\nNurulhuda A. Manaf, Sotiris Moschoyiannis, and Paul J. Krause Department of Computer Science, University of Surrey\nGuildford, Surrey, GU2 7XH, UK {n.amanaf, s.moschoyiannis, p.krause}@surrey.ac.uk\nWe propose the use of structured natural language (English) in specifying service choreographies, focusing on the what rather than the how of the required coordination of participant services in realising a business application scenario. The declarative approach we propose uses the OMG standard Semantics of Business Vocabulary and Rules (SBVR) as a modelling language. The service choreography approach has been proposed for describing the global orderings of the invocations on interfaces of participant services. We therefore extend SBVR with a notion of time which can capture the coordination of the participant services, in terms of the observable message exchanges between them. The extension is done using existing modelling constructs in SBVR, and hence respects the standard specification. The idea is that users - domain specialists rather than implementation specialists - can verify the requested service composition by directly reading the structured English used by SBVR. At the same time, the SBVR model can be represented in formal logic so it can be parsed and executed by a machine."}, {"heading": "1 Introduction", "text": "There is increasing interest in developing distributed applications that involve stand-alone services from different organisations on the web. However, the coordination of the interactions between the underlying services in building such applications remains a challenge. Sustained efforts by the web services community have culminated in the service choreography approach [34] which is concerned with describing the conversation across different participating services (global perspective) as well as the service orchestration approach [24] which describes the interaction scenario from an individual service\u2019s viewpoint. Service choreography in particular, is intended to capture the coordination of the participant services, in terms of the observable message exchanges between them. This is given mostly in terms of the orderings of these interactions during the execution of the corresponding business activity.\nThe orderings of the interactions (invocations on interfaces) between the underlying services is key in coordination as they capture the dependencies between participant services and thus the correctness of the application design. Well known issues (e.g., see [4]) that involve the orderings of interactions include deadlock and race conditions (a situation where two or more messages are competing to arrive first, so while the appear to be ordered in a given execution they are effectively unordered). In the context of service choreography, verification additionally comes in the form of conformance and realisation [33, 5]. Moreover, if choreographies are to be equipped with transactional guarantees [22], meaning that a series of compensations are performed upon failure, the ordering of the interactions is doubly important.\nDeclarative approaches in the Business Rules realm [30], [8] focus on what rather than how. The \u2019what\u2019 and the \u2019how\u2019 of a solution to a computing problem are quite different. The \u2019what\u2019 refers to the properties of a solution whereas the \u2019how\u2019 refers to the steps followed to achieve the solution. Declarative\n\u2217This work was partly funded by the UK Research Council EPSRC, under the project Evolution and Resilience of Industrial Ecosystems (ERIE) , Contract No. EP/H021779/1.\nprogramming focuses on specifying the \u2019what\u2019 and using a general-purpose engine for reaching the goal. An example declarative language is SQL, which specifies properties of data but not the way to retrieve it. The latter is left to the database management system (DBMS) implementation [7]. Imperative programming focuses on the \u2019how\u2019, bypassing the need to define the properties of the required solution since programmers can guarantee the desired properties by directly controlling the algorithm. Java and C are generally considered imperative languages.\nWith respect to specifying service choreography, the declarative approach can express business requirements intuitively, e.g., see [8, 10]. The Business Rules manifesto [30] builds the business requirements on the premise that rules or policies in a business application scenario should be expressed declaratively in natural-language sentences for the business audience. A rule is distinct from any enforcement defined for it. A rule and its enforcement are separate concerns. Also, rules apply across processes and procedures. In addition, the issue of understandability in expressing and modelling complex business requirements is important especially if we want the provision for the domains specialists to validate the specification against their business models. Note that domains specialists (business analysts, stakeholders) rather than implementation specialists are best positioned to validate against the business activities taking place in practice. In our approach, the choreography specification is expressed in terms of statements like the following:\nIt is obligatory that each rental car is owned by at least one branch\nIn addition, a declarative approach typically starts with an unconstrained view of the specification and gradually constrains it, by means of adding rules, as the intended behaviour of the service choreography becomes more clear. This is in contrast to the more traditional imperative approach, which tends to be more restrictive and sometimes results in introducing artificial decision points, or forcing premature decision points, for the practitioner or over- / under-specifying what actually happens [21].\nWork on formal semantics in this area has focused more on the imperative (or procedural) approach and service orchestration and less so on the declarative approach and service choreography. Existing work, e.g., [21, 15, 2] that takes a declarative approach tends to focus on reasoning about consistency of the rule set, which of course is an important aspect of verification, but have not looked into explicitly capturing the orderings, in terms of observable message exchanges in a choreography. In addition, and to the best of our knowledge, none of the current proposals for a declarative approach to service choreography has attempted to provide the end-user with something close to natural language.\nIn this paper, we propose a declarative approach which builds on using the Semantics of Business Vocabulary and Rules (SBVR) [26] for the specification of service choreographies. SBVR is a standard maintained by the Object Management Group (OMG) and uses structured natural language, which makes it specifically understandable by humans. The business rule given earlier is actually written in SBVR and makes use of two Fact Types (cf Section 2). There is no explicit notion of time in SBVR. In order to capture the global ordering constraints on observable actions (invocations) in a service choreography we describe the use of sequencing of Fact Types in an SBVR model, together with the modelling constructs of objectification and actuality. This allows us to specify, for example, that a product is received by the customer only after it is delivered by the shop.\nThe remainder of this paper is structured as follows. Section 2 contains a brief account of the business rules approach and SBVR. In Section 3, we build an SBVR model for a case study, an Online Photo Shop, which focuses on the ordering of service interactions. This forces us to look at temporal aspects and thus Section 4 describes our handling of time ordering within SBVR. Sections 5 gives a brief account of related work. Some concluding remarks and ideas for future work are included in Section 6."}, {"heading": "2 The Business Rules approach and SBVR", "text": "Several specification or modelling languages for specifying interactions between services in a business application scenario are available to practitioners, with varying levels of adoption, such as the Business Process Model Notation (BPMN) [25], Web Services Choreography Description Language (WS-CDL) [34], Web Services Business Process Execution Language (WS-BPEL) [24]. These languages require training to read and write and hence may not lend themselves naturally to be used by the end-user directly.\nThe OMG standard Semantics of Business Vocabulary and Rules (SBVR) [26] is gaining ground as a basis for system specification. By inception, SBVR is intended to provide a way to capture specifications in natural language and represent them in formal logic so they can be machine processed. Users are able to verify the specification directly by reading the structured natural language used by SBVR which can then be parsed and executed by a machine. In line with the Business Rules Approach [30], it follows the doctrine: \u201dRules build on facts, and facts build on concepts as expressed by terms. Terms express business concepts; facts make assertions about these concepts; rules constrain and support these facts.\u201d\nAs argued in [19], while SBVR is a meta-model with models natively expressed as logical formulations, its most common serialization is SBVR Structured English. Terms (e.g., branch), Fact Types (e.g., rental car is owned by branch), and rules (e.g. It is obligatory that each rental car is owned by at least one branch) are combined into models. An example of an SBVR model can be seen in Figure 1. It refers to the Rental Car case study included in its spec document[26].\nThe rule in Figure 1 is written using our web-based SBVR editor [18] maintained by Rulemotion1 and is a representation of higher-level facts that use the deontic constraint, obligatory on the constraint defined by the rule. The quantifications, each and at least one show the restriction of rental car belonging. Furthermore, is owned by is the designation for the Fact Type in Table 1. Fact Type is constructed based on identified Terms (a noun concept, rental car and branch). Thus, the combination of deontic constraint, quantifier, terms and fact type will yield a constructive rule. This type of rule can be used by domain specialists (e.g., business analysts) in defining the business model or activity to be performed with a choreography.\n[32] provides a syntax and semantics for the logical formulations of SBVR, a first-order deonticalethic logic (FODAL). It is an extension of first-order logic which is a combination of standard-deontic logic (SDL) and normal modal logic, S4. The syntax of FODAL [32] includes a set of propositional connectives (\u00ac, \u2227), a universal quantifier (\u2200), an infinite set P (predicate symbols), an infinite set V (variable symbols), and, modal operators (2 (necessity) and O (obligation)) for alethic and deontic respectively. To formalise SBVR rules, FODAL follows the first-order modal formulae which are specified by the rules :\n\u2022 Every atomic formula is a formula. 1With thanks to Rulemotion, the editor SBVR Lab 2.0 is available at http://sbvr.co\n\u2022 If X is a formula, so is \u00acX.\n\u2022 If X and Y are formulas, then X\u2227Y is a formula.\n\u2022 If X is a formula, so are 2X and OX.\n\u2022 If X is a formula and \u03bd is a variable, then \u2200\u03bdX is a formula.\nThe usual definition is used for the existential quantifier (\u2203) and other propositional connectives (\u2228, \u2192, \u2194). However, there are additional modal operators defined for possibility (\u2666), permission (P), and prohibition (F) which are \u201dIt is possible that \u03c6\u201d is logically equivalent to \u201dIt is not necessary that not \u03c6\u201d (\u2666\u03c6 \u2261 \u00ac2\u00ac\u03c6 ), \u201dIt is permitted that \u03c6\u201d is logically equivalent to \u201dIt is not obligatory that not \u03c6\u201d (P\u03c6 \u2261 \u00acO\u00ac\u03c6 ), and \u201dIt is forbidden that \u03c6\u201d is logically equivalent to \u201dIt is obligatory that not \u03c6\u201d (F\u03c6 \u2261O\u00ac\u03c6 ).\nIn addition, [32] provides a Kripke semantics for FODAL as well as the proofs of its sound and complete axiomatisations with respect to the semantics [31]. The axioms of FODAL implies the combination of the axiom systems for the propositional modal logics S4 and a serial relation of a deontic modality behaviour (KD) as well as the interaction between alethic and deontic modalities. The FODAL axioms as in [32] are shown as follows:\n(Tautologies S4) Any FOL substitute-instance of a theorem of S4\n(TAutologies KD Any FOL substitute-instance of a theorem of KD\n(Vacuous \u2200) \u2200x\u03c6 \u2261 \u03c6 , provided x is not free in \u03c6\n(\u2200 Distributivity) \u2200x(\u03c6 \u2192 \u03c8)\u2192 (\u2200x\u03c6 \u2192\u2200x\u03c8)\n(\u2200 Permutation) \u2200x\u2200y\u03c6 \u2192\u2200y\u2200x\u03c6\n(\u2200 Elimination) \u2200y(\u2200x\u03c6(x)\u2192 \u03c6(y))\nNecessary O 2\u03c6 \u2192O\u03c6\nEven though FODAL is undecidable, [32] identifies a decidable fragment of FODAL logic. This is the set of atomic modal sentences with at most two variables, all predicate symbols with at most unary, and the set of atomic modal sentences in which are applied to subformulas from the guarded fragment of firs-order logic.\nIn the context of service choreography, it is important to capture the ordering of observable actions (service interactions) as discussed before. SBVR does not include a notion of time and therefore with respect to time and ordering, OMG has supplemented it with the Date-Time Vocabulary (DTV) [27]. To be more precise, DTV expresses the specification in the form specified in Annex C of SBVR as defined by OMG [26]. It was introduced to encapsulate the SBVR rules that involve concepts such as date and time (excluding real-time processing) which are frequently used in everyday business activities across a wide range of business scenarios.\nTwo types of time are considered in DTV. Type 1 refers to a time period, an explicit time interval. Type 2 uses temporal concepts to define a relationship between situation kinds and occurrences. These are used to represent the potential real activities or events that occur multiple times in a business environment. In our work on choreography specification we apply Type 2 from DTV as well as the SBVR verb concept objectification [26] in order to express the ordering of exchanged messages and corresponding Fact Types, e.g., A before B . This will be further discussed in Section 4."}, {"heading": "3 Service Choreography Specification using SBVR", "text": "In this section we describe how an SBVR model can be built for the service choreography involved in the Online Photo Shop case study, which was originally studied in [21]. We identify the need for expressing the ordering relationship between observable events and propose a way to express such orderings in an SBVR model."}, {"heading": "3.1 Online Photo Shop: a case study", "text": "We look at the case study of an Online Photo Shop in [21] which provides services for placing orders and printing photographs (and other products) to customers. The business scenario involves a multi-party conversation between several services; Customer, Photo-Shop, Order, Print, and Deliver. All services are provided by the Online Photo Shop entity, hence in this case they all belong to one organisation. The conversation respects the policies underlining the business activities involved, as described in [21].\nHowever, we notice that there are certain problems with the specification of the Online Photo Shop as given in [21], such as ambiguities in defining an activity (e.g., \u2019open order\u2019 and \u2019register\u2019) while some prescribed orderings on activities are questionable (e.g., customer may \u2019pay\u2019 before or after Photo Shop performs \u2019charge\u2019). We have amended the specification slightly to steer away from such issues. This will allow us to focus on using SBVR to specify the choreography rather than elaborating the specification itself. Below is the description of responsibilities by the web services Customer, Photo-Shop, and Order.\nService Customer provides a service for customer to: \u2022 register an account at photo shop by entering data, such as name, address, credit card num-\nber and preferred way of delivery through activity \u201dregister\u201d; \u2022 pay for ordered products via activity \u201dpay for\u201d; \u2022 receive ordered products via activity \u201dreceive\u201d.\nService Order allows the customer to order photos and posters via activity \u201dphoto\u201d and \u201dposter\u201d respectively by uploading files and selecting wanted formats or to order photo albums by selecting the preference photo album via activity \u201dalbum\u201d.\nService Photo-Shop provides: \u2022 the products; photos, posters, and albums. It ensures the shop records the customers data via\nactivity \u201dupdate\u201d; \u2022 a service to print ordered photos and posters via activity \u201dprint\u201d; \u2022 a service to deliver products (photo, poster, or album) to customer via activity \u201ddeliver\u201d.\nAs a flavour of the kind of changes we made to the case study presented in [21], the activity \u201dupdate\u201d has been introduced in place of \u201dopen order\u201d in the 1st constraint shown in Table 1 so as to maintain the semantic meaning of the activities. The 5th constraint is needed to bind the product that is ordered by the customer to said customer, for each payment. Also, the \u201dpay for\u201d activity is now prescribed to take place before the execution of the \u201ddeliver\u201d activity."}, {"heading": "3.2 SBVR model for the Online Photo Shop service choreography", "text": "The informal specification of the business scenario can be addressed in a way similar to how entities, attributes and relationships are drawn from a textual specification as done in information modelling and\nrelational database design [8]. Hence, nouns are candidate terms and verbs connecting these nouns together are candidate (binary) fact types. Using this as a rule of thumb, the following Terms (Figure 2) and Fact Types (Figure 3) have been extracted for the Online Photo Shop (Section 3.1).\nAs discussed in Section 2, Term as a noun concept is applied to Fact Type to show the concept that is the meaning of the noun. Fact Type is a combination of one, two or more Terms. The Fact Types formed for the Online Photo Shop case study are shown in Figure 3. For example, the Fact Type, \u2019customer receives ordered product\u2019 shows customer as a role that specifically characterises ordered product role by their involvement in the activity, while receives represents the verb concept of the factual relationship between the two terms. Similarly, the Fact Type, \u2019 name is of customer\u2019 shows name and customer as noun concepts, where name is an attribute to characterise customer while is of is a verb concept for the Fact Type.\nThe Terms and the Fact Types make up the Business Vocabulary in an SBVR model. It might be worth noting that there is a synonymous form for Fact Types in SBVR [26], which allows\nto identify Fact Types that convey the same meaning. For example: Fact Type: name is of customer; Synonymous Form: customer has name\nThe synonymous form is useful when it comes to verifying the rule set in the SBVR model - whether all rules have been captured; whether any rules are in conflict.\nFact Types are then used to construct the rules in the model as shown in Figure 4. As mentioned in Section 2, rules are expressed using appropriate quantification, logical operations (if applicable) and modalities. In what follows we use the rules from Table 2.\nSemantic formulations are used in SBVR to structure the meaning of rules and come in two flavours; logical formulation and projection [26]. All rules in the previous examples are structured according to the specialisations of logical formulation, e.g., logical operations, quantification, etc. An instantiation formulation also is one of the logical formulations that bind a concept (e.g., individual concept) to a bindable target (variable or an individual concept from logical formulation) to formulate the meaning. This is vital in the rules to express an accurate meaning.\nFor example, the specification in the case study (Table 1) attempts to prevent the situation where the photo shop attempts to deliver a product that no customer has ordered. To this effect, the logical formulation: It is obligatory that the photo-shop delivers the ordered product that is of each customer has been added to the set of rules in the SBVR model. According to this rule, the ordered product (photo/poster/album) which is a concept (delivered by the photo shop) binds to the ordered product\nwhich is an individual concept (ordered by the customer). Additionally, that which is located after the designation for a noun concept, ordered product here, and before the designation for verb concept, is of , is used to restrict that keyword on the previous designation based on facts about them.\nMoreover, Table 2 shows the rule that is supposed to represent the ordering of the activities. The rule however does not capture the dependency between the activities, i.e., that activity \u2019deliver\u2019 by the photo shop must occur after activity \u2019order\u2019 by the customer of at least one product. Thus, this is why a notion of ordering between fact types in SBVR is proposed, in the next section, to capture the type of rules which prescribes the ordering of the underlying service interactions in a business scenario."}, {"heading": "4 A notion of time in business rules: ordering of service interactions", "text": "We have seen that with respect to coordination it is necessary to capture the ordering of service interactions in order to encapsulate the important properties of domain in a choreography. In the Introduction, we outlined some reasons why the ordering of service interactions is important. Without a notion of time, e.g., precedence, it is not straightforward to construct a rule which prohibits certain anomalies coming into view such as race conditions. For instance, the temporal ordering \u201dprecedence\u201d need to be placed in between the Fact Type: customer pays for ordered product, and the Fact Type: ordered product is delivered by photo-shop. In view of that example, it seems appropriate to look into expressing ordering of Fact Types in SBVR without changing the OMG standard or introducing special primitives particular to our approach. The idea is to express ordering in terms of dependency between certain messages (causality), and by implication also choice (conflict) and concurrency, which should be possible, especially if a true concurrency semantics is pursued as done in [22].\nIt transpires that such a notion of time, i.e., the ordering of service interactions in a choreography, is closely related to Type 2 in the Date-Time Vocabulary (DTV) [27], which is a supplementary specification to SBVR by OMG. Type 2 of Time aspects in DTV concerns a relationship between situation kinds and occurrences. The construction based on Type 2 in DTV (pp. 183-215 in [27]) draws upon the concept of \u201dstate of affairs\u201d in SBVR which refers to an event, activity, situation, or circumstance that is actual (in fact, defined as an actuality in SBVR spec [26]). The actuality itself is an instance of a verb concept. For example, the proposition \u2019a customer pays for an ordered product\u2019 has the actuality (state of affairs), \u2019an ordered product payment that is of a customer\u2019 which is formed out of the verb concept pays for while both the proposition and state of affairs satisfy the subclause in SBVR spec [26] which say that \u201dit is necessary that each proposition corresponds to exactly one state of affairs\u201d.\nHowever, DTV does not agree with that necessity because the proposition that corresponds to a state of affairs, as stated in the example, refers to one event only. On the contrary, the objective of DTV is to represent real states of affairs that occur multiple times. For this reason, DTV introduces a \u201dsituation kind\u201d in place of state of affairs. A situation kind refers to a type of situation, event or activity that may occur multiple times. It is related closely with occurrence, so a typical example of a situation kind that occurs in actual situation at some place and time. For instance, the situation kind, \u2019an ordered product payment that is of a customer\u2019 refers to the activity of (binding) a customer paying their ordered product, which may occur multiple times in future.\nTherefore, we apply a temporal ordering of situation kinds which is specifically based on the template \u2019situation kind1 precedes situation kind2\u2019 that further defines in SBVR that \u2019each occurrence of situation kind1 precedes each occurrence of situation kind2\u2019. This allows comparing the ordering of two situation kinds. The following rule makes use of this temporal ordering: \u2019It is obligatory that each customer pays for each ordered product that is of the customer precedes that ordered product is\ndelivered by the photo-shop\u2019. This is in fact the rule in the SBVR model of the choreography that captures the precedence constraint this section opened with.\nThere is also a temporal ordering of occurrences in DTV [27] which can prescribe \u2019occurrence1 precedes occurrence2\u2019. In this Type 2 of time aspects in DTV, the \u201doccurrence\u201d is defined as the occurrence interval (specific time interval). Hence, it is not directly related to the notion of time considered here.\nOur approach to ordering Fact Types in SBVR includes the use of the construct of objectification in SBVR [26]. This verb concept is used to specialise the \u201dstate of affairs\u201d which in turn specialises \u201dsituation kinds\u201d and \u201doccurrence\u201d. Objectification may fill verb concept roles that range over a \u201dsituation kind\u201d as well as an \u201doccurrence\u201d. For example, the verb concept objectification as state of affairs for \u2019an ordered product payment that is of a customer\u2019 is defined as \u2019a customer pays for an ordered product\u2019. It may be used with the verb concept \u2019photo-shop needs situation kind\u2019 and also with the verb concept \u2019photo-shop records occurrence\u2019. Thus, to express the ordering of service interactions in a choreography, we use a notion similar to Type 2 in DTV [27] and apply the objectification construct of SBVR [26]. An example rule that uses this notion of time ordering from the Online Photo Shop is given by:\n\u2019It is obligatory that each customer pays for each ordered product that is of a customer precedes that ordered product is delivered by the photo-shop\u2019\nThis rule has the following two propositions or Fact Types: \u2019customer pays for ordered product\u2019 and \u2019ordered product is delivered by photo-shop\u2019. Therefore, the situation kinds, \u2019an ordered product payment that is of a customer\u2019 and \u2019the ordered product delivery by the photo-shop\u2019 are an actuality denoted by the verb concept objectification of the two propositions or Fact Types.\nBy considering the vocabulary structure in SBVR: \u2019situation kind1 precedes situation kind2\u2019 and taking \u2019an ordered product payment that is of a customer\u2019 to be situation kind1, and \u2019the ordered product delivery by the photo-shop\u2019 to be situation kind2 the expression of the rule is given as:\n\u2019It is obligatory that an ordered product payment that is of a customer precedes the ordered product delivery by the photo-shop\u2019\nThis ability to express temporal constraints in business rules has been applied to our case study to show ordering of service interactions. All the rules in a choreography are transformed to the SBVR Logical Formulation (Ch. 10 in [26]) as shown in Figure 5.\nFigure 5 shows the representation of the Logical Formulation of the stated rule. It represents the relationships between the obligation formulation, the atomic formulations, the instantiation formulation, and the objectification in the rules based on the Simplified Syntax for Logical Formulations in Annex F of DTV [27]. The instantiation formulation in the logical formulation can be seen in Figure 5 whenever the first variable \u2019ordered product\u2019 binds to the concepts \u2019ordered product payment\u2019 and \u2019ordered product delivery\u2019 to show both concepts are referring to the same ordered product that was ordered and paid for by the customer. Then, the rules are translated into first order logic, following the SBVR Logical Formulation [26]. This transformation opens up the space for reasoning (verification) as well as model transformations between different tools.\nAn example of the translation for one rule from our case study is given in Table 3. The first order logic expression o\u2200x\u2200y\u22031z(B(P(y,x)\u2227Q(x,y),T (x,z))) says that \u201dfor all products, x, for all customers, y, there exists at most one photo shop, z, such that y pays for x, and x is of y, precedes x is delivered by z\u201d. This is half way between the logic and the structured English of the business rule."}, {"heading": "5 Related Work", "text": "The work on DecSerFlow proposed in [21] provides a declarative language together with a logical framework for reasoning while the work described in [12] uses the implementation of the Business Process Execution Language for Web Services (BPEL4WS) (see the specification document [24]) and its semantics for choreography specification. The representation of a choreography is given in the form of graphical specification of service flows which can be mapped onto Linear Temporal Logic (LTL) [13] and in the form of XML data format definition which is then translated to Finite State Process (FSP) process algebra, respectively, thus allowing to model the required behaviour. This enriches the expressiveness and allows to perform interoperability and verification tasks, including conformance checking and deadlock detection [4]. [12] also provides a tool, LTSA-WS for checking the correctness of the service interactions in terms of whether they correspond to those specified in the requirements. While these approaches provide reasoning capability, DecSerFlow is a proprietary language while [12] uses both an informal and a formal language that require training to read and write for specifying software services. Hence, both comprise a learning curve for practitioners (business analysts or stakeholders).\nFurthermore, [2] also place emphasis on coordination of service interactions that correlate to the choreography specification - a model derived from BPMN 2.0 [25] is implemented. On the other hand, [9] provides a declarative approach and applies UML activity diagram (as illustration purposes) for describing and capturing the ordering constraints between interactions, yet for service interface adaptation. Additionally, [6] provides an integrated tool support for the specification and validation and verification for adaptation contracts. In other words, [9] and [6] focus on discovering mismatches between behavioural interfaces which this different with our focus as discussed earlier in Section 1.\nThe approach built around SBVR [26] which we propose in this paper for modelling service choreographies uses a structured natural language standard maintained by OMG, which comes with a logical formulation (recall Section 4) which can be exploited for reasoning about correctness. This means that an SBVR model can be parsed and is machine readable. We have more to say on this in the concluding section of the paper (Section 6).\nIn introducing a notion of time, understood in terms of ordering of Fact Types, we chose not to come from the angle of the Object Constraint Language (OCL) [28] or Allen\u2019s temporal logic [1]. This is because although these approaches deal with time, OCL introduces Collections to manage an OrderedSet and a Sequence which uses elements to represent the occurrence of objects. Both constructs contain a collection where the elements are ordered. However, the OrderedSet contains unique elements which means no duplicates of the elements exist while the elements in Sequence may be part of a sequence more than once. For example, consider a class Employee with an attribute \u2019age\u2019. Collection contains three employees such as employee1.age = 24, employee2.age = 27 and employee3.age = 27. Thus, Expression : self.employees\u2192 sortedBy(age); Result : Sequence: employee1, employee2, employee3\nIn [1] a temporal logic was developed to represent knowledge of properties, events, and actions using one primitive object, namely the time period, and one primitive relation \u2019Meets\u2019 (m and n meet if and only if m precedes n). One can describe m precedes n, but m and n represent two time periods. Hence, both OCL and Allen\u2019s temporal logic are not suitable to address the ordering of Fact Types inside a rule.\nIt might be instructive to also compare the way a choreography can be expressed in DecSerFlow [21] and in SBVR. For example, succession(A,B) is used in DecSerFlow to constrain the Online Photo Shop rules: the shop will not \u2019open order\u2019 before the customer executes activity \u2019register\u2019. Hence, the \u2019succession\u2019 constraint replaces parameter \u2019A\u2019 with activity \u2019register\u2019 and parameter \u2019B\u2019 with activity \u2019open order\u2019. It is then converted to a logic expression (in Linear Temporal Logic (LTL)) in the following\nDecSerFlow template:\nsuccession(register, open order) = response(register, open order) precedence(register, open order)\nIn contrast, in SBVR the corresponding rule will be\nIt is obligatory that each customer registers at most one account at the photo-shop precedes the photo-shop updates the data that is of the customer .\nWe believe that this global constraint is more understandable to domain specialists (business analysts) but also humans in general."}, {"heading": "6 Conclusion and Future Work", "text": "In this paper, we presented a declarative approach to the coordination of distributed applications comprising stand-alone services. We proposed the use of SBVR for choreography specification and demonstrated how objectification and actuality can be exploited in impressing temporal aspects between Fact Types that appear in a rule. This notion of time ordering is reminiscent of Type 2 in DTV [27], a supplementary specification document to SBVR, also advocated by OMG, and is useful in capturing the global constraints in a multi-party conversation involved in a service choreography.\nSBVR can be used to support the development of ontologies and business models using structured natural language. It is widely used to cope with complex requirements of business operations with a language that is easily understandable by business analysts (domain specialists) rather than systems analysts (implementation specialists). We are currently exploring the possibility of integrating SBVR with the work on participatory modelling, where we use Fuzzy Cognitive Maps (FCM) and techniques from network analytics in identifying strategic intervention points in complex networks. This is looking into the Humber region, UK, (one of the UK\u2019s most important energy hubs) as a case study where local authorities and various groups of stakeholders engage in moving from a fossil fuel economy to a biobased economy [29]. The FCM map is built over a one-day workshop with stakeholders and the whole process could be helped by using SBVR to capture expertise and dependencies in the complex network of the Humber region in a way that is understandable to business, policy makers and researchers alike.\nAs discussed in Section 4, the SBVR Logic Formulation prescribed in the OMG specification document for SBVR [26] can be used to transform an SBVR model into first order logic, which can be useful for reasoning by looking at the FODAL approach that proposed by [32] as discussed in Section 2. In the context of coordination, and service choreography, temporal aspects will need to be handled and possibly in a distributed manner as done in Mdtl [11] which we have used for reasoning about distributed and concurrent interactions before, or as done for decentralized self-adaptive systems in [14] where behavioural properties are specified using timed computation tree logic (TCTL). Hence, with respect to choreography verification we would typically be looking at Computational Tree Logic (CTL) or Linear Temporal Logic (LTL) [13] . LTL models time as a sequence of states, extending infinitely into the future. However, it does not allow to quantify explicitly over paths. CTL allows to reason about sequences of events that capture the semantics. The CTL syntax includes a parse tree, a quantifier equivalent to logical formulation kinds, and both CTL and LTL syntaxes denote a set of atomic propositions which is similar to the first order logic proposition used in the logical foundation for the SBVR model here.\nIn terms of implementation, apart from the SBVR editor [18] discussed earlier (Section 2) we also\nimplemented an SBVR to SQL comipler [20]. Using the Logical Formulation SBVR-LF [34], the complier maps business rules onto SQL queries to be executed on a (relational) database, as shown in Figure 6. The relational database is also automatically generated by the model. The work in [17] demonstrates\nhow information systems can be generated directly from SBVR. Therefore, SBVR can be used to formulate complex data queries in a way that provides a higher level of abstraction than SQL (or any other query language) as shown in [23].\nIn previous work we have used vector languages, a model of true concurrency, to equip service choreographies with transactional guarantees, in the so-called transaction languages [22]. A natural extension of this work is to investigate the use of transaction languages, which is tuple-based formalism that captures the ordering of observable actions in a given choreography, to activate rules in the overlaid SBVR model of the service choreography. So transaction languages effectively play the role of the blackboard, in the sense of the work in [15], while the SBVR rules which are amenable to business analysts are used to constrain the generated implementation and seamlessly force it to adhere to the choreography specification [2].\nOne other possible direction for future work then will focus on analysing the complete set of behaviours (all possible outcomes) by exploiting the logical underpinning of the SBVR model of the choreography. This would target reasoning and choreography verification tasks such as realisation and conformance. In addition, another possible future extension has to do with the (correctness of the) transformation from natural language to SBVR [3]. Controlled Language (CL) is used in [16] to ensure correctness and deadlock-freedom. This would allow our approach to extend to natural language for specifying choreographies and would appeal to a wider business audience."}], "references": [{"title": "Actions and Events in Interval Temporal Logic", "author": ["James F. Allen", "George Ferguson"], "venue": "J. Log. Comput", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1994}, {"title": "Distributed Enforcement of Service Choreographies", "author": ["Marco Autili", "Massimo Tivoli"], "venue": "Proceedings Int\u2019l Workshop on Foundations of Coordination Languages and Self-Adaptive Systems, FOCLASA,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "SBVR Business Rules Generation from Natural Language Specification", "author": ["Imran Sarwar Bajwa", "Mark G. Lee", "Behzad Bordbar"], "venue": "Proceedings of AAAI Spring Symposium: AI for Business Agility,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2011}, {"title": "Agents, Multi-Agent Systems and Declarative Programming: What, When, Where, Why, Who, How? In: A 25-Year Perspective on Logic Programming: Achievements of the Italian Association for Logic Programming, GULP", "author": ["Matteo Baldoni", "Cristina Baroglio", "Viviana Mascardi", "Andrea Omicini", "Paolo Torroni"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2010}, {"title": "Specification of Realizable Service Conversations Using Collaboration Diagrams", "author": ["Tevfik Bultan", "Xiang Fu"], "venue": "Proceedings of the IEEE International Conference on Service-Oriented Computing and Applications, SOCA,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2007}, {"title": "Interactive Specification and Verification of Behavioural Adaptation Contracts", "author": ["J. Camara", "G. Salaun", "C. Canal", "M. Ouederni"], "venue": "Proceedings of the 9th International Conference on Quality Software,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "What not How - The Business Rules Approach to Application Development. Addison- Wesley", "author": ["C.J. Date"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2000}, {"title": "An Introduction to Database Systems", "author": ["C.J. Date"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "Adapt or Perish: Algebra and Visual Notation for Service Interface Adaptation", "author": ["Marlon Dumas", "Murray Spork", "Kenneth Wang"], "venue": "editors: Business Process Management, Lecture Notes in Computer Science,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}, {"title": "Declarative versus Imperative Process Modeling Languages: The Issue of Understandability. In: Enterprise, Business-Process and Information Systems Modeling, 10th International Workshop", "author": ["Dirk Fahland", "Daniel L\u00fcbke", "Jan Mendling", "Hajo A. Reijers", "Barbara Weber", "Matthias Weidlich", "Stefan Zugal"], "venue": "BPMDS, and 14th International Conference,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2009}, {"title": "Concurrent Logic and Automata Combined: A Semantics for Components", "author": ["Juliana K\u00fcster Filipe", "Sotiris Moschoyiannis"], "venue": "Proceedings Int\u2019l Workshop on Foundations of Coordination Languages and Self-Adaptive Systems, FOCLASA, Elec. Notes in Theort. Comp. Sci.,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2007}, {"title": "LTSA-WS: A Tool for Model-based Verification of Web Service Compositions and Choreography", "author": ["Howard Foster", "Sebastian Uchitel", "Jeff Magee", "Jeff Kramer"], "venue": "Proceedings of the 28th International Conference on Software Engineering,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2006}, {"title": "Logic in Computer Science - Modelling and Reasoning about Systems", "author": ["Michael Huth", "Mark Dermot Ryan"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2004}, {"title": "A Case Study on Formal Verification of Self-Adaptive Behaviors in a Decentralized System", "author": ["M. Usman Iftikhar", "Danny Weyns"], "venue": "Proceedings 11th International Workshop on Foundations of Coordination Languages and Self-Adaptive Systems, FOCLASA,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "On the Introduction of Time in Distributed Blackboard Rules Jean-Marieq", "author": ["Jean-Marie Jacquet", "Isabelle Linden", "Mihail-Octavian Staicu"], "venue": "Proceedings 12th International Workshop on Foundations of Coordination Languages and Self-Adaptive Systems, FOCLASA,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2013}, {"title": "Formalization of Natural Language Regulations through SBVR Structured English - (Tutorial)", "author": ["Fran\u00e7ois L\u00e9vy", "Adeline Nazarenko"], "venue": "In: Theory, Practice, and Applications of Rules on the Web - 7th International Symposium,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "What, Not How: A Generative Approach to Service Composition", "author": ["A. Marinos", "P. Krause"], "venue": "IEEE International Conference on Digital Ecosystems and Technologies,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2009}, {"title": "An SBVR Editor with Highlighting and Autocompletion", "author": ["Alexandros Marinos", "Pagan Gazzard", "Paul J Krause"], "venue": "Semantic Web Rules - International Symposium,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2011}, {"title": "An SBVR Framework for RESTful Web Applications", "author": ["Alexandros Marinos", "Paul J. Krause"], "venue": "Rule Interchange and Applications, International Symposium,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2009}, {"title": "An SBVR to SQL Compiler", "author": ["Alexandros Marinos", "Sotiris Moschoyiannis", "Paul J Krause"], "venue": "Proceedings of the RuleML-2010 Challenge, at the 4th Int\u2019l Web Rule Symposium,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}, {"title": "True Concurrency in Long-running Transactions for Digital Ecosystems", "author": ["Sotiris Moschoyiannis", "Paul J. Krause"], "venue": "Fundamenta Informaticae", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2015}, {"title": "Generating SQL Queries from SBVR Rules", "author": ["Sotiris Moschoyiannis", "Alexandros Marinos", "Paul J. Krause"], "venue": "Semantic Web Rules - International Symposium,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2010}, {"title": "Extending Participatory Fuzzy Cognitive Mapping with a Control Nodes Methodology: A Case Study of the Development of a Bio-based Economy in the Humber Region, UK", "author": ["Alexandra S. Penn", "Christopher J. Knight"], "venue": "Chalkias", "citeRegEx": "29", "shortCiteRegEx": "29", "year": 2015}, {"title": "The Business Rules Manifesto, Version 2. Technical Report, Business Rules Group", "author": ["R.G. Ross"], "venue": null, "citeRegEx": "30", "shortCiteRegEx": "30", "year": 2003}, {"title": "Logical Formalization of Semantic Business Vocabulary and Rules", "author": ["Dmitry Solomakhin"], "venue": null, "citeRegEx": "31", "shortCiteRegEx": "31", "year": 2011}, {"title": "Logic-based Reasoning Support for SBVR", "author": ["Dmitry Solomakhin", "Enrico Franconi", "Alessandro Mosca"], "venue": "Fundamenta Informaticae", "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2013}, {"title": "Towards a Theory of Web Service Choreographies", "author": ["Jianwen Su", "Tevfik Bultan", "Xiang Fu", "Xiangpeng Zhao"], "venue": "Web Services and Formal Methods, 4th International Workshop,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 2007}], "referenceMentions": [{"referenceID": 3, "context": ", see [4]) that involve the orderings of interactions include deadlock and race conditions (a situation where two or more messages are competing to arrive first, so while the appear to be ordered in a given execution they are effectively unordered).", "startOffset": 6, "endOffset": 9}, {"referenceID": 26, "context": "In the context of service choreography, verification additionally comes in the form of conformance and realisation [33, 5].", "startOffset": 115, "endOffset": 122}, {"referenceID": 4, "context": "In the context of service choreography, verification additionally comes in the form of conformance and realisation [33, 5].", "startOffset": 115, "endOffset": 122}, {"referenceID": 20, "context": "Moreover, if choreographies are to be equipped with transactional guarantees [22], meaning that a series of compensations are performed upon failure, the ordering of the interactions is doubly important.", "startOffset": 77, "endOffset": 81}, {"referenceID": 23, "context": "Declarative approaches in the Business Rules realm [30], [8] focus on what rather than how.", "startOffset": 51, "endOffset": 55}, {"referenceID": 7, "context": "Declarative approaches in the Business Rules realm [30], [8] focus on what rather than how.", "startOffset": 57, "endOffset": 60}, {"referenceID": 6, "context": "The latter is left to the database management system (DBMS) implementation [7].", "startOffset": 75, "endOffset": 78}, {"referenceID": 7, "context": ", see [8, 10].", "startOffset": 6, "endOffset": 13}, {"referenceID": 9, "context": ", see [8, 10].", "startOffset": 6, "endOffset": 13}, {"referenceID": 23, "context": "The Business Rules manifesto [30] builds the business requirements on the premise that rules or policies in a business application scenario should be expressed declaratively in natural-language sentences for the business audience.", "startOffset": 29, "endOffset": 33}, {"referenceID": 14, "context": ", [21, 15, 2] that takes a declarative approach tends to focus on reasoning about consistency of the rule set, which of course is an important aspect of verification, but have not looked into explicitly capturing the orderings, in terms of observable message exchanges in a choreography.", "startOffset": 2, "endOffset": 13}, {"referenceID": 1, "context": ", [21, 15, 2] that takes a declarative approach tends to focus on reasoning about consistency of the rule set, which of course is an important aspect of verification, but have not looked into explicitly capturing the orderings, in terms of observable message exchanges in a choreography.", "startOffset": 2, "endOffset": 13}, {"referenceID": 23, "context": "In line with the Business Rules Approach [30], it follows the doctrine: \u201dRules build on facts, and facts build on concepts as expressed by terms.", "startOffset": 41, "endOffset": 45}, {"referenceID": 18, "context": "\u201d As argued in [19], while SBVR is a meta-model with models natively expressed as logical formulations, its most common serialization is SBVR Structured English.", "startOffset": 15, "endOffset": 19}, {"referenceID": 17, "context": "The rule in Figure 1 is written using our web-based SBVR editor [18] maintained by Rulemotion1 and is a representation of higher-level facts that use the deontic constraint, obligatory on the constraint defined by the rule.", "startOffset": 64, "endOffset": 68}, {"referenceID": 25, "context": "[32] provides a syntax and semantics for the logical formulations of SBVR, a first-order deonticalethic logic (FODAL).", "startOffset": 0, "endOffset": 4}, {"referenceID": 25, "context": "The syntax of FODAL [32] includes a set of propositional connectives (\u00ac, \u2227), a universal quantifier (\u2200), an infinite set P (predicate symbols), an infinite set V (variable symbols), and, modal operators (2 (necessity) and O (obligation)) for alethic and deontic respectively.", "startOffset": 20, "endOffset": 24}, {"referenceID": 25, "context": "In addition, [32] provides a Kripke semantics for FODAL as well as the proofs of its sound and complete axiomatisations with respect to the semantics [31].", "startOffset": 13, "endOffset": 17}, {"referenceID": 24, "context": "In addition, [32] provides a Kripke semantics for FODAL as well as the proofs of its sound and complete axiomatisations with respect to the semantics [31].", "startOffset": 150, "endOffset": 154}, {"referenceID": 25, "context": "The FODAL axioms as in [32] are shown as follows:", "startOffset": 23, "endOffset": 27}, {"referenceID": 25, "context": "Even though FODAL is undecidable, [32] identifies a decidable fragment of FODAL logic.", "startOffset": 34, "endOffset": 38}, {"referenceID": 7, "context": "relational database design [8].", "startOffset": 27, "endOffset": 30}, {"referenceID": 20, "context": "The idea is to express ordering in terms of dependency between certain messages (causality), and by implication also choice (conflict) and concurrency, which should be possible, especially if a true concurrency semantics is pursued as done in [22].", "startOffset": 243, "endOffset": 247}, {"referenceID": 11, "context": "The work on DecSerFlow proposed in [21] provides a declarative language together with a logical framework for reasoning while the work described in [12] uses the implementation of the Business Process Execution Language for Web Services (BPEL4WS) (see the specification document [24]) and its semantics for choreography specification.", "startOffset": 148, "endOffset": 152}, {"referenceID": 12, "context": "The representation of a choreography is given in the form of graphical specification of service flows which can be mapped onto Linear Temporal Logic (LTL) [13] and in the form of XML data format definition which is then translated to Finite State Process (FSP) process algebra, respectively, thus allowing to model the required behaviour.", "startOffset": 155, "endOffset": 159}, {"referenceID": 3, "context": "This enriches the expressiveness and allows to perform interoperability and verification tasks, including conformance checking and deadlock detection [4].", "startOffset": 150, "endOffset": 153}, {"referenceID": 11, "context": "[12] also provides a tool, LTSA-WS for checking the correctness of the service interactions in terms of whether they correspond to those specified in the requirements.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "While these approaches provide reasoning capability, DecSerFlow is a proprietary language while [12] uses both an informal and a formal language that require training to read and write for specifying software services.", "startOffset": 96, "endOffset": 100}, {"referenceID": 1, "context": "Furthermore, [2] also place emphasis on coordination of service interactions that correlate to the choreography specification - a model derived from BPMN 2.", "startOffset": 13, "endOffset": 16}, {"referenceID": 8, "context": "On the other hand, [9] provides a declarative approach and applies UML activity diagram (as illustration purposes) for describing and capturing the ordering constraints between interactions, yet for service interface adaptation.", "startOffset": 19, "endOffset": 22}, {"referenceID": 5, "context": "Additionally, [6] provides an integrated tool support for the specification and validation and verification for adaptation contracts.", "startOffset": 14, "endOffset": 17}, {"referenceID": 8, "context": "In other words, [9] and [6] focus on discovering mismatches between behavioural interfaces which this different with our focus as discussed earlier in Section 1.", "startOffset": 16, "endOffset": 19}, {"referenceID": 5, "context": "In other words, [9] and [6] focus on discovering mismatches between behavioural interfaces which this different with our focus as discussed earlier in Section 1.", "startOffset": 24, "endOffset": 27}, {"referenceID": 0, "context": "In introducing a notion of time, understood in terms of ordering of Fact Types, we chose not to come from the angle of the Object Constraint Language (OCL) [28] or Allen\u2019s temporal logic [1].", "startOffset": 187, "endOffset": 190}, {"referenceID": 0, "context": "employees\u2192 sortedBy(age); Result : Sequence: employee1, employee2, employee3 In [1] a temporal logic was developed to represent knowledge of properties, events, and actions using one primitive object, namely the time period, and one primitive relation \u2019Meets\u2019 (m and n meet if and only if m precedes n).", "startOffset": 80, "endOffset": 83}, {"referenceID": 22, "context": "This is looking into the Humber region, UK, (one of the UK\u2019s most important energy hubs) as a case study where local authorities and various groups of stakeholders engage in moving from a fossil fuel economy to a biobased economy [29].", "startOffset": 230, "endOffset": 234}, {"referenceID": 25, "context": "As discussed in Section 4, the SBVR Logic Formulation prescribed in the OMG specification document for SBVR [26] can be used to transform an SBVR model into first order logic, which can be useful for reasoning by looking at the FODAL approach that proposed by [32] as discussed in Section 2.", "startOffset": 260, "endOffset": 264}, {"referenceID": 10, "context": "In the context of coordination, and service choreography, temporal aspects will need to be handled and possibly in a distributed manner as done in Mdtl [11] which we have used for reasoning about distributed and concurrent interactions before, or as done for decentralized self-adaptive systems in [14] where behavioural properties are specified using timed computation tree logic (TCTL).", "startOffset": 152, "endOffset": 156}, {"referenceID": 13, "context": "In the context of coordination, and service choreography, temporal aspects will need to be handled and possibly in a distributed manner as done in Mdtl [11] which we have used for reasoning about distributed and concurrent interactions before, or as done for decentralized self-adaptive systems in [14] where behavioural properties are specified using timed computation tree logic (TCTL).", "startOffset": 298, "endOffset": 302}, {"referenceID": 12, "context": "Hence, with respect to choreography verification we would typically be looking at Computational Tree Logic (CTL) or Linear Temporal Logic (LTL) [13] .", "startOffset": 144, "endOffset": 148}, {"referenceID": 17, "context": "In terms of implementation, apart from the SBVR editor [18] discussed earlier (Section 2) we also", "startOffset": 55, "endOffset": 59}, {"referenceID": 19, "context": "implemented an SBVR to SQL comipler [20].", "startOffset": 36, "endOffset": 40}, {"referenceID": 16, "context": "The work in [17] demonstrates", "startOffset": 12, "endOffset": 16}, {"referenceID": 21, "context": "Figure 6: SBVR rules transformed to SQL queries [23]", "startOffset": 48, "endOffset": 52}, {"referenceID": 21, "context": "Therefore, SBVR can be used to formulate complex data queries in a way that provides a higher level of abstraction than SQL (or any other query language) as shown in [23].", "startOffset": 166, "endOffset": 170}, {"referenceID": 20, "context": "In previous work we have used vector languages, a model of true concurrency, to equip service choreographies with transactional guarantees, in the so-called transaction languages [22].", "startOffset": 179, "endOffset": 183}, {"referenceID": 14, "context": "So transaction languages effectively play the role of the blackboard, in the sense of the work in [15], while the SBVR rules which are amenable to business analysts are used to constrain the generated implementation and seamlessly force it to adhere to the choreography specification [2].", "startOffset": 98, "endOffset": 102}, {"referenceID": 1, "context": "So transaction languages effectively play the role of the blackboard, in the sense of the work in [15], while the SBVR rules which are amenable to business analysts are used to constrain the generated implementation and seamlessly force it to adhere to the choreography specification [2].", "startOffset": 284, "endOffset": 287}, {"referenceID": 2, "context": "In addition, another possible future extension has to do with the (correctness of the) transformation from natural language to SBVR [3].", "startOffset": 132, "endOffset": 135}, {"referenceID": 15, "context": "Controlled Language (CL) is used in [16] to ensure correctness and deadlock-freedom.", "startOffset": 36, "endOffset": 40}], "year": 2015, "abstractText": "We propose the use of structured natural language (English) in specifying service choreographies, focusing on the what rather than the how of the required coordination of participant services in realising a business application scenario. The declarative approach we propose uses the OMG standard Semantics of Business Vocabulary and Rules (SBVR) as a modelling language. The service choreography approach has been proposed for describing the global orderings of the invocations on interfaces of participant services. We therefore extend SBVR with a notion of time which can capture the coordination of the participant services, in terms of the observable message exchanges between them. The extension is done using existing modelling constructs in SBVR, and hence respects the standard specification. The idea is that users domain specialists rather than implementation specialists can verify the requested service composition by directly reading the structured English used by SBVR. At the same time, the SBVR model can be represented in formal logic so it can be parsed and executed by a machine.", "creator": "LaTeX with hyperref package"}}}