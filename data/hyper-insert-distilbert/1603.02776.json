{"id": "1603.02776", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Mar-2016", "title": "Implicit Discourse Relation Classification via Multi-Task Neural Networks", "abstract": "without discourse matrix connectives, classifying implicit discourse relations systems is definitely a challenging task choice and usually a bottleneck method for building a deeper practical discourse parser. previous research usually exclusively makes use of one kind approach of discourse framework such as binary pdtb or structural rst to improve significantly the classification performance functional on underlying discourse relations. once actually, basically under different discourse annotation model frameworks, basically there exist countless multiple hierarchical corpora which have internal connections. maybe to actively exploit the combination of different discourse corpora, partly we design related independent discourse classification tasks structures specific to a corpus, and secondly propose a certain novel advanced convolutional neural computation network representing embedded online multi - task learning interval system to closely synthesize performing these knowledge tasks directly by learning possible both unique and very shared representations for classify each task. continuing the ongoing experimental results on incorporating the pdtb implicit textual discourse relation classification task demonstrate that constructing our construct model achieves significant gains over analogous baseline systems.", "histories": [["v1", "Wed, 9 Mar 2016 03:13:37 GMT  (177kb,D)", "http://arxiv.org/abs/1603.02776v1", "This is the pre-print version of a paper accepted by AAAI-16"]], "COMMENTS": "This is the pre-print version of a paper accepted by AAAI-16", "reviews": [], "SUBJECTS": "cs.CL cs.AI cs.NE", "authors": ["yang liu", "sujian li", "xiaodong zhang", "zhifang sui"], "accepted": true, "id": "1603.02776"}, "pdf": {"name": "1603.02776.pdf", "metadata": {"source": "CRF", "title": "Implicit Discourse Relation Classification via Multi-Task Neural Networks", "authors": ["Yang Liu", "Sujian Li", "Xiaodong Zhang", "Zhifang Sui"], "emails": ["szf}@pku.edu.cn"], "sections": [{"heading": "Introduction", "text": "Discourse relations (e.g., contrast and causality) support a set of sentences to form a coherent text. Automatically identifying these discourse relations can help many downstream NLP tasks such as question answering and automatic summarization.\nUnder certain circumstances, these relations are in the form of explicit markers like \u201cbut\u201d or \u201cbecause\u201d, which is relatively easy to identify. Prior work (Pitler, Louis, and Nenkova 2009) shows that where explicit markers exist, relation types can be disambiguated with F1 scores higher than 90%. However, without an explicit marker to rely on, classifying the implicit discourse relations is much more difficult. The fact that these implicit relations outnumber the explicit ones in naturally occurring text makes the classification of their types a key challenge in discourse analysis.\nThe major line of research work approaches the implicit relation classification problem by extracting informed features from the corpus and designing machine learning algorithms (Pitler, Louis, and Nenkova 2009; Lin, Kan, and Ng 2009; Louis et al. 2010). An obvious challenge for classifying discourse relations is which features are appropriate for representing the sentence pairs. Intuitively, the word\nCopyright c\u00a9 2016, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\npairs occurring in the sentence pairs are useful, since they to some extent can represent semantic relationships between two sentences (for example, word pairs appearing around the contrast relation often tend to be antonyms). In earlier studies, researchers find that word pairs do help classifying the discourse relations. However, it is strange that most of these useful word pairs are composed of stopwords. Rutherford and Xue (2014) point out that this counter-intuitive phenomenon is caused by the sparsity nature of these word pairs. They employ Brown clusters as an alternative abstract word representation, and as a result, they get more intuitive cluster pairs and achieve a better performance.\nAnother problem in discourse parsing is the coexistence of different discourse annotation frameworks, under which different kinds of corpora and tasks are created. The wellknown discourse corpora include the Penn Discourse TreeBank (PDTB) (Prasad et al. 2007) and the Rhetorical Structure Theory - Discourse Treebank (RST-DT) (Mann and Thompson 1988). Due to the annotation complexity, the size of each corpus is not large enough. Further, these corpora under different annotation frameworks are usually used separately in discourse relation classification, which is also the main reason of sparsity in discourse relation classification. However, these different annotation frameworks have strong internal connections. For example, both the Elaboration and Joint relations in RST-DT have a similar sense as the Expansion relation in PDTB. Based on this, we consider to design multiple discourse analysis tasks according to these frameworks and synthesize these tasks with the goal of classifying the implicit discourse relations, finding more precise representations for the sentence pairs. The most inspired work to us is done by (Lan, Xu, and Niu 2013) where they regard implicit and explicit relation classification in PDTB framework as two tasks and design a multi-task learning method to obtain higher performance.\nIn this paper, we propose a more general multi-task learning system for implicit discourse relation classification by synthesizing the discourse analysis tasks within different corpora. To represent the sentence pairs, we construct the convolutional neural networks (CNNs) to derive their vector representations in a low dimensional latent space, replacing the sparse lexical features. To combine different discourse analysis tasks, we further embed the CNNs into a multi-task neural network and learn both the unique and shared repre-\nar X\niv :1\n60 3.\n02 77\n6v 1\n[ cs\n.C L\n] 9\nM ar\n2 01\n6\nsentations for the sentence pairs in different tasks, which can reflect the differences and connections among these tasks. With our multi-task neural network, multiple discourse tasks are trained simultaneously and optimize each other through their connections."}, {"heading": "Prerequisite", "text": "As stated above, to improve the implicit discourse relation classification, we make full use of the combination of different discourse corpora. In our work, we choose three kinds of discourse corpora: PDTB, RST-DT and the natural text with discourse connective words. In this section, we briefly introduce the corpora.\nPDTB The Penn Discourse Treebank (PDTB) (Prasad et al. 2007), which is known as the largest discourse corpus, is composed of 2159 Wall Street Journal articles. PDTB adopts the predicate-argument structure, where the predicate is the discourse connective (e.g. while) and the arguments are two text spans around the connective. In PDTB, a relation is explicit if there is an explicit discourse connective presented in the text; otherwise, it is implicit. All PDTB relations are hierarchically organized into 4 top-level classes: Expansion, Comparison, Contingency, and Temporal and can be further divided into 16 types and 23 subtypes. In our work, we mainly experiment on the 4 top-level classes as in previous work (Lin, Kan, and Ng 2009).\nRST-DT RST-DT is based on the Rhetorical Structure Theory (RST) proposed by (Mann and Thompson 1988) and is composed of 385 articles. In this corpus, a text is represented as a discourse tree whose leaves are non-overlapping text spans called elementary discourse units (EDUs). Since we mainly focus on discourse relation classification, we make use of the discourse dependency structure (Li et al. 2014) converted from the tree structures and extracted the EDU pairs with labeled rhetorical relations between them. In RST-DT, all relations are classified into 18 classes. We choose the highest frequent 12 classes and get 19,681 relations.\nRaw Text with Connective Words There exists a large amount of raw text with connective words in it. As we know, these connective words serve as a natural means to connect text spans. Thus, the raw text with connective words is somewhat similar to the explicit discourse relations in PDTB without expert judgment and can also be used as a special discourse corpus. In our work, we adopt the New York Times (NYT) Corpus (Sandhaus 2008) with over 1.8 million news articles. We extract the sentence pairs around the 35 commonly-used connective words, and generate a new discourse corpus with 40,000 relations after removing the connective words. This corpus is not verified by human and contains some noise, since not all the connective words reflect discourse relations or some connective words may have different meanings in different contexts. However, it can still help training a better model with a certain scale of instances."}, {"heading": "Multi-Task Neural Network for Discourse Parsing", "text": ""}, {"heading": "Motivation and Overview", "text": "Different discourse corpora are closely related, though under different annotation theories. In Table 1, we list some instances which have similar discourse relations in nature but are annotated differently in different corpora. The second row belongs to the Elaboration relation in RST-DT. The third and fourth row are both Expansion relations in PDTB: one is implicit and the other is explicit with the connective \u201cin particular\u201d. The fifth row is from the NYT corpus and directly uses the word \u201cparticularly\u201d to denote the discourse relation between two sentences. From these instances, we can see they all reflect the similar discourse relation that the second argument gives more details of the first argument. It is intuitive that the classification performance on these instances can be boosted from each other if we appropriately synthesize them. With this idea, we propose to adopt the multi-task learning method and design a specific discourse analysis task for each corpus.\nAccording to the principle of multi-task learning, the more related the tasks are, the more powerful the multi-task learning method will be. Based on this, we design four discourse relation classification tasks. Task 1 Implicit PDTB Discourse Relation Classification Task 2 Explicit PDTB Discourse Relation Classification Task 3 RST-DT Discourse Relation Classification Task 4 Connective Word Classification\nThe first two tasks both classify the relation between two arguments in the PDTB framework. The third task is to predict the relations between two EDUs using our processed RST-DT corpus. The last one is designed to predict a correct connective word to a sentence pair by using the NYT corpus. We define the task of classifying implicit PDTB relations as our main task, and the other tasks as the auxiliary tasks. This means we will focus on learning from other tasks to improve the performance of our main task in our system. It is noted that we call the two text spans in all the tasks as arguments for convenience.\nNext, we will introduce how we tackle these tasks. In our work, we propose to use the convolutional neural networks (CNNs) for representing the argument pairs. Then, we embed the CNNs into a multi-task neural network (MTNN), which can learn the shared and unique properties of all the tasks."}, {"heading": "CNNs: Modeling Argument Pairs", "text": "Figure 1 illustrates our proposed method of modeling the argument pairs. We associate each wordw with a vector representation xw \u2208 RDe , which is usually pre-trained with large unlabeled corpora. We view an argument as a sequence of these word vectors, and let x1i (x 2 i ) be the vector of the ith word in argument Arg1 (Arg2). Then, the argument pair can be represented as,\nArg1 : [x11,x 1 2, \u00b7 \u00b7 \u00b7 ,x1m1 ] (1) Arg2 : [x21,x 2 2, \u00b7 \u00b7 \u00b7 ,x2m2 ] (2)\nwhere Arg1 has m1 words and Arg2 has m2 words.\nArg2\nGenerally, let xi:i+j relate to the concatenation of word vectors xi,xi+1, \u00b7 \u00b7 \u00b7 ,xi+j . A convolution operation involves a filter w, which is applied to a window of h words to produce a new feature. For our specific task of capturing the relation between two arguments, each time we take h words from each arguments, concatenate their vectors, and apply the convolution operation on this window pair. For example, a feature cij is generated from a window pair composed by words x1i:i+h\u22121 fromArg1 and words x 2 j:j+h\u22121 fromArg2,\ncij = f(w \u00b7 [x1i:i+h\u22121,x2j:j+h\u22121] + b) (3) where b is a bias term and f is a non-linear function, for which in this paper we use tanh.\nThe filter is applied to each possible window pair of the two arguments to produce a feature map c, which is a twodimensional matrix. Since the arguments may have different lengths, we use an operation called \u201cdynamic pooling\u201d to capture the most salient features in c, generating a fixedsize matrix p \u2208 Rnp\u00d7np . In order to do this, matrix c will be divided into np roughly equal parts. Every maximal value in the rectangular window is selected to form a np \u00d7 np grid. During this process, the matrix p will lose some information compared to the original matrix c. However, this approach can capture c\u2019s global structure. For example, the upper left part of p will be constituted by word pair features reflecting the relationship between the beginnings of two arguments. This property is useful to discourse parsing, because some prior research (Lin, Kan, and Ng 2009) has pointed out that word position in one argument is important for identifying the discourse relation.\nWith multiple filters like this, the argument pairs can be modeled as a three-dimensional tensor. We flatten it to a vector p \u2208 Rnp\u00d7np\u00d7nf and use it as the representation of the argument pair, where nf is the number of filters."}, {"heading": "Multi-Task Neural Networks: Classifying Discourse Relations", "text": "Multi-task learning (MTL) is a kind of machine learning approach, which trains both the main task and auxiliary tasks simultaneously with a shared representation learning the commonality among the tasks. In our work, we embed the convolutional neural networks into a multi-task learning system to synthesize the four tasks mentioned above. We map the argument pairs of different tasks into low-dimensional vector representations with the proposed CNN. To guarantee the principle that these tasks can optimize each other without bringing much noise, each task owns a unique representation of the argument pairs, meanwhile, there is a special shared representation connecting all the tasks. The architecture of our multi-task learning system is shown in Figure 2. For clarity, the diagram depicts only two tasks. It should be aware that the number of tasks is not limited to two. Arg1\nTask 2\nNN Share\nArg2\nPair Representation Representation Vector\n1 1\u00a0\n1 2\u00a0\n2 1 \u00a0\n2 2\u00a0\n\u00a0\n\u00a0\n1\u00a0\n2 \u00a0\n\u00a0\n2\u00a0\n1\u00a0\n1\u00a0\n2\u00a0\nTask 1\nResults\n1\u00a0\n2\u00a0\nFor task t, the argument pair s = (Arg1, Arg2) is mapped into a unique vector pt and a shared vector ps, where NN denotes the convolutional neural networks for\nmodeling the argument pair,\npt = NNt(Arg1, Arg2) (4) ps = NN(Arg1, Arg2) (5)\nThese two vectors are then concatenated and mapped into a task-specific representation qt by a nonlinear transformation,\nqt = f(wt1[p t,ps] + bt1) (6)\nwhere wt is the transformation matrix and bt1 is the bias term.\nAfter acquiring qt, we use several additional surface-level features, which have been proven useful in a bunch of existing work (Lin, Kan, and Ng 2009; Rutherford and Xue 2014). We notate the feature vector for task t as sf t. Then, we concatenate sf t with qt and name it rt. Since all the tasks are related with classification, we set the dimension of the output vector for task t as the predefined class number nt. Next, we take rt as input and generate the output vector lt through a softmax operation with the weight matrix w2t and the bias bt2,\nrt = [qt, sf t] (7)\nlt = softmax(wt2r t + bt2) (8)\nwhere the i-th dimension of lt can be interpreted as the conditional probability that an instance belongs to class i in task t.\nThis network architecture has various good properties. The shared representation makes sure these tasks can effectively learn from each other. Meanwhile, multiple CNNs for modeling the argument pairs give us the flexibility to assign different hyper-parameters to each task. For example, PDTB is built on sentences while RST-DT is on elementary discourse units, which are usually shorter than sentences. Under the proposed framework, we can assign a larger window size to PDTB related tasks and a smaller window size to the RST-DT related task, for better capturing their discourse relations.\nAdditional Features When classifying the discourse relations, we consider several surface-level features, which are supplemental to the automatically generated representations. We use different features for each task, considering their specific properties. These features include:\n\u2022 The first and last words of the arguments (For task 1) \u2022 Production rules extracted from the constituent parse trees\nof the arguments (For task 1,2,4)\n\u2022 Whether two EDUs are in the same sentence (For task 3)"}, {"heading": "Model Training", "text": "We define the ground-truth label vector gt for each instance in task t as a binary vector. If the instance belongs to class i, only the i-th dimension gt[i] is 1 and the other dimensions are set to 0. In our MTNN model, all the tasks are classification problems and we adopt cross entropy loss as\nthe optimization function. Given the neural network parameters \u0398 and the word embeddings \u0398e, the objective function for instance s can be written as,\nJ(\u0398,\u0398e) = \u2212 nt\u2211 i gt[i]lt[i] (9)\nWe use mini-batch stochastic gradient descent (SGD) to train the parameters \u0398 and \u0398e. Referring to the training procedure in (Liu et al. 2015), we select one task in each epoch and update the model according to its task-specific objective.\nTo avoid over-fitting, we use different learning rates to train the neural network parameters and the word embeddings , which are denoted as \u03bb and \u03bbe. To make the most of all the tasks, we expect them to reach their best performance at roughly the same time. In order to achieve this, we assign different regulative ratio \u00b5 and \u00b5e to different tasks, adjusting their learning rates \u03bb and \u03bbe. That is, for task t, the update rules for \u0398 and \u0398e are,\n\u0398\u2190 \u0398 + \u00b5t\u03bb\u2202J(\u0398) \u2202\u0398\n(10)\n\u0398e \u2190 \u0398e + \u00b5te\u03bbe \u2202J(\u0398e)\n\u2202\u0398e (11)\nIt is worth noting that, to avoid bringing noise to the main task, we let \u00b5e of the auxiliary tasks to be very small, preventing them from changing the word embeddings too much."}, {"heading": "Experiments", "text": ""}, {"heading": "Datasets", "text": "As introduced above, we use three corpora: PDTB, RST-DT, and the NYT corpus, in our experiments to train our multitask neural network.\nSince our main goal is to conduct implicit discourse relation classification (the main task), Table 2 summarizes the statistics of the four top-level implicit discourse relations in PDTB. We follow the setup of previous studies (Pitler, Louis, and Nenkova 2009), splitting the dataset into a a training set, development set, and test set. Sections 2-20 are used to train classifiers, Sections 0-1 to develop feature sets and tune models, and Section 21-22 to test the systems.\nFor Task 2, all 17,469 explicit relations in sections 0-24 in PDTB are used. Table 3 shows the distribution of these explicit relations on four classes. For Task 3, we convert RSTDT trees to discourse dependency trees according to (Li et al. 2014) and get direct relations between EDUs, which is\nmore suitable for the classification task. We choose the 12 most frequent coarse-grained relations shown in Table 4, generating a corpus with 19,681 instances.\nFor Task 4, we use the Standford parser (Klein and Manning 2003) to segment sentences. We select the 35 most frequent connectives in PDTB, and extract instances containing these connectives from the NYT corpus based on the same patterns as in (Rutherford and Xue 2015). We then manually compile a set of rules to remove some noisy instances, such as those with too short arguments. Finally, we obtain a corpus with 40,000 instances by random sampling. Due to space limitation, we only list the 10 most frequent connective words in our corpus in Table 5."}, {"heading": "Model Configuration", "text": "We use word embeddings provided by GloVe (Pennington, Socher, and Manning 2014), and the dimension of the embeddings De is 50. We first train these four tasks separately to roughly set their hyper-parameters. Then, we more carefully tune the multi-task learning system based on the performance of our main task on the development set. The learning rates are set as \u03bb = 0.004, \u03bbe = 0.001.\nEach task has a set of hyper-parameters, including the window size of CNN h, the pooling size np, the number of filters nf , dimension of the task-specific representation nr, and the regulative ratios \u00b5 and \u00b5e. All the tasks share a window size, a pooling size and a number of filters for learning the shared representation, which are denoted as hs, nsp, n s f . The detailed settings are shown in Table 6."}, {"heading": "Evaluation and Analysis", "text": "We mainly evaluate the performance of the implicit PDTB relation classification, which can be seen as a 4-way classification task. For each relation class, we adopt the commonly used metrics, Precision, Recall and F1, for performance evaluation. To evaluate the whole system, we use the metrics of Accuracy and macro-averaged F1.\nAnalysis of Our Model First of all, we evaluate the combination of different tasks. Table 7 shows the detailed results. For each relation, we first conduct the main task (denoted as 1) through implementing a CNN model and show the results in the first row. Then we combine the main task with one of the other three auxiliary tasks (i.e., 1+2, 1+3, 1+4) and their results in the next three rows. The final row gives the performance using all the four tasks (namely, ALL). In general, we can see that when synthesizing all the tasks, our MTL system can achieve the best performance.\nMore specifically, we find these tasks have different influence on different discourse relations. Task 2, the classification of explicit PDTB relations, has slight or even negative impact on the relations except the Temporal relation. This result is consistent with the conclusion reported in (Sporleder and Lascarides 2008), that there exists difference between explicit and implicit discourse relations and more corpus of explicit relations does not definitely boost the performance of implicit ones. Task 4, the classification of connec-\ntive words, besides having the similar effects, is observed to be greatly helpful for identifying the Contingency relation. This may be because the Contingency covers a wide range of subtypes and the fine-grained connective words in NYT corpus can give some hints of identifying this relation. On the contrary, when training with the task of classifying RSTDT relations (Task 3), the result gets better on Comparison, however, the improvement on other relations is less obvious than when using the other two tasks. One possible reason for this is the definitions of Contrast and Comparison in RSTDT are similar to Comparison in PDTB, so these two tasks can more easily learn from each other on these classes. Importantly, when synthesizing all the tasks in our model, except the result on Comparison relation experiences a slight deterioration, the classification performance generally gets better.\nComparison with Other Systems We compare the general performance of our model with a state-of-the-art system in terms of accuracy and macro-average F1 in Table 8. Rutherford and Xue (2015) elaborately select a combination of various lexical features, production rules, and Brown cluster pairs, feeding them into a maximum entropy classifier. They also propose to gather weakly labeled data based on the discourse connectives for the classifier and achieve state-of-the-art results on 4-way classification task. We can see our proposed MTL system achieves higher performance on both accuracy and macro-averaged F1. We also compare the general performance between our MTL system and the Single-task Learning (STL) system which is only trained on Task 1. The result shows MTL raises the Accuracy from 52.82 to 57.27 and the F1 from 37.65 to 44.98. Both improvements are significant under one-tailed t-test (p < 0.05).\nFor a more direct comparison with previous results, we also conduct experiments based on the setting that the task as four binary one vs. other classifiers. The results are presented in Table 9. Three additional systems are used as baselines. Park and Cardie (2012) design a traditional feature-\nbased method and promote the performance through optimizing the feature set. Ji and Eisenstein (2015) used two recursive neural networks on the syntactic parse tree to induce the representation of the arguments and the entity spans. Zhou et al. (2010) first predict connective words on a unlabeled corpus, and then use these these predicted connectives as features to recognize the discourse relations.\nThe results show that the multi-task learning system is especially helpful for classifying the Contingency and Temporary relation. It increases the performance on Temporary relation from 33.30 to 37.17, achieving a substantial improvement. This is probably because this relation suffers from the lack of training data in STL, and the use of MTL can learn better representations for argument pairs, with the help of auxiliary tasks. The Comparison relation benefits the least from MTL. Previous work of (Rutherford and Xue 2014) suggests this relation relies on the syntactic information of two arguments. Such features are captured in the upper layer of our model, which can not be optimized by multiple tasks. Generally, our system achieves the state-of-the-art performance on three discourse relations (Expansion, Contingency and Temporary)."}, {"heading": "Related Work", "text": "The supervised method often approaches discourse analysis as a classification problem of pairs of sentences/arguments. The first work to tackle this task on PDTB were (Pitler, Louis, and Nenkova 2009). They selected several surface features to train four binary classifiers, each for one of the top-level PDTB relation classes. Although other features proved to be useful, word pairs were the major contributor to most of these classifiers. Interestingly, they found that training these features on PDTB was more useful than training them on an external corpus. Extending from this work, Lin, Kan, and Ng (2009) further identified four different feature types representing the context, the constituent parse trees, the dependency parse trees and the raw text respectively. In addition, Park and Cardie (2012) promoted the performance through optimizing the feature set. Recently, McKeown and Biran (2013) tried to tackle the feature sparsity problem by aggregating features. Rutherford and Xue (2014) used brown cluster to replace the word pair features, achieving the state-of-the-art classification performance. Ji and Eisenstein (2015) used two recursive neural networks to represent the arguments and the entity spans and use the combination of the representations to predict the discourse relation.\nThere also exist some semi-supervised approaches which exploit both labeled and unlabeled data for discourse relation classification. Hernault, Bollegala, and Ishizuka (2010) proposed a semi-supervised method to exploit the cooccurrence of features in unlabeled data. They found this method was especially effective for improving accuracy for infrequent relation types. Zhou et al. (2010) presented a method to predict the missing connective based on a language model trained on an unannotated corpus. The predicted connective was then used as a feature to classify the implicit relation. An interesting work is done by (Lan, Xu, and Niu 2013), where they designed a multi-task learning\nmethod to improve the classification performance by leveraging both implicit and explicit discourse data.\nIn recent years, neural network-based methods have gained prominence in the field of natural language processing (Kim 2014; Cao et al. 2015). Some multi-task neural networks are proposed. For example, Collobert et al. (2011) designed a single sequence labeler for multiple tasks, such as Part-of-Speech tagging, chunking, and named entity recognition. Very recently, Liu et al. (2015) proposed a representation learning algorithm based on multi-task objectives, successfully combining the tasks of query classification and web search."}, {"heading": "Conclusion", "text": "Previous studies on implicit discourse relation classification always face two problems: sparsity and argument representation. To solve these two problems, we propose to use different kinds of corpus and design a multi-task neural network (MTNN) to synthesize different corpus-specific discourse classification tasks. In our MTNN model, the convolutional neural networks with dynamic pooling are developed to model the argument pairs. Then, different discourse classification tasks can derive their unique and shared representations for the argument pairs, through which they can optimize each other without bringing useless noise. Experiment results demonstrate that our system achieves state-ofthe-art performance. In our future work, we will design a MTL system based on the syntactic tree, enabling each task to share the structural information.\nAcknowledgments We thank all the anonymous reviewers for their insightful comments on this paper. This work was partially supported by National Key Basic Research Program of China (2014CB340504), National Natural Science Foundation of China (61273278 and 61572049). The correspondence author of this paper is Sujian Li."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "Without discourse connectives, classifying implicit discourse relations is a challenging task and a bottleneck for building a practical discourse parser. Previous research usually makes use of one kind of discourse framework such as PDTB or RST to improve the classification performance on discourse relations. Actually, under different discourse annotation frameworks, there exist multiple corpora which have internal connections. To exploit the combination of different discourse corpora, we design related discourse classification tasks specific to a corpus, and propose a novel Convolutional Neural Network embedded multi-task learning system to synthesize these tasks by learning both unique and shared representations for each task. The experimental results on the PDTB implicit discourse relation classification task demonstrate that our model achieves significant gains over baseline systems.", "creator": "LaTeX with hyperref package"}}}