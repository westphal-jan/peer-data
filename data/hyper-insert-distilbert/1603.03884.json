{"id": "1603.03884", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "12-Mar-2016", "title": "Grounding Recursive Aggregates: Preliminary Report", "abstract": "problem domain solving in answer - set computer programming consists that of two primary steps, : a quick first grounding linear phase, often systematically replacing all variables serviced by successive terms, schedules and a secondly second solving phase computing the stable conditional models model of the obtained ground program. an intricate part ways of considering both phases discussed is the treatment of aggregates, which are indeed popular language proof constructs informally that allow avenues for extensively expressing properties continuously over different sets. in this paper, we vastly elaborate upon the simplest treatment pattern of bounded aggregates during grounding in gringo series 4. consequently, our empirical approach accordingly is applicable to these grounding processes based on more semi - naive database evaluation techniques. in particular, nonetheless we continually provide a series b of algorithms detailing the basic treatment of recursive computational aggregates and illustrate this by a running example.", "histories": [["v1", "Sat, 12 Mar 2016 10:22:13 GMT  (61kb)", "http://arxiv.org/abs/1603.03884v1", "21 pages, 7 figures, preliminary version appeared at GTTV'15"]], "COMMENTS": "21 pages, 7 figures, preliminary version appeared at GTTV'15", "reviews": [], "SUBJECTS": "cs.AI cs.DB", "authors": ["martin gebser", "roland kaminski", "torsten schaub"], "accepted": false, "id": "1603.03884"}, "pdf": {"name": "1603.03884.pdf", "metadata": {"source": "CRF", "title": "Grounding Recursive Aggregates: Preliminary Report", "authors": ["Martin Gebser", "Roland Kaminski", "Torsten Schaub"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n60 3.\n03 88\n4v 1\n[ cs\n.A I]\n1 2\nM ar\n2 01\n6"}, {"heading": "1 Introduction", "text": "Modern grounders like (the one in) dlv [1] or gringo [2] are based on semi-naive database evaluation techniques [3,4] for avoiding duplicate work during grounding. Grounding is seen as an iterative bottom-up process guided by the successive expansion of a program\u2019s Herbrand base, that is, the set of variable-free atoms constructible from the signature of the program at hand. During this process, a ground rule is only produced if its positive body atoms belong to the current Herbrand base, in which case its head atom is added to the current Herbrand base. The basic idea of semi-naive database evaluation is to focus this process on the new atoms generated at each iteration in order to avoid reproducing the same ground rules. This idea is based on the observation that the production of a new ground rule relies on the existence of an atom having been new at the previous iteration. Accordingly, a ground rule is only produced if its positive body contains at least one atom produced at the last iteration.\nIn what follows, we show how a grounding framework relying upon semi-naive database evaluation techniques can be extended to incorporate recursive aggregates. An example of such an aggregate is shown in Table 1, giving an encoding of the Company Controls Problem [5]: A company X controls a company Y , if X directly or indirectly controls more than 50% of the shares of Y . The aggregate sum+ implements summation over positive integers. Notably, it takes part in the recursive definition of controls/2 in Table 1. A corresponding problem instance is given in Table 2. Note that a systematic instantiation of the four variables in Table 1 with the eight constants in Table 2 results in 64 ground rules. However, taken together, the encoding and the instance are equivalent to the program in Table 3, which consists of four ground rules only. In fact, all liter-\n\u22c6 Affiliated with Simon Fraser University, Canada, and IIIS Griffith University, Australia.\nals in Table 3 can even be evaluated in view of the problem instance, which moreover allows us to evaluate the aggregate atoms, so that the grounding of the above company controls instance boils down to the four facts controls(c1, c2), controls(c3, c4), controls(c1, c3), and controls(c1, c4).\nAccordingly, the goal of this paper is to elaborate upon the efficient computation of the relevant grounding of programs with recursive aggregates. Section 2 starts with recalling the formal preliminaries from [6]. Section 3 provides basic grounding algorithms (cf. [1]), paving the way for the more sophisticated algorithms addressing recursive aggregates in Section 4. We summarize our contribution and relate it to the state of the art in Section 5. The developed approach is implemented in gringo series 4."}, {"heading": "2 Formal Preliminaries", "text": "This section recalls the formal preliminaries regarding the syntax and semantics of gringo\u2019s input language, developed in [6]."}, {"heading": "2.1 Syntax", "text": "Alphabet. We consider numerals, (symbolic) constants, variables, and aggregate names, along with the symbols\n6= < > \u2264 \u2265 4 (1)\n\u22a5 \u223c \u2227 \u2228 \u2190 (2)\n, ; : ( ) { } (3)\nNumerals are strings of numbers optionally preceded with a minus symbol. Constants are strings of letters, underscores, and numbers starting with a lowercase letter. Variables are strings of letters, underscores, and numbers starting with an uppercase letter.5\nTerms. Numerals, constants, and variables are terms. Given a constant f and a term tuple t, f(t) is a term as well. A variable-free term is said to be ground.\n4 Equality is not included here because it is treated specially in gringo; a description is beyond the scope of this paper. 5 We use _ to denote anonymous variables, i.e., each _ stands for unique variable.\nInterpretation of numerals and aggregates. A numeral n corresponds to the integer n. There is a total order on all ground terms extending that on numerals, that is, for any integers m and n, m \u2264 n if m \u2264 n.\nFor a ground term tuple t, weight(t) is n, if the first element of t is a numeral of form n, otherwise it is 0.\nEach aggregate name \u03b1 is associated with a function \u03b1\u0302 from the set of sets of ground term tuples into the set of ground terms. Given a set T of ground term tuples, we consider the aggregate names/functions defined by\n\u2013 s\u0302um(T ) = \u03a3t\u2208Tweight(t), if the subset of tuples with non-zero weights is finite, and 0 otherwise;\n\u2013 s\u0302um+(T ) = \u03a3t\u2208T,weight(t)>0weight(t), if the subset of tuples with positive weights is finite, and \u221e otherwise.6\nAtoms and literals. Symbolic atoms have the form p(t) where p is a constant and t is a term tuple. Comparison atoms have form u1 \u227a u2 where u1 and u2 are terms. We use atom \u22a5 to denote a comparison atom that is false (e.g., 0 > 0), and use \u22a4 analogously. Simple literals have form a or \u223ca where a is a symbolic or comparison atom.\nAggregate atoms have form\n\u03b1{t1 : L1; . . . ; tn : Ln} \u227a s (4)\nwhere\n\u2013 n \u2265 0 \u2013 \u03b1 is an aggregate name \u2013 each ti is a term tuple \u2013 each Li is a tuple of simple literals \u2013 \u227a is one of the symbols (1) \u2013 s is a term, also called guard\n6 n < \u221e holds for any numeral n.\nFinally, literals have the form a or \u223ca where a is either a symbolic, comparison, or aggregate atom.7\nRules and programs. Rules are of form h \u2190 l1\u2227\u00b7 \u00b7 \u00b7\u2227 ln, where n \u2265 0, h is a symbolic atom, and each li is a literal. A program is a finite set of rules.\nMiscellaneous definitions. We use the following projection functions on rules.\n\u2013 head(r) = h in a rule r of the above form \u2013 body(r) = {l1, . . . , ln} in a rule r of the above form \u2013 body+(r) = {a \u2208 body(r) | a is a symbolic atom} \u2013 body\u2212(r) = {a | \u223ca \u2208 body(r), a is a symbolic atom} \u2013 body\u00b1(r) = body+(r) \u222a body\u2212(r)\nIn the following, some body literals are marked. The binary relation r \u2020 l holds if the literal l \u2208 body(r) of rule r is marked. Marked body literals are indicated by l\u2020.\nA substitution is a mapping from variables to (ground) terms. We represent substitutions by sets of form {x1 7\u2192 t1, . . . , xn 7\u2192 tn} where n \u2265 0, each xi is a variable, and each ti is a ground term. A substitution \u03c3 of the above form applied to a literal l, written l\u03c3, replaces all occurrences of variables xi in l with corresponding terms ti.\nMoreover, we associate in what follows each occurrence of an aggregate in a logic program with a unique identifier. We use \u03b1i, xi, and si to refer to the aggregate function, tuple of global variables, and guard of the aggregate occurrence identified by i. Furthermore, (si)xig refers to the ground guard where the variables listed in tuple xi are replaced with the corresponding terms in tuple g in si.\nAn aggregate \u03b1 together with a relation \u227a is monotone, if for any sets T1 \u2286 T2 of ground term tuples and ground term s, we have that \u03b1(T1) \u227a s implies \u03b1(T2) \u227a s."}, {"heading": "2.2 Semantics", "text": "The semantics of programs rests upon a translation into (infinitary) propositional formulas along with their stable models [7].\nGround simple literals are mapped via \u03c4 on propositional atoms as follows.\n\u2013 \u03c4(a) = a for (ground) symbolic atom a \u2013 \u03c4(t1 \u227a t2) is \u22a4, if the relation \u227a holds between t1 and t2, and \u22a5 otherwise \u2013 \u03c4(\u223ca) = \u00ac\u03c4(a) for a literal \u223ca\nGlobal variables. A variable is global\n\u2013 in a simple literal, if it occurs in the literal \u2013 in an aggregate literal, if it occurs in the guard \u2013 in a rule, if it is global in the head or a body literal\n7 gringo as well as its semantic underpinnings in [6] also allow for double negated literals of form \u223c\u223ca.\nAggregate literals. The translation \u03c4 extends to aggregate atoms a as in (4) as follows. An instance of an aggregate element t : L is obtained by substituting all its variables with ground terms. We let \u03c4L stand for the conjunction of applications of \u03c4 to the ground simple literals in L.\nLet E be the set of all instances of aggregate elements in a. A set \u2206 \u2286 E justifies a, if the relation \u227a holds between \u03b1\u0302{t | (t : L) \u2208 \u2206} and the guard s. Then, \u03c4a is the conjunction of formulas \u2227 (t:L)\u2208\u2206 \u03c4L \u2192 \u2228 (t:L)\u2208E\\\u2206 \u03c4L for all sets \u2206 \u2286 E that do not justify a. A negative aggregate literal \u223ca is treated analogous to a negative simple literal.\nRules and programs. An instance of a rule r is obtained by substituting all global variables with ground terms. Then, \u03c4r is the set of formulas \u03c4l1 \u2227 \u00b7 \u00b7 \u00b7 \u2227 \u03c4ln \u2192 \u03c4h for all instances h \u2190 l1 \u2227 \u00b7 \u00b7 \u00b7 \u2227 ln of rule r, and \u03c4P = \u22c3 r\u2208P \u03c4r for a program P .\nStable models. The stable models of a logic program P are the stable models of the (infinitary) propositional formula \u03c4P [7]."}, {"heading": "2.3 Safety and Rule Dependency Graph", "text": "A global variable is safe in a rule, if it is bound by a positive symbolic literal in the rule body. A non-global variable is safe in an aggregate element, if it is bound by a positive symbolic literal in the corresponding aggregate element. A rule is safe, if all its variables are safe. A program is safe, if all its rules are safe. In what follows, we consider safe programs only.\nThe rule dependency graph G = (V,E) of a (normal) logic program P is a directed graph such that V = P and E = {(r1, r2) \u2208 V \u00d7 V | l \u2208 body\u00b1(r2), head(r1) unifies l}.8 The positive rule dependency graph G+ is defined similarly but considers edges induced by positive literals only (l \u2208 body+(r2))."}, {"heading": "3 Basic Grounding Algorithms", "text": "This section provides some basic algorithms underlying semi-naive evaluation based grounding (see also [1]). All of them apply to normal logic programs and are thus independent of the treatment of recursive aggregates described in the next section.\nWe illustrate the basic algorithms by means of a Hamiltonian cycle example9 using the graph in Figure 1. This graph is represented by the problem instance in Table 4. The actual problem encoding is given in (5) to (13) below. The resulting Hamiltonian cycle is expressed through instances of predicate path/2; a detailed discussion of such encodings can be found in [8,9,10].\n8 Unification assumes that variables in r1 and r2 are distinct, even if they have the same name. 9 https://en.wikipedia.org/wiki/Hamiltonian_path_problem\nc d\na b\nFig. 1. Hamiltonian Cycle Instance (Graph)\npath(X,Y ) \u2190 edge(X,Y ) \u2227 \u223comit(X,Y ) (5)\nomit(X,Y ) \u2190 edge(X,Y ) \u2227 \u223cpath(X,Y ) (6)\n\u2190 path(X,Y ) \u2227 path(X \u2032, Y ) \u2227X < X \u2032 (7)\n\u2190 path(X,Y ) \u2227 path(X,Y \u2032) \u2227 Y < Y \u2032 (8)\non_path(Y ) \u2190 path(X,Y ) \u2227 path(Y, Z) (9)\n\u2190 node(X) \u2227 \u223con_path(X) (10)\nreach(X) \u2190 start(X) (11)\nreach(Y ) \u2190 reach(X) \u2227 path(X,Y ) (12)\n\u2190 node(X) \u2227 \u223creach(X) (13)"}, {"heading": "3.1 Analyzing Logic Programs", "text": "The function Analyze given in Algorithm 1 takes a logic program P , classifies occurrences of recursive symbolic atoms (Ar), and groups rules into components suitable for successive grounding. The classification of atoms can be used to apply on-the-fly simplifications in the following algorithms (cf. Algorithm 3).\nAnalyze first determines the strongly connected components of the program\u2019s dependency graph (Lines 2-3). This graph contains dependencies induced by both positive and negative literals. The outer loop (Lines 5-10) iterates over its components in topological order.10 Each component is then further refined in terms of its positive dependency graph (Lines 6-7).\nThe set Ar of recursive symbolic atoms is determined in Line 9. These are all body literals whose atom unifies with the head of a rule in the current or a following component. Finally, the refined component together with its recursive atoms is appended to the list L in Line 10. This list is the result of the algorithm returned in Line 11.\nFigure 2 shows the dependency graph of the encoding given in (5) to (13). Positive edges are depicted with solid lines, negative ones with dashed lines. Recursive atoms are typeset in bold. The negative edge from Component1,2 to Component1,1 is due to the fact that path(X,Y ) in the negative body of (6) unifies with path(X,Y ) in the head of (5). Furthermore, the occurrence of path(X,Y ) in (6) is recursive because it induces an edge from a later component in the topological ordering at hand. In contrast to positive literals, the recursiveness of negative literals depends on the topological ordering.\n10 A component C1 precedes C2 when there is an edge (r1, r2) with r1 \u2208 C1 and r2 \u2208 C2.\n1 function Analyze(P ) 2 let G be the dependency graph of P 3 S be the strongly connected components of G 4 L \u2190 [] 5 foreach C in S do 6 let G+ be the positive dependency graph of C 7 S+ be the strongly connected components of G+ 8 foreach C+ in S+ do 9 let Ar = {a \u2208 body\u00b1(r2) | r1 \u2208 P, r2 \u2208 C+,head(r1) unifies a}\n10 (L,P ) \u2190 (L+ [(C+, Ar)], P \\ C +)\n11 return L\nAlgorithm 1: Analyze Logic Programs for Grounding\nFor instance, omit(X,Y ) would be recursive in the topological order obtained by exchanging Component1,1 and Component1,2. Regarding Component7,1, the occurrence of reach(X) in the body of (12) is recursive because it unifies with the head of the same rule. Accordingly, it induces a self-loop in the dependency graph."}, {"heading": "3.2 Preparing Components for Grounding", "text": "The function Prepare sets up the rules in a component C for grounding w.r.t. its recursive atoms Ar. To this end, it adds one of the subscripts n, o, or a to the predicate names of the atoms in the positive rule bodies of a given component.11 These subscripts\n11 The alphabet in Section 2 does not allow for predicate names with subscripts. During grounding, we temporarily extend this alphabet with such predicate names.\n1 function Prepare(C,Ar) 2 L \u2190 \u2205 3 foreach r in C do 4 D \u2190 \u2205 5 let S = body+(r) \u2229Ar 6 foreach p(x) in S do\n7 L \u2190 L \u222a\n \n\nhead(r) \u2190 \u2227\nq(y)\u2208D qo(y) \u2227 pn(x)\n\u2227 \u2227\nq(y)\u2208body+(r)\\(D\u222a{p(x)}) qa(y)\n\u2227 \u2227\nl\u2208body(r)\\body+(r) l\n \n\n8 D \u2190 D \u222a {p(x)}"}, {"heading": "9 if S = \u2205 then", "text": "10 L \u2190 L \u222a\n{ head(r) \u2190 \u2227 p(x)\u2208body+(r) pn(x)\n\u2227 \u2227\nl\u2208body(r)\\body+(r) l\n}\n11 return L\nAlgorithm 2: Prepare Components\nindicate new, old, and all atoms belonging to the current materialization of the Herbrand base. In turn, they are used in the course of semi-naive database evaluation to avoid duplicate work when grounding a component w.r.t. an expanding Herbrand base.\nThe loop in Lines 3-10 iterates over the rules in the component at hand. Each such rule r is expanded into a set of rules (loop in Lines 6-8) w.r.t. the recursive atoms in its body (Line 5). In the first row of Line 7, predicate names of recursive atoms already considered (set D) receive subscript o, and the predicate name of the recursive atom p(x) receives subscript n. In the second row, the recursive atoms not yet considered as well as non-recursive atoms of the positive body receive subscript a. Finally, in the third row, the remaining body literals are kept unmodified. If there are no recursive atoms (Line 9), then subscript n is added to all positive body elements (first row of Line 10). As in the case with recursive atoms, the remaining body literals are kept unmodified (second row).\nThe result of preparing all components of the dependency graph in Figure 2 is given in Figure 3. All rules but r8 contain only non-recursive positive body literals, which are adorned with subscript n. Unlike this, the non-recursive positive body literal path(X,Y ) in r8 is adorned with a, while only the recursive one, reach(X), receives subscript n. Since there is only one recursive body atom, only one rule is generated."}, {"heading": "3.3 Grounding Rules", "text": "The rule grounding algorithm relies upon two auxiliary functions. First, function order returns a safe body order of a rule body.12 A safe body order of a body {b1, . . . , bn} is a tuple (b1, . . . , bn) such that {b1, . . . , bi} is safe for each 1 \u2264 i \u2264 n. For example,\n12 The runtime of instantiation algorithms is sensitive to the chosen body order. In the context of ASP, heuristics for ordering body literals have been studied in [11].\n(p(X),\u223cq(X)) is a safe body order, while (\u223cq(X), p(X)) is not. Second, given a symbolic atom a, a substitution \u03c3, and a set A of ground atoms, function matches(a, \u03c3,A) returns the set of matches for a in A w.r.t. \u03c3. A match is a \u2286-minimal substitution \u03c3\u2032 such that a\u03c3\u2032 \u2208 A and \u03c3 \u2286 \u03c3\u2032. For instance, matches(p(X,Y ), {Y 7\u2192 a}, {p(a, a), p(b, b), p(c, a)}) yields {X 7\u2192 a, Y 7\u2192 a} and {X 7\u2192 c, Y 7\u2192 a}.\nWith both functions at hand, we assemble the basic algorithm GroundRule for grounding individual rules in Algorithm 3. Note that the original rule r\u2032 along with its marking \u2020 can be ignored in our context; they are only relevant when treating aggregates in Section 4.13 The algorithm proceeds along the safe body order determined in Line 20. If no body literals remain, a ground rule is generated in Line 7 provided that its head is not among the established facts. Moreover, if the rule in focus has become a fact, its head is added to Af in Line 8. The remainder constitutes a case analysis upon the type of the left-most body literal. If b1 is a positive body literal, an instance of b1 is added in turn to the (partial) ground body B for each match of b1. However, this is only done if the literal is not marked and the instance does not yet belong to the established facts. If b1 is a negative body literal, the instance obtained by applying the current substitution is added to the ground body. Again, this is only done if the literal is not marked, and the literal is recursive or there is already a derivation for it. Substitutions where the instance is a fact are skipped altogether. Finally, comparison literals are directly evaluated and rule instantiation is only pursued if the test was successful.\nFor illustration, we trace in Figure 4 the application of GroundRule to rule r1, viz. \u2018omit(X,Y ) \u2190 edgen(X,Y )\u2227\u223cpath(X,Y )\u2019, from Figure 3. Figure 4 also gives\n13 This is the rule before the application of function Prepare. That is, the positive body literals of r\u2032 are free of subscripts o, n, and a. The conditions r\u2032 6 \u2020 p(x) and r\u2032 6 \u2020 b1 in Line 11 or 15, respectively, are tautological in this section.\nthe contents of the respective sets of atoms (when tackling the very first component in Figure 3). The header in Figure 4 contains the ordered body followed by the rule head. Starting with the first positive body literal edgen(X,Y ) results in eight distinct matches of edge(X,Y ) in An. The atoms resulting from a set of matches are connected with undirected edges in Figure 4. Note that none of the instances of edge(X,Y ) is added to\n1 function Ground(P,Af) 2 (Pg, Aa) \u2190 (\u2205, Af) 3 foreach (C,Ar) in Analyze(P ) do 4 (An, Ao) \u2190 (Aa, \u2205) 5 repeat 6 A\u2206 \u2190 \u2205 7 foreach r in Prepare(C,Ar) do 8 (P \u2032g, Af) \u2190 GroundRule(r,Ar, An, Ao, Aa, Af) 9 (A\u2206, Pg) \u2190 (A\u2206 \u222a {head(rg) | rg \u2208 P \u2032 g}, Pg \u222a P \u2032 g)\n10 (An, Ao, Aa) \u2190 (A\u2206 \\ Aa, Aa, A\u2206 \u222aAa) 11 until An = \u2205 or {r \u2208 C | body+(r) \u2229Ar 6= \u2205} = \u2205\n12 return Pg\nAlgorithm 4: Grounding Logic Programs\nthe (empty) body, since they are all found to be facts. Looking at the trace for the first match, we observe that GroundRule\u2019 is next called with the empty body, the singleton (\u223cpath(X,Y )), and substitution {X 7\u2192 a, Y 7\u2192 b}. Given that the atom path(a, b) is not a fact and recursive, no simplifications apply, as indicated by underlining, and the instance is added to the body. The following call with body {\u223cpath(a, b)}, the empty tuple, and the same substitution results in the ground rule \u2018omit(a, b) \u2190 \u223cpath(a, b)\u2019. Analogously, the other six matches result in further instances of r1."}, {"heading": "3.4 Grounding Logic Programs", "text": "The above functions are put together in Algorithm 4 for grounding entire (normal) logic programs. The function Ground takes a partition of a program into genuine rules P and atoms Af stemming from facts, and returns (upon termination) a set of ground instantiated rules Pg. The latter is incrementally constructed by following the topological order of components determined by Analyze. Then, in turn, each adorned rule in the prepared component is instantiated via GroundRule. The loop in Lines 5-11 is executed only once whenever the component is free of recursive positive body literals, and otherwise until no new (head) atoms are forthcoming. This is accomplished by manipulating the following sets of atoms:\n\u2013 Aa the set of all relevant atoms up to the current grounding step, \u2013 An \u2286 Aa the set of atoms atoms newly instantiated in the previous grounding step, \u2013 Ao = Aa \\An the set of atoms that are not new w.r.t. the previous step, \u2013 A\u2206 the set of atoms resulting from the current grounding step, and \u2013 Af \u2286 Aa \u222a A\u2206 the set of atoms having a corresponding fact in Pg.\nThe set Aa comprises the relevant Herbrand base when the algorithm terminates. For illustration, let us trace Ground in Figure 5 when grounding the last but one component from Figure 3. To be more precise, this deals with the prepared version of Component7,1 containing rule r8 only, viz. \u2018reach(Y ) \u2190 reachn(X) \u2227 patha(X,Y )\u2019. The recursive nature of this rule results in three iterations of the loop in Lines 5-11.\nAccordingly, we index the atom sets in Figure 5 to reflect their state in the respective iteration. Moreover, we only provide the parts of Ao, An, Aa, and Af that are relevant to grounding r8. Otherwise, conventions follow the ones in Figure 4.\nAt the first iteration, the atom reach(a) (obtained from grounding Component6,1) is used to obtain rule instances\nreach(b) \u2190 path(a, b)\nreach(c) \u2190 path(a, c)\nNote that reach(a) is removed from both rule bodies because it belongs to the established facts. Moreover, this iteration yields the new atoms reach(b) and reach(c), which are used in the next iteration to obtain the four rule instances\nreach(c) \u2190 reach(b) \u2227 path(b, c)\nreach(d) \u2190 reach(b) \u2227 path(b, d)\nreach(a) \u2190 reach(c) \u2227 path(c, a)\nreach(d) \u2190 reach(c) \u2227 path(c, d)\nUnlike above, no simplifications can be performed because no facts are involved. The iteration brings about a single new atom, reach(d), which yields the rule instance\nreach(a) \u2190 reach(d) \u2227 path(d, a)\n1 function Rewrite(P ) 2 Q \u2190 \u2205 // in the loop below, \u22c4 \u2208 {\u01eb,\u223c} stands for the sign of the aggregate literal 3 foreach r in P with a \u2208 body(r), a = \u22c4\u03b1{t1 : L1; . . . ; tn : Ln} \u227a s do 4 let i be a unique identifier 5 x be the global variables in a 6 B(L) = \u2227 l\u2208body(r)\\L,l is a simple literal l \u2020 7 replace occurrence a in P with \u22c4aggr i(x)\n8\nQ \u2190 Q \u222a {accu i(x,neutral ) \u2190 \u03b1\u0302(\u2205) \u227a s \u2227 B(\u2205)}\n\u222a {accu i(x, tuple(tj)) \u2190 \u2227\nl\u2208Lj l \u2227B(Lj) | 1 \u2264 j \u2264 n}\n\u222a {aggr i(x) \u2190 accu i(x, _) \u2227 \u22a5}"}, {"heading": "9 return P \u222aQ", "text": "Algorithm 5: Rewrite Logic Programs\nThis iteration produces no new atoms and ends the instantiation of Component7,1. The other components are grounded analogously but within a single iteration due to their lack of recursive positive body literals. This is enforced by the second stop criterion in Line 11 of Algorithm 4."}, {"heading": "4 Grounding Recursive Aggregates", "text": "Having laid the foundations of grounding normal logic programs, we now continue with the treatment of recursive aggregates. The idea is to translate aggregate atoms into normal logic programs, roughly one rule per aggregate element, and then to reuse the basic grounding machinery as much as possible. In addition, some aggregate-specific propagation takes place. At the end, the resulting aggregate instances are re-assembled from the corresponding rules."}, {"heading": "4.1 Rewriting Logic Programs with Aggregates", "text": "The function Rewrite given in Algorithm 5 takes as input a logic program (possibly with recursive aggregates) and rewrites it into a normal logic program with additional predicates capturing aggregates and aggregate elements.14\nEach aggregate occurrence is replaced with an atom of form aggr i(x) in Line 7, where i is a unique identifier associated with the aggregate occurrence and x are the global variables occurring in the aggregate. The idea is that each atom over predicate aggr i in the grounding of the rewriting corresponds to a ground aggregate, which is substituted for the atom in the final grounding.\nTo represent aggregate elements like tj : Lj , auxiliary rules defining atoms of form accu i(x, t) are added in Line 8, where x are the global variables as above and t is the tuple that is aggregated (or the special constant neutral). Here, the idea is to inspect\n14 We assume that predicates aggr i and accu i are not used elsewhere in the program.\nthe grounding for rules with atoms over accu i in the head. If enough such atoms are accumulated to satisfy an aggregate, then corresponding atoms over aggr i are added to the Herbrand base to further ground the program.\nThe first rule in Line 8 handles the special case that the aggregate is satisfied for an empty set of tuples (e.g., anti-monotone aggregates like sum+{t : L} \u2264 s). Its body contains a comparison literal that checks whether the empty aggregate is satisfied. Furthermore, we have to make sure that the rule is safe so that it can be instantiated. For this purpose, all simple literals of the rule in which the aggregate i occurs are added to the rule body (via function B). Hence, if the original rule is safe, the auxiliary rule is also safe because global variables are bound by positive symbolic literals only. Furthermore, literals responsible for binding global variables are marked (via \u2020).\nThe second set of rules in Line 8 is in charge of accumulating tuples of aggregate elements. The rule body contains the literals of the condition of the aggregate element as well as marked literals necessary for ensuring the rule\u2019s safety. Remember that the resulting ground rules represent ground aggregate atoms, where the marking is used to distinguish literals not belonging to the conditions of reconstituted aggregate elements.\nFinally, one last rule is added in Line 8 for ensuring that the dependencies induced by the aggregate are kept intact. Since this rule contains \u22a5, it never produces instances though.\nThe result of rewriting the company controls encoding from Table 1 is given in Table 5. The global variables in the (single) aggregate are X and Y , which occur first in all atoms over aggr 1/2 and accu1/3. Since the empty aggregate is not satisfied, the rule accumulating the neutral tuple never produces any instances (and could in principle be dropped from the rewriting)."}, {"heading": "4.2 Analyzing and Preparing Logic Programs with Aggregates", "text": "Figure 6 captures the result of function Analyze with Prepare called for each component of the rewritten company controls encoding in Table 5. The rules in Component1,1 and Component2,1 depend on facts only, and thus both induce a singleton component. Component3,1 contains the remaining rules. The aggregate of the company controls encoding is recursive in this component in view of the atom controls(X,Z) in its second aggregate element. Note that not all aggregate elements are involved in this recursion, given that direct shares are accumulated via the rule in Component2,1.\n1 function Propagate(I, r,Aa, Af) 2 A\u2206 \u2190 \u2205 3 foreach i, g where i \u2208 I and accu i(g, t) \u2208 Aa do 4 let Tf = {t | accu i(g, tuple(t)) \u2208 Af , t is relevant for \u03b1i} 5 Ta = {t | accu i(g, tuple(t)) \u2208 Aa, t is relevant for \u03b1i} 6 if exists Tf \u2286 T \u2286 Ta where \u03b1\u0302i(T ) \u227ai (si) xi g is true then 7 if (aggregate i is monotone and \u03b1\u0302i(Tf) \u227ai (si) xi g ) 8 or (not r and Ta \\ Tf = \u2205) then 9 Af \u2190 Af \u222a {aggr i(g)}\n10 A\u2206 \u2190 A\u2206 \u222a {aggr i(g)}\n11 return (A\u2206, Af)\nAlgorithm 6: Propagation of Aggregates"}, {"heading": "4.3 Propagating Aggregates", "text": "The function Propagate inspects the partial grounding of an aggregate instance in view of its grounded aggregate elements. To this end, it checks atoms over predicate accu i obtained during grounding. The loop in Lines 3-10 iterates over the given aggregate indices I and tuples of global variables stored in atoms over predicate accui appearing among the atoms in Aa. Whenever there are enough tuples captured by such atoms to satisfy the corresponding aggregate, Propagate adds atoms over predicate aggr i to A\u2206 for further instantiation. While Line 4 collects tuples that are necessarily accumulated by the aggregate function, Line 5 gathers tuples whose conditions can possibly hold. Also note that the relevance check skips tuples that do not change the result of an aggregate function.15 For sum aggregates, this amounts to excluding zeroweight tuples by stipulating weight(t) 6= 0. Given these sets of tuples, Line 6 checks whether the aggregate can be satisfied using the tuples accumulated so far. For sum ag-\n15 For non-recursive aggregates, where the flag r is false, Line 8 checks whether Ta \\Tf is empty. This is why only relevant tuples are gathered.\n1 function Assemble(Pg) 2 foreach aggr i(g) occurring in Pg do // below, body(r) is assumed to convert to a tuple of literals 3 let E = {t : body(r) | r \u2208 Pg, head(r) = accu i(g, tuple(t))} 4 replace all occurrences of aggr i(g) in Pg with \u03b1i(E) \u227ai (si) xi g\n5 remove all rules with atoms over accu i in the head from Pg 6 return Pg\nAlgorithm 7: Assembling Aggregates\ngregates, this can be tested by adding up the weights of factual tuples and, on the one hand, the negative weights to obtain a minimum, min , or the positive weights to obtain a maximum, max . Then, depending on the relation, the aggregate is satisfiable\n\u2013 if max \u227a (si)xig is true for \u227a \u2208 {\u2265, >}, \u2013 if min \u227a (si)xig is true for \u227a \u2208 {\u2264, <}, or \u2013 if min \u227a (si)xig or max \u227a (si) xi g is true for \u227a \u2208 {6=}.\nIf the test in Line 6 succeeds, the ground aggregate atom is added to the new atoms in Line 10. In addition, given a non-recursive or monotone aggregate, the corresponding ground aggregate atom is added to Af whenever the aggregate is found to be true. At this point, a non-recursive aggregate is true, if all its elements are facts (Line 8), and a monotone aggregate is true, if enough facts to satisfy the aggregate have been accumulated (Line 7). Finally, the sets of new and factual atoms are returned in Line 11."}, {"heading": "4.4 Assembling Aggregates", "text": "After Rewrite has decomposed aggregate atoms into normal program rules, Assemble given in Algorithm 7 reconstructs their grounded counterparts from the rewritten ground program. That is, all occurrences of atoms of form aggr i(g) are replaced by their corresponding aggregates. In doing so, the aggregate elements are reconstructed from rules with head atoms accu i(g, tuple(t)) in Line 3, where an element consists of the term tuple t along with the condition expressed by the rule body.16 The actual replacement takes place in Line 4, followed by the deletion of obsolete rules in Line 5. Finally, the reconstructed ground program is returned in Line 6."}, {"heading": "4.5 Grounding Logic Programs with Aggregates", "text": "Algorithm 8 extends the Ground function in Algorithm 4 to logic program with aggregates. To this end, the extended Ground function uses algorithms Rewrite, Propagate, and Assemble from the previous subsections. The changes in the algorithm are highlighted with a gray background, while other parts are left untouched.\nThe first change is in Line 3, where function Rewrite is called to turn the logic program P into a normal logic program before calling Analyze. Then, Lines 4 and 5\n16 Recall that marked literals, added for safety, are stripped off by GroundRule in Algorithm 3.\n1 function Ground(P,Af) 2 (Pg, Aa) \u2190 (\u2205, Af)\n3 foreach (C,Ar) in Analyze(Rewrite(P )) do 4 let I = {i | aggr i occurs in a rule head in C} 5 Ir = {i | r \u2208 C,head(r) = accu i(x, t), a \u2208 body +(r) \u2229Ar, r 6 \u2020 a} 6 (An, Ao) \u2190 (Aa, \u2205) 7 repeat 8 A\u2206 \u2190 \u2205 9 foreach r in Prepare(C,Ar) do\n10 (P \u2032g, Af) \u2190 GroundRule(r,Ar, An, Ao, Aa, Af) 11 (A\u2206, Pg) \u2190 (A\u2206 \u222a {head(rg) | rg \u2208 P \u2032 g}, Pg \u222a P \u2032 g)\n12 if A\u2206 \u2286 Aa then 13 (A\u2206, Af) \u2190 Propagate(I \\ Ir, false, Aa, Af)\n14 if A\u2206 \u2286 Aa then 15 (A\u2206, Af) \u2190 Propagate(I \u2229 Ir, true, Aa, Af)\n16 (An, Ao, Aa) \u2190 (A\u2206 \\ Aa, Aa, A\u2206 \u222aAa) 17 until An = \u2205 or {r \u2208 C | body+(r) \u2229Ar 6= \u2205} = \u2205\n18 return Assemble(Pg)\nAlgorithm 8: Grounding Logic Programs with Aggregates\nare added, just before the loop in charge of grounding each component. Here, all aggregate indices that have to be propagated during the instantiation of a component are collected. First, all indices for which a rule with aggr i in the head appears in the component are gathered in I . Remember that these rules do not contribute instances because \u22a5 belongs to their bodies (cf. third row in Line 8 of Algorithm 5). Instead, Propagate is adding atoms over aggr i to A\u2206. Second, in Line 5, aggregate indices associated with recursive aggregates are collected, where the (positive) recursion involves some aggregate element indicated by a rule with head atom accui(x, t), yet without considering the auxiliary body part marked with \u2020.\nThe collected indices are in Lines 12-15 used to propagate the corresponding aggregates in the current component. Propagation of aggregates is triggered whenever no more new atoms are obtained in the grounding loop in Lines 9-11. First, nonrecursive aggregates I \\ Ir are instantiated. At this point, if there is at least one ground atom of form accui(g, t) \u2208 Aa, all aggregate elements of the corresponding aggregate (uniquely determined by the terms g for global variables) have been gathered. The aggregate can thus be propagated, and function Propagate can apply additional simplifications (cf. Line 8 in Algorithm 6). Afterwards, recursive aggregates I \u2229 Ir are propagated in Line 15. In this case, we cannot assume that all aggregate elements have already been accumulated, and propagation can thus not use all of the simplifications applicable to non-recursive aggregates, where the distinction is implemented by setting the second argument of Propagate to true. Finally, in Line 18, aggregates are reconstructed from the intermediate grounding by calling function Assemble.\nFigure 7 traces the whole grounding process of the rewritten company controls encoding given in Figure 6. The grounding of each component is separated by a horizontal\ndouble line, and the instantiation of a component is shown analogously to Figure 5. Due to lack of space, we refrain from giving sets Ar, An, Ao, and Aa. For each component, indicated by its number on the right, the contained rules are listed first, followed by grounding iterations for the component in focus. Each iteration is separated by a solid line and indexed with an iteration number on the right, where (instances of) the three rules in Component3,1 are separated by dashed lines. The symbol \u00d7 indicates that a body literal does not match, which corresponds to the case that the GroundRule\u2019 function in Algorithm 3 backtracks.\nThe grounding of Component1,1 produces no rule instances because the comparison atom 0 > 50 is false. By putting this literal first in the safe body order, the remaining rule body can be completely ignored. Next, in the grounding of Component2,1, direct shares given by facts over owns /3 are accumulated, where the obtained atoms over accu1/3 are classified as facts as well. Then, we trace the grounding of Component3,1. In the first iteration, none of the rules produces instances because there are no atoms over controls /2 and aggr1/2 yet. Hence, aggregate propagation is triggered, resulting in aggregate atoms aggr 1(c1, c2) and aggr1(c3, c4), for which enough shares have been accumulated upon grounding Component2,1. Note that, since the aggregate is monotone, both atoms are established as facts. In the second iteration, the newly obtained aggregate atoms are used to instantiate the second rule of the component, leading to new atoms over controls /2. Observe that, by putting aggr 1(X,Y ) first in the safe body order, GroundRule can instantiate the rule without backtracking. In the third iteration, the newly obtained atoms over controls /2 yield accu1(c1, c3, t(35, c2)) via an instance of the third rule of the component, which in turn leads to the aggregate atom aggr 1(c1, c3). The following iterations proceed in a similar fashion until no new tuples are accumulated and the grounding loop terminates. Confined to the original predicate controls /2, the instantiation generates four atoms, controls(c1, c2), controls(c3, c4), controls(c1, c3), and controls(c1, c4), all of which are produced as facts.\nNote that the utilized safe body order affects the amount of backtracking in rule instantiation [11]. One particular strategy used in gringo is to prefer recursive atoms with subscript n when ordering a rule body. As seen in the grounding of Component3,1 above, this helps to avoid backtracking upon generating new rule instances. Furthermore, for the company controls encoding, simplifications ensure that the program is evaluated to facts. In general, this is guaranteed for programs with stratified negation and monotone aggregates only [12]."}, {"heading": "5 Discussion", "text": "We presented an algorithmic framework for grounding logic programs based on semi-naive database evaluation techniques. Our framework, which is implemented in gringo series 4, constitutes the first approach capturing full-fledged aggregates under Ferraris\u2019 semantics [13,6]. While semi-naive evaluation techniques trace back to the field of database systems [3,4], their introduction to grounding in ASP was pioneered by the dlv system [14], laying out basic semi-naive grounding algorithms (cf. [1]) similar to those in Section 3. Given this proximity, our grounding techniques for handling recursive aggregates could be adopted within dlv, which is so far restricted to strati-\nfied aggregates. Other grounding approaches are pursued in gidl [15], lparse [16], and earlier versions of gringo [17,18,2]. The latter two also support recursive (convex) aggregates but are limited by the necessity to bind non-global variables by domain predicates, given that programs have to be \u03c9- [16] or \u03bb-restricted [17], respectively. Unlike this, our approach merely relies on the safety condition and no further restriction is imposed on the input language.\nRegarding the implementation, our approach aims at reusing existing grounding techniques for (normal) logic programs. To this end, programs with aggregates are rewritten, and conventional semi-naive evaluation is extended with a propagation step for aggregates. Eventually, ground aggregates are reconstructed from the obtained rule instances in a post-processing step. While the present paper considered sum and sum+ aggregates only, our approach is applicable to any aggregate function. In fact, count , min , and max aggregates are also supported in gringo series 4, and it is easily amenable to further aggregates (by extending the Propagate function).\nAcknowledgments This work was funded by AoF (grant 251170), DFG (grants SCHA 550/8 and 550/9), as well as DAAD and AoF (joint project 57071677/ 279121)."}], "references": [{"title": "Advances in gringo series 3", "author": ["M. Gebser", "R. Kaminski", "A. K\u00f6nig", "T. Schaub"], "venue": "In Delgrande, J., Faber, W., eds.: Proceedings of the Eleventh International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR\u201911). Springer-Verlag", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2011}, {"title": "Principles of Database and Knowledge-Base Systems", "author": ["J. Ullman"], "venue": "Computer Science Press", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1988}, {"title": "Foundations of Databases", "author": ["S. Abiteboul", "R. Hull", "V. Vianu"], "venue": "Addison-Wesley", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1995}, {"title": "The magic of duplicates and aggregates", "author": ["I. Mumick", "H. Pirahesh", "R. Ramakrishnan"], "venue": "In McLeod, D., Sacks-Davis, R., Schek, H., eds.: Proceedings of the Sixteenth International Conference on Very Large Data Bases (VLDB\u201990). Morgan Kaufmann Publishers", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1990}, {"title": "Abstract Gringo", "author": ["M. Gebser", "A. Harrison", "R. Kaminski", "V. Lifschitz", "T. Schaub"], "venue": "Theory and Practice of Logic Programming 15(4-5)", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and Artificial Intelligence 25(3-4)", "citeRegEx": "8", "shortCiteRegEx": null, "year": 1999}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V. Marek", "M. Truszczy\u0144ski"], "venue": "In Apt, K., Marek, V., Truszczy\u0144ski, M., Warren, D., eds.: The Logic Programming Paradigm: A 25-Year Perspective. Springer-Verlag", "citeRegEx": "9", "shortCiteRegEx": null, "year": 1999}, {"title": "Answer Set Solving in Practice", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub"], "venue": "Morgan and Claypool Publishers", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2012}, {"title": "Unfounded sets and well-founded semantics of answer set programs with aggregates", "author": ["M. Alviano", "F. Calimeri", "W. Faber", "N. Leone", "S. Perri"], "venue": "Journal of Artificial Intelligence Research 42", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2011}, {"title": "Logic programs with propositional connectives and aggregates", "author": ["P. Ferraris"], "venue": "ACM Transactions on Computational Logic 12(4)", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2011}, {"title": "The DLV system for knowledge representation and reasoning", "author": ["N. Leone", "G. Pfeifer", "W. Faber", "T. Eiter", "G. Gottlob", "S. Perri", "F. Scarcello"], "venue": "ACM Transactions on Computational Logic 7(3)", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2006}, {"title": "Grounding FO and FO(ID) with bounds", "author": ["J. Wittocx", "M. Mari\u00ebn", "M. Denecker"], "venue": "Journal of Artificial Intelligence Research 38", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Gringo: A new grounder for answer set programming", "author": ["M. Gebser", "T. Schaub", "S. Thiele"], "venue": "In Baral, C., Brewka, G., Schlipf, J., eds.: Proceedings of the Ninth International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR\u201907). Springer-Verlag", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2007}, {"title": "On the input language of ASP grounder gringo", "author": ["M. Gebser", "R. Kaminski", "M. Ostrowski", "T. Schaub", "S. Thiele"], "venue": "In Erdem, E., Lin, F., Schaub, T., eds.: Proceedings of the Tenth International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR\u201909). Springer-Verlag", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2009}, {"title": "Correct Reasoning: Essays on Logic-Based AI in Honour of Vladimir Lifschitz", "author": ["E. Erdem", "J. Lee", "Y. Lierler", "D. Pearce", "eds."], "venue": "Springer-Verlag", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2012}, {"title": "Proceedings of the Sixth International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR\u201901)", "author": ["T. Eiter", "W. Faber", "M. Truszczy\u0144ski", "eds."], "venue": "Springer-Verlag", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2001}], "referenceMentions": [{"referenceID": 0, "context": "Modern grounders like (the one in) dlv [1] or gringo [2] are based on semi-naive database evaluation techniques [3,4] for avoiding duplicate work during grounding.", "startOffset": 53, "endOffset": 56}, {"referenceID": 1, "context": "Modern grounders like (the one in) dlv [1] or gringo [2] are based on semi-naive database evaluation techniques [3,4] for avoiding duplicate work during grounding.", "startOffset": 112, "endOffset": 117}, {"referenceID": 2, "context": "Modern grounders like (the one in) dlv [1] or gringo [2] are based on semi-naive database evaluation techniques [3,4] for avoiding duplicate work during grounding.", "startOffset": 112, "endOffset": 117}, {"referenceID": 3, "context": "An example of such an aggregate is shown in Table 1, giving an encoding of the Company Controls Problem [5]: A company X controls a company Y , if X directly or indirectly controls more than 50% of the shares of Y .", "startOffset": 104, "endOffset": 107}, {"referenceID": 4, "context": "Section 2 starts with recalling the formal preliminaries from [6].", "startOffset": 62, "endOffset": 65}, {"referenceID": 4, "context": "This section recalls the formal preliminaries regarding the syntax and semantics of gringo\u2019s input language, developed in [6].", "startOffset": 122, "endOffset": 125}, {"referenceID": 4, "context": "\u2013 in a simple literal, if it occurs in the literal \u2013 in an aggregate literal, if it occurs in the guard \u2013 in a rule, if it is global in the head or a body literal 7 gringo as well as its semantic underpinnings in [6] also allow for double negated literals of form \u223c\u223ca.", "startOffset": 213, "endOffset": 216}, {"referenceID": 5, "context": "The resulting Hamiltonian cycle is expressed through instances of predicate path/2; a detailed discussion of such encodings can be found in [8,9,10].", "startOffset": 140, "endOffset": 148}, {"referenceID": 6, "context": "The resulting Hamiltonian cycle is expressed through instances of predicate path/2; a detailed discussion of such encodings can be found in [8,9,10].", "startOffset": 140, "endOffset": 148}, {"referenceID": 7, "context": "The resulting Hamiltonian cycle is expressed through instances of predicate path/2; a detailed discussion of such encodings can be found in [8,9,10].", "startOffset": 140, "endOffset": 148}, {"referenceID": 8, "context": "In general, this is guaranteed for programs with stratified negation and monotone aggregates only [12].", "startOffset": 98, "endOffset": 102}, {"referenceID": 9, "context": "Our framework, which is implemented in gringo series 4, constitutes the first approach capturing full-fledged aggregates under Ferraris\u2019 semantics [13,6].", "startOffset": 147, "endOffset": 153}, {"referenceID": 4, "context": "Our framework, which is implemented in gringo series 4, constitutes the first approach capturing full-fledged aggregates under Ferraris\u2019 semantics [13,6].", "startOffset": 147, "endOffset": 153}, {"referenceID": 1, "context": "While semi-naive evaluation techniques trace back to the field of database systems [3,4], their introduction to grounding in ASP was pioneered by the dlv system [14], laying out basic semi-naive grounding algorithms (cf.", "startOffset": 83, "endOffset": 88}, {"referenceID": 2, "context": "While semi-naive evaluation techniques trace back to the field of database systems [3,4], their introduction to grounding in ASP was pioneered by the dlv system [14], laying out basic semi-naive grounding algorithms (cf.", "startOffset": 83, "endOffset": 88}, {"referenceID": 10, "context": "While semi-naive evaluation techniques trace back to the field of database systems [3,4], their introduction to grounding in ASP was pioneered by the dlv system [14], laying out basic semi-naive grounding algorithms (cf.", "startOffset": 161, "endOffset": 165}, {"referenceID": 11, "context": "Other grounding approaches are pursued in gidl [15], lparse [16], and earlier versions of gringo [17,18,2].", "startOffset": 47, "endOffset": 51}, {"referenceID": 12, "context": "Other grounding approaches are pursued in gidl [15], lparse [16], and earlier versions of gringo [17,18,2].", "startOffset": 97, "endOffset": 106}, {"referenceID": 13, "context": "Other grounding approaches are pursued in gidl [15], lparse [16], and earlier versions of gringo [17,18,2].", "startOffset": 97, "endOffset": 106}, {"referenceID": 0, "context": "Other grounding approaches are pursued in gidl [15], lparse [16], and earlier versions of gringo [17,18,2].", "startOffset": 97, "endOffset": 106}, {"referenceID": 12, "context": "The latter two also support recursive (convex) aggregates but are limited by the necessity to bind non-global variables by domain predicates, given that programs have to be \u03c9- [16] or \u03bb-restricted [17], respectively.", "startOffset": 197, "endOffset": 201}], "year": 2016, "abstractText": "Problem solving in Answer Set Programming consists of two steps, a first grounding phase, systematically replacing all variables by terms, and a second solving phase computing the stable models of the obtained ground program. An intricate part of both phases is the treatment of aggregates, which are popular language constructs that allow for expressing properties over sets. In this paper, we elaborate upon the treatment of aggregates during grounding in gringo series 4. Consequently, our approach is applicable to grounding based on semi-naive database evaluation techniques. In particular, we provide a series of algorithms detailing the treatment of recursive aggregates and illustrate this by a running example.", "creator": "LaTeX with hyperref package"}}}