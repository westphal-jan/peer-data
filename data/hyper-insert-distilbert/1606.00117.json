{"id": "1606.00117", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Jun-2016", "title": "Hardness of the Pricing Problem for Chains in Barter Exchanges", "abstract": "kidney exchange is a barter market approach where patients necessarily trade the willing but medically incompatible donors. these collateral trades overwhelmingly occur via cycles, where not each ordinary patient - donor loan pair sells both equally gives and inwardly receives almost a kidney, externally and via bond chains, which begin with to an altruistic donor who invariably does still not require a kidney donor in return. ( for logistical preference reasons, getting the maximum length of a reference cycle is typically limited mainly to a small numerical constant, while chains interactions can be much cheaper longer. given a statistical compatibility graph mesh of partial patient - donor pairs, functional altruists, and any feasible human potential transplants between three them, finding on even a maximum - confidence cardinality set of vertex - disjoint cycles and chains is np - hard. proves there otherwise has been insufficient much work activity on candidates developing provably algorithm optimal solvers that are efficient in practice. one adaptation of the popular leading prediction techniques has been branch and price, where column multiple generation procedure is used explicitly to incrementally bring counter cycles complexity and chains opening into question the optimization model organized on an ideal as - high needed basis. in particular, unfortunately only positive - price retail columns need to be frequently brought fast into the model. we prove that finding best a positive - price chain solution is currently np - 2 complete. conversely this shows some incorrectness estimation of two leading branch - add and - go price solvers that suggested polynomial - like time closed chain oriented pricing algorithms.", "histories": [["v1", "Wed, 1 Jun 2016 04:49:08 GMT  (78kb)", "http://arxiv.org/abs/1606.00117v1", null]], "reviews": [], "SUBJECTS": "cs.DS cs.AI", "authors": ["benjamin plaut", "john p dickerson", "tuomas sandholm"], "accepted": false, "id": "1606.00117"}, "pdf": {"name": "1606.00117.pdf", "metadata": {"source": "CRF", "title": "Hardness of the Pricing Problem for Chains in Barter Exchanges", "authors": ["Benjamin Plaut", "John P. Dickerson", "Tuomas Sandholm"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n60 6.\n00 11\n7v 1\n[ cs\n.D S]\n1 J\nun 2\n01 6\nKidney exchange is a barter market where patients trade willing but medically incompatible donors. These trades occur via cycles, where each patient-donor pair both gives and receives a kidney, and via chains, which begin with an altruistic donor who does not require a kidney in return. For logistical reasons, the maximum length of a cycle is typically limited to a small constant, while chains can be much longer. Given a compatibility graph of patient-donor pairs, altruists, and feasible potential transplants between them, finding even a maximumcardinality set of vertex-disjoint cycles and chains is NP-hard. There has been much work on developing provably optimal solvers that are efficient in practice. One of the leading techniques has been branch and price, where column generation is used to incrementally bring cycles and chains into the optimization model on an as-needed basis. In particular, only positive-price columns need to be brought into the model. We prove that finding a positive-price chain is NP-complete. This shows incorrectness of two leading branch-andprice solvers that suggested polynomial-time chain pricing algorithms.\nKeywords: kidney exchange, matching markets, integer programming, branch and price"}, {"heading": "1. Introduction", "text": "In barter markets, participants swap items for items rather than for money. Barter markets have been organized for many categories of items such as holiday home time, nurse shifts, used goods, and even shoes. Kidney exchange is an organized barter market where patients in need of a kidney trade their paired but incompatible donors with other participants in the exchange [1]. Mathematically, a kidney exchange is typically modeled as a directed compatibility graph G = (V,E). The set of vertices V is partitioned into P and A, where vertices in P represent patient-donor pairs and vertices in A represent altruistic donors, who enter the exchange without a paired patient. For each u, v \u2208 P , the edge (u, v) exists if the donor of pair u is compatible with the patient of pair v. Similarly, for each a \u2208 A and v \u2208 P , the edge (a, v) exists if altruist a is compatible with the patient of pair v. These edges may also have weights, representing the relative value of a potential transplant.\nGiven a compatibility graph G, the weighted clearing problem is to find a maximumweight vertex-disjoint set of cycles of length at most L and chains of length at most K. Even the maximum-cardinality clearing problem with L \u2265 3 is NP-hard [2]. In practice, L is limited to a small constant (typically L = 3) due to the logistical difficulty of arranging all transplants in a cycle simultaneously; however, due to the non-simultaneous execution of chains, K is often much greater than L\u2014and can even be allowed to grow with |V |.\nInteger programming techniques power optimal clearing engines in fielded kidney exchanges. A leading approach to solving these integer program models\u2014which can be quite large due to the O(|P |L) cycles and O(|A||P |K) chains in a compatibility graph\u2014is branch and price [2]. Branch and price [3] is a technique where only a subset of the columns (cycles and chains) are kept in the model, and promising columns are incrementally generated and added to the reduced model until optimality can be proven. Such promising columns are found by solving the pricing problem, which searches for at least one positive price column (i.e., variable) to add to the model\u2014or shows that none exist. Once no more positive price variables exist, optimality has been proven for that node in the branch-and-bound search tree, and the search can proceed further in the tree.\nQuickly solving the pricing problem at nodes in the search tree is important for overall runtime. Recently, it was shown that determining whether a positive price cycle exists can be solved in polynomial time [4, 5]. Both Glorie et al. [4] and Plaut et al. [5] also use a variant of their cycle-pricing algorithms for chains. In this paper, we show that not only are those latter algorithms incorrect, but the underlying problem\u2014finding a positive price chain\u2014is, in fact, NP-complete."}, {"heading": "2. The pricing problem in kidney exchange", "text": "We now formally define the pricing problem in the context of kidney exchange, but it applies to other barter markets as well. The pricing problem is to find at least one positive price cycle or chain, or show that none exist. The price of a cycle or chain c is \u2211\n(u,v)\u2208c w(u,v) \u2212 \u2211 v\u2208c \u03b4v, where w(u,v) is the weight of edge (u, v), and \u03b4v is the dual value of vertex v in the linear program relaxation. Glorie et al. [4] and Plaut et al. [5] show how determining whether a positive price cycle in the compatibility graph G = (V,E) exists is equivalent to finding a negative weight cycle in a reduced graph G\u2032 = (V,E \u2032), where each edge e\u2032 = (u, v) \u2208 E \u2032 exists if and only if (u, v) \u2208 E, and e\u2032 has reduced weight r(u,v) = \u03b4v \u2212w(u,v).\nA similar equivalence holds for chains. We must be careful, however, since the number of vertices in a chain exceeds the number of edges by 1. We now define r(u,v) as follows:\nr(u,v) =\n{\n\u03b4v \u2212 w(u,v) u \u2208 P\n\u03b4u + \u03b4v \u2212 w(u,v) u \u2208 A\nSince an outgoing edge from an altruist will only ever be used in a chain, this ensures that a chain has positive price in G if and only if it has negative weight in the reduced graph G\u2032."}, {"heading": "3. Counterexample to two prior algorithms", "text": "In this section, we provide counterexamples to the pricing algorithms of both Glorie et al. [4] and Plaut et al. [5]. Both previous algorithms use Bellman-Ford-style search in the reduced graph, initiated from each altruist as the source, to find negative-weight chains. Ideally, we would like to find the shortest paths using each vertex at most once, but this is NP-hard in the presence of negative cycles [5]. However, we need not find the shortest paths\nbeginning at each altruist: we only need to determine whether there exists any negative path starting at any altruist.\nIn the presence of negative cycles, traditional Bellman-Ford may generate paths with internal loops, which are invalid in our context. Plaut et al. [5] handle this by preventing Bellman-Ford from looping during execution. As a result, the generated paths may not be the shortest, and a given negative chain may not be found.\nFor the version of the algorithm for cycles, Plaut et al. [5] show that although there may be negative cycles that are not found, at least one negative cycle will be found, if any exist. Their proof of the version of the algorithm for chains is incorrect in general, however, as it implicitly assumes that the chain length cap and cycle length cap are equal.\nPlaut et al. [5] gave a counterexample to the algorithm of Glorie et al. [4]. Figure 1 gives a counterexample to the algorithm of Plaut et al. [5]; this is also a counterexample to the original algorithm due to Glorie et al. [4].\nFor L = 3 and K = 5, there are no valid negative cycles in the reduced graph, and there is a single valid negative chain in the graph: (a, p5, p2, p3, p4, p1). Although (p1, p2, p3, p4) is a cycle with negative weight, it exceeds the cycle length cap of L = 3, and thus is invalid.\nIn the second iteration of the algorithm due to Plaut et al. [5], vertex p2 would store as its most promising predecessor the path (a, p1, p2) with weight w [(a, p1, p2)] = 0, instead of (a, p5, p2) with less promising weight w [(a, p5, p2)] = 1. However, this causes the algorithm to miss the overall negative chain that would be found otherwise at iteration 5, since it cannot reuse vertex p1 (and thus cannot use the sole negative-weight edge with sink p1). Critically, even though the path (a, p5, p2) was not promising at an earlier iteration, following it instead of the more immediately promising (a, p1, p2) would have led to a negative-weight chain\u2014in this case, the only negative-weight chain. The initial algorithm due to Glorie et al. [4] would also incorrectly return that no negative-weight chains exist, by similar reasoning.\nThis shows a correctness error in both Glorie et al. [4] and Plaut et al. [5]. In the next section, we show that in general such polynomial-time approaches are hopeless: determining whether a positive price chain exists is NP-complete."}, {"heading": "4. Main result", "text": "We define the negative chain problem as follows: given a directed graph G = (V,E), where V = P \u222aA, is there a path (using each vertex at most once) of negative weight, using\nat most K edges, and starting at some vertex a \u2208 A? We call such a path a negative chain.\nTheorem 1. Deciding whether a negative chain exists is NP-complete.\nProof. The negative chain problem is trivially in NP: simply sum the edge weights in a proposed path and check its sign. To show NP-hardness, we reduce from the directed Hamiltonian path problem. Given some graph H = (V,E), the directed Hamiltonian path problem asks whether there exists a directed path that visits each vertex exactly once. Let n = |V |. Construct the graph G as follows: set we = \u22121 for each e \u2208 E, and add a vertex a with an edge (a, v) with w(a,v) = n\u2212 2 for each v \u2208 V . Figure 2 gives an example of the construction of the graph G for the proof. Let P = V , A = {a}, and K = n.\nSuppose h is a Hamiltonian path in H starting at vi. Let c = (a, vi) \u222a h. Since h has exactly n \u2212 1 edges, c contains n edges, thereby satisfying the length constraint. Since h visits each vi exactly once and never visits a, c visits each vertex in G at most once. Finally, since h has weight 1 \u2212 n, c has weight n\u2212 2 + 1 \u2212 n = \u22121. Therefore c is a negative chain in G.\nSuppose c is a negative chain in G. Then c must begin at a, so we can write c = (a, vi)\u222ah, for some vi \u2208 V and path h. Let m be the number of edges in h. Then wc = n\u22122\u2212m. Since wc < 0, we have m > n\u2212 2. Since c can use each vertex at most once, we have m \u2264 n\u2212 1. Therefore m = n \u2212 1. Since h has n \u2212 1 edges, h visits every vertex in V exactly once, making it a valid Hamiltonian path in H .\nThe general pricing problem (where both cycles and chains are included) is to find a positive price (negative weight) cycle of length at most L or a positive price (negative weight) chain of length at most K, or show that none exist. Note that solving the general pricing problem does not necessarily solve the negative chain problem. If X is the set of negative chains and Y is the set of negative cycles, the general pricing problem is to determine whether X \u222a Y = \u2205. The negative chain problem is to determine whether X = \u2205: however, determining whether X \u222a Y = \u2205 does not necessarily determine whether X = \u2205.\nTo show that the general pricing problem is NP-hard, we modify the above construction by expanding each edge in H to a series of L edges whose weights sum to \u22121. Then any cycle in G has length at least 2L, which violates the length constraint. Since there are no valid negative cycles in G, the pricing problem becomes equivalent to the negative chain problem. Therefore, the general pricing problem is also NP-hard. Since the general pricing problem is also trivially in NP, it is NP-complete."}, {"heading": "5. Conclusion & implications", "text": "We discussed branch-and-price-based approaches to the kidney exchange problem, and showed that solving the pricing problem for chains, and thereby the pricing problem for cycles and chains jointly, is NP-complete. This shows a correctness error in two leading branch-and-price-based solvers. The results apply to other barter exchanges as well, as long as they use chains (potentially with cycles as well).\nOur hardness results show that a different approach for handling chains is necessary. Dickerson et al. [6] introduce models where chains are represented by position-indexed edge variables. Since there are only a polynomial number of edge variables, they can be fully enumerated, removing the need for branch and price for chains. Cycles in these models can still be handled via branch and price, or via a different scheme."}, {"heading": "Acknowledgements", "text": "This material was funded by NSF grants IIS-1320620, IIS-1546752, CCF-1101668, and IIS-0964579, by the ARO under award W911NF-16-1-0061, and by a Facebook Fellowship."}], "references": [{"title": "Kidney exchange", "author": ["A. Roth", "T. S\u00f6nmez", "U. \u00dcnver"], "venue": "Quarterly Journal of Economics 119 (2) ", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2004}, {"title": "Clearing algorithms for barter exchange markets: Enabling nationwide kidney exchanges", "author": ["D. Abraham", "A. Blum", "T. Sandholm"], "venue": "in: Proceedings of the ACM Conference on Electronic Commerce (EC)", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2007}, {"title": "Branch-and-price: Column generation for solving huge integer programs", "author": ["C. Barnhart", "E.L. Johnson", "G.L. Nemhauser", "M.W.P. Savelsbergh", "P.H. Vance"], "venue": "Operations Research 46 (3) ", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1998}, {"title": "J", "author": ["K.M. Glorie"], "venue": "J. van de Klundert, A. P. M. Wagelmans, Kidney exchange with long chains: An efficient pricing algorithm for clearing barter exchanges with branch-andprice, Manufacturing & Service Operations Management (MSOM) 16 (4) ", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2014}, {"title": "Fast optimal clearing of capped-chain barter exchanges", "author": ["B. Plaut", "J.P. Dickerson", "T. Sandholm"], "venue": "in: AAAI Conference on Artificial Intelligence (AAAI)", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2016}, {"title": "Position-indexed formulations for kidney exchange", "author": ["J.P. Dickerson", "D. Manlove", "B. Plaut", "T. Sandholm", "J. Trimble"], "venue": "in: Proceedings of the ACM Conference on Economics and Computation (EC)", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "Kidney exchange is an organized barter market where patients in need of a kidney trade their paired but incompatible donors with other participants in the exchange [1].", "startOffset": 164, "endOffset": 167}, {"referenceID": 1, "context": "Even the maximum-cardinality clearing problem with L \u2265 3 is NP-hard [2].", "startOffset": 68, "endOffset": 71}, {"referenceID": 1, "context": "A leading approach to solving these integer program models\u2014which can be quite large due to the O(|P |) cycles and O(|A||P |) chains in a compatibility graph\u2014is branch and price [2].", "startOffset": 177, "endOffset": 180}, {"referenceID": 2, "context": "Branch and price [3] is a technique where only a subset of the columns (cycles and chains) are kept in the model, and promising columns are incrementally generated and added to the reduced model until optimality can be proven.", "startOffset": 17, "endOffset": 20}, {"referenceID": 3, "context": "Recently, it was shown that determining whether a positive price cycle exists can be solved in polynomial time [4, 5].", "startOffset": 111, "endOffset": 117}, {"referenceID": 4, "context": "Recently, it was shown that determining whether a positive price cycle exists can be solved in polynomial time [4, 5].", "startOffset": 111, "endOffset": 117}, {"referenceID": 3, "context": "[4] and Plaut et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] also use a variant of their cycle-pricing algorithms for chains.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4] and Plaut et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] show how determining whether a positive price cycle in the compatibility graph G = (V,E) exists is equivalent to finding a negative weight cycle in a reduced graph G = (V,E ), where each edge e = (u, v) \u2208 E \u2032 exists if and only if (u, v) \u2208 E, and e has reduced weight r(u,v) = \u03b4v \u2212w(u,v).", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4] and Plaut et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "Ideally, we would like to find the shortest paths using each vertex at most once, but this is NP-hard in the presence of negative cycles [5].", "startOffset": 137, "endOffset": 140}, {"referenceID": 4, "context": "[5] handle this by preventing Bellman-Ford from looping during execution.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] show that although there may be negative cycles that are not found, at least one negative cycle will be found, if any exist.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] gave a counterexample to the algorithm of Glorie et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5]; this is also a counterexample to the original algorithm due to Glorie et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] fails to find a negative chain for L = 3 and K = 5, although one exists.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5], vertex p2 would store as its most promising predecessor the path (a, p1, p2) with weight w [(a, p1, p2)] = 0, instead of (a, p5, p2) with less promising weight w [(a, p5, p2)] = 1.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4] would also incorrectly return that no negative-weight chains exist, by similar reasoning.", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "[4] and Plaut et al.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5].", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "[6] introduce models where chains are represented by position-indexed edge variables.", "startOffset": 0, "endOffset": 3}], "year": 2016, "abstractText": "Kidney exchange is a barter market where patients trade willing but medically incompatible donors. These trades occur via cycles, where each patient-donor pair both gives and receives a kidney, and via chains, which begin with an altruistic donor who does not require a kidney in return. For logistical reasons, the maximum length of a cycle is typically limited to a small constant, while chains can be much longer. Given a compatibility graph of patient-donor pairs, altruists, and feasible potential transplants between them, finding even a maximumcardinality set of vertex-disjoint cycles and chains is NP-hard. There has been much work on developing provably optimal solvers that are efficient in practice. One of the leading techniques has been branch and price, where column generation is used to incrementally bring cycles and chains into the optimization model on an as-needed basis. In particular, only positive-price columns need to be brought into the model. We prove that finding a positive-price chain is NP-complete. This shows incorrectness of two leading branch-andprice solvers that suggested polynomial-time chain pricing algorithms.", "creator": "LaTeX with hyperref package"}}}