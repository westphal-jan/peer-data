{"id": "1606.01141", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Jun-2016", "title": "On Valid Optimal Assignment Kernels and Applications to Graph Classification", "abstract": "ultimately the breakthrough success discovery of normal kernel methods has initiated understanding the design of novel positive semidefinite functions, in particular primarily for interpreting structured data. a leading advanced design convergence paradigm specifically for combining this is the generalized convolution kernel, then which decomposes structured variable objects into their parts automatically and sums sums over all empty pairs of parts. assignment kernels, in contrast, are obtained from implementing an optimal bijection between integer parts, which otherwise can provide a clearly more valid general notion definition of outcome similarity. in psychology general however, conditional optimal single assignments yield finite indefinite decomposition functions, which complicates their use in kernel methods. we occasionally characterize a modified class of base kernels used to automatically compare parts obtained that indeed guarantees positive semidefinite optimal singular assignment kernels. these higher base functional kernels give rise to hierarchies analysis from which the optimal normal assignment kernels predicted are physically computed both in linear time by uniform histogram graph intersection. we currently apply over these results by rapidly developing the weisfeiler - hermann lehman optimal assignment program kernel models for graphs. it conversely provides much high level classification accuracy on applying widely - in used distributed benchmark software data sets improving effectiveness over the original numerical weisfeiler - lehman problem kernel.", "histories": [["v1", "Fri, 3 Jun 2016 15:32:27 GMT  (207kb,D)", "http://arxiv.org/abs/1606.01141v1", null], ["v2", "Fri, 28 Oct 2016 12:25:27 GMT  (227kb,D)", "http://arxiv.org/abs/1606.01141v2", "9 pages, 4 figures, NIPS 2016"], ["v3", "Tue, 31 Jan 2017 14:56:20 GMT  (227kb,D)", "http://arxiv.org/abs/1606.01141v3", "9 pages, 4 figures, NIPS 2016"]], "reviews": [], "SUBJECTS": "cs.LG stat.ML", "authors": ["nils m kriege", "pierre-louis giscard", "richard c wilson"], "accepted": true, "id": "1606.01141"}, "pdf": {"name": "1606.01141.pdf", "metadata": {"source": "CRF", "title": "On Valid Optimal Assignment Kernels and Applications to Graph Classification", "authors": ["Nils M. Kriege"], "emails": ["nils.kriege@tu-dortmund.de", "pierre-louis.giscard@york.ac.uk", "richard.wilson@york.ac.uk"], "sections": [{"heading": null, "text": "The success of kernel methods has initiated the design of novel positive semidefinite functions, in particular for structured data. A leading design paradigm for this is the convolution kernel, which decomposes structured objects into their parts and sums over all pairs of parts. Assignment kernels, in contrast, are obtained from an optimal bijection between parts, which can provide a more valid notion of similarity. In general however, optimal assignments yield indefinite functions, which complicates their use in kernel methods. We characterize a class of base kernels used to compare parts that guarantees positive semidefinite optimal assignment kernels. These base kernels give rise to hierarchies from which the optimal assignment kernels are computed in linear time by histogram intersection. We apply these results by developing the Weisfeiler-Lehman optimal assignment kernel for graphs. It provides high classification accuracy on widely-used benchmark data sets improving over the original Weisfeiler-Lehman kernel."}, {"heading": "1 Introduction", "text": "The various existing kernel methods can conveniently be applied to any type of data, for which a kernel is available that adequately measures the similarity between any two data objects. This includes structured data like images [2, 5, 10], 3d shapes [1], chemical compounds [7] and proteins [4], which are often represented by graphs. Most kernels for structured data decompose both objects and add up the pairwise similarities between their parts following the seminal concept of convolution kernels proposed by Haussler [11]. In fact, many graph kernels can be seen as instances of convolution kernels under different decompositions [21].\nA fundamentally different approach with good prospects is to assign the parts of one objects to the parts of the other, such that the total similarity between the assigned parts is maximum possible. Finding such a bijection is known as assignment problem and well-studied in combinatorial optimization. This approach has been successfully applied to graph comparison, e.g., in general graph matching [8, 15] as well as in kernel-based classification [7, 16, 1]. In contrast to convolution kernels, assignments establish structural correspondences and thereby alleviate the problem of diagonal dominance at the same time. However, the similarities derived in this way are not necessarily positive semidefinite (p.s.d.) [20, 21] and hence do not give rise to valid kernels, severely limiting their use in kernel methods.\nar X\niv :1\n60 6.\n01 14\n1v 1\n[ cs\n.L G\n] 3\nOur goal in this paper is to consider a particular class of base kernels which give rise to valid assignment kernels. In the following we use the term valid to mean a kernel which is symmetric and positive semidefinite. We formalize the considered problem: Let [X ]n denote the set of all n-element subsets of a set X and B(X,Y ) the set of all bijections between X,Y in [X ]n for n \u2208 N. We study the optimal assignment kernel KkB on [X ]n defined as\nKkB(X,Y ) = max B\u2208B(X,Y )\nW (B), where W (B) = \u2211\n(x,y)\u2208B k(x, y) (1)\nand k is a base kernel on X . For clarity of presentation we assume n to be fixed. In order to apply the kernel to data sets, where n is variable, we may fill up smaller sets by new objects z with k(z, x) = 0 for all x \u2208 X without changing the result.\nRelated work. Correspondence problems have been extensively studied in object recognition, where objects are represented by sets of features often called bag of words. Grauman and Darrell proposed the pyramid match kernel that seeks to approximate correspondences between points in Rd by employing a space-partitioning tree structure and counting how often points fall into the same bin [10]. An adaptive partitioning with non-uniformly shaped bins was used to improve the approximation quality in high dimensions [9].\nFor non-vectorial data, Fr\u00f6hlich et al. [7] proposed kernels for graphs derived from an optimal assignment between their vertices and applied the approach to molecular graphs. However, it was shown that the resulting similarity measure is not necessarily a valid kernel [20]. Therefore, Vishwanathan et al. [21] proposed a theoretically well-founded variation of the kernel, which essentially replaces the max-function in Eq. (1) by a soft-max function. Besides introducing an additional parameter, which must be chosen carefully to avoid numerical difficulties, the approach requires the evaluation of a sum over all possible assignments instead of finding a single optimal one. This leads to an increase in running time from cubic to factorial, which is infeasible in practice. Pachauri et al. [14] considered the problem of finding optimal assignments between multiple sets. The problem is equivalent to finding a permutation of the elements of every set, such that assigning the i-th elements to each other yields an optimal result. Solving this problem allows the derivation of valid kernels between pairs of sets with a fixed ordering. This approach was referred to as transitive assignment kernel in [16] and employed for graph classification. However, this does not only lead to non-optimal assignments between individual pairs of graphs, but also suffers from high computational costs.\nVarious general approaches to cope with indefinite kernels have been proposed, in particular, for support vector machines (see [13] and references therein). Such approaches should principally be used in applications, where similarities cannot be expressed by positive semidefinite kernels.\nOur contribution. We study optimal assignment kernels in more detail and investigate which base kernels lead to valid optimal assignment kernels. We characterize a specific class of kernels we refer to as strong and show that strong kernels are equivalent to kernels obtained from a hierarchical partition of the domain of the kernel. We show that for strong base kernels the optimal assignment (i) yields a valid kernel; and (ii) can be computed in linear time given the associated hierarchy. While the computation reduces to histogram intersection similar to the pyramid match kernel [10], our approach is in no way restricted to specific objects like points in Rd. We demonstrate the versatility of our results by deriving novel graph kernels based on optimal assignments, which are shown to improve over their convolution-based counterparts. In particular, we propose the Weisfeiler-Lehman optimal assignment kernel, which performs favourable compared to state-of-the-art graph kernels on a wide range of data sets."}, {"heading": "2 Preliminaries", "text": "Before continuing with our contribution, we begin by introducing some key notation for kernels and trees which will be used later. A (valid) kernel on a set X is a function k : X \u00d7 X \u2192 R such that there is a real Hilbert space H and a mapping \u03c6 : X \u2192 H such that k(x, y) = \u3008\u03c6(x), \u03c6(y)\u3009 for all x, y in X , where \u3008\u00b7, \u00b7\u3009 denotes the inner product of H. We call \u03c6 a feature map, and H a feature space. Equivalently, a function k : X \u00d7 X \u2192 R is a kernel if and only if for every subset {x1, . . . , xn} \u2286 X the n\u00d7 n matrix defined by [m]i,j = k(xi, xj) is p.s.d. The Dirac kernel k\u03b4 is defined by k\u03b4(x, y) = 1, if x = y and 0 otherwise.\nWe consider simple undirected graphs G = (V,E), where V (G) = V is the set of vertices and E(G) = E the set of edges. An edge {u, v} is for short denoted by uv or vu, where both refer to the same edge. A graph with a unique path between any two vertices is a tree. A rooted tree is a tree T with a distinguished vertex r \u2208 V (T ) called root. The vertex following v on the path to the root r is called parent of v and denoted by p(v), where p(r) = r. The vertices on this path are called ancestors of v and the depth of v is the number of edges on the path. The lowest common ancestor LCA(u, v) of two vertices u and v in a rooted tree is the unique vertex with maximum depth that is an ancestor of both u and v."}, {"heading": "3 Strong kernels and hierarchies", "text": "In this section we introduce a restricted class of kernels that will later turn out to lead to valid optimal assignment kernels when employed as base kernel. We provide two different characterizations of this class, one in terms of an inequality constraint on the kernel values, and the other by means of hierarchy defined on the domain of the kernel. The latter will provide the basis for our algorithm to compute valid optimal assignment kernels efficiently.\nWe first consider similarity functions fulfilling the requirement that for any two objects there is no third object that is more similar to each of them than the two to each other. We will see later in Section 3.1 that every such function indeed is p.s.d. and hence a valid kernel.\nDefinition 1 (Strong Kernel). A function k : X \u00d7 X \u2192 R\u22650 is called strong kernel if k(x, y) \u2265 min{k(x, z), k(z, y)} for all x, y, z \u2208 X .\nNote that a strong kernel requires that every object is most similar to itself, i.e., k(x, x) \u2265 maxy\u2208X {k(x, y)} for all x \u2208 X . In the following we introduce a restricted class of kernels that is derived from a hierarchy on the set X . As we will see later in Corollary 1 this class of kernels is equivalent to strong kernels according to Definition 1. Such hierarchies can be systematically constructed on sets of arbitrary objects in order to derive strong kernels. We commence by fixing the the concept of a hierarchy formally. Let T be a rooted tree such that the leaves of T are the elements of X . Each inner vertex v in T corresponds to a subset of X comprising all leaves of the subtree rooted at v. Therefore the tree T defines a family of nested subsets of X . Let w : V (T )\u2192 R\u22650 be a weight function such that w(v) \u2265 w(p(v)) for all v in T . We refer to the tuple (T,w) as a hierarchy.\nDefinition 2 (Hierarchy-induced Kernel). Let H = (T,w) be a hierarchy on X , then the function defined as k(x, y) = w(LCA(x, y)) for all x, y in X is the kernel on X induced by H .\nWe show that Definitions 1 and 2 characterize the same class of kernels.\nLemma 1. Every kernel on X that is induced by a hierarchy on X is strong. Proof. Assume there is a hierarchy (T,w) that induces a kernel k that is not strong. Then there are x, y, z \u2208 X with k(x, y) < min{k(x, z), k(z, y)}. Consider the three vertices a = LCA(x, z), b = LCA(z, y) and c = LCA(x, y). The unique path from x to the root contains a and the path from y to the root contains b, both contain c. The assumption implies that a, b, c are pairwise distinct and c is an ancestor of a and b since weights decrease along the paths. Thus, there must be a path from z via a to c and another path from z via b to c. Hence, T is not a tree, contradicting the assumption.\nWe show constructively that the converse holds as well.\nLemma 2. For every strong kernel k on X there is a hierarchy on X that induces k.\nProof (Sketch). We incrementally construct a hierarchy on X that induces k by successive insertion of elements from X . In each step the hierarchy induces k restricted to the inserted elements and eventually induces k after insertion of all elements. Initially, we start with a hierarchy containing just one element x \u2208 X with w(x) = k(x, x). The key to all following steps is that there is a unique way to extend the hierarchy: Let Xi \u2286 X bet the first i elements in order of insertion and let Hi = (Ti, wi) be the hierarchy after the i-th step. A leaf representing the next element z can be grafted onto Hi to form a hierarchy Hi+1 that induces k restricted to Xi+1 = Xi \u222a {z}. Let B = {x \u2208 Xi : k(x, z) = kmax}, where kmax = maxy\u2208Xi k(y, z). There is a unique vertex b, such that B are the leaves of the subtree rooted at b, cf. Fig. 1. We obtain Hi+1 by inserting a\nnew vertex p with child z into Ti, such that p becomes the parent of b, cf. Fig. 1(b), (c). We set wi+1(p) = kmax, wi+1(z) = k(z, z) and wi+1(x) = wi(x) for all x \u2208 V (Ti). The construction maintains the hierarchy, since for strong kernels k(x, z) = k(x, c) must hold for all x \u2208 Xi \\ B and c \u2208 B.\nNote that a hierarchy inducing a specific strong kernel is not unique: Adjacent inner vertices with the same weight can be merged, and vertices with just one child can be removed without changing the induced kernel. Combining Lemmas 1 and 2 we obtain the following result.\nCorollary 1. A kernel k on X is strong if and only if it is induced by a hierarchy on X .\nAs a consequence of the above corollary the number of values a strong kernel on n objects may take is bounded by the number of vertices in a binary tree with n leaves, i.e., for every strong kernel k on X we have | img(k)| \u2264 2|X | \u2212 1. The Dirac kernel is a common example of a strong kernel, in fact, every kernel k with | img(k)| = 2 is strong. The definition of strong kernel and its relation to hierarchies is reminiscent of related concepts for distances: A metric d on X is an ultrametric if d(x, y) \u2264 max{d(x, z), d(z, y)} for all x, y, z \u2208 X . For every ultrametric d on X there is a rooted tree T with leafs X and edge weights, such that (i) d is the path length between leafs in T , (ii) the path lengths from a leaf to the root are all equal. Indeed, every ultrametric can be embedded into a Hilbert space [12] and thus the associated inner product is a valid kernel. Moreover, it can be shown that this inner product always is a strong kernel. However, the concept of strong kernels is more general: there are strong kernels k such that the associated kernel metric dk(x, y) = \u2016\u03c6(x)\u2212 \u03c6(y)\u2016 is not an ultrametric. The distinction originates from the self-similarities, which in strong kernels, can be arbitrary provided that they fulfil k(x, x) \u2265 maxy\u2208X k(x, y) for all x in X . This degree of freedom is lost when considering distances. If we require all self-similarities of a strong kernel to be equal, then the associated kernel metric always is an ultrametric. Consequently, strong kernels correspond to a superset of ultrametrics. We explicitly define a feature space for general strong kernels in the following."}, {"heading": "3.1 Feature maps of strong kernels", "text": "We use the property that every strong kernel is induced by a hierarchy to derive feature vectors for strong kernels. Let (T,w) be a hierarchy on X that induces the strong kernel k. We define the additive weight function \u03c9 : V (T )\u2192 R\u22650 as \u03c9(v) = w(v)\u2212w(p(v)) and \u03c9(r) = w(r) for the root r. Note that the property of a hierarchy assures that the difference is non-negative. For v \u2208 V (T ) let P (v) \u2286 V (T ) denote the vertices in T on the path from v to the root r. We consider the mapping \u03c6 : X \u2192 Rt, where t = |V (T )| and the components indexed by v \u2208 V (T ) are\n[\u03c6(x)]v =\n{\u221a \u03c9(v) v \u2208 P (x)\n0 otherwise.\nProposition 1. Let k be a strong kernel on X . The function \u03c6 defined as above is a feature map of k, i.e., k(x, y) = \u03c6(x)>\u03c6(y) for all x, y \u2208 X . Proof. Given arbitrary x, y \u2208 X and let c = LCA(x, y). The dot product yields\n\u03c6(x)>\u03c6(y) = \u2211\nv\u2208V (T ) [\u03c6(x)]v[\u03c6(y)]v =\n\u2211\nv\u2208P (c)\n\u221a \u03c9(v) 2 = w(c) = k(x, y),\nsince according to the definition the only non-zero products contributing to the sum over v \u2208 V (T ) are those in P (x) \u2229 P (y) = P (c).\nFigure 2 shows an example of a strong kernel, an associated hierarchy and the derived feature vectors. As a consequence of Corollary 1 and Proposition 1, Definition 1 indeed gives rise to valid kernels."}, {"heading": "4 Valid kernels from optimal assignments", "text": "We consider the function KkB on [X ]n according to Eq. (1) under the assumption that the base kernel k is strong. Let (T,w) be a hierarchy onX which induces k. For a vertex v \u2208 V (T ) and a setX \u2286 X , we denote by Xv the subset of X that is contained in the subtree rooted at v. We define the histogram Hk of a set X \u2208 [X ]n w.r.t. the strong base kernel k as Hk(X) =\u2211x\u2208X \u03c6(x)\u25e6\u03c6(x), where \u03c6 is the feature map of the strong base kernel according to Section 3.1 and \u25e6 denotes the element-wise product. Equivalently, [Hk(X)]v = \u03c9(v) \u00b7 |Xv| for v \u2208 V (T ). The histogram intersection kernel [18] is defined as Ku(g,h) = \u2211t i=1 min{[g]i, [h]i}, t \u2208 N, and known to be a valid kernel on Rt [2, 5].\nTheorem 1. Let k be a strong kernel on X and the histograms Hk defined as above, then KkB(X,Y ) = Ku ( Hk(X), Hk(Y ) ) for all X,Y \u2208 [X ]n.\nProof. Let (T,w) be a hierarchy inducing the strong base kernel k. We rewrite the weight of an assignment B as sum of weights of vertices in T : Since\nk(x, y) = w(LCA(x, y)) = \u2211\nv\u2208P (x)\u2229P (y) \u03c9(v), we have W (B) =\n\u2211\n(x,y)\u2208B k(x, y) =\n\u2211\nv\u2208V (T ) cv \u00b7 \u03c9(v),\nwhere cv counts how often v appears simultaneously in P (x) and P (y) in total for all (x, y) \u2208 B. For the histogram intersection kernel we obtain\nKu(H k(X), Hk(Y )) =\n\u2211\nv\u2208V (T ) min{\u03c9(v) \u00b7 |Xv|, \u03c9(v) \u00b7 |Yv|} =\n\u2211\nv\u2208V (T ) min{|Xv|, |Yv|} \u00b7 \u03c9(v).\nTo complete the proof we have to show that cv = min{|Xv|, |Yv|} for all v \u2208 V (T ). Since B is a bijection, every x \u2208 X and y \u2208 Y appears only once in B and cv \u2264 min{|Xv|, |Yv|} follows. It remains to show that there always is an assignment B for which the above inequality is tight. We construct a matching by the following greedy approach: We perform a bottom-up traversal on the hierarchy starting with the leafs. For every vertex v in the hierarchy we arbitrarily pair the objects in Xv and Yv that are not yet contained in the assignment. Note that no element in Xv has been assigned to an element in Y \\ Yv , and no element in Yv to an element from X \\Xv . Hence, at every vertex v we have cv = min{|Xv|, |Yv|} vertices from Xv assigned to vertices in Yv .\nFigure 3 illustrates the relation between the optimal assignment kernel employing a strong base kernel and the histogram intersection kernel. Note that a vertex v \u2208 V (T ) with \u03c9(v) = 0 does not contribute to the histogram intersection kernel and can be omitted. In particular, for any two objects x1, x2 \u2208 X with k(x1, y) = k(x2, y) for all y \u2208 X we have \u03c9(x1) = \u03c9(x2) = 0. There is no need to explicitly represent such leafs in the hierarchy, yet their multiplicity must be considered to determine the number of leafs in the subtree rooted at an inner vertex.\nCorollary 2. If the base kernel k is strong, then the function KkB is a valid kernel.\nTheorem 1 implies not only that optimal assignments give rise to valid kernels for strong base kernels, but also allows to compute them by histogram intersection. Provided that the hierarchy is known, bottom-up computation of histograms and their intersection can both be performed in linear time, while the general Hungarian method would require cubic time to solve the assignment problem.\nCorollary 3. Given a hierarchy inducing k, KkB(X,Y ) can be computed in time O(|X|+ |Y |)."}, {"heading": "5 Graph kernels from optimal assignments", "text": "The concept of optimal assignment kernels is rather general and can be applied to derive kernels on various structures. In this section we apply our results to obtain novel graph kernels, i.e., kernels of the form K : G \u00d7 G \u2192 R, where G denotes the set of graphs. We assume that every vertex v is equipped with a categorical label given by \u03c4(v). Labels typically arise from applications, e.g., in a graph representing a chemical compound the labels may indicate atom types."}, {"heading": "5.1 Optimal assignment kernels on vertices and edges", "text": "As a baseline we propose graph kernels on vertices and edges. The vertex optimal assignment kernel (V-OA) is defined as K(G,H) = KkB(V (G), V (H)), where k is the Dirac kernel on vertex labels. Analogously, the edge optimal assignment kernel (E-OA) is given byK(G,H) = KkB(E(G), E(H)), where we define k(uv, st) = 1 if at least one of the mappings (u 7\u2192 s, v 7\u2192 t) and (u 7\u2192 t, v 7\u2192 s) maps vertices with the same label only; and 0 otherwise. Since these base kernels are Dirac kernels, they are strong and, consequently, V-OA and E-OA are valid kernels."}, {"heading": "5.2 Weisfeiler-Lehman optimal assignment kernels", "text": "Weisfeiler-Lehman kernels are based on iterative vertex colour refinement and have been shown to provide state-of-the-art prediction performance in experimental evaluations [17]. These kernels employ the classical 1-dimensional Weisfeiler-Lehman heuristic for graph isomorphism testing and consider subtree patterns encoding the neighbourhood of each vertex up to a given distance. For a\nparameter h and a graph G with initial labels \u03c4 , a sequence (\u03c40, . . . , \u03c4h) of refined labels referred to as colours is computed, where \u03c40 = \u03c4 and \u03c4i is obtained from \u03c4i\u22121 by the following procedure: Sort the multiset of colours {\u03c4i\u22121(u) : vu \u2208 E(G)} for every vertex v lexicographically to obtain a unique sequence of colours and add \u03c4i\u22121(v) as first element. Assign a new colour \u03c4i(v) to every vertex v by employing a one-to-one mapping from sequences to new colours. Figure 4(a) illustrates the refinement process. The Weisfeiler-Lehman subtree kernel (WL) counts the vertex colours two graphs have in common in the first h refinement steps and can be computed by taking the dot product of feature vectors, where each component counts the occurrences of a colour.\nWe propose the Weisfeiler-Lehman optimal assignment kernel (WL-OA), which is defined on the vertices like OA-V, but employs the non-trivial base kernel\nk(u, v) =\nh\u2211\ni=0\nk\u03b4(\u03c4i(u), \u03c4i(u)). (2)\nThis base kernel corresponds to the number of matching colours in the refinement sequence. More intuitively, the base kernel value reflects to what extent the two vertices have a similar neighbourhood.\nLet V be the set of all vertices of graphs in G, we show that the refinement process defines a hierarchy on V , which induces the base kernel of Eq. (2). Each vertex colouring \u03c4i naturally partitions V into colour classes, such that vertices have the same colour if and only if they are in the same cell. Since the refinement takes the colour \u03c4i(v) of a vertex v into account when computing \u03c4i+1(v), the implication \u03c4i(u) 6= \u03c4i(v) \u21d2 \u03c4i+1(u) 6= \u03c4i+1(v) holds for all u, v \u2208 V . Hence, the colour classes induced by \u03c4i+1 are at least as fine as those induced by \u03c4i. Moreover, the sequence (\u03c4i)0\u2264i\u2264h gives rise to a family of nested subsets, which can naturally be represented by a hierarchy (T,w), see Fig. 4(b) for an illustration. When assuming \u03c9(v) = 1 for all vertices v \u2208 V (T ), the hierarchy induces the kernel of Eq. (2). We have shown that the base kernel is strong and it follows from Corollary 2 that WL-OA is a valid kernel. Moreover, it can be computed from the feature vectors of the Weisfeiler-Lehman subtree kernel in linear time by histogram intersection, cf. Theorem 1."}, {"heading": "6 Experimental evaluation", "text": "We report on the experimental evaluation of the proposed graph kernels derived from optimal assignments and compare with state-of-the-art convolution kernels."}, {"heading": "6.1 Method and Experimental Setup", "text": "We performed classification experiments using the C-SVM implementation LIBSVM [6]. We report mean prediction accuracies and standard deviations obtained by 10-fold cross-validation repeated 10 times with random fold assignment. Within each fold all necessary parameters were selected by crossvalidation based on the training set. This includes the regularization parameter C, kernel parameters where applicable and whether to normalize the kernel matrix. All kernels were implemented in Java and experiments were conducted using Oracle Java v1.8.0 on an Intel Core i7-3770 CPU at 3.4GHz (Turbo Boost disabled) with 16GB of RAM using a single processor only.\nKernels. As a baseline we implemented the vertex kernel (V) and edge kernel (E), which are the dot products on vertex and edge label histograms, respectively, where an edge label consist of the labels of its endpoints. V-OA and E-OA are the related optimal assignment kernels as described in Sec. 5.1. For the Weisfeiler-Lehman kernels WL and WL-OA, see Section 5.2, the parameter h was chosen from {0, ..., 7}. In addition we implemented a graphlet kernel (GL) and the shortest-path kernel (SP) [3]. GL is based on connected subgraphs with three vertices taking labels into account similar to the approach used in [17]. For SP we used the Dirac kernel to compare path lengths. Note that all kernels not identified as optimal assignment kernels by the suffix OA are convolution kernels.\nData sets. We tested on widely-used graph classification benchmarks from different domains, cf. [4, 21, 17, 22]: MUTAG, PTC-MR, NCI1 and NCI109 are graphs derived from small molecules, PROTEINS, D&D and ENZYMES represent macromolecules, and COLLAB and REDDIT are derived from social networks.1 All data sets have two class labels except ENZYMES and COLLAB, which are divided into six and three classes, respectively. The social network graphs are unlabelled and we considered all vertices uniformly labelled. All other graph data sets come with vertex labels. Edge labels, if present, were ignored since they are not supported by all graph kernels under comparison."}, {"heading": "6.2 Results and discussion", "text": "Table 6.2 summarizes the classification accuracies. We observe that optimal assignment kernels on most data sets improve over the prediction accuracy obtained by their convolution-based counterpart. The only distinct exception is MUTAG. The extent of improvement on the other data sets varies, but is in particular remarkable for ENZYMES and REDDIT. This indicates that optimal assignment kernels provide a more valid notion of similarity than convolution kernels for these classification tasks. The most successful kernel is WL-OA, which almost consistently improves over WL and performs best on seven of the nine data sets. WL-OA provides the second best accuracy on D&D and ranks in the middle of the field for MUTAG. For these two data set the difference in accuracy between the kernels is small and even the baseline kernels perform notably well.\nThe time to compute the quadratic kernel matrix was less that one minute for all kernels and data sets with exception of SP on D&D (29 min) and REDDIT (2 h) as well as GL on COLLAB (28 min). The running time to compute the optimal assignment kernels by histogram intersection was consistently on par with the running time required for the related convolution kernels and orders of magnitude faster than their computation by the Hungarian method."}, {"heading": "7 Conclusions and future work", "text": "We have characterized the class of strong kernels leading to valid optimal assignment kernels and derived novel effective kernels for graphs. The reduction to histogram intersection makes efficient\n1The data sets, further references and statistics are available from https://ls11-www.cs.uni-dortmund. de/staff/morris/graphkerneldatasets.\ncomputation possible and known speed-up techniques for intersection kernels can directly be applied (see, e.g., [19] and references therein). We believe that our results may form the basis for the design of new kernels, which can not only be computed efficiently, but also adequately measure similarity."}, {"heading": "Acknowledgments", "text": "N. M. Kriege is funded by the German Science Foundation (DFG) within the Collaborative Research Center SFB 876 \u201cProviding Information by Resource-Constrained Data Analysis\u201d, project A6 \u201cResource-efficient Graph Mining\u201d. P.-L. Giscard is grateful for the financial support provided by the Royal Commission for the Exhibition of 1851."}], "references": [{"title": "An aligned subtree kernel for weighted graphs", "author": ["L. Bai", "L. Rossi", "Z. Zhang", "E.R. Hancock"], "venue": "Proceedings of the 32nd International Conference on Machine Learning, ICML 2015, pages 30\u201339,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Histogram intersection kernel for image classification", "author": ["A. Barla", "F. Odone", "A. Verri"], "venue": "International Conference on Image Processing, ICIP 2003, volume 3, pages III\u2013513\u201316 vol.2, Sept", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2003}, {"title": "Shortest-path kernels on graphs", "author": ["K.M. Borgwardt", "H.-P. Kriegel"], "venue": "Proceedings of the Fifth IEEE International Conference on Data Mining, ICDM \u201905, pages 74\u201381, Washington, DC, USA,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2005}, {"title": "Protein function prediction via graph kernels", "author": ["K.M. Borgwardt", "C.S. Ong", "S. Sch\u00f6nauer", "S.V.N. Vishwanathan", "A.J. Smola", "H.-P. Kriegel"], "venue": "Bioinformatics, 21 Suppl 1:i47\u2013i56, Jun", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2005}, {"title": "Generalized histogram intersection kernel for image recognition", "author": ["S. Boughorbel", "J.P. Tarel", "N. Boujemaa"], "venue": "IEEE International Conference on Image Processing, ICIP 2005, volume 3, pages III\u2013161\u2013 4, Sept", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2005}, {"title": "LIBSVM: A library for support vector machines", "author": ["C.-C. Chang", "C.-J. Lin"], "venue": "ACM Transactions on Intelligent Systems and Technology, 2:27:1\u201327:27, May", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "Optimal assignment kernels for attributed molecular graphs", "author": ["H. Fr\u00f6hlich", "J.K. Wegner", "F. Sieker", "A. Zell"], "venue": "Proceedings of the 22nd International Conference on Machine Learning, ICML 2005, pages 225\u2013232, New York, NY, USA,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2005}, {"title": "Exact and approximate graph matching using random walks", "author": ["M. Gori", "M. Maggini", "L. Sarti"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, 27(7):1100\u20131111, July", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2005}, {"title": "Approximate correspondences in high dimensions", "author": ["K. Grauman", "T. Darrell"], "venue": "B. Sch\u00f6lkopf, J. C. Platt, and T. Hoffman, editors, Advances in Neural Information Processing Systems 19, pages 505\u2013512. MIT Press,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2007}, {"title": "The pyramid match kernel: Efficient learning with sets of features", "author": ["K. Grauman", "T. Darrell"], "venue": "J. Mach. Learn. Res., 8:725\u2013760, May", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2007}, {"title": "Convolution kernels on discrete structures", "author": ["D. Haussler"], "venue": "Technical Report UCSC-CRL-99-10, University of California, Santa Cruz, CA, USA,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1999}, {"title": "Ultrametric spaces and related hilbert spaces", "author": ["R.S. Ismagilov"], "venue": "Mathematical Notes, 62(2):186\u2013197,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 1997}, {"title": "Learning SVM in Krein spaces", "author": ["G. Loosli", "S. Canu", "C.S. Ong"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, PP(99):1\u20131,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2015}, {"title": "Solving the multi-way matching problem by permutation synchronization", "author": ["D. Pachauri", "R. Kondor", "V. Singh"], "venue": "C. J. C. Burges, L. Bottou, M. Welling, Z. Ghahramani, and K. Q. Weinberger, editors, Advances in Neural Information Processing Systems 26, pages 1860\u20131868. Curran Associates, Inc.,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2013}, {"title": "Approximate graph edit distance computation by means of bipartite graph matching", "author": ["K. Riesen", "H. Bunke"], "venue": "Image and Vision Computing, 27(7):950 \u2013 959,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2009}, {"title": "Transitive assignment kernels for structural classification", "author": ["M. Schiavinato", "A. Gasparetto", "A. Torsello"], "venue": "A. Feragen, M. Pelillo, and M. Loog, editors, Similarity-Based Pattern Recognition: Third International Workshop, SIMBAD 2015, pages 146\u2013159. Springer International Publishing,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Weisfeiler-Lehman graph kernels", "author": ["N. Shervashidze", "P. Schweitzer", "E.J. van Leeuwen", "K. Mehlhorn", "K.M. Borgwardt"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2011}, {"title": "Color indexing", "author": ["M.J. Swain", "D.H. Ballard"], "venue": "International Journal of Computer Vision, 7(1):11\u201332,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1991}, {"title": "Efficient additive kernels via explicit feature maps", "author": ["A. Vedaldi", "A. Zisserman"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on, 34(3):480\u2013492,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2012}, {"title": "The optimal assignment kernel is not positive definite", "author": ["J.-P. Vert"], "venue": "CoRR, abs/0801.4061,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2008}, {"title": "Graph kernels", "author": ["S.V.N. Vishwanathan", "N.N. Schraudolph", "R.I. Kondor", "K.M. Borgwardt"], "venue": "Journal of Machine Learning Research, 11:1201\u20131242,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2010}, {"title": "Deep graph kernels", "author": ["P. Yanardag", "S.V.N. Vishwanathan"], "venue": "Proceedings of the 21th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD \u201915, pages 1365\u20131374, New York, NY, USA,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 1, "context": "This includes structured data like images [2, 5, 10], 3d shapes [1], chemical compounds [7] and proteins [4], which are often represented by graphs.", "startOffset": 42, "endOffset": 52}, {"referenceID": 4, "context": "This includes structured data like images [2, 5, 10], 3d shapes [1], chemical compounds [7] and proteins [4], which are often represented by graphs.", "startOffset": 42, "endOffset": 52}, {"referenceID": 9, "context": "This includes structured data like images [2, 5, 10], 3d shapes [1], chemical compounds [7] and proteins [4], which are often represented by graphs.", "startOffset": 42, "endOffset": 52}, {"referenceID": 0, "context": "This includes structured data like images [2, 5, 10], 3d shapes [1], chemical compounds [7] and proteins [4], which are often represented by graphs.", "startOffset": 64, "endOffset": 67}, {"referenceID": 6, "context": "This includes structured data like images [2, 5, 10], 3d shapes [1], chemical compounds [7] and proteins [4], which are often represented by graphs.", "startOffset": 88, "endOffset": 91}, {"referenceID": 3, "context": "This includes structured data like images [2, 5, 10], 3d shapes [1], chemical compounds [7] and proteins [4], which are often represented by graphs.", "startOffset": 105, "endOffset": 108}, {"referenceID": 10, "context": "Most kernels for structured data decompose both objects and add up the pairwise similarities between their parts following the seminal concept of convolution kernels proposed by Haussler [11].", "startOffset": 187, "endOffset": 191}, {"referenceID": 20, "context": "In fact, many graph kernels can be seen as instances of convolution kernels under different decompositions [21].", "startOffset": 107, "endOffset": 111}, {"referenceID": 7, "context": ", in general graph matching [8, 15] as well as in kernel-based classification [7, 16, 1].", "startOffset": 28, "endOffset": 35}, {"referenceID": 14, "context": ", in general graph matching [8, 15] as well as in kernel-based classification [7, 16, 1].", "startOffset": 28, "endOffset": 35}, {"referenceID": 6, "context": ", in general graph matching [8, 15] as well as in kernel-based classification [7, 16, 1].", "startOffset": 78, "endOffset": 88}, {"referenceID": 15, "context": ", in general graph matching [8, 15] as well as in kernel-based classification [7, 16, 1].", "startOffset": 78, "endOffset": 88}, {"referenceID": 0, "context": ", in general graph matching [8, 15] as well as in kernel-based classification [7, 16, 1].", "startOffset": 78, "endOffset": 88}, {"referenceID": 19, "context": ") [20, 21] and hence do not give rise to valid kernels, severely limiting their use in kernel methods.", "startOffset": 2, "endOffset": 10}, {"referenceID": 20, "context": ") [20, 21] and hence do not give rise to valid kernels, severely limiting their use in kernel methods.", "startOffset": 2, "endOffset": 10}, {"referenceID": 9, "context": "Grauman and Darrell proposed the pyramid match kernel that seeks to approximate correspondences between points in R by employing a space-partitioning tree structure and counting how often points fall into the same bin [10].", "startOffset": 218, "endOffset": 222}, {"referenceID": 8, "context": "An adaptive partitioning with non-uniformly shaped bins was used to improve the approximation quality in high dimensions [9].", "startOffset": 121, "endOffset": 124}, {"referenceID": 6, "context": "[7] proposed kernels for graphs derived from an optimal assignment between their vertices and applied the approach to molecular graphs.", "startOffset": 0, "endOffset": 3}, {"referenceID": 19, "context": "However, it was shown that the resulting similarity measure is not necessarily a valid kernel [20].", "startOffset": 94, "endOffset": 98}, {"referenceID": 20, "context": "[21] proposed a theoretically well-founded variation of the kernel, which essentially replaces the max-function in Eq.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14] considered the problem of finding optimal assignments between multiple sets.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "This approach was referred to as transitive assignment kernel in [16] and employed for graph classification.", "startOffset": 65, "endOffset": 69}, {"referenceID": 12, "context": "Various general approaches to cope with indefinite kernels have been proposed, in particular, for support vector machines (see [13] and references therein).", "startOffset": 127, "endOffset": 131}, {"referenceID": 9, "context": "While the computation reduces to histogram intersection similar to the pyramid match kernel [10], our approach is in no way restricted to specific objects like points in R.", "startOffset": 92, "endOffset": 96}, {"referenceID": 11, "context": "Indeed, every ultrametric can be embedded into a Hilbert space [12] and thus the associated inner product is a valid kernel.", "startOffset": 63, "endOffset": 67}, {"referenceID": 17, "context": "The histogram intersection kernel [18] is defined as Ku(g,h) = \u2211t i=1 min{[g]i, [h]i}, t \u2208 N, and known to be a valid kernel on R [2, 5].", "startOffset": 34, "endOffset": 38}, {"referenceID": 1, "context": "The histogram intersection kernel [18] is defined as Ku(g,h) = \u2211t i=1 min{[g]i, [h]i}, t \u2208 N, and known to be a valid kernel on R [2, 5].", "startOffset": 130, "endOffset": 136}, {"referenceID": 4, "context": "The histogram intersection kernel [18] is defined as Ku(g,h) = \u2211t i=1 min{[g]i, [h]i}, t \u2208 N, and known to be a valid kernel on R [2, 5].", "startOffset": 130, "endOffset": 136}, {"referenceID": 16, "context": "Weisfeiler-Lehman kernels are based on iterative vertex colour refinement and have been shown to provide state-of-the-art prediction performance in experimental evaluations [17].", "startOffset": 173, "endOffset": 177}, {"referenceID": 5, "context": "We performed classification experiments using the C-SVM implementation LIBSVM [6].", "startOffset": 78, "endOffset": 81}, {"referenceID": 2, "context": "In addition we implemented a graphlet kernel (GL) and the shortest-path kernel (SP) [3].", "startOffset": 84, "endOffset": 87}, {"referenceID": 16, "context": "GL is based on connected subgraphs with three vertices taking labels into account similar to the approach used in [17].", "startOffset": 114, "endOffset": 118}, {"referenceID": 3, "context": "[4, 21, 17, 22]: MUTAG, PTC-MR, NCI1 and NCI109 are graphs derived from small molecules, PROTEINS, D&D and ENZYMES represent macromolecules, and COLLAB and REDDIT are derived from social networks.", "startOffset": 0, "endOffset": 15}, {"referenceID": 20, "context": "[4, 21, 17, 22]: MUTAG, PTC-MR, NCI1 and NCI109 are graphs derived from small molecules, PROTEINS, D&D and ENZYMES represent macromolecules, and COLLAB and REDDIT are derived from social networks.", "startOffset": 0, "endOffset": 15}, {"referenceID": 16, "context": "[4, 21, 17, 22]: MUTAG, PTC-MR, NCI1 and NCI109 are graphs derived from small molecules, PROTEINS, D&D and ENZYMES represent macromolecules, and COLLAB and REDDIT are derived from social networks.", "startOffset": 0, "endOffset": 15}, {"referenceID": 21, "context": "[4, 21, 17, 22]: MUTAG, PTC-MR, NCI1 and NCI109 are graphs derived from small molecules, PROTEINS, D&D and ENZYMES represent macromolecules, and COLLAB and REDDIT are derived from social networks.", "startOffset": 0, "endOffset": 15}, {"referenceID": 18, "context": ", [19] and references therein).", "startOffset": 2, "endOffset": 6}], "year": 2017, "abstractText": "The success of kernel methods has initiated the design of novel positive semidefinite functions, in particular for structured data. A leading design paradigm for this is the convolution kernel, which decomposes structured objects into their parts and sums over all pairs of parts. Assignment kernels, in contrast, are obtained from an optimal bijection between parts, which can provide a more valid notion of similarity. In general however, optimal assignments yield indefinite functions, which complicates their use in kernel methods. We characterize a class of base kernels used to compare parts that guarantees positive semidefinite optimal assignment kernels. These base kernels give rise to hierarchies from which the optimal assignment kernels are computed in linear time by histogram intersection. We apply these results by developing the Weisfeiler-Lehman optimal assignment kernel for graphs. It provides high classification accuracy on widely-used benchmark data sets improving over the original Weisfeiler-Lehman kernel.", "creator": "LaTeX with hyperref package"}}}