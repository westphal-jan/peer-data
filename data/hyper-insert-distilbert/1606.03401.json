{"id": "1606.03401", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "10-Jun-2016", "title": "Memory-Efficient Backpropagation Through Time", "abstract": "we also propose a modern novel approach to reduce memory consumption of determining the allocated backpropagation inputs through minimal time ( called bptt ) software algorithm suited when training coupled recurrent queue neural networks ( ff rnns ). our approach commonly uses dynamic programming expertise to balance a trade - : off tendency between caching predictions of intermediate method results and recomputation. the algorithm is capable of tightly fitting resources within almost constantly any usual user - set memory budget while finding an optimal variable execution policy rather minimizing the computational cost. computational devices therefore have limited computational memory available capacity levels and maximizing itself a computational system performance objective given merely a completely fixed memory budget is commonly a strongly practical use - case. firstly we provide asymptotic computational upper feasible bounds defined for various regimes. the algorithm suite is therefore particularly effective for long sequences. for sequences of transition length past 1000, our core algorithm saves 95 \\ % of memory usage while using only seventy one third more actual time variables per session iteration than the actual standard bptt.", "histories": [["v1", "Fri, 10 Jun 2016 17:20:39 GMT  (277kb,D)", "http://arxiv.org/abs/1606.03401v1", null]], "reviews": [], "SUBJECTS": "cs.NE cs.LG", "authors": ["audrunas gruslys", "r\u00e9mi munos", "ivo danihelka", "marc lanctot", "alex graves"], "accepted": true, "id": "1606.03401"}, "pdf": {"name": "1606.03401.pdf", "metadata": {"source": "CRF", "title": "Memory-Efficient Backpropagation Through Time", "authors": ["Audr\u016bnas Gruslys", "Remi Munos", "Ivo Danihelka"], "emails": ["audrunas@google.com", "munos@google.com", "danihelka@google.com", "lanctot@google.com", "gravesa@google.com"], "sections": [{"heading": null, "text": "We propose a novel approach to reduce memory consumption of the backpropagation through time (BPTT) algorithm when training recurrent neural networks (RNNs). Our approach uses dynamic programming to balance a trade-off between caching of intermediate results and recomputation. The algorithm is capable of tightly fitting within almost any user-set memory budget while finding an optimal execution policy minimizing the computational cost. Computational devices have limited memory capacity and maximizing a computational performance given a fixed memory budget is a practical use-case. We provide asymptotic computational upper bounds for various regimes. The algorithm is particularly effective for long sequences. For sequences of length 1000, our algorithm saves 95% of memory usage while using only one third more time per iteration than the standard BPTT."}, {"heading": "1 Introduction", "text": "Recurrent neural networks (RNNs) are artificial neural networks where connections between units can form cycles. They are often used for sequence mapping problems, as they can propagate hidden state information from early parts of the sequence back to later points. LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al. [2015], Mnih et al. [2016]) settings. Other successful RNN architectures include Neural Turing Machines (NTM) (Graves et al. [2014]), DRAW network (Gregor et al. [2015]), Neural Transducers (Grefenstette et al. [2015]).\nBackpropagation Through Time algorithm (BPTT) (Rumelhart et al. [1985], Werbos [1990]) is typically used to obtain gradients during training. One important problem is the large memory consumption required by the BPTT. This is especially troublesome when using Graphics Processing Units (GPUs) due to the limitations of GPU memory.\nMemory budget is typically known in advance. Our algorithm balances the tradeoff between memorization and recomputation by finding an optimal memory usage policy which minimizes the total computational cost for any fixed memory budget. The algorithm exploits the fact that the same memory slots may be reused multiple times. The idea to use dynamic programming to find a provably optimal policy is the main contribution of this paper.\nOur approach is largely architecture agnostic and works with most recurrent neural networks. Being able to fit within limited memory devices such as GPUs will typically compensate for any increase in computational cost.\nar X\niv :1\n60 6.\n03 40\n1v 1\n[ cs\n.N E\n] 1\n0 Ju"}, {"heading": "2 Background and related work", "text": "In this section, we describe the key terms and relevant previous work for memory-saving in RNNs. Definition 1. An RNN core is a feed-forward neural network which is cloned (unfolded in time) repeatedly, where each clone represents a particular time point in the recurrence.\nFor example, if an RNN has a single hidden layer whose outputs feed back into the same hidden layer, then for a sequence length of t the unfolded network is feed-forward and contains t RNN cores. Definition 2. The hidden state of the recurrent network is the part of the output of the RNN core which is passed into the next RNN core as an input.\nIn addition to the initial hidden state, there exists a single hidden state per time step once the network is unfolded. Definition 3. The internal state of the RNN core for a given time-point is all the necessary information required to backpropagate gradients over that time step once an input vector, a gradient with respect to the output vector, and a gradient with respect to the output hidden state is supplied. We define it to also include an output hidden state.\nAn internal state can be (re)evaluated by executing a single forward operation taking the previous hidden state and the respective entry of an input sequence as an input. For most network architectures, the internal state of the RNN core will include a hidden input state, as this is normally required to evaluate gradients. This particular choice of the definition will be useful later in the paper. Definition 4. A memory slot is a unit of memory which is capable of storing a single hidden state or a single internal state (depending on the context)."}, {"heading": "2.1 Backpropagation through Time", "text": "Backpropagation through Time (BPTT) (Rumelhart et al. [1985], Werbos [1990]) is one of the commonly used techniques to train recurrent networks. BPTT \u201cunfolds\u201d the neural network in time by creating several copies of the recurrent units which can then be treated like a (deep) feed-forward network with tied weights. Once this is done, a standard forward-propagation technique can be used to evaluate network fitness over the whole sequence of inputs, while a standard backpropagation algorithm can be used to evaluate partial derivatives of the loss criteria with respect to all network parameters. This approach, while being computationally efficient is also fairly intensive in memory usage. This is because the standard version of the algorithm effectively requires storing internal states of the unfolded network core at every time-step in order to be able to evaluate correct partial derivatives."}, {"heading": "2.2 Trading memory for computation time", "text": "The general idea of trading computation time and memory consumption in general computation graphs has been investigated in the automatic differentiation community (Dauvergne and Hasco\u00ebt [2006]). Recently, the rise of deep architectures and recurrent networks has increased interest in a less general case where the graph of forward computation is a chain and gradients have to be chained in a reverse order. This simplification leads to relatively simple memory-saving strategies and heuristics. In the context of BPTT, instead of storing hidden network states, some of the intermediate results can be recomputed on demand by executing an extra forward operation. Chen et. al. proposed subdividing the sequence of size t into \u221a t equal parts and memorizing only hidden states between the subsequences and all internal states within each segment (Chen et al. [2016]). This uses O( \u221a t) memory at the cost of making an additional forward pass on average, as once the errors are backpropagated through the right-side of the sequence, the second-last subsequence has to be restored by repeating a number of forward operations. We refer to this as Chen\u2019s \u221a t algorithm.\nThe authors also suggest applying the same technique recursively several times by sub-dividing the sequence into k equal parts and terminating the recursion once the subsequence length becomes less than k. The authors have established that this would lead to memory consumption of O(k logk+1(t)) and computational complexity of O(t logk(t)). This algorithm has a minimum possible memory usage of log2(t) in the case when k = 1. We refer to this as Chen\u2019s recursive algorithm."}, {"heading": "3 Memory-efficient backpropagation through time", "text": "We first discuss two simple examples: when memory is very scarce, and when it is somewhat limited.\nWhen memory is very scarce, it is straightforward to design a simple but computationally inefficient algorithm for backpropagation of errors on RNNs which only uses only a constant amount of memory. Every time when the state of the network at time t has to be restored, the algorithm would simply re-evaluate the state by forward-propagating inputs starting from the beginning until time t. As backpropagation happens in the reverse temporal order, results from the previous forward steps can not be reused (as there is no memory to store them). This would require repeating t forward steps before backpropagating gradients one step backwards (we only remember inputs and the initial state). This would produce an algorithm requiring t(t+ 1)/2 forward passes to backpropagate errors over t time steps. The algorithm would be O(1) in space and O(t2) in time.\nA simple way of reducing memory consumption is simply to store only hidden RNN states at all time points. When errors have to be backpropagated from time t to t\u2212 1, an internal RNN core state can be re-evaluated by executing another forward operation taking the previous hidden state as an input. The backward operation can follow immediately. This approach can lead to fairly significant memory savings, as typically the recurrent network hidden state is much smaller than an internal state of the network core itself. On the other hand this leads to another forward operation being executed during the backpropagation stage."}, {"heading": "3.1 Backpropagation though time with selective hidden state memorization (BPTT-HSM)", "text": "The idea behind the proposed algorithm is to compromise between two previous extremes. Suppose that we want to forward and backpropagate a sequence of length t, but we are only able to store m hidden states in memory at any given time. We may reuse the same memory slots to store different hidden states during backpropagation. Also, suppose that we have a single RNN core available for the purposes of intermediate calculations which is able to store a single internal state. Define C(t,m) as a computational cost of backpropagation measured in terms of how many forward-operations one has to make in total during forward and backpropagation steps combined when following an optimal memory usage policy minimizing the computational cost. One can easily set the boundary conditions: C(t, 1) = 12 t(t + 1) is the cost of the minimal memory approach, while C(t,m) = 2t \u2212 1 for all m \u2265 t when memory is plentiful (as shown in Fig. 3 a). Our approach is illustrated in Figure 1. Once we start forward-propagating steps at time t = t0, at any given point y > t0 we can choose to put the current hidden state into memory (step 1). This step has the cost of y forward operations. States will be read in the reverse order in which they were written: this allows the algorithm to store states in a stack. Once the state is put into memory at time y = D(t,m), we can reduce the problem into two parts by using a divide-and-conquer approach: running the same algorithm on the t > y side of the sequence while using m\u2212 1 of the remaining memory slots at the cost of C(t\u2212 y,m\u2212 1) (step 2), and then reusing m memory slots when backpropagating on the t \u2264 y side at the cost of C(y,m) (step 3). We use a full size m memory capacity when performing step 3 because we could release the hidden state y immediately after finishing step 2.\nThe base case for the recurrent algorithm is simply a sequence of length t = 1 when forward and backward propagation may be done trivially on a single available RNN network core. This step has the cost C(1,m) = 1.\nHaving established the protocol we may find an optimal policy D(t,m). Define the cost of choosing the first state to be pushed at position y and later following the optimal policy as:\nQ(t,m, y) = y + C(t\u2212 y,m\u2212 1) + C(y,m) (1)\nC(t,m) = Q(t,m,D(t,m)) (2) D(t,m) = argmin1\u2264y<t Q(t,m, y) (3)\nEquations can be solved exactly by using dynamic programming subject to the boundary conditions established previously (e.g. as in Figure 2(a)). D(t,m) will determine the optimal policy to follow. Pseudocode is given in the supplementary material. Figure 3 illustrates an optimal policy found for two simple cases."}, {"heading": "3.2 Backpropagation though time with selective internal state memorization (BPTT-ISM)", "text": "Saving internal RNN core states instead of hidden RNN states would allow us to save a single forward operation during backpropagation in every divide-and-conquer step, but at a higher memory cost.\nSuppose we have a memory capacity capable of saving exactly m internal RNN states. First, we need to modify the boundary conditions: C(t, 1) = 12 t(t + 1) is a cost reflecting the minimal memory approach, while C(t,m) = t for all m \u2265 t when memory is plentiful (equivalent to standard BPTT). As previously, C(t,m) is defined to be the computational cost for combined forward and backward propagations over a sequence of length t with memory allowance m while following an optimal memory usage policy. As before, the cost is measured in terms of the amount of total forward steps made, because the number of backwards steps is constant. Similarly to BPTT-HSM, the process can be divided into parts using divide-and-conquer approach (Fig 4). For any values of t and m position of the first memorization y = D(t,m) is evaluated. y forward operations are executed and an internal RNN core state is placed into memory. This step has the cost of y forward operations (Step 1 in Figure 4). As the internal state also contains an output hidden state, the same algorithm can be recurrently run on the high-time (right) side of the sequence while having on less memory slot available (Step 2 in Figure 4). This step has the cost of C(t\u2212 y,m\u2212 1) forward operations. Once gradients are backpropagated through the right side of the sequence, backpropagation can be done over the stored RNN core (Step 3 in Figure 4). This step has no additional cost as it involves no more forward operations. The memory slot can now be released leaving m memory available. Finally, the same algorithm is run on the left-side of the sequence (Step 4 in Figure 4). This final step has the cost of C(y \u2212 1,m) forward operations. Summing the costs gives us the following equation:\nQ(t,m, y) = y + C(y \u2212 1,m) + C(t\u2212 y,m\u2212 1) (4)\nRecursion has a single base case: backpropagation over an empty sequence is a nil operation which has no computational cost making C(0,m) = 0.\nCompared to the previous section (20) stays the same while (19) is minimized over 1 \u2264 y \u2264 t instead of 1 \u2264 y < t. This is because it is meaningful to remember the last internal state while there was no reason to remember the last hidden state. A numerical solution of C(t,m) for several different memory capacities is shown in Figure 5(a).\nD(t,m) = argmin 1\u2264y\u2264t Q(t,m, y) (5)\nAs seen in Figure 5(a), our methodology saves 95% of memory for sequences of 1000 (excluding input vectors) while using only 33% more time per training-iteration than the standard BPTT (assuming a single backward step being twice as expensive as a forward step)."}, {"heading": "3.3 Backpropagation though time with mixed state memorization (BPTT-MSM)", "text": "It is possible to derive an even more general model by combining both approaches as described in Sections 3.1 and 3.2. Suppose we have a total memory capacity m measured in terms of how much a single hidden states can be remembered. Also suppose that storing an internal RNN core state takes \u03b1 times more memory where \u03b1 \u2265 2 is some integer number. We will choose between saving a single hidden state while using a single memory unit and storing an internal RNN core state by using \u03b1\ntimes more memory. The benefit of storing an internal RNN core state is that we will be able to save a single forward operation during backpropagation.\nDefine C(t,m) as a computational cost in terms of a total amount of forward operations when running an optimal strategy. We use the following boundary conditions: C(t, 1) = 12 t(t + 1) as a cost reflecting the minimal memory approach, while C(t,m) = t for all m \u2265 \u03b1t when memory is plentiful and C(t\u2212 y,m) =\u221e for all m \u2264 0 and C(0,m) = 0 for notational convenience. We use a similar divide-and-conquer approach to the one used in previous sections.\nDefine Q1(t,m, y) as the computational cost if we choose to firstly remember a hidden state at position y and thereafter follow an optimal policy (identical to ( 18)):\nQ1(t,m, y) = y + C(y,m) + C(t\u2212 y,m\u2212 1) (6)\nSimilarly, define Q2(t,m, y) as the computational cost if we choose to firstly remember an internal state at position y and thereafter follow an optimal policy (similar to ( 4) except that now the internal state takes \u03b1 memory units):\nQ2(t,m, y) = y + C(y \u2212 1,m) + C(t\u2212 y,m\u2212 \u03b1) (7)\nDefine D1 as an optimal position of the next push assuming that the next state to be pushed is a hidden state and define D2 as an optimal position if the next push is an internal core state. Note that D2 has a different range over which it is minimized, for the same reasons as in equation 5:\nD1(t,m) = argmin 1\u2264y<t Q1(t,m, y) D2(t,m) = argmin 1\u2264y\u2264t Q2(t,m, y) (8)\nAlso define Ci(t,m) = Qi(t,m,D(t,m)) and finally:\nC(t,m) = min i Ci(t,m) H(t,m) = argmin i Ci(t,m) (9)\nWe can solve the above equations by using simple dynamic programming. H(t,m) will indicate whether the next state to be pushed into memory in a hidden state or an internal state, while the respective values if D1(t,m) and D2(t,m) will indicate the position of the next push."}, {"heading": "3.4 Removing double hidden-state memorization", "text": "Definition 3 of internal RNN core state would typically require for a hidden input state to be included for each memorization. This may lead to the duplication of information. For example, when an optimal strategy is to remember a few internal RNN core states in sequence, a memorized hidden output of one would be equal to a memorized hidden input for the other one (see Definition 3).\nEvery time we want to push an internal RNN core state onto the stack and a previous internal state is already there, we may omit pushing the input hidden state. Recall that an internal core RNN state when an input hidden state is otherwise not known is \u03b1 times larger than a hidden state. Define \u03b2 \u2264 \u03b1 as the space required to memorize the internal core state when an input hidden state is known. A relationship between \u03b1 and \u03b2 is application-specific, but in many circumstances \u03b1 = \u03b2 + 1. We only have to modify (7) to reflect this optimization:\nQ2(t,m, y) = y + C(y \u2212 1,m) + C(t\u2212 y,m\u2212 1y>1\u03b1\u2212 1y=1\u03b2) (10)\n1 is an indicator function. Equations for H(t,m), Di(t,m) and C(t,m) are identical to (8) and (9)."}, {"heading": "3.5 Analytical upper bound for BPTT-HSM", "text": "We have established a theoretical upper bound for BPTT-HSM algorithm as C(t,m) \u2264 mt1+ 1m . As the bound is not tight for short sequences, it was also numerically verified that C(t,m) < 4t1+ 1 m for t < 105 and m < 103, or less than 3t1+ 1 m if the initial forward pass is excluded. In addition to that, we have established a different bound in the regime where t < m m\nm! . For any integer value a and for all t < m a\na! the computational cost is bounded by C(t,m) \u2264 (a+ 1)t. The proofs are given in the supplementary material. Please refer to supplementary material for discussion on the upper bounds for BPTT-MSM and BPTT-ISM."}, {"heading": "3.6 Comparison of the three different strategies", "text": "Computational costs for each previously described strategy and the results are shown in Figure 6. BPTT-MSM outperforms both BPTT-ISM and BPTT-HSM. This is unsurprising, because the search space in that case is a superset of both strategy spaces, while the algorothm finds an optimal strategy within that space. Also, for a fixed memory capacity, the strategy memorizing only hidden states outperforms a strategy memorizing internal RNN core states for long sequences, while the latter outperforms the former for relatively short sequences."}, {"heading": "4 Discussion", "text": "We used an LSTM mapping 256 inputs to 256 with a batch size of 64 and measured execution time for a single gradient descent step (forward and backward operation combined) as a function of sequence length (Figure 2(b)). Please note that measured computational time also includes the time taken by backward operations at each time-step which dynamic programming equations did not take into the account. A single backward operation is usually twice as expensive than a orward operation, because it involves evaluating gradients both with respect to input data and internal parameters. Still, as the number of backward operations is constant it has no impact on the optimal strategy."}, {"heading": "4.1 Optimality", "text": "The dynamic program finds the optimal computational strategy by construction, subject to memory constraints and a fairly general model that we impose. As both strategies proposed by Chen et al. [2016] are consistent with all the assumptions that we have made in section 3.4 when applied to RNNs, BPTT-MSM is guaranteed to perform at least as well under any memory budget and any sequence length. This is because strategies proposed by Chen et al. [2016] can be expressed by providing a (potentially suboptimal) policy Di(t,m), H(t,m) subject to the same equations for Qi(t,m).\n4.2 Numerical comparison with Chen\u2019s \u221a t algorithm\nChen\u2019s \u221a t algorithm requires to remember \u221a t hidden states and \u221a t internal RNN states (excluding input hidden states), while the recursive approach requires to remember at least log2 t hidden states. In other words, the model does not allow for a fine-grained control over memory usage and rather saves some memory. In the meantime our proposed BPTT-MSM can fit within almost arbitrary constant memory constraints, and this is the main advantage of our algorithm.\nThe non-recursive Chen\u2019s \u221a t approach does not allow to match any particular memory budget making a like-for-like comparison difficult. Instead of fixing the memory budge, it is possible to fix computational cost at 2 forwards iterations on average to match the cost of the \u221a t algorithm and observe how much memory would our approach use. Memory usage by the \u221a t algorithm would be equivalent to saving \u221a t hidden states and \u221a t internal core states. Lets suppose that the internal RNN core state is \u03b1 times larger than hidden states. In this case the size of the internal RNN core state excluding the input hidden state is \u03b2 = \u03b1 \u2212 1. This would give a memory usage of Chen\u2019s algorithm as \u221a t(1 + \u03b2) = \u221a t(\u03b1), as it needs to remember \u221a t hidden states and \u221a t internal states where input hidden states can be omitted to avoid duplication. Figure 7 illustrates memory usage by our algorithm divided by \u221a t(1 + \u03b2) for a fixed execution speed of 2 as a function of sequence length and for different values of parameter \u03b2. Values lower than 1 indicate memory savings. As it is seen, we can save a significant amount of memory for the same computational cost. Another experiment is to measure computational cost for a fixed memory consumption of \u221a t(1 + \u03b2). The results are shown in Figure 7. Computational cost of 2 corresponds to Chen\u2019s \u221a t algorithm. This illustrates that our approach does not perform significantly faster (although it does not do any worse). This is because Chen\u2019s \u221a t strategy is actually near optimal for this particular memory budget. Still, as seen from the previous paragraph, this memory budget is already in the regime of diminishing returns and further memory reductions are possible for almost the same computational cost."}, {"heading": "5 Conclusion", "text": "In this paper, we proposed a novel approach for finding optimal backpropagation strategies for recurrent neural networks for a fixed user-defined memory budget. We have demonstrated that the most general of the algorithms is at least as good as many other used common heuristics. The main advantage of our approach is the ability to tightly fit to almost any user-specified memory constraints gaining maximal computational performance."}, {"heading": "A Pseudocode for BPTT-HSM", "text": "Below is a pseudocode of an algorithm which evaluates an optimal policy for BPTT-HSM. This algorithm has a complexity of O(t2 \u00b7m) but it is possible to optimize to to O(t \u00b7m) by exploiting convexity in t. In any case, this is a one-off computation which does not have to be repeated while training an RNN.\nAlgorithm 1: BPTT-HSM strategy evaluation. input : tmax \u2013 maximum sequence length; mmax \u2013 maximum memory capacity\n1 EVALUATESTRATEGY(tmax,mmax) 2 Let C and D each be a 2D array of size tmax \u00d7mmax 3 for r \u2208 {1, . . . , tmax} do 4 C[t][1]\u2190 t(t+1)2 5 for m \u2208 {t, . . . ,mmax} do 6 C[t][m]\u2190 2t\u2212 1 7 D[t][m]\u2190 1 8 for m \u2208 {2, . . . ,mmax} do 9 for t \u2208 {m+ 1, . . . , tmax} do\n10 Cmin \u2190\u221e 11 for y \u2208 {1, . . . , t\u2212 1} do 12 c\u2190 y + C[y][m] + C[t\u2212 y][m\u2212 1] 13 if c < Cmin then 14 Cmin \u2190 c 15 D[t][m]\u2190 y 16 C[t][m]\u2190 Cmin 17 return (C,D)\nAlgorithm 2, shown below, contains pseudocode which executes the precomputed policy.\nAlgorithm 2: BPTT-HSM strategy execution. input :D \u2013 previously evaluated policy; rnnCore \u2013 mutable RNN core network; stack \u2013 a stack\ncontaining memorized hidden states; gradHidden \u2013 a gradient with respect to the last hidden state; m \u2013 memory capacity available in the stack; t \u2013 subsequence length; s \u2013 starting subsequence index;\n1 EXECUTESTRATEGY(D, rnnCore, stack, gradHidden, m, t, s) 2 hiddenState = PEEK(stack) 3 if t = 0 then 4 return gradHidden 5 else if t = 1 then 6 output\u2190 FORWARD(rnnCore, GETINPUT(s), hiddenState) 7 gradOutput\u2190 SETOUTPUTANDGETGRADOUTPUT(s+ t, output) 8 (gradInput, gradHiddenPrevious)\u2190 BACKWARD(rnnCore, GETINPUT(s), hiddenState, 9 gradOuput, gradHidden)\n10 SETGRADINPUT(s+ t, gradInput) 11 return gradHiddenPrevious 12 else 13 y \u2190 D[t][m] 14 for i \u2208 {0, . . . , t\u2212 1} do 15 output, hiddenState\u2190 FORWARD(rnnCore, GETINPUT(s+ i), hiddenState) 16 PUSH(stack, hiddenState) 17 gradHiddenR\u2190 EXECUTESTRATEGY(D, rnnCore, stack, gradHidden, m\u2212 1, t\u2212 y, s+ y) 18 POP(stack) 19 gradHiddenL\u2190 EXECUTESTRATEGY(D, rnnCore, stack, gradHiddenR, m, y, s) 20 return gradHiddenL"}, {"heading": "B Upper bound of the computational costs for BPTT-SHM", "text": "B.1 General upper bound\nConsider the following dynamic program C(t,m) = min\n1\u2264y<t (y + C(t\u2212 y,m\u2212 1) + C(y,m)) (11)\nwith boundary conditions: C(t, 1) = 12 t(t+ 2) and C(t,m) = 2t\u2212 1 for all m \u2265 t Proposition 1. We have C(t,m) \u2264 mt1+1/m for all t,m \u2265 1.\nProof. It is straightforward to check that the bound is satisfied at the boundaries. Now let us define the boolean functions A(t,m) := {C(t,m) \u2264 mt1+1/m} and A(m) := {\u2200t \u2265 1, C(t,m) \u2264 mt1+1/m}. Let us prove by induction on m that A(m) is true. Thus assume A(m) is true and let us prove that A(m+ 1) is also true. For that, we will prove by induction on t that A(t,m+ 1) is true. Thus for any t \u2265 2, assume A(y,m+ 1) is true for all y < t and let us prove that A(t,m+ 1) is also true. We have\nC(t,m+ 1) = min 1\u2264y<t\n[ y + C(t\u2212 y,m) + C(y,m+ 1) ] (12)\n= min 1\u2264y<t\n[ y +m(t\u2212 y)1+1/m + (m+ 1)y1+1/(m+1) ] (13)\nusing our inductive assumption that A(y,m+ 1) and A(t\u2212 y,m) are true.\nFor any real number y \u2208 [1, t\u2212 1], define g(y) = y +m(t\u2212 y)1+1/m + (m+ 1)y1+1/(m+1). g is convex (as the sum of 3 convex functions) and is smooth over [1, t\u2212 1] with\ng\u2032(y) = 1\u2212 (m+ 1)(t\u2212 y)1/m + (m+ 2)y1/(m+1), and\ng\u2032\u2032(y) = m+ 1 m (t\u2212 y)1/m\u22121 + m+ 2 m+ 1 y1/(m+1)\u22121.\nNotice that g\u2032\u2032 is positive and convex, thus\nmax 1\u2264s\u2264t\u22121 |g\u2032\u2032(s)| = max(g\u2032\u2032(1), g\u2032\u2032(t\u2212 1)) \u2264 m+ 1 m (1 + (t\u2212 1)1/m\u22121) \u2264 4. (14)\nLet y\u2217 the (unique) optimum of g (i.e., such that g\u2032(y\u2217) = 0). Then we have C(t,m+ 1) \u2264 g(by\u2217c)\n\u2264 g(y\u2217) + (y\u2217 \u2212 by\u2217c)g\u2032(y\u2217) + 1 2 (y\u2217 \u2212 by\u2217c)2 max 1\u2264s\u2264t\u22121 |g\u2032\u2032(s)| \u2264 g(y\u2217) + 2 \u2264 g(y\u0303) + 2\nwhere y\u0303 defined as the unique solution to\nt\u2212 y = ym/(m+1). (15)\nNotice that for any t \u2265 2, y\u0303 \u2208 [1, t). We deduce from (13) that C(t,m+ 1) \u2264 y\u0303 +m(t\u2212 y\u0303)1+1/m + (m+ 1)y\u03031+1/(m+1) + 2\n\u2264 y\u0303 +my\u0303 + (m+ 1)y\u03031+1/(m+1) + 2 (16)\nNow, using the convexity of x 7\u2192 x1+1/(m+1) and since y < t, we have\nt1+1/(m+1) \u2265 y\u03031+1/(m+1) + (t\u2212 y\u0303)(1 + 1 m+ 1 )y\u03031/(m+1)\n= y\u03031+1/(m+1) + y\u0303m/(m+1)(1 + 1\nm+ 1 )y\u0303\n= y\u03031+1/(m+1) + (1 + 1\nm+ 1 )y\u0303 (17)\n(where the last equality derives from the definition of y\u0303 in (15)). Now putting (17) into (16) we deduce:\nC(t,m+ 1) \u2264 y\u0303 +my\u0303 + (m+ 1) [ t1+1/(m+1) \u2212 (1 + 1 m+ 1 )y\u0303 ] + 2\n= (m+ 1)t1+1/(m+1) \u2212 y\u0303 + 2 \u2264 (m+ 1)t1+1/(m+1),\nas soon as y\u0303 \u2265 2, which happens when t \u2265 4. Now the cases t < 4 (which actually corresponds to the 2 cases: (t = 3,m = 2) and (t = 3,m = 3)) are verified numerically.\nB.2 Upper bound for short sequences\nThe algorithm described in the previous section finds an optimal solution using dynamic programming. It is trival to show that C(t,m) is an increasing function in t and we will make use of this property. It is possible to prove a computational upper bound by finding a potentially sub-optimal policy and evaluating its cost. Alternatively, one can find a policy for a given computational cost, and then use this as an upper bound for an optimal policy.\nIt was established that when memory equals to the sequence (t = m) length then C(t,m) = 2t\u22121 < 2t. Define T (a,m) as the maximum sequence length t for which an average computational cost C(t,m)/t \u2264 a. Hence, we can clearly see that T (2,m) \u2265 m.\nProposition 2. We have T (a,m) \u2265 m a\u22121\n(a\u22121)!\nProof. This is clearly satisfied for the case a = 2. Assume that proposition is true for some value a. We prove by induction that this is also satisfied for all other values of a.\nConsider a sequence of length t =\n\u2211m\ni=1 T (a, i). We will make the first initial pass over the sequence at the cost t and will memorize hidden states spaced at intervals T (a,m), T (a,m \u2212 1) .. T (a, 2) (Figure 8). Once the hidden states are memorized, we can run the same backpropagation algorithm on each sub-sequence each time paying the cost of \u2264 a per time-step (Proposition 2). This will make the local cost of the algorithm C(t, a+ 1) \u2264 t+ ta = (a+ 1)t. As this makes the cost per time-step \u2264 a, T (a+ 1,m) \u2265 t = \u2211m i=1 T (a, i) \u2265 \u2211m i=1 ia\u22121 (a\u22121)! \u2265 ma a! .\nThis implies that C(t,m) \u2264 (a + 1)t when t \u2264 m a\na! . Please note that this is a much better result comparing to a strategy when interval is sub-divided into equal-sub-intervals several times recursively,\nas the later strategy would only give C(t,m) \u2264 (a+ 1)t for t \u2264 m a\naa while (a! a a) for the same\ncomputational cost. It turns out that it is non-trivial to invert this function to state computation explicitly as a function of t,m.\nB.3 Analytical upper bounds for BPTT-ISM and BPTT-MSM\nWhen we are capable of memorizing internal core states instead of hidden states, we can apply almost exactly the same calculation of the upper bound as in Section 3.5 while still being conservative. The main difference though a removal of a single forward operation per time-step. This would give us the upper bound of the computational cost as C(t,m) \u2264 at for t \u2264 m a\na! . The same upper bound of C(t,m) \u2264 mt1+ 1m can be assumed to be true for the case when t > m a\na! , because an internal state also includes a hidden state, and the derived optimal algorithm can not do any worse for the same number of m. Please note that in this case the same number of m constitutes for a larger actual memory usage, as the units of measurement are different. T (a,m) is the maximum sequence length for which a computational cost C(T (a,m),m) \u2264 at. Any upper bounds derived for the case of BPTT-HSM will also hold for the case of BPTT-MSM, because the later is generalization of the former technique, and an optimal policy found will be at least as good as."}, {"heading": "C Generalizing to deep feed-forward networks", "text": "BPTT-MSM can also be generalized to deep network architectures rather than RNNs as long as the computational graph is a linear chain. The main difference is that different layers in deep architectures are non-homogeneous (i.e., have different computational costs and memory requirements) while cores within the same RNN are homogeneous. This difference can be addressed by modifying the dynamic program formulation.\nTo start with, lets derive a strategy when only hidden states are stored. We can recall that an optimal policy of BPTT-HSM algorithm could be found by solving given dynamic programming equations.\nCost if we choose to memorize next state at position y and thereafter we follow an optimal policy:\nQ(t,m, y) = y + C(t\u2212 y,m\u2212 1) + C(y,m) (18)\nOptimal position of the next memorization:\nD(t,m) = argmin 1\u2264y<t Q(t,m, y) (19)\nComputational cost under the optimal policy:\nC(t,m) = Q(t,m,D(t,m)) (20)\nAs in the case of RNNs, we choose to remember only some of the intermediate output results (hidden states) and recompute all internal states (and other hidden states) on demand while fitting within some memory allowance. As sizes of internal representations of different layers are different, it is necessary to include a size of a \"working\" network layer into our current memory allowance. In the case of RNNs this constant factor could be comfortably ignored. In addition to that, hidden states produced by different layers will also have different sizes.\nSuppose that the cost of recomputing layer y is uy while the size of a hidden state computed after step y has the size of sy . We also assume that the initial input vector is always available.\nDefine U(x, y) = \u2211x+y\ni=x+1 ui as a cumulative computational cost of forward propagation when x bottom layers are cut-off and we are forward propagating over y layers . Also, define pi to be the size of an internal state of some given network layer: this defined as the minimum memory requirement to execute forward and backward operations on a given layer. Neither forward not backward operation is impossible if we have less memory left that the operation requires. Define the maximum memory usage when executing forward operation on layers from x+ 1 to y inclusive as P (x, y) = maxx<i\u2264y pi. For the reasons discussed previously it is convenient to set computational\ncost to infinity when we have have less than required memory available: K(x, y,m) = 0 if P (x, y) \u2264 m and K(x, y,m) =\u221e if P (x, y) > m. Consider a part of the neural network with x bottom layers cut-off. Define C(t,m \u2212 1, x) as a computation cost of a combined forward and back-propagation on such network over t bottom layers.\nThe cost of a combined forward and back-propagation of the cut-off section assuming that the next memorization happens at position y is:\nQ(t,m, y, x) = U(x, y) +K(x, y,m) + C(t\u2212 y,m\u2212 sx+y, x+ y) + C(y,m, x) (21)\nK(x, y,m) prevents us from making an impossible back-propagation commitment when memory is not enough.\nIt is now trivial to define position of the next memorization as:\nD(t,m, x) = argmin 1\u2264y<t Q(t,m, y, x) (22)\nAnd hence we can evaluate a cost under the optimal policy:\nC(t,m, x) = Q(t,m,D(t,m, x), x) (23)\nAs previously, we have to set boundary conditions:\nWhen no extra memory left:\nC(t, 0, x) = x+t\u2211 i=x (t\u2212 i+ 1)ui (24)\nWhen the memory is plentiful (m >= \u2211x+t\ni=x si):\nC(t,m, x) = ut + x+t\u22121\u2211 i=x 2ui (25)\nAnother boundary condition applies when the network has zero depth: C(t,m, x) = 0 when x+ t > N and N is the number of layer in the network and also C(t,m, x) = 0 when t \u2264 0. It is convenient to set C(t,m, x) =\u221e for m < 0 to emphasize that memory can never become negative. We can solve the equations using dynamic programming, but unlike in the recurrent case when dynamic programming required filling a 3D rather than a 2D array. This means that evaluation of the strategy may become impractical for sequences longer than a few hundred, but a good thing is that a strategy is a one-off computational.\nThe algorithm is executed as follows: if any any point we start a recursive call of the algorithm at layer x while having memory allowance m, we evaluate y = D(t,m, x), forward-propagate states until y, memorize the next state and call the algorithm recursively both parts of the sequence.\nSimilarly equations can be generalized for BPTT-ISM and BPTT-MSM algorithms,"}], "references": [{"title": "Training deep nets with sublinear memory cost", "author": ["Tianqi Chen", "Bing Xu", "Zhiyuan Zhang", "Carlos Guestrin"], "venue": "arXiv preprint arXiv:1604.06174,", "citeRegEx": "Chen et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2016}, {"title": "The data-flow equations of checkpointing in reverse automatic differentiation", "author": ["Benjamin Dauvergne", "Laurent Hasco\u00ebt"], "venue": "In Computational Science\u2013ICCS", "citeRegEx": "Dauvergne and Hasco\u00ebt.,? \\Q2006\\E", "shortCiteRegEx": "Dauvergne and Hasco\u00ebt.", "year": 2006}, {"title": "A first look at music composition using LSTM recurrent neural networks", "author": ["Douglas Eck", "Juergen Schmidhuber"], "venue": "Istituto Dalle Molle Di Studi Sull Intelligenza Artificiale,", "citeRegEx": "Eck and Schmidhuber.,? \\Q2002\\E", "shortCiteRegEx": "Eck and Schmidhuber.", "year": 2002}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["Alan Graves", "Abdel-rahman Mohamed", "Geoffrey Hinton"], "venue": "In Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "Graves et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2013}, {"title": "Supervised Sequence Labelling with Recurrent Neural Networks", "author": ["Alex Graves"], "venue": "Studies in Computational Intelligence. Springer,", "citeRegEx": "Graves.,? \\Q2012\\E", "shortCiteRegEx": "Graves.", "year": 2012}, {"title": "Neural turing machines", "author": ["Alex Graves", "Greg Wayne", "Ivo Danihelka"], "venue": "arXiv preprint arXiv:1410.5401,", "citeRegEx": "Graves et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Graves et al\\.", "year": 2014}, {"title": "Learning to transduce with unbounded memory", "author": ["Edward Grefenstette", "Karl Moritz Hermann", "Mustafa Suleyman", "Phil Blunsom"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Grefenstette et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Grefenstette et al\\.", "year": 2015}, {"title": "Draw: A recurrent neural network for image generation", "author": ["Karol Gregor", "Ivo Danihelka", "Alex Graves", "Daan Wierstra"], "venue": "arXiv preprint arXiv:1502.04623,", "citeRegEx": "Gregor et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Gregor et al\\.", "year": 2015}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "Hochreiter and Schmidhuber.,? \\Q1997\\E", "shortCiteRegEx": "Hochreiter and Schmidhuber.", "year": 1997}, {"title": "Asynchronous methods for deep reinforcement learning", "author": ["Volodymyr Mnih", "Adria Puigdomenech Badia", "Mehdi Mirza", "Alex Graves", "Timothy P Lillicrap", "Tim Harley", "David Silver", "Koray Kavukcuoglu"], "venue": "In Proceedings of the International Conference on Machine Learning (ICML),", "citeRegEx": "Mnih et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2016}, {"title": "Learning internal representations by error propagation", "author": ["David E Rumelhart", "Geoffrey E Hinton", "Ronald J Williams"], "venue": "Technical report, DTIC Document,", "citeRegEx": "Rumelhart et al\\.,? \\Q1985\\E", "shortCiteRegEx": "Rumelhart et al\\.", "year": 1985}, {"title": "Deep attention recurrent Q-network", "author": ["Ivan Sorokin", "Alexey Seleznev", "Mikhail Pavlov", "Aleksandr Fedorov", "Anastasiia Ignateva"], "venue": "arXiv preprint arXiv:1512.01693,", "citeRegEx": "Sorokin et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Sorokin et al\\.", "year": 2015}, {"title": "Generating text with recurrent neural networks", "author": ["Ilya Sutskever", "James Martens", "Geoffrey E Hinton"], "venue": "In Proceedings of the 28th International Conference on Machine Learning", "citeRegEx": "Sutskever et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Sutskever et al\\.", "year": 2011}, {"title": "Backpropagation through time: what it does and how to do it", "author": ["Paul J Werbos"], "venue": "Proceedings of the IEEE,", "citeRegEx": "Werbos.,? \\Q1990\\E", "shortCiteRegEx": "Werbos.", "year": 1990}], "referenceMentions": [{"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al.", "startOffset": 6, "endOffset": 40}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al.", "startOffset": 120, "endOffset": 147}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al.", "startOffset": 120, "endOffset": 172}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al.", "startOffset": 120, "endOffset": 187}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al.", "startOffset": 120, "endOffset": 230}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al. [2015], Mnih et al.", "startOffset": 120, "endOffset": 281}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al. [2015], Mnih et al. [2016]) settings.", "startOffset": 120, "endOffset": 301}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al. [2015], Mnih et al. [2016]) settings. Other successful RNN architectures include Neural Turing Machines (NTM) (Graves et al. [2014]), DRAW network (Gregor et al.", "startOffset": 120, "endOffset": 406}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al. [2015], Mnih et al. [2016]) settings. Other successful RNN architectures include Neural Turing Machines (NTM) (Graves et al. [2014]), DRAW network (Gregor et al. [2015]), Neural Transducers (Grefenstette et al.", "startOffset": 120, "endOffset": 443}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al. [2015], Mnih et al. [2016]) settings. Other successful RNN architectures include Neural Turing Machines (NTM) (Graves et al. [2014]), DRAW network (Gregor et al. [2015]), Neural Transducers (Grefenstette et al. [2015]).", "startOffset": 120, "endOffset": 492}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al. [2015], Mnih et al. [2016]) settings. Other successful RNN architectures include Neural Turing Machines (NTM) (Graves et al. [2014]), DRAW network (Gregor et al. [2015]), Neural Transducers (Grefenstette et al. [2015]). Backpropagation Through Time algorithm (BPTT) (Rumelhart et al. [1985], Werbos [1990]) is typically used to obtain gradients during training.", "startOffset": 120, "endOffset": 565}, {"referenceID": 2, "context": "LSTM (Hochreiter and Schmidhuber [1997]) in particular is an RNN architecture that has excelled in sequence generation (Eck and Schmidhuber [2002], Sutskever et al. [2011], Graves [2012]), speech recognition (Graves et al. [2013]) and reinforcement learning (Sorokin et al. [2015], Mnih et al. [2016]) settings. Other successful RNN architectures include Neural Turing Machines (NTM) (Graves et al. [2014]), DRAW network (Gregor et al. [2015]), Neural Transducers (Grefenstette et al. [2015]). Backpropagation Through Time algorithm (BPTT) (Rumelhart et al. [1985], Werbos [1990]) is typically used to obtain gradients during training.", "startOffset": 120, "endOffset": 580}, {"referenceID": 10, "context": "Backpropagation through Time (BPTT) (Rumelhart et al. [1985], Werbos [1990]) is one of the commonly used techniques to train recurrent networks.", "startOffset": 37, "endOffset": 61}, {"referenceID": 10, "context": "Backpropagation through Time (BPTT) (Rumelhart et al. [1985], Werbos [1990]) is one of the commonly used techniques to train recurrent networks.", "startOffset": 37, "endOffset": 76}, {"referenceID": 0, "context": "The general idea of trading computation time and memory consumption in general computation graphs has been investigated in the automatic differentiation community (Dauvergne and Hasco\u00ebt [2006]).", "startOffset": 164, "endOffset": 193}, {"referenceID": 0, "context": "proposed subdividing the sequence of size t into \u221a t equal parts and memorizing only hidden states between the subsequences and all internal states within each segment (Chen et al. [2016]).", "startOffset": 169, "endOffset": 188}, {"referenceID": 0, "context": "As both strategies proposed by Chen et al. [2016] are consistent with all the assumptions that we have made in section 3.", "startOffset": 31, "endOffset": 50}, {"referenceID": 0, "context": "As both strategies proposed by Chen et al. [2016] are consistent with all the assumptions that we have made in section 3.4 when applied to RNNs, BPTT-MSM is guaranteed to perform at least as well under any memory budget and any sequence length. This is because strategies proposed by Chen et al. [2016] can be expressed by providing a (potentially suboptimal) policy Di(t,m), H(t,m) subject to the same equations for Qi(t,m).", "startOffset": 31, "endOffset": 303}], "year": 2016, "abstractText": "We propose a novel approach to reduce memory consumption of the backpropagation through time (BPTT) algorithm when training recurrent neural networks (RNNs). Our approach uses dynamic programming to balance a trade-off between caching of intermediate results and recomputation. The algorithm is capable of tightly fitting within almost any user-set memory budget while finding an optimal execution policy minimizing the computational cost. Computational devices have limited memory capacity and maximizing a computational performance given a fixed memory budget is a practical use-case. We provide asymptotic computational upper bounds for various regimes. The algorithm is particularly effective for long sequences. For sequences of length 1000, our algorithm saves 95% of memory usage while using only one third more time per iteration than the standard BPTT.", "creator": "LaTeX with hyperref package"}}}