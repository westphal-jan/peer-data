{"id": "1606.04000", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Jun-2016", "title": "Using a Distributional Semantic Vector Space with a Knowledge Base for Reasoning in Uncertain Conditions", "abstract": "the large inherent dynamic inflexibility and incompleteness of commonsense knowledge query bases ( ip kb ) experiments has thus limited their usefulness. we then describe with a system just called disk displacer for performing one kb array queries extended with the analogical capabilities of loading the word2vec distributional storage semantic vector meaning space ( database dsvs ). this computation allows the evaluation system operator to fully answer queries with any information bytes which was not well contained enclosed in the original kb in beyond any explicit form. by performing analogous queries on memory semantically modifying related terms differently and correctly mapping their answers back into more the context of measuring the initial original query using displacement - vectors, we are able to give seemingly approximate answers to many questions incorrectly which, if well posed to the kb controller alone, would definitely return no results.", "histories": [["v1", "Mon, 13 Jun 2016 15:45:00 GMT  (115kb,D)", "http://arxiv.org/abs/1606.04000v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["douglas summers-stay", "clare voss", "taylor cassidy"], "accepted": false, "id": "1606.04000"}, "pdf": {"name": "1606.04000.pdf", "metadata": {"source": "CRF", "title": "Using a Distributional Semantic Vector Space with a Knowledge Base for Reasoning in Uncertain Conditions", "authors": ["Douglas Summers-Stay", "Clare Voss", "Taylor Cassidy"], "emails": ["douglas.a.summers-stay.civ@mail.mil"], "sections": [{"heading": null, "text": "We also show how the hand-curated knowledge in a KB can be used to increase the accuracy of a DSVS in solving analogy problems. In these ways, a KB and a DSVS can make up for each other\u2019s weaknesses.\nKeywords: semantic vector space, knowledge base, analogy"}, {"heading": "1 Introduction", "text": "A knowledge base (KB) is a database of facts about the world, together with an inference engine to perform deductive reasoning on those facts. Most of the facts in a KB are expressed using first-order predicates, creating links between two objects in the database that expresses their relationship, such as (capitalCity Paris France). The brain organizes long term, explicit, semantic memory in a way that is very different from a knowledge base. We seem to be able to call up a concept from memory\n\u2022 by thinking of concepts whose meaning is similar.\n\u2022 by completing an analogy.\n\u2022 based on attributes, including attributes we didn\u2019t previously realize characterized that concept.\nar X\niv :1\n60 6.\n04 00\n0v 1\n[ cs\n.A I]\n\u2022 by seeing an example of the concept.\n\u2022 by deductive reasoning based on related concepts.\n\u2022 by calling to mind an image and reasoning about details of the image.\nSuppose I am looking for a specific animal\u2013 a cardinal, for example. If I had a set of facts in my memory like \u201cyou can find things where they live\u201d and \u201call birds live in the woods\u201d and \u201ccardinals are a type of bird\u201d then I could reason using deductive logic that I should look for cardinals in the woods. But I don\u2019t actually have many facts which are universally true in my memory, and deductive reasoning relies heavily on universal statements. What I have instead are many specific pieces of knowledge, which are useful only for analogical reasoning: I have often heard bluejays in trees, and cardinals look a little like bluejays (except red instead of blue and black) and there are a lot of trees in the woods. I know that hummingbirds live in tiny nests in small trees and eagles build enormous eyries in tall trees (which is nearly the same thing as a nest), and cardinals are somewhere in between, so (reasoning by a kind of analogy) I am looking for a nest a few times the size of a cardinal in an average-sized tree. Maybe I could find them by looking for what they like to eat, but I\u2019m not sure exactly what cardinals eat. I\u2019m nearly certain sparrows like to eat small seeds, and I\u2019m pretty sure birds eat little bugs. Maybe larger birds eat larger bugs? But blue whales eat krill, which is very tiny, so not always, though if a bigger bird eats smaller bugs it must eat a lot more of them... and so on. It is a mess of biased reasoning, stereotypes, prejudice, ignorance, and unfounded analogy; but I come to a sensible conclusion that if not exactly correct is workable, at least. When it is a problem we know very little about, such reasoning takes a little time and effort, but many times a day we solve similar problems nearly instantly and without conscious thought.\nIf we try to imagine doing this kind of thing with a knowledge base, it looks impossible. How could we ever hope to encode all the facts we know about these subjects, and to what degree they are certain, and in what ways they are related? How could we hope to build a reasoning system that can handle the kind of fuzzy, approximate, analogical, incorrect reasoning I am describing, and come up with any kind of useful results? The system described in this paper is an attempt to solve such problems.\nSince the 1970s, researchers have been attempting to build large knowledge bases that contain much of the common sense knowledge that we make use of whenever we interpret a sentence or answer a question. The results of this effort have been disappointing, due to two main difficulties. The first is that a KB is inflexible: if a query is not entered using exactly the right terms and predicates that the creators of the KB envisioned, it gives no answer at all. The second problem is that all KBs are incomplete: because all facts need to be entered by hand, even decades of work have left enormous gaps in what KBs contain about the world.\nIn the last few years, a new approach has appeared to encoding semantic relations that implicitly contains a great deal of the same kind of world knowledge we would like to have in a KB. Using a large corpus of natural language text, a distributional semantic vector space (DSVS) can be automatically created. A DSVS represents natural language words and phrases as high-dimensional vectors. Vectors which are nearby1 in this space are semantically similar. A remarkable property of these vectors is that one can perform a kind of analogical reasoning by simply doing arithmetic with these vectors: subtract the vector for the word \u2018man\u2019 from the vector for \u2018king\u2019 and add the vector for \u2018woman\u2019 and one gets a vector very close to the vector for the term \u2018queen.\u2019 This ability to automatically find analogies has enormous potential,\n1Nearness in a DSVS is typically measured using a cosine metric or a Euclidean metric.\nand research into the area has exploded since the word2vec DSVS was introduced in [16]. The challenge in using a DSVS is finding ways to handle approximate and implicit knowledge.\nSuppose we want the answer to a query using a term that has no facts asserted regarding it in the KB. A DSVS allows us to find related terms which are in the database, and find the answers to those related queries. This is very useful at overcoming the KB inflexibility problem. However, the word2vec DSVS allows us to go one step farther, and address the KB incompleteness problem as well. We can make use of these related terms and their associated query results to set up an analogy problem with the original unknown term so that its solution (obtained from the DSVS) is the answer to the original query. Both the KB and DSVS have explicit maps to natural language, which allows us to connect concepts in the KB to concepts in the DSVS and back by way of the natural language term they are both associated with. We have built a system called Displacer that connects a KB and DSVS in this way, and demonstrated the increases in coverage and accuracy that the system produces on a range of tasks."}, {"heading": "2 Biological Inspiration", "text": "In 1984, Geoff Hinton [12] outlined ways in which distributed representations, characteristic of a DSVS, were more biologically plausible than the local representations used in KBs. He pointed out that both the strengths of human memory (content-addressible, generalization, analogy making) and its weaknesses (the difficulty of remembering an arbitrary string of concepts) are similar to those of distributed representations.\nBrain-imaging studies have likewise suggested that concepts are represented in the brain as distributed networks of neural activation [18]. A DSVS can be interpreted as a neurally plausible model of how memories could be encoded. [2]. In particular, the analogical-reasoning capability of a DSVS can be understood as an example of the relational priming model of analogy making outlined in [15]. There is evidence that object categories are represented as a continuous semanatic space across the surface of the brain. [14] The brain\u2019s slow operating speed and massive paralellism (compared to a CPU) also hint that whatever operations are being performed must be very short, simple programs operating on large vectors, more characteristic of A DSVS than a KB. Together, all of these clues suggest that whatever representation of concepts is used in the brain, it is much more similar to a DSVS than a KB.\nThe system described in this paper is an attempt to take advantage of the benefits that these more neurologically plausible representations of concepts allow. Its hybrid nature is probably merely an intermediate step towards an integrated model in which all the operations in deductive reasoning are also carried out on the vectors themselves. In the meantime, however, the KB, while not itself biologically inspired or plausible, is convenient for applying mutiple Horn rules and keeping track of the steps of the reasoning process in a way that is not yet convenient in a DSVS."}, {"heading": "3 Background", "text": "Here we describe how a KB and a DSVS are used, and connect this effort with previous research into combining the two. We have not yet tackled the problem of parsing natural language queries into KB queries, though that would be an important component of a finished system."}, {"heading": "3.1 Answering Queries with the ResearchCyc KB", "text": "Queries in ResearchCyc are formulated in a lisp-like language called CycL. A typical query is (capitalCity ?X France). The predicate, capitalCity, is the first term in the triple. The second term in this case is a variable, represented as ?X. The answers to the query are the expressions in CycL which substituted for ?X make a true statement, as deduced from the knowledge and rules in the KB.\nThe ResearchCyc KB contains natural language paraphrases for most concepts in the database, and has the ability to convert noun phrases into the corresponding Cyc representation. For example, the noun phrase \u201crich ruler\u201d returns the following possible Cyc interpretations:\nword2cyc Cyc command: (ps-get-cycls-for-phrase \u201crich ruler\u201d) Results: (SubcollectionOfWithRelationToFn Leader personalWealthOwned GreatWealth)a (SubcollectionOfWithRelationToFn Leader affiliatedWith MarkRich) (SubcollectionOfWithRelationToFn Leader affiliatedWith AdrienneRich) (SubcollectionOfWithRelationToFn Leader affiliatedWith RichardCronin-Musician) (CollectionIntersection2Fn Leader (SubcollectionOfWithRelationToFn HomoSapiens lastName \u201crich\u201d)) (SubcollectionOfWithRelationToTypeFn Leader affiliatedWith (SubcollectionOfWithRelationToFn HomoSapiens lastName \u201crich\u201d))b\nai.e. \u201cwealthy leader\u201d bi.e. \u201cleader named (or affiliated with someone named) Rich\u201d\nThe possible interpretations of \u201crich\u201d in terms of food (containing sugar and cream) and \u201cruler\u201d as a tool (a shorter yardstick) are ruled out by the KB due to their incompatibility with each other:\u201crich\u201d in that sense can only describe food, and \u201cruler\u201d in that sense cannot own wealth.\nIn addition, Cyc has a limited ability to generate natural language paraphrases for the statements it generates in response to queries. For example, feeding the first Cyc result for \u201crich ruler\u201d above back into the KB gives the following (mildly incorrect and stilted English) paraphrase:\ncyc2word Cyc command: (generate-text-w/sentential-force \u2019(#$SubcollectionOfWithRelationToFn #$Leader #$personalWealthOwned #$GreatWealth) ) Result: \u201cleader whose personal wealth is: wealth\u201d\nThese two functions (which we call word2cyc and cyc2word to be consistent with the name of the function word2vec), allow the Displacer system we\u2019ve constructed to take a natural language term or phase, include it in a query, and map the answer to the query back into natural language (see Fig. 1). While ResearchCyc has a large vocabulary, many terms do not map to any expression in the KB. In contrast, the DSVS contains essentially all commonly used English words. We additionally used synonym and part-of-speech information from wordnet to augment the KB for some tasks.\nUsing the ResearchCyc KB to support web queries is explored in [7]. They write, \u201cAlthough problematic, it would be worthwhile to use ResearchCyc to support web queries. The reason is that, as far as we know, it is the only ontology that contains linguistic, semantic and factual\nknowledge.\u201d This is a major reason we chose to use ResearchCyc as the KB in these experiments as well."}, {"heading": "3.2 Solving Analogies with the word2vec DSVS", "text": "Proportional analogies were introduced by Aristotle. In the 1980s and early 90s, researchers attempted to solve analogy problems using KBs. [11] suggested using the structure of concepts to find analogies, rather than the more obvious matching of relations. Unfortunately, as [13] pointed out, such structure is heavily dependent on the preconceptions inherent in the design of the knowledge base. The use of distributional semantic information was a breakthrough, allowing the system of [22] to score at human level on multiple-choice SAT analogy questions. The word2vec DSVS [16] uses an efficient method to build the vector space, allowing it to be created with hundreds of billions of words of training data. Except for this capability of using a larger training set and some well-chosen parameters, however, word2vec is essentially optimizing the same objective as the latent semantic analysis (LSA) approach to building semantic vectors.\nThe word2vec DSVS represents English words and phrases as points in a high-dimensional space. These points have the property that the relationship between two words is to some extent encoded by the vector between them. For example, the vector for \u201cking\u201d with the vector for \u201cman\u201d subtracted from it is a new vector encoding something about the difference between an ordinary man and a man who is a king. This can be thought of as a predicate relation we could call \u201croyal\u201d that maps \u201cman\u201d to \u201cking:\u201d\n(royal man ?X)\u21d2 X = king When applied to another term such as \u201cwoman,\u201d this returns a vector near to the vector for \u201cqueen:\u201d (royal woman ?X)\u21d2 X \u2248 queen2 There are a few differences between predicates in a knowledge base and these relation vectors in the DSVS. First, each relation vector is only approximate. Some of them, such as the ones\n2The basic reason why word2vec is able to solve these kinds of analogies is explained clearly in [1].\nencoding royalty, plurality, or capital cities, are close approximations that are valid for most terms on which they are defined. Others, such as the ones encoding hypernyms, vary a lot from one term to another [17].\nA second difference is that a predicate can return zero, one, or many results, while a relation vector is limited to a single result. In some cases returning multiple near neighbors to the resultant vector gives useful results, but for other types of predicates the results have a different structure. For example, the hypernyms of a given term are not clustered together in semantic space but instead form a tree-like structure with the term at a leaf of the tree.\nFor these reasons, one cannot simply define a single vector, or even a tensor (a mapping from the full vector space into the same vector space) that represents a predicate correctly in many cases. However, assuming that each individual relation vector (representing a mapping between a term and one of its query results) is applicable to nearby semantic vectors, we can use relations that we know to be true to apply to nearby search terms to find their analogous results. This is making the assumption that predicate relation vectors form a kind of manifold, where the closer to the original term in semantic space, the more likely the relation will be accurate. In the case of one-to-many predicates, we will need to find a unique vector for each of the many search results and apply each to the new search term to get the corresponding result.\nWe used a version of the word2vec DSVS trained on over 100 billion words of text from Google News. This contains the most common million words and short phrases (up to three words) from the dataset. There was little preprocessing done on this data so words exist in both capitalized and commonly misspelled forms. (Such uses are usually very close semantically.) Each term or phrase is represented by a 300 dimensional vector.\nThe functions word2vec and vec2word map natural language words and phrases into the DSVS. If the phrase appears verbatim within the DSVS, word2vec returns that vector. If not, the vector returned is the average of the vectors for each of the words in the phrase individually (ignoring articles and the word \u201cof\u201d). This average has been shown to be semantically near\nto the relevant concept in the DSVS in many cases.3 The function vec2word returns the most similar words and phrases to a given vector in the DSVS. We use approximate nearest neighbors 4 to quickly find similar vectors to a given vector and return the associated word or phrase.\nIt is important to note that the DSVS may not have learned all the analogies which we would potentially like to make use of. Finding analogies between terms and their antonyms, for example, proved to be surprisingly difficult for word2vec."}, {"heading": "3.3 Using a KB with a DSVS", "text": "In [16] the creators of word2vec write, \u201cOur ongoing work shows that the word vectors can be successfully applied to automatic extension of facts in Knowledge Bases, and also for verification of correctness of existing facts.\u201d They see the DSVS as being used as a resource to add assertions into knowledge bases and to verify existing assertions. The work described in this paper uses the DSVS for a similar purpose, but instead of asserting the facts directly, obtains them from the DSVS as needed. The disadvantage of this on-the-fly approach is that the assertions can\u2019t be used as intermediate steps in the reasoning process. However, any fact whose only source is a DSVS is inherently uncertain, and this makes adding them directly to the KB problematic. Our approach uses hand-verified assertions throughout the reasoning process, and only at the end brings in analogical reasoning through the DSVS.\nThere has been some research into using semantic similarity to perform queries not just on the input terms but on similar terms as well. This can take place throughout the reasoning process and on the final results. A good survey of query expansion is [4]. The idea of using a DSVS to extend the capability of a KB as a query-KB semantic matching technique is explored in [10]. The approach described in this paper is similar, but the ability to make use of the analogy-forming properties of the DSVS (to map the results back into the context of the original search terms) allows it to answer many queries which would be impossible in these other systems.\nThere has been some exploration of how various relations are encoded into the DSVS. [17] for example, explores how hyponyms swarm around a term. The possibility has also been explored of reshaping a DSVS according to verified facts in [8]. One problem with doing this is that other relations, not explicitly included in such reshaping, may be distorted and so no longer have the analogical properties they had in the original DSVS. [23] also explores putting a knowledge graph (that is, a KB) into the space of a DSVS.\nUltimately, maintaining a KB and a DSVS separately does not seem to be the most elegant solution to the problem, however. Methods that create or modify a vector space from a KB directly allow the two to be combined in a single representation which could be used directly for both deductive and analogical reasoning. AnalogySpace, built from the large KB ConceptNet[20], is one such example. Knowledge graph embedding seems promising, especially when combined with knowledge extraction efforts such as KNEXT[19] and NELL[3]. At the moment, however, a KB still provides certain features these systems do not, such as making explicit the chain of reasoning to reach a conclusion."}, {"heading": "4 Experiments with Answering Queries", "text": "The first experiment (3.1) demonstrates how semantic similarity can be used to estimate which of two answers to a query is more likely to be correct, based on the results of the query on similar\n3The sum and the average are identical when semantic distance is measured using a cosine distance, as it is in many of these papers.\n4A Matlab wrapper by Shai Bagon for a k-d tree ANN library by David Mount and Sunil Arya.\nterms. The second experiment (3.2) is an attempt to estimate the likelihood of finding the best answer to a query within the first few results returned by Displacer. The third experiment (3.3) shows how Displacer can be used on queries with many correct answers. The last two experiments (4.1 and 4.2) use the components of Displacer in a different arrangement to show how the KB can be used to enhance the performance of the DSVS in solving analogies, rather than answering queries. The combination of a KB and DSVS is shown to be better at the tasks designed for either one."}, {"heading": "4.1 Experiment: Estimating the gender of given names", "text": "The purpose of this experiment was to test the ability of Displacer to correctly answer a query on an unknown term when there are two likely possibilities for the result in the knowledge base. We used data from the 1990 U.S. Census Bureau on the 800 most popular names for men and women in the U.S (which do not appear on the list for the other gender). We queried the system on the gender of the individual with each name. The KB contains gender and name information for some celebrities and historical individuals. Of the 1600 names, only 146 were recognized as belonging to some individual about which the KB had gender information. For the rest, it estimated the answer based on the responses to similar terms. Responses where more than 50% of names received the label male were classified as male names, and similarly for female names."}, {"heading": "4.1.1 Approach", "text": "Displacer was used as follows for this experiment:\n1. Begin with a list of the 800 most popular uniquely male and female names from U.S. census data. For each name, do the following:\n2. Map the name from an English word string to a vector using word2vec.\n3. Find the nearest neighbors of the vector in the DSVS.\n4. Map the nearest neighbors from vectors to English words using vec2word.\n5. Map the English words to Cyc constants using word2cyc.\n6. Search Cyc for famous individuals with the same given name, and return the gender of those famous individuals.\n7. Map the resulting Cyc expressions into English words (\u2018male\u2019 and \u2018female\u2019) using cyc2word.\n8. Map the results from the previous step to vectors using word2vec.\n9. Average the vectors and compare the distance from the average vector to the vectors for \u2018male\u2019 and\u2018female.\u2019"}, {"heading": "4.1.2 Results", "text": ""}, {"heading": "4.1.3 Discussion", "text": "The methodology here could perhaps be improved. The names in the database come from all over the world (though with a heavy western bias), while in the test set they only come from the United States. Regardless, the system is clearly making correct inferences in most cases. The underlying reason for this simple. Female names are often used in sentences together with the word \u2018she\u2019 in similar contexts, leading them to be mapped close together in the DSVS. The vector leading from any one of these names to the vector for \u2018Female\u2019 is close to identical (and similarly for male names and the vector for \u2018Male\u2019)."}, {"heading": "4.2 Experiment: Estimating probability of finding single correct answers", "text": "In the previous experiment, there were only two possible answers, and it was only necessary to discriminate between them. For other predicates such as capitalCity or animalTypeMakesSoundType querying on any term gives a unique result. Displacer is able to take all of these unique results and create a combined estimate for queries on terms not in the KB. In the word2vec DSVS, the vector from term A (e.g. France) to its result B (Paris) can be applied to term A\u2019 (England) to estimate its result B\u2019 (London). By averaging several of these vectors, we can reduce noise and obtain a high-quality estimate.\nChoosing A as near as possible to A\u2019 is expected to give the best results, since the contexts will be most similar and the vector between A and B most nearly parallel to the vector between A\u2019 and B\u2019. However, there will inevitably be noise in the context, and averaging more vectors together will tend to reduce this noise. Empirically, these two competing tendencies tend to give a minimum between 3 and 5 neighbors averaged, and follow a general shape of a dip followed by a rise that levels off, as seen in Fig. 3."}, {"heading": "4.2.1 Approach", "text": "In this experiment, we chose predicates for which each query returns only a single result, and most of those results were unique. The steps that Displacer followed in this experiment were similar to those in the previous experiment, but the results were mapped back using the displacement vectors in the final steps. As a concrete example, the procedure below was followed for the first query.\n1. Query the KB to obtain a list of countries.5 For each country, do the following:\n5In this experiment, we used a leave-one-out methodology since the goal was to estimate how often using the full KB would give the right answer.\n2. Map the name of the country from an English word string to a vector using word2vec.\n3. Find the nearest neighbors of the vector in the DSVS.\n4. Map the nearest neighbors from vectors to English words using vec2word.\n5. Map the English words to Cyc expressions using word2cyc.\n6. Search Cyc for the capitalCity of the constants in the previous step. If the expression is not a country, it will have no capital city and be ignored.\n7. Map the resulting Cyc expressions into English words (the names of capital cities) using cyc2word.\n8. Map the results from the previous step to vectors using word2vec.\n9. Using the similar country vector from step 3, the similar capital vector from step 9, and the original country vector from step 2, calculate\n(estimated capital vector) = (similar capital vector) - (similar country vector) + (original country vector)\n10. average the estimated capital vectors from all near neighbors.\n11. map the average estimated capital vector from the previous step to the closest English words using vec2word."}, {"heading": "4.2.2 Results", "text": ""}, {"heading": "4.2.3 Discussion", "text": "These probabilities apply to other query terms which are in the DSVS but not the KB. The query (capitalCity Germany ?X) returns no results from the KB, because Germany was not yet a reunited country when the information was entered. However, because most other capital cities and their corresponding countries are included in the KB, the analogy between many of those countries and their capitals and between Germany and Berlin is very well supported, and the correct answer , Berlin, has a lower sum of distances than other nearby terms, such as Frankfurt.\nThis probability estimate is not perfect. It may be the case, for example, that certain facts not asserted in the KB are less frequently encountered facts, in which case the DSVS is going to have a poorer estimate of those facts as well. The process also requires knowing what general type of answer is acceptable for the given predicate and term, in order to take the sample from which to build the estimate.6 In some cases, the restrictions the KB places on an argument are enough. When this is insufficient, either direct user input or using the KB to find the nearest common generalization of some user-provided examples would be required.\nEach of the queries above has only one correct answer for each input. Queries with multiple correct answers would be more difficult to assign a probability to in a reasonable way. 7"}, {"heading": "4.3 Experiment: Using a DSVS to support a KB in answering queries with many results", "text": "In both experiments above, each query returned only a single result. In queries asking for the parts of objects, for example, there are many correct results for each query. In such cases Displacer can still be used, but the probability of a result being correct cannot be calculated in the same way. Instead, we use k-means to cluster the results, and find the English word corresponding to the mean of each cluster."}, {"heading": "4.3.1 Approach", "text": "1. Using Wordnet, we created a list of 346 machines (hyponyms of the word machine). For each machine on the list (e.g. backhoe), follow the steps below (also in Fig. 4):\n2. Map the term backhoe to a vector using word2vec.\n3. Find the nearest neighbors of the vector in the DSVS.\n4. Map the nearest neighbors from vectors to Englsih words using vec2word. The ten most similar terms in the DSVS are: backhoe, excavator, trackhoe, bulldozer, payloader, bucket loader, Bobcat loader, skid loader, dump truck, backhoe operator.\n5. Map the English words to Cyc expressions using word2cyc. The following terms are found in the KB and have some physical parts defined: #$Backhoe, #$Bulldozer, #$DumpTruck, #$Tractor, #$WreckerTruck, #$Shovel, #$Forklift, #$Truck\n6For instance, the predicate capitalCity was only applied to countries in the above example. 7When capital cities and currencies show up again in the analogy experiment, we are not using information about many capital cities or many currencies, but working from only a single example to either find the relevant predicate or calculate the analogy directly. In the rare case where the predicate can be determined from the first two terms but is not defined on the third term, using the method outlined here could have given somewhat better results in that experiment.\n6. Search cyc for the parts of the machines in the previous step using the query\n(and (physicalPartTypes backhoe ?X) (genls ?X #$SolidTangibleArtifact)).\nFor example the query run using the first sense of shovel is (physicalPartTypes #$Shovel ?X) This returns the following parts of a hand shovel: #$Handle, #$ShovelBlade. Similarly, the physical parts of a backhoe, a tractor, and so forth are found. Note that for some of these terms, the physical parts are derived using a chain of reasoning rather than asserted directly. For example, a #$WreckerTruck is a type of #$RoadVehicleInternalCombustionEngine, so parts like #$Piston and #$GasCap which are defined for the larger category are inherited by the particular machine. Because this part of the KB is very incomplete, #$Backhoe was not defined as a road vehicle, though #$Bulldozer was.\n7. Map the resulting Cyc expressions into English words (the names of parts) using cyc2word. For example, the KB constant #$Shovel returns shovel.\n8. Map the results from the previous step to vectors using word2vec.\n9. Calculate the displaced vector for each part. This replaces the concept of shovel blade in the context of a hand shovel with the analogous term in the context of a backhoe. It is how the DSVS completes the analogy shovel blade : shovel :: ??? : backhoe. For the vectors representing shovel blade shovel + backhoe the most similar terms are bucket loader and excavator. Other terms similar to the vector for shovel blade include blade servers (a type of computer), retractable blades, and so forth. By telling it we are interested in near-synonyms of shovel blade that are more similar to backhoe than shovel we improve the quality of the results.\n10. Use k-means to cluster the part vectors for this machine.\n11. Map the mean of each cluster to an English word using vec2word. The list of most likely possible parts of a backhoe is:\nbackhoe, clutch, engine compartment, steering mechanism, auto body, automotive suspension, strut, brake, bulldozer, chassis, control device, drive train, drivers seat, fuel tank, internal combustion engine, transmission, windshield, land transportation wheel, tractor, wheel and axle, blade, grinder, submarine sandwich, handle, shovel, bucket, curved handle, auto part, forklift, horizontal stabilizer, tail, trailer, vertical stabilizer, lawn mower, cab, car battery, car engine, engine starter, exhaust system, four cycle engine, fuel gauge, gas cap, gas tank, muffler, odometer, oil filter, speed indicator, truck tire, truck wheel.\nThere are several incorrect results (submarine sandwich, for example) mixed in with the correct results. Depending on the amount of coverage the KB has in a particular area, the quality of the results can vary. For applications with some room for error or that can interact with a human to check results, having a list of possibilities with noise mixed in can be more useful than having no results at all. There is also the possibility of using Displacer itself to further narrow down the results, by checking, for example, the size or material of the purported parts."}, {"heading": "4.3.2 Results", "text": "The KB was able to find at least one possible interpretation of 199 of these, missing 147. The DSVS (and the overall system) was able to find an interpretation of 294 of these, missing\nonly 52. (These tended to be older terms that appear in dictionaries but rarely in newspaper articles such as gangsaw, pavoir, and triphammer.) For the 294 machines, we asked Displacer for physical parts of these machines. For a fair comparison, we also included an incomplete versions of our full system. First we used the system in a query-KB semantic matching mode, similar to the system described in [9]. This performs a query for similar terms, but does not perform the final displacement step that maps answers back into the original context using the analogy capability of word2vec. Results are summarized in the table below."}, {"heading": "4.3.3 Discussion", "text": "This shows that Displacer returns more correct answers than the KB alone or either of the systems that don\u2019t make use of the analogical capability of word2vec. In all the experiments above, we are applying a single predicate to a single term, but because Displacer builds on the full expressive power of the KB, it can be used with much more complex queries involving logical expressions (\u2018and\u2019, \u2018or\u2019, \u2018not\u2019, \u2018there exists\u2019, and so forth)."}, {"heading": "5 Experiments with Solving Analogies", "text": "The previous experiments showed how a DSVS can be used to extend the coverage and precision of a KB. In this experiment, we tested how a KB can be used to improve the analogical reasoning capability of a DSVS. In some cases, the relationship between the first two terms in a proportional analogy problem corresponds exactly to a predicate in a knowledge base. For example, in the analogy Paris : France :: London : X the predicate capitalCity encodes the relation between Paris and France we are looking for. When applied to the second half of the analogy (capitalCity ?X CityOfLondonEngland) The KB will correctly return England for X.\nWe can find such predicates using the following query in the Cyc KB: (and (and (assertedPredicateArg France 1 ?X) (assertedPredicateArg CityOfParisFrance 2 ?X)) (?X France CityOfParisFrance)) There are a few complications with this. First, there may be several possible terms in the KB corresponding to the natural language terms. (For example, there are at least 22 other cities in the world named Paris, not to mention Paris of Troy, Paris Hilton, a half dozen movies entitled Paris, etc...) Second, there may be more than one predicate relating such senses to each other: besides being the capital city of France, Paris is also a geographical subregion of France. To deal with these complications, we find all the potential predicates which satisfy (predicate France Paris) for any sense of France and Paris and apply them to all senses of the term London. This returns several potential answers. These answers are then tested to find which is closest to the answer vector obtained using the DSVS to solve the analogy. In this way, we find an answer which is both hand-curated (so more likely to be correct) and most likely in terms of distributional frequency.\nDedre Gentner called such matches with a predefined relation vector relating terms trivial, and felt that very few analogies would be captured by such relationships [11]. There are several other ways terms can be related in the knowledge base than those relationships captured by a single predicate. Another query pattern searches for two concepts and two predicates subject to certain constraints. In the analogy taking::took::running:ran, Cyc only can find the link between taking and took by linking both to the root word take. The predicates relating these terms to take are the same predicates relating running and ran to the root word run, so by searching for a pattern linking pairs of predicates to terms they have in common in this way we can find analogies of this type. Rearranging the roles played by the terms allows the system to also solve the analogy taking:running::took:ran. For these tests we use only a few of the simplest such patterns, as the search becomes more costly and the number of possible answers multiplies for more complex pattern-matching.\nWhen no such pattern can be matched, we can still make use of information in the KB to\nchoose the best answer from among the closest terms to the result vector in the DSVS. One simple way is by checking that the part-of-speech of the answer is correct. In nearly all four-term analogies, the part-of-speech of the fourth term either corresponds to the part-of-speech of the second term (in which case, the first and third terms should also have the same part-of-speech) or corresponds to the third term (in which case the first and second terms should have the same part-of-speech.) A similar relation should hold for singular or plural. 8\nWe tested analogy-finding ability on two test sets: the Semantic Syntactic Word Relationship test set introduced in [16] to test word2vec, and the SAT four-term analogy test set from (Turney, 2005)"}, {"heading": "5.1 Experiment: Semantic Syntactic Word Relationship test set", "text": "For the \u2018DSVS alone\u2019 condition, we computed the vector from term 1 to term 2, and added that vector to term 3 to get the answer vector. The natural language term with the minimum distance from this answer vector was used (as long as it was different from the three search terms.) For the KB alone condition, the KB was searched for results matching the analogy patterns discussed above. When the KB returned many results, an answer was chosen randomly from among the answers returned.\nFor the combined system, the answer returned by the KB closest to the answer vector of the DSVS was chosen."}, {"heading": "5.1.1 Results", "text": ""}, {"heading": "5.1.2 Discussion", "text": "It should not be surprising that a database of countries and capitals is able to do a good job of finding the capital of a given country. However, Displacer performed better than either the KB\n8In practice, our identification of part-of-speech is not perfect, so when no term matching part-of-speech can be found among the near results of the answer vector, we ignore this criterion.\nalone or the DSVS alone on all categories. The KB was unable to find matching patterns for many analogies in some categories, leading to a low score on opposites, superlatives, nationality, and family. In these cases, Displacer relied on the DSVS, only enforcing correct part-of-speech. For other predicates, the KB found too many potentially correct answers. Without a good way to judge between these for what the most natural answer should be, the system chose randomly between them, and only guessed the ground truth answer a small fraction of the time. This explains the low score for the KB on capitals, currency, and cities-in-states. In this case, Displacer found which of the potential answers returned by the KB was closest to the vector in the DSVS.\nThe KB has not explicitly been told the correct form for the part of speech for every word in English. Instead, it has rules to produce the form from the word root, and some exceptions, which don\u2019t cover every case. Instead of the word sang, for example, the KB returned only the incorrect result singed. Because the KB can be unreliable in this way the system could be improved by flagging results where the KB result differed from the DSVS result. In general, when the same answer is obtained using both the KB and the DSVS it is likely to be correct, while if they are wildly different, the answer is suspect."}, {"heading": "5.2 Experiment: SAT four-term analogy test set", "text": "The second set of 374 four-term analogies comes directly from SAT tests [22]. Unlike the analogies in the previous test, these are meant to be difficult for a human to solve. In the past, most testing of automated systems on these questions has been done by choosing among multiple-choice answer pairs, but to make the results comparable with the previous test, we provide the first three terms of the analogy and ask it to provide an appropriate fourth term. 9"}, {"heading": "5.2.1 Results", "text": ""}, {"heading": "5.2.2 Discussion", "text": "Most of this gain comes from enforcing part-of-speech constraints and rejecting synonyms and related forms of the three input terms when appropriate to do so. In only ten cases did the attempts to find an appropriate analogy in the KB successfully improve the result over the DSVS alone, and in four cases it caused the system to falsely reject a good answer. Clearly the system\u2019s approach to finding analogies in the KB is too simplistic for more difficult analogies."}, {"heading": "6 Conclusion and Future Work", "text": "A KB and DSVS can be used together to make the KB less brittle and with greater coverage (with approximate knowledge), and to provide enough analogous examples to the DSVS to allow it to obtain good estimates of the probability of the correctness of its own answers. On\n9Since these analogies allow for several possible fourth terms, there is a subjective element to the scoring.\nboth query answering tasks and analogy tasks, the combination of the two outperforms either working alone.\nIn this paper all of the queries are expressed in Cyc\u2019s syntax, but to be widely useful a system must be able to handle natural language queries. Displacer itself could potentially be used for some level of word-sense disambiguation and reference resolution. We plan to look at ways to confirm or reject possible answers based on other information within the KB or DSVS that changes the probability of an answer being true. We also plan to explore how learning from image or video sources might be used to augment the information learned from text."}], "references": [{"title": "Random walks on context spaces: Towards an explanation of the mysteries of semantic word embeddings", "author": ["Sanjeev Arora", "Yuanzhi Li", "Yingyu Liang", "Tengyu Ma", "Andrej Risteski"], "venue": "arXiv preprint arXiv:1502.03520,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "A neurally plausible encoding of word order information into a semantic vector space", "author": ["Peter Blouw", "Chris Eliasmith"], "venue": "In 35th Annual Conference of the Cognitive Science Society,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2005}, {"title": "Toward an architecture for never-ending language learning", "author": ["Andrew Carlson", "Justin Betteridge", "Bryan Kisiel", "Burr Settles", "Estevam R Hruschka Jr.", "Tom M Mitchell"], "venue": "In AAAI,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "A survey of automatic query expansion in information retrieval", "author": ["Claudio Carpineto", "Giovanni Romano"], "venue": "ACM Computing Surveys (CSUR),", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2012}, {"title": "Discovery at a distance: farther journeys in predication space", "author": ["Thomas Cohen", "Dominic Widdows", "Roger W Schvaneveldt", "Thomas C Rindflesch"], "venue": "In Bioinformatics and biomedicine workshops (BIBMW),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Predication-based semantic indexing: Permutations as a means to encode predications in semantic space", "author": ["Trevor Cohen", "Roger W Schvaneveldt", "Thomas C Rindflesch"], "venue": "In AMIA Annual Symposium Proceedings,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2009}, {"title": "Experiences using the researchcyc upper level ontology", "author": ["Jordi Conesa", "Veda C Storey", "Vijayan Sugumaran"], "venue": "In Natural Language Processing and Information Systems,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2007}, {"title": "Retrofitting word vectors to semantic lexicons", "author": ["Manaal Faruqui", "Jesse Dodge", "Sujay K Jauhar", "Chris Dyer", "Eduard Hovy", "Noah A Smith"], "venue": "arXiv preprint arXiv:1411.4166,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2014}, {"title": "Natural language queries over heterogeneous linked data graphs: A distributional-compositional semantics approach", "author": ["Andre Freitas", "Edward Curry"], "venue": "In Proceedings of the 19th international conference on Intelligent User Interfaces,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2014}, {"title": "A distributional semantics approach for selective reasoning on commonsense graph knowledge bases", "author": ["Andr\u00e9 Freitas", "Jo\u00e3o Carlos Pereira da Silva", "Edward Curry", "Paul Buitelaar"], "venue": "In Natural Language Processing and Information Systems,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Structure-mapping: A theoretical framework for analogy", "author": ["Dedre Gentner"], "venue": "Cognitive science,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1983}, {"title": "The copycat project: A model of mental fluidity and analogy-making", "author": ["Douglas R Hofstadter", "Melanie Mitchell"], "venue": "Advances in connectionist and neural computation theory,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1994}, {"title": "A continuous semantic space describes the representation of thousands of object and action categories across the human", "author": ["Alexander G Huth", "Shinji Nishimoto", "An T Vu", "Jack L Gallant"], "venue": "brain. Neuron,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "Analogy as relational priming: A developmental and computational perspective on the origins of a complex cognitive skill", "author": ["Robert Leech", "Denis Mareschal", "Richard P Cooper"], "venue": "Behavioral and Brain Sciences,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2008}, {"title": "Efficient estimation of word representations in vector space", "author": ["Tomas Mikolov", "Kai Chen", "Greg Corrado", "Jeffrey Dean"], "venue": "arXiv preprint arXiv:1301.3781,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "Looking for hyponyms in vector space", "author": ["Marek Rei", "Ted Briscoe"], "venue": "In Proceedings of the 18th Conference on Computational Natural Language Learning,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2014}, {"title": "Distributed representations in memory: insights from functional brain imaging", "author": ["Jesse Rissman", "Anthony D Wagner"], "venue": "Annual review of psychology,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2012}, {"title": "Can we derive general world knowledge from texts? In Proceedings of the second international conference on Human Language Technology Research, pages 94\u201397", "author": ["Lenhart Schubert"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2002}, {"title": "Analogyspace: Reducing the dimensionality of common sense knowledge", "author": ["Robert Speer", "Catherine Havasi", "Henry Lieberman"], "venue": "In AAAI,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2008}, {"title": "Analogyspace: Reducing the dimensionality of common sense knowledge", "author": ["Robert Speer", "Catherine Havasi", "Henry Lieberman"], "venue": "In AAAI,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2008}, {"title": "Corpus-based learning of analogies and semantic relations", "author": ["Peter D Turney", "Michael L Littman"], "venue": "Machine Learning,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2005}, {"title": "Knowledge graph and text jointly embedding", "author": ["Zhen Wang", "Jianwen Zhang", "Jianlin Feng", "Zheng Chen"], "venue": "In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP). Association for Computational Linguistics,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2014}], "referenceMentions": [{"referenceID": 14, "context": "and research into the area has exploded since the word2vec DSVS was introduced in [16].", "startOffset": 82, "endOffset": 86}, {"referenceID": 16, "context": "Brain-imaging studies have likewise suggested that concepts are represented in the brain as distributed networks of neural activation [18].", "startOffset": 134, "endOffset": 138}, {"referenceID": 1, "context": "[2].", "startOffset": 0, "endOffset": 3}, {"referenceID": 13, "context": "In particular, the analogical-reasoning capability of a DSVS can be understood as an example of the relational priming model of analogy making outlined in [15].", "startOffset": 155, "endOffset": 159}, {"referenceID": 12, "context": "[14] The brain\u2019s slow operating speed and massive paralellism (compared to a CPU) also hint that whatever operations are being performed must be very short, simple programs operating on large vectors, more characteristic of A DSVS than a KB.", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "Using the ResearchCyc KB to support web queries is explored in [7].", "startOffset": 63, "endOffset": 66}, {"referenceID": 10, "context": "[11] suggested using the structure of concepts to find analogies, rather than the more obvious matching of relations.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "Unfortunately, as [13] pointed out, such structure is heavily dependent on the preconceptions inherent in the design of the knowledge base.", "startOffset": 18, "endOffset": 22}, {"referenceID": 20, "context": "The use of distributional semantic information was a breakthrough, allowing the system of [22] to score at human level on multiple-choice SAT analogy questions.", "startOffset": 90, "endOffset": 94}, {"referenceID": 14, "context": "The word2vec DSVS [16] uses an efficient method to build the vector space, allowing it to be created with hundreds of billions of words of training data.", "startOffset": 18, "endOffset": 22}, {"referenceID": 0, "context": "2The basic reason why word2vec is able to solve these kinds of analogies is explained clearly in [1].", "startOffset": 97, "endOffset": 100}, {"referenceID": 15, "context": "Others, such as the ones encoding hypernyms, vary a lot from one term to another [17].", "startOffset": 81, "endOffset": 85}, {"referenceID": 14, "context": "In [16] the creators of word2vec write, \u201cOur ongoing work shows that the word vectors can be successfully applied to automatic extension of facts in Knowledge Bases, and also for verification of correctness of existing facts.", "startOffset": 3, "endOffset": 7}, {"referenceID": 3, "context": "A good survey of query expansion is [4].", "startOffset": 36, "endOffset": 39}, {"referenceID": 9, "context": "The idea of using a DSVS to extend the capability of a KB as a query-KB semantic matching technique is explored in [10].", "startOffset": 115, "endOffset": 119}, {"referenceID": 15, "context": "[17] for example, explores how hyponyms swarm around a term.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "The possibility has also been explored of reshaping a DSVS according to verified facts in [8].", "startOffset": 90, "endOffset": 93}, {"referenceID": 21, "context": "[23] also explores putting a knowledge graph (that is, a KB) into the space of a DSVS.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "AnalogySpace, built from the large KB ConceptNet[20], is one such example.", "startOffset": 48, "endOffset": 52}, {"referenceID": 17, "context": "Knowledge graph embedding seems promising, especially when combined with knowledge extraction efforts such as KNEXT[19] and NELL[3].", "startOffset": 115, "endOffset": 119}, {"referenceID": 2, "context": "Knowledge graph embedding seems promising, especially when combined with knowledge extraction efforts such as KNEXT[19] and NELL[3].", "startOffset": 128, "endOffset": 131}, {"referenceID": 8, "context": "First we used the system in a query-KB semantic matching mode, similar to the system described in [9].", "startOffset": 98, "endOffset": 101}, {"referenceID": 10, "context": "Dedre Gentner called such matches with a predefined relation vector relating terms trivial, and felt that very few analogies would be captured by such relationships [11].", "startOffset": 165, "endOffset": 169}, {"referenceID": 14, "context": "8 We tested analogy-finding ability on two test sets: the Semantic Syntactic Word Relationship test set introduced in [16] to test word2vec, and the SAT four-term analogy test set from (Turney, 2005)", "startOffset": 118, "endOffset": 122}, {"referenceID": 20, "context": "The second set of 374 four-term analogies comes directly from SAT tests [22].", "startOffset": 72, "endOffset": 76}], "year": 2016, "abstractText": "The inherent inflexibility and incompleteness of commonsense knowledge bases (KB) has limited their usefulness. We describe a system called Displacer for performing KB queries extended with the analogical capabilities of the word2vec distributional semantic vector space (DSVS). This allows the system to answer queries with information which was not contained in the original KB in any form. By performing analogous queries on semantically related terms and mapping their answers back into the context of the original query using displacement vectors, we are able to give approximate answers to many questions which, if posed to the KB alone, would return no results. We also show how the hand-curated knowledge in a KB can be used to increase the accuracy of a DSVS in solving analogy problems. In these ways, a KB and a DSVS can make up for each other\u2019s weaknesses.", "creator": "easychair.cls-3.4"}}}