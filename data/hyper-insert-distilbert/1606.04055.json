{"id": "1606.04055", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Jun-2016", "title": "Bacteria Foraging Algorithm with Genetic Operators for the Solution of QAP and mQAP", "abstract": "reforming the bacterial response foraging filter optimization ( bfo ) framework is one of the oldest metaheuristics algorithms that form most widely popularly used to visually solve optimization problems. the bfo is imitated from the behavior aspects of the passive foraging bacteria dominant group such as ecoli. the eponymous main aim of algorithm variation is to vastly eliminate identifying those bacteria that collectively have weak available foraging methods catching and maintaining exclusively those bacteria \" that have strong foraging capture methods. \" in this extent, resolving each bacterium effectively communicates with other bacteria by sending signals accurately such precisely that specific bacterium nodes change the position in allowing the same next step scenario if prior factors have been satisfied. in fact, the process curve of algorithm change allows trailing bacteria to also follow nutrient up nutrients toward the optimal. continuing in examining this paper, now the suffix bfo is used for plotting the feasible solutions theories of quadratic quota assignment problem ( \u2190 qap ), indirect and multi - objective qap ( ~ mqap ) by commonly using updating mechanisms including unwanted mutation, crossover, and a local feedback search.", "histories": [["v1", "Mon, 13 Jun 2016 18:18:07 GMT  (40kb,D)", "http://arxiv.org/abs/1606.04055v1", null]], "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["saeid parvandeh", "ahmet unveren", "bill c white", "mohammadreza boroumand", "parya soltani"], "accepted": false, "id": "1606.04055"}, "pdf": {"name": "1606.04055.pdf", "metadata": {"source": "CRF", "title": "Bacteria Foraging Algorithm with Genetic Operators for the Solution of QAP and mQAP", "authors": ["Saeid Parvandeh", "Ahmet \u00dcnveren", "Bill C. White", "Mohammadreza Boroumand", "Parya Soltani"], "emails": ["saeid-parvandeh@utulsa.edu", "ahmet-unveren@emu.edu.tr", "m.boroomand70@gmail.com", "soltani2011@yahoo.com"], "sections": [{"heading": null, "text": "is one of the metaheuristics algorithms that most widely used to solve optimization problems. The BFO is imitated from the behavior of the foraging bacteria group such as Ecoli. The main aim of algorithm is to eliminate those bacteria that have weak foraging methods and maintaining those bacteria that have strong foraging methods. In this extent, each bacterium communicates with other bacteria by sending signals such that bacterium change the position in the next step if prior factors have been satisfied. In fact, the process of algorithm allows bacteria to follow up nutrients toward the optimal. In this paper, the BFO is used for the solutions of Quadratic Assignment Problem (QAP), and multiobjective QAP (mQAP) by using updating mechanisms including mutation, crossover, and a local search.\nKeywords Bacteria Foraging Optimization \u00b7 Optimization Algorithm \u00b7 Moltiobjective Optimization \u00b7 Quadratic Assignment Problem\nS. Parvandeh and B. C. White Department of Computer Science, University of Tulsa, Tulsa, OK 74104, USA Tel: +1-918-344-7600 Fax: +1-918-631-2927 E-mail: saeid-parvandeh@utulsa.edu\nA. U\u0308nveren Computer Engineering Department, Eastern Mediterranean University, Magusa, TRNC, Mersin 10, 33010 E-mail: ahmet-unveren@emu.edu.tr\nM. Boroumand Department of Management, University of Isfahan, Isfahan, Iran. E-mail: m.boroomand70@gmail.com\nP. Soltani Department of Computer Engineering, Islamic Azad University of Boroujerd, Lorestan, Iran. E-mail: p soltani2011@yahoo.com"}, {"heading": "1 Introduction", "text": "The Quadratic Assignment Problem (QAP) is one of the reputed NP-hard combinatorial optimization problems. The QAP has been introduced by Koopmans and Beckmann (1957). It can be defined as a problem to allocate a facility set to a location set with mutual distances among the locations and mutual flow among the facilities. The objective is to assign each facility to a location such that the total cost is minimized. Specifically, given two n \u2217 n matrices A = (fij) and B = (dkl) as input, such that all the elements are real, and let fij be flow among facility i and facility j, dkl be the distance among the location k and location l. Also, let n be the number of facilities and locations, where n = {1, 2, 3, . . . , n}. The formulation of the QAP can be defined as follows (Koopmans and Beckmann 1957):\nmin \u03d5\u2208SnQ(\u03d5) = n\u2211 i=1 n\u2211 j=1 fijd\u03c6(i)\u03c6(j) (1)\nwhere, Sn is defined as a permutation set of n locations. Each individual product fijd\u03c6(i)\u03c6(j) , computes the cost of assigning facility i to location \u03c6(i) and facility j to location \u03c6(j). It should be noted that, one facility can be assigned to only one location, and one location can be assigned to only one facility in a solution (M. Zhao et al. 2008; Rainer et al. 1998).\nKnowles and Corne (2002) introduced another QAP version, that is multiObjective QAP (mQAP). In this case, the mQAP has multiple flow matrices and a distance matrix. The mQAP is more commonly used where one facility should be assigned to one location with respect to the multiple flow matrices and with a distance matrix such that flow matrices are different from each\nar X\niv :1\n60 6.\n04 05\n5v 1\n[ cs\n.N E\n] 1\n3 Ju\nn 20\nother. So, the mQAP can be modeled as follows:\nmin \u03d5\u2208SnQ\u0304(\u03d5) = Q 1(\u03d5), Q2(\u03d5), . . . , Qm(\u03c6) (2)\nwhere,\nQp(\u03c6) = n\u2211 i=1 n\u2211 j=1 fpijd\u03c6(i)\u03c6(j) (3)\nIn this formula, the fpij indicates p th flow between facility i and facility j, and m is number of objectives. Other definitions in QAP work here.\nBacteria Foraging Optimization (BFO) is one of the bio-inspired optimization algorithms that was developed to make a bridge between microbiology and engineering. The BFO algorithm imitates some characteristics of bacteria foraging such as chemotactic, reproduction, and quorum sensing. The BFO was introduced by Kevin M. Passino (2002), and it consists of four steps namely: 1) CHEMOTACTIC, 2) SWARM, 3) REPRODUCTION, 4) ELIMINATION and DISPERSAL which is a space to solve complicated optimization problems (see section 3).\nGenetic Algorithm is one of the powerful algorithm for solving the combinatorial optimization problem. GA imitates the process of evolution on an optimization problem. Each feasible solution of a problem is behaved as an individual solution with corresponding fitness function value. GA keeps a population of feasible solutions in which the selection operator will maintain the fittest individuals. There is a structured randomized information exchange between two individuals to give rise to better individuals called crossover operator. The mutation operator is a process of adding diversity to the population by randomly changing some genes. The GA repeatedly applies these processes until the population converges (Gamal Abd El-Nasser A. Said et al 2014)."}, {"heading": "2 Related work", "text": "Chunguo Wu, Na Zhang, Jingqing Jiang, Jinhui Yang, and Yanchun Liang (2007) have proposed a novel approach to solve Job Shop Scheduling Benchmark problem by using Bacteria Foraging Algorithm. Chunguo Wu et al. have described BFO is a evolutionary computation algorithm which is based on the foraging behavior of Ecoli bacteria, and it is a random search algorithm.\nThe main aim of BFO algorithm is to eliminate those bacteria which have weak foraging methods and maintaining those bacteria which have breakthrough foraging methods to maximize energy per unit time. S. Subramanian and S. Padma (2011) have described\nthat it is used to minimize cost and improve efficiency in parallel by using multiobjective BFO optimization.\nJing Dang et al. (2008) have described BFO algorithm as a biologically inspired computation technique such that each bacterium contacts with other bacteria by sending signals. In the process, bacteria move to the next step to collect nutrient if previous factors have been satisfied. During the lifetime of a bacterium, it undergoes different stages such as chemotactic, reproduction and elimination dispersal. The BFO algorithm has been implemented to solve various real world problems. In this paper, the author suggested that the BFO could be used to solve difficult engineering design problems.\nIn the rest of this paper, an introduction of the BFO algorithm and the multiobjective BFO (MOBFO) algorithm will be presented in section 3. In section 4, a new approach using BFO algorithm for the solution of single and multiobjective QAP will proposed. In section 5, experimental results of several methods will be compared with the proposed method. The results show that the proposed method outperforms other algorithms."}, {"heading": "3 Bacteria Foraging Algorithm", "text": "The Bacterial Foraging Optimization algorithm is one of the nature-inspired optimization algorithms, which inspired from bio mimicry of Ecoli bacteria. The BFO introduced by Kevin M. Passino (2002), is to eliminate those bacteria which have weak foraging methods and maintaining those bacteria which have breakthrough foraging methods to maximize energy obtained per unit time. In the process, each bacterium communicates with other bacteria by sending signals, in which bacteria move to the next step to collect nutrient if previous factors have been satisfied. The basis BFO includes of four principle parts: 1) chemotactic, 2) swarming, 3) reproduction, and 4) elimination and dispersal (S. Das et al. 2009).\n3.1 Chemotactic\nIn biological point of view, the chemotactic process is movement of bacteria for gathering food. The Ecoli bacterium is able to move in two diverse ways, swimming and tumbling. In the swimming way, the bacterium swims in same direction to search for food, and in the tumbling way, it changes the direction to another direction. Assume \u03b8i(j, k, l) shows the current position in ith bacterium, jth chemotactic step, kth reproduction step, and lth elimination and dispersal event, the position of\nbacterium in the next chemotactic step by tumbling is as follows (S. Das et al. 2009): \u03b8i(j + 1, k, l) = \u03b8i(j, k, l) + C(i) \u2206(i)\u221a\n\u2206T (i)\u2206(i) (4)\nwhere, C(i) shows the size of the step taken in the random direction specified by the tumble for ith bacterium, \u2206(i) indicates a vector in the random direction in population size whose elements lie in [-1, 1], and \u2206T (i) shows transposed randomize vector of direction \u2206(i).\n3.2 Swarm\nIn this part, more healthy bacteria attempt to attract other bacteria and collect them in a point to get the solution more quickly. Essentially, the Swarm is a behavior that wants to recruit and group bacteria to move as concentric pattern with high bacterial density. The mathematical formula of swarm behavior is defined as follows (Kevin M. Passino 2002): Jcc ( \u03b8, P (j, k, l) ) =\nS\u2211 i=1 Jcc ( \u03b8, \u03b8i(j, k, l) ) =\nS\u2211 i=1 [ \u2212 dattractexp ( \u2212 wattract P\u2211 m=1 (\u03b8m \u2212 \u03b8im)2 )] +\nS\u2211 i=1 [ \u2212 hrepellentexp ( \u2212 wrepellent P\u2211 m=1 (\u03b8m \u2212 \u03b8im)2 )]\n(5) where, Jcc ( \u03b8, P (j, k, l) ) shows fitness function cost. In every step it should be added to the main cost (to be minimized). Jcc shows how far a bacterium is from the fittest bacterium. The S is the total number of bacteria, P is the number of variables to be optimized in each bacterium, \u03b8m is the position of the p-dimensional search space, where m = {1, 2, 3, . . . , p},dattract,wattract ,hrepellent and wrepellent are diversity coefficients.\n3.3 Reproduction\nAfter chemotactic and swarming periods, some bacteria have enough nutrient and some others are unsuccessful at searching for nutrient. In reproduction part, those bacteria which have enough nutrient will reproduce and others are eliminated. To this end, the health status of each bacterium is calculated as the sum of the step fitness during its life as follows:\nJ ihealth = Nc\u2211 j=1 J(i, j, k, l) (6)\nValues obtained by Jhealth for each individual of the population (bacteria) are sorted in ascending order. The first half of the bacteria (Sr = S/2) are duplicated and replaced to the second half that have less health status value. So, individuals with lower health status value has more chance to survive. This process not only will keep the population constant, but also the healthier bacteria continue to next generation.\n3.4 Elimination and dispersal\nDuring this step, the population may eventually change their positions when density of bacteria being high in a small area and the temperature of this area being increased along with that. Thus, the algorithm kills bacteria at high temperature. In this case, the elimination and dispersal event relocates the bacteria to different environments to avoid to bacteria death, and avoid locally optimal solution."}, {"heading": "4 Multiobjective Bacteria Foraging Algorithm", "text": "In the BFO algorithm bacteria attempt to find concentrated nutrients avoid noxious substrates. In this case, there is just one objective which exploring the search. Instead Multiobjective Bacterial Foraging Optimization (MOBFO) is inspired for solution of multiobjective optimization problems. The main aim of such problems is to find all values which are possibly satisfied to all fitness functions. Since different decision makers have different ideas about fitness functions, it is not easy to choose a single solution for multiobjective optimization problems without interaction with the decision makers. Thus, the MOBFO shows a set of Pareto optimal solutions to decision makers. The main target of multiobjective optimization problems is to obtain a nondominated front which is close to the true Pareto front. Thereafter, the MOBFO with integration between health sorting approach and Pareto dominance mechanism to solve multiobjective problems is proposed (B.K. Panigrahi et al. 2011). The new optimization algorithm based on MOBFO is given."}, {"heading": "5 Proposed Method", "text": "Bacteria foraging algorithm is one of the bio-inspired algorithms which can solve the QAP. Since, the QAP is a nonlinear problem, most probably reasonable solutions can be achieved with deterministic algorithms (P.Ji et al. 2006).\nThe reason that BFO has been chosen to solve QAP problems is because both of them are geometrically relevant to find the solutions. Moreover, the BFO is representation an optimization algorithm that can avoid locally optimal solutions in the elimination and dispersal step and leads to global optimal. So, many times NP-hard problems like QAP that are stopped by local optima needs to be solved with optimization algorithms like BFO.\nIn this paper, BFO and MOBFO have been used for the solution of QAP and mQAP, respectively. The chemotactic step is the updating part of BFO in which we have plugged in some of GA (K. Deb et al. 2002) operators such as crossover and mutation. The crossover operator transfers the parents\u2019 chromosome to the next generation and makes solution to avoid local minimum optima. On the other hand, the mutation operator creates new positions of increase diversity. In addition, tabu search (Fred Glover 1990) is plugged in to elimination and dispersal part along with bacteria split i.e. this will lead algorithm escape from local optima. In this section, we will explain GA operators and tabu search in detail. There are two concepts to optimize, single objective and multiobjective. First of all, the definition of each will present. Then the corresponding algorithm for the solution of problems in different concepts will explain.\n5.1 Single Objective BFO\nIn the case of single objective QAP the aim is to find one compatible solution in which the cost between facilities and locations is minimized. Consequently, the proposed BFO with mutation operators in the updating part along with tabu search algorithm in elimination and dispersal can found reasonable solutions. The modified BFO algorithm has three main steps: 1) CHEMOTATIC, 2) REPRODUCTION, and 3) ELIMINATION and DISPERSAL."}, {"heading": "5.1.1 Mutation", "text": "As we mentioned above, the mutation operator modifies current solution in the updating part of algorithm (step 2, chemotactic). We used three different kinds of mutation methods, separately, in this algorithm; swap mutation (Banzhaf, W 1990), which is one of the simplest mutation methods; p/3 mutation (P. LARRAN et al. 1999); and inversion mutation (Fogel, D. B 1990). Results indicates BFO is more adaptable with the swap mutation method.\nIn swap mutation, two locations in the solution will be selected randomly, and will be exchanged. In p/3\nmutation method, given solution size (p) divided into 3 blocks and will act like swap mutation, i.e. two blocks will be chosen randomly and exchanged. And, in inversion mutation, two random numbers in the solution size will be generated and the corresponding range of these random numbers will be inverted to new solution."}, {"heading": "5.1.2 Tabu Search", "text": "Tabu Search (TS) (Tabitha James et al. 2009) is a kind of local search algorithm which mostly applies to NPhard problems. TS is a procedure that searches locally and periodically through solution space to improve the solution x to the solution x\u2032 in the neighborhood of x. The difference of TS with other local search algorithm is based on the tabu list, that is a special short term memory. This memory is included the previously visited solutions that stores some of the attributes of solutions. Thus, it gives no permission to revisited the solutions and avoid the local optima solution. During the local search only those moves that are not in the tabu list will be examined, and if it produces a better solution, then the tabu list will be overridden with new solution.\nSince QAP is defined as NP-problem, then we use TS as a local search algorithm after the elimination and dispersal part to optimize the final solutions and avoid the local optima. Figure 2 demonstrate the proposed single objective BFO in 10 steps. In step 1 and 2, the variables are initialized and a set of random permutation numbers with P size will be generated for each of the bacteria. In step 3, a given QAP problem is computed for the whole population of bacteria using Equation (1), and the minimum cost through the whole population will be sorted as best so far.\nAfter that, the BFO algorithm gets started by the chemotactic part. The chemotactic step is one of the modified parts of the BFO algorithm in this work. Thus, mutation operators have been used each time in order to recreate a new population and recalculate the cost of assignment. Again, the minimum cost through whole population will be compared with the old solution and if it is smaller than that, then it will be replaced with the best so far, otherwise the algorithm continues with the old solution.\nIn the reproduction step, the entire population costs that are obtained from previous step will be sorted in ascending order and the first half of population are replaced with the second half. For more convenience the number of bacteria (population) have been set as even number, such that in duplicating time both parts are same, and the population stays constant. Ped is a probability of eliminate and disperse the bacteria from a\nlocation to another location. Kevin M. Passino (2002), used 0.25 in original algorithm, and here we leave it unchanged and set the probability to 0.25. So, each time a random number will be generated between 0 and 1, and if that is less than or equal to Ped, then elimination and dispersal part starts, otherwise the algorithm will continue with current bacteria.\nIn step 10, TS algorithm is applied on the BEST SO FAR solutions and the algorithm will try to optimize locally. Finally, the new solutions will compare with the BEST SO FAR solutions, and whichever are better will set to as BEST SO FAR solutions.\n5.2 Multiobjectives BFO\nIn the case of multiobjectives QAP (mQAP) the aim is to find a set of nondominated solutions in which the\ncost between facilities and locations is minimized. The modified BFO, by using one of the mutation methods that we mentioned in previous section and a crossover operator (see next section), finds a nondominated set of solutions. In order to minimize the cost of nondominated set, a multiobjective version of TS algorithm was applied to the elimination and dispersal step. The proposed MOBFO algorithm has three main steps: 1) CHEMOTATIC, 2) REPRODUCTION, and 3) ELIMINATION and DISPERSAL.\nIntuitively we are able to say that the solution a is better than solution b in multiobjective optimization if and only if solution a dominates solution b. Thus, the domination method made it possible to compare different solutions in the multiobjective criteria. To this end, the population is sorted by using the well known fast nondominated sort (K. Deb et al. 2002). Shortly, for each individual i, an integer value keeping the number of solutions which dominate i is established, and a set Si with the individuals dominated by the individual i is computed. With these variables, each individual is allocated a rank which represents the front. Thus, the Pareto front has rank 0. Those individuals dominated individuals of the Pareto front have rank 1. Together, the individuals dominated only by individuals of rank r have rank r + 1. Note, the solutions with rank 0 are the best ones in this approach."}, {"heading": "5.2.1 Uniform Like Crossover", "text": "The crossover is one of the main operators of GA. This operator exchanges some elements in two parents and create a new solution (offspring). Essentially, crossover is a completely random operator that transfers the information from parents to offspring. So far, many kinds of crossover are available for different purposes, here we selected one of very famous one.\nThe Uniform Like Crossover (ULX) operator was introduced by Tate and Smith (1995), and mostly applies on permutation, based solutions. Crossover combines two permutation A and B of size P and creates a new solution. Similarly, ULX crossover compares the elements in A and B and copies the equal elements to the solution. After that, one of the A and B is selected\nrandomly, and the first element of that transfers to the first location in the solution. Then, for the second location second element of another permutation will be transferred. If the transferred element repeated twice, it has not to be transferred, instead this element will be replaced from same location of another permutation. If again the element is repeated, a random number of size P will generated and replaced to the solution.\nFigure 3 demonstrates the proposed MOBFO algorithm. Similarly, MOBFO has 10 steps like BFO algorithm, but instead of one solution this algorithm attempts to find a set of nondominated solutions. Thus, all steps are as same as BFO, where M is another variable that is initialized for the number of objectives, and ULX crossover is plugged in to the chemotactic part in order to update every two bacteria to create a new solution. Ultimately, a set of nondominated solution using the raking mechanism algorithm will be collected in each iteration. In addition to that, multiobjective TS is plugged in to the elimination and dispersal part in or-\nder to apply local search on the current nondominated set of solutions and optimize them."}, {"heading": "6 Experimental Results", "text": "Problems from the well known QAPLIB (Rainer E. Burkhard et al. 1991) are used here to evaluate the performance of the algorithm. The experimental environment is P4 PC machine with 1GB memory; operating system is windows 7; developing software is MATLAB 2010a. We tested our BFO on 14 instances in QAPLIB. The results were compared with original BFO and best known so far solutions that are available in QAPLIB. Also, Standard Deviation (SD) of the our BFO and results obtained for P. Ji et al (2006) and Z. Drezner (2003) were compared. Table 1 shows the algorithm settings that were tested.\nTable 2 demonstrates the results of single objective instances. It can be found that our BFO performed better than original BFO in terms of optimal results. And\nour BFO performed better than Z. Drezner (2003) and P. Ji et al (2006) when the problem size is not large. However, in some large instances when the size is 32 and 50 our BFO performed as good as Z. Drezner (2003) and P. Ji et al (2006).\nWe used a set of 12 benchmark mQAP instances to test the performance of MOBFO. Table 3 shows instances were created by Knowles, J.D. and Corne, D.W. (2002) and are available at http://www.cs.bham.ac.uk/\u223cjdk/mQAP/. The experimental environment and developing software were keep as same as BFO. We compared our MOBFO to original multiobjective BFO and to three state-of-the-art evolutionary multiobjective algorithms - mGRASP/MH, Fuzzy PSO, NSGA-II. In NSGA-II the nondominated solutions found so far have priority to survive in the population. The diversity of these nondominated solutions is maintained by estimating their density. In Fuzzy PSO scheme, the representations of the position and velocity of the particles in the conventional PSO is extended form the real vectors to fuzzy matrices. In mGRASP/MH, elitist-based greedy randomized construction, cooperation between solutions, and weighted-vector adaptations were used to accelerate convergence and diversify the search.\nThe Generational Distance (GD) values found by five algorithms are summarized in Table 4. It is evident that our MOBFO clearly outperform the other three algorithms on all test instances. Clearly, mGRASP/MH and original mBFO show the worst performance in the terms of minimizing GD. The main reason for original mBFO and NSGA-II might be the lack of local research to improve offspring solutions in these two algorithms. And the main for mGRASP/MH might be the construction of starting solutions copies parts or components from elite solutions.\nThe Pareto front of the nondominated sets found by all five algorithms after 10 times run on the four two-objectives instances are plotted in figures 4-7. It can be observed from Fig. 4 that our MOBFO and NSGA-II algorithm find almost the same set of nondominated set and better than other three algorithms on instance KC10-2fl-1rl. The results in Fig. 5 shows that our MOBFO, Fuzzy PSO, and NSGA-II clearly perform better than original mBFO and mGRASP/MH on KC10-2fl-1uni. Figs. 6 and 7 show that our MOBFO not only find more Pareto front solutions, but also the results are more converge than other approaches."}, {"heading": "7 Conclusions", "text": "Since QAP is an NP-hard problem, its solution cannot be achieved in reasonable time. Therefore, this is one of\nthe reasons that scientists try to find an adaptive combinatorial optimization algorithm to tackle this problem. Bacteria foraging algorithm is one of the well known combinatorial optimization algorithms which can be used to find compatible solutions. We modified BFO algorithm for the solution of QAP and mQAP. The proposed algorithm is based on bacteria foraging optimization which were developed in two extents: single objective optimization and multiobjective optimization. For this purpose, two genetic algorithm updating mechanisms, crossover and mutation, were used to update the solutions. We also used tabu search algorithm to improve the nondominated solutions locally. In the single objective optimization, the proposed algorithm attempts to find best solution, but on the other hand, multiobjective optimization algorithm tries to find a set of nondominated solutions. Therefore, in the multiobjective case, dominance technique were applied to find the Pareto front of nondominated solutions. The proposed algorithm results show that BFO and MOBFO can solve the QAP and mQAP problems better than compared algorithms. Also, results show that GA operators help our BFO and MOBFO to update the solutions and move towards the best ones. Table 2 show the results of the single objective problems using our BFO that are as same as optimal solutions. The performance of Pareto fronts that have been achieved for the mQAP problems (Figs. 4-7) show that our MOBFO algorithm outperform than other approaches in this contexts."}, {"heading": "8 Compliance with Ethical Standards:", "text": "Conflict of Interest: Author S. Parvandeh declares that he has no conflict of interest. Author A. U\u0308nveren declares that he has no conflict of interest. Author B. C. White declares that he has no conflict of interest. Author M. Boroumand declares that he has no conflict of interest. Author P. Soltani declares that she has no conflict of interest.\nEthical approval: All procedures performed in studies involving human participants were in accordance with the ethical standards of the institutional and/or national research committee and with the 1964 Helsinki declaration and its later amendments or comparable ethical standards.\nEthical approval: This article does not contain any studies with animals performed by any of the authors.\nInformed consent: Informed consent was obtained\nfrom all individual participants included in the study."}], "references": [{"title": "The Molecular Traveling Salesman", "author": ["W Banzhaf"], "venue": "Biological Cybernetics", "citeRegEx": "Banzhaf,? \\Q1990\\E", "shortCiteRegEx": "Banzhaf", "year": 1990}, {"title": "Improved Bacterial Foraging Algorithms and their Applications to Job Shop Scheduling Problems", "author": ["Chunguo Wu", "Na Zhang", "Jingqing Jiang", "Jinhui Yang", "Yanchun Liang"], "venue": "International Journal of Programming Languages and Applications (IJPLA),", "citeRegEx": "Wu et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Wu et al\\.", "year": 2007}, {"title": "A Genetic Approach to the Quadratic Assignment Problem, Computers & Operations Research", "author": ["David M. Tate", "Alice E. Smith"], "venue": null, "citeRegEx": "Tate and Smith,? \\Q1995\\E", "shortCiteRegEx": "Tate and Smith", "year": 1995}, {"title": "A Parallel Processing Approach to a Multiple Traveling Salesman Problem Using Evolutionary Programming", "author": ["Fogel", "D. B"], "venue": "Proceedings of the Fourth annual Symposium on Parallel Processing", "citeRegEx": "Fogel and B,? \\Q1990\\E", "shortCiteRegEx": "Fogel and B", "year": 1990}, {"title": "Tabu Search: A Tutorial", "author": ["Fred Glover"], "venue": null, "citeRegEx": "Glover,? \\Q1990\\E", "shortCiteRegEx": "Glover", "year": 1990}, {"title": "A Comparative Study of Meta-heuristic Algorithms for Solving Quadratic Assignment Problem", "author": ["Gamal Abd El-Nasser A. Said", "Abeer M. Mahmoud", "El-Sayed M. El-Horbaty"], "venue": "International Journal of Advanced Computer Science and Applications (IJACSA),", "citeRegEx": "Said et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Said et al\\.", "year": 2014}, {"title": "Bacterial Foraging Algorithm for the Robust Design of Multimachine Power System Stabilizer", "author": ["G.Naresh", "M.Ramalinga Raju", "S.V.L.Narasimham"], "venue": "International Conference on Signal, Image Processing and Applications. IPCSIT vol.21,", "citeRegEx": "G.Naresh et al\\.,? \\Q2011\\E", "shortCiteRegEx": "G.Naresh et al\\.", "year": 2011}, {"title": "An Elitist GRASP Metaheuristic for the Multi-objective Quadratic Assignment Problem", "author": ["Hui Li", "Dario Landa-Silva"], "venue": "LNCS 5467,", "citeRegEx": "Li and Landa.Silva,? \\Q2009\\E", "shortCiteRegEx": "Li and Landa.Silva", "year": 2009}, {"title": "Instance Generators and Test Suites for the Multiobjective Quadratic Assignment Problem", "author": ["J.D. Knowles", "D.W. Corne"], "venue": "Evolutionary Multi Criterion Optimization (EMO", "citeRegEx": "Knowles and Corne,? \\Q2002\\E", "shortCiteRegEx": "Knowles and Corne", "year": 2002}, {"title": "A Fast and Elitist Multiobjective Genetic Algorithm: NSGA-II", "author": ["K. Deb", "A. Pratap", "S. Agarwal"], "venue": "Meyarivan", "citeRegEx": "Deb et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Deb et al\\.", "year": 2002}, {"title": "Biomimicry of bacterial foraging for distributed optimization and control", "author": ["K.M. Passino"], "venue": "IEEE Control Syst. Mag., vol. 22,", "citeRegEx": "Passino,? \\Q2002\\E", "shortCiteRegEx": "Passino", "year": 2002}, {"title": "Particle Swarm Optimization Algorithm For Quadratic Assignment Problem", "author": ["L. Congying", "Z. Huanping", "Y. Xinfeng"], "venue": "International Conference On Computer Science And Network Technology", "citeRegEx": "Congying et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Congying et al\\.", "year": 2011}, {"title": "A Fuzzy Particle Swarm Approach to Multi objective Quadratic Assignment Problems", "author": ["M. Zhao", "A. Abraham", "C. Grosan", "H. Liu"], "venue": "Second Asia International Conference on Modelling & Simulation", "citeRegEx": "Zhao et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Zhao et al\\.", "year": 2008}, {"title": "A Solution Method for the Quadratic Assignment Problem (QAP)", "author": ["P. Ji Yongzhong Wu Haozhao Liu"], "venue": "The Sixth International Symposium on Operations Research and Its Applications (ISORA06). ORSC & APORC,", "citeRegEx": "Liu,? \\Q2006\\E", "shortCiteRegEx": "Liu", "year": 2006}, {"title": "Genetic Algorithms for the Travelling Salesman Problem: A Review of Representations and Operators", "author": ["P. Larran Aga", "C.M.H. Kuijpers", "R.H. Murga", "I. Inza", "S. Dizdarevic"], "venue": "Artificial Intelligence Review", "citeRegEx": "Aga et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Aga et al\\.", "year": 1999}, {"title": "Qaplib Assignment Problem Library", "author": ["Rainer E. Burkard", "Stefan E. Karisch", "Franz Rendl"], "venue": "European Journal of Operational Research,", "citeRegEx": "Burkard et al\\.,? \\Q1991\\E", "shortCiteRegEx": "Burkard et al\\.", "year": 1991}, {"title": "A greedy genetic algorithm for the quadratic assignment problem", "author": ["Ravindra K. Ahujaa", "James B. Orlinb", "Ashish"], "venue": "Tiwaric", "citeRegEx": "Ahujaa et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Ahujaa et al\\.", "year": 2000}, {"title": "Solving the Multi-objective Quadratic Assignment Problem Using a fast messy Genetic Algorithm", "author": ["Richard O. Day", "Mark P. Kleeman", "Gary B. Lamont"], "venue": "Dept. of Electr. & Comput. Eng., Air Force Inst. of Technol.,", "citeRegEx": "Day et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Day et al\\.", "year": 2003}, {"title": "Intelligent Bacterial Foraging Optimization Technique to Economic Load Dispatch Problem", "author": ["R. Vijay"], "venue": "International Journal of Soft Computing & Engineering (IJSCE). ISSN: 2231-2307,", "citeRegEx": "Vijay,? \\Q2012\\E", "shortCiteRegEx": "Vijay", "year": 2012}, {"title": "Bacterial Foraging Algorithm Based Multi objective Optimal Design of single phase Transformer", "author": ["S. Subramanian", "S. Padma"], "venue": "Journal of Computer Science And Engineering,", "citeRegEx": "Subramanian and Padma,? \\Q2011\\E", "shortCiteRegEx": "Subramanian and Padma", "year": 2011}, {"title": "A cooperative parallel Tabu search algorithm for the quadratic assignment problem", "author": ["Tabitha James", "Cesar Rego", "Fred Glover"], "venue": "European Journal of Operational Research", "citeRegEx": "James et al\\.,? \\Q2009\\E", "shortCiteRegEx": "James et al\\.", "year": 2009}, {"title": "Assignment problems and the location of economic activities, Econometrica", "author": ["T.C. Koopmans", "M.J. Beckmann"], "venue": null, "citeRegEx": "Koopmans and Beckmann,? \\Q1957\\E", "shortCiteRegEx": "Koopmans and Beckmann", "year": 1957}, {"title": "Robust taboo search for the quadratic assignment problem", "author": ["E. Taillard"], "venue": "Parallel Computing", "citeRegEx": "Taillard,? \\Q1991\\E", "shortCiteRegEx": "Taillard", "year": 1991}, {"title": "A new genetic algorithm for the quadratic assignment problem", "author": ["Z. Drezner"], "venue": "INFORMS Journal on Computing,", "citeRegEx": "Drezner.,? \\Q2003\\E", "shortCiteRegEx": "Drezner.", "year": 2003}], "referenceMentions": [{"referenceID": 21, "context": "The QAP has been introduced by Koopmans and Beckmann (1957). It can be defined as a problem to", "startOffset": 31, "endOffset": 60}, {"referenceID": 21, "context": "The formulation of the QAP can be defined as follows (Koopmans and Beckmann 1957):", "startOffset": 53, "endOffset": 81}, {"referenceID": 10, "context": "Passino (2002), and it consists of four steps namely: 1) CHEMOTACTIC, 2) SWARM, 3)", "startOffset": 0, "endOffset": 15}, {"referenceID": 10, "context": "Passino (2002), is to elimi-", "startOffset": 0, "endOffset": 15}, {"referenceID": 10, "context": "Passino (2002), used 0.", "startOffset": 0, "endOffset": 15}, {"referenceID": 2, "context": "The Uniform Like Crossover (ULX) operator was introduced by Tate and Smith (1995), and mostly applies on permutation, based solutions.", "startOffset": 60, "endOffset": 82}, {"referenceID": 23, "context": "Drezner (2003) P.", "startOffset": 0, "endOffset": 15}, {"referenceID": 23, "context": "Drezner (2003) P. Ji et al (2006)", "startOffset": 0, "endOffset": 34}, {"referenceID": 23, "context": "Drezner (2003) were compared.", "startOffset": 0, "endOffset": 15}, {"referenceID": 23, "context": "Drezner (2003) and P.", "startOffset": 0, "endOffset": 15}, {"referenceID": 23, "context": "Drezner (2003) and P. Ji et al (2006) when the problem size is not large.", "startOffset": 0, "endOffset": 38}, {"referenceID": 23, "context": "Drezner (2003) and P. Ji et al (2006) when the problem size is not large. However, in some large instances when the size is 32 and 50 our BFO performed as good as Z. Drezner (2003) and P.", "startOffset": 0, "endOffset": 181}, {"referenceID": 23, "context": "Drezner (2003) and P. Ji et al (2006) when the problem size is not large. However, in some large instances when the size is 32 and 50 our BFO performed as good as Z. Drezner (2003) and P. Ji et al (2006).", "startOffset": 0, "endOffset": 204}], "year": 2016, "abstractText": "The Bacterial Foraging Optimization (BFO) is one of the metaheuristics algorithms that most widely used to solve optimization problems. The BFO is imitated from the behavior of the foraging bacteria group such as Ecoli. The main aim of algorithm is to eliminate those bacteria that have weak foraging methods and maintaining those bacteria that have strong foraging methods. In this extent, each bacterium communicates with other bacteria by sending signals such that bacterium change the position in the next step if prior factors have been satisfied. In fact, the process of algorithm allows bacteria to follow up nutrients toward the optimal. In this paper, the BFO is used for the solutions of Quadratic Assignment Problem (QAP), and multiobjective QAP (mQAP) by using updating mechanisms including mutation, crossover, and a local search.", "creator": "LaTeX with hyperref package"}}}