{"id": "1608.08144", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Aug-2016", "title": "Achievements in Answer Set Programming (Preliminary Report)", "abstract": "this paper describes an approach to the computational methodology of answer set programming ( called asp ) that can facilitate encouraging the design adoption of alternative encodings that currently are easy programs to readily understand consciously and provably correct. under this approach, after initially appending a rule or naming a small group array of rules to the emerging entire program we include a meaningful comment that uniquely states what has finally been \" achieved \" dramatically so far. for this strategy allows most us architects to simultaneously set work out our innovative understanding of adapting the grammatical design of the advanced program used by consistently describing the roles of small ambiguous parts of the program in a mathematically precise sequential way.", "histories": [["v1", "Mon, 29 Aug 2016 16:59:43 GMT  (27kb)", "http://arxiv.org/abs/1608.08144v1", "Paper presented at the 9th Workshop on Answer Set Programming and Other Computing Paradigms (ASPOCP 2016), New York City, USA, 16 October 2016"]], "COMMENTS": "Paper presented at the 9th Workshop on Answer Set Programming and Other Computing Paradigms (ASPOCP 2016), New York City, USA, 16 October 2016", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["vladimir lifschitz"], "accepted": false, "id": "1608.08144"}, "pdf": {"name": "1608.08144.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": ["vl@cs.utexas.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 8.\n08 14\n4v 1\n[ cs\n.A I]\n2 9\nA ug"}, {"heading": "1 Introduction", "text": "This paper describes an approach to the methodology of answer set programming [13,14] that can facilitate the design of encodings that are easy to understand and provably correct. Under this approach, after appending a rule or a small group of rules to the emerging program, the programmer would include a comment that states what has been \u201cachieved\u201d so far, in a certain precise sense.\nConsider, for instance, the program in Fig. 1. Its first rule, viewed as a one-\n% Program 8Queens\nrow(1..8). col(1..8). 8 { queen(I,J) : col(I), row(J) } 8. :- queen(I,J), queen(I,JJ), J != JJ. :- queen(I,J), queen(II,J), I != II. :- queen(I,J), queen(II,JJ), (I,J) != (II,JJ), |I-II|=|J-JJ|.\nFig. 1. 8 queens program, adapted from [7, Sect. 3.2].\nrule program, has a unique stable model S, which satisfies the following condition:\nA ground atom of the form row(i) belongs to S iff ii \u2208 {1, . . . , 8}. (1)\nCondition (1) holds also if S is the stable model of the first two rules of the program in Fig. 1. And it holds if S is any stable model of the first three rules, and so on, for all 6 \u201cprefixes\u201d (initial segments) of the program. This is what we mean by achievement: once the programmer declares that a property \u201chas been achieved,\u201d he is committed to maintaining this property of stable models until the program is completed.\nAfter writing the second rule, the programmer can claim that something else has been achieved:\nA ground atom of the form col(j) belongs to S iff j \u2208 {1, . . . , 8}. (2)\nThis condition holds if S is a stable model of any prefix of the program that includes the first two rules.\nAdditional properties achieved by adding the third rule can be expressed as follows:\nSet S contains exactly 8 ground atoms of the form queen(i, j). For each of these atoms, i, j \u2208 {1, . . . , 8}.\n(3)\nIf a program is written in this manner then every achievement documented in the process of writing it describes a property shared by all stable models of the entire program. We conjecture that under some conditions this list of achievements can serve as the skeleton of a proof of its correctness, in the spirit of Edsger Dijkstra\u2019s advice:\n. . . one should not first make the program and then prove its correctness, because then the requirement of providing the proof would only increase the poor programmer\u2019s burden. On the contrary: the programmer should let correctness proof and program grow hand in hand [5].\nRecording important achievements in the process of writing an ASP program may be similar to recording important loop invariants in procedural programming: it does not ensure the correctness of the program but helps the programmer move towards the goal of proving correctness."}, {"heading": "2 Programs, Prefixes, and Achievements", "text": "In this paper, by an (ordered) program we understand a list of rules R1, . . . , Rn (n \u2265 1) in the input language of an answer set solver, such as clingo [9] or dlv [6]. The order of rules is supposed to reflect the order in which the programmer writes them in the process of creating the program. It does not affect the semantics of the program, but it is essential for understanding the process of programming.\nWe restrict attention to programs without classical negation. (This limitation is discussed in the conclusion.) Stable models of a program without classical\nnegation are sets of ground atoms that contain no arithmetic operations, intervals, or pools [9, Sect. 3.1.7, 3.1.9, 3.1.10]. Such ground atoms will be called precomputed.1 An interpretation is a set of precomputed atoms.\nThe k-th prefix of a program R1, . . . , Rn, where 1 \u2264 k \u2264 n, is the program R1, . . . , Rk. We will express that a program \u0393 is a prefix of a program \u03a0 by writing \u0393 \u2264 \u03a0 . The relation \u2264 is a total order on the set of prefixes of a program.\nIn some programs, constants are used as placeholders for values provided by the user [9, Sect. 3.1.15]. For example, the constant n is used as a placeholder for an arbitrary positive integer in the generalization of the 8 queens program shown in Fig. 2. We assume here that \u03a0 is a program that does not contain\nsuch placeholders, so that the stable models of \u03a0 are completely determined by its rules, without any additional input from the user. An extension to programs with input is discussed in the next section.\nAn achievement of a prefix \u0393 of \u03a0 is a property of sets of interpretations that holds for all stable models of all programs \u2206 such that \u0393 \u2264 \u2206 \u2264 \u03a0 .\nFor example, (1) is an achievement of the first prefix of program 8Queens (Fig. 1); (2) is an achievement of its second prefix; and (3) is an achievement of its third prefix. Conditions (1) and (2), and the conjunction of conditions (1)\u2013(3), are achievements of the third prefix as well. Any condition that holds for all sets of interpretations is trivially an achievement of any prefix of any program.\nThe following three conditions are achievements of the last three prefixes of 8Queens:\nEach column of the 8\u00d7 8 chessboard includes at most one square (i, j) such that the atom queen(i, j) belongs to S. (4)\n1 This terminology follows Gebser et al. [7, Sect. 2.1], where \u201cprecomputed terms\u201d are defined. Calimeri et al. [3, Sect. 2.1] talk about elements of the \u201cHerbrand universe\u201d of a program in the same sense.\nEach row of the 8\u00d7 8 chessboard includes at most one square (i, j) such that the atom queen(i, j) belongs to S.\n(5)\nEach diagonal of the 8\u00d7 8 chessboard includes at most one square (i, j) such that the atom queen(i, j) belongs to S. (6)\nThus every stable model S of 8Queens satisfies all conditions (1)\u2013(6)."}, {"heading": "3 Programs with Input", "text": "The value of a placeholder, such as constant n in Fig. 2, is one kind of input that an answer set solver may expect in addition to the rules of the program. A definition of an \u201cextensional predicate\u201d occurring in the bodies of rules is another kind. For example, the program Hamiltonian (Fig. 3) needs to be supplemented\nby definitions of\n\u2013 the predicate vertex/1, representing the set of vertices of a finite directed graph G, \u2013 the predicate edge/2, representing the set of edges of G, \u2013 the placeholder v0, which is a vertex of G.\nIf i is a valid input for a program \u03a0 then we can talk about models of \u03a0 that are stable for input i, or \u201ci-stable.\u201d2\nFor a program with input, an achievement is defined as a relation between valid inputs and sets of interpretations. Such a relation R will be called an achievement of a prefix \u0393 of \u03a0 if R(i, S) holds whenever S is an i-stable model of a program \u2206 such that \u0393 \u2264 \u2206 \u2264 \u03a0 .\nFor example, the sentence\nA ground atom of the form row(i) belongs to S iff \u2208 {1, . . . , n} (7)\n2 Programs with input are similar to lp-functions in the sense of Gelfond and Przymusinska [11].\nexpresses a relation between n and S that is an achievement of the first prefix of NQueens. It is obtained from condition (1) by replacing 8 with n, and achievements of the other prefixes of that program can be obtained in a similar way from conditions (2)\u2013(6).\nThe following two conditions are achievements of the first two prefixes of Hamiltonian :\nEvery pair (x, y) such that the atom in(x, y) belongs to S is an edge of G; for every vertex x of G there is a unique y such that the atom in(x, y) belongs to S.\n(8)\nFor every vertex y of G there is a unique x such that the atom in(x, y) belongs to S. (9)\nNothing interesting has been achieved by adding the third rule, but the following condition is an achievement of the fourth prefix of the program:\nThe set of symbols x such that the atom reached(x) belongs to S consists of the vertices x for which there exists a walk v0, . . . , vn such that n \u2265 1, v0 = v0, vn = x, and every atom of the form in(vi, vi+1) belongs to S. (10)\nFinally, here is an achievement of the entire program:\nFor every vertex x of G, the atom reached(x) belongs to S. (11)"}, {"heading": "4 Records of Achievement", "text": "A record of achievement for a program \u03a0 is a function that maps some (possibly all) prefixes of \u03a0 , including \u03a0 itself, to their achievements. For instance, the function that maps the prefixes of 8Queens to conditions (1)\u2013(6) is a record of achievement, as well as the function that maps the first, second, fourth and fifth prefixes of Hamiltonian to conditions (8)\u2013(11). Every program has a trivial record of achievement that maps all its prefixes to the identically true condition.\nA record of achievement a can be represented by including in the program, after each prefix \u0393 in the domain of a, a comment that describes the condition a(\u0393 ). In Fig. 4 we use a convention that helps us describe these conditions concisely: in the comment\nachieved: row/1 = {1,...,n}\nwe understand row/1 as shorthand for \u201cthe set of precomputed terms i such that the atom row (i) belongs to S.\u201d In view of this convention, the comment above is a concise reformulation of condition (7). In the other comments, col/1 and queen/2 are understood in a similar way.\nFigure 4 includes also a comment that tells us which inputs for the program are considered valid.\nFigure 5 uses another useful convention. In the comment\nachieved: For every vertex Y of G there is a unique X such that in(X,Y)\nwe understand X and Y as metavariables for precomputed terms, and this comment is interpreted as follows: \u201cfor every vertex y of G, there exists a unique precomputed term x such that the atom in(x, y) belongs to S.\u201d Thus the comment above is a reformulation of condition (9)."}, {"heading": "5 Completeness", "text": "If a is a record of achievement for a program \u03a0 , and \u2206 is a prefix of \u03a0 , then by a\u2217(\u2206) we denote the conjunction of conditions a(\u0393 ) for all prefixes \u0393 of \u2206 that belong to the domain of a. It is clear that condition a\u2217(\u2206) is an achievement of \u2206. In particular, all stable models of \u03a0 satisfy condition a\u2217(\u03a0). The converse is, generally, not true\u2014it is possible that an interpretation satisfying a\u2217(\u03a0) is not a stable model of \u03a0 .\nThe following notation and terminology will be used to discuss this issue. For any prefix \u0393 of a program \u03a0 , by Preds(\u0393 ) we denote the set consisting of the predicates occurring in \u0393 and the input predicates of \u03a0 . For instance, if \u0393 is the first prefix of Hamiltonian then Preds(\u03a0) consists of the predicates\nvertex/1, edge/2, in/2. (12)\nThe expression Preds(I), where I is an interpretation, stands for the set of predicates occuring in I. About a record of achievement a for a program \u03a0 we will say that it is complete if for every \u0393 in the domain of a, all interpretations I satisfying a\u2217(\u0393 ) for which Preds(I) \u2286 Preds(\u0393 ) are stable models of \u0393 .\nThe records of achievement shown in Fig. 4 and 5 are complete. The completeness of the latter, for example, entails that\n(a) any interpretation S such that atoms in S contain no predicates other than (12) is a stable model of the first rule of Hamiltonian iff it satisfies condition (8); (b) such an interpretation is a stable model of the first two rules of Hamiltonian iff it satisfies conditions (8) and (9); (c) any interpretation S such that atoms in S contain no predicates other than\nvertex/1, edge/2, in/2, reached/1\nis a stable model of the first four rules of Hamiltonian iff it satisfies conditions (8)\u2013(10); (d) such an interpretation is a stable model of the entire program iff it satisfies conditions (8)\u2013(11).\nThe completeness property of the record of achievement in Fig. 5 is closely related to the correctness of the program as an encoding of Hamiltonian cycles. From property (d) we can conclude that a set of edges of G is a Hamiltonian cycle iff it has the form\n{(x, y) : in(x, y) \u2208 S}\nfor some stable model S of Hamiltonian ."}, {"heading": "6 Achievement-Based Answer Set Programming", "text": "Records of achievement in Fig. 4 and 5 are not only complete but also detailed, in the sense that they include achievements for almost all prefixes of the programs. The only rule in these programs that is not followed by an achievement comment is the first rule in the recursive definition of reached . The role of that rule cannot be properly explained unless we treat it as part of the definition.\nDeveloping an ASP program along with a complete and detailed record of achievement can be called \u201cachievement-based\u201d answer set programming. This strategy allows us to set out our understanding of the design of the program by describing the roles of individual rules, or small groups of rules, in a mathematically precise way.\nTo further illustrate this idea, we present in Fig. 6\u20138 three \u201creal life\u201d ASP programs accompanied by complete, detailed records of achievement. In Fig. 7, the rule\n:- hb(N,X,Y), hb(N,Y,Z), not hb(N,X,Z).\nreplaces the pair of rules\nhb(N,X,Z) :- hb(N,X,Y), hb(N,Y,Z).\n:- hb(N,X,X).\nfrom the original paper by Brain et al. [1]. The problem with the original version is that the first rule of the pair may temporarily destroy the irreflexivity of the relation of hbN that was true at the previous step; this property is restored by the second rule. That is not in the spirit of the achievement-based approach, which emphasizes the gradual accumulation of properties that we would like to see in the complete program."}, {"heading": "7 Conclusion", "text": "As we are adding rules to an emerging ASP program, we deal at every step with a single executable piece of code, unlike the non-executable pseudo-code formed in the process of stepwise refinement of a procedural program, and unlike a collection of executable subroutines formed in the process of bottom-up design. The idea of looking at a prefix as if it was a complete program, thinking about its stable models, and relating them to the stable models of the final product is at the root of achievement-based ASP.\nWhen a program is developed in accordance with this approach, it begins with comments that precisely describe its valid inputs. Then, after every rule or small group of rules, we include a comment describing what has been achieved. Collectively these comments represent a complete record of achievement.\nAccording to Gebser et al. [7, Sect. 3.2],\n[t]he basic approach to writing encodings in ASP follows a generate-andtest methodology, also referred to as guess-and-check. . . A \u201cgenerating\u201d part is meant to non-deterministically provide solution candidates, while a \u201ctesting\u201d part eliminates candidates violating some requirements. . . Both parts are usually amended by \u201cdefining\u201d parts providing auxiliary concepts.\nMost programs discussed in this paper are designed in accordance with this basic approach.3 In particular, the two rules with reached in the head (Fig. 3) define an auxiliary concept, as well as two rules with reachable in the head in Fig. 6 and the rule with covered in the head in Fig. 7. When a program includes a definition consisting of more that one rule then it has a prefix that covers only a part of the definition, and such a prefix is likely to achieve nothing of interest, as in the case of Hamiltonian and OBT .\n3 The program in Fig. 8 is an exception\u2014it has no generating part and no testing part. Also, it is not clear whether the designers of Hamiltonian (Fig. 3) intended the second rule for the generating part or for the testing part. (The second rule is syntactically similar to the first, which is definitely a generate rule. On the other hand, adding the second rule does not really generate new solution candidates; it eliminates some of the candidates generated earlier.)\nOur advice\u2014as you are adding rules to your program, keep track of what has been achieved\u2014differs from the \u201cgenerate-and-test\u201d advice in that it refers to mathematical properties of stable models, and not to programmer\u2019s intentions.\nThe programs discussed in this paper do not use classical negation. In the presence of classical negation, answer sets consist of \u201cprecomputed classical literals\u201d\u2014precomputed atoms and classical negations of such atoms. Extending the definition of a complete record of achievement to such programs is straightforward. On the other hand, many programs with classical negation contain defaults [10, Chap. 5], such as the closed world assumption and the commonsense law of inertia, and the achievement-based approach may be not so useful in application to programs containing defaults. A default does not \u201cachieve\u201d anything in the technical sense of Sect. 2.\nIn this preliminary report, claims about records of achievement and their completeness are stated without proof. We would like to develop theoretical tools for proving such claims. Proofs of this kind will rely on precise descriptions of the semantics of underlying programming languages, such as the definitions of the core language of dlv [12, Sect. 2.2], ASP Core [3, Sect. 2], or Abstract Gringo [8, Sect. 4]. (These definitions need to be extended to programs with input.) Such proofs will rely also on precise definitions of the terminology used in achievement comments (\u201cdiagonals of the chessboard,\u201d \u201cthe Borda rule\u201d).\nIf a program has a precise specification then we would like its record of achievement to be closely related to that specification, so that the correctness of the program will easily follow from the completeness of the record. In such cases, the record of achievement may suggest a way to organize a proof of correctness: go over the achievements in its domain one by one, and prove that each of them correctly describes the stable models of the corresponding prefix of the program. Once we have arrived at the description of the stable models of the entire program, we will complete the proof of correctness by relating that description to the given specification."}, {"heading": "Acknowledgements", "text": "Thanks to Michael Gelfond, Amelia Harrison, Yuliya Lierler, Julian Michael, and Liangkun Zhao for comments on drafts of this paper. Conversations and exchanges of email messages with Mark Denecker, Esra Erdem, Martin Gebser, Roland Kaminski, Johannes Oetsch, Dhananjay Raju, and Mirek Truszczynski, helped the author develop a better understanding of the methodology of answer set programming. This research was partially supported by the National Science Foundation under Grant IIS-1422455."}], "references": [{"title": "Event-sequence testing using answer-set programming", "author": ["M. Brain", "E. Erdem", "K. Inoue", "J. Oetsch", "J. P\u00fchrer", "H. Tompits", "C. Yilmaz"], "venue": "International Journal on Advances in Software 5, 237\u2013251", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Inferring phylogenetic trees using answer set programming", "author": ["D.R. Brooks", "E. Erdem", "S.T. Erdo\u011fan", "J.W. Minett", "D. Ringe"], "venue": "Journal of Automated Reasoning 39, 471\u2013511", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2007}, {"title": "ASP-Core-2: Input language format", "author": ["F. Calimeri", "W. Faber", "M. Gebser", "G. Ianni", "R. Kaminski", "T. Krennwallner", "N. Leone", "F. Ricca", "T. Schaub"], "venue": "Available at https://www.mat.unical.it/aspcomp2013/files/ASP-CORE-2.03b.pdf", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2012}, {"title": "Democratix: A declarative approach to winner determination", "author": ["G. Charwat", "A. Pfandler"], "venue": "Proc. of the 4th International Conference on Algorithmic Decision Theory", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2015}, {"title": "The humble programmer", "author": ["E.W. Dijkstra"], "venue": "Communications of the ACM 15, 859\u2013 866", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1972}, {"title": "The KR system dlv: Progress report, comparisons and benchmarks", "author": ["T. Eiter", "N. Leone", "C. Mateis", "G. Pfeifer", "F. Scarcello"], "venue": "Cohn, A., Schubert, L., Shapiro, S. (eds.) Proceedings of International Conference on Principles of Knowledge Representation and Reasoning (KR). pp. 406\u2013417", "citeRegEx": "6", "shortCiteRegEx": null, "year": 1998}, {"title": "Answer Set Solving in Practice", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "T. Schaub"], "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning, Morgan and Claypool Publishers", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2012}, {"title": "Abstract Gringo", "author": ["M. Gebser", "A. Harrison", "R. Kaminski", "V. Lifschitz", "T. Schaub"], "venue": "Theory and Practice of Logic Programming 15, 449\u2013463", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Potassco User Guide, version 2.0", "author": ["M. Gebser", "R. Kaminski", "B. Kaufmann", "M. Lindauer", "M. Ostrowski", "J. Romero", "T. Schaub", "S. Thiele"], "venue": "http://potassco.sourceforge.net", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Knowledge Representation, Reasoning, and the Design of Intelligent Agents: The Answer-Set Programming Approach", "author": ["M. Gelfond", "Y. Kahl"], "venue": "Cambridge University Press", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2014}, {"title": "Towards a theory of elaboration tolerance: Logic programming approach", "author": ["M. Gelfond", "H. Przymusinska"], "venue": "International Journal of Software Engineering and Knowledge Engineering 6(1), 89\u2013112", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1996}, {"title": "The DLV system for knowledge representation and reasoning", "author": ["N. Leone", "G. Pfeifer", "W. Faber", "T. Eiter", "G. Gottlob", "S. Perri", "F. Scarcello"], "venue": "ACM Transactions on Computational Logic 7(3), 499\u2013562", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2006}, {"title": "Stable models and an alternative logic programming paradigm", "author": ["V. Marek", "M. Truszczynski"], "venue": "The Logic Programming Paradigm: a 25-Year Perspective, pp. 375\u2013 398. Springer Verlag", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1999}, {"title": "Logic programs with stable model semantics as a constraint programming paradigm", "author": ["I. Niemel\u00e4"], "venue": "Annals of Mathematics and Artificial Intelligence 25, 241\u2013273", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1999}], "referenceMentions": [{"referenceID": 12, "context": "This paper describes an approach to the methodology of answer set programming [13,14] that can facilitate the design of encodings that are easy to understand and provably correct.", "startOffset": 78, "endOffset": 85}, {"referenceID": 13, "context": "This paper describes an approach to the methodology of answer set programming [13,14] that can facilitate the design of encodings that are easy to understand and provably correct.", "startOffset": 78, "endOffset": 85}, {"referenceID": 4, "context": "On the contrary: the programmer should let correctness proof and program grow hand in hand [5].", "startOffset": 91, "endOffset": 94}, {"referenceID": 8, "context": ", Rn (n \u2265 1) in the input language of an answer set solver, such as clingo [9] or dlv [6].", "startOffset": 75, "endOffset": 78}, {"referenceID": 5, "context": ", Rn (n \u2265 1) in the input language of an answer set solver, such as clingo [9] or dlv [6].", "startOffset": 86, "endOffset": 89}, {"referenceID": 10, "context": ", n} (7) 2 Programs with input are similar to lp-functions in the sense of Gelfond and Przymusinska [11].", "startOffset": 100, "endOffset": 104}, {"referenceID": 0, "context": "[1].", "startOffset": 0, "endOffset": 3}], "year": 2016, "abstractText": "This paper describes an approach to the methodology of answer set programming (ASP) that can facilitate the design of encodings that are easy to understand and provably correct. Under this approach, after appending a rule or a small group of rules to the emerging program we include a comment that states what has been \u201cachieved\u201d so far. This strategy allows us to set out our understanding of the design of the program by describing the roles of small parts of the program in a mathematically precise way.", "creator": "LaTeX with hyperref package"}}}