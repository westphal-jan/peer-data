{"id": "1610.06209", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Oct-2016", "title": "Structured adaptive and random spinners for fast machine learning computations", "abstract": "... we consider quite an older efficient computational framework for solving speeding results up studying several incomplete machine learning linear algorithms with almost no loss of accuracy. likewise the traditionally proposed transformation framework relies on projections manufactured via locally structured matrices that we call structured spinners, which are formed as products of three continuously structured homogeneous matrix - blocks that incorporate rotations. the combined approach scheme is fundamentally highly generic, i. e. h i ) structured matrices used under primary consideration can either be fully - generic randomized 2d or learned, ii ) our original structured family theory contains as special cases all previously frequently considered structured schemes, phase iii ) ~ the setting extends to the small non - objective linear case paradigm where the posterior projections inputs are followed by non - unitary linear functions, respectively and iv ) the method method explicitly finds numerous applications thus including constrained kernel mathematical approximations prepared via random feature vector maps, dimensionality hazard reduction algorithms, new or fast cross - polytope design lsh techniques, deep learning, convex optimization algorithms identified via newton table sketches, quantization with random subset projection trees, mapping and hence more. essentially the previously proposed framework comes with theoretical guarantees characterizing the capacity effect of filling the truncated structured model explicitly in reference, to reaching its sparse unstructured structured counterpart and is based additionally on a general theoretical principle implementation that we describe in studying the paper. as a consequence of this our latest theoretical analysis, additionally we thereby provide effectively the first relevant theoretical accuracy guarantees for considering one of recently the most efficient systematically existing lsh algorithms based on the hd3hd2hd1 structured matrix [ andoni et al., till 2015 ]. the exhaustive experimental evaluation confirms highlights the rapid accuracy stability and convergence efficiency of structured spinners for analyzing a variety as of different analytical applications.", "histories": [["v1", "Wed, 19 Oct 2016 20:48:25 GMT  (171kb,D)", "http://arxiv.org/abs/1610.06209v1", "arXiv admin note: substantial text overlap witharXiv:1605.09046"], ["v2", "Fri, 28 Oct 2016 01:25:06 GMT  (171kb,D)", "http://arxiv.org/abs/1610.06209v2", "arXiv admin note: substantial text overlap witharXiv:1605.09046"], ["v3", "Sat, 26 Nov 2016 17:14:56 GMT  (171kb,D)", "http://arxiv.org/abs/1610.06209v3", "arXiv admin note: substantial text overlap witharXiv:1605.09046"]], "COMMENTS": "arXiv admin note: substantial text overlap witharXiv:1605.09046", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["mariusz bojarski", "anna choromanska", "krzysztof choromanski", "francois fagan", "cedric gouy-pailler", "anne morvan", "nourhan sakr", "tamas sarlos", "jamal atif"], "accepted": false, "id": "1610.06209"}, "pdf": {"name": "1610.06209.pdf", "metadata": {"source": "CRF", "title": "Structured adaptive and random spinners for fast machine learning computations", "authors": ["Mariusz Bojarski", "Anna Choromanska", "Krzysztof Choromanski", "Francois Fagan", "Cedric Gouy-Pailler", "Anne Morvan", "Nouri Sakr", "Tamas Sarlos", "Jamal Atif"], "emails": ["mbojarski@nvidia.com", "achoroma@cims.nyu.edu", "kchoro@google.com", "ff2316@columbia.edu", "cedric.gouy-pailler@cea.fr", "anne.morvan@cea.fr", "nts2122@columbia.edu", "stamas@google.com", "jamal.atif@dauphine.fr"], "sections": [{"heading": null, "text": "We consider an efficient computational framework for speeding up several machine learning algorithms with almost no loss of accuracy. The proposed framework relies on projections via structured matrices that we call Structured Spinners, which are formed as products of three structured matrix-blocks that incorporate rotations. The approach is highly generic, i.e. i) structured matrices under consideration can either be fully-randomized or learned, ii) our structured family contains as special cases all previously considered structured schemes, iii) the setting extends to the non-linear case where the projections are followed by non-linear functions, and iv) the method finds numerous applications including kernel approximations via random feature maps, dimensionality reduction algorithms, new fast cross-polytope LSH techniques, deep learning, convex optimization algorithms via Newton sketches, quantization with random projection trees, and more. The proposed framework comes with theoretical guarantees characterizing the capacity of the structured model in reference to its unstructured counterpart and is based on a general theoretical principle that we describe in the paper. As a consequence of our theoretical analysis, we provide the first theoretical guarantees for one of the most efficient existing LSH algorithms based on the HD3HD2HD1 structured matrix [Andoni et al., 2015]. The exhaustive ex-\n1equal contribution\nperimental evaluation confirms the accuracy and efficiency of structured spinners for a variety of different applications."}, {"heading": "1 Introduction", "text": "A striking majority of machine learning frameworks performs projections of input data via matrices of parameters, where the obtained projections are often passed to a possibly highly nonlinear function. In the case of randomized machine learning algorithms, the projection matrix is typically Gaussian with i.i.d. entries taken from N (0, 1). Otherwise, it is learned through the optimization scheme. A plethora of machine learning algorithms admits this form. In the randomized setting, a few examples include variants of the Johnson-Lindenstrauss Transform applying random projections to reduce data dimensionality while approximately preserving Euclidean distance [Ailon and Chazelle, 2006, Liberty et al., 2008, Ailon and Liberty, 2011], kernel approximation techniques based on random feature maps produced from linear projections with Gaussian matrices followed by nonlinear mappings [Rahimi and Recht, 2007], [Le et al., 2013, Choromanski and Sindhwani, 2016, Huang et al., 2014], [Choromanska et al., 2016], LSH-based schemes [Har-Peled et al., 2012, Charikar, 2002, Terasawa and Tanaka, 2007], including the fastest known variant of the cross-polytope LSH [Andoni et al., 2015], algorithms solving convex optimization problems with random sketches of Hessian matrices [Pilanci and Wainwright, 2015, Pilanci and Wainwright, 2014], quantization techniques using random projection trees, where splitting in each node is determined by a projection of data onto Gaussian direction [Dasgupta and Freund, 2008], and many more. ar X iv :1 61 0. 06 20 9v 1\n[ cs\n.L G\n] 1\nThe classical example of machine learning nonlinear models where linear projections are learned is a multi-layered neural network [LeCun et al., 2015, Goodfellow et al., 2016], where the operations of linear projection via matrices with learned parameters followed by the pointwise nonlinear feature transformation are the building blocks of the network\u2019s architecture. These two operations are typically stacked multiple times to form a deep network.\nThe computation of projections takes \u0398(mn|X |) time, where m\u00d7 n is the size of the projection matrix, and |X | denotes the number of data samples from a dataset X . In case of high-dimensional data, this comprises a significant fraction of the overall computational time, while storing the projection matrix frequently becomes a bottleneck in terms of space complexity.\nIn this paper, we propose the remedy for both problems, which relies on replacing the aforementioned algorithms by their \u201cstructured variants\u201d. The projection is performed by applying a structured matrix from the family that we introduce as Structured Spinners. Depending on the setting, the structured matrix is either learned or its parameters are taken from a random distribution (either continuous or discrete if further compression is required). Each structured spinner is a product of three matrix-blocks that incoporate rotations. A notable member of this family is a matrix of the form HD3HD2HD1, where Dis are either random diagonal \u00b11-matrices or adaptive diagonal matrices and H is the Hadamard matrix. This matrix is used in the fastest known cross-polytope LSH method introduced in [Andoni et al., 2015].\nIn the structured case, the computational speedups are significant, i.e. projections can be calculated in o(mn) time, often in O(n logm) time if Fast Fourier Transform techniques are applied. At the same time, using matrices from the family of structured spinners leads to the reduction of space complexity to sub-quadratic, usually at most linear, or sometimes even constant.\nThe key contributions of this paper are:\n\u2022 The family of structured spinners providing a highly parametrized class of structured methods and, as we show in this paper, with applications in various randomized settings such as: kernel approximations via random feature maps, dimensionality reduction algorithms, new fast cross-polytope LSH techniques, deep learning, convex optimization algorithms via Newton sketches, quantization with random projection trees, and more.\n\u2022 A comprehensive theoretical explanation of the effectiveness of the structured approach based on structured spinners. Such analysis was provided in the literature before for a strict subclass of a very general family of structured matrices\nthat we consider in this paper, i.e. the proposed family of structured spinners contains all previously considered structured matrices as special cases, including the recently introduced P -model [Choromanski and Sindhwani, 2016]. To the best of our knowledge, we are the first to theoretically explain the effectiveness of structured neural network architectures. Furthermore, we provide first theoretical guarantees for a wide range of discrete structured transforms, in particular for the fastest known cross-polytope LSH method [Andoni et al., 2015] based HD3HD2HD1 discrete matrices.\nOur theoretical methods in the random setting apply the relatively new Berry-Esseen type Central Limit Theorem results for random vectors.\nOur theoretical findings are supported by empirical evidence regarding the accuracy and efficiency of structured spinners in a wide range of different applications. Not only do structured spinners cover all already existing structured transforms as special instances, but also many other structured matrices that can be applied in all aforementioned applications."}, {"heading": "2 Related work", "text": "This paper focuses on structured matrices, which were previously explored in the literature mostly in the context of the Johnson-Lindenstrauss Transform (JLT) [Johnson and Lindenstrauss, 1984], where the high-dimensional data is linearly transformed and embedded into a much lower dimensional space while approximately preserving the Euclidean distance between data points. Several extensions of JLT have been proposed, e.g. [Liberty et al., 2008, Ailon and Liberty, 2011, Ailon and Chazelle, 2006, Vyb\u0301\u0131ral, 2011]. Most of these structured constructions involve sparse [Ailon and Chazelle, 2006, Dasgupta et al., 2010] or circulant matrices [Vyb\u0301\u0131ral, 2011, Hinrichs and Vybral, 2011] providing computational speedups and space compression.\nMore recently, the so-called \u03a8-regular structured matrices (Toeplitz and circulant matrices belong to this wider family of matrices) were used to approximate angular distances [Choromanska et al., 2016] and signed Circulant Random Matrices were used to approximate Gaussian kernels [Feng et al., 2015]. Another work [Choromanski and Sindhwani, 2016] applies structured matrices coming from the so-called P-model, which further generalizes the \u03a8-regular family, to speed up random feature map computations of some special kernels (angular, arc-cosine and Gaussian). These techniques did not work for discrete structured constructions, such as the HD3HD2HD1 matrices, or\ntheir direct non-discrete modifications, since they require matrices with low (polylog) chromatic number of the corresponding coherence graphs.\nLinear projections are used in the LSH setting to construct codes for given datapoints which speed up such tasks as approximate nearest neighbor search. A notable set of methods are the so-called cross-polytope techniques introduced in [Terasawa and Tanaka, 2007] and their aforementioned discrete structured variants proposed in [Andoni et al., 2015] that are based on the Walsh-Hadamard transform. Before our work, they were only experimentally verified to produce good quality codes.\nFurthermore, a recently proposed technique based on the so-called Newton Sketch provides yet another example of application for structured matrices. The method [Pilanci and Wainwright, 2015, Pilanci and Wainwright, 2014] is used for speeding up algorithms solving convex optimization problems by approximating Hessian matrices using so-called sketch matrices. Initially, the sub-Gaussian sketches based on i.i.d. sub-Gaussian random variables were used. The disadvantage of the sub-Gaussian sketches lies in the fact that computing the sketch of the given matrix of size n \u00d7 d requires O(mnd) time, where m \u00d7 n in the size of the sketch matrix. Thus the method is too slow in practice and could be accelerated with the use of structured matrices. Some structured approaches were already considered, e.g. sketches based on randomized orthonormal systems were proposed [Pilanci and Wainwright, 2015].\nAll previously considered methods focus on the randomized setting, whereas the structured matrix instead of being learned is fully random. In the context of adaptive setting, where the parameters are being learned instead, we focus in this paper on multi-layer neural networks. We emphasize though that our approach is much more general and extends beyond this setting. Structured neural networks were considered before, for instance in [Yang et al., 2015], where the so-called Deep Fried Neural Convnets were proposed. Those architectures are based on the adaptive version of the Fastfood transform used for approximating various kernels [Le et al., 2013], which is a special case of structured spinner matrices.\nDeep Fried Convnets apply adaptive structured matrices for fully connected layers of the convolutional networks. The structured matrix is of the form: SHG\u03a0HB, where S, G, and B are adaptive diagonal matrices, \u03a0 is a random permutation matrix, and H is the Walsh-Hadamard matrix. The method reduces the storage and computational costs of matrix multiplication step from, often prohibitive, O(nd) down to O(n) storage and O(n log d) computational cost, where d and n denote the size of consequitive layers of the network. At the same time, this approach does not\nsacrifice the network\u2019s predictive performance.\nThe Adaptive Fastfood approach elegantly complements previous works dedicated to address the problem of huge overparametrization of deep models with structured matrices, e.g. the method of [Denil et al., 2013] represents the parameter matrix as a product of two low rank factors and, similarly to Adaptive Fastfood, applies both at train and test time, [Sainath et al., 2013] introduces low-rank matrix factorization to reduce the size of the fully connected layers at train time, and [Li, 2013] uses low-rank factorizations with SVD after training the full model. These methods, as well as approaches that consider kernel methods in deep learning [Cho and Saul, 2009, Mairal et al., 2014, Dai et al., 2014, Huang et al., 2014], are conveniently discussed in [Yang et al., 2015].\nStructured neural networks are also considered in [Sindhwani et al., 2015], where low-displacement rank matrices are applied for linear projections. The advantage of this approach over Deep Fried Convnets is due to the high parametrization of the family of lowdisplacement rank matrices allowing the adjustment of the number of parameters learned based on accuracy and speedup requirements.\nThe class of structured spinners proposed in this work is more general than Deep Fried Convnets or low displacement rank matrices, but it also provides much easier structured constructions, such as HD3HD2HD1 matrices, where Dis are adaptive diagonal matrices. Furthermore, to the best of our knowledge we are the first to prove theoretically that structured neural networks learn good quality models, by analyzing the capacity of the family of structured spinners.\n3 The family of Structured Spinners\nBefore introducing the family of structured spinners, we explain notation. If not specified otherwise, matrix D is a random diagonal matrix with diagonal entries taken independently at random from {\u22121,+1}. By Dt1,...,tn we denote the diagonal matrix with diagonal equal to (t1, ..., tn). For a matrix A = {ai,j}i,j=1,...,n \u2208 Rn\u00d7n, we denote by \u2016A\u2016F its Frobenius norm, i.e. \u2016A\u2016F = \u221a\u2211 i,j\u2208{1,...,n} a 2 i,j , and by \u2016A\u20162 its spectral norm, i.e. \u2016A\u20162 = supx6=0 \u2016Ax\u20162 \u2016x\u20162 . We denote by H the L2-normalized Hadamard matrix. We say that r is a random Rademacher vector if every element of r is chosen independently at random from {\u22121,+1}.\nFor a vector r \u2208 Rk and n > 0 let C(r, n) \u2208 Rn\u00d7nk be a matrix, where the first row is of the form (rT , 0, ..., 0) and each subsequent row is obtained from the previous one by right-shifting in a circulant manner the previous one by k. For a sequence of matrices W1, ...,Wn \u2208 Rk\u00d7n we denote by V(W1, ...,Wn) \u2208 Rnk\u00d7n a matrix\nobtained by vertically stacking matrices: W1, ...,Wn.\nEach structured matrix Gstruct \u2208 Rn\u00d7n from the family of structured spinners is a product of three main structured components/blocks, i.e.:\nGstruct = M3M2M1, (1)\nwhere matrices M1,M2 and M3 satisfy conditions:\nCondition 1: Matrices: M1 and M2M1 are (\u03b4(n), p(n))-balanced isometries. Condition 2: M2 = V(W 1, ...,Wn)D\u03c11,...,\u03c1n for some (\u2206F ,\u22062)-smooth set: W 1, ...,Wn \u2208 Rk\u00d7n and some i.i.d sub-Gaussian random variables \u03c11, ..., \u03c1n with sub-Gaussian norm K. Condition 3: M3 = C(r, n) for r \u2208 Rk, where r is random Rademacher/Gaussian in the random setting and is learned in the adaptive setting.\nMatrix Gstruct is a structured spinner with parameters: \u03b4(n), p(n),K,\u039bF ,\u039b2. We explain the introduced conditions below.\nDefinition 1 ((\u03b4(n), p(n))-balanced matrices) A randomized matrix M \u2208 Rn\u00d7m is (\u03b4(n), p(n))balanced if for every x \u2208 Rm with \u2016x\u20162 = 1 we have: P[\u2016Mx\u2016\u221e > \u03b4(n)\u221an ] \u2264 p(n).\nRemark 1 One can take as M1 a matrix HD1 since, as we will show in the Supplement, matrix HD1 is (log(n), 2ne\u2212 log2(n) 8 )-balanced.\nDefinition 2 ((\u2206F ,\u22062)-smooth sets) A deterministic set of matrices W1, ...,Wn \u2208 Rk\u00d7n is (\u039bF ,\u039b2)smooth if:\n\u2022 \u2016Wi1\u20162 = .. = \u2016W i n\u20162 for i = 1, ..., n, where W i j\nstands for the jth column of Wi, \u2022 for i 6= j and l = 1, ..., n we have: (Wil)T \u00b7W j l = 0, \u2022 maxi,j \u2016(Wj)TWi\u2016F \u2264 \u039bF and maxi,j \u2016(Wj)TWi\u20162 \u2264 \u039b2.\nRemark 2 If the unstructured matrix G has rows taken from the general multivariate Gaussian distribution with diagonal covariance matrix \u03a3 6= I then one needs to rescale vectors r accordingly. For clarity, we assume here that \u03a3 = I and we present our theoretical results for that setting.\nAll structured matrices previously considered are special cases of a wider family of structured spinners (for clarity, we will explicitly show it for some important special cases). We have:\nLemma 1 The following matrices: GcircD2HD1,\u221a nHD3HD2HD1 and \u221a nHDg1,...,gnHD2HD1,\nwhere Gcirc is Gaussian circulant, are valid structured spinners for \u03b4(n) = log(n), p(n) = 2ne\u2212 log2(n)\n8 , K = 1, \u039bF = O( \u221a n) and \u039b2 = O(1). The same is true if one replaces Gcirc by a Gaussian Hankel or Toeplitz matrix.\n3.1 The role of three blocks M1, M2, and M3\nThe role of blocks M1, M2, M3 can be intuitively explained. Matrix M1 makes vectors \u201cbalanced\u201d, so that there is no dimension that carries too much of the L2-norm of the vector. The balanceness property was already applied in the structured setting [Ailon and Chazelle, 2006].\nThe role of M2 is more subtle and differs between adaptive and random settings. In the random setting, the cost of applying the structured mechanism is the loss of independence. For instance, the dot products of the rows of a circulant Gaussian matrix with a given vector x are no longer independent, as it is the case in the fully random setup. Those dot products can be expressed as a dot product of a fixed Gaussian row with different vectors v. Matrix M2 makes these vectors close to orthogonal. In the adaptive setup, the \u201cclose to orthogonality\u201d property is replaced by the independence property.\nFinally, matrix M3 defines the capacity of the entire structured transform by providing a vector of parameters (either random or to be learned). The near-independence of the aforementioned dot products in the random setting is now implied by the nearorthogonality property achieved by M2 and the fact that the projections of the Gaussian vector or the random Rademacher vector onto \u201calmost orthogonal directions\u201d are \u201cclose to independent\u201d. The role of the three matrices is described pictorially in Figure 1.\n3.2 Stacking together Structured Spinners\nWe described structured spinners as square matrices, but in practice we are not restricted to those, i.e. one can construct an m\u00d7 n structured spinner for m \u2264 n from the square n \u00d7 n structured spinner by taking its first m rows. We can then stack vertically these independently constructed m \u00d7 n matrices to obtain an k \u00d7 n matrix for both: k \u2264 n and k > n. We think about m as another parameter of the model that tunes the \u201cstructuredness\u201d level, i.e. larger values of m indicate more structured approach while smaller values lead to more random matrices (m = 1 case is the fully unstructured one)."}, {"heading": "4 Theoretical results", "text": "We now show that structured spinners can replace their unstructured counterparts in many machine learning\nalgorithms with minimal loss of accuracy.\nLet AG be a machine learning algorithm applied to a fixed dataset X \u2286 Rn and parametrized by a set G of matrices G \u2208 Rm\u00d7n, where each G is either learned or Gaussian with independent entries taken from N (0, 1). Assume furthermore, that AG consists of functions f1, ..., fs, where each fi applies a certain matrix Gi from G to vectors from some linear space Li of dimensionality at most d. Note that for a fixed dataset X function fi is a function of a random vector\nqfi = ((Gix 1)T , ..., (Gix di)T )T \u2208 Rdi\u00b7m,\nwhere dim(Li) = di \u2264 d and x1, ...,xdi stands for some fixed basis of Li.\nDenote by f \u2032i the structured counterpart of fi, where Gi is replaced by the structured spinner (for which vector r is either learned or random). We will show that f \u2032is \u201cresemble\u201d fis distribution-wise. Surprisingly, we will show it under very weak conditions regarding fis, In particular, they can be nondifferentiable, even non-continuous.\nNote that the above setting covers a wide range of machine learning algorithms. In particular:\nRemark 3 In the kernel approximation setting with random feature maps one can match each pair of vectors x,y \u2208 X to a different f = fx,y. Each f computes the approximate value of the kernel for vectors x and y.\nThus in that scenario s = (|X |\n2\n) and d = 2 (since one\ncan take: Lf(x,y) = span(x,y)).\nRemark 4 In the vector quantization algorithms using random projection trees one can take s = 1 (the algorithm A itself is a function f outputting the partitioning of space into cells) and d = dintrinsic, where dintrinsic is an intrinsic dimensionality of a given dataset X (random projection trees are often used if dintrinsic n)."}, {"heading": "4.1 Random setting", "text": "We need the following definition.\nDefinition 3 A set S is b-convex if it is a union of at most b pairwise disjoint convex sets.\nFix a funcion fi : Rdi\u00b7m \u2192 V , for some domain V . Our main result states that for any S \u2286 V such that f\u22121i (S) is measurable and b-convex for b not too large, the probability that fi(qfi) belongs to S is close to the probability that f \u2032i(qf \u2032i ) belongs to S.\nTheorem 1 (structured random setting) Let A be a randomized algorithm using unstructured Gaussian matrices G and let s, d and fis be as at the beginning of the section. Replace the unstructured matrix G by one of structured spinners defined in Section 3 with blocks of m rows each. Then for n large enough, = omd(1) and fixed fi with probability psucc at least:\n1\u22122p(n)d\u22122 ( md\n2\n) e \u2212\u2126(min( 2n2 K4\u039b2 F \u03b44(n) , n K2\u039b2\u03b4 2(n) )) (2)\nwith respect to the random choices of M1 and M2 the following holds for any S such that f\u22121i (S) is measurable and b-convex:\n|P[fi(qfi) \u2208 S]\u2212 P[f \u2032 i(qf \u2032i ) \u2208 S]| \u2264 b\u03b7,\nwhere the the probabilities in the last formula are with respect to the random choice of M3, \u03b7 = \u03b43(n)\nn 2 5\n, and\n\u03b4(n), p(n),K,\u039bF ,\u039b2 are as in the definition of structured spinners from Section 3.\nRemark 5 The theorem does not require any strong regularity conditions regarding fis (such as differentiability or even continuity). In practice, b is often a small constant. For instance, for the angular kernel approximation where fis are non-continuous and for S-singletons, we can take b = 1 (see Supplement).\nNow let us think of fi and f \u2032 i as random variables, where randomness is generated by vectors qfi and qf \u2032i respectively. Then, from Theorem 1, we get:\nTheorem 2 Denote by FX the cdf of the random variable X and by \u03c6X its characteristic function. If fi is convex or concave in respect to qfi , then for every t the following holds: |Ffi(t)\u2212 Ff \u2032i (t)| = O( \u03b43(n)\nn 2 5\n). Further-\nmore, if fi is bounded then: |\u03c6fi(t)\u2212\u03c6f \u2032i (t)| = O( \u03b43(n)\nn 2 5\n).\nTheorem 1 implies strong accuracy guarantees for the specific structured spinners. As a corollary we get:\nTheorem 3 Under assumptions from Theorem 1 the probability psucc from Theorem 1 reduces to: 1 \u2212 4ne\u2212 log2(n) 8 d \u2212 2 ( md 2 ) e \u2212\u2126( 2n log4(n) ) for the structured\nmatrices \u221a nHD3HD2HD1, \u221a nHDg1,...,gnHD2HD1 as well as for the structured matrices of the form GstructD2HD1, where Gstruct is Gaussian circulant, Gaussian Toeplitz or Gaussian Hankel matrix.\nAs a corollary of Theorem 3, we obtain the following result showing the effectiveness of the cross-polytope LSH with structured matrices HD3HD2HD1 that was only heuristically confirmed before [Andoni et al., 2015].\nTheorem 4 Let x,y \u2208 Rn be two unit L2-norm vectors. Let vx,y be the vector indexed by all (2m)\n2 ordered pairs of canonical directions (\u00b1ei,\u00b1ej), where the value of the entry indexed by (u,w) is the probability that: h(x) = u and h(y) = w, and h(v) stands for the hash of v. Then with probability at least: psuccess = 1 \u2212 8ne\u2212 log2(n) 8 \u2212 2 ( 2m 2 ) e \u2212\u2126( 2n log4(n) ) the version of the stochastic vector v1x,y for the unstructured Gaussian matrix G and its structured counterpart v2x,y for the matrix HD3HD2HD1 satisfy: \u2016v1x,y\u2212v2x,y\u2016\u221e \u2264 log3(n)n\u2212 2 5 + c , for n large enough, where c > 0 is a universal constant. The probability above is taken with respect to random choices of D1 and D2.\nFor angles in the range [0, \u03c03 ] the result above leads to the same asymptotics of the probabilities of collisions as these in Theorem 1 of [Andoni et al., 2015] given for the unstructured cross-polytope LSH.\nThe proof for the discrete structured setting applies Berry-Esseen-type results for random vectors (details are in the Supplement) showing that for n large enough \u00b11 random vectors r act similarly to Gaussian vectors."}, {"heading": "4.2 Adaptive setting", "text": "The following theorem explains that structured spinners can be used to replace unstructured fully connected neural network layers performing dimensionality reduction (such as hidden layers in certain autoencoders)\nprovided that input data has low intrinsic dimensionality. These theoretical findings were confirmed in experiments that will be presented in the next section. We will use notation from Theorem 1.\nTheorem 5 Consider a matrix M \u2208 Rm\u00d7n encoding the weights of connections between a layer l0 of size n and a layer l1 of size m in some learned unstructured neural network model. Assume that the input to layer l0 is taken from the d-dimensional space L (although potentially embedded in a much higher dimensional space). Then with probability at least\n1\u22122p(n)d\u22122 ( md\n2\n) e \u2212\u2126(min( t2n2 K4\u039b2 F \u03b44(n) , tn K2\u039b2\u03b4 2(n) )) (3)\nfor t = 1md and with respect to random choices of M1 and M2, there exists a vector r defining M3 (see: definition of the structured spinner) such that the structured spinner Mstruct = M3M2M1 equals to M on L."}, {"heading": "5 Experiments", "text": "In this section we consider a wide range of different applications of structured spinners: localitysensitive hashing, kernel approximations, and finally neural networks. Experiments with Newton sketches are deferred to the Supplement. Experiments were conducted using Python. In particular, NumPy is linked against a highly optimized BLAS library (Intel MKL). Fast Fourier Transform is performed using numpy.fft and Fast Hadamard Transform is using ffht from [Andoni et al., 2015]. To have a fair comparison, we have set up: OMP NUM THREADS = 1 so that every experiment is done on a single thread. Every parameter of the structured spinner matrix is computed in advance, such that obtained speedups take only matrix-vector products into account. All figures should be read in color."}, {"heading": "5.1 Locality-Sensitive Hashing (LSH)", "text": "In the first experiment, we consider cross-polytope LSH. In Figure 2, we compare collision probabilities for the low dimensional case (n = 256), where for each interval, collision probability has been computed for 20000 points. Results are shown for one hash function (averaged over 100 runs). We report results for a random 256 \u00d7 64 Gaussian matrix G and five other types of matrices from a family of structured spinners (descending order of number of parameters): GcircK2K1, GToeplitzD2HD1, Gskew\u2212circD2HD1, HDg1,...,gnHD2HD1, and HD3HD2HD1, where Ki, GToeplitz, and Gskew\u2212circ are respectively a Kronecker matrix with discrete entries, Gaussian Toeplitz and Gaussian skew-circulant matrices.\nAll matrices from the family of structured spinners show high collision probabilities for small distances and\nCollision probabilities with cross\u2212polytope LSH\nlow ones for large distances. As theoretically predicted, structured spinners do not lead to accuracy losses. All considered matrices give almost identical results."}, {"heading": "5.2 Kernel approximation", "text": "In the second experiment, we approximate the Gaussian and angular kernels using Random Fourier features. The Gaussian random matrix (with i.i.d. Gaussian entries) can be used to sample random Fourier features with a specified \u03c3. This Gaussian random matrix is replaced with specific matrices from a family of structured spinners for Gaussian and angular kernels. The obtained feature maps are compared. To test the quality of the structured kernels\u2019 approximations, we compute Gram-matrix reconstruction error as in [Choromanski and Sindhwani, 2016] : ||K\u2212K\u0303||F||K||F , where K, K\u0303 are respectively the exact and approximate Gram-matrices, as a function of the number of random features. When number of random features k is greater than data dimensionality n, we apply block-mechanism described in 3.2.\nFor the Gaussian kernel, Kij = e \u2212||xi\u2212xj || 2 2 2\u03c32 and for the\nangular kernel, Kij = 1\u2212 \u03b8\u03c0 with \u03b8 = cos \u22121( xTi xj ||xi||2||xj ||2 ). For the approximation, K\u0303i,j = 1\u221a d\u2032 s(Axi) T 1\u221a d\u2032 s(Axj) where s(x) = e \u2212ix \u03c3 and K\u0303i,j = 1 \u2212 dH(s(Axi),s(Axj))d\u2032 where s(x) = sign(x) respectively. In both cases, function s is applied pointwise. dH stands for the Hamming distance and xi, xj are points from the dataset.\nWe used two datasets: G50C (550 points, n = 50) and USPST (test set, 2007 points, n = 256). The results for the USPST dataset are given in the Supplement. For Gaussian kernel, bandwidth \u03c3 is set to 17.4734 for G50C and to 9.4338 for USPST. The choice of \u03c3 comes from [Choromanski and Sindhwani, 2016] in order to have comparable results. The results are averaged over 10 runs and the following matrices have been tested: Gaussian random matrix G, GcircK2K1, GToeplitzD2HD1, Gskew\u2212circD2HD1, HDg1,...,gnHD2HD1 and HD3HD2HD1.\nFigure 5 shows results for the G50C dataset. In case of G50C dataset, for both kernels, all matrices from the family of structured spinners perform similarly to a random Gaussian matrix. HD3HD2HD1 performs better than all other matrices for a wide range of sizes of random feature maps. In case of USPST dataset (see: Supplement), for both kernels, all matrices from the family of structured spinners again perform similarly to a random Gaussian matrix (except GcircK2K1 which gives relatively poor results) and HD3HD2HD1 is giving the best results. Finally, the efficiency of structured spinners does not depend on the dataset.\nTable 1 shows substantial speedups obtained by the structured spinner matrices. The speedups are computed as time(G)/time(T), where time(G) and time(T) are the runtimes for respectively a random Gaussian matrix and a structured spinner matrix."}, {"heading": "5.3 Neural networks", "text": "Finally, we performed experiments with neural networks using two different network architectures. The first one is a fully-connected network with two fully connected layers (we call it MLP), where we refer to the size of the hidden layer as h, and the second one is a convolutional network with following architecture:\n\u2022 Convolution layer with filter size 5\u00d7 5, 4 feature maps + ReLU + Max Pooling (region 2\u00d7 2 and step 2\u00d7 2) \u2022 Convolution layer with filter size 5\u00d7 5, 6 feature\nmaps + ReLU + Max Pooling (region 2\u00d7 2 and step 2\u00d7 2) \u2022 Fully-connected layer (h outputs) + ReLU \u2022 Fully-connected layer (10 outputs) \u2022 LogSoftMax.\nExperiments were performed on the MNIST data set. In both experiments, we re-parametrized each matrix of weights of fully connected layers with a structured\nGram matrix reconstruction error G50C dataset for the Gaussian kernel\nGram matrix reconstruction error G50C dataset for the angular kernel\nMLP neural network error\nConvolutional neural network error\nHD3HD2HD1 matrix from a family of structured spinners. We compare this setting with the case where the unstructured parameter matrix is used. Note that in case when we use HD3HD2HD1 only linear number of parameters is learned (the Hadamard matrix is deterministic and even does not need to be explicitly stored, instead Walsh-Hadamard transform is used). Thus the network has significantly less parameters than in the unstructured case, e.g. for the MLP network we have O(h) instead of O(input size\u00d7 h) parameters.\nIn Figure 4 and Table 2 we compare respectively the test error and running time of the unstructured and structured approaches. Figure 4 shows that for large enough h, neural networks with structured spinners achieve similar performance to those with unstructured projections, while at the same time using structured spinners lead to significant computational savings as shown in Table 2. As mentioned before, the HD3HD2HD1neural network is a simpler construction than the Deep Friend Convnet, however one can replace it with any structured spinner to obtain compressed neural network architecture of a good capacity."}, {"heading": "5.4.1 Proof of Remark 1", "text": "This result first appeared in [Ailon and Chazelle, 2006]. The following proof was given in [Choromanski and Sindhwani, 2016], we repeat it here for completeness. We will use the following standard concentration result.\nLemma 2 (Azuma\u2019s Inequality) Let X1, ..., Xn be a martingale and assume that \u2212\u03b1i \u2264 Xi \u2264 \u03b2i for some positive constants \u03b11, ..., \u03b1n, \u03b21, ..., \u03b2n. Denote X =\u2211n i=1Xi. Then the following is true:\nP[|X \u2212 E[X]| > a] \u2264 2e \u2212 a2 2 \u2211n i=1 (\u03b1i+\u03b2i) 2\n(4)\nProof: Denote by x\u0303j an image of xj under transformation HD. Note that the ith dimension of x\u0303j is given by the formula: x\u0303ji = hi,1x j 1 + ...+ hi,nx\nj,n, where hl,u stands for the lth element of the uth column of the randomized Hadamard matrix HD. First, we use Azuma\u2019s Inequality to find an upper bound on the probability that |x\u0303ji | > a, where a = log(n)\u221a n . By Azuma\u2019s Inequality, we have:\nP[|hi,1xj1 + ...+ hi,nxj,n| \u2265 a] \u2264 2e\u2212 log2(n) 8 . (5)\nWe use: \u03b1i = \u03b2i = 1\u221a n . Now we take the union bound over all n dimensions and the proof is completed.\n5.4.2 Structured Spinners-equivalent definition\nWe will introduce here an equivalent definition of the model of structured spinners that is more technical (thus we did not give it in the main body of the paper), yet more convenient to work with in the proofs.\nNote that from the definition of structured spinners we can conclude that each structured matrix Gstruct \u2208 Rn\u00d7n from the family of structured spinners is a product of three main structured blocks, i.e.:\nGstruct = B3B2B1, (6)\nwhere matrices B1,B2,B3 satisfy two conditions that we give below.\nCondition 1: Matrices: B1 and B2B1 are (\u03b4(n), p(n))-balanced isometries. Condition 2: Pair of matrices (B2,B3) is (K,\u039bF ,\u039b2)-random.\nBelow we give the definition of (K,\u039bF ,\u039b2)randomness.\nDefinition 4 ((K,\u039bF ,\u039b2)-randomness) A pair of matrices (Y,Z) \u2208 Rn\u00d7n\u00d7Rn\u00d7n is (K,\u039bF ,\u039b2)-random if there exists r \u2208 Rk, and a set of linear isometries \u03c6 = {\u03c61, ..., \u03c6n}, where \u03c6i : Rn \u2192 Rk, such that:\n\u2022 r is either a \u00b11-vector with i.i.d. entries or Gaussian with identity covariance matrix,\n\u2022 for every x \u2208 Rn the jth element (Zx)j of Zx is of the form: rT \u00b7 \u03c6j(x),\n\u2022 there exists a set of i.i.d. sub-Gaussian random variables {\u03c11, ..., \u03c1n} with sub-Gaussian norm at most K, mean 0, the same second moments and a (\u039bF ,\u039b2)-smooth set of matrices {Wi}i=1,...,n such that for every x = (x1, ..., xn) T , we have:\n\u03c6i(Yx) = W i(\u03c11x1, ..., \u03c1nxn) T ."}, {"heading": "5.4.3 Proof of Lemma 1", "text": "Proof: Let us first assume the GcircD2HD1-setting (analysis for Toeplitz Gaussian or Hankel Gaussian is completely analogous). In that setting, it is easy to see that one can take r to be a Gaussian vector (this vector corresponds to the first row of Gcirc). Furthermore linear mappings \u03c6i are defined as: \u03c6i((x0, x1, ..., xn\u22121) T ) = (xn\u2212i, xn\u2212i+1, ..., xi\u22121) T , where operations on indices are modulo n. The value of \u03b4(n) and p(n) come from the fact that matrix HD1 is used as a (\u03b4(n), p(n))-balanced matrix and from Remark 1. In that setting, sequence (\u03c11, ..., \u03c1n) is discrete and corresponds to the diagonal of D2. Thus we have: K = 1. To calculate \u039bF and \u039b2, note first that matrix W1 is defined as I and subsequent Wis are given as circulant shifts of the previous ones (i.e. each row is a circulant shift of the previous row). That observation comes directly from the circulant structure of Gcirc. Thus we have: \u039bF = O( \u221a n) and \u039b2 = O(1). The former is true since each Ai,j has O(n) nonzero entries and these are all 1s. The latter is true since each\nnontrivial Ai,j in that setting is an isometry (this is straightforward from the definition of {Wi}i=1,...,n). Finally, all other conditions regarding Wi-matrices are clearly satisfied (each column of each Wi has unit L2 norm and corresponding columns from different Wi and Wj are clearly orthogonal).\nNow let us consider the setting, where the structured matrix is of the form: \u221a nHD3HD2HD1. In that case, r corresponds to a discrete vector (namely, the diagonal of D3). Linear mappings \u03c6i are defined as: \u03c6i((x1, ..., xn) T ) = ( \u221a nhi,1x1, ..., \u221a nhi,nxn)\nT , where (hi,1, ..., hi,n) T is the ith row of H. One can also notice that the set {Wi}i=1,...,n is defined as: wia,b =\u221a nhi,aha,b. Let us first compute the Frobenius norm of the matrix Ai,j , defined based on the aforementioned sequence {Wi}i=1,...,n. We have:\n\u2016Ai,j\u20162F = \u2211\nl,t\u2208{1,...,n}\n( n\u2211 k=1 wjk,lw i k,t) 2\n= n2 \u2211\nl,t\u2208{1,...,n}\n( n\u2211 k=1 hj,khk,lhi,khk,t) 2 (7)\nTo compute the expression above, note first that for r1 6= r2 we have:\n\u03b8 = \u2211 k,l hr1,khr1,lhr2,khr2,l\n= \u2211 k hr1,khr2,k \u2211 l hr1,lhr2,l = 0, (8)\nwhere the last equality comes from fact that different rows of H are orthogonal. From the fact that \u03b8 = 0 we get:\n\u2016Ai,j\u20162F = n2 \u2211\nr=1,...,n \u2211 k,l h2i,rh 2 j,rh 2 r,kh 2 r,l\n= n \u00b7 n2( 1\u221a n )8 \u00b7 n2 = n. (9)\nThus we have: \u039bF \u2264 \u221a n.\nNow we compute \u2016Ai,j\u20162. Notice that from the definition of Ai,j we get that\nAi,j = Ei,jFi,j , (10)\nwhere the lth row of Ei,j is of the form (hj,1h1,l, ..., hj,nhn,l) and the t\nth column of Fi,j is of the form (hi,1h1,t, ..., hi,nhn,t) T . Thus one can easily verify that Ei,j and Hi,j are isometries (since H is) thus Ai,j is also an isometry and therefore \u039b2 = 1. As in the previous setting, remaining conditions regarding matrices Wi are trivially satisfied (from the basic properties of Hadamard matrices). That completes the proof."}, {"heading": "5.4.4 Proof of Theorem 1", "text": "Let us briefly give an overview of the proof before presenting it in detail. Challenges regarding proving accuracy results for structured matrices come from the fact that, for any given x \u2208 Rn, different dimensions of y = Gstructx are no longer independent (as it is the case for the unstructured setting). For matrices from the family of structured spinners we can, however, show that with high probability different elements of y correspond to projections of a given vector r (see Section 3) into directions that are close to orthogonal. The \u201cclose-to-orthogonality\u201d characteristic is obtained with the use of the Hanson-Wright inequality that focuses on concentration results regarding quadratic forms involving vectors of sub-Gaussian random variables. If r is Gaussian, then from the well-known fact that projections of the Gaussian vector into orthogonal directions are independent, we can conclude that dimensions of y are \u201cclose to independent\u201d. If r is a discrete vector then we need to show that for n large enough, it \u201cresembles\u201d the Gaussian vector. This is where we need to apply the aforementioned techniques regarding multivariate Berry-Esseen-type central limit theorem results.\nProof: We will use notation from Section 3 and previous sections of the Supplement. We assume that the model with structured matrices stacked vertically, each of m rows, is applied. Without loss of generality, we can assume that we have just one block since different blocks are chosen independently. Let Gstruct be a matrix from the family of structured spinners. Let us assume that Gstruct is used by a function f operating in the d-dimensional space and let us denote by x1, . . . ,xd some fixed orthonormal basis of that space. Our first goal is to compute: y1 = Gstructx 1, ...,yd = Gstructx d. Denote by x\u0303i the linearly transformed version of x after applying block B1, i.e. x\u0303 i = B1x i. Since B1 is (\u03b4(n), p(n))-balanced), we conclude that with probability at least: pbalanced \u2265 1\u2212 dp(n) each element of each x\u0303i has absolute value at most \u03b4(n)\u221a\nn . We shortly say that\neach x\u0303i is \u03b4(n)-balanced. We call this event Ebalanced.\nNote that by the definition of structured spinners, each yi is of the form:\nyi = (rT \u00b7 \u03c61(B2x\u0303i), ..., rT \u00b7 \u03c6m(B2x\u0303i))T . (11)\nFor clarity and to reduce notation, we will assume that r is n-dimensional. To obtain results for vectors r of different dimensionality D, it suffices to replace in our analysis and theoretical statements n by D. Let us denote A = {\u03c61(B2x\u03031), ..., \u03c6m(B2x\u03031), ..., \u03c61(B2x\u0303d), ..., \u03c6m(B2x\u0303d))}. Our goal is to show that with high probability (in respect to random choices of B1 and B2) for all vi,vj \u2208 A, i 6= j the following is true:\n|(vi)T \u00b7 vj | \u2264 t (12)\nfor some given 0 < t 1.\nFix some t > 0. We would like to compute the lower bound on the corresponding probability. Let us fix two vectors v1,v2 \u2208 A and denote them as: v1 = \u03c6i(B2x), v 2 = \u03c6j(B2y) for some x = (x1, ..., xn) T and y = (y1, ..., yn) T . Note that we have (see denotation from Section 3):\n\u03c6i(B2x) = (w i 11\u03c11x1 + ...\n+ wi1,n\u03c1nxn, ..., w i n,1\u03c11x1 + ...+ w i n,n\u03c1nxn) T (13)\nand\n\u03c6j(B2y) = (w j 11\u03c11y1 + ...+ w j 1,n\u03c1nyn, ...,\nwjn,1\u03c11y1 + ...+ w j n,n\u03c1nyn) T . (14)\nWe obtain: (v1)T \u00b7v2 = \u2211\nl\u2208{1,...,n},u\u2208{1,...,n}\n\u03c1l\u03c1u( n\u2211 k=1 xlyuw i k,uw j k,l).\n(15)\nWe now show that, under assumptions from Theorem 1, the expected value of the expression above is 0. We have:\nE[(v1)T \u00b7 v2] = E[ \u2211\nl\u2208{1,...,n}\n\u03c12l xlyl( n\u2211 k=1 wik,lw j k,l)], (16)\nsince \u03c11, ..., \u03c1n are independent and have expectations equal to 0. Now notice that if i 6= j then from the assumption that corresponding columns of matrices Wi and Wj are orthogonal, we get that the above expectation is 0. Now assume that i = j. But then x and y have to be different and thus they are orthogonal (since they are taken from the orthonormal system transformed by an isometry). In that setting we get:\nE[(v1)T \u00b7 v2] = E[ \u2211\nl\u2208{1,...,n}\n\u03c12l xlyl( n\u2211 k=1 (wik,l) 2)]\n= \u03c4w n\u2211 l=1 xlyl = 0, (17)\nwhere \u03c4 stands for the second moment of each \u03c1i, w is the squared L2-norm of each column of W\ni (\u03c4 and w are well defined due to the properties of structured spinners). The last inequality comes from the fact that x and y are orthogonal. Now if we define matrices Ai,j as in the definition of the model of structured spinners then we see that\n(v1)T \u00b7 v2 = \u2211\nl,u\u2208{1,...,n}\n\u03c1l\u03c1uT i,j l,u , (18)\nwhere: T i,jl,u = xlyuA i,j l,u.\nNow we will use the following inequality:\nTheorem 6 (Hanson-Wright Inequality) Let X = (X1, ..., Xn)\nT \u2208 Rn be a random vector with independent components Xi which satisfy: E[Xi] = 0 and have sub-Gaussian norm at most K for some given K > 0. Let A be an n \u00d7 n matrix. Then for every t \u2265 0 the following is true:\nP[XTAX\u2212 E[XTAX] > t]\n\u2264 2e \u2212cmin( t2 K4\u2016A\u20162 F , t K2\u2016A\u20162 ) , (19)\nwhere c is some universal positive constant.\nNote that, assuming \u03b4(n)-balancedness, we have: \u2016Ti,j\u2016F \u2264 \u03b4 2(n) n \u2016A i,j\u2016F and \u2016Ti,j\u20162 \u2264 \u03b4 2(n) n \u2016A i,j\u20162.\nNow we take X = (\u03c11, ..., \u03c1n) T and A = Ti,j in the theorem above. Applying the Hanson-Wright inequality in that setting, taking the union bound over all pairs of different vectors vi,vj \u2208 A (this number is exactly:( md 2 ) ) and the event Ebalanced, finally taking the union bound over all s functions fi, we conclude that with probability at least:\npgood = 1\u2212 p(n)ds \u2212 2 ( md\n2\n) se \u2212\u2126(min( t2n2 K4\u039b2 F \u03b44(n) , tn K2\u039b2\u03b4 2(n) )) (20)\nfor every f any two different vectors vi,vj \u2208 A satisfy: |(vi)T \u00b7 vj | \u2264 t.\nNote that from the fact that B2B1 is (\u03b4(n), p(n))balanced and from Equation 20, we get that with probability at least:\npright = 1\u2212 2p(n)ds \u2212 2 ( md\n2\n) se \u2212\u2126(min( t2n2 K4\u039b2 F \u03b44(n) , tn K2\u039b2\u03b4 2(n) )) . (21)\nfor every f any two different vectors vi,vj \u2208 A satisfy: |(vi)T \u00b7 vj | \u2264 t and furthermore each vi is \u03b4(n)balanced.\nAssume now that this event happens. Consider the vector\nq\u2032 = ((y1)T , ..., (yd)T )T \u2208 Rmd. (22)\nNote that q\u2032 can be equivalently represented as:\nq\u2032 = (rT \u00b7 v1, ..., rT \u00b7 vmd), (23)\nwhere: A = {v1, ...,vmd}. From the fact that \u03c6iB2 and B1 are isometries we conclude that: \u2016vi\u20162 = 1 for i = 1, ....\nNow we will need the following Berry-Esseen type result for random vectors:\nTheorem 7 (Bentkus [Bentkus, 2003]) Let X1, ...,Xn be independent vectors taken from Rk with common mean E[Xi] = 0. Let S = X1 + ... + Xn. Assume that the covariance operator C2 = cov(S) is invertible. Denote \u03b2i = E[\u2016C\u22121Xi\u201632] and \u03b2 = \u03b21 + ...+ \u03b2n. Let C be the set of all convex subsets of Rk. Denote \u2206(C) = supA\u2208C |P[S \u2208 A]\u2212 P[Z \u2208 A]|, where Z is the multivariate Gaussian distribution with mean 0 and covariance operator C2. Then:\n\u2206(C) \u2264 ck 14 \u03b2 (24)\nfor some universal constant c.\nDenote: Xi = (riv 1 i , ..., riv k i ) T for k = md, r = (r1, ..., rn) T and vj = (vj1, ..., v j n). Note that q\n\u2032 = X1 + ...+ Xn. Clearly we have: E[Xi] = 0 (the expectation is taken with respect to the random choice of r). Furthermore, given the choices of v1, ...,vk, random vectors X1, ..,Xn are independent.\nLet us calculate now the covariance matrix of q\u2032. We have:\nq\u2032i = r1v i 1 + ...+ rnv i n, (25)\nwhere: q\u2032 = (q\u20321, ...,q \u2032 k).\nThus for i1, i2 we have:\nE[q\u2032i1q \u2032 i2 ] = n\u2211 j=1 vi1j v i2 j E[r 2 j ] + 2 \u2211 1\u2264j1<j2\u2264n vi1j1v i2 j2 E[rj1rj2 ]\n= (vi1)T \u00b7 vi2 , (26)\nwhere the last equation comes from the fact rj are either Gaussian from N (0, 1) or discrete with entries from {\u22121,+1} and furthermore different rjs are independent.\nTherefore if i1 = i2 = i, since each v i has unit L2-norm, we have that E[q\u2032iq\u2032i] = 1, (27) and for i1 6= i2 we get:\n|E[q\u2032i1q \u2032 i2 ]| \u2264 t. (28)\nWe conclude that the covariance matrix \u03a3q\u2032 of the distribution q\u2032 is a matrix with entries 1 on the diagonal and other entries of absolute value at most t.\nFor t = ok(1) small enough and from the \u03b4(n)balancedness of vectors v1, ...,vk we can conclude that:\nE[\u2016C\u22121Xi\u201632] = O(E[\u2016Xi\u201632]) = O( \u221a ( k\nn )3\u03b43(n)),\n(29)\nNow, using Theorem 7, we conclude that\nsup A\u2208C |P[q\u2032 \u2208 A]\u2212 P[Z \u2208 A]| = O(k 14n \u00b7 k\n3 2\nn 3 2\n\u03b43(n))\n= O( \u03b43(n)\u221a n k 7 4 ), (30)\nwhere Z is taken from the multivariate Gaussian distribution with covariance matrix I + E and C is the set of all convex sets. Now if we apply the above inequality to the pairwise disjoint convex sets A1, ..., Aj , where A1 \u222a ...\u222aAj = f\u22121i (S) and l \u2264 b (such sets exist form the b-convexity of f\u22121i (S)), take \u03b7 = \u03b43(n)\u221a n k 7 4 ,\n= t = omd(1) and take n large enough, the statement of the theorem follows."}, {"heading": "5.4.5 Proof of Theorem 2", "text": "Proof: Let us assume that fi is a convex function of qfi (if fi is concave then the proof completely analogous). For any t \u2208 R let St = {qfi : fi(qfi) \u2264 t} for fi and St = {qf \u2032i : f \u2032 i(qf \u2032i ) \u2264 t} for f \u2032 i . From the convexity assumption we get that St is a convex set. Thus we can directly apply Theorem 1 and the result regarding cdf functions follows. To obtain the result regarding the characteristic functions, notice first that we have:\n\u03c6X(t) = \u222b 1 \u22121 P[cos(tX) > s]ds+i \u222b 1 \u22121 P[sin(tX) > s]ds (31) The event {cos(tX) > s} for t 6= 0 is equivalent to: X \u2208 \u222aI\u2208II for some family of intervals I. Similar observation is true for the event {sin(tX) > s}.\nIn our scenario, from the fact that fi is bounded, we conclude that the corresponding families I are finite. Furthermore, the probability of belonging to a particular interval can be expressed by the values of the cdf function in the endpoints of that interval. From this observation and the result on cdfs that we have just obtained, the result for the characteristic functions follows immediately."}, {"heading": "5.4.6 Proof of Theorem 3", "text": "Proof: This comes directly from Theorem 1 and Lemma 1."}, {"heading": "5.4.7 Proof of Theorem 4", "text": "Proof: For clarity we will assume that the structured matrix consists of just one block of m rows and will compare its performance with the unstructured variant of m rows (the more general case when the structured matrix is obtained by stacking vertically many blocks is analogous since the blocks are chosen independently).\nConsider the two-dimensional linear space H spanned by x and y. Fix some orthonormal basis B = {u1,u2} of H. Take vectors q and q\u2032. Note that they are 2mdimensional, where m is the number of rows of the block used in the structured setting. From Theorem 3 we conclude that will probability at least psuccess, where psuccess is as in the statement of the theorem the following holds for any convex 2m-dimensional set\nA: |P[q( ) \u2208 A]\u2212 P[q\u2032 \u2208 A]| \u2264 \u03b7, (32)\nwhere \u03b7 = log 3(n)\nn 2 5\n. Take two corresponding entries of\nvectors v1x,y and v 2 x,y indexed by a pair (ei, ej) for some fixed i, j \u2208 {1, ...,m} (for the case when the pair is not of the form (e, ej), but of a general form: (\u00b1ei,\u00b1ej) the analysis is exactly the same). Call them p1 and p2 respectively. Our goal is to compute |p1 \u2212 p2|. Notice that p1 is the probability that h(x) = ei and h(y) = ej for the unstructured setting and p2 is that probability for the structured variant.\nLet us consider now the event E1 = {h(x) = ei\u2227h(y) = ej}, where the setting is unstructured. Denote the corresponding event for the structured setting as E2. Denote q = (q1, ..., q2m). Assume that x = \u03b11u 1+\u03b12u 2 for some scalars \u03b11, \u03b12 > 0. Denote the unstructured Gaussian matrix by G. We have:\nGx = \u03b11Gu 1 + \u03b12Gu 2 (33)\nNote that we have: Gu1 = (q1, ..., qm) T and Gu2 = (qm+1, ..., q2m) T . Denote by A(ei) the set of all the points in Rm such that their angular distance to ei is at most the angular distance to all other m\u22121 canonical vectors. Note that this is definitely the convex set. Now denote:\nQ(ei) = {(q1, ..., q2m)T \u2208 R2m : \u03b11(q1, ..., qm) T + \u03b12(qm+1, ..., q2m) T \u2208 A(ei)}. (34)\nNote that since A(ei) is convex, we can conclude that Q(ei) is also convex. Note that\n{h(x) = ei} = {q \u2208 Q(ei)}. (35)\nBy repeating the analysis for the event {h(y) = ej}, we conclude that:\n{h(x) = ei \u2227 h(y) = ej} = {q \u2208 Y (ei, ej)} (36)\nfor convex set Y (ei, ej) = Q(ei) \u2229Q(ej). Now observe that\n|p1 \u2212 p2| = |P[q \u2208 Y (ei, ej)]\u2212 P[q\u2032 \u2208 Y (ei, ej)]| (37)\nThus we have:\n|p1 \u2212 p2| \u2264 |P[q \u2208 Y (ei, ej)]\u2212 P[q( ) \u2208 Y (ei, ej)]| + |P[q( ) \u2208 Y (ei, ej)]\u2212 P[q\u2032 \u2208 Y (ei, ej)]| (38)\nTherefore we have:\n|p1 \u2212 p2| \u2264 |P[q \u2208 Y (ei, ej)]\u2212 P[q( ) \u2208 Y (ei, ej)]|+ \u03b7. (39) Thus we just need to upper-bound:\n\u03be = |P[q \u2208 Y (ei, ej)]\u2212 P[q( ) \u2208 Y (ei, ej)]|. (40)\nDenote the covariance matrix of the distribution q( ) as I + E. Note that E is equal to 0 on the diagonal and the absolute value of all other off-diagonal entries is at most .\nDenote k = 2m. We have\n\u03be = |A\u2212B| ,\nwhere A = 1\n(2\u03c0) k 2 \u221a det(I + E) \u222b Y (ei,ej) e\u2212 xT (I+E)\u22121x 2 dx\nand B = 1\n(2\u03c0) k 2 \u222b Y (ei,ej) e\u2212 xT x 2 dx.\nExpanding: (I + E)\u22121 = I \u2212 E + E2 \u2212 ..., noticing that |det(I + E)\u2212 1| = O( 2m), and using the above formula, we easily get:\n\u03be = O( ). (41)\nThat completes the proof.\n5.4.8 b-convexity for angular kernel approximation\nLet us now consider the setting, where linear projections are used to approximate angular kernels between paris of vectors via random feature maps. In this case, the linear projection is followed by the pointwise nonlinear mapping, where the applied nonlinear mapping is a sign function. The angular kernel is retrieved from the Hamming distance between {\u22121,+1}-hashes obtained in such a way. Note that in this case we can assign to each pair x,y of vectors from a database a function fx,y that outputs the binary vector which length is the size of the hash and with these indices turned on for which the hashes of x and y disagree. Such a binary vector uniquely determines the Hadamard distance between the hashes. Notice that for a fixed-length hash fx,y produces only finitely many outputs. If S is a set-singleton consisting of one of the possible outputs, then one can notice (straightforwardly from the way the hash is created) that f\u22121x,y(S) is an intersection of the convex sets (as a function of qfx,y). Thus it is convex and thus for sets S which are singletons we can take b = 1."}, {"heading": "5.4.9 Proof of Theorem 5", "text": "In this section, we show that by learning vector r \u2208 Rk from the definition above, one can approximate well any matrix M \u2208 Rm\u00d7n learned by the neural network, providing that the size k or r is large enough in comparison with the number of projections and the intrinsic dimensionality d of the data X .\nTake the parametrized structured spinner matrix Mstruct \u2208 Rm\u00d7n with a learnable vector r. Let M \u2208 Rm\u00d7n be a matrix learned in the unstructured setting.\nLet B = {x1, ...,xd} be some orthonormal basis of the linear space, where data X is taken from.\nProof: Note that from the definition of the parametrized structured spinner model we can conclude that with probability at least p1 = 1\u2212 p(n) with respect to the choices of M1 and M2 each Mstructx i is of the form:\nMstructx i = (rT \u00b7 z1(qi), ..., rT \u00b7 zm(qi))T , (42)\nwhere each zj(q i) is of the form:\nzj(q i) = (wj1,1\u03c11q i 1+w j 1,n\u03c1nq i n, ..., w j k,1\u03c11q i 1+w j k,n\u03c1nq i n) T\n(43)\nand B\u2032 = {q1, ...,qd} is an orthonormal basis such that: \u2016qi\u2016\u221e \u2264 \u03b4(n)\u221an for i = 1, ..., n.\nNote that the system of equations:\nMstructxi = Mxi (44)\nfor i = 1, ..., d has the solution in r if the vectors from the set A = {zj(qi) : j = 1, ...,m, i = 1, ...d} are independent.\nConstruct a matrix G \u2208 Rmd\u00d7k, where rows are vectors from A. We want to show that rank(G) = md. It suffices to show that det(GGT ) 6= 0. Denote B = GGT . Note that Bi,j = (v\ni)Tvj , where A = {v1, ...,vmd}. Take two vectors va,vb \u2208 A. Note that from the definition of A we get:\n(va)Tvb = \u2211\nl\u2208{1,...,n},u\u2208{1,...,n}\n\u03c1l\u03c1uxlyu( k\u2211 s=1 wis,lw j s,u)\n(45) for some i, j and some vectors x = (x1, ..., xn)\nT , y = (y1, ..., yn) T . Furthermore,\n\u2022 i = j and x = y if a = b,\n\u2022 \u2016x\u20162 = \u2016y\u20162 = 1,\n\u2022 xTy = 0 or x = y and i 6= j for a 6= b.\nWe also have:\nE[(va)Tvb] = E[ \u2211\nl\u2208{1,...,n}\n\u03c12l xlyl( k\u2211 s=1 wis,lw j s,u)]. (46)\nFrom the previous observations and the properties of matrices W1, ...,Wn we conclude that the entries of the diagonal of B are equal to 1. Furthermore, all other entries are 0 on expectation. Using Hanson-Wright\ninequality, we conclude that for any t > 0 we have: |Bi,j | \u2264 t for all i 6= j with probability at least: psucc = 1\u22122p(n)d\u22122 ( md\n2\n) e \u2212cmin( t2n2 K4\u039b2 F \u03b44(n) , tn K2\u039b2\u03b4 2(n) ) .\nIf this is the case, we let B\u0303 \u2208 R(md)\u00d7(md) be a matrix with diagonal entries B\u0303i,i = 0 and off-diagonal entries B\u0303i,j = \u2212Bi,j . Furthermore, let B\u2217 \u2208 R(md)\u00d7(md) be a matrix with diagonal entries B\u2217i,i = 0 and off-diagonal entries B\u2217i,j = t.\nFollowing a similar argument as in [Brent et al., 2014], note that B\u2217 = t(J \u2212 I) where J is the matrix of all ones (thus of rank 1) and I is the identity matrix. Then the eigenvalues of B\u2217 are t(md\u2212 1) with multiplicity 1 and t(0\u2212 1) with multiplicity (md\u2212 1). We, thereby, are able to explicitly compute det(I\u2212B\u2217)=(1\u2212 t(md\u2212 1))(1 + t)md\u22121.\nIf \u03c1(B\u2217) \u2264 1, we can apply Theorem 1 of [Brent et al., 2014] by replacing F with B\u2217 and E with\nB\u0303. For the convenience of the reader, we state their theorem here: Let F \u2208 Rn\u00d7n with non-negative entries and \u03c1(F ) \u2264 1. Let E \u2208 Rn\u00d7n with entries | ei,j |\u2264 fi,j , then det(I\u2212E) \u2265 det(I\u2212 F).\nThat is: if \u03c1(B\u2217) \u2264 1, then\ndet(I\u2212B\u2217) = (1\u2212 t(md\u2212 1))(1 + t)md\u22121\n\u2264 det(I\u2212 B\u0303) = det(B). (47)\nThe final step is to observe that: \u03c1(B\u2217) \u2264 1 \u21d0\u21d2 max{| t(md \u2212 1) |, | \u2212t |} = t(md \u2212 1) \u2264 1 \u21d0\u21d2 t \u2264 1md\u22121 . Using this result, we, hence, see that det(B) \u2265 (1\u2212 t(md\u2212 1))(1 + t)md\u22121 \u2265 0, in particular det(B) > 0 for t = 1md . That completes the proof."}, {"heading": "5.4.10 Additional experiments", "text": "This experiment focuses on the Newton sketch approach [Pilanci and Wainwright, 2015], a generic optimization framework. It guarantees super-linear convergence with exponentially high probability for selfconcordant functions, and a reduced computational complexity compared to the original second-order Newton method. The method relies on using a sketched version of the Hessian matrix, in place of the original one. In the subsequent experiment we show that matrices from the family of strucured spinners can be used for this purpose, thus can speed up several convex optimization problems solvers.\nWe consider the unconstrained large scale logistic regression problem, i.e. given a set of n observations {(ai, yi)}i=1..n, with ai \u2208 Rd and yi \u2208 {\u22121, 1}, find\nGram matrix reconstruction error USPST dataset for the Gaussian kernel\nGram matrix reconstruction error USPST dataset for the angular kernel\n+\nConvergence analysis\nx \u2208 Rd minimizing the cost function\nf(x) = n\u2211 i=1 log(1 + exp(\u2212yiaTi x)) .\nThe Newton approach to solving this optimization problem entails solving at each iteration the least squares equation \u22072f(xt)\u2206t = \u2212\u2207f(xt), where\n\u22072f(xt) =\nATdiag\n( 1\n1 + exp(\u2212aTi x) (1\u2212 1 1 + exp(\u2212aTi x) )\n) A\n\u2208 Rd\u00d7d\nis the Hessian matrix of f(xt), A = [aT1 a T 2 \u00b7 \u00b7 \u00b7 aTn ] \u2208 Rn\u00d7d, \u2206t = xt+1 \u2212 xt is the increment at iteration t and \u2207f(xt) \u2208 Rd is the gradient of the cost function. In [Pilanci and Wainwright, 2015] it is proposed to consider the sketched version of the least square equation, based on a Hessian square root of \u22072f(xt), denoted \u22072f(xt)1/2 =\ndiag (\n1 1+exp(\u2212aTi x) (1\u2212 1 1+exp(\u2212aTi x)\n) )1/2\nA \u2208 Rn\u00d7d. The least squares problem at each iteration t is of the form:(\n(St\u22072f(xt)1/2)TSt\u22072f(xt)1/2 ) \u2206t = \u2212\u2207f(xt) ,\nwhere St \u2208 Rm\u00d7n is a sequence of isotropic sketch matrices. Let\u2019s finally recall that the gradient of the cost function is\n\u2207f(xt) = n\u2211 i=1 ( 1 1 + exp(\u2212yiaTi x) \u2212 1 ) yiai .\nIn our experiment, the goal is to find x \u2208 Rd, which minimizes the logistic regression cost, given a dataset\n{(ai, yi)}i=1..n, with ai \u2208 Rd sampled according to a Gaussian centered multivariate distribution with covariance \u03a3i,j = 0.99\n|i\u2212j| and yi \u2208 {\u22121, 1}, generated at random. Various sketching matrices St \u2208 Rm\u00d7n are considered.\nIn Figure 6 we report the convergence of the Newton sketch algorithm, as measured by the optimality gap defined in [Pilanci and Wainwright, 2015], versus the iteration number. As expected, the structured sketched versions of the algorithm do not converge as quickly as the exact Newton-sketch approach, however various matrices from the family of structured spinners exhibit equivalent convergence properties as shown in the figure.\nWhen the dimensionality of the problem increases, the cost of computing the Hessian in the exact Newton-sketch approach becomes very large [Pilanci and Wainwright, 2015], scaling as O(nd2). The complexity of the structured Newtonsketch approach with the matrices from the family of structured spinners is instead only O(dn log(n) +md2). Figure 6 also illustrates the wall-clock times of computing single Hessian matrices and confirms that the increase in number of iterations of the Newton sketch compared to the exact sketch is compensated by the efficiency of sketched computations, in particular Hadamard-based sketches yield improvements at the lowest dimensions."}], "references": [{"title": "Approximate nearest neighbors and the fast Johnson-Lindenstrauss transform", "author": ["Ailon", "Chazelle", "N. 2006] Ailon", "B. Chazelle"], "venue": null, "citeRegEx": "Ailon et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Ailon et al\\.", "year": 2006}, {"title": "An almost optimal unrestricted fast JohnsonLindenstrauss transform", "author": ["Ailon", "Liberty", "N. 2011] Ailon", "E. Liberty"], "venue": "In SODA", "citeRegEx": "Ailon et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Ailon et al\\.", "year": 2011}, {"title": "Practical and optimal LSH for angular distance", "author": ["Andoni et al", "A. 2015] Andoni", "P. Indyk", "T. Laarhoven", "I.P. Razenshteyn", "L. Schmidt"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2015\\E", "shortCiteRegEx": "al. et al\\.", "year": 2015}, {"title": "Bounds on determinants of perturbed diagonal matrices. arXiv:1401.7084", "author": ["Brent et al", "R.P. 2014] Brent", "J.H. Osborn", "W.D. Smith"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2014\\E", "shortCiteRegEx": "al. et al\\.", "year": 2014}, {"title": "Kernel methods for deep learning", "author": ["Cho", "Saul", "Y. 2009] Cho", "L.K. Saul"], "venue": null, "citeRegEx": "Cho et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Cho et al\\.", "year": 2009}, {"title": "Binary embeddings with structured hashed projections", "author": ["Choromanska et al", "A. 2016] Choromanska", "K. Choromanski", "M. Bojarski", "T. Jebara", "S. Kumar", "Y. LeCun"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2016\\E", "shortCiteRegEx": "al. et al\\.", "year": 2016}, {"title": "Recycling randomness with structure for sublinear time kernel expansions", "author": ["Choromanski", "Sindhwani", "K. 2016] Choromanski", "V. Sindhwani"], "venue": null, "citeRegEx": "Choromanski et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Choromanski et al\\.", "year": 2016}, {"title": "Scalable kernel methods via doubly stochastic gradients", "author": ["Dai et al", "B. 2014] Dai", "B. Xie", "N. He", "Y. Liang", "A. Raj", "Balcan", "M.-F", "L. Song"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2014\\E", "shortCiteRegEx": "al. et al\\.", "year": 2014}, {"title": "A sparse johnson: Lindenstrauss transform", "author": ["Dasgupta et al", "A. 2010] Dasgupta", "R. Kumar", "T. Sarlos"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2010\\E", "shortCiteRegEx": "al. et al\\.", "year": 2010}, {"title": "Random projection trees and low dimensional manifolds", "author": ["Dasgupta", "Freund", "S. 2008] Dasgupta", "Y. Freund"], "venue": null, "citeRegEx": "Dasgupta et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Dasgupta et al\\.", "year": 2008}, {"title": "Predicting parameters in deep learning", "author": ["Denil et al", "M. 2013] Denil", "B. Shakibi", "L. Dinh", "M. Ranzato", "N.D. Freitas"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2013\\E", "shortCiteRegEx": "al. et al\\.", "year": 2013}, {"title": "Random feature mapping with signed circulant matrix projection", "author": ["Feng et al", "C. 2015] Feng", "Q. Hu", "S. Liao"], "venue": "In IJCAI", "citeRegEx": "al. et al\\.,? \\Q2015\\E", "shortCiteRegEx": "al. et al\\.", "year": 2015}, {"title": "Deep learning. Book in preparation for", "author": ["Goodfellow et al", "I. 2016] Goodfellow", "Y. Bengio", "A. Courville"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2016\\E", "shortCiteRegEx": "al. et al\\.", "year": 2016}, {"title": "Approximate nearest neighbor: Towards removing the curse of dimensionality", "author": ["Har-Peled et al", "S. 2012] Har-Peled", "P. Indyk", "R. Motwani"], "venue": "Theory of Computing,", "citeRegEx": "al. et al\\.,? \\Q2012\\E", "shortCiteRegEx": "al. et al\\.", "year": 2012}, {"title": "Johnson-lindenstrauss lemma for circulant matrices", "author": ["Hinrichs", "Vybral", "A. 2011] Hinrichs", "J. Vybral"], "venue": "Random Struct. Algorithms,", "citeRegEx": "Hinrichs et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Hinrichs et al\\.", "year": 2011}, {"title": "Kernel methods match deep neural networks on timit", "author": ["Huang et al", "2014] Huang", "P.-S", "H. Avron", "T. Sainath", "V. Sindhwani", "B. Ramabhadran"], "venue": "In ICASSP", "citeRegEx": "al. et al\\.,? \\Q2014\\E", "shortCiteRegEx": "al. et al\\.", "year": 2014}, {"title": "Extensions of Lipschitz mappings into a Hilbert space", "author": ["Johnson", "Lindenstrauss", "W. 1984] Johnson", "J. Lindenstrauss"], "venue": "In Conference in modern analysis and probability,", "citeRegEx": "Johnson et al\\.,? \\Q1984\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 1984}, {"title": "Fastfood-computing hilbert space expansions in loglinear time", "author": ["Le et al", "Q. 2013] Le", "T. Sarl\u00f3s", "A. Smola"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2013\\E", "shortCiteRegEx": "al. et al\\.", "year": 2013}, {"title": "Restructuring of deep neural network acoustic models with singular value decomposition", "author": ["J. Li"], "venue": "In Interspeech", "citeRegEx": "Li,? \\Q2013\\E", "shortCiteRegEx": "Li", "year": 2013}, {"title": "Dense fast random projections and lean Walsh transforms", "author": ["Liberty et al", "E. 2008] Liberty", "N. Ailon", "A. Singer"], "venue": "In RANDOM", "citeRegEx": "al. et al\\.,? \\Q2008\\E", "shortCiteRegEx": "al. et al\\.", "year": 2008}, {"title": "Convolutional kernel networks", "author": ["Mairal et al", "J. 2014] Mairal", "P. Koniusz", "Z. Harchaoui", "C. Schmid"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2014\\E", "shortCiteRegEx": "al. et al\\.", "year": 2014}, {"title": "Randomized sketches of convex programs with sharp guarantees", "author": ["Pilanci", "Wainwright", "M. 2014] Pilanci", "M.J. Wainwright"], "venue": "In ISIT", "citeRegEx": "Pilanci et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Pilanci et al\\.", "year": 2014}, {"title": "Newton sketch: A linear-time optimization algorithm with linear-quadratic convergence. CoRR, abs/1505.02250", "author": ["Pilanci", "Wainwright", "M. 2015] Pilanci", "M.J. Wainwright"], "venue": null, "citeRegEx": "Pilanci et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Pilanci et al\\.", "year": 2015}, {"title": "Random features for large-scale kernel machines", "author": ["Rahimi", "Recht", "A. 2007] Rahimi", "B. Recht"], "venue": null, "citeRegEx": "Rahimi et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Rahimi et al\\.", "year": 2007}, {"title": "Low-rank matrix factorization for deep neural network training with high-dimensional output targets", "author": ["Sainath et al", "T.N. 2013] Sainath", "B. Kingsbury", "V. Sindhwani", "E. Arisoy", "B. Ramabhadran"], "venue": "In ICASSP", "citeRegEx": "al. et al\\.,? \\Q2013\\E", "shortCiteRegEx": "al. et al\\.", "year": 2013}, {"title": "Structured transforms for small-footprint deep learning", "author": ["Sindhwani et al", "V. 2015] Sindhwani", "T.N. Sainath", "S. Kumar"], "venue": "In Advances in Neural Information Processing Systems 28: Annual Conference on Neural Information Processing Systems", "citeRegEx": "al. et al\\.,? \\Q2015\\E", "shortCiteRegEx": "al. et al\\.", "year": 2015}, {"title": "Spherical LSH for approximate nearest neighbor search on unit hypersphere", "author": ["Terasawa", "Tanaka", "K. 2007] Terasawa", "Y. Tanaka"], "venue": "WADS", "citeRegEx": "Terasawa et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Terasawa et al\\.", "year": 2007}, {"title": "Deep fried convnets", "author": ["Yang et al", "Z. 2015] Yang", "M. Moczulski", "M. Denil", "N. de Freitas", "A. Smola", "L. Song", "Z. Wang"], "venue": null, "citeRegEx": "al. et al\\.,? \\Q2015\\E", "shortCiteRegEx": "al. et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 18, "context": ", 2013] introduces low-rank matrix factorization to reduce the size of the fully connected layers at train time, and [Li, 2013] uses low-rank factorizations with SVD after training the full model.", "startOffset": 117, "endOffset": 127}], "year": 2017, "abstractText": "We consider an efficient computational framework for speeding up several machine learning algorithms with almost no loss of accuracy. The proposed framework relies on projections via structured matrices that we call Structured Spinners, which are formed as products of three structured matrix-blocks that incorporate rotations. The approach is highly generic, i.e. i) structured matrices under consideration can either be fully-randomized or learned, ii) our structured family contains as special cases all previously considered structured schemes, iii) the setting extends to the non-linear case where the projections are followed by non-linear functions, and iv) the method finds numerous applications including kernel approximations via random feature maps, dimensionality reduction algorithms, new fast cross-polytope LSH techniques, deep learning, convex optimization algorithms via Newton sketches, quantization with random projection trees, and more. The proposed framework comes with theoretical guarantees characterizing the capacity of the structured model in reference to its unstructured counterpart and is based on a general theoretical principle that we describe in the paper. As a consequence of our theoretical analysis, we provide the first theoretical guarantees for one of the most efficient existing LSH algorithms based on the HD3HD2HD1 structured matrix [Andoni et al., 2015]. The exhaustive exequal contribution perimental evaluation confirms the accuracy and efficiency of structured spinners for a variety of different applications.", "creator": "LaTeX with hyperref package"}}}