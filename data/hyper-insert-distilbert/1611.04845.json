{"id": "1611.04845", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Nov-2016", "title": "An Evaluation of Information Sharing Parking Guidance Policies Using a Bayesian Approach", "abstract": "real - time discrete parking meter occupancy information is widely critical methodology for describing a parking management system environment to easily facilitate drivers to park more efficiently. new recent advances in connected positioning and automated vehicle technologies dramatically enable sensor - element equipped cars ( probe travel cars ) to detect and broadcast available parking spaces when considering driving through occupied parking lots. in making this paper, alternatively we evaluate the social impact of market penetration of probe vehicles cars on the system performance, and gradually investigate identify different discrete parking identification guidance policies to improve the systematic data assimilation acquisition process. meanwhile we lastly adopt a weighted simulation - paradigm based analytical approach hoping to impose four policies on an increasingly off - street mobile parking reserved lot influencing predicting the behavior patterns of probe cars about to potentially park in your assigned parking storage spaces. this in small turn effects the scanning intercept route and the same parking space occupancy estimations.. the last policy we usually propose is attempting a near - optimal guidance access strategy that maximizes the information gain overhead of posteriors. amongst the results studies suggest that an algorithm efficient information gathering tools policy can clearly compensate for low penetration of connected and safely automated transportation vehicles. and we then also highlight further the policy related trade - ups off that occur while attempting it to increase maximize information measurement gain capabilities through explorations and improve assignment accuracy through exploitations. alternatively our results can assist greater urban policy makers in designing and managing smart parking systems.", "histories": [["v1", "Mon, 14 Nov 2016 15:30:42 GMT  (856kb,D)", "http://arxiv.org/abs/1611.04845v1", null]], "reviews": [], "SUBJECTS": "cs.AI cs.CY cs.RO", "authors": ["xinyi wu", "kartik balkumar", "qi luo", "robert hampshire", "romesh saigal"], "accepted": false, "id": "1611.04845"}, "pdf": {"name": "1611.04845.pdf", "metadata": {"source": "CRF", "title": "AN EVALUATION OF INFORMATION SHARING PARKING GUIDANCE POLICIES USING A BAYESIAN APPROACH", "authors": ["Xinyi Wu"], "emails": ["xinyiwu@umich.edu", "kartikbk@umich.edu", "luoqi@umich.edu", "hamp@umich.edu", "rsaigal@umich.edu"], "sections": [{"heading": null, "text": ""}, {"heading": "INTRODUCTION", "text": "The ever-increasing number of cars on roads today has led to a burden on the management of transportation infrastructure. A prime example we observe today is vehicle owners finding it difficult to search for parking spaces. This is more evident in large cities and in prime locations where it is not uncommon to find vehicles moving around inside a parking lot anticipating a parking space to free up. In addition to the driver discomfort and frustration, searching for a parking space leads to a significant loss of personal time and an increase in fuel consumption. Searching for a parking space in an optimized manner is thus a problem that demands the attention of researchers. The availability of real-time parking information has the potential for immense time and economic savings as drivers know in advance the presence of empty parking spots at the end of their trips. A highly desirable feature in such a system is that the source of real-time information must be independent of infrastructure. Parking solutions that depend on infrastructure, for example the use of on-site cameras, often incur significant costs. More importantly the implementation of such a solution is not generic with respect to the layout of the parking lot. Modern vehicle advancements have led to cars that are today equipped with vision and range-based navigation sensors and offer a source of real-time parking space information which is independent of surrounding infrastructure. The focus of researchers has thus shifted towards modifying the navigating sensors and algorithms to tap real-time information on the occupancy of parking spaces, and subsequently relaying the useful information to a wide audience (1). Even though exploiting data from vehicle sensors for generating parking information is now close to a reality, research on parking strategies and policies that maximize the quality of this real-time information system is still nascent. Hence this paper aims to bridge the research gap by introducing a simulation-based approach to develop and investigate optimal parking policies for an intelligent parking system that depends on information collected from vehicle sensors. We propose a parking simulator that simulates a real parking lot in the city of Ann Arbor in Michigan. Cars entering and leaving the lot are modelled as probe cars (equipped with sensors) and non-probe cars (without sensors) to implement a \u201cconnected vehicle \u201d environment. The developed policies are evaluated using the simulator based on the accuracy of occupancy prediction and a single optimal policy is determined. The paper is structured as follows: i) Section II reviews related work on existing parking search models and optimal path planning in parking. ii) Section III describes the developed parking simulator comprised of four modules, and provides a description on the optimal parking space allocation policy for probe cars to maximize the quality and availability of real-time parking information iii) Section IV offers a visualization of the parking simulator and a comparison of results between parking information collected one-way and two-ways by probe cars. iv) Section V provides a summary of the current work and a final conclusion."}, {"heading": "RELATED WORK", "text": "We discuss previous studies in literature on parking search optimization and related works. Luo et al. proposed a parking detection algorithm based on data collected from range-based sensors on vehicle, and improved its accuracy by introducing SLAM method (1). Most of input data and configurations in simulation are based on this project. Bogoslavskyi et al. proposed a Markov Decision Process (MDP) based planner to calculate paths that minimize the time it takes to search for a parking space and walking up to a target destination after parking (2). They calculated the paths using occupancy probabilities of parking spaces. The occupancy probabilities are consid-\nered uncertain and derived from visual sensor data and prior probability estimates of the spaces. Farkas and Lendak used simulation to study the improvement in parking search cruise time from crowd-sensing real-time parking information in an urban environment (3). Real-time information on occupancy of parking spaces alone may not improve parking search time for drivers. For example, Tasseron et al. used simulation to understand the impact of disseminating on-street parking information using vehicle-vehicle communication and vehicle-sensor communication. They concluded that, in contrary to theoretical expectations, the cruise time for searching for parking spots does not decrease significantly and may also increase, even under occupancy rates as high as 90% to 95%. The authors link it to the more likelihood of drivers parking their cars before reaching their destinations (4). In another undesirable situation, broadcasting real-time information on parking spaces can negatively affect system performance by impacting driver behavior in unexpected ways. Wahle et al. discussed several studies on the various negative impacts of sharing real-time parking space information with too many drivers (5). Under these scenarios, our study assumes that parking policies can be used as a medium to control parking probabilities and the undesirable effects of excess information while achieving reduction in parking search times for the entire system of vehicles. Agent-based simulation models that involve parking space detection must be based on suitable route choices for probe cars in order to maximize the sensing of the parking spaces and maintain latest information. Several models in the fields of robotics and computer science have dealt with this type of path planning problem. Singh et al. proposed an efficient algorithm for the Multirobot Informative Path Planning Problem (MIPP) to generate informative paths while maximizing a sub-modular function like mutual information (6). Martinez-Cantin et al. proposed a Bayesian optimization method for a mobile robot planning its path for optimal sensing of the environment under time constraints (7). Chekuri et al. set up an \u201corienteering problem\u201d for a weighted and directed graph. Nodes of the graph are visited by a walk and the algorithm developed maximizes a submodular set function associated with the nodes visited (8)."}, {"heading": "PARKING SIMULATOR BASED ON CONNECTED VEHICLES TECHNOLOGY", "text": "The simulator consists of three modules, event module, routing module and scanning module, whose output are connected to a data visualizer. The event module generates consequent arrivals and departures of both probe cars and normal cars, and each car will follow the route decided by the routing module. Finally, the scanning module will be activated only for probe cars and the estimated states of parking spaces along its trip will be updated using Bayes rule. All three modules transmit their status to the visualization module simultaneously."}, {"heading": "Event Module", "text": "Consequent events in the event module include arrivals and departures of probe cars (type 1 car) or normal cars (type 2 car). It is reasonable to formulate the parking arrival/departure process as a Mt/M/N/C queue as a service system, where N servers represents N parking spaces respectively, and C is the queue capacity, i.e. maximum number of cars waiting in the parking lot for next available parking space. Arrival process\u2019s intensity is \u03bb (t) as a function of time during the day, and the type of the next arriving car is randomly decided with fixed ratio \u03b3 . The arrival intensity follows a piecewise function in units of cars per hour. It is set to emulate the pattern of intra-city traffic with average rate of 120 vehicles per hour, whose intensity is much higher in early morning and late afternoon when people drive in and out for the regular work hours, and slightly higher at\nnoon when people drive during their lunch break (9).\n\u03bb (t) =  288 if 0\u2264 t < 1 or 8\u2264 t < 9 72 if 1\u2264 t < 3 or 7\u2264 t < 8 144 if 4\u2264 t < 6\nEach arriving car will be assigned to a parking space according to a specified policy in the routing module unless the number of cars in the system n > N +C. The service completion time (time spent in the parking lot) are exponential variable with constant parameter \u00b5 . First come first serve rule is applied in the queue when all parking spaces are full, and cars arrive when the queue buffer has reached the capacity will leave the system immediately. The System State (SS) variable is a vector of (N +2) dimensions. The first N elements are Boolean variable indicating the occupancy of N parking spaces accordingly. The N +1 element n represents the total number of cars in the system, and the last element c indicates the number of cars in the queue. Counter variables NA are total number of arrivals of probe cars / normal cars by time t, and ND are total number of departures by time t. By tracking these two set of variables, we are able to observe how the system evolves with time by generating a discrete event list, which can be referred in the general parallel servers queue simulations in (10). The discrete event simulation that generates an event list is presented in the pseudocode below:\nAlgorithm 1 Event Module Variables: T T : Total time of simulation SS = (X1, \u00b7 \u00b7 \u00b7 ,XN ,n,c)\nActual status of parking space i Xi =  0 if the parking space i is free 1 if the parking space i is occupied by a probe car 2 if the parking space i is occupied by a normal car Initialization: t = NA,1 = NA,2 = ND,1 = ND,2 = 0 Xi = 0, i = 1, \u00b7 \u00b7 \u00b7 ,N n = c = 0 Generate T0 and indicating variable z0. If z0 == 1, set tA,1 = T0, tA,2 = 0; else, set tA,1 = 0, tA,2 = T0. ti = \u221e, i = 1, \u00b7 \u00b7 \u00b7 ,N Start\nwhile t < T T do if tA,1==min{tA,1, tA,2, ti} then // Arrival of Probe Car\nt = tA,1 NA,1 = NA,1 +1 Generate Tt and reset tA,1 = tA,1 +Tt . if n < N then\nAssign a parking space I according to the parking policy. n = n+1\n(continued) SS = (0, \u00b7 \u00b7 \u00b7 ,XI = 1, \u00b7 \u00b7 \u00b7 ,0,n,c) Generate Y and reset tI = t +Y . Activate the routing and scanning models. else if n < N +C then n = n+1 c = c+1 SS = (X1, \u00b7 \u00b7 \u00b7 ,XN ,n,c) Activate the routing and scanning models.\nend if else if tA,2==min{tA,1, tA,2, ti} then // Arrival of Normal Car\nt = tA,2 NA,2 = NA,2 +1 Generate Tt and reset tA,2 = tA,2 +Tt . if n < N then\nAssign a parking space I according to the parking policy. n = n+1 SS = (0, \u00b7 \u00b7 \u00b7 ,XI = 2, \u00b7 \u00b7 \u00b7 ,0,n,c) Generate Y and reset tI = t +Y\nelse if n<N+C then. n = n+1 c = c+1 SS = (X1, \u00b7 \u00b7 \u00b7 ,XN ,n,c)\nend if else if tI==min{tA,1, tA,2, ti}, i = 1, \u00b7 \u00b7 \u00b7 ,N then // Departure\nt = tI if XI == 1 then // Departure of Probe Car\nND,1 = ND,1 +1 Activate the routing and scanning models.\nelse if XI == 2 then // Departure of Normal Car ND,2 = ND,2 +1 end if XI = 0 tI = \u221e if n > N then\nXI = XN+1 Generate Y and reset tI = tI +Y . for i for N +1 to n\u22121 do\nXi = Xi+1 end for Xn = 0\nend if end if\nend while End"}, {"heading": "Routing Module", "text": "One major objective of this simulation research is to find the impacts of different parking assignment policies on the service performance, which are integrated in the routing module. This module has two functions. One is to assign an available parking space to the arrived car, and the other is to generate driving routes for probe cars when they arrive or depart, which will be used in the scanning model later. For sake of simplifying workflow, the routing module should not intervene the event module as a precedent module, thus we assume that an arriving vehicle instantaneously travel to their parking locations.\nWe evaluate four policies for assigning cars to parking spaces:\n- Policy 1 Random assignment: both types of cars are assigned to available parking spaces randomly, which is expected to represent the average performance of the system.\n- Policy 2 Nearest parking: both types of cars park to the available parking space closest to the entrance. This is to simulate a destination-oriented parking policy assuming the entrance is the final destination for all drivers.\n- Policy 3 Maximum satisfaction guidance: normal cars park to the space closest to the entrance while probe cars park to the space which is estimated to be most likely empty. In other words, this is to function as the maximum exploitation policy.\n- Policy 4 Near-optimal guidance: normal cars park to the space closest to the entrance while probe cars park to the space which will maximize information gain from scanning. In other words, this is to function as the maximum exploration policy.\nFor generating driving routes, cars always arrive in the shortest path but there are two policies for departure routes. One is that the roads in the parking lot are two-way so cars follow the same path as they arrive. The other is that the roads are one-way so cars follow a different path when leaving. For an unregulated parking lot, the direction of cars driving in and out is always a mix of both routes so it is sufficient to research only these two extreme cases."}, {"heading": "A Near-Optimal Guide Policy (Policy 4)", "text": "For each arriving car at time t, the action a(t) consists of assigning to a parking space i and choosing the route on a vertex-edge graph. In pursuance of improving the quality of parking guidance services, the principal goal is to accelerate the exploration process by distributing probe cars optimally. A very natural way to quantify the informativeness of a chosen route is mutual information, more specifically, the information gain from scanning vertex (parking spaces) of route. We only consider the posterior of each action because of the instantaneous routing assumption, thus the entropy is measured over the vertex along the route.\nMI(\u03c7N(t),a(t)) = H(\u03c7N(t))\u2212H(\u03c7N(t)|\u03c7a(t)).\nwhere \u03c7i, i = 1, \u00b7 \u00b7 \u00b7 ,N represents the estimated status of parking space i, whose measure is between 0 and 1. H(\u03c7N(t)) is the entropy of the all vertex, and H(\u03c7N(t)|\u03c7a(t)) is the conditional entropy by taking action a(t) representing the observed set. Thus the mutual information measures the uncertainty reduction resulting from a chosen route. Chekuri et al. shows that MI() is a submodular function, which possesses diminishing return property: the more locations already been sensed, the less information gained by sensing new locations (8). Furthermore, as the principle\nof optimality is strictly obeyed in sequence of posterior of scanning, we can find optimal policy for each probe car by maximizing MI(\u03c7N(t),a(t)) by using direct policy search on the grounds of these facts:\n1. For cases that \u03b3 < 1, i.e. a mixed arrivals of probe cars and normal cars, seeking for optimal policy becomes a NP-hard Partial Observable Markov decision process (POMDP) because the actual state Xi is only known for those occupied by probe cars.\n2. The controllable objects are only probe cars, whose departure time is also a random variable since the profile of its departure path is stochastic.\n3. The action space is a high-dimensional compound matrix of routing module and scanning module.\nInasmuch as it is prohibitive to find an explicit optimal policy, we implement an alternative approximation method using direct policy search at each step especially in the case that the candidate policy space is relatively small. In practice of robotics path planning (6), this is proved to an efficient near-optimal policy to maximize information gain."}, {"heading": "Scanning Module", "text": "The scanning module updates the estimated system state. When a probe arrives or departs, the scanning module is activated. We use recursive Bayesian updating in this module."}, {"heading": "Recursive Bayesian Updating", "text": "Let \u03c7i,t be a random variable of parking space i at time t. The estimated state of parking space i at time t is X\u0302i, which is determined by\nX\u0302i =  0 if P(\u03c7i)< 0.4 1 if P(\u03c7i)> 0.6 null if 0.4\u2264 P(\u03c7i)\u2264 0.6 .\nWe are only interested in cases when X\u0302i is not null.\nX\u0302i,t = { 0 parking space i is estimated to be empty at time t 1 parking space i is estimated to be occupied at time t .\nAccording to Bayes Theorem,\nP(Xi = 0|X\u0302i) = P(X\u0302i|Xi = 0)P(Xi = 0)\nP(X\u0302i)\nP(Xi 6= 0|X\u0302i) = P(X\u0302i|Xi 6= 0)P(Xi 6= 0) P(X\u0302i) P(X\u0302i) = P(X\u0302i|Xi = 0)P(Xi = 0)+P(X\u0302i|Xi 6= 0)P(Xi 6= 0).\nAfter each measurement, we use Bayes Theorem to compute the posterior probability pi,t+1 that the parking space i is occupied. The likelihood data are from the field tests in previous research, we conducted field tests to test the effectiveness of radar for detecting occupancy of parking spaces (1). From this experience, we calculated the prior and likelihood data in Table 1 and Table 2.\nIf the measurement is X\u0302i,t = 0, then\nIf the measurement is X\u0302i,t = 1, then\nTherefore the posterior at time t +1 can be expressed as:\n{ pi,t+1 =\n0.093pi,t 0.093pi,t+0.941(1\u2212pi,t) = 0.093pi,t 0.941\u22120.848pi,t if X\u0302i,t = 0 (\u2217)\npi,t+1 = 0.907pi,t 0.907pi,t+0.059(1\u2212pi,t) = 0.907pi,t 0.0589+0.848pi,t if X\u0302i,t = 1 (\u2217\u2217)\n.\nThe scanning module using recursive Bayesian updating is presented in the pseudocode below:\nAlgorithm 2 Scanning Module Variables: ES = (p1, \u00b7 \u00b7 \u00b7 , pN), in which pi represents the probability that parking space i is occupied, i = 1, \u00b7 \u00b7 \u00b7 ,N Initialization: ES = (0.5, \u00b7 \u00b7 \u00b7 ,0.5) Start\nfor all parking spaces i scanned by a probe car do if X\u0302i == 0 then (*) else if X\u0302i == 1 then (**) end if end for if a probe car arrives and parks to parking space I then\npI = 1 end if if a probe car leaves parking space I then\npI = 0 end if\nEnd\nThe updating of estimated matrix \u03c7 also includes a discount factor \u03b2 since the perceived parking states will diminish to unknown status (p = 0.5) at each time step. For a parking space i that was scanned at t but not scanned during \u2206t,\n\u03c7i(t +\u2206t) = { 0.5+\u03b2 \u2206t(\u03c7i(t)\u22120.5) if \u03c7i(t)> 0.5 0.5\u2212\u03b2 \u2206t(0.5\u2212\u03c7i(t)) if \u03c7i(t)< 0.5 .\nCalculating the error of estimation at parking space i following this operator\nei = { X\u0302i\u2295Xi if X\u0302i = 0 or 1 1 if X\u0302i = null .\nThe total absolute error of all parking spaces is therefore\ne = \u2211 i\u2208N ei."}, {"heading": "RESULTS AND DISCUSSION Visualization", "text": "The visualizer is developed as a back-end python and a front-end web module. The visualizer is interfaced with the other simulation modules and illustrates the guided movement of probe cars and non-probe cars through the parking lot. The movement of cars is overlaid on an aerial image of the parking lot used in field test in (1). The parking lot, with 160 parking spaces, is converted into a node-and-edge graph as shown in Figure 1. Each node represents a parking space and the edges connecting the nodes are paths for cars to navigate inside the parking lot. Differing color schemes are used for the vehicles-red for probe cars and blue for non-probe cars."}, {"heading": "Simulation Results", "text": ""}, {"heading": "Simulation Parameters", "text": "Parameters of the simulator\u2019s modules are set as followed. In the event module, arrival events are assumed to be a non-homogeneous Poisson process with arrival rate as a piecewise function of time in minutes. The parking time follows an exponential distribution with \u00b5 = 60. In the scanning module, the initial state of all parking spaces are empty with estimation p(\u03c7i) = 0.5, i = 1, \u00b7 \u00b7 \u00b7 ,N. The discount factor of estimation is \u03b2 = 0.9. The scanning range of a probe car is at most 6 nodes surrounding the current position. We use the relative error of posteriors to quantify the performance of each policy. The relative error between the predicted occupancy and actual occupancy is calculated for increasing market penetration of probe cars in percentage, which is defined as:\ne(t) = number of wrongly estimated parking space\nnumber of total parking spaces .\nThe average error of a given event list is calculated over t\u2217, which are consequent events in the list:\ne\u0304 = \u222b T\n0 e(t)dt T = \u2211t\u2217 e(t\u2217)\u2206t T .\nRelative error changing with time Since the arrival rate and number of vehicles in the parking lot change with time, the relative error fluctuate as a function of system state. Their relationship is shown in Figure 2 of one-way parking and Figure 3 of two-way parking both with the percentage of probe cars in arrivals \u03b3 = 0.5.\nThe flow of arriving probe cars and normal cars in the simulation follows the pattern of typical daily intra-city traffic in literature (9). In both cases, at zero time the relative error is large across all the policies because of the initial conditions, but tends to drop considerably as information is gained, and keeps oscillating as information variation occurs. Notice that the nearoptimal guide policy is stable over time in contrast to the other policies whose estimation errors fluctuate over time. In addition this developed policy is less sensitive to the number of parked vehicles in the system while the errors of others increase when the number of parked vehicles drops. The very few peaks in its errors are caused by the diminishing of information, seeing that there are no probe cars arriving during that time and estimators \u03c7i fall back into the undecided range. Another observation is that the oscillation of errors in one-way case is relatively smaller in size than in two-way case for all policies. This is because one-way path allows probe cars to scan towards different direction from the route their arrived. Ideally, if there is no discount factor in estimations, choosing any parking space in the same row has equivalent effects on the error means.\nRelative error of different parking policies In order to observe the average performance of each policy, the Monte Carlo method is applied to generate event list repeatedly. The percentage of probe cars in arrivals \u03b3 ranges from 0.1 to 0.9 with step 0.1. The simulation is repeated for 1,000 times for each \u03b3 . The average relative error of estimations with increasing percentage of probe cars in the arrivals are of two-way parking is shown in Figure 4, and the result of one-way parking is shown in Figure 5.\nThe near-optimal parking policy outperforms in both cases in average. On the contrary, the high satisfaction policy which assigning cars to most probably available parking space is always modest in contributing to the estimations. This result is intuitive because over-exploiting the given information will sacrifice exploring the unknown regions. This trade-off has to be considered through the decision-making which is able to improve the parking guidance and also guarantee to satisfy individual drivers\u2019 demands.\nAnother important finding is that using the near-optimal policy can significantly compensate for low fleet penetration of probe cars. As the result shows, the performance of near-optimal policy is acceptable even with low penetration of probe cars, and the relative error can only be slightly reduced when the percentage increases from 10% to 90%. According to the market prediction in literature (11), even by assuming that the growth of ADAS market follows the logistic function, the penetration rate of probe cars will be less than 20% by 2020, which is not adequate for other policies. Therefore we can conclude that applying the near-optimal policy will enable covering the parking lot with low percentage of cars equipped with sensors. On the other hand we should not overstate the effect because the assumption that the near-optimal policy always directs drivers to available parking spaces. In practice, there is a chance that our policy directs drivers to a space that is actually not available. In future work this adverse event can be incorporated into the analysis."}, {"heading": "CONCLUSION", "text": "This paper described how we build a parking simulator consisting of event module, routing module, scanning module and visualizer. Four parking guidance policies are tested on this platform with mixed traffic of probe cars and normal cars. Comparing to the other policies, the near-optimal policy stably and accurately estimates the parking occupancy in the repeated experiments. A further discussion on the trade-off of exploitation and exploration in optimal routing provides insight for an improved parking guide policy for probe cars. Future work will focus on building a multistage stochastic programming model for parking. First part of the work is to formulate a cost function for optimal parking guidance policy including the misguide penalty. Second task is to extend the current one-stage policy to a multistage policy in scenarios that the arriving car is assigned to a occupied parking space. This will require the compound modeling of generating events and routing. These improvements of simulation will be able to give insight into a more comprehensive exploration-exploitation parking guidance policy."}, {"heading": "ACKNOWLEDGEMENT", "text": "This project was funded by Mobility Transformation Center."}, {"heading": "APPENDIX Nomenclature", "text": "N Number of servers (parking spaces)\nn Number of cars in the system\nC Maximum number of cars waiting for parking\nc Number of cars in the queue\nt Time variable of the simulation\nNA,1 Number of probe cars arrivals by t\nNA,2 Number of normal cars arrivals by t\nND,1 Number of probe cars departures by t\nND,2 Number of normal cars departures by t\n\u03bb (t) Arrival rate of cars, a function of time during the day\n\u00b5 Average service completion rate\nES Estimated system state variables\nSS System state variables\ntA,1 Time of the next arrival of probe car\ntA,2 Time of the next arrival of normal car\nti Service completion time for the car in sever i\nA(n) Arrival time of car n\nD(n) Departure time of car n\nXi Actual status of sever (parking space) i\n\u03c7i Measure of server (parking space) i\n\u03b3 Ratio of probe cars in total traffic\nX\u0302i Estimated status of server (parking space) i\n\u03b2 Discount factor of estimation\na(t) Action at time t, a combined decision of assignment and route of next arriving car\ne Error of estimation"}], "references": [{"title": "Where to park? minimizing the expected time to find a parking space", "author": ["I. Bogoslavskyi", "L. Spinello", "W. Burgard", "C. Stachniss"], "venue": "IEEE International Conference on Robotics and Automation (ICRA),", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Lendak, Simulation environment for investigating crowd-sensing based urban parking. Models and Technologies for Intelligent Transportation Systems", "author": ["K. Farkas"], "venue": "(MT-ITS), 2015 International Conference on, Budapest,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "The Potential Impact of Vehicle-to-Vehicle and Sensor-to-Vehicle Communication in Urban Parking", "author": ["G. Tasseron", "K. Martens", "R. van der Heijden"], "venue": "In IEEE Intelligent Transportation Systems Magazine,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "The impact of real-time information in a two-route scenario using agent-based simulation", "author": ["J. Wahle", "C. Ana L\u00c3\u017ecia", "F. Kl\u00c3ijgl", "M. Schreckenberg"], "venue": "In Transportation Research Part C: Emerging Technologies", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2002}, {"title": "A Bayesian exploration-exploitation approach for optimal online sensing and planning with a visually guided mobile robot", "author": ["R Martinez-Cantin", "N. de Freitas", "E. Brochu", "J. Castellanos", "A. Doucet"], "venue": "In Autonomous Robots", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2009}, {"title": "A recursive greedy algorithm for walks in directed graphs", "author": ["C. Chekuri", "M. Pal"], "venue": "46th Annual IEEE Symposium on Foundations of Computer Science", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2005}, {"title": "Dynamics of peak hour and effect of parking for congested cities", "author": ["N. Geroliminis"], "venue": "In Transportation Research Board 88th Annual Meeting (No", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2009}, {"title": "Diffusion Model for Advanced Driver Assistance Systems Market Penetration Prediction", "author": ["Q. Luo", "S. Zhang", "R. Saigal", "R. Hampshire"], "venue": "figshare,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2016}], "referenceMentions": [], "year": 2016, "abstractText": "Real-time parking occupancy information is critical for a parking management system to facilitate drivers to park more efficiently. Recent advances in connected and automated vehicle technologies enable sensor-equipped cars (probe cars) to detect and broadcast available parking spaces when driving through parking lots. In this paper, we evaluate the impact of market penetration of probe cars on the system performance, and investigate different parking guidance policies to improve the data acquisition process. We adopt a simulation-based approach to impose four policies on an offstreet parking lot influencing the behavior of probe cars to park in assigned parking spaces. This in turn effects the scanning route and the parking space occupancy estimations. The last policy we propose is a near-optimal guidance strategy that maximizes the information gain of posteriors. The results suggest that an efficient information gathering policy can compensate for low penetration of connected and automated vehicles. We also highlight the policy trade-off that occur while attempting to maximize information gain through explorations and improve assignment accuracy through exploitations. Our results can assist urban policy makers in designing and managing smart parking systems. Wu, Balkumar and Luo et al. 2 INTRODUCTION The ever-increasing number of cars on roads today has led to a burden on the management of transportation infrastructure. A prime example we observe today is vehicle owners finding it difficult to search for parking spaces. This is more evident in large cities and in prime locations where it is not uncommon to find vehicles moving around inside a parking lot anticipating a parking space to free up. In addition to the driver discomfort and frustration, searching for a parking space leads to a significant loss of personal time and an increase in fuel consumption. Searching for a parking space in an optimized manner is thus a problem that demands the attention of researchers. The availability of real-time parking information has the potential for immense time and economic savings as drivers know in advance the presence of empty parking spots at the end of their trips. A highly desirable feature in such a system is that the source of real-time information must be independent of infrastructure. Parking solutions that depend on infrastructure, for example the use of on-site cameras, often incur significant costs. More importantly the implementation of such a solution is not generic with respect to the layout of the parking lot. Modern vehicle advancements have led to cars that are today equipped with vision and range-based navigation sensors and offer a source of real-time parking space information which is independent of surrounding infrastructure. The focus of researchers has thus shifted towards modifying the navigating sensors and algorithms to tap real-time information on the occupancy of parking spaces, and subsequently relaying the useful information to a wide audience (1). Even though exploiting data from vehicle sensors for generating parking information is now close to a reality, research on parking strategies and policies that maximize the quality of this real-time information system is still nascent. Hence this paper aims to bridge the research gap by introducing a simulation-based approach to develop and investigate optimal parking policies for an intelligent parking system that depends on information collected from vehicle sensors. We propose a parking simulator that simulates a real parking lot in the city of Ann Arbor in Michigan. Cars entering and leaving the lot are modelled as probe cars (equipped with sensors) and non-probe cars (without sensors) to implement a \u201cconnected vehicle \u201d environment. The developed policies are evaluated using the simulator based on the accuracy of occupancy prediction and a single optimal policy is determined. The paper is structured as follows: i) Section II reviews related work on existing parking search models and optimal path planning in parking. ii) Section III describes the developed parking simulator comprised of four modules, and provides a description on the optimal parking space allocation policy for probe cars to maximize the quality and availability of real-time parking information iii) Section IV offers a visualization of the parking simulator and a comparison of results between parking information collected one-way and two-ways by probe cars. iv) Section V provides a summary of the current work and a final conclusion. RELATED WORK We discuss previous studies in literature on parking search optimization and related works. Luo et al. proposed a parking detection algorithm based on data collected from range-based sensors on vehicle, and improved its accuracy by introducing SLAM method (1). Most of input data and configurations in simulation are based on this project. Bogoslavskyi et al. proposed a Markov Decision Process (MDP) based planner to calculate paths that minimize the time it takes to search for a parking space and walking up to a target destination after parking (2). They calculated the paths using occupancy probabilities of parking spaces. The occupancy probabilities are considWu, Balkumar and Luo et al. 3 ered uncertain and derived from visual sensor data and prior probability estimates of the spaces. Farkas and Lendak used simulation to study the improvement in parking search cruise time from crowd-sensing real-time parking information in an urban environment (3). Real-time information on occupancy of parking spaces alone may not improve parking search time for drivers. For example, Tasseron et al. used simulation to understand the impact of disseminating on-street parking information using vehicle-vehicle communication and vehicle-sensor communication. They concluded that, in contrary to theoretical expectations, the cruise time for searching for parking spots does not decrease significantly and may also increase, even under occupancy rates as high as 90% to 95%. The authors link it to the more likelihood of drivers parking their cars before reaching their destinations (4). In another undesirable situation, broadcasting real-time information on parking spaces can negatively affect system performance by impacting driver behavior in unexpected ways. Wahle et al. discussed several studies on the various negative impacts of sharing real-time parking space information with too many drivers (5). Under these scenarios, our study assumes that parking policies can be used as a medium to control parking probabilities and the undesirable effects of excess information while achieving reduction in parking search times for the entire system of vehicles. Agent-based simulation models that involve parking space detection must be based on suitable route choices for probe cars in order to maximize the sensing of the parking spaces and maintain latest information. Several models in the fields of robotics and computer science have dealt with this type of path planning problem. Singh et al. proposed an efficient algorithm for the Multirobot Informative Path Planning Problem (MIPP) to generate informative paths while maximizing a sub-modular function like mutual information (6). Martinez-Cantin et al. proposed a Bayesian optimization method for a mobile robot planning its path for optimal sensing of the environment under time constraints (7). Chekuri et al. set up an \u201corienteering problem\u201d for a weighted and directed graph. Nodes of the graph are visited by a walk and the algorithm developed maximizes a submodular set function associated with the nodes visited (8). PARKING SIMULATOR BASED ON CONNECTED VEHICLES TECHNOLOGY The simulator consists of three modules, event module, routing module and scanning module, whose output are connected to a data visualizer. The event module generates consequent arrivals and departures of both probe cars and normal cars, and each car will follow the route decided by the routing module. Finally, the scanning module will be activated only for probe cars and the estimated states of parking spaces along its trip will be updated using Bayes rule. All three modules transmit their status to the visualization module simultaneously. Event Module Consequent events in the event module include arrivals and departures of probe cars (type 1 car) or normal cars (type 2 car). It is reasonable to formulate the parking arrival/departure process as a Mt/M/N/C queue as a service system, where N servers represents N parking spaces respectively, and C is the queue capacity, i.e. maximum number of cars waiting in the parking lot for next available parking space. Arrival process\u2019s intensity is \u03bb (t) as a function of time during the day, and the type of the next arriving car is randomly decided with fixed ratio \u03b3 . The arrival intensity follows a piecewise function in units of cars per hour. It is set to emulate the pattern of intra-city traffic with average rate of 120 vehicles per hour, whose intensity is much higher in early morning and late afternoon when people drive in and out for the regular work hours, and slightly higher at Wu, Balkumar and Luo et al. 4 noon when people drive during their lunch break (9). \u03bb (t) = \uf8f4\uf8f2\uf8f4\uf8f3 288 if 0\u2264 t < 1 or 8\u2264 t < 9 72 if 1\u2264 t < 3 or 7\u2264 t < 8 144 if 4\u2264 t < 6 Each arriving car will be assigned to a parking space according to a specified policy in the routing module unless the number of cars in the system n > N +C. The service completion time (time spent in the parking lot) are exponential variable with constant parameter \u03bc . First come first serve rule is applied in the queue when all parking spaces are full, and cars arrive when the queue buffer has reached the capacity will leave the system immediately. The System State (SS) variable is a vector of (N +2) dimensions. The first N elements are Boolean variable indicating the occupancy of N parking spaces accordingly. The N +1 element n represents the total number of cars in the system, and the last element c indicates the number of cars in the queue. Counter variables NA are total number of arrivals of probe cars / normal cars by time t, and ND are total number of departures by time t. By tracking these two set of variables, we are able to observe how the system evolves with time by generating a discrete event list, which can be referred in the general parallel servers queue simulations in (10). The discrete event simulation that generates an event list is presented in the pseudocode below: Algorithm 1 Event Module Variables: T T : Total time of simulation SS = (X1, \u00b7 \u00b7 \u00b7 ,XN ,n,c) Actual status of parking space i Xi = \uf8f4\uf8f2\uf8f4\uf8f3 0 if the parking space i is free 1 if the parking space i is occupied by a probe car 2 if the parking space i is occupied by a normal car Initialization: t = NA,1 = NA,2 = ND,1 = ND,2 = 0 Xi = 0, i = 1, \u00b7 \u00b7 \u00b7 ,N n = c = 0 Generate T0 and indicating variable z0. If z0 == 1, set tA,1 = T0, tA,2 = 0; else, set tA,1 = 0, tA,2 = T0. ti = \u221e, i = 1, \u00b7 \u00b7 \u00b7 ,N Start while t < T T do if tA,1==min{tA,1, tA,2, ti} then // Arrival of Probe Car t = tA,1 NA,1 = NA,1 +1 Generate Tt and reset tA,1 = tA,1 +Tt . if n < N then Assign a parking space I according to the parking policy. n = n+1 Wu, Balkumar and Luo et al. 5 (continued) SS = (0, \u00b7 \u00b7 \u00b7 ,XI = 1, \u00b7 \u00b7 \u00b7 ,0,n,c) Generate Y and reset tI = t +Y . Activate the routing and scanning models. else if n < N +C then n = n+1 c = c+1 SS = (X1, \u00b7 \u00b7 \u00b7 ,XN ,n,c) Activate the routing and scanning models. end if else if tA,2==min{tA,1, tA,2, ti} then // Arrival of Normal Car t = tA,2 NA,2 = NA,2 +1 Generate Tt and reset tA,2 = tA,2 +Tt . if n < N then Assign a parking space I according to the parking policy. n = n+1 SS = (0, \u00b7 \u00b7 \u00b7 ,XI = 2, \u00b7 \u00b7 \u00b7 ,0,n,c) Generate Y and reset tI = t +Y else if n<N+C then. n = n+1 c = c+1 SS = (X1, \u00b7 \u00b7 \u00b7 ,XN ,n,c) end if else if tI==min{tA,1, tA,2, ti}, i = 1, \u00b7 \u00b7 \u00b7 ,N then // Departure t = tI if XI == 1 then // Departure of Probe Car ND,1 = ND,1 +1 Activate the routing and scanning models. else if XI == 2 then // Departure of Normal Car ND,2 = ND,2 +1 end if XI = 0 tI = \u221e if n > N then XI = XN+1 Generate Y and reset tI = tI +Y . for i for N +1 to n\u22121 do Xi = Xi+1 end for Xn = 0 end if end if end while End Wu, Balkumar and Luo et al. 6 Routing Module One major objective of this simulation research is to find the impacts of different parking assignment policies on the service performance, which are integrated in the routing module. This module has two functions. One is to assign an available parking space to the arrived car, and the other is to generate driving routes for probe cars when they arrive or depart, which will be used in the scanning model later. For sake of simplifying workflow, the routing module should not intervene the event module as a precedent module, thus we assume that an arriving vehicle instantaneously travel to their parking locations. We evaluate four policies for assigning cars to parking spaces: Policy 1 Random assignment: both types of cars are assigned to available parking spaces randomly, which is expected to represent the average performance of the system. Policy 2 Nearest parking: both types of cars park to the available parking space closest to the entrance. This is to simulate a destination-oriented parking policy assuming the entrance is the final destination for all drivers. Policy 3 Maximum satisfaction guidance: normal cars park to the space closest to the entrance while probe cars park to the space which is estimated to be most likely empty. In other words, this is to function as the maximum exploitation policy. Policy 4 Near-optimal guidance: normal cars park to the space closest to the entrance while probe cars park to the space which will maximize information gain from scanning. In other words, this is to function as the maximum exploration policy. For generating driving routes, cars always arrive in the shortest path but there are two policies for departure routes. One is that the roads in the parking lot are two-way so cars follow the same path as they arrive. The other is that the roads are one-way so cars follow a different path when leaving. For an unregulated parking lot, the direction of cars driving in and out is always a mix of both routes so it is sufficient to research only these two extreme cases. A Near-Optimal Guide Policy (Policy 4) For each arriving car at time t, the action a(t) consists of assigning to a parking space i and choosing the route on a vertex-edge graph. In pursuance of improving the quality of parking guidance services, the principal goal is to accelerate the exploration process by distributing probe cars optimally. A very natural way to quantify the informativeness of a chosen route is mutual information, more specifically, the information gain from scanning vertex (parking spaces) of route. We only consider the posterior of each action because of the instantaneous routing assumption, thus the entropy is measured over the vertex along the route. MI(\u03c7N(t),a(t)) = H(\u03c7N(t))\u2212H(\u03c7N(t)|\u03c7a(t)). where \u03c7i, i = 1, \u00b7 \u00b7 \u00b7 ,N represents the estimated status of parking space i, whose measure is between 0 and 1. H(\u03c7N(t)) is the entropy of the all vertex, and H(\u03c7N(t)|\u03c7a(t)) is the conditional entropy by taking action a(t) representing the observed set. Thus the mutual information measures the uncertainty reduction resulting from a chosen route. Chekuri et al. shows that MI() is a submodular function, which possesses diminishing return property: the more locations already been sensed, the less information gained by sensing new locations (8). Furthermore, as the principle Wu, Balkumar and Luo et al. 7 of optimality is strictly obeyed in sequence of posterior of scanning, we can find optimal policy for each probe car by maximizing MI(\u03c7N(t),a(t)) by using direct policy search on the grounds of these facts: 1. For cases that \u03b3 < 1, i.e. a mixed arrivals of probe cars and normal cars, seeking for optimal policy becomes a NP-hard Partial Observable Markov decision process (POMDP) because the actual state Xi is only known for those occupied by probe cars. 2. The controllable objects are only probe cars, whose departure time is also a random variable since the profile of its departure path is stochastic. 3. The action space is a high-dimensional compound matrix of routing module and scanning module. Inasmuch as it is prohibitive to find an explicit optimal policy, we implement an alternative approximation method using direct policy search at each step especially in the case that the candidate policy space is relatively small. In practice of robotics path planning (6), this is proved to an efficient near-optimal policy to maximize information gain. Scanning Module The scanning module updates the estimated system state. When a probe arrives or departs, the scanning module is activated. We use recursive Bayesian updating in this module. Recursive Bayesian Updating Let \u03c7i,t be a random variable of parking space i at time t. The estimated state of parking space i at time t is X\u0302i, which is determined by X\u0302i = \uf8f4\uf8f2\uf8f4\uf8f3 0 if P(\u03c7i)< 0.4 1 if P(\u03c7i)> 0.6 null if 0.4\u2264 P(\u03c7i)\u2264 0.6 . We are only interested in cases when X\u0302i is not null. X\u0302i,t = { 0 parking space i is estimated to be empty at time t 1 parking space i is estimated to be occupied at time t . According to Bayes Theorem, P(Xi = 0|X\u0302i) = P(X\u0302i|Xi = 0)P(Xi = 0) P(X\u0302i) P(Xi 6= 0|X\u0302i) = P(X\u0302i|Xi 6= 0)P(Xi 6= 0) P(X\u0302i) P(X\u0302i) = P(X\u0302i|Xi = 0)P(Xi = 0)+P(X\u0302i|Xi 6= 0)P(Xi 6= 0). Wu, Balkumar and Luo et al. 8 After each measurement, we use Bayes Theorem to compute the posterior probability pi,t+1 that the parking space i is occupied. The likelihood data are from the field tests in previous research, we conducted field tests to test the effectiveness of radar for detecting occupancy of parking spaces (1). From this experience, we calculated the prior and likelihood data in Table 1 and Table 2. If the measurement is X\u0302i,t = 0, then TABLE 1 : Bayesian Updating for X\u0302i,t = 0 Hypothesis Prior P(Xi) Likelihood P(X\u0302i,t = 0|Xi) Unnormalized Posterior Xi 6= 0 pi,t 0.093 0.093pi,t Xi = 0 1\u2212 pi,t 0.941 0.941(1\u2212 pi,t) If the measurement is X\u0302i,t = 1, then TABLE 2 : Bayesian Updating for X\u0302i,t = 1 Hypothesis Prior P(Xi) Likelihood P(X\u0302i,t = 0|Xi) Unnormalized Posterior Xi 6= 0 pi,t 0.907 0.907pi,t Xi = 0 1\u2212 pi,t 0.059 0.059(1\u2212 pi,t) Therefore the posterior at time t +1 can be expressed as: { pi,t+1 = 0.093pi,t 0.093pi,t+0.941(1\u2212pi,t) = 0.093pi,t 0.941\u22120.848pi,t if X\u0302i,t = 0 (\u2217) pi,t+1 = 0.907pi,t 0.907pi,t+0.059(1\u2212pi,t) = 0.907pi,t 0.0589+0.848pi,t if X\u0302i,t = 1 (\u2217\u2217) . The scanning module using recursive Bayesian updating is presented in the pseudocode below: Algorithm 2 Scanning Module Variables: ES = (p1, \u00b7 \u00b7 \u00b7 , pN), in which pi represents the probability that parking space i is occupied, i = 1, \u00b7 \u00b7 \u00b7 ,N Initialization: ES = (0.5, \u00b7 \u00b7 \u00b7 ,0.5) Start for all parking spaces i scanned by a probe car do if X\u0302i == 0 then (*) else if X\u0302i == 1 then (**) end if end for if a probe car arrives and parks to parking space I then pI = 1 end if if a probe car leaves parking space I then pI = 0 end if End Wu, Balkumar and Luo et al. 9 The updating of estimated matrix \u03c7 also includes a discount factor \u03b2 since the perceived parking states will diminish to unknown status (p = 0.5) at each time step. For a parking space i that was scanned at t but not scanned during \u2206t, \u03c7i(t +\u2206t) = { 0.5+\u03b2 (\u03c7i(t)\u22120.5) if \u03c7i(t)> 0.5 0.5\u2212\u03b2 (0.5\u2212\u03c7i(t)) if \u03c7i(t)< 0.5 . Calculating the error of estimation at parking space i following this operator ei = { X\u0302i\u2295Xi if X\u0302i = 0 or 1 1 if X\u0302i = null . The total absolute error of all parking spaces is therefore", "creator": "LaTeX with hyperref package"}}}