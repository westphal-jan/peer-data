{"id": "1703.07980", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "23-Mar-2017", "title": "Discriminatively Boosted Image Clustering with Fully Convolutional Auto-Encoders", "abstract": "traditional image clustering methods increasingly take a detailed two - step classification approach, feature learning methods and hierarchical clustering, sequentially. however, recent research results demonstrated why that students combining using the formerly separated screening phases in agreeing a unified framework and training matching them further jointly can achieve a better input performance. described in this paper, theoretically we first thoughtfully introduce formally fully convolutional selective auto - enriched encoders strategies for simplified image aggregation feature learning and then propose choosing a comprehensive unified element clustering enrichment framework to learn image representations throughout and cluster centers learning jointly based on a fully scaled convolutional weighted auto - encoder and soft $ million k $ - means scores. at any initial stages of the unified learning incentive procedure, the imaging representations extracted from the completed auto - encoder portfolio may not now be specifically very positively discriminative learners for latter clustering. we address this issue by adopting such a tentatively boosted discriminative memory distribution, albeit where simultaneously high score answer assignments are highlighted and low - score option ones are de - facto emphasized. with studying the recent gradually boosted discrimination, clustering score assignment scores globally are positively discriminated gradually and cluster input purities are also enlarged. experiments centered on several vision design benchmark datasets show that our methods can efficiently achieve a state - sake of - concept the - art performance.", "histories": [["v1", "Thu, 23 Mar 2017 09:49:37 GMT  (2983kb,D)", "http://arxiv.org/abs/1703.07980v1", "27 pages"]], "COMMENTS": "27 pages", "reviews": [], "SUBJECTS": "cs.CV cs.LG", "authors": ["fengfu li", "hong qiao", "bo zhang", "xuanyang xi"], "accepted": false, "id": "1703.07980"}, "pdf": {"name": "1703.07980.pdf", "metadata": {"source": "CRF", "title": "Discriminatively Boosted Image Clustering with Fully Convolutional Auto-Encoders", "authors": ["Fengfu Li", "Hong Qiao", "Bo Zhang", "Xuanyang Xi"], "emails": [], "sections": [{"heading": null, "text": "Traditional image clustering methods take a two-step approach, feature learning and clustering, sequentially. However, recent research results demonstrated that combining the separated phases in a unified framework and training them jointly can achieve a better performance. In this paper, we first introduce fully convolutional auto-encoders for image feature learning and then propose a unified clustering framework to learn image representations and cluster centers jointly based on a fully convolutional auto-encoder and soft k-means scores. At initial stages of the learning procedure, the representations extracted from the auto-encoder may not be very discriminative for latter clustering. We address this issue by adopting a boosted discriminative distribution, where high score assignments are highlighted and low score ones are de-emphasized. With the gradually boosted discrimination, clustering assignment scores are discriminated and cluster purities are enlarged. Experiments on several vision benchmark datasets show that our methods can achieve a state-of-the-art performance.\nKeywords: image clustering, fully convolutional auto-encoder, representation learning, discriminatively boosted clustering\nPreprint submitted to Elsevier March 24, 2017\nar X\niv :1\n70 3.\n07 98\n0v 1\n[ cs"}, {"heading": "1. Introduction", "text": "Clustering methods are very important techniques for exploratory data analysis with wide applications ranging from data mining [1, 2], dimension reduction [3], segmentation [4] and so on. Their aim is to partition data points into clusters so that data in the same cluster are similar to each other while data in different clusters are dissimilar. Approaches to achieve this aim include partitional methods such as k-means and k-medoids, hierarchical methods like agglomerative clustering and divisive clustering, methods based on density estimation such as DBSCAN [5], and recent methods based on finding density peaks such as CFSFDP [6] and LDPS [7].\nImage clustering [8] is a special case of clustering analysis that seeks to find compact, object-level models from many unlabeled images. Its applications include automatic visual concept discovery [9], content-based image retrieval and image annotation. However, image clustering is a hard task mainly owning to the following two reasons: 1) images often are of high dimensionality, which will significantly affect the performance of clustering methods such as k-means [10], and 2) objects in images usually have twodimensional or three-dimensional local structures which should not be ignored when exploring the local structure information of the images.\nTo address these issues, many representation learning methods have been proposed for image feature extractions as a preprocessing step. Traditionally, various hand-crafted features such as SIFT [11], HOG [12], NMF [13], and (geometric) CW-SSIM similarity [14, 15] have been used to encode the visual information. Recently, many approaches have been proposed to combine clustering methods with deep neural networks (DNN), which have shown a remarkable performance improvement over hand-crafted features [16]. Roughly speaking, these methods can be categorized into two groups: 1) sequential methods that apply clustering on the learned DNN representations, and 2) unified approaches that jointly optimize the deep representation learning and clustering objectives.\nIn the first group, a kind of deep (convolutional) neural networks, such as deep belief network (DBN) [17] and stacked auto-encoders [18], is first trained in an unsupervised manner to approximate the non-linear feature embedding from the raw image space to the embedded feature space (usually being low-dimensional). And then, either k-means or spectral clustering or agglomerative clustering can be applied to partition the feature space. However, since the feature learning and clustering are separated from each\nother, the learned DNN features may not be reliable for clustering. There are a few recent methods in the second group which take the separation issues into consideration. In [19], the authors proposed deep embedded clustering that simultaneously learns feature representations with stacked auto-encoders and cluster assignments with soft k-means by minimizing a joint loss function. In [20], joint unsupervised learning was proposed to learn deep convolutional representations and agglomerative clustering jointly using a recurrent framework. In [21], the authors proposed an infinite ensemble clustering framework that integrates deep representation learning and ensemble clustering. The key insight behind these approaches is that good representations are beneficial for clustering and conversely clustering results can provide supervisory signals for representation learning. Thus, two factors, designing a proper representation learning model and designing a suitable unified learning objective will greatly affect the performance of these methods.\nIn this paper, we follow recent advances to propose a unified clustering method named Discriminatively Boosted Clustering (DBC) for image analysis based on fully convolutional auto-encoders (FCAE). See Fig. 1 for a glance of the overall framework. We first introduce a fully convolutional encoder-decoder network for fast and coarse image feature extraction. We then discard the decoder part and add a soft k-means model on top of the encoder to make a unified clustering model. The model is jointly trained with gradually boosted discrimination where high score assignments are highlighted and low score ones are de-emphasized. The our main contributions are summarized as follows:\n\u2022 We propose a fully convolutional auto-encoder (FCAE) for image feature learning. The FCAE is composed of convolution-type layers (convolution and de-convolution layers) and pool-type layers (pooling and un-pooling layers). By adding batch normalization (BN) layers to each of the convolution-type layers, we can train the FCAE in an end-toend way. This avoids the tedious and time-consuming layer-wise pretraining stage adopted in the traditional stacked (convolutional) autoencoders. To the best of our knowledge, this is the first attempt to learn a deep auto-encoder in an end-to-end manner.\n\u2022 We propose a discriminatively boosted clustering (DBC) framework based on the learned FCAE and an additional soft k-means model.\nWe train the DBC model in a self-paced learning procedure, where deep representations of raw images and cluster assignments are jointly learned. This overcomes the separation issue of the traditional clustering methods that use features directly learned from auto-encoders.\n\u2022 We show that the FCAE can learn better features for clustering than raw images on several image datasets include MNIST, USPS, COIL-20 and COIL-100. Besides, with discriminatively boosted learning, the FCAE based DBC can outperform several state-of-the-art analogous methods in terms of k-means and deep auto-encoder based clustering.\nThe remaining part of this paper is organized as follows. Some related work including stacked (convolutional) auto-encoders, deconvolutional neural networks, and joint feature learning and clustering are briefly reviewed in Section 2. Detailed descriptions of the proposed FCAE and DBC are presented in Section 3. Experimental results on several real datasets are given in Section 4 to validate the proposed methods. Conclusions and future works are discussed in Section 5."}, {"heading": "2. Related work", "text": "Stacked auto-encoders [22, 23, 24, 17, 25, 26] have been studied in the past years for unsupervised deep feature extraction and nonlinear dimension reduction. Their extensions for dealing with images are convolutional stacked auto-encoders [27, 28]. Most of these methods contain a two-stage training procedure [26]: one is layer-wise pre-training and the other is overall finetuning. One of the significant drawbacks of this learning procedure is that the layer-wise pre-training is time-consuming and tedious, especially when the base layer is a Restricted Boltzmann Machine (RBM) rather than a traditional auto-encoder or when the overall network is very deep.\nRecently, there is an attempt to discard the layer-wise pre-training procedure and train a deep auto-encoder type network in an end-to-end way. In [29], a deep deconvolution network is learned for image segmentation. The input of the architecture is an image and the output is a segmentation mask. The network achieves the state-of-the-art performance compared with analogous methods thanks to three factors: 1) introducing a deconvolution layer and a unpooling layer [30, 31, 32] to recover the original image size of the segmentation mask, 2) applying the batch normalization [33] to each convolution layer and each deconvolution layer to reduce the internal covariate\nshifts, which not only makes an end-to-end training procedure possible but also speeds up the process, and 3) adopting a pre-trained encoder on largescale datasets such as VGG-16 model [34]. The success of the architecture motivates us that it is possible to design an end-to-end training procedure for fully convolutional auto-encoders.\nClustering has also been studied in the past years based on independent features extracted from auto-encoders (see, e.g. [10, 18, 35, 36]). Recently, there are attempts to combine the auto-encoders and clustering in a unified framework [19, 40]. In [19], the authors proposed Deep Embedded Clustering (DEC) that learns deep representations and cluster assignments jointly. DEC uses a deep stacked auto-encoder to initialize the feature extraction model and a Kullback-Leibler divergence loss to fine-tune the unified model. In [40], the authors proposed Deep Clustering Network (DCN), a joint dimensional reduction and k-means clustering framework. The dimensional reduction model is based on deep neural networks. Although these methods have achieved some success, they are not suitable for dealing with highdimensional images due to the use of stacked auto-encoders rather than convolutional ones. This motivates us to design a unified clustering framework based on convolutional auto-encoders."}, {"heading": "3. Proposed methods", "text": "In this section, we propose a unified image clustering framework with fully convolutional auto-encoders and a soft k-means clustering model (see Fig. 1). The framework contains two parts: part I is a fully convolutional auto-encoder (FCAE) for fast and coarse image feature extraction, and part II is a discriminatively boosted clustering (DBC) method which is composed of a fully convolutional encoder and a soft k-means categorizer. The DBC takes an image as input and exports soft assignments as output. It can be jointly trained with a discriminatively boosted distribution assumption, which makes the learned deep representations more suitable for the top categorizer. Our idea is very similar to self-paces learning [9], where easiest instances are first focused and more complex objects are expanded progressively. In the following subsections, we will explain the detailed implementation of the idea."}, {"heading": "3.1. Fully convolutional auto-encoder for image feature extraction", "text": "Traditional deep convolutional auto-encoders adopt a greedy layer-wise training procedure for feature transformations. This could be tedious and time-consuming when dealing with very deep neural networks. To address this issue, we propose a fully convolutional auto-encoder architecture which can be trained in an end-to-end manner. Part I of Fig. 1 shows an example of FCAE on the MNIST dataset. It has the following features:\nFully Convolutional As pointed out in [27], the max-pooling layers are very crucial for learning biologically plausible features in the convolutional architectures. Thus, we adopt convolution layers along with max-pooling layers to make a fully convolutional encoder (FCE). Since the down-sampling operations in the FCE reduce the size of the output feature maps, we use an unpooling layer introduced in [29] to recover the feature maps. As a result, the unpooling layers along with deconvolution layers (see [29]) are adopted to make a fully convolutional decoder (FCD).\nSymmetric The overall architecture is symmetric around the feature layer. In practice, it is suggested to design layers of an odd number. Otherwise, it will be ambiguous to define the feature layer. Besides, fully\nconnected layers (dense layers) should be avoided in the architecture since they destroy the local structure of the feature layer.\nNormalized The depth of the whole network grows in log-magnitude as the input image size increases. This could make the network very deep if the original image has a very large width or height. To overcome this problem, we adopt the batch normalization (BN) [33] strategy for reducing the internal covariate shift and speeding up the training. The BN operation is performed after each convolutional layer and each deconvolutional layer except for the last output layer. As pointed out in [29], BN is critical to optimize the fully convolutional neural networks.\nFCAE utilizes the two-dimensional local structure of the input images and reduces the redundancy in parameters compared with stacked auto-encoders (SAEs). Besides, FCAE differs from conventional SAEs as its weights are shared among all locations within each feature map and thus preserves the spatial locality."}, {"heading": "3.2. Discriminatively boosted clustering", "text": "Once FCAE has been trained, we can extract features with the encoder part to serve as the input of a categorizer. This strategy is used in many clustering methods based on auto-encoders, such as GraphEncoder [18], deep embedding networks [35], and auto-encoder based clustering [36]. These approaches treat the auto-encoder as a preprocessing step which is separately designed from the latter clustering step. However, the representations learned in this way could be amphibolous for clustering, and the clusters may be unclear (see the initial stage in Fig. 2)).\nTo address this issue, we propose a self-paced approach to make feature learning and clustering in a unified framework (see Part II in Fig. 1). We throw away the decoder of the FACE and add a soft k-means model on top of the feature layer. To train the unified model, we trust easier samples first and then gradually utilize new samples with the increasing complexity. Here, an easier sample (see the regions labelled 2, 3 and 4 in Fig. 2) is much certain to belong to a specific cluster, and a harder sample (see the region 1 in Fig. 2) is very likely to be categorized to multiple clusters. Fig. 2 describes the difference between these samples at a different learning stage of DBC.\nThere are three challenging questions in the learning problem of DBC which will be answered in the following subsections:\n1. How to choose a proper criterion to determine the easiness or hardness of a sample?\n2. How to transform harder samples into easier ones?\n3. How to learn from easier samples?\n3.2.1. Easiness measurement with the soft k-means scores\nWe follow DEC [19] to adopt the t-distribution-based soft assignment to measure the easiness of a sample. The t-distribution is investigated in [37] to deal with the crowding problem of low-dimensional data distributions. Under the t-distribution kernel, the soft score (or similarity) between the feature zi (i \u2208 1, 2, . . . ,m) and the cluster center \u00b5j (j \u2208 1, 2, . . . , k) is\nsij \u221d ( 1 + ||zi \u2212 \u00b5j||2\nv\n)\u2212 v+1 2 (1)\ns.t. k\u2211 j=1 sij = 1\nHere, v is the degree of freedom of the t-distribution and set to be 1 in practice. The most important reason for choosing the t-distribution kernel is that it has a longer tail than the famous heat kernel (or the Gaussiandistribution kernel). Thus, we do not need to pay much attention to the parameter estimation (see [37]), which is a hard task in unsupervised learning."}, {"heading": "3.2.2. Boosting easiness with discriminative target distribution", "text": "We transform the harder examples to the easier ones by boosting the higher score assignments and, meanwhile, bring down those with lower scores. This can be achieved by constructing an underlying target distribution rij\nfrom sij as follows:\nrij \u221d s\u03b1ij, \u03b1 > 1 (2)\ns.t. k\u2211 j=1 rij = 1\nSuppose we can ideally learn from the soft scores (denoted as S) to the assumptive distribution (denoted as R) each time. Then we can generate a learning chain as follows:\nS(0) \u2192 R(0) = S(1) \u2192 R(1) = S(2) \u2192 \u00b7 \u00b7 \u00b7 .\nThe following two properties can be observed from the chain: Property 1 If s\n(0) ij = s (0) ij\u2032 for any j and j \u2032, then s (t) ij \u2261 1/k for all j and\nall time step t. Proof Under the condition, and by (2) we can deduce that r\n(0) ij \u2261 r (0) ij\u2032 . By\nthe chain this is equivalent to the fact that s (1) ij \u2261 s (1) ij\u2032 . Thus, the conclusion s (t) ij \u2261 s (t) ij\u2032 follows recursively for all t.\nProperty 2 If there exists an l such that s (0) il > max j 6=l s (0) ij , then\nlimit t\u2192\u221e\ns (t) ij =\n{ 1 if j = l\n0 if j 6= l\nProof By (2) we have\ns (t) ij s (t) il = [s(t\u22121)ij s (t\u22121) il ]\u03b1 = [s(t\u22122)ij s (t\u22122) il ]\u03b12 = \u00b7 \u00b7 \u00b7 = [s(0)ij s (0) il ]\u03b1t .\nBy the assumption s (0) il > max j 6=l s (0) ij , it is seen that s (0) ij /s (0) il < 1 for any j 6= l. On the other hand, since \u03b1 > 1, we have limit t\u2192\u221e \u03b1t =\u221e. Thus,\nlimit t\u2192\u221e\ns (t) ij s (t) il = limit \u03b1t\u2192\u221e [s(0)ij s (0) il ]\u03b1t = 0, \u2200j 6= l.\nSince s (t) il is finite, we have limitt\u2192\u221e s (t) ij = 0, \u2200j 6= l. Finally, with the constrains\u2211k\nj=1 s (t) ij = 1, we obtain\nlimit t\u2192\u221e\ns (t) il = 1\u2212 \u2211 j 6=l limit t\u2192\u221e s (t) ij = 1.\nProperty 1 tells us that the hardest sample (which has the equal probability to be assigned to different clusters) would always be the hardest one. However, in practical applications, there can hardly exist such examples. Property 2 shows that the initial non-discriminative samples could be boosted gradually to be definitely discriminative. As a result, we get the desired features for k-means clustering.\nNote that the boosting factor \u03b1 controls the speed of the learning process. A larger \u03b1 can make the learning process more quickly than smaller ones. However, it may boost some falsely categorized samples too quickly at initial stages and thus makes their features irrecoverable at later stages.\nBesides, it can be helpful to balance the data distribution at different learning stages. In [19], the authors proposed to normalize the boosted assignments to prevent large clusters from distorting the hidden feature space. This problem can be overcome by dividing a normalization factor nj = \u2211m i=1 rij for each of the rij."}, {"heading": "3.2.3. Learning with the Kullback-Leibler divergence loss", "text": "In the last subsection, it was assumed that we could learn from sij to the boosted target distribution rij. This aim can be achieved with a joint Kullback-Leibler (KL) divergence loss, that is,\n(\u03b8\u2217, \u00b5\u2217) = arg min \u03b8, \u00b5 L = KL(R||S) = m\u2211 i=1 k\u2211 j=1 rij log rij sij . (3)\nFig. 3 gives an example of the joint loss when k = 2, where Lij = rij log(rij/sij) is the loss generated by the sample xi with respect to the jth cluster (j = 1 or 2). Regions marked in Fig. 3 roughly correspond to the regions marked in Fig. 2.\nIntuitively, the loss has the following main features: \u2022 For an ambiguous (or hard) sample (i.e., sij \u2248 sil,\u2200j, l), its loss Li =\u2211k j=1 rij log(rij/sij) \u2248 0 according to Property 1. Therefore, it will\nnot be seriously treated in the learning process. (Region 1)\n\u2022 For a good categorized sample (i.e., there exists an l such that 1 sil > maxj 6=l sij), its loss will be much greater than zero, and thus it will be treated more seriously. (Regions 2 and 3)\n\u2022 For a definitely well categorized sample (i.e., there exists an l such that 1 \u2248 sil maxj 6=l sij), its loss will be near zero. This means that its features do not need to be changed much more. (Region 4)\nBy (1)-(3), the gradients of the KL divergence loss w.r.t. zi and \u00b5j can be deduced as follows:\n\u2202L \u2202zi = 1 + v v k\u2211 j=1 (rij \u2212 sij) zi \u2212 \u00b5j 1 + ||zi \u2212 \u00b5j||2/v (4)\nand\n\u2202L \u2202\u00b5j = 1 + v v m\u2211 i=1 (rij \u2212 sij) \u00b5j \u2212 zi 1 + ||\u00b5j \u2212 zi||2/v (5)\nThe derivation of (4) and (5) can be found in the appendix."}, {"heading": "3.2.4. Training algorithm", "text": "In this section, we summarize the overall training procedure of the proposed method in Algorithm 1 and Algorithm 2. They implement the framework showed in Fig. 1. Here T is the maximum learning epochs, B is the maximum updating iterations in each epoch and mb is the mini-batch size. The encoder part of FCAE is f : x \u2192 z, which is parameterized by \u03b8e and the decoder part of FCAE is g: z \u2192 x\u0302, which is parameterized by \u03b8d.\nAlgorithm 1 Discriminatively Boosted Clustering (DBC)\nRequire: X, T , B, mb, \u03b1, k Ensure: \u03b8 and \u00b5\n//Stage I: Train a FCAE and clustering with its features 1: Train a deep fully convolutional auto-encoder\nxi \u03b8e\u2212\u2192 zi(features) \u03b8d\u2212\u2192 x\u0302i (M1)\nwith the Euclidian loss\n(\u03b8\u2217e , \u03b8 \u2217 d) = arg min\n\u03b8e, \u03b8d m\u2211 i=1 ||xi \u2212 x\u0302i||22 = m\u2211 i=1 ||xi \u2212 g\u03b8d(f\u03b8e(xi))||22\nby using the traditional error back-propagation algorithm. 2: Extract features: Z \u2190 f\u03b8\u2217e (X) 3: Clustering with the features: \u00b5z \u2190 k-means centers"}, {"heading": "4. Experiments", "text": "In this section, we present experimental results on several real datasets to evaluate the proposed methods by comparing with several state-of-the-art methods. To this end, we first introduce several evaluation benchmarks and then present visualization results of the inner features, the learned FCAE weights, the frequency hist of soft assignments during the learning process and the features embedded in a low-dimensional space. We will also give some ablation studies with respect to the boosting factor \u03b1, the normalization factor nj and the FCAE initializations."}, {"heading": "4.1. Evaluation benchmarks", "text": "Datasets We evaluate the proposed FCAE and DBC methods on two hand-written digit image datasets (MNIST 1 and USPS 2) and two multi-view object image datasets (COIL-20 3 and COIL-100 4). The size of the datasets,\n1http://yann.lecun.com/exdb/mnist/ 2http://www.cs.nyu.edu/ roweis/data.html 3http://www.cs.columbia.edu/CAVE/software/softlib/coil-20.php 4http://www.cs.columbia.edu/CAVE/software/softlib/coil-100.php\nAlgorithm 2 DBC (Continued)\n//Stage II: Jointly learn the FCE and cluster centers 4: Construct a unified clustering model with encoder parameters \u03b8 and clus-\nter centers \u00b5\nxi \u03b8\u2212\u2192 zi \u00b5j\u2212\u2192 sij (M2)\n5: Initialization: \u03b8 \u2190 \u03b8\u2217e , \u00b5\u2190 \u00b5z 6: for t = 1 to T do 7: Forward propagate (M2) and update the soft assignments\nsij \u2190 (1 + ||zi \u2212 \u00b5j||2)\u22121\u2211k j=1(1 + ||zi \u2212 \u00b5j||2)\u22121 , where zi = f\u03b8(xi).\n8: Update the target distribution\nrij \u2190 s\u03b1ij/nj\u2211k j=1 s \u03b1 ij/nj , where nj = m\u2211 i=1 s\u03b1ij.\n9: for b = 1 to B do 10: Forward propagate (M2) with a mini-batch of mb samples. 11: Backward propagate (M2) from (4) and (5) to get \u2202L/\u2202\u03b8 and\n\u2202L/\u2202\u00b5. 12: Update \u03b8 and \u00b5 with the gradients. 13: end for 14: Stop if hard assignments remain unchanged. 15: end for\nthe number of categories, the image sizes and the number of channels are summarized in Table 1.\nEvaluation metrics Two standard metrics are used to evaluate the experiment results explained as follows.\n\u2022 Accuracy (ACC) [19]. Given the ground truth labels {ci|1 \u2264 i \u2264 m} and the predicted assignments {c\u0302i|1 \u2264 i \u2264 m}, ACC measures the average accuracy:\nACC(c\u0302, c) = max g\n1\nm m\u2211 i=1 1{ci = g(c\u0302i)}\nwhere g ranges over all possible one-to-one mappings between the labels of the predicted clusters and the ground truth labels. The optimal mapping can be efficiently computed using the Hungarian algorithm [38].\n\u2022 Normalized mutual information (NMI) [39]. From the information theory point of view NMI can be interpreted as\nNMI(c\u0302, c) = MI(c\u0302, c)\nmax(H(c\u0302),H(c))\nwhere H(c) is the entropy of c and NMI(c\u0302, c) is the mutual information of c\u0302 and c.\nNetwork architectures Table 2 shows the network architecture of the encoder parts with respect to different datasets. The decoder parts are totally reversed by the encoder parts. We use max-pooling in all the experiments. The size of all the feature layers is 1\u00d7 1. No padding is used in the convolutional layers except for the USPS dataset whose padding size is 1.\nThe comparing methods To validate the effectiveness of FCAE and DBC, we compare them with the following state-of-the-art methods in terms of the k-means and deep auto-encoders based clustering.\n\u2022 KMS is the baseline method that applies the k-means algorithm on raw images.\n\u2022 DAE-KMS [19] uses deep auto-encoders for feature extraction and then applies k-means for later clustering.\n\u2022 AEC [36] is a variant of DAE-KMS that simultaneously optimizes the data reconstruction error and representation compactness.\nResults and analysis Table 3 summarizes the benchmark results on the MNIST dataset. The k-means method performs badly on raw images. However, based on the end-to-end trained FACE features, k-means can achieve comparative results compared with DAE-KMS which uses greedily layerwise trained deep auto-encoder features. Moreover, with an additional joint training, DBC outperforms FCAE-KMS and beats all the other comparing methods in terms of ACC and NMI.\nTables 4-6 show the benchmarks on USPS, COIL-20 and COIL-100, respectively. Similarly to the observations on the MNIST hand-writeen digits dataset, DBC outperforms FCAE-KMS by a large margin on the USPS handwritten digits dataset. On the COIL sets, DBC obtained a little better results than FCAE-KMS did.\nOn the hand-written digits datasets, the number of samples is much larger than the number of categories. This results in the distribution of the FCAE features to be closely related, and lots of ambiguous samples may occur. As a result, discriminatively boosting makes sense on these datasets. Thus, there is no doubt that DBC performs much better than FCAE-KMS. On the COIL sets, DBC takes little advantage of the discriminatively boosting procedure since the FCAE features are very helpful for clustering. Thus, there are very few ambiguous samples whose easiness needs to be boosted."}, {"heading": "4.2. Visualization", "text": "One of the advantages of fully convolutional neural networks is that we can naturally visualize the inner activations (or features) and the trained weights (or filters) in a two-dimensional space [27]. Besides, we can monitor the learning process of DBC by drawing frequency hists of assignment scores. In addition, t-SNE can be applied to the embedded features to visualize the manifold structures in a low-dimensional space. Finally, we show some typical falsely categorized samples generated by our algorithm."}, {"heading": "4.2.1. Visualization of the inner activations and learned filters", "text": "In Fig. 4, we visualize the inner activations of FCAE on the MNIST dataset with three digits: 1, 5, and 9. As shown in the figure, the activations in the feature layer are very sparse. Besides, the deconvolutional layer gradually recovers details of the pooled feature maps and finally gives a rough description of the original image. This indicates that FCAE can learn clustering-friendly features and keep the key information for image reconstruction.\nFig. 5 visualizes the learned filters of FCAE on the MNIST dataset. It is observed in [27] that the stacked convolutional auto-encoders trained on noisy inputs (30% binomial noise) and a max-pooling layer can learn localized biologically plausible filters. However, even without adding noise, the learned deconvolutional filters in our architectures are non-trivial Gabor-like filters which are visually the nicest shapes. This is due to the use of max-pooling and unpooling operations. As discussed in [27], the max-pooling layers are elegant way of enforcing sparse codes which are required to deal with the over-complete representations of convolutional architectures."}, {"heading": "4.2.2. Monitoring the learning process", "text": "We use frequency hist of the soft assignment scores to monitor the learning process of DBC. Fig. 6 shows the hists of scores on the MNIST test dataset\n(a subset of the MNIST dataset with 10000 samples). The scores are assigned to the first cluster at different learning epochs. At early epochs (t \u2264 4), most of the scores are near 0.1. This is a random guess probability because there are 10 clusters. As the learning procedure goes on, some higher score samples are discriminatively boosted and their scores become larger than others. As a result, the cluster tends to \u201cbelieve\u201d in these higher score samples and consequently make scores of the others to be smaller (approximating zero). Finally, the scores assigned to the cluster become two-side polarized. Samples with very high scores (sij \u2248 0.8) are thought to definitely belong to the first cluster and the others with very small scores (sij \u2248 0.02) should belong to other clusters."}, {"heading": "4.2.3. Embedding learned features in a low dimensional space", "text": "We visualize the distribution of the learned features in a two-dimensional space with t-SNE [37]. Fig. 7 shows the embedded features of the MNIST test dataset at different epochs. At the initial epoch, the features learned\nwith FCAE are not very discriminative for clustering. As shown in Fig. 7(a), the features of digits 3, 5, and 8 are closely related. The same thing happened with digits 4, 7, and 9. At the second epoch, the distribution of the learned features becomes much compact locally. Besides, the features of digit 7 become far away from those of digits 4 and 9. Similarly, the features of digit 8 get far away from those of digits 3 and 5. As the learning procedure goes on, the hardest digits (4 v.s. 9, 3 v.s. 5) for categorization are mostly well categorized after enough discriminative boosting epochs. The observation is consistent with the results showed in Subsection 4.2.2."}, {"heading": "4.2.4. Visualization of falsely categorized examples", "text": "In Fig. 8, we show the top 100 falsely categorized examples whose maximum soft assignment scores are over 0.6. It can be observed that it is very hard to distinguish between some ground truth digits 4, 7 and 9 even with\nhuman experience. Lots of digits 7 are written with transverse lines in their middle space and would be thought to be ambiguous for the clustering algorithm. Besides, some ground truth images are themselves confusing, such as those showed with the gray background."}, {"heading": "4.3. Discussions", "text": "In this section, we make some ablation studies on the learning process with respect to different boosting factors (\u03b1), different normalization methods (nj) and different initialization models generated by FCAE."}, {"heading": "4.3.1. Impact of the boosting factor \u03b1", "text": "Fig. 9(a) shows the ACC and NMI curves, where \u03b1 equals to 1.5, 2, 4. With a small \u03b1 (\u03b1 = 1.5), the learning process is very slow and takes very long time to terminate. On the contrary, when the factor is set to be very large (\u03b1 = 4), the learning process is very fast at the initial stages. However,\nthis could result in falsely boosting some scores of the ambiguous samples. As a consequence, the model learned too much from some false information so the performance is not so satisfactory. With a moderate boosting factor (\u03b1 = 2), the ACC and NMI curves grow reasonably and progressively."}, {"heading": "4.3.2. Impact of the balance normalization", "text": "In DEC [19], the authors pointed out that the balance normalization plays an important role in preventing large clusters from distorting the hidden feature space. To address this issue, we compare three normalization strategies: 1) the constant normalization for comparison, that is, nj = 1, 2) the normalization by dividing the sum of the original soft assignment score per cluster, that is, nj = \u2211 i sij, which is adopted in DEC, and 3) the normalization by dividing the sum of the boosted soft assignment score per cluster, that is, nj = \u2211 i s \u03b1 ij. Fig. 9(b) presents the value curves of ACC and NMI against the epoch with these settings. Initially, the normalization does not affect ACC and NMI very much. However, the constant normalization can easily get stuck at early stages. The normalization by dividing nj = \u2211 i sij has certain power of preventing the distortion. Our normalization strategy gives the best performance compared with the previous methods. This is because our normalization directly reflects the changes of the boosted scores."}, {"heading": "4.3.3. Impact of the FCAE initialization", "text": "To investigate the impact of the FCAE initialization on DBC, we compare the performance of DBC with three different initialization models: 1) the random initialization, 2) the initialization with a half-trained FCAE model, and 3) the initialization with a sufficiently trained FCAE model. The comparison results are shown in Fig. 9(c). As illustrated in the figure, DBC performs greatly based on all the models even when the initialization model is randomly distributed. However, if the FCAE model is not sufficiently trained, the resultant DBC model will be suboptimal."}, {"heading": "5. Conclusions and future works", "text": "In this paper, we proposed FCAE and DBC to deal with image representation learning and image clustering, respectively. Benchmarks on several visual datasets show that our methods can achieve superior performance than the analogous methods. Besides, the visualization shows that the proposed learning algorithm can implement the idea proposed in Section 3.2. Some\nissues to be considered in the future include: 1) adding suitable constraints on FCAE to deal with natural images, and 2) scaling the algorithm to deal with large-scale datasets such as the ImageNet dataset."}, {"heading": "Acknowledgement", "text": "This work was supported in part by NNSF of China under grants 61379093, 61602483 and 61603389. We thank Shuguang Ding, Xuanyang Xi, Lu Qi and Yanfeng Lu for valuable discussions.\nAppendix"}, {"heading": "A. Derivation of (4).", "text": "We use the chain rule for the deduction. First, we set\nuij = 1 + ||zi \u2212 \u00b5j||2\nv . (.1)\nThen it follows that \u2202uij \u2202zi = 2 v (zi \u2212 \u00b5j). (.2)\nNow set\nqij = u \u2212 1+v 2 ij , (.3)\nso\n\u2202qij \u2202zi = \u2202qij \u2202uij \u00b7 \u2202uij \u2202zi\n= (\u22121 + v 2 )u \u2212 3+v 2 ij \u00b7 2 v (zi \u2212 \u00b5j) = (\u22121 + v v )u\u22121ij qij \u00b7 (zi \u2212 \u00b5j). (.4)\nFurther, let\nsij = qij\u2211 j\u2032 qij\u2032 . (.5)\nThen we have\n\u2202sij \u2202zi =\n\u2202qij \u2202zi \u00b7 \u2211 j\u2032 qij\u2032 \u2212 qij \u00b7 \u2211 j\u2032 \u2202qij\u2032 \u2202zi\n( \u2211\nj\u2032 qij\u2032) 2\n= (\u22121+v v )u\u22121ij qij \u00b7 (zi \u2212 \u00b5j) \u00b7\n\u2211 j\u2032 qij\u2032 \u2212 qij \u00b7 \u2211 j\u2032(\u2212 1+v v\n)u\u22121ij\u2032 qij\u2032 \u00b7 (zi \u2212 \u00b5j\u2032) ( \u2211\nj\u2032 qij\u2032) 2\n= (\u22121 + v v ) qij\u2211 j\u2032 qij\u2032\nu\u22121ij \u00b7 (zi \u2212 \u00b5j) \u00b7 \u2211 j\u2032 qij\u2032 \u2212 \u2211\nj\u2032 u \u22121 ij\u2032 qij\u2032 \u00b7 (zi \u2212 \u00b5j\u2032)\u2211\nj\u2032 qij\u2032\n= (\u22121 + v v )sij(u \u22121 ij \u00b7 (zi \u2212 \u00b5j)\u2212 \u2211 j\u2032 u\u22121ij\u2032 sij\u2032 \u00b7 (zi \u2212 \u00b5j\u2032)). (.6)\nCombine the above expressions to get the required result\n\u2202L \u2202zi = \u2212 \u2211 j rij sij \u00b7 \u2202sij \u2202zi\n(.7)\n= 1 + v\nv \u2211 j rij \u2212 sij uij (zi \u2212 \u00b5j)\n= 1 + v\nv \u2211 j (rij \u2212 sij) zi \u2212 \u00b5j 1 + ||zi \u2212 \u00b5j||2/v (.8)"}, {"heading": "B. Derivation of (5).", "text": "(5) can be derived similarly by exchanging \u00b5 and z in the above derivations of (4)."}], "references": [{"title": "Data Mining: Concepts and Techniques", "author": ["J. Han", "J. Pei", "M. Kamber"], "venue": "Elsevier,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2011}, {"title": "A survey of clustering data mining techniques", "author": ["P. Berkhin"], "venue": "In: Grouping Multidimensional Data, pp. 25-71,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2006}, {"title": "Randomized dimensionality reduction for k-means clustering", "author": ["C. Boutsidis", "A. Zouzias", "M. Mahaoney", "P. Drineas"], "venue": "IEEE Transactions on Information Theory, vol. 61, no. 2, pp. 1045-1062,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2015}, {"title": "Normalized cuts and image segmentation", "author": ["J. Shi", "J. Malik"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 22, no. 8, pp. 888-905,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2000}, {"title": "A density-based algorithm for discovering clusters in large spatial databases with noise", "author": ["M. Ester", "H.P. Kriegel", "J. Sander", "X. Xu"], "venue": "KDD, vol. 96, no. 34, pp. 226-231,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1996}, {"title": "Clustering by fast search and find of density peaks", "author": ["A. Rodriguez", "A. Laio"], "venue": "Science, vol. 344, no. 6191, pp. 1492-1496,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2014}, {"title": "Effective deterministic initialization for kmeans-like methods via local density peaks searching", "author": ["F. Li", "H. Qiao", "B. Zhang"], "venue": "arXiv:1611.06777,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2016}, {"title": "Recent review on image clustering", "author": ["N. Ahmed"], "venue": "IET Image Processing, vol. 9, no. 11, pp. 1020-1032,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2015}, {"title": "Learning the easy things first: Self-paced visual category discovery", "author": ["Y.J. Lee", "K. Grauman"], "venue": "IEEE Conference on CVPR, pp. 1721-1728,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "Adaptive dimension reduction using discriminant analysis and k-means clustering", "author": ["C. Ding", "T. Li"], "venue": "Proc. 24th International Conference on Machine learning, pp. 521-528,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2007}, {"title": "Object recognition from local scale-invariant features", "author": ["D. Lowe"], "venue": "Proc. 7th International Conference on Computer Vision, vol. 2, pp. 1150-1157,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1999}, {"title": "Histograms of oriented gradients for human detection", "author": ["N. Dalal", "B. Triggs"], "venue": "Proc. Computer Vision and Pattern Recognition, vol. 1, pp. 886-893,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2005}, {"title": "Joint image clustering and labeling by matrix factorization", "author": ["S. Hong", "J. Choi", "J. Feyereisl", "B. Han", "L.S. Davis"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 38, no. 7, pp. 1411-1424,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "Complex wavelet structural similarity: A new image similarity index", "author": ["M. Sampat", "Z. Wang", "S. Gupta", "A. Bovik", "M. Markey"], "venue": "IEEE Transactions on Image Processing, vol. 18, no. 1, pp. 2385-2401,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2009}, {"title": "A new manifold distance for visual object categorization", "author": ["F. Li", "X. Huang", "H. Qiao", "B. Zhang"], "venue": "The 12th World Congress on Intelligent Control and Automation, pp. 2232-2236,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2016}, {"title": "ImageNet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G. Hinton"], "venue": "Advanced Neural Information Processing Systems, vol. 24, pp. 1097-1105,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2012}, {"title": "A fast learning algorithm for deep belief nets", "author": ["G. Hinton", "S. Osindero", "Y. Teh"], "venue": "Neural Computation, vol. 18, no. 7, pp. 1527-1554,", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2006}, {"title": "Learning deep representations for graph clustering", "author": ["F. Tian", "B. Gao", "Q. Cui", "E. Chen", "T. Liu"], "venue": "AAAI, pp. 1293-1299,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2014}, {"title": "Unsupervised deep embedding for clustering analysis", "author": ["J. Xie", "R. Girshick", "A. Farhadi"], "venue": "Proc. 33rd International Conference on Machine Learning, pp. 478-487,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2016}, {"title": "Joint unsupervised learning of deep representations and image clusters", "author": ["J. Yang", "D. Parikh", "D. Batra"], "venue": "Proc. IEEE Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2016}, {"title": "Infinite ensemble for image clustering", "author": ["H. Liu", "M. Shao", "S. Li", "Y. Fu"], "venue": "Proc. 8th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD), pp. 1745-1754,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2016}, {"title": "Stacked denoising auto-encoders: Learning useful representations in a deep network with a local denoising criterion", "author": ["P. Vincent", "H. Larochelle", "I. Lajoie", "Y. Bengio", "P. Manzagol"], "venue": "Journal of Machine Learning Research, vol. 11, pp. 3371-3408, Dec.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2010}, {"title": "Autoencoders, unsupervised learning, and deep architectures", "author": ["P. Baldi"], "venue": "ICML Workshop on Unsupervised and Transfer Learning, vol. 27, pp. 37-50,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2012}, {"title": "Representation learning: A review and new perspectives", "author": ["Y. Bengio", "A. Courville", "P. Vincent"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 35, no. 8, pp. 1789-1828,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2013}, {"title": "Reducing the dimensionality of data with neural networks", "author": ["G. Hinton", "R. Salakhutdinov"], "venue": "Science, vol. 313, no. 5786, pp. 504-507,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2006}, {"title": "Greedy layer-wise training of deep networks", "author": ["Y. Bengio", "P. Lamblin", "D. Popovici", "H. Larochelle"], "venue": "Advances in Neural Information Processing Systems, vol. 19, pp. 153,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2007}, {"title": "Stacked convolutional auto-encoders for hierarchical feature extraction", "author": ["J. Masci", "U. Meier", "D. ciresan", "J. Schmidhuber"], "venue": "International Conference on Artificial Neural Networks,", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2011}, {"title": "Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations", "author": ["H. Lee", "R. Grosse", "R. Ranganath", "A. Ng"], "venue": "Proc. 26th Annual International Conference on Machine Learning, pp. 609-616,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2009}, {"title": "Learning deconvolution network for semantic segmentation", "author": ["H. Noh", "S. Hong", "B. Han"], "venue": "Proc. IEEE International Conference on Computer Vision, pp. 1520-1528,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2015}, {"title": "Visualizing and understanding convolutional networks", "author": ["M. Zeiler", "R. Fergus"], "venue": "European Conference on Computer Vision, pp. 818-833,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep deconvolutional networks for scene parsing", "author": ["R. Mohan"], "venue": "arXiv:1411.4101,", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2014}, {"title": "Adaptive deconvolutional networks for mid and high level feature learning", "author": ["M. Zeiler", "G. Taylor", "R. Fergus"], "venue": "2011 International Conference on Computer Vision, pp. 2018-2025,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2011}, {"title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "author": ["S. Ioffe", "C. Szegedy"], "venue": "arXiv:1502.03167,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2015}, {"title": "Very deep convolutional networks for largescale image recognition", "author": ["K. Simonyan", "A. Zisserman"], "venue": "arXiv:1409.1556,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2014}, {"title": "Deep embedding network for clustering", "author": ["P. Huang", "Y. Huang", "W. Wang", "L. Wang"], "venue": "ICPR, pp. 1532-1537,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2014}, {"title": "Auto-encoder based data clustering", "author": ["C. Song", "F. Liu", "Y. Huang"], "venue": "Iberoamerican Congress on Pattern Recognition,", "citeRegEx": "36", "shortCiteRegEx": "36", "year": 2013}, {"title": "Visualizing data using t-SNE", "author": ["L. Maaten", "G. Hinton"], "venue": "Journal of Machine Learning Research, vol. 9, pp. 2579-2605,", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2008}, {"title": "The Hungarian method for the assignment problem", "author": ["H. Kuhn"], "venue": "50 Years of Integer Programming 1958-2008, pp. 29-47,", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2010}, {"title": "Locally consistent concept factorization for document clustering", "author": ["D. Cai", "X. He", "J. Han"], "venue": "IEEE Transactions on Knowledge and Data Engineering, vol. 23, no. 6, pp. 902-913,", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2011}, {"title": "Towards kmeans-friendly spaces: simultaneous deep learning and clustering", "author": ["B. Yang", "X. Fu", "ND Sidiropoulos", "M Hong"], "venue": "arXiv:1610.04794,", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "Clustering methods are very important techniques for exploratory data analysis with wide applications ranging from data mining [1, 2], dimension reduction [3], segmentation [4] and so on.", "startOffset": 127, "endOffset": 133}, {"referenceID": 1, "context": "Clustering methods are very important techniques for exploratory data analysis with wide applications ranging from data mining [1, 2], dimension reduction [3], segmentation [4] and so on.", "startOffset": 127, "endOffset": 133}, {"referenceID": 2, "context": "Clustering methods are very important techniques for exploratory data analysis with wide applications ranging from data mining [1, 2], dimension reduction [3], segmentation [4] and so on.", "startOffset": 155, "endOffset": 158}, {"referenceID": 3, "context": "Clustering methods are very important techniques for exploratory data analysis with wide applications ranging from data mining [1, 2], dimension reduction [3], segmentation [4] and so on.", "startOffset": 173, "endOffset": 176}, {"referenceID": 4, "context": "Approaches to achieve this aim include partitional methods such as k-means and k-medoids, hierarchical methods like agglomerative clustering and divisive clustering, methods based on density estimation such as DBSCAN [5], and recent methods based on finding density peaks such as CFSFDP [6] and LDPS [7].", "startOffset": 217, "endOffset": 220}, {"referenceID": 5, "context": "Approaches to achieve this aim include partitional methods such as k-means and k-medoids, hierarchical methods like agglomerative clustering and divisive clustering, methods based on density estimation such as DBSCAN [5], and recent methods based on finding density peaks such as CFSFDP [6] and LDPS [7].", "startOffset": 287, "endOffset": 290}, {"referenceID": 6, "context": "Approaches to achieve this aim include partitional methods such as k-means and k-medoids, hierarchical methods like agglomerative clustering and divisive clustering, methods based on density estimation such as DBSCAN [5], and recent methods based on finding density peaks such as CFSFDP [6] and LDPS [7].", "startOffset": 300, "endOffset": 303}, {"referenceID": 7, "context": "Image clustering [8] is a special case of clustering analysis that seeks to find compact, object-level models from many unlabeled images.", "startOffset": 17, "endOffset": 20}, {"referenceID": 8, "context": "Its applications include automatic visual concept discovery [9], content-based image retrieval and image annotation.", "startOffset": 60, "endOffset": 63}, {"referenceID": 9, "context": "However, image clustering is a hard task mainly owning to the following two reasons: 1) images often are of high dimensionality, which will significantly affect the performance of clustering methods such as k-means [10], and 2) objects in images usually have twodimensional or three-dimensional local structures which should not be ignored when exploring the local structure information of the images.", "startOffset": 215, "endOffset": 219}, {"referenceID": 10, "context": "Traditionally, various hand-crafted features such as SIFT [11], HOG [12], NMF [13], and (geometric) CW-SSIM similarity [14, 15] have been used to encode the visual information.", "startOffset": 58, "endOffset": 62}, {"referenceID": 11, "context": "Traditionally, various hand-crafted features such as SIFT [11], HOG [12], NMF [13], and (geometric) CW-SSIM similarity [14, 15] have been used to encode the visual information.", "startOffset": 68, "endOffset": 72}, {"referenceID": 12, "context": "Traditionally, various hand-crafted features such as SIFT [11], HOG [12], NMF [13], and (geometric) CW-SSIM similarity [14, 15] have been used to encode the visual information.", "startOffset": 78, "endOffset": 82}, {"referenceID": 13, "context": "Traditionally, various hand-crafted features such as SIFT [11], HOG [12], NMF [13], and (geometric) CW-SSIM similarity [14, 15] have been used to encode the visual information.", "startOffset": 119, "endOffset": 127}, {"referenceID": 14, "context": "Traditionally, various hand-crafted features such as SIFT [11], HOG [12], NMF [13], and (geometric) CW-SSIM similarity [14, 15] have been used to encode the visual information.", "startOffset": 119, "endOffset": 127}, {"referenceID": 15, "context": "Recently, many approaches have been proposed to combine clustering methods with deep neural networks (DNN), which have shown a remarkable performance improvement over hand-crafted features [16].", "startOffset": 189, "endOffset": 193}, {"referenceID": 16, "context": "In the first group, a kind of deep (convolutional) neural networks, such as deep belief network (DBN) [17] and stacked auto-encoders [18], is first trained in an unsupervised manner to approximate the non-linear feature embedding from the raw image space to the embedded feature space (usually being low-dimensional).", "startOffset": 102, "endOffset": 106}, {"referenceID": 17, "context": "In the first group, a kind of deep (convolutional) neural networks, such as deep belief network (DBN) [17] and stacked auto-encoders [18], is first trained in an unsupervised manner to approximate the non-linear feature embedding from the raw image space to the embedded feature space (usually being low-dimensional).", "startOffset": 133, "endOffset": 137}, {"referenceID": 18, "context": "In [19], the authors proposed deep embedded clustering that simultaneously learns feature representations with stacked auto-encoders and cluster assignments with soft k-means by minimizing a joint loss function.", "startOffset": 3, "endOffset": 7}, {"referenceID": 19, "context": "In [20], joint unsupervised learning was proposed to learn deep convolutional representations and agglomerative clustering jointly using a recurrent framework.", "startOffset": 3, "endOffset": 7}, {"referenceID": 20, "context": "In [21], the authors proposed an infinite ensemble clustering framework that integrates deep representation learning and ensemble clustering.", "startOffset": 3, "endOffset": 7}, {"referenceID": 21, "context": "Related work Stacked auto-encoders [22, 23, 24, 17, 25, 26] have been studied in the past years for unsupervised deep feature extraction and nonlinear dimension reduction.", "startOffset": 35, "endOffset": 59}, {"referenceID": 22, "context": "Related work Stacked auto-encoders [22, 23, 24, 17, 25, 26] have been studied in the past years for unsupervised deep feature extraction and nonlinear dimension reduction.", "startOffset": 35, "endOffset": 59}, {"referenceID": 23, "context": "Related work Stacked auto-encoders [22, 23, 24, 17, 25, 26] have been studied in the past years for unsupervised deep feature extraction and nonlinear dimension reduction.", "startOffset": 35, "endOffset": 59}, {"referenceID": 16, "context": "Related work Stacked auto-encoders [22, 23, 24, 17, 25, 26] have been studied in the past years for unsupervised deep feature extraction and nonlinear dimension reduction.", "startOffset": 35, "endOffset": 59}, {"referenceID": 24, "context": "Related work Stacked auto-encoders [22, 23, 24, 17, 25, 26] have been studied in the past years for unsupervised deep feature extraction and nonlinear dimension reduction.", "startOffset": 35, "endOffset": 59}, {"referenceID": 25, "context": "Related work Stacked auto-encoders [22, 23, 24, 17, 25, 26] have been studied in the past years for unsupervised deep feature extraction and nonlinear dimension reduction.", "startOffset": 35, "endOffset": 59}, {"referenceID": 26, "context": "Their extensions for dealing with images are convolutional stacked auto-encoders [27, 28].", "startOffset": 81, "endOffset": 89}, {"referenceID": 27, "context": "Their extensions for dealing with images are convolutional stacked auto-encoders [27, 28].", "startOffset": 81, "endOffset": 89}, {"referenceID": 25, "context": "Most of these methods contain a two-stage training procedure [26]: one is layer-wise pre-training and the other is overall finetuning.", "startOffset": 61, "endOffset": 65}, {"referenceID": 28, "context": "In [29], a deep deconvolution network is learned for image segmentation.", "startOffset": 3, "endOffset": 7}, {"referenceID": 29, "context": "The network achieves the state-of-the-art performance compared with analogous methods thanks to three factors: 1) introducing a deconvolution layer and a unpooling layer [30, 31, 32] to recover the original image size of the segmentation mask, 2) applying the batch normalization [33] to each convolution layer and each deconvolution layer to reduce the internal covariate", "startOffset": 170, "endOffset": 182}, {"referenceID": 30, "context": "The network achieves the state-of-the-art performance compared with analogous methods thanks to three factors: 1) introducing a deconvolution layer and a unpooling layer [30, 31, 32] to recover the original image size of the segmentation mask, 2) applying the batch normalization [33] to each convolution layer and each deconvolution layer to reduce the internal covariate", "startOffset": 170, "endOffset": 182}, {"referenceID": 31, "context": "The network achieves the state-of-the-art performance compared with analogous methods thanks to three factors: 1) introducing a deconvolution layer and a unpooling layer [30, 31, 32] to recover the original image size of the segmentation mask, 2) applying the batch normalization [33] to each convolution layer and each deconvolution layer to reduce the internal covariate", "startOffset": 170, "endOffset": 182}, {"referenceID": 32, "context": "The network achieves the state-of-the-art performance compared with analogous methods thanks to three factors: 1) introducing a deconvolution layer and a unpooling layer [30, 31, 32] to recover the original image size of the segmentation mask, 2) applying the batch normalization [33] to each convolution layer and each deconvolution layer to reduce the internal covariate", "startOffset": 280, "endOffset": 284}, {"referenceID": 33, "context": "shifts, which not only makes an end-to-end training procedure possible but also speeds up the process, and 3) adopting a pre-trained encoder on largescale datasets such as VGG-16 model [34].", "startOffset": 185, "endOffset": 189}, {"referenceID": 9, "context": "[10, 18, 35, 36]).", "startOffset": 0, "endOffset": 16}, {"referenceID": 17, "context": "[10, 18, 35, 36]).", "startOffset": 0, "endOffset": 16}, {"referenceID": 34, "context": "[10, 18, 35, 36]).", "startOffset": 0, "endOffset": 16}, {"referenceID": 35, "context": "[10, 18, 35, 36]).", "startOffset": 0, "endOffset": 16}, {"referenceID": 18, "context": "Recently, there are attempts to combine the auto-encoders and clustering in a unified framework [19, 40].", "startOffset": 96, "endOffset": 104}, {"referenceID": 39, "context": "Recently, there are attempts to combine the auto-encoders and clustering in a unified framework [19, 40].", "startOffset": 96, "endOffset": 104}, {"referenceID": 18, "context": "In [19], the authors proposed Deep Embedded Clustering (DEC) that learns deep representations and cluster assignments jointly.", "startOffset": 3, "endOffset": 7}, {"referenceID": 39, "context": "In [40], the authors proposed Deep Clustering Network (DCN), a joint dimensional reduction and k-means clustering framework.", "startOffset": 3, "endOffset": 7}, {"referenceID": 8, "context": "Our idea is very similar to self-paces learning [9], where easiest instances are first focused and more complex objects are expanded progressively.", "startOffset": 48, "endOffset": 51}, {"referenceID": 26, "context": "Fully Convolutional As pointed out in [27], the max-pooling layers are very crucial for learning biologically plausible features in the convolutional architectures.", "startOffset": 38, "endOffset": 42}, {"referenceID": 28, "context": "Since the down-sampling operations in the FCE reduce the size of the output feature maps, we use an unpooling layer introduced in [29] to recover the feature maps.", "startOffset": 130, "endOffset": 134}, {"referenceID": 28, "context": "As a result, the unpooling layers along with deconvolution layers (see [29]) are adopted to make a fully convolutional decoder (FCD).", "startOffset": 71, "endOffset": 75}, {"referenceID": 32, "context": "To overcome this problem, we adopt the batch normalization (BN) [33] strategy for reducing the internal covariate shift and speeding up the training.", "startOffset": 64, "endOffset": 68}, {"referenceID": 28, "context": "As pointed out in [29], BN is critical to optimize the fully convolutional neural networks.", "startOffset": 18, "endOffset": 22}, {"referenceID": 17, "context": "This strategy is used in many clustering methods based on auto-encoders, such as GraphEncoder [18], deep embedding networks [35], and auto-encoder based clustering [36].", "startOffset": 94, "endOffset": 98}, {"referenceID": 34, "context": "This strategy is used in many clustering methods based on auto-encoders, such as GraphEncoder [18], deep embedding networks [35], and auto-encoder based clustering [36].", "startOffset": 124, "endOffset": 128}, {"referenceID": 35, "context": "This strategy is used in many clustering methods based on auto-encoders, such as GraphEncoder [18], deep embedding networks [35], and auto-encoder based clustering [36].", "startOffset": 164, "endOffset": 168}, {"referenceID": 18, "context": "Easiness measurement with the soft k-means scores We follow DEC [19] to adopt the t-distribution-based soft assignment to measure the easiness of a sample.", "startOffset": 64, "endOffset": 68}, {"referenceID": 36, "context": "The t-distribution is investigated in [37] to deal with the crowding problem of low-dimensional data distributions.", "startOffset": 38, "endOffset": 42}, {"referenceID": 36, "context": "Thus, we do not need to pay much attention to the parameter estimation (see [37]), which is a hard task in unsupervised learning.", "startOffset": 76, "endOffset": 80}, {"referenceID": 18, "context": "In [19], the authors proposed to normalize the boosted assignments to prevent large clusters from distorting the hidden feature space.", "startOffset": 3, "endOffset": 7}, {"referenceID": 18, "context": "\u2022 Accuracy (ACC) [19].", "startOffset": 17, "endOffset": 21}, {"referenceID": 37, "context": "The optimal mapping can be efficiently computed using the Hungarian algorithm [38].", "startOffset": 78, "endOffset": 82}, {"referenceID": 38, "context": "\u2022 Normalized mutual information (NMI) [39].", "startOffset": 38, "endOffset": 42}, {"referenceID": 18, "context": "\u2022 DAE-KMS [19] uses deep auto-encoders for feature extraction and then applies k-means for later clustering.", "startOffset": 10, "endOffset": 14}, {"referenceID": 35, "context": "\u2022 AEC [36] is a variant of DAE-KMS that simultaneously optimizes the data reconstruction error and representation compactness.", "startOffset": 6, "endOffset": 10}, {"referenceID": 20, "context": "\u2022 IEC [21] incorporates the deep representation learning and ensemble clustering.", "startOffset": 6, "endOffset": 10}, {"referenceID": 18, "context": "\u2022 DEC [19] simultaneously learns the feature representations and cluster centers using deep auto-encoders and soft k-means, respectively.", "startOffset": 6, "endOffset": 10}, {"referenceID": 34, "context": "\u2022 DEN [35] learns the clustering-oriented representations by utilizing deep auto-encoders and manifold constraints.", "startOffset": 6, "endOffset": 10}, {"referenceID": 39, "context": "\u2022 DCN [40] jointly applies dimensionality reduction and k-means clustering.", "startOffset": 6, "endOffset": 10}, {"referenceID": 26, "context": "Visualization One of the advantages of fully convolutional neural networks is that we can naturally visualize the inner activations (or features) and the trained weights (or filters) in a two-dimensional space [27].", "startOffset": 210, "endOffset": 214}, {"referenceID": 26, "context": "It is observed in [27] that the stacked convolutional auto-encoders trained on noisy inputs (30% binomial noise) and a max-pooling layer can learn localized biologically plausible filters.", "startOffset": 18, "endOffset": 22}, {"referenceID": 26, "context": "As discussed in [27], the max-pooling layers are elegant way of enforcing sparse codes which are required to deal with the over-complete representations of convolutional architectures.", "startOffset": 16, "endOffset": 20}, {"referenceID": 36, "context": "Embedding learned features in a low dimensional space We visualize the distribution of the learned features in a two-dimensional space with t-SNE [37].", "startOffset": 146, "endOffset": 150}, {"referenceID": 18, "context": "Impact of the balance normalization In DEC [19], the authors pointed out that the balance normalization plays an important role in preventing large clusters from distorting the hidden feature space.", "startOffset": 43, "endOffset": 47}], "year": 2017, "abstractText": "Traditional image clustering methods take a two-step approach, feature learning and clustering, sequentially. However, recent research results demonstrated that combining the separated phases in a unified framework and training them jointly can achieve a better performance. In this paper, we first introduce fully convolutional auto-encoders for image feature learning and then propose a unified clustering framework to learn image representations and cluster centers jointly based on a fully convolutional auto-encoder and soft k-means scores. At initial stages of the learning procedure, the representations extracted from the auto-encoder may not be very discriminative for latter clustering. We address this issue by adopting a boosted discriminative distribution, where high score assignments are highlighted and low score ones are de-emphasized. With the gradually boosted discrimination, clustering assignment scores are discriminated and cluster purities are enlarged. Experiments on several vision benchmark datasets show that our methods can achieve a state-of-the-art performance.", "creator": "LaTeX with hyperref package"}}}