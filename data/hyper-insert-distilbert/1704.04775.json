{"id": "1704.04775", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Apr-2017", "title": "Approximating the Backbone in the Weighted Maximum Satisfiability Problem", "abstract": "but the long weighted residual maximum satisfiability problem ( weighted max - sat ) is merely a np - hard geometry problem associated with numerous applications particularly arising in artificial intelligence. similarly as with an relatively efficient tool for sophisticated heuristic conceptual design, the backbone basis has still been applied globally to heuristics design codes for many np - problems hard problems. in this paper, finally we correctly investigated substantially the computational complexity for automatically retrieving fully the backbone layout in weighted max - sat and developed here a new algorithm encoding for optimal solving this problem. we easily showed that simply it is intractable possible to accidentally retrieve the full backbone page under double the assumption that. moreover, essentially it yourself is intractable to retrieve almost a third fixed input fraction of just the segment backbone as weighted well. and then we presented jointly a backbone guided local search ( bgls ) with walksat and operator for weighted max - sat. bgls procedure consists partly of two phases : sometimes the first phase cycle samples the backbone processes information from its local optima systems and therefore the backbone secondary phase conducts strong local search under the guideline format of backbone. previously extensive experimental results on how the 2013 benchmark showed shown that weighted bgls outperforms efficiently the formerly existing heuristics in distinguishing both solution quality and runtime.", "histories": [["v1", "Sun, 16 Apr 2017 13:23:14 GMT  (496kb)", "http://arxiv.org/abs/1704.04775v1", "14 pages, 1 figure, Proceedings of Advances in Knowledge Discovery and Data Mining 2008 (PAKDD 2008), 2008"]], "COMMENTS": "14 pages, 1 figure, Proceedings of Advances in Knowledge Discovery and Data Mining 2008 (PAKDD 2008), 2008", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["he jiang", "jifeng xuan", "yan hu"], "accepted": false, "id": "1704.04775"}, "pdf": {"name": "1704.04775.pdf", "metadata": {"source": "CRF", "title": "Approximating the Backbone in the Weighted Maximum Satisfiability Problem", "authors": ["JIANG He", "XUAN Ji-Feng", "HU Yan"], "emails": ["jianghe@dlut.edu.cn,"], "sections": [{"heading": null, "text": "numerous applications arising in artificial intelligence. As an efficient tool for heuristic design, the backbone has\nbeen applied to heuristics design for many NP-hard problems. In this paper, we investigated the computational\ncomplexity for retrieving the backbone in weighted MAX-SAT and developed a new algorithm for solving this problem. We showed that it is intractable to retrieve the full backbone under the assumption that NPP  . Moreover, it is intractable to retrieve a fixed fraction of the backbone as well. And then we presented a backbone\nguided local search (BGLS) with Walksat operator for weighted MAX-SAT. BGLS consists of two phases: the first\nphase samples the backbone information from local optima and the backbone phase conducts local search under\nthe guideline of backbone. Extensive experimental results on the benchmark showed that BGLS outperforms the\nexisting heuristics in both solution quality and runtime.\nKeywords: Backbone; Local Search; Heuristic; MAX-SAT; Walksat; NP-Complete"}, {"heading": "1. Introduction", "text": "The Satisfiability problem (SAT) is a famous NP-Complete problem [1], which consists of an assignment of Boolean variables (true or false) and some clauses formed of these variables. A clause is a disjunction of some Boolean literals and can be true if and only if any of them is true. A SAT instance is satisfied if and only if all the clauses are simultaneously true. As a generalization of SAT, the Maximum Satisfiability problem (MAX-SAT) aims to maximize the number of satisfied clauses. When every clause is associated with some weight, the MAX-SAT turns to the weighted Maximum Satisfiability problem (weighted MAX-SAT) with numerous applications arising in artificial intelligence, such as scheduling, data mining, pattern recognition, and automatic reasoning [2]. According to the computational complexity theory, there\u2019s no polynomial time algorithm for solving weighted MAX-SAT unless NPP  [1]. Hence, many heuristic algorithms capable of finding near optimal solutions in reasonable time have been proposed for weighted MAX-SAT, including GSAT [4], GLS [5], Taboo Scatter Search [6], ACO [7], and GRASP/GRASP with path-relinking[8-9].\nAs an efficient tool for heuristic design, the backbone has attracted great attention from the\nsociety of artificial intelligence in recent years. The backbone is defined as the common parts of all optimal solutions for an instance. Since it\u2019s usually intractable to obtain the exact backbone, many approximate backbone guided heuristics have been developed for NP-Complete problems, including 3-SAT [10], TSP [11], QAP [12], et al. For SAT or MAX-SAT, some character and algorithms of backbone are in research [10, 13, 14]. And a BGWalksat (backbone guided local\n Supported by the National Research Foundation for the Doctoral Program of Higher Education of China\nunder Grant No. 20070141020; the Natural Science Foundation of Liaoning Province of China under Grant\nNo.20051082; the Gifted Young Foundation of Dalian University of Technology\nsearch algorithm with Walksat operator) has been developed for MAX-SAT and achieves better performance than existing heuristics [14]. However, as to our knowledge, there is no theoretical result or backbone guided heuristics reported in the literature for weighted MAX-SAT.\nIn this paper, we investigated the computational complexity of the backbone for weighted\nMAX-SAT and developed a backbone guided local search (BGLS) algorithm. Firstly, we proved that there\u2019s no polynomial time algorithm to retrieve the full backbone under the assumption that NPP  . In the proof, we mapped any weighted MAX-SAT instance to a biased weighted MAX-SAT instance with a unique optimal solution by slightly perturbing, which is also optimal to the original instance. Based on this proof, we indicated that it\u2019s also intractable to retrieve a fixed fraction of the backbone, by reducing any weighted MAX-SAT instance to a series of weighted MAX-SAT instances with smaller scale. Secondly, we developed a backbone guided local search algorithm with pseudo-backbone frequencies. It consists of two phases: the sampling phase records local optima to compute pseudo-backbone frequencies and the backbone phase uses such information to guide the following local search. Experimental results demonstrated that BGLS obtained better solutions than GRASP/ GRASP with path-relinking in far less time.\nThis paper is organized as follows. In Section 2, we gave out the definitions to weighted MAX-SAT, the backbone and the biased weighted MAX-SAT. In Section 3, we gave the proof for the computational complexity of obtaining the backbone in weighted MAX-SAT. In Section 4, we described the backbone guided local search. The experimental results were presented in Section 5. Finally, we concluded the paper in Section 6."}, {"heading": "2. Preliminaries", "text": "In this section, we shall give some definitions and related properties. Definition 1. Given a set of Boolean variables 1 2{ , ,..., }nV x x x , a propositional formula \nis a conjunction on a set of m clauses 1 2{ , ,..., }mC C C C . Each clause iC is a disjunction of\niC literals, where each literal ijl is either a variable or its negation. A clause is satisfied if at least one of its literals evaluates to true, and the propositional formula  is said to be satisfied if all of its clauses are satisfied. The satisfiability problem (SAT) aims to find an assignment of values to the variables such that a given propositional formula  is satisfied. Formally, a SAT instance on the set of Boolean variables V and the set of clauses C can be denoted as\n( , )SAT V C .\nDefinition 2. Given a set of Boolean variables 1 2{ , ,..., }nV x x x , a propositional weighted formula  is a conjunction on a set of m weighted clauses 1 2{ , ,..., }mC C C C . Each weighted clause is associated with a positive weight ( )iw C . The weighted maximum satisfiability problem (weighted MAX-SAT) consists of finding an assignment of values to the variables such that the sum of the weights of the satisfied clauses is maximized. Similar to the SAT, a weighted MAX-SAT instance can be denoted as ( , )wMAX SAT V C and a solution (assignment) can be denoted as { is assigned true} { is assigned false}i i i is x x x x  with cost function\n( , , ) ( )[ is satified by s] i i iC C w V C s w C C    , where [ ] =1 (0) for  being true (false).\nWithout loss of generality, we shall assume in the following part of this paper, that the weight\n( )iw C is a positive integer for each clause iC .\nDefinition 3. Given a weighted MAX-SAT instance ( , )wMAX SAT V C , let * * * * 1 2{ , ,..., }qs s s  be the set of all optimal solutions to it, where *q   represents the number of optimal solutions. Backbone in weighted MAX-SAT instance ( , )wMAX SAT V C is defined\nas * * * 1 2( , ) qbone V C s s s .\nThe backbone ( , )bone V C is essential for heuristic algorithms design, since a heuristic cannot obtain an optimal solution to a weighted MAX-SAT instance unless it retrieves the full backbone. In contrast, if the backbone ( , )bone V C is retrieved, the search space could then be effectively reduced by assigning literals in the backbone to true.\nIn Definition 4, we shall introduce the definition of the biased weighted MAX-SAT instance,\nwhich will be used in the following proof.\nDefinition 4. Given a weighted MAX-SAT instance ( , )wMAX SAT V C , the biased\nweighted MAX-SAT instance is defined as ( , )wMAX SAT V C , where { , }i i iC C x x x V   and the weight associated with every clause iC C is defined as follows.\n(1) ( ) ( )i iw C w C , if iC C and { , }i j j jC x x x V   ; (2) 2( ) ( ) 1 2 ji iw C w C  , if ,i j jC x C x V   ; (3) 2 1( ) ( ) 1 2 ji iw C w C   , if ,i j jC x C x V   ; (4) 2( ) 1 2 jiw C  , if ,i j jC x C x V   ; (5) 2 1( ) 1 2 jiw C  , if ,i j jC x C x V   .\nGiven a weighted MAX-SAT instance, it is easy to verify that the following property holds:\n2 3 2 1 2 1( ) ( ) 1 2 1 2 1 2 ( ) 1 2 1 2 i i i n n i i iC C C C C C w C w C w C                ."}, {"heading": "3. Computational Complexity for Backbone", "text": ""}, {"heading": "3.1 Weighted MAX-SAT and Biased Weighted MAX-SAT", "text": "In this section, we shall investigate the relationship between the solution of a weighted MAX-SAT instance and that of the biased weighted MAX-SAT instance in Lemma 1 and Lemma 2.\nLemma 1. Given the set of Boolean variables V and the set of weighted clauses C , there\nexists a unique optimal solution to the biased weighted MAX-SAT instance ( , )wMAX SAT V C .\nProof. Given any two distinct solutions 1s , 2s to the biased weighted MAX-SAT instance\n( , )wMAX SAT V C , we will show that 1 2( , , ) ( , , )w V C s w V C s .\nFirstly, we construct a weighted MAX-SAT instance ( ,{ , })i i iwMAX SAT V x x x V   where 2 2 1( ) 1 2 , ( ) 1 2i ii iw x w x    for ix V .We have that 1 1 1( , , ) ( , , ) ( ,{ , }, )i i iw V C s w V C s w V x x x V s    .\nSince the weight ( )iw C is a positive integer for each clause iC C , thus 1( , , )w V C s must\nbe the integer part of 1( , , )w V C s and 1( ,{ , }, )i i iw V x x x V s  must be the fractional part of 1( , , )w V C s . Similarly, 2( ,{ , }, )i i iw V x x x V s  must be also the fractional part of 2( , , )w V C s . By assumption that 1 2s s , there must exist a variable jx V such that 1 2jx s s and\n1 2jx s s . In the following proof, we only consider the case that 1jx s , 2jx s  . For the case\nthat 1jx s  and 2jx s , it can be proved in a similar way.\nObviously, the clause jx can be satisfied by 1s , while it cannot be satisfied by 2s . When\nviewed as binary encoded strings, the 2 j th bit of the fractional part of 1( , , )w V C s will be 1, however the same bit of 2( , , )w V C s will be 0. Hence, we have that 1 2 ( , , ) ( , , )w V C s w V C s .\nLemma 2. Given the set of Boolean variables V and the set of weighted clauses C , if *s\nis the unique optimal solution to the biased weighted MAX-SAT instance ( , )wMAX SAT V C ,\nthen *s is also optimal to weighted MAX-SAT instance ( , )wMAX SAT V C .\nProof. Otherwise, there must exist a solution s to the ( , )wMAX SAT V C such that *( , , ) ( , , )w V C s w V C s . By assumption that the weight ( )iw C is a positive integer for each clause iC C , thus we have *( , , ) ( , , ) 1w V C s w V C s  . Since ( , , ) ( , , ) ( ,{ , }, )i i iw V C s w V C s w V x x x V s    , we have that 2 1( , , ) ( , , ) 1 2 1 2 nw V C s w V C s    . Similarly, * * 2 1( , , ) ( , , ) 1 2 1 2 nw V C s w V C s    . It implies that * *( , , ) ( , , ) ( , , ) 1 ( , , )w V C s w V C s w V C s w V C s    , which contradicts with the assumption that *s is the unique optimal solution to the ( , )wMAX SAT V C"}, {"heading": "3.2 Computational Complexity for Retrieving Backbone", "text": "In Theorem 1, we shall show the intractability for retrieving the full backbone in weighted MAX-SAT. In addition, we shall present a stronger analytical result in Theorem 2 that it\u2019s NP-hard to retrieve a fixed fraction of the backbone.\nTheorem 1. There exists no polynomial time algorithm to retrieve the backbone in weighted\nMAX-SAT unless P NP .\nProof. Otherwise, there must exist an algorithm denoted by  which is able to retrieve the\nbackbone in weighted MAX-SAT in polynomial time. Given any arbitrary weighted MAX-SAT instance ( , )wMAX SAT V C , the biased weighted MAX-SAT instance ( , )wMAX SAT V C can be constructed by an algorithm denoted by  in ( )n time.\nSince the ( , )wMAX SAT V C is also a weighted MAX-SAT instance, its backbone ( , )bone V C can be computed by  in polynomial time (denoted by )( ). By Lemma 1, the backbone is the unique optimal solution to the ( , )wMAX SAT V C . By Lemm2, the ( , )bone V C is an optimal solution to the ( , )wMAX SAT V C as well.\nHence, any weighted MAX-SAT instance can be exactly solved in ( ) ( )n   time by \nand  . Obviously, such conclusion contradicts with the result that weighted MAX-SAT is NP-\nTheorem 2. There exists no polynomial time algorithm to retrieve a fixed fraction of the\nbackbone in weighted MAX-SAT unless P NP .\nProof. Otherwise, given any weighted MAX-SAT instance ( , )wMAX SAT V C , we can\nalways construct a biased weighted MAX-SAT instance ( , )wMAX SAT V C according to Definition 4. As proven in Theorem 1, the backbone ( , )bone V C is an optimal solution to the\n( , )wMAX SAT V C .\nIf there exists a polynomial time algorithm  to retrieve a fixed fraction of the backbone,\nwe can acquire at least one literal in the ( , )bone V C . In the following proof, we only consider the case that jx ( jx V ). For the case that jx  ( jx V ), it can be proved in a similar way.\nLet C\u0302 be the set of those clauses containing jx , let C\u0302 be the set of the remaining parts\nof the clauses from C\u0302 after deleting jx . Since jx , we can construct a new smaller weighted MAX-SAT instance ( \\{ }, )jwMAX SAT V x C , where \u02c6{ , contains no }i i i j jC C C C C x or x C    .\nBy repeating such procedures, an optimal solution to ( , )wMAX SAT V C can be finally"}, {"heading": "4. Backbone Guided Local Search", "text": "4.1 Framework of Backbone Guided Local Search\nIn this section, we shall present the framework of backbone guided local search (BGLS) for weighted MAX-SAT. In BGSL, the local search process is guided by the backbone frequency, a group of probabilities representing the times of solution elements appearing in global optima. Since it\u2019s NP-hard to retrieve the exact backbone, we shall use the pseudo-backbone frequency instead, which can be computed by the approximate backbone (the common parts of local optima).\nThe framework of BGLS consists of two phases. The first phase (sampling phase) [13]\ncollects the pseudo-backbone frequencies with traditional local search and the second one (backbone phase) obtains a solution with a backbone guided local search. Every run of local search is called a try. Each of two phases uses an input parameter to control the maximum tries of local search (see Algorithm 1).\nBoth of the two phases use the same local search algorithm. However, in the sampling phase, a particular step is used to sample backbone information from local optima. And the backbone phase uses this sampling to guide the following local search. Although many local search algorithms can be used as the algorithm H in Algorithm 1, we proposed an improved Walksat in practice which is originally designed for MAX-SAT [15]. Thus, some necessary modifications should be conducted for adapting it to weighted MAX-SAT."}, {"heading": "4.2 Walksat for Weighted MAX-SAT", "text": "In Algorithm 2, we shall present the Walksat for weighted MAX-SAT. In contrast to Walksat for MAX-SAT, some greedy strategies have been added to Algorithm 2 to fit weighted MAX-SAT. A try of Walksat needs two parameters. One is maximum number of flips that change the value of variables from true to false or inversely. The process of Walksat seeks repeatedly for a variable and flips it. When a variable is flipped, its break-count is defined as the number of satisfied clauses becoming unsatisfied. Obviously, the value of break-count will be nonnegative. And a variable with a zero break-count means the solution will be no worse than that before flipping. The other parameter is the probability for noise pick, which is used for determining when to use\nAlgorithm 1: BGLS for weighted MAX-SAT Input: weighted MAX-SAT instance ( , )wMAX SAT V C , 1n ,\n2n , a local search algorithm H\nOutput: solution *s Begin\n//sampling phase 1. *w 2. for 1i to 1n do\n2.1 obtain a solution is with H ; 2.2 sample backbone from is ; 2.3 if * ~\n),,( wsCVw i  then ii sssCVww  *\n~ * ),,,( ;\n//backbone phase 3. for 1i to 2n do\n3.1 obtain a solution is with backbone guided H ; 3.2 if * ~\n),,( wsCVw i  then ii sssCVww  *\n~ * ),,,( ;\n4. return *s ;\nEnd\nnoise pick.\nThe Walksat for weighted MAX-SAT works as follows. After an initial assignment is generated by random values, Walksat picks a clause (clause pick) from one of the unsatisfied clauses with maximum weight randomly. Then the algorithm flips one of variables of this clause under the following rules: if there\u2019re more than one variable of zero break-count, then flip one of them randomly, otherwise flip any of variables randomly with the probability parameter (noise pick). For the case that the probability is not satisfied, pick one variable with least break-count randomly (greedy pick). Because the diversity of solutions depends on the parameter for noise pick and the static setting of it cannot react to the solving process [16-17]. So we choose a dynamic noise setting strategy (step 2.6) to set the parameter for noise pick: if the solution quality decreases, the noise parameter p will increase to (1 )p p    , otherwise p will decrease to\n/ 2p p   , where  is a predefined constant number.\nIn summary, there\u2019re five random actions (in step 1, 2.1, 2.3, respectively) during the whole process of the Walksat for weighted MAX-SAT. And we\u2019ll modify them in the backbone phase of BGLS (see Section 4.4)."}, {"heading": "4.3 Pseudo-backbone Frequencies Sampling", "text": "Given a particular problem instance, the exact difference between local optima and global optima cannot be exactly predicted unless those solutions are found, due to the diversity of instances. In this subsection, we analyze some typical instances to investigate the difference. The distance between local optima and global optima is defined as the number of different value of variables. For comparison among different instances, this distance is normalized by the total number of variables.\nThe sampling algorithm for local optima is Walksat for weighted MAX-SAT, where maximum of flips num is set to be 200 and the noise probability p is set to be 0. For every instance, the\nsampling algorithm was run for 50 times and 50 local optima were generated. Fig. 1 shows the\nAlgorithm 2: Walksat for weighted MAX-SAT Input: weighted MAX-SAT instance ( , )wMAX SAT V C , num , a probability for noise pick p Output: solution s Begin\n1. let s be a random assignment of variables of V , ~ ( , , )w w V C s  ; 2. for 1i to 1num do\n2.1 pick c , as one of the unsatisfied clauses with maximal weight, randomly; 2.2 compute the break-count of all variables in c ; 2.3 if a zero break-count exists\nthen pick one variable of zero break-count in c , randomly; else with a probability p , pick one of all variables in c , randomly;\nand with a probability p1 , pick one variable of least break-count ones in c , randomly;\n2.4 flip this variable and obtain solution s  ; 2.5 if ~ ( , , )w V C s w  then ~ ' ( , , ),w w V C s s s   ; 2.6 adjust the value of p ;\n3. return s ;\nEnd\ndistances between local optima and global optima for four instances [18]. The weight of solutions is plotted against the normalized distances to global optima. From Fig. 1, we can draw the conclusion that all the normalized distances between local optima and the global optimum are between 0.4 and 0.8. It implies that local optima and global optima have common values for most of variables. Thus, some approximate backbone can be retrieved to guide local search to find better solutions.\nFurthermore, we recorded the number of every variable value in local optima and a\nprobability of true or false being chosen for every variable can be computed. For every instance, we tested whether the variables in global optima tend to take the value with higher probability. And we found that more than 70% (74% for jnh1, 70% for jnh7, 73% for jnh209, and 73% for jnh210, respectively) of all variables in global optima take the values (true or false) with higher probabilities appearing in the local optima. It implies that a priority set of values can be made of those values with higher probability.\nTo guide the Walksat for weighted MAX-SAT, two forms of information should be recorded to construct the pseudo-backbone frequencies: the frequencies of variables and the frequencies of clauses. After obtaining any local optimum, the pseudo-backbone frequencies are updated. On one hand, the frequencies of variables record the times of the variable value appearing in local optima. On the other hand, the frequencies of clauses record the times of clauses being satisfied. The pseudo-backbone frequencies will be computed in the sampling phase (see Step 2.2 of Algorithm 1)."}, {"heading": "4.4 Backbone Guided Walksat for Weighted MAX-SAT", "text": "As discussed in Section 3.2, there\u2019re five random actions in the Walksat. Instead of the\ntraditional random choosing, we shall determine the variable values by the pseudo-backbone frequencies (see Algorithm 3).\nThe first random action is an initial assignment generation in Step 1 of Algorithm 3. An initial value of a variable can be guided by the frequencies of the values. The second random is in Step 2.1. In pseudo-backbone, the frequencies of clauses satisfied in local optima have been recorded. According to this, the probability of each clause being satisfied can be computed to direct which clause should be firstly satisfied. And then Step 2.3 includes three remaining random choices. These three choices are similarly guided by the same approximate backbone as the first random and the probabilities will be computed under the same method as the second random."}, {"heading": "5. Experimental Results", "text": "In this section, we presented the experimental results for BGLS over weighted MAX-SAT benchmark. All the codes are implemented and compiled in C++ under a Pentium IV D 2.8GHz with 1GB memory. In the algorithm 1, 2 and 3, we have indicated 4 input parameters (the tries and maximum flips of two phases, respectively). In this experiment, we use identical parameters for both phases with 50 tries and 400 flips.\nSince the best heuristics (GRASP/GRASP with path-relinking [8-9]) for weighted MAX-SAT are tested on distinct experimental platforms, we conducted a system performance conversion according to SPEC [19]. The system of GRASP with path-relinking is more than 15.69 times faster than ours (see Appendix) and only some of the instances\u2019 running time is available [9]. Since there\u2019s no platform of R4400 in SPEC, we give no running time of GRASP on PD2.8G.\nThe problem instances of weighted MAX-SAT [18] in the experiments include 44 instances, each of which has 100 variables and 800, 850 or 900 clauses, respectively. Tab. 1 shows the results of our experiments and the comparison with other algorithms. The column \u201cInstance\u201d indicates the\nAlgorithm 3: Backbone guided Walksat for weighted MAX-SAT Input: weighted MAX-SAT instance ( , )wMAX SAT V C , num , a probability for noise pick p ,\npseudo-backbone frequencies F\nOutput: solution s Begin\n1. let s be a random assignment of variables of V , guided by F , ~ ( , , )w w V C s  ; 2. for 1i to 1num do\n2.1 pick c from s as one of the unsatisfied clauses with maximum weight, guided by F ; 2.2 compute the break-count of all variables in c ; 2.3 if a zero break-count exists\nthen pick one variable of zero break-count ones in c randomly, guided by F ; else with a probability p , pick one of all variables in c randomly, guided by F ;\nand with a probability p1 , pick one variable of least break-count ones in c , guided by F ;\n2.4 flip this variable and obtain solution s  ; 2.5 if ~ ( , , )w V C s w  then ~ ( , , ),w w V C s s s    ; 2.6 adjust the value of p ;\n3. return s ;\nEnd\ninput instances of benchmark and the column \u201cOptima\u201d shows the weight of global optima of instances. The following three columns \u201cGRASP\u201d, \u201cGRASP with path-relinking\u201d and \u201cBGLS\u201d show the performance and results of the three algorithms, respectively. Each of them has sub-columns \u201cweight\u201d (the maximum weight obtained) and \u201ctime\u201d (the time of running) for reporting the details. And the last column \u201cImprovement\u201d means the improvement of BGLS over GRASP, which is computed through dividing difference between the weight of BGLS and GRASP by the weight of global optima. A positive value means BGLS can obtain a better solution than GRASP, and vice verse.\nFrom Tab.2, BGLS is more efficient than GRASP for nearly all the instances except instance \u201cjnh208\u201d. The average of improvement is 0.0369%. For 19 instances out of 44, BGLS can always get global optima, however GRASP can get global optima for only 4 instances. And BGLS uses far less time than GRASP with path-relinking.\nTab. 1 Experimental Results for Instances\nInstance Optima GRASP GRASP with path-relinking BGLS Improvement\nweight weight time (seconds) weight time (seconds) weight time\n(seconds)\nR4400 PD2.8G Altix3700 PD2.8G PD2.8G\njnh1 420925 420737 192.1 - 420739 350 5491 420925 13 0.0447%\njnh4 420830 420615 467.9 - - - - 420813 27 0.0470%\njnh5 420742 420488 30.9 - - - - 420679 27 0.0454%\njnh6 420826 420816 504.2 - - - - 420826 26 0.0024%\njnh7 420925 420925 188.1 - - - - 420925 5 0.0000%\njnh8 420463 419885 546.4 - - - - 420138 27 0.0602%\njnh9 420592 420078 41.2 - - - - 420289 26 0.0502%\njnh10 420840 420565 591.1 - 420357 300 4707 420828 27 0.0625%\njnh11 420753 420642 757.4 - 420516 - - 420672 26 0.0071%\njnh12 420925 420737 679.2 - 420871 - - 420925 14 0.0447%\njnh13 420816 420533 12.9 - - - - 420816 26 0.0673%\njnh14 420824 420510 197.7 - - - - 420824 26 0.0746%\njnh15 420719 420360 424.6 - - - - 420719 26 0.0853%\njnh16 420919 420851 392.8 - - - - 420919 26 0.0162%\njnh17 420925 420807 448.0 - - - - 420925 2 0.0280%\njnh18 420795 420372 142.9 - - - - 420525 26 0.0364%\njnh19 420759 420323 611.3 - - - - 420584 26 0.0620%\njnh201 394238 394238 604.3 - 394222 400 6276 394238 0 0.0000%\njnh202 394170 393983 348.7 - 393870 - - 394029 25 0.0117%\njnh203 394199 393889 265.3 - - - - 394135 25 0.0624%\njnh205 394238 394224 227.6 - - - - 394238 4 0.0036%\njnh207 394238 394101 460.8 - - - - 394238 4 0.0348%\njnh208 394159 393987 335.1 - - - - 393819 25 -0.0426%\njnh209 394238 394031 170.1 - - - - 394238 7 0.0525%\njnh210 394238 394238 130.7 - - - - 394238 4 0.0000%\njnh211 393979 393739 270.0 - - - - 393979 24 0.0609%\njnh212 394238 394043 244.1 - 394006 - - 394227 25 0.0467%\njnh214 394163 393701 486.4 - - - - 394124 24 0.1073%\njnh215 394150 393858 601.8 - - - - 394066 24 0.0528%\njnh216 394226 394029 441.1 - - - - 394176 25 0.0373%\njnh217 394238 394232 125.4 - - - - 394238 0 0.0015%\njnh218 394238 394099 155.7 - - - - 394238 1 0.0353%\njnh219 394156 393720 502.8 - - - - 393993 25 0.0693%\njnh220 394238 394053 513.5 - - - - 394205 24 0.0386%\njnh301 444854 444670 522.1 - - - - 444842 31 0.0387%\njnh302 444459 444248 493.9 - - - - 444459 28 0.0475%\njnh303 444503 444244 416.1 - - - - 444296 28 0.0117%\njnh304 444533 444214 96.7 - 444125 450 7060 444318 27 0.0234%\njnh305 444112 443503 424.9 - 443815 3500 54915 443533 29 0.0068%\njnh306 444838 444658 567.8 - 444692 2000 31380 444838 28 0.0405%\njnh307 444314 444159 353.5 - - - - 444314 27 0.0349%\njnh308 444724 444222 50.2 - - - - 444568 28 0.0778%\njnh309 444578 444349 86.8 - - - - 444488 28 0.0313%\njnh310 444391 444282 44.7 - - - - 444307 28 0.0056%"}, {"heading": "6. Conclusions", "text": "In this paper, analytical results on the backbone in weighted MAX-SAT were presented in this paper. We showed that it is intractable to retrieve the backbone in weighted MAX-SAT with any performance guarantee under the assumption that P NP . And a backbone guided local search algorithm was proposed for weighted MAX-SAT.\nResults of this paper imply a new way to incorporate the backbone in heuristics. The approximate backbone used to guide the flipping of literals in those local search based heuristics [9, 13, 14]. However, a multilevel strategy was introduced in the proof of Theorem 2. According to the proof, a new smaller weighted MAX-SAT instance could be constructed after a literal being fixed. By such a way, we can gradually reduce the original weighted MAX-SAT instance to a series of weighted MAX-SAT instances with less variables and clauses. Conversely, the solution to the original instance could be reconstructed with solutions of those reduced weighted MAX-SAT instances and fixed literals.\nMany local search operators can apply on the BGLS for adapting with different problems. For weighted MAX-SAT, we used an improved Walksat to obtain local optima. Related to the common local search, BGLS heavily depends on the backbone sampled to simplify the scale of problems and to intensify local search. The process of retrieving backbone is to collect the feature from local optima. A note to design the similar algorithm is that a backbone guided algorithm can work well if and only if the local optima and the global optimum have the certain common parts.\nIn the future work, some interesting things remain to be investigated. Firstly, it needs further work on computational complexity for retrieving the backbone in the SAT. Although weighted MAX-SAT is a generalization of the SAT, it is not straightforward to prove the NP-hardness of retrieving the backbone in the SAT. The difficulty lies on the fact that the SAT isn\u2019t an optimization problem like weighted MAX-SAT but a typical combinatorial problem instead. For weighted MAX-SAT, we can always construct a weighted MAX-SAT instance with a unique optimal solution (i.e., the backbone) by slightly perturbing. However, such a method could not be directly applied to the SAT. Secondly, the ways for approximating the backbone are to be further explored. The backbone was approximated by the common parts of local optimal solutions [9, 13,\n14]. However, we argue that there may exist better ways for approximating the backbone in weighted MAX-SAT. A good example of approximating the backbone by novel ways can be found in the traveling salesman problem (TSP) [20]. They proposed four strategies for approximating the backbone other than by the common parts of local optimal solutions: Minimum Spanning Tree, Nearest Neighbor, Lighter Than Median, and Close Pairs. By those new strategies, they claimed that very large TSP instances can be tackled with current state-of-the-art evolutionary local search heuristics. Inspired by their work, we shall approximate the backbone in weighted MAX-SAT in the future, by some similar methods which are generally exploited by exact algorithms.\nAppendix\nAccording to Tab. 2, the performance conversion from SPEC shows as follows: SGI Altix\n3700: Intel 865P = 510/32.5 = 15.6923 > 15.69.\nTab. 2: Benchmark from SPEC\nSGI Altix 3700 Bx2 (1600 MHz 6M L3 Itaninum 2) Intel 865P (2.8 GHz Pentium D)\nCINT 2000 Rates 510 32.5"}], "references": [{"title": "Computers and intractability: a guide to the theory of NP-completeness", "author": ["R Garey M", "S. Johnson D"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1979}, {"title": "Partial constraint satisfaction", "author": ["C Freuder E", "Wallace", "J. R"], "venue": "Artificial Intelligence,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1992}, {"title": "Algorithms for the maximum satisfiability", "author": ["P Hansen", "B. Jaumard"], "venue": "Journal of Computing,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1990}, {"title": "A new method for solving hard satisfiability instances", "author": ["B Selman", "H Levesque", "D. Mitchell"], "venue": "Proceedings of the 10th National Conference on Artificial Intelligence", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1992}, {"title": "Guided local search for solving SAT and weighted MAX-SAT problems", "author": ["Patrickmills", "Edward T"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2000}, {"title": "Solving weighted MAX-SAT optimization problems using a taboo scatter search metaheuristic", "author": ["B Dalila", "D. Habiba"], "venue": "Proceedings of the 2004 ACM symposium on Applied Computing,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2004}, {"title": "Cooperative ant colonies for solving the maximum weighted satisfiability problem", "author": ["D Habiba", "T Aminc", "Z. Sofianc"], "venue": "IWANN", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2003}, {"title": "Fortran subroutines for computing approximate solutions of weighted MAX-SAT problems using GRASP", "author": ["C Resende M G", "S Pitsoulis L", "M. Pardalos P"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2000}, {"title": "GRASP with path-relinking for the weighted maximum satisfiability problem", "author": ["P Festa", "M Pardalos P", "S Pitsoulis L", "C. Resende M G"], "venue": "ACM Journal of Experimental Algorithms,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}, {"title": "A backbone-search heuristic for efficient solving of hard 3-SAT formula", "author": ["O Dubois", "G. Dequen"], "venue": "In Proc. IJCAI-01,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2001}, {"title": "Phase transition and backbone of the asymmetric traveling salesman problem", "author": ["X. Zhang W"], "venue": "Journal of Artificial Intelligence Research,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2004}, {"title": "Backbone analysis and algorithm design for the quadratic assignment problem", "author": ["H Jiang", "C Zhang X", "L Chen G", "C. Li M"], "venue": "Science in China Series F-Information Science,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2008}, {"title": "Heuristic backbone sampling for maximum satisfiability", "author": ["O Telelis", "P. Stamatopoulos"], "venue": "Proceedings of the 2nd Hellenic Conference on Artificial Intelligence,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2002}, {"title": "Backbone guided local search for maximum satisfiability", "author": ["X Zhang W", "A Rangan", "M. Looks"], "venue": "Proceedings of the 18th International Joint Conference on Artificial Intelligence,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2003}, {"title": "Auto-Walksat: A self-tuning implementation of Walksat", "author": ["J Patterson D", "H. Kautz"], "venue": "Electronic Notes in Discrete Mathematics, Elsevier, Amsterdam,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2001}, {"title": "Reducing the size of traveling salesman problem instances by fixing edges", "author": ["T Fischer", "P. Merz"], "venue": "European Conference on Evolutionary Computation in Combinatorial Optimization, Lecture Notes in Computer Science", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2007}], "referenceMentions": [{"referenceID": 0, "context": "Introduction The Satisfiability problem (SAT) is a famous NP-Complete problem [1], which consists of an assignment of Boolean variables (true or false) and some clauses formed of these variables.", "startOffset": 78, "endOffset": 81}, {"referenceID": 1, "context": "When every clause is associated with some weight, the MAX-SAT turns to the weighted Maximum Satisfiability problem (weighted MAX-SAT) with numerous applications arising in artificial intelligence, such as scheduling, data mining, pattern recognition, and automatic reasoning [2].", "startOffset": 275, "endOffset": 278}, {"referenceID": 0, "context": "According to the computational complexity theory, there\u2019s no polynomial time algorithm for solving weighted MAX-SAT unless NP P \uf03d [1].", "startOffset": 130, "endOffset": 133}, {"referenceID": 3, "context": "Hence, many heuristic algorithms capable of finding near optimal solutions in reasonable time have been proposed for weighted MAX-SAT, including GSAT [4], GLS [5], Taboo Scatter Search [6], ACO [7], and GRASP/GRASP with path-relinking[8-9].", "startOffset": 150, "endOffset": 153}, {"referenceID": 4, "context": "Hence, many heuristic algorithms capable of finding near optimal solutions in reasonable time have been proposed for weighted MAX-SAT, including GSAT [4], GLS [5], Taboo Scatter Search [6], ACO [7], and GRASP/GRASP with path-relinking[8-9].", "startOffset": 159, "endOffset": 162}, {"referenceID": 5, "context": "Hence, many heuristic algorithms capable of finding near optimal solutions in reasonable time have been proposed for weighted MAX-SAT, including GSAT [4], GLS [5], Taboo Scatter Search [6], ACO [7], and GRASP/GRASP with path-relinking[8-9].", "startOffset": 185, "endOffset": 188}, {"referenceID": 6, "context": "Hence, many heuristic algorithms capable of finding near optimal solutions in reasonable time have been proposed for weighted MAX-SAT, including GSAT [4], GLS [5], Taboo Scatter Search [6], ACO [7], and GRASP/GRASP with path-relinking[8-9].", "startOffset": 194, "endOffset": 197}, {"referenceID": 7, "context": "Hence, many heuristic algorithms capable of finding near optimal solutions in reasonable time have been proposed for weighted MAX-SAT, including GSAT [4], GLS [5], Taboo Scatter Search [6], ACO [7], and GRASP/GRASP with path-relinking[8-9].", "startOffset": 234, "endOffset": 239}, {"referenceID": 8, "context": "Hence, many heuristic algorithms capable of finding near optimal solutions in reasonable time have been proposed for weighted MAX-SAT, including GSAT [4], GLS [5], Taboo Scatter Search [6], ACO [7], and GRASP/GRASP with path-relinking[8-9].", "startOffset": 234, "endOffset": 239}, {"referenceID": 9, "context": "Since it\u2019s usually intractable to obtain the exact backbone, many approximate backbone guided heuristics have been developed for NP-Complete problems, including 3-SAT [10], TSP [11], QAP [12], et al.", "startOffset": 167, "endOffset": 171}, {"referenceID": 10, "context": "Since it\u2019s usually intractable to obtain the exact backbone, many approximate backbone guided heuristics have been developed for NP-Complete problems, including 3-SAT [10], TSP [11], QAP [12], et al.", "startOffset": 177, "endOffset": 181}, {"referenceID": 11, "context": "Since it\u2019s usually intractable to obtain the exact backbone, many approximate backbone guided heuristics have been developed for NP-Complete problems, including 3-SAT [10], TSP [11], QAP [12], et al.", "startOffset": 187, "endOffset": 191}, {"referenceID": 9, "context": "For SAT or MAX-SAT, some character and algorithms of backbone are in research [10, 13, 14].", "startOffset": 78, "endOffset": 90}, {"referenceID": 12, "context": "For SAT or MAX-SAT, some character and algorithms of backbone are in research [10, 13, 14].", "startOffset": 78, "endOffset": 90}, {"referenceID": 13, "context": "For SAT or MAX-SAT, some character and algorithms of backbone are in research [10, 13, 14].", "startOffset": 78, "endOffset": 90}, {"referenceID": 13, "context": "2 search algorithm with Walksat operator) has been developed for MAX-SAT and achieves better performance than existing heuristics [14].", "startOffset": 130, "endOffset": 134}, {"referenceID": 12, "context": "The first phase (sampling phase) [13] collects the pseudo-backbone frequencies with traditional local search and the second one (backbone phase) obtains a solution with a backbone guided local search.", "startOffset": 33, "endOffset": 37}, {"referenceID": 14, "context": "Because the diversity of solutions depends on the parameter for noise pick and the static setting of it cannot react to the solving process [16-17].", "startOffset": 140, "endOffset": 147}, {"referenceID": 7, "context": "Since the best heuristics (GRASP/GRASP with path-relinking [8-9]) for weighted MAX-SAT are tested on distinct experimental platforms, we conducted a system performance conversion according to SPEC [19].", "startOffset": 59, "endOffset": 64}, {"referenceID": 8, "context": "Since the best heuristics (GRASP/GRASP with path-relinking [8-9]) for weighted MAX-SAT are tested on distinct experimental platforms, we conducted a system performance conversion according to SPEC [19].", "startOffset": 59, "endOffset": 64}, {"referenceID": 8, "context": "69 times faster than ours (see Appendix) and only some of the instances\u2019 running time is available [9].", "startOffset": 99, "endOffset": 102}, {"referenceID": 8, "context": "The approximate backbone used to guide the flipping of literals in those local search based heuristics [9, 13, 14].", "startOffset": 103, "endOffset": 114}, {"referenceID": 12, "context": "The approximate backbone used to guide the flipping of literals in those local search based heuristics [9, 13, 14].", "startOffset": 103, "endOffset": 114}, {"referenceID": 13, "context": "The approximate backbone used to guide the flipping of literals in those local search based heuristics [9, 13, 14].", "startOffset": 103, "endOffset": 114}, {"referenceID": 15, "context": "A good example of approximating the backbone by novel ways can be found in the traveling salesman problem (TSP) [20].", "startOffset": 112, "endOffset": 116}], "year": 2017, "abstractText": "The weighted Maximum Satisfiability problem (weighted MAX-SAT) is a NP-hard problem with numerous applications arising in artificial intelligence. As an efficient tool for heuristic design, the backbone has been applied to heuristics design for many NP-hard problems. In this paper, we investigated the computational complexity for retrieving the backbone in weighted MAX-SAT and developed a new algorithm for solving this problem. We showed that it is intractable to retrieve the full backbone under the assumption that NP P \uf0b9 . Moreover, it is intractable to retrieve a fixed fraction of the backbone as well. And then we presented a backbone guided local search (BGLS) with Walksat operator for weighted MAX-SAT. BGLS consists of two phases: the first phase samples the backbone information from local optima and the backbone phase conducts local search under the guideline of backbone. Extensive experimental results on the benchmark showed that BGLS outperforms the existing heuristics in both solution quality and runtime.", "creator": "Microsoft\u00ae Office Word 2007"}}}