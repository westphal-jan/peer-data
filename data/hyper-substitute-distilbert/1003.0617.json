{"id": "1003.0617", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Mar-2010", "title": "Agent Based Approaches to Engineering Autonomous Space Software", "abstract": "current approaches support integrated engineering of space software such as laser tracking and are based about careful development of graphical simulations using packages such as roland's simulink toolbox. these provide training tools for engineering robot feedback robots that adapt periodic changes in the environment but someone impressed upon the controller itself needs to be adapted.", "histories": [["v1", "Tue, 2 Mar 2010 15:38:48 GMT  (41kb,D)", "http://arxiv.org/abs/1003.0617v1", "3 pages, 1 Figure, Formal Methods in Aerospace"]], "COMMENTS": "3 pages, 1 Figure, Formal Methods in Aerospace", "reviews": [], "SUBJECTS": "cs.MA cs.AI", "authors": ["louise a dennis", "michael fisher", "nicholas lincoln", "alexei lisitsa", "sandor m veres"], "accepted": false, "id": "1003.0617"}, "pdf": {"name": "1003.0617.pdf", "metadata": {"source": "CRF", "title": "Agent Based Approaches to Engineering Autonomous Space Software\u2217", "authors": ["Louise A. Dennis", "Michael Fisher", "Nicholas Lincoln", "Alexei Lisitsa", "Sandor M. Veres"], "emails": ["L.A.Dennis@liverpool.ac.uk"], "sections": [{"heading": null, "text": "M. Bujorianu and M. Fisher (Eds.): Workshop on Formal Methods for Aerospace (FMA) EPTCS 20, 2010, pp. 63\u201367, doi:10.4204/EPTCS.20.6\nc\u00a9 L. A. Dennis et al. This work is licensed under the Creative Commons Attribution License."}, {"heading": "Agent Based Approaches to Engineering Autonomous Space", "text": "Software\u2217\nLouise A. Dennis Department of Computer Science, University of Liverpool, UK\nL.A.Dennis@liverpool.ac.uk\nMichael Fisher Department of Computer Science, University of Liverpool, UK\nNicholas Lincoln Department of Engineering, University of Southampton, UK\nAlexei Lisitsa Department of Computer Science, University of Liverpool, UK\nSandor M. Veres Department of Engineering, University of Southampton, UK\nCurrent approaches to the engineering of space software such as satellite control systems are based around the development of feedback controllers using packages such as MatLab\u2019s Simulink toolbox. These provide powerful tools for engineering real time systems that adapt to changes in the environment but are limited when the controller itself needs to be adapted.\nWe are investigating ways in which ideas from temporal logics and agent programming can be integrated with the use of such control systems to provide a more powerful layer of autonomous decision making. This paper will discuss our initial approaches to the engineering of such systems."}, {"heading": "1 Introduction", "text": "Modern control systems are limited in their ability to react flexibly and autonomously to changing situations. The limiting factor is the complexity inherent in analysing situations where many variables are present. There are many complex, real-world, control systems but we are primarily interested in the (autonomous) control of satellite systems.\nConsider the problem of a single satellite attempting to maintain a geostationary orbit. Current satellite control systems maintain orbits using feedback controllers. These implicitly assume that any errors in the orbit will be minor and easily corrected. In situations where more significant errors occur, for example caused by a thruster malfunction, it is desirable to modify or change the controller. The complexity of the decision task is a challenge to standard approaches, and has led, for example, to complex, evolutionary control systems. These become very difficult to understand.\nWe approach the problem from the perspective of rational agents [6]. We consider a satellite to be an agent which consists of a discrete (rational decision making) part and a continuous (calculation) part. The discrete part uses the Belief-Desire-Intention (BDI) theory of agency [5] and governs high level decisions about when to generate new feedback controllers. The continuous, calculational part is used to\n\u2217Work funded by EPSRC grants EP/F037201/1 and EP/F037570/1\nderive controllers and to calculate information from continuous data which can be used in the decision making process; this part can be viewed as a hybrid system."}, {"heading": "2 Architecture", "text": "Our prototype system is shown in Fig. 1. We have implemented a simulated environment and real time satellite control system in MatLab using the Simulink tool kit. The continuous agent part is also implemented in MatLab. MatLab has no easy provision for threaded execution which forces us to use separate instances for the Real Time aspects (i.e. the feedback controller and simulated environment) and for the Continuous Agent part. The agent also contains a discrete agent part which is currently implemented in the Gwendolen agent programming language1. Gwendolen [2] is implemented on top of JAVA.\nThe real time control system sends information (which may be pre-processed) to the agent part of the system. When it acts, the discrete part of the agent may either cause the continuous agent part to perform some calculation (and wait for the results) or it may send an instruction to the real time control system to alter its controller. Since the new controller has been created \u201con the fly\u201d by the continuous part, some aspects of this controller are stored in the shared file system (accessed by both MatLab processes).\nThe discrete agent part is divided into an abstraction engine which takes continuous data supplied by the satellite simulation and transforms this data into discrete shared beliefs which are accessed by a\n1The choice of language was dictated entirely by convenience. It is a subject for further work to examine more widely used BDI-languages and evaluate which is most appropriate for the system.\nreasoning engine which makes decisions about how to behave. The discrete part is split in two because reasoning is comparatively slow compared to the flow of data coming in from the simulation. It can become \u201cclogged\u201d up with the need to react to changing information if it tries to perform both the abstraction tasks and the reasoning tasks at once. The separation of abstraction and reasoning is both theoretically clean and practical at an implementational level."}, {"heading": "3 BDI Programming Aspects", "text": "The architecture lets us represent the high-level decision making aspects of the program in terms of the beliefs and goals of the agent and the events it observes. So, for instance, when the agent observes the event that the satellite is in a new position (information relayed to it by the real time controller) it can call on the continuous part to calculate whether this position is within acceptable bounds of the desired orbit (i.e. whether the existing real-time controller is capable of maintaining the orbit). If, as a result of this, it gains a belief that the satellite has strayed from the orbit it can request the continuous part to calculate a new path for the satellite to follow using techniques described in [4].\nSimilarly, if the satellite has strayed from its bounds, the discrete agent part can examine its beliefs about the current status of the thrusters and, if necessary, instruct the continuous part to generate a new feedback controller which takes into account any malfunctions or inefficiencies in the thrusters.\nSuch programs can be expressed compactly in the BDI-programming style without the need for programming large decision trees to consider all possible combinations of thruster status and satellite positions. This should then reduce the probability of error in the decision-making parts of the program and opens the possibility that existing techniques for model checking such programs [1] can be adapted to verify this part."}, {"heading": "3.1 Geostationary Orbit Case Study", "text": "The agent code for the geostationary orbit is shown in code fragments 3.1 and 3.2. Fragment 3.1 shows the code for the abstraction engine. Every time it \u201cperceives\u201d the satellite position (stateinfo) it calls upon MatLab to calculate whether or not this position is within bounds (comp_distance) and then asserts and removes shared beliefs appropriately.\nThe code is shown as a series of plans of the form trigger:{guard} \u2190deeds where the trigger is some event observed by the agent, the guard is a set of facts that must be true before the plan is activated and the deeds are a stack of deeds to be executed. +b is the addition of a belief, b, and -b is the removal of the belief, b. In a guard B b means that b is believed.\nCode fragment 3.1 Geostationary Orbit Control (Abstraction Engine)\n1+stateinfo(L1, L2, L3, L4, L5, L6) : 2{B proximity_to_centre(V1)} \u2190 3comp_distance(L1, L2, L3, L4, L5, L6, Val), 4+proximity_to_centre(Val); 5 6+proximity_to_centre(in) : {B proximity_to_centre(out)} \u2190 7-proximity_to_center(out), 8remove_shared(proximity_to_centre(out)), 9assert_shared(proximity_to_centre(in)); 10 11+proximity_to_centre(out) : 12{B proximity_to_centre(in),\n13B stateinfo(L1, L2, L3, L4, L5, L6)} \u2190 14-proximity_to_centre(in), 15remove_shared(stateinfo(A1, A2, A3, A4, A5, A6)), 16assert_shared(stateinfo(L1, L2, L3, L4, L5, L6)), 17remove_shared(proximity_to_centre(in)), 18assert_shared(proximity_to_centre(out));\nFragment 3.2 reacts to the dynamic information about whether the satellite is within bounds or not. It may call a MatLab function, plan_approach_to_centre which returns the name of a plan to move a satellite back within bounds. apply_controls and maintain_path are actions applied to the simulation of the satellite which apply a named plan, or continue normal operation as appropriate. The syntax +!g indicates the acquisition of a goal.\nCode fragment 3.2 Geostationary Orbit Control\n1+proximity_to_centre(out) : {>} \u2190 2-proximity_to_centre(in), 3+!get_to_centre; 4 5+proximity_to_centre(in) : {>} \u2190 6-proximity_to_centre(out), 7maintain_path; 8 9+!get_to_centre : 10{B proximity_to_centre(out), 11B stateinfo(L1, L2, L3, L4, L5, L6)} \u2190 12plan_approach_to_centre(P, locn(L1, L2, L3, L4, L5, L6)), 13+!try_execute(P) ; 14 15+!try_execute(P) : {B proximity_to_centre(out)} \u2190 16apply_controls(P);"}, {"heading": "3.2 Decision and Control", "text": "The important aspect of both the above example and the architecture in general is that the (MatLab) control systems take care of the detailed calculation of continuous functions (paths, etc), while the rational agent takes care of high-level decisions about targets and plans. This separation of concerns simplifies both parts and avoids the problems associated with large, opaque, complex, adaptive and evolutionary control systems."}, {"heading": "4 Future Work", "text": "We are currently working on our prototype system and case study which will allow us to make comparisons of this agent approach to autonomous decision-making in satellite systems to approaches based on finite state machines and standard control. We also are interested in investigating the use of temporal logic and model checking to generate forward planning capabilities for the agent along the lines of those investigated by Kloetzer and Belta [3]. We aim to explore the possibility of using model checking to verify aspects of the agent\u2019s behaviour. Given that we already have a formal verification system for Gwendolen agents [1], there is a strong possibility that we can extend this to cope with (abstractions of) the continuous part. As the diagram below shows, we already have model-checking tools for the\ndiscrete/finite parts. Our interest now is how far such techniques can be extended to account for other aspects of the agent\u2019s behaviour.\nDiscrete and Finite\nAgent Part\nMATLAB\n\"Real World\"\nJAVA\nRational Agent Part\nThin Environment Layer"}, {"heading": "Abstraction Engine", "text": "Shared Beliefs"}, {"heading": "Reasoning", "text": "Continuous"}], "references": [{"title": "Automated verification of multi-agent programs", "author": ["R.H. Bordini", "L.A. Dennis", "B. Farwer", "M. Fisher"], "venue": "In Proceedings of the 23rd IEEE/ACM International Conference on Automated Software Engineering (ASE", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2008}, {"title": "Gwendolen: A BDI Language for Verifiable Agents", "author": ["L.A. Dennis", "B. Farwer"], "venue": "Proc. AISB\u201908 Workshop on Logic and the Simulation of Interaction and Reasoning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2008}, {"title": "A Fully Automated Framework for Control of Linear Systems From Temporal Logic Specifications", "author": ["M. Kloetzer", "C. Belta"], "venue": "IEEE Transactions on Automatic Control,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2008}, {"title": "Components of a Vision Assisted Constrained Autonomous Satellite Formation", "author": ["N. Lincoln", "S. Veres"], "venue": "Flying Control System. International Journal of Adaptive Control and Signal Processing,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "BDI Agents: From Theory to Practice", "author": ["A.S. Rao", "M. Georgeff"], "venue": "In Proc. 1st International Conference on Multi-Agent Systems (ICMAS),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1995}, {"title": "Foundations of Rational Agency", "author": ["M. Wooldridge", "A. Rao", "editors"], "venue": "Applied Logic Series. Kluwer Academic Publishers,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1999}], "referenceMentions": [{"referenceID": 5, "context": "We approach the problem from the perspective of rational agents [6].", "startOffset": 64, "endOffset": 67}, {"referenceID": 4, "context": "The discrete part uses the Belief-Desire-Intention (BDI) theory of agency [5] and governs high level decisions about when to generate new feedback controllers.", "startOffset": 74, "endOffset": 77}, {"referenceID": 1, "context": "Gwendolen [2] is implemented on top of JAVA.", "startOffset": 10, "endOffset": 13}, {"referenceID": 3, "context": "If, as a result of this, it gains a belief that the satellite has strayed from the orbit it can request the continuous part to calculate a new path for the satellite to follow using techniques described in [4].", "startOffset": 206, "endOffset": 209}, {"referenceID": 0, "context": "This should then reduce the probability of error in the decision-making parts of the program and opens the possibility that existing techniques for model checking such programs [1] can be adapted to verify this part.", "startOffset": 177, "endOffset": 180}, {"referenceID": 2, "context": "We also are interested in investigating the use of temporal logic and model checking to generate forward planning capabilities for the agent along the lines of those investigated by Kloetzer and Belta [3].", "startOffset": 201, "endOffset": 204}, {"referenceID": 0, "context": "Given that we already have a formal verification system for Gwendolen agents [1], there is a strong possibility that we can extend this to cope with (abstractions of) the continuous part.", "startOffset": 77, "endOffset": 80}], "year": 2010, "abstractText": "ion Engine", "creator": "LaTeX with hyperref package"}}}