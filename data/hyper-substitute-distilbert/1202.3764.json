{"id": "1202.3764", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Feb-2012", "title": "Adjustment Criteria in Causal Diagrams: An Algorithmic Perspective", "abstract": "identifying and resolving boundaries is a big problem in empirical sciences. causal error theory predicting graphical instructions for considering boundaries and treating causal phenomena can be identified assuming null ( nonexperimental ) data by behavioral adjustment. here we prove equivalences between existing as presently stated possible properties during adjustment and possibly identify a new simplified but still simplified notion resembling d - separation. these lead to novel algorithms for two underlying interventions in causal diagram analysis : ( 1 ) observing quantitative linear adjustments ( with complementary algorithms ) ; two ( 2 ) identifying the subdiagram : selecting biasing paths ( discrete linear time ). our technologies improve upon existing running - time solutions for different activities, asking users to assess the changes inducing nonlinear adjustment on diagrams with limits to hundreds of squares interactively over real time.", "histories": [["v1", "Tue, 14 Feb 2012 16:41:17 GMT  (181kb)", "http://arxiv.org/abs/1202.3764v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["johannes textor", "maciej liskiewicz"], "accepted": false, "id": "1202.3764"}, "pdf": {"name": "1202.3764.pdf", "metadata": {"source": "CRF", "title": "Adjustment Criteria in Causal Diagrams: An Algorithmic Perspective", "authors": ["Johannes Textor"], "emails": ["textor@tcs.uni-luebeck.de", "liskiewi@tcs.uni-luebeck.de"], "sections": [{"heading": null, "text": "Identifying and controlling bias is a key problem in empirical sciences. Causal diagram theory provides graphical criteria for deciding whether and how causal effects can be identified from observed (nonexperimental) data by covariate adjustment. Here we prove equivalences between existing as well as new criteria for adjustment and we provide a new simplified but still equivalent notion of dseparation. These lead to efficient algorithms for two important tasks in causal diagram analysis: (1) listing minimal covariate adjustments (with polynomial delay); and (2) identifying the subdiagram involved in biasing paths (in linear time). Our results improve upon existing exponential-time solutions for these problems, enabling users to assess the effects of covariate adjustment on diagrams with tens to hundreds of variables interactively in real time."}, {"heading": "1 Introduction and Motivation", "text": "A notorious problem affecting probabilistic reasoning in causal structures is bias. For instance, we might study whether regular coffee drinking (C) increases the risk of suffering a heart attack (H). Such a study might be compromised by an unobserved genetic predisposition (U) that causes an increased preference for coffee drinking but also for smoking (S), which does increase the risk to suffer a heart attack. These causal influences can be modeled as a causal diagram G = C \u2190 U \u2192 S \u2192 H, whose arrows indicate the directionality of causal relationships between the variables of interest [9]. The paths from U to both C and H in this diagram indicate that an observed relation between C and H will be confounded by U, which may obscure or artificially increase the putative causal ef-\nfect. This bias can be controlled by adjustment for S, e.g. by averaging separate effect estimates for smokers and non-smokers. We can represent adjustment in the diagram by labeling S: C \u2190 U \u2192 S \u2192 H. This labeling blocks the biasing path from C to H.\nTo avoid bias, it may seem advisable to adjust for all covariates in our study. Unfortunately, adjustment can also create bias. A folklore example is the following: If we ask Harvard students for their grades and their parents\u2019 income, we may well find an inverse correlation between the two, which could lead us to the interesting hypothesis that rich people have dumber than average children. However, a more likely explanation is that having rich parents (R) or being smart (S) both increase the odds of getting to Harvard (H). This hypothesis corresponds to the diagram R\u2192 H \u2190 S, in which H is labeled because we implicitly adjusted for H by restricting our study to Harvard students only. Because H is a common descendant of R and S, this opens a biasing path between R and S, which leads to so-called Berksonian bias [2] \u2013 hence, our \u201cinteresting\u201d observation is merely an artifact. A further example where confounding and Berksonian bias combine to so-called M-bias is shown in Figure 1. In general, any type of bias that can be expressed in the formal framework of causal diagrams corresponds to a certain type of path, called a biasing path [10]. Within the mathematical theory behind causal diagrams [9], graphical identification criteria have been derived that tell us whether \u2013 and how \u2013 we may dissect the causal effect from bias by covariate adjustment, provided that we know the causal relationships between exposure, outcome, and covariates in our study. Sets of covariates that allow identifying the causal effect are called adjustments. In this paper, we are concerned with minimal adjustments, which do not contain other adjustments as proper subsets (e.g., {FI} and {MD,MR} but not {FI,MD,MR} in Figure 1). Minimal adjustments are important because adjusting for too many variables may decrease statistical power."}, {"heading": "2 Contributions", "text": "If done by hand, testing the graphical criteria for adjustment is a cumbersome and error-prone process unless the diagram is very small. This is because most criteria are stated as path properties, and even diagrams with merely tens of variables and edges can contain millions of paths1. The analysis of such diagrams lends itself well to automation by a computer program. In 2010, at least three programs were presented for analyzing causal diagrams: The DAG program by Knu\u0308ppel [6]; dagR by Breitling [3]; and Commentator by Kyono [7]. However, even these programs still have their problems with large diagrams [3], to the extent that diagrams with tens of variables can be intractable.\nWe argue that the root of these problems is that existing criteria do not lend themselves well to algorithmic implementation. For example, the aforementioned programs contain functions to list all minimal adjustments. They do this by generating all possible covariate sets, and then testing for each set whether Pearl\u2019s back door criterion (to be defined later) is satisfied. For a diagram with 30 variables, this means that 230 covariate sets may have to be tested \u2013 a very large number even for a computer program. Here, we will develop criteria that lead naturally to more efficient algorithms for solving such problems.\n1The author knows of an incident where a student was asked to list all paths for a diagram with 10 variables and 37 edges. It took three months.\nAfter defining the preliminaries in Section 3, the presentation of our results is organized in two parts: the analysis of adjustment and d-separation criteria in Section 4, and the algorithmic applications in Section 5. Thus causality theorists who may be interested in the discussion of the criteria, but not in the algorithms, can focus on to Section 4. Specifically, our contributions address the two following problems:\n(1) Enumeration of all minimal adjustment sets. The first complete (i.e., necessary and sufficient) criterion for validity of covariate adjustment was recently given by Shpitser et al. [12]. We prove that when restricting our attention to minimal adjustments, this is equivalent to Pearl\u2019s sufficient, but not necessary, back-door criterion [9]. This way we also obtain a complete criterion for minimal covariate adjustment in terms of the moral graph [8]. Our results hold for acyclic causal diagrams (DAGs) and extend to the case where exposure and outcome are sets of variables, with the minor restriction that the diagrams be loop-free with respect to the exposure (i.e. there exists no causal path that starts and ends in X).\nBecause the moral graph is an undirected graph, this leaves us with a minor variation of a standard graph problem: finding vertex separators of an undirected graph. In Section 5.1, we present an algorithm that outputs the set of all minimal adjustments (which may have exponential size) using only polynomial time per element output. This improves upon existing algorithms that either require exponential worst-case time before producing any output (such as those used in the aforementioned programs), or terminate in polynomial time but output only one solution (e.g. [1, 15]).\n(2) Identifying all biasing paths. It is often desirable to determine via which covariates a bias is actually mediated (bold paths in Figure 1a,b). In large diagrams, this can be difficult as the somewhat intricate definition of biasing paths allows sometimes, but not always, to use edges in the opposite direction. In Section 4.2, we show that one can transform (by stripping the heads from certain arrows) a diagram G adjusted for Z into a mixed graph GZ\u03c6 with the property that open paths in G bijectively correspond to forks in G\u03c6; a fork is a pair of directed paths connected by an undirected path. This characterization yields an algorithm that finds all biasing paths (i.e., labels all edges lying on biasing paths like in Figure 1a,b) in linear time (Section 5.2). To our knowledge, no previous algorithm exists that addresses this problem; to facilitate bias diagnosis in causal diagrams, the DAG program and dagR instead resort to listing all biasing paths \u2013 which quickly becomes intractable in even modestly sized diagrams, as discussed above."}, {"heading": "3 Preliminaries", "text": "We use the following terms from the causal diagram literature, most of which are identical to their standard graph theory counterparts. However, we would like to point out to readers unfamiliar with causal diagrams that the notion of a path in a causal diagram is in fact a bit different from the usual notion of a path in a directed graph (termed here a directed or causal path).\nGraphs and variables. A digraph is a tuple G = (V,E) of vertices (nodes) V and directed edges E \u2286 {(u, v) | u, v \u2208 V, u 6= v}. More generally, a mixed graph is a tuple G = (V,E) of vertices V and directed or undirected edges E \u2286 {(u, v) | u, v \u2208 V, u 6= v} \u222a {{u, v} | u, v \u2208 V, u 6= v}. Because the vertices in causal diagrams represent observed variables, we use the terms \u201cvertex\u201d, \u201cnode\u201d and \u201cvariable\u201d interchangeably. Given two vertex sets X and Y , the other vertices from V \\ (X \u222a Y ) are also called covariates. We will often specify a subset of latent covariates L \u2286 V \\ (X \u222a Y ), for which we cannot adjust.\nPaths. A path of length k \u2212 1 is a sequence of vertices v1, . . . , vk in which each vertex occurs at most once, and for all i \u2208 {1, . . . , k \u2212 1}, vi and vi+1 are connected by a directed edge (vi, vi+1) or (vi+1, vi) or an undirected edge {vi, vi+1}. A path can have length 0. A path from x \u2208 V to y \u2208 V is called causal or directed if it only contains directed edges pointing away from x, and is called biasing otherwise. A directed or mixed graph is called acyclic if there is no directed path of nonzero length from a vertex to itself; \u201cdirected acyclic graph\u201d is abbreviated by \u201cDAG\u201d.\nDescendants and Ancestors. If there is a directed path from x to y then x is an ancestor of y and y is a descendant of x. The ancestor set An(X) of a vertex set X contains all ancestors of vertices in X (this includes X). Analogously, the descendant set De(X) is the set of all descendants of any node in X. Given a graph G = (V,E) and a vertex set W \u2286 V , the ancestor graph G[An(W )] is the subgraph of G consisting only of the vertices in An(W ) and all edges between them.\nIn addition to these standard concepts, we use the following notions from the causal diagram literature.\nDefinition 3.1 (d-Connectivity and d-Separation [9]). A path \u03c0 = v1, . . . , vk in a DAG G = (V,E) is called dconnected, active or open with respect to Z \u2286 V if (1) for all subsequences of \u03c0 of the form vi\u22121 \u2190 vi \u2192 vi+1, vi\u22121 \u2192 vi \u2192 vi+1 or vi\u22121 \u2190 vi \u2190 vi+1, the middle vertex vi is not in Z; (2) for all subsequences of \u03c0 of the form vi\u22121 \u2192 vi \u2190 vi+1, the middle vertex vi is in An(Z). If one of these conditions does not hold then\nthe path is called blocked by Z. Two disjoint vertex sets X,Y \u2286 V are d-connected with respect to Z if there exists a d-connected path from some x \u2208 X to some y \u2208 Y . If such a path does not exist then X and Y are said to be d-separated by Z.\nDefinition 3.2 (Moral Graph [8]). Given a directed graph G, the moral graph Gm is the undirected graph obtained by transformingG as follows: (1) For all pairs of edges of the form (u, v), (w, v), add an undirected edge u,w to G. (2) Substitute every directed edge (u, v) by an undirected edge {u, v}.\nDefinition 3.3 (Back-Door Graph). Given a directed graph G = (V,E) and a vertex set X \u2286 V , the backdoor graph, denoted as G\n\u00af X , is obtained by removing\nall edges (u, v) \u2208 E where u \u2208 X and v /\u2208 X.\nTo define the causal effect of X on Y we use Pearl\u2019s do(x) notation [9], which intuitively corresponds to an idealized experiment in which the variables inX can be set to given values; in the causal diagram, this would correspond to removing all edges entering X, disconnecting directed influences stemming from the parent variables of X. We will denote the resulting graph as GX\u0304 .\nDefinition 3.4 (Adjustment [9]). Given a DAG G = (V,E) and three pairwise disjoint vertex sets X,Y, Z \u2286 V , the set Z is called covariate adjustment for estimating the causal effect from X to Y , or simply adjustment, if P (y | do(x)) = \u2211 z P (y | x, z)P (z) in every model that induces G. Z is a minimal adjustment if no proper subset of Z is also an adjustment."}, {"heading": "4 Criteria for Adjustment and Biasing Paths", "text": "This section is organized in two parts. In the first part, we show that the sound but incomplete back-door criterion for identifiability of the causal effect becomes equivalent to the slightly more complex, but sound and complete criterion recently proposed by Shpitser et al. [12] if we consider only minimal adjustments. These results hold for all directed acyclic graphs with the following property:\nDefinition 4.1 (X-Loop-Freeness). A DAG G = (V,E) is X-loop-free with respect to the vertex set X \u2286 V if it contains no directed path \u03c0 = v1, . . . , vk, with k \u2265 3, v1, vk \u2208 X and v2, . . . , vk\u22121 6\u2208 X.\nG is always X-loop-free if X is a singleton set. For an example DAG G that is not X-loop-free see Figure 2."}, {"heading": "4.1 Equivalence of Adjustment Criteria in", "text": "the X-Loop-Free, Minimal Case\nThe following criterion was recently given by Shpitser et al. [12], and is the first complete criterion for covariate adjustment.\nTheorem 4.2 (Adjustment Criterion [12]). Given a causal diagram G = (V,E) and three pairwise disjoint vertex sets X,Y, Z \u2286 V the following two statements are equivalent:\n1. Z is an adjustment in G with respect to X and Y . 2. (Adjustment Criterion) (i) No element in Z is a\ndescendant in GX\u0304 of any w \u2208 V \\X on a causal X-Y -path2 (forbidden vertex), and (ii) all noncausal paths in G from X to Y are blocked by Z.\nThe following two criteria from the literature are sound, but not complete.\nDefinition 4.3. Let G = (V,E) be a given causal diagram and let X,Y, Z \u2286 V be disjoint sets of nodes.\n\u2022 (Back-door Criterion [9]) Z satisfies the back-door criterion relative to (X,Y ) if (i) no element in Z is a descendant of X and (ii) Z d-separates X and Y in G\n\u00af X .\n\u2022 (Moral Graph Criterion3) Z satisfies the moral graph criterion relative to (X,Y ) if (i) Z \u2286 An(X \u222aY )\\De(X) and (ii) Z separates X and Y in the ancestor moral graph (G\n\u00af X [An(X \u222a Y )])m.\nIt is easy to see that the criteria of Theorem 4.2 are not equivalent with the back-door criterion. For example the graph z \u2190 x \u2192 y does not fulfill the back-door criterion but both criteria of Theorem 4.2 are satisfied. However, if we restrict our attention to minimal vertex sets Z then all criteria became equivalent if we\n2Shpitser et al. [12] write instead \u201c... on a proper causal X-Y -path\u201d. However, in the X-loop-free DAGs we consider, all causal X-Y -paths are proper.\n3This criterion is an extension of the work by Lauritzen et al. [8] and has been used e.g. by Kyono [7].\nassume additionally that a DAG G is X-loop-free. As usually we say here that Z is a minimal set satisfying a property P if Z satisfies P and no proper subset Z \u2032 ( Z satisfies P. Theorem 4.4 (Minimal Covariate Adjustment). Given a causal diagram G = (V,E) and three pairwise disjoint vertex sets X,Y, Z \u2286 V , such that G is X-loop-free, the following statements are equivalent:\n1. Z is a minimal covariate adjustment for identifying the causal effect from X to Y .\n2. Z is a minimal set satisfying the adjustment criterion relative to (X,Y ).\n3. Z is a minimal set satisfying the back-door criterion relative to (X,Y ).\n4. Z is a minimal set satisfying the moral graph criterion relative to (X,Y ).\nAs shown in Figure 2 the assumption that a DAG G is additionally X-loop-free is essential.\nWe prove the theorem using the following auxiliary lemmata for an arbitrary causal diagram G = (V,E) and pairwise disjoint sets of vertices X,Y, Z \u2286 V , such that G is X-loop-free with respect to X. The considered criteria are relative to (X,Y ) in G.\nLemma 4.5 ([12], Lemma 1). If Z satisfies the backdoor criterion then Z satisfies the adjustment criterion.\nLemma 4.6. If Z is a minimal set satisfying the adjustment criterion then Z contains no descendant of X.\nProof. Assume that there exists z \u2208 Z which is a descendant in G of a vertex in X. Note that from the adjustment criterion it follows that there is no directed path from z to a vertex in Y . Moreover, from the assumption that G is X-loop-free it follows that there is no directed path from z to a vertex in X.\nLet W \u2286 V be the subset of all descendants of z in G, including z. It is true that (1) there exists at least one node z \u2208 Z \u2229 W , (2) in G there exists no edge from a node in W to a node in V \\ W (but there may be edges from nodes in V \\W to nodes in W ), and (3) X \u222a Y \u2286 V \\W . The properties (1) and (2) follow easily from the definition of W . The fact that Y \u2286 V \\W is true since otherwise there exists a causal path in G connecting a node in X with a node in Y that is blocked. Finally X \u2286 V \\W is true since G is X-loop-free.\nNow we remove all nodes z \u2208 Z \u2229 W from Z and call the new set Z \u2032. By the property (1) above Z \u2032 is a proper subset of Z. We show that Z \u2032 satisfies\nboth statements (i) and (ii) of the adjustment criterion which contradicts the assumption that Z is minimal.\nSince Z satisfies the statement (i) and Z \u2032 \u2286 Z hence Z \u2032 has to satisfy (i), too. Below we show that also statement (ii) is true, i.e. that any non-causal path \u03c0 in G from X to Y is blocked by Z \u2032.\nTo see this consider first that \u03c0 does not cross W , i.e. that \u03c0 does not contain any node in W . Since \u03c0 is blocked by Z and it does not contain any node in Z \\ Z \u2032 (recall, we removed these nodes from Z) \u03c0 remains blocked by Z \u2032. Next assume that \u03c0 reaches a node in W . The path has length at lest 2, i.e. \u03c0 consists of at least 3 vertices. Let v1, v2, . . . , vk, with k \u2265 3, be the consecutive nodes along that path. Let i be the smallest index such that vi\u22121 6\u2208W and vi \u2208W . From the property (3) above it follows that such an i exists. Moreover, let j > i be the smallest index such that vj 6\u2208 W ; again by (3) such an index exists, too. Now, from the property (2) we get that the edge incident to vi\u22121 and vi has to be vi\u22121 \u2192 vi and the edge incident to vj\u22121 and vj has to be vj\u22121 \u2190 vj . Since neither vi, . . . vj\u22121 nor their descendants belong to Z \u2032, the path \u03c0 has to be blocked.\nLemma 4.7. If Z is a minimal set satisfying the adjustment criterion then Z is a minimal set satisfying the back-door criterion.\nProof. Assume Z is a minimal set satisfying the adjustment criterion. By Lemma 4.6 we have that no element in Z is a descendant of X. Moreover, by the property (ii) of the adjustment criterion it follows that Z d-separates X and Y in G\n\u00af X . Thus, Z satisfies the\nback-door criterion. To prove the minimality, assume a proper subset Z \u2032 of Z satisfies the back-door criterion. From Lemma 4.5 it follows that Z \u2032 satisfies the adjustment criterion \u2013 a contradiction to the assumption that Z is a minimal set satisfying this criterion.\nLemma 4.8. If Z is a minimal set satisfying the backdoor criterion then Z is a minimal set satisfying the adjustment criterion.\nProof. Assume Z is a minimal set satisfying the backdoor criterion. From Lemma 4.5 it follows that Z satisfies the adjustment criterion. To see the minimality assume to the contrary that a minimal Z \u2032 \u2286 Z satisfying this criterion is a proper subset of Z. By Lemma 4.7 we get that Z \u2032 is a minimal set satisfying the back-door criterion \u2013 a contradiction.\nProof (of Theorem 4.4). We have proved that statements (1), (2) and (3) in Theorem 4.4 are equivalent;\nwe now complete the proof by showing that statements (3) and (4) are equivalent. This means showing that a minimal adjustment Z contains only variables from An(X \u222a Y ) \\ De(X). It was shown above that Z contains no variables from De(X); thus we are left with showing that Z \u2286 An(X \u222a Y ). Suppose the converse, then there exists a z \u2208 Z such that z /\u2208 An(X) \u222a An(Y ) \u222a De(X). Then removing all vertices Z \\ (An(X) \u222a An(Y ) \u222a De(X)) from Z we get a proper subset Z \u2032 of Z and it is easy to see that Z \u2032 still blocks all paths from X to Y . Thus Z is not minimal, a contradiction.\n4.2 A Simplified Notion of d-Connectedness\nIn the following, we show that the rather intricate concept of d-connectedness can be translated to a simpler notion in a mixed graph. This will be useful later on to calculate the union of all biasing paths in an insufficiently adjusted causal diagram. Note that for this purpose, no special treatment of latent variables is necessary.\nDefinition 4.9 (Fork). A path v1, . . . , vk in a mixed graph G = (V,E), is called a fork if for some i, j with 1 \u2264 i \u2264 j \u2264 k, vi \u2192 . . . \u2192 v1 and vj \u2192 . . . \u2192 vk are directed paths in G and vi\u2014. . .\u2014vj is an undirected path in G.\nFor example, t\u2192 u\u2192 v and t\u2190 u \u2014 v \u2192 w are forks but t\u2192 u \u2014 v is not a fork. Definition 4.10 (Fork Graph). Given a DAG G = (V,E) and three disjoint vertex sets X,Y, Z \u2286 V , the fork graph GZ\u03c6 = (V,E\n\u2032), E\u2032 \u2286 {(v, w), {v, w} | v, w \u2208 V } is constructed by performing for every edge (v, w) \u2208 E the following: (1) If v \u2208 Z, remove (v, w). (2) If w \u2208 An(Z), then substitute (v, w) by an undirected edge {v, w}. (3) Otherwise leave (v, w) unmodified.\nE.g. for G= x y a b c d e f (where Z = {c}),\nGZ\u03c6= x y a b c d e f where the bold edges are those that were substituted by undirected edges.\nTheorem 4.11 (Mapping d-connected paths to forks). Given a causal diagram G = (V,E), three pairwise disjoint vertex sets X,Y, Z \u2286 V and a path \u03c0 from X to Y , then \u03c0 is d-connected in G with respect to Z if and only if \u03c0 is a fork in GZ\u03c6 .\nProof. First note that all paths from X to Y in GZ\u03c6 that contain no collider u\u2192 v \u2190 w are forks. In fact, if there is no undirected edge on the path then we are done. Otherwise suppose u \u2192 v \u2014 w are violating\nedges; this would imply either that v \u2192 w is an edge in E and w is an ancestor of some z \u2208 Z or that v \u2190 w belongs to E and v is an ancestor of some z \u2208 Z; in both cases we get the contradiction that u\u2192 v remains an edge in GZ\u03c6 . If u \u2014 v \u2190 w are violating edges, we argue analogously.\nNow let \u03c0 be any d-connected path in G. Note that \u03c0 remains a path in GZ\u03c6 since the only edges we remove from G constructing GZ\u03c6 are the edges (v, w) with v \u2208 Z and there will not be such an edge on a d-connected path from X to Y . To show that \u03c0 is a fork in GZ\u03c6 we distinguish two cases. (1) \u03c0 contains no collider u \u2192 v \u2190 w in G. Then \u03c0 is itself a fork in G and constructing GZ\u03c6 any substitution of a directed edge by an undirected one implies that all its predecessor edges in a directed subpath become undirected thus yielding a fork in GZ\u03c6 . (2) \u03c0 contains a collider u \u2192 v \u2190 w. Because \u03c0 is d-connected, the middle node v is in An(Z). Thus, in GZ\u03c6 , the edges from v\u2019s leftmost and rightmost ancestors in \u03c0 that point to v are all undirected in GZ\u03c6 . Iterating this argument yields that \u03c0 is a fork in GZ\u03c6 .\nFor the other direction, let \u03c0 be any fork in GZ\u03c6 . The undirected part of \u03c0 consists entirely of vertices from An(Z), and no edge on \u03c0 points towards a vertex in An(Z) on \u03c0 because it would otherwise have been deleted from GZ\u03c6 . Hence \u03c0 is d-connected in G."}, {"heading": "5 Algorithmic Applications", "text": "The results of the previous section brought the criteria for covariate adjustment in causal diagrams closer to standard graph theory, which we can now exploit to obtain efficient algorithms for two important problems related to causal diagram analysis."}, {"heading": "5.1 Enumerating Minimal Adjustment Sets", "text": "Problem 5.1 (list-minimal-adjustments).\nInput A DAG G = (V,E) and three pairwise disjoint vertex sets X,Y, L \u2286 V such that G is X-loopfree.\nOutput The set of all minimal covariate adjustments Z \u2286 V that allow identification of the causal effect from X to Y and contain no variables from L.\nDue to the equivalence of the adjustment and backdoor criteria in the minimal case (Theorem 4.4), we can solve the above problem by listing instead all minimal d-separators of G\n\u00af X . Formally, this shows that\nthe above problem can be reduced in linear time to the following one:\nProblem 5.2 (list-minimal-d-separators).\nInput A DAG G = (V,E) and three pairwise disjoint vertex sets X,Y, L \u2286 V such that G is X-loopfree.\nOutput The set of all minimal covariate sets Z \u2286 V that d-separate X from Y in G and contain no variables from L.\nAlgorithms for similar problems were presented by Acid and Campos [1] and Tian et al. [15]. These algorithms are either directly based on or very similar to the well-known Ford-Fulkerson-Algorithm for finding a separating set in an undirected graph. They are thus able to output one d-separator, if it exists, in worst-case polynomial time. Unfortunately, they do not lend themselves to generalization for outputting all d-separators.\nIn fact, a polynomial time algorithm that outputs all d-separators cannot exist for the simple reason that the number of these sets may be exponential in the size of the graph, such that the output alone would require more than polynomial time. This problem is addressed by so-called polynomial delay algorithms, whose complexity is measured not by their total running time, but per object output. Thus, if the number of solutions is polynomial, a polynomial delay algorithm will find and output them all in polynomial time. Otherwise, it can still produce a polynomially long list of different outputs in polynomial time, and the listing can be stopped and resumed at any time. This seems well suited to the problem at hand, because the adjustments are usually to be assessed by a human user, for whom a complete exponentially long list of options would be of little use. For more information on polynomial delay algorithms, we refer to the nice introduction in Takata\u2019s paper [13].\nTheorem 5.3 (Listing minimal d-separators with polynomial delay). The problem list-minimal-dseparators can be solved by an algorithm that, after O(n3) preprocessing time, starts outputting the list of minimal d-separators using at most O(n3) processing time per element output, where n is the number of variables in the input DAG.\nProof. Applying the moral graph criterion, this boils down to a simple adaptation of an algorithm by Takata [13] that lists all minimal X-Y -separators of an undirected graph with polynomial delay O(nm) and total space requirement O(n), where m is the number of edges in the graph. We only need to show that this algorithm can be extended to list only those minimal separators that do not contain any vertex from L \u222a W (where W are the \u201cforbidden vertices\u201d from Theorem 4.2). For this purpose we can assume that W \u2286 L, i.e., we make all forbidden variables latent.\nTo ensure that forbidden vertices are not used in separators, we connect in the ancestor moral graph all variable pairs that are linked via forbidden vertices and then remove all forbidden vertices. Formally, let Gm = (V,E) be the ancestor moral graph. Let the graph GL = (V \\L,E\u2032) be defined by {u, v} \u2208 E\u2032 iff (1) {u, v} \u2208 E or (2) there exists an undirected path u\u2014 l1\u2014. . .\u2014lk\u2014v in G such that all intermediate vertices li are in L. It is easy to see that the X-Y -separators of GL are precisely those X-Y -separators of Gm that do not contain any vertex from L. GL can be constructed from G in time O(n2).\nNow, the following algorithm fulfills the properties claimed by the theorem: (1) Given the DAG G and X,Y, L, construct the ancestor moral graph Gm := (G\n\u00af X [An(X \u222a Y )])m. (2) Construct GL from Gm as explained above. (3) Apply Takata\u2019s algorithm to output all minimal X-Y -separators of GL. The runtime of O(n3) is larger than the one of Takata\u2019s algorithm (O(nm)) because of the additional edges that are inserted into the moral graph and the L-transitive graph. The space requirement is O(n), which is asymptotically optimal [13]."}, {"heading": "5.2 Identifying Bias in Insufficiently Adjusted Diagrams", "text": "Beyond minimal adjustments, causal diagrams provide an in-depth understanding of the \u201cflow\u201d of causal effects and bias via the causal and biasing paths they contain. The set of biasing paths, in particular, constitutes a witness of insufficient adjustment in a diagram and is thus useful for analyzing study design. To facilitate such analysis, the aforementioned programs DAG program and dagR contain algorithms that list all paths in a diagram. Such a list is easy to generate with polynomial delay using a standard backtracking approach. However, a full list of paths quickly becomes prohibitively long as the number of variables increases.\nA strategy in such cases is to output a compressed representation of the path list rather than the list itself. The most natural compressed representation of a list of paths in a graph is probably the subgraph induced by these paths. Formally, we state our goal as solving the following problem: Problem 5.4 (identify-biasing-paths).\nInput A DAG G = (V,E) and three pairwise disjoint vertex sets X,Y, Z \u2286 V . Output The list of all edges in E lying on biasing paths from X to Y that are not blocked by Z.\nThis problem requires more effort to solve than one would perhaps expect. In particular, the following two approaches do not work.\nFirst, one might consider constructing the ancestor moral graph (G\n\u00af X [An(X \u222a Y \u222a Z)])m and then label-\ning all undirected paths between X and Y in that graph. To see that this fails, consider the diagram in Figure 1a; in the ancestor moral graph, MR lies on an undirected path between LE and D even though it does not lie on a biasing path in the diagram (unless we adjust for MD like in Figure 1b). Second, one might consider using Shachter\u2019s \u201cBayes-Ball\u201d algorithm [11] that performs an extended depth-first search to find out if X and Y are d-separated by Z. However, \u201cBayes-Ball\u201d also would label edges that lie on non-simple biasing paths, i.e., biasing paths where edges can occur more than once. There appears to be no easy way of resolving these issues. However, the equivalence between d-connected paths and forks proved in Theorem 4.11 can be used to solve this problem in linear time. Theorem 5.5 (Identifying biasing paths in linear time). The problem identify-biasing-paths can be solved in time O(|V |+ |E|).\nWe will prove this theorem by showing that all X-Y - forks in the fork graph (G\n\u00af X)Z\u03c6 , obtained from G by\nremoving all edges emanating from X and then applying Definition 4.10, can be identified in linear time. To this end, we generalize an algorithm presented by Eppstein [4, 5] to find disjoint directed paths from common ancestors to vertex sets X and Y in DAGs, which corresponds to the special case Z = \u2205 of our problem. Eppstein\u2019s algorithm is based on computing for each vertex an index which we generalize to mixed graphs as follows: Definition 5.6 (Bottleneck number). Given the acyclic mixed graph G = (V,E) and two disjoint vertex sets X,Y \u2286 V , let T : V \u2192 N be a topological numbering of G, i.e. an index with T (v) < T (w) if there is a directed path from v to w in G. Then the bottleneck number B(v) \u2208 N \u222a {\u22a5} is defined for every vertex v as the largest index T (w) of a vertex w (possibly equal to v) through which all directed paths from v to X and all directed paths from v to Y go, if at least one such path exists. Otherwise B(v) = \u22a5.\nE.g for T (v) = 8 7 6 5 4 2 3 1 , we get B(v) =\n8 7 6 \u22a5 \u22a5 8 \u22a5 7 (forks labeled bold) in the example introduced after Definition 4.10. Eppstein [4, Lemma 7] proved that for every v \u2208 V , there are two disjoint directed paths from v to X and Y if and only if B(v) = T (v) (e.g. for the vertex with index 6 above). We generalize this lemma to acyclic mixed graphs through the following two lemmata. The proofs will appear in the full version of this paper.\nLemma 5.7. Let G = (V,E) be an acyclic mixed graph and for every v \u2208 V , let B(v) denote the bottleneck number of v with respect to X,Y \u2286 V . Then v lies on a fork between X and Y if and only if one of the following three conditions holds: (1) B(v) = T (v); (2) v lies on an undirected path between two vertices u,w with B(u), B(v) 6= \u22a5 and B(u) 6= B(v); (3) B(v) 6= \u22a5 and v is reachable via a directed path from another vertex u for which one of the previous two conditions is satisfied.\nLemma 5.8. Let G\u03c6 = (V,E) be the fork graph of some DAG G and vertex set Z, and fix two disjoint vertex sets X,Y \u2286 G. Every edge (u, v) \u2208 E or {u, v} \u2208 E lies on a fork between X and Y if and only if both u and v lie on forks between X and Y .\nProof. (Theorem 5.5) Given G,X, Y, Z, we first compute (G\n\u00af X)Z\u03c6 , which requires O(|V | + |E|) time. Then\nwe compute the bottleneck numbers B(v) through a trivial extension of the O(|V |+ |E|) algorithm by Eppstein [4]. It remains to be shown that the vertices that lie on forks in (G\n\u00af X)Z\u03c6 can be identified in linear time.\nWe first compute a list of all biconnected components with respect to the undirected edges in (G\n\u00af X)Z\u03c6 . For\nevery such component C with at least two vertices, we then perform the following on a copy of C: Find all vertices v in C with B(v) 6= \u22a5 and for every distinct value n of B(v), create two new vertices sn and tn with an edge {sn, tn}. For every v with B(v) 6= \u22a5, create also an edge {tB(v), v}. Compute C\u2019s block tree Cblock, whose vertices correspond to the biconnected components and articulation points (vertices belonging to more than one biconnected component) in C. Every edge {sn, tn} from C corresponds to a leaf in Cblock; label all these vertices, and afterwards label all vertices on paths between labeled vertices in the block tree. This corresponds to a labeling of the edges in C. Delete all edges that have not been labeled from C, and afterwards delete all isolated vertices except those with B(v) = T (v). Every remaining vertex fulfills either condition (1) or condition (2) from Lemma 5.7.\nEvery vertex v not belonging to one of the components treated above can be deleted from (G\n\u00af X)Z\u03c6 if it does\nnot fulfill either condition (1) or condition (3) from Lemma 5.7. A list of all vertices fulfilling condition (3) can be obtained by a single traversal of (G\n\u00af X)Z\u03c6\nafter computing the bottleneck numbers."}, {"heading": "6 Conclusion", "text": "We studied several criteria for adjustment and dseparation in causal diagrams and obtained via these criteria fast algorithms for listing minimal adjustments and for identifying bias in causal diagrams. These al-\ngorithms form the basis for our online tool DAGitty (dagitty.net), which provides a graphical user interface for analyzing causal diagrams [14]. With the new algorithms, DAGitty is capable of analyzing causal diagrams with tens of variables, including some that were intractable by earlier programs, in real time. DAGitty\u2019s open source code can be consulted for additional reference on the algorithms presented here.\nFuture work could develop similar algorithms for other adjustment methods like front-door adjustment [9]."}], "references": [{"title": "An algorithm for finding minimum d-separating sets in belief networks", "author": ["S. Acid", "L.M.D. Campos"], "venue": "Proceedings of UAI 1996, pages 3\u201310,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1996}, {"title": "Limitations of the application of fourfold tables to hospital data", "author": ["J. Berkson"], "venue": "Biometrics Bulletin, 2(3):47\u2013 53,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1946}, {"title": "dagR: A suite of R functions for directed acyclic graphs", "author": ["L. Breitling"], "venue": "Epidemiology, 21(1):586\u2013587,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2010}, {"title": "Finding common ancestors and disjoint paths in DAGs", "author": ["D. Eppstein"], "venue": "Technical Report 95-52, Univ. of California, Irvine,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 1995}, {"title": "Finding the k shortest paths", "author": ["D. Eppstein"], "venue": "SIAM J. Comput., 28(2):652\u2013673,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1998}, {"title": "DAG program: identifying minimal sufficient adjustment sets", "author": ["S. Kn\u00fcppel", "A. Stang"], "venue": "Epidemiology, 21(1):159,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2010}, {"title": "Commentator: A front-end userinterface module for graphical and structural equation modeling", "author": ["T.M. Kyono"], "venue": "Technical Report R-364, University of California, Los Angeles,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1998}, {"title": "Independence properties of directed markov fields", "author": ["S.L. Lauritzen"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1990}, {"title": "Causality", "author": ["J. Pearl"], "venue": "Cambridge U. Press,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2000}, {"title": "Modern Epidemiology", "author": ["K.J. Rothman", "S. Greenland", "T.L. Lash"], "venue": "Wolters Kluwer,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2008}, {"title": "Bayes-ball: The rational pastime", "author": ["R.D. Shachter"], "venue": "Proceedings of UAI 1998, pages 480\u2013487,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 1998}, {"title": "On the validity of covariate adjustment for estimating causal effects", "author": ["I. Shpitser", "T. VanderWeele", "J. Robins"], "venue": "Proceedings of UAI 2010, pages 527\u2013536. AUAI Press,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2010}, {"title": "Space-optimal, backtracking algorithms to list the minimal vertex separators of a graph", "author": ["K. Takata"], "venue": "Discrete Applied Mathematics, 158:1660\u20131667,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2010}, {"title": "DAGitty: A graphical tool for analyzing causal diagrams", "author": ["J. Textor", "J. Hardt", "S. Kn\u00fcppel"], "venue": "Epidemiology,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2011}, {"title": "Finding minimal dseparators", "author": ["J. Tian", "A. Paz", "J. Pearl"], "venue": "Technical Report R-254, University of California, Los Angeles,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 1998}], "referenceMentions": [{"referenceID": 8, "context": "These causal influences can be modeled as a causal diagram G = C \u2190 U \u2192 S \u2192 H, whose arrows indicate the directionality of causal relationships between the variables of interest [9].", "startOffset": 177, "endOffset": 180}, {"referenceID": 1, "context": "Because H is a common descendant of R and S, this opens a biasing path between R and S, which leads to so-called Berksonian bias [2] \u2013 hence, our \u201cinteresting\u201d observation is merely an artifact.", "startOffset": 129, "endOffset": 132}, {"referenceID": 9, "context": "In general, any type of bias that can be expressed in the formal framework of causal diagrams corresponds to a certain type of path, called a biasing path [10].", "startOffset": 155, "endOffset": 159}, {"referenceID": 8, "context": "Within the mathematical theory behind causal diagrams [9], graphical identification criteria have been derived that tell us whether \u2013 and how \u2013 we may dissect the causal effect from bias by covariate adjustment, provided that we know the causal relationships between exposure, outcome, and covariates in our study.", "startOffset": 54, "endOffset": 57}, {"referenceID": 5, "context": "In 2010, at least three programs were presented for analyzing causal diagrams: The DAG program by Kn\u00fcppel [6]; dagR by Breitling [3]; and Com-", "startOffset": 106, "endOffset": 109}, {"referenceID": 2, "context": "In 2010, at least three programs were presented for analyzing causal diagrams: The DAG program by Kn\u00fcppel [6]; dagR by Breitling [3]; and Com-", "startOffset": 129, "endOffset": 132}, {"referenceID": 6, "context": "mentator by Kyono [7].", "startOffset": 18, "endOffset": 21}, {"referenceID": 2, "context": "However, even these programs still have their problems with large diagrams [3], to the extent that diagrams with tens of variables can be intractable.", "startOffset": 75, "endOffset": 78}, {"referenceID": 11, "context": "[12].", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "We prove that when restricting our attention to minimal adjustments, this is equivalent to Pearl\u2019s sufficient, but not necessary, back-door criterion [9].", "startOffset": 150, "endOffset": 153}, {"referenceID": 7, "context": "This way we also obtain a complete criterion for minimal covariate adjustment in terms of the moral graph [8].", "startOffset": 106, "endOffset": 109}, {"referenceID": 0, "context": "[1, 15]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 14, "context": "[1, 15]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 8, "context": "1 (d-Connectivity and d-Separation [9]).", "startOffset": 35, "endOffset": 38}, {"referenceID": 7, "context": "2 (Moral Graph [8]).", "startOffset": 15, "endOffset": 18}, {"referenceID": 8, "context": "To define the causal effect of X on Y we use Pearl\u2019s do(x) notation [9], which intuitively corresponds to an idealized experiment in which the variables inX can be set to given values; in the causal diagram, this would correspond to removing all edges entering X, disconnecting directed influences stemming from the parent variables of X.", "startOffset": 68, "endOffset": 71}, {"referenceID": 8, "context": "4 (Adjustment [9]).", "startOffset": 14, "endOffset": 17}, {"referenceID": 11, "context": "[12] if we consider only minimal adjustments.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "[12] but there is no set Z \u2032 fulfilling the back-door criterion by Pearl [9].", "startOffset": 0, "endOffset": 4}, {"referenceID": 8, "context": "[12] but there is no set Z \u2032 fulfilling the back-door criterion by Pearl [9].", "startOffset": 73, "endOffset": 76}, {"referenceID": 11, "context": "[12], and is the first complete criterion for covariate adjustment.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "2 (Adjustment Criterion [12]).", "startOffset": 24, "endOffset": 28}, {"referenceID": 8, "context": "\u2022 (Back-door Criterion [9]) Z satisfies the back-door criterion relative to (X,Y ) if (i) no element in Z is a descendant of X and (ii) Z d-separates X and Y in G \u0304 X .", "startOffset": 23, "endOffset": 26}, {"referenceID": 11, "context": "[12] write instead \u201c.", "startOffset": 0, "endOffset": 4}, {"referenceID": 7, "context": "[8] and has been used e.", "startOffset": 0, "endOffset": 3}, {"referenceID": 6, "context": "by Kyono [7].", "startOffset": 9, "endOffset": 12}, {"referenceID": 11, "context": "5 ([12], Lemma 1).", "startOffset": 3, "endOffset": 7}, {"referenceID": 0, "context": "Algorithms for similar problems were presented by Acid and Campos [1] and Tian et al.", "startOffset": 66, "endOffset": 69}, {"referenceID": 14, "context": "[15].", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "For more information on polynomial delay algorithms, we refer to the nice introduction in Takata\u2019s paper [13].", "startOffset": 105, "endOffset": 109}, {"referenceID": 12, "context": "Applying the moral graph criterion, this boils down to a simple adaptation of an algorithm by Takata [13] that lists all minimal X-Y -separators of an undirected graph with polynomial delay O(nm) and total space requirement O(n), where m is the number of", "startOffset": 101, "endOffset": 105}, {"referenceID": 12, "context": "The space requirement is O(n), which is asymptotically optimal [13].", "startOffset": 63, "endOffset": 67}, {"referenceID": 10, "context": "Second, one might consider using Shachter\u2019s \u201cBayes-Ball\u201d algorithm [11] that performs an extended depth-first search to find out if X and Y are d-separated by Z.", "startOffset": 67, "endOffset": 71}, {"referenceID": 3, "context": "To this end, we generalize an algorithm presented by Eppstein [4, 5] to find disjoint directed paths from common ancestors to vertex sets X and Y in DAGs, which corresponds to the special case Z = \u2205 of our problem.", "startOffset": 62, "endOffset": 68}, {"referenceID": 4, "context": "To this end, we generalize an algorithm presented by Eppstein [4, 5] to find disjoint directed paths from common ancestors to vertex sets X and Y in DAGs, which corresponds to the special case Z = \u2205 of our problem.", "startOffset": 62, "endOffset": 68}, {"referenceID": 3, "context": "Then we compute the bottleneck numbers B(v) through a trivial extension of the O(|V |+ |E|) algorithm by Eppstein [4].", "startOffset": 114, "endOffset": 117}, {"referenceID": 13, "context": "net), which provides a graphical user interface for analyzing causal diagrams [14].", "startOffset": 78, "endOffset": 82}, {"referenceID": 8, "context": "Future work could develop similar algorithms for other adjustment methods like front-door adjustment [9].", "startOffset": 101, "endOffset": 104}], "year": 2011, "abstractText": "Identifying and controlling bias is a key problem in empirical sciences. Causal diagram theory provides graphical criteria for deciding whether and how causal effects can be identified from observed (nonexperimental) data by covariate adjustment. Here we prove equivalences between existing as well as new criteria for adjustment and we provide a new simplified but still equivalent notion of dseparation. These lead to efficient algorithms for two important tasks in causal diagram analysis: (1) listing minimal covariate adjustments (with polynomial delay); and (2) identifying the subdiagram involved in biasing paths (in linear time). Our results improve upon existing exponential-time solutions for these problems, enabling users to assess the effects of covariate adjustment on diagrams with tens to hundreds of variables interactively in real time.", "creator": "TeX"}}}