{"id": "1206.4639", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Jun-2012", "title": "Adaptive Regularization for Weight Matrices", "abstract": "applications compare matrix vectors over weight - vectors, such named arow but recently fabricated empirically so preserve state - of - low - art performance at mixed problems, allowing strong theoretical guaranties. extending these findings underlying matrix notation pose challenges since achieving number bit free parameters in the covariance of total output shows as $ 43 ^ 4 $ with more normal $ 5 $ of the matrix, and $ 60 $ happens to be large in complex expressions. we describe, analyze and experiment with false positive values for coloring some of domain models. our first algorithm maintains a diagonal covariance over the parameters sets that distinguish large distance matrices. the current algorithm features the aim to capture inter - hierarchical correlation function keeping relatively number of parameters linear weight column space of the original image. we introduce both algorithms in but latter bound model generally show a finer precision performance of comparison approach near other software in prior branches : studying similar images, and ranking merging images. the factored algorithm is shown to attain faster convergence rate.", "histories": [["v1", "Mon, 18 Jun 2012 15:17:49 GMT  (341kb)", "http://arxiv.org/abs/1206.4639v1", "ICML2012"]], "COMMENTS": "ICML2012", "reviews": [], "SUBJECTS": "cs.LG cs.AI", "authors": ["koby crammer", "gal chechik"], "accepted": false, "id": "1206.4639"}, "pdf": {"name": "1206.4639.pdf", "metadata": {"source": "META", "title": "Adaptive Regularization for Weight Matrices", "authors": ["Koby Crammer", "Gal Chechik"], "emails": ["KOBY@EE.TECHNION.AC.IL", "GAL.CHECHIK@BIU.AC.IL"], "sections": [{"heading": null, "text": "with the dimension n of the matrix, and n tends to be large in real applications. We describe, analyze and experiment with two new algorithms for learning distribution of matrix models. Our first algorithm maintains a diagonal covariance over the parameters and can handle large covariance matrices. The second algorithm factors the covariance to capture inter-features correlation while keeping the number of parameters linear in the size of the original matrix. We analyze both algorithms in the mistake bound model and show a superior precision performance of our approach over other algorithms in two tasks: retrieving similar images, and ranking similar documents. The factored algorithm is shown to attain faster convergence rate."}, {"heading": "1. Introduction", "text": "Many machine learning tasks involve models in the form of a matrix. As an important example, consider the problem of linear metric learning where the dissimilarity between a pair of samples is measured using the Mahalanobis distance, parametrized by a positive semi-definite matrix. A second important example is the matrix model obtained when learning multiple linear classifiers regularized jointly, like in the case of object recognition with many classes.\nAppearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012. Copyright 2012 by the author(s)/owner(s).\nMany algorithms were developed for learning these two tasks, including online algorithms developed recently in the context of classification and ranking costs (Davis et al., 2007; Jain et al., 2008; Chechik et al., 2009).\nWhile such linear matrix models are common for metric and multiclass learning, the broader class of \u201dvector\u201d linear model are a popular choice in many domains since they provide a good balance between simplicity, scalability and performance. Methods to generate linear classifiers from data have flourished in the past decade, including SVMImportantly, when learning linear models, it was recently shown that modeling the second order information about the set of models (Crammer et al. (2009) and the references therein), or using this information during training (Duchi et al., 2010) improves the convergence rate of the learning algorithms as well as the performance of the resulting classifiers. These very effective methods were developed primarily for handling vector models, and were not designed to handle matrix models.\nAt first sight, problems that involve learning matrices could be handled directly using methods developed for learning vectors, including the second order methods described above. In practice however, matrix models often pose a challenge to scalability, since both their memory and their runtime complexity scale quadratically with the data dimensionality n. Modeling second order interactions between features may therefore require n4 parameters, limiting these methods to relatively low dimensional data.\nIn this paper we study second-order methods for learning matrix models and test them in the context of similarity learning. We describe AROMA (Adaptive Regularization Of MAtrix models) an online algorithm that learns a distribution of matrix models. Since maintaining a full covariance matrix over the parameters would not be feasible for large dimensions, we describe models that capture part of the covariance structure. We first describe a simple model with a diagonal covariance matrix. While this model scales well to large matrices, it fails to model correlations between features which could be crucial in some applications. We\nfurther describe a factored model which is still linear in the number of parameters (quadratic in the dimension), yet captures some of the correlations between features.\nIn the context of metric and similarity learning, AROMA can be used to learn a distribution over metrics, instead of a single metric. We evaluate AROMA in two tasks of retrieving images and documents by evaluating similarity between objects. We find that the two AROMA variants outperform competing methods by a large gap. Additionally, the more involved variant convergence faster than all other methods evaluated. As far as we know, this makes it the state-of-the-art method for the extensively studied task of linear similarity learning.\nNotation: In this work we often consider the bilinear form q>Wp where q \u2208 Rm, p \u2208 Rn and W \u2208 Rm\u00d7n. Given such a matrix W , we denote by vec (W ) \u2208 Rmn the vector generated by \u201cstacking\u201d the columns of the matrix W . Using this operator we can write the bilinear form as an inner product q>Wp = vec (W ) \u00b7 vec ( pq> ) . We denote by x z the element-wise product of two vectors (or matrices) and by sum(A) the sum of the elements of the matrix or vector A. We denote by |x|0 to be the number of non-zero elements of the vector x, known as `0 norm.\nGiven two square matrices \u039b \u2208 Rm\u00d7m and \u2126 \u2208 Rn\u00d7n we denote their Kronecker product by \u039b\u2297 \u2126. This is a matrix of size mn \u00d7 mn that is composed of blocks, where the (i, j)th block is \u039bi,j\u2126. Finally, (Sx) refers to the equation x in a longer version of this manuscript provided online1."}, {"heading": "2. Problem Setting", "text": "We focus on the problem of learning a linear similarity measure between pairs of objects q \u2208 Rm, p \u2208 Rn, in the form of SW (q,p) = q>Wp. This similarity measure is related to metric learning models of the form (q \u2212 p)>W (q \u2212 p) for square matrices W , and becomes equivalent to it when all vectors p and q have a constant W -norm. Interestingly, the similarity measure SW (q,p) does not have to be symmetric, and may even be defined for objects from with different dimensions m 6= n (non-square W ). In general, it allows to learn a measure of relatedness between objects from different domains, like images and sounds or images and text (as in Grangier & Bengio, 2008). Importantly, when the vectors representing both query and object are sparse and contain only few elements, |q|0 = kq, |p|0 = kp computing the similarity score takes only kqkp operations instead of mn for dense vectors.\nWe address a weak-supervision setup where training is based on relative similarity. Here, we are allowed to sam-\n1webee.technion.ac.il/people/koby/ publications/aroma_icml12long.pdf\nple triplets of objects, each triplet containing a \u201dquery object\u201d q \u2208 Rm and two candidate objects p+, p\u2212 \u2208 Rn, where it is known that the object p+ is more related (or similar) to the query q than the other object p\u2212.\nImportantly, the relative similarity learning setup does not assume that there exists an absolute numerical level of similarity between an object and a query, or that the learner has access to it. Training therefore assumes a weaker type of supervision, making it easier to collect labeled data either from human raters, or by collecting indirect data about association of object pairs. For example, two web pages can be ranked by their similarity to a third web page by the number of users visiting them within the same session.\nFormally, our goal is to learn a bi-linear similarity scoring function SW (q,p) = q>Wp parametrized by W \u2208 Rm\u00d7n such that the total ordering induced by the similarity function over objects p would be consistent with the partial ordering information given about p\u2212 and a query q. A similar model was recently studied in different contexts (McFee & Lanckriet, 2012; Kulis et al., 2011; Weston et al., 2011).\nWe formalize training as a constrained optimization problem and require that this relation between the induced ranking and the partial information of ordering holds with a safety margin,\nSW (q,p+) \u2265 SW (q,p\u2212) + 1 . (1)\nMore specifically, we develop an online algorithm that allows to rank objects by their similarity to a \u201dquery object\u201d q. Like online prediction algorithms, online retrieval algorithms work in rounds. On round i, the algorithm receives a triplet composed of a query qi \u2208 Rm and two possible outcomes p+i ,p \u2212 i \u2208 Rn. The algorithm than outputs a single bit indicating which outcome is better for the given query. It then receives the correct answer and updates its model.\nTo learn a scoring function that obeys (1), we define a hinge loss over the triplet (q,p+,p\u2212)\n`W (q,p +,p\u2212) = max ( 0, 1\u2212 q>W (p+ \u2212 p\u2212) ) .(2)\nIn what follows, we describe two online algorithms to minimize this loss while modeling the distribution of matrix models W . We first review previous work on learning such distributions for vector models."}, {"heading": "3. Adaptive Regularization of Weights", "text": "We first describe the AROW algorithm that was designed for binary classification of vector inputs x \u2208 Rd and introduced by Crammer et al. (2009).\nThe key idea of AROW (Dredze et al., 2008, and its predecessors), is that instead of maintaing a single vectorw during learning, AROW maintains a distribution over possible\nmodels. Specifically, AROW maintains a Gaussian distribution over vectors denoted by N (w,\u03a3), where w \u2208 Rd and \u03a3 \u2208 Rd\u00d7d. The mean w encodes the knowledge of the algorithm about the weight features (linear model), and is used to make predictions. The covariance \u03a3 captures the notion of confidence in the weights, and is used during training to set an effective learning rate for features with different statistics. AROW was motivated by tasks in natural language processing, where many features are very rare and a few features are frequent.\nAROW is an online algorithm that works in rounds. On the i-th round, the algorithm receives an input xi \u2208 Rd and employs its current model to make a prediction y\u0302i \u2208 {\u00b11}. It then receives the true label yi \u2208 {\u00b11} and suffers a loss `(yi, y\u0302i). Finally, the algorithm updates its prediction rule using the pair (xi, yi) and proceeds to the next round.\nAROW updates its current model parameters w and \u03a3 by minimizing the following objective function\nLAROW = DKL (N (w,\u03a3) \u2016N (wt\u22121,\u03a3t\u22121)) (3)\n+ 1\n2r\n( max{0, 1\u2212 yix>i w} )2 + 1 2r x>i \u03a3xi ,\nwhere DKL is the Kullback-Leibler divergence. This objective aims to find a model that classifies the sample (xi, yi) correctly, while keeping the distribution from changing abruptly at a single iteration.\nThe minimum of the objective in Eq. (3) was shown by Crammer et al. (2009) to be obtained by the update rule:\nwi = wi\u22121 + max\n( 0, 1\u2212 yix>i wi\u22121 ) x>i \u03a3i\u22121xi + r \u03a3i\u22121yixi, (4)\n\u03a3i = \u03a3i\u22121 \u2212 \u03a3i\u22121xix\n> i \u03a3i\u22121\nr + x>i \u03a3i\u22121xi .\nAROW was shown to attain state-of-the-art performance on many problems (Crammer et al., 2009; Duchi et al., 2010) and its performance is analyzed both for full covariance matrices (Crammer et al., 2009) and diagonal covariance matrices (Orabona & Crammer, 2010). In the next section, and in this entire paper, we lift AROW to matrices, while maintaining both memory and speed efficiency."}, {"heading": "4. Modeling Uncertainty over Matrices", "text": "As with online classification learning, online retrieval algorithms work in rounds. At round i the algorithm receives a triplet composed of a query qi \u2208 Rm and two possible outcomes p+i ,p \u2212 i \u2208 Rn. The algorithm than outputs a single bit indicating which outcome is better for the given query. It then receives the correct answer and updates its model. For simplicity, we assume that the first outcome is always preferable, namely, given qi the algorithm should rank p+i\nover p\u2212i . We now consider the problem of modeling uncertainty over matrices, in the context of online-learning similarity measures that obeys (1), and describe algorithms to minimize the loss in (2).\nA naive approach to model uncertainty over matrices would be to to use the linearity of the ranking function SW (q,p) in W , and write S as an inner product between two vectors q>Wp = vec (W ) \u00b7vec ( pq> ) . Here, learning over matrices of dimension m\u00d7 n is viewed simply as learning over vectors of dimension 1 \u00d7mn. After transforming the matrix model into a vector, then the original AROW algorithm for vectors can be applied.\nUnfortunately, this approach requires to maintain the mean parameters as a vector of of sizemn and the full covariance matrix of size (mn) \u00d7 (mn). Even for moderate dimension values of m and n, the size of a full covariance matrix m2n2 cannot be stored in memory. For instance, with m = n = 103, the dimension of the vectorized model is mn = 106 and the full covariance matrix requires 1012 parameters. Designing second order algorithms for matrices thus requires to model the covariance in a more compact way. We now discuss and develop two such compact representations and learning algorithms: a diagonal covariance, and a factorized covariance."}, {"heading": "4.1. Diagonal Covariance", "text": "Our first algorithm restricts the covariance matrices to be diagonal, using only mn non-zero elements (the size of the similarity measure W ). Denote by \u03c3 \u2208 Rmn the diagonal elements of the covariance matrix. The update (4) becomes\nwi = wi\u22121 + max\n( 0, 1\u2212 yix>i wi\u22121 ) sum(x>i \u03c3i\u22121 xi) + r yi\u03c3i\u22121 xi\nand the covariance is,\n\u03c3i = \u03c3i\u22121 \u2212 \u03c3i\u22121 xi xi \u03c3i\u22121\nr + sum(x>i \u03c3i\u22121 xi) .\nWe denote by \u03a3 \u2208 Rm\u00d7n the covariance matrix that maintains one element per feature, and thus is diagonal-like, although it is rectangular in shape. We identify xi = qip>i , pi = p + i \u2212p \u2212 i and yi = 1, to get the update in the notation used for matrix-similarity measures,\nWi = Wi\u22121 + \u03b1i\u03a3i\u22121 ( qip > i ) where \u03b1i = max ( 0, 1\u2212 q>i Wi\u22121pi ) sum(qip>i \u03a3i\u22121 qip>i ) + r (5)\nand \u03a3i = \u03a3i\u22121 \u2212 \u03a3i\u22121 qip>i qip>i \u03a3i\u22121 sum(qip>i \u03a3i\u22121 qip>i ) + r .\n(6)\nAlgorithm 1: diagonal-AROMA\nInput parameters A scalar r Initialize W0 = 0 \u2208 Rm\u00d7n , \u03a30 = 1 \u2208 Rm\u00d7n For i = 1, . . . , N\n\u2022 Sample a query qi \u2208 Rm and two images p+i ,p \u2212 i \u2208 R n, such that p+i should be ranked above p \u2212 i \u2022 Define pi = p+i \u2212 p \u2212 i \u2022 If 1 > q>i Wi\u22121pi then update: \u2013 Update Wi = Wi\u22121 + \u03b1i\u03a3i\u22121 ( qip > i ) where\n\u03b1i = max(0,1\u2212q>i Wi\u22121pi)\nsum(qip > i \u03a3i\u22121 qip > i )+r\n(5)\n\u2013 Update \u03a3i = \u03a3i\u22121 \u2212 \u03a3i\u22121 qip > i qip > i \u03a3i\u22121\nsum(qip > i \u03a3i\u22121 qip > i )+r\n(6)\nOutput: A weight matrix WN and its confidence \u03a3N\nFigure 1. The d-AROMA algorithm for similarity measures.\nWe call the algorithm d(iagonal)-AROMA for diagonalAdaptive Regularization Of MAtrix models, and it is summarized in Fig. 1. The memory required for d-AROMA is \u0398(mn) - the space needed to store bothW and \u03a3. The time complexity is \u0398(mn) as all operations involve componentwise operations between W and \u03a3; and p and q.\nBefore proceeding to describe the next algorithm we state a mistake bound for d-AROMA. LetM be the set of rounds for which the algorithm made a prediction mistake and let U be the set of example indices for which the algorithm made an update, yet no mistake occurred. Then,\nTheorem 1 Let V be any similarity matrix. Assume the algorithm is executed on any sequence then the total no. of mistakes it performs is bounded by,\n|M| \u2264 \u2211\ni\u2208M\u222aU max\n{ 0, 1\u2212 q>i V pi } \u2212 |U|\n+ \u221a\u221a\u221a\u221a\u2016V \u20162Fro + 1r m,n\u2211\nk=1,l=1\nV 2k,l \u2211 iM\u222aU q2i,kp 2 i,l\n\u00d7 \u221a\u221a\u221a\u221ar m,n\u2211 k=1,l=1 log (\u2211 iM\u222aU q 2 i,kp 2 i,l r + 1 ) + 2|U| .\nThe proof is omitted due to lack of space and is similar in spirit to the analysis in section 4.3 of Orabona & Crammer (2010). As in their, analysis we expect the bound to be small if either the combination of the kth feature of the query qi,k and of the lth feature of the output difference pi,l is rare (that is \u2211 i\u2208M\u222aU q 2 i,kp 2 i,l is small), or that this combination is not useful for prediction, that is, V 2k,l is small. When most feature combinations fall under one\nof these two cases, we expect the second term in the first square-root term to be small and most of the values of the log function to be close to zero. Unlike the vector-variant of this analysis, here it is not required that the input features are sparse. Instead, we only require that for some inputs the query is sparse and for other inputs the difference between the objects is sparse, but not necessarily both."}, {"heading": "4.2. Factored Covariance", "text": "Our second approach to model the distribution of similarity matrices is based on factorizing the covariance matrix in a way that captures separately correlations in the \u201dinput\u201d (right side of the similarity matrix) and in the \u201coutput\u201d (left side). To describe our second algorithm, we use the definition of a matrix-variate normal distribution (Gupta & Nagar, 1999).\nDefinition 1 A random matrix X \u2208 Rm\u00d7n is said to have a matrix variate normal distribution with mean matrix W \u2208 Rm\u00d7n and covariance matrix \u2126 \u2297 \u039b where \u039b \u2208 Rm\u00d7m and \u2126 \u2208 Rn\u00d7n are both symmetric and PSD, if vec (X) \u223c N (vec (W ) ,\u2126\u2297 \u039b) . Matrix variate normal distributions are denoted by N (W,\u2126\u2297 \u039b).\nGupta & Nagar (1999) show (Thm. 2.2.1) that the probability density of a matrix variate normal distribution is,\np(X|W,\u2126,\u039b) = (2\u03c0)\u2212 1 2mn det (\u039b) \u2212 12n det (\u2126) \u2212 12m \u00d7 exp { \u2212 1 2 Tr ( \u039b\u22121 (X \u2212W ) \u2126\u22121 (X \u2212W )> )} . (7)\nWe derive our algorithm by revisiting the objective of AROW (3) and compute the three terms of that objective for our model. For the first term, we use (7) and obtain that the KL divergence between two matrix-variate normal distributions is (up to additive constants),\nDKL (N (W,\u2126\u2297 \u039b) \u2016N (Wi\u22121,\u2126i\u22121 \u2297 \u039bi\u22121)) (8)\n= 1\n2 n log\n( det \u039bi\u22121\ndet \u039b\n) + 1\n2 m log\n( det \u2126i\u22121\ndet \u2126 ) + 1\n2 Tr ( \u039b\u22121i\u22121\u039b ) Tr ( \u2126\u22121i\u22121\u2126 ) + 1 2 Tr ( \u039b\u22121i\u22121 (W \u2212Wi\u22121) \u2126 \u22121 i\u22121 (W \u2212Wi\u22121) > ) .\nFor the second term of (3), we use q>Wp = vec (W ) \u00b7 vec ( pq> ) as discussed above, to compute(\nmax { 0, 1\u2212 q>Wp })2 . (9)\nFinally, the third term is, vec ( pq> )> (\u039b\u2297 \u2126)vec ( pq> ) = vec ( pq> )> vec ( \u2126pq>\u039b\n) = ( p>\u2126p ) ( q>\u039bq ) , (10)\nwhere we used the identities vec (AXC) =( C> \u2297A ) vec (X) and vec ( A> )> vec (C) = Tr (AC). Combining (8), (9) and (10) we get the optimization problem describing the update of the algorithm,\n1 2 n log\n( det \u039bi\u22121\ndet \u039b\n) + 1\n2 m log\n( det \u2126i\u22121\ndet \u2126\n) (11)\n+ 1 2 Tr ( \u039b\u22121i\u22121 (W \u2212Wi\u22121) \u2126 \u22121 i\u22121 (W \u2212Wi\u22121) > ) + 1\n2r\n( max { 0, 1\u2212 q>Wp })2 + 1\n2 Tr ( \u039b\u22121i\u22121\u039b ) Tr ( \u2126\u22121i\u22121\u2126 ) + 1 2r ( p>\u2126p ) ( q>\u039bq ) .\nThe detailed derivation of the update steps is given in a long version 1. It yields our second algorithm, named f(actored)AROMA, which is summarized in Fig. 2. Using Woodbury identity it follows that both \u2126i (13) and \u039bi (14) are PSD.\nIt is worth comparing the update for \u2126 (13) in Fig. 2 (S5) with the update of AROW for \u03a3 (4). Both updates share the same formal structure, but use different constants. AROW uses the parameter r in the denominator of (4), while fAROMA uses mr/q>i \u039bi\u22121qi. Assuming \u2016qi\u20162 \u2264 m we get that mr\nq>i \u039bi\u22121qi \u2265 r. Furthermore, the lower the value\nof q>i \u039bi\u22121qi is, the larger is the value of the effective parameter mr/q>i \u039bi\u22121qi, which in turn reduces the effect of the update. In the extreme case if q>i \u039bi\u22121qi = 0 then \u2126i = \u2126i\u22121. Intuitively, the algorithm should decrease the total variance as more examples are observed. Yet, if the variance is already low due to low variance related to the query q>i \u039bi\u22121qi then there is no need to reduce the variance related to the output \u2126, and vice versa. Following the symmetry between \u2126 and \u039b, these observations also hold for the update of \u039b (14) (S6).\nf-AROMA uses a total memory of mn+m2 + n2 to store the mean matrix W and the covariance matrices \u2126,\u039b. The time complexity is also mn + m2 + n2 since it involves addition to all elements of these matrices. Note that if m \u2248 n both d-AROMA and f-AROMA have about the same asymptotic complexity, where the later requires storage and manipulation of one more matrix. When the dimensions m and n differ significantly, m n or n m, the complexity of f-AROMA larger than that of d-AROMA because f-AROMA scales quadratically both withm and n, while d-AROMA scales linearly with either parameters.\nWe conclude this section with a mistake bound similar to Theorem 1. Our analysis applies to the algorithm of Fig. 2 with two minor changes. First, it assumes a mistake driven version of the algorithm, namely, that the algorithm makes an update only when a mistake occurs. The condition for an update is therefore 0 > q>i Wi\u22121pi instead of 1 > q>i Wi\u22121pi. Second, from (12) (S4) we get that the\nAlgorithm 2: Factored-AROMA\nInput parameters: A scalar r Initialize: W0 = 0 \u2208 Rm\u00d7n,\u21260 = I \u2208 Rn,\u039b0 = I \u2208 Rm For i = 1, . . . , N\n\u2022 Sample a query qi \u2208 Rm and two images p+i ,p \u2212 i \u2208 R n, such that similarity(qi,p+i ) > similarity(qi,p \u2212 i ) \u2022 Define pi = p+i \u2212 p \u2212 i \u2022 If 1 > q>i Wi\u22121pi then update: Wi=Wi\u22121+ max {0, 1\u2212qiWi\u22121pi} r+q>i \u039bi\u22121qip > i \u2126i\u22121pi \u039bi\u22121qip > i \u2126i\u22121 (12) \u2126i=\u2126i\u22121\u2212 q>i \u039bi\u22121qi\nmr+ ( q>i \u039bi\u22121qi )( p>i \u2126i\u22121pi )\u2126i\u22121pip>i \u2126i\u22121 (13) \u039bi=\u039bi\u22121\u2212 p>i \u2126i\u22121pi\nnr + ( p>i \u2126i\u22121pi ) ( q>i \u039bi\u22121qi )\u039bi\u22121qiq>i \u039bi\u22121 (14) Output: A weight matrix WN and its confidence \u03a3N\nFigure 2. The f-AROMA algorithm for similarity measures.\nupdate of the factored-AROMA can be written as,\n\u039b\u22121i\u22121Wi\u2126 \u22121 i\u22121 = \u039b \u22121 i\u22121Wi\u22121\u2126 \u22121 i\u22121\n+ max {0, 1\u2212 qiWi\u22121pi} r + ( q>i \u039bi\u22121qi ) ( p>i \u2126i\u22121pi )qip>i , the analysis is for a version that uses the new matrices \u039bi and \u2126i, that is,\n\u039b\u22121i Wi\u2126 \u22121 i = \u039b \u22121 i\u22121Wi\u22121\u2126 \u22121 i\u22121\n+ max {0, 1\u2212 qiWi\u22121pi} r + ( q>i \u039bi\u22121qi ) ( p>i \u2126i\u22121pi )qip>i . We are now ready to state the main theorem of this section.\nTheorem 2 Let V be any similarity matrix. Assume the algorithm is executed on any sequence of queries and objects, then the total number of mistakes that the algorithm performs is bounded by |M| \u2264 \u2211 i\u2208M max { 0, 1\u2212 q>i V pi } + 2 \u221a Tr ( V \u2126\u22121N V >\u039b\u22121N )\n\u00d7 \u221a rmin{m log det ( \u2126\u22121N ) , n log det ( \u039b\u22121N ) } .\nTo understand the theorem, the matrices \u2126\u22121N and \u039b \u22121 N can be thought of as the second order moments of the objects pi and the queries qi respectively. From (13) (S5) and (14) (S6) we observe that these matrices are the sum of the identity matrix and a weighted sum of outer products of the objects and queries. The first term of the bound\nTr ( V \u2126\u22121N V >\u039b\u22121N )\nis small if either the rows of V are aligned with eigenvectors of \u2126\u22121N associated with small values or the columns of V are aligned with eigenvectors of \u039b\u22121N , but not necessarily both. This property, (see Sec. 3.1 of Cesa-Bianchi et al., 2005) holds for the input space of AROW, and also for a second order perceptron. For fAROMA, this property holds for any one of the subspaces, queries or objects.\nNext, the second term of the bound is small if either matrices \u2126\u22121N and \u039b \u22121 N are skewed. This is because the log det function is concave. A similar property holds also for Theorem 1 where we required that features from either spaces would be sparse or non-informative. That is, a property is required to hold only for one of the spaces (queries or objects) but not both.\nThe proof of the theorem relies on the following lemma, which extends Lemma 4 used in the analysis of AROW (Crammer et al., 2009)\nLemma 3 The following two bounds hold for the updates in (13) (S5) and (14) (S6), \u2211 i (qi\u039biqi) ( p>i \u2126ipi ) \u2264\nmr log det ( \u2126\u22121N ) and \u2211 i (qi\u039biqi) ( p>i \u2126ipi ) \u2264\nnr log det ( \u039b\u22121N ) Proof: We prove the first inequality. The second inequality can be proved similarly. Using (14) (S6) we get, q>i \u039biqi \u2264 q>i \u039bi\u22121qi = mr q>i \u039bi\u22121qi mr . Multiplying with(\np>i \u2126ipi )\nand summing over i we get,\u2211 i (qi\u039biqi) ( p>i \u2126ipi ) \u2264mr \u2211 i qi\u039bi\u22121qi mr ( p>i \u2126ipi ) =mr\n\u2211 i\n( 1\u2212\ndet \u2126\u22121i\u22121 det \u2126\u22121i\n) \u2264\u2212mr\n\u2211 i log ( det \u2126\u22121i\u22121 det \u2126\u22121i ) =mr log det \u2126\u22121N ,\nwhere the first equality follows from Lemma D.1 of Cesa-Bianchi et al. (2005).\nProof sketch: (of Theorem 2) We build on previous approach (Orabona & Crammer, 2010) and have the following inequality, which generalizes Corollary 2 of Orabona & Crammer (2010) for matrices. |M| \u2264 \u2211 i\u2208M max { 0, 1\u2212 q>i V pi } + 2 \u221a Tr ( V \u2126\u22121N V >\u039b\u22121N )\n\u00d7 \u221a\u2211\ni\u2208M q>i Wi\u22121pi + \u2211 i\u2208M (qi\u039biqi) ( p>i \u2126ipi ) .\nThe first sum in the second square-root term is nonpositive, as for i \u2208 M we have q>i Wi\u22121pi \u2264 0. We use Lemma 3 to bound the second square-root term with,\n\u221a rmin{m log det ( \u2126\u22121N ) , n log det ( \u039b\u22121N ) } , which concludes the proof."}, {"heading": "5. Empirical Evaluation", "text": "We evaluated diagonal and factored AROMA on two data sets. First, we learned a semantic similarity between pairs of images in the Caltech-256 dataset (Griffin et al., 2007). Second, we learned a similarity measure between pairs of text documents using the 20-newsgroups data collected by Lang (1995). In both tasks we used standard 5-fold cross validation and report the precision on the test set."}, {"heading": "5.1. Image similarity in the Caltech256 dataset", "text": "We first tested AROMA in an image similarity task using the Caltech256 dataset. This dataset consists of 30, 607 images that were obtained from Google image search and from PicSearch.com. Images were assigned to 257 categories and evaluated by humans in order to ensure image quality and relevance. To allow a direct comparisons with the previous literature, we only used here 50 classes.\nWe represent each image using a sparse code based on a bag of patch descriptors. Specifically, features are extracted by dividing each image into overlapping square patches, and describing each patch with edge and color histograms. For edge histograms, we used uniform Local Binary Patterns (uLBPs) (Ojala et al., 2002), which estimate a texture histogram of a patch by considering differences in intensity at circular neighborhoods centered on each pixel. We used uniform LBP8,2 patterns, which means that a circle of radius 2 is considered centered on each block, and bins corresponding to non uniform sequences are merged. LBP patterns were then concatenated with color histograms.\nTo form a sparse code, patch descriptors were mapped into codewords using a dictionary that was trained over a large set of images using k-means. Then, patch representations were collected to represent an image as a sparse code. Each local descriptor was represented as a discrete index, called visterm, and the image was represented as a bag-ofvisterms vector, in which components pi are related to the presence or absence of visterm i in p. The assignment of the weight pi of visterm i in image p was according to tfidf weights. This approach has been found successful (for a related task) by Grangier & Bengio (2008) and Chechik et al. (2009). We used a 1000-sized codebook, with a median of 27 non-zero values per image and a maximum of 129.\nWe compared the performance of AROMA with five other approaches. (1) HIER: Hierarchical semantic indexing, an approach that cleverly uses the known hierarchy among\nclass labels (Deng et al., 2011). (2) OASIS: An online similarity model based on a ranking cost across triplets, similar to the setup studied here (Chechik et al., 2009). It can be used to estimate the added benefit of using the covariance of the distribution in addition to the mean as AROMA does. (3) ITML/LEGO An online approach that succeeds to maintain a proper metric during learning in an efficient way (Davis et al., 2007) (4) LMNN: Large Margin Nearest neighbor, one of the early large margin metric learning methods (Weinberger et al., 2005). (5) Euclidean distance: equivalent to using the identity matrix W = I .\nThe left panel of Fig. 3 compares the precision obtained with d-AROMA and f-AROMA with all other competing methods. Diagonal and factorized AROMA perform very similarly, with a slightly higher performance for factored AROMA. Both methods are significantly better than all other methods at the head of the top ranked images. At the top ranked image, AROMA improves precision by 50% over the second best approach (OASIS, from 22% to 33%).\nThe middle panel of Fig. 3 traces the precision over the test set during training showing that convergence is achieved after 200K \u223c 500K iterations. In the beginning dAROMA was slightly better than f-AROMA, but later fAROMA converged faster. The right panel of Fig. 3 demonstrates that AROMA is largely robust to the choice of the regularizer r, with less than 5% change in precision across three orders of magnitude of r."}, {"heading": "5.2. Document similarity, the 20 Newsgroups dataset", "text": "In a second set of experiments we studied the problem of learning a similarity measure between pairs of text documents. This task has numerous applications, such as finding content on the web that is related to a given text document. In this dataset, documents are divided to 20 classes, with about 1, 000 documents in each class. Two documents were considered similar iff they share the same class labels.\nWe used the 20 newsgroups data set (Lang, 1995) and removed stop words but did not apply stemming. We se-\nlected 1, 000 terms that conveyed high information about the identity of the class (over the training set) using the infogain criterion (Yang & Pedersen, 1997). The selected features were normalized using tf-idf, and then represented each document as a bag of words.\nThe 20 newsgroups website proposes a split of the data into a train and test sets. We repeated splitting 5 times based on sizes of the proposed splits (a train-to-test ratio of 65% / 35%). We evaluated the learned similarity measures using a ranking criterion. We view every document in the test set q as a query, and rank the remaining test documents p by their similarity scores q>Wp. We then computed the precision (fraction of positives) at the top r ranked documents. We further computed the mean average precision (mAP), a widely used measure in the information retrieval community, which averages over different values of r.\nWith this dataset. we only compared with OASIS and ITML, the methods that achieved higher precision on the Caltech256 data. HIER requires to use a known hierarchy of classes which is not available for the 20NG dataset.\nThe left panel of Fig. 4 shows the precision at the top ranked similar document. Clearly both AROMA methods outperform ITML and OASIS by large. The middle panel of Fig. 4 traces precision as it progresses through the learning iterations. f-AROMA achieves higher precision than diagonal AROMA during most of the learning iterations, and in fact converges faster. d-AROMA reaches the same level after 500K iterations. Interestingly, AROMA learns much faster than OASIS: it takes OASIS ten times more steps to get to the same precision (this effect is also true for the mean average precision). This precision gain is preserved across a large regime of r values, as shown in the right panel of Fig. 4."}, {"heading": "6. Summary", "text": "We presented two algorithms that learn distribution over matrices. Both outperform state-of-the-art methods in two\ntasks, and model the covariance of the matrix distribution using a linear number of parameters. Diagonal-AROMA is likely to be superior when the variance of individual features is large relative to feature dependencies, and factoredAROMA is expected to be superior when the data has strong correlations across features, as with the Caltech256 data. Factored-AROMA also converged faster.\nAcknowledgements: KC gratefully acknowledges partia support by an Israeli Science Foundation grant ISF1567/10."}], "references": [{"title": "A secondorder perceptron algorithm", "author": ["N. Cesa-Bianchi", "A. Conconi", "C. Gentile"], "venue": "Siam Journal of Commutation,", "citeRegEx": "Cesa.Bianchi et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Cesa.Bianchi et al\\.", "year": 2005}, {"title": "An online algorithm for large scale image similarity learning", "author": ["G. Chechik", "V. Sharma", "U. Shalit", "S. Bengio"], "venue": "In NIPS,", "citeRegEx": "Chechik et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Chechik et al\\.", "year": 2009}, {"title": "Adaptive regularization of weighted vectors", "author": ["K. Crammer", "A. Kulesza", "M. Dredze"], "venue": "In NIPS,", "citeRegEx": "Crammer et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Crammer et al\\.", "year": 2009}, {"title": "Information-theoretic metric learning", "author": ["J.V. Davis", "B. Kulis", "P. Jain", "S. Sra", "I.S. Dhillon"], "venue": "In ICML,", "citeRegEx": "Davis et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Davis et al\\.", "year": 2007}, {"title": "Hierarchical semantic indexing for large scale image retrieval", "author": ["J. Deng", "A.C. Berg", "L. Fei-Fei"], "venue": "In cvpr,", "citeRegEx": "Deng et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Deng et al\\.", "year": 2011}, {"title": "Confidenceweighted linear classification", "author": ["M. Dredze", "K. Crammer", "F. Pereira"], "venue": "In ICML,", "citeRegEx": "Dredze et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Dredze et al\\.", "year": 2008}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["J. Duchi", "E. Hazan", "Y. Singer"], "venue": "In COLT, pp", "citeRegEx": "Duchi et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Duchi et al\\.", "year": 2010}, {"title": "Caltech-256 object category dataset", "author": ["G. Griffin", "A. Holub", "P. Perona"], "venue": "Technical Report 7694, California Institute of Technology,", "citeRegEx": "Griffin et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Griffin et al\\.", "year": 2007}, {"title": "Matrix Variate Distributions", "author": ["A.K. Gupta", "D.K. Nagar"], "venue": "Chapman and Hall/CRC,", "citeRegEx": "Gupta and Nagar,? \\Q1999\\E", "shortCiteRegEx": "Gupta and Nagar", "year": 1999}, {"title": "Online metric learning and fast similarity search", "author": ["P. Jain", "B. Kulis", "I. Dhillon", "K. Grauman"], "venue": "In NIPS22,", "citeRegEx": "Jain et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Jain et al\\.", "year": 2008}, {"title": "K.Saenko, and T.Darrell. What you saw is not what you get: Domain adaptation using asymmetric kernel transforms", "author": ["B. Kulis"], "venue": "In CVPR,", "citeRegEx": "Kulis,? \\Q2011\\E", "shortCiteRegEx": "Kulis", "year": 2011}, {"title": "Learning to filter netnews", "author": ["K. Lang"], "venue": "In ICML, pp", "citeRegEx": "Lang,? \\Q1995\\E", "shortCiteRegEx": "Lang", "year": 1995}, {"title": "Learning multi-modal similarity", "author": ["McFee", "Brian", "Lanckriet", "Gert"], "venue": "In JMLR,", "citeRegEx": "McFee et al\\.,? \\Q2012\\E", "shortCiteRegEx": "McFee et al\\.", "year": 2012}, {"title": "Multiresolution gray-scale and rotation invariant texture classification with local binary patterns", "author": ["T. Ojala", "M. Pietikainen", "T. Maenpaa"], "venue": "IEEE tran. on pattern analysis and mach. intelligence,", "citeRegEx": "Ojala et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Ojala et al\\.", "year": 2002}, {"title": "New adaptive algorithms for online classification", "author": ["F. Orabona", "K. Crammer"], "venue": "In NIPS,", "citeRegEx": "Orabona and Crammer,? \\Q2010\\E", "shortCiteRegEx": "Orabona and Crammer", "year": 2010}, {"title": "Distance metric learning for large margin nearest neighbor classification", "author": ["Weinberger", "Kilian Q", "Blitzer", "John", "Saul", "Lawrence K"], "venue": "In NIPS,", "citeRegEx": "Weinberger et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Weinberger et al\\.", "year": 2005}, {"title": "Wsabie: Scaling up to large vocabulary image annotation", "author": ["J. Weston", "S. Bengio", "N. Usunier"], "venue": "In IJCAI,", "citeRegEx": "Weston et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Weston et al\\.", "year": 2011}, {"title": "A comparative study on feature selection in text categorization", "author": ["Y. Yang", "J.O. Pedersen"], "venue": "In Machine learninginternational workshop,", "citeRegEx": "Yang and Pedersen,? \\Q1997\\E", "shortCiteRegEx": "Yang and Pedersen", "year": 1997}], "referenceMentions": [{"referenceID": 2, "context": "Abstract Algorithms for learning distributions over weight-vectors, such as AROW (Crammer et al., 2009) were recently shown empirically to achieve state-of-the-art performance at various problems, with strong theoretical guaranties.", "startOffset": 81, "endOffset": 103}, {"referenceID": 3, "context": "Many algorithms were developed for learning these two tasks, including online algorithms developed recently in the context of classification and ranking costs (Davis et al., 2007; Jain et al., 2008; Chechik et al., 2009).", "startOffset": 159, "endOffset": 220}, {"referenceID": 9, "context": "Many algorithms were developed for learning these two tasks, including online algorithms developed recently in the context of classification and ranking costs (Davis et al., 2007; Jain et al., 2008; Chechik et al., 2009).", "startOffset": 159, "endOffset": 220}, {"referenceID": 1, "context": "Many algorithms were developed for learning these two tasks, including online algorithms developed recently in the context of classification and ranking costs (Davis et al., 2007; Jain et al., 2008; Chechik et al., 2009).", "startOffset": 159, "endOffset": 220}, {"referenceID": 6, "context": "(2009) and the references therein), or using this information during training (Duchi et al., 2010) improves the convergence rate of the learning algorithms as well as the performance of the resulting classifiers.", "startOffset": 78, "endOffset": 98}, {"referenceID": 2, "context": "Methods to generate linear classifiers from data have flourished in the past decade, including SVMImportantly, when learning linear models, it was recently shown that modeling the second order information about the set of models (Crammer et al. (2009) and the references therein), or using this information during training (Duchi et al.", "startOffset": 230, "endOffset": 252}, {"referenceID": 16, "context": "A similar model was recently studied in different contexts (McFee & Lanckriet, 2012; Kulis et al., 2011; Weston et al., 2011).", "startOffset": 59, "endOffset": 125}, {"referenceID": 2, "context": "We first describe the AROW algorithm that was designed for binary classification of vector inputs x \u2208 R and introduced by Crammer et al. (2009).", "startOffset": 122, "endOffset": 144}, {"referenceID": 2, "context": "(3) was shown by Crammer et al. (2009) to be obtained by the update rule:", "startOffset": 17, "endOffset": 39}, {"referenceID": 2, "context": "AROW was shown to attain state-of-the-art performance on many problems (Crammer et al., 2009; Duchi et al., 2010) and its performance is analyzed both for full covariance matrices (Crammer et al.", "startOffset": 71, "endOffset": 113}, {"referenceID": 6, "context": "AROW was shown to attain state-of-the-art performance on many problems (Crammer et al., 2009; Duchi et al., 2010) and its performance is analyzed both for full covariance matrices (Crammer et al.", "startOffset": 71, "endOffset": 113}, {"referenceID": 2, "context": ", 2010) and its performance is analyzed both for full covariance matrices (Crammer et al., 2009) and diagonal covariance matrices (Orabona & Crammer, 2010).", "startOffset": 74, "endOffset": 96}, {"referenceID": 2, "context": "The proof of the theorem relies on the following lemma, which extends Lemma 4 used in the analysis of AROW (Crammer et al., 2009)", "startOffset": 107, "endOffset": 129}, {"referenceID": 0, "context": "1 of Cesa-Bianchi et al. (2005).", "startOffset": 5, "endOffset": 32}, {"referenceID": 7, "context": "First, we learned a semantic similarity between pairs of images in the Caltech-256 dataset (Griffin et al., 2007).", "startOffset": 91, "endOffset": 113}, {"referenceID": 7, "context": "First, we learned a semantic similarity between pairs of images in the Caltech-256 dataset (Griffin et al., 2007). Second, we learned a similarity measure between pairs of text documents using the 20-newsgroups data collected by Lang (1995). In both tasks we used standard 5-fold cross validation and report the precision on the test set.", "startOffset": 92, "endOffset": 241}, {"referenceID": 13, "context": "For edge histograms, we used uniform Local Binary Patterns (uLBPs) (Ojala et al., 2002), which estimate a texture histogram of a patch by considering differences in intensity at circular neighborhoods centered on each pixel.", "startOffset": 67, "endOffset": 87}, {"referenceID": 1, "context": "This approach has been found successful (for a related task) by Grangier & Bengio (2008) and Chechik et al. (2009). We used a 1000-sized codebook, with a median of 27 non-zero values per image and a maximum of 129.", "startOffset": 93, "endOffset": 115}, {"referenceID": 4, "context": "class labels (Deng et al., 2011).", "startOffset": 13, "endOffset": 32}, {"referenceID": 1, "context": "(2) OASIS: An online similarity model based on a ranking cost across triplets, similar to the setup studied here (Chechik et al., 2009).", "startOffset": 113, "endOffset": 135}, {"referenceID": 3, "context": "(3) ITML/LEGO An online approach that succeeds to maintain a proper metric during learning in an efficient way (Davis et al., 2007) (4) LMNN: Large Margin Nearest neighbor, one of the early large margin metric learning methods (Weinberger et al.", "startOffset": 111, "endOffset": 131}, {"referenceID": 15, "context": ", 2007) (4) LMNN: Large Margin Nearest neighbor, one of the early large margin metric learning methods (Weinberger et al., 2005).", "startOffset": 103, "endOffset": 128}, {"referenceID": 11, "context": "We used the 20 newsgroups data set (Lang, 1995) and removed stop words but did not apply stemming.", "startOffset": 35, "endOffset": 47}], "year": 2012, "abstractText": "Algorithms for learning distributions over weight-vectors, such as AROW (Crammer et al., 2009) were recently shown empirically to achieve state-of-the-art performance at various problems, with strong theoretical guaranties. Extending these algorithms to matrix models pose challenges since the number of free parameters in the covariance of the distribution scales as n with the dimension n of the matrix, and n tends to be large in real applications. We describe, analyze and experiment with two new algorithms for learning distribution of matrix models. Our first algorithm maintains a diagonal covariance over the parameters and can handle large covariance matrices. The second algorithm factors the covariance to capture inter-features correlation while keeping the number of parameters linear in the size of the original matrix. We analyze both algorithms in the mistake bound model and show a superior precision performance of our approach over other algorithms in two tasks: retrieving similar images, and ranking similar documents. The factored algorithm is shown to attain faster convergence rate.", "creator": "LaTeX with hyperref package"}}}