{"id": "1206.6422", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Jun-2012", "title": "An Online Boosting Algorithm with Theoretical Justifications", "abstract": "we expect some task of online boosting - - combining business strategy learners into new adaptive strong will. while twitter boosting suggests a sound theoretical foundation, online intensity deserves more study from the theoretical perspective. in this group, we recently considered human differences between online focused verbal boosting, who draw new novel and reasonable assumption for implementing best moderate learner. based near behavioral assumption, we design an online motivation algorithm towards a sufficient theoretical guarantee by obtaining from weak continuous smoothboost optimization that favors empirical assumption closely. we specifically do the task of deciding the number of weak members integrating established theoretical results explaining online convex programming and training with numerical advice. article on real - world data sets on engaging with proposed algorithm compares automatically with existing online boosting algorithms.", "histories": [["v1", "Wed, 27 Jun 2012 19:59:59 GMT  (222kb)", "http://arxiv.org/abs/1206.6422v1", "Appears in Proceedings of the 29th International Conference on Machine Learning (ICML 2012)"]], "COMMENTS": "Appears in Proceedings of the 29th International Conference on Machine Learning (ICML 2012)", "reviews": [], "SUBJECTS": "cs.LG stat.ML", "authors": ["shang-tse chen", "hsuan-tien lin", "chi-jen lu"], "accepted": true, "id": "1206.6422"}, "pdf": {"name": "1206.6422.pdf", "metadata": {"source": "META", "title": "An Online Boosting Algorithm with Theoretical Justifications", "authors": ["Shang-Tse Chen", "Hsuan-Tien Lin", "Chi-Jen Lu"], "emails": ["b95100@csie.ntu.edu.tw", "htlin@csie.ntu.edu.tw", "cjlu@iis.sinica.edu.tw"], "sections": [{"heading": "1. Introduction", "text": "Boosting is one of the most powerful and popular ensemble-learning techniques in the setting of batch learning. The technique is an important topic from both the theoretical and practical perspective. On the theoretical side, boosting identifies the least (weakest) assumption on the learner to make learning possible (Freund & Schapire, 1996; Schapire et al., 1998; Mukherjee et al., 2011), and the assumption can be used to facilitate the analysis of existing algorithms and the design of new ones. On the practical side, boosting allows re-using of existing (weak) learning\nAppearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012. Copyright 2012 by the author(s)/owner(s).\nalgorithms in an efficient manner to improve performance, which matches the needs of many real-world applications (Schapire & Singer, 2000; Kudo et al., 2004; He & Thiesson, 2007).\nOnline learning, as opposed to batch learning, is another important topic in machine learning. Online learning does not require a fixed set of training data on hand but processes streaming examples one by one, which also fits the needs of many real-world applications. For example, a spam filtering system might need to continuously adjust its filtering rules based on the ever-changing spam tactics. Online learning also has its advantages in handling large-scale data sets, since it does not need to load the whole data set into the memory. The success of boosting in batch learning and the many merits of online learning inspire the study of online boosting \u2014 a combination of the two. For instance, consider an online spam classifier that has been working reasonably well, can we \u201cboost\u201d the performance by combining a couple of those classifiers?\nThe work of Oza & Russell (2001) is one of the first to use boosting in the online setting, and it was argued that the given algorithm under some condition could converge to the popular Adaptive Boosting approach (AdaBoost; Freund & Schapire, 1997) as the number of weak learners and training examples approaches infinity. Online boosting also achieved great success in many real-world applications, especially in the field of computer vision (Grabner & Bischof, 2006), due to its simplicity and efficiency. Many other online boosting algorithms have been proposed to tackle different application needs, such as semi-supervised learning (Grabner et al., 2008), multi-instance learning (Babenko et al., 2009b), and feature selection (Liu & Yu, 2007).\nNevertheless, relatively few existing studies discuss the theoretical behaviors of online boosting algorithms, as opposed to their offline counterparts. While many works on online boosting try to approximate AdaBoost\nor other batch boosting algorithms as closely as possible, they ignore the intrinsic differences between online learning and batch learning. In this paper, we carefully compare these differences, which in turn leads to different design strategies of the algorithms.\nWe start by re-examining the foundation of boosting algorithms \u2014 the weak learning assumption, which says that under any distribution of the data, the weak learner can perform better than random guessing. While this is a slightly strong but reasonable assumption in the batch setting, it is far from realistic in the online setting because the online weak learners are more restricted regarding the information available. We thus propose a new and more reasonable assumption that requires the online weak learners to perform well only with respect to \u201csmoother\u201d distributions. Based on this new assumption, we try to find a boosting algorithm that assigns example weights in a more \u201cconservative\u201d and online manner. One particular boosting algorithm that not only fits our requirements with slight modifications but also comes with simple and elegant theoretical analysis is SmoothBoost (Servedio, 2003). In this paper, we extend it to an online boosting algorithm.\nAnother difficulty of online boosting is that we have to determine beforehand the number of weak learners we would like to combine. The danger is that if we include too many weak learners, the outcome may be dominated by the poor predictions made by the many redundant weak learners which do not learn well. We mitigate this problem by giving different voting weights to different weak learners and we determine these weights dynamically using Online Convex Programming (Zinkevich, 2003) and the framework of Predicting with Expert Advice (Cesa-Bianchi & Lugosi, 2006), both of which are well-established techniques in online learning.\nOur final online boosting algorithms have the nice feature that theoretical guarantees can actually be shown, just as in the batch setting. In particular, we show that given online weak learners which can predict slightly better than random guessing with respect to \u201csmooth\u201d distributions, our online boosting algorithms can combine them to achieve a small error rate. In addition, we also perform experiments on several benchmark data sets, and the results show that our algorithms not only are theoretically well-founded, but also work well empirically on these real-world data sets."}, {"heading": "2. Online versus Batch Boosting", "text": "We consider the online learning problem in which an online learner must process a stream of examples\n(x1, y1), . . . , (xT , yT ) \u2208 Rd \u00d7 {\u22121, 1} in the following way. In step t, the online learner receives xt and is required to predict its label, and after the prediction the true label yt is revealed. We study the possibility of designing such an online learner using the boosting approach. That is, if we have online weak learners which can make predictions slightly better than random guessing, can we combine them to obtain an online strong learner which can make correct predictions for all but a small fraction of the examples?\nBefore formally describing our online boosting framework, let us first recall that of batch boosting. In the batch setting, the whole set S of labeled examples is available at the beginning, and the boosting algorithm proceeds for some N rounds as follows. In round i, it chooses a distribution p(i) over S and gives S and p(i) to a batch weak learner, which has the whole S and p(i) available and produces a weak hypothesis h(i). After the N rounds, it combines the N weak hypotheses to produce the final strong hypothesis, which takes the form of H(x) = sign( \u2211N i=1 \u03b1\n(i)h(i)(x)), where \u03b1(i) \u2208 R is the voting weight of h(i). There are boosting algorithms which can achieve a small error rate, defined as 1 T |{t : H(xt) 6= yt}|, if each weak hypothesis h\n(i) has a positive advantage, defined as \u2211T t=1 p (i) t yth (i)(xt).\nNow, in our online boosting framework, the examples of S only become available one at a time, and the boosting algorithm as well as the weak learners must work in an online fashion. Thus, the boosting algorithm cannot call the weak learner sequentially in N rounds as in the batch setting and must run N weak learners in parallel. That is, for each received example (xt, yt), the boosting algorithm must update the N weak learners right away before seeing the remaining examples. To do that, one would like the boosting algorithm to send a measure p(i)t of (xt, yt) to the i-th weak learner. However, it does not seem easy to determine a good \u201cmeasure\u201d of an example without seeing the remaining examples, and a somewhat easier but sufficient task is to send a \u201cweight\u201d w(i)t of (xt, yt), so that w (i) t / \u2211T t=1 w (i) t corresponds to the measure p(i)t of (xt, yt) for the ith weak learner. Then, after the update, the i-th weak learner returns a weak hypothesis h(i)t+1, and the boosting algorithm predicts the next example xt+1 by Ht+1(xt+1) = sign( \u2211N i=1 \u03b1 (i) t+1h (i) t+1(xt+1)), where \u03b1 (i) t+1 \u2208 R is the voting weight of h (i) t+1. As in the batch setting, we would like to have an online boosting algorithm which can achieve a small error rate, defined as 1T |{t : Ht(xt) 6= yt}|, if each weak learner has some positive advantage, defined as \u2211T t=1 p (i) t yth (i) t (xt).\nHowever, there appear to be some difficulties in designing such an online boosting algorithm. First, for each example, its weight for each weak learner must be determined before seeing the remaining examples. This rules out the use of the weighting schemes of some batch boosting algorithms. Next, the weights must satisfy some additional property in order to expect an online weak learner to have a positive advantage. To see this, if we take the extreme case that the first example has weight 1 and all others have weight 0, it is unrealistic to expect an online weak learner to have a positive advantage. Note that this would not be a problem in the batch setting, since the weak learner can read all the examples as well as their labels before coming up with a hypothesis. Finally, it is not clear how the online boosting algorithm can choose the appropriate number N of weak learners. We only know an upper bound for N which may be much larger than the appropriate one, but if we combine too many weak learners, the result may be dominated by the poor predictions of the many weak learners which should not be included. This is not a problem in the batch setting, as the boosting algorithm proceeds in rounds, including a new hypothesis in each round, and stops once the new weak hypothesis fails to have the required advantage.\nFor simplicity, let us assume that each xt lies within the unit L2-ball, so that \u2016xt\u20162 \u2264 1, and each weak hypothesis h(i)t comes from some set H of functions mapping from the unit L2-ball to the interval [\u22121, 1]. We will use the notation [T ] to denote the set {1, . . . , T} for a positive integer T ."}, {"heading": "3. Online Weak Learners", "text": "In this section, we address the second difficulty discussed in the previous section and study the condition for an online weak learner to have a positive advantage. Let us consider the case that H, the weak hypotheses space, consists of linear functions, so that each h \u2208 H can be seen as a vector in Rd, with h(x) defined as \u3008h, x\u3009, the inner product of the vectors h and x. For simplicity, let us assume \u2016h\u20162 \u2264 1 for every h \u2208 H. We can reduce the problem of finding a good online weak learner to the well-known online linear optimization problem as follows. With the T examples of S arriving sequentially, the weak learner in round t is given the data xt as well as its weight wt, and it then produces a hypothesis ht \u2208 H and after that receives a reward rt(ht) = wtytht(xt) = wtyt\u3008ht, xt\u3009. Note that the reward function rt is linear in ht. Therefore, we can apply the gradient descent algorithm of (Zinkevich, 2003) to produce ht in round t, and a standard\nregret analysis shows that for some constant c > 0,\nT\u2211 t=1 wtytht(xt) \u2265 T\u2211 t=1 wtyth(xt)\u2212 \u221a\u221a\u221a\u221ac T\u2211 t=1 w2t , (1)\nfor any fixed hypothesis h \u2208 H chosen by an offline algorithm. Let |w| = \u2211T t=1 wt, and by dividing both sides above by |w|, we have\nT\u2211 t=1 ptytht(xt) \u2265 T\u2211 t=1 ptyth(xt)\u2212 \u221a\u221a\u221a\u221ac T\u2211 t=1 w2t /|w|2,\nwhere pt = wt/|w| is the measure of (xt, yt). The term\u2211T t=1 ptytht(xt) is the advantage of the online weak\nlearner. The term \u2211T t=1 ptyth(xt) is the advantage of the offline hypothesis h, and let us assume for now that this advantage is at least 3\u03b3 > 0. Moreover, suppose the weights are large in the sense that they satisfy the following condition:\n|w| \u2265 c/\u03b32 and wt \u2208 [0, 1] for every t, (2)\nwhere c is the constant in (1). Then the advantage of the online weak learner becomes\nT\u2211 t=1 ptytht(xt) \u2265 3\u03b3 \u2212 \u221a c|w|/|w|2 \u2265 2\u03b3, (3)\nwhere in the inequality we use \u2211T t=1 w 2 t \u2264 |w| as wt \u2208 [0, 1]. Note that in addition to being sufficient, one can also show that the condition (2) is necessary to guarantee (3), using standard approaches for proving regret lower bounds. This motivates us to introduce the following assumption. Assumption 1. There exists an online weak learner which can achieve advantage 2\u03b3 > 0 for any sequence of examples and weights satisfying the condition (2).\nBased on the discussion above, we have the following. Lemma 1. Suppose for any sequence of examples and weights satisfying the condition (2), there exists an offline linear hypothesis with advantage 3\u03b3 > 0. Then Assumption 1 holds.\nNote that large weights satisfying (2) give rise to distributions which are \u201csmooth\u201d in the sense that each example has measure at most 1/|w| \u2264 \u03b32/c. This excludes the extreme case discussed in the previous section and makes possible for an online weak learner to have a positive advantage. The concept of smoothness has also been applied to boosting in several frameworks, such as noise-tolerant learning (Servedio, 2003) and agnostic learning (Feldman, 2010), but to the best of our knowledge, this is the first work that incorporates this idea into the problem of online boosting."}, {"heading": "4. Our Online Boosting Algorithm", "text": "In this section, we show how to choose weights for examples and how to combine hypotheses from weak learners in order to obtain an online boosting algorithm. Recall the framework of online boosting described in Section 2. Suppose Assumption 1 holds and let WL be such an online weak learner with advantage 2\u03b3. We will run N copies of WL as our N weak learners, for some N to be determined later.\nFirst, we would like to produce weights satisfying the condition (2). It is known that AdaBoost does not always produce such weights (Bshouty et al., 2002). One may try to scale up or down the weights to satisfy the condition, but the scaling factors often can only be determined after seeing all the examples, which does not work in the online setting. Fortunately, we can adopt the weighting scheme similar to SmoothBoost (Servedio, 2003) by choosing\nw (i+1) t = min\n{ (1\u2212 \u03b3)z (i) t /2, 1 } , (4)\nwhere z(i)t = z (i\u22121) t +yth (i) t (xt)\u2212\u03b8, with \u03b8 = \u03b3/(2+\u03b3), and z(0)t = 0 for t \u2208 [T ]. It is easy to verify that given (xt, yt) at step t, one can compute the weights w\n(1) t , . . . , w (N) t . Moreover, the following lemma shows that we only need hypotheses from those weak learners associated with large weights.\nLemma 2. For any i \u2208 [N ] and t \u2208 [T ], define\nf (i) t (x) = 1 i i\u2211 j=1 h (j) t (x) and H (i) t (x) = sign ( f (i) t (x) ) .\nLet \u03b4 \u2208 [0, 1] and let k be the largest number such that |w(i)| \u2265 \u03b4T for every i < k. Then\n1 T \u2223\u2223\u2223{t : H(k)t (xt) 6= yt}\u2223\u2223\u2223 \u2264 1T \u2223\u2223\u2223{t : ytf (k)t (xt) \u2264 \u03b8}\u2223\u2223\u2223 < \u03b4. The idea is that the algorithm assigns large weights to those incorrectly predicted examples, so there can not be many of them if the sum of weights is small. Note that when T \u2265 c/(\u03b4\u03b32), for the constant c in (2), the weights for the i-th weak learner, for i < k, are then large enough to satisfy the condition (2) since |w(i)| \u2265 \u03b4T \u2265 c/\u03b32. The next lemma gives an upper bound for the parameter k.\nLemma 3. Suppose Assumption 1 holds and T \u2265 c/(\u03b4\u03b32). Then the parameter k in Lemma 2 is at most O(1/(\u03b4\u03b32)).\nWe omit the proofs of these two lemmas because they are almost identical to those for Theorem 2 and Theorem 3 in Servedio (2003) respectively.\nLemma 3 provides us an upper bound on the number N of weak learners. However, the problem in the online setting is that we have to determine N beforehand, and empirically we see that setting N to this upper bound and using the function H(N) in Lemma 2 for prediction would not get very good performance. The reason is that if N exceeds the actual number k in Lemma 3, we could include too many weak learners which receive examples with small weights and would not update much. These weak learners might not learn well enough and taking them into the ensemble would therefore hinder the performance. Next, we describe two approaches to solve this problem.\nThe first is to give different voting weights for different weak learners, intuitively with larger weights to better weak learners. We set N to the upper bound given in Lemma 3, and at step t, we find some voting weight \u03b1(i)t for the i-th weak learner, and predict xt by\nHt(xt) = sign ( N\u2211 i=1 \u03b1 (i) t h (i) t (x) ) .\nTo find appropriate \u03b1t = (\u03b1 (1) t , . . . , \u03b1 (N) t ), we reduce the task to the Online Convex Programming (OCP) problem, using the N -dimensional probability simplex as the feasible set and defining the loss function at step t as\n`t(\u03b1) = max { 0, \u03b8 \u2212\nN\u2211 i=1 \u03b1(i)yth (i) t (xt)\n} ,\nwhich is a convex function of \u03b1 = (\u03b1(1), . . . , \u03b1(N)). From Lemma 2, we know the existence of an \u03b1\u0304 = (\u03b1\u0304(1), . . . , \u03b1\u0304(N)), with \u03b1\u0304(i) = 1/k for i < k and \u03b1\u0304(i) = 0 for i \u2265 k, such that\nT\u2211 t=1 `t(\u03b1\u0304) < (\u03b8 + 1)\u03b4T.\nThus, if we use the gradient descent algorithm of (Zinkevich, 2003) to produce \u03b1t at step t, we can have\nT\u2211 t=1 `t(\u03b1t) < (\u03b8 + 1)\u03b4T + \u221a cT .\nTo relate this bound with the error rate of Ht, note that if Ht(xt) 6= yt, then `t(\u03b1t) \u2265 \u03b8, which implies |{t : Ht(xt) 6= yt}| \u2264 1\u03b8 \u2211T t=1 `t(\u03b1t). Thus, we have\n1 T |{t : Ht(xt) 6= yt}| < \u03b8 + 1 \u03b8\n\u03b4 + \u221a c\n\u03b8 \u221a T .\nThe complete algorithm is given in Algorithm 1.\nAlgorithm 1 Online Boosting with OCP Input: streaming examples (x1, y1), . . . , (xT , yT )\nparameters 0 < \u03b4 < 1, 0 \u2264 \u03b8 < \u03b3 < 12 online weak learner WL\nInitialize: z(0)t = 0 for t \u2208 [T ] w\n(1) t = 1 for t \u2208 [T ]\n\u03b1 (i) 1 = 1 N for i \u2208 [N ]\nselect random h(i)1 \u2208 H for i \u2208 [N ] for t = 1 to T do\nDefine ft(x) = \u2211N i=1 \u03b1 (i) t h (i) t (x) Predict with Ht(x) = sign (ft(x)) if ytft(xt) < \u03b8 then \u03b1\n(i) t+1 = \u03b1 (i) t + \u03b7tyth (i) t (xt), for i \u2208 [N ]\nproject \u03b1t+1 back into probability simplex end if for i = 1 to N do h\n(i) t+1 \u2190WL\n( h\n(i) t , (xt, yt), w (i) t ) z (i) t = z (i\u22121) t + yth (i) t (xt)\u2212 \u03b8 w (i+1) t = min { (1\u2212 \u03b3)z (i) t /2, 1\n} end for\nend for\nThe second approach to combine weak learners is to use the framework of Predicting with Expert Advice. However, if we simply use each weak learner as an expert, we can only perform comparably to the best weak learner, which is inadequate for our goal of competing with the best combination of weak learners. So we instead construct another N experts, with the i-th expert using the function H(i)t in Lemma 2 to predict xt. Then, by running the weighted majority algorithm (Littlestone & Warmuth, 1994; Freund & Schapire, 1997) on these N experts, the expected regret with respect to the best expert is at most 2 \u221a T lnN . Since the best expert according to Lemma 3 has error rate at most \u03b4, the expected error rate of our algorithm is thus at most \u03b4+ 2 \u221a (lnN)/T . The resulting boosting algorithm based on this approach can be easily modified from Algorithm 1.\nWe summarize our result as follows.\nTheorem 1. Suppose Assumption 1 holds and T \u2265 c/(\u03b4\u03b32) for a large enough constant c. Then there is an online boosting algorithm which uses O(1/(\u03b4\u03b32)) copies of weak learners and achieves an error rate of O(\u03b4).\nTheorem 1 works for any set of weak hypotheses, assuming the existence of online weak learners which can predict with such hypotheses with a positive advantage when given examples with large enough weights (Assumption 1). When specialized to linear weak hy-\npotheses, we can lift the assumption of having an algorithm for finding good hypotheses, and replace it with the assumption of the mere existence of good hypotheses. More precisely, using Lemma 1 together with Theorem 1, we have the following.\nCorollary 1. Suppose for any sequence of examples and weights satisfying the condition (2), there is an offline linear hypothesis with advantage 3\u03b3, and T \u2265 c/(\u03b4\u03b32) for a large enough constant c. Then there is an online algorithm which achieves an error rate of O(\u03b4)."}, {"heading": "5. Experiments", "text": "In this section, we compare the empirical performance of the proposed algorithms with two other leading ones in online boosting. We do not compare with some other leading algorithms because of the different settings between those and our proposed ones. For instance, Grbovic & Vucetic (2011) proposed the incremental boosting algorithm, which is allowed to store previous examples while our proposed algorithms only rely on the newest arriving example. Another case is the algorithm in Pelossof et al. (2008), which assumes the weak learners to be static, i.e. pre-trained offline, and only updates the weights for combining the learners, while our proposed algorithms allows online, dynamic weak learners. Yet another family of online boosting algorithms are proposed in Babenko et al. (2009a), which requires the weak learners to be updated using stochastic gradient descent so that the weak learners can be chained with optimizing a choice of loss function, while our proposed algorithms treat weak learners in a black-box manner with minimum assumptions. Below we briefly describe the two algorithms we compare with."}, {"heading": "5.1. Compared Algorithms", "text": "1. Online AdaBoost (Oza & Russell, 2001) uses a Poisson sampling process to approximate the weighting method of AdaBoost. It guarantees that by using lossless online weak learner, which outputs the same hypothesis when trained online and offline for the same training set, their algorithm will converge to AdaBoost as the number of models and training examples approaches infinity. Nevertheless, the algorithm only ensures a good hypothesis asymptotically, but is not proved to achieve low regret during online learning. We will denote the algorithm as OzaBoost.\n2. Online GradientBoost (Leistner et al., 2009) is an online variant of GradientBoost (Friedman, 2000), which uses functional gradient descent to\ndecide the optimal example weights and greedily minimizes the loss function of interest. One special trick in the algorithm is to use some \u201cselectors.\u201d Each selector builds on top of a set of K weak learners to choose the best learner for the ensemble at each online learning iteration. The idea of using selectors is mainly for doing feature selection (Grabner & Bischof, 2006) along the online learning process, and only fits the setting of our proposed algorithm when K = 1. We take such a K for a fair comparison, and run the algorithm with the logit loss function that has consistently been the best choice in existing experimental studies (Leistner et al., 2009). We will denote the algorithm as OGBoost."}, {"heading": "5.2. Weak Learners", "text": "We choose two different weak learners in our experiments in order to take a closer look at the boosting ability of our proposed algorithms. The first one is Perceptron (Rosenblatt, 1962), a standard and famous online learning algorithm which, like our analysis in Section 3, takes a hypothesis set of linear functions. The second weak learner we choose is Naive Bayes, which is a lossless online algorithm, a crucial condition for ensuring the convergence of OzaBoost."}, {"heading": "5.3. Results", "text": "We tested our algorithms using 12 binary classification benchmark data sets (Frank & Asuncion, 2010), downloaded in the processed format from the LIBSVM repository.1 For each online boosting algorithm, we couple it with 100 weak learners and record its error in an online setting for 5 trials, where each trial consists of a different random ordering of the examples. We then report the average error over the 5 trials. We have tried some different values of \u03b3 and have confirmed that the performance of the proposed algorithms is quite stable to the choice of \u03b3. Therefore, for simplicity we only show the results with \u03b3 = 0.1.\nWe first show that our algorithm can really boost the performance of the two different weak learners and outperform the other online boosting algorithms for most data sets, which are summarized in Tables 1 and 2. The proposed algorithm, when using only the uniform weighting scheme, is denoted as OSBoost (Online Smooth-Boost). Other variants will be examined later in this section. The bold entries in the OSBoost column indicates that OSBoost improves the performance over a single weak learner, and a \u2018*\u2019 in the col-\n1http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/ datasets.\numn indicates the best performing boosting algorithm.\nFor the Perceptron weak learner in Table 1, our proposed OSBoost is consistently better than a single weak learner across all the data sets. Furthermore, on 8 out of the 12 data sets, OSBoost is better than the other two leading algorithms in online boosting. The performance difference is especially evident on large data sets. For the Naive Bayes weak learner in Table 2, our proposed OSBoost remains to be the best choice: boosting the performance of a single weak learner and continuing to be superior to the other two algorithms with a big difference in performance.\nWe then discuss the effectiveness of OSBoost.OCP and OSBoost.EXP, the two variants of our algorithm using Online Convex Programming and Predicting with Expert Advice as described in Section 4, respectively. The results are shown in Table 3 and 4. The bold entries in the OCP and EXP columns indicate that the variant improves the performance of the basic, uniformly-weighted OSBoost. First of all, we see that the basic OSBoost readily performs quite well, while the variants can sometimes result in a marginal gain of performance. The improvements of OSBoost.EXP over the basic OSBoost is more prominent when the data set is small, which is because OSBoost.EXP can be implicitly adapted to use fewer weak learners in a randomized manner to avoid overfitting the small set. The improvements of OSBoost.OCP over the basic OSBoost, on the other hand, happen mostly on larger data sets, which is in accordance to our analysis since the average error would diminish in Online Convex Programming only when the number of rounds T is large enough.\nWhile having a clear advantage in performance, our algorithms also run as fast as other online boosting algorithms. In fact, each iteration of all our algorithms except OSBoost.OCP can be carried out easily in O(N) time with N weak learners. For OSBoost.OCP, an extra projection step is needed, for which we implement an O(N logN)-time algorithm by Duchi et al. (2008); in fact, a more sophisticated method in Duchi et al. (2008) can achieve this in expected O(N) time."}, {"heading": "6. Conclusion", "text": "We propose a novel online boosting algorithm. The algorithm is simple in its formulation, but nevertheless carefully designed from the theoretical perspective to avoid many intrinsic difficulties when adapting boosting algorithms to the online setting. In particular, we define the notion of weak learning for online boosting, and exploit the notion to extend one promising offline boosting algorithm to its online version. We\nalso tackle the problem of choosing a suitable number of weak learners with a careful use of established theoretical results.\nThe proposed algorithm is not only solid in its theoretical justifications, but leads to promising experimental results. We demonstrate that the proposed algorithm\ncan indeed boost online weak learners on real-world data sets. Most importantly, the proposed approach is significantly better than existing approaches while they do not come with such solid theoretical justifications. Future works include extending the proposed approach to other problems, including online multi-\nclass or multi-label classification."}, {"heading": "Acknowledgments", "text": "We thank Ching-Hua Yu for providing the idea of using the framework of Predicting with Expert Advice. We also thank the anonymous reviewers for valuable suggestions. This work is supported by the National Science Council (NSC 100-2628-E-002-010 and NSC 100-2221-E-001-008-MY3) of Taiwan."}], "references": [{"title": "A Family of Online Boosting Algorithms", "author": ["B. Babenko", "M. Yang", "S. Belongie"], "venue": "IEEE ICCV Workshop on On-line Learning for Computer Vision, pp", "citeRegEx": "Babenko et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Babenko et al\\.", "year": 2009}, {"title": "Visual tracking with online multiple instance learning", "author": ["B. Babenko", "M. Yang", "S.J. Belongie"], "venue": "In Proceedings of CVPR,", "citeRegEx": "Babenko et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Babenko et al\\.", "year": 2009}, {"title": "On boosting with polynomially bounded distributions", "author": ["N.H. Bshouty", "D. Gavinsky", "M. Long"], "venue": "JMLR, 3:483\u2013506,", "citeRegEx": "Bshouty et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Bshouty et al\\.", "year": 2002}, {"title": "Prediction, learning, and games", "author": ["N. Cesa-Bianchi", "G. Lugosi"], "venue": null, "citeRegEx": "Cesa.Bianchi and Lugosi,? \\Q2006\\E", "shortCiteRegEx": "Cesa.Bianchi and Lugosi", "year": 2006}, {"title": "Efficient projections onto the l1-ball for learning in high dimensions", "author": ["Duchi", "John", "Shalev-Shwartz", "Shai", "Singer", "Yoram", "Chandra", "Tushar"], "venue": "In Proceedings of ICML, pp", "citeRegEx": "Duchi et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Duchi et al\\.", "year": 2008}, {"title": "Distribution-specific agnostic boosting", "author": ["Feldman", "Vitaly"], "venue": "In Proceedings of ICS, pp", "citeRegEx": "Feldman and Vitaly.,? \\Q2010\\E", "shortCiteRegEx": "Feldman and Vitaly.", "year": 2010}, {"title": "Game theory, on-line prediction and boosting", "author": ["Y. Freund", "R.E. Schapire"], "venue": "In Proceedings of COLT, pp. 325\u2013332. ACM Press,", "citeRegEx": "Freund and Schapire,? \\Q1996\\E", "shortCiteRegEx": "Freund and Schapire", "year": 1996}, {"title": "A decision-theoretic generalization of on-line learning and an application to boosting", "author": ["Y. Freund", "R.E. Schapire"], "venue": "Journal of Computer and System Sciences,", "citeRegEx": "Freund and Schapire,? \\Q1997\\E", "shortCiteRegEx": "Freund and Schapire", "year": 1997}, {"title": "Greedy function approximation: A gradient boosting machine", "author": ["J.H. Friedman"], "venue": "Annals of Statistics,", "citeRegEx": "Friedman,? \\Q2000\\E", "shortCiteRegEx": "Friedman", "year": 2000}, {"title": "On-line boosting and vision", "author": ["H. Grabner", "H. Bischof"], "venue": "In Proceedings of CVPR,", "citeRegEx": "Grabner and Bischof,? \\Q2006\\E", "shortCiteRegEx": "Grabner and Bischof", "year": 2006}, {"title": "Semisupervised on-line boosting for robust tracking", "author": ["H. Grabner", "C. Leistner", "H. Bischof"], "venue": "In Proceedings of ECCV, pp", "citeRegEx": "Grabner et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Grabner et al\\.", "year": 2008}, {"title": "Tracking concept change with incremental boosting by minimization of the evolving exponential loss", "author": ["M. Grbovic", "S. Vucetic"], "venue": "In Proceedings of ECML/PKDD,", "citeRegEx": "Grbovic and Vucetic,? \\Q2011\\E", "shortCiteRegEx": "Grbovic and Vucetic", "year": 2011}, {"title": "Asymmetric gradient boosting with application to spam filtering", "author": ["J. He", "B. Thiesson"], "venue": "In Proceedings of CEAS,", "citeRegEx": "He and Thiesson,? \\Q2007\\E", "shortCiteRegEx": "He and Thiesson", "year": 2007}, {"title": "An application of boosting to graph classification", "author": ["T. Kudo", "E. Maeda", "Y. Matsumoto"], "venue": "In Proceedigns of NIPS,", "citeRegEx": "Kudo et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Kudo et al\\.", "year": 2004}, {"title": "On Robustness of On-line Boosting - A Competitive Study", "author": ["C. Leistner", "A. Saffari", "P.M. Roth", "H. Bischof"], "venue": "IEEE ICCV Workshop on On-line Learning for Computer Vision, pp", "citeRegEx": "Leistner et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Leistner et al\\.", "year": 2009}, {"title": "The weighted majority algorithm", "author": ["N. Littlestone", "M.K. Warmuth"], "venue": "Information and Computation,", "citeRegEx": "Littlestone and Warmuth,? \\Q1994\\E", "shortCiteRegEx": "Littlestone and Warmuth", "year": 1994}, {"title": "Gradient feature selection for online boosting", "author": ["X. Liu", "T. Yu"], "venue": "In Proceedings of ICCV, pp", "citeRegEx": "Liu and Yu,? \\Q2007\\E", "shortCiteRegEx": "Liu and Yu", "year": 2007}, {"title": "The rate of convergence of adaboost", "author": ["I. Mukherjee", "C. Rudin", "R.E. Schapire"], "venue": "JMLR W&CP,", "citeRegEx": "Mukherjee et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Mukherjee et al\\.", "year": 2011}, {"title": "Online bagging and boosting", "author": ["N.C. Oza", "S. Russell"], "venue": "In Proceedings of AISTATS, pp", "citeRegEx": "Oza and Russell,? \\Q2001\\E", "shortCiteRegEx": "Oza and Russell", "year": 2001}, {"title": "Online Coordinate Boosting", "author": ["R. Pelossof", "M. Jones", "I. Vovsha", "C. Rudin"], "venue": "Oct 2008. URL http: //arxiv.org/abs/0810.4553", "citeRegEx": "Pelossof et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Pelossof et al\\.", "year": 2008}, {"title": "Principles of Neurodynamics: Perceptrons and the Theory of Brain Mechanisms", "author": ["F. Rosenblatt"], "venue": "Spartan,", "citeRegEx": "Rosenblatt,? \\Q1962\\E", "shortCiteRegEx": "Rosenblatt", "year": 1962}, {"title": "Boostexter: A boostingbased system for text categorization", "author": ["R.E. Schapire", "Y. Singer"], "venue": "Machine Learning,", "citeRegEx": "Schapire and Singer,? \\Q2000\\E", "shortCiteRegEx": "Schapire and Singer", "year": 2000}, {"title": "Boosting the Margin: A New Explanation for the Effectiveness of Voting Methods", "author": ["R.E. Schapire", "Y. Freund", "P. Bartlett", "W.S. Lee"], "venue": "The Annals of Statistics,", "citeRegEx": "Schapire et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Schapire et al\\.", "year": 1998}, {"title": "Smooth boosting and learning with malicious", "author": ["R.A. Servedio"], "venue": "noise. JMLR,", "citeRegEx": "Servedio,? \\Q2003\\E", "shortCiteRegEx": "Servedio", "year": 2003}, {"title": "Online convex programming and generalized infinitesimal gradient ascent", "author": ["M. Zinkevich"], "venue": "In Proceedings of ICML, pp", "citeRegEx": "Zinkevich,? \\Q2003\\E", "shortCiteRegEx": "Zinkevich", "year": 2003}], "referenceMentions": [{"referenceID": 22, "context": "On the theoretical side, boosting identifies the least (weakest) assumption on the learner to make learning possible (Freund & Schapire, 1996; Schapire et al., 1998; Mukherjee et al., 2011), and the assumption can be used to facilitate the analysis of existing algorithms and the design of new ones.", "startOffset": 117, "endOffset": 189}, {"referenceID": 17, "context": "On the theoretical side, boosting identifies the least (weakest) assumption on the learner to make learning possible (Freund & Schapire, 1996; Schapire et al., 1998; Mukherjee et al., 2011), and the assumption can be used to facilitate the analysis of existing algorithms and the design of new ones.", "startOffset": 117, "endOffset": 189}, {"referenceID": 13, "context": "algorithms in an efficient manner to improve performance, which matches the needs of many real-world applications (Schapire & Singer, 2000; Kudo et al., 2004; He & Thiesson, 2007).", "startOffset": 114, "endOffset": 179}, {"referenceID": 10, "context": "Many other online boosting algorithms have been proposed to tackle different application needs, such as semi-supervised learning (Grabner et al., 2008), multi-instance learning (Babenko et al.", "startOffset": 129, "endOffset": 151}, {"referenceID": 23, "context": "One particular boosting algorithm that not only fits our requirements with slight modifications but also comes with simple and elegant theoretical analysis is SmoothBoost (Servedio, 2003).", "startOffset": 171, "endOffset": 187}, {"referenceID": 24, "context": "We mitigate this problem by giving different voting weights to different weak learners and we determine these weights dynamically using Online Convex Programming (Zinkevich, 2003) and the framework of Predicting with Expert Advice (Cesa-Bianchi & Lugosi, 2006), both of which are well-established techniques in online learning.", "startOffset": 162, "endOffset": 179}, {"referenceID": 24, "context": "Therefore, we can apply the gradient descent algorithm of (Zinkevich, 2003) to produce ht in round t, and a standard regret analysis shows that for some constant c > 0,", "startOffset": 58, "endOffset": 75}, {"referenceID": 23, "context": "The concept of smoothness has also been applied to boosting in several frameworks, such as noise-tolerant learning (Servedio, 2003) and agnostic learning (Feldman, 2010), but to the best of our knowledge, this is the first work that incorporates this idea into the problem of online boosting.", "startOffset": 115, "endOffset": 131}, {"referenceID": 2, "context": "It is known that AdaBoost does not always produce such weights (Bshouty et al., 2002).", "startOffset": 63, "endOffset": 85}, {"referenceID": 23, "context": "Fortunately, we can adopt the weighting scheme similar to SmoothBoost (Servedio, 2003) by choosing", "startOffset": 70, "endOffset": 86}, {"referenceID": 23, "context": "We omit the proofs of these two lemmas because they are almost identical to those for Theorem 2 and Theorem 3 in Servedio (2003) respectively.", "startOffset": 113, "endOffset": 129}, {"referenceID": 24, "context": "Thus, if we use the gradient descent algorithm of (Zinkevich, 2003) to produce \u03b1t at step t, we can have", "startOffset": 50, "endOffset": 67}, {"referenceID": 17, "context": "Another case is the algorithm in Pelossof et al. (2008), which assumes the weak learners to be static, i.", "startOffset": 33, "endOffset": 56}, {"referenceID": 0, "context": "Yet another family of online boosting algorithms are proposed in Babenko et al. (2009a), which requires the weak learners to be updated using stochastic gradient descent so that the weak learners can be chained with optimizing a choice of loss function, while our proposed algorithms treat weak learners in a black-box manner with minimum assumptions.", "startOffset": 65, "endOffset": 88}, {"referenceID": 14, "context": "Online GradientBoost (Leistner et al., 2009) is an online variant of GradientBoost (Friedman, 2000), which uses functional gradient descent to", "startOffset": 21, "endOffset": 44}, {"referenceID": 8, "context": ", 2009) is an online variant of GradientBoost (Friedman, 2000), which uses functional gradient descent to", "startOffset": 46, "endOffset": 62}, {"referenceID": 14, "context": "We take such a K for a fair comparison, and run the algorithm with the logit loss function that has consistently been the best choice in existing experimental studies (Leistner et al., 2009).", "startOffset": 167, "endOffset": 190}, {"referenceID": 20, "context": "The first one is Perceptron (Rosenblatt, 1962), a standard and famous online learning algorithm which, like our analysis in Section 3, takes a hypothesis set of linear functions.", "startOffset": 28, "endOffset": 46}, {"referenceID": 4, "context": "OCP, an extra projection step is needed, for which we implement an O(N logN)-time algorithm by Duchi et al. (2008); in fact, a more sophisticated method in Duchi et al.", "startOffset": 95, "endOffset": 115}, {"referenceID": 4, "context": "OCP, an extra projection step is needed, for which we implement an O(N logN)-time algorithm by Duchi et al. (2008); in fact, a more sophisticated method in Duchi et al. (2008) can achieve this in expected O(N) time.", "startOffset": 95, "endOffset": 176}], "year": 2012, "abstractText": "We study the task of online boosting \u2014 combining online weak learners into an online strong learner. While batch boosting has a sound theoretical foundation, online boosting deserves more study from the theoretical perspective. In this paper, we carefully compare the differences between online and batch boosting, and propose a novel and reasonable assumption for the online weak learner. Based on the assumption, we design an online boosting algorithm with a strong theoretical guarantee by adapting from the offline SmoothBoost algorithm that matches the assumption closely. We further tackle the task of deciding the number of weak learners using established theoretical results for online convex programming and predicting with expert advice. Experiments on real-world data sets demonstrate that the proposed algorithm compares favorably with existing online boosting algorithms.", "creator": "LaTeX with hyperref package"}}}