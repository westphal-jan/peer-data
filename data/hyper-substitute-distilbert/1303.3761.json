{"id": "1303.3761", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Mar-2013", "title": "Update report: LEO-II version 1.5", "abstract": "critical improvements of simple leo - burnett arrow prover are presented. these improvements include regular conceptual paper presentation, new translations into byte - order phrases, rule support and the axiom of convergence, detection of gap equality, and more flexible lesson scheduling.", "histories": [["v1", "Fri, 15 Mar 2013 13:03:40 GMT  (37kb)", "https://arxiv.org/abs/1303.3761v1", "7 pages"], ["v2", "Tue, 14 May 2013 07:51:31 GMT  (37kb)", "http://arxiv.org/abs/1303.3761v2", "7 pages"]], "COMMENTS": "7 pages", "reviews": [], "SUBJECTS": "cs.LO cs.AI cs.MS", "authors": ["christoph benzm\\\"uller", "nik sultana"], "accepted": false, "id": "1303.3761"}, "pdf": {"name": "1303.3761.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Nik Sultana"], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n30 3.\n37 61\nv2 [\ncs .L\nO ]\n1 4\nM ay\n2 01\nKeywords: Automated Theorem Proving, Classical Higher-Order Logic"}, {"heading": "1 Introduction", "text": "It has been five years since the last system description of Leo-II [6], and during the last months various improvements have been made to the system. In this article we outline the current system and describe the recent improvements."}, {"heading": "2 System overview", "text": "Leo-II is written in OCaml and implements a RUE calculus [12] which relies on a \u2018Boolean aware\u2019 (or, more generally, \u2018theory aware\u2019 [3]) extensional preunification engine. Leo-II accepts problems encoded in the CNF (clausal first-order form) and FOF (first-order form) languages from the TPTP [15], but its principal input language is THF0, core typed higher-order form [16].\nThe logical organisation of the prover is illustrated in Figure 1, and this roughly corresponds to the modular organisation of the code. It is structured into four layers, as the figure shows:\nOperating mode. The prover can be operated in two ways: (i) Leo-II can be used as a proof assistant when run in interactive mode. It provides a command interface through which the user can inspect and manipulate the prover\u2019s state, making calls to the calculus\u2019 rules as needed. This mode is very valuable for exploring logical problems and for debugging the prover\u2019s automatic mode. (ii) The prover is usually run in automatic mode: this comprises a set of strategy schedules, and a main loop which drives applications of the calculus\u2019 rules. Prover interface. Both modes use a common infrastructure: they parse a problem and load it into the prover\u2019s state, then further manipulate the state by executing commands. A command might involve carrying out an inference, inspecting the state, switching flags, calling external provers, etc. Each command makes calls to lower levels of the prover.\nLogic. The main component in this level consists of the calculus: a collection of functions which accept and return clauses. This level also contains Leo-II\u2019s main loop, and an interface to external ATPs (which also translates problems to other formats). Basis. The lowest level of Leo-II defines the representation of terms and types, and associated operations (e.g. substitution, unification, matching, etc)."}, {"heading": "3 Improvements", "text": "The TPTP problem set is the canonical benchmark by which theorem provers are presently evaluated. We accompany the description of improvements in this section with TPTP problem names whose solution is affected by the feature. These problems consist of THF problems drawn from TPTP 5.4.0. We have used E version 1.6 as the backend ATP. Our tests were run on a 2GHz AMD Opteron with 4GB RAM, and given 60-second timeout. LEO-II was compiled with OCaml 3.11.2."}, {"heading": "3.1 ATP interface", "text": "Leo-II cooperates with other provers in order to maximise its potential. We improved Leo-II\u2019s translation to FOL in recognition of this. Version 1.5 includes a better translation into FOF, an experimental translation into TFF [14], and supports additional backend ATPs.\nTranslation into FOL. Alongside the old translations which were previously implemented in Leo-II, version 1.5 features a new translation module which was written from scratch. This module contains an intermediate language to which problems are first translated, before being transformed further and printed into a specific target syntax. HOL-to-FOL translations consist of a pipeline of functions which bring HOL formulas into this intermediate language, applying\nanalyses and transformations along the way. We are also experimenting with lighter encoding of type information. We have closely followed Claessen et al [7] to implement their monotonicity analysis by producing a SAT encoding, which we send to MiniSat using an interface adapted from Satallax [2].\nLeo-II\u2019s old and new FOF encodings can be used via the command-line arguments --translation fully-typed and --translation fof full respectively. The gain of fof full over fully-typed is due to improved handling of formulas\u2014for instance, the new FOF translation implements full \u03bb-lifting, which the old translation didn\u2019t. The fof full translation is now set as default.\nBackend ATPs. Leo-II is mainly used in combination with E [11], and version Leo-II 1.5 features small improvements in how it interacts with E. In version 1.5 we improved Leo-II\u2019s ATP interface and added support for various other backend ATPs, including remote provers on SystemOnTPTP [15]."}, {"heading": "3.2 Support for Axiom of Choice", "text": "The default semantics for THF0 is Henkin semantics with choice. Until version 1.5, Leo-II did not support reasoning with choice, unless na\u0308\u0131ve Skolemization was used\u2014that is, first-order Skolemization without employing further restrictions (as investigated by Miller [8]). This enables limited reasoning with choice, and succeeds in some example cases, but it fails in many others [5, Section 3.2].\nIn order to extend Leo-II to support the axiom of choice (AC), instances of AC could be automatically added to the input problem. An example is the following instance of AC for type (\u03b9 \u2192 o) \u2192 \u03b9:\n\u2203E(\u03b9\u2192o)\u2192\u03b9\u2200P(\u03b9\u2192o). \u2203X\u03b9(P X) \u21d2 P (E P ) (1)\nHowever, such kinds of impredicative axioms should generally be avoided in automated proof search since they allow for simulation of the cut rule in any Henkin-complete THF prover [4].\nOur approach involves adding two new rules to Leo-II: detectChoiceFn and choice. The first rule detects and removes instances of AC, such as (1) above, and keeps a register of choice functions CFs. CFs always contains at least one choice function symbol for each choice type. The second rule gives the semantics to choice functions. Taken together, these rules allow AC-valid reasoning without the risk of cut-simulation.\nIn more detail, rule detectChoiceFn removes choice-axiom clauses from the search space and registers the corresponding choice function symbols f in CFs.\n[PX ]ff \u2228 [P (f(\u03b1\u2192o)\u2192\u03b1P )] tt detectChoiceFn CFs \u2190\u2212 CFs \u222a {f(\u03b1\u2192o)\u2192\u03b1}\nRule choice investigates whether a term \u01eb(\u03b1\u2192o)\u2192\u03b1B\u03b1\u2192o (where \u01eb \u2208 CFs is a registered choice function or a free variable) is contained as a subterm of a literal [A]p in a clause C. In this case it adds the instantiation of AC at type\n(\u03b1 \u2192 o) \u2192 \u03b1, and with term B, to the search space. Side-conditions guard against unsound reasoning, such as the \u2018uncapturing\u2019 of free variables in B:\nC := C\u2032 \u2228 [A[E(\u03b1\u2192o)\u2192\u03b1B]] p\n\u01eb \u2208 CFs, E = \u01eb or E \u2208 freeVars(C), freeVars(B) \u2286 freeVars(C), Y fresh\nchoice [B Y ]ff \u2228 [B (\u01eb(\u03b1\u2192o)\u2192\u03b1B)] tt\nRules detectChoiceFn and choice are obviously sound: detectChoiceFn simply removes clauses from the search space, and for any choice function f , the rule choice only introduces new instances of the corresponding choice axiom.\nThere is a correspondence with the handling of choice in Satallax. Satallax too considers only selective instantiations of AC in order to avoid cut-simulation. For instance, when (1) is assumed, the termsT which Satallax considers to be eligible instantiations for variable P are those occurring in formulas of the following forms in a tableau branch (and where \u01eb is a choice function): (\u01eb T) S1 . . . Sn or \u00ac((\u01eb T) S1 . . . Sn), or the disequations (\u01eb T)S1 . . . Sn 6= S or S 6= (\u01eb T)S1 . . . Sn. It is easy to see that our rule choice, which is less restrictive, subsumes these cases. We also experimented with Satallax\u2019s approach in Leo-II but this led to worse results. Our choice rule is more closely related to that of Mints [9]. Use of the choice rules can be disabled using the -nuc command-line switch."}, {"heading": "3.3 Detection of defined equality", "text": "Primitive equality in HOL refers to the use of the interpreted constant \u2018=\u2019. Equality can also be defined in HOL\u2014for example, as \u03bbX\u03b1\u03bbY\u03b1\u2200P\u03b1\u2192o. P X \u21d2 P Y or \u03bbX\u03b1\u03bbY\u03b1\u2200Q\u03b1\u2192\u03b1\u2192o. \u2200Z\u03b1(Q Z Z) \u21d2 Q X Y . The former is known as Leibniz equality and the latter we call Andrews equality (cf. [1], Exercise X5303). Both Leibniz and Andrews equality support cut-simulation due to their impredicative nature [4], and should thus be avoided in proof automation. In fact, using primitive, rather than defined, equality may save many primitive substitution steps in proofs. Such steps involve instantiations of set variables, and this generally involves blind guessing. Examples of the benefit of using primitive, rather than defined, equality have been given in the literature [5, Sections 5.1 and 5.2]. In order to address this issue we added the following two rules to Leo-II\u2019s calculus; they instantiate the set variable P with primitive equality:\nC \u2228 [P A]ff \u2228 [P B]tt\nLeibEQ C{\u03bbX. A = X/P} \u2228 [A = B]tt\nC \u2228 [P A A]ff\nAndrEQ C{\u03bbX\u03bbY. X = Y/P}\nSoundness of LeibEQ and AndrEQ is obvious, since both rules simply realise specific instances of primitive substitution. For improved configurability, either rule can be individually disabled from the command-line by using the switches -nrleq and -nraeq respectively. If LeibEQ is used in combination with the new FOF translations (see Section 3.1) several TPTP problems whose previous SZS [13] status was \u2018Unknown\u2019 can now be solved by Leo-II. Examples include SYO246\u02c65.p, SYO244\u02c65.p, NUM817\u02c65.p, NUM816\u02c65.p, and NUM814\u02c65.p.\nThere are also many problems that can now be solved with primitive substitution (blind guessing) disabled when LeibEQ and AndrEQ are available. Overall, these two new rules lead to significantly better coverage using the lighter primitivesubstitution search modes -ps 0 or -ps 1."}, {"heading": "3.4 Strategy scheduling", "text": "Strategy schedules were added to Leo-II in version 1.2 and the catalogue of schedules has slowly increased in the versions that followed. In version 1.5 we recoded the strategy-scheduling feature to facilitate the encoding of new strategies, to improve code reuse with other parts of Leo-II, and to have greater flexibility when encoding strategies.\nWe are also interested in computing strategies on-the-fly based on problem characteristics, and version 1.5 carries out some small initial checks (e.g. size of the problem, and whether it contains instances of AC), and schedules strategies based on that limited analysis. Optimising this further remains as future work."}, {"heading": "3.5 Other improvements", "text": "Numerous other additions were made to Leo-II. Previously, Leo-II was entirely focused on refutation: that is, until version 1.5, in terms of the SZS classification, Leo-II would judge a problem to be a Theorem (if a refutation exists), Unsatisfiable (if the problem\u2019s axioms themselves can be refuted), or diverge (by extending the preunification depth and reattempting a refutation). It can now classify Satisfiable problems and detect CounterSatisfiable problems, thus improving both Leo-II\u2019s precision and termination behaviour. The added support for choice was very relevant for achieving this.\nLeo-II\u2019s unification algorithm has been redone, and can be set (from the command-line) to disregard Boolean and functional extensionality. This has strengthened Leo-II\u2019s behaviour in non-extensional problems, since disabling the extensional behaviour shrinks the search space.\nNumerous other improvements and fixes have been made: these range from system features (such as the parser, status reporting, avoiding redundant computations, etc) to deeper areas in the calculus and main loop (including factorisation, subsumption, and clause selection)."}, {"heading": "4 Future work", "text": "We have started experimenting with using term orderings to influence literal selection. We also plan to revise Leo-II\u2019s internals to make full use of the potential benefit they offer. For instance, the shared term graph is currently underutilised.\nMore work is needed to compute better schedules, paired with better problem analyses. Such analyses can determine the scheduling of specific strategies, which can be better tuned to the problem.\nThe ATP interface can be improved further to call multiple backend ATPs in parallel. Experiments comparing 30-second invocations of Leo-II on all THF problems, supported by provers E (version 1.6), SPASS (version 3.5) [17] and Vampire (version 2.6) [10] showed us that there were 37, 5 and 20 theorems that were proved exclusively by Leo-II(E), Leo-II(SPASS) and Leo-II(Vampire), respectively. And there were 31, 95 and 98 theorems that Leo-II(E), LeoII(SPASS) and Leo-II(Vampire) missed, but which one of the others could prove.\nSupporting various ATP backends increases the scope for peephole optimisation; we have not yet investigated this. The translation module can be optimised further, and extended to target more formats. Table 1 one shows how the new HOL-to-FOL translation (fof full) and its lighter variant (fof experiment) are superior to Leo-II\u2019s preexisting encoding (fully typed). In future work we plan to improve fof experiment further and make it the default translation."}, {"heading": "5 Conclusion", "text": "Version 1.5 of Leo-II includes various improvements which affect its performance and completeness. To obtain a broader picture, we compared the results of using Leo-II version 1.5 with earlier versions, and the results are shown in Table 2. In this experiment we counted the matches between Leo-II\u2019s SZS output and the TPTP problem\u2019s SZS status (included in its header).3 All the net gains are positive, but a more thorough evaluation (on different benchmarks, and considering various parameters) remains as future work. Within a 30s timeout, Leo-II version 1.5 can classify 196 more problems than its predecessor. The main boost in this version is provided by the detection of non-theorems (125196 ).\n3 This also means that \u2018Unknown\u2019 problems which Leo-II now classifies as \u2018Theorem\u2019 count against us, but this experiment was only intended to offer a rough idea of progress.\nAcknowledgements: Work on Leo-II was supported by the UK Engineering and Physical Sciences Research Council (grant number EP/D070511/1), and the German Research Foundation under grant BE 2501/9-1. The second author was supported by a grant from the German Academic Exchange Service (DAAD) during a visit to Freie Universita\u0308t Berlin, during which the work described in this paper was carried out. We thank Chad Brown for allowing us to use Satallax\u2019s MiniSat interface, and thank Mike Gordon, Grant Passmore, and Larry Paulson for feedback on this article."}], "references": [{"title": "An Introduction to Mathematical Logic and Type Theory: To Truth", "author": ["P.B. Andrews"], "venue": "Through Proof. Applied Logic Series. Springer,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2002}, {"title": "Analytic tableaux for higher-order logic with choice", "author": ["J. Backes", "C.E. Brown"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2011}, {"title": "Comparing approaches to resolution based higher-order theorem", "author": ["C. Benzm\u00fcller"], "venue": "proving. Synthese,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2002}, {"title": "Cut-simulation and impredicativity", "author": ["C. Benzm\u00fcller", "C.E. Brown", "M. Kohlhase"], "venue": "Logical Methods in Computer Science,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2009}, {"title": "A Structured Set of Higher-Order Problems", "author": ["C. Benzm\u00fcller", "C.E. Brown"], "venue": "Proc. of TPHOLs 2005,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2005}, {"title": "LEO-II - a cooperative automatic theorem prover for higher-order logic", "author": ["C. Benzm\u00fcller", "F. Theiss", "L. Paulson", "A. Fietzke"], "venue": "Proc. of IJCAR 2008,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2008}, {"title": "Sort it out with monotonicity: translating between many-sorted and unsorted first-order logic", "author": ["K. Claessen", "A. Lilliestr\u00f6m", "N. Smallbone"], "venue": "Proc. of CADE 2011,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2011}, {"title": "Proofs in Higher-Order Logic", "author": ["D.A. Miller"], "venue": "PhD thesis, Carnegie Mellon U.,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 1983}, {"title": "Cut-elimination for simple type theory with an axiom of choice", "author": ["G. Mints"], "venue": "Journal of Symbolic Logic,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1999}, {"title": "The design and implementation of VAMPIRE", "author": ["A. Riazanow", "A. Voronkov"], "venue": "AI Commun", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2002}, {"title": "Understanding LEO-II\u2019s proofs. The 9th International Workshop on the Implementation of Logics (IWIL-2012, affiliated with LPAR-2012)", "author": ["N. Sultana", "C. Benzm\u00fcller"], "venue": "Merida, Venezuela,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2012}, {"title": "The SZS ontologies for automated reasoning software. Proc. of the LPAR Workshops: Knowledge Exchange: Automated Provers and Proof Assistants, and The 7th International", "author": ["G. Sutcliffe"], "venue": "Workshop on the Implementation of Logics,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2008}, {"title": "The TPTP typed firstorder form with arithmetic", "author": ["G. Sutcliffe", "S. Schulz", "K. Claessen", "P. Baumgartner"], "venue": "Proc. of LPAR 2012,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2012}, {"title": "The TPTP problem library and associated infrastructure", "author": ["G. Sutcliffe"], "venue": "Journal of Automated Reasoning,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2009}, {"title": "Automated Reasoning in Higher-Order Logic using the TPTP THF Infrastructure", "author": ["G. Sutcliffe", "C. Benzm\u00fcller"], "venue": "Journal of Formalized Reasoning,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "SPASS Version 3.5", "author": ["C. Weidenbach", "D. Dimova", "A. Fietzke", "R. Kumar", "M. Suda", "P. Wischnewski"], "venue": "Proc. of CADE 2009, vol. 5663 of LNCS,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2009}], "referenceMentions": [{"referenceID": 5, "context": "It has been five years since the last system description of Leo-II [6], and during the last months various improvements have been made to the system.", "startOffset": 67, "endOffset": 70}, {"referenceID": 10, "context": "Leo-II is written in OCaml and implements a RUE calculus [12] which relies on a \u2018Boolean aware\u2019 (or, more generally, \u2018theory aware\u2019 [3]) extensional preunification engine.", "startOffset": 57, "endOffset": 61}, {"referenceID": 2, "context": "Leo-II is written in OCaml and implements a RUE calculus [12] which relies on a \u2018Boolean aware\u2019 (or, more generally, \u2018theory aware\u2019 [3]) extensional preunification engine.", "startOffset": 132, "endOffset": 135}, {"referenceID": 13, "context": "Leo-II accepts problems encoded in the CNF (clausal first-order form) and FOF (first-order form) languages from the TPTP [15], but its principal input language is THF0, core typed higher-order form [16].", "startOffset": 121, "endOffset": 125}, {"referenceID": 14, "context": "Leo-II accepts problems encoded in the CNF (clausal first-order form) and FOF (first-order form) languages from the TPTP [15], but its principal input language is THF0, core typed higher-order form [16].", "startOffset": 198, "endOffset": 202}, {"referenceID": 12, "context": "5 includes a better translation into FOF, an experimental translation into TFF [14], and supports additional backend ATPs.", "startOffset": 79, "endOffset": 83}, {"referenceID": 6, "context": "We have closely followed Claessen et al [7] to implement their monotonicity analysis by producing a SAT encoding, which we send to MiniSat using an interface adapted from Satallax [2].", "startOffset": 40, "endOffset": 43}, {"referenceID": 1, "context": "We have closely followed Claessen et al [7] to implement their monotonicity analysis by producing a SAT encoding, which we send to MiniSat using an interface adapted from Satallax [2].", "startOffset": 180, "endOffset": 183}, {"referenceID": 13, "context": "5 we improved Leo-II\u2019s ATP interface and added support for various other backend ATPs, including remote provers on SystemOnTPTP [15].", "startOffset": 128, "endOffset": 132}, {"referenceID": 7, "context": "5, Leo-II did not support reasoning with choice, unless n\u00e4\u0131ve Skolemization was used\u2014that is, first-order Skolemization without employing further restrictions (as investigated by Miller [8]).", "startOffset": 186, "endOffset": 189}, {"referenceID": 3, "context": "However, such kinds of impredicative axioms should generally be avoided in automated proof search since they allow for simulation of the cut rule in any Henkin-complete THF prover [4].", "startOffset": 180, "endOffset": 183}, {"referenceID": 8, "context": "Our choice rule is more closely related to that of Mints [9].", "startOffset": 57, "endOffset": 60}, {"referenceID": 0, "context": "[1], Exercise X5303).", "startOffset": 0, "endOffset": 3}, {"referenceID": 3, "context": "Both Leibniz and Andrews equality support cut-simulation due to their impredicative nature [4], and should thus be avoided in proof automation.", "startOffset": 91, "endOffset": 94}, {"referenceID": 11, "context": "1) several TPTP problems whose previous SZS [13] status was \u2018Unknown\u2019 can now be solved by Leo-II.", "startOffset": 44, "endOffset": 48}, {"referenceID": 15, "context": "5) [17] and Vampire (version 2.", "startOffset": 3, "endOffset": 7}, {"referenceID": 9, "context": "6) [10] showed us that there were 37, 5 and 20 theorems that were proved exclusively by Leo-II(E), Leo-II(SPASS) and Leo-II(Vampire), respectively.", "startOffset": 3, "endOffset": 7}], "year": 2013, "abstractText": "Recent improvements of the LEO-II theorem prover are presented. These improvements include a revised ATP interface, new translations into first-order logic, rule support for the axiom of choice, detection of defined equality, and more flexible strategy scheduling.", "creator": "LaTeX with hyperref package"}}}