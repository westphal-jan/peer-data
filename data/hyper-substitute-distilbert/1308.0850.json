{"id": "1308.0850", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Aug-2013", "title": "Generating Sequences With Recurrent Neural Networks", "abstract": "initial paper shows how long brief - term memory recurrent neural networks was not used to discover complex identities with long - range structure, simply by maintaining relevant query point at life time. the approach is particular for text ( where large data are fragmented ) and online handwriting ( where scripted reports are real - valued ). chat is physically freed of handwriting synthesis by allowing the results to contain many predictions on a text database. the resulting algorithm is able ultimately generate highly realistic data responses demonstrating pretty wide ranged of styles.", "histories": [["v1", "Sun, 4 Aug 2013 21:04:36 GMT  (3854kb,D)", "http://arxiv.org/abs/1308.0850v1", null], ["v2", "Sun, 11 Aug 2013 21:20:24 GMT  (3854kb,D)", "http://arxiv.org/abs/1308.0850v2", null], ["v3", "Fri, 21 Feb 2014 17:51:54 GMT  (3854kb,D)", "http://arxiv.org/abs/1308.0850v3", null], ["v4", "Wed, 2 Apr 2014 16:22:09 GMT  (3854kb,D)", "http://arxiv.org/abs/1308.0850v4", null], ["v5", "Thu, 5 Jun 2014 16:04:02 GMT  (3887kb,D)", "http://arxiv.org/abs/1308.0850v5", "Thanks to Peng Liu and Sergey Zyrianov for various corrections"]], "reviews": [], "SUBJECTS": "cs.NE cs.CL", "authors": ["alex graves"], "accepted": false, "id": "1308.0850"}, "pdf": {"name": "1308.0850.pdf", "metadata": {"source": "CRF", "title": "Generating Sequences With Recurrent Neural Networks", "authors": ["Alex Graves"], "emails": ["graves@cs.toronto.edu"], "sections": [{"heading": "1 Introduction", "text": "Recurrent neural networks (RNNs) are a rich class of dynamic models that have been used to generate sequences in domains as diverse as music [6, 4], text [30] and motion capture data [29]. RNNs can be trained for sequence generation by processing real data sequences one step at a time and predicting what comes next. Assuming the predictions are probabilistic, novel sequences can be generated from a trained network by iteratively sampling from the network\u2019s output distribution, then feeding in the sample as input at the next step; in other words by making the network treat its inventions as if they were real, much like a person dreaming. Although the network itself is deterministic, the stochasticity injected by picking samples induces a distribution over sequences. This distribution is conditional, since the internal state of the network, and hence its predictive distribution, depends on the previous inputs.\nRNNs are \u2018fuzzy\u2019 in the sense that they do not use exact templates from the training data to make predictions, but rather\u2014like other neural networks\u2014 use their internal representation to perform a high-dimensional interpolation between training examples. This distinguishes them from n-gram models and compression algorithms such as Prediction by Partial Matching [5], whose predictive distributions are determined by counting exact matches between the recent history and the training set. The result\u2014which is immediately appar-\nar X\niv :1\n30 8.\n08 50\nv1 [\ncs .N\nE ]\n4 A\nent from the samples in this paper\u2014is that RNNs (unlike template-based algorithms) synthesise and reconstitute the training data in a complex way, and rarely generate the same thing twice. Furthermore, fuzzy predictions do not suffer from the curse of dimensionality, and are therefore much better at modelling real-valued or multivariate data than exact matches.\nIn principle a large enough RNN should be sufficient to generate sequences of arbitrary complexity. In practice however, standard RNNs are unable to store information about past inputs for very long [15]. As well as diminishing their ability to model long-range structure, this \u2018amnesia\u2019 makes them prone to instability when generating sequences. The problem (common to all conditional generative models) is that if the network\u2019s predictions are only based on the last few inputs, and these inputs were themselves predicted by the network, it has little opportunity to recover from past mistakes. Having a longer memory has a stabilising effect, because even if the network cannot make sense of its recent history, it can look further back in the past to formulate its predictions. The problem of instability is especially acute with real-valued data, where it is easy for the predictions to stray from the manifold on which the training data lies. One remedy that has been proposed for conditional models is to inject noise into the predictions before feeding them back into the model [31], thereby increasing the model\u2019s robustness to surprising inputs. However we believe that a better memory is a more profound and effective solution.\nLong Short-term Memory (LSTM) [16] is an RNN architecture designed to be better at storing and accessing information than standard RNNs. LSTM has recently given state-of-the-art results in a variety of sequence processing tasks, including speech and handwriting recognition [10, 12]. The main goal of this paper is to demonstrate that LSTM can use its memory to generate complex, realistic sequences containing long-range structure.\nSection 2 defines a \u2018deep\u2019 RNN composed of stacked LSTM layers, and explains how it can be trained for next-step prediction and hence sequence generation. Section 3 applies the prediction network to text from the Penn Treebank and Hutter Prize Wikipedia datasets. The network\u2019s performance is competitive with state-of-the-art language models, and it works almost as well when predicting one character at a time as when predicting one word at a time. The highlight of this section is a generated sample of Wikipedia text, which showcases the network\u2019s ability to model long-range dependencies. Section 4 shows how the prediction network can be applied to real-valued data through the use of a mixture density output layer, and provides experimental results on the IAM Online Handwriting Database. It also presents generated handwriting samples proving the network\u2019s ability to learn letters and short words direct from pen traces, and to model global features of handwriting style. Section 5 introduces an extension to the prediction network that allows it to condition its outputs on an auxiliary sequence whose alignment with the predictions is unknown. This makes it suitable for handwriting synthesis, where a human user inputs a text and the algorithm generates a handwritten version of it. The synthesis network is trained on the IAM database, then used to generate cursive handwriting samples, some of which cannot be distinguished from real data by the naked eye. A\nmethod for biasing the samples towards higher probability (and greater legibility) is described, along with a technique for \u2018priming\u2019 the samples on real data and thereby mimicking a particular writer\u2019s style. Finally, concluding remarks and directions for future work are given in Section 6."}, {"heading": "2 Prediction Network", "text": "Fig. 1 illustrates the basic recurrent neural network prediction architecture used in this paper. An input vector sequence x = (x1, . . . , xT ) is passed through weighted connections to a stack of N recurrently connected hidden layers to compute first the hidden vector sequences hn = (hn1 , . . . , h n T ) and then the output vector sequence y = (y1, . . . , yT ). Each output vector yt is used to parameterise a predictive distribution Pr(xt+1|yt) over the possible next inputs xt+1. The first element x1 of every input sequence is always a null vector whose entries are all zero; the network therefore emits a prediction for x2, the first real input, with no prior information. The network is \u2018deep\u2019 in both space and time, in the sense that every piece of information passing either vertically or horizontally through the computation graph will be acted on by multiple successive weight matrices and nonlinearities.\nNote the \u2018skip connections\u2019 from the inputs to all hidden layers, and from all hidden layers to the outputs. These make it easier to train deep networks,\nby reducing the number of processing steps between the bottom of the network and the top, and thereby mitigating the \u2018vanishing gradient\u2019 problem [1]. In the special case that N = 1 the architecture reduces to an ordinary, single layer next step prediction RNN.\nThe hidden layer activations are computed by iterating the following equations from t = 1 to T and from n = 2 to N :\nh1t = H ( Wih1xt +Wh1h1h 1 t\u22121 + b 1 h ) (1)\nhnt = H ( Wihnxt +Whn\u22121hnh n\u22121 t +Whnhnh n t\u22121 + b n h ) (2)\nwhere the W terms denote weight matrices (e.g. Wihn is the weight matrix connecting the inputs to the nth hidden layer, Wh1h1 is the recurrent connection at the first hidden layer, and so on), the b terms denote bias vectors (e.g. by is output bias vector) and H is the hidden layer function.\nGiven the hidden sequences, the output sequence is computed as follows:\ny\u0302t = by + N\u2211 n=1 Whnyh n t (3) yt = Y(y\u0302t) (4)\nwhere Y is the output layer function. The complete network therefore defines a function, parameterised by the weight matrices, from input histories x1:t to output vectors yt.\nThe output vectors yt are used to parameterise the predictive distribution Pr(xt+1|yt) for the next input. The form of Pr(xt+1|yt) must be chosen carefully to match the input data. In particular, finding a good predictive distribution for high-dimensional, real-valued data (usually referred to as density modelling), can be very challenging.\nThe probability given by the network to the input sequence x is\nPr(x) = T\u220f t=1 Pr(xt+1|yt) (5)\nand the sequence loss L(x) used to train the network is the negative logarithm of Pr(x):\nL(x) = \u2212 T\u2211\nt=1\nlog Pr(xt+1|yt) (6)\nThe partial derivatives of the loss with respect to the network weights can be efficiently calculated with backpropagation through time [33] applied to the computation graph shown in Fig. 1, and the network can then be trained with gradient descent."}, {"heading": "2.1 Long Short-Term Memory", "text": "In most RNNs the hidden layer function H is an elementwise application of a sigmoid function. However we have found that the Long Short-Term Memory\n(LSTM) architecture [16], which uses purpose-built memory cells to store information, is better at finding and exploiting long range dependencies in the data. Fig. 2 illustrates a single LSTM memory cell. For the version of LSTM used in this paper [7] H is implemented by the following composite function:\nit = \u03c3 (Wxixt +Whiht\u22121 +Wcict\u22121 + bi) (7)\nft = \u03c3 (Wxfxt +Whfht\u22121 +Wcfct\u22121 + bf ) (8)\nct = ftct\u22121 + it tanh (Wxcxt +Whcht\u22121 + bc) (9)\not = \u03c3 (Wxoxt +Whoht\u22121 +Wcoct + bo) (10)\nht = ot tanh(ct) (11)\nwhere \u03c3 is the logistic sigmoid function, and i, f , o and c are respectively the input gate, forget gate, output gate, cell and cell input activation vectors, all of which are the same size as the hidden vector h. The weight matrix subscripts have the obvious meaning, for example Whi is the hidden-input gate matrix, Wxo is the input-output gate matrix etc. The weight matrices from the cell to gate vectors (e.g. Wsi) are diagonal, so element m in each gate vector only receives input from element m of the cell vector. The bias terms (which are added to i, f , c and o) have been omitted for clarity.\nThe original LSTM algorithm used a custom designed approximate gradient calculation that allowed the weights to be updated after every timestep [16]. However the full gradient can instead be calculated with backpropagation through time [11], the method used in this paper. One difficulty when training LSTM with the full gradient is that the derivatives sometimes become excessively large,\nleading to numerical problems. To prevent this, all the experiments in this paper clipped the derivative of the loss with respect to the network inputs to the LSTM layers (before the sigmoid and tanh functions are applied) to lie within a predefined range1."}, {"heading": "3 Text Prediction", "text": "Text data is discrete, and is typically presented to neural networks using \u2018onehot\u2019 input vectors. That is, if there are K text classes in total, and class k is fed in at time t, then xt is a length K vector whose entries are all zero except for the kth, which is one. Pr(xt+1|yt) is therefore a multinomial distribution, which can be naturally parameterised by a softmax function at the output layer:\nPr(xt+1 = k|yt) = ykt = exp ( y\u0302kt )\u2211K\nk\u2032=1 exp ( y\u0302k \u2032 t ) (12) Substituting into Eq. (6) we see that\nL(x) = \u2212 T\u2211\nt=1\nlog y xt+1 t (13)\n=\u21d2 \u2202L(x) \u2202y\u0302kt = ykt \u2212 \u03b4k,xt+1 (14)\nThe only thing that remains to be decided is which set of classes to use. In most cases, text prediction (usually referred to as language modelling) is performed at the word level. K is therefore the number of words in the dictionary. This can be problematic for realistic tasks, where the number of words (including variant conjugations, proper names, etc.) often exceeds 100,000. As well as requiring many parameters to model, having so many classes demands a huge amount of training data to adequately cover the possible contexts for the words. In the case of softmax models, a further difficulty is the high computational cost of evaluating all the exponentials during training (although several methods have been to devised make training large softmax layers more efficient, including tree-based models [25, 23], low rank approximations [27] and stochastic derivatives [26]). Furthermore, word-level models are not applicable to text data containing non-word strings, such as multi-digit numbers or web addresses.\nCharacter-level language modelling with neural networks has recently been considered [30, 24], and found to give slightly worse performance than equivalent word-level models. Nonetheless, predicting one character at a time is more interesting from the perspective of sequence generation, because it allows the network to invent novel words and strings. In general, the experiments in this paper aim to predict at the finest granularity found in the data, so as to maximise the generative flexibility of the network.\n1In fact this technique was used in all my previous papers on LSTM, and in my publicly available LSTM code, but I forgot to mention it anywhere\u2014mea culpa."}, {"heading": "3.1 Penn Treebank Experiments", "text": "The first set of text prediction experiments focused on the Penn Treebank portion of the Wall Street Journal corpus [22]. This was a preliminary study whose main purpose was to gauge the predictive power of the network, rather than to generate interesting sequences.\nAlthough a relatively small text corpus (a little over a million words in total), the Penn Treebank data is widely used as a language modelling benchmark. The training set contains 930,000 words, the validation set contains 74,000 words and the test set contains 82,000 words. The vocabulary is limited to 10,000 words, with all other words mapped to a special \u2018unknown word\u2019 token. The end-ofsentence token was included in the input sequences, and was counted in the sequence loss. The start-of-sentence marker was ignored, because its role is already fulfilled by the null vectors that begin the sequences (c.f. Section 2).\nThe experiments compared the performance of word and character-level LSTM predictors on the Penn corpus. In both cases, the network architecture was a single hidden layer with 1000 LSTM units. For the character-level network the input and output layers were size 49, giving approximately 4.3M weights in total, while the word-level network had 10,000 inputs and outputs and around 54M weights. The comparison is therefore somewhat unfair, as the word-level network had many more parameters. However, as the dataset is small, both networks were easily able to overfit the training data, and it is not clear whether the character-level network would have benefited from more weights. All networks were trained with stochastic gradient descent, using a learn rate of 0.0001 and a momentum of 0.99. The LSTM derivates were clipped in the range [\u22121, 1] (c.f. Section 2.1).\nNeural networks are usually evaluated on test data with fixed weights. For prediction problems however, where the inputs are the targets, it is legitimate to allow the network to adapt its weights as it is being evaluated (so long as it only sees the test data once). Mikolov refers to this as dynamic evaluation. Dynamic evaluation allows for a fairer comparison with compression algorithms, for which there is no division between training and test sets, as all data is only predicted once.\nSince both networks overfit the training data, we also experiment with two types of regularisation: weight noise [18] with a std. deviation of 0.075 applied to the network weights at the start of each training sequence, and adaptive weight noise [8], where the variance of the noise is learned along with the weights using a Minimum description Length (or equivalently, variational inference) loss function. When weight noise was used, the network was initialised with the final weights of the unregularised network. Similarly, when adaptive weight noise was used, the weights were initialised with those of the network trained with weight noise. We have found that retraining with iteratively increased regularisation is considerably faster than training from random weights with regularisation. Adaptive weight noise was found to be prohibitively slow for the word-level network, so it was regularised with fixed-variance weight noise only. One advantage of adaptive weight is that early stopping is not needed\n(the network can safely be stopped at the point of minimum total \u2018description length\u2019 on the training data). However, to keep the comparison fair, the same training, validation and test sets were used for all experiments.\nThe results are presented with two equivalent metrics: bits-per-character (BPC), which is the average value of \u2212 log2 Pr(xt+1|yt) over the whole test set; and perplexity which is two to the power of the average number of bits per word (the average word length on the test set is about 5.6 characters, so perplexity \u2248 25.6BPC). Perplexity is the usual performance measure for language modelling.\nTable 1 shows that the word-level RNN performed better than the characterlevel network, but the gap appeared to close when regularisation is used. Overall the results compare favourably with those collected in Tomas Mikolov\u2019s thesis [23]. For example, he records a perplexity of 141 for a 5-gram with KeyserNey smoothing, 141.8 for a word level feedforward neural network, 131.1 for the state-of-the-art compression algorithm PAQ8 and 123.2 for a dynamically evaluated word-level RNN. However by combining multiple RNNs, a 5-gram and a cache model in an ensemble, he was able to achieve a perplexity of 89.4. Interestingly, the benefit of dynamic evaluation was far more pronounced here than in Mikolov\u2019s thesis (he records a perplexity improvement from 124.7 to 123.2 with word-level RNNs). This suggests that LSTM is better at rapidly adapting to new data than ordinary RNNs."}, {"heading": "3.2 Wikipedia Experiments", "text": "In 2006 Marcus Hutter, Jim Bowery and Matt Mahoney organised the following challenge, commonly known as Hutter prize [17]: to compress the first 100 million bytes of the complete English Wikipedia data (as it was at a certain time on March 3rd 2006) to as small a file as possible. The file had to include not only the compressed data, but also the code implementing the compression algorithm. Its size can therefore be considered a measure of the minimum description length [13] of the data using a two part coding scheme.\nWikipedia data is interesting from a sequence generation perspective because\nit contains not only a huge range of dictionary words, but also many character sequences that would not be included in text corpora traditionally used for language modelling. For example foreign words (including letters from nonLatin alphabets such as Arabic and Chinese), indented XML tags used to define meta-data, website addresses, and markup used to indicate page formatting such as headings, bullet points etc. An extract from the Hutter prize dataset is shown in Figs. 3 and 4.\nThe first 96M bytes in the data were evenly split into sequences of 100 bytes and used to train the network, with the remaining 4M were used for validation. The data contains a total of 205 one-byte unicode symbols. The total number of characters is much higher, since many characters (especially those from nonLatin languages) are defined as multi-symbol sequences. In keeping with the principle of modelling the smallest meaningful units in the data, the network predicted a single byte at a time, and therefore had size 205 input and output layers.\nWikipedia contains long-range regularities, such as the topic of an article, which can span many thousand words. To make it possible for the network to capture these, its internal state (that is, the output activations ht of the hidden layers, and the activations ct of the LSTM cells within the layers) were only reset every 100 sequences. Furthermore the order of the sequences was not shuffled during training, as it usually is for neural networks. The network was therefore able to access information from up to 10K characters in the past when making predictions. The error terms were only backpropagated to the start of each 100 byte sequence, meaning that the gradient calculation was approximate. This form of truncated backpropagation has been considered before for RNN language modelling [23], and found to speed up training (by reducing the sequence length and hence increasing the frequency of stochastic weight updates) without affecting the network\u2019s ability to learn long-range dependencies.\nA much larger network was used for this data than the Penn data (reflecting the greater size and complexity of the training set) with seven hidden layers of 700 LSTM cells, giving approximately 21.3M weights. The network was trained with stochastic gradient descent, using a learn rate of 0.0001 and a momentum of 0.9. It took four training epochs to converge. The LSTM derivates were clipped in the range [\u22121, 1].\nAs with the Penn data, we tested the network on the validation data with and without dynamic evaluation (where the weights are updated as the data is predicted). As can be seen from Table 2 performance was much better with dynamic evaluation. This is probably because of the long range coherence of Wikipedia data; for example, certain words are much more frequent in some articles than others, and being able to adapt to this during evaluation is advantageous. It may seem surprising that the dynamic results on the validation set were substantially better than on the training set. However this is easily explained by two factors: firstly, the network underfit the training data, and secondly some portions of the data are much more difficult than others (for example, plain text is harder to predict than XML tags).\nTo put the results in context, the current winner of the Hutter Prize (a\nvariant of the PAQ-8 compression algorithm [20]) achieves 1.28 BPC on the same data (including the code required to implement the algorithm), mainstream compressors such as zip generally get more than 2, and a character level RNN applied to a text-only version of the data (i.e. with all the XML, markup tags etc. removed) achieved 1.54 on held-out data, which improved to 1.47 when the RNN was combined with a maximum entropy model [24].\nA four page sample generated by the prediction network is shown in Figs. 5 to 8. The sample shows that the network has learned a lot of structure from the data, at a wide range of different scales. Most obviously, it has learned a large vocabulary of dictionary words, along with a subword model that enables it to invent feasible-looking words and names: for example \u201cLochroom River\u201d, \u201cMughal Ralvaldens\u201d, \u201csubmandration\u201d, \u201cswalloped\u201d. It has also learned basic punctuation, with commas, full stops and paragraph breaks occurring at roughly the right rhythm in the text blocks.\nBeing able to correctly open and close quotation marks and parentheses is a clear indicator of a language model\u2019s memory, because the closure cannot be predicted from the intervening text, and hence cannot be modelled with shortrange context [30]. The sample shows that the network is able to balance not only parentheses and quotes, but also formatting marks such as the equals signs used to denote headings, and even nested XML tags and indentation.\nThe network generates non-Latin characters such as Cyrillic, Chinese and Arabic, and seems to have learned a rudimentary model for languages other than English (e.g. it generates \u201ces:Geotnia slago\u201d for the Spanish \u2018version\u2019 of an article, and \u201cnl:Rodenbaueri\u201d for the Dutch one) It also generates convincing looking internet addresses (none of which appear to be real).\nThe network generates distinct, large-scale regions, such as XML headers, bullet-point lists and article text. Comparison with Figs. 3 and 4 suggests that these regions are a fairly accurate reflection of the constitution of the real data (although the generated versions tend to be somewhat shorter and more jumbled together). This is significant because each region may span hundreds or even thousands of timesteps. The fact that the network is able to remain coherent over such large intervals (even putting the regions in an approximately correct order, such as having headers at the start of articles and bullet-pointed \u2018see also\u2019 lists at the end) is testament to its long-range memory.\nAs with all text generated by language models, the sample does not make sense beyond the level of short phrases. The realism could perhaps be improved with a larger network and/or more data. However, it seems futile to expect meaningful language from a machine that has never been exposed to the sensory\nworld to which language refers. Lastly, the network\u2019s adaptation to recent sequences during training (which allows it to benefit from dynamic evaluation) can be clearly observed in the extract. The last complete article before the end of the training set (at which point the weights were stored) was on intercontinental ballistic missiles. The influence of this article on the network\u2019s language model can be seen from the profusion of missile-related terms. Other recent topics include \u2018Individual Anarchism\u2019, the Italian writer Italo Calvino and the International Organization for Standardization (ISO), all of which make themselves felt in the network\u2019s vocabulary."}, {"heading": "By the 1978 Russian [[Turkey|Turkist]] capital city ceased by farmers and the in tention of navigation the ISBNs, all encoding [[Transylvania International Organ isation for Transition Banking|Attiking others]] it is in the westernmost placed", "text": "] self-acharged versions ([[Mt. Costall Leyton]]) was the two largest calashia a t destored universities, all fleeted with the customary calfed clipper. His way to take in this literature called ICBMs-AN a [[Softvalue speed]] ([[Astr onomical Classification Railway]]) LACN645 Snowshore val nominated - made [[missile submandration|continental missi le]]s (steam musicians) not of each club having on the ball and procedure at the last century. Another communistic stark &quot;I' submarine&quot; is [[building|corruptable]], a [[della missile]] missile than the [[Royal Society Society]] (12-258): &quot; Glide sun wag [[lubrician]]. They stay numerous capitalists and gas masks more w idely interested. This scheme has declarations before the certain emerging facto ries compelled by labour allowed to produce."}, {"heading": "In the United States, there is no hard resort in computation significantly.", "text": "In [[1868]] the [[Italo Capital Territories Unit started to the Continental Rail way Centre]] was called ''UC'' or two of his usage before being written by othe r students against the [[elective-ballistic missile]]'s deployment. Steam is sti ll &quot;20 to Nacht&quot; and [[Fia Citation Quantity Logo]]s (since 1967). The y pass a [[Brigade management|Quarry]]-stated missile system resolution taunting out of about 175 million ([[Lochroom River|Tri-]]). Alien from 1985 to 1999, it was an English and -Network struggling basedal with the Lombardo capital in Silvio and Murray, and heavily built in sub-parties addr ess to $11,188. Their forces gained prisoners to stalked a last missile mobili s ite. Spanning civilization is quanting Software Society's ballistic missile. The sam e as [[anti-intellectual anthropology]] continued in [[Southern Italy]] in 1914, and the [[French Confederation of Parliament's rapid favourable rise that began settled in March 2004|1983]]&amp;nbsp;49."}, {"heading": "In [[1904]], the Court began a British backed into a [[SR1]]) missile of [[trial", "text": ""}, {"heading": "4 Handwriting Prediction", "text": "To test whether the prediction network could also be used to generate convincing real-valued sequences, we applied it to online handwriting data (online in this context means that the writing is recorded as a sequence of pen-tip locations, as opposed to offline handwriting, where only the page images are available). Online handwriting is an attractive choice for sequence generation due to its low dimensionality (two real numbers per data point) and ease of visualisation.\nAll the data used for this paper were taken from the IAM online handwriting database (IAM-OnDB) [21]. IAM-OnDB consists of handwritten lines collected from 221 different writers using a \u2018smart whiteboard\u2019. The writers were asked to write forms from the Lancaster-Oslo-Bergen text corpus [19], and the position of their pen was tracked using an infra-red device in the corner of the board. Samples from the training data are shown in Fig. 9. The original input data consists of the x and y pen co-ordinates and the points in the sequence when the pen is lifted off the whiteboard. Recording errors in the x, y data was corrected by interpolating to fill in for missing readings, and removing steps whose length exceeded a certain threshold. Beyond that, no preprocessing was used and the network was trained to predict the x, y co-ordinates and the endof-stroke markers one point at a time. This contrasts with most approaches to handwriting recognition and synthesis, which rely on sophisticated preprocessing and feature-extraction techniques. We eschewed such techniques because they tend to reduce the variation in the data (e.g. by normalising the character size, slant, skew and so-on) which we wanted the network to model. Predicting the pen traces one point at a time gives the network maximum flexibility to invent novel handwriting, but also requires a lot of memory, with the average letter occupying more than 25 timesteps and the average line occupying around 700. Predicting delayed strokes (such as dots for \u2018i\u2019s or crosses for \u2018t\u2019s that are added after the rest of the word has been written) is especially demanding.\nIAM-OnDB is divided into a training set, two validation sets and a test set, containing respectively 5364, 1438, 1518 and 3859 handwritten lines taken from 775, 192, 216 and 544 forms. For our experiments, each line was treated as a separate sequence (meaning that possible dependencies between successive lines were ignored). In order to maximise the amount of training data, we used the training set, test set and the larger of the validation sets for training and the smaller validation set for early-stopping. The lack of independent test set means that the recorded results may be somewhat overfit on the validation set; however the validation results are of secondary importance, since no benchmark results exist and the main goal was to generate convincing-looking handwriting.\nThe principal challenge in applying the prediction network to online handwriting data was determining a predictive distribution suitable for real-valued inputs. The following section describes how this was done."}, {"heading": "4.1 Mixture Density Outputs", "text": "The idea of mixture density networks [2, 3] is to use the outputs of a neural network to parameterise a mixture distribution. A subset of the outputs are used to define the mixture weights, while the remaining outputs are used to parameterise the individual mixture components. The mixture weight outputs are normalised with a softmax function to ensure they form a valid discrete distribution, and the other outputs are passed through suitable functions to keep their values within meaningful range (for example the exponential function is typically applied to outputs used as scale parameters, which must be positive). Mixture density network are trained by maximising the log probability density of the targets under the induced distributions. Note that the densities are normalised (up to a fixed constant) and are therefore straightforward to differentiate and pick unbiased sample from, in contrast with restricted Boltzmann machines [14] and other undirected models.\nMixture density outputs can also be used with recurrent neural networks [28]. In this case the output distribution is conditioned not only on the current input, but on the history of previous inputs. Intuitively, the number of components is the number of choices the network has for the next output given the inputs so far.\nFor the handwriting experiments in this paper, the basic RNN architecture and update equations remain unchanged from Section 2. Each input vector xt consists of a real-valued pair x1, x2 that defines the pen offset from the previous\ninput, along with a binary x3 that has value 1 if the vector ends a stroke (that is, if the pen was lifted off the board before the next vector was recorded) and value 0 otherwise. A mixture of bivariate Gaussians was used to predict x1 and x2, while a Bernoulli distribution was used for x3. Each output vector yt therefore consists of the end of stroke probability e, along with a set of means \u00b5j , standard deviations \u03c3j , correlations \u03c1j and mixture weights \u03c0j for the M mixture components. That is\nxt \u2208 R\u00d7 R\u00d7 {0, 1} (15) yt = ( et, {\u03c0jt , \u00b5 j t , \u03c3 j t , \u03c1 j t}Mj=1 ) (16)\nNote that the mean and standard deviation are two dimensional vectors, whereas the component weight, correlation and end-of-stroke probability are scalar. The vectors yt are obtained from the network outputs y\u0302t, where\ny\u0302t = ( e\u0302t, {w\u0302jt , \u00b5\u0302 j t , \u03c3\u0302 j t , \u03c1\u0302 j t}Mj=1 ) = by + N\u2211 n=1 Whnyh n t (17)\nas follows:\net = 1\n1 + exp (e\u0302t) =\u21d2 et \u2208 (0, 1) (18)\n\u03c0jt = exp\n( \u03c0\u0302jt ) \u2211M\nj\u2032=1 exp ( \u03c0\u0302j \u2032 t ) =\u21d2 \u03c0jt \u2208 (0, 1), \u2211 j \u03c0jt = 1 (19)\n\u00b5jt = \u00b5\u0302 j t =\u21d2 \u00b5 j t \u2208 R (20) \u03c3jt = exp ( \u03c3\u0302jt ) =\u21d2 \u03c3jt > 0 (21)\n\u03c1jt = tanh(\u03c1\u0302 j t ) =\u21d2 \u03c1 j t \u2208 (\u22121, 1) (22)\nThe probability density Pr(xt+1|yt) of the next input xt+1 given the output vector yt is defined as follows:\nPr(xt+1|yt) = M\u2211 j=1 \u03c0jt N (xt+1|\u00b5 j t , \u03c3 j t , \u03c1 j t )\n{ et if (xt+1)3 = 1\n1\u2212 et otherwise (23)\nwhere\nN (x|\u00b5, \u03c3, \u03c1) = 1 2\u03c0\u03c31\u03c32 \u221a 1\u2212 \u03c12 exp\n( Z\n2(1\u2212 \u03c12)\n) (24)\nwith\nZ = (x1 \u2212 \u00b51)2\n\u03c321 +\n(x2 \u2212 \u00b52)2 \u03c322 \u2212 2\u03c1(x1 \u2212 \u00b51)(x2 \u2212 \u00b52) \u03c31\u03c32 (25)\nThis can be substituted into Eq. (6) to determine the sequence loss (up to a constant that depends only on the quantisation of the data and does not influence network training):\nL(x) = T\u2211\nt=1\n\u2212 log \u2211 j \u03c0jtN (xt+1|\u00b5 j t , \u03c3 j t , \u03c1 j t ) \u2212{log et if (xt+1)3 = 1 log(1\u2212 et) otherwise\n(26)\nThe derivative of the loss with respect to the end-of-stroke outputs is straightforward:\n\u2202L(x) \u2202e\u0302t = (xt+1)3 \u2212 et (27)\nThe derivatives with respect to the mixture density outputs can be found by first defining the component responsibilities \u03b3jt :\n\u03b3\u0302jt = \u03c0 j tN (xt+1|\u00b5 j t , \u03c3 j t , \u03c1 j t ) (28) \u03b3jt = \u03b3\u0302jt\u2211M\nj\u2032=1 \u03b3\u0302 j\u2032 t\n(29)\nThen observing that\n\u2202L(x) \u2202\u03c0\u0302jt = \u03c0jt \u2212 \u03b3 j t (30)\n\u2202L(x) \u2202(\u00b5\u0302jt , \u03c3\u0302 j t , \u03c1\u0302 j t ) = \u2212\u03b3jt \u2202 logN (xt+1|\u00b5jt , \u03c3 j t , \u03c1 j t ) \u2202(\u00b5\u0302jt , \u03c3\u0302 j t , \u03c1\u0302 j t )\n(31)\nwhere\n\u2202 logN (x|\u00b5, \u03c3, \u03c1) \u2202\u00b5\u03021 = C \u03c31 ( x1 \u2212 \u00b51 \u03c31 \u2212 \u03c1(x2 \u2212 \u00b52) \u03c32 ) (32) \u2202 logN (x|\u00b5, \u03c3, \u03c1) \u2202\u00b5\u03022 = C \u03c32 ( x2 \u2212 \u00b52 \u03c32 \u2212 \u03c1(x1 \u2212 \u00b51) \u03c31 ) (33) \u2202 logN (x|\u00b5, \u03c3, \u03c1) \u2202\u03c3\u03021 = C(x1 \u2212 \u00b51) \u03c31 ( x1 \u2212 \u00b51 \u03c31 \u2212 \u03c1(x2 \u2212 \u00b52) \u03c32 ) \u2212 1 (34) \u2202 logN (x|\u00b5, \u03c3, \u03c1) \u2202\u03c3\u03022 = C(x2 \u2212 \u00b52) \u03c32 ( x2 \u2212 \u00b52 \u03c32 \u2212 \u03c1(x1 \u2212 \u00b51) \u03c31 ) \u2212 1 (35) \u2202 logN (x|\u00b5, \u03c3, \u03c1) \u2202\u03c1\u0302 = (x1 \u2212 \u00b51)(x2 \u2212 \u00b52) \u03c31\u03c32 + \u03c1 (1\u2212 CZ) (36)\nwith Z defined as in Eq. (25) and\nC = 1\n1\u2212 \u03c12 (37)\nFig. 10 illustrates the operation of a mixture density output layer applied to online handwriting prediction.\nOutput Density\nTwo types of prediction are visible from the density map: the small blobs that spell out the letters are the predictions as the strokes are being written, the three large blobs are the predictions at the ends of the strokes for the first point in the next stroke. The end-of-stroke predictions have much higher variance because the pen position was not recorded when it was off the whiteboard, and hence there may be a large distance between the end of one stroke and the start of the next.\nThe bottom heatmap shows the mixture component weights during the same sequence. The stroke ends are also visible here, with the most active components switching off in three places, and other components switching on: evidently end-of-stroke predictions use a different set of mixture components from in-stroke predictions."}, {"heading": "4.2 Experiments", "text": "Each point in the data sequences consisted of three numbers: the x and y offset from the previous point, and the binary end-of-stroke feature. The network input layer was therefore size 3. The co-ordinate offsets were normalised to mean 0, std. dev. 1 over the training set. 20 mixture components were used to model the offsets, giving a total of 120 mixture parameters per timestep (20 weights, 40 means, 40 standard deviations and 20 correlations). A further parameter was used to model the end-of-stroke probability, giving an output layer of size 121. Two network architectures were compared for the hidden layers: one with three hidden layers, each consisting of 400 LSTM cells, and one with a single hidden layer of 900 LSTM cells. Both networks had around 3.4M weights. The three layer network was retrained with adaptive weight noise [8], with all std. devs. initialised to 0.075. Training with fixed variance weight noise proved ineffective, probably because it prevented the mixture density layer from using precisely specified weights.\nThe networks were trained with rmsprop: a form of stochastic gradient descent where the gradients are divided by a running average of their recent magnitude [32]. Define i = \u2202L(x) \u2202wi\nwhere wi is network weight i. The weight update equations were:\nni = \u2135ni + (1\u2212 \u2135) 2i (38) gi = \u2135gi + (1\u2212 \u2135) i (39)\n\u2206i = i\u2206i \u2212 \u05d2 i\u221a\nni \u2212 g2i + k (40)\nwi = wi + \u2206i (41)\nwith the following parameters:\n\u2135 = 0.95 (42) i = 0.9 (43) \u05d2 = 0.0001 (44) k = 0.0001 (45)\nThe output derivatives \u2202L(x)\u2202y\u0302t were clipped in the range [\u2212100, 100], and the LSTM derivates were clipped in the range [\u221210, 10]. Clipping the output gradients proved vital for numerical stability; even so, the networks sometimes had numerical problems late on in training, after they had started overfitting on the training data.\nTable 3 shows that the three layer network had an average per-sequence loss 15.3 nats lower than the one layer net. However the sum-squared-error was slightly lower for the single layer network. the use of adaptive weight noise reduced the loss by another 16.7 nats relative to the unregularised three layer network, but did not significantly change the sum-squared error. The adaptive weight noise network appeared to generate the best samples."}, {"heading": "1 layer none -1025.7 0.40", "text": ""}, {"heading": "3 layer none -1041.0 0.41", "text": ""}, {"heading": "3 layer adaptive weight noise -1057.7 0.41", "text": ""}, {"heading": "4.3 Samples", "text": "Fig. 11 shows handwriting samples generated by the prediction network. The network has clearly learned to model strokes, letters and even short words (especially common ones such as \u2018of\u2019 and \u2018the\u2019). It also appears to have learned a basic character level language models, since the words it invents (\u2018eald\u2019, \u2018bryoes\u2019, \u2018lenrest\u2019) look somewhat plausible in English. Given that the average character occupies more than 25 timesteps, this again demonstrates the network\u2019s ability to generate coherent long-range structures."}, {"heading": "5 Handwriting Synthesis", "text": "Handwriting synthesis is the generation of handwriting for a given text. Clearly the prediction networks we have described so far are unable to do this, since there is no way to constrain which letters the network writes. This section describes an augmentation that allows a prediction network to generate data sequences conditioned on some high-level annotation sequence (a character string, in the case of handwriting synthesis). The resulting sequences are sufficiently convincing that they often cannot be distinguished from real handwriting. Furthermore, this realism is achieved without sacrificing the diversity in writing style demonstrated in the previous section.\nThe main challenge in conditioning the predictions on the text is that the alignment between the two is unknown until the data is generated. One neural network model able to make sequential predictions based on two sequences of different length is the RNN transducer [9]. However preliminary experiments on handwriting synthesis with RNN transducers were not encouraging. A possible explanation is that the transducer uses two separate RNNs to process the two sequences, then combines their outputs to make decisions, when it is usually more desirable to make all the information available to single network. This work proposes an alternative model, where a \u2018soft window\u2019 is convolved with the text string and fed in as an extra input to the prediction network. The parameters of the window are output by the network at the same time as it makes the predictions, so that it dynamically determines the implied alignment between the text and the pen locations. Put simply, it learns to decide which character to write next."}, {"heading": "5.1 Synthesis Network", "text": "Fig. 12 illustrates the network architecture used for handwriting synthesis. As with the prediction network, the hidden layers are stacked on top of each other, each feeding up to the layer above, and there are skip connections from the inputs to all hidden layers and from all hidden layers to the outputs. The difference is the added input from the character sequence, mediated by the window layer.\nGiven a length U character sequence c and a length T data sequence x, the soft window wt into c at timestep t (1 \u2264 t \u2264 T ) is defined by the following discrete convolution with a mixture of K Gaussian functions\n\u03c6(t, u) = K\u2211 k=1 \u03b1kt exp ( \u2212\u03b2kt ( \u03bakt \u2212 u )2) (46)\nwt = U\u2211 u=1 \u03c6(t, u)cu (47)\nwhere \u03c6(t, u) is the window weight of cu at timestep t. Intuitively, the \u03bat parameters control the location of the window, the \u03b2t parameters control the width of the window and the \u03b1t parameters control the importance of the window within the mixture. The size of the soft window vectors is the same as the size of the character vectors cu (assuming a one-hot encoding, this will be the number of characters in the alphabet). Note that the window mixture is not normalised and hence does not determine a probability distribution; however the window weight \u03c6(t, u) can be loosely interpreted as the network\u2019s belief that it is writing character cu at time t. Fig. 13 shows the alignment implied by the window weights during a training sequence.\nThe size 3K vector p of window parameters is determined as follows by the outputs of the first hidden layer of the network:\n(\u03b1\u0302t, \u03b2\u0302t, \u03ba\u0302t) = Wh1ph 1 t + bp (48)\n\u03b1t = exp (\u03b1\u0302t) (49) \u03b2t = exp ( \u03b2\u0302t ) (50)\n\u03bat = \u03bat\u22121 + exp (\u03ba\u0302t) (51)\nNote that the location parameters \u03bat are defined as offsets from the previous locations ct\u22121, and that the size of the offset is constrained to be greater than zero. Intuitively, this means that network learns how far to slide each window at each step, rather than an absolute location. Using offsets was essential to getting the network to align the text with the pen trace.\nThe wt vectors are passed to the second and third hidden layers at time t, and the first hidden layer at time t+1 (to avoid creating a cycle in the processing\ngraph). The update equations for the hidden layers are h1t = H ( Wih1xt +Wh1h1h 1 t\u22121 +Wwh1wt\u22121 + b 1 h ) (52)\nhnt = H ( Wihnxt +Whn\u22121hnh n\u22121 t +Whnhnh n t\u22121 +Wwhnwt + b n h ) (53)\nThe equations for the output layer remain unchanged from Eqs. (17) to (22). The sequence loss is\nL(x) = \u2212 log Pr(x|c) (54)\nwhere\nPr(x|c) = T\u220f\nt=1\nPr (xt+1|yt) (55)\nNote that yt is now a function of c as well as x1:t. The loss derivatives with respect to the outputs e\u0302t, \u03c0\u0302t, \u00b5\u0302t, \u03c3\u0302t, \u03c1\u0302t remain unchanged from Eqs. (27), (30) and (31) respectively. Given the loss derivative \u2202L(x) \u2202wt\nwith respect to the size W window vector wt, obtained by backpropagating the output derivatives through the computation graph in Fig. 12, the derivatives with respect to the window parameters are as follows:\n(t, u) def = W\u2211 j=1 \u2202L(x) \u2202wjt cju (56)\n\u2202L(x) \u2202\u03b1\u0302kt = \u03b1kt U\u2211 u=1 (t, u) (57)\n\u2202L(x) \u2202\u03b2\u0302kt\n= \u2212\u03b2kt U\u2211\nu=1\n(t, u)(\u03bakt \u2212 u)2 (58)\n\u2202L(x) \u2202\u03bakt = \u2202L(x) \u2202\u03bakt+1 + 2\u03b2kt U\u2211 u=1 (t, u)(u\u2212 \u03bakt ) (59) \u2202L(x) \u2202\u03ba\u0302kt = \u03bakt \u2202L(x) \u2202\u03b2kt (60)\nFig. 14 illustrates the operation of a mixture density output layer applied to handwriting synthesis."}, {"heading": "5.2 Experiments", "text": "The synthesis network was applied to the same input data as the handwriting prediction network in the previous section. The character-level transcriptions from the IAM-OnDB were now used to define the character sequences c. The full transcriptions contain 80 distinct characters (capital letters, lower case letters, digits, and punctuation). However we used only a subset of 57, with all the\nSynthesis Output Density\ndigits and most of the punctuation characters replaced with a generic \u2018nonletter\u2019 label2.\nThe network architecture was as similar as possible to the best prediction network: three hidden layers of 400 LSTM cells each, 20 bivariate Gaussian mixture components at the output layer and a size 3 input layer. The character sequence was encoded with one-hot vectors, and hence the window vectors were size 57. A mixture of 10 Gaussian functions was used for the window parameters, requiring a size 30 parameter vector. The total number of weights was increased to approximately 3.7M.\nThe network was trained with rmsprop, using the same parameters as in the previous section. The network was retrained with adaptive weight noise, initial standard deviation 0.075, and the output and LSTM gradients were again clipped in the range [\u2212100, 100] and [\u221210, 10] respectively.\nTable 4 shows that adaptive weight noise gave a considerable improvement in log-loss (around 31.3 nats) but no significant change in sum-squared error. The regularised network appears to generate slightly more realistic sequences, although the difference is hard to discern by eye. Both networks performed considerably better than the best prediction network. In particular the sumsquared-error was reduced by 44%. This is likely due in large part to the improved predictions at the ends of strokes, where the error is largest."}, {"heading": "5.3 Unbiased Sampling", "text": "Given c, an unbiased sample can be picked from Pr(x|c) by iteratively drawing xt+1 from Pr (xt+1|yt), just as for the prediction network. The only difference is that we must also decide when the synthesis network has finished writing the text and should stop making any future decisions. To do this, we use the following heuristic: as soon as \u03c6(t, U + 1) > \u03c6(t, u) \u2200 1 \u2264 u \u2264 U the current input xt is defined as the end of the sequence and sampling ends. Examples of unbiased synthesis samples are shown in Fig. 15. These and all subsequent figures were generated using the synthesis network retrained with adaptive weight noise. Notice how stylistic traits, such as character size, slant, cursiveness etc. vary\n2This was an oversight; however it led to the interesting result that when the text contains a non-letter, the network must select a digits or punctuation mark to generate. Sometimes the character can be be inferred from the context (e.g. the apostrophe in \u201ccan\u2019t\u201d); otherwise it is chosen at random.\nwidely between the samples, but remain more-or-less consistent within them. This suggests that the network identifies the traits early on in the sequence, then remembers them until the end. By looking through enough samples for a given text, it appears to be possible to find virtually any combination of stylistic traits, which suggests that the network models them independently both from each other and from the text.\n\u2018Blind taste tests\u2019 carried out by the author during presentations suggest that at least some unbiased samples cannot be distinguished from real handwriting by the human eye. Nonetheless the network does make mistakes we would not expect a human writer to make, often involving missing, confused or garbled letters3; this suggests that the network sometimes has trouble determining the alignment between the characters and the trace. The number of mistakes increases markedly when less common words or phrases are included in the character sequence. Presumably this is because the network learns an implicit character-level language model from the training set that gets confused when rare or unknown transitions occur."}, {"heading": "5.4 Biased Sampling", "text": "One problem with unbiased samples is that they tend to be difficult to read (partly because real handwriting is difficult to read, and partly because the network is an imperfect model). Intuitively, we would expect the network to give higher probability to good handwriting because it tends to be smoother and more predictable than bad handwriting. If this is true, we should aim to output more probable elements of Pr(x|c) if we want the samples to be easier to read. A principled search for high probability samples could lead to a difficult inference problem, as the probability of every output depends on all previous outputs. However a simple heuristic, where the sampler is biased towards more probable predictions at each step independently, generally gives good results. Define the probability bias b as a real number greater than or equal to zero. Before drawing a sample from Pr(xt+1|yt), each standard deviation \u03c3jt in the Gaussian mixture is recalculated from Eq. (21) to\n\u03c3jt = exp ( \u03c3\u0302jt \u2212 b ) (61)\nand each mixture weight is recalculated from Eq. (19) to\n\u03c0jt = exp\n( \u03c0\u0302jt (1 + b) ) \u2211M\nj\u2032=1 exp ( \u03c0\u0302j \u2032 t (1 + b) ) (62)\nThis artificially reduces the variance in both the choice of component from the mixture, and in the distribution of the component itself. When b = 0 unbiased sampling is recovered, and as b \u2192 \u221e the variance in the sampling disappears\n3We expect humans to make mistakes like misspelling \u2018temperament\u2019 as \u2018temperement\u2019, as the second writer in Fig. 15 seems to have done.\nand the network always outputs the mode of the most probable component in the mixture (which is not necessarily the mode of the mixture, but at least a reasonable approximation). Fig. 16 shows the effect of progressively increasing the bias, and Fig. 17 shows samples generated with a low bias for the same texts as Fig. 15."}, {"heading": "5.5 Primed Sampling", "text": "Another reason to constrain the sampling would be to generate handwriting in the style of a particular writer (rather than in a randomly selected style). The easiest way to do this would be to retrain it on that writer only. But even without retraining, it is possible to mimic a particular style by \u2018priming\u2019 the network with a real sequence, then generating an extension with the real sequence still in the network\u2019s memory. This can be achieved for a real x, c and a synthesis character string s by setting the character sequence to c\u2032 = c + s and clamping the data inputs to x for the first T timesteps, then sampling as usual until the sequence ends. Examples of primed samples are shown in Figs. 18 and 19. The fact that priming works proves that the network is able to remember stylistic features identified earlier on in the sequence. This technique appears to work better for sequences in the training data than those the network has never seen.\nPrimed sampling and reduced variance sampling can also be combined. As shown in Figs. 20 and 21 this tends to produce samples in a \u2018cleaned up\u2019 version of the priming style, with overall stylistic traits such as slant and cursiveness retained, but the strokes appearing smoother and more regular. A possible application would be the artificial enhancement of poor handwriting."}, {"heading": "6 Conclusions and Future Work", "text": "This paper has demonstrated the ability of Long Short-Term Memory recurrent neural networks to generate both discrete and real-valued sequences with complex, long-range structure using next-step prediction. It has also introduced a novel convolutional mechanism that allows a recurrent network to condition its predictions on an auxiliary annotation sequence, and used this approach to synthesise diverse and realistic samples of online handwriting. Furthermore, it has shown how these samples can be biased towards greater legibility, and how they can be modelled on the style of a particular writer.\nSeveral directions for future work suggest themselves. One is the application of the network to speech synthesis, which is likely to be more challenging than handwriting synthesis due to the greater dimensionality of the data points. Another is to gain a better insight into the internal representation of the data, and to use this to manipulate the sample distribution directly. It would also be interesting to develop a mechanism to automatically extract high-level annotations from sequence data. In the case of handwriting, this could allow for\nmore nuanced annotations than just text, for example stylistic features, different forms of the same letter, information about stroke order and so on."}, {"heading": "Acknowledgements", "text": "Thanks to Yichuan Tang, Ilya Sutskever, Navdeep Jaitly, Geoffrey Hinton and other colleagues at the University of Toronto for numerous useful comments and suggestions. This work was supported by a Global Scholarship from the Canadian Institute for Advanced Research."}], "references": [{"title": "Learning long-term dependencies with gradient descent is difficult", "author": ["Y. Bengio", "P. Simard", "P. Frasconi"], "venue": "IEEE Transactions on Neural Networks,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1994}, {"title": "Mixture density networks", "author": ["C. Bishop"], "venue": "Technical report", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1994}, {"title": "Neural Networks for Pattern Recognition", "author": ["C. Bishop"], "venue": "Oxford University Press, Inc.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1995}, {"title": "Modeling temporal dependencies in high-dimensional sequences: Application to polyphonic music generation and transcription", "author": ["N. Boulanger-Lewandowski", "Y. Bengio", "P. Vincent"], "venue": "Proceedings of the Twenty-nine International Conference on Machine Learning (ICML\u201912)", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2012}, {"title": "Ian", "author": ["J.G. Cleary"], "venue": "and I. H. Witten. Data compression using adaptive coding and partial string matching. IEEE Transactions on Communications, 32:396\u2013402", "citeRegEx": "5", "shortCiteRegEx": null, "year": 1984}, {"title": "Learning precise timing with LSTM recurrent networks", "author": ["F. Gers", "N. Schraudolph", "J. Schmidhuber"], "venue": "Journal of Machine Learning Research, 3:115\u2013143", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2002}, {"title": "Practical variational inference for neural networks", "author": ["A. Graves"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "Sequence transduction with recurrent neural networks", "author": ["A. Graves"], "venue": "ICML Representation Learning Worksop", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2012}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["A. Graves", "A. Mohamed", "G. Hinton"], "venue": "Proc. ICASSP", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2013}, {"title": "Framewise phoneme classification with bidirectional LSTM and other neural network architectures", "author": ["A. Graves", "J. Schmidhuber"], "venue": "Neural Networks, 18:602\u2013610", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2005}, {"title": "Offline handwriting recognition with multidimensional recurrent neural networks", "author": ["A. Graves", "J. Schmidhuber"], "venue": "Advances in Neural Information Processing Systems, volume 21", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2008}, {"title": "The Minimum Description Length Principle (Adaptive Computation and Machine Learning)", "author": ["P.D. Gr\u00fcnwald"], "venue": "The MIT Press", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2007}, {"title": "A Practical Guide to Training Restricted Boltzmann Machines", "author": ["G. Hinton"], "venue": "Technical report", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2010}, {"title": "Gradient Flow in Recurrent Nets: the Difficulty of Learning Long-term Dependencies", "author": ["S. Hochreiter", "Y. Bengio", "P. Frasconi", "J. Schmidhuber"], "venue": "A Field Guide to Dynamical Recurrent Neural Networks", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2001}, {"title": "Long Short-Term Memory", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": "Neural Computation, 9(8):1735\u20131780", "citeRegEx": "16", "shortCiteRegEx": null, "year": 1997}, {"title": "The Human Knowledge Compression Contest", "author": ["M. Hutter"], "venue": null, "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2012}, {"title": "An analysis of noise in recurrent neural networks: convergence and generalization", "author": ["K.-C. Jim", "C. Giles", "B. Horne"], "venue": "Neural Networks, IEEE Transactions on, 7(6):1424 \u20131438", "citeRegEx": "18", "shortCiteRegEx": null, "year": 1996}, {"title": "and G", "author": ["S. Johansson", "R. Atwell", "R. Garside"], "venue": "Leech. The tagged LOB corpus user\u2019s manual; Norwegian Computing Centre for the Humanities", "citeRegEx": "19", "shortCiteRegEx": null, "year": 1986}, {"title": "A machine learning perspective on predictive coding with paq", "author": ["B. Knoll", "N. de Freitas"], "venue": "CoRR, abs/1108.3298,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2011}, {"title": "IAM-OnDB - an on-line English sentence database acquired from handwritten text on a whiteboard", "author": ["M. Liwicki", "H. Bunke"], "venue": "Proc. 8th Int. Conf. on Document Analysis and Recognition, volume 2, pages 956\u2013 961", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2005}, {"title": "Building a large annotated corpus of english: The penn treebank", "author": ["M.P. Marcus", "B. Santorini", "M.A. Marcinkiewicz"], "venue": "COMPUTATIONAL LINGUISTICS, 19(2):313\u2013330", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1993}, {"title": "Statistical Language Models based on Neural Networks", "author": ["T. Mikolov"], "venue": "PhD thesis, Brno University of Technology", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2012}, {"title": "Subword language modeling with neural networks", "author": ["T. Mikolov", "I. Sutskever", "A. Deoras", "H. Le", "S. Kombrink", "J. Cernocky"], "venue": "Technical report, Unpublished Manuscript", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2012}, {"title": "A Scalable Hierarchical Distributed Language Model", "author": ["A. Mnih", "G. Hinton"], "venue": "Advances in Neural Information Processing Systems, volume 21", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2008}, {"title": "A fast and simple algorithm for training neural probabilistic language models", "author": ["A. Mnih", "Y.W. Teh"], "venue": "Proceedings of the 29th International Conference on Machine Learning, pages 1751\u20131758", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2012}, {"title": "Lowrank matrix factorization for deep neural network training with highdimensional output targets", "author": ["T.N. Sainath", "A. Mohamed", "B. Kingsbury", "B. Ramabhadran"], "venue": "Proc. ICASSP", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2013}, {"title": "Better generative models for sequential data problems: Bidirectional recurrent mixture density networks", "author": ["M. Schuster"], "venue": "pages 589\u2013595. The MIT Press", "citeRegEx": "28", "shortCiteRegEx": null, "year": 1999}, {"title": "The recurrent temporal restricted boltzmann machine", "author": ["I. Sutskever", "G.E. Hinton", "G.W. Taylor"], "venue": "pages 1601\u20131608", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2008}, {"title": "Generating text with recurrent neural networks", "author": ["I. Sutskever", "J. Martens", "G. Hinton"], "venue": "ICML", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2011}, {"title": "Factored conditional restricted boltzmann machines for modeling motion style", "author": ["G.W. Taylor", "G.E. Hinton"], "venue": "Proc. 26th Annual International Conference on Machine Learning, pages 1025\u20131032", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2009}, {"title": "Lecture 6.5 - rmsprop: Divide the gradient by a running average of its recent magnitude", "author": ["T. Tieleman", "G. Hinton"], "venue": null, "citeRegEx": "32", "shortCiteRegEx": "32", "year": 2012}, {"title": "Gradient-based learning algorithms for recurrent networks and their computational complexity", "author": ["R. Williams", "D. Zipser"], "venue": "In Back-propagation: Theory, Architectures and Applications,", "citeRegEx": "33", "shortCiteRegEx": "33", "year": 1995}], "referenceMentions": [{"referenceID": 3, "context": "Recurrent neural networks (RNNs) are a rich class of dynamic models that have been used to generate sequences in domains as diverse as music [6, 4], text [30] and motion capture data [29].", "startOffset": 141, "endOffset": 147}, {"referenceID": 28, "context": "Recurrent neural networks (RNNs) are a rich class of dynamic models that have been used to generate sequences in domains as diverse as music [6, 4], text [30] and motion capture data [29].", "startOffset": 154, "endOffset": 158}, {"referenceID": 27, "context": "Recurrent neural networks (RNNs) are a rich class of dynamic models that have been used to generate sequences in domains as diverse as music [6, 4], text [30] and motion capture data [29].", "startOffset": 183, "endOffset": 187}, {"referenceID": 4, "context": "This distinguishes them from n-gram models and compression algorithms such as Prediction by Partial Matching [5], whose predictive distributions are determined by counting exact matches between the recent history and the training set.", "startOffset": 109, "endOffset": 112}, {"referenceID": 13, "context": "In practice however, standard RNNs are unable to store information about past inputs for very long [15].", "startOffset": 99, "endOffset": 103}, {"referenceID": 29, "context": "One remedy that has been proposed for conditional models is to inject noise into the predictions before feeding them back into the model [31], thereby increasing the model\u2019s robustness to surprising inputs.", "startOffset": 137, "endOffset": 141}, {"referenceID": 14, "context": "Long Short-term Memory (LSTM) [16] is an RNN architecture designed to be better at storing and accessing information than standard RNNs.", "startOffset": 30, "endOffset": 34}, {"referenceID": 8, "context": "LSTM has recently given state-of-the-art results in a variety of sequence processing tasks, including speech and handwriting recognition [10, 12].", "startOffset": 137, "endOffset": 145}, {"referenceID": 10, "context": "LSTM has recently given state-of-the-art results in a variety of sequence processing tasks, including speech and handwriting recognition [10, 12].", "startOffset": 137, "endOffset": 145}, {"referenceID": 0, "context": "by reducing the number of processing steps between the bottom of the network and the top, and thereby mitigating the \u2018vanishing gradient\u2019 problem [1].", "startOffset": 146, "endOffset": 149}, {"referenceID": 31, "context": "The partial derivatives of the loss with respect to the network weights can be efficiently calculated with backpropagation through time [33] applied to the computation graph shown in Fig.", "startOffset": 136, "endOffset": 140}, {"referenceID": 14, "context": "(LSTM) architecture [16], which uses purpose-built memory cells to store information, is better at finding and exploiting long range dependencies in the data.", "startOffset": 20, "endOffset": 24}, {"referenceID": 5, "context": "For the version of LSTM used in this paper [7] H is implemented by the following composite function:", "startOffset": 43, "endOffset": 46}, {"referenceID": 14, "context": "The original LSTM algorithm used a custom designed approximate gradient calculation that allowed the weights to be updated after every timestep [16].", "startOffset": 144, "endOffset": 148}, {"referenceID": 9, "context": "However the full gradient can instead be calculated with backpropagation through time [11], the method used in this paper.", "startOffset": 86, "endOffset": 90}, {"referenceID": 23, "context": "In the case of softmax models, a further difficulty is the high computational cost of evaluating all the exponentials during training (although several methods have been to devised make training large softmax layers more efficient, including tree-based models [25, 23], low rank approximations [27] and stochastic derivatives [26]).", "startOffset": 260, "endOffset": 268}, {"referenceID": 21, "context": "In the case of softmax models, a further difficulty is the high computational cost of evaluating all the exponentials during training (although several methods have been to devised make training large softmax layers more efficient, including tree-based models [25, 23], low rank approximations [27] and stochastic derivatives [26]).", "startOffset": 260, "endOffset": 268}, {"referenceID": 25, "context": "In the case of softmax models, a further difficulty is the high computational cost of evaluating all the exponentials during training (although several methods have been to devised make training large softmax layers more efficient, including tree-based models [25, 23], low rank approximations [27] and stochastic derivatives [26]).", "startOffset": 294, "endOffset": 298}, {"referenceID": 24, "context": "In the case of softmax models, a further difficulty is the high computational cost of evaluating all the exponentials during training (although several methods have been to devised make training large softmax layers more efficient, including tree-based models [25, 23], low rank approximations [27] and stochastic derivatives [26]).", "startOffset": 326, "endOffset": 330}, {"referenceID": 28, "context": "Character-level language modelling with neural networks has recently been considered [30, 24], and found to give slightly worse performance than equivalent word-level models.", "startOffset": 85, "endOffset": 93}, {"referenceID": 22, "context": "Character-level language modelling with neural networks has recently been considered [30, 24], and found to give slightly worse performance than equivalent word-level models.", "startOffset": 85, "endOffset": 93}, {"referenceID": 20, "context": "The first set of text prediction experiments focused on the Penn Treebank portion of the Wall Street Journal corpus [22].", "startOffset": 116, "endOffset": 120}, {"referenceID": 16, "context": "Since both networks overfit the training data, we also experiment with two types of regularisation: weight noise [18] with a std.", "startOffset": 113, "endOffset": 117}, {"referenceID": 6, "context": "075 applied to the network weights at the start of each training sequence, and adaptive weight noise [8], where the variance of the noise is learned along with the weights using a Minimum description Length (or equivalently, variational inference) loss function.", "startOffset": 101, "endOffset": 104}, {"referenceID": 21, "context": "Overall the results compare favourably with those collected in Tomas Mikolov\u2019s thesis [23].", "startOffset": 86, "endOffset": 90}, {"referenceID": 15, "context": "In 2006 Marcus Hutter, Jim Bowery and Matt Mahoney organised the following challenge, commonly known as Hutter prize [17]: to compress the first 100 million bytes of the complete English Wikipedia data (as it was at a certain time on March 3rd 2006) to as small a file as possible.", "startOffset": 117, "endOffset": 121}, {"referenceID": 11, "context": "Its size can therefore be considered a measure of the minimum description length [13] of the data using a two part coding scheme.", "startOffset": 81, "endOffset": 85}, {"referenceID": 21, "context": "This form of truncated backpropagation has been considered before for RNN language modelling [23], and found to speed up training (by reducing the sequence length and hence increasing the frequency of stochastic weight updates) without affecting the network\u2019s ability to learn long-range dependencies.", "startOffset": 93, "endOffset": 97}, {"referenceID": 18, "context": "variant of the PAQ-8 compression algorithm [20]) achieves 1.", "startOffset": 43, "endOffset": 47}, {"referenceID": 22, "context": "47 when the RNN was combined with a maximum entropy model [24].", "startOffset": 58, "endOffset": 62}, {"referenceID": 28, "context": "Being able to correctly open and close quotation marks and parentheses is a clear indicator of a language model\u2019s memory, because the closure cannot be predicted from the intervening text, and hence cannot be modelled with shortrange context [30].", "startOffset": 242, "endOffset": 246}, {"referenceID": 19, "context": "All the data used for this paper were taken from the IAM online handwriting database (IAM-OnDB) [21].", "startOffset": 96, "endOffset": 100}, {"referenceID": 17, "context": "The writers were asked to write forms from the Lancaster-Oslo-Bergen text corpus [19], and the position of their pen was tracked using an infra-red device in the corner of the board.", "startOffset": 81, "endOffset": 85}, {"referenceID": 1, "context": "The idea of mixture density networks [2, 3] is to use the outputs of a neural network to parameterise a mixture distribution.", "startOffset": 37, "endOffset": 43}, {"referenceID": 2, "context": "The idea of mixture density networks [2, 3] is to use the outputs of a neural network to parameterise a mixture distribution.", "startOffset": 37, "endOffset": 43}, {"referenceID": 12, "context": "Note that the densities are normalised (up to a fixed constant) and are therefore straightforward to differentiate and pick unbiased sample from, in contrast with restricted Boltzmann machines [14] and other undirected models.", "startOffset": 193, "endOffset": 197}, {"referenceID": 26, "context": "Mixture density outputs can also be used with recurrent neural networks [28].", "startOffset": 72, "endOffset": 76}, {"referenceID": 6, "context": "The three layer network was retrained with adaptive weight noise [8], with all std.", "startOffset": 65, "endOffset": 68}, {"referenceID": 30, "context": "The networks were trained with rmsprop: a form of stochastic gradient descent where the gradients are divided by a running average of their recent magnitude [32].", "startOffset": 157, "endOffset": 161}, {"referenceID": 7, "context": "One neural network model able to make sequential predictions based on two sequences of different length is the RNN transducer [9].", "startOffset": 126, "endOffset": 129}], "year": 2014, "abstractText": "This paper shows how Long Short-term Memory recurrent neural networks can be used to generate complex sequences with long-range structure, simply by predicting one data point at a time. The approach is demonstrated for text (where the data are discrete) and online handwriting (where the data are real-valued). It is then extended to handwriting synthesis by allowing the network to condition its predictions on a text sequence. The resulting system is able to generate highly realistic cursive handwriting in a wide variety of styles.", "creator": "LaTeX with hyperref package"}}}