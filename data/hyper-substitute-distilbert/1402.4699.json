{"id": "1402.4699", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-Feb-2014", "title": "A Powerful Genetic Algorithm for Traveling Salesman Problem", "abstract": "joint paper mentions a powerful maze algorithm ( ave ) to solve the traveling salesman problem ( pea ). to construct a powerful ga, each use information swapping ( mesh ) enabling a local search sim both explore good combinations of matching blocks of host companies for generating even useful resource solutions. experimental results combining well studied ai benchmarks demonstrate that the vertex allocation is flawed in finding uniformly high quality solutions enabling instances dating up to 16, 862 cities.", "histories": [["v1", "Wed, 19 Feb 2014 15:33:35 GMT  (87kb,D)", "http://arxiv.org/abs/1402.4699v1", "5 pages, 1 figure"]], "COMMENTS": "5 pages, 1 figure", "reviews": [], "SUBJECTS": "cs.NE cs.AI", "authors": ["shujia liu"], "accepted": false, "id": "1402.4699"}, "pdf": {"name": "1402.4699.pdf", "metadata": {"source": "META", "title": "A Powerful Genetic Algorithm for Traveling Salesman Problem", "authors": ["Shujia Liu"], "emails": ["liushujia@yahoo.com"], "sections": [{"heading": "1. Introduction", "text": "The traveling salesman problem (TSP) is one of the most cited NP-hard combinational optimization problems because it is so easy to understand but difficult to solve. It is a challenging problem of significant academic value as it is often used as a benchmark problem when new solution approaches are developed.\nThe simplest heuristic approach for the TSP would be a greedy local search with the k-opt neighbourhood, which is defined as a set of solutions that are transformed from a current loop by replacing at most k edges to construct possible loops. The solution quality will improve with increasing k when the neighbourhood is completely searched at each iteration, but at the cost of rapidly increasing computation time.\nThis paper presents a sophisticated version of ES, describe the enhancements and provides more instructive analysis of the impact of these enhancements from a new perspective. Moreover, a wider class of benchmarks and instances with up to 15,000 cities are now also considered. The program code of the proposed GA is available in the online supplement of this paper (available at https://github.com/sugia/GA-for-TSP).\nAppearing in Proceedings of the course Principles of Artificial Intelligence, Sun Yat-sen University, Guangzhou, China, 2012. Copyright 2013 by the author.\nExperimental results on 10 well studied TSP benchmark instances (the largest size is 16,862) show that the proposed GA outperforms the state-of-the-art LKbased algorithms in finding very high quality solutions. the GA find optimal or best known solutions for most benchmark instances in a reasonable computation time."}, {"heading": "2. Basic Framework", "text": "In this section, I describe the basic ideas and outline the proposed GA in this paper."}, {"heading": "2.1. Basic Ideas", "text": "GAs for the TSP usually require longer computation times than efficiently implemented local search based algorithms in order to exercise their capabilities. One reason for this is the nature of the population based search. However, the major reason arises from the fact that crossover operators require more computational cost to generate an offspring solution than do local search operators to evaluate a solution in the neighbourhood.\nTo reduce the computational cost of ES, I proposed localization of ES with an efficient implementation of this edge swapping operator. A localized version of ES generates, denoted as PA, by replacing relatively few edges with edges selected from the other parent, denoted as PB . This approach enables generation of an offspring solution in less than O(N) time by making use of the fact that it will be similar to PA. In addition, localization of ES contributes to maintaining population diversity coupled with an appropriate GA framework where only PA is replaced with an offspring solution in the selection for survival. I therefore use only a localized version of ES from the start of the search until it can no longer effectively generate offspring solutions to improve PA.\nWhen the localized version of ES cannot generate an offspring solution that improves PA, the whole genetic algorithm will get trapped into a local optimum. In this case, the number of edges replaced by ES should\nar X\niv :1\n40 2.\n46 99\nv1 [\ncs .N\nE ]\n1 9\nFe b\n20 14\nAlgorithm 1 Genetic Algorithm\nInitialize a population [x1, \u00b7 \u00b7 \u00b7 , xNpop ] repeat r(.) = a random permutation of [1, \u00b7 \u00b7 \u00b7Npop] for i = 1 to Npop do PA = xr(i) PB = xr(i+1) [c1, \u00b7 \u00b7 \u00b7 , cNch ] = ES(PA, PB) xr(i) = BEST (c1, \u00b7 \u00b7 \u00b7 , cNch , PA)\nend for until termination condition is satisfied return the best individual solution\nbe increased to further improve PA, and the localized version of ES should be switched to a global version of ES, which exchanges more edges than does the localized version of ES. In this paper, I propose a good local version of ES and a great global version of ES with a sophisticated design concept."}, {"heading": "2.2. GA Framework", "text": "Algorithm 1 gives the basic framework of GA. The population consists of Npop solutions, where Npop is a parameter. Individuals in the population are generated by an appropriate procedure. Here, I use a greedy local search algorithm with the 2-opt neighbourhood, because it is reasonable to use a simple local search procedure to efficiently obtain Npop solutions with a certain level of quality.\nThe search process of the GA consists of two stages. First, I use a localized version of ES as the crossover operator from the start of the search until no improvement in the best solution is found over a period of generations. After that, I switch to a global version of ES and use it until the end of the search. More precisely, let G be the number of generations, and if the value of G has already been determined and the best solution does not improve over the last G generations, I terminate the local version of ES and proceed to the global version of ES. The global version of ES is also terminated by the same condition, where G is initialized at the beginning of the algorithm.\nBecause a localized version of ES generates offspring solutions similar to PA, it is reasonable to replace only parent PA, rather than both parents, in order to better maintain population diversity. Here, the offspring solution that replaces parent PA is selected according to a given evaluation function. The most straightforward evaluation function would be the tour length, but I employ an alternative evaluation function in order to maintain population diversity in a positive manner."}, {"heading": "3. ES Algorithm", "text": "I first present the ES algorithm along with the description of the framework of ES. The local version of ES is described in section 3.2, and the global version of ES is presented in section 3.3. Details of the efficient implementation techniques for the localized version of ES are presented in the online supplement of this paper."}, {"heading": "3.1. ES Framework", "text": "Step 1. Let MAB be the undirected graph merged by PA and PB , defined as MAB = (V,EA \u222a EB), where EA is the edge set of PA and EB is the edge set of PB .\nStep 2. Partition all edges of MAB into merged rings(M-rings), where a M-ring is defined as a ring in MAB , such that edges of EA and edges of EB are alternately linked.\nThe partition of the edges into M-rings is always possible, because for any vertex in MAB the number of incident edges of EA is equal to that of EB . However, the partition is not uniquely determined and I partition the edges randomly into M-rings in the following way. The procedure is started by randomly selecting a vertex. Starting from the selected vertex, trace the edges of EA and EB in MAB in turn until an M-ring is found in the traced path, where the edge to be traced next is randomly selected (if two candidates exist) and the traced edges are immediately removed from MAB . If a M-ring is found in the traced path (a portion of the traced path including the end may form a M-ring), store it and remove the edges constituting it from the traced path. If the current traced path is not empty, start the tracing process again from the end of the current traced path. Otherwise, start the tracing process by randomly selecting a vertex from among those linked by at least one edge in MAB . If there is no edge in MAB , iterations of the tracing process are terminated.\nStep 3. Construct a rings set(R-set) by selecting Mrings according to a given selection strategy, where an R-set is defined as the union of M-rings. Note that this selection strategy determines a version of ES.\nStep 4. Generate an intermediate solution from PA by removing the edges of EA and adding the edges of EB in the R-set, i.e., generate an intermediate solution by EC = (R\u2212set\u2229EA)\u222a(R\u2212set\u2229EB). An intermediate solution consists of one or more loops.\nStep 5. Generate an offspring solution by connecting all loops into one loop .\nStep 6. If a further offspring solution is generated, then go to Step 3. Otherwise, terminate the procedure.\nI define the size of a M-ring as the number of edges of EA (or EB) included in it. Note that some of the Mrings might consist of two overlapping edges, one from EA and one from EB . I call such a M-ring ineffective because the inclusion of ineffective M-rings in an R-set does not affect the resulting intermediate solution. I call an M-ring effective if it includes more than four edges. In Step 3, I select only effective M-rings for constructing R-set. I define the size of a R-set as the number of edges of EA (or EB) included in it.\nAccording to the definition of a R-set and the procedure in Step 4, ES generates an intermediate solution from EA by replacing edges with the same number of edges selected from EB , under the condition that every vertex is linked by just two edges. An intermediate\nsolution therefore consists of one or more loops."}, {"heading": "3.2. Local Version of ES", "text": "ES can generate various intermediate solutions, depending on the combination of M-rings selected in Step 3 for constructing R-sets. I can construct different versions of ES by using different selection strategies of M-rings. For the original ES, I proposed a simple selection strategy, which I call single strategy in this paper. In addition, I proposed another simple selection strategy, which is called the random strategy in this paper. The two selection strategies of M-rings are described below.\nSingle strategy. Select a single M-ring randomly without overlapping the previous selections.\nRandom strategy. Select M-rings randomly with a probability of 0.5 for each.\nThe intermediate solution of the single strategy tends to be similar to PA. In contrast, the random strategy typically forms a R-set in Figure 1, and the resulting intermediate solution tends to contain edges of EA and edges of EB equally. In this paper, I apply the random strategy to the construction of a localized version of ES."}, {"heading": "3.3. Global Version of ES", "text": "In this subsection, I present three selection strategies of M-rings for constructing global versions of ES. Here, the size of R-sets generated by a global version of ES should be greater than that by the localized version of ES. However, the increase of the R-set size typically increases the number of sub-loops in intermediate solutions (see the R-sets and the resulting intermediate solutions in Figure 1 for an illustration), which degrades the capability to generate good offspring solutions that improve parent solutions when parent solutions are very high quality loops. This is because the new edges introduced in Step 5 of the ES algorithm frequently degrade the quality of offspring solutions in this situation. So it is preferable to decrease the number of sub-loops while increasing the R-set size. A global version of ES needs to be designed to satisfy these two competing demands.\nK-multiple strategy. Select K M-rings randomly, where K is a given parameter (K=6 in my experiments).\nIn this paper, I propose a heuristic selection strategy of M-rings, called block strategy to construct an effective global version of ES.\nBlock strategy. Select geographically close M-rings\nto construct a R-set, the resulting intermediate solution is generated from EA by replacing a block of edges of EA with a block of edges of EB in the same region.\nIn fact, the block strategy is clearly superior to the K-multiple strategy in the experiments."}, {"heading": "4. Computational Experiments", "text": "The proposed GA was tested on 10 instances with up to 16,862 cities selected from well-known, widely used benchmark sets for the TSP.\nThey are the TSPLIB:\n(http://comopt.ifi.uni-heidelberg.de)\nand the National TSP benchmarks:\n(http://www.math.uwaterloo.ca/tsp/).\nThe number of cities for every instance is indicated by the instance name.\nThe proposed GA was implemented in C and the program code was compiled using GNU gcc compiler. The program code is available in the online supplement. I executed the GA in a computer with Intel(R) Core(TM) i5 CPU 2.27 GHz, and the program execution time varied substantially, depending on the instances. So I measured the CPU time by executing the GA 10 trials and calculate the average time cost of them to obtain the results.\nIn this section, I first describe several configurations for the GA and then analyze the impact of the proposed enhancements on a selected group of the instances. Detailed results of the GA using all enhancements on all 10 instances are compared with a LKH algorithm."}, {"heading": "4.1. Configuration of the GA", "text": "I apply the GA (Algorithm 1) using several different configurations to analyze the impact of the proposed enhancements on the performance. One configuration is determined by selecting one strategy from each of the items listed below. For each item, the default strategy corresponds to each of the proposed enhancements, and other strategies are also tested for comparison. As for the default parameter values for Npop and Nch, I determined them through preliminary experiments.\nPopulation size (Npop): 200(default). Alternatively, set to 400 if greedy selection is used.\nNumber of offspring solutions (Nch): 20(default). Alternatively, set to 10, 30, and 40."}, {"heading": "4.2. Impact of the ES", "text": "I apply the GA using each configuration 10 times to a selected group of instances with sizes ranging from 9,847 to 16,862 in order to save space and to avoid numerous experiments. Results are presented in the following format: the instance name(Instance), the number of runs that succeed in finding the optimal or best known solution (no better solution was found) over 10 runs, the average percentage excess with respect to the optimal solutions(Err), and the computation time for a single run in seconds(Time)."}, {"heading": "5. Conclusion", "text": "In this paper I have proposed a powerful GA in finding very high quality solutions for the TSP. The proposed GA has found optimal or best known solutions for most benchmark instances with up to 16,862 cities. One of the strengths of my GA is the use of ES, an edge swapping operator for the TSP. the local version of ES and the global version of ES significantly reduce the computational cost, with the help of efficient implementation techniques. This resolves the common problem that GA for TSP are usually much more time consuming than efficiently implemented local search based algorithms. Another important contribution is the development of ES in generating even better offspring solutions from very high quality parent solutions at the final phase of the GA. An interesting feature is that I design a simple local search procedure into ES to determine good combinations of the edges of parents. I have demonstrated that the enhancements significantly improve the performance of the GA. I believe that the proposed GA provides a good example of a sophisticated GA application for a representative combinatorial optimization problem and that some of the ideas can be successfully applied to the design of GAs for other combinatorial optimization problems."}], "references": [{"title": "Comparison between ant colony and genetic algorithm using traveling salesman problem", "author": ["Abduljabbar", "Zaid Ameen", "Khalefa", "Mustafa S", "Jabar", "Marzanah A"], "venue": "International Journal of Soft Computing,", "citeRegEx": "Abduljabbar et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Abduljabbar et al\\.", "year": 2013}, {"title": "A hybrid genetic algorithm for the bottleneck traveling salesman problem", "author": ["Ahmed", "Zakir Hussain"], "venue": "ACM Transactions on Embedded Computing Systems (TECS),", "citeRegEx": "Ahmed and Hussain.,? \\Q2013\\E", "shortCiteRegEx": "Ahmed and Hussain.", "year": 2013}, {"title": "An experimental study of a hybrid genetic algorithm for the maximum traveling salesman problem", "author": ["Ahmed", "Zakir Hussain"], "venue": "Mathematical Sciences,", "citeRegEx": "Ahmed and Hussain.,? \\Q2013\\E", "shortCiteRegEx": "Ahmed and Hussain.", "year": 2013}, {"title": "Development a new mutation operator to solve the traveling salesman problem by aid of genetic algorithms", "author": ["Albayrak", "Murat", "Allahverdi", "Novruz"], "venue": "Expert Systems with Applications,", "citeRegEx": "Albayrak et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Albayrak et al\\.", "year": 2011}, {"title": "A hybrid algorithm to solve traveling salesman problem", "author": ["Chen", "Xiaofeng", "Tan", "Zhenhua", "Yang", "Guangming", "Cheng", "Wei"], "venue": "In Advances in Electronic Engineering, Communication and Management", "citeRegEx": "Chen et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Chen et al\\.", "year": 2012}, {"title": "Performance analysis of the partial use of a local optimization operator on the genetic algorithm for the travelling salesman problem", "author": ["Djordjevic", "Milan", "Grgurovi\u010d", "Marko", "Brodnik", "Andrej"], "venue": "Business Systems Research,", "citeRegEx": "Djordjevic et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Djordjevic et al\\.", "year": 2012}, {"title": "Solving the traveling salesman problem using cooperative genetic ant systems", "author": ["Dong", "Gaifang", "Guo", "William W", "Tickle", "Kevin"], "venue": "Expert Systems with Applications,", "citeRegEx": "Dong et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Dong et al\\.", "year": 2012}, {"title": "A new solution for travelling salesman problem by genetic algorithm", "author": ["Hatami", "Shirin", "Babazadeh", "Morteza"], "venue": "International Journal of Advanced Research in Computer Science,", "citeRegEx": "Hatami et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Hatami et al\\.", "year": 2011}, {"title": "A discrete artificial bee colony algorithm for the traveling salesman problem with time windows", "author": ["Karabulut", "Korhan", "Tasgetiren", "Mehmet Fatih"], "venue": "In Evolutionary Computation (CEC),", "citeRegEx": "Karabulut et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Karabulut et al\\.", "year": 2012}, {"title": "A new multiple traveling salesman problem and its genetic algorithm-based solution", "author": ["Li", "Jun", "Sun", "Qirui", "Zhou", "MengChu", "Dai", "Xianzhong"], "venue": "In Systems, Man, and Cybernetics (SMC),", "citeRegEx": "Li et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Li et al\\.", "year": 2013}, {"title": "Optimal tree for genetic algorithms in the traveling salesman problem (tsp)", "author": ["Liew", "Sing"], "venue": "arXiv preprint arXiv:1204.2352,", "citeRegEx": "Liew and Sing.,? \\Q2012\\E", "shortCiteRegEx": "Liew and Sing.", "year": 2012}, {"title": "A powerful genetic algorithm using edge assembly crossover for the traveling salesman problem", "author": ["Nagata", "Yuichi", "Kobayashi", "Shigenobu"], "venue": "INFORMS Journal on Computing,", "citeRegEx": "Nagata et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Nagata et al\\.", "year": 2013}, {"title": "A new genetic algorithm for the asymmetric traveling salesman problem", "author": ["Nagata", "Yuichi", "Soler", "David"], "venue": "Expert Systems with Applications,", "citeRegEx": "Nagata et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Nagata et al\\.", "year": 2012}, {"title": "Comments on albayrak, m., & allahverdy n.(2011). development a new mutation operator to solve the traveling salesman problem by aid", "author": ["E Osaba", "E Onieva", "F Diaz", "R Carballedo", "A. Perallos"], "venue": null, "citeRegEx": "Osaba et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Osaba et al\\.", "year": 2011}, {"title": "Genetic algorithm based approach to solve travelling salesman problem with one point crossover operator", "author": ["Roy", "Sharadindu"], "venue": "INTERNATIONAL JOURNAL OF COMPUTERS & TECHNOLOGY,", "citeRegEx": "Roy and Sharadindu.,? \\Q2013\\E", "shortCiteRegEx": "Roy and Sharadindu.", "year": 2013}, {"title": "Extended virtual loser genetic algorithm for the dynamic traveling salesman problem", "author": ["Sim\u00f5es", "Anabela", "Costa", "Ernesto"], "venue": "In Proceeding of the fifteenth annual conference on Genetic and evolutionary computation conference,", "citeRegEx": "Sim\u00f5es et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Sim\u00f5es et al\\.", "year": 2013}, {"title": "A hybrid genetic algorithm for the traveling salesman problem using generalized partition crossover", "author": ["Whitley", "Darrell", "Hains", "Doug", "Howe", "Adele"], "venue": "In Parallel Problem Solving from Nature, PPSN XI,", "citeRegEx": "Whitley et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Whitley et al\\.", "year": 2010}, {"title": "A novel two-level hybrid algorithm for multiple traveling salesman problems", "author": ["Yu", "Qingsheng", "Wang", "Dong", "Lin", "Dongmei", "Li", "Ya", "Wu", "Chen"], "venue": "In Advances in Swarm Intelligence,", "citeRegEx": "Yu et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Yu et al\\.", "year": 2012}, {"title": "A new crossover approach for solving the multiple travelling salesmen problem using genetic algorithms", "author": ["Yuan", "Shuai", "Skinner", "Bradley", "Huang", "Shoudong", "Liu", "Dikai"], "venue": "European Journal of Operational Research,", "citeRegEx": "Yuan et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Yuan et al\\.", "year": 2013}], "referenceMentions": [], "year": 2014, "abstractText": "This paper presents a powerful genetic algorithm (GA) to solve the traveling salesman problem (TSP). To construct a powerful GA, I use edge swapping(ES) with a local search procedure to determine good combinations of building blocks of parent solutions for generating even better offspring solutions. Experimental results on well studied TSP benchmarks demonstrate that the proposed GA is competitive in finding very high quality solutions on instances with up to 16,862 cities.", "creator": "LaTeX with hyperref package"}}}