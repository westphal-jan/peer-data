{"id": "1404.0736", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-Apr-2014", "title": "Exploiting Linear Structure Within Convolutional Networks for Efficient Evaluation", "abstract": "applications present techniques - tightening up the test - time evaluation of large convolutional networks, matrices or object grouping patterns. traditional materials deliver simplified visuals but gathering image data requires specially sophisticated floating point modules, making therefore cost on smartphones and internet - able bandwidth expensive. the computation is dominated by the stack operations in the outer layers across the model. we exploit the linear structure present within the array filters just as data can significantly emphasize the required computation. upon large moment - of - being - art models, we demonstrate speedups about a factor of 2x, immediately dropping the accuracy = 1 % of the final model.", "histories": [["v1", "Wed, 2 Apr 2014 23:31:12 GMT  (907kb,D)", "https://arxiv.org/abs/1404.0736v1", null], ["v2", "Mon, 9 Jun 2014 15:53:55 GMT  (1261kb,D)", "http://arxiv.org/abs/1404.0736v2", null]], "reviews": [], "SUBJECTS": "cs.CV cs.LG", "authors": ["emily l denton", "wojciech zaremba", "joan bruna", "yann lecun", "rob fergus"], "accepted": true, "id": "1404.0736"}, "pdf": {"name": "1404.0736.pdf", "metadata": {"source": "CRF", "title": "Exploiting Linear Structure Within Convolutional Networks for Efficient Evaluation", "authors": ["Emily Denton", "Wojciech Zaremba", "Joan Bruna", "Yann LeCun", "Rob Fergus"], "emails": ["@cs.nyu.edu"], "sections": [{"heading": null, "text": "We present techniques for speeding up the test-time evaluation of large convolutional networks, designed for object recognition tasks. These models deliver impressive accuracy, but each image evaluation requires millions of floating point operations, making their deployment on smartphones and Internet-scale clusters problematic. The computation is dominated by the convolution operations in the lower layers of the model. We exploit the redundancy present within the convolutional filters to derive approximations that significantly reduce the required computation. Using large state-of-the-art models, we demonstrate speedups of convolutional layers on both CPU and GPU by a factor of 2\u00d7, while keeping the accuracy within 1% of the original model."}, {"heading": "1 Introduction", "text": "Large neural networks have recently demonstrated impressive performance on a range of speech and vision tasks. However, the size of these models can make their deployment at test time problematic. For example, mobile computing platforms are limited in their CPU speed, memory and battery life. At the other end of the spectrum, Internet-scale deployment of these models requires thousands of servers to process the 100\u2019s of millions of images per day. The electrical and cooling costs of these servers is significant. Training large neural networks can take weeks, or even months. This hinders research and consequently there have been extensive efforts devoted to speeding up training procedure. However, there are relatively few efforts aimed at improving the test-time performance of the models.\nWe consider convolutional neural networks (CNNs) used for computer vision tasks, since they are large and widely used in commercial applications. These networks typically require a huge number of parameters (\u223c 108 in [1]) to produce state-of-the-art results. While these networks tend to be hugely over parameterized [2], this redundancy seems necessary in order to overcome a highly nonconvex optimization [3]. As a byproduct, the resulting network wastes computing resources. In this paper we show that this redundancy can be exploited with linear compression techniques, resulting in significant speedups for the evaluation of trained large scale networks, with minimal compromise to performance.\nWe follow a relatively simple strategy: we start by compressing each convolutional layer by finding an appropriate low-rank approximation, and then we fine-tune the upper layers until the prediction performance is restored. We consider several elementary tensor decompositions based on singular value decompositions, as well as filter clustering methods to take advantage of similarities between learned features.\nar X\niv :1\n40 4.\n07 36\nv2 [\ncs .C\nV ]\n9 J\nun 2\nOur main contributions are the following: (1) We present a collection of generic methods to exploit the redundancy inherent in deep CNNs. (2) We report experiments on state-of-the-art Imagenet CNNs, showing empirical speedups on convolutional layers by a factor of 2 \u2212 3\u00d7 and a reduction of parameters in fully connected layers by a factor of 5\u2212 10\u00d7. Notation: Convolution weights can be described as a 4-dimensional tensor: W \u2208 RC\u00d7X\u00d7Y\u00d7F . C is the number of number of input channels, X and Y are the spatial dimensions of the kernel, and F is the target number of feature maps. It is common for the first convolutional layer to have a stride associated with the kernel which we denote by \u2206. Let I \u2208 RC\u00d7N\u00d7M denote an input signal where C is the number of input maps, and N and M are the spatial dimensions of the maps. The target value, T = I \u2217W , of a generic convolutional layer, with \u2206 = 1, for a particular output feature, f , and spatial location, (x, y), is\nT (f, x, y) = C\u2211 c=1 X\u2211 x\u2032=1 Y\u2211 y\u2032=1 I(c, x\u2212 x\u2032, y \u2212 y\u2032)W (c, x\u2032, y\u2032, f)\nIfW is a tensor, \u2016W\u2016 denotes its operator norm, sup\u2016x\u2016=1 \u2016Wx\u2016F and \u2016W\u2016F denotes its Frobenius norm."}, {"heading": "2 Related Work", "text": "Vanhoucke et al. [4] explored the properties of CPUs to speed up execution. They present many solutions specific to Intel and AMD CPUs, however some of their techniques are general enough to be used for any type of processor. They describe how to align memory, and use SIMD operations (vectorized operations on CPU) to boost the efficiency of matrix multiplication. Additionally, they propose the linear quantization of the network weights and input. This involves representing weights as 8-bit integers (range [\u2212127, 128]), rather than 32-bit floats. This approximation is similar in spirit to our approach, but differs in that it is applied to each weight element independently. By contrast, our approximation approach models the structure within each filter. Potentially, the two approaches could be used in conjunction.\nThe most expensive operations in CNNs are the convolutions in the first few layers. The complexity of this operation is linear in the area of the receptive field of the filters, which is relatively large for these layers. However, Mathieu et al. [5] have shown that convolution can be efficiently computed in Fourier domain, where it becomes element-wise multiplication (and there is no cost associated with size of receptive field). They report a forward-pass speed up of around 2\u00d7 for convolution layers in state-of-the-art models. Importantly, the FFT method can be used jointly with most of the techniques presented in this paper.\nThe use of low-rank approximations in our approach is inspired by work of Denil et al. [2] who demonstrate the redundancies in neural network parameters. They show that the weights within a layer can be accurately predicted from a small (e.g. \u223c 5%) subset of them. This indicates that neural networks are heavily over-parametrized. All the methods presented here focus on exploiting the linear structure of this over-parametrization.\nFinally, a recent preprint [6] also exploits low-rank decompositions of convolutional tensors to speed up the evaluation of CNNs, applied to scene text character recognition. This work was developed simultaneously with ours, and provides further evidence that such techniques can be applied to a variety of architectures and tasks. Out work differs in several ways. First, we consider a significantly larger model. This makes it more challenging to compute efficient approximations since there are more layers to propagate through and thus a greater opportunity for error to accumulate. Second, we present different compression techniques for the hidden convolutional layers and provide a method of compressing the first convolutional layer. Finally, we present GPU results in addition to CPU results."}, {"heading": "3 Convolutional Tensor Compression", "text": "In this section we describe techniques for compressing 4 dimensional convolutional weight tensors and fully connected weight matrices into a representation that permits efficient computation and\nstorage. Section 3.1 describes how to construct a good approximation criteria. Section 3.2 describes techniques for low-rank tensor approximations. Sections 3.3 and 3.4 describe how to apply these techniques to approximate weights of a convolutional neural network."}, {"heading": "3.1 Approximation Metric", "text": "Our goal is to find an approximation, W\u0303 , of a convolutional tensor W that facilitates more efficient computation while maintaining the prediction performance of the network. A natural choice for an approximation criterion is to minimize \u2016W\u0303 \u2212W\u2016F . This criterion yields efficient compression schemes using elementary linear algebra, and also controls the operator norm of each linear convolutional layer. However, this criterion assumes that all directions in the space of weights equally affect prediction performance. We now present two methods of improving this criterion while keeping the same efficient approximation algorithms.\nMahalanobis distance metric: The first distance metric we propose seeks to emphasize coordinates more prone to produce prediction errors over coordinates whose effect is less harmful for the overall system. We can obtain such measurements as follows. Let \u0398 = {W1, . . . ,WS} denote the set of all parameters of the S-layer network, and let U(I; \u0398) denote the output after the softmax layer of input image I . We consider a given input training set (I1, . . . , IN ) with known labels (y1, . . . , yN ). For each pair (In, yn), we compute the forward propagation pass U(In,\u0398), and define as {\u03b2n} the indices of the h largest values of U(In,\u0398) different from yn. Then, for a given layer s, we compute\ndn,l,s = \u2207Ws (U(In,\u0398)\u2212 \u03b4(i\u2212 l)) , n \u2264 N , l \u2208 {\u03b2n} , s \u2264 S , (1)\nwhere \u03b4(i\u2212l) is the dirac distribution centered at l. In other words, for each input we back-propagate the difference between the current prediction and the h \u201cmost dangerous\u201d mistakes.\nThe Mahalanobis distance is defined from the covariance of d: \u2016W\u20162maha = w\u03a3\u22121wT , where w is the vector containing all the coordinates of W , and \u03a3 is the covariance of (dn,l,s)n,l. We do not report results using this metric, since it requires inverting a matrix of size equal to the number of parameters, which can be prohibitively expensive in large networks. Instead we use an approximation that considers only the diagonal of the covariance matrix. In particular, we propose the following, approximate, Mahalanobis distance metric:\n\u2016W\u2016 m\u0303aha := \u2211 p \u03b1pW (p) , where \u03b1p = (\u2211 n,l dn,l,s(p) 2 )1/2\n(2)\nwhere the sum runs over the tensor coordinates. Since (2) is a reweighted Euclidiean metric, we can simply compute W \u2032 = \u03b1 . \u2217W , where .\u2217 denotes element-wise multiplication, then compute the approximation W\u0303 \u2032 on W \u2032 using the standard L2 norm, and finally output W\u0303 = \u03b1\u22121. \u2217 W\u0303 \u2032 . Data covariance distance metric: One can view the Frobenius norm of W as \u2016W\u20162F = Ex\u223cN (0,I)\u2016Wx\u20162F . Another alternative, similar to the one considered in [6], is to replace the isotropic covariance assumption by the empirical covariance of the input of the layer. If W \u2208 RC\u00d7X\u00d7Y\u00d7F is a convolutional layer, and \u03a3\u0302 \u2208 RCXY\u00d7CXY is the empirical estimate of the input data covariance, it can be efficiently computed as\n\u2016W\u2016data = \u2016\u03a3\u03021/2WF \u2016F , (3)\nwhere WF is the matrix obtained by folding the first three dimensions of W .As opposed to [6], this approach adapts to the input distribution without the need to iterate through the data."}, {"heading": "3.2 Low-rank Tensor Approximations", "text": ""}, {"heading": "3.2.1 Matrix Decomposition", "text": "Matrices are 2-tensors which can be linearly compressed using the Singular Value Decomposition. If W \u2208 Rm\u00d7k is a real matrix, the SVD is defined as W = USV >, where U \u2208 Rm\u00d7m, S \u2208 Rm\u00d7k, V \u2208 Rk\u00d7k. S is a diagonal matrix with the singular values on the diagonal, and U , V are orthogonal matrices. If the singular values of W decay rapidly, W can be well approximated\nby keeping only the t largest entries of S, resulting in the approximation W\u0303 = U\u0303 S\u0303V\u0303 >, where U\u0303 \u2208 Rm\u00d7t, S\u0303 \u2208 Rt\u00d7t, V\u0303 \u2208 Rt\u00d7k Then, for I \u2208 Rn\u00d7m, the approximation error \u2016IW\u0303 \u2212 IW\u2016F satisfies \u2016IW\u0303 \u2212 IW\u2016F \u2264 st+1\u2016I\u2016F , and thus is controlled by the decay along the diagonal of S. Now the computation IW\u0303 can be done in O(nmt + nt2 + ntk), which, for sufficiently small t is significantly smaller than O(nmk)."}, {"heading": "3.2.2 Higher Order Tensor Approximations", "text": "SVD can be used to approximate a tensor W \u2208 Rm\u00d7n\u00d7k by first folding all but two dimensions together to convert it into a 2-tensor, and then considering the SVD of the resulting matrix. For example, we can approximate Wm \u2208 Rm\u00d7(nk) as W\u0303m \u2248 U\u0303 S\u0303V\u0303 >. W can be compressed even further by applying SVD to V\u0303 . We refer to this approximation as the SVD decomposition and use K1 and K2 to denote the rank used in the first and second application of SVD respectively.\nAlternatively, we can approximate a 3-tensor, WS \u2208 Rm\u00d7n\u00d7k, by a rank 1 3-tensor by finding a decomposition that minimizes \u2016W \u2212 \u03b1\u2297 \u03b2 \u2297 \u03b3\u2016F , (4) where \u03b1 \u2208 Rm, \u03b2 \u2208 Rn, \u03b3 \u2208 Rk and \u2297 denotes the outer product operation. Problem (4) is solved efficiently by performing alternate least squares on \u03b1, \u03b2 and \u03b3 respectively, although more efficient algorithms can also be considered [7].\nThis easily extends to a rank K approximation using a greedy algorithm: Given a tensor W , we compute (\u03b1, \u03b2, \u03b3) using (4), and we update W (k+1) \u2190W k \u2212 \u03b1\u2297 \u03b2 \u2297 \u03b3. Repeating this operation K times results in\nW\u0303S = K\u2211 k=1 \u03b1k \u2297 \u03b2k \u2297 \u03b3k . (5)\nWe refer to this approximation as the outer product decomposition and use K to denote the rank of the approximation."}, {"heading": "3.3 Monochromatic Convolution Approximation", "text": "Let W \u2208 RC\u00d7X\u00d7Y\u00d7F denote the weights of the first convolutional layer of a trained network. We found that the color components of trained CNNs tend to have low dimensional structure. In particular, the weights can be well approximated by projecting the color dimension down to a 1D subspace. The low-dimensional structure of the weights is illustrated in Figure 4.1.1.\nThe monochromatic approximation exploits this structure and is computed as follows. First, for every output feature, f , we consider consider the matrix Wf \u2208 RC\u00d7(XY ), where the spatial dimensions of the filter corresponding to the output feature have been combined, and find the SVD,\nWf = UfSfV > f , where Uf \u2208 RC\u00d7C , Sf \u2208 RC\u00d7XY , and Vf \u2208 RXY\u00d7XY . We then take the rank 1 approximation of Wf , W\u0303f = U\u0303f S\u0303f V\u0303 >f , where U\u0303f \u2208 RC\u00d71, S\u0303f \u2208 R, V\u0303f \u2208 R1\u00d7XY . We can further exploit the regularity in the weights by sharing the color component basis between different output features. We do this by clustering the F left singular vectors, U\u0303f , of each output feature f into C \u2032 clusters, for C \u2032 < F . We constrain the clusters to be of equal size as discussed in section 3.4. Then, for each of the FC\u2032 output features, f , that is assigned to cluster cf , we can approximate Wf with W\u0303f = Ucf S\u0303f V\u0303 > f where Ucf \u2208 RC\u00d71 is the cluster center for cluster cf and S\u0303f and V\u0303f are as before.\nThis monochromatic approximation is illustrated in the left panel of Figure 1(c). Table 1 shows the number of operations required for the standard and monochromatic versions."}, {"heading": "3.4 Biclustering Approximations", "text": "We exploit the redundancy within the 4-D weight tensors in the higher convolutional layers by clustering the filters, such that each cluster can be accurately approximated by a low-rank factorization. We start by clustering the rows of WC \u2208 RC\u00d7(XY F ), which results in clusters C1, . . . , Ca. Then we cluster the columns of WF \u2208 R(CXY )\u00d7F , producing clusters F1, . . . , Fb. These two operations break the original weight tensor W into ab sub-tensors {WCi,Fj}i=1,...,a,j=1,...,b as shown in Figure 1(b). Each sub-tensor contains similar elements, and thus is easier to fit with a low-rank approximation.\nIn order to exploit the parallelism inherent in CPU and GPU architectures it is useful to constrain clusters to be of equal sizes. We therefore perform the biclustering operations (or clustering for monochromatic filters in Section 3.3) using a modified version of the k-means algorithm which balances the cluster count at each iteration. It is implemented with the Floyd algorithm, by modifying the Euclidean distance with a subspace projection distance.\nAfter the input and output clusters have been obtained, we find a low-rank approximation of each sub-tensor using either the SVD decomposition or the outer product decomposition as described in Section 3.2.2. We concatenate the X and Y spatial dimensions of the sub-tensors so that the decomposition is applied to the 3-tensor, WS \u2208 RC\u00d7(XY )\u00d7F . While we could look for a separable approximation along the spatial dimensions as well, we found the resulting gain to be minimal. Using these approximations, the target output can be computed with significantly fewer operations. The number of operations required is a function the number of input clusters, G, the output clusters H and the rank of the sub-tensor approximations (K1,K2 for the SVD decomposition; K for the outer product decomposition. The number of operations required for each approximation is described in Table 1."}, {"heading": "3.5 Fine-tuning", "text": "Many of the approximation techniques presented here can efficiently compress the weights of a CNN with negligible degradation of classification performance provided the approximation is not too harsh. Alternatively, one can use a harsher approximation that gives greater speedup gains but hurts the performance of the network. In this case, the approximated layer and all those below it can be fixed and the upper layers can be fine-tuned until the original performance is restored."}, {"heading": "4 Experiments", "text": "We use the 15 layer convolutional architecture of [8], trained on the ImageNet 2012 dataset [9]. The network contains 4 convolutional layers, 3 fully connected layers and a softmax output layer. We evaluated the network on both CPU and GPU platforms. All measurements of prediction performance are with respect to the 20K validation images from the ImageNet12 dataset.\nWe present results showing the performance of the approximations described in Section 3 in terms of prediction accuracy, speedup gains and reduction in memory overhead. All of our fine-tuning results were achieved by training with less than 2 passes using the ImageNet12 training dataset. Unless stated otherwise, classification numbers refer to those of fine-tuned models."}, {"heading": "4.1 Speedup", "text": "The majority of forward propagation time is spent on the first two convolutional layers (see Supplementary Material for breakdown of time across all layers). Because of this, we restrict our attention to the first and second convolutional layers in our speedup experiments. However, our approximations could easily applied to convolutions in upper layers as well.\nWe implemented several CPU and GPU approximation routines in an effort to achieve empirical speedups. Both the baseline and approximation CPU code is implemented in C++ using Eigen3 library [10] compiled with Intel MKL. We also use Intel\u2019s implementation of openmp and multithreading. The baseline gives comparable performance to highly optimized MATLAB convolution routines and all of our CPU speedup results are computed relative to this. We used Alex Krizhevsky\u2019s CUDA convolution routines 1 as a baseline for GPU comparisons. The approximation versions are written in CUDA. All GPU code was run on a standard nVidia Titan card.\nWe have found that in practice it is often difficult to achieve speedups close to the theoretical gains based on the number of arithmetic operations (see Supplementary Material for discussion of theoretical gains). Moreover, different computer architectures and CNN architectures afford different optimization strategies making most implementations highly specific. However, regardless of implementation details, all of the approximations we present reduce both the number of operations and number of weights required to compute the output by at least a factor of two, often more."}, {"heading": "4.1.1 First Layer", "text": "The first convolutional layer has 3 input channels, 96 output channels and 7x7 filters. We approximated the weights in this layer using the monochromatic approximation described in Section 3.3. The monochromatic approximation works well if the color components span a small number of one dimensional subspaces. Figure 4.1.1 illustrates the effect of the monochromatic approximation on the first layer filters.\nThe only parameter in the approximation is C \u2032, the number of color channels used for the intermediate representation. As expected, the network performance begins to degrade as C \u2032 decreases. The\n1https://code.google.com/p/cuda-convnet/\nnumber of floating point operations required to compute the output of the monochromatic convolution is reduced by a factor of 2\u2212 3\u00d7, with the larger gain resulting for small C \u2032. Figure 3 shows the empirical speedups we achieved on CPU and GPU and the corresponding network performance for various numbers of colors used in the monochromatic approximation. Our CPU and GPU implementations achieve empirical speedups of 2 \u2212 2.5\u00d7 relative to the baseline with less than 1% drop in classification performance."}, {"heading": "4.1.2 Second Layer", "text": "The second convolutional layer has 96 input channels, 256 output channels and 5x5 filters. We approximated the weights using the techniques described in Section 3.4. We explored various configurations of the approximations by varying the number of input clusters G, the number of output clusters H and the rank of the approximation (denoted by K1 and K2 for the SVD decomposition and K for the outer product decomposition).\nFigure 4 shows our empirical speedups on CPU and GPU and the corresponding network performance for various approximation configurations. For the CPU implementation we used the biclustering with SVD approximation. For the GPU implementation we using the biclustering with outer product decomposition approximation. We achieved promising results and present speedups of 2\u2212 2.5\u00d7 relative to the baseline with less than a 1% drop in performance."}, {"heading": "4.2 Combining approximations", "text": "The approximations can also be cascaded to provide greater speedups. The procedure is as follows. Compress the first convolutional layer weights and then fine-tune all the layers above until performance is restored. Next, compress the second convolutional layer weights that result from\nthe fine-tuning. Fine-tune all the layers above until performance is restored and then continue the process.\nWe applied this procedure to the first two convolutional layers. Using the monochromatic approximation with 6 colors for the first layer and the biclustering with outer product decomposition approximation for the second layer (G = 48;H = 2;K = 8) and fine-tuning with a single pass through the training set we are able to keep accuracy within 1% of the original model. This procedure could be applied to each convolutional layer, in this sequential manner, to achieve overall speedups much greater than any individual layer can provide. A more comprehensive summary of these results can be found in the Supplementary Material."}, {"heading": "4.3 Reduction in memory overhead", "text": "In many commercial applications memory conservation and storage are a central concern. This mainly applies to embedded systems (e.g. smartphones), where available memory is limited, and users are reluctant to download large files. In these cases, being able to compress the neural network is crucial for the viability of the product.\nIn addition to requiring fewer operations, our approximations require significantly fewer parameters when compared to the original model. Since the majority of parameters come from the fully connected layers, we include these layers in our analysis of memory overhead. We compress the fully connected layers using standard SVD as described in 3.2.2, using K to denote the rank of the approximation.\nTable 2 shows the number of parameters for various approximation methods as a function of hyperparameters for the approximation techniques. The table also shows the empirical reduction of parameters and the corresponding network performance for specific instantiations of the approximation parameters."}, {"heading": "5 Discussion", "text": "In this paper we have presented techniques that can speed up the bottleneck convolution operations in the first layers of a CNN by a factor 2 \u2212 3\u00d7, with negligible loss of performance. We also show that our methods reduce the memory footprint of weights in the first two layers by factor of 2\u2212 3\u00d7 and the fully connected layers by a factor of 5 \u2212 13\u00d7. Since the vast majority of weights reside in the fully connected layers, compressing only these layers translate into a significant savings, which would facilitate mobile deployment of convolutional networks. These techniques are orthogonal to other approaches for efficient evaluation, such as quantization or working in the Fourier domain. Hence, they can potentially be used together to obtain further gains.\nAn interesting avenue of research to explore in further work is the ability of these techniques to aid in regularization either during or post training. The low-rank projections effectively decrease number of learnable parameters, suggesting that they might improve generalization ability. The regularization potential of the low-rank approximations is further motivated by two observations. The first is that the approximated filters for the first conolutional layer appear to be cleaned up versions of the original filters. Additionally, we noticed that we sporadically achieve better test error with some of the more conservative approximations."}, {"heading": "A Forward propagation time breakdown", "text": "Table 3 shows the time breakdown of forward propagation for each layer in the CNN architecture we explored. Close to 90% of the time is spent on convolutional layers, and within these layers the majority of time is spent on the first two."}, {"heading": "B Theoretical speedups", "text": "We can measure the theoretically achievable speedups for a particular approximation in term of the number of floating point operations required to compute the target output. While it is unlikely that any implementation would achieve speedups equal to the theoretically optimal level, the number of necessary floating point operations still provides an informative upper bound on the gains.\nTable 4 shows the theoretical speedup of the monochromatic approximation. The majority of the operations result from the convolution part of the computation. In comparison, the number of operations required for the color transformation is negligible. Thus, the theoretically achievable speedup decreases only slightly as the number of color components used is increased.\nFigure 5 plots the theoretically achievable speedups against the drop in classification performance for various configurations of the biclustering with outer product decomposition technique. For a given setting of input and output clusters numbers, the performance tends to degrade as the rank is decreased."}, {"heading": "C Combined results", "text": "We used the monochromatic approximation with 6 colors for the first layer. Table 5 summarizes the results after fine-tuning for 1 pass through the ImageNet12 training data using a variety of second layer approximations."}], "references": [{"title": "Overfeat: Integrated recognition, localization and detection using convolutional networks", "author": ["P. Sermanet", "D. Eigen", "X. Zhang", "M. Mathieu", "R. Fergus", "Y. LeCun"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "Predicting parameters in deep learning", "author": ["M. Denil", "B. Shakibi", "L. Dinh", "M. Ranzato", "N. de Freitas"], "venue": "arXiv preprint arXiv:1306.0543", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Improving neural networks by preventing co-adaptation of feature detectors", "author": ["G.E. Hinton", "N. Srivastava", "A. Krizhevsky", "I. Sutskever", "R.R. Salakhutdinov"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "Improving the speed of neural networks on cpus", "author": ["V. Vanhoucke", "A. Senior", "M.Z. Mao"], "venue": "Proc. Deep Learning and Unsupervised Feature Learning NIPS Workshop", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Fast training of convolutional networks through ffts", "author": ["M. Mathieu", "M. Henaff", "Y. LeCun"], "venue": "arXiv preprint arXiv:1312.5851", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "Speeding up convolutional neural networks with low rank expansions", "author": ["M. Jaderberg", "Vedaldi", "Andrea", "A. Zisserman"], "venue": "arXiv preprint arXiv:1405.3866", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "Rank-one approximation to high order tensors", "author": ["T. Zhang", "G.H. Golub"], "venue": "SIAM J. Matrix Anal. Appl", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2001}, {"title": "Visualizing and understanding convolutional neural networks", "author": ["M.D. Zeiler", "R. Fergus"], "venue": "arXiv preprint arXiv:1311.2901", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "ImageNet: A Large-Scale Hierarchical Image Database", "author": ["J. Deng", "W. Dong", "R. Socher", "L.J. Li", "K. Li", "L. Fei-Fei"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2009}, {"title": "Adaptive deconvolutional networks for mid and high level feature learning", "author": ["M.D. Zeiler", "G.W. Taylor", "R. Fergus"], "venue": "Computer Vision (ICCV),", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2011}, {"title": "Tiled convolutional neural networks", "author": ["Q.V. Le", "J. Ngiam", "Z. Chen", "D. Chia", "P.W. Koh", "A.Y. Ng"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "Building high-level features using large scale unsupervised learning", "author": ["Q.V. Le", "M. Ranzato", "R. Monga", "M. Devin", "K. Chen", "G.S. Corrado", "J. Dean", "A.Y. Ng"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "Object recognition from local scale-invariant features", "author": ["D.G. Lowe"], "venue": "Computer vision,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1999}], "referenceMentions": [{"referenceID": 0, "context": "These networks typically require a huge number of parameters (\u223c 10 in [1]) to produce state-of-the-art results.", "startOffset": 70, "endOffset": 73}, {"referenceID": 1, "context": "While these networks tend to be hugely over parameterized [2], this redundancy seems necessary in order to overcome a highly nonconvex optimization [3].", "startOffset": 58, "endOffset": 61}, {"referenceID": 2, "context": "While these networks tend to be hugely over parameterized [2], this redundancy seems necessary in order to overcome a highly nonconvex optimization [3].", "startOffset": 148, "endOffset": 151}, {"referenceID": 3, "context": "[4] explored the properties of CPUs to speed up execution.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] have shown that convolution can be efficiently computed in Fourier domain, where it becomes element-wise multiplication (and there is no cost associated with size of receptive field).", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "[2] who demonstrate the redundancies in neural network parameters.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "Finally, a recent preprint [6] also exploits low-rank decompositions of convolutional tensors to speed up the evaluation of CNNs, applied to scene text character recognition.", "startOffset": 27, "endOffset": 30}, {"referenceID": 5, "context": "Another alternative, similar to the one considered in [6], is to replace the isotropic covariance assumption by the empirical covariance of the input of the layer.", "startOffset": 54, "endOffset": 57}, {"referenceID": 5, "context": "As opposed to [6], this approach adapts to the input distribution without the need to iterate through the data.", "startOffset": 14, "endOffset": 17}, {"referenceID": 6, "context": "Problem (4) is solved efficiently by performing alternate least squares on \u03b1, \u03b2 and \u03b3 respectively, although more efficient algorithms can also be considered [7].", "startOffset": 158, "endOffset": 161}, {"referenceID": 7, "context": "We use the 15 layer convolutional architecture of [8], trained on the ImageNet 2012 dataset [9].", "startOffset": 50, "endOffset": 53}, {"referenceID": 8, "context": "We use the 15 layer convolutional architecture of [8], trained on the ImageNet 2012 dataset [9].", "startOffset": 92, "endOffset": 95}], "year": 2014, "abstractText": "We present techniques for speeding up the test-time evaluation of large convolutional networks, designed for object recognition tasks. These models deliver impressive accuracy, but each image evaluation requires millions of floating point operations, making their deployment on smartphones and Internet-scale clusters problematic. The computation is dominated by the convolution operations in the lower layers of the model. We exploit the redundancy present within the convolutional filters to derive approximations that significantly reduce the required computation. Using large state-of-the-art models, we demonstrate speedups of convolutional layers on both CPU and GPU by a factor of 2\u00d7, while keeping the accuracy within 1% of the original model.", "creator": "LaTeX with hyperref package"}}}