{"id": "1408.5882", "review": {"conference": "EMNLP", "VERSION": "v1", "DATE_OF_SUBMISSION": "25-Aug-2014", "title": "Convolutional Neural Networks for Sentence Classification", "abstract": "reporters report on a series of concepts with convolutional neural networks ( cnn ) trained on top of supervisor - selected robot teachers establishing sentence - matching classification options. we first assess simultaneously a simple interaction prevents little input tuning and static vectors ensures excellent stability on multiple benchmarks. learning session - specific vectors through pulse - tuning offers powerful gains improving accountability. developers additionally propose a simple vector enhancing the architecture such allow simultaneous the use before both task - specific tasks static word modes. later cnn models assisted by improve upon the goodness - of - at - art on 4 out of 7 tasks, effectively support character extraction and question classification.", "histories": [["v1", "Mon, 25 Aug 2014 19:48:04 GMT  (41kb,D)", "http://arxiv.org/abs/1408.5882v1", "To appear in EMNLP 2014"], ["v2", "Wed, 3 Sep 2014 03:09:02 GMT  (41kb,D)", "http://arxiv.org/abs/1408.5882v2", "To appear in EMNLP 2014"]], "COMMENTS": "To appear in EMNLP 2014", "reviews": [], "SUBJECTS": "cs.CL cs.NE", "authors": ["yoon kim"], "accepted": true, "id": "1408.5882"}, "pdf": {"name": "1408.5882.pdf", "metadata": {"source": "CRF", "title": "Convolutional Neural Networks for Sentence Classification", "authors": ["Yoon Kim"], "emails": ["yhk255@nyu.edu"], "sections": [{"heading": "1 Introduction", "text": "Deep learning models have achieved remarkable results in computer vision (Krizhevsky et al., 2012) and speech recognition (Graves et al., 2013) in recent years. Within natural language processing, much of the work with deep learning methods has involved learning word vector representations through neural language models (Bengio et al., 2003; Yih et al., 2011; Mikolov et al., 2013) and performing composition over the learned word vectors for classification (Collobert et al., 2011). Word vectors, wherein words are projected from a sparse, 1-of-V encoding (here V is the vocabulary size) onto a lower dimensional vector space via a hidden layer, are essentially feature extractors that encode semantic features of words in their dimensions. In such dense representations, semantically close words are likewise close\u2014in euclidean or cosine distance\u2014in the lower dimensional vector space.\nConvolutional neural networks (CNN) utilize layers with convolving filters that are applied to\nlocal features (LeCun et al., 1998). Originally invented for computer vision, CNN models have subsequently been shown to be effective for NLP and have achieved good results in semantic parsing (Yih et al., 2014), search query retrieval (Shen et al., 2014), sentence modeling (Kalchbrenner et al., 2014), and other traditional NLP tasks (Collobert et al., 2011).\nIn the present work, we train a simple CNN with one layer of convolution on top of word vectors obtained from an unsupervised neural language model. These vectors were trained by Mikolov et al. (2013) on 100 billion words of Google News, and are publicly available.1 We initially keep the word vectors static and learn only the other parameters of the model. Despite little tuning of hyperparameters, this simple model achieves excellent results on multiple benchmarks, suggesting that the pre-trained vectors are \u2018universal\u2019 feature extractors that can be utilized for various classification tasks. Learning task-specific vectors through fine-tuning results in further improvements. We finally describe a simple modification to the architecture to allow for the use of both pre-trained and task-specific vectors by having multiple channels.\nOur work is philosophically similar to Razavian et al. (2014) which showed that for image classification, feature extractors obtained from a pretrained deep learning model perform well on a variety of tasks\u2014including tasks that are very different from the original task for which the feature extractors were trained."}, {"heading": "2 Model", "text": "The model architecture, shown in figure 1, is a slight variant of the CNN architecture of Collobert et al. (2011). Let xi \u2208 Rk be the k-dimensional word vector corresponding to the i-th word in the sentence. A sentence of length n (zero-padded\n1https://code.google.com/p/word2vec/\nar X\niv :1\n40 8.\n58 82\nv1 [\ncs .C\nL ]\n2 5\nA ug\n2 01\n4\nwhere necessary) is represented as\nx1:n = x1 \u2295 x2 \u2295 . . .\u2295 xn, (1)\nwhere \u2295 is the concatenation operator. In general, let xi:i+j refer to the concatenation of words xi,xi+1, . . . ,xi+j . A convolution operation involves a filter w \u2208 Rh\u00d7k, which is applied to a window of h words to produce a new feature. For example, a feature ci is generated from a window of words xi:i+h\u22121 by\nci = f(w \u00b7 xi:i+h\u22121 + b). (2)\nHere b \u2208 R is a bias term and f is a non-linear function such as the hyperbolic tangent. This filter is applied to each possible window of words in the sentence {x1:h,x2:h+1, . . . ,xn\u2212h+1:n} to produce a feature map\nc = [c1, c2, . . . , cn\u2212h+1], (3)\nwith c \u2208 Rn\u2212h+1. We then apply a max-overtime pooling operation (Collobert et al., 2011) over the feature map and take the maximum value c\u0302 = max{c} as the feature corresponding to this particular filter. The idea is to capture the most important feature\u2014one with the highest value\u2014for each feature map. This pooling scheme naturally deals with variable sentence lengths.\nWe have described the process by which one feature is extracted from one filter. The model uses multiple filters (with varying window sizes) to obtain multiple features. These features form the penultimate layer and are passed to a fully connected softmax layer whose output is the probability distribution over labels.\nIn one of the model variants, we experiment with having two \u2018channels\u2019 of word vectors\u2014one\nthat is kept static throughout training and one that is fine-tuned via backpropagation (section 3.2).2 In the multichannel architecture, illustrated in figure 1, each filter is applied to both channels and the results are added to calculate ci in equation (2). The model is otherwise equivalent to the single channel architecture."}, {"heading": "2.1 Regularization", "text": "For regularization we employ dropout on the penultimate layer with a constraint on l2-norms of the weight vectors (Hinton et al., 2012). Dropout prevents co-adaptation of hidden units by randomly dropping out\u2014i.e., setting to zero\u2014a proportion p of the hidden units during fowardbackpropagation. That is, given the penultimate layer z = [c\u03021, . . . , c\u0302m] (note that here we have m filters), instead of using\ny = w \u00b7 z+ b (4)\nfor output unit y in forward propagation, dropout uses\ny = w \u00b7 (z \u25e6 r) + b, (5)\nwhere \u25e6 is the element-wise multiplication operator and r \u2208 Rm is a \u2018masking\u2019 vector of Bernoulli random variables with probability p of being 1. Gradients are backpropagated only through the unmasked units. At test time, the learned weight vectors are scaled by p such that w\u0302 = pw, and w\u0302 is used (without dropout) to score unseen sentences. We additionally constrain l2-norms of the weight vectors by rescaling w to have ||w||2 = s whenever ||w||2 > s after a gradient descent step.\n2We employ language from computer vision where a color image has red, green, and blue channels."}, {"heading": "3 Datasets and Experimental Setup", "text": "We test our model on various benchmarks. Summary statistics of the datasets are in table 1.\n\u2022 MR-a: Movie reviews with one sentence per review. Classification involves detecting positive/negative reviews (Pang and Lee, 2005).3\n\u2022 MR-b: Extension of MR-a but with train /dev/test splits provided, and fine-grained labels (very positive, positive, neutral, negative, very negative). The reviews were relabeled by Socher et al. (2013).4\n\u2022 MR-c: Same as MR-b but with neutral reviews removed and binary labels.\n\u2022 Subj: Subjectivity dataset where the task is to classify a sentence as being subjective or objective (Pang and Lee, 2004).\n\u2022 TREC: TREC question dataset\u2014task involves classifying a question into 6 question types (whether the question is about person, location, numeric information, etc.) (Li and Roth, 2002).5\n\u2022 CR: Customer reviews of various products (cameras, MP3s etc.). Task is to predict positive/negative reviews (Hu and Liu, 2004).6\n3https://www.cs.cornell.edu/people/pabo/movie-review-data/ 4http://nlp.stanford.edu/sentiment/. Data is actually provided at the phrase-level and hence we train the model on both phrases and sentences but only score on sentences at test time, as in Socher et al. (2013), Kalchbrenner et al. (2014), and Le and Mikolov (2014). Thus the training set is an order of magnitude larger than listed in table 1 (138K for MR-b and 65K for MR-c). 5http://cogcomp.cs.illinois.edu/Data/QA/QC/ 6http://www.cs.uic.edu/ liub/FBS/sentiment-analysis.html\n\u2022 MPQA: Opinion polarity detection subtask of the MPQA dataset (Wiebe et al., 2005).7"}, {"heading": "3.1 Hyperparameters and Training", "text": "For all datasets we use: rectified linear units, filter windows (h) of 3, 4, 5 with 100 feature maps each, dropout rate (p) of 0.5, l2 constraint (s) of 3, and mini-batch size of 50. These values were chosen via a grid search on the MR-c dev set.\nWe do not otherwise perform any datasetspecific tuning other than early stopping on dev sets. For datasets without a standard dev set we randomly select 10% of the training data as the dev set. Training is done through stochastic gradient descent over shuffled mini-batches with the Adadelta update rule (Zeiler, 2012)."}, {"heading": "3.2 Pre-trained Word Vectors", "text": "Initializing word vectors with those obtained from an unsupervised neural language model is a popular method to improve performance in the absence of a large supervised training set (Collobert et al., 2011; Socher et al., 2011; Iyyer et al., 2014). We use the publicly available word2vec vectors that were trained on 100 billion words from Google News. The vectors have dimensionality of 300 and were trained using the continuous bag-of-words architecture (Mikolov et al., 2013). Words not present in the set of pre-trained words are initialized randomly."}, {"heading": "3.3 Model Variations", "text": "We experiment with several variants of the model.\n\u2022 CNN-rand: Our baseline model where all words are randomly initialized and then modified during training.\n\u2022 CNN-static: A model with pre-trained vectors from word2vec. All words\u2014 including the unknown ones that are randomly initialized\u2014are kept static and only the other parameters of the model are learned.\n\u2022 CNN-non-static: Same as above but the pretrained vectors are fine-tuned for each task.\n\u2022 CNN-multichannel: A model with two sets of word vectors. Each set of vectors is treated as a \u2018channel\u2019 and each filter is applied\n7http://www.cs.pitt.edu/mpqa/\nto both channels, but gradients are backpropagated only through one of the channels. Hence the model is able to fine-tune one set of vectors while keeping the other static. Both channels are initialized with word2vec.\nIn order to disentangle the effect of the above variations versus other random factors, we eliminate other sources of randomness\u2014CV-fold assignment, initialization of unknown word vectors, initialization of CNN parameters\u2014by keeping them uniform within each dataset."}, {"heading": "4 Results and Discussion", "text": "Results of our models against other methods are listed in table 2. Our baseline model with all randomly initialized words (CNN-rand) does not perform well. While we had expected performance gains through the use of pre-trained vectors, we were surprised at the magnitude of the gains. Even a simple model with static vectors (CNN-static) performs remarkably well, giving competitive re-\nsults against the more sophisticated deep learning models that utilize complex pooling schemes (Kalchbrenner et al., 2014) or require parse trees to be computed beforehand (Socher et al., 2013). These results suggest that the pre-trained vectors are good, \u2018universal\u2019 feature extractors and can be utilized across datasets. Fine-tuning the pretrained vectors for each task gives still further improvements (CNN-non-static)."}, {"heading": "4.1 Multichannel vs. Single Channel Models", "text": "We had initially hoped that the multichannel model would offer a compromise between static and non-static vectors and thus work better than the single channel model, especially on smaller datasets. However, the results are inconclusive. Further experiments on combining static and nonstatic vectors may be warranted. For instance, instead of using an additional channel for the nonstatic portion, one could maintain a single channel but have some dimensions that are kept static and some dimensions that are allowed to be fine-tuned during training."}, {"heading": "4.2 Static vs. Non-static Representations", "text": "The multichannel model is able to fine-tune the non-static channel to make it more specific to the task-at-hand (as is the case with the single channel non-static model). For example, good is most similar to bad in word2vec, presumably because they are (almost) syntactically equivalent. But for vectors in the non-static channel that were finetuned on the MR-c dataset, this is no longer the case (table 3). Similarly, good is arguably closer to nice than it is to great for expressing sentiment, and this is indeed reflected in the learned vectors.\nFor (randomly initialized) tokens not in the set of pre-trained vectors, fine-tuning allows them to learn more meaningful representations: the network learns that exclamation marks are associated with effusive expressions and that commas are conjunctive (table 3)."}, {"heading": "4.3 Further Observations", "text": "We report on some further experiments and observations:\n\u2022 Kalchbrenner et al. (2014) report much worse results with a CNN that has essentially\nthe same architecture as our single channel model. For example, their Max-TDNN (Time Delay Neural Network) with randomly initialized words obtains 37.4% on the MR-b dataset, compared to 45.0% for our model. We attribute such discrepancy to our CNN having much more capacity (multiple filter widths and feature maps).\n\u2022 Dropout proved to be such a good regularizer that it was fine to use a larger than necessary network and simply let dropout regularize it. Dropout consistently added 2%\u20134% relative performance.\n\u2022 When randomly initializing words not in word2vec, we obtained slight improvements by sampling each dimension from U [\u2212a, a] where a was chosen such that the randomly initialized vectors have the same variance as the pre-trained ones. It would be interesting to see if employing more sophisticated methods to mirror the distribution of pre-trained vectors in the initialization process gives further improvements.\n\u2022 We briefly experimented with another set of publicly available word vectors trained by Collobert et al. (2011) on Wikipedia,8 and found that word2vec gave far superior performance. It is not clear whether this is due to Mikolov et al. (2013)\u2019s architecture or the 100 billion word Google News dataset.\n\u2022 Adadelta (Zeiler, 2012) gave similar results to Adagrad (Duchi et al., 2011) but required fewer epochs."}, {"heading": "5 Conclusion", "text": "In the present work we have described a series of experiments with convolutional neural networks built on top of word2vec. Despite little tuning of hyperparameters, a simple CNN with one layer of convolution performs remarkably well. Our results add to the well-established evidence that pretraining of word vectors is an important ingredient in deep learning for NLP."}, {"heading": "Acknowledgments", "text": "We would like to thank Yann LeCun and the anonymous reviewers for their helpful feedback and suggestions. 8http://ronan.collobert.com/senna/"}], "references": [{"title": "Neural Probabilitistic Language Model", "author": ["Y. Bengio", "R. Ducharme", "P. Vincent."], "venue": "Journal of Machine Learning Research 3:1137\u20131155.", "citeRegEx": "Bengio et al\\.,? 2003", "shortCiteRegEx": "Bengio et al\\.", "year": 2003}, {"title": "Natural Language Processing (Almost) from Scratch", "author": ["R. Collobert", "J. Weston", "L. Bottou", "M. Karlen", "K. Kavukcuglu", "P. Kuksa."], "venue": "Journal of Machine Learning Research 12:2493\u20132537.", "citeRegEx": "Collobert et al\\.,? 2011", "shortCiteRegEx": "Collobert et al\\.", "year": 2011}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["J. Duchi", "E. Hazan", "Y. Singer"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Duchi et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Duchi et al\\.", "year": 2011}, {"title": "A Statistical Parsing Framework for Sentiment Classification", "author": ["L. Dong", "F. Wei", "S. Liu", "M. Zhou", "K. Xu."], "venue": "CoRR, abs/1401.6330.", "citeRegEx": "Dong et al\\.,? 2014", "shortCiteRegEx": "Dong et al\\.", "year": 2014}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["A. Graves", "A. Mohamed", "G. Hinton."], "venue": "Proceedings of ICASSP 2013.", "citeRegEx": "Graves et al\\.,? 2013", "shortCiteRegEx": "Graves et al\\.", "year": 2013}, {"title": "Improving neural networks by preventing co-adaptation of feature detectors", "author": ["G. Hinton", "N. Srivastava", "A. Krizhevsky", "I. Sutskever", "R. Salakhutdinov."], "venue": "CoRR, abs/1207.0580.", "citeRegEx": "Hinton et al\\.,? 2012", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "The Role of Syntax in Vector Space Models of Compositional Semantics", "author": ["K. Hermann", "P. Blunsom."], "venue": "Proceedings of ACL 2013.", "citeRegEx": "Hermann and Blunsom.,? 2013", "shortCiteRegEx": "Hermann and Blunsom.", "year": 2013}, {"title": "Mining and Summarizing Customer Reviews", "author": ["M. Hu", "B. Liu."], "venue": "Proceedings of ACM SIGKDD 2004.", "citeRegEx": "Hu and Liu.,? 2004", "shortCiteRegEx": "Hu and Liu.", "year": 2004}, {"title": "Political Ideology Detection Using Recursive Neural Networks", "author": ["M. Iyyer", "P. Enns", "J. Boyd-Graber", "P. Resnik"], "venue": "Proceedings of ACL 2014.", "citeRegEx": "Iyyer et al\\.,? 2014", "shortCiteRegEx": "Iyyer et al\\.", "year": 2014}, {"title": "A Convolutional Neural Network for Modelling Sentences", "author": ["N. Kalchbrenner", "E. Grefenstette", "P. Blunsom."], "venue": "Proceedings of ACL 2014.", "citeRegEx": "Kalchbrenner et al\\.,? 2014", "shortCiteRegEx": "Kalchbrenner et al\\.", "year": 2014}, {"title": "ImageNet Classification with Deep Convolutional Neural Networks", "author": ["A. Krizhevsky", "I. Sutskever", "G. Hinton."], "venue": "Proceedings of NIPS 2012.", "citeRegEx": "Krizhevsky et al\\.,? 2012", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Distributed Represenations of Sentences and Documents", "author": ["Q. Le", "T. Mikolov."], "venue": "Proceedings of ICML 2014.", "citeRegEx": "Le and Mikolov.,? 2014", "shortCiteRegEx": "Le and Mikolov.", "year": 2014}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner."], "venue": "Proceedings of the IEEE, 86(11):2278\u2013 2324, November.", "citeRegEx": "LeCun et al\\.,? 1998", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Learning Question Classifiers", "author": ["X. Li", "D. Roth."], "venue": "Proceedings of ACL 2002.", "citeRegEx": "Li and Roth.,? 2002", "shortCiteRegEx": "Li and Roth.", "year": 2002}, {"title": "Distributed Representations of Words and Phrases and their Compositionality", "author": ["T. Mikolov", "I. Sutskever", "K. Chen", "G. Corrado", "J. Dean."], "venue": "Proceedings of NIPS 2013. T. Nakagawa, K. Inui, S. Kurohashi. 2010. De-", "citeRegEx": "Mikolov et al\\.,? 2013", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "A sentimental education: Sentiment analysis using subjectivity summarization based on minimum cuts", "author": ["B. Pang", "L. Lee."], "venue": "Proceedings of ACL 2004.", "citeRegEx": "Pang and Lee.,? 2004", "shortCiteRegEx": "Pang and Lee.", "year": 2004}, {"title": "Seeing stars: Exploiting class relationships for sentiment categorization with respect to rating scales", "author": ["B. Pang", "L. Lee."], "venue": "Proceedings of ACL 2005.", "citeRegEx": "Pang and Lee.,? 2005", "shortCiteRegEx": "Pang and Lee.", "year": 2005}, {"title": "CNN Features off-the-shelf: an Astounding Baseline", "author": ["A.S. Razavian", "H. Azizpour", "J. Sullivan", "S. Carlsson"], "venue": "CoRR, abs/1403.6382.", "citeRegEx": "Razavian et al\\.,? 2014", "shortCiteRegEx": "Razavian et al\\.", "year": 2014}, {"title": "Learning Semantic Representations Using Convolutional Neural Networks for Web Search", "author": ["Y. Shen", "X. He", "J. Gao", "L. Deng", "G. Mesnil."], "venue": "Proceedings of WWW 2014.", "citeRegEx": "Shen et al\\.,? 2014", "shortCiteRegEx": "Shen et al\\.", "year": 2014}, {"title": "From symbolic to sub-symbolic information in question classification", "author": ["J. Silva", "L. Coheur", "A. Mendes", "A. Wichert."], "venue": "Artificial Intelligence Review, 35(2):137\u2013154.", "citeRegEx": "Silva et al\\.,? 2011", "shortCiteRegEx": "Silva et al\\.", "year": 2011}, {"title": "Semi-Supervised Recursive Autoencoders for Predicting Sentiment Distributions", "author": ["R. Socher", "J. Pennington", "E. Huang", "A. Ng", "C. Manning."], "venue": "Proceedings of EMNLP 2011.", "citeRegEx": "Socher et al\\.,? 2011", "shortCiteRegEx": "Socher et al\\.", "year": 2011}, {"title": "Semantic Compositionality through Recursive MatrixVector Spaces", "author": ["R. Socher", "B. Huval", "C. Manning", "A. Ng."], "venue": "Proceedings of EMNLP 2012.", "citeRegEx": "Socher et al\\.,? 2012", "shortCiteRegEx": "Socher et al\\.", "year": 2012}, {"title": "Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank", "author": ["R. Socher", "A. Perelygin", "J. Wu", "J. Chuang", "C. Manning", "A. Ng", "C. Potts."], "venue": "Proceedings of EMNLP 2013.", "citeRegEx": "Socher et al\\.,? 2013", "shortCiteRegEx": "Socher et al\\.", "year": 2013}, {"title": "Annotating Expressions of Opinions and Emotions in Language", "author": ["J. Wiebe", "T. Wilson", "C. Cardie."], "venue": "Language Resources and Evaluation, 39(2-3): 165\u2013 210.", "citeRegEx": "Wiebe et al\\.,? 2005", "shortCiteRegEx": "Wiebe et al\\.", "year": 2005}, {"title": "Baselines and Bigrams: Simple, Good Sentiment and Topic Classification", "author": ["S. Wang", "C. Manning."], "venue": "Proceedings of ACL 2012.", "citeRegEx": "Wang and Manning.,? 2012", "shortCiteRegEx": "Wang and Manning.", "year": 2012}, {"title": "Fast Dropout Training", "author": ["S. Wang", "C. Manning."], "venue": "Proceedings of ICML 2013.", "citeRegEx": "Wang and Manning.,? 2013", "shortCiteRegEx": "Wang and Manning.", "year": 2013}, {"title": "Context-aware Learning for Sentence-level Sentiment Analysis with Posterior Regularization", "author": ["B. Yang", "C. Cardie."], "venue": "Proceedings of ACL 2014.", "citeRegEx": "Yang and Cardie.,? 2014", "shortCiteRegEx": "Yang and Cardie.", "year": 2014}, {"title": "Learning Discriminative Projections for Text Similarity Measures", "author": ["W. Yih", "K. Toutanova", "J. Platt", "C. Meek."], "venue": "Proceedings of the Fifteenth Conference on Computational Natural Language Learning, 247\u2013256.", "citeRegEx": "Yih et al\\.,? 2011", "shortCiteRegEx": "Yih et al\\.", "year": 2011}, {"title": "Semantic Parsing for Single-Relation Question Answering", "author": ["W. Yih", "X. He", "C. Meek."], "venue": "Proceedings of ACL 2014.", "citeRegEx": "Yih et al\\.,? 2014", "shortCiteRegEx": "Yih et al\\.", "year": 2014}, {"title": "Adadelta: An adaptive learning rate method", "author": ["M. Zeiler."], "venue": "CoRR, abs/1212.5701.", "citeRegEx": "Zeiler.,? 2012", "shortCiteRegEx": "Zeiler.", "year": 2012}], "referenceMentions": [{"referenceID": 10, "context": "Deep learning models have achieved remarkable results in computer vision (Krizhevsky et al., 2012) and speech recognition (Graves et al.", "startOffset": 73, "endOffset": 98}, {"referenceID": 4, "context": ", 2012) and speech recognition (Graves et al., 2013) in recent years.", "startOffset": 31, "endOffset": 52}, {"referenceID": 0, "context": "Within natural language processing, much of the work with deep learning methods has involved learning word vector representations through neural language models (Bengio et al., 2003; Yih et al., 2011; Mikolov et al., 2013) and performing composition over the learned word vectors for classification (Collobert et al.", "startOffset": 161, "endOffset": 222}, {"referenceID": 27, "context": "Within natural language processing, much of the work with deep learning methods has involved learning word vector representations through neural language models (Bengio et al., 2003; Yih et al., 2011; Mikolov et al., 2013) and performing composition over the learned word vectors for classification (Collobert et al.", "startOffset": 161, "endOffset": 222}, {"referenceID": 14, "context": "Within natural language processing, much of the work with deep learning methods has involved learning word vector representations through neural language models (Bengio et al., 2003; Yih et al., 2011; Mikolov et al., 2013) and performing composition over the learned word vectors for classification (Collobert et al.", "startOffset": 161, "endOffset": 222}, {"referenceID": 1, "context": ", 2013) and performing composition over the learned word vectors for classification (Collobert et al., 2011).", "startOffset": 84, "endOffset": 108}, {"referenceID": 12, "context": "Convolutional neural networks (CNN) utilize layers with convolving filters that are applied to local features (LeCun et al., 1998).", "startOffset": 110, "endOffset": 130}, {"referenceID": 28, "context": "Originally invented for computer vision, CNN models have subsequently been shown to be effective for NLP and have achieved good results in semantic parsing (Yih et al., 2014), search query retrieval (Shen et al.", "startOffset": 156, "endOffset": 174}, {"referenceID": 18, "context": ", 2014), search query retrieval (Shen et al., 2014), sentence modeling (Kalchbrenner et al.", "startOffset": 32, "endOffset": 51}, {"referenceID": 9, "context": ", 2014), sentence modeling (Kalchbrenner et al., 2014), and other traditional NLP tasks (Collobert et al.", "startOffset": 27, "endOffset": 54}, {"referenceID": 1, "context": ", 2014), and other traditional NLP tasks (Collobert et al., 2011).", "startOffset": 41, "endOffset": 65}, {"referenceID": 0, "context": "Within natural language processing, much of the work with deep learning methods has involved learning word vector representations through neural language models (Bengio et al., 2003; Yih et al., 2011; Mikolov et al., 2013) and performing composition over the learned word vectors for classification (Collobert et al., 2011). Word vectors, wherein words are projected from a sparse, 1-of-V encoding (here V is the vocabulary size) onto a lower dimensional vector space via a hidden layer, are essentially feature extractors that encode semantic features of words in their dimensions. In such dense representations, semantically close words are likewise close\u2014in euclidean or cosine distance\u2014in the lower dimensional vector space. Convolutional neural networks (CNN) utilize layers with convolving filters that are applied to local features (LeCun et al., 1998). Originally invented for computer vision, CNN models have subsequently been shown to be effective for NLP and have achieved good results in semantic parsing (Yih et al., 2014), search query retrieval (Shen et al., 2014), sentence modeling (Kalchbrenner et al., 2014), and other traditional NLP tasks (Collobert et al., 2011). In the present work, we train a simple CNN with one layer of convolution on top of word vectors obtained from an unsupervised neural language model. These vectors were trained by Mikolov et al. (2013) on 100 billion words of Google News, and are publicly available.", "startOffset": 162, "endOffset": 1387}, {"referenceID": 0, "context": "Within natural language processing, much of the work with deep learning methods has involved learning word vector representations through neural language models (Bengio et al., 2003; Yih et al., 2011; Mikolov et al., 2013) and performing composition over the learned word vectors for classification (Collobert et al., 2011). Word vectors, wherein words are projected from a sparse, 1-of-V encoding (here V is the vocabulary size) onto a lower dimensional vector space via a hidden layer, are essentially feature extractors that encode semantic features of words in their dimensions. In such dense representations, semantically close words are likewise close\u2014in euclidean or cosine distance\u2014in the lower dimensional vector space. Convolutional neural networks (CNN) utilize layers with convolving filters that are applied to local features (LeCun et al., 1998). Originally invented for computer vision, CNN models have subsequently been shown to be effective for NLP and have achieved good results in semantic parsing (Yih et al., 2014), search query retrieval (Shen et al., 2014), sentence modeling (Kalchbrenner et al., 2014), and other traditional NLP tasks (Collobert et al., 2011). In the present work, we train a simple CNN with one layer of convolution on top of word vectors obtained from an unsupervised neural language model. These vectors were trained by Mikolov et al. (2013) on 100 billion words of Google News, and are publicly available.1 We initially keep the word vectors static and learn only the other parameters of the model. Despite little tuning of hyperparameters, this simple model achieves excellent results on multiple benchmarks, suggesting that the pre-trained vectors are \u2018universal\u2019 feature extractors that can be utilized for various classification tasks. Learning task-specific vectors through fine-tuning results in further improvements. We finally describe a simple modification to the architecture to allow for the use of both pre-trained and task-specific vectors by having multiple channels. Our work is philosophically similar to Razavian et al. (2014) which showed that for image classification, feature extractors obtained from a pretrained deep learning model perform well on a variety of tasks\u2014including tasks that are very different from the original task for which the feature extractors were trained.", "startOffset": 162, "endOffset": 2090}, {"referenceID": 1, "context": "The model architecture, shown in figure 1, is a slight variant of the CNN architecture of Collobert et al. (2011). Let xi \u2208 Rk be the k-dimensional word vector corresponding to the i-th word in the sentence.", "startOffset": 90, "endOffset": 114}, {"referenceID": 1, "context": "We then apply a max-overtime pooling operation (Collobert et al., 2011) over the feature map and take the maximum value \u0109 = max{c} as the feature corresponding to this particular filter.", "startOffset": 47, "endOffset": 71}, {"referenceID": 5, "context": "For regularization we employ dropout on the penultimate layer with a constraint on l2-norms of the weight vectors (Hinton et al., 2012).", "startOffset": 114, "endOffset": 135}, {"referenceID": 16, "context": "Classification involves detecting positive/negative reviews (Pang and Lee, 2005).", "startOffset": 60, "endOffset": 80}, {"referenceID": 20, "context": "The reviews were relabeled by Socher et al. (2013).4", "startOffset": 30, "endOffset": 51}, {"referenceID": 15, "context": "\u2022 Subj: Subjectivity dataset where the task is to classify a sentence as being subjective or objective (Pang and Lee, 2004).", "startOffset": 103, "endOffset": 123}, {"referenceID": 13, "context": ") (Li and Roth, 2002).", "startOffset": 2, "endOffset": 21}, {"referenceID": 7, "context": "Task is to predict positive/negative reviews (Hu and Liu, 2004).", "startOffset": 45, "endOffset": 63}, {"referenceID": 23, "context": "html \u2022 MPQA: Opinion polarity detection subtask of the MPQA dataset (Wiebe et al., 2005).", "startOffset": 68, "endOffset": 88}, {"referenceID": 18, "context": "Data is actually provided at the phrase-level and hence we train the model on both phrases and sentences but only score on sentences at test time, as in Socher et al. (2013), Kalchbrenner et al.", "startOffset": 153, "endOffset": 174}, {"referenceID": 9, "context": "(2013), Kalchbrenner et al. (2014), and Le and Mikolov (2014).", "startOffset": 8, "endOffset": 35}, {"referenceID": 9, "context": "(2013), Kalchbrenner et al. (2014), and Le and Mikolov (2014). Thus the training set is an order of magnitude larger than listed in table 1 (138K for MR-b and 65K for MR-c).", "startOffset": 8, "endOffset": 62}, {"referenceID": 29, "context": "Training is done through stochastic gradient descent over shuffled mini-batches with the Adadelta update rule (Zeiler, 2012).", "startOffset": 110, "endOffset": 124}, {"referenceID": 1, "context": "Initializing word vectors with those obtained from an unsupervised neural language model is a popular method to improve performance in the absence of a large supervised training set (Collobert et al., 2011; Socher et al., 2011; Iyyer et al., 2014).", "startOffset": 182, "endOffset": 247}, {"referenceID": 20, "context": "Initializing word vectors with those obtained from an unsupervised neural language model is a popular method to improve performance in the absence of a large supervised training set (Collobert et al., 2011; Socher et al., 2011; Iyyer et al., 2014).", "startOffset": 182, "endOffset": 247}, {"referenceID": 8, "context": "Initializing word vectors with those obtained from an unsupervised neural language model is a popular method to improve performance in the absence of a large supervised training set (Collobert et al., 2011; Socher et al., 2011; Iyyer et al., 2014).", "startOffset": 182, "endOffset": 247}, {"referenceID": 14, "context": "The vectors have dimensionality of 300 and were trained using the continuous bag-of-words architecture (Mikolov et al., 2013).", "startOffset": 103, "endOffset": 125}, {"referenceID": 20, "context": "4 RAE (Socher et al., 2011) 77.", "startOffset": 6, "endOffset": 27}, {"referenceID": 21, "context": "4 MV-RNN (Socher et al., 2012) 79.", "startOffset": 9, "endOffset": 30}, {"referenceID": 22, "context": "9 \u2212 \u2212 \u2212 \u2212 RNTN (Socher et al., 2013) \u2212 45.", "startOffset": 15, "endOffset": 36}, {"referenceID": 9, "context": "4 \u2212 \u2212 \u2212 \u2212 DCNN (Kalchbrenner et al., 2014) \u2212 48.", "startOffset": 15, "endOffset": 42}, {"referenceID": 11, "context": "0 \u2212 \u2212 Paragraph-Vec (Le and Mikolov, 2014) \u2212 48.", "startOffset": 20, "endOffset": 42}, {"referenceID": 6, "context": "8 \u2212 \u2212 \u2212 \u2212 CCAE (Hermann and Blunsom, 2013) 77.", "startOffset": 15, "endOffset": 42}, {"referenceID": 3, "context": "2 Sent-Parser (Dong et al., 2014) 79.", "startOffset": 14, "endOffset": 33}, {"referenceID": 24, "context": "3 NBSVM (Wang and Manning, 2012) 79.", "startOffset": 8, "endOffset": 32}, {"referenceID": 24, "context": "3 MNB (Wang and Manning, 2012) 79.", "startOffset": 6, "endOffset": 30}, {"referenceID": 25, "context": "3 G-Dropout (Wang and Manning, 2013) 79.", "startOffset": 12, "endOffset": 36}, {"referenceID": 25, "context": "1 F-Dropout (Wang and Manning, 2013) 79.", "startOffset": 12, "endOffset": 36}, {"referenceID": 26, "context": "1 CRF-PR (Yang and Cardie, 2014) \u2212 \u2212 \u2212 \u2212 \u2212 82.", "startOffset": 9, "endOffset": 32}, {"referenceID": 19, "context": "7 \u2212 SVMS (Silva et al., 2011) \u2212 \u2212 \u2212 \u2212 95.", "startOffset": 9, "endOffset": 29}, {"referenceID": 20, "context": "RAE: Recursive Autoencoders with pre-trained word vectors from Wikipedia (Socher et al., 2011).", "startOffset": 73, "endOffset": 94}, {"referenceID": 21, "context": "MV-RNN: Matrix-Vector Recursive Neural Network with parse trees (Socher et al., 2012).", "startOffset": 64, "endOffset": 85}, {"referenceID": 22, "context": "RNTN: Recursive Neural Tensor Network with tensor-based feature function and parse trees (Socher et al., 2013).", "startOffset": 89, "endOffset": 110}, {"referenceID": 9, "context": "DCNN: Dynamic Convolutional Neural Network with k-max pooling (Kalchbrenner et al., 2014).", "startOffset": 62, "endOffset": 89}, {"referenceID": 11, "context": "Paragraph-Vec: Logistic regression on top of paragraph vectors (Le and Mikolov, 2014).", "startOffset": 63, "endOffset": 85}, {"referenceID": 6, "context": "CCAE: Combinatorial Category Autoencoders with combinatorial category grammar operators (Hermann and Blunsom, 2013).", "startOffset": 88, "endOffset": 115}, {"referenceID": 3, "context": "Sent-Parser: Sentiment analysis-specific parser (Dong et al., 2014).", "startOffset": 48, "endOffset": 67}, {"referenceID": 26, "context": "CRF-PR: Conditional Random Fields with Posterior Regularization (Yang and Cardie, 2014).", "startOffset": 64, "endOffset": 87}, {"referenceID": 3, "context": "Sent-Parser: Sentiment analysis-specific parser (Dong et al., 2014). NBSVM, MNB: Naive Bayes SVM and Multinomial Naive Bayes with uni-bigrams from Wang and Manning (2012). G-Dropout, F-Dropout: Gaussian Dropout and Fast Dropout from Wang and Manning (2013).", "startOffset": 49, "endOffset": 171}, {"referenceID": 3, "context": "Sent-Parser: Sentiment analysis-specific parser (Dong et al., 2014). NBSVM, MNB: Naive Bayes SVM and Multinomial Naive Bayes with uni-bigrams from Wang and Manning (2012). G-Dropout, F-Dropout: Gaussian Dropout and Fast Dropout from Wang and Manning (2013). Tree-CRF: Dependency tree with Conditional Random Fields (Nakagawa et al.", "startOffset": 49, "endOffset": 257}, {"referenceID": 3, "context": "Sent-Parser: Sentiment analysis-specific parser (Dong et al., 2014). NBSVM, MNB: Naive Bayes SVM and Multinomial Naive Bayes with uni-bigrams from Wang and Manning (2012). G-Dropout, F-Dropout: Gaussian Dropout and Fast Dropout from Wang and Manning (2013). Tree-CRF: Dependency tree with Conditional Random Fields (Nakagawa et al., 2010). CRF-PR: Conditional Random Fields with Posterior Regularization (Yang and Cardie, 2014). SVMS : SVM with uni-bi-trigrams, wh word, head word, POS, parser, hypernyms, and 60 hand-coded rules as features from Silva et al. (2011).", "startOffset": 49, "endOffset": 567}, {"referenceID": 9, "context": "Even a simple model with static vectors (CNN-static) performs remarkably well, giving competitive results against the more sophisticated deep learning models that utilize complex pooling schemes (Kalchbrenner et al., 2014) or require parse trees to be computed beforehand (Socher et al.", "startOffset": 195, "endOffset": 222}, {"referenceID": 22, "context": ", 2014) or require parse trees to be computed beforehand (Socher et al., 2013).", "startOffset": 57, "endOffset": 78}, {"referenceID": 9, "context": "\u2022 Kalchbrenner et al. (2014) report much worse results with a CNN that has essentially the same architecture as our single channel model.", "startOffset": 2, "endOffset": 29}, {"referenceID": 1, "context": "\u2022 We briefly experimented with another set of publicly available word vectors trained by Collobert et al. (2011) on Wikipedia,8 and found that word2vec gave far superior performance.", "startOffset": 89, "endOffset": 113}, {"referenceID": 1, "context": "\u2022 We briefly experimented with another set of publicly available word vectors trained by Collobert et al. (2011) on Wikipedia,8 and found that word2vec gave far superior performance. It is not clear whether this is due to Mikolov et al. (2013)\u2019s architecture or the 100 billion word Google News dataset.", "startOffset": 89, "endOffset": 244}, {"referenceID": 29, "context": "\u2022 Adadelta (Zeiler, 2012) gave similar results to Adagrad (Duchi et al.", "startOffset": 11, "endOffset": 25}, {"referenceID": 2, "context": "\u2022 Adadelta (Zeiler, 2012) gave similar results to Adagrad (Duchi et al., 2011) but required fewer epochs.", "startOffset": 58, "endOffset": 78}], "year": 2014, "abstractText": "We report on a series of experiments with convolutional neural networks (CNN) trained on top of pre-trained word vectors for sentence-level classification tasks. We first show that a simple CNN with little hyperparameter tuning and static vectors achieves excellent results on multiple benchmarks. Learning task-specific vectors through fine-tuning offers further gains in performance. We additionally propose a simple modification to the architecture to allow for the use of both taskspecific and static word vectors. The CNN models discussed herein improve upon the state-of-the-art on 4 out of 7 tasks, which include sentiment analysis and question classification.", "creator": "TeX"}}}