{"id": "1412.4864", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Dec-2014", "title": "Learning with Pseudo-Ensembles", "abstract": "we formalize the notion of a boo - monkey, a ( possibly infinite ) clade of hybrid animals spawned from any computer domain traditionally perturbing it structurally versus some biological paradigm. e. g., dropout ( edward met. al, 2012 ) implementing a deep neural network follows a pseudo - description of child psychologists generated representing randomly mapped elements in the noisy network. developers create a cognitive regularizer based on those possible behavior like a true - environment disappear locally presumably increasing the noise process surrounding it. in the fully - predicted setting, our regularizer matches the performance simulation dolls. but, unlike this, our causal hypothesis extends somewhat robust semi - elliptic setting, where it produces state - less - good - art results. we provide a random study in which we upgrade the recursive neural tensor network functions ( wilson et. al, 2013 ) onto simple formal - ensemble, which accordingly improves forecast approximation on simple real - dimensional sentiment analysis benchmark.", "histories": [["v1", "Tue, 16 Dec 2014 02:55:05 GMT  (321kb,D)", "http://arxiv.org/abs/1412.4864v1", "To appear in Advances in Neural Information Processing Systems 27 (NIPS 2014), Advances in Neural Information Processing Systems 27, Dec. 2014"]], "COMMENTS": "To appear in Advances in Neural Information Processing Systems 27 (NIPS 2014), Advances in Neural Information Processing Systems 27, Dec. 2014", "reviews": [], "SUBJECTS": "stat.ML cs.LG cs.NE", "authors": ["philip bachman", "ouais alsharif", "doina precup"], "accepted": true, "id": "1412.4864"}, "pdf": {"name": "1412.4864.pdf", "metadata": {"source": "CRF", "title": "Learning with Pseudo-Ensembles", "authors": ["Philip Bachman", "Ouais Alsharif"], "emails": ["phil.bachman@gmail.com", "ouais.alsharif@gmail.com", "dprecup@cs.mcgill.ca"], "sections": [{"heading": "1 Introduction", "text": "Ensembles of models have long been used as a way to obtain robust performance in the presence of noise. Ensembles typically work by training several classifiers on perturbed input distributions, e.g. bagging randomly elides parts of the distribution for each trained model and boosting re-weights the distribution before training and adding each model to the ensemble. In the last few years, dropout methods have achieved great empirical success in training deep models, by leveraging a noise process that perturbs the model structure itself. However, there has not yet been much analysis relating this approach to classic ensemble methods or other approaches to learning robust models.\nIn this paper, we formalize the notion of a pseudo-ensemble, which is a collection of child models spawned from a parent model by perturbing it with some noise process. Sec. 2 defines pseudoensembles, after which Sec. 3 discusses the relationships between pseudo-ensembles and standard ensemble methods, as well as existing notions of robustness. Once the pseudo-ensemble framework is defined, it can be leveraged to create new algorithms. In Sec. 4, we develop a novel regularizer that minimizes variation in the output of a model when it is subject to noise on its inputs and its internal state (or structure). We also discuss the relationship of this regularizer to standard dropout methods. In Sec. 5 we show that our regularizer can reproduce the performance of dropout in a fullysupervised setting, while also naturally extending to the semi-supervised setting, where it produces state-of-the-art performance on some real-world datasets. Sec. 6 presents a case study in which we extend the Recursive Neural Tensor Network from [19] by converting it into a pseudo-ensemble. We\nar X\niv :1\n41 2.\n48 64\nv1 [\nst at\n.M L\n] 1\ngenerate the pseudo-ensemble using a noise process based on Gaussian parameter fuzzing and latent subspace sampling, and empirically show that both types of perturbation contribute to significant performance improvements beyond that of the original model. We conclude in Sec. 7."}, {"heading": "2 What is a pseudo-ensemble?", "text": "Consider a data distribution pxy which we want to approximate using a parametric parent model f\u03b8. A pseudo-ensemble is a collection of \u03be-perturbed child models f\u03b8(x; \u03be), where \u03be comes from a noise process p\u03be. Dropout [9] provides the clearest existing example of a pseudo-ensemble. Dropout samples subnetworks from a source network by randomly masking the activity of subsets of its input/hidden layer nodes. The parameters shared by the subnetworks, through their common source network, are learned to minimize the expected loss of the individual subnetworks. In pseudoensemble terms, the source network is the parent model, each sampled subnetwork is a child model, and the noise process consists of sampling a node mask and using it to extract a subnetwork.\nThe noise process used to generate a pseudo-ensemble can take fairly arbitrary forms. The only requirement is that sampling a noise realization \u03be, and then imposing it on the parent model f\u03b8, be computationally tractable. This generality allows deriving a variety of pseudo-ensemble methods from existing models. For example, for a Gaussian Mixture Model, one could perturb the means of the mixture components with, e.g., Gaussian noise and their covariances with, e.g., Wishart noise.\nThe goal of learning with pseudo-ensembles is to produce models robust to perturbation. To formalize this, the general pseudo-ensemble objective for supervised learning can be written as follows1:\nminimize \u03b8 E (x,y)\u223cpxy E \u03be\u223cp\u03be L(f\u03b8(x; \u03be), y), (1)\nwhere (x, y) \u223c pxy is an (observation, label) pair drawn from the data distribution, \u03be \u223c p\u03be is a noise realization, f\u03b8(x; \u03be) represents the output of a child model spawned from the parent model f\u03b8 via \u03be-perturbation, y is the true label for x, and L(y\u0302, y) is the loss for predicting y\u0302 instead of y. The generality of the pseudo-ensemble approach comes from broad freedom in describing the noise process p\u03be and the mechanism by which \u03be perturbs the parent model f\u03b8. Many useful methods could be developed by exploring novel noise processes for generating perturbations beyond the independent masking noise that has been considered for neural networks and the feature noise that has been considered in the context of linear models. For example, [17] develops a method for learning \u201cordered representations\u201d by applying dropout/masking noise in a deep autoencoder while enforcing a particular \u201cnested\u201d structure among the random masking variables in \u03be, and [2] relies heavily on random perturbations when training Generative Stochastic Networks."}, {"heading": "3 Related work", "text": "Pseudo-ensembles are closely related to traditional ensemble methods as well as to methods for learning models robust to input uncertainty. By optimizing the expected loss of individual ensemble members\u2019 outputs, rather than the expected loss of the joint ensemble output, pseudo-ensembles differ from boosting, which iteratively augments an ensemble to minimize the loss of the joint output [8]. Meanwhile, the child models in a pseudo-ensemble share parameters and structure through their parent model, which will tend to correlate their behavior. This distinguishes pseudo-ensembles from traditional \u201cindependent member\u201d ensemble methods, like bagging and random forests, which typically prefer diversity in the behavior of their members, as this provides bias and variance reduction when the outputs of their members are averaged [8]. In fact, the regularizers we introduce in Sec. 4 explicitly minimize diversity in the behavior of their pseudo-ensemble members.\nThe definition and use of pseudo-ensembles are strongly motivated by the intuition that models trained to be robust to noise should generalize better than models that are (overly) sensitive to small perturbations. Previous work on robust learning has overwhelmingly concentrated on perturbations affecting the inputs to a model. For example, the optimization community has produced a large body of theoretical and empirical work addressing \u201cstochastic programming\u201d [18] and \u201crobust optimization\u201d [4]. Stochastic programming seeks to produce a solution to a, e.g., linear program that performs\n1It is easy to formulate analogous objectives for unsupervised learning, maximum likelihood, etc.\nwell on average, with respect to a known distribution over perturbations of parameters in the problem definition2. Robust optimization generally seeks to produce a solution to a, e.g., linear program with optimal worst case performance over a given set of possible perturbations of parameters in the problem definition. Several well-known machine learning methods have been shown equivalent to certain robust optimization problems. For example, [24] shows that using Lasso (i.e. `1 regularization) in a linear regression model is equivalent to a robust optimization problem. [25] shows that learning a standard SVM (i.e. hinge loss with `2 regularization in the corresponding RKHS) is also equivalent to a robust optimization problem. Supporting the notion that noise-robustness improves generalization, [25] prove many of the statistical guarantees that make SVMs so appealing directly from properties of their robust optimization equivalents, rather than using more complicated proofs involving, e.g., VC-dimension.\nLayer i-1 Layer i Layer i+1\n(1) (2) (3) (4)\ninput-space noise, as a model can always be extended with an initial \u201cidentity layer\u201d that copies the noise-free input. Noise on the input-space can then be reproduced by noise on the initial layer, which is now part of the model-space."}, {"heading": "4 The Pseudo-Ensemble Agreement regularizer", "text": "We now present Pseudo-Ensemble Agreement (PEA) regularization, which can be used in a fairly general class of computation graphs. For concreteness, we present it in the case of deep, layered neural networks. PEA regularization operates by controlling distributional properties of the random vectors {f2\u03b8 (x; \u03be), ..., fd\u03b8 (x; \u03be)}, where f i\u03b8(x; \u03be) gives the activities of the ith layer of f\u03b8 in response to x when layers < i are perturbed by \u03be while layer i is left unperturbed. Fig. 1 illustrates the construction of these random vectors. We will assume that layer d is the output layer, i.e.fd\u03b8 (x) gives the output of the unperturbed parent model in response to x and fd\u03b8 (x; \u03be) = f\u03b8(x; \u03be) gives the response of the child model generated by \u03be-perturbing f\u03b8.\nGiven the random vectors f i\u03b8(x; \u03be), PEA regularization is defined as follows:\nR(f\u03b8, px, p\u03be) = E x\u223cpx E \u03be\u223cp\u03be [ d\u2211 i=2 \u03bbiVi(f i\u03b8(x), f i\u03b8(x; \u03be)) ] , (2)\nwhere f\u03b8 is the parent model to regularize, x \u223c px is an unlabeled observation, Vi(\u00b7, \u00b7) is the \u201cvariance\u201d penalty imposed on the distribution of activities in the ith layer of the pseudo-ensemble spawned from f\u03b8, and \u03bbi controls the relative importance of Vi. Note that for Eq. 2 to act on the \u201cvariance\u201d of the f i\u03b8(x; \u03be), we should have f i \u03b8(x) \u2248 E\u03be f i\u03b8(x; \u03be). This approximation holds reasonably well for many useful neural network architectures [1, 22]. In our experiments we actually compute the penalties Vi between independently-sampled pairs of child models. We consider several different measures of variance to penalize, which we will introduce as needed.\n2Note that \u201cparameters\u201d in a linear program are analogous to inputs in standard machine learning terminology, as they are observed quantities (rather than quantities optimized over)."}, {"heading": "4.1 The effect of PEA regularization on feature co-adaptation", "text": "One of the original motivations for dropout was that it helps prevent \u201cfeature co-adaptation\u201d [9]. That is, dropout encourages individual features (i.e. hidden node activities) to remain helpful, or at least not become harmful, when other features are removed from their local context. We provide some support for that claim by examining the following optimization objective 3:\nminimize \u03b8 E (x,y)\u223cpxy [L(f\u03b8(x), y)] + E x\u223cpx E \u03be\u223cp\u03be [ d\u2211 i=2 \u03bbiVi(f i\u03b8(x), f i\u03b8(x; \u03be)) ] , (3)\nin which the supervised loss L depends only on the parent model f\u03b8 and the pseudo-ensemble only appears in the PEA regularization term. For simplicity, let \u03bbi = 0 for i < d, \u03bbd = 1, and Vd(v1, v2) = DKL(softmax(v1)|| softmax(v2)), where softmax is the standard softmax and DKL(p1||p2) is the KL-divergence between p1 and p2 (we indicate this penalty by Vk). We use xent(softmax(f\u03b8(x)), y) for the loss L(f\u03b8(x), y), where xent(y\u0302, y) is the cross-entropy between the predicted distribution y\u0302 and the true distribution y. Eq. 3 never explicitly passes label information through a \u03be-perturbed network, so \u03be only acts through its effects on the distribution of the parent model\u2019s predictions when subjected to \u03be-perturbation. In this case, (3) trades off accuracy against feature co-adaptation, as measured by the degree to which the feature activity distribution at layer i is affected by perturbation of the feature activity distributions for layers < i.\nWe test this regularizer empirically in Sec. 5.1. The observed ability of this regularizer to reproduce the performance benefits of standard dropout supports the notion that discouraging \u201cco-adaptation\u201d plays an important role in dropout\u2019s empirical success. Also, by acting strictly to make the output of the parent model more robust to \u03be-perturbation, the performance of this regularizer rebuts the claim in [22] that noise-robustness plays only a minor role in the success of standard dropout."}, {"heading": "4.2 Relating PEA regularization to standard dropout", "text": "The authors of [21] show that, assuming a noise process \u03be such that E\u03be[f(x; \u03be)] = f(x), logistic regression under the influence of dropout optimizes the following objective:\nn\u2211 i=1 E \u03be [`(f\u03b8(xi; \u03be), yi)] = n\u2211 i=1 `(f\u03b8(xi), yi)) +R(f\u03b8), (4)\nwhere f\u03b8(xi) = \u03b8xi, `(f\u03b8(xi), yi) is the logistic regression loss, and the regularization term is: R(f\u03b8) \u2261 n\u2211 i=1 E \u03be [A(f\u03b8(xi; \u03be))\u2212A(f\u03b8(xi))] , (5) where A(\u00b7) indicates the log partition function for logistic regression. Using only a KL-d penalty at the output layer, PEA-regularized logistic regression minimizes:\nn\u2211 i=1 `(f\u03b8(xi), yi) + E \u03be [DKL (softmax(f\u03b8(xi)) || softmax(f\u03b8(xi; \u03be)))] . (6)\nDefining distribution p\u03b8(x) as softmax(f\u03b8(x)), we can re-write the PEA part of Eq. 6 to get:\nE \u03be [DKL (p\u03b8(x) || p\u03b8(x; \u03be))] = E \u03be [\u2211 c\u2208C pc\u03b8(x) log pc\u03b8(x) pc\u03b8(x; \u03be) ] (7)\n= \u2211 c\u2208C E \u03be [ pc\u03b8(x) log exp f c\u03b8 (x) \u2211 c\u2032\u2208C exp f c\u2032 \u03b8 (x; \u03be) exp f c\u03b8 (x; \u03be) \u2211 c\u2032\u2208C exp f c\u2032 \u03b8 (x) ] (8)\n= \u2211 c\u2208C E \u03be [pc\u03b8(x)(f c \u03b8 (x)\u2212 f c\u03b8 (x; \u03be)) + pc\u03b8(x)(A(f\u03b8(x; \u03be))\u2212A(f\u03b8(x)))] (9)\n= E \u03be [\u2211 c\u2208C pc\u03b8(x)(A(f\u03b8(x; \u03be))\u2212A(f\u03b8(x))) ] = E \u03be [A(f\u03b8(x; \u03be))\u2212A(f\u03b8(x))] (10)\nwhich brings us to the regularizer in Eq. 5. 3While dropout is well-supported empirically, its mode-of-action is not well-understood outside the limited context of linear models."}, {"heading": "4.3 PEA regularization for semi-supervised learning", "text": "PEA regularization works as-is in a semi-supervised setting, as the penalties Vi do not require label information. We train networks for semi-supervised learning in two ways, both of which apply the objective in Eq. 1 on labeled examples and PEA regularization on the unlabeled examples. The first way applies a tanh-variance penalty Vt and the second way applies a xent-variance penalty Vx, which we define as follows:\nVt(y\u0304, y\u0303) = || tanh(y\u0304)\u2212 tanh(y\u0303)||22, Vx(y\u0304, y\u0303) = xent(softmax(y\u0304), softmax(y\u0303)), (11)\nwhere y\u0304 and y\u0303 represent the outputs of a pair of independently sampled child models, and tanh operates element-wise. The xent-variance penalty can be further expanded as:\nVx(y\u0304, y\u0303) = DKL(softmax(y\u0304)|| softmax(y\u0303)) + ent(softmax(y\u0304)), (12)\nwhere ent(\u00b7) denotes the entropy. Thus, Vx combines the KL-divergence penalty with an entropy penalty, which has been shown to perform well in a semi-supervised setting [7, 14]. Recall that at non-output layers we regularize with the \u201cdirection\u201d penalty Vc. Before the masking noise, we also apply zero-mean Gaussian noise to the input and to the biases of all nodes. In the experiments, we chose between the two output-layer penalties Vt/Vx based on observed performance."}, {"heading": "5 Testing PEA regularization", "text": "We tested PEA regularization in three scenarios: supervised learning on MNIST digits, semi-supervised learning on MNIST digits, and semi-supervised transfer learning on a dataset from the NIPS 2011 Workshop on Challenges in Learning Hierarchical Models [13]. Full implementations of our methods, written with THEANO [3], and scripts/instructions for reproducing all of the results in this section are available online at: http://github.com/Philip-Bachman/Pseudo-Ensembles."}, {"heading": "5.1 Fully-supervised MNIST", "text": "The MNIST dataset comprises 60k 28x28 grayscale hand-written digit images for training and 10k images for testing. For the supervised tests we used SGD hyperparameters roughly following those in [9]. We trained networks with two hidden layers of 800 nodes each, using rectified-linear activations and an `2-norm constraint of 3.5 on incoming weights for each node. For both standard dropout (SDE) and PEA, we used softmax \u2192 xent loss at the output layer. We initialized hidden layer biases to 0.1, output layer biases to 0, and inter-layer weights to zero-mean Gaussian noise with \u03c3 = 0.01. We trained all networks for 1000 epochs with no early-stopping (i.e. performance was measured for the final network state).\nSDE obtained 1.05% error averaged over five random initializations. Using PEA penalty Vk at the output layer and computing classification loss/gradient only for the unperturbed parent network, we obtained 1.08% averaged error. The \u03be-perturbation involved node masking but not bias noise. Thus, training the same network as used for dropout while ignoring the effects of masking noise on the classification loss, but encouraging the network to be robust to masking noise (as measured by Vk), matched the performance of dropout. This result supports the equivalence between dropout and this particular form of PEA regularization, which we derived in Section 4.2."}, {"heading": "5.2 Semi-supervised MNIST", "text": "We tested semi-supervised learning on MNIST following the protocol described in [23]. These tests split MNIST\u2019s 60k training samples into labeled/unlabeled subsets, with the labeled sets containing nl \u2208 {100, 600, 1000, 3000} samples. For labeled sets of size 600, 1000, and 3000, the full training data was randomly split 10 times into labeled/unlabeled sets and results were averaged over the splits. For labeled sets of size 100, we averaged over 50 random splits. The labeled sets had the same number of examples for each class. We tested PEA regularization with and without denoising autoencoder pre-training [20]4. Pre-trained networks were always PEA-regularized with penalty Vx\n4See our code for a perfectly complete description of our pre-training.\non the output layer and Vc on the hidden layers. Non-pre-trained networks used Vt on the output layer, except when the labeled set was of size 100, for which Vx was used. In the latter case, we gradually increased the \u03bbi over the course of training, as suggested by [7]. We generated the pseudoensembles for these tests using masking noise and Gaussian input+bias noise with \u03c3 = 0.1. Each network had two hidden layers with 800 nodes. Weight norm constraints and SGD hyperparameters were set as for supervised learning.\nTable 1 compares the performance of PEA regularization with previous results. Aside from CNN, all methods in the table are \u201cgeneral\u201d, i.e. do not use convolutions or other image-specific techniques to improve performance. The main comparisons of interest are between PEA(+) and other methods for semi-supervised learning with neural networks, i.e. E-NN, MTC+, and PL+. E-NN (EmbedNN from [23]) uses a nearest-neighbors-based graph Laplacian regularizer to make predictions \u201csmooth\u201d with respect to the manifold underlying the data distribution px. MTC+ (the Manifold Tangent Classifier from [16]) regularizes predictions to be smooth with respect to the data manifold by penalizing gradients in a learned approximation of the tangent space of the data manifold. PL+ (the PseudoLabel method from [14]) uses the joint-ensemble predictions on unlabeled data as \u201cpseudo-labels\u201d, and treats them like \u201ctrue\u201d labels. The classification losses on true labels and pseudo-labels are balanced by a scaling factor which is carefully modulated over the course of training. PEA regularization (without pre-training) outperforms all previous methods in every setting except 100 labeled samples, where PL+ performs better, but with the benefit of pre-training. By adding pretraining (i.e. PEA+), we achieve a two-fold reduction in error when using only 100 labeled samples."}, {"heading": "5.3 Transfer learning challenge (NIPS 2011)", "text": "The organizers of the NIPS 2011 Workshop on Challenges in Learning Hierarchical Models [13] proposed a challenge to improve performance on a target domain by using labeled and unlabeled\ndata from two related source domains. The labeled data source was CIFAR-100 [11], which contains 50k 32x32 color images in 100 classes. The unlabeled data source was a collection of 100k 32x32 color images taken from Tiny Images [11]. The target domain comprised 120 32x32 color images divided unevenly among 10 classes. Neither the classes nor the images in the target domain appeared in either of the source domains. The winner of this challenge used convolutional Spike and Slab Sparse Coding, followed by max pooling and a linear SVM on the pooled features [6]. Labels on the source data were ignored and the source data was used to pre-train a large set of convolutional features. After applying the pre-trained feature extractor to the 120 training images, this method achieved an accuracy of 48.6% on the target domain, the best published result on this dataset.\nWe applied semi-supervised PEA regularization by first using the CIFAR-100 data to train a deep network comprising three max-pooled convolutional layers followed by a fully-connected hidden layer which fed into a softmax \u2192 xent output layer. Afterwards, we removed the hidden and output layers, replaced them with a pair of fully-connected hidden layers feeding into an `2-hinge-loss output layer5, and then trained the non-convolutional part of the network on the 120 training images from the target domain. For this final training phase, which involved three layers, we tried standard dropout and dropout with PEA regularization on the source data. Standard dropout achieved 55.5% accuracy, which improved to 57.4% when we added PEA regularization on the source data. While most of the improvement over the previous state-of-the-art (i.e. 48.6%) was due to dropout and an improved training strategy (i.e. supervised pre-training vs. unsupervised pre-training), controlling the feature activity and output distributions of the pseudo-ensemble on unlabeled data allowed significant further improvement."}, {"heading": "6 Improved sentiment analysis using pseudo-ensembles", "text": "We now show how the Recursive Neural Tensor Network (RNTN) from [19] can be adapted using pseudo-ensembles, and evaluate it on the Stanford Sentiment Treebank (STB) task. The STB task involves predicting the sentiment of short phrases extracted from movie reviews on RottenTomatoes.com. Ground-truth labels for the phrases, and the \u201csub-phrases\u201d produced by processing them with a standard parser, were generated using Amazon Mechanical Turk. In addition to pseudoensembles, we used a more \u201ccompact\u201d bilinear form in the function f : Rn \u00d7 Rn \u2192 Rn that the RNTN applies recursively as shown in Figure 3. The computation for the ith dimension of the original f (for vi \u2208 Rn\u00d71) is:\nfi(v1, v2) = tanh([v1; v2] >Ti[v1; v2] +Mi[v1; v2; 1]), whereas we use:\nfi(v1, v2) = tanh(v > 1 Tiv2 +Mi[v1; v2; 1]),\nin which Ti indicates a matrix slice of tensor T and Mi indicates a vector row of matrix M . In the original RNTN, T is 2n\u00d7 2n\u00d7 n and in ours it is n\u00d7 n\u00d7 n. The other parameters in the RNTNs are a transform matrix M \u2208 Rn\u00d72n+1 and a classification matrix C \u2208 Rc\u00d7n+1; each RNTN outputs c class probabilities for vector v using softmax(C[v; 1]). A \u201c;\u201d indicates vertical vector stacking.\nWe initialized the model with pre-trained word vectors. The pre-training used word2vec on the training and dev set, with three modifications: dropout/fuzzing was applied during pre-training (to match the conditions in the full model), the vector norms were constrained so the pre-trained vectors had standard deviation 0.5, and tanh was applied during word2vec (again, to match conditions in the full model). All code required for these experiments is publicly available online.\nWe generated pseudo-ensembles from a parent RNTN using two types of perturbation: subspace sampling and weight fuzzing. We performed subspace sampling by keeping only n2 randomly sampled latent dimensions out of the n in the parent model when processing a given phrase tree. Using the same sampled dimensions for a full phrase tree reduced computation time significantly, as the parameter matrices/tensor could be \u201csliced\u201d to include only the relevant dimensions6. During\n5We found that `2-hinge-loss performed better than softmax \u2192 xent in this setting. Switching to softmax \u2192 xent degrades the dropout and PEA results but does not change their ranking.\n6This allowed us to train significantly larger models before over-fitting offset increased model capacity. But, training these larger models would have been tedious without the parameter slicing permitted by subspace sampling, as feedforward for the RNTN is O(n3).\ntraining we sampled a new subspace each time a phrase tree was processed and computed testtime outputs for each phrase tree by averaging over 50 randomly sampled subspaces. We performed weight fuzzing during training by perturbing parameters with zero-mean Gaussian noise before processing each phrase tree and then applying gradients w.r.t. the perturbed parameters to the unperturbed parameters. We did not fuzz during testing. Weight fuzzing has an interesting interpretation as an implicit convolution of the objective function (defined w.r.t. the model parameters) with an isotropic Gaussian distribution. In the case of recursive/recurrent neural networks this may prove quite useful, as convolving the objective with a Gaussian reduces its curvature, thereby mitigating some problems stemming from ill-conditioned Hessians [15]. For further description of the model and training/testing process, see the supplementary material and the code from http://github.com/Philip-Bachman/Pseudo-Ensembles.\nr1\np1\nw2 w3\nw1 p1 = f(w2, w3)\nr1 = f(w1, p1)\nperhaps the best\ntable look-up"}, {"heading": "7 Discussion", "text": "We proposed the notion of a pseudo-ensemble, which captures methods such as dropout [9] and feature noising in linear models [5, 21] that have recently drawn significant attention. Using the conceptual framework provided by pseudo-ensembles, we developed and applied a regularizer that performs well empirically and provides insight into the mechanisms behind dropout\u2019s success. We also showed how pseudo-ensembles can be used to improve the performance of an already powerful model on a competitive real-world sentiment analysis benchmark. We anticipate that this idea, which unifies several rapidly evolving lines of research, can be used to develop several other novel and successful algorithms, especially for semi-supervised learning."}], "references": [{"title": "Understanding dropout", "author": ["P. Baldi", "P. Sadowski"], "venue": "In NIPS,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2013}, {"title": "Deep generative stochastic networks trainable by backprop", "author": ["Y. Bengio", "\u00c9. Thibodeau-Laufer", "G. Alain", "J. Yosinski"], "venue": "[cs.LG],", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Theano: A cpu and gpu math expression compiler", "author": ["J. Bergstra", "O. Breuleux", "F. Bastien", "P. Lamblin", "R. Pascanu", "G. Desjardins", "J. Turian", "D. Warde-Farley", "Y. Bengio"], "venue": "In Python for Scientific Computing Conference (SciPy),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2010}, {"title": "Theory and applications of robust optimization", "author": ["D. Bertsimas", "D.B. Brown", "C. Caramanis"], "venue": "SIAM Review,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Learning with marginalized corrupted features", "author": ["L. Van der Maaten", "M. Chen", "S. Tyree", "K.Q. Weinberger"], "venue": "In ICML,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "Large-scale feature learning with spike-and-slab sparse coding", "author": ["I.J. Goodfellow", "A. Courville", "Y. Bengio"], "venue": "In ICML,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Semi-Supervised Learning, chapter Entropy Regularization", "author": ["Y. Grandvalet", "Y. Bengio"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2006}, {"title": "Elements of Statistical Learning II", "author": ["T. Hastie", "J. Friedman", "R. Tibshirani"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2008}, {"title": "Improving neural networks by preventing co-adaptation of feature detectors", "author": ["G.E. Hinton", "N. Srivastava", "A. Krizhevsky", "I. Sutskever", "R.R. Salakhutdinov"], "venue": "[cs.NE],", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2012}, {"title": "A convolutional neural network for modelling sentences", "author": ["N. Kalchbrenner", "E. Grefenstette", "P. Blunsom"], "venue": "In ACL,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2014}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky"], "venue": "Master\u2019s thesis, University of Toronto,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2009}, {"title": "Distributed representations of sentences and documents", "author": ["Q.V. Le", "T. Mikolov"], "venue": "In ICML,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "Workshop on challenges in learning hierarchical models: Transfer learning and optimization", "author": ["Q.V. Le", "M.A. Ranzato", "R.R. Salakhutdinov", "A.Y. Ng", "J. Tenenbaum"], "venue": "In NIPS,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2011}, {"title": "Pseudo-label: The simple and efficient semi-supervised learning method for deep neural networks", "author": ["D.-H. Lee"], "venue": "In ICML,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2013}, {"title": "On the difficulties of training recurrent neural networks", "author": ["R. Pacanu", "T. Mikolov", "Y. Bengio"], "venue": "In ICML,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2013}, {"title": "The manifold tangent classifier", "author": ["S. Rifai", "Y. Dauphin", "P. Vincent", "Y. Bengio", "X. Muller"], "venue": "In NIPS,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2011}, {"title": "Learning ordered representations with nested dropout", "author": ["O. Rippel", "M.A. Gelbart", "R.P. Adams"], "venue": "In ICML,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2014}, {"title": "Lectures on Stochastic Programming: Modeling and Theory", "author": ["A. Shapiro", "D. Dentcheva", "A. Ruszczynski"], "venue": "Society for Industrial and Applied Mathematics (SIAM),", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2009}, {"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "author": ["R. Socher", "A. Perelygin", "J.Y. Wu", "J. Chuang", "C.D. Manning", "A.Y. Ng", "C. Potts"], "venue": "In EMNLP,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "Extracting and composing robust features with denoising autoencoders", "author": ["P. Vincent", "H. Larochelle", "Y. Bengio"], "venue": "In ICML,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2008}, {"title": "Dropout training as adaptive regularization", "author": ["S. Wager", "S. Wang", "P. Liang"], "venue": "In NIPS,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2013}, {"title": "An empirical analysis of dropout in piecewise linear networks", "author": ["D. Warde-Farley", "I.J. Goodfellow", "A. Courville", "Y. Bengio"], "venue": "In ICLR,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2014}, {"title": "Deep learning via semi-supervised embedding", "author": ["J. Weston", "F. Ratle", "R. Collobert"], "venue": "In ICML,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2008}, {"title": "Robust regression and lasso", "author": ["H. Xu", "C. Caramanis", "S. Mannor"], "venue": "In NIPS,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2009}, {"title": "Robustness and regularization of support vector", "author": ["H. Xu", "C. Caramanis", "S. Mannor"], "venue": "machines. JMLR,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2009}], "referenceMentions": [{"referenceID": 8, "context": ", dropout [9] in a deep neural network trains a pseudo-ensemble of child subnetworks generated by randomly masking nodes in the parent network.", "startOffset": 10, "endOffset": 13}, {"referenceID": 18, "context": "We provide a case study in which we transform the Recursive Neural Tensor Network of [19] into a pseudo-ensemble, which significantly improves its performance on a real-world sentiment analysis benchmark.", "startOffset": 85, "endOffset": 89}, {"referenceID": 18, "context": "6 presents a case study in which we extend the Recursive Neural Tensor Network from [19] by converting it into a pseudo-ensemble.", "startOffset": 84, "endOffset": 88}, {"referenceID": 8, "context": "Dropout [9] provides the clearest existing example of a pseudo-ensemble.", "startOffset": 8, "endOffset": 11}, {"referenceID": 16, "context": "For example, [17] develops a method for learning \u201cordered representations\u201d by applying dropout/masking noise in a deep autoencoder while enforcing a particular \u201cnested\u201d structure among the random masking variables in \u03be, and [2] relies heavily on random perturbations when training Generative Stochastic Networks.", "startOffset": 13, "endOffset": 17}, {"referenceID": 1, "context": "For example, [17] develops a method for learning \u201cordered representations\u201d by applying dropout/masking noise in a deep autoencoder while enforcing a particular \u201cnested\u201d structure among the random masking variables in \u03be, and [2] relies heavily on random perturbations when training Generative Stochastic Networks.", "startOffset": 224, "endOffset": 227}, {"referenceID": 7, "context": "By optimizing the expected loss of individual ensemble members\u2019 outputs, rather than the expected loss of the joint ensemble output, pseudo-ensembles differ from boosting, which iteratively augments an ensemble to minimize the loss of the joint output [8].", "startOffset": 252, "endOffset": 255}, {"referenceID": 7, "context": "This distinguishes pseudo-ensembles from traditional \u201cindependent member\u201d ensemble methods, like bagging and random forests, which typically prefer diversity in the behavior of their members, as this provides bias and variance reduction when the outputs of their members are averaged [8].", "startOffset": 284, "endOffset": 287}, {"referenceID": 17, "context": "For example, the optimization community has produced a large body of theoretical and empirical work addressing \u201cstochastic programming\u201d [18] and \u201crobust optimization\u201d [4].", "startOffset": 136, "endOffset": 140}, {"referenceID": 3, "context": "For example, the optimization community has produced a large body of theoretical and empirical work addressing \u201cstochastic programming\u201d [18] and \u201crobust optimization\u201d [4].", "startOffset": 167, "endOffset": 170}, {"referenceID": 23, "context": "For example, [24] shows that using Lasso (i.", "startOffset": 13, "endOffset": 17}, {"referenceID": 24, "context": "[25] shows that learning a standard SVM (i.", "startOffset": 0, "endOffset": 4}, {"referenceID": 24, "context": "Supporting the notion that noise-robustness improves generalization, [25] prove many of the statistical guarantees that make SVMs so appealing directly from properties of their robust optimization equivalents, rather than using more complicated proofs involving, e.", "startOffset": 69, "endOffset": 73}, {"referenceID": 4, "context": "[5] shows how to efficiently learn a linear model that (globally) optimizes expected performance w.", "startOffset": 0, "endOffset": 3}, {"referenceID": 20, "context": "Particularly relevant to our work is [21], which studies dropout (applied to linear models) closely, and shows how its effects are well-approximated by a Tikhonov (i.", "startOffset": 37, "endOffset": 41}, {"referenceID": 20, "context": "The authors of [21] leveraged this label-agnosticism to achieve state-of-the-art performance on several sentiment analysis tasks.", "startOffset": 15, "endOffset": 19}, {"referenceID": 0, "context": "This approximation holds reasonably well for many useful neural network architectures [1, 22].", "startOffset": 86, "endOffset": 93}, {"referenceID": 21, "context": "This approximation holds reasonably well for many useful neural network architectures [1, 22].", "startOffset": 86, "endOffset": 93}, {"referenceID": 8, "context": "One of the original motivations for dropout was that it helps prevent \u201cfeature co-adaptation\u201d [9].", "startOffset": 94, "endOffset": 97}, {"referenceID": 21, "context": "Also, by acting strictly to make the output of the parent model more robust to \u03be-perturbation, the performance of this regularizer rebuts the claim in [22] that noise-robustness plays only a minor role in the success of standard dropout.", "startOffset": 151, "endOffset": 155}, {"referenceID": 20, "context": "The authors of [21] show that, assuming a noise process \u03be such that E\u03be[f(x; \u03be)] = f(x), logistic regression under the influence of dropout optimizes the following objective:", "startOffset": 15, "endOffset": 19}, {"referenceID": 6, "context": "Thus, V combines the KL-divergence penalty with an entropy penalty, which has been shown to perform well in a semi-supervised setting [7, 14].", "startOffset": 134, "endOffset": 141}, {"referenceID": 13, "context": "Thus, V combines the KL-divergence penalty with an entropy penalty, which has been shown to perform well in a semi-supervised setting [7, 14].", "startOffset": 134, "endOffset": 141}, {"referenceID": 12, "context": "We tested PEA regularization in three scenarios: supervised learning on MNIST digits, semi-supervised learning on MNIST digits, and semi-supervised transfer learning on a dataset from the NIPS 2011 Workshop on Challenges in Learning Hierarchical Models [13].", "startOffset": 253, "endOffset": 257}, {"referenceID": 2, "context": "Full implementations of our methods, written with THEANO [3], and scripts/instructions for reproducing all of the results in this section are available online at: http://github.", "startOffset": 57, "endOffset": 60}, {"referenceID": 8, "context": "For the supervised tests we used SGD hyperparameters roughly following those in [9].", "startOffset": 80, "endOffset": 83}, {"referenceID": 22, "context": "We tested semi-supervised learning on MNIST following the protocol described in [23].", "startOffset": 80, "endOffset": 84}, {"referenceID": 19, "context": "We tested PEA regularization with and without denoising autoencoder pre-training [20]4.", "startOffset": 81, "endOffset": 85}, {"referenceID": 19, "context": "The top row of filter blocks in (a) were the result of training a fixed network architecture on 600 labeled samples using: weight norm constraints only (RAW), standard dropout (SDE), standard dropout with PEA regularization on unlabeled data (PEA), and PEA preceded by pre-training as a denoising autoencoder [20] (PEA+PT).", "startOffset": 309, "endOffset": 313}, {"referenceID": 6, "context": "In the latter case, we gradually increased the \u03bbi over the course of training, as suggested by [7].", "startOffset": 95, "endOffset": 98}, {"referenceID": 22, "context": "E-NN (EmbedNN from [23]) uses a nearest-neighbors-based graph Laplacian regularizer to make predictions \u201csmooth\u201d with respect to the manifold underlying the data distribution px.", "startOffset": 19, "endOffset": 23}, {"referenceID": 15, "context": "MTC+ (the Manifold Tangent Classifier from [16]) regularizes predictions to be smooth with respect to the data manifold by penalizing gradients in a learned approximation of the tangent space of the data manifold.", "startOffset": 43, "endOffset": 47}, {"referenceID": 13, "context": "PL+ (the PseudoLabel method from [14]) uses the joint-ensemble predictions on unlabeled data as \u201cpseudo-labels\u201d, and treats them like \u201ctrue\u201d labels.", "startOffset": 33, "endOffset": 37}, {"referenceID": 22, "context": "From left-to-right the methods are Transductive SVM , neural net, convolutional neural net, EmbedNN [23], Manifold Tangent Classifier [16], Pseudo-Label [14], standard dropout plus fuzzing [9], dropout plus fuzzing with pre-training, PEA, and PEA with pre-training.", "startOffset": 100, "endOffset": 104}, {"referenceID": 15, "context": "From left-to-right the methods are Transductive SVM , neural net, convolutional neural net, EmbedNN [23], Manifold Tangent Classifier [16], Pseudo-Label [14], standard dropout plus fuzzing [9], dropout plus fuzzing with pre-training, PEA, and PEA with pre-training.", "startOffset": 134, "endOffset": 138}, {"referenceID": 13, "context": "From left-to-right the methods are Transductive SVM , neural net, convolutional neural net, EmbedNN [23], Manifold Tangent Classifier [16], Pseudo-Label [14], standard dropout plus fuzzing [9], dropout plus fuzzing with pre-training, PEA, and PEA with pre-training.", "startOffset": 153, "endOffset": 157}, {"referenceID": 8, "context": "From left-to-right the methods are Transductive SVM , neural net, convolutional neural net, EmbedNN [23], Manifold Tangent Classifier [16], Pseudo-Label [14], standard dropout plus fuzzing [9], dropout plus fuzzing with pre-training, PEA, and PEA with pre-training.", "startOffset": 189, "endOffset": 192}, {"referenceID": 19, "context": "Methods with a \u201c+\u201d used contractive or denoising autoencoder pre-training [20].", "startOffset": 74, "endOffset": 78}, {"referenceID": 22, "context": "The testing protocol and the results left of MTC+ were presented in [23].", "startOffset": 68, "endOffset": 72}, {"referenceID": 12, "context": "The organizers of the NIPS 2011 Workshop on Challenges in Learning Hierarchical Models [13] proposed a challenge to improve performance on a target domain by using labeled and unlabeled", "startOffset": 87, "endOffset": 91}, {"referenceID": 10, "context": "The labeled data source was CIFAR-100 [11], which contains 50k 32x32 color images in 100 classes.", "startOffset": 38, "endOffset": 42}, {"referenceID": 10, "context": "The unlabeled data source was a collection of 100k 32x32 color images taken from Tiny Images [11].", "startOffset": 93, "endOffset": 97}, {"referenceID": 5, "context": "The winner of this challenge used convolutional Spike and Slab Sparse Coding, followed by max pooling and a linear SVM on the pooled features [6].", "startOffset": 142, "endOffset": 145}, {"referenceID": 18, "context": "We now show how the Recursive Neural Tensor Network (RNTN) from [19] can be adapted using pseudo-ensembles, and evaluate it on the Stanford Sentiment Treebank (STB) task.", "startOffset": 64, "endOffset": 68}, {"referenceID": 14, "context": "In the case of recursive/recurrent neural networks this may prove quite useful, as convolving the objective with a Gaussian reduces its curvature, thereby mitigating some problems stemming from ill-conditioned Hessians [15].", "startOffset": 219, "endOffset": 223}, {"referenceID": 18, "context": "RNTN is the original \u201cfull\u201d model presented in [19].", "startOffset": 47, "endOffset": 51}, {"referenceID": 11, "context": "PV is the Paragraph Vector model in [12] and DCNN is the Dynamic Convolutional Neural Network model in [10].", "startOffset": 36, "endOffset": 40}, {"referenceID": 9, "context": "PV is the Paragraph Vector model in [12] and DCNN is the Dynamic Convolutional Neural Network model in [10].", "startOffset": 103, "endOffset": 107}, {"referenceID": 18, "context": "Following the protocol suggested by [19], we measured root-level (i.", "startOffset": 36, "endOffset": 40}, {"referenceID": 18, "context": "Using only `2 regularization on its parameters, our compact RNTN approached the performance of the full RNTN, roughly matching the performance of the second best method tested in [19].", "startOffset": 179, "endOffset": 183}, {"referenceID": 8, "context": "We proposed the notion of a pseudo-ensemble, which captures methods such as dropout [9] and feature noising in linear models [5, 21] that have recently drawn significant attention.", "startOffset": 84, "endOffset": 87}, {"referenceID": 4, "context": "We proposed the notion of a pseudo-ensemble, which captures methods such as dropout [9] and feature noising in linear models [5, 21] that have recently drawn significant attention.", "startOffset": 125, "endOffset": 132}, {"referenceID": 20, "context": "We proposed the notion of a pseudo-ensemble, which captures methods such as dropout [9] and feature noising in linear models [5, 21] that have recently drawn significant attention.", "startOffset": 125, "endOffset": 132}], "year": 2014, "abstractText": "We formalize the notion of a pseudo-ensemble, a (possibly infinite) collection of child models spawned from a parent model by perturbing it according to some noise process. E.g., dropout [9] in a deep neural network trains a pseudo-ensemble of child subnetworks generated by randomly masking nodes in the parent network. We examine the relationship of pseudo-ensembles, which involve perturbation in model-space, to standard ensemble methods and existing notions of robustness, which focus on perturbation in observation-space. We present a novel regularizer based on making the behavior of a pseudo-ensemble robust with respect to the noise process generating it. In the fully-supervised setting, our regularizer matches the performance of dropout. But, unlike dropout, our regularizer naturally extends to the semi-supervised setting, where it produces state-of-the-art results. We provide a case study in which we transform the Recursive Neural Tensor Network of [19] into a pseudo-ensemble, which significantly improves its performance on a real-world sentiment analysis benchmark.", "creator": "LaTeX with hyperref package"}}}