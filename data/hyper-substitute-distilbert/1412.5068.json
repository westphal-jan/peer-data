{"id": "1412.5068", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "11-Dec-2014", "title": "Towards Deep Neural Network Architectures Robust to Adversarial Examples", "abstract": "embedded computing tools shown deep orthogonal networks ( nas ) to accumulate highly vulnerable to well - balancing, small reductions at the coding layer, like component - associated adversarial faults. reading images as an incident, their distortions are partially imperceptible, resulting can result on 100 % pro - interpretations below a state of excellent neural design. we critique cellular structure of adversarial examples and explore topological topology, pre - analyses and training efforts to improve the effects of interactions. players perform standardized experiments to highlight the removability of adversarial examples involving coordinating analog additional functions and pre - processing with maintenance tools ( daes ). we find subtle daes properties remove surprising numbers of naive adversarial noise. often - ever, thus stacking analog output with the original dnn, the next network can again load installed involving new circuit examples with even smaller distortion. as the solution, many see deep contractive coding, a scheme needing a new end - to - climax reactive component therefore increases a smoothness penalty determined by naive contractive autoencoder ( cae ). implementations minimize numerical efficiency variance amongst adversarial meta - ples, and a significant performance risk.", "histories": [["v1", "Thu, 11 Dec 2014 23:03:49 GMT  (446kb)", "http://arxiv.org/abs/1412.5068v1", null], ["v2", "Wed, 17 Dec 2014 16:35:05 GMT  (390kb)", "http://arxiv.org/abs/1412.5068v2", null], ["v3", "Tue, 30 Dec 2014 14:14:24 GMT  (414kb)", "http://arxiv.org/abs/1412.5068v3", null], ["v4", "Thu, 9 Apr 2015 21:43:29 GMT  (414kb)", "http://arxiv.org/abs/1412.5068v4", null]], "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.NE", "authors": ["shixiang gu", "luca rigazio"], "accepted": true, "id": "1412.5068"}, "pdf": {"name": "1412.5068.pdf", "metadata": {"source": "CRF", "title": "Towards Deep Neural Network Architectures Robust to Adversarial Examples", "authors": ["Shixiang Gu"], "emails": ["shane.gu@us.panasonic.com", "luca.rigazio@us.panasonic.com"], "sections": [{"heading": null, "text": "ar X\niv :1\n41 2.\n50 68\nv1 [\ncs .L\nG ]\n1 1\nD ec"}, {"heading": "1 Introduction", "text": "Deep neural networks have recently led to significant improvement in countless areas of machine learning, from speech recognition to computer vision Krizhevsky et al. (2012); Dahl et al. (2012); Taigman et al. (2013); Zhang et al. (2013). DNNs achieve high performance because deep cascades of nonlinear units allow to generalize non-locally, in data-specific manifolds Bengio (2009). While this ability to automatically learn non-local generalization priors from data is a strength of DNNs, it also creates counter-intuitive properties. In particular Szegedy et al. (2014b) showed in their seminal paper that one can engineer small perturbations to the input data, called adversarial examples, that make an otherwise high-performing DNN misclassify every example. For image datasets, such perturbations are often imperceptible to the human eye, thus creating potential vulnerabilities when deploying neural networks in real environments. As an example, one could envision situations where an attacker having knowledge of the DNN parameters could use adversarial examples to attack the system and make it fail consistently. Even worse, due to the cross-model, cross-dataset generalization properties of the adversarial examples Szegedy et al. (2014b) , the attacker might generate adversarial examples from independent models without full knowledge of the system and still be able to conduct a highly successful attack. This indicates there is still a significant robustness gap between machine and human perception, despite recent results showing machine vision performance closing in on human performance Taigman et al. (2013). More formally, the challenge is: can we design and train a deep network that not only generalizes in abstract manifold space to achieve good recognition accuracy, but also retains local generalization in the input space?\nAccepted at the NIPS, Deep Learning and Representation Learning Workshop, Montreal, Canada, 2014.\nA main result from Szegedy et al. (2014b) is that the smoothness assumption that underlies many kernel methods such as Support Vector Machines (SVMs) does not hold for deep neural networks trained through backpropagation. This points to a possible inherent instability in all deterministic, feed-forward neural network architectures. In practice, SVMs can be used to replace the final softmax layer in classifier neural networks leading to better generalization Tang (2013), but applying SVM in the manifold space does not guarantee local generalization in the input space. Recently, Duvenand et al. (2014) categorize distributions of deep neural networks through deep Gaussian Process (GP) and show that in stacked architectures, the capacity of the network captures fewer degrees of freedom as the layers increase. They propose to circumvent this by connecting inputs to every layer of the network. Without this trick, the input locality is hardly preserved in higher layers due to the complexity of nonlinear mapping cascades.\nA framework leveraging both approaches is Random Recursive SVM (R2SVM) Vinyals et al. (2012), which recursively solves a SVM whose input combines input data and outputs from the previous SVM layer, randomly projected to the same dimension as the input data. R2SVM avoids solving nonconvex optimization by recursively solving a SVM and demonstrates generalization on small datasets. However, performance is suboptimal compared to state-of-the-art DNNs, possibly due to lack of end-to-end training Vinyals et al. (2012); Tang (2013). Another work inspired by the recursive nature of the human perceptual system is Deep Attention Selective Network (dasNet) Stollenga et al. (2014), which dynamically fine-tunes the weight of each convolutional filter at recognition time. We speculate that the robustness of human perception is due to complex hierarchies and recursions in the wirings of the human brain Felleman and Van Essen (1991); Douglas et al. (1995), since recursions provide multiple paths to input data and could retain locality information at multiple levels of representation. Such an intuition is also partially supported by the recent state-ofthe-art models for object classification and detection involving multi-scale processing Szegedy et al. (2014a). Since modeling such recursions in DNNs is notoriously hard and often relies on additional techniques such as reinforcement learning Stollenga et al. (2014); Mnih et al. (2014), we will at first investigate explicit inclusion of input generalization as an additional objective for the standard DNN training process.\nIt is important to note that the adversarial examples are universal and unavoidable by their definition: one could always engineer an additive noise at input to make the model misclassify an example, and it is also a problem in shallow models such as logistic regression Szegedy et al. (2014b). The question is how much noise is needed to make the model misclassify an otherwise correct example. Thus, solving the adversarial examples problem is equivalent to increasing the noticeability of the smallest adversarial noise for each example.\nIn this paper we investigate new training procedures such that the adversarial examples generated based on Szegedy et al. (2014b) have higher distortion, where distortion is measured by 1 n \u2211 (x\u2032i \u2212 xi)\n2 where x\u2032, x \u2208 Rn are the adversarial data and original data respectively. First, we investigate the structure of the adversarial examples, and show that contrary to their small distortion it is difficult to recover classification performance through additional perturbations, such as Gaussian additive noises and Gaussian blur. This suggests the size of \u201cblind-spots\u201d are in fact relatively large, in input space volume, and locally continuous. We also show that adversarial examples are quite similar Szegedy et al. (2014b), and an autoencoder (AE) trained to denoise adversarial examples from one network generalizes well to denoise adversarials generated from different architectures. However, we also found that the AE and the classifier DNN can be stacked and the resulting network can again be attacked by creating new, adversarial examples of even smaller distortion. Because of this, we conclude that ideal architectures should be trained end-to-end and incorporate input invariance with respect to the final network output. We find that ideas from denoising autoencoder (DAE), contractive autoencoder (CAE), and most recently marginalized denoising autoencoder (mDAE) provide strong framework for training neural networks that are robust against adversarial noises Rifai et al. (2011b); Alain and Bengio (2012); Chen et al. (2014). We propose Deep Contractive Networks (DCNs), which incorporate a layer-wise contractive penalty, and show that adversarials generated from such networks have significantly higher distortion. We believe our initial results could serve as the basis for training more robust neural networks that can only be misdirected by a substantial noise, in a way that is more attuned to how human perception performs."}, {"heading": "2 Framework", "text": ""}, {"heading": "2.1 Generating Adversarial Examples", "text": "We follow the procedure outlined in Szegedy et al. (2014b) for generating adversarial examples from the classifier neural network, with a slight modification for computational efficiency. Using the same notation, we denote the classifier by f : Rm \u2212\u2192 {1...k} and its associated continuous loss function by L : Rm \u00d7 {1...k} \u2212\u2192 R+. Then, for a given image x \u2208 Rm, whose m pixels normalized to [0, 1], and target label l \u2208 {1...k}, the minimal adversarial noise r is approximated by optimizing the following problem, given c > 0 and subject to x+ r \u2208 [0, 1]m:\nminr c|r|2 + L(x+ r, l) (1)\nInstead of finding the minimum c through line-search per example, we use constant c during evaluation of a given dataset and model architecture. We find c such that for a sufficiently large subset of data of size n, \u2211n\u22121 i=0 \u2016 ri \u20162 is minimized, subject to the constraint that the mean prediction error rate of f(xi + ri) is greater than e. e is chosen as 99% throughout the experiments. Since we are interested in macro-scale evaluation of adversarial examples per dataset and model, we find this setting sufficiently simplifies and speeds up the procedure while allowing quantitative analysis of the results."}, {"heading": "2.2 Datasets and Model Architectures", "text": "We perform our experiements on the MNIST dataset, using a number of architectures LeCun and Cortes (1998); Krizhevsky and Hinton (2009). Table 1 summarizes experimental settings, baseline error rate, adversarial examples\u2019 error rate and average adversarial distortion. L2 weight decay is applied with \u03bb = 10\u22123, except in convolutional layers. For MNIST ConvNet has two convolutional layers, one fully-connected layer, and one softmax layer."}, {"heading": "3 Recovering from Adversarial Examples", "text": "In order to gain insight into the properties of adversarial noises, we explore three pre-processing methods aiming at recovering from adversarial noise, as presented in the following sections."}, {"heading": "3.1 Noise Injection", "text": "Given the tiny nature of adversarial noise, we investigate a recovery strategy based on additional corruptions, in the hope that we can move the input outside the network \u201cblind-spots\u201d, which we initially assumed to be small and localized. We experiment with additive Gaussian noise and Gaussian blurring. For Gaussian noise we averaged predictions over 20 feed-forward runs to reduce the prediction variance. Results for Gaussian additive noises are summarized in Figure 1. It shows the and the trade-off between the adversarial examples recovered and the clean examples misclassified as one varies the amount of additive noises, which are added to only input layer or the input plus all the hidden layers. Results for Gaussian blurring are summarized in Table 2. For Gaussian additive noises, \u201cL1\u201d refers to the noise applied at input layer; \u201cL*\u201d refers to the noise applied at input layer plus all hidden layers. Gaussian blurring is only applied at input layer.\nThe results show that convolution seems to help with recovering from the adversarial examples. For example, for ConvNet model, applying Gaussian blur kernel of size 11 to all input data can recover more than 50% of adversarial examples, at the expense of 3% increase in the test error on\nclean data (Table 2). In addition, for ConvNet model, adding Gaussian noise of \u03c3 = 0.1 at input layer plus hidden layers allow the model to recover more than 35% at similar small loss in model performance on clean data (Figure 1). However, neither Gaussian additive noises or blurring is effective in removing enough noise such that its error on adversarial examples could match that of the error on clean data."}, {"heading": "3.2 Autoencoder", "text": "To assess the structure of the adversarial noise, we trained a three-hidden-layer autoencoder (784- 256-128-256-784 neurons) on mapping adversarial examples back to the original data samples. An important detail is that we also train the model to map original training data back to itself, so that the autoencoder preserves the original data if the non-adversarial data samples are fed in; this allows us to stack several autoencoders. We train the autoencoder using adversarial examples from the training set only, and test generalization capabilities on adversarial examples from the test set across different model topologies. Table 3 shows generalization performance of autoencoders trained on adversarial examples from different models. Columns indicate whose adversarial data the autoencoder is trained on, rows indicate whose adversarial test data the autoencoder is used to denoise. Entries correspond to error rates when the outputs from the autoencoder is fed into the model identified by the row labels. We observe that autoencoders generalize very well on adversarial examples from different models. All autoencoders are able to recover at least 90% of adversarial errors, regardless of the model from which it originates.\nWhile this is a very successful experiment, we found one drawback: the autoencoder and its corresponding classifier can be stacked to form a new feed-forward neural network, then adversarial examples can again generated from this stacked network. The last row in Table 3 and Figure 2 show such stacked network adversarial examples to have a significantly smaller distortion than adversarial examples from the original classifier network, suggesting that while the autoencoder effectively recovers the from the weaknesses of the original classifier network, the stacked network is then even more susceptible to adversarial noises. One possible explanation is that since the autoencoder is trained without the knowledge of the classification objective, it has more \u201cblind-spots\u201d with re-\nspect to that final objective. This again confirms the necessity of end-to-end training in deep neural networks."}, {"heading": "3.3 Denoising Autoencoder", "text": "In this section, a standard denoising autoencoder (DAE) is trained, without the knowledge of the adversarial noise distribution. A DAE maps corrupted input data to clean input data. At each training batch, each pixel in the input data is corrupted by adding independent Gaussian noise with 0 mean and \u03c3 standard deviation. Table 4 summarizes the results indicating that a standard denoising autoencoder can still recover a significant portion of the adversarial noises. In particular, a denoising auto-encoder with \u03c3 = 0.1 Gaussian noise could denoise adversarial examples almost as well as an autoencoder trained on actual adversarials noises, as shown in Table 3. However, this model also suffers the same deficiency as in Section 3.2, that a stacked network is more susceptible to adversarials. In this case, this deficiency likely arises due to imperfect training of DAE itself."}, {"heading": "3.4 Discussion", "text": "Our experiments have shown that the adversarial noise is fairly robust against local perturbations such as additive Gaussian noise, suggesting that the size of \u201cblind-spots\u201d is relatively large. In the image data case, the effect of adversarial examples can be significantly reduced by low-pass filtering, such as Gaussian blurring, suggesting that adversarial noise mostly resides in high-frequency domain. Moreover, the success of the autoencoder and the denoising autoencoder experiment shows adversarial noise to have simple structure that is easily exploitable.\nA key observation about the adversarial examples is that they are unavoidable and intrinsic property of any feed-forward architecture. For any pre-processing, it is always possible to backpropagate the error signal through the additional functions and find new adversarial examples, not only for deterministic pre-processing steps such as Gaussian blurring and autoencoders. Surprisingly, our experiments show that the distortion of adversarials from stacked network is even lower than the\ndistortion of adversarials from the original classifier network. Furthermore, Table 4 also hints that even a simple Gaussian additive noise, often used in data augmentation, effectively creates flat, invariant regions around the input data points. Based on these results and observations, we thus postulate that solving the adversarial problem should correspond to finding new training procedures and objective functions so as increase the distortion of the smallest adversarial examples. Therefore, in Section 4, we formulate a new model that could propagate the input invariance toward the final network outputs and be trained in end-to-end."}, {"heading": "4 Deep Contractive Network", "text": "In this section, we formulate Deep Contractive Network, which imposes a layer-wise contractive penalty in a feed-forward neural network. The layer-wise penalty approximately minimizes the network outputs variance with respect to perturbations in the inputs, enabling the trained model to achieve \u201cflatness\u201d around the training data points."}, {"heading": "4.1 Contractive autoencoder", "text": "Contractive autoencoder (CAE) is a variant of an autoencoder (AE) with an additional penalty for minimizing the squared norm of the Jacobian of the hidden representation with respect to input data Rifai et al. (2011b). A standard AE consists of an encoder and a decoder. The encoder maps input data to the hidden representation, and the decoder attempts to reconstruct the input from the hidden representation. Formally, given input x \u2208 Rdx and hidden representation h \u2208 Rdh , the encoder parametrized by dh\u00d7dx matrix We and bias vector bh \u2208 Rdh and the decoder parametrized by dx \u00d7 dh matrix Wd and bias vector by \u2208 Rdh , the output y \u2208 Rdx is given by:\ny = \u03c3d(Wdh+ by) = \u03c3d(Wd\u03c3e(Wex+ bh) + by) (2)\nwhere \u03c3e and \u03c3d are non-linear activation functions for the encoder and decoder respectively. Given m training data points, the AE is trained by finding the model parameters \u03b8 = {We,Wd, bh, by} that minimize the following objective function:\nJAE(\u03b8) = m\u2211\ni=1\nL(x(i), y(i)) (3)\nFor CAE, the objective function has an additional term:\nJCAE(\u03b8) =\nm\u2211\ni=1\n(L(x(i), y(i)) + \u03bb \u2016 \u2202h(i)\n\u2202x(i) \u20162) (4)\n\u03bb is a scaling factor that trades off reconstruction objective with contractive objective. \u2016 \u2202h (i)\n\u2202x(i) \u20162 is\nthe Frobenius norm of the Jacobian matrix of h(i) with respect to x(i)."}, {"heading": "4.2 Deep Contractive Networks", "text": "A Deep Contractive Network (DCN) is a generalization of the contractive autoencoder (CAE) to a feed-forward neural network that outputs y \u2208 Rdy with a target t \u2208 Rdy . For a network with H hidden layers, let fi denote the function for computing hidden representation hi \u2208 Rdhi at hidden layer i: hi = fi(hi\u22121), i = 1...H + 1, h0 = x and hH+1 = y. Ideally, the model should penalize the following objective:\nJDCN (\u03b8) = m\u2211\ni=1\n(L(t(i), y(i)) + \u03bb \u2016 \u2202y(i)\n\u2202x(i) \u20162) (5)\nHowever, such a penalty is computationally expensive for calculating partial derivatives at each layer in the standard back-propagation framework. Therefore, a simplification is made by approximating the objective with the following:\nJDCN(\u03b8) =\nm\u2211\ni=1\n(L(t(i), y(i)) +\nH+1\u2211\nj=1\n\u03bbj \u2016 \u2202h\n(i) j\n\u2202h (i) j\u22121\n\u20162) (6)\nThis layer-wise contractive penalty enables partial derivatives to be computed in the same way as in a contractive autoencoder, and is easily incorporated into the backpropagation procedure. This objective does not guarantee global optimality for the solution to Eq. 5, and also limits the capacity of the neural network. However, it is a computationally efficient way to greedily propagate input invariance through a deep network.\nNote that for a neural network with additive Gaussian noise N (0, \u03c32I) added to input during the training, if we let \u03c3 \u2192 0, the training objective is equivalent to Eq. 5 Alain and Bengio (2012). However, such stochastic penalties require many passes of data to train the model effectively. For efficiency, we decided to employ a deterministic penalty instead Rifai et al. (2011b); Alain and Bengio (2012); Chen et al. (2014)."}, {"heading": "4.3 Experiments and results", "text": "The experiments involve applying a contractive penalty to the models in Table 1. The models were trained until they achieved nearly the same accuracy as the original models which lacked a contractive penalty. The adversarial examples are generated following the method defined in Section 2.1.\nTable 5 shows that the contractive penalty successfully increases the minimum distortion of the adversarial noises. Table 6 shows the comparison of the Deep Contractive Network penalty against stochastic noise addition. Deep Contractive Networks are more robust than a standard neural network trained with Gaussian input noise, and can be easily augmented by adding Gaussian input noise to further increase the minimum distortion of adversarial noises."}, {"heading": "4.4 Discussions and future work", "text": "Results show that Deep Contractive Networks can successfully be trained to propagate contractivity around the input data through the deep architecture, without significant loss in final accuracies. The model can be improved by augmenting the layer-wise contractive penalty based on Higher-Order Contractive autoencoders Rifai et al. (2011a), and marginalized Denoising autoencoders Chen et al.\n(2014). While in this paper, Deep Contractive Networks are used as a framework for alleviating effects due to the adversarial examples, they also provide a suitable framework for probing the invariance properties learnt by deep neural networks. A further study should be conducted to evaluate the performance loss due to layer-wise penalties as opposed to global contractive objectives as defined in Eq. 5. In addition, exploring non-Euclidean adversarial examples, e.g. small affine transformation on images, and varying contractivity at higher layers of the network could lead to insights into semantic attributes of features learned at high levels of representation. For example, explicitly learning instantiation parameters as previously attempted by models such as Transforming Autoencoder Hinton et al. (2011).\nOur work also bridges supervised learning with unsupervised representation learning, by introducing the penalty from DAE and CAE to standard DNN. Such penalty not only acts as practical regularizers, but also is a highly efficient way to learn obvious information from the training data, such as local generalization in the input space. Recent progress in deep neural networks is driven by both end-to-end supervised training and various modes of unsupervised feature learning Krizhevsky et al. (2012); Bengio (2009), and thus we believe the merge of the two could likely enable new milestones in the field."}, {"heading": "5 Conclusions", "text": "We tested several denoising architectures to reduce the effects of the adversarial examples, and conclude that while the simple and stable structure of adversarial examples makes them easy to remove with autoencoders, the resulting stacked network is even more sensitive to new adversarial examples. We conclude that neural network\u2019s sensitivity to adversarial examples is more related to intrinsic deficiencies in the training procedure and objective function than to model topology. The crux of the problem is then to come up with an appropriate training procedure and objective function that can efficiently make the network learn flat, invariant regions around the training data. We propose Deep Contractive Networks to explicitly learn invariant features at each layer and show some positive initial results."}, {"heading": "Acknowledgments", "text": "The authors thank Nitish Srivastava for releasing his DeepNet Library, and Volodymyr Mnih for his CUDAMat Library Mnih (2009)."}], "references": [{"title": "What regularized auto-encoders learn from the data", "author": ["G. Alain", "Y. Bengio"], "venue": null, "citeRegEx": "Alain and Bengio,? \\Q2012\\E", "shortCiteRegEx": "Alain and Bengio", "year": 2012}, {"title": "Marginalized denoising auto-encoders for nonlinear representations", "author": ["M. Chen", "K. Weinberger", "F. Sha", "Y. Bengio"], "venue": "JMLR, 32(1):1476\u20131484.", "citeRegEx": "Chen et al\\.,? 2014", "shortCiteRegEx": "Chen et al\\.", "year": 2014}, {"title": "Context-dependent pre-trained deep neural networks for large-vocabulary speech recognition", "author": ["G.E. Dahl", "D. Yu", "L. Deng", "A. Acero"], "venue": "Audio, Speech, and Language Processing, IEEE Transactions on, 20(1):30\u201342.", "citeRegEx": "Dahl et al\\.,? 2012", "shortCiteRegEx": "Dahl et al\\.", "year": 2012}, {"title": "Recurrent excitation in neocortical circuits", "author": ["R.J. Douglas", "C. Koch", "M. Mahowald", "K. Martin", "H.H. Suarez"], "venue": "Science, 269(5226):981\u2013985.", "citeRegEx": "Douglas et al\\.,? 1995", "shortCiteRegEx": "Douglas et al\\.", "year": 1995}, {"title": "Avoiding pathologies in very deep networks", "author": ["D. Duvenand", "O. Rippel", "R.P. Adams", "Z. Ghahramani"], "venue": "arXiv preprint arXiv:1402.5836.", "citeRegEx": "Duvenand et al\\.,? 2014", "shortCiteRegEx": "Duvenand et al\\.", "year": 2014}, {"title": "Distributed hierarchical processing in the primate cerebral cortex", "author": ["D.J. Felleman", "D.C. Van Essen"], "venue": "Cerebral cortex, 1(1):1\u201347.", "citeRegEx": "Felleman and Essen,? 1991", "shortCiteRegEx": "Felleman and Essen", "year": 1991}, {"title": "Transforming auto-encoders", "author": ["G.E. Hinton", "A. Krizhevsky", "S.D. Wang"], "venue": "Artificial Neural Networks and Machine Learning\u2013ICANN 2011, pages 44\u201351. Springer.", "citeRegEx": "Hinton et al\\.,? 2011", "shortCiteRegEx": "Hinton et al\\.", "year": 2011}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky", "G. Hinton"], "venue": "Computer Science Department, University of Toronto, Tech. Rep.", "citeRegEx": "Krizhevsky and Hinton,? 2009", "shortCiteRegEx": "Krizhevsky and Hinton", "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "NIPS, volume 1, page 4.", "citeRegEx": "Krizhevsky et al\\.,? 2012", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "The mnist database of handwritten digits", "author": ["Y. LeCun", "C. Cortes"], "venue": null, "citeRegEx": "LeCun and Cortes,? \\Q1998\\E", "shortCiteRegEx": "LeCun and Cortes", "year": 1998}, {"title": "Cudamat: a cuda-based matrix class for python", "author": ["V. Mnih"], "venue": "Department of Computer Science, University of Toronto, Tech. Rep. UTML TR, 4.", "citeRegEx": "Mnih,? 2009", "shortCiteRegEx": "Mnih", "year": 2009}, {"title": "Recurrent models of visual attention", "author": ["V. Mnih", "N. Heess", "A. Graves", "K. Kavukcuoglu"], "venue": "CoRR, abs/1406.6247.", "citeRegEx": "Mnih et al\\.,? 2014", "shortCiteRegEx": "Mnih et al\\.", "year": 2014}, {"title": "Higher order contractive auto-encoder", "author": ["S. Rifai", "G. Mesnil", "P. Vincent", "X. Muller", "Y. Bengio", "Y. Dauphin", "X. Glorot"], "venue": "Machine Learning and Knowledge Discovery in Databases, pages 645\u2013660. Springer.", "citeRegEx": "Rifai et al\\.,? 2011a", "shortCiteRegEx": "Rifai et al\\.", "year": 2011}, {"title": "Contractive auto-encoders: Explicit invariance during feature extraction", "author": ["S. Rifai", "P. Vincent", "X. Muller", "X. Glorot", "Y. Bengio"], "venue": "Proceedings of the 28th International Conference on Machine Learning (ICML-11), pages 833\u2013840.", "citeRegEx": "Rifai et al\\.,? 2011b", "shortCiteRegEx": "Rifai et al\\.", "year": 2011}, {"title": "Deep networks with internal selective attention through feedback connections", "author": ["M. Stollenga", "J. Masci", "F. Gomez", "J. Schmidhuber"], "venue": "arXiv preprint arXiv:1407.3068.", "citeRegEx": "Stollenga et al\\.,? 2014", "shortCiteRegEx": "Stollenga et al\\.", "year": 2014}, {"title": "Going deeper with convolutions", "author": ["C. Szegedy", "W. Liu", "Y. Jia", "P. Sermanet", "S. Reed", "D. Anguelov", "D. Erhan", "V. Vanhoucke", "A. Rabinovich"], "venue": "arXiv preprint arXiv:1409.4842.", "citeRegEx": "Szegedy et al\\.,? 2014a", "shortCiteRegEx": "Szegedy et al\\.", "year": 2014}, {"title": "Intriguing properties of neural networks", "author": ["C. Szegedy", "W. Zaremba", "I. Sutskever", "J. Bruna", "D. Erhan", "I. Goodfellow", "R. Fergus"], "venue": "ICLR.", "citeRegEx": "Szegedy et al\\.,? 2014b", "shortCiteRegEx": "Szegedy et al\\.", "year": 2014}, {"title": "Deepface: Closing the gap to human-level performance in face verification", "author": ["Y. Taigman", "M. Yang", "M. Ranzato", "L. Wolf"], "venue": "Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 1701\u20131708.", "citeRegEx": "Taigman et al\\.,? 2013", "shortCiteRegEx": "Taigman et al\\.", "year": 2013}, {"title": "Deep learning using support vector machines", "author": ["Y. Tang"], "venue": "arXiv preprint arXiv:1306.0239.", "citeRegEx": "Tang,? 2013", "shortCiteRegEx": "Tang", "year": 2013}, {"title": "Learning with recursive perceptual representations", "author": ["O. Vinyals", "Y. Jia", "L. Deng", "T. Darrell"], "venue": "Advances in Neural Information Processing Systems, pages 2825\u20132833.", "citeRegEx": "Vinyals et al\\.,? 2012", "shortCiteRegEx": "Vinyals et al\\.", "year": 2012}, {"title": "Panda: Pose aligned networks for deep attribute modeling", "author": ["N. Zhang", "M. Paluri", "M. Ranzato", "T. Darrell", "L. Bourdev"], "venue": "arXiv preprint arXiv:1311.5591.", "citeRegEx": "Zhang et al\\.,? 2013", "shortCiteRegEx": "Zhang et al\\.", "year": 2013}], "referenceMentions": [{"referenceID": 7, "context": "Deep neural networks have recently led to significant improvement in countless areas of machine learning, from speech recognition to computer vision Krizhevsky et al. (2012); Dahl et al.", "startOffset": 149, "endOffset": 174}, {"referenceID": 2, "context": "(2012); Dahl et al. (2012); Taigman et al.", "startOffset": 8, "endOffset": 27}, {"referenceID": 2, "context": "(2012); Dahl et al. (2012); Taigman et al. (2013); Zhang et al.", "startOffset": 8, "endOffset": 50}, {"referenceID": 2, "context": "(2012); Dahl et al. (2012); Taigman et al. (2013); Zhang et al. (2013). DNNs achieve high performance because deep cascades of nonlinear units allow to generalize non-locally, in data-specific manifolds Bengio (2009).", "startOffset": 8, "endOffset": 71}, {"referenceID": 2, "context": "(2012); Dahl et al. (2012); Taigman et al. (2013); Zhang et al. (2013). DNNs achieve high performance because deep cascades of nonlinear units allow to generalize non-locally, in data-specific manifolds Bengio (2009). While this ability to automatically learn non-local generalization priors from data is a strength of DNNs, it also creates counter-intuitive properties.", "startOffset": 8, "endOffset": 217}, {"referenceID": 2, "context": "(2012); Dahl et al. (2012); Taigman et al. (2013); Zhang et al. (2013). DNNs achieve high performance because deep cascades of nonlinear units allow to generalize non-locally, in data-specific manifolds Bengio (2009). While this ability to automatically learn non-local generalization priors from data is a strength of DNNs, it also creates counter-intuitive properties. In particular Szegedy et al. (2014b) showed in their seminal paper that one can engineer small perturbations to the input data, called adversarial examples, that make an otherwise high-performing DNN misclassify every example.", "startOffset": 8, "endOffset": 408}, {"referenceID": 2, "context": "(2012); Dahl et al. (2012); Taigman et al. (2013); Zhang et al. (2013). DNNs achieve high performance because deep cascades of nonlinear units allow to generalize non-locally, in data-specific manifolds Bengio (2009). While this ability to automatically learn non-local generalization priors from data is a strength of DNNs, it also creates counter-intuitive properties. In particular Szegedy et al. (2014b) showed in their seminal paper that one can engineer small perturbations to the input data, called adversarial examples, that make an otherwise high-performing DNN misclassify every example. For image datasets, such perturbations are often imperceptible to the human eye, thus creating potential vulnerabilities when deploying neural networks in real environments. As an example, one could envision situations where an attacker having knowledge of the DNN parameters could use adversarial examples to attack the system and make it fail consistently. Even worse, due to the cross-model, cross-dataset generalization properties of the adversarial examples Szegedy et al. (2014b) , the attacker might generate adversarial examples from independent models without full knowledge of the system and still be able to conduct a highly successful attack.", "startOffset": 8, "endOffset": 1084}, {"referenceID": 2, "context": "(2012); Dahl et al. (2012); Taigman et al. (2013); Zhang et al. (2013). DNNs achieve high performance because deep cascades of nonlinear units allow to generalize non-locally, in data-specific manifolds Bengio (2009). While this ability to automatically learn non-local generalization priors from data is a strength of DNNs, it also creates counter-intuitive properties. In particular Szegedy et al. (2014b) showed in their seminal paper that one can engineer small perturbations to the input data, called adversarial examples, that make an otherwise high-performing DNN misclassify every example. For image datasets, such perturbations are often imperceptible to the human eye, thus creating potential vulnerabilities when deploying neural networks in real environments. As an example, one could envision situations where an attacker having knowledge of the DNN parameters could use adversarial examples to attack the system and make it fail consistently. Even worse, due to the cross-model, cross-dataset generalization properties of the adversarial examples Szegedy et al. (2014b) , the attacker might generate adversarial examples from independent models without full knowledge of the system and still be able to conduct a highly successful attack. This indicates there is still a significant robustness gap between machine and human perception, despite recent results showing machine vision performance closing in on human performance Taigman et al. (2013). More formally, the challenge is: can we design and train a deep network that not only generalizes in abstract manifold space to achieve good recognition accuracy, but also retains local generalization in the input space?", "startOffset": 8, "endOffset": 1462}, {"referenceID": 14, "context": "A main result from Szegedy et al. (2014b) is that the smoothness assumption that underlies many kernel methods such as Support Vector Machines (SVMs) does not hold for deep neural networks trained through backpropagation.", "startOffset": 19, "endOffset": 42}, {"referenceID": 14, "context": "A main result from Szegedy et al. (2014b) is that the smoothness assumption that underlies many kernel methods such as Support Vector Machines (SVMs) does not hold for deep neural networks trained through backpropagation. This points to a possible inherent instability in all deterministic, feed-forward neural network architectures. In practice, SVMs can be used to replace the final softmax layer in classifier neural networks leading to better generalization Tang (2013), but applying SVM in the manifold space does not guarantee local generalization in the input space.", "startOffset": 19, "endOffset": 474}, {"referenceID": 4, "context": "Recently, Duvenand et al. (2014) categorize distributions of deep neural networks through deep Gaussian Process (GP) and show that in stacked architectures, the capacity of the network captures fewer degrees of freedom as the layers increase.", "startOffset": 10, "endOffset": 33}, {"referenceID": 12, "context": "A framework leveraging both approaches is Random Recursive SVM (RSVM) Vinyals et al. (2012), which recursively solves a SVM whose input combines input data and outputs from the previous SVM layer, randomly projected to the same dimension as the input data.", "startOffset": 70, "endOffset": 92}, {"referenceID": 12, "context": "A framework leveraging both approaches is Random Recursive SVM (RSVM) Vinyals et al. (2012), which recursively solves a SVM whose input combines input data and outputs from the previous SVM layer, randomly projected to the same dimension as the input data. RSVM avoids solving nonconvex optimization by recursively solving a SVM and demonstrates generalization on small datasets. However, performance is suboptimal compared to state-of-the-art DNNs, possibly due to lack of end-to-end training Vinyals et al. (2012); Tang (2013).", "startOffset": 70, "endOffset": 516}, {"referenceID": 12, "context": "(2012); Tang (2013). Another work inspired by the recursive nature of the human perceptual system is Deep Attention Selective Network (dasNet) Stollenga et al.", "startOffset": 8, "endOffset": 20}, {"referenceID": 11, "context": "Another work inspired by the recursive nature of the human perceptual system is Deep Attention Selective Network (dasNet) Stollenga et al. (2014), which dynamically fine-tunes the weight of each convolutional filter at recognition time.", "startOffset": 122, "endOffset": 146}, {"referenceID": 11, "context": "Another work inspired by the recursive nature of the human perceptual system is Deep Attention Selective Network (dasNet) Stollenga et al. (2014), which dynamically fine-tunes the weight of each convolutional filter at recognition time. We speculate that the robustness of human perception is due to complex hierarchies and recursions in the wirings of the human brain Felleman and Van Essen (1991); Douglas et al.", "startOffset": 122, "endOffset": 399}, {"referenceID": 3, "context": "We speculate that the robustness of human perception is due to complex hierarchies and recursions in the wirings of the human brain Felleman and Van Essen (1991); Douglas et al. (1995), since recursions provide multiple paths to input data and could retain locality information at multiple levels of representation.", "startOffset": 163, "endOffset": 185}, {"referenceID": 3, "context": "We speculate that the robustness of human perception is due to complex hierarchies and recursions in the wirings of the human brain Felleman and Van Essen (1991); Douglas et al. (1995), since recursions provide multiple paths to input data and could retain locality information at multiple levels of representation. Such an intuition is also partially supported by the recent state-ofthe-art models for object classification and detection involving multi-scale processing Szegedy et al. (2014a). Since modeling such recursions in DNNs is notoriously hard and often relies on additional techniques such as reinforcement learning Stollenga et al.", "startOffset": 163, "endOffset": 495}, {"referenceID": 3, "context": "We speculate that the robustness of human perception is due to complex hierarchies and recursions in the wirings of the human brain Felleman and Van Essen (1991); Douglas et al. (1995), since recursions provide multiple paths to input data and could retain locality information at multiple levels of representation. Such an intuition is also partially supported by the recent state-ofthe-art models for object classification and detection involving multi-scale processing Szegedy et al. (2014a). Since modeling such recursions in DNNs is notoriously hard and often relies on additional techniques such as reinforcement learning Stollenga et al. (2014); Mnih et al.", "startOffset": 163, "endOffset": 652}, {"referenceID": 3, "context": "We speculate that the robustness of human perception is due to complex hierarchies and recursions in the wirings of the human brain Felleman and Van Essen (1991); Douglas et al. (1995), since recursions provide multiple paths to input data and could retain locality information at multiple levels of representation. Such an intuition is also partially supported by the recent state-ofthe-art models for object classification and detection involving multi-scale processing Szegedy et al. (2014a). Since modeling such recursions in DNNs is notoriously hard and often relies on additional techniques such as reinforcement learning Stollenga et al. (2014); Mnih et al. (2014), we will at first investigate explicit inclusion of input generalization as an additional objective for the standard DNN training process.", "startOffset": 163, "endOffset": 672}, {"referenceID": 15, "context": "It is important to note that the adversarial examples are universal and unavoidable by their definition: one could always engineer an additive noise at input to make the model misclassify an example, and it is also a problem in shallow models such as logistic regression Szegedy et al. (2014b). The question is how much noise is needed to make the model misclassify an otherwise correct example.", "startOffset": 271, "endOffset": 294}, {"referenceID": 11, "context": "In this paper we investigate new training procedures such that the adversarial examples generated based on Szegedy et al. (2014b) have higher distortion, where distortion is measured by 1 n \u2211 (x\u2032i \u2212 xi) 2 where x, x \u2208 R are the adversarial data and original data respectively.", "startOffset": 107, "endOffset": 130}, {"referenceID": 11, "context": "In this paper we investigate new training procedures such that the adversarial examples generated based on Szegedy et al. (2014b) have higher distortion, where distortion is measured by 1 n \u2211 (x\u2032i \u2212 xi) 2 where x, x \u2208 R are the adversarial data and original data respectively. First, we investigate the structure of the adversarial examples, and show that contrary to their small distortion it is difficult to recover classification performance through additional perturbations, such as Gaussian additive noises and Gaussian blur. This suggests the size of \u201cblind-spots\u201d are in fact relatively large, in input space volume, and locally continuous. We also show that adversarial examples are quite similar Szegedy et al. (2014b), and an autoencoder (AE) trained to denoise adversarial examples from one network generalizes well to denoise adversarials generated from different architectures.", "startOffset": 107, "endOffset": 728}, {"referenceID": 10, "context": "We find that ideas from denoising autoencoder (DAE), contractive autoencoder (CAE), and most recently marginalized denoising autoencoder (mDAE) provide strong framework for training neural networks that are robust against adversarial noises Rifai et al. (2011b); Alain and Bengio (2012); Chen et al.", "startOffset": 241, "endOffset": 262}, {"referenceID": 0, "context": "(2011b); Alain and Bengio (2012); Chen et al.", "startOffset": 9, "endOffset": 33}, {"referenceID": 0, "context": "(2011b); Alain and Bengio (2012); Chen et al. (2014). We propose Deep Contractive Networks (DCNs), which incorporate a layer-wise contractive penalty, and show that adversarials generated from such networks have significantly higher distortion.", "startOffset": 9, "endOffset": 53}, {"referenceID": 15, "context": "We follow the procedure outlined in Szegedy et al. (2014b) for generating adversarial examples from the classifier neural network, with a slight modification for computational efficiency.", "startOffset": 36, "endOffset": 59}, {"referenceID": 8, "context": "We perform our experiements on the MNIST dataset, using a number of architectures LeCun and Cortes (1998); Krizhevsky and Hinton (2009).", "startOffset": 82, "endOffset": 106}, {"referenceID": 7, "context": "We perform our experiements on the MNIST dataset, using a number of architectures LeCun and Cortes (1998); Krizhevsky and Hinton (2009). Table 1 summarizes experimental settings, baseline error rate, adversarial examples\u2019 error rate and average adversarial distortion.", "startOffset": 107, "endOffset": 136}, {"referenceID": 12, "context": "Contractive autoencoder (CAE) is a variant of an autoencoder (AE) with an additional penalty for minimizing the squared norm of the Jacobian of the hidden representation with respect to input data Rifai et al. (2011b). A standard AE consists of an encoder and a decoder.", "startOffset": 197, "endOffset": 218}, {"referenceID": 0, "context": "5 Alain and Bengio (2012). However, such stochastic penalties require many passes of data to train the model effectively.", "startOffset": 2, "endOffset": 26}, {"referenceID": 0, "context": "5 Alain and Bengio (2012). However, such stochastic penalties require many passes of data to train the model effectively. For efficiency, we decided to employ a deterministic penalty instead Rifai et al. (2011b); Alain and Bengio (2012); Chen et al.", "startOffset": 2, "endOffset": 212}, {"referenceID": 0, "context": "5 Alain and Bengio (2012). However, such stochastic penalties require many passes of data to train the model effectively. For efficiency, we decided to employ a deterministic penalty instead Rifai et al. (2011b); Alain and Bengio (2012); Chen et al.", "startOffset": 2, "endOffset": 237}, {"referenceID": 0, "context": "5 Alain and Bengio (2012). However, such stochastic penalties require many passes of data to train the model effectively. For efficiency, we decided to employ a deterministic penalty instead Rifai et al. (2011b); Alain and Bengio (2012); Chen et al. (2014).", "startOffset": 2, "endOffset": 257}, {"referenceID": 11, "context": "The model can be improved by augmenting the layer-wise contractive penalty based on Higher-Order Contractive autoencoders Rifai et al. (2011a), and marginalized Denoising autoencoders Chen et al.", "startOffset": 122, "endOffset": 143}, {"referenceID": 6, "context": "For example, explicitly learning instantiation parameters as previously attempted by models such as Transforming Autoencoder Hinton et al. (2011).", "startOffset": 125, "endOffset": 146}, {"referenceID": 8, "context": "Recent progress in deep neural networks is driven by both end-to-end supervised training and various modes of unsupervised feature learning Krizhevsky et al. (2012); Bengio (2009), and thus we believe the merge of the two could likely enable new milestones in the field.", "startOffset": 140, "endOffset": 165}, {"referenceID": 8, "context": "Recent progress in deep neural networks is driven by both end-to-end supervised training and various modes of unsupervised feature learning Krizhevsky et al. (2012); Bengio (2009), and thus we believe the merge of the two could likely enable new milestones in the field.", "startOffset": 140, "endOffset": 180}, {"referenceID": 10, "context": "The authors thank Nitish Srivastava for releasing his DeepNet Library, and Volodymyr Mnih for his CUDAMat Library Mnih (2009).", "startOffset": 85, "endOffset": 126}], "year": 2017, "abstractText": "Recent work has shown deep neural networks (DNNs) to be highly susceptible to well-designed, small perturbations at the input layer, or so-called adversarial examples. Taking images as an example, such distortions are often imperceptible, but can result in 100% mis-classification for a state of the art DNN. We study the structure of adversarial examples and explore network topology, pre-processing and training strategies to improve the robustness of DNNs. We perform various experiments to assess the removability of adversarial examples by corrupting with additional noise and pre-processing with denoising autoencoders (DAEs). We find that DAEs can remove substantial amounts of the adversarial noise. However, when stacking the DAE with the original DNN, the resulting network can again be attacked by new adversarial examples with even smaller distortion. As a solution, we propose Deep Contractive Network, a model with a new end-to-end training procedure that includes a smoothness penalty inspired by the contractive autoencoder (CAE). This increases the network robustness to adversarial examples, without a significant performance penalty.", "creator": "LaTeX with hyperref package"}}}