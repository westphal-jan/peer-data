{"id": "1502.04938", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Feb-2015", "title": "A Survey of Word Reordering in Statistical Machine Translation: Computational Models and Language Phenomena", "abstract": "word reordering is one encompassing the generally difficult aspects of statistical machine translation ( pet ), and an important factor of sampling quality and efficiency. why the massive amount of research published. humans, and interest of quantitative community in this disciplines has significantly decreased, and no single method evolved to project strongly dominant facilitating language generation. however, the choice of functional optimal approach around completing suitable interdisciplinary task still seems to be mostly satisfied by empirical trials. systematically orientate his model in specific familiar and applicable research area, we present a realistic analyses of word translation simulations as a fundamental technical challenge and as to generic language phenomenon. the site describes at detail how word reordering involves addressed despite different resource - based and tree - linked smt frameworks since as of stand - alone outcome, contains structural overviews of the analyses featuring semantic reordering scenarios. let nonetheless question why simple studies are easier successful than others in different language pairs. or argue between, and measuring the amount of reordering, she be valuable to question which approaches of reordering occur in common given language pair. to this end, we conduct statistical empirical analysis at word composition phenomena in these diverse sample on the pairs, based largely a large collection examining factual knowledge. empirical assessments in the smt corpus are shown to support the hypothesis that only few linguistic facts can be completely motivated to compare the reordering characteristics like possible whole pair and to select the hypothetical framework that basically expresses them.", "histories": [["v1", "Tue, 17 Feb 2015 15:59:09 GMT  (740kb,D)", "http://arxiv.org/abs/1502.04938v1", "46 pages, submitted to Computational Linguistics"], ["v2", "Mon, 14 Mar 2016 22:52:23 GMT  (1174kb,D)", "http://arxiv.org/abs/1502.04938v2", "44 pages, to appear in Computational Linguistics"]], "COMMENTS": "46 pages, submitted to Computational Linguistics", "reviews": [], "SUBJECTS": "cs.CL", "authors": ["arianna bisazza", "marcello federico"], "accepted": false, "id": "1502.04938"}, "pdf": {"name": "1502.04938.pdf", "metadata": {"source": "CRF", "title": "A Survey of Word Reordering in Statistical Machine Translation: Computational Models and Language Phenomena", "authors": ["Arianna Bisazza", "Marcello Federico"], "emails": [], "sections": [{"heading": "A Survey of Word Reordering in Statistical", "text": ""}, {"heading": "Machine Translation: Computational Models", "text": "and Language Phenomena\nArianna Bisazza University of Amsterdam\nMarcello Federico Fondazione Bruno Kessler\nWord reordering is one of the most difficult aspects of statistical machine translation (SMT), and an important factor of its quality and efficiency. Despite the vast amount of research published to date, the interest of the community in this problem has not decreased, and no single method appears to be strongly dominant across language pairs. Instead, the choice of the optimal approach for a new translation task still seems to be mostly driven by empirical trials.\nTo orientate the reader in this vast and complex research area, we present a comprehensive survey of word reordering viewed as a statistical modeling challenge and as a natural language phenomenon. The survey describes in detail how word reordering is modeled within different string-based and tree-based SMT frameworks and as a stand-alone task, including systematic overviews of the literature in advanced reordering modeling.\nWe then question why some approaches are more successful than others in different language pairs. We argue that, besides measuring the amount of reordering, it is important to understand which kinds of reordering occur in a given language pair. To this end, we conduct a qualitative analysis of word reordering phenomena in a diverse sample of language pairs, based on a large collection of linguistic knowledge. Empirical results in the SMT literature are shown to support the hypothesis that a few linguistic facts can be very useful to anticipate the reordering characteristics of a language pair and to select the SMT framework that best suits them."}, {"heading": "1. Introduction", "text": "Statistical machine translation (SMT) is a data-driven approach to the translation of text from a natural language into another. Emerged in the 1990s and matured in the 2000\u2019s to become widespread today, the core SMT methods (Brown et al. 1990, 1993; Berger et al. 1996; Koehn, Och, and Marcu 2003) learn direct correspondences between source and target language from collections of translated sentences, without the need of abstract linguistic representations. The main advantages of SMT are versatility and cost-effectiveness: in principle, the same modeling framework can be applied to any pair of languages with minimal human effort. However, experience in a diverse range of language pairs has revealed that this form of modeling is highly sensitive to structural differences between source and target language \u2013 particularly at the level of word order.\nIndeed, natural languages vary greatly in how they arrange sentence components, and translating words in the correct order is essential to preserve meaning across languages. In English, for instance, the role of different predicate arguments is determined precisely by their relative position within the sentence. Consider the translation example in Figure 1: Looking at the English glosses of the Arabic sentence, one can see that corresponding words in the two languages are placed in overall similar orders\nar X\niv :1\n50 2.\n04 93\n8v 1\n[ cs\n.C L\n] 1\n7 Fe\nb 20\n15\nwith the notable exception of the verb (jdd/renewed), which occurs at the beginning of the Arabic sentence but in the middle of the English one \u2013 more specifically, between the subject and the object. To reach the correct English order, three other reorderings are required between pairs of adjacent Arabic words: (the-monarch, the-Moroccan), (support, his) and (the-president, the-French). This example suggests a simple division of reordering patterns into long-range, or global, and short-range, or local, however other language pairs display more complex, hierarchical patterns.\nWord reordering phenomena are naturally handled by human translators1 but are a major source of complexity for SMT. In very general terms, the task of SMT consists in: breaking the input sentence into smaller units, selecting an optimal translation for each unit and placing them in the correct order. Searching for the overall best translation throughout the space of all possible reorderings is, however, computationally intractable (Knight 1999). This crucial fact has motivated an impressive amount of research around two inter-related questions: namely, how to effectively restrict the set of allowed word permutations? and how to detect the best permutation among them?\nExisting solutions to these problems range from heuristic constraints, based on word-to-word distances and completely agnostic about the sentence content, to linguistically motivated SMT frameworks where the entire translation process is guided by syntactic structure. The research in word reordering has advanced together with the core SMT research and has sometimes directed it, being one of the main motivation for the development of tree-based SMT (e. g. Wu (1997), Yamada (2002), Galley et al. (2004), Chiang (2005)). At the same time, the variety of word orders revealed by the world languages has pressed the SMT community to admit the importance of languagespecific knowledge and to reassess its ambitions for a universal translation algorithm.\nAccording to the Machine Translation Archive, a scientific interest in this specific subproblem of MT started around 2006 and kept growing at a rapid pace. In 2013, the research papers mainly dedicated to reordering accounted for no less than 11% of all SMT papers.2 Despite the abundant research, word order differences remain among the most important factors of performance in modern SMT systems, and new approaches to reordering are still proposed every year.\nTo orientate the reader in this complex and productive research area, we present a comprehensive survey of word reordering viewed as a statistical modeling challenge\n1 However, learning and understanding a new language has been shown to be more difficult when the new language is structurally distant from one\u2019s native language (Corder 1979). 2 Peer-reviewed conferences, workshops and journal papers listed by the Machine Translation Archive: http://www.mt-archive.info/srch/subjects.htm\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nand as a natural language phenomenon. Our survey notably differs from previous (Costa-juss\u00e0 and Fonollosa 2009) in that we do not only review the existing approaches to word reordering in SMT, but we also question why some approaches are more successful than others in different language pairs. In particular, we argue that understanding the complexity of reordering in a given language pair is key to selecting the right SMT models and to further improving them.\nThe survey is organized as follows: Section 2 explains how the word reordering problem is treated within different string-based and tree-based SMT frameworks, as well as a stand-alone task (i. e. pre- and post-ordering). The literature in advanced reordering modeling is extensively reviewed, with a major focus on recent work. Section 3 describes the challenges of automatically assessing word reordering accuracy in SMT outputs. Section 4 presents a qualitative analysis of word reordering across language pairs. In particular, detailed word order profiles are provided for a sample of seven widely spoken languages representing structural and geographical diversity: namely English, German, French, Arabic, Turkish, Japanese and Chinese. The same section reviews empirical results from the SMT literature showing that the proposed word order profiles are useful to anticipate the reordering characteristics of a language pair and to select the SMT framework that best suits them. The survey ends with a discussion of the strengths and weaknesses of the major approaches to reordering in SMT."}, {"heading": "2. Approaches to Reordering in Statistical Machine Translation", "text": "A first important distinction has to be made between word reordering performed as part of the decoding process (Sections 2.1 to 2.3) and word reordering performed before or after it, as a monolingual task decoupled from the bilingual translation task (Section 2.4).\nWithin the former, we further distinguish between string-based (sequential) approaches and tree-based (structured) approaches. String-based SMT (Sections 2.1 and 2.2) treats translation as a sequential task: the target sentence is built from left to right while the input units are visited in different orders and no dependencies other than word adjacency are considered. Subsequently, problem decomposition is applied to the target string: an optimal translation is sought for each prefix of the target translation, from the shortest to the longest. Tree-based SMT (Section 2.3) posits the existence of a tree structure to explain translation as a hierarchical process and capture dependencies among non-adjacent text units. Problem decomposition is therefore based on the tree: an optimal translation is sought for each word span corresponding to a node in the tree, from the leaves to the root. Importantly, string-based SMT has to search, at least in principle, over all input permutations, while tree-based SMT considers only those permutations that can result from a transformation of the tree (e.g. permuting each node\u2019s children).\nFinally, we should note the difference between syntax-based SMT approaches that rely on parse trees produced by pre-trained monolingual parsers, and data-driven tree-based SMT approaches that extract a bilingual translation grammar directly from parallel data without using linguistically motivated syntactic information. In the former, word reordering is constrained by a given syntactic parse tree of the input, whereas, in the latter, the tree structure is a latent variable of the search process and word reordering resulting from any possible tree derivation of the input is in principle admitted.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT"}, {"heading": "2.1 Phrase-based SMT", "text": "Phrase-based SMT (PSMT) is the currently dominant approach in string-based SMT. PSMT ruled out the early word-based SMT framework (Brown et al. 1990, 1993; Berger et al. 1996) thanks to two important novelties: the use of multi-word translation units (Och 1999; Zens, Och, and Ney 2002; Koehn, Och, and Marcu 2003), and the move from a generative to a discriminative modeling framework (Och and Ney 2002). Formally, the SMT process is called decoding and consists in searching for the most probable target (or English) sentence e\u2217 given a source (or foreign) sentence f by scoring translation hypotheses through a linear combination of feature functions:\ne\u2217 = argmax e max b exp [ R\u2211 r=1 \u03bbrhr(f , e,b) ] (1)\nwhere b is a latent variable representing the phrase-level alignment between f and e, hr(e, f ,b) are R arbitrary feature functions and \u03bbr the corresponding feature weights. State-of-the art PSMT systems typically include the following core feature functions: phrase- and word-level translation models; target n-gram language model; distortion penalty; phrase penalty controlling the number of phrases; word penalty controlling the target output length; plus additional components that model specific translation aspects, such as reordering. Feature weights are tuned discriminatively by directly optimizing translation performance on a development set, using parameter tuning techniques such as MERT (Och 2003) or PRO (Hopkins and May 2011).\nThe search process (1) is guided by the target string e, built from left to right, and the alignment variable b which embeds both segmentation and reordering of the source phrases. This is defined as:\nb = bI1 = ((J1, I1), (J2, I2), . . . , (JI , II)) (2)\nsuch that I1, . . . , II are consecutive intervals partitioning the target word positions 1, . . . , L, and J1, . . . , JI are corresponding but not necessarily consecutive intervals partitioning the source word positions 1, . . . ,M . A phrase segmentation for our running example is shown in Figure 2.\nFor the sake of efficiency in search, each feature function is required to be locally decomposable down to some (optional) markovian dependency. In particular, most reordering feature functions in the literature are special cases of the template:\nh(f , e,b) = I\u2211 i=1 h(f\u0303i\u22121, e\u0303i\u22121, Ji\u22121, f\u0303i, e\u0303i, Ji) (3)\nwhere f\u0303i is a shorthand for the substring (phrase) of f spanning the source interval Ji, and e\u0303i is a shorthand for the substring (phrase) of e spanning the target interval Ii. Note that, throughout the survey, we often refer to feature function to actually indicate its local component (h).\nAssuming a one-to-one correspondence between source and target phrases, reordering in PSMT means searching through a set of permutations of the source phrases. Thus, two sub-problems arise: defining the set of allowed permutations in b (reordering constraints) and scoring the allowed permutations (reordering models or feature functions).\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\njdd AlEAhl Almgrby Almlk mHmd AlsAds dEm -h l- m$rwE Alr}ys Alfrnsy!\nthe Morocca monarch King Mohamed VI renewed his support to the project of the French President!\n[jdd]3 [AlEAhl Almgrby]1 [Almlk mHmd AlsAds]2 [dEm -h]4 [l- m$rwE]5 [Alr}ys Alfrnsy]6!\n[the Moroccan monarch]1 [King Mohamed VI]2 [renewed]3 [his support]4 [to the project of]5 [the French President]6!\n[jdd]3 [AlEAhl Almgrby]1 [Almlk mHmd AlsAds]2 [dEm -h]4 [l- m$rwE]5 [Alr}ys Alfrnsy]6!\n[the Moroccan monarch]1 [King Mohamed VI]2 [renewed]3 [his support]4 [to the project of]5 [the French President]6!\nFigure 2: An example of word alignment and phrase segmentation for the sentence pair presented in Figure 1. Subscript indices denote the phrase alignment bI1. Note that other phrase segmentations are possible given the same word alignment.\nThe simplest example of reordering feature function is the distortion cost (or distortion penalty):\nhD(Ji\u22121, Ji) = \u2212 |start(Ji)\u2212 end(Ji\u22121)\u2212 1| (4)\nwhich assigns zero cost to hypotheses that preserve the order of the source phrases (monotonic translations).\nThe use of phrases mainly results in a better handling of ambiguous words and many-to-many word equivalences, but it also makes it possible to capture a considerable amount of local reordering phenomena within the translation unit (intra-phrase reordering). With reference to our running example (Figure 1), a PSMT model is likely to handle the local reorderings as single phrase pairs \u2013 [AlEahl Almgrby]-[The Moroccan monarch] etc. \u2013 if these were observed in the training data. On the contrary, it is unlikely that a single long phrase spanning from jdd to AlsAds was observed, therefore the longrange reordering of the verb would have to be handled by inter-phrase reordering.\nPSMT reordering constraints. Because searching over the space of all possible translations would be NP-hard (Knight 1999), SMT decoders employ heuristic search algorithms to only explore a promising subset of the search space. In particular, limiting the set of explorable input permutations is an essential way to reduce decoding complexity. The reordering constraint originally included in the PSMT framework is called distortion limit (DL). This consists in allowing the decoder to skip, or jump, at most k words from the last translated phrase to the next one. More precisely, the limit is imposed on the distortion D between consecutively translated phrases (cf. equation 4):\n|start(Ji)\u2212 end(Ji\u22121)\u2212 1| \u2264 DL (5)\nTo avoid decoding dead-ends, the distortion limit has to be coupled with another constraint (gap constraint) which ensures that the left-most uncovered input position (`) will still be reachable after translating the next source phrase. Formally, to translate a new source interval Ji, the gap between Ji and ` must not exceed the DL:\n|`\u2212 end(Ji)\u2212 1| \u2264 DL (6)\nSetting a low distortion limit means only exploring local reorderings, based on the arguable assumption that languages tend to arrange sentence constituents in similar orders. Besides being essential for efficiency \u2013 the DL allows for linear decoding complexity \u2013, reordering constraints are also important for translation quality because the existing SMT models are typically not discriminative enough to guide the search over very large sets of reordering hypotheses. However, reordering constraints have also several drawbacks. For instance the verb reordering in Figure 1 may not be captured\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nby a PSMT system that applies a DL of 5 or less, because jumping back from AlsAds to jdd costs 6.\nWhile the distortion limit is a de facto standard in modern PSMT systems, the first constraining paradigms were in fact formulated earlier for word-based SMT (Berger et al. 1996; Zens and Ney 2003) and are called IBM constraints:\n\u2022 MS (max skip): at each decoding step, translate one of the first k uncovered source positions. In other terms, the translation of a limited number of words (at most k) may be postponed indefinitely.\n\u2022 IS (inverted skip): at each decoding step, check how many source words after the first uncovered position j have been translated. If they are less than k\u22121, translate any uncovered word, otherwise translate j. This means that the translation of at most k\u22121 source words can be anticipated at any point, while the rest of the sentence is covered monotonically.\nThe growth of the permutation search space for a sentence of 10 words, with respect to the threshold k of the MS, IS and DL constraints is reported in Table 1.3 We notice that the space defined by DL is considerably smaller than the one defined by IBM constraints, as long as k is small compared to the sentence length. However, both types of constraint grow exponentially with k. The default configuration of the open-source PSMT toolkit Moses (Koehn et al. 2007) includes a DL of 6 words and this is widely accepted as a good baseline setting for many language pairs.\nAn enhancement to the IBM constraints was proposed by Tillmann and Ney (2003) to specifically address the reordering of verbs between German and English, in a wordbased SMT system. This paradigm allows to set different thresholds for the anticipation and for the postponement of some input words. A reordering state is added to the decoder to ensure that any reordering pattern (either skip or move) is completed before initiating a new one. Both reordering patterns are strictly defined and, aside from them, decoding proceeds monotonically. For the German-English translation direction, Tillmann and Ney (2003) manually set their thresholds so that one word may be skipped for at most 4 positions, and up to 2 words may be moved left by at most 10 positions. In this way, a non-contiguous verb chunk in German may be correctly reordered into a contiguous verb chunk in English. Note, however, that these constraints do not take into account the actual position of the verbs in the input sentence.\nA different kind of reordering constraint can be derived from Inversion Transduction Grammars (ITG) (Wu 1995, 1997). ITGs only admit permutations that are generated\n3 For a formal definition and complexity analysis of the DL and IBM constraints, we refer the reader to Lopez (2009).\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nby recursively swapping pairs of adjacent blocks of words.4 In particular, ITG constraints disallow reorderings that generalize the patterns (3 1 4 2) and (2 4 1 3), which are rarely attested in natural languages.5 Enforcing ITG constraints in left-to-right PSMT decoding is not as trivial as enforcing constraints based on word-to-word distances, and requires the use of a shift-reduce permutation parser (Zens 2008; Feng et al. 2010). Alternatively, a relaxed version of the ITG constraints (i.e. Baxter permutations) may be enforced by simply inspecting the source coverage vector, as proposed by Zens et al. (2004), Zens (2008). Interestingly, Cherry, Moore, and Quirk (2012) found no consistent benefit from applying either exact or approximate ITG-constraints to a PSMT system that already included a hierarchical phrase orientation model6 (Galley and Manning 2008).\nWhether based on word-to-word distances (IBM and Moses-style) or on permutation patterns (skip/move and ITG), the existing reordering constraints are not sensitive to the word being translated nor to its context. This results in a very coarse definition of the reordering search space, which is problematic in language pairs with different syntactic structures. To address this problem, Yahyaei and Monz (2009) propose to decouple local and global reordering by segmenting the input sentence into chunks that can be permuted arbitrarily, but each of which is translated monotonically. They train a maximum-entropy classifier to detect chunk boundaries based on lexical features and integrate its predictions into a modified PSMT decoder that performs translation and chunking at the same time. In a related work, Yahyaei and Monz (2010) present a technique to dynamically set the DL during decoding: they train a discriminative classifier to predict the most probable jump length after each input word, and use the predicted value as the DL after that position. Unfortunately, this method appears to generate inconsistent constraints leading to decoding dead-ends. As a solution, the dynamic DL is relaxed when needed to reach the first uncovered position. Bisazza and Federico (2013) developed this idea further and proposed to decode with loose reordering constraints (i.e. high DL) but only explore those long reorderings that are most likely according to a specific reordering model. This form of early reordering pruning enables the PSMT system to capture long-range reordering without hurting efficiency.\nWhen a parse tree of the input is available, it may also be used to constrain PSMT reordering following the principle of syntactic cohesion (Fox 2002). Concretely, the dependency cohesion constraint (Cherry 2008) states that, when part of a source subtree is translated, all words under the same subtree must be covered before moving to words outside of it. Integrated in phrase-based decoding as soft constraints \u2013 i. e. by using the number of violations as a feature function \u2013 dependency cohesion and its variants (Cherry 2008; Bach, Vogel, and Cherry 2009) were shown to significantly improve translation quality. In a related work, Feng, Sun, and Ney (2012) derive similar cohesion constraints from the semantic role labeling structure of the input sentence. The divide-and-translate approach of (Sudoh et al. 2010) employs source-side parse trees to segment complex sentences into simple clauses which are replaced by a specific symbol and translated independently. Then, the target sentence is reconstructed using the placeholders, with the aim of simplifying long-range clause-level reordering.\n4 For a comparative study of the IBM and ITG constraints, we refer the reader to Zens and Ney (2003). 5 This has been a common opinion in the research community following Wu (1997). However, empirical\nevidence against it was presented, for instance, by Wellington, Waxmonsky, and Melamed (2006). 6 The reordering models mentioned herein are explained in detail in the next subsection.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nPSMT reordering feature functions. Target language modeling is the primary way to reward promising reorderings during translation. This is done indirectly, through the scoring of target word n-grams that are produced by translating the source positions in different orders. However, the fixed window of language models used in SMT (typically 4 or 5 words) makes them mostly insensitive to global reordering phenomena.\nIn the last years, a growing interest for language pairs with different word orders, such as Arabic-English and Chinese-English, has favored the development of new techniques to explicitly model the reordering problem. Given a source sentence, the search for its optimal reordering is generally decomposed into a sequence of local reordering decisions, as is done for the whole translation process. Thus, the basic reordering step corresponds to the relative positioning of the word, or phrase, being translated with respect to the word, or phrase, that was previously translated.\nWe have already presented in equation (4) the distortion cost function, which is commonly employed as a basic reordering model by modern PSMT systems, such as Moses. A weakness of this function is that it penalizes long jumps only when they are performed, rather than accumulating their cost gradually. As a result, hypotheses with gaps (i. e. uncovered input positions) can proliferate and cause the pruning of more monotonic hypotheses that could lead to overall better translations.To solve this problem, Moore and Quirk (2007) proposed an improved version of the distortion cost function which consists in \u201cincorporating an estimate of the distortion penalty yet to be incurred into the estimated score for the portion of the source sentence remaining to be translated\u201d (early distortion cost).7 This function has the same value as the standard one over a complete translation hypothesis, provided that the jump from the last translated word to the end of the sentence is taken into account. As a difference, though, it anticipates the gradual accumulation of the total distortion cost, making hypotheses with the same number of covered words more comparable with one another. For instance, in Figure 2, standard distortion becomes 1 when we skip the first source phrase J3 but does not increase while we cover J1 and J2. Only when we jump back and forth to cover J3 and continue, the cost finally increases by +6 and +5 leading to a total of 12. On the contrary, early distortion is already 6 after the first step: that is, 1 for skipping J3 plus 5 for the minimal future cost. The second step is monotonic, but the minimal future cost is incremented by 6. When we finally jump back and forth to translate J3 and continue, no additional cost is paid, leading to the same total of 12.\nState-of-the-art systems use the distortion cost in combination with more sophisticated reordering models, which can be divided into three families: phrase orientation models, jump models and source decoding sequence models. A representative selection of state-of-the-art reordering models is summarized in Table 2.\nPhrase orientation models (Tillmann 2004; Koehn et al. 2005; Nagata et al. 2006), also known as lexicalized reordering models, predict the orientation of a source phrase with respect to the last translated one, by classifying it as monotone, swap or discontinuous (or discontinuous left and discontinuous right). The model probabilities are conditioned on the current phrase pair\u2019s source and target side P (o(Ji\u22121, Ji)|f\u0303i, e\u0303i) and estimated from relative frequencies observed in a parallel corpus. For example, in Figure 2, such a model would assign the probability of a monotone orientation to the phrase pair [Almlk mHmd AlsAds]-[King Mohamed VI] because it was translated right after the source phrase\n7 A similar idea had been proposed by Och and Ney (2004) for the alignment template SMT approach, under the name of min-jumps.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\n[jdd]3 [AlEAhl Almgrby]1 [Almlk mHmd AlsAds]2 [dEm -h]4 [l- m$rwE]5 [Alr}ys Alfrnsy]6!\n[the Moroccan monarch]1 [King Mohamed VI]2 [renewed]3 [his support]4 [to the project of]5 [the French President]6!\n[AlEahl Almgrby]. The phrase pair [jdd]-[renewed], instead, would receive the probability of a discontinuous (left) orientation relatively to the last translated phrase (see also Figure 3). These models can suffer from data sparseness and are poorly expressive as they do not discriminate among different jump lengths. Nonetheless they are an important component of modern PSMT systems. To overcome data sparseness, Nagata et al. (2006) experiment with different phrase representations obtained by mapping words to unsupervised classes8 or by looking at the part-of-speech (POS) tags of the phrase\u2019s first and last words. They also propose to extract orientation events from a set of N-best phrase alignments (segmentations) of each training sentence pair, which they show to work significantly better than considering all extractable phrase pairs as done by Koehn et al. (2005). Hierarchical phrase orientation models, or simply hierarchical reordering models (HRM) (Galley and Manning 2008) improve the way in which the orientation of a new phrase pair o(Ji\u22121, Ji) is determined: adjacent blocks can be merged together and form longer phrases around the current one. As a result, more swaps are detected and orientation assignments become more consistent across hypotheses with different phrase segmentations. In Figure 3, the HRM would check whether phrases 1 and 2 can be merged into a large phrase pair [AlEahl ... AlsAds]-[The ... VI] without violating the word alignment. If so, it would assign a swap, instead of discontinuous orientation, to [jdd]-[renewed]. Rather than using relative-frequency estimates, Zens and Ney (2006) predict phrase orientation with a maximum-entropy model. Within this framework, they test various combinations of features depending on the last position of the last translated target phrase, q = end(Ii\u22121), and on the source position aligned to it, aq :\n1. the target word at position q and its immediate context (q \u2212 1, q + 1); 2. the source word at position aq and its immediate context (aq \u2212 1, aq + 1); 3. like 1. and 2. with words mapped to unsupervised word classes.\nClassification accuracies in three language pairs show that context features are very helpful and that source-side features largely outperform target-side features. Word-class based features perform almost as well as word-based features, and their combination results in small gains. To further improve the estimation of orientation probabilities while avoiding manual feature engineering, Li et al. (2014) introduce a neural reordering model where phrases are represented as vectors using recursive autoencoders (Socher\n8 Specifically, 20 word classes per language, trained with the mkcls tool (Och 1999)\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\net al. 2011). The model is applied to lattice rescoring. Cherry (2013) integrate sparse phrase orientation features directly into a phrase-based decoder. These features couple the current phrase orientation with its first or last word (source or target side). Words are mapped to unsupervised classes while lexicalized features are generated only for very frequent words. The following are examples of features for the phrase pair [Almlk mHmd AlsAds]-[King Mohamed VI] with orientation relative to the previously translated phrase (see Figure 2):\nSource: Target:\nFirst word: Almlk:monotone King:monotone CLASS(Almlk):monotone CLASS(King):monotone\nLast word: CLASS(AlsAds):monotone CLASS(VI):monotone\nassuming that Almlk and King were among the top-n most frequent words of the source and target vocabularies respectively. Feature weights are optimized together with the other SMT feature weights, by directly maximizing a measure of translation quality on a development set. The sparse orientation features were shown to largely outperform HRM and its maximum-entropy counterpart, despite capturing very similar reordering information and despite being trained on a much smaller corpus.\nJump models aim to overcome the poor handling of long reordering by phrase orientation models. To this end, they predict the direction and length of the jump that is performed between words that are translated consecutively. Al-Onaizan and Papineni (2006) modeled the probability of possible jumps given the last covered source word, the word to be translated, or both (outbound, inbound or pairwise lex-\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nicalized distortion models). Probabilities are estimated for the exact jump length: e. g. Ppairwise(\u22125 | AlsAds, jdd ) in Figure 2. To cope with data sparseness and unreliable estimates, the model is interpolated with a simple smoothing distribution penalizing longer jumps (similarly to the distortion cost), so that the lexicalized jump length probability only accounts for a small part of the reordering score actually used in decoding. Green, Galley, and Manning (2010) introduced a discriminative classifier that scores different jumps depending on the words being translated, on their POS tag, on their relative position in the sentence, and on the sentence length. In doing this, they take two steps towards robustness. First, jumps are grouped into length bins whose size increases with the jump length:\n< \u22126 [-6,-4] [-3,-2] [-1] 0 1 [2,3] [4,6] > 6\nSecond, irrelevant features are automatically filtered out by means of a regularization technique. In both these works, best Arabic-English results were obtained within a rather small DL: 8 in (Al-Onaizan and Papineni 2006) and 5 in (Green, Galley, and Manning 2010), thus failing to capture the rare but crucial long reorderings that are the main motivation of these works. A drawback of the jump modeling approach is that it typically over-penalizes long jumps because they occur much more rarerly than short jumps.\nSource decoding sequence models predict which input word9 is likely to be translated at a given state of decoding. Reordered source language models (Feng, Mauser, and Ney 2010) are smoothed n-gram models trained on a corpus of source sentences reordered to match the target word order. When integrated into the SMT system, they assign a probability to each newly translated source word given the n-1 previously translated source words: for instance PRLM( jdd | Almgrby AlEahil Almlk mHmd AlsAds) in Figure 2 with n=6. Thus, rather than explicitly modeling jumps, this method rewards sequences of reordered source words seen in the training data. When testing a 9-gram model on a gold reordered corpus, Feng, Mauser, and Ney (2010) reported a rather high perplexity, likely due to severe data sparseness and the consequent use of backoff probabilities by the LM. Nevertheless, integrating the model into a PSMT system yielded a gain in performance comparable to the gain achieved by a maximum-entropy phrase orientation model (Zens and Ney 2006). The operation sequence model (OSM) (Durrani, Schmid, and Fraser 2011; Durrani et al. 2013) is an n-gram model that includes translation operations and reordering operations (insertGap, jumpBack or jumpForward ) in a single generative story. In Figure 2, for instance, a 3-gram OSM would assign the following probability to the translation of the verb:\nPOSM( jumpBack(1) | generate(mHmd,Mohamed), generate(AlsAds,VI) )\n\u00d7 POSM( generate(jdd,renewed) | generate(AlsAds,VI), jumpBack(1) )\nwhere 1 denotes the gap that is closest to the right-most source position covered so far. To overcome data sparseness, Durrani et al. (2014) apply OSM to POS-tags and unsupervised word clusters. Following a sequence-labeling approach, Feng, Peter, and Ney (2013) train taggers \u2013 based on conditional random fields or bidirectional recurrent neural networks \u2013 assigning one of nine tags to each input word, according to how it should be reordered with respect to its left and right context. During decoding, a feature\n9 By \u201cinput word\u201d, we denote the word at a given position of the input sentence, as opposed to the notion of word type.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nfunction rewards reorderings that most agree with the tagging assigned by these models to the complete input sentence. Finally, source word pair or word-after-word reordering models (Bisazza and Federico 2013; Goto et al. 2013) estimate, for each pair of input positions x and y, the cost of translating y right after x, given various features of x, y and their respective contexts. For instance in Figure 2, considering that jdd is translated right after AlsAds, feature examples would be:\n[ wx=AlsAds wy=jdd ] [ wx=AlsAds wx+1=dEm wy=jdd ] [ POSx=adjective POSy=verb ]\nDifferently from reordered source LMs, these models are trained discriminatively using rich feature sets. At the same time, they do not employ decoding history-based features, thus not affecting hypothesis recombination. Bisazza and Federico (2013) build a binary classifier to predict whether an input word y should be translated right after a given input word x. Instead, the model proposed by Goto et al. (2013) predicts which of the input words (other than x) should be translated right after x. Particular attention is paid to the representation of the word sequence comprised between x and y in order to distinguish among similar word candidates occurring in the same sentence."}, {"heading": "2.2 Other string-based SMT approaches", "text": "N-gram based SMT (Casacuberta and Vidal 2004; Mari\u00f1o et al. 2006) is a stringbased alternative to PSMT. In this framework, smoothed n-gram models are learnt over sequences of minimal translation units (called tuples), which, like phrase pairs, are pairs of word sequences extracted from word-aligned parallel sentences. Tuples, however, are typically shorter than phrase pairs and are extracted from a unique, monotonic segmentation of the sentence pair. Thus, the problem of spurious phrase segmentation is avoided but non-local reordering becomes an issue. For instance, in Figure 2, a monotonic phrase segmentation could be achieved only by treating the large block [jdd ... AlsAds]-[The ... renewed] as a single tuple. Reordering is then addressed by \u2018tuple unfolding\u2019 (Crego, Mari\u00f1o, and de Gispert 2005): that is, during training the source words of each translation unit are rearranged in a target-like order, so that more, shorter tuples can be extracted. At test time, input sentences have to be pre-ordered for translation. To this end, Crego and Mari\u00f1o (2006) proposed to precompute a number of likely permutations of the input using POS-based rewrite rules learned during tuple unfolding. The reorderings thus obtained are used to extend the search graph of a monotonic decoder (see also Section 2.4). Nevertheless, reordering remains a shortcoming of n-gram based SMT as reordering decisions are, to a large extent, decoupled from decoding and based only on source-side information.\nDiscontinuous phrase-based SMT (Simard et al. 2005; Galley and Manning 2010) aims at combining the efficiency of string-based decoding with the higher generalization capabilities of discontinuous phrases used in hierarchical SMT (see Section 2.3). In this approach, translation units can contain gaps of either fixed (Simard et al. 2005) or variable (Galley and Manning 2010) size, making it possible to learn more general non-hierarchical reordering patterns."}, {"heading": "2.3 Tree-based SMT", "text": "The SMT approaches discussed so far learn direct correspondences between source and target words or short word sequences. Sometimes, though, the translation process could benefit from a structured representation of the sentence encoding hierarchical,\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\npossibly long-distance dependencies among words. For instance, in our running example (Figure 2), knowing the span of the Arabic subject could be enough to predict the reordering of the verb for translation into English. In general, it has often been noted that reordering among natural languages tend to involve the permutation of whole syntactic constituents (see for instance Fox (2002)). Thus, word reordering is one of the translation aspects that most motivated the development of tree-based SMT.\nTo date, many frameworks have been proposed to model translation via tree-like structures, such as Wu (1996), Yamada (2002), Galley et al. (2004), Imamura, Okuma, and Sumita (2005), Chiang (2005), Ding and Palmer (2005), Quirk, Menezes, and Cherry (2005), Watanabe, Tsukada, and Isozaki (2006), Shen, Xu, and Weischedel (2008) inter alia. These can differ in the formalism they use to represent the trees, or in how they apply the trees: that is, to the source (Huang, Knight, and Joshi 2006), to the target (Galley et al. 2004; Shen, Xu, and Weischedel 2008), or to both languages (Imamura, Okuma, and Sumita 2005; Smith and Eisner 2006; Zhang et al. 2008). Moreover, some approaches model translation as the transformation of syntactic parse trees produced by pre-trained monolingual parsers (Yamada 2002; Galley et al. 2004; Quirk, Menezes, and Cherry 2005), while others extract a bilingual translation grammar directly from wordaligned parallel data without using syntactic information (Wu 1996; Chiang 2005). All tree-based systems differ substantially from PSMT and other string-based systems with respect to reordering. Whereas PSMT considers all the input permutations (that do not violate heuristic reordering constraints) and then scores them with separate reordering models, tree-based systems model reordering jointly with translation and, during decoding, only explore input permutations that are licensed by the learnt translation model.\nIn this survey we focus on hierarchical phrase-based SMT and on treelet-based SMT translation as both were shown to benefit from dedicated reordering modeling components. For a comprehensive overview of the syntax-based SMT field we refer the reader to Koehn (2010).\nIn hierarchical phrase-based SMT (HSMT) (Chiang 2005), a probabilistic synchronous context-free grammar (SCFG) is extracted directly from word-aligned parallel data. HSMT rules are not syntactically motivated and only include two generic non-terminal symbols (X and S). As shown in Figure 4, HSMT translation rules can either include: a mix of terminals and non-terminals capturing reordering patterns and discontinuities (rules 1-4) or only terminals (7-10) effectively corresponding to regular phrase pairs. Finally, the so-called glue rules (5-6) are always added to the grammar to combine translated blocks in a monotone fashion regardless of their content. As in PSMT, extracted translation rules must not exceed a certain length and rule scores are obtained using maximum likelihood estimation.\nHSMT decoding is based on a CKY-style chart parsing algorithm with beam search and integrated target language model. Hence, the target sentence is not produced from left to right as in PSMT, but bottom-up according to the tree derivation order. Crucially, swapping adjacent phrases with no lexical evidence (X \u2192 X1X2||X2X1) is not allowed by standard HSMT grammars, therefore reordering can only be triggered by partially lexicalized translation rules. This is a major difference with respect to syntax-based approaches where reordering can be captured by rules containing only labeled nonterminals (e.g. S \u2192 NP VP || VP NP). This means that, for instance, the reordering pattern learnt by our example grammar (Figure 4, rule 1) may only be used to reorder the specific verb form jdd (renewed) in subsequent test sentences. Thus, HSMT is likely to work better for languages like Chinese, where the syntactic role of phrases is mostly\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nHierarchical rules:! (1) X ! jdd X || X renewed ! (2) X ! AlEAhl X1 Almlk X2 || the X1 monarch King X2 ! (3) X ! X -h || his X! (4) X ! l- m$rwE X || to the project of the X!\njdd AlEAhl Almgrby Almlk mHmd AlsAds dEm -h l- m$rwE Alr}ys Alfrnsy!\nthe Moroccan monarch King Mohamed VI renewed his support to the project of the French President!\nXX!\nX! X!\nX\nX!\nX!\nX!\nS! S!\nRegular phrase translation rules:! (7) X ! Almgrby || Moroccan! (8) X ! mHmd AlsAds || Mohamed VI! (9) X ! dEm || support! (10) X ! Alr}ys Alfrnsy || French President!\nGlue rules:! (5) S ! S X || S X! (6) S ! X || X!\nHiero&\nS!\nFigure 4: Example of hierarchical phrase-based grammar extracted from a word-aligned sentence pair. The target-side tree is not represented due to space limitations.\nexpressed by function words, than for languages like Russian, where this information is largely conveyed by word inflection.\nAlthough hierarchical models are inherently capable of dealing with complex word reordering and the recursiveness of language, in practice many translation rules are noisy or based on limited context. Moreover, to limit the search complexity, a constraint is imposed on the maximum number of source words that may be covered by a nonterminal symbol during decoding (span constraint). This parameter is typically set to 10 or 15 words as wider spans result in prohibitively slow decoding and lower translation quality. For these reasons, a number of extensions to the original HSMT framework have been proposed with the specific goal of improving reordering.\nde Gispert et al. (2010) introduces shallow-n grammars to refine the reordering space of HSMT according to the reordering requirements of a given language pair. For instance, in Arabic-English (see Figure 5) the HSMT grammar is extended with an additional non-terminal symbol X0 that can only generate fully lexicalized phrases, thereby disallowing recursive nesting of hierarchical rules (shallow-1 grammar). To account for the movement of large word blocks, other new non-terminals Mk allow for the monotonic generation of k non-terminals X0. While defining a much smaller search space than the original HSMT grammar, the resulting shallow grammar can capture the long-range reordering of our running example even in the (likely) absence of a single rule covering the whole subject span (that is rule 2 in Figure 4). Given the availability of a POS tagger, shallow grammars can be further refined by requiring, for instance, that hierarchical rules include a verb among their source terminals, which would exclude rule 8 in Figure 5. In a related work specifically addressing the issue of long-range reordering, Braune, Gojun, and Fraser (2012) propose to relax the span constraint only for specific types of hierarchical rules which are more likely to capture long reordering patterns in German-English. For instance, rules whose source side starts with at least one terminal followed by one non-terminal and ends with at least one terminal (t+ X t+) can capture the pattern \u2018finite-auxiliary-verb X participle\u2019 (e. g. ist X gestiegen/has increased X) with very wide X spans.\nMylonakis and Sima\u2019an (2010) separate the modeling of local reordering (captured by fully lexicalized phrase-pair emission rules) from the modeling of higher-order recursive reordering (captured by ITG-style non-lexicalized binary rules). Instead of a single\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nHiero&with&shallow&grammars:& Shallow(1,!K1!=&1,&K2!=&3!&\nnon-terminal X, three different symbols are used according to the reordering pattern in which they participate: X for monotonic rules; XSL and XSR for the first and second symbol, respectively, of swapping rules. Thus reordering decisions are conditioned on the phrase pairs content, rather than their lexical context as in HSMT. More fine-grained non-terminals are introduced by Maillette de Buy Wenniger and Sima\u2019an (2014) to also capture the relation of a phrase pair\u2019s reordering with respect to the parent phrase that contains it.\nRather than labeling non-terminals, other work incorporates reordering-specific models into HSMT as additional feature functions. He, Meng, and Yu (2010) add to their model the generic phrase swapping rule (X \u2192 X1X2||X2X1) and use a maximum-entropy classifier to predict whether two neighboring phrases should be swapped or not. Rather than conditioning the decision on the whole phrases, the classifier employs features extracted from them, such as first and last word (or POS tag) of the source and target side. A similar model was first developed by Xiong, Liu, and Lin (2006) for simpler phrase translation models (i. e. without discontinuities) based on ITG. Li, Liu, and Sun (2013) use recursive autoencoders (Socher et al. 2011) to assign vector representations to the neighboring phrases given as input to the ITG classifier, thereby avoiding manual feature selection but affecting hypothesis recombination and decoding speed. Finally, Nguyen and Vogel (2013) and Huck et al. (2013) successfully integrate the distortion cost feature function and phrase orientation models initially designed for string-based PSMT into a chart-based HSMT decoder.\nAnother line of work has focused on enriching HSMT models with information extracted from a syntactic parse tree of the source sentence, thereby improving reordering. Chiang et al. (2005) first experimented with a feature function that simply rewards translation rule applications corresponding to full syntactic constituents. While this initial attempt did not appear to improve translation quality, Marton and Resnik (2008) further elaborated the idea and proposed a series of finer-grained features distinguishing among constituent types (VP, NP, etc.), eventually leading to better performance. Gao, Koehn, and Birch (2011) extract two reordering-related feature functions from source dependency parse trees: (i) The dependency orientation model predicts whether the relative order of a source word and its head should be reversed during translation.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nThis is trained as a maximum-entropy classifier using the words and their dependency relation type as features. (ii) The dependency cohesion penalty fires whenever a word and its head are translated separately (i. e. by different translation rules) thereby measuring derivation well-formedness10. Since long-range reordering tends to happen closer to the root and local reordering closer to the leaves, a distinction is made between words occurring at different depths of the dependency tree leading to a number of sub-features. In this way, the tuning process can decide how important or reliable are feature scores coming from different levels of the parse tree. Huang, Devlin, and Zbib (2013) worked instead with constituency parses and trained a classifier to predict whether the order of any two sibling constituents in the input tree should be reversed or maintained during translation. The classifier is trained by maximum-entropy using a number of syntactic features and used during decoding at the word level: that is, each pair of input words inherit the orientation probabilities of the constituents that cover them respectively.\nSyntactic annotation has been also used to refine non-terminal SCFG symbols, potentially leading to better reordering choices. In (Zollmann and Venugopal 2006) and (Mylonakis and Sima\u2019an 2011), phrase labels indicate whether a phrase corresponds to a syntactic constituent or to part of it, as well as the constituent type, relatively to a target or source parse tree, respectively. Moreover, Mylonakis and Sima\u2019an (2011) treat the phrase-pair category as a latent variable and learn reordering distributions over multiple labels per span (e.g. generic X or source-syntax based like NP, VBZ+DT, etc.). Li et al. (2012) use source dependency annotation to refine non-terminal symbols with syntactic head information. More specifically, given a hierarchical phrase, its type is obtained by concatenating the POS tags of the exposed heads it contains on the source side, where an exposed head is a word dominated by a word outside the phrase. Like He, Meng, and Yu (2010), Li et al. (2012) also allow adjacent phrases to swap but instead of introducing a separate orientation model, they rely on rule translation probabilities based on the refined non-terminals to guide reordering.\nFinally, Setiawan, Kan, and Li (2007) observe that, in languages like Chinese and English, function words provide important clues on the grammatical relationships among phrases. Consequently, they introduce a SCFG where function words (approximated by high-frequency words) are the only lexicalized non-terminals guiding phrase reordering. Based on the same intuition, Setiawan et al. (2009) augment a HSMT system with a function-word ordering model that predicts, for any pair of translation rules, which one should dominate the other in the hierarchical structure, based on the function words that they contain.11\nTreelet-based SMT (Quirk, Menezes, and Cherry 2005) is a different tree-based framework that exploits source-side dependency annotation to direct the translation process. The translation units in this framework are pairs of connected subgraphs (called treelets) extracted from pairs (Tf , Te) of source dependency parse tree and targetside projected tree. Figure 6 shows four examples of treelet pairs that could be extracted from our parallel sentence given a source dependency parse.12 Treelets can be seen as phrases that are not limited to groups of adjacent words, but rather to groups of words\n10 Although related, this is different from the definition of dependency cohesion constraint proposed by Cherry (2008) in the context of phrase-based SMT (see Section 2.1). 11 Two other models utilizing function words as the anchors of global reordering decisions are proposed in (Setiawan et al. 2013) and (Setiawan, Zhou, and Xiang 2013). Although integrated in a syntax-based system (Shen, Xu, and Weischedel 2008), these models are in principle applicable to other SMT frameworks such as HSMT. 12 To simplify the explanation, we removed the first English word the in Figure 6.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT"}, {"heading": "VBD NN JJ NN NNP JJ-NUM NN PRP IN NN NN JJ !", "text": "that are connected by dependency relations. Like HSMT, treelet-based SMT is capable of learning discontinuous phrases and non-local reordering patterns but, unlike HSMT, it relies entirely on a supervised syntactic parser to define sentence structure.\nReordering may be only partially specified by the treelet pairs as these do not have to fully match the yield of a node. For example, in Figure 6, treelet pair (3) determines the swapping of jdd and AlEAhl but does not say anything about the ordering of dEm which is also a child of jdd. Hence, during decoding all possible reorderings of the unmatched children are considered and scored by a separate discriminative model trained to predict the position of a child node (or modifier m) relative to its head h. This model is implemented as a decision tree whose features are (i) lexical items of nodes m and h in both source and target side, (ii) POS tag of m and h, and (iii) position of m relative to h in the source side. Reordering modeling is thus largely decoupled from lexical selection, which makes the model very flexible but results in a very large search space and high risk of search errors.\nTo address this issue, Menezes and Quirk (2007) introduce another mechanism to complement treelet reordering: that is, dependency order templates. An order template is an unlexicalized rule specifying the reordering of a node and all its children based on their POS tags. For instance, in Figure 6, treelet pair (3) may be combined with template (a) to specify the order of the child dEm. For each new test sentence, matching treelet pairs and order templates are combined to construct lexicalized translation rules for that sentence and, finally, decoding is performed with a chart parsing algorithm similar to the one used in HSMT. Treelet pair and order template probabilities are all estimated using maximum likelihood.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT"}, {"heading": "2.4 Word Reordering as Pre- (or Post-) Processing", "text": "Given the complexity of solving word reordering during the decoding process, a productive line of research has focused on decoupling reordering decisions from translation decisions. These approaches aim at arranging the source sentence in a target-like order before or after translating it. Thus, word reordering is solved as pre- or post-processing (i. e. pre-ordering or post-ordering) in a monolingual fashion and with unconstrained access to the sentence context. Figure 7 (Sudoh et al. 2011) illustrates the workflows of pre- and post-ordering approaches as opposed to standard SMT.\nMany different pre-ordering strategies have been proposed: Deterministic preordering aims at finding a single13 optimal reordering for each input sentence, which is then translated monotonically or with a low distortion limit (Nie\u00dfen and Ney 2001; Xia and McCord 2004; Collins, Koehn, and Kucerova 2005; Popovic\u0301 and Ney 2006; Costajuss\u00e0 and Fonollosa 2006; Wang, Collins, and Koehn 2007; Habash 2007; Li et al. 2007; Tromble and Eisner 2009; Xu et al. 2009; Genzel 2010; Isozaki et al. 2010b; Khalilov and Fonollosa 2011; Khalilov and Sima\u2019an 2011; Visweswariah et al. 2011; Gojun and Fraser 2012; Yang et al. 2012; Lerner and Petrov 2013; Jehl et al. 2014). Non-deterministic preordering encodes multiple alternative reorderings into a word lattice (or forest) and lets a monotonic (usually n-gram based) decoder choose the best path according to its models (Zens, Och, and Ney 2002; Kanthak et al. 2005; Crego and Mari\u00f1o 2006; Zhang, Zens, and Ney 2007; Rottmann and Vogel 2007; Crego and Habash 2008; Elming and Habash 2009; Niehues and Kolss 2009). A hybrid approach is adopted by Bisazza, Pighin, and Federico (2012), Hardmeier, Bisazza, and Federico (2010), Andreas, Habash, and Rambow (2011): rules are used to generate multiple likely pre-orderings, but only for a specific language phenomenon that is responsible for difficult (long-range) reordering patterns. The sparse reordering lattices produced by these techniques are then translated by a decoder performing additional phrase-based reordering. In a followup work, Bisazza and Federico (2012) introduce another way to encode multiple preorderings of the input: instead of generating a word lattice, pre-computed permutations are used to reduce the distortion cost and create \u2018shortcuts\u2019 between selected pairs of input positions (i. e. modified distortion matrices). At the price of some approximations, this technique allows for a more compact input representation because, unlike lattices, it does not involve the creation of multiple nodes for the same source word.\nPre-ordering can be based on manually written linguistic rules or automatically learned from data. In linguistic knowledge based pre-ordering, rules determine the permutation of nodes in a syntax tree (Collins, Koehn, and Kucerova 2005; Wang, Collins, and Koehn 2007; Xu et al. 2009; Isozaki et al. 2010b; Yeniterzi and Oflazer 2010; Gojun and Fraser 2012; Andreas, Habash, and Rambow 2011) or the permutation of shallow syntactic chunks in a sentence (Hardmeier, Bisazza, and Federico 2010; Durgar El-Kahlout and Oflazer 2010; Bisazza, Pighin, and Federico 2012). In an early example of syntax-based pre-ordering, Collins, Koehn, and Kucerova (2005) propose a set of six rules aimed at arranging the German sentence in an English-like order. In particular, the rules address the position of verbs, verb particles and negation particles, and they are applied to constituency parse trees. Following a similar approach, Gojun and Fraser (2012) develop a set of rules for the opposite translation direction (English-to-German). Xu et al. (2009) instead propose a simple set of dependency-based rules to pre-order\n13 Li et al. (2007) experiment with a small number of n-best pre-orderings given as alternative inputs to the SMT system.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nthat of English parse trees into Japanese word order can be implemented by a simple rule of moving syntactic heads (Isozaki et al., 2010). This implies another question; can we utilize a pre-reordering technique in the opposite direction? If it is feasible, we can easily reverse the translation direction in which the pre-ordering approach successfully works.\nThis paper proposes a novel approach for this problem, which we call post-ordering. As the name implies, it first translates source language sentences\ninto source-ordered target language sentences and\nthen reorders these words to correct target language word order. Figure 1 illustrates the differences among: (a) a standard translation direction from the source language to the target language, (b) the pre-ordering approach, and (c) the postordering approach. As shown in Figure 1, the preand post-ordering are very similar methodologies. Their monotone translation parts are almost identical, except their targeting word order. The postordering process is the problem of reordering differently ordered sentence in the correct word order. This is the inverse problem of the pre-ordering that changes word order of correctly ordered sentences. We solve this inverse problem as a SMT problem. Once we have bitexts of source and target language and the pre-ordering rules or models for target-to-source translation, we can easily generate source-ordered target language sentences. We then use these source-ordered target sentences and the target language portion of the bitexts to train the SMT models for \u201csource-ordered target\u201d to \u201ccorrect target\u201d translation. This post-ordering approach has an advantage on saving the effort to develop new pre-ordering rules and models by utilizing good preordering in the opposite direction. Note that it can be used in any language pairs in which we have preordering techniques in the opposite direction.\nWe focus on Japanese-to-English translation in this paper, since this remains a challenging translation pair for SMT. In case of opposite direction, English-to-Japanese, Isozaki et al. (2010) proposed simple but effective English reordering rules called Head-Finalization that moves syntactic heads toward the end of their siblings. This HeadFinalization rule matches the head-final word ordering of Japanese and works quite well in Englishto-Japanese translation. However, pre-ordering in\nWords : source Word order : source\n[Source language]\nWords : target Word order : source\n[Source-ordered target]\nWords : source Word order : target\n[Target-ordered source]\nWords : target Word order : target\n[Target language]\n(a) standard translation\n(b1) pre-ordering\n(c2) post-ordering\n(b2) monotone translation in target word order\n(c1) monotone translation in source word order\nFigure 1: A typical work flow in a standard translation, pre-ordering and post-ordering approach.\nthe opposite direction by placing Japanese syntactic heads in the middle is not a trivial problem. We utilize the Head-Finalization rules to generate intermediate head-finalized English sentences called Head-Final English (HFE) and decompose Japanese-to-English translation into 1) Japaneseto-HFE translation and 2) HFE-to-English postordering. We achieved significant improvements from baseline (phrase-based, hierarchical phrasebased, and string-to-tree) translation methods by"}, {"heading": "1.56, 0.76, and 2.77 points in BLEU, respectively,", "text": "in the experiment of patent translation.\nThe remainder of this paper is organized as follows. Section 2 briefly reviews related studies on the reordering problem and another related technology called post-editing. Section 3 presents the proposed method in detail taking Japanese-to-English translation as a test case. Section 4 reports our experiments and discusses the results. Section 5 concludes this paper with our prospects for future work.\n2 Related Work\nReordering is a both theoretically and practically challenging problem in SMT. In the early period of SMT studies, reordering is modeled by distancebased constraints in translation model (Brown et al., 1993; Koehn et al., 2003). This reordering model is easy to compute and also works well in relatively similar language pair like French-to-English. The distance-based reordering constraint is not reasonable in some language pair such as English-toJapanese, because they have very different word ordering and appropriate reordering distances of words and phrases highly depend on their syntac-\nFigure 7: Typical workflows of standard, pre-ordering and post-ordering approaches to SMT. Taken from Sudoh et al. (2011).\nEnglish for translation into subject-object-verb (SOV) languages. Using the same rule set, they improved competitive baselines for a number of SOV target languages (Korean, Japanese, Hindi, Urdu, and Turkish). Isozaki et al. (2010b) later obtained even better results in an English-to-Japanese task using only one pre-ordering rule, head finalization, with a parser capable of arking syntactic heads.\nData-driven pre-ordering models are learned from sets of pairs (f , f \u2032) where f is a ourc sentence and f \u2032 is its reference permutation (pre-ordering) inferred from a reference translation e via a word-level alignment.14 These models typically require some form of linguistic annotation of the source language, such as syn actic parse trees (Xia and McCord 2004; Habash 2007; Li et al. 2007; Elming and Habash 2009; Genzel 2010; Khalilov and Fonollosa 2011; Khalilov and Sima\u2019an 2011; Yang et al. 2012; Lerner and Petrov 2013; Jehl et al. 2014), shallow syntax chunks (Zhang, Zens, and Ney 2007; Crego and Habash 2008) or POS labels (Crego and Mari\u00f1o 2006; Rottmann and Vogel 2007; Niehues and Kolss 2009; Tromble and Eis er 2009; Visweswariah et al. 2011).\nAmong the first examples of data-driven tree-based pre-ordering, Xia and McCord (2004) propose a method to automatically learn reordering patterns from a dependencyparsed French-English bitext, using a number of heuristics. While source-side parses are required by their method, target-s de parses are optionally us d to provide additional constraints during rule extraction. Later, Habash (2007) extracted pre-ordering rules from an Arabic-English parallel corpus dependency-parsed on the source side. In both these works, pre-ordering rules are applied in a deterministic way to preprocess both training and test data. Following a discriminative modeling approach, Li et al. (2007) train a maximum-entropy classifier to pre-order each n de with at ost 3 children in the source constituency parse, using a rich set of lexical and syntactic features. Lerner and Petrov (2013) extend this work to pre-order nodes with more children (up to 7 on either side of the head) using a cascade of classifiers: first, decide the order of each children relative to the head, then decide the order of left children and that of the right children. As training separate classifiers for each number of children is prone to sparsity issues, Jehl et al. (2014) build a single logistic regression model to predict whether any two\n14 Different heuristics have been proposed to convert a word alignment set into a sentence permutation. We will describe one of these in detail when introducing the reordering metric KRS in Section 3.\n19\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nsibling nodes should be swapped or not. Then, for each node in the tree, they search for the best permutation of all its children given the pairwise scores produced by the model, using a depth-first procedure. Yang et al. (2012) treat each node\u2019s children pre-ordering as a ranking problem and model it with support vector machines (Herbrich, Graepel, and Obermayer 2000). As an alternative to deterministic pre-ordering, they also propose to use the predicted source permutation to generate soft constraints for the SMT decoder (i.e. a penalty that fires whenever the decoder violates the reference pre-ordering). A tighter integration between source pre-ordering and source-to-target translation is proposed by Dyer and Resnik (2010), who treat optimal source pre-orderings (f\u2019) as a latent variable in an end-to-end translation model and learn the parameters of their tree permutation model directly from parallel data. At test time, alternative permutations of the input tree are encoded as a source reordering forest, which is then translated by a finite-state phrase-based translation model.\nExamples of pre-ordering based on shallow syntax include (Zhang, Zens, and Ney 2007; Crego and Habash 2008). In these approaches, automatically extracted chunk preordering rules are used to generate a word reordering lattice of the input sentence, which is then translated by a monotonic phrase or n-gram based decoder.\nIn (Costa-juss\u00e0 and Fonollosa 2006), pre-ordering is learnt by training a monolingual n-gram based SMT system at the level of word clusters. In (Tromble and Eisner 2009), pre-ordering is cast as a permutation problem and solved by a model that estimates the probability of reversing the relative order of any two input words based on their distance as well as lexicalized and POS-based features. In a related work, Visweswariah et al. (2011) obtain smaller models and better results by learning the cost of a word wy appearing right after wx, as opposed to anywhere after it (cf. source wordafter-word reordering models described in Section 2.1).\nAlthough syntax is widely regarded as the preferable way to inform pre-ordering, empirical work has shown the limitations of this type of pre-ordering methods regarding (i) the reachability of reference permutations when parse trees are used to constrain the pre-ordering model, and (ii) the quality of the parser used to learn and apply a preordering model.\nWith regard to the constraints imposed by syntactic trees (i), Khalilov and Sima\u2019an (2012) conducted oracle pre-ordering experiments across various language pairs. Their results consistently showed that final translation quality was highest by far when no syntactic constraint was imposed on pre-ordering (oracle string). On the contrary, only allowing permutations of siblings of the source parse tree (oracle tree) gave the smallest improvement. Only some of this loss could be recovered by applying specific modifications to the tree before extracting the optimal permutation (oracle modified tree).\nWith regard to parser accuracy (ii), Green, Sathi, and Manning (2009) analyzed two state-of-the-art parsers (Bikel 2004; Klein and Manning 2003) and reported F-measures of only 55-56% at the sub-task of detecting Arabic NP subjects in verb-initial clauses. Similar results were observed by Carpuat, Marton, and Habash (2010) using a dependency parser (Nivre, Hall, and Nilsson 2006). The same paper also showed that the correct pre-ordering for Arabic-English translation could not be safely predicted even from gold standard parses, partly due to syntactic transformations occurring during translation. From a manual analysis of their English-German system, Gojun and Fraser (2012) reported that about 10% of the English clauses were wrongly pre-ordered, mostly due to source sentence parsing errors. Howlett and Dras (2011) analyzed a reimplementation of the German pre-ordering method proposed by Collins, Koehn, and Kucerova (2005) and found that results could be affected \u2013 or even cancelled out \u2013 by many factors\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nincluding: choice of training data, quality of the parser, order of the language model and type of reordering model used during decoding.\nRather than relying on supervised parsers trained on golden treebanks, specific parsers can be induced directly from non-annotated parallel text. In (DeNero and Uszkoreit 2011), source sentence reorderings are first inferred from the word alignment with the target translation. Then, a binary parsing model is trained to maximize the likelihood of source trees that can generate such reorderings. Finally, a pre-ordering model is trained to permute each node in the tree. Evaluated on the English-Japanese language pair, this method almost equals the performance of a pre-ordering method based on a supervised parser. Neubig, Watanabe, and Mori (2012) follow a similar approach but build a single ITG-style pre-ordering model treating the parse tree as a latent variable. In the target self-training method of Katz-Brown et al. (2011), a baseline treebank-trained parser is used to produce n-best parses of a parallel corpus\u2019 source side. Then, the parses resulting in the most accurate pre-ordering after application of a dependency-based pre-ordering rule set (Xu et al. 2009) are added to the treebank data and used to re-train the baseline parser.\nA smaller line of research has instead treated reordering as post-processing (or post-ordering). In (Bangalore and Riccardi 2000; Sudoh et al. 2011), target words are reordered after a monotonic translation process. Other work has focused on rescoring a set of n-best translation candidates produced by a regular PSMT decoder \u2013 for instance by means of POS-based reordering templates (Chen, Cettolo, and Federico 2006) or word-class specific distortion models (Gupta, Cettolo, and Federico 2007). Chang and Toutanova (2007) use a dependency tree reordering model to generate n alternative orders for each 1-best sentence produced by the SMT system. Each set of n sentence reorderings is then reranked using a discriminative model trained on word bigram features and standard word reordering features (distance or orientation between consecutively translated input words).\nFocusing on Japanese-to-English translation, Sudoh et al. (2011, 2013) proposed to \u2018translate\u2019 foreign-order English into correct-order English using a monolingual phrasebased (Sudoh et al. 2011) or syntax-based (Sudoh et al. 2013) SMT system trained for this specific subtask.15 The underlying motivation is that, while English-to-Japanese is well handled by pre-ordering with the aforementioned head-finalization rule (Isozaki et al. 2010b), it is much harder to predict the English-like order of Japanese constituents for Japanese-to-English translation. Post-ordering addresses this issue by generating head-final English (HFE) sentences that are used to create a HFE-to-English parallel corpus. Goto, Utiyama, and Sumita (2012, 2013) solve post-ordering by parsing the HFE sentences into binary trees annotated with both syntactic labels and ITG-style monotone/swap labels. Hayashi et al. (2013) improve upon this work with a shiftreduce parser that efficiently integrates non-local features like n-grams of the postordered string.\nSomewhat related to post-ordering is the work on right-to-left or reverse decoding by Watanabe and Sumita (2002), Finch and Sumita (2009), and Freitag et al. (2013). Here, the target sentence is built up from the last word to the first, thereby altering language model context and reordering search space. Finch and Sumita (2009) obtained best results on a wide range of language pairs by combining the outputs of standard and reverse decoding systems.\n15 Note the similarity to the pre-ordering approach of Costa-juss\u00e0 and Fonollosa (2006), except that here the monolingual SMT process is applied to the target language after a monotonic translation phase.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT"}, {"heading": "3. Evaluating Word Reordering in Statistical Machine Translation", "text": "Automatically evaluating translation quality is a complex problem as there are innumerable ways to correctly render a source sentence\u2019s meaning in the target language. Generally, SMT systems are judged by the extent to which their outputs resemble a set of reference translations produced by different human translators. Despite relying on a very rough approximation of language variability, this approach provides SMT researchers with fast automatic metrics that can guide, at least in part, their steps towards improvement. Besides, fast evaluation metrics are used to automatically tune SMT feature weights on a development corpus, for instance by means of minimum error rate training procedures (Och 2003). The design of MT evaluation metrics correlating with human judgements is an active research area. Here we briefly survey two widely used general-purpose metrics, BLEU and METEOR, and then describe more in detail a number of reordering-specific metrics.\nBLEU (Papineni et al. 2001) is a lexical match based score that represents a defacto standard for SMT evaluation. Here, proximity between candidate and reference translations is measured in terms of overlapping n-grams, with n typically ranging from 1 to 4. For each order n a modified precision16 score is computed on the whole test set and combined in a geometric mean. The resulting score is then multiplied by a brevity penalty that accounts for length mismatches between reference and candidate translations. AlOnaizan and Papineni (2006) use BLEU to measure word order similarity between two languages: i.e. by computing the BLEU score between the original target sentence e and a source-like permutation of e. Using n-grams, though, is a limited solution to the problem of word ordering evaluation: First, because only exact surface matches are counted, without any consideration of morphology or synonymy. Second, because the absolute positioning of words in the sentence is not captured, but only their proximity within a small context.\nThe former issue is addressed, at least to some extent, by METEOR (Banerjee and Lavie 2005), which relies on language-specific stemmers and synonymy modules to go beyond the surface-level similarity. As for word order, METEOR treats it separately with a fragmentation penalty proportional to the smallest number of chunks that the hypothesis must be divided into to align with the reference translation. This quantity can be interpreted as the number of times that a human reader would have to \u2018jump\u2019 between words to recover the correct translation order. However, it makes no distinction between short and long-range reordering errors.\nThe weakness of BLEU and METEOR with respect to word order was demonstrated by Birch, Osborne, and Blunsom (2010) with a significant example that we report in Table 3. For simplicity, the example assumes that the reference order is monotonic and that hypotheses and reference translations contain exactly the same words. According to both metrics, hypothesis (a) is worse than (b), although in (a) only two adjacent words are swapped while in (b) the two halves of the sentence are swapped.\nTo overcome these limitations, Birch, Osborne, and Blunsom (2010) propose to directly measure the similarity between the reorderings needed to reach the reference translations from the source sentence and those applied by the decoder to produce the candidate translation. In practice, this is done by converting word alignments to permutations and computing a permutation distance among them. Among various\n16 See Papineni et al. (2001) for the details.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nA. Birch et al.\nFig. 1 Synthetic examples of two example alignments and their permutations where: a there is one short distance word order difference, b the order of the two halves has been swapped. Bullet points represent the non-sequential gaps in the permutation\neither by averaging the metrics for each reference, or by selecting the most appropriate reference to compare with. Permutation distance metrics have been used to evaluate data in natural language processing tasks before. Kendall\u2019s tau (Lapata 2003) was used as a means of estimating the distance between a system-generated and a humangenerated gold-standard order for the sentence discourse task. The correlation between Kendall\u2019s tau and human judgements was also established (Lapata 2006).\nA permutation is a bijective function from a set of natural numbers 1, 2, . . . , N to itself. We will name our permutations \u03c0 and \u03c3 . The ith symbol of a permutation \u03c0 will be denoted as \u03c0(i) and the identity, or monotone, permutation id is the permutation for which id(i) = i for all i .\nFigure 1 shows an example of two sentence pairs and their permutations. The permutations are calculated by iterating over the source words (s1\u2026s10), and outputting the position of the aligned target words (t1\u2026t10). Alignments can represent situations that are more complex than permutations can account for and we make some simplifying assumptions. Phrasal alignments are assumed to be monotone word alignments. Non-contiguous alignments are simplified to only record the first target word position. Null source word alignments are assumed to align to the previous word.\nPermutation distance metrics are calculated by comparing permutations extracted from a source sentence aligned to different target sentences. We invert the distance metrics by subtracting from one, so that an increase in the metrics represents an increase in the quality of word order. We define and discuss the different metrics below.\n\u2013 The Hamming Distance measures the number of disagreements between two permutations (Ronald 1998):\ndH (\u03c0, \u03c3 ) = 1 \u2212 \u2211n\ni=1 xi n\nwhere xi = {\n0 if \u03c0(i) = \u03c3 (i) 1 otherwise\n(1)\n123\nmetrics proposed in e paper, the square root of the Kendall\u2019s Tau was shown to be reliable and highly correlated with human judgements.\nThe normalized Kendall\u2019s Tau distance K is originally a measure of disagreement between rankings. Given a set of n elements and two permutations \u03c0 and \u03c3, the K distance corresponds to the number of discordant pairs (i.e. pairs of elements whose relative ordering differs in the two permutations) normalized by the total number of ordered element pairs:\nK(\u03c0, \u03c3) =\n\u2211n i=1 \u2211n j=1 d(i, j)\n1 2n(n\u2212 1)\nwhere d(i, j) = { 1 if \u03c0i < \u03c0j and \u03c3i > \u03c3j 0 otherwise\nBirch, Osborne, and Blunsom (2010) further suggest to extract the square root ofK to obtain a function that is more discriminative on lower distance ranges, i.e. for translations that are closer to the reference word ordering. Finally, the Kendall Reordering Score (KRS) \u2013 a positive measure of quality ranging from 0 to 1 \u2013 is computed by subtracting the latter quantity from one, and by multiplying the result by a brevity penalty (BP ) that accounts for length mismatches between reference and candidate translations:\nKRS(\u03c0, \u03c3) = (1\u2212 \u221a K(\u03c0, \u03c3)) \u00b7BP\nThe BP definition corresponds to that of BLEU with the difference that, for KRS, it is computed at the sente ce level. In case of multiple references, the one that yields the highest score is retained for eac t st sentence. Finally, the average of all sentence-level KRS scores gives the global KRS of the test set.\nFigure 8 illustrates an example of KRS computation. A source sentence of 7 words (in the center) is aligned to a reference translation of 8 words and to an MT output of 6. The two word alignment sets are converted to permutations (\u03c0 and \u03c3) according to the following rules: (i) multiple source words aligned to the same target word are considered to be in monotonic order, (ii) non-aligned source words are assumed to immediately follow the previous source word, and (iii) if a source word is aligned to non-adjacent words in the target, only the first alignment is retained. Thus, for example,\nthe link S2-T5 is ignored, while S7 is inserted right after S6 in permutation \u03c3. The discordant pairs between \u03c0 and \u03c3 are (S1,S2),(S1,S3),(S1,S4),(S5,S6),(S5,S7), hence:\nK(\u03c0, \u03c3) = 5\n1 27(7\u2212 1)\n= 0.2381 , BP (\u03c0, \u03c3) = exp ( 1\u2212 8\n6\n) = 0.7165\nKRS = (1\u2212 \u221a 0.2381) \u00b7BP = 0.3669\nIn the example of Table 3, hypothesis (a) would obtain a much higher KRS than (b): that is 0.8509 versus 0.2546. Birch and Osborne (2011) propose to linearly interpolate the KRS metric with BLEU to obtain the so-called LRscore. They show that this composite metric can be successfully used to optimize the feature weights of a PSMT system, leading to translation outputs that are preferred by human annotators.\nIn a related work, Bisazza and Federico (2013) observe that some word classes, like verbs, are typically more important than others to determine the general structure of a sentence. Hence, they develop a word-weighted KRS variant that is only sensitive to the positioning of specific input words. Assuming that each input word fi is assigned a weight \u03bbi, the original KRS formula is modified as follows:\nd\u03bb(i, j) = { \u03bbi+\u03bbj if \u03c0i < \u03c0j and \u03c3i > \u03c3j 0 otherwise\nFor their evaluation of long reordering errors in Arabic-English and German-English, Bisazza and Federico (2013) set the weights to 1 for verbs and 0 for all other words to only capture verb reordering errors. The resulting metric, KRS-V, rates a translation hypothesis as perfect when the translations of all source verbs are located in their correct position, regardless of the ordering of other words.\nIn a different approach, called RIBES, Isozaki et al. (2010a) propose to directly measure the reordering occurring between the words of the hypothesis and those of the reference translation, thereby eliminating the need to word-align input and output sentence. A limitation of this approach is that only identical words contribute to the score. As a solution, the permutation distance is multiplied by a word precision score that penalizes hypotheses containing few reference words. Nevertheless, the resulting metric assigns different scores to hypotheses that differ in their lexical choice, but not in their word reordering.\nTalbot et al. (2011) introduce yet another reordering-specific metric, called fuzzy reordering score (FRS) which, like the KRS, is independent from lexical choice and measures the similarity between a sentence\u2019s reference reordering and the reordering produced by an SMT system (or by a pre-ordering technique). However, while Birch,\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nOsborne, and Blunsom (2010) employed the Kendall\u2019s Tau between the two sentence permutations, Talbot et al. (2011) count the smallest number of chunks that the hypothesis permutation must be divided into to align with the reference permutation. This corresponds precisely to the fragmentation penalty of METEOR except that the alignment is performed between permutations and not between translations. Like METEOR, the FRS makes no difference between short and long-range reordering errors (cf. Table 3).\nStanojevic\u0301 and Sima\u2019an (2014b) argue for a hierarchical treatment of reordering evaluation, where word sequences can be grouped recursively into larger blocks. To this end, they factorize the output-reference reordering into a Permutation Tree (Zhang and Gildea 2007), whose nodes represent atomic permutations. Given this factorization, the counts of monotone (1 2) versus other permutation nodes \u2013 (2 1), (3 1 4 2), etc. \u2013 are used as features in a linear model of translation quality (BEER) trained to correlate with the human ranking of a set of MT system outputs. With reference to Table 3, the permutation trees of both hypothesis (a) and (b) would contain only one swapping node leading to the same reordering score. Stanojevic\u0301 and Sima\u2019an (2014a) extend this work with a stand-alone reordering metric that considers all possible tree factorizations of a permutation (permutation forest) and that gives recursively less importance to lower nodes in the tree (i.e. covering smaller spans). Hierarchical permutation metrics are shown to better correlate with human judgements than string-based permutation metrics like the Kendall\u2019s Tau distance K."}, {"heading": "4. Reordering Phenomena in Natural Languages", "text": "Understanding the complexity of reordering in a given language pair is key to selecting the right SMT models and to improving them. To date, word reordering phenomena in natural languages have mainly been analyzed from a quantitative perspective (Birch, Osborne, and Koehn 2008; Birch, Blunsom, and Osborne 2009). While measuring the amount of reordering is certainly important, understanding which kinds of reordering occur in a given language pair is also essential. To this end, we present a qualitative analysis of word reordering based on linguistic knowledge. More specifically, we draw on a large body of syntactic information collected by linguists from more than 1500 languages, and systematized in the World Atlas of Language Structures (WALS) (Dryer and Haspelmath 2011)17.\nFollowing the seminal work of the language typologist Matthew S. Dryer, we describe the word order profile of a language by the canonical orders of its constituent sets (word order features). The resulting language pair classification is primarily based on the order of subject, object and verb, and further refined according to the order of several other element pairs, such as noun-adjective, verb-negation, etc. We then compare the word order features of several languages that were studied in the SMT field, and show that empirical results generally confirm the existing theoretical knowledge."}, {"heading": "4.1 A qualitative analysis", "text": "The amount of word reordering found in a language pair is known to be a good predictor of SMT performance. Birch, Osborne, and Koehn (2008) considered three variables \u2013 reordering quantity, morphological complexity and historical relatedness \u2013 and found the first to have the highest correlation with the BLEU scores of a standard PSMT\n17 http://wals.info\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nsystem on a sample of 110 European language pairs. Birch, Blunsom, and Osborne (2009) further analyzed the distribution of different reordering widths in Arabic-English and Chinese-English, and the ability of two SMT approaches to model them. They found that the PSMT approach is more suitable for language pairs where most reordering is local (Arabic-English), while the hierarchical approach is stronger when medium-range reorderings are dominant (Chinese-English). Still, both approaches failed to capture most of the long-range reorderings found in the reference corpora.\nThese findings are indeed relevant to our work, but we believe there is also much to learn from theoretical linguistic knowledge. Moreover, a quantitative analysis can suffer from noise in the data, typically originating from automatic word alignments. While Birch, Blunsom, and Osborne (2009) used manual word alignment in their study, this kind of resource is available only for very few language pairs. Noise can also be due to what we can call \u2018optional\u2019 reordering: human translators often choose to restructure the sentence according to genre conventions or to their personal style, even when this is not required by the target language grammar. Here is an example:\nArabic sentence:\n\u00fa \u00af \u00e9 K AK. Q\u00aa \u00e9 K @ \u00fa\u00cd@ J K. B@ I J. \u00cb @ \u00e9 KPXA \u00aa\u00d3 \u00c9J J. \u00af\n\u00e1 \u00afAj \u00cb@ ( \u00e9 J 55 ) \u00f1K. \u00e0 A\u00d2\u00a3 \u00f0\n. \u201c @Yg. \u00e8YJ k. \u201d \u00e9m \u00f0 \u201c \u00e9\u00aa K @P \u201d \u00c8Ag"}, {"heading": "Literal translation:", "text": "Bush, aged 55, assured journalists before leaving the White House that he felt \u201cgreat\u201d and that his health was \u201cvery good\u201d."}, {"heading": "Human translation:", "text": "Before leaving the White House, Bush, aged 55, assured journalists that he felt \u201cgreat\u201d and that his health was \u201cvery good\u201d.\nAs also noted by Fox (2002), this kind of reordering is not strictly necessary to produce accurate and fluent translations, but its occurrence in parallel corpora affects the automatic reordering measures.\nOn the contrary, a qualitative analysis can profit from the extensive work done by linguists and grammaticians to abstract the fundamental properties of a language. In this section we draw largely on Dryer (2007) and on the sections of the WALS devoted to word order (Dryer (2011), ch. 81-97, 143-144)."}, {"heading": "4.2 Word order profiles", "text": "The word order profile of a language is determined by the canonical order of its constituent sets (word order features). In general, the basic or canonical order of a constituent set can be established by criteria of frequency (i. e. the most common), distribution (the one with the least restricted usage) or pragmatics (the neutral one) (Dryer 2007). Although some languages are said to have free (or flexible) order, it is often possible to detect one that is dominant and neutral. Consider for instance English, a subject-verb-object (SVO) language where other orders are used, but only to achieve specific emphasis or topicalization effects:\n(1) a. I saw the cat.\nb. The cat, I saw.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nHowever, there exist cases where no particular order can be defined as dominant. An example of mix-ordered constituent set in English is the pair noun and genitive:\n(2) a. the tail of the cat\nb. the cat\u2019s tail\nBased on Dryer (2007) and on the availability of data points in the WALS, we have established a set of 13 core features to determine the word order profile of a language. For the purpose of describing word order differences between language pairs, we have divided the features into two broad categories: clause-level and phrase-level18. An English example for each feature is provided in Table 5."}, {"heading": "Clause-level order features.", "text": "\u2022 Subject, Object, Verb [WALS feature 81A] The first and most important feature is the \u201cordering of subject, object, and verb in a transitive clause, more specifically declarative clauses in which both the subject and object involve a noun (and not just a pronoun)\u201d (Dryer 2011). For instance, English and French are SVO languages, while Turkish is SOV. The distribution of main word order types in a large sample of world languages is given in Table 4. This feature is often used alone to denote the word order profile of a language, because it can be a good predictor of several other features.\nOrder Languages SOV 565 41% SVO 488 35% VSO 95 7% VOS 25 2% OVS 11 1% OSV 4 <1%\nmixed/no-dominant 189 14% total sample size 1377\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\n\u2022 Polar Question Particle [92A] In many languages, polar (yes/no) questions are signaled by specific particles. This feature denotes their position in the sentence (not defined for English).\n\u2022 Content Question Phrase [93A] Content questions are characterized by the presence of an interrogative word or phrase (e.g. \u2018who\u2019, \u2018which one\u2019). In some languages, like English, these are always placed at the beginning of the sentence. In some others, like Turkish, they take the position of the constituent they replace: for instance, the word \u2018ne/what\u2019 replacing the object naturally occurs between subject and verb.\n\u2022 Negation and Verb [143A] Order of the negative word or morpheme19 with respect to the main verb. Note that more than one word or morpheme may be necessary to express negation (e. g. \u2018ne ... pas\u2019 in French)."}, {"heading": "Phrase-level order features.", "text": "\u2022 Noun and Adpositions [WALS feature 85A] Whether a language uses mainly prepositions or postpositions.\n\u2022 Noun and Genitive [86A] Order of genitive or possessor noun phrase with respect to the head noun.\n\u2022 Noun and Adjective [87A] Order of adjectives with respect to the noun they modify.\n\u2022 Noun and Demonstrative [88A] Order of demonstrative words (e.g. this, that) or affixes with respect to the noun they modify.\n\u2022 Noun and Numeral [89A] Order of cardinal number words with respect to the noun they modify.\n\u2022 Adjective and Degree Word [91A] Order of degree words (e.g. very, more) with respect to the adjective they modify.\nLanguage sample. For our study, we have chosen seven widely spoken languages. These are English, German, French, Arabic (Modern Standard), Turkish, Japanese and Chinese (Mandarin). Mainly based on the WALS, we have summarized the word order feature values for all these languages in Table 5. Whenever possible, features were assigned one (or two) values corresponding to the dominant order(s) in that language. When no particular order was given as dominant we marked it as \u2018mixed\u2019.\nThe main word order of German and Arabic deserves a special mention. In German, the positioning of subject, object and verb is syntactically determined: main clauses without auxiliary verb are SVO, while subordinate clauses and clauses containing an\n19 Unlike the WALS, we do not distinguish between negative words and affixes for this feature.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nauxiliary are SOV. A further complication, not marked in Table 5, is that the German finite verb must be placed in second position, in which case the pattern becomes SAuxOV, with the object intervening between auxiliary and main verb. As regards Arabic, while the WALS classifies Modern Standard Arabic as VSO, the corpora typically used in SMT show a very mixed distribution of VSO and SVO clauses.20 Carpuat, Marton, and Habash (2012) examined the Arabic-English Treebank21 and found that, when the subject is expressed, it follows the verb in 70% of the cases, but precedes it in 30%.\n20 VOS order is also admitted in Arabic, but only in specific contexts (e. g. when the object is expressed by a pronoun). 21 Corresponding to the Linguistic Data Consortium (LDC) code LDC2009E82.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nSimilarly, in the Pennsylvania Arabic Treebank22, they found an order distribution of 67% VS and 33% SV. Besides frequency, it can be noted that the SVO sentences attested in these corpora are in general pragmatically neutral. We believe that this variability in Modern Standard Arabic may be due to the effect of spoken language varieties such as Egyptian, Gulf, Kuwaiti, Iraqi (all listed as SVO by the WALS), and Syrian (listed as VSO/SVO). For these reasons, we classify Arabic as a mixed VSO/SVO language.\nIt is worth noting that our seven-language sample covers the main word order types of the large majority of the world languages: namely SOV, SVO and VSO (see Table 4)."}, {"heading": "4.3 Word order differences", "text": "Linguistically motivated word order profiles can be very helpful to anticipate the kind of word reordering problems that an SMT system will have to face. Clearly, these will also vary in relation to the genre (written news, speeches, etc.) and to the translation\u2019s style and degree of literality. However, we can reasonably expect the syntactic properties of two languages to determine the general reordering characteristics of that pair.\nWe will now confront the reordering characteristics of seven language pairs: English paired with the other six languages presented in Table 5, as well as the French and Arabic pair. To this end, we propose the following analysis procedure. As a first indication of reordering complexity, we look at the main word order feature (subject, object, verb). A difference at this level typically results in poor SMT performances. Then, we count the total number of discordant features. To simplify, if a particular element does not exist in a language (e. g. polar question particles in English) we count zero difference for that feature, and when one of the languages has a mixed order we count a half difference. We insist, however, on the qualitative nature of our analysis: numbers are only meaningful in combination with the list of specific discordant features, as these have different impact on word reordering. In particular, we find it essential for SMT to distinguish between clause-level and phrase-level differences (CDiff and PDiff) because the former account for most longer-range word movements, and the latter for the shorter. Thus, a language pair with only phrase-level discordant features is likely to be suitable for a PSMT approach, where reordering is managed through local distortion or inside translation units. On the contrary, the presence of many clauselevel differences typically calls for a tree-based solution, either at preprocessing or at decoding time. As we will see, some pairs lay on the borderline, with only one or few clause-level differences. Finally, it should be noted that, even among features of the same group, some have more impact on SMT than others due to their frequency or to the average length of their constituents. For instance, the order of noun and genitive is more important than that of adjective and degree word.\nEnglish and German [ Main order: different; CDiff=1.5; PDiff=0.5 ] The main word order of German is SVO or SOV according to the syntactic context (cf. Section 4.2). German also differs from English with respect to the position of oblique phrases and that of the negation: both fixed in English but mixed in German. At the phrase level, German predominantly places the genitive after the noun, while English displays both orders. Thus, despite belonging to the same family branch (Indo-European/Germanic), this pair displays complex reordering patterns. Indeed, German-English reorder-\n22 LDC code LDC2008E22.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\ning has been widely studied in SMT and is still an open topic. At the Workshop on Statistical Machine Translation 2014 (Bojar et al. 2014), a syntax-based stringto-tree SMT approach (Williams et al. 2014) was winning in both language directions (official results excluding online systems). However, at the International Workshop on Spoken Language Translation 2014 (Cettolo et al. 2014), the best submission was a combination of PSMT with by POS- and syntax-based preordering (Slawik et al. 2014), syntax-based SMT and factored PSMT (Birch et al. 2014).\nEnglish and French [ Main order: same; CDiff: 0.5; PDiff: 1.5 ] Most clause-level features have the same values in French as in English, except for the negation which is typically23 expressed by two words in French: one preceding and one following the verb. At the phrase level, differences are found in the location of genitives and adjectives. Thus, English and French have very similar clause-level orders, but reordering is abundant at the local level. This is a case where reordering is mostly well handled by string-based PSMT. As a reference, the three top English-to-French WMT14 systems (official results excluding online systems), were all phrase-based. A similar trend was observed in the French-to-English track. English and Arabic [ Main order: different; CDiff: 0.5; PDiff: 2.5 ] The dominant Arabic order is VSO, followed by SVO (cf. Section 4.2). Apart from this important difference, all other clause-level features agree between Arabic and English. At the phrase level, differences are found in genitives, adjectives and degree words. As a result, reordering is overwhelmingly local but few crucial long-range reorderings also regularly occur. Thus, this pair is challenging for PSMT but, at the same time, not well suited to a tree-based approach. As shown by Zollmann et al. (2008) and Birch, Blunsom, and Osborne (2009), PSMT performs similarly or better than HSMT for the Arabic-to-English language pair. However, HSMT was shown to better cope with the reordering of VSO sentences (Bisazza 2013). English and Turkish [ Main order: different; CDiff: 5.5; PDiff: 1.5 ] Turkish is a good example of verb-final language, except for the fact that it can employ both clause-final and clause-initial subordinators.24 As a result, almost all clause-level features are discordant in this pair. At the phrase level, Turkish mainly differs from English for the use of postpositions. Among the language pairs of our sample, this is one of the most difficult to reorder for an SMT system. The complex nature of its reordering phenomena makes it particularly suitable for tree-based SMT approaches. Although this language pair has been less studied than the others, we know from Ruiz et al. (2012) and Y\u0131lmaz et al. (2013) that HSMT can significantly outperform PSMT between Turkish and English. English and Japanese [ Main order: different; CDiff: 6; PDiff: 1.5 ] Japanese is the prototypical example of verb-final language. In this pair all clauselevel features are discordant, while at the phrase level, Japanese differs from English for the use of postpositions and the strictly head-final genitive construction.\n23 Pre-verbal negation can be omitted in colloquial French. 24 In Turkish, non-finite subordinate clauses are typically placed before the main clause and linked to it by a\nclause-final subordinator (e. g. rag\u030cmen/although), whereas finite subordinate clauses can be placed after the main clause and introduced by a clause-initial subordinator (e. g. ama/but). The former is dominant in written language.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nThis pair, like the previous one, is extremely challenging for PSMT due to the hierarchical nature of its reordering phenomena and the high frequency of long-range word movements. Indeed, translation between English and Japanese has spurred a remarkable amount of work on pre-ordering, post-ordering and decoding-time reordering. In 2013 the PatentMT evaluation campaign of the NTCIR conference (Goto et al. 2013) saw rule-based and hybrid systems largely outperform the purely statistical ones in Japanese-to-English. The highest-ranked SMT submission was actually a combination of three SMT systems including: a baseline PSMT method, a rule-based pre-ordering method, and a post-ordering method based on string-to-tree syntax-based SMT (Sudoh et al. 2013). Interestingly, the trends were different in the opposite translation direction, English-to-Japanese, where all rule-based MT systems were significantly outperformed by a PSMT system that performed pre-ordering of the English input with few manual rules for head finalization based on dependency parse trees (Sudoh et al. 2013).\nEnglish and Chinese [ Main order: same; CDiff: 3.5; PDiff: 1 ] Despite belonging to the same main order type, these two languages differ in the positioning of oblique phrases, relative clauses, interrogative phrases and subordinating words.25 Moreover, word order variations are quite common in Chinese to mark the topic of a sentence \u2013 i.e. what is being talked about. Comparing the two languages at the phrase level, we find partial disagreement in the use of genitive and adpositions (Chinese has both prepositions and postpositions). Thus, this pair too is characterized by very complex reordering, hardly manageable by a PSMT system. This is confirmed by a number of empirical results showing that tree-based approaches (particularly HSMT) consistently outperform PSMT in Chinese-to-English evaluations (Zollmann et al. 2008; Birch, Blunsom, and Osborne 2009). It is worth noting that translation between Chinese and English has been the main motivation and test bed for the development of HSMT. French and Arabic [ Main order: different; CDiff: 1.5; PDiff: 1 ] This pair displays the same clause-level differences as the English-Arabic pair. On the other hand, phrase-level order is notably more similar, with only one discordant feature of minor importance (adjective and degree word). Less research was published on this language pair. Nevertheless, Hasan and Ney (2008) and Schwenk and Senellart (2009) chose a PSMT approach to experiment with an Arabic-to-French task.\nFigure 9 illustrates the reordering characteristics of three of these language pairs, by means of examples taken from parallel corpora automatically word-aligned with GIZA++ (intersection of direct and inverse alignments). On the first row, we see two English-German sentence pairs: in both cases, most of the points lie close to the diagonal representing an overall monotonic translation, whereas few isolated points denote the very long-range reordering of verbs. Similarly, in the two English-Arabic sentence pairs, we mostly observe local reorderings, with the exception of few isolated points corresponding to the Arabic clause-initial verbs. Finally, the two Turkish-English examples display global reordering, due to the high number of clause-level order differences.\nWhere possible, it can be interesting to relate our analysis with previously published measures of reordering based on parallel data. To our knowledge, the most comprehen-\n25 Subordinating words in Chinese can occur at the beginning of the subordinate clause, at its end, or even inside it (Li 2008).\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nEnglish and German:\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nsive results of this kind are reported by Birch (2011), who assumes that reordering is a binary process occurring between two blocks that are adjacent in the source (cf. ITG constraints in Section 2.1). Here, the general amount of reordering in a language pair is estimated by the RQuantity, defined as the sum of the spans of all the reordering blocks on the target side, normalized by the length of the target sentence and averaged over a corpus. Based on the Europarl corpus (Koehn 2002) and automatic word alignments, Birch (2011) reports average RQuantity values of 0.586/0.608 in English-toGerman/German-to-English, versus only 0.402/0.395 in English-to-French/French-toEnglish. The manually-aligned GALE corpus (LDC2006E93) is instead used to measure the distribution of reordering widths, defined as the sum of the swapped blocks\u2019 target spans. Widths are binned into short (2-4), medium (5-8), and long (>8). In Chinese-toEnglish there are about 0.8/0.9/0.9 short/medium/long reordered blocks per sentence, while in Arabic-to-English there are 1.1/0.4/0.2. These figures align nicely with our classification of phrase- and clause-level differences, which we have related to longer and shorter-range reordering respectively: Chinese-to-English (PDiff: 1, CDiff: 3.5) displays much more reordering overall, while Arabic-to-English (PDiff: 2.5, CDiff: 0.5) has more short reorderings but much less medium and short.\nCompared to data-driven reordering measures, though, our proposed analysis has a number of advantages: it can be easily extended to other language pairs thanks to the wide coverage of WALS, it does not depend on the availability of (preferably wordaligned) parallel corpora, and it is not affected by genre differences in the data, which make it hard to compare a wide range of language pairs, beyond those covered by Europarl."}, {"heading": "5. Discussion and conclusions", "text": "We have provided a comprehensive overview of how the word reordering problem is modeled within different string-based and tree-based SMT frameworks, and as a standalone task. To summarize, string-based SMT considers all permutations of the source sentence and relies on separate reordering models to score them. On the other hand, tree-based SMT models reordering jointly with translation and, during decoding, only considers permutations that are licensed by the learnt translation model. In practice, both approaches may apply heuristic constraints on the maximum reordering width (e. g. distortion limit or span constraint) to avoid explosion of the search space.\nThe main weakness of a string-based approach like phrase-based SMT (PSMT) with regard to reordering lies in its coarse definition of the reordering search space. In this framework, relaxing the distortion limit means dramatically increasing the size of the search space, making the reordering model\u2019s task extremely complex and intensifying the risk of both search and model errors. As a result, PSMT is generally good at handling local reordering but largely fails to capture long-range reordering.\nAs for tree-based SMT, a distinction must be made between methods that extract hierarchical structure directly from parallel data and methods that rely on syntactic annotation provided by pre-trained monolingual parsers. A prominent example of the former is hierarchical phrase-based SMT (HSMT), which models reordering via partially lexicalized translation rules. While this results in a more principled definition of the reordering search space, HSMT lacks the ability to generalize the learnt reordering patterns from specific lexical clues to whole word or phrase categories.\nFinally, reordering may be constrained by a syntactic parse tree of the input. In this framework, reordering is performed by permuting the nodes of the tree, guided by the syntactic labels of such nodes. This strategy is adopted by syntax-based SMT,\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT\nwhere the tree is reordered and translated simultaneously, and by syntactic pre-ordering (or post-ordering) methods, where the tree is transformed before (or after) translation. The success of these approaches largely depends on the degree of isomorphism of the modeled language pair, as well as on the parser\u2019s performance, which can vary substantially across languages.\nAfter describing how word reordering is modeled in SMT, we have questioned why different language pairs appear to need different reordering modeling solutions. To answer this question, we have outlined the word order profiles of seven widely spoken languages, based on a large body of linguistic knowledge. Then we have examined their pairwise differences in detail. Finally, we have used these differences to interpret the empirical findings of previous work that evaluated various SMT reordering techniques in those language pairs.\nWe conclude from our analysis that a few linguistic facts can be very useful to predict the reordering characteristics of a language pair and to select the SMT approach that best suits them. In particular, string-based PSMT is preferable for language pairs with only constituent-level differences, like French-English, as these mostly imply short or medium-range reordering patterns that can be captured by local distortion. On the other hand, language pairs with many clause-level order differences (e. g. JapaneseEnglish, Turkish-English, Chinese-English) are best handled by tree-based SMT or syntax-based pre-/post-ordering approaches that can handle complex, hierarchical reordering patterns. While this may seem obvious, we notice that, in the literature, the choice of an optimal SMT framework for a new translation task has been often driven by costly empirical trials rather than by linguistic knowledge. Finally, the pairs with mostly constituent-level differences and only one or few clause-level differences (e. g. German-English and Arabic-English) do not fit well into either category. In sentences without global reordering, HSMT can underperform PSMT, likely due to a much larger search space. At the same time, applying PSMT to such pairs with heuristic reordering constraints can lead to systematic errors in the positioning of important elements of the sentence, like verbs. Not surprisingly, these language pairs have been the object of a fair amount work aiming at refining the reordering space of both PSMT and HSMT.\nOur word order analysis can be easily extended to other language pairs using the methodology presented in Section 4.\nIn conclusion, finding a definitive solution to the problem of word reordering implies answering the fundamental research questions of SMT: Is structure needed to translate? If so, what kind of structure and how should it be used? A growing part of the research community has converged on a positive answer to the first question, however the other questions remain open to date. While the field keeps evolving around these questions, SMT has already reached the stage of applied language technology. We hope this survey will provide practical guidelines to the system developers of today and, at the same time, good scientific references to the researchers elaborating the solutions of tomorrow."}, {"heading": "Aknowledgments", "text": "We would like to thank Alexandra Birch, Marta R. Costa-juss\u00e0, Nadir Durrani, Chris Dyer, Adri\u00e0 de Gispert, Isao Goto, Spence Green, Zhongqiang Huang, Maxim Khalilov, Graham Neubig, Khalil Sima\u2019an, Milo\u0161 Stanojevic\u0301, Katsuhito Sudoh, Christoph Tillmann, Taro Watanabe and Richard Zens for providing valuable feedback on an earlier version of this survey.\nA. Bisazza and M. Federico A Survey of Word Reordering in SMT"}], "references": [], "referenceMentions": [], "year": 2017, "abstractText": "Word reordering is one of the most difficult aspects of statistical machine translation (SMT), and an important factor of its quality and efficiency. Despite the vast amount of research published to date, the interest of the community in this problem has not decreased, and no single method appears to be strongly dominant across language pairs. Instead, the choice of the optimal approach for a new translation task still seems to be mostly driven by empirical trials. To orientate the reader in this vast and complex research area, we present a comprehensive survey of word reordering viewed as a statistical modeling challenge and as a natural language phenomenon. The survey describes in detail how word reordering is modeled within different string-based and tree-based SMT frameworks and as a stand-alone task, including systematic overviews of the literature in advanced reordering modeling. We then question why some approaches are more successful than others in different language pairs. We argue that, besides measuring the amount of reordering, it is important to understand which kinds of reordering occur in a given language pair. To this end, we conduct a qualitative analysis of word reordering phenomena in a diverse sample of language pairs, based on a large collection of linguistic knowledge. Empirical results in the SMT literature are shown to support the hypothesis that a few linguistic facts can be very useful to anticipate the reordering characteristics of a language pair and to select the SMT framework that best suits them.", "creator": "LaTeX with hyperref package"}}}