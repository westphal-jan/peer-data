{"id": "1504.04666", "review": {"conference": "HLT-NAACL", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Apr-2015", "title": "Unsupervised Dependency Parsing: Let's Use Supervised Parsers", "abstract": "we describe minimal factor - training companion to utilizing dependency parsing scheme reuses algebraic methods and intentionally interacting agents. since approach, called ` iterated reranking'( 2013 ), builds on dependency curves compiled by primitive intrinsic parser, would iteratively generate inclusion trees using relatively nonlinear probability models grown in supervised computation whereas are in turn trained on utility trees. our index contains 1. 8 % accuracy higher among the state - < - any - fund parser, spitkovsky et al. ( 2013 ) above the wsj scheme.", "histories": [["v1", "Sat, 18 Apr 2015 00:23:16 GMT  (83kb,D)", "http://arxiv.org/abs/1504.04666v1", "11 pages"]], "COMMENTS": "11 pages", "reviews": [], "SUBJECTS": "cs.CL cs.LG", "authors": ["phong le", "willem h zuidema"], "accepted": true, "id": "1504.04666"}, "pdf": {"name": "1504.04666.pdf", "metadata": {"source": "CRF", "title": "Unsupervised Dependency Parsing: Let\u2019s Use Supervised Parsers", "authors": ["Phong Le", "Willem Zuidema"], "emails": ["p.le@uva.nl", "zuidema@uva.nl"], "sections": [{"heading": "1 Introduction", "text": "Unsupervised dependency parsing and its supervised counterpart have many characteristics in common: they take as input raw sentences, produce dependency structures as output, and often use the same evaluation metric (DDA, or UAS, the percentage of tokens for which the system predicts the correct head). Unsurprisingly, there has been much more research on supervised parsing \u2013 producing a wealth of models, datasets and training techniques \u2013 than on unsupervised parsing, which is more difficult, much less accurate and generally uses very simple probability models. Surprisingly, however, there have been no reported attempts to reuse supervised approaches to tackle the unsupervised parsing problem (an idea briefly mentioned in Spitkovsky et al. (2010b)).\nThere are, nevertheless, two aspects of supervised parsers that we would like to exploit in an unsupervised setting. First, we can increase the model ex-\npressiveness in order to capture more linguistic regularities. Many recent supervised parsers use thirdorder (or higher order) features (Koo and Collins, 2010; Martins et al., 2013; Le and Zuidema, 2014) to reach state-of-the-art (SOTA) performance. In contrast, existing models for unsupervised parsing limit themselves to using simple features (e.g., conditioning on heads and valency variables) in order to reduce the computational cost, to identify consistent patterns in data (Naseem, 2014, page 23), and to avoid overfitting (Blunsom and Cohn, 2010). Although this makes learning easier and more efficient, the disadvantage is that many useful linguistic regularities are missed: an upper bound on the performance of such simple models \u2013 estimated by using annotated data \u2013 is 76.3% on the WSJ corpus (Spitkovsky et al., 2013), compared to over 93% actual performance of the SOTA supervised parsers.\nSecond, we would like to make use of information available from lexical semantics, as in Bansal et al. (2014), Le and Zuidema (2014), and Chen and Manning (2014). Lexical semantics is a source for handling rare words and syntactic ambiguities. For instance, if a parser can identify that \u201che\u201d is a dependent of \u201cwalks\u201d in the sentence \u201cHe walks\u201d, then, even if \u201cshe\u201d and \u201cruns\u201d do not appear in the training data, the parser may still be able to recognize that \u201cshe\u201d should be a dependent of \u201cruns\u201d in the sentence \u201cshe runs\u201d. Similarly, a parser can make use of the fact that \u201csauce\u201d and \u201cJohn\u201d have very different meanings to decide that they have different heads in the two phrases \u201cate spaghetti with sauce\u201d and \u201cate spaghetti with John\u201d.\nHowever, applying existing supervised parsing\nar X\niv :1\n50 4.\n04 66\n6v 1\n[ cs\n.C L\n] 1\n8 A\npr 2\ntechniques to the task of unsupervised parsing is, unfortunately, not trivial. The reason is that those parsers are optimally designed for being trained on manually annotated data. If we use existing unsupervised training methods (like EM), learning could be easily misled by a large amount of ambiguity naturally embedded in unannotated training data. Moreover, the computational cost could rapidly increase if the training algorithm is not designed properly. To overcome these difficulties we propose a framework, iterated reranking (IR), where existing supervised parsers are trained without the need of manually annotated data, starting with dependency trees provided by an existing unsupervised parser as initialiser. Using this framework, we can employ the work of Le and Zuidema (2014) to build a new system that outperforms the SOTA unsupervised parser of Spitkovsky et al. (2013) on the WSJ corpus.\nThe contribution of this paper is twofold. First, we show the benefit of using lexical semantics for the unsupervised parsing task. Second, our work is a bridge connecting the two research areas unsupervised parsing and its supervised counterpart. Before going to the next section, in order to avoid confusion introduced by names, it is worth noting that we use un-trained existing supervised parsers which will be trained on automatically annotated treebanks."}, {"heading": "2 Related Work", "text": ""}, {"heading": "2.1 Unsupervised Dependency Parsing", "text": "The first breakthrough was set by Klein and Manning (2004) with their dependency model with valence (DMV), the first model to outperform the right-branching baseline on the DDA metric: 43.2% vs 33.6% on sentences up to length 10 in the WSJ corpus. Nine years later, Spitkovsky et al. (2013) achieved much higher DDAs: 72.0% on sentences up to length 10, and 64.4% on all sentences in section 23. During this period, many approaches have been proposed to attempt the challenge.\nNaseem and Barzilay (2011), Tu and Honavar (2012), Spitkovsky et al. (2012), Spitkovsky et al. (2013), and Marecek and Straka (2013) employ extensions of the DMV but with different learning strategies. Naseem and Barzilay (2011) use semantic cues, which are event annotations from an outof-domain annotated corpus, in their model during\ntraining. Relying on the fact that natural language grammars must be unambiguous in the sense that a sentence should have very few correct parses, Tu and Honavar (2012) incorporate unambiguity regularisation to posterior probabilities. Spitkovsky et al. (2012) bootstrap the learning by slicing up all input sentences at punctuation. Spitkovsky et al. (2013) propose a complete deterministic learning framework for breaking out of local optima using count transforms and model recombination. Marecek and Straka (2013) make use of a large raw text corpus (e.g., Wikipedia) to estimate stop probabilities, using the reducibility principle.\nDiffering from those works, Bisk and Hockenmaier (2012) rely on Combinatory Categorial Grammars with a small number of hand-crafted general linguistic principles; whereas Blunsom and Cohn (2010) use Tree Substitution Grammars with a hierarchical non-parametric Pitman-Yor process prior biasing the learning to a small grammar."}, {"heading": "2.2 Reranking", "text": "Our work relies on reranking which is a technique widely used in (semi-)supervised parsing. Reranking requires two components: a k-best parser and a reranker. Given a sentence, the parser generates a list of k best candidates, the reranker then rescores those candidates and picks the one that has the highest score. Reranking was first successfully applied to supervised constituent parsing (Collins, 2000; Charniak and Johnson, 2005). It was then employed in the supervised dependency parsing approaches of Sangati et al. (2009), Hayashi et al. (2013), and Le and Zuidema (2014).\nClosest to our work is the work series on semisupervised constituent parsing of McClosky and colleagues, e.g. McClosky et al. (2006), using selftraining. They use a k-best generative parser and a discriminative reranker to parse unannotated sentences, then add resulting parses to the training treebank and re-train the reranker. Different from their work, our work is for unsupervised dependency parsing, without manually annotated data, and uses iterated reranking instead of single reranking. In addition, both two components, k-best parser and reranker, are re-trained after each iteration."}, {"heading": "3 The IR Framework", "text": "Existing training methods for the unsupervised dependency task, such as Blunsom and Cohn (2010), Gillenwater et al. (2011), and Tu and Honavar (2012), are hypothesis-oriented search with the EM algorithm or its variants: training is to move from a point which represents a model hypothesis to another point. This approach is feasible for optimising models using simple features since existing dynamic programming algorithms can compute expectations, which are sums over all possible parses, or to find the best parse in the whole parse space with low complexities. However, the complexity increases rapidly if rich, complex features are used. One way to reduce the computational cost is to use approximation methods like sampling as in Blunsom and Cohn (2010)."}, {"heading": "3.1 Treebank-oriented Greedy Search", "text": "Believing that the difficulty of using EM is from the fact that treebanks are \u2018hidden\u2019, leading to the need of computing sum (or max) overall possible treebanks, we propose a greedy local search scheme based on another training philosophy: treebankoriented search. The key idea is to explicitly search for concrete treebanks which are used to train parsing models. This scheme thus allows supervised parsers to be trained in an unsupervised parsing setting since there is a (automatically annotated) treebank at any time.\nGiven S a set of raw sentences, the search space consists of all possible treebanksD = {d(s)|s \u2208 S} where d(s) is a dependency tree of sentence s. The target of search is the optimal treebank D\u2217 that is as good as human annotations. Greedy search with this philosophy is as follows: starting at an initial point D1, we pick up a point D2 among its neighbours N(D1) such that\nD2 = arg max D\u2208N(D1) fD1(D) (1)\nwhere fD1(D) is an objective function measuring the goodness of D (which may or may not be conditioned on D1). We then continue this search until some stop criterion is satisfied. The crucial factor here is to define N(Di) and fDi(D). Below are two special cases of this scheme.\nSemi-supervised parsing using reranking (McClosky et al., 2006). This reranking is indeed onestep greedy local search. In this scenario, N(D1) is the Cartesian product of k-best lists generated by a k-best parser, and fDi(D) is a reranker.\nUnsupervised parsing with hard-EM (Spitkovsky et al., 2010b) In hard-EM, the target is to maximise the following objective function with respect to a parameter set \u0398\nL(S|\u0398) = \u2211 s\u2208S max d\u2208Dep(s) logP\u0398 ( d )\n(2)\nwhere Dep(s) is the set of all possible dependency structures of s. The two EM steps are thus\n\u2022 Step 1: Di+1 = arg maxD P\u0398i(D)\n\u2022 Step 2: \u0398i+1 = arg max\u0398 P\u0398(Di+1)\nIn this case, N(Di) is the whole treebank space and fDi(D) = P\u0398i(D) = Parg max\u0398 P\u0398(Di)(D)."}, {"heading": "3.2 Iterated Reranking", "text": "We instantiate the greedy search scheme by iterated reranking which requires two components: a k-best parser P , and a reranker R. Firstly, D1 is used to train these two components, resulting in P1 and R1. The parser P1 then generates a set of lists of k candidates kD1 (whose Cartesian product results in N(D1)) for the set of training sentences S. The best candidates, according to reranker R1, are collected to form D2 for the next iteration. This process is halted when a pre-defined stop criterion is met.1\nIt is certain that we can, as in the work of Spitkovsky et al. (2010b) and many bootstrapping approaches, employ only parser P . Reranking, however, brings us two benefits. First, it allows us to employ very expressive models like the \u221e-order generative model proposed by Le and Zuidema (2014). Second, it embodies a similar idea to co-training (Blum and Mitchell, 1998): P and R play roles as two views of the data.\n1It is worth noting that, although N(Di) has the size O(kn) where n is the number of sentences, reranking only needs to process O(k \u00d7 n) parses if these sentences are assumed to be independent."}, {"heading": "3.3 Multi-phase Iterated Reranking", "text": "Training in machine learning often uses starting big which is to use up all training data at the same time. However, Elman (1993) suggests that in some cases, learning should start by training simple models on small data and then gradually increase the model complexity and add more difficult data. This is called starting small.\nIn unsupervised dependency parsing, starting small is intuitive. For instance, given a set of long sentences, learning the fact that the head of a sentence is its main verb is difficult because a long sentence always contains many syntactic categories. It would be much easier if we start with only lengthone sentences, e.g \u201cLook!\u201d, since there is only one choice which is usually a verb. This training scheme was successfully applied by Spitkovsky et al. (2010a) under the name: Baby Step.\nWe adopt starting small to construct the multiphase iterated reranking (MPIR) framework. In phase 0, a parser M with a simple model is trained on a set of short sentences S(0) as in traditional approaches. This parser is used to parse a larger set of sentences S(1) \u2287 S(0), resulting in D(1)1 . D (1) 1 is then used as the starting point for the iterated reranking in phase 1. We continue this process until phase N finishes, with S(i) \u2287 S(i\u22121) (i = 1..N ). In general, we use the resulting reranker in the previous phase to generate the starting point for the iterated reranking in the current phase."}, {"heading": "4 Le and Zuidema (2014)\u2019s Reranker", "text": "Le and Zuidema (2014)\u2019s reranker is an exception among supervised parsers because it employs an extremely expressive model whose features are \u221e- order2. To overcome the problem of sparsity, they introduced the inside-outside recursive neural network (IORNN) architecture that can estimate treegenerating models including those proposed by Eisner (1996) and Collins (2003a)."}, {"heading": "4.1 The\u221e-order Generative Model", "text": "Le and Zuidema (2014)\u2019s reranker employs the generative model proposed by Eisner (1996). Intuitively, this model is top-down: starting with ROOT,\n2In fact, the order is finite but unbound.\nwe generate its left dependents and its right dependents. We then generate dependents for each ROOT\u2019s dependent. The generative process recursively continues until there is no dependent to generate. Formally, this model is described by the following formula\nP (d(H)) = L\u220f l=1 P ( HLl |C(HLl ) ) P ( d(HLl ) ) \u00d7\nR\u220f r=1 P ( HRr |C(HRr ) ) P ( d(HRr ) ) (3)\nwhere H is the current head, d(N) is the fragment of the dependency parse rooted at N , and C(N) is the context to generate N . HL, HR are respectively H\u2019s left dependents and right dependents, plus EOC (End-Of-Children), a special token to inform that there are no more dependents to generate. Thus, P (d(ROOT )) is the probability of generating the entire dependency structure d.\nLe and Zuidema\u2019s \u221e-order generative model is defined as Eisner\u2019s model in which the context C\u221e(D) to generate D contains all of D\u2019s generated siblings, its ancestors and their siblings. Because of very large fragments that contexts are allowed to hold, traditional count-based methods are impractical (even if we use smart smoothing techniques). They thus introduced the IORNN architecture to estimate the model."}, {"heading": "4.2 Estimation with the IORNN", "text": "An IORNN (Figure 1) is a recursive neural network whose topology is a tree. What make this network different from traditional RNNs (Socher et al., 2010) is that each tree node u caries two vectors: iu - the inner representation, represents the content of the\nphrase covered by the node, and ou - the outer representation, represents the context around that phrase. In addition, information in an IORNN is allowed to flow not only bottom-up as in RNNs, but also topdown. That makes IORNNs a natural tool for estimating top-down tree-generating models.\nApplying the IORNN architecture to dependency parsing is straightforward, along the generative story of the \u221e-order generative model. First of all, the \u201cinside\u201d part of this IORNN is simpler than what is depicted in Figure 1: the inner representation of a phrase is assumed to be the inner representation of its head. This approximation is plausible since the meaning of a phrase is often dominated by the meaning of its head. The inner representation at each node, in turn, is a function of a vector representation for the word (in our case, the word vectors are initially borrowed from Collobert et al. (2011)), the POS-tag and capitalisation feature.\nWithout loss of generality and ignoring directions for simplicity, they assume that the model is generating dependent u for node h conditioning on context C\u221e(u) which contains all of u\u2019s ancestors (including h) and theirs siblings, and all of previously generated u\u2019s sisters. Now there are two types of contexts: full contexts of heads (e.g., h) whose dependents are being generated, and contexts to generate nodes (e.g., C\u221e(u)). Contexts of the first type are clearly represented by outer representations. Contexts of the other type are represented by partial outer representations, denoted by o\u0304u. Because the context to generate a node can be constructed recursively by combining the full context of its head and its previously generated sisters, they can compute o\u0304u as a function of oh and the inner representations of its previously generated sisters. On the top of o\u0304u, they put a softmax layer to estimate the probability P (x|C\u221e(u)).\nTraining this IORNN is to minimise the cross entropy over all dependents. This objective function is indeed the negative log likelihood P (D) of training treebank D."}, {"heading": "4.3 The Reranker", "text": "Le and Zuidema\u2019s (generative) reranker is given by\nd\u2217 = arg max d\u2208kDep(s) P (d)\nwhere P (Equation 3) is computed by the \u221e-order generative model which is estimated by an IORNN; and kDep(s) is a k-best list."}, {"heading": "5 Complete System", "text": "Our system is based on the multi-phase IR. In general, any third-party parser for unsupervised dependency parsing can be used in phase 0, and any thirdparty parser that can generate k-best lists can be used in the other phases. In our experiments, for phase 0, we choose the parser using an extension of the DMV model with stop-probability estimates computed on a large corpus proposed by Marecek and Straka (2013). This system has a moderate performance3 on the WSJ corpus: 57.1% vs the SOTA 64.4% DDA of Spitkovsky et al. (2013). For the other phases, we use the MSTParser4 (with the second-order feature mode) (McDonald and Pereira, 2006).\nOur system uses Le and Zuidema (2014)\u2019s reranker (Section 4.3). It is worth noting that, in this case, each phase with iterated reranking could be seen as an approximation of hard-EM (see Equation 2) where the first step is replaced by\nDi+1 = arg max D\u2208N(Di) P\u0398i(D) (4)\nIn other words, instead of searching over the treebank space, the search is limited in a neighbour set N(Di) generated by k-best parser Pi."}, {"heading": "5.1 Tuning Parser P", "text": "Parser Pi trained onDi defines neighbour set N(Di) which is the Cartesian product of the k-best lists in kDi. The position and shape of N(Di) is thus determined by two factors: how well Pi can fit Di, and k. Intuitively, the lower the fitness is, the more N(Di) goes far away fromDi; and the larger k is, the larger\n3Marecek and Straka (2013) did not report any experimental result on the WSJ corpus. We use their source code at http: //ufal.mff.cuni.cz/udp with the setting presented in Section 6.1. Because the parser does not provide the option to parse unseen sentences, we merge the training sentences (up to length 15) to all the test sentences to evaluate its performance. Note that this result is close to the DDA (55.4%) that the authors reported on CoNLL 2007 English dataset, which is a portion of the WSJ corpus.\n4http://sourceforge.net/projects/ mstparser/\nN(Di) is. Moreover, the diversity of N(Di) is inversely proportional to the fitness. When the fitness decreases, patterns existing in the training treebank become less certain to the parser, patterns that do not exist in the training treebank thus have more chances to appear in k-best candidates. This leads to high diversity of N(Di). We blindly set k = 10 in all of our experiments.\nWith the MSTParser, there are two hyperparameters: itersMST, the number of epochs, and training-kMST, the k-best parse set size to create constraints during training. training-kMST is always 1 because constraints from k-best parses with almost incorrect training parses are useless.\nBecause itersMST controls the fitness of the parser to training treebank Di, it, as pointed out above, determines the distance from N(Di) to Di and the diversity of the former. Therefore, if we want to encourage the local search to explore more distant areas, we should set itersMST low. In our experiments, we test two strategies: (i) MaxEnc, itersMST = 1, maximal encouragement, and (ii) MinEnc, itersMST = 10, minimal encouragement."}, {"heading": "5.2 Tuning Reranker R", "text": "Tuning the reranker R is to set values for dimIORNN, the dimensions of inner and outer representations, and itersIORNN, the number of epochs to train the IORNN. Because the\u221e-order model is very expressive and feed-forward neural networks are universal approximators (Cybenko, 1989), the reranker is capable of perfectly remembering all training parses. In order to avoid this, we set dimIORNN = 50, and set itersIORNN = 5 for very early stopping."}, {"heading": "5.3 Tuning multi-phase IR", "text": "Because Marecek and Straka (2013)\u2019s parser does not distinguish training data from test data, we postulate S0 = S1. Our system has N phases such that S0,S1 contain all sentences up to length l1 = 15, Si (i = 2..N ) contains all sentences up to length li = li\u22121 + 1, and SN contains all sentences up to length 25. Phase 1 halts after 100 iterations whereas all the following phases run with one iteration. Note that we force the local search in phase 1 to run intensively because we hypothesise that most of the important patterns for dependency parsing can be found within short sentences."}, {"heading": "6 Experiments", "text": ""}, {"heading": "6.1 Setting", "text": "We use the Penn Treebank WSJ corpus: sections 02-21 for training, and section 23 for testing. We then apply the standard pre-processing5 for unsupervised dependency parsing task (Klein and Manning, 2004): we strip off all empty sub-trees, punctuation, and terminals (tagged # and $) not pronounced where they appear; we then convert the remaining trees to dependencies using Collins\u2019s head rules (Collins, 2003b). Both word forms and gold POS tags are used. The directed dependency accuracy (DDA) metric is used for evaluation.\nThe vocabulary is taken as a list of words occurring more than two times in the training data. All other words are labelled \u2018UNKNOWN\u2019 and every digit is replaced by \u20180\u2019. We initialise the IORNN with the 50-dim word embeddings from Collobert et al. (2011) 6 , and train it with the learning rate 0.1,"}, {"heading": "6.2 Results", "text": "We compare our system against recent systems (Table 1 and Section 2.1). Our system with the two encouragement levels, MinEnc and MaxEnc, achieves the highest reported DDAs on section 23: 1.8% and 1.2% higher than Spitkovsky et al. (2013) on all sentences and up to length 10, respectively. Our improvements over the system\u2019s initialiser (Marecek and Straka, 2013) are 9.1% and 4.4%."}, {"heading": "6.3 Analysis", "text": "In this section, we analyse our system along two aspects. First, we examine three factors which determine the performance of the whole system: encouragement level, lexical semantics, and starting point. We then search for what IR (with the MaxEnc option) contributes to the overall performance by comparing the quality of the treebank resulted in the end of phase 1 against the quality of the treebank given by its initialier, i.e. Marecek and Straka (2013).\nThe effect of encouragement level Figure 2 shows the differences in DDA between using MaxEnc and MinEnc in each phase: we com5http://www.cs.famaf.unc.edu.ar/ \u02dcfrancolq/en/proyectos/dmvccm 6http://ml.nec-labs.com/senna/. These word embeddings were unsupervisedly learnt from Wikipedia.\npute DDAMaxEnc\u2212DDAMinEnc of each phase on its training set (e.g., phase 3 with S(3) containing all training sentences up to length 17). MinEnc outperforms MaxEnc within phases 1, 2, 3, and 4. However, from phase 5, the latter surpasses the former. It suggests that exploring areas far away from the current point with long sentences is risky. The reason is that long sentences contain more ambiguities than short ones; thus rich diversity, high difference from the current point, but small size (i.e., small k) could easily lead the learning to a wrong path.\nThe performance of the system with the two encouragement levels on section 23 (Table 1) also suggests the same. MaxEnc strategy helps the system achieve the highest accuracy on short sentences (up to length 10). However, it is less helpful than MinEnc when performing on long sentences.\nThe role of lexical semantics\nWe examine the role of the lexical semantics, which is given by the word embeddings. Figure 3 shows DDAs on training sentences up to length 15 (i.e. S(1)) of phase 1 (MaxEnc) with and without the word-embeddings. With the wordembeddings, phase 1 achieves 71.11%. When the word-embeddings are not given, i.e. the IORNN uses randomly generated word vectors, the accuracy drops 4.2%. It shows that lexical semantics plays a decisive role in the performance of the system.\nHowever, it is worth noting that, even without that knowledge (i.e., with the\u221e-order generative model alone), the DDA of phase 1 is 2% higher than before being trained (66.89% vs 64.9%). It suggests that phase 1 is capable of discovering some useful dependency patterns that are invisible to the parser in phase 0. This, we conjecture, is thanks to high-order features captured by the IORNN.\nThe importance of the starting point\nStarting point is claimed to be important in local search. We examine this by using three different parsers in phase 0: (i) MS (Marecek and Straka,\n2013), the parser used in the previous experiments, (ii) GGGPT (Gillenwater et al., 2011)7 employing an extension of the DMV model and posterior regularization framework for training, and (iii) Harmonic, the harmonic initializer proposed by Klein and Manning (2004).\nFigure 4 shows DDAs of phase 1 (MaxEnc) on training sentences up to length 15 with three starting-points given by those parsers. Starting point is clearly very important to the performance of the iterated reranking: the better the starting point is, the higher performance phase 1 has. However, a remarkable point here is that the iterated reranking of phase 1 always finds out more useful patterns for parsing whatever the starting point is in this experiment. It is certainly due to the high order features and lexical semantics, which are not exploited in those parsers.\nThe contribution of Iterated Reranking We compare the quality of the treebank resulted in the end of phase 1 against the quality of the treebank given by the initialier Marecek and Straka (2013). Figure 5 shows precision (top) and recall (bottom)\n7code.google.com/p/pr-toolkit\nover binned HEAD distance. IR helps to improve the precision on all distance bins, especially on the bins corresponding to long distances (\u2265 3). The recall is also improved, except on the bin corresponding to\u2265 7 (but the F1-score on this bin is increased). We attribute this improvement to the\u221e-order model which uses very large fragments as contexts thus be able to capture long dependencies.\nFigure 6 shows the correct-head accuracies over POS-tags. IR helps to improve the accuracies over almost all POS-tags, particularly nouns (e.g. NN, NNP, NNS), verbs (e.g. VBD, VBZ, VBN, VBG) and adjectives (e.g. JJ, JJR). However, as being affected by the initializer, IR performs poorly on conjunction (CC) and modal auxiliary (MD). For instance, in the treebank given by the initializer, almost all modal auxilaries are dependents of their verbs instead of the other way around."}, {"heading": "7 Discussion", "text": "Our system is different from the other systems shown in Table 1 as it uses an extremely expressive model, the\u221e-order generative model, in which conditioning contexts are very large fragments. Only the work of Blunsom and Cohn (2010), whose resulting grammar rules can contain large tree fragments, shares this property. The difference is that their work needs a pre-defined prior, namely hierarchical non-parametric Pitman-Yor process prior, to avoid large, rare fragments and for smoothing. The IORNN of our system, in contrast, does that automatically. It learns by itself how to deal with distant conditioning nodes, which are often less informative than close conditioning nodes on computing P (x|C\u221e(u)). In addition, smoothing is given free: recursive neural nets are able to map \u2018similar\u2019 fragments onto close points (Socher et al., 2010) thus an unseen fragment tends to be mapped onto a point close to points corresponding to \u2018similar\u2019 seen fragments.\nAnother difference is that our system exploits lexical semantics via word embeddings, which were learnt unsupervisedly. By initialising the IORNN with these embeddings, the use of this knowledge turns out easy and transparent. Spitkovsky et al. (2013) also exploit lexical semantics but in a limited way, using a context-based polysemous unsuper-\nvised clustering method to tag words. Although their approach can distinguish polysemes (e.g., \u2018cool\u2019 in \u2018to cool the selling panic\u2019 and in \u2018it is cool\u2019), it is not able to make use of word meaning similarities (e.g., the meaning of \u2018dog\u2019 is closer to \u2018animal\u2019 than to \u2018table\u2019). Naseem and Barzilay (2011)\u2019s system uses semantic cues from an out-of-domain annotated corpus, thus is not fully unsupervised.\nWe have showed that IR with a generative reranker is an approximation of hard-EM (see Equation 4). Our system is thus related to the works of Spitkovsky et al. (2013) and Tu and Honavar (2012). However, what we have proposed is more than that: IR is a general framework that we can have more than one option for choosing k-best parser and reranker. For instance, we can make use of a generative k-best parser and a discriminative reranker that are used for supervised parsing. Our future work is to explore this.\nThe experimental results reveal that starting point is very important to the iterated reranking with the \u221e-order generative model. On the one hand, that is a disadvantage compared to the other systems, which use uninformed or harmonic initialisers. But on the other hand, that is an innovation as our approach is capable of making use of existing systems. The results shown in Figure 4 suggest that if phase 0 uses a better parser which uses less expressive model and/or less external knowledge than our model, such as the one proposed by Spitkovsky et al. (2013), we can expect even a higher performance. The other systems, except Blunsom and Cohn (2010), however, might not benefit from using good existing\nparsers as initializers because their models are not significantly more expressive than others 8."}, {"heading": "8 Conclusion", "text": "We have proposed a new framework, iterated reranking (IR), which trains supervised parsers without the need of manually annotated data by using a unsupervised parser as an initialiser. Our system, employing Marecek and Straka (2013)\u2019s unsupervised parser as the initialiser, the k-best MSTParser, and Le and Zuidema (2014)\u2019s reranker, achieved 1.8% DDA higher than the SOTA parser of Spitkovsky et al. (2013) on the WSJ corpus. Moreover, we also showed that unsupervised parsing benefits from lexical semantics through using word-embeddings.\nOur future work is to exploit other existing supervised parsers that fit our framework. Besides, taking into account the fast development of the word embedding research (Mikolov et al., 2013; Pennington et al., 2014), we will try different word embeddings."}, {"heading": "Acknowledgments", "text": "We thank Remko Scha and three anonymous reviewers for helpful comments. Le thanks Milos\u0306 Stanojevic\u0301 for helpful discussion.\n8In an experiment, we used the Marecek and Straka (2013)\u2019s parser as an initializer for the Gillenwater et al. (2011)\u2019s parser. As we expected, the latter was not able to make use of this."}], "references": [{"title": "Tailoring continuous word representations for dependency parsing", "author": ["Mohit Bansal", "Kevin Gimpel", "Karen Livescu."], "venue": "Proceedings of the Annual Meeting of the Association for Computational Linguistics.", "citeRegEx": "Bansal et al\\.,? 2014", "shortCiteRegEx": "Bansal et al\\.", "year": 2014}, {"title": "Simple robust grammar induction with combinatory categorial grammars", "author": ["Yonatan Bisk", "Julia Hockenmaier."], "venue": "AAAI.", "citeRegEx": "Bisk and Hockenmaier.,? 2012", "shortCiteRegEx": "Bisk and Hockenmaier.", "year": 2012}, {"title": "Combining labeled and unlabeled sata with co-training", "author": ["Avrim Blum", "Tom M. Mitchell."], "venue": "COLT, pages 92\u2013100.", "citeRegEx": "Blum and Mitchell.,? 1998", "shortCiteRegEx": "Blum and Mitchell.", "year": 1998}, {"title": "Unsupervised induction of tree substitution grammars for dependency parsing", "author": ["Phil Blunsom", "Trevor Cohn."], "venue": "Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing, pages 1204\u20131213. Association for Computational Lin-", "citeRegEx": "Blunsom and Cohn.,? 2010", "shortCiteRegEx": "Blunsom and Cohn.", "year": 2010}, {"title": "Coarse-tofine n-best parsing and maxent discriminative reranking", "author": ["Eugene Charniak", "Mark Johnson."], "venue": "ACL.", "citeRegEx": "Charniak and Johnson.,? 2005", "shortCiteRegEx": "Charniak and Johnson.", "year": 2005}, {"title": "A fast and accurate dependency parser using neural networks", "author": ["Danqi Chen", "Christopher D Manning."], "venue": "Empirical Methods in Natural Language Processing (EMNLP).", "citeRegEx": "Chen and Manning.,? 2014", "shortCiteRegEx": "Chen and Manning.", "year": 2014}, {"title": "Discriminative reranking for natural language parsing", "author": ["Michael Collins."], "venue": "ICML, pages 175\u2013182.", "citeRegEx": "Collins.,? 2000", "shortCiteRegEx": "Collins.", "year": 2000}, {"title": "Head-driven statistical models for natural language parsing", "author": ["Michael Collins."], "venue": "Computational linguistics, 29(4):589\u2013637.", "citeRegEx": "Collins.,? 2003a", "shortCiteRegEx": "Collins.", "year": 2003}, {"title": "Head-driven statistical models for natural language parsing", "author": ["Michael Collins."], "venue": "Computational Linguistics, 29(4):589\u2013637.", "citeRegEx": "Collins.,? 2003b", "shortCiteRegEx": "Collins.", "year": 2003}, {"title": "Natural language processing (almost) from scratch", "author": ["Ronan Collobert", "Jason Weston", "L\u00e9on Bottou", "Michael Karlen", "Koray Kavukcuoglu", "Pavel Kuksa."], "venue": "The Journal of Machine Learning Research, 12:2493\u2013 2537.", "citeRegEx": "Collobert et al\\.,? 2011", "shortCiteRegEx": "Collobert et al\\.", "year": 2011}, {"title": "Approximation by superpositions of a sigmoidal function", "author": ["George Cybenko."], "venue": "Mathematics of control, signals and systems, 2(4):303\u2013314.", "citeRegEx": "Cybenko.,? 1989", "shortCiteRegEx": "Cybenko.", "year": 1989}, {"title": "Three new probabilistic models for dependency parsing: An exploration", "author": ["Jason M Eisner."], "venue": "Proceedings of the 16th conference on Computational linguistics-Volume 1, pages 340\u2013345. Association for Computational Linguistics.", "citeRegEx": "Eisner.,? 1996", "shortCiteRegEx": "Eisner.", "year": 1996}, {"title": "Learning and development in neural networks: The importance of starting small", "author": ["Jeffrey L Elman."], "venue": "Cognition, 48(1):71\u201399.", "citeRegEx": "Elman.,? 1993", "shortCiteRegEx": "Elman.", "year": 1993}, {"title": "Posterior sparsity in unsupervised dependency parsing", "author": ["Jennifer Gillenwater", "Kuzman Ganchev", "Jo\u00e3o Gra\u00e7a", "Fernando Pereira", "Ben Taskar."], "venue": "The Journal of Machine Learning Research, 12:455\u2013490.", "citeRegEx": "Gillenwater et al\\.,? 2011", "shortCiteRegEx": "Gillenwater et al\\.", "year": 2011}, {"title": "Efficient stacked dependency parsing by forest reranking", "author": ["Katsuhiko Hayashi", "Shuhei Kondo", "Yuji Matsumoto."], "venue": "Transactions of the Association for Computational Linguistics, 1(1):139\u2013150.", "citeRegEx": "Hayashi et al\\.,? 2013", "shortCiteRegEx": "Hayashi et al\\.", "year": 2013}, {"title": "Corpusbased induction of syntactic structure: Models of dependency and constituency", "author": ["Dan Klein", "Christopher D. Manning."], "venue": "ACL, pages 478\u2013485.", "citeRegEx": "Klein and Manning.,? 2004", "shortCiteRegEx": "Klein and Manning.", "year": 2004}, {"title": "Efficient thirdorder dependency parsers", "author": ["Terry Koo", "Michael Collins."], "venue": "Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics, pages 1\u201311. Association for Computational Linguistics.", "citeRegEx": "Koo and Collins.,? 2010", "shortCiteRegEx": "Koo and Collins.", "year": 2010}, {"title": "The insideoutside recursive neural network model for dependency parsing", "author": ["Phong Le", "Willem Zuidema."], "venue": "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics.", "citeRegEx": "Le and Zuidema.,? 2014", "shortCiteRegEx": "Le and Zuidema.", "year": 2014}, {"title": "Stopprobability estimates computed on a large corpus improve unsupervised dependency parsing", "author": ["David Marecek", "Milan Straka."], "venue": "ACL (1), pages 281\u2013290.", "citeRegEx": "Marecek and Straka.,? 2013", "shortCiteRegEx": "Marecek and Straka.", "year": 2013}, {"title": "Turning on the turbo: Fast third-order non-projective turbo parsers", "author": ["Andr\u00e9 FT Martins", "Miguel B Almeida", "Noah A Smith."], "venue": "Proc. of ACL.", "citeRegEx": "Martins et al\\.,? 2013", "shortCiteRegEx": "Martins et al\\.", "year": 2013}, {"title": "Effective self-training for parsing", "author": ["David McClosky", "Eugene Charniak", "Mark Johnson."], "venue": "Proceedings of the main conference on human language technology conference of the North American Chapter of the Association of Computational Linguistics, pages", "citeRegEx": "McClosky et al\\.,? 2006", "shortCiteRegEx": "McClosky et al\\.", "year": 2006}, {"title": "Online learning of approximate dependency parsing algorithms", "author": ["Ryan T. McDonald", "Fernando C.N. Pereira."], "venue": "EACL.", "citeRegEx": "McDonald and Pereira.,? 2006", "shortCiteRegEx": "McDonald and Pereira.", "year": 2006}, {"title": "Distributed representations of words and phrases and their compositionality", "author": ["Tomas Mikolov", "Ilya Sutskever", "Kai Chen", "Greg S Corrado", "Jeff Dean."], "venue": "Advances in Neural Information Processing Systems, pages 3111\u20133119.", "citeRegEx": "Mikolov et al\\.,? 2013", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Using semantic cues to learn syntax", "author": ["Tahira Naseem", "Regina Barzilay."], "venue": "AAAI.", "citeRegEx": "Naseem and Barzilay.,? 2011", "shortCiteRegEx": "Naseem and Barzilay.", "year": 2011}, {"title": "Linguistically Motivated Models for Lightly-Supervised Dependency Parsing", "author": ["Tahira Naseem."], "venue": "Ph.D. thesis, Massachusetts Institute of Technology.", "citeRegEx": "Naseem.,? 2014", "shortCiteRegEx": "Naseem.", "year": 2014}, {"title": "Glove: Global vectors for word representation", "author": ["Jeffrey Pennington", "Richard Socher", "Christopher D Manning."], "venue": "Proceedings of the Empiricial Methods in Natural Language Processing (EMNLP 2014), 12.", "citeRegEx": "Pennington et al\\.,? 2014", "shortCiteRegEx": "Pennington et al\\.", "year": 2014}, {"title": "A generative re-ranking model for dependency parsing", "author": ["Federico Sangati", "Willem Zuidema", "Rens Bod."], "venue": "Proceedings of the 11th International Conference on Parsing Technologies, pages 238\u2013241. Association for Computational Linguistics.", "citeRegEx": "Sangati et al\\.,? 2009", "shortCiteRegEx": "Sangati et al\\.", "year": 2009}, {"title": "Learning continuous phrase representations and syntactic parsing with recursive neural networks", "author": ["Richard Socher", "Christopher D. Manning", "Andrew Y. Ng."], "venue": "Proceedings of the NIPS-2010 Deep Learning and Unsupervised Feature Learning Workshop.", "citeRegEx": "Socher et al\\.,? 2010", "shortCiteRegEx": "Socher et al\\.", "year": 2010}, {"title": "From Baby Steps to Leapfrog: How \u201cLess is More\u201d in unsupervised dependency parsing", "author": ["Valentin I. Spitkovsky", "Hiyan Alshawi", "Daniel Jurafsky."], "venue": "Proc. of NAACL-HLT.", "citeRegEx": "Spitkovsky et al\\.,? 2010a", "shortCiteRegEx": "Spitkovsky et al\\.", "year": 2010}, {"title": "Viterbi training improves unsupervised dependency parsing", "author": ["Valentin I. Spitkovsky", "Hiyan Alshawi", "Daniel Jurafsky", "Christopher D. Manning."], "venue": "Proceedings of the Fourteenth Conference on Computational Natural Language Learning (CoNLL-2010).", "citeRegEx": "Spitkovsky et al\\.,? 2010b", "shortCiteRegEx": "Spitkovsky et al\\.", "year": 2010}, {"title": "Bootstrapping dependency grammar inducers from incomplete sentence fragments via austere models", "author": ["Valentin I. Spitkovsky", "Hiyan Alshawi", "Daniel Jurafsky."], "venue": "Proceedings of the 11th International Conference on Grammatical Inference.", "citeRegEx": "Spitkovsky et al\\.,? 2012", "shortCiteRegEx": "Spitkovsky et al\\.", "year": 2012}, {"title": "Breaking out of local optima with count transforms and model recombination: A study in grammar induction", "author": ["Valentin I. Spitkovsky", "Hiyan Alshawi", "Daniel Jurafsky."], "venue": "EMNLP, pages 1983\u20131995.", "citeRegEx": "Spitkovsky et al\\.,? 2013", "shortCiteRegEx": "Spitkovsky et al\\.", "year": 2013}, {"title": "Unambiguity regularization for unsupervised learning of probabilistic grammars", "author": ["Kewei Tu", "Vasant Honavar."], "venue": "Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language Learn-", "citeRegEx": "Tu and Honavar.,? 2012", "shortCiteRegEx": "Tu and Honavar.", "year": 2012}], "referenceMentions": [{"referenceID": 28, "context": "8% accuracy higher than the stateof-the-part parser of Spitkovsky et al. (2013) on the WSJ corpus.", "startOffset": 55, "endOffset": 80}, {"referenceID": 16, "context": "Many recent supervised parsers use thirdorder (or higher order) features (Koo and Collins, 2010; Martins et al., 2013; Le and Zuidema, 2014)", "startOffset": 73, "endOffset": 140}, {"referenceID": 19, "context": "Many recent supervised parsers use thirdorder (or higher order) features (Koo and Collins, 2010; Martins et al., 2013; Le and Zuidema, 2014)", "startOffset": 73, "endOffset": 140}, {"referenceID": 17, "context": "Many recent supervised parsers use thirdorder (or higher order) features (Koo and Collins, 2010; Martins et al., 2013; Le and Zuidema, 2014)", "startOffset": 73, "endOffset": 140}, {"referenceID": 22, "context": "Surprisingly, however, there have been no reported attempts to reuse supervised approaches to tackle the unsupervised parsing problem (an idea briefly mentioned in Spitkovsky et al. (2010b)).", "startOffset": 164, "endOffset": 190}, {"referenceID": 3, "context": "tent patterns in data (Naseem, 2014, page 23), and to avoid overfitting (Blunsom and Cohn, 2010).", "startOffset": 72, "endOffset": 96}, {"referenceID": 31, "context": "3% on the WSJ corpus (Spitkovsky et al., 2013), compared to over 93% actual performance of the SOTA supervised parsers.", "startOffset": 21, "endOffset": 46}, {"referenceID": 16, "context": "(2014), Le and Zuidema (2014), and Chen and Manning (2014).", "startOffset": 8, "endOffset": 30}, {"referenceID": 5, "context": "(2014), Le and Zuidema (2014), and Chen and Manning (2014). Lexical semantics is a source for handling rare words and syntactic ambiguities.", "startOffset": 35, "endOffset": 59}, {"referenceID": 17, "context": "Using this framework, we can employ the work of Le and Zuidema (2014) to build a new system that outperforms the SOTA unsupervised parser of Spitkovsky et al.", "startOffset": 48, "endOffset": 70}, {"referenceID": 17, "context": "Using this framework, we can employ the work of Le and Zuidema (2014) to build a new system that outperforms the SOTA unsupervised parser of Spitkovsky et al. (2013) on the WSJ corpus.", "startOffset": 48, "endOffset": 166}, {"referenceID": 15, "context": "The first breakthrough was set by Klein and Manning (2004) with their dependency model with valence (DMV), the first model to outperform the right-branching baseline on the DDA metric: 43.", "startOffset": 34, "endOffset": 59}, {"referenceID": 15, "context": "The first breakthrough was set by Klein and Manning (2004) with their dependency model with valence (DMV), the first model to outperform the right-branching baseline on the DDA metric: 43.2% vs 33.6% on sentences up to length 10 in the WSJ corpus. Nine years later, Spitkovsky et al. (2013) achieved much higher DDAs: 72.", "startOffset": 34, "endOffset": 291}, {"referenceID": 18, "context": "(2013), and Marecek and Straka (2013) employ extensions of the DMV but with different learning strategies.", "startOffset": 12, "endOffset": 38}, {"referenceID": 18, "context": "(2013), and Marecek and Straka (2013) employ extensions of the DMV but with different learning strategies. Naseem and Barzilay (2011) use semantic cues, which are event annotations from an outof-domain annotated corpus, in their model during training.", "startOffset": 12, "endOffset": 134}, {"referenceID": 18, "context": "(2013), and Marecek and Straka (2013) employ extensions of the DMV but with different learning strategies. Naseem and Barzilay (2011) use semantic cues, which are event annotations from an outof-domain annotated corpus, in their model during training. Relying on the fact that natural language grammars must be unambiguous in the sense that a sentence should have very few correct parses, Tu and Honavar (2012) incorporate unambiguity regu-", "startOffset": 12, "endOffset": 411}, {"referenceID": 27, "context": "Spitkovsky et al. (2012) bootstrap the learning by slicing up all input sentences at punctuation.", "startOffset": 0, "endOffset": 25}, {"referenceID": 27, "context": "Spitkovsky et al. (2012) bootstrap the learning by slicing up all input sentences at punctuation. Spitkovsky et al. (2013) propose a complete deterministic learning framework for breaking out of local optima using count transforms and model recombination.", "startOffset": 0, "endOffset": 123}, {"referenceID": 18, "context": "Marecek and Straka (2013) make use of a large raw text corpus (e.", "startOffset": 0, "endOffset": 26}, {"referenceID": 1, "context": "Differing from those works, Bisk and Hockenmaier (2012) rely on Combinatory Categorial Gram-", "startOffset": 28, "endOffset": 56}, {"referenceID": 3, "context": "mars with a small number of hand-crafted general linguistic principles; whereas Blunsom and Cohn (2010) use Tree Substitution Grammars with a hierarchical non-parametric Pitman-Yor process prior biasing the learning to a small grammar.", "startOffset": 80, "endOffset": 104}, {"referenceID": 6, "context": "supervised constituent parsing (Collins, 2000; Charniak and Johnson, 2005).", "startOffset": 31, "endOffset": 74}, {"referenceID": 4, "context": "supervised constituent parsing (Collins, 2000; Charniak and Johnson, 2005).", "startOffset": 31, "endOffset": 74}, {"referenceID": 4, "context": "supervised constituent parsing (Collins, 2000; Charniak and Johnson, 2005). It was then employed in the supervised dependency parsing approaches of Sangati et al. (2009), Hayashi et al.", "startOffset": 47, "endOffset": 170}, {"referenceID": 4, "context": "supervised constituent parsing (Collins, 2000; Charniak and Johnson, 2005). It was then employed in the supervised dependency parsing approaches of Sangati et al. (2009), Hayashi et al. (2013), and Le and Zuidema (2014).", "startOffset": 47, "endOffset": 193}, {"referenceID": 4, "context": "supervised constituent parsing (Collins, 2000; Charniak and Johnson, 2005). It was then employed in the supervised dependency parsing approaches of Sangati et al. (2009), Hayashi et al. (2013), and Le and Zuidema (2014).", "startOffset": 47, "endOffset": 220}, {"referenceID": 20, "context": "McClosky et al. (2006), using selftraining.", "startOffset": 0, "endOffset": 23}, {"referenceID": 3, "context": "Existing training methods for the unsupervised dependency task, such as Blunsom and Cohn (2010), Gillenwater et al.", "startOffset": 72, "endOffset": 96}, {"referenceID": 3, "context": "Existing training methods for the unsupervised dependency task, such as Blunsom and Cohn (2010), Gillenwater et al. (2011), and Tu and Honavar (2012), are hypothesis-oriented search with the EM algorithm or its variants: training is to move from a point which represents a model hypothesis to another point.", "startOffset": 72, "endOffset": 123}, {"referenceID": 3, "context": "Existing training methods for the unsupervised dependency task, such as Blunsom and Cohn (2010), Gillenwater et al. (2011), and Tu and Honavar (2012), are hypothesis-oriented search with the EM algorithm or its variants: training is to move from a point which represents a model hypothesis to another point.", "startOffset": 72, "endOffset": 150}, {"referenceID": 3, "context": "Existing training methods for the unsupervised dependency task, such as Blunsom and Cohn (2010), Gillenwater et al. (2011), and Tu and Honavar (2012), are hypothesis-oriented search with the EM algorithm or its variants: training is to move from a point which represents a model hypothesis to another point. This approach is feasible for optimising models using simple features since existing dynamic programming algorithms can compute expectations, which are sums over all possible parses, or to find the best parse in the whole parse space with low complexities. However, the complexity increases rapidly if rich, complex features are used. One way to reduce the computational cost is to use approximation methods like sampling as in Blunsom and Cohn (2010).", "startOffset": 72, "endOffset": 760}, {"referenceID": 20, "context": "Semi-supervised parsing using reranking (McClosky et al., 2006).", "startOffset": 40, "endOffset": 63}, {"referenceID": 29, "context": "Unsupervised parsing with hard-EM (Spitkovsky et al., 2010b) In hard-EM, the target is to maximise the following objective function with respect to a parameter set \u0398", "startOffset": 34, "endOffset": 60}, {"referenceID": 28, "context": "It is certain that we can, as in the work of Spitkovsky et al. (2010b) and many bootstrapping approaches, employ only parser P .", "startOffset": 45, "endOffset": 71}, {"referenceID": 2, "context": "Second, it embodies a similar idea to co-training (Blum and Mitchell, 1998): P and R play roles as two views of the data.", "startOffset": 50, "endOffset": 75}, {"referenceID": 16, "context": "erative model proposed by Le and Zuidema (2014). Second, it embodies a similar idea to co-training (Blum and Mitchell, 1998): P and R play roles as two views of the data.", "startOffset": 26, "endOffset": 48}, {"referenceID": 12, "context": "However, Elman (1993) suggests that in some cases, learning should start by training simple models on small data and then gradually increase the model complexity and add more difficult data.", "startOffset": 9, "endOffset": 22}, {"referenceID": 28, "context": "This training scheme was successfully applied by Spitkovsky et al. (2010a) under the name: Baby Step.", "startOffset": 49, "endOffset": 75}, {"referenceID": 17, "context": "4 Le and Zuidema (2014)\u2019s Reranker", "startOffset": 2, "endOffset": 24}, {"referenceID": 8, "context": "To overcome the problem of sparsity, they introduced the inside-outside recursive neural network (IORNN) architecture that can estimate treegenerating models including those proposed by Eisner (1996) and Collins (2003a).", "startOffset": 186, "endOffset": 200}, {"referenceID": 6, "context": "To overcome the problem of sparsity, they introduced the inside-outside recursive neural network (IORNN) architecture that can estimate treegenerating models including those proposed by Eisner (1996) and Collins (2003a).", "startOffset": 204, "endOffset": 220}, {"referenceID": 11, "context": "Le and Zuidema (2014)\u2019s reranker employs the generative model proposed by Eisner (1996). Intuitively, this model is top-down: starting with ROOT,", "startOffset": 74, "endOffset": 88}, {"referenceID": 27, "context": "different from traditional RNNs (Socher et al., 2010) is that each tree node u caries two vectors: iu - the inner representation, represents the content of the", "startOffset": 32, "endOffset": 53}, {"referenceID": 9, "context": "are initially borrowed from Collobert et al. (2011)), the POS-tag and capitalisation feature.", "startOffset": 28, "endOffset": 52}, {"referenceID": 18, "context": "In our experiments, for phase 0, we choose the parser using an extension of the DMV model with stop-probability estimates computed on a large corpus proposed by Marecek and Straka (2013). This system has a moderate performance3", "startOffset": 161, "endOffset": 187}, {"referenceID": 21, "context": "For the other phases, we use the MSTParser4 (with the second-order feature mode) (McDonald and Pereira, 2006).", "startOffset": 81, "endOffset": 109}, {"referenceID": 27, "context": "4% DDA of Spitkovsky et al. (2013). For the other phases, we use the MSTParser4 (with the second-order feature mode) (McDonald and Pereira, 2006).", "startOffset": 10, "endOffset": 35}, {"referenceID": 17, "context": "Our system uses Le and Zuidema (2014)\u2019s reranker (Section 4.", "startOffset": 16, "endOffset": 38}, {"referenceID": 10, "context": "approximators (Cybenko, 1989), the reranker is capable of perfectly remembering all training parses.", "startOffset": 14, "endOffset": 29}, {"referenceID": 18, "context": "Because Marecek and Straka (2013)\u2019s parser does not distinguish training data from test data, we postulate S0 = S1.", "startOffset": 8, "endOffset": 34}, {"referenceID": 15, "context": "We then apply the standard pre-processing5 for unsupervised dependency parsing task (Klein and Manning, 2004): we strip off all empty sub-trees, punctuation, and terminals (tagged # and $) not pronounced where they appear; we then convert the remaining trees to dependencies using Collins\u2019s head rules (Collins, 2003b).", "startOffset": 84, "endOffset": 109}, {"referenceID": 8, "context": "We then apply the standard pre-processing5 for unsupervised dependency parsing task (Klein and Manning, 2004): we strip off all empty sub-trees, punctuation, and terminals (tagged # and $) not pronounced where they appear; we then convert the remaining trees to dependencies using Collins\u2019s head rules (Collins, 2003b).", "startOffset": 302, "endOffset": 318}, {"referenceID": 9, "context": "We initialise the IORNN with the 50-dim word embeddings from Collobert et al. (2011) 6 , and train it with the learning rate 0.", "startOffset": 61, "endOffset": 85}, {"referenceID": 18, "context": "Our improvements over the system\u2019s initialiser (Marecek and Straka, 2013) are 9.", "startOffset": 47, "endOffset": 73}, {"referenceID": 27, "context": "2% higher than Spitkovsky et al. (2013) on all sentences and up to length 10, respectively.", "startOffset": 15, "endOffset": 40}, {"referenceID": 18, "context": "Marecek and Straka (2013).", "startOffset": 0, "endOffset": 26}, {"referenceID": 13, "context": "cek and Straka, 2013), GGGPT (Gillenwater et al., 2011), and Harmonic (Klein and Manning, 2004).", "startOffset": 29, "endOffset": 55}, {"referenceID": 15, "context": ", 2011), and Harmonic (Klein and Manning, 2004).", "startOffset": 22, "endOffset": 47}, {"referenceID": 13, "context": "2013), the parser used in the previous experiments, (ii) GGGPT (Gillenwater et al., 2011)7 employing", "startOffset": 63, "endOffset": 89}, {"referenceID": 15, "context": "an extension of the DMV model and posterior regularization framework for training, and (iii) Harmonic, the harmonic initializer proposed by Klein and Manning (2004).", "startOffset": 140, "endOffset": 165}, {"referenceID": 18, "context": "We compare the quality of the treebank resulted in the end of phase 1 against the quality of the treebank given by the initialier Marecek and Straka (2013). Figure 5 shows precision (top) and recall (bottom)", "startOffset": 130, "endOffset": 156}, {"referenceID": 3, "context": "Only the work of Blunsom and Cohn (2010), whose resulting grammar rules can contain large tree frag-", "startOffset": 17, "endOffset": 41}, {"referenceID": 27, "context": "In addition, smoothing is given free: recursive neural nets are able to map \u2018similar\u2019 fragments onto close points (Socher et al., 2010) thus an unseen fragment tends to be mapped onto a point close to points corresponding to \u2018similar\u2019 seen fragments.", "startOffset": 114, "endOffset": 135}, {"referenceID": 28, "context": "Spitkovsky et al. (2013) also exploit lexical semantics but in a limited way, using a context-based polysemous unsuper-", "startOffset": 0, "endOffset": 25}, {"referenceID": 23, "context": "Naseem and Barzilay (2011)\u2019s system uses semantic cues from an out-of-domain annotated corpus, thus is not fully unsupervised.", "startOffset": 0, "endOffset": 27}, {"referenceID": 28, "context": "Our system is thus related to the works of Spitkovsky et al. (2013) and Tu and Honavar (2012).", "startOffset": 43, "endOffset": 68}, {"referenceID": 28, "context": "Our system is thus related to the works of Spitkovsky et al. (2013) and Tu and Honavar (2012). However, what we have proposed is more than that: IR is a general framework that we can have", "startOffset": 43, "endOffset": 94}, {"referenceID": 27, "context": "The results shown in Figure 4 suggest that if phase 0 uses a better parser which uses less expressive model and/or less external knowledge than our model, such as the one proposed by Spitkovsky et al. (2013), we can expect even a higher performance.", "startOffset": 183, "endOffset": 208}, {"referenceID": 3, "context": "The other systems, except Blunsom and Cohn (2010), however, might not benefit from using good existing parsers as initializers because their models are not significantly more expressive than others 8.", "startOffset": 26, "endOffset": 50}, {"referenceID": 17, "context": "ploying Marecek and Straka (2013)\u2019s unsupervised parser as the initialiser, the k-best MSTParser, and Le and Zuidema (2014)\u2019s reranker, achieved 1.", "startOffset": 8, "endOffset": 34}, {"referenceID": 17, "context": "ploying Marecek and Straka (2013)\u2019s unsupervised parser as the initialiser, the k-best MSTParser, and Le and Zuidema (2014)\u2019s reranker, achieved 1.", "startOffset": 102, "endOffset": 124}, {"referenceID": 17, "context": "ploying Marecek and Straka (2013)\u2019s unsupervised parser as the initialiser, the k-best MSTParser, and Le and Zuidema (2014)\u2019s reranker, achieved 1.8% DDA higher than the SOTA parser of Spitkovsky et al. (2013) on the WSJ corpus.", "startOffset": 102, "endOffset": 210}, {"referenceID": 22, "context": "Besides, taking into account the fast development of the word embedding research (Mikolov et al., 2013; Pennington et al., 2014), we will try different word embeddings.", "startOffset": 81, "endOffset": 128}, {"referenceID": 25, "context": "Besides, taking into account the fast development of the word embedding research (Mikolov et al., 2013; Pennington et al., 2014), we will try different word embeddings.", "startOffset": 81, "endOffset": 128}, {"referenceID": 17, "context": "In an experiment, we used the Marecek and Straka (2013)\u2019s parser as an initializer for the Gillenwater et al.", "startOffset": 30, "endOffset": 56}, {"referenceID": 13, "context": "In an experiment, we used the Marecek and Straka (2013)\u2019s parser as an initializer for the Gillenwater et al. (2011)\u2019s parser.", "startOffset": 91, "endOffset": 117}], "year": 2015, "abstractText": "We present a self-training approach to unsupervised dependency parsing that reuses existing supervised and unsupervised parsing algorithms. Our approach, called \u2018iterated reranking\u2019 (IR), starts with dependency trees generated by an unsupervised parser, and iteratively improves these trees using the richer probability models used in supervised parsing that are in turn trained on these trees. Our system achieves 1.8% accuracy higher than the stateof-the-part parser of Spitkovsky et al. (2013) on the WSJ corpus.", "creator": "TeX"}}}