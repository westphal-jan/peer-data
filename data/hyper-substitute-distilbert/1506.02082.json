{"id": "1506.02082", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "5-Jun-2015", "title": "A Real-time Cargo Damage Management System via a Sorting Array Triangulation Technique", "abstract": "this report covers an intervention decision support system ( idss ), each handles an efficient managed remote opportunity to individually dispose suspected assets for fraud. defection is either excessive exposure intense radiation, physical fractures such rip holes, punctured surfaces, duct strip erosion, rash. the system uses a sorting plate triangulation technique ( sat ) and surface instability detection ( sdd ) to conduct mechanical inspection. this new concept saves expertise and ability on carefully inspected structures during sterile environments that, instead of running $ i $ inspections on $ l $ meters, only 3 components indicate container or a ratio over $ 3 : nh $ is required, c $ n & gt ; 3 $ containers. per original asset in the array is virtually identical contiguous to an object - damaged cargo unless calculating nearby arrivals of such cargos, delivering approximate estimates for even declining local international population. the estimated violations along what, previously cracked and undamaged cargo stacks, are listed and profiled after being eco - system sensor, thereby submitted only the vendors for that final decision. typical report addresses the ongoing presentation and the dynamics of the simulator implementation, showing how the process controls via sensors, hardware with / without damage agents, dynamic real - global inspections and algorithms per se.", "histories": [["v1", "Fri, 5 Jun 2015 22:56:18 GMT  (2859kb)", "http://arxiv.org/abs/1506.02082v1", "This article is a report on a developed IDSS system/prototype aimed to be published for a journal conference proceedings and/or a full paper under Computer Science and Software Engineering categories. 28 pages; 10 Figures including graphs; 5 tables; presentation file is available atthis http URLAsk authors for full code and/or other files"], ["v2", "Sun, 14 Jun 2015 20:49:46 GMT  (2853kb)", "http://arxiv.org/abs/1506.02082v2", "This article is a report on a developed IDSS system/prototype aimed to be published for a journal conference proceedings and/or a full paper under Computer Science and Software Engineering categories. 28 pages; 10 Figures including graphs; 5 tables; presentation file is available atthis http URLAsk authors for full code and/or other files"]], "COMMENTS": "This article is a report on a developed IDSS system/prototype aimed to be published for a journal conference proceedings and/or a full paper under Computer Science and Software Engineering categories. 28 pages; 10 Figures including graphs; 5 tables; presentation file is available atthis http URLAsk authors for full code and/or other files", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["philip b alipour", "matteus magnusson", "martin w olsson", "nooshin h ghasemi", "lawrence henesey"], "accepted": false, "id": "1506.02082"}, "pdf": {"name": "1506.02082.pdf", "metadata": {"source": "CRF", "title": "CDD-SAT IDSS A Real-time Cargo Damage Management System via a Sorting Array Triangulation Technique", "authors": ["Abraham Lincoln", "Philip B. Alipour", "Matteus Magnusson", "Martin W. Olsson", "Nooshin H. Ghasemi", "Lawrence Henesey"], "emails": ["1philipbaback_orbsix@msn.com,", "senth.wallace@gmail.com,", "mawm06@student.bth.se,", "nooshin.hghs@gmail.com,", "larry.henesey@bth.se"], "sections": [{"heading": null, "text": "~ 1 ~\nsupport system (IDSS), which handles an efficient and effective way to rapidly inspect containerized cargos for defection. Defection is either cargo exposure to radiation, physical damages such as holes, punctured surfaces, iron surface oxidation, etc. The system uses a sorting array triangulation technique (SAT) and surface damage detection (SDD) to conduct the inspection. This new technique saves time and money on finding damaged goods during transportation such that, instead of running n inspections on n containers, only 3 inspections per triangulation or a ratio of 3:n is required, assuming n > 3 containers. The damaged stack in the array is virtually detected contiguous to an actuallydamaged cargo by calculating nearby distances of such cargos, delivering reliable estimates for the whole local stack population. The estimated values on damaged, somewhat damaged and undamaged cargo stacks, are listed and profiled after being sorted by the program, thereby submitted to the manager for a final decision. The report describes the problem domain and the implementation of the simulator prototype, showing how the system operates via software, hardware with/without human agents, conducting real-time inspections and management per se."}, {"heading": "1. INTRODUCTION", "text": "Real-time resource sorting and management with the right results on cargos, is always a challenge in critical decision makings defined within the domain of\ntransportation industry. The time of cargo defection/damage detection (CDD), displaying cargo condition or its state during transport, effectively and efficiently, are hereby simulated real-time using non-human and human IDSS agents.\nThis project inducts a feasible technique, designed and developed from scratch, on an array of indexed cargos being shipped (or freighted) from a particular location,1 zone or country as point A, thereby inspections conducted before (waiting to be loaded), during (various hazards of journey) and after transport to destination, as point B.\nTriangulation techniques can generate real-time results on classified or indexed data representing an array of objects located in one location for a specific condition, as detected within a time limit before objects relocation. That \u201ccondition\u201d could indicate a damaged, hazardous or any type affecting other objects and even humans negatively, if detection is not done early enough. A sorting algorithm using this \u201ctriangulation\u201d is closely coupled with real-time agents detecting the specific condition as the mother algorithm. This algorithm is comprised of human agents, non-human agents and sensory units (within\n1 Each container is labeled in the list \u201c{x1, x2, x3, \u2026, xn}\u201d where x denotes an alphabetical letter as the cargo column geographically occupied either in a stack form or single containers, and n the number of the chosen container ready for inspection.\nar X\niv :1\n27 12\n82 v1\n[c s.A\nI] 4\nJu n\n2 | P a g e\nthe agent\u2019s domain of activities) to run detection once triangulation gives them a particular index (specific object) to inspect.\nWe developed the triangulation solution on cargos via agents active in a simulation program which further attains a reliable IDSS outcome for its manager(s). The relationships of the available options coming from the IDSS system core is indicated with an \u2018 * \u2019 symbol, denoting that many decisions are being made throughout the conduction process of the SAT inspections via human agents. In particular, after devices detect the problem, yet the final decision depends on the inspector and the cargo manager, asking themselves what to do with the damaged version of the cargo."}, {"heading": "2. DIVISION OF LABOR", "text": "We considered the contributions of our team members in developing the CDDSATIDSS project to be merely those allocated and assigned tasks to each member based on his/ her skills that perform best at. The following solely outlines the main load of certain tasks conducted distinctly by each team member:\nDr. Lawrence E. Henesey: Project Supervisor\nTasks done for the IDSS project:\nI. DB creation and data management issues II. SDD Algorithm\nIII. SAT Algorithm IV. Connecting Tasks I, II and III: Coding to\nmake this relationship possible V. GUI\u2019s, portable and central\ncommunications\u2019 interface for all IDSS components of the project\nVI. Bonus work or an extra addition to implement wireless communication\nbetween agents, inspectors, hardware, managers and the software\nVII. DB updates supporting the interactive I/O data from/to users VIII. Validating our output. Outputs on cargo selection, sorting and suggestions on the sorted list of damaged and undamaged cargos to the cargo manager(s)\nIX. Project presentation in PowerPoint X. Documentation, and logging"}, {"heading": "3. PROJECT ANALYSIS", "text": ""}, {"heading": "3.1 BACKGROUND", "text": "The CDD-SAT IDSS project is a new system proposed to sort cargos from a population of damaged and undamaged stacks in the shortest time possible with reliable estimates [12]. These estimates are supposed to be representing the whole stack population during collaborative inspections conducted by agents for certain conditions exhibited by the containers from the cargo environment. The rules to set up this system, its objectives and the knowhow of conducting the analysis, were initially introduced in our project proposal. In this report, however, we further elaborate and demonstrate the intelligence aspects of our system based on the CDD-SAT simulation results, and realworld scenarios\u2019 dataset. The system further aims to produce such estimates to prevent further cargo damages happening in short slices of time. The system also attempts to ease any managerial decision being made on hazardous cargos to ethically save people from life-threatening situations."}, {"heading": "3.2 PROBLEM DEFINITION", "text": "1. Cargo damage could happen anywhere 2. Weak intelligent support system during\ntransport 3. Inspect and profile the damaged from\nundamaged 4. Parameters are defined as follows:\n\u2013 cargo stack population n, \u2013 suggested containers stack for\ninspection S = (xyi) from a list of stacked-up containers {xy1,\u2026, xyn}"}, {"heading": "Surname Forename Project Duty*", "text": ""}, {"heading": "Magnusson Matteus C, F, H Wex\u00f6 Olsson Martin B, C, F, H Haji Ghasemi Nooshin C, E, F, H", "text": "Their conjunction forms a CDD\u2013 SAT system\n3 | P a g e\n\u2013 cargo status or detected Dxyz = red or orange or green \u2013 time to detect ti, total time to generate status TD, saved time Tsaved by SAT vs. time if used by other techniques, Tother. 5. Parametric adaptations: flocal = xyi coordinates for stack location, where is a local inspection made on a suggested stack of cargos by the system, xyz for physical volume exposures (leakages) and damaged surfaces such as punctures, holes, iron oxidation, etc. undermining any structural integrity of the containers. We adapt 3D parameters during information gather from the surfaces to 2D parameter where the stack is located from topview during each SAT phase. This makes the sorting of the cargo array in a 2D frame much easier whilst retaining the actual 3D values intrinsically. This data is visible in terms of red, orange and green as probabilistic P values in the Database (DB) file. Hence, the DB component plays an important role for this dimensional values\u2019 adaptation, since we are using a uniform language of probabilistic values ranging from 0 to 1. Such P values are highlighted in the SAT system criteria in \u00a7 3.5."}, {"heading": "The array\u2019s geometry and mathematics", "text": "comply with the following computational objectives:\n1. The damaged stack in the array is virtually detected contiguous to an actual damaged cargo by software, calculating nearby distances of such cargos, delivering reliable estimates for the whole local stack population. 2. Relatively, a three-dimensional surface and contour mapping from containers are constructed once data acquired at the scene. The averaged values are stored in a DB file for further processing. Parametric adaptations between xy and xyz data take place after DB access, to submit a concrete P value during value updates, giving an\nestimated verdict on cargo status for the whole population.\nTo satisfy these objectives, we have intricately formulated the following equations in our program code to implement the SAT algorithm\u2019s logic components.\n\u221a (1)\n( ) (2)\n( ) (3)\nwhere C is for cargo stack population n under triangulation defined by square root operator with a growing limit added by 1. After finishing operations on Eq. (1), S is then initiated for the suggested containers, as given by Problem Definition # 4. From there, D is run to detect damages from the real environment on cargos generating rog or red, orange, and green results. Eq. (1) is reiterated and combined with Eq. (2) to estimate array distances between the nearby rog\u2019s as a newly estimated list of stacks located in x and y dimensions (a j index), or\n( ) (\u221a )\n( )\nThe deduced ratio in Eq. (4), delivers at which xy point, there would be a probable r or o or g adjacent to the actual detected ones by sensor (at least 3 containers are reported from Eq. 3). Thus, the reiteration for updating cargo results with more detections, makes the production of the xybased ratios more accurate on the next trials (or phases) of SAT closing in the triangle by a factor of xy/2 on the grid (see Fig. 3, where the triangle shrinks by phase). This is a SAT system evolution as the probability over time is predicted per repeated cargo damage. This as a solution is later outlined in \u00a73.4. Hence, with proper procedural and method callings within the code, we invoked the components of these equations to process I/O data relative to the\n4 | P a g e\nfunction\u2019s side of the equation (left-hand side of the equation)"}, {"heading": "3.3 PROBLEM OBJECTIVES", "text": "\u2022 Detect Defected or Damaged Cargos\n(ranging from low to severe) \u2022 Sort Damaged from Undamaged Cargos \u2022 Suggest Specific Containers from the\nSorted List \u2022 Manage Cargos by human and non-\nhuman agents: \u2013 Detectors mounted onto the crane\nfacility in port; \u2013 Detectors stationed on the vessel\nafter cargo load \u2022 Finalize results as a report for a Final\nManagerial Decision, saying that: \u2013 Don't get wined up with the details,\nrather matches of the results in the database, inputs, outputs and updates coming from the algorithm. \u2013 Correct input gives correct output estimates probabilistically, either in form of more estimates otherwise precisions."}, {"heading": "3.4 PROBLEM SOLUTION", "text": "Our simulation method integrates Regular and Quasi-Monte Carlo methods [4] for computing xi \u2026 xn cargo status estimates in each triangulation phase. The median point which covers a fuzzy status i.e. \u201cto some extent damaged\u201d on a container stack is done via quasi-Monte Carlo method as well as using a random function as out input to inspect a stack, its surface detection points, etc. for evaluating the limits of the algorithm relative to output. The specifics of the method contributing to our solution in a nutshell are as follows:\n1. We Define a domain of possible inputs on i as (x1y1, \u2026, xnyn) 2. Generate inputs randomly from a probability distribution over the domain (2D Array) giving xi  yi , a. Random Function f(n) = Rnd(i), b. We inspect cargo i as a specific stack\nsuggested by the system for inspection, for one triangle side, \u03b1,\nsorting the bottom row of the array (Fig. 3), for this detection angle, c. Two more i\u2019s for the remaining triangle sides, \u03b2 and \u03b3: The geometry of the triangle for right and left columns sorting sides of the array is illustrated in Fig. 3. 3. We generate an estimate between the detected 3, using distances to the remaining adjacent stacks in a database 4. We aggregate and update the results from one SAT phase to another on the whole population n."}, {"heading": "3.5 SYSTEM CRITERIA", "text": "The system displays a list of sorted cargos, color-coded and labeled for the cargo inspectors and mangers of the system. The colors on the sorted list of labels are reported and stored as orange (a grey state, e.g. a probability of P = 0.2 to 0.5) indicating somewhat damaged cargos, green indicating undamaged cargos (P < 0.2) and red for significantly damaged cargos (P > 0.5). The inspection is conducted in three triangulation phases, each referring to the sorted list either current or previously-recorded in the database to update the list as each phase successively progresses to its next, for the SAT service. The probability P score ranging from 0 to 1 is calculated from the results gained from the various tests performed. Here is a list of all of the important criteria defining our P, relative to constraints (Fig. 1):\n Maintenance - The detectors recheck bounds, and hardware status is regularly checked which is part of the monitoring process on devices such as listing any symptoms on component failures, errors in detection, etc. prior to cargo inspection.\n Intelligence - The intelligence is tested in a test covering several various areas: \u2013 Logic: mainly, \u201chow the system is\nmanaged and processed?\u201d \u2013 Patterns: imagery analysis based on\nplotting container surface points and measuring their distances from each other, where the program produces filtered images to identify damaged\n5 | P a g e\nsurfaces from undamaged ones (see image binarization from the following paragraphs). This complies with Hyosung Lee, et al. [9] actual methods of computing actual damages based on surfaces and depth analysis. \u2013 Shapes: Design and Graphics relative to mathematical and geometric calculation in suggesting containers as well as identifying their status. \u2013 Mathematics: formulaic solutions conveying to the triangulation, and calculating graph distances between damaged and contiguously-detected damaged vs. undamaged cargos. The aim is to generate probabilistic pi results, based on \u201cpatterns\u201d and \u201cshapes\u201d from above (quite analytic and mathematical), thus their averaged sum with other p\u2019s, build up the final P for our Q&Q analysis. \u2013 Physics: detectors and sensory agents for inspection purposes employed within the cargo environment \u2013 Data management: a DB raw file contains records on the sorted greens, reds and orange items \u2013 Knowledgebase subsystem, based on previous SAT experience on specific data records: records on the sorted greens, reds and orange list, if the same list appear for a similar container population configuration, the results shall remain similar despite of environmental complications\n Wireless vs. cable-based technology - Rather than totally relying on human input, the inspection system must relay information from the cargo environment via detectors to the system, thereby processed by software for analysis and results. This is aided by using a simple wireless local area network (LAN) connection, and in worst case scenarios where atmospheric changes become dramatic, other remedies such as direct cables as well as human input (console based) are contemplated.\n Mechanical - The Crane Docking facility and detectors\u2019 dynamic properties involve mechanics which could affect the rate of inspections depending in what state the cargo is i.e. being unloaded, loaded or just stacked-up in some location. An optional requirement is testing mechanical skills for evaluating the time efficiency of the system.\n Cognition - Self and environmental awareness of the human inspector is crucial in reading the LCD unit on the detectors when they display results during detection. The validity and correctness of the results prior to the automated system relaying information to system core for processing must be monitored based on this skill. \u2022 Physical color sight and detection - The color sight is tested by trying to identify cargos on colored backgrounds for a damaged section, pictured as follows: the red indicates a damaged area (in case of radiation, the physical area or material where radiation is exposed)\nData Acquisition and SAT processing conform to the following two paragraphs:\n Fast surface-point inspection - Simple cameras and laser-based detectors: Material surface analysis is wellexplicated in the paper written by Hyosung Lee, et al. [9] distinguishing the damaged surface from a healthy one during camera recordings, observation and imagery analysis. The measurement satisfies the physical bounds on:\n1- Surface Roughness , 2- Depth\nWhereas, we have also prioritized an image binarization solution to focus on suspicious spots detected on the surface (a typical image capturing technique). This is to shortcut the surface damage estimates, as illustrated later in Fig. 8, thereby conducting the 3D beam scattering technique akin to Hyosung Lee et al. technique.\n6 | P a g e\n In-depth surface point inspection - SAT detection via sensors (CCD detectors) are thorough for an inspected unit (container) hence not a random estimate of damages, in fact an accurate and efficient way to inspect a set of containers co-local to others on the vessel, or after shipping, on the platform. After image \u201cbinarization\u201d (above paragraph) a geological analysis tool called Surfer 9 [10] aided us in simulating 3D and contour mapping of the captured image of the surface i.e. incoming data from the scene acquired by the detectors where cargo is located.\n Administrator and maintenance - System administrator must make sure all reported data, profiled information based on the DB component as well as accuracy of the devices being used by inspectors, are in position. The accuracy and correctness of data converted to interpretable data as information to the users (inspectors and managers) must be maintained by maintainers of the system on a physical level: this means that before, during, after inspections, all\nsensory subsystems and detectors for inspection purposes and data accuracy are checked and rechecked on a regular basis indeed.\n Cargo status - Based on a sensory inspection (a detector) within the triangle\u2019s geometric range, 2 suggesting specific containers to the inspector to inspect. The detector generates results on that container displayed to the inspector as either damaged, somewhat damaged or undamaged on his/her handheld portable detector. Note that, for an automated system, an installed rail permitting the detector to slide in-and-out, accelerates this inspection process. If a crane system is operated by an inspector, after e.g. the ship docks, the stacks of cargos are scanned via relevant detectors for defection detection.\n Cargo records and classification - The inspector relays data via the detector to the software for SAT estimates, once the three inspections are carried out covering the 3 sides of the triangle. The inspector\u2019s cargo is recorded after weighing the physical conditions of the cargo, estimates a list of cargos matching the description of the detected, and thus listing three containers on the record (database)1 to produce more results. Now, the agents proceed to the next phase of the triangulation for more accurate estimates or list.\n SAT service needs - Informs the decision process of the inspection needs for a certain real-time occupation at cargo locations, e.g. \u201c3 more detectors needed to inspect these cargos\u201d\n Agent's Interface - A command-line interface (CLI) is a mechanism for interacting with a computer operating system or software by typing commands to perform specific tasks. Pending or in-\n2The \u201crange searching problems\u201d and data structures are a fundamental topic of computational geometry. The range searching problem finds applications not only in areas that deal with processing geometrical data (like geographical information systems (GIS), and CAD), but also in databases. See also [11].\n7 | P a g e\nqueue detection tasks relayed from one detector (hardware interface) to the software DB belongs to this mechanism.\n Human vision relative to cognition - Based on human visual and cognitive limitations relative to the inspection environment between two containers (bearing a certain measurable distance), one must consider this inspector to fully function according to the protocols and assignments given for a cargo inspection. If issues like dyslexia, color blindness or any human deficiencies involved (instantaneously, otherwise, a long-term side-effect ignored due to being a known employed worker to the company) could\nencounter wrong deductions on the reading of data as well as the quality and integrity of information process.\n A trainable/learnable SAT algorithm - The data is updated on regular 3-time inspections made over a population of cargos. Of course, the inspections are 3/n for each triangulation relative to a redorange-green estimate result."}, {"heading": "3.6 SWOT ANALYSIS", "text": "We have conducted our SWOT analysis\n(strengths, weaknesses, opportunities and\nthreats) of the project and presented in the\nfollowing table:"}, {"heading": "Opportunities Threats", "text": "8 | P a g e\nAccording to our SWOT analysis, the\nweaknesses mostly lie in human errors i.e.\ninspectors not acting accurately and not\naware of the environmental physical\nvariables (via detectors display unit). The\nstrengths emphasize the CDD-SAT software\nability to analyze and estimate data\neffectively, efficiently and economically.\nFrom our opportunities, we derive that faster\nhardware, SAT software and less manpower\nplus reduced insurance viabilities, make more\nefficient delivery to customers. From the\nthreats, we conclude that environment affects\nthe real-time I/O data given and expected\nfrom the hardware to the user. This requires\nextra important attention especially if the\nsystem is self-automated (regular inspections\non the operating hardware is essential)."}, {"heading": "4. PROJECT DESIGN", "text": ""}, {"heading": "4.1 CENTRALIZED ARCHITECTURE", "text": "The architecture of CDD-SAT IDSS is a\nlayered approach with the graphical interface\nand console based interface on top, going\ndown to the central part of the system that\nconnects the storage to the model and up to\nthe user interface. This is illustrated in Fig. 1,\nincluding constraints and a minimum\nrequirement to run and maintain the system."}, {"heading": "This requirement is noted as \u201cBase System\u201d", "text": "which builds the system core and model by\nproviding the system with relevant data to\nfunction, and in time, building information\nusing the right interpreters from packages\nand programming skills. These eventually,\nbuild the knowledge-based system of CDD-\nSAT once implemented. To have this system\nbuilt on the basis of this requirement, the\nnecessary tools must also be incorporated to\nenable the system perform CDD-SAT\noperations. These operations are classed as\nSDD for Surface Damage Detection, and SAT\nfor Sorting Array Technique. Their\nassociation in operations, as shown in Fig. 2,\nbuilds a CDD dataset as well as results stored\nonto the system. The results further\ncontribute to CDD system analysis using\nstandard and custom functions, reference\ntools, libraries and packages accessible by\ncode on the system and thus their outputs\ndisplayed on screen."}, {"heading": "4.2 OVERALL ARCHITECTURE", "text": "The overall architecture is illustrated in Fig. 3, where specific Use-Case diagrams with active IDSS components are also included in\nthe design for the system. The design consists of agents interacting with the system and cargo environment where triangulation takes place. The operation is well-explicated by the\n9 | P a g e\nfollowing activity steps once the SAT system initiates. A layered architecture composed of use-cases is given in Fig. 4 with relevant use-\ncase descriptions in the following subsections."}, {"heading": "4.3 USE-CASE DIAGRAMS", "text": "An overview of the use-cases can be found in Fig. 4. There is also another stakeholder, namely the administrator, which is not visible in the overall plan (Fig. 4). The reason for this is that the administrator is not in direct connection with the system and the focus of this actor is on managing the database component updates, system failures and data validation on the incoming information flow concerning the status of cargos. This is not a constant check and subject to system erratic or unforeseen behavior in case of occurrence (e.g., hardware/software failures)."}, {"heading": "4.3.1 USE-CASE: TYPE IN CARGO", "text": "POPULATION (CLI)"}, {"heading": "Goal:", "text": "Have the inspector input number of stack population into the system via command-line interface (CLI)"}, {"heading": "Preconditions:", "text": " Have the detectors in a functional state"}, {"heading": "Success Condition:", "text": "Input is being processed"}, {"heading": "Failure Condition:", "text": "System process failure (hardware/software) circumstantially Steps: 1. Enter the n number representing stack\npopulation 2. Press \u201cEnter\u201d [ ] key\n10 | P a g e\n3. Population being processed by the system hardware and software SAT program 4. SAT hardware and software initiated"}, {"heading": "Extensions:", "text": "2.1 Cargo Triangulation is available in the\nsystem and engaged"}, {"heading": "4.3.2 DISPLAY SAT OPERATIONS (GUI)", "text": ""}, {"heading": "Goal:", "text": "Have the inspector to view a suggested container to inspect by the system via graphical user interface (GUI)"}, {"heading": "Preconditions:", "text": " Have the detectors in a functional state,  Have the display unit in a functional\nstate,  The software is already engaged and\nprocessing and displaying suggestions"}, {"heading": "Success Condition:", "text": "A specific stack is displayed on screen to the user for inspection"}, {"heading": "Failure Condition:", "text": "System process failure (hardware/software) circumstantially"}, {"heading": "Steps:", "text": "1. Wait for SAT operations to finish 2. View suggested container in terms of\nlabeled stack and row # to inspect 3. Be ready to inspect the specific container\nusing detectors"}, {"heading": "Extensions:", "text": "2.2 Cargo Triangulation is available in the\nsystem and engaged 3.1 The SAT program is displayed and\nsuggests 3 specific containers to the user for inspection"}, {"heading": "4.3.3 RUN DETECTORS", "text": ""}, {"heading": "Goal:", "text": "Have the inspector to inspect the suggested container and thereby processed by the system"}, {"heading": "Preconditions:", "text": " Have the detectors in a functional state,  Have the display unit in a functional\nstate,  The software is already engaged and\nprocessing and receiving sensory results from detectors and being processed, displaying status results"}, {"heading": "Success Condition:", "text": "A specific stack is inspected and results are relayed to the software processor to process a SAT red, orange and green status outcome"}, {"heading": "Failure Condition:", "text": "System process failure (hardware/software), circumstantially"}, {"heading": "Steps:", "text": "1. Wait for SAT operations to finish 2. Press \u201cRun Scan\u201d button on the GUI to run\ndetections: 2D image capture  3D surface mapping (as first scenario) parallel to radiation unit counts if necessary (as second scenario)\n3. Press \u201csave\u201d button or this is automatically done when \u201cAutoSave\u201d is checked by default 4. Wait for SAT operations to finish 5. Check results in the profile as red, orange\nor green 6. Be ready to inspect another specifically\nsuggested 3 containers using detectors for the next phase"}, {"heading": "Extensions:", "text": "Cargo Triangulation is available in the system and engaged 2.1 The SAT program is displayed and\nprocesses 3 specific containers from the user as inspected by the surface map processor of the program: a. XY parametric data (location) is used\nby the software to generate estimated cargo status results on other localized containers by program b. XYZ parametric data (surface mapping 3D-points) is used to compute the actual condition of surfaces captured by camera\n11 | P a g e\nc. X parametric data (radiation units) is used to compute the degree of exposure to radiation in case of radiation detected by a Geiger-Muller Counter 3.1 Store/update data by the program 3.2 Add/update inspection by the program 6.1 Three detections (\u03b1, \u03b2, \u03b3 detectors) could\nrun concurrently for each SAT phase, reducing the time factor down to a third if\nproper parallel coding is in place. Choose \u201cconcurrent scan option\u201d radio button, then click on \u201cRun Scan\u201d. 6.2 A regular manual scan mainly involves one detector at a time (this is the user\u2019s default mode). The \u201cstep-by-step or sequential scanning option\u201d is checked by default, the user clicks on \u201cRun Scan\u201d only.\ncombination of hardware and software interfacing other cases; the black case represents \u201cparametric adaptation\u201d based on generated results by the system; white cases represent an extended or usable case by an actor or system components."}, {"heading": "3.2.1 CHECK PROFILE", "text": ""}, {"heading": "Goal:", "text": "Have the inspector and/or decision maker to check cargo profile generated by the system after k phases of inspections (the reiteration\nof Cases 4.3.2 and 4.3.3) for all sorted cargo population Note: The phases are finished once the stacks are completely processed i.e., 3 inspections per phase, and sorted by the program after all successive phases of inspections are finalized.\n12 | P a g e"}, {"heading": "Preconditions:", "text": " Have the display unit in a functional\nstate,  The software is already engaged,\nprocessing and delivering estimates on the whole cargo population status"}, {"heading": "Success Conditions:", "text": " The data is reported to the inspector\nand manager for making a decision between damaged and undamaged goods,\n The validity of data updates is additionally checked by the administrator if necessary"}, {"heading": "Failure Condition:", "text": "System process failure (hardware/software), circumstantially"}, {"heading": "Steps:", "text": "1. Wait for SAT operations to finish 2. Check final results in the profile as red,\norange or green population 3. Make decision on the damaged and\nundamaged cargos as listed by the system"}, {"heading": "Extensions:", "text": "Cargo Triangulation is finished in the system and damaged vs. undamaged cargos are reported 2.1 Visiting data in the database by the\nadministrator a. Managing the database\n2.2 Manager makes decision what to do with damaged cargos based on the profile results 2.3 Inspector checks the profile and in case, runs secondary inspections"}, {"heading": "4.4 CLASS DIAGRAMS", "text": "The collection of the class diagrams for the different packages in the system along with a short description of them is given in Fig. 5.\nSince the system included so many variables and instantiations to fulfill the requirements of the system functions, we\nmerely listed the main players possessing certain roles in establishing a relationship between one UML element and another. Therefore, illustrating a concrete set of diagrammatic representations on classes, components, packages drawn between SDD and SAT systems, their subsystems\u2019 functionalities, processes and operations within the CDD-SAT system, was the most conceivable approach. Diagram (Fig. 5), contains all the collaborations of every class created in VB, C++, and Java, pertinent to our pseudocodes (\u00a7\u00a7 5.1.1 and 5.1.2), satisfying system objectives (\u00a7 3.3) to constitute the CDD-SAT hybrid simulator. The VB, C++ API interfaces with both specialization and generalization relationships (reciprocal and hierarchical) to other UML elements of the CDD-SAT system are highlighted in the diagram. Moreover, the Java Applet class plays the final role in displaying all the collated, processed and disseminated data from the previous CDD-SAT phases of the simulation in form of tables plus a time savings graph on screen (later inducted as Eq. 5). The processors system and subsystem deal with Input/output signals, from the moment where cargo surface data are acquired from the system, until the moment where processes reach conclusions and verdicts portraying the cargo status in the DB component. Of course, the \u2018repository system\u2019 acts as a middleware to other systems, preserving a specific format during I/O data transmissions. The format is based on the storage package which precludes any noiseform structure or sequence of raw 0 and 1 data. In fact, the formatted repository preserves the piped and packeted digital forms of data as other systems\u2019 meaningful output into the database. Therefore, the information enabling the user as a central link to communicate between all SDD and SAT systems during communication is done via signals, obeying the DB assigned protocol within the processors subsystem.\n13 | P a g e\nThe assigned protocol is a customized agreement of how data should be stored, and thereby programmers have a certain standard to make their program communicate with other programs during\noperations. The current version of the protocol where all subsystems communicate successfully from one CDD-SAT phase after another is shown in Fig. 7 of our DB section.\n14 | P a g e\nThe \u2018CDD-SAT display system\u2019 is the resultant of the summing junction (association) of both SAT and SDD systems according to Fig. 5, (recognizable by the symbol). Meaning that, the two SDD and SAT systems communicate with each other, after and during, the occurrence of SAT and SDD phases of the algorithm. The results and operations are displayed on screen mostly via GUI, and in the background, the CLI interface. The CLI receives input right at the beginning from the user indicating the cargo stack population ranging from 3 to n stacks. So, a stacks\u2019 input < 3, is not acceptable to the systems, reasoning that there is at least 3 containers or stacks to be inspected by detectors, concurrently (per phase).\nThe 1 or 2 containers input, given by the user in this exception, will not be processed in terms of SAT, since SAT is a sorting array system dealing with an n cargo population. However, if the system only runs on the basis of SDD, which analyzes a surface ranging from 1 to a set of containers (n), this would be acceptable.\nIn case of inspection of one container only, and not the population of stacks, the users disable the SAT option from the software, and solely do their analysis by the SDD part of the IDSS system. Therefore, in this case, no errors are reported.\nThe hybrid simulator, according to Fig. 5, clearly demonstrates how all interfaces via GUI and CLI components are in real-time and concurrent communication. Indeed, there is a \u201cmodel\u201d class sitting right at the bottom with a strong composition to the incoming and outgoing signals occurring between interface controls (program timers), scenario closure points, and their calculations on the stack population, time, surface damage pixels, and angular, etc.-limits of the program, defining the parameters of the CDD-SAT system.\nAll detailed descriptions for each UML element are provided in our documentation located in a \u201c/doc\u201d folder, fulfilling each coded solution on the system, and submitted as a supplementary document to the prototype,\non its technical account. 3 Nonetheless, the brief description of our hybrid simulator elements such as classes, components, and their roles in Fig. 5, is given by Table 3.\nThe conversion of data types is exemplified in our classes, e.g., OutputMap from a VB class for each integer data type displayed, analyzed (compared with other points) and stored as an xy point of an xy topological map, otherwise an xyz reference point to an xyz topological map, is either exported in integer, to form a grid map, otherwise, a string to store a verdict {red, orange, green} in the database file based on \u201cSurfaceDensityMapsModule\u201d processes and analysis. The \u201cmodule\u201d calls specific map tool instances from packages, in this case, Surfer 9 to satisfy xy, and xyz map object analysis. The decomposition of Surfer 9 [10] and other applications, their interfaces (API), class instances, components, packages communicating via signals occurring between interfaces, has been shown in Fig. 5. The Surfer program is treated as a reference tool, and using a scripting language like VBScript, importing and exporting certain values on maps by the \u201cmodule\u201d becomes feasible.\nFinally, the results are to be presented online (wireless technology from \u00a7 3.5) to the inspector and cargo manager, hence the Java Applet browsing solution for displaying DB results and time savings (performance), becomes quite relevant to the current CDDSAT architecture.\nFor each VB and C++ API or Java Applet interface, we have signified the very notation of how to exist in programming terms when you demonstrate your skills between highlevel OOP and low-level machine language? Of course, the answer is obvious.\nThe conversion of any data type is conditional to the way the code is compiled prior to implementation indeed. There is a difference in how we interpret/compile the words, expressions, etc. in binary to fulfill our class relationships.\n3 Ask authors for the full supplementary documentation of the codes on the prototype.\n15 | P a g e"}, {"heading": "Element Name UML Element : Domain", "text": "Interactions Description Programming\nLanguage Detector Class <Interface>:\nProcessors System A sensory device used for real-time data acquisitions from the cargo environment, and relays the same data to the software\nN/A\nData Package <system>: Processors System\nRaw I/O data is located in this package N/A\nSurfaceDetectionForm Class <Interface>: SDD Display System\nThe main interface with buttons, picture boxes, for SDD verdict and analysis\nVB\nSurface_DensityMaps Module <subsystem> : SDD Subsystem  Surfer  SDD System Invokes methods in another program called Surfer 9 as a topographical reference tool. It processes data on imported xy and xyz maps in form of density (contour) and 3D surface maps\nVBScript\nSurfaceDetectionSubSystem Subsystem<subsystem>: SDD System\nComprises of controls and other objects of the SDD program, operating in both, foreground and background. VB\nControls Package : SurfaceDetectionSubsystem : SDD System Consists of other classes to scan and process imagery data inclusive of timers to time the length of the processes\nVB\nTimers Parametric Class : Controls Package: SDD System\nPart of the [controls] package to run and measure time on sequential and concurrent scans i.e. TotalDetectionTime = T seconds stored in the DB file\nVB, VBScript\nScanButton Object Class: Controls Package: SDD System\nPart of the [controls] package to run sequential and concurrent scans by user\u2019s choice VB\nImport_Export Class: Data Package: SDD Processors System  SDD System\nImports and Exports relevant data as an imagery type depending on either concurrent or sequential mode; it outputs the verdict as {red, orange, green} VB, VBScript\nSurfer Class <metaclass>: SDD Subsystem\nA 2D-3D simulation toolkit with VBScript package support for processing xy and xyz maps VBScript\nSATApplication Class <implementation class>: SAT System\nThe main application to implement and run SAT by processing values from the CLI component (arguments) and DB values C++\nSATApplication Class <Interface>: SAT System\nThe main application to interface values by generating them to the DB for other parts of the system to access\nC++\nControls Package : SAT System Consists of other classes to generate and sort cargo stack array, inclusive of timers to time the length of the processes\nC++\nTimer Parametric Class : Controls Package: SAT System\nPart of the [controls] package to run and measure time of the processes occurring within the SAT System i.e. TotalSortingTime = T seconds from the SATApplication stored in the DB file\nC++\nTimer Parametric Class : Controls Package: SAT System  SAT Subsystem\nPart of the [controls] package to run and measure time of the processes occurring within the SAT Subsystem TotalSortingTime = T seconds from the SATSimulation stored in the DB file\nC++\nSignalListener Parametric Class : SAT System  SDD System\nIt waits for a signal to be received by the SATApplication program, coming from the SDD System\nC++\nSpacebarButton Class : Controls Package: SAT System\nA class that passes an IRQ signal to the system i.e. via a standard spacebar function to invoke a phase or step of the simulation\nC++\nSATSimulation Class: SAT Subsystem  SAT System\nInstantiates Simulation Sorting Components (graphical containers +\nC++\n16 | P a g e\nOn the other hand, we are not bound to delimit ourselves to objective programming by some language in our selection. This is quite visible when we process, analyze data, as an information class, converted to a\nknowledge-based system, otherwise, to be ignored due to not being robust enough in collaboration with program classes in operations (languages used in Table 3).\n17 | P a g e"}, {"heading": "4.5 ACTIVITY DIAGRAM", "text": "In Fig. 6, the flow of how the inspector conducts an SDD relative to SAT phases throughout the system is illustrated, and ends by a successful profiling of the cargos."}, {"heading": "5. Project Implementation", "text": "As listed in Table 3, our prototype was implemented in a hybrid fashion i.e. being coded in different programming languages supporting software framework interoperability [5], where the team members were most confident and able to effectively perform their tasks in their preferred\n18 | P a g e\nlanguage. This allowed all members to play along the IDSS requirements fulfilling the objectives of the project as well as I/O data quality (avoiding any garbage-in garbage-out, GIGO, encountering) hence, maintaining good performance on the simulation part of the project. A well-defined strategy was taken into action between our developed samples and certain portions of the prototype. For instance, the main GUI programmed in C++ for the user satisfying the graphics of the application, was partly as a sub-GUI programmed in classic VB and VB.NET for the inspector running the detectors. The good thing about .NET framework is that \u201cit includes a large library and supports several programming languages, which allows language interoperability (each language can use code written in other languages)\u201d [5].\nThe simulation background however, was initially programmed in C++ or C-compatible Win32.exe console based (the CLI class, Fig. 1 or 5), which processed the main mathematics anchored behind the SAT model on cargos (see \u00a7 5.1.1 pseudocode). All data acquisitions\nand post-processes were, of course, recorded in one raw DB file representing two corresponding DB files as exemplified in the following tables. All data were recorded according to an agreed custom format between team members. These data built our central information and at each team member\u2019s disposal during I/O data access, read and write operations. We assigned one standard protocol or a format to our database files (Tables 4 and 5) in our implementation. This enabled all of us to refer to the database and send relevant signals to each other through creating new temporary files in aim of proceeding from one SAT phase to another. Thus, we practically created a hybrid simulation comprised of executable subprograms triggering one another for each contributing scenario. The chronology of events was never disrupted based on this hybrid development as far as we disciplined ourselves to stick to the agreed DB standard, corresponding files during data transactions accessible by our codes.\nTable 4 below, represents the I/O data before sorting, during, and after sorting (cargo list and cardinality results) for an example of 48 stacked-up containers (just like the diagram). The minimal input is the cargo population, in this case, 48 containers highlighted in black.\nTable 5 below, mainly represents lists of sorted and \u2018to-be-sorted\u2019 containers corresponding to the relative attributes (columns) of Table 4, from phase 1 to phase 3, whereas phase 3 submits the final estimated results to the manager at phase 4.\nTotal C o n\ntain er\nP o p u latio n\nSo rtin g P o p u\nlatio n fo r\nA lp h a\nSo rtin g P o p u\nlatio n fo r\nB eta\nSo rtin g P o p u\nlatio n fo r\nG am m a\nD etected A lp h a\nD etected B eta\nD etected G am m a\nList o f R ed\nList o f O ran ge\nList o f G reen\nSo rted\nP o p u latio n\nIn sp ectio n s\nPhase 1 48 4 12 12 C12 D1 A7 A7, D1 0 C12 28 3\nPhase 2 30 3 10 10 B11, D11 D5, D11 B4 B4, D5 D11 B11 23 3\nPhase 3 6 2 3 3 D10 D8, D10 C8 0 C8, D8, D10\n0 8 3\nTotal 59 9\n19 | P a g e"}, {"heading": "5.1 SIMULATOR PSEUDOCODES", "text": "The following pseudocodes were implemented in our program, initially written by Philip and distributed to all team members for implementation. The graphics issuing lines of code in \u00a75.1.1, employed certain design components for constructing the GUI, and are initially inherited from Fig. 3 plan. The I/O background operations representing the SAT Pseudocode lines # 12 to 87 were coded by Martin and Matteus. Database configuration, standardization and protocol results assigned to all of the team members to conduct the right standard, were further coded and displayed by Nooshin, where she also employed the relevant plug-in in Java to run Excel (spreadsheet) in generating the time of effort or the time saving point graphs. CAD Pseudocode, the hybrid CAD-SAT code successions and evaluation, detection codes proportional to DB I/Os assignments were done by Philip. The VBScript code written by Philip, focused not only on implementing the binarization filter on imagery data, also 3D surface and density mapping via Surfer 9 for the xyz coordinates with relative P outcomes (damaged vs. undamaged), whilst xy local array sorting being supplied by Martin and\nMatteus\u2019s codes using the same P to estimate more subsequent P\u2019s through the database.\nThe scenario-based outcome of the pseudocode implementation is given in \u00a7\u00a7 5.2 , 5.3 and 5.4."}, {"heading": "5.1.1 SAT PSEUDOCODE", "text": "The CDD-SAT pseudocode: The following lines of pseudocode denote a hybrid representation of an actual code for any applicable programming language prototyping this algorithm:"}, {"heading": "Cargo Array Triangulation Algorithm", "text": ""}, {"heading": "START", "text": ""}, {"heading": "1. /* ********************************** */", "text": "2. /* Created by: Philip B. Alipour 3. /* Coded in C++ and Java languages by: 4. /* Matteus Magnusson, Martin W. Olsson,\n/* Nooshin H. Ghasemi\n5. /* Created on August 31, 2011 6. /* Last update: May 24, 2011 7. /* *********************************** */ 8. /* Pre-settings, graphics and I/O /*\nvariables of the program */\n9. /* **************************** */ 10. #Include necessary library files and/or\npackages\n11. \u2026 12. /* MAIN PROGRAM 1: */ 13. Create the main graphics and I/O\nfunction() { //relevant to the following lines, create sub-functions with or without arguments, and call them when necessary\nSorting Population for Alpha Sorting Population for Beta Sorting Population for Gamma Est. List of Reds Est. List of Orange Est. List of Greens Sorted Population by Ratio\nPhase 1\nA12, B12, C12, D12\nD1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12 A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12 A7, D1 0 C12 0.0625\nPhase 2 B11, C11, D11\nD2, D3, D4, D5, D6, D7, D8, D9, D10, D11\nB2, B3, B4, B5, B6, B7, B8, B9, B10, B11\nA1, A2, A3, A4, A5, A6, A7, B1, B2, B3, B4, C1, C2, C3, C4, C5, D1, D2, D3, D4, D5 C9, C10, D9, D10, D11 B11 0.5625\nPhase 3 C10, D10 D8, D9, D10 C8, C9, C10\nA1, A2, A3, A4, A5, A6, A7, A8, B1, B2, B3, B4, B5, B6, B7, B8, C1, C2, C3, C4, C5, C6, D1, D2, D3, D4, D5, D6 A9, A10, B9, B10, C7, C8, C9, C10, D7, D8, D9, D10, D11, D12\nA11, 12, B11, B12, C11, C12 1\n28, 14, 6\n20 | P a g e\n14. Get user input for n as Cargo Population; //this is when the user wants to know the\ncargo status based on some reason: environmental, event, regular inspection, etc.\n15. FOR i = 1 to n { 16. Instantiate a 2D array of containers; 17. Fill 2D empty space with graphical\ncontainers; //e.g. in shape of a set of rectangles\n18. Label containers as Ai for rows of column #1, Bi for rows of column #2, Ci for \u2026,\nAAi for \u2026,\nABi for \u2026, etc.; //we concatenate\ncharacter A with i to generate Ai, where\nthis applies to the rest in an enumerative fashion or as i grows\n19. } 20. Sort graphical containers for Object\nDefection Detection in three sections on the 2D array = {alpha, beta, gamma};\n21. Instantiate Colors set = {Red, Green, Orange}; //use a standard RGB package 22. Instantiate Random Function f = Rnd (i); 23. Generate values of fi for {alpha, beta,\ngamma} on screen; //program suggests container number fi to be inspected by user 24. Get user or detector input for {alpha, beta, gamma}; //detection or sensing\ndevice delivers the output to user and database\n25. Store {alpha, beta, gamma} results in a file or database; 26. } 27. /* END OF MAIN PROGRAM 1 */"}, {"heading": "28. /* *********************************** */", "text": "29. /* Cargo Array Triangulation (CAT) sub-\nalgorithm starts from here */\n30. /* *********************************** */ 31. Create a CAT function(){ 32. IF alpha list = {f1, f2, f3, f4, f5, \u2026, fn}\nAND fi is Red THEN //maximum is n, i is the randomly assigned identified object\n33. Print positive defection for f1 to fi; //probable defection is 1 in this\nspecific range\n34. Color the fi container Red; 35. ELSE IF alpha list = {f1, f2, f3, f4, f5,\n\u2026, fn} AND fi is Green THEN\n36. Print negative defection for f1 to fi; //probable defection is 0 in this\nspecific range\n37. Color the fi container Green; 38. ELSE IF alpha list = {f1, f2, f3, f4, f5,\n\u2026, fn} AND fi is Orange THEN\n39. Print somewhat defection for f1 to fi; //probable defection is 0.5 in this\nspecific range\n40. Color the fi container Orange; 41. Store All Printed Values into a Database 42. END IF 43. IF beta list = {f1, f2, f3, f4, f5, \u2026, fn}\nAND fi is Red THEN\n44. Print positive defection for f1 to fi; 45. ELSE IF \u2026 46. \u2026 47. END IF\n48. IF gamma list = {f1, f2, f3, f4, f5, \u2026, fn} AND fi is Red THEN 49. Print positive defection for f1 to fi; 50. ELSE IF \u2026 51. \u2026 52. END IF 53. } 54. /* END OF CAT FUNCTION */"}, {"heading": "55. /* MAIN PROGRAM 2: */", "text": "56. Create the main CAT calculations\nfunction(){ //step 2 and step 3 triangulations\n57. Read Database Values; 58. IF database empty THEN 59. Set a step variable value s = 0; //no\ntriangulation steps executed\n60. Exit and execute MAIN PROGRAM 1; 61. ELSE 62. Set s = 1; //step 1 is over 63. FOR the detected fi to fn of the array { 64. Clear fi to fn containers from the\ngraphics array or simulation platform;\n65. Display them as a separate group of containers; //red in the group of reds,\ngreen in the group of greens and Orange, in the group of orange\n66. Reiterate Triangulation starting from the f2 to fn-1 of the new columns = B(i+1),\nC(i+1), D(i+1) to D(i-1), C(i-1), B(i-1); //this applies to other labels e.g. AAi, ABi, ACi, etc. 67. } 68. Update Array Configuration, {alpha, beta,\ngamma} list, Color based on triangulation results;\n69. Set s = 2; //step 2 is over 70. END IF 71. IF s = 2 THEN 72. FOR the remaining fi to fn of the array { 73. Reiterate Triangulation starting from fi\nto fn-2 of the new columns = Ci, Di to D(i-2), C(i-2);\n74. } 75. Update Array Configuration, {alpha, beta,\ngamma} list, Color based on triangulation results;\n76. Set s = 3; //step 3 is over 77. ELSE IF s = 1 THEN 78. Exit and GOTO line # 57; 79. ELSE IF s = 0 THEN 80. Exit and execute MAIN PROGRAM 1; 81. END IF 82. Compute the total number of positively\ndetected objects;\n83. Compute the total number of negatively detected objects; 84. Compute the total number of partly positively detected objects; 85. Print list of all sorted objects in Database; 86. Generate Message with Options for sorted cargos = {reject, isolate, control,\naccept, else};\n87. /* END OF MAIN PROGRAM 2 */\nHALT\n21 | P a g e"}, {"heading": "5.1.2 CDD PSEUDOCODE", "text": ""}, {"heading": "Cargo Defection Detection (CDD) Algorithm", "text": "Detection via a specific sensing device for a specific situation starts here"}, {"heading": "START", "text": ""}, {"heading": "1. /* *********************************** */", "text": "2. /* Created by: Philip B. Alipour 3. /* Coded in Classic VB, VB-Script and 4. /* VB.NET by: Philip B. Alipour 5. /* Created on August 31, 2011 6. /* Last update: May 24, 2011 7. /* *********************************** */ 8. /* Pre-settings, graphics and I/O\nvariables of the program */\n9. /* *********************************** */ 10. #Include necessary library files and/or\npackages like Surfer 9\n11. \u2026 12. /* MAIN PROGRAM 0: */ 13. Create the main detector function() {\n//relevant to the following lines, create sub-functions with or without arguments, and call them when necessary\n14. IF Shape Match = Ordinary Container AND Right Cargo Shape Volume Dimensions THEN 15. Ignore further detection; 16. Generate Profile as Undamaged Container\n Cargo  Item(s); 17. ELSE 18. Analyze for Damages OR Hazardous OR\nRadiation Type Objects{\n19. Run Detection Mode via a Geiger-Muller Counter on Radiation; 20. IF NOT 21. Run Detection Mode for Damaged Objects\nusing 2D-3D Surface, Binarization and Contour Map Analysis + OCR real object to modifiable text analysis on damaged/hazardous listed and non-listed objects in the cargo; }\n22. Generate Profile as Damaged Container \nCargo  Item(s); 23. Generate Final Profile After Value\nComparisons;\n24. Generate Options and Decide { 25. Generate Message with Options for sorted\ncargos = {reject/isolate/control, accept, else} }\n26. } /* END OF MAIN PROGRAM 0 */ HALT"}, {"heading": "5.2 DATABASE", "text": "Resource sorting and management with the right P results on cargo status are situated in the DB component where the hybrid simulator subroutines access it for data read and write purposes. The CDD-SAT system according to our UML designs, heavily relies on the DB component shown in Fig. 7, and its\ncontents are the actual resultant trials made from Fig. 5 and the CDD-SAT program indeed.\nFig. 7, shows that the DB file is saturated with phases\u2019 outputs \u201c1/, 2/\u201d headers showing that two simulation phases have been succeeded. The file ends with an \u201cEND\u201d line as the final line written by the program. The file is stored as an accessible DB component to supply any information necessary in aim of displaying the outcome of the hybrid simulator. The protocol defining the format of the DB file was customized by the group (as programmers) as agreed to communicate under shared-points of information, running one CDD-SAT simulation phase from another. Specific string values like \u201c1/\u201d, \u201c2/\u201d,\u2026 \u201cAlfa\u201d \u201cBeta\u201d, \u201cGamma\u201d, \u2026, \u201cEND\u201d, are picked up from the file by the program as coded in VB, C++ and Java during system communications. The current component was quite suitable to fulfill the needs of the current release of the program. Thus partitioning this component in the future is essential to manage a huge population of cargo stacks at ports efficiently. More programming is then required to manage such DB files to maintain intelligence when concurrent triangulations for different stacks at different port locations are initiated within the cargo environment.\n22 | P a g e"}, {"heading": "5.3 MODEL", "text": "The domain knowledge used in the CDDSAT system is gathered in the simulationbased model. The system makes use of this knowledge when translating raw data gained from the stack labels and SDD tests during the phases of triangulation for the whole cargo population set. As shown in Fig. 5, and as specified in the last row of Table 3, all the maximums and minimum limits of the\noperations conducted between SAT and SDD systems are defined within the attributes and operations of the model. As all classes get instantiated in VB, C++ or Java within this hybrid simulator, creating timeline charts like Fig. 9, and profiling estimates in form of a DB table like relational-DB Tables 4 and 5, out of the raw data (like the raw DB file in Fig. 7), makes this model robust enough in any hybrid simulation, representing a uniform set of results without confusions to its user."}, {"heading": "5.4 SIMULATION RESULTS", "text": "The main simulation results are recognizable by the DB file component and tables as we have discussed and listed in the previous sections. The final results are at the end of the simulation, profiled to present the cargo status to its manager. Furthermore, the\ncalculated time results are fully explained later in \u00a7 6. However, in this section, we show that the collaboration of SDD and SAT is significant when it comes to CDD-SAT system\u2019s operations, as well as performance, contributing to an IDSS solution in result.\nThe IDSS solution is shown in Fig. 8. In this figure, the DB component plays the major role in providing all temporary dataset to the\n23 | P a g e\nSDD and SAT algorithms, once detection is made and reported to the system by the inspector using other agents (sensors) scanning cargos at the point of START, down to the point of HALT, where the manager receives information on cargo status to pass upon a decision. The diagram also signifies the importance of logic in processing data to supply the manager(s) meaningful data i.e. information which further demonstrates the system to be closely tied to a knowledgebased system in generating reliable estimates. The CDD-SAT system in this diagram reiterates the very fundamental design illustrated in Fig. 2, highlighting that SDD with SAT must always be in collaboration with each other between phases to generate accurate estimates to their phases\u2019 predecessors."}, {"heading": "5.5 INTELLIGENCE", "text": "The intelligent aspects of our prototype are the functionality of providing suggestions based on the available input. This is an activity usually performed by a skilled human and a set of sensory devices (detectors) identified as agents in our design. However, the system takes into account valid inputs by using our prototype with a certain knowledge level built upon agents\u2019 input as well as computations on the same input. The system in turn (which inspection phase?) delivers an output as a suggestion to inspect specific cargo labels in the cargo environment. The inspector no longer has to keep track of all inspection results and does not have to conduct inspection on all cargos.\nThe system handles the relay points between detectors, and optimally runs 3 detections concurrently by the \u03b1, \u03b2 and \u03b3 detectors. The inspector and the CDDSAT system core where a decision is suggested are in position during the steps (recall Use-Case 4.3.3).\nAn intelligent decision is suggested to inspect a particular container during triangulations to human agents, firstly, as inspectors, using their portable sensors (detectors), and for quicker results using automated screens moving between\ncontainers; secondly, submitting profiles to the manager(s) of the system as a resultant report on cargo inspections and finally, for a higher managerial decision i.e. what to do with the damaged version of the cargo? We have not covered the last one since it involves decision making solutions on a longer timescale during transportation i.e. a tactical model which is out of the current prototype\u2019s scope and suitable as an updated version producing sophisticated list of options relative to company protocols. These protocols, depending on what type of e.g. shipping company, are assigned to its employees playing the role of cargo managers, inspectors, etc.\nAs mentioned before, (\u00a7 5.3), the CDDSAT Simulation model-base is more of a lowlevel or a combination of an Operational Model and Real-time Analytical Models which entail mathematical calculations on the written data to the DB file(s). These files are stored for future use on each progressive phase of the SAT algorithm according to scenarios.\nAssociated requirements for the inspector to scan and suggest which cargo to inspect, is displayed by the program after stack population is inputted. Then, with a simple \u201cRun Scan\u201d button, the user gets a list of 3 containers per phase operation, detecting damages from the undamaged.\nFrom an AI viewpoint, The information gathering part by DB\u2019s plays an important role, say, when the same cargo list is suggested with similar damaged vs. undamaged results on the profile, the program skips the same configuration of detections (leaving out unnecessary program routines) and gives a high probability to the inspector that what is going to be the outcome before running a formal inspection!\nFor instance, if A2, E2, B2 cargo stacks, turn out to be Red, Orange and Orange in a population of 200 cargo stacks based on previous damage estimates on nearby stacks A1, D1 and B1, we could estimate the same outcome for a new population input having the same configuration of damage points. Now, assume that all data points are averaged\n24 | P a g e\nin terms of their surface damages close to a newly suggested of cargos in a larger population > 200. The algorithm, then knows that the outcome of the same stacks in the new population is the same as the one recorded in the past on A2, E2 and B2 for a particular scenario e.g., radiation. The level of exposure and its progress is similar, if the record on these labels were previously stored for the same scenario in the database. So, the scenario type, local configuration of stacks (its topology) similar to the previous profiles, most likely gives the similar outcome in SAT operations."}, {"heading": "6. PROJECT OPTIMIZATION", "text": "Along the dimensions of concern and\nuncertainty of the simulation project, we have\nstudied resource allocation, analysis and time\ndimensions on cargos using sensitivity\nanalysis, with a focus on optimization. Based\non our sensitivity quantitative analysis [6], the\nmodel precludes the negative quality of\nprocessing information (qualitative) in favor\nof positive results between detectors\ninstalled on the system excluding human\nagents (only considering software and\ndetectors). On the other hand, the system is\nsensitive to the qualitative performance when\nit comes to servicing the managers with fast\ndata-read relative to delivering reliable\nestimates on time. Therefore, the sensitive\ndata that infer to the actual input data from\nsensory units (detectors) are tested on a trial\nbasis that could reveal any uncertainties in\nthe inspection process. This exactly complies\nwith the notion stating that \u201cIf results are\nconsistent it provides stronger evidence of an\neffect and of generalizability\u201d (Leamer, 1978)\n[6]. To this account, the \u201cconsistency\u201d is\nanchored in the time parameter representing\na full detection quantified by time of effort\nand processed in a qualitative manner to\nhuman agents. The latter must convey to the\ndelivery of information and the estimates\nmade on damaged vs. undamaged cargos,\nquestioning the fact that whether this profile\ndisplays reliable estimates (information) to\nthe manager or inspector in a real-time\nsituation. We have computed and compared\nthis aspect with other algorithms along the\ndimension of time relative to resource\nallocation for reliable estimates by\nmaintaining performance under different\ncircumstances of cargo inspection:"}, {"heading": "6.1 SAVED TIME BY SAT VS. TIME LOSS", "text": "Optimization is mainly on the performance\ntime relative to DB information updates and\ndetection parameters. Here is an example\nfrom the main plan on a set of cargo stacks,\nwith a population of n = 48:\nThe equation on the Saved Time Effort from\nour defined parameters in \u00a73.4 is given by\nTsaved = Tother \u2013 TD . (5)\nAccording to the depicted graph, the system\noperating with SAT for n = 48 stacks via 9\ninspections takes approximately 113 seconds\nwhile for the same population via 48\ninspections without SAT (other algorithms)\ntakes approximately  \u0305 seconds, thus,\nthe saved time effort by SAT is Tsaved =  \u0305\nseconds."}, {"heading": "6.2 LEARNABILITY OF THE SAT SYSTEM", "text": "The system learns during trials and cargo\ndamage detections. The data is updated on\nregular 3-time inspections made over a\npopulation of cargos. Of course, the\ninspections are 3/n for each triangulation\nrelative to a red-orange-green estimate\nresult. The repeated record by chance during\ntrials of running the SAT application, fairly\ncontributes to AI features explicated earlier in\n\u00a75.5 of this report.\n25 | P a g e"}, {"heading": "7. EVALUATION", "text": ""}, {"heading": "7.1 VERIFICATION AND VALIDATION", "text": "Further analysis to our conducted SWOT\nanalysis, like sensitivity analysis on the time\nand spatial factors (performance) has already\nbeen covered. Of course, this resulted in\nassessing and tackling Uncertainties in the\nproject. It further resulted in Verification\nand Validation of our incorporated\ntechnique. The most influencing parameter\nwas time raised in the denominator part of\nour equations i.e. the cargo stack population\nbeing processed by the system is measured\nwith respect to time during code executions.\nFor precise measurements, the length of\ncode execution paths, program volume,\ndifficulty and length, we could use Halstead\ncomplexity measurement indeed [8]. However,\nin our hybrid prototype, typical time functions\nwere used and summed from one execution\nstep to another. For instance, in VB, we code\n1. \u2018The following creates a timer variable to compute the elapsed time interval per\nan invoked operation\n2. StartTime = Timer()\n3. ... \u2018this is where all the code subsists and thus timed 4. EndTime = Timer() \u2018this is where the timer finishes timing 5. Me.Text1.text = FormatNumber(EndTime - StartTime, 2) \u2018A text box displays the\nelapsed time result down to 2 decimal points on the same form object\n6. Debug.Print \u2018print elapsed time output\nThe last line is then saved or displayed as part\nof the total elapsed time of the whole SAT\noperation executed by the other compiled\ncodes in C++ and Java. Then, at the end of all\noperations of the simulation program, the\n\u201ctotal time\u201d T, is measured and compared to\nthe contributed TD of the program. If T is lost\ncompared to Tother, we say that SAT acted\ninefficiently; otherwise, it is always Tsaved ,\naccording to our simulation results. Meaning\nthat, the detections and processing lengths\nare all done and measured in terms of time.\nThe following graph shows how much\ntime we have totally saved on a random\nscenario for each inputted cargo population\nto the system during optimization, without\nincluding learnability features as explained in\n\u00a7 6.2. It shows in all scenarios we have saved\nat least 80 seconds depending on the\n26 | P a g e\ncaptured image from the cargo scene, as well\nas 3D scattering, surface and contour\nmapping technique with relative activities\nperformed by agents on the containers. The\nradiation scenario of the project was not\ncovered but considered throughout the\ndesign, since it requires a reliable dataset as\nour sample to be loaded, used, processed and\ntested by our system, averaging radiation\nunits indicating exposure, thereby generating\ncolor-coded red, orange and green results as\nspecified in our design.\nWe have tested and retested the\nsimulation to conclude our results in form of\nDB tables and time measurement. We ought\nto prove that the SAT algorithm is quite useful\nin terms of its usability, maintainability,\nfunctionality, efficiency, portability and\ninformation integrity, based on I/O database\nand management. For instance, the system\nuser is not overwhelmed with inputting a\nvariety of data to the system (e.g. complicated\nforms to fill-in) and mainly deals with a\nsimple interface to either relay actual data via\nsensors on cargo relative to giving an input\non just population (passing an argument n\nonly) to the system. The rest is the system\u2019s\nduty to process, analyze and update the given\ninformation between relay points. The results\nof the test are quite lucid in ISO-25010\nsoftware quality characteristics [7], prior to\nquantitative analysis, which has been\nconducted in the first place during the\nprogramming phases of the application.\nThe \u2018concurrent scans\u2019 curve in Fig. 10,\nrepresents \u201c3 detections by the \u03b1, \u03b2, \u03b3\ndetectors\u201d which generated approximately\nTD/3 when the \u201cconcurrent scan\u201d option was\nchosen on the prototype. This shows that\ncompared to a \u201csequential scanning\u201d by\ndefault (running one detector at a time) in the\nprogram, a significant time reduction is\nachieved for better performance. Therefore,\nFig. 9 is transformed into Fig. 10, showing this\noptimization by result.\n27 | P a g e\nThis of course, is achieved by parallel\nprogramming with manageably-running\nmultiple threads on the processor (coded in\nthe detections\u2019 simulation part in VB.NET), to\nmanage time sessions or application slices of\ntasks allocated to process incoming imagery\ndata from the detectors. As a minimum\nrequirement, having a dual-core CPU, of\ncourse, satisfies this spawning of threads\nduring program execution. Of course,\naccording to ISO 25010, nowadays computers\nall are at least equipped with dual-core CPUs\nsatisfying the usability aspect relative to\naffordability and cost effective issues within\nthe software engineering quality\ncharacteristics [7]."}, {"heading": "8. FUTURE WORK", "text": "Pertinent to our analysis, the future work\non the CDD-SAT system and its algorithms\ndepend on how we treat our dataset in real-\nworld situations. Of course, the current\nsimulation covered certain plausible\nscenarios portraying a real condition of a\ncargo relative to environmental changes,\nimpacts, and other constraints which could\ninvolve humans in the cargo transportation\nprocess. To this account, we have specified\nthe real scenarios where we can further\nmimic them and analyze their future\nperceptions of how they manifest themselves\nto humans in our real-world relationships,\ngiven in our conclusions section of this\nreport. Of course, the ultimate aim would be\nto run concurrent processes relative to\nmultiple scenarios of the CDD-SAT\napplication mapping the world to its system\ntopological matrix (its dynamic behavior) i.e.\na combination of \u201cwhat-if\u201d analysis for a\nspecific scenario coinciding with another\nwhich constitutes a bigger uncertainty\npredicted by the system. This makes, not only\nthe reliability aspect of the system sound, also\nelevates the confidence level of the software\nto 1."}, {"heading": "9. CONCLUSIONS", "text": "In this project, we have managed to run\nthe simulation on different scenarios. The\nscenarios were simulated in terms of xy local\ndamage estimates relative to xyz cargo\nsurface detection scenarios, initially gathered\nfrom the cargo environment, once a set of\ncontainers are suggested by the CDD-SAT\nsystem to the inspector. In particular:\nprobable rusty and oxidized surfaces of\ncontainers against undamaged ones, whereas\ntheir outcomes are stored in {Red OR Orange\nOR Green}. This constituted the verdict\ncoming from the system to profile the status\nof the triangulated cargos. Similarly, probable\npunctured walls or walls with holes against\nundamaged ones were also simulated.\nConcurrent detections processed by the\nprogram satisfying 3 incoming detections\nfrom the scene for surface damage analysis,\nproved how fast the system works.\nHowever, probable radiation exposure was\nconsidered, but not covered due to in need of\ntrying an actual dataset (as the supervisor L.\nHenesey indicated to provide us), which varies\nin short time intervals in any situation. For\ninstance, based on Roentgen radiation unit\ncounts per minute (cpm), the rate of exposure\ncompared to the rate on other scenarios like\nrusty container surfaces stationed in some hot-\nhumid environment, is high, and the scale of its\nspread to elsewhere is quite evident, whereas\nthe other scenario is deemed to be a long term\nissue co-occurring between the two scenarios.\nWe have animated our Use-Case\nDiagrams entailing surface detection plus xy\ntriangulations on local stack population n,\nwhere the Outcomes were sorted in {Red OR\nOrange OR Green} accordingly. This\n28 | P a g e\nconstituted our database I/O results, thus\nour profile results on the cargo for the whole\nstack population. Time Length Calculations +\nOptimization Issues were discussed and show\na significant upgrade in making reliable\ndecisions on time compared to other\nalgorithms. To this account, the discussion of\nthe most dominant factors in this IDSS project\nbecomes relevant: stack population, its data\nacquisition, detection process, and local\ndamage detection sorting with respect to\ntime. In our conclusions, we claim that the\nCDD-SAT\u2019s current usage as an IDSS solution\nis relevant to \u201cprediction scenarios\u201d based on\nreliable estimates on damaged vs. undamaged\ncargos. This makes inspections quite fast at\nthe port and elsewhere. Nevertheless,\nuncertainties and certain influential factors\ne.g., cargo environment, human interactions,\ntransportation status, atmospheric impact,\netc. always remain visible in our real-world\nrelationships."}], "references": [{"title": "Decision Support and Business Intelligence Systems", "author": ["E. Turban", "J.E. Aronson", "Liang", "T-P", "R. Sharda"], "venue": "New Jersey: Pearson Education, Inc., Chapters", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "Information Retrieval Algorithms and Heuristics", "author": ["D. Grossman", "O. Frieder"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2004}, {"title": "Monte Carlo and quasi-Monte Carlo methods", "author": ["R.E. Caflisch"], "venue": "Acta Numerica", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1998}, {"title": "Specification Searches: Ad Hoc Inferences with Non-experimental Data", "author": ["E. Leamer"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 1978}, {"title": "Object\u2019s surface roughness measurement using high resolution digital camera", "author": ["LEE", "EO Hyosung", "Yangdam", "Yongil KIM", "Kiwon"], "venue": "New Century International Conference FIG, Seoul, Korea", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2001}, {"title": "Geometric Range Searching and Its Relatives", "author": ["P.K. Agarwal", "J. Erickson"], "venue": "Proceedings of the", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1999}, {"title": "An Intelligent Decision Support System Proposal: A Realtime Cargo Damage Management System via a Sorting Array Triangulation Technique, Course DV2408, by Dr. L", "author": ["P.B. Alipour", "Magnusson", "M.W.M. Olsson", "N.H. Ghasemi"], "venue": "Henesey (Prof.), Blekinge Institute of Technology, Karlskrona,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2011}], "referenceMentions": [{"referenceID": 6, "context": "The CDD-SAT IDSS project is a new system proposed to sort cargos from a population of damaged and undamaged stacks in the shortest time possible with reliable estimates [12].", "startOffset": 169, "endOffset": 173}, {"referenceID": 2, "context": "Our simulation method integrates Regular and Quasi-Monte Carlo methods [4] for computing xi .", "startOffset": 71, "endOffset": 74}, {"referenceID": 4, "context": "[9] actual methods of computing actual damages based on surfaces and depth analysis.", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[9] distinguishing the damaged surface from a healthy one during camera recordings, observation and imagery analysis.", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "See also [11].", "startOffset": 9, "endOffset": 13}, {"referenceID": 3, "context": "Based on our sensitivity quantitative analysis [6], the model precludes the negative quality of", "startOffset": 47, "endOffset": 50}, {"referenceID": 3, "context": "with the notion stating that \u201cIf results are consistent it provides stronger evidence of an effect and of generalizability\u201d (Leamer, 1978) [6].", "startOffset": 139, "endOffset": 142}], "year": 2015, "abstractText": "This report covers an intelligent decision support system (IDSS), which handles an efficient and effective way to rapidly inspect containerized cargos for defection. Defection is either cargo exposure to radiation, physical damages such as holes, punctured surfaces, iron surface oxidation, etc. The system uses a sorting array triangulation technique (SAT) and surface damage detection (SDD) to conduct the inspection. This new technique saves time and money on finding damaged goods during transportation such that, instead of running n inspections on n containers, only 3 inspections per triangulation or a ratio of 3:n is required, assuming n > 3 containers. The damaged stack in the array is virtually detected contiguous to an actuallydamaged cargo by calculating nearby distances of such cargos, delivering reliable estimates for the whole local stack population. The estimated values on damaged, somewhat damaged and undamaged cargo stacks, are listed and profiled after being sorted by the program, thereby submitted to the manager for a final decision. The report describes the problem domain and the implementation of the simulator prototype, showing how the system operates via software, hardware with/without human agents, conducting real-time inspections and management per se.", "creator": "Microsoft\u00ae Word 2010"}}}