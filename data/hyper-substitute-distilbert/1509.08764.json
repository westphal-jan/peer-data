{"id": "1509.08764", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Sep-2015", "title": "On the Min-cost Traveling Salesman Problem with Drone", "abstract": "something planned to appear used exclusively behind urban domain, automated patrol vehicles ( ufo ) have stepped up after feature chief driver of technical demand modeling in commercial sector or \" last - mile delivery \". today those novel approach, small uavs, also bestowed upon drones, stand deployed in scenarios with the utility to engage goods paying customers. towards traditional context, lets give rise to a new mention of the traveling salesman problem ( tsp ), beside which we call cooperation with drone ( tsp - d ). in this paper, we propose two structures : model first - cluster second, and cluster combination - stage phase, to solve the problem efficiently. a new mixed function programming may since also introduced to handle overall cluster specification in many heuristics. tools are large inverse, adapting different terrain tables yielding the desired task, showing both heuristics, to transport vehicles demonstrating these sizes and characteristics. your numerical analysis shows not only really significant savings compare to truck - load items but for a superior performance against the usual work.", "histories": [["v1", "Tue, 29 Sep 2015 14:19:47 GMT  (816kb,D)", "http://arxiv.org/abs/1509.08764v1", "13 pages, 9 figures, technical report"], ["v2", "Mon, 23 May 2016 06:58:52 GMT  (243kb,D)", "http://arxiv.org/abs/1509.08764v2", "25 pages, technical report, latest work"], ["v3", "Sat, 29 Jul 2017 18:08:35 GMT  (295kb,D)", "http://arxiv.org/abs/1509.08764v3", "57 pages, technical report, latest work"]], "COMMENTS": "13 pages, 9 figures, technical report", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["quang minh ha", "yves deville", "quang dung pham", "minh ho\\`ang h\\`a"], "accepted": false, "id": "1509.08764"}, "pdf": {"name": "1509.08764.pdf", "metadata": {"source": "CRF", "title": "Heuristic methods for the Traveling Salesman Problem with Drone", "authors": ["Quang Minh Ha", "Yves Deville", "Quang Dung Pham", "Minh Ho\u00e0ng H\u00e0"], "emails": ["quang.ha@uclouvain.be", "yves.deville@uclouvain.be", "dungpq@soict.hust.edu.vn", "minhhoang.ha@cirrelt.net"], "sections": [{"heading": null, "text": "I. Introduction\nOver the years, companies always look for methods to find the most cost efficient way todistribute goods across the logistic network [6]. Traditionally, trucks are used to handlethese tasks in which each of its itinerary is considered as a traveling salesman problem (TSP) and its optimal tour has the best cost-efficient value. However, with the emergence of technologies, a new distribution method arises where small unmanned aerial vehicles (UAVs), also known as drones, are deployed to support parcels delivery. On one hand, there are 3 advantages of using a drone for delivery: (1) it can be operated without human as pilot, (2) it can avoid the congestion of traditional road networks by flying over them, (3) it is fast. On the other hand, as the UAVs are operated using batteries, their flight endurance is limited, resulted in maximum travel distance and restricted size of parcels. Likewise, a truck has its advantage of long range traveling, large cargo and diversity of parcels\u2019 size but it is also heavy and slow.\nEvidently, the pros of the truck resolves the cons of the UAV and conversely, the pros of UAV fixes the cons of the truck. This is the foundation of a novel method named \"last mile delivery with drone\" [2] that transports the UAV closer to customer locations by the truck in order to service customers within its flight range, effectively increase its usability and schedule flexibility. Also, large cargo and mobility properties transform the truck into a mobile depot and a delivery resource. Specifically, the truck departs from the depot carrying the UAV and all of customer parcels. As the truck makes deliveries, the UAV is launched from the truck to service a customer with a parcel. While the UAV is in service, the truck continues its schedule to new customer locations. The UAV then returns to the truck in a location different from the launch point.\nIn the literature, we aware of two previous works that investigates a combined truck and drone delivery approach. Murray and Chu [4] proposed a mixed integer programming (MIP) formulation and a simple heuristic under the name \"Flying Sidekick Traveling Salesman Problem\" (FSTSP)\nar X\niv :1\n50 9.\n08 76\n4v 1\n[ cs\n.A I]\n2 9\nSe p\n20 15\nwhile Agatz et al., [1] proposed a similar problem under a more research-oriented name \"Traveling Salesman Problem with Drone\" (TSP-D), also with a MIP formulation and many route first - cluster second heuristics. They are differed in one requirement: FSTSP requires the distinctive location between launch point and rendezvous point. At the same time, TSP-D allows these two points to be a same location.\nIn this paper, we propose novel approach to solve the TSP-D. Although we use the same name as Agatz et al., it is not the same problem. In fact, our TSP-D shares the same characteristic as FSTSP. The contributions of this paper are:\n- We propose two heuristics of two opposite concept: cluster first - route second and route first - cluster second\n- We introduce a mixed integer programming formulation to solve the cluster step in our heuristic methods\n- We provide 3 set of instances in different size and options for testing this problem\nThis paper is structured as follows: a formal definition of our TSP-D is introduced in section II. After that, we provide notations, mathematical formulation to the cluster first approach in section III. We present two heuristics in section IV. In section V, the design and properties of the experiments are demonstrated. We discuss in detail the results in section VI. Finally, a summary and an overview of the future research are highlighted in section VII.\nII. The Traveling Salesman Problem with Drone\nIn TSP-D, we consider a set of customers, each of whom must be served exactly once by either a truck or a UAV. The truck and the UAV must depart from, and return to the a single depot exactly once. During the tour of the truck, it may proceed multiple UAV sorties. Each of UAV sortie consists of three nodes: the launch node, the UAV node, and the return node as follows:\n- The launch node can be either a depot or a customer location (node).\n- The UAV node is a customer location that is served by UAV\n- After service the customer, UAV will either rendezvous with the truck at the next customer location, or return to the depot. These two vehicles must wait for each other at the rendezvous point to fulfill the movement-synchronization characteristic [3].\nOnce launched, the UAV must visit a customer and return to a truck or to the depot within the UAV\u2019s flight endurance limit. A tuple is only selected if and only if this endurance requirement is met. There is also a time needed for the truck\u2019s driver to launch and retrieve the UAV. The objective is to minimize the travel time of the truck and UAV. A visual explanation is shown in figure 1, 2, 3. Starting from the truck-only route in figure 1, figure 2 interprets the scenario where customers are far from the depot and outside the flight endurance of the UAV.\nOn the other hand, figure 3 illustrates the case where some customers are within the UAV flight range, therefore, the UAV can start directly from the depot, service a customer, then rendezvous with the truck to continue the delivery task. At the end, the UAV, after being launched from the truck, service a customer, can directly flight to the depot as it meets the flight endurance requirement.\nAs can be seen from the example above, a solution of TSP-D is an assemblage of smaller routes, each of which may or may not contain the service of UAV. In the case it has an UAV, the route contains not only an UAV sortie, but also a set of customers that the truck serve during the time UAV performs a sortie. We define this kind of route an UAV route which is described below.\n.1 UAV route\nAn UAV route is defined as (\u3008i, j, k\u3009, {O}) where:\n- (\u3008i, j, k\u3009 is an UAV sortie: a tuple of three locations: launch point i, service point j, rendezvous point k as explained above\n- {O} is a set of nodes that the truck may travel between i and k (during the UAV performs a sortie). This set may be empty, stating that the truck and the UAV will travel a triangle (figure 5)\nAn example is shown in figure 1, set O has 3 customers. Another example is in figure 5 where there is no customer in-between launch point and rendezvous point, hence the truck and the UAV will travel a triangle. The definition of UAV route is a central element in our cluster first formulation which is shown in the section below.\nIII. Cluster first approach\nI. Notations\nWe apply the following notations and parameters for the cluster first mixed integer programming formulation (MILP). Let N = {1, . . . , n} denote the set of customers. Let 0 and n + 1 denote single physical depot. The set of all nodes in the graph is denoted by V = {0, . . . , n + 1}.\nNotably, let \u2126 represents the set of all possible UAV routes given the set of nodes V. We want to restate that a tuple of an UAV route is selected if and only if it meets the flight endurance requirement. Furthermore, a tuple (UAV sortie) may be appear in one or many UAV routes due to the various possibilities of in-between nodes {O}. Hence the size of \u2126 is at least the number of UAV sorties.\nWe also define some binary coefficients as follows: let uir \u2208 {0, 1} equals one if customer i \u2208 N appears in set {O} of UAV route r \u2208 \u2126 in the final solution. Similarly, dir \u2208 {0, 1} equals one if customer i \u2208 N is an UAV node of route r \u2208 \u2126. Additionally, tir \u2208 {0, 1} equals one if customer i \u2208 V appears either at the launch point i or rendezvous point k of an UAV sortie of route r \u2208 \u2126.\nWe have the binary decision variables \u03bbr \u2208 {0, 1} equals one if UAV route r \u2208 \u2126 is selected in the final solution. Let pr denote the profit of choosing route r. This profit is calculated using various functions that are shown in the experiment settings section.\nII. Cluster first formulation\nGiven the notations, parameters and variables above, we now present our mixed integer programming (MILP) formuation:\nMax \u2211 r\u2208\u2126 pr\u03bbr (1)\ns.t. \u2211 r\u2208\u2126 uir\u03bbr \u2264 1 \u2200i \u2208 N (2)\n\u2211 r\u2208\u2126 tir\u03bbr \u2264 2 \u2200i \u2208 V (3)\n\u2211 r\u2208\u2126 dir\u03bbr \u2264 1 \u2200i \u2208 N (4)\n\u2211 r\u2208\u2126 uir\u03bbr + \u2211 r\u2208\u2126 tir\u03bbr + \u2211 r\u2208\u2126 dir\u03bbr \u2264 1 \u2200i \u2208 N (5)\nThe objective is to maximize the profit of choosing UAV routes among \u2126. Constraint (2) ensures that each node appears in-between an UAV route at most once. Similarly, constraint (4) guarantees that each node appears as UAV node at most once. Constraint (2) states that each node may appears as terminal node (i or k in an UAV sortie) at most twice. For example: we have two routes with two UAV sorties {0, 1, 5} and {5, 2, 4}, we cannot have node 5 appear as first or last node of a sortie in any other routes. Hence another route with UAV sortie such as {5, 6, 7} violates the constraint. Finally, constraint (5) couples uir, tir, dir, ensuring that a node can only have one role (terminal node or UAV node or in-between node).\nIV. Heuristics\nThis section presents two heuristics based on two adverse approaches. In cluster first - route second, we aim to find the clusters - the set of UAV routes that are selected in the final solution. After that, we build the tour of truck given the existing UAV routes. Alternatively, in route first - cluster second, we build the truck-only tour first, then apply cluster step to find the set of UAV routes by replacing some nodes serve by truck with UAV nodes and possibly rearrange some nodes in truck\u2019s tour. The following subsections describe in details two heuristics.\nI. Cluster first - route second\nThe pseudo code is shown in Algorithm 1. It begins at line 1 by solving the cluster first MIP in function solveMIP to get the set of selected UAV routes. This set, along with the remaining nodes that are not appeared in any selected UAV routes, is then used to construct a symmetry TSPLIB file [5] in line 2. However, if we leave the UAV route as it, during the process of building the truck\u2019s tour, its origin may be altered as all elements of the UAV route will be treated as normal nodes in a TSP graph. In order to keep it unchanged, we need to merge all the UAV route nodes into an individual node. This is the work of constructTSPInput function which is introduced in Algorithm 2.\nAfter line 2, the \"cluster first\" part of the heuristic is completed. The tour of the truck with given UAV routes is then constructed by using a TSP solver in line 3. Finally we unmerge the UAV routes to get the solution in line 4.\nAlgorithm 1: Cluster first - route second heuristic Data: instance Result: Solution 1 UAVRoutes\u2190 solveMIP(instance); 2 TSPInput\u2190 constructTSPInput(UAVRoutes, instance); 3 TSPSolution\u2190 solveTSP(TSPInput); 4 Solution\u2190 createSolutionFromTSP(TSPSolution, instance); 5 return Solution;\nIn Algorithm 2, each UAV Route \u3008i, j, k\u3009, {O} is processed as follows: we define n the new merge node that represents for all nodes of this route. The distance from n to other nodes (and vice versa) is the total distance from node i to that node and the distance from i to k going through all nodes in {O}.\nAfter merging all UAV routes, we add them to a list tspNodes, along with the remain \"non-UAV Route\" nodes. Finally a full weight matrix TSPLIB file is generated and return. A visual sample is shown in figure 6\nAlgorithm 2: constructTSPInput function that create a TSPLIB file, as input for TSP solver Data: UAVRoutes, instance Result: outputFile 1 remainNodes \u2190 all nodes not in UAVRoutes ; 2 tspNodes \u2190 remainNodes ; 3 forall the route \u2208 UAVRoutes do 4 define a node n that merges all the nodes from i to k of the truck ; 5 distance from n to any node\u2190 (distance from route(i) to that node + distance from i to k\ngoing through all nodes in O) ;\n6 generate a TSPLIB file outputFile with the edge weight matrix; 7 return outputFile;\nII. Route first - cluster second\nAlgorithm 3 describes the pseudo of route first - cluster second heuristic. It starts by solving a truck-only TSP via function solveTSP in line 1 (route first). The rest of the algorithm is similar to Algorithm 1 except in line 2. Instead of using solveMIP function to solve the MIP model with original problem, it relies on the truck-only TSP solution to create the UAV routes (cluster second) in solveMIPWithTSPSolution function. The set \u2126 of the MIP model satisfies the following condition:\n- Its UAV sortie nodes \u3008i, j, k\u3009 must be in the tour of TSPSolution\n- i must appear before j, j before k in the TSPSolution.\nFigure 7 demonstrates this heuristic visually.\nAlgorithm 3: Route first - cluster second heuristic Data: input Result: Solution 1 TSPSolution\u2190 solveTSP(input) ; 2 UAVRoutes\u2190 solveMIPWithTSPSolution(TSPSolution); 3 TSPInput\u2190 constructTSPInput(UAVRoutes, instance); 4 TSPSolution\u2190 solveTSP(TSPInput); 5 Solution\u2190 createSolutionFromTSP(TSPSolution, instance); 6 return Solution;\nV. Experiments\nIn this section, we describe our design of experiment in term of instances and settings. For the instances, we adapt the characteristics of depot locations from the work of [4], the customer locations generations from [1]. The detailed explanations are shown in subsections below.\nI. Instances generation\nIn order to evaluate the impact of different aspects of depot and customer locations to the performance of our heuristics, 2 sets of instances were generated. Each of which has different number of customers along with the square region that they are distributed (see table 1).\nWe adapt the number of customers and square region area from the work of [4] for Set 1, scale them 10 times to have Set 2.\nSpecifically, there are 3 depot locations: in (0,0), the average of the x- and y-coordinates of the customers, the average x-coordinates with y-coordinates of zero. We call them 0-center, xy-center, x-center respectively, . Furthermore, three methods to generate customers\u2019 locations are:\n- Gaussian: For each point, we draw an angle a from [0, 2\u03c0] uniformly and a distance r from normal distribution with mean 0 and standard deviation of the edge of area (for example, 4 km). Then the coordinate of x = rcosa and y = rsina. This idea is adapted from [1]\n- Uniform: the locations are generated uniformly across the area\n- Random: the locations are generated totally random\nThree depot locations and three point generation methods constitute 9 possible options (see Table 2). Therefore, for every set, each of these options have 10 representative instances. Thus, each set contain 90 instances and 180 is the total number of instances generated.\nII. Experiment settings"}, {"heading": "II.1 Profit functions", "text": "In the MIP formulation above, the profit pr, r \u2208 Omega is calculated by two different functions with various options. They are:\nFunction 1: pr = cr (6)\nFunction 2: pr = cr\nwr + 1 (7)\nWhere wr is the actual waiting time between 2 vehicles at the rendezvous point. cr has 3 options:\n(1) cr = 1, meaning that we only want to count the number of UAV routes\n(2) cr is calculated by taking min between travel times of UAV and truck from i to k\n(3) cr is the distance from j of a tuple to the center of all customers. This simulates the scenario similar to figure 2 and 3 where the UAV customers are in the far-most locations and we expect the drone to service them, helping the truck to save costs.\nWith 2 function types, 3 cr options, we have 6 settings of cluster first - route second heuristic, labeled as: obj-1, obj-2, obj-3, obj-1w, obj-2w, obj-3w. For the sake of simplicity, we only test two functions in route first - cluster second heuristic with cr is fixed to option (3). They are labeled as rf and rf-w for two functions respectively."}, {"heading": "II.2 Time span", "text": "We define a time span - the maximum allowable time that either the truck or the UAV can return to the rendezvous point sooner or later than each other. It means, one vehicle can wait for the other in a certain amount of time, allow the truck to flexibly arrange its schedule (see figure 8). For example, if the UAV arrives at a customer location first, it can wait for the truck, and when the truck comes to the location, it can immediately continue to move to the next location without waiting for the UAV.\nThe value of time span affects the quality of the solution. If the time span is too small, there will be less flexibility for the truck schedule with the UAV. On the other hand, the high time span let the truck at some point wait, or be waited by the UAV for a long time, causing a longer total travel time. We will discuss more about this in the next section where we use a factor to calculate the time span, balancing between decision time and the quality of the solution.\nIn this paper, we set the time span for each set of customers based on experiments. Shorter time span allows the cluster first MIP model to reduce the size of the set \u2126, thus balance between solution quality and running time. More explanation will be discussed in the results section."}, {"heading": "II.3 Other parameters", "text": "The truck speed is set to 40 km/h, UAV speed is 56 km/h. The flight endurance is set to 20 minutes. The time to launch and retrieve the UAV is 1 minute each. These settings are adapted from the work of [4]. To solve the MIP model, we use CPLEX 12.6.2. The TSP is solved (in both heuristics) by the state-of-the-art solver Concorde.\nVI. Results\nThis section describes experimental results on all settings of our heuristics and FSTSP. The algorithm is implemented in Scala language with all the results are given on a computer system consists of 4 \u00d7 AMD CPU at clock speed 1400 Mhz and 92GB of memory free. The rest of this section is organized as follows. Firstly, we compare the results of all heuristics with truck-only value to evaluate their overall performance. Secondly, we report the results of our heuristics under all settings against FSTSP. The next section evaluates the impact of instance options to the performance of our heuristics, where we also want to find the best combination of instance option and profit function.\nI. Compare to truck-only TSP optimal solution\nIn this result, we want to observe the gap in percentage between FSTSP and 6 settings with truck-only TSP optimal solution. The result are demonstrated in Table 3, 4 The gap is calculated by:\ngap = newObjective\u2212 tspObjective\ntspObjective \u00d7 100 (8)\nAs can be seen, the negative average gaps are found in all of the settings. It means the combined method of truck and drone for delivery is clearly more cost-efficient than the traditional method. For a small number of customers like in Table 3, there are only slight differences between FSTSP and the best settings (obj-3 and rf). However, the performance of FSTSP decreases as the size of customers increases (from -41.39 downto -27.18), while it is opposite for our heuristic settings. Specifically, Set 2 shows a significant performance difference between FSTSP and the rest. Again, obj-3 and rf are two best settings with their average gaps close to each other (-42.79 and -42.29).\nBoth obj-3 and rf share one common characteristic: they both use profit function 1 with cr option 3. Hence, this combination is considered to be the best among others. It is logical when the profit function is calculated by taking the distance from UAV node to the center of all customers, as high profit means that the drone will be sent to service the furthest customers, saving the traveling cost for the truck.\nII. Compare to FSTSP heuristic\nWe want to observe the performance of our models against FSTSP framework. We calculate the gap - the percentage that our models can outperform or being outperformed by FSTSP. The gap is calculated by:\ngap = objective\u2212 f stsp\nf stsp \u00d7 100 (9)\nA positive average gap means that the setting is better than FSTSP. Furthermore, a winning rate in percentage is also demonstrated to see the performance of each setting. A value of more than 50% shows that the setting dominates FSTSP. Again, obj-3 and rf are the two best settings and outperform FSTSP in either Set 1 or Set 2 (see Table 5, 6).\nIII. Comparison between instance options\nIn this subsection, we want to evaluate the impact of instance options to the performance of all settings. From Table 7, among 9 options, obj-3 won 7 and rf has 2 winnings. At this point we can conclude that cluster first - route second heuristic performs better than route first - cluster second under the settings of profit function 1 and cr option 3.\nAdditionally, figure 9 shows detailed winning rate in percentage of each settings. Contrary to obj-3 and rf, obj-2 and obj-2w have the worst performance, meaning that shortest travel time of each UAV routes does not necessarily leads to a truck\u2019s shortest total time.\nVII. Conclusion\nThis paper proposed a MIP formulation to solve the cluster step of two new heuristic methods. In cluster first - route second, we first find the UAV routes set and then build the truck\u2019s route given the fixed clusters. Conversely, route first - cluster second solves the truck-only TSP to get an initial route. It then runs the cluster step to rearrange that route. Experimental results demonstrate the effectiveness of both heuristics as the customer size increases, compare to either TSP objective or FSTSP. It also shows the impact of instance options to heuristics performances. In any heuristics, the settings with profit function 1 and cr option 3 dominate all others, strengthening our observations that the drones should service the furthers customers to help saving the truck\u2019s travel time. Furthermore, cluster first - route second heuristic performs better than route first - cluster second.\nAs nature of a generalized version of a NP-Hard problem (TSP), larger instances of this problem cannot be solved by using a MIP solver for clustering, in a reasonable time. It resulted in the tuning of time span parameter to reduce the \u2126 size in MIP model. Hence, local search techniques should be developed. That is the next step in our developments for this problem. Additionally, we want to have more numerical analysis on the relation between different instance options to the performance of heuristics. They will clearly give us closer look into the nature of this problem. It is also obviously clear to extend this problem to a multiple trucks and multiple UAV problem. Also an online and dynamic version is also a logical direction.\nAcknowledgement\nThe research of this paper is supported by National Foundation for Science and Technology (NAFOSTED), project ID FWO.102.2013.04\nReferences\n[1] Agatz, N., Bouman, P., Schmidt, M.: Optimization approaches for the traveling salesman problem with drone. Tech. rep. (2015)\n[2] Banker, S.: Amazon and drones \u2013 here is why it will work (dec 2013), http://www.forbes. com/sites/stevebanker/2013/12/19/amazon-drones-here-is-why-it-will-work/\n[3] Drexl, M.: Synchronization in vehicle routing-a survey of vrps with multiple synchronization constraints. Transportation Science 46(3), 297\u2013316 (2012)\n[4] Murray, C.C., Chu, A.G.: The flying sidekick traveling salesman problem: Optimization of drone-assisted parcel delivery. Transportation Research Part C: Emerging Technologies 54, 86\u2013109 (2015)\n[5] Reinelt, G.: Tsplib\u2014a traveling salesman problem library. ORSA journal on computing 3(4), 376\u2013384 (1991)\n[6] Rizzoli, A.E., Montemanni, R., Lucibello, E., Gambardella, L.M.: Ant colony optimization for real-world vehicle routing problems. Swarm Intelligence 1(2), 135\u2013151 (2007)"}], "references": [{"title": "Optimization approaches for the traveling salesman problem with drone", "author": ["N. Agatz", "P. Bouman", "M. Schmidt"], "venue": "Tech. rep", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Amazon and drones \u2013 here is why it will work (dec 2013), http://www.forbes", "author": ["S. Banker"], "venue": null, "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Synchronization in vehicle routing-a survey of vrps with multiple synchronization constraints", "author": ["M. Drexl"], "venue": "Transportation Science 46(3),", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "The flying sidekick traveling salesman problem: Optimization of drone-assisted parcel delivery", "author": ["C.C. Murray", "A.G. Chu"], "venue": "Transportation Research Part C: Emerging Technologies", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Tsplib\u2014a traveling salesman problem library", "author": ["G. Reinelt"], "venue": "ORSA journal on computing 3(4),", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1991}, {"title": "Ant colony optimization for real-world vehicle routing problems", "author": ["A.E. Rizzoli", "R. Montemanni", "E. Lucibello", "L.M. Gambardella"], "venue": "Swarm Intelligence", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2007}], "referenceMentions": [{"referenceID": 0, "context": "Under research context, it gives rise to a new variant of the traveling salesman problem (TSP), of which we call TSP with drone (TSP-D) [1].", "startOffset": 136, "endOffset": 139}, {"referenceID": 5, "context": "Introduction Over the years, companies always look for methods to find the most cost efficient way to distribute goods across the logistic network [6].", "startOffset": 147, "endOffset": 150}, {"referenceID": 1, "context": "This is the foundation of a novel method named \"last mile delivery with drone\" [2] that transports the UAV closer to customer locations by the truck in order to service customers within its flight range, effectively increase its usability and schedule flexibility.", "startOffset": 79, "endOffset": 82}, {"referenceID": 3, "context": "Murray and Chu [4] proposed a mixed integer programming (MIP) formulation and a simple heuristic under the name \"Flying Sidekick Traveling Salesman Problem\" (FSTSP)", "startOffset": 15, "endOffset": 18}, {"referenceID": 0, "context": ", [1] proposed a similar problem under a more research-oriented name \"Traveling Salesman Problem with Drone\" (TSP-D), also with a MIP formulation and many route first - cluster second heuristics.", "startOffset": 2, "endOffset": 5}, {"referenceID": 2, "context": "These two vehicles must wait for each other at the rendezvous point to fulfill the movement-synchronization characteristic [3].", "startOffset": 123, "endOffset": 126}, {"referenceID": 4, "context": "This set, along with the remaining nodes that are not appeared in any selected UAV routes, is then used to construct a symmetry TSPLIB file [5] in line 2.", "startOffset": 140, "endOffset": 143}, {"referenceID": 3, "context": "For the instances, we adapt the characteristics of depot locations from the work of [4], the customer locations generations from [1].", "startOffset": 84, "endOffset": 87}, {"referenceID": 0, "context": "For the instances, we adapt the characteristics of depot locations from the work of [4], the customer locations generations from [1].", "startOffset": 129, "endOffset": 132}, {"referenceID": 3, "context": "We adapt the number of customers and square region area from the work of [4] for Set 1, scale them 10 times to have Set 2.", "startOffset": 73, "endOffset": 76}, {"referenceID": 0, "context": "This idea is adapted from [1] - Uniform: the locations are generated uniformly across the area - Random: the locations are generated totally random Three depot locations and three point generation methods constitute 9 possible options (see Table 2).", "startOffset": 26, "endOffset": 29}, {"referenceID": 3, "context": "These settings are adapted from the work of [4].", "startOffset": 44, "endOffset": 47}], "year": 2017, "abstractText": "Once known to be used exclusively in military domain, unmanned aerial vehicles (UAV) have stepped up to become a part of new logistic method in commercial sector called \"last-mile delivery\". In this novel approach, small UAVs, also known as drones, are deployed in tandem with the trucks to deliver goods to customers. Under research context, it gives rise to a new variant of the traveling salesman problem (TSP), of which we call TSP with drone (TSP-D) [1]. In this paper, we propose two heuristics: route first cluster second, and cluster first route second, to solve the problem efficiently. A new mixed integer programming formulation is also introduced to handle the cluster step in both heuristics. We conduct an experiment, adapting different profit functions of the MIP model, in both heuristics, to many instances with different sizes and characteristics. The numerical analysis shows not only a significant savings compare to truck-only delivery but also a superior performance against the previous work.", "creator": "LaTeX with hyperref package"}}}