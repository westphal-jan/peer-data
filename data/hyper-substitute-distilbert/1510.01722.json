{"id": "1510.01722", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Oct-2015", "title": "Structured Transforms for Small-Footprint Deep Learning", "abstract": "we consider the inherent problem examining compact deep learning pipelines suitable between deployment rapid storage of power supplies mobile devices. others propose new unified plan to modeling a pathway progression using 2d parameter matrices significantly help progressively approaching the notion of low displacement rank. discrete transformation tables admit zero function depth gradient evaluation, and span a specific range spanning parameter sharing values implying computational assembly capacity can re explicitly placed along a continuum as structured to unstructured. experimental results show yes these calculations can significantly accelerate inference and forward / backward coupling during playback, greatly offer superior accuracy - compactness - speed tradeoffs in comparison with a number single existing applications. in keyword spotting applications representing mobile collision recognition, our methods are much more effective when standard linear low - angle bottleneck layers and nearly retain the performance of specification about the art functionality, while providing more than 3. 05 - fold strength.", "histories": [["v1", "Tue, 6 Oct 2015 19:42:22 GMT  (75kb,D)", "http://arxiv.org/abs/1510.01722v1", "To appear in NIPS 2015; 9 pages"]], "COMMENTS": "To appear in NIPS 2015; 9 pages", "reviews": [], "SUBJECTS": "stat.ML cs.CV cs.LG", "authors": ["vikas sindhwani", "tara n sainath", "sanjiv kumar"], "accepted": true, "id": "1510.01722"}, "pdf": {"name": "1510.01722.pdf", "metadata": {"source": "CRF", "title": "Structured Transforms for Small-Footprint Deep Learning", "authors": ["Vikas Sindhwani", "Tara N. Sainath", "Sanjiv Kumar"], "emails": ["sanjivk}@google.com"], "sections": [{"heading": "1 Introduction", "text": "Non-linear vector-valued transforms of the form, f(x,M) = s(Mx), where s is an elementwise nonlinearity, x is an input vector, and M is an m \u00d7 n matrix of parameters are building blocks of complex deep learning pipelines and non-parametric function estimators arising in randomized kernel methods [20]. When M is a large general dense matrix, the cost of storing mn parameters and computing matrix-vector products inO(mn) time can make it prohibitive to deploy such models on lightweight mobile devices and wearables where battery life is precious and storage is limited. This is particularly relevant for \u201calways-on\u201d mobile applications, such as continuously looking for specific keywords spoken by the user or processing a live video stream onboard a mobile robot. In such settings, the models may need to be hosted on specialized low-power digital signal processing components which are even more resource constrained than the device CPU.\nA parsimonious structure typically imposed on parameter matrices is that of low-rankness [22]. If M is a rank r matrix, with r min(m,n), then it has a (non-unique) product representation of the form M = GHT where G,H have only r columns. Clearly, this representation reduces the storage requirements to (mr + nr) parameters, and accelerates the matrix-vector multiplication time to O(mr+nr) via Mx = G(HTx). Another popular structure is that of sparsity [6] typically imposed during optimization via zero-inducing l0 or l1 regularizers. Other techniques include freezing M to be a random matrix as motivated via approximations to kernel functions [20], storing M in low fixed-precision formats [7, 24], using specific parameter sharing mechanisms [3], or training smaller models on outputs of larger models (\u201cdistillation\u201d) [11].\nStructured Matrices: An m \u00d7 n matrix which can be described in much fewer than mn parameters is referred to as a structured matrix. Typically, the structure should not only reduce memory\nar X\niv :1\n51 0.\n01 72\n2v 1\n[ st\nat .M\nL ]\n6 O\nrequirements, but also dramatically accelerate inference and training via fast matrix-vector products and gradient computations. Below are classes of structured matrices arising pervasively in many contexts [18] with different types of parameter sharing (indicated by the color).\n(i) Toeplitz t0 t\u22121 . . . t\u2212(n\u22121) t1 t0 . . . ...\n... ... ... t\u22121 tn\u22121 . . . t1 t0\n (ii) Vandermonde 1 v0 . . . v n\u22121 0 1 v1 . . . v n\u22121 1 ... ... ... ...\n1 vn\u22121 . . . v n\u22121 n\u22121\n\n(iii) Cauchy 1 u0\u2212v0 . . . . . . 1u0\u2212vn\u22121 1 u1\u2212v0 . . . . . . ... ... ... ... ...\n1 un\u22121\u2212v0 . . . . . . 1un\u22121\u2212vn\u22121  Toeplitz matrices have constant values along each of their diagonals. When the same property holds for anti-diagonals, the resulting class of matrices are called Hankel matrices. Toeplitz and Hankel matrices are intimately related to one-dimensional discrete convolutions [10], and arise naturally in time series analysis and dynamical systems. A Vandermonde matrix is determined by taking elementwise powers of its second column. A very important special case is the complex matrix associated with the Discrete Fourier transform (DFT) which has Vandermonde structure with vj = \u03c9jn, j = 1 . . . n where \u03c9n = exp \u22122\u03c0i n is the primitive n\nth root of unity. Similarly, the entries of n\u00d7 n Cauchy matrices are completely defined by two length n vectors. Vandermonde and Cauchy matrices arise naturally in polynomial and rational interpolation problems.\n\u201cSuperfast\u201d Numerical Linear Algebra: The structure in these matrices can be exploited for faster linear algebraic operations such as matrix-vector multiplication, inversion and factorization. In particular, the matrix-vector product can be computed in time O(n log n) for Toeplitz and Hankel matrices, and in time O(n log2 n) for Vandermonde and Cauchy matrices.\nDisplacement Operators: At first glance, these matrices appear to have very different kinds of parameter sharing and consequently very different algorithms to support fast linear algebra. It turns out, however, that each structured matrix class described above, can be associated with a specific displacement operator, L : Rm\u00d7n 7\u2192 Rm\u00d7n which transforms each matrix, say M, in that class into an m\u00d7 n matrix L[M] that has very low-rank, i.e. rank(L[M]) min(m,n). This displacement rank approach, which can be traced back to a seminal 1979 paper [13], greatly unifies algorithm design and complexity analysis for structured matrices [13], [18], [14].\nGeneralizations of Structured Matrices: Consider deriving a matrix by taking arbitrary linear combinations of products of structured matrices and their inverses, e.g. \u03b11T1T\u221212 + \u03b12T3T \u22121 4 T5 where each Ti is a Toeplitz matrix. The parameter sharing structure in such a derived matrix is by no means apparent anymore. Yet, it turns out that the associated displacement operator remarkably continues to expose the underlying parsimony structure, i.e. such derived matrices are still mapped to relatively low-rank matrices! The displacement rank approach allows fast linear algebra algorithms to be seamlessly extended to these broader classes of matrices. The displacement rank parameter controls the degree of structure in these generalized matrices.\nTechnical Preview, Contributions and Outline: We propose building deep learning pipelines where parameter matrices belong to the class of generalized structured matrices characterized by low displacement rank. In Section 2, we attempt to give a self-contained overview of the displacement rank approach [13], [18] drawing key results from the relevant literature on structured matrix computations (proved in our supplementary material [1] for completeness). In Section 3, we show that the proposed structured transforms for deep learning admit fast matrix multiplication and gradient computations, and have rich statistical modeling capacity that can be explicitly controlled by the displacement rank hyperparameter, covering, along a continuum, an entire spectrum of configurations from highly structured to unstructured matrices. While our focus in this paper is on Toeplitz-related transforms, our proposal extends to other structured matrix generalizations. In Section 4, we study inference and training-time acceleration with structured transforms as a function of displacement rank and dimensionality. We find that our approach compares highly favorably with numerous other techniques for learning size-constrained models on several benchmark datasets. Finally, we demonstrate our approach on mobile speech recognition applications where we are able to match the performance of much bigger state of the art models with a fraction of parameters.\nNotation: Let e1 . . . en denote the canonical basis elements of Rn (viewed as column vectors). In,0n denote n \u00d7 n identity and zero matrices respectively. Jn = [en . . . e1] is the anti-identity reflection matrix whose action on a vector is to reverse its entries. When the dimension is obvious\nwe may drop the subscript; for rectangular matrices, we may specify both the dimensions explicitly, e.g. we use 01\u00d7n for a zero-valued row-vector, and 1n for all ones column vector of length n. u \u25e6 v denotes Hadamard (elementwise) product between two vectors v,u. For a complex vector u, u\u0304 will denote the vector of complex conjugate of its entries. The Discrete Fourier Transform (DFT) matrix will be denoted by \u2126 (or \u2126n); we will also use fft(x) to denote \u2126x, and ifft(x) to denote \u2126\u22121x. For a vector v, diag(v) denotes a diagonal matrix given by diag(v)ii = vi."}, {"heading": "2 Displacement Operators associated with Structured Matrices", "text": "We begin by providing a brisk background on the displacement rank approach. Unless otherwise specified, for notational convenience we will henceforth assume squared transforms, i.e., m = n, and discuss rectangular transforms later. Proofs of various assertions can be found in our selfcontained supplementary material [1] or in [18, 19].\nThe Sylvester displacement operator, denoted as L = \u2207A,B : Rn\u00d7n 7\u2192 Rn\u00d7n is defined by, \u2207A,B[M] = AM\u2212MB (1) where A \u2208 Rn\u00d7n,B \u2208 Rn\u00d7n are fixed matrices referred to as operator matrices. Closely related is the Stein displacement operator, denoted as L = 4A,B : Rn\u00d7n 7\u2192 Rn\u00d7n, and defined by,\n4A,B[M] = M\u2212AMB (2)\nBy carefully choosing A and B one can instantiate Sylvester and Stein displacement operators with desirable properties. In particular, for several important classes of displacement operators, A and/or B are chosen to be an f -unit-circulant matrix defined as follows. Definition 2.1 (f -unit-Circulant Matrix). For a real-valued scalar f , the (n\u00d7n) f-circulant matrix, denoted by Zf , is defined as follows,\nZf = [e2, e3 . . . en, fe1] =  0 0 . . . f 1 0 . . . 0 ... ... ...\n... 0 . . . 1 0\n = [ 01\u00d7(n\u22121) fIn\u22121 0(n\u22121)\u00d71 ]\nThe f -unit-circulant matrix is associated with a basic downward shift-and-scale transformation, i.e., the matrix-vector product Zfv shifts the elements of the column vector v \u201cdownwards\u201d, and scales and brings the last element vn to the \u201ctop\u201d, resulting in [fvn, v1, . . . vn\u22121]T . It has several basic algebraic properties (see Proposition 1.1 [1]) that are crucial for the results stated in this section\nFigure 1 lists the rank of the Sylvester displacement operator in Eqn 1 when applied to matrices belonging to various structured matrix classes, where the operator matrices A,B in Eqn. 1 are chosen to be diagonal and/or f -unit-circulant. It can be seen that despite the difference in their structures, all these classes are characterized by very low displacement rank. Figure 2 shows how this low-rank transformation happens in the case of a 4 \u00d7 4 Toeplitz matrix (also see section 1, Lemma 1.2 [1]). Embedded in the 4\u00d7 4 Toeplitz matrix T are two copies of a 3\u00d7 3 Toeplitz matrix shown in black and red boxes. The shift and scale action of Z1 and Z\u22121 aligns these sub-matrices. By taking the difference, the Sylvester displacement operator nullifies the aligned submatrix leaving a rank 2 matrix with non-zero elements only along its first row and last column. Note that the negative sign introduced by TZ\u22121 term prevents the complete zeroing out of the value of t (marked by red star) and is hence critical for invertibility of the displacement action.\nFigure 1: Below r is rank(\u2207A,B[M])\nStructured Matrix M A B r Toeplitz T, T\u22121 Z1 Z\u22121 \u2264 2 Hankel H, H\u22121 Z1 Z T 0 \u2264 2\nT + H Z0 + Z T 0 Z0 + Z T 0 \u2264 4 Vandermonde V (v) diag(v) Z0 \u2264 1 V (v)\u22121 Z0 diag(v) \u2264 1 V (v)T ZT0 diag(v) \u2264 1\nCauchy C(s, t) diag(s) diag(t) \u2264 1 C(s, t)\u22121 diag(t) diag(s) \u2264 1\nEach class of structured matrices listed in Figure 1 can be naturally generalized by allowing the rank of the displacement operator to be higher. Specifically, given a displacement operator L, and displacement rank parameter r, one may consider the class of matrices M that satisfies rank(L(M)) \u2264 r. Clearly then, L[M] = GHT for rank r matrices G,H. We refer to rank(L(M)) as the displacement rank of M under L, and to the low-rank factors G,H \u2208 Rn\u00d7r as the associated low-displacement generators. For the operators listed in Table 1, these broader classes of structured matrices are correspondingly called Toeplitz-like, Vandermonde-like and Cauchy-like. Fast numerical linear algebra algorithms extend to such matrices [18].\nIn order to express structured matrices with low-displacement rank directly as a function of its lowdisplacement generators, we need to invert L and obtain a learnable parameterization. For Stein type displacement operator, the following elegant result is known (see proof in [1]): Theorem 2.2 ( [19], Krylov Decomposition). If an n\u00d7n matrix M is such that4A,B[M] = GHT where G = [g1 . . .gr],H = [h1 . . .hr] \u2208 Rn\u00d7r and the operator matrices satisfy: An = aI, Bn = bI for some scalars a, b, then M can be expressed as:\nM = 1\n1\u2212 ab r\u2211 j=1 krylov(A,gj)krylov(BT ,hj)T (3)\nwhere krylov(A,v) is defined by:\nkrylov(A,v) = [v Av A2v . . .An\u22121v] (4)\nHenceforth, our focus in this paper will be on Toeplitz-like matrices for which the displacement operator of interest (see Table 1) is of Sylvester type: \u2207Z1,Z\u22121 . In order to apply Theorem 2.2, one can switch between Sylvester and Stein operators, setting A = Z1 and B = Z\u22121 which both satisfy the conditions of Theorem 2.2 (see property 3, Proposition 1.1 [1]). The resulting expressions involve Krylov matrices generated by f -unit-circulant matrices which are called f -circulant matrices in the literature. Definition 2.3 (f -circulant matrix). Given a vector v, the f-Circulant matrix, Zf (v), is defined as follows:\nZf (v) = krylov(Zf ,v) =  v0 fvn\u22121 . . . fv1 v1 v0 . . . fv2 ... ... ... fvn\u22121\nvn\u22121 . . . v1 v0  Two special cases are of interest: f = 1 corresponds to Circulant matrices, and f = \u22121 corresponds to skew-Circulant matrices.\nFinally, one can obtain an explicit parameterization for Toeplitz-like matrices which turns out to involve taking sums of products of Circulant and skew-Circulant matrices. Theorem 2.4 ([18]). If an n \u00d7 n matrix M satisfies \u2207Z1,Z\u22121 [M] = GHT where G = [g1 . . .gr],H = [h1 . . .hr] \u2208 Rn\u00d7r, then M can be written as:\nM = 1\n2 r\u2211 j=1 Z1(gj)Z\u22121(Jhj) (5)"}, {"heading": "3 Learning Toeplitz-like Structured Transforms", "text": "Motivated by Theorem 2.4, we propose learning parameter matrices of the form in Eqn. 5 by optimizing the displacement factors G,H. First, from the properties of displacement operators [18], it follows that this class of matrices is very rich from a statistical modeling perspective. Theorem 3.1 (Richness). The set of all n\u00d7 n matrices that can be written as,\nM(G,H) = r\u2211 i=1 Z1(gi)Z\u22121(hi) (6)\nfor some G = [g1 . . .gr],H = [h1 . . .hr] \u2208 Rn\u00d7r contains:\n\u2022 All n\u00d7 n Circulant and Skew-Circulant matrices for r \u2265 1. \u2022 All n\u00d7 n Toeplitz matrices for r \u2265 2. \u2022 Inverses of Toeplitz matrices for r \u2265 2. \u2022 All products of the form A1 . . .At for r \u2265 2t. \u2022 All linear combinations of the form \u2211p i=1 \u03b2iA (i) 1 . . .A (i) t where r \u2265 2tp.\n\u2022 All n\u00d7 n matrices for r = n. where each Ai above is a Toeplitz matrix or the inverse of a Toeplitz matrix.\nWhen we learn a parameter matrix structured as Eqn. 6 with displacement rank equal to 1 or 2, we also search over convolutional transforms. In this sense, structured transforms with higher displacement rank generalize (one-dimensional) convolutional layers. The displacement rank provides a knob on modeling capacity: low displacement matrices are highly structured and compact, while high displacement matrices start to contain increasingly unstructured dense matrices.\nNext, we show that associated structured transforms of the form f(x) = M(G,H)x admit fast evaluation, and gradient computations with respect to G,H. First we recall the following wellknown result concerning the diagonalization of f -Circulant matrices. Theorem 3.2 (Diagonalization of f -circulant matrices, Theorem 2.6.4 [18]). For any f 6= 0, let f = [1, f 1 n , f 2 n , . . . f n\u22121 n ]T \u2208 Cn, and Df = diag(f). Then,\nZf (v) = D \u22121 f \u2126 \u22121 diag(\u2126(f \u25e6 v))\u2126Df (7)\nThis result implies that for the special cases of f = 1 and f = \u22121 corresponding to Circulant and Skew-circulant matrices respectively, the matrix-vector multiplication can be computed in O(n log n) time via the Fast Fourier transform:\ny = Z1(v)x = ifft (fft(v) \u25e6 fft(x)) (8)\ny = Z1(v) Tx = ifft ( fft(v) \u25e6 fft(x) ) (9)\ny = Z\u22121(v)x = \u03b7\u0304 \u25e6 ifft (fft(\u03b7 \u25e6 v) \u25e6 fft(\u03b7 \u25e6 x)) (10) y = Z\u22121(v) Tx = \u03b7\u0304 \u25e6 ifft (fft(\u03b7 \u25e6 v) \u25e6 fft(\u03b7 \u25e6 x)) (11)\nwhere \u03b7 = [1, \u03b7, \u03b72 . . . \u03b7n\u22121]T where \u03b7 = (\u22121) 1n = exp(i\u03c0n ), the root of negative unity. In particular, a single matrix-vector product for Circulant and Skew-circulant matrices has the computational cost of 3 FFTs. Therefore, for matrices of the form in Eqn. 6 comprising of r products of Circulant and Skew-Circulant matrices, naively computing a matrix-vector product for a batch of b input vectors would take 6rb FFTs. However, this cost can be significantly lowered to that of 2(rb+ r + b) FFTs by making the following observation:\nY = r\u2211 i=1 Z1(gi)Z\u22121(hi)X = \u2126 \u22121 ( r\u2211 i=1 diag(\u2126gi) \u2126 diag(\u03b7\u0304) \u2126 \u22121 diag(\u2126(\u03b7 \u25e6 hi))X\u0303 ) where X\u0303 = \u2126 diag(\u03b7) X. Here, (1) The FFT of the parameters, \u2126gi and \u2126(\u03b7 \u25e6 hi) is computed once and shared across multiple input vectors in the minibatch, (2) The (scaled) FFT of the input, (\u2126 diag(\u03b7) X) is computed once and shared across the sum in Eqn. 6, and (3) The final inverse FFT is also shared. Thus, the following result is immediate. Theorem 3.3 (Fast Multiplication). Given an n \u00d7 b matrix X, the matrix-matrix product, Y = ( \u2211r i=1 Z1(gi)Z\u22121(hi)) X, can be computed at the cost of 2(rb+ b+ r) FFTs, using the following algorithm.\nSet \u03b7 = [1, \u03b7, \u03b72 . . . \u03b7n\u22121]T where \u03b7 = (\u22121) 1n = exp(i\u03c0n ) Initialize Y = 0n\u00d7b Set X\u0303 = fft(diag(\u03b7)X) Set G\u0303 = fft(G) = [g\u03031 . . . g\u0303r] and H\u0303 = fft(diag(\u03b7)H) = [h\u03031 . . . h\u0303r] for i = 1 to r \u25e6 U = Z\u22121(hi)X = diag(\u03b7\u0304)ifft ( diag(h\u0303i)X\u0303\n) \u25e6 V = diag(g\u0303i) fft(U)\n\u25e6 Y = Y + V Set Y = ifft (Y) Return Y\nWe now show that when our structured transforms are embedded in a deep learning pipeline, the gradient computation can also be accelerated. First, we note that the Jacobian structure of f -Circulant matrices has the following pleasing form.\nProposition 3.4 (Jacobian of f -circulant transforms). The Jacobian of the map f(x,v) = Zf (v)x with respect to the parameters v is Zf (x).\nThis leads to the following expressions for the Jacobians of the structured transforms of interest.\nProposition 3.5 (Jacobians with respect to displacement generators G,H). Consider parameterized vector-valued transforms of the form,\nf(x,G,H) = r\u2211 i=1 Z1(gi)Z\u22121(hi)x (12)\nThe Jacobians of f with respect to the jth column of G,H, i.e. gj ,hj , at x, are as follows:\nJgjf |x = Z1 (Z\u22121(hj)x) (13) Jhjf |x = Z1(gj)Z\u22121(x) (14)\nBased on Eqns. 13, 14 the gradient over a minibatch of size b requires computing, \u2211b i [Jgjf |xi ]T \u03b4i\nand \u2211b i=1[Jhjf |xi ]T \u03b4i where, {xi}bi=1 and {\u03b4i}bi=1 are batches of forward and backward inputs during backpropagation. These can be naively computed with 6rb FFTs. However, as before, by sharing FFT of the forward and backward inputs, and the fft of the parameters, this can be lowered to (4br + 4r + 2b) FFTs. Below we give matricized implementation.\nProposition 3.6 (Fast Gradients). Let X,Z be n \u00d7 b matrices whose columns are forward and backward inputs respectively of minibatch size b during backpropagation. The gradient with respect to gj ,hj can be computed at the cost of (4br + 4r + 2b) FFTs as follows:\nCompute Z\u0303 = fft(Z), X\u0303 = fft(diag(\u03b7)X), G\u0303 = fft(G), H\u0303 = fft(diag(\u03b7)H) Gradient wrt gj (2b+ 1 FFTs) \u25e6 return ifft [( fft ( diag(\u03b7\u0304)ifft ( diag(h\u0303j)X\u0303 )) \u25e6 Z\u0303 ) 1b ] Gradient wrt hj (2b+ 1 FFTs)\n\u25e6 return diag (\u03b7\u0304) ifft [( X\u0303 \u25e6 fft ( diag(\u03b7)ifft ( diag(g\u0303i)Z\u0303 ))) 1b ] Rectangular Transforms: Variants of Theorems 2.2, 2.4 exist for rectangular transforms, see [19]. Alternatively, for m < n we can subsample the outputs of square n \u00d7 n transforms at the cost of extra computations, while for m > n, assuming m is a multiple of n, we can stack mn output vectors of square n\u00d7 n transforms."}, {"heading": "4 Empirical Studies", "text": "Acceleration with Structured Transforms: In Figure 3, we analyze the speedup obtained in practice using n \u00d7 n Circulant and Toeplitz-like matrices relative to a dense unstructured n \u00d7 n matrix (fully connected layer) as a function of displacement rank and dimension n. Three scenarios are considered: inference speed per test instance, training speed as implicitly dictated by forward passes on a minibatch, and gradient computations on a minibatch. Factors such as differences in cache optimization, SIMD vectorization and multithreading between Level-2 BLAS (matrix-vector multiplication), Level-3 BLAS (matrix-matrix multiplication) and FFT implementations (we use FFTW: http://www.fftw.org) influence the speedup observed in practice. Speedup gains start to show for dimensions as small as 512 for Circulant matrices. The gains become dramatic with acceleration of the order of 10 to 100 times for several thousand dimensions, even for higher displacement rank Toeplitz-like transforms.\nEffectiveness for learning compact Neural Networks: Next, we compare the proposed structured transforms with several existing techniques for learning compact feedforward neural networks. We exactly replicate the experimental setting from the recent paper on HASHEDNETS [3] which uses several image classification datasets first prepared by [15]. MNIST is the original 10-class MNIST digit classification dataset with 60000 training examples and 10000 test examples. BG-IMG-ROT refers to a challenging version of MNIST where digits are randomly rotated and placed against a random black and white background. RECT (1200 training images, 50000 test images) and CONVEX (8000 training images, 50000 test images) are 2-class binary image datasets where the task is to distinguish between tall and wide rectangles, and whether the \u201con\u201d pixels form a convex region or not, respectively. In all datasets, input images are of size 28 \u00d7 28. Several existing techniques are benchmarked in [3] for compressing a reference single hidden layer model with 1000 hidden nodes.\n\u2022 Random Edge Removal (RER) [5] where a fraction of weights are randomly frozen to be zero-valued. \u2022 Low-rank Decomposition (LRD) [9] \u2022 Neural Network (NN) where the hidden layer size is reduced to satisfy a parameter budget. \u2022 Dark Knowledge (DK) [11]: A small neural network is trained with respect to both the original\nlabeled data, as well as soft targets generated by a full uncompressed neural network. \u2022 HashedNets (HN) [3]: This approach uses a low-cost hash function to randomly group connection\nweights which share the same value. \u2022 HashedNets with Dark Knowledge (HNDK ): Trains a HashedNet with respect to both the original\nlabeled data, as well as soft targets generated by a full uncompressed neural network.\nWe consider learning models of comparable size with the weights in the hidden layer structured as a Toeplitz-like matrix. We also compare with the FASTFOOD approach of [25, 16] where the weight matrix is a product of diagonal parameter matrices and fixed permutation and Walsh-Hadamard matrices, also admittingO(n log n) multiplication and gradient computation time. The CIRCULANT Neural Network approach proposed in [4] is a special case of our framework (Theorem 3.1).\nResults in Table 1 show that Toeplitz-like structured transforms outperform all competing approaches on all datasets, sometimes by a very significant margin, with similar or drastically lesser number of parameters. It should also be noted that while random weight tying in HASHEDNETS reduces the number of parameters, the lack of structure in the resulting weight matrix cannot be exploited for FFT-like O(n log n) multiplication time. We note in passing that for HASHEDNETS weight matrices whose entries assume only one of B distinct values, the Mailman algorithm [17] can be used for faster matrix-vector multiplication, with complexity O(n2 log(B)/(log n)), which still is much slower than matrix-vector multiplication time for Toeplitz-like matrices. Also note that the distillation ideas of [11] are complementary to our approach and can further improve our results.\nMobile Speech Recognition: We now demonstrate the techniques developed in this paper on a speech recognition application meant for mobile deployment. Specifically, we consider a keyword spotting (KWS) task, where a deep neural network is trained to detect a specific phrase, such as \u201cOk Google\u201d [2]. The data used for these experiments consists of 10\u221215K utterances of selected phrases (such as \u201cplay-music\u201d, \u201cdecline-call\u201d), and a larger set of 396K utterances to serve as negative training examples. The utterances were randomly split into training, development and evaluation sets in the ratio of 80 : 5 : 15. We created a noisy evaluation set by artificially adding babble-type cafeteria noise at 0dB SNR to the \u201cplay-music\u201d clean data set. We will refer to this noisy data set as CAFE0. We refer the reader to [23] for more details about the datasets. We consider the task of shrinking a large model for this task whose architecture is as follows [23]: the input layer consists of 40 dimensional log-mel filterbanks, stacked with a temporal context of 32, to produce an input of 32 \u00d7 40 whose dimensions are in time and frequency respectively. This input is fed to a convolutional layer with filter size 32 \u00d7 8, frequency stride 4 and 186 filters. The output of the convolutional layer is of size 9\u00d7 186 = 1674. The output of this layer is fed to a 1674\u00d7 1674 fully connected layer, followed by a softmax layer for predicting 4 classes constituting the phrase \u201cplaymusic\u201d. The full training set contains about 90 million samples. We use asynchronous distributed stochastic gradient descent (SGD) in a parameter server framework [8], with 25 worker nodes for optimizing various models. The global learning rate is set to 0.002, while our structured transform layers use a layer-specific learning rate of 0.0005; both are decayed by an exponential factor of 0.1.\nResults with 11 different models are reported in Figure 4 (left) including the state of the art keyword spotting model developed in [23]. At an operating point of 1 False Alarm per hour, the following observations can be made: With just 3348 parameters, a displacement rank=1 TOEPLITZ-LIKE structured transform outperforms a standard low-rank bottleneck model with rank=16 containing 16 times more parameters; it also lowers false reject rates from 10.2% with CIRCULANT and 14.2% with FASTFOOD transforms to about 8.2%. With displacement rank 10, the false reject rate is 6.2%, in comparison to 6.8% with the 3 times larger rank=32 standard low-rank bottleneck model. Our best Toeplitz-like model comes within 0.4% of the performance of the 80-times larger fully-connected and 3.6 times larger reference [23] models. In terms of raw classification accuracy as a function of training time, Figure 4 (right) shows that our models (with displacement ranks 1, 2 and 10) come within 0.2% accuracy of the fully-connected and reference models, and easily provide much better accuracy-time tradeoffs in comparison to standard low-rank bottleneck models, Circulant and Fastfood baselines. The conclusions are similar for other noise conditions (see supplementary material [1])."}, {"heading": "5 Perspective", "text": "We have introduced and shown the effectiveness of new notions of parsimony rooted in the theory of structured matrices. Our proposal can be extended to various other structured matrix classes, including Block and multi-level Toeplitz-like [12] matrices related to multidimensional convolution [21]. We hope that such ideas might lead to new generalizations of Convolutional Neural Networks.\nAcknowledgements: We thank Krzysztof Choromanski, Carolina Parada, Rohit Prabhavalkar, Rajat Monga, Baris Sumengen, Kilian Weinberger and Wenlin Chen for their contributions to this work."}], "references": [{"title": "Small-footprint keyword spotting using deep neural networks", "author": ["G. Chen", "C. Parada", "G. Heigold"], "venue": "In ICASSP,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2014}, {"title": "Compressing neural networks with the hashing trick", "author": ["W. Chen", "J.T. Wilson", "S. Tyree", "K.Q. Weinberger", "Y. Chen"], "venue": "In ICML,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Fast neural networks with circulant projections", "author": ["Y. Cheng", "F.X. Xu", "R.S. Feris", "S. Kumar", "A. Choudhary", "S.-F. Chang"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "High-performance neural networks for visual object classification", "author": ["D.C. Ciresan", "U. Meier", "J. Masci", "L.M. Gambardella", "Schmidhuber"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2011}, {"title": "Memory-bounded deep convolutional neural networks", "author": ["M.D. Collins", "P. Kohli"], "venue": "In ICASSP,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2013}, {"title": "Low-precision storage for deep learning", "author": ["M. Courbariaux", "J.-P. David", "Y. Bengio"], "venue": "In ICLR,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "Large-scale distributed deep networks", "author": ["J. Dean", "G.S. Corrado", "R. Monga", "K. Chen", "M. Devin", "Q.V. Le", "M.Z. Mao", "M. Ranzato", "A. Senior", "P. Tucker", "K. Yang", "A.Y. Ng"], "venue": "In NIPS,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2012}, {"title": "Predicting parameters in deep learning", "author": ["M. Denil", "B. Shakibi", "L. Dinh", "N. de Freitas"], "venue": "In NIPS,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2013}, {"title": "Toeplitz and circulant matrices: A review", "author": ["R.M. Gray"], "venue": "Foundations and Trends in Communications and Information Theory,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2005}, {"title": "Distilling the knowledge in a neural network", "author": ["G. Hinton", "O. Vinyals", "J. Dean"], "venue": "In NIPS workshop,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Generalized displacement structure for block toeplitz, toeplitz block and toeplitz-derived matrices", "author": ["T. Kailath", "J. Chun"], "venue": "SIAM J. Matrix Anal. Appl.,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1994}, {"title": "Displacement ranks of matrices and linear equations", "author": ["T. Kailath", "S.Y. Kung", "M. Morf"], "venue": "Journal of Mathematical Analysis and Applications,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1979}, {"title": "Displacement structure: Theory and applications", "author": ["T. Kailath", "A.H. Sayed"], "venue": "SIAM Review,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1995}, {"title": "An empirical evaluation of deep architectures on problems with many factors of variation", "author": ["H. Larochelle", "D. Erhan", "A.C. Courville", "J. Bergstra", "Y. Bengio"], "venue": "In ICML,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2007}, {"title": "Fastfood \u2013 approximating kernel expansions in loglinear time", "author": ["Q. Le", "T. Sarlos", "A. Smola"], "venue": "In ICML,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2013}, {"title": "The mailman algorithm: a note on matrix vector multiplication", "author": ["E. Liberty", "S.W. Zucker"], "venue": "In Information Processing Letters,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2009}, {"title": "Structured Matrices and Polynomials", "author": ["V. Pan"], "venue": "Unified Superfast Algorithms. Springer,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2001}, {"title": "Inversion of displacement operators", "author": ["V. Pan"], "venue": "SIAM Journal of Matrix Analysis and Applications,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2003}, {"title": "Random features for large-scale kernel machines", "author": ["A. Rahimi", "B. Recht"], "venue": "In NIPS,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2007}, {"title": "Fast multidimensional convolution in low-rank tensor formats via cross approximation", "author": ["M.V. Rakhuba", "I.V. Oseledets"], "venue": "SIAM J. Sci. Comput.,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}, {"title": "Low-rank matrix factorization for deep neural network training with high-dimensional output targets", "author": ["T. Sainath", "B. Kingsbury", "V. Sindhwani", "E. Arisoy", "B. Ramabhadran"], "venue": "In ICASSP,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2013}, {"title": "Convolutional neural networks for small-footprint keyword spotting", "author": ["T. Sainath", "C. Parada"], "venue": "In Proc. Interspeech,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2015}, {"title": "Improving the speed of neural networks on cpus", "author": ["V. Vanhoucke", "A. Senior", "M.Z. Mao"], "venue": "In NIPS Workshop on Deep Learning and Unsupervised Feature Learning,", "citeRegEx": "24", "shortCiteRegEx": "24", "year": 2011}, {"title": "Deep fried convnets", "author": ["Z. Yang", "M. Moczulski", "M. Denil", "N. de Freitas", "A. Smola", "L. Song", "Z. Wang"], "venue": "In arXiv:1412.7149,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2015}], "referenceMentions": [{"referenceID": 18, "context": "Non-linear vector-valued transforms of the form, f(x,M) = s(Mx), where s is an elementwise nonlinearity, x is an input vector, and M is an m \u00d7 n matrix of parameters are building blocks of complex deep learning pipelines and non-parametric function estimators arising in randomized kernel methods [20].", "startOffset": 297, "endOffset": 301}, {"referenceID": 20, "context": "A parsimonious structure typically imposed on parameter matrices is that of low-rankness [22].", "startOffset": 89, "endOffset": 93}, {"referenceID": 4, "context": "Another popular structure is that of sparsity [6] typically imposed during optimization via zero-inducing l0 or l1 regularizers.", "startOffset": 46, "endOffset": 49}, {"referenceID": 18, "context": "Other techniques include freezing M to be a random matrix as motivated via approximations to kernel functions [20], storing M in low fixed-precision formats [7, 24], using specific parameter sharing mechanisms [3], or training smaller models on outputs of larger models (\u201cdistillation\u201d) [11].", "startOffset": 110, "endOffset": 114}, {"referenceID": 5, "context": "Other techniques include freezing M to be a random matrix as motivated via approximations to kernel functions [20], storing M in low fixed-precision formats [7, 24], using specific parameter sharing mechanisms [3], or training smaller models on outputs of larger models (\u201cdistillation\u201d) [11].", "startOffset": 157, "endOffset": 164}, {"referenceID": 22, "context": "Other techniques include freezing M to be a random matrix as motivated via approximations to kernel functions [20], storing M in low fixed-precision formats [7, 24], using specific parameter sharing mechanisms [3], or training smaller models on outputs of larger models (\u201cdistillation\u201d) [11].", "startOffset": 157, "endOffset": 164}, {"referenceID": 1, "context": "Other techniques include freezing M to be a random matrix as motivated via approximations to kernel functions [20], storing M in low fixed-precision formats [7, 24], using specific parameter sharing mechanisms [3], or training smaller models on outputs of larger models (\u201cdistillation\u201d) [11].", "startOffset": 210, "endOffset": 213}, {"referenceID": 9, "context": "Other techniques include freezing M to be a random matrix as motivated via approximations to kernel functions [20], storing M in low fixed-precision formats [7, 24], using specific parameter sharing mechanisms [3], or training smaller models on outputs of larger models (\u201cdistillation\u201d) [11].", "startOffset": 287, "endOffset": 291}, {"referenceID": 16, "context": "Below are classes of structured matrices arising pervasively in many contexts [18] with different types of parameter sharing (indicated by the color).", "startOffset": 78, "endOffset": 82}, {"referenceID": 8, "context": "Toeplitz and Hankel matrices are intimately related to one-dimensional discrete convolutions [10], and arise naturally in time series analysis and dynamical systems.", "startOffset": 93, "endOffset": 97}, {"referenceID": 11, "context": "This displacement rank approach, which can be traced back to a seminal 1979 paper [13], greatly unifies algorithm design and complexity analysis for structured matrices [13], [18], [14].", "startOffset": 82, "endOffset": 86}, {"referenceID": 11, "context": "This displacement rank approach, which can be traced back to a seminal 1979 paper [13], greatly unifies algorithm design and complexity analysis for structured matrices [13], [18], [14].", "startOffset": 169, "endOffset": 173}, {"referenceID": 16, "context": "This displacement rank approach, which can be traced back to a seminal 1979 paper [13], greatly unifies algorithm design and complexity analysis for structured matrices [13], [18], [14].", "startOffset": 175, "endOffset": 179}, {"referenceID": 12, "context": "This displacement rank approach, which can be traced back to a seminal 1979 paper [13], greatly unifies algorithm design and complexity analysis for structured matrices [13], [18], [14].", "startOffset": 181, "endOffset": 185}, {"referenceID": 11, "context": "In Section 2, we attempt to give a self-contained overview of the displacement rank approach [13], [18] drawing key results from the relevant literature on structured matrix computations (proved in our supplementary material [1] for completeness).", "startOffset": 93, "endOffset": 97}, {"referenceID": 16, "context": "In Section 2, we attempt to give a self-contained overview of the displacement rank approach [13], [18] drawing key results from the relevant literature on structured matrix computations (proved in our supplementary material [1] for completeness).", "startOffset": 99, "endOffset": 103}, {"referenceID": 16, "context": "Proofs of various assertions can be found in our selfcontained supplementary material [1] or in [18, 19].", "startOffset": 96, "endOffset": 104}, {"referenceID": 17, "context": "Proofs of various assertions can be found in our selfcontained supplementary material [1] or in [18, 19].", "startOffset": 96, "endOffset": 104}, {"referenceID": 16, "context": "Fast numerical linear algebra algorithms extend to such matrices [18].", "startOffset": 65, "endOffset": 69}, {"referenceID": 17, "context": "2 ( [19], Krylov Decomposition).", "startOffset": 4, "endOffset": 8}, {"referenceID": 16, "context": "4 ([18]).", "startOffset": 3, "endOffset": 7}, {"referenceID": 16, "context": "First, from the properties of displacement operators [18], it follows that this class of matrices is very rich from a statistical modeling perspective.", "startOffset": 53, "endOffset": 57}, {"referenceID": 16, "context": "4 [18]).", "startOffset": 2, "endOffset": 6}, {"referenceID": 17, "context": "4 exist for rectangular transforms, see [19].", "startOffset": 40, "endOffset": 44}, {"referenceID": 1, "context": "We exactly replicate the experimental setting from the recent paper on HASHEDNETS [3] which uses several image classification datasets first prepared by [15].", "startOffset": 82, "endOffset": 85}, {"referenceID": 13, "context": "We exactly replicate the experimental setting from the recent paper on HASHEDNETS [3] which uses several image classification datasets first prepared by [15].", "startOffset": 153, "endOffset": 157}, {"referenceID": 1, "context": "Several existing techniques are benchmarked in [3] for compressing a reference single hidden layer model with 1000 hidden nodes.", "startOffset": 47, "endOffset": 50}, {"referenceID": 3, "context": "\u2022 Random Edge Removal (RER) [5] where a fraction of weights are randomly frozen to be zero-valued.", "startOffset": 28, "endOffset": 31}, {"referenceID": 7, "context": "\u2022 Low-rank Decomposition (LRD) [9] \u2022 Neural Network (NN) where the hidden layer size is reduced to satisfy a parameter budget.", "startOffset": 31, "endOffset": 34}, {"referenceID": 9, "context": "\u2022 Dark Knowledge (DK) [11]: A small neural network is trained with respect to both the original labeled data, as well as soft targets generated by a full uncompressed neural network.", "startOffset": 22, "endOffset": 26}, {"referenceID": 1, "context": "\u2022 HashedNets (HN) [3]: This approach uses a low-cost hash function to randomly group connection weights which share the same value.", "startOffset": 18, "endOffset": 21}, {"referenceID": 23, "context": "We also compare with the FASTFOOD approach of [25, 16] where the weight matrix is a product of diagonal parameter matrices and fixed permutation and Walsh-Hadamard matrices, also admittingO(n log n) multiplication and gradient computation time.", "startOffset": 46, "endOffset": 54}, {"referenceID": 14, "context": "We also compare with the FASTFOOD approach of [25, 16] where the weight matrix is a product of diagonal parameter matrices and fixed permutation and Walsh-Hadamard matrices, also admittingO(n log n) multiplication and gradient computation time.", "startOffset": 46, "endOffset": 54}, {"referenceID": 2, "context": "The CIRCULANT Neural Network approach proposed in [4] is a special case of our framework (Theorem 3.", "startOffset": 50, "endOffset": 53}, {"referenceID": 15, "context": "We note in passing that for HASHEDNETS weight matrices whose entries assume only one of B distinct values, the Mailman algorithm [17] can be used for faster matrix-vector multiplication, with complexity O(n log(B)/(log n)), which still is much slower than matrix-vector multiplication time for Toeplitz-like matrices.", "startOffset": 129, "endOffset": 133}, {"referenceID": 9, "context": "Also note that the distillation ideas of [11] are complementary to our approach and can further improve our results.", "startOffset": 41, "endOffset": 45}, {"referenceID": 0, "context": "Specifically, we consider a keyword spotting (KWS) task, where a deep neural network is trained to detect a specific phrase, such as \u201cOk Google\u201d [2].", "startOffset": 145, "endOffset": 148}, {"referenceID": 21, "context": "We refer the reader to [23] for more details about the datasets.", "startOffset": 23, "endOffset": 27}, {"referenceID": 21, "context": "We consider the task of shrinking a large model for this task whose architecture is as follows [23]: the input layer consists of 40 dimensional log-mel filterbanks, stacked with a temporal context of 32, to produce an input of 32 \u00d7 40 whose dimensions are in time and frequency respectively.", "startOffset": 95, "endOffset": 99}, {"referenceID": 6, "context": "We use asynchronous distributed stochastic gradient descent (SGD) in a parameter server framework [8], with 25 worker nodes for optimizing various models.", "startOffset": 98, "endOffset": 101}, {"referenceID": 21, "context": "Results with 11 different models are reported in Figure 4 (left) including the state of the art keyword spotting model developed in [23].", "startOffset": 132, "endOffset": 136}, {"referenceID": 21, "context": "6 times larger reference [23] models.", "startOffset": 25, "endOffset": 29}, {"referenceID": 10, "context": "Our proposal can be extended to various other structured matrix classes, including Block and multi-level Toeplitz-like [12] matrices related to multidimensional convolution [21].", "startOffset": 119, "endOffset": 123}, {"referenceID": 19, "context": "Our proposal can be extended to various other structured matrix classes, including Block and multi-level Toeplitz-like [12] matrices related to multidimensional convolution [21].", "startOffset": 173, "endOffset": 177}], "year": 2015, "abstractText": "We consider the task of building compact deep learning pipelines suitable for deployment on storage and power constrained mobile devices. We propose a unified framework to learn a broad family of structured parameter matrices that are characterized by the notion of low displacement rank. Our structured transforms admit fast function and gradient evaluation, and span a rich range of parameter sharing configurations whose statistical modeling capacity can be explicitly tuned along a continuum from structured to unstructured. Experimental results show that these transforms can significantly accelerate inference and forward/backward passes during training, and offer superior accuracy-compactness-speed tradeoffs in comparison to a number of existing techniques. In keyword spotting applications in mobile speech recognition, our methods are much more effective than standard linear low-rank bottleneck layers and nearly retain the performance of state of the art models, while providing more than 3.5-fold compression.", "creator": "LaTeX with hyperref package"}}}