{"id": "1510.04609", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Oct-2015", "title": "Layer-Specific Adaptive Learning Rates for Deep Networks", "abstract": "drastically increasing complexity of deep mathematics knowledge is amplified in training time requiring weeks preceding even months. this design training is derived in part off vanishing flow, during physics the gradients used by sub - propagation are as thick for knots connecting deep layers ( layers into slope filter layer ), to extremely small for shallow layers ( approaching the interior texture ) ; friction results in slow learning inside the shallow portions. additionally, it has also been shown that in engineering non - critical problems, viewed as noisy neural networks, there exist a proliferation of high - error / shape saddle points, which go down learning dramatically. taking this paper, we attempt to overcome accessibility difficulty above techniques by proposing an optimization method ; training deep neural infrastructure quickly uses learning inputs which evolve both localized to arbitrary species in the network and adaptive for the outputs after the function, not the survival rate at low curvature fields. this having us essentially take up learning underlying the shallow layers of the network we quickly manage high - error vertical curvature saddle points. you test our method behind standard image classification datasets regarded as mnist, nec and intel, and expect that our implementation ensures accuracy cost easily as reduces the normal learning time over standard inputs.", "histories": [["v1", "Thu, 15 Oct 2015 16:31:46 GMT  (627kb,D)", "http://arxiv.org/abs/1510.04609v1", "ICMLA 2015, deep learning, adaptive learning rates for training, layer specific learning rate"]], "COMMENTS": "ICMLA 2015, deep learning, adaptive learning rates for training, layer specific learning rate", "reviews": [], "SUBJECTS": "cs.CV cs.AI cs.LG cs.NE", "authors": ["bharat singh", "soham de", "yangmuzi zhang", "thomas goldstein", "gavin taylor"], "accepted": false, "id": "1510.04609"}, "pdf": {"name": "1510.04609.pdf", "metadata": {"source": "CRF", "title": "Layer-Specific Adaptive Learning Rates for Deep Networks", "authors": ["Bharat Singh", "Soham De", "Yangmuzi Zhang", "Thomas Goldstein", "Gavin Taylor"], "emails": ["tomg}@cs.umd.edu,", "ymzhang@umiacs.umd.edu,", "taylor@usna.edu"], "sections": [{"heading": null, "text": "I. INTRODUCTION\nDeep neural networks have been extremely successful over the past few years, achieving state of the art performance on a large number of tasks such as image classification [2], face recognition [3], sentiment analysis [4], speech recognition [5], etc. One can spot a general trend in these papers: results tend to get better as the amount of training data increases, along with an increase in the complexity of the deep network architecture. However, increasingly complex deep networks can take weeks or months to train, even with high-performance hardware. Thus, there is a need for more efficient methods for training deep networks.\nDeep neural networks learn high-level features by performing a sequence of non-linear transformations. Let our training data set A be composed of n data points a1, a2, . . . , an \u2208 Rm and corresponding labels B = {bi}ni=1. Let us consider a 3-layer network with activation function f . Let X1 and X2 denote the weights on each layer that we are trying to learn, i.e., X1 denotes the weights between nodes of the first layer and the second layer, and X2 denotes the weights between nodes of the second layer and the third layer. The learning problem for this specific example can be formulated as the following optimization problem:\nminimize X1,X2\n\u2225\u2225f(f(A \u00b7X1) \u00b7X2)\u2212B\u2225\u222522 (1)\nThe activation function f can be any non-linear mapping, and is traditionally a sigmoid or tanh function. Recently, rectified linear (ReLu) units (f(z) = max{0, z}) have become popular because they tend to be easy to train and yield superior results for some problems [6].\nThe non-convex objective (1) is usually minimized using iterative methods (such as back-propagation) with the hope of converging to a good local minima. Most iterative schemes generate additive updates to a set of parameters x (in our case, the weight matrices) of the form\nx(k+1) = x(k) + \u2206x(k) (2)\nwhere \u2206x(k) is some appropriately chosen update. Notice we use slightly different notation here from standard optimization literature in that we incorporate the step size or learning rate t(k) within \u2206x(k). This is done to help us describe other optimization algorithms easily in the following sections. Thus, \u2206x(k) denotes the update in the parameters, and comprises of a search direction and a step size or learning rate t(k), which controls how large of a step to take in that direction.\nMost common update rules are variants of gradient descent, where the search direction is given by the negative gradient g(k):\n\u2206x(k) = \u2212t(k)g(k) = \u2212t(k)\u2207f(x(k)) (3)\nSince the size of the training data for these deep networks is usually of the order of millions or billions of data points, exact computation of the gradient is not feasible. Rather, the gradient is often estimated using a single data point or a small batch of data points. This is the basis for stochastic gradient descent (SGD) [7], which is the most widely used method for training deep nets. SGD requires manually selecting an initial learning rate, and then designing an update rule for the learning rate which decreases it over time (for example, exponential decay with time). The performance of SGD, however, is very sensitive to this choice of update, leading to adaptive methods that automatically adjust the learning rate as the system learns [8], [9].\nWhen these descent methods are used to train deep networks, additional problems are introduced. As the number of layers in a network increases, the gradients that are propagated back to the initial layers get very small. This dramatically slows down the rate of learning in the initial layers, and slows down convergence of the whole network [10].\nar X\niv :1\n51 0.\n04 60\n9v 1\n[ cs\n.C V\n] 1\n5 O\nct 2\n01 5\nRecently, it has also been shown that for high-dimensional non-convex problems, such as deep networks, the existence of local minima which have high error relative to the global minima is exponentially small in the number of dimensions. Instead, in these problems, there is an exponentially large number of high error saddle points with low curvature [1], [11], [12]. Gradient descent methods, in general, move away from saddle points by following the directions of negative curvature. However, due to the low curvature of small negative eigenvalues, the steps taken become very small, thus slowing down learning considerably.\nIn this paper, we propose a method that alleviates the problems mentioned above. The main contribution of our method is summarized below:\n\u2022 The learning rates are specific to each layer in the network. This allows larger learning rates to compensate for the small size of gradients in shallow layers.\n\u2022 The learning rates for each layer tend to increase at low curvature points. This enables the method to quickly escape from high-error, low-curvature saddle points, which occur in abundance in deep network.\n\u2022 It is applicable to most existing stochastic gradient optimization methods which use a global learning rate.\n\u2022 It requires very little extra computation over standard stochastic gradient methods, and requires no extra storage of previous gradients required as in AdaGrad [9].\nIn Section II, we review some popular gradient methods that have been successful for deep networks. In Section III, we describe our optimization algorithm. Finally, in Section IV we compare our method to standard optimization algorithms on datasets like MNIST, CIFAR10 and ImageNet."}, {"heading": "II. RELATED WORK", "text": "Stochastic Gradient Descent (SGD) still remains one of the most widely used methods for large-scale machine learning, largely due to its ease in implementation. In SGD, the updates for the parameters are defined by equations (2) and (3), and the learning rate is decreased over time as iterates approach a local optimum. A standard learning rate update is given by\nt(k) = t(0)/(1 + \u03b3k)p (4)\nwhere the initial learning rate t(0), \u03b3 and p are hyperparameters chosen by the user.\nMany modifications to the basic gradient descent algorithm have been proposed. A popular method in the convex optimization literature is Newton\u2019s method, which uses the Hessian of the objective function f(x) to determine the step size:\n\u2206x (k) nt = \u2212\u22072f(x(k))\u22121g(k) (5)\nUnfortunately, as the number of parameters increases, even to moderate size, computing the Hessian becomes very computationally expensive. Thus, there have been many modifications proposed which either try to improve the use of first-order information or try to approximate the Hessian of the objective\nfunction. In this paper, we focus on modifications to first-order methods.\nThe classical momentum method [13] is a technique that increases the learning rate for parameters for which the gradient consistently points in the same direction, while decreasing the learning rate for parameters for which the gradient is changing fast. Thus, the update equation keeps track of previous updates to the parameters with an exponential decay:\n\u2206x(k) = \u00b5\u2206x(k\u22121) \u2212 tg(k) (6)\nwhere \u00b5 \u2208 [0, 1] is called the momentum coefficient, and t > 0 is the global learning rate.\nNesterov\u2019s Accelerated Gradient (NAG) [14], a first order method, has a better convergence rate than gradient descent in certain situations. This method predicts the gradient for the next iteration and changes the learning rate for the current iteration based on the predicted gradient. Thus, if the gradient is higher for the next step, it would increase the learning rate for the current iteration and if it is low, it would slow down. Recently, [15] showed that this method can be thought of as a momentum method with the update equation as follows:\n\u2206x(k) = \u00b5\u2206x(k\u22121) \u2212 t\u2207f(x(k\u22121) + \u00b5\u2206x(k\u22121)) (7)\nThrough a carefully designed random initialization and using a particular type of slowly increasing schedule for \u00b5, this method can reach high levels of performance when used on deep networks [15].\nRather than using a single learning rate over all parameters, recent work has shown that using a learning rate specific to each parameter can be a much more successful approach. A method that has gained popularity is AdaGrad [9], which uses the following update rule:\n\u2206x(k) = \u2212 t\u221a\u2211k i=1(g (i))2 g(k) (8)\nThe denominator is the l2 norm of all the gradients of the previous iterations. This scales the global learning rate t, which is shared by all the parameters, to give a parameterspecific learning rate. One disadvantage of AdaGrad is that it accumulates the gradients over all previous iterations, the sum of which continues to grow throughout training. This (along with weight decay) shrinks the learning rate on each parameter until each is infinitesimally small, limiting the number of iterations of useful training.\nA method which builds on AdaGrad and attempts to address some of the above-mentioned disadvantages is AdaDelta [8]. AdaDelta accumulates the gradients in the previous time steps using an exponentially decaying average of the squared gradients. This prevents the denominator from becoming infinitesimally small, and ensures that the parameters continue to be updated even after a large number of iterations. It also replaces the global learning rate t with an exponentially decaying average of the squares of the parameter updates \u2206x over the previous iterations. This method has been shown to perform relatively well when used to train deep networks, and is much less sensitive to the choice of hyper-parameters. However, it does not perform as well as other methods like SGD and AdaGrad in terms of accuracy [8]."}, {"heading": "III. OUR APPROACH", "text": "Because of the \u201cvanishing gradients\u201d phenomenon, shallow network layers tend to have much smaller gradients than deep layers \u2013 sometimes differing by orders of magnitude from one layer to the next [10]. In most previous work in optimization for deep networks, methods either keep a global learning rate that is shared over all parameters, or use an adaptive learning rate specific to each parameter. Our method exploits the following observation: parameters in the same layer have gradients of similar magnitudes, and can thus efficiently share a common learning rate. Layer-specific learning rates can be used to accelerate layers with smaller gradients. Another advantage of this approach is that by avoiding the computation of large numbers of parameter-specific learning rates, our method remains computationally efficient. Finally, as mentioned in Section I, to avoid slowing down learning at high-error low curvature saddle points, we also want our method to take large steps at low curvature points.\nLet t(k) be the learning rate at the k-th iteration for any standard optimization method. In case of SGD, this would be given by equation 4, while for AdaGrad it would just be the global learning rate t as in equation 8. We propose to modify t(k) as follows:\nt (k) l = t (k)(1 + log(1 + 1/(\u2016g(k)l \u20162))) (9)\nHere t(k)l denotes the new learning rate for the parameters in the l-th layer at the k-th iteration and g(k)l denotes a vector of the gradients of the parameters in the l-th layer at the k-th iteration. Thus, we see that we use only the gradients in the same layer to determine the learning rate for that layer. It is also important to note that we do not use any gradients from previous iterations, and thus save on storage.\nFrom equation 9, we see that when the gradients in a layer are very large, the equation just reduces to using the normal learning rate t(k). However, when the gradients are very small, we are more likely to be near a low curvature point. Thus, the equation scales up the learning rate to ensure that the initial layers of the network learn faster, and that we escape higherror low curvature saddle points quickly.\nWe can use this layer-specific learning rate on top of SGD. Using equation 3, the update in that case, would be:\n\u2206x (k) l = \u2212t (k) l g (k) l (10)\n= \u2212t(k)(1 + log(1 + 1/(\u2016g(k)l \u20162)))g (k) l (11)\nwhere \u2206x(k)l denotes the update in the parameters of the l-th layer at the k-th iteration.\nSimilarly, we can modify AdaGrad\u2019s update equation (8) to use our modified learning rates.\n\u2206x (k) l = \u2212 t (k) l\u221a\u2211k\ni=1(g (i) l ) 2\ng (k) l (12)\nNote that, unlike AdaGrad which uses a distinct learning rate for each parameter, we use a different learning rate for each layer, which is shared by all weights in that layer. Additionally, AdaGrad modifies the learning rate based on the entire history of gradients observed for that weight while we update a\nlayer\u2019s learning rate based only on gradients observed for all weights in a specific layer in the current iteration. Thus, our scheme avoids both storing gradient information from previous iterations and computing learning rates for each parameter; it is therefore less computationally and memory intensive when compared to AdaGrad. The proposed layer specific learning rates also works well on large scale datasets like ImageNet (when applied over SGD), where AdaGrad fails to converge to a good solution.\nThe proposed method can be used with any existing optimization technique which uses a global learning rate, provides a layer-specific learning rate, and escapes saddle points quickly, all without sacrificing computation or memory usage. As we show in Section IV, using our adaptive learning rates on top of existing optimization techniques almost always improves performance on standard datasets.\nThe proposed method can be used with any existing optimization technique which uses a global learning rate. This helps in getting a layer-specific learning rate, as well as, helps in escaping saddle points quicker, with very little computational overhead. As we show in Section IV, using our adaptive learning rates on top of existing optimization techniques almost always improves performance on standard datasets."}, {"heading": "IV. EXPERIMENTAL RESULTS", "text": ""}, {"heading": "A. Dataset", "text": "We present image classification results on three standard datasets: MNIST, CIFAR10 and ImageNet (ILSVRC 2012 dataset, part of the ImageNet challenge). MNIST contains 60,000 handwritten digit images for training and 10,000 handwritten digit images for testing. CIFAR10 contains has 10 classes with 6,000 images in each class. ImageNet contains 1.2 million color images from 1000 different classes."}, {"heading": "B. Experimental Details", "text": "We use Caffe [16] to implement our method. Caffe provides optimization methods for Stochastic Gradient Descent (SGD), Nesterov\u2019s Accelerated Gradient (NAG) and AdaGrad. For a fair comparison between state-of-the-art methods, we add our adaptive layer-specific learning rate method on top of each of these optimization methods. In our experiments, we demonstrate the effectiveness of our algorithm on convolutional neural networks on 3 datasets. On CIFAR10, we use the same global learning rate as provided in Caffe. Since our method always increases the layer-specific learning rate (with respect to other optimization methods) based on the global learning rate, we start with a slightly smaller learning rate of 0.006 to make the learning less aggressive for the ImageNet experiment. SGD was initialized with the learning rate used in [2] for experiments done on ImageNet.\n1) MNIST: We use the same architecture as LeNet for our experiments on MNIST. We present the results of using our proposed layer-specific learning rates on top of stochastic gradient descent, Nesterov\u2019s accelerated gradient method and AdaGrad on the MNIST dataset. Since all methods converge very quickly on this dataset, we present the accuracy and loss only for the first 2,000 iterations. Table I shows the\nmean accuracy and standard deviation when each method was run 10 times. We observe that our proposed layer-specific learning rate is consistently better than Nesterov\u2019s accelerated gradient, stochastic gradient descent and AdaGrad. In all the experiments, the proposed method also attains the maximum accuracy of 99.2% just like stochastic gradient descent, Nesterov\u2019s accelerated gradient and AdaGrad.\n2) CIFAR10: On CIFAR10 we use a convolutional neural network with 2 layers of 32 feature maps from 5 \u00d7 5 convolution kernels, each followed by 3\u00d7 3 max pooling layers. After this we have another convolution layer with 64 feature maps from a 5 \u00d7 5 convolution kernel followed by a 3 \u00d7 3 max pooling layer. Finally, we have a fully connected layer with 10 hidden nodes and a soft-max logistic regression layer. After each convolution layer a ReLu non-linearity is applied. This is the same architecture as specified in Caffe. For the first 60,000 iterations the learning rate was 0.001 and it was dropped by a factor of 10 at 60,000 and 65,000 iterations.\nOn this dataset, we again observe that final error and loss of our method is consistently lower than SGD, NAG and AdaGrad (Table II). After step down, our adaptive method reaches a lower accuracy than both SGD and NAG. Note that just using our optimization method (without changing the network architecture) we can get an improvement of 0.32% over the mean accuracy for SGD. Even if we step down the learning rate at 50,000 iterations (taking 60000 iterations in total), we obtain an accuracy of 82.08%, which is better than SGD after 70,000 iterations, significantly cutting down on required training time Fig. 1. Since our method converges much faster when used with SGD, it is possible to perform the step down on the learning rate even earlier, potentially reducing training time even further. Although Adagrad does not perform very well on CIFAR10 with default parameters, we observe an improvement of 1.3% over the mean final accuracy, with again a significant speed-up in training time.\n3) ImageNet: We use an implementation of AlexNet [2] in Caffe, a deep convolutional neural network architecture, for comparing our method with other optimization algorithms. AlexNet consists of 5 convolution layers followed by 3 fully connected layers. More details regarding the architecture can be found in the paper [2].\nSince AlexNet is a deep neural network with significant complexity, it is suitable to apply our method on this network architecture. Fig 2 shows the results of using our method over SGD. We observe that our method obtains significantly greater accuracy and lower loss after 100,000 and 200,000 iterations. Further, we are also able to reach the maximum accuracy of 57.5% on the validation set after 295,000 iterations which is achieved by SGD only after 345,000 iterations, resulting in a reduction of 15% in training time. Given that such a large model takes more than a week to train properly, this is a significant reduction. Our loss is also consistently lower than SGD across all iterations. In the existing model, we perform a step down by a factor of 10 after every 100,000 iterations. In order to analyze how our method performs when we reduce the number of training iterations, we vary the number of training iterations at a specific learning rate before performing a step down. Table III shows the final accuracy after 350,000 iterations of SGD and our method. Although the final accuracy drops slightly as we decrease the number of iterations after which we perform the step down in the learning rate, it is clearly evident that our method achieves better accuracy than SGD. Note that we report top-1 class accuracy. Since we use the Caffe implementation of the AlexNet architecture and do not use any data augmentation techniques, our results are slightly lower than those reported in [2]."}, {"heading": "V. CONCLUSIONS", "text": "In this paper we propose a general method for training deep neural networks using layer-specific adaptive learning rates,\nwhich can be used on top of any optimization method with a global learning rate. The method uses gradients from each layer to compute an adaptive learning rate for each layer. It aims to speed up convergence when the parameters are in a low curvature saddle point region. Layer-specific learning rates also enable the method to prevent slow learning in initial layers of the deep network, usually caused by very small gradient values."}, {"heading": "ACKNOWLEDGMENT", "text": "The authors acknowledge ONR Grant numbers N0001415WX01341 and N000141512676, as well as\nthe University of Maryland supercomputing resources (http://www.it.umd.edu/hpcc)."}], "references": [{"title": "On the saddle point problem for non-convex optimization", "author": ["R. Pascanu", "Y.N. Dauphin", "S. Ganguli", "Y. Bengio"], "venue": "arXiv preprint arXiv:1405.4604, 2014.", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2014}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "Advances in neural information processing systems, 2012, pp. 1097\u20131105.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2012}, {"title": "Deepface: Closing the gap to human-level performance in face verification", "author": ["Y. Taigman", "M. Yang", "M. Ranzato", "L. Wolf"], "venue": "Computer Vision and Pattern Recognition (CVPR), 2014 IEEE Conference on. IEEE, 2014, pp. 1701\u20131708.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2014}, {"title": "Recursive deep models for semantic compositionality over a sentiment treebank", "author": ["R. Socher", "A. Perelygin", "J.Y. Wu", "J. Chuang", "C.D. Manning", "A.Y. Ng", "C. Potts"], "venue": "Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP). Citeseer, 2013, pp. 1631\u20131642.", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2013}, {"title": "Deep neural networks for acoustic modeling in speech recognition: The shared views of four research groups", "author": ["G. Hinton", "L. Deng", "D. Yu", "G.E. Dahl", "A.-r. Mohamed", "N. Jaitly", "A. Senior", "V. Vanhoucke", "P. Nguyen", "T.N. Sainath"], "venue": "Signal Processing Magazine, IEEE, vol. 29, no. 6, pp. 82\u201397, 2012.", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2012}, {"title": "Deep sparse rectifier networks", "author": ["X. Glorot", "A. Bordes", "Y. Bengio"], "venue": "Proceedings of the 14th International Conference on Artificial Intelligence and Statistics. JMLR W&CP Volume, vol. 15, 2011, pp. 315\u2013323.", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2011}, {"title": "A stochastic approximation method", "author": ["H. Robbins", "S. Monro"], "venue": "The Annals of Mathematical Statistics, vol. 22, no. 3, pp. 400\u2013407, 1951.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1951}, {"title": "Adadelta: An adaptive learning rate method", "author": ["M.D. Zeiler"], "venue": "arXiv preprint arXiv:1212.5701, 2012.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2012}, {"title": "Adaptive subgradient methods for online learning and stochastic optimization", "author": ["J. Duchi", "E. Hazan", "Y. Singer"], "venue": "The Journal of Machine Learning Research, vol. 12, pp. 2121\u20132159, 2011.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2011}, {"title": "Long short-term memory", "author": ["S. Hochreiter", "J. Schmidhuber"], "venue": "Neural computation, vol. 9, no. 8, pp. 1735\u20131780, 1997.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 1997}, {"title": "Statistics of critical points of gaussian fields on large-dimensional spaces", "author": ["A.J. Bray", "D.S. Dean"], "venue": "Physical review letters, vol. 98, no. 15, p. 150201, 2007.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2007}, {"title": "Replica symmetry breaking condition exposed by random matrix calculation of landscape complexity", "author": ["Y.V. Fyodorov", "I. Williams"], "venue": "Journal of Statistical Physics, vol. 129, no. 5-6, pp. 1081\u20131116, 2007.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2007}, {"title": "Some methods of speeding up the convergence of iteration methods", "author": ["B.T. Polyak"], "venue": "USSR Computational Mathematics and Mathematical Physics, vol. 4, no. 5, pp. 1\u201317, 1964.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1964}, {"title": "A method of solving a convex programming problem with convergence rate o (1/k2)", "author": ["Y. Nesterov"], "venue": "Soviet Mathematics Doklady, vol. 27, no. 2, 1983, pp. 372\u2013376.", "citeRegEx": "14", "shortCiteRegEx": null, "year": 1983}, {"title": "On the importance of initialization and momentum in deep learning", "author": ["I. Sutskever", "J. Martens", "G. Dahl", "G. Hinton"], "venue": "Proceedings of the 30th International Conference on Machine Learning (ICML-13), 2013, pp. 1139\u20131147.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2013}, {"title": "Caffe: Convolutional architecture for fast feature embedding", "author": ["Y. Jia", "E. Shelhamer", "J. Donahue", "S. Karayev", "J. Long", "R. Girshick", "S. Guadarrama", "T. Darrell"], "venue": "arXiv preprint arXiv:1408.5093, 2014.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "Additionally, it has also been shown that in highly non-convex problems, such as deep neural networks, there is a proliferation of high-error low curvature saddle points, which slows down learning dramatically [1].", "startOffset": 210, "endOffset": 213}, {"referenceID": 1, "context": "Deep neural networks have been extremely successful over the past few years, achieving state of the art performance on a large number of tasks such as image classification [2], face recognition [3], sentiment analysis [4], speech recognition [5], etc.", "startOffset": 172, "endOffset": 175}, {"referenceID": 2, "context": "Deep neural networks have been extremely successful over the past few years, achieving state of the art performance on a large number of tasks such as image classification [2], face recognition [3], sentiment analysis [4], speech recognition [5], etc.", "startOffset": 194, "endOffset": 197}, {"referenceID": 3, "context": "Deep neural networks have been extremely successful over the past few years, achieving state of the art performance on a large number of tasks such as image classification [2], face recognition [3], sentiment analysis [4], speech recognition [5], etc.", "startOffset": 218, "endOffset": 221}, {"referenceID": 4, "context": "Deep neural networks have been extremely successful over the past few years, achieving state of the art performance on a large number of tasks such as image classification [2], face recognition [3], sentiment analysis [4], speech recognition [5], etc.", "startOffset": 242, "endOffset": 245}, {"referenceID": 5, "context": "Recently, rectified linear (ReLu) units (f(z) = max{0, z}) have become popular because they tend to be easy to train and yield superior results for some problems [6].", "startOffset": 162, "endOffset": 165}, {"referenceID": 6, "context": "This is the basis for stochastic gradient descent (SGD) [7], which is the most widely used method for training deep nets.", "startOffset": 56, "endOffset": 59}, {"referenceID": 7, "context": "The performance of SGD, however, is very sensitive to this choice of update, leading to adaptive methods that automatically adjust the learning rate as the system learns [8], [9].", "startOffset": 170, "endOffset": 173}, {"referenceID": 8, "context": "The performance of SGD, however, is very sensitive to this choice of update, leading to adaptive methods that automatically adjust the learning rate as the system learns [8], [9].", "startOffset": 175, "endOffset": 178}, {"referenceID": 9, "context": "This dramatically slows down the rate of learning in the initial layers, and slows down convergence of the whole network [10].", "startOffset": 121, "endOffset": 125}, {"referenceID": 0, "context": "Instead, in these problems, there is an exponentially large number of high error saddle points with low curvature [1], [11], [12].", "startOffset": 114, "endOffset": 117}, {"referenceID": 10, "context": "Instead, in these problems, there is an exponentially large number of high error saddle points with low curvature [1], [11], [12].", "startOffset": 119, "endOffset": 123}, {"referenceID": 11, "context": "Instead, in these problems, there is an exponentially large number of high error saddle points with low curvature [1], [11], [12].", "startOffset": 125, "endOffset": 129}, {"referenceID": 8, "context": "\u2022 It requires very little extra computation over standard stochastic gradient methods, and requires no extra storage of previous gradients required as in AdaGrad [9].", "startOffset": 162, "endOffset": 165}, {"referenceID": 12, "context": "The classical momentum method [13] is a technique that increases the learning rate for parameters for which the gradient consistently points in the same direction, while decreasing the learning rate for parameters for which the gradient is changing fast.", "startOffset": 30, "endOffset": 34}, {"referenceID": 0, "context": "where \u03bc \u2208 [0, 1] is called the momentum coefficient, and t > 0 is the global learning rate.", "startOffset": 10, "endOffset": 16}, {"referenceID": 13, "context": "Nesterov\u2019s Accelerated Gradient (NAG) [14], a first order method, has a better convergence rate than gradient descent in certain situations.", "startOffset": 38, "endOffset": 42}, {"referenceID": 14, "context": "Recently, [15] showed that this method can be thought of as a momentum method with the update equation as follows:", "startOffset": 10, "endOffset": 14}, {"referenceID": 14, "context": "Through a carefully designed random initialization and using a particular type of slowly increasing schedule for \u03bc, this method can reach high levels of performance when used on deep networks [15].", "startOffset": 192, "endOffset": 196}, {"referenceID": 8, "context": "A method that has gained popularity is AdaGrad [9], which uses the following update rule:", "startOffset": 47, "endOffset": 50}, {"referenceID": 7, "context": "A method which builds on AdaGrad and attempts to address some of the above-mentioned disadvantages is AdaDelta [8].", "startOffset": 111, "endOffset": 114}, {"referenceID": 7, "context": "However, it does not perform as well as other methods like SGD and AdaGrad in terms of accuracy [8].", "startOffset": 96, "endOffset": 99}, {"referenceID": 9, "context": "Because of the \u201cvanishing gradients\u201d phenomenon, shallow network layers tend to have much smaller gradients than deep layers \u2013 sometimes differing by orders of magnitude from one layer to the next [10].", "startOffset": 197, "endOffset": 201}, {"referenceID": 15, "context": "We use Caffe [16] to implement our method.", "startOffset": 13, "endOffset": 17}, {"referenceID": 1, "context": "SGD was initialized with the learning rate used in [2] for experiments done on ImageNet.", "startOffset": 51, "endOffset": 54}, {"referenceID": 1, "context": "3) ImageNet: We use an implementation of AlexNet [2] in Caffe, a deep convolutional neural network architecture, for comparing our method with other optimization algorithms.", "startOffset": 49, "endOffset": 52}, {"referenceID": 1, "context": "More details regarding the architecture can be found in the paper [2].", "startOffset": 66, "endOffset": 69}, {"referenceID": 1, "context": "Since we use the Caffe implementation of the AlexNet architecture and do not use any data augmentation techniques, our results are slightly lower than those reported in [2].", "startOffset": 169, "endOffset": 172}], "year": 2015, "abstractText": "The increasing complexity of deep learning architectures is resulting in training time requiring weeks or even months. This slow training is due in part to \u201cvanishing gradients,\u201d in which the gradients used by back-propagation are extremely large for weights connecting deep layers (layers near the output layer), and extremely small for shallow layers (near the input layer); this results in slow learning in the shallow layers. Additionally, it has also been shown that in highly non-convex problems, such as deep neural networks, there is a proliferation of high-error low curvature saddle points, which slows down learning dramatically [1]. In this paper, we attempt to overcome the two above problems by proposing an optimization method for training deep neural networks which uses learning rates which are both specific to each layer in the network and adaptive to the curvature of the function, increasing the learning rate at low curvature points. This enables us to speed up learning in the shallow layers of the network and quickly escape high-error low curvature saddle points. We test our method on standard image classification datasets such as MNIST, CIFAR10 and ImageNet, and demonstrate that our method increases accuracy as well as reduces the required training time over standard algorithms.", "creator": "LaTeX with hyperref package"}}}