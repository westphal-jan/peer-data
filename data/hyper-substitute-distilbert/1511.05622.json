{"id": "1511.05622", "review": {"conference": "iclr", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Nov-2015", "title": "Predicting distributions with Linearizing Belief Networks", "abstract": "conditional belief states affect stochastic binary variables ; neural networks. corresponds to a classical neural network, a belief network indirectly predict more rigorous continuous indirect occurrence of the output $ ja $ given the proposition $ < $. activation can predict multiple mix of outputs $ y $ which may useful when an employee randomly recall multiple outputs whose average is not necessarily a valid answer. short logic with particularly relevant another inverse problem such as hypothesis prediction for denoising, or reply to text. however, multiple contingent belief networks themselves used to train while are naturally suited to continuous problems. this realization employs a characteristic family of variants including linearizing belief packets or lbns. a lbn extends mutually optimal deep neural route where continuous linear unit minus signal turned on simultaneously off are non - vanishing binary latent parameters. sms is a universal approximator of data - valued map recognition and straightforward approach trained inverse gradient descent. moreover, multiple linear pathways efficiently map continuous information and indirectly incorporate backward multiplicative skip - switches to help optimization by removing gradient diffusion. this yields every model which trains integration and has the state - oh - way - kind on image likelihood algorithm facial identity generation with the toronto faces dataset.", "histories": [["v1", "Tue, 17 Nov 2015 23:50:35 GMT  (1154kb,D)", "https://arxiv.org/abs/1511.05622v1", null], ["v2", "Fri, 20 Nov 2015 00:40:38 GMT  (1154kb,D)", "http://arxiv.org/abs/1511.05622v2", null], ["v3", "Tue, 24 Nov 2015 01:45:01 GMT  (1154kb,D)", "http://arxiv.org/abs/1511.05622v3", null], ["v4", "Mon, 2 May 2016 03:22:01 GMT  (1309kb,D)", "http://arxiv.org/abs/1511.05622v4", null]], "reviews": [], "SUBJECTS": "cs.LG cs.CV", "authors": ["yann n dauphin", "david grangier"], "accepted": true, "id": "1511.05622"}, "pdf": {"name": "1511.05622.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["LINEARIZING BELIEF NETWORKS", "Yann N. Dauphin", "David Grangier"], "emails": ["ynd@fb.com", "grangier@fb.com"], "sections": [{"heading": "1 INTRODUCTION", "text": "Deep neural networks are universal approximators that can learn any deterministic mapping f : X \u2192 Y given enough capacity. However, traditional neural networks are not universal approximators of conditional distributions p(Y |X). In the context of continuous data, neural networks with the mean squared error can be derived from maximum likelihood on a unimodal Gaussian distribution p(Y |X) = N (\u00b5 = f(X), \u03c3 = 1) where the network f predicts the expected value. Thus conventional networks could not learn output distributions with multiple modes. This kind of distribution occurs for instance when trying to predict an image Y based on a description X . This distribution would be the set of images that fits the description - not a single image. In general, a similar situation occurs for most ill-posed or inverse problems - whenever the model does not have enough information to rule out all uncertainty over outcomes. In these situations, the unimodal prior forces the network to average the outcomes as illustrated in Figure 1. This is problematic because in many cases this generates an invalid prediction and in the case of images this is exemplified by blurry average predictions. We observe that this occurs in several important applications of neural networks to the continuous domain \u2013 i.e. predicting the next frame of video (Srivastava et al., 2015) or learning unsupervised models with regularized autoencoders (Bengio et al., 2013b).\nStochastic feed-forward neural networks (Neal, 1992) (SFNN) solve this problem with the introduction of stochastic latent variables to the network. The model can be seen as a mixture of neural networks where each configuration of stochastic variables defines a different neural network. This is efficiently achieved by sharing most of the parameters between configurations. While conventional neural networks fit a single conditional Gaussian to the data, the stochastic latent variables lead to fitting a mixture of conditional Gaussians. This a powerful extension since mixture of Gaussians are universal approximators of distributions (Sorenson & Alspach, 1971). The network can model multi-modal distributions by learning a different network for each mode. Neal (1992) proposes training Sigmoid Belief Networks (SBN) which have only binary stochastic units. The resulting\nar X\niv :1\n51 1.\n05 62\n2v 4\n[ cs\n.L G\n] 2\nM ay\n2 01\nmodel makes piecewise-constant MAP predictions and thus is unsuitable for continuous problems \u2013 it cannot vary smoothly with the input, see Section 5. Tang & Salakhutdinov (2013) addresses this limitation with the addition of deterministic sigmoid units to each layer of the network. This yields a mixture of non-linear neural networks gated by a stochastic non-linear neural network. Tang & Salakhutdinov (2013) showed improved results with this model but the training of the latent stochastic units with a high variance variational bound was a challenge. Raiko et al. (2014) suggested to avoid training the latent units, relying only on layers of deterministic units to shape the random distribution. This modification did not however eliminate a fundamental limitation of stochastic networks in which stochastic and deterministic units interact additively. In these networks, the gradients of the weights tied to deterministic units have much lower variance than those tied to stochastic units, which means it is harder assign credit to stochastic units and training prefers configuration using the deterministic ones as much as possible.\nIn this paper, we propose a new class of stochastic networks called linearizing belief nets (LBN) that can learn any continuous distribution p(Y |X). This model combines deterministic variables with non-deterministic binary variables in a multiplicative fashion. This approach allows using linear deterministic units without losing modeling power. These linear units can be thought of as multiplicative skip connections that allows the gradient to flow without diffusion through deep networks (Hochreiter et al., 2001). Furthermore, multiplicative interactions allow making tie-breaking choices which would be difficult to emulate with addition. Our experiments on facial expressions confirm that the model can successfully learn multimodal distributions. We demonstrate with image denoising that the model can attain state-of-the-art results modeling natural images - converging faster than even deterministic ReLU networks in some cases."}, {"heading": "2 LINEARIZING BELIEF NETS", "text": "This section introduces a new family of belief networks dubbed linearizing belief nets (LBN) aimed to address some of the limitations of conditional SBNs. These models factor into a deep linear network where each linear unit is gated by a non-deterministic binary unit. It can be seen as a non-linear mixture of an exponential amount of linear models and it can learn piece-wise linear nondeterministic functions as illustrated in Figure 2. The binary gating units can select the appropriate specialist sub-network for an input by turning off linear units. For instance, the mixture could contain different specialist sub-networks to generate different types of dogs. Let us consider the problem of predicting the target y \u2208 RM from the input x \u2208 RN . In general, a conditional mixture model can be written as\np(y|x) = \u2211 g p(y,g|x) = \u2211 g p(g|x)p(y|x,g) (1)\nwhere p(g|x) is the probability of selecting the expert identified by the gating configuration g and p(y|x,g) is the prediction of that expert. Contrary to classical mixtures like Gaussian mixture models (GMM), stochastic networks share parameters across experts which enable training exponentially more experts.\nThe output of the network p(y|x,g) = N (\u00b5 = f(x,g)) for a given input and gating configuration is\nh = g \u2297Wx (2) f(x,g) = Vh+ b (3)\nwhere \u2297 denotes component-wise vector product, g \u2208 {0, 1}H are the binary gating units and V \u2208 RM\u00d7H ,W \u2208 RH\u00d7N ,b \u2208 RM are learned parameters. Each expert is a particular combination of a multi-layer linear network. The non-linearity of the model comes from the gating units g turning linear factors on or off \u2013 much like a rectifying non-linearity ReLU(Wx) = max(0,Wx) = (Wx > 0)\u2297Wx. We show that linearizing blocks generalize the ReLU in Appendix A.3. The binary units can be seen as controlling the flow of information in the network. At the same time, the linear factors transmit continuous values, which is crucial to address continuous prediction tasks. Hence the model disentangles the problem of deciding when to fire and how much to fire. This model is one of the simplest ways to learn smooth functions with binary latent variables. The set of experts are the 2H different configurations of the binary units g. Now a key question is how to learn an appropriate distribution over these units efficiently.\nThe gating units are sampled according to a Bernoulli distribution p(g|x) = B(p = g(Wx)), where each unit gi is sampled independently with rate gi(Wx) set by the non-linear gating function g. Section 3 discusses the specific parameterization of g. The gating network decides which units to activate/deactivate and allows modeling complex patterns. Therefore, the gating function takes the linear activation vector Wx as input and can implement rich interactions between factors such as winner-takes-all. Adding such pooling interactions to the networks is known to improve the generalization performance (Boureau et al., 2010; Goodfellow et al., 2013). We propose these nonlinear gating units as a general strategy to learn pooling functions. In addition, the gating units allows the model to easily represent sparse activations. This is an interesting property since the reconstruction of high frequency signals by summing a few high frequency dictionary elements is a common, effective strategy (Mallat, 2008). In our experiments, we oberve that our model indeed learns sparse, orthogonal features, see Section 6.\nThe conditionals corresponding to f and g defines the model. Different objectives can be employed to train their parameters: data likelihood, variational bounds (Tang & Salakhutdinov, 2013), or a distiguishibility criteria (Goodfellow et al., 2014). This work focuses on maximum likelihood and we estimate the computationally expensive expectation from Equation 1 using Monte Carlo with k\nsamples\nlog p(y|x) ' log 1 k k\u2211 i=1 1\u221a (2\u03c0)M exp ( \u22121 2 \u2016f(x,g{i})\u2212 y\u20162 ) (4)\nwhere g{1}, . . . ,g{k} are k samples from p(g|x). The model p(y|x) is a mixture of Gaussians and can therefore approximate any conditional distribution (Sorenson & Alspach, 1971). In contrast, traditional neural networks estimate the parameters of a single Gaussian. Differentiating the loss reveals the presence of a softmax between the Gaussians\n\u2212 \u2202 \u2202\u03b8\nlog p(y|x) \u221d k\u2211\ni=1\nsoftmax ( \u22121 2 \u2016f(x,g(i))\u2212 y\u20162 ) \u2202 \u2202\u03b8 \u2225\u2225\u2225f(x,g(i))\u2212 y\u2225\u2225\u22252 . (5) The gradient concentrates on the sample f(x,g{i}) closest to target y and updates the model to move f(x,g{i}) toward target y. Thus the model can learn different Gaussians to account for the diverse set of alternative outcomes y for the input x. One can further note that relying on a single Monte Carlo sample (k = 1) reverts to mean square error minimization. The combination of the linear skipconnections with binary latent variable helps learning as it prevents gradient diffusion (Hochreiter et al., 2001). For instance, in the gradient\n\u2202 log p(y|x) \u2202Wi,j = gj xi \u2202 log p(y|x) \u2202h + \u2202g \u2202Wi,j \u2202 log p(y|x) \u2202h\nthere is a path for the gradient to flow without down weighting through the network. gj \u2208 {0, 1} either selects the full gradient or cancels it much like in a ReLU networks."}, {"heading": "3 LEARNING NON-DETERMINISTIC GATING UNITS", "text": "The rates of the gating units g \u223c B(p = g(Wx)) are parameterized by the gating function g. We implement g with a neural network which keeps training simple without compromising the power of the model. A simple choice would be to use g(Wx) = \u03c3(Wx + b) with the sigmoid function \u03c3 : x\u2192 11+exp(\u2212x) to decide how likely we are to turn on a unit. This function prefers activations Wix which are larger than their learned threshold bi. Our empirical evaluation invariably found better results with deeper functions. Deeper functions allow the gating units to model richer interactions between the factors. Therefore we propose a sigmoid multi-layer network\ng(Wx) = \u03c3(W(2)\u03c3(W(1)Wx+ b(1)) + b(2))\nwith the parameters {W(1),b(1),W(2),b(2)}. This equation showcases a single hidden layer but models with additional layers can also be considered. Defining g as a neural network allows joint training with f through gradient descent.\nThe difficulty for training resides in computing gradients through sampling operations g \u223c B(p = g(Wx)) which makes h binary. Bengio et al. (2013a) proposed a solution based on reinforcement learning, while Tang & Salakhutdinov (2013) explored a variational learning approach. These solutions unfortunately results in high-variance gradient estimates. We use a lower variance estimator introduced recently by Raiko et al. (2014). This approach decomposes the stochastic units into\ngi = gi(Wx) + i with i = { 1\u2212 gi(Wx) with probability gi(Wx) \u2212gi(Wx) with probability 1\u2212 gi(Wx)\nwhich expresses the Bernoulli unit as the sum of the deterministic term gi(Wx) and the stochastic term . The strategy propagates the gradient only through the deterministic term which is the output of the gating function and ignores the gradient coming from i. Noting that the term has zero mean, that is E[g] = g(Wx), Raiko et al. (2014) finds this method incurs only a small bias and works well in practice. This strategy is simple to implement as it amounts to sampling the probabilities gi for the forward pass, and back-propagating through the gating function as if there was no sampling."}, {"heading": "4 DEEP LINEARIZING BELIEF NETS", "text": "Multiple layers of non-deterministic variables g(1), . . . ,g(L) can be beneficial. This factorizes the latent variable distribution as p(g|x) = \u220fL l p(g\n(l)|x,g(l\u22121)) and increases modeling efficiently. The resulting deep LBN is a hierarchical mixture that has layers of shared factors. This extension yields the following density for two layers\np(y|x) = \u2211\ng(1),g(2)\np(g(2)|x,g(1))p(g(1)|x)p(y|x,g(1),g(2)).\nIn that case, the linear expert adds a new linear layer along with the new gating units\np(y|x) \u221d e\u2212 12\u2016f(x,g (i))\u2212y\u20162 with f(x,g(1),g(2)) = U(g(2) \u2297V(g(1) \u2297Wx)).\nThe distribution of the first layer gating units remain unchanged while the gating units of the second layer follow p(g(2)|x,g(1)) = B(p = g(2)(V(g(1) \u2297Wx))). One can note that the second layer gating function takes the activation of the second layer linear units as input."}, {"heading": "5 RELATED WORK", "text": "Neal (1992) proposed one of the earliest uses of neural networks for modeling multi-modal distributions. This model is not suitable for continuous distributions because it is piece-wise constant p(y|x,g) = p(y|g) - it does not vary smoothly with the input. Bishop (1994) described a model more suitable for continuous problems called mixture density networks (MDN). The approach forgoes stochastic latent variables and instead has the network directly predict the means of K Gaussians. While it can model continuous distributions, the model is intractable in many cases because the number of parameters grows linearly with the number of modes.\nTang & Salakhutdinov (2013) improved upon the SBN with the addition of deterministic hidden variables to model continuous distributions. The stochastic and deterministic units are concatenated at each layer to form the representation. In effect, the contributions of the deterministic and stochastic units are combined additively at the next layer. Thus the stochastic units cannot easily switch on or off the deterministic factors. Moreover, training the network can be cumbersome. It requires training a deep deterministic neural network at the same as the stochastic units through a high variance variational bound. By contrast, the deterministic part of LBNs is linear and easy to train because it is linear. Moreover, we optimize likelihood directly through a technique with lesser variance, see Section 3. The difficulty of training SFNNs is discussed by Raiko et al. (2014). This work finds that better performance can be achieved by training only the deterministic units and setting the probability of activation of the Bernoulli units to p = 0.5. The random units are like additional inputs to the network but it differs from simply injecting noise because the mixture loss of Equation 1 is used. We refer to this method as randomized SFNN (RSFNN) from hereon. The challenge here is that this method is less efficient than adapting the stochastic units. More generally, these different approaches relies on the additive combination of the deterministic units with the stochastic units. The estimates of the gradients of the weights of these units have different variance \u2013 with much higher variance for the stochastic part. Training can get trapped in configuration that does not fully exploit the stochastic units. Goroshin et al. (2015) explores an alternative strategy and forgo full probabilistic modeling to focus on MAP inference. It introduces non-deterministic hidden variables and performing MAP inference on them. MAP inference at training time can be intensive computationally.\nThe linearizing net has connections to the spike and slab RBM (Courville et al., 2011) which has both Gaussian and Bernoulli units that interact multiplicatively. However, the spike and slab RBM is more difficult to train because it requires MCMC. The architectures are also different because spike and slab places the binary units before the linear units in the flow graph which would make gradient descent challenging."}, {"heading": "6 EXPERIMENTS", "text": "This section evaluates the modeling power of LBNs and other stochastic networks on multi-modal distributions. In particular, we will experimentally confirm the claim that LBNs learn faster and\ngeneralize better than other stochastic networks described in the literature. To do so, we consider the tasks of modeling facial expressions and image denoising on benchmark datasets. We train networks with the Adam (Kingma & Ba, 2014) gradient-based optimizer and the parameter initialization of (Glorot & Bengio, 2010). We found it was optimal to initialize the biases of all units in the gating networks to \u22122 to promote sparsity. The hyper-parameters of the network are cross-validated using a grid search where the learning rate is always taken from {10\u22123, 10\u22124, 10\u22125}, while the other hyper-paremeters are found in a task specific manner. All experiments are run the same hardware (Nvidia Tesla K40m GPUs) and all compared techniques are given the same training time."}, {"heading": "6.1 MODELING FACIAL EXPRESSIONS", "text": "This section compares different approaches to stochastic feed-forward neural networks on the task of predicting the distribution of facial expressions of a person given a picture with a neutral expression as in Tang & Salakhutdinov (2013) and Raiko et al. (2014). The input x is the average face of the person and we have a distribution of pictures ysad, . . . ,yangry of that person with 7 different emotions. The goal is to be able to produce the full set of facial expressions for a face we have not seen before. The pictures are taken from the Toronto Face Dataset (TFD) (Susskind et al., 2010) which contains 4,000 images of 900 subjects which were asked to display 7 different emotions. Following the setting of Tang & Salakhutdinov (2013), we randomly selected 95 subjects with 1,318 images for training, 5 subjects with 68 images for validation and 24 individuals totaling 343 images were used as a test set. This reproduces the setting from Tang & Salakhutdinov (2013) as closely as possible. The networks were trained for 200 iterations on the training set with up to k = 200 Monte Carlo samples to estimate the expectation over outcomes.\nWe consider various methods including RSFNNs Raiko et al. (2014), mixtures of factor analysers (MFA), conditional Gaussian RBMs (C-GRBM) and SFNNs. The stochastic networks are trained with 4 layers with either 128 or 256 deterministic hidden units. ReLU activations are used for the deterministic units as they were found to be good for continuous problems. The 2 intermediary layers are augmented with either 32 or 64 random Bernoulli units. The number of hidden units in the LBNs was chosen from {128, 256} with the number of hidden layers fixed to 1. The gating network has 2 hidden layers with {64, 128} hidden units. The hidden units of the gating network are also sampled under a Bernoulli distribution. This allows the gating pattern h to be itself to be multi-modal and results in better results.\nTable 1 reports our results for RSFNN and LBN as well as the results from Tang & Salakhutdinov (2013) for the other techniques. Test likelihood is evaluated through Monte-Carlo sampling, like for training. The significant difference between LBNs and RSFNNs compared to the other models can be explained by their use of training methods which have much more variance. The C-GRBM requires Gibbs sampling during training for instance. The results shows superior generalization\nperformance for the LBN with a difference of 400 nats with RSFNNs. We also find that LBN networks converge faster than the RSFNNs in terms of training epochs. By looking at the predicted facial expressions in Figure 3, we confirm that the model is able to output a rich distribution of images. We also find that the gap in performance can be explained by the fact that the RSFNNs have difficulty maintaining the identity of the face. In the RSFNN, the identity can only be encoded by the deterministic units so this shows that the RSFNN has difficulty conditioning on that information. These issues are resolved by the LBN in two ways: the stochastic units can also learn to condition on identity and the multiplicative interactions ease making tie-breaking choices. Interestingly, the loglikelihood on the training set for the LBN is 3081 nats while the RSFNN reaches 2938 nats. Thus the RSFNN allows memorizing the training set in a similar manner, but does not lead to conditional models that generalize as well."}, {"heading": "6.2 IMAGE DENOISING", "text": "Denoising is a common and challenging task to evaluate unsupervised models of natural images. Typically, the goal is to learn to remove homogeneous additive Gaussian noise from the input. The noise destroys information and so the model must infer the original image from the corrupted signal. In order to do this, the model must discover local statistics of the distribution of images to map a corrupted image to the nearest valid image. Bengio et al. (2013c) showed that under mild conditions the denoising models learn the transition operator of a Markov chain whose stationary distribution is the data distribution. Denoising is an interesting application for LBNs because it is an inverse problem. There is a distribution of clean images that may correspond to a corrupted image, and this distribution may be multimodal for highly corrupted images. This occurs when the noise destroys information beyond perfect recovery. Previous approaches such as the state-of-the-art BM3D (Dabov et al., 2009) method ignore this difficulty and simply predict the conditional average. This strategy does not predict plausible images when high noise has truly destroyed information since the conditional average exhibits statistics far from genuine images in that case. Typically, such methods results in blurry predictions for highly corrupted images. On the other hand, this problem can be addressed by a model that predicts a distribution from which a set of plausible images explaining the noisy one can be sampled. Of course, this is a difficult problem and we explore here a step in that direction. We show that the LBN improves upon the conditional SBN for image patches and we compare LBNs to state-of-the art methods on full images in the last section.\nWe report results using the Peak Signal to Noise Ration (PSNR) which is given by PSNR(x,y) = \u221210 log(\u2016x\u2212 y\u20162/N) where x,y \u2208 [0, 1]N . The PSNR is an approximation to the human perception of denoising quality and it relates to the distance between corrupted and clean image. It does not operate on distributions but we use it here since it a well accepted state-of-the-art measure. It would have been better to have a distributional measure but finding a better denoising quality measure is an open problem. Nonetheless, we can compute the PSNR with a representative point from the distribution either by drawing a random sample, computing the mean or the MAP - which would be the gold standard. For one hidden layer models, we compute the mean exactly by setting g = g(x). We find that using this strategy works well in practice. For deeper models, we simply draw a sample from the model since the other quantities are difficult to estimate exactly. In addition to reporting PSNR, we also qualitatively evaluate the diversity of the distribution visually."}, {"heading": "6.2.1 IMAGE PATCHES", "text": "In this section, we will show that LBNs significantly improves upon conditional SBNs for denoising image patches. We consider small image patches here for computational reasons, as training on larger patches is computationally intensive. We extract 19 \u00d7 19 image patches from the Imagenet dataset. The dataset has close to 1.3M images and we extract a random subsample of 13M grayscale patches - with 10,000 patches held out as a test set. We will consider the problem of denoising with\na Gaussian with standard deviation 25 (over 255). We preprocess the patches by reducing to the [0, 1] interval, substracting the mean of \u00b5 = 0.5 and dividing by the standard deviation \u03c3 = 0.2.\nWe will compare conditional SBNs, LBNs and deterministic ReLU networks as a good general baseline. The LBNs have 1 non-deterministic hidden layer and the gating function has 3 layers of sigmoids. The ReLU networks were trained with either 2 or 6 layers, with 6 layers always improving results. We trained the C-SBNs with 6 layers also. All models were trained with 1024 hidden units. The 6 layer ReLU network and C-SBN have close to 4.9M parameters, while the LBN has 1M less with 3.8M parameters. The gradient of the binary units in the C-SBNs is found using the same estimator used in the LBNs so they are directly comparable. The Monte Carlo estimation of the expectation during training is computed with either 1 or 10 samples. All networks are trained with 10 iterations over the 13M patches.\nWe have plotted the learning curves with respect to training time in Figure 5. The LBN significantly outperforms the conditional SBN in terms of training time and test PSNR. The improved convergence speed can be explained in part by the linear units which allow the gradient to flow better through the network. What\u2019s more, the fact that LBNs allow higher PSNRs showcases the superior approximation efficiency of a mixture of linear models over a mixture of constants. Surprisingly, the LBN compares favorably in terms of converge speed even compared to deterministic ReLU networks. The power of the representation learned by LBNs is evidenced by the fact that it requires 6 layers of ReLUs to come close to the same level of performance. Unlike with the ReLU representations, the gating units can resolve ambiguity and competition in the representation. On the qualitative side, we can see ReLU and LBN networks learn localized Gabor filters while the C-SBN learns point detectors. These results show that the LBN model successfully addresses some of the flaws of conditional SBNs (see Appendix A.1 for more)."}, {"heading": "6.2.2 FULL IMAGES", "text": "In this section, we evaluate the problem of training LBNs with multiple layers of non-deterministic variables on denoising full images. The state-of-the art method for denoising natural images is BM3D (Dabov et al., 2009). Neural methods (Burger et al., 2012) were state-of-the-art but they were surpassed by later versions of BM3D. BM3D is a non-parametric denoising algorithm that uses self-similarity between patches to average out the noise. While we can expect this method to work well for small noise distributions, it produces blurry images for high noise distributions.\nIn order to scale to large images we use a convolutional architecture for the LBNs. In practice, this amounts to replacing the dot products by convolutions - both for the activations of the linear units and the gaters. We found that using 128 convolutional kernels of size 9 \u00d7 9 for the linear and gating units produced good results. The network has 4 convolutional hidden layers in total and 3 layer gating functions for LBNs. We do not use any spatial pooling because the loss of information would be detrimental to denoising. The output pixels have a scalar bias so as to not constrain the size of the images that can be generated. We extract 1M 64 \u00d7 64 image patches from Imagenet as our training set for highly corrupted images and 6M 29\u00d7 29 patches otherwise. We use these large image patches instead of the full image to save computation time during training but the same model can be applied to large images at test time. The networks can take up to a week of computation time to train and so in the interest of the PSNR evaluation we set the number of Monte Carlo samples to K = 1. We evaluate the quality of the distribution with a model trained with K = 10. We compare our algorithm to Gaussian Scale Mixture (GSM) (Portilla et al., 2003), Field of Experts (FoE) (Roth & Black, 2005), K-SVD (Elad & Aharon, 2006), BM3D (Dabov et al., 2009) and Learned Simultaneous Sparse Coding (LSSC) (Mairal et al., 2010) on the standard 11 test images they used.\nTable 2 shows the results denoising the standard test images in the setting of a Gaussian noise with \u03c3 = 100. We find that LBNs overall produce a substantial improvement over the state-ofthe-art methods (Appendix A.2 shows state-of-the-art results for other settings). The two images where BM3D sets the state-of-the-art have highly repetitive structure which favors its approach. Figure 6 shows that the LBN produces arguably better qualitative results even on those images. In particular the images are much sharper and more closely resemble natural images. In the context of lower noise, the LBN also achieve state-of-the-art results with an average test PSNR of 30.70 dB at \u03c3 = 25 (with BM3D at 30.4 dB) but it learns a deterministic mapping. This makes sense because there is little uncertainty over the clean images. At \u03c3 = 100, we find through visual inspection that the model can generate a distribution of alternatives (Videos available at http: //ynd.github.io/lbn_denoising_demo/). In these videos we see better variety in the distribution with K = 10 compared to K = 1. However, as we can also see in Figure 6 the model does not capture enough about the distribution to produce very plausible denoised images - there is still much averaging. This suggests that estimating the expectation over outcomes with Monte Carlo samples is not a good enough estimator for highly multimodal distributions. An interesting direction would be to improve our estimate using importance sampling. We believe this is a good direction to further improve denoising results. Alternatively, one could forgo maximum likelihood\ntraining of the model and use an adversarial objective instead (Goodfellow et al., 2014). Nonetheless - even if the training method has to be improved - our results confirm the LBN model improves upon traditional conditional belief net models."}, {"heading": "7 CONCLUSION", "text": "This work introduces linearizing belief nets (LBN), a new class of conditional belief network. As a belief network, a LBN relies on stochastic binary units but is well suited to model continuous distributions. Contrary to prior work, LBN stochastic units act as gaters to a deep linear network. This multiplicative interaction between stochastic and deterministic units allows better cooperation between the two parts of the network compared to prior additive strategies. Moreover, LBN linear units propagate continuous information efficiently and combined with stochastic binary gating acts as skip-connections that prevent gradient diffusion and help learning. Our experiments confirm these advantages. Our facial expression generation experiments result in better generalization and faster convergence for LBN compared to alternative belief networks. Our image denoising experiments also report better signal-to-noise ratio than previous work. Overall, this work proposes a generic model that can be relevant to various inverse problems. In the future, we want to investigate alternatives to our current Monte Carlo maximum likelihood training. In particular, we consider adversarial training or importance sampling to model distribution with more modes efficiently."}, {"heading": "ACKNOWLEDGEMENTS", "text": "The authors would like to thank Marc\u2019Aurelio Ranzato for insightful comments and discussions."}, {"heading": "A ADDITIONAL RESULTS", "text": "A.1 LBNS ON NATURAL IMAGE PATCHES (FROM SECTION 6.2.1)\nA.2 LBNS ON FULL NATURAL IMAGES (FROM SECTION 6.2.2)\nA.3 LINKS BETWEEN LBNS AND RELU NETWORKS\nReLU networks can be seen as a particular deterministic subset of the LBN family of networks. The function of a ReLU network is given by f(x) = Vmax(0,Wx) = V((Wx > 0) \u25e6Wx). This is the form of a LBN with gating units sampled from a Dirac delta distribution h \u223c \u03b4(g(Wx)) where the gating function g(Wx) = Wx > 0. Altogether we have f(x) = V(h \u25e6Wx) which is the form of a linearizing network.\nWe can relax the determinism of the gating units by using a Bernoulli distribution with g(Wx) = \u03c3(Wx + b). This function is very close to that of the ReLU because the sigmoid is a relaxation of the threshold function. Interestingly, by performing MAP inference at test time we recover the ReLU since \u03c3(Wx + b) > 0.5 = Wx + b > 0. We have found experimentally that this simple model produces similar results to the ReLU. This link gives some intuition as to why the LBN model is more powerful than simple ReLUs. The LBNs can have more powerful gating functions while the gating function of ReLus is fixed and much less powerful (it is a simple threshold)."}], "references": [{"title": "Estimating or propagating gradients through stochastic neurons for conditional computation", "author": ["Bengio", "Yoshua", "L\u00e9onard", "Nicholas", "Courville", "Aaron"], "venue": "arXiv preprint arXiv:1308.3432,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "Deep generative stochastic networks trainable by backprop", "author": ["Bengio", "Yoshua", "Thibodeau-Laufer", "Eric", "Alain", "Guillaume", "Yosinski", "Jason"], "venue": "arXiv preprint arXiv:1306.1091,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "Generalized denoising auto-encoders as generative models", "author": ["Bengio", "Yoshua", "Yao", "Li", "Alain", "Guillaume", "Vincent", "Pascal"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "A theoretical analysis of feature pooling in visual recognition", "author": ["Boureau", "Y-Lan", "Ponce", "Jean", "LeCun", "Yann"], "venue": "In Proceedings of the 27th International Conference on Machine Learning", "citeRegEx": "Boureau et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Boureau et al\\.", "year": 2010}, {"title": "Image denoising: Can plain neural networks compete with bm3d", "author": ["Burger", "Harold C", "Schuler", "Christian J", "Harmeling", "Stefan"], "venue": "In Computer Vision and Pattern Recognition (CVPR),", "citeRegEx": "Burger et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Burger et al\\.", "year": 2012}, {"title": "A spike and slab restricted boltzmann machine", "author": ["Courville", "Aaron C", "Bergstra", "James", "Bengio", "Yoshua"], "venue": "In International Conference on Artificial Intelligence and Statistics,", "citeRegEx": "Courville et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Courville et al\\.", "year": 2011}, {"title": "Bm3d image denoising with shape-adaptive principal component analysis", "author": ["Dabov", "Kostadin", "Foi", "Alessandro", "Katkovnik", "Vladimir", "Egiazarian", "Karen"], "venue": "In SPARS\u201909-Signal Processing with Adaptive Sparse Structured Representations,", "citeRegEx": "Dabov et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Dabov et al\\.", "year": 2009}, {"title": "Image denoising via sparse and redundant representations over learned dictionaries", "author": ["Elad", "Michael", "Aharon", "Michal"], "venue": "Image Processing, IEEE Transactions on,", "citeRegEx": "Elad et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Elad et al\\.", "year": 2006}, {"title": "Understanding the difficulty of training deep feedforward neural networks", "author": ["Glorot", "Xavier", "Bengio", "Yoshua"], "venue": "In International conference on artificial intelligence and statistics,", "citeRegEx": "Glorot et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Glorot et al\\.", "year": 2010}, {"title": "Generative adversarial nets", "author": ["Goodfellow", "Ian", "Pouget-Abadie", "Jean", "Mirza", "Mehdi", "Xu", "Bing", "Warde-Farley", "David", "Ozair", "Sherjil", "Courville", "Aaron", "Bengio", "Yoshua"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Goodfellow et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2014}, {"title": "Learning to linearize under uncertainty", "author": ["Goroshin", "Ross", "Mathieu", "Micha\u00ebl", "LeCun", "Yann"], "venue": "CoRR, abs/1506.03011,", "citeRegEx": "Goroshin et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Goroshin et al\\.", "year": 2015}, {"title": "Gradient flow in recurrent nets: the difficulty of learning long-term dependencies", "author": ["Hochreiter", "Sepp", "Bengio", "Yoshua", "Frasconi", "Paolo", "Schmidhuber", "Jrgen"], "venue": "A Field Guide to Dynamical Recurrent Neural Networks,", "citeRegEx": "Hochreiter et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Hochreiter et al\\.", "year": 2001}, {"title": "Adam: A method for stochastic optimization", "author": ["Kingma", "Diederik P", "Ba", "Jimmy"], "venue": "CoRR, abs/1412.6980,", "citeRegEx": "Kingma et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Kingma et al\\.", "year": 2014}, {"title": "Online learning for matrix factorization and sparse coding", "author": ["Mairal", "Julien", "Bach", "Francis", "Ponce", "Jean", "Sapiro", "Guillermo"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Mairal et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Mairal et al\\.", "year": 2010}, {"title": "A Wavelet Tour of Signal Processing, Third Edition: The Sparse Way", "author": ["Mallat", "Stephane"], "venue": null, "citeRegEx": "Mallat and Stephane.,? \\Q2008\\E", "shortCiteRegEx": "Mallat and Stephane.", "year": 2008}, {"title": "Connectionist learning of belief networks", "author": ["Neal", "Radford M"], "venue": "Artificial intelligence,", "citeRegEx": "Neal and M.,? \\Q1992\\E", "shortCiteRegEx": "Neal and M.", "year": 1992}, {"title": "Image denoising using scale mixtures of gaussians in the wavelet domain", "author": ["Portilla", "Javier", "Strela", "Vasily", "Wainwright", "Martin J", "Simoncelli", "Eero P"], "venue": "Image Processing, IEEE Transactions on,", "citeRegEx": "Portilla et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Portilla et al\\.", "year": 2003}, {"title": "Techniques for learning binary stochastic feedforward neural networks", "author": ["Raiko", "Tapani", "Berglund", "Mathias", "Alain", "Guillaume", "Dinh", "Laurent"], "venue": "arXiv preprint arXiv:1406.2989,", "citeRegEx": "Raiko et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Raiko et al\\.", "year": 2014}, {"title": "Fields of experts: A framework for learning image priors", "author": ["Roth", "Stefan", "Black", "Michael J"], "venue": "In Computer Vision and Pattern Recognition,", "citeRegEx": "Roth et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Roth et al\\.", "year": 2005}, {"title": "Recursive bayesian estimation using gaussian sums", "author": ["H.W. Sorenson", "D.L. Alspach"], "venue": null, "citeRegEx": "Sorenson and Alspach,? \\Q1971\\E", "shortCiteRegEx": "Sorenson and Alspach", "year": 1971}, {"title": "Unsupervised learning of video representations using lstms", "author": ["Srivastava", "Nitish", "Mansimov", "Elman", "Salakhutdinov", "Ruslan"], "venue": "arXiv preprint arXiv:1502.04681,", "citeRegEx": "Srivastava et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2015}, {"title": "The toronto face database", "author": ["Susskind", "Joshua", "Anderson", "Adam", "Hinton", "Geoffrey"], "venue": null, "citeRegEx": "Susskind et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Susskind et al\\.", "year": 2010}, {"title": "Learning stochastic feedforward neural networks", "author": ["Tang", "Yichuan", "Salakhutdinov", "Ruslan R"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Tang et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Tang et al\\.", "year": 2013}], "referenceMentions": [{"referenceID": 20, "context": "predicting the next frame of video (Srivastava et al., 2015) or learning unsupervised models with regularized autoencoders (Bengio et al.", "startOffset": 35, "endOffset": 60}, {"referenceID": 0, "context": ", 2015) or learning unsupervised models with regularized autoencoders (Bengio et al., 2013b). Stochastic feed-forward neural networks (Neal, 1992) (SFNN) solve this problem with the introduction of stochastic latent variables to the network. The model can be seen as a mixture of neural networks where each configuration of stochastic variables defines a different neural network. This is efficiently achieved by sharing most of the parameters between configurations. While conventional neural networks fit a single conditional Gaussian to the data, the stochastic latent variables lead to fitting a mixture of conditional Gaussians. This a powerful extension since mixture of Gaussians are universal approximators of distributions (Sorenson & Alspach, 1971). The network can model multi-modal distributions by learning a different network for each mode. Neal (1992) proposes training Sigmoid Belief Networks (SBN) which have only binary stochastic units.", "startOffset": 71, "endOffset": 867}, {"referenceID": 11, "context": "These linear units can be thought of as multiplicative skip connections that allows the gradient to flow without diffusion through deep networks (Hochreiter et al., 2001).", "startOffset": 145, "endOffset": 170}, {"referenceID": 16, "context": "Raiko et al. (2014) suggested to avoid training the latent units, relying only on layers of deterministic units to shape the random distribution.", "startOffset": 0, "endOffset": 20}, {"referenceID": 3, "context": "Adding such pooling interactions to the networks is known to improve the generalization performance (Boureau et al., 2010; Goodfellow et al., 2013).", "startOffset": 100, "endOffset": 147}, {"referenceID": 9, "context": "Different objectives can be employed to train their parameters: data likelihood, variational bounds (Tang & Salakhutdinov, 2013), or a distiguishibility criteria (Goodfellow et al., 2014).", "startOffset": 162, "endOffset": 187}, {"referenceID": 11, "context": "The combination of the linear skipconnections with binary latent variable helps learning as it prevents gradient diffusion (Hochreiter et al., 2001).", "startOffset": 123, "endOffset": 148}, {"referenceID": 0, "context": "Bengio et al. (2013a) proposed a solution based on reinforcement learning, while Tang & Salakhutdinov (2013) explored a variational learning approach.", "startOffset": 0, "endOffset": 22}, {"referenceID": 0, "context": "Bengio et al. (2013a) proposed a solution based on reinforcement learning, while Tang & Salakhutdinov (2013) explored a variational learning approach.", "startOffset": 0, "endOffset": 109}, {"referenceID": 0, "context": "Bengio et al. (2013a) proposed a solution based on reinforcement learning, while Tang & Salakhutdinov (2013) explored a variational learning approach. These solutions unfortunately results in high-variance gradient estimates. We use a lower variance estimator introduced recently by Raiko et al. (2014). This approach decomposes the stochastic units into", "startOffset": 0, "endOffset": 303}, {"referenceID": 17, "context": "Noting that the term has zero mean, that is E[g] = g(Wx), Raiko et al. (2014) finds this method incurs only a small bias and works well in practice.", "startOffset": 58, "endOffset": 78}, {"referenceID": 5, "context": "The linearizing net has connections to the spike and slab RBM (Courville et al., 2011) which has both Gaussian and Bernoulli units that interact multiplicatively.", "startOffset": 62, "endOffset": 86}, {"referenceID": 15, "context": "The difficulty of training SFNNs is discussed by Raiko et al. (2014). This work finds that better performance can be achieved by training only the deterministic units and setting the probability of activation of the Bernoulli units to p = 0.", "startOffset": 49, "endOffset": 69}, {"referenceID": 9, "context": "Goroshin et al. (2015) explores an alternative strategy and forgo full probabilistic modeling to focus on MAP inference.", "startOffset": 0, "endOffset": 23}, {"referenceID": 21, "context": "The pictures are taken from the Toronto Face Dataset (TFD) (Susskind et al., 2010) which contains 4,000 images of 900 subjects which were asked to display 7 different emotions.", "startOffset": 59, "endOffset": 82}, {"referenceID": 17, "context": "This section compares different approaches to stochastic feed-forward neural networks on the task of predicting the distribution of facial expressions of a person given a picture with a neutral expression as in Tang & Salakhutdinov (2013) and Raiko et al. (2014). The input x is the average face of the person and we have a distribution of pictures ysad, .", "startOffset": 243, "endOffset": 263}, {"referenceID": 17, "context": "This section compares different approaches to stochastic feed-forward neural networks on the task of predicting the distribution of facial expressions of a person given a picture with a neutral expression as in Tang & Salakhutdinov (2013) and Raiko et al. (2014). The input x is the average face of the person and we have a distribution of pictures ysad, . . . ,yangry of that person with 7 different emotions. The goal is to be able to produce the full set of facial expressions for a face we have not seen before. The pictures are taken from the Toronto Face Dataset (TFD) (Susskind et al., 2010) which contains 4,000 images of 900 subjects which were asked to display 7 different emotions. Following the setting of Tang & Salakhutdinov (2013), we randomly selected 95 subjects with 1,318 images for training, 5 subjects with 68 images for validation and 24 individuals totaling 343 images were used as a test set.", "startOffset": 243, "endOffset": 746}, {"referenceID": 17, "context": "This section compares different approaches to stochastic feed-forward neural networks on the task of predicting the distribution of facial expressions of a person given a picture with a neutral expression as in Tang & Salakhutdinov (2013) and Raiko et al. (2014). The input x is the average face of the person and we have a distribution of pictures ysad, . . . ,yangry of that person with 7 different emotions. The goal is to be able to produce the full set of facial expressions for a face we have not seen before. The pictures are taken from the Toronto Face Dataset (TFD) (Susskind et al., 2010) which contains 4,000 images of 900 subjects which were asked to display 7 different emotions. Following the setting of Tang & Salakhutdinov (2013), we randomly selected 95 subjects with 1,318 images for training, 5 subjects with 68 images for validation and 24 individuals totaling 343 images were used as a test set. This reproduces the setting from Tang & Salakhutdinov (2013) as closely as possible.", "startOffset": 243, "endOffset": 978}, {"referenceID": 17, "context": "This section compares different approaches to stochastic feed-forward neural networks on the task of predicting the distribution of facial expressions of a person given a picture with a neutral expression as in Tang & Salakhutdinov (2013) and Raiko et al. (2014). The input x is the average face of the person and we have a distribution of pictures ysad, . . . ,yangry of that person with 7 different emotions. The goal is to be able to produce the full set of facial expressions for a face we have not seen before. The pictures are taken from the Toronto Face Dataset (TFD) (Susskind et al., 2010) which contains 4,000 images of 900 subjects which were asked to display 7 different emotions. Following the setting of Tang & Salakhutdinov (2013), we randomly selected 95 subjects with 1,318 images for training, 5 subjects with 68 images for validation and 24 individuals totaling 343 images were used as a test set. This reproduces the setting from Tang & Salakhutdinov (2013) as closely as possible. The networks were trained for 200 iterations on the training set with up to k = 200 Monte Carlo samples to estimate the expectation over outcomes. We consider various methods including RSFNNs Raiko et al. (2014), mixtures of factor analysers (MFA), conditional Gaussian RBMs (C-GRBM) and SFNNs.", "startOffset": 243, "endOffset": 1214}, {"referenceID": 17, "context": "This section compares different approaches to stochastic feed-forward neural networks on the task of predicting the distribution of facial expressions of a person given a picture with a neutral expression as in Tang & Salakhutdinov (2013) and Raiko et al. (2014). The input x is the average face of the person and we have a distribution of pictures ysad, . . . ,yangry of that person with 7 different emotions. The goal is to be able to produce the full set of facial expressions for a face we have not seen before. The pictures are taken from the Toronto Face Dataset (TFD) (Susskind et al., 2010) which contains 4,000 images of 900 subjects which were asked to display 7 different emotions. Following the setting of Tang & Salakhutdinov (2013), we randomly selected 95 subjects with 1,318 images for training, 5 subjects with 68 images for validation and 24 individuals totaling 343 images were used as a test set. This reproduces the setting from Tang & Salakhutdinov (2013) as closely as possible. The networks were trained for 200 iterations on the training set with up to k = 200 Monte Carlo samples to estimate the expectation over outcomes. We consider various methods including RSFNNs Raiko et al. (2014), mixtures of factor analysers (MFA), conditional Gaussian RBMs (C-GRBM) and SFNNs. The stochastic networks are trained with 4 layers with either 128 or 256 deterministic hidden units. ReLU activations are used for the deterministic units as they were found to be good for continuous problems. The 2 intermediary layers are augmented with either 32 or 64 random Bernoulli units. The number of hidden units in the LBNs was chosen from {128, 256} with the number of hidden layers fixed to 1. The gating network has 2 hidden layers with {64, 128} hidden units. The hidden units of the gating network are also sampled under a Bernoulli distribution. This allows the gating pattern h to be itself to be multi-modal and results in better results. Table 1 reports our results for RSFNN and LBN as well as the results from Tang & Salakhutdinov (2013) for the other techniques.", "startOffset": 243, "endOffset": 2056}, {"referenceID": 6, "context": "Previous approaches such as the state-of-the-art BM3D (Dabov et al., 2009) method ignore this difficulty and simply predict the conditional average.", "startOffset": 54, "endOffset": 74}, {"referenceID": 0, "context": "Bengio et al. (2013c) showed that under mild conditions the denoising models learn the transition operator of a Markov chain whose stationary distribution is the data distribution.", "startOffset": 0, "endOffset": 22}, {"referenceID": 6, "context": "The state-of-the art method for denoising natural images is BM3D (Dabov et al., 2009).", "startOffset": 65, "endOffset": 85}, {"referenceID": 4, "context": "Neural methods (Burger et al., 2012) were state-of-the-art but they were surpassed by later versions of BM3D.", "startOffset": 15, "endOffset": 36}, {"referenceID": 16, "context": "We compare our algorithm to Gaussian Scale Mixture (GSM) (Portilla et al., 2003), Field of Experts (FoE) (Roth & Black, 2005), K-SVD (Elad & Aharon, 2006), BM3D (Dabov et al.", "startOffset": 57, "endOffset": 80}, {"referenceID": 6, "context": ", 2003), Field of Experts (FoE) (Roth & Black, 2005), K-SVD (Elad & Aharon, 2006), BM3D (Dabov et al., 2009) and Learned Simultaneous Sparse Coding (LSSC) (Mairal et al.", "startOffset": 88, "endOffset": 108}, {"referenceID": 13, "context": ", 2009) and Learned Simultaneous Sparse Coding (LSSC) (Mairal et al., 2010) on the standard 11 test images they used.", "startOffset": 54, "endOffset": 75}, {"referenceID": 9, "context": "training of the model and use an adversarial objective instead (Goodfellow et al., 2014).", "startOffset": 63, "endOffset": 88}], "year": 2016, "abstractText": "Conditional belief networks introduce stochastic binary variables in neural networks. Contrary to a classical neural network, a belief network can predict more than the expected value of the output Y given the inputX . It can predict a distribution of outputs Y which is useful when an input can admit multiple outputs whose average is not necessarily a valid answer. Such networks are particularly relevant to inverse problems such as image prediction for denoising, or text to speech. However, traditional sigmoid belief networks are hard to train and are not suited to continuous problems. This work introduces a new family of networks called linearizing belief nets or LBNs. A LBN decomposes into a deep linear network where each linear unit can be turned on or off by non-deterministic binary latent units. It is a universal approximator of real-valued conditional distributions and can be trained using gradient descent. Moreover, the linear pathways efficiently propagate continuous information and they act as multiplicative skip-connections that help optimization by removing gradient diffusion. This yields a model which trains efficiently and improves the state-of-the-art on image denoising and facial expression generation with the Toronto faces dataset.", "creator": "LaTeX with hyperref package"}}}