{"id": "1512.00242", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Dec-2015", "title": "Towards Dropout Training for Convolutional Neural Networks", "abstract": "commercially, diversity has seen increasing use in information learning. for deep dynamic neural networks, testing is known significantly cope well via fully - connected relationships. however, specific efforts in relational and collaborative layers ; still not comprehensive. this paper demonstrates that max - pooling modeling is safely and remotely picking various processes on a multinomial distribution. training time. through light of this results, systems pioneered employing our proposed probabilistic weighted pooling, substitution of strictly used max - proportion, including act backward model checks at test time. substantial evidence yield satisfactory definition of probabilistic weighted pooling. respondents did did show that desired effect of polynomial dropout but however trivial, highlighting the gradually reduced utility towards over - fitting validation to the convolutional method. elaborately designing dropout smoothing methodology in 250 - 150 @ fully - connected layers, techniques demand state - of - the - arc validation on nets, and very efficient results using cifar - 3000 @ cifar - 100, relative reality engineering disciplines comprising data validation. hence, systematically compare max - fraction coding and stochastic pooling, both indices first introduce metric relations over specific distributions at measurement contexts.", "histories": [["v1", "Tue, 1 Dec 2015 12:46:11 GMT  (802kb)", "http://arxiv.org/abs/1512.00242v1", "This paper has been published in Neural Networks,this http URL"]], "COMMENTS": "This paper has been published in Neural Networks,this http URL", "reviews": [], "SUBJECTS": "cs.LG cs.CV cs.NE", "authors": ["haibing wu", "xiaodong gu"], "accepted": false, "id": "1512.00242"}, "pdf": {"name": "1512.00242.pdf", "metadata": {"source": "CRF", "title": "Towards Dropout Training for Convolutional Neural Networks", "authors": ["Haibing Wu", "Xiaodong Gu"], "emails": ["haibingwu13@fudan.edu.cn", "xdgu@fudan.edu.cn"], "sections": [{"heading": null, "text": "Recently, dropout has seen increasing use in deep learning. For deep convolutional neural networks, dropout is known to work well in fully-connected layers. However, its effect in convolutional and pooling layers is still not clear. This paper demonstrates that max-pooling dropout is equivalent to randomly picking activation based on a multinomial distribution at training time. In light of this insight, we advocate employing our proposed probabilistic weighted pooling, instead of commonly used max-pooling, to act as model averaging at test time. Empirical evidence validates the superiority of probabilistic weighted pooling. We also empirically show that the effect of convolutional dropout is not trivial, despite the dramatically reduced possibility of over-fitting due to the convolutional architecture. Elaborately designing dropout training simultaneously in max-pooling and fully-connected layers, we achieve state-of-the-art performance on MNIST, and very competitive results on CIFAR-10 and CIFAR-100, relative to other approaches without data augmentation. Finally, we compare max-pooling dropout and stochastic pooling, both of which introduce stochasticity based on multinomial distributions at pooling stage. Key words: Deep learning; Convolutional neural networks; Max-pooling dropout"}, {"heading": "1 Introduction", "text": "Deep convolutional neural networks (CNNs) have recently told many success stories in visual recognition tasks and are now record holders on many challenging datasets. A standard CNN consists of alternating convolutional and pooling layers, with fully-connected layers on top. Compared to regular feed-forward networks with similarly-sized layers, CNNs have much fewer connections and parameters due to the local-connectivity and shared-filter architecture in convolutional layers, so they are far less prone to over-fitting. Another nice property of CNNs is that pooling operation provides a form of translation invariance and thus benefits generalization. Despite these attractive qualities and despite the fact that CNNs are much easier to train than other regular, deep, feed-forward neural networks, big CNNs with millions or billions of parameters still easily overfit relatively small training data.\nDropout (Hinton et al., 2012) is a recently proposed regularizer to fight against over-fitting. It is a regularization method that stochastically sets to zero the activations of hidden units for each training case at training time. This breaks up co-adaptions of feature detectors since the dropped-out units cannot influence other retained units. Another way to interpret dropout is that it yields a very efficient form of model averaging where the number of trained models is exponential in that of units, and these models share the same parameters. Dropout has also inspired other stochastic model averaging methods such as stochastic pooling (Zeiler & Fergus, 2013) and DropConnect (Wan et al., 2013).\nAlthough dropout is known to work well in fully-connected layers of convolutional neural nets (Hinton et al., 2012; Wan et al., 2013; Krizhevsky, Sutskever, & Hinton, 2012), its effect in convolutional and pooling layers is, however, not well studied. This paper shows that using max-pooling dropout at training time is equivalent to sampling activation based on a multinomial distribution, and the distribution has a tunable parameter p (the retaining probability). In light of this, probabilistic weighted pooling is proposed and employed at test time to efficiently average all possibly max-pooling dropout\ntrained networks. Our empirical evidence confirms the superiority of probabilistic weighted pooling over max-pooling. Like fully-connected dropout, the number of possible max-pooling dropout models also grows exponentially with the increase of the number of hidden units that are fed into pooling layers, but decreases with the increase of pooling region\u2019s size. We also empirically show that the effect of convolutional dropout is not trivial, despite the dramatically reduced possibility of over-fitting due to the convolutional architecture. Carefully designing dropout training simultaneously in max-pooling and fully-connected layers, we report state-of-the-art results on MNIST, and very competitive results on CIFAR-10 and CIFAR-100, in comparisons with other approaches without data augmentation.\nAs both stochastic pooling (Zeiler & Fergus, 2013) and max-pooling dropout randomly sample activation based on multinomial distributions at pooling stage, it becomes interesting to compare their performance. Experimental results show that stochastic pooling performs between max-pooling dropout with different retaining probabilities, yet max-pooling dropout with typical retaining probabilities often outperforms stochastic pooling by a large margin.\nIn this paper, dropout on the input to max-pooling layers is also called max-pooling dropout for brevity. Similarly, dropout on the input to convolutional (or fully-connected) layers is called convolutional (or fully-connected) dropout."}, {"heading": "2 Review of Dropout Training for Convolutional Neural Networks", "text": "CNNs have far been known to produce remarkable performance on MNIST (LeCun et al., 1998), but they, together with other neural network models, fell out of favor in practical machine learning as simpler models such as SVMs became the popular choices in the 1990s and 2000s. With deep learning renaissance (Hinton & Salakhutdinov, 2006; Ciresan, Meier, & Schmidhuber, 2012; Bengio, Courville, & Vincent, 2013), CNNs regained attentions from machine learning and computer vision community. Like other deep models, many issues can arise with deep CNNs if they are naively trained. Two main issues are computation time and over-fitting. Regarding the former problem, GPUs help a lot by speeding up computation significantly.\nTo combat over-fitting, a wide range of regularization techniques have been developed. A simple but effective method is adding l2 penalty to the network weights. Other common forms of regularization include early stopping, Bayesian fitting (Mackay, 1995), weight elimination (Ledoux & Talagrand, 1991) and data augmentation. In practice, employing these techniques when training big neural networks provides better test performances than smaller networks trained without any regularization.\nDropout is a new regularization technique that has been more recently employed in deep learning. It is similar to bagging (Breiman, 1996), in which a set of models are trained on different subsets of the same training data. At test time, different models\u2019 predictions are averaged together. In traditional bagging, each model has independent parameters, and all members would be trained explicitly. In the case of dropout training, there are exponentially many possibly trained models, and these models share the same parameters, but not all of them are explicitly trained. Actually, the number of explicitly trained models is not larger than me, where m is the number of training example, and e is the training epochs. This is much smaller than the number of possibly trained models, n2 ( n is number of hidden units in a feed-forward neural networks). Therefore, a vast majority of models are not explicitly trained at training time.\nAt test time, bagging makes a prediction by averaging together all the sub-models\u2019 predictions with the arithmetic mean, but it is not obvious how to do so with the exponentially many models trained by dropout. Fortunately, the average prediction of exponentially many sub-models can be approximately computed simply by running the whole network with the weights scaled by retaining probability. The approximation has been mathematically characterized for linear and sigmoidal networks (Baldi & Sadowski, 2014; Wager el al., 2013); for piecewise linear networks such as rectified linear networks, Warde et al. (2014) empirically showed that weight-scaling approximation is a remarkable and accurate surrogate for the true geometric mean, by comparing against the true average in small enough networks\nthat the exact computation is tractable.\nSince dropout was thought to be far less advantageous in convolutional layers, pioneering work by Hinton et al. (2012) only applied it to fully-connected layers. It was the reason they provided that the convolutional shared-filter architecture was a drastic reduction in the number of parameters and thus reduced its possibility to overfit in convolutional layers. Wonderful work by Krizhevsky et al. (2012) trained a very big convolutional neural net, which had 60 million parameters, to classify 1.2 million high-resolution images of ImageNet into the 1000 different categories. Two primary methods were used to reduce over-fitting in their experiments. The first one was data augmentation, an easiest and most commonly used approach to reduce over-fitting for image data. Dropout was exactly the second one. Also, it was only used in fully-connected layers. In the ILSVRC-2012 competition, their deep convolutional neural net yielded top-5 test error rate of 15.3%, far better than the second-best entry, 26.2%, achieved by shallow learning with hand-craft feature engineering. This was considered as a breakthrough in computer vision. From then on, the community believes that deep convolutional nets not only perform best on simple hand-written digits, but also really work on complex natural images.\nCompared to original work on dropout, (Srivastava et al., 2014) provided more exhaustive experimental results. In their experiments on CIFAR-10, using dropout in fully-connected layers reduced the test error from 15.60% to 14.32%. Adding dropout to convolutional layers further reduced the error to 12.61%, revealing that applying dropout to convolutional layers aided generalization. Similar performance gains can be observed on CIFAR-100 and SVHN. Still, they did not explore max-pooling dropout.\nStochastic pooling (Zeiler & Fergus, 2013) is a dropout-inspired regularization method. The authors replaced the conventional deterministic pooling operations with a stochastic procedure. Instead of always capturing the strongest activity within each pooling region as max-pooling does, stochastic pooling randomly picks the activations according to a multinomial distribution. At test time, probability weighting is used as an estimate to the average over all possible models. Interestingly, stochastic pooling resembles the case of using dropout in max-pooling layers, so it is worth comparing them.\nDropConnect (Wan et al., 2013) is a natural generalization of dropout for regularizing large feed-forward nets. Instead of setting to zero the activations, it sets a randomly picked subset of weights within the network to zero with probability 1 \u2013 p. In other words, the fully-connected layer with DropConnect becomes a sparsely connected layer in which the connections are chosen stochastically during training. Each unit thus only receives input from a random subset of units in the previous layer. DropConnect resembles dropout as it involves stochasticity within the model, but differs in that the stochasticity is on the weights, rather than the output vectors of a layer. Results on several visual recognition datasets showed that DropConnect often outperformed dropout.\nMaxout network (Goodfellow et al., 2013) is another model inspired by dropout. The maxout unit picks the maximum value within a group of linear pieces as its activation. This type of nonlinearity is a generalization of rectified activation function and is capable of approximating arbitrary convex function. Combining with dropout, maxout networks have been shown to achieve best results on MNIST, CIFAR-10, CIFAR-100 and SVHN. However, the authors did not train maxout networks without dropout. Besides, they did not train the rectified counterparts with dropout and directly compare it with maxout networks. Therefore, it was not clear that which factor contributed to such remarkable results."}, {"heading": "3 Max-Pooling Dropout and Convolutional Dropout", "text": "We now demonstrate that max-pooling dropout is equivalent to sampling activation according to a multinomial distribution at training time. Basing on this interpretation, we propose to use probabilistic weighted pooling at test time. We also describe convolutional dropout."}, {"heading": "3.1 Max-Pooling Dropout", "text": "Consider a standard CNN composed of alternating convolutional and pooling layers, with\n)(l\nia\nfully-connected layers on top. On each presentation of a training example, if layer l is followed by a pooling layer, the forward propagation without dropout can be described as\n)()()()( 1 )1( ),,...,,...,( lj l n l i ll j Riaaapoola   . (1)\nHere )(l jR is pooling region j at layer l and is the activity of each neuron within it. || )(l jRn  is the number of units in )(l jR . Pool() denotes the pooling function. Pooling operation provides a form of spatial transformation invariance as well as reduces the computational complexity for upper layers. An ideal pooling method is expected to preserve task-related information while discarding irrelevant image details. Two popular choices are average- and max-pooling. Average-pooling takes all activations in a pooling region into consideration with equal contributions. This may downplay high activations as many low activations are averagely included. Max-pooling only captures the strongest activation, and disregards all other units in the pooling region. We now show that employing dropout in max-pooling layers avoids both disadvantages by introducing stochasticity."}, {"heading": "3.1.1 Max-Pooling Dropout at Training Time", "text": "With dropout, the forward propagation becomes\n,~\u02c6 )()()( lll ama  (2)\n.),\u02c6,...,\u02c6,...,\u02c6( )()()()(1 )1( l j l n l i ll j Riaaapoola   (3)\nHere  denotes element wise product and )(lm is a binary mask with each element )(l\nim drawn\nindependently from a Bernoulli distribution. This mask is multiplied with activations )(la in a pooling region at layer l to produce dropout-modified activations )(\u02c6 la . The modified activations are then passed to pooling layers.\nFig. 1 presents a concrete example to illustrate the effect of dropout in max-pooling layers. Clearly, without dropout, the strongest activation in a pooling regions is always selected as the pooled activation. With dropout, it is not necessary that the strongest activation being the output. Therefore, max-pooling at training time becomes a stochastic procedure.\nTo formulate such stochasticity, suppose the activations ),...,,( )()(2 )( 1 l n ll aaa in each pooling region j\nare reordered in non-decreasing order, i.e., )()( 2 )( 1 ...0 l n ll aaa  .1 With dropout, each unit in the pooling region could be possibly set to zero with probability of q (q = 1 \u2013 p is the dropout probability, and p is the retaining probability). As a result, )(l ia will be selected as the pooled activation on condition that (1) )()( 2 )( 1 ,...,, l n l i l i aaa   are dropped out, and (2) )(l ia is retained. This event occurs with probability of pi according to probability theory:\n1 We use rectified linear unit as the activation function, so activations in each pooling region are\nnon-negative. Sigmoidal and tanh nonlinearities are not adopted due to gradient vanishing effect.\n).,...,2,1(,)Pr( )()1( nipqpaa ini l i l j   (4)\nA special event occurring with probability of )( 00 nqpp  is that all the units in a pooling region is dropped out, and the pooled output becomes )0( )(0 )( 0  ll aa . Therefore, performing max-pooling over the dropout-modified pooling region is exactly sampling from the following multinomial distribution to select an index i, then the pooled activation is simply )(l\nia :\n).,...,,,(~where, 210 )()1( n l i l j pppplMultinomiaiaa   (5)\nLet s be the size of a feature map at layer l (with r feature maps), and t be the size of pooling regions. The number of pooling region is therefore trs for non-overlapping pooling. Each pooling region provides t+1 choices of the indices, then the number of possibly trained models C at layer l is\n    .)(11 rsrsttrs tbttC  (6) So the number of possibly max-pooling dropout trained models is exponential in the number of units that are fed into max-pooling layers, and the base b(t) )2)1)(1(  t ttb depends on the size of pooling regions. Obviously, with the increase of the size of pooling regions, the base b(t) decreases, and the number of possibly trained models becomes smaller. Note that the number of possibly fully-connected dropout trained models is also exponential in the number of units that are fed into fully-connected layers, but with 2 as the base."}, {"heading": "3.1.2 Probabilistic Weighted Pooling at Test Time", "text": "Using dropout in fully-connected layers during training, the whole network containing all the hidden units should be used at test time, but with their outgoing weights halved (Hinton et al. 2012), or with their activations halved. Using max-pooling dropout during training, one might intuitively pick as output the strongest activation scaled down by the retaining probability:\n),...,,...,max( )()()(1 )1( l n l i ll j aaapa   . (7)\nWe call this pooling scheme scaled max-pooling.\nInstead we propose to use probabilistic weighted pooling to efficiently get a more accurate approximation of averaging all possibly trained dropout networks. In this pooling scheme, the pooled activity is linear weighted summation over activations in each region:\n. 1\n)(\n0 )()1(  \n  n\ni\nl\nii\nn\ni\nl\nii\nl\nj apapa (8)\nHere ip is exactly the probability calculated by Eqn. (4). If a unit in a pooling region is selected as output with probability ip during training, the activation of that unit is weighted by ip at test time. This ensures that the pooled output at test time is the same with the expected output under the multinomial distribution used to select units at training time.\nThis type of probabilistic weighted pooling can be interpreted as a form of model averaging where each selection of index i corresponds to a different model. At training time, sampling from multinomial distribution to select a new index produces a new model for each presentation of each training case. The number of possible models is exponential in the number of units that are fed into max-pooling layers. At test time, using probabilistic weighting pooling instead of sampling, we effectively get an approximation of averaging over all of these possible models without instantiating them. Empirical evidence will confirm that probabilistic weighted pooling is a more accurate approximation of averaging all possible dropout models than scaled max-pooling."}, {"heading": "3.2 Convolutional Dropout", "text": "If layer l is followed by a convolutional layer, the forward propagation with dropout is formulated as\n)(Bernoulli~)()( pim lk , (9)\n,\u02c6 )()()( lk l k l k maa  (10)\n \n \n)(\n1\n)()1()1( ),(conv\nln\nk\nl\nk\nl\nj\nl\nj aWz , (11)\n)( )1()1(   lj l j zfa . (12)\nHere )(l ka denotes the activations of feature map k (k=1,2,\u2026,n (l)) at layer l. The mask matrix\n)(l km consists of independent Bernoulli variables )( )( im lk . This mask is sampled and multiplied with activations in k-th feature map at layer l, to produce dropout-modified activations )(\u02c6 l ka . These modified activations are convolved with filter )1( l jW to produce convolved features )(l jz . The function f() is applied element wise to the convolved features to get the activations of convolutional layers )1( l\nja .\nLet s2 be the size of a feature map at layer l (with r feature maps), and t2 be the size of filters, then the number of convolved features is )1()1(  tstsr . Each convolved feature is the scalar product of a filter\u2019s weights and a local region\u2019s activations, so the number of possibly different convolved results is tt2 when applying dropout to layer l. Therefore, the number of total possibly sets of convolved features C decided by layer l is 22 )1()1()1( 22   tstrtstsrttC . (13)\nSimilarly, dropout is turned off at test time. The whole network containing all the units at layer l should be used, but with the filter\u2019s weights scaled by the retaining probability. This efficiently gets an estimate of averaging all possibly trained dropout networks. One may expect that convolutional dropout helps generalization by reducing over-fitting. However, it is far less advantageous, since the shared-filter and local-connectivity architecture in convolutional layers is a drastic reduction in the number of parameters and this already reduces the possibility to overfit (Hinton et al., 2012). Our empirical results will confirm this point that it does improve the generalization to test data, but is often inferior to max-pooling or fully-connected dropout."}, {"heading": "4 Empirical Evaluations", "text": "The purpose of our experiments is threefold: (1) to provide empirical evidence that probabilistic weighted pooling is a more accurate approximation of averaging all possibly max-pooling dropout trained models than max-pooling and scaled max-pooling, (2) to explore dropout training in different layers and (3) to compare max-pooling dropout against stochastic pooling.\nWe use rectified linear function (Krizhevsky, Sutskever, & Hinton, 2012; Vinod & Hinton, 2010) for convolutional and fully-connected layers, and softmax activation function for the output layer. More commonly used sigmoidal and tanh nonlinearities are not adopted due to gradient vanishing\nproblem with them. Vanishing gradient effect causes slow optimization convergence, yet training a deep model is already very computationally expensive. Local response normalization is applied after applying rectified non-linearity in certain layers (Krizhevsky, Sutskever, & Hinton, 2012).\nWe train our models using stochastic mini-batch gradient descent with a batch size of 100, momentum of 0.95, learning rate of 0.1 to minimize the cross entropy loss. The weights in all layers are initialized from a zero-mean Gaussian distribution with 0.1 as standard deviation and the constant 0 as the neuron biases in all layers. The heuristic (Hinton et al., 2013) which we follow is to reduce the learning rate twice by a factor of ten before terminating the training. We retain each unit with probability of 0.5 (i.e. p = 0.5) by default. Specially, p is set to 0.8 for the first fully-connected layer. Experiments are conducted on three widely used datasets: MNIST, CIFAR-10 and CIFAR-100. Fig. 2 displays the example images.\nThe CNN architecture in our experiments is denoted in the following way: 2x32x32-32C5-3P264C5-3P2-1000N-10N represents a CNN with 2 input image of size 32x32, a convolutional layer with 32 feature maps and 5x5 filters, a pooling layer with pooling region 3x3 and stride 2, a convolutional layer with 64 feature maps and 5x5 filters, a pooling layer with pooling region 3x3 and stride 2, a fully-connected layer with 1000 hidden units, and an output layer with 10 units (one per class)."}, {"heading": "4.1 MNIST", "text": "We initially conduct experiments using MNIST, a widely used benchmark dataset in computer vision. It consists of 28x28 pixel grayscale images, each containing a digit 0 to 9. There are 60,000 training and 10,000 test examples. We do not perform any pre-processing except scaling the pixel values to [0, 1]."}, {"heading": "4.1.1 Probabilistic Weighted Pooling vs. Scaled Max-Pooling", "text": "To validate the superiority of probabilistic weighted pooling over max-pooling and scaled max-pooling, we first train different CNN models using two different architectures, 1x28x28-6C52P2-12C5-2P2-1000N-10N and 1x28x28-12C5-2P2-24C5-2P2-1000N-10N. Max-pooling dropout is applied during training. At test time, max-pooling, scaled max-pooling and probabilistic weighted pooling is used respectively to act as model averaging.\nFig. 3 illustrates the training and test error rates of both CNN architectures over 300 training epochs. Using probabilistic weighted pooling at test time, the training errors are always lower than those produced by scaled max-pooling. This is a good news that probabilistic weighted pooling fits the training data better with the same model parameters. In other words, probabilistic weighted pooling is a more accurate estimation of averaging all possibly trained dropout models than scaled max-pooling. On test data, both probabilistic weighted pooling and scaled max-pooling produces lower errors compared to max-pooling without dropout. Probabilistic weighted pooling generally produces lower errors than scaled max-pooling. This indicates that probabilistic weighted pooling not only fits the training data better, but also generalizes better to the test data. In terms of training performance, max-pooling is about the same with probabilistic weighted pooling, but probabilistic weighted pooling clearly outperforms max-pooling on the test data.\nWe then train different CNN models with different retaining probabilities for max-pooling dropout. The CNN architecture 1x28x28-20C5-2P2-40C5-2P2-1000N-10N is trained for 1000 epochs. Fig. 4 compares the test performance produced by different pooling methods at test time. Generally, probabilistic weighted pooling performs better than max-pooling and scaled max-pooling with different retaining probabilities. For small p, max-pooling and scaled max-pooling performs very poorly; probabilistic weighted pooling is considerably better. With the increase of p, the performance gap becomes smaller. This is not surprising as the pooled outputs for different pooling methods are close to each other for large p. An extreme case is that when p = 1, scaled max-pooling and probabilistic weighted pooling are exactly the same with max-pooling."}, {"heading": "4.1.2 Dropout Training in Different Layers", "text": "To investigate the effect of using dropout in different layers, we first train different models by separately using dropout on the input to convolutional, max-pooling and fully-connected layers. Models are trained using two CNN architectures: 1x28x28-6C5-2P2-12C5-2P2-1000N-10N and\n1x28x28-12C5-2P2-24C5-2P2-1000N-10N. The case without dropout is used as the baseline. For max-pooling dropout, only probabilistic weighted pooling is used at test time for its superiority over max-pooling and scaled max-pooling.\nFig. 5 illustrates the progression of these models\u2019 training and test error rates over 300 epochs. Without dropout, the training error falls rapidly to zero, but the test error stands at about 0.9% for both CNN architectures, revealing that both models suffer from severe over-fitting. With convolutional dropout, the training error decreases slower, and the test error drops to 0.85% and 0.65% respectively for the above two CNN architectures. This indicates that convolutional dropout can reduce over-fitting and aid generalization to the test data. With max-pooling dropout, the training error also falls down slower while the test error decreases to about 0.60% and 0.53% respectively, much better than convolutional dropout. With fully-connected dropout, the training error still decreases much slower, and the performance on test data is much better compared to the case without dropout.\nNote that fully-connected dropout is the best performer on the smaller architecture. This is not surprising since fully-connected layers have many units and need regularization; the convolutional and pooling component is thin enough, so regularization is relatively not so advantageous. Max-pooling dropout performs well on both architectures, even though the CNN architectures are small, indicating that max-pooling dropout is a robust regularizer. Convolutional dropout is not trivial compared to the case without dropout, but its performance gain is relatively small compared to max-pooling dropout and fully-connected dropout. This is to be expected, since the shared-filter and local-connectivity convolutional architecture is a drastic reduction in the number of parameters and this already reduces the possibility to overfit.\nAs observed, separately using convolutional, max-pooling and fully-connected dropout reduces over-fitting and improves test performance. To achieve better results, we try using dropout simultaneously on the input to different layers. For max-pooling dropout, only probabilistic weighted pooling is used at test time.\nTo this end, we train various models for 1000 training epochs using architecture 1x28x28-20C5-2P2-40C5-2P2-1000N-10N. For comparison\u2019s purpose, the results of separately using dropout in different layers are also presented. Table 1 records these models\u2019 test errors, as well as recently published state-of-the-art results produced by CNNs. The best performing CNN model that do not use dropout yields an error rate of 0.81% on MNIST. With fully-connected dropout, the test error decreases to 0.56%. Convolutional dropout reduces the test error to 0.60%. With max-pooling dropout, the test error drops to 0.47%. However, Compared to only using convolutional or max-pooling dropout, simultaneously using convolutional and pooling dropout does not decrease, but increase the error. Simultaneously employing max-pooling and fully-connected dropout, we obtain test error rate of 0.39%. This beats the previous state-of-the-art results to the best of our knowledge, 0.47% (Lin, Chen, & Yan, 2014), 0.45% (Goodfellow et al., 2013) and 0.47% (Zeiler & Fergus, 2013)."}, {"heading": "4.2 CIFAR-10", "text": "The CIFAR-10 dataset (Krizhevsky, 2009) consists of ten classes of natural images with 50,000 examples for training and 10,000 for testing. Each example is a 32x32 RGB image taken from the tiny images dataset collected from the web. We also scale to [0, 1] for this dataset and subtract the mean value of each channel computed over the dataset for each image.\nCompared to MNIST, the CIFAR-10 images are highly varied within each class, so we train deeper and wider nets to model the complex non-linear relationships. The architecture is 3x32x32-96C5-3P2-128C3-3P2-256C3-3P2-2000N-2000N-10N. A notable difference from the architecture used for MNIST is that each input image for CIFAR-10 has three channels, with each channel corresponding to an R/G/B component. Models are trained for 1000 epochs.\nWe first compares different pooling methods at test time for max-pooling dropout trained models on CIFAR-10. The retaining probability is set to 0.3, 0.5 and 0.7 respectively. At test time, max-pooling, scaled max-pooling and probabilistic weighted pooling are respectively used to act as model averaging. Fig. 6 presents the test performance of these pooling methods. Again, for small retaining probability p = 0.3, scaled max-pooling and probabilistic weighted pooling perform poorly. Probabilistic weighted pooling is the best performer with different retaining probabilities. The increase of p narrows different pooling methods\u2019 performance gap.\nWe also train various CNN models by separately and simultaneously using dropout in different layers on CIFAR-10. For max-pooling dropout trained models, only probabilistic weighted pooling is used at test time. Table 2 records the performance of various models, as well as recently published results produced by CNN models. Without dropout, the best test error is 16.50%. Separately using convolutional, max-pooling and fully-connected dropout reduces the test error. Convolutional dropout still underperforms max-pooling dropout. Again, simultaneously using convolutional and max-pooling dropout seems to easily result in too strong regularization, and thus decreases the test performance. Using max-pooling and fully-connected dropout, we obtain very competitive test error rate, 11.29%, compared to recently published results, 11.35% (Springenberg & Riedmiller, 2014), 10.41% (Lin, Chen, & Yan, 2014), 11.68% (Goodfellow et al., 2013), 15.14% (Zeiler & Fergus, 2013) and 15.60% (Hinton et al., 2012)."}, {"heading": "4.3 CIFAR-100", "text": "CIFAR-100 (Krizhevsky, 2009) is just like CIFAR-10, but with 100 categories. We also scale to [0, 1] for CIFAR-100 and subtract the mean value of each R/G/B channel. The architecture is the same with that of CIFAR-10 except that the number of output units is 100. Models are trained for 1000 epochs.\nFig. 7 compares different pooling methods at test time for max-pooling dropout trained models on CIFAR-100. The retaining probability is set to 0.3, 0.5 and 0.7 respectively. Again, probabilistic weighted pooling shows clear superiority over max-pooling and scaled max-pooling.\nWe then train various CNN models by separately and simultaneously using dropout in different layers on CIFAR-100. For max-pooling dropout trained models, only probabilistic weighted pooling is used at test time. As shown in Table 3, it improves the generalization to test data that using dropout separately in convolutional, max-pooling and fully-connected layers. Again, if dropout is employed improperly, the performance would decrease, such as simultaneously using convolutional and maxpooling dropout. The best result, 37.13%, is achieved using max-pooling and fully-connected dropout."}, {"heading": "4.4 Max-Pooling Dropout and Stochastic Pooling", "text": "Similar to max-pooling dropout, stochastic pooling (Zeiler & Fergus, 2013) also randomly picks activation according to a multinomial distribution at training time, and also involves probabilistic weighting at test time. More concretely, at training time it first computes the probability pi for each unit within pooling region j at layer l by normalizing the activations:\n).,...,2,1(,\n1\n)(\n)(\nni\na\na p\nn\nk\nl\nk\nl\ni\ni \n \n(14)\nIt then samples from a multinomial distribution based on pi to select an index i in the pooling region. The pooled activation is simply )(l ia :\n).,...,,(~where, 21 )()1( n l i l j ppplMultinomiaiaa  \n(15)\nAt test time, probabilistic weighting is adopted to act as model averaging. That is, the activations in\neach pooling region are weighted by the probability pi and summed:\n. 1 )()1(  \n  n\ni\nl\nii\nl\nj apa (16)\nOne may have found that stochastic pooling bears much resemblance to max-pooling dropout, as both involve stochasticity at pooling stage. We are therefore very interested in their performance differences. As presented in Sec. 3, for max-pooling dropout, the number of possibly trained models at layer l is rstb )( , where t ttb )1()(  . For stochastic pooling, since each pooling region provides t choices, the number of possibly trained models C at layer l is\ndropout, t ttb  1)( , while t ttb )( for stochastic pooling. Here t is the size of pooling regions. The difference in b(t) decreases with the increase of t.\nagainst the base of max-pooling dropout. Now consider a concrete example. For a certain layer l, let ,96,3232  rs and .22t For stochastic pooling, 4/1)22/(1 4)22()(  tb ; for max-pooling dropout, 4/1)22/(1 5)221()(  tb . Max-pooling dropout provides  times larger number of possible models, and  is computed as follows:\n.25.1)5/4( 245769632324/1   (18)\nClearly, max-pooling dropout provides extremely larger number of possibly trained models than stochastic pooling, despite the small difference in the base.\nTo compare their performances, we train various models on MNIST using two CNN architectures, 1x28x28-6C5-2P2-12C5-2P2-1000N-10N and 1x28x28-12C5-2P2-24C5-2P2-1000N-10N. For max-pooling dropout trained models, only probabilistic weighted pooling is used at test time. Fig. 9 illustrates the progression of training and test errors using stochastic pooling and max-pooling dropout with different retaining probabilities over 300 training epochs. Regarding training errors, stochastic\npooling falls in between max-pooling dropout with p = 0.7 and p = 0.5 for both CNN architectures. On the test data, stochastic pooling performs worst for the smaller CNN architecture. For the bigger one, the test performance of stochastic pooling is between max-pooling dropout with p = 0.7 and p = 0.5.\nFor a more clear comparison, we train CNN models with more different retaining probabilities on MNIST, CIFAR-10 and CIFAR-100. For max-pooling dropout trained models, only probabilistic weighted pooling is used at test time. Fig. 10 compares the test performances of max-pooling dropout with different retaining probabilities against stochastic pooling. As we can observed, the relation\nbetween the performance of max-pooling dropout and the retaining probability p is a U-shape. If p is too small or too large, max-pooling dropout performs poorer than stochastic pooling. Yet max-pooling dropout with typical p (around 0.5) outperforms stochastic pooling by a large margin. Therefore, although stochastic pooling is hyper-parameter free and this saves the tuning of retaining probability, its performance is often inferior to max-pooling dropout."}, {"heading": "4.5 A Brief Summary of Experimental Results", "text": "The summary of experimental results is threefold in response to the purpose of our experiments.\n(1) For max-pooling dropout trained CNN models, probabilistic weighted pooling not only fits the training data better, but also generalizes better to the test data than max-pooling and scaled max-pooling. For small retaining probability, max-pooling and scaled max-pooling produce very poor results, while probabilistic weighted pooling performs very well. With the increase of the retaining probability, the performance gap becomes smaller.\n(2) Separately using convolutional, max-pooling and fully-connected dropout improves performance, but convolutional dropout seems far less advantageous. Simultaneously using dropout in different layers could further reduce the test error, but should be careful. For example, with typical retaining probability 0.5, using convolutional and max-pooling dropout simultaneously does not performs well; while using max-pooling dropout and fully-connected dropout simultaneously achieves best results on MNIST and CIFAR datasets.\nIt is worth to point out that determining which layers to train with dropout is an open question, since many factors (such as network architecture, the retaining probability and even the training data) have large influence on the performance. Especially, for different network architecture, the best dropout regularization strategy could be quite different. While the best regularization strategy (simultaneously using max-pooling and fully-connected dropout) is consistent across three datasets in our experiments, it is possible that these networks just need lots of regularization in max-pooling and fully-connected layers.\n(3) The retaining probability affects max-pooling\u2019s performance, and the relation exhibits U-shape. Max-pooling dropout with typical retaining probabilities (around 0.5) often outperforms stochastic pooling by a large margin."}, {"heading": "5 Conclusions", "text": "This paper mainly addresses the problem of understanding and using dropout on the input to max-pooling layers of convolutional neural nets. At training time, max-pooling dropout is equivalent to randomly picking activation according to a multinomial distribution, and the number of possibly trained networks is exponential in the number of input units to the pooling layers. At test time, a new pooling method, probabilistic weighted pooling, is proposed to act as model averaging. Experimental evidence confirms the benefits of using max-pooling dropout, and validates the superiority of probabilistic weighted pooling over max-pooling and scaled max-pooling. Using dropout simultaneously in different layers could further improve the performance, but should be careful. Using max-pooling dropout and fully-connected dropout, this paper reports better results on MNIST, and comparable performance on CIFAR-10 and CIFAR-100, in comparisons with state-of-the-art results that do not use data augmentation. In addition, considering that stochastic pooling is similar to max-pooling dropout, we empirically compare them and show that the performance of stochastic pooling is between those produced by max-pooling dropout with different retaining probabilities."}, {"heading": "Acknowledgements", "text": "This work was supported in part by National Natural Science Foundation of China under grant 61371148."}], "references": [{"title": "The dropout learning algorithm", "author": ["P. Baldi", "P. Sadowski"], "venue": "Artificial Intelligence,", "citeRegEx": "Baldi and Sadowski,? \\Q2014\\E", "shortCiteRegEx": "Baldi and Sadowski", "year": 2014}, {"title": "Representation learning: a review and new perspectives", "author": ["Y. Bengio", "A. Courville", "P. Vincent"], "venue": "IEEE Transactions on Pattern Analysis and Machine Intelligence,", "citeRegEx": "Bengio et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Bengio et al\\.", "year": 2013}, {"title": "A theoretical analysis of feature pooling in visual recognition", "author": ["Y.L. Boureau", "Ponce J", "Y. LeCun"], "venue": "In Proceedings 27th of International Conference on Machine Learning (ICML", "citeRegEx": "Boureau et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Boureau et al\\.", "year": 2010}, {"title": "Bagging predictors", "author": ["L. Breiman"], "venue": "Machine Learning, 24, 123-140.", "citeRegEx": "Breiman,? 1996", "shortCiteRegEx": "Breiman", "year": 1996}, {"title": "Multi-column deep neural networks for image classification", "author": ["Ciresan. D", "U. Meier", "J. Schmidhuber"], "venue": "In Proceedings of 2014 IEEE Conference on Computer Vision and Pattern Recognition", "citeRegEx": "D. et al\\.,? \\Q2012\\E", "shortCiteRegEx": "D. et al\\.", "year": 2012}, {"title": "Reducing the dimensionality of data with neural networks", "author": ["G.E. Hinton", "R.R. Salakhutdinov"], "venue": null, "citeRegEx": "Hinton and Salakhutdinov,? \\Q2006\\E", "shortCiteRegEx": "Hinton and Salakhutdinov", "year": 2006}, {"title": "Improving neural networks by preventing co-adaption of feature detectors", "author": ["G.E. Hinton", "N. Srivastave", "A. Krizhevsky", "I. Sutskever", "R.R. Salakhutdinov"], "venue": null, "citeRegEx": "Hinton et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Hinton et al\\.", "year": 2012}, {"title": "Improving deep neural networks with probabilistic maxout units", "author": ["T. Springenberg J", "M. Riedmiller"], "venue": "In Proceedings of 3rd International Conference on Learning Representations (ICLR", "citeRegEx": "J. and Riedmiller,? \\Q2014\\E", "shortCiteRegEx": "J. and Riedmiller", "year": 2014}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky"], "venue": "M.S. diss., Department of Computer Science, University of Toronto.", "citeRegEx": "Krizhevsky,? 2009", "shortCiteRegEx": "Krizhevsky", "year": 2009}, {"title": "ImageNet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": "In Advances in Neural Information Processing Systems (NIPS", "citeRegEx": "Krizhevsky et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Krizhevsky et al\\.", "year": 2012}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "In Proceedings of the IEEE", "citeRegEx": "LeCun et al\\.,? \\Q1998\\E", "shortCiteRegEx": "LeCun et al\\.", "year": 1998}, {"title": "Probability in banach spaces", "author": ["M. Ledoux", "M. Talagrand"], "venue": null, "citeRegEx": "Ledoux and Talagrand,? \\Q1991\\E", "shortCiteRegEx": "Ledoux and Talagrand", "year": 1991}, {"title": "Network in network", "author": ["M. Lin", "Q. Chen", "Yan S"], "venue": "In Proceedings of 3rd International Conference on Learning Representations (ICLR", "citeRegEx": "Lin et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Lin et al\\.", "year": 2014}, {"title": "Probable networks and plausible predictions: A review of practical Bayesian methods for supervised neural networks", "author": ["D.C. Mackay"], "venue": "Bayesian Methods for Backpropagation Networks.", "citeRegEx": "Mackay,? 1995", "shortCiteRegEx": "Mackay", "year": 1995}, {"title": "Evaluation of pooling operations in convolutional architectures for object recognition", "author": ["D. Scherer", "A. Muller", "S. Behnke"], "venue": "In Proceedings of 20th International Conference on Artificial Neural Networks (ICANN", "citeRegEx": "Scherer et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Scherer et al\\.", "year": 2010}, {"title": "Dropout: a simple way to prevent neural networks from overfitting", "author": ["N. Srivastava", "Hinton. G. E", "A. Krizhevsky", "I. Sutskever", "R. Salakhutdinov"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Srivastava et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Srivastava et al\\.", "year": 2014}, {"title": "Rectified linear units improve restricted Boltzmann machines", "author": ["N. Vinod", "G.E. Hinton"], "venue": "In Proceedings 27th of International Conference on Machine Learning (ICML", "citeRegEx": "Vinod and Hinton,? \\Q2010\\E", "shortCiteRegEx": "Vinod and Hinton", "year": 2010}, {"title": "Regularization of neural networks using DropConnect", "author": ["L. Wan", "M.D. Zeiler", "S. Zhang", "Y. LeCun", "R. Fergus"], "venue": "In Proceedings of 30th International Conference on Machine Learning (ICML", "citeRegEx": "Wan et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Wan et al\\.", "year": 2013}, {"title": "An empirical analysis of dropout in piecewise linear networks", "author": ["F.D. Warde", "I.J. Goodfellow", "A. Courville", "Y. Bengio"], "venue": "In Proceedings of 3rd International Conference on Learning Representations (ICLR", "citeRegEx": "Warde et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Warde et al\\.", "year": 2014}, {"title": "Dropout training as adaptive regularization", "author": ["S. Wager", "S. Wang", "P. Liang"], "venue": "In Advances in Neural Information Processing Systems (NIPS", "citeRegEx": "Wager et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Wager et al\\.", "year": 2013}, {"title": "Stochastic pooling for regularization of deep convolutional neural networks", "author": ["M.D. Zeiler", "Fergus R"], "venue": "In Proceedings of 2nd International Conference on Learning Representations (ICLR", "citeRegEx": "Zeiler and R.,? \\Q2013\\E", "shortCiteRegEx": "Zeiler and R.", "year": 2013}], "referenceMentions": [{"referenceID": 6, "context": "Dropout (Hinton et al., 2012) is a recently proposed regularizer to fight against over-fitting.", "startOffset": 8, "endOffset": 29}, {"referenceID": 17, "context": "Dropout has also inspired other stochastic model averaging methods such as stochastic pooling (Zeiler & Fergus, 2013) and DropConnect (Wan et al., 2013).", "startOffset": 134, "endOffset": 152}, {"referenceID": 6, "context": "Although dropout is known to work well in fully-connected layers of convolutional neural nets (Hinton et al., 2012; Wan et al., 2013; Krizhevsky, Sutskever, & Hinton, 2012), its effect in convolutional and pooling layers is, however, not well studied.", "startOffset": 94, "endOffset": 172}, {"referenceID": 17, "context": "Although dropout is known to work well in fully-connected layers of convolutional neural nets (Hinton et al., 2012; Wan et al., 2013; Krizhevsky, Sutskever, & Hinton, 2012), its effect in convolutional and pooling layers is, however, not well studied.", "startOffset": 94, "endOffset": 172}, {"referenceID": 10, "context": "CNNs have far been known to produce remarkable performance on MNIST (LeCun et al., 1998), but they, together with other neural network models, fell out of favor in practical machine learning as simpler models such as SVMs became the popular choices in the 1990s and 2000s.", "startOffset": 68, "endOffset": 88}, {"referenceID": 13, "context": "Other common forms of regularization include early stopping, Bayesian fitting (Mackay, 1995), weight elimination (Ledoux & Talagrand, 1991) and data augmentation.", "startOffset": 78, "endOffset": 92}, {"referenceID": 3, "context": "It is similar to bagging (Breiman, 1996), in which a set of models are trained on different subsets of the same training data.", "startOffset": 25, "endOffset": 40}, {"referenceID": 3, "context": "It is similar to bagging (Breiman, 1996), in which a set of models are trained on different subsets of the same training data. At test time, different models\u2019 predictions are averaged together. In traditional bagging, each model has independent parameters, and all members would be trained explicitly. In the case of dropout training, there are exponentially many possibly trained models, and these models share the same parameters, but not all of them are explicitly trained. Actually, the number of explicitly trained models is not larger than m\uf0b4e, where m is the number of training example, and e is the training epochs. This is much smaller than the number of possibly trained models, n 2 ( n is number of hidden units in a feed-forward neural networks). Therefore, a vast majority of models are not explicitly trained at training time. At test time, bagging makes a prediction by averaging together all the sub-models\u2019 predictions with the arithmetic mean, but it is not obvious how to do so with the exponentially many models trained by dropout. Fortunately, the average prediction of exponentially many sub-models can be approximately computed simply by running the whole network with the weights scaled by retaining probability. The approximation has been mathematically characterized for linear and sigmoidal networks (Baldi & Sadowski, 2014; Wager el al., 2013); for piecewise linear networks such as rectified linear networks, Warde et al. (2014) empirically showed that weight-scaling approximation is a remarkable and accurate surrogate for the true geometric mean, by comparing against the true average in small enough networks", "startOffset": 26, "endOffset": 1458}, {"referenceID": 15, "context": "Compared to original work on dropout, (Srivastava et al., 2014) provided more exhaustive experimental results.", "startOffset": 38, "endOffset": 63}, {"referenceID": 17, "context": "DropConnect (Wan et al., 2013) is a natural generalization of dropout for regularizing large feed-forward nets.", "startOffset": 12, "endOffset": 30}, {"referenceID": 6, "context": "Since dropout was thought to be far less advantageous in convolutional layers, pioneering work by Hinton et al. (2012) only applied it to fully-connected layers.", "startOffset": 98, "endOffset": 119}, {"referenceID": 6, "context": "Since dropout was thought to be far less advantageous in convolutional layers, pioneering work by Hinton et al. (2012) only applied it to fully-connected layers. It was the reason they provided that the convolutional shared-filter architecture was a drastic reduction in the number of parameters and thus reduced its possibility to overfit in convolutional layers. Wonderful work by Krizhevsky et al. (2012) trained a very big convolutional neural net, which had 60 million parameters, to classify 1.", "startOffset": 98, "endOffset": 408}, {"referenceID": 6, "context": "Using dropout in fully-connected layers during training, the whole network containing all the hidden units should be used at test time, but with their outgoing weights halved (Hinton et al. 2012), or with their activations halved.", "startOffset": 175, "endOffset": 195}, {"referenceID": 6, "context": "However, it is far less advantageous, since the shared-filter and local-connectivity architecture in convolutional layers is a drastic reduction in the number of parameters and this already reduces the possibility to overfit (Hinton et al., 2012).", "startOffset": 225, "endOffset": 246}, {"referenceID": 8, "context": "The CIFAR-10 dataset (Krizhevsky, 2009) consists of ten classes of natural images with 50,000 examples for training and 10,000 for testing.", "startOffset": 21, "endOffset": 39}, {"referenceID": 6, "context": "60% (Hinton et al., 2012).", "startOffset": 4, "endOffset": 25}, {"referenceID": 8, "context": "CIFAR-100 (Krizhevsky, 2009) is just like CIFAR-10, but with 100 categories.", "startOffset": 10, "endOffset": 28}, {"referenceID": 6, "context": "14 Dropout the last hidden layer (Hinton et al., 2012) 15.", "startOffset": 33, "endOffset": 54}], "year": 2015, "abstractText": "Recently, dropout has seen increasing use in deep learning. For deep convolutional neural networks, dropout is known to work well in fully-connected layers. However, its effect in convolutional and pooling layers is still not clear. This paper demonstrates that max-pooling dropout is equivalent to randomly picking activation based on a multinomial distribution at training time. In light of this insight, we advocate employing our proposed probabilistic weighted pooling, instead of commonly used max-pooling, to act as model averaging at test time. Empirical evidence validates the superiority of probabilistic weighted pooling. We also empirically show that the effect of convolutional dropout is not trivial, despite the dramatically reduced possibility of over-fitting due to the convolutional architecture. Elaborately designing dropout training simultaneously in max-pooling and fully-connected layers, we achieve state-of-the-art performance on MNIST, and very competitive results on CIFAR-10 and CIFAR-100, relative to other approaches without data augmentation. Finally, we compare max-pooling dropout and stochastic pooling, both of which introduce stochasticity based on multinomial distributions at pooling stage.", "creator": "Microsoft\u00ae Word 2013"}}}