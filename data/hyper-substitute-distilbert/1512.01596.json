{"id": "1512.01596", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Dec-2015", "title": "Creation of a Deep Convolutional Auto-Encoder in Caffe", "abstract": "simulation development identifies a deep ( weighted ) particle auto - encoder in the caffe deep reference area yet presented in another framework. others describe simple rules which lab studied because create this model in 1991. no proposed model of dense r - encoder does not compute pooling / filter layers entirely. the summary of our experimental investigations show complete accuracy of dimensionality reduction. comparison with composite batch auto - encoder on the example 2d folding methodology.", "histories": [["v1", "Fri, 4 Dec 2015 23:58:47 GMT  (1184kb)", "http://arxiv.org/abs/1512.01596v1", "8 pages, 7 figures, 5 tables, 28 references in the list"], ["v2", "Thu, 21 Apr 2016 01:51:14 GMT  (1242kb)", "http://arxiv.org/abs/1512.01596v2", "9 pages, 7 figures, 5 tables, 34 references in the list; Added references, corrected Table 3, changed several paragraphs in the text"], ["v3", "Fri, 22 Apr 2016 03:20:41 GMT  (1258kb)", "http://arxiv.org/abs/1512.01596v3", "9 pages, 7 figures, 5 tables, 34 references in the list; Added references, corrected Table 3, changed several paragraphs in the text"]], "COMMENTS": "8 pages, 7 figures, 5 tables, 28 references in the list", "reviews": [], "SUBJECTS": "cs.NE cs.CV cs.LG", "authors": ["volodymyr turchenko", "artur luczak"], "accepted": false, "id": "1512.01596"}, "pdf": {"name": "1512.01596.pdf", "metadata": {"source": "CRF", "title": "Creation of a Deep Convolutional Auto-Encoder in Caffe", "authors": ["Volodymyr Turchenko", "Artur Luczak"], "emails": ["luczak}@uleth.ca"], "sections": [{"heading": null, "text": "1. Introduction\nThe convolutional auto-encoder (CAE) is one of the most wanted architectures in deep learning research. As an auto-encoder, it is based on the encoder-decoder paradigm, where an input is first transformed into a typically lower-dimensional space (encoder part) and then expanded to reproduce the initial data (decoder part). It is trained in unsupervised fashion allowing it to extract generally useful features from unlabeled data, to detect and remove input redundancies and to present essential aspects of analyzing data in robust and discriminative representations [1]. Auto-encoders and unsupervised learning methods have been widely used in many scientific and industrial applications, solving mainly dimensionality reduction and unsupervised pretraining tasks. Compared to the architecture of a classic stacked auto-encoder [2], CAE may be better suited to image processing tasks because it fully utilizes the properties of convolutional neural networks, which have been proven to provide better results on noisy, shifted and corrupted image data [3]. Theoretical issues of CAE developments are well described in many research papers [1, 4-6].\nModern deep learning frameworks, i.e. ConvNet2 [7], Theano+Lasagne [8-9], Torch7 [10], Caffe [11] and others, have become very popular tools in the deep learning research community since they provide fast deployment of state-of-the-art deep learning models along with appropriate training strategies (Stochastic Gradient Descent, AdaDelta, etc.) allowing rapid research progress and emerging commercial applications. Our interest is to apply deep learning technologies, namely a CAE, for image processing in the neuroscience field. We have chosen Caffe deep learning framework mainly for two reasons: (i) a description of a deep neural network is pretty straightforward, it is just a\ntext file with the description of layers and (ii) Caffe has a Matlab wrapper, which is very convenient and allows getting Caffe results directly into Matlab workspace for their further processing (visualization, etc) [12].\nThere are several existing solutions/attempts to develop and research a CAE model on different platforms, but to the best knowledge of the authors there is no current CAE implementation in Caffe yet. The issue of CAE implementation is permanently active in the Caffe users group [13-15]. There are two implementations of one-layer (not-stacked) CAE [16] and convolutional Restricted Boltzmann Machine [17] in Matlab. Mike Swarbrick Jones presented the implementation of CAE in Theano/Lasagne [18-19]. The Deep Sea team [20], who won a 100,000 US dollar prize (1st place) in the National Data Science Bowl, a data science competition where the goal was to classify images of plankton, has reported the use of CAE to pretrain only convolutional layers of their network (also implemented in Theano/Lasagne [9]). But they did not use this approach in their final winning architecture since they did not receive any substantial improvement with CAE pre-training. Also there is an existing CAE implementation in the examples of Torch7 deep learning framework [21].\nThe goal of this paper is to present our first results of the practical implementation of a CAE model in Caffe deep learning framework as well as the experimental research of the proposed model on the example of MNIST dataset and a simple visualization technique which helped us to receive these results.\n2. Creation CAE model in Caffe\nIn the examples of Caffe there are two models which solve the task of dimensionality reduction. The first is a classic stacked auto-encoder, proposed by Hinton et al [2], and the second is a Siamese network, proposed by LeCun et al [22]. The classic auto-encoder model is well researched and it trains in a purely unsupervised fashion. The Siamese network consists of two LeNet [3] architectures coupled in a Siamese way and ended by a contrastive loss function. Siamese network trains in a \u201csemi-supervised\u201d fashion, since for forming the training set we have to label a couple of input images (chosen randomly), which we are saving into two channels (left and right), by 1, if the images belong to the same class and by 0 otherwise. The visualizations how the example Caffe implementations of the classic auto-encoder and the Siamese network solve the dimensionality reduction task encoding the test set (10000 examples) of MNIST in\na 2-dimensional (2D) space are depicted in Fig. 1 and Fig. 2 respectively.\nby Siamese network Following the success of the LeNet [3] architecture and the paper [1] which showed experimentally that convolutional+pooling layers provide a better representation of convolutional filters and, furthermore, classification results, we started to construct CAE by the scheme conv1-pool1-conv2-pool2 in the encoder part and deconv2-unpool2-deconv1-unpool1 in the decoder part. We also have been inspired by the work of Hyeonwoo Noh et al [23] and we have used their nonofficial Caffe distribution [24], where they have implemented an unpooling layer, which is still absent in the official Caffe distribution. This CAE model did not train in our experiments due to a lack of our experience and understanding, and, therefore, we have eliminated pooling-unpooling layers from our consideration. Masci et al [1] showed that convolutional architectures without max-pooling layers give worse results, but architectures without pooling layers are definitely working architectures, and it is a good point to start first with some simpler working architecture and then to increase the complexity of the model.\nAfter we have eliminated pooling-unpooling layers and added a non-linear activation function, <Sigmoid> in our case, after each convolutional and deconvolution\nlayer [4], we have noticed, that the developed model is very similar to the classic auto-encoder model [2]. The difference is, the first two fully-connected layers of the encoder part have been replaced by two convolutional layers, and the last two fully-connected layers of the decoder part have been replaced by two deconvolution layers. The architecture of the developed CAE model in Caffe is depicted in Fig. 3. Taking into account some similarity between the classic auto-encoder and the developed model of CAE, we have used the following principles during our research: 1. The model should be symmetric in terms of the total\nsize of feature maps and hidden nodes (i.e. number of connections) in both the encoder and decoder parts; 2. Similarly to the example of the classic auto-encoder in Caffe, for the CAE model we have used two loss functions, <Sigmoid_Cross_Entropy_Loss> and <Euclidean_Loss>. Preliminary experimental research has shown that the use of only one of these loss functions separately does not provide good convergence results; 3. Visualization of the values (along with its numerical representation) of trainable filters, feature maps and hidden units from layer to layer allows better understanding of how data are converted/processed from layer to layer [25]; 4. The main purpose of the activation function after each convolutional/deconvolution layer is non-linear data processing [4]. Since the nature of convolutional/deconvolution operations is a multiplication, our visualization showed the huge rise of a resulting value of convolutional/deconvolution operations (the values of feature maps) in encoder/decoder parts from layer to layer which prevents the CAE model from a desirable convergence during learning. So the use of activation functions, which drops the resulting value of feature maps to the interval [0...1] kept the values of feature maps at the end of the decoder part smaller in order to provide good convergence of the whole model. 5. The well-known fact is that good generalization properties of neural networks depend on the ratio of trainable parameters to the size and dimension of the initial data. Therefore it is necessary to perform a set of experiments on the existing model of classic auto-encoder in order to find better architecture, (i.e. the size of trainable parameters) which provides better generalization properties. Then, some approximately the same number of trainable parameters could be used to create the CAE model with a good generalization properties; 6. The created architecture should be stable. Since different runs of a neural network may show different learning convergences (values of loss function) depending on random initialization of weights/biases, under stable architecture we mean the same convergence results within several (at least 3) runs of the same model; The practical implementation of these principles and some experimental results are presented in the next section.\n3. Experimental results\nAll experimental researches were fulfilled on a workstation operated under Ubuntu 14.04.2 operation system. The workstation is equipped with 4-core (8 threads visible in Linux) Inter(R) Xeon(R) E5620@2.40\nGHz processor, 51 Gb of RAM and GeForce GTS 450 GPU. The GPU has Fermi architecture, 192 CUDA cores, 1 Gb of RAM and computing capability 2.1. The version of Caffe distributed by Noh et al. [24] was used in the experiments. The training of all presented models was performed in GPU mode (solver_mode: GPU), only one CPU core was utilized by Caffe during the training.\nThe results of experimental tests of different sizes (further - architectures) of classic auto-encoder from Caffe examples are presented in Table 1. We were sure that Hinton et al. presented the best architecture (3rd row in Table 1) in his paper [2], but, as mentioned above, we wanted to research the generalization properties of smaller and bigger architectures in order to use this experience to create our CAE model. The number of trainable parameters for each architecture (without biases) is specified in the first column. Here in Table 1 and in all next Tables, all calculations are provided for the case N = 2 dimensions. The size of the MNIST training dataset we calculated as 60000 examples x 784 elements = 47040 K elements. The ratio of MNIST size to the number of the training parameters W is specified in the second column. We trained each architecture in three fashions, with 2, 10 and 30 (30 is exactly as in Caffe examples) neurons in the last hidden layer of the encoder part, which corresponds to 2-, 10- , 30- dimensional space of encoding respectively. According to Hinton et al [2] these architectures are called 2-, 10- and 30-dimensional auto-encoders. We did three runs for each architecture, the values of both loss functions, separated by \u201c;\u201d are presented in red for the training set and in black for the test set. In the last column we specified the number of classes we evaluated visually (see Fig. 1) from 3 runs of each architecture. For example, the number \u201825\u2019 means that 25 classes from 30 in total (10 classes per 3 runs) were correctly classified. Under \u2018correctly classified\u2019 we mean that the color of one class is not mixed with the color of another class(es), but this is, of course, a subjective sentiment.\nWe have used t-SNE technique [26] to visualize 10- and 30- dimensional data, produced by auto-encoder. For that visualization (it is showed later on the example of CAE in Fig. 5-6) we have integrated both calls, Caffe and t-SNE, into one Matlab routine.\nThe learning parameters of the solver of the classic auto-encoder (in file solver.prototxt) we left as it is specified in Caffe examples. These parameters were: solver_type: SGD (by default), base_lr: 0.01, lr_policy: \"step\", gamma: 0.1, stepsize: 1000, momentum: 0.9 and weight_decay: 0.0005. The results in Table 1 are specified for 5000 training iterations. The training time for the architecture 784-1000-500-250-N-250-500-1000784 from 3rd row of Table 1 was 2 minutes. As we can see from Table 1, the architectures with bigger ratio Data/W have better generalization properties because they provide lower (better) values of loss functions during the training and testing and better visualization results.\nIt is necessary to note, that in the case of the classic fully-connected auto-encoder researched above, the number of trainable parameters (except biases) is equal to the number of connections. But this is not a case of a\nCAE since convolutional/deconvolution layers have fewer trainable parameters, because the sizes of convolutional and deconvolution kernels are the trainable parameters in case of CAE. Therefore, in order to build a CAE, we have operated with the number of connections, i.e. with the sizes of feature maps and hidden nodes. In this paper we present two architectures: (i) Model 1, where we adjusted the number of connections to the best architecture of classic autoencoder (third row in Table 1) and (ii) Model 2, where we increased the number of connections after the series of experimental tests of Model 1.\nTable 2 contains the architecture parameters for both developed CAE models. In both models we did convolution with kernels conv1 9x9 and conv2 9x9 in encoder part and we came back with deconvolution kernels deconv2 12x12 and deconv1 17x17 in decoder part (Fig. 1). We have chosen this size of deconvolution kernels in order to restore the same size of MNIST image 28x28. The only difference between the two\nmodels is the number of feature maps in conv/deconv layers and the number of neurons in fully-connected layers in the encoder and decoder parts. In the third column of Table 2 we can see (bold font) that both proposed models are practically the same in terms of the total number of elements in feature maps and the number of neurons in the hidden layers of the encoder and decoder parts.\nThe number of trainable parameters for both models and the details of their calculation are specified in the last column of Table 2 and in Table 3 respectively. Since the deconvolution operation has the same nature as convolution [27], we have used the same approach to calculate the number of trainable parameters both in the encoder and decoder parts. In decoder part, the purpose of the deconvolution layer deconv1neur, which corresponds to the term (1x1+1)*1 in the 3rd column of Table 3, is to transform all feature maps of the last deconvolution layer deconv1 into one restored image with the same size as the original: 28x28 pixels in case\nof MNIST. There was an explanation in the Caffe users group how to do that [28]. Surprisingly, the number of trainable parameters in the encoder part is significantly bigger than in the decoder part. The major reason for this is the number of trainable parameters between conv2 layer and the first fully-connected layer ip1encode, for example 20500 parameters for the Model 1 (see the 2nd column in Table 3).\nThe results of experimental tests of the two developed CAE models are presented in Table 4, which is organized similarly to Table 1. The ratio Data/C (number of connections) is specified in the second column of Table 4. We evaluate 2-, 10- and 30- dimensional CAEs, the number of dimensions corresponds to the number of neurons in the last hidden layer ip2encode (see Fig. 3) of the encoder part. The\nresults in Table 4 are specified for 20000 training iterations. The comparison of both tables shows that Model 1 provides the same minimum values of loss functions as well as the same number of visualization classes as the best architecture of the classic autoencoder (3rd row) from Table 1. The experimental tests of Model 2 showed better (lower) values of loss functions reached during the training, and slightly better visualization results in comparison with Model 1. The visualizations showing how Model 2 solves the dimensionality reduction task encoding the test set of MNIST in a 2D space are depicted in Figs. 4-6. Similarly we have used t-SNE technique [26] to visualize 10- and 30- dimensional data, produced by the 10- and 30- dimensional CAEs.\nThe learning parameters of the solver of the developed CAE with stable architecture were: solver_type: SGD, base_lr: 0.006, lr_policy: \"fixed\", and weight_decay: 0.0005. We run several experiments, changing the architecture and learning parameters of\nCAE, but in many cases they were not stable architectures. Of course, the accepted models and learning parameters are not unique, we are pretty sure there are a lot of other configurations, which could provide stable CAE architectures. The training times for\nthe Model 1 and Model 2 running for 20000 training iterations were 68 and 100 minutes respectively. For quick reference we have collected all learning parameters of the classic auto-encoder and the developed CAE in Table 5.\nAs mentioned above, during experimental research we have visualized the feature maps and the outputs of the hidden layer neurons (we did not visualize trainable filters yet) in order to understand how data are processing inside the CAE. The implementation of such visualization is simple and straightforward thanks to the Matlab wrapper in Caffe. We just created 15 .prototxt files corresponding to the number of CAE layers. After training, and having an appropriate .caffemodel file, we call Caffe for each of those .prototxt files. Received values, produced by each layer were visualized. An example showing how CAE Model 2 encodes and decodes the digit \u201c2\u201d is depicted in Fig. 7. We also calculated the minimum and maximum values for each conv/deconv layer (specified in square brackets in the title of the pictures). This allowed us to understand that in the failed experiments, the outputs of deconv2 and deconv1 layers were saturated, and therefore the pixels of the restored image had the value 0 and the loss values during training were NaN (Not A Number).\nAll appropriate .prototxt files of the developed CAE along with all Matlab scripts which we have used for all visualizations will be published in the Caffe user group [13]. It is necessary to note, that the developed CAE model is working on the version of Caffe used/distributed by Noh et al [24] (the date of the files in this version is 16.06.2015). We ran the CAE model on the latest version we have (the date of files in this version is 12.07.2015), but the error \u201cCheck failed: 4 == bottom[0]->num_axes() (4 vs. 2) Input must have 4 axes, corresponding to (num, channels, height, width)\u201d occurred. It seems, in the newest version, the developers [12] have changed the internal representation of inner product layers: it is a 2-dimensional array now, not 4- dimensional, as it was in the previous version(s). We will be researching how to run the proposed CAE model on the latest version of Caffe in the future."}, {"heading": "4. Conclusions", "text": "The development of a deep (stacked) convolutional auto-encoder in Caffe deep learning framework and its experimental evaluation are presented in this paper. The paper contains the first research results of our deep convolutional auto-encoder. The proposed model is simple since it does not contain pooling/unpooling layers yet. In contrast to the classic stacked auto-encoder proposed by Hinton et al [2], convolutional autoencoders allow using the desirable properties of convolutional neural networks for image data processing tasks while working within an unsupervised learning paradigm. The results of our experimental research show comparable accuracy in a dimensionality reduction task compared with the classic auto-encoder on the example MNIST dataset.\nDuring the creation of this convolutional autoencoder we have used well-known principles, mentioned in Section 2 above, which are used by many machine learning researchers every day. Nevertheless, we believe that our approach and research results, presented in this paper, will help other researchers in general - and the Caffe user group in particular - to create efficient deep neural network architectures in future.\nApplication of the developed deep convolutional auto-encoder for our tasks in the neuroscience field and creation of more complex architectures with pooling/unpooling layers are the directions of our future research."}, {"heading": "Acknowledgements", "text": "We would like to thank the Caffe developers for creating such a powerful framework for deep machine learning research. We thank Hyeonwoo Noh and Dr. David Silver for discussions on some results presented in this paper and Dr. Eric Chalmers for the editorial help. We gratefully acknowledge the financial support provided by the NSERC CREATE BIP program and the Department of Neuroscience, University of Lethbridge, Canada."}], "references": [{"title": "Stacked Convolutional Auto-Encoders for Hierarchical Feature Extraction", "author": ["J. Masci", "U. Meier", "D. Ciresan", "J. Schmidhuber"], "venue": "Lecture Notes in Computer Science,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2011}, {"title": "Reducing the Dimensionality of Data with", "author": ["G.E. Hinton", "R.R. Salakhutdinov"], "venue": "Neural Networks, Science,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2006}, {"title": "Gradientbased Learning Applied to Document Recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 1998}, {"title": "Unsupervised Learning of Invariant Feature Hierarchies with Applications to Object Recognition", "author": ["M. Ranzato", "F.J. Huang", "Y.-L. Boureau", "Y. LeCun"], "venue": "IEEE Conference on Computer Vision and Pattern Recognition (CVPR", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2007}, {"title": "Extracting and Composing Robust Features with Denoising  Autoencoders", "author": ["P. Vincent", "H. Larochelle", "Y. Bengio", "P.A. Manzagol"], "venue": "Proceedings of the 25th International Conference on Machine Learning (ICML", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2008}, {"title": "Dimensionality Reduction by Learning an Invariant Mapping", "author": ["R. Hadsell", "S. Chopra", "Y. LeCun"], "venue": "IEEE Computer Society Conference on Computer Vision and Pattern Recognition,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2006}, {"title": "Learning Deconvolution Network for Semantic Segmentation, arXiv:1505.04366v1", "author": ["H. Noh", "S. Hong", "B. Han"], "venue": null, "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2015}, {"title": "Visualizing and Understanding Convolutional Networks, Lecture", "author": ["M.D. Zeiler", "R. Fergus"], "venue": "Notes in Computer Science,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}, {"title": "Accelerating t-SNE using TreeBased Algorithms", "author": ["L.J.P. van der Maaten"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "26", "shortCiteRegEx": "26", "year": 2014}, {"title": "Adaptive Deconvolutional Networks for Mid and High Level Feature Learning, 2011", "author": ["M.D. Zeiler", "G.W. Taylor", "R. Fergus"], "venue": "IEEE International Conference on Computer Vision (ICCV\u201911),", "citeRegEx": "27", "shortCiteRegEx": "27", "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "It is trained in unsupervised fashion allowing it to extract generally useful features from unlabeled data, to detect and remove input redundancies and to present essential aspects of analyzing data in robust and discriminative representations [1].", "startOffset": 244, "endOffset": 247}, {"referenceID": 1, "context": "Compared to the architecture of a classic stacked auto-encoder [2], CAE may be better suited to image processing tasks because it fully utilizes the properties of convolutional neural networks, which have been proven to provide better results on noisy, shifted and corrupted image data [3].", "startOffset": 63, "endOffset": 66}, {"referenceID": 2, "context": "Compared to the architecture of a classic stacked auto-encoder [2], CAE may be better suited to image processing tasks because it fully utilizes the properties of convolutional neural networks, which have been proven to provide better results on noisy, shifted and corrupted image data [3].", "startOffset": 286, "endOffset": 289}, {"referenceID": 0, "context": "Theoretical issues of CAE developments are well described in many research papers [1, 4-6].", "startOffset": 82, "endOffset": 90}, {"referenceID": 3, "context": "Theoretical issues of CAE developments are well described in many research papers [1, 4-6].", "startOffset": 82, "endOffset": 90}, {"referenceID": 4, "context": "Theoretical issues of CAE developments are well described in many research papers [1, 4-6].", "startOffset": 82, "endOffset": 90}, {"referenceID": 1, "context": "The first is a classic stacked auto-encoder, proposed by Hinton et al [2], and the second is a Siamese network, proposed by LeCun et al [22].", "startOffset": 70, "endOffset": 73}, {"referenceID": 5, "context": "The first is a classic stacked auto-encoder, proposed by Hinton et al [2], and the second is a Siamese network, proposed by LeCun et al [22].", "startOffset": 136, "endOffset": 140}, {"referenceID": 2, "context": "The Siamese network consists of two LeNet [3] architectures coupled in a Siamese way and ended by a contrastive loss function.", "startOffset": 42, "endOffset": 45}, {"referenceID": 2, "context": "Following the success of the LeNet [3] architecture and the paper [1] which showed experimentally that convolutional+pooling layers provide a better representation of convolutional filters and, furthermore, classification results, we started to construct CAE by the scheme conv1-pool1-conv2-pool2 in the encoder part and deconv2-unpool2-deconv1-unpool1 in the decoder part.", "startOffset": 35, "endOffset": 38}, {"referenceID": 0, "context": "Following the success of the LeNet [3] architecture and the paper [1] which showed experimentally that convolutional+pooling layers provide a better representation of convolutional filters and, furthermore, classification results, we started to construct CAE by the scheme conv1-pool1-conv2-pool2 in the encoder part and deconv2-unpool2-deconv1-unpool1 in the decoder part.", "startOffset": 66, "endOffset": 69}, {"referenceID": 6, "context": "We also have been inspired by the work of Hyeonwoo Noh et al [23] and we have used their nonofficial Caffe distribution [24], where they have implemented an unpooling layer, which is still absent in the official Caffe distribution.", "startOffset": 61, "endOffset": 65}, {"referenceID": 0, "context": "Masci et al [1] showed that convolutional architectures without max-pooling layers give worse results, but architectures without pooling layers are definitely working architectures, and it is a good point to start first with some simpler working architecture and then to increase the complexity of the model.", "startOffset": 12, "endOffset": 15}, {"referenceID": 3, "context": "After we have eliminated pooling-unpooling layers and added a non-linear activation function, <Sigmoid> in our case, after each convolutional and deconvolution layer [4], we have noticed, that the developed model is very similar to the classic auto-encoder model [2].", "startOffset": 166, "endOffset": 169}, {"referenceID": 1, "context": "After we have eliminated pooling-unpooling layers and added a non-linear activation function, <Sigmoid> in our case, after each convolutional and deconvolution layer [4], we have noticed, that the developed model is very similar to the classic auto-encoder model [2].", "startOffset": 263, "endOffset": 266}, {"referenceID": 7, "context": "Visualization of the values (along with its numerical representation) of trainable filters, feature maps and hidden units from layer to layer allows better understanding of how data are converted/processed from layer to layer [25]; 4.", "startOffset": 226, "endOffset": 230}, {"referenceID": 3, "context": "The main purpose of the activation function after each convolutional/deconvolution layer is non-linear data processing [4].", "startOffset": 119, "endOffset": 122}, {"referenceID": 1, "context": "presented the best architecture (3 row in Table 1) in his paper [2], but, as mentioned above, we wanted to research the generalization properties of smaller and bigger architectures in order to use this experience to create our CAE model.", "startOffset": 64, "endOffset": 67}, {"referenceID": 1, "context": "According to Hinton et al [2] these architectures are called 2-, 10and 30-dimensional auto-encoders.", "startOffset": 26, "endOffset": 29}, {"referenceID": 8, "context": "We have used t-SNE technique [26] to visualize 10and 30- dimensional data, produced by auto-encoder.", "startOffset": 29, "endOffset": 33}, {"referenceID": 9, "context": "Since the deconvolution operation has the same nature as convolution [27], we have used the same approach to calculate the number of trainable parameters both in the encoder and decoder parts.", "startOffset": 69, "endOffset": 73}, {"referenceID": 8, "context": "Similarly we have used t-SNE technique [26] to visualize 10- and 30- dimensional data, produced by the 10- and 30dimensional CAEs.", "startOffset": 39, "endOffset": 43}, {"referenceID": 1, "context": "In contrast to the classic stacked auto-encoder proposed by Hinton et al [2], convolutional autoencoders allow using the desirable properties of convolutional neural networks for image data processing tasks while working within an unsupervised learning paradigm.", "startOffset": 73, "endOffset": 76}], "year": 2015, "abstractText": "The development of a deep (stacked) convolutional auto-encoder in the Caffe deep learning framework is presented in this paper. We describe simple principles which we used to create this model in Caffe. The proposed model of convolutional autoencoder does not have pooling/unpooling layers yet. The results of our experimental research show comparable accuracy of dimensionality reduction in comparison with a classic auto-encoder on the example of MNIST dataset.", "creator": "Acrobat PDFMaker 11 \u0434\u043b\u044f Word"}}}