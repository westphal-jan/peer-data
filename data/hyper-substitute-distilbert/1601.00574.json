{"id": "1601.00574", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-Jan-2016", "title": "NFL Play Prediction", "abstract": "based to nfl game data we try to predict competitive benefits of overall play in multiple different markets. such application of tracking combines the following : simply plugging in optimal play stages one helped determine the best play versus her given campaign each real time. while the outcome of a run can mean described different many ways europe had the most successful players with a newly defined measure that we call \" probability \". we see progress principle as a first may also extend predictive analysis into mathematical playcalling.", "histories": [["v1", "Mon, 4 Jan 2016 17:30:07 GMT  (1301kb,D)", "http://arxiv.org/abs/1601.00574v1", "14 pages"]], "COMMENTS": "14 pages", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["brendan teich", "roman lutz", "valentin kassarnig"], "accepted": false, "id": "1601.00574"}, "pdf": {"name": "1601.00574.pdf", "metadata": {"source": "CRF", "title": "NFL Play Prediction", "authors": ["Brendan Teich", "Roman Lutz", "Valentin Kassarnig"], "emails": ["vkassarnig}@cs.umass.edu"], "sections": [{"heading": "1 Introduction", "text": "Game strategy and playcalling are an integral part of American Football. Especially at the professional level coaches spend most of their time either analyzing the opponent\u2019s past games to find out about weaknesses or teaching their players how to take advantage of the opponent\u2019s weaknesses. Even though American Football is a very data-driven sports coaches have the final say over playcalling. This often leads to controversy over whether coaches made good or bad decisions. A prime example is this year\u2019s Superbowl where the Seahawks went with a pass instead of a run and ended up getting intercepted and loosing the game 1. We argue that computers could assist coaches or even completely take over playcalling duties by predicting the outcome of specific plays. For such an application we build the foundation by providing predictions for the outcome of a play based on the game situation and the play description. As a next step coaches could vary the play description using plays from their own playbook and see which play has the best chance of succeeding. This report is structured as follows: Section 2 looks at related work on play prediction. In Section 3 we describe the data set we used and how we obtained it. We examine the features of the data set in greater detail in Section 4. In Section 5 we identify preferable targets for our predictions, namely a binary success variable, the number of yards gained, and a newly defined real-valued progress measure. Furthermore, we describe the various methods we used for classification and regression on the outcome of plays in Section 6 before evaluating and comparing the results in Section 7. Once the foundation is established, we give an example of how this work could be used in Section 8. Finally, Section 9 concludes with a summary and future outlook."}, {"heading": "2 Related work", "text": "Stilling and Critchfield [6] used generalized matching equations to analyze the relationship between play selection and yards gained. They found that undermatching, which may result from the tendency of coaches to \u201dmix up\u201d plays, a bias towards rushing plays, and that the generalized matching equation accounted for a majority of the variability in play selection. Using specialized equations\n* The authors contributed equally to this work. 1http://bleacherreport.com/articles/2350553-questionable-play-call-costs-seahawks-super-bowl-victory\nar X\niv :1\n60 1.\n00 57\n4v 1\n[ cs\n.L G\n] 4\nJ an\n2 01\nfor each down revealed that first down is biased towards rushing, and later downs are biased towards passing. It was also found that rushing was preferred when fewer than 4 yards remained to first down, and that passing was preferred when more than 10 yards remained. Kovash and Levitt [7] analyzed whether in American Football and Baseball decisions conform with Minimax. By studying 125,000 NFL plays from 2001-2005 they found negative serial correlation and thus predictable tendencies of coaches in calling run or pass plays. Specifically, their results indicate that playcalling should focus more on passing - a conclusion that is inconsistent with Minimax Theory and that at the same time is the basis for the main application of this work. Mitchell [8] enhanced the matching pennies model by Kovash and Levitt [7] by adding the notion of investment to playcalling. This helps explain the commonly accepted ideas of \u201drunning to wear down a defense\u201d and \u201drunning to set up the pass\u201d. Reed, Critchfield and Martens [9] analyzed playcalling with the Generalized Matching Law, a mathematical model of operant choice. They discovered a bias for calling rushing plays and undermatching in the sense of imperfect playcalling. McGarrity and Linnen [5] developed a game theoretic model to analyze how a team changes its play calling when the starting quarterback is replaced by its backup. Replacement quarterbacks are usually less-experienced which means passing the ball is of higher risk. The paper refers to standard optimization theories which suggest that the team should run more often since in contrast to the quarterback the productivity of the running back has not changed. However, their findings say teams will not change their play calling because the defense will expect more run plays and will consequently play more often against them. That is, quarterback substitutions have less impact than expected. That supports our approach of considering only team-based features and disregarding features based on individuals. Molineaux, Aha and Sukthankar [11] used plan recognition to identify the defensive strategy and thus improve the results of their case-based Q-learning algorithm. They evaluated this on the opensource American Football simulator Rush 2008. While this is an abstraction from real football at the moment they are working on making it more realistic in the future for their purposes. Lutz [21] already identified related work some of which we refer to in the following. Most research in sports prediction focuses on predicting the winner of a match instead of predicting individual plays. Min et al. [15] used Bayesian inference and rule-based reasoning to predict the result of American Football matches. Their work is based on the idea that sports is both highly probabilistic and at the same time based on rules because of team strategies. Sierra, Fosco and Fierro [14] used classification methods to predict the outcome of an American Football match based on a limited number of game statistics excluding most scoring categories. In their experiments, linear Support Vector Machines had by far the most accurate predictions and ranked above all expert predictions they compared with. Similarly, Harville [16] used a linear model for the same task. A Neural Network approach to predicting the winner of College Football games was proposed by Pardee [17]. His accuracy of 76% improved on expert predictions. Purucker [13] and Kahn [12] applied neural networks to NFL game predictions and mostly improved on existing accuracies. A problem of both their results is the small test set since they only evaluated on a total of two weeks of NFL games. Stefani [18] used an improved least squares rating system to predict the winner for nearly 9000 games from College and Pro Football and even other sports. Fokoue and Foehrenbach [19] have analyzed important factors for NFL teams with Data Mining. Their results are especially useful for this work because the first step for predicting plays involves identifying important features."}, {"heading": "3 Data set", "text": "The API nflgame [2] provides access to data from all NFL games of the last six years (2009 - 2014) on a play-by-play basis. From this data we extracted a total of 12 features and filtered out irrelevant plays which left us with 177245 plays. The following sections describe this process and the features in greater detail."}, {"heading": "4 Features", "text": ""}, {"heading": "4.1 Feature extraction", "text": "For each play we receive a data structure from the API. This structure contains basic information about the current situation of the game like the game clock, the field position, the possessing team, etc. It also contains a string which describes what happened on the field. Apart from the actual play this string can describe injuries, timeouts, quarterback substitutions, penalties, or other information.\nSince we are only interested in the actual plays we need to filter out all the irrelevant information. That is, we need to find the sentence which describes the actual play. In cases of penalties we reject the entire string because a penalty impacts the course of the play. Furthermore, there are plays which are of no interest for us which will be also ignored. These include field goals, punts, sacks, fumbles, etc. The final string that describes the current play will then be parsed to extract the features. Table 1 lists and describes all the features we use."}, {"heading": "4.1.1 Examples", "text": "Table 6 in the Appendix shows some example play descriptions and the extracted features and labels. Omitted features have value 0. Note that not all features are extracted from the description string. Some features are directly obtained from the data structure obtained from the API. The table also lists the different labels which are explained in section 5."}, {"heading": "4.2 Encoding", "text": "Some of our features have categorical values. For example either of the features Team and Opponent take on a value representing one of the 32 teams. Simply numbering the teams from 1 to 32 would not represent the real situation because team #1 is not closer to team #2 than it is to team #32. Consequently, we need a more sophisticated encoding. For that reason, we have chosen one-hot encoding for our categorical features. That is, each categorical feature is replaced by k binary features where k is the number of possible values. For example, the feature \u201dteam\u201d is replaced by 32 features like team = GB, team = NE, and so on. In each sample only one of these features has the value \u201d1\u201d while all others are \u201d0\u201d. Encoding all our categorical features of our data set expands the size from 12 to 77 dimensions."}, {"heading": "4.3 Exploratory data analysis", "text": "In order to analyze the distribution of data we performed a principal component analysis (PCA). Figure 1 shows a plot of the variance ratios of the resulting components. The first component already covers more than 99.7% of the variance. Figure 2 shows a projection of the entire data set on the two dimnsions that represent most of the variance. Red points represent successful plays and blue points are failure plays. The distribution of the plays shows some sort of pattern or structure. Noticeable are the two red clusters close to the left and the right edge. However, the data is far too noisy to separate the two classes.\nNote that PCA relies on continuous-valued variables while our data consists of a mixture of continuous and binary values. As discussed by Yu and Tresp [20] there are some issues when applying PCA to mixed types of data. Hence, in our case PCA helps us to explore the data but it is not suitable for a dimensionality reduction. A different approach of reducing the dimensionality\nis to just remove features which have only very little impact on the classification. One method is to calculate the analysis of variance (ANOVA) F-test statistic and rank the features according to their score. The ANOVA F-Test statistic is the ratio of the average variability among groups to the average variability within groups. That is, it determines whether the means between the two groups are significantly different. Table 7 in the Appendix shows the computed F-values of each feature. It can be seen that the feature for the remaining distance to the next first-down (togo) has by far the highest score. An interesting observation is the wide range of scores of team-specific features. For example the feature for the New England Patriots (team = NE) has a score which is around a million times higher than for the Miami Dolphins (team = MIA). This gives evidence that some teams might be more predictable than others."}, {"heading": "5 Targets", "text": "Apart from the features we also have to extract the ground truth labels of each play. Since we pursue multiple approaches we also have to extract multiple labels. Table 2 lists and describes all the labels we use.\nWhile the prediction of success is a classification task, yards and progress are real numbers requiring regression methods. We examine various methods for classification and regression in Section 6. When we use the binary value success we define successful plays as plays which either obtain a first down or score a touchdown. In all other cases the play will be classified as failure. With this target definition our data set is quite imbalanced since it contains about 70% unsuccessful and only 30% successful samples. That imbalance needs to be taken into account at the different classification methods or else a classifier that classifies each sample as \u201dfailure\u201d would achieve a classification accuracy of 70% which is actually quite good. For that reason we do not only evaluate the accuracy but also the recall and the precision. Those are two error measures which evaluate the quality of the classification. The recall tells how many of the successful samples were classified correctly, while the precision tells how many of the success predictions were actually correct. Reconsidering the case were all samples are predicted as \u201dfailure\u201d, this would yield a precision and recall of 0%. So, although the accuracy is quite high the quality of the classification is pretty poor. A good way to combine recall and precision is the F1 score which is the harmonic mean of those two values. The\nF1 score is calculated as shown in the following equation:\nF1 = 2 \u00b7 precision \u00b7 recall precision+ recall\nStill, we argue that both success and yards are unable to capture whether the result of a play is actually desirable. For example, a 9 yard gain on 1st down and 10 yards to go is given the same label (0) as a 10 yard loss. success can not represent this difference. yards has similar issues. Imagine a team has a fourth down and 28 yards to go, but achieves only 27 yards. In most situations 27 yards is a great result for a play, but not here since the play would result in a turnover on downs. yards would still get the very good value of 27. As a consequence of these observations we invented a completely new success measure which we call progress. The special thing about this label is that also takes the current down into account. It is calculated as follows with down representing the current down, togo being the remaining yards to go for a first down and gained representing the yards gained on the play:\nprogress(down, togo, gained) =  0 down \u2208 {3, 4} and gained < togo( gained togo )down down \u2208 {1, 2} and gained < togo\n1 gained \u2265 togo\nThe idea behind this is the following: If a new first down is not reached on third or fourth down it is (in most cases) a failure on the side of the offense and will result directly in a turnover on downs (in case of fourth down) or a punt (in case of third down). We neglect the case when teams are in field goal range and can still score because the ultimate goal is always to have a touchdown. These cases are all combined and labeled as 0 which represents failure. Any real number larger than zero represents success to some extent. The larger the number the better. A first down is still represented as 1. Since 0 is a failure and 1 is a first down, it intuitively makes sense to label progress towards a first down with a number between 0 and 1. Progress even after the first down does not get a larger value. If the first down was not reached, the value is dependent on the ratio of the remaining yards and the yards that were gained. Depending on the down this ratio can be squared. The idea behind this is as follows: Imagine the following two situations: (1) 5 yards were gained on first down. (2) 5 yards were gained on second down (after no gain on first down). Even (2) is solid and leaves only 5 yards for third down. The ratio values are therefore 510 and 5 10 for first and second down, respectively. However, the second value is as large as the first even though the remaining attempts are less. In order to fix this issue, we argue that whichever gain is achieved on second down should\nbe penalized in some way since only one additional attempt is available assuming fourth down is used for a punt or field goal. After first down, two more attempts are left which puts the offense in a more comfortable situation. The actual progress scores using a quadratic function for second down which are therefore 510 = 0.5 and ( 5 10 )\n2 = 0.25. Figure 3 illustrates the idea. While first down progress scores are awarded linearly, second down progress scores are calculated by a quadratic function. The closer one gets to a first down, the closer the progress values of the two get. Our first idea of a progress measure increased linearly even after the first down for additional yards, but with the larger numbers even the average error increased dramatically. For example, a prediction of 1.0 on first down - or in other words a 10 yard gain - would result in an error of 8 if the play was actually a 90 yard play (9.0 real score) whereas an incomplete pass would only result in an error of 1 (0.0 real score). This is even when the play was actually a 10 yard pass and the receiver managed to break free. Intuitively, the positive prediction should get a relatively low error which is not the case. We argue that it\u2019s more about getting a first down or not instead of whether we make some yards more or less after the first down since it\u2019s the first down that keeps the offense on the field. Due to this reasoning we decided for a constant value of 1 for all play that reach a new first down."}, {"heading": "6 Methods", "text": "This section shortly explains all methods we use for classification and regression."}, {"heading": "6.1 Classification Trees", "text": "Classification Trees [10] are binary trees where each internal node defines a rule for one of the input features which divides the data into two subsets aiming for the best split. In order to avoid overfitting it is useful to define a maximum depth for the tree. We used balanced class weighting to handle the imbalanced data. That is, the weighting factors for the classes are automatically adjusted to their inverse frequencies in the input data.\nFigure 4 shows a simple classification tree trained on our data set. It contains only a single decision rule which divides the data set into two subsets. The only decision rule here is whether the next first down is more than 7.5 yards away. That is, all plays where the team has 7.5 yards or less to go for their next first down are classified as \u201dsuccess\u201d and all others as \u201dfailure\u201d. This simple rule already gives a surprisingly good accuracy of 69.2% with 47.9% precision and 50.0 % recall.\nTable 8 in the Appendix shows the classification performance of classification trees with different depth limitations. The classification tree with just one rule achieves actually the best accuracy but its precision and recall are quite bad. The tree with a maximum depth of six achieves the highest F1 score."}, {"heading": "6.2 Regression Trees", "text": "Regression trees are pretty similar to classification trees as they also use a set of rules to split the data into subsets. However, each final remaining set gets labeled with a real value.\nFigure 5 shows a simple regression tree trained on our data set for predicting the gained distance on a play. It contains only a single decision rule which divides the data set into two subsets. The only decision rule here is whether a deep pass has been played. That is, the first subset contains all plays with either a short pass or a run play and the second subset contains all plays with a deep pass. The first subset gets labeled with 5.3 yards and the second subset with 11.1 yards. With this decision rule we achieve a MAE of 5.7 yards and RMSE of 8.4 yards.\nTable 9 in the Appendix shows the performance of the regression tree with different depth limitations. It can be seen that the performance stays quite constant. However, using no depth limitation causes the algorithm to overfit the training data which results in poor performance."}, {"heading": "6.3 Nearest Centroid", "text": "For Nearest Centroid classification we first calculate the centroids of the success and failure labels of the feature vectors in our training set. Then to predict the classification of a given feature vector we simply assign it to the class with the nearest centroid. This method provided approximately 50% accuracy, precision, and recall after we undersampled the training set to have equal amounts of success and failure labels, so overall it is no better than a random assignment of the labels. This suggests that the classifications are not divided into two distinct clusters some distance apart, but are positioned in a way that makes distance from the centroids a poor indicator of class."}, {"heading": "6.4 Linear Discriminant Analysis", "text": "For our Linear Discriminant Analysis classification we used Scikit Learn\u2019s LDAClassifer. We then compared the results between using Singular Value Decomposition, Least Squares, and Eigenvalue Decomposition to solve the LDA problem before classification. Both the Least Squares and Eigenvalue Decomposition solutions also used shrinkage to try and further improve the accuracy on our high dimensional feature vectors. All three solutions gave similar results with around 66% classification accuracy and F1 scores."}, {"heading": "6.5 Support Vector Machines", "text": "For support vector machines we first tried a simple linear decision boundary on an undersampled training set, and after performing a search over varying penalty values using 5-fold validation to compare performance. Our best result was 57.72% accuracy at C = 2\u22125. We then tried using a Gaussian radial basis function as our kernel and performed a grid search overC \u2208 {2k|k \u2208 [\u22125, 17]} and \u03b3 \u2208 {2k|k \u2208 [\u221217, 4]}. We achieved our best accuracy of 66.65% at C = 211 and \u03b3 = 2\u221217. This accuracy is similar to what we achieved using the LDA Classifiers, but not an improvement."}, {"heading": "6.6 Support Vector Regression", "text": "For regression we considered two different metrics: yards to go, and progress, which are discussed in the Section 5. Once again we grid searched over values of C \u2208 {2k|k \u2208 [\u22125, 17]} and \u03b3 \u2208 {2k|k \u2208 [\u221217, 4]} to try and find good hyperparameters for support vector regression. Our best results were found at C = 27 and \u03b3 = 2\u221217 with a mean error of 5.207 yards and root mean squared error of 8.977 yards. We were left dissatisfied by the performance in this regard as most frequently a first down is less than 10 yards away, so an error of 5 yards could be very significant. For this reason we continued using the progress metric, and obtained a mean error of 0.1351 and root mean squared error of 0.2332. As a rough estimate you can consider 0.13 progress to be approximately 13% of the distance to a first down. So with the progress metric we obtained a much more useful prediction in terms of mean error, although the root mean squared error of 0.2332 shows that there is still quite a bit of variance in our results."}, {"heading": "6.7 Artificial Neural Networks", "text": "Our Artificial Neural Network implementation uses the PyBrain [3] library. PyBrain allows the user to specify a number of parameters including the number of hidden layers, the number of units per hidden layer, the type of units in the hidden layers and the maximum number of epochs for training the network.\nIt is worth mentioning that the training of the Neural Networks took considerably longer than model fitting for any other method which is why less configurations were explored. Moreover, this could be a disadvantage for a scenario when the network has to be retrained in real-time between plays or drives. For our experiments it meant that re-training the networks after taking into account the imbalanced data set for success classification was not possible. Without that, the neural networks classified almost everything (or nothing) as a failure. We only present values that were reasonable. Especially the networks with linear units in the hidden layers performed badly and were not used for further experiments. The results are shown in Tables 10, 11 and 12 in the Appendix. The only measure where the neural networks performed equally well compared to other regression methods was yards with a MAE of 5.524 and a RMSE of 8.751."}, {"heading": "7 Evaluation and Comparison", "text": "The complete result tables are in the Appendix. Tables 3, 4 and 5 contain a compressed version of the results for the success, yards and progress measures, respectively. We report only the data of the configuration with the best results for each of the approaches.\nWhen comparing the results for success accuracy is not the main criterion. Consider the real-world scenario where a team uses an application based on ones of these methods to select the next play. We have to make sure that plays that would result in a failure are classified as such, even if it is at the cost of classifying successful plays as failures. This is represented by precision or, in other words, the portion of true positives among all positives. High recall and accuracy, on the other hand, are nice to have but not as important. Based on this observation Support Vector Machines (SVM) using a Radial Basis Function (RBF) kernel is the best method with a precision of 67.62%. In other words, in two thirds of the cases where this method predicts a play to result in a first down or touchdown the play actually is successful. Other methods perform similarly well and have a slightly higher recall and accuracy. Still, for applications this is most likely not enough.\nAs an alternative to success we also considered yards. As expected, yards is not a useful measure of success since it is prone to have large errors even for comparably good predictions, e.g. a 80-yard gain on a play with a predicted 30-yard gain results in a huge error. This is confirmed by the results in Table 4. The method with the lowest mean absolute error of 5.207 (MAE) is the RBF SVR. Considering that the distance to a first down is initially 10 yards, an error of more than 5 yards is quite substantial. The same applies to the root mean squared error (RMSE) of more than 8\nfor all methods. We conclude that yards can not be used for a good application due to the high errors.\nFinally, let us evaluate the results of the regression models using the progress measure that we defined in Section 5. Apart from the regression trees all of the other three methods performed fairly well. The best results were achieved by the RBF SVR with a MAE of 0.1351 and a RMSE of 0.2332. In order to understand the intuition let us consider the following example. For a typical 1st and 10 situation where no first down is achieved this would mean that our prediction is on average only 1.3 yards away from the real gain. For real predictions this is a very promising result. It is even more encouraging when we consider that third and fourth down situations still have potentially high errors since it is about predicting a binary variable. For these experiments, we did not round the third and fourth down predictions to 0 or 1 which might reduce the error even further."}, {"heading": "8 Applications", "text": "Given that our methods evaluate the success of a play in a certain game situation one can go ahead and use all different plays a team has learnt. By that, the coach can determine which play is suited best in this particular game situation. Unfortunately, it is impossible to evaluate the effectiveness of this method based on our data set. We only have the result of the one play that was chosen, not the results of all plays that are in the team\u2019s playbook. The only way to measure whether it is indeed useful is to have actual teams use the method for a while and not use it for another time period and compare the success. Even then, one could argue that a number of factors other than the playcalling play a role including injuries, form, temperature, weather, etc."}, {"heading": "9 Conclusion and Future Work", "text": "In this work we aimed at providing predictions for the outcome of a specific play in a particular game situation in the NFL. This is a novel approach that could be used to identify the best play in real games by finding the available play with the maximum success before the play is actually executed. In order to define a proper measure of success of a play we have come up with a new measure called progress that is both intuitive and more accurately predictable than other measures at the same time. The accuracy we achieved by using a number of different regression models is promising for our intended application. Especially with more comprehensive data (formations, routes, players, etc.), more samples, advanced regression methods to get higher accuracy, and possibly by considering series of plays instead of single plays, the actual use in real-world playcalling is viable. Furthermore, it could be useful to train classification or regression methods on plays of a specific team. The ANOVA statistic has shown that some teams are probably more predictable than others. This approach seems also more relevant for a real-world application since a coach is only interested in finding the best play for his own team. The same approach could be used for a certain opponent. For example, when a team has a winning streak and seems to be unbeatable everyone is interested in finding out how to win against this team.\nAll of our source code is on GitHub [1]. We explicitly encourage others to try using, modifying and extending it. Feedback and ideas for improvement are most welcome. Finally, we would like to give credit to three open-source projects without which this work would not have been possible: scikit-learn [4], PyBrain [3] and nflgame [2]."}], "references": [{"title": "Scikit-learn: Machine learning in Python.", "author": ["Pedregosa", "Fabian", "Gal Varoquaux", "Alexandre Gramfort", "Vincent Michel", "Bertrand Thirion", "Olivier Grisel", "Mathieu Blondel"], "venue": "The Journal of Machine Learning Research", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2011}, {"title": "Pass or run: an empirical test of the matching pennies game using data from the National Football League.", "author": ["McGarrity", "Joseph P", "Brian Linnen"], "venue": "Southern Economic Journal 76,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2010}, {"title": "The Matching Relation and situation-specific bias modulation in professional football play selection.", "author": ["Stilling", "Stephanie T", "Thomas S. Critchfield"], "venue": "Journal of the Experimental Analysis of Behavior 93,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2010}, {"title": "Professionals do not play minimax: evidence from Major League Baseball and the National Football League. No. w15347", "author": ["Kovash", "Kenneth", "Steven D. Levitt"], "venue": "National Bureau of Economic Research,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2009}, {"title": "Dynamic Matching Pennies with Asymmetries: An Application to NFL Play Calling", "author": ["Mitchell", "Matthew"], "venue": "Working Paper,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2010}, {"title": "The generalized matching law in elite sport competition: Football play calling as operant choice.", "author": ["Reed", "Derek D", "Thomas S. Critchfield", "Brian K. Martens"], "venue": "Journal of Applied Behavior Analysis 39,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2006}, {"title": "Classification and regression trees", "author": ["Breiman", "Leo", "Jerome Friedman", "Charles J. Stone", "Richard A. Olshen"], "venue": "CRC press,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 1984}, {"title": "Beating the Defense: Using Plan Recognition to Inform Learning Agents.", "author": ["Molineaux", "Matthew", "David W. Aha", "Gita Sukthankar"], "venue": "In FLAIRS Conference", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2009}, {"title": "Neural network prediction of NFL football games.", "author": ["Kahn", "Joshua"], "venue": "World Wide Web electronic publication", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "Neural network quarterbacking.", "author": ["Purucker", "Michael C"], "venue": "Potentials, IEEE 15,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1996}, {"title": "A compound framework for sports results prediction: A football case study.", "author": ["Min", "Byungho", "Jinhyuck Kim", "Chongyoun Choe", "Hyeonsang Eom", "RI Bob McKay"], "venue": "Knowledge-Based Systems 21, no", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2008}, {"title": "Predictions for National Football League games via linear-model methodology.", "author": ["Harville", "David"], "venue": "Journal of the American Statistical Association", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 1980}, {"title": "An artificial neural network approach to college football prediction and ranking.", "author": ["Pardee", "Michael"], "venue": "University of WisconsinElectrical and Computer Engineering Department", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1999}, {"title": "Improved least squares football, basketball, and soccer predictions.", "author": ["Stefani", "Raymond T"], "venue": "IEEE transactions on systems, man, and cybernetics 10,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1980}, {"title": "Foehrenbach. \u201dA Statistical Data Mining Approach to Determining the Factors that Distinguish Championship Caliber Teams in the National Football League.", "author": ["Fokoue", "Ernest", "Dan"], "venue": null, "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2013}, {"title": "Heterogenous Data Fusion via a Probabilistic Latent-Variable Model.", "author": ["Yu", "Kai", "Tresp", "Volker"], "venue": "In Proceedings of 17th International Conference on Architecture of Computing Systems - Organic and Pervasive Computing (ARCS", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2004}, {"title": "Fantasy Football Prediction", "author": ["Lutz", "Roman"], "venue": null, "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}], "referenceMentions": [{"referenceID": 2, "context": "Stilling and Critchfield [6] used generalized matching equations to analyze the relationship between play selection and yards gained.", "startOffset": 25, "endOffset": 28}, {"referenceID": 3, "context": "Kovash and Levitt [7] analyzed whether in American Football and Baseball decisions conform with Minimax.", "startOffset": 18, "endOffset": 21}, {"referenceID": 4, "context": "Mitchell [8] enhanced the matching pennies model by Kovash and Levitt [7] by adding the notion of investment to playcalling.", "startOffset": 9, "endOffset": 12}, {"referenceID": 3, "context": "Mitchell [8] enhanced the matching pennies model by Kovash and Levitt [7] by adding the notion of investment to playcalling.", "startOffset": 70, "endOffset": 73}, {"referenceID": 5, "context": "Reed, Critchfield and Martens [9] analyzed playcalling with the Generalized Matching Law, a mathematical model of operant choice.", "startOffset": 30, "endOffset": 33}, {"referenceID": 1, "context": "McGarrity and Linnen [5] developed a game theoretic model to analyze how a team changes its play calling when the starting quarterback is replaced by its backup.", "startOffset": 21, "endOffset": 24}, {"referenceID": 7, "context": "Molineaux, Aha and Sukthankar [11] used plan recognition to identify the defensive strategy and thus improve the results of their case-based Q-learning algorithm.", "startOffset": 30, "endOffset": 34}, {"referenceID": 16, "context": "Lutz [21] already identified related work some of which we refer to in the following.", "startOffset": 5, "endOffset": 9}, {"referenceID": 10, "context": "[15] used Bayesian inference and rule-based reasoning to predict the result of American Football matches.", "startOffset": 0, "endOffset": 4}, {"referenceID": 11, "context": "Similarly, Harville [16] used a linear model for the same task.", "startOffset": 20, "endOffset": 24}, {"referenceID": 12, "context": "A Neural Network approach to predicting the winner of College Football games was proposed by Pardee [17].", "startOffset": 100, "endOffset": 104}, {"referenceID": 9, "context": "Purucker [13] and Kahn [12] applied neural networks to NFL game predictions and mostly improved on existing accuracies.", "startOffset": 9, "endOffset": 13}, {"referenceID": 8, "context": "Purucker [13] and Kahn [12] applied neural networks to NFL game predictions and mostly improved on existing accuracies.", "startOffset": 23, "endOffset": 27}, {"referenceID": 13, "context": "Stefani [18] used an improved least squares rating system to predict the winner for nearly 9000 games from College and Pro Football and even other sports.", "startOffset": 8, "endOffset": 12}, {"referenceID": 14, "context": "Fokoue and Foehrenbach [19] have analyzed important factors for NFL teams with Data Mining.", "startOffset": 23, "endOffset": 27}, {"referenceID": 15, "context": "As discussed by Yu and Tresp [20] there are some issues when applying PCA to mixed types of data.", "startOffset": 29, "endOffset": 33}, {"referenceID": 6, "context": "Classification Trees [10] are binary trees where each internal node defines a rule for one of the input features which divides the data into two subsets aiming for the best split.", "startOffset": 21, "endOffset": 25}, {"referenceID": 0, "context": "Finally, we would like to give credit to three open-source projects without which this work would not have been possible: scikit-learn [4], PyBrain [3] and nflgame [2].", "startOffset": 135, "endOffset": 138}], "year": 2016, "abstractText": "Based on NFL game data we try to predict the outcome of a play in multiple different ways including Decision and Classification Trees, Nearest Neighbors, Naive Bayes, Linear Discriminant Analysis, Support Vector Machines and Regression, and Artificial Neural Networks. An application of this is the following: by plugging in various play options one could determine the best play for a given situation in real time. While the outcome of a play can be described in many ways we had the most promising results with a newly defined measure that we call progress. We see this work as a first step to include predictive analysis into NFL playcalling.", "creator": "LaTeX with hyperref package"}}}