{"id": "1602.02285", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Feb-2016", "title": "A Deep Learning Approach to Unsupervised Ensemble Learning", "abstract": "we show neither deep learning validation can be applied in its hypothesis separating crowdsourcing and unsupervised ensemble learning. earlier, we state applying the classical model being distributed ibn bender, which compute above all comparisons originally conditionally correlated, leads { \\ em equivalent } to a restricted boltzmann machine ( rbm ) consuming a single base node. subsequently, under this model, strong posterior bound of the induction loop can ensure largely established via passive statistical audience. next, to address the more general intuition, where data may jointly violate your conditional outcome assumption, we propose immediately evaluate meta - referenced deep neural semantics ( td ). experimental results compiled using simulated and experimental - working methods demonstrate whilst our overall dnn approach incorporates simple state - of - the - art measures, in occasions when the data violates the conditional independence assumption.", "histories": [["v1", "Sat, 6 Feb 2016 17:56:59 GMT  (361kb,D)", "http://arxiv.org/abs/1602.02285v1", null]], "reviews": [], "SUBJECTS": "stat.ML cs.LG", "authors": ["uri shaham", "xiuyuan cheng", "omer dror", "ariel jaffe", "boaz nadler", "joseph t chang", "yuval kluger"], "accepted": true, "id": "1602.02285"}, "pdf": {"name": "1602.02285.pdf", "metadata": {"source": "CRF", "title": "A Deep Learning Approach to Unsupervised Ensemble Learning", "authors": ["Uri Shaham", "Xiuyuan Cheng", "Omer Dror", "Ariel Jaffe", "Boaz Nadler", "Joseph Chang", "Yuval Kluger"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "In recent years, crowdsourcing applications gained significant popularity, and consequently much academic attention. At the same time, deep learning has become a major tool in machine learning and artificial intelligence, demonstrating impressive performance in several applications, including computer vision, speech recognition and natural language processing.\nThe goal of this paper is to show that deep learning methods can also be applied to the areas of crowdsourcing and unsupervised ensemble learning, and provide state-of-the-art results. In unsupervised ensemble learning, one is given the predictions of d classifiers on a set of n instances and the goal is to recover the true, unknown label of each instance. Dawid and Skene (1979) were among the first to consider such a setup. They assumed that the classifiers are conditionally independent given the true labels. We refer to this model as the DS model and also as the Conditional Independence model.\nDespite its simplicity, computing the maximum likelihood estimates of the classifiers\u2019 accuracies and the true labels in the DS model is a non-convex optimization problem. In their paper, Dawid and Skene estimated these quantities by the EM algorithm, which is only guaranteed\nar X\niv :1\n60 2.\n02 28\n5v 1\n[ st\nat .M\nL ]\nto converge to a local optimum. In recent years, several authors developed computationally efficient spectral methods that are asymptotically consistent under the DS model, see Zhang et al. (2014); Parisi et al. (2014); Jain and Oh (2013); Jaffe et al. (2014) and references therein.\nThe model of Dawid and Skene relied on two key assumptions that typically do not hold in practice: (i) that classifiers make perfectly independent errors; and (ii) that these errors are uniformly distributed across all instances. To address the second issue above, several authors proposed richer models, that include parameters such as instance difficulty and varying skills of annotators across different regions of the input space, see for example Raykar et al. (2010), Whitehill et al. (2009) and Welinder et al. (2010).\nIn contrast, relatively few works considered relaxations of the conditional independence assumption: Platanios et al. (2014) proposed to estimate the accuracies of possibly dependent classifiers, via their agreement rates over classifier groups of different sizes. Donmez et al. (2010) proposed a model with pairwise interactions between all classifiers. Closest to our approach is the work of Jaffe et al. (2015), who assumed that some of the classifiers may be conditionally dependent, yet their dependency structure can be accurately described by a tree of depth 2.\nIn this manuscript, we propose a deep learning approach to unsupervised ensemble learning problems with possibly dependent classifiers, where the conditional independence assumption is strongly violated. We make the following contributions. First, we show that the DS model has an equivalent parametrization in terms of a Restricted Boltzmann Machine (RBM) with a single hidden node. Hence, under this model, the posterior probability of the true labels can be estimated from a trained RBM. Next, to tackle violations of conditional independence, we show how a RBM-based Deep Neural Net (DNN) can be applied to unsupervised ensemble learning, and propose a heuristic for determining the DNN architecture. Experimentally, we compare our approach to several state-of-the-art methods that are based on the conditional independence assumption and relaxations of it. We show that our DNN approach often performs better than the other methods on both simulated and real world datasets. Remarkably, we demonstrate that in some cases, while the raw representation of the data contains correlated features, the learned features in the last hidden layer are almost perfectly uncorrelated.\nThe structure of this manuscript is as follows: in Section 2 we give a formal definition of the problem. A brief background on RBMs is given in Section 3. In Section 4 we show how RBMs can be used to predict the true labels, under the assumption of conditional independence. In Section 5 we describe how to estimate the labels using a RBM-based DNN. Experimental results are reported in Section 6. The manuscript concludes with a brief summary in Section 7. Proofs appear in the appendix."}, {"heading": "1.1 Notation", "text": "Throughout this manuscript, X,H, Y are random variables, p\u03b8, p\u03bb are probability densities, parametrized by \u03b8, \u03bb, respectively. We think of p\u03b8 as the distribution generating the data and of p\u03bb as the RBM model distribution. When the context is clear, we occasionally write p(x) as a shorthand for p(X = x). The dimensions of the input data and the sample size are denoted\nby d and n, respectively. We use \u03c3(\u00b7) to denote the sigmoid function\n\u03c3(z) = 1\n1 + e\u2212z . (1)"}, {"heading": "2 Problem Setup", "text": "Let X \u2208 {0, 1}d, Y \u2208 {0, 1} be random variables. We refer to Y as the label of X. The pair (X,Y ) has a joint distribution, parametrized by \u03b8 and denoted by p\u03b8(X,Y ), which is given by\np\u03b8(X,Y ) = p\u03b8(Y )p\u03b8(X|Y ).\nThe joint distribution p\u03b8(X,Y ) is not known to us, and neither are the marginals p\u03b8(X), p\u03b8(Y ). Let (x(1), y(1)), . . . , (x(n), y(n)) be n i.i.d samples from p\u03b8(X,Y ). In unsupervised ensemble learning, we observe x(1), . . . , x(n) and the learning task is to recover y(1), . . . , y(n). In this application, the binary vector X = (X1, . . . , Xd)\nT contains the predictions of d classifiers or annotators on an instance, whose label Y is unobserved."}, {"heading": "2.1 The Conditional Independence Model", "text": "In their seminal paper, Dawid and Skene (1979), assumed that the conditional distribution p\u03b8(X|Y ) factorizes, i.e.,\np\u03b8(X|Y ) \u2261 d\u220f i=1 p\u03b8(Xi|Y ). (2)\nEq. (2), also known as the conditional independence model, is depicted in Figure 1. It is fully parametrized by \u03b8 = ({\u03c8i : i = 1, ..., d}, {\u03b7i : i = 1, ..., d}, \u03c0), where\n\u03c8i = Pr(Xi = 1|Y = 1), \u03b7i = Pr(Xi = 0|Y = 0), \u03c0 = Pr(Y = 1).\n\u03c8i, \u03b7i are often referred to as sensitivity and specificity, respectively. Under the interpretation of the Xi\u2019s being classifiers, the sensitivity and specificity quantify the competence of the classifiers or annotators and the conditional independence assumption means that all d classifiers make independent errors.\nThe conditional independence model is often overly simplistic. In this manuscript we propose to apply deep learning techniques, specifically RBM-based DNNs, for unsupervised ensemble learning problems, where the conditional independence is not likely to hold. The following section gives essential background on RBMs, section 4 shows that a RBM with a single hidden node is equivalent to the conditional independence model, and section 5 presents our RBMbased DNN approach."}, {"heading": "3 Restricted Boltzmann Machines", "text": "A Restricted Boltzmann Machine (RBM) is an undirected bipartite graphical model, consisting of a set X of d visible binary random variables and a set H of m hidden binary random variables, arranged in two layers, which are fully connected to each other. An illustration of a RBM is depicted in Figure 2. A RBM is parametrized by \u03bb = (W,a, b), where W is the weight matrix of\nthe connections between the visible and hidden units, and a, b are the bias vectors of the visible and hidden layers, respectively. Each configuration (X = x,H = h) of a RBM is associated with the following energy\nE\u03bb(x, h) = \u2212(aTx+ bTh+ xTWh) (3)\nwhich defines the probability of the configuration\np\u03bb(X = x,H = h) = e\u2212E\u03bb(x,h)\nZ , where Z \u2261 \u2211\nx,h e \u2212E\u03bb(x,h) is the partition function. The bipartite structure of the RBM implies\nfactorial conditional probabilities p\u03bb(X|H) = \u220f i p\u03bb(Xi|H), p\u03bb(H|X) = \u220f j p\u03bb(Hj |X),\ngiven by\np\u03bb(Xi = 1|H) = \u03c3(ai +Wi.H) p\u03bb(Hj = 1|X) = \u03c3(bj +XTW.j),\nwhere \u03c3(z) is the sigmoid function defined in equation (1), Wi. is the i-th row of W and W.j is its j-th column.\nGiven iid training data x(1), .., x(n) \u223c p\u03b8(X), the RBM parameters \u03bb = (W,a, b) are typically tuned to maximize the log-likelihood of the training data, where the likelihood that the RBM associates with a vector x is given by\np\u03bb(X = x) = \u2211 h p\u03bb(X = x,H = h).\nA popular approach to learn the RBM parameters is via gradient-based optimization, where the gradients are approximated using contrastive divergence (Hinton et al., 2006; Bengio, 2009)."}, {"heading": "4 RBM in the Conditional Independence Case", "text": "In this section we show that given observed data x(1), . . . , x(n) \u2208 {0, 1}d from the conditional independence model of Eq. (2), the posterior probabilities of the true, unknown labels y(1), . . . , y(n) can be consistently estimated via a RBM with a single hidden node.\nWe begin by showing that there is a bijective map from the parameters \u03bb of a RBM with a single hidden node to the parameters \u03b8 of the conditional independence model, such that the joint distribution specified by the RBM is equivalent to that of the conditional independence model.\nLemma 4.1. The joint probability p\u03bb(X = x,H = y) of a RBM with parameters \u03bb = (a, b,W ) is equivalent to the joint probability p\u03b8(X = x, Y = y) of a conditional independence model with parameters \u03b8 = ({\u03c8i}, {\u03b7i}, \u03c0) given by\n\u03c8i \u2261 \u03c3(ai +Wi), \u03b7i \u2261 1\u2212 \u03c3(ai) \u03c0 \u2261 \u2211 x\u2208{0,1}d e aT x+b+xTW\u2211\nx\u2208{0,1}d ( eaT x + eaT x+b+xTW ) Furthermore, the map \u03bb 7\u2192 \u03b8 is a bijection.\nWe are now ready to prove the main result of this section, namely, that the posterior distribution of the true labels y(1), . . . , y(n) can be consistently estimated by a RBM with a single hidden node. To do so, we rely on a special case of a result proved by Chang (1996), that provides conditions under which the parameters of the conditional independence model are identifiable.\nLemma 4.2. Let x(1), ..., x(n) be observed data from the conditional independence model, specified by p\u03b8. Assume that \u03b8 is such that for each i = 1, . . . , d, Xi is not independent of Y (i.e., each classifier is not just a random guess), and that d \u2265 3. Let \u03bb\u0302MLE be a maximum likelihood parameter estimate of a RBM with a single hidden node. Then the RBM posterior probability p\u03bb\u0302MLE(H = 1|X = x) converges to the true posterior p\u03b8(Y = 1|X = x), as n\u2192\u221e.\nRemark 4.3. The identifiability of the parameters is up to a single global 0/1 label flip. This means that one recovers either p\u03b8(Y = y|X) or p\u03b8(Y = 1\u2212y|X). Assuming that on average, the Xi\u2019s are more accurate than a random guess, this sign ambiguity can be resolved by comparing the predictions to the majority vote decision.\nRemark 4.4. Lemma 4.2 assumes that we found the MLE of the RBM parameters. Obtaining such a MLE is problematic for two main reasons. First, RBMs are typically trained to maximize a proxy for the likelihood, as the true likelihood is not tractable. Second, the RBM likelihood function is not concave, hence there are no guarantees that after training a RBM one obtains the maximum likelihood parameter \u03bb\u0302MLE."}, {"heading": "5 RBM-based Deep Neural Net", "text": "In many practical settings, the variables X1, . . . , Xd are not conditionally independent. Fitting a conditionally independent model to such data may yield highly sub-optimal predictions for the true labels yi. To tackle this general case, we propose to train a RBM-based Deep Neural Net (DNN) and use it to estimate the posterior probabilities p\u03b8(Y |X). In such a DNN, the hidden layer of each RBM is the input for the successive RBM. As suggested by Hinton et al. (2006), the RBMs are trained one at a time, bottom to top, i.e., the DNN is trained in a layer-wise fashion. Specifically, given training data x(1), . . . , x(n) \u2208 {0, 1}d, we start by training the bottom RBM, and then obtain the first layer hidden representation of the data by sampling h(i) from the conditional RBM distribution p\u03bb(H|X = x(i)). The vectors h(1), . . . , h(n) are then used as a training set for the second RBM and so on.\nIn the case considered in this manuscript, where the true label y is binary, the upper-most RBM in the DNN has a single hidden unit, from which the posterior probability p\u03b8(Y |X) can be estimated. Such a DNN is depicted in Figure 3."}, {"heading": "5.1 Motivation", "text": "Deep learning algorithms have recently achieved state-of-the-art performance in a wide range of applications LeCun et al. (2015). While a rigorous theoretical understanding of deep nets is still lacking, many researchers believe that a key property in their success is their ability to disentangle factors of variation in the inputs; see for example Bengio et al. (2013), Tishby and Zaslavsky (2015), and Mehta and Schwab (2014). That is, as one moves through the net, the hidden units become less statistically dependent. We have seen in Section 4 that given a representation in which the units are independent conditional on the true label, a single node RBM gives a consistent estimation of the true label posterior probability. Propagating the data through several RBM layers can hence be seen as a processing of the data, which reduces the conditional dependence of the units while preserving most of the information on the true label Y . In Section 6 we will demonstrate cases where such decoupling does indeed happen in practice, i.e., although the original input variables Xi\u2019s are not conditionally independent given the true label Y , after training, the units in the uppermost hidden layer are, remarkably,\napproximately conditionally independent. Thus, the assumptions of the conditional independence model apply (with respect to the uppermost hidden layer H last), and therefore one is able to consistently estimate the label posterior probability, Pr(Y |H last), as in Section 4.\nAnother motivation for using deep nets with several hidden layers for unsupervised ensemble learning is their rich expressive power. In our setting, we wish to approximate the posterior probability p(Y |X), which in general may be a complicated nonlinear function of X. When p(Y |X) cannot be accurately estimated by a RBM with a single hidden node (i.e., when the conditional independence assumption of Dawid and Skene does not hold), a better approximation may be obtained from a deeper network. Several works show that there exist functions that are significantly more efficiently represented by deeper networks, compared to shallower ones, where efficiency corresponds to the number of units. For example, Montufar et al. (2014) show that deep networks with piece-wise linear activations can represent functions with greater number of linear regions compared to shallow networks with the same number of units. In a recent work, Eldan and Shamir (2015) give an example for a radial function that can be efficiently computed by a 3-layer network, while requiring exponentially many units to be approximated accurately by a 2-layer network.\nFinally, we would like to emphasize that a RBM-based DNN is a discriminative model to estimate the posterior p(Y |X). In general, it may not correspond to any generative model Arora et al. (2015). Indeed, there is no guarantee that the marginal distributions implied by two adjacent RBMs match. Yet, it can be shown (see Appendix C) that stacking RBMs is a variational inference procedure assuming a specific class of data generation models. The nature of approximation of a top down generative model, where the data X is generated from a label Y , by a RBM-based DNN is explored in Appendix D."}, {"heading": "5.2 Predicting the Label from a Trained DNN", "text": "Given a trained DNN and a sample x \u223c p\u03b8(X), the label y is estimated by propagating x through the network. Specifically, the units of each layer can be set by either (i) sampling from the conditional distribution given the layer below, i.e., hj \u223c p\u03bb(hj |x), or (ii) by MAP estimate, setting each hidden unit hj = arg maxhj\u2208{0,1} p\u03bb(hj |x). Since the first option is stochastic, one may propagate x through the net multiple times and average the outputs p(y|x) to obtain an approximation of E(Y |X = x). Experimentally, we found both options to be equally effective, while each option slightly outperforms the other in some cases."}, {"heading": "5.3 Choosing the DNN Architecture", "text": "The specific DNN architecture (i.e., number and sizes of layers) might have a dramatic effect on the quality of predictions. To determine the number of units in each layer we employed the following procedure: we first train a RBM with d hidden units. Next, we compute the singular value decomposition of the weight matrix W , and determine its rank (i.e., the number of sufficiently large singular values). Given that the rank is some m \u2264 d, we re-train the RBM, setting the number of hidden units to be m. If m > 1, we add another layer on top of the current layer, and proceed recursively. The process stops when m = 1, so that the last layer of the DNN contains a single node. We refer to this method as the SVD approach. In our experiments, as a rule of thumb, we set m to be the minimal number of singular values (in descending order) whose cumulative sum is at least 95% of the total sum.\nThis method takes advantage of the co-adaptation of hidden units, which is a well known phenomenon in RBM training (see, for example, Hinton et al. (2012)). The term co-adaptation describes a situation where several hidden units tend to behave very similarly; this implies that the rank of the weight matrix might be small, although the number of hidden units may be larger."}, {"heading": "6 Experimental Results", "text": "In this section we compare the performance of the proposed DNN approach to several other approaches, and report experimental results obtained on four simulated data sets and eight real world data sets, from two different domains. All our datasets, as well as the scripts reproducing the reported results are publicly available at https://github.com/ushaham/RBMpaper. 1.\nSpecifically, we compare between the following unsupervised ensemble methods:\n\u2022 Vote. Majority voting, which is the maximum likelihood prediction, assuming that all classifiers are conditionally independent and have the same accuracy.\n\u2022 DS. Approximate maximum likelihood predictions under the Dawid and Skene model. Specifically, we use Spectral Meta Learner (Parisi et al., 2014), and Restricted Likelihood (Jaffe et al., 2014).\n1 Our scripts are based on the publicly available code in Hinton\u2019s website http://www.cs.toronto.edu/\n~hinton/MatlabForSciencePaper.html.\n\u2022 CUBAM The method of Welinder et al. (2010), which assumes conditional independence, but allows the accuracy of each classifier to vary across different regions of the input domain.\n\u2022 L-SML Latent SML (Jaffe et al., 2015). This method relaxes the conditional independence assumption to a depth 2 tree model.\n\u2022 DNN The approach presented in this manuscript, with the depth and number of hidden units in each layer determined by the SVD approach, described in Section 5.3.\nFollowing Jaffe et al. (2015), the performance measure we chose is the balanced accuracy, given by \u2211\nI{true label is 0 and predicted label is 0} 2 \u2211 I{true label is 0}\n+\n\u2211 I{true label is 1 and predicted label is 1}\n2 \u2211 I{true label is 1} ,\nwhere I{\u00b7} is the indicator function."}, {"heading": "6.1 Simulated Datasets", "text": "In this experiment we carefully generated four synthetic datasets, in order to demonstrate the performance of the DNN approach in several specific scenarios. In all four datasets the observed data is a n \u00d7 d binary matrix, with input dimension d = 15 and sample size n = 10, 000. A detailed description of the datasets generation process is given in Appendix E.1.\n\u2022 CondInd A dataset where the conditional independence holds, and 10 of the 15 classifiers are in fact random guess.\n\u2022 Tree15-3-1 A dataset generated from a depth-2 tree with layer sizes 1,3,15. Every node in the intermediate layer is connected to five nodes in the bottom layer. This dataset is generated from the model considered by L-SML, and does not satisfy the conditional independence assumption, as is shown in Figure 6.\n\u2022 LayeredGraph15-5-5-1 A dataset generated from a depth-3 layered graph, with layer sizes 1,5,5,15. In this case, the conditional independence assumption does not hold, although in practice the amount of dependence in the data is not high (see Figure 11).\n\u2022 TruncatedGaussian. Here X = (1 + sign(Z))/2, where the r.v. Z follows a a mixture of two d-dimensional Gaussians with different means and same covariance matrix. The label Y indicates the specific Gaussian from which X is sampled. In this case, the data is highly dependent, as can be seen in Figure 11.\nThe results are summarized in Table 1. Along with the five unsupervised methods, the table also shows the accuracy of a supervised learner and the estimated accuracy of the Bayes-optimal\nclassifier. The supervised learner is a Multi Layer Perceptron (MLP) with two hidden layers of sizes 4 and 2, that was trained on a dataset with n = 10, 000 samples (independent of the test dataset). The Bayes-optimal approximated accuracy was computed on a sample of size 10, 000, with the true posterior probabilities of all 2d possible binary vectors estimated using a sample of size 106 from the corresponding model.\nOn all of the above datasets, the DNN always outperformed the majority vote rule and CUBAM. On the CondInd dataset, the DNN performs similarly to DS, and significantly better than the other methods. Despite being unsupervised, on this dataset both methods perform slightly better than the specific supervised learner we considered, and around the Bayes-optimal accuracy. The architecture determined by the SVD approach in this case is indeed a single RBM (with a single hidden node). The weight matrix of the RBM is shown in Figure 4, and corresponds to the fact that only the first five classifiers actually contain information about the true label in this dataset.\nFigure 5 shows the recovery of the true conditional independence model parameters {\u03c8i, \u03b7i} of a similar conditional independent dataset (however with no random guess classifiers) from a RBM with a single hidden node, using the map in Lemma 4.1.\nOn the Tree15-3-1 dataset, L-SML, which is tailored for data generated by a tree, outperforms the DNN. This result is expected, since it can be shown that the distribution of the bottom two layers of a tree cannot be parametrized as a RBM (see Appendix D). Still, the DNN performs significantly better than DS, CUBAM and majority vote, and not far from the supervised learner and the optimal Bayes classifier. Figure 6 shows the correlation matrix at the input and hidden layers, as well as the first layer weight matrix, demonstrating that the DNN captured the true data generation model. Consequently, the 3 hidden units are nearly conditionally uncorrelated given the label y.\nFigure 7 shows the cumulative proportion of the singular values on the condInd and Tree15-3-1 datasets, which explains the architecture determined by the SVD approach for both datasets.\nOn the LayeredGraph15-5-5-1 dataset, while outperforming the other methods, the DNN achieved accuracy close to the supervised learner and the Bayes optimal accuracy; however, the chosen DNN architecture is different from the one of the true data generation model.\nThe conditional independence assumption is strongly violated in the case of the TruncatedGaussian dataset. Here the DNN performs better than all other methods by a large margin."}, {"heading": "6.2 Real-World Datasets", "text": "In this section we experiment with two groups of datasets, from two different domains, as follows:\n\u2022 DREAM Three datasets from the DREAM mutation calling challenge Ewing et al. (2015); this challenge is an international effort to improve standard methods for identifying cancer-associated mutations and rearrangements in whole-genome sequencing data. The accuracy of current variant calling algorithms is not optimal due to sequencing errors, other experimental factors, parametric choices in each algorithm and preprocessing and\nfiltering decisions. Unsupervised ensemble learning of multiple variant callers is expected to provide more robust predictions. One of the goals of this challenge is to develop a state-of-the-art meta pipeline for somatic mutation detection, to output accurate as possible mutation calls associated with cancer. Specifically, we used three datasets, (S1, S2, S3) containing the predictions of classifiers that determine the presence or absence of of mutations in genome sequencing data. The data is available at (Ellrot, 2013). In S1, d = 124, n = 92, 362. In S2, d = 114, n = 70,561. In S3, d = 99, n = 78, 643.\n\u2022 Magic Forty datasets, which are constructed from the Magic dataset in the UCI repository, available at https://archive.ics.uci.edu/ml/datasets/MAGIC+Gamma+Telescope. This dataset contains n = 19, 020 instances with 11 attributes, which consists of physical measurements of gamma particles; the learning task is to classify each instance as background or high energy gamma rays. Each of the five datasets we constructed contains\nbinary predictions of d = 16 classifiers, obtained in the Weka machine learning software. The 16 classifiers belong to four groups: four random forest classifiers, three logistic trees classifiers, four SVM classifiers, and five naive Bayes classifiers. This setting is adopted from Jaffe et al. (2015). The group of SVM classifiers is highly correlated, as well as the group of Naive Bayes classifiers, as can be seen in Appendix E.2. Each of the forty datasets was obtained by predictions of the same classifiers, however trained on a different subset of the original Magic dataset (a random subset of size 500 each time).\nTable 2 shows the performance of the various methods on the DREAM datasets. As can be seen, the DNN and L-SML performs similarly on S1, while the former performs better on S3 and the latter on S2. The two methods outperform the majority vote rule, DS and CUBAM on all three datasets. Remarkably, the hidden representation on the S3 dataset is such that the units are perfectly uncorrelated, conditioned on the hidden label. This is shown in Figure 8.\nThe results on the Magic datasets are shown in Figure 9. On most of these datasets, the DNN outperforms all other methods, with a relatively large margin. On all forty datasets, the SVD approach yielded a 15-3-1 architecture.\nTo summarize our experiments, we observed that RBM-based DNN performs at least as well and often better than various other methods, on both simulated and real datasets, and that the SVD approach can serve as an effective tool for determination of the DNN architecture.\nWe remark that in our experiments, we observed that RBMs tend to be highly sensitive to hyper-parameter tuning (such as learning rate, momentum, regularization type and penalty), and these hyper-parameters need to be carefully tuned. To obtain a reasonable hyper-parameter setting we found it useful to apply the random configuration sampling procedure, proposed in (Bergstra and Bengio, 2012), and evaluate different models by average log-likelihood approximation, (see, for example, (Salakhutdinov and Murray, 2008) and the corresponding MATLAB scripts in (Salakhutdinov, 2010))."}, {"heading": "7 Summary and Discussion", "text": "We demonstrated how deep learning techniques can be used for unsupervised ensemble learning, and showed that the DNN approach proposed in this manuscript often performs at least as well and often better than state-of the art methods, especially when the conditional independence assumption made by Dawid and Skene (1979) does not hold.\nPossible directions for future research include extending the approach to multiclass problems, possible using Discrete RBMs Montu\u0301far and Morton (2013), theoretical analysis of the SVD approach, and information theoretic analysis of the de-correlation, while preserving label information, that occurs while propagating data through a RBM-based DNN."}, {"heading": "Acknowledgements", "text": "The authors would like to thank George Linderman, Alex Cloninger, Tingting Jiang, Raphy Coifman, Sahand Negahban, Andrew Barron, Alex Kovner, Shahar Kovalsky, Maria Angelica Cueto, Jason Morton, and Brend Strumfels for their help."}, {"heading": "A Proof of Lemma 4.1", "text": "Proof. We will define \u03b8 so that for every x, y, p\u03b8(Xi = xi|Y = y) = p\u03bb(Xi = xi|H = y) and p\u03b8(Y = y) = p\u03bb(H = y).\nSince the weight matrix W has dimension d \u00d7 1 in this case, it is a vector, which we will denote as w. Recall that\np\u03bb(Xi = 1|H = y) = \u03c3(ai + wiy),\nhence we define \u03c8i \u2261 \u03c3(ai + wi)\nand \u03b7i \u2261 1\u2212 \u03c3(ai).\nFinally, recall that\np\u03bb(H = 1) =\n\u2211 x\u2208{0,1}d e\n\u2212E\u03bb(x,1)\u2211 x\u2208{0,1}d, h\u2208{0,1} e \u2212E\u03bb(x,h)\n=\n\u2211 x\u2208{0,1}d e\naT x+b+xTw\u2211 x\u2208{0,1}d, e aT x + eaT x+b+xTw ,\nwhere E\u03bb is the energy function given in equation (3), hence we set \u03c0 \u2261 \u2211 x\u2208{0,1}d e aT x+b+xTw\u2211\nx\u2208{0,1}d, ( eaT x + eaT x+b+xTw ) . (4) To see that the map \u03bb 7\u2192 \u03b8 is 1:1, note that ai uniquely determines \u03b7i, hence (ai, wi) uniquely determine (\u03c8i, \u03b7i). Lastly, rearranging equation (4) we get\n\u03c0 \u2211\nx\u2208{0,1}d\n( ea T x + ea T x+b+wT x ) = \u2211\nx\u2208{0,1}d ea T x+b+wT x\n\u21d2\u03c0 \u2211\nx\u2208{0,1}d ea T x = (1\u2212 \u03c0)eb \u2211 x\u2208{0,1}d ea T x+wT x\n\u21d2eb = \u03c0 1\u2212 \u03c0\n\u2211 x\u2208{0,1}d e\naT x\u2211 x\u2208{0,1}d e aT x+wT x ,\nso that given (a,W ), \u03c0 is uniquely determined by b. Showing that the map \u03bb 7\u2192 \u03b8 is a also subjective is straightforward. Hence it is a bijection."}, {"heading": "B Proof of Lemma 4.2", "text": "Proof. Since d \u2265 3 and for each i, Xi is not independent of Y , by Chang (1996), the parameter \u03b8 of the conditional independence model is identifiable. Since the map \u03bb 7\u2192 \u03b8 in Lemma 4.1\nis a bijection, there exists \u03bb corresponding to \u03b8, which is therefore identifiable as well. By the consistency property of the MLE (see, for example, (Casella and Berger, 2002)),\nlim n\u2192\u221e \u03bb\u0302MLE = \u03bb.\nSince p\u03bb(H = 1|X) is continuous in \u03b8, one obtains\np\u03bb\u0302MLE(H = 1|X)\u2192 p\u03bb(H = 1|X).\nFinally, note that Lemma 4.1 implies, in particular, that under the map \u03bb 7\u2192 \u03b8\np\u03bb(H = 1|X) = p\u03b8(Y = 1|X),\nwhich completes the proof."}, {"heading": "C Stacking RBMs as a Variational Inference Procedure", "text": "Variational inference is a common approach to tackle complicated probability estimation problems (see, for example, Bishop (2006); Fox and Roberts (2012), and a recent review Blei et al. (2016)). Specifically, let p be a target probability distribution that we want to approximate. In variational inference we define a family of approximate distributions D = {q\u03b1 : \u03b1 \u2208 A}, and then perform optimization to find the member of D that is closest to p in Kullback-Leibler distance. A key idea is that the family D is flexible enough to contain a distribution close to p, yet simple enough to perform optimization over. For example, a popular choice is to take D as the collection of factorized distributions, i.e., of the form q\u03b1(X) = \u220f i q\u03b1(Xi). In this section, we motivate the use of RBM-based DNN by considering a specific data generation model, and showing that training a stack of RBMs on data generated by this model is in fact a variational inference procedure.\nThe generative model we consider is a two layer Deep Belief Network (DBN), which played an important role in the emergence of deep learning in 2006 Hinton et al. (2006). The DBN we consider generates data Y \u2208 {0, 1}, H \u2208 {0, 1}m, X \u2208 {0, 1}d via the probability distribution\np\u03b8(X,H, Y ) \u2261 p\u03b81(X,H)p\u03b82(Y |H)\nwhere X,H form a RBM (parametrized by \u03b81). We observe data x(1) . . . x(n) from p\u03b8(X) and our goal is to estimate the posterior p\u03b8(y\n(i)|x(i)) for i = 1, . . . n. The posterior can be written as\np\u03b8(Y |X) = Eh\u223cp\u03b81 (H|X)P\u03b82(Y |H = h).\nCueto et al. (2010) showed that as long as m is not too large comparing to d, RBMs are locally identifiable, i.e., identifiable up to order and flips of hidden units (Jason Morton, personal communication). Therefore, when training a RBM with m hidden units on x(1) . . . x(n), by the consistency property of the MLE Casella and Berger (2002) the MLE \u03b8\u03021MLE will converge to\nthe true parameter \u03b81 as n \u2192 \u221e. Hence, when n is large enough, the vectors h(i) obtained from the (trained) RBM are in fact samples from p\u03b81(H|X = x(i)).\nAt the next step, the vectors h(1) . . . h(n) are used to train a second RBM, with a single hidden node. Observe that in the data generation model considered in this section, p\u03b8(H|Y ) does not factorize. The factorized distribution p\u03bb(H|Y ) that minimizes KL(p\u03b82(H|Y )\u2016p\u03bb(H|Y )) is given by\np\u03bb(Hi|Y ) = p\u03b82(Hi|Y )\nBishop (2006) (Chapter 10). By Lemma 4.1, we know that the distribution p\u03bb(H,Y ) = p\u03b8(Y ) \u220f i p\u03b82(Hi|Y ) (5)\nis equivalent to a RBM. Finally, by Lemma 4.2, the distribution (5) is consistently estimated by a RBM trained on vectors h(1) . . . h(n), and is thus a variational inference procedure."}, {"heading": "D Stacking RBMs as an Approximation for a Directed Top-", "text": "Down Model\nAssume that the data is generated by a Markov chain Y \u2192 H \u2192 X, where Y \u2208 {0, 1}, H \u2208 {0, 1}m, X \u2208 {0, 1}d. We further assume that the distributions p\u03b8(X|H), p\u03b8(H|Y ) factorize, i.e.,\np\u03b8(X|H) = d\u220f i=1 Pr(Xi|H) (6)\nand\np\u03b8(H|Y ) = m\u220f i=1 Pr(Hi|Y ), (7)\nand are given by RBM-like conditional distributions, i.e.,\np\u03b8(Xi = 1|H) = \u03c3 (ai +Wi,\u00b7H) (8)\nand p\u03b8(Hi = 1|Y ) = \u03c3 (bi + Ui,\u00b7Y ) . (9)\nHence the corresponding data generation probability is parametrized by \u03b8 = (\u03c0, a, b,W,U), where \u03c0 = Pr(Y = 1).\nThis data generation process is depicted in Figure 10. The posterior probabilities p\u03b8(Y |X) are given by\np\u03b8(Y |X) = \u2211\nH\u2208{0,1}m p\u03b8(Y |H)p\u03b8(H|X)\n= Eh\u223cp\u03b8(H|X)p\u03b8(Y |H = h).\nBy Section 4, we know that p\u03b8(H,Y ) is equivalent to a RBM. Therefore, to accurately estimate the posterior, it suffices to approximate p\u03b8(H|X).\nUnder the data generation model described in Figure 10 and equations (6)-(9), it is evident that the joint distribution p\u03b8(X,H) cannot be parametrized as a RBM; indeed, p\u03b8(H|X) does not factorize. Hence, training a RBM on samples from p\u03b8(X), is a mean field approximation of p\u03b8(H|X). The form of p\u03b8(X,H) is shown in the following lemma.\nLemma D.1. Under the data generation model described in Figure 10 and equations (6)-(9), the joint distribution p\u03b8(X,H) is given by\np\u03b8(X,H) = exp ( aTX +XTWH + bTH ) Z(H)\nwhere\nZ(H) = 1\u2211\nX\u2208{0,1}d exp (a TX +XTWH)\n\u00d7 \u2211\nY \u2208{0,1}\np\u03b8(Y ) exp(H TUY )\u2211\nH\u2032 exp (b TH \u2032 +H \u2032TUY )\nProof. By definition,\np\u03b8(X,H) = \u2211\nY \u2208{0,1}\np\u03b8(X,H, Y )\n= \u2211\nY \u2208{0,1}\np(Y )p\u03b8(H|Y )p(X|H) (10)\nWriting\np\u03b8(X|H) = exp\n( aTX +XTWH )\u2211 X\u2032\u2208{0,1}d exp (a TX \u2032 +X \u2032TWH)\nand similarly\np\u03b8(H|Y ) = exp\n( bTH +HTUY )\u2211 H\u2032\u2208{0,1}m exp (b TH \u2032 +H \u2032TUY ) ,\nwe obtain\np\u03b8(X|H)p\u03b8(H|Y ) = exp ( aTX +XTWH + bTH +HTUY ) ( \u2211\nX\u2032 exp (aTX \u2032 +X \u2032TWH)) ( \u2211 H\u2032 exp (b TH \u2032 +H \u2032TUY )) . (11)\nPlugging equation (11) in equation (10) we get p\u03b8(X,H) = exp ( aTX +XTWH + bTH ) \u00d7 1\u2211\nX\u2032 exp (aTX \u2032 +X \u2032TWH) \u00d7 \u2211\nY \u2208{0,1}\np\u03b8(Y ) exp(H TUY )\u2211\nH\u2032 exp (b TH \u2032 +H \u2032TUY )\nFrom lemma D.1 we see that p\u03b8(H|X) is close to be factorizable if Z(H) is a approximately a log-linear function of H and p\u03b8(X) is approximately a log-linear function of X."}, {"heading": "E Datasets used for our experiments", "text": "E.1 Simulated Dataset Generation Details\n\u2022 CondInd: the label Y was sampled from a Bernoulli(0.5) distribution; The specificity \u03b7i and sensitivity \u03c8i of the variables Xi, i = 1 . . . 5 were sampled uniformly from [0.5, 1]. The other ten Xi\u2019s were random guesses, i.e., had specificity = sensitivity = 0.5.\n\u2022 Tree15-3-1: the label Y was sampled from a Bernoulli(0.5) distribution; each node in the intermediate and layer was generated from his parent with specificity and sensitivity sampled uniformly from [0.8, 1], and in the bottom layer with specificity and sensitivity sampled uniformly from [0.6, 1].\n\u2022 LayeredGraph15-5-5-1: Data is generated from a Layered Graph with four layers of dimensions 1,5,5,15, starting at the true label Y . Each layer in the graph is generated from the above layer, and the graph has sparse connectivity (about 30% of the edges exist). For every node i and parent j we sample specificity \u03c8ij and sensitivity \u03b7ij uniformly. Finally, the value at each node was calculated as the weighted sum of the probabilities of the node being 1 given the values of the nodes in the preceding layer, normalized by the sum over the edges. The label Y was sampled from a Bernoulli(0.5) distribution.\n\u2022 TruncatedGaussian: the label Y was sampled from a Bernoulli(0.5) distribution. One Gaussian had mean vector \u00b51 were each of the 15 coordinates was sampled uniformly. The other Gaussian had mean vector \u00b52 = \u2212\u00b51. Both Gaussians had identical covariance matrix, with off diagonal entries of 0.5 and diagonal entries of 1.\nE.2 The Magic Datasets\nAn example for the correlation matrix of the 16 classifiers given the 0 class can be seen in Figure 12."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "We show how deep learning methods can be applied in the context of crowdsourcing and unsupervised ensemble learning. First, we prove that the popular model of Dawid and Skene, which assumes that all classifiers are conditionally independent, is equivalent to a Restricted Boltzmann Machine (RBM) with a single hidden node. Hence, under this model, the posterior probabilities of the true labels can be instead estimated via a trained RBM. Next, to address the more general case, where classifiers may strongly violate the conditional independence assumption, we propose to apply RBM-based Deep Neural Net (DNN). Experimental results on various simulated and real-world datasets demonstrate that our proposed DNN approach outperforms other state-of-the-art methods, in particular when the data violates the conditional independence assumption.", "creator": "LaTeX with hyperref package"}}}