{"id": "1602.05705", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Feb-2016", "title": "Applying Boolean discrete methods in the production of a real-valued probabilistic programming model", "abstract": "from this setting colleagues explore the application of yet notable boolean methods, namely the disjunctive normal valued representation of analytic table c, and apply relativity or a quantum - global logic model essentially utilizes quantities underlying infinite range [ 0, \u2113 ] as justify nonlinear procedural programming of a game character's logic algebraic mathematical form.", "histories": [["v1", "Thu, 18 Feb 2016 07:42:00 GMT  (390kb)", "http://arxiv.org/abs/1602.05705v1", "14 pages"]], "COMMENTS": "14 pages", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["jonathan darren nix"], "accepted": false, "id": "1602.05705"}, "pdf": {"name": "1602.05705.pdf", "metadata": {"source": "CRF", "title": null, "authors": [], "emails": [], "sections": [{"heading": null, "text": "ar X\niv :1\n60 2.\n05 70\n5v 1\n[ cs\n.A I]\n1 8\nFe b\n20 16\nContents\n1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n2 Definitions of terms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n3 Logic Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n4 Disjunctive Normal Form (DNF) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n5 Extensions to continuous logic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n6 Provision for continuous outputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n7 Provision for unknowns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n8 Provision for state machines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11\n9 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n10 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14"}, {"heading": "1 Introduction", "text": "Let us begin please by considering the set S of all functions of the form f : X \u2192 Y and g : X,Y \u2192 Z where each X, Y , and Z are single bits from the set {0,1}. Then we have the set of functions as depicted in Tables 1 and 2 which we may call the George Boole Logical Operators, where all such operators of the form \u2296x, or x \u229b y may be interpreted as functions, e.g. \u2296(x), or \u229b(x, y), and vice-versa. When given the variable X, or the tuple (X,Y ), which we may call Boolean variables, we may list each of their possible values, and then in the columns define each possible function that may exist.\nFrom these tables we select the functions f3, g2, g8, and g10 which satisfy the definitions of the Boolean NOT, AND, OR, and XNOR operators from [6], and so they are depicted in Table 3.\nFrom these tables we can also observe that each function in Sf can be written in terms of a function in Sg as shown by Table 4, allowing that only those functions in Sg be further utilized by this paper 1.\nThen the set Sg may be used instead of the set Sf and we select Theorem 1.1 to utilize XNOR(x, 0) instead of NOT (x), to thereby use AND, OR, and XNOR further in the paper. We show that XNOR is binary equivalent to NOT in the proof of Theorem 1.1.\nTheorem 1.1 NOT(x) = XNOR(x,0)\nProof: Given x, then f3(x) = g10(x, 0) with:\n1. NOT(0) = XNOR(0,0) = 1\n2. NOT(1) = XNOR(1,0) = 0\nThen we can show that the extra parameter on XNOR embodies a previously constant value in the definition of logic table from [3]. We accomplish that through an analysis of world values, logic values, logic questions, logic tables and their expansion to a Disjunctive Normal Form (DNF) equation which computes the result designed by the logic table using the methods from [5] and [7].\nDuring that analysis a series of examples are shown using conventional methods on discrete Boolean logical quantities (e.g. logic values from the set { 0, 1 }), and an extension to a non-discrete continuous logic space on the range [0, 1] is proposed, its methods utilizing logic tables are shown, and several examples and code samples are provided.\n1Observe that the value of the quantity i in Table 4 does not affect the output of the function."}, {"heading": "2 Definitions of terms", "text": "Definition 2.1 A \u201cWorld Value\u201d, labeled W , is an external stimulae, potentially quantized (e.g. in numeric form), representing some specific aspect of qualia (e.g. hot, cold, far, near, etc.) in regard to a perception of a system.\nDefinition 2.2 A \u201cLogic Value\u201d, labeled Z, is one of:\n1. A value from the set {0, 1}, e.g. a \u201cBoolean\u201d value.\n2. A value from an arbitrary set S = {s0, s1, ...sn}), e.g. a discrete or \u201ccrisp\u201d value.\n3. A value from the range [0,1], e.g. a continuous or \u201cfuzzy\u201d value.\n4. A special value UNKNOWN, e.g. provision for an \u201cunknown\u201d value.\nDefinition 2.3 A \u201cfuzzification\u201d after [4] is a mapping W \u2192 Z, e.g. a \u201cfuzzification function\u201d, and may be a mathematical operation that performs the mapping from a world value to a logic value when W is represented in numeric form.\nDefinition 2.4 A \u201cLogic Question\u201d is one of:\n1. A question answerable by a value from the set {0, 1}, e.g. a \u201cBoolean\u201d question.\n2. A question answerable from an arbitrary set S of states, e.g. a discrete or \u201ccrisp\u201d question.\n3. A question answerable by a value from the range [0,1], e.g. a continuous or \u201cfuzzy\u201d question.\nDefinition 2.5 A \u201ccontemplation\u201d in this paper is a Fuzzy Control System process after [4], as follows:\n1. A fuzzification of a set of world values W into a set of logic values Z (e.g. a perception).\n2. A contemplation on a set of logic values Z, e.g. an answering of a series of logic questions, in this paper using Boolean methods in continuous mathematical form.\n3. A defuzzification of some resulting logic value from Z into a world value W (e.g. a motive action).\nIn Problem 9.1 further in the paper we apply the fuzzy control system process by gathering a collection of world values which we are interested in, and organize them into a set W which we may further utilize.\nWe observe that world values are of any arbitrary units and form, and so we mathematically normalize them by utilizing a set of fuzzification functions to transform the world values into logic values which we may further contemplate upon.\nWe define logic values in Definition 2.2 to describe the various types of numeric values and their interpretations as utilized in this paper.\nWe answer logic questions with the methods in the paper, and produce logic values. When the logic value is strictly numeric we may further utilize its value mathematically. We may transform the logic value into a world value, or otherwise act upon it, through an action known as defuzzification.\nWe can observe that the action of forming a logic question is an inductive step, and the act of answering a logic question via one or more conditions upon which the question depends, is an example of a deductive step.\nExamples are shown further in this paper of logic tables answering logic questions."}, {"heading": "3 Logic Tables", "text": "We define logic tables in this paper by Definition 3.1. We may think of a logic table as accepting some specific input I = {i0, i1, i2, ..., ii} where each element of the set I is assigned some logic value. Then the items in the set I are implicitly interpreted as having a subjective meaning (e.g. health, shields, distance, etc.) and so the set I represents a specific situation within which the logic table is able to produce some specific output O which is itself a single logic value. Like the input values, the output value also has a subjective meaning which can be interpreted as either a computation or a contemplation of logic, so the logic table is said to output the answer to a logic question.\nDefinition 3.1 A \u201cLogic Table\u201d consists of:\n1. The set I of inputs {i0, i1, i2, ..., ii} where each element of I is a logic value. When values are assigned to each member of I, the set represents a specific situation under which the logic table will compute the answer to a configured question.\n2. The set O of outputs {o0, o1, o2, ..., oj} where each element of O is a logic value. The values in the set O each describe a specific response that the table defines for some recognized input situation.\n3. The set M of matrix values {m0,0,m0,1,m0,2, ...,mi,j} where each element of M is a logic value. The values in the set M describe the situations within which the corresponding outputs from O are produced.\nWe can then observe that the definitions of Boolean logical operations in Tables 1, 2, and 3 are themselves logic tables, as are any mathematical definition table, or any table listing a mapping of inputs to outputs.\nWe then describe how a logic table can be constructed and an equation produced which computationally maps the configured inputs to the configured outputs, and we apply the process to produce a mathematical programming of a game character\u2019s logic."}, {"heading": "4 Disjunctive Normal Form (DNF)", "text": "We can make use of the AND, OR, and NOT2 operators by applying an established technique from [5] whereby an I \u2192 O mapping is listed in a logic table, and a formula in terms of AND, OR,\n2We then use XNOR instead of NOT in order to compose the DNF equation in a more customizable form.\nand NOT is written which computes the outputs depicted in the table when their directly-related inputs are presented to the equation. The equation produced is said to be in Disjunctive Normal Form (DNF) after [7].\nThen an algorithm whereby that process is most traditionally accomplished is depicted in Algorithm 1, and an algorithm depicting use of XNOR is depicted in Algorithm 2.\nAlgorithm 1 Produce DNF Equation from Logic Table using NOT\n1: Given a logic table { I, O, M } 2: Let equation = 0 3: for each row j in M do 4: if Oj 6= 0 then 5: Let term = 1 6: for each input i \u2208I do 7: if Mi,j = 0 then 8: term = AND(term, NOT(Ii)) 9: else\n10: term = AND(term, Ii) 11: end if 12: end for 13: equation = OR(equation, term) 14: end if\n15: end for 16: return equation\nAlgorithm 2 Produce DNF Equation from Logic Table using XNOR\n1: Given a logic table { I, O, M } 2: Let equation = 0 3: for each row j in M do 4: if Oj 6= 0 then 5: Let term = 1 6: for each input i \u2208I do 7: term = AND(term, XNOR(Ii, Mi,j)) 8: end for\n9: equation = OR(equation, term) 10: end if\n11: end for 12: return equation\nAn example of the equations produced by Algorithms 1 and 2 are shown through Example 4.1.\nExample 4.1 Given an arbitrary logic table, such as the XOR operation:\nIi = X,Y Mi,j Oj Find an equation in Disjunctive Normal Form that computes the output\ndepicted in the table, when an input matching any of those listed in M is presented as X, Y on the input. 0 0 0 0 1 1 1 0 1 1 1 0\nSolution 4.2 The equation produced by Algorithm 1 for the table depicted in Example 4.1 is:\n(NOT(X) AND Y) OR (X AND NOT(Y))\nSolution 4.3 The equation produced by Algorithm 2 for the table depicted in Example 4.1 is:\n(XNOR(X,0) AND XNOR(Y,1)) OR (XNOR(X,1) AND XNOR(Y,0))\nWe observe that the additional parameter on the XNOR operation is itself the value from the logic table, and we observe by Theorem 4.4 that the equation utilizing XNOR is identical to the equation utilizing NOT.\nTheorem 4.4 The equation in Solution 4.3 equates to the equation in Solution 4.2.\nProof: Given Equation 4.2: Apply the relations from Theorem 1.1 and observe that while preserving the values of the equations there exists a process to convert one into the other.\n1. XNOR(Q,0) = NOT(Q)\n2. XNOR(Q,1) = Q\nWe then consider the consequences of Theorem 4.4 in regard to its utility in Logic Tables. In particular we find, and utilize in Definition 5.4, the additional parameter on the XNOR operator and find that it may utilize additional form of logic values, but first please observe Examples 4.5 and 4.7.\nExample 4.5 Produce a logic table T1 which \u201crecognizes\u201d the bit sequence { 1, 0, 1 }.\nSolution 4.6 The logic table produced for Example 4.5 is:\nI: X Y Z O I = {X,Y,Z} O = {1} M = {1, 0, 1}. M : 1 0 1 1\nThe classical DNF equation by Algorithm 1 is:\n(X AND NOT(Y) AND Z)\nand the augmented equation by Algorithm 2 is:\n(XNOR(X,1) AND XNOR(Y,0) AND XNOR(Z,1))\nExample 4.7 Produce a logic table T2 which \u201ccomputes\u201d the sum of three bits.\nSolution 4.8 The logic table produced for Example 4.7 is:\nI: X Y Z O1 O2\nM : 0 0 1 0 1 I = {X,Y,Z} O1 = {0, 0, 1, 0, 1, 1, 1} O2 = {1, 1, 0, 1, 0, 0, 1} M = { {0, 0, 1}, {0, 1, 0}, {0, 1, 1}, {1, 0, 0}, {1, 0, 1}, {1, 1, 0}, {1, 1, 1} }. 0 1 0 0 1 0 1 1 1 0 1 0 0 0 1 1 0 1 1 0 1 1 0 1 0 1 1 1 1 1\nThe outputs O1 and O2 produce separate classical DNF equations by Algorithm 1 as:"}, {"heading": "O1 = (NOT(X) AND Y AND Z) OR (X AND NOT(Y) AND Z) OR (X AND Y AND NOT(Z))", "text": ""}, {"heading": "OR (X AND Y AND Z))", "text": ""}, {"heading": "O2 = (NOT(X) AND NOT(Y) AND Z) OR (NOT(X) AND Y AND NOT(Z)) OR (X AND NOT(Y) AND NOT(Z)) OR (X AND Y AND Z)", "text": "with augmented formulas given by Algorithm 2 as:"}, {"heading": "O1 = (XNOR(X,0) AND XNOR(Y,1) AND XNOR(Z,1)) OR (XNOR(X,1) AND XNOR(Y,0)", "text": "AND XNOR(Z,1)) OR (XNOR(X,1) AND XNOR(Y,1) AND XNOR(Z,0)) OR (XNOR(X,1)\nAND XNOR(Y,1) AND XNOR(Z,1))"}, {"heading": "O2 = (XNOR(X,0) AND XNOR(Y,0) AND XNOR(Z,1)) OR (XNOR(X,0) AND XNOR(Y,1)", "text": "AND XNOR(Z,0)) OR (XNOR(X,1) AND XNOR(Y,0) AND XNOR(Z,0)) OR (XNOR(X,1)\nAND XNOR(Y,1) AND XNOR(Z,1))"}, {"heading": "5 Extensions to continuous logic", "text": "We find continuous mathematical definitions for classical Boolean operators remaining relatively unchanged from history, with the definition of NOT, AND, and OR going as far back as [1] and [2].\nWhen selecting continuous mathematical functions that compute NOT, AND, OR, and XNOR, we may then seek any of those functions which produce the same {0,1} output values for any given {0,1} input values, and consider alternatives3 to the definitions here as affecting the values produced between 0 and 1. We analyze and observe the results. In particular, we examine the following:\n3We have found X \u2295 Y = min(|x+ y|, 1) to behave more accurately and less warped than x+ y \u2212 xy.\nDefinition 5.1 X NOT 0 1 1 0 = (1\u2212X) The complement of a logical quantity produces a depiction of its lack of contribution to a whole truth.\nDefinition 5.2 X Y AND 0 0 0 0 1 0 1 0 0 1 1 1 = X \u2217 Y\nThe multiplication of two logical quantities produces a depiction of their mutual contribution to a whole truth.\nDefinition 5.3 X Y OR 0 0 0 0 1 1 1 0 1 1 1 1 = X \u2295 Y = x+ y : [0,1]\nThe capped addition of two logical quantities produces a depiction of an independent contribution of each quantity toward a whole truth.\nDefinition 5.4 X Y XNOR 0 0 1 0 1 0 1 0 0 1 1 1 = 1\u2212 |X \u2212 Y | = EQ(X,Y ) The XNOR of two logical quantities produces a depiction of the extent as to which two logical quantities agree toward the value of a truth.\nWhere the operator \u2295 denoted here is addition restricted to the range [0,1], the XNOR function is labeled EQ for clarity4, and the operator |x| used in Definition 5.4 denotes the absolute value operator.\nWe can then rewrite Solution 4.3 to produce the equation shown in Solution 5.5 which we call the continuous form of its logical expression.\nSolution 5.5 The equation from Solution 4.3 rewritten in \u201ccontinuous form\u201d is:\n(EQ(X, 0) \u2217EQ(Y, 1)) \u2295 (EQ(X, 1) \u2217 EQ(Y, 0))\nWhen graphed the equation from Solution 5.5 produces the surface depicted in Figure 1 and matches the expected output of its definition from Example 4.1, which is the XOR function.\nWe observe that the corners of the surface are pinned to 0 or 1 as determined by the terms of the formula.\nWe next apply a trivial arithmetic operation to cause each term of the equations emitted by Algorithm 2 to support arbitrary row outputs which can be configured to be in the range [0,1]. We accomplish that by applying a multiplier to each term, thereby transforming whether the term matches its configured values, into what we want the term to output given that it matches its configured values, producing the listing in Algorithm 3.\n4Observe that the Boolean XNOR operation can indeed be described as an equals operator"}, {"heading": "6 Provision for continuous outputs", "text": "Theorem 6.1 On each term of the equation in Solution 5.5, where we have a value on the range [0,1], we may apply a multiplier Z, producing terms of the form Z*(EQ(X,Y)*...). The resulting transformation is from a logical value on the range [0,1] to a value that becomes Z to the extent that X==Y, or { Z,Z,... } to the extent that { X,X,... } == { Y,Y,... }.\nProof: If EQ(X,Y) is whether X==Y by Definition 5.4, then Z*EQ(X,Y) is Z to the extent that X==Y.\nExample 6.2\nWe apply a multiplier to each term and observe that the output interpolates to express the values depicted in the multipliers.\n1. O0 \u2217 (EQ(X, 0) \u2217EQ(Y, 1)) \u2295O1 \u2217 (EQ(X, 1) \u2217EQ(Y, 0))\nWe reproduce the formula as follows, and observe that the nature of the formula is multidimensional interpolation.\nGiven the set I = {i0, i1, i2, ..., ii} of arbitrary input values on the range [0,1].\nGiven the set M = {M0,0,M0,1, ...,Mi,j} of arbitrary matrix values on the range [0,1].\nGiven the set O = {O0, O1, ..., Oj} of arbitrary output values on the range [0,1].\nWe can form a table as follows:\nIi = {i0, i1, i2, ..., ii} Mi,j Oj Where the input values Ii are applied upon the matrix values Mi,j via\nthe process depicted in Algorithm 3, to produce an interpolation of the output as configured in the set O. m0,0 m1,0 ... mi,0 o0 m0,1 m1,1 ... mi,0 o1 m0,2 m1,2 ... mi,0 o2 ... ... ... ... ... m0,j m1,j ... mi,j oj\nProducing an equation of the form:\nE = o0 \u2217 (EQ(i0,m0,0) \u2217 EQ(i1,m1,0) \u2217 ... \u2217 EQ(ii,mi,0))\u2295 ...\u2295 oj \u2217 (EQ(i0,m0,j) \u2217 EQ(i1,m1,j) \u2217 ... \u2217 EQ(ii,mi,j))\nWhere Algorithm 3 extends the prior algorithms to account for the rescaling of the terms of the DNF equation, and to produce the full formula as shown in Example 6.2.\nAlgorithm 3 Production of a \u201cContinuous Form\u201d Equation from Logic Table using XNOR (labeled \u201cEQ\u201d)\n1: Given a logic table { I, O, M } 2: Let equation = 0.0 3: for each row j in M do 4: if Oj 6= 0.0 then 5: Let term = Oj 6: for each input i \u2208I do 7: term = AND(term, EQ(ii, mi,j)) 8: end for\n9: equation = OR(equation, term) 10: end if\n11: end for 12: return equation\nTheorem 6.3 Algorithm 3 produces a continuous equation which performs multidimensional interpolation.\nProof: We seek to demonstrate multidimensional interpolation in a proof by induction. We start by generating and expanding a logic table of a single variable and output as follows...\nE = O0 \u2217 (XNOR(X,M0,0)) = O0 \u2217 ((1.0 \u2212 |X \u2212M0,0|))\n...observing that the output of the term will match the value configured in O0 when the value of the input X matches the value of the table value M0,0. We observe also that as X deviates from M0,0, that less of the output value O0 contributes to the output of the equation. We add an additional variable to the equation, still with only a single row, and we produce the following...\nE = O0 \u2217 (XNOR(X,M0,0) \u2217XNOR(Y,M1,0)) = O0 \u2217 ((1.0 \u2212 |X \u2212M0,0|) \u2217 (1.0 \u2212 |Y \u2212M1,0|))\n...observing that the quantity (X,Y ) must match (M0,0,M1,0) for the equation to produce the value O0 on its output. It follows that for each additional variable we input into the equation that\nan additional quantity must be matched in the currently single row of the table in order for the configured output to be emitted. We next add an additional row to the logic table, producing an OR condition on the recognition of that row...\nE = O0 \u2217 (XNOR(X,M0,0) \u2217XNOR(Y,M1,0))\u2295O1 \u2217 (XNOR(X,M0,1) \u2217XNOR(Y,M1,1)) = O0 \u2217 ((1.0 \u2212 |X \u2212M0,0|) \u2217 (1.0\u2212 |Y \u2212M1,0|))\u2295O1 \u2217 (1.0 \u2212 |X \u2212M0,1|) \u2217 (1.0 \u2212 |Y \u2212M1,1|))\n...and we observe that the output of the equation approaches O0 to the extent that (X,Y ) approaches (M0,M1), while also approaching the value of O1 to the extent that the quantity (X,Y ) approaches (M0,1,M1,1), resulting in an interpolation between the values depicted in the output array Oj .\nWe next provision the formula with support for unknowns, and crisp state values, and finally show examples."}, {"heading": "7 Provision for unknowns", "text": "We have observed what we might call Boolean Values, e.g. { x : x \u2208{ 0, 1 } }, and Continuous Values, e.g. { z : z \u2208[0,1] }, and we next provision with support for additional data as defined as follows.\nIn particular we produce Algorithm 4 to allow for the special value UNKNOWN, enabling the machine to be configured so as to not necessitate a full connection of all its inputs to outputs.\nAlgorithm 4 Production of a \u201cContinuous Form\u201d Equation from Logic Table using EQ w/ Provision for Unknowns\n1: Given a logic table { I, O, M } 2: Let equation = 0.0 3: for each row j in M do 4: if Oj 6= 0.0 then 5: Let term = Oj 6: for each input i \u2208I do 7: if mi,j is not UNKNOWN then 8: term = AND(term, EQ(ii, mi,j)) 9: end if\n10: end for 11: equation = OR(equation, term) 12: end if\n13: end for 14: return equation"}, {"heading": "8 Provision for state machines", "text": "We provision the EQ function in Algorithm 5 with support for crisp State Values, which we can describe simply as those whole numbered values, e.g. {n : n \u2208N}. We then can configure the logic table to recognize state values and also emit them.\nWe next show examples.\nAlgorithm 5 EQ w/ support for \u201cstate values\u201d\n1: Given X, Y 2: if X and Y are state values then 3: return (X == Y ) 4: else 5: return 1.0\u2212 |X \u2212 Y | 6: end if"}, {"heading": "9 Examples", "text": "Problem 9.1 Show the construction of a machine which plays a primitive game of Soccer, while being programmed not in the traditional sense, but programmed probabilistically with equations of the form depicted prior.\nWe approach the answer to Problem 9.1 in Solution 9.2 by constructing a series of sets of arbitrary information that will be required to produce the sets needed for the logic tables. In particular we are depicting a Fuzzy Control System process as in [4].\nWe will let W = {w1, w2, w3, ..., ww} be the set of arbitrary \u201creal world\u201d values that the character may perceive. These are quantities which may be considered to be of any form or composition. The set W for this example is then given in Table 5.\nOur next step is to apply a normalization of the values from W into the character\u2019s [0,1] logic space. This step is called the fuzzification step after [4].\nThen let the set S = {s1, s2, s3, ..., ss} be the arbitrary set of normalized sensor values. These are continuous logic values on the range [0,1] and represent continuous Boolean logic (to distinguish it from discrete Boolean logic). We infer this set of values from the set W as shown in Table 6.\nWhere the miscellaneous mathematical functions such as \u201cclamp\u201d and \u201cmap\u201d are listed in Table 7, and are being used to perform the conversion W \u2192 S, and are called fuzzification functions. We observe that there may exist many such functions.\nWe may then define a series of continuous logic tables to describe each possible output behavior of the character as given in Solution 9.2.\nSolution 9.2 Logic tables for Problem 9.1.\nShould I drive forward? Ii = {s0} Mi,j Oj = 1.0 * EQ(s0, 1.0)1.0 1.0\nShould I throw the ball? Ii = {s0, s2, s5} Mi,j Oj = 1.0 * EQ(s0, 1.0) * EQ(s2, 0.75) * EQ(s5, 1.0)1.0 0.75 1.0 1.0\nShould I turn to the right? Ii = {s1, s3}\nMi,j Oj = 1.0 * EQ(s3, 1.0) \u2295 1.0 * EQ(s1, 1.0) * EQ(s3, 1.0)UNK 1.0 1.0\n1.0 1.0 1.0\nShould I turn to the left? Ii = {s1, s4}\nMi,j Oj = 1.0 * EQ(s4, 1.0) \u2295 1.0 * EQ(s1, 1.0) * EQ(s4, 1.0)UNK 1.0 1.0\n1.0 1.0 1.0\nWhere should I target (X,Y)? Ii = {s5} Mi,j Oj = w6 * EQ(s5, 1.0) \u2295 w5 * EQ(s5, 0.0)1.0 w6\n0.0 w5\nWe then, at periodic intervals update the sets W and S, and compute a set Z to contain the answer to the questions depicted in the logic tables, which we may then directly \u201cdefuzzify\u201d into motive actions. In particular, we may multiply the logic value of whether to drive forward with a value representing how fast to travel at maximum, and apply it to the character\u2019s position causing the character to travel forward. We may also defuzzify the logical quantities about turning right or left by multiplying each of them by a quantity depicting how much to turn at maximum, and then turning in whichever direction represents a greater recommendation value, and we may defuzzify the logical quantity about throwing the ball, by evaluating whether it exceeds a threshold value (such as 0.90). We pick up the ball when the character is sufficiently close to it, setting the appropriate world variable, w7, to 1, and release the ball when the character decides to throw it by setting the variable to 0, and we apply motion to the ball depicting it thrown. We then reset the position of the ball, and we observe that the character plays a primitive game of soccer, picking up the ball, carrying it to, and throwing it in the goal, and will continue doing so perpetually as long as the character runs."}, {"heading": "10 Conclusions", "text": "This paper summarizes a process whereby logical machines may be constructed and offers a foundation for further analysis which may appear in followup publications.\nAcknowledgements: The views and conclusions contained herein are those of the author and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Art Institute of Portland."}], "references": [{"title": "An Investigation of the Laws of Thought", "author": ["G. Boole"], "venue": "Newburyport: Dover Publications", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Fuzzy control systems", "author": ["A. Kandel", "G. Langholz"], "venue": null, "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1994}, {"title": "Logical Networks. Classical and fuzzy concepts in mathematical logic and applications", "author": ["M. Reghi\u015f", "E. Roventa"], "venue": null, "citeRegEx": "5", "shortCiteRegEx": "5", "year": 1998}, {"title": "Digital logic design. Oxford: Newnes", "author": ["B. Holdsworth", "R.C. Woods"], "venue": null, "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2002}, {"title": "Analysis of Boolean functions", "author": ["R. O\u2019Donnell"], "venue": null, "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "Abstract In this paper we explore the application of some notable Boolean methods, namely the Disjunctive Normal Form representation of logic table expansions, and apply them to a real-valued logic model which utilizes quantities on the range [0,1] to produce a probabilistic programming of a game character\u2019s logic in mathematical form.", "startOffset": 243, "endOffset": 248}, {"referenceID": 3, "context": "From these tables we select the functions f3, g2, g8, and g10 which satisfy the definitions of the Boolean NOT, AND, OR, and XNOR operators from [6], and so they are depicted in Table 3.", "startOffset": 145, "endOffset": 148}, {"referenceID": 2, "context": "We accomplish that through an analysis of world values, logic values, logic questions, logic tables and their expansion to a Disjunctive Normal Form (DNF) equation which computes the result designed by the logic table using the methods from [5] and [7].", "startOffset": 241, "endOffset": 244}, {"referenceID": 4, "context": "We accomplish that through an analysis of world values, logic values, logic questions, logic tables and their expansion to a Disjunctive Normal Form (DNF) equation which computes the result designed by the logic table using the methods from [5] and [7].", "startOffset": 249, "endOffset": 252}, {"referenceID": 0, "context": "logic values from the set { 0, 1 }), and an extension to a non-discrete continuous logic space on the range [0, 1] is proposed, its methods utilizing logic tables are shown, and several examples and code samples are provided.", "startOffset": 108, "endOffset": 114}, {"referenceID": 0, "context": "A value from the range [0,1], e.", "startOffset": 23, "endOffset": 28}, {"referenceID": 1, "context": "3 A \u201cfuzzification\u201d after [4] is a mapping W \u2192 Z, e.", "startOffset": 26, "endOffset": 29}, {"referenceID": 0, "context": "A question answerable by a value from the range [0,1], e.", "startOffset": 48, "endOffset": 53}, {"referenceID": 1, "context": "5 A \u201ccontemplation\u201d in this paper is a Fuzzy Control System process after [4], as follows:", "startOffset": 74, "endOffset": 77}, {"referenceID": 2, "context": "4 Disjunctive Normal Form (DNF) We can make use of the AND, OR, and NOT operators by applying an established technique from [5] whereby an I \u2192 O mapping is listed in a logic table, and a formula in terms of AND, OR, We then use XNOR instead of NOT in order to compose the DNF equation in a more customizable form.", "startOffset": 124, "endOffset": 127}, {"referenceID": 4, "context": "The equation produced is said to be in Disjunctive Normal Form (DNF) after [7].", "startOffset": 75, "endOffset": 78}, {"referenceID": 0, "context": "We find continuous mathematical definitions for classical Boolean operators remaining relatively unchanged from history, with the definition of NOT, AND, and OR going as far back as [1] and [2].", "startOffset": 182, "endOffset": 185}, {"referenceID": 0, "context": "3 X Y OR 0 0 0 0 1 1 1 0 1 1 1 1 = X \u2295 Y = x+ y : [0,1] The capped addition of two logical quantities produces a depiction of an independent contribution of each quantity toward a whole truth.", "startOffset": 50, "endOffset": 55}, {"referenceID": 0, "context": "Where the operator \u2295 denoted here is addition restricted to the range [0,1], the XNOR function is labeled EQ for clarity, and the operator |x| used in Definition 5.", "startOffset": 70, "endOffset": 75}, {"referenceID": 0, "context": "We next apply a trivial arithmetic operation to cause each term of the equations emitted by Algorithm 2 to support arbitrary row outputs which can be configured to be in the range [0,1].", "startOffset": 180, "endOffset": 185}, {"referenceID": 0, "context": "5, where we have a value on the range [0,1], we may apply a multiplier Z, producing terms of the form Z*(EQ(X,Y)*.", "startOffset": 38, "endOffset": 43}, {"referenceID": 0, "context": "The resulting transformation is from a logical value on the range [0,1] to a value that becomes Z to the extent that X==Y, or { Z,Z,.", "startOffset": 66, "endOffset": 71}, {"referenceID": 0, "context": ", ii} of arbitrary input values on the range [0,1].", "startOffset": 45, "endOffset": 50}, {"referenceID": 0, "context": ",Mi,j} of arbitrary matrix values on the range [0,1].", "startOffset": 47, "endOffset": 52}, {"referenceID": 0, "context": ", Oj} of arbitrary output values on the range [0,1].", "startOffset": 46, "endOffset": 51}, {"referenceID": 0, "context": "{ z : z \u2208[0,1] }, and we next provision with support for additional data as defined as follows.", "startOffset": 9, "endOffset": 14}, {"referenceID": 1, "context": "In particular we are depicting a Fuzzy Control System process as in [4].", "startOffset": 68, "endOffset": 71}, {"referenceID": 0, "context": "Our next step is to apply a normalization of the values from W into the character\u2019s [0,1] logic space.", "startOffset": 84, "endOffset": 89}, {"referenceID": 1, "context": "This step is called the fuzzification step after [4].", "startOffset": 49, "endOffset": 52}, {"referenceID": 0, "context": "These are continuous logic values on the range [0,1] and represent continuous Boolean logic (to distinguish it from discrete Boolean logic).", "startOffset": 47, "endOffset": 52}], "year": 2016, "abstractText": "In this paper we explore the application of some notable Boolean methods, namely the Disjunctive Normal Form representation of logic table expansions, and apply them to a real-valued logic model which utilizes quantities on the range [0,1] to produce a probabilistic programming of a game character\u2019s logic in mathematical form.", "creator": "LaTeX with hyperref package"}}}