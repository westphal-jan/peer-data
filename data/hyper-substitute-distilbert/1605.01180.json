{"id": "1605.01180", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "4-May-2016", "title": "A Step from Probabilistic Programming to Cognitive Architectures", "abstract": "probabilistic programming is considered as a framework, in what basic descriptions meaning cognitive architectures seldom seem accommodated given unified and elegant fashion. at the some time, automation makes adopting some component of computer architectures for extending capabilities spanning probabilistic programming languages illustrate pointed out. in particular, specification specification providing generative models via declaration allows preferences and coordination between them easily documented, provided usefulness - web framework for producing valid inference is periodically discussed.", "histories": [["v1", "Wed, 4 May 2016 08:34:17 GMT  (115kb)", "http://arxiv.org/abs/1605.01180v1", "4 pages"]], "COMMENTS": "4 pages", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["alexey potapov"], "accepted": false, "id": "1605.01180"}, "pdf": {"name": "1605.01180.pdf", "metadata": {"source": "CRF", "title": "A Step from Probabilistic Programming to Cognitive Architectures", "authors": ["Alexey Potapov"], "emails": ["potapov@aideus.com"], "sections": [{"heading": null, "text": "Keywords: probabilistic programming, cognitive architectures, generative models, declarative knowledge"}, {"heading": "1 Introduction", "text": "Any AGI system should rely on some knowledge (experience) representation, learning (prediction) methods, and reasoning (action selection) methods. Although these components are not necessarily explicit, and some systems can be more syncretic than others, we can characterize approaches to AGI by them. For example, basic models of universal algorithmic intelligence like AIXI implicitly represent knowledge in the form of programs, and use Solomonoff prediction, and exhaustive search for action selection. Cognitive architectures (CA) usually utilize more restrictive representations and learning methods for the sake of computational efficiency.\nSome architectures use one uniform representation and corresponding learning method yielding \u201cgrand unification and functional elegance\u201d, e.g. [1], but loosing expressiveness. Others utilize quite general knowledge representations and many inference strategies [2] that result in higher expressiveness, but causes difficulties with integrations of different components of the CA.\nAchieving \u201cgrand unification and functional elegance\u201d for more general representations can be considered as a direction of further development of CAs. Here, we claim that the probabilistic programming paradigm can be seen as a theory for CAs with the properties of grand unification and functional elegance for universal (Turingcomplete) representations. We also show that insights from CAs can be very useful for further development of probabilistic programming languages (PPLs)."}, {"heading": "2 Basic Components of CAs in PPLs", "text": "Basic purpose of PPLs is to conduct conditional inference over generative models specified in the form of programs with random choices. One can specify models corresponding both to particular narrow machine learning methods and to a sort of universal induction (if the model generates arbitrary programs). The same inference engine can be used to solve deductive reasoning tasks (see an example with the subset sum problem in [3]). One can also perform a sort of knowledge-based reasoning using probabilistic programming for free (see, e.g. [4]).\nOf course, PPLs usually don\u2019t support some distinct representation of knowledge separated from the rest code. This also has a positive side \u2013 any kind of computable knowledge can be expressed.\nThus, PPLs can be used to quite naturally and uniformly implement three basic components of AGI systems (knowledge representation, reasoning, and learning). Of course, there are some obvious differences between PPLs and cognitive architectures. PPLs only have capabilities to represent knowledge, perform reasoning and learning, which should be realized and combined. However, PPLs seem suitable as a meta-tool for designing and implementing cognitive architectures in a convenient and unified way. The real problem here is not in designing a specific architecture, but in efficiency of inference.\nIndeed, inefficiency of AIXI is directly reflected in its implementation in a PPL. Turing-incomplete PPLs use more efficient inference methods, but they cannot reproduce AIXI. One possible way to try to achieve both efficiency and universality is program specialization [5]. The idea is to automatically construct an efficient projection of a universal inference method w.r.t. given specific task or generative model. If there is a program in PPL, one should not immediately apply a general inference method, but should try to optimize it w.r.t. this program.\nThere are some attempts to do something like this in PPLs. For example, in [6] program analysis is performed to propagate observations backward through the program. In [7] something similar to specialization of PPL inference engine w.r.t. given program is performed.\nHowever, there is no simple and universal solution for efficient program specialization (with possibly exponential gain in speed), just like there is no simple and practically efficient universal inference method. The specializer should be an expert in program analysis, and it should be able to learn new ways to analyze and optimize programs. That is, it is impossible to put efficient and general methods inside the (static) PPL interpreter, because then such interpreter will already should be a matured AGI. Instead, the AGI system should have capabilities of becoming such an expert. Then, the question is what are the main requirements to the AGI core if they are not the efficient and general inference itself? How should we extend the paradigm of PPLs to make them more suitable both for AGI development and real-world applications?"}, {"heading": "3 Extending PPLs with Declarative Knowledge", "text": "Consider the following simple program in Church language [4]. (rejection-query (define x (random-integer 10)) x (= (+ x 5) 10))\nBasic PPLs will blindly search for the appropriate solution. This by itself is not necessarily bad, since if you ask a small child to find such a value that its sum with 5 is equal to 10, she or he (possessing basic knowledge about numbers) will also do this by blindly searching for the appropriate number.\nMore sophisticated PPLs might be able to analyze the condition, propagate it back, and infer that x is necessarily equal to 5, and this value can be sampled. One can implement complex program analysis in order to make such sampling efficient. However, it will fail in less trivial cases, in which the condition cannot be propagated backward, and non-strict heuristics or non-obvious rules should guide the search.\nAn AGI system should be able to solve such tasks efficiently not by some universal inference mechanism (this is impossible), but using its knowledge about numbers, arithmetic operations and equations. This is the difference between CAs and programming languages.\nAlso, in the context of AGI, we don\u2019t want to define the range for x unless it is known from the task. We should simply define that x is an integer. And there should be knowledge that integers can be different, and different integer values have different probabilities (in different contexts). Thus, the system should have some general generative model for integers (which is a part of its knowledge system).\nImagine that you are asked to pick a random number. How will you do this? You can pick 7, \u201310, 1.78324, pi, 2+3i, etc. Apparently, humans don\u2019t use (or very rarely use as a specific case) some unbiased universal machine as a generative model for all occasions. Instead, they have declarative knowledge that numbers can be natural, integer, rational, real, complex, pi is the number, numbers consist of digits, etc.\nLet us introduce a special form (is-a expression concept) that binds expression with concept via is-a link. One can think of this concept as ConceptNode and is-a link as InheritanceLink stored in Atomspace in OpenCog [2].\nConcepts are similar to variables, but are bound not with values, but are linked to expressions and other concepts. Let (concept c) adds c to the concept environment of the program. Semantics of functions is extended to deal with concepts. If a concept is passed to a function instead of a variable, it is not evaluated immediately, but is considered as a symbolic expression. We can use (sample concept) to pick an arbitrary instance of this concept. Corresponding generative model is automatically constructed using multinomial distribution over all is-a links (weights of such links can be introduced and used in sampling). E.g., if one specified (is-a (normal 0 1) real-number), (is-a pi real-number), (is-a real-number number), (is-a integer number), etc., and request (sample number), then the interpreter will first randomly choose between realnumber and integer, and then (if real-number is chosen) can randomly choose between pi and sampling from normal distribution.\nWe can also give recursive is-a definitions, e.g. (is-a null sequence), (is-a (cons number sequence) sequence). (sample sequence) will recursively construct a sequence of numbers (longer sequences will be exponentially less probably), but either number or sequence concept can be instantiated first, so we can obtain e.g. integer sequence, or some mixed sequence. Being asked \u2018pick a sequence of numbers\u2019, humans can also decide to use only integers. Thus, we can replace explicit priors like (define x (random-integer 10)) with priors implicitly defined by systems knowledge (define x (sample integer)). These priors can be made context-dependent with context dependent is-a weights as it is done for truth-values in OpenCog.\nMore principal question is how to make inference efficient using explicit knowledge. This question requires separate lengthy discussion, but the basic idea is as follows. Necessary knowledge can be specified in the form of equivalence or implication links, e.g. (equivalence (= (+ $A $B) $C) (= $A (\u2013 $C $B))) like in OpenCog. Pattern matching can be used to match (= (+ x 5) 10) against (= (+ $A $B) $C), so the entire program (not only concepts) should be put into something like AtomSpace (and this is good since programs represent knowledge in PPLs). Then, this expression should be transformed into equivalent representation (= x (\u2013 10 5)) and simplified. The question is whether pattern matching and transformation by itself should be guided by knowledge, and if yes, what elements should be added to represent this knowledge.\nConclusion\nWe considered one possible step from PPLs to CAs, and discussed its usefulness for PPLs. This doesn\u2019t mean that this way leads to yet another CA without any improvements. Benefits for CAs are \u201cgrand unification and functional elegance\u201d without loss of generality. Adoptation of OpenCog-like pattern matching is the next step.\nThis work was supported by Ministry of Education and Science of the Russian Federation, and by Government of Russian Federation, Grant 074-U01."}], "references": [{"title": "Extending Mental Imagery in Sigma", "author": ["P.S. Rosenbloom"], "venue": "J. Bach, B. Goertzel, and M. Ikl\u00e9 (Eds.): AGI 2012, LNAI 7716, pp. 272\u2013281", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2012}, {"title": "Engineering General Intelligence, Part 1, 2", "author": ["B. Goertzel", "C. Pennachin", "N. Geisweiller"], "venue": "Atlantis Press", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2014}, {"title": "Genetic Programming on Program Traces as an Inference Engine for Probabilistic Languages", "author": ["V. 110. Batishcheva", "A. Potapov"], "venue": "AGI\u201915, LNAI 9205, pp. 14\u201324", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2015}, {"title": "Metacomputations and Program-based Knowledge Representation", "author": ["V. Khudobakhshov"], "venue": "In:K.-U. K\u00fchnberger, S. Rudolph, P. Wang (Eds.): AGI\u201913, LNAI 7999, pp. 70\u201377", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2013}, {"title": "Efficiently sampling probabilistic programs via program analysis", "author": ["A. Chaganty", "Nori A.V.", "S.K. Rajamani"], "venue": "Proc. Artificial Intelligence and Statistics, pp. 153\u2013160", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2013}, {"title": "A dynamic programming algorithm for inference in recursive probabilistic programs", "author": ["A. Stuhlm\u00fcller", "N.D. Goodman"], "venue": "arXiv:1206.3555 [cs.AI]", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2012}], "referenceMentions": [{"referenceID": 0, "context": "[1], but loosing expressiveness.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "Others utilize quite general knowledge representations and many inference strategies [2] that result in higher expressiveness, but causes difficulties with integrations of different components of the CA.", "startOffset": 85, "endOffset": 88}, {"referenceID": 2, "context": "The same inference engine can be used to solve deductive reasoning tasks (see an example with the subset sum problem in [3]).", "startOffset": 120, "endOffset": 123}, {"referenceID": 3, "context": "One possible way to try to achieve both efficiency and universality is program specialization [5].", "startOffset": 94, "endOffset": 97}, {"referenceID": 4, "context": "For example, in [6] program analysis is performed to propagate observations backward through the program.", "startOffset": 16, "endOffset": 19}, {"referenceID": 5, "context": "In [7] something similar to specialization of PPL inference engine w.", "startOffset": 3, "endOffset": 6}, {"referenceID": 1, "context": "One can think of this concept as ConceptNode and is-a link as InheritanceLink stored in Atomspace in OpenCog [2].", "startOffset": 109, "endOffset": 112}], "year": 2016, "abstractText": "Probabilistic programming is considered as a framework, in which basic components of cognitive architectures can be represented in unified and elegant fashion. At the same time, necessity of adopting some component of cognitive architectures for extending capabilities of probabilistic programming languages is pointed out. In particular, implicit specification of generative models via declaration of concepts and links between them is proposed, and usefulness of declarative knowledge for achieving efficient inference is briefly dis-", "creator": "Word"}}}