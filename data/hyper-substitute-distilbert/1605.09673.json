{"id": "1605.09673", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-May-2016", "title": "Dynamic Filter Networks", "abstract": "in nonlinear traditional convolutional tree, the learned filters operate fixed after installation. in academia, models gain finally new analysis, the neural filter network, where filters behave generated with conditioned on implicit input. researchers show semantic education architecture is a powerful one, with data variability quite beyond its adaptive nature, running without constant excessive increase in a number of model problems. a similar variety of filtering operations that be learned this way, including local inverse interactions, to also others like selective ( de ) blurring natural conditional binary extraction. then, permitting such signals to be combined, e. gr. in a learning architecture. we demonstrate insight technique how the buffer managers working on the tasks phase processing and stereo prediction, and thus short - of - the - art performance alongside the nonlinear mnist dataset through a fixed nonlinear model. by visualizing redundant learned filters, we ignore which the network has picked desired flow information by only looking toward unlabelled cue data. this suggests lest the future researchers keep upgraded to pretrain networks for subsequent supervised training in an unsupervised way, like optical recall and depth estimation.", "histories": [["v1", "Tue, 31 May 2016 15:29:36 GMT  (2163kb,D)", "http://arxiv.org/abs/1605.09673v1", "submitted to NIPS16"], ["v2", "Mon, 6 Jun 2016 15:39:10 GMT  (2242kb,D)", "http://arxiv.org/abs/1605.09673v2", "submitted to NIPS16; X. Jia and B. De Brabandere contributed equally to this work and are listed in alphabetical order"]], "COMMENTS": "submitted to NIPS16", "reviews": [], "SUBJECTS": "cs.LG cs.CV", "authors": ["xu jia", "bert de brabandere", "tinne tuytelaars", "luc van gool"], "accepted": true, "id": "1605.09673"}, "pdf": {"name": "1605.09673.pdf", "metadata": {"source": "CRF", "title": "Dynamic Filter Networks", "authors": ["Bert De Brabandere", "Xu Jia", "Tinne Tuytelaars"], "emails": ["firstname.lastname@esat.kuleuven.be", "vangool@vision.ee.ethz.ch"], "sections": [{"heading": "1 Introduction", "text": "Humans are good at predicting another view from related views. For example, humans can use their everyday experience to predict how the next frame in a video will differ; or after seeing a person\u2019s profile face have an idea of her frontal view. This capability is extremely useful to get early warnings about impinging dangers, to be prepared for necessary actions, etc. The vision community has realized that endowing machines with similar capabilities would be rewarding.\nSeveral papers have already addressed the generation of an image conditioned on given image(s). Yim et al. [23] and Yang et al. [22] learn to rotate a given face to another pose. The authors of [17, 19, 18, 16, 13] train a deep neural network to predict subsequent video frames. Flynn et al. [5] use a deep network to interpolate between views separated by a wide baseline. Yet all these methods apply the exact same set of filtering operations on each and every input image. This seems suboptimal for the tasks at hand. For example, for video prediction, there are different motion patterns within different video clips. The main idea behind our work is to generate the future frames with parameters adapted to the motion pattern within a particular video. Therefore, we propose a learnable parameter layer that provides custom parameters for different samples.\n\u2217X. Jia and B. De Brabandere contributed equally to this work and listed in alphabetical order.\nar X\niv :1\n60 5.\n09 67\n3v 1\n[ cs\n.L G\n] 3\n1 M\nOur dynamic filter module consists of two parts: a filter-generating network and a dynamic filtering layer (see Figure 1). The filter-generating network dynamically generates sample-specific filter parameters conditioned on the network\u2019s input. Note that these are not fixed after training, like regular model parameters. The dynamic filtering layer then applies those sample-specific filters to the input. Both components of the dynamic filter module are differentiable with respect to the model parameters such that gradients can be backpropagated throughout the network. The filters can be convolutional, but other options are possible. In particular, we propose a special kind of dynamic filtering layer which we coin dynamic local filtering layer, which is not only sample-specific but also position-specific. The filters in that case vary from position to position and from sample to sample, allowing for more sophisticated operations on the input. Our framework can learn both spatial and photometric changes, as pixels are not simply displaced, but the filters possibly operate on entire neighbourhoods.\nWe demonstrate the effectiveness of the proposed dynamic filter module on several tasks, including video prediction and stereo prediction. We also show that, because the computed dynamic filters are explicitly calculated - can be visualised as an image similar to an optical flow or stereo map. Moreover, they are learned in a totally unsupervised way, i.e. without groundtruth maps.\nThe rest of paper is organised as follows. In section 2 we discuss related work. Section 3 describes the proposed method. We show the evaluation in section 4 and conclude the paper in section 5."}, {"heading": "2 Related Work", "text": "Deep learning architectures Several recent works explore the idea of introducing more flexibility into the network architecture. Jaderberg et al. [11] propose a module called Spatial Transformer, which allows the network to actively spatially transform feature maps conditioned on themselves without explicit supervision. They show this module is able to perform translation, scaling, rotation and other general warping transformations. They apply this module to a standard CNN network for classification, making it invariant to a set of spatial transformations. This seminal method only works with parametric transformations however, and applies a single transformation to the entire feature map(s). Patraucean et al. [16] extend the Spatial Transformer by modifying the grid generator such that it has one transformation for each position, instead of a single transformation for the entire image. They exploit this idea for the task of video frame prediction, applying the learned dense transformation map to the current frame to generate the next frame. Similarly, our method also applies a position specific transformation to the image or feature maps and takes video frame prediction as one testbed. In contrast to that work, our method generates the new image by applying dynamic local filters to the input image or feature maps instead of using a grid generator and sampler. Our method is not only able to learn how to displace a pixel, but how to construct it from an entire neighborhood, including its intensity (e.g. by learning a blur kernel).\nIn the context of visual question answering, Noh et al. [14] introduce a dynamic parameter layer whose output is used as parameters of a fully connected layer. In that work, the dynamic parameter layer takes the information from another domain, i.e. question representation, as input. They further apply hashing to address the issue of predicting the large amount of weights needed for a fully connected layer. Different from their work, we propose to apply the dynamically generated filters to perform a filtering operation on an image, hence we do not have the same problem of predicting large amounts of parameters.\nNew view synthesis Our work is also related to works on new view synthesis, that is, generating a new view conditioned on the given views of a scene. One popular task in this category is to predict future video frames. Ranzato et al. [17] use an encoder-decoder framework in a way similar to language modeling. Srivastava et al. [19] propose a multilayer LSTM based autoencoder for both past frames reconstruction and future frames prediction. This work has been extended by Shi et al. [18] who propose to use convolutional LSTM to replace the fully connected LSTM in the network. The use of convolutional LSTM reduces the amount of model parameters and also exploits the local correlation in the image. Oh et al. [15] address the problem of predicting future frames conditioned on both previous frames and actions. They propose the encoding-transformation-decoding framework with either feedforward encoding or recurrent encoding to address this task. Mathieu et al. [13] manage to generate reasonably sharp frames by means of a multi-scale architecture, an adversarial training method, and an image gradient difference loss function. In a similar vein, Flynn et al. [5]\napply a deep network to produce unseen views given neighboring views of a scene. Their network comes with a selection tower and a color tower, and is trained in an end-to-end fashion. This idea is further refined by Xie et al. [21] for 2D-to-3D conversion. None of these works adapt the filter operations of the network to the specific input sample, as we do, with the exception of [5, 21]. We\u2019ll discuss the relation between their selection tower and our dynamic filter layer in section 3.3.\nShortcut connections Our work also shares some similarity, through the use of shortcut connections, with the highway network [20] and the residual network [8, 10]. For a module in the highway network, the transform gate and the carry gate are defined to control the information flow across layers. Similarly, He et al. [8, 10] propose to reformulate layers as learning residual functions instead of learning unreferenced functions. Compared to the highway network, residual networks remove the gates in the highway network module and the path for input is always open throughout the network. In our network architecture, we also learn a referenced function. Yet, instead of applying addition to the input, we apply filtering to the input - see section 3.3 for more details.\n3 Dynamic Filter Networks\nIn this section we describe our dynamic filter framework. A dynamic filter module consists of a filtergenerating network that produces filters conditioned on an input, and a dynamic filtering layer that applies the generated filters to another input. Both components of the dynamic filter module are differentiable. The two inputs of the module can be either identi-\ncal or different, depending on the task. The general architecture of this module is shown schematically in Figure 1. We explicitly model the transformation: invariance to change should not imply one becomes totally blind to it. Moreover, such explicit modeling allows unsupervised learning of transformation fields like optical flow or depth.\nFor clarity, we make a distinction between model parameters and dynamically generated parameters. Model parameters denote the layer parameters that are initialized in advance and only updated during training. They are the same for all samples. Dynamically generated parameters are sample-specific, and are produced on-the-fly without a need for initialization. The filter-generating network outputs dynamically generated parameters, while its own parameters are part of the model parameters."}, {"heading": "3.1 Filter-Generating Network", "text": "The filter-generating network takes an input IA \u2208 Rh\u00d7w\u00d7cA , where h, w and cA are height, width and number of channels of the input A respectively. It outputs filters F\u03b8 parameterized by parameters \u03b8 \u2208 Rs\u00d7s\u00d7cB\u00d7n\u00d7d, where s is the filter size, cB the number of channels in input B and n the number of filters. d is equal to 1 for dynamic convolution and h\u00d7 w for dynamic local filtering, which we discuss below. The filters are applied to input IB \u2208 Rh\u00d7w\u00d7cB to generate an output G = F\u03b8(IB), with G \u2208 Rh\u00d7w\u00d7n. The filter size s determines the receptive field and is chosen depending on the application. The size of the receptive field can also be increased by stacking multiple dynamic filter modules. This is for example useful in applications that may involve large local displacements.\nThe filter-generating network can be implemented with any differentiable architecture, such as a multilayer perceptron or a convolutional network. A convolutional network is particularly suitable when using images as input to the filter-generating network."}, {"heading": "3.2 Dynamic Filtering Layer", "text": "The dynamic filtering layer takes images or feature maps IB as input and outputs the filtered result G \u2208 Rh\u00d7w\u00d7n. For simplicity, in the experiments we only consider a single feature map (cB = 1) filtered with a single generated filter (n = 1), but this is not required in a general setting. The dynamic filtering layer can be instantiated as a dynamic convolutional layer or a dynamic local filtering layer.\nDynamic convolutional layer. A dynamic convolutional layer is similar to a traditional convolutional layer in that the same filter is applied at every position of the input IB . But different from the traditional convolutional layer where filter weights are model parameters, in a dynamic convolutional layer the filter parameters \u03b8 are dynamically generated by a filter-generating network:\nG(i, j) = F\u03b8(IB(i, j)) (1) The filters are sample-specific and conditioned on the input of the filter-generating network. The dynamic convolutional layer is shown schematically in Figure 2(a). Given some prior knowledge about the application at hand, it is sometimes possible to facilitate training by constraining the generated convolutional filters in a certain way. For example, if the task is to produce a translated version of the input image IB where the translation is conditioned on another input IA, the generated filter can be sent through a softmax layer to encourage a spiked filter with most elements set to zero. We can also make the filter separable: instead of a single square filter, we generate separate horizontal and vertical filters that are applied to the image consecutively.\nDynamic local filtering layer. An extension of the dynamic convolution layer that proves interesting, as we show in the experiments, is the dynamic local filtering layer. In this layer the filtering operation is not translation invariant anymore. Instead, different filters are applied to different positions of the input IB similarly to the traditional locally connected layer: for each position (i, j) of the input IB , a specific local filter F\u03b8(i,j) is applied to the region centered around IB(i, j):\nG(i, j) = F\u03b8(i,j)(IB(i, j)) (2) The filters used in this layer are not only sample specific but also position specific. Note that dynamic convolution as discussed in the previous section is a special case of local dynamic filtering where the local filters are shared over the image\u2019s spatial dimensions. The dynamic local filtering layer is shown schematically in Figure 2b. If the generated filters are again constrained with a softmax function so that each filter only contains one non-zero element, then the dynamic local filtering layer replaces each element of the input IB by an element selected from a local neighbourhood around it. This offers a natural way to model local spatial deformations conditioned on another input IA. The dynamic local filtering layer can perform not only a single transformation like the dynamic convolutional layer, but also position-specific transformations like local deformation. Before or after applying the dynamic local filtering operation we can add a dynamic pixel-wise bias to each element of the input IB to address situations like photometric changes. This dynamic bias can be produced by the same filter-generating network that generates the filters for the local filtering.\nWhen inputs IA and IB are both images, a natural way to implement the filter-generating network is with a convolutional network. This way, the generated position-specific filters are conditioned on the local image region around their corresponding position in IA. The receptive field of the convolutional network that generates the filters can be increased by using an encoder-decoder architecture. We can also apply a smoothness penalty to the output of the filter-generating network, so that neighboring filters are encouraged to apply the same transformation.\nAnother advantage of the dynamic local filtering layer over the traditional locally connected layer is that we do not need so many model parameters. The learned model is smaller and this is desirable in embedded system applications."}, {"heading": "3.3 Relationship with other networks", "text": "The generic formulation of our framework allows to draw parallels with other networks in the literature. Here we discuss the relation with the spatial transformer networks [11], the deep stereo network [5, 21], and the residual networks [8, 10].\nSpatial Transformer Networks The proposed dynamic filter network shares the same philosophy as the spatial transformer network proposed by [11], in that it applies a transformation conditioned on an input to a feature map. The spatial transformer network includes a localization network which takes a feature map as input, and it outputs the parameters of the desired spatial transformation. A grid generator and sampler are needed to apply the desired transformation to the feature map. This idea is similar to our dynamic filter network, which uses a filter-generating network to compute the parameters of the desired filters. The filters are applied on the feature map with a simple filtering operation that only consists of multiplication and summation operations.\nA spatial transformer network is naturally suited for global transformations, even sophisticated ones such as a thin plate spline. The dynamic filter network is more suitable for local transformations, because of the limited receptive field of the generated filters, although this problem can be alleviated with larger filters, stacking multiple dynamic filter modules, and using multi-resolution extensions. A more fundamental difference is that the spatial transformer is only suited for spatial transformations, whereas the dynamic filter network can apply more general ones (e.g. photometric, filtering), as long as the transformation is implementable as a series of filtering operations. This is illustrated in the first experiment in the next section.\nDeep Stereo The deep stereo network of [5] can be seen as a specific instantiation of a dynamic filter network with a local filtering layer where inputs IA and IB denote the same image, only a horizontal filter is generated and softmax is applied to each dynamic filter. The effect of the selection tower used in their network is equivalent to the proposed dynamic local filtering layer. For the specific task of stereo prediction, they use a more complicated architecture for the filter-generating network.\nResidual Networks We can also draw some parallels with the recently introduced residual networks [8, 10]. The relation between residual networks and dynamic filter networks becomes clear when we redraw the dia-\ngram of our architecture (see Figure 3). The core idea of ResNet is to learn a residual function with respect to the identity mapping, which is implemented as an additive shortcut connection. In the dynamic filter network, we also have two branches where one branch acts as a shortcut connection. However, instead of merging the output of the two branches with addition, we merge them with a dynamic filtering layer which is multiplicative in nature.\n4 Experiments\nThe Dynamic Filter Network can be used in different ways in a wide variety of applications. In this section we show its application in learning steerable filters, video prediction and also stereo prediction. The first application shows a simple use case of a dynamic filter network which uses a dynamic convolutional layer with two different types of inputs. The second one shows that we can integrate the dynamic filter module with a dynamic local filtering layer in a recurrent network to predict a sequence of frames. The third one shows its use case when there is only one kind of input. We use Theano [2] based library Lasagne [3] to implement all the experiments."}, {"heading": "4.1 Learning steerable filters", "text": "We first set up a simple experiment to illustrate the basics of the dynamic filter module with a dynamic convolution layer. The task is to filter an input image with a steerable filter of a given orientation \u03b8. The network must learn this transformation from looking at input-output pairs, consisting of randomly chosen input images and angles together with their corresponding output.\nThe task of the filter-generating network here is to transform an angle into a filter, which is then applied to the input image to generate the final output. We implement the filter-generating network as a few fully-connected layers with the last layer containing 81 neurons, corresponding to the elements of a 9x9 convolution filter. Figure 4 shows an example of the trained network. It has indeed learned the expected filters and applies the correct transformation to the image."}, {"heading": "4.2 Video prediction", "text": "Here we describe how we make use of the proposed dynamic filter network for video prediction. The architecture of our model is shown in Table 1 (right). Given a sequence of frames, the task is to predict the sequence of future frames that directly follow the input frames. To address this task we use the convolutional encoder-decoder as the filter-generating network where the encoder consists of several strided convolutional layers and the decoder consists of several unpooling layers and convolutional layers. The convolutional encoder-decoder is able to exploit the spatial correlation within a frame and generates feature maps that are of the same size as the frame. To exploit the temporal correlation between frames we add a recurrent connection inside the filter-generating network: we pass the previous hidden state through two convolutional layers and take the sum with the output of the encoder to produce the new hidden state. During prediction, we propagate the prediction from the previous time step. Note that we use a very simple recurrent architecture rather than the more advanced LSTM as in [19, 18]. A softmax layer is applied to each generated filter such that each filter is encouraged to have only a few non-zero elements. To produce the prediction of the next frame, the generated filters are applied on the previous frame to transform it according to the dynamic local filtering mechanism explained in Section 3. The use of a softmax layer helps the dynamic filtering layer to generate sharper images because each pixel in the output image comes from only a few pixels in the previous frame.\nMoving MNIST We first evaluate the method on the moving MNIST dataset [19]. We follow the setting in [19], that is, given a sequence of 10 frames with 2 moving digits as input, we predict the following 10 frames. We use the code provided by [19] to generate training samples on-the-fly, and test it on the provided test set for comparison. Only simple preprocessing is done to convert pixel values into the range [0,1].\nWe use the average binary cross-entropy over the 10 frames as loss function. The size of the dynamic filters is set to 9x9. We initialize all model parameters using the method proposed in [9] and use the Adam optimizer [12] with a learning rate of 0.001 to update those parameters. The network is trained end-to-end by backpropagation for 20, 000 iterations with mini-batch size of 16. The quantitative results are shown in Table 1 (left). We use the cross-entropy of predictions as the evaluation metric. Our method outperforms the state-of-the-art [19, 18] and this with a much smaller model. Figure 5 shows some qualitative results. With the dynamic local filtering layer our method is able to correctly learn the individual motions of digits. The convolutional encoder-decoder has a large receptive\nfield and this helps the model to learn the bouncing behavior and generate the right filters in case when digits bounce off the walls. We observe that the predictions deteriorate over time, i.e. the digits become blurry. This is partly because of the model error: our model is not able to perfectly separate digits after an overlap, and these errors accumulate over time. Another cause of blurring comes from an artifact of the dataset: because of imperfect cropping, it is uncertain when exactly the digit will bounce and change its direction. The behavior is not perfectly deterministic. This uncertainty combined with the pixel-wise loss function encourages the model to \"hedge its bets\" when a digit reaches the boundary, causing a blurry result. This issue could be alleviated with the methods proposed in [6, 7, 1].\nHighway Driving We also evaluate this method on real-world data. From our industrial partner we obtained a video of a car driving on the highway. Compared to natural video like UCF101 used in [17, 13], the highway driving data is highly structured and much more predictable, making it a good testbed for video prediction. There are many cases with illumination changes such as when the car drives through a tunnel. To address this issue, we make a small modification to the architecture as shown in Table 1 (right) by adding a dynamic per-pixel bias before the filtering operation in the dynamic local filtering layer. Because the Highway Driving sequence is less deterministic than moving MNIST, we only predict the next 3 frames given an input sequence of 3 frames. For longer sequences, the uncertainty would become too high for the network to learn a reasonable prediction with a simple pixel-wise loss function. A sampling based method might alleviate this problem but we leave it as future work. We split the approximately 20, 000 frames of the 30-minute video into a training set of 16, 000 frames and a test set of 4, 000 frames. During training, segments of 6 frames are selected randomly from the training set.\nWe train with a Euclidean loss function and obtain a loss of 13.54 on the test set with a model consisting of 368, 122 parameters. Figure 6 shows some qualitative results. Similar to the experiment on moving MNIST, the predictions get blurry over time. This can partly be attributed to the increasing uncertainty combined with an element-wise loss-function which encourages averaging out the possible predictions. Moreover, the errors accumulate over time which after a while makes the network operate in an out-of-domain regime.\nWe also visualize the dynamically generated filters of the trained model, in a flow-like manner. For each element of a filter we compute its shift to the center in x-axis and y-axis. Taking the weighted sum of x-axis shifts over all filter elements, we can then get the overall x-axis shift caused by one filter. Similarly, we can get the overall y-axis shift. A filter can thus approximately be visualized as a 2-dimensional vector. We then visualize the filters in the same way as optical flow, see Figure 7 (left). Though the flow map is not that smooth, this byproduct is learned in an unsupervised way by only training on unlabeled video data which is different from e.g. [4]."}, {"heading": "4.3 Stereo prediction", "text": "We also apply the Dynamic Filtering Network to the task of stereo prediction, which we define as predicting the right view given the left view of two horizontal-disparity cameras. This task is a variant of video prediction, where the goal is to predict a new view in space rather than in time, and from a single image rather than multiple ones. Flynn et al. [5] developed a deep network for new view synthesis from multiple views in unconstrained settings like musea, parks and streets. We limit ourselves to the more structured Highway Driving dataset and a classical two-view stereo setup.\nWe recycle the architecture from the previous section, but drop the recurrent connection which is used to model temporal correlation. Besides, based on the assumption that corresponding points are on the same horizontal line, we replace the square 9x9 filters with horizontal 13x1 filters. The network is trained and evaluated on the same train- and test split as in the previous section but with the left view as input and the right one as target. It reaches a loss of 0.52 on the test set with a model consisting of 464, 494 parameters. Some qualitative results are shown in Figure 7 (right). The network has learned to shift objects to the left depending on their distance to the camera.\nWe again compute flow-like maps for the generated dynamic filters. As shown in Figure 7 (right) the network has effectively learned to estimate depth information from a single image. The results suggest that it is possible to use the proposed dynamic filter network architecture to pre-train networks for optical flow and disparity map estimation in an unsupervised manner using only unlabeled data."}, {"heading": "5 Conclusion", "text": "In this paper we introduced Dynamic Filter Networks, a class of networks that applies dynamically generated filters to an image in a sample-specific way. We discussed two versions: dynamic convolution and dynamic local filtering. We validated our framework in the context of steerable filters, video prediction and stereo prediction. As future work, we plan to explore the potential of dynamic filter networks on other tasks, such as finegrained image classification, where filters could learn to adapt to the object pose, or image deblurring, where filters can be tuned to adapt to the image structure."}, {"heading": "B Stereo Prediction", "text": "We make a video of stereo prediction results for the whole test sequence which can be found at https: //drive.google.com/file/d/0B2k_yg56pxkxVFFWMDVycXg3Qmc/view?usp=sharing. In each frame, the first one is the left view image, the second one is the visualization of filters, the third one is our prediction of the right view, and the last one is the groundtruth."}], "references": [{"title": "Autoencoding beyond pixels using a learned similarity metric", "author": ["S\u00f8ren Kaae S\u00f8nderby"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2016}, {"title": "Theano: new features and speed improvements", "author": ["Fr\u00e9d\u00e9ric Bastien", "Pascal Lamblin", "Razvan Pascanu", "James Bergstra", "Ian J. Goodfellow", "Arnaud Bergeron", "Nicolas Bouchard", "Yoshua Bengio"], "venue": "Deep Learning and Unsupervised Feature Learning NIPS 2012 Workshop,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2012}, {"title": "Lasagne: First release", "author": ["Sander Dieleman", "Jan Schl\u00fcter", "Colin Raffel", "Eben Olson", "S\u00f8ren Kaae S\u00f8nderby", "Daniel Nouri", "Daniel Maturana", "Martin Thoma", "Eric Battenberg"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2015}, {"title": "Flownet: Learning optical flow with convolutional networks", "author": ["Alexey Dosovitskiy", "Philipp Fischer", "Eddy Ilg", "Philip H\u00e4usser", "Caner Hazirbas", "Vladimir Golkov", "Patrick van der Smagt", "Daniel Cremers", "Thomas Brox"], "venue": "In ICCV,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Deepstereo: Learning to predict new views from the world\u2019s imagery", "author": ["John Flynn", "Ivan Neulander", "James Philbin", "Noah Snavely"], "venue": "In CVPR,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "Generative adversarial nets", "author": ["Ian J. Goodfellow", "Jean Pouget-Abadie", "Mehdi Mirza", "Bing Xu", "David Warde-Farley", "Sherjil Ozair", "Aaron C. Courville", "Yoshua Bengio"], "venue": "In NIPS,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2014}, {"title": "Learning to linearize under uncertainty", "author": ["Ross Goroshin", "Micha\u00ebl Mathieu", "Yann LeCun"], "venue": "In NIPS,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2015}, {"title": "Deep residual learning for image recognition", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": "CoRR, abs/1512.03385,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": "In ICCV,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Identity mappings in deep residual networks", "author": ["Kaiming He", "Xiangyu Zhang", "Shaoqing Ren", "Jian Sun"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2016}, {"title": "Spatial transformer networks", "author": ["Max Jaderberg", "Karen Simonyan", "Andrew Zisserman", "Koray Kavukcuoglu"], "venue": "In NIPS,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}, {"title": "Adam: A method for stochastic optimization", "author": ["Diederik P. Kingma", "Jimmy Ba"], "venue": "CoRR, abs/1412.6980,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "Deep multi-scale video prediction beyond mean square", "author": ["Micha\u00ebl Mathieu", "Camille Couprie", "Yann LeCun"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2016}, {"title": "Image question answering using convolutional neural network with dynamic parameter prediction", "author": ["Hyeonwoo Noh", "Paul Hongsuck Seo", "Bohyung Han"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2016}, {"title": "Action-conditional video prediction using deep networks in atari games", "author": ["Junhyuk Oh", "Xiaoxiao Guo", "Honglak Lee", "Richard L. Lewis", "Satinder P. Singh"], "venue": "In NIPS,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2015}, {"title": "Spatio-temporal video autoencoder with differentiable memory", "author": ["Viorica Patraucean", "Ankur Handa", "Roberto Cipolla"], "venue": "CoRR, abs/1511.06309,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2015}, {"title": "Video (language) modeling: a baseline for generative models of natural videos", "author": ["Marc\u2019Aurelio Ranzato", "Arthur Szlam", "Joan Bruna", "Micha\u00ebl Mathieu", "Ronan Collobert", "Sumit Chopra"], "venue": "CoRR, abs/1412.6604,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2014}, {"title": "Convolutional LSTM network: A machine learning approach for precipitation nowcasting", "author": ["Xingjian Shi", "Zhourong Chen", "Hao Wang", "Dit-Yan Yeung", "Wai-Kin Wong", "Wang-chun Woo"], "venue": "In NIPS,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2015}, {"title": "Unsupervised learning of video representations using lstms", "author": ["Nitish Srivastava", "Elman Mansimov", "Ruslan Salakhutdinov"], "venue": "In ICML,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2015}, {"title": "Training very deep networks", "author": ["Rupesh Kumar Srivastava", "Klaus Greff", "J\u00fcrgen Schmidhuber"], "venue": "In NIPS,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2015}, {"title": "Deep3d: Fully automatic 2d-to-3d video conversion with deep convolutional neural networks", "author": ["Junyuan Xie", "Ross Girshick", "Ali Farhadi"], "venue": "arXiv preprint arXiv:1604.03650,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2016}, {"title": "Weakly-supervised disentangling with recurrent transformations for 3d view synthesis", "author": ["Jimei Yang", "Scott Reed", "Ming-Hsuan Yang", "Honglak Lee"], "venue": "In NIPS,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 2015}, {"title": "Rotating your face using multi-task deep neural network", "author": ["Junho Yim", "Heechul Jung", "ByungIn Yoo", "Changkyu Choi", "Du-Sik Park", "Junmo Kim"], "venue": "In CVPR,", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2015}], "referenceMentions": [{"referenceID": 22, "context": "[23] and Yang et al.", "startOffset": 0, "endOffset": 4}, {"referenceID": 21, "context": "[22] learn to rotate a given face to another pose.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "The authors of [17, 19, 18, 16, 13] train a deep neural network to predict subsequent video frames.", "startOffset": 15, "endOffset": 35}, {"referenceID": 18, "context": "The authors of [17, 19, 18, 16, 13] train a deep neural network to predict subsequent video frames.", "startOffset": 15, "endOffset": 35}, {"referenceID": 17, "context": "The authors of [17, 19, 18, 16, 13] train a deep neural network to predict subsequent video frames.", "startOffset": 15, "endOffset": 35}, {"referenceID": 15, "context": "The authors of [17, 19, 18, 16, 13] train a deep neural network to predict subsequent video frames.", "startOffset": 15, "endOffset": 35}, {"referenceID": 12, "context": "The authors of [17, 19, 18, 16, 13] train a deep neural network to predict subsequent video frames.", "startOffset": 15, "endOffset": 35}, {"referenceID": 4, "context": "[5] use a deep network to interpolate between views separated by a wide baseline.", "startOffset": 0, "endOffset": 3}, {"referenceID": 10, "context": "[11] propose a module called Spatial Transformer, which allows the network to actively spatially transform feature maps conditioned on themselves without explicit supervision.", "startOffset": 0, "endOffset": 4}, {"referenceID": 15, "context": "[16] extend the Spatial Transformer by modifying the grid generator such that it has one transformation for each position, instead of a single transformation for the entire image.", "startOffset": 0, "endOffset": 4}, {"referenceID": 13, "context": "[14] introduce a dynamic parameter layer whose output is used as parameters of a fully connected layer.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "[17] use an encoder-decoder framework in a way similar to language modeling.", "startOffset": 0, "endOffset": 4}, {"referenceID": 18, "context": "[19] propose a multilayer LSTM based autoencoder for both past frames reconstruction and future frames prediction.", "startOffset": 0, "endOffset": 4}, {"referenceID": 17, "context": "[18] who propose to use convolutional LSTM to replace the fully connected LSTM in the network.", "startOffset": 0, "endOffset": 4}, {"referenceID": 14, "context": "[15] address the problem of predicting future frames conditioned on both previous frames and actions.", "startOffset": 0, "endOffset": 4}, {"referenceID": 12, "context": "[13] manage to generate reasonably sharp frames by means of a multi-scale architecture, an adversarial training method, and an image gradient difference loss function.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "[5]", "startOffset": 0, "endOffset": 3}, {"referenceID": 20, "context": "[21] for 2D-to-3D conversion.", "startOffset": 0, "endOffset": 4}, {"referenceID": 4, "context": "None of these works adapt the filter operations of the network to the specific input sample, as we do, with the exception of [5, 21].", "startOffset": 125, "endOffset": 132}, {"referenceID": 20, "context": "None of these works adapt the filter operations of the network to the specific input sample, as we do, with the exception of [5, 21].", "startOffset": 125, "endOffset": 132}, {"referenceID": 19, "context": "Shortcut connections Our work also shares some similarity, through the use of shortcut connections, with the highway network [20] and the residual network [8, 10].", "startOffset": 125, "endOffset": 129}, {"referenceID": 7, "context": "Shortcut connections Our work also shares some similarity, through the use of shortcut connections, with the highway network [20] and the residual network [8, 10].", "startOffset": 155, "endOffset": 162}, {"referenceID": 9, "context": "Shortcut connections Our work also shares some similarity, through the use of shortcut connections, with the highway network [20] and the residual network [8, 10].", "startOffset": 155, "endOffset": 162}, {"referenceID": 7, "context": "[8, 10] propose to reformulate layers as learning residual functions instead of learning unreferenced functions.", "startOffset": 0, "endOffset": 7}, {"referenceID": 9, "context": "[8, 10] propose to reformulate layers as learning residual functions instead of learning unreferenced functions.", "startOffset": 0, "endOffset": 7}, {"referenceID": 10, "context": "Here we discuss the relation with the spatial transformer networks [11], the deep stereo network [5, 21], and the residual networks [8, 10].", "startOffset": 67, "endOffset": 71}, {"referenceID": 4, "context": "Here we discuss the relation with the spatial transformer networks [11], the deep stereo network [5, 21], and the residual networks [8, 10].", "startOffset": 97, "endOffset": 104}, {"referenceID": 20, "context": "Here we discuss the relation with the spatial transformer networks [11], the deep stereo network [5, 21], and the residual networks [8, 10].", "startOffset": 97, "endOffset": 104}, {"referenceID": 7, "context": "Here we discuss the relation with the spatial transformer networks [11], the deep stereo network [5, 21], and the residual networks [8, 10].", "startOffset": 132, "endOffset": 139}, {"referenceID": 9, "context": "Here we discuss the relation with the spatial transformer networks [11], the deep stereo network [5, 21], and the residual networks [8, 10].", "startOffset": 132, "endOffset": 139}, {"referenceID": 10, "context": "Spatial Transformer Networks The proposed dynamic filter network shares the same philosophy as the spatial transformer network proposed by [11], in that it applies a transformation conditioned on an input to a feature map.", "startOffset": 139, "endOffset": 143}, {"referenceID": 4, "context": "Deep Stereo The deep stereo network of [5] can be seen as a specific instantiation of a dynamic filter network with a local filtering layer where inputs IA and IB denote the same image, only a horizontal filter is generated and softmax is applied to each dynamic filter.", "startOffset": 39, "endOffset": 42}, {"referenceID": 7, "context": "Residual Networks We can also draw some parallels with the recently introduced residual networks [8, 10].", "startOffset": 97, "endOffset": 104}, {"referenceID": 9, "context": "Residual Networks We can also draw some parallels with the recently introduced residual networks [8, 10].", "startOffset": 97, "endOffset": 104}, {"referenceID": 1, "context": "We use Theano [2] based library Lasagne [3] to implement all the experiments.", "startOffset": 14, "endOffset": 17}, {"referenceID": 2, "context": "We use Theano [2] based library Lasagne [3] to implement all the experiments.", "startOffset": 40, "endOffset": 43}, {"referenceID": 18, "context": "Moving MNIST Model # params bce FC-LSTM [19] 142,667,776 341.", "startOffset": 40, "endOffset": 44}, {"referenceID": 17, "context": "2 Conv-LSTM [18] 7,585,296 367.", "startOffset": 12, "endOffset": 16}, {"referenceID": 18, "context": "Note that we use a very simple recurrent architecture rather than the more advanced LSTM as in [19, 18].", "startOffset": 95, "endOffset": 103}, {"referenceID": 17, "context": "Note that we use a very simple recurrent architecture rather than the more advanced LSTM as in [19, 18].", "startOffset": 95, "endOffset": 103}, {"referenceID": 18, "context": "Moving MNIST We first evaluate the method on the moving MNIST dataset [19].", "startOffset": 70, "endOffset": 74}, {"referenceID": 18, "context": "We follow the setting in [19], that is, given a sequence of 10 frames with 2 moving digits as input, we predict the following 10 frames.", "startOffset": 25, "endOffset": 29}, {"referenceID": 18, "context": "We use the code provided by [19] to generate training samples on-the-fly, and test it on the provided test set for comparison.", "startOffset": 28, "endOffset": 32}, {"referenceID": 0, "context": "Only simple preprocessing is done to convert pixel values into the range [0,1].", "startOffset": 73, "endOffset": 78}, {"referenceID": 8, "context": "We initialize all model parameters using the method proposed in [9] and use the Adam optimizer [12] with a learning rate of 0.", "startOffset": 64, "endOffset": 67}, {"referenceID": 11, "context": "We initialize all model parameters using the method proposed in [9] and use the Adam optimizer [12] with a learning rate of 0.", "startOffset": 95, "endOffset": 99}, {"referenceID": 18, "context": "Our method outperforms the state-of-the-art [19, 18] and this with a much smaller model.", "startOffset": 44, "endOffset": 52}, {"referenceID": 17, "context": "Our method outperforms the state-of-the-art [19, 18] and this with a much smaller model.", "startOffset": 44, "endOffset": 52}, {"referenceID": 5, "context": "This issue could be alleviated with the methods proposed in [6, 7, 1].", "startOffset": 60, "endOffset": 69}, {"referenceID": 6, "context": "This issue could be alleviated with the methods proposed in [6, 7, 1].", "startOffset": 60, "endOffset": 69}, {"referenceID": 0, "context": "This issue could be alleviated with the methods proposed in [6, 7, 1].", "startOffset": 60, "endOffset": 69}, {"referenceID": 16, "context": "Compared to natural video like UCF101 used in [17, 13], the highway driving data is highly structured and much more predictable, making it a good testbed for video prediction.", "startOffset": 46, "endOffset": 54}, {"referenceID": 12, "context": "Compared to natural video like UCF101 used in [17, 13], the highway driving data is highly structured and much more predictable, making it a good testbed for video prediction.", "startOffset": 46, "endOffset": 54}, {"referenceID": 3, "context": "[4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 4, "context": "[5] developed a deep network for new view synthesis from multiple views in unconstrained settings like musea, parks and streets.", "startOffset": 0, "endOffset": 3}], "year": 2017, "abstractText": "In a traditional convolutional layer, the learned filters stay fixed after training. In contrast, we introduce a new framework, the Dynamic Filter Network, where filters are generated dynamically conditioned on an input. We show that this architecture is a powerful one, with increased flexibility thanks to its adaptive nature, yet without an excessive increase in the number of model parameters. A wide variety of filtering operations can be learned this way, including local spatial transformations, but also others like selective (de)blurring or adaptive feature extraction. Moreover, multiple such layers can be combined, e.g. in a recurrent architecture. We demonstrate the effectiveness of the dynamic filter network on the tasks of video and stereo prediction, and reach state-of-the-art performance on the moving MNIST dataset with a much smaller model. By visualizing the learned filters, we illustrate that the network has picked up flow information by only looking at unlabelled training data. This suggests that the network can be used to pretrain networks for various supervised tasks in an unsupervised way, like optical flow and depth estimation.", "creator": "LaTeX with hyperref package"}}}