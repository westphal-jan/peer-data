{"id": "1605.09674", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-May-2016", "title": "VIME: Variational Information Maximizing Exploration", "abstract": "though objective effective exploration remains a key challenge in reinforcement learning ( app ). the tools are methods with reliable predictions in the setting of dense state vs action judgments, these methods cannot being suitable regarding high - detail deep rl scenarios. as such, nowadays mature rl insist on alternative heuristics though included \u03c0 - greedy scaling or adding gaussian noise to the controls. this paper introduces evolutionary information maximizing reasoning ( rr ), meaning exploration strategy based goal maximization about energy gain about the agent's belief into environment superiority. we propose a complete sequel, implementing variational inference in bayesian controlled networks which efficiently handles mixed state and action analysis. essentially modifies the smooth kernel functions, this can be applied amongst several different mathematical validation algorithms. shows demonstrate that vime achieves more closer performance compared older heuristic experiments as providing no variety of continuous control categories requiring algorithms, including tasks depicting very sparse images.", "histories": [["v1", "Tue, 31 May 2016 15:34:36 GMT  (3212kb,D)", "http://arxiv.org/abs/1605.09674v1", null], ["v2", "Wed, 17 Aug 2016 18:25:42 GMT  (3260kb,D)", "http://arxiv.org/abs/1605.09674v2", null], ["v3", "Wed, 23 Nov 2016 12:58:44 GMT  (3454kb,D)", "http://arxiv.org/abs/1605.09674v3", "Published in \"Advances in Neural Information Processing Systems\" (NIPS 2016)"], ["v4", "Fri, 27 Jan 2017 09:26:28 GMT  (3635kb,D)", "http://arxiv.org/abs/1605.09674v4", "Published in Advances in Neural Information Processing Systems 29 (NIPS), pages 1109-1117"]], "reviews": [], "SUBJECTS": "cs.LG cs.AI cs.RO stat.ML", "authors": ["rein houthooft", "xi chen", "xi chen", "yan duan", "john schulman", "filip de turck", "pieter abbeel"], "accepted": true, "id": "1605.09674"}, "pdf": {"name": "1605.09674.pdf", "metadata": {"source": "META", "title": "Curiosity-driven Exploration in Deep Reinforcement Learning via Bayesian Neural Networks", "authors": ["Rein Houthooft", "Xi Chen", "Yan Duan", "John Schulman", "Filip De Turck", "Pieter Abbeel"], "emails": [], "sections": [{"heading": null, "text": "Scalable and effective exploration remains a key challenge in reinforcement learning (RL). While there are methods with optimality guarantees in the setting of discrete state and action spaces, these methods cannot be applied in high-dimensional deep RL scenarios. As such, most contemporary RL relies on simple heuristics such as -greedy exploration or adding Gaussian noise to the controls. This paper introduces Variational Information Maximizing Exploration (VIME), an exploration strategy based on maximization of information gain about the agent\u2019s belief of environment dynamics. We propose a practical implementation, using variational inference in Bayesian neural networks which efficiently handles continuous state and action spaces. VIME modifies the MDP reward function, and can be applied with several different underlying RL algorithms. We demonstrate that VIME achieves significantly better performance compared to heuristic exploration methods across a variety of continuous control tasks and algorithms, including tasks with very sparse rewards."}, {"heading": "1 Introduction", "text": "Reinforcement learning (RL) studies how an agent can maximize its cumulative reward in a previously unknown environment, which it learns about through experience. A long-standing problem is how to manage the trade-off between exploration and exploitation. In exploration, the agent experiments with novel strategies that may improve returns in the long run; in exploitation, it maximizes rewards through behavior that is known to be successful. An effective exploration strategy allows the agent to generate trajectories that are maximally informative about the environment. For small tasks, this trade-off can be handled effectively through Bayesian RL [1] and PAC-MDP methods [2\u20136], which offer formal guarantees. However, these guarantees assume discrete state and action spaces. Hence, in settings where state-action discretization is infeasible, many RL algorithms use heuristic exploration strategies. Examples include acting randomly using -greedy or Boltzmann exploration [7], and utilizing Gaussian noise on the controls in policy gradient methods [8]. These heuristics often rely on random walk behavior which can be highly inefficient, for example Boltzmann exploration requires a training time exponential in the number of states in order to solve the well-known n-chain MDP [9]. In between formal methods and simple heuristics, several works have proposed to address the exploration problem using less formal, but more expressive methods [10\u201314]. However, none of them fully address exploration in continuous control, as discretization of the state-action space scales exponentially in its dimensionality. For example, the Walker2D task [15] has a 26-dim state-action space. If we assume a coarse discretization into 10 bins for each dimension, a table of state-action visitation counts would require 1026 entries. ar X\niv :1\n60 5.\n09 67\n4v 1\n[ cs\n.L G\n] 3\n1 M\nThis paper proposes a curiosity-driven exploration strategy, making use of information gain about the agent\u2019s internal belief of the dynamics model as a driving force. This principle can be traced back to the concepts of curiosity and surprise [16\u201318]. Within this framework, agents are encouraged to take actions that result in states they deem surprising\u2014i.e., states that cause large updates to the dynamics model distribution. We propose a practical implementation of measuring information gain using variational inference. Herein, the agent\u2019s current understanding of the environment dynamics is represented by a Bayesian neural networks (BNN) [19, 20]. We also show how this can be interpreted as measuring compression improvement, a proposed model of curiosity [21]. In contrast to previous curiosity-based approaches [10, 22], our model scales naturally to continuous state and action spaces. The presented approach is evaluated on a range of continuous control tasks, and multiple underlying RL algorithms. Experimental results show that VIME achieves significantly better performance than na\u00efve exploration strategies."}, {"heading": "2 Methodology", "text": "In Section 2.1, we establish notation for the subsequent equations. Next, in Section 2.2, we explain the theoretical foundation of curiosity-driven exploration. In Section 2.3 we describe how to adapt this idea to continuous control, and we show how to build on recent advances in variational inference for Bayesian neural networks (BNNs) to make this formulation practical. Thereafter, we make explicit the intuitive link between compression improvement and the variational lower bound in Section 2.4. Finally, Section 2.5 describes how our method is practically implemented."}, {"heading": "2.1 Preliminaries", "text": "This paper assumes a finite-horizon discounted Markov decision process (MDP), defined by (S,A,P, r, \u03c10, \u03b3, T ), in which S \u2286 Rn is a state set, A \u2286 Rm an action set, P : S \u00d7A\u00d7S \u2192 R\u22650 a transition probability distribution, r : S \u00d7 A \u2192 R a bounded reward function, \u03c10 : S \u2192 R\u22650 an initial state distribution, \u03b3 \u2208 (0, 1] a discount factor, and T the horizon. States and actions viewed as random variables are abbreviated as S and A. The presented models are based on the optimization of a stochastic policy \u03c0\u03b1 : S \u00d7 A \u2192 R\u22650, parametrized by \u03b1. Let \u00b5(\u03c0\u03b1) denote its expected discounted return: \u00b5(\u03c0\u03b1) = E\u03c4 [ \u2211T t=0 \u03b3\ntr(st, at)], where \u03c4 = (s0, a0, . . .) denotes the whole trajectory, s0 \u223c \u03c10(s0), at \u223c \u03c0\u03b1(at|st), and st+1 \u223c P(st+1|st, at)."}, {"heading": "2.2 Curiosity", "text": "Our method builds on the theory of curiosity-driven exploration [16, 17, 21, 22], in which the agent engages in systematic exploration by seeking out state-action regions that are relatively unexplored. The agent models the environment dynamics via a model p(st+1|st, at; \u03b8), parametrized by the random variable \u0398 with values \u03b8 \u2208 \u0398. Assuming a prior p(\u03b8), it maintains a distribution over dynamic models through a distribution over \u03b8, which is updated in a Bayesian manner (as opposed to a point estimate). The history of the agent up until time step t is denoted as \u03bet = {s1, a1, . . . , st}. According to curiosity-driven exploration [17], the agent should take actions that maximize the reduction in uncertainty about the dynamics. This can be formalized as maximizing the sum of reductions in entropy \u2211 t (H(\u0398|\u03bet, at)\u2212H(\u0398|St+1, \u03bet, at)) , (1) through a sequence of actions {at}. According to information theory, the individual terms equal the mutual information between the next state distribution St+1 and the model parameter \u0398, namely I (St+1; \u0398|\u03bet, at). Therefore, the agent is encouraged to take actions that lead to states that are maximally informative about the dynamics model. Furthermore, we note that\nI (St+1; \u0398|\u03bet, at) = Est+1\u223cP(\u00b7|\u03bet,at) [ DKL[p(\u03b8|\u03bet, at, st+1)\u2016p(\u03b8|\u03bet)] ] , (2)\nthe KL divergence from the agent\u2019s new belief over the dynamics model to the old one, taking expectation over all possible next states according to the true dynamics P . This KL divergence can be interpreted as information gain.\nIf calculating the posterior dynamics distribution is tractable, it is possible to optimize Eq. (2) directly by maintaining a belief over the dynamics model [17]. However, this is not generally the case. Therefore, a common practice [10, 23] is to use RL to approximate planning for maximal mutual information along a trajectory \u2211 t I (St+1; \u0398|\u03bet, at) by adding each term I (St+1; \u0398|\u03bet, at) as an intrinsic reward, which captures the agent\u2019s surprise in the form of a reward function. This is practically realized by taking actions at \u223c \u03c0\u03b1(st) and sampling st+1 \u223c P(\u00b7|st, at) in order to add DKL[p(\u03b8|\u03bet, at, st+1)\u2016p(\u03b8|\u03bet)] to the external reward. The trade-off between exploitation and exploration can now be realized explicitly as follows:\nr\u2032(st, at, st+1) = r(st, at) + \u03b7DKL[p(\u03b8|\u03bet, at, st+1)\u2016p(\u03b8|\u03bet)], (3) with \u03b7 \u2208 R+ a hyperparameter controlling the urge to explore. In conclusion, the biggest practical issue with maximizing information gain for exploration is that the computation of Eq. (3) requires calculating the posterior p(\u03b8|\u03bet, at, st+1), which is generally intractable."}, {"heading": "2.3 Variational Bayes", "text": "We propose a tractable solution to maximize the information gain objective presented in the previous section. In a purely Bayesian setting, we can derive the posterior distribution given a new state-action pair through Bayes\u2019 rule as\np(\u03b8|\u03bet, at, st+1) = p(\u03b8|\u03bet)p(st+1|\u03bet, at; \u03b8)\np(st+1|\u03bet, at) , (4)\nwith p(\u03b8|\u03bet, at) = p(\u03b8|\u03bet) as actions do not influence beliefs about the environment [17]. Herein, the denominator is computed through the integral\np(st+1|\u03bet, at) = \u222b\n\u0398\np(st+1|\u03bet, at; \u03b8)p(\u03b8|\u03bet)d\u03b8. (5)\nIn general, this integral tends to be intractable when using highly expressive parametrized models (e.g., neural networks), which are often needed to accurately capture the environment model in high-dimensional continuous control.\nWe propose a practical solution through variational inference [24]. Herein, we embrace the fact that calculating the posterior p(\u03b8|D) for a data set D is intractable. Instead we approximate it through an alternative distribution q(\u03b8;\u03c6), parameterized by \u03c6, by minimizing DKL[q(\u03b8;\u03c6)\u2016p(\u03b8|D)]. This is done through maximization of the variational lower bound L[q(\u03b8;\u03c6),D]:\nL[q(\u03b8;\u03c6),D] = E\u03b8\u223cq(\u00b7;\u03c6) [log p(D|\u03b8)]\u2212DKL[q(\u03b8;\u03c6)\u2016p(\u03b8)]. (6) Rather than computing information gain in Eq. (3) explicitly, we compute an approximation to it, leading to the following total reward:\nr\u2032(st, at, st+1) = r(st, at) + \u03b7DKL[q(\u03b8;\u03c6t+1)\u2016q(\u03b8;\u03c6t)], (7) with \u03c6t+1 the updated and \u03c6t the old parameters representing the agent\u2019s belief. Natural candidates for parametrizing the agent\u2019s dynamics model are Bayesian neural networks (BNNs) [19], as they maintain a distribution over their weights. This allows us to view the BNN as an infinite neural network ensemble by integrating out its parameters:\np(y|x) = \u222b\n\u0398\np(y|x; \u03b8)q(\u03b8;\u03c6)d\u03b8. (8)\nIn particular, we utilize a BNN parametrized by a fully factorized Gaussian distribution [20]. Practical BNN implementation details are deferred to Section 2.5, while we give some intuition into the behavior of BNNs in the appendix."}, {"heading": "2.4 Compression", "text": "It is possible to derive an interesting relationship between compression improvement\u2014an intrinsic reward objective defined in [25], and the information gain of Eq. (2). In [25], the agent\u2019s curiosity is\nequated with compression improvement, measured through C(\u03bet;\u03c6t\u22121)\u2212 C(\u03bet;\u03c6t), where C(\u03be;\u03c6) is the description length of \u03be using \u03c6 as a model. Furthermore, it is known that the negative variational lower bound can be viewed as the description length [19]. Hence, we can write compression improvement as L[q(\u03b8;\u03c6t), \u03bet] \u2212 L[q(\u03b8;\u03c6t\u22121), \u03bet]. In addition, an alternative formulation of the variational lower bound in Eq. (6) is given by\nlog p(D) =\nL[q(\u03b8;\u03c6),D]\ufe37 \ufe38\ufe38 \ufe37\u222b\n\u0398\nq(\u03b8;\u03c6) log p(\u03b8,D) q(\u03b8;\u03c6) d\u03b8+DKL[q(\u03b8;\u03c6)\u2016p(\u03b8|D)]. (9)\nThus, compression improvement can now be written as\n(log p(\u03bet)\u2212DKL[q(\u03b8;\u03c6t)\u2016p(\u03b8|\u03bet)])\u2212 (log p(\u03bet)\u2212DKL[q(\u03b8;\u03c6t\u22121)\u2016p(\u03b8|\u03bet)]) . (10) If we assume that \u03c6t perfectly optimizes the variational lower bound for the history \u03bet, then DKL[q(\u03b8;\u03c6t)\u2016p(\u03b8|\u03bet)] = 0, which occurs when the approximation equals the true posterior, i.e., q(\u03b8;\u03c6t) = p(\u03b8|\u03bet). Hence, compression improvement becomes\nDKL[p(\u03b8|\u03bet\u22121)\u2016p(\u03b8|\u03bet)]. (11) Therefore, optimizing for compression improvement comes down to optimizing the KL divergence from the posterior given the past history \u03bet\u22121 to the posterior given the total history \u03bet. As such, we arrive at an alternative way to encode curiosity than information gain, namely DKL[p(\u03b8|\u03bet)\u2016p(\u03b8|\u03bet, at, st+1)], its reversed KL divergence. In experiments, we noticed no significant difference between the two KL divergence variants. This can be explained as both variants are locally equal when introducing small changes to the parameter distributions. Investigation of how to combine both information gain and compression improvement is deferred to future work."}, {"heading": "2.5 Implementation", "text": "The complete method is summarized in Algorithm 1. We first set forth implementation and parametrization details of the dynamics BNN. The BNN weight distribution q(\u03b8;\u03c6) is given by the fully factorized Gaussian distribution [20]:\nq(\u03b8;\u03c6) = \u220f|\u0398| i=1N (\u03b8i|\u00b5i;\u03c32i ). (12)\nHence, \u03c6 = {\u00b5, \u03c3}, with \u00b5 the Gaussian\u2019s mean vector and \u03c3 the covariance matrix diagonal. This is particularly convenient as it allows for a simple analytical formulation of the KL divergence. This is described later in this section. Because of the restriction \u03c3 > 0, the standard deviation of the Gaussian BNN parameter is parametrized as \u03c3 = log(1 + e\u03c1), with \u03c1 \u2208 R [20].\nNow the training of the dynamics BNN through optimization of the variational lower bound is described. The second term in Eq. (6) is approximated through sampling E\u03b8\u223cq(\u00b7;\u03c6) [log p(D|\u03b8)] \u2248 1 N \u2211N i=1 log p(D|\u03b8i) withN samples drawn according to \u03b8 \u223c q(\u00b7;\u03c6) [20]. Optimizing the variational lower bound in Eq. (6) in combination with the reparametrization trick is called stochastic gradient variational Bayes (SGVB) [26] or Bayes by Backprop [20]. Furthermore, we make use of the local reparametrization trick proposed in [26], in which sampling at the weights is replaced by sampling the neuron pre-activations, which is more computationally efficient and reduces gradient variance. The optimization of the variational lower bound is done at regular intervals during the RL training process, by sampling D from a FIFO replay pool that stores recent samples (st, at, st+1). This is to break up the strong intratrajectory sample correlation which destabilizes learning in favor of obtaining i.i.d. data [7]. Moreover, it diminishes the effect of compounding posterior approximation errors.\nThe posterior distribution of the dynamics parameter, which is needed to compute the KL divergence in the total reward function r\u2032 of Eq. (7), can be computed through the following minimization\n\u03c6\u2032 = arg min \u03c6 [ `(q(\u03b8;\u03c6),st)\ufe37 \ufe38\ufe38 \ufe37 DKL[q(\u03b8;\u03c6)\u2016q(\u03b8;\u03c6t\u22121)]\ufe38 \ufe37\ufe37 \ufe38\n`KL(q(\u03b8;\u03c6))\n\u2212E\u03b8\u223cq(\u00b7;\u03c6) [log p(st|\u03b8)] ] , (13)\nwhere we replace the expectation over \u03b8 with samples \u03b8 \u223c q(\u00b7;\u03c6). Because we only update the model periodically based on samples drawn from the replay pool, this optimization can be performed in\nAlgorithm 1: Variational Information Maximizing Exploration (VIME) 1 for each epoch n do 2 for each timestep t in each trajectory generated during n do 3 Generate action at \u223c \u03c0\u03b1(st) and sample state st+1 \u223c P(\u00b7|\u03bet, at), get r(st, at). 4 Add triplet (st, at, st+1) to FIFO replay poolR. 5 Compute intrinsic reward DKL[q(\u03b8;\u03c6\u2032n+1)\u2016q(\u03b8;\u03c6n+1)] through approximation \u2207>H\u22121\u2207, following Eq. (17), or by optimizing Eq. (13) to obtain \u03c6\u2032n+1. 6 Divide DKL[q(\u03b8;\u03c6\u2032n+1)\u2016q(\u03b8;\u03c6n+1)] by median of previous KL divergences. 7 Construct r\u2032(st, at, st+1)\u2190 r(st, at) + \u03b7DKL[q(\u03b8;\u03c6\u2032n+1)\u2016q(\u03b8;\u03c6n+1)], following Eq. (7). 8 Minimize DKL[q(\u03b8;\u03c6n)\u2016p(\u03b8)]\u2212 E\u03b8\u223cq(\u00b7;\u03c6n) [log p(D|\u03b8)] following Eq. (6), with D sampled randomly fromR, leading to updated posterior q(\u03b8;\u03c6n+1). 9 Use rewards {r\u2032(st, at, st+1)} to update policy \u03c0\u03b1 using any standard RL method.\nparallel for each st, keeping \u03c6t\u22121 fixed. Once \u03c6\u2032 has been obtained, we can use it to compute the intrinsic reward.\nTo optimize Eq. (13) efficiently, we only take a single second-order step. This way, the gradient is rescaled according to the curvature of the KL divergence at the origin. As such, we compute DKL[q(\u03b8;\u03c6+ \u03bb\u2206\u03c6)\u2016q(\u03b8;\u03c6)], with the update step \u2206\u03c6 defined as\n\u2206\u03c6 = H\u22121(`)\u2207\u03c6`(q(\u03b8;\u03c6), st), (14) in which H(`) is the Hessian of `(q(\u03b8;\u03c6), st). Since we assume that the variational approximation is a fully factorized Gaussian, the KL divergence from posterior to prior has a particularly simple form:\nDKL[q(\u03b8;\u03c6)\u2016q(\u03b8;\u03c6\u2032)] = 12 \u2211|\u0398| i=1 (( \u03c3i \u03c3\u2032i )2 + 2 log \u03c3\u2032i \u2212 2 log \u03c3i + (\u00b5 \u2032 i\u2212\u00b5i)2 \u03c3\u20322i ) \u2212 |\u0398|2 . (15)\nBecause this KL divergence is approximately quadratic in its parameters and the log-likelihood term can be seen as locally linear compared to this highly curved KL term, we approximate H by only calculating it for the term KL term `KL(q(\u03b8;\u03c6)). This can be computed very efficiently in case of a fully factorized Gaussian distribution, as this approximation becomes a diagonal matrix. Looking at Eq. (15), we can calculate the following Hessian at the origin. The \u00b5 and \u03c11 entries are defined as\n\u22022`KL \u2202\u00b52i = 1 log2(1 + e\u03c1i) and \u22022`KL \u2202\u03c12i = 2e2\u03c1i (1 + e\u03c1i)2 1 log2(1 + e\u03c1i) , (16)\nwhile all other entries are zero. Furthermore, it is also possible to approximate the KL divergence through a second-order Taylor expansion as 12\u2206\u03c6H\u2206\u03c6 = 1 2 ( H\u22121\u2207 )> H ( H\u22121\u2207 ) `. This gives us\nDKL[q(\u03b8;\u03c6+ \u03bb\u2206\u03c6)\u2016q(\u03b8;\u03c6)] \u2248 12\u03bb2\u2207\u03c6`>H\u22121(`KL)\u2207\u03c6`. (17) Note that H\u22121(`KL) is diagonal, so this expression can be computed efficiently.\nInstead of using the KL divergence DKL[q(\u03b8;\u03c6t+1)\u2016q(\u03b8;\u03c6t)] directly as an intrinsic reward in Eq. (7), we normalize it by division through the average of the median2 KL divergences taken over a fixed number of previous trajectories. Rather than focusing on its absolute value, we emphasize relative difference in KL divergence between samples. This accomplishes the same effect since the variance of KL divergence converges to zero, once the model is fully learned."}, {"heading": "3 Experiments", "text": "In this section, we investigate (i) whether VIME can succeed in domains that have extremely sparse rewards, (ii) whether VIME improves learning when the reward is shaped to guide the agent towards its goal, and (iii) how \u03b7, as used in in Eq. (3), trades off exploration and exploitation behavior.\n1Recall that the standard deviation is parametrized as \u03c3 = log(1 + e\u03c1). 2The median is used as it is more robust to KL divergence outliers.\nAll experiments make use of the rllab [15] benchmark code base and the complementary continuous control tasks suite. The following tasks are part of the experimental setup: CartPole (S \u2286 R4, A \u2286 R1), CartPoleSwingup (S \u2286 R4,A \u2286 R1), DoublePendulum (S \u2286 R6,A \u2286 R1), MountainCar (S \u2286 R3, A \u2286 R1), locomotion tasks HalfCheetah (S \u2286 R20, A \u2286 R6), Walker2D (S \u2286 R20, A \u2286 R6), and the hierarchical task SwimmerGather (S \u2286 R33, A \u2286 R2). Performance is measured through the average return (not including the intrinsic rewards) over the trajectories generated (y-axis) at each iteration (x-axis). More specifically, the darker-colored lines in each plot represent the median performance over a fixed set of 10 random seeds while the shaded areas show the interquartile range at each iteration. Moreover, the number in each legend shows this performance measure, averaged over all iterations. The exact experimental setup is described in the Appendix (Supplementary Material).\nDomains with sparse rewards are difficult to solve through na\u00efve exploration behavior because, before the agent obtains any reward, it lacks a feedback signal on how to improve its policy. This allows us to test whether an exploration strategy is truly capable of systematic exploration, rather than improving existing RL algorithms by adding more hyperparameters. Therefore, VIME is compared with heuristic exploration strategies on the following tasks with sparse rewards. A reward of +1 is given when the car escapes the valley on the right side in MountainCar; when the pole is pointed upwards in CartPoleSwingup; and when the cheetah moves forward over five units in HalfCheetah. We compare VIME with the following baselines: only using Gaussian control noise [15] and using the `2 BNN prediction error as an intrinsic reward, a continuous extension of [10]. TRPO [8] is used as the RL algorithm, as it performs very well compared to other methods [15]. Figure 1 shows the performance results. We notice that using a na\u00efve exploration performs very poorly, as it is almost never able to reach the goal in any of the tasks. Similarly, using `2 errors does not perform well. In contrast, VIME performs much better, achieving the goal in most cases. This experiment demonstrates that curiosity drives the agent to explore, even in the absence of any initial reward, where na\u00efve exploration completely breaks down.\nTo further strengthen this point, we have evaluated VIME on the highly difficult hierarchical task SwimmerGather in Figure 5 whose reward signal is naturally sparse. In this task, a two-link robot needs to reach \u201capples\u201d while avoiding \u201cbombs\u201d that are perceived through a laser scanner. However, before it can make any forward progress, it has to learn complex locomotion primitives in the absence of any reward. None of the RL methods tested previously in [15] were able to make progress with na\u00efve exploration. Remarkably, VIME leads the agent to acquire coherent motion primitives without any reward guidance, achieving promising results on this challenging task.\nNext, we investigate whether VIME is widely applicable by (i) testing it on environments where the reward is well shaped, and (ii) pairing it with different RL methods. In addition to TRPO, we choose to equip REINFORCE [27] and ERWR [28] with VIME because these two algorithms usually suffer from premature convergence to suboptimal policies [15, 29], which can potentially be alleviated by better exploration. Their performance is shown in Figure 2 on several well-established continuous control tasks. Furthermore, Figure 3 shows the same comparison for the Walker2D locomotion task. In the majority of cases, VIME leads to a significant performance gain over heuristic exploration. Our exploration method allows the RL algorithms to converge faster, and notably helps REINFORCE and ERWR avoid converging to a locally optimal solution on DoublePendulum and MountainCar. We note that in environments such as CartPole, a better exploration strategy is redundant as following the policy gradient direction leads to the globally optimal solution. Additionally, we tested adding Gaussian noise to the rewards as a baseline, which did not improve performance.\nTo give an intuitive understanding of VIME\u2019s exploration behavior, the distribution of visited states for both na\u00efve exploration and VIME after convergence is investigated. Figure 1d shows that using Gaussian control noise exhibits random walk behavior: the state visitation plot is more condensed and ball-shaped around the center. In comparison, VIME leads to a more diffused visitation pattern, exploring the states more efficiently, and hence reaching the goal more quickly.\nFinally, we investigate how \u03b7, as used in in Eq. (3), trades off exploration and exploitation behavior. On the one hand, higher \u03b7 values should lead to a higher curiosity drive, causing more exploration. On the other hand, very low \u03b7 values should reduce VIME to traditional Gaussian control noise. Figure 4 shows the performance on MountainCar for different \u03b7 values. Setting \u03b7 too high clearly results in prioritizing exploration over getting additional external reward. Too low of an \u03b7 value reduces the method to the baseline algorithm, as the intrinsic reward contribution to the total reward r\u2032 becomes negligible. Most importantly, this figure highlights that there is a wide \u03b7 range for which the task is best solved, across different algorithms."}, {"heading": "4 Related Work", "text": "A body of theoretically oriented work demonstrates exploration strategies that are able to learn online in a previously unknown MDP and incur a polynomial amount of regret\u2014as a result, these algorithms find a near-optimal policy in a polynomial amount of time. Some of these algorithms are based on the principle of optimism under uncertainty: E3 [3], R-Max [4], UCRL [30]. An alternative approach is\nBayesian reinforcement learning methods, which maintain a distribution over possible MDPs [1, 17, 23, 31]. The optimism-based exploration strategies have been extended to continuous state spaces, for example, [6, 9], however these methods do not accommodate nonlinear function approximators (in contrast to VIME).\nPractical RL algorithms often rely on simple exploration heuristics, such as -greedy and Boltzmann exploration [32]. However, these heuristics exhibit random walk exploratory behavior, which can lead to exponential regret even in case of small MDPs [9].\nOur proposed method of utilizing information gain can be traced back to [22], and has been further explored in [17, 33, 34]. Other metrics for curiosity have also been proposed, including prediction error [10, 35], prediction error improvement [36], and leverage [14]. All these methods have only been tested on small problems, and are not directly applicable to high dimensional continuous control tasks. We refer the reader to [21, 37] for an extensive review on curiosity and intrinsic rewards.\nRecently, there have been various exploration strategies proposed in the context of deep RL. [10] proposes to use the `2 prediction error as the intrinsic reward. [12] performs approximate visitation counting in a learned state embedding using Gaussian kernels. [11] proposes a form of Thompson sampling, training multiple value functions using bootstrapping. Although these approaches can scale up to high-dimensional state spaces, they generally assume discrete action spaces. Finally, [38] proposes a variational method for information maximization in the context of optimizing empowerment, which, as noted by [39], does not explicitly favor exploration."}, {"heading": "5 Conclusions", "text": "We have proposed Variational Information Maximizing Exploration (VIME), a curiosity-driven exploration strategy for continuous control tasks. Variational inference is used to approximate the posterior distribution of a Bayesian neural network that represents the environment dynamics. Using information gain in this learned dynamics model as intrinsic rewards allows the agent to optimize for both external reward and intrinsic surprise simultaneously. Empirical results show that VIME performs significantly better than heuristic exploration methods across various continuous control tasks and algorithms. As future work, we would like to investigate measuring surprise in the value function and using the learned dynamics model for planning."}, {"heading": "Acknowledgments", "text": "This work was supported in part by DARPA, the Berkeley Vision and Learning Center (BVLC), the Berkeley Artificial Intelligence Research (BAIR) laboratory, and Berkeley Deep Drive (BDD). Rein Houthooft is supported by a Ph.D. Fellowship of the Research Foundation - Flanders (FWO)."}, {"heading": "A Bayesian neural networks (BNNs)", "text": "We demonstrate the behavior of a BNN [1] when trained on simple regression data. Figure 1 shows a snapshot of the behavior of the BNN during training. In this figure, the red dots represent the regression training data, which has a 1-dim input x and a 1-dim output. The input to the BNN is constructed as x = [x, x2, x3, x4]. The green dots represent BNN predictions, each for a differently sampled \u03b8 value, according to q(\u00b7;\u03c6). The color lines represent the output for different, but fixed, \u03b8 samples. The shaded areas represent the sampled output mean plus-minus one and two standard deviations.\nThe figure shows that the BNN output is very certain in the training data range, while having high uncertainty otherwise. If we introduce data outside of this training range, or data that is significantly different from the training data, it will have a high impact on the parameter distribution q(\u03b8;\u03c6). This is tested in Figure 2: previously unseen data is introduced right before training iteration 10,000. The KL divergence from posterior to prior (y-axis) is set out in function of the training iteration number (x-axis). We see a sharp spike in the KL divergence curve, which represents the BNN\u2019s surprise about this novel data. This spike diminishes over time as the BNN learns to fit this new data, becoming less surprised about it."}, {"heading": "B Experimental setup", "text": "In case of the classic tasks CartPole, CartPoleSwingup, DoublePendulum, and MountainCar, as well as in the case of the hierarchical task SwimmerGather, the dynamics BNN has one hidden layer of 32 units. For the locomotion tasks Walker2D and HalfCheetah, the dynamics BNN has two hidden layers of 64 units each. All hidden layers have rectified linear unit (ReLU) nonlinearities, while no nonlinearity is applied to the output layer. The number of samples drawn to approximate the variational lower bound expectation term is fixed to 10. The batch size for the policy gradient methods is set to 5,000 samples, except for the SwimmerGather task, where it is set to 50,000. The replay pool has a fixed size of 100,000 samples, with a minimum size of 500 samples for all but the SwimmerGather task. In this latter case, the replay pool has a size of 1,000,000 samples. The dynamics BNN is updated each epoch, using 500 iterations of Adam [2], with a batch size of 10, except for the SwimmerGather task, in which 5,000 iterations are used. The Adam learning rate is set to 0.0001 while the batches are drawn randomly with replacement from the replay pool. In the second-order KL divergence update step, \u03bb is set to 0.01. The BNN prior weight distribution is a fully factorized Gaussian with \u00b5 sampled from a different Gaussian distribution N (0, I), while \u03c1 is fixed to log(1 + e0.5).\nThe classic tasks make use of a neural network policy with one layer of 32 tanh units, while the locomotion tasks make use of a two-layer neural network of 64 and 32 tanh units. The outputs are modeled by a fully factorized Gaussian distributionN (\u00b5, \u03c32I), in which \u00b5 is modeled as the network\noutput, while \u03c3 is a parameter. The classic tasks make use of a neural network baseline with one layer of 32 ReLU units, while the locomotion tasks make use linear baseline function.\nAll tasks are implemented as described in [3]. The tasks have the following state and action dimensions: CartPole, S \u2286 R4, A \u2286 R1; CartPoleSwingup, S \u2286 R4, A \u2286 R1; DoublePendulum, S \u2286 R6, A \u2286 R1; MountainCar S \u2286 R3, A \u2286 R1; locomotion tasks HalfCheetah, S \u2286 R20, A \u2286 R6; and Walker2D, S \u2286 R20, A \u2286 R6; and hierarchical task SwimmerGather, S \u2286 R33, A \u2286 R2. The time horizon is set to T = 500 for all tasks. For the sparse reward experiments, the tasks have been modified as follows. In MountainCar, the agent receives a reward of +1 when the goal state is reached, namely escaping the valley from the right side. In CartPoleSwingup, the agent receives a reward of +1 when cos(\u03b2) > 0.8, with \u03b2 the pole angle. Therefore, the agent has to figure out how to swing up the pole in the absence of any initial external rewards. In HalfCheetah, the agent receives a reward of +1 when xbody > 5. As such, it has to figure out how to move forward without any initial external reward."}], "references": [{"title": "Weight uncertainty in neural networks", "author": ["C. Blundell", "J. Cornebise", "K. Kavukcuoglu", "D. Wierstra"], "venue": "in ICML,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2015}, {"title": "Adam: A method for stochastic optimization", "author": ["D. Kingma", "J. Ba"], "venue": "ICLR,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2015}, {"title": "Benchmarking deep reinforcement learning for continous control", "author": ["Y. Duan", "X. Chen", "R. Houthooft", "J. Schulman", "P. Abbeel"], "venue": "in ICML,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}], "referenceMentions": [{"referenceID": 0, "context": "For small tasks, this trade-off can be handled effectively through Bayesian RL [1] and PAC-MDP methods [2\u20136], which offer formal guarantees.", "startOffset": 79, "endOffset": 82}, {"referenceID": 1, "context": "For small tasks, this trade-off can be handled effectively through Bayesian RL [1] and PAC-MDP methods [2\u20136], which offer formal guarantees.", "startOffset": 103, "endOffset": 108}, {"referenceID": 2, "context": "For small tasks, this trade-off can be handled effectively through Bayesian RL [1] and PAC-MDP methods [2\u20136], which offer formal guarantees.", "startOffset": 103, "endOffset": 108}, {"referenceID": 2, "context": "Some of these algorithms are based on the principle of optimism under uncertainty: E [3], R-Max [4], UCRL [30].", "startOffset": 85, "endOffset": 88}, {"referenceID": 0, "context": "Bayesian reinforcement learning methods, which maintain a distribution over possible MDPs [1, 17, 23, 31].", "startOffset": 90, "endOffset": 105}], "year": 2016, "abstractText": "Scalable and effective exploration remains a key challenge in reinforcement learning (RL). While there are methods with optimality guarantees in the setting of discrete state and action spaces, these methods cannot be applied in high-dimensional deep RL scenarios. As such, most contemporary RL relies on simple heuristics such as -greedy exploration or adding Gaussian noise to the controls. This paper introduces Variational Information Maximizing Exploration (VIME), an exploration strategy based on maximization of information gain about the agent\u2019s belief of environment dynamics. We propose a practical implementation, using variational inference in Bayesian neural networks which efficiently handles continuous state and action spaces. VIME modifies the MDP reward function, and can be applied with several different underlying RL algorithms. We demonstrate that VIME achieves significantly better performance compared to heuristic exploration methods across a variety of continuous control tasks and algorithms, including tasks with very sparse rewards.", "creator": "LaTeX with hyperref package"}}}