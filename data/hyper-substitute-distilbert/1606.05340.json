{"id": "1606.05340", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jun-2016", "title": "Exponential expressivity in deep neural networks through transient chaos", "abstract": "we know riemannian rings formula narrow surface field directly solving high surface chaos investigations conclude the nature of signal propagation in generic, deep periodic manifold with random weights. our results reveal an extended - to - large expressivity topology transition, with networks in the inverse phase computing parameter maps involving global curvature grows exponentially thus depth but not width., prove this generic class of deep behavior functions cannot get literally encountered by any shallow machine, going beyond prior work restricted to modern definition of smooth functions. moreover, we formalize structures can demonstrate : formally conjectured suggestion that elastic networks collectively modify highly curved manifolds in input space into flat manifolds in hidden space. our theoretical analysis of the information power yields deep networks broadly applying to arbitrary graphs, as provides a weaker connection through previously abstract circles discussing projective representations of deep regions.", "histories": [["v1", "Thu, 16 Jun 2016 19:59:57 GMT  (5829kb,D)", "http://arxiv.org/abs/1606.05340v1", null], ["v2", "Fri, 17 Jun 2016 18:13:20 GMT  (6482kb,D)", "http://arxiv.org/abs/1606.05340v2", "Fixed equation references"]], "reviews": [], "SUBJECTS": "stat.ML cond-mat.dis-nn cs.LG", "authors": ["ben poole", "subhaneil lahiri", "maithreyi raghu", "jascha sohl-dickstein", "surya ganguli"], "accepted": true, "id": "1606.05340"}, "pdf": {"name": "1606.05340.pdf", "metadata": {"source": "CRF", "title": "Exponential expressivity in deep neural networks through transient chaos", "authors": ["Ben Poole", "Surya Ganguli"], "emails": ["poole@cs.stanford.edu", "sulahiri@stanford.edu", "maithrar@gmail.com", "jaschasd@google.com", "sganguli@stanford.edu"], "sections": [{"heading": "1 Introduction", "text": "Deep feedforward neural networks, with multiple hidden layers, have achieved remarkable performance across many domains [1\u20134]. A key factor thought to underlie their success is their high expressivity. This informal notion has manifested itself primarily in two forms of intuition. The first is that deep networks can compactly express highly complex functions over input space in a way that shallow networks with one hidden layer and the same number of neurons cannot. The second piece of intuition, which has captured the imagination of machine learning [5] and neuroscience [6] alike, is that deep neural networks can disentangle highly curved manifolds in input space into flattened manifolds in hidden space, to aid the performance of simple linear readouts. These intuitions, while attractive, have been difficult to formalize mathematically, and thereby rigorously test.\nFor the first intuition, seminal works have exhibited examples of particular functions that can be computed with a polynomial number of neurons (in the input dimension) in a deep network but require an exponential number of neurons in a shallow network [7\u201311]. This raises a central open question: are such functions merely rare curiosities, or is any function computed by a generic deep network not efficiently computable by a shallow network? The theoretical techniques employed in prior work both limited the applicability of theory to specific nonlinearities and dictated the particular measure of deep functional complexity involved. For example [7] focused on ReLu nonlinearities and number of linear regions as a complexity measure, while [8] focused on sum-product networks and the number of monomials as complexity measure, and [12] focused on Pfaffian nonlinearities and topological measures of complexity, like the sum of Betti numbers of a decision boundary. However,\nCode to reproduce all results available at: https://github.com/ganguli-lab/deepchaos\nar X\niv :1\n60 6.\n05 34\n0v 1\n[ st\nat .M\nL ]\n1 6\nsee [13] for an interesting analysis of a general class of compositional functions. The limits of prior theoretical techniques raise another central question: is there a unifying theoretical framework for deep neural expressivity that is simultaneously applicable to arbitrary nonlinearities, generic networks, and a natural, general measure of functional complexity?\nHere we attack both central problems of deep neural expressivity by combining a very different set of tools, namely Riemannian geometry [14] and dynamical mean field theory [15]. This novel combination enables us to show that for very broad classes of nonlinearities, even random deep neural networks can construct hidden internal representations whose global extrinsic curvature grows exponentially with depth but not width. Our geometric framework enables us to quantitatively define a notion of disentangling and verify this notion even in deep random networks. Furthermore, our methods yield insights into the emergent, deterministic nature of signal propagation through large random feedforward networks, revealing the existence of an order to chaos transition as a function of the statistics of weights and biases. We find that the transient, finite depth evolution in the chaotic regime underlies the origins of exponential expressivity in deep random networks.\nIn our companion paper [16], we study several related measures of expressivity in deep random neural networks with piecewise linear activations."}, {"heading": "2 A mean field theory of deep nonlinear signal propagation", "text": "Consider a deep feedforward network with D layers of weights W1, . . . ,WD and D + 1 layers of neural activity vectors x0, . . . ,xD, with Nl neurons in each layer l, so that xl \u2208 RNl and Wl is an Nl \u00d7Nl\u22121 weight matrix. The feedforward dynamics elicited by an input x0 is given by xl = \u03c6(hl) hl = Wl xl\u22121 + bl for l = 1, . . . , D, (1) where bl is a vector of biases, hl is the pattern of inputs to neurons at layer l, and \u03c6 is a single neuron scalar nonlinearity that acts component-wise to transform inputs hl to activities xl. We wish to understand the nature of typical functions computable by such networks, as a consequence of their depth. We therefore study ensembles of random networks in which each of the synaptic weights Wlij are drawn i.i.d. from a zero mean Gaussian with variance \u03c3 2 w/Nl\u22121, while the biases are drawn i.i.d. from a zero mean Gaussian with variance \u03c32b . This weight scaling ensures that the input contribution to each individual neuron at layer l from activities in layer l \u2212 1 remains O(1), independent of the layer width Nl\u22121. This ensemble constitutes a maximum entropy distribution over deep neural networks, subject to constraints on the means and variances of weights and biases. This ensemble induces no further structure in the resulting set of deep functions, so its analysis provides an opportunity to understand the specific contribution of depth alone to the nature of typical functions computed by deep networks.\nIn the limit of large layer widths, Nl 1, certain aspects of signal propagation through deep random neural networks take on an essentially deterministic character. This emergent determinism in large random neural networks enables us to understand how the Riemannian geometry of simple manifolds in the input layer x0 is typically modified as the manifold propagates into the deep layers. For example, consider the simplest case of a single input vector x0. As it propagates through the network, its length in downstream layers will change. We track this changing length by computing the normalized squared length of the input vector at each layer:\nql = 1\nNl\nNl\u2211\ni=1\n(hli) 2. (2)\nThis length is the second moment of the empirical distribution of inputs hli across all Nl neurons in layer l. For large Nl, this empirical distribution converges to a zero mean Gaussian since each hli = \u2211 jW l ij\u03c6(h l\u22121 j ) + b l i is a weighted sum of a large number of uncorrelated random variables - i.e. the weights Wlij and biases b l i, which are independent of the activity in previous layers. By propagating this Gaussian distribution across one layer, we obtain an iterative map for ql in (11):\nql = V(ql\u22121 |\u03c3w, \u03c3b) \u2261 \u03c32w \u222b Dz \u03c6 (\u221a ql\u22121z )2 + \u03c32b , for l = 2, . . . , D, (3)\nwhereDz = dz\u221a 2\u03c0 e\u2212\nz2\n2 is the standard Gaussian measure, and the initial condition is q1 = \u03c32wq 0 +\u03c32b ,\nwhere q0 = 1N0x 0 \u00b7 x0 is the length in the initial activity layer. See Supplementary Material (SM)\nfor a derivation of (13). Intuitively, the integral over z in (13) replaces an average over the empirical distribution of hli across neurons i in layer l at large layer width Nl.\nThe function V in (13) is an iterative variance, or length, map that predicts how the length of an input in (11) changes as it propagates through the network. This length map is plotted in Fig. 1A for the special case of a sigmoidal nonlinearity, \u03c6(h) = tanh(h). For monotonic nonlinearities, this length map is a monotonically increasing, concave function whose intersections with the unity line determine its fixed points q\u2217(\u03c3w, \u03c3b). For \u03c3b = 0 and \u03c3w < 1, the only intersection is at q\u2217 = 0. In this bias-free, small weight regime, the network shrinks all inputs to the origin. For \u03c3w > 1 and \u03c3b = 0, the q\u2217 = 0 fixed point becomes unstable and the length map acquires a second nonzero fixed point, which is stable. In this bias-free, large weight regime, the network expands small inputs and contracts large inputs. Also, for any nonzero bias \u03c3b, the length map has a single stable non-zero fixed point. In such a regime, even with small weights, the injected biases at each layer prevent signals from decaying to 0. The dynamics of the length map leads to rapid convergence of length to its fixed point with depth (Fig. 1B,D), often within only 4 layers. The fixed points q\u2217(\u03c3w, \u03c3b) are shown in Fig. 1C."}, {"heading": "3 Transient chaos in deep networks", "text": "Now consider the layer-wise propagation of two inputs x0,1 and x0,2. The geometry of these two inputs as they propagate through the network is captured by the 2 by 2 matrix of inner products:\nqlab = 1\nNl\nNl\u2211\ni=1\nhli(x 0,a)hli(x 0,b) a, b \u2208 {1, 2}. (4)\nThe dynamics of the two diagonal terms are each theoretically predicted by the length map in (13). We derive (see SM) a correlation map C that predicts the layer-wise dynamics of ql12:\nql12 = C(cl\u2212112 , q l\u22121 11 , q l\u22121 22 |\u03c3w, \u03c3b) \u2261 \u03c32w \u222b Dz1Dz2 \u03c6 (u1)\u03c6 (u2) + \u03c32b , (5)\nu1 = \u221a ql\u2212111 z1, u2 = \u221a ql\u2212122 [ cl\u2212112 z1 + \u221a 1\u2212 (cl\u2212112 )2z2 ] ,\nwhere cl12 = q l 12(q l 11q l 22) \u22121/2 is the correlation coefficient. Here z1 and z2 are independent standard Gaussian variables, while u1 and u2 are correlated Gaussian variables with covariance matrix \u3008uaub\u3009 = ql\u22121ab . Together, (13) and (15) constitute a theoretical prediction for the typical evolution of the geometry of 2 points in (14) in a fixed large network.\nAnalysis of these equations reveals an interesting order to chaos transition in the \u03c3w and \u03c3b plane. In particular, what happens to two nearby points as they propagate through the layers? Their relation to\neach other can be tracked by the correlation coefficient cl12 between the two points, which approaches a fixed point c\u2217(\u03c3w, \u03c3b) at large depth. Since the length of each point rapidly converges to q\u2217(\u03c3w, \u03c3b), as shown in Fig. 1BD, we can compute c\u2217 by simply setting ql11 = q l 22 = q\n\u2217(\u03c3w, \u03c3b) in (15) and dividing by q\u2217 to obtain an iterative correlation coefficient map, or C-map, for cl12:\ncl12 = 1 q\u2217 C(cl\u2212112 , q\u2217, q\u2217 |\u03c3w, \u03c3b). (6)\nThis C-map is shown in Fig. 2A. It always has a fixed point at c\u2217 = 1 as can be checked by direct calculation. However, the stability of this fixed point depends on the slope of the map at 1, which is\n\u03c71 \u2261 \u2202cl12 \u2202cl\u2212112 \u2223\u2223\u2223\u2223\u2223 c=1 = \u03c32w \u222b Dz [ \u03c6\u2032 (\u221a q\u2217z )]2 . (7)\nSee SM for a derivation of (19). If the slope \u03c71 is less than 1, then the C-map is above the unity line, the fixed point at 1 under the C-map in (16) is stable, and nearby points become more similar\nover time. Conversely, if \u03c71 > 1 then this fixed point is unstable, and nearby points separate as they propagate through the layers. Thus we can intuitively understand \u03c71 as a multiplicative stretch factor. This intuition can be made precise by considering the Jacobian Jlij = W l ij\u03c6 \u2032(hl\u22121j ) at a point hl\u22121j with length q \u2217. Jl is a linear approximation of the network map from layer l \u2212 1 to l in the vicinity of hl\u22121. Therefore a small random perturbation hl\u22121 + u will map to hl + Ju. The growth of the perturbation, ||Ju||22/||u||22 becomes \u03c71(q\u2217) after averaging over the random perturbation u, weight matrix Wl, and Gaussian distribution of hl\u22121i across i. Thus \u03c71 directly reflects the typical multiplicative growth or shrinkage of a random perturbation across one layer.\nThe dynamics of the iterative C-map and its agreement with network simulations is shown in Fig. 2B. The correlation dynamics are much slower than the length dynamics because the C-map is closer to the unity line (Fig. 2A) than the length map (Fig. 1A). Thus correlations typically take about 20 layers to approach the fixed point, while lengths need only 4. The fixed point c\u2217 and slope \u03c71 of the C-map are shown in Fig. 2CD. For any fixed, finite \u03c3b, as \u03c3w increases three qualitative regions occur. For small \u03c3w, c\u2217 = 1 is the only fixed point, and it is stable because \u03c71 < 1. In this strong bias regime, any two input points converge to each other as they propagate through the network. As \u03c3w increases, \u03c71 increases and crosses 1, destabilizing the c\u2217 = 1 fixed point. In this intermediate regime, a new stable fixed point c\u2217 appears, which decreases as \u03c3w increases. Here an equal footing competition between weights and nonlinearities (which de-correlate inputs) and the biases (which correlate them), leads to a finite c\u2217. At larger \u03c3w, the strong weights overwhelm the biases and maximally de-correlate inputs to make them orthogonal, leading to a stable fixed point at c\u2217 = 0.\nThus the equation \u03c71(\u03c3w, \u03c3b) = 1 yields a phase transition boundary in the (\u03c3w, \u03c3b) plane, separating it into a chaotic (or ordered) phase, in which nearby points separate (or converge). In dynamical systems theory, the logarithm of \u03c71 is related to the well known Lyapunov exponent which is positive (or negative) for chaotic (or ordered) dynamics. However, in a feedforward network, the dynamics is truncated at a finite depth D, and hence the dynamics are a form of transient chaos."}, {"heading": "4 The propagation of manifold geometry through deep networks", "text": "Now consider a 1 dimensional manifold x0(\u03b8) in input space, where \u03b8 is an intrinsic scalar coordinate on the manifold. This manifold propagates to a new manifold hl(\u03b8) = hl(x0(\u03b8)) in the vector space of inputs to layer l. The typical geometry of the manifold in the l\u2019th layer is summarized by ql(\u03b81, \u03b82), which for any \u03b81 and \u03b82 is defined by (14) with the choice x0,a = x0(\u03b81) and x0,b = x0(\u03b82). The theory for the propagation of pairs of points applies to all pairs of points on the manifold, so intuitively, we expect that in the chaotic phase of a sigmoidal network, the manifold should in some sense de-correlate, and become more complex, while in the ordered phase the manifold should contract around a central point. This theoretical prediction of equations (13) and (15) is quantitatively confirmed in simulations in Fig. 3, when the input is a simple manifold, the circle, h1(\u03b8) = \u221a N1q [ u0 cos(\u03b8) + u1 sin(\u03b8) ] , where u0 and u1 form an orthonormal basis for a 2 dimensional subspace of RN1 in which the circle lives. The scaling is chosen so that each neuron has input activity O(1). Also, for simplicity, we choose the fixed point radius q = q\u2217 in Fig. 3.\nTo quantitatively understand the layer-wise growth of complexity of this manifold, it is useful to turn to concepts in Riemannian geometry [14]. First, at each point \u03b8, the manifold h(\u03b8) (we temporarily suppress the layer index l) has a tangent, or velocity vector v(\u03b8) = \u2202\u03b8h(\u03b8). Intuitively, curvature is related to how quickly this tangent vector rotates in the ambient space RN as one moves along the manifold, or in essence the acceleration vector a(\u03b8) = \u2202\u03b8v(\u03b8). Now at each point \u03b8, when both are nonzero, v(\u03b8) and a(\u03b8) span a 2 dimensional subspace of RN . Within this subspace, there is a unique circle of radius R(\u03b8) that has the same position, velocity and acceleration vector as the curve h(\u03b8) at \u03b8. This circle is known as the osculating circle (Fig. 4A), and the extrinsic curvature \u03ba(\u03b8) of the curve is defined as \u03ba(\u03b8) = 1/R(\u03b8). Thus, intuitively, small radii of curvature R(\u03b8) imply high extrinsic curvature \u03ba(\u03b8). The extrinsic curvature of a curve depends only on its image in RN and is invariant with respect to the particular parameterization \u03b8 \u2192 h(\u03b8). For any parameterization, an explicit expression for \u03ba(\u03b8) is given by \u03ba(\u03b8) = (v \u00b7v)\u22123/2 \u221a (v \u00b7 v)(a \u00b7 a)\u2212 (v \u00b7 a)2 [14]. Note that\nunder a unit speed parameterization of the curve, so that v(\u03b8) \u00b7 v(\u03b8) = 1, we have v(\u03b8) \u00b7 a(\u03b8) = 0, and \u03ba(\u03b8) is simply the norm of the acceleration vector.\nAnother measure of the curve\u2019s complexity is the length LE of its image in the ambient Euclidean space. The Euclidean metric in RN induces a metric gE(\u03b8) = v(\u03b8) \u00b7 v(\u03b8) on the curve, so that the distance dLE moved in RN as one moves from \u03b8 to \u03b8 + d\u03b8 on the curve is dLE = \u221a gE(\u03b8)d\u03b8. The total curve length is LE = \u222b \u221a\ngE(\u03b8)d\u03b8. However, even straight line segments can have a large Euclidean length. Another interesting measure of length that takes into account curvature, is the length of the image of the curve under the Gauss map. For aK dimensional manifoldM embedded in RN , the Gauss map (Fig. 4B) maps a point \u03b8 \u2208M to itsK dimensional tangent plane T\u03b8M\u2208 GK,N , where GK,N is the Grassmannian manifold of allK dimensional subspaces in RN . In the special case of K = 1, GK,N is the sphere SN\u22121 with antipodal points identified, since a 1-dimensional subspace can be identified with a unit vector, modulo sign. The Gauss map takes a point \u03b8 on the curve and maps it to the unit velocity vector v\u0302(\u03b8) = v(\u03b8)/ \u221a v(\u03b8) \u00b7 v(\u03b8). In particular, the natural metric on SN\u22121 induces a Gauss metric on the curve, given by gG(\u03b8) = (\u2202\u03b8v\u0302(\u03b8)) \u00b7 (\u2202\u03b8v\u0302(\u03b8)), which measures how quickly the unit tangent vector v\u0302(\u03b8) changes as \u03b8 changes. Thus the distance dLG moved in the Grassmannian GK,N as one moves from \u03b8 to \u03b8 + d\u03b8 on the curve is dLG = \u221a gG(\u03b8)d\u03b8, and the\nlength of the curve under the Gauss map is LG = \u222b \u221a\ngG(\u03b8)d\u03b8. Furthermore, the Gauss metric is related to the extrinsic curvature and the Euclidean metric via the relation gG(\u03b8) = \u03ba(\u03b8)2gE(\u03b8) [14].\nTo illustrate these concepts, it is useful to compute all of them for the circle h1(\u03b8) defined above: gE(\u03b8) = Nq, LE = 2\u03c0 \u221a Nq, \u03ba(\u03b8) = 1/ \u221a Nq, gG(\u03b8) = 1, and LG = 2\u03c0. As expected, \u03ba(\u03b8) is the inverse of the radius of curvature, which is \u221a Nq. Now consider how these quantities change if the circle is scaled up so that h(\u03b8) \u2192 \u03c7h(\u03b8). The length LE and radius scale up by \u03c7, but the curvature \u03ba scales down as \u03c7\u22121, and so LG does not change. Thus linear expansion increases length and decreases curvature, thereby maintaining constant Grassmannian length LG. We now show that nonlinear propagation of this same circle through a deep network can behave very differently from linear expansion: in the chaotic regime, length can increase without any decrease in extrinsic curvature! To remove the scaling with N in the above quantities, we will work with the renormalized quantities \u03ba\u0304 = \u221a N\u03ba, g\u0304E = 1N g E , and L\u0304E = 1\u221a N LE . Thus, 1/(\u03ba\u0304)2 can be thought\nof as a radius of curvature squared per neuron of the osculating circle, while (L\u0304E)2 is the squared Euclidean length of the curve per neuron. For the circle, these quantities are q and 2\u03c0q respectively. For simplicity, in the inputs to the first layer of neurons, we begin with a circle h1(\u03b8) with squared radius per neuron q1 = q\u2217, so this radius is already at the fixed point of the length map in (13). In the SM, we derive an iterative formula for the extrinsic curvature and Euclidean metric of this manifold as it propagates through the layers of a deep network:\ng\u0304E,l = \u03c71 g\u0304 E,l\u22121 (\u03ba\u0304l)2 = 3 \u03c72 \u03c721 + 1 \u03c71 (\u03ba\u0304l\u22121)2, g\u0304E,1 = q\u2217, (\u03ba\u03041)2 = 1/q\u2217. (8)\nwhere \u03c71 is the stretch factor defined in (19) and \u03c72 is defined analogously as\n\u03c72 = \u03c3 2 w\n\u222b Dz [ \u03c6\u2032\u2032 (\u221a q\u2217z )]2 . (9)\n\u03c72 is closely related to the second derivative of the C-map in (16) at cl\u2212112 = 1; this second derivative is \u03c72q\u2217. See App. C for a derivation of the evolution equations (27) for the extrinsic geometry of a curve as it propagates through a deep network.\nIntriguingly for a sigmoidal neural network, these evolution equations behave very differently in the chaotic (\u03c71 > 1) versus ordered (\u03c71 < 1) phase. In the chaotic phase, the Euclidean metric g\u0304E grows exponentially with depth due to multiplicative stretching through \u03c71. This stretching does multiplicatively attenuate any curvature in layer l \u2212 1 by a factor 1/\u03c71 (see the update equation for \u03ba\u0304l in (27)), but new curvature is added in due to a nonzero \u03c72, which originates from the curvature of the single neuron nonlinearity in (28). Thus, unlike in linear expansion, extrinsic curvature is not lost, but maintained, and ultimately approaches a fixed point \u03ba\u0304\u2217. This implies that the global curvature measure L\u0304G grows exponentially with depth. These highly nontrivial predictions of the metric and curvature evolution equations in (27) are quantitatively confirmed in simulations in Figure 4C-E.\nIntuitively, this exponential growth of global curvature L\u0304G in the chaotic phase implies that the curve explores many different tangent directions in hidden representation space. This further implies that the coordinate functions of the embedding hli(\u03b8) become highly complex curved basis functions on the input manifold coordinate \u03b8, allowing a deep network to compute exponentially complex functions over simple low dimensional manifolds (Figure 5A-C, details in SM). In our companion paper [16], we further develop the relationship between length and expressivity in terms of the number of achievable classification patterns on a set of inputs. Moreover, we explore how training a single layer at different depths from the output affects network performance.\nA neurons B regression\nC angular error for deep networks\nD angular error for wide networks"}, {"heading": "5 Shallow networks cannot achieve exponential expressivity", "text": "Consider a shallow network with 1 hidden layer x1, one input layer x0, with x1 = \u03c6(W1x0) + b1, and a linear readout layer. How complex can the hidden representation be as a function of its width N1, relative to the results above for depth? We prove a general upper bound on LE (see SM):\nTheorem 1. Suppose \u03c6(h) is monotonically non-decreasing with bounded dynamic range R, i.e. maxh \u03c6(h)\u2212minh \u03c6(h) = R. Further suppose that x0(\u03b8) is a curve in input space such that no 1D projection of \u2202\u03b8x(\u03b8) changes sign more than s times over the range of \u03b8. Then for any choice of W1 and b1 the Euclidean length of x1(\u03b8), satisfies LE \u2264 N1(1 + s)R.\nFor the circle input, s = 1 and for the tanh nonlinearity,R = 2, so in this special case, the normalized length L\u0304E \u2264 2 \u221a N1. In contrast, for deep networks in the chaotic regime L\u0304E grows exponentially with depth in h space, and so consequently also in x space. Therefore the length of curves typically expand exponentially in depth even for random deep networks, but can only expand as the square root of width no matter what shallow network is chosen. Moreover, as we have seen above, it is the exponential growth of L\u0304E that fundamentally drives the exponential growth of L\u0304G with depth. Indeed shallow random networks exhibit minimal growth in expressivity even at large widths (Figure 5D)."}, {"heading": "6 Classification boundaries acquire exponential local curvature with depth", "text": "We have focused so far on how simple manifolds in input space can acquire both exponential Euclidean and Grassmannian length with depth, thereby exponentially de-correlating and filling up hidden representation space. Another natural question is how the complexity of a decision boundary grows as it is backpropagated to the input layer. Consider a linear classifier y = sgn(\u03b2 \u00b7 xD \u2212 \u03b20) acting on the final layer. In this layer, the N \u2212 1 dimensional decision boundary is the hyperplane \u03b2 \u00b7xD\u2212\u03b20 = 0. However, in the input layer x0, the decision boundary is a curvedN\u22121 dimensional manifoldM that arises as the solution set of the nonlinear equation G(x0) \u2261 \u03b2 \u00b7 xD(x0)\u2212 \u03b20 = 0, where xD(x0) is the nonlinear feedforward map from input to output.\nAt any point x\u2217 on the decision boundary in layer l, the gradient ~\u2207G is perpendicular to the N \u2212 1 dimensional tangent plane Tx\u2217M (see Fig. 4F). The normal vector ~\u2207G, along with any unit tangent vector v\u0302 \u2208 Tx\u2217M, spans a 2 dimensional subspace whose intersection withM yields a geodesic curve inM passing through x\u2217 with velocity vector v\u0302. This geodesic will have extrinsic curvature \u03ba(x\u2217, v\u0302). Maximizing this curvature over v\u0302 yields the first principal curvature \u03ba1(x\u2217). A sequence of successive maximizations of \u03ba(x\u2217, v\u0302), while constraining v\u0302 to be perpendicular to all previous solutions, yields the sequence of principal curvatures \u03ba1(x\u2217) \u2265 \u03ba2(x\u2217) \u2265 \u00b7 \u00b7 \u00b7 \u2265 \u03baN\u22121(x\u2217). These principal curvatures arise as the eigenvalues of a normalized Hessian operator projected onto the tangent plane Tx\u2217M: H = ||~\u2207G||\u221212 P \u2202 2G \u2202x\u2202xT\nP, where P = I\u2212 \u2207\u0302G\u2207\u0302GT is the projection operator onto Tx\u2217M and \u2207\u0302G is the unit normal vector [14]. Intuitively, near x\u2217, the decision boundaryM can be approximated as a paraboloid with a quadratic form H whose N \u2212 1 eigenvalues are the principal curvatures \u03ba1, . . . , \u03baN\u22121 (Fig. 4F).\nWe compute these curvatures numerically as a function of depth in Fig. 4G (see SM for details). We find, remarkably, that a subset of principal curvatures grow exponentially with depth. Here the principal curvatures are signed, with positive (negative) curvature indicating that the associated geodesic curves towards (away from) the normal vector ~\u2207G. Thus the decision boundary can become exponentially curved with depth, enabling highly complex classifications. Moreover, this exponentially curved boundary is disentangled and mapped to a flat boundary in the output layer."}, {"heading": "7 Discussion", "text": "Fundamentally, neural networks compute nonlinear maps between high dimensional spaces, for example from RN1 \u2192 RND , and it is unclear what the most appropriate mathematics is for understanding such daunting spaces of maps. Previous works have attacked this problem by restricting the nature of the nonlinearity involved (e.g. piecewise linear, sum-product, or Pfaffian) and thereby restricting the space of maps to those amenable to special theoretical analysis methods (combinatorics, polynomial relations, or topological invariants). We have begun a preliminary exploration of the expressivity of such deep functions based on Riemannian geometry and dynamical mean field theory. We demonstrate that networks in a chaotic phase compactly exhibit functions that exponentially grow the global curvature of simple one dimensional manifolds from input to output and the local curvature of simple co-dimension one manifolds from output to input. The former captures the notion that deep neural networks can efficiently compute highly expressive functions in ways that shallow networks\ncannot, while the latter quantifies and demonstrates the power of deep neural networks to disentangle curved input manifolds, an attractive idea that has eluded formal quantification.\nMoreover, our analysis of a maximum entropy distribution over deep networks constitutes an important null model of deep signal propagation that can be used to assess and understand different behavior in trained networks. For example, the metrics we have adapted from Riemannian geometry, combined with an understanding of their behavior in random networks, may provide a basis for understanding what is special about trained networks. Furthermore, while we have focused on the notion of input-output chaos, the duality between inputs and synaptic weights imply a form of weight chaos, in which deep neural networks rapidly traverse function space as weights change (see SM). Indeed, just as autocorrelation lengths between outputs as a function of inputs shrink exponentially with depth, so too will autocorrelations between outputs as a function of weights.\nBut more generally, to understand functions, we often look to their graphs. The graph of a map from RN1 \u2192 RND is an RN1 dimensional submanifold of RN1+ND , and therefore has both high dimension and co-dimension. We speculate that many of the secrets of deep learning may be uncovered by studying the geometry of this graph as a Riemannian manifold, and understanding how it changes with both depth and learning."}, {"heading": "A Derivation of a transient dynamical mean field theory for deep networks", "text": "We study a deep feedforward network with D layers of weights W1, . . . ,WD and D + 1 layers of neural activity vectors x0, . . . ,xD, with Nl neurons in each layer l, so that xl \u2208 RNl and Wl is an Nl \u00d7Nl\u22121 weight matrix. The feedforward dynamics elicited by an input x0 is given by\nxl = \u03c6(hl) hl = Wl xl\u22121 + bl for l = 1, . . . , D, (10)\nwhere bl is a vector of biases, hl is the pattern of inputs to neurons at layer l, and \u03c6 is a single neuron scalar nonlinearity that acts component-wise to transform inputs hl to activities xl. The synaptic weights Wlij are drawn i.i.d. from a zero mean Gaussian with variance \u03c3 2 w/Nl\u22121, while the biases are drawn i.i.d. from a zero mean Gaussian with variance \u03c32b . This weight scaling ensures that the input contribution to each individual neuron at layer l from activities in layer l \u2212 1 remains O(1), independent of the layer width Nl\u22121.\nA.1 Derivation of the length map\nAs a single input point x0 propagates through the network, it\u2019s length in downstream layers can either grow or shrink. To track the propagation of this length, we track the normalized squared length of the input vector at each layer,\nql = 1\nNl\nNl\u2211\ni=1\n(hli) 2. (11)\nThis length is the second moment of the empirical distribution of inputs hli across all Nl neurons in layer l for a fixed set of weights. This empirical distribution is expected to be Gaussian for large Nl, since each individual hli = w\nl,i \u00b7 \u03c6(hl\u22121) + bli is Gaussian distributed, as a sum of a large number of independent random variables, and each hli is independent of h l j for i 6= j because the synaptic weights vectors and biases into each neuron are chosen independently.\nWhile the mean of this Gaussian is 0, its variance can be computed by considering the variance of the input to a single neuron:\nql = \u2329 (hli) 2 \u232a = \u2329[ wl,i \u00b7 \u03c6(hl\u22121) ]2\u232a + \u2329 (bli) 2 \u232a = \u03c32w 1\nNl\u22121\nNl\u22121\u2211\ni=1\n\u03c6(hl\u22121i ) 2 + \u03c32b , (12)\nwhere \u3008\u00b7\u3009 denotes an average over the distribution of weights and biases into neuron i at layer l. Here we have used the identity \u3008wl,ij w l,i k \u3009 = \u03b4jk \u03c32w/Nl\u22121. Now the empirical distribution of inputs across layer l\u2212 1 is also Gaussian, with mean zero and variance ql\u22121. Therefore we can replace the average over neurons in layer l \u2212 1 in (12) with an integral over a Gaussian random variable, obtaining\nql = V(ql\u22121 |\u03c3w, \u03c3b) \u2261 \u03c32w \u222b Dz \u03c6 (\u221a ql\u22121z )2 + \u03c32b , for l = 2, . . . , D, (13)\nwhere Dz = dz\u221a 2\u03c0 e\u2212\nz2\n2 is the standard Gaussian measure, and the initial condition for the variance map is q1 = \u03c32wq0 + \u03c3 2 b , where q 0 = 1N0x 0 \u00b7 x0 is the length in the initial activity layer. The function V in (13) is an iterative variance map that predicts how the length of an input in (11) changes as it propagates through the network. Its derivation relies on the well-known self-averaging assumption in the statistical physics of disordered systems, which, in our context, means that the empirical distribution of inputs across neurons for a fixed network converges for large width, to the distribution of inputs to a single neuron across random networks.\nA.2 Derivation of a correlation map for the propagation of two points\nNow consider the layer-wise propagation of two inputs x0,1 and x0,2. The geometry of these two inputs as they propagate through the layers is captured by the 2 by 2 matrix of inner products\nqlab = 1\nNl\nNl\u2211\ni=1\nhli(x 0,a)hli(x 0,b) a, b \u2208 {1, 2}. (14)\nThe joint empirical distribution of hli(x 0,a) and hli(x 0,a) across i at large Nl will converge to a 2 dimensional Gaussian distribution with covariance qlab. Propagating this joint distribution forward one layer using ideas similar to the derivation above for 1 input yields\nql12 = C(cl\u2212112 , q l\u22121 11 , q l\u22121 22 |\u03c3w, \u03c3b) \u2261 \u03c32w \u222b Dz1Dz2 \u03c6 (u1)\u03c6 (u2) + \u03c32b , (15)\nu1 = \u221a ql\u2212111 z1, u2 = \u221a ql\u2212122 [ cl\u2212112 z1 + \u221a 1\u2212 (cl\u2212112 )2z2 ] ,\nwhere cl12 = ql12\u221a\nql11 \u221a ql12 is the correlation coefficient (CC). Here z1 and z2 are independent standard\nGaussian variables, while u1 and u2 are correlated Gaussian variables with covariance matrix \u3008uaub\u3009 = ql\u22121ab . The integration over z1 and z2 can be thought of as the large Nl limit of sums over hli(x 0,a) and hli(x 0,a).\nWhen both input points are at their fixed point length, q\u2217, the dynamics of their correlation coefficient can be obtained by simply setting ql11 = q l 22 = q\n\u2217(\u03c3w, \u03c3b) in (15) and dividing by q\u2217 to obtain a recursion relation for cl12:\ncl12 = 1 q\u2217 C(cl\u2212112 , q\u2217, q\u2217 |\u03c3w, \u03c3b) (16)\nDirect calculation reveals that cl12(1) = 1 as expected. Of particular interest is the slope \u03c71 of this map at 1. A direct, if tedious calculation shows that\n\u2202cl12 \u2202cl\u2212112 = \u03c32w\n\u222b Dz1Dz2 \u03c6\u2032 (u1)\u03c6\u2032 (u2) . (17)\nTo obtain this result, one has to apply the chain rule and product rule from calculus, as well as employ the identity \u222b\nDzF (z)z = \u222b DzF \u2032(z), (18)\nwhich can be obtained via integration by parts. Evaluating the derivative at 1 yields\n\u03c71 \u2261 \u2202cl12 \u2202cl\u2212112 \u2223\u2223\u2223\u2223\u2223 c=1 = \u03c32w \u222b Dz [ \u03c6\u2032 (\u221a q\u2217z )]2 . (19)"}, {"heading": "B Derivation of evolution equations for Riemannian curvature", "text": "Here we derive recursion relations for Riemannian curvature quantitites.\nB.1 Curvature and length in terms of inner products\nConsider a translation invariant manifold, or 1D curve h(\u03b8) \u2208 RN that is on some constant radius sphere so that q(\u03b81, \u03b82) = Q(\u03b81 \u2212 \u03b82) = h(\u03b81) \u00b7 h(\u03b82), (20) with Q(0) = Nq\u2217. At large N , the inner-product structure of translation invariant manifolds remains approximately translation invariant as it propagates through the network. Therefore, at large N , we can express inner products of derivatives of h in terms of derivatives of Q. For example, the Euclidean metric gE is given by\ngE(\u03b8) = \u2202\u03b8h(\u03b8) \u00b7 \u2202\u03b8h(\u03b8) = \u2212Q\u0308(0). (21)\nHere, each dot is a short hand notation for derivative w.r.t. \u03b8. Also, the extrinsic curvature\n\u03ba(\u03b8) =\n\u221a (v \u00b7 v)(a \u00b7 a)\u2212 (v \u00b7 a)2\n(v \u00b7 v)3 , (22)\nwhere v(\u03b8) = \u2202\u03b8h(\u03b8) and a(\u03b8) = \u22022\u03b8h(\u03b8), simplifies to\n\u03ba(\u03b8) =\n.... Q(0) Q\u0308(0)2 . (23)\nNow if the translation invariant manifold lives on a sphere of radius Nq\u2217 where q\u2217 is the fixed point radius of the length map, then its radius does not change as it propagates through the system. Then we can also express gE and \u03ba in terms of the correlation coefficient function c(\u03b8) = Q(\u03b8)/q\u2217 (up to a factor of N ). Thus to understand the propagation of local quantities like Euclidean length and curvature, we need to understand the propagation of derivatives of c(\u03b8) at \u03b8 = 0 under the C-map in (16). Note that c(\u03b8) is symmetric and achieves a maximum value of 1 at \u03b8 = 0. Thus the function H1(\u03b8) = 1 \u2212 c(\u03b8) is symmetric with a minimum at \u03b8 = 0. We consider the propagation of H1 though the C-map. But first we consider the propagation of derivatives under function composition in general.\nB.2 Behavior of first and second derivatives under function composition\nAssume H1(\u2206t) is an even function and H1(0) = 0, so that its Taylor expansion can be written as H1(\u2206t) = 12H\u0308 1(0)\u2206t2 + 14 .... H 1 (0)\u2206t4 + . . . . We are interested in determining how the second and fourth derivatives of H propagate under composition with another function G, so that H2 = G(H1(\u2206t)) . We assume G(0) = 0. We can use the chain rule and the product rule to derive:\nH\u03082(0) = G\u0307(0)H\u03081(0) (24) .... H 2 (0) = 3G\u0308(0)H\u03081(0)2 + G\u0307(0) .... H 1 (0). (25)\nB.3 Evolution equations for curvature and length\nWe now apply the above iterations withH1(\u03b8) = 1\u2212c(\u03b8) andG(c) = 1\u2212 1q\u2217 C(1\u2212c, q \u2217, q\u2217 |\u03c3w, \u03c3b). Clearly, G(0) = 0 the symmetric H1 obeys H1(0) = 0, satisfying the above iterations of second and fourth derivatives. Taking into account these derivative recursions, using the expressions for \u03ba and gE in terms of derivatives of c(\u03b8) at 0, and carefully accounting for factors of q\u2217 and N , we obtain the final evolution equations that have been successfully tested against experiments:\ng\u0304E,l = \u03c71 g\u0304 E,l\u22121 (26)\n(\u03ba\u0304l)2 = 3 \u03c72 \u03c721 + 1 \u03c71 (\u03ba\u0304l\u22121)2, (27)\nwhere \u03c71 is the stretch factor defined in (19) and \u03c72 is defined analogously as\n\u03c72 = \u03c3 2 w\n\u222b Dz [ \u03c6\u2032\u2032 (\u221a q\u2217z )]2 . (28)\n\u03c72 is closely related to the second derivative of the correlation coefficient map in (16) at cl\u2212112 = 1. Indeed this second derivative is \u03c72q\u2217."}, {"heading": "C Upper bounds on the complexity of shallow neural representations", "text": "Consider a shallow network with 1 hidden layer x1 and one input layer x0, so that x1 = \u03c6(W1x0)+b. The network can compute functions through a linear readout of the hidden layer x1. We are interested in how complex these neural representations can get, with one layer of synaptic weights and nonlinearities, as a function the number of hidden units N1. In particular, we are interested in how the length and curvature of an input manifold x0(\u03b8) changes as it propagates to become x1(\u03b8) in the hidden layer. We would like to upper bound the maximal achievable length and curvature over all possible choices of W1 and b.\nC.1 Upper bound on Euclidean length\nHere, we derive such an upper bound on the Euclidean length for a very general class of nonlinearities \u03c6(h). We simply assume that (1) \u03c6(h) is monotonically non-decreasing (so that \u03c6\u2032(h) \u2265 0\u2200h) and (2) has with bounded dynamic range R, i.e. maxh \u03c6(h)\u2212minh \u03c6(h) = R. The Euclidean length in hidden space is\nLE = \u222b d\u03b8 \u221a\u221a\u221a\u221a N1\u2211\ni=1\n(\u2202\u03b8x1i (\u03b8)) 2 \u2264\nN1\u2211\ni=1\n\u222b d\u03b8 \u2223\u2223\u2202\u03b8x1i (\u03b8) \u2223\u2223 , (29)\nwhere the inequality follows from the triangle inequality. Now suppose that for any i, \u2202\u03b8x1i (\u03b8) never changes sign across \u03b8. Furthermore, assume that \u03b8 ranges from 0 to \u0398. Then\n\u222b \u0398\n0\nd\u03b8 \u2223\u2223\u2202\u03b8x1i (\u03b8) \u2223\u2223 = x1i (\u0398)\u2212 x1i (0) \u2264 (\nmax h \u03c6(h)\u2212min h \u03c6(h)\n) = R. (30)\nMore generally, let r1 denote the maximal number of times that any one neuron has a change in sign of the derivative \u2202\u03b8x1i (\u03b8) across \u03b8. Then applying the above argument to each segment of constant sign yields \u222b \u0398\n0\nd\u03b8 \u2223\u2223\u2202\u03b8x1i (\u03b8) \u2223\u2223 \u2264 (1 + r1)R. (31)\nNow how many times can \u2202\u03b8x1i (\u03b8) change sign? Since \u2202\u03b8x 1 i (\u03b8) = \u03c6 \u2032(hi) \u2202\u03b8hi, where \u2202\u03b8hi(\u03b8) = [Wl\u2202\u03b8x\n0(\u03b8)]i, and \u03c6(hi) is monotonically increasing, the number of times \u2202\u03b8x1i (\u03b8) changes sign equals the number of times the input \u2202\u03b8hi(\u03b8) changes sign. In turn, suppose s0 is the maximal number of times any one dimensional projection of the derivative vector \u2202\u03b8x0(\u03b8) changes sign across \u03b8. Then the number of times the sign of \u2202\u03b8hi(\u03b8) changes for any i cannot exceed s0 because hi is a linear projection of x0. Together this implies r1 \u2264 s0. We have thus proven:\nLE \u2264 N1(1 + s0)R. (32)"}, {"heading": "D Simulation details", "text": "All neural network simulations were implemented in Keras and Theano. For all simulations (except Figure 5C), we used inputs and hidden layers with a width of 1,000 and tanh activations. We found that our results were mostly insensitive to width, but using larger widths decreased the fluctuations in the averaged quantities. Simulation error bars are all standard deviations, with the variance computed across the different inputs, h1(\u03b8). If not mentioned, the weights in the network are initialized in the chaotic regime with \u03c3b = 0.3, \u03c3w = 4.0.\nComputing \u03ba(\u03b8) requires the computation of the velocity and acceleration vectors, corresponding to the first and second derivatives of the neural network hl(\u03b8) with respect to \u03b8. As \u03b8 is always onedimensional, we can greatly speed up these computations by using forward-mode auto-differentiation, evaluating the Jacobian and Hessian in a feedforward manner. We implemented this using the R-op in Theano.\nD.1 Details on Figure 4G: backpropagating curvature\nTo identify the curvature of the decision boundary, we first had to identify points that lied along the decision boundary. We randomly initialized data points and then optimized G(xD(xl))2 with respect to the input x using Adam. This yields a set of inputs xl where we compute the Jacobian and Hessian of G(xD(xl)) to evaluate principal curvatures.\nD.2 Details on Figure 5C-D: evaluating expressivity\nTo evaluate the set of functions reachable by a network, we first parameterized function space using a Fourier basis up to a particular maximum frequency, \u03c9max on a sampled set of one dimensional inputs parameterized by \u03b8. We then took the output activations of each neural network and linearly regressed the output activations onto each Fourier basis. For each basis, we computed the angle between the\npredicted basis vector and the true basis vector. These are the quantities that appear in Figure 5C-D. Given any function with bounded frequency, we can represent it in this Fourier basis, and decompose the error in the prediction of the function into the error in prediction of each Fourier component. Thus error in the predicting the Fourier basis is a reasonable proxy for error in prediction of functions with bounded frequency."}, {"heading": "E Additional visualization of hidden actions", "text": ""}, {"heading": "F A view from the function space perspective", "text": "We have shown above that for a fixed set of weights and biases in the chaotic regime, the internal representation hl(x0) at large depth l, rapidly de-correlates from itself as the input x0 changes (see e.g. Fig. 3B in the main paper). Here we ask a dual question: for a fixed input manifold, how does a deep network move in a function space over this manifold as the weights in a single layer change? Consider for example, a random one parameter family of deep networks parameterized by \u2206 \u2208 [\u22121, 1]. In this family, we assume that the bias vectors bl in each layer are chosen as i.i.d. random Gaussian vectors with zero mean and variance \u03c32b , independent of \u2206. Moreover, we assume the weight matrix Wl has elements that are drawn i.i.d. from zero mean Gaussians with variance \u03c32w, independent of \u2206 for all layers except l = 2. The only dependence on \u2206 in this family of networks\noriginates in the weights in layer l = 2, chosen as\nWl(\u2206) = \u221a 1\u2212 |\u2206|W + \u221a |\u2206|dW. (33)\nHere both a base matrix W and a perturbation matrix dW have matrix elements that are zero mean i.i.d. Gaussians with variance \u03c32w. Each matrix element of W\n2(\u2206) thus also has variance \u03c32w just like all the other layers. In turn, this family of networks induces a family of functions hD(h1,\u2206). For simplicity, we restrict these functions to a simple input manifold, the circle,\nh1(\u03b8) = \u221a N1q\u2217 [ u0 cos(\u03b8) + u1 sin(\u03b8) ] , (34)\nas considered previously. This circle is at the fixed point radius q\u2217(\u03c3w, \u03c3b), and the family of networks induces a family of functions from the circle to the hidden representation space in layer l, namely RNl . We denote these functions by hl(\u03b8,\u2206). How similar are these functions as \u2206 changes? This can be quantified through the correlation in function space\nQl(\u22061,\u22062) \u2261 \u222b d\u03b8\n2\u03c0\n1\nND\nND\u2211\ni=1\nhli(\u03b8,\u22061)h l i(\u03b8,\u22062), (35)\nand the associated correlation coefficient,\nCl(\u2206) = Ql(0,\u2206)\u221a\nQl(0, 0)Ql(\u2206,\u2206) . (36)\nBecause of our restriction to an input circle at the fixed point radius, Ql(0, 0) = Ql(\u2206,\u2206) = q\u2217 for all l and \u2206 in the large width limit. By using logic similar to the derivation of (15), we can derive a recursion relation for the function space correlation Ql(0,\u2206):\nQl(0,\u2206) = \u03c32w \u222b Dz1Dz2 \u03c6 (u1)\u03c6 (u2) + \u03c32b , l = 3, . . . , D (37)\nQl(0,\u2206) = \u221a 1\u2212 |\u2206|\u03c32w \u222b Dz1Dz2 \u03c6 (u1)\u03c6 (u2) + \u03c32b , l = 2,\nu1 = \u221a q\u2217z1, u2 = \u221a q\u2217 [ Cl\u22121(\u2206)z1 + \u221a 1\u2212 (Cl\u22121(\u2206))2z2 ] ,\nwhere Cl(\u2206) = Ql(0,\u2206)/q\u2217. The initial condition for this recursion is C1(\u2206) = 1, since the family of functions in the first layer of inputs is independent of \u2206. Now, the difference in weights at a nonzero \u2206 reduces the function space correlation to C2(\u2206) < 1. At this point, the representation in h2 is different for the two networks at parameter values 0 and \u2206. Moreover, in the chaotic regime, this difference will amplify due to the similarity between the function space evolution equation in (37) and the evolution equation for the similarity of two points in (15). In essence, just as two points in the input exponentially separate as they propagate through a single network in the chaotic regime, a pair of different functions separate when computed in the final layer. Thus a small perturbation in the weights into layer 2 can yield a very large change in the space of functions from the input manifold to layer D. Moreover, as \u2206 varies from -1 to 1, the function hD(\u03b8,\u2206) roughly undergoes a random walk in function space whose autocorrelation length decreases exponentially with depth D. This weight chaos, or a sensitive dependence of the function computed by a deep network with respect to weight changes far from the final layer, is another manifestation of deep neural expressivity. Our companion paper [16] further explores the expressivity of deep random networks in function space and also finds an exponential growth in expressivity with depth."}], "references": [{"title": "Imagenet classification with deep convolutional neural networks. In Advances in neural information processing", "author": ["Alex Krizhevsky", "Ilya Sutskever", "Geoffrey E Hinton"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2012}, {"title": "Playing atari with deep reinforcement learning", "author": ["Volodymyr Mnih", "Koray Kavukcuoglu", "David Silver", "Alex Graves", "Ioannis Antonoglou", "Daan Wierstra", "Martin Riedmiller"], "venue": "arXiv preprint arXiv:1312.5602,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2013}, {"title": "Deep speech: Scaling up end-to-end speech recognition", "author": ["Awni Hannun", "Carl Case", "Jared Casper", "Bryan Catanzaro", "Greg Diamos", "Erich Elsen", "Ryan Prenger", "Sanjeev Satheesh", "Shubho Sengupta", "Adam Coates"], "venue": "arXiv preprint arXiv:1412.5567,", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2014}, {"title": "Deep knowledge tracing", "author": ["Chris Piech", "Jonathan Bassen", "Jonathan Huang", "Surya Ganguli", "Mehran Sahami", "Leonidas J Guibas", "Jascha Sohl-Dickstein"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2015}, {"title": "Representation learning: A review and new perspectives", "author": ["Yoshua Bengio", "Aaron Courville", "Pierre Vincent"], "venue": "Pattern Analysis and Machine Intelligence, IEEE Transactions on,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2013}, {"title": "Untangling invariant object recognition", "author": ["James J DiCarlo", "David D Cox"], "venue": "Trends in cognitive sciences,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2007}, {"title": "On the number of linear regions of deep neural networks", "author": ["Guido F Montufar", "Razvan Pascanu", "Kyunghyun Cho", "Yoshua Bengio"], "venue": "In Advances in neural information processing systems,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 2014}, {"title": "Shallow vs. deep sum-product networks", "author": ["Olivier Delalleau", "Yoshua Bengio"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2011}, {"title": "The power of depth for feedforward neural networks", "author": ["Ronen Eldan", "Ohad Shamir"], "venue": "arXiv preprint arXiv:1512.03965,", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Representation benefits of deep feedforward networks", "author": ["Matus Telgarsky"], "venue": "arXiv preprint arXiv:1509.08101,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "On the representational efficiency of restricted boltzmann machines", "author": ["James Martens", "Arkadev Chattopadhya", "Toni Pitassi", "Richard Zemel"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2013}, {"title": "On the complexity of neural network classifiers: A comparison between shallow and deep architectures", "author": ["Monica Bianchini", "Franco Scarselli"], "venue": "Neural Networks and Learning Systems, IEEE Transactions on,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2014}, {"title": "Learning real and boolean functions: When is deep better than shallow", "author": ["Hrushikesh Mhaskar", "Qianli Liao", "Tomaso Poggio"], "venue": "arXiv preprint arXiv:1603.00988,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2016}, {"title": "Riemannian manifolds: an introduction to curvature, volume 176", "author": ["John M Lee"], "venue": "Springer Science & Business Media,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2006}, {"title": "Chaos in random neural networks", "author": ["Haim Sompolinsky", "A Crisanti", "HJ Sommers"], "venue": "Physical Review Letters,", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1988}], "referenceMentions": [{"referenceID": 0, "context": "Deep feedforward neural networks, with multiple hidden layers, have achieved remarkable performance across many domains [1\u20134].", "startOffset": 120, "endOffset": 125}, {"referenceID": 1, "context": "Deep feedforward neural networks, with multiple hidden layers, have achieved remarkable performance across many domains [1\u20134].", "startOffset": 120, "endOffset": 125}, {"referenceID": 2, "context": "Deep feedforward neural networks, with multiple hidden layers, have achieved remarkable performance across many domains [1\u20134].", "startOffset": 120, "endOffset": 125}, {"referenceID": 3, "context": "Deep feedforward neural networks, with multiple hidden layers, have achieved remarkable performance across many domains [1\u20134].", "startOffset": 120, "endOffset": 125}, {"referenceID": 4, "context": "The second piece of intuition, which has captured the imagination of machine learning [5] and neuroscience [6] alike, is that deep neural networks can disentangle highly curved manifolds in input space into flattened manifolds in hidden space, to aid the performance of simple linear readouts.", "startOffset": 86, "endOffset": 89}, {"referenceID": 5, "context": "The second piece of intuition, which has captured the imagination of machine learning [5] and neuroscience [6] alike, is that deep neural networks can disentangle highly curved manifolds in input space into flattened manifolds in hidden space, to aid the performance of simple linear readouts.", "startOffset": 107, "endOffset": 110}, {"referenceID": 6, "context": "For the first intuition, seminal works have exhibited examples of particular functions that can be computed with a polynomial number of neurons (in the input dimension) in a deep network but require an exponential number of neurons in a shallow network [7\u201311].", "startOffset": 253, "endOffset": 259}, {"referenceID": 7, "context": "For the first intuition, seminal works have exhibited examples of particular functions that can be computed with a polynomial number of neurons (in the input dimension) in a deep network but require an exponential number of neurons in a shallow network [7\u201311].", "startOffset": 253, "endOffset": 259}, {"referenceID": 8, "context": "For the first intuition, seminal works have exhibited examples of particular functions that can be computed with a polynomial number of neurons (in the input dimension) in a deep network but require an exponential number of neurons in a shallow network [7\u201311].", "startOffset": 253, "endOffset": 259}, {"referenceID": 9, "context": "For the first intuition, seminal works have exhibited examples of particular functions that can be computed with a polynomial number of neurons (in the input dimension) in a deep network but require an exponential number of neurons in a shallow network [7\u201311].", "startOffset": 253, "endOffset": 259}, {"referenceID": 10, "context": "For the first intuition, seminal works have exhibited examples of particular functions that can be computed with a polynomial number of neurons (in the input dimension) in a deep network but require an exponential number of neurons in a shallow network [7\u201311].", "startOffset": 253, "endOffset": 259}, {"referenceID": 6, "context": "For example [7] focused on ReLu nonlinearities and number of linear regions as a complexity measure, while [8] focused on sum-product networks and the number of monomials as complexity measure, and [12] focused on Pfaffian nonlinearities and topological measures of complexity, like the sum of Betti numbers of a decision boundary.", "startOffset": 12, "endOffset": 15}, {"referenceID": 7, "context": "For example [7] focused on ReLu nonlinearities and number of linear regions as a complexity measure, while [8] focused on sum-product networks and the number of monomials as complexity measure, and [12] focused on Pfaffian nonlinearities and topological measures of complexity, like the sum of Betti numbers of a decision boundary.", "startOffset": 107, "endOffset": 110}, {"referenceID": 11, "context": "For example [7] focused on ReLu nonlinearities and number of linear regions as a complexity measure, while [8] focused on sum-product networks and the number of monomials as complexity measure, and [12] focused on Pfaffian nonlinearities and topological measures of complexity, like the sum of Betti numbers of a decision boundary.", "startOffset": 198, "endOffset": 202}, {"referenceID": 12, "context": "see [13] for an interesting analysis of a general class of compositional functions.", "startOffset": 4, "endOffset": 8}, {"referenceID": 13, "context": "The limits of prior theoretical techniques raise another central question: is there a unifying theoretical framework for deep neural expressivity that is simultaneously applicable to arbitrary nonlinearities, generic networks, and a natural, general measure of functional complexity? Here we attack both central problems of deep neural expressivity by combining a very different set of tools, namely Riemannian geometry [14] and dynamical mean field theory [15].", "startOffset": 420, "endOffset": 424}, {"referenceID": 14, "context": "The limits of prior theoretical techniques raise another central question: is there a unifying theoretical framework for deep neural expressivity that is simultaneously applicable to arbitrary nonlinearities, generic networks, and a natural, general measure of functional complexity? Here we attack both central problems of deep neural expressivity by combining a very different set of tools, namely Riemannian geometry [14] and dynamical mean field theory [15].", "startOffset": 457, "endOffset": 461}, {"referenceID": 13, "context": "To quantitatively understand the layer-wise growth of complexity of this manifold, it is useful to turn to concepts in Riemannian geometry [14].", "startOffset": 139, "endOffset": 143}, {"referenceID": 13, "context": "For any parameterization, an explicit expression for \u03ba(\u03b8) is given by \u03ba(\u03b8) = (v \u00b7v)\u22123/2 \u221a (v \u00b7 v)(a \u00b7 a)\u2212 (v \u00b7 a)2 [14].", "startOffset": 115, "endOffset": 119}, {"referenceID": 13, "context": "Furthermore, the Gauss metric is related to the extrinsic curvature and the Euclidean metric via the relation g(\u03b8) = \u03ba(\u03b8)g(\u03b8) [14].", "startOffset": 126, "endOffset": 130}, {"referenceID": 13, "context": "These principal curvatures arise as the eigenvalues of a normalized Hessian operator projected onto the tangent plane Tx\u2217M: H = ||~ \u2207G||\u22121 2 P \u2202 G \u2202x\u2202xT P, where P = I\u2212 \u2207\u0302G\u2207\u0302G is the projection operator onto Tx\u2217M and \u2207\u0302G is the unit normal vector [14].", "startOffset": 247, "endOffset": 251}], "year": 2016, "abstractText": "We combine Riemannian geometry with the mean field theory of high dimensional chaos to study the nature of signal propagation in generic, deep neural networks with random weights. Our results reveal an order-to-chaos expressivity phase transition, with networks in the chaotic phase computing nonlinear functions whose global curvature grows exponentially with depth but not width. We prove this generic class of deep random functions cannot be efficiently computed by any shallow network, going beyond prior work restricted to the analysis of single functions. Moreover, we formalize and quantitatively demonstrate the long conjectured idea that deep networks can disentangle highly curved manifolds in input space into flat manifolds in hidden space. Our theoretical analysis of the expressive power of deep networks broadly applies to arbitrary nonlinearities, and provides a quantitative underpinning for previously abstract notions about the geometry of deep functions.", "creator": "LaTeX with hyperref package"}}}