{"id": "1608.04789", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Aug-2016", "title": "Modelling Student Behavior using Granular Large Scale Action Data from a MOOC", "abstract": "student learning emphasize maintaining an rigorous record of the actions teach take as free program with learning materials versus complete lessons with comprehension. with this high quantity coded structured data comes the potential. apply interactive series models to learn with underlying curriculum patterns encoding trends that propelled individual instruction towards its the accurate record of meaningful actions. there exist several methods for looking at longitudinal, sequential data like those recorded from digital environments. in empirical literature of language modelling, traditional n - gram exist where modern data parallel network ( rnn ) approaches may been applied to algorithmically find structure in classes and simulate the next word given the previous words in the sentence or paragraph as stimuli. in this paper, we discuss an introduction to initial implementation by treating student sequences of resource views over interactions during corresponding mooc sized standard inputs whilst predicting students'next result as required. in this study, children train only on students i show completed certificate of completion. within doing so, the model ways potentially be used concerning recommendation of grades eventually leading to success, as opposed to perpetuating unproductive beliefs. at that dynamic system used in that setup actually invested 380, 2000 classroom resources, predicting the intersection points encountered as student will interact concurrently and week appear to provoke a trivial classification problem. we find those simply following loop syllabus ( built - in structure into the course ) gives instead average 23 % accuracy in creating this assignment, matching alongside general n - gram method with 39. 4 %, similarly rnn based methods with 72. 96 %. this process lays free ground work for quality in a lecture, hence digital learning environments - high fidelity of sequential data exist.", "histories": [["v1", "Tue, 16 Aug 2016 21:46:48 GMT  (82kb,D)", "http://arxiv.org/abs/1608.04789v1", "15 pages, 7 tables, 3 figures"]], "COMMENTS": "15 pages, 7 tables, 3 figures", "reviews": [], "SUBJECTS": "cs.CY cs.LG", "authors": ["steven tang", "joshua c peterson", "zachary a pardos"], "accepted": false, "id": "1608.04789"}, "pdf": {"name": "1608.04789.pdf", "metadata": {"source": "CRF", "title": "Modelling Student Behavior using Granular Large Scale Action Data from a MOOC", "authors": ["Steven Tang", "Joshua C. Peterson", "Zachary A. Pardos"], "emails": ["steventang@berkeley.edu", "peterson.c.joshua@gmail.com", "pardos@berkeley.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n60 8.\n04 78\n9v 1\n[ cs\n.C Y"}, {"heading": "1 Introduction", "text": "Today\u2019s digital world is marked with personalization based on massive logs of user actions. In the field of education, there continues to be research towards personalized and automated tutors that can tailor learning suggestions and outcomes to individual users based on the (often latent) traits of the user. In recent years, massive sources of studentgenerated learning actions have been collected by online learning environments, such as in Massive Open Online Courses (MOOCs). Utilizing such granular and massive data has been an ongoing research problem. In this paper, we seek to contribute to the growing body of research that aims to utilize large sources of student-created data towards the ability to personalize learning pathways to make learning as accessible, robust, and efficient as desired. We depart from previous research objectives concerned primarily with assessing student knowledge, which is the primariy objective of knowledge tracing, and pivot to modeling of student behavior. We seek to consider all actions of students in a MOOC such as viewing lecture videos or replying to forum posts and attempt to predict their next action. Such an approach makes use of the granular, non assesment data collected in MOOCs and has potential to provide a wide range of recommendations for students looking for navigational guidance in MOOCs.\nAs an example of why digitized actions can be useful, when a student in a MOOC is struggling on a quiz, researchers and educators can investigate log data to track down exactly which actions the student takes next and whether those actions eventually lead to a successful learning result in the future. Utilizing such data across tens of thousands of students engaged in MOOCs, we ask whether trends of successful navigation through MOOCs can be uncovered by modelling the behavior of students who were ultimately succesful in the course. Capturing the trends that successful students take through MOOCs can enable the development of automated recommendation systems so that struggling students can be given meaningful and effective recommendations to optimize their time spent trying to succeed. For this task, we utilize n-gram and recurrent neural network models that have been traditionally successful when applied to other generative and sequential tasks.\nThis paper specifically analyzes how well such models can predict the next action given a context of previous actions the student has taken. The purpose of such analysis would be to eventually create a system whereby an automated recommender could query the model to provide meaningful guidance on what action the student can take next. The next action in many cases may be the next resource perscribed by the course but in other cases it may be a recommendation to consult a resource that is back in a previous lesson or enrichment material that is buried in a corner of the courseware unknown to the student. These models we are training are known as generative, in that they can be used to generate what action could come next given a prior context of what actions the student has already taken. Actions can include things such as opening a lecture video, pausing the lecture video, answering a quiz question, or navigating and replying to a forum post. This research serves as a foundation for applying sequential, generative models towards creating personalized recommenders in MOOCs with potential applications to other educational contexts with sequential data."}, {"heading": "2 Related Work", "text": "In this work, we seek to create a generative model of student learning, such that the model can produce or suggest a potential new action for the student to complete based on their past work. This type of generative task has been explored in other fields.\nA simple but powerful model used in natural language processing (NLP) is the n-gram model [1], where a probability distribution is learned over every possible sequence of n terms from the training set. More recently, recurrent neural networks (RNNs) have been used to perform next-word prediction [2], where previously seen words are subsumed into a high dimensional continuous latent state. This type of approach has the potential to utilize contexts of arbitrary length.\nOther work has been done to map assignments, student ability, lesson gains and pre-requisites all onto the same dimensional embedding space, where dimensions represent latent skills [3]. This mapping enables the model to produce potential lesson and assignment pathways so that students can have an optimal path for learning. The work in this paper differs by attempting to utilize all sources of student actions, such as forum posts or specific video viewings, and as such requires the use of a different approach.\nMore broadly, much work has been done to assess the latent knowledge of students through models such as Bayesian Knowledge Tracing (BKT) [4]. This type of modelling views the actions of students\u2019 as learning opportunities to model student latent knowledge. The work in this paper is tangentially related, in that student knowledge is not explicitly modelled. Instead, the models in this paper focus on predicting what the student will do next; latent student knowledge may play a role in determining what should be done next, but is not explicitly made as part of the model.\nDeep Knowledge Tracing [5] uses recurrent neural networks to create a continuous latent representation of students based on previously seen assessment results as they navigate online learning environments. This work shows that a deep learning approach can be used to represent student knowledge, with favorable accuracy predictions relative to shallow BKT. Such results, however, are hypothesized to be explained by already existing extensions of BKT [6]. The use of deep learning to approach knowledge tracing still finds useful relationships in the data automatically, but potentially does not find additional representations relative to already proposed extensions to BKT. The work in this paper is related to the use of deep networks to represent students, but differs in that all types of student actions are considered rather than only the use of assessment actions.\nSpecifically, in this paper we consider using both the n-gram approach as well as using a variant of the RNN known as the Long Short-Term Memory (LSTM) architecture [7]. These two models are chosen as they are both used to model sequences of data and provide a probability distribution of what token should come next. The use of LSTM architectures and similar variants have recently achieved impressive results in a variety fields that involve sequential data, including speech, image, and text analysis [8, 9, 10], in part due to its mutable memory that allows for the capture of longand short-range dependencies in sequences. Since student learning behavior can be represented as a sequence of actions from a fixed action state space, LSTMs could potentially be used to capture complex patterns that characterize successful learning. In\nprevious work, modelling of student clicksteam data has shown promise with methods such as n-gram models [11]."}, {"heading": "3 Dataset", "text": "The dataset used in this paper came from a Statistics BerkeleyX MOOC from Spring 2013. The MOOC ran for five weeks, with video lectures, homework assignments, discussion forums, and two exams. The original dataset contains 17 million actions from around 31,000 students, where each action represents accessing a particular link in the course (video view, assignment view, problem view etc.). Of the 31,000 students, 8,094 completed enough assignments and scored high enough on the exams to be considered \u201ccertified\u201d by the instructors of the course. Note that in other MOOC contexts, certification sometimes means that the student paid for a special certification, but that is not the case for this MOOC. The certified students accounted for 11.2 million of the original 17 million actions, with an average of 1,390 actions per certified student. The distinction between certified and non-certified is important for this paper, as we chose to train the generative models only on actions from students who were considered \u201ccertified,\u201d under the hypothesis that the sequence of actions that certified students take might reasonably approximate a successful pattern of navigation for this MOOC.\nEach row in the dataset contained relevant information about the action, such as the exact URL of what the user is accessing, a unique identifier for the user, the exact time the action occurs, and more. For this paper, we do not consider time or other possibly relevant contextual information, but instead focus solely on the resource the student accesses. Actions that occurred fewer than 40 times throughout the entire dataset were removed, as those tended to be discussion posts or user profile visits that were rarely accessed and are unlikely to be applicable to other students navigating through the MOOC. After removing infrequent actions, 3,687 unique actions remained in the model. Thus, all of our models were trained to predict actions taken only from this set.\nAlthough our goal was to keep the data in its most original form as possible, there were some steps we took to extract meaningful and unique actions from the log data. For actions that had an event type of \u201csave problem check\u201d, we replaced that action with the corresponding object name from the data, as this was a better unique identifier for which problem the student was checking. Some of the actions in the log data contained an explicit \u201cpage\u201d corresponding to exactly what resource they were accessing; if this page was in the row, it was used as the action for that row. Otherwise, the value in event type was used.\n15% of the unique resources in our dataset were comprised of transitions to unique courseware content pages (i.e. problem sets). The remaining possible resources (85%) indicated transitions to unique social content pages (i.e. forum threads). However, only 6% of actions taken were related to social content. No individual action frequency surpassed 3% of the entire dataset. 240 (6.5%) of the resource choices accounted for 90% of actions taken by students."}, {"heading": "4 Methodology", "text": "In this section, we detail the architecture of the recurrent neural network and the LSTM extension, which is the model that we hypothesize will perform best at next-action prediction. Other \u201cshallow\u201d models, such as the n-gram, are described afterwards."}, {"heading": "4.1 Recurrent Neural Networks", "text": "Recurrent neural networks (RNNs) are a family of networks that can connect neurons over time, meaning that sequences of arbitrary length can be fed into RNNs. Crucially, RNNs incorporate a high dimensional, continuous latent state. This representation allows RNNs to use information from the past to impact a prediction at a later point in time. In this work, each input into the RNN will be a granular student action from a MOOC dataset. The RNN is trained to predict the student\u2019s next action. Figure 1 shows a diagram of a simple recurrent neural network, where inputs would be student actions and outputs would be the next student action from the sequence.\nht = tanh(W xxt +W hht\u22121 +bh) (1) yt = \u03c3(W yht +by) (2)\nThe RNN model is parameterized by an input weight matrix W x, recurrent weight matrix W h, initial state h0, and output matrix W y. bh and by are biases for latent and output units, respectively."}, {"heading": "4.2 LSTM Models", "text": "A popular variant of the RNN is the Long Short-Term Memory [7] architecture, which is thought to help RNNs train by the addition of \u201dgates\u201d that learn when to retain meaningful information in the latent state and when to clear or \u201dforget\u201d the latent state, allowing for meaningful long-term interactions to persist. LSTMs add additional gating\nparameters that are explicitly learned in order to determine when to clear and when to augment the latent state with useful information. Each hidden state hi is instead replaced by an LSTM cell unit, which contains additional gating parameters. As a result of these gates, LSTMs have been found to train more effectively than simple RNNs [12, 13]. The update equations for an LSTM are:\nf t = \u03c3(W f xxt +W f hht\u22121 +b f ) (3) it = \u03c3(W ixxt +W ihht\u22121 +bi) (4)\nC\u0303t = tanh(WCxxt +WChht\u22121 +bC) (5)\nCt = f t \u00d7Ct\u22121 + it \u00d7C\u0303t (6) ot = \u03c3(W oxxt +W ohht\u22121 +bo) (7) ht = ot \u00d7 tanh(Ct) (8)\nFigure 2 illustrates the anatomy of a cell, where the numbers in the figure correspond to the previously mentioned update equations for the LSTM. f t , it , and ot represent the gating mechanisms used by the LSTM to determine \u201cforgetting\u201d data from the previous cell state, what to \u201cinput\u201d into the new cell state, and what to output from the cell state. Ct represents the latent cell state for which information is removed from and added to as new inputs are fed into the LSTM. C\u0303t represents an intermediary new candidate cell state that is gated to update the next cell state.\nLSTM Implementation\nThe generative LSTM models used in this paper were implemented using Keras [14], a Python library built on top of Theano [15, 16]. The model takes each student action represented by an index number. These indices correspond to the index in a 1-hot encoding of vectors, also known as dummy variabilization. The model converts each index to an embedding vector, and then consumes the embedded vector one at a time.\nThe use of an embedding layer is common in natural language processing and language modelling [17] as a way to map words to a multi dimensional semantic space. An embedding layer is used here with the hypothesis that a similar mapping may occur for actions in the MOOC action space. The model is trained to predict the next student action, given actions previously taken by the student. Back propagation through time [18] is used to train the LSTM parameters, using a softmax layer with the index of the next action as the ground truth. Categorical cross entropy is used calculating loss, and RMSprop is used as the optimizer. Drop out layers were added between LSTM layers as a method to curb overfitting [19]. Drop out randomly zeros out a set percentage of network edge weights for each batch of training data. In future work, it may be worthwhile to evaluate other regularization techniques crafted specifically for LSTMs and RNNs [20].\nLSTM Hyperparameter Search\nAs part of our initial investigation, we trained a total of 21 LSTM models for 10 epochs each. The searched space of hyperparameters for our LSTM models are shown in Table 1. These hyperparameters were chosen for grid search based on previous work which prioretized different hyperparameters based on effect size [21]. For the sake of time, we chose not to train 3-layer LSTM models with learning rates of .0001.\nWe also performed an extended investigation, where we used the results from the initial investigation to serve as a starting point to explore additional hyperparameter and training methods. Because training RNNs is relatively time consuming, the extended investigation consisted of a subset of promising hyperparameter combinations. Results of the extended investigation are included in the Results section.\nCross Validation\nTo evaluate the predictive power of each model, 5-fold cross validation was used. Each model was trained on 80% of the data and then validated on a remaining 20%; this was done five times so that each set of student actions was in a validation set once. For the LSTMs, the model held out 10% of its training data to serve as the hill climbing set to provide information about validation accuracy during the training process. Each row in the held out set consists of the entire sequence of actions a student took. The proportion of correct next action predictions produced by the model is computed for each sequence of student actions. The proportions for an entire fold are averaged together to generate the model\u2019s performance for that particular fold, and then the performances across all 5 folds are averaged together to generate the CV-accuracy for a particular LSTM model hyperparameter set."}, {"heading": "4.3 Shallow Models", "text": "N-gram Model\nN-gram models are simple, yet powerful probabilistic models that aim to capture the structure of sequences through the statistics of n-sized sub-sequences called grams and are equivalent to n-order Markov Chains. Specifically, the model predicts each sequence state xi using the estimated conditional probability P(xi|xi\u2212(n\u22121), ...,xi\u22121), which is the probability that xi follows the previous n-1 states in the training set. Ngram models are both fast and simple to compute, and have a straightforward interpretation. We expect n-grams to be an extremely competitive standard, as they are relatively high parameter models that essentially assign a parameter per possible action in the action space.\nN-gram Model Structure\nFor the n-gram models, we evaluated models where n ranged from 2 to 10, the largest of which corresponds to the size of our LSTM context window during training. To handle predictions in which the training set contained no observations, we employed backoff, a method that recursively falls back on the prediction of the largest n-gram that contains at least one observation. Our validation strategy was identical to the LSTM models, wherein the average cross-validation score of the same five folds was computed for each model.\nCourse Structure Models\nWe also included a number of alternative models aimed at exploiting hypothesized structural characteristics of the sequence data. The first thing we noticed when inspecting the sequences was that certain actions are repeated several times in a row. For this reason, it is important to know how well this assumption alone predicts the next action in the dataset. Next, since course content is most often organized in a fixed sequence, we evaluated the the ability of the course syllabus to predict the next page or action. We accomplished this by mapping course content pages to student page transitions in our action set, which yielded an overlap of 174 matches out of the total 300 items in the syllabus. Since we relied on matching content ID strings that were not always present in our action space, a small subset of possible overlapping actions were not mapped. Finally, we combined both models, wherein the current state was predicted as the next state if the current state was not in the syllabus."}, {"heading": "5 Results", "text": "In this section, we discuss the results from the previously mentioned LSTM models trained with different learning rates, number of hidden nodes per layer, and number of LSTM layers. Model success is determined through 5-fold cross validation and is related to how well the model predicts the next action. N-gram models, as well as other course structure models, are validated through 5-fold cross validation."}, {"heading": "5.1 LSTM Models", "text": "Table 2 shows the CV-accuracy for all 21 LSTM models computed after 10 iterations of training. For the models with learning rate of .01, accuracy on the hill climbing sets generally peaked at iteration 10. For the models with the lower learning rates, it would be reasonable to expect that peak CV-accuracies would improve through more training. We chose to simply report results after 10 iterations instead to provide a snapshot of how well these models are performing during the training process. We also hypothesize that model performance is unlikely to improve drastically over the .01 learning rate model performances in the long run, and we have the need to maximize the most promising explorations to run on limited GPU computation resources. The best CV-accuracy for each learning rate is bolded for emphasis.\nOne downside of using LSTMs is that they require the use of a GPU and are relatively slow to train. Thus, when investigating the best hyperparameters to use, we chose to train additional models based only on a subset of the initial explorations. We also extend the amount of context exposed to the model, extending past context from\n10 elements to 100 elements. Table 3 shows these extended results. Each LSTM layer has 256 nodes and is trained for either 20 or 60 epochs, as opposed to just 10 epochs in the previous hyperparameter search results. The extended results show a large improvement over the previous results, where the new accuracy peaked at .7223 compared to .7093.\nPerformance During Training\nFigure 3 shows validation accuracy on the 10% hill-climbing hold out set during training by epoch for the 1 and 2 layer models from the initial exploration. Each data point represents the average hill-climbing accuracy among all three learning rates for a particular layer and node count combination. Empirically, having a higher number of nodes is associated with a higher accuracy in the first 10 epochs, while 2 layer models start with lower validation accuracies for a few epochs before approaching or surpassing the corresponding 1 layer model. This figure provides a snapshot for the first 10 epochs; it is clearly the case that for some parameter combinations, more epochs would\nresult in a higher hill-climbing accuracy, as shown by the additional extended LSTM search. Extrapolating, 3-layer models may also follow the trend that the 2-layer models exhibited where accuracies may start lower initially before improving over their lower layer counterparts."}, {"heading": "5.2 Course Structure Models", "text": "Model performance for the different course structure models is shown in Table 4. Results suggest that many actions can be predicted from simple heuristics such as stationarity (same as last), or course content structure. Combining both of these heuristics (\u201dsyllabus + repeat\u201d) yields the best results, although none of the alternative models obtained performance within the range of the LSTM or n-gram results."}, {"heading": "5.3 N-gram Models", "text": "Model performance is shown in Table 5. The best performing models made predictions using either the previous 7 or 8 actions (8-gram and 9-gram respectively). Larger histories did not improve performance, indicating that our range of n was sufficiently large. Performance in general suggests that n-gram models were competitive with the LSTM models, although the best n-gram model performed worse than the best LSTM models. Table 6 shows the proportion of n-gram models used for the most complex model (10-gram). More than 62% of the predictions were made using 10-gram observations. Further, less than 1% of cases fell back on unigrams or bigrams to make\npredictions, suggesting that there was not a significant lack of observations for larger gram patterns. Still, about 6% fewer data points looks to be predicted by successively larger n-grams."}, {"heading": "5.4 Validating on Uncertified Students", "text": "We used the best performing \u201coriginal\u201d LSTM model after 10 epochs of training (.01 learn rate, 256 nodes, 2 layers) to predict actions on streams of data from students who did not ultimately end up certified. Many uncertified students only had a few logged actions, so we restricted analysis to students who had at least 30 logged actions. There were 10761 students who met this criteria, with a total of 2151662 actions. The LSTM model was able to correctly predict actions from the uncertified student space with .6709 accuracy, compared to .7093 cross validated accuracy for certified students. This difference shows that actions from certified students tend to be different than actions from uncertified students, perhaps showing potential application in providing an automated suggestion framework to help guide students."}, {"heading": "6 Contribution", "text": "In this work, we approached the problem of modelling granular student action data by modelling all types of interactions within a MOOC. This differs in approach from previous work which primarily focuses on modelling latent student knowledge using assessment results. In predicting a student\u2019s next action, the best performing LSTM model produced a cross-validation accuracy of .7223, which was an improvement over the best n-gram model accuracy of .7035. This amounts to 210,000 more correct predictions of the total 11-million possible. Table 7 shows the number of times the two models agreed or disagreed on a correct or an incorrect prediction during cross validation. Both LSTM and n-gram models provide significant improvement over the structural model of predicting the next action by syllabus course structure and through\nrepeats, which shows that there are patterns of student engagement that clearly deviate from a completely linear navigation through the course material.\nIt\u2019s important to note that these results are the best LSTM models explored among the subset of hyperparameters detailed in this paper, and that additional improvements may be found with more investigation. The latent architecture of the LSTM model is clearly manifesting a performance boost in predictions of validation sets, perhaps showing that the model can use information from further back more effectively."}, {"heading": "7 Future Work", "text": ""}, {"heading": "7.1 Model and Dataset Improvements", "text": "Both the LSTM and the n-gram models have room for improvement. In particular, our n-gram models could benefit from a combination of backoff and smoothing techniques, which allow for better handling of unseen grams. Our LSTM may benefit from a broader hyperparameter grid search, more training time, longer training context windows, and higher-dimensional action embeddings. Additionally, the signal-to-noise ratio in our dataset could be increased by removing less informative or redundant student actions, or adding additional tokens to represent time between actions."}, {"heading": "7.2 Applications", "text": "The primary reason for applying deep learning models to large sets of student action data is to model student behavior in MOOC settings, which leads to insights about how successful and unsuccessful students navigate through the course. These patterns can be leveraged to help in the creation of automated recommendation systems, wherein a struggling student can be provided with transition recommendations to view content based on their past behavior and performance. To evaluate the possiblity of such an application, we plan to experimentally test a recommendation system derived from our network against an undirected control group."}, {"heading": "7.3 Incorporating Larger Datasets", "text": "In this paper, we examined student actions from a single MOOC course. Future work should assess performance of similar models for a variety of courses and examine to what extent course-general patterns can be learned using a single model."}, {"heading": "Acknowledgement", "text": "This work was supported by a grant from the National Science Foundation (IIS: BIGDATA 1547055)."}], "references": [{"title": "Class-based n-gram models of natural language", "author": ["Peter F Brown", "Peter V Desouza", "Robert L Mercer", "Vincent J Della Pietra", "Jenifer C Lai"], "venue": "Computational linguistics,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1992}, {"title": "Recurrent neural network based language model", "author": ["Tomas Mikolov", "Martin Karafi\u00e1t", "Lukas Burget", "Jan Cernock\u1ef3", "Sanjeev Khudanpur"], "venue": "In INTERSPEECH,", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2010}, {"title": "Latent skill embedding for personalized lesson sequence recommendation", "author": ["Siddharth Reddy", "Igor Labutov", "Thorsten Joachims"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}, {"title": "Knowledge tracing: Modeling the acquisition of procedural knowledge", "author": ["Albert T Corbett", "John R Anderson"], "venue": "User modeling and user-adapted interaction,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 1994}, {"title": "Deep knowledge tracing", "author": ["Chris Piech", "Jonathan Bassen", "Jonathan Huang", "Surya Ganguli", "Mehran Sahami", "Leonidas J Guibas", "Jascha Sohl-Dickstein"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2015}, {"title": "How deep is knowledge tracing", "author": ["Mohammad Khajah", "Robert V Lindsey", "Michael C Mozer"], "venue": "arXiv preprint arXiv:1604.02416,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2016}, {"title": "Long short-term memory", "author": ["Sepp Hochreiter", "J\u00fcrgen Schmidhuber"], "venue": "Neural computation,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1997}, {"title": "Speech recognition with deep recurrent neural networks", "author": ["Alan Graves", "Abdel-rahman Mohamed", "Geoffrey Hinton"], "venue": "In Acoustics, Speech and Signal Processing (ICASSP),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2013}, {"title": "Grammar as a foreign language", "author": ["Oriol Vinyals", "\u0141 ukasz Kaiser", "Terry Koo", "Slav Petrov", "Ilya Sutskever", "Geoffrey Hinton"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Show and tell: A neural image caption generator", "author": ["Oriol Vinyals", "Alexander Toshev", "Samy Bengio", "Dumitru Erhan"], "venue": "In The IEEE Conference on Computer Vision and Pattern Recognition (CVPR),", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2015}, {"title": "Identifying latent study habits by mining learner behavior patterns in massive open online courses", "author": ["Miaomiao Wen", "Carolyn Penstein Ros\u00e9"], "venue": "In Proceedings of the 23rd ACM International Conference on Information and Knowledge Management,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2014}, {"title": "Learning long-term dependencies with gradient descent is difficult", "author": ["Yoshua Bengio", "Patrice Simard", "Paolo Frasconi"], "venue": "Neural Networks, IEEE Transactions on,", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 1994}, {"title": "Learning to forget: Continual prediction with lstm", "author": ["Felix A Gers", "J\u00fcrgen Schmidhuber", "Fred Cummins"], "venue": "Neural computation,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2000}, {"title": "Theano: a CPU and GPU math expression compiler", "author": ["James Bergstra", "Olivier Breuleux", "Fr\u00e9d\u00e9ric Bastien", "Pascal Lamblin", "Razvan Pascanu", "Guillaume Desjardins", "Joseph Turian", "David Warde-Farley", "Yoshua Bengio"], "venue": "In Proceedings of the Python for Scientific Computing Conference (SciPy),", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2010}, {"title": "Theano: new features and speed improvements", "author": ["Fr\u00e9d\u00e9ric Bastien", "Pascal Lamblin", "Razvan Pascanu", "James Bergstra", "Ian J. Goodfellow", "Arnaud Bergeron", "Nicolas Bouchard", "Yoshua Bengio"], "venue": "Deep Learning and Unsupervised Feature Learning NIPS 2012 Workshop,", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2012}, {"title": "word2vec explained: deriving mikolov et al.\u2019s negative-sampling word-embedding method", "author": ["Yoav Goldberg", "Omer Levy"], "venue": "CoRR, abs/1402.3722,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2014}, {"title": "Generalization of backpropagation with application to a recurrent gas market model", "author": ["Paul J Werbos"], "venue": "Neural Networks,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 1988}, {"title": "Dropout improves recurrent neural networks for handwriting recognition", "author": ["Vu Pham", "Th\u00e9odore Bluche", "Christopher Kermorvant", "J\u00e9r\u00f4me Louradour"], "venue": "In Frontiers in Handwriting Recognition (ICFHR),", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2014}, {"title": "Recurrent neural network regularization", "author": ["Wojciech Zaremba", "Ilya Sutskever", "Oriol Vinyals"], "venue": "arXiv preprint arXiv:1409.2329,", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2014}, {"title": "Lstm: A search space odyssey", "author": ["Klaus Greff", "Rupesh Kumar Srivastava", "Jan Koutn\u0131\u0301k", "Bas R Steunebrink", "J\u00fcrgen Schmidhuber"], "venue": "arXiv preprint arXiv:1503.04069,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "A simple but powerful model used in natural language processing (NLP) is the n-gram model [1], where a probability distribution is learned over every possible sequence of n terms from the training set.", "startOffset": 90, "endOffset": 93}, {"referenceID": 1, "context": "More recently, recurrent neural networks (RNNs) have been used to perform next-word prediction [2], where previously seen words are subsumed into a high dimensional continuous latent state.", "startOffset": 95, "endOffset": 98}, {"referenceID": 2, "context": "Other work has been done to map assignments, student ability, lesson gains and pre-requisites all onto the same dimensional embedding space, where dimensions represent latent skills [3].", "startOffset": 182, "endOffset": 185}, {"referenceID": 3, "context": "More broadly, much work has been done to assess the latent knowledge of students through models such as Bayesian Knowledge Tracing (BKT) [4].", "startOffset": 137, "endOffset": 140}, {"referenceID": 4, "context": "Deep Knowledge Tracing [5] uses recurrent neural networks to create a continuous latent representation of students based on previously seen assessment results as they navigate online learning environments.", "startOffset": 23, "endOffset": 26}, {"referenceID": 5, "context": "Such results, however, are hypothesized to be explained by already existing extensions of BKT [6].", "startOffset": 94, "endOffset": 97}, {"referenceID": 6, "context": "Specifically, in this paper we consider using both the n-gram approach as well as using a variant of the RNN known as the Long Short-Term Memory (LSTM) architecture [7].", "startOffset": 165, "endOffset": 168}, {"referenceID": 7, "context": "The use of LSTM architectures and similar variants have recently achieved impressive results in a variety fields that involve sequential data, including speech, image, and text analysis [8, 9, 10], in part due to its mutable memory that allows for the capture of longand short-range dependencies in sequences.", "startOffset": 186, "endOffset": 196}, {"referenceID": 8, "context": "The use of LSTM architectures and similar variants have recently achieved impressive results in a variety fields that involve sequential data, including speech, image, and text analysis [8, 9, 10], in part due to its mutable memory that allows for the capture of longand short-range dependencies in sequences.", "startOffset": 186, "endOffset": 196}, {"referenceID": 9, "context": "The use of LSTM architectures and similar variants have recently achieved impressive results in a variety fields that involve sequential data, including speech, image, and text analysis [8, 9, 10], in part due to its mutable memory that allows for the capture of longand short-range dependencies in sequences.", "startOffset": 186, "endOffset": 196}, {"referenceID": 10, "context": "previous work, modelling of student clicksteam data has shown promise with methods such as n-gram models [11].", "startOffset": 105, "endOffset": 109}, {"referenceID": 6, "context": "A popular variant of the RNN is the Long Short-Term Memory [7] architecture, which is thought to help RNNs train by the addition of \u201dgates\u201d that learn when to retain meaningful information in the latent state and when to clear or \u201dforget\u201d the latent state, allowing for meaningful long-term interactions to persist.", "startOffset": 59, "endOffset": 62}, {"referenceID": 11, "context": "As a result of these gates, LSTMs have been found to train more effectively than simple RNNs [12, 13].", "startOffset": 93, "endOffset": 101}, {"referenceID": 12, "context": "As a result of these gates, LSTMs have been found to train more effectively than simple RNNs [12, 13].", "startOffset": 93, "endOffset": 101}, {"referenceID": 13, "context": "The generative LSTM models used in this paper were implemented using Keras [14], a Python library built on top of Theano [15, 16].", "startOffset": 121, "endOffset": 129}, {"referenceID": 14, "context": "The generative LSTM models used in this paper were implemented using Keras [14], a Python library built on top of Theano [15, 16].", "startOffset": 121, "endOffset": 129}, {"referenceID": 15, "context": "The use of an embedding layer is common in natural language processing and language modelling [17] as a way to map words to a multi dimensional semantic space.", "startOffset": 94, "endOffset": 98}, {"referenceID": 16, "context": "Back propagation through time [18] is used to train the LSTM parameters, using a softmax layer with the index of the next action as the ground truth.", "startOffset": 30, "endOffset": 34}, {"referenceID": 17, "context": "Drop out layers were added between LSTM layers as a method to curb overfitting [19].", "startOffset": 79, "endOffset": 83}, {"referenceID": 18, "context": "In future work, it may be worthwhile to evaluate other regularization techniques crafted specifically for LSTMs and RNNs [20].", "startOffset": 121, "endOffset": 125}, {"referenceID": 19, "context": "These hyperparameters were chosen for grid search based on previous work which prioretized different hyperparameters based on effect size [21].", "startOffset": 138, "endOffset": 142}], "year": 2016, "abstractText": "Digital learning environments generate a precise record of the actions learners take as they interact with learning materials and complete exercises towards comprehension. With this high quantity of sequential data comes the potential to apply time series models to learn about underlying behavioral patterns and trends that characterize successful learning based on the granular record of student actions. There exist several methods for looking at longitudinal, sequential data like those recorded from learning environments. In the field of language modelling, traditional n-gram techniques and modern recurrent neural network (RNN) approaches have been applied to algorithmically find structure in language and predict the next word given the previous words in the sentence or paragraph as input. In this paper, we draw an analogy to this work by treating student sequences of resource views and interactions in a MOOC as the inputs and predicting students\u2019 next interaction as outputs. In this study, we train only on students who received a certificate of completion. In doing so, the model could potentially be used for recommendation of sequences eventually leading to success, as opposed to perpetuating unproductive behavior. Given that the MOOC used in our study had over 3,500 unique resources, predicting the exact resource that a student will interact with next might appear to be a difficult classification problem. We find that simply following the syllabus (built-in structure of the course) gives on average 23% accuracy in making this prediction, followed by the n-gram method with 70.4%, and RNN based methods with 72.2%. This research lays the ground work for recommendation in a MOOC and other digital learning environments where high volumes of sequential data exist. 1 ar X iv :1 60 8. 04 78 9v 1 [ cs .C Y ] 1 6 A ug 2 01 6", "creator": "LaTeX with hyperref package"}}}