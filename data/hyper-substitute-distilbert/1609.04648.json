{"id": "1609.04648", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "14-Sep-2016", "title": "Sequencing Chess", "abstract": "we analyze the structure of the state problems of chess simultaneously modelling internal transition sampling. a carlo simulation. contemplating simply either typical number of moves guaranteed to transpose a given configuration of chess suits into situations, students conclude that the state space consists of several pockets between which transitions go rare. skilled players explore an even stronger subset of positions that affect that of these surprises happen very sparsely. behavioral data propose that the usual alternatives to estimate both, the layout of nash storage space and precise size of a progression of legal moves, are not unique though judging biological complexity of the trajectory, but because theoretical considerations are equally important.", "histories": [["v1", "Wed, 14 Sep 2016 10:13:42 GMT  (224kb,D)", "http://arxiv.org/abs/1609.04648v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["a atashpendar", "t schilling", "th voigtmann"], "accepted": false, "id": "1609.04648"}, "pdf": {"name": "1609.04648.pdf", "metadata": {"source": "CRF", "title": "epl draft Sequencing Chess", "authors": ["Arshia Atashpendar", "Tanja Schilling", "Thomas Voigtmann"], "emails": [], "sections": [{"heading": null, "text": "Chess is a two-player board game with a small set of rules according to which pieces can be moved. It belongs to the class of games with perfect information that have not been solved yet, due to the sheer size of its state space. The computerized analysis of chess started with a seminal paper by Claude Shannon in 1950 [1], and since about the year 2000 computer programs can regularly beat top-level human players [2]. They do so by employing well-tailored heuristic evaluation functions for the game\u2019s states, which allow one to short-cut the exploration of the vast game tree of possible moves. In this context, chess is often compared to Go, where computers only very recently started to match the performance of human champions [3]. The difference is usually attributed to the different sizes of the games\u2019 state spaces: the game-tree complexity of Go exceeds that of chess by some 200 orders of magnitude.\nHowever, while size is an important factor in determining the complexity of a game, the topology of the state space may be equally important. Intuitively, the different kinds of moves performed by different chess pieces impose a highly nontrivial (and directed) topology. It is not at all straightforward to establish whether a given point in the state space is reachable from another one by a sequence of legal moves.\nWe thus face an interesting sampling problem: given two chess configurations, can one establish whether they are connected, i.e., whether there exists a sequence of legal moves that transforms the first configuration into the sec-\nond? Furthermore, what is the typical distance (in plies, or half moves) between such configurations? Clearly, direct enumeration or standard Monte Carlo sampling are out of reach: after each ply, the game tree is estimated to branch into 30 to 35 subtrees [1].\nHere we demonstrate that it is possible to analyze the topological structure of the state space of chess by stochastic-process rare-event sampling (SPRES) [4]. SPRES is a transition-path Monte Carlo sampling scheme that works in full non-equilibrium conditions, where the dynamics is neither stationary nor reversible. 1 Combining SPRES with an optimized chess-move generator [5], we estimate the distribution of path lengths between both randomly generated configurations and those encountered in games played by humans. Analyzing these distributions in terms of random-graph theory, we conjecture that the state space of chess consists of multiple distinct pockets, interconnected by relatively few paths. These pockets are only very sparsely populated by the states that are relevant for skilled play.\nPrevious statistical-physics analyses of chess have focused mostly on the distribution of moves in human gameplay, or on games played by computer chess engines. For example, the popularity of opening sequences follows a power-law distribution according to Zipf\u2019s law [6] (in this\n1Our analysis of chess also serves to demonstrate the versatility and power of SPRES as a technique that applies to abstract nonphysical dynamics.\np-1\nar X\niv :1\n60 9.\n04 64\n8v 1\n[ cs\n.A I]\n1 4\nSe p\ncontext, Go is rather similar [7]), highly biased by the skill of the players involved [8, 9]. Optimal play (in the sense that moves are evaluated favorably by modern computer chess engines) has also been analyzed in the language of free-energy landscapes [10]. Our approach is entirely different: we consider the set of all legal moves, irrespective of their engine evaluation, in order to establish the connectivity of the state space of chess. Within this space, we then also study the relative size and structure of the subset of positions encountered in games played by chess masters.\nThe state of a chess game at any point in time is entirely described by the board configuration (the positions of all chess pieces), a small set of additional variables that track the possibility of special moves (castling or en-passant capture) and the information regarding which player\u2019s turn it is. The set of possible states is given by all states that involve up to 16 chess pieces per color (there may be fewer due to captures, and the number of pieces and pawns may change due to pawn promotions). Only a subset of all possible states is legal, as for example, the two kings cannot be in check at the same time. Of interest in the following are states that are legal and also accessible from the given initial configuration. As an example of an inaccessible but legal state, consider the case where the position of a bishop differs from its initial position, while the positions of the pawns do not. This state is inaccessible, because pawns are initially placed in front of the other pieces of their colour, their moves are always irreversible and the other pieces (apart from the knights) cannot jump over the pawns. Thus, although the state is legal, it cannot be reached by legal moves.\nTo sample the structure of the state space, we generate sequences of accessible states by randomly drawing moves evenly from all legal moves (Monte Carlo, MC). Most of these states entail dramatic disadvantages for at least one side. Therefore, the set of states encountered in optimalstrategy play is vastly smaller than the set we sample. As a proxy to these unknown optimal states, we use database (DB) states extracted from a database of about two million human-played games [11]. In both cases (MC and DB), we then pick pairs of states randomly and establish their connectivity with respect to the game tree by all legal (MC) moves, i.e., irrespective of whether the connecting pathway contains unfavorable positions in terms of gameplay.\nIn the vicinity of the starting configuration, many randomly drawn pairs of positions are necessarily disconnected, since pawns only move forward and many of the pieces still have to gain freedom to move. At the other end of the game, mating positions act as absorbing states. And in addition, the MC dynamics has a set of absorbing states where only the kings are left on the board.\nIn order to sample states that reflect the intrinsic topology of the state space, we thus restrict the discussion to pairs of states drawn from a depth between 5 and 50 plies into the game. This corresponds loosely to chess play-\ners\u2019 notion of the middle game. Inside this window, we did not find an obvious correlation between the ply-depth from which a pair of states was drawn and the separation between them.\nWe sample the pathways between states by means of SPRES [4]. In this method, interfaces in state space are defined by constant values of a scalar reaction coordinate, which quantifies the progress made from one state to the other. Then adaptive sampling of dynamic pathways is carried out such that a constant number of forward transitions between these interfaces is obtained. Once the sampling is completed, observables can be averaged over the ensemble of sampled pathways. In the case of chess, we are in particular interested in the length (number of plies) of the shortest path between two configurations.\nWhile the choice of an optimal reaction coordinate is a topic in its own right [10], we make use of the fact that SPRES will sample paths faithfully even for non-optimal choices [4]. As the reaction coordinate, we chose a Euclidean geometric measure of distance from the target configuration. For each piece, the geometric distance is calculated using a metric that is adapted to the type of moves performed by that piece: Chebyshev metric for queens, kings, and bishops, the ceil of half the Chebyshev distance for knights, the Manhattan distance for rooks, and the rank separation for pawns. (For details, see Ref. [5]). Pairs are discarded as disconnected if they are farther apart than 120 plies; this approximation is adapted to the typical length of real chess games. Trivially disconnected pairs are discarded by an initial test based on the reaction coordinate, the pawn structure and the piece count. For the estimation of path lengths, 4000 (3000) pairs generated from MC (DB) that have passed this test have been sampled.\nFigure 1 shows the histogram of path lengths between those randomly chosen pairs that are connected according to SPRES (corresponding to 79% of all randomly drawn MC pairs and 85% of all pairs drawn from the DB). For pairs generated via MC, the path-length distribution has two distinct contributions, one with a peak at `1 \u2248 20 plies, and a smaller one at `2 \u2248 45 plies. The path-length distribution between pairs sampled from the database is biased to smaller path lengths and has only one prominent peak at a path length slightly below `1, `\u20321 \u2248 18 plies. A tail towards large distances is still seen as a remnant of the second peak found in the MC distribution. Note that the paths found by SPRES for the DB pairs almost certainly pass through non-DB states (i.e. states that are usually not found in games played by humans). A typical engine evaluation function (Stockfish [13]) displays huge fluctuations along the SPRES paths, indicating that these paths will probably never be chosen by skilled human players.\nThe results shown in Fig. 1 reveal that real chess games take place in a subspace that is much more tightly connected than the space of accessible states. The doublepeaked histogram suggests a \u201cblob\u201d structure (see sketch\np-2\nin Fig. 2): the space of accessible states consists of pockets with average distances `1 \u223c 20 between nodes, and real games are embedded in these pockets. The pockets are interconnected by long paths of `2 \u223c 45, and most of them are devoid of real-game configurations. Path lengths sampled between one MC and one DB state follow a histogram similar to the one shown for MC pairs in the figure, confirming that the DB states are indeed part of the state space sampled in our MC dynamics.\nThe relative size of the pockets in state space can be estimated from the path-length distribution by recurring to the theory of random graphs [14\u201316]. Let us view the game tree as an Erdo\u0308s-Renyi random graph where essentially, any two nodes (states) are connected by one legal move with a certain probability. Assuming that this probability is large enough so that the connected component of the graph that we sample is strongly connected, one expects that the average shortest path length between any two nodes in that component scales as ` \u223c lnN/ ln z, where z is the average branching rate. The size N2 thus estimated from the large-distance peak `2 in the MC histogram can be viewed as an approximation to Naccessible, the number of accessible chess states.\nIn the SPRES runs, the average branching rate is z1 \u2248 23.8 for pairs contributing to the peak at `1, and z2 \u2248 22.4\nfor the larger-distance peak at `2. SPRES also necessarily only gives an upper bound for the shortest path length. A chess-player\u2019s analysis of some of the sampled paths (transposing between states by hand) indicates that this error is about 10%, and up to about 20% for the pairs contributing to `2. Taking this into account, our estimate is Naccessible \u2248 exp[35 ln 22] \u2248 1047. The pockets containing the actual games are estimated to have a relative size Nblob/Naccessible \u2248 exp[(20 \u00b1 2) ln 24]/ exp[35 ln 22] \u2248 10\u221220\u00b13.\nApart from endgame states with up to seven pieces, whose number is known exactly (around 5\u00d71011 [17]), only rough estimates exist regarding the size of the state space of chess, and they all entail severe assumptions that do not even guarantee the strict ordering Npossible > Nlegal > Naccessible. The most famous estimate is due to Shannon [1], Npossible \u2248 5 \u00d7 1042 from a simple combinatorial argument (uncorrected for captures and promotions). The set of legal configurations is significantly smaller: by a factor of about 10\u22127 under the approximations made by Shannon2. Including captures (but excluding promotions), an upper bound of about Nlegal \u2248 2 \u00d7 1040 has been shown recently [18], while an older calculation approximates Nlegal \u2248 1050 including promotions [19]. As of today, a reasonable estimate therefore continues to be Nlegal = 10\n42\u00b17, with the ratio Nlegal/Npossible below a few percent. In view of this, the value Naccessible \u2248 1047 extracted from Fig. 1 is entirely reasonable. It is interesting to compare this state of uncertainty to the game of Go; here, the number of legal states is known exactly [20, 21], and the question of reachability is presumably much less intricate, although the numbers are much larger3. This again points out that a major part of the complexity of\n2Out of the 48!/(32!8!8!) possibilities to place eight white and eight black pawns on the 48 squares between rank two and seven, without captures only 158 are accessible.\n3In Go, 2.1 \u00d7 10170 states are legal, i.e., roughly 1% out of all 3361 states.\np-3\nchess comes from the topology of its state space. The branching numbers used in our estimate can be compared to exact results known up to 13 plies [22]. Figure 3 shows the number of configurations that can be reached at a given ply as a function of plies (lines), and the corresponding branching number (symbols). The latter approaches z \u2248 35 \u00b1 5 for the middle game, in agreement with the estimate by Shannon [1]4. The values for z found in SPRES are somewhat lower due to the fact that we disqualify moves that obviously do not form part of connecting pathways.\nThe number of optimal-play states is dramatically smaller than the number of accessible states. It is also very difficult to estimate. Taking the configurations encountered in our DB as a proxy (lower curve in Fig. 3), this number seems to be about O(106). (Note that the number of distinct configurations per ply makes up less than 10% of the size of the database, so that this number is probably not affected by the finite sample size.) This and the fact that most DB configurations are effectively unconnected if one restricts the connecting paths to near-optimal play, suggest that the optimal-play nodes are well-separated sheets that sparsely populate the pockets comprising the accessible state space. Indeed, the branching number observed in real games is only slightly above unity in the ply range used to evaluate the histograms in Fig. 1: skilled human players do not follow many branches in state space, but essentially make only one good move per state. The separation of the game into rather well separated branches occurs during the opening moves.\n4Assuming a typical game length of 80 plies, this results in the famous Shannon number for the game-tree complexity of chess, 3580 \u2248 10123.\nWe now turn to the distinction of real-game play over MC dynamics and explain the peculiar structure in state space discussed above. One obvious difference is the inclusion of \u201cblunders\u201d in MC, i.e., as we randomly pick allowed moves, we generate many very bad moves. These moves are typically not made by skilled players, and hence the real-game sheets \u2019disconnect\u2019.\nA more subtle difference leads to the splitting of state space into several weakly connected pockets: the difference in pawn structure. This can be seen in the overlap correlation function\nC\u03b1\u03b2(t) = 1\u221a\nN\u03b1(t)N\u03b2(t) \u2329 \u2211 i=a,...h j=1,...8 n\u03b1(i, j, t)n\u03b2(i, j, 0) \u232a ,\n(1) where \u03b1 labels the type of piece, n\u03b1(i, j, t) is the occupation number of the labeled piece at square (i, j) and ply t, and N\u03b1(t) the number of pieces still on the board. For the following analysis, we group the pieces into pawns and non-pawns only. Figure 4 shows C(t) extracted from 10000 DB games (using the actual played trajectories), 2000 realizations of MC games and 2000 realizations of MC games without captures, with t = 0 corresponding to the starting position of chess.\nThere is a striking difference between random play and real play in terms of the correlation functions. The realgame correlation functions display three regimes: (i) an initial decay up to about ply 5, where both correlation functions follow those generated by MC; (ii) a middlegame section between ply 5 and ply 50; and (iii) a final\np-4\ndecay after ply 50. These regimes match well with the distinction between opening, middle game, and end game made in the heuristic theory of chess developed by grandmasters [23]. In the final regime, the real-game dynamics decorrelates much faster than the MC dynamics, because human players eventually enforce the transition to an endgame by a rapid exchange of pieces (\u201cliquidation phase\u201d).\nIn the middle-game, which is relevant for our discussion of the state space, the most obvious difference stems from the persistence of pawn\u2013pawn correlations in real games. In Fig. 4, the real-game correlation functions have a bump between ply 5 and ply 20. In contrast, the MC correlation functions are well described for all times by stretched-exponential relaxation towards a long-time plateau, C(t) \u2248 f + (1 \u2212 f) exp[\u2212(t/\u03c4)\u03b2 ] with an exponent \u03b2 < 1. This reflects the fact that the dynamics of chess pieces is highly collective, as typically, the movement of any given piece is hindered by the others on the board [24]. Under the MC dynamics, the pawns are more mobile than the other pieces: the fits yield characteristic decay times \u03c4pawn \u2248 37.2 plies and \u03c4non-pawn \u2248 55.2 plies. The decay of the real-game dynamics does not show this separation of time scales.\nIn real games, players tend to maintain a fixed pawn structure for much longer. Keeping the pawn structure intact restricts moves to those between configurations with larger overlap, and hence typically also shorter path-length separations. The emphasis on pawn structure therefore prohibits transpositions in real games.\nTo quantify the effect that the irreversible motion of the pawns has on the blob structure of state space, we com-\npare configurations drawn from different openings. Figure 5 shows the path length distributions of DB pairs that were drawn from games with similar, different and random openings, according to their classification in the established chess-opening theory. The different openings were selected to be sufficiently different regarding their initial pawn moves. In particular, to obtain the similaropening histogram, we selected pairs where both configurations arose in so-called open games (1.e4 e5), or both in closed games (1.d4 d5; 400 samples each). The histogram for different openings was obtained by drawing one configuration each from games with open and closed games (200 samples), or one configuration each from the Sicilian Defense (1.e4 c5) and the Indian Defence (1.d4 Nf6; 500 samples).\nThe path-length histogram for DB pairs from different openings displays a noticable shift to larger distances: both the `1 peak shifts to larger values, and the tail around `2 becomes more pronounced. This supports our interpretation that the pockets in state space correspond to different openings with different pawn structures. As demonstrated by Fig. 5, two such pawn structures that divert the game into farther separated sheets, are in particular those tied to the \u201copen\u201d versus \u201cclosed\u201d openings (1.e4 e5 versus 1.d4 d5). Pairs from similar openings are, on the other hand, easier to connect, because their pawn structure is compatible and allows for transpositions.\nIn conclusion, we have applied SPRES sampling to the problem of chess, using the resulting trajectories to infer the topological structure of the game\u2019s state space. Interestingly, SPRES even allows to make reasonable estimates regarding the size of the state space, without referring to combinatorial arguments.\nReal games take place on well-separated \u201cthin sheets\u201d in this state space, which are selected during the opening phase of the game, and dictated by the pawn structure. Stretching the analogy to statistical physics, the realgame sheets in state space are hypersurfaces of conserved pawn structure, and real games sample the chess state space highly non-ergodically. The branching number in these real-game sheets is only slightly above unity, which loosely relates to a famous quote attributed to grandmaster Emanuel Lasker, who stated that he thinks only one move ahead \u2013 but a good one.\nIt is quite remarkable that using SPRES, one can find \u201creactive paths\u201d in the vast state space of chess. This should in principle offer a dramatic improvement to computer chess programs, or various branches of the mathematics of chess such as retrograde analysis [25] or the solution of chess puzzles [26]. Ordinary Monte Carlo tree search (MCTS) is quite successful in Go but performs poorly for chess, because the state space of chess is highly fractured. Employing methods from the computational physics of strongly out-of-equilibrium systems offers an unexpected but promising take on chess.\np-5\n\u2217 \u2217 \u2217\nThis project has been stimulated by COST Action MP1305 \u201cFlowing Matter\u201d, supported by COST (European Cooperation in Science and Technology). We thank Mark Crowther for kindly providing us with the TWIC database of chess games."}], "references": [{"title": "Sampling the trajectory space of chess", "author": ["A. Atashpendar"], "venue": "Master thesis, University of Luxembourg", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2016}, {"title": "Networks (Oxford", "author": ["J. Newman M. E"], "venue": null, "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2010}, {"title": "Combinatorics of Go in proc. of Computers and Games, edited", "author": ["J. Tromp", "G. Farneb\u00e4ck"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2007}, {"title": "An overview and classification of retrograde chess problems in proc", "author": ["M. Malikovi\u0107"], "venue": "Proceedings of the 25th International Conference on Information and Intelligent Systems, edited by Hunjak T., Lovrenc\u030cic\u0301 S. and Tomic\u030cic\u0301 I.,", "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2014}], "referenceMentions": [{"referenceID": 0, "context": "1 Combining SPRES with an optimized chess-move generator [5], we estimate the distribution of path lengths between both randomly generated configurations and those encountered in games played by humans.", "startOffset": 57, "endOffset": 60}, {"referenceID": 0, "context": "[5]).", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "The relative size of the pockets in state space can be estimated from the path-length distribution by recurring to the theory of random graphs [14\u201316].", "startOffset": 143, "endOffset": 150}, {"referenceID": 2, "context": "It is interesting to compare this state of uncertainty to the game of Go; here, the number of legal states is known exactly [20, 21], and the question of reachability is presumably much less intricate, although the numbers are much larger.", "startOffset": 124, "endOffset": 132}, {"referenceID": 3, "context": "This should in principle offer a dramatic improvement to computer chess programs, or various branches of the mathematics of chess such as retrograde analysis [25] or the solution of chess puzzles [26].", "startOffset": 158, "endOffset": 162}], "year": 2016, "abstractText": "We analyze the structure of the state space of chess by means of transition path sampling Monte Carlo simulation. Based on the typical number of moves required to transpose a given configuration of chess pieces into another, we conclude that the state space consists of several pockets between which transitions are rare. Skilled players explore an even smaller subset of positions that populate some of these pockets only very sparsely. These results suggest that the usual measures to estimate both, the size of the state space and the size of the tree of legal moves, are not unique indicators of the complexity of the game, but that topological considerations are equally important. Chess is a two-player board game with a small set of rules according to which pieces can be moved. It belongs to the class of games with perfect information that have not been solved yet, due to the sheer size of its state space. The computerized analysis of chess started with a seminal paper by Claude Shannon in 1950 [1], and since about the year 2000 computer programs can regularly beat top-level human players [2]. They do so by employing well-tailored heuristic evaluation functions for the game\u2019s states, which allow one to short-cut the exploration of the vast game tree of possible moves. In this context, chess is often compared to Go, where computers only very recently started to match the performance of human champions [3]. The difference is usually attributed to the different sizes of the games\u2019 state spaces: the game-tree complexity of Go exceeds that of chess by some 200 orders of magnitude. However, while size is an important factor in determining the complexity of a game, the topology of the state space may be equally important. Intuitively, the different kinds of moves performed by different chess pieces impose a highly nontrivial (and directed) topology. It is not at all straightforward to establish whether a given point in the state space is reachable from another one by a sequence of legal moves. We thus face an interesting sampling problem: given two chess configurations, can one establish whether they are connected, i.e., whether there exists a sequence of legal moves that transforms the first configuration into the second? Furthermore, what is the typical distance (in plies, or half moves) between such configurations? Clearly, direct enumeration or standard Monte Carlo sampling are out of reach: after each ply, the game tree is estimated to branch into 30 to 35 subtrees [1]. Here we demonstrate that it is possible to analyze the topological structure of the state space of chess by stochastic-process rare-event sampling (SPRES) [4]. SPRES is a transition-path Monte Carlo sampling scheme that works in full non-equilibrium conditions, where the dynamics is neither stationary nor reversible. 1 Combining SPRES with an optimized chess-move generator [5], we estimate the distribution of path lengths between both randomly generated configurations and those encountered in games played by humans. Analyzing these distributions in terms of random-graph theory, we conjecture that the state space of chess consists of multiple distinct pockets, interconnected by relatively few paths. These pockets are only very sparsely populated by the states that are relevant for skilled play. Previous statistical-physics analyses of chess have focused mostly on the distribution of moves in human gameplay, or on games played by computer chess engines. For example, the popularity of opening sequences follows a power-law distribution according to Zipf\u2019s law [6] (in this 1Our analysis of chess also serves to demonstrate the versatility and power of SPRES as a technique that applies to abstract nonphysical dynamics. p-1 ar X iv :1 60 9. 04 64 8v 1 [ cs .A I] 1 4 Se p 20 16 A. Atashpendar, T. Schilling, and Th. Voigtmann context, Go is rather similar [7]), highly biased by the skill of the players involved [8, 9]. Optimal play (in the sense that moves are evaluated favorably by modern computer chess engines) has also been analyzed in the language of free-energy landscapes [10]. Our approach is entirely different: we consider the set of all legal moves, irrespective of their engine evaluation, in order to establish the connectivity of the state space of chess. Within this space, we then also study the relative size and structure of the subset of positions encountered in games played by chess masters. The state of a chess game at any point in time is entirely described by the board configuration (the positions of all chess pieces), a small set of additional variables that track the possibility of special moves (castling or en-passant capture) and the information regarding which player\u2019s turn it is. The set of possible states is given by all states that involve up to 16 chess pieces per color (there may be fewer due to captures, and the number of pieces and pawns may change due to pawn promotions). Only a subset of all possible states is legal, as for example, the two kings cannot be in check at the same time. Of interest in the following are states that are legal and also accessible from the given initial configuration. As an example of an inaccessible but legal state, consider the case where the position of a bishop differs from its initial position, while the positions of the pawns do not. This state is inaccessible, because pawns are initially placed in front of the other pieces of their colour, their moves are always irreversible and the other pieces (apart from the knights) cannot jump over the pawns. Thus, although the state is legal, it cannot be reached by legal moves. To sample the structure of the state space, we generate sequences of accessible states by randomly drawing moves evenly from all legal moves (Monte Carlo, MC). Most of these states entail dramatic disadvantages for at least one side. Therefore, the set of states encountered in optimalstrategy play is vastly smaller than the set we sample. As a proxy to these unknown optimal states, we use database (DB) states extracted from a database of about two million human-played games [11]. In both cases (MC and DB), we then pick pairs of states randomly and establish their connectivity with respect to the game tree by all legal (MC) moves, i.e., irrespective of whether the connecting pathway contains unfavorable positions in terms of gameplay. In the vicinity of the starting configuration, many randomly drawn pairs of positions are necessarily disconnected, since pawns only move forward and many of the pieces still have to gain freedom to move. At the other end of the game, mating positions act as absorbing states. And in addition, the MC dynamics has a set of absorbing states where only the kings are left on the board. In order to sample states that reflect the intrinsic topology of the state space, we thus restrict the discussion to pairs of states drawn from a depth between 5 and 50 plies into the game. This corresponds loosely to chess players\u2019 notion of the middle game. Inside this window, we did not find an obvious correlation between the ply-depth from which a pair of states was drawn and the separation between them. We sample the pathways between states by means of SPRES [4]. In this method, interfaces in state space are defined by constant values of a scalar reaction coordinate, which quantifies the progress made from one state to the other. Then adaptive sampling of dynamic pathways is carried out such that a constant number of forward transitions between these interfaces is obtained. Once the sampling is completed, observables can be averaged over the ensemble of sampled pathways. In the case of chess, we are in particular interested in the length (number of plies) of the shortest path between two configurations. While the choice of an optimal reaction coordinate is a topic in its own right [10], we make use of the fact that SPRES will sample paths faithfully even for non-optimal choices [4]. As the reaction coordinate, we chose a Euclidean geometric measure of distance from the target configuration. For each piece, the geometric distance is calculated using a metric that is adapted to the type of moves performed by that piece: Chebyshev metric for queens, kings, and bishops, the ceil of half the Chebyshev distance for knights, the Manhattan distance for rooks, and the rank separation for pawns. (For details, see Ref. [5]). Pairs are discarded as disconnected if they are farther apart than 120 plies; this approximation is adapted to the typical length of real chess games. Trivially disconnected pairs are discarded by an initial test based on the reaction coordinate, the pawn structure and the piece count. For the estimation of path lengths, 4000 (3000) pairs generated from MC (DB) that have passed this test have been sampled. Figure 1 shows the histogram of path lengths between those randomly chosen pairs that are connected according to SPRES (corresponding to 79% of all randomly drawn MC pairs and 85% of all pairs drawn from the DB). For pairs generated via MC, the path-length distribution has two distinct contributions, one with a peak at `1 \u2248 20 plies, and a smaller one at `2 \u2248 45 plies. The path-length distribution between pairs sampled from the database is biased to smaller path lengths and has only one prominent peak at a path length slightly below `1, `1 \u2248 18 plies. A tail towards large distances is still seen as a remnant of the second peak found in the MC distribution. Note that the paths found by SPRES for the DB pairs almost certainly pass through non-DB states (i.e. states that are usually not found in games played by humans). A typical engine evaluation function (Stockfish [13]) displays huge fluctuations along the SPRES paths, indicating that these paths will probably never be chosen by skilled human players. The results shown in Fig. 1 reveal that real chess games take place in a subspace that is much more tightly connected than the space of accessible states. The doublepeaked histogram suggests a \u201cblob\u201d structure (see sketch", "creator": "LaTeX with hyperref package"}}}