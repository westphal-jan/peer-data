{"id": "1610.06276", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "20-Oct-2016", "title": "Modeling Scalability of Distributed Machine Learning", "abstract": "present agile mathematical learning works always intensive and records large amounts as data. are easily implemented very computer distributed fashion in order continuously address these scalability issues. the work is parallelized across a number of computing nodes. study is usually on job estimate like databases how many nodes shall deploy onto a particular machine. we see a simple framework for explaining the correctly construct robust machine learning algorithms. carefully integrate the scalability by proxy of optimal speedup an algorithm achieves with more nodes. several propose time complexity models for performance filtering and graphical model inference. we exchange validation analyses with sections on software learning training and belief propagation. this architecture was used to study the scalability software machine programs enabled in apache 2000.", "histories": [["v1", "Thu, 20 Oct 2016 03:28:40 GMT  (104kb,D)", "https://arxiv.org/abs/1610.06276v1", "6 pages, 4 figures"], ["v2", "Sat, 25 Mar 2017 02:17:04 GMT  (104kb,D)", "http://arxiv.org/abs/1610.06276v2", "6 pages, 4 figures, appears at ICDE 2017"]], "COMMENTS": "6 pages, 4 figures", "reviews": [], "SUBJECTS": "cs.LG cs.DC", "authors": ["alexander ulanov", "rey simanovsky", "manish marwah"], "accepted": false, "id": "1610.06276"}, "pdf": {"name": "1610.06276.pdf", "metadata": {"source": "CRF", "title": "Modeling Scalability of Distributed Machine Learning", "authors": ["Alexander Ulanov", "Andrey Simanovsky", "Manish Marwah"], "emails": ["alexander.ulanov@hpe.com", "andrey.simanovsky@hpe.com", "manish.marwah@hpe.com"], "sections": [{"heading": null, "text": "I. INTRODUCTION\nNowadays a lot of machine learning workloads run in data centers. Many of them, such as deep learning for speech recognition or computer vision, would likely take weeks or months to run on a single node. Hence, they are typically run on a parallel and distributed platform. But how many machines to use to deploy the workload? In this paper we address that question. There are two main scenarios where a practitioner encounters this question. (1) Given a workload, how many more machines are needed to decrease the run time by a certain amount? (2) Given an increasing workload, how many more machines to add to keep the run time the same? The first senario is referred to as strong scaling; the second one is called weak scaling. The challenge is to come up with a good performance model of a machine learning method that accurately captures the processing time, while being easy to build and not requiring extensive instrumentation and data collection.\nPerformance models of distributed systems have been thoroughly studied in parallel algorithms community [1]. In particular, they looked at speedup (how much faster a task runs on a multi-node system versus a single node one) and efficiency (what percentage of node resources are utilized in a multi-node system on average versus resources utilized in a single mode run). Amdahl [2] suggested a law that describes how fast problems can be solved using parallel computations. Gustafson [3] formulated consensus on what happens when larger problems are solved with more nodes. Even though the parallel algorithms community often excluded communication\noverheads from their models, a computation-communication trade-off was well understood [4].\nMachine learning has become a widely accepted solution for many applications. As big data becomes a reality, more and more of the algorithms are being parallelized. The most common way to address scalability is to implement the MapReduce paradigm. Distributed machine learning frameworks (Spark ML, Tensorflow, and others) are there to help a practitioner. Nonetheless, scaling of a machine learning task remains hit and trial. That happens because scaling of machine learning algorithms requires parallelization of algorithms that were previously considered strictly sequential and practitioners do not know where to look for bottlenecks.\nWe propose a simple framework for distributed computation models and validate it for diverse machine learning algorithms, which include multiple neural network architectures, all of which require gradient-descent, and loopy belief propagation, a popular graphical model inference algorithm. For these use cases we build theoretical models and validate them experimentally. Our distributed machine learning modeling framework enables a practitioner to build a speedup plot for a machine learning algorithm and use it to estimate an optimal number of machines. The framework views algorithms as combinations of computation and communication steps. It uses algorithm-independent parallelization techniques. The framework takes algorithm-specific computation and communication time complexity formulas as inputs, but unlike prior art, does not require any test runs or profiling of the algorithms.\nThe contributions of this work are the algorithmindependent framework, algorithm models for the use cases, and validation of the use cases. The empirical results match well with the model estimates. The framework was used to develop implementation of deep learning on Apache Spark and study scalability of it and other algorithms in Spark ML [5]. Our framework (including validation results) is also available online in the form of iPython notebooks [6]."}, {"heading": "II. RELATED WORK", "text": "Most of the work on performance modeling and resource allocation for machine learning workloads focus on Hadoop/MapReduce. In addition, they require profiling data and use complicated models. In contrast, our method requires only hardware specification.\nar X\niv :1\n61 0.\n06 27\n6v 2\n[ cs\n.L G\n] 2\n5 M\nar 2\n01 7\nGandhi et al. [7] define a fine-grained model for Hadoop/MapReduce. The computation model is approximated by second-order polynomials and, thus, would not be accurate if the workload has a higher-order time complexity, such as deep learning. Herodotou and Babu [8] build models to answer what-if performance questions, however, they require collection of extensive profiling data. The closest work to ours is Sparks et. al. [9] where they propose a cluster resource allocation estimator. They have a similar model for parallel computationcomputation time is inversely proportional to the number of nodes; communication time is total communication multiplied by the number of nodes. However, this accounts for only linear communication architectures and inaccurate for all-reduce, which is implemented in MPI, and other communication paradigms, such as shuffle mechanism implemented in Hadoop MapReduce and Apache Spark. Furthermore, their model requires experimental data to select appropriate parameters. They take into account the framework overhead as sequential step (aka Amdahl fraction). However, according to Scheiber [10], one could make it decline with increasing n, so that the sequential piece is irrelevant to scaling. Another more recent work related to ours is Venkataraman et. al. [11]. Their model is similar to [9] with the addition of logarithmic dependency on the number of workers. The model requires experimental data for parameter estimation. Keuper and Pfreundt [12] investigate the scalability of deep learning training and experimentally show that there is a communication bottleneck. They also discuss different ways of organizing the communication and how the training can be scaled by increasing the amount of computations. While their findings match with ours, they only focus on deep learning and dont explicitly provide a modeling framework."}, {"heading": "III. PROPOSED METHODOLOGY", "text": "Consider a distributed machine learning algorithm running on a cluster of homogeneous nodes. There are two components that we model: the machine learning algorithm and the framework for distributed computations. We assume the algorithm is implemented using the bulk synchronous parallel (BSP) framework [13], comprising a series of supersteps. Each superstep is a sequence of concurrent computation and communication steps with a synchronization barrier at the end. Computation and communication are algorithm-dependent. We define the distributed computation time complexity as\ntcp = c(D)/n\nwhere n is the number of homogeneous ndoes; c is the computation time complexity function, which depends on the input size D. The communication time complexity is\ntcm = fcm(M,n)\nwhere M is the total number of messages sent through the communication medium. M depends on the algorithm design; the shape of fcm depends on the topology of the media. The time complexity of a superstep is determined as the sum of the two terms, since computation and communication steps\ndo not overlap. (We assume that the synchronization barrier is implicitly included in the computation.)\nt = tcp + tcm\nWe require a model, i.e. computation and communication time complexity formulas, for each algorithm. That allows the scalability model to be accurate.\nWe use speedup to measure the effectiveness of a distributed machine learning algorithm:\ns(n) = t(1)/t(n)\nwhere t(1) is time complexity with one computing node, and t(n) is time complexity with n nodes. We use speedup rather than the total time itself because, being a relative metric, speedup equation cancels out proportional systematic errors. The algorithm is scalable if there exists k such that s(k) > 1. The optimal number of nodes is N = argmaxs(n).\nWe can examine strong and weak scaling of a machine learning algorithm. Strong scaling is when we fix the input size D and vary the number of computing nodes. Weak scaling is when we vary both the input size and the number of nodes.\nConsider an example. Suppose, we want to examine strong scaling of a machine learning algorithm. Figure 1 shows speedup depending on the number of nodes, or workers. Per-\nnode computation time complexity decreases as the number of nodes grows. At the same time, communication time complexity increases. Consequently, speedup does not grow indefinitely and starts to decrease at around 14 nodes. This is the point where the total execution time reaches its minimum.\nOur simple approach does not require data gathering and profiling, but still provides useful and accurate results. It allows practitioners to estimate optimal amounts of resources for efficient runs of machine learning workloads. In the following sections we use speedup to analyze scalability of machine learning workloads."}, {"heading": "IV. USE CASES", "text": "In this section we discuss specific machine learning workloads, gradient descent and graphical model inference. Gradient descent is the most widely used optimization algorithm in machine learning. It is used for training machine learning models for such tasks as click-through rate prediction in display advertising, image classification, and speech recognition. On the other spectrum of machine learning methods are graphical models. Many domains are naturally represented as graphs where nodes or edges hold some parameters that one wants to estimate. The latter is accomplished with a particular probabilistic inference algorithm. Graphical models are applied in such use-cases as computation of the importance of web-pages, product recommendations, and fraud detection.\nThe important property of the use cases is that they involve large training data. Understanding the scalability of the use cases helps a practitioner to choose among a multitude of configuration options, and save time and costs."}, {"heading": "A. Gradient descent", "text": "Gradient descent is applied to a broad variety of machine learning models, including linear and non-linear models. Widely used logistic regression and deep learning models are trained using gradient descent. Gradient descent iteratively modifies parameters of the model in order to optimize a cost function, which is defined with respect to the parameters and the training set. The gradient of the cost function is computed on each iteration. It depends on the current parameters of the model and the training set. Then each parameter is summed with the gradient value multiplied by a small constant. The iterations are repeated until the parameter values converge. Batch gradient descent implies that gradient is computed using the whole training set on each iteration. Stochastic gradient descent (SGD) uses a random sample on each iteration. Minibatch SGD uses a random mini-batch of examples.\nGradient descent and mini-batch SGD can be data parallel\u2014 each node computes the gradient in parallel using a part of the batch. Then the results are collected to the master node. The master node computes the update and broadcasts it to the workers. Both communications can be organized as a tree in order to reduce their time complexity.\nAccording to the proposed model, we can calculate the computation and communication time complexity for gradient descent as follows:\ntGDcp = (C \u00b7 S)/(F \u00b7 n)\nwhere n is the number of nodes with F floating point operations per second (FLOPS); C is the computation time complexity of gradient descent on one data point; S the size of the batch;\ntGDcm = 2 \u00b7 (32 \u00b7W/B) \u00b7 log(n)\nwhere W is the number of 32-bit parameters in the machine learning model; B is the connection bandwidth between computing devices; 2 accounts for two-stage communication. We\ndo not account for the initialization time because the number of iterations until convergence is usually large. Consequently, the initialization time can be ignored.\nIn Section V-A we discuss scalability of gradient descent and mini-batch SGD for deep learning."}, {"heading": "B. Graphical models", "text": "Graphical models [14] combine probabilistic dependency and reasoning with graph theory. Vertexes in the graph represent random variables, while edges denote dependencies. The graph structure provides an elegant representation of the conditional independence relationships between variables. An important task in these models is inferring the state of unknown or hidden variables. While exact inference is usually intractable for large models, approximate methods, such as Gibbs sampling or loopy belief propagation, are commonly used. In our analysis, we consider pairwise Markov random field (MRF) model, which is generic enough to represent any graphical model. The inference methods are iterative and can be parallelized in different ways depending on the graph representation. We build a model where vertexes are processed in parallel by multiple worker nodes. The variable value for a vertex is collected remotely for all its neighbor vertexes that are processed by other workers.\nAccording to the proposed model, we can define the computation time complexity for graph inference as follows:\ntGIcp = maxi\u2208[1,n](Ei) \u00b7 c(S)/F\nwhere F is FLOPS; maxi\u2208[1,n](Ei) is maximum number of edges after distributing vertexes across n workers; c(S) is the number of computations of an algorithm given S number of states in a variable.\nThe number of edges per worker can be estimated via Monte-Carlo-like simulation. In order to do this, we randomly assign each vertex to a worker and add its degree to the total number of edges on the worker Erndi . In this way we count edges that connect vertexes from the same worker twice. Taking into account that the number of vertexes on a worker is V/n; the maximum number of edges on a worker is 1/2 \u00b7 (V/n \u2212 1)V/n; the maximum number of edges in the whole graph is V (V \u2212 1)/2; and the probability of two vertexes to share an edge is E/(V (V \u22121)/2), we estimate the number of the edges counted twice as:\nEdup = 1/2 \u00b7 (V/n\u2212 1)V/n \u00b7 E/(V (V \u2212 1)/2)\nThe estimated number of edges on a worker i is Ei = Erndi \u2212 Edup.\nThe communication time complexity accounts for the variables that need to be collected remotely (replicated). In case of the linear communication we have:\ntGIcm = 32/B \u00b7 r \u00b7 V \u00b7 S\nwhere B is the connection bandwidth between workers; 32 is the number of bits per state; r is the replication factor; V is the total number of vertexes.\nIn section V-B we discuss scalability of graphical model inference."}, {"heading": "V. EXPERIMENT RESULTS AND VALIDATION", "text": "We conducted a series of experiments to validate the proposed models for gradient descent and graphical model inference."}, {"heading": "A. Training of deep learning models", "text": "Deep learning is a widely used machine learning method. It is based on multi-layer artificial neural networks (ANN). ANNs are statistical models that approximate functions of multiple inputs. A network consists of interconnected \u201cneurons\u201d. A neuron produces an output by applying a function, optionally parametrized with weights, to its input. For example, a neuron with a linear function returns a linear combination of the inputs with weights being the coefficients of the combination. A neuron with a sigmoid function applies a logistic function to the input. Neurons are grouped into layers. Typically, neurons of one layer can operate in parallel. Neurons in different layers work sequentially. For example, layers of sigmoid functions usually follow linear layers. Networks with more than three layers are usually called \u201cdeep\u201d.\nDeep learning model parameters are the weights that neurons use for transformations. These parameters can be estimated with gradient descent on the cost function of the model prediction error on the training set. The gradient is computed with the back propagation algorithm. It involves three steps: forward propagation, back propagation of the cost function error, and computation of the gradient using the error.\nThe computation time complexity in terms of \u201cmultiplyadd\u201d operations for fully-connected layers can be estimated as 6 \u00b7W . (Each of the steps has two matrix multiplications per each network layer 2 \u00b7 ni \u00b7mi = 2 \u00b7wi\u2014where ni and mi are the number of column and rows in the weight matrix of layer i and wi is the total number of weights in the layer).\nThe computational time complexity of a convolutional layer is n \u00b7(k \u00b7k \u00b7d \u00b7c \u00b7c)\u2014where n is the number of feature maps; k is the size of the map (assuming it is squared); d is the depth of the input tensor; c is the number of sliding windows for the feature map on the input. n, k, and the depth d0 of the input are given in the network configuration. di is calculated from the shape of the output of (i\u22121)-th layer. c = (l\u2212k+ b)/s+1\u2014 where l is one side of the input (assuming it is squared); k is its depth; b is the border size; s is stride; and / is integer division. b and s are defined by the network configuration. The number of weights in the convolutional layer is n \u00b7 (k \u00b7 k \u00b7 d + c \u00b7 c). Bias (the number of weights is c \u00b7 c) is not commonly used for convolutional layers.\nWe used the above formulas to compute the number of weights and computations for deep learning models in our experiments. We verified that it corresponds to the numbers listed in the papers describing these models. Details are available online in our iPython notebooks [6].\nTable I contains the properties of the neural networks for our experiments. The fully connected network that we use is one of the most accurate networks used for MNIST handwritten character recognition [15]. It has five hidden layers (2500, 2000, 1500, 1000, and 500 neurons), 784 inputs,\nand 10 outputs. We also consider Inception v.3, a convolutional network for ImageNet image classification challenge [16]. The table also lists the number of \u201cmultiply-add\u201d computations required for the forward passes for these networks.\nFigure 2 shows the experimental and theoretical speedup of fully-connected ANN training. Markers represent experiments. We used the Apache Spark [17] 64-bit implementation of ANN in our experiments. Spark was running on a cluster. Each Spark worker was run on a dedicated node. Master also had a dedicated node. Each node is Xeon E3-1240 with 16GB of RAM and 1 Gbit/s network under RedHat Linux 6.3. The CPU has 211.2 GFLOPS [18]. We assume that one can reach at most 80% of the peak FLOPS.\nAccording to the proposed model of gradient descent and the above estimations of computations, the computation time complexity for a fully connected ANN is:\ntcp = (6 \u00b7W \u00b7 S)/(F \u00b7 n)\nwhere n is the number of equal computing nodes with F = 0.8 \u00b7 105.6 \u00b7 109 double precision FLOPS; W = 12 \u00b7 106 is the number of 64-bit parameters; S is the size of the batch. Spark uses batch gradient descent, that is, the batch size equals to the size of the dataset, which is 60000 samples. Two stage communication for gradient distribution and aggregation happens with two different protocols in Spark. Distribution of parameters is implemented with a torrent-like protocol. Aggregation is done in two waves. First wave is done for the square root number of the nodes and the second wave is done among the others. The communication time can be defined as:\ntcm = (64 \u00b7W/B) \u00b7 log(n) + 2 \u00b7 (64 \u00b7W/B) \u00b7 d \u221a ne\nwhere bandwidth is B = 109 bit/s. The model provides very good estimation of experimental results up to five workers. It also has the same peak, which accounts for the way the gradient communication is implemented in Spark. The model suggests that the optimal number of workers is nine. Adding more workers does not provide any speedup due to communication overhead. The mean absolute percentage error (MAPE) of the model estimates is only 13.7%.\nFigure 3 shows experimental and theoretical speedup of convolutional ANN training. We used the experimental results from the paper by Chen et al. [19] for speedup vs 50 workers. Chen and others conducted experiments with a GPU cluster of nVidia K40 GPU and TensorFlow software [20]. They list the number of parameters W = 25 \u00b7106 and the computation time complexity C = 3 \u00b7 5 \u00b7 109. Each worker has nVidia K40 GPU with 4.28 TFLOPS. We assume that it can reach at most 50%\nof peak performance. We compared our model predictions with their experiments with synchronous minibatch SGD.\nThe authors of [19] explored the scalability of synchronous and asynchronous mini-batch SGD in terms of model convergence. Each node computes a gradient for a fixed batch size. Adding more nodes increases the size of the effective batch and the training scales in terms of instances per second processed. This is an example of weak scaling. We calculate the speedup of processing of one instance to account for that.\nThe time complexity of processing of one instance is:\nt = ((C \u00b7 S)/F + 2 \u00b7 (32 \u00b7W/B) \u00b7 log(n))/n\nwhere mini-batch size S = 128, which is a typical choice for a single worker, and B = 109 bit/s. We assume that gradient aggregation uses logarithmic model of communication. Such assumption allows infinite weak scaling, i.e. adding more workers always increases single instance speedup. The linear communication model allows only finite scaling: after enough workers added, the speedup remains constant. Linear communication model only scales when the communication time for one worker is less than the computation time for it.\nAccording to Figure 3, the proposed model provides very close estimation of empirical speedup. MAPE is 1.2%. It can help to plan experiments for exploring the convergence of deep learning training."}, {"heading": "B. Belief propagation", "text": "Belief propagation (BP) [21] is a popular message-passing based algorithm for computing marginals of random variables in a graphical model, such as a Markov random field. It provides exact inference for trees, and approximate inference for graphs with cycles (in which case it is referred to as loopy belief propagation). Even though loopy belief propagation is an approximate algorithm with no convergence guarantees, it works well in practice for many applications [22] such as coding theory, image denoising, malware detection.\nThe loopy belief propagation algorithm works in two steps: (i) based on the messages from its neighbors, a vertex updates\nits own belief; and (ii) based on its updated belief, a vertex sends out messages to its neighbors. In the update step (i), a vertex belief is a product of its prior belief and messages about its variable received from its neighbors. In the send step (ii), a vertex generates a new message for each of its neighbors about the neighbor\u2019s variable. In the message, the vertex marginalizes over the values of the variable received except for the value received from the neighbor. These steps are repeated until convergence.\nAccording to the proposed model, the computation time complexity for BP is:\ntcp = maxi\u2208[1,n](Ei)/(F \u00b7 n) \u00b7 (S + 2 \u00b7 (S + S2))\nwhere n is the number of equal computing devices with F FLOPS; S = 2. maxi\u2208[1,n](Ei) is estimated as discussed in Section IV-B.\nFigure 4 shows the results of the experiments with a graph containing 16,259,408 vertexes, 99,854,596 edges, and\na maximum degree of 309,368. The graph is based on real DNS data traffic in a large enterprise. Theoretical curves correspond to the speedup with tcp estimated with a MonteCarlo-like simulation. Experimental curves were obtained with our implementation of BP in GraphLab [23], which ran on an HP ProLiant DL980 server with 80 CPU cores at 1.9 GHz and 2 TB of memory. We made a simplifying assumption that communication time complexity is negligible because all communications happen in the shared memory. F is factored out in the speedup formula due to this assumption. MAPE is 25.4%. As one can see on the charts, random vertex assignment to workers turns out to be a conservative estimate for configurations with few workers. However, execution overhead takes over with larger number of workers. We conducted experiments for smaller graphs with 1.6M, 165K, and 16K vertexes [6]. MAPE is 26%, 19.6%, and 23.5% correspondingly."}, {"heading": "VI. CONCLUSION AND FUTURE WORK", "text": "We presented a methodology for building performance models of distributed machine learning algorithms, which we applied to two machine learning use cases, gradient descent and graphical model inference. We validated the framework with experiments on neural networks and belief propagation. The results showed a close match between our models and the emperical data.\nThere are several opportunities for future research. One direction is enriching the machine learning computation models. In that respect, we consider building a model for asynchronous algorithms, such as asynchronous gradient descent [24].We also are interested in looking into parallelization-convergence trade-offs specific to machine learning. For example, gradient descent parallelization techniques pay for parallelism with algorithmically slower convergence or convergence to a worse local optimum. Finally, incorporating a feedback loop from experiments would also be useful as we found out with modelling belief propagation calculations.\nAnother future work direction is popularizing the adoption of such models in the industry. We strongly believe that the kind of simple, almost back-of-the-envelope scalability estimations that are presented in the paper should precede distributed implementations (and may sometimes prevent them!). The possible solution is to integrate the estimation software with such tools as Spark, Hadoop, and Tensorflow."}, {"heading": "ACKNOWLEDGMENT", "text": "The authors would like to thank Rob Schreiber from Hewlett Packard Labs and Xiangrui Meng from Databricks for inspiring discussions. We would also like to thank Carlos Zubieta for help with the belief propagation experiments."}], "references": [{"title": "An introduction to parallel algorithms", "author": ["J. J\u00e1J\u00e1"], "venue": "Addison-Wesley Reading,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1992}, {"title": "Validity of the single processor approach to achieving large scale computing capabilities", "author": ["G.M. Amdahl"], "venue": "Proceedings of the Spring Joint Computer Conference, ser. AFIPS \u201967 (Spring). New York, NY, USA: ACM, 1967, pp. 483\u2013485.", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1967}, {"title": "Reevaluating amdahl\u2019s law", "author": ["J.L. Gustafson"], "venue": "Commun. ACM, vol. 31, no. 5, pp. 532\u2013533, May 1988.", "citeRegEx": "3", "shortCiteRegEx": null, "year": 1988}, {"title": "Introduction to parallel processing: algorithms and architectures", "author": ["B. Parhami"], "venue": "Springer Science & Business Media,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2006}, {"title": "Autoscaling for hadoop clusters", "author": ["A. Gandhi", "S. Thota", "P. Dube", "A. Kochut", "L. Zhang"], "venue": "Cloud Engineering (IC2E), 2016 IEEE International Conference on. IEEE, 2016, pp. 109\u2013118.", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2016}, {"title": "Profiling, what-if analysis, and costbased optimization of mapreduce programs", "author": ["H. Herodotou", "S. Babu"], "venue": "Proceedings of the VLDB Endowment, vol. 4, no. 11, pp. 1111\u20131122, 2011.", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2011}, {"title": "Automating model search for large scale machine learning", "author": ["E.R. Sparks", "A. Talwalkar", "D. Haas", "M.J. Franklin", "M.I. Jordan", "T. Kraska"], "venue": "Proceedings of the Sixth ACM Symposium on Cloud Computing. ACM, 2015, pp. 368\u2013380.", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "A few bad ideas on the way to the triumph of parallel computing", "author": ["R. Schreiber"], "venue": "Journal of Parallel and Distributed Computing, vol. 74, no. 7, pp. 2544\u20132547, 2014.", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2014}, {"title": "Ernest: efficient performance prediction for large-scale advanced analytics", "author": ["S. Venkataraman", "Z. Yang", "M. Franklin", "B. Recht", "I. Stoica"], "venue": "13th USENIX Symposium on Networked Systems Design and Implementation (NSDI 16). USENIX Association, 2016, pp. 363\u2013378.", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2016}, {"title": "Distributed training of deep neural networks: theoretical and practical limits of parallel scalability", "author": ["J. Keuper", "F.-J. Preundt"], "venue": "Proceedings of the Workshop on Machine Learning in High Performance Computing Environments. IEEE Press, 2016, pp. 19\u201326.", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2016}, {"title": "A bridging model for parallel computation", "author": ["L.G. Valiant"], "venue": "Communications of the ACM, vol. 33, no. 8, pp. 103\u2013111, 1990.", "citeRegEx": "13", "shortCiteRegEx": null, "year": 1990}, {"title": "Probabilistic graphical models: principles and techniques", "author": ["D. Koller", "N. Friedman"], "venue": "MIT press,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2009}, {"title": "Deep big simple neural nets excel on handwritten digit recognition", "author": ["C.C. Dan", "C. Cires", "U. Meier"], "venue": "2010.", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2010}, {"title": "Rethinking the inception architecture for computer vision", "author": ["C. Szegedy", "V. Vanhoucke", "S. Ioffe", "J. Shlens", "Z. Wojna"], "venue": "arXiv preprint arXiv:1512.00567, 2015.", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2015}, {"title": "Resilient distributed datasets: A fault-tolerant abstraction for in-memory cluster computing", "author": ["M. Zaharia", "M. Chowdhury", "T. Das", "A. Dave", "J. Ma", "M. McCauley", "M.J. Franklin", "S. Shenker", "I. Stoica"], "venue": "Proceedings of the 9th USENIX conference on Networked Systems Design and Implementation. USENIX Association, 2012, pp. 2\u20132.", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2012}, {"title": "Revisiting distributed synchronous sgd", "author": ["J. Chen", "R. Monga", "S. Bengio", "R. Jozefowicz"], "venue": "arXiv preprint arXiv:1604.00981, 2016.", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2016}, {"title": "Tensorflow: Large-scale machine learning on heterogeneous distributed systems", "author": ["M. Abadi", "A. Agarwal", "P. Barham", "E. Brevdo", "Z. Chen", "C. Citro", "G.S. Corrado", "A. Davis", "J. Dean", "M. Devin"], "venue": "arXiv preprint arXiv:1603.04467, 2016.", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2016}, {"title": "Probabilistic reasoning in intelligent systems: networks of plausible inference", "author": ["J. Pearl"], "venue": null, "citeRegEx": "21", "shortCiteRegEx": "21", "year": 1988}, {"title": "Loopy belief propagation for approximate inference: An empirical study", "author": ["K.P. Murphy", "Y. Weiss", "M.I. Jordan"], "venue": "Proceedings of the Fifteenth conference on Uncertainty in artificial intelligence. Morgan Kaufmann Publishers Inc., 1999, pp. 467\u2013475.", "citeRegEx": "22", "shortCiteRegEx": null, "year": 1999}, {"title": "Distributed graphlab: a framework for machine learning and data mining in the cloud", "author": ["Y. Low", "D. Bickson", "J. Gonzalez", "C. Guestrin", "A. Kyrola", "J.M. Hellerstein"], "venue": "Proceedings of the VLDB Endowment, vol. 5, no. 8, pp. 716\u2013727, 2012.", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2012}, {"title": "Hogwild: A lock-free approach to parallelizing stochastic gradient descent", "author": ["B. Recht", "C. Re", "S. Wright", "F. Niu"], "venue": "Advances in Neural Information Processing Systems 24, J. Shawe-taylor, R. Zemel, P. Bartlett, F. Pereira, and K. Weinberger, Eds., 2011, pp. 693\u2013701.", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2011}], "referenceMentions": [{"referenceID": 0, "context": "Performance models of distributed systems have been thoroughly studied in parallel algorithms community [1].", "startOffset": 104, "endOffset": 107}, {"referenceID": 1, "context": "Amdahl [2] suggested a law that describes how fast problems can be solved using parallel computations.", "startOffset": 7, "endOffset": 10}, {"referenceID": 2, "context": "Gustafson [3] formulated consensus on what happens when", "startOffset": 10, "endOffset": 13}, {"referenceID": 3, "context": "Even though the parallel algorithms community often excluded communication overheads from their models, a computation-communication trade-off was well understood [4].", "startOffset": 162, "endOffset": 165}, {"referenceID": 4, "context": "[7] define a fine-grained model for", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "Herodotou and Babu [8] build models to answer what-if performance questions, however, they require collection of extensive profiling data.", "startOffset": 19, "endOffset": 22}, {"referenceID": 6, "context": "[9] where they propose a cluster resource allocation estimator.", "startOffset": 0, "endOffset": 3}, {"referenceID": 7, "context": "However, according to Scheiber [10], one could make it decline with increasing n, so that the sequential piece is irrelevant to scaling.", "startOffset": 31, "endOffset": 35}, {"referenceID": 8, "context": "[11].", "startOffset": 0, "endOffset": 4}, {"referenceID": 6, "context": "Their model is similar to [9] with the addition of logarithmic dependency on the number of workers.", "startOffset": 26, "endOffset": 29}, {"referenceID": 9, "context": "Keuper and Pfreundt [12] investigate the scalability of deep learning training and experimentally show that there is a communication bottleneck.", "startOffset": 20, "endOffset": 24}, {"referenceID": 10, "context": "(BSP) framework [13], comprising a series of supersteps.", "startOffset": 16, "endOffset": 20}, {"referenceID": 11, "context": "Graphical models [14] combine probabilistic dependency and reasoning with graph theory.", "startOffset": 17, "endOffset": 21}, {"referenceID": 12, "context": "use is one of the most accurate networks used for MNIST handwritten character recognition [15].", "startOffset": 90, "endOffset": 94}, {"referenceID": 13, "context": "3, a convolutional network for ImageNet image classification challenge [16].", "startOffset": 71, "endOffset": 75}, {"referenceID": 14, "context": "We used the Apache Spark [17] 64-bit implementation of ANN in our experiments.", "startOffset": 25, "endOffset": 29}, {"referenceID": 15, "context": "[19] for speedup vs 50 workers.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "Chen and others conducted experiments with a GPU cluster of nVidia K40 GPU and TensorFlow software [20].", "startOffset": 99, "endOffset": 103}, {"referenceID": 15, "context": "The authors of [19] explored the scalability of synchronous and asynchronous mini-batch SGD in terms of model convergence.", "startOffset": 15, "endOffset": 19}, {"referenceID": 17, "context": "Belief propagation (BP) [21] is a popular message-passing based algorithm for computing marginals of random variables in a graphical model, such as a Markov random field.", "startOffset": 24, "endOffset": 28}, {"referenceID": 18, "context": "Even though loopy belief propagation is an approximate algorithm with no convergence guarantees, it works well in practice for many applications [22] such as", "startOffset": 145, "endOffset": 149}, {"referenceID": 19, "context": "Experimental curves were obtained with our implementation of BP in GraphLab [23], which ran on an HP ProLiant DL980 server with 80 CPU cores at 1.", "startOffset": 76, "endOffset": 80}, {"referenceID": 20, "context": "In that respect, we consider building a model for asynchronous algorithms, such as asynchronous gradient descent [24].", "startOffset": 113, "endOffset": 117}], "year": 2017, "abstractText": "Present day machine learning is computationally intensive and processes large amounts of data. It is implemented in a distributed fashion in order to address these scalability issues. The work is parallelized across a number of computing nodes. It is usually hard to estimate in advance how many nodes to use for a particular workload. We propose a simple framework for estimating the scalability of distributed machine learning algorithms. We measure the scalability by means of the speedup an algorithm achieves with more nodes. We propose time complexity models for gradient descent and graphical model inference. We validate our models with experiments on deep learning training and belief propagation. This framework was used to study the scalability of machine learning algorithms in Apache Spark.", "creator": "LaTeX with hyperref package"}}}