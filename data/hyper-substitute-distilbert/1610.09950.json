{"id": "1610.09950", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-Oct-2016", "title": "From Node Embedding To Community Embedding", "abstract": "still however other existing hierarchy optimization traditions emphasize on vectors, which aim to output weighted matrix representation containing adjacent node in the graph thus that two domains being \" close \" on the graph are close somehow in the second - dimensional space. despite the success before embedding the configurations for dense complexes, followers notice that fundamentally important concept of mapping agents ( sc. br., groups implementing nodes ) be fundamental. embedding communities imply intrinsic, not only thereby achieving various visibility - enhancing pathways, but also therefore help preserve layered structure with cluster embedding. in fact, initiatives target community embedding as providing a higher - time proximity to another higher matrix clusters, and beyond perhaps the popular node embedding methods focus about first - order en / or second - tier components. to learn the matrix embedding, we plug together the insight at linking decomposition and linked embedding reinforce with each other. as a hobby, we presently comembed, the first community embedding method, which inherently optimizes the clustered embedding processes node composition together. chapters presently comembed on real - world mesh formats. we critique it outperforms the state - ranked - living - art baselines supporting both tasks of node creation and partition prediction.", "histories": [["v1", "Mon, 31 Oct 2016 14:50:41 GMT  (467kb,D)", "http://arxiv.org/abs/1610.09950v1", null], ["v2", "Thu, 14 Sep 2017 06:35:39 GMT  (540kb,D)", "http://arxiv.org/abs/1610.09950v2", "Code available atthis https URL"]], "reviews": [], "SUBJECTS": "cs.SI cs.AI", "authors": ["vincent w zheng", "sandro cavallari", "hongyun cai", "kevin chen-chuan chang", "erik cambria"], "accepted": false, "id": "1610.09950"}, "pdf": {"name": "1610.09950.pdf", "metadata": {"source": "CRF", "title": "From Node Embedding To Community Embedding", "authors": ["Vincent W. Zheng", "Sandro Cavallari", "Hongyun Cai", "Kevin Chen-Chuan Chang", "Erik Cambria"], "emails": ["hongyun.c}@adsc.com.sg,", "sandro001@e.ntu.edu.sg,", "kcchang@illinois.edu,", "cambria@ntu.edu.sg"], "sections": [{"heading": "Introduction", "text": "Graph data is becoming increasingly popular, thanks to the proliferation of various social media (e.g., blogs, Flickr, Twitter) and many other kinds of information networks (e.g., DBLP, knowledge graphs). To effectively process and analyze the graph data, we often need to consider how to appropriately represent the graph. Graph embedding is a mainstream graph representation framework (Roweis and Saul 2000; Chang et al. 2015; Niepert, Ahmed, and Kutzkov 2016; Xie et al. 2016), which aims to project a graph into a low-dimensional space for further analytic tasks, such as classification, clustering and so on.\nConventionally, graph embedding focuses on nodes \u2013 it tries to output a vector representation for each node in the graph, such that two nodes being \u201cclose\u201d on the graph have similar vector representations (i.e., close in the lowdimensional space). There are different ways to measure the closeness between two nodes in the graph. Most of the existing graph embedding methods measure the closeness by:\nCopyright c\u00a9 2017, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\n1) first-order proximity (Tenenbaum, de Silva, and Langford 2000; Belkin and Niyogi 2001), which considers two nodes as close if they are direct neighbors to each other in the graph; 2) second-order proximity (Perozzi, Al-Rfou, and Skiena 2014; Grover and Leskovec 2016), which considers two nodes as close if they share similar neighbors in the graph; 3) combination of first-order proximity and second-order proximity (Tang et al. 2015; Wang, Cui, and Zhu 2016), which considers two nodes as close if they are directly linked and also share similar neighbors.\nDespite the success of embedding individual nodes for graph analytics, we notice that an important concept of embedding communities (i.e., groups of nodes) is missing in the literature. Embedding community is useful; it helps to\n\u2022 Support community-level applications: for example, we can visualize the communities in a low-dimensional space to help generate insights about the graph structure. We can also enable community recommendation by predicting the most likely community to a node according to their closeness in the embedded space. We will quantitatively evaluate this community prediction task in the experiment.\n\u2022 Preserve community structure in graph embedding: the state of the art such as DeepWalk (Perozzi, Al-Rfou, and Skiena 2014), LINE (Tang et al. 2015) and node2vec (Grover and Leskovec 2016) is unable to preserve communities in the embedded space. In Fig. 1, we visualize the graph embedding of these methods for the Zachary\u2019s Karate Club data set1. The graph has 34 nodes. Each node has a color2, and there are in total four colors, indicating four different communities. Fig. 1(b)\u20131(d) show that, they cannot clearly separate the nodes of different colors apart.\nCommunity embedding. In this paper, we introduce a new concept of community embedding. A community embedding is a latent representation for a community in the graph. To represent a community, we are motivated by the Gaussian Mixture Model (Bishop 2006) to see each community as a Gaussian component. Thus, we represent each community with: 1) where its center is; 2) how its member nodes are spreaded. As to be defined later in Def. 1, we formulate a community embedding as a tuple of a mean vector indicat-\n1https://networkdata.ics.uci.edu/data.php?id=105 2Same colors as used in (Perozzi, Al-Rfou, and Skiena 2014).\nar X\niv :1\n61 0.\n09 95\n0v 1\n[ cs\n.S I]\n3 1\nO ct\n2 01\n6\ning the center of a community and a covariance matrix indicating the spread of its members in a low-dimensional space.\nCommunity embedding is significant. First of all, it provides a \u201cdirect\u201d representation for each community in the low-dimensional space, in contrast with representing a community as a collection of nodes. Second, it captures a higherorder proximity in graph embedding, such that the multihop-away nodes within the same community can also be close in the embedded space. There is few graph embedding work that considers higher-order proximity, and their definitions of higher-order proximity are not based on communities (Cao, Lu, and Xu 2016; Ou et al. 2016). More discussions are in the related work section.\nOur solution. Our major insight to learn the community embedding is hinged upon the mutual reinforcement between node embedding and community embedding. On one hand, a good community embedding helps to get a good node embedding, because of the higher-order proximity. On the other hand, a good node embedding also helps to get a good community embedding, since the nodes can then be better clustered together. As a result, we shall jointly optimize the community embedding and the node embedding. Note that, having a better node embedding also enables us to do better predictions (e.g., node classification) on the graph. We will also evaluate the node classification task in the experiment.\nBased on our above insight, we propose ComEmbed, the first community embedding method for graph analytics. Specifically, in ComEmbed we iteratively optimize the community embedding and the node embedding. Given the node embedding, we fit the community embedding by the Gaussian Mixture Model. Given the community embedding, we fit the node embedding by novelly preserving all of the firstorder, second-order and higher-order proximities. We emphasize that, the idea of joint modeling node embedding and community embedding is new. There is some work on using community to improve the node embedding (Yang et al. 2016), or using node embedding to achieve better community detection (Tian et al. 2014). But there is no study on the reinforcement of node embedding and community embedding. Besides, the joint modeling is also effective. In Figure 1(e), we first show some promising result: thanks to the com-\nmunity embedding, ComEmbed can well separate the nodes with different colors in the embedded space. More evaluations are in the experiment section.\nWe summarize our contributions as follows.\n\u2022 To the best of our knowledge, we are the first to introduce the concept of community embedding to graph analytics.\n\u2022 We propose ComEmbed, which jointly learns the community embedding and the node embedding together.\n\u2022 We evaluate ComEmbed on real-world data sets. We improve the state-of-the-art baselines by at least 4.0%\u20135.5% (conductance) and 5.3%\u201311.2% (NMI) in community prediction, 14.1%\u201391.8% (macro-F1) and 7.6%\u201310.2% (micro-F1) in node classification."}, {"heading": "Related Work", "text": "There is no existing graph embedding work that considers community embedding. Most of the graph embedding methods focus on generating node embedding. For example, earlier methods, such as MDS (Cox and Cox 2000), LLE (Roweis and Saul 2000), IsoMap (Tenenbaum, de Silva, and Langford 2000) and Laplacian eigenmap (Belkin and Niyogi 2001), typically aim to solve the leading eigenvectors of graph affinity matrices as node embedding. Recent methods typically rely on neural networks to learn the representation for each node, with either shallow architectures (Yang, Cohen, and Salakhutdinov 2016; Xie et al. 2016; Perozzi, Al-Rfou, and Skiena 2014; Tang et al. 2015; Grover and Leskovec 2016) or deep architectures (Niepert, Ahmed, and Kutzkov 2016; Wang, Cui, and Zhu 2016; Chang et al. 2015). Other than node embedding, there is some attempt to learn edge embedding (Luo et al. 2015), which aims to learn the embedding for both entities (i.e., nodes) and relations (i.e., edges) in a knowledge graph.\nThere is little existing graph embedding work that considers high-order proximity and their definitions of highorder proximity are also different from ours. Most existing methods focus on first-order proximity and/or second-order proximity (Perozzi, Al-Rfou, and Skiena 2014; Grover and Leskovec 2016; Tang et al. 2015; Wang, Cui, and Zhu 2016), as discussed in the introduction. Some recent attempts to consider higher-order proximity are based on the facts that:\n1) DeepWalk is a realization of SkipGram (Mikolov et al. 2013) on the graph data, where DeepWalk treats each node as a \u201cword\u201d and each path as a \u201csentence\u201d; 2) SkipGram implicitly factorizes a matrix based on the word-word coocurrence (Levy and Goldberg 2014). Thus, DeepWalk\u2019s secondorder proximity stems from factorizing the matrix about node-node coocurrence. Both (Ou et al. 2016) and (Cao, Lu, and Xu 2016) design and factorize a higher-order node-node proximity matrix by PageRank or Katz index. Thus their higher-order proximity is based on the graph reachability via random walk, where the notion of community is missing.\nThe mutual reinforcement of community embedding and node embedding has never been exploited. It is common to use node embedding results for community detection (Tian et al. 2014; Kozdoba and Mannor 2015), but they do not have the notion of community in their node embedding. There is some work that allows community feedback to guide the node embedding (Yang et al. 2016), but again it lacks the concept of community embedding and its community feedback requires extra supervision on must-links."}, {"heading": "Problem Formulation", "text": "As input, we are given a graph G = (V,E), where V is the node set and E is the edge set. Traditional graph embedding aims to learn a node embedding for each vi \u2208 V as \u03c6i \u2208 Rd. In this paper, we introduce the concept of community embedding. Suppose there are K communities on the graphG. For each node vi, we denote its community assignment as zi \u2208 {1, ...,K}. Motivated by Gaussian Mixture Model (GMM), we represent each community as a Gaussian component, which is characterized by a mean vector indicating the community center and a covariance matrix indicating its member nodes\u2019 spread. Formally, we define:\nDefinition 1 (Community Embedding) A community embedding for a community k in a d-dimensional space is a tuple (\u03c8k,\u03a3k), where \u03c8k \u2208 Rd is a Gaussian mean vector and \u03a3k \u2208 Rd\u00d7d is a Gaussian covariance matrix.\nAs output, we aim to learn both the community embedding (\u03c8k,\u03a3k) for each community k \u2208 {1, ...,K} and the node embedding \u03c6i for each node vi \u2208 V on the graph G.\nConsidering the mutual reinforcement between node embedding and community embedding, we propose to learn two embeddings together. First of all, to learn the node embedding, we consider both first-order and second-order proximity. In addition, we leverage the community embedding to achieve higher-order proximity, by requiring all the nodes within the same community to share similar embeddings. More precisely, we require all the nodes to have their node embeddings \u201cclose\u201d to the corresponding community embedding, where we measure the closeness by a Gaussian distribution. Finally, we jointly optimize the node embedding and the community embedding, by maximizing the likelihood of using both embeddings to preserve all the first-order, second-order and higher-order proximities on the graph. Next, we give the model details.\nFirst-order proximity. To preserve the first-order proximity, we require two nodes that are direct neighbors on the\ngraph to have similar node embeddings. Specifically, for each edge (vi, vj) \u2208 E, we follow LINE (Tang et al. 2015) to model the likelihood of first-order proximity as\np1(vi, vj) = \u03c3(\u03c6 T j \u03c6i), (1)\nwhere \u03c3(x) = 1/1 + exp(\u2212x) is a sigmoid function. Then we define the objective function for the first-order proximity node embedding as\nO1 = \u2212 \u2211\n(vi,vj)\u2208E log p1(vi, vj). (2)\nBy minimizing O1, we make \u03c6i close to each of its direct neighbors \u03c6j , \u2200(vi, vj) \u2208 E. Second-order proximity. To preserve the second-order proximity, we require two nodes that share similar neighbors on the graph to have similar node embeddings. We follow DeepWalk (Perozzi, Al-Rfou, and Skiena 2014) to consider a general sense of \u201cneighbors\u201d as the nodes that are reachable by the target node within \u03b6 steps in a random walk on the graph. Formally, we consider the neighbors of vi as the context for vi, and we denote C(vi) as the context nodes for vi. Then, to preserve the second-order proximity, we require node vi to have similar node embedding to each of its context uj \u2208 C(vi). We follow LINE to introduce an extra context embedding \u03c6\u2032j \u2208 Rd for each node uj . Thus we define the likelihood of second-order proximity as\np(C(vi)|vi;\u03c6,\u03c6\u2032) = \u220f uj\u2208C(vi) p(uj |vi;\u03c6,\u03c6 \u2032), (3)\nwhere p(uj |vi;\u03c6,\u03c6\u2032) in general is a softmax function\np(uj |vi;\u03c6,\u03c6\u2032) = exp(\u03c6\u2032Tj \u03c6i)\u2211 uk exp(\u03c6\u2032Tk \u03c6i) .\nAs the summarization in the softmax function is time consuming, we follow (Mikolov et al. 2013) to use negative sampling to replace the summation term in the softmax function. By taking the logarithm over p(uj |vi;\u03c6,\u03c6\u2032), we then define the new log-likelihood with negative sampling as\nlog p2(uj |vi;\u03c6,\u03c6\u2032) = log \u03c3(\u03c6\u2032 T j \u03c6i) + \u2211m l=1 Euk\u223cPn(u)[log \u03c3(\u2212\u03c6 \u2032T k\u03c6i)], (4)\nwhere uk \u223c Pn(u) means sampling a node uk (other than vi and any of its context) from V as a negative context of vi according to a probability Pn(u). We follow (Tang et al. 2015) to define Pn(u) \u221d r3/4u , where ru is node u\u2019s degree. Euk\u223cPn(u)[\u00b7] is the expectation over Pn(u). In total, we sample m negative context nodes to evaluate p(uj |vi;\u03c6,\u03c6\u2032). Finally, we define the objective function for the second-order proximity node embedding as\nO2 = \u2212\u03b1 \u2211 vi\u2208V \u2211 uj\u2208C(vi) log p2(uj |vi;\u03c6,\u03c6 \u2032), (5)\nwhere \u03b1 > 0 is a trade-off parameter. By minimizing O2, we make \u03c6i close to each of its context \u03c6j , \u2200\u03c6j \u2208 C(vi). Community embedding. To preserve the higher-order proximity, we require all the nodes within the same community to be close to the corresponding community center in the embedded space. In other words, the community\nstructure is preserved after embedding the nodes into a lowdimensional space. To model the node distribution for each community in the embedded space, we choose GMM to model the likelihood of higher-order proximity as\u220fN\ni=1 \u2211K k=1 p(vi|zi = k;\u03c6,\u03c8,\u03a3k)p(zi = k), (6)\nwhere each node vi belongs to a community k with a probability p(zi = k), and vi\u2019s \u201ccloseness\u201d to community k is measured by a probability p(vi|zi = k;\u03c6,\u03c8,\u03a3k). We define p(vi|zi = k;\u03c6,\u03c8) as a multivariate normal distribution with the mean \u03c8k and the covariance \u03a3k:\np(vi|zi = k;\u03c6,\u03c8) = N (\u03c6i|\u03c8k,\u03a3k). (7)\nFor notation simplicity, we further denote \u03c0ik = p(zi = k), where \u03c0ik \u2208 [0, 1] and \u2211K k=1 \u03c0ik = 1. Finally, we define the objective function for using community embedding to enforce the higher-order proximity as\nO3 = \u2212 \u03b2K \u2211N i=1 log \u2211K k=1 \u03c0ikN (\u03c6i|\u03c8k,\u03a3k), (8)\nwhere \u03b2 > 0 is a trade-off parameter. By minimizing O3, we: 1) find the community assignment \u03c0ik\u2019s for each node vi; 2) optimize the community embedding (\u03c8k,\u03a3k)\u2019s to best explain their corresponding community member nodes; 3) achieve the higher-order proximity by making the nodes within the same community to have similar embeddings.\nJoint modeling. Given all the first-order, second-order and higher-order proximities, we now jointly optimize the node embedding and the community embedding. Denote \u03a6 = [\u03c61, ...,\u03c6N ] \u2208 Rd\u00d7N , \u03a6\u2032 = [\u03c6 \u2032 1, ...,\u03c6 \u2032 N ] \u2208 Rd\u00d7N , \u03a8 = [\u03c81, ...,\u03c8K ] \u2208 Rd\u00d7K and \u03a3 = {\u03a31, ...,\u03a3K}. Then we aim to minimize the overall objective function for ComEmbed:\nL(\u03a6,\u03a6\u2032,\u03a8,\u03a3) = O1(\u03a6) +O2(\u03a6,\u03a6\u2032) +O3(\u03a6,\u03a8,\u03a3). (9)\nWe make some interesting connections of the ComEmbed objective function with the existing graph embedding methods. Firstly,O2 alone is the objective function for DeepWalk. Secondly, LINE trains O1 and O2 separately, but it also suggests jointly training O1 and O2 to combine two proximity. Our O1 + O2 can be seen as an extension of LINE. Thirdly, as shown in next section, we solve Eq. 9 by iteratively optimizing node embedding and community embedding. In contrast, first using LINE to learn node embedding and then using GMM to learn community embedding is a pipeline approach (to be evaluated in the community prediction task of our experiment). Finally, as GMM is known as a probabilistic version of K-means clustering (Bishop 2006), Eq. 9 can also be seen a probabilistic and joint optimization version of \u201cfirst doing LINE then doing K-means\u201d."}, {"heading": "Inference", "text": "To solve Eq. 9, we do coordinate descent between (\u03a6,\u03a6\u2032) and (\u03a8,\u03a3). Given (\u03a6,\u03a6\u2032), optimizing (\u03a8,\u03a3) equals to detecting communities in the embedded space. Given (\u03a8,\u03a3), optimizing (\u03a6,\u03a6\u2032) equals to learning node embedding with all the first-order, second-order and higher-order proximities. By iteratively optimizing (\u03a6,\u03a6\u2032) and (\u03a8,\u03a3), we keep\nminimizing the objective function. As the objective function is bounded, we eventually reach the convergence.\nFixing (\u03a6,\u03a6\u2032), optimize (\u03a8,\u03a3). In this case, we simplify L(\u03a6,\u03a6\u2032,\u03a8,\u03a3) as the negative likelihood of a GMM. According to (Bishop 2006), we can easily optimize (\u03a8,\u03a3) by expectation maximization, and fortunately we have closedform update for each parameter as:\n\u03c8k = 1 Nk \u2211N i=1 \u03b3ik\u03c6i, (10)\n\u03a3k = 1 Nk \u2211N i=1 \u03b3ik(\u03c6i \u2212\u03c8k)(\u03c6i \u2212\u03c8k)T , (11) \u03c0ik = Nk N , (12)\nwhere \u03b3ik = \u03c0ikN (\u03c6i|\u03c8k,\u03a3k)\u2211K\nk\u2032=1 \u03c0ik\u2032N (\u03c6i|\u03c8k\u2032 ,\u03a3k\u2032 ) and Nk =\n\u2211N i=1 \u03b3ik.\nFixing (\u03a8,\u03a3), optimize (\u03a6,\u03a6\u2032). In this case, we simplify L(\u03a6,\u03a6\u2032,\u03a8,\u03a3) as optimizing LINE with community embedding regularization. Because of the summation within the logarithm term in L, it is inconvenient to compute the gradient of \u03c6i. As a result, we use variational inference and minimize an upper bound of L(\u03a6,\u03a8,\u03a3). We first define\nO\u20323 = \u2212 \u03b2 K \u2211N i=1 \u2211K k=1 \u03c0ik logN (\u03c6i|\u03c8k,\u03a3k). (13)\nIt is easy to prove that\nO\u20323(\u03a6,\u03a8,\u03a3) \u2265 O3(\u03a6,\u03a8,\u03a3), (14)\ndue to the log-concavity N\u2211 i=1 log K\u2211 k=1\n\u03c0ikN (\u03c6i|\u03c8k,\u03a3k) \u2265 N\u2211 i=1 K\u2211 k=1 log \u03c0ikN (\u03c6i|\u03c8k,\u03a3k). As a result, we define\nL\u2032(\u03a6,\u03a6\u2032) = O1(\u03a6) +O2(\u03a6,\u03a6\u2032) +O\u20323(\u03a6,\u03a8,\u03a3),\nand we have L\u2032(\u03a6,\u03a6\u2032) \u2265 L(\u03a6,\u03a6\u2032). Finally, we optimize L\u2032(\u03a6,\u03a6\u2032) by stochastic gradient descent (SGD). For each vi \u2208 V , we have its gradient as\n\u2202O1 \u2202\u03c6i\n= \u2212 \u2211\n(i,j)\u2208E \u03c3(\u2212\u03c6Tj \u03c6i)\u03c6j , (15)\n\u2202O2 \u2202\u03c6i\n= \u2212\u03b1 \u2211\nuj\u2208C(vi)\n[ \u03c3(\u2212\u03c6\u2032j T \u03c6i)\u03c6 \u2032 j\n+ \u2211m\nl=1 Euk\u223cPn(u)[\u03c3(\u03c6\n\u2032 k T \u03c6i)(\u2212\u03c6 \u2032 k)]\n] , (16)\n\u2202O\u20323 \u2202\u03c6i = \u03b2\nK \u2211K k=1 \u03c0ik\u03a3 \u22121 k (\u03c6i \u2212\u03c8k). (17)\nThus, we have the gradient for \u03c6i as\n\u2202L\u2032 \u2202\u03c6i = \u2202O1\u2202\u03c6i + \u2202O2\u2202\u03c6i + \u2202O\u20323 \u2202\u03c6i . (18)\nWe also compute the gradient for context embedding as\n\u2202O2 \u2202\u03c6\u2032j = \u2212\u03b1 \u2211 vi\u2208V \u2211 uj\u2208C(vi) [ \u03b4(uj = vj)\u03c3(\u2212\u03c6\u2032j T \u03c6i)\u03c6i\n+ \u2211m l=1 Euk\u223cPn(u)[\u03b4(uk = vj)\u03c3(\u03c6 \u2032 k T \u03c6i)(\u2212\u03c6i)] ] ,\n(19)\nAlgorithm 1 ComEmbed Require: graph G = (V,E), number of communities K,\nnumber of paths per node \u03b3, walk length `, context window size \u03b6, embedding dimension d, size of negative context m, parameters \u03b1 and \u03b2. Ensure: node embedding \u03a6, context embedding \u03a6\u2032, community embedding (\u03a8,\u03a3).\n1: Initialize a path set P = \u2205; 2: for all vi \u2208 V do 3: for j = 1 : \u03b3 do 4: path p\u2190 SamplePath(G, vi, `); 5: Vp \u2190 GetNodeSubset(V, p); 6: for all vk exists in p do 7: Cp(vk)\u2190 GetContextSet(p, vk, \u03b6); 8: C\u0304p(vk)\u2190 SampleNegativeContext(G, vk,m); 9: Ep(vk)\u2190 GetEdgeSubset(E, p, vk);\n10: end for 11: P \u2190 P \u222a p; 12: end for 13: end for 14: Initialize \u03a6, \u03a6\u2032, \u03a8 and \u03a3; 15: for iter = 1 : T1 do 16: for subiter = 1 : T2 do 17: Update\u03c8k by Eq. 10; update \u03a3k by Eq. 11; update \u03c0ik by Eq. 12; 18: end for 19: Shuffle the paths in P; 20: for all path p \u2208 P do 21: for all vi \u2208 Vp do 22: Do SGD to optimize\u03c6i based onEp(vi),Cp(vi) and C\u0304p(vi) by Eq. 18; 23: end for 24: for all vj exists as a context for Vp do 25: Do SGD to optimize \u03c6\u2032j based on Vp, Cp(vi)\u2019s and C\u0304p(vi)\u2019s by Eq. 20; 26: end for 27: end for 28: end for\nFinally we have the gradient for \u03c6\u2032j as\n\u2202L\u2032 \u2202\u03c6\u2032j = \u2202O2\u2202\u03c6\u2032j . (20)\nAlgorithm and complexity. We summarize our ComEmbed in Alg. 1. In lines 1\u201313, we sample paths on the graph and then prepare the positive context set Cp(vk), negative context set C\u0304p(vk) and edge set Ep(vk) for each node in these paths. In lines 16\u201318, we fix (\u03a6,\u03a6\u2032) and optimize (\u03a8,\u03a3). In lines 19\u201327, we fix (\u03a8,\u03a3) and optimize (\u03a6,\u03a6\u2032).\nWe analyze the time complexity for Alg. 1. Lines 1\u201313 takeO(\u03b3N`) to sample paths and node context in each path. Line 14 takesO(N+K) to initialize the parameters. Line 17 takes O(NK) to compute a GMM. Line 19 takes O(\u03b3N). Lines 21\u201323 take O(`2 + `K) to compute the node embedding gradients. Lines 24\u201326 take O(`2) to compute the context embedding gradients. Thus, the overall complexity for Alg. 1 is O(\u03b3N`+N +K+T1(T2NK+\u03b3N + `2 + `K)),\nwhich is linear to N . Hence Alg. 1 is efficient. Moreover we can easily parallelize Alg. 1 for each path in lines 20\u201327."}, {"heading": "Experiments", "text": "Data sets. We use two real-world data sets3: BlogCatalog and Flickr. The BlogCatalog data set has 10,312 nodes, 333,983 edges and 39 node labels. The Flickr data set has 80,513 nodes, 5,899,882 edges and 195 node labels.\nTasks. We evaluate ComEmbed in two tasks: 1) community prediction; 2) node classification. In community prediction, our goal is to predict the most likely community assignment for each node. Since our data sets are labeled, we set the number of communities K as the number of distinct labels in the data set. As an unsupervised task, we use the whole graph for learning embeddings and then predicting communities for each node. In node classification, our goal is to classify each node into one of the multiple labels. We follow (Perozzi, Al-Rfou, and Skiena 2014) to first train the embeddings on the whole graph, then we randomly split 10% (BlogCatalog) and 90% (Flickr) of the nodes as test data, respectively. We use the remaining nodes to train a classifier by LibSVM (c = 1 for all methods) (Chang and Lin 2011). We repeat 10 splits and report the average performance.\nEvaluation. In community prediction, we use both conductance (Kloster and Gleich 2014) and normalized mutual information (NMI) (Tian et al. 2014) as the evaluation metrics. Conductance is basically a ratio between the number of edges leaving a community and that within the community. NMI measures the closeness between the predicted communities with ground truth based on the node labels.\nIn node classification, we use micro-F1 and macro-F1 as the evaluation metrics (Perozzi, Al-Rfou, and Skiena 2014). Micro-F1 is the overall F1 w.r.t. all kinds of labels. MacroF1 is the average of F1 scores w.r.t. each kind of label.\nBaselines. To show the advantages of community embedding and its joint modeling with node embedding, we compare with several state-of-the-art node embedding methods.\n\u2022 DeepWalk (Perozzi, Al-Rfou, and Skiena 2014): it models the second-order proximity for node embedding.\n\u2022 LINE (Tang et al. 2015): it models both the first-order and second-order proximities for node embedding.\n\u2022 node2vec (Grover and Leskovec 2016): it extends DeepWalk to exploit homophily and structural roles for node embedding. It also models the second-order proximity.\nFor all the baselines, we use the publicly available codes released by their authors for experiments. We try to compare with all the baselines on both BlogCatalog and Flickr data sets. However, we are unable to produce results for node2vec on Flickr due to unmanageable out-of-memory errors on a machine with 64GB memory. Thus we exclude node2vec from comparison on Flickr.\nParameters and environment. For DeepWalk, node2vec and ComEmbed, we set \u03b3 = 10, ` = 80, \u03b6 = 10, m = 5.\n3http://socialcomputing.asu.edu/pages/datasets\nFor LINE, we use concatenation of two embeddings for firstorder proximity and second-order proximity. In node2vec, we set p = 0.25, q = 0.25. We set the embedding dimension d = 128 for all methods. We always set K as the number of unique labels in the data sets. We run our experiments on the Linux machines equipped with eight 3.50GHz Intel Xeon(R) CPUs and 16GB memory.\nTask 1. Community Prediction. We compare ComEmbed with the baselines for community prediction. We set \u03b1 = 1, \u03b2 = 0.1 in ComEmbed for both data sets. As the baselines do not consider community in their embeddings, for fair comparison, we apply GMM over all the methods\u2019 node embedding outputs for community prediction. As shown in Fig. 2, ComEmbed is consistently better than the baselines in terms of both conductance and NMI. Specifically, ComEmbed improves the best baseline (i.e., DeepWalk) in both data sets by relative 4.0%\u20135.5% (conductance) and 5.3%\u201311.2% (NMI). This improvement suggests that, for community prediction, modeling community together with node embedding is better than doing them separately.\nTask 2. Node Classification. We compare ComEmbed with the baselines for node classification. We set \u03b1 = 1, \u03b2 = 0.01 for BlogCatalog and \u03b1 = 0.1, \u03b2 = 0.01 for Flickr. We vary the number of training data to build the classifiers for each method\u2019s node embeddings. As shown in Fig. 3, ComEmbed is generally better than the baselines in terms of both macro-F1 and micro-F1. Specifically, ComEmbed improves the best baselines (i.e., node2vec on BlogCatalog and DeepWalk on Flickr) in both data sets by relative 14.1%\u2013 91.8% (macro-F1) and 7.6%\u201310.2% (micro-F1), when using 90% (BlogCatalog) and 10% (Flickr) of nodes for training. Our student t-tests show that all the above relative improvements are significant over the 10 data splits, with onetailed p-values always less than 0.01. It is interesting to see ComEmbed improves the baselines on node classification, since community embedding is after all unsupervised and it does not directly optimize the classification loss. This suggests that the higher-order proximity from community embedding does contribute to a better node embedding.\nImpact of parameters. We test different values for the model parameters \u03b1 and \u03b2. As shown in Fig. 4, generally \u03b1 = 0.01 gives the best results for community prediction and node classification. This suggests keeping an appropriate trade off for the second-order proximity in the objective function is necessary. \u03b2 = 0.01 is generally the best for both tasks. In general, we can see when \u03b1 and \u03b2 are within the\nrange of [0.001, 1], the model performance is quite robust."}, {"heading": "Conclusion", "text": "In this paper, we study the problem of embedding communities on the graph. The problem is new because most of the existing graph embedding methods focus on individual nodes, instead of a group of nodes. We observe that community embedding and node embedding reinforce each other. On one hand, a good community embedding helps to get a good node embedding, thanks to its preserving the community structure during embedding. On the other hand, a good node embedding also helps to get a good community embedding, as clustering is then done over the nodes with good representations. We jointly optimize node embedding and community embedding. We evaluate our method on the real-world data sets, and show that it outperforms the state-of-the-art baselines by at least 4.0%\u20135.5% (conductance) and 5.3%\u201311.2% (NMI) in community prediction, 14.1%\u201391.8% (macro-F1) and 7.6%\u201310.2% (micro-F1) in node classification.\nIn the future, we plan to include node features in the community embedding. Besides, we also wish to extend our method to handle an infinite number of communities."}], "references": [{"title": "Laplacian eigenmaps and spectral techniques for embedding and clustering", "author": ["M. Belkin", "P. Niyogi"], "venue": "NIPS, 585\u2013591.", "citeRegEx": "Belkin and Niyogi,? 2001", "shortCiteRegEx": "Belkin and Niyogi", "year": 2001}, {"title": "Pattern Recognition and Machine Learning (Information Science and Statistics)", "author": ["C.M. Bishop"], "venue": "Secaucus, NJ, USA: Springer-Verlag New York, Inc.", "citeRegEx": "Bishop,? 2006", "shortCiteRegEx": "Bishop", "year": 2006}, {"title": "Deep neural networks for learning graph representations", "author": ["S. Cao", "W. Lu", "Q. Xu"], "venue": "AAAI, 1145\u20131152.", "citeRegEx": "Cao et al\\.,? 2016", "shortCiteRegEx": "Cao et al\\.", "year": 2016}, {"title": "Libsvm: A library for support vector machines", "author": ["Chang", "C.-C.", "Lin", "C.-J."], "venue": "ACM Trans. Intell. Syst. Technol. 2(3):27:1\u201327:27.", "citeRegEx": "Chang et al\\.,? 2011", "shortCiteRegEx": "Chang et al\\.", "year": 2011}, {"title": "Heterogeneous network embedding via deep architectures", "author": ["S. Chang", "W. Han", "J. Tang", "G. Qi", "C.C. Aggarwal", "T.S. Huang"], "venue": "KDD, 119\u2013128.", "citeRegEx": "Chang et al\\.,? 2015", "shortCiteRegEx": "Chang et al\\.", "year": 2015}, {"title": "Multidimensional Scaling, Second Edition", "author": ["T.F. Cox", "M. Cox"], "venue": "Chapman and Hall/CRC, 2 edition.", "citeRegEx": "Cox and Cox,? 2000", "shortCiteRegEx": "Cox and Cox", "year": 2000}, {"title": "node2vec: Scalable feature learning for networks", "author": ["A. Grover", "J. Leskovec"], "venue": "KDD.", "citeRegEx": "Grover and Leskovec,? 2016", "shortCiteRegEx": "Grover and Leskovec", "year": 2016}, {"title": "Heat kernel based community detection", "author": ["K. Kloster", "D.F. Gleich"], "venue": "KDD, 1386\u20131395.", "citeRegEx": "Kloster and Gleich,? 2014", "shortCiteRegEx": "Kloster and Gleich", "year": 2014}, {"title": "Community detection via measure space embedding", "author": ["M. Kozdoba", "S. Mannor"], "venue": "NIPS, 2890\u20132898.", "citeRegEx": "Kozdoba and Mannor,? 2015", "shortCiteRegEx": "Kozdoba and Mannor", "year": 2015}, {"title": "Neural word embedding as implicit matrix factorization", "author": ["O. Levy", "Y. Goldberg"], "venue": "NIPS, 2177\u20132185.", "citeRegEx": "Levy and Goldberg,? 2014", "shortCiteRegEx": "Levy and Goldberg", "year": 2014}, {"title": "Contextdependent knowledge graph embedding", "author": ["Y. Luo", "Q. Wang", "B. Wang", "L. Guo"], "venue": "EMNLP, 1656\u2013 1661.", "citeRegEx": "Luo et al\\.,? 2015", "shortCiteRegEx": "Luo et al\\.", "year": 2015}, {"title": "Distributed representations of words and phrases and their compositionality", "author": ["T. Mikolov", "I. Sutskever", "K. Chen", "G.S. Corrado", "J. Dean"], "venue": "NIPS, 3111\u20133119.", "citeRegEx": "Mikolov et al\\.,? 2013", "shortCiteRegEx": "Mikolov et al\\.", "year": 2013}, {"title": "Learning convolutional neural networks for graphs", "author": ["M. Niepert", "M. Ahmed", "K. Kutzkov"], "venue": "ICML, 2014\u2013 2023.", "citeRegEx": "Niepert et al\\.,? 2016", "shortCiteRegEx": "Niepert et al\\.", "year": 2016}, {"title": "Asymmetric transitivity preserving graph embedding", "author": ["M. Ou", "P. Cui", "J. Pei", "Z. Zhang", "W. Zhu"], "venue": "KDD, 1105\u20131114.", "citeRegEx": "Ou et al\\.,? 2016", "shortCiteRegEx": "Ou et al\\.", "year": 2016}, {"title": "Deepwalk: Online learning of social representations", "author": ["B. Perozzi", "R. Al-Rfou", "S. Skiena"], "venue": "KDD, 701\u2013710.", "citeRegEx": "Perozzi et al\\.,? 2014", "shortCiteRegEx": "Perozzi et al\\.", "year": 2014}, {"title": "Nonlinear dimensionality reduction by locally linear embedding", "author": ["S.T. Roweis", "L.K. Saul"], "venue": "Science 290(5500):2323\u20132326.", "citeRegEx": "Roweis and Saul,? 2000", "shortCiteRegEx": "Roweis and Saul", "year": 2000}, {"title": "Line: Large-scale information network embedding", "author": ["J. Tang", "M. Qu", "M. Wang", "M. Zhang", "J. Yan", "Q. Mei"], "venue": "WWW, 1067\u20131077.", "citeRegEx": "Tang et al\\.,? 2015", "shortCiteRegEx": "Tang et al\\.", "year": 2015}, {"title": "A global geometric framework for nonlinear dimensionality reduction", "author": ["J.B. Tenenbaum", "V. de Silva", "J.C. Langford"], "venue": "Science", "citeRegEx": "Tenenbaum et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Tenenbaum et al\\.", "year": 2000}, {"title": "Learning deep representations for graph clustering", "author": ["F. Tian", "B. Gao", "Q. Cui", "E. Chen", "T. Liu"], "venue": "AAAI, 1293\u20131299.", "citeRegEx": "Tian et al\\.,? 2014", "shortCiteRegEx": "Tian et al\\.", "year": 2014}, {"title": "Structural deep network embedding", "author": ["D. Wang", "P. Cui", "W. Zhu"], "venue": "KDD, 1225\u20131234.", "citeRegEx": "Wang et al\\.,? 2016", "shortCiteRegEx": "Wang et al\\.", "year": 2016}, {"title": "Representation learning of knowledge graphs with entity descriptions", "author": ["R. Xie", "Z. Liu", "J. Jia", "H. Luan", "M. Sun"], "venue": "AAAI, 2659\u20132665.", "citeRegEx": "Xie et al\\.,? 2016", "shortCiteRegEx": "Xie et al\\.", "year": 2016}, {"title": "Modularity based community detection with deep learning", "author": ["L. Yang", "X. Cao", "D. He", "C. Wang", "X. Wang", "W. Zhang"], "venue": "IJCAI, 2252\u20132258.", "citeRegEx": "Yang et al\\.,? 2016", "shortCiteRegEx": "Yang et al\\.", "year": 2016}, {"title": "Revisiting semi-supervised learning with graph embeddings", "author": ["Z. Yang", "W.W. Cohen", "R. Salakhutdinov"], "venue": "ICML, 40\u201348.", "citeRegEx": "Yang et al\\.,? 2016", "shortCiteRegEx": "Yang et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 15, "context": "Graph embedding is a mainstream graph representation framework (Roweis and Saul 2000; Chang et al. 2015; Niepert, Ahmed, and Kutzkov 2016; Xie et al. 2016), which aims to project a graph into a low-dimensional space for further analytic tasks, such as classification, clustering and so on.", "startOffset": 63, "endOffset": 155}, {"referenceID": 4, "context": "Graph embedding is a mainstream graph representation framework (Roweis and Saul 2000; Chang et al. 2015; Niepert, Ahmed, and Kutzkov 2016; Xie et al. 2016), which aims to project a graph into a low-dimensional space for further analytic tasks, such as classification, clustering and so on.", "startOffset": 63, "endOffset": 155}, {"referenceID": 20, "context": "Graph embedding is a mainstream graph representation framework (Roweis and Saul 2000; Chang et al. 2015; Niepert, Ahmed, and Kutzkov 2016; Xie et al. 2016), which aims to project a graph into a low-dimensional space for further analytic tasks, such as classification, clustering and so on.", "startOffset": 63, "endOffset": 155}, {"referenceID": 0, "context": "1) first-order proximity (Tenenbaum, de Silva, and Langford 2000; Belkin and Niyogi 2001), which considers two nodes as close if they are direct neighbors to each other in the graph; 2) second-order proximity (Perozzi, Al-Rfou, and Skiena 2014; Grover and Leskovec 2016), which considers two nodes as close if they share similar neighbors in the graph; 3) combination of first-order proximity and second-order proximity (Tang et al.", "startOffset": 25, "endOffset": 89}, {"referenceID": 6, "context": "1) first-order proximity (Tenenbaum, de Silva, and Langford 2000; Belkin and Niyogi 2001), which considers two nodes as close if they are direct neighbors to each other in the graph; 2) second-order proximity (Perozzi, Al-Rfou, and Skiena 2014; Grover and Leskovec 2016), which considers two nodes as close if they share similar neighbors in the graph; 3) combination of first-order proximity and second-order proximity (Tang et al.", "startOffset": 209, "endOffset": 270}, {"referenceID": 16, "context": "1) first-order proximity (Tenenbaum, de Silva, and Langford 2000; Belkin and Niyogi 2001), which considers two nodes as close if they are direct neighbors to each other in the graph; 2) second-order proximity (Perozzi, Al-Rfou, and Skiena 2014; Grover and Leskovec 2016), which considers two nodes as close if they share similar neighbors in the graph; 3) combination of first-order proximity and second-order proximity (Tang et al. 2015; Wang, Cui, and Zhu 2016), which considers two nodes as close if they are directly linked and also share similar neighbors.", "startOffset": 420, "endOffset": 463}, {"referenceID": 16, "context": "\u2022 Preserve community structure in graph embedding: the state of the art such as DeepWalk (Perozzi, Al-Rfou, and Skiena 2014), LINE (Tang et al. 2015) and node2vec (Grover and Leskovec 2016) is unable to preserve communities in the embedded space.", "startOffset": 131, "endOffset": 149}, {"referenceID": 6, "context": "2015) and node2vec (Grover and Leskovec 2016) is unable to preserve communities in the embedded space.", "startOffset": 19, "endOffset": 45}, {"referenceID": 1, "context": "To represent a community, we are motivated by the Gaussian Mixture Model (Bishop 2006) to see each community as a Gaussian component.", "startOffset": 73, "endOffset": 86}, {"referenceID": 13, "context": "There is few graph embedding work that considers higher-order proximity, and their definitions of higher-order proximity are not based on communities (Cao, Lu, and Xu 2016; Ou et al. 2016).", "startOffset": 150, "endOffset": 188}, {"referenceID": 21, "context": "There is some work on using community to improve the node embedding (Yang et al. 2016), or using node embedding to achieve better community detection (Tian et al.", "startOffset": 68, "endOffset": 86}, {"referenceID": 18, "context": "2016), or using node embedding to achieve better community detection (Tian et al. 2014).", "startOffset": 69, "endOffset": 87}, {"referenceID": 5, "context": "For example, earlier methods, such as MDS (Cox and Cox 2000), LLE (Roweis and Saul 2000), IsoMap (Tenenbaum, de Silva, and Langford 2000) and Laplacian eigenmap (Belkin and Niyogi 2001), typically aim to solve the leading eigenvectors of graph affinity matrices as node embedding.", "startOffset": 42, "endOffset": 60}, {"referenceID": 15, "context": "For example, earlier methods, such as MDS (Cox and Cox 2000), LLE (Roweis and Saul 2000), IsoMap (Tenenbaum, de Silva, and Langford 2000) and Laplacian eigenmap (Belkin and Niyogi 2001), typically aim to solve the leading eigenvectors of graph affinity matrices as node embedding.", "startOffset": 66, "endOffset": 88}, {"referenceID": 0, "context": "For example, earlier methods, such as MDS (Cox and Cox 2000), LLE (Roweis and Saul 2000), IsoMap (Tenenbaum, de Silva, and Langford 2000) and Laplacian eigenmap (Belkin and Niyogi 2001), typically aim to solve the leading eigenvectors of graph affinity matrices as node embedding.", "startOffset": 161, "endOffset": 185}, {"referenceID": 20, "context": "Recent methods typically rely on neural networks to learn the representation for each node, with either shallow architectures (Yang, Cohen, and Salakhutdinov 2016; Xie et al. 2016; Perozzi, Al-Rfou, and Skiena 2014; Tang et al. 2015; Grover and Leskovec 2016) or deep architectures (Niepert, Ahmed, and Kutzkov 2016; Wang, Cui, and Zhu 2016; Chang et al.", "startOffset": 126, "endOffset": 259}, {"referenceID": 16, "context": "Recent methods typically rely on neural networks to learn the representation for each node, with either shallow architectures (Yang, Cohen, and Salakhutdinov 2016; Xie et al. 2016; Perozzi, Al-Rfou, and Skiena 2014; Tang et al. 2015; Grover and Leskovec 2016) or deep architectures (Niepert, Ahmed, and Kutzkov 2016; Wang, Cui, and Zhu 2016; Chang et al.", "startOffset": 126, "endOffset": 259}, {"referenceID": 6, "context": "Recent methods typically rely on neural networks to learn the representation for each node, with either shallow architectures (Yang, Cohen, and Salakhutdinov 2016; Xie et al. 2016; Perozzi, Al-Rfou, and Skiena 2014; Tang et al. 2015; Grover and Leskovec 2016) or deep architectures (Niepert, Ahmed, and Kutzkov 2016; Wang, Cui, and Zhu 2016; Chang et al.", "startOffset": 126, "endOffset": 259}, {"referenceID": 4, "context": "2015; Grover and Leskovec 2016) or deep architectures (Niepert, Ahmed, and Kutzkov 2016; Wang, Cui, and Zhu 2016; Chang et al. 2015).", "startOffset": 54, "endOffset": 132}, {"referenceID": 10, "context": "Other than node embedding, there is some attempt to learn edge embedding (Luo et al. 2015), which aims to learn the embedding for both entities (i.", "startOffset": 73, "endOffset": 90}, {"referenceID": 6, "context": "Most existing methods focus on first-order proximity and/or second-order proximity (Perozzi, Al-Rfou, and Skiena 2014; Grover and Leskovec 2016; Tang et al. 2015; Wang, Cui, and Zhu 2016), as discussed in the introduction.", "startOffset": 83, "endOffset": 187}, {"referenceID": 16, "context": "Most existing methods focus on first-order proximity and/or second-order proximity (Perozzi, Al-Rfou, and Skiena 2014; Grover and Leskovec 2016; Tang et al. 2015; Wang, Cui, and Zhu 2016), as discussed in the introduction.", "startOffset": 83, "endOffset": 187}, {"referenceID": 11, "context": "1) DeepWalk is a realization of SkipGram (Mikolov et al. 2013) on the graph data, where DeepWalk treats each node as a \u201cword\u201d and each path as a \u201csentence\u201d; 2) SkipGram implicitly factorizes a matrix based on the word-word coocurrence (Levy and Goldberg 2014).", "startOffset": 41, "endOffset": 62}, {"referenceID": 9, "context": "2013) on the graph data, where DeepWalk treats each node as a \u201cword\u201d and each path as a \u201csentence\u201d; 2) SkipGram implicitly factorizes a matrix based on the word-word coocurrence (Levy and Goldberg 2014).", "startOffset": 178, "endOffset": 202}, {"referenceID": 13, "context": "Both (Ou et al. 2016) and (Cao, Lu, and Xu 2016) design and factorize a higher-order node-node proximity matrix by PageRank or Katz index.", "startOffset": 5, "endOffset": 21}, {"referenceID": 18, "context": "It is common to use node embedding results for community detection (Tian et al. 2014; Kozdoba and Mannor 2015), but they do not have the notion of community in their node embedding.", "startOffset": 67, "endOffset": 110}, {"referenceID": 8, "context": "It is common to use node embedding results for community detection (Tian et al. 2014; Kozdoba and Mannor 2015), but they do not have the notion of community in their node embedding.", "startOffset": 67, "endOffset": 110}, {"referenceID": 21, "context": "There is some work that allows community feedback to guide the node embedding (Yang et al. 2016), but again it lacks the concept of community embedding and its community feedback requires extra supervision on must-links.", "startOffset": 78, "endOffset": 96}, {"referenceID": 16, "context": "Specifically, for each edge (vi, vj) \u2208 E, we follow LINE (Tang et al. 2015) to model the likelihood of first-order proximity as", "startOffset": 57, "endOffset": 75}, {"referenceID": 11, "context": "As the summarization in the softmax function is time consuming, we follow (Mikolov et al. 2013) to use negative sampling to replace the summation term in the softmax function.", "startOffset": 74, "endOffset": 95}, {"referenceID": 16, "context": "We follow (Tang et al. 2015) to define Pn(u) \u221d r u , where ru is node u\u2019s degree.", "startOffset": 10, "endOffset": 28}, {"referenceID": 1, "context": "Finally, as GMM is known as a probabilistic version of K-means clustering (Bishop 2006), Eq.", "startOffset": 74, "endOffset": 87}, {"referenceID": 1, "context": "According to (Bishop 2006), we can easily optimize (\u03a8,\u03a3) by expectation maximization, and fortunately we have closedform update for each parameter as:", "startOffset": 13, "endOffset": 26}, {"referenceID": 7, "context": "In community prediction, we use both conductance (Kloster and Gleich 2014) and normalized mutual information (NMI) (Tian et al.", "startOffset": 49, "endOffset": 74}, {"referenceID": 18, "context": "In community prediction, we use both conductance (Kloster and Gleich 2014) and normalized mutual information (NMI) (Tian et al. 2014) as the evaluation metrics.", "startOffset": 115, "endOffset": 133}, {"referenceID": 16, "context": "\u2022 LINE (Tang et al. 2015): it models both the first-order and second-order proximities for node embedding.", "startOffset": 7, "endOffset": 25}, {"referenceID": 6, "context": "\u2022 node2vec (Grover and Leskovec 2016): it extends DeepWalk to exploit homophily and structural roles for node embedding.", "startOffset": 11, "endOffset": 37}], "year": 2016, "abstractText": "Most of the existing graph embedding methods focus on nodes, which aim to output a vector representation for each node in the graph such that two nodes being \u201cclose\u201d on the graph are close too in the low-dimensional space. Despite the success of embedding individual nodes for graph analytics, we notice that an important concept of embedding communities (i.e., groups of nodes) is missing. Embedding communities is useful, not only for supporting various community-level applications, but also to help preserve community structure in graph embedding. In fact, we see community embedding as providing a higher-order proximity to define the node closeness, whereas most of the popular graph embedding methods focus on first-order and/or second-order proximities. To learn the community embedding, we hinge upon the insight that community embedding and node embedding reinforce with each other. As a result, we propose ComEmbed, the first community embedding method, which jointly optimizes the community embedding and node embedding together. We evaluate ComEmbed on real-world data sets. We show it outperforms the state-of-the-art baselines in both tasks of node classification and community prediction.", "creator": "TeX"}}}