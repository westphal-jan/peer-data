{"id": "1611.00336", "review": {"conference": "NIPS", "VERSION": "v1", "DATE_OF_SUBMISSION": "1-Nov-2016", "title": "Stochastic Variational Deep Kernel Learning", "abstract": "deep kernel learning combines rich non - integer implementations of approximation methods with weak inductive biases associated deep vector architectures. raw model entirely novel deep kernel learning model performing stochastic variational variance technique and generalizes deep kernel learning simulations combining topological classification, multi - task search, raw resource structures, whereas noisy composite modeling. specifically, we apply additive base kernels to subsets of output features generating sampled neural architectures, participants typically learn the parameters of linear base kernels identifying their network through a wiener process marginal similarity objective. near sampling range, implementations derive an efficient form of explicit variational inference when leverages local variance measures, inducing points, smoothing structure exploiting edges. dimensions demand continuous security over parameter alone signal networks, integration, and state like the art strong gaussian approaches supplying neural classification benchmarks, including, xml delay box containing 6 data training points, cifar, and imagenet.", "histories": [["v1", "Tue, 1 Nov 2016 19:04:47 GMT  (223kb,D)", "http://arxiv.org/abs/1611.00336v1", "13 pages, 6 tables, 3 figures. Appearing in NIPS 2016"], ["v2", "Wed, 2 Nov 2016 18:06:16 GMT  (223kb,D)", "http://arxiv.org/abs/1611.00336v2", "13 pages, 6 tables, 3 figures. Appearing in NIPS 2016"]], "COMMENTS": "13 pages, 6 tables, 3 figures. Appearing in NIPS 2016", "reviews": [], "SUBJECTS": "stat.ML cs.LG stat.ME", "authors": ["andrew gordon wilson", "zhiting hu", "ruslan salakhutdinov", "eric p xing"], "accepted": true, "id": "1611.00336"}, "pdf": {"name": "1611.00336.pdf", "metadata": {"source": "CRF", "title": "Stochastic Variational Deep Kernel Learning", "authors": ["Andrew Gordon Wilson", "Zhiting Hu", "Eric P. Xing"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Large datasets provide great opportunities to learn rich statistical representations, for accurate predictions and new scientific insights into our modeling problems. Gaussian processes are promising for large data problems, because they can grow their information capacity with the amount of available data, in combination with automatically calibrated model complexity [23, 27].\nFrom a Gaussian process perspective, all of the statistical structure in data is learned through a kernel function. Popular kernel functions, such as the RBF kernel, provide smoothing and interpolation, but cannot learn representations necessary for long range extrapolation [24, 27]. With smoothing kernels, we can only use the information in a large dataset to learn about noise and length-scale hyperparameters, which tell us only how quickly correlations in our data vary with distance in the input space. If we learn a short length-scale hyperparameter, then by definition we will only make use of a small amount of training data near each testing point. If we learn a long length-scale, then we could subsample the data and make similar predictions.\nTherefore to fully use the information in large datasets, we must build kernels with great representational power and useful learning biases, and scale these approaches without sacrificing this representational ability. Indeed many recent approaches have advocated building expressive kernel functions [e.g., 24, 11, 28, 27, 19, 33], and emerging research in this direction takes inspiration from deep learning models [e.g., 30, 6, 3]. However, the scalability, general applicability, and interpretability of such approaches remain a challenge. Recently, Wilson et al. [32] proposed simple and scalable deep kernels for single-output regression problems, with promising performance on many experiments. But their approach does not allow for stochastic training, multiple outputs, deep architectures with many output features, or classification. And it is on classification problems, in particular, where we typically have high dimensional input vectors, with little intuition about how these vectors should correlate, and therefore most want to learn a flexible non-Euclidean similarity metric [1].\n*Equal contribution. 29th Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain.\nar X\niv :1\n61 1.\n00 33\n6v 1\n[ st\nat .M\nL ]\n1 N\nov 2\n01 6\nIn this paper, we introduce inference procedures and propose a new deep kernel learning model which enables (1) classification and non-Gaussian likelihoods; (2) multi-task learning1; (3) stochastic gradient mini-batch training; (4) deep architectures with many output features; (5) additive covariance structures; and (5) greatly enhanced scalability.\nWe propose to use additive base kernels corresponding to Gaussian processes (GPs) applied to subsets of output features of a deep neural architecture. We then linearly mix these Gaussian processes, inducing correlations across multiple output variables. The result is a deep probabilistic neural network, with a hidden layer composed of additive sets of infinite basis functions, linearly mixed to produce correlated output variables. All parameters of the deep architecture and base kernels are jointly learned through a marginal likelihood objective, having integrated away all GPs. For scalability and non-Gaussian likelihoods, we derive stochastic variational inference (SVI) which leverages local kernel interpolation, inducing points, and structure exploiting algebra, and a hybrid sampling scheme, building on Wilson and Nickisch [29], Wilson et al. [31], Titsias [26], Hensman et al. [12], and Nickson et al. [20]. The resulting approach, SV-DKL, has a complexity ofO(m1+1/D) for m inducing points and D input dimensions, versus the standard O(m3) for efficient stochastic variational methods.\nWe achieve good predictive accuracy and scalability over a wide range of classification tasks, while retaining a straightforward, general purpose, and highly practical probabilistic non-parametric representation, with code available at https://people.orie.cornell.edu/andrew/code."}, {"heading": "2 Background", "text": "Throughout this paper, we assume we have access to vectorial input-output pairs D = {xi,yi}, where each yi is related to xi through a Gaussian process and observation model. For example, in regression, one could model y(x)|f(x) \u223c N (y(x); f(x), \u03c32I), where f(x) is a latent vector of independent Gaussian processes f j \u223c GP(0, kj), and \u03c32I is a noise covariance matrix. The computational bottleneck in working with Gaussian processes typically involves computing (KX,X + \u03c3\n2I)\u22121y and log |KX,X | over an n\u00d7 n covariance matrix KX,X evaluated at n training inputs X . Standard procedure is to compute the Cholesky decomposition of KX,X , which incurs O(n3) computations and O(n2) storage, after which predictions cost O(n2) per test point. Gaussian processes are thus typically limited to at most a few thousand training points. Many promising approaches to scalability have been explored, for example, involving randomized methods [22, 18, 33] , and low rank approximations [25, 21]. Wilson and Nickisch [29] recently introduced the KISS-GP approximate kernel matrix K\u0303X,X\u2032 = MXKZ,ZM>X\u2032 , which admits fast computations, given the exact kernel matrix KZ,Z evaluated on a latent multidimensional lattice of m inducing inputs Z, and MX , a sparse interpolation matrix. Without requiring any grid structure in X , KZ,Z decomposes into a Kronecker product of Toeplitz matrices, which can be approximated by circulant matrices [31]. Exploiting such structure in combination with local kernel interpolation enables one to use many inducing points, resulting in near-exact accuracy in the kernel approximation, and O(n) inference. Unfortunately, this approach does not typically apply to D > 5 dimensional inputs [31].\nMoreover, the Gaussian process marginal likelihood does not factorize, and thus stochastic gradient descent does not ordinarily apply. To address this issue, Hensman et al. [12] extended the variational approach from Titsias [26] and derived a stochastic variational GP posterior over inducing points for a regression model which does have the required factorization for stochastic gradient descent. Elbashir and Wang [9], Hensman et al. [13], and Dezfouli and Bonilla [7] further combine this with a sampling procedure for estimating non-conjugate expectations. These methods have O(m3) sampling complexity which becomes prohibitive where many inducing points are desired for accurate approximation. Nickson et al. [20] consider Kronecker structure in the stochastic approximation of Hensman et al. [12] for regression, but do not leverage local kernel interpolation or sampling.\n1We follow the GP convention where multi-task learning involves a function mapping a single input to multiple correlated output responses (class probabilities, regression responses, etc.). Unlike NNs which naturally have correlated outputs by sharing hidden basis functions (and multi-task can have a more specialized meaning), most GP models perform multiple binary classification, ignoring correlations between output classes. Even applying a GP to NN features for deep kernel learning does not naturally produce multiple correlated outputs.\nTo address these limitations, we introduce a new deep kernel learning model for multi-task classification, mini-batch training, and scalable kernel interpolation which does not require low dimensional input spaces. In this paper, we view scalability and flexibility as two sides of one coin: we most want the flexible models on the largest datasets, which contain the necessary information to discover rich statistical structure. We show that the resulting approach can learn very expressive and interpretable kernel functions on large classification datasets, containing millions of training points."}, {"heading": "3 Deep Kernel Learning for Multi-task Classification", "text": "We propose a new deep kernel learning approach to account for classification and non-Gaussian likelihoods, multiple correlated outputs, additive covariances, and stochastic gradient training.\nWe propose to build a probabilistic deep network as follows: 1) a deep non-linear transformation h(x,w), parametrized by weights w, is applied to the observed input variable x, to produce Q features at the final layer L, h(L)1 , . . . , h (L) Q ; 2) J Gaussian processes, with base kernels k1, . . . , kJ , are applied to subsets of these features, corresponding to an additive GP model [e.g., 8]. The base kernels can thus act on relatively low dimensional inputs, where local kernel interpolation and learning biases such as similarities based on Euclidean distance are most natural; 3) these GPs are linearly mixed by a matrix A \u2208 RC\u00d7J , and transformed by an observation model, to produce the output variables y1, . . . , yC . The mixing of these variables through A produces correlated multiple outputs, a multi-task property which is uncommon in Gaussian processes or SVMs. The structure of this network is illustrated in Figure 1. Critically, all of the parameters in the model (including base kernel hyperparameters) are trained through optimizing a marginal likelihood, having integrated away the Gaussian processes, through the variational inference procedures described in section 4.\nFor classification, we consider a special case of this architecture. Let C be the number of classes, and we have data {xi,yi}ni=1, where yi \u2208 {0, 1}C is a one-shot encoding of the class label. We use the softmax observation model:\np(yi|f i, A) = exp(A(f i) >yi)\u2211 c exp(A(f i) >ec) , (1)\nwhere f i \u2208 RJ is a vector of independent Gaussian processes followed by a linear mixing layer A(f i) = Af i; and ec is the indicator vector with the cth element being 1 and the rest 0.\nFor the jth Gaussian process in the additive GP layer, let f j = {fij}ni=1 be the latent functions on the input data features. By introducing a set of latent inducing variables uj indexed by m inducing\ninputs Z, we can write [e.g., 21]\np(f j |uj) = N (f j |K(j)X,ZK (j),\u22121 Z,Z uj , K\u0303 (j)) , K\u0303 = KX,X \u2212KX,ZK\u22121Z,ZKZ,X . (2)\nSubstituting the local interpolation approximation KX,X\u2032 = MKZ,ZM> of Wilson and Nickisch [29] into Eq. (5), we find K\u0303(j) = 0; it therefore follows that f j = KX,ZK\u22121Z,Zu =Mu. In section 4 we exploit this deterministic relationship between f and u, governed by the sparse matrix M , to derive a particularly efficient stochastic variational inference procedure.\nEq. (1) and Eq. (5) together form the additive GP layer and the linear mixing layer of the proposed deep probabilistic network in Figure 1, with all parameters (including network weights) trained jointly through the Gaussian process marginal likelihood."}, {"heading": "4 Structure Exploiting Stochastic Variational Inference", "text": "Exact inference and learning in Gaussian processes with a non-Gaussian likelihood is not analytically tractable. Variational inference is an appealing approximate technique due to its automatic regularization to avoid overfitting, and its ability to be used with stochastic gradient training, by providing a factorized approximation to the Gaussian process marginal likelihood. We develop our stochastic variational method equipped with a fast sampling scheme for tackling any intractable marginalization.\nLet u = {uj}Jj=1 be the collection of the inducing variables of the J additive GPs. We assume a variational posterior over the inducing variables q(u). By Jensen\u2019s inequality we have\nlog p(y) \u2265 Eq(u)p(f |u)[log p(y|f)]\u2212 KL[q(u)\u2016p(u)] , L(q), (3)\nwhere we have omitted the mixing weights A for clarity. The KL divergence term can be interpreted as a regularizer encouraging the approximate posterior q(u) to be close to the prior p(u). We aim at tightening the marginal likelihood lower bound L(q) which is equivalent to minimizing the KL divergence from q to the true posterior.\nSince the likelihood function typically factorizes over data instances: p(y|f) = \u220fn i=1 p(yi|f i),\nwe can optimize the lower bound with stochastic gradients. In particular, we specify q(u) =\u220f j N (uj |\u00b5j ,Sj) for the independent GPs, and iteratively update the variational parameters {\u00b5j ,Sj}Jj=1 and the kernel and deep network parameters using a noisy approximation of the gradient of the lower bound on minibatches of the full data. Henceforth we omit the index j for clarity.\nUnfortunately, for general non-Gaussian likelihoods the expectation in Eq (7) is usually intractable. We develop a sampling method for tackling this intractability which is highly efficient with structured reparameterization, local kernel interpolation, and structure exploiting algebra.\nUsing local kernel interpolation, the latent function f is expressed as a deterministic local interpolation of the inducing variables u (section 3). This result allows us to work around any difficult approximate posteriors on f which typically occur in variational approaches for GPs. Instead, our sampler only needs to account for the uncertainty on u. The direct parameterization of q(u) yields a straightforward and efficient sampling procedure. The latent function samples (indexed by t) are then computed directly through interpolation f (t) =Mu(t).\nAs opposed to conventional mean-field methods, which assume a diagonal variational covariance matrix, we use the Cholesky decomposition for reparameterizing u in order to preserve structures within the covariance. Specifically, we let S = LTL, resulting in the following sampling procedure:\nu(t) = \u00b5+ L (t); (t) \u223c N (0, I).\nEach step of the above standard sampler has complexity of O(m2), where m is the number of inducing points. Due to the matrix vector product, this sampling procedure becomes prohibitive in the presence of many inducing points, which are required for accuracy on large datasets with multidimensional inputs \u2013 particularly if we have an expressive kernel function [29].\nWe scale up the sampler by leveraging the fact that the inducing points are placed on a grid (taking advantage of both Toeplitz and circulant structure), and additionally imposing a Kronecker decomposition on L = \u2297D d=1 Ld, where D is the input dimension of the base kernel. With the fast Kronecker\nmatrix-vector products, we reduce the above sampling cost of O(m2) to O(m1+1/D). Our approach thus greatly improves over previous stochastic variational methods which typically scale with O(m3) complexity, as discussed shortly.\nNote that the KL divergence term between the two Gaussians in Eq (7) has a closed form without the need for Monte Carlo estimation. Computing the KL term and its derivatives, with the Kronecker method, isO(Dm 3D ). With T samples of u and a minibatch of data points of size B, we can estimate the marginal likelihood lower bound as\nL ' N TB T\u2211 t=1 B\u2211 i=1 log p(yi|f (t) i )\u2212 KL[q(u)\u2016p(u)], (4)\nand the derivatives \u2207L w.r.t the model hyperparameters \u03b3 and the variational parameters {\u00b5, {Ld}Dd=1} can be taken similarly. We provide the detailed derivation in the supplement. Although a small body of pioneering work has developed stochastic variational methods for Gaussian processes, our approach distinctly provides the above representation-preserving variational approximation, and exploits algebraic structure for significant advantages in scalability and accuracy. In particular, a similar variational lower bound as in Eq (7) was proposed in [26, 12] for a sparse GP, which were extended to non-conjugate likelihoods, with the intractable integrals estimated using Gaussian quadrature as in the KLSP-GP [13] or univariate Gaussian samples as in the SAVI-GP [7]. Elbashir and Wang [9] estimates nonconjugate expectations with a hybrid Monte Carlo sampler (denoted as MC-GP). The computations in these approaches can be costly, with O(m3) complexity, due to a complicated variational posterior over f as well as the expensive operations on the full inducing point matrix. In addition to its increased efficiency, our sampling scheme is much simpler, without introducing any additional tuning parameters. We empirically compare with these methods and show the practical significance of our algorithm in section 5.\nVariational methods have also been used in GP regression for stochastic inference (e.g., [20, 12]), and some of the most recent work in this area applied variational auto-encoders [16] for coupled variational updates (aka back constraints) [5, 2]. We note that these techniques are orthogonal and complementary to our inference approach, and can be leveraged for further enhancements."}, {"heading": "5 Experiments", "text": "We evaluate our proposed approach, stochastic variational deep kernel learning (SV-DKL), on a wide range of classification problems, including an airline delay task with over 5.9 million data points (section 5.1), a large and diverse collection of classification problems from the UCI repository (section 5.2), and image classification benchmarks (section 5.3). Empirical results demonstrate the practical significance of our approach, which provides consistent improvements over stand-alone DNNs, while preserving a GP representation, and dramatic improvements in speed and accuracy over modern state of the art GP models. We use classification accuracy when comparing to DNNs, because it is a standard for evaluating classification benchmarks with DNNs. However, we also compute the negative log probability (NLP) values (supplement), which show similar trends.\nAll experiments were performed on a Linux machine with eight 4.0GHz CPU cores, one Tesla K40c GPU, and 32GB RAM. We implemented deep neural networks with Caffe [14].\nModel Training For our deep kernel learning model, we used deep neural networks which produce C-dimensional top-level features. Here C is the number of classes. We place a Gaussian process on each dimension of these features. We used RBF base kernels. The additive GP layer is then followed by a linear mixing layer A \u2208 RC\u00d7C . We initialized A to be an identity matrix, and optimized in the joint learning procedure to recover cross-dimension correlations from data.\nWe first train a deep neural network using SGD with the softmax loss objective, and rectified linear activation functions. After the neural network has been pre-trained, we fit an additive KISS-GP layer, followed by a linear mixing layer, using the top-level features of the deep network as inputs. Using this pre-training initialization, our joint SV-DKL model of section 3 is then trained through the stochastic variational method of section 4 which jointly optimizes all the hyperparameters \u03b3 of the deep kernel (including all network weights), as well as the variational parameters, by backpropagating derivatives through the proposed marginal likelihood lower bound of the additive Gaussian process in\nsection 4. In all experiments, we use a relatively large mini-batch size (specified according to the full data size), enabled by the proposed structure exploiting variational inference procedures. We achieve good performance setting the number of samples T = 1 in Eq. 4 for expectation estimation in variational inference, which provides additional confirmation for a similar observation in [15]."}, {"heading": "5.1 Airline Delays", "text": "We first consider a large airline dataset consisting of flight arrival and departure details for all commercial flights within the US in 2008. The approximately 5.9 million records contain extensive information about the flights, including the delay in reaching the destination. Following [13], we consider the task of predicting whether a flight was subject to delay based on 8 features (e.g., distance to be covered, day of the week, etc).\nClassification accuracy Table 1 reports the classification accuracy of 1) KLSP-GP [13], a recent scalable variational GP classifier as discussed in section 4; 2) stand-alone deep neural network (DNN); 3) DNN+, a stand-alone DNN with an extra Q\u00d7 c fully-connected hidden layer with Q, c defined as in Figure 1; 4) DNN+GP which is a GP applied to a pre-trained DNN (with same architecture as in 2); and 5) our stochastic variational DKL method (SV-DKL) (same DNN architecture as in 2). For DNN, we used a fully-connected architecture with layers d-1000-1000-500-50-c.2\nThe DNN component of the SV-DKL model has the exact same architecture. The SV-DKL joint training was conducted using a large minibatch size of 50,000 to reduce the variance of the stochastic gradient. We can use such a large minibatch in each iteration (which is daunting for regular GP even as a whole dataset) due to the efficiency of our inference strategy within each mini-batch, leveraging structure exploiting algebra.\nFrom the table we see that SV-DKL outperforms both the alternative variational GP model (KLSPGP) and the stand-alone deep network. DNN+GP outperforms stand-alone DNNs, showing the non-parametric flexibility of kernel methods. By combining KISS-GP with DNNs as part of a joint SV-DKL procedure, we obtain better results than DNN and DNN+GP. Besides, both the plain DNN and SV-DKL notably improve on stand-alone GPs, indicating a superior capacity of deep architectures to learn representations from large but finite training sets, despite the asymptotic approximation properties of Gaussian processes. By contrast, adding an extra hidden layer, as in DNN+, does not improve performance.\nFigure 2(a) further studies how performance changes as data size increases. We observe that the proposed SV-DKL classifier trained on 1/50 of the data already can reach a competitive accuracy as compared to the KLSP-GP model trained on the full dataset. As the number of the training points increases, the SV-DKL and DNN models continue to improve. This experiment demonstrates the value of expressive kernel functions on large data problems, which can effectively capture the extra information available as seeing more training instances. Furthermore, SV-DKL consistently provides better performance over the plain DNN, through its non-parametric flexibility.\nScalability We next measure the scalability of our variational DKL in terms of the number of inducing points m in each GP. Figure 2(c) shows the runtimes in seconds, as a function of m, for evaluating the objective and any relevant derivatives. We compare our structure exploiting variational method with the scalable variational inference in KLSP-GP, and the MCMC-based variational method in MC-GP [9]. We see that our inference approach is far more efficient than previous scalable algorithms. Moreover, when the number of inducing points is not too large (e.g., m = 70), the added time for SV-DKL over DNN is reasonable (e.g., 0.39s vs. 0.27s), especially considering the gains in performance and expressive power. Figure 2(d) shows the runtime scaling of different variational methods as m grows. We can see that the runtime of our approach increases only slowly in a wide range of m (< 2, 000), greatly enhancing the scalability over the other methods. This empirically validates the improved time complexity of our new inference method as presented in section 4.\nWe next investigate the total training time of the models. Table 1, right panel, lists the time cost of training KLSP-GP, DNN, and SV-DKL; and Figure 2(b) shows how the training time of SV-DKL and DNN changes as more training data is presented. We see that on the full dataset DKL, as a GP model, saves over 60% time as compared to the modern state of the art KLSP-GP, while at the same time\n2We obtained similar results with other DNN architectures (e.g., d-1000-1000-500-50-20-c).\nachieving over an 18% improvement in predictive accuracy. Generally, the training time of SV-DKL increases slowly with growing data sizes, and has only modest additional overhead compared to stand-alone architectures, justified by improvements in performance, and the general benefits of a non-parametric probabilistic representation. Moreover, the DNN was fully trained on a GPU, while in SV-DKL the base kernel hyperparameters and variational parameters were optimized on a CPU. Since most updates of the SV-DKL parameters are computed in matrix forms, we believe the already modest time gap between SV-DKL and DNNs can be almost entirely closed by deploying the whole SV-DKL model on GPUs."}, {"heading": "5.2 UCI Classification Tasks", "text": "The second evaluation of our proposed algorithm (SV-DKL) is conducted on a number of commonly used UCI classification tasks of varying sizes and properties. Table 2 lists the classification accuracy of SVM, DNN, DNN+ (a stand-alone DNN with an extra Q\u00d7 c fully-connected hidden layer with Q, c defined as in Figure 1), DNN+GP (a GP trained on the top level features of a trained DNN without the extra hidden layer), and SV-DKL (same architecture as DNN).\nThe plain DNN, which learns salient features effectively from raw data, gives notably higher accuracy compared to an SVM, the mostly widely used kernel method for classification problems. We see that the extra layer in DNN+GP can sometimes harm performance. By contrast, non-parametric flexibility of DNN+GP consistently improves upon DNN. And SV-DKL, by training a DNN through a GP marginal likelihood objective, consistently provides further enhancements (with particularly notable performance on the Connect4 and Covtype datasets)."}, {"heading": "5.3 Image Classification", "text": "We next evaluate the proposed scalable SV-DKL procedure for efficiently handling high-dimensional highly-structured image data. We used a minibatch size of 5,000 for stochastic gradient training of SV-DKL. Table 3 compares SV-DKL with the most recent scalable GP classifiers. Besides KLSP-GP, we also collected the results of the MC-GP [9] which uses a hybrid Monte Carlo sampler to tackle non-conjugate likelihoods, SAVI-GP [7] which approximates with a univariate Gaussian sampler,\nas well as the distributed GP latent variable model (denoted as D-GPLVM) [10]. We see that on the respective benchmark tasks, SV-DKL improves over all of the above scalable GP methods by a large margin. We note that these datasets are very challenging for conventional GP methods.\nWe further compare SV-DKL to stand-alone convolutional neural networks, and GPs applied to fixed pre-trained CNNs (CNN+GP). On the first three datasets in Table 3, we used the reference CNN models implemented in Caffe; and for the SVHN dataset, as no benchmark architecture is available, we used the CIFAR10 architecture which turned out to perform quite well. As we can see, the SV-DKL model outperforms CNNs and CNN+GP on all datasets. By contrast, the extra hidden Q\u00d7 c hidden layer CNN+ does not consistently improve performance over CNN. We also provide brief evaluations of SV-DKL for ResNets and ImageNet, as we believe such exploration will be a promising direction for future research.\nResNet Comparison: Based on one of the best public implementations on Caffe, the ResNet-20 has 0.901 accuracy on CIFAR10, and SV-DKL (with this ResNet base architecture) improves to 0.910.\nImageNet: We randomly selected 20 categories of images with an AlexNet variant as the base NN [17], which has an accuracy of 0.6877, while SV-DKL achieves 0.7067 accuracy."}, {"heading": "5.3.1 Interpretation", "text": "In Figure 3(a) we investigate the deep kernels learned on the MNIST dataset by randomly selecting 4 classes and visualizing the covariance matrices of respective dimensions. The covariance matrices are evaluated on the set of test inputs, sorted in terms of the labels of the input images. We see that the deep kernel on each dimension effectively discovers the correlations between the images within the corresponding class. For instance, in c = 2 the data points between 2k-3k (i.e., images of digit 2) are strongly correlated with each other, and carry little correlation with the rest of the images. Besides, we can also clearly observe that the rest of the data points also form multiple \u201cblocks\u201d, rather than being crammed together without any structure. This validates that the DKL procedure and additive GPs do capture the correlations across different dimensions.\nTo further explore the learnt dependencies between the output classes and the additive GPs serving as the bases, we visualized the weights of the mixing layer (A) in Fig. 3(b), enabling the correlated\nmulti-output (multi-task) nature of the model. Besides the expected high weights along the diagonal, we find that class 9 is also highly correlated with dimension 0 and 6, which is consistent with the visual similarity between digit \u201c9\u201d and \u201c0\u201d/\u201c6\u201d. Overall, the ability to interpret the learned deep covariance matrix as discovering an expressive similarity metric across data instances is a distinctive feature of our approach."}, {"heading": "6 Discussion", "text": "We introduced a scalable Gaussian process model which leverages deep learning, stochastic variational inference, structure exploiting algebra, and additive covariance structures. The resulting deep kernel learning approach, SV-DKL, allows for classification and non-Gaussian likelihoods, multi-task learning, and mini-batch training. SV-DKL achieves superior performance over alternative scalable GP models and stand-alone deep networks on many significant benchmarks.\nSeveral fundamental themes emerge from the exposition: (1) kernel methods and deep learning approaches are complementary, and we can combine the advantages of each approach; (2) expressive kernel functions are particularly valuable on large datasets; (3) by viewing neural networks through the lens of metric learning, deep learning approaches become more interpretable.\nDeep learning is able to obtain good predictive accuracy by automatically learning structure which would be difficult to a priori feature engineer into a model. In the future, we hope deep kernel learning approaches will be particularly helpful both for characterizing uncertainty and for interpreting these learned features, leading to new scientific insights into our modelling problems.\nAcknowledgements: We thank NSF IIS-1563887, ONR N000141410684, N000141310721, N000141512791, and ADeLAIDE FA8750-16C-0130-001 grants. We also thank anonymous reviewers for helpful comments."}, {"heading": "A Negative Log Probability (NLP) Results", "text": "Tables 4, 5, and 6 show the negative log probability values on different tasks. Generally we observed similar trends as from the classification accuracy results."}, {"heading": "B Stochastic Variational Inference for Deep Kernel Learning Classification", "text": "Recall the SV-DKL classification model\np(yi|f i,A) = exp(a(f i) Tyi)\u2211 c exp(a(f i) Tec)\np(f j |uj) =M (j)uj p(uj) = N (uj |0,K(j)Z,Z),\n(5)\nLet u = {uj}Jj=1. We assume a variational posterior over the inducing variables\nq(u) = \u220f j N (uj |\u00b5j ,Sj) (6)\nBy Jensen\u2019s inequality we have\nlog p(y) \u2265 Eq(u)p(f |u)[log p(y|f)]\u2212 KL[q(u)\u2016p(u)] , L(q),\n(7)\nIn the following we omit the GP index j when there is no ambiguity. Due to the deterministic mapping, we can obtain latent function samples from the samples of u:\nf (t) =Mu(t). (8)\nTo sample from q(u), we use the Cholesky decomposition for reparameterizing u in order to preserve structures within the covariance. Specifically, we let S = LTL. This results in the following sampling procedure for u:\nu(t) = \u00b5+ L (t); (t) \u223c N (0, I).\nWe further scale up the sampler by leveraging the fact that the inducing points are placed on a grid, and imposing Kronecker decomposition on L = \u2297D d=1 Ld, where D is the input dimension of the base kernel. With the fast Kronecker matrix-vector products, the sampling cost is O(m1+1/D). Note that\nS = (\u2297\nLd )T (\u2297 Ld ) = D\u2297 d=1 LTd Ld := D\u2297 d=1 Sd\nWith the samples, then for any h(u), we have\nEq(u)[h(u)] ' 1\nT T\u2211 t=1 h(u(t))\n= 1\nT T\u2211 l=1 h(\u00b5+ L (t))\n' Ep( )[h(\u00b5+ L )]\n(9)\nNext we give the derivation of the objective lower bound and its derivatives in detail. In the following we denote K := KZ,Z for clarity.\nComputation of the marginal likelihood lower bound The expectation term of objective lower bound Eq (7) can be computed straightforwardly following Eq (9). The KL term has a closed form (we omit the GP index j):\nKL(q(u)\u2016p(u)) = 1 2\n{ log |K| \u2212 log |S| \u2212D + tr(K\u22121S) + \u00b5TK\u22121\u00b5 } . (10)\nWith the Kronecker product representation of the covariance matrices, all the above matrix operations can be conducted efficiently:\nlog detS = log D\u220f d=1 det(LdL T d ) rankd\n= 2 D\u2211 d=1 rankd md\u2211 p=1 logLd,pp\ntr(K\u22121S) = D\u220f d=1 tr(K\u22121d Sd),\n(11)\nwhere md is the number of inducing points in dimension d (we have m = \u220fD d=1md); rankd =\u220f\nd\u2032 6=d rank(Sd\u2032); and K = \u2297D d=1Kd.\nDerivatives w.r.t the base kernel hyperparameters Note that the base kernel hyperparameters \u03b8 are only involved in the KL term of Eq (7). The derivative is\n\u2202L \u2202\u03b8 = \u2202KL(q\u2016p) \u2202\u03b8\n= 1\n2\n{ tr(K\u22121 \u2202K\n\u2202\u03b8 ) + tr(\n\u2202K\u22121\n\u2202\u03b8 S)\u2212 \u00b5TK\u22121 \u2202K \u2202\u03b8 K\u22121\u00b5 } = 1\n2\n{ tr(K\u22121 \u2202K\n\u2202\u03b8 )\u2212 tr(K\u22121 \u2202K \u2202\u03b8 K\u22121S)\u2212 \u00b5TK\u22121 \u2202K \u2202\u03b8 K\u22121\u00b5\n} (12)\nNote that the matrix inversions and traces can be computed efficiently by leveraging the Kronecker product as in Eq (11).\nDerivatives w.r.t other model parameters Other model parameters, including the deep network weights and the top-layer mixing weights, are only involved in the likelihood expectation term in Eq (7), and can be computed conveniently by following Eq (9) with h(\u00b7) replaced by the respective derivatives of the softmax likelihood in Eq (5).\nDerivatives w.r.t the variational parameters We only show the derivatives w.r.t the variational covariance parameters L. The derivatives w.r.t the variational means \u00b5 can be derived similarly.\n(1) The derivative of the softmax expectation term of input i w.r.t the (p, q)-th element of L(j)d , denoted as \u03bb for clarity, is given by\n\u2207\u03bb log p(yi|f i) = Ep( ) [(\u2211 c 1(yic = 1)Acj \u2212 exp(a(f i) Tyi)\u2211 c exp(a(f i) T ec) Acj ) M (j) i\u00b7 \u2207\u03bbL (j) ] ,\nwhere M (j)i\u00b7 is the ith row of the interpolation matrix (i.e., the interpolation vector of input i); and \u2207\u03bbL(j) = L(j)1 \u2297 \u00b7 \u00b7 \u00b7 \u2297 \u2207\u03bbL (j) d \u2297 \u00b7 \u00b7 \u00b7 \u2297 L (j) D . Note that for D = 1, we can directly write down the derivatives w.r.t the whole matrix L(j) which is efficient for computing:\n\u2207L(j) log p(yi|f i) = Ep( ) [(\u2211 c 1(yic = 1)Acj \u2212 exp(a(f i) Tyi)\u2211 c exp(a(f i) Tec) Acj ) ( M (j) i\u00b7 ) T ] .\n(2) The derivative of the KL term is (index j omitted):\n\u2207\u03bbKL[q(u)\u2016p(u)] = 1\n2 \u2202 \u2212 log |S|+ tr(K\u22121S) \u2202\u03bb\n= \u2212(L\u22121d )pq + tr(K \u22121 1 S1) \u00b7 \u00b7 \u00b7 tr(K \u22121 d Ld\u2207\u03bbL T d ) \u00b7 \u00b7 \u00b7 tr(K\u22121D SD),\nwhere tr(K\u22121d Ld\u2207\u03bbLTd ) = (K \u22121 d\u00b7 Ld)pq. Note that the Kronecker factor matrices are small (with size md \u00d7md) and thus the above computations are fast."}], "references": [], "referenceMentions": [], "year": 2016, "abstractText": "Deep kernel learning combines the non-parametric flexibility of kernel methods<lb>with the inductive biases of deep learning architectures. We propose a novel deep<lb>kernel learning model and stochastic variational inference procedure which gener-<lb>alizes deep kernel learning approaches to enable classification, multi-task learning,<lb>additive covariance structures, and stochastic gradient training. Specifically, we<lb>apply additive base kernels to subsets of output features from deep neural archi-<lb>tectures, and jointly learn the parameters of the base kernels and deep network<lb>through a Gaussian process marginal likelihood objective. Within this framework,<lb>we derive an efficient form of stochastic variational inference which leverages local<lb>kernel interpolation, inducing points, and structure exploiting algebra. We show<lb>improved performance over stand alone deep networks, SVMs, and state of the<lb>art scalable Gaussian processes on several classification benchmarks, including an<lb>airline delay dataset containing 6 million training points, CIFAR, and ImageNet.", "creator": "LaTeX with hyperref package"}}}