{"id": "1611.02796", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Nov-2016", "title": "Sequence Tutor: Conservative Fine-Tuning of Sequence Generation Models with KL-control", "abstract": "sequence models therefore be trained using objective coding and a broad - step prediction objective. this approach, apparently, progresses beyond desirable failure modes. for example, it is therefore difficult to ensure multi - step generated expressions have defined template orbits. attempts by the programmed learning template learning ( rt ) can be used on impose uncertain properties inside generated data. learning appropriate fault logic, consequently this paper faculty propose a novel approach for sequence biology whose combines reduced likelihood ( ml ) and rl training. will yield simpler sequence adaptive predict modifying for some imposed reward functions, while maintaining good predictive properties learned existing data. specialists evaluate analytic algorithms to solve this by augmenting deep q - learning with a partial - entropy loop and deriving related adaptive - policy methods for rnns named hybrid optimal control ( msc ). we reveal commercial promise of new approach examining the context of music generation. as lstm is trained combining your large corpus of songs to predict, next note in no musical sequence. this structure - rnn is then refined synthetic mri, demonstrating the matching function is a combination variable rewards arranged on rules of constraints theory, as well as the output of socially generated syllable - rnn. students derive significance to combining values using rl, this continuous tuner library can perhaps only produce pleasant melodic melodies, but as it contributes significantly relieve unwanted behaviors and failure memories of the rnn.", "histories": [["v1", "Wed, 9 Nov 2016 01:46:32 GMT  (406kb,D)", "http://arxiv.org/abs/1611.02796v1", null], ["v2", "Thu, 10 Nov 2016 18:54:17 GMT  (406kb,D)", "http://arxiv.org/abs/1611.02796v2", "Update affiliations"], ["v3", "Wed, 7 Dec 2016 14:42:30 GMT  (405kb,D)", "http://arxiv.org/abs/1611.02796v3", "Update acknowledgements"], ["v4", "Thu, 12 Jan 2017 02:18:20 GMT  (409kb,D)", "http://arxiv.org/abs/1611.02796v4", "Update acknowledgements"], ["v5", "Mon, 27 Feb 2017 20:38:06 GMT  (404kb,D)", "http://arxiv.org/abs/1611.02796v5", "Complete rewrite; new results on computational molecular generation"], ["v6", "Sat, 4 Mar 2017 19:38:01 GMT  (405kb,D)", "http://arxiv.org/abs/1611.02796v6", "Add citation for related work"], ["v7", "Thu, 6 Apr 2017 15:02:04 GMT  (405kb,D)", "http://arxiv.org/abs/1611.02796v7", "Add citation for related work"], ["v8", "Thu, 4 May 2017 17:11:45 GMT  (405kb,D)", "http://arxiv.org/abs/1611.02796v8", "Add citation for related work"], ["v9", "Mon, 16 Oct 2017 21:31:31 GMT  (429kb,D)", "http://arxiv.org/abs/1611.02796v9", "Add supplementary material"]], "reviews": [], "SUBJECTS": "cs.LG cs.AI", "authors": ["natasha jaques", "shixiang gu", "dzmitry bahdanau", "jos\u00e9 miguel hern\u00e1ndez-lobato", "richard e turner", "douglas eck"], "accepted": true, "id": "1611.02796"}, "pdf": {"name": "1611.02796.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Natasha Jaques", "Shixiang Gu", "Richard E. Turner", "Douglas Eck"], "emails": ["jaquesn@mit.edu,", "sg717@cam.ac.uk,", "ret26@cam.ac.uk,", "deck@google.com"], "sections": [{"heading": "1 INTRODUCTION", "text": "Generative modeling of music with deep neural networks is typically accomplished by training a Recurrent Neural Network (RNN) such as a Long Short-Term Memory (LSTM) network to predict the next note in a musical sequence (e.g. Eck & Schmidhuber (2002)). Similar to a Character RNN (Mikolov et al., 2010), these Note RNNs can be used to generate novel melodies by initializing them with a short sequence of notes, then repeatedly sampling from the model\u2019s output distribution generated to obtain the next note. While compositions generated in this way have recently garnered attention1, this type of model tends to suffer from common failure modes, such as excessively repeating notes, or producing sequences that lack a consistent theme or structure. Such sequences can appear wandering and random (see Graves (2013) for a text-based example).\nMusic compositions adhere to relatively well-defined structural rules, making music an interesting sequence generation challenge. For example, music theory tells that groups of notes belong to keys, chords follow progressions, and songs have consistent structures made up of musical phrases. Our research question is therefore whether such music-theory-based constraints can be learned by an RNN, while still allowing it to maintain note probabilities learned from data.\nTo approach this problem we propose RL Tuner, a novel sequence learning approach in which RL is used to impose structure on an RNN trained on data. We begin by training a deepQ-network (DQN) with a reward function comprising both a music-theory based reward, and the probability output\n1http://www.theverge.com/2016/6/1/11829678/google-magenta-melody-art-generative-artificialintelligence\nar X\niv :1\n61 1.\n02 79\n6v 1\n[ cs\n.L G\n] 9\nN ov\n2 01\nof a trained Note RNN. We show that this objective function can be related to stochastic optimal control (SOC) and derive two additional off-policy methods for refining the RNN by penalizing KL-divergence from its original policy. Thus, the RL Tuner models learn to adhere to a set of composition rules, while still maintaining information about the transition probabilities originally learned from data. We show that not only do the models successfully learn the desired behaviors, but that they produce varied compositions which are more melodic, harmonious, interesting, and rated as significantly more subjectively pleasing than those of the Note RNN. We suggest that this method of combining ML and RL could have potential applications in a number of areas as a general way to refine existing recurrent models trained on data by imposing constraints on their behavior."}, {"heading": "2 BACKGROUND", "text": ""}, {"heading": "2.1 DEEP Q-LEARNING", "text": "In RL, an agent interacts with an environment. Given the state of the environment at time t, st, the agent takes an action at according to its policy \u03c0(at|st), receives a reward r(st, at), and the environment transitions to a new state, st+1.The agent\u2019s goal is to maximize reward over a sequence of actions, with a discount factor of \u03b3 applied to future rewards. The optimal deterministic policy \u03c0\u2217 is known to satisfy the following Bellman optimality equation,\nQ(st, at;\u03c0 \u2217) = r(st, at) + \u03b3Ep(st+1|st,at)[maxat+1 Q(st+1, at+1;\u03c0 \u2217)] (1)\nwhere Q\u03c0(st, at) = E\u03c0[ \u2211\u221e t\u2032=t \u03b3\nt\u2032\u2212tr(st\u2032 , at\u2032)] is the Q function of a policy \u03c0. Q-learning techniques (Watkins & Dayan, 1992; Sutton et al., 1999) learn this optimal Q function by iteratively minimizing the Bellman residual. The optimal policy is given by \u03c0\u2217(a|s) = arg maxaQ(s, a). Deep Q-learning(Mnih et al., 2013) uses a neural network called the deep Q-network (DQN) to approximate the Q function Q(s, a; \u03b8). The network parameters \u03b8 are learned by applying stochastic gradient descent (SGD) updates with respect to the following loss function,\nL(\u03b8) = E\u03b2 [(r(s, a) + \u03b3max a\u2032\nQ(s\u2032, a\u2032; \u03b8\u2212)\u2212Q(s, a; \u03b8))2] (2)\nwhere \u03b2 is the exploration policy, and \u03b8\u2212 is the parameters of the Target Q-network (Mnih et al., 2013) that is held fixed during the gradient computation. The moving average of \u03b8 is used as \u03b8\u2212 as proposed in (Lillicrap et al., 2016). Exploration can be performed with either the -greedy method or Boltzmann sampling. Additional standard techniques such as replay memory (Mnih et al., 2013) and Deep Double Q-learning (Hasselt et al., 2015) are used to stablize and improve learning."}, {"heading": "2.2 MUSIC GENERATION WITH LSTM", "text": "Previous work with music generation using deep learning (e.g. (Eck & Schmidhuber, 2002), (Sturm et al., 2016)) has involved training an RNN to learn to predict the next note in a monophonic melody; we call this type of model a Note RNN. Often, the Note RNN is implemented using a Long ShortTerm Memory (LSTM) network (Gers et al., 2000). LSTMs are networks in which each recurrent cell learns to control the storage of information through the use of an input gate, output gate, and forget gate. The first two gates control whether information is able to flow into and out of the cell, and the latter controls whether or not the contents of the cell should be reset. Due to these properties, LSTMs are better at learning long-term dependencies in the data, and can adapt more rapidly to new data (Graves, 2013). A softmax function can be applied to the final outputs of the network to obtain the probability the network places on each note, and softmax cross-entropy loss can be used to train the model via back propagation through time (BPTT) (Graves & Schmidhuber, 2005). However, as previously described, the melodies generated by this model tend to wander, and lack musical structure; we will show that they are also perceived as less musically pleasing by listeners. In the next section, we will show how to improve this model with RL."}, {"heading": "3 RL TUNER DESIGN", "text": "Given a trained Note RNN, the goal is to teach it concepts about music theory, while still maintaining the information about typical musical compositions originally learned from data. To accomplish this\ntask, we propose RL Tuner, a novel sequence training method incorporating RL. We use an LSTM trained on data (the Note RNN) to supply the initial weights for three networks in RL Tuner: the Q-network and Target Q-network in the DQN algorithm as described in Section 2.1, and a Reward RNN. The Reward RNN is held fixed, and used to supply part of the reward value used in training.\nIn order to formulate musical composition as an RL problem, we treat placing the next note in the composition as taking an action. The state of the environment s consists of both the notes placed in the composition so far and the internal state of the LSTM cells of both the Q-network and the Reward RNN. To calculate the reward, we combine probabilities learned from the training data with knowledge of music theory. We define a set of music-theory based rules (described in Section 3.2) to impose constraints on the melody that the model is composing through a reward signal rMT (a, s). For example, if a note is in the wrong key, then the model receives a negative reward. However, it is necessary that the model still be \u201ccreative,\u201d rather than learning a simple composition that can easily exploit these rewards. Therefore, we use the Reward RNN \u2014 or equivalently the trained Note RNN \u2014 to compute log p(a|s), the log probability of a note a given a composition s, and incorporate this into the reward function. Figure 1 illustrates these ideas.\nThe total reward given at time t is therefore: r(s, a) = log p(a|s) + rMT (a, s)/c (3)\nwhere c is a constant controlling the emphasis placed on the music theory reward. Given the DQN loss function in Eq. 2 and modified reward function in Eq. 3, the new loss function and learned policy for RL Tuner are,\nL(\u03b8) = E\u03b2 [(log p(a|s) + rMT (a, s)/c+ \u03b3max a\u2032 Q(s\u2032, a\u2032; \u03b8\u2212)\u2212Q(s, a; \u03b8))2] (4) \u03c0\u03b8(a|s) = \u03b4(a = arg max\na Q(s, a; \u03b8)). (5)\nThus, the modified loss function forces the model to learn that the most valuable actions are those that conform to the music theory rules, but still have high probability in the original data."}, {"heading": "3.1 RELATIONSHIP TO STOCHASTIC OPTIMAL CONTROL", "text": "The technique described in Section 3 has a close connection with stochastic optimal control (SOC) (Todorov, 2006; Kappen et al., 2012; Rawlik et al., 2012). SOC defines a prior dynamics or policy, and derives a variant of the control or RL problem as performing approximate inference in a graphical model. Let \u03c4 be a trajectory of state and action sequences, p(\u03c4) be a prior dynamics, and r(\u03c4) be the reward of the trajectory. Then, SOC introduces an additional binary variable b and defines a graphical model as p(\u03c4, b) = p(\u03c4)p(b|\u03c4), where p(b = 1|\u03c4) = er(\u03c4)/c and c is the temperature variable. An approximation to p(\u03c4 |b = 1) can be derived using the variational free-energy method, and this leads to a cost with a similar form to the RL problem previously defined, but with an additional penalty based on the Kullback-Leibler (KL) divergence from the prior trajectory,\nlog p(\u03c4 |b = 1) = log \u222b p(\u03c4)p(b|\u03c4)d\u03c4 (6)\n\u2265 Eq(\u03c4)[log p(\u03c4)p(b|\u03c4)\u2212 log q(\u03c4)] (7) = Eq(\u03c4)[r(\u03c4)/c\u2212 KL[q(\u03c4)||p(\u03c4)]] = Lv(q) (8)\nwhere q(\u03c4) is the variational distribution. Rewriting the variational objective Lv(q) in Eq. 6 in terms of policy \u03c0\u03b8, we get the following RL objective with KL-regularization,\nLv(\u03b8) = E\u03c0[ \u2211\nt\nr(st, at)/c\u2212KL[\u03c0\u03b8(\u00b7|st)||p(\u00b7|st)]]. (9)\nIn contrast, the objective in Section 3 is,\nLv(\u03b8) = E\u03c0[ \u2211\nt\nr(st, at)/c+ log p(at|st)]. (10)\nThe difference is that Eq. 9 includes an entropy regularizer, and thus a different off-policy method from Q-learning is required. \u03a8-learning (Peters et al., 2010) and G-learning (Fox et al.)2 are two off-policy methods for solving the KL-regularized RL problem, where additional \u03a8 andG functions are defined and learned instead of Q. We implement both of these algorithms as well, treating the prior policy as the conditional distribution p(a|s) defined by the trained Note RNN. To the best of our knowledge, this is the first application of KL-regularized off-policy methods with deep neural networks to sequence modeling tasks. The two methods are given below respectively,\nL(\u03b8) = E\u03b2 [(log p(a|s) + rMT (s, a)/c+ \u03b3 log \u2211\na\u2032\ne\u03a8(s \u2032,a\u2032;\u03b8\u2212) \u2212\u03a8(s, a; \u03b8))2] (11)\n\u03c0\u03b8(a|s) \u221d e\u03a8(s,a;\u03b8) (12)\nL(\u03b8) = E\u03b2 [(rMT /c(s, a) + \u03b3 log \u2211\na\u2032\nelog p(a \u2032|s\u2032)+G(s\u2032,a\u2032;\u03b8\u2212) \u2212G(s, a; \u03b8))2] (13)\n\u03c0\u03b8(a|s) \u221d p(a|s)eG(s,a;\u03b8). (14) Both methods can be seen as instances of KL-regularized deep Q-learning, and they also subsume entropy-regularized deep Q-learning by removing the log p(a|s) term. The main difference between the two methods is the definition of the action-value functions \u03a8 and G. In fact G-learning can be directly derived from \u03a8-learning by reparametrizing \u03a8(s, a) = log p(a|s) + G(s, a). The Gfunction does not give the policy directly but instead needs to be dynamically mixed with the prior policy probabilities. While this computation is straight-forward for discrete action domains as here, extensions to continuous action domains require additional considerations such as normalizability of advantage function parametrizations (Gu et al., 2016). The SOC-based derivation also has another benefit in that the stochastic policies can be directly used as an exploration strategy, instead of heuristics such as -greedy or additive noise (Mnih et al., 2013; Lillicrap et al., 2016). The derivations for both methods are included in the appendix for completeness."}, {"heading": "3.2 MUSIC-THEORY BASED REWARD", "text": "A central question of this paper is whether RL can be used to constrain a sequence learner such that the sequences it generates adhere to a desired structure. To test this hypothesis, we developed several rules that we believe describe more pleasant-sounding melodies, taking inspiration from a text on melodic composition (Gauldin, 1995). We do not claim these characteristics are exhaustive, strictly necessary for good composition, or even particularly interesting. They simply serve the purpose of guiding the model towards traditional composition structure. It is therefore crucial to apply the RL Tuner framework to retain the knowledge learned from real songs in the training data.\nFollowing the principles set out on page 42 of Gauldin\u2019s book (Gauldin, 1995), we define the reward function rMT (a, s) to encourage compositions to have the following characteristics. All notes should belong to the same key, and the composition should begin and end with the tonic note of the key; e.g. if the key is C-major, this note would be middle C. This note should occur in the first beat and last 4 beats of the composition. Unless a rest is introduced or a note is held, a single tone should not be repeated more than four3 times in a row. To encourage variety, we penalize the model if the\n2The methods in the original papers are derived for different motivations and presented in different forms as described in Section 4, but we refer them using their names as the derivations follow closely from the papers.\n3While the number four can be considered a rough heuristic, avoiding excessively repeated notes and static melodic contours is Gauldin\u2019s first rule of melodic composition (Gauldin, 1995).\ncomposition is highly correlated with itself at a lag of 1, 2, or 3 beats. The penalty is applied when the auto-correlation coefficient is greater than .15. The composition should avoid awkward intervals like augmented 7ths, or large jumps of more than an octave. Gauldin also indicates good compositions should move by a mixture of small steps and larger harmonic intervals, with emphasis on the former; the reward values for intervals reflect these requirements. When the composition moves with a large interval (a 5th or more) in one direction, it should eventually be resolved by a leap back or gradual movement in the opposite direction. Leaping twice in the same direction is negatively rewarded. The highest note of the composition should be unique, as should the lowest note. Finally, the model is rewarded for playing motifs, which are defined as a succession of notes representing a short musical \u201cidea\u201d; in our implementation, a bar of music with three or more unique notes. Since repetition has been shown to be key to emotional engagement with music (Livingstone et al., 2012), we also sought to train the model to repeat the same motif within a composition."}, {"heading": "4 RELATED WORK", "text": "Generative modeling of music with RNNs has been explored in a variety of contexts, including generating Celtic folk music (Sturm et al., 2016), or performing Blues improvisation (Eck & Schmidhuber, 2002). Other approaches have examined RNNs with richer expressivity, latent-variables for notes, or raw audio synthesis (Boulanger-Lewandowski et al., 2012; Gu et al., 2015; Chung et al., 2015). Recently, impressive performance in generating music from raw audio has been attained with convolutional neural networks with receptive fields at various time scales (Dieleman et al., 2016).\nAlthough the application of RL to RNNs is a relatively new area, recent work has attempted to combine the two approaches. MIXER (Mixed Incremental Cross-Entropy Reinforce) (Ranzato et al., 2015) uses BLEU score as a reward signal to gradually introduce a RL loss to a text translation model. After initially training the model using cross-entropy, the training process is repeated using cross-entropy loss for the T \u2212\u2206 tokens in a sequence (where T is the length of the sequence), and using RL for the remainder of the sequence. Another approach (Bahdanau et al., 2016) applies an actor-critic method and uses BLEU score directly to train a critic network to output the value of each word, where the actor is again initialized with the policy of an RNN trained with next-step prediction. Reward-augmented maximum likelihood (Norouzi et al., 2016) augments the standard ML with a sequence-level reward function and connects it with the above RL training methods. These approaches assume that the complete task reward specification is available. They pre-train a good policy with supervised learning so that RL can be used to learn with the true task objective, since training with RL from scratch is difficult. RL Tuner instead only uses rewards to correct certain properties of the generated data, while learning most information from data. This is important since in many sequence modeling applications such as music or language generation, the true reward function is not available or imperfect and ultimately the model should rely on learning from data. The RL Tuner method provides an elegant and flexible framework for correcting undesirable behaviors of RNNs that can arise from limited training data or imperfect training algorithms.\nSeqGAN (Yu et al., 2016) applies RL to an RNN by using a discriminator network \u2014 similar to those used in Generative Adversarial Networks (GANs) (Goodfellow et al., 2014) \u2014 to classify the realism of a complete sequence, and this classifier-based reward is used as a reward signal to the RNN. The approach is applied to a number of generation problems, including music generation. Although the model obtained improved MSE and BLEU scores on the Nottingham music dataset, it is not clear how these scores map to the subjective quality of the samples (Husza\u0301r, 2015), and no samples are provided with the paper. In contrast, we provide both samples and quantitative results demonstrating that our approach improves the metrics defined by the reward function. Further, we show that RL Tuner can be used to explicitly correct undesirable behaviors of an RNN, which could be useful in a broad range of applications.\nOur work also relates to stochastic optimal control (SOC), in particular the two off-policy methods, \u03a8-learning (Rawlik et al., 2012) and G-learning (Fox et al.). Both approaches solve a KLregularized RL problem, in which a term is introduced to the reward objective to penalize KL divergence from some prior policy. While our methods rely on similar derivations presented in these papers, there are some key differences. First, these techniques have not been applied to DQNs or RNNs, or as a way to fine-tune a pre-trained RNN with additional desired charateristics. Secondly, our methods have different motivations and forms from the original papers: original\n\u03a8-learning (Rawlik et al., 2012) restricts the prior policy to be the policy at the previous iteration and solves the original RL objective with conservative, KL-regularized policy updates, similar to conservative policy gradient methods (Kakade, 2001; Peters et al., 2010; Schulman et al., 2015). The original G-learning (Fox et al.) penalizes divergence from a simple uniform prior policy in order to cope with over-estimation of target Q values, and includes scheduling for the temperature parameter c. Lastly, our work includes the Q-learning objective with additional cross-entropy reward as a comparable alternative, and provides for the first time comparisons among the three methods for incorporating prior knowledge in RL."}, {"heading": "5 EXPERIMENTS", "text": "To train the Note RNN, we extract monophonic melodies from a corpus of 30,000 MIDI songs. Melodies are quantized at the granularity of a sixteenth note, so each time step corresponds to one sixteenth of a bar of music. We encode a melody using two special events plus three octaves of notes. The special events are used to introduce rests and notes with longer durations, and are encoded as 0 = note off, 1 = no event. Three octaves of pitches, starting from MIDI pitch 48, are then encoded as 2 = C3, 3 = C#3, 4 = D3, ..., 37 = B5. For example, the sequence {4, 1, 0, 1} encodes an eighth note with pitch D3, followed by an eighth note rest. As the melodies are monophonic, playing another note implicitly ends the last note that was played without requiring an explicit note off event. Thus the sequence {2, 4, 6, 7} encodes a melody of four sixteenth notes: C3, D3, E3, F3. A length-38 one-hot encoding of these values is used for both network input and network output.\nThe Note RNN consists of one LSTM layer of 100 cells, and was trained for 30,000 iterations with a batch size of 128. Optimization was performed with Adam (Kingma & Ba, 2014), and gradients were clipped to ensure the L2 norm was less than 5. The learning rate was initially set to .5, and a momentum of 0.85 was used to exponentially decay the learning rate every 1000 steps. To regularize the network, a penalty of \u03b2 = 2.5 \u00d7 10\u22125 was applied to the L2 norm of the network weights. Finally, the losses for the first 8 notes of each sequence were not used to train the model, since it cannot reasonably be expected to accurately predict them with no context. The trained Note RNN eventually obtained a validation accuracy of 92% and a log perplexity score of .2536.\nThe learned weights of the Note RNN were used to initialize the three sub-networks in the RL Tuner model. Each RL Tuner model was trained for 1,000,000 iterations, using the Adam optimizer, a batch size of 32, and clipping gradients in the same way. The reward discount factor was \u03b3=.5. The Target-Q-network\u2019s weights \u03b8\u2212 were gradually updated to be similar to those of the Q-network (\u03b8) according to the formula (1 \u2212 \u03b7)\u03b8\u2212 + \u03b7\u03b8, where \u03b7 = .01 is the Target-Q-network update rate. We replicated our results for a number of settings for the weight placed on the music-theory rewards, c; we present results for c=.5 below because we believe them to be most musically pleasing. Similarly, we replicated the results using both -greedy and Boltzmann exploration, and present the results using -greedy exploration below.\nWe compare three methods for implementing RL Tuner: Q-learning; \u03a8-learning and G-learning, where the policy defined by the trained Note RNN is used as the cross entropy reward in Q-learning and the prior policy in G- and \u03a8-learning. These approaches are compared to both the original performance of the Note RNN, and a model trained using only RL and no prior policy. Model evaluation is performed every 100,000 training epochs, by generating 100 compositions and assessing the average rMT and log p(a|s). All of the code for RL Tuner, including a checkpointed version of the trained Note RNN is available at https://github.com/natashamjaques/magenta/tree/rl-tuner."}, {"heading": "6 RESULTS", "text": "Table 1 provides quantitative results in the form of performance on the music theory rules to which we trained the model to adhere; for example, we can assess the fraction of notes played by the model which belonged to the correct key, or the fraction of melodic leaps that were resolved. The statistics were computed by randomly generating 100,000 compositions from each model.\nThe results above demonstrate that the application of RL is able to correct almost all of the targeted \u201cbad behaviors\u201d of the Note RNN, while improving performance on the desired metrics. For exam-\nple, the original LSTM model was extremely prone to repeating the same note; after applying RL, we see that the number of notes belonging to some excessively repeated segment has dropped from 63% to nearly 0% in all of the RL Tuner models. While the metrics for the G model did not improve as consistently, the Q and \u03a8 models successfully learned to play in key, resolve melodic leaps, and play motifs. The number of compositions that start with the tonic note has also increased, composition auto-correlation has decreased, and repeated motifs have increased slightly. The degree of improvement on these metrics is related to the magnitude of the reward given for the behavior. For example, a strong penalty of -100 was applied each time a note was excessively repeated, while a reward of only 3 was applied at the end of a composition for unique extrema notes (which most likely explains the lack of improvement on this metric). The reward values could be adjusted to improve the metrics further, however we found that these values produced the most pleasant compositions.\nWhile the metrics indicate that the targeted behaviors of the RNN have improved, it is not clear whether the models have retained information about the training data. Figure 2a plots the average log p(a|s) as produced by the Reward RNN for compositions generated by the models every 100,000 training epochs; Figure 2b plots the average rMT . Included in the plots is an RL only model trained using only the music theory rewards, with no information about log p(a|s). Since each model is initialized with the weights of the trained Note RNN, we see that as the models quickly learn to adhere to the music theory constraints, log p(a|s) falls from its initial point. For the RL only model, log p(a|s) reaches an average of -3.65, which is equivalent to an average p(a|s) of approximately 0.026. Since there are 38 actions, this represents essentially a random policy with respect to the distribution defined by the Note RNN. Figure 2a shows that each of our models (Q, \u03a8, and G) attain higher log p(a|s) values than this baseline, indicating they have maintained information about the data probabilities. The G-learning implementation scores highest on this metric, at the cost of slightly lower average rMT . This compromise between data probability and adherence to music theory could explain the G model\u2019s poorer performance on the music theory metrics in Table 1. Finally, while c = 0.5 produced compositions that sounded better subjectively, we found that by increasing the c parameter it is possible to train all the models to have even higher average log p(a|s).\nThe question remains whether the RLtuned models actually produce more pleasing melodies. To answer it, we conducted a user study via Amazon Mechanical Turk in which participants were asked to rate which of two randomly selected compositions they preferred on a Likert scale. A total of 192 ratings were collected; each model was involved in 92 of these comparisons. Figure 3 plots the number of comparisons in which a composition from each model was selected as the most musically pleasing. A KruskalWallis H test of the ratings showed that there was a statistically significant difference between the models, \u03c72(3) = 109.480, p < 0.001. Mann-Whitney U post-hoc tests revealed that the compositions from all three RL Tuner models (Q, \u03a8, and G) had significantly higher\nratings than the compositions of the Note RNN, p < .001. The Q and \u03a8 compositions were also rated as significantly more pleasing than those of the G model, but did not differ significantly from each other. The sample compositions used for the study are available here: goo.gl/XIYt9m; we encourage readers to judge their quality for themselves.\nListening to the samples produced by the Note RNN reveals that they are sometimes dischordant and usually dull; the model tends to place rests frequently, repeat the same note, and produce melodies with little variation. In contrast, the melodies produced by the RL Tuner models are more varied and interesting. The G model tends to produce energetic and chaotic compositions, which include sequences of repeated notes. This repetition is likely because the G policy as defined in Eq. 14 directly mixes p(a|s) with the output of the G network, and the Note RNN strongly favours repeating notes. The most pleasant-sounding compositions are generated by the Q and \u03a8 models. These melodies stay firmly in key and frequently choose more harmonious interval steps, leading to melodic and pleasant compositions. However, it is clear they have retained information about the training data; for example, the sample q2.wav in the sample directory ends with a seemingly familiar riff."}, {"heading": "7 DISCUSSION AND FUTURE WORK", "text": "We have derived a novel sequence learning framework which uses RL rewards to correct properties of sequences generated by an RNN, while keeping much of the information learned from supervised training on data. We proposed and evaluated three alternative techniques for achieving this, and showed promising results on music generation tasks.\nIn addition to the ability to train models to generate pleasant-sounding melodies, we believe our approach of using RL to refine RNN models could be promising for a number of applications. For example, it is well known that a common failure mode of RNNs is to repeatedly generate the same token. In text generation and automatic question answering, this can take the form of repeatedly generating the same response (e.g. \u201cHow are you?\u201d \u2192 \u201cHow are you?\u201d \u2192 \u201cHow are you?\u201d ...). We have demonstrated that with our approach we can correct for this unwanted behavior, while still maintaining information that the model learned from data. Although manually writing a reward function may seem unappealing to those who believe in training models end-to-end based only on data, that approach it is limited by the quality of the data that can be collected. If the data contains hidden biases, this can lead to highly undesirable consequences. Recent research has shown that the word2vec embeddings in popular language models trained on standard corpora consistently contain the same harmful biases with respect to race and gender that are revealed by implicit association tests on humans (Caliskan-Islam et al., 2016). In contrast to relying solely on possibly biased data, our approach allows for encoding high-level domain knowledge into the RNN, providing a general, alternative tool for training sequence models."}, {"heading": "ACKNOWLEDGMENTS", "text": "This work was supported by Google Brain, the MIT Media Lab Consortium, and Canada\u2019s Natural Sciences and Engineering Research Council (NSERC). We thank Greg Wayne, Sergey Levine, and Timothy Lillicrap for helpful discussions on stochastic optimal control."}, {"heading": "8 APPENDIX", "text": ""}, {"heading": "8.1 OFF-POLICY METHODS DERIVATIONS FOR KL-REGULARIZED REINFORCEMENT LEARNING", "text": "Given the KL-regularized RL objective defined in Eq. 9, the value function is given by,\nV (st;\u03c0) = E\u03c0[ \u2211\nt\u2032\u2265t r(st\u2032 , at\u2032)/c\u2212 KL[\u03c0(\u00b7|st\u2032)||p(\u00b7|st\u2032)]] (15)"}, {"heading": "8.1.1 \u03a8-LEARNING", "text": "The following derivation is based on modifications to (Rawlik et al., 2012) and resembles the derivation in Fox et al.. We define the \u03a8 function as,\n\u03a8(st, at;\u03c0) = r(st, at)/c+ log p(at|st) (16) + Ep(st+1|st,at)E\u03c0[ \u2211\nt\u2032\u2265t+1 r(st\u2032 , at\u2032)/c\u2212 KL[\u03c0(\u00b7|st\u2032)||p(\u00b7|st\u2032)]] (17)\n= r(st, at)/c+ log p(at|st) + Ep(st+1|st,at)[V (st+1;\u03c0)] (18) The value function can be expressed as,\nV (st;\u03c0) = E\u03c0[\u03a8(st, at;\u03c0)] + H[\u03c0] (19) = E\u03c0[\u03a8(st, at;\u03c0)\u2212 log \u03c0(at|st)] (20)\nFixing \u03a8(st, at) = \u03a8(st, at;\u03c0) and constraining \u03c0 to be a probability distribution, the optimal greedy policy update \u03c0\u2217 can be derived by functional calculus, along with the corresponding optimal value function,\n\u03c0\u2217(at|st) \u221d e\u03a8(st,at) (21) V (st;\u03c0 \u2217) = log \u2211\nat\ne\u03a8(st,at) (22)\nGiven Eq. 18 and 22, the following Bellman optimality equation for \u03a8 function is derived, and the \u03a8-learning loss in Eq. 11 directly follows.\n\u03a8(st, at;\u03c0 \u2217) = r(st, at)/c+ log p(at|st) + Ep(st+1|st,at)[log\n\u2211\nat+1\ne\u03a8(st+1,at+1;\u03c0 \u2217)] (23)\n8.1.2 G-LEARNING\nThe following derivation is based on (Fox et al.) with small modifications. We define theG function as,\nG(st, at;\u03c0) = r(st, at)/c+ Ep(st+1|st,at)E\u03c0[ \u2211\nt\u2032\u2265t+1 r(st\u2032 , at\u2032)/c\u2212 KL[\u03c0(\u00b7|st\u2032)||p(\u00b7|st\u2032)]] (24)\n= r(st, at)/c+ Ep(st+1|st,at)[V (st+1;\u03c0)] = \u03a8(st, at;\u03c0)\u2212 log p(at|st) (25)\nSimilar derivation as above can be applied.\nV (st;\u03c0) = E\u03c0[G(st, at;\u03c0)]\u2212 KL[\u03c0(\u00b7|st\u2032)||p(\u00b7|st\u2032)] (26)\n= E\u03c0[G(st, at;\u03c0)\u2212 log \u03c0(at|st) log p(at|st) ] (27)\n\u03c0\u2217(at|st) \u221d p(at|st)eG(st,at) (28) V (st;\u03c0 \u2217) = log \u2211\nat\np(at|st)eG(st,at) (29)\nG(st, at;\u03c0 \u2217) = r(st, at)/c+ Ep(st+1|st,at)[log\n\u2211\nat+1\np(at+1|st+1)eG(st+1,at+1;\u03c0 \u2217)] (30)\nAlternatively, the above expression for G-learning can be derived from \u03a8-learning by simple reparametrization with \u03a8(s, a) = G(s, a) + log p(a|s) in Eq. 23."}], "references": [{"title": "An actor-critic algorithm for sequence prediction", "author": ["Bahdanau"], "venue": "arXiv preprint:1607.07086,", "citeRegEx": "Bahdanau,? \\Q2016\\E", "shortCiteRegEx": "Bahdanau", "year": 2016}, {"title": "Modeling temporal dependencies in highdimensional sequences: Application to polyphonic music generation and transcription", "author": ["Boulanger-Lewandowski", "Bengio", "Vincent"], "venue": "arXiv preprint:1206.6392,", "citeRegEx": "Boulanger.Lewandowski et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Boulanger.Lewandowski et al\\.", "year": 2012}, {"title": "Semantics derived automatically from language corpora necessarily contain human biases", "author": ["Caliskan-Islam", "Bryson", "Narayanan"], "venue": "arXiv preprint:1608.07187,", "citeRegEx": "Caliskan.Islam et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Caliskan.Islam et al\\.", "year": 2016}, {"title": "A recurrent latent variable model for sequential data", "author": ["Chung", "Kastner", "Dinh", "Goel", "Courville", "Bengio"], "venue": "In NIPS, pp", "citeRegEx": "Chung et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Chung et al\\.", "year": 2015}, {"title": "Wavenet: A generative model for raw audio", "author": ["Dieleman"], "venue": "arXiv preprint:1609.03499,", "citeRegEx": "Dieleman,? \\Q2016\\E", "shortCiteRegEx": "Dieleman", "year": 2016}, {"title": "Finding temporal structure in music: Blues improvisation with LSTM recurrent networks", "author": ["Eck", "Schmidhuber"], "venue": "In Neural Networks for Signal Processing,", "citeRegEx": "Eck and Schmidhuber.,? \\Q2002\\E", "shortCiteRegEx": "Eck and Schmidhuber.", "year": 2002}, {"title": "Learning to forget: Continual prediction with LSTM", "author": ["Gers", "Schmidhuber", "Cummins"], "venue": "Neural computation,", "citeRegEx": "Gers et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Gers et al\\.", "year": 2000}, {"title": "Generative adversarial nets", "author": ["Goodfellow"], "venue": "In NIPS, pp", "citeRegEx": "Goodfellow,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow", "year": 2014}, {"title": "Framewise phoneme classification with bidirectional LSTM and other neural network architectures", "author": ["Graves", "Schmidhuber"], "venue": "Neural Networks,", "citeRegEx": "Graves and Schmidhuber.,? \\Q2005\\E", "shortCiteRegEx": "Graves and Schmidhuber.", "year": 2005}, {"title": "Neural adaptive sequential monte carlo", "author": ["Gu", "Ghahramani", "Turner"], "venue": "In NIPS, pp. 2629\u20132637,", "citeRegEx": "Gu et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Gu et al\\.", "year": 2015}, {"title": "Continuous Deep Q-Learning with model-based acceleration", "author": ["Gu", "Lillicrap", "Sutskever", "Levine"], "venue": "In ICML,", "citeRegEx": "Gu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Gu et al\\.", "year": 2016}, {"title": "Deep reinforcement learning with double Q-learning", "author": ["Van Hasselt", "Guez", "Silver"], "venue": "CoRR, abs/1509.06461,", "citeRegEx": "Hasselt et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Hasselt et al\\.", "year": 2015}, {"title": "Optimal control as a graphical model inference problem", "author": ["Kappen", "G\u00f3mez", "Opper"], "venue": "Machine learning,", "citeRegEx": "Kappen et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Kappen et al\\.", "year": 2012}, {"title": "Adam: A method for stochastic optimization", "author": ["Kingma", "Ba"], "venue": "arXiv preprint:1412.6980,", "citeRegEx": "Kingma and Ba.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Continuous control with deep reinforcement learning", "author": ["Lillicrap"], "venue": null, "citeRegEx": "Lillicrap,? \\Q2016\\E", "shortCiteRegEx": "Lillicrap", "year": 2016}, {"title": "Emotional response to musical repetition", "author": ["Livingstone", "Palmer", "Schubert"], "venue": "Emotion, 12(3):552,", "citeRegEx": "Livingstone et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Livingstone et al\\.", "year": 2012}, {"title": "Recurrent neural network based language model", "author": ["Mikolov"], "venue": "In Interspeech,", "citeRegEx": "Mikolov,? \\Q2010\\E", "shortCiteRegEx": "Mikolov", "year": 2010}, {"title": "Playing atari with deep reinforcement learning", "author": ["Mnih"], "venue": "arXiv preprint:1312.5602,", "citeRegEx": "Mnih,? \\Q2013\\E", "shortCiteRegEx": "Mnih", "year": 2013}, {"title": "Reward augmented maximum likelihood for neural structured prediction", "author": ["Norouzi"], "venue": "arXiv preprint:1609.00150,", "citeRegEx": "Norouzi,? \\Q2016\\E", "shortCiteRegEx": "Norouzi", "year": 2016}, {"title": "Relative entropy policy search", "author": ["Peters", "M\u00fclling", "Altun"], "venue": "In AAAI. Atlanta,", "citeRegEx": "Peters et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Peters et al\\.", "year": 2010}, {"title": "Sequence level training with recurrent neural networks", "author": ["Ranzato", "Chopra", "Auli", "Zaremba"], "venue": "arXiv preprint:1511.06732,", "citeRegEx": "Ranzato et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Ranzato et al\\.", "year": 2015}, {"title": "On stochastic optimal control and reinforcement learning by approximate inference", "author": ["Rawlik", "Toussaint", "Vijayakumar"], "venue": "Proceedings of Robotics: Science and Systems VIII,", "citeRegEx": "Rawlik et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Rawlik et al\\.", "year": 2012}, {"title": "Trust region policy optimization", "author": ["Schulman", "Levine", "Moritz", "Jordan", "Abbeel"], "venue": "In ICML,", "citeRegEx": "Schulman et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schulman et al\\.", "year": 2015}, {"title": "Music transcription modelling and composition using deep learning", "author": ["Sturm", "Santos", "Ben-Tal", "Korshunova"], "venue": "arXiv preprint:1604.08723,", "citeRegEx": "Sturm et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Sturm et al\\.", "year": 2016}, {"title": "Policy gradient methods for reinforcement learning with function approximation", "author": ["Sutton"], "venue": "In NIPS,", "citeRegEx": "Sutton,? \\Q1999\\E", "shortCiteRegEx": "Sutton", "year": 1999}, {"title": "SeqGAN: Sequence generative adversarial nets with policy gradient", "author": ["Yu", "Zhang", "Wang"], "venue": "arXiv preprint:1609.05473,", "citeRegEx": "Yu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Yu et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 16, "context": "Similar to a Character RNN (Mikolov et al., 2010), these Note RNNs can be used to generate novel melodies by initializing them with a short sequence of notes, then repeatedly sampling from the model\u2019s output distribution generated to obtain the next note. While compositions generated in this way have recently garnered attention1, this type of model tends to suffer from common failure modes, such as excessively repeating notes, or producing sequences that lack a consistent theme or structure. Such sequences can appear wandering and random (see Graves (2013) for a text-based example).", "startOffset": 28, "endOffset": 563}, {"referenceID": 11, "context": ", 2013) and Deep Double Q-learning (Hasselt et al., 2015) are used to stablize and improve learning.", "startOffset": 35, "endOffset": 57}, {"referenceID": 23, "context": "(Eck & Schmidhuber, 2002), (Sturm et al., 2016)) has involved training an RNN to learn to predict the next note in a monophonic melody; we call this type of model a Note RNN.", "startOffset": 27, "endOffset": 47}, {"referenceID": 6, "context": "Often, the Note RNN is implemented using a Long ShortTerm Memory (LSTM) network (Gers et al., 2000).", "startOffset": 80, "endOffset": 99}, {"referenceID": 12, "context": "The technique described in Section 3 has a close connection with stochastic optimal control (SOC) (Todorov, 2006; Kappen et al., 2012; Rawlik et al., 2012).", "startOffset": 98, "endOffset": 155}, {"referenceID": 21, "context": "The technique described in Section 3 has a close connection with stochastic optimal control (SOC) (Todorov, 2006; Kappen et al., 2012; Rawlik et al., 2012).", "startOffset": 98, "endOffset": 155}, {"referenceID": 19, "context": "\u03a8-learning (Peters et al., 2010) and G-learning (Fox et al.", "startOffset": 11, "endOffset": 32}, {"referenceID": 10, "context": "While this computation is straight-forward for discrete action domains as here, extensions to continuous action domains require additional considerations such as normalizability of advantage function parametrizations (Gu et al., 2016).", "startOffset": 217, "endOffset": 234}, {"referenceID": 15, "context": "Since repetition has been shown to be key to emotional engagement with music (Livingstone et al., 2012), we also sought to train the model to repeat the same motif within a composition.", "startOffset": 77, "endOffset": 103}, {"referenceID": 23, "context": "Generative modeling of music with RNNs has been explored in a variety of contexts, including generating Celtic folk music (Sturm et al., 2016), or performing Blues improvisation (Eck & Schmidhuber, 2002).", "startOffset": 122, "endOffset": 142}, {"referenceID": 1, "context": "Other approaches have examined RNNs with richer expressivity, latent-variables for notes, or raw audio synthesis (Boulanger-Lewandowski et al., 2012; Gu et al., 2015; Chung et al., 2015).", "startOffset": 113, "endOffset": 186}, {"referenceID": 9, "context": "Other approaches have examined RNNs with richer expressivity, latent-variables for notes, or raw audio synthesis (Boulanger-Lewandowski et al., 2012; Gu et al., 2015; Chung et al., 2015).", "startOffset": 113, "endOffset": 186}, {"referenceID": 3, "context": "Other approaches have examined RNNs with richer expressivity, latent-variables for notes, or raw audio synthesis (Boulanger-Lewandowski et al., 2012; Gu et al., 2015; Chung et al., 2015).", "startOffset": 113, "endOffset": 186}, {"referenceID": 20, "context": "MIXER (Mixed Incremental Cross-Entropy Reinforce) (Ranzato et al., 2015) uses BLEU score as a reward signal to gradually introduce a RL loss to a text translation model.", "startOffset": 50, "endOffset": 72}, {"referenceID": 25, "context": "SeqGAN (Yu et al., 2016) applies RL to an RNN by using a discriminator network \u2014 similar to those used in Generative Adversarial Networks (GANs) (Goodfellow et al.", "startOffset": 7, "endOffset": 24}, {"referenceID": 21, "context": "Our work also relates to stochastic optimal control (SOC), in particular the two off-policy methods, \u03a8-learning (Rawlik et al., 2012) and G-learning (Fox et al.", "startOffset": 112, "endOffset": 133}, {"referenceID": 21, "context": "\u03a8-learning (Rawlik et al., 2012) restricts the prior policy to be the policy at the previous iteration and solves the original RL objective with conservative, KL-regularized policy updates, similar to conservative policy gradient methods (Kakade, 2001; Peters et al.", "startOffset": 11, "endOffset": 32}, {"referenceID": 19, "context": ", 2012) restricts the prior policy to be the policy at the previous iteration and solves the original RL objective with conservative, KL-regularized policy updates, similar to conservative policy gradient methods (Kakade, 2001; Peters et al., 2010; Schulman et al., 2015).", "startOffset": 213, "endOffset": 271}, {"referenceID": 22, "context": ", 2012) restricts the prior policy to be the policy at the previous iteration and solves the original RL objective with conservative, KL-regularized policy updates, similar to conservative policy gradient methods (Kakade, 2001; Peters et al., 2010; Schulman et al., 2015).", "startOffset": 213, "endOffset": 271}, {"referenceID": 2, "context": "Recent research has shown that the word2vec embeddings in popular language models trained on standard corpora consistently contain the same harmful biases with respect to race and gender that are revealed by implicit association tests on humans (Caliskan-Islam et al., 2016).", "startOffset": 245, "endOffset": 274}], "year": 2016, "abstractText": "Sequence models can be trained using supervised learning and a next-step prediction objective. This approach, however, suffers from known failure modes. For example, it is notoriously difficult to ensure multi-step generated sequences have coherent global structure. Motivated by the fact that reinforcement learning (RL) can be used to impose arbitrary properties on generated data by choosing appropriate reward functions, in this paper we propose a novel approach for sequence training which combines Maximum Likelihood (ML) and RL training. We refine a sequence predictor by optimizing for some imposed reward functions, while maintaining good predictive properties learned from data. We propose efficient ways to solve this by augmenting deep Q-learning with a cross-entropy reward and deriving novel off-policy methods for RNNs from stochastic optimal control (SOC). We explore the usefulness of our approach in the context of music generation. An LSTM is trained on a large corpus of songs to predict the next note in a musical sequence. This Note-RNN is then refined using RL, where the reward function is a combination of rewards based on rules of music theory, as well as the output of another trained Note-RNN. We show that by combining ML and RL, this RL Tuner method can not only produce more pleasing melodies, but that it can significantly reduce unwanted behaviors and failure modes of the RNN.", "creator": "LaTeX with hyperref package"}}}