{"id": "1702.02676", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Feb-2017", "title": "Energy Saving Additive Neural Network", "abstract": "in recent years, machine learning techniques based on neural networks wherein cognitive hardware become very popular. classical multi - tier natural networks require intensive multiplications no earliest stage. multiplication operation is not an effort efficient operation and computation ignorance surrounds the hardware of the mobile device. in this paper, experts propose its topological energy optimal neural network with the universal approximation property describing a underlying lebesgue integrable functions. dual network, indeed, noisy virtual web, proved still potent for mixed computing. the neural structure is characterized through her novel integer representation definition, matrix formula - versa, that denotes a multiplier - diagonal structure. in dual - e, the \" product \" means two real numbers is defined as the sum of their absolute values, with the diagonal determined by the existence of explicit intersections of the numbers. combined \" output \" is used to construct linear hybrid product in $ r ^ n $. mixed geometric product induces int $ l _ 1 $ 1. a computational relational neural network successfully solves the counting problem. actual calculations yielding mnist dataset argue that the classification performances over explicitly naive compound neural networks are very similar since considering corresponding multi - layer perceptron quantum digital neural networks ( lenet ).", "histories": [["v1", "Thu, 9 Feb 2017 02:02:27 GMT  (768kb,D)", "http://arxiv.org/abs/1702.02676v1", "8 pages (double column), 2 figures, 1 table"]], "COMMENTS": "8 pages (double column), 2 figures, 1 table", "reviews": [], "SUBJECTS": "cs.NE cs.AI cs.LG", "authors": ["arman afrasiyabi", "ozan yildiz", "baris nasir", "fatos t yarman vural", "a enis cetin"], "accepted": false, "id": "1702.02676"}, "pdf": {"name": "1702.02676.pdf", "metadata": {"source": "CRF", "title": "Energy Saving Additive Neural Network", "authors": ["Arman Afrasiyabi", "Ozan Yildiz", "Baris Nasir", "Fatos T. Yarman", "Enis Cetin"], "emails": ["vural}@ceng.metu.edu.tr", "cetin@bilkent.edu.tr"], "sections": [{"heading": null, "text": "I. INTRODUCTION\nArtificial Neural Networks (ANN) have been shown to solve many real world problems, such as, computer vision, natural language processing, recommendation systems and many other fields [1]. Convolutional Neural Network (CNN) architectures achieve human performance in many computer vision problems including image classification tasks [2], [3], [4], [5], [6]. However, the number of parameters in these highperformance networks ranges from millions to billions which require computers capable of handling high computational complexity, high energy and memory size. Consequently, the minimal computational environment for such a network is a desktop computer with a powerful CPU and a dedicated highend GPU.\nRecent developments in VLSI industry create powerful mobile devices which can be used in many practical recognition applications. ANNs are already being used in drones and unmanned aerial vehicles for flight control, path estimation [7], obstacle avoidance and human recognition like abilities [8] (DJI Phantom 4).\nHowever, the current structure of the ANNs, especially, deep networks, prohibits us to implement these algorithms effec-\ntively on mobile devices due to high energy requirements. A typical neuron needs to perform three main tasks to produce an output: (i) an inner product operation involving multiplication of inputs by weights, (ii) addition, and (iii) pass the result of the inner product through an activation function. According to the [9], the multiplication operation is the most energy consuming operation.\nIn this paper, we propose an l1 norm based energy efficient neural network, called additive neural network, that replaces the multiplication operation with a new energy efficient operator, called ef-operator. Instead of multiplications, we use sign multiplications and addition operations in a typical neuron. The sign multiplication of two real numbers is a simple bit operation. An addition consumes relatively lower energy compared to a regular multiplication as shown in [9] in most processors. Our object recognition experiments on MNIST and CIFAR datasets show that we are able to match the performance of the state of the art neural networks without performing any other changes on the ANN structure.\nIn Section 2, we review the related work in energy efficient neural network design. In Section 3, we define a new vector product and the corresponding operator, called ef-operator. In Section 4, we introduce the additive neural network, based on the ef-operator. In Section 5, we made a brief analysis for the existence and convergence problems of the proposed additive neural network. Section 6, provides the experimental results to compare the performance of the proposed additive neural network with multi-layer perceptron and convolutional neural networks. Finally, Section 7 concludes the paper."}, {"heading": "II. RELATED WORK", "text": "Due to large size of the parameter space, artificial neural networks are generally computationally prohibitive and become inefficient in terms of energy consumption and memory allocation. Several approaches from different perspectives have been proposed to design computationally efficient neural network structures to handle high computational complexity.\nWe first introduced the l1 norm based vector product for some image processing applications in 2009 [10], [11], [12], [13]. We also proposed the multiplication free neural network structure in 2015 [14]. However, the recognition rate was\nar X\niv :1\n70 2.\n02 67\n6v 1\n[ cs\n.N E\n] 9\nF eb\n2 01\nbelow 10%of a regular neural network. In this article, we are able to match the performance of regular neural networks by introducing a scaling factor to the l1 norm based vector product and new training methods. We are only 0.034% below the recognition rate of a regular neural network in MNIST dataset.\nOther solutions to energy efficient neural networks include dedicated software for a specific hardware, i.e. neuromorphic devices [15], [16], [17], [18], [19]. Although such approaches reduces energy consumption and memory usage, they require special hardware. Our neural network framework can be implemented in ordinary microprocessors and digital signal processors.\nSarwar et al. used the error resiliency property of neural networks and proposed an approximation to multiplication operation on artificial neurons for energy-efficient neural computing [20]. They approximate the multiplication operation by using the Alphabet Set Multiplier (ASM) and Computation Sharing Multiplication (CSHM) methods. In ASM, the multiplication steps are replaced by shift and add operators which are performed by some alphabet defined by a pre-computer bank. This alphabet is basically a subset of the lower order multiplies of the input. The multiplies that are not exist in the computed subset are approximated by rounding them to nearest existing multiplies. This method reduces the energy consumption since addition and bit shifting operations are much efficient than the multiplication. Therefore, the smaller sized alphabets result in a more efficient architecture. Additionally, they define a special case called Multipler-less Artificial Neuron (MAN), in which there is only one alphabet for each layer. This method provides more energy efficiency with a minimum accuracy loss. It should be noted that this method is applied on test stages, therefore, the training step still uses the conventional method.\nHan et al. proposed a model that reduces both computational cost and storage by feature learning [9]. Their approach consists of three steps. In the first step, they train the network to discriminate important features from redundant ones. Then, they remove the redundant weights, and occasionally neurons, according to a threshold value to obtain a sparser network. This step reduces the test step\u2019s cost. At the final step they retrain the network to fine tune the remaining weights. They state that this step is much more efficient than using the fixed network architecture. They tested the proposed network architecture with ImageNet and VGG-16. The parameter size for these networks reduces between \u00d79 to \u00d713 without any accuracy loss.\nAbdelsalam et al. approximate the tangent activation function using the Discrete Cosine Transform Interpolation Filter (DCTIF) to run the neural networks on FPGA boards efficiently [21]. They state that DCTIF approximation reduces the computational complexity at the activation function calculation step by performing simple arithmetic operations on stored samples of the hyperbolic tangent activation function and input set. The proposed DCTIF architecture divides the activation function into three regions, namely, pass, process and sat-\nuration regions. In the pass region the activation function is approximated by y = x and in the saturation region the activation function is taken as y = 1. The DCTIF takes place in the process region. Parameters of the transformation should be selected carefully to find a balance between computational complexity and accuracy. They have shown that the proposed method achieve significant decrease on energy consumption while keeping the accuracy difference within 1% with conventional method.\nRastegari et al. proposes two methods to provide efficiency on CNNs. The first method, Binary-Weight-Networks, approximates all the weight values to binary values [22]. In this way the network needs less memory (nearly \u00d732). Since the weight values are binary, convolutions can be estimated by only addition and subtraction, which eliminates the main power draining multiplication operation. Therefore, this method both provides energy efficiency and faster computations.\nThe second method proposed by them is called XNORNetworks where both weights and inputs to the convolutional and fully connected layers are approximated by binary values. This extends the earlier proposed method by replacing addition and subtraction operations with XNOR and bitcounting operations. This method offers \u00d758 faster computation on CPU on average. While this method enables us to run CNNs on mobile devices, it costs 12% loss accuracy on average."}, {"heading": "III. A NEW ENERGY EFFICIENT OPERATOR", "text": "Let x and y be two vectors in Rd. We define an new operator, called ef-operator, as the vector product of x and y as follows;\nx y := d\u2211\ni=1\nsign(xi \u00d7 yi)(|xi|+ |yi|), (1)\nwhich can also be represented as follows;\nx y := d\u2211\ni=1\nsign(xi)yi + sign(yi)xi, (2)\nwhere x = [x1, . . . , xd]T ,y = [y1, . . . , yd]T \u2208 Rd. The new vector product operation does not require any multiplications. The operation (xi\u00d7 yi)(|xi|+ |yi|) uses the sign of the ordinary multiplication but it computes the sum of absolute values of xi and yi. ef-operator, , can be implemented without any multiplications. It requires summation, unary minus operation and if statements which are all energy efficient operations.\nOrdinary inner product of two vectors induces the `2 norm. Similarly, the new vector product induces a scaled version of the `1 norm:\nx x = d\u2211\ni=1\nsign(xi \u00d7 xi)(|xi|+ |xi|) = 2||x||1 (3)\nTherefore, the ef-operator performs a new vector product, called `1 product of two vectors, defined in Eq. 1.\nWe use following notation for a compact representation of ef-operation of a vector by a matrix. Let x \u2208 Rd and W \u2208 Rd\u00d7M be two matrices, then the ef-operation between W and x is defined as follows;\nx W := [ x w1 . . . x wM ]T \u2208 RM , (4) where wj is jth column of W for j = 1, 2, . . . , M ."}, {"heading": "IV. ADDITIVE NEURAL NETWORK WITH EF-OPERATOR", "text": "We propose a modification to the representation of a neuron in a classical neural network, by replacing the vector product of the input and weight with the l1 product defined in efoperation. This modification can be applied to a wide range of artificial neural networks, including multi-layer perceptrons (MLP), recurrent neural networks (RNN) and convolutional neural networks (CNN).\nA neuron in a classical neural network is represented by the following activation function;\nf(xW + b), (5)\nwhere W \u2208 Rd\u00d7M , b\u2208RM are weights and biases, respectively, and x \u2208 Rd is the input vector.\nA neuron in the proposed additive neural network is represented by the activation function, where we modify the affine transform by using the ef-operator, as follows;\nf(a (x W) + b), (6)\nwhere is element-wise multiplication operator, W \u2208 Rd\u00d7M , a, b \u2208 RM are weights, scaling coefficients and biases, respectively, and x \u2208 Rd is the input vector. The neural network, where each neuron is represented by the activation function defined in Eq. 6, is called additive neural network.\nComparison of Eq. 5 and Eq. 6 shows that the proposed additive neural networks are obtained by simply replacing the affine scoring function (xW+b) of a classical neural network by the scoring function function defined over the ef-operator, (a (x W) + b). Therefore, most of the neural networks can easily be converted into the additive network by just representing the neurons with the activation functions defined over ef-operator, without modification of the topology and the general structure of the optimization algorithms of the network."}, {"heading": "A. Training the Additive Neural Network", "text": "Standard back-propagation algorithm is applicable to the proposed additive neural network with small approximations. Back-propagation algorithm computes derivatives with respect to current values of parameters of a differentiable function to update its parameters. Derivatives are computed iteratively using previously computed derivatives from upper layers due to chain rule. Activation function, f , can be excluded during these computations for simplicity as its derivation depends on the specific activation function and choice of activation function does not affect the remaining computations. Hence,\nthe only difference in the additive neural network training is the computation of the derivatives of the argument, (a (x W) + b), of the activation function with respect to the parameters, W,a,b, and input, x, as given below:\n\u2202(a (x W) + b) \u2202a = Diag(x W), (7)\n(\u2202a (x W) + b) \u2202b = IM , (8)\n\u2202(a (x W) + b) \u2202xi =  a1(sign(Wi,1) + 2Wi,1\u03b4(xi))... aM (sign(Wi,M ) + 2Wi,M\u03b4(xi))  \u2248a sign(wi),\n(9)\n\u2202(a (x W) + b) \u2202Wi,j =(aj(sign(xi) + 2xi\u03b4(Wi,j)))ej\n\u2248 ajxiej , (10)\nwhere a,b \u2208 RM , and W \u2208 Rd\u00d7M are the parameters of the hidden layer, x \u2208 Rd is the input of the hidden layer, ei \u2208 RM is the ith element of standard basis of RM , wi is the ith column of W, sign(wi) = \u2211M j=1 sign(Wi,j)ej for i = 1, . . . , M , \u03b4 is the dirac delta function. The above derivatives can be easily calculated using the following equation suggested by [23]:\nd\ndx sign(x) = 2\u03b4(x). (11)\nApproximations to derive the above equation are based on the fact that \u03b4(x) = 0, almost surely."}, {"heading": "B. Existence and Convergence of the Solution in Additive Neural Network", "text": "In this section, first, we show that the proposed additive neural network satisfies the universal approximation property of [24], over the space of Lebesgue integrable functions. In other words. there exists solutions computed by the proposed additive network, which is equivalent to the solutions obtained by activation function with classical vector product. Then, we make a brief analysis for the convergence properties of the back propagation algorithm when the vector product is replaced by the ef-operators.\n1) Universal Approximation Property: The universal approximation property of the suggested additive neural network is to be proved for each specific form of the activation function. In the following proposition, we suffice to provide the proofs of universal approximation theorem for linear and ReLU activation functions, only. The proof (if it exits) for a general activation function requires a substantial amount of effort, thus it is left to a future work.\nProposition IV.1. The additive neural network, defined by the neural activation function with identity\nf(a (x W) + b) = a (x W) + b, (12)\nor an activation function with Rectified Linear Unit,\nf(a (x W) + b) = ReLU(a (x W) + b), (13)\nis dense in L1(In).\nIn order to prove the above proposition, the following two lemmas are proved first:\nLemma IV.2. If activation function f is taken as identity (as in Eq. 12), then there exist additive neural networks, defined over the ef-operator, which can compute f(x) = sign(yTx + b), for any y \u2208 Rd and b \u2208 R.\nProof. Constructing an additive neural network, defined over ef-operator, is enough to prove the lemma. We can construct explicitly a sample network for any given y \u2208 Rd and b \u2208 R. One such network consists of four hidden layers for d = 2, this network can easily extended into higher dimensions. Let x be [x0, x1]T and y be [y0, y1]T , then four hidden layers with following parameters can compute f(x) = sign(yTx+ b).\n\u2022 Hidden layer 1, a1 = [y1, y1, y1, y2, y2, y2]\nT , b1 = [0, 0, 0, 0, 0, 0] T ,\nW1 = [ 1 1 2 0 0 0 0 0 0 1 1 2 ] .\n\u2022 Hidden layer 2, a2 = [1], b2 = [b], W2 = [ 1 1 \u22122 1 1 \u22122 ]T . \u2022 Hidden layer 3, a3 = [ 1 1 ]T ,\nb3 = [ 0 0 ]T ,\nW3 = [ 2 1 ] .\n\u2022 Hidden layer 4, a4 = [1], b4 = [0],\nW4 = [ 1 \u22121 ]T .\nThe function computed by this network can be simplified using the fact that, \u2200a, u \u2208 R and \u2200b \u2208 R+,\nsign(a(u+ bsign(u))) = sign(au). (14)\nThen, the hidden layers h1, h2, h3 and h4 can be represented as follows;\nh1 = a1 (x W1) + b1 =  y1(x1 + sign(x1)) y1(x1 + sign(x1)) y1(x1 + 2sign(x1)) y2(x2 + sign(x2)) y2(x2 + sign(x2)) y2(x2 + 2sign(x2))  h2 = a2 (h1 W2) + b2 = yTx+ b\nh3 = a3 (h2 W3) + b3 = [ h2 + 2sign(h2) h2 + sign(h2) ] h4 = a3 (h3 W4) + b4 = sign(yTx+ b)\n(15)\nLemma IV.3. If the function g(x) can be computable with activation function\nf(a (x W) + b) = a (x W) + b, (16)\nthen there exist an additive neural network architectures with a Rectified Linear Unit activation function,\nf(a (x W) + b) = ReLU(a (x W) + b), (17)\nwhich can also compute g(x).\nProof. This lemma can be proven using the following simple observations, \u2022 Observation 1: If\ng(x) = a (x w) + b, (18)\nthen,\n\u2212 g(x) = a\u2032 (x w\u2032) + b\u2032, (19)\nwhere a\u2032 = a, w\u2032 = \u2212w, and b\u2032 = \u2212b. \u2022 Observation 2: If\ng(x) = a (x w) + b, (20)\nthen,\ng(x) = a\u2032\u2032 ((\u2212x) w\u2032\u2032) + b\u2032\u2032, (21)\nwhere a\u2032 = a, w\u2032 = \u2212w, and b\u2032 = b. \u2022 Observation 3: If\ng(x) = a (x w) + b, (22)\nthen,\ng(x) = a\u2032\u2032\u2032 (ReLU(x) w+ReLU(\u2212x) w\u2032\u2032\u2032)+b\u2032\u2032\u2032, (23)\nwhere a\u2032\u2032\u2032 = a, w\u2032\u2032\u2032 = \u2212w, and b\u2032\u2032\u2032 = b. Lets assume that there exists an additive neural network, defined over the ef-operator, using identity as activation function which can compute the function g(x). We can extend each\nlayer using Observation 1, to compute both g(x) and \u2212g(x). Afterwards, we can replace zeros on the weights introduced during previous extension on each layer using Observation 3, to replace the activation function with ReLU. This works, because either ReLU(x) or ReLU(\u2212x) is 0. The modified network is an additive neural network with ReLU activation function, which can compute the function g(x).\nProof of Proposition IV.1. This can be shown by the universal approximation theorem for bounded measurable sigmoidal functions [24]. This theorem states that finite sums of the form\nG(x; {\u03b1i}Ni=1, {yi}Ni=1, {\u03b8i}Ni=1) = N\u2211 i=1 \u03b1i\u03c3(y T i x+\u03b8i), (24)\nare dense in L1(In), where \u03b1i, \u03b8i \u2208 R and x,yi \u2208 Rd for i = 1, 2, . . . , N . It can be easily shown that sign function is a bounded sigmoidal function. Lemma IV.2 shows that, if the activation function is taken as identity, then there exist networks which compute sign(yTi x+\u03b8i) for i = 1, 2 . . . , N . Lemma IV.3 shows that there are equivalent networks using ReLU as the activation function which compute the same functions. These networks can be combined with concatenation of layers of the additive neural networks to a single network. Also, proposed architecture contains fully connected linear layer at the output, and this layer can compute superposition of the computed sign functions yielding G(x). Since G(x) can be computable by the additive neural networks, and G(x) functions are dense in L1(In), then functions computed by the additive neural networks are also dense in L1(In).\n2) Computational efficiency: The proposed additive neural network contains more parameters then the classical neuron representation in MLP architectures. However, each hidden layer can be computed using considerably less number of\nmultiplication operator. A classical neural network, represented by the activation function f(xW + b), containing M neurons with d dimensional input, requires d \u00d7M many multiplication operator to compute xW + b. On the other hand, the additive neural network, represented by the activation function, f(a (x W)+b) with the same number of neurons and input space requires M many multiplication operator to compute a (x W) + b. This reduction on number of multiplications is especially important when input size is large or hidden layer contains large number of neurons. If activation function is taken as either identity or ReLU, then output of this layer can be computed without any complex operations, and efficiency of the network can be substantially increased. Multiplications can be removed entirely, if scaling coefficients, a are taken as 1. However, these networks may not represent some functions, and consequently may perform poorly on some datasets.\n3) Optimization problems: Due to the sign operation performed in each neuron, the ef-operator creates a bunch of hyperoctants in the cost function at each layer of the additive neural network. Therefore, the local minima computed at each layer, depends on the specific hyperoctant for a set of weights. The change in the signs results in a jump from a hyperoctant to another one.\nFor some datasets, some of the local minima may lie on the boundaries of the hyperoctants. Since the hyperoctants are open sets, this may leave some hyperoctands with nonexisting local minima. A gradient based search algorithm may update the weights such that the algorithm converges to the local minima on the boundary. If the step size and number of epochs are increased, then the updated weights leave the current hyperoctant without converging to a local minima on the boundary and new set of weights make the algorithm to converge to a local minima in another hyperoctant. However, the new hyperoctant may have the same problem."}, {"heading": "V. EXPERIMENTAL RESULTS", "text": "Multi-layer perceptron (MLP) [25] is used to measure the ability of the proposed additive neural network, in machine learning problems. MLP consists of a single input and output layer and multiple hidden layers. The size and the number of hidden layers can vary a great deal, depending on the problem domain. In this research, we use one, two and three hidden layers, respectively, in two different classification problems, namely XOR problem and character recognition of MNIST dataset. The input layer receives pattern sample x \u2208 RD to the network.\nOn the other hand, the hidden layer(s) contains biological inspired units called neurons which learns a new representations from the input patterns. Each neuron consists of a scoring function and an activation function. As discussed in the Section IV, the scoring function is an affine transform in the form of (xW+b) in the classic neural network where x and b are the parameters. In this study, we call the widely used classic scoring function (xW+b) as c-operator. As discussed\nin the Section III and IV, the proposed score function, efoprerator, is an energy efficient alternative of the classical vector product.\nIn addition to the score function, each neuron of a hidden layer also has an activation function that makes the network nonlinear. Several activation functions such as sigmoid, hyperbolic tangent (Tanh) and rectified linear unit (ReLU) functions have been used as the activation function. While some studies such as [3] have shown that ReLU outperform the others in most of the cases, we also examined sigmoid and Tanh in the following experiments. Finally, the last layer of MLP, called output layer, maps the final hidden layer to the scores of the classes by using its own score function. We used both the classical c-operator and the new ef-operator at the output layer to make the final decision.\nThe aim of MLP is to find the optimal values for parameters W and b using backpropagation [26] and optimization algorithms such as stochastic gradient descent (SGD). In order to implement the network, Tensorflow [27], a python library for numeric computation, is used.\nIn the first experiment, we examine the ability of additive neural network to partition a simple nonlinear space, solving the XOR problem. We compare the classical MLP with affine scoring function and additive neural network with ef-operator. Since a single hidden layer MLP with c-operator can solve XOR problem, we used one hidden layer in both classical and the proposed architectures. Mean squared error is used as cost function to measure the amount of loss in training phase of the network, and we fixed the number of neurons in the hidden layer to 10.\nThe additive neural network with ef-operator could successfully solve the XOR problem and reached to 100% accuracy in this problem. We also investigate the rate of changes inloss changes at each epoch. It is also notable that some of the runs that are shown by colors, do not reach to minimum values in 1000 epochs. This shows that more epochs is needed in some runs. Generally, the number of epochs depends on learning rate and initialization condition, and the final epoch can be determined by some stopping criteria. However, in this study, we are only interested to see the variations in the cost; therefore, we fixed the number of epochs to 1000.\nLeft and right sides of Fig. 1 show the change of loss in\nthe MLP using c-operator and ef-operator, respectively, with ReLU as the activation function. We rerun the network for 200 times in 1000 epochs, and used k-fold cross validation to specify the learning-rate parameter of SGD. Each color of the plots shows the variations in loss or cost value (x axis) across the epochs (y axis) in one specific run of the network. As the figure shows, the cost value of the network with our proposed ef-operator decreases along the epochs and acts similar to classical affine operator, called c-operator.\nIn the second experiment, we classified the digits of MNIST dataset of [2] which consists of handwritten examples to examine our proposed additive neural network in multiclass classification problem. MNIST dataset consists of 30,000 training samples and 5,000 test data. Each example is an image of a digit from 0 to 9. One-hot code is used to encode the class labels. Each example is an image of size 28 \u00d7 28, and each image is concatenated in a single vector to input the network. Therefore, the size of the input layer of the network is 784. We used cross-entropy based cost function and SGD to train the network. We used 150 number of examples in each iteration of SGD. In other words, the batch size is equal to 150.\nTable I contains the classification accuracies of the MLP architecture using three activation functions: ReLU, Tanh and Sigmoid with four different learning rates. As the table shows, our additive neural network over ef-operator reaches to the performance of classic MLP with c-operator. In other words, with a slightly sacrificing the classification performance we can use the proposed ef-operator which much more energyefficient. Note that, we have not used any regularization methods such as drop out used by Krizhevsky et al. [3], because we simply aim to show that our proposed ef-operator gives the learning ability to the deep MLP. Also Table. I shows that maximum of the performances have been obtained using ReLU activation function. We are also interested to see the variations in the classification performances during the epochs and along the epochs.\nWith addition to MLP, we have used the proposed efoperator to learn the parameters of LeNet-5 [2] to classifying MNIST dataset. Table I contains the classification accuracy of LeNet-5 architecture that contains two conventional and one fully connected layer. We trained the network with SGD and cross-entropy based cost functions as we did on MLP case. It\nshould be noted that we have used the conventional c-operator in the output layer of both MLP and LeNet-5 architectures. As shown in the table, the proposed ef-operator catches up the coperator with a small amount of loss.\nFigure 2 shows the results of the classification accuracies obtained from MLP based on our proposed ef-operator and traditionally used c-operator. The performances (shown in the y axis of the sub figures) obtained in successive epochs (shown in the x axis of the sub figures). In each epoch, the network is trained with all of the training examples. The plots of the subfigures are obtained using four different learning rates: 0.1, 0.005, 0.001 and 0.0005. Subplots (a) and (b) at the left of figure shows the results of c-operator in MLP with 2 and 3 hidden layers respectively, and subplots (c) and (d) shows the results of our proposed ef-operator. As Figure 2 shows, our operator effectively increases the classification performance as the number of epochs increases and reaches nearly to the original linear function."}, {"heading": "VI. CONCLUSION", "text": "In this study, we propose an energy efficient additive neural network architecture. The core of this architecture is the lasso norm based ef-operator that eliminates the energyconsumption multiplications in the conventional architecture. We have examined the universal approximation property of the proposed architecture over the space of Lebesgue integrable functions and test it in real world problems. We showed that ef-operator can successfully solve the nonlinear XOR problem. Moreover, we have observed that with sacrificing 0.39% and 0.69% accuracy, our proposed network can be used in the multilayer perceptron (MLP) and conventional neural network respectively to classify MNIST dataset. As a future work, we plan to test the proposed architecture in the state-of-the-art deep neural networks."}, {"heading": "ACKNOWLEDGMENT", "text": "A. Enis Cetin\u2019s work was funded in part by a grant from Qualcomm."}], "references": [{"title": "Deep learning", "author": ["Y. LeCun", "Y. Bengio", "G. Hinton"], "venue": "Nature, vol. 521, no. 7553, pp. 436444", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2015}, {"title": "Gradient-based learning applied to document recognition", "author": ["Y. LeCun", "L. Bottou", "Y. Bengio", "P. Haffner"], "venue": "Proceedings of the IEEE, vol. 86, no. 11, pp. 22782324", "citeRegEx": "2", "shortCiteRegEx": null, "year": 1998}, {"title": "Imagenet classification with deep convolutional neural networks, in Advances in neural information processing", "author": ["A. Krizhevsky", "I. Sutskever", "G.E. Hinton"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2012}, {"title": "Very deep convolutional networks for large-scale image recognition", "author": ["K. Simonyan", "A. Zisserman"], "venue": "arXiv preprint arXiv:1409.1556,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2014}, {"title": "Deepface: Closing the gap to human-level performance in face verification", "author": ["Y. Taigman", "M. Yang", "M. Ranzato", "L. Wolf"], "venue": "Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition,2014,", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "Going deeper with convolutions", "author": ["C. Szegedy", "W. Liu", "Y. Jia", "P. Sermanet", "S. Reed", "D. Anguelov", "D. Erhan", "V. Vanhoucke", "A. Rabinovich"], "venue": "Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Nonlinear adaptive flight control using neural networks", "author": ["A.J. Calise", "R.T. Rysdyk"], "venue": "IEEE control systems, vol. 18, no. 6, pp. 1425", "citeRegEx": "7", "shortCiteRegEx": null, "year": 1998}, {"title": "D", "author": ["A. Giusti", "J. Guzzi"], "venue": "C. Cires an, F.-L. He, J. P. Rodr guez, F. Fontana, M. Faessler, C. Forster, J. Schmidhuber, G. Di Caro et al., A machine learning approach to visual perception of forest trails for mobile robots, IEEE Robotics and Automation Letters, vol. 1, no. 2, pp. 661667", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2016}, {"title": "Learning both weights and connections for efficient neural network", "author": ["S. Han", "J. Pool", "J. Tran", "W. Dally"], "venue": "Advances in Neural Information Processing Systems", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2015}, {"title": "Image description using a multiplier-less operator", "author": ["H. Tuna", "I. Onaran", "A.E. Cetin"], "venue": "IEEE Signal Processing Letters, vol. 16, no. 9, pp. 751753", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2009}, {"title": "A multiplication-free framework for signal processing and applications in biomedical image analysis", "author": ["A. Suhre", "F. Keskin", "T. Ersahin", "R. Cetin-Atalay", "R. Ansari", "A.E. Cetin"], "venue": "2013 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP). IEEE", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2013}, {"title": "Co-difference based object tracking algorithm for infrared videos", "author": ["H.S. Demir", "A.E. Cetin"], "venue": "2016 IEEE International Conference on Image Processing (ICIP). IEEE", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2016}, {"title": "Multiplication-free neural networks, in 2015", "author": ["C.E. Akbas", "A. Bozkurt", "A.E. Cetin", "R. Cetin-Atalay", "A. Uner"], "venue": "23th Signal Processing and Communications Applications Conference (SIU). IEEE,", "citeRegEx": "14", "shortCiteRegEx": "14", "year": 2015}, {"title": "D", "author": ["S.K. Esser", "P.A. Merolla", "J.V. Arthur", "A.S. Cassidy", "R. Appuswamy", "A. Andreopoulos", "D.J. Berg", "J.L. McKinstry", "T. Melano"], "venue": "R. Barch et al., Convolutional networks for fast, energy-efficient neuromorphic computing, arXiv preprint arXiv:1603.08270", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2016}, {"title": "Spinnaker: A 1-w 18-core system-on-chip for massively-parallel neural network simulation", "author": ["E. Painkras", "L.A. Plana", "J. Garside", "S. Temple", "F. Galluppi", "C. Patterson", "D.R. Lester", "A.D. Brown", "S.B. Furber"], "venue": "IEEE Journal of Solid-State Circuits, vol. 48, no. 8, pp. 19431953", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2013}, {"title": "A", "author": ["T. Pfeil"], "venue": "Gr ubl, S. Jeltsch, E. M uller, P. M uller, M. A. Petrovici, M. Schmuker, D. Br uderle, J. Schemmel, and K. Meier, Six networks on a universal neuromorphic computing substrate, arXiv preprint arXiv:1210.7083", "citeRegEx": "17", "shortCiteRegEx": null, "year": 2012}, {"title": "An event-based neural network architecture with an asynchronous programmable synaptic memory", "author": ["S. Moradi", "G. Indiveri"], "venue": "IEEE transactions on biomedical circuits and systems, vol. 8, no. 1, pp. 98107", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2014}, {"title": "A 65k-neuron 73-mevents/s 22-pj/event asynchronous micro-pipelined integrate-andfire array transceiver", "author": ["J. Park", "S. Ha", "T. Yu", "E. Neftci", "G. Cauwenberghs"], "venue": "2014 IEEE Biomedical Circuits and System Conference (BioCAS) Proceedings. IEEE", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2014}, {"title": "Multiplierless artificial neurons exploiting error resiliency for energy-efficient neural computing", "author": ["S.S. Sarwar", "S. Venkataramani", "A. Raghunathan", "K. Roy"], "venue": "2016 Design, Automation & Test in Europe Conference & Exhibition (DATE). IEEE", "citeRegEx": "20", "shortCiteRegEx": null, "year": 2016}, {"title": "Accurate and efficient hyperbolic tangent activation function on fpga using the dct interpolation filter", "author": ["A.M. Abdelsalam", "J. Langlois", "F. Cheriet"], "venue": "arXiv preprint arXiv:1609.07750", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2016}, {"title": "Xnor-net: Imagenet classification using binary convolutional neural networks", "author": ["M. Rastegari", "V. Ordonez", "J. Redmon", "A. Farhadi"], "venue": "arXiv preprint arXiv:1603.05279", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2016}, {"title": "The Fourier transform and its applications", "author": ["R.N. Bracewell"], "venue": "3rd ed., ser. McGraw-Hill series in electrical and computer engineering; Circuits and systems. McGraw Hill", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2000}, {"title": "Approximation by superpositions of a sigmoidal function", "author": ["G. Cybenko"], "venue": "Mathematics of control, signals and systems, vol. 2, no. 4, pp. 303314", "citeRegEx": "24", "shortCiteRegEx": null, "year": 1989}, {"title": "Pattern Recognition and Machine Learning, Vol. I", "author": ["C.M. Bishop", "Ed"], "venue": null, "citeRegEx": "25", "shortCiteRegEx": "25", "year": 2007}, {"title": "D", "author": ["H.G.E. Rumelhart"], "venue": "E. and R. J. Williams, Learning representations byback-propagating errors, Nature, pp. 323, 533536", "citeRegEx": "26", "shortCiteRegEx": null, "year": 1986}, {"title": "D", "author": ["M. Abadi", "A. Agarwal", "P. Barham", "E. Brevdo", "Z. Chen", "C. Citro", "G.S. Corrado", "A. Davis", "J. Dean", "M. Devin", "S. Ghemawat", "I. Goodfellow", "A. Harp", "G. Irving", "M. Isard", "Y. Jia", "R. Jozefowicz", "L. Kaiser", "M. Kudlur", "J. Levenberg"], "venue": "Man e, R. Monga, S. Moore, D. Murray, C. Olah, M. Schuster, J. Shlens, B. Steiner, I. Sutskever, K. Talwar, P. Tucker, V. Vanhoucke, V. Vasudevan, F. Vi egas, O. Vinyals, P. Warden, M. Wattenberg, M. Wicke, Y. Yu, and X. Zheng, TensorFlow: Large-scale machine learning on heterogeneous systems", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2015}], "referenceMentions": [{"referenceID": 0, "context": "Artificial Neural Networks (ANN) have been shown to solve many real world problems, such as, computer vision, natural language processing, recommendation systems and many other fields [1].", "startOffset": 184, "endOffset": 187}, {"referenceID": 1, "context": "Convolutional Neural Network (CNN) architectures achieve human performance in many computer vision problems including image classification tasks [2], [3], [4], [5], [6].", "startOffset": 145, "endOffset": 148}, {"referenceID": 2, "context": "Convolutional Neural Network (CNN) architectures achieve human performance in many computer vision problems including image classification tasks [2], [3], [4], [5], [6].", "startOffset": 150, "endOffset": 153}, {"referenceID": 3, "context": "Convolutional Neural Network (CNN) architectures achieve human performance in many computer vision problems including image classification tasks [2], [3], [4], [5], [6].", "startOffset": 155, "endOffset": 158}, {"referenceID": 4, "context": "Convolutional Neural Network (CNN) architectures achieve human performance in many computer vision problems including image classification tasks [2], [3], [4], [5], [6].", "startOffset": 160, "endOffset": 163}, {"referenceID": 5, "context": "Convolutional Neural Network (CNN) architectures achieve human performance in many computer vision problems including image classification tasks [2], [3], [4], [5], [6].", "startOffset": 165, "endOffset": 168}, {"referenceID": 6, "context": "ANNs are already being used in drones and unmanned aerial vehicles for flight control, path estimation [7], obstacle avoidance and human recognition like abilities [8] (DJI Phantom 4).", "startOffset": 103, "endOffset": 106}, {"referenceID": 7, "context": "ANNs are already being used in drones and unmanned aerial vehicles for flight control, path estimation [7], obstacle avoidance and human recognition like abilities [8] (DJI Phantom 4).", "startOffset": 164, "endOffset": 167}, {"referenceID": 8, "context": "According to the [9], the multiplication operation is the most energy consuming operation.", "startOffset": 17, "endOffset": 20}, {"referenceID": 8, "context": "An addition consumes relatively lower energy compared to a regular multiplication as shown in [9] in most processors.", "startOffset": 94, "endOffset": 97}, {"referenceID": 9, "context": "We first introduced the l1 norm based vector product for some image processing applications in 2009 [10], [11], [12], [13].", "startOffset": 100, "endOffset": 104}, {"referenceID": 10, "context": "We first introduced the l1 norm based vector product for some image processing applications in 2009 [10], [11], [12], [13].", "startOffset": 106, "endOffset": 110}, {"referenceID": 11, "context": "We first introduced the l1 norm based vector product for some image processing applications in 2009 [10], [11], [12], [13].", "startOffset": 118, "endOffset": 122}, {"referenceID": 12, "context": "We also proposed the multiplication free neural network structure in 2015 [14].", "startOffset": 74, "endOffset": 78}, {"referenceID": 13, "context": "neuromorphic devices [15], [16], [17], [18], [19].", "startOffset": 21, "endOffset": 25}, {"referenceID": 14, "context": "neuromorphic devices [15], [16], [17], [18], [19].", "startOffset": 27, "endOffset": 31}, {"referenceID": 15, "context": "neuromorphic devices [15], [16], [17], [18], [19].", "startOffset": 33, "endOffset": 37}, {"referenceID": 16, "context": "neuromorphic devices [15], [16], [17], [18], [19].", "startOffset": 39, "endOffset": 43}, {"referenceID": 17, "context": "neuromorphic devices [15], [16], [17], [18], [19].", "startOffset": 45, "endOffset": 49}, {"referenceID": 18, "context": "used the error resiliency property of neural networks and proposed an approximation to multiplication operation on artificial neurons for energy-efficient neural computing [20].", "startOffset": 172, "endOffset": 176}, {"referenceID": 8, "context": "proposed a model that reduces both computational cost and storage by feature learning [9].", "startOffset": 86, "endOffset": 89}, {"referenceID": 19, "context": "approximate the tangent activation function using the Discrete Cosine Transform Interpolation Filter (DCTIF) to run the neural networks on FPGA boards efficiently [21].", "startOffset": 163, "endOffset": 167}, {"referenceID": 20, "context": "The first method, Binary-Weight-Networks, approximates all the weight values to binary values [22].", "startOffset": 94, "endOffset": 98}, {"referenceID": 21, "context": "The above derivatives can be easily calculated using the following equation suggested by [23]:", "startOffset": 89, "endOffset": 93}, {"referenceID": 22, "context": "In this section, first, we show that the proposed additive neural network satisfies the universal approximation property of [24], over the space of Lebesgue integrable functions.", "startOffset": 124, "endOffset": 128}, {"referenceID": 0, "context": "\u2022 Hidden layer 2, a2 = [1], b2 = [b],", "startOffset": 23, "endOffset": 26}, {"referenceID": 0, "context": "a3 = [ 1 1 ]T ,", "startOffset": 5, "endOffset": 12}, {"referenceID": 0, "context": "a3 = [ 1 1 ]T ,", "startOffset": 5, "endOffset": 12}, {"referenceID": 1, "context": "W3 = [ 2 1 ] .", "startOffset": 5, "endOffset": 12}, {"referenceID": 0, "context": "W3 = [ 2 1 ] .", "startOffset": 5, "endOffset": 12}, {"referenceID": 0, "context": "\u2022 Hidden layer 4, a4 = [1], b4 = [0],", "startOffset": 23, "endOffset": 26}, {"referenceID": 22, "context": "This can be shown by the universal approximation theorem for bounded measurable sigmoidal functions [24].", "startOffset": 100, "endOffset": 104}, {"referenceID": 23, "context": "Multi-layer perceptron (MLP) [25] is used to measure the ability of the proposed additive neural network, in machine learning problems.", "startOffset": 29, "endOffset": 33}, {"referenceID": 2, "context": "While some studies such as [3] have shown that ReLU outperform the others in most of the cases, we also examined sigmoid and Tanh in the following experiments.", "startOffset": 27, "endOffset": 30}, {"referenceID": 24, "context": "The aim of MLP is to find the optimal values for parameters W and b using backpropagation [26] and optimization algorithms such as stochastic gradient descent (SGD).", "startOffset": 90, "endOffset": 94}, {"referenceID": 25, "context": "In order to implement the network, Tensorflow [27], a python library for numeric computation, is used.", "startOffset": 46, "endOffset": 50}, {"referenceID": 1, "context": "In the second experiment, we classified the digits of MNIST dataset of [2] which consists of handwritten examples to examine our proposed additive neural network in multiclass classification problem.", "startOffset": 71, "endOffset": 74}, {"referenceID": 2, "context": "[3], because we simply aim to show that our proposed ef-operator gives the learning ability to the deep MLP.", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "With addition to MLP, we have used the proposed efoperator to learn the parameters of LeNet-5 [2] to classifying MNIST dataset.", "startOffset": 94, "endOffset": 97}], "year": 2017, "abstractText": "In recent years, machine learning techniques based on neural networks for mobile computing become increasingly popular. Classical multi-layer neural networks require matrix multiplications at each stage. Multiplication operation is not an energy efficient operation and consequently it drains the battery of the mobile device. In this paper, we propose a new energy efficient neural network with the universal approximation property over space of Lebesgue integrable functions. This network, called, additive neural network, is very suitable for mobile computing. The neural structure is based on a novel vector product definition, called ef-operator, that permits a multiplierfree implementation. In ef-operation, the \u201dproduct\u201d of two real numbers is defined as the sum of their absolute values, with the sign determined by the sign of the product of the numbers. This \u201dproduct\u201d is used to construct a vector product in R . The vector product induces the l1 norm. The proposed additive neural network successfully solves the XOR problem. The experiments on MNIST dataset show that the classification performances of the proposed additive neural networks are very similar to the corresponding multi-layer perceptron and convolutional neural networks (LeNet).", "creator": "LaTeX with hyperref package"}}}