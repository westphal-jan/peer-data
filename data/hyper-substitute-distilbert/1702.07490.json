{"id": "1702.07490", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Feb-2017", "title": "Online Meta-learning by Parallel Algorithm Competition", "abstract": "the efficiency of learning reliability challenges varies critically whether a hardware meta - parameters providing modulates the conceptual updates and cognitive trade - off between hardware y comprehension. the benefit of the cyber - sample is entirely open question in reinforcement learning, which arguably largely split more into an issue of utilizing the term as electronic computational learning in high - dimensions state spaces. the restricted learning span in domains or as its 2600 monkey games makes essentially unnecessary distinctions between correct comprehensive puzzles interpreting appropriate meta - parameter values. we propose investigating noisy meta - simulated by collaborative algorithm competition ( ompac ) method. considering the ompac method, several instances of digital reinforcement learning methods are run in parallel with size differences exceeding the scale values of the meta - parameters. after a fixed distribution in episodes, the behaviors come selected based on statistical confidence in the task fore hand. before continuing the learning, gaussian factor decay added to the meta - parameters with relatively predefined probability. teams validate the ompac method by improving the put - de - the - art algorithms in stochastic sz - tetris and in sigma tetris dimension 3 guaranteed, higher $ \\ yuan $ 180, board, sampling 31 % and 84 %, respectively, and experimenting using the results for deep sarsa ( $ \\ lambda $ ) agents in three atari 650 clones covering 14 % 1 near. the experiments also examine imperfect performance in the optimization method to provide certain meta - parameters leading to the learning progress in robotics competitions.", "histories": [["v1", "Fri, 24 Feb 2017 08:25:23 GMT  (77kb)", "http://arxiv.org/abs/1702.07490v1", "15 pages, 10 figures. arXiv admin note: text overlap witharXiv:1702.03118"]], "COMMENTS": "15 pages, 10 figures. arXiv admin note: text overlap witharXiv:1702.03118", "reviews": [], "SUBJECTS": "cs.LG", "authors": ["stefan elfwing", "eiji uchibe", "kenji doya"], "accepted": false, "id": "1702.07490"}, "pdf": {"name": "1702.07490.pdf", "metadata": {"source": "CRF", "title": "Online Meta-learning by Parallel Algorithm Competition", "authors": ["Stefan Elfwing", "Eiji Uchibe", "Kenji Doya"], "emails": ["elfwing@atr.jp", "uchibe@atr.jp", "doya@oist.jp"], "sections": [{"heading": null, "text": "ar X\niv :1\n70 2.\n07 49\n0v 1\n[ cs\n.L G\n] 2\n4 Fe"}, {"heading": "1 Introduction", "text": "The efficiency of reinforcement learning (Sutton and Barto, 1998) algorithms depends critically on a few meta-parameters that modulates the learning updates and the trade-off between exploration for new knowledge and exploitation of existing knowledge. Ideally, these meta-parameters should not be fixed during learning. Instead, they should be adapted according to the current learning progress in the task at hand. The adaptation of the meta-parameters is an open question in reinforcement learning, which arguably has become more of an issue recently with the success of deep reinforcement learning in tasks with high-dimensional state spaces, such as ability of the DQN algorithm to achieve human-level\nperformance in many Atari 2600 video games (Mnih et al., 2015). The complexity of and the long learning times in such tasks, where the episode length often increases with improvements in performance, makes it not feasible to perform comprehensive grid-like searches of appropriate meta-parameter values.\nWe propose the Online Meta-learning by Parallel Algorithm Competition (OMPAC) method. The idea behind OMPAC is simple. Run several instances of a reinforcement algorithm in parallel, with small differences in the initial values of the meta-parameters. After a fixed number of episodes, the instances are selected based on their performance in the task at hand. Before continuing the learning, Gaussian noise is added to the meta-parameters with a predefined probability. The OMPAC method is similar to a Lamarckian (Lamarck, 1809) evolutionary process without the crossover operator, but with two main differences compared with standard applications of artificial evolution. First, the goal is not to find the parameters that represent the optimal solutions directly, instead the goal is to find the meta-parameters that enable reinforcement learning agents to learn more efficiently. Second, the goal is not to find the best set of fixed parameters, instead the goal is to adapt the values of the meta-parameters according to the current learning progress. Importantly, the OMPAC method differentiates between the objective of the learning (i.e., maximize the expected accumulated discounted rewards, in the cases of value-based reinforcement learning algorithms used in this study) and the overall goal of the task which is used as the selection criteria for continued learning.\nThe studies most related to our research have used a Darwinian evolutionary approach (i.e., the learning started from scratch in each generation) to find appropriate fixed values of the meta-parameters (Unemi et al., 1994; Eriksson et al., 2003; Elfwing et al., 2008, 2011). Schweighofer and Doya (2003) proposed a meta-learning method based on the mid-term and the long-term running averages of the reward, and Kobayashi et al. (2009) proposed a metalearning method based on the absolute values of the TD-errors. Both methods require the setting of meta-meta-parameters, which is a non-trivial task. Proposed approaches for adapting individual meta-parameters include the incremental delta bar delta method (Sutton, 1992) to tune \u03b1, a method based on variance of the action value function (Ishii et al., 2002) to tune the inverse temperature \u03b2 in softmax action selection, and a Bayesian model averaging approach (Downey and Sanner, 2010) and the Adaptive \u03bb Least-Squares Temporal Difference Learning method (Mann et al., 2016) to tune \u03bb. Fran\u00e7ois-Lavet et al. (2015) demonstrated that the performance of DQN could be improved in some Atari 2600 games by a rather ad-hoc tuning scheme that increase \u03b3 (\u03b3 \u2190 min(0.02+0.98\u03b3, 0.99)) and decrease \u03b1 (\u03b1 \u2190 0.98\u03b1).\nWe validate the OMPAC method in stochastic SZ-Tetris and in standard Tetris with a smaller, 10\u00d710, board, and in the Atari 2600 domain. To be able to directly compare the learning performance with and without the OMPAC method, we use the same experimental setups as in our earlier study (Elfwing et al., 2017), where we proposed the sigmoid-weighted linear (SiL) unit and its derivative function (dSiL) as activation functions for neural network function approximation in reinforcement learning. In both SZ-Tetris and 10\u00d710 Tetris, we train shallow neural network agents with dSiL units in the hidden layer and improve the\nstate-of-the-art scores by 31% and 84%, respectively. In three Atari 2600 games, we train deep neural network agents with SiL units in the convolutional layers and dSiL units in the hidden fully-connected layer and improve the performance by 62% or more. Finally, we demonstrate the ability of the OMPAC method to achieve efficient learning even if the initial values of the meta-parameters are not suitable for the task at hand."}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 TD(\u03bb) and Sarsa(\u03bb)", "text": "In this study, we use two reinforcement learning algorithms: TD(\u03bb) (Sutton, 1988) and Sarsa(\u03bb) (Rummery and Niranjan, 1994; Sutton, 1996). TD(\u03bb) learns an estimate of the state-value function, V \u03c0 , and Sarsa(\u03bb) learns an estimate of the action-value function, Q \u03c0\n, while the agent follows policy \u03c0. If the approximated value functions, Vt \u2248 V \u03c0 and Qt \u2248 Q \u03c0\n, are parameterized by the parameter vector \u03b8t, then the gradient-descent learning update of the parameters is computed by\n\u03b8t+1 = \u03b8t + \u03b1\u03b4tet, (1)\nwhere the TD-error, \u03b4t, is \u03b4t = rt + \u03b3Vt(st+1)\u2212 Vt(st) (2)\nfor TD(\u03bb) and \u03b4t = rt + \u03b3Qt(st+1, at+1)\u2212Qt(st, at) (3)\nfor Sarsa(\u03bb). The eligibility trace vector, et, is\net = \u03b3\u03bbet\u22121 +\u2207\u03b8tVt(st), e0 = 0, (4)\nfor TD(\u03bb) and et = \u03b3\u03bbet\u22121 +\u2207\u03b8tQt(st, at), e0 = 0, (5)\nfor Sarsa(\u03bb). Here, st is the state at time t, at is the action selected at time t, rt is the reward for taking action at in state st, \u03b1 is the learning rate, \u03b3 is the discount factor of future rewards, \u03bb is the trace-decay rate, and \u2207\u03b8tVt and \u2207\u03b8tQt are the vectors of partial derivatives of the function approximators with respect to each component of \u03b8t."}, {"heading": "2.2 Sigmoid-weighted Linear Units", "text": "We recently proposed (Elfwing et al., 2017) the sigmoid-weighted linear (SiL) unit and its derivative function (dSiL) as activation functions for neural network function approximation in reinforcement learning. The activation ak of SiL unit k for an input vector s is computed by the sigmoid function, \u03c3(\u00b7), multiplied by its input, zk:\nak(s) = zk\u03c3(zk), (6) zk(s) = \u2211\ni\nwiksi + bk, (7)\n\u03c3(x) = 1\n1 + e\u2212x . (8)\nHere, wik is the weight connecting state si and hidden unit k, bk is the bias weight for hidden unit k. The activation of the dSiL unit is computed by:\nak(s) = \u03c3(zk) (1 + zk(1\u2212 \u03c3(zk))) . (9)\nThe derivative of the activation function of the SiL unit, used for gradient-descent learning updates of the neural network weight parameters (see Equations 4 and 5), is given by\n\u2207wikak(s) = \u03c3(zk) (1 + zk(1\u2212 \u03c3(zk))) si, (10)\nand the derivative of the activation function of the dSiL unit is given by\n\u2207wikak(s) = \u03c3(zk)(1 \u2212 \u03c3(zk))(2 +\nzk(1\u2212 \u03c3(zk))\u2212 zk\u03c3(zk))si. (11)"}, {"heading": "2.3 Action selection", "text": "We use softmax action selection with a Boltzmann distribution in all experiments. For Sarsa(\u03bb), the probability to select action a in state s is defined as\n\u03c0(a|s) = exp(Q(s, a)/\u03c4 ) \u2211\nb exp(Q(s, b)/\u03c4 ) . (12)\nFor the model-based TD(\u03bb) algorithm, we select an action a in state s that leads to the next state s\u2032 with a the probability defined as\n\u03c0(a|s) = exp(V (f(s, a))/\u03c4 ) \u2211\nb exp(V (f(s, b))/\u03c4 ) . (13)\nHere, f(s, a) returns the next state s\u2032 according to the state transition dynamics and \u03c4 is the temperature that controls the trade-off between exploration and exploitation. We used hyperbolic discounting of the temperature and the temperature was decreased after every episode i:\n\u03c4(i) = \u03c40\n1 + \u03c4ki . (14)\nHere, \u03c40 is the initial temperature and \u03c4k controls the rate of discounting."}, {"heading": "3 The OMPAC method", "text": "In this section, we present the OMPAC (Online Meta-learning by Parallel Algorithm Competition) method. Algorithm 1 shows the pseudo-code for the OMPAC method with Sarsa(\u03bb) and softmax action selection. Several, N , instances of the algorithm are run in parallel, with small differences in meta-parameter values. After a fixed number of episodes, the instances are selected for continued learning based on their performance in the task. The OMPAC\nAlgorithm 1 OMPAC with Sarsa(\u03bb) and softmax action selection Initialize matrix of parameter vectors, \u0398 = [\u03b81, . . . ,\u03b8i, . . . ,\u03b8N ]. Initialize matrix of meta-parameter vectors, \u03a8 = [\u03c81, . . . ,\u03c8i, . . . ,\u03c8N ]. for each generation do Initialize vector of scores F \u2190 0 parfor i = 1 to N do {Parallel for loop}\nfor each episode of the generation do Get initial state si and select action ai \u223c \u03c0(\u00b7|si). {Softmax action selection} ei \u2190 0 while si is not terminal do Take action ai, observe reward ri, score fi, and next state s\u2032i. Fi \u2190 Fi + fi. ei \u2190 \u03b3i\u03bbiei +\u2207\u03b8iQ(si, ai|\u03b8i) if s\u2032i is terminal then\n\u03b4i \u2190 ri \u2212Q(si, ai|\u03b8i) else\nSelect new action a\u2032i \u223c \u03c0(\u00b7|s \u2032 i). \u03b4i \u2190 ri + \u03b3iQ(s \u2032 i, a \u2032\ni|\u03b8i)\u2212Q(si, ai|\u03b8i) ai \u2190 a \u2032\ni\nend if\n\u03b8i \u2190 \u03b8i + \u03b1i\u03b4iei si \u2190 s \u2032\ni\nend while\nend for\nend for [\u0398,\u03a8] \u2190 Selection(F ,\u0398,\u03a8) \u03a8 \u2190 AddNoise(\u03a8)\nend for\nmethod differentiates between the goal of the learning (i.e., maximize the expected accumulated discounted rewards, in the cases of Sarsa(\u03bb)) and the overall goal of the task as measured by the score, Fi, for each instance i in each generation. In this study, the score is equal to the total number of points scored in the games we consider.\nWe use stochastic universal sampling (SUS; Baker, 1987) combined with elitism as the Selection() method. SUS is a fitness proportionate selection method with no bias and minimal variance. Instead of spinning an imaginary roulette wheel with one pointer N times, as in roulette wheel selection, SUS spins the wheel once with N equally-spaced pointers. We first select the best algorithm instance and it continues learning without adding noise to any of the meta-parameters (i.e., elitism). We then use SUS to select the remaining instances and we add Gaussian noise to the meta-parameters with a predefined probability pn. To ensure that changes in meta-parameter values are not too large and therefore disruptive to\nthe learning process, we use a AddNoise() method that adds noise, \u01eb, to a meta-parameter, \u03c8, drawn from a normal distribution with standard deviation that depends on the magnitude of meta-parameter multiplied by predefined factor \u03b7n. If 0 \u2264 \u03c8 \u2264 1 (\u03b1, \u03b3, and \u03bb in this study), then:\n\u01eb \u223c\n\n\n\nN ( 0, (\u03c8\u03b7n) 2 )\nif\u03c8 \u2264 0.5,\nN ( 0, ((1\u2212 \u03c8) \u03b7n) 2 ) if\u03c8 > 0.5, (15)\notherwise (\u03c40 and \u03c4k in this study):\n\u01eb \u223c N ( 0, (\u03c8\u03b7n) 2 ) . (16)\nWe also use Equations 15 and 16 to initialize the meta-parameters by adding Gaussian noise to common starting values."}, {"heading": "4 Experiments", "text": "To be able to directly compare the learning performance with and without the OMPAC method, we used the same experimental setups as in our earlier study (Elfwing et al., 2017). In stochastic SZ-Tetris and standard Tetris with a smaller, 10\u00d710, board size, we trained agents with shallow neural network function approximators with dSiL hidden units using TD(\u03bb) and softmax action selection (hereafter, shallow dSiL agents). In the Atari 2600 domain, we trained agents with deep convolutional neural network function approximators with SiL hidden units in the convolutional layers and dSiL hidden units in the fully-connected layer using Sarsa(\u03bb) and softmax action selection (hereafter, deep SiL agents). In all OMPAC experiments, the number of parallel algorithm instances N was set to 12, the number of learning episodes in each generation was set to 100, the probability of adding Gaussian noise to a meta-parameter pn was set to 0.1, and the factor controlling the magnitude of the Gaussian noise \u03b7n was set to 0.05. The values were determined by preliminary experiments in stochastic SZ-Tetris."}, {"heading": "4.1 Tetris", "text": "Due to prohibitively long learning times (in the case of high performance), it is not feasible to apply value-based reinforcement learning to standard Tetris with a board height of 20. The current state-of-the-art result for a single run of an algorithm, achieved by the CBMPI algorithm (Gabillon et al., 2013), is a mean score of 51 million cleared lines. We instead consider stochastic SZ-Tetris (Burgiel, 1997; Szita and Szepesv\u00e1ri, 2010), which only uses the S-shaped and the Z-shaped tetrominos, and standard Tetris with a smaller, 10\u00d710, board.\nIn both versions of Tetris, in each time step, a randomly selected tetromino appears above the board. The agent selects a rotation and a horizontal position, and the tetromino drops down the board, stopping when it hits another tetromino or the bottom of the board.\nIf a row is completed, then it disappears. An episode ends when a tetromino does not fit within the board. The agent gets a score equal to the number of cleared lines, with a maximum of 2 points in SZ-Tetris and of 4 points in 10\u00d710 Tetris (only achievable by the stick-shaped tetromino). The possible number of actions is 17 for the S-shaped and the Zshaped tetrominos. For the additional five tetrominos in 10\u00d710 Tetris, the possible numbers of actions are 9 for the block-shaped tetromino, 17 for stick-shaped tetromino, and 34 for the J-, L- and T-shaped tetrominos.\nWe recently achieved the current state-of-the-art results (Elfwing et al., 2017) using shallow dSiL agents. In SZ-Tetris, a shallow dSiL agent with 50 hidden nodes achieved a final (over 1,000 episodes) mean score of 263 points when averaged over 10 separate runs and of 320 points for the best run. In 10\u00d710 Tetris, a shallow dSiL agent with 250 hidden nodes achieved a final (over 10,000 episodes) mean score of 4,900 points when averaged over 5 separate runs of and 5,300 points for the best run, which improved the average score of 4,200 points and the best score of 5,000 points achieved by the CBMPI algorithm (Gabillon et al., 2013).\nUsing the OMPAC method we trained shallow dSiL agents with 50 hidden units in SZ-Tetris and 250 hidden units in 10\u00d710 Tetris. The features were similar to the original 21 features proposed by Bertsekas and Ioffe (1996), except for not including the maximum column height and using the differences in column heights instead of the absolute differences. The binary state vectors were of length 460 in SZ-Tetris and 260 in 10\u00d710 Tetris. We used the following reward function proposed by Fau\u00dfer and Schwenker (2013):\nr(s) = e\u2212(number of holes in s)/z . (17)\nHere, z was set to 33 for SZ-Tetris and 33/2 for 10\u00d710 Tetris. We used the meta-parameters in Elfwing et al. (2017) as starting values to initialize the meta-parameters according to Equations 15 and 16: \u03b1: 0.001, \u03b3: 0.99, \u03bb: 0.55, \u03c40: 0.5, and \u03c4k: 0.00025. The experiments ran for 2,000 generations (i.e., 200,000 episodes of learning in total) in SZ-Tetris and 2,500 generations (250,000 episodes) in 10\u00d710 Tetris. The score used for selection was the total number of points received by an algorithm instance in one generation.\nFigure 1 shows the average learning curves for the OMPAC method in SZ-Tetris and 10\u00d710 Tetris. The scores were computed as mean scores over every 10 generations (1,000 episodes) in SZ-Tetris and every 100 generations (10,000 episodes) in 10\u00d710 Tetris. The final scores are large and significant improvements of the previous state-of-the-art results achieved by shallow dSiL agents without OMPAC adaptation. The final average score of 345 points is a 82 points or 31% improvement in SZ-Tetris, and the final average score of 9,000 points is a 4,100 points or 84% improvement in 10\u00d710 Tetris.\nFigure 2 shows the average values of the meta-parameters computed over the 12 algorithm instances. The adaptations of \u03b1 and \u03bb were similar in both games. The values of \u03b1 decreased by about an order of magnitude, from 1.0\u00d710\u22123 to 1.25\u00d710\u22124 and 6.57\u00d710\u22125, and the values of \u03bb decreased from 0.55 to 0.188 and 0.125, in SZ-Tetris and in 10\u00d710 Tetris, respectively. More interestingly, while the value of \u03b3 in SZ-Tetris was relatively stable around 0.99 (final average value of 0.9908), the value of \u03b3 in 10\u00d710 Tetris first decreased to about 0.98 and\nthen increased back towards 0.99 (final average value of 0.9886). The value of the inverse temperature \u03b2 = 1/\u03c4 in SZ-Tetris increased, in tandem with the improvement in mean score, to over 300 during first \u223c125,000 episodes. During the last \u223c75,000 episodes, there was only a very small (\u223c5 points) improvement in mean score and the value of \u03b2 decreased slowly, reaching a final average value of 232. In 10\u00d710 Tetris, the mean score improved continuously and the value of \u03b2 increased over the whole learning process, reaching a final average value of 2670 (i.e., approximately greedy action selection)."}, {"heading": "4.2 Atari 2600 games", "text": "We evaluated the OMPAC method in the Atari 2600 domain using the Arcade Learning Environment (Bellemare et al., 2013). We followed the experimental setup in our earlier study (Elfwing et al., 2017). The raw 210\u00d7160 Atari 2600 RGB frames were pre-processed by extracting the luminance channel, taking the maximum pixel values over consecutive frames to prevent flickering, and then downsampling the grayscale images to 105\u00d780. The deep convolutional neural network used by the deep SiL agent consisted of two convolutional layers with SiL units (16 filters of size 8\u00d78 with a stride of 4 and 32 filters of size 4\u00d74 with a stride of 2), each followed by a max-pooling layer (pooling windows of size 3\u00d73 with a stride of 2), a fully-connected hidden layer with 512 dSiL units, and a fully-connected linear output layer with 4 to 18 output (or action-value) units, depending on the number of valid actions in the considered game. We used frame skipping where actions were selected every fourth frame and repeated for the next four frames. The input to the network was a 105\u00d780\u00d72 image consisting of the current and the fourth previous pre-processed frame. As in the DQN experiments (Mnih et al., 2015), we clipped the rewards to be between \u22121 and +1, but we did not clip the values of the TD-errors. An episode started with up to 30 \u2019do nothing\u2019 actions (no-op condition) and it was played until the end of the game or for a maximum of 18,000 frames (i.e., 5 minutes).\nWe used the meta-parameters in Elfwing et al. (2017) as starting values to initialize the meta-parameters according to Equations 15 and 16: \u03b1: 0.001, \u03b3: 0.99, \u03bb: 0.8, \u03c40: 0.5, and \u03c4k: 0.0005. The experiments ran for 2,000 generations (i.e., 200,000 episodes of learning in total). The score used for selection was the total raw score received by an algorithm instance in one generation.\nThe deep SiL agent in Elfwing et al. (2017) outperformed DQN, the Gorila implementation of DQN (Nair et al., 2015) and double DQN (van Hasselt et al., 2015) when tested on the 12 games played by DQN that started with the letters \u2019A\u2019 and \u2019B\u2019. In this study, we tested the OMPAC method in three Atari 2600 games: Alien, Amidar, and Assault. We choose those three because they are games where the deep SiL agents were outperformed by one or more of the other agents, and it should therefore be room for significant improvements in performance.\nFigure 3 shows the average learning curves over the 12 algorithm instances for the three games. Table 1 summarizes the results as the average scores in the final generation and the best mean scores of individual instances in any generation. The table also shows the final and best mean scores achieved by deep SiL agents without OMPAC adaptation, and the reported best mean scores achieved by DQN, the Gorila implementation of DQN, and double DQN. OMPAC adaptation of the meta-parameters significantly improved the performance of the deep SiL agents, between 83% and 177% when measured by average final scores and between 62% and 82% when measured by best mean scores. The OMPAC scores are also higher than the reported results for the other three methods, except for the double DQN score in the Assault game. However, the learned behavior in the Assault was still good. We tested the best performing agent in last generation using the final values of the meta-parameters, and it survived for the full 5 minutes in 88 out of 100 episodes. A video of a typical episode lasting for 5\nminutes can be found at http://www.cns.atr.jp/~elfwing/videos/assault_OMPAC.mov.\nFigure 4 shows average values of the meta-parameters over the learning process in the three Atari 2600 games. Similar to the two Tetris games, the values of \u03b1 decreased, by about an order of magnitude of more, over the learning process. In contrast to the two Tetris games where the values of \u03bb decreased (from a smaller starting value of 0.55), the values of \u03bb either increased to about 0.9 (Amidar and Assault) or reached about 0.75 after first decreasing to 0.6 (Alien). The trajectories of the values of \u03b3 and \u03b2 were different in the three games: 1) in Assault, both meta-parameters increased over the whole learning process (final average values of 0.9973 and 1556, for \u03b3 and \u03b2, respectively); 2) in Amidar, the value of \u03b3 was relatively stable but the value of \u03b2 increased, but slower than in Assault, over the whole learning process (0.9880 and 599); and 3) in Alien, the value of \u03b3, similar to 10\u00d710 Tetris, decreased during the first \u223c50,000 episodes before it started to increase, and the value of \u03b2, similar to SZ-Tetris, increased during the first \u223c120,000 episodes when learning performance was increasing and it then slowly decreased when the learning performance\nplateaued (0.9953 and 206)."}, {"heading": "5 Analysis", "text": "In this section, we investigate the ability of the OMPAC method to learn when starting from bad settings of the meta-parameters. The experiments in the two Tetris and the Atari 2600 domains showed that OMPAC adaptation of the meta-parameters can significantly improve the learning performance when using suitable starting values of the meta-parameters. However, when, for example, encountering a new task, it would be valuable to be able to use OMPAC either as a method for achieving high performance even when the initial values of the meta-parameters are not suitable for the task at hand or as a method for finding suitable values of the meta-parameters for future experiments.\nWe chose to limit our investigation to different settings of \u03b3 and \u03c4k. We trained shallow dSiL agents in SZ-Tetris with three settings of the starting value of \u03b3 \u2208 {0.8, 0.9, 0.99} and three settings of the starting value of \u03bb \u2208 {2.5\u00d710\u22123, 2.5\u00d710\u22124, 2.5\u00d710\u22125}. We used the same values of the three other meta-parameters as in the earlier SZ-Tetris experiment. For each of the nine settings of \u03b3 and \u03c4k, we also trained agents without OMPAC adaptation for 10 separate runs.\nFigure 5 shows average learning curves with and without OMPAC adaptation of the meta-parameters (top panel), and the average scores over the final 1000 episodes with standard deviations (bottom panel). The results clearly show that the OMPAC method is able to overcome bad initial settings of meta-parameters. The two largest improvements in average final scores (267 and 183 points) were for the (\u03b3, \u03bb)-settings ((0.8, 2.5\u00d710\u22125) and (0.9, 2.5\u00d710\u22125)) that achieved the lowest average final scores (3 and 84 points) without OMPAC\nadaptation."}, {"heading": "6 Conclusions", "text": "In this study, we proposed the OMPAC method for online adaptation of the meta-parameters in reinforcement learning by competition between algorithm instances running in parallel. We validated the proposed method by significantly improving the state-of-the-art scores\nin stochastic SZ-Tetris and 10\u00d710 Tetris, and by significantly improving the performance of deep Sarsa(\u03bb) agents in three Atari 2600 games. The experiments also demonstrated the ability of the OMPAC method to adapt the meta-parameters according to the learning progress in different tasks."}, {"heading": "Acknowledgments", "text": "This work was supported by the project commissioned by the New Energy and Industrial Technology Development Organization (NEDO), JSPS KAKENHI grant 16K12504, and Okinawa Institute of Science and Technology Graduate University research support to KD."}], "references": [{"title": "Reducing bias and inefficiency in the selection algorithm", "author": ["J.E. Baker"], "venue": "Proceedings of the Second Genetic Algorithms on Genetic Algorithms and Their Application, pages 14\u2013", "citeRegEx": "Baker,? 1987", "shortCiteRegEx": "Baker", "year": 1987}, {"title": "The arcade learning environment: An evaluation platform for general agents", "author": ["M.G. Bellemare", "Y. Naddaf", "J. Veness", "M. Bowling"], "venue": "Journal of Artificial Intelligence Research, 47:253\u2013279.", "citeRegEx": "Bellemare et al\\.,? 2013", "shortCiteRegEx": "Bellemare et al\\.", "year": 2013}, {"title": "Temporal differences based policy iteration and applications in neuro-dynamic programming", "author": ["D.P. Bertsekas", "S. Ioffe"], "venue": "Technical Report LIDS-P-2349, MIT.", "citeRegEx": "Bertsekas and Ioffe,? 1996", "shortCiteRegEx": "Bertsekas and Ioffe", "year": 1996}, {"title": "How to lose at Tetris", "author": ["H. Burgiel"], "venue": "Mathematical Gazette, 81:194\u2013200.", "citeRegEx": "Burgiel,? 1997", "shortCiteRegEx": "Burgiel", "year": 1997}, {"title": "Temporal difference bayesian model averaging: A bayesian perspective on adapting lambda", "author": ["C. Downey", "S. Sanner"], "venue": "Proceedings of the International Conference on Machine Learning (ICML2010), pages 311\u2013318.", "citeRegEx": "Downey and Sanner,? 2010", "shortCiteRegEx": "Downey and Sanner", "year": 2010}, {"title": "Sigmoid-weighted linear units for neural network function approximation in reinforcement learning", "author": ["S. Elfwing", "E. Uchibe", "K. Doya"], "venue": "CoRR, abs/1702.03118.", "citeRegEx": "Elfwing et al\\.,? 2017", "shortCiteRegEx": "Elfwing et al\\.", "year": 2017}, {"title": "Co-evolution of shaping rewards and meta-parameters in reinforcement learning", "author": ["S. Elfwing", "E. Uchibe", "K. Doya", "H.I. Christensen"], "venue": "Adaptive Behavior, 16(6):400\u2013 412.", "citeRegEx": "Elfwing et al\\.,? 2008", "shortCiteRegEx": "Elfwing et al\\.", "year": 2008}, {"title": "Darwinian embodied evolution of the learning ability for survival", "author": ["S. Elfwing", "E. Uchibe", "K. Doya", "H.I. Christensen"], "venue": "Adaptive Behavior, 19(2):101\u2013120.", "citeRegEx": "Elfwing et al\\.,? 2011", "shortCiteRegEx": "Elfwing et al\\.", "year": 2011}, {"title": "Evolution of meta-parameters in reinforcement learning algorithm", "author": ["A. Eriksson", "G. Capi", "K. Doya"], "venue": "Proceedings of the IEEE/RSJ Conference on Intelligent Robots and Systems (IROS2003), pages 412\u2013417.", "citeRegEx": "Eriksson et al\\.,? 2003", "shortCiteRegEx": "Eriksson et al\\.", "year": 2003}, {"title": "Neural network ensembles in reinforcement learning", "author": ["S. Fau\u00dfer", "F. Schwenker"], "venue": "Neural Processing Letters, pages 1\u201315.", "citeRegEx": "Fau\u00dfer and Schwenker,? 2013", "shortCiteRegEx": "Fau\u00dfer and Schwenker", "year": 2013}, {"title": "How to discount deep reinforcement learning: Towards new dynamic strategies", "author": ["V. Fran\u00e7ois-Lavet", "R. Fonteneau", "D. Ernst"], "venue": "CoRR, abs/1512.02011.", "citeRegEx": "Fran\u00e7ois.Lavet et al\\.,? 2015", "shortCiteRegEx": "Fran\u00e7ois.Lavet et al\\.", "year": 2015}, {"title": "Approximate dynamic programming finally performs well in the game of Tetris", "author": ["V. Gabillon", "M. Ghavamzadeh", "B. Scherrer"], "venue": "Proceedings of Advances in Neural Information Processing Systems (NIPS2013), pages 1754\u20131762.", "citeRegEx": "Gabillon et al\\.,? 2013", "shortCiteRegEx": "Gabillon et al\\.", "year": 2013}, {"title": "Control of exploitation\u00e2\u0102\u015eexploration meta-parameter in reinforcement learning", "author": ["S. Ishii", "W. Yoshida", "J. Yoshimoto"], "venue": "Neural Networks, 15(4-6):665\u2013687.", "citeRegEx": "Ishii et al\\.,? 2002", "shortCiteRegEx": "Ishii et al\\.", "year": 2002}, {"title": "A meta-learning method based on temporal difference error", "author": ["K. Kobayashi", "H. Mizoue", "T. Kuremoto", "M. Obayashi"], "venue": "Proceedings of International Conference on Neural Information Processing (ICONIP2009), pages 530\u2013537.", "citeRegEx": "Kobayashi et al\\.,? 2009", "shortCiteRegEx": "Kobayashi et al\\.", "year": 2009}, {"title": "Philosophie Zoologique", "author": ["J.B. Lamarck"], "venue": "Chez Dentu.", "citeRegEx": "Lamarck,? 1809", "shortCiteRegEx": "Lamarck", "year": 1809}, {"title": "Adaptive \u03bb least-squares temporal difference learning", "author": ["T.A. Mann", "H. Penedones", "T. Hester"], "venue": "CoRR, abs/1612.09465.", "citeRegEx": "Mann et al\\.,? 2016", "shortCiteRegEx": "Mann et al\\.", "year": 2016}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A.A. Rusu", "J. Veness", "M.G. Bellemare", "A. Graves", "M. Riedmiller", "A.K. Fidjeland", "G. Ostrovski", "S. Petersen", "C. Beattie", "A. Sadik", "I. Antonoglou", "H. King", "D. Kumaran", "D. Wierstra", "S. Legg", "D. Hassabis"], "venue": "Nature, 518(7540):529\u2013533.", "citeRegEx": "Mnih et al\\.,? 2015", "shortCiteRegEx": "Mnih et al\\.", "year": 2015}, {"title": "Massively parallel methods for deep reinforcement learning", "author": ["A. Nair", "P. Srinivasan", "S. Blackwell", "C. Alcicek", "R. Fearon", "A.D. Maria", "V. Panneershelvam", "M. Suleyman", "C. Beattie", "S. Petersen", "S. Legg", "V. Mnih", "K. Kavukcuoglu", "D. Silver"], "venue": "CoRR, abs/1507.04296.", "citeRegEx": "Nair et al\\.,? 2015", "shortCiteRegEx": "Nair et al\\.", "year": 2015}, {"title": "On-line Q-learning using connectionist systems", "author": ["G.A. Rummery", "M. Niranjan"], "venue": "Technical Report CUED/F-INFENG/TR 166, Cambridge University Engineering Department.", "citeRegEx": "Rummery and Niranjan,? 1994", "shortCiteRegEx": "Rummery and Niranjan", "year": 1994}, {"title": "Meta-learning in reinforcement learning", "author": ["N. Schweighofer", "K. Doya"], "venue": "Neural Networks, 16(1):5\u20139.", "citeRegEx": "Schweighofer and Doya,? 2003", "shortCiteRegEx": "Schweighofer and Doya", "year": 2003}, {"title": "Learning to predict by the method of temporal differences", "author": ["R.S. Sutton"], "venue": "Machine Learning, 3:9\u201344.", "citeRegEx": "Sutton,? 1988", "shortCiteRegEx": "Sutton", "year": 1988}, {"title": "Adapting bias by gradient descent: an incremental version of the delta-bar-delta", "author": ["R.S. Sutton"], "venue": "Proceedings of the National Conference on Artificial Intelligence.", "citeRegEx": "Sutton,? 1992", "shortCiteRegEx": "Sutton", "year": 1992}, {"title": "Generalization in reinforcement learning: Successful examples using sparse coarse coding", "author": ["R.S. Sutton"], "venue": "Proceedings of Advances in Neural Information Processing Systems (NIPS1996), pages 1038\u20131044. MIT Press.", "citeRegEx": "Sutton,? 1996", "shortCiteRegEx": "Sutton", "year": 1996}, {"title": "Reinforcement Learning: An Introduction", "author": ["R.S. Sutton", "A. Barto"], "venue": "MIT Press.", "citeRegEx": "Sutton and Barto,? 1998", "shortCiteRegEx": "Sutton and Barto", "year": 1998}, {"title": "SZ-Tetris as a benchmark for studying key problems of reinforcement learning", "author": ["I. Szita", "C. Szepesv\u00e1ri"], "venue": "ICML 2010 workshop on machine learning and games.", "citeRegEx": "Szita and Szepesv\u00e1ri,? 2010", "shortCiteRegEx": "Szita and Szepesv\u00e1ri", "year": 2010}, {"title": "Differentiation of learning abilities \u2013 a case study on optimizing parameter values in qlearning by a genetic algorithm", "author": ["T. Unemi", "M. Nagaoyoshi", "N. Hirayama", "T. Nade", "K. Yano", "Y. Masujima"], "venue": "Proceedings of the International Workshop on the Synthesis and Simulation of Living Systems, pages 331\u2013336.", "citeRegEx": "Unemi et al\\.,? 1994", "shortCiteRegEx": "Unemi et al\\.", "year": 1994}, {"title": "Deep reinforcement learning with double q-learning", "author": ["H. van Hasselt", "A. Guez", "D. Silver"], "venue": null, "citeRegEx": "Hasselt et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Hasselt et al\\.", "year": 2015}], "referenceMentions": [{"referenceID": 23, "context": "The efficiency of reinforcement learning (Sutton and Barto, 1998) algorithms depends critically on a few meta-parameters that modulates the learning updates and the trade-off between exploration for new knowledge and exploitation of existing knowledge.", "startOffset": 41, "endOffset": 65}, {"referenceID": 16, "context": "performance in many Atari 2600 video games (Mnih et al., 2015).", "startOffset": 43, "endOffset": 62}, {"referenceID": 14, "context": "The OMPAC method is similar to a Lamarckian (Lamarck, 1809) evolutionary process without the crossover operator, but with two main differences compared with standard applications of artificial evolution.", "startOffset": 44, "endOffset": 59}, {"referenceID": 25, "context": ", the learning started from scratch in each generation) to find appropriate fixed values of the meta-parameters (Unemi et al., 1994; Eriksson et al., 2003; Elfwing et al., 2008, 2011).", "startOffset": 112, "endOffset": 183}, {"referenceID": 8, "context": ", the learning started from scratch in each generation) to find appropriate fixed values of the meta-parameters (Unemi et al., 1994; Eriksson et al., 2003; Elfwing et al., 2008, 2011).", "startOffset": 112, "endOffset": 183}, {"referenceID": 21, "context": "Proposed approaches for adapting individual meta-parameters include the incremental delta bar delta method (Sutton, 1992) to tune \u03b1, a method based on variance of the action value function (Ishii et al.", "startOffset": 107, "endOffset": 121}, {"referenceID": 12, "context": "Proposed approaches for adapting individual meta-parameters include the incremental delta bar delta method (Sutton, 1992) to tune \u03b1, a method based on variance of the action value function (Ishii et al., 2002) to tune the inverse temperature \u03b2 in softmax action selection, and a Bayesian model averaging approach (Downey and Sanner, 2010) and the Adaptive \u03bb Least-Squares Temporal Difference Learning method (Mann et al.", "startOffset": 189, "endOffset": 209}, {"referenceID": 4, "context": ", 2002) to tune the inverse temperature \u03b2 in softmax action selection, and a Bayesian model averaging approach (Downey and Sanner, 2010) and the Adaptive \u03bb Least-Squares Temporal Difference Learning method (Mann et al.", "startOffset": 111, "endOffset": 136}, {"referenceID": 15, "context": ", 2002) to tune the inverse temperature \u03b2 in softmax action selection, and a Bayesian model averaging approach (Downey and Sanner, 2010) and the Adaptive \u03bb Least-Squares Temporal Difference Learning method (Mann et al., 2016) to tune \u03bb.", "startOffset": 206, "endOffset": 225}, {"referenceID": 5, "context": "To be able to directly compare the learning performance with and without the OMPAC method, we use the same experimental setups as in our earlier study (Elfwing et al., 2017), where we proposed the sigmoid-weighted linear (SiL) unit and its derivative function (dSiL) as activation functions for neural network function approximation in reinforcement learning.", "startOffset": 151, "endOffset": 173}, {"referenceID": 4, "context": ", 2003; Elfwing et al., 2008, 2011). Schweighofer and Doya (2003) proposed a meta-learning method based on the mid-term and the long-term running averages of the reward, and Kobayashi et al.", "startOffset": 8, "endOffset": 66}, {"referenceID": 4, "context": ", 2003; Elfwing et al., 2008, 2011). Schweighofer and Doya (2003) proposed a meta-learning method based on the mid-term and the long-term running averages of the reward, and Kobayashi et al. (2009) proposed a metalearning method based on the absolute values of the TD-errors.", "startOffset": 8, "endOffset": 198}, {"referenceID": 4, "context": ", 2002) to tune the inverse temperature \u03b2 in softmax action selection, and a Bayesian model averaging approach (Downey and Sanner, 2010) and the Adaptive \u03bb Least-Squares Temporal Difference Learning method (Mann et al., 2016) to tune \u03bb. Fran\u00e7ois-Lavet et al. (2015) demonstrated that the performance of DQN could be improved in some Atari 2600 games by a rather ad-hoc tuning scheme that increase \u03b3 (\u03b3 \u2190 min(0.", "startOffset": 112, "endOffset": 266}, {"referenceID": 20, "context": "1 TD(\u03bb) and Sarsa(\u03bb) In this study, we use two reinforcement learning algorithms: TD(\u03bb) (Sutton, 1988) and Sarsa(\u03bb) (Rummery and Niranjan, 1994; Sutton, 1996).", "startOffset": 88, "endOffset": 102}, {"referenceID": 18, "context": "1 TD(\u03bb) and Sarsa(\u03bb) In this study, we use two reinforcement learning algorithms: TD(\u03bb) (Sutton, 1988) and Sarsa(\u03bb) (Rummery and Niranjan, 1994; Sutton, 1996).", "startOffset": 116, "endOffset": 158}, {"referenceID": 22, "context": "1 TD(\u03bb) and Sarsa(\u03bb) In this study, we use two reinforcement learning algorithms: TD(\u03bb) (Sutton, 1988) and Sarsa(\u03bb) (Rummery and Niranjan, 1994; Sutton, 1996).", "startOffset": 116, "endOffset": 158}, {"referenceID": 5, "context": "We recently proposed (Elfwing et al., 2017) the sigmoid-weighted linear (SiL) unit and its derivative function (dSiL) as activation functions for neural network function approximation in reinforcement learning.", "startOffset": 21, "endOffset": 43}, {"referenceID": 0, "context": "We use stochastic universal sampling (SUS; Baker, 1987) combined with elitism as the Selection() method.", "startOffset": 37, "endOffset": 55}, {"referenceID": 5, "context": "To be able to directly compare the learning performance with and without the OMPAC method, we used the same experimental setups as in our earlier study (Elfwing et al., 2017).", "startOffset": 152, "endOffset": 174}, {"referenceID": 11, "context": "The current state-of-the-art result for a single run of an algorithm, achieved by the CBMPI algorithm (Gabillon et al., 2013), is a mean score of 51 million cleared lines.", "startOffset": 102, "endOffset": 125}, {"referenceID": 3, "context": "We instead consider stochastic SZ-Tetris (Burgiel, 1997; Szita and Szepesv\u00e1ri, 2010), which only uses the S-shaped and the Z-shaped tetrominos, and standard Tetris with a smaller, 10\u00d710, board.", "startOffset": 41, "endOffset": 84}, {"referenceID": 24, "context": "We instead consider stochastic SZ-Tetris (Burgiel, 1997; Szita and Szepesv\u00e1ri, 2010), which only uses the S-shaped and the Z-shaped tetrominos, and standard Tetris with a smaller, 10\u00d710, board.", "startOffset": 41, "endOffset": 84}, {"referenceID": 5, "context": "We recently achieved the current state-of-the-art results (Elfwing et al., 2017) using shallow dSiL agents.", "startOffset": 58, "endOffset": 80}, {"referenceID": 11, "context": "In 10\u00d710 Tetris, a shallow dSiL agent with 250 hidden nodes achieved a final (over 10,000 episodes) mean score of 4,900 points when averaged over 5 separate runs of and 5,300 points for the best run, which improved the average score of 4,200 points and the best score of 5,000 points achieved by the CBMPI algorithm (Gabillon et al., 2013).", "startOffset": 316, "endOffset": 339}, {"referenceID": 2, "context": "The features were similar to the original 21 features proposed by Bertsekas and Ioffe (1996), except for not including the maximum column height and using the differences in column heights instead of the absolute differences.", "startOffset": 66, "endOffset": 93}, {"referenceID": 2, "context": "The features were similar to the original 21 features proposed by Bertsekas and Ioffe (1996), except for not including the maximum column height and using the differences in column heights instead of the absolute differences. The binary state vectors were of length 460 in SZ-Tetris and 260 in 10\u00d710 Tetris. We used the following reward function proposed by Fau\u00dfer and Schwenker (2013):", "startOffset": 66, "endOffset": 386}, {"referenceID": 5, "context": "We used the meta-parameters in Elfwing et al. (2017) as starting values to initialize the meta-parameters according to Equations 15 and 16: \u03b1: 0.", "startOffset": 31, "endOffset": 53}, {"referenceID": 1, "context": "2 Atari 2600 games We evaluated the OMPAC method in the Atari 2600 domain using the Arcade Learning Environment (Bellemare et al., 2013).", "startOffset": 112, "endOffset": 136}, {"referenceID": 5, "context": "We followed the experimental setup in our earlier study (Elfwing et al., 2017).", "startOffset": 56, "endOffset": 78}, {"referenceID": 16, "context": "As in the DQN experiments (Mnih et al., 2015), we clipped the rewards to be between \u22121 and +1, but we did not clip the values of the TD-errors.", "startOffset": 26, "endOffset": 45}, {"referenceID": 17, "context": "(2017) outperformed DQN, the Gorila implementation of DQN (Nair et al., 2015) and double DQN (van Hasselt et al.", "startOffset": 58, "endOffset": 77}, {"referenceID": 1, "context": "2 Atari 2600 games We evaluated the OMPAC method in the Atari 2600 domain using the Arcade Learning Environment (Bellemare et al., 2013). We followed the experimental setup in our earlier study (Elfwing et al., 2017). The raw 210\u00d7160 Atari 2600 RGB frames were pre-processed by extracting the luminance channel, taking the maximum pixel values over consecutive frames to prevent flickering, and then downsampling the grayscale images to 105\u00d780. The deep convolutional neural network used by the deep SiL agent consisted of two convolutional layers with SiL units (16 filters of size 8\u00d78 with a stride of 4 and 32 filters of size 4\u00d74 with a stride of 2), each followed by a max-pooling layer (pooling windows of size 3\u00d73 with a stride of 2), a fully-connected hidden layer with 512 dSiL units, and a fully-connected linear output layer with 4 to 18 output (or action-value) units, depending on the number of valid actions in the considered game. We used frame skipping where actions were selected every fourth frame and repeated for the next four frames. The input to the network was a 105\u00d780\u00d72 image consisting of the current and the fourth previous pre-processed frame. As in the DQN experiments (Mnih et al., 2015), we clipped the rewards to be between \u22121 and +1, but we did not clip the values of the TD-errors. An episode started with up to 30 \u2019do nothing\u2019 actions (no-op condition) and it was played until the end of the game or for a maximum of 18,000 frames (i.e., 5 minutes). We used the meta-parameters in Elfwing et al. (2017) as starting values to initialize the meta-parameters according to Equations 15 and 16: \u03b1: 0.", "startOffset": 113, "endOffset": 1537}, {"referenceID": 1, "context": "2 Atari 2600 games We evaluated the OMPAC method in the Atari 2600 domain using the Arcade Learning Environment (Bellemare et al., 2013). We followed the experimental setup in our earlier study (Elfwing et al., 2017). The raw 210\u00d7160 Atari 2600 RGB frames were pre-processed by extracting the luminance channel, taking the maximum pixel values over consecutive frames to prevent flickering, and then downsampling the grayscale images to 105\u00d780. The deep convolutional neural network used by the deep SiL agent consisted of two convolutional layers with SiL units (16 filters of size 8\u00d78 with a stride of 4 and 32 filters of size 4\u00d74 with a stride of 2), each followed by a max-pooling layer (pooling windows of size 3\u00d73 with a stride of 2), a fully-connected hidden layer with 512 dSiL units, and a fully-connected linear output layer with 4 to 18 output (or action-value) units, depending on the number of valid actions in the considered game. We used frame skipping where actions were selected every fourth frame and repeated for the next four frames. The input to the network was a 105\u00d780\u00d72 image consisting of the current and the fourth previous pre-processed frame. As in the DQN experiments (Mnih et al., 2015), we clipped the rewards to be between \u22121 and +1, but we did not clip the values of the TD-errors. An episode started with up to 30 \u2019do nothing\u2019 actions (no-op condition) and it was played until the end of the game or for a maximum of 18,000 frames (i.e., 5 minutes). We used the meta-parameters in Elfwing et al. (2017) as starting values to initialize the meta-parameters according to Equations 15 and 16: \u03b1: 0.001, \u03b3: 0.99, \u03bb: 0.8, \u03c40: 0.5, and \u03c4k: 0.0005. The experiments ran for 2,000 generations (i.e., 200,000 episodes of learning in total). The score used for selection was the total raw score received by an algorithm instance in one generation. The deep SiL agent in Elfwing et al. (2017) outperformed DQN, the Gorila implementation of DQN (Nair et al.", "startOffset": 113, "endOffset": 1915}], "year": 2017, "abstractText": "The efficiency of reinforcement learning algorithms depends critically on a few metaparameters that modulates the learning updates and the trade-off between exploration and exploitation. The adaptation of the meta-parameters is an open question in reinforcement learning, which arguably has become more of an issue recently with the success of deep reinforcement learning in high-dimensional state spaces. The long learning times in domains such as Atari 2600 video games makes it not feasible to perform comprehensive searches of appropriate meta-parameter values. We propose the Online Meta-learning by Parallel Algorithm Competition (OMPAC) method. In the OMPAC method, several instances of a reinforcement learning algorithm are run in parallel with small differences in the initial values of the meta-parameters. After a fixed number of episodes, the instances are selected based on their performance in the task at hand. Before continuing the learning, Gaussian noise is added to the meta-parameters with a predefined probability. We validate the OMPAC method by improving the state-of-theart results in stochastic SZ-Tetris and in standard Tetris with a smaller, 10\u00d710, board, by 31% and 84%, respectively, and by improving the results for deep Sarsa(\u03bb) agents in three Atari 2600 games by 62% or more. The experiments also show the ability of the OMPAC method to adapt the meta-parameters according to the learning progress in different tasks.", "creator": "LaTeX with hyperref package"}}}