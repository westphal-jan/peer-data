{"id": "1703.02702", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "8-Mar-2017", "title": "Robust Adversarial Reinforcement Learning", "abstract": "competitive goal networks coupled with fast simulation and improved communication have led to exceptional successes in the field of intelligence monitoring ( ssr ). however, current current performance - based initiatives reluctant to generalize since : ( a ) computational gap towards simulation and real world is so large that policy - enhanced approaches fall to transfer ; ( b ) : if policy learning is done bigger scale scale, the perceived scarcity extends to failed generalization from allowing quite different scenarios ( geo. g., due non complex processes or object masses ). at including system - invariant control software, programmers note that both modeling errors with differences in training and test scenarios can be reconciled revealing extra impacts / threats in the observer. flip side proposes survival theory involving robust adversarial test behaviors ( rarl ), either scenario expects an predator to operate in unfamiliar presence of a destabilizing predator that shows arbitrary judgments to unfamiliar opponent. neither jointly perceived adversary is reinforced - - let is, it learns their inherent destabilization policy. we write the linear learning as a zero - sum, weak regression function. extensive attempts in multiple locations ( invertedpendulum, cage, swimmer, shark and walker2d ) tentatively demonstrate why strong argument ( pd ) improves institutional stability ; ( b ) gets adaptive to differences in training / test circumstances ; and c ) outperform whatever adversary even without the absence including the adversary.", "histories": [["v1", "Wed, 8 Mar 2017 04:58:51 GMT  (3349kb,D)", "http://arxiv.org/abs/1703.02702v1", "10 pages"]], "COMMENTS": "10 pages", "reviews": [], "SUBJECTS": "cs.LG cs.AI cs.MA cs.RO", "authors": ["lerrel pinto", "james davidson", "rahul sukthankar", "abhinav gupta"], "accepted": true, "id": "1703.02702"}, "pdf": {"name": "1703.02702.pdf", "metadata": {"source": "META", "title": "Robust Adversarial Reinforcement Learning", "authors": ["Lerrel Pinto", "James Davidson", "Rahul Sukthankar", "Abhinav Gupta"], "emails": ["<lerrelp@cs.cmu.edu>."], "sections": [{"heading": "1. Introduction", "text": "High-capacity function approximators such as deep neural networks have led to increased success in the field of reinforcement learning (Mnih et al., 2015; Silver et al., 2016; Gu et al., 2016; Lillicrap et al., 2015; Mordatch et al., 2015). However, a major bottleneck for such policy-learning methods is their reliance on data: training high-capacity models requires huge amounts of train-\n1Carnegie Mellon University 2Google Brain 3Google Research. Correspondence to: Lerrel Pinto <lerrelp@cs.cmu.edu>.\ning data/trajectories. While this training data can be easily obtained for tasks like games (e.g., Doom, Montezuma\u2019s Revenge) (Mnih et al., 2015), data-collection and policy learning for real-world physical tasks are significantly more challenging.\nThere are two possible ways to perform policy learning for real-world physical tasks:\n\u2022 Real-world Policy Learning: The first approach is to learn the agent\u2019s policy in the real-world. However, training in the real-world is too expensive, dangerous and time-intensive leading to scarcity of data. Due to scarcity of data, training is often restricted to a limited set of training scenarios, causing overfitting. If the test scenario is different (e.g., different friction coefficient), the learned policy fails to generalize. Therefore, we need a learned policy that is robust and generalizes well across a range of scenarios. \u2022 Learning in simulation: One way of escaping the data scarcity in the real-world is to transfer a policy learned in a simulator to the real world. However the environment and physics of the simulator are not exactly the same as the real world. This reality gap often results in unsuccessful transfer if the learned policy isn\u2019t robust to modeling errors (Christiano et al., 2016; Rusu et al., 2016).\nBoth the test-generalization and simulation-transfer issues are further exacerbated by the fact that many policylearning algorithms are stochastic in nature. For many hard physical tasks such as Walker2D (Brockman et al., 2016), only a small fraction of runs leads to stable walking policies. This makes these approaches even more time and data-intensive. What we need is an approach that is significantly more stable/robust in learning policies across different runs and initializations while requiring less data during training.\nSo, how can we model uncertainties and learn a policy robust to all uncertainties? How can we model the gap between simulations and real-world? We begin with the insight that modeling errors can be viewed as extra forces/disturbances in the system (Bas\u0327ar & Bernhard, 2008). For example, high friction at test time might be modeled as extra forces at contact points against the direction of motion. Inspired by this observation, this paper\nar X\niv :1\n70 3.\n02 70\n2v 1\n[ cs\n.L G\n] 8\nM ar\n2 01\n7\nproposes the idea of modeling uncertainties via an adversarial agent that applies disturbance forces to the system. Moreover, the adversary is reinforced \u2013 that is, it learns an optimal policy to thwart the original agent\u2019s goal. Our proposed method, Robust Adversarial Reinforcement Learning (RARL), jointly trains a pair of agents, a protagonist and an adversary, where the protagonist learns to fulfil the original task goals while being robust to the disruptions generated by its adversary.\nWe perform extensive experiments to evaluate RARL on multiple OpenAI gym environments like InvertedPendulum, HalfCheetah, Swimmer, Hopper and Walker2d (see Figure 1). We demonstrate that our proposed approach is: (a) Robust to model initializations: The learned policy performs better given different model parameter initializations and random seeds. This alleviates the data scarcity issue by reducing sensitivity of learning. (b) Robust to modeling errors and uncertainties: The learned policy generalizes significantly better to different test environment settings (e.g., with different mass and friction values)."}, {"heading": "1.1. Overview of RARL", "text": "Our goal is to learn a policy that is robust to modeling errors in simulation or mismatch between training and test scenarios. For example, we would like to learn policy for Walker2D that works not only on carpet (training scenario) but also generalizes to walking on ice (test scenario). Similarly, other parameters such as the mass of the walker might vary during training and test. One possibility is to list all such parameters (mass, friction etc.) and learn an ensemble of policies for different possible variations (Rajeswaran et al., 2016). But explicit consideration of all possible parameters of how simulation and real world might differ or what parameters can change between training/test is infeasible.\nOur core idea is to model the differences during training and test scenarios via extra forces/disturbances in the system. Our hypothesis is that if we can learn a policy that\nis robust to all disturbances, then this policy will be robust to changes in training/test situations; and hence generalize well. But is it possible to sample trajectories under all possible disturbances? In unconstrained scenarios, the space of possible disturbances could be larger than the space of possible actions, which makes sampled trajectories even sparser in the joint space.\nTo overcome this problem, we advocate a two-pronged approach:\n(a) Adversarial agents for modeling disturbances: Instead of sampling all possible disturbances, we jointly train a second agent (termed the adversary), whose goal is to impede the original agent (termed the protagonist) by applying destabilizing forces. The adversary is rewarded only for the failure of the protagonist. Therefore, the adversary learns to sample hard examples: disturbances which will make original agent fail; the protagonist learns a policy that is robust to any disturbances created by the adversary.\n(b) Adversaries that incorporate domain knowledge: The naive way of developing an adversary would be to simply give it the same action space as the protagonist \u2013 like a driving student and driving instructor fighting for control of a dual-control car. However, our proposed approach is much richer and is not limited to symmetric action spaces \u2013 we can exploit domain knowledge to: focus the adversary on the protagonist\u2019s weak points; and since the adversary is in a simulated environment, we can give the adversary \u201csuper-powers\u201d \u2013 the ability to affect the robot or environment in ways the protagonist cannot (e.g., suddenly change a physical parameter like frictional coefficient or mass)."}, {"heading": "2. Background", "text": "Before we delve into the details of RARL, we first outline our terminology, standard reinforcement learning setting and two-player zero-sum games from which our paper is inspired."}, {"heading": "2.1. Standard reinforcement learning on MDPs", "text": "In this paper we examine continuous space MDPs that are represented by the tuple: (S,A,P, r, \u03b3, s0), where S is a set of continuous states andA is a set of continuous actions, P : S \u00d7 A \u00d7 S \u2192 R is the transition probability, r : S \u00d7A \u2192 R is the reward function, \u03b3 is the discount factor, and s0 is the initial state distribution.\nBatch policy algorithms like (Williams, 1992; Kakade, 2002; Schulman et al., 2015) attempt to learn a stochastic policy \u03c0\u03b8 : S \u00d7 A \u2192 R that maximizes the cumulative discounted reward \u2211T\u22121 t=0 \u03b3\ntr(st, at). Here, \u03b8 denotes the parameters for the policy \u03c0 which takes action at given state st at timestep t."}, {"heading": "2.2. Two-player zero-sum discounted games", "text": "The adversarial setting we propose can be expressed as a two player \u03b3 discounted zero-sum Markov game (Littman, 1994; Perolat et al., 2015). This game MDP can be expressed as the tuple: (S,A1,A2,P, r, \u03b3, s0) whereA1 and A2 are the continuous set of actions the players can take. P : S\u00d7A1\u00d7A2\u00d7S \u2192 R is the transition probability density and r : S\u00d7A1\u00d7A2 \u2192 R is the reward of both players. If player 1 (protagonist) is playing strategy \u00b5 and player 2 (adversary) is playing the strategy \u03bd, the reward function is r\u00b5,\u03bd = Ea1\u223c\u00b5(.|s),a2\u223c\u03bd(.|s)[r(s, a1, a2)]. A zero-sum two-player game can be seen as player 1 maximizing the \u03b3 discounted reward while player 2 is minimizing it."}, {"heading": "3. Robust Adversarial RL", "text": ""}, {"heading": "3.1. Robust Control via Adversarial Agents", "text": "Our goal is to learn the policy of the protagonist (denoted by \u00b5) such that it is better (higher reward) and robust (generalizes better to variations in test settings). In the standard reinforcement learning setting, for a given transition function P , we can learn policy parameters \u03b8\u00b5 such that the expected reward is maximized where expected reward for policy \u00b5 from the start s0 is\n\u03c1(\u00b5; \u03b8\u00b5,P) = E [ T\u2211 t=0 \u03b3tr(st, at)|s0, \u00b5,P ] . (1)\nNote that in this formulation the expected reward is conditioned on the transition function since the the transition function defines the roll-out of states. In standard-RL settings, the transition function is fixed (since the physics engine and parameters such as mass, friction are fixed). However, in our setting, we assume that the transition function will have modeling errors and that there will be differences between training and test conditions. Therefore, in our general setting, we should estimate policy parameters \u03b8\u00b5 such that we maximize the expected reward over different possi-\nble transition functions as well. Therefore,\n\u03c1(\u00b5; \u03b8\u00b5) = E P\n[ E [ T\u2211 t=0 \u03b3tr(st, at)|s0, \u00b5,P ]] . (2)\nOptimizing for the expected reward over all transition functions optimizes mean performance, which is a risk neutral formulation that assumes a known distribution over model parameters. A large fraction of policies learned under such a formulation are likely to fail in a different environment. Instead, inspired by work in robust control (Tamar et al., 2014; Rajeswaran et al., 2016), we choose to optimize for conditional value at risk (CVaR):\n\u03c1RC = E [\u03c1|\u03c1 \u2264 Q\u03b1(\u03c1)] (3)\nwhere Q\u03b1(\u03c1) is the \u03b1-quantile of \u03c1-values. Intuitively, in robust control, we want to maximize the worst-possible \u03c1values. But how do you tractably sample trajectories that are in worst \u03b1-percentile? Approaches like EP-Opt (Rajeswaran et al., 2016) sample these worst percentile trajectories by changing parameters such as friction, mass of objects, etc. during rollouts.\nInstead, we introduce an adversarial agent that applies forces on pre-defined locations, and this agent tries to change the trajectories such that reward of the protagonist is minimized. Note that since the adversary tries to minimize the protagonist\u2019s reward, it ends up sampling trajectories from worst-percentile leading to robust controllearning for the protagonist. If the adversary is kept fixed, the protagonist could learn to overfit to its adversarial actions. Therefore, instead of using either a random or a fixed-adversary, we advocate generating the adversarial actions using a learned policy \u03bd. We would also like to point out the connection between our proposed approach and the practice of hard-example mining (Sung & Poggio, 1994; Shrivastava et al., 2016). The adversary in RARL learns to sample hard-examples (worst-trajectories) for the protagonist to learn. Finally, instead of using \u03b1 as percentileparameter, RARL is parameterized by the magnitude of force available to the adversary. As the adversary becomes stronger, RARL optimizes for lower percentiles. However, very high magnitude forces lead to very biased sampling and make the learning unstable. In the extreme case, an unreasonably strong adversary can always prevent the protagonist from achieving the task. Analogously, the traditional RL baseline is equivalent to training with an impotent (zero strength) adversary."}, {"heading": "3.2. Formulating Adversarial Reinforcement Learning", "text": "In our adversarial game, at every timestep t both players observe the state st and take actions a1t \u223c \u00b5(st) and a2t \u223c \u03bd(st). The state transitions st+1 = P(st, a1t , a2t )\nand a reward rt = r(st, a1t , a 2 t ) is obtained from the environment. In our zero-sum game, the protagonist gets a reward r1t = rt while the adversary gets a reward r 2 t = \u2212rt. Hence each step of this MDP can be represented as (st, a 1 t , a 2 t , r 1 t , r 2 t , st+1).\nThe protagonist seeks to maximize the following reward function,\nR1 = Es0\u223c\u03c1,a1\u223c\u00b5(s),a2\u223c\u03bd(s)[ T\u22121\u2211 t=0 r1(s, a1, a2)]. (4)\nSince, the policies \u00b5 and \u03bd are the only learnable components, R1 \u2261 R1(\u00b5, \u03bd). Similarly the adversary attempts to maximize its own reward: R2 \u2261 R2(\u00b5, \u03bd) = \u2212R1(\u00b5, \u03bd). One way to solve this MDP game is by discretizing the continuous state and action spaces and using dynamic programming to solve. (Perolat et al., 2015; Patek, 1997) show that notions of minimax equilibrium and Nash equilibrium are equivalent for this game with optimal equilibrium reward:\nR1\u2217 = min \u03bd max \u00b5 R1(\u00b5, \u03bd) = max \u00b5 min \u03bd R1(\u00b5, \u03bd) (5)\nHowever solutions to finding the Nash equilibria strategies often involve greedily solving N minimax equilibria for a zero-sum matrix game, with N equal to the number of observed datapoints. The complexity of this greedy solution is exponential in the cardinality of the action spaces, which makes it prohibitive (Perolat et al., 2015).\nMost Markov Game approaches require solving for the equilibrium solution for a multiplayer value or minimax-Q function at each iteration. This requires evaluating a typically intractable minimax optimization problem. Instead, we focus on learning stationary policies \u00b5\u2217 and \u03bd\u2217 such that R1(\u00b5\u2217, \u03bd\u2217)\u2192 R1\u2217. This way we can avoid this costly optimization at each iteration as we just need to approximate the advantage function and not determine the equilibrium solution at each iteration."}, {"heading": "3.3. Proposed Method: RARL", "text": "Our algorithm (RARL) optimizes both of the agents using the following alternating procedure. In the first phase, we learn the protagonist\u2019s policy while holding the adversary\u2019s policy fixed. Next, the protagonist\u2019s policy is held constant and the adversary\u2019s policy is learned. This sequence is repeated until convergence.\nAlgorithm 1 outlines our approach in detail. The initial parameters for both players\u2019 policies are sampled from a random distribution. In each of the Niter iterations, we carry out a two-step (alternating) optimization procedure. First, for N\u00b5 iterations, the parameters of the adversary \u03b8\u03bd are held constant while the parameters \u03b8\u00b5 of the protagonist\nAlgorithm 1 RARL (proposed algorithm) Input: Environment E ; Stochastic policies \u00b5 and \u03bd Initialize: Learnable parameters \u03b8\u00b50 for \u00b5 and \u03b8\u03bd0 for \u03bd for i=1,2,..Niter do \u03b8\u00b5i \u2190 \u03b8 \u00b5 i\u22121\nfor j=1,2,..N\u00b5 do {(sit, a1it , a2it , r1it , r2it )} \u2190 roll(E , \u00b5\u03b8\u00b5i , \u03bd\u03b8\u03bdi\u22121 , Ntraj) \u03b8\u00b5i \u2190 policyOptimizer({(sit, a1it , r1it )}, \u00b5, \u03b8 \u00b5 i ) end for \u03b8\u03bdi \u2190 \u03b8\u03bdi\u22121 for j=1,2,..N\u03bd do {(sit, a1it , a2it , r1it , r2it )} \u2190 roll(E , \u00b5\u03b8\u00b5i , \u03bd\u03b8\u03bdi , Ntraj) \u03b8\u03bdi \u2190 policyOptimizer({(sit, a2it , r2it )}, \u03bd, \u03b8\u03bdi )\nend for end for Return: \u03b8\u00b5Niter , \u03b8 \u03bd Niter\nare optimized to maximize R1 (Equation 4). The roll function samples Ntraj trajectories given the environment definition E and the policies for both the players. Note that E contains the transition function P and the reward functions r1 and r2 to generate the trajectories. The tth element of the ith trajectory is of the form (sit, a 1i t , a 2i t , r 1i t , r 2i t ). These trajectories are then split such that the tth element of the ith trajectory is of the form (sit, a i t = a 1i t , r i t = r 1i t ). The protagonist\u2019s parameters \u03b8\u00b5 are then optimized using a policy optimizer. For the second step, player 1\u2019s parameters \u03b8\u00b5 are held constant for the next N\u03bd iterations. Ntraj Trajectories are sampled and split into trajectories such that tth element of the ith trajectory is of the form (sit, a i t = a 2i t , r i t = r 2i t ). Player 2\u2019s parameters \u03b8\u03bd are then optimized. This alternating procedure is repeated for Niter iterations."}, {"heading": "4. Experimental Evaluation", "text": "We now demonstrate the robustness of the RARL algorithm: (a) for training with different initializations; (b) for testing with different conditions; (c) for adversarial disturbances in the testing environment. But first we will describe our implementation and test setting followed by evaluations and results of our algorithm."}, {"heading": "4.1. Implementation", "text": "Our implementation of the adversarial environments build on OpenAI gym\u2019s (Brockman et al., 2016) control environments with the MuJoCo (Todorov et al., 2012) physics simulator. Details of the environments and their corresponding adversarial disturbances are (also see Figure 1):\nInvertedPendulum: The inverted pendulum is mounted on a pivot point on a cart, with the cart restricted to linear movement in a plane. The state space is 4D: position\nand velocity for both the cart and the pendulum. The protagonist can apply 1D forces to keep the pendulum upright. The adversary applies a 2D force on the center of pendulum in order to destabilize it.\nHalfCheetah: The half-cheetah is a planar biped robot with 8 rigid links, including two legs and a torso, along with 6 actuated joints. The 17D state space includes joint angles and joint velocities. The adversary applies a 6D action with 2D forces on the torso and both feet in order to destabilize it.\nSwimmer: The swimmer is a planar robot with 3 links and 2 actuated joints in a viscous container, with the goal of moving forward. The 8D state space includes joint angles and joint velocities. The adversary applies a 3D force to the center of the swimmer.\nHopper: The hopper is a planar monopod robot with 4 rigid links, corresponding to the torso, upper leg, lower leg, and foot, along with 3 actuated joints. The 11D state space includes joint angles and joint velocities. The adversary applies a 2D force on the foot.\nWalker2D: The walker is a planar biped robot consisting of 7 links, corresponding to two legs and a torso, along with 6 actuated joints. The 17D state space includes joint angles and joint velocities. The adversary applies a 4D action with 2D forces on both the feet.\nOur implementation of RARL is built on top of rllab (Duan et al., 2016) and uses Trust Region Policy Optimization (TRPO) (Schulman et al., 2015) as the policy optimizer. For all the tasks and for both the protagonist and adversary, we use a policy network with two hidden layers with 64 neurons each. We train both RARL and the baseline for 100 iterations on InvertedPendulum and for 500 iterations on the other tasks. Hyperparameters of TRPO are selected by grid search."}, {"heading": "4.2. Evaluating Learned Policies", "text": "We evaluate the robustness of our RARL approach compared to the strong TRPO baseline. Since our policies are stochastic in nature and the starting state is also drawn from a distribution, we learn 50 policies for each task with different seeds/initializations. First, we report the mean and variance of cumulative reward (over 50 policies) as a function of the training iterations. Figure 2 shows the mean and variance of the rewards of learned policies for the task of HalfCheetah, Swimmer, Hopper and Walker2D. We omit the graph for InvertedPendulum because the task is easy and both TRPO and RARL show similar performance and similar rewards. As we can see from the figure, for all the four tasks RARL learns a better policy in terms of mean reward and variance as well. This clearly shows that the policy learned by RARL is better than the policy learned\nby TRPO even when there is no disturbance or change of settings between training and test conditions. Table 1 reports the average rewards with their standard deviations for the best learned policy.\nR ew\nar d\nR ew\nar d\nHowever, the primary focus of this paper is to show robustness in training these control policies. One way of visualizing this is by plotting the average rewards for the nth percentile of trained policies. Figure 3 plots these percentile curves and highlight the significant gains in robustness for training for the HalfCheetah, Swimmer and Hopper tasks."}, {"heading": "4.3. Robustness under Adversarial Disturbances", "text": "While deploying controllers in the real world, unmodeled environmental effects can cause controllers to fail. One way of measuring robustness to such effects is by measuring the performance of our learned control polices in the presence of an adversarial disturbance. For this purpose, we train an adversary to apply a disturbance while holding the protagonist\u2019s policy constant. We again show the percentile graphs as described in the section above. RARL\u2019s control policy, since it was trained on similar adversaries, performs better, as seen in Figure 4."}, {"heading": "4.4. Robustness to Test Conditions", "text": "Finally, we evaluate the robustness and generalization of the learned policy with respect to varying test conditions. In this section, we train the policy based on certain mass and friction values; however at test time we evaluate the\nTable 1. Comparison of the best policy learned by RARL and the baseline (mean\u00b1one standard deviation)\nInvertedPendulum HalfCheetah Swimmer Hopper Walker2d\nBaseline 1000\u00b1 0.0 5093\u00b1 44 358\u00b1 2.4 3614\u00b1 2.16 5418\u00b1 87 RARL 1000\u00b1 0.0 5444\u00b1 97 354\u00b1 1.5 3590\u00b1 7.4 5854\u00b1 159\nR ew\nar d\nR ew\nar d\nR ew\nar d\nR ew\nar d\npolicy when different mass and friction values are used in the environment. Note we omit evaluation of Swimmer since the policy for the swimming task is not significantly impacted by a change mass or friction."}, {"heading": "4.4.1. EVALUATION WITH CHANGING MASS", "text": "We describe the results of training with the standard mass variables in OpenAI gym while testing it with different mass. Specifically, the mass of InvertedPendulum, HalfCheetah, Hopper and Walker2D were 4.89, 6.36, 3.53 and 3.53 respectively. At test time, we evaluated the learned policies by changing mass values and estimating the average cumulative rewards. Figure 5 plots the average rewards and their standard deviations against a given torso mass (horizontal axis). As seen in these graphs, RARL policies generalize significantly better.\nR ew\nar d\nR ew\nar d"}, {"heading": "4.4.2. EVALUATION WITH CHANGING FRICTION", "text": "Since several of the control tasks involve contacts and friction (which is often poorly modeled), we evaluate robustness to different friction coefficients in testing. Similar to the evaluation of robustness to mass, the model is trained with the standard variables in OpenAI gym. Figure 6 shows\nthe average reward values with different friction coefficients at test time. It can be seen that the baseline policies fail to generalize and the performance falls significantly when the test friction is different from training. On the other hand RARL shows more resilience to changing friction values.\nWe visualize the increased robustness of RARL in Figure 7, where we test with jointly varying both mass and friction coefficient. As observed from the figure, for most combinations of mass and friction values RARL leads significantly higher reward values compared to the baseline."}, {"heading": "4.5. Visualizing the Adversarial Policy", "text": "Finally, we visualize the adversarial policy for the case of InvertedPendulum and Hopper to see whether the learned policies are human interpretable. As shown in Figure 8, the direction of the force applied by the adversary agrees with human intuition: specifically, when the cart is stationary and the pole is already tilted (top row), the adversary attempts to accentuate the tilt. Similarly, when the cart is moving swiftly and the pole is vertical (bottom row), the adversary applies a force in the direction of the cart\u2019s motion. The pole will fall unless the cart speeds up further (which can also cause the cart to go out of bounds). Note that the naive policy of pushing in the opposite direction would be less effective since the protagonist could slow the cart to stabilize the pole.\nSimilarly for the Hopper task in Figure 9, the adversary applies horizontal forces to impede the motion when the Hopper is in the air (left) while applying forces to counteract gravity and reduce friction when the Hopper is interacting with the ground (right)."}, {"heading": "5. Related Research", "text": "Recent applications of deep reinforcement learning (deep RL) have shown great success in a variety of tasks ranging from games (Mnih et al., 2015; Silver et al., 2016), robot control (Gu et al., 2016; Lillicrap et al., 2015; Mordatch et al., 2015), to meta learning (Zoph & Le, 2016). An overview of recent advances in deep RL is presented in (Li, 2017) and (Kaelbling et al., 1996; Kober & Peters, 2012) provide a comprehensive history of RL research.\nLearned policies should be robust to uncertainty and parameter variation to ensure predicable behavior, which is essential for many practical applications of RL including robotics. Furthermore, the process of learning policies should employ safe and effective exploration with improved sample efficiency to reduce risk of costly failure. These issues have long been recognized and investigated in reinforcement learning (Garc\u0131a & Ferna\u0301ndez, 2015) and have an even longer history in control theory research\n(Zhou & Doyle, 1998). These issues are exacerbated in deep RL by using neural networks, which while more expressible and flexible, often require significantly more data to train and produce potentially unstable policies.\nIn terms of (Garc\u0131a & Ferna\u0301ndez, 2015) taxonomy, our approach lies in the class of worst-case formulations. We model the problem as an H\u221e optimal control problem (Bas\u0327ar & Bernhard, 2008). In this formulation, nature (which may represent input, transition or model uncertainty) is treated as an adversary in a continuous dynamic zero-sum game. We attempt to find the minimax solution to the reward optimization problem. This formulation was introduced as robust RL (RRL) in (Morimoto & Doya, 2005). RRL proposes a model-free an actor-disturber-critic method. Solving for the optimal strategy for general nonlinear systems requires is often analytically infeasible for most problems. To address this, we extend RRL\u2019s modelfree formulation using deep RL via TRPO (Schulman et al., 2015) with neural networks as the function approximator.\nOther worst-case formulations have been introduced. (Nilim & El Ghaoui, 2005) solve finite horizon tabular MDPs using a minimax form of dynamic programming. Using a similar game theoretic formulation (Littman, 1994) introduces the notion of a Markov Game to solve tabular problems, which involves linear program (LP) to solve the game optimization problem. (Sharma & Gopal, 2007) extend the Markov game formulation using a trained neural network for the policy and approximating the game to continue using LP to solve the game. (Wiesemann et al., 2013) present an enhancement to standard MDP that provides probabilistic guarantees to unknown model parameters. Other approaches are risk-based including (Tamar et al., 2014; Delage & Mannor, 2010), which formulate various mechanisms of percentile risk into the formulation. Our approach focuses on continuous space problems and is a model-free approach that requires explicit parametric formulation of model uncertainty.\nAdversarial methods have been used in other learning problems including (Goodfellow et al., 2015), which leverages adversarial examples to train a more robust classifiers and (Goodfellow et al., 2014; Dumoulin et al., 2016), which uses an adversarial lost function for a discriminator to train a generative model. In (Pinto et al., 2016) two supervised agents were trained with one acting as an adversary for selfsupervised learning which showed improved robot grasping. Other adversarial multiplayer approaches have been proposed including (Heinrich & Silver, 2016) to perform self-play or fictitious play. Refer to (Bus\u0327oniu et al., 2010) for an review of multiagent RL techniques.\nRecent deep RL approaches to the problem focus on explicit parametric model uncertainty. (Heess et al., 2015) use recurrent neural networks to perform direct adaptive\nR ew\nar d\nB as\nel in\ne (T\nR P\nO )\nR A\nR L\ncontrol. Indirect adaptive control was applied in (Yu et al., 2017) for online parameter identification. (Rajeswaran et al., 2016) learn a robust policy by sampling the worst case trajectories from a class of parametrized models, to learn a robust policy."}, {"heading": "6. Conclusion", "text": "We have presented a novel adversarial reinforcement learning framework, RARL, that is: (a) robust to training initializations; (b) generalizes better and is robust to environmental changes between training and test conditions; (c)\nrobust to disturbances in the test environment that are hard to model during training. Our core idea is that modeling errors should be viewed as extra forces/disturbances in the system. Inspired by this insight, we propose modeling uncertainties via an adversary that applies disturbances to the system. Instead of using a fixed policy, the adversary is reinforced and learns an optimal policy to optimally thwart\nthe protagonist. Our work shows that the adversary effectively samples hard examples (trajectories with worst rewards) leading to a more robust control strategy."}], "references": [{"title": "H-infinity optimal control and related minimax design problems: a dynamic game approach", "author": ["Ba\u015far", "Tamer", "Bernhard", "Pierre"], "venue": "Springer Science & Business Media,", "citeRegEx": "Ba\u015far et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Ba\u015far et al\\.", "year": 2008}, {"title": "Multi-agent reinforcement learning: An overview", "author": ["Bu\u015foniu", "Lucian", "Babu\u0161ka", "Robert", "De Schutter", "Bart"], "venue": "In Innovations in multi-agent systems and applications-1,", "citeRegEx": "Bu\u015foniu et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Bu\u015foniu et al\\.", "year": 2010}, {"title": "Transfer from simulation to real world through learning deep inverse dynamics model", "author": ["Christiano", "Paul", "Shah", "Zain", "Mordatch", "Igor", "Schneider", "Jonas", "Blackwell", "Trevor", "Tobin", "Joshua", "Abbeel", "Pieter", "Zaremba", "Wojciech"], "venue": "arXiv preprint arXiv:1610.03518,", "citeRegEx": "Christiano et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Christiano et al\\.", "year": 2016}, {"title": "Percentile optimization for Markov decision processes with parameter uncertainty", "author": ["Delage", "Erick", "Mannor", "Shie"], "venue": "Operations research,", "citeRegEx": "Delage et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Delage et al\\.", "year": 2010}, {"title": "Benchmarking deep reinforcement learning for continuous control", "author": ["Duan", "Yan", "Chen", "Xi", "Houthooft", "Rein", "Schulman", "John", "Abbeel", "Pieter"], "venue": "In Proceedings of the 33rd International Conference on Machine Learning (ICML),", "citeRegEx": "Duan et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Duan et al\\.", "year": 2016}, {"title": "Adversarially learned inference", "author": ["Dumoulin", "Vincent", "Belghazi", "Ishmael", "Poole", "Ben", "Lamb", "Alex", "Arjovsky", "Martin", "Mastropietro", "Olivier", "Courville", "Aaron"], "venue": "arXiv preprint arXiv:1606.00704,", "citeRegEx": "Dumoulin et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Dumoulin et al\\.", "year": 2016}, {"title": "A comprehensive survey on safe reinforcement learning", "author": ["Garc\u0131a", "Javier", "Fern\u00e1ndez", "Fernando"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Garc\u0131a et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Garc\u0131a et al\\.", "year": 2015}, {"title": "Generative adversarial nets", "author": ["Goodfellow", "Ian", "Pouget-Abadie", "Jean", "Mirza", "Mehdi", "Xu", "Bing", "Warde-Farley", "David", "Ozair", "Sherjil", "Courville", "Aaron", "Bengio", "Yoshua"], "venue": "In Neural Information Processing Systems (NIPS),", "citeRegEx": "Goodfellow et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2014}, {"title": "Explaining and harnessing adversarial examples", "author": ["Goodfellow", "Ian J", "Shlens", "Jonathon", "Szegedy", "Christian"], "venue": "International Conference on Learning Representations (ICLR),", "citeRegEx": "Goodfellow et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Goodfellow et al\\.", "year": 2015}, {"title": "Memory-based control with recurrent neural networks", "author": ["Heess", "Nicolas", "Hunt", "Jonathan J", "Lillicrap", "Timothy P", "Silver", "David"], "venue": "arXiv preprint arXiv:1512.04455,", "citeRegEx": "Heess et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Heess et al\\.", "year": 2015}, {"title": "Deep reinforcement learning from self-play in imperfect-information games", "author": ["Heinrich", "Johannes", "Silver", "David"], "venue": "arXiv preprint arXiv:1603.01121,", "citeRegEx": "Heinrich et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Heinrich et al\\.", "year": 2016}, {"title": "Reinforcement learning: A survey", "author": ["Kaelbling", "Leslie Pack", "Littman", "Michael L", "Moore", "Andrew W"], "venue": "Journal of artificial intelligence research,", "citeRegEx": "Kaelbling et al\\.,? \\Q1996\\E", "shortCiteRegEx": "Kaelbling et al\\.", "year": 1996}, {"title": "A natural policy gradient", "author": ["Kakade", "Sham"], "venue": "Advances in neural information processing systems,", "citeRegEx": "Kakade and Sham.,? \\Q2002\\E", "shortCiteRegEx": "Kakade and Sham.", "year": 2002}, {"title": "Reinforcement learning in robotics: A survey", "author": ["Kober", "Jens", "Peters", "Jan"], "venue": "In Reinforcement Learning,", "citeRegEx": "Kober et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Kober et al\\.", "year": 2012}, {"title": "Deep reinforcement learning: An overview", "author": ["Li", "Yuxi"], "venue": "arXiv preprint arXiv:1701.07274,", "citeRegEx": "Li and Yuxi.,? \\Q2017\\E", "shortCiteRegEx": "Li and Yuxi.", "year": 2017}, {"title": "Continuous control with deep reinforcement learning", "author": ["Lillicrap", "Timothy P", "Hunt", "Jonathan J", "Pritzel", "Alexander", "Heess", "Nicolas", "Erez", "Tom", "Tassa", "Yuval", "Silver", "David", "Wierstra", "Daan"], "venue": "arXiv preprint arXiv:1509.02971,", "citeRegEx": "Lillicrap et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Lillicrap et al\\.", "year": 2015}, {"title": "Markov games as a framework for multi-agent reinforcement learning", "author": ["Littman", "Michael L"], "venue": "In Proceedings of the eleventh international conference on machine learning,", "citeRegEx": "Littman and L.,? \\Q1994\\E", "shortCiteRegEx": "Littman and L.", "year": 1994}, {"title": "Human-level control through deep reinforcement learning", "author": ["Mnih", "Volodymyr"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "Mnih and Volodymyr,? \\Q2015\\E", "shortCiteRegEx": "Mnih and Volodymyr", "year": 2015}, {"title": "Interactive control of diverse complex characters with neural networks", "author": ["Mordatch", "Igor", "Lowrey", "Kendall", "Andrew", "Galen", "Popovic", "Zoran", "Todorov", "Emanuel V"], "venue": "In Advances in Neural Information Processing Systems,", "citeRegEx": "Mordatch et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mordatch et al\\.", "year": 2015}, {"title": "Robust reinforcement learning", "author": ["Morimoto", "Jun", "Doya", "Kenji"], "venue": "Neural computation,", "citeRegEx": "Morimoto et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Morimoto et al\\.", "year": 2005}, {"title": "Robust control of Markov decision processes with uncertain transition matrices", "author": ["Nilim", "Arnab", "El Ghaoui", "Laurent"], "venue": "Operations Research,", "citeRegEx": "Nilim et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Nilim et al\\.", "year": 2005}, {"title": "Stochastic and shortest path games: theory and algorithms", "author": ["Patek", "Stephen David"], "venue": "PhD thesis, Massachusetts Institute of Technology,", "citeRegEx": "Patek and David.,? \\Q1997\\E", "shortCiteRegEx": "Patek and David.", "year": 1997}, {"title": "Approximate dynamic programming for twoplayer zero-sum games", "author": ["Perolat", "Julien", "Scherrer", "Bruno", "Piot", "Bilal", "Pietquin", "Olivier"], "venue": "In ICML,", "citeRegEx": "Perolat et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Perolat et al\\.", "year": 2015}, {"title": "Supervision via competition: Robot adversaries for learning", "author": ["Pinto", "Lerrel", "Davidson", "James", "Gupta", "Abhinav"], "venue": "tasks. CoRR,", "citeRegEx": "Pinto et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Pinto et al\\.", "year": 2016}, {"title": "EPOpt: Learning robust neural network policies using model ensembles", "author": ["Rajeswaran", "Aravind", "Ghotra", "Sarvjeet", "Ravindran", "Balaraman", "Levine", "Sergey"], "venue": "arXiv preprint arXiv:1610.01283,", "citeRegEx": "Rajeswaran et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Rajeswaran et al\\.", "year": 2016}, {"title": "Sim-toreal robot learning from pixels with progressive nets", "author": ["Rusu", "Andrei A", "Vecerik", "Matej", "Roth\u00f6rl", "Thomas", "Heess", "Nicolas", "Pascanu", "Razvan", "Hadsell", "Raia"], "venue": "arXiv preprint arXiv:1610.04286,", "citeRegEx": "Rusu et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Rusu et al\\.", "year": 2016}, {"title": "Trust region policy optimization", "author": ["Schulman", "John", "Levine", "Sergey", "Moritz", "Philipp", "Jordan", "Michael I", "Abbeel", "Pieter"], "venue": "CoRR, abs/1502.05477,", "citeRegEx": "Schulman et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Schulman et al\\.", "year": 2015}, {"title": "A robust Markov game controller for nonlinear systems", "author": ["Sharma", "Rajneesh", "Gopal", "Madan"], "venue": "Applied Soft Computing,", "citeRegEx": "Sharma et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Sharma et al\\.", "year": 2007}, {"title": "Training region-based object detectors with online hard example mining", "author": ["Shrivastava", "Abhinav", "Gupta", "Girshick", "Ross B"], "venue": null, "citeRegEx": "Shrivastava et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Shrivastava et al\\.", "year": 2016}, {"title": "Mastering the game of Go with deep neural networks and tree search", "author": ["Silver", "David"], "venue": null, "citeRegEx": "Silver and David,? \\Q2016\\E", "shortCiteRegEx": "Silver and David", "year": 2016}, {"title": "Learning and example selection for object and pattern detection", "author": ["K. Sung", "T. Poggio"], "venue": "MIT A.I. Memo,", "citeRegEx": "Sung and Poggio,? \\Q1994\\E", "shortCiteRegEx": "Sung and Poggio", "year": 1994}, {"title": "Optimizing the CVaR via sampling", "author": ["Tamar", "Aviv", "Glassner", "Yonatan", "Mannor", "Shie"], "venue": "arXiv preprint arXiv:1404.3862,", "citeRegEx": "Tamar et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Tamar et al\\.", "year": 2014}, {"title": "Mujoco: A physics engine for model-based control", "author": ["Todorov", "Emanuel", "Erez", "Tom", "Tassa", "Yuval"], "venue": "In Intelligent Robots and Systems (IROS),", "citeRegEx": "Todorov et al\\.,? \\Q2012\\E", "shortCiteRegEx": "Todorov et al\\.", "year": 2012}, {"title": "Robust Markov decision processes", "author": ["Wiesemann", "Wolfram", "Kuhn", "Daniel", "Rustem", "Ber\u00e7"], "venue": "Mathematics of Operations Research,", "citeRegEx": "Wiesemann et al\\.,? \\Q2013\\E", "shortCiteRegEx": "Wiesemann et al\\.", "year": 2013}, {"title": "Simple statistical gradient-following algorithms for connectionist reinforcement learning", "author": ["Williams", "Ronald J"], "venue": "Machine learning,", "citeRegEx": "Williams and J.,? \\Q1992\\E", "shortCiteRegEx": "Williams and J.", "year": 1992}, {"title": "Preparing for the unknown: Learning a universal policy with online system identification", "author": ["Yu", "Wenhao", "Liu", "C. Karen", "Turk", "Greg"], "venue": "arXiv preprint arXiv:1702.02453,", "citeRegEx": "Yu et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Yu et al\\.", "year": 2017}, {"title": "Essentials of robust control, volume 104", "author": ["Zhou", "Kemin", "Doyle", "John Comstock"], "venue": "Prentice hall Upper Saddle River, NJ,", "citeRegEx": "Zhou et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Zhou et al\\.", "year": 1998}, {"title": "Neural architecture search with reinforcement learning", "author": ["Zoph", "Barret", "Le", "Quoc V"], "venue": "arXiv preprint arXiv:1611.01578,", "citeRegEx": "Zoph et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Zoph et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 15, "context": "High-capacity function approximators such as deep neural networks have led to increased success in the field of reinforcement learning (Mnih et al., 2015; Silver et al., 2016; Gu et al., 2016; Lillicrap et al., 2015; Mordatch et al., 2015).", "startOffset": 135, "endOffset": 239}, {"referenceID": 18, "context": "High-capacity function approximators such as deep neural networks have led to increased success in the field of reinforcement learning (Mnih et al., 2015; Silver et al., 2016; Gu et al., 2016; Lillicrap et al., 2015; Mordatch et al., 2015).", "startOffset": 135, "endOffset": 239}, {"referenceID": 2, "context": "This reality gap often results in unsuccessful transfer if the learned policy isn\u2019t robust to modeling errors (Christiano et al., 2016; Rusu et al., 2016).", "startOffset": 110, "endOffset": 154}, {"referenceID": 25, "context": "This reality gap often results in unsuccessful transfer if the learned policy isn\u2019t robust to modeling errors (Christiano et al., 2016; Rusu et al., 2016).", "startOffset": 110, "endOffset": 154}, {"referenceID": 24, "context": ") and learn an ensemble of policies for different possible variations (Rajeswaran et al., 2016).", "startOffset": 70, "endOffset": 95}, {"referenceID": 26, "context": "Batch policy algorithms like (Williams, 1992; Kakade, 2002; Schulman et al., 2015) attempt to learn a stochastic policy \u03c0\u03b8 : S \u00d7 A \u2192 R that maximizes the cumulative discounted reward \u2211T\u22121 t=0 \u03b3 r(st, at).", "startOffset": 29, "endOffset": 82}, {"referenceID": 22, "context": "The adversarial setting we propose can be expressed as a two player \u03b3 discounted zero-sum Markov game (Littman, 1994; Perolat et al., 2015).", "startOffset": 102, "endOffset": 139}, {"referenceID": 31, "context": "Instead, inspired by work in robust control (Tamar et al., 2014; Rajeswaran et al., 2016), we choose to optimize for conditional value at risk (CVaR):", "startOffset": 44, "endOffset": 89}, {"referenceID": 24, "context": "Instead, inspired by work in robust control (Tamar et al., 2014; Rajeswaran et al., 2016), we choose to optimize for conditional value at risk (CVaR):", "startOffset": 44, "endOffset": 89}, {"referenceID": 24, "context": "But how do you tractably sample trajectories that are in worst \u03b1-percentile? Approaches like EP-Opt (Rajeswaran et al., 2016) sample these worst percentile trajectories by changing parameters such as friction, mass of objects, etc.", "startOffset": 100, "endOffset": 125}, {"referenceID": 28, "context": "We would also like to point out the connection between our proposed approach and the practice of hard-example mining (Sung & Poggio, 1994; Shrivastava et al., 2016).", "startOffset": 117, "endOffset": 164}, {"referenceID": 22, "context": "(Perolat et al., 2015; Patek, 1997) show that notions of minimax equilibrium and Nash equilibrium are equivalent for this game with optimal equilibrium reward:", "startOffset": 0, "endOffset": 35}, {"referenceID": 22, "context": "The complexity of this greedy solution is exponential in the cardinality of the action spaces, which makes it prohibitive (Perolat et al., 2015).", "startOffset": 122, "endOffset": 144}, {"referenceID": 32, "context": ", 2016) control environments with the MuJoCo (Todorov et al., 2012) physics simulator.", "startOffset": 45, "endOffset": 67}, {"referenceID": 4, "context": "Our implementation of RARL is built on top of rllab (Duan et al., 2016) and uses Trust Region Policy Optimization (TRPO) (Schulman et al.", "startOffset": 52, "endOffset": 71}, {"referenceID": 26, "context": ", 2016) and uses Trust Region Policy Optimization (TRPO) (Schulman et al., 2015) as the policy optimizer.", "startOffset": 57, "endOffset": 80}, {"referenceID": 15, "context": ", 2016), robot control (Gu et al., 2016; Lillicrap et al., 2015; Mordatch et al., 2015), to meta learning (Zoph & Le, 2016).", "startOffset": 23, "endOffset": 87}, {"referenceID": 18, "context": ", 2016), robot control (Gu et al., 2016; Lillicrap et al., 2015; Mordatch et al., 2015), to meta learning (Zoph & Le, 2016).", "startOffset": 23, "endOffset": 87}, {"referenceID": 11, "context": "An overview of recent advances in deep RL is presented in (Li, 2017) and (Kaelbling et al., 1996; Kober & Peters, 2012) provide a comprehensive history of RL research.", "startOffset": 73, "endOffset": 119}, {"referenceID": 26, "context": "To address this, we extend RRL\u2019s modelfree formulation using deep RL via TRPO (Schulman et al., 2015) with neural networks as the function approximator.", "startOffset": 78, "endOffset": 101}, {"referenceID": 33, "context": "(Wiesemann et al., 2013) present an enhancement to standard MDP that provides probabilistic guarantees to unknown model parameters.", "startOffset": 0, "endOffset": 24}, {"referenceID": 31, "context": "Other approaches are risk-based including (Tamar et al., 2014; Delage & Mannor, 2010), which formulate various mechanisms of percentile risk into the formulation.", "startOffset": 42, "endOffset": 85}, {"referenceID": 8, "context": "Adversarial methods have been used in other learning problems including (Goodfellow et al., 2015), which leverages adversarial examples to train a more robust classifiers and (Goodfellow et al.", "startOffset": 72, "endOffset": 97}, {"referenceID": 7, "context": ", 2015), which leverages adversarial examples to train a more robust classifiers and (Goodfellow et al., 2014; Dumoulin et al., 2016), which uses an adversarial lost function for a discriminator to train a generative model.", "startOffset": 85, "endOffset": 133}, {"referenceID": 5, "context": ", 2015), which leverages adversarial examples to train a more robust classifiers and (Goodfellow et al., 2014; Dumoulin et al., 2016), which uses an adversarial lost function for a discriminator to train a generative model.", "startOffset": 85, "endOffset": 133}, {"referenceID": 23, "context": "In (Pinto et al., 2016) two supervised agents were trained with one acting as an adversary for selfsupervised learning which showed improved robot grasping.", "startOffset": 3, "endOffset": 23}, {"referenceID": 1, "context": "Refer to (Bu\u015foniu et al., 2010) for an review of multiagent RL techniques.", "startOffset": 9, "endOffset": 31}, {"referenceID": 9, "context": "(Heess et al., 2015) use recurrent neural networks to perform direct adaptive", "startOffset": 0, "endOffset": 20}, {"referenceID": 35, "context": "Indirect adaptive control was applied in (Yu et al., 2017) for online parameter identification.", "startOffset": 41, "endOffset": 58}, {"referenceID": 24, "context": "(Rajeswaran et al., 2016) learn a robust policy by sampling the worst case trajectories from a class of parametrized models, to learn a robust policy.", "startOffset": 0, "endOffset": 25}], "year": 2017, "abstractText": "Deep neural networks coupled with fast simulation and improved computation have led to recent successes in the field of reinforcement learning (RL). However, most current RL-based approaches fail to generalize since: (a) the gap between simulation and real world is so large that policy-learning approaches fail to transfer; (b) even if policy learning is done in real world, the data scarcity leads to failed generalization from training to test scenarios (e.g., due to different friction or object masses). Inspired from H\u221e control methods, we note that both modeling errors and differences in training and test scenarios can be viewed as extra forces/disturbances in the system. This paper proposes the idea of robust adversarial reinforcement learning (RARL), where we train an agent to operate in the presence of a destabilizing adversary that applies disturbance forces to the system. The jointly trained adversary is reinforced \u2013 that is, it learns an optimal destabilization policy. We formulate the policy learning as a zero-sum, minimax objective function. Extensive experiments in multiple environments (InvertedPendulum, HalfCheetah, Swimmer, Hopper and Walker2d) conclusively demonstrate that our method (a) improves training stability; (b) is robust to differences in training/test conditions; and c) outperform the baseline even in the absence of the adversary.", "creator": "LaTeX with hyperref package"}}}