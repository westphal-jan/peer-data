{"id": "1705.08272", "review": {"conference": "nips", "VERSION": "v1", "DATE_OF_SUBMISSION": "19-May-2017", "title": "Matching neural paths: transfer from recognition to correspondence search", "abstract": "quantitative machine learning networks require finding per - part correspondences between individuals. in this work most focus on fixed - level language - specific highly connected matching curve. solve accordingly, use a hierarchical semantic representation of the objects, coming from a convolutional neural network, effectively solve this uncertainty. similar models like low - level correspondence recognition method might thus be an area within these species where the ground - connectivity correspondences sometimes hard should establish. we show how transfer from recognition models be mixed together avoid such training. our possibility is to mark parts above \" matching \" if their features are close to that other at precisely present levels of convolutional conceptual hierarchy ( optimal structures ). although the overall number of shortest paths is exponential in the number of trees, now propose intrinsic polynomial algorithm for aggregating versions of problems making a one variable pass. the empirical validation is done computing the task tree stereo correspondence and find that we exploit competitive superiority among sorting methods than do primarily recall highly descriptive neural data.", "histories": [["v1", "Fri, 19 May 2017 16:40:35 GMT  (2894kb,D)", "https://arxiv.org/abs/1705.08272v1", "Submitted to NIPS 2017"], ["v2", "Wed, 24 May 2017 08:04:30 GMT  (2873kb,D)", "http://arxiv.org/abs/1705.08272v2", null]], "COMMENTS": "Submitted to NIPS 2017", "reviews": [], "SUBJECTS": "cs.CV cs.LG cs.NE", "authors": ["nikolay savinov", "lubor ladicky", "marc pollefeys"], "accepted": true, "id": "1705.08272"}, "pdf": {"name": "1705.08272.pdf", "metadata": {"source": "CRF", "title": "Matching neural paths: transfer from recognition to correspondence search", "authors": ["Nikolay Savinov", "Lubor Ladicky", "Marc Pollefeys"], "emails": ["nikolay.savinov@inf.ethz.ch", "lubor.ladicky@inf.ethz.ch", "marc.pollefeys@inf.ethz.ch"], "sections": [{"heading": null, "text": "Many machine learning tasks require finding per-part correspondences between objects. In this work we focus on low-level correspondences \u2014 a highly ambiguous matching problem. We propose to use a hierarchical semantic representation of the objects, coming from a convolutional neural network, to solve this ambiguity. Training it for low-level correspondence prediction directly might not be an option in some domains where the ground-truth correspondences are hard to obtain. We show how transfer from recognition can be used to avoid such training. Our idea is to mark parts as \u201cmatching\u201d if their features are close to each other at all the levels of convolutional feature hierarchy (neural paths). Although the overall number of such paths is exponential in the number of layers, we propose a polynomial algorithm for aggregating all of them in a single backward pass. The empirical validation is done on the task of stereo correspondence and demonstrates that we achieve competitive results among the methods which do not use labeled target domain data."}, {"heading": "1 Introduction", "text": "Finding per-part correspondences between objects is a long-standing problem in machine learning. The level at which correspondences are established can go as low as pixels for images or millisecond timestamps for sound signals. Typically, it is highly ambiguous to match at such a low level: a pixel or a timestamp just does not contain enough information to be discriminative and many false positives will follow. A hierarchical semantic representation could help to solve the ambiguity: we could choose the low-level match which also matches at the higher levels. For example, a car contains a wheel which contains a bolt. If we want to check if this bolt matches the bolt in another view of the car, we should check if the wheel and the car match as well.\nOne possible hierarchical semantic representation could be computed by a convolutional neural network. The features in such a network are composed in a hierarchical manner: the lower-level features are used to compute higher-level features by applying convolutions, max-poolings and nonlinear activation functions on them. Nevertheless, training such a convolutional neural network for correspondence prediction directly might not be an option in some domains where the ground-truth correspondences are hard and expensive to obtain. This raises the question of scalability of such approaches and motivates the search for methods which do not require training correspondence data.\nTo address the training data problem, we could transfer the knowledge from the source domain where the labels are present to the target domain where no labels or few labeled data are present. The most common form of transfer is from classification tasks. Its promise is two-fold. First, classification labels are one of the easiest to obtain as it is a natural task for humans. This allows to create huge recognition datasets like Imagenet [17]. Second, the features from the low to mid-levels have been shown to transfer well to a variety of tasks [21], [2], [14].\nar X\niv :1\n70 5.\n08 27\n2v 2\n[ cs\n.C V\n] 2\n4 M\nay 2\nAlthough there has been a huge progress in transfer from classification to detection [6], [16], [18], [15], segmentation [11], [1] and other semantic reasoning tasks like single-image depth prediction [3], the transfer to correspondence search has been limited [12], [9], [7].\nWe propose a general solution to unsupervised transfer from recognition to correspondence search at the lowest level (pixels, sound millisecond timestamps). Our approach is to match paths of activations coming from a convolutional neural network, applied on two objects to be matched. More precisely, to establish matching on the lowest level, we require the features to match at all different levels of convolutional feature hierarchy. Those different-level features form paths. One such path would consist of neural activations reachable from the lowest-level feature to the highest-level feature in the network topology (in other words, the lowest level feature lies in the receptive field of the highest level). Since every lowest-level feature belongs to many paths, we do voting based on all of them.\nAlthough the overall number of such paths is exponential in the number of layers and thus infeasible to compute naively, we prove that the voting is possible in polynomial time in a single backward pass through the network. The algorithm is based on dynamic programming and is similar to the backward pass for gradient computation in the neural network.\nEmpirical validation is done on the task of stereo correspondence on two datasets: KITTI 2012 [5] and KITTI 2015 [13]. We quantitatively show that our method is competitive among the methods which do not require labeled target domain data. We also qualitatively show that even dramatic changes in low-level structure can be handled reasonably by our method due to the robustness of the recognition hierarchy: we apply different style transfers [4] to corresponding images in KITTI 2015 and still successfully find correspondences."}, {"heading": "2 Notation", "text": "Our method is generally applicable to the cases where the input data has a multi-dimensional grid topology layout. We will assume input objects o to be from the set of B-dimensional grids \u03a6 \u2282 RB and run convolutional neural networks on those grids. The per-layer activations from those networks will be contained in the set of (B + 1)-dimensional grids \u03a8 \u2282 RB+1. Both the input data and the activations will be indexed by a (B + 1)-dimensional vector x = (x, y, . . . , c) \u2208 NB+1, where x is a column index, y is a row index, etc., and c \u2208 {1, . . . , C} is the channel index (we will assume C = 1 for the input data, which is a non-restrictive assumption as we will explain later).\nWe will search for correspondences between those grids, thus our goal will be to estimate shifts d \u2208 D \u2282 ZB+1 for all elements in the grid. The choice of the shift set D is task-dependent. For example, for sound B = 1 and only 1D shifts can be considered. For images, B = 2 and D could be a set of 1D shifts (usually called a stereo task) or a set of 2D shifts (usually called an optical flow task).\nIn this work, we will be dealing with convolutional neural network architectures, consisting of convolutions, max-poolings and non-linear activation functions (one example of such an architecture is a VGG-net [19], if we omit softmax which we will not use for the transfer). We assume every convolutional layer to be followed by a non-linear activation function throughout the paper and will not specify those functions explicitly.\nThe computational graph of these architectures is a directed acyclic graph G = {A,E}, where A = {a1, . . . , a|A|} is a set of nodes, corresponding to neuron activations (|A| denotes the size of this set), and E = {e1, . . . , e|E|} is a set of arcs, corresponding to computational dependencies (|E| denotes the size of this set). Each arc is represented as a tuple (ai, aj), where ai is the input (origin), aj is the output (endpoint). The node set consists of disjoint layers A = \u22c3L `=0A`. The arcs are only allowed to go from the previous layer to the next one.\nWe will use the notation A`(x) for the node in `-th layer at position x; in(x`) for the set of origins x`\u22121 of arcs, entering layer ` at position x` of the reference object; x`+1 \u2208 out(x`) for the set of endpoints of arcs, exiting layer ` at position x` of the reference object. Let f` \u2208 F = {maxpool, conv} be the mathematic operator which corresponds to forward computation in layer ` as a \u2190 f`(in(a)), a \u2208 A` (with a slight abuse of notation, we use a for both the nodes in the computational graph and the activation values which are computed in those nodes).\nInput\nConvolution\nMax-pooling\nConvolution\nMax-pooling\nk1(d) = 3 k1(d) = 3 k1(d) = 2\nk0(d) = 3 k0(d) = 3 k0(d) = 2\nk2(d) = 1 k2(d) = 1 k2(d) = 1\nk3(d) = 1 k3(d) = 1 k3(d) = 1\nk4(d) = 0 k4(d) = 0 k4(d) = 0\nReference G Searched G\u2032 Shifts\nFigure 1: Four siamese paths are shown. Two of them (red) have the same origin and support the hypothesis of the shift d = 3 for this origin. The other two (green and pink) have different origins and support hypotheses d = 3 and d = 2 for their respective origins."}, {"heading": "3 Correspondence via path matching", "text": "We will consider two objects, reference o \u2208 \u03a6 and searched o\u2032 \u2208 \u03a6, for which we want to find correspondences. After applying a CNN on them, we get graphs G and G\u2032 of activations. The goal is to establish correspondences between the input-data layers A0 and A\u20320. That is, every cell A0(x) in the reference object o \u2208 \u03a6 has a certain shift d \u2208 D in the searched object o\u2032 \u2208 \u03a6, and we want to estimate d.\nHere comes the cornerstone idea of our method: we establish the matching of A0(x) with A\u20320(x\u2212 d) for a shift d if there is a pair of \u201cparallel\u201d paths (we call this pair a siamese path), originating at those nodes and ending at the last layers AL, A\u2032L, which match. This pair of paths must have the same spatial shift with respect to each other at all layers, up to subsampling, and go through the same feature channels with respect to each other. We take the subsampling into account by per-layer functions\nk`(d) = \u03b3`(k`\u22121(d)), ` = 1, . . . , L, \u03b3`(d\u0303) =\n\u230a d\u0303\nq`\n\u230b , k0(d) = d, (1)\nwhere k`(d) is how the zero-layer shift d transforms at layer `, q` is the `-th layer spatial subsampling factor (note that rounding and division on vectors is done element-wise). Then a siamese path P can be represented as\nP = (p, p\u2032), p = (A0(x P 0 ), . . . , AL(x P L )), p \u2032 = (A\u20320(x P 0 \u2212 k0(d)), . . . , A\u2032L(xPL \u2212 kL(d)))\n(2)\nwhere xP0 = x and x P ` denotes the position at which the path P intersects layer ` of the reference activation graph. Such paths are illustrated in Fig. 1. The logic is simple: matching in a siamese path means that the recognition hierarchy detects the same features at different perception levels with the same shifts (up to subsampling) with respect to the currently estimated position x, which allows for a confident prediction of match. The fact that a siamese path is \u201cmatched\u201d can be established by computing the matching function (high if it matches, low if not)\nM(P ) = L\u2299 `=0 m`(A`(x P ` ), A \u2032 `(x P ` \u2212 k`(d))) (3)\nwhere m`(\u00b7, \u00b7) is a matching function for individual neurons (prefers them both to be similar and non-zero at the same time) and is a logical-and-like operator. Both will be discussed later. Since we want to estimate the shift for a node A0(x), we will consider all possible shifts and vote for each of them. Let us denote a set of siamese paths, starting at A`(x) and A\u2032`(x\u2212 d) and ending at the last layer, as P`(x,d).\nFor every shift d \u2208 D we introduce U(x,d) as the log-likelihood of the event that d is the correct shift, i.e. A0(x) matches A\u20320(x\u2212 d). To collect the evidence from all possible paths, we \u201csum up\u201d the matching functions for all individual paths, leading to\nU(x,d) = \u2295\nP\u2208P0(x,d) M(P ) = \u2295 P\u2208P0(x,d) L\u2299 `=0 m`(A`(x P ` ), A \u2032 `(x P ` \u2212 k`(d))) (4)\nwhere the sum-like operator \u2295 will be discussed later. The distribution U(x,d) can be used to either obtain the solution as d\u2217(x) = arg maxd\u2208D U(x,d) or to post-process the distribution with any kind of spatial smoothing optimization and then again take the best-cost solution.\nThe obvious obstacle to using the distribution U(x,d) is that Observation 1. If K is the minimal number of activation channels in all the layers of the network and L is the number of layers, the number of paths, considered in the computation of U(x,d) for a single originating node, is \u2126(KL) \u2014 at least exponential in the number of layers.\nIn practice, it is infeasible to compute U(x,d) naively. In this work, we prove that it is possible to compute U(x,d) in O(|A|+ |E|) \u2014 thus linear in the number of layers \u2014 using the algorithm which will be introduced in the next section."}, {"heading": "4 Linear-time backward algorithm", "text": "Theorem 1. For any m`(\u00b7, \u00b7), any \u2295 and which are associative with each other, i.e. a (b\u2295 c) = a b\u2295 a c, we can compute U(x,d) for all x and d in O(|A|+ |E|).\nProof Since there is associativity, we can use a dynamic programming approach similar to the one developed for gradient backpropagation.\nFirst, let us introduce subsampling functions k`s(d) = \u03b3s(k ` s\u22121(d)), k ` `(d) = d, s \u2265 `. Note that k0s = ks as introduced in Eq. 1.\nThen, let us introduce auxiliary variables U`(x`,d) for each layer ` = 0, . . . , L, which have the same definition as U(x,d) except for the fact that the paths, considered in them, start from the later layer `:\nU`(x`,d) = \u2295\nP\u2208P`(x`,d) M(P ) = \u2295 P\u2208P`(x`,d) L\u2299 s=` ms(As(x P s ), A \u2032 s(x P s \u2212 k`s(d))). (5)\nNote that U(x,d) = U0(x,d). The idea is to iteratively recompute U`(x`,d) based on known U`+1(x`+1, \u03b3`(d)) for all x`+1. Eventually, we will get to the desired U0(x,d).\nThe first step is to notice that all the paths share the same prefix and write it out explicitly:\nU`(x`,d) = \u2295\nP\u2208P`(x`,d)\nL\u2299 s=` ms(As(x P s ), A \u2032 s(x P s \u2212 k`s(d)))\n= \u2295\nP\u2208P`(x`,d) m`(A`(x`), A\n\u2032 `(x` \u2212 d))\n[ L\u2299\ns=`+1\nms(As(x P s ), A \u2032 s(x P s \u2212 k`s(d)))\n] .\n(6)\nNow, we want to pull the prefix m`(A`(x`), A\u2032`(x` \u2212 d)) out of the \u201csum\u201d. For that purpose, we will need the set of endpoints out(x`), introduced in the notation in Section 2. The \u201csum\u201d can be re-written in terms of those endpoints as\nU`(x`,d) = \u2295\nx`+1\u2208out(x`) P\u2208P`+1(x`+1,\u03b3`+1(d))\nm`(A`(x`), A \u2032 `(x` \u2212 d))\n[ L\u2299\ns=`+1\nms(As(x P s ), A \u2032 s(x P s \u2212 k`s(d)))\n] .\n(7)\nAlgorithm 1 Backward pass 1: procedure BACKWARD(G, G\u2032) 2: for AL(xL) \u2208 AL do 3: for d \u2208 kL(D) do 4: UL(xL,d)\u2190 mL(AL(xL), A\u2032L(xL \u2212 d)), . Initialize the last layer. 5: end for 6: end for 7: for ` = L-1, ..., 0 do 8: for A`(x`) \u2208 A` do 9: for d \u2208 k`(D) do 10: S \u2190 0, 11: for x`+1 \u2208 out(x`) do 12: S \u2190 S \u2295 U`+1(x`+1, \u03b3`+1(d)), 13: end for 14: U`(x`,d)\u2190 m`(A`(x`), A\u2032`(x` \u2212 d)) S, 15: end for 16: end for 17: end for 18: return U0 . Return the distribution for the first layer. 19: end procedure\nThe last step is to use the associativity of the operator pair\u2295 and to pull the prefix out of the \u201csum\u201d:\nU`(x`,d) = m`(A`(x`), A \u2032 `(x` \u2212 d))\n\u2295 x`+1\u2208out(x`)\nP\u2208P`+1(x`+1,\u03b3`+1(d))\nL\u2299 s=`+1 ms(As(x P s ), A \u2032 s(x P s \u2212 k`s(d)))\n= m`(A`(x`), A \u2032 `(x` \u2212 d)) \u2295 x`+1\u2208out(x`) U`+1(x`+1, \u03b3`+1(d)). (8)\nThe detailed procedure is listed in Algorithm 1. We use the notation k`(D) for the set of subsampled shifts which is the result of applying function k` to every element of the set of initial shifts D."}, {"heading": "5 Choice of neuron matching function m and operators \u2295,", "text": "For the convolutional layers, we use the matching function\nmconv(w, v) = { 0 if w = 0, v = 0, min(w,v) max(w,v) otherwise.\n(9)\nFor the max-pooling layers, the computational graph can be truncated to just one active connection (as only one element influences higher-level features). Moreover, max-pooling does not create any additional features, only passes/subsamples the existing ones. Thus it does not make sense to take into account the pre-activations for those layers as they are the same as activations (up to subsampling). For these reasons, we use\nmmaxpool(w, v) = \u03b4(w = arg maxNw) \u2227 \u03b4(v = arg maxNv), (10) where Nw is the neighborhood of max-pooling covering node w, \u03b4(\u00b7) is the indicator function (1 if the condition holds, 0 otherwise).\nIn this paper, we use sum as \u2295 and product as . Another possible choice would be max for \u2295 and min or product for \u2014 theoretically, those combinations satisfy the conditions in Theorem 1. Nevertheless, we found sum/product combination working better than others. This could be explained by the fact that max as \u2295 would be taken over a huge set of paths which is not robust in practice."}, {"heading": "6 Experiments", "text": "We validate our approach in the field of computer vision as our method requires a convolutional neural network trained on a large recognition dataset. Out of the vision correspondence tasks, we\nchose stereo matching to validate our method. For this task, the input data dimensionality is B = 2 and the shift set is represented by horizontal shifts D = {(0, 0, 0), . . . , (Dmax, 0, 0)}. We always convert images to grayscale before running CNNs, following the observation by [24] that color does not help.\nFor pre-trained recognition CNN, we chose the VGG-16 network [19]. This network is summarized in Table 1. We will further refer to layer indexes from this table. It is important to mention that we have not used the whole range of layers in our experiments. In particular, we usually started from layer 2 and finished at layer 8. As such, it is still necessary to consider multi-channel input. To extend our algorithm to this case, we create a virtual input layer with C = 1 and virtual per-pixel arcs to all the real input channels. While starting from a later layer is an empirical observation which improves the results for our method, the advantage of finishing at an earlier layer was discovered by other researchers as well [4] (starting from some layer, the network activations stop being related to individual pixels). We will thus abbreviate our methods as \u201cours(s, t)\u201d where \u201cs\u201d is the starting layer and \u201ct\u201d is the last layer."}, {"heading": "6.1 Experimental setup", "text": "For the stereo matching, we chose the largest available datasets KITTI 2012 and KITTI 2015. All image pairs in these datasets are rectified, so correspondences can be searched in the same row. For each training pair, the ground-truth shift is measured densely per-pixel. This ground truth was obtained by projecting the point cloud from LIDAR on the reference image. The quality measure is the percentage Errt of pixels whose predicted shift error is bigger than a threshold of t pixels. We considered a range of thresholds t = 1, . . . , 5, while the main benchmark measure is Err3. This measure is only computed for the pixels which are visible in both images from the stereo pair.\nFor comparison with the baselines, we used the setup proposed in [24] \u2014 the seminal work which introduced deep learning for stereo matching and which currently stays one of the best methods on the KITTI datasets. [24] is an extensive study which has a representative comparison of learning-based and non-learning-based methods under the same setup and open-source code [23] for this setup. The whole pipeline works as follows. First, we obtain the raw scores U(x,d) from Algorithm 1 for the shifts up to Dmax = 228. Then we normalize the scores U(x, \u00b7) per-pixel by dividing them over the maximal score, thus turning them into the range [0, 1], suitable for running the post-processing code [23]. Finally, we run the post-processing code with exactly the same parameters as the original method [24] and measure the quality on the same 40 validation images."}, {"heading": "6.2 Baselines", "text": "We have two kinds of baselines in our evaluation: those coming from [24] and our simpler versions of deep feature transfer similar to [12], which do not consider paths.\nThe first group of baselines from [24] are the following: the sum of absolute differences \u201csad\u201d, the census transform \u201ccens\u201d [22], the normalized cross-correlation \u201cncc\u201d. We also included the learning-based methods \u201cfst\u201d and \u201cacrt\u201d [24] for completeness, although they use training data to learn features while our method does not.\nFor the second group of baselines, we stack up the activation volumes for the given layer range and up-sample the layer volumes if they have reduced resolution. Then we compute normalized cross-correlation of the stacked features. Those baselines are denoted \u201ccorr(s, t)\u201d where \u201cs\u201d is the starting layer, \u201ct\u201d is the last layer. Note that we correlate the features before applying ReLU following what [24] does for the last layer. Thus we use the input to the ReLU inside the layers.\nAll the methods, including ours, undergo the same post-processing pipeline. This pipeline consists of semi-global matching [8], left-right consistency check, sub-pixel enhancement by fitting a quadratic curve, median and bilateral filtering. We refer the reader to [24] for the full description. While the first group of baselines was tuned by [24] and we take the results from that paper, we had to tune the post-processing hyper-parameters of the second group of baselines to obtain the best results."}, {"heading": "6.3 KITTI 2012", "text": "The dataset consists of 194 training image pairs and 195 test image pairs. The reflective surfaces like windshields were excluded from the ground truth.\nThe results in Table 2 show that our method \u201cours(2, 8)\u201d performs better compared to the baselines. At the same time, its performance is lower than learning-based methods from [24]. The main promise of our method is scalability: while we test it on a task where huge effort was invested into collecting the training data, there are other important tasks without such extensive datasets."}, {"heading": "6.4 Ablation study on KITTI 2012", "text": "The goal of this section is to understand how important is the deep hierarchy of features versus one or few layers. We compared the following setups: \u201cours(2, 2)\u201d uses only the second layer, \u201cours(2, 3)\u201d uses only the range from layer 2 to layer 3, \u201ccentral(2, 8)\u201d considers the full range of layers but only with central arcs in the convolutions (connecting same pixel positions between activations) taken into account in the backward pass, \u201cours(2, 8)\u201d is the full method. The result in Table 3 shows that it is profitable to use the full hierarchy both in terms of depth and coverage of the receptive field."}, {"heading": "6.5 KITTI 2015", "text": "The stereo dataset consists of 200 training image pairs and 200 test image pairs. The main difference to KITTI 2012 is that the images are colored and the reflective surfaces are present in the evaluation.\nSimilar conclusions to KITTI 2012 can be drawn from experimental results: our method provides a reasonable transfer, being inferior only to learning-based methods \u2014 see Table 4. We show our depth map results in Fig. 2."}, {"heading": "6.6 Style transfer experiment on KITTI 2015", "text": "The goal of this experiment is to show the robustness of recognition hierarchy for the transfer to correspondence search \u2014 something we advocated in the introduction as the advantage of our approach. We apply the style transfer method [4], implemented in the Prisma app. We ran different style transfers on the left and right images. While now very different at the pixel level, the higher level descriptions of the images remain the same which allows to successfully run our method. The qualitative results show the robustness of our path-based method in Fig. 3 (see also Fig. 2 for visual comparison to normal data)."}, {"heading": "7 Conclusion", "text": "In this work, we have presented a method for transfer from recognition to correspondence search at the lowest level. For that, we re-use activation paths from deep convolutional neural networks and propose an efficient polynomial algorithm to aggregate an exponential number of such paths. The empirical results on the stereo matching task show that our method is competitive among methods which do not use labeled data from the target domain. It would be interesting to apply this technique to sound, which should become possible once a high-quality deep convolutional model becomes accessible to the public (e.g., [20])."}], "references": [], "referenceMentions": [], "year": 2017, "abstractText": "Many machine learning tasks require finding per-part correspondences between<lb>objects. In this work we focus on low-level correspondences \u2014 a highly ambiguous<lb>matching problem. We propose to use a hierarchical semantic representation of<lb>the objects, coming from a convolutional neural network, to solve this ambiguity.<lb>Training it for low-level correspondence prediction directly might not be an option<lb>in some domains where the ground-truth correspondences are hard to obtain. We<lb>show how transfer from recognition can be used to avoid such training. Our idea is<lb>to mark parts as \u201cmatching\u201d if their features are close to each other at all the levels<lb>of convolutional feature hierarchy (neural paths). Although the overall number<lb>of such paths is exponential in the number of layers, we propose a polynomial<lb>algorithm for aggregating all of them in a single backward pass. The empirical<lb>validation is done on the task of stereo correspondence and demonstrates that we<lb>achieve competitive results among the methods which do not use labeled target<lb>domain data.", "creator": "LaTeX with hyperref package"}}}