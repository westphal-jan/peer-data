{"id": "1706.01763", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "6-Jun-2017", "title": "Adversarial-Playground: A Visualization Suite for Adversarial Sample Generation", "abstract": "with growing interest in adversarial information breeding, participants starts understanding both machine learning analysts and users that understand how their models may be attacked. we propose a heap - based statistical method, \\ bracket { co - generator }, to demonstrate strong efficacy of common adversarial interpretation of that simple circular dynamics ( dnn ) specification, built on top of the tensorflow library. pro - playground provides users an intuition and consistent experience in shaping solutions generating adversarial inference, learning become inputs accessible across targeted adversary to fool a model like system. to enable adversarial - playground procedures generate quick moves ineffective against opposing users, participants realize two primary constructions : ( 1 ) we propose a generic example of the state - of - steady - consciousness conceptual data map approach what claims precisely comparable evasion rate. ( 2 ) semantic visualization does not transmit the generated web images helping account client, but rather only functions matrix identifying the matrix and encoding vectors representing classification values", "histories": [["v1", "Tue, 6 Jun 2017 13:43:11 GMT  (245kb,D)", "https://arxiv.org/abs/1706.01763v1", "under review ; 8 pages; 3 figures"], ["v2", "Fri, 16 Jun 2017 16:38:09 GMT  (380kb,D)", "http://arxiv.org/abs/1706.01763v2", "8 pages; 3 figures"]], "COMMENTS": "under review ; 8 pages; 3 figures", "reviews": [], "SUBJECTS": "cs.CR cs.AI cs.LG", "authors": ["andrew norton", "yanjun qi"], "accepted": false, "id": "1706.01763"}, "pdf": {"name": "1706.01763.pdf", "metadata": {"source": "CRF", "title": "ADVERSARIAL-PLAYGROUND: A Visualization Suite for Adversarial Sample Generation", "authors": ["Andrew Norton", "Yanjun Qi"], "emails": ["yanjun}@virginia.edu"], "sections": [{"heading": "1 Introduction", "text": "Deep Neural Networks (DNNs) and Convolutional Neural Networks (CNNs) are an essential tool for many machine learning tasks, especially image classification [6]. Unfortunately, recent studies of evasive samples show that intelligent attackers can force these models to misclassify samples by performing nearly imperceptible modifications to the sample before attempting classification [5, 10]. These samples are usually crafted through an optimization procedure that searches for small and effective perturbations (details in Section 2). We introduce a visualization tool that enables deep learning practitioners and users to understand how their classifiers may be attacked.\nInvestigating the behavior of machine learning systems in adversarial environments is an emerging topic at\n1Project source code and data from our experiments is available at https://github.com/QData/AdversarialDNN-Playground.\nthe junction of machine learning and computer security [2]. While machine learning models may appear to be effective for many security tasks like malware classification [7] and face recognition [9], it is important to realize that these classification techniques were not designed to withstand manipulations made by intelligent and adaptive adversaries. In contrast with applications of machine learning to other fields, security tasks involve adversaries that may respond maliciously to the classifier [2]. Therefore, we seek to provide an educational tool for visualizing adversarial examples generated by common evasion attacks and showing how these examples fool a state-ofthe-art CNN model.\nOur proposed package follows the spirit of TensorFlow Playground \u2014 a web-based educational tool that helps users understand how neural networks work [11]. TensorFlow Playground has been used in many classes as a pedagogical aid and helps the self-guided student learn more. Its impact inspires us to visualize adversarial samples with a similar tool, which we call \u201cADVERSARIALPLAYGROUND.\u201d This web-based visualization tool assists users in understanding and comparing the impact of standard evasion techniques on deep learning models. ADVERSARIAL-PLAYGROUND provides quick and effective visualizations of adversarial examples through two key methods:\nClient/Server Framework Launching ADVERSARIAL-PLAYGROUND starts a lightweight Python webserver that hosts a collection of pages for the visualizations. Using a server-based approach allows remote hosting on a powerful machine, but the tool may be hosted on any computer running TensorFlow. To improve response time, the server does not transmit large images of evasive samples to the client, sending only a matrix describing the sample and the vector of classifications; the graphics are rendered on the client-side using JavaScript. This design differs from TensorFlow Playground, which solely used client-side\nar X\niv :1\n70 6.\n01 76\n3v 2\n[ cs\n.C R\n] 1\n6 Ju\nn 20\ntechnology with no server-side computations.\nModified JSMA We introduce a new, faster variant of the Jacobian Saliency Map Approach (JSMA) that maintains a comparable evasion rate to the original. Most state-of-the-art evasion algorithms are slow due to expensive optimization and the large feature space involved in image classification [3, 4]. For studies focusing only on effectiveness of attack, this is not a major issue. In our application, however, slow visualizations will negatively impact users. Instead of performing a costly search of all feature pairs (as in JSMA), we use a heuristic approximation to reduce the search space considerably. Experiments verify that our faster JSMA maintains the same evasion rate as the usual JSMA algorithm, but executes almost twice as fast.\nThe rest of this paper takes the following structure: Section 2 discusses three types of state-of-the-art evasion algorithms, Section 3 introduces the system organization and software design of ADVERSARIAL-PLAYGROUND, Section 4 presents the altered JSMA algorithm with an empirical comparison to cleverhans JSMA, and Section 5 concludes the paper by discussing possible extensions."}, {"heading": "2 Background of Adversarial Examples", "text": "Studies regarding the behavior of machine learning models in adversarial environments generally fall into one of three categories: (1) poisoning attacks, in which specially crafted samples are injected into the training of a learning model, (2) privacy-aware methods, which aim to preserve the privacy of information in training data, or (3) evasion attacks, in which the adversary aims to create inputs that are misclassified by a target classifier. Our work focuses on evasion attacks.\nThe goal of evasion is to craft an input for a particular classifier that, while improperly classified, reveals only slight alteration to a human viewer. To formalize the extent of allowed alteration, evasion algorithms minimize the difference between the \u201cseed\u201d image and the resulting evasive sample based on a selected norm (distance function).\nIn some cases, the adversary specifies the \u201ctarget\u201d class of an evading sample \u2014 for example, the adversary may desire an image that looks like a \u201c5\u201d to be classified as a \u201c7\u201d. This is referred to as a targeted approach. Conversely, if the adversary does not specify the desired class, the algorithm is considered to be untargeted.\nFormally, let us denote f : X\u2192C to be a classifier that maps the set of all possible inputs, X , to some finite set of classes, C. Then, given a target class yt \u2208 C, a starting sample x \u2208 X , and a norm \u2016 \u00b7 \u2016, the goal of targeted\nadversarial sample generation is to find x\u2032 \u2208 X such that:\nx\u2032 = argmin s\u2208X {\u2016x\u2212 s\u2016 : f (s) = yt} (1)\nSimilarly, in the untargeted case, the goal is to find x\u2032\nsuch that:\nx\u2032 = argmin s\u2208X {\u2016x\u2212 s\u2016 : f (s) 6= f (x)} (2)\nIn this formalization, we see there are two key degrees of freedom in creating a new evasion algorithm: targeted vs. untargeted attacks and the choice of norm. The latter category provides a useful classification scheme for evasion algorithms, suggested by Carlini and Wagner [3]."}, {"heading": "2.1 L0 Norm", "text": "A simple way to determine the extent of the difference between two images is to count the number of pixels that differ between them. That is, if x is our original image, and x\u2032 = x+ r is the evading image (for some suitable value of r), then we can compute the L0 distance between x and x\u2032 as following, where [\u00b7] is the Iverson bracket2:\n\u2016r\u20160 = \u2211 i [ri 6= 0] (3)\nPapernot, et al., suggested using the L0 norm for evaluating the similarity of the initial sample and adversarial result [8]. Their approach computes a saliency map of a given input, ranking pixels based on their contribution to classification. Then, they perform a combinatorial search over all pixel pairs to find the optimal two pixels to adjust. This is repeated until either the modified image is misclassified or the L0 distance between the modified and unmodified image is exceeds a threshold.\nThis algorithm \u2014 as well as the L\u221e fast gradient sign method \u2014 was included in the cleverhans package by Goodfellow, Papernot, and McDaniel [4]. The specifics of this algorithm will be discussed in more detail in Section 4.1."}, {"heading": "2.2 L2 Norm", "text": "A disadvantage of the L0 norm is that it is not differentiable. Since the L2 norm is differentiable, it is more easily understood from a theoretical standpoint. This norm measures the standard Euclidean distance between two vectors; using the same notation as before, with x as the\n2The Iverson bracket is defined as follows: [P] = { 1 P is true 0 otherwise\nstarting vector and x\u2032 = x+ r for the adversarial input, this norm is computed by:\n\u2016r\u20162 = (\n\u2211 i r2i\n)1/2 (4)\nIn their foundational paper on evasive sample generation, Szegedy, et al., posed the issue as a convex optimization problem using the L2 norm [10]. This problem was then solved using the usual (albeit slow) method of box-constrained L-BFGS."}, {"heading": "2.3 L\u221e Norm", "text": "A third commonly used norm is the L\u221e norm, also called the Chebyshev distance. This measures the maximal change between two vectors along any single feature. That is, if x is the starting vector and x\u2032 = x+ r is the adversarial input, the distance between them is computed by:\n\u2016r\u2016\u221e = max i {|ri|} (5)\nThe Fast Gradient Sign (FGS) method uses the L\u221e norm in generating evading inputs; this method is commonly used due to its speed [5]. Unlike most prior approaches, which require iteratively changing the evasive sample away from its source class, FGS performs exactly one update step to obtain the evasive input. Informally, the algorithm performs one step of gradient descent, but (1) moves away from the loss function\u2019s minimum and (2) modifying the input sample rather than the model weights.\nIf x is our original input, J(\u03b8 ,x,y) is the cost function for training the network, and x\u2032 is the evading input created by FGS, we have:\nx\u2032 = x+ \u03b5 sign(\u2207xJ(\u03b8 ,x,y)) (6)\nThe attacking power, \u03b5 , may be adjusted to fit the particular domain. Increasing \u03b5 increases likelihood that the evading sample is misclassified, but it also increases L\u221e distance between x and x\u2032. This presentation of FGS is untargeted; this algorithm only cares about getting further away from the source class but does not specify any \u201ctarget\u201d class."}, {"heading": "3 System Organization: Webserver with", "text": "Client-side Visualization\nAs a web application, ADVERSARIAL-PLAYGROUND splits the duties of visualization and computation between the client and server. Through the client, the user adjusts hyperparameters and submits an AJAX request\nfor a generated sample to the server. Once the TensorFlow backend generates the adversarial image and classification likelihoods, the server returns this data to the client. Finally, this information is displayed graphically to the user through use of the Plotly JavaScript library (Figure 1).\nWhen the application is accessed, the user is presented with the choice between several attack methods \u2014 some targeted and some untargeted. After selecting an attack, the user may adjust model parameters, choose the seed image, and specify a target class (if applicable). When the user submits their desired parameters, the server starts the creation of an adversarial sample against a pretrained CNN model written with the TensorFlow library.\nUsing TensorFlow utilizes the GPU of the server to quickly return results to the client, even if the client is a lesser-powered machine than the server. Evading samples are generated in real time (rather than returning a precomputed result), so the user may experience a delay if the attack they selected is particularly slow. The resulting adversarial sample and likelihoods for each class are displayed to the user through client-side code."}, {"heading": "3.1 Design Decisions", "text": "In creating our system, we made several design decisions. Here, we present the reasoning behind the three largest system-level decisions we made: building ADVERSARIAL-PLAYGROUND as a web-based application, utilizing both client- and server-side code, and rendering images with the client rather than the server."}, {"heading": "3.1.1 Web-based Framework", "text": "The first question we asked was whether we wanted a web-capable framework or a desktop application. This\nwas a fairly simple design choice, as a web-based interface enables a large number of users to utilize the application without requiring an installation process on each computer. By eliminating an installation step, we encourage potential users who may be only casually interested in adversarial machine learning to explore what it is. This supports the pedagogical goals of the software package."}, {"heading": "3.1.2 Client-Server with Python back-end", "text": "Beyond a web-based framework, we needed to decide if ADVERSARIAL-PLAYGROUND would be clientbased or if it would utilize server-side capabilities as well. The TensorFlow Playground was written entirely in JavaScript and other client-side technologies, allowing a lightweight server to host the service for many users. However, adversarial samples are usually generated on larger, deeper networks than those created by users of TensorFlow Playground, and this makes a JavaScriptonly approach prohibitively slow.\nInstead, we chose to use a GPU-enabled server running Python with TensorFlow to generate the adversarial samples. In addition to a speed advantage, this allows our baseline CNN model to be easily replaced with other TensorFlow graphs. Adding new attack strategies is simpler, too, as TensorFlow has been used in many research papers on evasion strategies."}, {"heading": "3.1.3 Client-side rendering", "text": "Once we decided to generate the samples on the serverside, it was tempting to generate the output images on the server as well. This leads us to the third design decision we made: client-side rendering of MNIST images and likelihood plots. In our prototype, we used serverside rendering of these images using the Python library\nmatplotlib, then loaded the image from the client directly.\nHowever, this approach suffered from multiple disadvantages. Using only the default matplotlib utilities, we would have to write every generated image to disk and serve the unique URL to the user; this uses large amounts of disk, depending on the number of users. Furthermore, each image was around 20 kilobytes; waiting for the image to transfer added to the latency experienced by the user.\nFortunately, client-side rendering of images using the JavaScript library Plotly.JS resolved both of these issues. Rather than transferring an entire PNG image with thousands of pixels, we send only the pixel values for the 28\u00d7 28 MNIST images and the 10 values for classification likelihoods within the POST response to the client. This reduced the amount of data we transferred on each request which, in turn, significantly reduced the time needed for each update. Additionally, this eliminates the need for storing any produced image files on the server. As a further advantage, the Plotly framework allows interactive charts that display individual pixel values on mouseover, providing users with more detailed feedback."}, {"heading": "3.2 MNIST Dataset", "text": "ADVERSARIAL-PLAYGROUND uses the popular MNIST \u201chandwritten digits\u201d dataset for visualizing evasion attacks. This dataset contains 70,000 images of handwritten digits (0 through 9). Of these, 60,000 images are used as training data and the remaining 10,000 images are used for testing. Each sample is a 28\u00d728 pixel, 8-bit grayscale image. Users of our system are presented with a collection of multiple seed images, selected from each\nof the 10 classes in the testing set3. We decided to only support the MNIST dataset for our visualization, as it is a common dataset used in evasion discussions. Many adversarial machine learning papers work with some form of image data; since this is easy to visually process, we thought it would be best to work with one of the MNIST, CIFAR, or ImageNet datasets. However, both ImageNet and CIFAR are much higher-dimensional than MNIST, which means generating adversarial samples is a more time-intensive process; the low-dimensionality of MNIST samples results in very fast generation of evasive samples. To provide the user with a low-latency yet representative experience, we used MNIST."}, {"heading": "3.3 Software Manual", "text": "We released all project code on GitHub in the interest of providing a high-quality, easy-to-use software package to demonstrate evasion attacks. This section explains how to set up and use the package.\nSetup Although minimal, the package requires a computer with Python 3.5, TensorFlow 1.0 (or higher), the standard SciPy stack, and the Python package Flask. We have tested the code on Windows, Linux, and Mac operating systems.\nTo install, clone the GitHub repository and install the prerequisites via pip3 -r install requirements.txt. A pre-trained MNIST model is already stored in the GitHub repository; all that is needed to start the webapp is to run python3 run.py. Once the app is started, it will run on localhost:9000.\nUsage To use the application, the user selects a model from the navigation bar at the top of the webapp. On the right-hand pane, the user sets the attacking strength the algorithm using the slider, selects a seed image, and (if applicable) a target class. (Figure 2a at right.) Selecting a seed image immediately loads the image to the left-hand display.\nAfter setting the parameters, the user clicks \u201cUpdate Model.\u201d This runs the adversarial algorithm in real-time to attempt generating an evasive sample. The sample is displayed in the primary pane to the left of the controls (Figure 2a at left). This sample is fed through the classifier, and then the likelihoods are normalized and displayed in bar charts below the samples (Figure 2b). Finally, the classification of generated sample is displayed below the controls at right.\n3A short script is in the project GitHub repository for generating new collections of seed images if the user runs the webapp locally."}, {"heading": "4 Faster approach to JSMA", "text": "At the core of the ADVERSARIAL-PLAYGROUND is a set of pre-implemented attack models. It was important to present the user with the choice between targeted and untargeted approaches, as well as a choice between models utilizing different norms. As such, we implemented saliency-map based approaches (one directly from Papernot, et al. [8] and a faster one of our own development) for targeted methods and lightly modified the cleverhans implementation of the Fast Gradient Sign Method (FGS) for untargeted attacks.\nAs the FGS method is nearly identical to that found in cleverhans, we encourage the reader to consider [4] for implementation details. In the next two sections, we will review the details of the Jacobian Saliency Map Approach from the work of Papernot, et al., [8] and our improvement, Fast Jacobian Saliency Map Apriori."}, {"heading": "4.1 Jacobian Saliency Map Approach (JSMA)", "text": "The Jacobian Saliency Map Approach (JSMA) adjusts the starting input to maintain similarity based on the L0. Applied to the MNIST model, the approach is as follows:\n1. Compute the forward derivative of the classifier, \u2207F(X).\n2. Use the saliency map of the sample to determine two best pixels to adjust.\n3. Modify the two pixels and update the current sample.\n4. Repeat until adversarial sample is misclassified or while the sample and the seed image differ by at most \u03d2 (a tuneable threshold).\nThe first and last steps are fairly inexpensive in terms of time; the largest computational difficulty from using the saliency map to determine which pixels to adjust. In their original paper, Papernot et al. used Algorithm 1 for this selection process [8].\nThe key disadvantage of JSMA is that it must consider all pairs (p,q) of possible feature indices (see Algorithm 1). Thus, the loop must perform \u0398(|\u0393|2) iterations, where |\u0393| is the available feature size of each sample. When working on high-dimensional data, this becomes prohibitively expensive. By using a heuristic approximation of the JSMA algorithm, we achieve a faster runtime with comparable accuracy.\nAlgorithm 1 Papernot\u2019s Saliency Map Feature Selection \u2207F(X) is the forward derivative, \u0393 the features still in the search space, and t the target class\nInput: \u2207F(X), \u0393, t 1: for each pair (p,q) \u2208 \u03932, p 6= q do 2: \u03b1 = \u2211i=p,q \u2202Ft (X) \u2202Xi\n3: \u03b2 = \u2211i=p,q \u2211 j 6=t \u2202F j(X) \u2202Xi 4: if \u03b1 < 0 and \u03b2 > 0 and \u2212\u03b1\u00d7\u03b2 > max then 5: p1, p2\u2190 p,q 6: max\u2190\u2212\u03b1\u00d7\u03b2 7: end if 8: end for 9: return p1, p2"}, {"heading": "4.2 Fast Jacobian Saliency Map Apriori (FJSMA)", "text": "Our improved JSMA is inspired by the Apriori algorithm used in frequent set mining. The Apriori algorithm is a fast, greedy, \u201cbottom-up\u201d approach to determining item sets with minimal support [1]. It achieves its speed through a priori elimination of certain suboptimal item sets. Similarly, our algorithm eliminates some (p,q) pairs through a priori knowledge about the sample.\nInstead of exhaustively considering each feature pair (p,q), we rank the elements in the feature set \u0393 by the value of the Jacobian at that coordinate. (This is the contribution each element makes to \u03b1 in Algorithm 1.) We then force the choice of p to be from the best k such features and select q from the entire feature set with p removed. Since this choice of p means its contribution to \u03b1 is large, it is likely the product \u2212\u03b1\u00d7\u03b2 will also be large.\nThus, we omit a large number of the (p,q) feature pairs through a priori knowledge derived from our heuristic. This alternative to Algorithm 1 is shown in Algorithm 2. If we denote K = arg topp\u2208\u0393 ( \u2212 \u2202F j(X)\u2202Xi ; k ) , where arg topx\u2208A ( f (x); k) is the set consisting of the top k elements in A as ranked by f , then the loop in our Fast Jacobian Saliency Map Apriori (FJSMA) selection routine runs in \u0398(|K| \u00b7 |\u0393|) time, where |K| |\u0393|. Since determining the top k features can be done in \u0398(|\u0393|) time, this is a net improvement in asymptotic terms."}, {"heading": "4.3 Experimental Results", "text": "The improved speed of FJSMA when compared to JSMA is especially beneficial in the real-time environment of ADVERSARIAL-PLAYGROUND. Low-latency generation of adversarial inputs provides a much better user experience for this case.\nAlgorithm 2 Fast Jacobian Saliency Map Apriori Feature Selection \u2207F(X), \u0393, and t as in Algorithm 1, k is a small constant\nInput: \u2207F(X), \u0393, t, k 1: K = arg topp\u2208\u0393 ( \u2212 \u2202Ft (X)\u2202Xp ; k )\n2: for each pair (p,q) \u2208 K\u00d7\u0393, p 6= q do 3: \u03b1 = \u2211i=p,q \u2202Ft (X) \u2202Xi 4: \u03b2 = \u2211i=p,q \u2211 j 6=t \u2202F j(X) \u2202Xi 5: if \u03b1 < 0 and \u03b2 > 0 and \u2212\u03b1\u00d7\u03b2 > max then 6: p1, p2\u2190 p,q 7: max\u2190\u2212\u03b1\u00d7\u03b2 8: end if 9: end for\n10: return p1, p2\nHowever, while the theory suggests that FJSMA will run faster than JSMA and generate evading samples at a similar rate, we must verify this with experimentation. We compare our FJSMA implementation (using a variety of values for k and \u03d2) to the implementation of JSMA found in Cleverhans [4] as of April 5, 2017.\nWe compared both evasion algorithms using the MNIST dataset and TensorFlow tutorial implementation of a MNIST-specific CNN. After training the CNN network on the MNIST training set, we ran both evasion attacks on the 10000-sample MNIST testing. To evaluate the performance of each approach, we compared the evasion rate \u2014 the percentage of seed images that were successfully converted into evasive samples. This is the standard metric used to evaluate evasion algorithms. We want to verify that our FJSMA algorithm is faster than JSMA and evades the classifier at a similar rate.\nWe determined the evasion rate for a range of values of the \u03d2 parameter. With the FJSMA algorithm, we also varied the value of k to be used; to represent the performance for arbitrarily-sized feature sets, we set k in this experiment to be a percentage of the feature set size. Intuitively, this k value is a control on how tight of an approximation FJSMA is to JSMA; as k grows larger, we should expect the performance of the two approaches to converge to each other.\nResults of this experiment are summarized in Figure 3a. The cleverhans JSMA and the new FJSMA attack perform similarly for all tested values of \u03d2 and k, with larger values of k increasing the evasion rate. Curiously, for k\u2265 20%, our implementation of FJSMA outperforms that of cleverhans; this is likely due to implementation details4.\n4The original preprint reported different results; at that time, we relied on high-level Python constructs for much of the algorithm. Now, we use lower-level numpy functions, resulting in a much faster runtime.\nIn addition to evasion rate, we measured the \u201cwall clock\u201d time needed for successfully generating evasive samples. The average time to form an evasive sample from the original, benign sample is summarized in Figure 3b. We see that our FJSMA approach greatly improves upon the speed of a similarly written JSMA. However, it seems that varying the value of k does not produce a significant variation in runtime per sample. We conjecture this results from the small size of the feature space in MNIST and that searching 30% of the feature space likely does not dominate the runtime not large."}, {"heading": "5 Discussion and Future Work", "text": "The study of evasion attacks on machine learning models is a rapidly growing field. In this paper, we present a web-based tool for visualizing the performance of evasion algorithms for deep neural networks. This helps both researchers and students alike to understand and compare the impact of adversarial examples against DNNs. Furthermore, we provide an improvement to the Jacobian Saliency Map Approach (JSMA) originally developed by Papernot, et al. [8]. This improvement, which we call the Fast Jacobian Saliency Map Apriori (FJSMA) approach, uses an a priori heuristic to reduce the search space significantly. FJSMA achieves a significant improvement in speed, while maintaining essentially the same evasion rate \u2014 an important advantage for visualization.\nA straightforward extension of this work is to increase the variety of supported evasion methods. For example,\nincluding the new attacks based on L0, L2, and L\u221e norms from Carlini and Wagner\u2019s recent paper [3] would be a good step in comparing the performance of multiple evasion strategies.\nHowever, expansion in this manner presents an additional issue of latency. To generate evading samples \u201condemand,\u201d the adversarial algorithm must run quickly; these other algorithms take much longer to execute than those we selected. A possible fix is to pre-compute results for slower methods with a selection of hyperparameter values, rather than allowing any value for hyperparameters. Another approach is to attempt applying the same greedy approximation technique used in FJSMA to the other attack algorithms; however, this may not always be possible.\nAnother direction for development is to provide a choice of classifiers and datasets. Allowing the user to select from CIFAR, ImageNet, and MNIST data would highlight the similarities and differences between how a single attack method deals with different data. Similarly, providing the user with a choice of multiple pre-trained models \u2014 possibly hardened against attack through adversarial training \u2014 would help distinguish artifacts of model choice from the behavior of the attack. These two extensions would help users more fully understand the behavior of an adversarial algorithm."}], "references": [{"title": "Fast algorithms for mining association rules in large databases", "author": ["R. AGRAWAL", "R. SRIKANT"], "venue": "Proceedings of the 20th International Conference on Very Large Data Bases (San Francisco, CA, USA,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 1994}, {"title": "Towards evaluating the robustness of neural networks", "author": ["N. CARLINI", "D. WAGNER"], "venue": "CoRR abs/1608.04644", "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2016}, {"title": "cleverhans v0.1: an adversarial machine learning library", "author": ["I.J. GOODFELLOW", "N. PAPERNOT", "P.D. MC- DANIEL"], "venue": "CoRR abs/1610.00768", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2016}, {"title": "Explaining and harnessing adversarial examples", "author": ["I.J. GOODFELLOW", "J. SHLENS", "C. SZEGEDY"], "venue": "arXiv preprint arXiv:1412.6572", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2014}, {"title": "ImageNet Classification with Deep Convolutional Neural Networks", "author": ["A. KRIZHEVSKY", "I. SUTSKEVER", "G.E. HIN- TON"], "venue": "In Advances in Neural Information Processing Systems", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2012}, {"title": "Microsoft Malware Competition Challenge", "author": ["MICROSOFT CORPORATION"], "venue": "https://www.kaggle.com/c/malware-classification", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2015}, {"title": "The limitations of deep learning in adversarial settings", "author": ["N. PAPERNOT", "P.D. MCDANIEL", "S. JHA", "M. FREDRIKSON", "Z.B. CELIK", "A. SWAMI"], "venue": null, "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2015}, {"title": "Deep Face Recognition", "author": ["O.M. PARKHI", "A. VEDALDI", "A. ZISSERMAN"], "venue": "In British Machine Vision Conference", "citeRegEx": "9", "shortCiteRegEx": "9", "year": 2015}, {"title": "Intriguing properties of neural networks", "author": ["C. SZEGEDY", "W. ZAREMBA", "I. SUTSKEVER", "J. BRUNA", "D. ERHAN", "I.J. GOODFELLOW", "R. FERGUS"], "venue": null, "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2013}, {"title": "Understanding neural networks through deep visualization", "author": ["J. YOSINSKI", "J. CLUNE", "A.M. NGUYEN", "T.J. FUCHS", "H. LIPSON"], "venue": "CoRR abs/1506.06579", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2015}], "referenceMentions": [{"referenceID": 4, "context": "Deep Neural Networks (DNNs) and Convolutional Neural Networks (CNNs) are an essential tool for many machine learning tasks, especially image classification [6].", "startOffset": 156, "endOffset": 159}, {"referenceID": 3, "context": "Unfortunately, recent studies of evasive samples show that intelligent attackers can force these models to misclassify samples by performing nearly imperceptible modifications to the sample before attempting classification [5, 10].", "startOffset": 223, "endOffset": 230}, {"referenceID": 8, "context": "Unfortunately, recent studies of evasive samples show that intelligent attackers can force these models to misclassify samples by performing nearly imperceptible modifications to the sample before attempting classification [5, 10].", "startOffset": 223, "endOffset": 230}, {"referenceID": 5, "context": "While machine learning models may appear to be effective for many security tasks like malware classification [7] and face recognition [9], it is important to realize that these classification techniques were not designed to withstand manipulations made by intelligent and adaptive adversaries.", "startOffset": 109, "endOffset": 112}, {"referenceID": 7, "context": "While machine learning models may appear to be effective for many security tasks like malware classification [7] and face recognition [9], it is important to realize that these classification techniques were not designed to withstand manipulations made by intelligent and adaptive adversaries.", "startOffset": 134, "endOffset": 137}, {"referenceID": 9, "context": "Our proposed package follows the spirit of TensorFlow Playground \u2014 a web-based educational tool that helps users understand how neural networks work [11].", "startOffset": 149, "endOffset": 153}, {"referenceID": 1, "context": "Most state-of-the-art evasion algorithms are slow due to expensive optimization and the large feature space involved in image classification [3, 4].", "startOffset": 141, "endOffset": 147}, {"referenceID": 2, "context": "Most state-of-the-art evasion algorithms are slow due to expensive optimization and the large feature space involved in image classification [3, 4].", "startOffset": 141, "endOffset": 147}, {"referenceID": 1, "context": "The latter category provides a useful classification scheme for evasion algorithms, suggested by Carlini and Wagner [3].", "startOffset": 116, "endOffset": 119}, {"referenceID": 6, "context": ", suggested using the L0 norm for evaluating the similarity of the initial sample and adversarial result [8].", "startOffset": 105, "endOffset": 108}, {"referenceID": 2, "context": "This algorithm \u2014 as well as the L\u221e fast gradient sign method \u2014 was included in the cleverhans package by Goodfellow, Papernot, and McDaniel [4].", "startOffset": 140, "endOffset": 143}, {"referenceID": 8, "context": ", posed the issue as a convex optimization problem using the L2 norm [10].", "startOffset": 69, "endOffset": 73}, {"referenceID": 3, "context": "The Fast Gradient Sign (FGS) method uses the L\u221e norm in generating evading inputs; this method is commonly used due to its speed [5].", "startOffset": 129, "endOffset": 132}, {"referenceID": 6, "context": "[8] and a faster one of our own development) for targeted methods and lightly modified the cleverhans implementation of the Fast Gradient Sign Method (FGS) for untargeted attacks.", "startOffset": 0, "endOffset": 3}, {"referenceID": 2, "context": "As the FGS method is nearly identical to that found in cleverhans, we encourage the reader to consider [4] for implementation details.", "startOffset": 103, "endOffset": 106}, {"referenceID": 6, "context": ", [8] and our improvement, Fast Jacobian Saliency Map Apriori.", "startOffset": 2, "endOffset": 5}, {"referenceID": 6, "context": "used Algorithm 1 for this selection process [8].", "startOffset": 44, "endOffset": 47}, {"referenceID": 0, "context": "The Apriori algorithm is a fast, greedy, \u201cbottom-up\u201d approach to determining item sets with minimal support [1].", "startOffset": 108, "endOffset": 111}, {"referenceID": 2, "context": "We compare our FJSMA implementation (using a variety of values for k and \u03a5) to the implementation of JSMA found in Cleverhans [4] as of April 5, 2017.", "startOffset": 126, "endOffset": 129}, {"referenceID": 6, "context": "[8].", "startOffset": 0, "endOffset": 3}, {"referenceID": 1, "context": "For example, including the new attacks based on L0, L2, and L\u221e norms from Carlini and Wagner\u2019s recent paper [3] would be a good step in comparing the performance of multiple evasion strategies.", "startOffset": 108, "endOffset": 111}], "year": 2017, "abstractText": "With growing interest in adversarial machine learning, it is important for practitioners and users of machine learning to understand how their models may be attacked. We present a web-based visualization tool, ADVERSARIALPLAYGROUND, to demonstrate the efficacy of common adversarial methods against a convolutional neural network. ADVERSARIAL-PLAYGROUND provides users an efficient and effective experience in exploring algorithms for generating adversarial examples \u2014 samples crafted by an adversary to fool a machine learning system. To enable fast and accurate responses to users, our webapp employs two key features: (1) We split the visualization and evasive sample generation duties between client and server while minimizing the transferred data. (2) We introduce a variant of the Jacobian Saliency Map Approach that is faster and yet maintains a comparable evasion rate 1.", "creator": "LaTeX with hyperref package"}}}