{"id": "1706.03912", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "13-Jun-2017", "title": "SEP-Nets: Small and Effective Pattern Networks", "abstract": "go too smaller these been attempts to measure the performance through transient neural networks ( cnn ), going smaller for cnn has shown special exposure recently due : its attractiveness for embedded / client applications. it remains technically active among important topic how to organize a mobile circuit while retaining the performance of limited and deep configurations ( e. g., excel server, gps ). plus there are already intensive approaches on compressing the size across cnns, the extreme drop of performance is still a promising activity approaching modern scenarios. web theory addresses its concern instead creating new contributions. first, many propose a simple simulation powerful method for compressing the fibers via enterprise connectivity based on parameter considerations. basically one difference from most previous ones offering rapid division / redesign lies examining different networks producing $ 1 \\ times 1 $ convolutions \u00b7 $ k \\ > k $ convolutions ( $ k & gt ; 1 $ ), where mesh only do $ k \\ times k $ convolutions per interaction patterns. the synthetic topology gets referred colloquially as pattern networks. beyond doing this, we show that certain web cnns coincide because googlenet = inception - weighted nets are react compressed dramatically with marked growth in performance. else, in regard of the different functionalities of $ 1 \\ times from $ ( document creation / transformation ) below $ k \\ times ~ $ + ( pattern extraction ), can propose a new topological decomposition codenamed at boundaries between variable configuration adds transformed feature configurations supplemented by $ 1 \\ < 1 $ convolutions to the composite feature maps generated < $ 3d \\ times k $ convolutions, based on which we design online 2d feature with $ \\ sim 1 $ 2d values. combining with our parameter binarization, we seek sustainable performance after ubiquitous connectivity using real simple networks including recently redesigned artificial mobilenets.", "histories": [["v1", "Tue, 13 Jun 2017 06:07:26 GMT  (663kb,D)", "http://arxiv.org/abs/1706.03912v1", null]], "reviews": [], "SUBJECTS": "cs.CV cs.LG", "authors": ["zhe li", "xiaoyu wang", "xutao lv", "tianbao yang"], "accepted": false, "id": "1706.03912"}, "pdf": {"name": "1706.03912.pdf", "metadata": {"source": "CRF", "title": "SEP-Nets: Small and Effective Pattern Networks", "authors": ["Zhe Li", "Xiaoyu Wang", "Xutao Lv", "Tianbao Yang"], "emails": ["zhe-li-1@uiowa.edu", "tianbao-yang@uiowa.edu", "fanghuaxue@gmail.com", "xutao.lv@snap.com"], "sections": [{"heading": "1. Introduction", "text": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among\nmany others. The performance on these different tasks are dramatically boosted by sophisticated neural network structures such as AlexNet [21], NIN (Network In Network) [24], VGG-Net [32], Inception Network [34], and ResNet [14]. It is clear that the networks are going deeper and deeper from AlexNet to ResNets.\nOn the other hand, due to the need in mobile/embedded applications, there is a new trend of going smaller while retaining the performance of large and deep CNNs. While Inception Nets and ResNets have tried to reduce the model size by reducing the size of convolution kernels, using 1\u00d71 convolutions and trimming the fully connected layers, they are still too large to meet the demanding requirement for mobile and embedded devices (e.g., FPGA). For example, ResNet-101 has 200MB and GoogLeNet has 50MB. However, FPGAs often have less than 10MB of on-chip memory and no off-chip memory or storage [17]. To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23]. There also emerge few studies recently attempting to design small and compact networks, including the SqueezeNets [17] and the MobileNets [15]. Nevertheless, the performance drop of smaller networks is still a critical concern for many designs. For example, the authors of [17] have designed an extremely small network with less than 0.5MB and achieved 57.5% top-1 accuracy on ImageNet, which is considerably less than state-of-the-art results of deep CNNs (e.g., 68.65% of GoogLeNet according to our implementation).\nIn this paper, we address this concern by proposing several new techniques in the two aforementioned directions for reducing the model size. First, we consider parameter binarization - a simple and effective method for reducing the model size. While many previous works try to quantize or binarize all weights in deep CNNs, we propose a novel treatment of 1\u00d71 kernels and k\u00d7k kernels (e.g., k = 3, 5). In particular, we only binarize k \u00d7 k convolutional kernels (with k > 1). This design is motivated by the difference between 1\u00d7 1 convolutions and k\u00d7 k convolutions and the communitys prior knowledge about them. Unlike k\u00d7k con-\nar X\niv :1\n70 6.\n03 91\n2v 1\n[ cs\n.C V\n] 1\n3 Ju\nn 20\n17\nvolutions that explicitly extract features in a spatial manner, 1\u00d7 1 convolutions serve as data projection and transformation. In this sense, 1 \u00d7 1 convolutions need to preserve the information as much as possible and k \u00d7 k convolutions is only required to extract abstract patterns from images. In addition, many works in computer vision have used binary convolutions to extracted features from images [36, 33], while sparse projection has been reported with performance drop compared with dense projection [37]. The different treatments of 1\u00d71 and k\u00d7k kernels also has several benefits in terms of computation: (i) 1\u00d7 1 convolutions using floating points is cheaper and simpler than k \u00d7 k convolutions; (ii) this splitting is very suitable for FPGAs where logic blocks can efficiently handle the binarized convolutions and DSP units can handle the 1 \u00d7 1 convolutions. Second, we propose a simple new design of small networks by stacking up several layers of a novel module, which is built on a new block codenamed pattern residual block. The idea of the pattern residual block is to add transformed feature maps generated by 1\u00d7 1 convolutions to the pattern feature maps generated by k\u00d7 k convolutions, which resembles but generalizes the skip connection in ResNets. The new pattern residual block is well suited to the design of small networks for increasing the model capacity and more importantly to the binarized pattern networks for offsetting the effect of pattern binarization. Using 5.2MB, our designed small network (termed as SEP-Net) achieves 65.8% top-1 accuracy, beating that of the SqueezeNet (4.8MB, 60.4%) and the MobileNet (5.2MB, 63.7%) with simlar sizes. Leveraging our pattern binarization, we reduce our model size to 4.2MB while maintaining 63.7% top-1 accuracy. By further quantizing 1 \u00d7 1 filters using 8 bits, we achieve 63.5% top-1 accuracy with a model size 1.3MB."}, {"heading": "2. Related Work", "text": "In this section, we briefly review the related work on designing modern network structures and techniques for reducing neural network model size. Since introduced in [24], the 1 \u00d7 1 convolutions have been extensively used in modern networks such as Inception Nets and ResNets, which can reduce the number of parameters comparing with large convolutional kernels. In these network designs, the 1 \u00d7 1 convolutions mainly serve as data projection for reducing the channels of feature maps. Inception Nets also concatenate the 1 \u00d7 1 convolved feature maps and the k \u00d7 k convolved feature maps in the inception modules. In this paper, we will innovatively leverage the power of 1 \u00d7 1 convolutions to improve the performance of binarized networks. In addition, we will utilize the data transformation capability of 1\u00d7 1 convolutions to design a new residual block.\nRecently, there emerge intensive studies on compressing the size of CNNs. Various techniques have been introduced to CNNs to either reduce the number of parameters or re-\nduce the size of parameter representations. These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17]. There are several differences between the proposed weight binarization and previous work on weight binarization [16]. First, unlike previous work that binarize all weights, we only binarize the weights of k \u00d7 k filters (k > 1). Second, our focus is not to reduce the computational costs of training by binarization but instead to reduce the costs for deploying the model, which is clearly different from some previous works focusing on training, e.g., BinaryConnect [3], Binarized Neural Networks [16], XNORNets [29]. Our approach is to directly binarize fully trained deep CNNs and fine-tune the 1 \u00d7 1 filters. The benefit of this two-step approach is that it will not suffer from difficulties of training binarized networks and therefore enjoy less performance drop.\nThe design of small and compact networks is the focus of several recent works. Xu et al. [19] exploited the local binary convolutional operators in deep CNNs. They utilize traditional local binary operators in place of k \u00d7 k (k > 1) convolutions. The difference from our work is that the binary convolutional filters in their work are randomly generated and fixed during training of the networks. In addition, the performance of their networks on large scale ImageNet data is not shown. The SqueezeNet explored several strategies to reduce the number of parameters including (i) replacing k \u00d7 k convolutions (k > 1) by 1 \u00d7 1 convolutions; (ii) decreasing the number of input channels to 3\u00d7 3 filters; and (iii) postponing the down sampling to late layers in the network [17]. They designed Fire module that consists of 1 \u00d7 1 convolutional layers to squeeze the size of feature maps and an expand layer that has a mix of 1x1 and 3x3 convolution filters. The MobileNets approximate the standard k \u00d7 k (k > 1) convolutions by depth-wise convolutions and 1 \u00d7 1 convolutions, and also introduce two hyper-parameters to balance between latency and accuracy [15]. The small pattern networks explored in this paper share some similarities to these previous small networks in that much computation burden will shift to the 1\u00d7 1 convolutions but also bear some subtle differences. Most importantly, the present work has achieved the best performance on ImageNet data with the same network size among the MobileNets and SqueezeNets."}, {"heading": "3. Our Approach", "text": "In this section, we present the crucial ingredients of the designed SEP-Net: Pattern Binarization and Pattern Residual Block. It is notable that these two techniques are of their own interest and could be employed in design of other small neural network structures. Following those techniques, we present the detailed architecture of the designed SEP-Net."}, {"heading": "3.1. Pattern Binarization", "text": "Since fully connected layers have been removed in modern deep CNNs (including Inception Nets, ResNets), here we only consider parameterized convolutional layers. We adopt the following simple procedure to obtain a compressed network from any successful network structures including our designed SEP-Net as described later:\n\u2022 Step 1: train a full neural network such as GoogLeNet, ResNet and SEP-Net from scratch.\n\u2022 Step 2: binarize k \u00d7 k (k > 1) convolutional filters in the well-trained neural network model.\n\u2022 Step 3: fine-tune the scaling factors of all binarized k\u00d7k filters and the floating point representations of all 1\u00d7 1 filters by back-propagation on the same dataset.\nThe different treatments of 1 \u00d7 1 filters and k \u00d7 k filters is motivated by their complementary roles in CNNs. k \u00d7 k filters serve as spatial pattern extraction from an input image/feature map, while 1 \u00d7 1 filters mainly serve as data projection and transformation. To justify our choice, we also quantitatively analyze the effect of binarizing 1\u00d7 1 filters and k \u00d7 k filters from the viewpoint of quantization error. In particular, if we let W denote an c \u00d7 k \u00d7 k convolutional filter. The binarization seeks to approximate it by \u03b1B, where B is a binary filter with entries from {1,\u22121} and \u03b1 is a scaling factor. From the viewpoint of minimizing the quantization error, \u03b1,B can be sought by solving the following problem:\nmin \u03b1\u2208R,B\u2208{1,\u22121}c\u00d7k\u00d7k\nE(W,B,\u03b1) , \u2016W \u2212 \u03b1B\u20162F (1)\nThe optimal solutions have been studied in [17]. Actually, the optimalB\u2217 can be found by thresholding, i.e.,B\u2217i,j,l = 1 if Wi,j,l \u2265 0 and B\u2217i,j,l = \u22121 if Wi,j,l < 0. This binarization procedure is illustrated in Figure 1. The optimal \u03b1\u2217 can be computed by \u03b1\u2217 = \u2211 i,j,l |Wi,j,l| c\u00d7k\u00d7k . To quantitatively understand the effect of binarizing 1 \u00d7 1 filters and k \u00d7 k filters, we first train a fully GoogLeNet [34], which is composed of 1 \u00d7 1, 3 \u00d7 3 and 5 \u00d7 5 convolutions filters. Then we compute the quantization error for all filters, and obtain averaged quantization error for 1\u00d71, 3\u00d73 and 5\u00d75 filters, respectively. The result is reported in Table 1, from which we can clearly see that that quantization error for 1 \u00d7 1 filters is by a order of magnitude larger than that of 3\u00d7 3 and 5 \u00d7 5 filters. This justifies our choice of binarizing k \u00d7 k filters (k > 1) while retaining 1\u00d71 filters. We present more results on prediction performance by binarizing 1\u00d71, 3\u00d73 and 5\u00d7 5 filters.\nTable 1. Averaged Quantization Error of Different Sized Filters from GoogLeNet.\n1\u00d7 1 3\u00d7 3 5\u00d7 5 0.0462 0.0029 0.0056\nFigure 1. A trained 3 \u00d7 3 filter from GoogLeNet (Left), and its binarized version (Right)"}, {"heading": "3.2. Pattern Residual Block and the Architecture of", "text": "SEP-Net\nPattern binarization is an effective method for compressing the size of a large and deep CNN. We can apply this technique to reducing the size of previous deep CNNs (e.g., GoogLeNets, Inception Nets and ResNets). However, due to that the original sizes of these deep CNNs are very large, the resulting pattern networks from these deep CNNs may not be small enough for deployment in mobile and embedded applications. To address this issue, we propose a new design of a small and effective network (SEP-Net).\nPattern Residual Block. We first describe the building block of our design - a novel block codenamed pattern residual block (PRB). As shown in Figure 2(a), the PRB consists of 1 \u00d7 1 convolutions and k \u00d7 k convolutions (in particular k = 3), which are executed in parallel and their feature maps are added together. In particular, if we let x denote an input, the output of this building block can be expressed as O(x) = Ck\u00d7k(x) + C1\u00d71(x), where Ck\u00d7k denotes a k \u00d7 k convolution (k > 1) and C1\u00d71 represents 1\u00d7 1 convolution. If we consider x a vector, C1\u00d71(x) is equivalent to Ax, where A is a linear mapping. Since this is a generalization of identity mapping, we find it particularly useful in building pattern networks. Especially when the pattern block (3 \u2217 3 convolutions) is binarized, the additive 1 \u00d7 1 convolutions is able to offset the change incurred by the binarization, which acts the residual between fully 3 \u2217 3 filtered maps and binarized 3 \u2217 3 filtered maps.\nSEP-Net Module and SEP-Net. Built on the PRB, we design a new module for our SEP-Net, which is shown in Figure 3(f). Our SEP-Net module consits of a dimension reduction layer (1 \u00d7 1 convolutions), 2 PRB blocks with different output channles, and a dimension recovery layer (1 \u00d7 1 convolutions). The last recovery layer enables us to add the skip connection as in ResNets, which is helpful\nfor building up more layers. We also compare with other module designs of different networks in Figure 3. In particular, comparing with the Fire module of the SqueezeNet, the SEP-Net module does not use the filter concatenation as\nintroduced in Inception Net. Comparing with the ResNet bottleneck module, we replace the 3\u00d7 3 convolutional layers with the PRB blocks. Finally, we plot the architecture of our experimented SEP-Nets in Figure 4. The detailed infor-\nmation of our experimented SEP-Nets (filter size, number of output channels, pad and stride of convolutional layers) is delayed to the supplement.\nGroup-wise Convolution. To further reduce the model size, we adopt group convolution [21] in our architecture. In particular, for each convolution (including both 1 \u00d7 1 convolution and 3 \u00d7 3 convolution), we split the input feature maps into N groups and apply the corresponding convolution with a smaller number of channels to each group. The resulting feature maps in each group will be concatenated together. This simple design can effectively reduce the number of parameters by a factor of N . To see this, we can think about an example that maps an input feature map with a channels to a feature map with b channels. Using a single convolution k\u00d7k, the size of the filter is k \u2217k \u2217a\u2217 b. If we use group convolution withN groups, the size of each group filter is k \u2217 k \u2217 aN \u00d7 b N . As a result, the total size of all group filters is k \u2217 k \u2217 a \u2217 b/N . In our implementation, we utilize group convolutions with a factor of 4 for all 1\u00d71 and 3 \u00d7 3 kernels, thus reducing number of parameters by 4 times compared to that without using group convolutions. In Figure 2(b), we show 4 group convolutions that are applied to all 1 \u00d7 1 and 3 \u00d7 3 convolutions. It is notable that if we set the number of groups equal to the number of input channels, it degenerates to depth-wise convolutions as used in Google\u2019s MobileNets [15].\nAs a final note, one could potentially train the pattern networks with binarized k \u00d7 k filters from scratch, which might allow one to incorporate the domain knowledge into the design of binary patterns of k \u00d7 k filters. Thus, it holds potential to benefit from traditional used binary filters for designing deep but small neural networks."}, {"heading": "4. Experiment", "text": "In this section, we first present experimental results on CIFAR-10 [20] and ImageNet dataset [5] to justify that pattern binarization could reduce the effective number of parameters dramatically and fine-tuning other parameters of the binarized network with fixed binarized pattern could achieve comparable performance to that of the original neural network models. Then, we show the designed SEP-Net structure could achieve better or comparable performance on ImageNet than using similar sized networks such as recently released Google MobileNets. We conduct all experiments using Caffe [18] open sourced library."}, {"heading": "4.1. CIFAR-10", "text": "We first conduct experiments on the CIFAR-10 dataset [20], which has 50,000 training images and 10,000 test images. Each image belongs to one of 10 classes and has RGB format with 32x32 size in the original data set. The\ndata is preprocessed by Global Contrast Normalization (GCN) and ZCA whitening [9] and also padded by 4 pixels on each side of image. In the training phase, 32x32 crop is randomly sampled from the padded image while in the test phase we only test on the original image. We start the learning rate from 0.1 and divide by 10 at iteration 32k and 48k and the maximum number of iteration is 64K. The momentum is 0.9 and the weight decay is 0.0001. We train on one GPU using mini-batch SGD with a batch size 256. We report the test accuracy from the original paper and neural network models trained by us from scratch. Note that the minor difference of performance between our results and that reported in the original paper might be due to data augmentation. We apply pattern binarization to several recent successful network structures: ResNet-20, ResNet-32, ResNet-44, ResNet-56 [14]. We first binarize 3x3 kernels in all convolutional layers of the obtained Full Model. For presentation purpose, we term the model after pattern binarization without fine-tuning as (BiPattern model). Then we do fine-tuning other parameters of BiPattern model fixing binarized pattern on the original Cifar10 data set to obtain Refined model. We report test accuracy from the original paper denoted by Ref, and of the Full model, the BiPattern model and the Refined model in the Table 2. We can see from Table 2 that the test accuracy of Refined models are very close to that of Full models, which justify that 3x3 filters could be replaced with binary pattern extractions without sacrificing performance.\nIn Table 3 we compare the effective number of parameters between full ResNet-20, ResNet-32, ResNet-44, ResNet-56 models and their corresponding binarized pattern networks. The effective number of parameters of the pattern network is referred to as the number of parameters that use floating point representations. In particular, we use one number to represent the binarized 3\u00d73 or 5\u00d75 kernels by the scaling factor. From Table 3 we can see that the number of parameters is reduced dramatically. For example the number of parameters in corresponding pattern network is reduced 86% compared to original ResNet-56 model."}, {"heading": "4.2. ImageNet", "text": "We also carry out experiments on the ImageNet 2012 classification data set [5], which has 1.28 millions of training images and 50k validation images. Each image belongs to one of 1000 classes. We apply the same pattern binarization procedure used to ResNet on CIFAR-10 experiment to GoogLeNet [34] and our customized Inception-net (denoted as C-InceptionNet) that removes all computationally expensive 5\u00d7 5 convolutional kernels . For training GoogLeNet, we adopt the learning strategy from Caffe website and the learning rate follows a polynomial decay with the initial learning rate being 0.01, momentum term 0.9 and weight decay 0.0002. We train GoogLeNet with a maximum num-\nber of iterations 600K on one GPU and a batch size 128. For training C-InceptionNet, we set initial learning rate as 0.1, divide learning rate 10 time after every 24 epochs, and train in total 90 epochs. At the end, we compare test accuracy of the Full model, the BiPattern model, and the Refined model corresponding to GoogLeNet and C-InceptionNet.\nTo illustrate the effect of binarizing different size filters, we report several results on GoogLeNet. We first binarize 3 \u00d7 3 filters fixing 5 \u00d7 5 filters. Alternatively, we binarize 5 \u00d7 5 filters meanwhile fixing 3 \u00d7 3 filters. For comparison, we also conduct experiment by a) binarizing both 3\u00d73 and 5 \u00d7 5 filters; b) binarizing only 1 \u00d7 1 kernels. For CInceptionNet, we only show the result of binarizing all 3 filters. We present comparison results including test performance on Refined model using multicrop [21] in Table 4, from which we could see: i) for C-InceptionNet, the performance of the Refined model is competitive to the full model, just 0.8% less than the full model on Top-1 accuracy; ii) for GoogLeNet, the performance of the Refined models of binarizing k \u00d7 k filters (k > 1) is significantly competitive to the full model; iii) binarizing 1 \u00d7 1 kernels suffers from more performance loss compared to binarizing k \u00d7 k kernels (k > 1), which justifies that our choice of binarizing k \u00d7 k kernels (k > 1) while retaining 1 \u00d7 1 kernels. All the performance numbers are based on a sin-\ngle center crop when performing testing except for the last column, which is included for future reference.\nIn Table 4.2, we compare the number of parameters of the full GoogLeNet and C-InceptionNet and their corresponding pattern networks. We can see that the pattern networks have dramatically less number of parameters that that of the full models. For example through binarizing 3\u00d73 and 5\u00d7 5 filters, we reduce the number of parameters by 44.6% compared to that of the full GoogLeNet."}, {"heading": "4.3. Comparison with The-State-Of-Art", "text": "Finally, we compare the proposed SEP-Net with the SqueezeNet and the recently released MobileNet in terms of model size and classification accuracy. We present the performance of several variations of our SEP-Net architectures: SEP-Net-R, SEP-Net-B, SEP-Net-BQ. Here SEP-Net-R is our SEP-Net with raw filters. SEP-Net-B denotes SEP-Net with pattern binarization. SEP-Net-BQ further quantizes all other parameters to 8 bits.\nAs shown in Table 6, we have trained two extremely small SEP-Nets suited for mobile/embedded devices. One model has 1.3M parameters, while the other has 1.7M parameters. The two SEP-Nets share the same neural network structure as Figure 4. The difference between the two SEPNets is: (1) in the SEP-Net with 1.7M parameters the last convolution layer uses a factor of 4 for group-wise convolution while the SEP-Net with 1.3M parameters uses a factor of 16 for the last layer group-wise convolution; (2) the output dimension of the last convolutional layers of the SEPNet with 1.7M parameters is 400 while that of the SEPNet with 1.3M parameters is 512. They produce 65.8% and 66.7% top 1 classification accuracy on the ImageNet dataset, respectively. Our small model outperforms MobileNet\u2019s equivalent with the same model size. Our larger\nmodel increases number of parameters by 0.3M, boosting the performance by 2%.\nFor easy comparison to other small CNNs, we also present the memory size of different models. Our SEPNet-B reduces the model size to 4.2MB with slightly decreased accuracy of 63.7% that equals to the performance of the MobileNet with 5.2MB. Our SEP-Net-BQ further reduces the storage or memory cost to 1.3MB while maintaining roughly the same performance. It indicates that our extremely compact model also works with standard compression techniques."}, {"heading": "5. Conclusion", "text": "In this paper, we view neural network operations as 1\u00d71 data transformation and k\u00d7k abstract pattern extraction. By converting k \u00d7 k convolution kernels into binary patterns, we significantly reduced the model size as well as computational cost of modern neural network architectures such as InceptionNets and ResNets, without significantly sacrificing the network performances. Our binarization approach is extremely simple compared to previous literatures. We further proposed a small network architecture containing pattern residual blocks, which utilize binarized patterns to extract features and 1 \u00d7 1 transformation to compute pattern residuals. The resulting concise neural network is small and effective compared to recent advances in compact neu-\nral network design. The effectiveness of our approach is demonstrated intensively on the CIFAR-10 dataset and the ImageNet dataset. We hope our investigation will inspire the community for advanced architecture design from a pattern point of view."}, {"heading": "6. Appendix", "text": "We present the whole neural network structures for the designed SEP-Net with 1.7M parameters in Table 7 and SEP-Net with less parameters in Table 8."}], "references": [{"title": "Deep learning with low precision by half-wave gaussian quantization", "author": ["Z. Cai", "X. He", "J. Sun", "N. Vasconcelos"], "venue": "arXiv preprint arXiv:1702.00953,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 2017}, {"title": "Compressing neural networks with the hashing trick", "author": ["W. Chen", "J. Wilson", "S. Tyree", "K. Weinberger", "Y. Chen"], "venue": "ICML,", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2015}, {"title": "Binaryconnect: Training deep neural networks with binary weights during propagations", "author": ["M. Courbariaux", "Y. Bengio", "J.-P. David"], "venue": "NIPS,", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2015}, {"title": "Binarized neural networks: Training deep neural networks with weights and activations constrained to+ 1 or-1", "author": ["M. Courbariaux", "I. Hubara", "D. Soudry", "R. El-Yaniv", "Y. Bengio"], "venue": "arXiv preprint arXiv:1602.02830,", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2016}, {"title": "Imagenet: a large-scale hierachical image database", "author": ["J. Deng", "W. Dong", "R. Socher", "L. Li", "K. Li", "L. Fei-Fei"], "venue": "CVPR,", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2009}, {"title": "Devnet: A deep event network for multimedia event detection and evidence recounting", "author": ["C. Gan", "N. Wang", "Y. Yang", "D.-Y. Yeung", "A.G. Hauptmann"], "venue": "CVPR,", "citeRegEx": "6", "shortCiteRegEx": null, "year": 2015}, {"title": "Fast r-cnn", "author": ["R. Girshick"], "venue": "ICCV,", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2015}, {"title": "Rich feature hierarchies for accurate object detection and semantic segmentation", "author": ["R. Girshick", "J. Donahue", "T. Darrell", "J. Malik"], "venue": "CVPR,", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2014}, {"title": "Maxout networks", "author": ["I.J. Goodfellow", "D. Warde-Farley", "M. Mirza", "A. Courville", "Y. Bengio"], "venue": "arXiv preprint arXiv:1302.4389,", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2013}, {"title": "Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding", "author": ["S. Han", "H. Mao", "W.J. Dally"], "venue": "arXiv preprint arXiv:1510.00149,", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2015}, {"title": "A deep neural network compression pipeline: Pruning, quantization, huffman encoding", "author": ["S. Han", "H. Mao", "W.J. Dally"], "venue": "arXiv preprint arXiv:1510.00149, 10,", "citeRegEx": "11", "shortCiteRegEx": null, "year": 2015}, {"title": "Learning both weights and connections for efficient neural network", "author": ["S. Han", "J. Pool", "J. Tran", "W. Dally"], "venue": "NIPS,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2015}, {"title": "Mask r-cnn", "author": ["K. He", "G. Gkioxari", "P. Doll\u00e1r", "R. Girshick"], "venue": "arXiv preprint arXiv:1703.06870,", "citeRegEx": "13", "shortCiteRegEx": null, "year": 2017}, {"title": "Deep residual learning for image recognition", "author": ["K. He", "X. Zhang", "S. Ren", "J. Sun"], "venue": "CVPR,", "citeRegEx": "14", "shortCiteRegEx": null, "year": 2016}, {"title": "Mobilenets: Efficient convolutional neural networks for mobile vision applications", "author": ["A.G. Howard", "M. Zhu", "B. Chen", "D. Kalenichenko", "W. Wang", "T. Weyand", "M. Andreetto", "H. Adam"], "venue": "arXiv preprint arXiv:1704.04861,", "citeRegEx": "15", "shortCiteRegEx": null, "year": 2017}, {"title": "Binarized neural networks", "author": ["I. Hubara", "M. Courbariaux", "D. Soudry", "R. El-Yaniv", "Y. Bengio"], "venue": "Advances in Neural Information Processing Systems, pages 4107\u20134115,", "citeRegEx": "16", "shortCiteRegEx": null, "year": 2016}, {"title": "Squeezenet: Alexnet-level accuracy with 50x fewer parameters and\u00a1 0.5 mb model size", "author": ["F.N. Iandola", "S. Han", "M.W. Moskewicz", "K. Ashraf", "W.J. Dally", "K. Keutzer"], "venue": "arXiv preprint arXiv:1602.07360,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2016}, {"title": "Caffe: Convolutional architecture for fast feature embedding", "author": ["Y. Jia", "E. Shelhamer", "J. Donahue", "S. Karayev", "J. Long", "R. Girshick", "S. Guadarrama", "T. Darrell"], "venue": "arXiv preprint arXiv:1408.5093,", "citeRegEx": "18", "shortCiteRegEx": null, "year": 2014}, {"title": "Local binary convolutional neural networks", "author": ["F. Juefei-Xu", "V.N. Boddeti", "M. Savvides"], "venue": "arXiv preprint arXiv:1608.06049,", "citeRegEx": "19", "shortCiteRegEx": null, "year": 2016}, {"title": "Learning multiple layers of features from tiny images", "author": ["A. Krizhevsky", "G. Hinton"], "venue": null, "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2009}, {"title": "Imagenet classification with deep convolutional neural networks", "author": ["A. Krizhevsky", "I. Sutskever", "G. Hinton"], "venue": "NIPS,", "citeRegEx": "21", "shortCiteRegEx": null, "year": 2012}, {"title": "Ternary weight networks", "author": ["F. Li", "B. Zhang", "B. Liu"], "venue": "arXiv preprint arXiv:1605.04711,", "citeRegEx": "22", "shortCiteRegEx": null, "year": 2016}, {"title": "Overcoming challenges in fixed point training of deep convolutional networks", "author": ["D.D. Lin", "S.S. Talathi"], "venue": "arXiv preprint arXiv:1607.02241,", "citeRegEx": "23", "shortCiteRegEx": null, "year": 2016}, {"title": "Network in network", "author": ["M. Lin", "Q. Chen", "S. Yan"], "venue": "arXiv preprint arXiv:1312.4400,", "citeRegEx": "24", "shortCiteRegEx": null, "year": 2013}, {"title": "Neural networks with few multiplications", "author": ["Z. Lin", "M. Courbariaux", "R. Memisevic", "Y. Bengio"], "venue": "arXiv preprint arXiv:1510.03009,", "citeRegEx": "25", "shortCiteRegEx": null, "year": 2015}, {"title": "Fully convolutional networks for semantic segmentation", "author": ["J. Long", "E. Shelhamer", "T. Darrell"], "venue": "CVPR,", "citeRegEx": "26", "shortCiteRegEx": null, "year": 2015}, {"title": "Ternary neural networks with fine-grained quantization", "author": ["N. Mellempudi", "A. Kundu", "D. Mudigere", "D. Das", "B. Kaul", "P. Dubey"], "venue": "arXiv preprint arXiv:1705.01462,", "citeRegEx": "27", "shortCiteRegEx": null, "year": 2017}, {"title": "Recurrent neural networks with limited numerical precision", "author": ["J. Ott", "Z. Lin", "Y. Zhang", "S.-C. Liu", "Y. Bengio"], "venue": "arXiv preprint arXiv:1608.06902,", "citeRegEx": "28", "shortCiteRegEx": null, "year": 2016}, {"title": "Xnornet: Imagenet classification using binary convolutional neural networks", "author": ["M. Rastegari", "V. Ordonez", "J. Redmon", "A. Farhadi"], "venue": "ECCV. Springer,", "citeRegEx": "29", "shortCiteRegEx": null, "year": 2016}, {"title": "Faster r-cnn: Towards real-time object detection with region proposal networks", "author": ["S. Ren", "K. He", "R. Girshick", "J. Sun"], "venue": "NIPS,", "citeRegEx": "30", "shortCiteRegEx": null, "year": 2015}, {"title": "Overfeat: Integrated recognition, localization and detection using convolutional networks", "author": ["P. Sermanet", "D. Eigen", "X. Zhang", "M. Mathieu", "R. Fergus", "Y. LeCun"], "venue": "arXiv preprint arXiv:1312.6229,", "citeRegEx": "31", "shortCiteRegEx": null, "year": 2013}, {"title": "Very deep convolutional networks for large-scale image recognition", "author": ["K. Simonyan", "A. Zisserman"], "venue": "ICLR,", "citeRegEx": "32", "shortCiteRegEx": null, "year": 2015}, {"title": "Fast image gradients using binary feature convolutions", "author": ["P.-L. St-Charles", "G.-A. Bilodeau", "R. Bergevin"], "venue": "CVPR,", "citeRegEx": "33", "shortCiteRegEx": null, "year": 2016}, {"title": "Going deeper with convolutions", "author": ["C. Szegedy", "W. Liu", "Y. Jia", "P. Sermanet", "S. Reed", "D. Anguelov", "D. Erhan", "V. Vanhoucke", "A. Rabinovich"], "venue": "CVPR,", "citeRegEx": "34", "shortCiteRegEx": null, "year": 2015}, {"title": "Deeppose: Human pose estimation via deep neural networks", "author": ["A. Toshev", "C. Szegedy"], "venue": "CVPR,", "citeRegEx": "35", "shortCiteRegEx": null, "year": 2014}, {"title": "Haar features for facs au recognition", "author": ["J. Whitehill", "C.W. Omlin"], "venue": "Automatic Face and Gesture Recognition, 2006. FGR 2006. 7th International Conference on, pages 5\u2013 pp. IEEE,", "citeRegEx": "36", "shortCiteRegEx": null, "year": 2006}, {"title": "Efficient non-oblivious randomized reduction for risk minimization with improved excess risk guarantee", "author": ["Y. Xu", "H. Yang", "L. Zhang", "T. Yang"], "venue": "arXiv preprint arXiv:1612.01663,", "citeRegEx": "37", "shortCiteRegEx": null, "year": 2016}, {"title": "A discriminative cnn video representation for event detection", "author": ["Z. Xu", "Y. Yang", "A.G. Hauptmann"], "venue": "CVPR,", "citeRegEx": "38", "shortCiteRegEx": null, "year": 2015}, {"title": "Training ternary neural networks with exact proximal operator", "author": ["P. Yin", "S. Zhang", "J. Xin", "Y. Qi"], "venue": "arXiv preprint arXiv:1612.06052,", "citeRegEx": "39", "shortCiteRegEx": null, "year": 2016}, {"title": "Exploiting image-trained cnn architectures for unconstrained video classification", "author": ["S. Zha", "F. Luisier", "W. Andrews", "N. Srivastava", "R. Salakhutdinov"], "venue": "arXiv preprint arXiv:1503.04144,", "citeRegEx": "40", "shortCiteRegEx": null, "year": 2015}, {"title": "Dorefa-net: Training low bitwidth convolutional neural networks with low bitwidth gradients", "author": ["S. Zhou", "Y. Wu", "Z. Ni", "X. Zhou", "H. Wen", "Y. Zou"], "venue": "arXiv preprint arXiv:1606.06160,", "citeRegEx": "41", "shortCiteRegEx": null, "year": 2016}], "referenceMentions": [{"referenceID": 20, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 143, "endOffset": 159}, {"referenceID": 31, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 143, "endOffset": 159}, {"referenceID": 33, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 143, "endOffset": 159}, {"referenceID": 13, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 143, "endOffset": 159}, {"referenceID": 7, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 178, "endOffset": 192}, {"referenceID": 30, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 178, "endOffset": 192}, {"referenceID": 6, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 178, "endOffset": 192}, {"referenceID": 29, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 178, "endOffset": 192}, {"referenceID": 25, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 207, "endOffset": 215}, {"referenceID": 12, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 207, "endOffset": 215}, {"referenceID": 37, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 232, "endOffset": 243}, {"referenceID": 39, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 232, "endOffset": 243}, {"referenceID": 5, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 232, "endOffset": 243}, {"referenceID": 34, "context": "Deep convolutional neural networks have already achieved tremendous success on a variety of computer vision tasks such as image classification [21, 32, 34, 14], object detection [8, 31, 7, 30], segmentation [26, 13], video analysis [38, 40, 6], human pose estimation [35] among many others.", "startOffset": 267, "endOffset": 271}, {"referenceID": 20, "context": "The performance on these different tasks are dramatically boosted by sophisticated neural network structures such as AlexNet [21], NIN (Network In Network) [24], VGG-Net [32], Inception Network [34], and ResNet [14].", "startOffset": 125, "endOffset": 129}, {"referenceID": 23, "context": "The performance on these different tasks are dramatically boosted by sophisticated neural network structures such as AlexNet [21], NIN (Network In Network) [24], VGG-Net [32], Inception Network [34], and ResNet [14].", "startOffset": 156, "endOffset": 160}, {"referenceID": 31, "context": "The performance on these different tasks are dramatically boosted by sophisticated neural network structures such as AlexNet [21], NIN (Network In Network) [24], VGG-Net [32], Inception Network [34], and ResNet [14].", "startOffset": 170, "endOffset": 174}, {"referenceID": 33, "context": "The performance on these different tasks are dramatically boosted by sophisticated neural network structures such as AlexNet [21], NIN (Network In Network) [24], VGG-Net [32], Inception Network [34], and ResNet [14].", "startOffset": 194, "endOffset": 198}, {"referenceID": 13, "context": "The performance on these different tasks are dramatically boosted by sophisticated neural network structures such as AlexNet [21], NIN (Network In Network) [24], VGG-Net [32], Inception Network [34], and ResNet [14].", "startOffset": 211, "endOffset": 215}, {"referenceID": 16, "context": "However, FPGAs often have less than 10MB of on-chip memory and no off-chip memory or storage [17].", "startOffset": 93, "endOffset": 97}, {"referenceID": 0, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 3, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 10, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 11, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 1, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 15, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 2, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 28, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 27, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 40, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 22, "context": "To further reduce the model size, various compressing techniques have been introduced to deep CNNs, including parameter quantization, binarization, sharing, pruning, hashing, Huffman coding, etc [1, 4, 11, 12, 2, 16, 3, 29, 28, 41, 23].", "startOffset": 195, "endOffset": 235}, {"referenceID": 16, "context": "There also emerge few studies recently attempting to design small and compact networks, including the SqueezeNets [17] and the MobileNets [15].", "startOffset": 114, "endOffset": 118}, {"referenceID": 14, "context": "There also emerge few studies recently attempting to design small and compact networks, including the SqueezeNets [17] and the MobileNets [15].", "startOffset": 138, "endOffset": 142}, {"referenceID": 16, "context": "For example, the authors of [17] have designed an extremely small network with less than 0.", "startOffset": 28, "endOffset": 32}, {"referenceID": 35, "context": "In addition, many works in computer vision have used binary convolutions to extracted features from images [36, 33], while sparse projection has been reported with performance drop compared with dense projection [37].", "startOffset": 107, "endOffset": 115}, {"referenceID": 32, "context": "In addition, many works in computer vision have used binary convolutions to extracted features from images [36, 33], while sparse projection has been reported with performance drop compared with dense projection [37].", "startOffset": 107, "endOffset": 115}, {"referenceID": 36, "context": "In addition, many works in computer vision have used binary convolutions to extracted features from images [36, 33], while sparse projection has been reported with performance drop compared with dense projection [37].", "startOffset": 212, "endOffset": 216}, {"referenceID": 23, "context": "Since introduced in [24], the 1 \u00d7 1 convolutions have been extensively used in modern networks such as Inception Nets and ResNets, which can reduce the number of parameters comparing with large convolutional kernels.", "startOffset": 20, "endOffset": 24}, {"referenceID": 9, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 29, "endOffset": 37}, {"referenceID": 11, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 29, "endOffset": 37}, {"referenceID": 15, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 59, "endOffset": 70}, {"referenceID": 2, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 59, "endOffset": 70}, {"referenceID": 28, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 59, "endOffset": 70}, {"referenceID": 27, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 93, "endOffset": 113}, {"referenceID": 38, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 93, "endOffset": 113}, {"referenceID": 26, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 93, "endOffset": 113}, {"referenceID": 21, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 93, "endOffset": 113}, {"referenceID": 24, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 93, "endOffset": 113}, {"referenceID": 3, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 135, "endOffset": 141}, {"referenceID": 0, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 135, "endOffset": 141}, {"referenceID": 23, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 183, "endOffset": 191}, {"referenceID": 16, "context": "These include weight pruning [10, 12], weight binarization [16, 3, 29], weight ternarization [28, 39, 27, 22, 25], weight quantization [4, 1] and designing small and compact networks [24, 17].", "startOffset": 183, "endOffset": 191}, {"referenceID": 15, "context": "There are several differences between the proposed weight binarization and previous work on weight binarization [16].", "startOffset": 112, "endOffset": 116}, {"referenceID": 2, "context": ", BinaryConnect [3], Binarized Neural Networks [16], XNORNets [29].", "startOffset": 16, "endOffset": 19}, {"referenceID": 15, "context": ", BinaryConnect [3], Binarized Neural Networks [16], XNORNets [29].", "startOffset": 47, "endOffset": 51}, {"referenceID": 28, "context": ", BinaryConnect [3], Binarized Neural Networks [16], XNORNets [29].", "startOffset": 62, "endOffset": 66}, {"referenceID": 18, "context": "[19] exploited the local binary convolutional operators in deep CNNs.", "startOffset": 0, "endOffset": 4}, {"referenceID": 16, "context": "The SqueezeNet explored several strategies to reduce the number of parameters including (i) replacing k \u00d7 k convolutions (k > 1) by 1 \u00d7 1 convolutions; (ii) decreasing the number of input channels to 3\u00d7 3 filters; and (iii) postponing the down sampling to late layers in the network [17].", "startOffset": 283, "endOffset": 287}, {"referenceID": 14, "context": "The MobileNets approximate the standard k \u00d7 k (k > 1) convolutions by depth-wise convolutions and 1 \u00d7 1 convolutions, and also introduce two hyper-parameters to balance between latency and accuracy [15].", "startOffset": 198, "endOffset": 202}, {"referenceID": 16, "context": "The optimal solutions have been studied in [17].", "startOffset": 43, "endOffset": 47}, {"referenceID": 33, "context": "To quantitatively understand the effect of binarizing 1 \u00d7 1 filters and k \u00d7 k filters, we first train a fully GoogLeNet [34], which is composed of 1 \u00d7 1, 3 \u00d7 3 and 5 \u00d7 5 convolutions filters.", "startOffset": 120, "endOffset": 124}, {"referenceID": 20, "context": "To further reduce the model size, we adopt group convolution [21] in our architecture.", "startOffset": 61, "endOffset": 65}, {"referenceID": 14, "context": "It is notable that if we set the number of groups equal to the number of input channels, it degenerates to depth-wise convolutions as used in Google\u2019s MobileNets [15].", "startOffset": 162, "endOffset": 166}, {"referenceID": 19, "context": "In this section, we first present experimental results on CIFAR-10 [20] and ImageNet dataset [5] to justify that pattern binarization could reduce the effective number of parameters dramatically and fine-tuning other parameters of the binarized network with fixed binarized pattern could achieve comparable performance to that of the original neural network models.", "startOffset": 67, "endOffset": 71}, {"referenceID": 4, "context": "In this section, we first present experimental results on CIFAR-10 [20] and ImageNet dataset [5] to justify that pattern binarization could reduce the effective number of parameters dramatically and fine-tuning other parameters of the binarized network with fixed binarized pattern could achieve comparable performance to that of the original neural network models.", "startOffset": 93, "endOffset": 96}, {"referenceID": 17, "context": "We conduct all experiments using Caffe [18] open sourced library.", "startOffset": 39, "endOffset": 43}, {"referenceID": 19, "context": "We first conduct experiments on the CIFAR-10 dataset [20], which has 50,000 training images and 10,000 test images.", "startOffset": 53, "endOffset": 57}, {"referenceID": 8, "context": "The data is preprocessed by Global Contrast Normalization (GCN) and ZCA whitening [9] and also padded by 4 pixels on each side of image.", "startOffset": 82, "endOffset": 85}, {"referenceID": 13, "context": "We apply pattern binarization to several recent successful network structures: ResNet-20, ResNet-32, ResNet-44, ResNet-56 [14].", "startOffset": 122, "endOffset": 126}, {"referenceID": 4, "context": "ImageNet We also carry out experiments on the ImageNet 2012 classification data set [5], which has 1.", "startOffset": 84, "endOffset": 87}, {"referenceID": 33, "context": "We apply the same pattern binarization procedure used to ResNet on CIFAR-10 experiment to GoogLeNet [34] and our customized Inception-net (denoted as C-InceptionNet) that removes all computationally expensive 5\u00d7 5 convolutional kernels .", "startOffset": 100, "endOffset": 104}, {"referenceID": 20, "context": "We present comparison results including test performance on Refined model using multicrop [21] in Table 4, from which we could see: i) for C-InceptionNet, the performance of the Refined model is competitive to the full model, just 0.", "startOffset": 90, "endOffset": 94}], "year": 2017, "abstractText": "While going deeper has been witnessed to improve the performance of convolutional neural networks (CNN), going smaller for CNN has received increasing attention recently due to its attractiveness for mobile/embedded applications. It remains an active and important topic how to design a small network while retaining the performance of large and deep CNNs (e.g., Inception Nets, ResNets). Albeit there are already intensive studies on compressing the size of CNNs, the considerable drop of performance is still a key concern in many designs. This paper addresses this concern with several new contributions. First, we propose a simple yet powerful method for compressing the size of deep CNNs based on parameter binarization. The striking difference from most previous work on parameter binarization/quantization lies at different treatments of 1\u00d7 1 convolutions and k\u00d7k convolutions (k > 1), where we only binarize k \u00d7 k convolutions into binary patterns. The resulting networks are referred to as pattern networks. By doing this, we show that previous deep CNNs such as GoogLeNet and Inception-type Nets can be compressed dramatically with marginal drop in performance. Second, in light of the different functionalities of 1\u00d71 (data projection/transformation) and k \u00d7 k convolutions (pattern extraction), we propose a new block structure codenamed the pattern residual block that adds transformed feature maps generated by 1\u00d71 convolutions to the pattern feature maps generated by k \u00d7 k convolutions, based on which we design a small network with \u223c 1 million parameters. Combining with our parameter binarization, we achieve better performance on ImageNet than using similar sized networks including recently released Google MobileNets.", "creator": "LaTeX with hyperref package"}}}