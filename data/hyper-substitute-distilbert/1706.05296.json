{"id": "1706.05296", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "16-Jun-2017", "title": "Value-Decomposition Networks For Cooperative Multi-Agent Learning", "abstract": "we illustrate the mathematics of implementing cross - resource reinforcement learning with seemingly single simultaneous reward signal. her class of reliability problems is difficult remembering this very often large combined action and observation spaces. recognizing the fully centralized and decentralized approaches, we overcome every problem of task collaboration and a phenomenon concerning interpret one \" lazy success \" problem, which arises due to cognitive observability. we define these problems by training competitive agents following a novel system decomposition network architecture, which propose to improve the team value function into response - wise value functions. we integrate quantitative experimental evaluation across stimulus range. partially - structured participant - agent domains competing with identical learning function sub - decompositions carries on superior evaluation, in particular when measured with weight sharing, role information and information fusion.", "histories": [["v1", "Fri, 16 Jun 2017 14:47:21 GMT  (8473kb,D)", "http://arxiv.org/abs/1706.05296v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["peter sunehag", "guy lever", "audrunas gruslys", "wojciech marian czarnecki", "vinicius zambaldi", "max jaderberg", "marc lanctot", "nicolas sonnerat", "joel z leibo", "karl tuyls", "thore graepel"], "accepted": false, "id": "1706.05296"}, "pdf": {"name": "1706.05296.pdf", "metadata": {"source": "CRF", "title": "Value-Decomposition Networks For Cooperative Multi-Agent Learning", "authors": ["Peter Sunehag"], "emails": ["sunehag@google.com", "guylever@google.com", "audrunas@google.com", "lejlot@google.com", "vzambaldi@google.com", "jaderberg@google.com", "lanctot@google.com", "sonnerat@google.com", "jzl@google.com", "karltuyls@google.com", "thore@google.com"], "sections": [{"heading": "1 Introduction", "text": "We consider the cooperative multi-agent reinforcement learning (MARL) problem (Panait and Luke, 2005; Busoniu et al., 2008; Tuyls and Weiss, 2012), in which a system of several learning agents must jointly optimize a single reward signal \u2013 the team reward \u2013 accumulated over time. Each agent has access to its own (\u201clocal\u201d) observations and is responsible for choosing actions from its own action set. Coordinated MARL problems emerge in applications such as coordinating self-driving vehicles and/or traffic signals in a transportation system, or optimizing the productivity of a factory comprised of many interacting components. More generally, with AI agents becoming more pervasive, they will have to learn to coordinate to achieve common goals.\nAlthough in practice some applications may require local autonomy, in principle the cooperative MARL problem could be treated using a centralized approach, reducing the problem to single-agent reinforcement learning (RL) over the concatenated observations and combinatorial action space. We show that the centralized approach consistently fails on relatively simple cooperative MARL\nar X\niv :1\n70 6.\n05 29\n6v 1\nproblems in practice. We present a simple experiment in which the centralised approach fails by learning inefficient policies with only one agent active and the other being \u201clazy\u201d. This happens when one agent learns a useful policy, but a second agent is discouraged from learning because its exploration would hinder the first agent and lead to worse team reward.1\nAn alternative approach is to train independent learners to optimize for the team reward. In general each agent is then faced with a non-stationary learning problem because the dynamics of its environment effectively changes as teammates change their behaviours through learning (Laurent et al., 2011). Furthermore, since from a single agent\u2019s perspective the environment is only partially observed, agents may receive spurious reward signals that originate from their teammates\u2019 (unobserved) behaviour. Because of this inability to explain its own observed rewards naive independent RL is often unsuccessful: for example Claus and Boutilier (1998) show that independent Q-learners cannot distinguish teammates\u2019 exploration from stochasticity in the environment, and fail to solve even an apparently trivial, 2-agent, stateless, 3 \u00d7 3-action problem and the general Dec-POMDP problem is known to be intractable (Bernstein et al., 2000; Oliehoek and Amato, 2016). Though we here focus on 2 player coordination, we note that the problems with individual learners and centralized approaches just gets worse with more agents since then, most rewards do not relate to the individual agent and the action space grows exponentially for the fully centralized approach.\nOne approach to improving the performance of independent learners is to design individual reward functions, more directly related to individual agent observations. However, even in the single-agent case, reward shaping is difficult and only a small class of shaped reward functions are guaranteed to preserve optimality w.r.t. the true objective (Ng et al., 1999; Devlin et al., 2014; Eck et al., 2016). In this paper we aim for more general autonomous solutions, in which the decomposition of the team value function is learned.\nWe introduce a novel learned additive value-decomposition approach over individual agents. Implicitly, the value decomposition network aims to learn an optimal linear value decomposition from the team reward signal, by back-propagating the total Q gradient through deep neural networks representing the individual component value functions. This additive value decomposition is specifically motivated by avoiding the spurious reward signals that emerge in purely independent learners.The implicit value function learned by each agent depends only on local observations, and so is more easily learned. Our solution also ameliorates the coordination problem of independent learning highlighted in Claus and Boutilier (1998) because it effectively learns in a centralised fashion at training time, while agents can be deployed individually.\nFurther, in the context of the introduced agent, we evaluate weight sharing, role information and information channels as additional enhancements that have recently been reported to improve sample complexity and memory requirements (Hausknecht, 2016; Foerster et al., 2016; Sukhbaatar et al., 2016). However, our main comparison is between three kinds of architecture; Value-Decomposition across individual agents, Independent Learners and Centralized approaches. We investigate and benchmark combinations of these techniques applied to a range of new interesting two-player coordination domains. We find that Value-Decomposition is a much better performing approach than centralization or fully independent learners, and that when combined with the additional techniques, results in an agent that consistently outperforms centralized and independent learners by a big margin."}, {"heading": "1.1 Other Related Work", "text": "Schneider et al. (1999) consider the optimization of the sum of individual reward functions, by optimizing local compositions of individual value functions learnt from them. Russell and Zimdars (2003) sums the Q-functions of independent learning agents with individual rewards, before making the global action selection greedily to optimize for total reward. Our approach works with only a team reward, and learns the value-decomposition autonomously from experience, and it similarly differs from the approach with coordination graphs (Guestrin et al., 2002) and the max-plus algorithm (Kuyer et al., 2008; van der Pol and Oliehoek, 2016).\nOther work addressing team rewards in cooperative settings is based on difference rewards (Tumer and Wolpert, 2004), measuring the impact of an agent\u2019s action on the full system reward. This reward\n1For example, imagine training a 2-player soccer team using RL with the number of goals serving as the team reward signal. Suppose one player has become a better scorer than the other. When the worse player takes a shot the outcome is on average much worse, and the weaker player learns to avoid taking shots (Hausknecht, 2016).\nhas nice properties (e.g. high learnability), but can be impractical as it requires knowledge about the system state (Colby et al., 2016; Agogino and Tumer, 2008; Proper and Tumer, 2012). Other approaches can be found in Devlin et al. (2014); HolmesParker et al. (2016); Babes et al. (2008)."}, {"heading": "2 Background", "text": ""}, {"heading": "2.1 Reinforcement Learning", "text": "We recall some key concepts of the RL setting (Sutton and Barto, 1998), an agent-environment framework (Russell and Norvig, 2010) in which an agent sequentially interacts with the environment over a sequence of timesteps, t = 1, 2, 3, . . ., by executing actions and receiving observations and rewards, and aims to maximize cumulative reward. This is typically modelled as a Markov decision process (MDP) (e.g. Puterman, 1994) defined by a tuple \u3008S,A, T1, T , R\u3009 comprising the state space S, action space A, a (possibly stochastic) reward function R : S \u00d7A\u00d7 S \u2192 R start state distribution T1 \u2208 P(S) and transition function T : S \u00d7A \u2192 P(S), where P(X ) denotes the set of probability distributions over the set X . We use R\u0304 to denote the expected value of R. The agent\u2019s interactions give rise to a trajectory (S1, A1, R1, S2, ...) where S1 \u223c T1, St+1 \u223c T (\u00b7|St, At) and Rt = R(St, At, St+1), and we denote random variables in upper-case, and their realizations in lower-case. At time t the agent observes ot \u2208 O which is typically some function of the state st, and when the state is not fully observed the system is called a partially observed Markov decision process (POMDP).\nThe agent\u2019s goal is to maximize expected cumulative discounted reward with a discount factor \u03b3, Rt := \u2211\u221e t=1 \u03b3\nt\u22121Rt. The agent chooses actions according to a policy: a (stationary) policy is a function \u03c0 : S \u2192 P(A) from states to probability distributions over A. An optimal policy is one which maximizes expected cumulative reward. In fully observed environments, stationary optimal policies exist. In partially observed environments, the policy usually incorporates past agent observations from the history ht = a1o1r1, ..., at\u22121ot\u22121rt\u22121 (replacing st). A practical approach utilized here, is to parameterize policies using recurrent neural networks.\nV \u03c0(s) := E[ \u2211\u221e t=1 \u03b3\nt\u22121R(St, At, St+1)|S1 = s;At \u223c \u03c0(\u00b7|St)] is the value function and the actionvalue function isQ\u03c0(s, a) := ES\u2032\u223cT (\u00b7|s,a)[R(S, a, S\u2032)+\u03b3V (S\u2032)] (generally, we denote the successor state of s by s\u2032). The optimal value function is defined by V \u2217(s) = sup\u03c0 V\n\u03c0(s) and similarly Q\u2217(s, a) = sup\u03c0 Q\n\u03c0(s, a). For a given action-value function Q : S \u00d7 A \u2192 R we define the (deterministic) greedy policy w.r.t. Q by \u03c0(s) := arg maxa\u2208AQ(s, a) (ties broken arbitrarily). The greedy policy w.r.t. Q\u2217 is optimal (e.g. Szepesv\u00e1ri, 2010).\n2.2 Deep Q-Learning\nOne method for obtaining Q\u2217 is Q-learning which is based on the update Qi+1(st, at) = (1 \u2212 \u03b7t)Qi(st, at) + \u03b7t(rt + \u03b3maxaQi(st+1, a)), where \u03b7t \u2208 (0, 1) is the learning rate. We employ the \u03b5-greedy approach to action selection based on a value function, which means that with 1 \u2212 \u03b5 probability we pick arg maxaQi(s, a) and with probability \u03b5 a random action. Our study focuses on deep architectures for the value function similar to those used by Mnih et al. (2015), and our approach incorporates the key techniques of target networks and experience replay employed there, making the update into a stochastic gradient step. Since we consider partially observed environments our Q-functions are defined over agent observation histories, Q(ht, at), and we incorporate a recurrent network similarly to Hausknecht and Stone (2015). To speed up learning we add the dueling architecture of Wang et al. (2016) that represent Q using a value and an advantage function, including multi-step updates with a forward view eligibility trace (e.g. Harb and Precup, 2016) over a certain number of steps. When training agents the recurrent network is updated with truncated backpropagation through time (BPTT) for this amount of steps. Although we concentrate on DQN-based agent architectures, our techniques are also applicable to policy gradient methods such as A3C (Mnih et al., 2016)."}, {"heading": "2.3 Multi-Agent Reinforcement Learning", "text": "We consider problems where observations and actions are distributed across d agents, and are represented as d-dimensional tuples of primitive observations in O and actions in A. As is standard\nin MARL, the underlying environment is modeled as a Markov game where actions are chosen and executed simultaneously, and new observations are perceived simultaneously as a result of a transition to a new state (Littman, 1994, 2001; Hu and Wellman, 2003; Busoniu et al., 2008).\nAlthough agents have individual observations and are responsible for individual actions, each agent only receives the joint reward, and we seek to optimizeRt as defined above. This is consistent with the Dec-POMDP framework (Oliehoek et al., 2008; Oliehoek and Amato, 2016).\nIf we denote h\u0304 := (h1, h2, ..., hd) a tuple of agent histories, a joint policy is in general a map \u03c0 : Hd \u2192 P(Ad); we in particular consider policies where for any history h\u0304, the distribution \u03c0(h\u0304) has independent components in P(A). Hence, we write \u03c0 : Hd \u2192 P(A)d. The exception is when we use the most naive centralized agent with a combinatorial action space, aka joint action learners."}, {"heading": "3 A Deep-RL Architecture for Coop-MARL", "text": "Building on purely independent DQN-style agents (see Figure 1), we add enhancements to overcome the identified issues with the MARL problem. Our main contribution of value-decomposition is illustrated by the network in Figure 2.\nThe main assumption we make and exploit is that the joint action-value function for the system can be additively decomposed into value functions across agents,\nQ((h1, h2, ..., hd), (a1, a2, ..., ad)) \u2248 d\u2211 i=1 Q\u0303i(h i, ai)\nwhere the Q\u0303i depends only on each agent\u2019s local observations. We learn Q\u0303i by backpropagating gradients from the Q-learning rule using the joint reward through the summation, i.e. Q\u0303i is learned implicitly rather than from any reward specific to agent i, and we do not impose constraints that the Q\u0303i are action-value functions for any specific reward. The value decomposition layer can be seen in the top-layer of Figure 2. One property of this approach is that, although learning requires some centralization, the learned agents can be deployed independently, since each agent acting greedily with respect to its local value Q\u0303i is equivalent to a central arbiter choosing joint actions by maximizing the sum \u2211d i=1 Q\u0303i.\nFor illustration of the idea consider the case with 2 agents (for simplicity of exposition) and where rewards decompose additively across agent observations2, r(s,a) = r1(o1, a1) + r2(o2, a2), where (o1, a1) and (o2, a2) are (observations, actions) of agents 1 and 2 respectively. This could be the case in team games for instance, when agents observe their own goals, but not necessarily those of teammates. In this case we have that\nQ\u03c0(s,a) = E[ \u221e\u2211 t=1 \u03b3t\u22121r(st,at)|s1 = s,a1 = a;\u03c0]\n= E[ \u221e\u2211 t=1 \u03b3t\u22121r1(o 1 t , a 1 t )|s1 = s,a1 = a;\u03c0] + E[ \u221e\u2211 t=1 \u03b3t\u22121r2(o 2 t , a 2 t )|s1 = s,a1 = a;\u03c0]\n=: Q\u0304\u03c01 (s,a) + Q\u0304 \u03c0 2 (s,a) where Q\u0304\u03c0i (s,a) := E[ \u2211\u221e t=1 \u03b3 t\u22121r1(o i t, a i t)|s1 = s,a1 = a;\u03c0], i = 1, 2. The action-value function Q\u0304\u03c01 (s,a) \u2013 agent 1\u2019s expected future return \u2013 could be expected to depend more strongly on observations and actions (o1, a1) due to agent 1 than those due to agent 2. If (o1, a1) is not sufficient to fully model Q\u0304\u03c01 (s,a) then agent 1 may store additional information from historical observations in its LSTM, or receive information from agent 2 in a communication channel, in which case we could expect the following approximation to be valid\nQ\u03c0(s,a) =: Q\u0304\u03c01 (s,a) + Q\u0304 \u03c0 2 (s,a) \u2248 Q\u0303\u03c01 (h1, a1) + Q\u0303\u03c02 (h2, a2)\nOur architecture therefore encourages this decomposition into simpler functions, if possible. We see that natural decompositions of this type arise in practice (see Section 4.4).\nOne approach to reducing the number of learnable parameters, is to share certain network weights between agents. Weight sharing also gives rise to the concept of agent invariance, which is useful for avoiding the lazy agent problem. Definition 1 (Agent Invariance). If for any permutation (bijection) p : {1, ..., d} \u2192 {1, ..., d},\n\u03c0(p(h\u0304)) = p(\u03c0(h\u0304))\nwe say that \u03c0 is agent invariant.\nIt is not always desirable to have agent invariance, when for example specialized roles are required to optimize a particular system. In such cases we provide each agent with role information, or an identifier. The role information is provided to the agent as a 1-hot encoding of their identity concatenated with every observation at the first layer. When agents share all network weights they are then only conditionally agent invariant, i.e. have identical policies only when conditioned on the same role. We also consider information channels between agent networks, i.e. differentiable connections between agent network modules. These architectures, with shared weights, satisfy agent invariance."}, {"heading": "4 Experiments", "text": "We introduce a range of two-player domains, and experimentally evaluate the introduced valuedecomposition agents with different levels of enhancements, evaluating each addition in a logical sequence. We use two centralized agents as baselines, one of which is introduced here again relying on learned value-decomposition, as well as an individual agent learning directly from the joint reward signal. We perform this set of experiments on the same form of two dimensional maze environments used by Leibo et al. (2017), but with different tasks featuring more challenging coordination needs. Agents have a small 3\u00d7 5\u00d7 5 observation window, the first dimension being an RGB channel, the second and third are the maze dimensions, and each agent sees a box 2 squares either side and 4 squares forwards, see Figures 1 and 2. The simple graphics of our domains helps with running speed while, especially due to their multi-agent nature and severe partial observability and aliasing (very small observation window combined with map symmetries), they still pose a serious challenge and is comparable to the state-of-the-art in multi-agent reinforcement learning (Leibo et al., 2017), which exceeds what is common in this area (Tuyls and Weiss, 2012).\n2Or, more generally, across agent histories."}, {"heading": "4.1 Agents", "text": "Our agent\u2019s learning algorithm is based on DQN (Mnih et al., 2015) and includes its signature techniques of experience replay and target networks, enhanced with an LSTM value-network as in Hausknecht and Stone (2015) (to alleviate severe partial observability), learning with truncated back-propagation through time, multi-step updates with forward view eligibility traces (Harb and Precup, 2016) (which helps propagating learning back through longer sequences) and the dueling architecture (Wang et al., 2016) (which speeds up learning by generalizing across the action space). Since observations are from a local perspective, we do not benefit from convolutional networks, but use a fully connected linear layer to process the observations.\nOur network architectures first process the input using a fully connected linear layer with 32 hidden units followed by a ReLU layer, and then an LSTM, with 32 hidden units followed by a ReLU layer, and finally a linear dueling layer, with 32 units. This produces a value function V (s) and advantage function A(s, a), which are combined to compute a Q-function Q(s, a) = V (s) +A(s, a) as described in Wang et al. (2016). Layers of 32 units are sufficiently expressive for these tasks with limited observation windows.\nThe architectures (see Appendix B for detailed diagrams) differ between approaches by what is input into each layer. For architectures without centralization or information channels, one observation of size 3\u00d7 5\u00d7 5 is fed to the first linear layer of 32 units, followed by the ReLU layer and the LSTM (see Figure 1). For the other (information channels and centralized) agents, d such observations are fed separately to identical such linear layers and then concatenated into 64 dimensional vectors before passing though ReLUs to an LSTM.\nFor architectures with information channels we concatenate the outputs of certain layers with those of other agents. To preserve agent invariance, the agent\u2019s own previous output is always included first. For low-level communication, the signal\u2019s concatenation is after the first fully connected layer, while for high-level communication the concatenation takes place on the output of the LSTM layer. Note, that this has the implication that what starts as one agent\u2019s gradients are back-propagated through much of the other agents network, optimizing them to serve the purposes of all agents. Hence, representing in that sense, a higher degree of centralization than the lower-level sharing.\nWe have found a trajectory length of 8, determining both the length of the forward view and the length of the back propagation through time is sufficient for these domains. We use an eligibility trace parameter \u03bb = 0.9. In particular, the individual agents learning directly from the joint reward without decomposition or information channels, has worse performance with lower \u03bb. The Adam (Kingma and Ba, 2014) learning rate scheme initialized with 0.0001 is uniformly used, and further fine-tuning this per agent (not domain) does not dramatically change the total performance. The agents that we evaluate are listed in the table above."}, {"heading": "4.2 Environments", "text": "We use 2D grid worlds with the same basic functioning as Leibo et al. (2017), but with different tasks we call Switch, Fetch and Checkers. We have observations of byte values of size 3 \u00d7 5 \u00d7 5 (RGB), which represent a window depending on the player\u2019s position and orientation by extending 4 squares ahead and 2 squares on each side. Hence, agents are very short-sighted. The actions are: step forward, step backward, step left, step right, rotate left, rotate right, use beam and stand still. The\nbeam has no effect in our games, except for lighting up a row or column of squares straight ahead with yellow. Each player appears as a blue square in its own observation, and the other player, when in the observation window, is shown in red for Switch and Escape, and lighter blue for Fetch. We use three different maps shown in Figure 3 for both Fetch and Switch and a different one for Checkers, also shown in Figure 3 (bottom right). The tasks repeat as the agents succeed (either by full reset of the environment in Switch and Checkers or just by pickup being available again in Fetch), in training for 5,000 steps and 2,000 in testing.\nSwitch: The task tests if two agents can effectively coordinate their use of available routes on two maps with narrow corridors. The task is challenging because of strong observation aliasing. The two agents appear on different ends of a map, and must reach a goal at the other end. If agents collide in a corridor, then one agent needs to leave the corridor to allow the other to pass. When both players have reached their goal the environment is reset. A point is scored whenever a player reaches a goal.\nFetch: The task tests if two agents can synchronize their behaviour, when picking up objects and returning them to a drop point. In the Fetch task both players start on the same side of the map and have pickup points on the opposite side. A player scores 3 points for the team for pick-up, and another 5 points for dropping off the item at the drop point near the starting position. Then the pickup is available to either player again. It is optimal for the agents to cycle such that when one player reaches the pickup point the other returns to base, to be ready to pick up again.\nCheckers: The map contains apples and lemons. The first player is very sensitive and scores 10 for the team for an apple (green square) and \u221210 for a lemon (orange square). The second, less sensitive player scores 1 for the team for an apple and \u22121 for a lemon. There is a wall of lemons between the players and the apples. Apples and lemons disappear when collected, and the environment resets when all apples are eaten. It is important that the sensitive agent eats the apples while the less sensitive agent should leave them to its team mate but clear the way by eating obstructing lemons."}, {"heading": "4.3 Results", "text": "We compare the eight approaches listed in Table 1, on the seven tasks. Each is run ten times, with different random seeds determining spawn points in the environment, as well as initializations of the neural networks. We calculated curves of the average performance over 50,000 episodes (plots in Appendix A) for each approach on each task and we display the normalized area under the curve in Figure 4. Figure 5 displays the normalized final performance averaged over runs and the last 1,000 episodes. Average performance across tasks is also shown for both ways of evaluation.\nThe very clear conclusion is that architectures based on value-decomposition perform much better, with any combination of other techniques or none, than the centralized approach and individual learners. The centralized agent with value-decomposition is better than the combinatorially centralized as well as individual learners while worse than the more individual agents with value-decomposition.\nWe particularly see the benefit of shared weights on the hard task of Fetch with one corridor. Without sharing, the individual value-decomposition agent suffers from the lazy agent problem. The agent with weight sharing and role information also perfectly learns the one corridor Fetch task. It performs\nFigure 5: Heatmap showing each agent\u2019s final performance, averaged over the last 5,000 episodes of 50,000 and across ten runs, normalized by the best architecture per task. The agents are ordered according to average over the domains, which can be seen in the right most column. ValueDecomposition architecture strongly outperform Individual Learners and Centralization\nFigure 6: The learned Q-decomposition in Fetch. The plot shows the total Q-function (yellow), the value of agent 1 (green), the value of agent 2 (purple), rewards from agent 1 (blue) events and agent 2 (red). Highlighted is a situation in which agent 2\u2019s Q-function spikes (purple line), anticipating reward for an imminent drop-off. The other agent\u2019s Q-function (green) remains relatively flat.\nbetter than the agent just sharing weights on Switch, where coordination, in particular with one corridor, is easier with non-identical agents. Further, shared weights are problematic for the Checkers task because the magnitude of rewards (and hence the value function) from one agent is ten times higher than for the other agent.\nAdding information channels does increase learning complexity because the input comes from more than one agent. However, the checkers task, designed for the purpose, shows that it can be very useful. Overall, the low-level channels where the agent\u2019s LSTM processes the combined observations of both agents turned out to learn faster in our experiments than the more centralized high level communication (after the LSTM).\n4.4 The Learned Q-Decomposition\nFigure 6 shows the learned Q-decomposition for the value-decomposition network, using shared weights, in the game of Fetch. A video of the corresponding game can be seen at Video (2017). Spikes correspond to pick-up events (short spikes, 3 reward points), and return events (large spikes, 5 reward points). These are separated into events due to agent 1 (blue spikes) and agent 2 (red spikes). This disambiguation is for illustration purposes only: the environment gives a reward to the whole team for all of these events. The total Q-function is seen in yellow, clearly anticipating the team reward events, and dropping shortly afterwards. The component Q-functions Q\u03031 and Q\u03032 for agents 1 and 2 are shown in green and purple. These have generally disambiguated the Q-function into rewarding events separately attributable to either player. The system has learned to autonomously decompose the\njoint Q-function into sensible components which, when combined, result in an effective Q-function. This would be difficult for independent learners since many rewards would not be observed by both players, see e.g. the situation at 15-16 seconds in the corresponding video available at Video (2017)."}, {"heading": "5 Conclusions", "text": "We study cooperative multi-agent reinforcement learning where only a single joint reward is provided to the agents. We found that the two naive approaches, individual agents learning directly from team reward, and fully centralized agents, provide unsatisfactory solutions as previous literature has found in simpler environments, while our value-decomposition networks do not suffer from the same problems and shows much better performance across a range of more complex tasks. Further, the approach can be nicely combined with weight sharing and information channels, leading to agents that consistently optimally solve our new benchmark challenges.\nValue-decomposition networks are a step towards automatically decomposing complex learning problems into local, more readily learnable sub-problems. In future work we will investigate the scaling of value-decomposition with growing team sizes, which make individual learners with team reward even more confused (they mostly see rewards from other agents actions), and centralized learners even more impractical. We will also investigate decompositions based on non-linear value aggregation."}, {"heading": "Appendix A: Plots", "text": ""}, {"heading": "Appendix B: Diagrams", "text": ""}], "references": [{"title": "Analyzing and visualizing multiagent rewards in dynamic and stochastic environments", "author": ["A.K. Agogino", "K. Tumer"], "venue": "Journal of Autonomous Agents and Multi-Agent Systems,", "citeRegEx": "Agogino and Tumer.,? \\Q2008\\E", "shortCiteRegEx": "Agogino and Tumer.", "year": 2008}, {"title": "Social reward shaping in the prisoner\u2019s dilemma", "author": ["M. Babes", "E.M. de Cote", "M.L. Littman"], "venue": "In 7th International Joint Conference on Autonomous Agents and Multiagent Systems (AAMAS", "citeRegEx": "Babes et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Babes et al\\.", "year": 2008}, {"title": "The complexity of decentralized control of Markov Decision Processes", "author": ["D.S. Bernstein", "S. Zilberstein", "N. Immerman"], "venue": "Proceedings of the 16th Conference in Uncertainty in Artificial Intelligence,", "citeRegEx": "Bernstein et al\\.,? \\Q2000\\E", "shortCiteRegEx": "Bernstein et al\\.", "year": 2000}, {"title": "A comprehensive survey of multiagent reinforcement learning", "author": ["L. Busoniu", "R. Babuska", "B.D. Schutter"], "venue": "IEEE Transactions of Systems, Man, and Cybernetics Part C: Applications and Reviews,", "citeRegEx": "Busoniu et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Busoniu et al\\.", "year": 2008}, {"title": "The dynamics of reinforcement learning in cooperative multiagent systems", "author": ["C. Claus", "C. Boutilier"], "venue": "In Proceedings of the Fifteenth National Conference on Artificial Intelligence and Tenth Innovative Applications of Artificial Intelligence Conference,", "citeRegEx": "Claus and Boutilier.,? \\Q1998\\E", "shortCiteRegEx": "Claus and Boutilier.", "year": 1998}, {"title": "Local approximation of difference evaluation functions", "author": ["M. Colby", "T. Duchow-Pressley", "J.J. Chung", "K. Tumer"], "venue": "In Proceedings of the Fifteenth International Joint Conference on Autonomous Agents and Multiagent Systems,", "citeRegEx": "Colby et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Colby et al\\.", "year": 2016}, {"title": "Potential-based difference rewards for multiagent reinforcement learning", "author": ["S. Devlin", "L. Yliniemi", "D. Kudenko", "K. Tumer"], "venue": "In Proceedings of the Thirteenth International Joint Conference on Autonomous Agents and Multiagent Systems,", "citeRegEx": "Devlin et al\\.,? \\Q2014\\E", "shortCiteRegEx": "Devlin et al\\.", "year": 2014}, {"title": "Potential-based reward shaping for finite horizon online POMDP planning", "author": ["A. Eck", "L. Soh", "S. Devlin", "D. Kudenko"], "venue": "Autonomous Agents and Multi-Agent Systems,", "citeRegEx": "Eck et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Eck et al\\.", "year": 2016}, {"title": "Learning to communicate with deep multi-agent reinforcement learning", "author": ["J.N. Foerster", "Y.M. Assael", "N. de Freitas", "S. Whiteson"], "venue": "In Advances in Neural Information Processing Systems 29: Annual Conference on Neural Information Processing Systems", "citeRegEx": "Foerster et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Foerster et al\\.", "year": 2016}, {"title": "Coordinated reinforcement learning", "author": ["C. Guestrin", "M.G. Lagoudakis", "R. Parr"], "venue": "In Proceedings of the Nineteenth International Conference on Machine Learning,", "citeRegEx": "Guestrin et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Guestrin et al\\.", "year": 2002}, {"title": "Investigating recurrence and eligibility traces in deep Q-networks", "author": ["J. Harb", "D. Precup"], "venue": "In Deep Reinforcement Learning Workshop,", "citeRegEx": "Harb and Precup.,? \\Q2016\\E", "shortCiteRegEx": "Harb and Precup.", "year": 2016}, {"title": "Cooperation and Communication in Multiagent Deep Reinforcement Learning", "author": ["M.J. Hausknecht"], "venue": "PhD thesis, The University of Texas", "citeRegEx": "Hausknecht.,? \\Q2016\\E", "shortCiteRegEx": "Hausknecht.", "year": 2016}, {"title": "Deep recurrent Q-learning for partially observable MDPs", "author": ["M.J. Hausknecht", "P. Stone"], "venue": "CoRR, abs/1507.06527,", "citeRegEx": "Hausknecht and Stone.,? \\Q2015\\E", "shortCiteRegEx": "Hausknecht and Stone.", "year": 2015}, {"title": "Combining reward shaping and hierarchies for scaling to large multiagent systems", "author": ["C. HolmesParker", "A. Agogino", "K. Tumer"], "venue": "Knowledge Engineering Review,", "citeRegEx": "HolmesParker et al\\.,? \\Q2016\\E", "shortCiteRegEx": "HolmesParker et al\\.", "year": 2016}, {"title": "Nash q-learning for general-sum stochastic games", "author": ["J. Hu", "M.P. Wellman"], "venue": "Journal of Machine Learning Research,", "citeRegEx": "Hu and Wellman.,? \\Q2003\\E", "shortCiteRegEx": "Hu and Wellman.", "year": 2003}, {"title": "Adam: A method for stochastic optimization", "author": ["D.P. Kingma", "J. Ba"], "venue": "CoRR, abs/1412.6980,", "citeRegEx": "Kingma and Ba.,? \\Q2014\\E", "shortCiteRegEx": "Kingma and Ba.", "year": 2014}, {"title": "Multiagent reinforcement learning for urban traffic control using coordination graphs. In Machine Learning and Knowledge Discovery in Databases", "author": ["L. Kuyer", "S. Whiteson", "B. Bakker", "N.A. Vlassis"], "venue": "European Conference,", "citeRegEx": "Kuyer et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Kuyer et al\\.", "year": 2008}, {"title": "The world of independent learners is not Markovian", "author": ["G.J. Laurent", "L. Matignon", "N.L. Fort-Piat"], "venue": "Int. J. Know.-Based Intell. Eng. Syst.,", "citeRegEx": "Laurent et al\\.,? \\Q2011\\E", "shortCiteRegEx": "Laurent et al\\.", "year": 2011}, {"title": "Multi-agent Reinforcement Learning in Sequential Social Dilemmas", "author": ["J.Z. Leibo", "V. Zambaldi", "M. Lanctot", "J. Marecki", "T. Graepel"], "venue": "In Proceedings of the 16th International Conference on Autonomous Agents and Multiagent Systems (AAMAS", "citeRegEx": "Leibo et al\\.,? \\Q2017\\E", "shortCiteRegEx": "Leibo et al\\.", "year": 2017}, {"title": "Markov games as a framework for multi-agent reinforcement learning", "author": ["M.L. Littman"], "venue": "In Machine Learning, Proceedings of the Eleventh International Conference,", "citeRegEx": "Littman.,? \\Q1994\\E", "shortCiteRegEx": "Littman.", "year": 1994}, {"title": "Friend-or-foe q-learning in general-sum games", "author": ["M.L. Littman"], "venue": "In Proceedings of the Eighteenth International Conference on Machine Learning (ICML", "citeRegEx": "Littman.,? \\Q2001\\E", "shortCiteRegEx": "Littman.", "year": 2001}, {"title": "Human-level control through deep reinforcement learning", "author": ["V. Mnih", "K. Kavukcuoglu", "D. Silver", "A. Rusu", "J. Veness", "M. Bellemare", "A. Graves", "M. Riedmiller", "A. Fidjeland", "G. Ostrovski", "S. Petersen", "C. Beattie", "A. Sadik", "I. Antonoglou", "H. King", "D. Kumaran", "D. Wierstra", "S. Legg", "D. Hassabis"], "venue": "Nature, 518(7540):529\u2013533,", "citeRegEx": "Mnih et al\\.,? \\Q2015\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2015}, {"title": "Asynchronous methods for deep reinforcement learning", "author": ["V. Mnih", "A.P. Badia", "M. Mirza", "A. Graves", "T.P. Lillicrap", "T. Harley", "D. Silver", "K. Kavukcuoglu"], "venue": "In Proceedings of the 33nd International Conference on Machine Learning,", "citeRegEx": "Mnih et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Mnih et al\\.", "year": 2016}, {"title": "Policy invariance under reward transformations: Theory and application to reward shaping", "author": ["A.Y. Ng", "D. Harada", "S.J. Russell"], "venue": "In Proceedings of the Sixteenth International Conference on Machine Learning (ICML", "citeRegEx": "Ng et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Ng et al\\.", "year": 1999}, {"title": "A Concise Introduction to Decentralized POMDPs", "author": ["F.A. Oliehoek", "C. Amato"], "venue": "SpringerBriefs in Intelligent Systems", "citeRegEx": "Oliehoek and Amato.,? \\Q2016\\E", "shortCiteRegEx": "Oliehoek and Amato.", "year": 2016}, {"title": "Optimal and approximate q-value functions for decentralized pomdps", "author": ["F.A. Oliehoek", "M.T.J. Spaan", "N.A. Vlassis"], "venue": "J. Artif. Intell. Res. (JAIR),", "citeRegEx": "Oliehoek et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Oliehoek et al\\.", "year": 2008}, {"title": "Cooperative multi-agent learning: The state of the art", "author": ["L. Panait", "S. Luke"], "venue": "Autonomous Agents and Multi-Agent Systems,", "citeRegEx": "Panait and Luke.,? \\Q2005\\E", "shortCiteRegEx": "Panait and Luke.", "year": 2005}, {"title": "Modeling difference rewards for multiagent learning (extended abstract)", "author": ["S. Proper", "K. Tumer"], "venue": "In Proceedings of the Eleventh International Joint Conference on Autonomous Agents and Multiagent Systems,", "citeRegEx": "Proper and Tumer.,? \\Q2012\\E", "shortCiteRegEx": "Proper and Tumer.", "year": 2012}, {"title": "Markov Decision Processes: Discrete Stochastic Dynamic Programming", "author": ["M. Puterman"], "venue": null, "citeRegEx": "Puterman.,? \\Q1994\\E", "shortCiteRegEx": "Puterman.", "year": 1994}, {"title": "Artificial Intelligence: A Modern Approach", "author": ["S.J. Russell", "P. Norvig"], "venue": null, "citeRegEx": "Russell and Norvig.,? \\Q2010\\E", "shortCiteRegEx": "Russell and Norvig.", "year": 2010}, {"title": "Q-decomposition for reinforcement learning agents", "author": ["S.J. Russell", "A. Zimdars"], "venue": "In Machine Learning, Proceedings of the Twentieth International Conference (ICML", "citeRegEx": "Russell and Zimdars.,? \\Q2003\\E", "shortCiteRegEx": "Russell and Zimdars.", "year": 2003}, {"title": "Distributed value functions", "author": ["J.G. Schneider", "W. Wong", "A.W. Moore", "M.A. Riedmiller"], "venue": "In Proceedings of the Sixteenth International Conference on Machine Learning (ICML", "citeRegEx": "Schneider et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Schneider et al\\.", "year": 1999}, {"title": "Learning multiagent communication with backpropagation", "author": ["S. Sukhbaatar", "A. Szlam", "R. Fergus"], "venue": "CoRR, abs/1605.07736,", "citeRegEx": "Sukhbaatar et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Sukhbaatar et al\\.", "year": 2016}, {"title": "Reinforcement Learning", "author": ["R. Sutton", "A. Barto"], "venue": null, "citeRegEx": "Sutton and Barto.,? \\Q1998\\E", "shortCiteRegEx": "Sutton and Barto.", "year": 1998}, {"title": "Algorithms for Reinforcement Learning", "author": ["C. Szepesv\u00e1ri"], "venue": "Synthesis Lectures on Artificial Intelligence and Machine Learning. Morgan & Claypool Publishers,", "citeRegEx": "Szepesv\u00e1ri.,? \\Q2010\\E", "shortCiteRegEx": "Szepesv\u00e1ri.", "year": 2010}, {"title": "A survey of collectives", "author": ["K. Tumer", "D. Wolpert"], "venue": "Collectives and the Design of Complex Systems,", "citeRegEx": "Tumer and Wolpert.,? \\Q2004\\E", "shortCiteRegEx": "Tumer and Wolpert.", "year": 2004}, {"title": "Multiagent learning: Basics, challenges, and prospects", "author": ["K. Tuyls", "G. Weiss"], "venue": "AI Magazine,", "citeRegEx": "Tuyls and Weiss.,? \\Q2012\\E", "shortCiteRegEx": "Tuyls and Weiss.", "year": 2012}, {"title": "Coordinated deep reinforcement learners for traffic light control", "author": ["E. van der Pol", "F.A. Oliehoek"], "venue": "NIPS Workshop on Learning, Inference and Control of Multi-Agent Systems,", "citeRegEx": "Pol and Oliehoek.,? \\Q2016\\E", "shortCiteRegEx": "Pol and Oliehoek.", "year": 2016}, {"title": "Dueling network architectures for deep reinforcement learning", "author": ["Z. Wang", "T. Schaul", "M. Hessel", "H. van Hasselt", "M. Lanctot", "N. de Freitas"], "venue": "In Proceedings of the International Conference on Machine Learning (ICML),", "citeRegEx": "Wang et al\\.,? \\Q2016\\E", "shortCiteRegEx": "Wang et al\\.", "year": 2016}], "referenceMentions": [{"referenceID": 26, "context": "We consider the cooperative multi-agent reinforcement learning (MARL) problem (Panait and Luke, 2005; Busoniu et al., 2008; Tuyls and Weiss, 2012), in which a system of several learning agents must jointly optimize a single reward signal \u2013 the team reward \u2013 accumulated over time.", "startOffset": 78, "endOffset": 146}, {"referenceID": 3, "context": "We consider the cooperative multi-agent reinforcement learning (MARL) problem (Panait and Luke, 2005; Busoniu et al., 2008; Tuyls and Weiss, 2012), in which a system of several learning agents must jointly optimize a single reward signal \u2013 the team reward \u2013 accumulated over time.", "startOffset": 78, "endOffset": 146}, {"referenceID": 36, "context": "We consider the cooperative multi-agent reinforcement learning (MARL) problem (Panait and Luke, 2005; Busoniu et al., 2008; Tuyls and Weiss, 2012), in which a system of several learning agents must jointly optimize a single reward signal \u2013 the team reward \u2013 accumulated over time.", "startOffset": 78, "endOffset": 146}, {"referenceID": 17, "context": "In general each agent is then faced with a non-stationary learning problem because the dynamics of its environment effectively changes as teammates change their behaviours through learning (Laurent et al., 2011).", "startOffset": 189, "endOffset": 211}, {"referenceID": 2, "context": "Because of this inability to explain its own observed rewards naive independent RL is often unsuccessful: for example Claus and Boutilier (1998) show that independent Q-learners cannot distinguish teammates\u2019 exploration from stochasticity in the environment, and fail to solve even an apparently trivial, 2-agent, stateless, 3 \u00d7 3-action problem and the general Dec-POMDP problem is known to be intractable (Bernstein et al., 2000; Oliehoek and Amato, 2016).", "startOffset": 407, "endOffset": 457}, {"referenceID": 24, "context": "Because of this inability to explain its own observed rewards naive independent RL is often unsuccessful: for example Claus and Boutilier (1998) show that independent Q-learners cannot distinguish teammates\u2019 exploration from stochasticity in the environment, and fail to solve even an apparently trivial, 2-agent, stateless, 3 \u00d7 3-action problem and the general Dec-POMDP problem is known to be intractable (Bernstein et al., 2000; Oliehoek and Amato, 2016).", "startOffset": 407, "endOffset": 457}, {"referenceID": 23, "context": "the true objective (Ng et al., 1999; Devlin et al., 2014; Eck et al., 2016).", "startOffset": 19, "endOffset": 75}, {"referenceID": 6, "context": "the true objective (Ng et al., 1999; Devlin et al., 2014; Eck et al., 2016).", "startOffset": 19, "endOffset": 75}, {"referenceID": 7, "context": "the true objective (Ng et al., 1999; Devlin et al., 2014; Eck et al., 2016).", "startOffset": 19, "endOffset": 75}, {"referenceID": 11, "context": "Further, in the context of the introduced agent, we evaluate weight sharing, role information and information channels as additional enhancements that have recently been reported to improve sample complexity and memory requirements (Hausknecht, 2016; Foerster et al., 2016; Sukhbaatar et al., 2016).", "startOffset": 232, "endOffset": 298}, {"referenceID": 8, "context": "Further, in the context of the introduced agent, we evaluate weight sharing, role information and information channels as additional enhancements that have recently been reported to improve sample complexity and memory requirements (Hausknecht, 2016; Foerster et al., 2016; Sukhbaatar et al., 2016).", "startOffset": 232, "endOffset": 298}, {"referenceID": 32, "context": "Further, in the context of the introduced agent, we evaluate weight sharing, role information and information channels as additional enhancements that have recently been reported to improve sample complexity and memory requirements (Hausknecht, 2016; Foerster et al., 2016; Sukhbaatar et al., 2016).", "startOffset": 232, "endOffset": 298}, {"referenceID": 3, "context": "Because of this inability to explain its own observed rewards naive independent RL is often unsuccessful: for example Claus and Boutilier (1998) show that independent Q-learners cannot distinguish teammates\u2019 exploration from stochasticity in the environment, and fail to solve even an apparently trivial, 2-agent, stateless, 3 \u00d7 3-action problem and the general Dec-POMDP problem is known to be intractable (Bernstein et al.", "startOffset": 118, "endOffset": 145}, {"referenceID": 2, "context": "Because of this inability to explain its own observed rewards naive independent RL is often unsuccessful: for example Claus and Boutilier (1998) show that independent Q-learners cannot distinguish teammates\u2019 exploration from stochasticity in the environment, and fail to solve even an apparently trivial, 2-agent, stateless, 3 \u00d7 3-action problem and the general Dec-POMDP problem is known to be intractable (Bernstein et al., 2000; Oliehoek and Amato, 2016). Though we here focus on 2 player coordination, we note that the problems with individual learners and centralized approaches just gets worse with more agents since then, most rewards do not relate to the individual agent and the action space grows exponentially for the fully centralized approach. One approach to improving the performance of independent learners is to design individual reward functions, more directly related to individual agent observations. However, even in the single-agent case, reward shaping is difficult and only a small class of shaped reward functions are guaranteed to preserve optimality w.r.t. the true objective (Ng et al., 1999; Devlin et al., 2014; Eck et al., 2016). In this paper we aim for more general autonomous solutions, in which the decomposition of the team value function is learned. We introduce a novel learned additive value-decomposition approach over individual agents. Implicitly, the value decomposition network aims to learn an optimal linear value decomposition from the team reward signal, by back-propagating the total Q gradient through deep neural networks representing the individual component value functions. This additive value decomposition is specifically motivated by avoiding the spurious reward signals that emerge in purely independent learners.The implicit value function learned by each agent depends only on local observations, and so is more easily learned. Our solution also ameliorates the coordination problem of independent learning highlighted in Claus and Boutilier (1998) because it effectively learns in a centralised fashion at training time, while agents can be deployed individually.", "startOffset": 408, "endOffset": 2009}, {"referenceID": 9, "context": "Our approach works with only a team reward, and learns the value-decomposition autonomously from experience, and it similarly differs from the approach with coordination graphs (Guestrin et al., 2002) and the max-plus algorithm (Kuyer et al.", "startOffset": 177, "endOffset": 200}, {"referenceID": 16, "context": ", 2002) and the max-plus algorithm (Kuyer et al., 2008; van der Pol and Oliehoek, 2016).", "startOffset": 35, "endOffset": 87}, {"referenceID": 35, "context": "Other work addressing team rewards in cooperative settings is based on difference rewards (Tumer and Wolpert, 2004), measuring the impact of an agent\u2019s action on the full system reward.", "startOffset": 90, "endOffset": 115}, {"referenceID": 28, "context": "Russell and Zimdars (2003) sums the Q-functions of independent learning agents with individual rewards, before making the global action selection greedily to optimize for total reward.", "startOffset": 0, "endOffset": 27}, {"referenceID": 11, "context": "When the worse player takes a shot the outcome is on average much worse, and the weaker player learns to avoid taking shots (Hausknecht, 2016).", "startOffset": 124, "endOffset": 142}, {"referenceID": 5, "context": "high learnability), but can be impractical as it requires knowledge about the system state (Colby et al., 2016; Agogino and Tumer, 2008; Proper and Tumer, 2012).", "startOffset": 91, "endOffset": 160}, {"referenceID": 0, "context": "high learnability), but can be impractical as it requires knowledge about the system state (Colby et al., 2016; Agogino and Tumer, 2008; Proper and Tumer, 2012).", "startOffset": 91, "endOffset": 160}, {"referenceID": 27, "context": "high learnability), but can be impractical as it requires knowledge about the system state (Colby et al., 2016; Agogino and Tumer, 2008; Proper and Tumer, 2012).", "startOffset": 91, "endOffset": 160}, {"referenceID": 0, "context": ", 2016; Agogino and Tumer, 2008; Proper and Tumer, 2012). Other approaches can be found in Devlin et al. (2014); HolmesParker et al.", "startOffset": 8, "endOffset": 112}, {"referenceID": 0, "context": ", 2016; Agogino and Tumer, 2008; Proper and Tumer, 2012). Other approaches can be found in Devlin et al. (2014); HolmesParker et al. (2016); Babes et al.", "startOffset": 8, "endOffset": 140}, {"referenceID": 0, "context": ", 2016; Agogino and Tumer, 2008; Proper and Tumer, 2012). Other approaches can be found in Devlin et al. (2014); HolmesParker et al. (2016); Babes et al. (2008).", "startOffset": 8, "endOffset": 161}, {"referenceID": 33, "context": "We recall some key concepts of the RL setting (Sutton and Barto, 1998), an agent-environment framework (Russell and Norvig, 2010) in which an agent sequentially interacts with the environment over a sequence of timesteps, t = 1, 2, 3, .", "startOffset": 46, "endOffset": 70}, {"referenceID": 29, "context": "We recall some key concepts of the RL setting (Sutton and Barto, 1998), an agent-environment framework (Russell and Norvig, 2010) in which an agent sequentially interacts with the environment over a sequence of timesteps, t = 1, 2, 3, .", "startOffset": 103, "endOffset": 129}, {"referenceID": 22, "context": "Although we concentrate on DQN-based agent architectures, our techniques are also applicable to policy gradient methods such as A3C (Mnih et al., 2016).", "startOffset": 132, "endOffset": 151}, {"referenceID": 18, "context": "Our study focuses on deep architectures for the value function similar to those used by Mnih et al. (2015), and our approach incorporates the key techniques of target networks and experience replay employed there, making the update into a stochastic gradient step.", "startOffset": 88, "endOffset": 107}, {"referenceID": 10, "context": "Since we consider partially observed environments our Q-functions are defined over agent observation histories, Q(ht, at), and we incorporate a recurrent network similarly to Hausknecht and Stone (2015). To speed up learning we add the dueling architecture of Wang et al.", "startOffset": 175, "endOffset": 203}, {"referenceID": 10, "context": "Since we consider partially observed environments our Q-functions are defined over agent observation histories, Q(ht, at), and we incorporate a recurrent network similarly to Hausknecht and Stone (2015). To speed up learning we add the dueling architecture of Wang et al. (2016) that represent Q using a value and an advantage function, including multi-step updates with a forward view eligibility trace (e.", "startOffset": 175, "endOffset": 279}, {"referenceID": 14, "context": "in MARL, the underlying environment is modeled as a Markov game where actions are chosen and executed simultaneously, and new observations are perceived simultaneously as a result of a transition to a new state (Littman, 1994, 2001; Hu and Wellman, 2003; Busoniu et al., 2008).", "startOffset": 211, "endOffset": 276}, {"referenceID": 3, "context": "in MARL, the underlying environment is modeled as a Markov game where actions are chosen and executed simultaneously, and new observations are perceived simultaneously as a result of a transition to a new state (Littman, 1994, 2001; Hu and Wellman, 2003; Busoniu et al., 2008).", "startOffset": 211, "endOffset": 276}, {"referenceID": 25, "context": "This is consistent with the Dec-POMDP framework (Oliehoek et al., 2008; Oliehoek and Amato, 2016).", "startOffset": 48, "endOffset": 97}, {"referenceID": 24, "context": "This is consistent with the Dec-POMDP framework (Oliehoek et al., 2008; Oliehoek and Amato, 2016).", "startOffset": 48, "endOffset": 97}, {"referenceID": 18, "context": "The simple graphics of our domains helps with running speed while, especially due to their multi-agent nature and severe partial observability and aliasing (very small observation window combined with map symmetries), they still pose a serious challenge and is comparable to the state-of-the-art in multi-agent reinforcement learning (Leibo et al., 2017), which exceeds what is common in this area (Tuyls and Weiss, 2012).", "startOffset": 334, "endOffset": 354}, {"referenceID": 36, "context": ", 2017), which exceeds what is common in this area (Tuyls and Weiss, 2012).", "startOffset": 51, "endOffset": 74}, {"referenceID": 18, "context": "We perform this set of experiments on the same form of two dimensional maze environments used by Leibo et al. (2017), but with different tasks featuring more challenging coordination needs.", "startOffset": 97, "endOffset": 117}, {"referenceID": 21, "context": "Our agent\u2019s learning algorithm is based on DQN (Mnih et al., 2015) and includes its signature techniques of experience replay and target networks, enhanced with an LSTM value-network as in Hausknecht and Stone (2015) (to alleviate severe partial observability), learning with truncated back-propagation through time, multi-step updates with forward view eligibility traces (Harb and Precup, 2016) (which helps propagating learning back through longer sequences) and the dueling architecture (Wang et al.", "startOffset": 47, "endOffset": 66}, {"referenceID": 10, "context": ", 2015) and includes its signature techniques of experience replay and target networks, enhanced with an LSTM value-network as in Hausknecht and Stone (2015) (to alleviate severe partial observability), learning with truncated back-propagation through time, multi-step updates with forward view eligibility traces (Harb and Precup, 2016) (which helps propagating learning back through longer sequences) and the dueling architecture (Wang et al.", "startOffset": 314, "endOffset": 337}, {"referenceID": 38, "context": ", 2015) and includes its signature techniques of experience replay and target networks, enhanced with an LSTM value-network as in Hausknecht and Stone (2015) (to alleviate severe partial observability), learning with truncated back-propagation through time, multi-step updates with forward view eligibility traces (Harb and Precup, 2016) (which helps propagating learning back through longer sequences) and the dueling architecture (Wang et al., 2016) (which speeds up learning by generalizing across the action space).", "startOffset": 432, "endOffset": 451}, {"referenceID": 15, "context": "The Adam (Kingma and Ba, 2014) learning rate scheme initialized with 0.", "startOffset": 9, "endOffset": 30}, {"referenceID": 10, "context": ", 2015) and includes its signature techniques of experience replay and target networks, enhanced with an LSTM value-network as in Hausknecht and Stone (2015) (to alleviate severe partial observability), learning with truncated back-propagation through time, multi-step updates with forward view eligibility traces (Harb and Precup, 2016) (which helps propagating learning back through longer sequences) and the dueling architecture (Wang et al.", "startOffset": 130, "endOffset": 158}, {"referenceID": 10, "context": ", 2015) and includes its signature techniques of experience replay and target networks, enhanced with an LSTM value-network as in Hausknecht and Stone (2015) (to alleviate severe partial observability), learning with truncated back-propagation through time, multi-step updates with forward view eligibility traces (Harb and Precup, 2016) (which helps propagating learning back through longer sequences) and the dueling architecture (Wang et al., 2016) (which speeds up learning by generalizing across the action space). Since observations are from a local perspective, we do not benefit from convolutional networks, but use a fully connected linear layer to process the observations. Our network architectures first process the input using a fully connected linear layer with 32 hidden units followed by a ReLU layer, and then an LSTM, with 32 hidden units followed by a ReLU layer, and finally a linear dueling layer, with 32 units. This produces a value function V (s) and advantage function A(s, a), which are combined to compute a Q-function Q(s, a) = V (s) +A(s, a) as described in Wang et al. (2016). Layers of 32 units are sufficiently expressive for these tasks with limited observation windows.", "startOffset": 315, "endOffset": 1106}, {"referenceID": 18, "context": "We use 2D grid worlds with the same basic functioning as Leibo et al. (2017), but with different tasks we call Switch, Fetch and Checkers.", "startOffset": 57, "endOffset": 77}], "year": 2017, "abstractText": "We study the problem of cooperative multi-agent reinforcement learning with a single joint reward signal. This class of learning problems is difficult because of the often large combined action and observation spaces. In the fully centralized and decentralized approaches, we find the problem of spurious rewards and a phenomenon we call the \u201clazy agent\u201d problem, which arises due to partial observability. We address these problems by training individual agents with a novel value decomposition network architecture, which learns to decompose the team value function into agent-wise value functions. We perform an experimental evaluation across a range of partially-observable multi-agent domains and show that learning such value-decompositions leads to superior results, in particular when combined with weight sharing, role information and information channels.", "creator": "LaTeX with hyperref package"}}}