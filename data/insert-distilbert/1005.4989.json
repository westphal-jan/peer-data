{"id": "1005.4989", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-May-2010", "title": "A Formalization of the Turing Test", "abstract": "the paper offers a mathematical formalization of starting the turing test. this formalization makes it possible to establish the conditions under which some turing machine will pass the turing test and ignore the conditions under which every turing arithmetic machine ( or every additive turing machine of the special class ) themselves will fail the turing test.", "histories": [["v1", "Thu, 27 May 2010 05:59:56 GMT  (553kb,X)", "http://arxiv.org/abs/1005.4989v1", "10 pages"]], "COMMENTS": "10 pages", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["evgeny chutchev"], "accepted": false, "id": "1005.4989"}, "pdf": {"name": "1005.4989.pdf", "metadata": {"source": "CRF", "title": "A Formalization of the Turing Test", "authors": ["Evgeny Chutchev"], "emails": [], "sections": [{"heading": null, "text": "A Formalization of the Turing Test\nEvgeny Chutchev\n1. Introduction\nThe Turing test was described by A. Turing in his paper [4] as follows: An interrogator questions both Turing machine and second participant of the test (a person), each of which tries to appear human. The interrogator does not know from whom exactly he receives answers and has the objective to tell the Turing machine from the person (for more details, see, for example, [3]). In this paper, we consider a formalization of the Turing test and obtain the following results (Figure 1.1):\nThe rest of the paper is organized as follows: Section 2 gives definitions and introduces notations. Section 3 considers tests with arbitrary Turing machines. Section 4 considers tests with Turing machines of some special classes. Section 5 considers the strict Turing test. Section 6 presents the conclusion. Section 7 contains a list of definitions and notations. Section 8 contains references. Section 9 is an appendix, where we consider a random answers model for the second\nparticipant of the test that does not follow an algorithm.\n2. General definitions and notations\n2.1. Words and numbers 1. Suppose \ud835\udd38 is a finite alphabet and symbol \u03b8 does not belong to \ud835\udd38. By \ud835\udd38\u2217 denote all words over \ud835\udd38, including the empty word \u03bb. By \u03bb\ud835\udc5b denote the sequence of \ud835\udc5b empty words \u03bb. 2. Denote by \u2115 the set of all natural numbers (excluding zero), and put \u21150 \u225d \u2115\u222a {0}. We will not make any distinction between the elements of \u21150 and their notations over the alphabet \ud835\udd38, assuming \u21150 = \ud835\udd38\n\u2217\\*\u03bb+. 3. Fix some letter \ud835\udc4e \u2208 \ud835\udd38, and for each word \u03c9 \u2208 \ud835\udd38\u2217 denote by \u03c9 the word \ud835\udc4e\u03c9.\n2\n4. Put \ud835\udd39 \u225d \ud835\udd38 \u222a {}.\n2.2. Turing machines 1. We assume that:\n Turing machine (TM) starts on the work tape that contains a finite string of symbols, which may be blank.\n TM has several final states; some of them may be marked with \u201cLeft\u201d or \u201cRight\u201d.  Along with conventional work head, TM has three additional heads and three tapes\neach of which has a leftmost cell but is infinite to the right. We name these additional heads as the oracle interface, the input and the output of TM,\nconsidering that the oracle interface and the input can only read out symbols from \ud835\udd39, and the output can only print symbols from \ud835\udd39, while \u03b8 stands for the blank symbol. The tape of the oracle interface is blank (we shall use it for oracle TM; see Item 2.4.1 below), and both input and output tapes are replaced with new tapes when TM starts up or when TM is transferred to the initial state.\n2. Denote by \ud835\udd44 the set of all TMs that we have described. We shall not distinguish between TMs and their descriptions (in the form of the words over \ud835\udd38) suitable for realization on the universal TM.\n3. Let us consider the functioning of TM as an exchange of questions and answers. A question is sent to TM only when it is in the initial state or in the final state (in the latter case, TM is moved to the initial state, but the content of the work tape does not change). The question is a word over \ud835\udd39 recorded at the beginning of the new input tape. After installation of the input tape, TM starts up, and if TM halts, the maximum length word over \ud835\udd38, placed at the beginning of the output tape, is the answer to the question (thus the answer may be equal to \u03bb).\n4. We say that:  TM \ud835\udd10 answers the questions 1,\u2026 ,\ud835\udc5b if \ud835\udd10 calculates those answers in a finite number\nof cycles. In the specified case denote by \ud835\udd10 1,\u2026 ,\ud835\udc5b the answer of \ud835\udd10 to the last question \ud835\udc5b ; denote the reverse case by the formal equation \ud835\udd10 1,\u2026 ,\ud835\udc5b = \u221e 1.  TM \ud835\udd10 recognizes TM \ud835\udd11 if \ud835\udd10 answers the question \ud835\udd11.  TM \ud835\udd10 is communicable if \ud835\udd10 answers any sequence of questions, each of which belongs\nto \ud835\udd38\u2217.  TM \ud835\udd10 is autonomous if the answers of \ud835\udd10 do not depend on the content of the\nquestions.  TM \ud835\udd10 is the generator if \ud835\udd10 is simultaneously communicable and autonomous.\nDenote by \u2102 the set of all communicable TMs. For generator \u210c and \ud835\udc5b \u2208 \u2115 put \u210c,\ud835\udc5b- \u225d \u210c 1,\u2026 , \ud835\udc5b , where 1,\u2026 ,\ud835\udc5b are some questions.\n5. Assign to each TM \ud835\udd10 the generator \ud835\udd10 that operates under the following principle: For\neach \ud835\udc5b \u2208 \u2115, put \ud835\udd10,\ud835\udc5b- \u225d , if \ud835\udd10(\ud835\udc5b) = \u221e,\n\ud835\udd10(\ud835\udc5b) in another case.\n6. We call TM \u2130 the enumerator if \u2200\ud835\udc5b\u2208\u2115(\u2130(\ud835\udc5b) \u2208 \ud835\udd44).\n7. For every enumerator \u2130, put \u2130*\ud835\udc41+ \u225d {\u2130(\ud835\udc5b): \ud835\udc5b = 1,\u2026 ,\ud835\udc41}. Fix the enumerator \ud835\udc9c that enumerates all TMs: \ud835\udc9c*\u221e+ = \ud835\udd44. Put \ud835\udd04\ud835\udc58 \u225d \ud835\udc9c(\ud835\udc58).\n8. Assign to every enumerator \u2130 that enumerates some communicable TMs (\u2130*\u221e+ \u2286 \u2102) the\ngenerator \u2130 that is constructed by analogy with Cantor's diagonal method: \u2130,\ud835\udc5b- \u225d \u2130(\ud835\udc5b)(\ud835\udc5b).\n1 Assuming \u221e \u2209 \ud835\udd38.\n3\n2.3. Oracles 1. Denote by oracle the content of the oracle interface tape, the cells on which contain symbols from \ud835\udd39. 2. Denote by \ud835\udef1 the oracle that contains the lexicographic ordered notations \ud835\udd10\ud835\udd11 for all TMs \ud835\udd10 and \ud835\udd11 such that \ud835\udd10 recognizes \ud835\udd11. 3. Denote by \ud835\udee9 the blank oracle.\n2.4. Oracle Turing machines 1. We shall understand the construction from Item 2.2.1, where the oracle interface tape may be non-blank, as oracle Turing machine (OTM). Denote OTM by \ud835\udd10\ud835\udef7 , where \ud835\udd10 is TM and \ud835\udef7 is oracle (thus \ud835\udd10\ud835\udee9 = \ud835\udd10).\n2. Extending the concepts from Items 2.2.3 and 2.2.4 to OTMs, we call OTMs \ud835\udc48 and \ud835\udc49 as \ud835\udc41-similar if for every \ud835\udc5b \u2264 \ud835\udc41 and for any questions \u03b2 = 1,\u2026 ,\ud835\udc5b the equality \ud835\udc48() = \ud835\udc49() holds. Two OTMs \ud835\udc48 and \ud835\udc49, which are \ud835\udc41-similar for every \ud835\udc41 \u2208 \u2115, we call similar and denote this by \ud835\udc48 \u2248 \ud835\udc49. 3. We say that OTM \ud835\udc44 reduces to TM \ud835\udd10 if \ud835\udc44 \u2248 \ud835\udd10. Denote the type of OTM by notation \u227b\ud835\udd44 if OTM reduces to some TM and in another case use the notation \u2281\ud835\udd44.\n2.5. Testers 1. Any pair \ud835\udc3c,\ud835\udc44 , where \ud835\udc3c and \ud835\udc44 are OTMs, we call the tester. For the specified tester we call \ud835\udc3c the interrogator, and \ud835\udc44 the second participant (SP). 2. Denote the tester type by notation (type of interrogator, type of SP). 3. We say that interrogator is dumb if its answer to any consequence of questions is .\n2.6. Tests 1. Consider tester \ud835\udc47 = \ud835\udc3c,\ud835\udc44 and TM \ud835\udd10 and define the following procedure as the left (the right) test:  At the beginning of the test, the question  enters the interrogator \ud835\udc3c input.  Each answer of interrogator serves as the question for both \ud835\udc44 and \ud835\udd10 (we call such a\nquestion the test question).  The question \u03b1\ud835\udc44\u03b1\ud835\udd10 (or the question \u03b1\ud835\udd10\u03b1\ud835\udc44 for the right test), where \u03b1\ud835\udc44 and \u03b1\ud835\udd10 are\nthe answers of \ud835\udc44 and \ud835\udd10 to the last test question, enters \ud835\udc3c input. We interpret this as receiving the first test answer from the \u201cleft\u201d subject of the test, and receiving the second test answer from the \u201cright\u201d one.\n Whenever \ud835\udc3c has reached the final state marked with \u201cLeft\u201d (\u201cRight\u201d), the test is finished and the result of the test is \u201cSP is on the left\u201d (\u201cSP is on the right\u201d). Denote by ,\ud835\udc47,\ud835\udd10, \u2113- (by ,\ud835\udc47,\ud835\udd10,\ud835\udcc7-) the left (the right) test described above and denote\nby ,\ud835\udc47,\ud835\udd10,\u2217- any of these tests. 2. We say that:\n TM \ud835\udd10 fails the left test , \ud835\udc3c,\ud835\udc44 ,\ud835\udd10, \u2113- (the right test , \ud835\udc3c, \ud835\udc44 ,\ud835\udd10,\ud835\udcc7-) if either \ud835\udd10 does not answer some test question that SP \ud835\udc44 has answered or if this test is finished with the correct result.  TM fails the test ,\ud835\udc47,\ud835\udd10- if it fails both the left test ,\ud835\udc47,\ud835\udd10, \u2113- and the right test ,\ud835\udc47, \ud835\udd10,\ud835\udcc7-2. The statement that TM \ud835\udd10 fails the test ,\ud835\udc47,\ud835\udd10- we denote in short by \ud835\udd10 \u22eb \ud835\udc47; the\nconverse statement we denote by \ud835\udd10 \u22b3 \ud835\udc47. 3. We say that tester \ud835\udc47 is successful for a given set \ud835\udd43 \u2286 \ud835\udd44 if \u2200\ud835\udd10\u2208\ud835\udd43(\ud835\udd10 \u22eb \ud835\udc47). 4. Assign to each SP \ud835\udd14 \u2208 \ud835\udd44 the dumb interrogator \u2111\ud835\udd14 \u2208 \ud835\udd44 who completes the test \u2111\ud835\udd14 \ud835\udef7 ,\ud835\udd14 ,\ud835\udd10,\u2217 for any oracle \ud835\udef7 only in the case when the test answers from \ud835\udd14 and \ud835\udd10 are different, and in this case \u2111\ud835\udd14 \ud835\udef7 calculates \u03b1 = \ud835\udd14(\ud835\udc5b), where \ud835\udc5b is a number of the current test step, and indicates the location of SP as the source of reply \u03b1. Note that \u2111\ud835\udd14 \ud835\udef7 performs operations that do not depend on \ud835\udef7.\nPut \ud835\udc47\ud835\udd14 \ud835\udef7 \u225d \u2111\ud835\udd14 \ud835\udef7 ,\ud835\udd14 and \ud835\udd4b\ud835\udef7 \u225d \ud835\udc47\ud835\udd14 \ud835\udef7 :\ud835\udd14 \u2208 \ud835\udd44 .\n2.7. Comments 1. The handling of every question by certain TM with the input head and the output head can be described as the functioning of an arbitrary TM with only one head and with initial content of the\n2 See also the strict test in Section 5.\n4\nwork tape equal to the question (see [2]). Then note that in accordance with \u00a7 42 [1], there is an elementary arithmetic formula \ud835\udcbb(\ud835\udc65,\ud835\udc66) with free occurrence of variables \ud835\udc65 and \ud835\udc66, which is true for \ud835\udc65 \u2208 \ud835\udd44 and \ud835\udc66 \u2208 \ud835\udd44 if and only if \ud835\udc65 and \ud835\udc66 are on the tape \ud835\udef1.\n2. We consider SP as the tester constituent and explain this as follows. The original description of the test offered by A. Turing assumes the loyalty of SP to interrogator. Now if interrogator gives in his zero numbered test question the instructions on how SP should operate (for example, instructions in the form \ud835\udd10\ud835\udcbb for OTM \ud835\udd10\ud835\udef1), then SP, due to his loyalty, will fulfill these instructions. The instructions to simulate the OTM equipped with computable oracle are executable by a human. The problem of simulation of OTM equipped with non-computable oracle is beyond the scope of this paper.\n3. Tests with arbitrary Turing machines\nWe shall consider tests under various conditions of reducibility of interrogator and SP to TM (Theorems 3.1 and 3.2) and prove at first the following lemma.\nLEMMA 3.1. 1. For each enumerator \u2130 that enumerates some communicable TMs3 and for each oracle \ud835\udef7,\nthe tester \ud835\udc47 \u2130 \ud835\udef7 is successful for \u2130*\u221e+.\n2. Tester \ud835\udc47 \u2130 \ud835\udef7 will finish the test \ud835\udf0f = \ud835\udc47 \u2130 \ud835\udef7 ,\u2130(\ud835\udc5b),\u2217 not later than at the \ud835\udc5bth step.\nPROOF. The interrogator \u2111\u2130 \ud835\udef7 is mute, and due to inequality \u2130,\ud835\udc5b- \u2260 \u2130(\ud835\udc5b) (\u03bb\ud835\udc5b), this\ninterrogator successfully completes the test \ud835\udf0f not later than at the \ud835\udc5bth step. \u25a1\nTHEOREM 3.1. 1. For each tester with SP that reduces to TM, the specified TM can pass the test; hence,\nany such tester is not successful for \ud835\udd44 4.\n2. For each tester T of the type (\u227b\ud835\udd44, \u227b\ud835\udd44), some generator \u210c can pass the test ,\ud835\udc47,\u210c-. 3. The problem of constructing the generator \u210c that can pass the test , \u2111,\ud835\udd14 ,\u210c-, where \u2111\nand \ud835\udd14 are arbitrary TMs, is algorithmically unsolvable.\nPROOF. The proof of Item 1 of the theorem arises from the definition of TM\u2019s ability to pass the test.\nTo prove Item 2 of the theorem consider \u210c = \ud835\udd10 , where TM \ud835\udd10 is defined as follows: If \ud835\udd0d and \ud835\udd14 are TMs, to which interrogator and SP are reduced, then \ud835\udd10 is an autonomous TM that simulates , \u2111,\ud835\udd14 ,\ud835\udd14,\u2217- and gives the answers that are the same as those of \ud835\udd14 in this test. In order to prove Item 3 of the theorem assume that there exists TM \ud835\udd05 such that generator \u210c = \ud835\udd05(\u2111\u03b8\ud835\udd14) can pass the test , \u2111,\ud835\udd14 ,\u210c-. Then consider the following enumerator \u2130 that\nenumerates generators: \u2130(\ud835\udc5b) \u225d \ud835\udd05 \u2111\ud835\udd04\ud835\udc5b\u03b8\ud835\udd04\ud835\udc5b . According to the definition of \u2130, we have \u2200\ud835\udc5b\u2208\u2115 \u2130(\ud835\udc5b) \u22b3 \ud835\udc47\ud835\udd04\ud835\udc5b \ud835\udee9 and thus \u2200\ud835\udc47\u2208\ud835\udd4b\ud835\udee9\u2203\ud835\udc5b(\u2130(\ud835\udc5b) \u22b3 \ud835\udc47). But Item 1 of Lemma 3.1 implies that \u2203\ud835\udc47\u2208\ud835\udd4b\ud835\udee9\u2200\ud835\udc5b(\u2130(\ud835\udc5b) \u22eb \ud835\udc47). \u25a1\nTHEOREM 3.2. Some tester of the type (\u227b\ud835\udd44, \u2281\ud835\udd44) with dumb interrogator is successful\nfor \ud835\udd44.\nPROOF5. Let us describe the desired tester \ud835\udc47 = \ud835\udc3c,\ud835\udc44 , where \ud835\udc44 is equipped with oracle \ud835\udef1: SP \ud835\udc44, after receiving the \ud835\udc5bth test question, acts as follows:  \ud835\udc44 calculates \ud835\udd04\ud835\udc5b and queries its oracle \ud835\udef1 whether \ud835\udd04\ud835\udc5b recognizes itself.  If the oracle answers in the affirmative, \ud835\udc44 simulates the work of \ud835\udd04\ud835\udc5b with question \ud835\udd04\ud835\udc5b ,\ncalculates the number \ud835\udc61 of cycles that is necessary for \ud835\udd04\ud835\udc5b to compute \ud835\udd04\ud835\udc5b(\ud835\udd04\ud835\udc5b), and gives the answer \ud835\udc61.\n3 Note that if there is an enumerator \u2130 that enumerates all communicable TMs, then \u2130*\u221e+ would\ninclude all generators, and then any generator would be similar to some element in \u211b*\u221e+,\nwhere \u211b(\ud835\udc5b) \u225d \u2130(\ud835\udc5b) , but \u211b \u2209 \u211b*\u221e+. 4 Thus, for the successfulness of such tester either SP should not reduce to TM (see Theorem 3.2) or SP, which reduces to TM, should not belong to the class of TMs that are subjects of the test (see Section 4). 5 The idea of the proof is based on Subsection 3 of Section 6 of [4].\n5  If the oracle answers negative, \ud835\udc44 gives the answer 0.\nInterrogator \ud835\udc3c, after receiving the answers to the \ud835\udc5bth test question, follows the next procedure:\n If the answers are equal, \ud835\udc3c continues the test.  Otherwise, \ud835\udc3c treats each nonzero answer as a notation of some natural number \ud835\udc61,\ncalculates \ud835\udd04\ud835\udc5b and verifies, whether \ud835\udd04\ud835\udc5b will answer the question \ud835\udd04\ud835\udc5b for \ud835\udc61 cycles; at negative result of verification \ud835\udc3c finishes the test, locating SP as the source of another answer.\nIf some TM \ud835\udd11 passes the test ,\ud835\udc47,\ud835\udd11-, then the problem of recognition of TMs not recognizing themselves is solvable by \ud835\udd11, but it is well known that this is impossible (see, for example, \u00a7 42 [1]). To complete the proof, note that reducibility of \ud835\udc44 to TM contradicts Item 1 of Theorem 3.1. \u25a1\n4. Testing for special classes of Turing machines\nIn this section, we consider the tests for all communicable TMs, and the tests for communicable TMs with time or memory limitation (we can suppose that these TMs are close-to-reality models of computer programs).\n4.1. Testing for communicable Turing machines\nTHEOREM 4.1. 1. Any tester of the type (\u227b\ud835\udd44, \u227b\ud835\udd44) is not successful for \u2102. 2. Some tester of the type (\u227b\ud835\udd44, \u2281\ud835\udd44) is successful for \u2102. 3. Some tester of the type (\u2281\ud835\udd44, \u227b\ud835\udd44) is successful for \u2102.\nPROOF. Items 1 and 2 of the theorem follow from Item 2 of Theorem 3.1 and from Theorem 3.2, respectively. To prove Item 3 of the theorem we shall describe the desired interrogator \ud835\udc3c, which is equipped with oracle \ud835\udef1, and SP \ud835\udd14 \u2208 \ud835\udd44. During the test \ud835\udc3c makes use of parameter \ud835\udc5f \u2208 \u21150, supposing \ud835\udc5f = 0 at the beginning of the test. At the \ud835\udc5bth step of the test (\ud835\udc5b \u2208 \u2115) interrogator, by means of oracle \ud835\udef1, finds the minimal \ud835\udc58\ud835\udc5b > \ud835\udc5f, at which:\n If \ud835\udc5b = 1, then \ud835\udd04\ud835\udc58\ud835\udc5b recognizes itself.  If \ud835\udc5b > 1, then \ud835\udd04\ud835\udc58\ud835\udc5b answers the questions \u00b51 , \u00b52 ,\u2026 , \u00b5\ud835\udc5b\u22121,\ud835\udd04\ud835\udc58\ud835\udc5b , where \u00b51 , \u00b52 ,\u2026 , \u00b5\ud835\udc5b\u22121 are\nthe previous test questions (each of which belongs to \ud835\udd44).\nThereafter \ud835\udc3c assigns the value \ud835\udc58\ud835\udc5b to \ud835\udc5f and puts the \ud835\udc5bth test question \u00b5\ud835\udc5b \u225d \ud835\udd04\ud835\udc58\ud835\udc5b 6.\nSP \ud835\udd14 gives the answer \u00b5\ud835\udc5b(\u00b51, \u00b52 ,\u2026 , \u00b5\ud835\udc5b) to the \ud835\udc5bth test question. For the first time when \ud835\udc3c received two different answers, \ud835\udc3c calculates the answer of \ud835\udd14 and completes the test, locating \ud835\udd14 as the source of its answer. Now consider the test , \ud835\udc3c,\ud835\udd14 ,\u212d- for arbitrary \u212d \u2208 \u2102. The proof of the theorem follows from \u212d = \ud835\udd04\ud835\udc58\ud835\udc5b for some \ud835\udc5b, while the reducibility of \ud835\udc3c to TM contradicts Item 1 of this theorem, which is already proved7. \u25a1\n4.2. Testing for Turing machines limited in time We say that communicable TM \u212d is limited in time if there is an upper bound for number of cycles required to calculate each following answer of \u212d .\nTHEOREM 4.2. Some tester of the type (\u227b\ud835\udd44, \u227b\ud835\udd44) with dumb interrogator is successful for all communicable limited in time TMs.\nPROOF. For each TM \ud835\udd10 and each \ud835\udc61 \u2208 \u2115 denote by \ud835\udd10 \ud835\udc61 TM \ud835\udd10 that operates under the control of special supervisor TM. The supervisor observes how \ud835\udd10 processes with questions , and at the first time when \ud835\udd10 has not provide an answer for \ud835\udc61 work cycles, supervisor shuts down \ud835\udd10 and gives  as the answer of \ud835\udd10 \ud835\udc61 to the current and all subsequent questions.\n6 Note that the interrogator's questions do not depend on the receiving answers. 7 Note that Item 1 of Theorem 3.1 implies that \ud835\udd14 \u2209 \u2102, and this is also clear from the principle of how \ud835\udd14\nworks: If \ud835\udd14 \u2208 \u2102, then \ud835\udd14(\u00b51, \u00b52 ,\u2026 , \u00b5\ud835\udc5b) = \ud835\udd14(\u00b51 , \u00b52 ,\u2026 , \u00b5\ud835\udc5b) for some \ud835\udc5b.\n6 Now construct an enumerator \u2130 that enumerates \ud835\udd10 \ud835\udc61 for all \ud835\udd10 \u2208 \ud835\udd44 and all \ud835\udc61 \u2208 \u2115. For\neach \u212d \u2208 \u2102 that is limited in time, an arbitrary TM in \u2130*\u221e+ is similar to \u212d , whereby the theorem statement follows from Item 1 of Lemma 3.1 8. \u25a1\n4.3. Testing for Turing machines limited in memory Consider a class of communicable TMs limited in memory, namely, TMs with a uniform upper bound for the number of states and a uniform upper bound for the length of the work tape segment that TM may scan in the processing of empty questions.\nTHEOREM 4.3. Some tester of the type (\u227b\ud835\udd44, \u227b\ud835\udd44) with dumb interrogator is successful for all communicable limited in memory TMs.\nPROOF. We need the following definitions:  Denote by \ud835\udd43 the set of all TMs that satisfy the specified limitation for the number of states and\nfor the length of the initial content of the work tape.  Denote by \ud835\udd42 the set of all TMs from \ud835\udd43 \u2229 \u2102 that satisfy the specified limitation for the length of\nthe work tape segment that TM makes use of in the processing of empty questions.\nNow calculate such \ud835\udc41 that \ud835\udd43 \u2286 \ud835\udc9c*\ud835\udc41+ and put \ud835\udd43\ud835\udc41 \u225d *\ud835\udd10 \u2208 \ud835\udd43:\ud835\udd10(\u03bb \ud835\udc41) \u2260 \u221e+ (note\nthat \ud835\udd42 \u2286 \ud835\udd43\ud835\udc41). Observing the work of \ud835\udd10 \u2208 \ud835\udd43 that calculates \ud835\udd10  \ud835\udc41 , it is possible to reject those \ud835\udd10 for which:  The length of the work tape segment that \ud835\udd10 makes use of indicates that \ud835\udd10 \u2209 \ud835\udd42.\n At the processing of current question , the configuration of \ud835\udd10 (i.e. the combination (state of \ud835\udd10, position and content of the work tape)) was repeated, whence it follows that \ud835\udd10 \u2209 \ud835\udd43\ud835\udc41 .\nThus we can reject all TMs from \ud835\udd43\\\ud835\udd43\ud835\udc41 and some TMs from \ud835\udd43\ud835\udc41\\\ud835\udd42. Then it is possible to construct an enumerator \u211b, based on \ud835\udc9c, on the definition of \ud835\udd43, and on the described above rejection, such that \ud835\udd42 \u2286 \u211b*\ud835\udc41+ \u2286 \ud835\udd43\ud835\udc41 . Finally, it is possible to construct the following enumerator \u2130 that enumerates generators:\nIf \ud835\udc5b \u2264 \ud835\udc41, then\n\u2130(\ud835\udc5b),\ud835\udc58- \u225d \u211b(\ud835\udc5b) \u03bb\ud835\udc58 if \ud835\udc58 \u2264 \ud835\udc41,\n\u03bb if \ud835\udc58 > \ud835\udc41;\nand if \ud835\udc5b > \ud835\udc41, then \u2200\ud835\udc58\u2208\u2115(\u2130(\ud835\udc5b),\ud835\udc58- \u225d \ud835\udf06).\nFor each \u212d \u2208 \ud835\udd42 there is an arbitrary TM in \u2130*\ud835\udc41+ that is \ud835\udc41-similar to \u212d , whereby the theorem statement follows from Item 2 of Lemma 3.1 9. \u25a1\n5. The strict Turing Test\n5.1. Definition of the strict Turing Test TM that is the subject of the test has some advantages: If this TM does not answer the test question simultaneously with SP, it passes the test (see Item 2.6.2). The choice of this condition is rather arbitrary and that allows us to consider the \u201cstrict\u201d Turing test:\n TM fails the left (the right) strict test if either TM does not answer some test question (regardless whether SP has answered this question) or this test is finished with the correct result.\n TM fails the strict test if it fails both the left and the right strict test. We introduce for the strict tests notations \ud835\udc47,\ud835\udd10, \ud835\udc59 , \ud835\udc47,\ud835\udd10,\ud835\udcc7 , \ud835\udc47,\ud835\udd10,\u2217 , \ud835\udc47,\ud835\udd10 , \ud835\udd10 \u22b5 \ud835\udc47,\nand \ud835\udd10 \u22edT by analogy with the notations ,\ud835\udc47,\ud835\udd10, \ud835\udc59-, ,\ud835\udc47,\ud835\udd10,\ud835\udcc7-, ,\ud835\udc47,\ud835\udd10,\u2217-, ,\ud835\udc47,\ud835\udd10-, \ud835\udd10 \u22b3 \ud835\udc47, and \ud835\udd10 \u22ebT for the ordinary tests. It is clear that if \ud835\udd10 \u22eb \ud835\udc47, then \ud835\udd10 \u22ed \ud835\udc47. Therefore, the statements of Lemma 3.1, Theorems 3.2, 4.2, 4.3, and Items 2 and 3 of Theorem 4.1 are extended to the case of the strict test. A different situation arises with the statement of Theorem 3.1 (and its corollary, Item 1 of Theorem 4.1): If SP of the tester \ud835\udc47 reduces to TM \ud835\udd14, then \ud835\udd14 may fail the strict test \ud835\udc47,\ud835\udd14 (take for example TM \ud835\udd14 that\n8 Note that Item 1 of Theorem 3.1 implies that SP of the described tester is not limited in time, and this\nis also clear from the principle of how this SP works. 9 Note that from Item 1 of Theorem 3.1 it follows that SP of the described tester does not belong to \ud835\udd42, and this is also clear from the principle of how this SP works.\n7\ndoes not answer any question). However, the modified Theorem 3.1, given in following subsection, is valid for the strict test.\n5.2. Successfulness of the testers for the strict Turing test\nTHEOREM 5.1. 1. For each tester, which SP is reducible to TM, an arbitrary TM can pass the strict test\nwith this tester10.\n2. For each tester T of the type (\u227b\ud835\udd44, \u227b\ud835\udd44) some generator \u210c can pass the strict\ntest \ud835\udc47,\u210c 11. 3. For each tester T of the type (\u227b\ud835\udd44, \u227b\ud835\udd44) some communicable TM \u212d can pass the strict\ntest \ud835\udc47,\u212d 12. 4. For a given oracle \ud835\udef7 and for any TMs \u2111 and \ud835\udd14, the problem of constructing the TM \ud835\udd10 that can pass the strict test \u2111\ud835\udef7 ,\ud835\udd14 ,\ud835\udd10 is algorithmically unsolvable13."}, {"heading": "PROOF OF ITEMS 1, 2, AND 3 OF THEOREM 5.1.", "text": "For an arbitrary tester \ud835\udc47, denote by \ud835\udd14 the TM to which SP of this tester is reduced, and\nconsider the strict test \ud835\udf0f = \ud835\udc47,\ud835\udd14,\u2217 . If \ud835\udd14 answers all test questions, then the proof of Items 1 and 2 of the theorem coincides with the proof of Items 1 and 2 of Theorem 3.1. Assume now that \ud835\udd14 does not answer the \ud835\udc5bth test question in the test \ud835\udf0f, where \ud835\udc5b \u2208 \u2115. Then \ud835\udd14 fails the test \ud835\udf0f, but generator \u210c,\nwhich first \ud835\udc5b\u20131 answers are equal to those of \ud835\udd14 in the test and the following answers are equal to , will pass the test \ud835\udc47,\u210c,\u2217 . That completes the proof of Items 1 and 2 of Theorem 5.1. Finally, generator is a communicable TM and hence Item 3 of Theorem 5.1 is the corollary of Item 2 of Theorem 5.1. \u25a1\n5.3. Lemmas To prove Item 4 of Theorem 5.1 let us:\n Fix the oracle \ud835\udef7 from the hypothesis of this item.  Assume the existence of TM \ud835\udd09 that was specified in Item 4 of the theorem:\n\ud835\udd09(\u2111\ud835\udd14) \u22b5 \u2111\ud835\udef7 ,\ud835\udd14 .  Prove the following lemmas.\nLEMMA 5.1. For each SP \ud835\udd14 and each TM \ud835\udd10, the following values are equal for \ud835\udc47\ud835\udd14 \ud835\udef7 ,\ud835\udd10, \u2113\nand \ud835\udc47\ud835\udd14 \ud835\udef7 ,\ud835\udd10,\ud835\udcc7 :\n1. The numbers of tests' steps.\n2. The numbers (maybe infinite) and contents of answers of \ud835\udd14. 3. The numbers (maybe infinite) and contents of answers of \ud835\udd10.\nPROOF. By definition of interrogator \u2111\ud835\udd14 \ud835\udef7 , it treats the answers of the subjects of the test\nsymmetrically, and that proves Item 1 of the lemma. Items 2 and 3 of the lemma follow from Item 1 of this lemma and from the dumbness of \u2111\ud835\udd14 \ud835\udef7 . \u25a1\nTaking Lemma 5.1 into account for the strict tests with a tester that has a form of \ud835\udc47\ud835\udd14 \ud835\udef7 , we\nshall discuss the number of the steps in the test and the answers of the subjects of the test without specifying the orientation of the test (the left one or the right one). To formulate and prove Lemmas 5.2, 5.3, 5.4, and 5.5 we need the following definitions and notations.\n Denote by  the number of words in the sequence  of words over \ud835\udd38; we say that sequences of words  and  satisfy the relation \u297d if any of the following cases holds:\n 0 =  < \u03bc .  \u221e \u2260  < \u03bc and  is the beginning of .   = \u03bc = \u221e and  = .\n10 An analogue of Item 1 of Theorem 3.1. 11 An analogue of Item 2 of Theorem 3.1. 12 An analogue of Item 1 of Theorem 4.1. 13 That accentuates the difference between the strict and the ordinary tests: See Item 1 of Theorem 3.1.\n8\n Fix some SP \ud835\udd14 and put \ud835\udd140 \u225d \ud835\udd14, \ud835\udd14\ud835\udc5b+1 \u225d \ud835\udd09 \u2111\ud835\udd14\ud835\udc5b\ud835\udd14\ud835\udc5b , \ud835\udc3c\ud835\udc5b \u225d \u2111\ud835\udd14\ud835\udc5b \ud835\udef7 , \ud835\udc47\ud835\udc5b \u225d \ud835\udc47\ud835\udd14\ud835\udc5b \ud835\udef7 , where \ud835\udc5b \u2208 \u21150.\n For \ud835\udc5b > 0 and the strict test \ud835\udc47\ud835\udc5b\u20131,\ud835\udd14\ud835\udc5b :\n Denote by (\ud835\udc5b) the sequence of answers of SP \ud835\udd14\ud835\udc5b\u22121 in this test.  Denote by (\ud835\udc5b) = \u03b31 (\ud835\udc5b) , \u03b32 (\ud835\udc5b)\n,\u2026 the sequence of answers of TM \ud835\udd14\ud835\udc5b that is the subject of this test.\nLEMMA 5.2. \u2200\ud835\udc5b\u2208\u2115  (\ud835\udc5b) \u297d (\ud835\udc5b) .\nPROOF. For \ud835\udc5b > 0, \ud835\udd14\ud835\udc5b \u22b5 \ud835\udc47\ud835\udc5b\u20131. Thus, owing to the specificity of how interrogator \ud835\udc3c\ud835\udc5b operates,\nonly the two following cases are possible: 1. The number of test steps is infinite, and moreover, (\ud835\udc5b) = (\ud835\udc5b). 2. SP \ud835\udd14\ud835\udc5b\u20131 has not answered to the \ud835\udc57th (\ud835\udc57 \u2265 1) test question that has been answered by\nTM \ud835\udd14\ud835\udc5b . Thus \u03b3 (\ud835\udc5b) = (\ud835\udc5b) + 1 and this implies that for \ud835\udc57 = 1, the equation (\ud835\udc5b) = 0 is satisfied, and for \ud835\udc57 > 1, (\ud835\udc5b) = \u03b31 (\ud835\udc5b) , \u03b32 (\ud835\udc5b) ,\u2026 , \u03b3\ud835\udc57\u22121 (\ud835\udc5b) . \u25a1\nLEMMA 5.3. \u2200\ud835\udc5b\u2208\u2115  (\ud835\udc5b) \u297d (\ud835\udc5b+1) .\nPROOF. Consider the tests \ud835\udc47\ud835\udc5b\u20131 ,\ud835\udd14\ud835\udc5b ,\u2217 and \ud835\udc47\ud835\udc5b ,\ud835\udd14\ud835\udc5b+1,\u2217 . The interrogators \ud835\udc3c\ud835\udc5b\u22121 and \ud835\udc3c\ud835\udc5b are\ndump, and \ud835\udd14\ud835\udc5b+1 \u22b5 \ud835\udc47\ud835\udc5b . Thus  (\ud835\udc5b) = (\ud835\udc5b+1) or (\ud835\udc5b) \u297d (\ud835\udc5b+1), due to the definition of \ud835\udc3c\ud835\udc5b . Then the proof follows from Lemma 5.2. \u25a1\nLEMMA 5.4. \u2200\ud835\udc5b\u2208\u2115( \u03b3 (\ud835\udc5b) \u2265 \ud835\udc5b).\nPROOF. Lemma 5.2 implies that \u03b3(1) > 0, and for \ud835\udc5b > 1 the statement of the lemma follows\nfrom Lemma 5.3. \u25a1\nLEMMA 5.5. For each \ud835\udc5b \u2208 \u2115 and for every \ud835\udc58, where 0 < \ud835\udc58 \u2264 \u03b3(\ud835\udc5b) , the word \u03b3\ud835\udc58 (\ud835\udc5b) is\ncalculated algorithmically.\nPROOF. Owing to definition of \u2111\ud835\udd10, this TM can be algorithmically constructed from TM \ud835\udd10. Then, due to definition of \ud835\udd14\ud835\udc5b , every \u2111\ud835\udd14\ud835\udc5b and thus every \ud835\udd14\ud835\udc5b can be algorithmically constructed from TM \ud835\udd14. Finally, \u03b3\ud835\udc58 (\ud835\udc5b) = \ud835\udd14\ud835\udc5b \u03bb \ud835\udc58 . \u25a1\n5.4. Proof of Item 4 of Theorem 5.1 To prove Item 4 of Theorem 5.1 assign to each \ud835\udd14 \u2208 \ud835\udd44 the following generator \u210c\ud835\udd14: \u210c\ud835\udd14,\ud835\udc5b- \u225d \u03b3\ud835\udc5b (\ud835\udc5b) (\u210c\ud835\udd14 is well defined due to Lemmas 5.4 and 5.5). Now, if  is the sequence of all answers of \u210c\ud835\udd14, then according to Lemmas 5.3 and 5.4, (1) \u297d , hence \ud835\udd141 \u22b5 \ud835\udc47\ud835\udd14 \ud835\udef7 \u21d2 \u210c\ud835\udd14 \u22b5 \ud835\udc47\ud835\udd14 \ud835\udef7 \u21d2 \u210c\ud835\udd14 \u22b3 \ud835\udc47\ud835\udd14 \ud835\udef7 . Now construct the following enumerator \u2130 that enumerates generators: \u2130(\ud835\udc5b) \u225d \u210c\ud835\udd04\ud835\udc5b . We have \u2200\ud835\udc5b\u2208\u2115 \u2130(\ud835\udc5b) \u22b3 \ud835\udc47\ud835\udd04\ud835\udc5b \ud835\udef7 and thus \u2200\ud835\udc47\u2208\ud835\udd4b\ud835\udef7\u2203\ud835\udc5b(\u2130(\ud835\udc5b) \u22b3 \ud835\udc47). However, according to Item 1 of Lemma 3.1, \u2203\ud835\udc47\u2208\ud835\udd4b\ud835\udef7\u2200\ud835\udc5b(\u2130(\ud835\udc5b) \u22eb \ud835\udc47). This contradiction proves that \ud835\udd09 does not exist. \u25a1\n6. Conclusion\nThe summary of results is given in Figure 1.1 (see Section 1). Note that some results can be extended to the case when each participant of the test can be an oracle Turing machine.\n7. Definitions and notations\nIn tables given below, the global definitions and notations (terms) are shown with specifying the number of the subsection, where the corresponding definition or notation was denoted.\n7.1. Definitions and notations\nSets Symbols, words, and related concepts Special TMs Testers, interrogators, tests\n\ud835\udd38, \ud835\udd38* 2.1.1 \u03b8 2.1.1 \ud835\udd10 2.2.5 \ud835\udc3c,\ud835\udc44 2.5.1\n\ud835\udd39 2.1.4 \u03bb 2.1.1 \ud835\udd04\ud835\udc58 2.2.7 \ud835\udc47\ud835\udd14 \ud835\udef7 2.6.4\n9\n\u2115, \u21150 2.1.2 \u03bb \ud835\udc5b 2.1.1\n\u2130*\ud835\udc41+ (\u2130*\u221e+) 2.2.7 \ud835\udc47\ud835\udc5b 5.3\n\ud835\udd44 2.2.2 \u03c9 2.1.3 \ud835\udc9c 2.2.7 \u2111\ud835\udd14 2.6.4 \u2102 2.2.4 (\ud835\udc5b) 5.3 \u2130 2.2.8 \ud835\udc3c\ud835\udc5b 5.3 \ud835\udd4b\ud835\udef7 2.6.4 (\ud835\udc5b), \u03b3\ud835\udc58 (\ud835\udc5b) 5.3 \ud835\udd14\ud835\udc5b 5.3 ,\ud835\udc47,\ud835\udd10, \u2113-, ,\ud835\udc47,\ud835\udd10,\ud835\udcc7-, ,\ud835\udc47,\ud835\udd10,\u2217- 2.6.1\nRelations  5.3 \ud835\udd09 5.3 ,\ud835\udc47,\ud835\udd10- 2.6.2\n 2.4.3 Oracles, OTM Formula \ud835\udc47,\ud835\udd10, \ud835\udc59 , \ud835\udc47,\ud835\udd10,\ud835\udcc7 , \ud835\udc47,\ud835\udd10,\u2217 , \ud835\udc47,\ud835\udd10\n5.1\n\u227b, \u2281 2.4.3 \ud835\udef1 2.3.2 \ud835\udcbb 2.7.1 Answers of (O)TM to questions \u22b3, \u22eb 2.6.2 \ud835\udee9 2.3.3 \ud835\udc49(), \ud835\udc49() = \u221e 2.2.4, 2.4.2 \u22b5, \u22ed 5.1 \ud835\udd10\ud835\udef7 2.4.1 \u210c,\ud835\udc5b- 2.2.4\n\u297d 5.3\n7.2. Terms\nanswer of (O)TM 2.2.3, 2.4.2 left (right) test 2.6.1 reducible to TM 2.4.3\nanswers to the questions, that, (O)TM 2.2.4, 2.4.2 limited in memory, TM 4.3 similar OTMs 2.4.2\nautonomous TM 2.2.4 limited in time, TM 4.2 SP 2.5.1\ncommunicable TM 2.2.4 N-similar OTMs 2.4.2 strict test 5.1\ndumb interrogator 2.5.3 oracle 2.3.1 successful tester 2.6.3\nenumerator 2.2.6 oracle interface of (O)TM 2.2.1, 2.4.1 test question 2.6.1\nfails the test, that, TM 2.6.2 OTM 2.4.1 tester 2.5.1\ngenerator 2.2.4 output of (O)TM 2.2.1, 2.4.1 TM 2.2.1\ninput of (O)TM 2.2.1, 2.4.1 question to (O)TM 2.2.3, 2.4.2 type of OTM 2.4.3\ninterrogator 2.5.1 recognition of TM 2.2.4 type of tester 2.5.2\n8. References\n[1] Kleene S.C. (1967), \u2018Mathematical Logic\u2019, John Wiley and Sons, New York \u2013 London \u2013 Sydney. ,2- Papadimitriou, Christos H. (1994), \u2018Computational Complexity\u2019, Addison-Wesley. [3] Saygin, A.P., Cicekli, I. and Akman, V. (2000), \u2018Turing Test: 50 Years Later\u2019, Minds and Machines 10, pp. 463-518. [4] Turing, A. (1950), \u2018Computing Machinery and Intelligence\u2019, Mind 59(236), pp. 433\u2013460.\n9. Appendix. Probabilistic test\nConsider some variation of Theorem 3.2: Let SP be equipped with the oracle that creates physically, namely, can be replaced with a random number generator.\nThere are at least two symbols in the alphabet \ud835\udd39:  and \u03bb, and in order to use the notations that are conventional to binary random number generators we replace these symbols with 0 and 1. Then consider the following OTM \ud835\udc4d = \u2128\ud835\udeef :\n Oracle \ud835\udeef is filled up with symbols 0 and 1 randomly and independently; where 0 appears with the probability \ud835\udc5d0 and 1 appears with the probability \ud835\udc5d1 (hence \ud835\udeef is randomly chosen from the set of all oracles).  TM \u2128 satisfies the following condition: If \ud835\udeef = \ud835\udf091\ud835\udf092 \u2026, then \ud835\udc4d( \ud835\udc5b) \u225d \ud835\udf09\ud835\udc5b .\nTHEOREM 9.1. For some dumb interrogator \u2111 of the type \u227b\ud835\udd44, which depends on \ud835\udc5a \u2208 \u2115,\nif \ud835\udc5d = max(\ud835\udc5d0 ,\ud835\udc5d1) < 1, then \u2200\u212d\u2208\u2102 .\ud835\udc43*\u212d \u22eb \u2111,\ud835\udc4d + \u2265 1 \u2212 \ud835\udc5d\ud835\udc5a\n1\u2212\ud835\udc5d /.\nPROOF. Without loss of generality, we equate each nonzero answer of any TM to 1. Now fix \ud835\udc5a \u2208 \u2115 and construct the dumb interrogator \u2111 by the following algorithm. Interrogator \u2111 consists of supervisor \ud835\udd16 and two assistants: The left assistant \ud835\udd0f and the right assistant \u211c. The left (the right) assistant processes the answers of the left (the right) subject of the test and transmits the results of the processing to \ud835\udd16.\n10 After the \ud835\udc5bth answer has been received, an assistant carries out the following instructions:\n1. Save the answer in memory and put  = 0. 2. For \ud835\udc58 = 1,\u2026 ,\ud835\udc5b, start up \ud835\udd04\ud835\udc58(\n\ud835\udc5b) for \ud835\udc5b cycles of calculation. 3. If \ud835\udd04\ud835\udc58 has provided not less than \ud835\udc5a + \ud835\udc58 \u2212 1 answers, and these answers are equal to the\nreceived answers, put  = 1. 4. Report the value of  to \ud835\udd16.\nSupervisor \ud835\udd16 treats the messages \u03b4\ud835\udd0f and \u03b4\u211c of \ud835\udd0f and \u211c according to the following table.\n\u03b4\u211c= \u03b4\ud835\udd0f=\n0 1\n0 Continue the test Complete the test with result \u201cSP is on the left\u201d 1 Complete the test with result \u201cSP is on the right\u201d\nIf some communicable TM \u212d has passed the test, then symbol 1 appears in the sequence of\nmessages from the assistant that processes the answers of \ud835\udc4d, and then for some \ud835\udc58 the first \ud835\udc5a + \ud835\udc58\u20131 answers of \ud835\udc4d are equal to the answers of \ud835\udd04\ud835\udc58 . As a result, \ud835\udc43{\u212d \u22b3 \u2111,\ud835\udc4d } \u2264 \ud835\udc5d \ud835\udc5a+\ud835\udc58\u22121\u221e\n\ud835\udc58=1 . \u25a1"}], "references": [], "referenceMentions": [], "year": 2010, "abstractText": "The Turing test was described by A. Turing in his paper [4] as follows: An interrogator questions both Turing machine and second participant of the test (a person), each of which tries to appear human. The interrogator does not know from whom exactly he receives answers and has the objective to tell the Turing machine from the person (for more details, see, for example, [3]). In this paper, we consider a formalization of the Turing test and obtain the following results (Figure 1.1):", "creator": "Microsoft\u00ae Office Word 2007"}}}