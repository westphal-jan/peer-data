{"id": "1102.4926", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "24-Feb-2011", "title": "New Worst-Case Upper Bound for X3SAT", "abstract": "the rigorous theoretical analyses of hash algorithms for exact 3 - satisfiability ( x3sat ) have been proposed in the literature. as we know, previous iteration algorithms for solving x3sat have been analyzed only regarding the number of variables as the parameter. essentially however, the accumulated time complexity for designing solving x3sat instances depends not totally only on the number of variables, but also on the number column of clauses. therefore, it is significant to exploit the time complexity curves from the other point of view, i. in e. the exponential number of clauses. furthermore in this paper, we present algorithms for solving x3sat with rigorous complexity analyses using defining the number digit of clauses regarded as the parameter. by analyzing merging the algorithms, we obtain the new worst - case upper bounds o ( 1. 15855m ), where m is the number of irrelevant clauses.", "histories": [["v1", "Thu, 24 Feb 2011 08:26:15 GMT  (514kb)", "http://arxiv.org/abs/1102.4926v1", "submitted to SAT-11"], ["v2", "Sat, 26 Mar 2011 03:19:01 GMT  (514kb)", "http://arxiv.org/abs/1102.4926v2", null]], "COMMENTS": "submitted to SAT-11", "reviews": [], "SUBJECTS": "cs.AI cs.CC", "authors": ["junping zhou", "minghao yin"], "accepted": false, "id": "1102.4926"}, "pdf": {"name": "1102.4926.pdf", "metadata": {"source": "CRF", "title": "New Worst-Case Upper Bound for X3SAT", "authors": ["Junping Zhou", "Minghao Yin"], "emails": ["ymh@nenu.edu.cn"], "sections": [{"heading": null, "text": "satisfiability (X3SAT) have been proposed in the literature. As we know, previous algorithms for solving X3SAT have been analyzed only regarding the number of variables as the parameter. However, the time complexity for solving X3SAT instances depends not only on the number of variables, but also on the number of clauses. Therefore, it is significant to exploit the time complexity from the other point of view, i.e. the number of clauses. In this paper, we present algorithms for solving X3SAT with rigorous complexity analyses using the number of clauses as the parameter. By analyzing the algorithms, we obtain the new worst-case upper bounds O(1.15855m), where m is the number of clauses.\nKeywords: X3SAT; upper bound; the worst case; connected-clauses principle."}, {"heading": "1 Introduction", "text": "Exact satisfiability problem, abbreviated XSAT, is a problem of deciding whether there is a truth assignment satisfying exactly one literal in each clause. The exact 3- satisfiability (X3SAT) is the version in which each clause contains at most three literals. The X3SAT problem is an important variant of the well-known NP-complete problem of propositional satisfiability (SAT), which has played a key role in complexity theory as well as in automated planning. In fact, X3SAT is also a NPcomplete problem even when restricted to all variables occurring only unnegated [1]. If P \u2260 NP, it means that we can\u2019t solve the problem in polynomial time. Therefore, Improvements in the exponential time bounds are crucial in determining the size of NP-complete class problem that can be solved. Even a slight improvement from O(c k ) to O((c-) k ) may significantly increase the size of the problem being tractable.\nRecently, tremendous efforts have been made on analyzing of algorithms for X3SAT problems. Based on a recursive partitioning of the problem domain and a careful elimination of some branches, Drori and Peleg presented an algorithm running in O(1.1545 n ) for X3SAT, where n is the number of the variables [2]. By adapting and improving branching techniques, Porschen et al. proposed an algorithm for solving X3SAT running in O(1.1487 n ) [3]. According to exploit a perfect matching reduction\nand present a more involved deterministic case analysis, Porschen et al. prove a new upper bound for X3SAT (O(1.1926 n )) [4]. By providing a new transformation rule, Kulikov [5] simplified the proof of the bound for X3SAT (O(1.1926 n )) presented by Porschen et al. [4]. Based on combining various techniques including matching and reduction, Dahll\u00f6f et al. addressed an algorithm running in O(1.1120 n ) for X3SAT [6]. Further improved algorithms in [7] presented a new upper time bound for the X3SAT (O(1.1004 n )), which is the best upper bound so far.\nDifferent from complexity analyses regarding the number of variables as the parameter, Skjernaa presented an algorithm for XSAT with a time bound O(2 m ) but using exponential space, where m is the number of clauses of a formula [8]. Bolette addressed an algorithm for XSAT with polynomial space usage and a time bound O(m!) [9]. Similar to the XSAT problem, the time complexity of X3SAT problem is calculated based on the size of the X3SAT instances, which depends not only on the number of variables, but also on the number of clauses. Therefore, it is significant to exploit the time complexity from the other point of view, i.e. the number of clauses. However, so far all algorithms for solving X3SAT have been analyzed based on the number of variables. And to our best knowledge, it is still an open problem that analyzes the X3SAT algorithm with the number of clauses as the parameter.\nThe aim of this paper is to exploit new upper bounds for X3SAT using the number of clauses as the parameter. We provide algorithm for solving X3SAT. This algorithm employs a new principle, i.e. the connected-clauses principle, to simplify formulae. This allows us to remove one sub-formula and therefore reduce as many clauses as possible in both branches. In addition, by improving the case analyses, we obtain the worst-case upper bound for solving X3SAT is O(1.15855 m ), where m is the number of clauses of a formula."}, {"heading": "2 Problem Definitions", "text": "We describe some definitions used in this paper. A variable can take the values true or false. A literal of a variable is either the unnegated literal x, having the same truth value as the variable, or the negated literal x, having the opposite truth value as the variable. A clause is a disjunction of literals, referred to as a k-clause if the clause is a disjunction on k literals. A k-SAT formula F in Conjunction Normal Form (CNF) is a conjunction of clauses, each of which contains at most k literals. A truth assignment for F is a map that assigns each variable a value. When a truth assignment makes the F true, we say the truth assignment is a satisfying assignment. The exact satisfiability problem (XSAT) is to find a truth assignment such that exactly one literal is true in each clause. The exact 3-satisfiability problem (X3SAT) is a version of the XSAT in which each clause contains at most three literals. We define m as the number of clauses in F, and n as the number of variables F contains. When a variable occurs once in F, it is referred to as singleton. The degree of a variable v, represented by (v),\nis the number of times it occurs in a formula. The degree of a formula F, denoted by (F), is the maximum degree of variables in F. A literal x is an (i, j)-literal if F\ncontains exactly i occurrences of x and exactly j occurrences of x. And a literal x is monotone if its complementary literal does not appear in F. Given a literal x, we say\nvar(x) is the variable that forms the literal and ~ x indicates x or x. We also use F(\u00b5 \u03b7) to denote the substitution of \u00b5 by \u03b7 in the formula F, where \u00b5 is either a\nliteral or a clause, and \u03b7 is a literal, clause, or false. To avoid a tedious enumeration of trivialities, if more than one literal is substituted by false, \u00b5 is usually expressed as a set of literals. We use F /  to denote the formula obtained by removing  from F, where  is either a clause or a sub-formula. Given a formula F and a literal x, NumC(F, N(x)) is defined as follow.\nNumC(F, N(x))= { var( ) ( ) }C C F C N x   (1)\nwhere N(x) is the set of variables that appear in a clause with the literal x, and var(C) is the set of variables occur in the clause C. After specifying the definitions, we present some basic rules for solving X3SAT problem. Given a formula F, the basic strategy of Davis-Putnam-Logemann-Loveland (DPLL) is to arbitrarily choose a variable v that appears in F. Then,\nF= (F  v)  (F   v) (2)\nGiven a formula F, if F can be partitioned into disjoint sub-formulae where any two\nsub-formulae have no common variables, then\nF= F1  F2  \u2026  Fk (3)\nThus, F can be evaluated by deciding the satisfiability of disjoint sub-formulae of F respectively."}, {"heading": "2.1 Estimating the Running Time", "text": "In this subsection, we explain how to compute an upper bound on the running time of a DPLL-style algorithm. At first, we present a notion called branching tree. The branching tree is a hierarchical tree structure with a set of nodes, each of which is labeled with a formula [10]. Suppose there is a node labeled with a formula F, then its sons labeled with F1, F2, \u2026 , Fk are obtained by branching on one or more variables in the formula F, i.e., assigning values to the variable(s) such that the formula F is reduced to two or more sub-formulae F1, F2, \u2026 , Fk with fewer variables. Indeed, the construction of a branching tree can be viewed as an execution of a DPLL-style algorithm. Therefore, we use the branching tree to estimate the running time of our algorithm.\nIn the branching tree, every node has a branching vector. Let us consider a node labeled with F0 and its sons labeled with F1, F2, \u2026, Fk. The branching vector of the node labeled with F0 is (r1, r2,\u2026, rk), where ri=f(F0)-f(Fi) ( f(F0) is the number of clauses of F0). The characteristic polynomial of the branching vector is defined as follows:\nh(x)=11 i\nk r\ni\nx \n\n (4)\nThe positive root of this polynomial is called the branching number, denoted by  (r1, r2,\u2026, rk). And we assume that the branching number of the leaves is 1. We define the\nmaximum branching number of nodes in the branching tree as the branching number of the branching tree, expressed by max  (r1, r2,\u2026, rk). The branching number of a branching tree has an important relationship with the running time (T(m)) of DPLLstyle algorithms. At first, we assume that the running time of DPLL-style algorithms performing on each node is in polynomial time. Then we obtain the following inequality.\nT(m)  (max  (r1, r2,\u2026, rk)) m  poly(F)\n= (max 1\nk\ni\n T(m-ri)) m  poly(F)\n(5)\nwhere m is the number of clauses in the formula F, ploy(F) is the polynomial time executing on the node F, and\n (r1, r2,\u2026, rk)= 1\nk\ni\n T(m-ri) (6)\nIn addition, if a X3SAT problem recursively solved by the DPLL-style algorithms, the time required doesn\u2019t increase, for\n1\nk\ni  T(mi)  T(m) where m = 1\nk\ni\n mi (7)\nwhere m is the number of clauses, mi is the number of clauses in the sub-formula Fi (1ik) of the formula F. Note that when analyzing the running time of our algorithms, we ignore the polynomial factor so that we assume that all polynomial time computations take O(1) time in this paper."}, {"heading": "3 Algorithm for Solving X3SAT", "text": "In this section, we present the algorithm X3SAT and prove an upper bound O(1.15855 m ), where m is the number of the clauses. Firstly we address some transformation rules used in the algorithm.\n3.1 Transformation Rules\nThe transformation rules are applied before branching on one or more variables of the formula F. They can reduce formula such that the simplified formula contains a fewer number of clauses. In the following, we present the transformation rules (TR1) - (TR14) which are also used by [7].\n(TR1). If F contains a variable x such that the number of negated occurrences is larger than the number of unnegated occurrences, then let F = F ( x x).\n(TR2). If F contains a 1-clause C = x, then F = F (x true).\n(TR3). If F contains a 2-clause C = x  y, then F = F (x  y).\n(TR4). If F contains a clause C = x  x  y, then F = F (x false).\n(TR5). If F contains a clause C = x   x  y, then F = F (y false).\n(TR6). If F contains a clause C = x y  z where x and y are singletons, then F = F (x false).\n(TR7). If F contains clauses C1= x  y  z, C2= x   y  z\u2019, then F = F (x false).\n(TR8). If F contains clauses C1= x  y  z, C2= x   y  z\u2019, then F = F (y  x).\n(TR9). If F contains clauses C1= x1  y1  y2, C2= x2  y2  y3, C3= x3  y3  y1, then F = F (C3 ( x1  x2  x3)).\n(TR10). If F contains clauses C1= x1   y1  y2, C2= x2   y2  y3, \u2026, Ck= xk   yk  y1, then F = F ({x1, x2,\u2026, xk} false).\n(TR11). If F contains clauses C1= x1  y1  y2, C2= x2  y2  y3, C3= x3   y3  y1 where x1 is a singleton, then F = F / C1.\n(TR12). If F contains clauses C1= x1  y1  y2, C2= x2  y2  y3, C3= x3  y3  y1 where val(x3) is a singleton, then F = F (C3 ( x1  y3  x3)).\n(TR13). If F contains clauses C1= x1  y1  z1, C2= x1  y1  z2, then F = F (C2 ( z1  z2)).\n(TR14). If F contains a clause C= x  y  z, where x and y only occur unnegated and in clauses with a singleton in all other clauses, then F = F (x2 false).\nActually, the above transformation rules are used in the Reduce function repeatedly until no transformation rule applies, which can be guaranteed to terminate in polynomial time. The function takes a CNF F as the input and returns a simplified X3SAT formula. In the following, we will show the character of the simplified X3SAT formula. From now on, unless otherwise stated, given a literal x, Y1={ y1, y2,\u2026} is the set of literals that occur in a clause with x; Y2={ y'1, y'2,\u2026} is the set of\nliterals that occur in a clause with x and Y= Y1 Y2; Z={ z1, z2,\u2026} is the set of literals that don\u2019t occur in a clause with x. We use y\u2019s literals indicating the literals occur in Y. For example, if x is a (2, 1) \u2013 literal, the clauses the literal x in are showed in Fig. 1.\nTheorem 1[7]. A simplified X3SAT formula contains no 1-clauses or 2-clauses, and no two clauses have more than one variable in common; no clause has more than one singleton; all (a, 0)-literals and (a, 1)-literals that are not singletons are in a clause with no singletons.\nTheorem 2. If a X3SAT formula contains clauses C1= x  y1  y2, C2= x  y3  y4, and C3= y1  y3  z1 where y1 is a (1, 1) - literal, then F = F ((C1  C3)  ( y4  y2  z1)) and (x) = (x)-1.\nProof. If a X3SAT formula contains clauses C1= x  y1  y2, C2= x  y3  y4, and C3= y1  y3  z1, then F = F (C3 ( y4  y2  z1)) by (TR9). Since y1 is a (1, 1) - literal,  y1 is removed by (TR9). Thus, y1 is a singleton in F. If a X3SAT formula contains clauses C1= x  y1  y2, C2= x  y3  y4, and C3= y4  y2  z1, then we can apply (TR11) and obtain F = F / C1. Therefore, F = F ((C1  C3)  ( y4  y2  z1)) and  (x) = (x)-1. \nTheorem 3. When X3SAT formula F contains a clause y'1  y3  z1 and a (2, 1) \u2013 literal x, the formula F can be simplified and the literal x becomes a (2, 0) \u2013 literal.\nProof. Since x is a (2, 1) \u2013 literal, F contains clauses C2= x  y3  y4 and C3=  x  y'1  y'2. Then we can apply (TR9) to (y'1  y3  z1), (x  y3  y4), and (  x  y'1  y'2), which can transform F to contain (  z1  y4  y'2) instead of ( x  y'1  y'2). Therefore, F can be simplified and the literal x becomes a (2, 0) \u2013 literal. \nTheorem 4. When X3SAT formula F contains a (3, 0) \u2013 literal x, a singleton y4, and a clause y1  y3  z1, the formula F can be simplified and the literal x becomes a (2, 0) \u2013 literal.\nProof. If x is a (3, 0) \u2013 literal, the formula F contains clauses C1= x  y1  y2 and C2= x  y3  y4. Using the (TR12) on (x  y1  y2), (x  y3  y4), and (y1  y3  z1) where y4 is a singleton, we can replace (x  y3  y4) by ( y2  y3  y4). Therefore, the formula F can be simplified and the literal x becomes a (2, 0) \u2013 literal. "}, {"heading": "3.2 Helper Principle", "text": "In this subsection, we concentrate on introducing the connected-clauses principle. Before presenting the details, we specify some notions used in this part. Given a simplified X3SAT formula F in CNF, F can be expressed as an undirected graph called connection graph. In the connection graph, the vertexes are the clauses of F and the edges between two vertexes if the corresponding clauses contain the same literal. We say that the clause C is connected with C' if there is an edge connecting the corresponding vertexes in the connection graph. We call such two clauses the connected clauses. The character of connected clauses is showed in the following theorem.\nTheorem 5. For any two connected clauses C1 and C2, there is only one edge connecting the corresponding vertexes in the connection graph.\nProof. In order to prove there is only one edge connecting the corresponding vertexes in the connection graph, we need to prove that C1 and C2 have only one common literal. By (TR2) and (TR3) we know that each clause has exactly three literal in a simplified X3SAT formula. If two clauses have common variables, the common variables must form the same literals based on (TR7) and (TR8). According to (TR13), there is at most only one common literal in any two clauses. Therefore, for any two connected clauses, there is only one edge connecting the corresponding vertexes in\nthe connection graph. \nLet us start to propose the connected-clauses principle. Suppose a connection graph G can be partitioned into two components G1 and G2 where there is only one edge l connecting a vertex in G1 to a vertex in G2, i.e. the formula F corresponding to G is partitioned into two sub-formulae F1 and F2 corresponding to the two components with only one common literal l. Then, we can determine the satisfiability of the X3SAT formula F as follows.\nF= ((F1  l)  (F2  l))  ((F1   l)  (F2   l)) (8)\nThe aim of this principle is to partition the formula F into two sub-formulae. When F1 contains a small number of clauses, it can be solved by exhaustive search in polynomial time. This allows us to remove F1 from F and therefore reduce as many clauses as possible in both branches. The following theorem states that the principle in sound.\nTheorem 6. The connected-clauses principle is sound.\nProof. To prove that the connected-clauses principle is sound, we just to prove after applying the connected-clauses principle do not change the satisfiability of the original formula. Suppose a connection graph G can be partitioned into two components G1 and G2 where there is only one edge l connecting a vertex in G1 to a vertex in G2, i.e. the formula F corresponding to G is partitioned into two subformulae F1 and F2 corresponding to the two components with only one common\nliteral l. Then after applying the connected-clauses principle to the formula F, the formula F can be partitioned into two formulae F1 and F2.\nSuppose F is satisfiable. Consider a satisfying assignment I for F. It is obvious that in the satisfying assignment the literal l either true or false. We assume that the literal l is fixed true. Then the satisfying assignment for F consists of a satisfying assignment for F1  l and a satisfying assignment for F2  l. The similar situation is encountered when l is fixed false.\nOn the contrary, every satisfying assignment for F1  l (resp. F1   l) can combine with every satisfying assignment for F2  l (resp. F1   l), both of which have an assignment true (resp. false) for l. The combining satisfying assignments are indeed the satisfying assignments for F which has an assignment true (false) for l.\nTherefore, the connected-clauses principle is sound. "}, {"heading": "3.3 Algorithm X3SAT for Solving Exact 3SAT", "text": "The algorithm X3SAT for exact 3SAT is based on the DPLL algorithm. The basic idea of the algorithm is to choose a variable and recursively determine whether the formula is satisfiable or not when variable is true or false. Before presenting the algorithm X3SAT, we address a function (F, l) in Fig. 2, which recursively executes the propagation. The function takes a formula F and a literal x being assigned true as input. The detailed process of the function is presented as follows. (1) Remove all clauses containing literal x from F; (2) delete all literals occurring with x from the other clauses; (3) delete all occurrences of the negation of literal x from F; (4) perform the process as far as possible.\nNow let us start to describe the framework of our algorithm X3SAT in Fig. 3. The algorithm employs a new principle, i.e. the connected-clauses principle, to simplify formulae. It takes a simplified X3SAT formula F as the input. Note that in the algorithm ESX3SAT(F) is a function that solves the X3SAT by exhaustive search. As we all know, if a X3SAT instance is solved by exhaustive search, it will spend a lot of time. However, when the number of clauses that the formula F contains is so few, it may run in polynomial time. Therefore, we use the function ESX3SAT(F) only when the number of clauses isn\u2019t above 5, which can guarantee the exhaustive search runs in polynomial time. Prefect_Matching(F) is also a function that reduces the X3SAT instance to a perfect matching problem when (F)  2, and this can be solved in\npolynomial time [11]. In Theorem 7, we analyze the algorithm X3SAT using the measure described above.\nTheorem 7. Algorithm X3SAT runs in O(1.15855 m ) time, where m is the number of the clauses.\nProof. Let us analyze the algorithm case by case.\nCase 1, 2 and 3 can solve the instances completely and run in O(1). Case 4 doesn\u2019t increase the time needed.\nCase 5: When x=true, every clause containing x is removed and x is removed from clauses. More over, every clause containing x shrinks to 2-clause which can be removed by (TR3). Therefore, the current formula contains at least four clauses less than F and the same situation is encountered when x=false. In addition, when x is fixed a value, the clauses containing the literals in Y can be also removed. Now we let R= NumC(F, N(x)) and R'= NumC(F, N( x)).Then we have T(m) = T(m-4-R)+ T(m4- R'). By Theorem 1, we know that at least four literals in Y occur in other clauses. So we obtain R+ R'  2. Therefore, the worst case is when T(m)=T(m-6)+T(m-4) with solution O(1.15096 m ).\nCase 6.1.1: When z1 is a singleton, the formula F can be partitioned into two formulae F1= C1  C2  C3  C4 and F2=F/F1 with only one common literal y'1. By the connected-clauses principle, we branch on the common literal y'1. We know that when the number of clauses that a formula contains is less than 6, the formula can be solved by exhaustive search. This means that the formula F1 can be solved in polynomial time. And when y'1is fixed a value, at least one clause containing y'1 is removed from the formula F2. So the current formulae contain at least five clauses less than F in both of the branches. Therefore, we have T(m)=T(m-5)+ T(m-5) with solution O(1.14870 m ).\nCase 6.1.2: In this case, the y\u2019s literals in C4 must be unnegated based on Theorem 2. Thus, when x=true, every clause containing x or z1 is removed and every clause containing x or  z1 is also removed by (TR3). Since var(z1) occurs at least twice and var(x) occurs three times in F, the current formula contains at least five clauses less than F. When x=false, every clause containing var(x) or var(y'1) can be removed, which make y1and y3 become singletons. So clause C4 can be removed by (TR6). Therefore, the worst case is when T(m)=T(m-5)+T(m-5) with solution O(1.14870 m ).\nCase 6.1.3: This case is similar to the case 6.1.1. So the current formula contains at least five clauses less than F in both of the branches. Therefore, we have T(m)=T(m5)+ T(m-5) with solution O(1.14870 m ).\nCase 6.1.4: In this case, at least one of the y\u2019s literals in C5 must be negated based on Theorem 3. If we give true to x, at least four clauses containing var(x) or var(y1), are removed. And simultaneously other clauses containing var(z3) are removed. As we know, z3 is not a singleton and this means that var(z1) occurs at least twice. So the current formula contains at least six clauses less than F. When x=false, at least four clauses containing var(x) or var(y'1) are removed. Therefore, the worst case is when T(m)=T(m-6)+T(m-4) with solution O(1.15096 m ).\nCase 6.1.5: Due to previous cases, we know that C4 and C5 both contain at least two y\u2019s literals. When x=true, every clause containing x or yi (1  i  4) is removed. When x=false, every clause containing  x or y'j (1  j  2) is removed. In addition, by Theorem 3, at least one of the y\u2019s literals in the clause C4 or C5 with y'j (1  j  2) must be negated and therefore at least two clauses containing literals in Z can be also removed. Thus, it follows that T(m)=T(m-6)+T(m-4) with solution O(1.15096 m ).\nCase 6.2: Let us assume that R= NumC(F, N(x)) and R'= NumC(F, N( x)). Since  (x)=3, the current formula contains at least three clauses less than F when x is fixed\na value. Furthermore, when x=true, yi=false (1  i  4) and the clauses containing yi (1  i  4) are removed by (TR3). The time needed in this case is thus bounded by T(m) = T(m-3-R)+ T(m-3-R') since exactly the similar situation arises when x is given the value false. It is easy to see that R  1 and R'  1 for there are three or more clauses\nconnect with C1~ C3. Moreover, at least four literals in Y occur in the three or more clauses by Theorem 1. Consequently, R + R'  4 and the worst case occurs when R =3, R'=1. Therefore, The time needed in this case is bounded by T(m)=T(m-6)+T(m-4) and T(m)O(1.15096 m ).\nCase 7: If x is a (3, 0)-literal, at least four variables in Y1 must occur in other clauses by Theorem 1. And if F contains an unnegated and negated variable, it must be (1, 1)-literal, otherwise, the (2, 1)-literal case is met. Therefore, there are at least two clauses connected with C1~ C3. In the following, we analyze the complexity from three cases. (1) Two clauses C4 and C5 connect with C1~ C3. If F contains a clause with three variables in Y1, then x must be given the value false. Otherwise, F can be simplified by Theorem 2 and 4. Therefore, the case (1) can be solved in O(1). (2) Three clauses C4, C5, and C6 connect with C1~ C3. Similarly, when F contains a clause with three variables in Y1, the formula F can be solved in O(1). When Ci (4  i  6) contains two y\u2019s literals, the literals must be unnegated according to Theorem 2 and 4. So when each clause Ci (4  i  6) contains two y\u2019s literals, we branch on x. If x=true, three clauses containing x are removed and three clauses containing y\u2019s variables are also removed. If x=false, we substitute  y2 for y1; substitute  y4 for y3; and substitute y6 for y5. Consequently, we obtain a formula F contains ( y2   y4  z1), (y2   y6  z2), and (y6  y4  z3). It is easy to see that the three clauses can be removed by (TR10). And when there is a clause containing only one y\u2019s literal, the clause can be removed by (TR6 and TR4) when x=false. Therefore, The time needed in this case is bounded by T(m)=T(m-6)+T(m-4) and T(m)O(1.15096 m ). (3) Four or more clauses connect with C1~ C3. In this case, we branch on x. When x is fix a value, the clauses containing x are removed. And the clauses containing y\u2019s variables are removed when x=true. Therefore, this case is bounded by T(m)=T(m-7)+T(m-3) and takes O(1.15855 m ) time.\nCase 8: This case can solve the problems completely and run in O(1). In total, algorithm X3SAT runs in O(1.15855 m ) time, where m is the number of the\nclauses. "}, {"heading": "5 Conclusion", "text": "This paper addresses the worst-case upper bound for the X3SAT problem with the number of clauses as the parameter. The algorithm presented is a DPLL-style algorithm. In order to improve the algorithms, we put forward a new connectedclauses principle to simplify the formulae. After a skillful analysis of these algorithms, we obtain the worst-case upper bound O(1.15855 m ) for X3SAT."}, {"heading": "Acknowledgments", "text": "This research is fully supported by the National Natural Science Foundation of China under Grant No.60803102, and also funded by NSFC Major Research Program 60496321: Basic Theory and Core Techniques of Non Canonical Knowledge."}], "references": [{"title": "The Complexity of Satisfiability Problems", "author": ["T.J. Schaefer"], "venue": "10th annual ACM symposium on Theory of computing, pp. 216\u2013226,", "citeRegEx": "1", "shortCiteRegEx": null, "year": 1978}, {"title": "Faster Exact Solutions for Some NP-hard Problems", "author": ["L. Drori", "D. Peleg"], "venue": "Theoretical Computer Science 287(2), 473\u2013499", "citeRegEx": "2", "shortCiteRegEx": null, "year": 2002}, {"title": "X3SAT is Decidable in time O(2)", "author": ["S. Porschen", "B. Randerath", "E. Speckenmeyer"], "venue": "Fifth International Symposium on the Theory and Applications of Satisfiability Testing, pp. 231-235, Springer, Heidelberg", "citeRegEx": "3", "shortCiteRegEx": null, "year": 2002}, {"title": "Exact 3-Satisfiability is Decidable in time O(2)", "author": ["S. Porschen", "B. Randerath", "E. Speckenmeyer"], "venue": "Manuscript, June 2002. Annals of Mathematics and Artificial Intelligence 43(1) 173\u2013193", "citeRegEx": "4", "shortCiteRegEx": null, "year": 2005}, {"title": "An Upper Bound O(2) for Exact 3-Satisfiability: a Simpler Proof", "author": ["A.S. Kulikov"], "venue": "Zapiski nauchnyh seminarov POMI 293, 118\u2013128", "citeRegEx": "5", "shortCiteRegEx": null, "year": 2002}, {"title": "Algorithms for Four Variants of the Exact Satisfiability Problem", "author": ["V. Dahll\u00f6f", "P. Jonsson", "R. Beigel"], "venue": "Theoretical Computer Science", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2004}, {"title": "New Algorithms for Exact Satisfiability", "author": ["J.M. Byskov", "B.A. Madsen", "B. Skjernaa"], "venue": "Theoretical Computer Science 332(1-3), 515-541", "citeRegEx": "7", "shortCiteRegEx": null, "year": 2005}, {"title": "Exact Algorithms for Variants of Satisfiability and Colouring Problems", "author": ["B. Skjernaa"], "venue": "PhD thesis, Department of Computer Science, Aarhus University", "citeRegEx": "8", "shortCiteRegEx": null, "year": 2004}, {"title": "An Algorithm for Exact Satisfiability Analysed with the Number of Clauses as Parameter", "author": ["A.M. Bolette"], "venue": "Information Processing Letters 97(1), 28-30", "citeRegEx": "9", "shortCiteRegEx": null, "year": 2006}, {"title": "New Worst-Case Upper Bounds for SAT", "author": ["E.A. Hirsch"], "venue": "J. Auto. Reasoning 24(4), 397-420", "citeRegEx": "10", "shortCiteRegEx": null, "year": 2000}, {"title": "Upper Bounds for Covering Problems", "author": ["B. Monien", "E. Speckenmeyer", "O. Vornberger"], "venue": "Methods Oper. Res", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 1981}, {"title": "New Worst-Case Upper Bound for #2-SAT and #3-SAT with the Number of Clauses as the Parameter", "author": ["Junping Zhou", "Minghao Yin", "Chunguang Zhou"], "venue": "Proceedings of AAAI,", "citeRegEx": "12", "shortCiteRegEx": null, "year": 2010}], "referenceMentions": [{"referenceID": 0, "context": "In fact, X3SAT is also a NPcomplete problem even when restricted to all variables occurring only unnegated [1].", "startOffset": 107, "endOffset": 110}, {"referenceID": 1, "context": "1545 n ) for X3SAT, where n is the number of the variables [2].", "startOffset": 59, "endOffset": 62}, {"referenceID": 2, "context": "1487 n ) [3].", "startOffset": 9, "endOffset": 12}, {"referenceID": 3, "context": "1926 n )) [4].", "startOffset": 10, "endOffset": 13}, {"referenceID": 4, "context": "By providing a new transformation rule, Kulikov [5] simplified the proof of the bound for X3SAT (O(1.", "startOffset": 48, "endOffset": 51}, {"referenceID": 3, "context": "[4].", "startOffset": 0, "endOffset": 3}, {"referenceID": 5, "context": "1120 n ) for X3SAT [6].", "startOffset": 19, "endOffset": 22}, {"referenceID": 6, "context": "Further improved algorithms in [7] presented a new upper time bound for the X3SAT (O(1.", "startOffset": 31, "endOffset": 34}, {"referenceID": 7, "context": "Different from complexity analyses regarding the number of variables as the parameter, Skjernaa presented an algorithm for XSAT with a time bound O(2 m ) but using exponential space, where m is the number of clauses of a formula [8].", "startOffset": 229, "endOffset": 232}, {"referenceID": 8, "context": "Bolette addressed an algorithm for XSAT with polynomial space usage and a time bound O(m!) [9].", "startOffset": 91, "endOffset": 94}, {"referenceID": 9, "context": "The branching tree is a hierarchical tree structure with a set of nodes, each of which is labeled with a formula [10].", "startOffset": 113, "endOffset": 117}, {"referenceID": 6, "context": "In the following, we present the transformation rules (TR1) (TR14) which are also used by [7].", "startOffset": 90, "endOffset": 93}, {"referenceID": 6, "context": "Theorem 1[7].", "startOffset": 9, "endOffset": 12}, {"referenceID": 10, "context": "polynomial time [11].", "startOffset": 16, "endOffset": 20}], "year": 2011, "abstractText": "The rigorous theoretical analyses of algorithms for exact 3satisfiability (X3SAT) have been proposed in the literature. As we know, previous algorithms for solving X3SAT have been analyzed only regarding the number of variables as the parameter. However, the time complexity for solving X3SAT instances depends not only on the number of variables, but also on the number of clauses. Therefore, it is significant to exploit the time complexity from the other point of view, i.e. the number of clauses. In this paper, we present algorithms for solving X3SAT with rigorous complexity analyses using the number of clauses as the parameter. By analyzing the algorithms, we obtain the new worst-case upper bounds O(1.15855), where m is the number of clauses.", "creator": "Microsoft\u00ae Office Word 2007"}}}