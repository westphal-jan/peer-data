{"id": "1105.6148", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "31-May-2011", "title": "Overcoming Misleads In Logic Programs by Redefining Negation", "abstract": "concerning negation as failure and incomplete information in logic programs have been studied by many researchers in settings order to explains how a negated desired conclusion was reached, we introduce and proof a different way for negating facts referred to overcoming misleads in logic programs. negating facts can be achieved by properly asking the user correctly for constants that don't appear elsewhere in the knowledge evaluation base.", "histories": [["v1", "Tue, 31 May 2011 02:19:21 GMT  (154kb)", "http://arxiv.org/abs/1105.6148v1", "8 pages, 1 figure"], ["v2", "Mon, 4 Mar 2013 23:40:11 GMT  (188kb)", "http://arxiv.org/abs/1105.6148v2", "8 pages, 1 figure"]], "COMMENTS": "8 pages, 1 figure", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["m a el-dosuky", "t t hamza", "m z rashad", "a h naguib"], "accepted": false, "id": "1105.6148"}, "pdf": {"name": "1105.6148.pdf", "metadata": {"source": "CRF", "title": "Overcoming Misleads In Logic Programs by Redefining Negation", "authors": ["M. A. El-Dosuky", "T. T. Hamza", "M. Z. Rashad", "A. H. Naguib"], "emails": ["mouh_sal_010@mans.edu.eg"], "sections": [{"heading": null, "text": "Overcoming Misleads In Logic Programs by Redefining Negation M. A. El-Dosuky a, T. T. Hamza a , M. Z. Rashad a and A. H. Naguib b\na Faculty of Computers and Information sciences, Mansoura University, Egypt E-mail: mouh_sal_010@mans.edu.eg\nb Faculty of Sciences, Mansoura University, Egypt\nKeywords: logic programming, negation as failure, incomplete information, justification"}, {"heading": "1. Introduction", "text": "Negation as failure and incomplete information in logic programs have been studied by many researchers, mainly because of their role in the foundations of declarative reading of logic programming. This paper gives a review of some of the definitions of the concepts related to of the declarative reading of logic programming. Then, the paper provides a framework to overcome misleads and to solve a misleading case study. The paper begins with reviewing the relevant work of contributions to logic programming emphasizing many concepts such as negation as failure, closed world assumption, incomplete information, and their consequences (Section 2). Then we comment on the standard definitions of the relevant logic programming concepts such as: compound terms, substitution, common instance, facts, rules, reduction, variables quantification, unifier, Most General Unifier (MGU), computation, and structured data (Section 3). Then we briefly discuss the semantics of logic programming. A logic program can have many semantics according the point of view. The common semantics are operational, denotational, and declarative (Section 4). Then we present our framework for overcoming misleads in logic programs using negation as invalid (Section 5). Then we investigate the features of the presented framework in the next section."}, {"heading": "2. Related work", "text": "Different research communities have investigated various aspects of the declarative readings of logic programming. Logic programming languages are a great tool for knowledge representation. The main non-monotonic feature is Negation As Failure [Clark1978] . It enables to express knowledge not readily expressible in classical logic. However, these languages cannot directly represent incomplete knowledge about the world. A consistent classical theory distinguishes between three types of sentences : provable, refutable, and undecidable. However, a logic program answers either yes or no, with no counterpart for undecidable sentences which represent the incompleteness of information. The reason for this is due to the declarative semantics of logic programming automatically applies the closed world assumption [Reiter1978]. It states that each ground atom that does not follow from the facts in the program is assumed to be false. The causal logic [Bochman 2004] is shown to make any causal logic program satisfies the Negation As Default principle (alias Closed World Assumption). Many attempts are made to allow for the correct representation of incomplete information. The first is probably due to Jack Minker [Minker1982] . Another attempt is to expand the language of logic programs with classical negation as failure by modal operators K and M defined with details in [Gelfond1994]. For the set of rules T and formula F, KF stands for \"F is known to be true by a reasoner with a set of premises T\" and MF means \"F may be believed to be true\". Incomplete information can be captured by communicating other intelligent parities [Rosati2003]. This framework is well-suited for representing situations in which an agent cooperates in a team, and each agent is able to communicate his knowledge to other agents in the team. Logic programming \u2014 and negation as failure \u2014 has many declarative readings. One view is that logic programming is a logic for default reasoning. In this view, negation as failure is a modal operator. In an alternative view, a logic program is interpreted as a definition. In this view, negation as failure is the classical objective negation [Denecker 2000]. There is an epistemological ambiguity that arises in the context of logic programming [Denecker 2004]. There are several logic programming formalisms, each has a pair of a formal syntax and a formal semantics. [Denecker 2004] falsifies our assumptions that that each such pair has a unique declarative reading and for a program in several formal logics shall its declarative reading is the same in each of them.\nNegation as failure and incomplete information in logic programs have been studied by many researchers In order to explains HOW a negated conclusion was reached, we introduce and proof a different way for negating facts to overcoming misleads in logic programs. Negating facts can be achieved by asking the user for constants that do not appear elsewhere in the knowledge base."}, {"heading": "3. Preliminaries", "text": ""}, {"heading": "Definition: Facts", "text": "A relation between objects is called a predicate . A relation is summarized in a simple phrase called a fact that consists of the relation name followed by the object or objects (enclosed in parentheses) .The facts ends with a period (.). Facts can also express properties of objects as well as relations, depending on arity. Examples :\nA relation: Jack likes Sarah likes( jack , sarah) A property: Kermit is green green ( kermit)"}, {"heading": "Definition: Rules", "text": "Rules enable you to infer facts from other facts. A rule has two parts Head and Body Head <subgoal1>,<subgoal2> , \u2026 , <subgoalN> The body of the rule consists one or more sub-goals ."}, {"heading": "Definition: Compound terms", "text": "Compound terms have the form: f(t1,t2,\u2026.,tn). where f is called functor, ti is the arguments, and n is the arity. A functor looks like fact, but it is not a fact . It\u2019s just a data object, which you can handle in much the same way as a symbol or number. A functor does not stand for some computation to be performed. It\u2019s just a name that identifies a kind of compound data object and holds its arguments together. Example: successor(zero)"}, {"heading": "Definition: Structured Data", "text": "Structured data are constructed by grouping similar arguments of a fact and giving a name to that group. Facts are the counterpart of tables, while structured data corresponds to records with aggregate fields. Example:\nA fact about a lecture course on logic given on Monday from 9 to 11 by prof. Jack in the Victory building, room A, can be represented as course (logic, monday, 9, 11, jack, victory, a). Using structured data, we can define a four-argument version of this fact as course (logic, time(monday, 9, 11),lecturer(jack), location(victory, a)). In a logic language, commonly Prolog, you can do this by declaring a domain containing the compound object date. For example, declaring the time: time_compound = time (symbol, integer, integer) Using the concept of primary key, we can rewrite this fact in terms of binary relations, each takes a specific information and the course name as a primary key.\nday (logic, monday). start_time(logic, 9). finish_time(logic, 11). lecturer(logic, jack). building(logic, victory). room(logic, a).\nIt is possible to define a set of retrieval rules to check a specific piece of information within the fact. lecturer(Course, Lecturer) course (Course, Time, Lecturer, Location). duration (Course, Length)\ncourse (Course, time(Day, Start, Finish), Lecturer, Location), plus(Start, Length, Finish).\nteaches(Lecturer, Day) course (Course, time(Day, Start, Finish), Lecturer, Location)."}, {"heading": "Definition: Substitution", "text": "Substitution is a finite set of pairs of the form Xi = ti. Where: Xi is a variable and ti is a term. Note that Xi \u2260 Xj for every i \u2260 j and Xi does not occur in tj. Example: {X = jack}"}, {"heading": "Definition: common instance", "text": "C is a common instance of A and B if it is an instance of A and an instance of B. In other word, if there are substitutions \u03b81 and \u03b82 such that C=A\u03b81 is syntactically identical to B\u03b82 Example: A = plus(0, 3, Y) \u03b81 = {Y = 3}\nB = plus(0, X, X) \u03b82 = {X = 3} C = plus(0, 3, 3)"}, {"heading": "Definition: Reduction", "text": "A reduction of goal G by a program P is the replacement of G by the body of an instance of a clause in P, whose head is identical to the chosen goal. Example: the goal grandparent(abraham, X)? Can be reduced to parent (abraham, Y), parent(Y, X) with respect to the clause : grandparent(Z, X) parent (Z, Y), parent(Y, X). Definition: Variables quantification Variables in queries are existentially quantified, while in facts are universally quantified. A query p(T1,T2,\u2026,Tn)? , which contain the variables X1,X2, ..., Xk reads: \"Are there X1,X2, ..., Xk such that p(T1,T2,..., Tn)? \" usually, existential quantification is usually omitted. Example: the query father (abraham, X)? reads : \"Does there exist an X such that abraham is the father of X ? \" A fact p(T1,T2,\u2026,Tn) reads : \"For all X1,X2, ..., Xk ,where Xi are the variables occurring in the fact p(T1,T2,..., Tn) , is true \". Logically, from a universally quantified fact one can deduce any instance of it. Example: From likes(X, apple) , deduce likes (abraham, apple)"}, {"heading": "Definition: Most General Unifier (MGU)", "text": "A unifier of two terms is a substitution making the terms identical. If two terms have a unifier, we say they unify. MGU of two terms is a unifier such that the associated common instance is most general. If two terms unify, all MGUs are equivalent."}, {"heading": "Definition: Computation", "text": "a computation of a goal Q= Q0 by a program P is a sequence of triples (Qi, Gi, Ci) . where : Qi is a conjunctive goal, Gi is a goal occurring in Qi, and Ci is a clause A B1,\u2026, Bk in P, that contains new variables not occurring in Qj, 0\u2264j\u2264i. For a detailed introductory discussion please refer to ([Sterling& Shapiro 1994] and [Bochman1998]). 4.Semantics of Logic Programs A logic program can have many semantics according the point of view. The common semantics are operational, denotational, and declarative. The operational semantics of logic programs are considered a way of describing the meaning of the programs procedurally. It is a set of ground goals that are instances of queries solved by a logic program P using abstract interpretation as shown in section 4.1. The declarative semantics of logic programs are derived from the term model, referred to as the Herbrand base. The declarative semantics is discussed in section 4.2. The denotational semantics of logic programs are defined in terms of a function which assigns meaning to the program. The function is over the domain computed by the program. Meaning is defined as the least fixpoint of the function, if it exists. The denotational semantics is out of concern of this paper, since Kowalski's famous slogan \"Algorithms= Logic + Control\" [Kowalski1979] implies that declarative logic statements can be interpreted as procedural computer instructions. We presume that declarative and operational semantics are sufficient to reflect the algorithm of a logic program."}, {"heading": "4.1. Interpreting logic programs", "text": "In the next, we show the algorithm of an abstract interpreter for logic programs. It is used to construct the operational semantics for a logic program. Note that this algorithm depends on unify function which is mentioned in line 5. This function is defined by the Unification algorithm. Abstract interpreter for logic programs Input: a goal G and a program P Output: an instance of G that is a logical consequence of P, or no otherwise. Algorithm:\n1 2 3 4 5 6 7 8 9\ninitialize the resolvent to G. while the resolvent is not empty do choose a goal A from the resolvent choose a (renamed) clause A\u2019 B1, \u2026, Bn from P\nsuch that A and A\u2019 unify with MGU \u0398. (if no such goal and clause exist, exit the while loop)\nreplace A by B1, \u2026, Bn in the resolvent apply \u0398 to the resolvent and to G if the resolvent is empty, then output G, else output no."}, {"heading": "Unification algorithm", "text": "Input: two terms T1 and T2 to be unified Output: \u0398, the MGU of T1 and T2, or failure Algorithm:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\nInitialize the substitution \u0398 to be empty, Initialize the stack to contain the equation T1 = T2, Initialize failure to false. while stack not empty and no failure do pop X = Y from the stack case X is a variable that does not occur in Y: substitute Y for X in the stack and in \u0398 add X = Y to \u0398 Y is a variable that does not occur in X: substitute X for Y in the stack and in \u0398 add Y = X to \u0398 X and Y are identical constants or variables: continue X is f(X1, \u2026, Xn) and Y is f(Y1, \u2026, Yn) for some functor f and n > 0: push Xi = Yi, i = 1 \u2026 n, on the stack otherwise: failure is true if failure, then output failure else output \u0398\nTracing a logic program is a good way for capturing its declarative meaning. A trace of a computation of logic program (Qi, Gi, Ci) is a sequence of pairs (Gi, \u0398i'), where \u0398i' is the subset of mgu \u0398i computed at the ith reduction, restricted to variables in Gi . The meaning of a logic program is a set of ground deducible from the program. Example: tracing the appending of two lists.\nappend([ ], Ys, Ys). append([X|Xs],Ys,[X|Zs]) append(Xs,Ys,Zs). Trace:\nappend ([a, b], [c, d], Ls) Ls = [a|Zs] append([b], [c, d], Zs) Zs = [b|Zs1] append([], [c, d], Zs1) Zs1 = [c, d] true output: Ls = [a, b, c, d]"}, {"heading": "Implementation of Negation as failure", "text": "Negation as failure is implemented as not predicate. It is a meta-logical predicate, which means that it takes predicates as its argument. To implement not predicate, cut and fail predicates are used as follows : not(X) :- X, !, fail. not(X). Fail always fails when the search reaches it. It corresponds to any impossible condition as 2=3. Cut, denoted !, always succeeds when the search reaches it. Cut is procedural and cannot be understood in nonprocedural terms. Cuts can be useful for reducing the search space of a program [Colmerauer& Roussel1996]."}, {"heading": "Dynamic Database", "text": "The bottleneck of any system written in Prolog is the knowledge base (dynamic database). An internal database is composed of facts that you can add directly into and remove from program at run time. There are three predicates to add a single fact at runtime:\n\u2022 asserta asserts a new fact before the existing facts for the predicate, \u2022 assertz asserts a new fact after the existing facts for that predicate \u2022 assert behaves like assertz.\nTo remove facts from the databases. retract can be used with the form: retract(<the fact> ) Retract will remove the first fact in the database that matches <the fact>, instantiating any free variables in <the fact>. For a detailed review for interpreting logic programs, you can refer to ([Sterling& Shapiro 1994] , [Colmerauer1985] , and [Krzysztof1996])."}, {"heading": "4.2. Declarative reading of logic programs", "text": "One feature of the declarative reading of logic programs that makes it very useful is the justification and explanation of HOW and WHY this semantics characterizes this declarative reading [Denecker 2000]. Explanation is an important facility provided by expert systems [Merritt1989]. The system must be able to explain HOW it arrived a conclusion and WHY it is performing some computation. To answer how a conclusion was reached, work back through the inference chain. To answer why a computation is being performed, the system must state its current goal. Figure 1 applies this concept on a simple rule. Decision 1 was made true because Facts 1, 2, 3 are true. The system may ask the user if fact 3 is true, because it is trying to determine if decision 1 should be made.\nDefinition: Interpretation Let P be a logic program. Let U(P) be Herbrand Universe of P and B(P) be Herbrand Base of P. U(P) is the set of all ground terms that can be formed from the constants and function symbols appearing in P. B(P) is the set of all ground goals that can be formed from predicates in P and the terms in the Herbrand universe. An interpretation of a logic program is a subset of the Herband base. For a review for the famous Herbrand theorem and new sequent forms of Herbrand theorem and their applications, you can refer to [Lyaletski2006]."}, {"heading": "Definition: Model", "text": "Let P be a logic program. Let I be an interpretation. I is a model for P if for each ground instance of a clause A B1, \u2026, Bn in P A is in I if B1, \u2026, Bn are in I."}, {"heading": "Definition: Minimal Model", "text": "Let P be a logic program. Let M(P) be minimal model of P. M(P) is the intersection of all models. The minimal model is the declarative meaning of a logic program"}, {"heading": "Definition: Mapping", "text": "Let P be a logic program. Let TP be natural mapping from interpretations to interpretations. TP(I) = { A in B(P) : A B1, \u2026, Bn, n \u2265 0, is a ground instance of a clause in P, and B1, \u2026, Bn are in I}. Definition: Intended meaning Let P be a logic program. Let M be the intended meaning of P. M is a set of ground goals intended by programmer for the program to compute. Definition: Correctness Let P be a logic program. Let M be the intended meaning of P. P is correct with respect to M if M(P) is contained in M."}, {"heading": "Definition: Completeness", "text": "Let P be a logic program. Let M be the intended meaning of P. P is complete with respect to M if M is contained in M(P). For a comprehensive review for declarative reading of logic programs, you can refer to ([Sterling& Shapiro 1994] , [Lyaletski2006] , and [Denecker 2000])."}, {"heading": "5. Overcoming Misleads In Logic Programs by Redefining Negation", "text": ""}, {"heading": "5.1 Motivation", "text": "Sometimes it is very hard to explain HOW a negated conclusion was reached. Consider the following verbal problem [Dow&Mayer 2004]:\nMarsha and Marjorie were born on the same day of the same month of the same year to the same mother and the same father yet they are not twins. How is that possible?\nTo represent that Marsha and Marjorie were born on the same day of the same month of the same year to the same mother and the same father we can use the person predicate as follows:\nperson(marsha, father1, mother1, month1, year1), person(marjorie, father1, mother1, month1, year1).\nTo represent that twins were born on the same day of the same month of the same year to the same mother and the same father we can use the twin predicate as follows\ntwin (A,B) person(A, Father, Mother, Month, Year), person(B, Father, Mother, Month, Year).\nBy tracing the goal of not being twins as the given example in section 4.1 goal not(twin (marsha, marjorie)) we reach a conclusion of No. There is no way to explain HOW they are not twins, because of the contradicting definition of twin predicate. We need another representation that can provide an explanation for not being twins."}, {"heading": "5.2 Methodology", "text": "In this section we provide and prove the key properties of our framework to explain HOW a negated conclusion can be reached. But first, let us review some important inference rules."}, {"heading": "Definition: Skolemization", "text": "Skolemization is a way of eliminating existential quantifiers. Variables bound by existential quantifiers not inside the scope of universal quantifiers can be replaced by constants. Example: \u2203x[x<5] can be changed to c<5, with c a suitable constant according to existential instantiation. For a review for the famous Skolemization and you can refer to ([B\u00fcrckert, et al 1996] and [Skolem1970])."}, {"heading": "Definition: Existential Instantiation", "text": "For any sentence a, variable v , and constant symbol k that does not appear elsewhere in the knowledge base:\n\u03b1), } / { SUBST( \u03b1 kv v\u2203\nFor example, from \u2203 x Kill(x, Victim), we can infer Kill(Murderer, Victim), as long as Murderer does not appear elsewhere in the knowledge base [Russel&Norvig 2003]. Theorem Negating facts can be achieved by asking the user for constants that do not appear elsewhere in the knowledge base Proof As noted in section 3, variables in facts are universally quantified, so a fact p(x1,\u2026,xn, t1,\u2026,tm) actually means :\n\u2200x1\u2026\u2200xn p(x1,\u2026,xn, t1,\u2026,tm) where x1..xn are variables and t1 .. tm are terms. Negating the fact using De Morgan Laws\n\u00ac\u2200x1\u2026\u2200xn p(x1,\u2026,xn, t1,\u2026,tm) \u2261 \u2203x1\u2026\u2203xn \u00ac p(x1,\u2026,xn, t1,\u2026,tm) Applying Skolemization to eliminate existentially quantified variables with constants. \u2203x1\u2026\u2203xn \u00ac p(x1,\u2026,xn, t1,\u2026,tm) \u2261 \u00ac p(c1,\u2026,cn, t1,\u2026,tm) By introducing another predicate s(n+1) with the form\ns(p, c1,\u2026,cn, t1,\u2026,tm) \u2261 p(c1,\u2026,cn, t1,\u2026,tm) So \u2203x1\u2026\u2203xn \u00ac p(x1,\u2026,xn, t1,\u2026,tm) \u2261 \u00ac p(c1,\u2026,cn, t1,\u2026,tm) \u2261 s(\u00acp, c1,\u2026,cn, t1,\u2026,tm) To ensure that constants c1,\u2026,cn do not appear elsewhere in the knowledge base, we rely on asking the user for them and remembering the answer as described in the next section."}, {"heading": "5.3 Asking the user and Remembering the answer", "text": "The ask predicate [Merritt1989] will have to determine from the user whether or not a given attribute-value pair is true for a specific person. A new predicate, known is used to remember the user's answers to questions. It is not specified directly in the program, but rather is dynamically asserted whenever ask gets\nnew information from the user. Every time ask is called it first checks to see if the answer is already known to be yes or no. If it is not already known, then ask will assert it after it gets a response from the user. The arguments to known are: yes/no, attribute, person, and value. Our new version of ask looks like: ask(A, P, V) known(yes, A, P, V), !. % succeed if true and stop looking ask(A, P, V) known(_,A, P, V), !, fail. % fail if false ask(A, P, V) write(A, \" of person \", P, \" is \", V, \" ? \"), readln(Y), % get the answer asserta(known(Y, A, P, V)), % remember it Y = yes. % succeed or fail"}, {"heading": "5.4 Case study", "text": "Consider the verbal problem introduced in section 5.2 again. Using the concept of structured data we can define missing information to be anything that relate to the existing data and do not occur in the knowledge base. For example: consider \"family\" which can be derived from \"father\" and \"mother\". Also consider \"day\" which can be derived from \"month\" and \"year \". Now, any two persons who share father and mother can have different families or different birth date, so they are not twins. Another way is to add one or more new objects that do not occur in the knowledge base. Thus, any two persons who share father, mother and birth date can have another person with the same father, mother and birth date, so they are triplets not twins. The full corresponding PROLOG listing is shown below:\ndomains name, father, mother, month, year = symbol missing =country(symbol, symbol); family(symbol, symbol); day(symbol, symbol) predicates person(name, father, mother, month, year); person(name, father, mother, month, year, missing) state (symbol, name, name) clauses person(marsha, father1, mother1, month1, year1). person(marjorie, father1, mother1, month1,year1). state (twin, A,B) person(A, Father, Mother, Month, Year), person(B, Father, Mother, Month, Year). state (not_twin, A,B) person(A, Father, Mother, Month, Year, country(X, A)), person(B, Father, Mother, Month, Year, country(Y, B)). state (not_twin, A,B) person(A, Father, Mother, Month, Year, family(X, A)), person(B, Father, Mother, Month, Year, family (Y, B)). state (not_twin, A,B) person(A, Father, Mother, Month, Year, day(X, A)), person(B, Father, Mother, Month, Year, day (Y, B)). state (not_twin, A,B) person(A, Father, Mother, Month, Year), person(B, Father, Mother, Month, Year), person(C, Father, Mother, Month, Year).\nAny missing data can be acquired using the ask predicate as follows: country (X, P) ask(country, P, X). day (X,P) ask(day, P, X).\nperson(P, Father, Mother, Month, Year) ask if there is a person P of father Father, mother Mother, month Month, and year Year\nA trace of the goal state (not_twin, marsha, marjorie)? shows how Marsha and Marjorie can share the same father, mother and birth date but still not be twins as they have they have different families or different countries. Another way of explanation is that although they share father, mother and birth date, there is another person with the same father, mother and birth date, so they are triplets not twins."}, {"heading": "6. Conclusion and Future work", "text": "In order to explains HOW a negated conclusion was reached, we introduce negating facts in a different way. Negating facts can be achieved by asking the user for constants that do not appear elsewhere in the knowledge base. In future work, we aim to investigate efficient implementation in detail. We aim to introduce a predicate named not to automatically perform the labor required. Another promising direction for future research is to incorporate the negating methodology proposed in this paper into one of the several extensions to PROLOG. The resulting, more flexible support for representing negation may constitute an important step towards built-in support for overcoming misleads in logic programs and form a qualitative leap for introducing creativity to machines."}], "references": [{"title": "A logical foundation for logic programming, I and II, Journal of Logic Programming, pages 151\u2013194", "author": ["A. Bochman"], "venue": null, "citeRegEx": "Bochman,? \\Q1998\\E", "shortCiteRegEx": "Bochman", "year": 1998}, {"title": "A Causal Logic of Logic Programming", "author": ["A. Bochman"], "venue": "Proceedings of the Ninth International Conference", "citeRegEx": "Bochman,? \\Q2004\\E", "shortCiteRegEx": "Bochman", "year": 2004}, {"title": "\"On Skolemization in constrained logics", "author": ["B\u00fcrckert", "H.J. et al 1996] B\u00fcrckert", "B. Hollunder", "A. Laux"], "venue": "Annals of Mathematics and Artificial Intelligence ,", "citeRegEx": "B\u00fcrckert et al\\.,? \\Q1996\\E", "shortCiteRegEx": "B\u00fcrckert et al\\.", "year": 1996}, {"title": "Negation as failure", "author": ["K. Clark"], "venue": "In Herve Gallaire and Jack Minker, editors, Logic and Data Bases,", "citeRegEx": "Clark,? \\Q1978\\E", "shortCiteRegEx": "Clark", "year": 1978}, {"title": "Prolog in 10 Figures", "author": ["A. Colmerauer"], "venue": "Communications of the ACM,", "citeRegEx": "Colmerauer,? \\Q1985\\E", "shortCiteRegEx": "Colmerauer", "year": 1985}, {"title": "The birth of Prolog\", dans History of Programming Languages, edited by Thomas", "author": ["A. Colmerauer", "P. Roussel"], "venue": "ACM Press/Addison-Wesley,", "citeRegEx": "Colmerauer and Roussel,? \\Q1996\\E", "shortCiteRegEx": "Colmerauer and Roussel", "year": 1996}, {"title": "A note on the Declarative reading of Logic Programming", "author": ["M. Denecker"], "venue": "In Proc of AAAI-2000,", "citeRegEx": "Denecker,? \\Q2000\\E", "shortCiteRegEx": "Denecker", "year": 2000}, {"title": " What\u2019s in a Model? Epistemological Analysis of Logic Programming", "author": ["M. Denecker"], "venue": "In Proc of AAAI-2004,", "citeRegEx": "Denecker,? \\Q2004\\E", "shortCiteRegEx": "Denecker", "year": 2004}, {"title": "Teaching students to solve insight problems. Evidence for domain specificity in training", "author": ["Dow", "G.T. Mayer 2004] Dow", "R.E. Mayer"], "venue": "Creativity Research Journal,", "citeRegEx": "Dow et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Dow et al\\.", "year": 2004}, {"title": "Logic Programming and Reasoning with Incomplete Information'", "author": ["M. Gelfond"], "venue": "Annals of Mathematics and Artificial Intelligence,", "citeRegEx": "Gelfond,? \\Q1994\\E", "shortCiteRegEx": "Gelfond", "year": 1994}, {"title": "From Logic Programming to Prolog", "author": ["R. Krzysztof"], "venue": "Prentice Hall; 1st Ed,", "citeRegEx": "Krzysztof,? \\Q1996\\E", "shortCiteRegEx": "Krzysztof", "year": 1996}, {"title": "Sequent forms of Herbrand theorem and their applications", "author": ["A. Lyaletski"], "venue": "Annals of Mathematics and Artificial Intelligence", "citeRegEx": "Lyaletski,? \\Q2006\\E", "shortCiteRegEx": "Lyaletski", "year": 2006}, {"title": "On indenite data bases and the closed world assumption", "author": ["J. Minker"], "venue": "In Proc of CADE-82,", "citeRegEx": "Minker,? \\Q1982\\E", "shortCiteRegEx": "Minker", "year": 1982}, {"title": "On closed world data bases", "author": ["R. Reiter"], "venue": "Logic and Data Bases,", "citeRegEx": "Reiter,? \\Q1978\\E", "shortCiteRegEx": "Reiter", "year": 1978}, {"title": "Minimal belief and negation as failure in multi-agent systems", "author": ["R. Rosati"], "venue": "Annals of Mathematics and Artificial Intelligence,", "citeRegEx": "Rosati,? \\Q2003\\E", "shortCiteRegEx": "Rosati", "year": 2003}, {"title": "Artificial Intelligence A Modern Approach\" 2 Ed, page 273", "author": ["S. Russel", "P. Norvig"], "venue": "Pearson Education,", "citeRegEx": "Russel and Norvig,? \\Q2003\\E", "shortCiteRegEx": "Russel and Norvig", "year": 2003}, {"title": "Selected Works in Logic\", edited by Fenstad", "author": ["T. Skolem"], "venue": "J. E., Universitetsforlaget,", "citeRegEx": "Skolem,? \\Q1970\\E", "shortCiteRegEx": "Skolem", "year": 1970}, {"title": "The Art of Prolog", "author": ["L. Sterling", "E. Shapiro"], "venue": "Advanced Programming Techniques\",", "citeRegEx": "Sterling and Shapiro,? \\Q1994\\E", "shortCiteRegEx": "Sterling and Shapiro", "year": 1994}], "referenceMentions": [{"referenceID": 1, "context": "The causal logic [Bochman 2004] is shown to make any causal logic program satisfies the Negation As Default principle (alias Closed World Assumption).", "startOffset": 17, "endOffset": 31}, {"referenceID": 6, "context": "In this view, negation as failure is the classical objective negation [Denecker 2000].", "startOffset": 70, "endOffset": 85}, {"referenceID": 7, "context": "There is an epistemological ambiguity that arises in the context of logic programming [Denecker 2004].", "startOffset": 86, "endOffset": 101}, {"referenceID": 7, "context": "[Denecker 2004] falsifies our assumptions that that each such pair has a unique declarative reading and for a program in several formal logics shall its declarative reading is the same in each of them.", "startOffset": 0, "endOffset": 15}, {"referenceID": 6, "context": "One feature of the declarative reading of logic programs that makes it very useful is the justification and explanation of HOW and WHY this semantics characterizes this declarative reading [Denecker 2000].", "startOffset": 189, "endOffset": 204}, {"referenceID": 6, "context": "For a comprehensive review for declarative reading of logic programs, you can refer to ([Sterling& Shapiro 1994] , [Lyaletski2006] , and [Denecker 2000]).", "startOffset": 137, "endOffset": 152}], "year": 2011, "abstractText": "interpreter for logic programs Input: a goal G and a program P Output: an instance of G that is a logical consequence of P, or no otherwise. Algorithm: 1 2 3 4 5 6 7 8 9 initialize the resolvent to G. while the resolvent is not empty do choose a goal A from the resolvent choose a (renamed) clause A\u2019 B1, ..., Bn from P such that A and A\u2019 unify with MGU \u0398. (if no such goal and clause exist, exit the while loop) replace A by B1, ..., Bn in the resolvent apply \u0398 to the resolvent and to G if the resolvent is empty, then output G, else output no.", "creator": "PScript5.dll Version 5.2"}}}