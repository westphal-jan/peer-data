{"id": "1106.0679", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Jun-2011", "title": "Efficient Methods for Qualitative Spatial Reasoning", "abstract": "the theoretical properties of qualitative spatial descriptive reasoning in the rcc8 framework have been analyzed extensively. however, no other empirical causal investigation has been made yet. our experiments show well that the adaption of the best algorithms used for qualitative temporal reasoning can technically solve large rcc8 instances, even if they are in the phase transition region - - provided that one uses the maximal tractable arbitrary subsets of rcc8 that have been identified by us. in particular, we continuously demonstrate that the orthogonal combination of heuristic averaging methods approach is successful in solving altogether almost all apparently hard instances in the phase transition region up to reaches a certain size in reasonable time.", "histories": [["v1", "Fri, 3 Jun 2011 14:56:05 GMT  (237kb)", "http://arxiv.org/abs/1106.0679v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["b nebel", "j renz"], "accepted": false, "id": "1106.0679"}, "pdf": {"name": "1106.0679.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["Jo hen Renz", "renz dbai.tuwien.a", "Bernhard Nebel"], "emails": [], "sections": [{"heading": "Journal of Arti ial Intelligen e Resear h 15 (2001) 289-318 Submitted 3/01; published 10/01", "text": "E\u00c6 ient Methods for Qualitative Spatial ReasoningJo hen Renz renz dbai.tuwien.a .atInstitut f ur Informationssysteme, Te hnis he Universit at WienFavoritenstr.9, A-1040 Wien, AustriaBernhard Nebel nebel informatik.uni-freiburg.deInstitut f ur Informatik, Albert-Ludwigs-Universit atAm Flughafen 17, D-79110 Freiburg, GermanyAbstra tThe theoreti al properties of qualitative spatial reasoning in the RCC-8 frameworkhave been analyzed extensively. However, no empiri al investigation has been made yet.Our experiments show that the adaption of the algorithms used for qualitative temporalreasoning an solve large RCC-8 instan es, even if they are in the phase transition region{ provided that one uses the maximal tra table subsets of RCC-8 that have been identi edby us. In parti ular, we demonstrate that the orthogonal ombination of heuristi methodsis su essful in solving almost all apparently hard instan es in the phase transition regionup to a ertain size in reasonable time.1. Introdu tionRepresenting qualitative spatial information and reasoning with su h information is animportant subproblem in many appli ations, su h as natural language understanding, do -ument interpretation, and geographi al information systems. The RCC-8 al ulus (Randell,Cui, & Cohn, 1992b) is well suited for representing topologi al relationships between spatialregions. Inferen e in the full al ulus is, however, NP-hard (Grigni, Papadias, & Papadim-itriou, 1995; Renz & Nebel, 1999). While this means that it is unlikely that very largeinstan es an be solved in reasonable time, this result does not rule out the possibility thatwe an solve instan es up to a ertain size in reasonable time. Re ently, maximal tra tablesubsets of RCC-8 were identi ed (Renz & Nebel, 1999; Renz, 1999) whi h an be used tospeed up ba ktra king sear h for the general NP- omplete reasoning problem by redu ingthe sear h spa e onsiderably.In this paper we address several questions that emerge from previous theoreti al resultson RCC-8 (Renz & Nebel, 1999; Renz, 1999): Up to whi h size is it possible to solveinstan es in reasonable time? Whi h heuristi is the best? Is it really so mu h more e\u00c6 ientto use the maximal tra table subsets for solving instan es of the NP- omplete onsisten yproblem as the theoreti al savings given by the smaller bran hing fa tors indi ate or isthis e e t out-balan ed by the forward- he king power of the interleaved path- onsisten y omputations? This was the ase for similar temporal problems (pointisable vs. ORD-Hornrelations) (Nebel, 1997). Is it possible to ombine the di erent heuristi s in su h a way thatmore instan es an be solved in reasonable time than by ea h heuristi alone?We treat these questions by randomly generating instan es and solving them usingdi erent heuristi s. In doing so, we are parti ularly interested in the hardest randomly 2001 AI A ess Foundation and Morgan Kaufmann Publishers. All rights reserved.\nRenz & Nebelgenerated instan es whi h leads to the question of phase-transitions (Cheeseman, Kanefsky,& Taylor, 1991): Is there a parameter for randomly generating instan es of the onsisten yproblem of RCC-8 that results in a phase-transition behavior? If so, is it the ase that thehardest instan es are mainly lo ated in the phase-transition region while the instan es not ontained in the phase-transition region are easily solvable? In order to generate instan eswhi h are harder with a higher probability, we generate two di erent kinds of instan es. Onthe one hand we generated instan es whi h ontain onstraints over all RCC-8 relations, onthe other hand we generated instan es whi h ontain only onstraints over relations whi hare not ontained in any of the maximal tra table subsets. We expe t these instan es to beharder on average than the former instan es.The algorithmi te hniques we use for solving these randomly generated instan es areborrowed from similar work on qualitative temporal reasoning (Nebel, 1997; van Beek &Man hak, 1996; Ladkin & Reinefeld, 1992). Additionally, we make use of the fragmentsof RCC-8, named bH8, Q8, and C8, that permit polynomial-time inferen es (Renz & Nebel,1999; Renz, 1999). In the ba ktra king algorithm, whi h is used to solve the reasoningproblem for full RCC-8, we de ompose every disjun tive relation into relations of one ofthese tra table subsets instead of de omposing them into its base relations. This redu esthe average bran hing fa tor of the ba ktra king tree from 4.0 for the base relations to1.4375 for bH8, to 1.523 for C8, and to 1.516 for Q8. Although these theoreti al savings annot be observed in our experiments, using the maximal tra table subsets instead of thebase relations leads to signi ant performan e improvements.This paper is stru tured as follows. In Se tion 2, we give a brief sket h of the RCC-8 al ulus and of the algorithms used for solving instan es of RCC-8. In Se tion 3 we des ribethe pro edure for randomly generating instan es, the di erent heuristi s we apply for solvingthese instan es, and how we measure the quality of the heuristi s. In Se tion 4 we evaluatedi erent path- onsisten y algorithms in order to nd the most e\u00c6 ient one to be used forforward- he king in the ba ktra king sear h. In Se tion 5 we observe a phase-transitionbehavior of the randomly generated instan es and show that the instan es in the phase-transition region are harder to solve than the other instan es. In Se tion 6 we report onthe out ome of running the di erent heuristi s for solving the instan es and identify severalhard instan es whi h are mainly lo ated in the phase-transition region. In Se tion 7 we tryto solve the hard instan es by orthogonally ombining the di erent heuristi s. This turnsout to be very e e tive and leads to a very e\u00c6 ient solution strategy. Finally, in Se tion 8we evaluate this strategy by trying to solve very large instan es.12. The Region Conne tion Cal ulus RCC-8The Region Conne tion Cal ulus (RCC) is a rst-order language for representation of andreasoning about topologi al relationships between extended spatial regions (Randell et al.,1992b). Spatial regions in RCC are non-empty regular subsets of some topologi al spa ewhi h do not have to be internally onne ted, i.e., a spatial region may onsist of di erentdis onne ted pie es. Di erent relationships between spatial regions an be de ned based onone dyadi relation, the onne ted relation C(a; b) whi h is true if the topologi al losuresof the spatial regions a and b share a ommon point.1. The programs are available as an online appendix.290\nEffi ient Methods for Qualitative Spatial Reasoning \u00c6 \u00c6 XYDC(X; Y) \u00c6 \u00c6 XYEC(X; Y) \u00c6 Y X\u00c6 Y \u00c6 \u00c6 TPP(X; Y) TPP 1(X; Y)XY\nX Y XX YX YPO(X; Y) EQ(X; Y) NTPP(X; Y) NTPP 1(X; Y)Figure 1: Two-dimensional examples for the eight base relations of RCC-8The Region Conne tion Cal ulus RCC-8 is a onstraint language formed by the eightjointly exhaustive and pairwise disjoint base relations DC, EC, PO, EQ, TPP, NTPP, TPP 1,and NTPP 1 de nable in the RCC-theory and by all possible unions of the base relations|giving a total number of 28 = 256 di erent relations. The base relations have the meaningof DisConne ted, Externally Conne ted, Partial Overlap, EQual, Tangential Proper Part,Non-Tangential Proper Part, and their onverses. Examples for these relations are shownin Figure 1. Constraints are written in the form xRy where x; y are variables for spatialregions and R is an RCC-8 relation. We write the union of base relations as fR;Sg. Theunion of all base relations, the universal relation, is written as f g. Apart from union([), other operations on relations are de ned, namely, onverse (^), interse tion (\\), and omposition (\u00c6). The formal de nitions of these operations are:8x; y : x(R [ S)y $ xRy _ xSy,8x; y : x(R \\ S)y $ xRy ^ xSy,8x; y : xR^y $ yRx,8x; y : x(R \u00c6 S)y $ 9z : (xRz ^ zSy):The omposition of base relations an be omputed from the semanti s of the relations and isusually provided as a omposition table (Randell, Cohn, & Cui, 1992a; Bennett, 1994). TheRCC-8 omposition table orresponds to the given extensional de nition of omposition onlyif the universal region is not permitted (Bennett, 1997). Based on this table, ompositionsof disjun tive relations an be easily omputed. In the following, bS denotes the losure ofa set of RCC-8 relations S under omposition, interse tion, and onverse.A nite set of RCC-8 onstraints des ribing the topologi al relationships of n di erentregions an be represented by an n nmatrixM , where ea h entryMij represents the RCC-8relation holding between region i and region j. Without loss of generality, Mii = fEQg andMji = Mi\u0302j an be assumed. The fundamental reasoning problem (named RSAT) in thisframework is de iding onsisten y of a set of spatial formulas , i.e., whether there is aspatial on guration where the relations between the regions an be des ribed by . Allother interesting reasoning problem an be redu ed to it in polynomial time (Golumbi & Shamir, 1993). Unfortunately, RSAT is NP- omplete (Renz & Nebel, 1999), i.e., it isunlikely that there is any polynomial algorithm for de iding onsisten y. However, it wasshown in Nebel's (1995) paper that there are subsets S of RCC-8 for whi h the onsisten y291\nRenz & Nebelproblem (written RSAT(S)) an be de ided in polynomial time.2 In parti ular the set ofeight base relations B was shown to be tra table. From that it follows that bB onsisting of32 relations is also tra table. An even larger tra table subset ontaining all base relationsis bH8 (Renz & Nebel, 1999), whi h ontains 148 out of the 256 RCC-8 relations. This setwas also shown to be maximal with respe t to tra tability, i.e., if any other RCC-8 relationis added, the onsisten y problem be omes NP- omplete. Renz (1999) made a ompleteanalysis of tra tability of RSAT by identifying all maximal tra table subsets whi h ontainall base relations, altogether three subsets bH8, Q8 (160 relations), and C8 (158 relations).NP8 is the set of relations that by themselves result in NP- ompleteness when ombinedwith the set of base relations. It ontains the following 76 relations whi h are not ontainedin one of bH8;Q8; or C8 (Renz, 1999):NP8 = fR j fPOg 6 R and (fNTPPg R or fTPPg R)and (fNTPP 1g R or fTPP 1g R)g[ ffEC;NTPP;EQg; fDC;EC;NTPP;EQg;fEC;NTPP 1;EQg; fDC;EC;NTPP 1;EQgg:The maximal tra table subsets ontain the following relations (Renz, 1999):bH8 = (RCC-8 n NP8) n fR j (fEQ;NTPPg R and fTPPg 6 R)or (fEQ;NTPP 1g R and fTPP 1g 6 R)gC8 = (RCC-8 n NP8) n fR j fECg R and fPOg 6 R andR \\ fTPP;NTPP;TPP 1;NTPP 1;EQg 6= ;gQ8 = (RCC-8 n NP8) n fR j fEQg R and fPOg 6 R andR \\ fTPP;NTPP;TPP 1;NTPP 1g 6= ;gAll relations of Q8 are ontained in one of bH8 or C8, i.e., bH8 [ C8 = RCC-8 n NP8.Although bH8 is the smallest of the three maximal tra table subsets, it best de omposes theRCC-8 relations: When de omposing an RCC-8 relation R into sub-relations Si of one of themaximal tra table subsets, i.e., R = S1[ : : :[Sk, one needs on average 1.4375 bH8 relations,1.516 Q8 relations, and 1.523 C8 relations for de omposing all RCC-8 relations. Renz (2000)gives a detailed enumeration of the relations of the three sets.2.1 The Path-Consisten y AlgorithmAs in the area of qualitative temporal reasoning based on Allen's interval al ulus (Allen,1983), the path- onsisten y algorithm (Montanari, 1974; Ma kworth, 1977; Ma kworth &Freuder, 1985) an be used to approximate onsisten y and to realize forward- he king(Harali k & Elliot, 1980) in a ba ktra king algorithm.The path- onsisten y algorithm he ks the onsisten y of all triples of relations andeliminates relations that are impossible. This is done by iteratively performing the followingoperation Mij Mij \\Mik \u00c6Mkj2. Stri tly speaking, this applies only to systems of regions that do not require regularity.292\nEffi ient Methods for Qualitative Spatial Reasoning Algorithm: Path- onsisten yInput: A set of binary onstraints over the variables x1; x2; : : : ; xn of represented by an n n matrix M .Output: path- onsistent set equivalent to ; fail, if su h a set does notexist.1. Q := f(i; j; k); (k; i; j) j 1 i; j; k n; i < j; k 6= i; k 6= jg;(i indi ates the i-th variable of . Analogously for j and k)2. while Q 6= ; do3. sele t and delete a path (p; r; q) from Q;4. if revise(p; r; q) then5. if Mpq = ; then return fail6. else Q := Q [ f(p; q; s); (s; p; q) j 1 s n; s 6= p; s 6= qg.Fun tion: revise(i; k; j)Input: three labels i, k and j indi ating the variables xi; xj ; xk of Output: true, if Mij is revised; false otherwise.Side e e ts: Mij and Mji revised using the operations \\ and \u00c6over the onstraints involving xi, xk, and xj.1. oldM := Mij ;2. Mij := Mij\\ (Mik \u00c6Mkj);3. if (oldM = Mij) then return false;4. Mji := Mi\u0302j ;5. return true. Figure 2: Path- onsisten y algorithm.for all triples of regions i; j; k until a xed point M is rea hed. If M ij = ; for a pairi; j, then we know that M is in onsistent, otherwise M is path- onsistent. Computing M an be done in O(n3) time (see Figure 2). This is a hieved by using a queue of triples ofregions for whi h the relations should be re omputed (Ma kworth & Freuder, 1985). Path- onsisten y does not imply onsisten y. For instan e, the following set of spatial onstraintsis path- onsistent but not onsistent: l ll l--? ?HHHHHHHj ZX YWEQ _ NTPPTPP _ TPP 1DC _ TPP EC _ NTPPEC _ TPPEC _ TPPOn the other hand, onsisten y does not imply path- onsisten y, sin e path- onsisten y isnot a form of onsisten y (in its logi al sense), but a form of disjun tive non-redundan y.Nevertheless, path- onsisten y an be enfor ed to any onsistent set of onstraints by ap-293\nRenz & Nebel Algorithm: Consisten yInput: A set of RCC-8 onstraints over the variables x1; x2; : : : ; xnand a subset S RCC-8 that ontains all base relationsand for whi h De ide is a sound and omplete de isionpro edure.Output: true, i is onsistent.1. Path-Consisten y( )2. if ontains the empty relation then return false3. else hoose an unpro essed onstraint xiRxj andsplit R into S1; : : : ; Sk 2 S su h that S1 [ : : : [ Sk = R4. if no onstraint an be split then return De ide( )5. for all re nements Sl (1 l k) do6. repla e xiRxj with xiSlxj in 7. if Consisten y( ) then return trueFigure 3: Ba ktra king algorithm for de iding onsisten y.plying a path- onsisten y algorithm. If only relations in bH8, Q8, or C8 are used, however,the path- onsisten y algorithm is su\u00c6 ient for de iding onsisten y, i.e., path- onsisten yde ides RSAT( bH8), RSAT(Q8), and RSAT(C8), (Renz & Nebel, 1999; Renz, 1999).2.2 The Ba ktra king AlgorithmIn order to solve an instan e of RSAT, we have to explore the orresponding sear h spa eusing some sort of ba ktra king. In our experiments, we used a ba ktra king algorithmemployed for solving qualitative temporal reasoning problems (Nebel, 1997), whi h is basedon the algorithm proposed by Ladkin and Reinefeld (1992). For this algorithm (see Figure 3)it is ne essary to have a subset S RCC-8 for whi h onsisten y an be de ided by using asound and omplete (and preferably polynomial) de ision pro edure De ide. If S ontainsall base relations, then ea h relation R 2 RCC-8 an be de omposed into sub-relationsSi 2 S su h that R = Si Si. The size of a parti ular de omposition is the minimal numberof sub-relations Si whi h is used to de ompose R. The ba ktra king algorithm su essivelysele ts onstraints of , ba ktra ks over all sub-relations of the onstraints a ording totheir de omposition and de ides sub-instan es whi h ontain only onstraints over S usingDe ide.The (optional) pro edure Path- onsisten y in line 1 is used for forward- he kingand restri ts the remaining sear h spa e. Nebel (1997) showed that this restri tion doesnot e e t soundness and ompleteness of the algorithm. If enfor ing path- onsisten y issu\u00c6 ient for de iding RSAT(S), De ide( ) in line 5 is not ne essary. Instead it is possibleto always return true there.The e\u00c6 ien y of the ba ktra king algorithm depends on several fa tors. One of them is,of ourse, the size of the sear h spa e whi h has to be explored. A ommon way of measuring294\nEffi ient Methods for Qualitative Spatial Reasoningthe size of the sear h spa e is the average bran hing fa tor b of the sear h spa e, i.e., theaverage number of bran hes ea h node in the sear h spa e has (a node is a re ursive all ofConsisten y). Then the average size of the sear h spa e an be omputed as b(n2 n)=2,where (n2 n)=2 is the number of onstraints whi h have to be split when n variables aregiven. For the ba ktra king algorithm des ribed in Figure 3 the bran hing fa tor dependson the average number of relations of the split set S into whi h a relation has to be split.The less splits on average the better, i.e., it is to be expe ted that the e\u00c6 ien y of theba ktra king algorithm depends on the split set S and its bran hing fa tor. Another fa toris how the sear h spa e is explored. The ba ktra king algorithm of Figure 3 o ers twopossibilities for applying heuristi s. One is in line 3 where the next unpro essed onstraint an be hosen, the other is in line 5 where the next re nement an be hosen. These two hoi es in uen e the sear h spa e and the path through the sear h spa e.3. Test Instan es, Heuristi s, and MeasurementThere is no previous work on empiri al evaluation of algorithms for reasoning with RCC-8and no ben hmark problems are known. Therefore we randomly generated our test instan eswith a given number of regions n, an average label-size l, and an average degree d ofthe onstraint graph. Further, we used two di erent sets of relations for generating testinstan es, the set of all RCC-8 relations and the set of hard RCC-8 relations NP8, i.e., those76 relations whi h are not ontained in any of the maximal tra table subsets bH8, C8, orQ8. Based on these sets of relations, we used two models to generate instan es, denotedby A(n; d; l) and H(n; d; l). The former model uses all relations to generate instan es, thelatter only the relations in NP8. The instan es are generated as follows:1. A onstraint graph with n nodes and an average degree of d for ea h node is generated.This is a omplished by sele ting nd=2 out of the n(n 1)=2 possible edges using auniform distribution.2. If there is no edge between the ith and jth node, we setMij =Mji to be the universalrelation.3. Otherwise a non-universal relation is sele ted a ording to the parameter l su h thatthe average size of relations for sele ted edges is l. This is a omplished by sele tingone of the base relations with uniform distribution and out of the remaining 7 relationsea h one with probability (l 1)=7.3 If this results in an allowed relation (i.e., a relationof NP8 for H(n; d; l), any RCC-8 relation for A(n; d; l)), we assign this relation to theedge. Otherwise we repeat the pro ess.The reason for also generating instan es using only relations of NP8 is that we assumethat these instan es are di\u00c6 ult to solve sin e every relation has to be split during theba ktra king sear h, even if we use a maximal tra table sub lass as the split set. We onlygenerated instan es of average label size l = 4:0, sin e in this ase the relations are equallydistributed.3. This method ould result in the assignment of a universal onstraint to a sele ted link, thereby hangingthe degree of the node. However, sin e the probability of getting the universal relation is very low, weignore this in the following. 295\nRenz & NebelThis way of generating random instan es is very similar to the way random CSP in-stan es over nite domains are usually generated (Gent, Ma Intyre, Prosser, Smith, &Walsh, 2001). A hlioptas et al. (1997) found that the standard models for generatingrandom CSP instan es over nite domains lead to trivially awed instan es for n ! 1,i.e., instan es be ome lo ally in onsistent without having to propagate onstraints. Sin ewe are using CSP instan es over in nite domains, A hlioptas et al.'s result does not ne -essarily hold for our random instan es. We, therefore, analyze in the following whetherour instan es are also trivially awed for n ! 1. In order to obtain a CSP over a -nite domain, we rst have to transform our onstraint graph into its dual graph whereea h of the n(n 1)=2 edges Mij of our onstraint graph orresponds to a node in thedual graph. Moreover, ea h of the n variables of the onstraint graph orresponds ton 1 edges in the dual graph, i.e., the dual graph ontains n(n 1) edges and n(n 1)=2nodes. In the dual graph, ea h node orresponds to a variable over the eight-valued domainD = fDC;EC;PO;TPP;TPP 1;NTPP;NTPP 1;EQg. Ternary onstraints over these vari-ables are imposed by the omposition table, i.e., the omposition rules Mij Mik \u00c6Mkjmust hold for all onne ted triples of nodes Mij;Mik;Mkj of the dual graph (Mij = Mj\u0302ifor all i; j). There are n3 = n(n 1)(n 2)=6 onne ted triples in the dual graph. Theoverall number of triples in the dual graph is n(n 1)=23 . nd=2 unary onstraints onthe domain of the variables Mij are given, i.e., there are nd=23 triples in the dual graphwhere all nodes are restri ted by unary onstraints. Therefore, the expe ted number EnCTof onne ted triples for whi h unary onstraints are given an be omputed asEnCT = n3 ! nd=23 ! n(n 1)=23 ! :For n!1, the expe ted number of triples E1CT tends to d3=6. For the instan es generateda ording to the model A(n; d; l), the probability that the unary onstraints whi h areassigned to a triple lead to a lo al in onsisten y is about 0; 0036% (only 58,989 out of the2553 = 16; 581; 375 possible assignments are in onsistent). Sin e one lo ally in onsistenttriple makes the whole instan e in onsistent, we are interested in the average degree d forwhi h the expe ted number EnIT of lo ally in onsistent triples is equal to one. For the modelA(n; d; l) this o urs for a value of d = 11:90, and E1IT = 0:5 for d = 9:44. For n = 100,the expe ted number of lo ally in onsistent triples is one for d = 13:98, and E100IT = 0:5 ford = 11:10. For the model H(n; d; l), none of the possible assignments of the triples leads toa lo al in onsisten y, i.e., all triples of the randomly generated instan es of the H(n; d; l)model are lo ally onsistent.4 This analysis shows that ontrary to what A hlioptas etal. found for randomly generated CSP instan es over nite domains, the model H(n; d; l),and the model A(n; d; l) for d small do not su er from trivial lo al in onsisten ies.4. This is similar to the result for CSPs over nite domains that by restri ting the onstraint type, e.g., ifonly \\not-equal\" onstraints as in graph- oloring are used, it is possible to ensure that problems annotbe trivially awed. 296\nEffi ient Methods for Qualitative Spatial ReasoningWe solve the randomly generated instan es using the ba ktra king algorithm des ribedin the previous se tion. The sear h spa e on whi h ba ktra king is performed depends onthe split set, i.e., the set of sub-relations that is allowed in the de ompositions. Choosing theright split-set in uen es the sear h noti eably as it in uen es the average bran hing fa torof the sear h spa e. We hoose ve di erent split sets, the three maximal tra table subsetsbH8;Q8; and C8, the set of base relations B and the losure of this set bB whi h onsists of38 relations. These sets have the following bran hing fa tors B: 4.0, bB: 2.50 , bH8: 1.438,C8: 1.523, Q8: 1.516. This is, of ourse, a worst ase measure be ause the interleaved path- onsisten y omputations redu e the bran hing fa tor onsiderably (Ladkin & Reinefeld,1997).Apart from the hoi e of the split set there are other heuristi s whi h in uen e the e\u00c6- ien y of the sear h. In general it is the best sear h strategy to pro eed with the onstraintwith the most onstraining relation (line 3 of Figure 3) and the least onstraining hoi e ofa sub-relation (line 5 of Figure 3). We investigated two di erent aspe ts for hoosing thenext onstraint to be pro essed (Nebel, 1997).stati /dynami : Constraints are pro essed a ording to a heuristi evaluation of their onstrainedness whi h is determined stati ally before the ba ktra king starts or dy-nami ally during the sear h.lo al/global: The evaluation of the onstrainedness is based on a lo al heuristi weight riterion or on a global heuristi riterion (van Beek & Man hak, 1996).This gives us four possibilities we an ombine with the ve di erent split sets, i.e., atotal number of 20 di erent heuristi s. The evaluation of onstrainedness as well as howrelations are de omposed into relations of di erent split sets depends on the restri tivenessof relations, whi h is a heuristi riterion (van Beek & Man hak, 1996). Restri tivenessof a relation is a measure of how a relation restri ts its neighborhood. For instan e, theuniversal relation given in a onstraint network does not restri t its neighboring relations atall, the result of the omposition of any relation with the universal relation is the universalrelation. The identity relation, in ontrast, restri ts its neighborhood a lot. In every tripleof variables where one relation is the identity relation, the other two relations must be equal.Therefore, the universal relation is usually the least restri ting relation, while the identityrelation is usually the most restri ting relation. Restri tiveness of relations is representedas a weight in the range of 1 to 16 assigned to every relation, where 1 is the value of themost and 16 the value of the least restri ting relation. We dis uss in the following se tionin detail how the restri tiveness and the weight of a relation is determined.Given the weights assigned to every relation, we ompute de ompositions and estimate onstrainedness as follows. For ea h split set S and for ea h RCC-8 relation R we omputethe smallest de omposition of R into sub-relations of S, i.e., the de omposition whi h re-quires the least number of sub-relations of S. If there is more than one possibility, we hoosethe de omposition with the least restri ting sub-relations. In line 5 of the ba ktra king al-gorithm (see Figure 3), the least restri ting sub-relation of ea h de omposition is pro essed rst. For the lo al strategy, the onstrainedness of a onstraint is determined by the size ofits de omposition (whi h an be di erent for every split set) and by its weight. We hoosethe onstraint with the smallest de omposition larger than one and, if there is more than297\nRenz & Nebelone su h onstraint, the one with the smallest weight. The reason for hoosing the relationwith the smallest de omposition is that it is expe ted that forward- he king re nes rela-tions with a larger de omposition into relations with a smaller de omposition. This redu esthe ba ktra king e ort. For the global strategy, the onstrainedness of a onstraint xRy isdetermined by adding the weights of all neighboring relations S; T with xSz and zTy tothe weight of R. The idea behind this strategy is that when re ning the relation R withthe most restri ted neighborhood, an in onsisten y is dete ted faster than when re ning arelation with a less restri ted neighborhood.In order to evaluate the quality of the di erent heuristi s, we measured the run-time usedfor solving instan es as well as the number of visited nodes in the sear h spa e. Comparingdi erent approa hes by their run-time is often not very reliable as it depends on severalfa tors su h as the implementation of the algorithms, the used hardware, or the urrentload of the used ma hine whi h makes results sometimes not reprodu ible. For this reason,we ran all our run-time experiments on the same ma hine, a Sun Ultra 1 with 128 MB ofmain memory. Nevertheless, we suggest to use the run-time results mainly for qualitatively omparing di erent heuristi s and for getting a rough idea of the order of magnitude forwhi h instan es an be solved.In ontrast to this, the number of visited nodes for solving an instan e with a parti ularheuristi is always the same on every ma hine. This allows omparing the path through thesear h spa e taken by the single heuristi s and to judge whi h heuristi makes the better hoi es on average. However, this does not take into a ount the time that is needed to makea hoi e at a single node. Computing the lo al onstrainedness of a onstraint is ertainlyfaster than omputing its global onstrainedness. Similarly, omputing onstrainednessstati ally should be faster than omputing it dynami ally. Furthermore, larger instan esrequire more time at the nodes than smaller instan es, be it for omputing path- onsisten yor for omputing the onstrainedness. Taking running-time and the number of visited nodestogether gives good indi ations of the quality of the heuristi s.A further hoi e we make in evaluating our measurements is that of how to aggregatethe measurements of the single instan es to a total pi ture. Some possibilities are to useeither the average or di erent per entiles su h as the median, i.e., the 50% per entile. Thed% per entile for a value 0 < d < 100 is obtained by sorting the measurements in in reasingorder and pi king the measurement of the d% element, i.e., d% of the values are less thanthat value. Suppose that most instan es have a low value (e.g. running time) and only afew instan es have a very large value. Then the average might be larger than the values ofalmost all instan es, while in this ase the median is a better indi ation of the distributionof the values. In this ase the 99% per entile, for instan e, gives a good indi ation of thevalue of the hardest among the \\normal\" instan es. We have hosen to use the averagevalue when the measurements are well distributed and to use both 50% and 99% per entilewhen there are only a few ex eptional values in the distribution of the measurements.4. Empiri al Evaluation of the Path-Consisten y AlgorithmSin e the e\u00c6 ien y of the ba ktra king algorithm depends on the e\u00c6 ien y of the underlyingpath- onsisten y algorithm, we will rst ompare di erent implementations of the path- onsisten y algorithm. In previous empiri al investigations (van Beek & Man hak, 1996) of298\nEffi ient Methods for Qualitative Spatial Reasoningreasoning with Allen's interval relations (Allen, 1983), di erent methods for omputing the omposition of two relations were evaluated. This was mainly be ause the full ompositiontable for the interval relations ontains 213 213 = 67108864 entries, whi h was too largeat that time to be stored in the main memory. In our setting, we simply use a ompositiontable that spe i es the ompositions of all RCC-8 relations, whi h is a 256 256 table onsuming approximately 128 KB of main memory. This means that the omposition oftwo arbitrary relations is done by a simple table lookup.Van Beek and Man hak (1996) also studied the e e t of weighting the relations inthe queue a ording to their restri tiveness and pro ess the most restri ting relation rst.Restri tiveness was measured for ea h base relation by su essively omposing the baserelation with every possible label, summing up the ardinalities, i.e., the number of baserelations ontained in the result of the omposition, and suitably s aling the result. Thereason for doing so is that the most restri ting relation restri ts the other relations onaverage most and therefore de reases the probability that they have to be pro essed again.Restri tiveness of a omplex relation was approximated by summing up the restri tivenessof the involved base relations. Van Beek and Man hak (1996) found that their method ofweighting the triples in the queue is mu h more e\u00c6 ient than randomly pi king an arbitrarytriple. Be ause of the relatively small number of RCC-8 relations, we omputed the exa trestri tiveness by omposing ea h relation with every other relation and summing up the ardinalities of the resulting ompositions. We s aled the result into weights from 1 (themost restri ting relation) to 16 (the least restri ting relations).This gives us three di erent implementations of the path- onsisten y algorithm. One inwhi h the entries in the queue are not weighted, one with approximated restri tiveness asdone by van Beek and Man hak, and one with exa t restri tiveness.5 In order to omparethese implementations, we randomly generated instan es with 50 to 1,000 regions. Forea h value of the average degree ranging from 8.0 stepping with 0.5 to 11.0 we generated10 di erent instan es. Figure 4 displays the average CPU time of the di erent methodsfor applying the path- onsisten y algorithm to the same generated instan es. It an beseen that the positive e e t of using a weighted queue is mu h greater for our problemthan for the temporal problem (about 10 faster than using an ordinary queue withoutweights ompared to only about 2 faster (van Beek & Man hak, 1996)). Determining theweights of every relation using their exa t restri tiveness does not have mu h advantage overapproximating their restri tiveness using the approa h by van Beek and Man hak (1996),however. For our further experiments we always used the \\exa t weights\" method be ausedetermining the restri tiveness amounts to just one table lookup.As mentioned in the previous se tion, one way of measuring the quality of the heuristi sis to ount the number of visited nodes in the ba ktra k sear h. In our ba ktra kingalgorithm, path- onsisten y is enfor ed in every visited node. Note that it is not adequateto multiply the average running-time for enfor ing path- onsisten y of an instan e of aparti ular size with the number of visited nodes in order to obtain an approximation ofthe required running time for that instan e. The average running-time for enfor ing path- onsisten y as given in Figure 4 holds only when all possible paths are entered into thequeue at the beginning of the omputation (see line 1 of Figure 2). These are the paths5. For the weighted versions we sele t a path (i; k; j) from the queue Q in line 3 of the algorithm of Figure 2a ording to the weights of the di erent paths in Q whi h are omputed as spe i ed above.299\nRenz & Nebel\nEffi ient Methods for Qualitative Spatial Reasoning Probability of satisfiability for A(n,d,4.0)\n4 6 8 10 12 14 16 18 20\n40 60\n80 100\n50\n100\naverage degree\nnodes\nProbability (%)\nMedian CPU time for A(n,d,4.0)\n4 6 8 10 12 14 16 18 20\n40 60\n80 100 0 0.1 0.2 0.3 0.4 0.5 0.6\naverage degree\nnodes\nCPU time(s)\nFigure 5: Probability of satis ability and median CPU time for A(n; d; 4:0) using thebH8/stati /global heuristi (500 instan es per data point)transition is around d = 8 to d = 10 depending on the instan e size (see Figure 5). Be auseof the result of our theoreti al analysis of the o urren e of trivial aws (see Se tion 3), it anbe expe ted that for larger instan e sizes the phase-transition behavior will be overlaid andmainly determined by the expe ted number of lo ally in onsistent triples whi h also dependson the average degree d. Thus, although it seems that the phase-transition shifts towardslarger values of d as the instan e size in reases, the phase-transition is asymptoti ally belowd = 9:44, the theoreti al value for n ! 1 (see Se tion 3). Instan es whi h are not path- onsistent an be solved very fast by just one appli ation of the path- onsisten y algorithmwithout further need for ba ktra king. When looking at the median CPU times given inFigure 5, one noti es that there is a sharp de line of the median CPU times at the phasetransition. This indi ates that for values of the average degree whi h are higher than wherethe phase-transition o urs, at least 50% of the instan es are not path- onsistent.When using only \\hard\" relations, i.e., relations in NP8, the phase-transition appearsat higher values for d, namely, between d = 10 and d = 15 (see Figure 6). As the medianruntime shows, these instan es are mu h harder in the phase-transition than in the former ase. As in the previous ase, but even more strongly, it seems that the phase-transitionshifts towards larger values of d as the instan e size in reases, and also that the phase-transition region narrows.In order to evaluate the quality of the path- onsisten y method as an approximation to onsisten y, we ounted the number of instan es that are in onsistent but path- onsistent(see Figure 7), i.e., those instan es where the approximation of the path- onsisten y algo-rithm to onsisten y is wrong. First of all, one notes that all su h instan es are lose to thephase transition region. In the general ase, i.e., when onstraints over all RCC-8 relationsare employed, only a very low per entage of instan es are path- onsistent but in onsistent.Therefore, the gure looks very errati . More data points would be required in order toobtain a smooth urve. However, a few important observations an be made from this gure, namely, that path- onsisten y gives an ex ellent approximation to onsisten y evenfor instan es of a large size. Ex ept for very few instan es in the phase-transition region,almost all instan es whi h are path- onsistent are also onsistent. This pi ture hanges301\n4 6 8 10 12 14 16 18 20\n40 60\n80 100\n0\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\naverage degree\nnodes\nPC-Failures (%)\nPercentage points of incorrect PCA answers for H(n,d,4.0)\n6 8 10 12 14 16 18 20 20\n40\n60\n80 0 10 20 30 40 50 60 70 80\naverage degree\nnodes\nPC-Failures (%)\nFigure 7: Per entage points of in orre t answers of the path- onsisten y algorithm forA(n; d; 4:0) and H(n; d; 4:0)when looking at the H(n; d; 4:0) ase. Here almost all instan es in the phase-transitionregion and many instan es in the mostly insoluble region are path- onsistent, though onlya few of them are onsistent.For the following evaluation of the di erent heuristi s we will randomly generate in-stan es with an average degree between d = 2 and d = 18 in the A(n; d; 4:0) ase andbetween d = 4 and d = 20 in the H(n; d; 4:0) ase. This overs a large area around thephase-transition. We expe t the instan es in the phase-transition region of H(n; d; 4:0) tobe parti ularly hard whi h makes them very interesting for omparing the quality of thedi erent heuristi s.6. Empiri al Evaluation of the Heuristi sIn this se tion we ompare the di erent heuristi s by running them on the same randomlygenerated instan es. For the instan es of A(n; d; 4:0) we ran all 20 di erent heuristi s302\nEffi ient Methods for Qualitative Spatial Reasoning Number of hard instances for A(n,d,4.0)\nNumber of hard instances for H(n,d,4.0)\nRenz & Nebel Heuristi s A(n; d; 4:0) H(n; d; 4:0) H(80; 14:0; 4:0)bH8/sta/lo 64 21; 129 331bH8/sta/glo 42 10; 826 227bH8/dyn/lo 52 9; 967 217bH8/dyn/glo 100 24; 038 345C8/sta/lo 81 28; 830 373C8/sta/glo 58 15; 457 277C8/dyn/lo 78 32; 926 412C8/dyn/glo 108 41; 565 428Q8/sta/lo 81 24; 189 346Q8/sta/glo 54 13; 189 239Q8/dyn/lo 74 13; 727 255Q8/dyn/glo 104 29; 448 368bB/sta/lo 68 23; 711 344bB/sta/glo 89 13; 831 249bB/dyn/lo 70 29; 790 379bB/dyn/glo 162 { {B/sta/lo 163 { {B/sta/glo 222 { {B/dyn/lo 209 { {B/dyn/glo (303) { {total 788 75; 081 486Table 1: Number of hard instan es for ea h heuristi e e tive ombination while ombining dynami and global is in all ases the worst hoi ewith respe t to the number of solved instan es.In Figure 9 we ompare the 50% and 99% per entiles of the di erent heuristi s onA(n; d; 4:0). We do not give the average run times sin e we ran all heuristi s only up to atmost 10,000 visited nodes whi h redu es the real average run time values. Ea h data pointis the average of the values for d = 8 to d = 10. We took the average of the di erent degreesin order to over the whole phase-transition region whi h is about d = 8 for instan es ofsize n = 10 and d = 10 for instan es of size n = 100. For all di erent ombinations of omputing onstrainedness, the ordering of the run times is the same for the di erent splitsets: B bB > C8; bH8;Q8. The run times of using stati /lo al, stati /global, or dynami /lo alfor omputing onstrainedness are almost the same when ombined with the same split setwhile they are longer for all split sets when using dynami /global (about 3 times longerwhen using bB as a split set and about 1.5 times longer when using the other split sets).The 99% per entile run times are only about 1.5 times longer than the 50% per entile runtimes. Thus, even the harder among the \\normal\" instan es an be solved easily, i.e., apartfrom a few hard instan es, most instan es an be solved e\u00c6 iently within the size rangewe analyzed. The errati behavior of the median urves results from an aggregation of thee e t whi h an be observed in Figure 5, namely, that some of the median elements in thephase-transition are in onsistent and easily solvable.304\nEffi ient Methods for Qualitative Spatial Reasoning\nRenz & NebelFor the runtime studies for H(n; d; 4:0) we noti ed that there are many hard instan esfor n > 40 (see Figure 8), for n = 80 almost all instan es in the phase-transition region arehard (see last olumn of Table 1). Also, as Table 1 shows, the number of hard instan esvaries a lot for the di erent heuristi s. Therefore, it is not possible to ompare the per entilerunning times of the di erent heuristi s for n > 40. For n = 80 and d = 14 (see last olumnof Table 1), for instan e, the 50% and 99% per entile element of the C8/dynami /globalheuristi is element no.36 and element no.72, while it is element no.141 and element no.280of the bH8/dynami /lo al heuristi (out of the 500 sorted elements), respe tively.For this reason we show the results only up to a size of n = 40 (see Figure 10). Again, wetook the average of the di erent degrees from d = 10 to d = 15 in order to over the wholephase-transition region. The order of the run times is the same for di erent ombinationsof omputing onstrainedness: B bB; C8 Q8; bH8, while bH8 is in most ases the fastest.As for the A(n; d; 4:0) instan es, the run times for dynami /global were mu h longer thanthe other ombinations. The 99% per entile run times of the stati /global ombinationand for bH8 and Q8 of the dynami /lo al ombination are faster than those of the other ombinations. Although the median CPU times are about the same as for A(n; d; 4:0) forn < 40, the per entile 99% CPU times are mu h longer. As it was already shown in Figure 7and 8, this is further eviden e that there are very hard instan es in the phase-transitionregion of H(n; d; 4:0).7. Orthogonal Combination of the Heuristi sIn the previous se tion we studied the quality of di erent heuristi s for solving randomlygenerated RSAT instan es. We found that several instan es whi h are mainly lo ated in thephase-transition region ould not be solved by some heuristi s within our limit of 10,000visited nodes in the sear h spa e. Sin e the di erent heuristi s have a di erent sear h spa e(depending on the split set) and use a di erent path through the sear h spa e (determinedby the di erent possibilities of omputing onstrainedness), it is possible that instan es arehard for some heuristi s but easily solvable for other heuristi s. Nebel (1997) observed thatrunning di erent heuristi s in parallel an solve more instan es of a parti ular hard set oftemporal reasoning instan es proposed by van Beek and Man hak (1996) than any singleheuristi alone an solve, when using altogether the same number of visited nodes as forea h heuristi alone. An open question of Nebel's investigation (Nebel, 1997) was whetherthis is also the ase for the hard instan es in the phase-transition region.In this se tion we evaluate the power of \\orthogonally ombining\" the di erent heuristi sfor solving RSAT instan es, i.e., running the di erent heuristi s for ea h instan e in paralleluntil one of the heuristi s solves the instan e. There are di erent ways for simulatingthis parallel pro essing on a single pro essor ma hine. One is to use time sli ing betweenthe di erent heuristi s, another is to run the heuristi s in a xed or random order untila ertain number of nodes in the sear h spa e is visited and if unsu essful try the nextheuristi ( f. Huberman, Lukose, & Hogg, 1997). Whi h possibility is hosen and withwhi h parameters (e.g., the order in whi h the heuristi s are run and the number of visitednodes whi h is spent for ea h heuristi ) determines the e\u00c6 ien y of the single pro essorsimulation of the orthogonal ombination. In order to nd the best parameters, we ran allheuristi s using at most 10,000 visited nodes for ea h heuristi on the set of hard instan es306\nEffi ient Methods for Qualitative Spatial Reasoning\nRenz & Nebel A(n; d; 4:0) H(n; d; 4:0)Heuristi s Solved Instan es 1. Response Solved Instan es 1. ResponsebH8/sta/lo 91:88% 19:80% 71:86% 6:92%bH8/sta/glo 94:67% 12:56% 85:58% 14:26%bH8/dyn/lo 93:40% 24:37% 86:73% 22:28%bH8/dyn/glo 87:31% 13:58% 67:98% 15:00%C8/sta/lo 89:72% 6:35% 61:60% 1:47%C8/sta/glo 92:64% 5:20% 79:41% 5:04%C8/dyn/lo 90:10% 5:96% 56:15% 2:26%C8/dyn/glo 86:63% 6:60% 44:64% 2:40%Q8/sta/lo 89:72% 9:77% 67:78% 1:63%Q8/sta/glo 93:15% 12:06% 82:43% 3:61%Q8/dyn/lo 90:61% 10:15% 81:72% 1:83%Q8/dyn/glo 86:80% 12:82% 60:78% 4:61%bB/sta/lo 91:37% 1:40% 68:42% 1:84%bB/sta/glo 88:71% 1:27% 81:58% 5:22%bB/dyn/lo 91:12% 0:89% 60:32% 2:56%bB/dyn/glo 79:44% 0:89% { 1:83%B/sta/lo 79:31% 0:51% { 1:67%B/sta/glo 71:83% 0:25% { 1:13%B/dyn/lo 73:48% 0:51% { 0:42%B/dyn/glo { 0:13% { 0:49% ombined 99:87% 96:48%Table 2: Per entage of solved hard instan es for ea h heuristi and per entage of rst re-sponse when orthogonally running all heuristi s. Note that sometimes di erentheuristi s are equally fast. Therefore the sum is more than 100%.\nidenti ed in the previous se tion (those instan es for whi h at least one heuristi requiredmore than 10,000 visited nodes) and ompared their behavior. Sin e we ran all heuristi son all instan es already for the experiments of the previous se tion, we only had to evaluatetheir out omes. This led to a very surprising result for the A(n; d; 4:0) instan es, namely, allof the 788 hard instan es ex ept for a single one were solved by at least one of the heuristi susing less than 10,000 visited nodes. In Table 2 we list the per entage of hard instan esthat ould be solved by the di erent heuristi s and the per entage of rst response by ea hof them when running the heuristi s in parallel (i.e., whi h heuristi required the smallestnumber of visited nodes for solving the instan e). It turns out that the heuristi s using bH8as a split set did not only solve more instan es than the other heuristi s, they were alsomore often the fastest in nding a solution. Although the heuristi s using the other twomaximal tra table subsets Q8 and C8 as a split set did not solve signi antly more instan esthan the heuristi s using bB, they were mu h faster in nding a solution. Despite solvingthe least number of instan es, the heuristi s using B as a split set were in some ases thefastest in produ ing a solution. 308\nEffi ient Methods for Qualitative Spatial Reasoning\n0\n5\n10\n15\n20\n1 10 100 1000 10000\nN um\nbe r\nof s\nol ve\nd in\nst an\nce s\nMinimal number of visited nodes\nFirst Response for Solving the Hard Instances of A(n,d,4.0)\ninconsistent consistent\n0\n100\n200\n300\n400\n500\n600\n700\n1 10 100 1000 10000\nN um\nbe r\nof s\nol ve\nd in\nst an\nce s\nMinimal number of visited nodes\nFirst Response for Solving the Hard Instances of H(n,d,4.0)\ninconsistent consistent\nFigure 11: Fastest solution of the hard instan es when running all heuristi s in parallelWhen omparing the minimal number of visited nodes of all the heuristi s for all thehard instan es, we found that only ve of them (whi h were all in onsistent) requiredmore than 150 visited nodes. This is parti ularly remarkable as all these instan es arefrom the phase-transition region of an NP-hard problem, i.e., instan es whi h are usually onsidered to be the most di\u00c6 ult ones. Further note that about 15% (120) of the 788 (path- onsistent) instan es were in onsistent, whi h is mu h higher than usual ( f. Figure 7).Interestingly, most of those in onsistent instan es were solved faster than the onsistentinstan es. At this point, it should be noted that ombining heuristi s orthogonally is verysimilar to randomized sear h te hniques with restarts (Selman, Levesque, & Mit hell, 1992).However, in ontrast to randomized sear h, our method an also determine whether aninstan e is in onsistent. In Figure 11 we hart the number of hard instan es solved with thesmallest number of visited nodes with respe t to their solubility. Due to the low numberof hard instan es of A(n; d; 4:0), the gure on the left looks a bit ugly but one an at leastapproximate the behavior of the urves when omparing it with the se ond gure on theright whi h is the same urve for H(n; d; 4:0) (see below). The os illating behavior of thein onsistent instan es (more instan es are solved with an odd than with an even numberof visited nodes) might be due to the sizes of the instan es|we generated instan es withan even number of nodes only. The most di\u00c6 ult instan e (n = 56; d = 10) was solvedas in onsistent with the bB/stati /global heuristi using about 91,000 visited nodes while allheuristi s using one of the maximal tra table subsets as a split set failed to solve it evenwhen ea h was allowed to visit 20,000,000 nodes in the sear h spa e.We did the same examination for the set of 75,081 hard instan es of H(n; d; 4:0). 2,640 ofthese instan es ould not be solved by any of the 20 di erent heuristi s using 10,000 visitednodes ea h. Their distribution is shown in Figure 12(a). Similar to the hard instan esof A(n; d; 4:0), the heuristi s using bH8 as a split set were the most su essful ones forsolving the hard instan es of H(n; d; 4:0), as shown in Table 2. They solved more of thehard instan es than any other heuristi s and produ ed the fastest response of more than50% of the hard instan es. There is no signi ant di eren e between using C8;Q8; or bBas a split set, neither in the number of solved instan es nor in the per entage of rstresponse. Like in the previous ase, omputing onstrainedness using the stati /global or thedynami /lo al heuristi s resulted in more su essful paths through the sear h spa e by whi h309\nRenz & Nebel Number of hard instances for H(n,d,4.0) using orthogonal combination\n6 8 10 12 14 16 18 20 20\n40\n60\n80 0 20 40 60 80\n100\naverage degree\nnodes\n#Hard Instances\n0\n20\n40\n60\n80\n100\n20000 40000 60000 80000 100000\nN um\nbe r\nof s\nol ve\nd in\nst an\nce s\nNumber of visited nodes\nFirst Response for Solving the Hard Instances of H(n,d,4.0)\ninconsistent consistent\n(a) (b)Figure 12: Hard instan es using orthogonal ombination of all heuristi for H(n; d; 4:0),(a) shows their distribution, (b) shows their fastest solution when using up to100,000 visited nodes per heuristi more instan es were solved within 10,000 visited nodes than by the other ombinations. Onaverage they produ ed faster solutions than the other ombinations.The same observations as for A(n; d; 4:0) an be made when harting the fastest solutionsof the hard instan es of H(n; d; 4:0) (see Figure 11). About 29% (21,307) of the solvedinstan es are in onsistent. Most of them were, again, solved faster than the onsistentinstan es. More than 75% of the hard instan es an be solved with at most 150 visited nodes.90% an be solved with at most 1,300 visited nodes. Sin e the bH8/dynami /lo al heuristi alone solves more than 86% of the instan es, it seems di\u00c6 ult to ombine di erent heuristi sin a way that more hard instan es an be solved while using not more than 10,000 visitednodes altogether. However, when orthogonally ombining the two best performing heuristi s( bH8/dynami /lo al and bH8/stati /global) allowing ea h of them a maximal number of 5,000visitable nodes, we an solve 92% (69,056) of the hard instan es.We tried to solve the 2,640 hard instan es of H(n; d; 4:0) whi h are not solvable usingorthogonal ombination of heuristi s with at most 10,000 visited nodes by using a maximalnumber of 100,000 visited nodes. 471 of these instan es are still not solvable, more than75% of the solved instan es are in onsistent. The fastest response for the solved instan esis harted in Figure 12(b). The most su essful heuristi s in giving the fastest responseare bH8/dynami /lo al (42.5%) and bH8/stati /global (26.6%). The three heuristi s usingstati /global omputation of onstrainedness ombined with using Q8; C8; and bB as a splitset gave the fastest response for 15.9% of the solved instan es where the bB strategy was byfar the best among the three (9.4%).8. Combining Heuristi s for Solving Large Instan esIn the previous se tion we found that ombining di erent heuristi s orthogonally an solvemore instan es using the same amount of visited nodes than any heuristi alone an solve. Inthis se tion we use these results in order to identify the size of randomly generated instan es310\nEffi ient Methods for Qualitative Spatial Reasoningup to whi h almost all of them, espe ially those in the phase-transition region, an still besolved in a eptable time. Sin e many instan es of H(n; d; 4:0) are already too di\u00c6 ult fora size of n = 80 (see Figure 12), we restri t our analysis to the instan es of A(n; d; 4:0) andstudy randomly generated instan es with a size of more than n = 100 nodes.For instan es of a large size allowing a maximal number of 10,000 visited nodes inthe sear h spa e is too mu h for obtaining an a eptable runtime. 10,000 visited nodes forinstan es of size n = 100 orresponds to a runtime of more than 10 se onds on a Sun Ultra1,for larger instan es it gets mu h slower. Therefore, we have to restri t the maximal numberof visited nodes in order to a hieve an a eptable runtime. Given a multi-pro essor ma hine,the di erent heuristi s an be run orthogonally on di erent pro essors using the maximalnumber of visited nodes ea h. If the orthogonal ombination of the di erent heuristi s issimulated on a single-pro essor ma hine, the maximal number of nodes has to be dividedby the number of used heuristi s to obtain the available number of visitable nodes for ea hheuristi . Thus, the more di erent heuristi s we use, the less visitable nodes are availablefor ea h heuristi . Therefore, in order to a hieve the best performan e, we have to ndthe ombination of heuristi s that solves most instan es within a given number of visitablenodes. The hosen heuristi s should not only solve many instan es alone, they should also omplement ea h other well, i.e., instan es whi h annot be solved by one heuristi shouldbe solvable by the other heuristi .We started by nding the optimal ombination of heuristi s for the set of 788 hardinstan es of A(n; d; 4:0). From our empiri al evaluation given in Se tion 6 we know howmany visited nodes ea h heuristi needs in order to solve ea h of the 788 hard instan es.Therefore, we omputed the number of solved instan es for all 220 possible ombinationsof the heuristi s using an in reasing maximal number of visitable nodes for all heuristi stogether. Sin e we only tried to nd the ombination whi h solves the most instan es,this an be omputed quite fast. The results are given in Table 3. They show that agood performan e an be obtained with a maximal number of 600 visited nodes. In this ase four heuristi s were involved, i.e., 150 visitable nodes are spent on ea h of the fourheuristi s. Sin e the same ombination of heuristi s ( bH8/stati /global, bH8/dynami /lo al,C8/dynami /lo al, bB/stati /lo al) is also the best for up to 1,000 visitable nodes, we hoosethis ombination for our further analysis. We hoose the order in whi h they are pro essed tobe 1. bH8/dynami /lo al, 2. bH8/stati /global, 3. C8/dynami /lo al, 4. bB/stati /lo al a ordingto their rst response behavior given in Table 2. Note that although the two heuristi sC8/dynami /lo al and bB/stati /lo al do not show a parti ularly good performan e whenrunning them alone (see Table 2), they seem to best omplement the other two heuristi s.What we have to nd next is the maximal number of visitable nodes we spend for theheuristi s. For this we ran the best performing heuristi ( bH8/dynami /lo al) on instan esof the phase-transition region of varying sizes. It turned out that for almost all onsistentinstan es the number of visited nodes required for solving them was slightly less than twi ethe size of the instan es while most in onsistent instan es are also not path- onsistent and,thus, solvable with only one visited node. Therefore, we ran the four heuristi s in thefollowing allowing 2n visited nodes ea h, where n is the size of the instan e, i.e., togetherwe allow at most 8n visitable nodes. We randomly generated test instan es a ording tothe A(n; d; 4:0) model for a size of n = 110 regions up to a size of n = 500 regions witha step of 10 regions and 100 instan es for ea h size and ea h average degree ranging from311\nRenz & Nebel Max Nodes Solved Instan es Combination of Heuristi s100 516 bH8-d-l200 705 bH8-s-g300 759 bH8-s-g, bH8-d-l400 769 bH8-s-g, C8-d-l500 774 bH8-s-g, bH8-d-l, C8-d-l600 778 bH8-s-g, bH8-d-l, C8-d-l, bB-s-l700 780 bH8-s-g, bH8-d-l, C8-d-l, bB-s-l800 783 bH8-s-g, bH8-d-l, C8-d-l, bB-s-l900 784 bH8-s-g, bH8-d-l, C8-d-l, bB-s-l1100 785 bH8-s-g, bH8-d-l, C8-d-l, bB-s-l, bB-s-g1300 786 bH8-s-g, bH8-d-l, bB-s-l, bB-s-g3900 787 bH8-s-g, bH8-d-l, bB-d-lTable 3: Best performan e of ombining di erent heuristi s for solving the 787 solvable hardinstan es of A(n; d; 4:0) with a xed maximal number of visited nodes\nProbability of satisfiability for A(n,d,4.0)\n4 6 8 10 12 14 16 18 150 200 250\n300 350\n400 450\n500 50\n100\naverage degree\nnodes\nProbability (%)\nAverage number of visited nodes for A(n,d,4.0)\n4 6 8 10 12 14 16 18 150 200 250\n300 350\n400 450\n500 100 200 300 400 500 600 700 800 900\n1000\naverage degree\nnodes\nVisited nodes\nFigure 13: Probability of satis ability for A(n; d; 4:0) (100 instan es per data point) andaverage number of visited nodes of the path- onsistent instan es when usingorthogonal ombination of the four sele ted heuristi sd = 2:0 to d = 18:0 with a step of 0.5, a total number of 132,000 instan es. Sin e solvinglarge instan es using ba ktra king requires a lot of memory, we solved the instan es on aSun Ultra60 with 1GB of main memory.The generated instan es display a phase-transition behavior whi h ontinues the onegiven in Figure 5. The phase-transition ranges from d = 10:0 for n = 110 to d = 10:5for n = 500 (see Figure 13). Apart from 112 instan es, all other instan es we gen-erated were solvable by orthogonal ombination of the four heuristi s ( bH8/stati /global,bH8/dynami /lo al, C8/dynami /lo al, bB/stati /lo al) spending less than 2n visited nodes312\nEffi ient Methods for Qualitative Spatial Reasoning Percentile 70% CPU time using orthogonal combination for A(n,d,4.0)\nPercentile 99% CPU time using orthogonal combination for A(n,d,4.0)\nRenz & Nebelsolved e\u00c6 iently by ea h of our heuristi s, instan es in the phase-transition region an beextremely hard. For the instan es of the general model, most path- onsistent instan esare also onsistent. Conversely, path- onsisten y is a bad approximation to onsisten y forinstan es of the hard model. These instan es are also mu h harder to solve than instan esof the general model.When omparing the di erent heuristi s, we found that the heuristi s using one of themaximal tra table subsets as a split set are not as mu h faster in de iding onsisten y ofRSAT instan es as their theoreti al advantage given by the redu ed average bran hing fa torand the resulting exponentially smaller size of the sear h spa e indi ates. This is be auseusing path- onsisten y as a forward he king method onsiderably redu es the sear h spa ein all ases. Nevertheless, using one of the maximal tra table subsets as a split set, inparti ular bH8, still leads to a mu h faster solution and solves more instan es in reasonabletime than the other heuristi s. Although the two maximal tra table subsets Q8 and C8 ontain more relations than bH8, their average bran hing fa tor is lower, i.e., when usingbH8 one has to de ompose more relations (256 148 = 108) than when using the other twosets (96 and 98 relations, respe tively), but bH8 splits the relations better than the othertwo sets. Most relations an be de omposed into only two bH8 sub-relations, while manyrelations must be de omposed into three C8 sub-relations or into three Q8 sub-relations.This explains the superior performan e of heuristi s involving bH8 for de omposition.Among the instan es we generated, we stored those whi h ould not be solved by allheuristi s within a maximum number of 10,000 visited nodes in the sear h spa e in order to nd out how the di erent heuristi s perform on these hard instan es. We found that almostall hard instan es are lo ated in the phase-transition region and that there are many morehard instan es in the hard model than in the general model. We orthogonally ombined allheuristi s and ran them on all hard instan es. This turned out to be very su essful. Apartfrom one instan e, all hard instan es of the general model ould be solved, most of themwith a very low number of visited nodes. The hard instan es of the hard model were mu hmore di\u00c6 ult: many of them ould not be solved by any of the heuristi s. Nevertheless,many more instan es were solved by orthogonally ombining the heuristi s than by ea hheuristi alone. Again, most of them were solved using a low number of visited nodes.Based on our observations on orthogonally ombining di erent heuristi s, we tried toidentify the ombination of heuristi s whi h is most su essful in e\u00c6 iently solving manyinstan es and used this ombination for solving very large instan es. It turned out thatthe best ombination involves only heuristi s whi h use maximal tra table subsets for de- omposition. With this ombination we were able to solve almost all randomly generatedinstan es of the phase-transition region of the general model up to a size of n = 500 regionsvery e\u00c6 iently. This seems to be impossible when onsidering the enormous size of thesear h spa e, whi h is on average 1039323 for instan es of size n = 500 when using bH8 as asplit set.Our results show that despite its NP-hardness, we were able to solve almost all ran-domly generated RSAT instan es of the general model e\u00c6 iently. This is neither due to thelow number of di erent RCC-8 relations (instan es generated a ording to the hard modelare very hard in the phase-transition region) nor to our generation pro edure for randominstan es whi h does not lead to trivially awed instan es asymptoti ally. It is mainly dueto the maximal tra table subsets whi h over a large fra tion of RCC-8 and whi h lead314\nEffi ient Methods for Qualitative Spatial Reasoningto extremely low bran hing fa tors. Sin e there are di erent maximal tra table subsets,they allow hoosing between many di erent ba ktra king heuristi s whi h further in reasese\u00c6 ien y: some instan es an be solved easily by one heuristi , other instan es by otherheuristi s. Heuristi s involving maximal tra table sub lasses showed the best behavior butsome instan es an be solved faster when other tra table subsets are used. The full lassi- ation of tra table subsets gives the possibility of generating hard instan es with a highprobability. Many randomly generated instan es of the phase-transition region are veryhard when using only relations whi h are not ontained in any of the tra table subsetsand onsist of more than n = 60 regions. The next step in developing e\u00c6 ient reasoningmethods for RCC-8 is to nd methods whi h are also su essful in solving most of the hardinstan es of the hard model.The results of our empiri al evaluation of reasoning with RCC-8 suggest that analyzingthe omputational properties of a reasoning problem and identifying tra table sub lasses ofthe problem is an ex ellent way for a hieving e\u00c6 ient reasoning me hanisms. In parti ularmaximal tra table sub lasses an be used to develop more e\u00c6 ient methods for solvingthe full problem sin e their average bran hing fa tor is the lowest. Using the re nementmethod developed in Renz's (1999) paper, tra table sub lasses of a set of relations forminga relation algebra an be identi ed almost automati ally. This method makes it very easyto develop e\u00c6 ient algorithms. A further indi ation of our empiri al evaluation is that it an be mu h more e e tive (even and espe ially for hard instan es of the phase-transitionregion) to orthogonally ombine di erent heuristi s than to try to get the nal epsilon out ofa single heuristi . This answers a question raised by Nebel (1997) of whether the orthogonal ombination of heuristi s is also useful in the phase-transition region. In our experimentsthis lead to mu h better results even when simulating the orthogonal ombination of di erentheuristi s on a single pro essor ma hine and spending altogether the same resour es asfor any one heuristi alone. In ontrast to the method of time sli ing between di erentheuristi s, we started a new heuristi only if the previous heuristi failed after a ertainnumber of visited nodes in the sear h spa e. The order in whi h we ran the heuristi sdepended on their performan e and on how well they omplemented ea h other, moresu essful heuristi s were used rst. This is similar to using algorithm portfolios as proposedby Huberman et al. (1997). Whi h heuristi s perform better and whi h ombination is themost su essful one is a matter of empiri al evaluation and depends on the parti ularproblem. Heuristi s depending on maximal tra table sub lasses, however, should lead tothe best performan e.For CSPs with nite domains there are many theoreti al results about lo alizing thephase-transition behavior and about predi ting where hard instan es are lo ated. In on-trast to this, there are basi ally no su h theoreti al results for CSPs with in nite domainsas used in spatial and temporal reasoning. As our initial theoreti al analysis shows, theo-reti al results on CSPs with nite domains do not ne essarily extend to CSPs with in nitedomains. It would be very interesting to develop a more general theory for CSPs within nite domains, possibly similar to Williams and Hogg's \\Deep Stru ture\" (Williams &Hogg, 1994) or Gent et al.'s \\Kappa\" theory (Gent, Ma Intyre, Prosser, & Walsh, 1996).315\nRenz & NebelA knowledgmentsWe would like to thank Ronny Fehling for his assistan e in developing the programs, MalteHelmert for proof reading the paper, and the three anonymous reviewers for their veryhelpful omments.This resear h has been supported by DFG as part of the proje t fast-qual-spa e, whi his part of the DFG spe ial resear h e ort on \\Spatial Cognition\". The rst author has beenpartially supported by a Marie Curie Fellowship of the European Community programme\\Improving Human Potential\" under ontra t number HPMF-CT-2000-00667. A prelimi-nary version of this paper appeared in the Pro eedings of the 13th European Conferen e onArti ial Intelligen e (Renz & Nebel, 1998).Referen esA hlioptas, D., Kirousis, L., Kranakis, E., Krizan , D., Molloy, M., & Stamatiou, Y. (1997).Random onstraint satisfa tion: a more a urate pi ture. In 3rd Conferen e on thePrin iples and Pra ti e of Constraint Programming (CP'97), Vol. 1330 of LNCS, pp.107{120. Springer-Verlag.Allen, J. F. (1983). Maintaining knowledge about temporal intervals. Communi ations ofthe ACM, 26 (11), 832{843.Bennett, B. (1994). Spatial reasoning with propositional logi . In Doyle, J., Sandewall,E., & Torasso, P. (Eds.), Prin iples of Knowledge Representation and Reasoning:Pro eedings of the 4th International Conferen e, pp. 51{62, Bonn, Germany. MorganKaufmann.Bennett, B. (1997). Logi al Representations for Automated Reasoning about Spatial Rela-tionships. Ph.D. thesis, S hool of Computer Studies, The University of Leeds.Cheeseman, P., Kanefsky, B., & Taylor, W. M. (1991). Where the really hard problems are.In Pro eedings of the 12th International Joint Conferen e on Arti ial Intelligen e,pp. 331{337, Sydney, Australia. Morgan Kaufmann.Gent, I., Ma Intyre, E., Prosser, P., Smith, B., & Walsh, T. (2001). Random onstraintsatisfa tion: Flaws and stru ture. CONSTRAINTS, 6 (4), 345{372.Gent, I., Ma Intyre, E., Prosser, P., & Walsh, T. (1996). The onstrainedness of sear h. InPro eedings of the 13th National Conferen e on AI (AAAI'96), pp. 246{252.Golumbi , M. C., & Shamir, R. (1993). Complexity and algorithms for reasoning about time:A graph-theoreti approa h. Journal of the Asso iation for Computing Ma hinery,40 (5), 1128{1133.Grigni, M., Papadias, D., & Papadimitriou, C. (1995). Topologi al inferen e. In Pro eedingsof the 14th International Joint Conferen e on Arti ial Intelligen e, pp. 901{906,Montreal, Canada. 316\nEffi ient Methods for Qualitative Spatial ReasoningHarali k, R. M., & Elliot, G. L. (1980). In reasing tree sear h e\u00c6 ien y for onstraintsatisfa tion problems. Arti ial Intelligen e, 14, 263{313.Huberman, B., Lukose, R., & Hogg, T. (1997). An e onomi s approa h to hard omputa-tional problems. S ien e, 275, 51{54.Ladkin, P. B., & Reinefeld, A. (1992). E e tive solution of qualitative interval onstraintproblems. Arti ial Intelligen e, 57 (1), 105{124.Ladkin, P. B., & Reinefeld, A. (1997). Fast algebrai methods for interval onstraint prob-lems. Annals of Mathemati s and Arti ial Intelligen e, 19 (3,4).Ma kworth, A. K. (1977). Consisten y in networks of relations. Arti ial Intelligen e, 8,99{118.Ma kworth, A. K., & Freuder, E. C. (1985). The omplexity of some polynomial network onsisten y algorithms for onstraint satisfa tion problems. Arti ial Intelligen e, 25,65{73.Montanari, U. (1974). Networks of onstraints: fundamental properties and appli ations topi ture pro essing. Information S ien e, 7, 95{132.Nebel, B. (1995). Computational properties of qualitative spatial reasoning: First results. InWa hsmuth, I., Rollinger, C.-R., & Brauer, W. (Eds.), KI-95: Advan es in Arti ialIntelligen e, Vol. 981 of Le ture Notes in Arti ial Intelligen e, pp. 233{244, Bielefeld,Germany. Springer-Verlag.Nebel, B. (1997). Solving hard qualitative temporal reasoning problems: Evaluating thee\u00c6 ien y of using the ORD-Horn lass. CONSTRAINTS, 3 (1), 175{190.Randell, D. A., Cohn, A. G., & Cui, Z. (1992a). Computing transitivity tables: A hallengefor automated theorem provers. In Pro eedings of the 11th CADE. Springer-Verlag.Randell, D. A., Cui, Z., & Cohn, A. G. (1992b). A spatial logi based on regions and onne tion. In Nebel, B., Swartout, W., & Ri h, C. (Eds.), Prin iples of KnowledgeRepresentation and Reasoning: Pro eedings of the 3rd International Conferen e, pp.165{176, Cambridge, MA. Morgan Kaufmann.Renz, J. (1999). Maximal tra table fragments of the Region Conne tion Cal ulus: A om-plete analysis. In Pro eedings of the 16th International Joint Conferen e on Arti ialIntelligen e, pp. 448{454, Sto kholm, Sweden.Renz, J. (2000). Qualitative Spatial Reasoning with Topologi al Information. Ph.D. thesis,Institut f ur Informatik, Albert-Ludwigs-Universit at Freiburg.Renz, J., & Nebel, B. (1998). E\u00c6 ient methods for qualitative spatial reasoning. In Pro- eedings of the 13th European Conferen e on Arti ial Intelligen e, pp. 562{566, Am-sterdam, The Netherlands. Wiley. 317\nRenz & NebelRenz, J., & Nebel, B. (1999). On the omplexity of qualitative spatial reasoning: A maximaltra table fragment of the Region Conne tion Cal ulus. Arti ial Intelligen e, 108 (1-2), 69{123.Selman, B., Levesque, H. J., & Mit hell, D. (1992). A new method for solving hard sat-is ability problems. In Pro eedings of the 10th National Conferen e of the Ameri anAsso iation for Arti ial Intelligen e, pp. 440{446, San Jose, CA. MIT Press.van Beek, P., & Man hak, D. W. (1996). The design and experimental analysis of algorithmsfor temporal reasoning. Journal of Arti ial Intelligen e Resear h, 4, 1{18.Williams, C. P., & Hogg, T. (1994). Exploiting the deep stru ture of onstraint problems.Arti ial Intelligen e, 70, 73{117.\n318"}], "references": [], "referenceMentions": [], "year": 2011, "abstractText": null, "creator": "dvips(k) 5.86 Copyright 1999 Radical Eye Software"}}}