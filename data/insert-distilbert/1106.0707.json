{"id": "1106.0707", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "3-Jun-2011", "title": "Efficient Reinforcement Learning Using Recursive Least-Squares Methods", "abstract": "the recursive least - squares ( rls ) algorithm is one of the most well - known algorithms used in adaptive filtering, system identification and adaptive control. its popularity is mainly due to its fast convergence speed, which is considered to be optimal in practice. in this paper, rls methods are used to solve reinforcement learning problems, where two new reinforcement learning algorithms using linear value function approximators are proposed and analyzed. the two algorithms are called rls - td ( lambda ) and fast - ahc ( fast adaptive heuristic critic ), respectively. rls - td ( lambda ) can be viewed as the extension of rls - td ( 0 ) from lambda = 0 to general lambda within interval [ 0, 1 ], so it is a multi - step temporal - difference ( td ) learning algorithm using rls methods. the convergence with probability one and the limit of convergence of rls - td ( lambda ) are proved for ergodic markov chains. compared to the existing ls - td ( quad lambda ) algorithm, rls - td ( lambda ) reconstruction has advantages better in computation and is more suitable for online learning. the effectiveness of rls - td ( lambda ) filters is analyzed well and verified by learning prediction experiments of markov chains with a wide range of parameter settings. the fast - forward ahc algorithm is derived by applying the proposed rls - td ( lambda ) algorithm in the critic network of the adaptive heuristic critic method. unlike conventional ahc algorithm, fast - robust ahc makes use of rls methods to improve adjusting the learning - prediction calculation efficiency in the reconstructed critic. learning control experiments of the additive cart - pole balancing and the acrobot swing - up problems are conducted to compare the data planning efficiency of fast - ahc with conventional ahc. from the final experimental results, it is shown afterwards that the data efficiency of learning control can also be improved by using rls methods in assessing the learning - prediction process of the critic. the performance of fast - ahc is also compared with improving that of the ahc method using ls - td ( lambda ). furthermore, it is demonstrated in the experiments that different initial values of the variance matrix in rls - tt td ( lambda ) are required to subsequently get better cognitive performance not interfering only in learning prediction but also engaging in enhanced learning control. the experimental results are analyzed broadly based on criticizing the existing theoretical work on the transient phase of forgetting posterior factor matching rls methods.", "histories": [["v1", "Fri, 3 Jun 2011 16:44:06 GMT  (339kb)", "http://arxiv.org/abs/1106.0707v1", null]], "reviews": [], "SUBJECTS": "cs.LG cs.AI", "authors": ["h he", "d hu", "x xu"], "accepted": false, "id": "1106.0707"}, "pdf": {"name": "1106.0707.pdf", "metadata": {"source": "CRF", "title": "Efficient Reinforcement Learning Using Recursive Least-Squares Methods", "authors": ["Xin Xu", "Han-gen He", "Dewen Hu"], "emails": ["XUXIN_MAIL@263.NET", "HEHANGEN@CS.HN.CN", "DWHU@NUDT.EDU.CN"], "sections": [{"heading": null, "text": "\u00a92002 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.\nThe recursive least-squares (RLS) algorithm is one of the most well-known algorithms used in adaptive filtering, system identification and adaptive control. Its popularity is mainly due to its fast convergence speed, which is considered to be optimal in practice. In this paper, RLS methods are used to solve reinforcement learning problems, where two new reinforcement learning algorithms using linear value function approximators are proposed and analyzed. The two algorithms are called RLS-TD( ) and Fast-AHC (Fast Adaptive Heuristic Critic), respectively. RLS-TD( ) can be viewed as the extension of RLS-TD(0) from =0 to general 0 1, so it is a multi-step temporal-difference (TD) learning algorithm using RLS methods. The convergence with probability one and the limit of convergence of RLS-TD( ) are proved for ergodic Markov chains. Compared to the existing LS-TD( ) algorithm, RLS-TD( ) has advantages in computation and is more suitable for online learning. The effectiveness of RLS-TD( ) is analyzed and verified by learning prediction experiments of Markov chains with a wide range of parameter settings.\nThe Fast-AHC algorithm is derived by applying the proposed RLS-TD( ) algorithm in the critic network of the adaptive heuristic critic method. Unlike conventional AHC algorithm, Fast-AHC makes use of RLS methods to improve the learning-prediction efficiency in the critic. Learning control experiments of the cart-pole balancing and the acrobot swing-up problems are conducted to compare the data efficiency of Fast-AHC with conventional AHC. From the experimental results, it is shown that the data efficiency of learning control can also be improved by using RLS methods in the learning-prediction process of the critic. The performance of Fast-AHC is also compared with that of the AHC method using LS-TD( ). Furthermore, it is demonstrated in the experiments that different initial values of the variance matrix in RLS-TD( ) are required to get better performance not only in learning prediction but also in learning control. The experimental results are analyzed based on the existing theoretical work on the transient phase of forgetting factor RLS methods."}, {"heading": "1. Introduction", "text": "In recent years, reinforcement learning (RL) has been an active research area not only in machine learning but also in control engineering, operations research and robotics (Kaelbling et al.,1996; Bertsekas, et al.,1996; Sutton and Barto,1998; Lin,1992). It is a computational approach to\nunderstand and automate goal-directed learning and decision-making, without relying on exemplary supervision or complete models of the environment. In RL, an agent is placed in an initial unknown environment and only receives evaluative feedback from the environment. The feedback is called reward or reinforcement signal. The ultimate goal of RL is to learn a strategy for selecting actions such that the expected sum of discounted rewards is maximized.\nSince lots of problems in the real world are sequential decision processes with delayed evaluative feedback, the research in RL has been focused on theory and algorithms of learning to solve the optimal control problem of Markov decision processes (MDPs) which provide an elegant mathematical model for sequential decision-making. In operations research, many results have been presented to solve the optimal control problem of MDPs with model information. However, in reinforcement learning, the model information is assumed to be unknown, which is different from the methods studied in operations research such as dynamic programming. In dynamic programming, there are two elemental processes, which are the policy evaluation process and the policy improvement process, respectively. In RL, there are two similar processes. One is called learning prediction and the other is called learning control. The goal of learning control is to estimate the optimal policy or optimal value function of an MDP without knowing its model. Learning prediction aims to solve the policy evaluation problem of a stationary-policy MDP without any prior model and it can be regarded as a sub-problem of learning control. Furthermore, in RL, learning prediction is different from that in supervised learning. As pointed out by Sutton (1988), the prediction problems in supervised learning are single-step prediction problems while those in reinforcement learning are multi-step prediction problems. To solve multi-step prediction problems, a learning system must predict outcomes that depend on a future sequence of decisions. Therefore, the theory and algorithms for multi-step learning prediction become an important topic in RL and much research work has been done in the literature (Sutton, 1988; Tsitsiklis and Roy, 1997).\nAmong the proposed multi-step learning prediction methods, temporal-difference (TD) learning (Sutton, 1988) is one of the most popular methods. It was studied and applied in the early research of machine learning, including the celebrated checkers-playing program (Minsky, 1954; Samuel, 1959). In 1988, Sutton presented the first formal description of temporal- difference methods and the TD( ) algorithm (Sutton,1988). Convergence results are established for tabular temporal-difference learning algorithms where the cardinality of tunable parameters is the same as that of the state space (Sutton, 1988; Watkins,et al.,1992; Dayan,et al., 1994; Jaakkola, et al.,1994). Since many real-world applications have large or infinite state space, value function approximation (VFA) methods need to be used in those cases. When combined with nonlinear value function approximators, TD( ) can not guarantee convergence and several results regarding divergence have been reported in the literature (Tsitsiklis and Roy,1997). For TD( ) with linear function approximators, also called linear TD( ) algorithms, several convergence proofs have been presented. Dayan (1992) showed the convergence in the mean for linear TD( ) algorithms with arbitrary 10 . Tsitsiklis and Roy (1994) proved the convergence for a\nspecial class of TD learning algorithms, known as TD(0), while in Tsitsiklis and Roy (1997), they extended the early results to general linear TD( ) case and proved the convergence with probability one.\nThe above linear TD( ) algorithms have rules for updating parameters similar to those in gradient-descent methods. However, as in gradient-learning methods, a step-size schedule must be carefully designed not only to guarantee convergence but also to obtain good performance. In\naddition, there is inefficient use of data that slows the convergence of the algorithms. Based on the theory of linear least-squares estimation, Brartke and Barto (1996) proposed two temporal-difference algorithms called the Least-Squares TD(0) algorithm (LS-TD(0)) and the Recursive Least- Squares TD(0) algorithm (RLS-TD(0)), respectively. LS-TD(0) and RLS-TD(0) are more efficient in a statistical sense than conventional linear TD( ) algorithms and they eliminate the design of step-size schedules. Furthermore, the convergence of LS-TD(0) and RLS-TD(0) has been provided in theory. The above two algorithms can be viewed as the least-squares versions of conventional linear TD(0) methods. However, as has been shown in the literature, TD learning algorithms such as TD( ) with 0< <1 that update predictions based on the estimates of multiple steps are more efficient than Monte-Carlo methods as well as TD(0). By employing the mechanism of eligibility traces, which is determined by , TD( ) algorithms with 0< <1 can extract more information from historical data. Recently, a class of linear temporal-difference learning algorithms called LS-TD( ) has been proposed by Boyan (1999,2002), where least-squares methods are employed to compute the value-function estimation of TD( ) with 0 1. Although LS-TD( ) is more efficient than TD( ), it requires too much computation per time-step when online updates are needed and the number of state features becomes large.\nIn system identification, adaptive filtering and adaptive control, the recursive least-squares (RLS) (Young,1984; Ljung, 1983; Ljung,1977) method, commonly used to reduce the computational burden of least-squares methods, is more suitable for online estimation and control. Although RLS-TD(0) makes use of RLS methods, it does not employ the mechanism of eligibility traces. Based on the work of Tsitsiklis and Roy (1994, 1997), Boyan (1999,2002) and motivated by the above ideas, a new class of temporal-difference learning methods, called the RLS-TD( ) algorithm, is proposed and analyzed formally in this paper. RLS-TD( ) is superior to conventional linear TD( ) algorithms in that it makes use of RLS methods to improve the learning efficiency in a statistical point of view and eliminates the step-size schedules. RLS-TD( ) has the mechanism of eligibility traces and can be viewed as the extension of RLS-TD(0) from =0 to general 0 1. The convergence with probability 1 of RLS-TD( ) is proved for ergodic Markov chains and the limit of convergence is also analyzed. In learning prediction experiments for Markov chains, the performance of RLS-TD( ) and TD( ) as well as LS-TD( ) is compared, where a wide range of parameter settings is tested. In addition, the influence of the initialization parameters in RLS-TD( ) is also discussed. It is observed that the rate of convergence is influenced by the initialization of the variance matrix, which is a phenomenon investigated theoretically in adaptive filtering (Moustakides, 1997; Haykin, 1996).\nAs will be analyzed in the following sections, there are two benefits of the extension from RLS-TD(0) to RLS-TD( ). One is that the value of (0 1) will still affect the performance of the RLS-based temporal-difference algorithms. Although for RLS-TD( ), the rate of convergence is mainly influenced by the initialization of the variance matrix, the bound of approximation error is dominantly determined by the parameter . The smallest error bound can be obtained for =1 and the worst bound is obtained for =0. These bounds suggest that the value of should be selected appropriately to obtain the best approximation error. The second benefit is that RLS-TD( ) is more suitable for online learning than LS-TD( ) since the computation per time-step is reduced from O(K3) to O(K2), where K is the number of state features.\nThe Adaptive-Heuristic-Critic (AHC) learning algorithm is a class of reinforcement learning\nmethods that has an actor-critic architecture and can be used to solve full reinforcement learning or learning control problems. By applying the RLS-TD( ) algorithm in the critic, the Fast-AHC algorithm is proposed in this paper. Using RLS methods in the critic, the performance of learning prediction in the critic is improved so that learning control problems can be solved more efficiently. Simulation experiments on the learning control of the cart-pole balancing problem and the swing-up of an acrobot are conducted to verify the effectiveness of the Fast-AHC method. By comparing with conventional AHC methods which use TD( ) in the critic, it is demonstrated that Fast-AHC can obtain higher data efficiency than conventional AHC methods. Experiments on the performance comparisons between AHC methods using LS-TD( ) and Fast-AHC are also conducted. In the learning control experiments, it is also illustrated that the initializing constant of the variance matrix in RLS-TD( ) influences the performance of Fast-AHC and different values of the constant should be selected to get better performance in different problems. The above results are analyzed based on the theoretical work on the transient phase of RLS methods.\nThis paper is organized as follows. In Section 2, an introduction on the previous linear temporal-difference algorithms is presented. In Section 3, the RLS-TD( ) algorithm is proposed and its convergence (with probability one) is proved. In Section 4, a simulation example of the value-function prediction for absorbing Markov chains is presented to illustrate the effectiveness of the RLS-TD( ) algorithm, where different parameter settings for different algorithms including LS-TD( ) are studied. In Section 5, the Fast-AHC method is proposed and the simulation experiments on the learning control of the cart-pole balancing and the acrobot are conducted to compare Fast-AHC with the conventional AHC method as well as the LS-TD( )-based AHC method. Some simulation results are presented and analyzed in detail. The last section contains concluding remarks and directions for future work."}, {"heading": "2. Previous Work on Linear Temporal-Difference Algorithms", "text": "In this section, a brief discussion on the conventional linear TD( ) algorithm and RLS-TD(0) as well as the LS-TD( ) algorithm will be given. First of all, some mathematical notations are presented as follows.\nConsider a Markov chain whose states lie in a finite or countable infinite space S. The states of the Markov chain can be indexed as {1,2,\u2026,n}, where n is possibly infinite. Although the algorithms and the results in this paper are applicable to Markov chains with general state space, the discussion in this paper will be restricted within the cases with a countable state space to simplify the notation. The extension to Markov chains with a general state space only requires the translation of the matrix notation into operator notation.\nLet the trajectory generated by the Markov chain be denoted by {xt |t=0,1,2,\u2026; xt S}.The dynamics of the Markov chain is described by a transition probability matrix P whose (i,j)-th entry, denoted by pij, is the transition probability for xt+1=j given that xt=i. For each state transition from xt to xt+1, a scalar reward rt is defined. The value function of each state is defined as follows:\n}{)( 0 0 t\nt t ixrEiV (1)\nwhere 0< 1 is a discount factor.\nIn the TD( ) algorithm, there are two basic mechanisms which are the temporal difference\nand the eligibility trace, respectively. Temporal differences are defined as the differences between two successive estimations and have the following form.\n)( ~ )( ~\n1 tttttt xVxVr (2)\nwhere xt+1 is the successive state of xt, )( ~ xV denotes the estimate of the value function V(x) and rt\nis the reward received after the state transition from xt to xt+1.\nThe Eligibility trace can be viewed as an algebraic trick to improve learning efficiency without recording all the data of a multi-step prediction process. This trick is based on the idea of using the truncated return of a Markov chain. In temporal-difference learning with eligibility traces, an n-step truncated return is defined as\n)( ~\n... 1 1 1 ntt n nt n tt n t sVrrrR (3)\nFor an absorbing Markov chain whose length is T, the weighted average of truncated returns\nis\nT tTn t\ntT\nn\nn t RRR\n1 1\n1\n1)1( (4)\nwhere 10 is a decaying factor and RT= T T tt rrr ...1 is the Monte-Carlo return at the terminal state. In each step of the TD( ) algorithm, the update rule of the value function estimation is determined by the weighted average of truncated returns defined above. The corresponding update equation is\n))( ~ ()( ~\nitttit sVRsV (5)\nwhere t is a learning factor.\nThe update equation (5) can be used only after the whole trajectory of the Markov chain is observed. To realize incremental or online learning, eligibility traces are defined for each state as follows:\ntiit\ntiit\nit sssz\nsssz sz\nif),(\nif,1)( )(1 (6)\nThe online TD( ) update rule with eligibility traces is\n)()( ~ )( ~\n11 itttitit szsVsV (7)\nwhere t is the temporal difference at time step t, which is defined in (2) and z0(s)=0 for all s.\nSince the state space of a Markov chain is usually large or infinite in practice, function approximators such as neural networks are commonly used to approximate the value function. TD( ) algorithms with linear function approximators are the most popular and well-studied ones.\nConsider a general linear function approximator with a fixed basis function vector\nT n xxxx ))(),...,(),(()( 21\nThe estimated value function can be denoted as\nt T t WxxV )()( ~\n(8)\nwhere Wt =(w1, w2,\u2026,wn) T is the weight vector.\nThe corresponding incremental weight update rule is\n111 ))()(( ttt T tt T tttt zWxWxrWW (9)\nwhere the eligibility trace vector Tntttt szszszsz ))(),...,(),(()( 21 is defined as\n)(1 ttt xzz (10)\nIn Tsitsiklis and Roy (1997), the above linear TD( ) algorithm is proved to converge with probability 1 under certain assumptions and the limit of convergence W* is also derived, which satisfies the following equation.\n0)]([)]([ 0 * 0 tt XbEWXAE (11)\nwhere Xt =(xt,xt+1,zt+1) (t=1,2,\u2026) form a Markov process, E0[\u00b7] stands for the expectation with respect to the unique invariant distribution of {Xt}, and A(Xt) and b(Xt) are defined as\n))()(()( 1t T t T tt xxzXA (12)\nttt rzXb )( (13)\nTo improve the efficiency of linear TD( ) algorithms, least-squares methods are used with the linear TD(0) algorithm, and the LS-TD(0) and RLS-TD(0) algorithms are suggested (Brartke and Barto, 1996). In LS-TD(0) and RLS-TD(0), the following quadratic objective function is defined.\n1\n1\n2 1 ])([\nT\nt\nT t T tt WrJ (14)\nThus, the aim of LS-TD(0) and RLS-TD(0) is to obtain a least-squares estimation of the real\nvalue function which satisfies the following Bellman equation.\n)](),([)( 11 ttttt xVxxrExV (15)\nBy employing the instrumental variables approach (Soderstrom and Stoica, 1983), the\nleast-squares solution of (14) is given as\nT\nt\ntt\nT\nt\nT tttTDLS rW\n1\n1\n1\n1)0( )()))((( (16)\nwhere t is the instrumental variable chosen to be uncorrelated with the input and output noises.\nIn RLS-TD(0), recursive least-squares methods are used to decrease the computational bur-\nden of LS-TD(0). The update rules of RLS-TD(0) are as follows:\n))(1/())(( 111 tt T ttt T ttttttt PWrPWW (17)\n))(1/()( 111 tt T ttt T tttttt PPPPP (18)\nThe convergence (with probability one) of LS-TD(0) and RLS-TD(0) is proved for periodic and\nabsorbing Markov chains under certain assumptions (Brartke and Barto,1996).\nIn Boyan (1999,2002), LS-TD( ) is proposed by solving (11) directly and the model-based\nproperty of LS-TD( ) is also analyzed. However, for LS-TD( ), the computation per time-step is O(K 3 ), i.e., the cubic order of the state feature number. Therefore the computation required by\nLS-TD( ) increases very fast when K increases, which is undesirable for online learning.\nIn the next section, we propose the RLS-TD( ) algorithm by making use of recursive least-squares methods so that the computational burden of LS-TD( ) can be reduced from O(K3) to O(K2). We also give a rigorous mathematical analysis on the algorithm, where the convergence\n(with probability 1) of RLS-TD( ) is proved."}, {"heading": "3. The RLS-TD( ) Algorithm", "text": "For the Markov chain discussed above, when linear function approximators are used, the\nleast-squares estimation problem of (11) has the following objective function.\n2\n11\n)()( T\nt\nt\nT\nt\nt XbWXAJ (19)\nwhere nt nn t RXbRXA )(,)( are defined as (12) and (13), respectively, is a Euclid norm\nand n is the number of basis functions.\nIn LS-TD( ), the least-squares estimate of the weight vector W is computed according to the\nfollowing equation.\n))(())(( 1\n1\n1\n1 )(\nT\nt\nt\nT\nt\ntTTTDLS XbXAbAW (20)\nwhere\nT\nt\nt T t T t\nT\nt tT xxzXAA 0 1 0 ))()(())(( (21)\nT\nt\ntt\nT\nt tT rzXbb 00 )( (22)\nAs is well known in system identification, adaptive filtering and control, RLS methods are commonly used to solve the computational and memory problems of least-squares algorithms. In the sequel, we present the RLS-TD( ) algorithm based on the above idea. First, the matrix inverse lemma is given as follows:\nLemma 1(Ljung, et al.,1983). If nnRA , 1nRB , nRC 1 and A is invertible, then\n111111 )()( CABCAIBAABCA (23)\nLet\n1tt AP (24)\nIP0 (25)\nttt zPK 11 (26)\nwhere is a positive number and I is the identity matrix.\nThen the weight update rules of RLS-TD( ) are given by\n)))()((/( 11 ttt T t T ttt zPxxzPK (27)\n)))()((( 111 tt T t T tttt WxxrKWW (28)\n]))()(()]))()(([[ 1\n1 1 11 tt T t T ttt T t T tttt PxxzPxxzPPP (29)\nwhere for the standard RLS-TD( ) algorithm, \u00b5=1; for the general forgetting factor RLS-TD( ) case, 0<\u00b5 1.\nThe forgetting factor \u00b5 (0<\u00b5 1) is usually used in adaptive filtering to improve the performance of RLS methods in non-stationary environments. The forgetting factor RLS-TD( ) algorithm with 0<\u00b5 1 can be derived using similar techniques as in Haykin (1996). The detailed derivation of RLS-TD( ) is referred to Appendix A.\nIn the follows, the descriptions of RLS-TD( ) for two different kinds of Markov chains are given. First, a complete description of RLS-TD( ) for ergodic Markov chains is presented below.\nAlgorithm 1 RLS-TD( ) for ergodic Markov chains\n1: Given:\nA termination criterion for the algorithm. A set of basis functions { )(ij } (j=1,2,\u2026,n) for each state i, where n is the\nnumber of basis functions.\n2: Initialize:\n(2.1) Let t=0. (2.2) Initialize the weight vector Wt, the variance matrix Pt , the initial state x0. (2.3) Set the eligibility traces vector 0z =0.\n3: Loop:\n(3.1) For the current state xt, observe the state transition from xt to xt+1 and the reward r(xt ,xt+1). (3.2) Apply equations (27)-(29) to update the weight vector. (3.3) t=t+1.\nuntil the termination criterion is satisfied.\nThe RLS-TD( ) algorithm for absorbing Markov chains is a little different from the above algorithm in coping with the state features of absorbing states. Following is a description of\nRLS-TD( ) for absorbing Markov chains.\nAlgorithm 2 RLS-TD( ) for absorbing Markov chains\n1: Given:\nA termination criterion for the algorithm. A set of basis functions { )(ij } (j=1,2,\u2026,n) for each state i, where n is the\nnumber of basis functions.\n2: Initialize:\n(2.1) Let t=0. (2.2) Initialize the weight vector Wt, the variance matrix Pt , the initial state x0. (2.3) Set the eligibility traces vector 0z =0.\n3: Loop:\n(3.1) For the current state xt,\nIf xt is an absorbing state, set (xt+1)=0, r(xt)=rT, where rT is the terminal\nreward.\nOtherwise, observe the state transition from xt to xt+1 and the reward\nr(xt ,xt+1).\n(3.2) Apply equations (27)-(29) to update the weight vector. (3.3) If xt is an absorbing state, re-initialize the process by setting xt+1 to an initial state and set the eligibility traces tz to a zero vector. (3.4) t=t+1.\nuntil the termination criterion is satisfied.\nIn the above RLS-TD( ) algorithm for absorbing Markov chains, the weight updates in the absorbing states are treated differently and the process is re-initialized in absorbing states to transform the absorbing Markov chain into an equivalent ergodic Markov chain. So in the following convergence analysis, we only focus on ergodic Markov chains.\nUnder similar assumptions as in Tsitsiklis and Roy (1997), we will prove that the proposed\nRLS-TD( ) algorithm converges with probability one.\nAssumption 1. The Markov chain {xt}, whose transition probability matrix is P, is ergodic, and there is a unique distribution that satisfies TT P (30) with (i)>0 for all i S and is a finite or infinite vector, depending on the cardinality of S.\nAssumption 2. Transition rewards r(xt,xt+1) satisfy\n)],([ 1 2 0 tt xxrE (31)\nwhere E0[ ] is the expectation with respect to the distribution .\nAssumption 3. The matrix ],...,,[ 21 n nNR has full column rank, that is, the basis\nfunctions i (i=1,2,\u2026,n) are linearly independent.\nAssumption 4. For every i (i=1,2,\u2026,n), the basis function i satisfies\n)]([ 2\n0 ti xE (32)\nAssumption 5. The matrix ])( 1\n[ 1\n1 0\nT\nt\ntXA T P is non-singular for all T>0.\nAssumptions 1\u20134 are almost the same as those for the linear TD( ) algorithms discussed in Tsitsiklis and Roy (1997) except that in Assumption 1, ergodic Markov chains are considered. Assumption 5 is specially needed for the convergence of the RLS-TD( ) algorithm.\nBased on the above assumptions, the convergence theorem for RLS-TD( ) can be given as\nfollows:\nTheorem 1. For a Markov chain which satisfies Assumptions 1\u20135, the asymptotic estimate found by RLS-TD( ) converges, with probability 1, to W* determined by (11).\nFor the proof of Theorem 1, please refer to Appendix B. The condition specified by\nAssumption 5 can be satisfied by setting P0= I appropriately.\nAccording to Theorem 1, RLS-TD( ) converges to the same solution as conventional linear TD( ) algorithms do, which satisfies (11). So the limit of convergence can be characterized by the following theorem.\nTheorem 2 (Tsitsiklis and Roy ,1997) Let W* be the weight vector determined by (11) and V* be the true value function of the Markov chain, then under Assumption 1\u20134, the following relation holds.\nDD VVVW ****\n1\n1 (33)\nwhere DXXX T D , DD TT 1)( .\nFor more explanations on the notations in Theorem 2, please refer to Appendix B. As discussed by Tsitsiklis and Roy (1997), the above theorem shows that the distance of the limiting function W* from the true value function V* is bounded and the smallest bound of approximation error can be obtained when =1. For every <1, the bound actually deteriorates as\ndecreases. The worst bound is obtained when =0. Although this is only a bound, it strongly\nsuggests that higher values of are likely to produce more accurate approximations of V*.\nCompared to LS-TD( ), there is an additional parameter in RLS-TD( ), which is the value\nfor the initial variance matrix P0. As was pointed out by Haykin (1996,pp.570), the exact value of the initializing constant has an insignificant effect when the data length is large enough. This means that in the limit, the final solutions obtained by LS and RLS are almost the same. For the influence of on the transient phase, when the positive constant becomes large enough or goes to infinity, the transient behavior of RLS will be almost the same as that of LS methods (Ljung, 1983). But when is initialized with a relatively small value, the transient phases of RLS and LS will be different. In practice, it is observed that there is a variable performance of RLS as a function of the initialization of (Moustakides, 1997). In some cases, RLS can exhibit a significantly faster convergence when initialized with a relatively small positive definite matrix than when initialized with a large one (Haykin,1996; Moustakides, 1997; Hubing and Alexander,\n1989). A first effort toward this direction is the statistical analysis of RLS for soft and exact initialization but limits to the case that the number of iterations is less than the size of the estimation vector (Hubing and Alexander, 1989). Moustakides (1997) provided a theoretical analysis on the relation between the algorithmic performance of RLS and the initialization of . By using the settling time as the performance measure, Moustakides proved that the well-known rule of initialization with a relatively small matrix is preferable for cases of high and medium signal-to-noise ratio (SNR), whereas for low SNR, a relatively large matrix must be selected for achieving best results. In the following learning prediction experiments of RLS-TD( ), as well as the learning control simulation of Fast-AHC, it is observed that the value of the initializing constant also plays an important role in the convergence performance, and the above theoretical analyses provide a clue to explain our experimental results."}, {"heading": "4. Learning Prediction Experiments on Markov Chains", "text": "In this section, an illustrative example is given to show the effectiveness of the proposed RLS-TD( ) algorithm. Furthermore, the algorithmic performance under the influence of the initializing constant is studied.\nThe example is a finite-state absorbing Markov chain called the Hop-World problem (Boyan, 1999). As shown in Figure 1, the Hop-World problem is a 13-state Markov chain with an absorbing state.\nIn Figure 1, state 12 is the initial state for each trajectory and state 0 is the absorbing state. Each non-absorbing state has two possible state transitions with transition probability 0.5. Each state transition has reward \u20133 except the transition from state 1 to state 0 which has a reward of \u20132. Thus, the true value function for state i (0 i 12) is \u20132i.\nTo apply linear temporal-difference algorithms to the value function prediction problem, a set of four-element state features or basis functions is chosen, as shown in Figure 1. The state features of states 12,8,4 and 0 are, respectively, [1,0,0,0], [0,1,0,0], [0,0,1,0], [0,0,0,1] and the state features of other states are obtained by linearly interpolating between these.\nIn our simulation, the RLS-TD( ) algorithm as well as LS-TD( ) and conventional linear TD( ) algorithms are used to solve the above value function prediction problem without knowing the model of the Markov chain. In the experiments, a trial is defined as the period from the initial state 12 to the terminal state 0. The performance of the algorithms is evaluated by the averaged root mean squared (RMS) error of value-function predictions over all the 13 states. For each parameter setting, the performance is averaged over 20 independent Monte-Carlo runs. Figure 2 shows the learning curves of RLS-TD( ) and conventional linear TD( ) algorithms with three different parameter settings. The parameter is set to 0.3 for all the algorithms and the\nstep-size parameter of TD( ) has the following form.\nnN\nN n\n0\n0 0\n1 (34)\nThe above step-size schedule is also studied in Boyan (1999). In our experiments, three\ndifferent settings are used, which are\n(s1) 01.00 , 6 0 10N (s2) 01.00 , 10000N (35) (s3) 1.00 , 10000N .\nDifferent from those in Boyan (1999), the linear TD( ) algorithms applied here are in their online forms, which update the weights after every state transitions. So the parameter n in (34) is the number of state transitions. In each run, the weights are all initialized to zeroes. In Figure 2, the learning curves of conventional linear TD( ) algorithms with step-size schedules (s1), (s2) and (s3) are shown by curves 1,2 and 3, respectively. For each curve, the averaged RMS errors of value function predictions over all the states and 20 independent runs are plotted for each trial. Curve 4 shows the learning performance of RLS-TD( ). One additional parameter for RLS-TD( ) is the initial value of the variance matrix P0. In this experiment, is set to 500, which is a relatively large value. From Figure 2, it can be concluded that by making use of RLS methods, RLS-TD( ) can obtain much better performance than conventional linear TD( ) algorithms and eliminates the design problem of the step-size schedules. Other experiments for linear TD( ) and RLS-TD( ) with different parameters are also conducted and similar results are obtained when the initial values of RLS-TD( ) are large and the conclusion is confirmed.\nWe have done demonstrative experiments to investigate the influence of on the performance of the RLS-TD( ) algorithm. Figure 3 shows the performance comparison between RLS-TD( )\nalgorithms using two different initial parameters of the variance matrix P0, which are P0=0.1I and P0=1000I, respectively. The forgetting factor is \u00b5=0.995. The performance of the suggested algorithm is measured by the averaged RMS errors of the value function prediction in the first 200 trials over 20 independent runs and all the 13 states. In the experiments, 11 settings of the parameter are tested, which are 0.1n (n=0,1,\u2026,10).\nIn Figure 3, it is clearly shown that the performance of RLS-TD( ) with a large initial value of is much better than RLS-TD( ) with a small initial value of . In other experiments with different parameter settings of and , similar results are also obtained. We may refer this phenomenon to the low SNR case of the forgetting factor RLS studied in Moustakides (1997). For the Hop-World problem, the stochastic state transitions could introduce high equation residuals )()( tt XbWXA in (19), which corresponds to the additive noise with large variance, i.e., the low SNR case. As has been discussed in Section 2, for the forgetting factor RLS in low SNR cases, a relatively large initializing constant must be selected for better results. A full understanding of this phenomenon is yet to be found.\nThe performance of RLS-TD( ) with unit forgetting factor \u00b5=1 is also tested in our experiments. Although the initial value effect in RLS with \u00b5=1 has not been discussed intensively (Moustakides,1997), the same effects of are observed empirically in the case of \u00b5=1 as that in \u00b5<1, which is shown by Figure 4.\nIn our other experiments, it is also found that when is initialized with a small value, the performance is sensitive to the values of and the parameter . In this case, the convergence speed of RLS-TD( ) increases as increases from 0 to 1, which is shown in Figure 3. Furthermore, when is fixed, the performance of RLS-TD( ) deteriorates as becomes smaller, as shown in Figure 5 .\nIn Figure 5, the learning curves of RLS-TD( ) with different initializing constants are shown and compared with that of LS-TD( ). In the experiment, is set to 0.5. From Figure 5, it is shown that the performance of RLS-TD( ) approaches that of LS-TD( ) when becomes large. As is well known, when becomes large enough, the performance of RLS and LS methods will be almost the same. Figure 6 shows the performance comparison between LS-TD( ) and RLS-TD( ) with a large value of . The initial variance matrix for RLS-TD( ) is set to 500I in every runs, where I is the identity matrix.\nBased on the above experimental results, it can be concluded that the convergence speed of RLS-TD( ) is mainly influenced by the initial value of the variance matrix and the parameter\n. Detailed discussions on the properties of RLS-TD( ) are given as follows:\n(1) When is relatively large, the effect of becomes small. If is large enough or goes to infinity, the performance of RLS-TD( ) and LS-TD( ) will be almost the same, as was discussed above. In such cases, the effect of on the speed of convergence is insignificant, which coincides with the discussion in Boyan (1999). However, as described in Theorem 2, the value of still affects the ultimate error bound of value function approximation.\n(2) When is relatively small, it is observed that the convergence performance of RLS-TD( ) is different from that of LS-TD( ) and is influenced by the values of both and . In the experiments of the Hop-World problem, the results show that smaller values of lead to slower convergence. These results may be explained by the theoretical analysis on the transient phase of the forgetting factor RLS (Moustakides,1997). According to the theory in Moustakides (1997), larger values of are needed for better performance in the cases of low SNR while smaller values are preferable for fast convergence in the cases of high and medium SNR. So different values of must be selected for faster convergence of RLS-TD( ) in different cases. Especially, in some cases, such as the high SNR case discussed in Moustakides (1997), RLS methods with small values of can obtain a very fast speed of convergence.\n(3) Compared to conventional linear TD( ) algorithms, the RLS-TD( ) algorithm can obtain much better performance by making use of RLS methods for value function prediction problems. Furthermore, in TD( ), a step-size schedule needs to be carefully designed to achieve good performance, while in RLS-TD( ), the initial value of the variance matrix can be selected according to the criterion of a \u201clarge\u201d or a \u201csmall\u201d value.\n(4) For the comparison of LS-TD( ) and RLS-TD( ), which one is preferable depends on the objective. In online applications, RLS-TD( ) has advantages in computational efficiency because the computation per step for RLS-TD( ) is O(K2) and for LS-TD( ), it is O(K3), where\nK is the number of state features. Moreover, as will be seen later, RLS-TD( ) can obtain better transient convergence performance than LS-TD( ) in some cases. On the other hand, LS-TD( ) may be preferable to RLS-TD( ) in the long-term convergence performance, as can be seen in Figure 5. And from a system identification point of view, LS-TD( ) can obtain unbiased parameter estimates in face of white additive noises while RLS-TD( ) with finite would possess large parameter discrepancies."}, {"heading": "5. The Fast-AHC Algorithm and Two Learning Control Experiments", "text": "In this section, the Fast-AHC algorithm is proposed based on the above results on learning prediction to solve learning control problems. Two learning control experiments are conducted to illustrate the efficiency of Fast-AHC."}, {"heading": "5.1 The Fast-AHC Algorithm", "text": "The ultimate goal of reinforcement learning is learning control, i.e., to estimate the optimal policies or the optimal value functions of Markov decision processes (MDPs). Until now, several reinforcement learning control algorithms including Q-learning (Watkins and Dayan,1992), Sarsa-learning (Singh, et al.,2000) and the Adaptive Heuristic Critic (AHC) algorithm (Barto, Sutton and Anderson,1983) have been proposed. Among the above methods, the AHC method is different from Q-learning and Sarsa-learning which are value-function-based methods. In the AHC method, value functions and policies are separately represented while in value-functionbased methods the policies are determined by the value functions directly. There are two components in the AHC method, which are called the critic and the actor, respectively. The actor is used to generate control actions according to the policies. The critic is used to evaluate the policies represented by the actor and provide the actor with internal rewards without waiting for delayed external rewards. Since the objective of the critic is policy evaluation or learning prediction, temporal-difference learning methods are chosen as the critic\u2019s learning algorithms. The learning algorithm of the actor is determined by the estimation of the gradient of the policies. In the following discussion, a detailed introduction on the AHC method is given.\nFigure 7 shows the architecture of a learning system based on the AHC method. The learning system consists of a critic network and an actor network. The inputs of the critic network include the external rewards and the state feedback from the environment. The internal rewards provided by the critic network are called the temporal-difference (TD) signals.\nAs in most reinforcement learning methods, the whole system is modeled as an MDP denoted by a tuple {S,A,P,R},where S is the state set, A is the action set, P is the state transition probability and R is the reward function. The policy of the MDP is defined as a function :S Pr(A), where\nPr(A) is a probability distribution in the action space. The objective of the AHC method is to estimate the optimal policy * satisfying the following equation.\n0 * ][maxmax t t t rEJJ (36)\nwhere is the discount factor and rt is the reward at time-step t E [ ] stands for the expectation\nwith respect to the policy and the state transition probabilities and J is the expected total reward.\nThe value function for a stationary policy and the optimal value function for the optimal\npolicy are defined as follows:\n][)( 0 0 t\nt t ssrEsV (37)\n][)( 0\n0* *\nt\nt t ssrEsV (38)\nAccording to the theory of dynamic programming, the optimal value function satisfies the\nfollowing Bellman equation.\n)]'(),([max)( ** sEVasRsV a\n(39)\nwhere R(s,a) is the expected reward received after taking action a in state s.\nIn AHC, the critic uses temporal-difference learning to approximate the value function of the current policy. When linear function approximators are used in the critic, the weight update equation is\nttttttt zsVsVrWW )]()([ 11 (40)\nwhere zt is the eligibility trace defined in (10).\nThe action selection policy of the actor is determined by the current state and the value function estimation of the critic. Suppose a neural network with weight vector u=[u1, u2,\u2026, um] is used in the actor, and the output of the actor network is\n),( tt sufy (41)\nThe action outputs of the actor are determined by the following Gaussian probabilistic distribution.\n) )(\nexp()( 2\n2\nt\ntt tr\nyy yp (42)\nwhere the mean value is given by (41) and the variance is given by\n))(exp(1/( 21 tt sVkk (43)\nIn the above equation, k1 and k2 are positive constants and V(st) is the value function es-\ntimation of the critic network.\nTo obtain the learning rule of the actor, an estimation of the policy gradient is given as\nfollows:\nu\nyyy r\nu\ny\ny\nJ\nu\nJ t\nt\ntt t t\nt\n\u02c6 (44)\nwhere tr\u0302 is the internal reward or the TD signal provided by the critic:\n)()(\u02c6 1 tttt sVsVrr (45)\nSince in the AHC method, the critic is used to estimate the value function of the actor\u2019s policy and provide the internal reinforcement using temporal-difference learning algorithms, the efficiency of temporal-different learning or learning prediction will greatly influence the whole learning system\u2019s performance. Although the policy of the actor is changing, it may change relatively slowly especially when fast convergence of learning prediction in the critic can be realized. In the previous sections, RLS-TD( ) is shown to have better data efficiency than conventional linear TD( ) algorithms and a very fast convergence speed can be obtained when the initializing constant is chosen appropriately. Thus, applying RLS-TD( ) to the policy evaluation in the critic network will improve the learning prediction performance of the critic and is promising to enhance the whole system\u2019s learning control performance. Based on the above idea, a new AHC method called the Fast-AHC algorithm is proposed in this paper. The efficiency of the Fast-AHC algorithm is verified empirically and detailed analysis of the results is given. Following is a complete description of the Fast-AHC algorithm.\nAlgorithm 3: The Fast-AHC algorithm\n1: Given: a critic neural network and an actor neural network, which are both linear in\nparameters, a stop criterion for the algorithm.\n2: Initialize the state of the MDP and the learning parameters, set t=0. 3: While the stop criterion is not satisfied,\n(3.1) According to the current state ts , compute the output of the actor network ty ,\ndetermine the actual action of the actor by the probability distribution given by (42).\n(3.2) Take the action ty on the MDP, and observe the state transition from ts to\n1ts , set reward ),( 1ttt ssrr .\n(3.3) Apply the RLS-TD( ) algorithm described in (27)-(29) to update the weights of\nthe critic network.\n(3.4) Apply the following equation to update the weights of the actor network,\nt\nttt a\nJ aa 1 (46)\nwhere t is the learning factor of the actor.\n(3.5) Let t=t+1, return to 3."}, {"heading": "5.2 Learning Control Experiments on The Cart-Pole Balancing Problem", "text": "The balancing control of inverted pendulums is a typical nonlinear control problem and has been widely studied not only in control theory but also in artificial intelligence. In the research of artificial intelligence, the learning control of inverted pendulums is considered as a standard test problem for machine learning methods, especially for RL algorithms. It has been studied in the early work of Michie\u2019s BOXES system (Michie,et al.,1968) and later in Barto and Sutton (1983), where the learning controllers only have two output values: +10(N) and \u201310(N). In Berenji, et al.(1992) and Lin, et al.(1994), AHC methods with continuous outputs are applied to the cart-pole balancing problem. In this paper, the cart-pole balancing problem with continuous control values is used to illustrate the effectiveness of the Fast-AHC method.\nFigure 8 shows a typical cart-pole balancing control system, which consists of a cart moving horizontally and a pole with one end fixed at the cart. Let x denote the horizontal distance between the center of the cart and the center of the track, where x is negative when the cart is in the left part of the track. Variable denotes the angle of the pole from its upright position (in\ndegrees) and F is the amount of force (N) applied to the cart to move it towards its left or right. So\nthe control system has four state variables ,,, xx , where ,x are the derivatives of x and ,\nrespectively.\nIn Figure 8, the mass of the cart is M=1.0kg, the mass of the pole is m=0.1kg, the half-pole length is l=0.5m, the coefficient of friction of the cart on the track is \u00b5c=0.0005 and the coefficient of friction of the pole on the cart is \u00b5p=0.000002. The boundary constraints on the state variables are given as follows.\n1212 (47) mxm 4.24.2 (48)\nThe dynamics of the control system can be described by the following equations.\nmM\nxmlF x\nmllmM\nml\nMm xmlFgMm\nc\np\nc\n)sgn()cossin(\ncos)( 3\n4\n)( )]sgn(sin[cossin)(\n2\n2\n2\n(49)\nwhere g is the acceleration due to the gravity, which is \u20139.8m/s2. The above parameters and dynamics equations are the same as those studied in Barto et al. (1983).\nIn the learning control experiments of the pole-balancing problem, the dynamics (49) is assumed to be unknown to the learning controller. In addition to the four state variables, the only available feedback is a failure signal that notifies the controller when a failure occurs, which means the values of the state variables exceed the boundary constraints prescribed by inequalities (47) and (48). It is a typical reinforcement learning problem, where the failure signal serves as the reward. Since an external reward may only be available after a long sequence of actions, the critic in the AHC learning controller is used to provide the internal reinforcement signal to accomplish the learning task. Learning control experiments on the pole-balancing problem are conducted using conventional AHC method which uses linear TD( ) algorithms in the critic and the Fast-AHC method proposed in this paper.\nTo solve the continuous state space problem in reinforcement learning, a class of linear function approximators, which is called Cerebellar Model Articulation Controller (CMAC) is used. As a neural network model based on the neuro-physiological theory about human cerebellar CMAC was first proposed by Albus (1975) and has been widely used in automatic\ncontrol and function approximation. In CMAC neural networks, the dependence of adjustable parameters or weights with respect to outputs is linear. For detailed discussion on the structure of CMAC neural networks, one may refer to Albus (1975) and Sutton & Barto (1998).\nIn the AHC and Fast-AHC learning controllers, two CMAC neural networks with four inputs and one output for each are used as the function approximators in the critic and the actor, respectively. Each CMAC has C tilings and M partitions for every input. So the total physical memory for each CMAC network is M4C. To reduce the computation and memory requirements, a hashing technique described by the following equations is employed in our experiments. (For detailed discussion on the parameters of the CMAC networks, please refer to Appendix C).\n4\n1\n1 ])([)(\ni\niMiasA (50)\nF(s)=A(s) mod K (51)\nIn (50) and (51), s represents an input state vector, a(i) (0 a(i) M) is the activated tile for the i-th element of s, K is the total number of the physical memory and F(s) is the physical memory address corresponding to the state s, which is the remainder of A(s) divided by K.\nIn order to compare the performance of different learning algorithms, the initial parameters of each learning controller are selected as follows: The weights of the critic are all initialized to 0 and the weights of the actor are initialized to random numbers in interval [0,0.1]. The other parameters for the AHC and Fast-AHC algorithms are 95.0 , 4.01k and 5.02k .\nIn all the experiments, a trial is defined as the period from an initial state to a failure state and the initial state of each trial is set to a randomly generated state near the unstable equilibrium (0,0,0,0) with a maximum distance of 0.05. Equation (49) is employed to simulate the dynamics of the system using the Euler method, which has a time step of 0.02s. When a trial lasts for more than 120,000 time steps, it is said to be successful and the learning controller is assumed to be able to balance the pole. The reinforcement signal for the problem is defined as\notherwise0,\noccursfailureif1, tr (52)\nThe performance of the Fast-AHC method is tested extensively, where different parameter settings including and the initial variance matrix P0 are chosen. In the experiments, the\nforgetting factor of RLS-TD( ) in the critic is set to a value that is equal to 1 or very close to 1. The learning control experiments using conventional AHC methods are also conducted for comparison. The performance comparisons between the two algorithms are shown in Figure 9, 10 and 11.\nIn the above experiments, the initial variance matrixes of the Fast-AHC algorithm are all set to P0=0.1I. The performance of Fast-AHC is compared with AHC for different . The numbers of physical memories of the critic network and the actor network are chosen as 30 and 80, respectively. For each parameter setting of the two algorithms, 5 independent runs are tested. The performance is evaluated according to the trial number needed to successfully balance the pole. The learning factors for the actor networks are all set to 0.5, which is a manually optimized value for both algorithms. In all the experiments, 11 settings of are tested.\nIn Figure 9, 10 and 11, the learning factors of the critic networks in AHC are chosen as =0.01, 0.03 and 0.05, respectively. It is found that when <0.01, the performance of AHC becomes worse. For the learning factors that are greater than 0.05, the AHC algorithm may become unstable, and even when =0.03 and =0.05, the AHC algorithm becomes unstable for\n=1. For the time-varying learning factors specified in (s1)-(s3), the performance is worse than the above constant learning factors. So the above three settings of the learning factor are typical and near optimal for the AHC algorithm.\nFrom the above experimental results, it can be concluded that by using RLS-TD( ) in the critic network, the Fast-AHC algorithm can obtain better performance than conventional AHC algorithms. Although Fast-AHC requires more computation per step than AHC, it is more efficient than AHC in that less trials or data are needed to successfully balance the pole.\nAs has been discussed in the previous sections, the convergence performance of RLS-TD( ) is influenced by the initial value of the variance matrix. This is also the case in Fast-AHC. In the above learning control experiments, a small value =0.1 is selected. In other experiments, when is set to other small values, the performance of Fast-AHC is satisfactory and is better than AHC. However, when is equal to a relatively large value, for example =100 or 500, the performance of Fast-AHC deteriorates significantly. Since RLS-TD( ) with a large initializing constant has similar performance as LS-TD( ), it can be deduced that the AHC method using LS-TD( ) in the critic will also have bad performance in the cart-pole balancing problem. To verify this, experiments are conducted using Fast-AHC with large initializing constant and AHC using LS-TD( ). For each parameter setting, 5 independent runs are tested. In the experiments, the maximum trials for each algorithm in one run is 200 so that if an algorithm fails to balance the pole within 200 trials, its performance is set to 200.When using LS-TD( ) in the AHC method, there may be computational problems in the matrix inversion during the first few steps of learning and two methods are tried to avoid this problem. One is the usage of TD( ) in the first 60 steps of updates. The other is that the actor is not updated in the early stage of learning until LS-TD( ) is\nstable. However, similar results are found for the two methods. Figure 12 shows the experimental results which clearly verify that the performance of Fast-AHC with a large initializing constant is similar to AHC using LS-TD( ) and it is much worse than Fast-AHC with a small . A detailed discussion of this phenomenon is provided in subsection 5.4.\nIn the following Figure 13 and Figure 14, the variations of the pole angle and the control force F are plotted, where a successfully trained Fast-AHC learning controller is used to control the cart-pole system."}, {"heading": "5.3 Learning Control Experiments of The Acrobot", "text": "In this subsection, another learning control example, which is the swing-up control of the acrobot in minimum time, is presented. The learning control of the acrobot is a class of adaptive optimal control problem that is more difficult than the pole-balancing problem. It has been investigated in Sutton (1996), where CMAC-based Sarsa-learning algorithms were employed to solve it and only the case of discrete control actions was studied. In our experiments, the case of continuous actions\nis considered.\nAn acrobot moving in the vertical plane is shown in Figure 15, where OA and AB are the first link and the second link, respectively. The control torque is applied at point A. The goal of the swing-up control is to swing the tip B of the acrobot above the line CD which is higher than the joint O by an amount of the length of one link.\nThe dynamics of the acrobot system is described by the following equations.\n11221 /)( dd (53)\n)/( 21122 dd (54)\nwhere\n21221 2 2 2 12 2 111 )cos2( IIllllmlmd ccc (55)\n2221 2 222 )cos( Illlmd cc (56)\n2112112212122 2 22121 )2/cos()(sin2sin glmlmllmllm ccc (57)\n)2/cos( 21222 glm c (58)\nIn the above equations, the parameters i , i , im , il , iI , cil are the angle, the angle velocity,\nthe mass, the length, the moment of inertia and the length of the center of mass for link i (i=1,2), respectively.\nLet sT denote the goal state of the swing-up control. Since the control aim is to swing up the\nacrobot in minimum time, the reward function rt is defined as\nelse,0\nif,1 T t ss r (59)\nIn the simulation experiments, the control torque is continuous and is bounded by [-3N, 3N]. Similar to the cart-pole balancing problem, CMAC neural networks are applied to solve the above\nlearning control problem with continuous states and actions. In the CMAC-based actor-critic controller, the actor network and the critic network both have C=4 tilings and M=7 partitions for each input. In the actor network, uniform coding is employed and non-uniform coding is used in the critic network. For details of the coding parameters, please refer to Appendix C. The sizes of the physical memories for the actor network and the critic network are 100 and 80, respectively. In the CMAC networks, the following hashing techniques are used. (For the definition of A(s),a(i) and F(s), please refer to Subsection 5.2.) 4\n1 1 ])([)( i iMiasA (60)\nF(s)=A(s) mod K (61)\nIn the simulation, the parameters for the acrobot are chosen as m1=m2=1kg, I1=I2=1kgm 2, lc1=lc2=0.5m, l1=l2=1m and g=9.8m/s 2. The time step for simulation is 0.05s and the time interval for learning control is 0.2s. The learning parameters are =0.6, =0.90, =0.2, k1=0.4, k2=0.5. A trial is defined as the period that starts from the stable equilibrium and ends when the goal state is reached. After each trial, the state of the acrobot is re-initialized to its stable equilibrium. For each parameter setting, 5 independent runs are tested. Each run consists of 50 trials and after 50-th trial, the actor network is tested by controlling the acrobot alone, i.e., by setting the action variance defined in (43) to zero. The performance of the algorithms is evaluated according to the steps used by the actor networks to swing up the acrobot.\nThe performance comparisons between Fast-AHC and AHC are shown in Figure 16,17 and 18. In the experiments, both algorithms are tested with different and AHC is also tested with different learning factors of the critic networks.\nFrom the results, it is also shown that Fast-AHC can achieve higher data efficiency than AHC.\nHowever, in this example, a relatively large is used, which is different from the previous\ncart-pole balancing example. In other experiments, good performance is obtained with large initializing constant and when is very small, the performance deteriorates significantly. Thus\nthis problem may be referred to the low SNR case in Moustakides (1997), where large values of\nare preferable for best convergence rate of RLS methods.\nThe following Figure 19 shows the performance comparison between Fast-AHC with a large (300) and a small (0.01) value of , where 6 settings of the parameter are tested for each\nalgorithm. The performance of AHC using LS-TD( ) is also shown. In Figure 20, a typical curve of the angle of the first link is plotted, where the acrobot is controlled by the actor network of the Fast-AHC method ( =0.6) after 50 trials."}, {"heading": "5.4 Analysis of The Experimental Results", "text": "Based on the above experimental results, it can be concluded that by using the RLS-TD( ) algorithm in the critic network, the Fast-AHC algorithm can obtain better performance than conventional AHC algorithms in that less trials or data are needed to converge to a near optimal policy. As is well known, one difficulty for the applications of RL methods is their slow convergence, especially in the cases where learning data are hard to be generated. For the Fast-AHC algorithm, although more computation per step is required than conventional AHC methods, it will not be a serious problem when the number of linear state features is small. In all of our learning control experiments, hashing techniques are used to reduce the state features in CMAC networks so that the computation of Fast-AHC can be reduced to an economical amount. Nevertheless, when the state feature number is large, conventional AHC methods may be preferable.\nIn the experiments, it is observed that the performance of Fast-AHC is affected by the initializing constant . These results are consistent with the property of RLS-TD( ) and the RLS\nmethod in adaptive filtering, which has been discussed in Section 4. In the learning control experiments of the cart-pole balancing problem, better performance of Fast-AHC is obtained by using small values of . While in the learning control of the acrobot, higher data efficiency is achieved using Fast-AHC with a relatively large . These two different properties of Fast-AHC may be referred to the different SNR cases for RLS methods (Moustakides,1997). A thorough theoretical analysis on this problem is an interesting topic for future research.\nIn our experiments, the performance of the AHC method using LS-TD( ) is also tested. As has been studied in Section 4, when the initializing constant is large, the performance of RLS-TD( ) and LS-TD( ) does not differ much. So the performance of AHC using LS-TD( ) is similar to that of Fast-AHC with large values of .\nAs studied in Moustakides (1997), the RLS method can converge much faster than other adaptive filtering methods if the environment is stationary and the initializing constant is selected appropriately. In some cases, RLS may converge almost instantly. This is also verified in the learning prediction experiments of the RLS-TD( ) algorithm. When applying RLS-TD( ) in an actor-critic learning controller, although the policy of the actor will change over time, it can still be assumed that the changing speed of the policy is slow when compared with the fast convergence speed of RLS-TD( ). Thus good performance of learning prediction can be obtained in the critic. Moreover, since the learning prediction performance of the critic is important to the policy learning of the actor, the improvement in learning prediction efficiency will contribute to the whole performance improvement of the controller."}, {"heading": "6. Conclusions and Future Work", "text": "Two new reinforcement learning algorithms using RLS methods, which are called RLS-TD( ) and Fast-AHC, respectively, are proposed in this paper. RLS-TD( ) can be used to solve learning prediction problems more efficiently than conventional linear TD( ) algorithms. The convergence with probability 1 is proved for RLS-TD( ) and the limit of convergence is also analyzed. Experimental results on learning prediction problems show that the RLS-TD( ) algorithm is superior to conventional TD( ) algorithms in data efficiency and it also eliminates the design problem of the step sizes in linear TD( ) algorithms. RLS-TD( ) can be viewed as the extension of RLS-TD(0) from =0 to general 0< 1. Although the effect of on the convergence speed of RLS-TD( ) may not be significant in some cases, the usage of >0 will still affect the approximation error bound. Thus, when there are needs for value function estimation with high precision, large values of are preferable to =0. Furthermore, RLSTD( ) is superior to LS-TD( ) in computation when the weight vector must be updated after every observations.\nSince learning prediction can be viewed as a sub-problem of learning control, we extend the results in learning prediction to a learning control method called the AHC algorithm. Using RLS-TD( ) in the critic network, Fast-AHC can achieve better performance than conventional AHC method in data efficiency. Simulation results on the learning control of the pole-balancing problem and the acrobot system confirm the above analyses.\nIn the experiments, it is found that the performance of RLS-TD( ) as well as Fast-AHC is influenced by the initializing constant of RLS methods. Different values of are needed for best performance in different cases. This is also a well-known phenomenon in RLS-based adaptive\nfiltering and the theoretical results in Moustakides (1997) provide some basis for the explanations of our results. A complete investigation of this problem is our ongoing work.\nThe idea of using RLS-TD( ) in the critic network may be applied to other reinforcement learning methods with actor-critic architectures. In Konda and Tsitsiklis (1998), a new actor-critic algorithm using linear function approximators is proposed and the convergence under certain conditions is proved. One condition for the convergence of this algorithm is that the convergence rate of the critic is much faster than that of the actor. Thus the application of RLS-TD( ) in the critic may be preferable in order to ensure the convergence of the algorithm. The theoretical and empirical work on this problem deserves to be studied in the future."}, {"heading": "Acknowledgements", "text": "This work is supported by the National Natural Science Foundation of China under Grants\n60075020, 60171003 and China University Key Teacher\u2019s Fellowship. We would very much like\nto thank the anonymous reviewers and Associate Editor Michael L. Littman for their insights and\nconstructive criticisms, which have helped improve the paper significantly."}, {"heading": "Appendix A. Derivation of the RLS-TD( ) Algorithm", "text": "For the derivation of RLS-TD( ), there are two different cases, which are determined by the value\nof the forgetting factor.\n(1) RLS-TD( ) with a unit forgetting factor.\nSince\n1 tt AP (62)\nIP0 (63)\nttt zPK 11 (64)\nAccording to Lemma 1,\ntt T t T ttt T t T ttt\ntt\nPxxzPxxzPP\nAP\n))()(()]))()((1[ 1 1 1\n1 11\n(65)\n)))()((1/( 1\n11\nttt T t T tt\nttt\nzPxxzP\nzPK (66)\n)(\n)(\nttttt\nt\ni\niit\nttt\nrzWPP\nrzP\nbAW\n1 1\n0\n1\n1 1 11\n(67)\nThus\n]))()(([\n)))()(((\n])))()(([(\ntt T t T ttt\ntt T t T ttttt\ntttt T t T tttt\nWxxrKW\nWxxzrzPW\nrzWxxzPPW\n11\n11\n1 1 111\n(68)\n(2) RLS-TD( ) with a forgetting factor \u00b5<1\nThe derivation of RLS-TD( ) with a forgetting factor \u00b5<1 is similar to the exponentially weighted\nRLS algorithm in Haykins (1996, pp.566-569). Here we only present the results:\n)))()((/( 11 ttt T t T ttt zPxxzPK (69)\n)))()((( 111 tt T t T tttt WxxrKWW (70)\n]))()(()]))()(([[ 1\n1 1 11 tt T t T ttt T t T tttt PxxzPxxzPPP (71)"}, {"heading": "Appendix B. Proof of Theorem 1", "text": "To study the steady property of the Markov chain defined in Section 3, we construct a stationary\nprocess as follows. Let {xt} be a Markov chain that evolves according to the transition matrix P and is already in its steady state, which means that Pr{xt=i}= (i) for all i and t. Given any sample path of the Markov chain, we define\nt t\nt xz )()( (72)\nThen },,{ 1 tttt zxxX is a stationary process, which is the same as that discussed in (Tsitsiklis\nand Roy, 1997).\nLet D denote a N N diagonal matrix with diagonal entries (1), (2),\u2026, (N), where N is\nthe cardinality of state space X. Then Lemma 2 can be derived as follows.\nLemma 2. (Tsitsiklis and Roy, 1997) Under Assumption 1-4, the following equations hold.\n1) mT\nmtt DPxxE )]()([0 , for m>0 (73)\n2) mT\nm\nm t T t DPxzE\n0\n0 )()]([ , (74)\n3) rDPxxrzE mT\nm\nm tttt\n0\n10 )()],([ (75)\nwhere NRr , whose Nth component is equal to ]),([ 1 ixxxrE ttt .\nAccording to Lemma 2, E0[A(Xt)] and E0[b(Xt)] are well defined and finite. Furthermore, E0[A(Xt)]\nis negative definite, so it is invertible.\nFrom equation (67),\n])( 11 [])( 11 [\n)]([])([\n1\n0 1 0 1\n1\n1 0\n1\n0 1 0 1\n1\n1 0)(\nT\nt\nt\nT\nt\nt\nT\nt\nt\nT\nt\ntTDRLS\nXb T WP T XA T P T\nXbWPXAPW\n(76)\nSince\nT\nt\nt T t XA T XAE 1\n0 )( 1 lim)]([ (77)\nT\nt\nt T t Xb T XbE 1\n0 )( 1 lim)]([ (78)\nand E0[A(Xt)] is invertible,\n* 0 1\n0)( )]([)]([lim WXbEXAEW ttTDRLS T\n(79)\nThus )(TDRLSW converges to W* with probability 1."}, {"heading": "Appendix C. Some details of the coding structures of CMAC networks", "text": "In the following discussion, the coding structures of CMAC networks in the cart-pole balancing\nproblem and the acrobot control problem are presented.\n(1) CMAC coding structures in the cart-pole balancing problem\nIn the CMAC networks, the state variables have the following boundaries.\n]12,12[ , ]deg/50,deg/50[ ss\n]4.2,4.2[x , ]1,1[x\nFor the critic network, C=4 and M=7. The hashing technique specified in equations (50) and (51)\nis employed and the total memory size is 30.\nFor the actor network, C=4 and M=7. The hashing technique specified in equations (60) and (61)\nis employed and the total memory size is 100.\n(2) CMAC coding structures in the acrobot swing-up problem\nIn the simulation, the angles are bounded by ],[ and the angular velocities are bounded by\n]4,4[1 , ]9,9[2 . The tiling numbers of the actor and the critic both are equal to 4\n(C=4). The total memory sizes for the critic and the actor are 80 and 100, respectively. In the actor\nnetwork, each tiling partitions the range of each input into 7 equal intervals (M=7). In the critic\nnetwork, the partitions for each input are non-uniform, which are given by\n1 : { - , -1, -0.5, 0, 0.5, 1, }, 1 : {-4 , -1.5 , -0.5 , 0, 0.5 , 1.5 , 4 }\n2 : {- , -1, -0.5, 0, 0.5, 1, }, 2 : {-9 , -2 , -0.5 ,0, 0.5 ,2 , 9 }"}, {"heading": "16, 185-202.", "text": "Tsitsiklis J.N. & Roy B.V. (1994). Feature-based methods for large scale dynamic programming.\nNeural Computation. 6(6), 1185-1201.\nTsitsiklis J.N. & Roy B.V. (1997). An analysis of temporal difference learning with function\napproximation. IEEE Transactions on Automatic Control. 42(5), 674-690.\nWatkins C.J.C.H. & Dayan P. (1992). Q-Learning. Machine Learning. 8, 279-292.\nYoung P. (1984). Recursive Estimation and Time-Series Analysis. Springer-Verlag."}], "references": [{"title": "Neurodynamic Programming. Belmont, Mass.: Athena Scientific", "author": ["D.P. Bertsekas"], "venue": "Berenji H.R. & Khedkar P", "citeRegEx": "Bertsekas,? \\Q1996\\E", "shortCiteRegEx": "Bertsekas", "year": 1996}, {"title": "The convergence of TD", "author": ["Dayan P"], "venue": "Machine Learning,", "citeRegEx": "P..1992..,? \\Q1994\\E", "shortCiteRegEx": "P..1992..", "year": 1994}, {"title": "Convergence of the RLS and LMS adaptive filters", "author": ["1097-1110. Eweda E", "O. Macchi"], "venue": "IEEE Trans. Circuits and Systems,", "citeRegEx": "E. and Macchi,? \\Q1987\\E", "shortCiteRegEx": "E. and Macchi", "year": 1987}, {"title": "On the convergence of stochastic iterative dynamic programming algorithms", "author": ["L.P. Kaelbling", "M.L. Littman", "A.W. Moore"], "venue": "RLS algorithms. In Proc. of the IEEE International Conference on Acoustics, Speech and Signal Processing. Jaakkola T.,", "citeRegEx": "Kaelbling et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Kaelbling et al\\.", "year": 1994}, {"title": "Self-improving reactive agents based reinforcement learning, planning and teaching", "author": ["L.J. Lin"], "venue": "Machine Learning,", "citeRegEx": "Lin,? \\Q1992\\E", "shortCiteRegEx": "Lin", "year": 1992}, {"title": "Analysis of recursive stochastic algorithm", "author": ["L. Ljung"], "venue": "IEEE. Transactions on Automatic Control,", "citeRegEx": "Ljung,? \\Q1977\\E", "shortCiteRegEx": "Ljung", "year": 1977}, {"title": "Study of the transient phase of the forgetting factor RLS", "author": ["G.V. Moustakides"], "venue": "brain-model problem. Ph.D. Thesis,", "citeRegEx": "Moustakides,? \\Q1997\\E", "shortCiteRegEx": "Moustakides", "year": 1997}, {"title": "Convergence results for singlestep on-policy reinforcement-learning algorithms", "author": ["Singh S.P", "T. Jaakkola", "M.L. Littman", "C. Szepesvari"], "venue": "Machine Learning,", "citeRegEx": "S.P. et al\\.,? \\Q2000\\E", "shortCiteRegEx": "S.P. et al\\.", "year": 2000}, {"title": "Asynchronous stochastic approximation and Q-learning", "author": ["J.N. Tsitsiklis"], "venue": "Machine Learning,", "citeRegEx": "Tsitsiklis,? \\Q1994\\E", "shortCiteRegEx": "Tsitsiklis", "year": 1994}, {"title": "An analysis of temporal difference learning with function approximation", "author": ["J.N. Tsitsiklis"], "venue": "IEEE Transactions on Automatic Control", "citeRegEx": "Tsitsiklis,? \\Q1997\\E", "shortCiteRegEx": "Tsitsiklis", "year": 1997}], "referenceMentions": [{"referenceID": 8, "context": "Therefore, the theory and algorithms for multi-step learning prediction become an important topic in RL and much research work has been done in the literature (Sutton, 1988; Tsitsiklis and Roy, 1997). Among the proposed multi-step learning prediction methods, temporal-difference (TD) learning (Sutton, 1988) is one of the most popular methods. It was studied and applied in the early research of machine learning, including the celebrated checkers-playing program (Minsky, 1954; Samuel, 1959). In 1988, Sutton presented the first formal description of temporal- difference methods and the TD( ) algorithm (Sutton,1988). Convergence results are established for tabular temporal-difference learning algorithms where the cardinality of tunable parameters is the same as that of the state space (Sutton, 1988; Watkins,et al.,1992; Dayan,et al., 1994; Jaakkola, et al.,1994). Since many real-world applications have large or infinite state space, value function approximation (VFA) methods need to be used in those cases. When combined with nonlinear value function approximators, TD( ) can not guarantee convergence and several results regarding divergence have been reported in the literature (Tsitsiklis and Roy,1997). For TD( ) with linear function approximators, also called linear TD( ) algorithms, several convergence proofs have been presented. Dayan (1992) showed the convergence in the mean for linear TD( ) algorithms with arbitrary 1 0 .", "startOffset": 174, "endOffset": 1362}, {"referenceID": 8, "context": "Therefore, the theory and algorithms for multi-step learning prediction become an important topic in RL and much research work has been done in the literature (Sutton, 1988; Tsitsiklis and Roy, 1997). Among the proposed multi-step learning prediction methods, temporal-difference (TD) learning (Sutton, 1988) is one of the most popular methods. It was studied and applied in the early research of machine learning, including the celebrated checkers-playing program (Minsky, 1954; Samuel, 1959). In 1988, Sutton presented the first formal description of temporal- difference methods and the TD( ) algorithm (Sutton,1988). Convergence results are established for tabular temporal-difference learning algorithms where the cardinality of tunable parameters is the same as that of the state space (Sutton, 1988; Watkins,et al.,1992; Dayan,et al., 1994; Jaakkola, et al.,1994). Since many real-world applications have large or infinite state space, value function approximation (VFA) methods need to be used in those cases. When combined with nonlinear value function approximators, TD( ) can not guarantee convergence and several results regarding divergence have been reported in the literature (Tsitsiklis and Roy,1997). For TD( ) with linear function approximators, also called linear TD( ) algorithms, several convergence proofs have been presented. Dayan (1992) showed the convergence in the mean for linear TD( ) algorithms with arbitrary 1 0 . Tsitsiklis and Roy (1994) proved the convergence for a special class of TD learning algorithms, known as TD(0), while in Tsitsiklis and Roy (1997), they extended the early results to general linear TD( ) case and proved the convergence with probability one.", "startOffset": 174, "endOffset": 1472}, {"referenceID": 8, "context": "Therefore, the theory and algorithms for multi-step learning prediction become an important topic in RL and much research work has been done in the literature (Sutton, 1988; Tsitsiklis and Roy, 1997). Among the proposed multi-step learning prediction methods, temporal-difference (TD) learning (Sutton, 1988) is one of the most popular methods. It was studied and applied in the early research of machine learning, including the celebrated checkers-playing program (Minsky, 1954; Samuel, 1959). In 1988, Sutton presented the first formal description of temporal- difference methods and the TD( ) algorithm (Sutton,1988). Convergence results are established for tabular temporal-difference learning algorithms where the cardinality of tunable parameters is the same as that of the state space (Sutton, 1988; Watkins,et al.,1992; Dayan,et al., 1994; Jaakkola, et al.,1994). Since many real-world applications have large or infinite state space, value function approximation (VFA) methods need to be used in those cases. When combined with nonlinear value function approximators, TD( ) can not guarantee convergence and several results regarding divergence have been reported in the literature (Tsitsiklis and Roy,1997). For TD( ) with linear function approximators, also called linear TD( ) algorithms, several convergence proofs have been presented. Dayan (1992) showed the convergence in the mean for linear TD( ) algorithms with arbitrary 1 0 . Tsitsiklis and Roy (1994) proved the convergence for a special class of TD learning algorithms, known as TD(0), while in Tsitsiklis and Roy (1997), they extended the early results to general linear TD( ) case and proved the convergence with probability one.", "startOffset": 174, "endOffset": 1593}, {"referenceID": 6, "context": "It is observed that the rate of convergence is influenced by the initialization of the variance matrix, which is a phenomenon investigated theoretically in adaptive filtering (Moustakides, 1997; Haykin, 1996).", "startOffset": 175, "endOffset": 208}, {"referenceID": 8, "context": "In Tsitsiklis and Roy (1997), the above linear TD( ) algorithm is proved to converge with probability 1 under certain assumptions and the limit of convergence W* is also derived, which satisfies the following equation.", "startOffset": 3, "endOffset": 29}, {"referenceID": 8, "context": "Under similar assumptions as in Tsitsiklis and Roy (1997), we will prove that the proposed RLS-TD( ) algorithm converges with probability one.", "startOffset": 32, "endOffset": 58}, {"referenceID": 8, "context": "Assumptions 1\u20134 are almost the same as those for the linear TD( ) algorithms discussed in Tsitsiklis and Roy (1997) except that in Assumption 1, ergodic Markov chains are considered.", "startOffset": 90, "endOffset": 116}, {"referenceID": 6, "context": "In practice, it is observed that there is a variable performance of RLS as a function of the initialization of (Moustakides, 1997).", "startOffset": 111, "endOffset": 130}, {"referenceID": 6, "context": "As discussed by Tsitsiklis and Roy (1997), the above theorem shows that the distance of the limiting function W* from the true value function V* is bounded and the smallest bound of approximation error can be obtained when =1.", "startOffset": 16, "endOffset": 42}, {"referenceID": 6, "context": "Moustakides (1997) provided a theoretical analysis on the relation between the algorithmic performance of RLS and the initialization of .", "startOffset": 0, "endOffset": 19}, {"referenceID": 6, "context": "We may refer this phenomenon to the low SNR case of the forgetting factor RLS studied in Moustakides (1997). For the Hop-World problem, the stochastic state transitions could introduce high equation residuals ) ( ) ( t t X b W X A in (19), which corresponds to the additive noise with large variance, i.", "startOffset": 89, "endOffset": 108}, {"referenceID": 6, "context": "These results may be explained by the theoretical analysis on the transient phase of the forgetting factor RLS (Moustakides,1997). According to the theory in Moustakides (1997), larger values of are needed for better performance in the cases of low SNR while smaller values are preferable for fast convergence in the cases of high and medium SNR.", "startOffset": 112, "endOffset": 177}, {"referenceID": 6, "context": "These results may be explained by the theoretical analysis on the transient phase of the forgetting factor RLS (Moustakides,1997). According to the theory in Moustakides (1997), larger values of are needed for better performance in the cases of low SNR while smaller values are preferable for fast convergence in the cases of high and medium SNR. So different values of must be selected for faster convergence of RLS-TD( ) in different cases. Especially, in some cases, such as the high SNR case discussed in Moustakides (1997), RLS methods with small values of can obtain a very fast speed of convergence.", "startOffset": 112, "endOffset": 528}, {"referenceID": 4, "context": "(1992) and Lin, et al.(1994), AHC methods with continuous outputs are applied to the cart-pole balancing problem.", "startOffset": 11, "endOffset": 29}, {"referenceID": 6, "context": "Thus this problem may be referred to the low SNR case in Moustakides (1997), where large values of are preferable for best convergence rate of RLS methods.", "startOffset": 57, "endOffset": 76}, {"referenceID": 6, "context": "These two different properties of Fast-AHC may be referred to the different SNR cases for RLS methods (Moustakides,1997). A thorough theoretical analysis on this problem is an interesting topic for future research. In our experiments, the performance of the AHC method using LS-TD( ) is also tested. As has been studied in Section 4, when the initializing constant is large, the performance of RLS-TD( ) and LS-TD( ) does not differ much. So the performance of AHC using LS-TD( ) is similar to that of Fast-AHC with large values of . As studied in Moustakides (1997), the RLS method can converge much faster than other adaptive filtering methods if the environment is stationary and the initializing constant is selected appropriately.", "startOffset": 103, "endOffset": 567}, {"referenceID": 6, "context": "287 filtering and the theoretical results in Moustakides (1997) provide some basis for the explanations of our results.", "startOffset": 45, "endOffset": 64}, {"referenceID": 6, "context": "287 filtering and the theoretical results in Moustakides (1997) provide some basis for the explanations of our results. A complete investigation of this problem is our ongoing work. The idea of using RLS-TD( ) in the critic network may be applied to other reinforcement learning methods with actor-critic architectures. In Konda and Tsitsiklis (1998), a new actor-critic algorithm using linear function approximators is proposed and the convergence under certain conditions is proved.", "startOffset": 45, "endOffset": 351}], "year": 2011, "abstractText": "The recursive least-squares (RLS) algorithm is one of the most well-known algorithms used in adaptive filtering, system identification and adaptive control. Its popularity is mainly due to its fast convergence speed, which is considered to be optimal in practice. In this paper, RLS methods are used to solve reinforcement learning problems, where two new reinforcement learning algorithms using linear value function approximators are proposed and analyzed. The two algorithms are called RLS-TD( ) and Fast-AHC (Fast Adaptive Heuristic Critic), respectively. RLS-TD( ) can be viewed as the extension of RLS-TD(0) from =0 to general 0 1, so it is a multi-step temporal-difference (TD) learning algorithm using RLS methods. The convergence with probability one and the limit of convergence of RLS-TD( ) are proved for ergodic Markov chains. Compared to the existing LS-TD( ) algorithm, RLS-TD( ) has advantages in computation and is more suitable for online learning. The effectiveness of RLS-TD( ) is analyzed and verified by learning prediction experiments of Markov chains with a wide range of parameter settings. The Fast-AHC algorithm is derived by applying the proposed RLS-TD( ) algorithm in the critic network of the adaptive heuristic critic method. Unlike conventional AHC algorithm, Fast-AHC makes use of RLS methods to improve the learning-prediction efficiency in the critic. Learning control experiments of the cart-pole balancing and the acrobot swing-up problems are conducted to compare the data efficiency of Fast-AHC with conventional AHC. From the experimental results, it is shown that the data efficiency of learning control can also be improved by using RLS methods in the learning-prediction process of the critic. The performance of Fast-AHC is also compared with that of the AHC method using LS-TD( ). Furthermore, it is demonstrated in the experiments that different initial values of the variance matrix in RLS-TD( ) are required to get better performance not only in learning prediction but also in learning control. The experimental results are analyzed based on the existing theoretical work on the transient phase of forgetting factor RLS methods.", "creator": "(PScript5.dll Version 5.2)"}}}