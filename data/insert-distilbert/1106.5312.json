{"id": "1106.5312", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "27-Jun-2011", "title": "Manipulation of Nanson's and Baldwin's Rules", "abstract": "nanson's and baldwin's voting rules select also a winner by successively eliminating candidates with low borda scores. we show that these rules have a number of desirable theoretically computational properties. in particular, with unweighted votes, it is np - hard to manipulate either rule with one manipulator, whilst with weighted votes, it is entirely np - hard to manipulate or either rule with a small number of candidates and a coalition of manipulators. as only a couple of other voting rules are known to be np - hard to indefinitely manipulate with a single manipulator, nanson'f s and gordon baldwin's rules appear to be particularly resistant to manipulation from a theoretical perspective. we also propose a number of approximation methods for manipulating these two rules. experiments demonstrate that both rules are often difficult to manipulate in simulation practice. these results suggest that elimination style simulation voting rules deserve considerably further study.", "histories": [["v1", "Mon, 27 Jun 2011 06:42:04 GMT  (29kb)", "http://arxiv.org/abs/1106.5312v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["nina narodytska", "toby walsh", "lirong xia"], "accepted": true, "id": "1106.5312"}, "pdf": {"name": "1106.5312.pdf", "metadata": {"source": "CRF", "title": "Manipulation of Nanson\u2019s and Baldwin\u2019s Rules", "authors": ["Nina Narodytska", "Toby Walsh", "Lirong Xia"], "emails": ["ninan@cse.unsw.edu.au", "toby.walsh@nicta.com.au", "lxia@cs.duke.edu"], "sections": [{"heading": null, "text": "ar X\niv :1\n10 6.\n53 12\nv1 [\ncs .A\nI] 2\n7 Ju\nn 20\n11"}, {"heading": "Introduction", "text": "Computational social choice studies computational aspects of voting. For example, how does a coalition of agents compute a manipulation? Can we compile these votes into a more compact form? How do we decide if we have elicited enough votes from the agents to be able to declare the result? Whilst there has been a very active research community studying these sort of questions for well known voting rules like plurality and Borda, there are other less well known rules that might deserve attention. In particular, we put forward two historical voting rules due to Nanson and Baldwin which are related to Borda voting.\nThere are several reasons to consider these two rules. Firstly, they have features that might appeal to the two opposing camps that support Borda and Condorcet. In particular, both rules are Condorcet consistent as they elect the candidate who beats all others in pairwise elections. Secondly, both rules are elimination style procedures where candidates are successively removed. Other elimination procedures like STV and plurality with runoff are computationally hard to manipulate (in the case of STV, with or without weights on the votes, whilst in the case of plurality with runoff, only in the case of weighted votes). We might therefore expect Nanson\u2019s and Baldwin\u2019s rules to be computationally hard to manipulate. Thirdly, statistical analysis sug-\nCopyright c\u00a9 2013, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\ngest that, whilst the Borda rule is vulnerable to manipulation (Chamberlin 1985), Nanson\u2019s rule is particularly resistant (Favardin & Lepelley 2006). We might expect Baldwin to be similarly resistant. Finally, the two rules have been used in real elections in the Universitiy of Melbourne (between 1926 and 1982), the University of Adelaide (since 1968), and the State of Michigan (in the 1920s). It is perhaps therefore somewhat surprising that neither rule has received much attention till now in the computational social choice literature."}, {"heading": "Preliminaries", "text": "Let C = {c1, . . . , cm} be the set of candidates (or alternatives). A linear order on C is a transitive, antisymmetric, and total relation on C. The set of all linear orders on C is denoted by L(C). An n-voter profile P on C consists of n linear orders on C. That is, P = (V1, . . . , Vn), where for every j \u2264 n, Vj \u2208 L(C). The set of all n-profiles is denoted by Fn. We let m denote the number of candidates. A (deterministic) voting rule r is a function that maps any profile on C to a unique winning candidate, that is, r : F1\u222aF2\u222a. . . \u2192 C. In this paper, if not mentioned otherwise, ties are broken in the fixed order c1 \u227b c2 \u227b \u00b7 \u00b7 \u00b7 \u227b cm.\n(Positional) scoring rules are commonly used voting rules. Each positional scoring rule is identified by a scoring vector ~sm = (~sm(1), . . . , ~sm(m)) of m integers, for any vote V \u2208 L(C) and any candidate c \u2208 C, let ~sm(c, V ) = ~sm(j), where j is the rank of c in V . For any profile P = (V1, . . . , Vn), let ~sm(c, P ) = \u2211n j=1 ~sm(c, Vj). The rule selects c \u2208 C such that the total score ~sm(c, P ) is maximized. We assume scores are integers and decreasing. Borda is the positional scoring rule that corresponds to the scoring vector (m \u2212 1,m \u2212 2, . . . , 0). We write s(a, P ) for the Borda score given to candidate a from the profile of votes P , and s(a) where P is obvious from the context. When voters are weighted (that is, each voter is associated with a positive real number as the weight), a positional scoring rule selects the candidate that maximizes the weighted total score.\nThe unweighted (coalitional) manipulation problem is defined as follows. An instance is a tuple (r, PNM , c,M), where r is a voting rule, PNM is the non-manipulators\u2019 profile, c is the candidate preferred by the manipulators, and M is the set of manipulators. We are asked whether\nthere exists a profile PM for the manipulators such that r(PNM \u222a PM ) = c. The weighted (coalitional) manipulation is defined similarly, where the weights of the voters (both non-manipulators and manipulators) are also given as inputs. As is common in the literature, we break ties in favour of the coalition of the manipulators where appropriate."}, {"heading": "Nanson\u2019s and Baldwin\u2019s Rules", "text": "The Borda rule has several good properties. For instance, it is monotonic as increasing the score for a candidate only helps them win. Also it never elects the Condorcet loser (a candidate that loses to all others in a majority of head to head elections). However, it may not elect the Condorcet winner (a candidate that beats all others in a majority of head to head elections). Nanson\u2019s and Baldwin\u2019s rules, by comparison, always elect the Condorcet winner when it exists.\nNanson\u2019s and Baldwin\u2019s rules are derived from the Borda rule. Nanson\u2019s rule eliminates all those candidates with less than the average Borda score (Nanson 1882). The rule is then repeated with the reduced set of candidates until there is a single candidate left. A closely related voting rule proposed by Baldwin successively eliminates the candidate with the lowest Borda score1 until one candidate remains (Baldwin 1926). The two rules are closely related, and indeed are sometimes confused. One of the most appealing properties of Nanson\u2019s and Baldwin\u2019s rules is that they are Condorcet consistent, i.e. they elect the Condorcet winner. This follows from the fact that the Borda score of the Condorcet winner is never below the average Borda score. Both rules possess several other desirable properties including the majority criterion and the Condorcet loser criterion. There are also properties which distinguish them apart. For instance, Nanson\u2019s rule satisfies reversal symmetry (i.e. if there is a unique winner and voters reverse their vote then the winner changes) but Baldwin\u2019s rule does not."}, {"heading": "Unweighted Manipulation", "text": "We start by considering the computational complexity of manipulating both these rules with unweighted votes. We prove that the coalitional manipulation problem is NP-complete for both rules even with a single manipulator. Computational intractability with a single manipulator is known only for a small number of other voting rules including the second order Copeland rule (Bartholdi, Tovey, & Trick 1989), STV (Bartholdi and Orlin 1991) and ranked pairs (Xia et al. 2009). In contrast, when there are two or more manipulators, unweighted coalitional manipulation is hard for some other common voting rules (Faliszewski, Hemaspaandra, and Schnoor 2008; Faliszewski, Hemaspaandra, and Schnoor 2010; Xia, Conitzer, and Procaccia 2010; Davies et al. 2011; Betzler, Niedermeier, and Woeginger 2011). Our results therefore significantly increase the size of the set of voting rules used in practice that are known to be NP-hard to\n1If multiple candidates have the lowest score, then we use a tie-breaking mechanism to eliminate one of them.\nmanipulate with a single manipulator. This also contrasts to Borda where computing a manipulation with a single manipulator is polynomial (Bartholdi, Tovey, & Trick 1989). Adding elimination rounds to Borda to get Nanson\u2019s or Baldwin\u2019s rules increases the computational complexity of computing a manipulation with one manipulator from polynomial to NP-hard.\nOur results are proved by reductions from the EXACT 3- COVER (X3C) problem. An X3C instance contains two sets: V = {v1, . . . , vq} and S = {S1, . . . , St}, where t \u2265 2 and for all j \u2264 t, |Sj | = 3 and Sj \u2286 V . We are asked whether there exists a subset S \u2032 of S such that each element in V is in exactly one of the 3-sets in S \u2032.\nTheorem 1. With unweighted votes, the coalitional manipulation problem under Baldwin\u2019s rule is NP-complete even when there is only one manipulator.\nProof: We sketch a reduction from X3C. Given an X3C instance V = {v1, . . . , vq},S = {S1, . . . , St}, we let the set of candidates be C = {c, d, b} \u222a V \u222a A, where c is the candidate that the manipulator wants to make the winner, A = {a1, . . . , at}, and d and b are additional candidates. Members of A correspond to the 3-sets in S. Let m = |C| = q + t+ 3.\nThe profile P contains two parts: P1, which is used to control the changes in the score differences between candidates, after a set of candidates are removed, and P2, which is used to balance the score differences between the candidates. We define the votes W(u,v) = {u\u227bv\u227bOthers, rev(Others)\u227bu\u227bv} where Others is a total order in which the candidates in C \\ {u, v} are in a predefined lexicographic order, and rev(Others) is the reverse.\nWe make the following observations on W(c1,c2). For any set of candidates C\u2032 \u2286 C and any pair of candidates e1, e2 \u2208 C \\ C\u2032,\ns(e1,W(c1,c2)|C\\C\u2032)\u2212 s(e2,W(c1,c2)|C\\C\u2032)\n= s(e1,W(c1,c2))\u2212 s(e2,W(c1,c2))\n+\n{ 1 if e1 = c2 and c1 \u2208 C\u2032\n\u22121 if e1 = c1 and c2 \u2208 C\u2032 0 otherwise\nHere W(c1,c2)|C\\C\u2032 is the pair of votes obtained from W by removing all candidates in C\u2032. In words, the formula states that after C\u2032 is removed, the score difference between e1 and e2 is increased by 1 if and only if e1 = c2 and c1 is removed; it is decreased by 1 if and only if e1 = c1 and c2 is removed; for any other cases, the score difference does not change. Moreover, for any e \u2208 C \\ {c1, c2}, s(c1,W(c1,c2)) \u2212 s(e,W(c1,c2)) = 1 and s(c2,W(c1,c2)) \u2212 s(e,W(c1,c2)) = \u22121.\nWe next show how to use W(c1,c2) to construct the first part of the profile P1. Let m = |C|, that is, m = q + t+ 3. P1 is composed of the following votes: (1) for each j \u2264 t and each vi \u2208 Sj , there are 2m copies of W(vi,aj); (2) for each i \u2264 q, there are m copies of W(b,vi); (3) there are m(t + 6) copies of W(b,c). It is not hard to verify that s(b, P1)\u2212s(c, P1) \u2265 mq, and for any c\u2032 \u2208 V\u222aA, s(c\u2032, P1)\u2212 s(c, P1) \u2265 2m. P2 is composed of the following votes: (1)\nfor each i \u2264 q, there are s(vi, P1)\u2212 s(c, P1)\u2212m copies of W(d,vi); (2) for each j \u2264 t, there are s(aj , P1)\u2212s(c, P1)\u22121 copies of W(d,aj); (3) there are s(b, P1) \u2212 s(c, P1) \u2212 mq copies of W(d,b).\nLet P = P1 \u222a P2. We make the following observations on the Borda scores of the candidates in P . \u2022 For any i \u2264 q, s(vi, P )\u2212 s(c, P ) = m; \u2022 for any j \u2264 t, s(aj , P )\u2212 s(c, P ) = 1; \u2022 s(b, P )\u2212 s(c, P ) = mq. Suppose the X3C instance has a solution, denoted by (after reordering the sets in S) S1, . . . , Sq/3. Then, we let the manipulator vote for: c \u227b d \u227b aq/3+1 \u227b \u00b7 \u00b7 \u00b7 \u227b at \u227b b \u227b V \u227b a1 \u227b \u00b7 \u00b7 \u00b7 \u227b aq/3 In the first 4q/3 rounds, all candidates in V and {a1, . . . , aq/3} drop out. Then b drops out. In the following t\u2212 q/3 rounds the candidates in {aq/3+1, . . . , at} drop out. Finally, d loses to c in their pairwise election, which means that c is the winner.\nSuppose the manipulator can cast a vote to make c the winner. We first note that d must be eliminated in the final round since its score is higher than c in all previous rounds. In the round when b is eliminated, the score of b should be no more than the score of c. We note that s(b, P ) \u2212 s(c, P ) = mq and the score difference can only be reduced by the manipulator ranking b below c, and by eliminating v1, . . . , vq before b. However, by ranking b below c, the score difference is reduced by no more than m \u2212 1. Therefore, before b drops out, all candidates in V must have already dropped out. We note that for any vi \u2208 V , s(vi, P ) \u2212 s(c, P ) = m. Therefore, for each vi \u2208 V , there exists aj with vi \u2208 Sj who is removed before vi. For any such aj , none of the candidates in Sj can drop out before aj (otherwise the score of aj cannot be less than c before b drops out), and in the next three rounds the candidates in Sj drop out. It follows that the set of candidates in A that drop out before any candidate in V corresponds to an exact cover of V . \u2737\nTheorem 2. With unweighted votes, the coalitional manipulation problem under Nanson\u2019s rule is NP-complete even when there is only one manipulator.\nThe proof uses the same gadget W(u,v) that is used in the proof of Theorem 1. Due to the space constraints, the proof can be found in an online technical report."}, {"heading": "Weighted Manipulation", "text": "If the number of candidates is bounded, then manipulation is NP-hard to compute when votes are weighted. Baldwin\u2019s rule appears more computationally difficult than Nanson\u2019s rule. Coleman and Teague (2007) prove that Baldwin\u2019s requires only 3 candidates to be NP-hard, whilst we prove here that Nanson\u2019s rule is polynomial to manipulate with 3 candidates and requires at least 4 candidates to be NP-hard. It follows that computing a manipulation is NP-hard for both rules when votes are unweighted, the number of candidates is small and there is uncertainty about how agents have voted in the form of a probability distribution (Conitzer, Sandholm, and Lang 2007). Note that the coalition manipulation problem for Borda with\nweighted votes is NP-hard for 3 or more candidates (Conitzer, Sandholm, and Lang 2007). Thus, somewhat surprisingly, adding an elimination round to Borda, which gives us Nanson\u2019s rule, decreases the computational complexity of computing a manipulation with 3 manipulators from NPhard to polynomial.\nTheorem 3. With Nanson\u2019s rule and weighted votes, the coalition manipulation problem is NP-complete for just 4 candidates.\nProof: The proof is by a reduction from PARTITION, where we are given a group of integers {k1, . . . , kl} with sum 2K , and we are asked whether there is way to partition the group into two groups, the elements in each of which sum to K . For any PARTITION instance, we construct a coalition manipulation problem with 4 candidates (a, b, c and p) where p is again the candidate that the manipulators wish to win. We suppose the non-manipulators have voted as follows: 2K + 1 for each of b\u227bp\u227bc\u227ba, a\u227bc\u227bb\u227bp, c\u227bp\u227bb\u227ba and a\u227bb\u227bc\u227bp, K + 2 for p\u227ba\u227bb\u227bc and c\u227bb\u227bp\u227ba, and 1 each for a\u227bb\u227bp\u227bc, c\u227bp\u227ba\u227bb, a\u227bc\u227bp\u227bb and b\u227bp\u227ba\u227bc. The total scores from non-manipulators are as follows: s(a) = 14K + 18, s(b) = s(c) = 17K + 18 and s(p) = 12K + 18. For each integer ki, we have a member of the manipulating coalition with weight ki.\nNow, suppose there is a solution to the PARTITION instance. Let the manipulators corresponding to the integers in one half of the partition vote p\u227ba\u227bb\u227bc, and let the others vote p\u227ba\u227bc\u227bb. All scores are now 18K + 18 (which is also the average). By the tie-breaking rule, p wins in the first round. Thus the manipulators can make p win if a perfect partition exists.\nConversely, suppose there is a successful manipulation. Clearly, p cannot be eliminated in the first round. To ensure this, all manipulators must put p in first place. Next, we show that if p is not a joint winner of the first round, p cannot win overall. We consider all possible sets of candidates that could be eliminated in the first round. There are 6 cases. In the first case, only a is eliminated in the first round. The scores from non-manipulators in the second round are as follows: s(b) = s(c) = 12K + 13, and s(p) = 6K+10. The average score is 10K+12. Even with the maximum 4K possible score from the manipulators, p is eliminated. This contradicts the assumption that p wins. In the second case, only b is eliminated in the first round. As p and a are not eliminated in the first round, the manipulators have to cast votes that put p in first place and b in second place. With such manipulating votes, the scores in the second round are: s(a) = 11K + 11, s(c) = 12K + 12 and s(p) = 13K + 13. The average score is 12K + 12. Hence, a is eliminated. In the next round, p is eliminated as s(p) = 5K + 5, s(c) = 7K + 7 and the average score is 6K + 6. This contradicts the assumption that p wins. In the third case, only c is eliminated in the first round. This case is symmetric to the second case. In the fourth case, a and b are eliminated in the first round. The case when a and c are eliminated is symmetric. In the second round, the scores from non-manipulators are s(c) = 7K + 7 and s(p) = 3K + 5. The 2K score from the manipulators\ncannot prevent p being eliminated. This contradicts the assumption that p wins. In the fifth case, b and c are eliminated in the first round. However, in the first round, the score b and c receive from the non-manipulators is 17K + 18. One of them will get at least K points from manipulators. This will give them greater than the average score of 18K+8. Hence, at least one of them is not eliminated. In the sixth and final case, a, b and c are all eliminated in the first round. This case is again impossible by the same argument as the last case.\nThe only way for p to win is to have a tie with all candidates in the first round. As we observed above, the manipulators have to put p in first place, and a in second place. In turn, both b and c have to get exactly K points from the manipulators. Hence, there exists a solution to the PARTITION instance. \u2737\nClearly, it is polynomial to compute a manipulation of Baldwin\u2019s rule with 2 candidates (since this case degenerates to majority voting). With Nanson\u2019s rule, on the other hand, it is polynomial with up to 3 candidates.\nTheorem 4. With Nanson\u2019s rule and weighted votes, the coalition manipulation problem is polynomial for up to 3 candidates.\nProof: Consider an election with 3 candidates (a, b and p) in which the manipulators want p to win. We prove that the optimal strategy is for the manipulators either all to vote p \u227b a \u227b b or all to vote p \u227b b \u227b a. If p does not win using one of these two votes, then p cannot win. Therefore we simply try out the two votes and compute if p wins in either case.\nSuppose the manipulators can make p win. We first note that there is no loss for them to raise p to the first position, while keeping the other parts of their preferences the same. By doing so, the score of p goes up and the scores of a and b go down. The only possible change in the elimination process is that now both a and b drop out in the first round, so that p still wins.\nNow, suppose that all manipulators rank p in their top positions. Let PM denote the manipulators\u2019 profile that makes p win. Because Nanson\u2019s rule never selects the Condorcet loser, p cannot be beaten by both a and b in pairwise elections. Without loss of generality, suppose p beats a. We argue that if all manipulators vote p \u227b a \u227b b, then p still wins. For the sake of contradiction, suppose all manipulators vote p \u227b a \u227b b but p does not win. As the manipulators still rank p in their top positions, the score of p in the first round is the same as in PM . Therefore, p must enter (and lose) the second round. Hence, only a is eliminated in the first round, and in the second round b beats p. However, having the manipulators vote p \u227b a \u227b b only lowers b\u2019s score in the first round, compared to the case where they vote PM . Hence, when the manipulators vote PM , b also enters the second round and then beats p, which is a contradiction.\nTherefore, if the manipulators can make p win, then they can make p win by all voting p \u227b a \u227b b, or all voting p \u227b b \u227b a. \u2737"}, {"heading": "Approximation Methods", "text": "One way to deal with computational intractability is to treat computing a manipulation as an approximation problem where we try to minimize the number of manipulators. We therefore considered five approximation methods. These are either derived from methods used with Borda or are specifically designed for the elimination style of Nanson\u2019s and Baldwin\u2019s rules.\nREVERSE: The desired candidate is put first, and the other candidates are reverse ordered by their current Borda score. We repeat this construction until the desired candidate wins. REVERSE was used to manipulate the Borda rule in (Zuckerman, Procaccia, and Rosenschein 2009).\nLARGESTFIT: This method was proposed for the Borda rule (Davies et al. 2010). Unlike REVERSE which constructs votes one by one, we construct votes in any order using a bin packing heuristic which puts the next largest Borda score into the \u201cbest\u201d available vote. We start with a target number of manipulators. Simple counting arguments will lower bound this number, and we can increae it until we have a successful manipulation. We construct votes for the manipulators in which the desired candidate is in first place. We take the other Borda scores of the manipulators in decreasing order, and assign them to the candidate with the lowest current Borda score who has been assigned less than the required number of scores. A perfect matching algorithm then converts the sets of Borda scores for the candidates into a set of manipulating votes.\nAVERAGEFIT: This method was also proposed for the Borda rule (Davies et al. 2010). We again have a target number of manipulators, and construct votes for the manipulators in which the desired candidate is in first place. We take the other Borda scores of the manipulators in decreasing order, and assign them to the candidate with the current lowest average Borda score who has less than the required number of scores. The intuition is that if every score was of average size, we would have a perfect fit. If more than one candidate has the same lowest average Borda score and can accommodate the next score, we tie-break on the candidate with the fewest scores. Examples of LARGESTFIT and AVERAGEFIT can be found in (Davies et al. 2010).\nELIMINATE: We repeatedly construct votes in which the desired candidate is put in first place, and the other candidates in the reverse of the current elimination order. For instance, the first candidate eliminated is put in last place. For Nanson\u2019s rule, we order candidates eliminated in the same round by their Borda score in that round.\nREVELIMINATE: We repeatedly construct votes in which the desired candidate is put in first place, and the other candidates in the current elimination order. For instance, the first candidate eliminated is put in second place. For Nanson\u2019s rule, we order candidates eliminated in the same round by the inverse of their Borda score in that round.\nThe intuition behind ELIMINATE is to move the desired candidate up the elimination order whilst keeping the rest of\nthe order unchanged. With REVELIMINATE, the intuition is to move the desired candidate up the elimination order, and to assign the largest Borda scores to the least dangerous candidates. It is easy to show that all methods will eventually compute a manipulation of Nanson\u2019s or Baldwin\u2019s rule in which the desired candidate wins.\nWith Borda voting, good bounds are known on the quality of approximation that is achievable. In particular, (Zuckerman, Procaccia, and Rosenschein 2009) proved that REVERSE never requires more than one extra manipulator than optimal. Baldwin\u2019s and Nanson\u2019s rules appear more difficult to approximate within such bounds. We can give examples where all five methods compute a manipulation that use several more manipulators than is optimal. Indeed, even with a fixed number of candidates, REVERSE can require an unbounded number of extra manipulators.\nTheorem 5. With Baldwin\u2019s rule, there exists an election with 7 candidates and 42n votes where REVERSE computes a manipulation with at least n more votes than is optimal.\nProof: (Sketch) Consider an election over a, b, c, d, e, f and p where p is the candidate that the manipulators wish to win. We define R(u, v) as the pair of votes: u\u227bv\u227bOthers\u227bp, rev(Others)\u227bu\u227bv\u227bp where Others is some fixed ordering of the other candidates and rev(Others) is its reverse. The non-manipulators cast the following votes: 3n copies of R(a, b), R(b, c), R(c, d), R(d, e) and R(e, f). In addition, there are 6n copies of the votes: p\u227ba\u227bOthers and rev(Others)\u227bp\u227ba. If 18n manipulators vote identically p\u227ba\u227b . . .\u227bf then p wins. This provides an upper bound on the size of the optimal manipulation. After the nonmanipulators have voted, s(a) = s(f) = 138n, s(b) = s(c) = s(d) = s(e) = 141n and s(p) = 42n. REVERSE will put p in first place. We suppose n is a multiple of 2, but more complex arguments can be given in other cases. After n manipulating votes have been constructed, the scores of candidates a to f are level at 285n/2 and p is leveled at 48n. From then on, the manipulators put p in first place and alternate the order of the other candidates. At least 32n votes are therefore required for p to move out of last place. \u2737\nAsymptotically this result is as bad as we could expect. Any election can be manipulated with O(n) votes by simply reversing all previous votes, and this proof demonstrates that REVERSE may use O(n) more votes than is optimal."}, {"heading": "Experimental Results", "text": "To test the difficulty of computing manipulations in practice and the effectiveness of these approximation methods, we ran some experiments using a similar setup to (Walsh 2010). We generated either uniform random votes or votes drawn from a Polya Eggenberger urn model. In the urn model, votes are drawn from an urn at random, and are placed back into the urn along with a other votes of the same type. This captures varying degrees of social homogeneity. We set a = m! so that there is a 50% chance that the second vote is the same as the first.\nOur first set of experiments used 3000 elections with 5 candidates and 5 non-manipulating voters. This is small\nenough to find the optimal number of manipulators using brute force search, and thus to determine how often a heuristic computes the optimal solution. We threw out the 20% or so of problems generated in which the chosen candidate has already won before the manipulators vote. Results are given in Tables 1\u20132. Heuristics that are very effective at finding an optimal manipulation with the Borda rule do not perform as well with Baldwin\u2019s and Nanson\u2019s rules. For example, AVERAGEFIT almost always finds an optimal manipulation of the Borda rule but can only find an optimal solution about 3/4 of the time with Baldwin\u2019s or Nanson\u2019s rules.\nOur second set of experiments used larger problems. This amplifies the differences between the different approximation methods (but means we are unable to compute the optimal manipulation using brute force search). Problems have between 22 and 27 candidates, and the same number of votes as candidates. We tested 6000 instances, 1000 at each problem size. Tables 3\u20136 show the results for the average number of manipulators. The results show that overall REVERSE works slightly better than LARGESTFIT and AVERAGEFIT, which themselves outperform the other two methods espe-\ncially for problems with large number of candidates. We observe a similar picture with Nanson\u2019s rule. This contrasts with the Borda rule where LARGESTFIT and AVERAGEFIT do much better than REVERSE (Davies et al. 2010). In most cases AVERAGEFIT is less effective than LARGESTFIT except urn elections with Nanson\u2019s rule.\nThese experimental results suggest that Baldwin\u2019s and Nanson\u2019s rules are harder to manipulate in practice than Borda. Approximation methods that work well on the Borda rule are significantly less effective on these rules. Overall, REVERSE, LARGESTFIT and AVERAGEFIT appear to offer the best performance, though no heuristic dominates."}, {"heading": "Other Related Work", "text": "Bag, Sabourian, & Winter (2009) prove that a class of voting rules which use repeated ballots and eliminate one candidate in each round are Condorcet consistent. They illustrate this class with the weakest link rule in which the candidate with the fewest ballots in each round is eliminated. Geller (2005) has proposed a variant of single transferable vote where first place votes, candidates are successively eliminated based on their original Borda score. Unlike Nanson\u2019s and Baldwin\u2019s rules, this method does not recalculate the Borda score based on the new reduced set of candidates. For any Condorcet consistent rule (and thus for Nanson\u2019s and Baldwin\u2019s rule), Brandt et al. (2010) showed that many types of control and manipulation are polynomial to compute when votes are single peaked."}, {"heading": "Conclusions", "text": "With unweighted votes, we have proven that Nanson\u2019s and Baldwin\u2019s rules are NP-hard to manipulate with one manipulator. This increases by two thirds the number of rules known to be NP-hard to manipulate with just a single manipulator. With weighted votes, on the other hand, we have proven that Nanson\u2019s rule is NP-hard to manipulate with just a small number of candidates and a coalition of manipulators. We have also proposed a number of approximation methods for manipulating Nanson\u2019s and Baldwin\u2019s\nrules. Our experiments suggest that both rules are difficult to manipulate in practice. There are many other interesting open questions coming from these results. For example, are there other elimination style voting rules which are computationally difficult to manipulate? As a second example, with Nanson\u2019s and Baldwin\u2019s rule what is the computational complexity of other types of control like the addition/deletion of candidates, and the addition/deletion of voters? As a third example, we could add elimination rounds to other scoring rules. Do such rules have interesting computational properties?"}, {"heading": "Acknowledgments", "text": "Nina Narodytska is supported by the Asian Office of Aerospace Research and Development through grant AOARD-104123. Toby Walsh is funded by the Australian Department of Broadband, Communications and the Digital Economy and the ARC. Lirong Xia acknowledges a James B. Duke Fellowship and Vincent Conitzer\u2019s NSF CAREER 0953756 and IIS-0812113, and an Alfred P. Sloan fellowship for support. We thank all AAAI-11 reviewers for their helpful comments and suggestions."}], "references": [], "referenceMentions": [], "year": 2013, "abstractText": "Nanson\u2019s and Baldwin\u2019s voting rules select a winner by successively eliminating candidates with low Borda scores. We show that these rules have a number of desirable computational properties. In particular, with unweighted votes, it is NP-hard to manipulate either rule with one manipulator, whilst with weighted votes, it is NP-hard to manipulate either rule with a small number of candidates and a coalition of manipulators. As only a couple of other voting rules are known to be NP-hard to manipulate with a single manipulator, Nanson\u2019s and Baldwin\u2019s rules appear to be particularly resistant to manipulation from a theoretical perspective. We also propose a number of approximation methods for manipulating these two rules. Experiments demonstrate that both rules are often difficult to manipulate in practice. These results suggest that elimination style voting rules deserve further study.", "creator": "LaTeX with hyperref package"}}}