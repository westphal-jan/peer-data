{"id": "1106.5890", "review": {"conference": "AAAI", "VERSION": "v1", "DATE_OF_SUBMISSION": "29-Jun-2011", "title": "A Comparison of Lex Bounds for Multiset Variables in Constraint Programming", "abstract": "set and arbitrary multiset variables in constraint programming have typically been represented using subset bounds. however, this is given a weak representation that neglects potentially useful information about a set such as its cardinality. for set variables, the length - family lex ( ll ) representation representation successfully provides information about the length ( cardinality ) and position in the lexicographic ordering. for multiset variables, where elements can be repeated, we consider richer representations that take into law account additional information. we study eight different representations in which we maintain bounds according just to one of the eight different orderings : length - ( co ) lex ( ll / lc ), variety - ( co ) lex ( vl / ca vc ), binary length - variety - ( co ) lex ( either lvl / lvc ), and variety - length - ( co ) lex ( vll / vlc ) orderings. these representations best integrate together information about the cardinality, variety ( number of distinct elements in selecting the multiset ), and position in some total ordering. beyond theoretical considerations and empirical comparisons of expressiveness and compactness of the over eight collected representations suggest that length - range variety - ( co ) combined lex ( lvl / lvc ) and variety - length - ( co ) lex ( vll / vlc ) characters usually instead give tighter bounds after constraint propagation. hence we successfully implement the eight representations and quickly evaluate defending them against the subset bounds with representation satisfied with cardinality checking and variety reasoning. results demonstrate that someday they offer significantly better pruning strategy and hence runtime.", "histories": [["v1", "Wed, 29 Jun 2011 09:57:43 GMT  (27kb)", "http://arxiv.org/abs/1106.5890v1", "7 pages, Proceedings of the Twenty-Fifth AAAI Conference on Artificial Intelligence (AAAI-11)"]], "COMMENTS": "7 pages, Proceedings of the Twenty-Fifth AAAI Conference on Artificial Intelligence (AAAI-11)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["yat chiu law", "jimmy ho-man lee", "may hiu-chun woo", "toby walsh"], "accepted": true, "id": "1106.5890"}, "pdf": {"name": "1106.5890.pdf", "metadata": {"source": "CRF", "title": "A Comparison of Lex Bounds for Multiset Variables in Constraint Programming", "authors": ["T. Walsh"], "emails": ["yclaw@cse.cuhk.edu.hk", "jlee@cse.cuhk.edu.hk", "hcwoo@cse.cuhk.edu.hk", "toby.walsh@nicta.com.au"], "sections": [{"heading": null, "text": "ar X\niv :1\n10 6.\n58 90\nv1 [\ncs .A\nI] 2\n9 Ju\nn 20\n11"}, {"heading": "Introduction", "text": "In constraint programming, we often need to model multisets (or bags) of objects. For example, in the template design problem (prob002 in CSPLib (Gent and Walsh 1999)), we need to construct printing templates, which are multisets of different designs. Multisets, unlike sets, can contain repetition of elements. For popular designs, we may have multiple copies on the same template. Surprisingly, whilst there has been significant progress on developing representations for sets, relatively little research has been done on how best to represent multisets.\nSadler and Gervet (2004) proposed representing set variables with subset, lexicographic, and cardinality bounds. Indeed, they suggested that such a representation could also be used for multisets (2008). However, little detail is provided about how to do this exactly. To compare two multisets, they lexicographically compare their occurrence vectors written\nCopyright c\u00a9 2014, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\nin decreasing order. For instance, {3, 3, 2, 1, 1} {4} {4, 4}. Gervet and Van Hentenryck (2006) proposed representing set variables using length-lex bounds, arguing that it provides comparable pruning to the aforementioned hybrid domains at a fraction of the computational cost. It is therefore promising to consider length-lex and related bounds for multiset variables. However, as a number of different orderings are possible, we have undertaken a theoretical and empirical comparison of the most promising options.\nAs multisets permit repeated elements, we can incorporate information about the variety (number of distinct elements) (Law, Lee, and Woo 2009) in addition to the cardinality and position in the lexicographic ordering. As a result, we introduce eight different representations for multiset variables in which we maintain bounds according to one of eight different orderings: length-(co)lex (LL/LC), variety(co)lex (VL/VC), length-variety-(co)lex (LVL/LVC), and variety-length-(co)lex (VLL/VLC) orderings. These bounds provide information about the possible cardinality, variety, and position in the (co)lexicographic ordering of a multiset. We evaluate the expressiveness (whether the set of multisets can be exactly represented) and compactness (whether the interval is minimal) of the eight representations both theoretically and empirically. Our results suggest that LVL/LVC and VLL/VLC representations are usually more expressive and more compact than LL/LC and VL/VC respectively. The eight representations give total orderings on multisets, which make enforcing bounds consistency on multiset variables possible. However, when we attempt to enforce bounds consistency on the bounds of the proposed representations, this operation can be NP-hard even on unary constraints. To test out these representations, we implement the eight representations and evaluate them against the subset bounds representation with cardinality and variety reasoning. Results confirm that these new representations achieve significantly better pruning and runtime."}, {"heading": "Background", "text": "Set Variables\nA set is an unordered list of elements without repetition. The cardinality of a set S is the number of elements in S, denoted as |S|. Gervet (1997) proposed to represent the domain of a set variable S with an interval [glb(S), lub(S)]\nsuch that DS = {m | glb(S) \u2286 m \u2286 lub(S)}. The greatest lower bound glb(S) contains all the elements which must exist in the set, while the least upper bound lub(S) contains any element which can exist in the set. S is said to be bound when its lower bound equals its upper bound (i.e., glb(S) = lub(S)). In this subset bounds representation, the set domain is ordered partially under \u2286. It also neglects the cardinality and the position in lexicographic ordering which can be important in many problems. Thus, Gervet and Van Hentenryck (2006) proposed to totally order a set domain with a length-lex ordering. This representation incorporates the cardinality and the position in lexicographic ordering directly, giving tighter bounds when enforcing bounds consistency.\nNotation Given a universe U of integers {1, . . . , n}, set variables, denoted as Si, takes their values from U . Sets are denoted by letters s, t, x, and y. A subset s of U of cardinality c is denoted by {s1, s2, . . . , sc} where s1 < s2 < \u00b7 \u00b7 \u00b7 < sc.\nLength-lex Ordering The length-lex ordering totally orders sets first by cardinality and then lexicographically.\nDefinition 1. A length-lex ordering is defined by: s t iff s = \u2205 \u2228 |s| < |t| \u2228 (|s| = |t| \u2227 (s1 < t1 \u2228 s1 = t1 \u2227 s \\ {s1} t \\ {t1})).\nDefinition 2. Given a universe U , a length-lex interval is a pair of sets \u3008m,M\u3009 which represents the sets between m and M in the length-lex ordering (i.e., {s \u2286 U |m s M}).\nGiven a universe U = {1, . . . , 4}, the sets are ordered as follows: \u2205 {1} {2} {3} {4} {1, 2} {1, 3} {1, 4} {2, 3} {2, 4} {3, 4} {1, 2, 3} {1, 2, 4} {1, 3, 4} {2, 3, 4} {1, 2, 3, 4}. The length-lex interval \u3008{1, 2}, {3, 4}\u3009 denotes the set {{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}.\nMultiset Variables A multiset is a generalization of set that allows elements to repeat. Without loss of generality, we assume that multiset elements are positive integers from 1 to n. We shall use \u2205 to denote both the empty set and the empty multiset. The universe of a multiset is a multiset itself, which defines the maximum possible occurrences of each element. Given a universe U , we denote a multiset S as S = {{m1,m2, \u00b7 \u00b7 \u00b7 ,mc}} where mi \u2264 mj for 1 \u2264 i \u2264 j \u2264 c, its cardinality (total number of elements) as |S|, and its variety (total number of distinct elements) (Law, Lee, and Woo 2009) as \u2016S\u2016. For example, if S = {{1, 1, 2, 2, 3}}, then |S| = 5 and \u2016S\u2016 = 3. Since an element in a multiset variable can occur multiple times, we let occ(i, S) be the number of occurrences of an element i in the multiset S. Walsh (2003) proposed using an occurrence vector \u3008occ(1, S), . . . , occ(n, S)\u3009 to represent a multiset variable with n elements. For example, the occurrence representation for the value {{1, 1, 2, 2, 3}} with the universe U = {{1, 1, 2, 2, 3, 3}} is \u3008occ(1, S), occ(2, S), occ(3, S)\u3009 = \u30082, 2, 1\u3009.\nNote that a set value can also be represented using the occurrence representation in which the number of occurrence\nis either 0 or 1 to denote the existence of the corresponding element. Thus, we adopt the occurrence representation for multiset variables and order the occurrence vector to give various orderings in multisets."}, {"heading": "Lex-induced Orderings in Multisets", "text": "The length-lex representation for sets incorporates information about the length (cardinality) and position in the lexicographic ordering. Such a representation can be extended to include the variety information since multisets allow repeated elements. This gives a total of eight different ways to order multisets. In the following, we formally define the eight orderings, in which four of them order the position lexicographically and the other four colexicographically."}, {"heading": "Lex Orderings", "text": "The lex ordering l totally orders multisets lexicographically. Here, we assume the multisets are represented by the occurrence representation (i.e., the number of occurrences of each element are stored in an occurrence vector). Thus, given two multisets x and y, we compare their occurrence vectors \u3008occ(1, x), . . . , occ(n, x)\u3009 and \u3008occ(1, y), . . . , occ(n, y)\u3009 from the first position to the last.\nDefinition 3. A lex ordering l is defined by: x l y iff (x = y) \u2228 (\u2203i, occ(i, x) < occ(i, y) \u2227 \u2200j < i, occ(j, x) = occ(j, y)).\nFor example, consider two multisets x = {{1, 2, 2}} and y = {{1, 3, 3}}. Their occurrence vectors are \u30081, 2, 0\u3009 and \u30081, 0, 2\u3009 respectively. {{1, 3, 3}} l {{1, 2, 2}} because occ(1, y) = occ(1, x) and occ(2, y) < occ(2, x)."}, {"heading": "Colex Orderings", "text": "Contrary to the lex ordering, the colex ordering c compares the occurrence vectors of two multisets from the last position to the first.\nDefinition 4. A colex ordering c is defined by: x c y iff (x = y) \u2228 (\u2203i, occ(i, x) < occ(i, y) \u2227 \u2200j > i, occ(j, x) = occ(j, y)).\nFor example, let two multisets x = {{1, 3, 3}} and y = {{2, 3, 3}} with occurrence vectors \u30081, 0, 2\u3009 and \u30080, 1, 2\u3009 respectively. They are ordered as {{1, 3, 3}} c {{2, 3, 3}} because occ(3, x) = occ(3, y) and occ(2, x) < occ(2, y)."}, {"heading": "Induced Orderings", "text": "Given a total order \u03b2 on a set of multisets, we can have four different \u03b2-induced orderings when we integrate \u03b2 with cardinality and/or variety of multisets.\nLength-\u03b2 Ordering The length-\u03b2 ordering l\u03b2 totally orders multisets first by their cardinality, and then by the \u03b2 ordering: x l\u03b2 y iff |x| < |y| \u2228 (|x| = |y| \u2227 x \u03b2 y).\nVariety-\u03b2 Ordering The variety-\u03b2 ordering v\u03b2 totally orders multisets first by their variety, and then by the \u03b2 ordering: x v\u03b2 y iff \u2016x\u2016 < \u2016y\u2016 \u2228 (\u2016x\u2016 = \u2016y\u2016 \u2227 x \u03b2 y).\nLength-\u03b2 and variety-\u03b2 prefer cardinality and variety over the \u03b2 ordering respectively. In fact, both cardinality and variety can be considered together, giving two more orderings.\nLength-variety-\u03b2 Ordering The length-variety-\u03b2 ordering lv\u03b2 totally orders multisets first by their cardinality, then by their variety, and then by the \u03b2 ordering: x lv\u03b2 y iff |x| < |y| \u2228 (|x| = |y| \u2227 x v\u03b2 y).\nVariety-length-\u03b2 Ordering The variety-length-\u03b2 ordering vl\u03b2 totally orders multisets first by their variety, then by their cardinality, and then by the \u03b2 ordering: x vl\u03b2 y iff \u2016x\u2016 < \u2016y\u2016 \u2228 (\u2016x\u2016 = \u2016y\u2016 \u2227 x l\u03b2 y).\nSince lex and colex orderings are total orders, we can have eight different orderings by substituting \u03b2 by the lex and colex orderings. For example, substituting \u03b2 by the lex ordering in the length-\u03b2 ordering gives the lengthlex ordering LL ( ll). Similarly, we can have variety-lex VL ( vl), length-variety-lex LVL ( lvl), variety-length-lex VLL ( vll), length-colex LC ( lc), variety-colex VC ( vc), length-variety-colex LVC ( lvc), and variety-length-colex VLC ( vlc) orderings.\nThe above eight orderings are applicable to multisets. All the four colex orderings on multisets reduce to the LL ordering on sets introduced by Gervet and Van Hentenryck (2006). Note that, when we consider a fixed length, the colex (resp. lex) ordering for set values is equivalent to ordering the occurrence vector lexicographically (resp. colexicographically).\nThe domain of a multiset variable is simply a set of multisets. We can thus totally order the domain values of a variable according to the eight orderings. To illustrate the differences, Table 1 lists the domain of a multiset variable S with universe U = {{1, 2, 2, 3, 3}} in the four lex orderings. Take the LVL ordering as an example. We first order the multisets by their cardinality. Thus, \u2205 has cardinality 0 and is the first multiset, followed by the multisets with cardinalities 1, 2, and so on. For multisets of the same cardinality, we then compare their variety. Consider the segment with cardinality 2, i.e., from {{3, 3}} to {{1, 2}}. The multisets {{3, 3}} and {{2, 2}} are ordered before {{2, 3}}, {{1, 3}}, and {{1, 2}} because the former two have variety 1 and the latter ones have variety 2. Lastly, we order the multisets lexicographically. The occurrence vectors of {{3, 3}} and {{2, 2}} are \u30080, 0, 2\u3009 and \u30080, 2, 0\u3009 respectively. Thus, {{3, 3}} lvl {{2, 2}} because occ(1, {{3, 3}}) = occ(1, {{2, 2}}) = 0 and occ(2, {{3, 3}}) < occ(2, {{2, 2}}).\nGiven a multiset variable, we can approximate its domain, which is a set S of multisets, with an \u03b1-interval, where \u03b1 refers to one of the above eight orderings. The interval \u3008m,M\u3009\u03b1 must contain all the multisets in S such that m and M are the lower and upper bounds of S respectively. We also define the \u03b1-closure of S which is the minimal possible \u03b1-interval containing S.\nDefinition 5. Given an \u03b1 ordering, an \u03b1-interval \u3008m,M\u3009\u03b1 is a set of multisets defined by \u3008m,M\u3009\u03b1 = {x |m \u03b1 x \u03b1 M}. The \u03b1-closure of S is defined by cl\u03b1(S) = \u3008m,M\u3009\u03b1, where S \u2286 \u3008m,M\u3009\u03b1 and there does not exist m \u227a\u03b1 m\u2032 and M \u2032 \u227a\u03b1 M such that (m 6= m\u2032 or M 6= M \u2032) and S \u2286 \u3008m\u2032,M \u2032\u3009\u03b1.\nDefinition 6. An \u03b1 representation of a set S of multisets is cl\u03b1(S). An \u03b1 representation of S is exact if S = cl\u03b1(S).\nFor example, let the universe U = {{1, 2, 2, 3, 3}} and S = {{{1}}, {{2, 2}}, {{2, 3}}}. The lvl-closure of S is the lvlinterval \u3008{{1}}, {{2, 3}}\u3009lvl. This representation is not exact, as the interval contains the multiset {{3, 3}} /\u2208 S."}, {"heading": "Expressiveness", "text": "An exact representation gives the tightest possible bounds and contains no undesired values. It is often the case that a set of multisets can be exactly represented using one representation but not using a different representation. In this section, we compare the eight representations to see which ordering is better in terms of the notion \u201cexpressiveness\u201d.\nDefinition 7. (Walsh 2003) Given a universe U and two different multiset representations A and B. A is said to be as expressive as B if \u2200S \u2286 U, (S = clA(S)) \u2194 (S = clB(S)). A is said to be more expressive than B if \u2200S \u2286 U, (S = clB(S)) \u2192 (S = clA(S)) and \u2203S \u2286 U, (S = clA(S)) \u2227 (S 6= clB(S)). A and B are incomparable if neither one of them is more expressive than the other.\nThe following propositions compare the expressiveness of the eight representations under the conditions that the cardinality and/or variety of a set of multisets is fixed.\nProposition 1. When both the cardinality and variety are fixed, (i) the LVL/LVC representation is as expressive as the VLL/VLC representation, (ii) the LVL/LVC and VLL/VLC representations are more expressive than the LL/LC and VL/VC representations respectively, and (iii) the LVL is as expressive as the LVC and the VLL is as expressive as the"}, {"heading": "VLC.", "text": "The results in Proposition 1 can be demonstrated using the example in Table 1. When the cardinality and variety are 2 and 1 respectively, the LVL and VLL representations can exactly represent {{{2, 2}}, {{3, 3}}} by the lvl-interval \u3008{{3, 3}}, {{2, 2}}\u3009lvl and the vll-interval \u3008{{3, 3}}, {{2, 2}}\u3009vll respectively. However, the LL and VL representations give the ll-interval \u3008{{3, 3}}, {{2, 2}}\u3009ll and the vl-interval \u3008{{3, 3}}, {{2, 2}}\u3009vl respectively, in which both contain the additional undesired value {{2, 3}}.\nThe following two propositions relax the conditions to the case that either the cardinality or the variety is fixed.\nProposition 2. When the cardinality is fixed, (i) the LVL/LVC representation is more expressive than the VLL/VLC, LL/LC, and VL/VC representations, and (ii) the"}, {"heading": "LL representation is as expressive as the LC representation.", "text": "Proposition 3. When the variety is fixed, (i) the VLL/VLC representation is more expressive than the LVL/LVC, LL/LC, and VL/VC representations, and (ii) the VL representation is as expressive as the VC representation.\nIn Table 1, when the cardinality is 3, the LVL representation can exactly represent the multisets by the lvl-interval \u3008{{2, 3, 3}}, {{1, 2, 3}}\u3009lvl, while the VLL, LL, or VL representations cannot. There are additional undesired values in their corresponding intervals. In fact, when only the variety is fixed, we obtain similar results. Suppose the variety is 2, the VLL representation can exactly represent the multisets\nby the vll-interval \u3008{{2, 3}}, {{2, 2, 3, 3}}\u3009vll, while the LVL, LL, or VL representations cannot."}, {"heading": "Compactness", "text": "The notion of expressiveness concerns the exactness of the representation. However, a domain D of a multiset variable might not be exactly represented using any of the eight representations, i.e., D \u2282 cl\u03b1(D). In such cases, cl\u03b1(D) is an approximation that contains some undesired values, and our expressiveness notion does not apply. In this section, we define a new notion called compactness to compare the eight representations. This definition is based on a comparison of the size of the domains, and is different from the notion of dominance which is based on the size of search tree (Jefferson 2007).\nDefinition 8. Given a universe U and two different multiset representations A and B. A is as compact as B if \u2200S \u2286 U, |clA(S)| = |clB(S)|. A is more compact than B if \u2200S \u2286 U, |clA(S)| \u2264 |clB(S)| and \u2203S \u2286 U, |clA(S)| < |clB(S)|. A and B are compactly incomparable if neither one of them is more compact than the other.\nThe following proposition characterizes the compactness of the eight orderings.\nProposition 4. (i) The LVL/LVC representation is more compact than the LL/LC representation and compactly incomparable to the VLL/VLC representation. (ii) The VLL/VLC representation is more compact than the VL/VC representation. (iii) The LL/LC representation is compactly incomparable to the VL/VC representation.\nIn Table 1, suppose we want to represent the set S of all multisets whose variety is 2. Both the LVL and LL representations cannot exactly represent S and give a \u03b1-closure with the same lower and upper bounds (i.e., {{2, 3}} and {{2, 2, 3, 3}} respectively). Both lvl- and ll-intervals contain undesired values. By comparing their compactness, |cllvl(S)| = 9 < |clll(S)| = 10. The LVL representation is more compact than LL representation.\nUsing the VL/VLL representations for multiset variables would be useful when we have tight constraints on the varieties of the multiset variables. For instance, Law, Lee, and Woo (2009) demonstrated the value of this on extended Steiner system problems in which there are tight constraints\nover the varieties. On the other hand, the LL/LVL representations would favour the kind of problems with more cardinality restrictions or with variables having fixed cardinalities."}, {"heading": "Empirical Comparisons", "text": "Before we apply the eight representations to model and solve multiset problems, we first empirically evaluate their expressiveness and compactness. We perform experiments to compare the size of the eight representations of a set D of multisets when different cardinality and variety constraints are imposed. In the experiment, the universe U is a multiset which contains 10 occurrences of elements 1 to 5. For all instances, D is a randomly generated subset of the power set of U . The comparison aims at measuring the compactness of different representations in approximating D. We record |cl\u03b1(D)|, the number of multisets in the \u03b1-closure of D that satisfies the cardinality and the variety constraints, where \u03b1 refers to the eight representations: LL, LC, VL, VC, LVL, LVC, VLL, and VLC. Due to space limitation, we summarize the observations as follows.\nWhen both cardinality and variety are fixed, the LVL/LVC and VLL/VLC representations can always exactly represent the domain values, giving the corresponding minimal \u03b1-interval cl\u03b1(S). For all instances, the LVL/LVC and VLL/VLC representations demonstrate a large reduction in the domain size when compared with the LL/LC and VL/VC representations.\nWhen the variety is fixed, the VLL/VLC ordering first considers the variety of each multiset and narrows down the bounds to a larger extent by removing the multisets with unwanted varieties. For each variety, the multisets are then ordered by their cardinality, which allows further pruning of the multisets with undesired cardinalities on the domain bounds. Thus, the VLL/VLC representation can always give the exact representation and achieve on average one to two orders of magnitude reduction in the domain size when compared with the LL/LC and VL/VC representations. In contrast, the LVL/LVC representation can always give the exact representation when the cardinality is fixed.\nWhen the cardinality and variety are constrained to certain ranges, although all eight representations fail to give the exact representation for all instances, the LVL/LVC and VLL/VLC representations are more compact than the\nLL/LC and VL/VC representations respectively. To conclude, the LVL/LVC and VLL/VLC representations are always more compact than the LL/LC and VL/VC respectively. This means that they will usually give tighter bounds during constraint propagation. In the following, we study how the eight representations behave in practice as bounds propagation in a multiset solver."}, {"heading": "Bounds Consistency", "text": "Since a multiset domain is totally ordered in the eight representations, we can enforce bounds consistency. To be more precise, we define bounds consistency on a k-ary constraint on multiset variables (for any k).\nDefinition 9. Bounds Consistency (BC) Let S1, . . . , Sn be multiset variables with interval domains D(Si) = \u3008mSi ,MSi\u3009. Given a constraint C over S1, . . . , Sn and an \u03b1 ordering, a value mi for variable Si has an \u03b1bound support (m1, . . . ,mn) if the support satisfies C and \u2200mi,mSi \u03b1 mi \u03b1 MSi .\nThe constraint C is bounds consistent iff for each Si, both mSi and MSi have \u03b1-bound supports.\nThe eight representations offer greater expressiveness, but we have to be careful that reasoning remains tractable. Indeed, even with a single unary constraint, we can get intractability.\nTheorem 1. There exists a constraint on one set variable such that enforcing BC on subset bounds is polynomial but enforcing BC on LL bounds is NP-hard.\nProof. Reduction from 3-SAT with N variables, X1 to XN and M clauses. We construct a set variable S with elements that have the following meaning: 2i represents a truth assignment in which Xi is true whilst 2i\u2212 1 represents a truth assignment in which Xi is false (1 \u2264 i \u2264 N ), and each integer above 2N represents one of the (polynomial number of) distinct clauses. We consider an unary constraint on this set variable which is satisfied only when the set contains integers representing a proper truth assignment (that is, 2i \u2208S iff 2i \u2212 1 6\u2208 S for 1 \u2264 i \u2264 N ) and this assignment satisfies the clauses represented by the integers in the set greater than 2N , or the set contains integers representing a superset of a proper truth assignment (that is, either 2i or 2i \u2212 1 or both occur in S for 1 \u2264 i \u2264 N ). Subset bounds are polynomial to compute since, if the upper bound includes a proper truth assignment, we leave the upper bound untouched and adjust the lower bound to include any necessary elements in linear time and, where needed, check the truth assignment. On the other hand, if the upper bound does not include a proper truth assignment, the unary constraint has no support. By comparison, length-lex bounds are NP-hard to compute. We consider domains that fix the possible and necessary elements to be the clause that we wish to decide, and make none of the other integers necessary but all of them possible. Then, enforcing bound consistency on the length-lex bounds will allow us to decide the satisfiability of the original formula.\nIt is worth noting that the opposite does not hold. If LL bounds are polynomial to compute, then subset bounds are too.\nTheorem 2. Given an n-ary constraint on set and/or multiset variables. If enforcing BC on LL bounds is polynomial, then enforcing BC on subset bounds is also polynomial.\nProof. (sketch) Let the possible values of a set variable S be {1, . . . , n}. We can convert subset bounds into LL bounds easily by ordering the sets first by cardinality and then lexicographically. This operation is polynomial. After enforcing BC on LL bounds, we can then convert LL bounds back to subset bounds using the inclusion propagator (Gervet and Van Hentenryck 2006). Such conversion is also polynomial. Thus, if enforcing BC on LL bounds is polynomial, then enforcing BC on subset bounds is also polynomial.\nWith two unary constraints, Sellmann\u2019s Lemma 1 shows that finding the fixpoint on the LL representation of a single set variable is NP-hard (Sellmann 2009). Given the above theorems, enforcing BC on LL bounds is NP-hard. However, exponential-time propagation algorithms may still help reduce runtimes (Yip and Van Hentenryck 2010).\nHere, we show an example on how BC works on the domains in the LL and LVL representations.\nGiven the universe U = {{1, 1, 1, 2, 2, 2, 3, 3, 3} and multiset variables X , Y , and Z . The constraints are: |X | = |Y | = |Z| = 3, \u2016Z\u2016 = 1, and X \u2229 Y = Z . The initial domains are D(X) = D(Y ) = D(Z) = \u3008\u2205, {{1, 1, 1, 2, 2, 2, 3, 3, 3}}\u3009lvl. In LVL representation, enforcing |X | = |Y | = |Z| = 3 tightens the bounds to have cardinality 3, i.e., D(X) = D(Y ) = D(Z) = \u3008{{3, 3, 3}}, {{1, 2, 3}}\u3009lvl. The bounds corresponds to the occurrence vectors \u30080, 0, 3\u3009 and \u30083, 0, 0\u3009. Since \u2016{{1, 2, 3}}\u2016 6= 1, the upper bound of Z is updated to {{1, 1, 1}}, resulting D(Z) = \u3008{{3, 3, 3}}, {{1, 1, 1}}\u3009lvl. This triggers the propagation on X \u2229 Y = Z and tightens the upper bounds of X and Y . After constraint propagation, X = Y = \u3008{{3, 3, 3}}, {{1, 1, 1}}\u3009lvl. Now, the problem is bounds consistent and |D(X)| = |D(Y )| = |D(Z)| = 3. However, in the LL representation, the problem is bounds consistent after enforcing the cardinality constraint |X | = |Y | = |Z| = 3. D(X) = D(Y ) = D(Z) = \u3008{{3, 3, 3}}, {{1, 1, 1}}\u3009ll and |D(X)| = |D(Y )| = |D(Z)| = 10. Thus, different representations result in different domain size after enforcing BC, and LVL gives a tighter bound than LL in this example."}, {"heading": "Experimental Results", "text": "To verify the feasibility and efficiency of our proposal, we adapt and simplify the implementation of the length-lex representation for set variables (Van Hentenryck et al. 2008) to implement the eight representations (LL, LVL, VL, VLL, LC, LVC, VC, VLC) for multiset variables in ILOG Solver 6.0 (ILOG 2003). We have also developed the ternary intersection (X \u2229 Y = Z) and unionplus (X \u228e Y = Z) multiset constraints, which are not available in the original LL implementation.\nWe perform experiments on the extended Steiner system and the generalized social golfer problem. They are run on a Sun Blade 2500 (2 \u00d7 1.6GHz US-IIIi) workstation with 2GB memory. We report the number of fails (i.e., the number of backtracks occurred in solving a model) and CPU time in seconds to find and prove the optimal solution for each instance. Comparisons are made among the subset bounds representations with cardinality-variety reasoning (SB+CR+VR) (Law, Lee, and Woo 2009) and the eight representations we have implemented. Since the results of the four colex representations (LC, LVC, VC, VLC) are similar to their corresponding lex counterparts (LL, LVL, VL, VLL), they are not reported in the tables. In the tables, the first column shows the problem instances. The subsequent columns show the results of using various representations. The best number of fails and CPU time among the results for each instance are highlighted in bold. A cell labeled with \u201c-\u201d denotes a timeout after 20 minutes.\nThe extended Steiner system ES(t, k, u, b), an important and practical multiset problem in information retrieval (Johnson and Mendelsohn 1972; Bennett and Mendelsohn 1980; Park and Blake 2008), is a collection of b blocks. Each block is a k-element multiset drawn from a u-element set whose elements can be drawn multiple times. For every two blocks in the collection, the cardinality of their intersection must be smaller than t. We adapt the problem to become an optimization problem which maximizes the sum of the varieties of the multisets. To further increase difficulty, we constrain each multiset variable to have variety at least v.\nThe generalized social golfer problem SG(w,m, n, g, p) extends the social golfer problem (prob010 in CSPLib (Gent and Walsh 1999)) from sets to multiset, in which we schedule m teams of n members to g groups of p golfers over w weeks. Each group contains golfers from different teams and they play against each other. To maximize the socialization, the number of times two teams meet with each\nother again is minimized. Similar to the extended Steiner system, each multiset variable is constrained to have variety at least v.\nTables 2 and 3 show the experimental results of the extended Steiner system and the generalized social golfer problem respectively. All the four lex representations give fewer number of fails and faster runtime than the SB+CR+VR (Law, Lee, and Woo 2009). This confirms that the lex representations take advantage of the cardinality and variety information to give tighter bounds than the SB+CR+VR.\nIn the extended Steiner system, the LVL representation always achieves the fewest number of fails. There is about a 95% reduction in the number of fails when compared to the SB+CR+VR. The LVL representation achieves fewer number of fails than the VLL representation because the problem has tighter constraints on the cardinalities than the varieties of the multiset variables.\nWhen comparing the results between LL and LVL, the latter performs better. This is because in the LVL representation, the multisets are ordered according to their varieties under the same cardinality. When enforcing BC, the multisets with the same varieties can be pruned together when they violate the variety constraints. However, in the LL representation, these multisets are scattered over the ordering and we cannot remove all of them from the domain at the same time, thus resulting in a larger search tree and number of fails. Similarly, VLL performs better than VL.\nThe instances listed in Table 2 are all satisfiable. In our experiments, there are some unsatisfiable instances, in which the number of fails and runtime of LVL and VLL can be slightly larger than LL and VL respectively. We also tried to fix both cardinalities and varieties of the multiset variables. Since the multisets are ordered lexicographically under a fixed cardinality and variety, LVL and VLL give the same number of fails.\nFor the generalized social golfer problem, VL and VLL\nperform better than LL and LVL because the problem has tighter constraints on the varieties than the cardinalities of the multiset variables. Since there are much more constraints in the problem when compared to those in the extended Steiner system, the generalized social golfer problem is more complicated. We observe that the VL representation always achieves the fewest number of fails. However, the VLL representation has the fastest runtime because the extra prunings in the VL representation cannot compensate the overhead in finding new bounds of multiset variables."}, {"heading": "Conclusion", "text": "We have proposed eight representations for multiset variables, which integrate together information about the cardinality, variety, and position in the (co)lexicographic ordering. We have made a detailed comparison of the expressiveness and compactness between the eight different representations. The LVL/LVC and VLL/VLC representations are always more expressive and more compact than the LL/LC and VL/VC representations. Compactness is a new notion which lets us compare inexact representations. We have also performed experiments on some benchmark problems. Experimental results confirm that LVL and VLL usually give tighter bounds during constraint propagation, resulting in smaller search trees and better runtimes. In some cases, LVL performs better, and sometimes VLL. It would be interesting to study if the two representations can be linked together so that we can take advantage of each representation."}, {"heading": "Acknowledgments", "text": "We thank the anonymous referees for constructive comments. The work described in this paper was substantially supported by grants (CUHK413808 and CUHK413710) from the Research Grants Council of Hong Kong SAR. Toby Walsh is funded by the Australian Department of Broadband, Communications and the Digital Economy, the ARC, and the Asian Office of Aerospace Research and Development through grant AOARD-104123."}], "references": [{"title": "Extended (2, 4)-designs", "author": ["Bennett", "F. Mendelsohn 1980] Bennett", "E. Mendelsohn"], "venue": "J. Comb. Theory,", "citeRegEx": "Bennett et al\\.,? \\Q1980\\E", "shortCiteRegEx": "Bennett et al\\.", "year": 1980}, {"title": "CSPLib: A benchmark library for constraints", "author": ["Gent", "I.P. Walsh 1999] Gent", "T. Walsh"], "venue": "In Proc. of CP\u201999,", "citeRegEx": "Gent et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Gent et al\\.", "year": 1999}, {"title": "Length-lex ordering for set CSPs", "author": ["Gervet", "C. Van Hentenryck 2006] Gervet", "P. Van Hentenryck"], "venue": "In Proc. of AAAI\u201906,", "citeRegEx": "Gervet et al\\.,? \\Q2006\\E", "shortCiteRegEx": "Gervet et al\\.", "year": 2006}, {"title": "Extended triple systems. Aequat", "author": ["Johnson", "D. Mendelsohn 1972] Johnson", "N. Mendelsohn"], "venue": null, "citeRegEx": "Johnson et al\\.,? \\Q1972\\E", "shortCiteRegEx": "Johnson et al\\.", "year": 1972}, {"title": "Variety reasoning for multiset constraint propagation", "author": ["Lee Law", "Y.C. Woo 2009] Law", "J.H.M. Lee", "M.H.C. Woo"], "venue": "In Proc. of IJCAI\u201909,", "citeRegEx": "Law et al\\.,? \\Q2009\\E", "shortCiteRegEx": "Law et al\\.", "year": 2009}, {"title": "Construction of extended Steiner systems for information retrieval", "author": ["Park", "E. Blake 2008] Park", "I. Blake"], "venue": "Rev. Mat. Complut", "citeRegEx": "Park et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Park et al\\.", "year": 2008}, {"title": "Hybrid set domains to strengthen constraint propagation and reduce symmetries", "author": ["Sadler", "A. Gervet 2004] Sadler", "C. Gervet"], "venue": "In Proc. of CP\u201904,", "citeRegEx": "Sadler et al\\.,? \\Q2004\\E", "shortCiteRegEx": "Sadler et al\\.", "year": 2004}, {"title": "Enhancing set constraint solvers with lexicographic bounds", "author": ["Sadler", "A. Gervet 2008] Sadler", "C. Gervet"], "venue": "J. Heuristics", "citeRegEx": "Sadler et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Sadler et al\\.", "year": 2008}, {"title": "Bound consistency for binary length-lex set constraints", "author": ["Van Hentenryck"], "venue": "In Proc. of AAAI\u201908,", "citeRegEx": "Hentenryck,? \\Q2008\\E", "shortCiteRegEx": "Hentenryck", "year": 2008}, {"title": "Consistency and propagation with multiset constraints: A formal viewpoint", "author": ["T. Walsh"], "venue": "In Proc. of CP\u201903,", "citeRegEx": "Walsh,? \\Q2003\\E", "shortCiteRegEx": "Walsh", "year": 2003}, {"title": "Exponential propagation for set variables", "author": ["Yip", "J. Van Hentenryck 2010] Yip", "P. Van Hentenryck"], "venue": "In Proc. of CP\u201910,", "citeRegEx": "Yip et al\\.,? \\Q2010\\E", "shortCiteRegEx": "Yip et al\\.", "year": 2010}], "referenceMentions": [{"referenceID": 9, "context": "For example, in the template design problem (prob002 in CSPLib (Gent and Walsh 1999)), we need to construct printing templates, which are multisets of different designs. Multisets, unlike sets, can contain repetition of elements. For popular designs, we may have multiple copies on the same template. Surprisingly, whilst there has been significant progress on developing representations for sets, relatively little research has been done on how best to represent multisets. Sadler and Gervet (2004) proposed representing set variables with subset, lexicographic, and cardinality bounds.", "startOffset": 73, "endOffset": 500}, {"referenceID": 9, "context": "For example, in the template design problem (prob002 in CSPLib (Gent and Walsh 1999)), we need to construct printing templates, which are multisets of different designs. Multisets, unlike sets, can contain repetition of elements. For popular designs, we may have multiple copies on the same template. Surprisingly, whilst there has been significant progress on developing representations for sets, relatively little research has been done on how best to represent multisets. Sadler and Gervet (2004) proposed representing set variables with subset, lexicographic, and cardinality bounds. Indeed, they suggested that such a representation could also be used for multisets (2008). However, little detail is provided about how to do this exactly.", "startOffset": 73, "endOffset": 678}, {"referenceID": 8, "context": "Gervet and Van Hentenryck (2006) proposed representing set variables using length-lex bounds, arguing that it provides comparable pruning to the aforementioned hybrid domains at a fraction of the computational cost.", "startOffset": 15, "endOffset": 33}, {"referenceID": 8, "context": "Thus, Gervet and Van Hentenryck (2006) proposed to totally order a set domain with a length-lex ordering.", "startOffset": 21, "endOffset": 39}, {"referenceID": 9, "context": "Walsh (2003) proposed using an occurrence vector \u3008occ(1, S), .", "startOffset": 0, "endOffset": 13}, {"referenceID": 8, "context": "All the four colex orderings on multisets reduce to the LL ordering on sets introduced by Gervet and Van Hentenryck (2006). Note that, when we consider a fixed length, the colex (resp.", "startOffset": 105, "endOffset": 123}, {"referenceID": 9, "context": "(Walsh 2003) Given a universe U and two", "startOffset": 0, "endOffset": 12}], "year": 2014, "abstractText": "Set and multiset variables in constraint programming have typically been represented using subset bounds. However, this is a weak representation that neglects potentially useful information about a set such as its cardinality. For set variables, the length-lex (LL) representation successfully provides information about the length (cardinality) and position in the lexicographic ordering. For multiset variables, where elements can be repeated, we consider richer representations that take into account additional information. We study eight different representations in which we maintain bounds according to one of the eight different orderings: length(co)lex (LL/LC), variety-(co)lex (VL/VC), length-variety(co)lex (LVL/LVC), and variety-length-(co)lex (VLL/VLC) orderings. These representations integrate together information about the cardinality, variety (number of distinct elements in the multiset), and position in some total ordering. Theoretical and empirical comparisons of expressiveness and compactness of the eight representations suggest that length-variety-(co)lex (LVL/LVC) and variety-length-(co)lex (VLL/VLC) usually give tighter bounds after constraint propagation. We implement the eight representations and evaluate them against the subset bounds representation with cardinality and variety reasoning. Results demonstrate that they offer significantly better pruning and runtime.", "creator": "LaTeX with hyperref package"}}}