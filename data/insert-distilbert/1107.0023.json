{"id": "1107.0023", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "30-Jun-2011", "title": "CP-nets: A Tool for Representing and Reasoning withConditional Ceteris Paribus Preference Statements", "abstract": "information about user trait preferences plays a key role actively in automated decision making. accordingly in many domains it is desirable understood to assess such arbitrary preferences in a qualitative rather than quantitative way. in this paper, we propose a qualitative graphical spatial representation of preferences that reflects conditional dependence and independence judgments of preference statements under a ceteris paribus ( all else being equal ) interpretation. such a representation is often compact and arguably quite natural in many circumstances. we provide up a few formal semantics for this model, and describe how the structure of the network can be exploited in several inference tasks, such as determining whether one feasible outcome dominates ( is preferred to ) another, ordering a set outcomes according to the preference relation, and constructing the best outcome subject to available evidence.", "histories": [["v1", "Thu, 30 Jun 2011 20:32:52 GMT  (2056kb)", "http://arxiv.org/abs/1107.0023v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["c boutilier", "r i brafman", "c domshlak", "h h hoos", "d poole"], "accepted": false, "id": "1107.0023"}, "pdf": {"name": "1107.0023.pdf", "metadata": {"source": "CRF", "title": "CP-nets: A Tool for Representing and Reasoning with Conditional Ceteris Paribus Preference Statements", "authors": ["Craig Boutilier", "Ronen I. Brafman", "Carmel Domshlak", "Holger H. Hoos", "David Poole"], "emails": ["cebly@cs.toronto.edu", "brafman@cs.bgu.ac.il", "dcarmel@cs.cornell.edu", "hoos@cs.ubc.ca", "poole@cs.ubc.ca"], "sections": [{"heading": "1. Introduction", "text": "Extracting preference information from users is generally an arduous process, and human decision analysts have developed sophisticated techniques to help elicit this information (Howard & Matheson, 1984). A key goal in the study of computer-based decision support is the construction of tools that allow the preference elicitation process to be automated, either partially or fully. Methods for extracting, representing and reasoning about the preferences of naive users are particularly important in AI applications, ranging from collaborative\nc\u00a92004 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.\nfiltering (Lashkari, Metral, & Maes, 1994) and recommender systems (Nguyen & Haddawy, 1998) to product configuration (D\u2019Ambrosio & Birmingham, 1995) and medical decision making (Chajewska, Getoor, Norman, & Shahar, 1998). In many of these applications users cannot be expected to have the patience (or sometimes the ability) to provide detailed preference relations or utility functions. Typical users may not be able to provide much more than qualitative rankings of fairly circumscribed outcomes.\nIn this paper we describe a novel graphical representation, CP-nets, that can be used for specifying preference relations in a relatively compact, intuitive, and structured manner using conditional ceteris paribus (all else being equal) preference statements. CP-nets can be used to specify different types of preference relations, such as a preference ordering over potential decision outcomes or a likelihood ordering over possible states of the world, for example, as in Shoham\u2019s (1987) preference semantics. However, it is mainly the first type\u2014preferences over the outcomes of decisions\u2014that motivates the development of CPnets. The inference techniques for CP-nets described in this paper focus on two important, related questions: how to perform preferential comparison between outcomes, and how to find the optimal outcome given a partial assignment to the problem attributes.\nIdeally, a preference representation should capture statements that are natural for users to assess, be reasonably compact, and support effective inference. Our conditional ceteris paribus semantics requires that the user specify, for any specific attribute A of interest, which other attributes can impact her preferences for values of A. For each instantiation of the relevant attributes\u2014the parents of A\u2014the user must specify her preference ordering over values of A conditional on the parents assuming the instantiated values; for instance, a1 may be preferred to a2 when b1 and c2 hold. Such a preference is given a ceteris paribus interpretation: a1 is preferred to a2 given b1 and c2 all else being equal. In other words, for any fixed instantiation of the remaining attributes, an outcome where a1 holds is preferred to one where a2 holds (assuming b1 and c2). Such statements are arguably quite natural and appear in several places (e.g., in e-commerce applications). For instance, the product selection service offered by Active Buyer\u2019s Guide1 asks for (unconditional) ceteris paribus statements in assessing a user\u2019s preference for various products. The tools there also ask for certain semi-quantitative information about preferences. Conditional expressions offer even greater flexibility.\nPreference elicitation is a complex task and is a key focus of work in decision analysis (Keeney & Raiffa, 1976; Howard & Matheson, 1984; French, 1986), especially elicitation involving non-expert users. Automating the process of preference extraction can be very difficult. There has been considerable work on exploiting the structure of preferences and utility functions in a way that allows them to be appropriately decomposed (Keeney & Raiffa, 1976; Bacchus & Grove, 1995, 1996; La Mura & Shoham, 1999). For instance, if certain attributes are preferentially independent of others (Keeney & Raiffa, 1976), one can assign degrees of preference to these attribute values without worrying about other attribute values. Furthermore, if one assumes more stringent conditions, often one can construct an additive value function in which each attribute contributes to overall preference to a specific\u201cdegree\u201d (the weight of that attribute) (Keeney & Raiffa, 1976). For instance, it is common in some engineering design problems to make such assumptions and simply\n1. See www.activebuyersguide.com.\nrequire users to assess the weights (D\u2019Ambrosio & Birmingham, 1995). This allows the direct tradeoffs between values of different attributes to be assessed concisely. Case-based approaches have also recently been considered (Ha & Haddawy, 1998).\nModels such as these make the preference elicitation process easier by imposing specific requirements on the form of the utility or preference function. We consider our CP-net representation to offer an appropriate tradeoff between allowing flexible preference expression and imposing a particular preference structure. Specifically, unlike much of the work cited above, CP-nets capture conditional preference statements.\nThe remainder of the paper is organized as follows. Section 2 provides background on preference orderings, and important notions such as preferential independence and conditional ceteris paribus preference statements. We then define CP-nets, discussing their semantics and expressive power in depth, and some of the model\u2019s properties. In Section 3 we present an algorithm for outcome optimization in CP-nets and provide an example of an application of CP-nets that illustrates the optimization process. Section 4 introduces two kinds of queries for preferential comparison, namely, ordering and dominance queries, and investigates their computational properties. Section 5 discusses several general techniques for answering dominance queries that exploit the structure of a CP-net. In Section 6 we discuss the applicability of our complexity results and algorithms to a slight generalization of CP-nets that allow incompletely specified local preferences and/or statements of preferential indifference. Finally, in Section 7 we examine some related work and applications of CP-nets, and discuss a number of interesting directions for future theoretical research and applications."}, {"heading": "2. Model Definition", "text": "Philosophical treatment of many intuitive qualitative preferential statements began in 1957 in a pioneering work of Hallde\u0301n (1957), and was continued by Castan\u0303eda (1958), von Wright (1963, 1972), Kron and Milovanovic\u0301 (1975), Trapp (1985), and Hansson (1996). The reason for such an intensive analysis of these statements is expressed concisely in the opening of Hansson\u2019s (1996) paper:\nWhen discussing with my wife what table to buy for our living room, I said: \u201cA round table is better than a square one.\u201d By this I did not mean that irrespectively of their other properties, any round table is better than any square-shaped table. Rather, I meant that any round table is better (for our living room) than any square table that does not differ significantly in its other characteristics, such as height, sort of wood, finishing, price, etc. This is preference ceteris paribus or \u201ceverything else being equal\u201d. Most of the preferences that we express or act upon seem to be of this type. [Emphasis added.]\nAn important property of ceteris paribus preferential statements is their intuitive nature for users of all types. Independently of the work of philosophers in this area, reasoning about ceteris paribus statements has drawn the attention of AI researchers. For example, Doyle et al. (1991) introduced a logic of relative desire to treat preference statements under a ceteris paribus assumption. This logic bears some similarity to von Wright\u2019s (1963) logic\nof preferences, but supports more complicated inferences.2 However, to the best of our knowledge, no serious attempt has been made to exploit preferential independence for the compact and efficient representation of such ceteris paribus statements. In this paper, we take steps toward structured modeling of qualitative ceteris paribus preferential statements.\nWe start by defining the notion of a (qualitative) preference relation and a number of basic preference independence concepts, followed by the introduction of CP-nets and their semantics."}, {"heading": "2.1 Preference Relations", "text": "We focus our attention on single-stage decision problems with complete information, ignoring in this paper any issues that arise in multi-stage, sequential decision analysis and any considerations of risk that arise in the context of uncertainty.3 We begin with an outline of relevant notions from decision theory. We assume that the world can be in one of a number of states S and at each state s there are a number of actions As that can be performed. Each action, when performed at a state, has a specific outcome (we do not concern ourselves with uncertainty in action effects or knowledge of the state). The set of all outcomes is denoted by O. A preference ranking is a total preorder over the set of outcomes: o1 o2 means that outcome o1 is equally or more preferred to the decision maker than o2. We use o1 \u227b o2 to denote the fact that outcome o1 is strictly more preferred by the decision maker than o2 (i.e., o1 o2 and o2 6 o1), while o1 \u223c o2 denotes that the decision maker is indifferent to o1 and o2 (i.e., o1 o2 and o2 o1). We will use the terms preference ordering and relation interchangeably with ranking.\nThe aim of decision making under certainty is, given knowledge of a specific state, to choose the action that has the most preferred outcome. We note that the ordering will vary across decision makers. For instance, two customers might have radically different preferences for computer system configurations that a sales program is helping them construct.\nOften, for a state s, certain outcomes in O cannot result from any action a \u2208 As: those outcomes that can be obtained are called feasible outcomes (given s). In many instances, the mapping from states and actions to outcomes can be quite complex. In other decision scenarios, actions and outcomes may be equated: a user is allowed to directly select a feasible outcome (e.g., select a product with a desirable combination of attributes). Often states play no role (i.e., there is a single state).\nOne thing that makes decision problems difficult is the fact that outcomes of actions and preferences are usually not represented so directly. For example, actions may be represented as a set of constraints over a set of decision variables. We focus here on preferences. We assume a set of variables (or features or attributes) V = {X1, . . . ,Xn} over which the decision maker has preferences. Each variable Xi is associated with a domain Dom(Xi) = {xi1, . . . , x i ni } of values it can take. An assignment x of values to a set X \u2286 V of variables (also called an instantiation ofX) is a function that maps each variable inX to an element of its domain; if X = V, x is a complete assignment, otherwise x is called a partial assignment.\n2. For a more detailed discussion on this issue, we refer the reader to Doyle and Wellman (1994). 3. Such issues include assigning preferences to sequences of outcome states, assessing uncertainty in beliefs\nand system dynamics, and assessing the user\u2019s attitude towards risk.\nWe denote the set of all assignments to X \u2286 V by Asst(X). If x and y are assignments to disjoint sets X and Y, respectively (X\u2229Y = \u2205), we denote the combination of x and y by xy. If X\u222aY = V, we call xy a completion of assignment x. We denote by Comp(x) the set of completions of x. Complete assignments correspond directly to the outcomes over which a user possesses preferences. For any outcome o, we denote by o[X] the value x \u2208 Dom(X) assigned to variable X by that outcome.\nGiven a problem defined over n variables with domains Dom(X1), . . . ,Dom(Xn), there are |Dom(X1)| \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 |Dom(Xn)| assignments. Thus direct assessment of a preference function is usually infeasible due to the exponential number of outcomes. Fortunately, a preference function can be specified (or partially specified) concisely if it exhibits sufficient structure. We describe certain standard types of structure here, referring to Keeney and Raiffa (1976) for a detailed description of these (and other) structural forms and a discussion of their implications. A set of variables X is preferentially independent of its complement Y = V \u2212X iff, for all x1,x2 \u2208 Asst(X) and y1,y2 \u2208 Asst(Y), we have\nx1y1 x2y1 iff x1y2 x2y2.\nIn other words, the structure of the preference relation over assignments to X, when all other variables are held fixed, is the same no matter what values these other variables take. If the relation above holds, we say x1 is preferred to x2 ceteris paribus. Thus, one can assess the relative preferences over assignments to X once, knowing these preferences do not change as other attributes vary.\nWe define conditional preferential independence analogously. Let X, Y, and Z be nonempty sets that partition V. X is conditionally preferentially independent of Y given an assignment z to Z iff, for all x1,x2 \u2208 Asst(X) and y1,y2 \u2208 Asst(Y), we have\nx1y1z x2y1z iff x1y2z x2y2z.\nIn other words, X is preferentially independent of Y when Z is assigned z. If X is conditionally preferentially independent ofY for all z \u2208 Asst(Z), thenX is conditionally preferentially independent of Y given the set of variables Z.\nNote that the ceteris paribus component of these definitions ensures that the statements one makes are relatively weak. In particular, they do not imply a stance on specific value tradeoffs. Consider two variables A and B that are preferentially independent, so that the preferences for values of A and B can be assessed separately; for instance, suppose a1 \u227b a2 and b1 \u227b b2. Clearly, a1b1 is the most preferred outcome and a2b2 is the least; but if feasibility constraints make a1b1 impossible, we must be satisfied with one of a1b2 or a2b1. We cannot tell which is most preferred using these separate assessments. However, under stronger conditions (e.g., additive preferential independence) one can construct an additive value function in which weights are assigned to different attributes (or attribute groups). Such a decomposition of a preference function allows one to identify the most preferred outcomes rather readily, and this, as well as some other special forms of preference structure, are especially appropriate when attributes take on numerical values. For an extensive discussion of various special forms of preference functions we refer to Keeney and Raiffa (1976), as well as Bacchus and Grove (1995, 1996) and Shoham (1997)."}, {"heading": "2.2 CP-Networks", "text": "Our representation for preferences is graphical in nature, and exploits conditional preferential independence in structuring preferences of a user. The model is similar to a Bayesian network (Pearl, 1988) on the surface; however, the nature of the relation between nodes within a network is generally quite weak (e.g., compared with the probabilistic relations in Bayes nets). Others have defined graphical representations of preference relations; for instance Bacchus and Grove (1995, 1996) have shown some strong results pertaining to undirected graphical representations of additive independence. Our representation and semantics is rather distinct, and our main aim in using the graph is to capture statements of qualitative conditional preferential independence. We note that reasoning about ceteris paribus statements has been explored in AI (Doyle et al., 1991; Wellman & Doyle, 1991; Doyle & Wellman, 1994), though not in the context of network representations or exploiting preferential independence in a computational fashion.\nFor each variable Xi, we ask the user to identify a set of parent variables Pa(Xi) that can affect her preference over various values of Xi. That is, given a particular value assignment to Pa(Xi), the user should be able to determine a preference order for the values of Xi, all other things being equal. Formally, given Pa(Xi) we have that Xi is conditionally preferentially independent of V\u2212 (Pa(Xi)\u222a{Xi}). Given this information, we ask the user to explicitly specify her preferences over the values of Xi for all instantiations of the variable set Pa(Xi). We use the above information to create an annotated directed graph in which nodes stand for the problem variables, and every node Xi has Pa(Xi) as its immediate ancestors. The node Xi is annotated with a conditional preference table (CPT) describing the user\u2019s preferences over the values of the variable Xi given every combination of parent values. In other words, letting Pa(Xi) = U, for each assignment u \u2208 Asst(U), we assume that a total preorder iu is provided over the domain ofXi: for any two values x and x, either x \u227bju x\u2032, x\u2032 \u227b j u x, or x \u223c j u x\n\u2032. For simplicity of presentation, we ignore indifference in our algorithms. Though treatment of indifference is straightforward semantically, consistency of arbitrary networks with indifference cannot be assumed, as we discuss in Section 2.5. Likewise, we assume that CPTs for all variables are fully specified, though we discuss partially specified CPTs in Section 6.\nWe call these structures conditional preference networks or CP-networks (CP-nets, for short).\nDefinition 1 A CP-net over variables V = {X1, . . . ,Xn} is a directed graph G over X1, . . . ,Xn whose nodes are annotated with conditional preference tables CPT(Xi) for each Xi \u2208 V. Each conditional preference table CPT(Xi) associates a total order \u227b i u with each instantiation u of Xi\u2019s parents Pa(Xi) = U.\nWe illustrate the CP-net semantics and some of its consequences with several small examples. For ease of presentation, all variables in these examples are boolean, though our semantics is defined for features with arbitrary finite domains.\nExample 1 (My Dinner I) Consider the simple CP-net in Figure 1(a) that expresses my preference over dinner configurations. This network consist of two variables S and W , standing for the soup and wine, respectively. Now, I strictly prefer fish soup (Sf ) to vegetable soup (Sv), while my preference between red (Wr) and white (Ww) wine is conditioned\non the soup to be served: I prefer red wine if served a vegetable soup, and white wine if served a fish soup.\nFigure 1(b) shows the preference graph over outcomes induced by this CP-net. An arc in this graph directed from outcome oi to oj indicates that a preference for oj over oi can be determined directly from one of the CPTs in the CP-net. For example, the fact that Sv \u2227Wr is preferred to Sv \u2227Ww (as indicated by the direct arc between them) is a direct consequence of the semantics of CPT(W ). The top element (Sv \u2227Ww) is the worst outcome while the bottom element (Sf \u2227Ww) is the best.\nExample 2 (My Dinner II) Figure 2(a) extends the chain CP-net of Example 1 by adding the main course M as another variable. In this example, my preference over the options for the main course is clear: I strictly prefer a meat course Mmc to a fish course Mfc. In addition, I prefer not to have two fish courses in one dinner; thus my preference between vegetable and fish soup is conditioned on the main course: I prefer to open with fish soup if the main course is meat, and with vegetable soup if the main course is fish. As in Example 1, Figure 2(b) shows the corresponding induced preference graph over outcomes.\nExample 3 (Evening Dress) Figure 3(a) illustrates another CP-net that expresses my preferences for evening dress. It consists of three variables J , P , and S, standing for the jacket, pants, and shirt, respectively. I unconditionally prefer black to white as a color for both the jacket and the pants, while my preference between the red and white shirts is conditioned on the combination of jacket and pants: if they have the same color, then a white shirt will make my outfit too colorless, thus I prefer a red shirt. Otherwise, if the jacket and the pants are of different colors, then a red shirt will probably make my outfit too flashy, thus I prefer a white shirt. Figure 3(b) shows the corresponding preference graph."}, {"heading": "2.3 Semantics", "text": "The semantics of a CP-net is straightforward. It is defined in terms of the set of preference rankings that are consistent with the set of preference constraints imposed by its CPTs.\nDefinition 2 Let N be a CP-net over variables V, Xi \u2208 V be some variable, and U \u2282 V be the parents of Xi in N . Let Y = V\u2212 (U\u222a{Xi}). Let \u227b i u be the ordering over Dom(Xi) dictated by CPT(Xi) for any instantiation u \u2208 Asst(U) of Xi\u2019s parents. Finally let \u227b be a preference ranking over Asst(V).\nA preference ranking \u227b satisfies \u227biu iff we have\u2014for all y \u2208 Asst(Y) and all x, x \u2032 \u2208\nDom(Xi)\u2014 yxu \u227b yx \u2032u whenever x \u227biu x \u2032. A preference ranking \u227b satisfies the CPT CPT(Xi) iff it satisfies \u227b i u for each u \u2208 Asst(U). A preference ranking \u227b satisfies the CP-net N iff is satisfies CPT(Xi) for each variable Xi.\nA CP-net N is satisfiable iff there is some preference ranking \u227b that satisfies it.\nThus a network N is satisfied by\u227b iff\u227b satisfies each of the conditional preferences expressed in the CPTs of N under the ceteris paribus interpretation.\nTheorem 1 Every acyclic CP-net is satisfiable.\nProof: We prove this constructively by building a satisfying preference ordering. This proof is by induction on the number of variables. The theorem trivially holds for one variable, as the total ordering is specified directly by the CP-net.\nSuppose the theorem holds for all CP-nets with fewer than n variables. Let N be a network with n variables. If N is acyclic, there is at least one variable with no parents; let X be such a variable. Let x1 \u227b x2 \u227b . . . \u227b xk be the ordering over Dom(X) dictated by CPT (X). For each xi, construct a CP-net, Ni, with the n \u2212 1 variables V \u2212 {X} by removing X from the initial CP-net, and for each variable Y that is a child of X, revising its CPT by restricting each row to X = xi. By the inductive hypothesis, we can construct a preference ordering \u227bi for each of the reduced CP-nets Ni.\nWe can now construct a preference ordering for the original network N as follows. We rank every outcome with X = xi as preferred to any outcome with X = xj if xi \u227b xj in CPT(X). For any outcomes with identical values xi of X, we rank them according to the ordering \u227bi associated with Ni (ignoring the value of X). It is easy to see that this preference ordering satisfies N .\nFor example, consider the CP-net of Example 1 (Figure 1). Somewhat surprisingly, the information captured by this network is sufficient to totally order the outcomes:\nSf \u2227Ww \u227b Sf \u2227Wr \u227b Sv \u2227Wr \u227b Sv \u2227Ww\nsince this is the only ranking that satisfies this CP-net. However, this need not be the case\u2014 in general, a satisfiable CP-net can be satisfied by more than one ranking. For instance, consider the CP-net in Figure 4.4 There are two rankings that satisfy this network:\nabc \u227b abc\u0304 \u227b ab\u0304c\u0304 \u227b ab\u0304c \u227b a\u0304b\u0304c\u0304 \u227b a\u0304b\u0304c \u227b a\u0304bc \u227b a\u0304bc\u0304\nabc \u227b abc\u0304 \u227b ab\u0304c\u0304 \u227b a\u0304b\u0304c\u0304 \u227b ab\u0304c \u227b a\u0304b\u0304c \u227b a\u0304bc \u227b a\u0304bc\u0304\nPreferential entailment in a CP-net is defined in a standard way.\nDefinition 3 Let N be a CP-net over variables V, and o, o\u2032 \u2208 Asst(V) be any two outcomes. N entails o \u227b o\u2032 (i.e., that outcome o is preferred to o\u2032), written N |= o \u227b o\u2032, iff o \u227b o\u2032 holds in every preference ordering that satisfies N .\nLemma 2 Preferential entailment is transitive. That is, if N |= o \u227b o\u2032 and N |= o\u2032 \u227b o\u2032\u2032 then N |= o \u227b o\u2032\u2032.\nProof: If N |= o \u227b o\u2032 and N |= o\u2032 \u227b o\u2032\u2032 then o \u227b o\u2032 and o\u2032 \u227b o\u2032\u2032 in all preference rankings satisfying N . As each of these rankings is transitive, we must have o \u227b o\u2032\u2032 in all satisfying rankings.\nFor example, consider the CP-net N in Figure 4(a) and the following three outcomes: o = abc\u0304, o\u2032 = ab\u0304c\u0304, and o\u2032\u2032 = ab\u0304c. The outcomes o and o\u2032 assign the same values to all variables except of B. In addition, given the value of Pa(B) = {A} in o and o\u2032, the value of B in o (B = b) is preferred to the value of B (B = b\u0304) in o\u2032, all else being equal. Therefore, we have that N |= o \u227b o\u2032. In the case of o\u2032 and o\u2032\u2032, the same argument with respect to the\n4. This is the network from Example 2 (\u201cMy Dinner II\u201d) with the variables renamed.\nvariable C will show that N |= o\u2032 \u227b o\u2032\u2032 as well. Observe that o \u227b o\u2032\u2032 cannot be derived directly from the CPTs of N . However, from Lemma 2, it follows that this relation can be inferred by taking the transitive closure of the direct relations o \u227b o\u2032 and o\u2032 \u227b o\u2032\u2032.\nNotice that, given a CP-net, we can assess each outcome in terms of the conditional preferences it violates. For example, in the CP-net of Example 1: the outcome Sf \u2227 Ww violates none of the preference constraints; Sf \u2227Wr violates the conditional preference for W ; Sv\u2227Wr violates the preference for S; and Sv\u2227Ww violates both. Somewhat surprisingly, the ceteris paribus semantics implicitly ensures that violating the preference for S is worse than violating that for W , since Sf \u2227Wr \u227b Sv \u2227Wr. That is, the parent preferences have higher priority than the child preferences. This property has important implications for inference as we will see below."}, {"heading": "2.4 Cyclic Networks", "text": "As mentioned, nothing in the semantics of the CP-net model forces it to be acyclic. However, according to Theorem 1, the acyclicity of the network automatically confers an important property to the model: the network is satisfiable (i.e., there exists a preference ordering that satisfies all ceteris paribus preference assertions imposed by the CPTs).\nFor cyclic CP-nets, the situation is much more complicated. For example, consider a binary-valued cyclic CP-net structure in Figure 5(e). If the CPTs for this network are specified as in Figure 5(a), then the induced preference graph (see Figure 5(b)) can be extended to a complete preference ordering consistently. However, if the CPTs are specified as in Figure 5(c), then the network is unsatisfiable (the induced preference graph, shown in\nFigure 5(d) cannot be completed consistently). This example shows that the consistency of cyclic CP-nets is not guaranteed, and depends on the actual nature of the CPTs.\nRecently, initial results on consistency testing for cyclic CP-nets were presented by Domshlak and Brafman (2002a). In particular, a wide class of cyclic, binary-valued CPnets was identified to be efficiently testable for consistency. However, these results cover only part of the spectrum, and further research on cyclic CP-nets is needed.\nBeyond the open computational questions that cyclic CP-nets raise, their usefulness requires further analysis. One can argue that it is possible to cluster the variables to preserve acyclicity. Although this approach is technically feasible and probably useful in many domains, it cannot provide a general solution. First, such clustering will affect the space requirements of problem description and thus, it will generally degrade the efficiency of reasoning about preferences. Second, in certain domains, it may be more natural to express cyclic preferences even if an acyclic representation could be used. For example, this seems to be the case in work on preference-based presentation of web page content (Domshlak, Brafman, & Shimony, 2001), where it is argued that the preferred presentation of a certain component of a web page may depend on the presentation of its neighbors in the page, whose preferred presentation depend on its presentation, and so on.\nOne could argue that preferences naturally exhibit cyclic structure and that acyclic nets are of theoretical interest only. Our experience indicates the opposite. Acyclic CP-nets are shown to be effective and natural in the above-mentioned work on web page presentation (Domshlak et al., 2001), as well as in a related project that deals with the presentation of multi-media content in a medical domain (Gudes, Domshlak, & Orlov, 2002)\u2014a more extensive example from this latter domain is presented in the next section. Moreover, in other domains, we have found it difficult to generate intuitively reasonable cyclic networks. This is due to the fact that a cycle implies that all variables in it are equally important.\nTypically, this is not the case. Thus, because of the apparent utility of acyclic networks, the fact that we can use composite variables made by clustering primitive variables, and the additional complexity involved in cyclic networks, we consider only acyclic CP-nets in the remainder of this paper. However, further investigation of cyclic CP-nets, as well as a characterization of the different classes of utility functions that can be represented by cyclic and acyclic networks, remains of interest."}, {"heading": "2.5 Indifference", "text": "We have so far assumed that the preference constraints in each CPT of a CP-net totally order the outcomes of the variable in question. Specifically, for any variable Xi with parents U, and any u \u2208 Asst(U), we assume that \u227biu is a total order over Dom(Xi). The general definition of a CP-net can allow an arbitrary total preorder iu over Dom(Xi), thus allowing the user to express indifference between two values of variable X, say x and x\u2032, given u. We denote this by x \u223c x\u2032 in CPT(X).\nIt turns out that the ceteris paribus semantics is quite strong when we say that two variable values are equally preferred.\nExample 4 Consider the following two CPTs for a network over variables A and B, with A being a parent of B:\na \u223c a;\na : b \u227b b; a : b \u227b b;\nThese assert that the user is indifferent between a and a, but should a hold, prefers b, and should a hold, prefers b. We can derive the following preferences over outcomes:\nab \u227b ab ab \u227b ab ab\nThese statements are not consistent with any preference ranking, hence this network is not satisfiable. One way to interpret this is that if someone really did have the preferences:\na : b \u227b b; a : b \u227b b;\nthey cannot be indifferent between a and a, ceteris paribus.\nThis points to a potential difficulty with the use of indifference in CP-nets. One must be careful not to express indifference between two values of a variable (A in this case), yet express a (strict) conditional preference for a child of that variable (B) that depends on the values for which the user is indifferent. Intuitively, in this case, it seems that the user is expressing the fact that they would like the value of B to match that of A (with respect to their \u201csign\u201d), but intends no preference for ab over ab (or vice versa). If this is the case, then making A a parent of B expresses that the preference for B is subsidiary to that of A, which is not the intent. In this case, either a cyclic network (indeed the satisfiable network discussed in Section 2.4) or the clustering of variables A and B seems appropriate.\nDespite this, indifference can be used safely as follows. Let Xi be any variable in network N with parents U, and let Xj be any child of Xi. Let Y denote the remaining\nparents of Xj (those excluding Xi). Suppose that for some u \u2208 Asst(U), and x, x \u2032 \u2208 Dom(Xi), we have x \u223c x \u2032 in iu. Then as long as the local orderings in CPT(Xj) for a fixed instantiation of Y are identical whether x or x\u2032 holds, then the network N is satisfiable. More precisely, if jxy= j x\u2032y for each y \u2208 Asst(Y), then network N is satisfiable. Thus, if we are indifferent between x and x\u2032, then our preferences over values of Xi\u2019s children, should exhibit indifference whether the context includes x or x\u2032.5\nFor simplicity of presentation, for the remainder of the paper we continue to assume that preference constraints in each CPT of a CP-net totally order the outcomes of the variable in question. However, in Section 6, we do discuss the applicability of our results to satisfiable CP-nets that capture statements of preferential indifference."}, {"heading": "3. Outcome Optimization", "text": "One of the principal properties of CP-nets is that, given a CP-netN , we can easily determine the best outcome among those preference rankings that satisfy N . We call such a query an outcome optimization query. This turns to be a simple task in CP-nets."}, {"heading": "3.1 An Algorithm for Outcome Optimization", "text": "Intuitively, to generate an optimal outcome we simply need to sweep through the network from top to bottom (i.e., from ancestors to descendents) setting each variable to its most preferred value given the instantiation of its parents. Indeed, while the network does not generally determine a unique ranking, it does determine a unique best outcome (assuming no indifference). More generally, suppose we are given evidence constraining possible outcomes in the form of an instantiation z of some subset Z \u2286 V of the network variables. Determining the best completion of z (that is, the best outcome consistent with z) can be achieved in a similar fashion, as we now outline.\nOutcome optimization queries can be answered using the following forward sweep procedure, taking time linear in the number of variables. Assume a partial instantiation z \u2208 Asst(Z), and the goal of determining the (unique) o \u2208 Comp(z) such that N |= o \u227b o\u2032 for all o\u2032 \u2208 Comp(z) \u2212 {o}. This can be effected by a straightforward sweep through the network. Let X1, . . . ,Xn be any topological ordering of the network variables. We set Z = z, and instantiate each Xi 6\u2208 Z in turn to its maximal value given the instantiation of its parents. This procedure exploits the considerable power of both the ceteris paribus semantics and the graphical modeling of the preferential statements to easily find an optimal outcome given certain observed evidence (or imposed conjunctive constraints).\nLemma 3 The forward sweep procedure constructs the most preferred outcome in Comp(z).\nProof: Let vz be any outcome in the set of completions of z. Define a sequence of outcomes vi, 0 \u2264 i \u2264 n, as follows: (a) v0 = vz; (b) if Xi 6\u2208 Z, vi is constructed by setting the value of Xi to its most preferred value given the instantiation of its parents in vi\u22121, with all other variables retaining their values from vi\u22121; (c) if Xi \u2208 Z, then vi = vi\u22121. By construction, vi vi\u22121. The last outcome vn is precisely that constructed by the forward\n5. This restriction can be relaxed somewhat if we take into account the fact that some of Xj \u2019s parents could lie in the set U, in which case these rankings need not agree for every indifference pair x and x\u2032.\nsweep algorithm. Notice that we arrive at the same outcome irrespective of our starting point vz (by assumption, there can be no ties). Since vn vz for any outcome vz consistent with the evidence, the forward sweep procedure yields the optimal outcome."}, {"heading": "3.2 An Example Application", "text": "We now turn to an illustration of the use of CP-nets in the context of a CP-net based system for adaptive multimedia document presentation. Applications based on this system for the presentation of web-based content and multi-media medical data were recently presented by Domshlak et al. (2001) and Gudes et al. (2002). Through this example we demonstrate the simplicity of preference specification using CP-nets, the utility of acyclic networks, and the use of the optimization algorithm described above.\nThe system consists of two tools\u2014the authoring tool, and the viewing tool. The central part of the authoring tool is a module for the specification of a CP-net corresponding to the created and/or edited multimedia document. Using this CP-net, a content provider express her preferences regarding the presentation of the document content. For example, the content provider may prefer that some material be presented if and only if some other material is not presented. The result of such preference-based multimedia document design is a meta-document specifying both what to present and how to present it.\nThe description of the content provider\u2019s preferences, as captured by an acyclic CP-net, becomes a static part of the document, and sets the parameters for its initial presentation. Given such a document, the viewing tool is responsible for reasoning about these preferences; specifically, it must determine an optimal reconfiguration of the document context after interaction of the viewer with the document. In this process, the user\u2019s k most recent content choices are viewed as constraints of the form \u201cthese items must appear as I specified\u201d. Subject to these constraints, an optimal document presentation with respect to the content provider\u2019s CP-net must then be generated. Thus, for each particular session, the actual presentation changes dynamically based on the user\u2019s choices. More precisely, whenever new user input is obtained, the optimization algorithm constructs the best presentation of all document components with respect to the content provider\u2019s preferences among those presentations that conform to the user\u2019s recent viewing choices. This process uses the forward sweep procedure described above.\nExample 5 (Multimedia Document) Consider a medical record that consists of six components: two components correspond to a set of medical tests conducted in 2001\u2014an X-ray image and textual notes of a physician\u2014and four components correspond to a set of medical tests from 2002\u2014a CT (computerized tomography) image, an X-ray image, a graph illustrating results of electromyography, and textual notes of a physician. For the purposes of illustration, we assume the preferences of a content provider (e.g., the latter physician) over the presentation options of these components can be captured using the CP-net shown in Figure 7. The specific details of the preferences\u2014the nature of the preferential dependencies and the precise details of the CPTs are summarized as follows:\n\u2022 CT-image [CT image, 2002] consist of four CT images of different parts of the body, and it is shown in Figure 6(a). There are six presentation options for CT-image: it can be either completely presented (ctplain), or completely hidden (cthide), or presented by\nCT\u2212image\n##G GG\nGG GG\nGG GG\nG\nX\u2212ray\n{{ww ww ww ww ww ww\nGraph\nX\u2212ray\u2212old\nNotes Notes\u2212old\n\u2022 Graph [Electromyography, 2002] is shown in Figure 6(d), and it can be either presented (graphplain), or hidden (graphhide). The preference over the presentation options of Graph depends on the presentation of both CT-image and X-ray:\n(ctlt \u2228 ctrt \u2228 ctlb \u2228 ctrb) \u2228 xraysegm graphplain \u227b graphhide otherwise graphhide \u227b graphplain\n\u2022 Notes [Textual notes, 2002] can be either fully presented (notesplain), or summarized (notessumm), or omitted all together (noteshide). The preference over the presentation options of Notes depends on the presentation of both CT-image and Graph:\ncthide noteshide \u227b notessumm \u227b notesplain \u00ac(cthide) \u2227 graphplain notessumm \u227b notesplain \u227b noteshide\notherwise noteshide \u227b notessumm \u227b graphplain\n\u2022 X-ray-old [X-ray, 2001] can be either hidden (xray\u2212oldhide), or presented as is (xray\u2212oldplain); the image is depicted below. The preference over the presentation options of X-ray-old depends on the presentation of X-ray:\nxrayhide xray\u2212oldhide \u227b xray\u2212oldplain \u00ac(xrayhide) xray\u2212oldplain \u227b xray\u2212oldhide\n\u2022 Notes-old [Textual notes, 2001] can be either presented (notes\u2212oldplain), or omitted all together (notes\u2212oldhide). The preference over the presentation options of Notes-old depends on the presentation of X-ray-old:\nxray\u2212oldhide notes\u2212oldplain \u227b notes\u2212oldhide xray\u2212oldplain notes\u2212oldhide \u227b notes\u2212oldplain\nAt the beginning of a viewing session, the initial presentation of the document, depicted in Figure 8(a), is determined using the forward sweep procedure with Z = \u2205: each component is set to its preferred presentation given the presentation of its immediate parents in the CP-net. For example, CT-image is hidden, since it is the most preferred option for this component. Subsequently, the X-ray image is presented segmented, since CT-image is not presented, and, in turn, the electromyography Graph is presented because of the above decision on the presentation options for CT-image and X-ray. Suppose that the viewer chooses\nto look at the right-top part of the CT-image.6 In terms of the forward sweep procedure, this choice sets Z = {CT\u2212image}, and z = {ctrt}. The result of the forward sweep procedure appears in Figure 8(b); here and in what follows, the shaded nodes stand for the evidence-constrained variables Z. Now, the X-ray image is presented without segmentation because of a zoom-in on the right-top part of CT-image, and Notes are summarized since both the electromyography Graph is presented, and CT-image is not hidden.\nSuppose that the viewer consequently chooses to hide the X-ray image. If the number of recent viewer choices taken to constrain the presentation is greater than one, then this choice will set Z = {CT\u2212image,X\u2212ray}, and z = {ctrt, xrayhide}. The result of the forward sweep procedure appears in Figure 8(c). If consequently the viewer chooses to see the whole CT-image, then z = {ctplain, xrayhide}, and the updated presentation is shown in Figure 8(d)."}, {"heading": "4. Comparing Outcomes", "text": "Outcome optimization is not the only task that should be supported by a preference representation model. Another basic query with respect to such a model is preferential comparison between outcomes. Two outcomes o and o\u2032 can stand in one of three possible relations with respect to a CP-net N : either N |= o \u227b o\u2032; or N |= o\u2032 \u227b o; or N 6|= o \u227b o\u2032 and N 6|= o\u2032 \u227b o.7 The third case, specifically, means that the network N does not contain enough information to prove that either outcome is preferred to the other (i.e., there exist preference orderings satisfying N in which o \u227b o\u2032 and in which o\u2032 \u227b o). There are two distinct ways in which we can compare two outcomes using a CP-net:\n1. Dominance queries \u2013 Given a CP-net N and a pair of outcomes o and o\u2032, ask whether N |= o \u227b o\u2032. If this relation holds, o is preferred o\u2032, and we say that o dominates o\u2032\nwith respect to N .\n2. Ordering queries \u2013 Given a CP-net N and a pair of outcomes o and o\u2032, ask if N 6|= o\u2032 \u227b o. If this relation holds, there exists a preference ordering consistent with N in which o \u227b o\u2032. In other words, it is consistent with the knowledge expressed by N to order o \u201cover\u201d o\u2032 (i.e., assert that o is preferred to o\u2032). In such a case we say o is consistently orderable over o\u2032 with respect to N .\nOrdering queries are clearly weaker than dominance queries. Indeed, if N |= o \u227b o\u2032, then N 6|= o\u2032 \u227b o. But it may be the case that N 6|= o\u2032 \u227b o even though N 6|= o \u227b o\u2032. While dominance queries are typically more useful, ordering queries are sufficient in many applications where one may be satisfied knowing only that outcome o can be consistently ordered over o\u2032. For example, consider a set of products that a human or automated seller would like to present to a customer in some non-increasing order of customer preference. There seems to be no reason to use the strong dominance relation to sort such products. In some applications, dominance queries cannot be replaced by ordering queries. For instance, dominance queries were shown to be an integral part of constraint-based preferential optimization in CP-nets (Boutilier, Brafman, Geib, & Poole, 1997).\n6. A document explorer (which is a part of the viewing tool) is not illustrated here in order to make the snapshots smaller. 7. Recall that, for the time being, we do not consider CP-nets with indifference in CPTs; hence two outcomes cannot be proven equally preferred.\nWe begin by showing that ordering queries with respect to acyclic CP-nets can be answered in time linear in the number of variables. In addition, we show that a set of outcomes can be sorted in a consistent non-increasing order with respect to an acyclic CP-net using ordering queries only. We then provide a complexity analysis of dominance queries. First, we introduce and study a particular form of reasoning, namely search for flipping sequences, that can be used to answer dominance queries. Using this technique, and focusing on binary-valued CP-nets, we show connections between the structure of the CP-net graph and the worst-case complexity of dominance queries. We discuss dominance queries in more detail in Section 5, where we present some general search techniques for flipping sequences."}, {"heading": "4.1 Ordering Queries Are Easy", "text": "Here we show that ordering queries with respect to acyclic (not necessarily binary-valued) CP-nets can be answered in time linear in the number of variables. The corresponding algorithm exploits the graphical structure of the model. Likewise, we show that with acyclic CP-nets, we can construct a non-increasing ordering over outcomes, consistent with a CPnet, using only ordering queries.\nCorollary 4 Let N be an acyclic CP-net, and o, o\u2032 be a pair of outcomes. If there exists a variable X in N , such that:\n1. o and o\u2032 assign the same values to all ancestors of X in N , and\n2. given the assignment provided by o (and o\u2032) to Pa(X), o assigns a more preferred value to X than that assigned by o\u2032\nthen N 6|= o\u2032 \u227b o.\nProof: The construction in Theorem 1 provides a preference ordering satisfying N such that o \u227b o\u2032. Thus o\u2032 \u227b o is not true in all models of N , and is not a consequence of N .\nCorollary 4 presents a condition which is sufficient but not necessary for the truth of the ordering query N 6|= o\u2032 \u227b o. For instance, consider Example 2, and let o = Mmc \u2227 Sv \u2227Ww and o\u2032 = Mfc\u2227Sv\u2227Wr. These two outcomes are incomparable according to the CP-network (i.e., neither can be proven to be preferred to the other), but o 6\u227b o\u2032 cannot be deduced using the conditions of Corollary 4, because M is the root variable of this chain CP-net, and o assigns it a more preferred value than that assigned by o\u2032.\nDespite the fact that the condition provided by Corollary 4 for N 6|= o\u2032 \u227b o is not necessary for consistent orderability, we can show that it is sufficient to provide a consistent ordering of any pair of outcomes.\nTheorem 5 Given an acyclic CP-net N , and two outcomes o and o\u2032 over the variables of N , the complexity of determining truth of at least one of the ordering queries, N 6|= o\u2032 \u227b o or N 6|= o \u227b o\u2032, is O(n).\nProof: For any variable Xi, let Pa(Xi) = U in N and u and u denote the assignment to U made by outcomes o and o\u2032, respectively. All variables Xi, such that o and o\n\u2032 assign different values to Xi but the same values to all ancestors of Xi in N , can be identified in\nO(n) time by a top-down traversal of N . (Note that u = u\u2032 for all such Xi). If for all such Xi we have that o[Xi] \u227b i u o \u2032[Xi], then using Corollary 4 we can deduce that N 6|= o \u2032 \u227b o. Otherwise, there exist two variables of this type, Xi and Xj , for which o[Xi] \u227b i u o\n\u2032[Xi] and o[Xj ] \u227a i u o \u2032[Xj ]; in this case, Corollary 4 implies that both N 6|= o \u2032 \u227b o and N 6|= o \u227b o\u2032\nCorollary 4 provides an effective algorithm for answering ordering queries; however, its computational efficiency comes at a price: it is sound\u2014if the algorithm says that o is consistently orderable over o\u2032, then indeed, N 6|= o\u2032 \u227b o; but it is incomplete\u2014if it provides a negative response to query N 6|= o\u2032 \u227b o, it still may be the case that N 6|= o\u2032 \u227b o. Theorem 5 provides an effective algorithm that is sound, and \u201cpartially complete\u201d in the sense that it will return a positive answer for at least one of N 6|= o\u2032 \u227b o or N 6|= o \u227b o\u2032. In other words, it will allow us to determine that at least one outcome can be consistently ordered over the other.\nThough the incompleteness of the algorithm for single ordering queries is problematic, the partial completeness of the algorithm for paired queries is sufficient to allow one to find a consistent ordering of all outcomes in polynomial time, at least in the case of an acyclic CP-net. We first introduce some notation. We write N \u22a2oq o \u226b o\n\u2032 to represent that the algorithm for paired ordering queries tells us that N 6|= o\u2032 \u227b o holds (i.e., o is consistently orderable over o\u2032) but N 6|= o\u2032 \u227b o does not (i.e., o\u2032 is not orderable over o). When N \u22a2oq o \u226b o\n\u2032, we can be assured that o is indeed orderable over o\u2032; but due to the incompleteness of the algorithm, we cannot be sure that o\u2032 is not orderable over o. We write N \u22a2oq o \u2243 o\n\u2032 to denote that the algorithm returns a positive response for both ordering queries (i.e., it tells us that both outcomes are consistently orderable over the other). The soundness of the algorithm ensures that both outcomes can indeed be consistently preferred in this case. Note that partial completeness ensures that either N \u22a2oq o \u226b o \u2032, N \u22a2oq o \u2032 \u226b o, or N \u22a2oq o \u2243 o \u2032. This will be sufficient to allow us to produce a consistent ordering of any set of outcomes.\nTheorem 6 Given an acyclic CP-net N over the variable set V, and a set of outcomes o1, . . . , om over V, ordering these outcomes consistently with N can be done using ordering queries only.\nProof: Define two binary relations over outcomes: o \u226b o\u2032 iff N \u22a2oq o \u226b o \u2032 and o \u2243 o\u2032 iff N \u22a2oq o \u2243 o \u2032. We first show that the transitive closure of the relation \u226b is asymmetric. Assume to the contrary that there exists a set of outcomes o1, . . . , ok such that:\no1 \u226b o2 \u226b \u00b7 \u00b7 \u00b7 \u226b ok \u226b o1 (1)\nFor 1 \u2264 i \u2264 k, let V (oi) be the set of all variables X such that the value assigned to X by oi can be improved given the assignment provided by oi to Pa(X). LetNi be the subgraph of N consisting of those variables in V (oi) and their descendants in N . Observe that Corollary 4 implies Ni \u2286 Ni+1 for 1 \u2264 i < k, and Nk \u2286 N1. To see this, notice that if, for some i, we have Ni 6\u2286 Ni+1, then there exists a variable X such that: (i) all ancestors of X are assigned their most preferred values by both oi and oi+1; and (ii) given oi[Pa(X)] = oi+1[Pa(X)], X is assigned its most preferred value by oi+1 and one of its less preferred values by oi.\nHowever, in this case, an ordering query will determine N 6|= oi \u227b oi+1, which contradicts our assumption that oi \u226b oi+1.\nIf one of the graph containment relations Ni \u2286 Ni+1 is strict, the initial assumption (1) is trivially contradicted. Therefore, we are left with the case of:\nN1 = N2 = \u00b7 \u00b7 \u00b7 = Nk = N \u2032\nRecalling that N \u2032 is acyclic, consider a variable Xj \u2208 N \u2032 that has no ancestors in N \u2032. Let U = Pa(Xj) be the parents of Xj in the original network N (note that U \u2229 N \u2032 = \u2205). By construction of the Ni we have:\no1[U] = o2[U] = \u00b7 \u00b7 \u00b7 = ok[U] = u\nThis must be the case since all the ancestors of Xj are assigned to their unique optimal assignment (of which u is a part) since none of these variables is improvable. This entails\no1[Xj ] \u227b j u o2[Xj ] \u227b j u \u00b7 \u00b7 \u00b7 \u227b j u ok[Xj ] \u227b j u o1[Xj ],\nwhich is inconsistent with the definition of a CP-net.\nWe exploit the asymmetric nature of the relation \u226b as follows. If N |= o \u227b o\u2032, then we must have o \u226b o\u2032. Therefore, the relation \u227bN representing the induced preference graph of N is a subset of \u226b. Thus any total ordering of o1, . . . , om consistent with \u226b will be consistent with \u227bN .\nAn immediate consequence of Theorems 5 and 6 is that, given a set of m outcomes and a CP-net N , the complexity of ordering these outcomes consistently with the preference graph induced by N is O(nm2) (i.e., the cost of comparing every pair of outcomes and ordering them accordingly)."}, {"heading": "4.2 Dominance Queries and Flipping Sequences", "text": "The ceteris paribus semantics of CP-nets allows one to directly use information in the CPT of a variable X to alter or flip the value of X within an outcome to directly obtain an improved (preferred) or worsened (dispreferred) outcome. A sequence of improving flips from one outcome to another provides a proof that one outcome is preferred, or dispreferred, to another in all rankings satisfying the network. Before defining this notion more precisely, we illustrate the intuitions with an example.\nExample 6 Consider again the CP-net from Figure 4. The following are the only two rankings that satisfy this network:\nabc \u227b abc\u0304 \u227b ab\u0304c\u0304 \u227b \ufe37 \ufe38\ufe38 \ufe37 ab\u0304c \u227b a\u0304b\u0304c\u0304 \u227b a\u0304b\u0304c \u227b a\u0304bc \u227b a\u0304bc\u0304\nabc \u227b abc\u0304 \u227b ab\u0304c\u0304 \u227b a\u0304b\u0304c\u0304 \u227b ab\u0304c \ufe38 \ufe37\ufe37 \ufe38 \u227b a\u0304b\u0304c \u227b a\u0304bc \u227b a\u0304bc\u0304\nThus, the only two outcomes not totally ordered are abc and abc. Notice that if we remove either abc or abc from each of these chains of outcomes, we can move from one outcome to the next in the chain by flipping the value of exactly one variable according to the preference\ninformation in its CPT given the instantiation of its parents. For example, to move from the first outcome in these sequences (abc) to the second (abc), we use the fact that c \u227b c given b to \u201cprove\u201d that the second outcome is dispreferred to the first; that is we flip C to a less preferred value given the instantiation b of its parent B. Conversely, we can move backwards through this sequence by flipping c in the second outcome to c, thereby obtaining the more preferred first outcome.\nRecall that Corollary 4 demonstrates that violating the preference constraints for a parent variable is less preferred than violating the preference constraints for any of its children. This \u201cgreater importance\u201d of parent variables is implicit in the ceteris paribus semantics. Now consider the two outcomes abc and abc, which are unordered by the CPnet in Figure 4. The outcome a\u0304b\u0304c\u0304 violates the preference over the values of A, while the outcome ab\u0304c violates the preferences over the values of B and C; and A is an ancestor of both B and C. The semantics of CP-nets does not specify which of these outcomes is preferred\u2014intuitively, though the preference for A has higher priority than B or C, two or more violations of lower priority preferences may not be preferred to the violation of a single higher priority preference.\nFor any two outcomes o and o\u2032, every improving flipping sequence from o\u2032 to o uniquely corresponds to some directed path from the node o\u2032 to the node o in the preference graph induced by the CP-net. For instance, consider the CP-net in Figure 9(a), which is exactly the network of the \u201cEvening Dress\u201d example (Example 3), with simpler variable names. There are four alternative flipping sequences from the outcome a\u0304b\u0304c to the outcome abc, corresponding to the four paths between these outcomes in the induced preference graph, depicted in Figure 9(b):\na\u0304b\u0304c \u2192 ab\u0304c \u2192 abc\na\u0304b\u0304c \u2192 ab\u0304c \u2192 ab\u0304c\u0304 \u2192 abc\u0304 \u2192 abc\na\u0304b\u0304c \u2192 a\u0304bc \u2192 abc\na\u0304b\u0304c \u2192 a\u0304bc \u2192 a\u0304bc\u0304 \u2192 abc\u0304 \u2192 abc\nTherefore, abc \u227b a\u0304b\u0304c is a consequence of this CP-net. In contrast, there is no flipping sequence (directed path) from a\u0304bc to ab\u0304c\u0304, hence these two outcomes are incomparable.\nThese examples suggest that the construction of such a flipping sequence can be used to prove dominance.\nDefinition 4 Let N be a CP-net over variables V, with Xi \u2208 V, U the parents of Xi, and Y = V \u2212 (U \u222a {Xi}). Let uxy \u2208 Asst(V) be any outcome, where x \u2208 Dom(Xi), u \u2208 Asst(U), and y \u2208 Asst(Y). An improving flip of outcome uxy with respect to variable Xi is any outcome ux\n\u2032y such that x\u2032 \u227biu x. (Note that an improving flip w.r.t. Xi does not exist if x is the most preferred value of Xi given u.)\nAn improving flipping sequence with respect to N is any sequence of outcomes o1, . . . , ok such that, for each i < k, oi+1 is an improving flip of oi with respect to some variable. An improving flipping sequence from an outcome o to an outcome o\u2032 is any improving sequence o1, . . . , ok with o1 = o and ok = o \u2032.\nOne can define worsening flips and worsening flipping sequences in an entirely analogous way. Obviously, any worsening flipping sequence is the reverse of an improving flipping sequence, and vice versa.\nThere are two important things to notice about the examples above. First, an improving (or worsening) flipping sequence can be used to show that one outcome is better than another. Second, preference violations are worse (i.e., have a larger negative impact on the preference of an outcome) the higher up they are in the network, although we cannot compare always two (or more) lower level violations to violation of a single ancestor constraint. These observations underlie the inference algorithms below.\nTheorem 7 (soundness) If there is an improving flipping sequence for CP-net N from outcome o to o\u2032, then N |= o\u2032 \u227b o.\nProof: If there is an improving flip from outcome o1 to another outcome o2 then N |= o2 \u227b o1 by the definition of |=. The theorem follows from the transitivity of preferential entailment (Lemma 2).\nTheorem 8 (completeness) If N is an acyclic CP-net and there is no improving flipping sequence for N from outcome o to o\u2032, then N 6|= o\u2032 \u227b o.\nProof: Let G be a graph whose nodes are all outcomes (i.e., complete assignments to the variable set V), with a directed edge from o1 to o2 iff there is an improving flip of o1 to o2 sanctioned by network N . Clearly, directed paths in G are equivalent to improving flipping sequences with respect to N .\nNext, we show that any total preference ordering \u227b that respects the paths in G (that is, if there is a path from o1 to o2 in G, then we have o2 \u227b o1) satisfies network N : if \u227b does not satisfy N , there must exist some variable X with parents U, instantiation u \u2208 Asst(U),\nvalues x, x\u2032 \u2208 Dom(X), and instantiation y of the remaining variables Y = V\u2212 (U\u222a{X}), such that:\n(a) uxy \u227b ux\u2032y;\n(b) but CPT(X) dictates that x\u2032 \u227b x given u.\nThis is a direct consequence of the definition of satisfaction. However, if N requires that x\u2032 \u227b x given u, there is a direct flip from xuy to x\u2032uy, contradicting the fact that \u227b extends the graph G.\nBased on this observation, we can now prove the theorem: If there is no improving flipping sequence from o to o\u2032, then there is no directed path in G from o to o\u2032. Therefore, there exists a preference ordering \u227b respecting the paths in G in which o \u227b o\u2032. But this preference ordering also satisfies N , which implies N 6|= o\u2032 \u227b o."}, {"heading": "4.3 Flipping Sequences as Plans", "text": "Searching for flipping sequences can be seen as a type of planning problem: given a CPnet N , and a variable X with parents Pa(X) in N , each row in CPT (X) is a conditional preference statement of the form\nu : x1 \u227b x2 \u227b \u00b7 \u00b7 \u00b7 \u227b xd\nwhere u \u2208 Asst(Pa(X)), and d = |Dom(X)|. Such a statement can be converted into a set of planning operators for improving the value of X. In particular, this conditional preference statement can be converted into a set of d\u22121 planning operators of the form (for 1 < i \u2264 d):\nPreconditions: u \u2227 xi\nPostconditions:\nDelete list: xi\nAdd list: xi\u22121\nThis corresponds to the action of improving xi to xi\u22121 in the context of u. (An \u201cinverse\u201d set of operators would be created for worsening sequences).\nGiven a query N |= x \u227b y, we treat y as the start state and x as the goal state of a planning problem. It is readily apparent that the query is a consequence of the CP-net if and only if there is a plan for the associated planning problem, since a plan corresponds to a flipping sequence.\nThe planning problem over multi-valued variables with discrete, finite domains is known to be pspace-complete (Ba\u0308ckstro\u0308m & Nebel, 1995), and it remains pspace-complete under the assumption that all the variables are binary (Bylander, 1994) (i.e., planning problems in strips formalism with negative effects). However, this upper bound is not very informative with respect to dominance queries, since the planning problems generated from them will generally look quite different in form from standard AI planning problems, as there are many more actions, and each action is directed toward achieving a particular proposition and requires very specific preconditions. Thus dominance queries with respect to binaryvalued CP-nets correspond to a specific class of strips planning problems, the complexity\nof which was recently analyzed by Domshlak and Brafman (2002b, 2003). We now explain this relationship.\nFirst, we divide the preconditions of every operator in a planning problem into two types: prevailing conditions, which are variable values that are required prior to the execution of the operator and are not affected by the operator, and preconditions, which are affected by the operator. Second, we introduce the notion of a causal graph (Knoblock, 1994), a directed graph whose nodes stand for the problem variables. An edge (X,Y ) appears in the causal graph if and only if some operator that changes the value of Y has a prevailing condition involving X.\nThe complexity analysis of Brafman and Domshlak (2003) addresses planning problems with binary variables, unary operators (i.e., operators that affect only a single variable), and acyclic causal graphs. In the planning problem generated for a dominance query with respect to a binary-valued CP-net, we have:\n1. all the operators are unary, because each flip improves the value of a single variable; and\n2. the causal graph of the problem is exactly the graph of the CP-net, since the values of Pa(X) required by a value flip of X are exactly the prevailing conditions of the corresponding planning operator.\nTherefore, in our computational analysis of dominance queries for binary-valued acyclic CP-nets we can use some of the results and techniques of Brafman and Domshlak (2003)."}, {"heading": "4.4 Complexity of Dominance Queries for Binary-valued, Acyclic CP-nets", "text": "In this section we analyze the complexity of dominance testing with respect to binaryvalued CP-nets, showing a connection between the structure of the CP-net graph and the worst-case complexity of dominance queries. In particular, we show that:\n\u2022 When a binary-valued CP-net forms a directed tree, the complexity of dominance testing is quadratic in the number of variables.\n\u2022 When a binary-valued CP-net forms a polytree (i.e., the induced undirected graph is acyclic), dominance testing is polynomial in the size of the CP-net description.\n\u2022 When a binary-valued CP-net is directed-path singly connected (i.e., there is at most one directed path between any pair of nodes), dominance testing is np-complete. The problem remains hard even if node in-degree in the network is bounded by a low constant.\n\u2022 Dominance testing for binary-valued CP-nets remains np-complete if the number of alternative paths between any pair of nodes in a CP-net is polynomially bounded.\nThe exact complexity of dominance testing in multiply connected, binary-valued, acyclic CP-nets remains an open problem\u2014at this stage it is not clear whether this problem is in np or harder.\nIn what follows, we make the assumption that the number of parents for each variable (i.e., node in-degree in the CP-net) is bounded by some constant. This assumption is\njustified as the CPTs are part of the problem description, and the size of a CPT (X) is exponential in |Pa(X)|."}, {"heading": "4.4.1 Some General Properties", "text": "We start with some notation and two useful lemmas. First, given a CP-net N and a pair of outcomes o, o\u2032 with respect to N , an improving flipping sequence F from o\u2032 to o will be called irreducible if any subsequence F \u2032 of F obtained by deletion of any entries except the endpoints o, o\u2032 of F is not an improving flipping sequence.8\nGiven a CP-net N , let F be the set of all irreducible improving flipping sequences among outcomes. We denote by MaxFlip(Xi) the maximal number of times that a variable Xi changes its value in any flipping sequence in F . Formally, let Flip(F,Xi) be the number of value flips of Xi in the flipping sequence F . Then,\nMaxFlip(Xi) = max F\u2208F {Flip(F,Xi)}\nLemma 9 below formalizes our first observation about irreducible flipping sequences with respect to binary-valued CP-nets.\nLemma 9 For every variable Xi in a binary-valued CP-net N , we have:\nMaxFlip(Xi) \u2264 1 + \u2211\nXj :Xi\u2208Pa(Xj)\nMaxFlip(Xj)\nProof: Let F be an irreducible flipping sequence with respect to N (from some outcome o\u2032 to some outcome o), such that MaxFlip(Xi) = Flip(F,Xi). Consider the subsequence F \u2032 = f1, f2, . . . , fk \u2286 F that consists of all value flips of the children of Xi in N . Observe that: (i) every fl \u2208 F\n\u2032 requires Xi to take one of its two possible values; and (ii) no value flip in F \u2212 F \u2032 depends on the value of Xi.\nNow, for 1 \u2264 l < k, if fl and fl+1 require the same value of Xi, then there are no value flips of Xi in F between fl and fl+1: If there are such flips, they are simply redundant, and this contradicts our assumption that F is irreducible. (Recall that fl and fl+1 are adjacent in F \u2032, but may be separated by several flips in the original sequence F .) Alternatively, if fl and fl+1 require different values of Xi, due to the irreducibility of F , there is exactly one value flip of Xi in F between fl and fl+1. Similarly we can show that there is at most one value flip of Xi in F before f1, and there is at most one value flip of Xi in F after fk. The latter flip is necessary when fk requires Xi to take the value \u00aco[Xi], thus, after \u201csupporting\u201d the immediate successors, Xi still should flip its value once, in order to obtain the value required by o.\nThe above implies that:\nMaxFlip(Xi) = Flip(F,Xi) \u2264 1 + \u2211\nXj :Xi\u2208Pa(Xj)\nFlip(F,Xj)\n8. Note that removing any proper initial or final subsequence of F results in a valid flipping sequence. We refer here to the deletion of arbitrary elements from the sequence, excluding the endpoints.\nand thus, by definition of MaxFlip, we have:\nMaxFlip(Xi) \u2264 1 + \u2211\nXj :Xi\u2208Pa(Xj)\nMaxFlip(Xj)\nAdopting the terminology of Domshlak and Shimony (2003) and Shimony and Domshlak (2002), a directed acyclic graph G is directed-path singly connected if, for every pair of nodes s, t \u2208 G, there is at most one directed path from s to t. Using Lemma 9, we can prove that if a binary-valued CP-net forms a directed-path singly connected DAG then, for every variable Xi, MaxFlip(Xi) can be bounded by n (the number of variables).\nLemma 10 If a binary-valued CP-net N forms a directed-path singly connected DAG, then, for every variable Xi \u2208 N , we have:\nMaxFlip(Xi) \u2264 n\nwhere n is the number of variables in N .\nProof: In what follows, denote MaxFlip(Xi) in N as MaxFlipN (Xi). The proof is by induction on n. For n = 1 it is obvious that MaxFlip(X1) \u2264 1. Assume that when a binary-valued, directed-path singly connected CP-net N consists of n\u22121 variables, then, for every Xi \u2208 N ,\nMaxFlipN (Xi) \u2264 n\u2212 1\nLet N \u2032 be some binary-valued, directed-path singly connected CP-net over n variables. Without loss of generality, let the variables {X1, . . . Xn} of N\n\u2032 be topologically ordered based on the (acyclic) graph of N \u2032. Clearly, Xn is a leaf node, and we will denote by N the CP-net obtained by removing Xn from N \u2032. From Lemma 9, we have:\nMaxFlipN \u2032(Xn) \u2264 1\nObserve that there are no directed paths between any predecessors of Xn in N \u2032, since N \u2032 is assumed to be directed-path singly connected. Therefore, by Lemma 9, for each parent Xi of Xn in N \u2032, we have:\nMaxFlipN \u2032(Xi) \u2264 MaxFlipN (Xi) + MaxFlipN \u2032(Xn)\nand thus: MaxFlipN \u2032(Xi) \u2264 MaxFlipN (Xi) + 1\nGenerally, since N is directed-path singly connected, for each variable Xi \u2208 N \u2032,\nMaxFlipN \u2032(Xi) \u2264 { MaxFlipN (Xi) + 1, if there is a path from Xi to Xn MaxFlipN (Xi), otherwise\nand thus, for each Xi \u2208 N \u2032, we have:\nMaxFlipN \u2032(Xi) \u2264 n"}, {"heading": "4.4.2 Tree-structured CP-nets", "text": "We start by presenting a flipping sequence search algorithm for the class of binary-valued, tree-structured CP-nets, and prove its correctness. Then we show that the time complexity of this algorithm is O(n2), and show that this is actually a lower bound for flipping-sequence search over binary-valued, tree-structured CP-nets.\nFigure 10 presents our TreeDT algorithm for binary-valued, tree-structured CP-nets. Informally, TreeDT starts by initializing all the variables in V to their values in the (purported) less preferred outcome o\u2032, and continues with an incremental, bottom-up conversion of this initial assignment to the assignment induced by the (purported) more preferred outcome o. Each step starts by iteratively removing from N all leaf variables (i.e., its maximal fringe or canopy) that are already consistent with o. If at some iteration this step removes all variables in N , then all variables are assigned to their values in o, and thus the required improving flipping sequence from o\u2032 to o has been generated.\nOtherwise, let N \u2032 stand for the updated N (with nodes removed). A node X \u2208 N \u2032 is a candidate variable if: (i) the value of X can be flipped; and (ii) no descendant of X in N \u2032 can have its value flipped, given the current assignment to the variables of N \u2032. We then flip the value of an arbitrary candidate variable (if one exists) and repeat with node removal; or we report that there is no improving flipping sequence from o\u2032 to o if there are no candidate variables.\nThe TreeDT algorithm is deterministic and backtrack-free. Below we show that TreeDT is complete for binary-valued, tree-structured CP-nets, and generates only irreducible flipping sequences\u2014thus the time complexity of TreeDT is O(n2). The fact that it generates irreducible flipping sequences ensures its soundness (since by generating only valid flipping sequences it can only provide correct positive answers to dominance queries).\nTheorem 11 The algorithm TreeDT is sound and complete for binary-valued, tree-structured CP-nets.\nProof: Consider an execution of TreeDT on a dominance query N |= o \u227b o\u2032 with respect to a binary-valued, tree-structured CP-net N .\nFirst, suppose we iteratively remove from the tree any leaf variables that have as values those required by the target outcome o. It is easy to see that this does not affect the completeness of the algorithm: because N is acyclic, the variables in the fringe are not the ancestors of any other variables. Hence, the value of the variables in the fringe does not influence our ability to flip the values of any other variables (hence it does not remove any improving flipping sequence from consideration).\nSecond, consider a variable X such that, after iteratively removing variables as above, its value can be improved, yet none of its descendents in N can be improved, given the current assignment v to V. If X is a leaf node, then changing its value does not influence our ability to flip values of any other variables. In addition, the current value v[X] of X is different from o[X], otherwise X would have been part of the removed fringe. Therefore, the (improving) change of X\u2019s value at this point is necessary in any improving flipping sequence. Alternatively, suppose that X is not a leaf node. Since the leaf nodes in the subtree of N rooted at X were not a part of the removed fringe, (at least) their values remain to be changed. Because N is a tree, X completely separates its descendents in N from all other variables; so no improving flip in the subtree of X will be possible until we change the value of X. Hence the value of X must be changed in any flipping sequence from this point before the value of any descendent of X.\nWhat remains to be shown is that when there are several candidate variables that can be flipped, it does not matter which one we flip first. If there is more than one candidate variable, each one of them will have to be flipped at some point\u2014each such flip is necessary for flipping the children of the corresponding variable. However, any changes made to one of these candidates or below it has no affect on the other candidates or their descendants. Thus, the evaluation order of the candidate flips is irrelevant, and cannot prevent us from finding a flipping sequence if one exists.\nThus the algorithm is complete. The soundness of the algorithm should be clear from the proof as well. The flip generated at each step of the algorithm is a valid improving flip given the current outcome v.\nTheorem 12 The time complexity of the flipping-sequence search over binary-valued, treestructured CP-nets is O(n2), where n is the number of variables in the CP-net.\nProof: Since the algorithm TreeDT is backtrack-free, the only thing that remains to be shown in addition to Lemma 10 and Theorem 11 is that (on binary-valued, tree-structured CP-nets) TreeDT generates only irreducible flipping sequences. However, the proof of this subclaim is straightforward since we have already shown that:\n1. TreeDT flips the value of each variable X either to achieve the value of X in the (purported) more preferred outcome of the query, or to allow the required value flips of the descendants of X, and\n2. The role of the latter flips of X cannot be fulfilled by value flips of any other variables.\nTherefore, given an improving flipping sequence F generated by TreeDT, removing any subset of value flips from F makes F either illegal, or its ends are not (o\u2032, o), respectively. Hence, any improving flipping sequence generated by the TreeDT algorithm is irreducible.\nTheorem 13 below shows that even when limiting ourselves to chain binary-valued CPnets, there are dominance queries whose minimal flipping sequences have quadratic length. Thus TreeDT is asymptotically optimal.\nTheorem 13 \u0398(n2) is a lower bound for the flipping-sequence search over binary-valued tree-structured CP-nets.\nProof: For the proof see Appendix A. The proof is by example, providing a dominance query on a binary-valued, tree CP-net for which the size of a minimal flipping sequence is \u0398(n2)."}, {"heading": "4.4.3 Polytree CP-nets", "text": "DAGs with no cycles in the underlying undirected graphs, also known as polytrees, offer a minimal extension of directed trees. Unfortunately, the TreeDT procedure is not complete for polytree CP-nets unless extended with some form of backtracking (even when restricted to binary variables). This is due to the fact that several parents of a given node may each be allowed to have their values flipped, but only one of the choices may lead to the target outcome while the others lead to a dead end. For instance, consider the CP-net N from Figure 9 and the query N |= ab\u0304c\u0304 \u227b a\u0304b\u0304c. Starting with the outcome a\u0304b\u0304c, in the first iteration of TreeDT, we have the choice of flipping either A or B. If B is chosen, the assignment is changed to a\u0304bc. However, this cannot lead to the target, since there is no way to flip B back to b\u0304. Thus, a dead end is reached. On the other hand, if A is chosen then TreeDT will successfully generate the improving flipping sequence a\u0304b\u0304c \u2192 ab\u0304c \u2192 ab\u0304c\u0304. Thus, an incorrect choice of improving variable may require backtracking.\nHowever, dominance testing for binary-valued, polytree CP-nets remains polynomial time, although the algorithm for its solution is more complicated than TreeDT. An algorithm is adapted from the corresponding algorithm for planning problems with binary variables, unary operators, and polytree causal graphs described by Domshlak and Brafman (2003).\nTheorem 14 Dominance testing for binary-valued, polytree CP-nets is in p.\nProof: According to the reduction from the CP-net dominance queries to the classical planning problems (see Section 4.3), every dominance query with respect to a binary-valued, polytree CP-net can be compiled into a propositional planning problem with unary operators and polytree causal graph. An algorithm for the latter problem is presented by Brafman and Domshlak (2003), and the time complexity of this algorithm is O(22\u03ban2\u03ba+3), where \u03ba is the maximal in-degree of the causal graph.\nRecall our assumption that the in-degree of the CP-net is bounded by some constant (in this case, \u03ba). This assumption is justified as the CPTs are part of the problem description, and the size of a CPT (X) is exponential in |Pa(X)|. Therefore, the complexity of the algorithm of Brafman and Domshlak (2003) on CP-nets is polynomial in the size the CPnet."}, {"heading": "4.4.4 Intractable dominance queries", "text": "While dominance testing for binary-valued, polytree CP-nets is polynomial, we can show that for binary-valued, directed-path singly connected CP-nets, this problem is np-complete.9 This can be proved using a CP-net-oriented extension of the proof for the corresponding claim with respect to planning problems (Brafman & Domshlak, 2003). These results also entail that dominance testing for binary-valued CP-nets remains in np if the number of distinct paths between any pair of nodes in the CP-net is polynomially bounded.\nTheorem 15 Dominance testing for binary-valued, directed-path singly connected CP-nets is np-complete.\nProof: For the proof see Appendix A.\nAn immediate extension of directed-path singly connected DAGs are max-\u03b4-connected DAGs: a directed graph is max-\u03b4-connected if the number of different directed paths between any two nodes in the graph is bounded by \u03b4.\nTheorem 16 Dominance testing for binary-valued, max-\u03b4-connected CP-nets, where \u03b4 is polynomially bounded in the size of the CP-net, is np-complete.\nProof: The theorem is immediately entailed by the corresponding result for planning of Brafman and Domshlak (2003); for the proof in terms of CP-nets, see Appendix A.\nTheorem 15 implies that dominance testing for binary-valued, acyclic CP-nets is hard. However, the exact complexity of this problem is still an open question\u2014it is not clear whether this problem is in np or if it is harder. Some preliminary analysis of this problem (Domshlak & Brafman, 2002a) shows a connection between the complexity of the flipping sequence search for binary-valued, acyclic CP-nets and the diameters of some specific graphs. A complementary result with respect to these graphs (Domshlak, 2002b), namely recursively directed hypercubes, shows that dominance queries with respect to binary-valued, acyclic CP-nets with unbounded node in-degree may require flipping sequences of size exponential in n, where n is the number of variables in the CP-net.\nIt has been shown that the most general class of planning problems with binary variables, unary operators and acyclic causal graphs is harder than np (Brafman & Domshlak, 2003). However, this result does not imply that answering dominance queries is harder than np as well, as we do not know of a reduction from this class of planning problems into CP-nets."}, {"heading": "5. Search Techniques for Dominance Queries", "text": "In the previous section we showed that dominance testing is generally hard even for binaryvalued CP-nets, and that tractable algorithms exist only for specific problem classes. However, CP-nets impose a rich structure on preferences that can be exploited by various search strategies and heuristics which often significantly reduce search effort, and allow the effective solution of many problem instances. In this section we discuss the search for flipping\n9. While every polytree is directed-path singly connected, the converse is not true.\nsequences and several rules that allow significant pruning of the search tree without impacting soundness or completeness of the search procedure. These rules are described in the context of improving flipping sequences, but they can be applied to worsening search mutatis mutandis.\nGiven a CP-net N , and an outcome o, we define the improving search tree of o, T (o), as follows: T (o) is rooted at o, and the children of every node o\u2032 in T (o) are those outcomes that can be reached by a single improving flip from o\u2032. It is easy to see that every rooted path in T (o) corresponds to some improving flipping sequence from the outcome o (with respect to N), and vice versa.10 For example, consider the preference graph shown in Figure 11(a), which is induced by the CP-net in Figure 4. Figure 11(b) depicts the improving search tree T (a\u0304bc\u0304) with respect to this preference graph. Clearly, we can treat every dominance query N |= o \u227b o\u2032 as searching T (o\u2032) for a node associated with the outcome o, starting from the root node o\u2032. For instance, in the example above, given the dominance query N |= ab\u0304c\u0304 \u227b a\u0304bc\u0304, any of the dotted paths shown in Figure 11(c) bring us to outcome ab\u0304c\u0304. However, taking a different direction during the tree traversal would lead to a dead end, requiring backtracking in order to find a suitable flipping sequence. Any generic search algorithm can be used to traverse the improving search tree to find an improving sequence that supports a dominance query."}, {"heading": "5.1 Suffix Fixing", "text": "Suffix fixing is a rule that allows certain moves in T (o) to be pruned from the search tree without impacting completeness of the search. Let N be a CP-net over the variables V = {X1, . . . ,Xn}, numbered according to an arbitrary topological ordering consistent with the network N . We define an rth suffix of an outcome o \u2208 Asst(V), for any r \u2265 1, to be the subset of the outcome values o[Xr]o[Xr+1] \u00b7 \u00b7 \u00b7 o[Xn]. Notice that the rth suffix of an outcome depends on the topological ordering of variables used. Finally, we say that the rth suffixes of outcomes o and o\u2032 match iff o[Xj ] = o \u2032[Xj ] for all r \u2264 j \u2264 n.\nLet o\u2217 be a node in an improving search tree T (o\u2032), and let o be the target of the search; in other words, we are attempting to find a flipping sequence that proves N |= o \u227b o\u2032. The suffix fixing rule requires that if the rth suffix of o\u2217 and o matches, for some value r, no neighbors of o\u2217 can be explored whose rth suffix does not also match o. This is equivalent to ruling out the exploration of any flipping sequences that destroy the suffix of an outcome that matches the target outcome o. The following lemma ensures that pruning such branches of the search tree T (o\u2032) when searching for a path to o does not affect completeness.\nLemma 17 Let N be a CP-net, and o and o\u2217 be outcomes whose rth suffix matches (for any topologically consistent ordering X1, \u00b7 \u00b7 \u00b7 ,Xn of the variables in N). If there is path in T (o\u2217) from root o\u2217 to o, then there is a path from root o\u2217 to o such that every outcome on that path assigns the same values to Xr, \u00b7 \u00b7 \u00b7Xn (i.e., with the same suffix match).\nProof: The proof is straightforward: Because N is acyclic, no suffix variable is an ancestor of any non-suffix variables. Hence, the value of the suffix variables does not influence (for better or worse) our ability to flip values of the remaining variables.\n10. The corresponding worsening search tree of o can be defined similarly using the worsening flips.\nSuppose, given query N |= o \u227b o\u2032, there is a path in T (o\u2032) to an outcome o\u2217 of the type mentioned in the lemma above. Since the subtree of T (o\u2032) rooted at o\u2217 is just T (o\u2217), we are assured that if any path from o\u2032 to o passes through o\u2217, there is a path from o\u2032 to o that passes through o\u2217 in which the suffix of o\u2217 is preserved on the subpath from o\u2217 to o. From this we conclude:\nProposition 18 Any complete search algorithm for the improving search tree remains complete if pruning using the suffix rule is used.\nThe suffix fixing rule effectively prunes the search tree under a node o\u2217 as described above to contain only paths that retain the suffix values of the target o. Though backtracking over choices that lead to o\u2217 may be required, as may those choices at o\u2217 that preserve suffixes, consideration of the full search tree under o\u2217 will not be required (if there is a nontrivial suffix match). For example, the improving search tree T (a\u0304bc\u0304) for the query N |= ab\u0304c\u0304 \u227b a\u0304bc\u0304 discussed above, pruned using the suffix fixing rule and the variable ordering A,B,C, appears in Figure 11(d). As we can see, this pruning can dramatically reduce the size of the effective search tree."}, {"heading": "5.2 Least-Variable Flipping", "text": "An extension of the suffix fixing rule is the least-variable flipping rule, defined as follows. Suppose we have a CP-net N , and a query N |= o \u227b o\u2032. Let o\u2217 be an outcome, and for any variable Xj , let u denote the instantiation of U = Pa(Xj) in o \u2217. We say Xj is a least-improvable variable in o\u2217 if there is some value x \u2208 Dom(Xj) such that x \u227b j u o\u2217[Xj ], and no descendent of Xj in N has this property. Intuitively, a least-improvable variable is one that is the lowest in N that can be flipped to produce an outcome that is preferred to o\u2217. Naturally, there may be several such variables. We say Xj is least improvable with respect to the target o iff Xj is the least improvable variable among those not part of a suffix match with o. In other words, if some suffix of o and o\u2217 matches, we apply the definition of least-improvable variable, restricting attention to those variables that are not part of the matching suffix. The least-variable flipping rule requires that the only neighbors of a node o\u2217 that can be expanded in the search for an improving sequence with target o are those in which some least improvable variable with respect to o is improved.\nThe following lemma ensures that for binary-valued, directed-path singly connected CP-nets, pruning an improving search tree using the least-variable rule does not affect the completeness of any search procedure.\nLemma 19 Let N be a binary-valued, directed-path singly connected CP-net, and o and o\u2217 be outcomes whose rth suffix matches (for any topologically consistent ordering X1, \u00b7 \u00b7 \u00b7 ,Xn of the variables in N). Let {o1, . . . , om} (m \u2264 n) be the set of all outcomes reachable from o\u2217 via some least-variable flip that does not affect the matched suffix. If there is path in T (o\u2217) from root o\u2217 to o, then there is a path from some os (s \u2264 m) to o.\nProof: Without loss of generality and based on our earlier observations, we can assume no suffix match between o and o\u2217 (if so, restricting attention to the set of non-suffix variables does not affect our argument).\nNow assume, contradicting the statement of the theorem, that none of the least-variable flips os of o\n\u2217 have a path to o, but there does exist a path from o\u2217 to o. This implies that none of these least-variable flips involve leaf variables in the network N . Otherwise, we could flip the value of such a leaf variable at o\u2217 without any effect on our ability to flip other variables, and thus be able to construct a path from o\u2217 to o that passes through any of the os that flip leaves.\nNow, consider a leaf variable Xi in N . Since we are dealing with binary variables, on any irreducible flipping sequence from o\u2217 to o the value of Xi should be flipped exactly once. However, the current assignment o\u2217[Pa(Xi)] does not allow us to perform this flip (see observation above). Thus, we must achieve another assignment to Pa(Xi) before we can flip the value of Xi, making it a part of a suffix match.\nLet NXi be the subnetwork of N induced by Xi and all ancestors of Xi in N . Because N is directed-path singly connected, NXi forms a tree, directed toward its root Xi. Now we reduce NXi further by removing all subtrees NXj of NXi , such that no variable in NXj can be flipped in o\u2217. Note that this step cause no loss of generality, since (due to acyclicity of N) the assignment o\u2217 to the variables in NXj cannot be flipped first in any improving flipping sequence beginning with o\u2217. Likewise, let Xi1 , . . . ,Xim\u2032 , m\n\u2032 \u2264 m, be the variables corresponding to the least-variable flips of o\u2217 in NXi , and, for 1 \u2264 k \u2264 m\n\u2032, let \u03c1ik be the (single) directed path from Xik to Xi.\nLet \u03a5 = \u22c3m\u2032\nj=1\n( NXij \\ {Xij} ) . Because NXi is a tree, for 1 \u2264 j \u2264 m \u2032, the variable Xij\nseparates the variables in NXij \\ {Xij} and the paths \u03c1i1 , . . . , \u03c1im\u2032 . Therefore:\n(i) No set of flips of the variables in \u03a5 will enable us to flip the values of the variables on \u03c1i1, . . . , \u03c1im\u2032 ; in particular a flip of Pa(Xi) cannot be enabled. Thus, to enable a flip of Xi, eventually we will have to flip the value of at least one variable from Xi1 , . . . ,Xim\u2032 .\n(ii) No value flip of Xi1 , . . . ,Xim\u2032 will affect (neither positively nor negatively) our ability to flip the values of the variables in \u03a5. Thus, if there is an improving flipping sequence from o\u2217 to o, then at least one such sequence starts with a value flip of a variable from Xi1 , . . . ,Xim\u2032 .\nThis last observation contradicts the assumption that there is a flipping sequence from o\u2217 to o that does not pass through at least one os.\nThe least-variable flipping rule does not distinguish the flips of different candidate least improvable variables; it simply restricts flips to such variables. In general, not all leastvariable flips are suitable\u2014some may lead to dead-ends, requiring backtracking (a point illustrated in Section 4.4.3). However, when we backtrack, we need only consider other least-variable flips, not all flips, thus significantly reducing the size of the search tree and the expected amount of backtracking. We observe that the TreeDT algorithm for binary-valued, tree-structured CP-nets essentially implements the least-variable flipping rule, which is, therefore, a complete and backtrack-free search procedure for binary-valued, tree-structured networks.\nExamples 7 and 8 below show that Lemma 19 presents probably the widest class of CPnets for which the least-variable flipping rule is complete: Example 7 shows that the leastvariable flipping rule does not preserve completeness in binary-valued, max-2-connected\nCP-nets, while Example 8 shows the same for multi-valued, directed-path singly connected CP-nets. Note that the CP-net in Example 8 forms a chain. Therefore, binary-valued, treestructured CP-nets are probably the widest class of CP-nets for which the least-variable flipping rule is both complete and backtrack-free.\nExample 7 Consider the binary-valued CP-net in Figure 12, where Figure 12(a) depicts the graph of the CP-net, and Figure 12(b) shows the corresponding CPTs. Given query N |= abcde \u227b a\u0304b\u0304c\u0304d\u0304e\u0304, we work in the improving tree rooted at a\u0304b\u0304c\u0304d\u0304e\u0304. The only least improvable variable that can be flipped at the root outcome is B (while A and E can be flipped, they are not least improvable). Unfortunately, flipping B to value b leads to outcome a\u0304bc\u0304d\u0304e\u0304, from which the target abcde is unreachable:\n(i) In order to reach the target value d for the variable D, first we should achieve the assignment b\u0304 \u2227 c to the variables B and C;\n(ii) Achieving the assignment b\u0304 \u2227 c after the flip in question from b\u0304 to b (given a\u0304 \u2227 e\u0304) is possible only by restoring the value b\u0304 for B, which requires a \u2227 e; and\n(iii) Flipping the value of B from b to b\u0304 given a \u2227 e will lead us to a situation in which we can no longer flip B, preventing us from achieving the target value b.\nThus the least-variable flipping rule will not allow the discovery of an improving flipping sequence.\nOn the other hand, there is a flipping sequence from a\u0304b\u0304c\u0304d\u0304e\u0304 to abcde that proves the query:\na\u0304b\u0304c\u0304d\u0304e\u0304 \u2192 ab\u0304c\u0304d\u0304e\u0304 \u2192 ab\u0304cd\u0304e\u0304 \u2192 ab\u0304cde\u0304 \u2192 abcde\u0304 \u2192 abcde\nThis sequence requires that A be flipped at the root, despite the fact that it is not a least-improvable variable.\nExample 8 Consider a chain CP-net with three variables A, B, and C, such that A is the parent of B, and B is the parent of C. Suppose A has domain {a, a}, B has domain {b1, b2, b3}, and C has domain {c, c}, with the following conditional preferences:\na \u227b a;\na : b3 \u227b b2 \u227b b1;\na : b3 \u227b b1 \u227b b2;\nb1 : c \u227b c b2 : c \u227b c; b3 : c \u227b c\nConsider the query N |= ab3c \u227b ab1c. The value c cannot be improved in the context of b1, but b1 can be improved to b3 in the context of a; in fact this is the only least-improvable variable flip for outcome ab1c. Unfortunately, this flip leads to outcome ab3c from which no path to the target ab3c exists. In contrast, flipping the non-least-improving variable A to a first allows the discovery of a successful improving path: after flipping a to a, we change b1 to b2, c to c, and finally b2 to b3.\nThough for multiply-connected networks, and networks with multi-valued variables, the least-variable flipping rule is not complete, we believe that it can provide useful heuristic guidance in these cases. The least-variable-first heuristic is a heuristic for ordering children in an improving search tree\u2014it requires that when expanding a node o\u2217 (with respect to some target o), the children corresponding to least-improving variables be explored first. This will typically reduce the number of nodes expanded in the tree, because the leastvariable-first heuristic can be viewed as embodying a form of least commitment. Flipping the values of a least-improving variable can be seen as leaving maximum flexibility in flipping the values of other variables. An upstream variable limits the possible flipping sequences more drastically than a downstream variable since altering a variable does not limit the ability to flip the values of its non-descendants.\nFor multivalued networks, the least commitment strategy can be used to extend the least-variable-first heuristic using the least improving rule: alternative improving flips of the same least-improvable variable are considered from the least improving flip to the most improving flip (i.e., first the flip that leads to the least preferred improving value is adopted). This allows greater flexibility in the movement of \u201cdownstream\u201d variables. While one can always further improve the value of the variable in question from its less preferred value to a more preferred value (provided that parent values are maintained), \u201cskipping\u201d values may prevent us from setting descendants to their desired values. In fact, this was illustrated in Example 8, where, after the crucial flip of variable A, using the least improving rule as a heuristic leads directly to the target outcome."}, {"heading": "5.3 Forward Pruning", "text": "In a search procedure for an improving flipping sequence, no matter whether this procedure adopts the above heuristics or not, one can use a general forward pruning technique. This technique has a number of desirable properties:\n(a) it often quickly shows that no flipping sequence is possible;\n(b) it prunes the domains of the variables to reduce the flipping search space;\n(c) it doesn\u2019t compromise soundness or completeness; and\n(d) it is relatively cheap: its time complexity is O(nrd2), where n is the number of variables, r is the maximum number of conditional preference rules for each variable, and d is the size of the largest variable domain.\nThe general idea is to sweep forward through the network, pruning any values of a variable that cannot appear in any improving flipping sequence for a given query. Intuitively, we consider the set of flips possible, ignoring interdependence of the parents and the number of times the parents can change their values.\nWe consider the variables in an order consistent with the network topology (so that parents of a node are considered before the node). For each variable Xj with parents U, we build a domain transition graph with nodes corresponding to the possible values xi \u2208 Dom(Xj). For each conditional preference relation \u227b j u over Dom(Xj) of the form:\nxu1 \u227b x u 2 \u227b \u00b7 \u00b7 \u00b7 \u227b x u d\nsuch that u contains only unpruned values of the parents U of Xj , we include directed arcs between the successive values in the ordering \u227bju (i.e., an arc from xi to xi\u22121, for each 1 < i \u2264 d).\nWhen answering query N |= o \u227b o\u2032, we can prune any value of Xj that is not on a directed path from o\u2032[Xj ] to o[Xj ] in the domain transition graph for Xj . This can be implemented by running the well-known Dijkstra\u2019s algorithm (Cormen, Lierson, & Rivest, 1990) twice: once to find the nodes reachable from o\u2032[Xj ] and again to find the nodes that can reach o[Xj ]. These sets of nodes can be intersected to find the possible values for Xj along any path from o\u2032[Xj ] to o[Xj ] in T (o\n\u2032) (i.e., along any improving sequence from o\u2032[Xj ] to o[Xj ] with respect to N). If the intersection is empty, the dominance query fails: there is no legal flipping sequence from o\u2032[Xj ] to o[Xj ]. This often results in quick failure for straightforward queries, so that we only carry out the search for non-obvious cases.\nExample 9 Consider any CP-net N in which A and B are both binary root variables, and the preferences over the values of A and B are a \u227b a\u0304 and b \u227b b\u0304. Given a query N |= ab\u0304 . . . \u227b a\u0304b . . ., first we consider A. The domain transition graph for A consists of an arc a\u0304 \u2192 a, thus no values of A are pruned. If the example were changed slightly so that A had a third value a, where a \u227b a \u227b a, then this third value could be pruned from A, thus simplifying the tables for all the children of A.\nWe then consider B, whose domain transition graph consists of a single arc b\u0304 \u2192 b. Since the value of B in the (purported) more preferred outcome of the query (b\u0304) is not reachable in the domain transition graph of B from the value of B in the (purported) less preferred outcome of the query (b), the query fails quickly without looking at the other variables."}, {"heading": "6. Incompletely Specified Preferences and Indifference", "text": "In many practical applications, one expects to see reluctance on behalf of the user to provide complete CPTs or to totally order the values of each variable in every possible context. Thus, it is natural to ask how our results and techniques can be applied in these cases.\nIt turns out that all the results presented in this paper, except for the linear time procedure for ordering queries, can be easily extended to work both on CP-nets with partially specified CPTs, and on satisfiable CP-nets that capture statements of preferential indifference. For instance, all the results presented in Section 4.4 with respect to dominance queries remain applicable \u201cas is,\u201d because almost all of these results were shown by Brafman and Domshlak (2003) to be valid in more general setting of classical planning. The only case that was not analyzed by Domshlak and Brafman is the case of tree CP-nets. However, the correctness of the TreeDT procedure for \u201cextended\u201d CP-nets can be easily verified, and its complexity remains quadratic. This stems from the fact that Lemma 10 is valid in the more general planning setting (Brafman & Domshlak, 2003). The only point that requires clarification is the difference between partial specification and indifference with respect to flipping sequences: Given a variable X with parents U, and two values x1, x2 \u2208 Dom(X), if x1 and x2 are equally preferred given u \u2208 Asst(U), then given u we can flip the value of X from x1 to x2, and vice versa. Alternatively, if x1 and x2 are incomparable given u \u2208 Asst(U), then given u we cannot flip the value of X from x1 to x2, nor from x2 to x1.\nThe complexity of dominance testing in the context of indifference and incompletely specified CPTs remains an open problem. However, Theorem 20 below shows that the flipping sequence search over multi-valued CP-nets with partially specified preferences is not in np, even if the CP-net forms a chain and the variables are three-valued only.\nTheorem 20 Flipping sequence search over multi-valued CP-nets with partially specified preferences is not in np.\nProof: For the proof see Appendix A.\nNow, consider outcome optimization queries. When the CPTs are allowed to be partially specified, or the statements of indifference are allowed, the CP-net may induce more than one nondominated outcome. For instance, consider again Example 1 (My Dinner I). If the preference for the type of wine given fish soup is not specified, or the decision maker considers both red and white wine to go equally well with fish soup, then this CP-net induces two nondominated outcomes: fish soup with white wine, and fish soup with red wine.\nThe forward sweep procedure for the outcome optimization queries presented in Section 3 can be easily extended for the cases of partial specification and/or indifference by adding branching on each variable X for which the (already generated) assignment on Pa(X) induces more than one nondominated value from Dom(X). The complexity of the resulting algorithm is O(n\u03b1), where n is the number of variables in the CP-net, and \u03b1 is the number of nondominated outcomes induced by the CP-net. Of course, \u03b1 can be exponential in the size of the CP-net.11 However, our adapted forward sweep procedure has the anytime property\u2014the solutions are generated iteratively, and the time to add a new nondominated\n11. The tight upper bound of \u03b1 = 2n can be shown for any CP-net by simply leaving all CPTs unspecified.\noutcome to the current set of generated solutions is O(n). Therefore, the complexity of generating k nondominated solutions is linear in k.\nFinally, an important query that can be answered efficiently in standard CP-nets is the outcome ordering query (see Section 4.1). Although the basic Corollary 4 remains valid in the case of CP-nets with partial specifications or statements of indifference, this is not the case for Theorem 5. Therefore, the computational complexity of ordering queries for extended CP-nets remains an open question, and we conjecture that this problem is hard."}, {"heading": "7. Concluding Remarks", "text": "In this paper we introduced CP-nets, a new graphical model for representing qualitative preference orderings which reflects conditional dependence and independence of preference statements under a ceteris paribus semantics. This formal framework offers a compact and arguably natural representation of preference information, and allows us to efficiently answer some of the principal forms of preference queries.\nWe described several types of queries and algorithms for answering them with respect to a specific CP-net. In particular, outcome optimization and outcome ordering queries were shown to be solvable in time linear in the number of variables in the network. For the dominance queries, however, the situation is more complicated. First, we demonstrated the equivalence of answering dominance queries with the task of determining existence of an improving (or worsening) sequence of variable value flips with respect to the given CP-net. Then, we reduced the latter task to a special subclass of classical planning problems. These insights allowed us to show that, in general, answering dominance queries is np-hard, but that polynomial algorithms exist for tree and polytree-structured, binary-valued CP-nets.\nIn addition, we presented several techniques that one can use in a generic search procedure for an improving flipping sequence. Some of these techniques were shown to have no impact on soundness or completeness of the search for any CP-net, while other techniques have this property only for binary-valued CP-nets. However, we argued that latter techniques can be modified into general purpose heuristics that are likely to reduce significantly the size of the expanded search tree.\nFinally, we analyzed the applicability of our results for CP-nets that allow partially specified preferences and/or capture statements of indifference."}, {"heading": "7.1 Applications", "text": "Our goal in developing the CP-nets formalism is to facilitate the development of applications. One such application\u2014preference-driven, adaptive multimedia document presentation\u2014was recently developed at Ben-Gurion University (Domshlak et al., 2001; Gudes et al., 2002). We described the central components of this system in Section 3.2. Another application in which both conceptual and computational properties of CP-nets seem to be useful is a distributed meeting scheduler. A basic prototype for such a system has been implemented at BenGurion University (Brafman & Domshlak, 2001). We are currently extending this system, while working on the related theoretical issue of multi-agent preference-based optimization.\nAnother potential application for qualitative preferences in general, and thus for CPnets in particular, is sorting a product database according to user-specified preferences. This problem is highly relevant in the context of electronic commerce. Several rather\nconceptually simplistic, though quite interesting, commercial applications that rely on unconditional preference statements are available on the World Wide Web; examples include Active Sales AssistantTM (see www.activebuyersguide.com) and PersonalogicTM (see www.personalogic.com). The general idea is to assist a user in selecting a specific product from a product database according to her preferences. Here, it is very important to use compact and natural representations for preference information. CP-nets extend current models (which typically don\u2019t allow conditional preference statements), yet offer efficiency in ordering a given set of alternatives. Another important aspect of this problem is that the given database precisely defines the products (represented as vectors of attribute values) available, and preference information is only required to the extent that it narrows the choice of product to a sufficiently small selection of products from this database. Both the graphical properties of CP-nets underlying the efficiency of the ordering queries, and the various dominance testing strategies, can be exploited in this context to find a subset of products that are not dominated by any other product in the database, given the (conditional) preference information extracted from the user. Here, an interactive and dynamic approach appears to be most promising, where the user is prompted for additional preference statements until the ordering of the products in the database is sufficiently constrained by the preference information to offer a reasonably small selection of products.\nAnother growing application area for CP-nets is automated constraint-based product configuration (Sabin & Weigel, 1998). The task is to assemble a number of components that compose a product such that given compatibility constraints are satisfied. A simple example of this is the assembly of components for a computer system where, for instance, the type of system bus constrains the choice of video and sound cards. While there has been a wide and growing body of research in modeling configuration problems and efficient problem solving methods, there is still a need for more work on modeling and learning user preferences, and using these to achieve configurations that are not only feasible, but also satisfactory from the user point of view. These issues are emphasized in many papers on configuration (Freuder & O\u2019Sullivan, 2001; Haag, 1998; Junker, 1997, 2001; Soininen & Niemela\u0308, 1998), especially when high-level configurators for specific, real-life domains are discussed (Haag, 1998). The importance of incorporating user preferences into the configuration problem stems from the fact that many such problems are weakly constrained and have numerous feasible solutions (D\u2019Ambrosio & Birmingham, 1995). The value of these solutions, from the subjective point of view of a particular user, may vary significantly.\nCP-nets can be used to represent user preferences which will be used together with compatibility constraints to search for most preferred, feasible configurations. In contrast to the database sorting application above, here the set of possible vectors of feature values (i.e., configurations) is not explicitly given, but implicitly specified by the compatibility constraints. A CP-net based search algorithm by Boutilier et al. (1997) was specifically designed to address this problem. For the description of this algorithm, as well as for analysis of its computational properties we refer the reader to Boutilier et al. (1997), Brafman and Domshlak (2001)."}, {"heading": "7.2 Related Work", "text": "A number of lines of research are related to CP-nets. In addition to the conceptual work in philosophy and philosophical logic described in Section 2, in AI, Doyle and Wellman (1991, 1994) explored ceteris paribus assertions and their logical properties. However, their work did not exploit the notions of preferential independence, and in particular did not considered graphical representations of preference statements. To the best of our knowledge, there are no computational results known for this formalism. Therefore, it is not clear whether useful queries can be answered efficiently in this framework.\nOn the surface, CP-nets are reminiscent of Bayesian networks (Pearl, 1988), which are also graphical structures capturing conditional independence assertions. Indeed, Bayesian networks and their utilization of probabilistic independence provide important motivation to our work, but the two structures differ considerably in their properties and the type of information they present.\nMotivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities. This operator measures the \u201cintensity\u201d of preference for specific values of certain variables given some fixed value for the other variables and with respect to a fixed reference point. They also define an undirected graphical structure, expected utility networks, in which u-independence is represented using the notion of node separation.\nFinally, recent work by Benferhat, Dubois and Prade (2001) provides a preliminary investigation of the potential of possibilistic logic in qualitative decision analysis, and more specifically in qualitative preference representation. The possibilistic approach takes utilities into account, as well as probabilities, but provides a qualitative approach to decision problems by replacing numeric preferences and probabilities with linear orderings. For discussion of this approach to utilities and preference representation, see Benferhat et al. (2001), Dubois, Godo, Prade, and Zapico (1998b), Dubois, Berre, Prade, and Sabbadin (1998a), Dubois, Prade, and Sabbadin (1997), and for related qualitative models, see Boutilier (1994), Tan and Pearl (1994)."}, {"heading": "7.3 Future Work", "text": "We see a number of potential extensions to the work described in this paper. In particular, our work leaves a number of interesting open theoretical questions. First, the worst case complexity of dominance testing with respect to acyclic, binary-valued CP-nets needs to\nbe established\u2014it is still an open question whether this problem is in np. Second, the complexity of dominance queries with respect to multi-valued CP-nets remains an open problem. Third, it is not clear how hard ordering queries are for CP-nets that capture partial preference specification and/or the statements of preferential indifference. Finally, there is a need to understand the expressive power of CP-nets better, specifically: what sort of partial orderings are and are not representable by CP-nets; and among orderings representable by CP-nets, which ones are can only be represented by a cyclic network.\nCyclic networks present another important challenge. Such networks can arise in applications where a natural notion of neighborhood is defined on the set of variables such that preferences for one variable value depend on the value of its neighboring variables. In such cases, the user may find it more natural to provide a cyclic preference structure and we must be able to determine whether the specified network is satisfiable. In addition, inference methods for such networks need to be developed or, alternatively, methods for reducing cyclic networks to acyclic networks without significant blow-up in size. A number of recent papers have started to deal with this question, with some interesting insights and results (Domshlak, 2002a; Domshlak & Brafman, 2002a; Brafman & Dimopoulos, 2003; Domshlak, Rossi, Venable, & Walsh, 2003).\nWe are working on various extensions of the framework presented here. These extensions include the use of conditional preference statements that contain a small amount of quantitative information. Existing applications (such as online interactive consumer guides) suggest that a limited amount of such quantitative preference information might be relatively easy to extract from the user in a natural way, and is very useful for inducing stronger preference orderings. Preliminary work on this topic has been undertaken (Boutilier, Bacchus, & Brafman, 2001).\nAnother interesting extension of CP-nets are TCP-nets (Brafman & Domshlak, 2002). TCP-nets add importance relations and conditional relative importance statements to the the conditional ceteris paribus statements supported by CP-nets. Conditional importance statements have the form \u201cif A = a then optimizing B is more important to me than optimizing C\u201d. For example, \u201cIf I will be flying at night, then having a better seat is more important than getting a more preferred carrier.\u201d\nFinally, preference-based optimization presents an interesting tradeoff between the amount of user interaction required for extracting preference information and the amount of computation needed to determine the most preferred feature vectors. By asking very specific questions about particular, potentially complex preferences, finding most preferred feature vectors can become much easier. On the other hand, asking too many questions, especially those not really necessary for establishing relevant preferences, will annoy the user and make the system less usable. Thus, finding good tradeoffs between the amount of user-interaction and computation time for answering queries\u2014such as finding most preferred items from a database of optimal configurations\u2014seems to be a promising direction for future research. This is related to the motivation underlying goal programming (Dyer, 1972; Ignizio, 1982). The structure of CP-nets can be exploited in determining preference elicitation strategies. This has been explored in the context of CP-nets with quantitative information (Boutilier et al., 2001); it remains to be seen how to use such techniques in a purely qualitative setting."}, {"heading": "Acknowledgments", "text": "Some parts of this paper appeared in C. Boutilier, R. Brafman, H. Hoos, and D. Poole, \u201cReasoning with Conditional Ceteris Paribus Preference Statements,\u201d Proceedings of the Fifteenth Conference on Uncertainty in Artificial Intelligence, pp.71\u201380, Stockholm, 1999; and in C. Domshlak and R. Brafman, \u201cCP-nets\u2014Reasoning and Consistency Testing,\u201d Proceedings of the Eighth International Conference on Principles of Knowledge Representation and Reasoning, pp.121\u2013132, Toulouse, 2002. Thanks to Chris Geib for his contributions to earlier, related models of CP-nets, and to the anonymous referees for their many useful suggestions. Boutilier, Hoos and Poole were supported by the Natural Sciences and Engineering Research Council, and the Institute for Robotics and Intelligent Systems. Brafman acknowledges the support of the Paul Ivanier Center for Robotics Research and Production Management."}, {"heading": "Appendix A.", "text": "Theorem 13 \u0398(n2) is a lower bound for the flipping-sequence search over binary-valued, tree-structured CP-nets.\nProof: The proof is by example of a dominance testing query over a binary-valued, tree CP-net for which the size of a minimal flipping sequence is \u0398(n2).\nConsider the following CP-net N defined over binary variables {X1, . . . ,Xn}, where n = 2k + 1 for some k \u2208 N. The domain of each variable Xi is D(Xi) = {xi, x\u0304i}. For 1 \u2264 i \u2264 n, Pa(Xi) = {Xi\u22121}, thus N forms a directed chain. The CPTs capturing the preferences over the values of {X1, . . . ,Xn} are shown in Figure 13(a).\nNow consider the dominance testing query JN |= o \u227b o\u2032K, where, for 1 \u2264 i \u2264 n: o[Xi] = xi\no\u2032[Xi] = { xi, i = 2m, x\u0304i, i = 2m+ 1\nm \u2208 N\nThe length of the minimal (and actually the only) flipping sequence from o\u2032 to o is k2+2k+1, proving the required lower bound. The jth flip on this sequence changes the value of the variable Xk+1\u2212\u03b1+\u03b2, where:\n\u03b1 = \u230aj/(k + 1)\u230b\n\u03b2 = (j \u2212 1) mod (k + 1)\nInformally, the first k+1 flips change the values of Xk+1, . . . ,Xn (in this order), next k+1 flips change the values of Xk, . . . ,Xn\u22121, then Xk\u22121, . . . ,Xn\u22122, etc. Finally, the last k + 1 flips change the values of X1, . . . ,Xk+1. There are k + 1 such sets, of k + 1 flips each, the length of the above flipping sequence is thus k2 + 2k + 1.\nFigure 13(b-c) illustrates o and o\u2032, and the corresponding flipping sequence for k = 2 (i.e., n = 5). In Figure 13(c), each variable Xi is annotated with its value flips along the flipping sequence: Arrows between the values stand for the value flips, and the sequential numbers of the flips along the flipping sequence appear as the arrow labels.\nNow we prove that the size of the minimal flipping sequence for this example (with n = 2k+1) is k2 +2k+1. We divide the proof into two steps, and show that on a minimal flipping sequence from o\u2032 to o:\n1. For 1 \u2264 i \u2264 k + 1, every variable Xk+i (last k + 1 variables) must change its value at least k + 2\u2212 i times, and\n2. For 1 \u2264 j \u2264 k, every variable Xj (first k variables) must change its value at least j times.\n(1) The proof of the first claim is by induction on i. For i = k+1, the variable X2k+1 (i.e., Xn) must change its value at least once since o[X2k+1] 6= o\n\u2032[X2k+1]. Now, we assume the induction hypothesis that, for l \u2264 i \u2264 k + 1, every variable Xk+i must change its value at least k + 2\u2212 i times, and prove the claim for Xk+l\u22121. Recall that Xk+l\u22121 is the only parent of Xk+l, thus every pair of successive flips of Xk+l must require different values of Xk+l\u22121.\nAssume that k + l is even. Then, the first flip of Xk+l is from xk+l to x\u0304k+l, requiring Xk+l\u22121 to take the value xk+l\u22121 while o\n\u2032[Xk+l\u22121] = x\u0304k+l\u22121. Therefore, the first flip of Xk+l may be performed only after the first flip of Xk+l\u22121, and therefore, before the flip number k+2\u2212 l of Xk+l, the variable Xk+l\u22121 will have to change its value at least k+2\u2212 l times. Now, since k+ l is even, then so is k+2\u2212 l. Thus, after k+2\u2212 l flips, the variable Xk+l\u22121 will be assigned the value o\u2032[Xk+l\u22121] = x\u0304k+l\u22121. However, o[Xk+l\u22121] = xk+l\u22121, thus Xk+l\u22121 will have to change its value at least one more time.\nThe proof for the case of k+ l odd is similar: The first flip of Xk+l is from x\u0304k+l to xk+l, requiring Xk+l\u22121 to take the value x\u0304k+l\u22121 while o \u2032[Xk+l\u22121] = xk+l\u22121. Therefore, before the\nflip number k+2\u2212l ofXk+l, the variableXk+l\u22121 will have to change its value at least k+2\u2212l times. Now, since k + l is odd, then so is k + 2\u2212 l. Thus, after k + 2\u2212 l flips, the variable Xk+l\u22121 will be assigned to the value x\u0304k+l\u22121. However, o[Xk+l\u22121] = o\n\u2032[Xk+l\u22121] = xk+l\u22121, thus Xk+l\u22121 will have to change its value at least one more time. Hence, we proved that, for i = l \u2212 1, Xk+i has to change its value at least k + 2\u2212 i (= k + 3\u2212 l) times.\n(2) The proof of the second claim is by induction on j. First, we show that Xk must change its value at least k times. From the first claim we have that Xk+1 changes its value at least k + 1 times. Therefore, since every pair of successive flips of Xk+1 requires different values of Xk, the variable Xk must change its value at least k times.\nNow, we assume the induction hypothesis that, for l \u2264 j \u2264 k, every variable Xj must change its value at least j times, and prove the claim for Xl\u22121. Again, since every pair of successive flips of Xl requires different values of Xl\u22121, the variable Xl\u22121 must change its value at least l \u2212 1 times.\nTheorem 15 Dominance testing for binary-valued, directed-path singly connected CP-nets is np-complete.\nProof: First we show the membership in np. Given a dominance query \u03a0 = JN |= o \u227b o\u2032K, let MinFS(\u03a0) denote the size of a minimal (= shortest) improving flipping sequence from o\u2032 to o. Using the MaxFlip property of the variables, the following upper bound for MinFS(\u03a0) is straightforward from the Lemma 10:\nMinFS(\u03a0) \u2264 \u2211\nXi\u2208V\nMaxFlip(Xi) \u2264 n 2 (2)\nThus, if we guess a minimal improving flipping sequence for a given solvable problem, we can verify it in low order polynomial time.\nThe proof of hardness is by reduction from 3-sat, i.e., problem of finding a satisfying assignment for a propositional formula in conjunctive normal form in which each conjunct (clause) has at most three literals.\nLet F = c1 \u2227 . . . \u2227 cn be a 3-sat propositional formula, and x1, . . . , xm be the variables used in F . Our equivalent problem can be constructed as follows:\n\u2022 V = {V1, V\u03041, . . . , Vm, V\u0304m} \u222a {C1, . . . , Cn}, where for 1 \u2264 i \u2264 2m + n, the domain D(Xi) = {f, t} (f and t stand for false and true, respectively).\n\u2022 Pa(Vi) = Pa(V\u0304i) = \u2205\n\u2022 Pa(Ci) = {Vi1 , V\u0304i1 , Vi2 , V\u0304i2 , Vi3 , V\u0304i3}, where xi1, xi2 , and xi3 are the variables that participate in the ith clause of F .\n\u2022 Outcome o\u2032 assigns f to all variables in V.\n\u2022 Outcome o assigns t to all variables in V.\nFor any variable Vi or V\u0304i, 1 \u2264 i \u2264 m, the value t is (unconditionally) preferred to the value f . In turn, for 1 \u2264 i \u2264 n, the value t is preferred to the value f for the variable Ci if there exist a j, 1 \u2264 j \u2264 3, such that:\n1. Vij 6= V\u0304ij\n2. if the literal xij (and not x\u0304ij) belongs to the clause ci then Vij = t, otherwise V\u0304ij = t\nFor all other assignments to Pa(Ci), the value f is preferred to the value t for the variable Ci.\nThe constructed inference problem has a directed-path singly connected, binary-valued CP-net in which for 1 \u2264 i \u2264 n, |Pa(Xi)| \u2264 6. Let us show that an improving flipping sequence from o\u2032 to o exists if and only if a satisfying assignment for F can be found.\n\u21d0 Given a satisfying assignment \u03c6, the improving flipping sequence is as follows: First, for 1 \u2264 j \u2264 m, if xj = t in \u03c6, then flip the value of the variable Vj from f to t. Otherwise, if xj = f in \u03c6, then flip the value of the variable V\u0304j from f to t. The actual ordering of these flips is irrelevant since these variables are mutually independent. Then, for 1 \u2264 i \u2264 n, flip the value of Ci from f to t. Here also, the ordering of these flips is not significant. Finally, flip the values of all variables Vj and V\u0304j that still have the value f .\n\u21d2 Let S be an improving flipping sequence from o\u2032 to o. If the value of a variable Ci is flipped on S while variables Vj , V\u0304j \u2208 Pa(Ci) had the values t, f , respectively, then variable xj is set to true in \u03c6. Otherwise, if Ci is flipped on S while variables Vj, V\u0304j \u2208 Pa(Ci) had the values f, t, respectively, then variable xj is set to false in \u03c6. Existence of such a j is ensured by the construction of CPT (Ci).\nIn turn, for 1 \u2264 j \u2264 m, neither Vj nor V\u0304j can achieve the value f after achieving the value t. Hence, if there is an outcome o1 \u2208 S such that {Vj = t, V\u0304j = f} \u2208 o1, then there will be no outcome o2 \u2208 S such that {Vj = f, V\u0304j = t} \u2208 o2, and vice versa. This shows that the value of each variable Ci is flipped on S from f to t in a context consistent with \u03c6. Therefore, for each close ci, there is a literal lij \u2208 ci, 1 \u2264 j \u2264 3, such that lij \u2208 \u03c6.\nTheorem 16 Dominance testing for binary-valued, max-\u03b4-connected CP-nets, where \u03b4 is polynomially bounded in the size of the CP-net, is np-complete.\nProof: We prove this theorem by showing that, for any acyclic, binary-valued CP-net N , and for any variable Xi \u2208 N , we have:\nMaxFlip(Xi) \u2264 1 + n\u2211\nj=i+1\n\u03c1(Xi,Xj) (3)\nwhere \u03c1(Xi,Xj) denotes the total number of different, not necessary disjoint, paths from Xi to Xj . For simplicity of presentation, we assume that the variables {X1, . . . ,Xn} of N are numbered according to a topological order induced by the graph of N , and rewrite Eq. 3 into:\nMaxFlip(Xi) \u2264 1 + n\u2211\nj=i+1\n\u03c1(Xi,Xj) (4)\nThe proof is by induction on i. For i = n it is obvious that MaxFlip(Xn) \u2264 1, since Xn is a leaf node in N . Now we assume that the lemma holds for any i > k, and prove it for i = k. Without loss of generality, assume that there exist at least one variable Xj such that Xk \u2208 Pa(Xj). Otherwise, we simply have that MaxFlip(Xk) \u2264 1.\nDenote by succ(Xk) the immediate successors of Xk in N , i.e. Xik \u2208 succ(Xk) iff Xk \u2208 Pa(Xik). The proof is straightforward:\nMaxFlip(Xk) Lemma 9 \u2264 1 + \u2211\nXik\u2208succ(Xk)\nMaxFlip(Xik) \u2264\nI.H. \u2264 1 + |succ(Xk)|+ \u2211\nXik\u2208succ(Xk)\nn\u2211\nj=ik+1\n\u03c1(Xik ,Xj) =\n= 1 +\nn\u2211\nj=k+1\n\u03c1(Xk,Xj)\nNow, if a binary-valued CP-net is max-\u03b4-connected, and the variables of a given problem \u03a0 are considered in a topological ordering induced by N , then from Eq. 4 it follows that, for any variable Xi \u2208 N , we have:\nMaxFlip(Xi) \u2264 \u03b4n+ 1 (5)\nLet MinFS(\u03a0) denote the size of a minimal (= shortest) improving flipping sequence for \u03a0. From Eq. 5 follows that MinFS(\u03a0) \u2264 \u03b4n2 + n. Hence, if \u03b4 is polynomially bounded in the size of \u03a0, then we can guess and verify a minimal improving flipping sequence for \u03a0 in polynomial time, and thus this class of dominance testing queries is in np.\nTheorem 20 Flipping sequence search over multi-valued CP-nets with partially specified preferences is harder than np.\nProof: The proof is by example of a dominance query over a multi-valued, chain CP-net with partially specified preferences, for which the minimal flipping sequence is exponentially long.\nConsider the following CP-net N defined over three-valued variables {X1, . . . ,Xn}, where n = 2k + 1 for some k \u2208 N. The domain of each variable Xi is D(Xi) = {xi, x\u0304i, x\u0304i}. For 1 \u2264 i \u2264 n, Pa(Xi) = {Xi\u22121}, thus N forms a directed chain. The CPTs capturing the preferences over the values of {X1, . . . ,Xn} are shown in Figure 14.\nNow consider the dominance testing query JN |= o \u227b o\u2032K, where, for 1 \u2264 i \u2264 n, o[Xi] = xi and o \u2032[Xi] = x\u0304i. Let the sequence {ai} be defined as:\nai =\n{\n2, i = 1 2ai\u22121 + 2, i \u2265 2 (6)\nThe length of a minimal flipping sequence from o\u2032 to o as above is greater than:\nk\u2211\ni=1\nai > 2 n 2\nFigure 15 illustrates the corresponding flipping sequence for k = 2 (i.e., n = 5), where each variableXi is annotated with its value flips along the flipping sequence: Arrows between\nthe values stand for the value flips, and the sequential numbers of the flips along the flipping sequence appear as the arrow labels.\nNow we prove that the size of the minimal flipping sequence for the dominance query as above is greater than\n\u2211k i=1 ai. We divide the proof into four steps, where the first step\nshows the necessity of \u2211k\ni=1 ai flips for any flipping sequence from o \u2032 to o as above, and the\nsubsequent three steps prove the existence of a flipping sequence from o\u2032 to o. Recall that, since N forms a chain, for 1 < i \u2264 n, Xi\u22121 is the only parent of Xi, thus the value flips of Xi depend only on the value of Xi\u22121.\nThe steps of the proof are as follows:\n(1) On a flipping sequence from o\u2032 to o, for 2 \u2265 i \u2264 k + 1, every variable Xk+i (last k variables) must change its value at least ak+2\u2212i times, such that if f k+i 1 , . . . , f k+i ak+2\u2212i\nis the corresponding sequence of flips of Xi, then, for 1 \u2264 j \u2264 ak+2\u2212i, we have:\nfk+ij =\n \n\nx\u0304i \u2192 x\u0304i, j = 4k + 1\nx\u0304i \u2192 xi, j = 4k + 2\nxi \u2192 x\u0304i, j = 4k + 3\nx\u0304i \u2192 x\u0304i, j = 4k\nk \u2208 N (7)\n(2) For 1 \u2264 i \u2264 k, every variable Xi (first k variables) can change its value ai times, such that if f i1, . . . , f i ai\nis the corresponding sequence of flips of Xi, then, for 1 \u2264 j \u2264 ai, every flip f ij is consistent with Eq. 7.\n(3) Given the sequence of flips for Xk as in (2), the variable Xk+1 can change its value ak+1 times, such that if f k+1 1 , . . . , f k+1 ak+1\nis the corresponding sequence of flips of Xk+1, then, for 1 \u2264 j \u2264 ak + 1, we have:\nfk+1j =\n{\nx\u0304k+1 \u2192 xk+1, j = 2k + 1 xk+1 \u2192 x\u0304k+1, j = 2k k \u2208 N (8)\n(4) The sequence of flips for Xk+2 as in (1) is feasible given the sequence of flips for Xk+1 as in (3).\nStep (1): The proof is by induction on i. For i = k + 1, the variable X2k+1 (i.e., Xn) must change its value at least twice, since no value of X2k induces x\u03042k+1 \u227a x2k+1. The only way to change the value of X2k+1 from x\u03042k+1 to x2k+1 is to flip X2k+1 first from x\u03042k+1 to x\u03042k+1, and then from x\u03042k+1 to x2k+1. Note that these flips are consistent with Eq. 7 and ak+2\u2212(k+1) = a1 = 2, thus we established the induction base.\nNow, we assume that the induction hypothesis that, for 2 < l \u2264 i \u2264 k+1, every variable Xi must change its value at least ak+2\u2212i times according to Eq. 7, and prove this claim for Xk+l\u22121.\nConsider the sequence of flips ofXk+l that we assumed to be necessary, i.e., f k+l 1 , . . . , f k+l ak+2\u2212l\n. According to CPT (Xk+l) we have that:\n(i) every pair of successive flips of Xk+l require different values of Xk+l\u22121,\n(ii) the required values of Xk+l\u22121 are {x\u0304k+l\u22121, xk+l\u22121}, and\n(iii) the first flip of Xk+1 (from x\u0304k+l to x\u0304k+l) requires Xk+l\u22121 = xk+l\u22121, while o \u2032[Xk+l\u22121] =\nx\u0304k+l\u22121.\nTherefore, Xk+l\u22121 must perform ak+2\u2212l value changes from x\u0304k+l\u22121 to xk+l\u22121 and back, in order to support the required value changes of Xk+l. In addition, after supporting the value changes of Xk+l, the variable Xk+l\u22121 must perform another value change from x\u0304k+l\u22121 to xk+l\u22121, since ak+2\u2212l is even (see Eq. 6), while o \u2032[Xk+l\u22121] = x\u0304k+l\u22121 and o[Xk+l\u22121] = xk+l\u22121.\nFinally, according to CPT (Xk+l\u22121), every value change of Xk+l\u22121 from x\u0304k+l\u22121 to xk+l\u22121 and from xk+l\u22121 to x\u0304k+l\u22121 consists of two flips: from the initial value to x\u0304k+l\u22121, and from x\u0304k+l\u22121 to the target value. Thus the proved that Xk+l\u22121 must perform at least 2(ak+2\u2212l + 1) = ak+3\u2212l value changes, and that these value changes are consistent with Eq. 7.\nStep (2): The proof is by induction on i. For X1 the proof is straightforward, since o \u2032[X1] = x\u03041, o[X1] = x1, and CPT (X1) allows us to flip the value of X1 from x\u03041 to x\u03041, and then from x\u03041 to x1.\nNow we assume the induction hypothesis that, for 1 \u2264 i < k, every variable Xi can change its value ai times according to Eq. 7, and prove the claim for Xi+1. The proof is apparent from CPT (Xi+1), the outcomes o and o\n\u2032 in query, and the induction hypothesis. For every value achieved by Xi along its sequence of ai flips (including the initial value o\u2032[Xi] = x\u0304i), Xi+1 can flip its value twice: Given Xi = x\u0304i or Xi = xi, we can flip the value of Xi+1 first from x\u0304i+1 to x\u0304i+1, and then from x\u0304i+1 to xi+1. Alternatively, given Xi = x\u0304i, we can flip the value of Xi+1 from xi+1 to x\u0304i+1, and then from x\u0304i+1 to x\u0304i+1. Therefore, Xi+1 can flip its value 2(ai + 1) = ai+1 times, and it is easy to see that these value flips of Xi+1 are consistent with Eq. 7.\nStep (3): Given the sequence of ak flips f k 1 , . . . , f k ak of Xk as in Eq. 7, let val(f k j ) \u2208 Dom(Xk) be the value of Xk achieved by the flip f k j , for 1 \u2264 j \u2264 ak. CPT (Xk+1) entails that, for any triple of values of Xk achieved by a triple of successive flips f k j , f k j+1, f k j+2, 1 \u2264 j \u2264 ak \u2212 2, we have either:\nval(fkj ) : xk+1 \u227b x\u0304k+1 val(fkj+1) : x\u0304k+1 \u227b xk+1 val(fkj+2) : xk+1 \u227b x\u0304k+1\nor\nval(fkj ) : x\u0304k+1 \u227b xk+1 val(fkj+1) : xk+1 \u227b x\u0304k+1 val(fkj+2) : x\u0304k+1 \u227b xk+1\nIn addition, we know that:\no\u2032[Xk] = x\u0304k : xk+1 \u227b x\u0304k+1\nand\nval(fk1 ) = x\u0304k : x\u0304k+1 \u227b xk+1\nThe above entails that Xk+1 can change its value ak + 1 times according to Eq. 8.\nStep (4): The proof of this subclaim is straightforward from CPT (Xk+2). Given the sequence of Xk+2 value flips f k+2 1 , . . . , f k+2 ak as in Eq. 7, observe that, for 1 \u2264 j \u2264 ak, if\nj = 2k + 1 for some k \u2208 N, then fk+2j can be supported by the value xk+1 of Xk+1, otherwise, if j = 2k, k \u2208 N, then fk+2j can be supported by the value x\u0304k+1 of Xk+1. Now, since for 1 \u2264 l \u2264 ak + 1,\nval(fk+1l ) =\n{\nxk+1, l = 2m+ 1 x\u0304k+1, l = 2m m \u2208 N\nit is apparent that the sequence of ak value flips of Xk+2 as in Eq. 7 is feasible given the sequence of ak + 1 value flips 12 of Xk+1 as in Eq. 8.\nThe above entails that N |= o \u227b o\u2032, and that the size of the minimal flipping sequence from o\u2032 to o in N is\n\u2211k i=1 ai, which is greater than 2 n 2 . In fact, it can be show that the value flips\nfor X1, . . . ,Xk+1, constructed in steps (2)-(3), are the part of the minimal flipping sequence from o\u2032 to o, thus the length of this sequence is greater than:\n2 k\u2211\ni=1\nai + (ak + 1)\nHowever, the result achieved in step (1) already proves our claim that there exist dominance queries on multi-valued CP-nets with partially specified preferences, for which there are exponentially sized minimal flipping sequences."}], "references": [{"title": "Graphical models for preference and utility", "author": ["F. Bacchus", "A. Grove"], "venue": "In Proceedings of the Eleventh Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "Bacchus and Grove,? \\Q1995\\E", "shortCiteRegEx": "Bacchus and Grove", "year": 1995}, {"title": "Utility independence in qualitative decision theory", "author": ["F. Bacchus", "A. Grove"], "venue": "In Proceedings of the Sixth International Conference on Principles of Knowledge Representation and Reasoning,", "citeRegEx": "Bacchus and Grove,? \\Q1996\\E", "shortCiteRegEx": "Bacchus and Grove", "year": 1996}, {"title": "Towards a possibilistic logic handling of preferences", "author": ["S. Benferhat", "D. Dubois", "H. Prade"], "venue": "Applied Intelligence,", "citeRegEx": "Benferhat et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Benferhat et al\\.", "year": 2001}, {"title": "Toward a logic for qualitative decision theory", "author": ["C. Boutilier"], "venue": "Proceedings of the Fifth International Conference on Principles of Knowledge Representation and Reasoning, pp. 75\u201386, Bonn.", "citeRegEx": "Boutilier,? 1994", "shortCiteRegEx": "Boutilier", "year": 1994}, {"title": "UCP-Networks: A directed graphical representation of conditional utilities", "author": ["C. Boutilier", "F. Bacchus", "R.I. Brafman"], "venue": "In Proceedings of the Seventeenth Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "Boutilier et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Boutilier et al\\.", "year": 2001}, {"title": "A constraint-based approach to preference elicitation and decision making", "author": ["C. Boutilier", "R. Brafman", "C. Geib", "D. Poole"], "venue": "In AAAI Spring Symposium on Qualitative Decision Theory, Stanford", "citeRegEx": "Boutilier et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Boutilier et al\\.", "year": 1997}, {"title": "CP-networks for preference-based CSP", "author": ["R. Brafman", "C. Domshlak"], "venue": "In Proceedings of the Workshop on Modelling and Solving Problems with Soft Constraints (in", "citeRegEx": "Brafman and Domshlak,? \\Q2001\\E", "shortCiteRegEx": "Brafman and Domshlak", "year": 2001}, {"title": "Introducing variable importance tradeoffs into CPnets", "author": ["R. Brafman", "C. Domshlak"], "venue": "In Proceedings of the Eighteenth Annual Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "Brafman and Domshlak,? \\Q2002\\E", "shortCiteRegEx": "Brafman and Domshlak", "year": 2002}, {"title": "Structure and complexity in planning with unary operators", "author": ["R. Brafman", "C. Domshlak"], "venue": "Journal of Artificial Intelligence Research", "citeRegEx": "Brafman and Domshlak,? \\Q2003\\E", "shortCiteRegEx": "Brafman and Domshlak", "year": 2003}, {"title": "A new look at the semantics and optimization methods of CP-networks", "author": ["R.I. Brafman", "Y. Dimopoulos"], "venue": "In Proceedings of of the Eighteenth International Joint Conference on Artificial Intelligence,", "citeRegEx": "Brafman and Dimopoulos,? \\Q2003\\E", "shortCiteRegEx": "Brafman and Dimopoulos", "year": 2003}, {"title": "The computational complexity of propositional STRIPS planning", "author": ["T. Bylander"], "venue": "Artificial Intelligence, 69 (1-2), 165\u2013204.", "citeRegEx": "Bylander,? 1994", "shortCiteRegEx": "Bylander", "year": 1994}, {"title": "Review of Halld\u00e9n \u201cOn the Logic of \u2018Better\u2019", "author": ["H.N. Casta\u00f1eda"], "venue": "Philosophy and Phenomenological Research, 19, 266.", "citeRegEx": "Casta\u00f1eda,? 1958", "shortCiteRegEx": "Casta\u00f1eda", "year": 1958}, {"title": "Utility elicitation as a classification problem", "author": ["U. Chajewska", "L. Getoor", "J. Norman", "Y. Shahar"], "venue": "In Proceedings of the Fourteenth Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "Chajewska et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Chajewska et al\\.", "year": 1998}, {"title": "Introduction to Algorithms", "author": ["T.H. Cormen", "C.E. Lierson", "R.L. Rivest"], "venue": null, "citeRegEx": "Cormen et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Cormen et al\\.", "year": 1990}, {"title": "Preference-directed design", "author": ["J.G. D\u2019Ambrosio", "W.P. Birmingham"], "venue": "Journal for Artificial Intelligence in Engineering Design, Analysis and Manufacturing,", "citeRegEx": "D.Ambrosio and Birmingham,? \\Q1995\\E", "shortCiteRegEx": "D.Ambrosio and Birmingham", "year": 1995}, {"title": "Modeling and Reasoning about Preferences with CP-nets", "author": ["C. Domshlak"], "venue": "Ph.D. thesis, Ben-Gurion University. (forthcoming).", "citeRegEx": "Domshlak,? 2002a", "shortCiteRegEx": "Domshlak", "year": 2002}, {"title": "On recursively directed hypercubes", "author": ["C. Domshlak"], "venue": "The Electronic Journal of Combinatorics, 9 (1).", "citeRegEx": "Domshlak,? 2002b", "shortCiteRegEx": "Domshlak", "year": 2002}, {"title": "CP-nets - reasoning and consistency testing", "author": ["C. Domshlak", "R. Brafman"], "venue": "In Proceedings of the Eighth International Conference on Principles of Knowledge Representation and Reasoning,", "citeRegEx": "Domshlak and Brafman,? \\Q2002\\E", "shortCiteRegEx": "Domshlak and Brafman", "year": 2002}, {"title": "Structure and complexity in planning with unary operators", "author": ["C. Domshlak", "R. Brafman"], "venue": "In Proceedings of the Sixth International Conference on Artificial Intelligence Planning and Scheduling,", "citeRegEx": "Domshlak and Brafman,? \\Q2002\\E", "shortCiteRegEx": "Domshlak and Brafman", "year": 2002}, {"title": "Preference-based configuration of web page content", "author": ["C. Domshlak", "R. Brafman", "S.E. Shimony"], "venue": "In Proceedings of Seventeenth International Joint Conference on Artificial Intelligence,", "citeRegEx": "Domshlak et al\\.,? \\Q2001\\E", "shortCiteRegEx": "Domshlak et al\\.", "year": 2001}, {"title": "Reasoning about soft constraints and conditional preferences: Complexity results and approximation techniques", "author": ["C. Domshlak", "F. Rossi", "C. Venable", "T. Walsh"], "venue": "In Proceedings of of the Eighteenth International Joint Conference on Artificial Intelligence,", "citeRegEx": "Domshlak et al\\.,? \\Q2003\\E", "shortCiteRegEx": "Domshlak et al\\.", "year": 2003}, {"title": "Efficient probabilistic reasoning in bayes nets with mutual exclusion and context specific independence", "author": ["C. Domshlak", "S.E. Shimony"], "venue": "In to appear in Proceedings of the Sixteenth International FLAIRS Conference,", "citeRegEx": "Domshlak and Shimony,? \\Q2003\\E", "shortCiteRegEx": "Domshlak and Shimony", "year": 2003}, {"title": "A logic of relative desire (preliminary report)", "author": ["J. Doyle", "Y. Shoham", "M. Wellman"], "venue": "In Proceedings of the Sixth International Symposium on Methodologies for Intelligent Systems (ISMIS\u201391), Lecture Notes in Computer Science,", "citeRegEx": "Doyle et al\\.,? \\Q1991\\E", "shortCiteRegEx": "Doyle et al\\.", "year": 1991}, {"title": "Representing preferences as ceteris paribus comparatives", "author": ["J. Doyle", "M. Wellman"], "venue": "In Proceedings of the AAAI Spring Symposium on Decision-Theoretic Planning,", "citeRegEx": "Doyle and Wellman,? \\Q1994\\E", "shortCiteRegEx": "Doyle and Wellman", "year": 1994}, {"title": "Logical representation and computation of optimal decisions in a qualitative setting", "author": ["D. Dubois", "D.L. Berre", "H. Prade", "R. Sabbadin"], "venue": "In Proceedings of the Fifteenth National Conference on Artificial Intelligence,", "citeRegEx": "Dubois et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Dubois et al\\.", "year": 1998}, {"title": "Making decision in a qualitative setting: From decision under uncertainty to case-based decision", "author": ["D. Dubois", "L. Godo", "H. Prade", "A. Zapico"], "venue": "In Proceedings of the International Conference on Principles of Knowledge Representation and Reasoning,", "citeRegEx": "Dubois et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Dubois et al\\.", "year": 1998}, {"title": "A possibilistic logic machinery for qualitative decision", "author": ["D. Dubois", "H. Prade", "R. Sabbadin"], "venue": "In AAAI Spring Symposium on Qualitative Preferences in Deliberation and Practical Reasoning,", "citeRegEx": "Dubois et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Dubois et al\\.", "year": 1997}, {"title": "Interactive goal programming", "author": ["J.S. Dyer"], "venue": "Management Science, 19, 62\u201370.", "citeRegEx": "Dyer,? 1972", "shortCiteRegEx": "Dyer", "year": 1972}, {"title": "Decision Theory", "author": ["S. French"], "venue": "Halsted Press, New York.", "citeRegEx": "French,? 1986", "shortCiteRegEx": "French", "year": 1986}, {"title": "Modeling and generating tradeoffs for constraintbased configuration", "author": ["E. Freuder", "B. O\u2019Sullivan"], "venue": "In Proceedings of 4th Workshop on Configuration", "citeRegEx": "Freuder and O.Sullivan,? \\Q2001\\E", "shortCiteRegEx": "Freuder and O.Sullivan", "year": 2001}, {"title": "Remote conferencing with multimedia objects", "author": ["E. Gudes", "C. Domshlak", "N. Orlov"], "venue": "In Proceedings of the Second International Workshop on Multimedia Data Document Engineering (MDDE\u201902)", "citeRegEx": "Gudes et al\\.,? \\Q2002\\E", "shortCiteRegEx": "Gudes et al\\.", "year": 2002}, {"title": "Toward case-based preference elicitation: Similarity measures on preference structures", "author": ["V. Ha", "P. Haddawy"], "venue": "In Proceedings of the Fourteenth Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "Ha and Haddawy,? \\Q1998\\E", "shortCiteRegEx": "Ha and Haddawy", "year": 1998}, {"title": "Sales configuration in business processes", "author": ["A. Haag"], "venue": "IEEE Intelligent Systems and their Applications, 13 (4), 78\u201385.", "citeRegEx": "Haag,? 1998", "shortCiteRegEx": "Haag", "year": 1998}, {"title": "On the Logic of \u2018Better", "author": ["S. Halld\u00e9n"], "venue": "Lund.", "citeRegEx": "Halld\u00e9n,? 1957", "shortCiteRegEx": "Halld\u00e9n", "year": 1957}, {"title": "What is ceteris paribus preference", "author": ["S.O. Hansson"], "venue": "Journal of Philosophical Logic, 25 (3), 307\u2013332.", "citeRegEx": "Hansson,? 1996", "shortCiteRegEx": "Hansson", "year": 1996}, {"title": "Linear Programming in Single and Multiple Objective Systems", "author": ["J.P. Ignizio"], "venue": "Prentice-Hall, Englewood Cliffs.", "citeRegEx": "Ignizio,? 1982", "shortCiteRegEx": "Ignizio", "year": 1982}, {"title": "A cumulative-model semantics for dynamic preferences on assumptions", "author": ["U. Junker"], "venue": "Proceedings of the Fifteen International Joint Conference on Artificial Intelligence, pp. 162\u2013167, Nagoya, Japan.", "citeRegEx": "Junker,? 1997", "shortCiteRegEx": "Junker", "year": 1997}, {"title": "Preference programming for configuration", "author": ["U. Junker"], "venue": "Proceedings of 4th Workshop on Configuration (IJCAI-01), pp. 50\u201356, Seattle.", "citeRegEx": "Junker,? 2001", "shortCiteRegEx": "Junker", "year": 2001}, {"title": "Decisions with Multiple Objectives: Preferences and Value Trade-offs", "author": ["R.L. Keeney", "H. Raiffa"], "venue": null, "citeRegEx": "Keeney and Raiffa,? \\Q1976\\E", "shortCiteRegEx": "Keeney and Raiffa", "year": 1976}, {"title": "Automatically generating abstractions for planning", "author": ["C.A. Knoblock"], "venue": "Artificial Intelligence, 68, 243\u2013302.", "citeRegEx": "Knoblock,? 1994", "shortCiteRegEx": "Knoblock", "year": 1994}, {"title": "Expected utility networks", "author": ["P. La Mura", "Y. Shoham"], "venue": "In Proceedings of the Fifteenth Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "Mura and Shoham,? \\Q1999\\E", "shortCiteRegEx": "Mura and Shoham", "year": 1999}, {"title": "Collaborative interface agents", "author": ["Y. Lashkari", "M. Metral", "P. Maes"], "venue": "In Proceedings of the Twelfth National Conference on Artificial Intelligence,", "citeRegEx": "Lashkari et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Lashkari et al\\.", "year": 1994}, {"title": "The decision-theoretic video advisor", "author": ["H. Nguyen", "P. Haddawy"], "venue": "Workshop on Recommender Systems,", "citeRegEx": "Nguyen and Haddawy,? \\Q1998\\E", "shortCiteRegEx": "Nguyen and Haddawy", "year": 1998}, {"title": "Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference", "author": ["J. Pearl"], "venue": "Morgan Kaufmann, San Mateo.", "citeRegEx": "Pearl,? 1988", "shortCiteRegEx": "Pearl", "year": 1988}, {"title": "Product conguration frameworks - a survey", "author": ["D. Sabin", "R. Weigel"], "venue": "IEEE Intelligent Systems and their Applications,", "citeRegEx": "Sabin and Weigel,? \\Q1998\\E", "shortCiteRegEx": "Sabin and Weigel", "year": 1998}, {"title": "Complexity of probabilistic reasoning in (directedpath) singly connected (not polytree!) Bayes networks. submitted for publication", "author": ["S.E. Shimony", "C. Domshlak"], "venue": null, "citeRegEx": "Shimony and Domshlak,? \\Q2002\\E", "shortCiteRegEx": "Shimony and Domshlak", "year": 2002}, {"title": "A semantical approach to nonmonotonic logics", "author": ["Y. Shoham"], "venue": "Proceedings of Tenth International Joint Conference on Artificial Intelligence, pp. 388\u2013392.", "citeRegEx": "Shoham,? 1987", "shortCiteRegEx": "Shoham", "year": 1987}, {"title": "Conditional utility, utility independence, and utility networks", "author": ["Y. Shoham"], "venue": "Proceedings of the Thirteenth Annual Conference on Uncertainty in Artificial Intelligence, pp. 429\u2013436, San Francisco, CA. Morgan Kaufmann Publishers.", "citeRegEx": "Shoham,? 1997", "shortCiteRegEx": "Shoham", "year": 1997}, {"title": "Formalizing configuration knowledge using rules with choices", "author": ["T. Soininen", "I. Niemel\u00e4"], "venue": "In Seventh International Workshop on Nonmonotonic Reasoning,", "citeRegEx": "Soininen and Niemel\u00e4,? \\Q1998\\E", "shortCiteRegEx": "Soininen and Niemel\u00e4", "year": 1998}, {"title": "Specification and evaluation of preferences for planning under uncertainty", "author": ["Tan", "S.-W", "J. Pearl"], "venue": "In Proceedings of the Fifth International Conference on Principles of Knowledge Representation and Reasoning,", "citeRegEx": "Tan et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Tan et al\\.", "year": 1994}, {"title": "Utility theory and preference logic", "author": ["R. Trapp"], "venue": "Erkenntnis, 22, 331\u2013339.", "citeRegEx": "Trapp,? 1985", "shortCiteRegEx": "Trapp", "year": 1985}, {"title": "The Logic of Preference: An Essay", "author": ["G.H. von Wright"], "venue": null, "citeRegEx": "Wright,? \\Q1963\\E", "shortCiteRegEx": "Wright", "year": 1963}, {"title": "The logic of preference reconsidered", "author": ["G.H. von Wright"], "venue": "Theory and Decisions,", "citeRegEx": "Wright,? \\Q1972\\E", "shortCiteRegEx": "Wright", "year": 1972}, {"title": "Philosophical logic: Philosophical Papers, Volume II", "author": ["G.H. von Wright"], "venue": null, "citeRegEx": "Wright,? \\Q1984\\E", "shortCiteRegEx": "Wright", "year": 1984}, {"title": "Preferential semantics for goals", "author": ["M. CP-Nets Wellman", "J. Doyle"], "venue": "In Proceedings of the Ninth National Conference on Artificial Intelligence", "citeRegEx": "Wellman and Doyle,? \\Q1991\\E", "shortCiteRegEx": "Wellman and Doyle", "year": 1991}], "referenceMentions": [{"referenceID": 28, "context": "Preference elicitation is a complex task and is a key focus of work in decision analysis (Keeney & Raiffa, 1976; Howard & Matheson, 1984; French, 1986), especially elicitation involving non-expert users.", "startOffset": 89, "endOffset": 151}, {"referenceID": 45, "context": "CP-nets can be used to specify different types of preference relations, such as a preference ordering over potential decision outcomes or a likelihood ordering over possible states of the world, for example, as in Shoham\u2019s (1987) preference semantics.", "startOffset": 214, "endOffset": 230}, {"referenceID": 32, "context": "Philosophical treatment of many intuitive qualitative preferential statements began in 1957 in a pioneering work of Halld\u00e9n (1957), and was continued by Casta\u00f1eda (1958), von Wright (1963, 1972), Kron and Milovanovi\u0107 (1975), Trapp (1985), and Hansson (1996).", "startOffset": 116, "endOffset": 131}, {"referenceID": 11, "context": "Philosophical treatment of many intuitive qualitative preferential statements began in 1957 in a pioneering work of Halld\u00e9n (1957), and was continued by Casta\u00f1eda (1958), von Wright (1963, 1972), Kron and Milovanovi\u0107 (1975), Trapp (1985), and Hansson (1996).", "startOffset": 153, "endOffset": 170}, {"referenceID": 11, "context": "Philosophical treatment of many intuitive qualitative preferential statements began in 1957 in a pioneering work of Halld\u00e9n (1957), and was continued by Casta\u00f1eda (1958), von Wright (1963, 1972), Kron and Milovanovi\u0107 (1975), Trapp (1985), and Hansson (1996).", "startOffset": 153, "endOffset": 224}, {"referenceID": 11, "context": "Philosophical treatment of many intuitive qualitative preferential statements began in 1957 in a pioneering work of Halld\u00e9n (1957), and was continued by Casta\u00f1eda (1958), von Wright (1963, 1972), Kron and Milovanovi\u0107 (1975), Trapp (1985), and Hansson (1996).", "startOffset": 153, "endOffset": 238}, {"referenceID": 11, "context": "Philosophical treatment of many intuitive qualitative preferential statements began in 1957 in a pioneering work of Halld\u00e9n (1957), and was continued by Casta\u00f1eda (1958), von Wright (1963, 1972), Kron and Milovanovi\u0107 (1975), Trapp (1985), and Hansson (1996). The reason for such an intensive analysis of these statements is expressed concisely in the opening of Hansson\u2019s (1996) paper:", "startOffset": 153, "endOffset": 258}, {"referenceID": 11, "context": "Philosophical treatment of many intuitive qualitative preferential statements began in 1957 in a pioneering work of Halld\u00e9n (1957), and was continued by Casta\u00f1eda (1958), von Wright (1963, 1972), Kron and Milovanovi\u0107 (1975), Trapp (1985), and Hansson (1996). The reason for such an intensive analysis of these statements is expressed concisely in the opening of Hansson\u2019s (1996) paper:", "startOffset": 153, "endOffset": 379}, {"referenceID": 22, "context": "For example, Doyle et al. (1991) introduced a logic of relative desire to treat preference statements under a ceteris paribus assumption.", "startOffset": 13, "endOffset": 33}, {"referenceID": 22, "context": "For example, Doyle et al. (1991) introduced a logic of relative desire to treat preference statements under a ceteris paribus assumption. This logic bears some similarity to von Wright\u2019s (1963) logic", "startOffset": 13, "endOffset": 194}, {"referenceID": 23, "context": "For a more detailed discussion on this issue, we refer the reader to Doyle and Wellman (1994). 3.", "startOffset": 69, "endOffset": 94}, {"referenceID": 38, "context": "We describe certain standard types of structure here, referring to Keeney and Raiffa (1976) for a detailed description of these (and other) structural forms and a discussion of their implications.", "startOffset": 67, "endOffset": 92}, {"referenceID": 36, "context": "For an extensive discussion of various special forms of preference functions we refer to Keeney and Raiffa (1976), as well as Bacchus and Grove (1995, 1996) and Shoham (1997).", "startOffset": 89, "endOffset": 114}, {"referenceID": 0, "context": "For an extensive discussion of various special forms of preference functions we refer to Keeney and Raiffa (1976), as well as Bacchus and Grove (1995, 1996) and Shoham (1997).", "startOffset": 126, "endOffset": 175}, {"referenceID": 43, "context": "The model is similar to a Bayesian network (Pearl, 1988) on the surface; however, the nature of the relation between nodes within a network is generally quite weak (e.", "startOffset": 43, "endOffset": 56}, {"referenceID": 22, "context": "We note that reasoning about ceteris paribus statements has been explored in AI (Doyle et al., 1991; Wellman & Doyle, 1991; Doyle & Wellman, 1994), though not in the context of network representations or exploiting preferential independence in a computational fashion.", "startOffset": 80, "endOffset": 146}, {"referenceID": 19, "context": "Acyclic CP-nets are shown to be effective and natural in the above-mentioned work on web page presentation (Domshlak et al., 2001), as well as in a related project that deals with the presentation of multi-media content in a medical domain (Gudes, Domshlak, & Orlov, 2002)\u2014a more extensive example from this latter domain is presented in the next section.", "startOffset": 107, "endOffset": 130}, {"referenceID": 15, "context": "Recently, initial results on consistency testing for cyclic CP-nets were presented by Domshlak and Brafman (2002a). In particular, a wide class of cyclic, binary-valued CPnets was identified to be efficiently testable for consistency.", "startOffset": 86, "endOffset": 115}, {"referenceID": 15, "context": "Applications based on this system for the presentation of web-based content and multi-media medical data were recently presented by Domshlak et al. (2001) and Gudes et al.", "startOffset": 132, "endOffset": 155}, {"referenceID": 15, "context": "Applications based on this system for the presentation of web-based content and multi-media medical data were recently presented by Domshlak et al. (2001) and Gudes et al. (2002). Through this example we demonstrate the simplicity of preference specification using CP-nets, the utility of acyclic networks, and the use of the optimization algorithm described above.", "startOffset": 132, "endOffset": 179}, {"referenceID": 10, "context": "The planning problem over multi-valued variables with discrete, finite domains is known to be pspace-complete (B\u00e4ckstr\u00f6m & Nebel, 1995), and it remains pspace-complete under the assumption that all the variables are binary (Bylander, 1994) (i.", "startOffset": 223, "endOffset": 239}, {"referenceID": 39, "context": "Second, we introduce the notion of a causal graph (Knoblock, 1994), a directed graph whose nodes stand for the problem variables.", "startOffset": 50, "endOffset": 66}, {"referenceID": 6, "context": "The complexity analysis of Brafman and Domshlak (2003) addresses planning problems with binary variables, unary operators (i.", "startOffset": 27, "endOffset": 55}, {"referenceID": 6, "context": "Therefore, in our computational analysis of dominance queries for binary-valued acyclic CP-nets we can use some of the results and techniques of Brafman and Domshlak (2003).", "startOffset": 145, "endOffset": 173}, {"referenceID": 15, "context": "Adopting the terminology of Domshlak and Shimony (2003) and Shimony and Domshlak (2002), a directed acyclic graph G is directed-path singly connected if, for every pair of nodes s, t \u2208 G, there is at most one directed path from s to t.", "startOffset": 28, "endOffset": 56}, {"referenceID": 15, "context": "Adopting the terminology of Domshlak and Shimony (2003) and Shimony and Domshlak (2002), a directed acyclic graph G is directed-path singly connected if, for every pair of nodes s, t \u2208 G, there is at most one directed path from s to t.", "startOffset": 28, "endOffset": 88}, {"referenceID": 15, "context": "An algorithm is adapted from the corresponding algorithm for planning problems with binary variables, unary operators, and polytree causal graphs described by Domshlak and Brafman (2003).", "startOffset": 159, "endOffset": 187}, {"referenceID": 6, "context": "An algorithm for the latter problem is presented by Brafman and Domshlak (2003), and the time complexity of this algorithm is O(22\u03ban2\u03ba+3), where \u03ba is the maximal in-degree of the causal graph.", "startOffset": 52, "endOffset": 80}, {"referenceID": 6, "context": "An algorithm for the latter problem is presented by Brafman and Domshlak (2003), and the time complexity of this algorithm is O(22\u03ban2\u03ba+3), where \u03ba is the maximal in-degree of the causal graph. Recall our assumption that the in-degree of the CP-net is bounded by some constant (in this case, \u03ba). This assumption is justified as the CPTs are part of the problem description, and the size of a CPT (X) is exponential in |Pa(X)|. Therefore, the complexity of the algorithm of Brafman and Domshlak (2003) on CP-nets is polynomial in the size the CPnet.", "startOffset": 52, "endOffset": 500}, {"referenceID": 6, "context": "Proof: The theorem is immediately entailed by the corresponding result for planning of Brafman and Domshlak (2003); for the proof in terms of CP-nets, see Appendix A.", "startOffset": 87, "endOffset": 115}, {"referenceID": 16, "context": "A complementary result with respect to these graphs (Domshlak, 2002b), namely recursively directed hypercubes, shows that dominance queries with respect to binary-valued, acyclic CP-nets with unbounded node in-degree may require flipping sequences of size exponential in n, where n is the number of variables in the CP-net.", "startOffset": 52, "endOffset": 69}, {"referenceID": 6, "context": "4 with respect to dominance queries remain applicable \u201cas is,\u201d because almost all of these results were shown by Brafman and Domshlak (2003) to be valid in more general setting of classical planning.", "startOffset": 113, "endOffset": 141}, {"referenceID": 19, "context": "One such application\u2014preference-driven, adaptive multimedia document presentation\u2014was recently developed at Ben-Gurion University (Domshlak et al., 2001; Gudes et al., 2002).", "startOffset": 130, "endOffset": 173}, {"referenceID": 30, "context": "One such application\u2014preference-driven, adaptive multimedia document presentation\u2014was recently developed at Ben-Gurion University (Domshlak et al., 2001; Gudes et al., 2002).", "startOffset": 130, "endOffset": 173}, {"referenceID": 32, "context": "These issues are emphasized in many papers on configuration (Freuder & O\u2019Sullivan, 2001; Haag, 1998; Junker, 1997, 2001; Soininen & Niemel\u00e4, 1998), especially when high-level configurators for specific, real-life domains are discussed (Haag, 1998).", "startOffset": 60, "endOffset": 146}, {"referenceID": 32, "context": "These issues are emphasized in many papers on configuration (Freuder & O\u2019Sullivan, 2001; Haag, 1998; Junker, 1997, 2001; Soininen & Niemel\u00e4, 1998), especially when high-level configurators for specific, real-life domains are discussed (Haag, 1998).", "startOffset": 235, "endOffset": 247}, {"referenceID": 3, "context": "A CP-net based search algorithm by Boutilier et al. (1997) was specifically designed to address this problem.", "startOffset": 35, "endOffset": 59}, {"referenceID": 3, "context": "A CP-net based search algorithm by Boutilier et al. (1997) was specifically designed to address this problem. For the description of this algorithm, as well as for analysis of its computational properties we refer the reader to Boutilier et al. (1997), Brafman and Domshlak (2001).", "startOffset": 35, "endOffset": 252}, {"referenceID": 3, "context": "A CP-net based search algorithm by Boutilier et al. (1997) was specifically designed to address this problem. For the description of this algorithm, as well as for analysis of its computational properties we refer the reader to Boutilier et al. (1997), Brafman and Domshlak (2001).", "startOffset": 35, "endOffset": 281}, {"referenceID": 43, "context": "On the surface, CP-nets are reminiscent of Bayesian networks (Pearl, 1988), which are also graphical structures capturing conditional independence assertions.", "startOffset": 61, "endOffset": 74}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations.", "startOffset": 55, "endOffset": 80}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations.", "startOffset": 55, "endOffset": 110}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities.", "startOffset": 55, "endOffset": 1007}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities. This operator measures the \u201cintensity\u201d of preference for specific values of certain variables given some fixed value for the other variables and with respect to a fixed reference point. They also define an undirected graphical structure, expected utility networks, in which u-independence is represented using the notion of node separation. Finally, recent work by Benferhat, Dubois and Prade (2001) provides a preliminary investigation of the potential of possibilistic logic in qualitative decision analysis, and more specifically in qualitative preference representation.", "startOffset": 55, "endOffset": 1504}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities. This operator measures the \u201cintensity\u201d of preference for specific values of certain variables given some fixed value for the other variables and with respect to a fixed reference point. They also define an undirected graphical structure, expected utility networks, in which u-independence is represented using the notion of node separation. Finally, recent work by Benferhat, Dubois and Prade (2001) provides a preliminary investigation of the potential of possibilistic logic in qualitative decision analysis, and more specifically in qualitative preference representation. The possibilistic approach takes utilities into account, as well as probabilities, but provides a qualitative approach to decision problems by replacing numeric preferences and probabilities with linear orderings. For discussion of this approach to utilities and preference representation, see Benferhat et al. (2001), Dubois, Godo, Prade, and Zapico (1998b), Dubois, Berre, Prade, and Sabbadin (1998a), Dubois, Prade, and Sabbadin (1997), and for related qualitative models, see Boutilier (1994), Tan and Pearl (1994).", "startOffset": 55, "endOffset": 1997}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities. This operator measures the \u201cintensity\u201d of preference for specific values of certain variables given some fixed value for the other variables and with respect to a fixed reference point. They also define an undirected graphical structure, expected utility networks, in which u-independence is represented using the notion of node separation. Finally, recent work by Benferhat, Dubois and Prade (2001) provides a preliminary investigation of the potential of possibilistic logic in qualitative decision analysis, and more specifically in qualitative preference representation. The possibilistic approach takes utilities into account, as well as probabilities, but provides a qualitative approach to decision problems by replacing numeric preferences and probabilities with linear orderings. For discussion of this approach to utilities and preference representation, see Benferhat et al. (2001), Dubois, Godo, Prade, and Zapico (1998b), Dubois, Berre, Prade, and Sabbadin (1998a), Dubois, Prade, and Sabbadin (1997), and for related qualitative models, see Boutilier (1994), Tan and Pearl (1994).", "startOffset": 55, "endOffset": 2038}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities. This operator measures the \u201cintensity\u201d of preference for specific values of certain variables given some fixed value for the other variables and with respect to a fixed reference point. They also define an undirected graphical structure, expected utility networks, in which u-independence is represented using the notion of node separation. Finally, recent work by Benferhat, Dubois and Prade (2001) provides a preliminary investigation of the potential of possibilistic logic in qualitative decision analysis, and more specifically in qualitative preference representation. The possibilistic approach takes utilities into account, as well as probabilities, but provides a qualitative approach to decision problems by replacing numeric preferences and probabilities with linear orderings. For discussion of this approach to utilities and preference representation, see Benferhat et al. (2001), Dubois, Godo, Prade, and Zapico (1998b), Dubois, Berre, Prade, and Sabbadin (1998a), Dubois, Prade, and Sabbadin (1997), and for related qualitative models, see Boutilier (1994), Tan and Pearl (1994).", "startOffset": 55, "endOffset": 2082}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities. This operator measures the \u201cintensity\u201d of preference for specific values of certain variables given some fixed value for the other variables and with respect to a fixed reference point. They also define an undirected graphical structure, expected utility networks, in which u-independence is represented using the notion of node separation. Finally, recent work by Benferhat, Dubois and Prade (2001) provides a preliminary investigation of the potential of possibilistic logic in qualitative decision analysis, and more specifically in qualitative preference representation. The possibilistic approach takes utilities into account, as well as probabilities, but provides a qualitative approach to decision problems by replacing numeric preferences and probabilities with linear orderings. For discussion of this approach to utilities and preference representation, see Benferhat et al. (2001), Dubois, Godo, Prade, and Zapico (1998b), Dubois, Berre, Prade, and Sabbadin (1998a), Dubois, Prade, and Sabbadin (1997), and for related qualitative models, see Boutilier (1994), Tan and Pearl (1994).", "startOffset": 55, "endOffset": 2118}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities. This operator measures the \u201cintensity\u201d of preference for specific values of certain variables given some fixed value for the other variables and with respect to a fixed reference point. They also define an undirected graphical structure, expected utility networks, in which u-independence is represented using the notion of node separation. Finally, recent work by Benferhat, Dubois and Prade (2001) provides a preliminary investigation of the potential of possibilistic logic in qualitative decision analysis, and more specifically in qualitative preference representation. The possibilistic approach takes utilities into account, as well as probabilities, but provides a qualitative approach to decision problems by replacing numeric preferences and probabilities with linear orderings. For discussion of this approach to utilities and preference representation, see Benferhat et al. (2001), Dubois, Godo, Prade, and Zapico (1998b), Dubois, Berre, Prade, and Sabbadin (1998a), Dubois, Prade, and Sabbadin (1997), and for related qualitative models, see Boutilier (1994), Tan and Pearl (1994).", "startOffset": 55, "endOffset": 2176}, {"referenceID": 0, "context": "Motivated by the same considerations driving our work, Bacchus and Grove (1995) and La Mura and Shoham (1999) study different notions of independence and their associated graphical representations. Both representations allow for quantitative assessments, unlike CP-nets (at least in their current form) and differ from CP-nets in the precise nature of the independence concept studied. In particular, Bacchus and Grove concentrate on the notion of conditional additive independence. Additive independence is a very strong property, requiring that the utility of an outcome be the sum of the \u201cutilities\u201d of the different variable values of the outcome. Conditional additive independence is a weaker requirement, and thus more promising in practice. Bacchus and Grove show that the conditional additive independence properties of a domain can be captured by an undirected graph where for set of nodes A,B,C, A is independent of B given C if C separates between the nodes in A and B. La Mura and Shoham (1999) define the concept of u-independence using a ceteris paribus comparison operator over utilities. This operator measures the \u201cintensity\u201d of preference for specific values of certain variables given some fixed value for the other variables and with respect to a fixed reference point. They also define an undirected graphical structure, expected utility networks, in which u-independence is represented using the notion of node separation. Finally, recent work by Benferhat, Dubois and Prade (2001) provides a preliminary investigation of the potential of possibilistic logic in qualitative decision analysis, and more specifically in qualitative preference representation. The possibilistic approach takes utilities into account, as well as probabilities, but provides a qualitative approach to decision problems by replacing numeric preferences and probabilities with linear orderings. For discussion of this approach to utilities and preference representation, see Benferhat et al. (2001), Dubois, Godo, Prade, and Zapico (1998b), Dubois, Berre, Prade, and Sabbadin (1998a), Dubois, Prade, and Sabbadin (1997), and for related qualitative models, see Boutilier (1994), Tan and Pearl (1994).", "startOffset": 55, "endOffset": 2198}, {"referenceID": 15, "context": "A number of recent papers have started to deal with this question, with some interesting insights and results (Domshlak, 2002a; Domshlak & Brafman, 2002a; Brafman & Dimopoulos, 2003; Domshlak, Rossi, Venable, & Walsh, 2003).", "startOffset": 110, "endOffset": 223}, {"referenceID": 27, "context": "This is related to the motivation underlying goal programming (Dyer, 1972; Ignizio, 1982).", "startOffset": 62, "endOffset": 89}, {"referenceID": 35, "context": "This is related to the motivation underlying goal programming (Dyer, 1972; Ignizio, 1982).", "startOffset": 62, "endOffset": 89}, {"referenceID": 4, "context": "This has been explored in the context of CP-nets with quantitative information (Boutilier et al., 2001); it remains to be seen how to use such techniques in a purely qualitative setting.", "startOffset": 79, "endOffset": 103}], "year": 2011, "abstractText": "Information about user preferences plays a key role in automated decision making. In many domains it is desirable to assess such preferences in a qualitative rather than quantitative way. In this paper, we propose a qualitative graphical representation of preferences that reflects conditional dependence and independence of preference statements under a ceteris paribus (all else being equal) interpretation. Such a representation is often compact and arguably quite natural in many circumstances. We provide a formal semantics for this model, and describe how the structure of the network can be exploited in several inference tasks, such as determining whether one outcome dominates (is preferred to) another, ordering a set outcomes according to the preference relation, and constructing the best outcome subject to available evidence.", "creator": "dvips(k) 5.86 Copyright 1999 Radical Eye Software"}}}