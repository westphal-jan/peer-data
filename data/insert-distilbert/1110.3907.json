{"id": "1110.3907", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "18-Oct-2011", "title": "AOSO-LogitBoost: Adaptive One-Vs-One LogitBoost for Multi-Class Problem", "abstract": "logitboost and its later concurrent improvement, abc - logitboost, then are both successful multi - class boosting algorithms required for classification. in this paper, we explicitly formulate the tree building at each logitboost iteration as dynamic constrained quadratic optimization. both logitboost and abc - logtiboost adopt each approximated solver to such quadratic subproblem. otherwise we thus then propose an intuitively more natural solver, i. e. the block coordinate descent algorithm, and to demonstrate that it leads to higher classification accuracy and faster convergence rate on a number of public order datasets. this simple new logitboost behaves as if it combines many one - vs - one binary classifiers adaptively, hence the name aoso - logitboost ( adaptive one - vs - one logitboost )", "histories": [["v1", "Tue, 18 Oct 2011 08:26:59 GMT  (209kb)", "https://arxiv.org/abs/1110.3907v1", null], ["v2", "Thu, 17 May 2012 19:43:06 GMT  (463kb)", "http://arxiv.org/abs/1110.3907v2", "11 pages. Extended version of an ICML2012 paper with the same title"], ["v3", "Wed, 4 Jul 2012 07:14:17 GMT  (278kb)", "http://arxiv.org/abs/1110.3907v3", "8-pages camera ready version for ICML2012"]], "reviews": [], "SUBJECTS": "stat.ML cs.AI cs.CV", "authors": ["peng sun", "mark d reid", "jie zhou"], "accepted": true, "id": "1110.3907"}, "pdf": {"name": "1110.3907.pdf", "metadata": {"source": "META", "title": "AOSO-LogitBoost: Adaptive One-Vs-One LogitBoost for Multi-Class Problem", "authors": ["Peng Sun", "Mark D. Reid", "Jie Zhou"], "emails": ["sunp08@mails.tsinghua.edu.cn", "mark.reid@anu.edu.au", "jzhou@tsinghua.edu.cn"], "sections": [{"heading": null, "text": "ar X\niv :1\n11 0.\n39 07\nv3 [\nst at\n.M L\n] 4\nIn this paper we propose techniques to address the two main difficulties of the LogitBoost setting: 1) we adopt a vector tree (i.e., each node value is vector) that enforces a sum-to-zero constraint, and 2) we use an adaptive block coordinate descent that exploits the dense Hessian when computing tree split gain and node values. Higher classification accuracy and faster convergence rates are observed for a range of public data sets when compared to both the original and the ABC-LogitBoost implementations.\nAppearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012. Copyright 2012 by the author(s)/owner(s)."}, {"heading": "1. Introduction", "text": "Boosting is successful for both binary and multi-class classification (Freund & Schapire, 1995; Schapire & Singer, 1999). Among those popular variants, we are particularly focusing on LogitBoost (Friedman et al., 1998) in this paper. Originally, LogitBoost is motivated by statistical view (Friedman et al., 1998), where boosting algorithms consists of three key components: the loss, the function model, and the optimization algorithm. In the case of LogitBoost, these are the Logit loss, the use of additive tree models, and a stage-wise optimization, respectively. There are two important factors in the LogitBoost setting. Firstly, the posterior class probability estimate must be normalised so as to sum to one in order to use the Logit loss. This leads to a coupled classifier output, i.e., the sum-to-zero classifier output. Secondly, a dense Hessian matrix arises when deriving the tree node split gain and node value fitting. It is challenging to design a tractable optimization algorithm that fully handles both these factors. Consequently, some simplification and/or approximation is needed. Friedman et al. (1998) proposes a \u201cone scalar regression tree for one class\u201d strategy. This breaks the coupling in the classifier output so that at each boosting iteration the model updating collapses to K independent regression tree fittings, where K denotes the number of classes. In this way, the sum-to-zero constraint is dropped and the Hessian is approximated diagonally.\nUnfortunately, Friedman\u2019s prescription turns out to have some drawbacks. A later improvement, ABCLogitBoost, is shown to outperform LogitBoost in terms of both classification accuracy and conver-\ngence rate (Li, 2008; 2010a). This is due to ABCLogitBoost\u2019s careful handling of the above key problems of the LogitBoost setting. At each iteration, the sum-to-zero constraint is enforced so that only K \u2212 1 scalar trees are fitted for K\u22121 classes. The remaining class \u2013 called the base class \u2013 is selected adaptively per iteration (or every several iterations), hence the acronym ABC (Adaptive Base Class). Also, the Hessian matrix is approximated in a more refined manner than the original LogitBoost when computing the tree split gain and fitting node value.\nIn this paper, we propose two novel techniques to address the challenging aspects of the LogitBoost setting. In our approach, one vector tree is added per iteration. We allow a K dimensional sum-to-zero vector to be fitted for each tree node. This permits us to explicitly formulate the computation for both node split gain and node value fitting as a K dimensional constrained quadratic optimization, which arises as a subproblem in the inner loop for split seeking when fitting a new tree. To avoid the difficulty of a dense Hessian, we propose that for each of these subproblems, only two coordinates (i.e., two classes or a class pair) are adaptively selected for updating, hence the name AOSO (Adaptive One vS One) LogitBoost. Figure 1 gives an overview of our approach. In Section 2.5 we show that first order and second order approximation of loss reduction can be a good measure for the quality of selected class pair.\nFollowing the above formulation, ABC-LogitBoost, although derived from a somewhat different framework in (Li, 2010a), can thus be shown to be a special case of AOSO-LogitBoost, but with a less flexible tree model. In Section 3.1 we compare the differences between the two approaches in detail and provide some intuition\nfor AOSO\u2019s improvement over ABC.\nThe rest of this paper is organised as follows: In Section 2 we first formulate the problem setting for LogitBoost and then give the details of our approach. In Section 3 we compare our approach to (ABC)LogitBoost. In Section 4, experimental results in terms of classification errors and convergence rates are reported on a range of public datasets."}, {"heading": "2. The Algorithm", "text": "We begin with the basic setting for the LogitBoost algorithm. ForK-class classification (K \u2265 2), consider anN example training set {xi, yi} N i=1 where xi denotes a feature value and yi \u2208 {1, . . . ,K} denotes a class label. Class probabilities conditioned on x, denoted by p = (p1, . . . , pK)\nT , are learned from the training set. For a test example with known x and unknown y, we predict a class label by using the Bayes rule: y = argmaxk pk, k = 1, . . . ,K.\nInstead of learning the class probability directly, one learns its \u201cproxy\u201d F = (F1, . . . , FK)\nT given by the so-called Logit link function:\npk = exp(Fk)\n\u2211K j=1 exp(Fj) (1)\nwith the constraint \u2211K\nk=1 Fk = 0 (Friedman et al., 1998). For simplicity and without confusion, we hereafter omit the dependence on x for F and for other related variables.\nThe F is obtained by minimizing a target function on training data:\nLoss =\nN \u2211\ni=1\nL(yi,F i), (2)\nwhere F i is shorthand for F (xi) and L(yi,F i) is the Logit loss for a single training example:\nL(yi,F i) = \u2212\nK \u2211\nk=1\nrik log pik, (3)\nwhere rik = 1 if yi = k and 0 otherwise. The probability pik is connected to Fik via (1).\nTo make the optimization of (2) feasible, a model is needed to describe how F depends on x. For example, linear model F = W Tx is used in traditional Logit regression, while Generalized Additive Model is adopted in LogitBoost:\nF (x) = \u2211M\nm=1 fm(x), (4)\nwhere each fm(x), a K dimensional sum-to-zero vector, is learned by greedy stage-wise optimization. That is, at each iteration fm(x) is added only based on F = \u2211m\u22121\nj=1 f j . Formally,\nfm(x) = argmin f\nN \u2211\ni=1\nL(yi,F i + f(xi))\ns.t. \u2211\nk\nfk(xi) = 0, i = 1, ..., N.\n(5)\nThis procedure repeats M times with initial condition F = 0. Owing to its iterative nature, we only need to know how to solve (5) in order to implement the optimization."}, {"heading": "2.1. Vector Tree Model", "text": "The f(x) in (5) is typically represented by K scalar regression trees (e.g., in LogitBoost (Friedman et al., 1998) or the Real AdaBoost.MH implementation in (Friedman et al., 1998)) or a single vector tree (e.g., the Real AdaBoost.MH implementation in (Ke\u0301gl & BusaFekete, 2009)). In this paper, we adopt a single vector tree. We further restrict that it is a binary tree (i.e., only binary splits on internal node are allowed) and the split must be vertical to coordinate axis, as in (Friedman et al., 1998) or (Li, 2010a). Formally,\nf (x) =\nJ \u2211\nj=1\ntjI(x \u2208 Rj) (6)\nwhere {Rj} J j=1 describes how the feature space is partitioned, while tj \u2208 R K with a sum-to-zero constraint is the node values/vector associated with Rj . See Figure 1 for an example."}, {"heading": "2.2. Tree Building", "text": "Solving (5) with the tree model (6) is equivalent to determining the parameters {tj , Rj} J j=1 at the m-th iteration. In this subsection we will show how this problem reduces to solving a collection of convex optimization subproblems for which we can use any numerical method. Following Friedman\u2019s LogitBoost settings, here we use Newton descent1. Also, we will show how the gradient and Hessian can be computed incrementally.\nWe begin with some shorthand notation for the node\n1We use Newtown descent as there is evidence in (Li, 2010a) that gradient descent, i.e., in Friedmans\u2019s MART (Friedman, 2001), leads to decreased classification accuracy.\nloss :\nNodeLoss(t; I) = \u2211\ni\u2208I\nL(yi,F i + t)\nt1 + . . .+ tK = 0, t \u2208 R K\n(7)\nwhere I denotes the index set of the training examples on some either internal or terminal node (i.e., those falling into the corresponding region). Minimizing (7) is the bridge to {tj , Rj} in that:\n1. To obtain {tj} with given {Rj}, we simply take the minimizer of (7):\ntj = argmin t NodeLoss(t; Ij), (8)\nwhere Ij denotes the index set for Rj .\n2. To obtain {Rj}, we recursively perform binary split until there are J-terminal nodes.\nThe key to the second point is to explicitly give the node split gain. Suppose an internal node with n training examples (n = N for the root node), we fix on some feature and re-index all the n examples according to their sorted feature values. Now we need to find the index n\u2032 with 1 < n\u2032 < n that maximizes the node gain defined as loss reduction after a division between the n\u2032-th and (n\u2032 + 1)-th examples:\nNodeGain(n\u2032) = NodeLoss(t\u2217; I)\u2212\n(NodeLoss(t\u2217L; IL) +NodeLoss(t \u2217 R; IR))\n(9)\nwhere I = {1, . . . , n}, IL = {1, . . . , n \u2032} and IR = {n\u2032+1, . . . , n}; t\u2217, t\u2217L and t \u2217 R are the minimizers of (7) with index sets I, IL and IR, respectively. Generally, this searching applies to all features. The best division resulting to largest (9) is then recorded to perform the actual node split.\nNote that (9) arises in the context of an O(N \u00d7 D) outer loop, where D is number of features. However, a na\u0308\u0131ve summing of the losses for (7) incurs an additional O(N) factor in complexity, which finally results in an unacceptable O(N2D) complexity for a single boosting iteration.\nA workaround is to use a Newton descent method for which both the gradient and Hessian can be incrementally computed. Let g, H respectively be the K \u00d7 1 gradient vector and K \u00d7K Hessian matrix at t = 0. By dropping the constant NodeLoss(0; I) that is irrelevant to t, the Taylor expansion of (7) w.r.t. t up to second order is:\nloss(t; I) = gT t+ 1\n2 tTHt\nt1 + . . .+ tK = 0, t \u2208 R K\n(10)\nBy noting the additive separability of (10) and using some matrix derivatives, we have\ng = \u2212 \u2211\ni\u2208I\ngi (11) H =\n\u2211\ni\u2208I\nHi (12)\ngi = ri \u2212 pi (13) Hi = P\u0302 \u2212 pip T i (14)\nwhere the diagonal matrix P\u0302 = diag(pi1, . . . , piK). We then use (10) to compute the approximated node loss in (9). Thanks to the additive form, both (11) and (12) can be incrementally/decrementally computed in constant time when the split searching proceeds from one training example to the next. Therefore, the computation of (10) eliminates the O(N) complexity in the na\u0308\u0131ve summing of losses.2"}, {"heading": "2.3. Properties of Approximated Node Loss", "text": "To minimise (10), we give some properties for (10) that should be taken into account when seeking a solver. We begin with the sum-to-zero constraint. The probability estimate pk in the Logit loss (3) must be non-zero and sum-to-one, which is ensured by the link function (1). Such a link, in turn, means that pk is unchanged by adding an arbitrary constant to each component in F . As a result, the single example loss (3) is invariant to moving it along an all-1 vector 1. That is,\nL(yi,F i + c1) = L(yi,F i), (15)\nwhere c is an arbitrary real constant (Note that 1 is, coincidentally, the orthogonal complement to the space defined by sum-to-zero constraint). This property also carries over to the approximated node loss (10):\nProperty 1 loss(t; I) = loss(t+ c1; I).\nThis is obvious by noting the additive separability in (10), as well as that gTi 1 = 0, 1\nTH i1 = 0 holds since pi is sum-to-one.\nFor the Hessian, we have rank(H) \u2264 rank(H i) by noting the additive form in (11). In (Li, 2010a) it is shown that detHi = 0 by brute-force determinant expansion. Here we give a stronger property:\n2In Real AdaBoost.MH, such a second order approximation is not necessary (although possible, cf. (Zou et al., 2008)). Due to the special form of the exponential loss and the absence of a sum-to-zero constraint, there exists analytical solution for the node loss (7) by simply setting the derivative to 0. Here also, the computation can be incremental/decremental. Since the loss design and AdaBoost.MH are not our main interests, we do not discuss this further.\nProperty 2 Hi is a positive semi-definite matrix such that 1) rank(H i) = \u03ba\u2212 1, where \u03ba is the number of non-zero elements in pi; 2) 1 is the eigenvector for eigenvalue 0.\nThe proof can be found in this paper\u2019s extended version (Sun et al., 2012).\nThe properties shown above indicate that 1) H is singular, so that unconstrained Newton descent is not applicable here, and 2) rank(H) could be as high as K \u2212 1, which prohibits the application of the standard fast quadratic solver designed for low rank Hessians. In the following we propose to address this problem via block coordinate descent, a technique that has been successfully used in training SVMs (Bottou & Lin, 2007)."}, {"heading": "2.4. Block Coordinate Descent", "text": "For the variable t in (10), we only choose two (the least possible number due to the sum-to-zero constraint) coordinates, i.e., a class pair, to update while keeping the others fixed. Suppose we have chosen the rth and the s-th coordinate (how to do so is deferred to next subsection). Let tr = t and ts = \u2212t be the free variables (such that tr + ts = 0) and tk = 0 for k 6= r, k 6= s. Plugging these into (10) yields an unconstrained one dimensional quadratic problem with regards to the scalar variable t:\nloss(t) = gT t+ 1\n2 ht2 (16)\nwhere the gradient and Hessian collapse to scalars:\ng = \u2212 \u2211\ni\u2208I\n((ri,r \u2212 pi,r)\u2212 (ri,s \u2212 pi,s)) (17)\nh = \u2211\ni\u2208I\n(pi,r(1 \u2212 pi,r) + pi,s(1\u2212 pi,s) + 2pi,rpi,s) ,\n(18) To this extent, we are able to obtain the analytical expression for the minimizer and minimum of (16):\nt\u2217 = argmin t\nloss(t) = \u2212 g\nh (19)\nloss(t\u2217) = \u2212 g2\n2h (20)\nby noting the non-negativity of (18).\nBased on (19), node vector (8) can be approximated as\ntmj =\n\n \n \n+(\u2212g/h) k = r\n\u2212(\u2212g/h) k = s\n0 otherwise\n(21)\nwhere g and h are respectively computed by using (17) and (18) with index set Imj . Based on (20), the node gain (9) can be approximated as\nNodeGain(n\u2032) = g2L 2hL + g2R 2hR \u2212 g2 2h , (22)\nwhere g (or gL, gR) and h (or hL, hR) are computed by using (17) and (18) with index set I (or IL, IR)."}, {"heading": "2.5. Class Pair Selection", "text": "In (Bottou & Lin, 2007) two methods for selecting (r, s) are proposed. One is based on a first order approximation. Let tr and ts be the free variables and the rest be fixed to 0. For a t with sufficiently small fixed length, let tr = \u01eb and ts = \u2212\u01eb where \u01eb > 0 is some small enough constant. The first order approximation of (10) is:\nloss(t) \u2248 loss(0) + gT t = loss(0)\u2212 \u01eb(\u2212gr \u2212 (\u2212gs)) (23) It follows that the indices r, s resulting in largest decrement to (23) are:\nr = argmax k {\u2212gk}\ns = argmin k\n{\u2212gk} . (24)\nAnother method that can be derived in a similar way takes into account the second order information:\nr = argmax k {\u2212gk}\ns = argmax k\n{\n(gr \u2212 gk) 2\nhrr + hkk \u2212 2hrk\n} , (25)\nBoth methods are O(K) procedures that are better than the K \u00d7 (K \u2212 1)/2 na\u0308\u0131ve enumeration. However, in our implementation we find that (25) achieves better results for AOSO-LogitBoost.\nPseudocode for AOSO-LogitBoost is given in Algorithm 1."}, {"heading": "3. Comparison to (ABC-)LogitBoost", "text": "In this section we compare the derivations of LogitBoost and ABC-LogitBoost and provide some intuition for observed behaviours in the experiments in Section 4."}, {"heading": "3.1. ABC-LogitBoost", "text": "To solve (5) with a sum-to-zero constraint, ABCLogitBoost uses K \u2212 1 independent trees:\nfk =\n{\n\u2211\nj tjkI(x \u2208 Rjk) k 6= b\n\u2212 \u2211 l 6=b fl k = b. (26)\nAlgorithm 1 AOSO-LogitBoost. v is shrinkage factor that controls learning rate.\n1: Fik = 0, k = 1, . . . ,K, i = 1, . . . , N 2: for m = 1 to M do 3: pi,k =\nexp(Fi,k)\u2211 K j=1 exp(Fi,j) , k = 1, . . . ,K, i = 1, . . . , N .\n4: Obtain {Rmj} J j=1 by recursive region partition.\nNode split gain is computed as (22), where the class pair (r, s) is selected using (25) .\n5: Compute {tmj} J j=1 by (21), where the class pair\n(r, s) is selected using (25) .\n6: Fi = Fi + v \u2211J\nj=1 tmjI(xi \u2208 Rmj), i = 1, . . . , N .\n7: end for\nIn (Li, 2010a), the so-called base class b is selected by exhaustive search per iteration, i.e., trying all possible b, which involves growing K(K \u2212 1) trees. To reduce the time complexity, Li also proposed other methods. In (Li, 2010c), b is selected only every several iterations, while in (Li, 2008), b is, intuitively, set to be the class that leads to largest loss reduction at last iteration.\nIn ABC-LogitBoost the sum-to-zero constraint is explicitly considered when deriving the node value and the node split gain for the scalar regression tree. Indeed, they are the same as (21) and (22) in this paper, although derived using a slightly different motivation. In this sense, ABC-LogitBoost can be seen as a special form of the AOSO-LogitBoost since: 1) For each tree, the class pair is fixed for every node in ABC, while it is selected adaptively in AOSO, and 2) K \u2212 1 trees are added per iteration in ABC (using the same set of probability estimates {pi} N i=1), while only one tree is added per iteration by AOSO (and {pi} N i=1 are updated as soon as each tree is added).\nSince two changes are made to ABC-LogitBoost, an immediate question is what happens if we only make one? That is, what happens if one vector tree is added per iteration for a single class pair selected only for the root node and shared by all other tree nodes, as in ABC, but the {pi} N i=1 are updated as soon as a tree is added, as in AOSO. This was tried but unfortunately, degraded performance was observed for this combination so the results are not reported here.\nFrom the above analysis, we believe the more flexible model (as well as the model updating strategy) in AOSO is what contributes to its improvement over ABC, as seen section 4)."}, {"heading": "3.2. LogitBoost", "text": "In the original LogitBoost (Friedman et al., 1998), the Hessian matrix (14) is approximated diagonally. In this way, the f in (5) is expressed by K uncoupled scalar tress:\nfk = \u2211\nj\ntjkI(x \u2208 Rjk), k = 1, 2, . . . ,K (27)\nwith the gradient and Hessian for computing node value and node split gain given by:\ngk = \u2212 \u2211\ni\u2208I\n(ri,k \u2212 pi,k), hk = \u2212 \u2211\ni\u2208I\npi,k(1\u2212 pi,k).\n(28) Here we use the subscript k for g and h to emphasize the k-th tree is built independently to the other K\u2212 1 trees (i.e., the sum-to-zero constraint is dropped). Although this simplifies the mathematics, such an aggressive approximation turns out to harm both classification accuracy and convergence rate, as shown in Li\u2019s experiments (Li, 2009)."}, {"heading": "4. Experiments", "text": "In this section we compare AOSO-LogitBoost with ABC-LogitBoost, which was shown to outperform original LogitBoost in Li\u2019s experiments (Li, 2010a; 2009). We test AOSO on all the datasets used in (Li, 2010a; 2009), as listed in Table 1. In the top section are UCI datasets and in the bottom are Mnist datasets with many variations (see (Li, 2010b)\nfor detailed descriptions).3 To exhaust the learning ability of (ABC-)LogitBoost, Li let the boosting stop when either the training converges (i.e., the loss (2) approaches 0, implemented as \u2264 10\u221216) or a maximum number of iterations, M , is reached. Test errors at last iteration are simply reported since no obvious over-fitting is observed. By default, M = 10000, while for those large datasets (Covertype290k, Poker525k, Pokder275k, Poker150k, Poker100k) M = 5000 (Li, 2010a; 2009). We adopt the same criteria, except that our maximum iterations MAOSO = (K\u22121)\u00d7MABC, where K is the number of classes. Note that only one tree is added at each iteration in AOSO, while K \u2212 1 are added in ABC. Thus, this correction compares the same maximum number of trees for both AOSO and ABC.\nThe most important tuning parameters in LogitBoost are the number of terminal nodes J , and the shrinkage factor v. In (Li, 2010a; 2009), Li reported results of (ABC-)LogitBoost for a number of J-v combinations. We report the corresponding results for AOSOLogitBoost for the same combinations. In the following, we intend to show that for nearly all J-v combinations, AOSO-LogitBoost has lower classification error and faster convergence rates than ABC-LogitBoost."}, {"heading": "4.1. Classification Errors", "text": "Table 2 shows results of various J-v combinations for a representative datasets. Results on more datasets can be found in this paper\u2019s extended version (Sun et al., 2012).\nIn Table 3 we summarize the results for all datasets. In (Li, 2010a), Li reported that ABC-LogitBoost is insensitive to J , v on all datasets except for Poker25kT1\n3Code and data are available at http://ivg.au.tsinghua.edu.cn/index.php?n=People.PengSun\nand Poker25kT2. Therefore, Li summarized classification errors for ABC simply with J = 20 and v = 0.1, except that on Poker25kT1 and Poker25kT2 errors are reported by using the other\u2019s test set as a validation set. Based on the same criteria we summarize AOSO in the middle panel of Table 3 where the test errors as well as the improvement relative to ABC are given. In the right panel of Table 3 we provide the comparison for the best results achieved over all J-v combinations when the corresponding results for ABC are available in (Li, 2010a) or (Li, 2009).\nWe also tested the statistical significance between AOSO and ABC. We assume the classification error rate is subject to some Binomial distribution. Let z denote the number of errors and n the number of tests, then the estimate of error rate p\u0302 = z/n and its variance is p\u0302(1\u2212 p\u0302)/n. Subsequently, we approximate the Binomial distribution by a Gaussian distribution and perform a hypothesis test. The p-values are reported in Table 3.\nFor some problems, we note LogitBoost (both ABC\nand AOSO) outperforms other state-of-the-art classifier such as SVM or Deep Learning. (e.g., the test error rate on Poker is 40% for SVM and < 10% for both ABC and AOSO (even lower than ABC); on M-Image it is 16.15% for DBN-1, 8.54% for ABC and 8.33% for AOSO). See this paper\u2019s extended version (Sun et al., 2012) for details. This shows that the AOSO\u2019s improvement over ABC does deserve the efforts."}, {"heading": "4.2. Convergence Rate", "text": "Recall that we stop the boosting procedure if either the maximum number of iterations is reached or it converges (i.e. the loss (2) \u2264 10\u221216). The fewer trees added when boosting stops, the faster the convergence and the lower the time cost for either training or test-\ning. We compare AOSO with ABC in terms of the number of trees added when boosting stops for the results of ABC available in (Li, 2010a; 2009). Note that simply comparing number of boosting iterations is unfair to AOSO, since at each iteration only one tree is added in AOSO and K \u2212 1 in ABC.\nResults are shown in Table 4 and Table 5. Except for when J-v is too small, or particularly difficult datasets where both ABC and AOSO reach maximum iterations, we found that trees needed in AOSO are typically only 50% to 80% of those in ABC.\nFigure 2 shows plots for test classification error vs. iterations in both ABC and AOSO and show that AOSO\u2019s test error decreases faster. More plots for AOSO can be found in this paper\u2019s extended version (Sun et al., 2012)."}, {"heading": "5. Conclusions", "text": "We present an improved LogitBoost, namely AOSOLogitBoost, for multi-class classification. Compared with ABC-LogitBoost, our experiments suggest that our adaptive class pair selection technique results in lower classification error and faster convergence rates."}, {"heading": "Acknowledgments", "text": "We appreciate Ping Li\u2019s inspiring discussion and generous encouragement. Comments from NIPS2011 and ICML2012 anonymous reviewers helped improve the readability of this paper. This work was supported by National Natural Science Foundation of China (61020106004, 61021063, 61005023), The National Key Technology R&D Program (2009BAH40B03). NICTA is funded by the Australian Government as represented by the Department of Broadband, Communications and the Digital Economy and the ARC\nthrough the ICT Centre of Excellence program."}], "references": [{"title": "Support vector machine solvers", "author": ["L. Bottou", "Lin", "C.-J"], "venue": "Large Scale Kernel Machines,", "citeRegEx": "Bottou et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Bottou et al\\.", "year": 2007}, {"title": "A desicion-theoretic generalization of on-line learning and an application to boosting", "author": ["Y. Freund", "R. Schapire"], "venue": "In Computational learning theory,", "citeRegEx": "Freund and Schapire,? \\Q1995\\E", "shortCiteRegEx": "Freund and Schapire", "year": 1995}, {"title": "Greedy function approximation: a gradient boosting machine", "author": ["J. Friedman"], "venue": "The Annals of Statistics,", "citeRegEx": "Friedman,? \\Q2001\\E", "shortCiteRegEx": "Friedman", "year": 2001}, {"title": "Additive logistic regression: a statistical view of boosting", "author": ["J. Friedman", "T. Hastie", "R. Tibshirani"], "venue": "Annals of Statistics,", "citeRegEx": "Friedman et al\\.,? \\Q1998\\E", "shortCiteRegEx": "Friedman et al\\.", "year": 1998}, {"title": "Boosting products of base classifiers", "author": ["B. K\u00e9gl", "R. Busa-Fekete"], "venue": "In Proceedings of the 26th Annual International Conference on Machine Learning,", "citeRegEx": "K\u00e9gl and Busa.Fekete,? \\Q2009\\E", "shortCiteRegEx": "K\u00e9gl and Busa.Fekete", "year": 2009}, {"title": "Adaptive base class boost for multi-class classification", "author": ["P. Li"], "venue": "Arxiv preprint arXiv:0811.1250,", "citeRegEx": "Li,? \\Q2008\\E", "shortCiteRegEx": "Li", "year": 2008}, {"title": "Abc-logitboost for multi-class classification", "author": ["P. Li"], "venue": "Arxiv preprint arXiv:0908.4144,", "citeRegEx": "Li,? \\Q2009\\E", "shortCiteRegEx": "Li", "year": 2009}, {"title": "Robust logitboost and adaptive base class (abc) logitboost", "author": ["P. Li"], "venue": "In Conference on Uncertainty in Artificial Intelligence,", "citeRegEx": "Li,? \\Q2010\\E", "shortCiteRegEx": "Li", "year": 2010}, {"title": "An empirical evaluation of four algorithms for multiclass classification: Mart, abc-mart, robust logitboost, and abc-logitboost", "author": ["P. Li"], "venue": "Arxiv preprint arXiv:1001.1020,", "citeRegEx": "Li,? \\Q2010\\E", "shortCiteRegEx": "Li", "year": 2010}, {"title": "Fast abc-boost for multi-class classification", "author": ["P. Li"], "venue": "Arxiv preprint arXiv:1006.5051,", "citeRegEx": "Li,? \\Q2010\\E", "shortCiteRegEx": "Li", "year": 2010}, {"title": "Improved boosting algorithms using confidence-rated predictions", "author": ["R. Schapire", "Y. Singer"], "venue": "Machine learning,", "citeRegEx": "Schapire and Singer,? \\Q1999\\E", "shortCiteRegEx": "Schapire and Singer", "year": 1999}, {"title": "New multicategory boosting algorithms based on multicategory fisher-consistent losses", "author": ["H. Zou", "J. Zhu", "T. Hastie"], "venue": "The Annals of Applied Statistics,", "citeRegEx": "Zou et al\\.,? \\Q2008\\E", "shortCiteRegEx": "Zou et al\\.", "year": 2008}], "referenceMentions": [{"referenceID": 3, "context": "Among those popular variants, we are particularly focusing on LogitBoost (Friedman et al., 1998) in this paper.", "startOffset": 73, "endOffset": 96}, {"referenceID": 3, "context": "Originally, LogitBoost is motivated by statistical view (Friedman et al., 1998), where boosting algorithms consists of three key components: the loss, the function model, and the optimization algorithm.", "startOffset": 56, "endOffset": 79}, {"referenceID": 2, "context": "Among those popular variants, we are particularly focusing on LogitBoost (Friedman et al., 1998) in this paper. Originally, LogitBoost is motivated by statistical view (Friedman et al., 1998), where boosting algorithms consists of three key components: the loss, the function model, and the optimization algorithm. In the case of LogitBoost, these are the Logit loss, the use of additive tree models, and a stage-wise optimization, respectively. There are two important factors in the LogitBoost setting. Firstly, the posterior class probability estimate must be normalised so as to sum to one in order to use the Logit loss. This leads to a coupled classifier output, i.e., the sum-to-zero classifier output. Secondly, a dense Hessian matrix arises when deriving the tree node split gain and node value fitting. It is challenging to design a tractable optimization algorithm that fully handles both these factors. Consequently, some simplification and/or approximation is needed. Friedman et al. (1998) proposes a \u201cone scalar regression tree for one class\u201d strategy.", "startOffset": 74, "endOffset": 1004}, {"referenceID": 5, "context": "gence rate (Li, 2008; 2010a).", "startOffset": 11, "endOffset": 28}, {"referenceID": 3, "context": "with the constraint \u2211K k=1 Fk = 0 (Friedman et al., 1998).", "startOffset": 34, "endOffset": 57}, {"referenceID": 3, "context": ", in LogitBoost (Friedman et al., 1998) or the Real AdaBoost.", "startOffset": 16, "endOffset": 39}, {"referenceID": 3, "context": "MH implementation in (Friedman et al., 1998)) or a single vector tree (e.", "startOffset": 21, "endOffset": 44}, {"referenceID": 3, "context": ", only binary splits on internal node are allowed) and the split must be vertical to coordinate axis, as in (Friedman et al., 1998) or (Li, 2010a).", "startOffset": 108, "endOffset": 131}, {"referenceID": 2, "context": ", in Friedmans\u2019s MART (Friedman, 2001), leads to decreased classification accuracy.", "startOffset": 22, "endOffset": 38}, {"referenceID": 11, "context": "(Zou et al., 2008)).", "startOffset": 0, "endOffset": 18}, {"referenceID": 5, "context": "In (Li, 2010c), b is selected only every several iterations, while in (Li, 2008), b is, intuitively, set to be the class that leads to largest loss reduction at last iteration.", "startOffset": 70, "endOffset": 80}, {"referenceID": 3, "context": "In the original LogitBoost (Friedman et al., 1998), the Hessian matrix (14) is approximated diagonally.", "startOffset": 27, "endOffset": 50}, {"referenceID": 6, "context": "Although this simplifies the mathematics, such an aggressive approximation turns out to harm both classification accuracy and convergence rate, as shown in Li\u2019s experiments (Li, 2009).", "startOffset": 173, "endOffset": 183}, {"referenceID": 6, "context": "Dash \u201d-\u201d means unavailable in (Li, 2010a)(Li, 2009).", "startOffset": 41, "endOffset": 51}, {"referenceID": 6, "context": "In the right panel of Table 3 we provide the comparison for the best results achieved over all J-v combinations when the corresponding results for ABC are available in (Li, 2010a) or (Li, 2009).", "startOffset": 183, "endOffset": 193}], "year": 2012, "abstractText": "This paper presents an improvement to model learning when using multi-class LogitBoost for classification. Motivated by the statistical view, LogitBoost can be seen as additive tree regression. Two important factors in this setting are: 1) coupled classifier output due to a sum-to-zero constraint, and 2) the dense Hessian matrices that arise when computing tree node split gain and node value fittings. In general, this setting is too complicated for a tractable model learning algorithm. However, too aggressive simplification of the setting may lead to degraded performance. For example, the original LogitBoost is outperformed by ABC-LogitBoost due to the latter\u2019s more careful treatment of the above two factors. In this paper we propose techniques to address the two main difficulties of the LogitBoost setting: 1) we adopt a vector tree (i.e., each node value is vector) that enforces a sum-to-zero constraint, and 2) we use an adaptive block coordinate descent that exploits the dense Hessian when computing tree split gain and node values. Higher classification accuracy and faster convergence rates are observed for a range of public data sets when compared to both the original and the ABC-LogitBoost implementations. Appearing in Proceedings of the 29 th International Conference on Machine Learning, Edinburgh, Scotland, UK, 2012. Copyright 2012 by the author(s)/owner(s).", "creator": "LaTeX with hyperref package"}}}