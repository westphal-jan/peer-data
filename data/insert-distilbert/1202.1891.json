{"id": "1202.1891", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "9-Feb-2012", "title": "Hyper heuristic based on great deluge and its variants for exam timetabling problem", "abstract": "today, university timetabling problems are occurred annually and they are often hard and time consuming to solve. this paper describes hyper heuristics ( hh ) method based on great universal deluge ( gd ) and its variants for solving large, highly constrained timetabling problems from different constraint domains. generally, in hyper heuristic framework, there are sometimes two main stages : heuristic selection and move acceptance. this paper emphasizes on the latter stage to develop hyper heuristic ( hh ) framework. the strong main contribution of this paper is that great deluge ( stylized gd ) and define its variants : flex deluge ( fd ), ultra non - linear ( nlgd ), extended great deluge ( egd ) are used as move acceptance method in linear hh by combining reinforcement learning ( dynamic rl ). these hh methods are tested on exam benchmark timetabling problem and best results simulations and comparison analysis are reported.", "histories": [["v1", "Thu, 9 Feb 2012 05:51:18 GMT  (567kb)", "http://arxiv.org/abs/1202.1891v1", null]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ei shwe sin", "nang saing moon kham"], "accepted": false, "id": "1202.1891"}, "pdf": {"name": "1202.1891.pdf", "metadata": {"source": "CRF", "title": null, "authors": ["GREAT DELUGE", "Ei Shwe Sin", "Saing Moon Kham"], "emails": ["eishwe.ucsy@gmail.com", "moonkhamucsy@gmail.com"], "sections": [{"heading": null, "text": "Today, University Timetabling problems are occurred annually and they are often hard and\ntime consuming to solve. This paper describes Hyper Heuristics (HH) method based on Great Deluge (GD) and its variants for solving large, highly constrained timetabling problems from different domains. Generally, in hyper heuristic framework, there are two main stages: heuristic selection and move acceptance. This paper emphasizes on the latter stage to develop Hyper Heuristic (HH) framework. The main contribution of this paper is that Great Deluge (GD) and its variants: Flex Deluge(FD), Nonlinear(NLGD), Extended Great Deluge(EGD) are used as move acceptance method in HH by combining Reinforcement learning (RL).These HH methods are tested on exam benchmark timetabling problem and best results and comparison analysis are reported.\nKEYWORDS\nHyper Heuristic, Great Deluge, Exam Timetabling Problem"}, {"heading": "1. INTRODUCTION", "text": "Today, because of being critical in education sectors, most of the university administrators are trying to get more enrolment of the student and they have to be very careful to increase in student\u2019s stratifications. As a result, they are very careful to solve university problem. In fact, it represents the difficult optimization problem. As the difficulty of the problem, their importance in practice and inherent scientific challenge increases, they have been widely investigated across both the operational research and the artificial intelligence community. . It can be classified into exam timetabling problem and course timetabling problem. In this paper, exam timetabling problem (ETP) is used as the test bed for the proposed three HH methods.\nThe exam timetabling problem is to assign a number of exams to a number of potential time periods or slots by taking into account to satisfy the several constraints. Several approaches have been conducted with various methodologies being applied to attempt to produce better quality exam timetables. There are a lot of researchers and their publications in the literature. For more detailed information about examination timetabling, it can be found in [2, 16, and 18].\nThere are also varieties of timetabling problem classes on which variety of approaches such as sequential method, cluster methods, constraint-based methods and meta-heuristics are used. Moreover, there are a large number of Meta heuristics for solving an examination timetabling problem. However, these methods have some issues such as parameter tuning and they are not capable of dealing with other different problems. As a result, the current methods being applied\nto exam timetabling are hyper heuristic (HH). Hyper Heuristic is an emerged search technique for the purpose to raise the generality [7]. Early research works on hyper heuristic focused on the development of advanced strategies for choosing the heuristics to be applied at different points of the search [3]. Likewise, researchers have proposed different acceptance criteria to drive selection of low level heuristics within a hyper heuristic framework. For instance, a Monte Carlo acceptance criterion is used by Ayob and Kendall in [6] while the great deluge acceptance criterion is used by Kendall and Mohamad in [7]. Due to the success of the great deluge and its variants, in this paper, we use them as move acceptance method to find out whether they can support the good quality solutions for the Toronto benchmark exam timetabling problem or not.\nThe rest of the paper is organized as follows: the Section 2 reviews the previous methods that are related our proposed system while Section 3 describes the exam timetabling problem including constraints. In Section 4, the proposed move acceptance methods are presented. The experiment results and analysis are shown in the Section 5. Finally, the conclusion is shown at the Section 6."}, {"heading": "2. RELATED WORKS", "text": "Normally, a hyper heuristic can conduct with a single point or multi-point search. There are two main stages in a single iteration of a hyper heuristic method .They are heuristic selection and movement acceptance. In this paper, the second stage is emphasized. In general, the movement acceptance can be deterministic or nondeterministic. There are many methods such as Great Deluge (GD), ACO algorithm and simulated annealing methods are used as move acceptance criteria in hyper heuristic because of their very popularities. Therefore, a brief review of GD and its variants is made in this paper.\nBykov Y. proposed the time-predefined great deluge algorithm and Trajectory base search to exam timetabling in 2003 [19] and Edmund K. Burke and Yuri Bykov made an extension of the great deluge algorithm (which they called \u201cFlex-Deluge\u201d) where the acceptance of uphill moves depends on a \u201cflexibility\u201d coefficient, for solving exam timetabling problem in 2006 . Good results were presented and they suggested that the flex deluge method is relatively higher effective in the large-scale problems [8].\nIn 2007, C. Pramodh and V. Ravi also proposed four variants of Modified Great Deluge Algorithm based Auto Associative Neural Network (MGDAAANN) and worked on three different banks data sets [4]. Likewise, Bilgin et al. also reported that a simple random-great deluge based hyper heuristic was the second best after choice function-simulated annealing, considering the average performance of all hyper heuristic over a set of examination timetabling problem[1]. For course timetabling problem, non linear great deluge algorithm (NLGD) was proposed by Landa Silva and Obit. That method produced new best in 4 out of 11 course timetabling problem instances of datasets [14]. In addition , McMullan proposed an extended great deluge algorithm(EGD) for university course timetabling , which allows re-heating similar to simulated annealing, and found new best results for the 5 medium instances. Moreover, in 2009, the EGD algorithm is also investigated and made a comparison with the first winner, Tomas Muller in the 2nd International Timetabling Competition (ITC2007). And it seems that EGD is comparable to existing state of the art techniques, and form previous application to other data sets and a different problem domain (course timetabling)[3].\nIn 2010, Nabil Nahas , Mustapha Nourelfath and Daoud Ait-Kadi have proposed the Iterated great Deluge heuristic to implement for the dynamic facility layout problem(DFLP) . It consists of two main steps. The objective of the first step is to find a local optimum solution by EGD and the second step is a loop that allows the search process to alternate between diversification and intensification [18]. Likewise, in 2010, Ender Ozcan et al. proposed a hyper heuristic system by\nusing reinforcement learning in heuristic selection and great deluge in move acceptance method and also achieved the comparative results with other HH methods in the literature [9]. By following this idea, we have already proposed to employ the Extended Great Deluge (EGD) as move acceptance method to make a decision whether to accept or reject a resultant solution in RL based HH framework. Therefore, from these well-known literature reviews and experiences, now, we would like to do another contribution by making comparison and more analysis about the GD and its other variants in HH framework."}, {"heading": "3. DESCRIPTION OF THE EXAM TIMETABLING PROBLEM", "text": "The university exam timetabling problem can be defined and described in many ways. The basic way to represent to it is graph model .Mathematical model can also be used. In a more formal way, the timetabling literature defines two types of constraints. Hard Constraints are the constraints that must be satisfied at all times. Soft Constraints are not critical but their satisfaction is beneficial to students and/or the institution. Typically one cannot satisfy all soft constraints thus there is a need for a performance function measuring the degree of satisfaction of these constraints [3]. The primary hard and soft constraints in exam timetabling problem can be found in [2]. Among them, the following table shows the hard and soft constraints are used in this paper.\nIn addition, the problem can be defined with the terms shown in the table 2.\nC=(cij)n*n The conflict matrix; where each element (denoted by cij where i, j) is the number of students that have to take\nboth exams i and j. This is a symmetrical matrix of size N, where diagonal element cii equal the number of students who have taken exam i.\nIn our system, we use not only the conflict matrix but also the binary matrix to ensure HC1 and HC3. The objective is to schedule all of the exams into time slots, while minimizing the average total cost per student. The following function is used to calculate the average cost per student.\ns\nceew n\ni ijjii   1 |)(|\n(1)\nIn equation, wi is the weight that represents the importance of scheduling exams with common students i timeslots apart , where, w(1)=16, w(2)=8 w(3)=4,w(4)=2 and w(5)=1, i.e. the smaller the distance between periods the higher the weight allocated. Note for n>5, w (n) =0. For example, if a student has two consecutive examinations (i.e. no free time between them) then the weight value of 16 is assigned. If a student has two consecutive exams with a free timeslot in between then a value 8 is assigned and so on. The value of cij is the number of students common to both examinations. The example of conflict matrix is presented in the following figure 1. In the figure , the value 3 of c11 means that there are 3 students who takes the exam E1 and the value 1 of c12 means that there is 1 conflict student who will take not only the exam E1 but also exam E2. This conflict matrix is also symmetric."}, {"heading": "4. PROPOSED GD AND ITS VARIANTS FOR MOVE ACCEPTANCE IN HH METHODS", "text": "By using reinforcement learning in the first stage of HH and the variants of GD are used as move acceptance method, the three hyper heuristic systems such as: RL_EGD, RL_NLGD and RL_FD are discussed in this section. Firstly, we present how to produce an initial solution and its representation and the low level heuristic which are used in these proposed systems. And then, the analysis and comparison of these three HH systems are described."}, {"heading": "4.1. Low Level Heuristic and Initial Solution", "text": "To get the final optimized solutions, it also totally depends on the set of heuristics it can be chosen from. Also, due to the performance changes of a number of heuristics over a search space, it is not easy to find a heuristic that always produces the best decisions. They are heuristics that allow movement through a solution space and that require domain knowledge and are problem dependent. Each heuristic creates its own heuristic search space that is part of the solution search space. There are many low level heuristics (LLH) in the literature, for example: mutational heuristic, ruin or recreate heuristic and so on. For low level heuristic module, the following table is presented the low level heuristics used in this paper.\nThe first heuristic is one of the graph colourings heuristic and which is used to create a feasible initial solution in this paper. Generally, it is important to have an easy and quick way of generating an initial solution. Note that it is not necessary though that initial solution should be completely feasible. However, it is preferred to be as feasible as possible because the quality of initial solution would affect the final solution. Therefore, in this paper, completely feasible solution is produced by using (LE) heuristic. The examination with the largest student enrolment is selected and kept in the vector. And then another exams which are not conflict with the exam in the vector, are added to that vector. This process is repeated until the required capacity for exams in the vector is less than the total capacity and unscheduled exam list is empty. Finally, this exam vector which satisfied all hard constraints is assigned to the timeslot sequentially. For the solution representation; there are two forms of assignment such as:\n Exam-Timeslot assignment\n Exam- Classroom assignment. In this paper, the first one is used to represent of the solution. By taking the advantages of HH method, to produce the feasible solution of all data instances is the aim of this paper. Moreover, one of the contributions of this paper is that the average timeslot per exam is also used to be balance in exam-timeslot assignment. Otherwise, many exams are assigned to a timeslot whereas few exams are assigned in another timeslot.\nThe rest four low level heuristics from the table 3 are used in the reinforcement learning process to improve the solution to get the optimal solution which meets the objective. These heuristics are also called the slot move in [2]. The following figure shows the swapping a set of assigned exams in two distinct timeslot as an example. In figure, the exams e2, e3, e5 are assigned\ntimeslot 5 whereas the exams e4 and e1 are assigned in timeslot 2. After the heuristic, ST-KC has been applied; the set of exams assigned in each timeslot will be changed."}, {"heading": "4.2. Reinforcement Learning", "text": "For the heuristic selection process in hyper heuristics, machine learning techniques are vital to make the right choices. Learning can be achieved in an offline or online manner. An online learning hyper heuristic learns through the feedback obtained during the search process while solving a given problem. In addition, it is better than offline method. Most of the existing online learning hyper heuristic incorporates reinforcement learning (RL). It is a sub-field of machine learning, represents an important direction for research in Artificial Intelligence [9]. RL is a framework for learning an optimal policy of a task from trials. It requires less a priori knowledge. Furthermore, it is successfully applied to scheduling, control, game theory and so on. However, the quality of solution obtained by using RL is not satisfactory in many times. However, EGD can control to make a decision whether it is accepts or rejects, after the chosen heuristic has been applied to initial solution. In this paper, not only a simple P: 1-N: 1(Additive adaption-Negative adaption) strategy to increase and decrease the utility value and but also maximum utility method are used for RL. For the parameter setting for lower bound and upper bound of utility values in RL, we follow the reference [9] and the values can be seen at the Section 5."}, {"heading": "4.3. Great Deluge (GD) and its variant", "text": "The Great Deluge algorithm (GD) is a genetic algorithm applied to optimization problems. It is similar in many ways to the hill-climbing and simulated annealing algorithms. In GD, the water level is set to a value higher than the expected penalty of the best solution at the start of the search. Then the water level is decreased in a linear fashion during the search until it reaches a value of zero [19]. It is a well known acceptance method proposed by (Dueck; 1993, Burke et al., 2003). There are many variants form of GD in the literature such as NLGD, EGD and FD. They are discussed in the next section in detail."}, {"heading": "4.3.1. Extended Great Deluge", "text": "In fact, the concept of EGD algorithm is quite similar with the hyper heuristic method. As far as the author knows, it has been considered first time as move acceptance for hyper heuristic. It has advantages to require the tuning of a few input parameters that can represent the search time. It can provide a wider test with the hidden data sets for consistency in the approaches. Moreover, it can be interested to run all techniques at some future point with further hidden data sets. It is also proved to be both robust and general. Because of these advantages, it has been successfully\napplied to many optimization problems such as buffer allocation problem, redundancy allocation problem and so on.\nTherefore, in this paper, it is investigated to make further improvement in hyper heuristic or not. The standard GDA has been extended by adding reheat mechanism, step 13 in figure 1, similar to that employed with simulated annealing in timetabling. The aim of this approach is to both improve the speed at which an optimal solution can be found and at the same time utilize the benefits of this technique in avoiding the trap of local optima. In addition, the Great Deluge generally can cause the continuous lack of improvement, which means the final solution is same with the initial after the complete execution, which can lead to RL to select only one heuristic repeatedly. Rather than terminating, the extended approach employs reheating in order to relax the boundary condition to allow worse moves to be applied to the current solution. Cooling continues and the boundary is reduced at a rate according to the remaining length of the run. The initial decay rate of the EGD is used to show how fast the boundary is reduced and ultimately the condition for accepting worse moves is narrowed. In this paper, we use the halflife decay rate, is the amount of time it takes for half of the amount of substance to decay to attempt to reach the optimal solution. The wait parameter is used to invoke the reheat mechanism. It can be specified in terms of percentage or number of total moves in the process [3]."}, {"heading": "4.3.2. Flex-Deluge", "text": "An extension of the Great Deluge algorithm is \u201cFlex-Deluge\u201d, where the acceptance of uphill moves depends on a \u201cflexibility\u201d coefficient kf (0<= kf<=1). The acceptance rules are outlined in Expression (2):\nP\u2032=P + kf (B - P) when P < B P\u2032=P when P \u2265 B. (2)\nby varying kf, it is possible to obtain an algorithm with characteristics of both the original Great Deluge (kf = 1) and greedy Hill-Climbing (kf = 0). This method enables the search procedure to develop with an adaptive level of strictness of acceptance for each particular move [8]. Thus, in this paper, the flexibility coefficient value for the all data instances can be seen in the Section 5."}, {"heading": "4.3.3. Non-Linear Great Deluge", "text": "Another extension of GD is non-linear great deluge algorithm (NLGD) in which the acceptance criterion refers to accepting improving and non-improving low-level heuristics depending of the performance of the heuristic and the current water level B. Improving heuristics are always accepted while non-improving ones are accepted only if the detriment in quality is less than or equal B. The initial water level is usually set to the quality of the initial solution and then decreased by a non-linear function proposed in [17] as follows:\nB = B \u00d7 (exp \u2212\u03b4 (rnd [min, max])) + \u03b2 (3)\nThe various parameters in Eq. (3) control the speed and the shape of the water level decay rate. Parameter \u03b2 influences the shape of the decay rate and it represents the minimum expected penalty corresponding to the best solution. The role of parameters min and max is to control the speed of the decay rate. Therefore, for higher values of min and max, the water level decreases more rapidly and hence, improvements to the solution quality are also achieved faster [14]. As far as the author knows, it has been employed only for the university course timetabling problem [5, 13, 14 and 16]. So, this paper is first used and tested for exam timetabling problem. The parameter values are being set not to be specified for all data instances and these are shown in table 4."}, {"heading": "4.4. Three HH Methods for Exam Timetabling Problem", "text": "The first HH method, RL-EGD has already been proposed and published as our previous job [10]. It is capable of producing feasible solutions for all problem instances and comparable results in the literature. Now other two HH methods such as RL-FD and RL-NLGD for exam timetabling problem are implemented and compared with it. The main differences of these three HH methods can be seen at the step 10 of the figures 3, 4 and 5."}, {"heading": "5. RESULTS AND DISCUSSION", "text": "Our experimental analysis is making on the computer Pentium IV, Dell with the RAM 2GB .We tested the three HH methods on 31 instances. These are 13 instances proposed by Carter et al. and 18 instances created by instance generator. All of these data instances and random instance generator can be available from the link: \u201chttp://www.asap.cs.nott.ac.uk/resources/data.shtml.\nEach data instance is executed 10 times as shown in the following table. Each run is performed starting from the same initial configuration. The HH methods are implemented in Java and the parameters and environmental settings are as shown in the following table. In the parameter setting, Coefficient_Kf is used in the RL-FD while \u03b2, Bmin , Bmax, \u03b4 are being used in RL-NLGD. For the values of these parameters, we follow the reference [16] because that paper provided the better results.\nBmax 300000\n\u03b4 5*10 -10\nWait Value for reheat mechanism 25%\nLower bound 0.0\nUpper Bound 40.0\nUtility Value for each low level heuristic 0.75*Upper Bound\nTo make a comparison, the Lowest Best Cost is used as the performance criterion for all experiments. According to the objective function, the lowest the cost, the better the timetable is. The results of lowest best cost for each HH methods are presented in the following graphs.\nThe figure 6 shows the comparison of the Lowest Best Cost on small 9 data instances. At the same time, the figure 7 shows the comparison on large 9 data instances. Although there is no significant difference in the cost values of three HH methods in each dataset, it is observed that RL-EGD can provide the lowest best cost in small five data sets whereas the other two HH methods, RL-FD and RL-NLGD can produce the lowest cost in two datasets. Likewise, it is observed that RL-EGD can also provide the lowest best cost in large five data sets. The figure 8 shows the comparison for 5 data instances from the Carter\u2019s Datasets. We choose these data instances by randomly. Here, because of the reheat mechanism of the RL-EGD, it can also produce much lower costs in three instances than those by other two HH methods. In these figure, the symbol star shows the data instance got the lowest best cost by RL-EGD HH approach.\nFor another comparison, the figure 9 represents the comparison of average lowest cost of all small data instances. Among three HH methods, it can be seen that RL-EGD methods has achieved the lowest average best cost in most of the data instances except the SP25.exm and SP15.exm. In figures, X axis shows the data instances names while Y axis is being representing the lowest cost of the best solution."}, {"heading": "6. CONCLUSION", "text": "Hyper heuristics have been starting to prove themselves as fast and effective methods for solving complex real world optimization problems. Therefore, the RL-EGD HH method is also proposed as our first job and also achieves the better solutions for the problem domain. Now, as the next step, we have made a comparison it with two other HH methods. From the experiments, it can be concluded that the method RL-EGD can provide the lowest best cost for most of the data instances and compare with the other methods in the literature. To be able to schedule invigilators such as professors, doctors and teaching assistant to proctor the scheduled exams, as the future work, another enhancement would be to integrate this system with the invigilation timetabling system."}, {"heading": "Acknowledgements", "text": "I would like to express my gratitude to my rector, Dr. Ni Lar Thein, and all of my honourable teachers who check my grammar errors and provide valuable suggestions and guidance."}], "references": [{"title": "An experimental study on hyper heuristic and exam timetabling", "author": ["B. Bilgin", "E. Ozcan", "Korkmaz E. E"], "venue": null, "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "An Examination Scheduling Model to Maximize Students\u2019 Study Time", "author": ["B. Bullnheimer"], "venue": "Practice And Theory of Automated Timetabling (PATAT\u2019s", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 1997}, {"title": "An Extended Great Deluge Approach to the Examination Timetabling Problem", "author": ["B. McCollum", "P.J. McMullan", "A.J. Parkes", "E.K. Burke", "S. Abdullah"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": " Modified Great Deluge Algorithm based Auto Associated Neural Network for Bankruptcy Prediction in Banks\", International Journal of Computer Intelligence Reserach", "author": ["C. Pramodh", "V. Ravi"], "venue": "ISSN 097-1873", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2007}, {"title": "A tabu-search hyper heuristic for timetabling and roistering", "author": ["E. Burke", "G. Kendall", "E. Soubeiga"], "venue": "Journal of Heuristic,", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2003}, {"title": "Solving Exam Timetabling Problems with Flex-Deluge Algorithm", "author": ["E.K. Burke", "Y. Bykov"], "venue": "PATAT", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2006}, {"title": "Reinforcement Learning with EGD based Hyper Heuristic System for Exam Timetabling Problem", "author": ["ES Sin"], "venue": "Proceedings of the IEEE-CCIS", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2011}, {"title": "Development and application of hyper heuristic to personnel scheduling.", "author": ["E. Soubeiga"], "venue": "PhD thesis, School of Computer Science,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2003}, {"title": "A new reinforcement learning algorithm\u201d, STUDIA UNIV. BABES-BOLYAI, INFOMATICA, Volume XLVIII, Nubmer 1,2003", "author": ["Gabriela Serban"], "venue": null, "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2003}, {"title": "Non-Linear Great Deluge with learning Mechanism for Solving the Course Timetabling Problem\u201d, MIC-2009: The VIII Meta-heuristic International Conference", "author": ["H.J. Obit", "D. Landa-Silva", "D. Quelhadj", "M. Sevaux"], "venue": null, "citeRegEx": "13", "shortCiteRegEx": "13", "year": 2009}, {"title": "Reinforcement learning: A Survey", "author": ["K. Leslie", "Michael L. Littman"], "venue": "Journal of Artificial Intelligence Research", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 1996}, {"title": "Great Deluge with Nonlinear Decay Rate for Solving Course Timetabling Problem", "author": ["Landa-Silva", "Obit", "H.H"], "venue": "Proceedings of the 2008 IEEE Conference on Intelligent System (IS", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2008}, {"title": "Recent Developments in Practical Exam Timetabling", "author": ["M. Carter", "G. Laporte"], "venue": "Lectures Notes in Computer Science 1153,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 1996}, {"title": "Iterated Great Deluge for the Dynamic Facility Layout Problem", "author": ["Nabil Nahas", "Mustapha Nourelfath", "Daoud Ait-Kadi"], "venue": "in May,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2010}], "referenceMentions": [{"referenceID": 2, "context": "Early research works on hyper heuristic focused on the development of advanced strategies for choosing the heuristics to be applied at different points of the search [3].", "startOffset": 166, "endOffset": 169}, {"referenceID": 4, "context": "For instance, a Monte Carlo acceptance criterion is used by Ayob and Kendall in [6] while the great deluge acceptance criterion is used by Kendall and Mohamad in [7].", "startOffset": 80, "endOffset": 83}, {"referenceID": 5, "context": "Good results were presented and they suggested that the flex deluge method is relatively higher effective in the large-scale problems [8].", "startOffset": 134, "endOffset": 137}, {"referenceID": 3, "context": "Ravi also proposed four variants of Modified Great Deluge Algorithm based Auto Associative Neural Network (MGDAAANN) and worked on three different banks data sets [4].", "startOffset": 163, "endOffset": 166}, {"referenceID": 0, "context": "also reported that a simple random-great deluge based hyper heuristic was the second best after choice function-simulated annealing, considering the average performance of all hyper heuristic over a set of examination timetabling problem[1].", "startOffset": 237, "endOffset": 240}, {"referenceID": 2, "context": "And it seems that EGD is comparable to existing state of the art techniques, and form previous application to other data sets and a different problem domain (course timetabling)[3].", "startOffset": 177, "endOffset": 180}, {"referenceID": 13, "context": "The objective of the first step is to find a local optimum solution by EGD and the second step is a loop that allows the search process to alternate between diversification and intensification [18].", "startOffset": 193, "endOffset": 197}, {"referenceID": 2, "context": "Typically one cannot satisfy all soft constraints thus there is a need for a performance function measuring the degree of satisfaction of these constraints [3].", "startOffset": 156, "endOffset": 159}, {"referenceID": 1, "context": "The primary hard and soft constraints in exam timetabling problem can be found in [2].", "startOffset": 82, "endOffset": 85}, {"referenceID": 1, "context": "These heuristics are also called the slot move in [2].", "startOffset": 50, "endOffset": 53}, {"referenceID": 2, "context": "It can be specified in terms of percentage or number of total moves in the process [3].", "startOffset": 83, "endOffset": 86}, {"referenceID": 5, "context": "This method enables the search procedure to develop with an adaptive level of strictness of acceptance for each particular move [8].", "startOffset": 128, "endOffset": 131}, {"referenceID": 12, "context": "The initial water level is usually set to the quality of the initial solution and then decreased by a non-linear function proposed in [17] as follows:", "startOffset": 134, "endOffset": 138}, {"referenceID": 6, "context": "The first HH method, RL-EGD has already been proposed and published as our previous job [10].", "startOffset": 88, "endOffset": 92}, {"referenceID": 3, "context": "Input: UtilityValue[ 4], noOfHeuristic=4, maxIteration=1000, iterationCount=1, LLHs; 2.", "startOffset": 19, "endOffset": 23}, {"referenceID": 3, "context": "Input: UtilityValue[ 4], noOfHeuristic=4, maxIteration=1000, iterationCount=1, LLHs; CurrentCost=0.", "startOffset": 19, "endOffset": 23}, {"referenceID": 11, "context": "For the values of these parameters, we follow the reference [16] because that paper provided the better results.", "startOffset": 60, "endOffset": 64}, {"referenceID": 3, "context": "Input: utilityValue[4],noOfHeuristic=4,maxIteration=1000, iterationCount=1, LLHs; CurrentCost, OldCost, \u03b2 =0.", "startOffset": 19, "endOffset": 22}], "year": 2012, "abstractText": "Today, University Timetabling problems are occurred annually and they are often hard and time consuming to solve. This paper describes Hyper Heuristics (HH) method based on Great Deluge (GD) and its variants for solving large, highly constrained timetabling problems from different domains. Generally, in hyper heuristic framework, there are two main stages: heuristic selection and move acceptance. This paper emphasizes on the latter stage to develop Hyper Heuristic (HH) framework. The main contribution of this paper is that Great Deluge (GD) and its variants: Flex Deluge(FD), Nonlinear(NLGD), Extended Great Deluge(EGD) are used as move acceptance method in HH by combining Reinforcement learning (RL).These HH methods are tested on exam benchmark timetabling problem and best results and comparison analysis are reported.", "creator": "Microsoft\u00ae Word 2010"}}}