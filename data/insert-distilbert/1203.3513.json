{"id": "1203.3513", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "15-Mar-2012", "title": "Dynamic programming in in uence diagrams with decision circuits", "abstract": "decision circuits perform efficient evaluation of influence relationship diagrams, building on the ad - vances in practical arithmetic circuits for belief net - work inference [ darwiche, 2003 ; bhattachar - jya and shachter, 2007 ]. we show how even more economically compact decision circuits can be con - structed for good dynamic programming in influ - ence diagrams with separable value functions tables and conditionally specified independent subproblems. once a decision circuit has been better constructed based on the diagram's \" global \" graphical structure, it can be compiled to exploit \" lo - cal \" picture structure for an efficient error evaluation and sen - sitivity analysis.", "histories": [["v1", "Thu, 15 Mar 2012 11:17:56 GMT  (230kb)", "http://arxiv.org/abs/1203.3513v1", "Appears in Proceedings of the Twenty-Sixth Conference on Uncertainty in Artificial Intelligence (UAI2010)"]], "COMMENTS": "Appears in Proceedings of the Twenty-Sixth Conference on Uncertainty in Artificial Intelligence (UAI2010)", "reviews": [], "SUBJECTS": "cs.AI", "authors": ["ross d shachter", "debarun bhattacharjya"], "accepted": false, "id": "1203.3513"}, "pdf": {"name": "1203.3513.pdf", "metadata": {"source": "CRF", "title": "Dynamic programming in influence diagrams with decision circuits", "authors": ["Ross D. Shachter", "Debarun Bhattacharjya"], "emails": ["shachter@stanford.edu", "debarunb@us.ibm.com"], "sections": [{"heading": null, "text": "Decision circuits perform efficient evaluation of influence diagrams, building on the advances in arithmetic circuits for belief network inference [Darwiche, 2003; Bhattacharjya and Shachter, 2007]. We show how even more compact decision circuits can be constructed for dynamic programming in influence diagrams with separable value functions and conditionally independent subproblems. Once a decision circuit has been constructed based on the diagram\u2019s \u201cglobal\u201d graphical structure, it can be compiled to exploit \u201clocal\u201d structure for efficient evaluation and sensitivity analysis."}, {"heading": "1 INTRODUCTION", "text": "Influence diagrams [Howard and Matheson, 1984] are popular graphical models for representing, evaluating and analyzing a single rational decision maker\u2019s decision problem. We can exploit any separable value functions in influence diagrams for more efficient evaluation [Tatman and Shachter, 1990; Luque and Diez, 2009]. Decision circuits are graphical representations for efficient evaluation and sensitivity analysis on influence diagrams with a single value node [Bhattacharjya and Shachter, 2007, 2008, 2010]. In this paper, we show how they can be applied to influence diagrams with multiple value functions using join tree methods [Shachter and Peot, 1992; Dittmer and Jensen, 1994].\nArithmetic circuits [Darwiche, 2003] are graphical representations for probabilistic inference and sensitivity analysis in Bayesian belief networks. Decision circuits are a natural extension to arithmetic circuits for evaluating sequential decision problems represented as influence diagrams.\nGlobal structure refers to the topology of the graph,\nthe size and the treewidth for a given task. Techniques have been developed to exploit global structure in the construction of arithmetic circuits applying logic [Darwiche, 2002; Chavira and Darwiche, 2005; Chavira, 2007] and join trees [Park and Darwiche, 2004]. We apply join tree methods, as well, but the arithmetic circuit approaches do not deal with the additional vertex elimination order restrictions in decision problems and complex accounting for separable value functions. To address these issues, we introduce a \u201cbranching operator\u201d for decision circuits, use directed chordal graphs to develop our join tree structure, and introduce decision circuit backbones as a compact representation for symmetric decision circuits.\nLocal structure in belief networks refers to the specific numbers, particularly zeros, in the conditional probability tables (CPTs). Like arithmetic circuits, decision circuits are compiled so that subsequent evaluation and analysis can be more efficient. This is particularly useful for real-time decision making.\nThis paper is organized as follows. In Section 2 we review influence diagrams and introduce some examples. In Section 3 we review decision circuits, and introduce a new type of decision circuit operator for branching. In Section 4 we show how to construct a decision circuit for an influence diagram with multiple value nodes, based on directed chordal graphs and introducing an intermediate structure we call a \u201cdecision circuit backbone.\u201d In Section 5 we discuss methods to compile the decision circuit, taking advantage of local structure. Finally, we conclude the paper in Section 6 with some suggestions for future research."}, {"heading": "2 INFLUENCE DIAGRAMS", "text": "In this section we review influence diagrams and introduce the notation and two examples that we will refer to throughout the paper.\nAn influence diagram is a directed acyclic graphical\nmodel. The nodes correspond to the variables, uncertainties drawn as ovals, decisions drawn as rectangles, and values drawn as rounded rectangles. We denote variables by upper-case letters (X) and their possible states by lower-case letters (x). A bold-faced letter (U) indicates a set of variables. We refer interchangeably to a node and its corresponding variable, referring to them simply as uncertainties, decisions, and values. If X is a node with parents U, then XU is called the family of X. The parents of an uncertain or value node condition its probability distribution or expected value, while the parents of a decision node will be observed before the decision will be made.\nConsider the influence diagram shown in Figure 1a from Dittmer and Jensen [1997]. There are three decisions, D1, D2, and D3, one value, V , and four uncertainties, A, B, C, and E. The distribution for B is unconditional, while all of the other distributions are conditional. No other variables will be observed before decision D1 is made, but when D3 is made D1, C, D2, E, and A will have been observed.\nUncertain descendants of decisions are said to be responsive because their outcome can be affected by the decisions. The only non-responsive uncertainty is B, and thus it is the only uncertainty which could be observed in advance [Heckerman and Shachter, 1995]. Such evidence can incorporate any data already collected or determine the value of clairvoyance. We also allow evidence to indicate which alternatives are available and which value variables are to be accumulated.\nWe assume that value nodes have no children and that when there are multiple values the total value is their sum [Tatman and Shachter, 1990]. (The methods in this paper could also be applied to multilinear value models with nested sums and products.) Consider the influence diagram shown in Figure 2a from Jensen et al [1994]. There are four decisions in this example and four values, and the decisions are made so as to maximize the sum of the values. There are three nonresponsive uncertainties, A, B, and C.\nIn addition to the structure of the influence diagram, we need the possible states for each of the uncertainties and the decisions. For each uncertainty X with parents U there is a distribution \u03b8x|u = P{X = x|U = u}. For each value V with parents U, we treat v as a placeholder in \u03b8v|u = E{V |U = u}, which we assume is positive without any loss of generality. (As a result, if one of the alternatives for a decision is unavailable it will yield zero value and be dominated by any available alternative.)\nWe allow evidence e about uncertain variables E, and augmented evidence e\u2032, which also includes the value distributions, {\u03b8x|u}, and any evidence about values\nand decisions. For any uncertainty or decision X, \u03bbx = 0 if we assert that X 6= x and \u03bbx = 1 otherwise. In the case of value variable V , we allow any \u03bbv \u2265 0 to weight or discount its contribution, with \u03bbv = 0 if we want to ignore the value variable V in making our decisions.\nWe can recognize which of the available observations are requisite for each of the decisions. In the example shown in Figure 1a, even though D1, C, D2, E, and A are all known at the time of decision D3, A is sufficient to make the best decision. This can be determined for each decision, in reverse order, by finding the observations relevant to the value descendants of the decision [Shachter, 1998, 1999].\nWe assume that the influence diagram is a single component. If not, the problem can be solved separately for each component. We also assume that there are no nodes in the diagram which could be simply removed. For example, some non-responsive uncertainties might become relevant if they were observed.\nFor each of the diagrams, a moral graph, similar to the ones in Shachter [1999], is shown in Figures 1b and 2b. Moral graphs are obtained by including only the requisite observations as parents of the decisions and adding undirected edges (as dashed lines), if necessary, between any two nodes with a common child. These extra edges will ensure that each node\u2019s family can be represented in the constructed decision circuit, so that the distribution can be incorporated.\nThe standard exact approaches to evaluating influence diagrams incorporate an implicit or explicit variable elimination order. If requisite observations for a decision precede the decision while responsive uncertain and value variables follow it in the order, the order is said to be consistent with the influence diagram. In section 4 we will construct a decision circuit based on any given target variable elimination order consistent with the influence diagram."}, {"heading": "3 DECISION CIRCUITS", "text": "Decision circuits are modified arithmetic circuits [Darwiche, 2003] for efficient evaluation and analysis of influence diagrams. In particular, they have a maximization operator in addition to sum and product operators [Bhattacharjya and Shachter, 2007], and they perform evaluation with an upward sweep through the circuit and differentiation with a subsequent downward sweep. In this paper, we also introduce a branching operator to deal with conditionally independent subproblems and additive value functions. The branching operator requires that we evaluate two functions simultaneously as we sweep upward through the decision circuit, one for the expected value weighted by the\nprobability of the evidence and another with only the probability of the evidence. On the downward pass, we need to evaluate three sets of partial derivatives.\nA sequential decision problem can be represented as a dynamic programming function g(e\u2032) computing the maximal expected value weighted by the probability of the evidence about any of the variables, including the value variables. Similarly, we can represent the probability of the evidence as g(e), where evidence e is the evidence about just the uncertain variables, so the maximal expected value is given by g(e\u2032)/g(e). The function g(e\u2032) is our objective for making decisions and g(e) normalizes it to units of expected value.\nWe derive in the next section the functions below for the influence diagram shown in Figure 1a:\ng(e) = \u2211 c \u03bbc\u03b8c|d1 \u2211 e \u03bbe\u03b8e|c,d2 \u2211 a \u2211 b \u03bba\u03b8a|b,e\u03bbb\u03b8b\ng(e\u2032) = maxd1 \u03bbd1 \u2211 c \u03bbc\u03b8c|d1 maxd2 \u03bbd2 \u2211\ne \u03bbe\u03b8e|c,d2\u2211 a[ \u2211 b \u03bba\u03b8a|b,e\u03bbb\u03b8b][maxd3 \u03bbd3\u03bbv\u03b8v|a,d3].\nA decision circuit is a graphical representation of a dynamic programming function. It is a directed acyclic graph with leaves 0, 1, {\u03b8x|u}, and {\u03bbx}. The non-leaf nodes are operators, sum, product, max, and branching, on the node\u2019s children. There is a single root node, corresponding to our functions, g(e\u2032) and g(e). The size of a decision circuit is the number of arcs it contains. We have not displayed the decision circuit for the diagram in Figure 1a because it is too large. Even\nif each variable had only two possibilities, the circuit would have 122 nodes and 138 arcs. Although a decision circuit is an efficient representation for analyzing the problem, it is not well suited for communication, and therefore we introduce decision circuit backbones in the next section as a more compact and readable intermediate representation.\nThe decision circuit is not a tree, because nodes can have multiple parents to exploit conditional independence [Darwiche, 2000]. For example, in the computation of g above, c and d2 play no role after \u03b8e|c,d2 is introduced, and the rest of the expression can be computed for any possible (c, d2). This would be implemented in a decision circuit by having all possible (c, d2) as parents of the A sum node for a particular e, an example of coalescence, discussed in Section 5.\nThe functions g(e) and g(e\u2032) are computed together by evaluating the circuit in an upward pass, starting just above the leaves and ending at the root, only visiting a node after all of its (non-leaf) children have been visited and then performing the node\u2019s operation. For each intermediate node x there are two values, gx(ex) and gx(e\u2032x), where ex represents the evidence in the leaves below x. For each of the functions, the value of a sum node is the sum of the corresponding values of its children. The value of a product node is their product, although to compute gx(ex) we ignore any \u03bbd, \u03bbv, and \u03b8v|u children. (The lists of which children contribute to both gx(ex) and gx(e\u2032x) and which contribute only\nto gx(e\u2032x) can be created at compile time.)\nThe gx(e\u2032x) value of a max node x is the largest corresponding value of its children, remembering which child y yielded the maximum, and breaking ties arbitrarily. The gx(ex) value of a max node x can be taken from any of its children when e includes only nonresponsive evidence, since they should all be equal, and we therefore suggest using gy(ey)."}, {"heading": "3.1 A New Branching Operator", "text": "We add a branching node to the decision circuit to combine conditionally independent subproblems with their own additive value functions and disjoint evidence. The branching node x works differently for the two functions: gx(ex) = g1(e1)g2(e2) and gx(e\u2032x) = g1(e\u20321)g2(e2) + g1(e1)g2(e\u20322), the cross-product of the two child branches [Shachter and Peot, 1992; Dittmer and Jensen, 1994]. This distinction is necessary to normalize the different values of gi(e\u2032) before summing, so that the combined gx(e\u2032x) function incorporates all evidence from both branch 1 and branch 2. (This can be generalized to more than two branches, but it is more efficient to create a binary tree of branching nodes.)\nThe partial derivatives of g(e) and g(e\u2032) can then be computed by differentiating the circuit in a downward pass, starting at the root node and ending at the leaves, only visiting a node after all of its parents have been visited. For each node x there are three partial derivatives: \u2202g(e)\u2202gx(ex) , \u2202g(e\u2032) \u2202gx(ex) , and \u2202g(e \u2032) \u2202gx(e\u2032x) . There are three derivatives because g(e) can be computed solely from the local probability functions as in an arithmetic circuit, but we use both local functions to compute g(e\u2032) with the branching operator.\nFor the downward differentiation pass, because the root is not a branching node we can initialize the root derivatives to \u2202g(e)\u2202g(e) = 1, \u2202g(e\u2032) \u2202g(e) = 0, and \u2202g(e\u2032) \u2202g(e\u2032) = 1. Each of the derivatives at all other nodes are sums over their parents, applying the chain rule. Each child of a sum node inherits its parent\u2019s corresponding derivatives; each child of a product node inherits its parent\u2019s corresponding derivatives multiplied by its siblings\u2019 corresponding values; and the maximizing child of a max node inherits its parent\u2019s corresponding derivatives. The first child of a branching node x inherits g2(e2)\n\u2202g(e) \u2202gx(ex) toward \u2202g(e)\u2202g1(ex) , g2(e2) \u2202g(e\u2032) \u2202gx(ex) +\ng2(e\u20322) \u2202g(e\u2032)\n\u2202gx(e\u2032x) toward \u2202g(e \u2032) \u2202g1(ex) , and g2(e2) \u2202g(e\u2032) \u2202gx(e\u2032x) to-\nward \u2202g(e \u2032)\n\u2202g1(e\u2032x) , with symmetric expressions for the sec-\nond child.\nThe upward and downward passes are also referred to as sweeps. Thus we can evaluate the decision problem with one sweep and compute all of the derivatives with\nanother. Consequently the time complexity for these operations is linear in the size of the circuit."}, {"heading": "4 BUILDING DECISION CIRCUITS", "text": "FROM INFLUENCE DIAGRAMS\nIn this section we show how to build a decision circuit that exploits the global structure of an influence diagram, given a target variable elimination order. After constructing a directed chordal graph from the moral graph using the target order, we build a \u201cdecision circuit backbone\u201d to specify the decision circuit."}, {"heading": "4.1 Directed chordal graphs", "text": "The theory of chordal graphs and junction trees is well developed and we build on these results [Golumbic, 1980; Tarjan and Yannakakis, 1984; Shachter et al, 1990]. We define an acyclic directed graph to be chordal if there is an arc between any two nodes with a common child. A directed chordal graph can always be obtained from an undirected chordal graph by directing its edges according to one of its \u201cperfect\u201d orderings, and the undirected graph corresponding to a directed chordal graph is always chordal.\nA particularly useful result is that given a total ordering there is a unique minimal directed chordal graph, based on the minimal chordal graph fill-in procedure applied to the moral graph. The directed chordal graph is said to be consistent with the original influence diagram if the value nodes have no children, and the parents of each decision node include all of the requisite observations and only nodes observed before the decision is made [Nielsen and Jensen, 1999; Shachter, 1999]. When the target order is consistent with the original influence diagram, the fill-in procedure is guaranteed to produce a consistent directed chordal graph. Proposition 1 (Minimal Directed Chordal Graph). Given any influence diagram and a consistent target order, there is a unique minimal directed chordal graph consistent with the order. To construct it from the moral graph, use the order to direct all edges, and visiting each node in reverse order, add a directed arc, if necessary, between each pair of its parents.\nIn Figures 1c and 2c we show directed chordal graphs based on the consistent target orders given in the captions. We want to create a tree structure, similar to a junction tree, for the decision circuit backbone, and we use the longest paths in the chordal graphs, comprising the bolded arcs. We can do this based on the following result. Theorem 1 (Directed Chordal Graph Properties). Given a single component directed chordal graph, there is exactly one root node.\nThere is exactly one longest path to each node X from the root and that path contains all of X\u2019s ancestors.\nThe arcs on the longest paths form a tree and all of the children of any node X are contiguous with X in the tree.\nProof. There is a path containing all of the ancestors of any node X, or two of its ancestors would have a common child but not an arc between them and the graph would not be chordal. That path is the longest path to X. There can be only one root node in the graph because each non-root node has exactly one root ancestor. The longest paths form a tree because the ancestors of each node are totally ordered. Finally, if any node X is a parent of Y , the node preceding Y in the longest path is either X or a child of X, because X and that node are both parents of Y in a chordal graph. (This is equivalent to the \u201cjoin tree property\u201d.)"}, {"heading": "4.2 Decision circuit backbones", "text": "A decision circuit backbone is a compact representation for a decision circuit showing the branching as well as sum, product, and max operators. It is compact because it represents a generic path through a symmetric decision circuit. At any time in the construction process, there is a set of variables W which have been introduced and are still available, and for each w there is a corresponding operator node in the decision circuit. An uncertainty X is introduced via \u201c+X|W\u201d, representing a sum over x for each possible w. Similarly, a decision variable X is introduced via \u201cmaxX|W\u201d, representing a max over x for each possible w. On the other hand, no variable is introduced via \u201c\u2217X|W\u201d, representing a product with \u03b8x|u and \u03bbx over x for each possible w, and it is necessary that the entire family of X, including X, be contained within W. Branches in the circuit represent conditionally independent sub-models to be combined, each with its own contribution to the total value.\nTo construct a decision circuit backbone from a directed chordal graph:\n1. use the structure of the longest path tree, branching when the tree branches, and adding entries for each node in the chordal graph:\n\u2022 for uncertainty X with parents W in the chordal graph, enter \u201c+X|W\u201d;\n\u2022 for decision X with parents W, enter \u201cmaxX|W\u201d, followed by \u201c\u2217X|W\u201d; and\n\u2022 for value V with parents W, enter \u201c\u2217V |W\u201d, and for any terminal branch that doesn\u2019t end with a value, append \u201c\u2217 zero value\u201d\n2. for each chance node X, find an entry in the backbone where W contains the node\u2019s family and insert \u201c\u2217X|W\u201d below it. (The moralizing step guaranteed that there will be at least one such entry, and, as a heuristic, we suggest the highest such entry in the backbone.)\nThe decision circuit backbone corresponding to the chordal graph in Figure 1c is shown in Figure 3, and the backbone corresponding to the chordal graph in Figure 2c is shown in Figure 4. Note that product entries for multiple uncertainties can be combined into one entry, such as \u201c\u2217A,B|A,B,E\u201d in Figure 3."}, {"heading": "4.3 Constructing the decision circuit", "text": "In this section we construct the decision circuit from the decision circuit backbone. The backbone organizes all of the information needed for the process.\nWe describe the construction of the decision circuit starting at the root node with W = {}. During the process there will be an operator node created for each possible w. The sum entry \u201c+X|W\u201d and max entry \u201cmaxX|W\u201d create a sum (or max) operator node for each possible w with a child corresponding to each possible x. The product entry \u201c\u2217X|W\u201d creates a product operator for each possible w with three children: the next operator as one child, and \u03b8x|u and \u03bbx as the other children (where u \u2286 w are the parents of X in the original influence diagram).\nFor example, the decision circuit for the example in Figure 1 and backbone in Figure 3 corresponds to the following system, equivalent to the one in Section 3:\ng(e) = \u2211 c \u03bbc\u03b8c|d1 \u2211 e \u03bbe\u03b8e|c,d2 \u2211 a[g1(e1)g2(e2)]\ng(e\u2032) = maxd1 \u03bbd1 \u2211 c \u03bbc\u03b8c|d1\nmaxd2 \u03bbd2 \u2211\ne \u03bbe\u03b8e|c,d2\u2211 a[g1(e \u2032 1)g2(e2) + g1(e1)g2(e\u20322)]\ng1(e1) = \u2211\nb \u03bba\u03b8a|b,e\u03bbb\u03b8b(1) g1(e\u20321) = 0 g2(e2) = 1 g2(e\u20322) = maxd3 \u03bbd3\u03bbv\u03b8v|a,d3\nGiven non-responsive evidence e, sweep upward in the constructed decision circuit to compute g(e) and g(e\u2032). For any strategy s, g(e) = P{e|s} = P{e}, and\ng(e\u2032) = maxsE{ \u2211\nV \u03bbvV |s, e}P{e|s} = g(e) maxs \u2211 V \u03bbvE{V |s, e}.\nThis approach builds on Darwiche [2000, 2003] and Bhattacharjya and Shachter [2007] and leads to the following result. Because the time and space complexity are governed by the size of the decision circuit, we can relate the complexity to the structure of the directed chordal graph determined by the original influence diagram and target variable elimination order. The tree-width of the influence diagram evaluation is exactly the number of nodes in the largest family in the directed chordal graph. (By contrast, the construction\nof the decision circuit backbone is only on the order of the number of edges in that directed chordal graph.)\nTheorem 2 (Decision Circuit Evaluation). Given an influence diagram and consistent target variable elimination order, the decision circuit constructed from the directed chordal graph and decision circuit backbone will correctly compute P{e} = g(e) and maximal expected value g(e\u2032)/g(e) for the diagram.\nThe time and space complexity for this computation and for the computation of all of the partial derivatives of both functions with respect to the influence diagram parameters is of the order of O(nst), where t is the treewidth (in our case, the size of the largest family in the directed chordal graph), n is the number of variables in the influence diagram, and s is the largest number of states for any variable. Alternatively, the time and space complexity is of the order of O(nS) where S is the largest number of states in any family in the directed chordal graph."}, {"heading": "4.4 Comparing Branching and Linear Decision Circuits", "text": "In this section, we compare the new branching method presented in this paper with the linear method presented in Bhattacharjya and Shachter [2007], counting the number of arcs in the decision circuits for each approach. We consider three influence diagram examples, the diagrams shown in Figure 1 [Dittmer and Jensen, 1997] and Figure 2 [Jensen, et al, 1994], and the oil wildcatter drilling problem [Raiffa, 1968]. For the first two we construct circuits assuming all variables are binary and also assuming all variables have either three or four states. The target variable elimination orders (shown in the captions in Figure 1 and Figure 2) were chosen to minimize the size of the linear decision circuit with the multiple values combined into a single value. The results are shown in Table 1.\nFor the influence diagram shown in Figure 1 with a\nsingle value node and only a small opportunity for branching, the overhead of branching cancels out the benefit when there are only two states, and most of the benefit when there are more states. However, in the other two problems where there are multiple additive values, the benefit is much more substantial than the overhead, and that benefit dramatically increases with the number of states."}, {"heading": "5 DECISION CIRCUITS AND LOCAL STRUCTURE", "text": "In this section, we discuss some types of local structure in influence diagrams and how we can exploit it to compile more compact decision circuits.\nInfluence diagrams naturally represent symmetric decision situations at the graphical level, while any asymmetry is represented at the local level within the distributions. Bielza and Shenoy [1999] compare how different graphical models deal with asymmetry.\nIt is natural for real world decision problems to exhibit asymmetry, with many zeros in CPTs. To exploit local structure when compiling a decision circuit, it matters whether a particular parameter might change. For example, if we want a particular zero to always stay zero, even during sensitivity analysis, we call it a hard zero. The presence of hard zeros and ones allows us to prune the decision circuit, eliminating nodes and arcs [Bhattacharjya, 2008]. Situations where we can prune an intermediate node (neither a leaf nor a root) or an arc include: a node with a hard 0 child, a product node with a hard 1 child, a node with only one child, and a node whose incoming arcs have all been pruned.\nAnother way to create more compact decision circuits is with coalescence, giving a node multiple parents. Coalescence has usually been hand-crafted for decision trees, as it has been difficult to automate [Bielza and Shenoy, 1999]. Conditional independence is a rich source of coalescence in decision circuits at the global level [Darwiche, 2000], as is the branching we exploit in this paper. When there is no coalescence in the circuit, the circuit resembles a full tree, exponential in the number of variables. In general, the size of the decision circuit is exponential in the size of the largest family in the directed chordal graph, and conditional independence and branching in the global structure can be exploited to limit the circuit size.\nCoalescence can be employed at the local level whenever the same symbolic sub-circuit can be re-used [Chavira, 2007]. This can be most easily recognized at the lowest level. For example, if a product node for x|u is created for \u03bbx\u03b8x|u, it can be reused whenever U \u2282W in \u201c\u2217X|W\u201d."}, {"heading": "6 CONCLUSIONS AND FUTURE RESEARCH", "text": "In this paper we have shown how significantly smaller and more efficient decision circuits can be built than with the linear vertex elimination method in Bhattacharjya and Shachter [2007]. Given a target variable elimination order, we are able to exploit separate value nodes and conditionally independent subproblems to construct a branching structure over subproblems. We introduce a branching operator and a decision circuit backbone as a compact graphical representation for a symmetric decision circuit. We show how the influence diagram and target order determine a directed chordal graph to guide the construction process. The resulting circuit can be compiled, exploiting the local structure.\nThe promise of decision circuits is that by compiling the fundamental operations used in junction tree methods exploiting conditional independence and separable values with local operations exploiting asymmetry, we should be able to outperform other exact methods. The advances in this paper help us realize some of those benefits.\nOnce we have a compiled decision circuit, it can efficiently address a variety of queries in real time, and perform a full sensitivity analysis [Bhattacharjya and Shachter, 2008, 2010]. We are not only able to compute the optimal policy as we manipulate the input parameters, but also the derivative of our objective with respect to all of those parameters. Because the compiled circuit accepts evidence, we can compute quantities such as the value of clairvoyance that can not be determined from the derivatives, taking full advantage of any separable value function in our influence diagram.\nWe can easily incorporate a few enhancements. First, we can recognize circumstances under which some alternatives might not be available [Smith et al, 1993]. Second, we could introduce product branching in addition to our (additive) branching to allow value functions with nested sums and products as in Tatman and Shachter [1990]. The corresponding operator is just the existing product operator. Finally, instead of computing both g(e\u2032) and g(e) using the same circuit, we could build a simpler arithmetic circuit to compute g(e), reducing compute time, and creating even more opportunities for pruning during compilation."}, {"heading": "Acknowledgements", "text": "We thank the anonymous referees for their suggestions."}], "references": [{"title": "Decision Circuits: A graphical representation for efficient decision analysis computation, Ph.D Thesis, Stanford University", "author": ["D. Bhattacharjya"], "venue": null, "citeRegEx": "Bhattacharjya,? \\Q2008\\E", "shortCiteRegEx": "Bhattacharjya", "year": 2008}, {"title": "Evaluating influence diagrams with decision circuits", "author": ["D. Bhattacharjya", "R. Shachter"], "venue": "Proc. of 23rd UAI,", "citeRegEx": "Bhattacharjya and Shachter,? \\Q2007\\E", "shortCiteRegEx": "Bhattacharjya and Shachter", "year": 2007}, {"title": "Sensitivity analysis in decision circuits", "author": ["D. Bhattacharjya", "R. Shachter"], "venue": "Proc. of 24th UAI,", "citeRegEx": "Bhattacharjya and Shachter,? \\Q2008\\E", "shortCiteRegEx": "Bhattacharjya and Shachter", "year": 2008}, {"title": "Three new sensitivity analysis methods for influence diagrams", "author": ["D. Bhattacharjya", "R. Shachter"], "venue": "In Proc. of 26th", "citeRegEx": "Bhattacharjya and Shachter,? \\Q2010\\E", "shortCiteRegEx": "Bhattacharjya and Shachter", "year": 2010}, {"title": "A comparison of graphical techniques for asymmetric decision problems", "author": ["C. Bielza", "P. Shenoy"], "venue": "Management Science,", "citeRegEx": "Bielza and Shenoy,? \\Q1999\\E", "shortCiteRegEx": "Bielza and Shenoy", "year": 1999}, {"title": "Beyond treewidth in probabilistic inference, Ph.D Thesis, University of California, Los Angeles", "author": ["M. Chavira"], "venue": null, "citeRegEx": "Chavira,? \\Q2007\\E", "shortCiteRegEx": "Chavira", "year": 2007}, {"title": "Compiling Bayesian networks with local structure", "author": ["M. Chavira", "A. Darwiche"], "venue": "In Proc. of 19th Intl. Joint Conf. on AI,", "citeRegEx": "Chavira and Darwiche,? \\Q2005\\E", "shortCiteRegEx": "Chavira and Darwiche", "year": 2005}, {"title": "A differential approach to inference in Bayesian networks", "author": ["A. Darwiche"], "venue": "Proc. of 16th UAI,", "citeRegEx": "Darwiche,? \\Q2000\\E", "shortCiteRegEx": "Darwiche", "year": 2000}, {"title": "A logical approach to factoring belief networks", "author": ["A. Darwiche"], "venue": "In Proc. of Intl. Conf. on Knowledge Representation and Reasoning,", "citeRegEx": "Darwiche,? \\Q2002\\E", "shortCiteRegEx": "Darwiche", "year": 2002}, {"title": "A differential approach to inference in Bayesian networks", "author": ["A. Darwiche"], "venue": "Journal of the ACM,", "citeRegEx": "Darwiche,? \\Q2003\\E", "shortCiteRegEx": "Darwiche", "year": 2003}, {"title": "Myopic value of information in influence diagrams", "author": ["S. Dittmer", "F. Jensen"], "venue": "Proc. of 13th UAI,", "citeRegEx": "Dittmer and Jensen,? \\Q1997\\E", "shortCiteRegEx": "Dittmer and Jensen", "year": 1997}, {"title": "Algorithmic Graph Theory and Perfect Graphs, Academic Press, London", "author": ["M.C. Golumbic"], "venue": null, "citeRegEx": "Golumbic,? \\Q1980\\E", "shortCiteRegEx": "Golumbic", "year": 1980}, {"title": "Decisiontheoretic foundations for causal reasoning", "author": ["D. Heckerman", "R. Shachter"], "venue": "Journal of AI Research,", "citeRegEx": "Heckerman and Shachter,? \\Q1995\\E", "shortCiteRegEx": "Heckerman and Shachter", "year": 1995}, {"title": "From influence diagrams to junction trees", "author": ["F. Jensen", "F.V. Jensen", "S. Dittmer"], "venue": "Proc. of 10th UAI,", "citeRegEx": "Jensen et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Jensen et al\\.", "year": 1994}, {"title": "Variable elimination for influence diagrams with super value nodes, Intl", "author": ["M. Luque", "F.J. Diez"], "venue": "Journal of Approximate Reasoning,", "citeRegEx": "Luque and Diez,? \\Q2009\\E", "shortCiteRegEx": "Luque and Diez", "year": 2009}, {"title": "Well-defined decision scenarios", "author": ["T. Nielsen", "Jensen", "F. V"], "venue": "Proc. of 15th UAI,", "citeRegEx": "Nielsen et al\\.,? \\Q1999\\E", "shortCiteRegEx": "Nielsen et al\\.", "year": 1999}, {"title": "A differential semantics for jointree algorithms, AI", "author": ["J. Park", "A. Darwiche"], "venue": null, "citeRegEx": "Park and Darwiche,? \\Q2004\\E", "shortCiteRegEx": "Park and Darwiche", "year": 2004}, {"title": "Decision Analysis, Addison-Wesley, Reading, MA", "author": ["H. Raiffa"], "venue": null, "citeRegEx": "Raiffa,? \\Q1968\\E", "shortCiteRegEx": "Raiffa", "year": 1968}, {"title": "Bayes-ball: The rational pastime (for determining irrelevance and requisite information in belief networks and influence diagrams)", "author": ["R. Shachter"], "venue": "Proc. of 14th UAI,", "citeRegEx": "Shachter,? \\Q1998\\E", "shortCiteRegEx": "Shachter", "year": 1998}, {"title": "Efficient value of information computation", "author": ["R. Shachter"], "venue": "Proc. of 15th UAI,", "citeRegEx": "Shachter,? \\Q1999\\E", "shortCiteRegEx": "Shachter", "year": 1999}, {"title": "Directed reduction algorithms and decomposable graphs", "author": ["R. Shachter", "S. Andersen", "K.L. Poh"], "venue": "In Proc. of 6th UAI,", "citeRegEx": "Shachter et al\\.,? \\Q1990\\E", "shortCiteRegEx": "Shachter et al\\.", "year": 1990}, {"title": "Decision making using probabilistic inference", "author": ["R. Shachter", "M. Peot"], "venue": "Proc. of 8th UAI,", "citeRegEx": "Shachter and Peot,? \\Q1992\\E", "shortCiteRegEx": "Shachter and Peot", "year": 1992}, {"title": "Structuring conditional relationships in influence diagrams", "author": ["J. Smith", "S. Holtzman", "J. Matheson"], "venue": "Operations Research,", "citeRegEx": "Smith et al\\.,? \\Q1993\\E", "shortCiteRegEx": "Smith et al\\.", "year": 1993}, {"title": "Simple lineartime algorithms to test chordality of graphs, test acyclicity of hypergraphs, and selectively reduce acyclic hypergraphs", "author": ["R. Tarjan", "M. Yannakakis"], "venue": "SIAM Journal of Computing,", "citeRegEx": "Tarjan and Yannakakis,? \\Q1984\\E", "shortCiteRegEx": "Tarjan and Yannakakis", "year": 1984}, {"title": "Dynamic programming and influence diagrams", "author": ["J. Tatman", "R. Shachter"], "venue": "IEEE Transactions on Systems, Man and Cybernetics,", "citeRegEx": "Tatman and Shachter,? \\Q1990\\E", "shortCiteRegEx": "Tatman and Shachter", "year": 1990}], "referenceMentions": [{"referenceID": 9, "context": "Decision circuits perform efficient evaluation of influence diagrams, building on the advances in arithmetic circuits for belief network inference [Darwiche, 2003; Bhattacharjya and Shachter, 2007].", "startOffset": 147, "endOffset": 197}, {"referenceID": 1, "context": "Decision circuits perform efficient evaluation of influence diagrams, building on the advances in arithmetic circuits for belief network inference [Darwiche, 2003; Bhattacharjya and Shachter, 2007].", "startOffset": 147, "endOffset": 197}, {"referenceID": 24, "context": "We can exploit any separable value functions in influence diagrams for more efficient evaluation [Tatman and Shachter, 1990; Luque and Diez, 2009].", "startOffset": 97, "endOffset": 146}, {"referenceID": 14, "context": "We can exploit any separable value functions in influence diagrams for more efficient evaluation [Tatman and Shachter, 1990; Luque and Diez, 2009].", "startOffset": 97, "endOffset": 146}, {"referenceID": 21, "context": "In this paper, we show how they can be applied to influence diagrams with multiple value functions using join tree methods [Shachter and Peot, 1992; Dittmer and Jensen, 1994].", "startOffset": 123, "endOffset": 174}, {"referenceID": 9, "context": "Arithmetic circuits [Darwiche, 2003] are graphical representations for probabilistic inference and sensitivity analysis in Bayesian belief networks.", "startOffset": 20, "endOffset": 36}, {"referenceID": 8, "context": "Techniques have been developed to exploit global structure in the construction of arithmetic circuits applying logic [Darwiche, 2002; Chavira and Darwiche, 2005; Chavira, 2007] and join trees [Park and Darwiche, 2004].", "startOffset": 117, "endOffset": 176}, {"referenceID": 6, "context": "Techniques have been developed to exploit global structure in the construction of arithmetic circuits applying logic [Darwiche, 2002; Chavira and Darwiche, 2005; Chavira, 2007] and join trees [Park and Darwiche, 2004].", "startOffset": 117, "endOffset": 176}, {"referenceID": 5, "context": "Techniques have been developed to exploit global structure in the construction of arithmetic circuits applying logic [Darwiche, 2002; Chavira and Darwiche, 2005; Chavira, 2007] and join trees [Park and Darwiche, 2004].", "startOffset": 117, "endOffset": 176}, {"referenceID": 16, "context": "Techniques have been developed to exploit global structure in the construction of arithmetic circuits applying logic [Darwiche, 2002; Chavira and Darwiche, 2005; Chavira, 2007] and join trees [Park and Darwiche, 2004].", "startOffset": 192, "endOffset": 217}, {"referenceID": 10, "context": "Consider the influence diagram shown in Figure 1a from Dittmer and Jensen [1997]. There are three decisions, D1, D2, and D3, one value, V , and four uncertainties, A, B, C, and E.", "startOffset": 55, "endOffset": 81}, {"referenceID": 12, "context": "The only non-responsive uncertainty is B, and thus it is the only uncertainty which could be observed in advance [Heckerman and Shachter, 1995].", "startOffset": 113, "endOffset": 143}, {"referenceID": 24, "context": "We assume that value nodes have no children and that when there are multiple values the total value is their sum [Tatman and Shachter, 1990].", "startOffset": 113, "endOffset": 140}, {"referenceID": 18, "context": "We assume that value nodes have no children and that when there are multiple values the total value is their sum [Tatman and Shachter, 1990]. (The methods in this paper could also be applied to multilinear value models with nested sums and products.) Consider the influence diagram shown in Figure 2a from Jensen et al [1994]. There are four decisions in this example and four values, and the decisions are made so as to maximize the sum of the values.", "startOffset": 125, "endOffset": 326}, {"referenceID": 18, "context": "For each of the diagrams, a moral graph, similar to the ones in Shachter [1999], is shown in Figures 1b and 2b.", "startOffset": 64, "endOffset": 80}, {"referenceID": 9, "context": "Decision circuits are modified arithmetic circuits [Darwiche, 2003] for efficient evaluation and analysis of influence diagrams.", "startOffset": 51, "endOffset": 67}, {"referenceID": 1, "context": "In particular, they have a maximization operator in addition to sum and product operators [Bhattacharjya and Shachter, 2007], and they perform evaluation with an upward sweep through the circuit and differentiation with a subsequent downward sweep.", "startOffset": 90, "endOffset": 124}, {"referenceID": 10, "context": "Figure 1: Original influence diagram, moral graph, and directed chordal graph for the Dittmer and Jensen [1997] example with elimination order D1, C, D2, E, A, B, D3, V.", "startOffset": 86, "endOffset": 112}, {"referenceID": 7, "context": "The decision circuit is not a tree, because nodes can have multiple parents to exploit conditional independence [Darwiche, 2000].", "startOffset": 112, "endOffset": 128}, {"referenceID": 21, "context": "The branching node x works differently for the two functions: gx(ex) = g1(e1)g2(e2) and gx(ex) = g1(e1)g2(e2) + g1(e1)g2(e2), the cross-product of the two child branches [Shachter and Peot, 1992; Dittmer and Jensen, 1994].", "startOffset": 170, "endOffset": 221}, {"referenceID": 11, "context": "The theory of chordal graphs and junction trees is well developed and we build on these results [Golumbic, 1980; Tarjan and Yannakakis, 1984; Shachter et al, 1990].", "startOffset": 96, "endOffset": 163}, {"referenceID": 23, "context": "The theory of chordal graphs and junction trees is well developed and we build on these results [Golumbic, 1980; Tarjan and Yannakakis, 1984; Shachter et al, 1990].", "startOffset": 96, "endOffset": 163}, {"referenceID": 19, "context": "The directed chordal graph is said to be consistent with the original influence diagram if the value nodes have no children, and the parents of each decision node include all of the requisite observations and only nodes observed before the decision is made [Nielsen and Jensen, 1999; Shachter, 1999].", "startOffset": 257, "endOffset": 299}, {"referenceID": 0, "context": "This approach builds on Darwiche [2000, 2003] and Bhattacharjya and Shachter [2007] and leads to the following result.", "startOffset": 50, "endOffset": 84}, {"referenceID": 0, "context": "This approach builds on Darwiche [2000, 2003] and Bhattacharjya and Shachter [2007] and leads to the following result. Because the time and space complexity are governed by the size of the decision circuit, we can relate the complexity to the structure of the directed chordal graph determined by the original influence diagram and target variable elimination order. The tree-width of the influence diagram evaluation is exactly the number of nodes in the largest family in the directed chordal graph. (By contrast, the construction Table 1: Comparative size of linear and branching decision circuits for different versions of the influence diagrams shown in Figures 1 and 2, and the oil wildcatter problem in Raiffa [1968].", "startOffset": 50, "endOffset": 724}, {"referenceID": 10, "context": "We consider three influence diagram examples, the diagrams shown in Figure 1 [Dittmer and Jensen, 1997] and Figure 2 [Jensen, et al, 1994], and the oil wildcatter drilling problem [Raiffa, 1968].", "startOffset": 77, "endOffset": 103}, {"referenceID": 17, "context": "We consider three influence diagram examples, the diagrams shown in Figure 1 [Dittmer and Jensen, 1997] and Figure 2 [Jensen, et al, 1994], and the oil wildcatter drilling problem [Raiffa, 1968].", "startOffset": 180, "endOffset": 194}, {"referenceID": 0, "context": "In this section, we compare the new branching method presented in this paper with the linear method presented in Bhattacharjya and Shachter [2007], counting the number of arcs in the decision circuits for each approach.", "startOffset": 113, "endOffset": 147}, {"referenceID": 4, "context": "Bielza and Shenoy [1999] compare how different graphical models deal with asymmetry.", "startOffset": 0, "endOffset": 25}, {"referenceID": 0, "context": "The presence of hard zeros and ones allows us to prune the decision circuit, eliminating nodes and arcs [Bhattacharjya, 2008].", "startOffset": 104, "endOffset": 125}, {"referenceID": 4, "context": "Coalescence has usually been hand-crafted for decision trees, as it has been difficult to automate [Bielza and Shenoy, 1999].", "startOffset": 99, "endOffset": 124}, {"referenceID": 7, "context": "Conditional independence is a rich source of coalescence in decision circuits at the global level [Darwiche, 2000], as is the branching we exploit in this paper.", "startOffset": 98, "endOffset": 114}, {"referenceID": 5, "context": "Coalescence can be employed at the local level whenever the same symbolic sub-circuit can be re-used [Chavira, 2007].", "startOffset": 101, "endOffset": 116}, {"referenceID": 0, "context": "In this paper we have shown how significantly smaller and more efficient decision circuits can be built than with the linear vertex elimination method in Bhattacharjya and Shachter [2007]. Given a target variable elimination order, we are able to exploit separate value nodes and conditionally independent subproblems to construct a branching structure over subproblems.", "startOffset": 154, "endOffset": 188}, {"referenceID": 18, "context": "Second, we could introduce product branching in addition to our (additive) branching to allow value functions with nested sums and products as in Tatman and Shachter [1990]. The corresponding operator is just the existing product operator.", "startOffset": 157, "endOffset": 173}], "year": 2010, "abstractText": "Decision circuits perform efficient evaluation of influence diagrams, building on the advances in arithmetic circuits for belief network inference [Darwiche, 2003; Bhattacharjya and Shachter, 2007]. We show how even more compact decision circuits can be constructed for dynamic programming in influence diagrams with separable value functions and conditionally independent subproblems. Once a decision circuit has been constructed based on the diagram\u2019s \u201cglobal\u201d graphical structure, it can be compiled to exploit \u201clocal\u201d structure for efficient evaluation and sensitivity analysis.", "creator": "TeX"}}}