{"id": "1208.3561", "review": {"conference": "ICML", "VERSION": "v1", "DATE_OF_SUBMISSION": "17-Aug-2012", "title": "Efficient Active Learning of Halfspaces: an Aggressive Approach", "abstract": "we study pool - based active learning of halfspaces, in which a learner receives a pool of unlabeled examples, and iteratively queries a teacher for the labels of examples from scanning the pool, in order order to identify all the labels of pool examples. we revisit the idea of greedily selecting examples to label, and use it to derive an efficient algorithm, called aluma, that approximates the optimal label complexity for a given pool based in $ \\ reals ^ d $. we show that only aluma obtains an $ o ( d ^ 2 \\ log ( d ) ) $ approximation factor if the examples in the pool are numbers with a finite accuracy. theoretically we further prove a result for general hypothesis classes, showing that a slight change to the intuitive greedy approach leads to an improved target - dependent guarantee on storing the label complexity. in particular, we conclude a better inclusion guarantee for aluma if the target hypothesis type has a large margin. we further compare our approach to study other common active learning strategies, and provide a theoretical and empirical evaluation of the advantages and disadvantages of the approach.", "histories": [["v1", "Fri, 17 Aug 2012 09:49:31 GMT  (1756kb,D)", "http://arxiv.org/abs/1208.3561v1", null], ["v2", "Wed, 19 Dec 2012 15:38:37 GMT  (1266kb,DS)", "http://arxiv.org/abs/1208.3561v2", "Full version of: Gonen, Sabato and Shalev-Shwartz, \"Efficient Active Learning of Halfspaces: an Aggressive Approach\", ICML 2013"], ["v3", "Sat, 25 May 2013 19:23:14 GMT  (2877kb,D)", "http://arxiv.org/abs/1208.3561v3", "Full version of: Gonen, Sabato and Shalev-Shwartz, \"Efficient Active Learning of Halfspaces: an Aggressive Approach\", ICML 2013"]], "reviews": [], "SUBJECTS": "cs.LG", "authors": ["alon gonen", "sivan sabato", "shai shalev-shwartz"], "accepted": true, "id": "1208.3561"}, "pdf": {"name": "1208.3561.pdf", "metadata": {"source": "CRF", "title": "Efficient Pool-Based Active Learning of Halfspaces", "authors": ["Alon Gonen"], "emails": ["alongnn@cs.huji.ac.il", "sabato@cs.huji.ac.il", "shais@cs.huji.ac.il"], "sections": [{"heading": null, "text": "000 001 002 003 004 005 006 007 008 009 010 011 012 013 014 015 016 017 018 019 020 021 022 023 024 025 026 027 028 029 030 031 032 033 034 035 036 037 038 039 040 041 042 043 044 045 046 047 048 049 050 051 052 053"}, {"heading": "1 Introduction", "text": "Pool-based active learning [McCallum and Nigam, 1998] is useful in many data-laden applications, where unlabeled data is abundant but labeling is expensive. In this setting the learner receives as input a set of instances, denoted X = {x1, . . . , xm}. Each instance xi is associated with a label L(i), which is initially unknown to the learner. The learner has access to a teacher, represented by the oracle L : [m] \u2192 {\u22121, 1}. The goal of the learner is to find the values L(1), . . . , L(m) using as few calls to L as possible. We assume that L is determined by a function h taken from a predefined hypothesis class H. That is, \u2203h \u2208 H such that for all i, L(i) = h(xi). We denote this by L W h. A pool-based algorithm can be used to learn a classifier in the standard PAC model, while querying fewer labels. We discuss this in Section 6. We mainly deal with the hypothesis class of homogeneous halfspaces in Rd, namely, X \u2282 Rd and H = {x 7\u2192 sgn(\u3008w, x\u3009) : w \u2208 Rd}, where \u3008w, x\u3009 is the inner product between the vectors w and x. The set of all hypotheses inH that are consistent with the labels that currently known to the learner is called the version space. Many active learning algorithms maintain a version space, and use it to decide which label to query next. For example, the CAL algorithm [Cohn et al., 1994] selects an instance at random and queries its label only if there are two hypotheses in the version space that disagree on its label. Tong and Koller [2002] proposed a more aggressive greedy selection policy for halfspaces: query the instance from the pool that splits the version space as evenly as possible, in terms of volume in Rd. To implement this policy, one would need to calculate the volume of a convex body (the version space), which is known to be computationally intractable. Tong and Koller implemented several heuristics that attempt to follow their proposed selection principle using an efficient algorithm. For instance, they suggest to choose the example which is closest to the maxmargin solution of the data labeled so far. However, none of their heuristics provably follow this\nar X\niv :1\n20 8.\n35 61\nv1 [\ncs .L\nG ]\n1 7\nA ug\n054 055 056 057 058 059 060 061 062 063 064 065 066 067 068 069 070 071 072 073 074 075 076 077 078 079 080 081 082 083 084 085 086 087 088 089 090 091 092 093 094 095 096 097 098 099 100 101 102 103 104 105 106 107\ngreedy selection policy. Our first contribution is an efficient algorithm, which relies on randomized approximation of the volume of the version space [e.g. Kannan et al., 1997]. This allows us to prove that our algorithm follows an approximate greedy rule for minimizing the volume of the version space.\nThe proposed algorithm can be theoretically analyzed as follows. Given a pool-based active learning algorithm A, denote by N(A, h) the number of calls to L that A makes before outputting (L(x1), . . . , L(xm)), for L W h. The worst-case label complexity of A is defined to be maxh\u2208HN(A, h) and the average-case label complexity ofA is defined to be Eh\u223cPN(A, h), where P is some predefined distribution over the hypothesis class H. We denote the optimal worst-case label complexity for the given pool by OPTmax and the optimal average label complexity (for some fixed distribution over hypotheses) by OPTavg.\nDasgupta [2005] showed that if an exact greedy algorithm splits the probability mass of the version space (as defined by P ) as evenly as possible, then its average label complexity using the same P is bounded by O(log(1/pmin) \u00b7 OPTavg), where pmin = minh\u2208H P (h). Golovin and Krause [2010] extended Dasgupta\u2019s result and showed that a similar bound holds for an approximate greedy rule. They also showed that the worst-case label complexity of an approximate greedy rule is at most O(log(1/pmin) \u00b7OPTmax), thus exending a result of Arkin et al. [1993]. The distribution P over hypotheses that matches our volume-splitting strategy is one that draws a halfspace uniformly from the unit ball in Rd.1 In this case P (h) is the probability mass of all the hypotheses inducing the same labeling as h on X . If there are instances in X that are very close to each other, then pmin might be very small. Our second contribution is to show that mild conditions suffice to guarantee that pmin is bounded from below. In particular, by proving a variant of a result due to Muroga et al. [1961], we show that if the examples in the pool X are stored using number of a finite accuracy 1/c, then pmin \u2265 (c/d)d 2\n. It follows that the worst-case label complexity of our algorithm is at most O(d2 log(d/c)) \u00b7OPTmax. While this result provides us with a uniform lower bound on pmin, in many real-world situations the probability of the target hypothesis (i.e., one that is consistent with L) could be much larger than pmin. A noteworthy example is when the target hypothesis separates X with a margin of \u03b3. In this case, it can be shown that the probability of the target hypothesis is at least \u03b3d, which can be significantly larger than pmin. An immediate question is therefore: can we obtain a target-dependent label complexity bound of log(1/P (h)) \u00b7OPTmax, where h is the target hypothesis? We prove that such a target dependent bound does not hold for a general approximate greedy algorithm. Nontheless, in our third main contribution we show that by introducing an algorithmic change to the approximate greedy policy, we do obtain the label complexity bound of log(1/P (h)) \u00b7OPTmax. In particular, we run an approximate greedy procedure, but stop the procedure early, before reaching a pure version space that exactly matches the labeling of the pool. We then use an approximate majority vote over the version space to determine the labels of X .\nWe also derive lower bounds, showing that the dependence of our label-complexity guarantee on the accuracy c, or the margin parameter \u03b3, is indeed necessary and is not an artifact of our analysis. We do not know if the dependence of our bounds on d is tight. It should be noted that some of the most popular learning algorithms (e.g. SVM, Perceptron, and AdaBoost) rely on a large-margin assumption to derive dimension-independent sample complexity guarantees. In contrast, here we use the margin for computational reasons. Our approximation guarantee depends logarithmically on the margin parameter, while the sample complexities of SVM, Perceptron, and AdaBoost depend polynomially on the margin. Hence, we require a much smaller margin than these algorithms do. Balcan et al. [2007] proposed an active learning algorithm with dimension-independent guarantees under a margin assumption. These guarantees hold for a restricted class of data distributions.\nLastly, we compare the greedy approach of our algorithm to other previously proposed active learning strategies, both theoretically and experimentally. We underscore cases in which it can be beneficial to apply an aggressive greedy approach instead of a more mellow selective-sampling approach, but also show that each approach has advantages and disadvantages in different cases. The empirical evaluation indicates that our algorithm, which can be implemented in practice, achieves state-of-theart results. It further suggests that aggressive approaches can be better than mellow approaches in\n1We discuss the challenges presented by other natural choices of P in Section 5\n108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161\nsome practical settings as well. In this work we do not treat the case of labeling errors\u2014this is left for future work.\nThe rest of the paper is organized as follows. We start in Section 2 with a formal statement of our main results, and present our algorithm and its analysis in Section 3. We give a proof sketch of our main theorem in Section 4, Proofs for the rest of the results are deferred to the appendix. In Section 5 we consider other possible solutions to the problem of efficient greedy learning of halfspaces, and discuss the challenges they present. Our comparison to other algorithms is given in Section 6."}, {"heading": "2 Main Results", "text": "Let P be a distribution over a hypothesis class H. Given the pool X = {x1, . . . , xm}, and some h \u2208 H, denote by P (h) the probability mass of the set {h\u2032 \u2208 H : \u2200i, h\u2032(xi) = h(xi)}. Let Vt \u2286 H be the version space of an active learner after t queries. For a given pool example x \u2208 X , denote by V jt,x the version spaces that would result if the algorithm now queried x and received label j. An algorithm A is called \u03b1-approximately greedy with respect to P , for \u03b1 \u2265 1, if at each iteration t = 1, . . . , T , the pool example x that A decides to query satisfies\nP (V 1t,x)P (V \u22121 t,x ) \u2265\n1 \u03b1 max x\u0303\u2208X P (V 1t,x\u0303)P (V \u22121 t,x\u0303 ),\nand the algorithm\u2019s output is (h(x1), . . . , h(xm)) for some h \u2208 VT . An algorithm is exactly greedy if it is approximately greedy with \u03b1 = 1.\nWe say thatA outputs an approximate majority vote if whenever VT is \u201cpure\u201d enough, the algorithm outputs the majority vote on VT . Formally, A outputs a \u03b2-approximate majority for \u03b2 \u2208 ( 12 , 1) if whenever there exists a labeling Z : X \u2192 {\u00b11} such that Ph\u223cP [Z W h | h \u2208 VT ] \u2265 \u03b2, A outputs Z. In the following theorem we provide a target-dependent label complexity bound, which holds for any approximate greedy algorithm that outputs an approximate majority vote.\nTheorem 1 Let X = {x1, . . . , xm}. Let H be a hypothesis class, and let P be a distribution over H. Suppose that A is \u03b1-approximately greedy with respect to P . Further suppose that it outputs a \u03b2-approximate majority vote. If A is executed with input (X,L, T ) where L W h \u2208 H and T \u2265 \u03b1(2 ln(1/P (h)) + ln( \u03b21\u2212\u03b2 )) \u00b7OPTmax, then A outputs L(1), . . . , L(m).\nDenote pmin = minh\u2208H P (h). When P (h) pmin, the bound in Theorem 1 is stronger than the guarantee \u2200h \u2208 H, N(A, h) \u2264 O(log(1/pmin) \u00b7 OPTmax), obtained by Golovin and Krause [2010]. Importantly, the following theorem shows that this improved bound cannot be obtained for a general approximate-greedy algorithm, even in a simple case such as the problem of thresholds on the line. In this setting, the examples are in [0, 1], and the hypothesis class includes all the hypotheses defined by a threshold on [0, 1]. FormallyHline = {hc | c \u2208 [0, 1], hc(x) = 1\u21d4 x \u2265 c}.2\nTheorem 2 Consider pool-based active learning on Hline, and assume that P on Hline selects hc by drawing the value c uniformly from [0, 1]. For any \u03b1 > 1 there exists an \u03b1-approximately greedy algorithm A such that for any m > 0 there exists a pool X \u2286 [0, 1] of size m, and a threshold c such that P (hc) = 1/2, while the label-complexity of A for LW hc is mlog(m) \u00b7OPTmax.\nInterestingly, this theorem does not hold for \u03b1 = 1, that is for the exact greedy algorithm. This follows from Theorem 7, which we state and prove in Section 6.\nSo far we have considered a general hypothesis class. We now discuss the class of halfspaces W . Recall that each halfspace can be described using a vector w from the unit ball of Rd. For simplicity, we will slightly overload notation and sometimes use w to denote the halfspace it determines. We let P be the distribution that selects a vector w uniformly from the unit ball in Rd. Our algorithm for halfspaces, which is called ALuMA, is described in Section 3. ALuMA receives as input an extra parameter \u03b4 \u2208 (0, 1), which serves as a measure of the desired confidence level. The following lemma shows that ALuMA has the desired properties described above with high probability.3\n2This setting is isomorphic to the case of homogeneous classifiers with examples on a line in R2. 3The definition of OPTmax requires an algorithm that always succeeds, while we allow ALuMA to fail with small probability. This restriction on OPTmax is made for convenience; The same approximation factor can be achieved when the optimal algorithm is allowed the same randomization power as ALuMA\u2014See Appendix B.\n162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215\nLemma 3 If ALuMA is executed with confidence \u03b4, then with probability 1 \u2212 \u03b4 over its internal randomization, ALuMA is 4-approximately greedy and outputs a 2/3-approximate majority vote. Furthermore, ALuMA is polynomial in the pool size, the dimension, and log(1/\u03b4).\nCombining the above lemma with Theorem 1 we immediately obtain that ALuMA\u2019s label complexity is O(log(1/P (h)) \u00b7 OPTmax). We can upper-bound log(1/P (h)) using the familiar notion of margin: For any hypothesis h \u2208 W defined by some w \u2208 Rd, let \u03b3(h) be the maximal margin of the labeling of X by h, namely \u03b3(h) = maxv:\u2016v\u2016=1 mini\u2208[m] h(xi)\u3008v, xi\u3009. It is possible to show (see Lemma 9 in Appendix A.2) that P (h) \u2265 \u2126(\u03b3(h)d). As a corollary we obtain:\nTheorem 4 Let X = {x1, . . . , xm} \u2286 Bd1, where Bd1 is the unit Euclidean ball of Rd. Let \u03b4 \u2208 (0, 1) be a confidence parameter. Suppose that ALuMA is executed with input (X,L, T, \u03b4), where L W h \u2208 W and T \u2265 4(2d ln(2/\u03b3(h)) + ln(2)) \u00b7OPTmax. Then, with probability of at least 1\u2212 \u03b4 over ALuMA\u2019s own randomization, it outputs L(1), . . . , L(m).\nWe can consider the minimal possible margin, \u03b3 = minh\u2208W \u03b3(h), and deduce from Theorem 4, or from the results of Golovin and Krause [2010], a uniform approximation factor of O(d log(1/\u03b3)). How small can \u03b3 be? The following result bounds this minimal margin from below under the reasonable assumption that the examples are represented by numbers of a finite accuracy.\nLemma 5 Let c > 0 be such that 1/c is an integer and suppose that X \u2282 {\u22121,\u22121 + c, . . . , 1\u2212 c, 1}d. Then, minh\u2208W \u03b3(h) \u2265 (c/ \u221a d)d+2.\nThe proof, given in Appendix A.3, is an adaptation of a classic result due to Muroga et al. [1961]. We conclude that pmin = \u2126((c/d)d 2\n), and deduce an approximation factor of d2 log(d/c) for the worst-case label complexity of ALuMA. The exponential dependence of the minimal margin on d here is necessary: As shown in Ha\u030astad [1994], the minimal margin can indeed be exponentially small, even if the points are taken only from {\u00b11}d. We also derive a lower bound, showing that the dependence of our bounds on \u03b3 or on c is necessary. Whether the dependence on d is also necessary is an open question for future work.\nTheorem 6 Fix \u03b1 \u2265 1. For any c > 0 with 1/c an integer, there exists a pool from {\u22121,\u22121 + c, . . . , 1 \u2212 c, 1}2, for which minh\u2208W \u03b3(h) = c/2, and any \u03b1-approximately greedy algorithm that outputs a majority vote will require \u2126 ( log(1/c)\nlog log(1/c) OPTmax\n) labels."}, {"heading": "3 The ALuMA algorithm", "text": "We now describe our algorithm, listed below as Alg. 1, and explain why Lemma 3 holds. We name the algorithm Active Learning under a Margin Assumption or ALuMA. Its inputs are the unlabeled sample X , the labeling oracle L, the maximal allowed number of label queries T , and the desired confidence \u03b4 \u2208 (0, 1). It returns the labels of all the examples in X . Two building blocks are required in order to implement an algorithm with the desired guarantees for halfspaces. First, we need to be able to select a pool-example that approximately maximizes P (V 1t,x) \u00b7 P (V \u22121t,x ). Second, we need to be able to output the majority vote of a version space that has a high enough purity level.\nFor the first building-block, we need to calculate the volumes of the sets V 1t,x and V \u22121 t,x . Both of these sets are convex sets obtained by intersecting the unit ball with halfspaces. The problem of calculating the volume of such convex sets in Rd is #P-hard if d is not fixed [Brightwell and Winkler, 1991]. Moreover, deterministically approximating the volume is NP-hard in the general case [Matous\u030cek, 2002]. Luckily, it is possible to approximate this volume using randomization. Specifically, in Kannan et al. [1997] a randomized algorithm is provided such that for any convex body K \u2286 Rd with an efficient separation oracle, with probability at least 1 \u2212 \u03b4 the algorithm returns a non-negative number \u0393 such that (1 \u2212 )\u0393 < P (K) < (1 + )\u0393. The algorithm is polynomial in d, 1/ , ln(1/\u03b4). ALuMA uses this algorithm to estimate P (V 1t,x) and P (V \u22121 t,x ) with sufficient accuracy. Using the guarantees of this algorithm and the constants in ALuMA, we can show that ALuMA is 4-approximately greedy with probability 1\u2212 \u03b4/2. We denote an execution of this algorithm on a convex body K by \u0393\u2190 VolEst(K, , \u03b4).\n216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269\nAlgorithm 1 The ALuMA algorithm 1: Input: X = {x1, . . . , xm}, L : [m]\u2192 {\u22121, 1}, T , \u03b4 2: I1 \u2190 [m], V1 \u2190 Bd1 3: for t = 1 to T do 4: \u2200i \u2208 It, j \u2208 {\u00b11}, do v\u0302xi,j \u2190 VolEst(V j t,xi , 1 3 , \u03b4 4mT )\n5: Select it \u2208 argmaxi\u2208It(v\u0302xi,1 \u00b7 v\u0302xi,\u22121) 6: It+1 \u2190 It \\ {it} 7: Request y = L(it) 8: Vt+1 \u2190 Vt \u2229 {w : y\u3008w, xit\u3009 > 0} 9: end for\n10: M \u2190 d72 ln(2/\u03b4)e. 11: Draw w1, . . . , wM 112 -uniformly from VT+1. 12: For each xi return the label yi = sgn (\u2211M j=1 sgn(\u3008wj , xi\u3009) ) .\nTo output an approximate majority vote from the final version space V , we would like to uniformly draw several hypotheses from V and label X according to a majority vote over these hypotheses. We can efficiently draw a hypothesis approximately uniformly from V , by using the hit-and-run algorithm [Lova\u0301sz, 1999]. For a convex bodyK, the hit-and-run algorithm runs O\u0303(d3/\u03bb2) steps and returns a random sample according to a distribution which is \u03bb-close in total-variation distance to the uniform distribution over K. Using the constants in ALuMA, we can show that ALuMA outputs a 2/3-approximate majority with probability 1\u2212 \u03b4/2."}, {"heading": "4 Proof Sketch for Theorem 1", "text": "We give here the main steps in the proof of Theorem 1. Fix a pool X . For any algorithm alg, denote by Vt(alg, h) the version space induced by the first n labels it queries if the true labeling of the pool is consistent with h. Denote the average version space reduction of alg after n queries by\nfavg(alg, n) = 1\u2212 Eh\u223cP [P (Vn(alg, h))]. Golovin and Krause [2010] prove that since A is \u03b1-approximately greedy, for any pool-based algorithm alg, favg(A, n) \u2265 favg(alg, k)\u2212 exp(\u2212n/\u03b1k). (1) Let opt be an algorithm that achieves OPTmax. It can be shown that for any hypothesis h \u2208 H and any active learner alg,\nfavg(opt,OPTmax)\u2212 favg(alg, n) \u2265 P (h)(P (Vn(alg, h))\u2212 P (h)). Combining this with Equation (1) we conclude that if A is \u03b1-approximately greedy then\nP (h) P (Vn(A, h)) \u2265 P (h)\n2\nexp(\u2212 n\u03b1OPTmax ) + P (h) 2 .\nThis means that if P (h) is large enough and we run an approximate greedy policy, then after a sufficient number of iterations, most of the remaining version space induces the correct labeling of the sample. Specifically, if n \u2265 \u03b1(2 ln(1/P (h)) + ln( \u03b21\u2212\u03b2 )) \u00b7OPTmax, then P (h)/P (Vn(A, h)) \u2265 \u03b2. SinceA outputs a \u03b2-approximate majority labeling from Vn(A, h),A returns the correct labeling."}, {"heading": "5 On the difficulties in greedy active-learning for halfspaces", "text": "At first glance it might seem that there are simpler ways to implement an efficient greedy strategy for halfspaces, by using a different distribution P over the hypotheses. For instance, if there are m examples in d dimensions, Sauer\u2019s lemma states that the effective size of the hypothesis class of halfspaces will be at most md. One can thus use the uniform distribution over this finite class, and greedily reduce the number of possible hypotheses in the version space, obtaining a d log(m) factor relative to the optimal label complexity. However, a direct implementation of this method will be exponential in d, and it is not clear whether this approach has a polynomial implementation.\n270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323\nAnother approach is to discretize the version space, by considering only halfspaces that can be represented as vectors on a d-dimensional grid {\u22121,\u22121 + c, . . . , 1\u2212 c, 1}d. This results in a finite hypothesis class of size (2/c+ 1)d, and we get an approximation factor of O(d log(1/c)) for the greedy algorithm, compared to an optimal algorithm on the same finite class. However, it is not clear whether a greedy algorithm for reducing the number of such vectors in a version space can be implemented efficiently, since even determining whether a single grid point exists in a given version space is NP-hard [see e.g. Matous\u030cek, 2002, Section 2.2].\nYet another possible direction for pool-based active learning is to greedily select a query whose answer would determine the labels of the largest amount of pool examples. The main challenge in this direction is how to analyze the label complexity of such an algorithm: it is unclear whether competitiveness with OPT can be guaranteed in this case. Investigating this idea, both theoretically and experimentally, is an important topic for future work. Note that the CAL algorithm Cohn et al. [1994], which we discuss in Section 6, can be seen as implementing a mellow version of this approach, since it decreases the so-called \u201cdisagreement region\u201d in each iteration.\nInspecting our margin-dependent guarantees, one may wonder if a margin assumption alone can guarantee that OPTmax is small. This is not the case, as evident by the following example, which is an adaptation of an example from Dasgupta [2005].\nExample 1 Let \u03b3 \u2208 (0, 12 ) be a margin parameter. Consider a pool of m points in R d, such that all the points are on the unit sphere, and for each pair of points x1 and x2, \u3008x1, x2\u3009 \u2264 1 \u2212 2\u03b3. It was shown in Shannon [1959] that for any m \u2264 O(1/\u03b3d), there exists a set of points that satisfy the conditions above. For any point x in such a pool, there exists a (biased) halfspace that separates x from the rest of the points with a margin of \u03b3. By adding a single dimension, this example can be transformed to one with homogeneous (unbiased) halfspaces. Each point in this pool can be separated from the rest of the points by a halfspace. Thus, if the correct labeling is all-positive, then all m examples need to be queried to label the pool correctly. Therefore OPTmax = m."}, {"heading": "6 Other Approaches: Theoretical and Empirical Comparison", "text": "We now compare the effectiveness of the approach implemented by ALuMA to other active learning strategies. ALuMA can be characterized by two properties: (1) its \u201cobjective\u201d is to reduce the volume of the version space and (2) at each iteration, it aggressively selects an example from the pool so as to (approximately) minimize its objective as much as possible (in a greedy sense). We discuss the implications of these properties by comparing to other strategies. Property (1) is contrasted with strategies that focus on increasing the number of examples whose label is known. Property (2) is contrasted with strategies which are \u201cmellow\u201d, in that their criterion for querying examples is softer.\nMuch research has been devoted to the challenge of obtaining a substantial guaranteed improvement of label complexity over regular \u201cpassive\u201d learning for halfspaces in Rd. Examples (for the realizable case) include the Query By Committee (QBC) algorithm [Seung et al., 1992, Freund et al., 1997], the CAL algorithm [Cohn et al., 1994], and the Active Perceptron [Dasgupta et al., 2005]. These algorithms are not \u201cpool-based\u201d but rather use \u201cselective-sampling\u201d: they sample one example at each iteration, and immediately decide whether to ask for its label. Out of these algorithms, CAL is the most mellow, since it queries any example whose label is yet undetermined by the version space. Its \u201cobjective\u201d can be described as reducing the number of examples which are labeled incorrectly, since it has been shown to do so in many cases [Hanneke, 2007, 2009, Friedman, 2009]. QBC and the active perceptron are less mellow. Their \u201cobjective\u201d is similar to that of ALuMA since they decide on examples to query based on geometric considerations.\nIn the first part of our comparison, we discuss the theoretical advantages and disadvantages of different strategies, by considering some interesting cases from a theoretical perspective. In the second part we report an empirical comparison of several algorithms and discuss our conclusions."}, {"heading": "6.1 Theoretical Comparison", "text": "The label complexity of the algorithms mentioned above is usually analyzed in the PAC setting, thus we translate our guarantees into the PAC setting as well for the sake of comparison. We define the ( ,m,D)-label complexity of an active learning algorithm to be the number of label queries that\n324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377\nare required in order to guarantee that given a sample of m unlabeled examples drawn from D, the error of the learned classifier will be at most (with probability of at least 1 \u2212 \u03b4 over the choice of sample). A a pool-based active learner can be used to learn a classifier in the PAC model by first sampling a pool of m unlabeled examples from D, then applying the pool-based active learner to this pool, and finally running a standard passive learner on the labeled pool to obtain a classifier. For the class of halfspaces, if we sample an unlabeled pool of m = \u2126\u0303(d/ ) examples, then the learned classifier will have an error of at most (with high probability over the choice of the pool).\nTo demonstrate the effect of the first property discussed above, consider again the simple case of thresholds on the line defined in Section 2. Compare two greedy pool-based active learners for Hline : The first follows a binary search procedure, greedily selecting the example that increases the number of known labels the most. Such an algorithm requires log(m) queries to identify the correct labeling of the pool. The second algorithm queries the example that splits the version space as evenly as possible. Theorem 1 implies a label complexity of O(log(m) log(1/\u03b3(h))) for such an algorithm, since OPTmax = log(m). However, a better result holds for this simple case:\nTheorem 7 In the problem of thresholds on the line, for any pool with labeling L, the exact greedy algorithm requires at most O(log(1/\u03b3(h))) labels. This is also the label complexity of any approximate greedy algorithm that outputs a majority vote.\nComparing the log(m) guarantee of the first algorithm to the log(1/\u03b3(h)) guarantee of the second, we reach the (unsurprising) conclusion, that the first algorithm is preferable when the true labeling has a small margin, while the second is preferable when the true labeling has a large margin. This simple example accentuates the implications of selecting the volume of the version space as an objective. A similar implication can be derived by considering the PAC setting, replacing the binary-search algorithm with CAL, and letting m = \u0398\u0303(1/ ). On the single-dimensional line, CAL achieves a label-complexity of O(log(1/ )) = O(log(m)), similarly to the binary search strategy we described. Thus when is large compared to \u03b3(h), CAL is better than being greedy on the volume, and the opposite holds when the condition is reversed. QBC will behave similarly to ALuMA in this setting.\nTo demonstrate the effect of the second property described above\u2014being aggressive versus being mellow, we consider the following example, adapted slightly from [Dasgupta, 2006].\nExample 2 Consider two circles parallel to the (x, y) plain in R3, one at the origin and one slightly above it. For a given , fix 2/ points that are evenly distributed on the top circle, and 2/ points at the same angles on the bottom circle (see left illustration below). The distribution D is an uneven mix of a uniform distribution over the points on the top circle and one over the points of the bottom circle: The top circle is given a much higher probability. All homogeneous separators label half of the bottom circle positively, but an unknown part of the top circle (see right illustration). The bottom points can be very helpful in finding the correct separator fast, but their probability is low.\n+\u2212 +\u2212\nDasgupta has demonstrated via this example that active learning can gain in label complexity from having significantly more unlabeled data. The following theorem shows that the aggressive strategy employed by ALuMA indeed achieves an exponential improvement when there are more unlabeled samples. In contrast, the mellow strategy of CAL does not significantly improve over passive learning in this case. We note that these results hold for any selective-sampling method that guarantees a similar error rate to passive ERM given the same sample size.\nTheorem 8 For all small enough \u2208 (0, 1) there is a distribution D of points in R3, such that \u2022 For m = O(1/ ), the ( ,m,D )-label complexity of any active learner is \u2126(1/ ). \u2022 For m = \u2126(log2(1/ )/ 2), the ( ,m,D )-label complexity of ALuMA is O(log2(1/ )). \u2022 For any value of m, the ( ,m,D )-label complexity of CAL is \u2126(1/ ).\n378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431\nIn many applications, unlabeled examples are virtually free to sample, thus it can be worthwhile to allow the active learner to sample more examples than the passive sample complexity.4 We show in Appendix C another example in which the label complexity of CAL can be significantly worse than that of the optimal algorithm, even without more unlabeled examples. These examples strengthen the observation of Balcan et al. [2007] that in some cases a more aggressive approach is preferable.\nOn the other hand, CAL has a guaranteed label complexity for cases for which ALuMA currently has none. Its label complexity is bounded by O\u0303(d\u03b8 log(1/ )), where \u03b8 is the disagreement coefficient, a quantity that depends on the distribution and the target hypothesis [Hanneke, 2007, 2009]. Specifically, if D is uniform over a sphere centered at the origin, then for all target hypotheses \u03b8 = \u0398( \u221a d). Thus CAL achieves an exponential improvement over passive learning for this canonical example."}, {"heading": "6.2 Empirical Comparison", "text": "Figure 1: MNIST (3 vs. 5)We carried out an empirical comparison between the al-\ngorithms discussed above. Our goal is twofold: First, to evaluate ALuMA in practice, and second, to compare the performance of aggressive strategies compared to mellow strategies. The aggressive strategies are represented in this evaluation by ALuMA and one of the heuristics proposed by Tong and Koller [2002]. The mellow strategy is represented by CAL. QBC represents a middle-ground between aggressive and mellow. We also compare to a passive ERM algorithm\u2014one that uses random labeled examples. We evaluated the algorithms over synthetic and real data sets and compared their label complexity performance. Details on our implementations and additional results are provided in Appendix D.\nIn the first experiment the data was digits 3 and 5 from the MNIST dataset. Figure 1 depicts the training error as a function of the label budget. It is striking to observe that CAL provides no improvement over passive ERM in the first 1000 examples, while this budget suffices to reach zero training error for ALuMA and TK. More results for MNIST and for another real data set can be found in Appendix D. In these experiments, the more aggressive learners consistently perform better.\nThe next experiment shows that ALuMA and TK outperform CAL and QBC even on a data sampled from the uniform distribution on a sphere in Rd (see Figure 2). This result, and a similar one reported in the appendix, suggest that ALuMA might have a better guarantee than the general competitive result in case of the uniform distribution. This is an open question which is left for future work.\nFigure 2: Uniform distribution (d = 100).\nTo summarize, in all of our tests, aggressive algorithms performed better than mellow ones. These results are not fully explained by current theory. The experiments also show that ALuMA and TK have comparable success in practice. One might hope that TK enjoys similar theoretical guarantees to those of ALuMA. In Appendix D we report a synthetic experiment that suggests the contrary.\n4In the limit of an infinite number of unlabeled examples, if the distribution has a non-zero support on the entire domain, the pool-based setting becomes identical to the setting of membership queries [Angluin, 1988]. In contrast, we are interested in finite samples.\n432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485"}, {"heading": "A Proofs", "text": "A.1 Proof of Theorem 2\nFor the hypothesis classHline, the possible version spaces after a partial run of an active learner are all of the form [a, b] \u2286 [0, 1]. First, it is easy to see that binary search on the pool will identify any hypothesis in [0, 1] using log(m) example, thus OPTmax = log(m).\nNow, Consider an active learning algorithm that satisfies the following properties:\n\u2022 If the current version space is [a, b], it selects x \u2208 X such that x = min{x | (x\u2212a)(b\u2212x) \u2265 1 \u03b1 maxx\u0303\u2208X\u2229[a,b](x\u0303\u2212 a)(b\u2212 x\u0303)}.\n\u2022 When the budget of queries is exhausted, if the version space is [a, b], label the points above a as positive and the rest as negative.\nIt is easy to see that this algorithm is \u03b1-approximately greedy, since in this problem V 1t,x \u00b7 V \u22121t,x = (x\u2212a)(b\u2212x) for all x \u2208 [a, b] = Vt. Now for a given pool sizem \u2265 2, consider a pool of examples defined as follows. First, let x1 = 1, x2 = 1/2 and x3 = 0. Second, for each i \u2265 3, define xi+1 recursively as the solution to (xi+1 \u2212 xi)(1 \u2212 xi+1) = 1\u03b1 (1/2 \u2212 xi)(1 \u2212 1/2) = 1 2\u03b1 (1/2 \u2212 xi). Since \u03b1 > 1, it is easy to see by induction that for all i \u2265 3, xi+1 \u2208 (xi, 12 ). Furthermore, suppose the true labeling is induced by h3/4; Thus the only pool example with a positive label is x1, and P (h3/4) = 1/2. In this case, the algorithms we just defined will query all the pool examples x4, x5, . . . , xm in order, and only then will it query x2 and finally x1. If stopped at any time t \u2264 m\u22121, it will label all the points that it has not queried yet as positive, thus if t < m\u22121 the output will be an erroneous labeling. Finally, note that the same holds for the pool x1, x2, x4, . . . , xm that does not include x3, so the algorithm must query this entire pool to identify the correct labeling.\nA.2 Proof of lower bound for pmin\nLemma 9 For all h \u2208 W , P (h) \u2265 ( \u03b3(h) 2 )d .\nProof Let V = {h\u2032 \u2208 H : \u2200i, h\u2032(xi) = h(xi)}. Choose w \u2208 Bd1 such that \u2200x \u2208 X, h(x)\u3008w, x\u3009 \u2265 \u03b3. For a given v \u2208 Bd1, denote by hv \u2208 H the mapping x 7\u2192 sgn(\u3008v, x\u3009). Note that for all v \u2208 Bd1 such that \u2016w \u2212 v\u2016 < \u03b3, hv \u2208 V . This is because for all x \u2208 X ,\nh(x)\u3008v, x\u3009 = \u3008v \u2212 w, h(x) \u00b7 x\u3009+ h(x)\u3008w, x\u3009 \u2265 \u2212\u2016w \u2212 v\u2016 \u00b7 \u2016h(x) \u00b7 x\u2016+ \u03b3 > \u2212\u03b3 + \u03b3 = 0,\nwhich implies sgn(\u3008v, x\u3009) = h(x). It follows that {v | hv \u2208 V } \u2287 Bd1 \u2229 B(w, \u03b3), where B(z, r) denotes the ball of radius r with center at z. Let u = (1\u2212 \u03b3/2)w. Then for any z \u2208 B(u, \u03b3/2), we have z \u2208 Bd1, since\n\u2016z\u2016 = \u2016z \u2212 u+ u\u2016 \u2264 \u2016z \u2212 u\u2016+ \u2016u\u2016 \u2264 \u03b3/2 + 1\u2212 \u03b3/2 = 1.\nIn addition, z \u2208 B(w, \u03b3) since\n\u2016z \u2212 w\u2016 = \u2016z \u2212 u+ u\u2212 w\u2016 \u2264 \u2016z \u2212 u\u2016+ \u2016u\u2212 w\u2016 \u2264 \u03b3/2 + \u03b3/2 = \u03b3.\nTherefore B(u, \u03b3/2) \u2286 Bd1 \u2229B(w, \u03b3). We conclude that {v | hv \u2208 V } \u2287 B(u, \u03b3/2). Thus,\nP (h) = Pr P\n[V ] \u2265 Vol(B(u, \u03b3/2))/Vol(Bd1) \u2265 (\u03b3\n2\n)d .\n540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593\nA.3 Proof of Lemma 5\nLet us multiply all examples in the pool by 1/c. Then, all the elements of all examples in the pool are integers. Choose a labeling L which is consistent with some w\u2217. Consider the optimization problem:\nmin w \u2016w\u20162 s.t. \u2200i, L(i)\u3008w, xi\u3009 \u2265 1 .\nFor simplicity assume that the pool of examples span all of Rd. Then, it is easy to show that if w the solution to the above problem then there exist d linearly independent examples from the pool, denoted w.l.o.g. by x1, . . . , xd, such that L(i)\u3008w, xi\u3009 = 1 for all i. In other words, w is the solution of the linear system Aw = b where the rows of A are x1, . . . , xd and b = (L(1), . . . , L(m))T .\nBy Cramer\u2019s rule, wi = det(Ai)/det(A), where Ai is obtained by replacing column i of A by the vector b. Since all elements of A are integers and A is invertible, we must have that |det(A)| \u2265 1. Therefore, |wi| \u2264 |det(Ai)|. Furthermore, by Hadamard\u2019s inequality, |det(Ai)| is upper bounded by the product of the norms of the columns of Ai. Since each element of Ai is upper bounded by 1/c, we obtain that the norm of each column is at most \u221a d c , hence |det(Ai)| \u2264 ( \u221a d/c)d. It follows that\n\u2016w\u2016 \u2264 \u221a d ( \u221a d/c)d. Hence, the margin is\n1 \u2016w\u2016 maxi \u2016xi\u2016 \u2265 1\u221a d ( \u221a d/c)d \u00b7 \u221a d/c = 1\u221a d ( \u221a d/c)d+1 .\nA.4 Proof of Theorem 6\nFor any m, consider the pool X = {(\u22121, 1)} \u222a {(1 \u2212 2\u2212k, 1) : k = 0, 1, . . . ,m \u2212 2} \u2282 R2, as illustrated below.\nBy following a binary search, the optimal algorithm can identify all the labels using log(m) queries. In contrast, it is easy to verify that the exact greedy algorithm will query all the points if all the examples but the rightmost are negative. We therefore obtain the approximation factor ofm/ log(m) on the label complexity compared to the optimal algorithm. Since the points lie on the grid with c = 2\u2212(m\u22122) we obtain that the approximation factor is order of log(1/c)/ log log(1/c). It is also easy to verify that the margin here is order of c. For an approximately-greedy strategy, the example can be adapted by replacing 1 \u2212 2\u2212k with 1 \u2212 a\u2212k for a \u2248 \u03b1, to make sure that the approximately-greedy strategy will query all the points in the same case. Thus in this case we get m \u2248 log(1/c)/ log(\u03b1).\nA.5 Proof of Theorem 7\nFirst, assume that the algorithm is exactly greedy. A version space for Hline is described by a segment in [a, b] \u2286 [0, 1], and a query at point \u03b1 results in a new version space, [a, \u03b1] or [\u03b1, b], depending on the label. We now show that for every version space [a, b], at most two greedy queries suffice to either reduce the size of the version space by a factor of at least 2/3, or to determine the labels of all the points in the pool.\nAssume for simplicity that the version space is [0, 1], and denote the pool of examples in the version space by X . Assume w.l.o.g. that the greedy algorithm now queries \u03b1 \u2264 12 . If \u03b1 > 1/3, then any answer to the query will reduce the version space size to less than 2/3. Thus assume that \u03b1 \u2264 1/3. If the query answer results in the version space [0, \u03b1) then we are done since this version space is smaller than 2/3. We are left with the case that the version space after querying \u03b1 is [\u03b1, 1]. Since the algorithm is greedy, it follows that for \u03b2 = min{x \u2208 X | x \u2265 \u03b1}, we have \u03b2 \u2265 1 \u2212 \u03b1: this is because if there was a point \u03b2 \u2208 (\u03b1, 1 \u2212 \u03b1), it would cut the version space more evenly than \u03b1, in contradiction to the greedy choice of \u03b1. Note further that (\u03b1, 1 \u2212 \u03b1) is larger than [1 \u2212 \u03b1, 1] since\n594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647\nbn1\nbn2\nbn3bn4 +-\nan3an4 +-\nFigure 3: Illustration for the proof of Theorem 8.\n\u03b1 \u2264 1/3. Therefore, the most balanced choice for the greedy algorithm is \u03b2. If the query answer for \u03b2 cuts the version space to (\u03b2, 1] then we are done, since 1 \u2212 \u03b2 \u2264 \u03b1 \u2264 1/3. Otherwise, the query answer leaves us with the version space (\u03b1, \u03b2). This version space includes no more pool points, by the definition of \u03b2. Thus in this case the algorithm has determined the labels of all points.\nIt follows that if the algorithm runs at least t iterations, then the size of the version space after t iterations is at most (2/3)t/2. If the true labeling has a margin of \u03b3, we conclude that (2/3)t/2 \u2265 \u03b3, thus t \u2264 O(log(1/\u03b3)). A similar argument can be carried for ALuMA, using a smaller bound on \u03b1 and more iterations due to the approximation, and noting that if the correct answer is in (\u03b1, 1\u2212\u03b1) then a majority vote over thresholds drawn randomly from the version space will label the examples correctly.\nA.6 Proof of Theorem 8\nProof Assume that 1/(2 ) is an odd integer and < 1/8. Let Da be the uniform distribution over points on the top circle, defined by\nSa = {an def = ( 1\u221a 2 cos 2\u03c0 n, 1\u221a 2 sin 2\u03c0 n, 1\u221a 2 ) : n \u2208 {0, 1, . . . , 1/ \u2212 1}} .\nLet Db be the uniform distribution over points on the bottom circles, defined by\nSb = {bn def = (cos 2\u03c0 n, sin 2\u03c0 n, 0) : n \u2208 {0, 1, . . . , 1/ \u2212 1}} .\nLetD /2 be the distribution (1\u2212\u03c4)Da+\u03c4Db, where \u03c4 = 4 log(4/ ) . Note that in order to labelD /2 correctly with error no more than /2, all the labels of points in Sa need to be determined. We prove each of the theorem statements in order. We consider the label complexity with high probability over the choice of unlabeled sample, where high probability is 1\u2212 \u03b4 for some fixed \u03b4 \u2208 (0, 1/2).\nPart I If the unlabeled sample contains only points from Sa, then an active learner has to query all the points in Sa to distinguish between a hypothesis that labels all of Sa positively and one that labels positively all but one point in Sa. Since the probability of the entire set Sb is o( ), an i.i.d. sample of size O(1/ ), will not contain a point from Sb, thus any active learner will require \u2126(1/ ) labels.\nPart II Assume now that the size of the sample is at least 4 log(4/ ) log(1/( \u03b4)) 2 . It is easy to check that with probability at least 1\u2212\u03b4, the sample contains all the points in Sa\u222aSb. Given such a sample as a pool, we now show that OPTmax = O(log(1/ ), by describing an active learning algorithm that achieves this label complexity:\n1. For all possible separators, the points b0 = (1, 0, 0) and b1/2 = (\u22121, 0, 0) have different labels. The algorithm will first query these initial points, and then apply a binary search to find the boundary between negative and positive labels in Sb. This identifies the labels of all the points in Sb using O(log(1/ )) queries.\n648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701\n2. Of the points in Sb, half are labeled positively and half negatively. Moreover, there are n1, n2 and y \u2208 {\u22121, 1} such that bn1 , . . . , bn2 are all labeled by y, and n2 \u2212 n1 + 1 = |Sb|/2 = 12 (see illustration in Figure 3). Let n3 = n2+n1 2 (this is the middle point with\nlabel y). n3 is an integer because n2 \u2212 n1 is even, thus their sum is also even. Let n4 = mod (n3 + 1/2 , 1/2 ). Query the points an3 and an4 for their label.\n3. If an3 and an4 each have a different label, apply a binary search starting from these points to find the boundaries between positive and negative labels in Sa, using O(log(1/ )) queries. Otherwise, label all the examples in Sa by the label of an3 .\nThis algorithm uses O(log(1/ )) queries to label the sample. If an3 and an4 have different labels, it is clear that the algorithm labels all the examples correctly. We only have left to prove that if they both have the same label, then all the examples in Sa also share that label. Let h\u2217 be the true hypothesis, defined by some homogeneous separator, and assume w.l.o.g that {bn | h\u2217(bn) = 1} = {bn \u2208 Sb | bn[1] > 0} (note that no point has bn[1] = 0 since 1/2 is odd). It follows that n3 = 0 and n4 = 1/2 , thus an3 = (1/ \u221a 2, 0, 1/ \u221a 2) and an4 = (\u22121/ \u221a 2, 0, 1/ \u221a 2) (see illustration in Figure 3). We prove the following lemma below:\nLemma 10 Assume 1/2 is odd. If {bn \u2208 Sb | h\u2217(bn) = 1} = {bn | bn[1] > 0} and h\u2217(a0) = h\u2217(a1/2 ) = y then \u2200an \u2208 Sa, h\u2217(an) = y.\nIf follows that OPTmax = O(log(1/ )).\nTo bound the label complexity of ALuMA, it suffices to bound from below the minimal margin of possible separators over the given sample. Let h\u2217 be the correct hypothesis. By the same argument as in the proof of Lemma 5, there exists some w \u2208 R3 that labels the sample identically to h\u2217 and attains its maximal margin on three linearly independent points a, b, c from our sample. Hence, Aw = 1 where A \u2208 R3\u00d73 is the matrix whose rows are a, b, c \u2208 Sa \u222a Sb. By Cramer\u2019s rule, for every i \u2208 [3]\nw[i] = detAi detA ,\nwhereAi is the matrix obtained fromA by replacing the ith column with the vector 1. Recall that the absolute value of the determinant of A is the volume of the parallelepiped whose sides are a, b and c. Since a, b, c are linearly independent, each of Sa and Sb includes at most two of them. Assume that a, b \u2208 Sa and c \u2208 Sb. In this case, the surface area of the basis of this parallelepiped, defined by a and b, is at least sin 2\u03c0 \u221a\n2 , and the height is 1/\n\u221a 2. Hence,\n|detA| \u2265 sin 2\u03c0 2 = \u2126( ) .\nThe case where two of the points are in Sb leads to an even larger lower bound. Since the elements in each Ai are in [\u22121, 1], we also have that |detAi| \u2264 3! = 6. Thus, for i \u2208 [3] we obtain that wi = O(1/ ). All in all, we get \u2016w\u20162 = O(1/ ), and thus \u03b3(h\u2217) = \u2126( ) .Applying Theorem 4, we obtain that ALuMA classifies all the points correctly using O(log(1/\u03b3(h\u2217)) \u00b7 OPTmax) = O(log2(1/ )) labels.\nPart III CAL examines the examples sequentially at a random order, and queries the label of any point whose label is not determined by previous examples. Thus, if the true hypothesis is all-positive on Sa, and CAL sees all the points in Sa before seeing any point in Sb, it will request \u2126(1/ ) labels. Hence, it suffices to show that there is a large probability that CAL will indeed examine all of Sa before examining any point from Sb. Let A be the event that the first 1 log 4 examples of an i.i.d. sample contain any element from Sb. Then, by the union bound, P(A) \u2264 1 log( 4 ) \u00b7\n4 log 4\n= 1/4.\nAssume now that A does not occur. Let B be the event that the first 1 log 1 examples do not contain all the elements in Sa. Then, by the union bound, P (B) \u2264 1 (1 \u2212 ) 1 log 4 \u2264 1/4. All in all, with probability at least 1/2, CAL see all the points in Sa before seeing any point in Sb and thus its label complexity is \u2126(1/ ).\nProof [of Lemma 10] We prove the lemma for the case h\u2217(a1/2 ) = 1. The case h\u2217(a0) = \u22121 can be proved similarly. Let w\u2217 be any hyperplane which is consistent with h\u2217. Let n1 = 14 \u2212 1 2 and let\n702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755\nn2 = n1 + 1. Then\nbn1 = (cos(\u03c0/2\u2212 \u03c0 ), sin(\u03c0/2\u2212 \u03c0 ), 0), and bn2 = (cos(\u03c0/2 + \u03c0 ), sin(\u03c0/2 + \u03c0 ), 0).\nBy the assumption of the lemma, \u3008w\u2217, bn1\u3009 > 0 and \u3008w\u2217, bn2\u3009 < 0. It follows that w\u2217[1] sin\u03c0 > w\u2217[2] cos\u03c0 and \u2212w\u2217[1] sin\u03c0 < w\u2217[2] cos\u03c0 . As a consequence, we obtain that |w\u2217[2]| < w\u2217[1] tan(\u03c0 ).\nNow, choose some n \u2208 {0, . . . , 1/ \u2212 1}. We show that the corresponding element in Sa is labeled positively. First, from the last inequality, we obtain\n\u3008w\u2217, an\u3009 = 1\u221a 2 \u3008w\u2217, (cos 2\u03c0 n, sin 2\u03c0 n, 1)\u3009\n\u2265 1\u221a 2 (w\u22171(cos 2\u03c0 n\u2212 tan(\u03c0 ) sin(2\u03c0 n)) + w\u22173). (2)\nWe will now show that\n\u2200n \u2208 {0, 1, . . . , 1/ \u2212 1}, cos 2\u03c0 n\u2212 tan(\u03c0 ) sin(2\u03c0 n) \u2265 \u22121. (3)\nFrom symmetry, it suffices to prove this for every n \u2208 {0, 1, . . . , 1/(2 ) \u2212 1}. We divide our range and conclude for each part separately; since < 1/8, we have that tan \u03c0 < 1. Then, cos\u03b1 \u2212 tan(\u03c0 ) sin\u03b1 \u2265 \u22121 in the range \u03b1 \u2208 [0, \u03c0/2]. For \u03b1 \u2208 [\u03c0/2, \u03c0 \u2212 \u03c0 ], it can be shown that the function cos\u03b1\u2212 tan(\u03c0 ) sin\u03b1 is monotonically decreasing, thus it suffices to show that the inequality holds for n = 1/(2 )\u2212 1. Indeed,\ncos(\u03c0 \u2212 2 \u03c0)\u2212 tan( \u03c0) sin(\u03c0 \u2212 2 \u03c0) = \u2212 cos(2\u03c0 )\u2212 2 sin2(\u03c0 ) = \u2212 cos2(\u03c0 )\u2212 sin2(\u03c0 ) = \u22121 .\nTherefore, we obtain from Equation (2) and Equation (3) that\n1\u221a 2 \u3008w\u2217, an\u3009 \u2265 1\u221a 2\n(\u2212w\u2217[1] + w\u2217[3]) = \u3008w\u2217, (\u22121/ \u221a 2, 0, 1/ \u221a 2)\u3009 = \u3008w\u2217, a1/2 \u3009 > 0,\nwhere the last inequality follows from the assumption that h\u2217(a1/2 ) = 1."}, {"heading": "B Randomization in the Optimal Algorithm", "text": "Recall that ALuMA is allowed to use randomization, and it can fail to output the correct label with probability \u03b4. In contrast, in the definition of OPTmax we required that the optimal algorithm always succeeds, in effect making it deterministic. One may suggest that the approximation factor we achieve for ALuMA in Theorem 4 is due to this seeming advantage for ALuMA. We now show that this is not the case\u2014the same approximation factor can be achieved when ALuMA and the optimal algorithm are allowed the same probability of failure. Let m be the size of the pool and let d be the dimension of the examples, and set \u03b40 = 12md . Denote by N\u03b4(A, h) the number of calls to L that A makes before outputting (L(x1), . . . , L(xm)) with probability at least 1 \u2212 \u03b4, for L W h. Define OPT\u03b40 = minA maxhN\u03b40(A, h).\nFirst, note that by setting \u03b4 = \u03b40 in ALuMA, we get that N\u03b4(ALuMA, h) \u2264 O(log(1/P (h)) \u00b7 OPTmax). Moreover, ALuMA with \u03b4 = \u03b40 is polynomial in m and d (since it is polynomial in ln(1/\u03b4)). Second, by Sauer\u2019s lemma there are at most md different possible labelings for the given pool. Thus by the union bound, there exists a fixed choice of the random bits used by an algorithm that achieves OPT\u03b40 , that leads to the correct identification of the labeling for all possible labelings L(1), . . . , L(m). It follows that OPT\u03b40 = OPTmax. Therefore the same factor of approximation can be achieved for ALuMA with \u03b4 = \u03b40, compared to OPT\u03b40 .\n756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809\nC Example: Gap between OPT and CAL\nExample 3 Consider a distribution in Rd that is supported by two types of points on an octahedron (see an illustration for R3 below).\n1. Vertices: {e1, . . . , ed}.\n2. Face centers: z/d for z \u2208 {\u22121,+1}d.\nConsider the hypothesis classW = {x 7\u2192 sgn(\u3008x,w\u3009\u22121+ 1d ) | w \u2208 {\u22121,+1} d}. Each hypothesis inW , defined by some w \u2208 {\u22121,+1}d, classifies at most d + 1 data points as positive: these are the vertices ei for i such that w[i] = +1, and the face center w/d.\nTheorem 11 Consider Example 3 for d \u2265 3, and assume that the pool of examples includes the entire support of the distribution. There is an efficient algorithm that finds the correct hypothesis fromW with at most d labels. On the other hand, with probability at least 1e over the randomization of the sample, CAL uses at least 2\nd+d 2d+3 labels to find the correct separator.\nProof First, it is easy to see that if h\u2217 \u2208 W is the correct hypothesis, then\nw = (h\u2217(e1), . . . , h \u2217(ed)).\nThus, it suffices to query the d vertices to discover the true w.\nWe now show that the number of queries CAL asks until finding the correct separator is exponential in d. CAL inspects the unlabeled examples sequentially, and queries any example whose label cannot be inferred from previous labels. Consider some run of CAL (determined by the random ordering of the sample). Assume w.l.o.g. that each data point appears once in the sample. Let S be the set that includes the positive face center and all the vertices. Note that CAL cannot terminate before either querying all the 2d \u2212 1 negative face centers, or querying at least one example from S. Moreover, CAL will query all the face centers it encounters before encountering the first example from S. At each iteration t before encountering an example from S, there is a probability of d+1\n2d+d\u2212t\nthat the next example is from S. Therefore, the probability that the first T = 2 d+d\n2d+3 examples are not from S is\nT\u22121\u220f t=0 ( 1\u2212 d+ 1 2d + d\u2212 t ) \u2265 ( 1\u2212 d+ 1 2d + d\u2212 T )T \u2265 e\u22122T d+1 2d+d\u2212T = e \u22122(d+1) 2d+d T \u22121 = 1 e ,\nwhere in the second equality we used 1\u2212 a \u2265 exp(\u22122a) which holds for all a \u2208 [0, 12 ]. Therefore, with probability at least 1e the number of queries is at least 2d+d 2d+3 ."}, {"heading": "D Additional Experiments", "text": "In this appendix we provide the details on our implementation of the algorithms in our experiments. We also provide results of additional experiments comparing ALuMA, TK, CAL, QBC and passive ERM. Our implementation of ALuMA uses hit-and-run samples instead of full-blown volume estimation. QBC is also implemented using hit-and-run as in Gilad-Bachrach et al. [2005]. For both ALuMA and QBC, we used a fixed number of mixing iterations for hit-and-run, which we set to\n810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860\nFigure 4: Left: MNIST 4 vs. 7. Right: PCMAC\n1000. We also fixed the number of sampled hypotheses at each iteration of ALuMA to 1000, and used the same set of hypotheses to calculate the majority vote for classification. CAL and QBC examine the examples sequentially, thus the input provided to them was a random ordering of the example pool. The algorithm TK is the first heuristic proposed in Tong and Koller [2002], in which the example chosen at each iteration is the one closest to the max-margin solution of the labeled examples known so far. Since the active learners operate by reducing the training error, the graphs below compare the training errors of the different algorithms. The test errors show a similar trend.\nIn each of the algorithms, the classification of the training examples is done using the version space defined by the queried labels. The theory for CAL and ERM allows selecting an arbitrary predictor out of the version space. In QBC, the hypothesis should be drawn uniformly at random from the version space. We have found that all the algorithms show a significant improvement in classification error if they classify using the majority vote classification proposed for ALuMA. Therefore, in all of our experiments below, the results for all the algorithms are based on a majority vote classification.\nOur first data set is MNIST5. The examples in this data set are gray-scale images of handwritten digits in dimension 784. Each digit has about 6, 000 training examples. We performed binary active learning by pre-selecting pairs of digits. One experiment was already reported in Section 6.2. The second experiments is reported in Figure 4 (left): In this case we trained the active learners on data of the the digits 4 and 7, which are linearly separable just like 3 and 5. The results are very similar to those obtained for the digits 3 and 5.\nWe also tested the algorithms on the PCMAC dataset6. This is a real-world data set, which represents a two-class categorization of the 20-Newsgroup collection. The examples are web-posts represented using bag-of-words. The original dimension of examples is 7511. We used the JohnsonLindenstrauss projection to reduce the dimension to 300, which kept the data still separable. We used a training set of 1000 examples. Figure 4 (right) depicts the results. We were not able to run QBC long enough to use its entire label budget, as it tends to become slower when the training error becomes small.\nFor the uniform distribution, Figure 5 depicts the training error as a function of the label budget when learning a random halfspace over the uniform distribution in R10. The difference between the performance of the different algorithms is less marked for d = 10 than for d = 100 (see Section 6.2), suggesting that the difference grows with the dimension.\nd ALuMA TK QBC CAL ERM 10 29 156 50 308 1008 12 38 735 113 862 3958 15 55 959 150 2401 > 20000\n864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917\nFigure 5: Uniform distribution (d = 10).\nFinally, we report a synthetic experiment. In this experiment the pool of examples is taken to be the support of the distribution described in Example 3, with an additional dimension to account for halfspaces with a bias. We also added the negative vertices\u2212ei to the pool. Similarly to the proof of Theorem 11, it suffices to query the vertices to reach zero error. Table 1 lists the number of iterations required in practice to achieve zero error by each of the algorithms. In this experiment, unlike the rest, ALuMA is not only much better than QBC and CAL, it is also much better than TK, which is worse even than QBC here. This suggests that TK might not have guarantees similar to those of ALuMA, despite the fact that they both attempt to minimize the same objective. The number of queries ALuMA requires is indeed close to the number of vertices."}], "references": [{"title": "Queries and concept learning", "author": ["D. Angluin"], "venue": "Machine learning,", "citeRegEx": "Angluin.,? \\Q1988\\E", "shortCiteRegEx": "Angluin.", "year": 1988}, {"title": "Decision trees for geometric models", "author": ["E.M. Arkin", "H. Meijer", "J.S.B. Mitchell", "D. Rappaport", "S.S. Skiena"], "venue": "In Proceedings of the ninth annual symposium on Computational geometry,", "citeRegEx": "Arkin et al\\.,? \\Q1993\\E", "shortCiteRegEx": "Arkin et al\\.", "year": 1993}, {"title": "Margin based active learning", "author": ["M.F. Balcan", "A. Broder", "T. Zhang"], "venue": "Learning Theory, pages", "citeRegEx": "Balcan et al\\.,? \\Q2007\\E", "shortCiteRegEx": "Balcan et al\\.", "year": 2007}, {"title": "Counting linear extensions is #p-complete", "author": ["G. Brightwell", "P. Winkler"], "venue": "In Proceedings of the twenty-third annual ACM symposium on Theory of computing,", "citeRegEx": "Brightwell and Winkler.,? \\Q1991\\E", "shortCiteRegEx": "Brightwell and Winkler.", "year": 1991}, {"title": "Improving generalization with active learning", "author": ["D. Cohn", "L. Atlas", "R. Ladner"], "venue": "Machine Learning,", "citeRegEx": "Cohn et al\\.,? \\Q1994\\E", "shortCiteRegEx": "Cohn et al\\.", "year": 1994}, {"title": "Analysis of a greedy active learning strategy", "author": ["S. Dasgupta"], "venue": "Advances in neural information processing systems,", "citeRegEx": "Dasgupta.,? \\Q2005\\E", "shortCiteRegEx": "Dasgupta.", "year": 2005}, {"title": "Coarse sample complexity bounds for active learning", "author": ["S. Dasgupta"], "venue": "Advances in neural information processing systems,", "citeRegEx": "Dasgupta.,? \\Q2006\\E", "shortCiteRegEx": "Dasgupta.", "year": 2006}, {"title": "Analysis of perceptron-based active learning", "author": ["S. Dasgupta", "A. Kalai", "C. Monteleoni"], "venue": "Learning Theory,", "citeRegEx": "Dasgupta et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Dasgupta et al\\.", "year": 2005}, {"title": "Selective sampling using the query by committee algorithm", "author": ["Y. Freund", "H.S. Seung", "E. Shamir", "N. Tishby"], "venue": "Machine learning,", "citeRegEx": "Freund et al\\.,? \\Q1997\\E", "shortCiteRegEx": "Freund et al\\.", "year": 1997}, {"title": "Active learning for smooth problems", "author": ["E. Friedman"], "venue": "In Proceedings of the 22nd Conference on Learning Theory,", "citeRegEx": "Friedman.,? \\Q2009\\E", "shortCiteRegEx": "Friedman.", "year": 2009}, {"title": "Query by committee made real", "author": ["R. Gilad-Bachrach", "A. Navot", "N. Tishby"], "venue": "Advances in Neural Information Processing Systems (NIPS),", "citeRegEx": "Gilad.Bachrach et al\\.,? \\Q2005\\E", "shortCiteRegEx": "Gilad.Bachrach et al\\.", "year": 2005}, {"title": "Adaptive submodularity: A new approach to active learning and stochastic optimization", "author": ["D. Golovin", "A. Krause"], "venue": "In Proceedings of International Conference on Learning Theory (COLT),", "citeRegEx": "Golovin and Krause.,? \\Q2010\\E", "shortCiteRegEx": "Golovin and Krause.", "year": 2010}, {"title": "Teaching dimension and the complexity of active learning", "author": ["S. Hanneke"], "venue": "In COLT,", "citeRegEx": "Hanneke.,? \\Q2007\\E", "shortCiteRegEx": "Hanneke.", "year": 2007}, {"title": "Adaptive rates of convergence in active learning", "author": ["S. Hanneke"], "venue": "In COLT,", "citeRegEx": "Hanneke.,? \\Q2009\\E", "shortCiteRegEx": "Hanneke.", "year": 2009}, {"title": "On the size of weights for threshold gates", "author": ["J. H\u00e5stad"], "venue": "SIAM Journal on Discrete Mathematics,", "citeRegEx": "H\u00e5stad.,? \\Q1994\\E", "shortCiteRegEx": "H\u00e5stad.", "year": 1994}, {"title": "Hit-and-run mixes fast", "author": ["L. Lov\u00e1sz"], "venue": "Mathematical Programming,", "citeRegEx": "Lov\u00e1sz.,? \\Q1999\\E", "shortCiteRegEx": "Lov\u00e1sz.", "year": 1999}, {"title": "Lectures on discrete geometry, volume 212", "author": ["J. Matou\u0161ek"], "venue": null, "citeRegEx": "Matou\u0161ek.,? \\Q2002\\E", "shortCiteRegEx": "Matou\u0161ek.", "year": 2002}, {"title": "Employing em in pool-based active learning for text classification", "author": ["A. McCallum", "K. Nigam"], "venue": "In Proceedings of ICML-98, 15th International Conference on Machine Learning,", "citeRegEx": "McCallum and Nigam.,? \\Q1998\\E", "shortCiteRegEx": "McCallum and Nigam.", "year": 1998}, {"title": "Theory of majority decision elements", "author": ["S. Muroga", "I. Toda", "S. Takasu"], "venue": "Journal of the Franklin Institute,", "citeRegEx": "Muroga et al\\.,? \\Q1961\\E", "shortCiteRegEx": "Muroga et al\\.", "year": 1961}, {"title": "Query by committee", "author": ["H.S. Seung", "M. Opper", "H. Sompolinsky"], "venue": "In Proceedings of the fifth annual workshop on Computational learning theory,", "citeRegEx": "Seung et al\\.,? \\Q1992\\E", "shortCiteRegEx": "Seung et al\\.", "year": 1992}, {"title": "Probability of error for optimal codes in a gaussian channel", "author": ["C.E. Shannon"], "venue": "Bell System Technical Journal,", "citeRegEx": "Shannon.,? \\Q1959\\E", "shortCiteRegEx": "Shannon.", "year": 1959}, {"title": "Support vector machine active learning with applications to text classification", "author": ["S. Tong", "D. Koller"], "venue": "The Journal of Machine Learning Research,", "citeRegEx": "Tong and Koller.,? \\Q2002\\E", "shortCiteRegEx": "Tong and Koller.", "year": 2002}, {"title": "For both ALuMA and QBC, we used a fixed number of mixing iterations for hit-and-run", "author": ["Gilad-Bachrach"], "venue": null, "citeRegEx": "Gilad.Bachrach,? \\Q2005\\E", "shortCiteRegEx": "Gilad.Bachrach", "year": 2005}], "referenceMentions": [{"referenceID": 17, "context": "Pool-based active learning [McCallum and Nigam, 1998] is useful in many data-laden applications, where unlabeled data is abundant but labeling is expensive.", "startOffset": 27, "endOffset": 53}, {"referenceID": 4, "context": "For example, the CAL algorithm [Cohn et al., 1994] selects an instance at random and queries its label only if there are two hypotheses in the version space that disagree on its label.", "startOffset": 31, "endOffset": 50}, {"referenceID": 4, "context": "For example, the CAL algorithm [Cohn et al., 1994] selects an instance at random and queries its label only if there are two hypotheses in the version space that disagree on its label. Tong and Koller [2002] proposed a more aggressive greedy selection policy for halfspaces: query the instance from the pool that splits the version space as evenly as possible, in terms of volume in R.", "startOffset": 32, "endOffset": 208}, {"referenceID": 1, "context": "They also showed that the worst-case label complexity of an approximate greedy rule is at most O(log(1/pmin) \u00b7OPTmax), thus exending a result of Arkin et al. [1993].", "startOffset": 145, "endOffset": 165}, {"referenceID": 18, "context": "In particular, by proving a variant of a result due to Muroga et al. [1961], we show that if the examples in the pool X are stored using number of a finite accuracy 1/c, then pmin \u2265 (c/d) 2 .", "startOffset": 55, "endOffset": 76}, {"referenceID": 2, "context": "Balcan et al. [2007] proposed an active learning algorithm with dimension-independent guarantees under a margin assumption.", "startOffset": 0, "endOffset": 21}, {"referenceID": 11, "context": "When P (h) pmin, the bound in Theorem 1 is stronger than the guarantee \u2200h \u2208 H, N(A, h) \u2264 O(log(1/pmin) \u00b7 OPTmax), obtained by Golovin and Krause [2010]. Importantly, the following theorem shows that this improved bound cannot be obtained for a general approximate-greedy algorithm, even in a simple case such as the problem of thresholds on the line.", "startOffset": 126, "endOffset": 152}, {"referenceID": 11, "context": "We can consider the minimal possible margin, \u03b3 = minh\u2208W \u03b3(h), and deduce from Theorem 4, or from the results of Golovin and Krause [2010], a uniform approximation factor of O(d log(1/\u03b3)).", "startOffset": 112, "endOffset": 138}, {"referenceID": 17, "context": "3, is an adaptation of a classic result due to Muroga et al. [1961]. We conclude that pmin = \u03a9((c/d) 2 ), and deduce an approximation factor of d log(d/c) for the worst-case label complexity of ALuMA.", "startOffset": 47, "endOffset": 68}, {"referenceID": 14, "context": "The exponential dependence of the minimal margin on d here is necessary: As shown in H\u00e5stad [1994], the minimal margin can indeed be exponentially small, even if the points are taken only from {\u00b11}.", "startOffset": 85, "endOffset": 99}, {"referenceID": 3, "context": "The problem of calculating the volume of such convex sets in R is #P-hard if d is not fixed [Brightwell and Winkler, 1991].", "startOffset": 92, "endOffset": 122}, {"referenceID": 16, "context": "Moreover, deterministically approximating the volume is NP-hard in the general case [Matou\u0161ek, 2002].", "startOffset": 84, "endOffset": 100}, {"referenceID": 3, "context": "The problem of calculating the volume of such convex sets in R is #P-hard if d is not fixed [Brightwell and Winkler, 1991]. Moreover, deterministically approximating the volume is NP-hard in the general case [Matou\u0161ek, 2002]. Luckily, it is possible to approximate this volume using randomization. Specifically, in Kannan et al. [1997] a randomized algorithm is provided such that for any convex body K \u2286 R with an efficient separation oracle, with probability at least 1 \u2212 \u03b4 the algorithm returns a non-negative number \u0393 such that (1 \u2212 )\u0393 < P (K) < (1 + )\u0393.", "startOffset": 93, "endOffset": 336}, {"referenceID": 15, "context": "We can efficiently draw a hypothesis approximately uniformly from V , by using the hit-and-run algorithm [Lov\u00e1sz, 1999].", "startOffset": 105, "endOffset": 119}, {"referenceID": 11, "context": "Golovin and Krause [2010] prove that since A is \u03b1-approximately greedy, for any pool-based algorithm alg, favg(A, n) \u2265 favg(alg, k)\u2212 exp(\u2212n/\u03b1k).", "startOffset": 0, "endOffset": 26}, {"referenceID": 4, "context": "Note that the CAL algorithm Cohn et al. [1994], which we discuss in Section 6, can be seen as implementing a mellow version of this approach, since it decreases the so-called \u201cdisagreement region\u201d in each iteration.", "startOffset": 28, "endOffset": 47}, {"referenceID": 5, "context": "This is not the case, as evident by the following example, which is an adaptation of an example from Dasgupta [2005].", "startOffset": 101, "endOffset": 117}, {"referenceID": 20, "context": "It was shown in Shannon [1959] that for any m \u2264 O(1/\u03b3), there exists a set of points that satisfy the conditions above.", "startOffset": 16, "endOffset": 31}, {"referenceID": 4, "context": ", 1997], the CAL algorithm [Cohn et al., 1994], and the Active Perceptron [Dasgupta et al.", "startOffset": 27, "endOffset": 46}, {"referenceID": 7, "context": ", 1994], and the Active Perceptron [Dasgupta et al., 2005].", "startOffset": 35, "endOffset": 58}, {"referenceID": 6, "context": "To demonstrate the effect of the second property described above\u2014being aggressive versus being mellow, we consider the following example, adapted slightly from [Dasgupta, 2006].", "startOffset": 160, "endOffset": 176}, {"referenceID": 2, "context": "These examples strengthen the observation of Balcan et al. [2007] that in some cases a more aggressive approach is preferable.", "startOffset": 45, "endOffset": 66}, {"referenceID": 21, "context": "The aggressive strategies are represented in this evaluation by ALuMA and one of the heuristics proposed by Tong and Koller [2002]. The mellow strategy is represented by CAL.", "startOffset": 108, "endOffset": 131}, {"referenceID": 0, "context": "In the limit of an infinite number of unlabeled examples, if the distribution has a non-zero support on the entire domain, the pool-based setting becomes identical to the setting of membership queries [Angluin, 1988].", "startOffset": 201, "endOffset": 216}], "year": 2017, "abstractText": "We study pool-based active learning of halfspaces, in which a learner receives a pool of unlabeled examples, and iteratively queries a teacher for the labels of examples from the pool, in order to identify all the labels of pool examples. We revisit the idea of greedily selecting examples to label, and use it to derive an efficient algorithm, called ALuMA, that approximates the optimal label complexity for a given pool in R. We show that ALuMA obtains an O(d log(d)) approximation factor if the examples in the pool are numbers with a finite accuracy. We further prove a result for general hypothesis classes, showing that a slight change to the greedy approach leads to an improved target-dependent guarantee on the label complexity. In particular, we conclude a better guarantee for ALuMA if the target hypothesis has a large margin. We further compare our approach to other common active learning strategies, and provide a theoretical and empirical evaluation of the advantages and disadvantages of the approach.", "creator": "LaTeX with hyperref package"}}}