{"id": "1305.0574", "review": {"conference": "arxiv", "VERSION": "v1", "DATE_OF_SUBMISSION": "2-May-2013", "title": "Extending Modern SAT Solvers for Enumerating All Models", "abstract": "specifically in this paper, we address the problem of enumerating all models of a boolean formula in conjunctive normal form ( cnf ). we propose an extension of modern cdcl - based sat matching solvers to deal with this fundamental problem. then, we provide potentially an integrated experimental evaluation of solving our proposed sat likelihood model enumeration algorithms on both satisfiable sat instances taken precisely from the last sat challenge and on instances from the sat - based naive encoding of sequence mining problems.", "histories": [["v1", "Thu, 2 May 2013 20:37:29 GMT  (161kb,D)", "http://arxiv.org/abs/1305.0574v1", null], ["v2", "Mon, 6 May 2013 20:45:25 GMT  (0kb,I)", "http://arxiv.org/abs/1305.0574v2", "This paper is withdrawn by the authors due to a missing reference. The authors work further on this issue and conduct exhaustive experimental comparison with other related works"]], "reviews": [], "SUBJECTS": "cs.AI", "authors": ["said jabbour", "lakhdar sais", "yakoub salhi"], "accepted": false, "id": "1305.0574"}, "pdf": {"name": "1305.0574.pdf", "metadata": {"source": "CRF", "title": "Extending Modern SAT Solvers for Enumerating All Models", "authors": ["Said Jabbour", "Lakhdar Sais", "Yakoub Salhi"], "emails": [], "sections": [{"heading": "1 Introduction", "text": "Today, SAT has gained a considerable audience with the advent of a new generation of solvers able to solve large instances encoding real-world problems, and the demonstration that these solvers represent important low-level building blocks for many important fields, e.g., SAT modulo theory (SMT), Model checking, Quantified boolean formulas (QBF) , Maximum Satisfiability (MaxSAT), Pseudo boolean (PB), Knowledge compilation (KC), etc. In addition to the traditional applications of SAT to hardware and software formal verification, this impressive progress led to increasing use of SAT technology to solve new real-world applications such as planning, bioinformatics, cryptography and data mining. However, these impressive progress mainly concern the decision problem and some of its extensions (e.g. SMT, Max-SAT, QBF). In this paper, we deal with the problem of enumerating all the models of a CNF formula. This problem has been identified to be important in many application domains such as unbounded model checking, knowledge compilation, etc. Comparatively to other issues in SAT, enumerating all models or even models with some properties (e.g. preferred models) has not received much attention worthy of their theoretical and practical interests. Most of the recent proposed model enumeration approaches are built on the top of modern SAT solvers. These implementations are usually based on the use of additional clauses, called blocking clauses, to ensure an enumeration of all solutions without repetition [15,4,16,11]. Its naive form consists in adding the negation of the current found model. This concept is completely different from the notion of blocked clauses defined in [13]. Other improvements have been proposed to this bocked-clause based enumeration solvers (e.g. [11,16]). The goal is to find the smallest partial assignment satisfying the formula and covering the model found by the solver. A partial assignment of size k on a formula containing n variables represents 2n\u2212k models, and its associated blocking clause will prevents the enumeration of such a set of models. ar X iv :1 30 5. 05 74 v1 [ cs .A\nI] 2\nM ay\n2 01\n3\nAll these blocking clauses based enumeration solvers are designed on the top of CDCL based SAT solvers. The main motivation is to benefit from the practical efficiency of SAT solvers for finding a single model. However, these kind of approaches are clearly impractical. Indeed, in addition to classical clauses learned form conflicts, one might add an exponential number of blocking clauses in the worst case.\nOur study is primarily motivated by our recent works on SAT-based data mining [5], and the crucial need for efficient techniques to enumerate all models of a given CNF theory. Recently, Luc De Raedt et al. [19] initiated an important research issue on the use of constraint programming (CP) to model and solve classical data mining problem (e.g. [20,12]). This new framework offers a declarative and flexible representation model. New constraints often require new implementations in specialized approaches, while they can be easily integrated in such a CP framework. It allows data mining problems to benefit from several generic and efficient CP solving techniques. The authors show how some typical constraints (e.g. frequency, maximality, closeness, monotonicity) used in itemset mining can be formulated for use in CP [9]. On these kind of problems, most of the constraints involve Booelan variables. This motivated the recent use of SAT-based approaches for both itemset mining [10] and sequence mining [5]. These new applications for SAT provide us with a new challenging issue: the design of efficient SAT enumeration algorithms.\nIn this paper, we give our first results on this important problem. We propose an extension of modern SAT solvers to enumerate all the models of a CNF formula. Our approach is based on a combination of DPLL-like procedure with CDCL based SAT solvers. To evaluate our proposed approach, we consider our encoding of the problem of enumerating frequent patterns in a sequence with wildcards. We also conducted extensive experiments of our proposed SAT enumeration solver on satisfiable SAT instances taken from the last SAT challenge. The experimental results, clearly show that our proposed model enumeration algorithm is significantly better than those based on CDCL-based solvers with blocking clauses."}, {"heading": "2 Technical Background and preliminary definitions", "text": "Let P be a propositional language of formulas FP built in the standard way, using usual logical connectives (\u2228, \u2227, \u00ac, \u21d2, \u21d4) and a set of propositional variables. Using linear Tseitin encoding, any Boolean formula f \u2208 FP can be translated to CNF (f), a formula in conjonctive normal form. A CNF formula \u03a6 is a set (interpreted as a conjunction) of clauses, where a clause is a set (interpreted as a disjunction) of literals. A literal is a positive (x) or negated (\u00acx) propositional variable. The two literals x and \u00acx are called complementary. We denote by l\u0303 the complementary literal of l. More precisely, if l = x then l\u0303 is \u00acx and if l = \u00acx then l\u0303 is x.\nA unit clause is a clause containing only one literal (called unit literal). An empty clause, noted \u22a5, is interpreted as false (unsatisfiable), whereas an empty\nCNF formula, noted >, is interpreted as true (satisfiable). We define \u03a6|x = {c | c \u2208 \u03a6, {x,\u00acx} \u2229 c = \u2205} \u222a {c\\{\u00acx} | c \u2208 \u03a6,\u00acx \u2208 c} as the formula obtained from \u03a6 by assigning the value trueto x. \u03a6\u2217 denotes the formula \u03a6 closed under unit propagation, defined recursively as follows: (1) \u03a6\u2217 = \u03a6 if \u03a6 does not contain any unit clause, (2) \u03a6\u2217 =\u22a5 if \u03a6 contains two unit clauses {x} and {\u00acx}, (3) otherwise, \u03a6\u2217 = (\u03a6|x)\u2217 where x is the literal of a unit clause of \u03a6. An assignment I of \u03a6 is a function which associates a value I(x) \u2208 {false, true} to some of the variables of \u03a6. I is complete if it assigns a value to every variable of \u03a6, and partial otherwise. A model of a formula \u03a6 is an assignment that makes the formula true. The SAT problem consists in determining if a Boolean formula expressed in CNF admits a model or not. For an extensive overview about SAT and SAT solvers, we refer the reader to [3]."}, {"heading": "3 Enumerating all models of CNF formulae", "text": "In this section, we describe our simple extension of modern SAT solvers to deal with the problem of enumerating all models of a CNF theory. As mentioned in the introduction, the first naive way to extend modern SAT solvers to solve the problem of enumerating all modes of a CNF formula consists in adding a blocking clause each time a model is found. We call this first extension BC-Enum, for blocking clause based enumeration solver. The enumeration solver BC-Enum and its improved variants admit several drawbacks. The first problem is that the space complexity of BC-Enum-like algorithm is exponential in the worst case. Indeed, in addition to the clauses learned at each conflict by the CDCL-based SAT solver, the number of added blocking clauses remains very important on problems with a huge number of models. The second problem is related to the use of VSIDS variable ordering heuristic more suitable for finding a single model or proving that such a model does not exist. It is well known that the ordering used for enumerating all models may change radically the computational complexity [6]. In [7], Dechter and Itai have shown that enumerating all models of a given theory can be performed in time proportional to the product of the number of models and the effort needed to generate each model in isolation. Consequently, one possible way to improve such enumeration process is to search for all the models near the model found at a given iteration.\nMotivated by the above observations, we propose in this paper a simple extension to CDCL based solvers in order to enumerate all models of a CNF formula. Our algorithm, called BR-Enum (for Backtrack with Reason), is obtained from CDCL based SAT solver S in the following way:\n1. Search for the first model using S without any modification 2. After finding the first model, run S while inhibiting the restart (without\nrestart) 3. Let < x1, x2 . . . xn > be the sequence of decision literals of the branch asso-\nciated to the current model. The algorithm backtrack to the decision level n\u2212 1 and propagate the literal x\u0303n thanks to the reason (x\u03031 \u2228 x\u03032 \u2228 \u00b7 \u00b7 \u00b7 \u2228 x\u0303n).\nOur proposal aims to eliminate the main limitations of the BC-Enum algorithm identified previously."}, {"heading": "4 Application to Sequence Mining", "text": ""}, {"heading": "4.1 Frequent pattern mining", "text": "We here give a description of the problem of enumerating all frequent patterns with a wildcards in a sequence. The definitions and notations that we use are according to [17,18,1].\nLet \u03a3 be a finite set of items, called alphabet. A sequence s over \u03a3 is a successive sequence of symbols s0 . . . sn\u22121 belonging to \u03a3. The length of s is denoted by |s| (|s| = n). Furthermore, we denote by Ps the set {0 . . . |s| \u2212 1} of all the locations of the symbols of s. A wildcard (or don\u2019t care) is an additional symbol \u25e6 not belonging to \u03a3 (\u25e6 /\u2208 \u03a3). This symbol matches any symbol of the alphabet including itself.\nDefinition 1 (Pattern). A pattern over \u03a3 is a sequence p0 . . . pm\u22121, where p0 \u2208 \u03a3, pm\u22121 \u2208 \u03a3, and pi \u2208 \u03a3 \u222a {\u25e6}.\nNote that the first and the last locations of a pattern must both contain symbols in the alphabet, i.e. p1 6= \u25e6 and pm 6= \u25e6.\nDefinition 2 (Inclusion). A pattern p = p1 . . . pm is included in a sequence s = s1 . . . sn at the location l \u2208 Ps, denoted p \u2286l s, if \u2200i \u2208 {0 . . .m\u22121}, pi = sl+i or pi = \u25e6.\nThe cover of a pattern p in a sequence s is defined as the set Ls(p) = {l \u2208 Ps|p \u2286l s}. Moreover, the support of p in s is defined as the value |Ls(p)|. We write p \u2286 s if there exists a location l in Ps such that p \u2286l s.\nDefinition 3 (Motif/Frequent pattern). Let s be a sequence, p a pattern and \u03bb a minimal support threshold such that \u03bb > 1. we say that p is a motif (or frequent pattern) in s w.r.t. \u03bb if its support is greater or equal to \u03bb (|Ls(p)| > \u03bb).\nWe denoted by M\u03bbs the set of all the motifs of s w.r.t. \u03bb.\nFor instance, let us consider the sequence s = abbabcabca and the pattern p = a \u25e6 \u25e6b. We have Ls(p) = {0, 3, 6} since p \u22860 s, p \u22863 s and p \u22866 s,. In this case, if we consider that the minimal support threshold is equal to 3, then the pattern p is a motif of s.\nDefinition 4 (EMS). Let s be a sequence and \u03bb > 1 a minimal support threshold (a quorum). The problem of Enumerating all Motifs in a Sequence (EMS) consists in enumerating all the elements ofM\u03bbs ."}, {"heading": "4.2 A SAT-based Enconding for EMS", "text": "We now describe the SAT-based encoding for EMS proposed in [5]. It follows the constraint programing (CP) based approach proposed by Luc De Raedt et al. in [19] for itemset mining. The SAT and CP based approaches in data mining are proposed in order to offer declarative and flexible frameworks. Indeed, new constraints require often new implementations in specialized approaches, while they can be easily integrated in such frameworks.\nLet \u03a3 = {a0, . . . , al\u22121} be an alphabet, s a sequence over \u03a3 of length n and \u03bb a minimal support threshold. One can easily see that the length of each motif is smaller or equal to m = n\u2212 \u03bb + 1. In this context, we set the length of each candidate pattern to the upper bound m and we complete the sequence s on the right hand side with m\u2212 1 wildcards.\nLet p = p0 . . . pm\u22121 be a candidate pattern. We associate to each pi (0 6 i 6 m \u2212 1) a set of |\u03a3| + 1variables {pi = a0, . . . , pi = aj . . . pi = al\u22121, pi = \u25e6}. In the sequel, for simplicity reason, we note the literal \u00ac(pi = aj) as pi 6= aj .\nDomain Constraint In the following constraint we encode the fact that for all i \u2208 {0, . . . ,m\u2212 1}, pi \u2208 \u03a3 \u222a {\u25e6}:\nm\u22121\u2227 i=0 [pi = \u25e6 \u2228 |\u03a3|\u22121\u2228 j=0 (pi = aj)] (1)\nm\u22121\u2227 i=0 [ \u2227 06j<k6|\u03a3|\u22121 (pi 6= aj \u2228 pi 6= ak) \u2227 \u2227 06j6|\u03a3|\u22121 (pi 6= \u25e6 \u2228 pi 6= aj)] (2)\nIn the domain constraint, the two formulas correspond to the at least and at most constraints.\nSince the first symbol must be an element of the alphabet, one adds the following unary constraint (unit clause):\np1 6= \u25e6 (3)\nLocation Constraint The following constraint, denoted by loc(k, p, s), expresses that p is located in s at position k (p \u2286l s):\n(p0 = sk) \u2227 [ m\u22121\u2227 i=1 (pi = \u25e6 \u2228 pi = sk+i\u22121)] (4)\nSupport Constraint The following constraint allows us to capture the locations where the candidate pattern is included in the sequence s:\nn\u22121\u2227 k=0 (bk \u21d4 loc(k, p, s)) (5)\nwhere b0 . . . bn\u22121 are n new Boolean variables. Note that bk = true if the pattern p is located at the position k in s; false otherwise.\nFrequency Constraint In the problem of enumerating all the frequent patterns in s w.r.t. \u03bb, we need to express that the candidate pattern occurs at least \u03bb times. This property is expressed by the following cardinality constraint:\nn\u22121\u2211 k=0 bk > \u03bb (6)\nThe frequency constraint corresponds to a boolean cardinality constraint. In the literature, there are several polynomial encodings of this kind of constraints into a CNF formula. The first linear encoding of the general linear inequalities to CNF have been proposed by J. P. Warners [22]. Recently, efficient encoding of the cardinality constraint to CNF have been proposed and most of them try to improve the efficiency of constraint propagation (e.g; [2,21])."}, {"heading": "5 Experiments", "text": "In this section, an experimental evaluation of our approach on large real world instances is given. We compare both BR-Enum and BC-Enum implemented on the top of the state of the art SAT solver MiniSAT 2.2 1.\nWe conducted two kind of experiments. In the first one, we considered the satisfiable SAT instances taken from the SAT Challenge 2012 2 . After 4 hours time limit, only few instances are solved i.e. all the models are found. On the majority of the instances, the number of models is very huge, or the formula contains a small number of models and the proof of the unsatisfiability takes a long time. The results are depicted in Table 1. As we can see on the solved instances, BR-Enum significantly outperform BC-Enum. What is surprising, is that BR-Enum is even better for proving the unsatisfiability after finding the single model of the instance. We recall that both approaches perform the same search until finding the first model. In Table 2, we report on a sample of instances, the number of models computed by both approaches under the time limit of 1 hour. Again the number of models computed by BR-Enum is significantly higher than the number of models computed by BC-Enum.\nIn the second experiment, we consider our SAT-Based encoding of the sequence mining problem (EMS). The datasets are taken from two application domains:\n\u2013 Bioinformatics: proteinic data encoded as a sequence of amino-acid 3. \u2013 Computer security: user data drawn from the command histories of UNIX\ncomputer users4 [14].\nThis experiment aims to analyze the behavior of our proposed algorithm on SAT instances encoding real world enumeration problems. Figure 1 shows the\n1 MiniSAT: http://minisat.se/ 2 http://baldur.iti.kit.edu/SAT-Challenge-2012/ 3 http://www.biomedcentral.com/1471-2105/11/175/additional/ 4 http://kdd.ics.uci.edu/databases/UNIX user data/\nevolution of the computation time when varying the value of the quorum \u03bb. As we can see, on both Bioinformatics (left side) or Computer security (right side) instances, BR-Enum approach leads to important improvements in terms of CPU time.\nIn Table 3 we give more detailed results on some instances. As expected, higher is the number of models, better are the performances of BR-Enum."}, {"heading": "6 Conclusion", "text": "In this paper, we proposed a simple extension of modern SAT solvers to deal with the problem of enumerating all models of a CNF formula. Our extension aims to benefit from the efficiency of SAT solvers for finding a single model, while avoiding the main limitations behind the use of blocking clauses to avoid enumerating the same models. We have shown that our proposed approach outperform blocking clause based enumeration techniques with several orders of magnitude on both satisfiable instances taken from the last SAT challenge and also on the SAT instances encoding the sequence mining problem. In a future work, a first improvement to our new BR-Enum algorithm consists in integrating, when a model is found, the best simplification techniques to derive the smallest possible sub-sequence of decisions that can be extended to the current model by unit propagation. We also plan, to compare our approach with other model enumeration algorithms [8,23]."}], "references": [{"title": "An efficient polynomial space and polynomial delay algorithm for enumeration of maximal motifs in a sequence", "author": ["H. Arimura", "T. Uno"], "venue": "Journal of Combinatorial Optimization,", "citeRegEx": "1", "shortCiteRegEx": "1", "year": 2007}, {"title": "Efficient cnf encoding of boolean cardinality constraints", "author": ["O. Bailleux", "Y. Boufkhad"], "venue": "In CP", "citeRegEx": "2", "shortCiteRegEx": "2", "year": 2003}, {"title": "Handbook of Satisfiability, volume 185 of Frontiers in AI and Applications", "author": ["Armin Biere", "Marijn J.H. Heule", "Hans van Maaren", "Toby Walsh", "editors"], "venue": null, "citeRegEx": "3", "shortCiteRegEx": "3", "year": 2009}, {"title": "Using sat based image computation for reachability analysis", "author": ["Pankaj Chauhan", "Edmund M. Clarke", "Daniel Kroening"], "venue": "Technical report, Technical Report CMUCS-03-151,", "citeRegEx": "4", "shortCiteRegEx": "4", "year": 2003}, {"title": "A sat-based approach for discovering frequent, closed and maximal patterns in a sequence", "author": ["Emmanuel Coquery", "S\u00e4\u0131d Jabbour", "Lakhdar S\u00e4\u0131s", "Yakoub Salhi"], "venue": "In Proceedings of the 20th European Conference on Artificial Intelligence", "citeRegEx": "5", "shortCiteRegEx": "5", "year": 2012}, {"title": "Enumerating all solutions of a boolean csp by non-decreasing weight", "author": ["Nadia Creignou", "Fr\u00e9d\u00e9ric Olive", "Johannes Schmidt"], "venue": "In 14th International Conference on Theory and Applications of Satisfiability Testing", "citeRegEx": "6", "shortCiteRegEx": "6", "year": 2011}, {"title": "Finding all solutions if you can find one", "author": ["Rina Dechter", "Alon Itai"], "venue": "Workshop on Tractable Reasoning,", "citeRegEx": "7", "shortCiteRegEx": "7", "year": 1992}, {"title": "Memory efficient all-solutions sat solver and its application for reachability analysis", "author": ["Orna Grumberg", "Assaf Schuster", "Avi Yadgar"], "venue": "Proceedings of the 5th International Conference on Formal Methods in Computer-Aided Design (FMCAD),", "citeRegEx": "8", "shortCiteRegEx": "8", "year": 2004}, {"title": "Itemset mining: A constraint programming perspective", "author": ["T. Guns", "S. Nijssen", "L. De Raedt"], "venue": null, "citeRegEx": "9", "shortCiteRegEx": "9", "year": 1951}, {"title": "On when and how to use sat to mine frequent itemsets", "author": ["Rui Henriques", "In\u00eas Lynce", "Vasco M. Manquinho"], "venue": "CoRR, abs/1207.6253,", "citeRegEx": "10", "shortCiteRegEx": "10", "year": 2012}, {"title": "Efficient conflict analysis for finding all satisfying assignments of a boolean circuit", "author": ["Hoonsang Jin", "Hyojung Han", "Fabio Somenzi"], "venue": "In In TACAS\u201905,", "citeRegEx": "11", "shortCiteRegEx": "11", "year": 2005}, {"title": "Constraint programming for mining n-ary patterns", "author": ["Mehdi Khiari", "Patrice Boizumault", "Bruno Cr\u00e9milleux"], "venue": "In Proceedings of the 16th International Conference on Principles and Practice of Constraint Programming", "citeRegEx": "12", "shortCiteRegEx": "12", "year": 2010}, {"title": "On a generalization of extended resolution", "author": ["O. Kullmann", "Fachbereich Mathematik"], "venue": "Discrete Applied Mathematics,", "citeRegEx": "13", "shortCiteRegEx": "13", "year": 1997}, {"title": "Filtering techniques for rapid user classification. In AAAI-98/ICML-98 Joint Workshop on AI Approaches to Time-series Analysis, pages", "author": ["T. Lane"], "venue": null, "citeRegEx": "14", "shortCiteRegEx": "14", "year": 1998}, {"title": "Applying sat methods in unbounded symbolic model checking", "author": ["Kenneth L. McMillan"], "venue": "In Proceedings of the 14th International Conference on Computer Aided Verification", "citeRegEx": "15", "shortCiteRegEx": "15", "year": 2002}, {"title": "Good Learning and Implicit Model Enumeration", "author": ["Ant\u00f3nio R. Morgado", "Jo\u00e3o P. Marques-Silva"], "venue": "In International Conference on Tools with Artificial Intelligence", "citeRegEx": "16", "shortCiteRegEx": "16", "year": 2005}, {"title": "Pattern discovery on character sets and real-valued data: Linear bound on irredundant motifs and an efficient polynomial time algorithm", "author": ["L. Parida", "I. Rigoutsos", "A. Floratos", "D. Platt", "Y. Gao"], "venue": "In ACM-SIAM Symposium on Discrete Algorithms,", "citeRegEx": "17", "shortCiteRegEx": "17", "year": 2000}, {"title": "Bases of motifs for generating repeated patterns with wild cards", "author": ["N. Pisanti", "M. Crochemore", "R. Grossi", "M. Sagot"], "venue": "IEEE/ACM TCBB\u20192003,", "citeRegEx": "18", "shortCiteRegEx": "18", "year": 2003}, {"title": "Constraint programming for itemset mining", "author": ["L. De Raedt", "T. Guns", "S. Nijssen"], "venue": "In ACM SIGKDD,", "citeRegEx": "19", "shortCiteRegEx": "19", "year": 2008}, {"title": "Constraint programming for data mining and machine learning", "author": ["Luc De Raedt", "Tias Guns", "Siegfried Nijssen"], "venue": "In Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence (AAAI\u201910),", "citeRegEx": "20", "shortCiteRegEx": "20", "year": 2010}, {"title": "Towards an optimal cnf encoding of boolean cardinality constraints", "author": ["C. Sinz"], "venue": "In CP\u201905,", "citeRegEx": "21", "shortCiteRegEx": "21", "year": 2005}, {"title": "A linear-time transformation of linear inequalities into conjunctive normal form", "author": ["J.P. Warners"], "venue": "Information Processing Letters,", "citeRegEx": "22", "shortCiteRegEx": "22", "year": 1996}, {"title": "Asig: An all-solution sat solver for cnf formulas", "author": ["Weinan Zhao", "Weimin Wu"], "venue": "In 11th International Conference on Computer-Aided Design and Computer Graphics, CAD/Graphics", "citeRegEx": "23", "shortCiteRegEx": "23", "year": 2009}], "referenceMentions": [{"referenceID": 14, "context": "These implementations are usually based on the use of additional clauses, called blocking clauses, to ensure an enumeration of all solutions without repetition [15,4,16,11].", "startOffset": 160, "endOffset": 172}, {"referenceID": 3, "context": "These implementations are usually based on the use of additional clauses, called blocking clauses, to ensure an enumeration of all solutions without repetition [15,4,16,11].", "startOffset": 160, "endOffset": 172}, {"referenceID": 15, "context": "These implementations are usually based on the use of additional clauses, called blocking clauses, to ensure an enumeration of all solutions without repetition [15,4,16,11].", "startOffset": 160, "endOffset": 172}, {"referenceID": 10, "context": "These implementations are usually based on the use of additional clauses, called blocking clauses, to ensure an enumeration of all solutions without repetition [15,4,16,11].", "startOffset": 160, "endOffset": 172}, {"referenceID": 12, "context": "This concept is completely different from the notion of blocked clauses defined in [13].", "startOffset": 83, "endOffset": 87}, {"referenceID": 10, "context": "[11,16]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 15, "context": "[11,16]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 4, "context": "Our study is primarily motivated by our recent works on SAT-based data mining [5], and the crucial need for efficient techniques to enumerate all models of a given CNF theory.", "startOffset": 78, "endOffset": 81}, {"referenceID": 18, "context": "[19] initiated an important research issue on the use of constraint programming (CP) to model and solve classical data mining problem (e.", "startOffset": 0, "endOffset": 4}, {"referenceID": 19, "context": "[20,12]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 11, "context": "[20,12]).", "startOffset": 0, "endOffset": 7}, {"referenceID": 8, "context": "frequency, maximality, closeness, monotonicity) used in itemset mining can be formulated for use in CP [9].", "startOffset": 103, "endOffset": 106}, {"referenceID": 9, "context": "This motivated the recent use of SAT-based approaches for both itemset mining [10] and sequence mining [5].", "startOffset": 78, "endOffset": 82}, {"referenceID": 4, "context": "This motivated the recent use of SAT-based approaches for both itemset mining [10] and sequence mining [5].", "startOffset": 103, "endOffset": 106}, {"referenceID": 2, "context": "For an extensive overview about SAT and SAT solvers, we refer the reader to [3].", "startOffset": 76, "endOffset": 79}, {"referenceID": 5, "context": "It is well known that the ordering used for enumerating all models may change radically the computational complexity [6].", "startOffset": 117, "endOffset": 120}, {"referenceID": 6, "context": "In [7], Dechter and Itai have shown that enumerating all models of a given theory can be performed in time proportional to the product of the number of models and the effort needed to generate each model in isolation.", "startOffset": 3, "endOffset": 6}, {"referenceID": 16, "context": "The definitions and notations that we use are according to [17,18,1].", "startOffset": 59, "endOffset": 68}, {"referenceID": 17, "context": "The definitions and notations that we use are according to [17,18,1].", "startOffset": 59, "endOffset": 68}, {"referenceID": 0, "context": "The definitions and notations that we use are according to [17,18,1].", "startOffset": 59, "endOffset": 68}, {"referenceID": 4, "context": "We now describe the SAT-based encoding for EMS proposed in [5].", "startOffset": 59, "endOffset": 62}, {"referenceID": 18, "context": "in [19] for itemset mining.", "startOffset": 3, "endOffset": 7}, {"referenceID": 21, "context": "Warners [22].", "startOffset": 8, "endOffset": 12}, {"referenceID": 1, "context": "g; [2,21]).", "startOffset": 3, "endOffset": 9}, {"referenceID": 20, "context": "g; [2,21]).", "startOffset": 3, "endOffset": 9}, {"referenceID": 13, "context": "\u2013 Computer security: user data drawn from the command histories of UNIX computer users [14].", "startOffset": 87, "endOffset": 91}, {"referenceID": 7, "context": "We also plan, to compare our approach with other model enumeration algorithms [8,23].", "startOffset": 78, "endOffset": 84}, {"referenceID": 22, "context": "We also plan, to compare our approach with other model enumeration algorithms [8,23].", "startOffset": 78, "endOffset": 84}], "year": 2013, "abstractText": "In this paper, we address the problem of enumerating all models of a Boolean formula in conjunctive normal form (CNF). We propose an extension of CDCL-based SAT solvers to deal with this fundamental problem. Then, we provide an experimental evaluation of our proposed SAT model enumeration algorithms on both satisfiable SAT instances taken from the last SAT challenge and on instances from the SAT-based encoding of sequence mining problems.", "creator": "LaTeX with hyperref package"}}}